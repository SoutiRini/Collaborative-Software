[{"count": 0, "tags": [], "text": "I have a small webapp I deploy to test Flyway (flyway-sample-webapp)\n\nTomcat 8.0.15, extracted from zip, unmodified on Java 1.8.0_20-b26 x64.\n\nIf server.xml contains unpackWARs=\"true\" all is well and it deploys instantly.\n\nIf I set the value to false, it takes several minutes and this is the output I get:\n\n24-Nov-2014 13:35:02.200 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-8080\"]\n24-Nov-2014 13:35:02.238 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n24-Nov-2014 13:35:02.240 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-nio-8009\"]\n24-Nov-2014 13:35:02.242 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n24-Nov-2014 13:35:02.242 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 391 ms\n24-Nov-2014 13:35:02.258 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service Catalina\n24-Nov-2014 13:35:02.259 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.0.15\n24-Nov-2014 13:35:02.274 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive C:\\Programs\\apache-tomcat-8.0.15\\webapps\\ROOT.war\n24-Nov-2014 13:37:44.119 SEVERE [localhost-startStop-1] org.apache.catalina.startup.ContextConfig.processAnnotationsJar Unable to process Jar entry [com/google/cloud/sql/jdbc/internal/ConnectionProperty.class] from Jar [jar:file:/C:/Programs/apache-tomcat-8.0.15/webapps/ROOT.war!/WEB-INF/lib/appengine-api-1.0-sdk-1.9.10.jar] for annotations\n java.io.EOFException\n        at org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readUnsignedShort(FastDataInputStream.java:120)\n        at org.apache.tomcat.util.bcel.classfile.ClassParser.readAttributes(ClassParser.java:110)\n        at org.apache.tomcat.util.bcel.classfile.ClassParser.parse(ClassParser.java:94)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1994)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1944)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1919)\n        at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1880)\n        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1149)\n        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:771)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:305)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5095)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:714)\n        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:917)\n        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1701)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n24-Nov-2014 13:37:58.057 INFO [localhost-startStop-1] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\n24-Nov-2014 13:37:58.220 INFO [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [144] milliseconds.\n24-Nov-2014 13:37:58.232 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployWAR Deployment of web application archive C:\\Programs\\apache-tomcat-8.0.15\\webapps\\ROOT.war has finished in 175,958 ms\n24-Nov-2014 13:37:58.235 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-nio-8080\"]\n24-Nov-2014 13:37:58.240 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-nio-8009\"]\n24-Nov-2014 13:37:58.241 INFO [main] org.apache.catalina.startup.Catalina.startServer startup in 175998 ms\n24-Nov-2014 13:38:08.236 WARNING [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.startup.HostConfig.deployWARs The directory [C:\\Programs\\apache-tomcat-8.0.15\\webapps\\ROOT] will be ignored because the WAR [C:\\Programs\\apache-tomcat-8.0.15\\webapps\\ROOT.war] takes priority and unpackWARs is false\n\nSwitching unpackWARs to true, makes the deployment instant and error-free again.\n\nCheers\nAxel", "attachment_id": null, "id": 179251, "creation_time": "2014-11-24T12:47:40Z", "time": "2014-11-24T12:47:40Z", "creator": "axel@boxfuse.com", "bug_id": 57251, "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 57251, "text": "\n\n*** This bug has been marked as a duplicate of bug 57173 ***", "count": 1, "id": 179252, "time": "2014-11-24T12:59:20Z", "creator": "markt@apache.org", "creation_time": "2014-11-24T12:59:20Z", "is_private": false}, {"count": 2, "tags": [], "creator": "flozano@gmail.com", "text": "\bI can see the \"EOF\" error is duplicate of 57173, but - is the deployment speed also? To me it looks like there is a speed-related regression between 8 and 7.\n\nI have an app which is webapp-3.0, with metadata-complete=true and an empty absolute-ordering element. The WAR is around 80MB.\n\nI am getting:\n - Tomcat 7.0.57, unpackWARs=false: deploys in 30-50 seconds.\n - Tomcat 8.0.17, unpackWARs=false: deploys in 350 seconds.\n - Tomcat 8.0.17, unpackWARs=true: deploys in 30-50 seconds.\n\nCan you please consider reopening?", "id": 180576, "time": "2015-01-26T16:31:17Z", "bug_id": 57251, "creation_time": "2015-01-26T16:31:17Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57251, "text": "- JDK 1.8.0_20 and 31\n- Linux and OS X\n- Slow on Tomcat 8.0.15, 8.0.17\n- OK on Tomcat 7.0.57", "id": 180577, "time": "2015-01-26T16:37:31Z", "creator": "flozano@gmail.com", "creation_time": "2015-01-26T16:37:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "I've collected several stack-traces during slow startup times and, when the startup gets \"stalled\", the stacks look like this:\n\n\"localhost-startStop-1\" #15 daemon prio=5 os_prio=0 tid=0x0000000001954000 nid=0x52d1 runnable [0x00007fb50c625000]\n   java.lang.Thread.State: RUNNABLE\n\tat java.util.zip.Inflater.inflateBytes(Native Method)\n\tat java.util.zip.Inflater.inflate(Inflater.java:259)\n\t- locked <0x00000000dab5ab88> (a java.util.zip.ZStreamRef)\n\tat java.util.zip.InflaterInputStream.read(InflaterInputStream.java:152)\n\tat java.util.zip.ZipInputStream.read(ZipInputStream.java:194)\n\tat java.util.jar.JarInputStream.read(JarInputStream.java:207)\n\tat java.util.zip.ZipInputStream.closeEntry(ZipInputStream.java:140)\n\tat java.util.zip.ZipInputStream.getNextEntry(ZipInputStream.java:118)\n\tat java.util.jar.JarInputStream.getNextEntry(JarInputStream.java:142)\n\tat java.util.jar.JarInputStream.getNextJarEntry(JarInputStream.java:179)\n\tat org.apache.catalina.webresources.JarWarResource.getJarInputStreamWrapper(JarWarResource.java:59)\n\tat org.apache.catalina.webresources.AbstractArchiveResource.getContent(AbstractArchiveResource.java:175)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findResourceInternal(WebappClassLoaderBase.java:2579)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2405)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:854)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1274)\n\t- locked <0x0000000081c173f8> (a org.apache.catalina.loader.WebappClassLoader)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1157)\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:760)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2472)\n\t- locked <0x0000000081c173f8> (a org.apache.catalina.loader.WebappClassLoader)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:854)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1274)\n\t- locked <0x0000000081c173f8> (a org.apache.catalina.loader.WebappClassLoader)\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1157)\n\n\nIt happens from different places:\n - netty loading some classes in io.netty.util.internal.PlatformDependent.getSystemClassLoader\n - spring/aspectj startup in org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression\n\nand I guess many others", "attachment_id": null, "id": 180578, "creation_time": "2015-01-26T17:00:47Z", "time": "2015-01-26T17:00:47Z", "creator": "flozano@gmail.com", "bug_id": 57251, "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "text": "Stalled suggests that the strtup stops which doesn't appear to be the case.\n\nA web application that demonstrated the issue would be a big help.", "id": 180582, "time": "2015-01-26T19:42:43Z", "bug_id": 57251, "creation_time": "2015-01-26T19:42:43Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "Apologies for my poor usage of English with regard to the word \"stalled\" - you're right, it doesn't stop at all, just takes a lot of time.\n\nI've prepared a WAR file which shows the issue.\n\nhttps://github.com/flozano/greenhouse/blob/dev/show_tomcat8_problem/greenhouse-1.0.0.BUILD-SNAPSHOT.war\n\n- Tomcat 8 deployment speed with unpackWARs=\"false\": 24-26 seconds.\n- Tomcat 8 deployment speed with unpackWARs=\"true\": 5-6 seconds.\n- Tomcat 7 deployment speed with unpackWARS=\"false\": 4-5 seconds.\n- Tomcat 7 deployment speed with unpackWARS=\"false\": 4-5 seconds.\n\nHope it helps.\n\nPS: \nThe WAR is a small modification of a pre-existing Spring sample project, don't expect it to work properly, but the startup part works well.", "attachment_id": null, "id": 180585, "creation_time": "2015-01-27T06:14:32Z", "time": "2015-01-27T06:14:32Z", "creator": "flozano@gmail.com", "bug_id": 57251, "is_private": false}, {"count": 7, "tags": [], "bug_id": 57251, "attachment_id": null, "id": 180586, "time": "2015-01-27T06:15:44Z", "creator": "flozano@gmail.com", "creation_time": "2015-01-27T06:15:44Z", "is_private": false, "text": "Correction:\n\n- Tomcat 8 deployment speed with unpackWARs=\"false\": 24-26 seconds.\n- Tomcat 8 deployment speed with unpackWARs=\"true\": 5-6 seconds.\n- Tomcat 7 deployment speed with unpackWARS=\"false\": 4-5 seconds.\n- Tomcat 7 deployment speed with unpackWARS=\"true\": 4-5 seconds."}, {"count": 8, "tags": [], "bug_id": 57251, "attachment_id": null, "id": 180589, "time": "2015-01-27T10:50:50Z", "creator": "markt@apache.org", "creation_time": "2015-01-27T10:50:50Z", "is_private": false, "text": "Thanks for the test case. I'm currently working on a potentially related issue (BZ 57472) so I'll look at this once I have fixed that. I suspect similar root causes - performance issues in the new (in 8.0.x) resources implementation when accessing resources in archives."}, {"count": 9, "tags": [], "bug_id": 57251, "attachment_id": null, "id": 180593, "time": "2015-01-27T16:03:21Z", "creator": "markt@apache.org", "creation_time": "2015-01-27T16:03:21Z", "is_private": false, "text": "The fix for bug 57472 might shave a few seconds of the deployment time but it doesn't appear to make a significant difference.\n\nThe fundamental problem when running from a packed WAR is that to access any resource in a JAR, Tomcat has to do the following:\n- open the WAR\n- get the entry for the JAR\n- get the InputStream for the JAR entry\n- Create a JarInputStream\n- Read the JarInputStream until it finds the entry it wants\n\nThis is always going to be slow.\n\nThe reason that it is fast in Tomcat 7 and earlier took some digging. In unpackWARs is false in Tomcat 7, it unpacks the JARs anyway into the work directory and uses them from there. Performance is therefore comparable with unpackWARs=\"true\".\n\nI haven't made my mind up what is the right thing to do here.\n\nOn one hand, unpackWARS=\"false\" really should mean exactly that. Not \"don't unpack the WAR into the appBase but so unpack the JARs in to the work dir\". You might as well just use unpackWARs=\"true\".\n\nOn the other hand, the performance is clearly worse. It was a factor of 3 on my machine but clearly it varies from machine to machine. It looks to be in the range 3 to 10 times slower - which is not good.\n\nTo throw something else into the mix, static resources will be cached in memory in both cases for improved performance.\n\nAs I ponder what to do about this I do have one question. Why do you want to run with unpackWARs=\"false\"? What is the use case?"}, {"count": 10, "tags": [], "bug_id": 57251, "text": "The deploy/redeploy tooling we have had around since tomcat 6 works that way, and it's easier to manage just a WAR file in webapps than a WAR file and a exploded directory. I seem to recall that keeping them in sync was problematic, as tomcat may be down  when the WAR is reinstalled.\n\nI think there is value in existing tomcat6/7 behaviour - the \"interface\" that users have to deal with is just simpler, and it makes it more difficult to shoot yourself in the foot without paying performance penalty.\n\nIn T8, the current options are either large performance penalty paid or having to deal with a slightly more complex deployment.\n\nI understand the 'unpackWARS=\"false\" really should mean exactly that' statement, but existing behaviour in T6/7 is valuable and is relied upon - so maybe the new 'really don't unpack anything' behaviour could be a separate feature, but existing one in my opinion should still be available.", "id": 180603, "time": "2015-01-27T21:29:21Z", "creator": "flozano@gmail.com", "creation_time": "2015-01-27T21:29:21Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "(In reply to Francisco A. Lozano from comment #10)\n> The deploy/redeploy tooling we have had around since tomcat 6 works that\n> way, and it's easier to manage just a WAR file in webapps than a WAR file\n> and a exploded directory. I seem to recall that keeping them in sync was\n> problematic, as tomcat may be down  when the WAR is reinstalled.\n\nYes, that can be a problem. Tomcat doesn't detect that the WAR is newer than the exploded directory.\n\n> I think there is value in existing tomcat6/7 behaviour - the \"interface\"\n> that users have to deal with is just simpler, and it makes it more difficult\n> to shoot yourself in the foot without paying performance penalty.\n\nKeep in mind you are still paying the performance penalty for at least the first load all your static resources (although they are normally then cached in memory which will help until the cache expires).\n\n> In T8, the current options are either large performance penalty paid or\n> having to deal with a slightly more complex deployment.\n> \n> I understand the 'unpackWARS=\"false\" really should mean exactly that'\n> statement, but existing behaviour in T6/7 is valuable and is relied upon -\n> so maybe the new 'really don't unpack anything' behaviour could be a\n> separate feature, but existing one in my opinion should still be available.\n\nThat would mean adding back in the \"unpack the JARs anyway if unpackWARs is false\" feature which is do-able but would add complexity to an area where I have been trying to reduce it.\n\nGiven the use case, I'm wondering if making Tomcat's auto-deployment code smart enough to detect that the WAR has been updated even if Tomcat is not running might be a better solution. Something along the lines of a file in the work directory configured with the same last modified time as the WAR. A simple comparison of the last modified time of the two files tells Tomcat if a redploy is required on start.\n\nI did think about caching the JARs in memory (probably only during web application start) but for some applications that could mean significant increases in the memory footprint just to start. I suspect this might cause as many problems as it solves.\n\nOverall, I'm leaning towards a position of finding a better solution to the use cases that mean folks opt to run with unpackWARs set to false. I'd be interested in hearing if there are any other use cases.", "attachment_id": null, "id": 180604, "creation_time": "2015-01-27T22:17:23Z", "time": "2015-01-27T22:17:23Z", "creator": "markt@apache.org", "bug_id": 57251, "is_private": false}, {"count": 12, "tags": [], "text": "One question about your reasoning - what's the point of having unpackWARS=\"false\" option if it's so unusably slow in T8?", "attachment_id": null, "id": 180607, "creator": "flozano@gmail.com", "time": "2015-01-28T01:38:10Z", "bug_id": 57251, "creation_time": "2015-01-28T01:38:10Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "Indeed. Hence my question about use cases.\n\nI would note that there are many folks that are less concerned about slow deployment as long as performance once deployed is acceptable.", "id": 180610, "time": "2015-01-28T07:54:42Z", "creator": "markt@apache.org", "creation_time": "2015-01-28T07:54:42Z", "is_private": false}, {"count": 14, "tags": [], "text": "\"... I'd be interested in hearing if there are any other use cases...\"\n\nHere is my use case for unpackWARs=\"false\":\nOur software product installs for each repository the same set of web applications. If the customer wants to update an application, she usually wants to have it updated for all repositories. To make the update process as simple as possible, the WARs are not stored at Tomcat/webapps but in a directory outside of tomcat. Each WAR is placed there only once. Context container files in Tomcat/conf/Catalina/localhost represent the required web applications and link in their \"docBase\" attribute to the WAR.\n\nWith unpackWARs=\"false\", the startup time in Tomcat 8 is unacceptably slow, usually several minutes. Setting unpackWARs=\"true\" results in an acceptable performance, but it has the downside that Tomcat does not recognize if the WAR was updated and always starts the exploded WAR. \n\nIn our case, WARs are only updated when Tomcat is stopped. I think your suggestion about comparing the last modified times is a reasonable solution (timestamp of WAR compared to timestamp of a file that is created during unpacking).", "attachment_id": null, "id": 180623, "creator": "w.imig@elo.com", "time": "2015-01-28T14:51:41Z", "bug_id": 57251, "creation_time": "2015-01-28T14:51:41Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 57251, "text": "(In reply to Francisco A. Lozano from comment #12)\n> One question about your reasoning - what's the point of having\n> unpackWARS=\"false\" option if it's so unusably slow in T8?\n\nOne valid use case: read-only filesystem (from Tomcat's perspective). unpackWars=\"false\" allows you to run with the host's appBase directory non-writable by Tomcat.\n\nHaving the webapps directory writable by Tomcat is a security concern, especially if Tomcat were exploited in some way... the attacker could deploy an application by dropping a WAR file into that directory. Obviously, there are other ways to attack Tomcat, but this is a legitimate layer of protection.\n\nThe old behavior of unpackWars=\"false\" expanding WAR files into the work/ directory was acceptable from a security perspective, since nothing in the work/ directory could be auto-deployed. Again, there are other security concerns here with the work directory outside the scope of the original question.", "id": 180625, "time": "2015-01-28T14:55:08Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-01-28T14:55:08Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "(In reply to Christopher Schultz from comment #15)\n> (In reply to Francisco A. Lozano from comment #12)\n> > One question about your reasoning - what's the point of having\n> > unpackWARS=\"false\" option if it's so unusably slow in T8?\n> \n> One valid use case: read-only filesystem (from Tomcat's perspective).\n> unpackWars=\"false\" allows you to run with the host's appBase directory\n> non-writable by Tomcat.\n\nThere is nothing stopping users copying an exploded directory into the appBase in the same way a WAR is copied. The ASF's JIRA instance runs this way for exactly the security concerns you cite.\n\nI do not see any security benefits that are unique to unpackWARs=\"false\"", "id": 180626, "time": "2015-01-28T15:13:07Z", "creator": "markt@apache.org", "creation_time": "2015-01-28T15:13:07Z", "is_private": false}, {"count": 17, "tags": [], "text": "(In reply to Mark Thomas from comment #16)\n> There is nothing stopping users copying an exploded directory into the\n> appBase in the same way a WAR is copied. The ASF's JIRA instance runs this\n> way for exactly the security concerns you cite.\n\nYes, but those WARs are being copied locally and can work by using a user other than Tomcat's uid.\n\n> I do not see any security benefits that are unique to unpackWARs=\"false\"\n\nIf Tomcat itself can be remotely exploited to drop a WAR file into webapps/ then it might be auto-deployed without local access (which is what you describe above).", "attachment_id": null, "id": 180629, "creation_time": "2015-01-28T15:45:43Z", "time": "2015-01-28T15:45:43Z", "creator": "chris@christopherschultz.net", "bug_id": 57251, "is_private": false}, {"count": 18, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "This \"feature\" should not have been added in the first place, that's for sure. The [huge] amount of time that was spent on this should have been spent on a better deployer back then.", "id": 180638, "time": "2015-01-29T09:38:49Z", "creator": "remm@apache.org", "creation_time": "2015-01-29T09:38:49Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "(In reply to Christopher Schultz from comment #17)\n> (In reply to Mark Thomas from comment #16)\n> > There is nothing stopping users copying an exploded directory into the\n> > appBase in the same way a WAR is copied. The ASF's JIRA instance runs this\n> > way for exactly the security concerns you cite.\n> \n> Yes, but those WARs are being copied locally and can work by using a user\n> other than Tomcat's uid.\n\nNothing stops this other user from copying an exploded directory to the appBase rather than an unexploded WAR.\n\n> > I do not see any security benefits that are unique to unpackWARs=\"false\"\n> \n> If Tomcat itself can be remotely exploited to drop a WAR file into webapps/\n> then it might be auto-deployed without local access (which is what you\n> describe above).\n\nEither the appBase is writeable (in which case there is a small security risk) or it isn't. A writeable (by the Tomcat user) appBase is independent of whether you deploy applications as WARs or exploded directories.", "id": 180639, "time": "2015-01-29T09:47:14Z", "creator": "markt@apache.org", "creation_time": "2015-01-29T09:47:14Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 57251, "attachment_id": null, "id": 180643, "time": "2015-01-29T12:52:38Z", "creator": "flozano@gmail.com", "creation_time": "2015-01-29T12:52:38Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #19)\n> (In reply to Christopher Schultz from comment #17)\n> > (In reply to Mark Thomas from comment #16)\n> > > There is nothing stopping users copying an exploded directory into the\n> > > appBase in the same way a WAR is copied. The ASF's JIRA instance runs this\n> > > way for exactly the security concerns you cite.\n> > \n> > Yes, but those WARs are being copied locally and can work by using a user\n> > other than Tomcat's uid.\n> \n> Nothing stops this other user from copying an exploded directory to the\n> appBase rather than an unexploded WAR.\n\nBut this other user can be more tightly controlled, because it doesn't execute anything. The user that writes doesn't execute, and the user that executes doesn't write. It's a pretty common security pattern\nhttp://en.wikipedia.org/wiki/W%5EX\n\n> \n> > > I do not see any security benefits that are unique to unpackWARs=\"false\"\n> > \n> > If Tomcat itself can be remotely exploited to drop a WAR file into webapps/\n> > then it might be auto-deployed without local access (which is what you\n> > describe above).\n> \n> Either the appBase is writeable (in which case there is a small security\n> risk) or it isn't. A writeable (by the Tomcat user) appBase is independent\n> of whether you deploy applications as WARs or exploded directories.\n\nBut when you use WARs you hit this issue in Tomcat 8 and not in Tomcat 7/6."}, {"count": 21, "tags": [], "creator": "flozano@gmail.com", "text": "From documentation (http://tomcat.apache.org/tomcat-8.0-doc/config/context.html):\n\n\"Note that WAR files located outside of a Host's appBase are never unpacked.\"\n\nFrom that comment, not fixing this would mean that there would be no way to deploy WARs out of appBase at an acceptable speed?", "id": 180647, "time": "2015-01-29T16:28:49Z", "bug_id": 57251, "creation_time": "2015-01-29T16:28:49Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "text": "(In reply to Francisco A. Lozano from comment #20)\n> (In reply to Mark Thomas from comment #19)\n> > (In reply to Christopher Schultz from comment #17)\n> > > (In reply to Mark Thomas from comment #16)\n> > > > There is nothing stopping users copying an exploded directory into the\n> > > > appBase in the same way a WAR is copied. The ASF's JIRA instance runs this\n> > > > way for exactly the security concerns you cite.\n> > > \n> > > Yes, but those WARs are being copied locally and can work by using a user\n> > > other than Tomcat's uid.\n> > \n> > Nothing stops this other user from copying an exploded directory to the\n> > appBase rather than an unexploded WAR.\n> \n> But this other user can be more tightly controlled, because it doesn't\n> execute anything. The user that writes doesn't execute, and the user that\n> executes doesn't write. It's a pretty common security pattern\n> http://en.wikipedia.org/wiki/W%5EX\n\nWhich is the point I was making. Copying in a WAR that Tomcat doesn't expand or copying in an exploded directory that Tomcat doesn't need to expand, the security benefits are exactly the same (assuming permissions are set correctly).\n\n> > > > I do not see any security benefits that are unique to unpackWARs=\"false\"\n> > > \n> > > If Tomcat itself can be remotely exploited to drop a WAR file into webapps/\n> > > then it might be auto-deployed without local access (which is what you\n> > > describe above).\n> > \n> > Either the appBase is writeable (in which case there is a small security\n> > risk) or it isn't. A writeable (by the Tomcat user) appBase is independent\n> > of whether you deploy applications as WARs or exploded directories.\n> \n> But when you use WARs you hit this issue in Tomcat 8 and not in Tomcat 7/6.\n\nWhich is why we are dicussing whether or not there is any need to run directly from a WAR. The best argument made so far is that it is easier to move around a WAR than an exploded directory but - given expanding a WAR is a one-line script on any platform where you can run Tomcat (you can use jar to unpack the WAR) - that use case doesn't strike me as a particularly strong one.\n\n(In reply to Francisco A. Lozano from comment #21)\n> From documentation\n> (http://tomcat.apache.org/tomcat-8.0-doc/config/context.html):\n> \n> \"Note that WAR files located outside of a Host's appBase are never unpacked.\"\n> \n> From that comment, not fixing this would mean that there would be no way to\n> deploy WARs out of appBase at an acceptable speed?\n\nThat comment is out of date. Tomcat 8 (and possibly 7 - I'd need to check) will unpack it now the various edge cases in the deployer have been cleaned up.", "attachment_id": null, "id": 180648, "creation_time": "2015-01-29T17:06:57Z", "time": "2015-01-29T17:06:57Z", "creator": "markt@apache.org", "bug_id": 57251, "is_private": false}, {"attachment_id": null, "tags": [], "creator": "remm@apache.org", "text": "+1 for dropping that unpackWars feature, if the new resources won't support it that well. It is not very useful, adds complexity, etc, and maybe it allows improving the deployer further.", "count": 23, "id": 180649, "time": "2015-01-29T18:17:23Z", "bug_id": 57251, "creation_time": "2015-01-29T18:17:23Z", "is_private": false}, {"count": 24, "text": "Hi Mark Thomas \n\nWe have two virtual hosts hosting different versions of same names\nAnd they shares some common apps drop in 'common_webapps'\n\n<Host name=\"HOST1\" unpackWARs=\"false\" appBase=\"common_webapps\">\n  <Context path=\"\"     docBase=\"HOST1_web/ROOT.war\"/>\n  <Context path=\"app1\" docBase=\"HOST1_web/app1.war\"/>\n  <Context path=\"app2\" docBase=\"HOST1_web/app2.war\"/>\n</Host>\n\n<Host name=\"HOST2\" unpackWARs=\"false\" appBase=\"common_webapps\">\n  <Context path=\"\"     docBase=\"HOST2_web/ROOT.war\"/>\n  <Context path=\"app1\" docBase=\"HOST2_web/app1.war\"/>\n  <Context path=\"app2\" docBase=\"HOST2_web/app2.war\"/>\n</Host>\n\n\nIf I change the server.xml unpackWARs to true\nHost2 deployment will keep overwriting HOST1's applications\n\nCan you tell me how to avoid this?", "bug_id": 57251, "attachment_id": null, "id": 180716, "time": "2015-02-03T10:14:56Z", "creator": "williamleung2006@gmail.com", "creation_time": "2015-02-03T10:14:56Z", "tags": [], "is_private": false}, {"count": 25, "tags": [], "creator": "flozano@gmail.com", "attachment_id": null, "id": 181103, "time": "2015-02-16T17:34:04Z", "bug_id": 57251, "creation_time": "2015-02-16T17:34:04Z", "is_private": false, "text": "Any decision taken about this issue?"}, {"count": 26, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "Short term, I'm working on adding a feature that detects if a WAR is updated while Tomcat is shut down. Currently, I view that as sufficient to resolve this bug.\n\nMedium to long term I'm thinking about removing the unpackWARs feature and always unpacking into the appBase. Any move in that direction will be preceeded by a discussion on one of the mailing lists - probably the users list since that is where we'd get best feedback on the impact of such a change.", "id": 181460, "time": "2015-03-03T12:00:07Z", "creator": "markt@apache.org", "creation_time": "2015-03-03T12:00:07Z", "is_private": false}, {"count": 27, "text": "Does that address Comment 24 (https://bz.apache.org/bugzilla/show_bug.cgi?id=57251#c24)?", "bug_id": 57251, "attachment_id": null, "id": 181461, "time": "2015-03-03T12:14:05Z", "creator": "flozano@gmail.com", "creation_time": "2015-03-03T12:14:05Z", "tags": [], "is_private": false}, {"count": 28, "tags": [], "text": "(In reply to Francisco A. Lozano from comment #27)\n> Does that address Comment 24\n> (https://bz.apache.org/bugzilla/show_bug.cgi?id=57251#c24)?\n\nShort version:\n- use unique appBase values per Host\n- place the WARs outside all appBases\n- use context.xml files to add apps to a Host\n- leave unpackWARs as the default of true\n\nThe new feature will ensure each Host sees any updates to the WARs even if they are made while Tomcat isn't running.\n\nIf you need any more advice, use the users mailing list.", "attachment_id": null, "id": 181463, "creator": "markt@apache.org", "time": "2015-03-03T12:40:37Z", "bug_id": 57251, "creation_time": "2015-03-03T12:40:37Z", "is_private": false}, {"count": 29, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 181464, "time": "2015-03-03T12:43:47Z", "bug_id": 57251, "creation_time": "2015-03-03T12:43:47Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #26)\n> Medium to long term I'm thinking about removing the unpackWARs feature and\n> always unpacking into the appBase.\n\nI am -1 on removing this feature, as\n\n1) It is a showcase that ServletContext.getRealPath() may return null.\n\n2) Even if we do not fix the slowness, it can be used if there are no jars in the war.\n\nE.g. if all jars are elsewhere outside of the webapp (e.g. mapped from external locations via context.xml)."}, {"count": 30, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 181469, "time": "2015-03-03T14:28:20Z", "bug_id": 57251, "creation_time": "2015-03-03T14:28:20Z", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #29)\n> (In reply to Mark Thomas from comment #26)\n> > Medium to long term I'm thinking about removing the unpackWARs feature and\n> > always unpacking into the appBase.\n> \n> I am -1 on removing this feature, as\n\nFair enough. I'm not that set on removing it at the moment.\n\nGiven the performance issues, my main concern is that for each use case for using unpackWARs=false there is an alternative confiuration approach that doesn't add too much burden to the end users."}, {"count": 31, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "I've added a section to the migration guide for 7.0.x -> 8.0.x covering deployment and the performance drop if unpackWARs=\"false\" is used.\n\nI've added the 'detect WAR has been modified while Tomcat isn't running' feature to trunk and 8.0.x (will be in 8.0.21 onwards).\n\nAs previosuly stated, I believe we have done enough at this point to resolve this issue.", "id": 181485, "time": "2015-03-03T20:52:18Z", "creator": "markt@apache.org", "creation_time": "2015-03-03T20:52:18Z", "is_private": false}, {"count": 32, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "Will this change also make sure that if the context XML file is later removed from conf/Catalina/localhost then the app will not be started?\n\nOne of my reasons for specifying unpackWARs=\"false\" is to have very tight control of which apps are started when Tomcat starts.", "id": 181498, "time": "2015-03-04T12:54:58Z", "creator": "kim@runholt.dk", "creation_time": "2015-03-04T12:54:58Z", "is_private": false}, {"count": 33, "tags": [], "bug_id": 57251, "attachment_id": null, "text": "I had make a workaround for this issue\n\nhttps://github.com/lwr/tomcat8-custom-loader\n\nbecause the some fields are not accessible from tomcat source\n1. org.apache.catalina.webresources.StandardRoot#classResources for writing\n2. org.apache.catalina.webresources.JarWarResourceSet#archivePath for reading\n\na hack (using reflection) must be used.\nIf these fields are renamed in future, the workaround has to fix.\n\nI really hope that tomcat should keep this feature (unpackWARs=false)\nit is useful and meaningful\n\nAnd the problem here is very easy to solve, just unpack the jars to working directory (as TC6 or TC7 does), and leave webapps alone!", "id": 184369, "time": "2015-08-06T04:51:25Z", "creator": "williamleung2006@gmail.com", "creation_time": "2015-08-06T04:51:25Z", "is_private": false}, {"count": 34, "tags": [], "text": "(In reply to Mark Thomas from comment #9)\n> The fix for bug 57472 might shave a few seconds of the deployment time but\n> it doesn't appear to make a significant difference.\n> \n> [...cut...]\n> \n> The reason that it is fast in Tomcat 7 and earlier took some digging. In\n> unpackWARs is false in Tomcat 7, it unpacks the JARs anyway into the work\n> directory and uses them from there. Performance is therefore comparable with\n> unpackWARs=\"true\".\n\nQuestion: If unpack of war in work directory works well, why change?\n\n> [...cut...]\n> \n> As I ponder what to do about this I do have one question. Why do you want to\n> run with unpackWARs=\"false\"? What is the use case?\n\nMore use cases for unpackWARs=false, our is:\n\nMultiple Tomcats with appBase pointing to a NFS directory (mounted read-only). All WARs are versioned (acme##712.war), come from a Nexus server and SHA1/signature is checked before stored in NFS.\n\nUnpacked directories (unpackWARs=true) broken \"inmutable\" infraestruture (humans are prone to \"touch files\" manually), in these cases \"md5sum xxx.war -tomcat-\" vs \"md5sum xxx.war -nexus-\" help to find the problem.\n\n+1 to maintain feature unpackWARs=false.", "attachment_id": null, "id": 198597, "creator": "guillermo.grandes@gmail.com", "time": "2017-04-30T03:03:20Z", "bug_id": 57251, "creation_time": "2017-04-30T03:03:20Z", "is_private": false}]
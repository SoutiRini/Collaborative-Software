[{"count": 0, "tags": [], "creator": "humbedooh@apache.org", "is_private": false, "text": "Whenever I use apr_dbd_get_driver to get a driver, it will clean up nicely if the driver exists, but leak a few kb every time it fails, potentially resulting in MB upon MB of trash piling up in the memory banks.\n\nI've tested with the following snippet that would simulate an apache httpd module starting up:\n\n//--------------------------------------------\nstatic void register_hooks(apr_pool_t *pool) {\n    int x;\n    int rc;\n    apr_pool_t *POOL;\n\tapr_dbd_driver_t* driver;\n\t\n    module_init(pool);\n    ap_hook_handler(plua_handler, NULL, NULL, APR_HOOK_LAST);\n    \n    for (x=0;x<3000;x++) {\n        POOL = 0;\n\t\tdriver = 0;\n        apr_pool_create(&POOL, pool);\n        apr_dbd_init(POOL);\n        rc = apr_dbd_get_driver(POOL, \"nonexistentdriver\", &driver);\n        apr_pool_clear(POOL);\n        apr_pool_destroy(POOL);\n    }\n    \n}\n//--------------------------------------------\n\nIf I replace the \"nonexistentdriver\" element with, per se, \"odbc\" or \"sqlite3\", it will load the driver and clean up nicely with not a drop to spare, but when I use a driver name that it cannot load, it will continue to use new memory, in this case upwards of 30-40MB for those 3,000 attempts in the above snippet.\n\nIs this a bug, and if not, how do I resolve it, so it won't gobble up all my memory?", "id": 153155, "time": "2012-01-25T18:52:44Z", "bug_id": 52528, "creation_time": "2012-01-25T18:52:44Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 52528, "text": "It's not surprising, to be honest. We use a global pool for DSOs and there is some memory allocation from that pool that is done every time a DSO is being loaded. After DSO has been picked up once successfully, it will be picked up again from a hash (ergo, no allocation), but if it was not loaded successfully, the next attempt may allocate more bytes from global dso pool and so on.", "count": 1, "id": 153241, "time": "2012-01-29T07:44:38Z", "creator": "bojan@rexursive.com", "creation_time": "2012-01-29T07:44:38Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bojan@rexursive.com", "text": "Created attachment 28256\nPatch to close the memory leak\n\nDoes this patch make any difference?", "id": 153387, "time": "2012-02-03T03:04:54Z", "bug_id": 52528, "creation_time": "2012-02-03T03:04:54Z", "is_private": false, "attachment_id": 28256}, {"count": 3, "tags": [], "bug_id": 52528, "attachment_id": 28256, "id": 153390, "time": "2012-02-03T05:29:13Z", "creator": "bojan@rexursive.com", "creation_time": "2012-02-03T05:29:13Z", "is_private": false, "text": "Comment on attachment 28256\nPatch to close the memory leak\n\nDoesn't help."}, {"count": 4, "tags": [], "bug_id": 52528, "attachment_id": null, "is_private": false, "id": 153459, "time": "2012-02-05T07:30:09Z", "creator": "bojan@rexursive.com", "creation_time": "2012-02-05T07:30:09Z", "text": "Can I ask here, why do you need to pass strings that are definitely not DB driver names into this function?"}, {"count": 5, "tags": [], "creator": "sf@sfritsch.de", "is_private": false, "text": "I think apr_dbd_get_driver() should not ignore the passed in pool but pass it to apu_dso_load(). The latter will only use it for temporary data, anyway, and load the dso with the global pool.\n\napr_dso_load() (apr_, not apu_) will still allocate the size of a apr_dso_handle_t on failure, but that's much less than what apu_dso_load() will allocate for pathnames, etc.", "id": 161102, "time": "2012-08-05T21:48:53Z", "bug_id": 52528, "creation_time": "2012-08-05T21:48:53Z", "attachment_id": null}]
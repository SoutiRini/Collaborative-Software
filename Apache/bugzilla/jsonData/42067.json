[{"count": 0, "tags": [], "creator": "paul@vinkenoog.nl", "attachment_id": null, "is_private": false, "id": 101510, "time": "2007-04-07T08:34:48Z", "bug_id": 42067, "creation_time": "2007-04-07T08:34:48Z", "text": "This patch re-implements the full internal link functionality in the PDF output.\nBookmarks, basic-links and named destinations again point to the exact spot\ninstead of the top of the page. The intermediate area tree XML format is also\nsupported (except for named destinations).\n\nThe target PageViewport is still determined during the layout phase; the on-page\nposition is calculated in PDFRenderer. Note that the code could be greatly\nsimplified if we moved everything to the renderer. This wouldn't break anything\nin FOP, but it would prevent custom renderers from getting the target\nPageViewport key. The patch itself also breaks renderers who pick up that key\n(as the type of the InternalLink trait has changed), but not beyond repair: all\nthat's needed is a minor code change wherever that trait is read and the caller\nexpects a String.\n\nThe vast majority of changes are in PDFRenderer, PDFFactory, XMLRenderer and\nAreaTreeParser. But some other modifications were also required (or at least\nhighly desired). The most important of them are:\n- PageViewport needs to know for what IDs it is the first PV, independently of\nATH. This info is needed in the renderer.\n- The dummy area generated by a fo:wrapper must be added to the area tree, at\nleast if it has an ID. (DocBook generates empty wrappers for <indexterm>s.)\n[Note: I kept this a \"generic\" InlineArea. But maybe it would be better to\ncreate a subclass, e.g. DummyInlineArea.]\n- Two extra constructors for BookmarkData, for stuff read back from the area\ntree XML. Also made the tagging of subdata as \"unresolved\" conditional, because\nbookmarks read from AT XML are already resolved.\n- To avoid code duplication (and divergence), the actual adding of an\nINTERNAL_LINK trait to an area is now done exclusively in the LinkResolver.\n- Created an additional constructor for PDFDestination.\n- New method PDFState.getBaseTransform() returns the transformation to be used\nfor fixed-positioned areas.\n\nI also added some helper functions here and there to move duplicated code into\n(esp. in PDFFactory). And on at least two occasions I changed existing comments\nbecause they puzzled me rather than helping me understand the purpose of the\ncommented-upon object. Whether all these changes are acceptable is of course up\nto the team. If any changes or extensions are required, I'm willing to provide them."}, {"count": 1, "tags": [], "bug_id": 42067, "attachment_id": 19922, "id": 101511, "creation_time": "2007-04-07T08:37:54Z", "time": "2007-04-07T08:37:54Z", "creator": "paul@vinkenoog.nl", "text": "Created attachment 19922\nProposed patch file", "is_private": false}, {"count": 2, "tags": [], "text": "First of all, thanks a lot for working on this patch, Paul. I've looked at it\nduring the last two days since I realized I couldn't really apply my own changes\n[1] in this area without processing your patch first because of possible\nconflicts. Anyway, in my own tests and your patch locally applied, none of the\nGoTo Actions get properly positioned since PageViewport.setFirstWithID() is\nnever called (except from the AreaTreeParser which is only active in special\nenvironments. PDFRenderer.getTargetableID() never returns an ID because those\n\"first IDs\" are not filled. Can you comment on that?\n\nI'm wondering if it weren't simpler just to track \"first IDs\" inside PDFRenderer\nonly, i.e. whenever an area with an ID is encountered its position is recorded.\nIf later the same ID is recorded but from a page logically before the earlier\npage (out-of-order rendering), the position would be overwritten. It could\npossibly also remove the necessity to extend the area tree XML format with the\n\"idfirsts\" trait. Just a thought.\n\n[1] Just FYI, my changes I mentioned above are targeted at restoring proper\npackage dependencies, as the pdf package currently relies on the area package\nwhich is bad if we plan to extract the PDF library to XML Graphics Commons at\nsome point. ", "is_private": false, "id": 102616, "creator": "jeremias@apache.org", "time": "2007-04-29T05:28:10Z", "bug_id": 42067, "creation_time": "2007-04-29T05:28:10Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 102653, "time": "2007-04-30T05:35:05Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-04-30T05:35:05Z", "is_private": false, "text": "Hi Jeremias,\n\n> Anyway, in my own tests and your patch locally applied, none of the\n> GoTo Actions get properly positioned since PageViewport.setFirstWithID()\n> is never called (except from the AreaTreeParser which is only active in\n> special environments.\n\nIt's also called from AreaTreeHandler.associateIDWithPageViewport (near the top\nof the patch file). Maybe this didn't make it into your source because there are\nseveral conflicts with a more recent commit. They're all trivial though; easy to\nresolve.\n\n> I'm wondering if it weren't simpler just to track \"first IDs\" inside\n> PDFRenderer only, i.e. whenever an area with an ID is encountered its\n> position is recorded. If later the same ID is recorded but from a page\n> logically before the earlier page (out-of-order rendering), the position\n> would be overwritten.\n\nYes, this was one of the options I presented on fop-dev while I was working on\nthis. It would make PDFRenderer more complicated, but you could kick the entire\nlink resolution stuff out of the layout code (PV, ATH), so overall the code\nwould become simpler. The problem is that this would break other (custom)\nrenderers that expect the INTERNAL_LINK trait to contain the target PV key.\n\n> It could possibly also remove the necessity to extend the area tree XML\n> format with the \"idfirsts\" trait. Just a thought.\n\nI take it you don't like that attribute. Neither do I. It's ugly, and every time\nI look at it I get the feeling that it shouldn't be necessary. But it was the\nbest I could come up with given the chosen approach (= resolve to page level in\nlayout phase, determine exact location in renderer). There's a workaround\npossible though (in PDFRenderer): store the first occurrence of each ID on every\nPV in a map (with the ID as key, and a list of PV->location maps as value).\nWhenever an internal link trait is parsed, the ID plus the key of the first PV\ncontaining that ID are extracted. At that moment, if the location of that ID on\nthat PV is already in the map, the resolution can be completed. If not, it'll\nhave to wait (but this is also the case in the current patch). The renderer\nwouldn't even have to worry about which page comes first, because the link trait\nalready contains that information.\n\nIf you want me to implement this, I will."}, {"count": 4, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 102657, "creation_time": "2007-04-30T06:16:19Z", "time": "2007-04-30T06:16:19Z", "creator": "jeremias@apache.org", "text": "(In reply to comment #3)\n> Hi Jeremias,\n> \n> > Anyway, in my own tests and your patch locally applied, none of the\n> > GoTo Actions get properly positioned since PageViewport.setFirstWithID()\n> > is never called (except from the AreaTreeParser which is only active in\n> > special environments.\n> \n> It's also called from AreaTreeHandler.associateIDWithPageViewport (near the top\n> of the patch file). Maybe this didn't make it into your source because there are\n> several conflicts with a more recent commit. They're all trivial though; easy to\n> resolve.\n\nYou're right. Looks like I clicked too quickly through the \"apply patch\" dialog.\n\n<snip/>\n\n> > I'm wondering if it weren't simpler just to track \"first IDs\" inside\n> > PDFRenderer only, i.e. whenever an area with an ID is encountered its\n> > position is recorded. If later the same ID is recorded but from a page\n> > logically before the earlier page (out-of-order rendering), the position\n> > would be overwritten.\n> \n> Yes, this was one of the options I presented on fop-dev while I was working on\n> this. It would make PDFRenderer more complicated, but you could kick the entire\n> link resolution stuff out of the layout code (PV, ATH), so overall the code\n> would become simpler. The problem is that this would break other (custom)\n> renderers that expect the INTERNAL_LINK trait to contain the target PV key.\n\nWell, that's me not being able to catch up with everything lately. :-( I get the\nimpression that it should be possible to do this without breaking\nbackwards-compatibility too much. Maybe we should do an inventory of people who\nare maintaining external renderers so we have an idea who would be affected and\nhow much.\n\n> > It could possibly also remove the necessity to extend the area tree XML\n> > format with the \"idfirsts\" trait. Just a thought.\n> \n> I take it you don't like that attribute. Neither do I. It's ugly, and every time\n> I look at it I get the feeling that it shouldn't be necessary. But it was the\n> best I could come up with given the chosen approach (= resolve to page level in\n> layout phase, determine exact location in renderer). There's a workaround\n> possible though (in PDFRenderer): store the first occurrence of each ID on every\n> PV in a map (with the ID as key, and a list of PV->location maps as value).\n> Whenever an internal link trait is parsed, the ID plus the key of the first PV\n> containing that ID are extracted. At that moment, if the location of that ID on\n> that PV is already in the map, the resolution can be completed. If not, it'll\n> have to wait (but this is also the case in the current patch). The renderer\n> wouldn't even have to worry about which page comes first, because the link trait\n> already contains that information.\n> \n> If you want me to implement this, I will.\n\nI'm in no position to \"want\" anything. :-) I can only make wishes and be happy\nthat there are people around helping us out. But consider the removal of the\nidfirsts attribute a wish. *g* Since I'll be leaving for ApacheCon in a few\nhours I may not have enough time to finish applying the current patch. If you\ncould look into the issue until the end of the week that'd be awesome. But don't\nworry if you don't make it.\n\nBTW, another wish if I may: Would you please submit an ICLA (and CCLA if\nnecessary) [2]? Your patch is a borderline case where an ICLA on file becomes\nnecessary. Thanks a lot! You can submit the document by fax or by sending a\nscanned version to BOTH secretary.at.apache.org AND legal-archive.at.apache.org.\n\n[2] http://www.apache.org/licenses/#clas", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 42067, "is_private": false, "id": 102659, "time": "2007-04-30T06:41:56Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-04-30T06:41:56Z", "tags": [], "text": "(In reply to comment #4)\n\n> I get the impression that it should be possible to do this without breaking\n> backwards-compatibility too much. Maybe we should do an inventory of people\n> who are maintaining external renderers so we have an idea who would be\n> affected and how much.\n\nYes, if nobody picks up this trait, then we don't have to worry about it either.\nWithin FOP, only PDFRenderer uses it. Notice that my patch does break custom\nrenderers at this point, but they can be fixed with a one-line code change. The\nonly way not to break them at all would be to pass PV key and ID in separate traits.\n\n>> It could possibly also remove the necessity to extend the area tree XML\n>> format with the \"idfirsts\" trait. Just a thought.\n\n> I'm in no position to \"want\" anything. :-) I can only make wishes and be happy\n> that there are people around helping us out. But consider the removal of the\n> idfirsts attribute a wish. *g*\n\nWell, I think I can do it this week. The more I look at that attribute, the more\nI hate it, so I guess I'm motivated :-)\n\n> Since I'll be leaving for ApacheCon in a few hours I may not have enough time\n> to finish applying the current patch.\n\nI wish you all a great time at the conference and in Amsterdam (my hometown). At\nleast the weather is fine!\n\n> BTW, another wish if I may: Would you please submit an ICLA (and CCLA if\n> necessary)\n\nOK, I'll take care of it.\n"}, {"count": 6, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 102856, "time": "2007-05-04T07:08:55Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-05-04T07:08:55Z", "is_private": false, "text": "OK, I've removed the idfirsts attribute from the area tree XML. I found a\nsimpler and better solution than tracking the ID positions on all pages in the\nPDFRenderer though. Since the AT XML is always parsed in document order, all\nthat's needed is for the AreaTreeParser.Handler to call\ncurrentPageViewport.setFirstWithID() whenever a new PROD_ID is encountered. This\nway PageViewport.isFirstWithID() remains usable no matter whether the source is\nrendered straight from the XSL-FO or from an XML area tree. Otherwise the effort\nto determine the correct PV would have to be duplicated in every interested\nrenderer.\n\nI'll upload a revised patch against the current source tree.\n"}, {"count": 7, "tags": [], "text": "Created attachment 20131\nRevised patch, no more idfirsts attribute in area tree XML", "attachment_id": 20131, "id": 102857, "creator": "paul@vinkenoog.nl", "time": "2007-05-04T07:12:56Z", "bug_id": 42067, "creation_time": "2007-05-04T07:12:56Z", "is_private": false}, {"count": 8, "tags": [], "text": "Thanks a lot, Paul. I'm quite comfortable with the new patch, and so I applied it:\nhttp://svn.apache.org/viewvc?view=rev&rev=535866\n\nBTW, your ICLA has already been recorded. Thanks for that, too.", "attachment_id": null, "id": 102895, "creator": "jeremias@apache.org", "time": "2007-05-07T05:25:28Z", "bug_id": 42067, "creation_time": "2007-05-07T05:25:28Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 102900, "time": "2007-05-07T06:29:51Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-05-07T06:29:51Z", "is_private": false, "text": "> I'm quite comfortable with the new patch, and so I applied it:\n\nThanks, I'm very glad that my patch is of use!\n"}, {"count": 10, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 103073, "creation_time": "2007-05-11T00:28:44Z", "time": "2007-05-11T00:28:44Z", "creator": "jeremias@apache.org", "text": "*** Bug 41532 has been marked as a duplicate of this bug. ***", "is_private": false}, {"count": 11, "tags": [], "bug_id": 42067, "attachment_id": 20211, "id": 103303, "time": "2007-05-17T08:39:58Z", "creator": "fop-dev@cumiskey.com", "creation_time": "2007-05-17T08:39:58Z", "is_private": false, "text": "Created attachment 20211\nsmall patch file\n\nPatch file to fix j2se1.4 dependency."}, {"attachment_id": null, "tags": [], "bug_id": 42067, "is_private": false, "count": 12, "id": 103304, "time": "2007-05-17T08:43:27Z", "creator": "fop-dev@cumiskey.com", "creation_time": "2007-05-17T08:43:27Z", "text": "I discovered recently that FOP still aims to be JDK1.3 compliant so I updated my\nEclipse IDE environment today and discovered this small J2SE1.4 dependency on\nthe use of String.split().  This small patch should fix this."}, {"count": 13, "tags": [], "bug_id": 42067, "attachment_id": 20212, "id": 103305, "time": "2007-05-17T08:45:10Z", "creator": "fop-dev@cumiskey.com", "creation_time": "2007-05-17T08:45:10Z", "is_private": false, "text": "Created attachment 20212\nsmall patch file\n\ncheckstyled :-)"}, {"count": 14, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "is_private": false, "id": 103331, "time": "2007-05-18T05:00:55Z", "bug_id": 42067, "creation_time": "2007-05-18T05:00:55Z", "text": "(In reply to comment #12)\n> I discovered recently that FOP still aims to be JDK1.3 compliant so I updated my\n> Eclipse IDE environment today and discovered this small J2SE1.4 dependency on\n> the use of String.split().  This small patch should fix this.\n\nThanks for spotting this, Adrian. Looks like I'm not compiling against J2SE 1.3\noften enough. Patch applied (this one anyway)."}, {"count": 15, "tags": [], "bug_id": 42067, "attachment_id": null, "id": 103333, "time": "2007-05-18T06:55:12Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-05-18T06:55:12Z", "is_private": false, "text": "(In reply to comment #14)\n>> I discovered recently that FOP still aims to be JDK1.3 compliant\nSorry, I wasn't aware of this.\n>> This small patch should fix this.\nIt does, but the patched code also throws a StringIndexOutOfBoundsException if\nfor some reason the attribute value is in brackets but doesn't contain a comma.\nI think it's best to add a comma check to the innermost if. This will also bring\nthe code in line with the description (my original code wasn't, I'm afraid).\nSo here's an even smaller patch.\n"}, {"count": 16, "attachment_id": 20215, "bug_id": 42067, "is_private": false, "id": 103334, "time": "2007-05-18T06:57:50Z", "creator": "paul@vinkenoog.nl", "creation_time": "2007-05-18T06:57:50Z", "tags": [], "text": "Created attachment 20215\nPatch to check for comma together with brackets"}, {"count": 17, "tags": [], "text": "(In reply to comment #16)\n> Created an attachment (id=20215) [edit]\n> Patch to check for comma together with brackets\n> \n\nPatch applied. Thanks, Paul.", "is_private": false, "id": 103398, "creator": "jeremias@apache.org", "time": "2007-05-20T23:18:43Z", "bug_id": 42067, "creation_time": "2007-05-20T23:18:43Z", "attachment_id": null}, {"count": 18, "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "attachment_id": null, "id": 156245, "creator": "gadams@apache.org", "time": "2012-04-01T07:06:22Z", "bug_id": 42067, "creation_time": "2012-04-01T07:06:22Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "write a macro, with <macrodef> and add it to a file that you <import>. Then run\nin it. I would have expected to see the fail message, as you normally see, but\ninstead you see nesting information:\n\nbuild.xml:184: Following error occured while executing this line\ncommon.xml:121: Unit tests failed see\n\nIs this appropriate?", "is_private": false, "id": 52922, "creator": "stevel@apache.org", "time": "2004-02-25T12:56:32Z", "bug_id": 27219, "creation_time": "2004-02-25T12:56:32Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 27219, "is_private": false, "count": 1, "id": 52950, "time": "2004-02-25T17:09:54Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-02-25T17:09:54Z", "text": "The backtrace is part of the macrodef for two purposes:\n1) macrodefs can be difficult to get correct - esp, macrodefs\n   calling macrodefs.\n2) It is not obvious where to say the location of the error is-\n   at the point of call, or within the macro\nFor example:\n\n<macrodef name=\"f\">\n  <sequential>\n    <fail>the macro failed</fail>  <!-- (1) -->\n  </sequential>\n</macrodef>\n\n<f/>   <!-- (2) -->\n\nShould the error location be (1) or (2)\n\nFor a proper emulation of a real task, it should (2).\n\nI propose to add a attribute backtraceonerror (default true) to\nmacrodef control the generation of the backtrace.\n\n3:    <macrodef name=\"f\" backtraceonerror=\"no\">\n4:      <sequential>\n5:        <fail>A fail message</fail>\n6:      </sequential>\n7:    </macrodef>\n8:    <f/>\n\nWill only:\nBUILD FAILED\n/home/preilly/learning/ant/backtrace.xml:8: A fail message\n\nand\n3:    <macrodef name=\"f\" backtraceonerror=\"yes\">\n4:      <sequential>\n5:        <fail>A fail message</fail>\n6:      </sequential>\n7:    </macrodef>\n8:    <f/>\n\nwill generate:\nBUILD FAILED\n/home/preilly/learning/ant/backtrace.xml:8: Following error occured while\nexecuting this line\n/home/preilly/learning/ant/backtrace.xml:5: A fail message\n\n"}, {"count": 2, "tags": [], "text": "I do not think this is necessary. I think the current behavior is completely \nfine. Can someone give me a good example why changing this will make ANT \nbetter in some sense? \n\nWhat is the behavior when the failure occurs inside <subant> or <antcall>?\nDon't we get the same stack trace as we do for <macro>?\n", "attachment_id": null, "id": 53027, "creator": "j_a_fernandez@yahoo.com", "time": "2004-02-26T16:12:36Z", "bug_id": 27219, "creation_time": "2004-02-26T16:12:36Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 27219, "attachment_id": null, "id": 53387, "time": "2004-03-03T14:28:22Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-03-03T14:28:22Z", "is_private": false, "text": "There is one case where an attribute to suppress the stack\nwould be useful. This would be a simple macro that tests a\ncondition and issues a fail message - the error in not in the\nmacro itself, but is described completly by the fail message.\nFor example:\n<macrodef name=\"failifpresent\" backtraceonerror=\"no\">\n  <attribute name=\"classname\"/>\n  <text name=\"message\"/>\n  <sequential>\n    <ac:if>\n      <ac:available classname=\"@{classname}\"/>\n      <ac:then>\n        <fail>@{message}</fail>\n      </ac:then>\n     </ac:if>\n   </sequential>\n   </macrodef>\n  \n  <failifpresent classname=\"net.sf.antextra.util.AntExtraUtil\">\n     AntExtra files are present in your default classpath\n     please remove...\n     and try again\n  </failifpresent>\n\n> What is the behavior when the failure occurs inside <subant> or <antcall>?\n> Don't we get the same stack trace as we do for <macro>?\n\nyes, this behaviour has been added since ant 1.6.0\n\n\n "}, {"count": 4, "tags": [], "bug_id": 27219, "attachment_id": null, "id": 63198, "time": "2004-09-08T10:11:36Z", "creator": "peterreilly@apache.org", "creation_time": "2004-09-08T10:11:36Z", "is_private": false, "text": "Closing this, reopen if necessary"}, {"count": 5, "tags": [], "text": "OK, my usecase is a task defined as <macrodef> in an antlib descriptor.\n\nI don't want the uder to see that my task has been defined as a macro at all,\nin particular I don't want the error message to contain a line number of the\nantlib.xml.\n\nThe current behaviour is fine if we are talking about macros you've written\nyourself, bit confusing if you (unknowingly) use macros written by somebody else.", "is_private": false, "id": 73857, "creator": "bodewig@apache.org", "time": "2005-04-20T14:41:37Z", "bug_id": 27219, "creation_time": "2005-04-20T14:41:37Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "This sounds like it would commonly be the case that this information should be\nsuppressed.  When would it not make sense to disable the stack output (by\ndefault at least) for any macrodef loaded from an antlib (i.e. task|typedef\nformat=\"xml\") ???  Possibly also to make the behavior configurable on the macro\ninstance if debugging is required... this would require reserving an attribute\non the instance type that would then be illegal on the macro definition, but\nmaybe that's not too evil.", "attachment_id": null, "id": 73863, "creator": "mbenson@apache.org", "time": "2005-04-20T17:23:40Z", "bug_id": 27219, "creation_time": "2005-04-20T17:23:40Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 27219, "is_private": false, "count": 7, "id": 73865, "time": "2005-04-20T17:28:07Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-04-20T17:28:07Z", "text": "Using magic attributes is OK, as long as they are namespaced IMHO.\n\nAnd talking about debugging and magic attribute, maybe a more generic \nant:level=\"verbose\" or \"debug\" at the task level raising the logLevel just \nduring the execution of that one task/macro would be useful. Wading thru the \noutput of a large build just to figure out a problem in one task would be \nsimplified with this. <record> would achieve a similar effect, albeit by \nlooking at the file afterwards.\n\nBut I'm getting off topic here. --DD"}, {"count": 8, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 73867, "creation_time": "2005-04-20T17:37:44Z", "time": "2005-04-20T17:37:44Z", "bug_id": 27219, "text": "I'm not XML-smart enough to know what to do with namespaced attributes (or\nanything else), until I see an example.  :(  But I'll see it when the time comes.", "is_private": false}, {"count": 9, "tags": [], "text": "I think that the \"backtrace\" attribute solves\nthis issue", "is_private": false, "id": 94028, "creator": "peterreilly@apache.org", "time": "2006-09-22T21:02:48Z", "bug_id": 27219, "creation_time": "2006-09-22T21:02:48Z", "attachment_id": null}]
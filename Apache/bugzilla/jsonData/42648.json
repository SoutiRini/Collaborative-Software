[{"count": 0, "tags": [], "bug_id": 42648, "attachment_id": null, "is_private": false, "id": 104357, "time": "2007-06-13T02:02:28Z", "creator": "keiichi.fujino@gmail.com", "creation_time": "2007-06-13T02:02:28Z", "text": "SWAP increases by the cluster of Tomca6 and operation becomes unstable. \n\nEnvironment\n Tomcat6.0.13\n JDK1.5.11\n memory : 2G\n Heap size : - Xmx1500m -Xms1500m\n\nSWAP increases only for direct=\"true\". \nIt occurs when operating for a long time by a high load. \n\n   <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n        ... \n        direct=\"true\" />\n\nSWAP doesn't increase when setting it to direct =\"false\". \n\n   <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\"\n        ... \n        direct=\"false\" />\n        \nI noticed the following. \nIn org.apache.catalina.tribes.transport.nio.NioReplicationTask,buffer is made \nper run method.\n\n    public synchronized void run() { \n        if ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n        }else {\n            buffer = ByteBuffer.allocate (getRxBufSize());\n        }\n\n        if (key == null) {\n            return;\t// just in case\n        }\n        ....\n\nThe buffer is enough if made once. \n\nFor instance,\nThe creating of buffer by the run method is stopped. \n\n    public synchronized void run() { \n//    \tif ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n//            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n//        }else {\n//            buffer = ByteBuffer.allocate (getRxBufSize());\n//        }\n    ....\n    \nCreating of buffer by the setRxBufSize method.\n\n    public void setRxBufSize(int rxBufSize) {\n        this.rxBufSize = rxBufSize;\n        if ( (getOptions() & OPTION_DIRECT_BUFFER) == OPTION_DIRECT_BUFFER ) {\n            buffer = ByteBuffer.allocateDirect(getRxBufSize());\n        }else {\n            buffer = ByteBuffer.allocate (getRxBufSize());\n        }\n    }\n    \nResult.\nSWAP doesn't increase."}, {"count": 1, "tags": [], "bug_id": 42648, "attachment_id": 20336, "is_private": false, "id": 104360, "time": "2007-06-13T02:09:12Z", "creator": "keiichi.fujino@gmail.com", "creation_time": "2007-06-13T02:09:12Z", "text": "Created attachment 20336\nabnormal cases\n\nabnormal cases."}, {"count": 2, "tags": [], "bug_id": 42648, "text": "Created attachment 20337\nnormal cases\n\nnormal cases.", "id": 104361, "time": "2007-06-13T02:11:53Z", "creator": "keiichi.fujino@gmail.com", "creation_time": "2007-06-13T02:11:53Z", "is_private": false, "attachment_id": 20337}, {"count": 3, "tags": [], "creator": "fhanik@apache.org", "is_private": false, "text": "Basically, using allocateDirect, uses memory outside of your -Xmx and -Xms,\nsince your Java heap(-Xmx) is so high, you have not left enough room for the\ndirect memory. This is part of the Java memory model.\nHowever, you have discovered an optimization, that we don't need to create a new\nbuffer and wait for GC to clean out the old one.\n\nSo thanks for the notification, and remember that allocateDirect is memory\noutside of -Xmx memory space.\n\nFilip", "id": 104373, "time": "2007-06-13T10:01:22Z", "bug_id": 42648, "creation_time": "2007-06-13T10:01:22Z", "attachment_id": null}]
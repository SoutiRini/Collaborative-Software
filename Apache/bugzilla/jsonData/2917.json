[{"count": 0, "tags": [], "creator": "aklimuk@iba.by", "attachment_id": null, "id": 4174, "time": "2001-07-31T00:42:12Z", "bug_id": 2917, "creation_time": "2001-07-31T00:42:12Z", "is_private": false, "text": "Dataset:\n  JSP file in subfolder of ROOT:\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder1\\folder2\\test.jsp\n\nAction:\n- Call following address in browser:\n    http://localhost:8080/folder1/folder2/test.jsp\n\nResult:\n- Browser loaded this page normally\n- In working directory exist 2 files corresponding to the original test.jsp. \nDirectory name is correct:\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder1\\folder2\n  But names of *.java and *.class files are NOT CORRECT. The are following:\n    _0002ffolder1_0002ffolder2_0002ftest_jsp.class\n    _0002ffolder1_0002ffolder2_0002ftest_jsp.java\n  It is bug.\n  This bug exist in TomCat 3.1.1, 3.2 as well.\n\n  In previous version - TomCat 4.0 b5 - it WAS CORRECT:\n    test_jsp.class\n    test_jsp.java\n\n  If document root directory have deep structure, e.g. 10 or 15 levels, file \nname length exceeds 260 characters (maximum allowed in Windows) and TomCat \ncannot compile JSP because it CANNOT CREATE FILE on disk with such long name.\n\n  I guess problem is hardcoded directory separator \"/\". And may be at some \npoint TomCat creates file name like \".../folder1/folder2/test.class\" (when \nnormally it should be \"...\\folder1\\folder2\\test.class\"). Then character \"/\" is \nreplaced by value \"_0002f\" and we get this INCORRECT file name like\n    _0002ffolder1_0002ffolder2_0002ftest_jsp.class"}, {"count": 1, "tags": [], "bug_id": 2917, "attachment_id": null, "text": "I investigated the problem.\nBug occures in getBaseClassName() function of JspCompiler class because value \nof variable \"className\" is not correct. E.g. if original JSP file name is\n    ...\\ROOT\\folder1\\folder2\\test.jsp\n\"className\" is set to \"/folder1/folder2/test\". But \"className\" variable must be \nset to \"test\". I can propose 2 ways to solve the problem. Below is comparison \nof original JspCompiler file (I renamed it to JspCompiler_b6_orig.java) and \nchanged one (JspCompiler.java).\n\nSolution 1:\n<\nComparing files JspCompiler_b6_orig.java and JspCompiler.java\n***** JspCompiler_b6_orig.java\n  131:              className = jsp;\n  132:              \n  133:          \n***** JspCompiler.java\n  131:              className = jsp;\n  132:  \n  133:      // Get file name from path\n  134:      className = (new File(className)).getName();\n  135:          \n*****\n>\n\nSolution 2:\n<\nComparing files JspCompiler_b6_orig.java and JspCompiler.java\n***** JspCompiler_b6_orig.java\n  131:              className = jsp;\n  132:              \n  133:          \n***** JspCompiler.java\n  131:              className = jsp;\n  132:  \n  133:      // Get file name from path\n  134:      int iSep = className.lastIndexOf(\"/\");\n  135:      if (iSep != -1)\n  136:          className = className.substring(iSep + 1, className.length());\n  137:          \n*****\n>\n\n  In both cases result is the same: variable \"className\" contains only file \nname without path. And instead of\n    _0002ffolder1_0002ffolder2_0002ftest_jsp.class\nTomCat creates\n    test_jsp.class\n\n  I am using solution 1.\n\n  Please let me know whether these solutions are correct, and whether one of \nthem will be used in TomCat 4.0 beta 7.\n", "id": 4179, "time": "2001-07-31T06:46:51Z", "creator": "aklimuk@iba.by", "creation_time": "2001-07-31T06:46:51Z", "is_private": false}, {"count": 2, "tags": [], "creator": "craig.mcclanahan@sun.com", "attachment_id": null, "id": 4265, "time": "2001-08-03T14:52:13Z", "bug_id": 2917, "creation_time": "2001-08-03T14:52:13Z", "is_private": false, "text": "Servlet containers are free to name the generated JSP files anything they want. \nSo a problem based on length > 260 is an operating-system based restriction, not\na spec compliance problem.  It needs to be investigated further.\n\nHowever, it appears to me that your proposed fix will cause problems if there is\na \"test.jsp\" page in more than one directory inside the webapp.  Won't this\ncause the two pages to try to use the same generated JSP file and class, or am I\nmissing something?\n"}, {"attachment_id": null, "tags": [], "creator": "aklimuk@iba.by", "is_private": false, "count": 3, "id": 4299, "time": "2001-08-06T10:31:29Z", "bug_id": 2917, "creation_time": "2001-08-06T10:31:29Z", "text": "<\nServlet containers are free to name the generated JSP files anything they want.\n>\n  That is not correct. Because servlet containers must take into account the \nlimitations of particular operartion system (e.g. security limitations, \npermissions to access/create/read/write some folders/files, etc.) and file \nsystem (file name/path length, case sensitivity in file/directory names, \ncharacter set allowed in file names). So, if we would like to use TomCat on \nWindows, all its components must satisfy all Windows limitations. In \nparticular, must satisfy the limitation of file name/path length. If some \napplication (TomCat) does not satisfy such Windows limitations, we cannot \nacknowledge it is crossplatform application.\n\n  TomCat 4.0 b6 cannot compile JSP files placed in deep folder structure. We \nhave to acknowledge that is bug. Otherwise, we have to acknowledge TomCat 4.0 \nb6 cannot be used on Windows.\n\n  Let consider example. Original JSP name is\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder1\\folder2\\folder3\\folder4\\folder5\n\\test.jsp\n  Name of generated files are\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\folder1\\folder2\\folder3\\folder4\\folder5\n\\_0002ffolder1_0002ffolder2_0002ffolder3_0002ffolder4_0002ffolder5_0002ftest_jsp\n.class\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\folder1\\folder2\\folder3\\folder4\\folder5\n\\_0002ffolder1_0002ffolder2_0002ffolder3_0002ffolder4_0002ffolder5_0002ftest_jsp\n.java\n  Length of original file name is 79, length of generated *.class file is 160. \nThat is twice (!) longer than the original one.\n\n  Actually, for user it doesn't matter what is the name of generated file. User \nis interested only in two things:\n1. TomCat MUST compile any correct JSP file\n2. TomCat MUST give the way to find generated *.java and *.class files \ncorresponding to the original JSP file\n\nWe can find many soultions of this problem:\n- Use names of generated files like TomCat 4.0 b5\n- Use short coded names like\n    0000001.class\n    0000002.class\n    ...\nand dictionary containing following records (mapping between original JSP files \nang generated files):\n      Original JSP name                      Generated name\n    folder1\\folder2\\test.jsp               00000001\n    folder1\\folder2\\test2.jsp              00000002\n    ...\n\n<\nHowever, it appears to me that your proposed fix will cause problems if there is\na \"test.jsp\" page in more than one directory inside the webapp.  Won't this\ncause the two pages to try to use the same generated JSP file and class, or am I\nmissing something?\n>\nIf there is a \"test.jsp\" in more than one directory inside the webapp there is \nno problem. Because generated files will be placed in different subdirectories \nof  working directory. E.g. there are following JSP files:\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\test.jsp\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder1\\folder2\\test.jsp\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder1\\folder2A\\test.jsp\n    C:\\Apache\\TomCat4\\webapps\\ROOT\\folder3\\test.jsp\nROOT is document root directory of default webapp. All its subfolders \ncontain \"test.jsp\". Generated files will be placed to\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\test_jsp.class\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\folder1\\folder2\\test_jsp.class\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\folder1\\folder2A\\test_jsp.class\n    C:\\Apache\\TomCat4\\work\\localhost\\_\\folder3\\test_jsp.class\nWe can see no problem. Because \"test.jsp\" from different subdirectories \nof \"ROOT\" will use generated \"test_jsp.class\" files from different \nsubdirectories of \"...\\work\\localhost\\_\".\nIf webapp will use WAR files, their names should be considered as \nsubdirectories names, and we also will have no problem.\n\nSo, the way TomCat 4.0 b6 uses for forming name of generated file must be \nchanged because this is the only reason why TomCat cannot compile many correct \nJSP files.\n\nIn \"RELEASE-NOTES-4.0-B6.txt\" of TomCat 4.0 b6 one can read following text \n(lines 136 - 138):\n<\nAll remaining areas where Jasper (or Jasper-generated code) refered to\njava.io.File objects have been removed, so that JSP-based applications can\nbe run directly from a WAR file.\n>\nFrom such point of view my solution 1 (see \nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=2917) is not very good, but \nsolution 2 is good because it doesn't use java.io.File object.\n\nMay be smb can propose better solution.\nBut problem exists and must be solved.\n\n"}, {"count": 4, "tags": [], "text": "Work around the limitations of Windows (and other operating systems that impose\narbitrary limits on pathname length) to create base paths for generated JSP\nservlets that are no longer than the context-relative paths to the corresponding\npages.\n\nIt is still possible to have problems if you use deeply nested directory\nstructures with pathnames near the maximum length permitted by your operating\nsystem, *and* you use special characters in the filename that must be mangled,\nbut that should be relatively rare.\n\nFixed in nightly build 20010908.\n", "attachment_id": null, "bug_id": 2917, "id": 5228, "time": "2001-09-07T16:02:50Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-09-07T16:02:50Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 45261, "text": "Created attachment 22166\nDemonstrate view inconsistency.\n\nIn a four node cluster, using NonBlockingCoordinator, if two nodes fail at the same time, the remaining two nodes get different views and never converge.\n\nWhen the other nodes restart, they never install a view at all.\n\nI've attached the relevant demo code. Run it on 4 machines, wait for view installation, then CTRL-C two of them. The other two will never print the same UniqueId. Start a new node, view is always null.\n\nImmediately after the two node failure, one of the surviving nodes issues this stack trace;\n\nWARN - Member send is failing for:tcp://{-64, -88, -91, 34}:4000 ; Setting to su\nspect and retrying.\nERROR - Error processing coordination message. Could be fatal.\norg.apache.catalina.tribes.ChannelException: Send failed, attempt:2 max:1; Fault\ny members:tcp://{-64, -88, -91, 34}:4000; \n        at org.apache.catalina.tribes.transport.nio.ParallelNioSender.doLoop(Par\nallelNioSender.java:172)\n        at org.apache.catalina.tribes.transport.nio.ParallelNioSender.sendMessag\ne(ParallelNioSender.java:78)\n        at org.apache.catalina.tribes.transport.nio.PooledParallelSender.sendMes\nsage(PooledParallelSender.java:53)\n        at org.apache.catalina.tribes.transport.ReplicationTransmitter.sendMessa\nge(ReplicationTransmitter.java:80)\n        at org.apache.catalina.tribes.group.ChannelCoordinator.sendMessage(Chann\nelCoordinator.java:78)\n        at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage(C\nhannelInterceptorBase.java:75)\n        at org.apache.catalina.tribes.group.interceptors.NonBlockingCoordinator.\nhandleMyToken(NonBlockingCoordina", "id": 117923, "time": "2008-06-23T14:13:00Z", "creator": "robert.newson@gmail.com", "creation_time": "2008-06-23T14:13:00Z", "is_private": false, "attachment_id": 22166}, {"count": 1, "tags": [], "text": "\nSo, I understand this better now and have a proposed fix.\n\nHere's the procedure to reproduce the problem.\n\n1) start four nodes.\n2) see a view installation with four members.\n3) kill two non-coordinator nodes in quick succession (a second or two)\n\nFrom this point onwards, until it is killed, the coordinator is oscillating between two states. It recognizes that the state is inconsistent as it receives heartbeats from the the other node and the UniqueId's of its view does not match the coordinator. It then forces an election. Which fails as it believes an election is already running. This cycle repeats forever.\n\nWhen the first node crashed, memberDisappeared() is called on the coordinator. It then starts sending messages as part of an election. A method throws here with a connection timeout (it was attempting to send to the second node, which just crashed). It never handles this case, leaving the 'election in progress' flag on. Forever.\n\nClearing suggestedViewId when the ChannelException is thrown is the fix;\n\n@@ -500,6 +500,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {\n                 processCoordMessage(cmsg, msg.getAddress());\n             }catch ( ChannelException x ) {\n                 log.error(\"Error processing coordination message. Could be fatal.\",x);\n+                suggestedviewId = null;                \n             }\n\nthis probably should only be done under some circumstances, so this isn't obviously a safe patch. Hopefully the author will have a better fix!\n\n\n\n", "attachment_id": null, "id": 117986, "creator": "robert.newson@gmail.com", "time": "2008-06-25T13:50:40Z", "bug_id": 45261, "creation_time": "2008-06-25T13:50:40Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45261, "text": "hi Rob, \nthe non blocking coordinator is still work in progress. Its one piece of code that got a bit over complicated once I started developing it, and I think it can be greatly simplified\n\nI will take a look at this beginning of next week\n\nFilip", "id": 118010, "time": "2008-06-26T08:05:07Z", "creator": "fhanik@apache.org", "creation_time": "2008-06-26T08:05:07Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "robert.newson@gmail.com", "attachment_id": null, "text": "\nI made my own coordinator which simply uses a sorted list of getMembers() + getLocalMember(), though it only installs views if the membership remains unchanged for a few seconds to avoid a little storm of view changes. Obviously it's a much weaker form of view management than your attempting, but it's probably good enough for my purposes.\n\nLet me know when you get to this, I can test it out.\n", "id": 118011, "time": "2008-06-26T08:16:13Z", "bug_id": 45261, "creation_time": "2008-06-26T08:16:13Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45261, "text": "Created attachment 22179\nAn alternative coordinator that makes local decisions based on membership service\n\n\nHappy to release this class under the Apache License. Let me know what you need from me.", "id": 118017, "time": "2008-06-26T10:16:13Z", "creator": "robert.newson@gmail.com", "creation_time": "2008-06-26T10:16:13Z", "is_private": false, "attachment_id": 22179}, {"count": 5, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "text": "Just submit a \nhttp://www.apache.org/licenses/icla.txt\n\nand email a scanned copy to \nsecretary [at) apache [dot] org", "id": 118020, "time": "2008-06-26T10:38:33Z", "bug_id": 45261, "creation_time": "2008-06-26T10:38:33Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 45261, "text": "For a contribution of a single class, the statement in comment #4 is more than enough. No need for a CLA.", "id": 121124, "time": "2008-10-01T08:46:18Z", "creator": "markt@apache.org", "creation_time": "2008-10-01T08:46:18Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "Many thanks for the patch. I have applied it to trunk and proposed it for 6.0.x. I made the following changes:\n- changed package to org.apache.catalina.tribes.group.interceptors\n- changed class name to SimpleCoordinator\n- added the AL2 text to the beginning of the file", "attachment_id": null, "id": 123575, "creator": "markt@apache.org", "time": "2008-12-28T16:35:29Z", "bug_id": 45261, "creation_time": "2008-12-28T16:35:29Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 45261, "text": "Thanks. I have since moved on to use a custom stack for group membership. I found an excellent paper which describes a robust mechanism for leader election. The paper also extends that algorithm to make a robust group membership protocol too.\n\nhttp://citeseer.ist.psu.edu/old/496213.html\n\n", "id": 123630, "time": "2008-12-30T06:35:08Z", "creator": "robert.newson@gmail.com", "creation_time": "2008-12-30T06:35:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 45261, "text": "An updated patch is always welcome.", "id": 123637, "time": "2008-12-30T09:59:01Z", "creator": "markt@apache.org", "creation_time": "2008-12-30T09:59:01Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 45261, "attachment_id": null, "id": 123643, "time": "2008-12-30T11:00:48Z", "creator": "robert.newson@gmail.com", "creation_time": "2008-12-30T11:00:48Z", "is_private": false, "text": "My comment was misleading. The \"custom stack\" in question is not based on Tribes at all."}, {"count": 11, "attachment_id": null, "bug_id": 45261, "text": "This has been applied to 6.0.x and will be included in 6.0.19 onwards.", "id": 124057, "time": "2009-01-14T16:16:05Z", "creator": "markt@apache.org", "creation_time": "2009-01-14T16:16:05Z", "tags": [], "is_private": false}]
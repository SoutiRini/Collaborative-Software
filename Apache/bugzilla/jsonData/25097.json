[{"count": 0, "tags": [], "bug_id": 25097, "attachment_id": null, "is_private": false, "id": 48324, "time": "2003-11-30T20:15:19Z", "creator": "mattiasb@bea.com", "creation_time": "2003-11-30T20:15:19Z", "text": "In the setup described below, the depend task works as expected when A.java is \nupdated and A and B are compiled to different directories: A.class is deleted \nbefore the first complilation and B.class before the second. But there seem to \nbe no way to make it work that way when A.class and B.class share the same \ndestdir: There is a warning in the first invokation about not finding the \nsource for B.class, and the second invokation deletes nothing.\n\nThis makes it very difficult to use depend in loosely coupled build files that \nbehave well when used from a master build file that overrides \"build.dir\".\n\nPerhaps the easiest solution to the problem is to provide an option to delete \nout of date class files found in destdir even if the source is not found?\n \nsrc_a/A.java: \npublic class A {}\n\nsrc_a/B.java:\npublic class B { A a = new A(); }\n\ndepend.xml:\n<project name=\"depend\" default=\"b\">\n<!-- Works as expected: \n     A.class is deleted in the first target, B.class in the second.\n\t<target name=\"a\">\n\t\t<depend srcdir=\"src_a\" destdir=\"bin_a\" \n\t\t\tclosure=\"true\" classpath=\"bin_a\"/>\t\t\t\n\t\t<javac srcdir=\"src_a\" destdir=\"bin_a\" \n\t\t\tclasspath=\"bin_a\"/>\n\t</target>\n\t<target name=\"b\" depends=\"a\">\n\t\t<depend srcdir=\"src_b\" destdir=\"bin_b\"\n\t\t\tclosure=\"true\" classpath=\"bin_a:bin_b\"/>\t\n\t\t<javac srcdir=\"src_b\" destdir=\"bin_b\"\n\t\t\tclasspath=\"bin_a:bin_b\"/>\t\t\t\n\t</target>\t\n-->\n<!-- Does not work as expected: \n     A warning in the first target, B.class is never deleted. --> \n\t<target name=\"a\"> \n\t\t<depend srcdir=\"src_a\" destdir=\"bin\" \n\t\t\tclosure=\"true\" classpath=\"bin\"/>\t\t\t\n\t\t<javac srcdir=\"src_a\" destdir=\"bin\" \n\t\t\tclasspath=\"bin\"/>\n\t</target>\n\t<target name=\"b\" depends=\"a\">\n\t\t<depend srcdir=\"src_b\" destdir=\"bin\" \n\t\t\tclosure=\"true\" classpath=\"bin\"/>\t\n\t\t<javac srcdir=\"src_b\" destdir=\"bin\"\n\t\t\tclasspath=\"bin\"/>\t\t\t\n\t</target>\n</project>"}, {"count": 1, "tags": [], "bug_id": 25097, "attachment_id": null, "id": 48377, "time": "2003-12-02T11:45:37Z", "creator": "bodewig@apache.org", "creation_time": "2003-12-02T11:45:37Z", "is_private": false, "text": "Your first invocation doesn't tell <depend> where to find the B sources, your\nsecond doesn't tell it where to find the A sources - so there is no way for\nthe task to (1) find the source or (2) determine the timestamp of A.java (and thus\nthe task doesn't know that A.class is out of date).\n\nThis here should work\n\n<depend srcdir=\"src_a:src_b\" destdir=\"bin\" \n\tclosure=\"true\"/>\n\nsrcdir is a PATH and can take multiple source directories."}, {"count": 2, "tags": [], "text": "Well, my point is that the current behaviour seems inconsistent. I am able to \ncheck that B.class is uptodate with respect to A.class (not A.java) by putting \nbin_a on the classpath when I check bin_b against src_b, but only as long as \nA.class is not also present in destdir. If it is, for instance if bin_a happens \nto be equal to bin_b I see no way to perform this check. \n\nAdding src_a to the srcdir attribute is one workaround, but it also means that \nany subproject that is built to a certain destdir must have access to the \nsource of all other projects built to the same directory. This couples (at \nleast my) subproject build files tighter than I would like.\n\n", "attachment_id": null, "id": 48384, "creator": "mattiasb@bea.com", "time": "2003-12-02T14:11:40Z", "bug_id": 25097, "creation_time": "2003-12-02T14:11:40Z", "is_private": false}]
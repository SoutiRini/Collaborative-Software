[{"count": 0, "tags": [], "creator": "antuser@mindspring.com", "text": "Here is the project build.xml:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"build\" default=\"all\" xmlns:test=\"antlib:com.test.tools.ant\"> \n    <typedef resource=\"com/test/tools/ant/extensions.xml\" />\n    <typedef uri=\"antlib:com.test.tools.ant\" resource=\"com/test/tools/ant/extensions.xml\"/>\n    <test:importProjectDefinition/>\n    <echo message=\"${test}\"/>\n</project>\n\nHere is a properties file to be imported that resides in the same directory as the build.xml.  It contains:\n\n<project name=\"properties\">\n    <property name=\"test\" value=\"test_value\"/>\n</project>\n\ntest.jar contains an antlib in extensions.xml:\n\n<?xml version=\"1.0\"?>\n<antlib xmlns:current=\"ant:current\" xmlns:test=\"antlib:com.test.tools.ant\">\n    <macrodef name=\"importProjectDefinition\">\n        <sequential>\n            <import file=\"${basedir}\\properties.xml\" />\n        </sequential>\n    </macrodef>\n</antlib>\n\nWhen you build on Windows the project fails with the following traceback when attempting the import.  The import only fails when the antlib is inside of a jar.  In the debugger it appears that the file in the jar does not exist and the code then tests for a URL (C:\\EclipseDevelopment\\test_4_head\\test_case\\script/properties.xml) which of course would be malformed as a URL.  The same build fails on linux with a similar traceback.  Here is the relevant section of the Windows log:\n\n[import] java.net.MalformedURLException: unknown protocol: c\n\nBUILD FAILED\nC:\\EclipseDevelopment\\test_4_head\\test_case\\script\\build.xml:5: The following error occurred while executing this line:\njar:file:/C:/EclipseDevelopment/test_4_head/eclipse.proxy.project/output/build/test/4.0/staging/ant/lib/test.jar!/com/\ntest/tools/ant/extensions.xml:5: failed to resolve C:\\EclipseDevelopment\\test_4_head\\test_case\\script\\properties.xml relative to jar:file:/C:/EclipseDevelopment/test_4_head/eclipse.proxy.project/output/build/test/4.0/staging/ant/lib/test.jar!/com/test/tools/ant/extensions.xml\n\tat org.apache.tools.ant.ProjectHelper.addLocationToBuildException(ProjectHelper.java:551)\n\tat org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:401)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:390)\n\tat org.apache.tools.ant.helper.ProjectHelper2.parse(ProjectHelper2.java:180)\n\tat org.eclipse.ant.internal.launching.remote.InternalAntRunner.parseBuildFile(InternalAntRunner.java:191)\n\tat org.eclipse.ant.internal.launching.remote.InternalAntRunner.run(InternalAntRunner.java:400)\n\tat org.eclipse.ant.internal.launching.remote.InternalAntRunner.main(InternalAntRunner.java:137)\nCaused by: jar:file:/C:/EclipseDevelopment/test_4_head/eclipse.proxy.project/output/build/test/4.0/staging/ant/lib/test.jar!/com/test/tools/ant/extensions.xml:5: failed to resolve C:\\EclipseDevelopment\\test_4_head\\test_case\\script\\properties.xml relative to jar:file:/C:/EclipseDevelopment/test_4_head/eclipse.proxy.project/output/build/test/4.0/staging/ant/lib/test.jar!/com/test/tools/ant/extensions.xml\n\tat org.apache.tools.ant.taskdefs.ImportTask.getFileAttributeResource(ImportTask.java:262)\n\tat org.apache.tools.ant.taskdefs.ImportTask.execute(ImportTask.java:158)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)\n\t... 12 more", "id": 145121, "time": "2011-03-21T08:53:55Z", "bug_id": 50953, "creation_time": "2011-03-21T08:53:55Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 50953, "is_private": false, "count": 1, "id": 171966, "time": "2013-12-30T20:49:20Z", "creator": "dekelcohen@gmail.com", "creation_time": "2013-12-30T20:49:20Z", "text": "The reason for the bug is a change in ImportTask.java:\nImportTask.getFileAttributeResource was added:\n* if (buildFile.exists()) - incorrectly added in ant 1.8.x \n   ) This is the bug: buildFile extensions.xml is within a jar (so special !jar path) --> FS api.exist() fails to find it --> import to properties.xml (the importedFile) fails\n* In 1.7.1 there is no check that buildfile exist, but rather a check that importedFile exist:\n  File buildFileParent = new File(buildFile.getParent());\n  File importedFile = FILE_UTILS.resolveFile(buildFileParent, file);\n  ...\n  if (!importedFile.exists()) {"}, {"count": 2, "attachment_id": null, "bug_id": 50953, "text": "Ah, good catch.\n\nThe code is supposed to make sure we resolve an imported file relative to the importing buildifle - which may come from a jar just like in this example.  What we are missing is a test whether the file to import is already specified via an absolute path (or URI).", "id": 171971, "time": "2013-12-31T09:34:25Z", "creator": "bodewig@apache.org", "creation_time": "2013-12-31T09:34:25Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 50953, "attachment_id": null, "is_private": false, "id": 171972, "time": "2013-12-31T10:07:03Z", "creator": "bodewig@apache.org", "creation_time": "2013-12-31T10:07:03Z", "text": "fixed with svn revision 1554392"}]
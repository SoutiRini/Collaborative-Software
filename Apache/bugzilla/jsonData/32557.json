[{"count": 0, "tags": [], "bug_id": 32557, "is_private": false, "text": "DependTest.testClosure passes for me if I run using JDK 1.4.2 (Linux) but fails\nif run under JDK 1.5 (or a 1.6 alpha). The error message is\n\nDepend did not leave correct number of files expected:<2> but was:<1>\n\nIf however I set source=\"1.2\" on <javac> in depend.xml#compile, it passes (on\n1.4, 1.5, and 1.6). I suspect that there is some difference in javac's bytecode\ngeneration when using 1.5 source, though I don't know what exactly.", "id": 68027, "time": "2004-12-07T07:37:32Z", "creator": "jglick@apache.org", "creation_time": "2004-12-07T07:37:32Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "bodewig@apache.org", "text": "I (and Gump ;-) can confirm that.", "id": 68763, "time": "2004-12-21T16:00:15Z", "bug_id": 32557, "creation_time": "2004-12-21T16:00:15Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 32557, "is_private": false, "id": 68798, "creation_time": "2004-12-22T15:11:44Z", "time": "2004-12-22T15:11:44Z", "creator": "conor@apache.org", "text": "JDK 1.5 is much smarter when it comes to handling the code in one of the test\nfiles. \npublic class E {\n    E() {\n        System.out.println(A.class);\n    }\n}\n\nIn JDK 1.5, thie uses a class reference in the produced class file to A, rather\nthan a string reference as used in previous versions. The code for the above has\ngone from:\n\n{\nstatic java.lang.Class class$A;\n  Synthetic: true\n\nE();\n  Code:\n   Stack=3, Locals=1, Args_size=1\n   0:   aload_0\n   1:   invokespecial   #6; //Method java/lang/Object.\"<init>\":()V\n   4:   getstatic       #7; //Field java/lang/System.out:Ljava/io/PrintStream;\n   7:   getstatic       #8; //Field class$A:Ljava/lang/Class;\n   10:  ifnonnull       25\n   13:  ldc     #9; //String A\n   15:  invokestatic    #10; //Method class$:(Ljava/lang/String;)Ljava/lang/Class;\n   18:  dup\n   19:  putstatic       #8; //Field class$A:Ljava/lang/Class;\n   22:  goto    28\n   25:  getstatic       #8; //Field class$A:Ljava/lang/Class;\n   28:  invokevirtual   #11; //Method\njava/io/PrintStream.println:(Ljava/lang/Object;)V\n   31:  return\n\nstatic java.lang.Class class$(java.lang.String);\n  Code:\n   Stack=3, Locals=2, Args_size=1\n   0:   aload_0\n   1:   invokestatic    #1; //Method\njava/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;\n   4:   areturn\n   5:   astore_1\n   6:   new     #3; //class java/lang/NoClassDefFoundError\n   9:   dup\n   10:  aload_1\n   11:  invokevirtual   #4; //Method\njava/lang/ClassNotFoundException.getMessage:()Ljava/lang/String;\n   14:  invokespecial   #5; //Method\njava/lang/NoClassDefFoundError.\"<init>\":(Ljava/lang/String;)V\n   17:  athrow\n  Exception table:\n   from   to  target type\n     0     4     5   Class java/lang/ClassNotFoundException\n\n  Synthetic: true\n\n}\n\n\nto\n\n\nE();\n  Code:\n   Stack=2, Locals=1, Args_size=1\n   0:   aload_0\n   1:   invokespecial   #1; //Method java/lang/Object.\"<init>\":()V\n   4:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n   7:   ldc_w   #3; //class A\n   10:  invokevirtual   #4; //Method\njava/io/PrintStream.println:(Ljava/lang/Object;)V\n   13:  return\n\n}\n\nQuite an improvment.", "attachment_id": null}, {"count": 3, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "Is it just the test that is fixed, or the task? If the latter, might be a good\n1.6.3 candidate.", "id": 68804, "time": "2004-12-22T17:14:52Z", "bug_id": 32557, "creation_time": "2004-12-22T17:14:52Z", "is_private": false}, {"count": 4, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "text": "Only the test code has changed. \n\nThe only implication of this bug is that under JDK 1.5+, the <depend> code, as\nit currently stands, will perform a little bit better than under previous JDKs.\n A source file which contains a reference to a class of the form \"A.class\" will\ngenerate a classfile with a class reference to A. Sice <depend> uses class\nreferences to build its dependency model, under JDK 1.5, that model will be more\naccurate.", "id": 68873, "time": "2004-12-22T23:09:48Z", "bug_id": 32557, "creation_time": "2004-12-22T23:09:48Z", "is_private": false}]
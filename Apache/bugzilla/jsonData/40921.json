[{"count": 0, "tags": [], "creator": "fillipelima@gmail.com", "attachment_id": null, "id": 95545, "time": "2006-11-07T16:38:41Z", "bug_id": 40921, "creation_time": "2006-11-07T16:38:41Z", "is_private": false, "text": "Hello\n\nI am using the XML Signature API ( javax.xml.crypto ) in order to generate and\nverify signatures in xml documents (Enveloped type). \n\nWhen verifying the signature, if i have changed some data, the signature is\ninvalidated (That\u00b4s Ok and Correctly). But if have changed the content of\n<x509Certificate> tag by putting a different certificate, the signature is\nnormally validated. \n\nI defined the <reference uri=\"\"> indicating that the whole document must be\nsigned (according to w3 especifications)\n\nIs there something wrong ?\n\nHere is my xml before sign:\n=======================================\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n- <NotasFaltas>\n  <ano>2006</ano> \n  <semestre>2</semestre> \n  <turma>52A</turma> \n  <idtProf>15</idtProf> \n  <idtDisc>2</idtDisc> \n  <unidade>3</unidade> \n- <alunos class=\"linked-list\">\n- <Aluno>\n  <idtAlu>1</idtAlu> \n  <nota>1.0</nota> \n  <faltas>2</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>2</idtAlu> \n  <nota>3.0</nota> \n  <faltas>4</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>3</idtAlu> \n  <nota>5.0</nota> \n  <faltas>6</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>4</idtAlu> \n  <nota>7.0</nota> \n  <faltas>8</faltas> \n  </Aluno>\n  </alunos>\n </NotasFaltas>\n\n\nHere is my xml after sign:\n=======================================\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n- <NotasFaltas>\n  <ano>2006</ano> \n  <semestre>2</semestre> \n  <turma>52A</turma> \n  <idtProf>15</idtProf> \n  <idtDisc>2</idtDisc> \n  <unidade>3</unidade> \n- <alunos class=\"linked-list\">\n- <Aluno>\n  <idtAlu>1</idtAlu> \n  <nota>1.0</nota> \n  <faltas>2</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>2</idtAlu> \n  <nota>3.0</nota> \n  <faltas>4</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>3</idtAlu> \n  <nota>5.0</nota> \n  <faltas>6</faltas> \n  </Aluno>\n- <Aluno>\n  <idtAlu>4</idtAlu> \n  <nota>7.0</nota> \n  <faltas>8</faltas> \n  </Aluno>\n  </alunos>\n- <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n- <SignedInfo>\n  <CanonicalizationMethod\nAlgorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> \n  <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> \n- <Reference URI=\"\">\n- <Transforms>\n  <Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> \n  </Transforms>\n  <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> \n  <DigestValue>ltbvesKBO+VTvcovJyJ0VVkSaJM=</DigestValue> \n  </Reference>\n  </SignedInfo>\n \n<SignatureValue>I0lQECSCl5ITnF8uK/uMDZO2dgo0eLWFz4GMrV6I+FZmN2TbCr6Nj4LF62I7s2DVVrXybEsJmn/i\n00EPNyYflhQjbp2/EXFZ+pu8wu5mRtm2LmcRGXbJz6CBEkfOXzFdE8lmw3MPmDT/NsnM3KXavDJZ\nAh2xubknF/+Mjq7WDQE=</SignatureValue> \n- <KeyInfo>\n- <KeyValue>\n- <RSAKeyValue>\n \n<Modulus>unmSpz4AW43DBUeUtbGDxyEBOmKUiAM136ZrGOlJRzximnaFjABuQ7Ucix5Ru60DLlUH5Q3KHfDW\naimUe3ufnWUWSGkbNUGYtwdqv/54LvTvW3SMA0IuvfqUmdF+AJgHCWv0rEYizswKaeNgMak+/oWL\nMBrOwE2+fhB6l87tBo8=</Modulus> \n  <Exponent>AQAB</Exponent> \n  </RSAKeyValue>\n  </KeyValue>\n- <X509Data>\n \n<X509Certificate>MIIE5TCCA82gAwIBAgIQMjAwNjA3MjgxNjQzMjMwMjANBgkqhkiG9w0BAQUFADCBhDELMAkGA1UE\nBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxLDAqBgNVBAsTI1NlY3JldGFyaWEgZGEgUmVjZWl0\nYSBGZWRlcmFsIC0gU1JGMTIwMAYDVQQDEylBdXRvcmlkYWRlIENlcnRpZmljYWRvcmEgZG8gU0VS\nUFJPIFNSRiB2MTAeFw0wNjA4MDExOTE4MDZaFw0wOTA3MzExOTE4MDZaMIGoMQswCQYDVQQGEwJC\nUjETMBEGA1UEChMKSUNQLUJyYXNpbDEqMCgGA1UECxMhU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZl\nZGVyYWwtU1JGMRUwEwYDVQQLEwxDT05UUklCVUlOVEUxFTATBgNVBAsTDFNSRiBlLUNQRiBBMzEq\nMCgGA1UEAxMhRklMTElQRSBPTElWRUlSQSBMSU1BOjAwNjg0MDE5NTc0MIGfMA0GCSqGSIb3DQEB\nAQUAA4GNADCBiQKBgQC6eZKnPgBbjcMFR5S1sYPHIQE6YpSIAzXfpmsY6UlHPGKadoWMAG5DtRyL\nHlG7rQMuVQflDcod8NZqKZR7e5+dZRZIaRs1QZi3B2q//ngu9O9bdIwDQi69+pSZ0X4AmAcJa/Ss\nRiLOzApp42AxqT7+hYswGs7ATb5+EHqXzu0GjwIDAQABo4IBrzCCAaswDwYDVR0TAQH/BAUwAwEB\nADAfBgNVHSMEGDAWgBRGeQZEgwLZ6nmND8SA/kG69vMScjAOBgNVHQ8BAf8EBAMCBeAwYAYDVR0g\nBFkwVzBVBgZgTAECAwQwSzBJBggrBgEFBQcCARY9aHR0cHM6Ly9jY2Quc2VycHJvLmdvdi5ici9h\nY3NlcnByb3NyZi9kb2NzL2RwY2Fjc2VycHJvc3JmLnBkZjCBowYDVR0RBIGbMIGYoD0GBWBMAQMB\noDQEMjI3MDgxOTg0MDA2ODQwMTk1NzQwMDAwMDAwMDAwMDAwMDAwMDAzMDA5MTEwMVNTUFNFoCcG\nBWBMAQMFoB4EHDAyMDk0ODcxMjE5NDAyNzAyNjhBUkFDQUpVU0WgFwYFYEwBAwagDgQMMDAwMDAw\nMDAwMDAwgRVmaWxsaXBlbGltYUBnbWFpbC5jb20wIAYDVR0lAQH/BBYwFAYIKwYBBQUHAwIGCCsG\nAQUFBwMEMD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9jY2Quc2VycHJvLmdvdi5ici9sY3IvYWNz\nZXJwcm9zcmYuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQBliOTlViZNLJLUf2KlRobCtMmv7c7bkHqe\nM4HAW/19AyuuljFtQGpUAB9jjAXzgXpd9Hyrz/1+5NHPJ9fPoB+fHIpDYJfyUEnGkDPve7JUHrTq\n10MlPATIuiJhws+40O7sIaYftCK0Yn2V1LTFuEHLSD4T5kvXbpDbeMs6Hx9oiR3HFZxi/Cfhv/1X\nKeEjLtsrV9xEeJwY7soKQ0Ds2UMu2LLw02T9o9wMcX9M3MU/QN7AirmWQsMxDfmNDRzXV/Axbh0o\ns72mrHXvYpranXJhibh6aKW67LuhZM7Z5EDXWgioMXruk6ys8bm3EIBJ/+YtrUUrmTKA9BsIx3WD\n4UOy</X509Certificate> \n  </X509Data>\n  </KeyInfo>\n  </Signature>\n  </NotasFaltas>"}, {"count": 1, "tags": [], "creator": "cantor.2@osu.edu", "text": "An enveloped signature omits anything inside the Signature element apart from\nSignedInfo. KeyInfo is not commonly signed. The only attack possible is against\nbroken software that doesn't understand that KeyInfo is advisory, not trusted\ninformation.\n", "id": 95556, "time": "2006-11-07T21:18:35Z", "bug_id": 40921, "creation_time": "2006-11-07T21:18:35Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 40921, "is_private": false, "id": 95568, "time": "2006-11-08T06:37:32Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-11-08T06:37:32Z", "tags": [], "text": "I agree with Scott's reply. I haven't seen your code (can you post it?) but\nthis is most likely not a bug. However, I am curious as to what key you are \nusing to validate the signature. It seems you are using the correct key each\ntime. If you validated with a key from this different X.509 certificate that you\nhave inserted then it should not validate (if indeed it was a different public key)."}, {"attachment_id": null, "tags": [], "bug_id": 40921, "text": "(In reply to comment #2)\n> I agree with Scott's reply. I haven't seen your code (can you post it?) but\n> this is most likely not a bug. However, I am curious as to what key you are \n> using to validate the signature. It seems you are using the correct key each\n> time. If you validated with a key from this different X.509 certificate that you\n> have inserted then it should not validate (if indeed it was a different public\nkey).\n\nhere is my verifying code:\n=======================================\n\nimport java.io.FileInputStream;\nimport java.security.Key;\nimport java.security.KeyException;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.cert.X509Certificate;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.xml.crypto.AlgorithmMethod;\nimport javax.xml.crypto.KeySelector;\nimport javax.xml.crypto.KeySelectorException;\nimport javax.xml.crypto.KeySelectorResult;\nimport javax.xml.crypto.XMLCryptoContext;\nimport javax.xml.crypto.XMLStructure;\nimport javax.xml.crypto.dsig.Reference;\nimport javax.xml.crypto.dsig.SignatureMethod;\nimport javax.xml.crypto.dsig.XMLSignature;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.dom.DOMValidateContext;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfo;\nimport javax.xml.crypto.dsig.keyinfo.KeyValue;\nimport javax.xml.crypto.dsig.keyinfo.X509Data;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Element;\n\npublic class ValidacaoXmlEnveloped {\n\n  static public XMLSignature validar(Document documento) throws\nValidacaoXmlEnvelopedException {\n    boolean      ok        = false;\n    XMLSignature signature = null;\n    try {\n\n      NodeList listaNos = documento.getElementsByTagNameNS(XMLSignature.XMLNS,\n\"Signature\");\n      if (listaNos.getLength() == 0) {\n          throw new ValidacaoXmlEnvelopedException(\"Assinatura n\u00e3o est\u00e1 presente.\");\n      }\n      String              nomeProvider = System.getProperty(\"jsr105Provider\",\n\"org.jcp.xml.dsig.internal.dom.XMLDSigRI\");\n      XMLSignatureFactory xmlSigFac    = XMLSignatureFactory.getInstance(\"DOM\",\n (Provider) Class.forName(nomeProvider).newInstance());\n\n      DOMValidateContext valCont      = new DOMValidateContext(new\nKeyValueKeySelector(), listaNos.item(0));\n\n      signature          = xmlSigFac.unmarshalXMLSignature(valCont);\n\n      ok = signature.validate(valCont);\n    } catch( Exception ex ) {\n        ex.printStackTrace();\n        throw new ValidacaoXmlEnvelopedException(ex.getMessage());\n    }\n    if (ok) {\n        return signature;\n    } else\n        return null;\n  }\n\n\n  private static class KeyValueKeySelector extends KeySelector {\n    public KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose\npurpose, AlgorithmMethod method, XMLCryptoContext context) throws\nKeySelectorException {\n      if (keyInfo == null) {\n        throw new KeySelectorException(\"Objeto KeyInfo null!\");\n      }\n      SignatureMethod sm   = (SignatureMethod) method;\n      List            list = keyInfo.getContent();\n      for (int i = 0; i < list.size(); i++) {\n        PublicKey pk = null;\n        XMLStructure xmlStructure = (XMLStructure) list.get(i);\n        if (xmlStructure instanceof KeyValue) {\n          try {\n              pk = ((KeyValue)xmlStructure).getPublicKey();\n          } catch (KeyException ke) {\n              ke.printStackTrace();\n              throw new KeySelectorException(ke);\n          }\n        }\n        else if( xmlStructure instanceof X509Data) {\n          List lst = ((X509Data)xmlStructure).getContent();\n          X509Certificate cert = (X509Certificate)lst.get(0);\n          pk = cert.getPublicKey();\n        }\n\n        if (algEquals(sm.getAlgorithm(), pk.getAlgorithm())) {\n          return new SimpleKeySelectorResult(pk);\n        }\n      }\n      throw new KeySelectorException(\"Nenhum elemento KeyValue encontrado!\");\n    }\n\n    static boolean algEquals(String algURI, String algName) {\n      if (algName.equalsIgnoreCase(\"DSA\") &&\nalgURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)) {\n        return true;\n      } else if (algName.equalsIgnoreCase(\"RSA\") &&\nalgURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1)) {\n          return true;\n        } else {\n            return false;\n        }\n    }\n  }\n\n  private static class SimpleKeySelectorResult implements KeySelectorResult {\n    private PublicKey pk;\n    SimpleKeySelectorResult(PublicKey pk) {\n      this.pk = pk;\n    }\n    public Key getKey() {\n      return pk;\n    }\n  }\n\n}", "count": 3, "id": 95573, "time": "2006-11-08T06:52:55Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-08T06:52:55Z", "is_private": false}, {"text": "That code looks fine, but it is still missing something. How do you modify\nthe X509Certificate? I would add a print statement in the KeySelector to print\nout the key that you are using to validate the signature. Is it different after\nyou modify the X509Certificate?", "tags": [], "bug_id": 40921, "attachment_id": null, "count": 4, "id": 95576, "time": "2006-11-08T07:33:48Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-11-08T07:33:48Z", "is_private": false}, {"count": 5, "tags": [], "creator": "fillipelima@gmail.com", "attachment_id": null, "id": 95577, "time": "2006-11-08T08:19:51Z", "bug_id": 40921, "creation_time": "2006-11-08T08:19:51Z", "is_private": false, "text": "(In reply to comment #4)\n> That code looks fine, but it is still missing something. How do you modify\n> the X509Certificate? \nI modify the certificate by substituting it for one from an other xml that was \nsigned with different certificate.  \n>I would add a print statement in the KeySelector to print\n> out the key that you are using to validate the signature. Is it different \nafter\n> you modify the X509Certificate?\nThe key is the same. because i havent modified it. i think the key is that one \ninside the <KeyValue> tag: \n\n<KeyValue>\n- <RSAKeyValue>\n \n<Modulus>unmSpz4AW43DBUeUtbGDxyEBOmKUiAM136ZrGOlJRzximnaFjABuQ7Ucix5Ru60DLlUH5Q3\nKHfDW\naimUe3ufnWUWSGkbNUGYtwdqv/54LvTvW3SMA0IuvfqUmdF+AJgHCWv0rEYizswKaeNgMak+/oWL\nMBrOwE2+fhB6l87tBo8=</Modulus> \n  <Exponent>AQAB</Exponent> \n\ni could try using the key from the certificate in <x509data> tag...\n  </RSAKeyValue>\n  </KeyValue>\n\n\n"}, {"count": 6, "tags": [], "creator": "sean.mullan@oracle.com", "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > That code looks fine, but it is still missing something. How do you modify\n> > the X509Certificate? \n> I modify the certificate by substituting it for one from an other xml that was \n> signed with different certificate.  \n> >I would add a print statement in the KeySelector to print\n> > out the key that you are using to validate the signature. Is it different \n> after\n> > you modify the X509Certificate?\n> The key is the same. because i havent modified it. i think the key is that one \n> inside the <KeyValue> tag: \n> \n> <KeyValue>\n> - <RSAKeyValue>\n>  \n> <Modulus>unmSpz4AW43DBUeUtbGDxyEBOmKUiAM136ZrGOlJRzximnaFjABuQ7Ucix5Ru60DLlUH5Q3\n> KHfDW\n> aimUe3ufnWUWSGkbNUGYtwdqv/54LvTvW3SMA0IuvfqUmdF+AJgHCWv0rEYizswKaeNgMak+/oWL\n> MBrOwE2+fhB6l87tBo8=</Modulus> \n>   <Exponent>AQAB</Exponent> \n> \n> i could try using the key from the certificate in <x509data> tag...\n\nYes, if you change your KeySelector to check the X509Data before the KeyValue\nthen it will use the certificate's key and the signature validation will fail.", "id": 95578, "time": "2006-11-08T08:29:44Z", "bug_id": 40921, "creation_time": "2006-11-08T08:29:44Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "sean.mullan@oracle.com", "text": "I would like to close this out as not a bug. \nHave you had a chance to try my suggestion yet?", "id": 95621, "time": "2006-11-09T07:50:56Z", "bug_id": 40921, "creation_time": "2006-11-09T07:50:56Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 40921, "attachment_id": null, "text": "(In reply to comment #7)\n> I would like to close this out as not a bug. \n> Have you had a chance to try my suggestion yet?\n\nNo...not yet. Because im having a lot of other things here in my job. but i will\ntry two things:\n\n1- Sign the <KeyInfo>  too. Because the <Reference URI=\"\"> means that all the\ndocument will be signed, except the elemnts into <signature>. so..i will create\nan id like this: <KeyInfo id=\"test\"> and create a reference, indicating that i\nwant to sign the KeyInfo: <Reference URI=\"test\">\n\n2- Try What you said.\n\nThank you so much for your quick reponses!\n\n", "id": 95653, "time": "2006-11-10T04:48:21Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-10T04:48:21Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 40921, "attachment_id": null, "text": "(In reply to comment #8)\n\nHello \n\nI tried to get the public key from the certificate. But the keyInfo object is\ninstance of KeyValue. I need that the KeyInfo Object was instance of\nKeyInfo...so i could get x509Data and then x509Certificate. The method that i\nrecieve the KeyInfo object:\n\npublic KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose\npurpose, AlgorithmMethod method, XMLCryptoContext context) throws\nKeySelectorException {\n\nIs there anyway to get the keyinfo as instance of KeyInfo ?\n\n", "id": 95668, "time": "2006-11-10T10:53:38Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-10T10:53:38Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 40921, "attachment_id": null, "text": "(In reply to comment #9)\n> (In reply to comment #8)\n> \n> Hello \n> \n> I tried to get the public key from the certificate. But the keyInfo object is\n> instance of KeyValue. I need that the KeyInfo Object was instance of\n> KeyInfo...so i could get x509Data and then x509Certificate. The method that i\n> recieve the KeyInfo object:\n> \n> public KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose\n> purpose, AlgorithmMethod method, XMLCryptoContext context) throws\n> KeySelectorException {\n> \n> Is there anyway to get the keyinfo as instance of KeyInfo ?\n\nI'm afraid I don't understand the problem. keyInfo must be an instance of\nKeyInfo otherwise you will get a ClassCastException. You can call \nkeyInfo.getContent() which will return a List of XMLStructure objects, each\nof which represents an element in the KeyInfo (KeyValue, X509Data, etc).", "id": 95670, "time": "2006-11-10T11:49:17Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-11-10T11:49:17Z", "is_private": false}, {"count": 11, "tags": [], "creator": "fillipelima@gmail.com", "attachment_id": null, "id": 95684, "time": "2006-11-11T03:28:14Z", "bug_id": 40921, "creation_time": "2006-11-11T03:28:14Z", "is_private": false, "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > (In reply to comment #8)\n> > \n> > Hello \n> > \n> > I tried to get the public key from the certificate. But the keyInfo object is\n> > instance of KeyValue. I need that the KeyInfo Object was instance of\n> > KeyInfo...so i could get x509Data and then x509Certificate. The method that i\n> > recieve the KeyInfo object:\n> > \n> > public KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose\n> > purpose, AlgorithmMethod method, XMLCryptoContext context) throws\n> > KeySelectorException {\n> > \n> > Is there anyway to get the keyinfo as instance of KeyInfo ?\n> \n> I'm afraid I don't understand the problem. keyInfo must be an instance of\n> KeyInfo otherwise you will get a ClassCastException. You can call \n> keyInfo.getContent() which will return a List of XMLStructure objects, each\n> of which represents an element in the KeyInfo (KeyValue, X509Data, etc).\n\n  I would like so much that it was an instance of KeyInfo. however it is an\ninstance of KeyValue. when i call keyInfo.getContent() it returns the content of\nthe KeyValue...and when i call KeyInfo.getClass() it returns a DOMKeyValue instance"}, {"count": 12, "tags": [], "creator": "sean.mullan@oracle.com", "text": ">   I would like so much that it was an instance of KeyInfo. however it is an\n> instance of KeyValue. when i call keyInfo.getContent() it returns the content of\n> the KeyValue...and when i call KeyInfo.getClass() it returns a DOMKeyValue\ninstance\n\nCan you post the code that demonstrates this?\n\nThanks.", "id": 95764, "time": "2006-11-13T06:55:55Z", "bug_id": 40921, "creation_time": "2006-11-13T06:55:55Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "bug_id": 40921, "text": "(In reply to comment #12)\n> >   I would like so much that it was an instance of KeyInfo. however it is an\n> > instance of KeyValue. when i call keyInfo.getContent() it returns the content of\n> > the KeyValue...and when i call KeyInfo.getClass() it returns a DOMKeyValue\n> instance\n> \n> Can you post the code that demonstrates this?\n> \n> Thanks.\n\nThe code:\n\npackage br.unit.certificacao;\n\nimport java.io.FileInputStream;\nimport java.security.Key;\nimport java.security.KeyException;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.cert.X509Certificate;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.xml.crypto.AlgorithmMethod;\nimport javax.xml.crypto.KeySelector;\nimport javax.xml.crypto.KeySelectorException;\nimport javax.xml.crypto.KeySelectorResult;\nimport javax.xml.crypto.XMLCryptoContext;\nimport javax.xml.crypto.XMLStructure;\nimport javax.xml.crypto.dsig.Reference;\nimport javax.xml.crypto.dsig.SignatureMethod;\nimport javax.xml.crypto.dsig.XMLSignature;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.dom.DOMValidateContext;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfo;\nimport javax.xml.crypto.dsig.keyinfo.KeyValue;\nimport javax.xml.crypto.dsig.keyinfo.X509Data;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Element;\n\n\npublic class ValidacaoXmlEnveloped {\n\n  static public XMLSignature validar(Document documento) throws\nValidacaoXmlEnvelopedException {\n    boolean      ok        = false;\n    XMLSignature signature = null;\n    try {\n      NodeList listaNos = documento.getElementsByTagNameNS(XMLSignature.XMLNS,\n\"Signature\");\n      if (listaNos.getLength() == 0) {\n          throw new ValidacaoXmlEnvelopedException(\"Assinatura n\u00e3o est\u00e1 presente.\");\n      }\n      String              nomeProvider = System.getProperty(\"jsr105Provider\",\n\"org.jcp.xml.dsig.internal.dom.XMLDSigRI\");\n      XMLSignatureFactory xmlSigFac    = XMLSignatureFactory.getInstance(\"DOM\",\n (Provider) Class.forName(nomeProvider).newInstance());\n      // Cria o DOMValidateContext, especifica o Selector que\n      // ser\u00e1 usado e o contexto do documento.\n      DOMValidateContext valCont      = new DOMValidateContext(new\nKeyValueKeySelector(), listaNos.item(0));\n      // Instancia o XMLSignature para verifica\u00e7\u00e3o.\n      signature          = xmlSigFac.unmarshalXMLSignature(valCont);\n      // Valida o XMLSignature\n      ok = signature.validate(valCont);\n    } catch( Exception ex ) {\n        ex.printStackTrace();\n        throw new ValidacaoXmlEnvelopedException(ex.getMessage());\n    }\n    if (ok) {\n        return signature;\n    } else\n        return null;\n  }\n//===================================================\n// HERE IS WHERE I RECEIVE THE KEYINFO OBJECT\n//===================================================\n\n  private static class KeyValueKeySelector extends KeySelector {\n    public KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose\npurpose, AlgorithmMethod method, XMLCryptoContext context) throws\nKeySelectorException {\n      if (keyInfo == null) {\n        throw new KeySelectorException(\"Objeto KeyInfo null!\");\n      }\n      SignatureMethod sm   = (SignatureMethod) method;\n      List            list = keyInfo.getContent();\n      for (int i = 0; i < list.size(); i++) {\n        PublicKey pk = null;\n        XMLStructure xmlStructure = (XMLStructure) list.get(i);\n\n        if( xmlStructure instanceof X509Data) {\n          List lst = ((X509Data)xmlStructure).getContent();\n          X509Certificate cert = (X509Certificate)lst.get(0);\n          pk = cert.getPublicKey();\n        }\n\n        if (algEquals(sm.getAlgorithm(), pk.getAlgorithm())) {\n          return new SimpleKeySelectorResult(pk);\n        }\n      }\n      throw new KeySelectorException(\"Nenhum elemento KeyValue encontrado!\");\n    }\n\n    static boolean algEquals(String algURI, String algName) {\n      if (algName.equalsIgnoreCase(\"DSA\") &&\nalgURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)) {\n        return true;\n      } else if (algName.equalsIgnoreCase(\"RSA\") &&\nalgURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1)) {\n          return true;\n        } else {\n            return false;\n        }\n    }\n  }\n\n  private static class SimpleKeySelectorResult implements KeySelectorResult {\n    private PublicKey pk;\n    SimpleKeySelectorResult(PublicKey pk) {\n      this.pk = pk;\n    }\n    public Key getKey() {\n      return pk;\n    }\n  }\n\n}\n\n", "id": 95766, "time": "2006-11-13T07:02:29Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-13T07:02:29Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 40921, "attachment_id": null, "text": "I need more than this to reproduce the problem. Please post a simple test case\nthat I can compile and run without writing *any additional code* and also \ninclude the signature you are validating.", "id": 95768, "time": "2006-11-13T07:56:20Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-11-13T07:56:20Z", "is_private": false}, {"count": 15, "tags": [], "text": "(In reply to comment #14)\n> I need more than this to reproduce the problem. Please post a simple test case\n> that I can compile and run without writing *any additional code* and also \n> include the signature you are validating.\n\nYou will have to add the xmldsig.jar and xmlsec.xml in your classpath from Java \nWeb Services Developer Pack 2.0\n\n============================================================\nUse this main class to test:\n============================================================\n\nimport java.io.FileInputStream;\nimport javax.xml.crypto.dsig.XMLSignature;\n\npublic class Principal {\n  public void validate() {\n    try {\n      javax.xml.parsers.DocumentBuilderFactory dbf = \njavax.xml.parsers.DocumentBuilderFactory.newInstance();\n      dbf.setNamespaceAware(true);\n      javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder();\n      org.w3c.dom.Document docXML = db.parse(new FileInputStream\n(\"c:\\\\signedxml.xml\"));\n      XMLSignature assinatura = ValidacaoXmlEnveloped.validar(docXML);\n      if (assinatura != null) {\n        System.out.println(\"Signature ok!\");\n      }else {\n        System.out.println(\"Invalid Signature!\");\n      }\n\n    } catch (Exception ex){\n        ex.printStackTrace();\n    }\n  }\n  public static void main(String[] args) {\n    Principal p = new Principal();\n    p.validate();\n  }\n}\n\n===================================================\nValidacaoXmlEnveloped class\n==================================================\n\nimport java.io.FileInputStream;\nimport java.security.Key;\nimport java.security.KeyException;\nimport java.security.Provider;\nimport java.security.PublicKey;\nimport java.security.cert.X509Certificate;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.xml.crypto.AlgorithmMethod;\nimport javax.xml.crypto.KeySelector;\nimport javax.xml.crypto.KeySelectorException;\nimport javax.xml.crypto.KeySelectorResult;\nimport javax.xml.crypto.XMLCryptoContext;\nimport javax.xml.crypto.XMLStructure;\nimport javax.xml.crypto.dsig.Reference;\nimport javax.xml.crypto.dsig.SignatureMethod;\nimport javax.xml.crypto.dsig.XMLSignature;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.dom.DOMValidateContext;\nimport javax.xml.crypto.dsig.keyinfo.KeyInfo;\nimport javax.xml.crypto.dsig.keyinfo.KeyValue;\nimport javax.xml.crypto.dsig.keyinfo.X509Data;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Element;\n\n\n/**\n * Classe para a verificacao de qualquer tipo de assinaturas XMLDSIG.\n * @author bribeiro\n *\n */\npublic class ValidacaoXmlEnveloped {\n\n  static public XMLSignature validar(Document documento) throws \nValidacaoXmlEnvelopedException {\n    boolean      ok        = false;\n    XMLSignature signature = null;\n    try {\n      // Obtem a tag \"Signature\" do documento\n      NodeList listaNos = documento.getElementsByTagNameNS\n(XMLSignature.XMLNS, \"Signature\");\n      if (listaNos.getLength() == 0) {\n          throw new ValidacaoXmlEnvelopedException(\"Assinatura n\u00e3o est\u00e1 \npresente.\");\n      }\n      String              nomeProvider = System.getProperty\n(\"jsr105Provider\", \"org.jcp.xml.dsig.internal.dom.XMLDSigRI\");\n      XMLSignatureFactory xmlSigFac    = XMLSignatureFactory.getInstance\n(\"DOM\",  (Provider) Class.forName(nomeProvider).newInstance());\n      // Cria o DOMValidateContext, especifica o Selector que\n      // ser\u00e1 usado e o contexto do documento.\n      DOMValidateContext valCont      = new DOMValidateContext(new \nKeyValueKeySelector(), listaNos.item(0));\n      // Instancia o XMLSignature para verifica\u00e7\u00e3o.\n      signature          = xmlSigFac.unmarshalXMLSignature(valCont);\n      // Valida o XMLSignature\n      ok = signature.validate(valCont);\n    } catch( Exception ex ) {\n        ex.printStackTrace();\n        throw new ValidacaoXmlEnvelopedException(ex.getMessage());\n    }\n    if (ok) {\n        return signature;\n    } else\n        return null;\n  }\n\n  /**\n   * KeySelector que retorna a chave p\u00fablica de dentro do\n   * elemento KeyValue..\n   * NOTE: Caso o algoritmo da chave n\u00e3o bata com o da assinatura,\n   * a chave p\u00fablica \u00e9 ignorada.\n   */\n\n  private static class KeyValueKeySelector extends KeySelector {\n    public KeySelectorResult select(KeyInfo keyInfo,  KeySelector.Purpose \npurpose, AlgorithmMethod method, XMLCryptoContext context) throws \nKeySelectorException {\n      if (keyInfo == null) {\n        throw new KeySelectorException(\"Objeto KeyInfo null!\");\n      }\n      SignatureMethod sm   = (SignatureMethod) method;\n      List            list = keyInfo.getContent();\n      for (int i = 0; i < list.size(); i++) {\n        PublicKey pk = null;\n        XMLStructure xmlStructure = (XMLStructure) list.get(i);\n\n        System.out.println(\"Class\"+xmlStructure.getClass());\n        if( xmlStructure instanceof X509Data) {\n          System.out.print(\"dentro do x509data\");\n          List lst = ((X509Data)xmlStructure).getContent();\n          X509Certificate cert = (X509Certificate)lst.get(0);\n          pk = cert.getPublicKey();\n        }\n        // garante que o algoritmo \u00e9 compat\u00edvel com o m\u00e9todo.\n        if (algEquals(sm.getAlgorithm(), pk.getAlgorithm())) {\n          return new SimpleKeySelectorResult(pk);\n        }\n      }\n      throw new KeySelectorException(\"Nenhum elemento KeyValue encontrado!\");\n    }\n\n    static boolean algEquals(String algURI, String algName) {\n      if (algName.equalsIgnoreCase(\"DSA\") && algURI.equalsIgnoreCase\n(SignatureMethod.DSA_SHA1)) {\n        return true;\n      } else if (algName.equalsIgnoreCase(\"RSA\") && algURI.equalsIgnoreCase\n(SignatureMethod.RSA_SHA1)) {\n          return true;\n        } else {\n            return false;\n        }\n    }\n  }\n\n  private static class SimpleKeySelectorResult implements KeySelectorResult {\n    private PublicKey pk;\n    SimpleKeySelectorResult(PublicKey pk) {\n      this.pk = pk;\n    }\n    public Key getKey() {\n      return pk;\n    }\n  }\n\n}\n\n=======================================\nValidacaoXmlEnvelopedException class\n=======================================\n\npublic class ValidacaoXmlEnvelopedException extends Exception {\n    public ValidacaoXmlEnvelopedException(String msg) {\n        super(msg);\n    }\n}\n\n=======================================\nsignedxml.xml:\n=======================================\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><NotasFaltas>\n  <ano>2006</ano>\n  <semestre>2</semestre>\n  <turma>52A</turma>\n  <idtProf>15</idtProf>\n  <idtDisc>2</idtDisc>\n  <unidade>3</unidade>\n  <alunos class=\"linked-list\">\n    <Aluno>\n      <idtAlu>1</idtAlu>\n      <nota>1.0</nota>\n      <faltas>2</faltas>\n    </Aluno>\n    <Aluno>\n      <idtAlu>2</idtAlu>\n      <nota>3.0</nota>\n      <faltas>4</faltas>\n    </Aluno>\n    <Aluno>\n      <idtAlu>3</idtAlu>\n      <nota>5.0</nota>\n      <faltas>6</faltas>\n    </Aluno>\n    <Aluno>\n      <idtAlu>4</idtAlu>\n      <nota>7.0</nota>\n      <faltas>8</faltas>\n    </Aluno>\n  </alunos>\n<Signature \nxmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod \nAlgorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-\n20010315#WithComments\"/><SignatureMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><Reference \nURI=\"\"><Transforms><Transform \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-\nsignature\"/></Transforms><DigestMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><DigestValue>ltbvesKBO+VTvco\nvJyJ0VVkSaJM=</DigestValue></Reference></SignedInfo><SignatureValue>r89mfZ7YkrQe\nFOeniXbj5JZja09Kmva+6naBMSu8srlfduq3mbyO5IYOGoHnDXLR7Q5TPGbfZtJa\nTpxBQQFJz6pcnO53IyVaymGw5/fx89rtthr2weHJRx8DSiFeA8mio5PsJnSISXy/1F+byDvA3B/a\nNANqL76K+mPMlsc04z4=</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>sc\nAc0kZZ1Z+ldqz/OK9ZyNmHcNuy8U6fyk2OBvamkWyO3CU9NsWJ6pKZvpO3QAQwKakYbrB3joib\n2THy0NEjNFRqdLWw4jaILqjpX0IgdGUY6TZzWq+oRCwTkm/JbG9M7Krl06c1ffMh30V0GnhcXWIC\nbweBOvfh8jIFA2xvoN0=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue>\n<X509Data><X509Certificate>MIIFmjCCBIKgAwIBAgIIH1lD8vnjdaEwDQYJKoZIhvcNAQEFBQAwa\nDELMAkGA1UEBhMCQlIxEzAR\nBgNVBAoTCklDUC1CcmFzaWwxLDAqBgNVBAsTI1NlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFs\nIC0gU1JGMRYwFAYDVQQDEw1BQyBTRVJBU0EgU1JGMB4XDTA2MTAyMzE4MDkwNVoXDTA5MTAyMjE4\nMDkwNVowggE1MQswCQYDVQQGEwJCUjETMBEGA1UEChMKSUNQLUJyYXNpbDEsMCoGA1UECxMjU2Vj\ncmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgLSBTUkYxEjAQBgNVBAsTCVNSRiBlLUNQRjEUMBIG\nA1UECxMLKEVNIEJSQU5DTykxFDASBgNVBAsTCyhFTSBCUkFOQ08pMRQwEgYDVQQLEwsoRU0gQlJB\nTkNPKTEUMBIGA1UECxMLKEVNIEJSQU5DTykxFDASBgNVBAsTCyhFTSBCUkFOQ08pMRQwEgYDVQQL\nEwsoRU0gQlJBTkNPKTEUMBIGA1UECxMLKEVNIEJSQU5DTykxNTAzBgNVBAMTLERPTUlOR09TIFNB\nVklPIEFMQ0FOVEFSQSBNQUNIQURPOjU4NDQyMTQ2NTA0MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\niQKBgQCxwBzSRlnVn6V2rP84r1nI2Ydw27LxTp/KTY4G9qaRbI7cJT02xYnqkpm+k7dABDApqRhu\nsHeOiJvZMfLQ0SM0VGp0tbDiNoguqOlfQiB0ZRjpNnNar6hELBOSb8lsb0zsquXTpzV98yHfRXQa\neFxdYgJvB4E69+HyMgUDbG+g3QIDAQABo4IB+zCCAfcwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMC\nBeAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMB8GA1UdIwQYMBaAFLcyqiA9/1rttKzS\npxhVioyAKJUEMIGaBgNVHREEgZIwgY+BDERTQU1AVU5JVC5CUqA9BgVgTAEDAaA0EzIwODAxMTk3\nMTU4NDQyMTQ2NTA0MDAwMDAwMDAwMDAwMDAwMDAwMDA3OTM4MjJTU1BTRaAXBgVgTAEDBqAOEwww\nMDAwMDAwMDAwMDCgJwYFYEwBAwWgHhMcMDEwNjIxODUyMTc4MDM2MDI1MkFSQUNBSlVTRTBXBgNV\nHSAEUDBOMEwGBmBMAQIDCjBCMEAGCCsGAQUFBwIBFjRodHRwOi8vd3d3LmNlcnRpZmljYWRvZGln\naXRhbC5jb20uYnIvcmVwb3NpdG9yaW8vZHBjMFMGA1UdHwRMMEowSKBGoESGQmh0dHA6Ly93d3cu\nY2VydGlmaWNhZG9kaWdpdGFsLmNvbS5ici9yZXBvc2l0b3Jpby9sY3IvU2VyYXNhU1JGLmNybDBP\nBggrBgEFBQcBAQRDMEEwPwYIKwYBBQUHMAGGM2h0dHA6Ly9vY3NwLmNlcnRpZmljYWRvZGlnaXRh\nbC5jb20uYnIvQUNfU2VyYXNhX1NSRjANBgkqhkiG9w0BAQUFAAOCAQEA04lF7He8qnNJYwk8kmyg\n0EhdM+BrYirtWwcZcOxd5cRzzhElxk6lcxHNZf0gWyJn7Db1V0p7lhP9nZzA3a4xXOuzjWyncaZC\nyoQiWeL+y249Snj+j4Y+XhHXj/TuLxEMdCIg5x/uiS/Zm95YZKsDRj0kkn6UJ3eYLHGvCl80M+Wt\nBAQOg55PJYif4arbBpDBJU+H1B5C6iXsb9Xl9TdN23heAAOIbTxxfdaclVP0vTVogwA2EHaL1U04\n5k9R3eMpgsXtTpfIXLMDewUHzRGH2COh//1DhXx/kkr7y/1IH2Ohg0m/pVT2Pj25sWWMWh5Ul3MO\n6KUk5XSU/eSTcArBJg==</X509Certificate><X509Certificate>MIIFETCCA/mgAwIBAgISMjAwN\nTAyMTYxNjU4MjEwMDAxMA0GCSqGSIb3DQEBBQUAMGkxCzAJBgNV\nBAYTAkJSMRMwEQYDVQQKEwpJQ1AtQnJhc2lsMUUwQwYDVQQDEzxBdXRvcmlkYWRlIENlcnRpZmlj\nYWRvcmEgZGEgU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgdjEwHhcNMDUwMjE2MTcwODAy\nWhcNMTExMDE3MTcwODAyWjBoMQswCQYDVQQGEwJCUjETMBEGA1UEChMKSUNQLUJyYXNpbDEsMCoG\nA1UECxMjU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgLSBTUkYxFjAUBgNVBAMTDUFDIFNF\nUkFTQSBTUkYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDWuxxWvObgcxJ4IugU3acc\n837duwUKHTULdh1BFtsm/oe33L9I3omHplteUO3WHPjSwO/oHhQ5irA/AyYcoLt7Fi3Ot96tn62Y\nV40QXDHL3C8AkSFo8A5nPNaL1l7ITDUWldVK2AzxhvOdOzEn55vEgh6TUWjSPB2T8SjeAmlbhr73\nOGZnvrsKma+wiM2i1+n/mh5F8eYwGs5hubdAbYJRWDZN6/R9cXplwYFYCq7h2+K57yigYsailgn4\n9DlMcoDWogWmGav3uFnbglX41ERYuaYlLnuTQxbZOqaktYUVat+cVQfHs42lbMfpDehjyn45qCVW\n3TzW9vMVdzrjrzndAgMBAAGjggGyMIIBrjASBgNVHRMBAf8ECDAGAQH/AgEAMCIGA1UdIwEBAAQY\nMBaAFPLn1gjPMUcSnbBOKMKXHJxi0640MCAGA1UdDgEBAAQWBBS3MqogPf9a7bSs0qcYVYqMgCiV\nBDAOBgNVHQ8BAf8EBAMCAQYwgfgGA1UdIAEBAASB7TCB6jBMBgZgTAECAQ0wQjBABggrBgEFBQcC\nARY0aHR0cDovL3d3dy5yZWNlaXRhLmZhemVuZGEuZ292LmJyL2Fjc3JmL2RwY2Fjc3JmLnBkZjBM\nBgZgTAECAgIwQjBABggrBgEFBQcCARY0aHR0cDovL3d3dy5yZWNlaXRhLmZhemVuZGEuZ292LmJy\nL2Fjc3JmL2RwY2Fjc3JmLnBkZjBMBgZgTAECAwowQjBABggrBgEFBQcCARY0aHR0cDovL3d3dy5y\nZWNlaXRhLmZhemVuZGEuZ292LmJyL2Fjc3JmL2RwY2Fjc3JmLnBkZjBHBgNVHR8BAQAEPTA7MDmg\nN6A1hjNodHRwOi8vd3d3LnJlY2VpdGEuZmF6ZW5kYS5nb3YuYnIvYWNzcmYvYWNzcmZ2MS5jcmww\nDQYJKoZIhvcNAQEFBQADggEBAB+T/jLfNoie1YlYRj7Fxiwxssc82zDgRphtENSj3mXhmuJelWUH\nSbORo/ABMTEjnuPnDDp6EnkwQs4oHgH+a2/js+gYxWx5iI3mj7XyrLNM5rBWe4yWdMOt09toGiPx\nnehgwiA2/FL5qeKU5AsJ3QtOFWZ6FiR6GotfzZrZsqgf/oqV2bzcxt0LDuq++nU1bz+M6wWFmMSU\nhdhYeaufBINJn4S6ezOeLWr77OrRala/X8clo1OKiTmioMpwFCILBrTmx6WO7l7Vz0HuRfQ149mu\nS17v1QFxmZbhwZKqewH75vbVfHdcX3+sUIAqQSJ0A7fHzld67M+9h+c+5BEcs30=</X509Certificat\ne><X509Certificate>MIIEUTCCAzmgAwIBAgIBETANBgkqhkiG9w0BAQUFADCBtDELMAkGA1UEBhMCQ\nlIxEzARBgNVBAoT\nCklDUC1CcmFzaWwxPTA7BgNVBAsTNEluc3RpdHV0byBOYWNpb25hbCBkZSBUZWNub2xvZ2lhIGRh\nIEluZm9ybWFjYW8gLSBJVEkxETAPBgNVBAcTCEJyYXNpbGlhMQswCQYDVQQIEwJERjExMC8GA1UE\nAxMoQXV0b3JpZGFkZSBDZXJ0aWZpY2Fkb3JhIFJhaXogQnJhc2lsZWlyYTAeFw0wNTAyMDIxMjU1\nMDBaFw0xMTExMDIyMzU5MDBaMGkxCzAJBgNVBAYTAkJSMRMwEQYDVQQKEwpJQ1AtQnJhc2lsMUUw\nQwYDVQQDEzxBdXRvcmlkYWRlIENlcnRpZmljYWRvcmEgZGEgU2VjcmV0YXJpYSBkYSBSZWNlaXRh\nIEZlZGVyYWwgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0YeMzA5AcEl60DET0\nCmVy7lbly2X5TL+IQV98LAW0tfyTe9U43TNqh0vHeg8B3opWG24pOTozbRtPWo1vC5aJYSbGKXBg\ncqmOpZWrZn25Eqm7qiCD9swIQDpFs6GlrvYBKUArEaNXki6Rte5UOl0wcenYQi3LVGwfXK28xn4u\nTwP706mrSIm2LhRjTfAtU+78ZeTcdm8wOtfGy2v3oFkyrzl5iLSqsL2n53NvMDuOs3Cv9BnTroNE\ns4QJNqOogMkCHt2OjvxZ0MCp2wn465tV2/L+ykCIQjfTYGdRiuyXMZu6iKmreHVcORyr0X1QMd4+\nPfnT21nwAoN0HaX7jrhfAgMA0yGjgbcwgbQwPQYDVR0fBDYwNDAyoDCgLoYsaHR0cDovL2FjcmFp\nei5pY3BicmFzaWwuZ292LmJyL0xDUmFjcmFpei5jcmwwEgYDVR0gBAswCTAHBgVgTAEBCDAdBgNV\nHQ4EFgQU8ufWCM8xRxKdsE4owpccnGLTrjQwHwYDVR0jBBgwFoAUivrxV4QREzWQQvpXSVRpDaTE\n8DcwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAK9P\nG36ERhZZiKakn9Wg99L1MimhCNsNUwcpjSH2RhciX4xeWhlyvRLQOb8wGg23TAc+o4YdrkU0QR+2\nDwCOQSN4ctfWsBKz1EpBW2JOeKx8juHHMsKxiPewBNrICC3RU9XVNIWqNsih9jZ8QBrcFS72wKk1\nFjGVz5K9cuswmkwuu1KMp/RJdbkcps87VPUd9Y4dbHyTKz87+HggQ+nMdj2SQcz4UB1yVu9j+D+5\n6ceMkZPlAm1bczi9nI5Uoj433bfIzR1bjjJtetqz9sjIr13xM2IfJPDw8jQVYOM59KDDx8IfTtM7\nQMcd45x8xl4w4nFAm7ePxXboDyjZkNGJTDo=</X509Certificate><X509Certificate>MIIEuDCCA\n6CgAwIBAgIBBDANBgkqhkiG9w0BAQUFADCBtDELMAkGA1UEBhMCQlIxEzARBgNVBAoT\nCklDUC1CcmFzaWwxPTA7BgNVBAsTNEluc3RpdHV0byBOYWNpb25hbCBkZSBUZWNub2xvZ2lhIGRh\nIEluZm9ybWFjYW8gLSBJVEkxETAPBgNVBAcTCEJyYXNpbGlhMQswCQYDVQQIEwJERjExMC8GA1UE\nAxMoQXV0b3JpZGFkZSBDZXJ0aWZpY2Fkb3JhIFJhaXogQnJhc2lsZWlyYTAeFw0wMTExMzAxMjU4\nMDBaFw0xMTExMzAyMzU5MDBaMIG0MQswCQYDVQQGEwJCUjETMBEGA1UEChMKSUNQLUJyYXNpbDE9\nMDsGA1UECxM0SW5zdGl0dXRvIE5hY2lvbmFsIGRlIFRlY25vbG9naWEgZGEgSW5mb3JtYWNhbyAt\nIElUSTERMA8GA1UEBxMIQnJhc2lsaWExCzAJBgNVBAgTAkRGMTEwLwYDVQQDEyhBdXRvcmlkYWRl\nIENlcnRpZmljYWRvcmEgUmFpeiBCcmFzaWxlaXJhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\nCgKCAQEAwPMudwX/hvm+Uh2b/lQAcHVAisamaLkWdkwP9/S/tOKIgRrL6Oy+ZIGlOUdd6uYtk9Ma\n/3pUpgcfNAj0vYm5gsyjQo9emsc+x6m4VWwk9iqMZSCK5EQkAq/Ut4n7KuLE1+gdftwdIgxfUsPt\n4CyNrY50QV57KM2UT8x5rrmzEjr7TICGpSUAl2gVqe6xaii+bmYR1QrmWaBSAG59LrkrjrYtbRhF\nboUDe1DK+6T8s5L6k8c8okpbHpa9veMztDVC9sPJ60MWXh6anVKo1UcLcbURyEeNvZneVRKAAU6o\nuwdjDvwlsaKydFKwed0ToQ47bmUKgcm+wV3eTRk36UOnTwIDAQABo4HSMIHPME4GA1UdIARHMEUw\nQwYFYEwBAQAwOjA4BggrBgEFBQcCARYsaHR0cDovL2FjcmFpei5pY3BicmFzaWwuZ292LmJyL0RQ\nQ2FjcmFpei5wZGYwPQYDVR0fBDYwNDAyoDCgLoYsaHR0cDovL2FjcmFpei5pY3BicmFzaWwuZ292\nLmJyL0xDUmFjcmFpei5jcmwwHQYDVR0OBBYEFIr68VeEERM1kEL6V0lUaQ2kxPA3MA8GA1UdEwEB\n/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBBQUAA4IBAQAZA5c1U/hgIh6OcgLA\nfiJgFWpvmDZWqlV30/bHFpj8iBobJSm5uDpt7TirYh1Uxe3fQaGlYjJe+9zd+izPRbBqXPVQA34E\nXcwk4qpWuf1hHriWfdrx8AcqSqr6CuQFwSr75FosSzlwDADa70mT7wZjAmQhnZx2xJ6wfWlT9VQf\nS//JYeIc7Fue2JNLd00UOSMMaiK/t79enKNHEA2fupH3vEigf5Eh4bVAN5VohrTm6MY53x7XQZZr\n1ME7a55lFEnSeT0umlOAjR2mAbvSM5X5oSZNrmetdzyTj2flCM8CC7MLab0kkdngRIlUBGHF1/S5\nnmPbK+9A46sd33oqK8n8</X509Certificate></X509Data></KeyInfo></Signature></NotasFa\nltas>\n\n\n\n", "attachment_id": null, "bug_id": 40921, "id": 95770, "time": "2006-11-13T08:47:49Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-13T08:47:49Z", "is_private": false}, {"count": 16, "tags": [], "creator": "sean.mullan@oracle.com", "text": "Can you bundle the files in a zip file and attach them using the\n\"Create a New Attachment\" link.", "id": 95793, "time": "2006-11-13T13:54:27Z", "bug_id": 40921, "creation_time": "2006-11-13T13:54:27Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "creator": "fillipelima@gmail.com", "text": "Created attachment 19126\nMain class", "id": 95816, "time": "2006-11-14T03:53:05Z", "bug_id": 40921, "creation_time": "2006-11-14T03:53:05Z", "is_private": false, "attachment_id": 19126}, {"attachment_id": 19127, "tags": [], "bug_id": 40921, "text": "Created attachment 19127\nValidacaoXmlEnveloped class", "count": 18, "id": 95817, "time": "2006-11-14T03:53:33Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-14T03:53:33Z", "is_private": false}, {"count": 19, "tags": [], "creator": "fillipelima@gmail.com", "text": "Created attachment 19128\nValidacaoXmlEnvelopedException class", "id": 95818, "time": "2006-11-14T03:54:03Z", "bug_id": 40921, "creation_time": "2006-11-14T03:54:03Z", "is_private": false, "attachment_id": 19128}, {"count": 20, "tags": [], "creator": "fillipelima@gmail.com", "attachment_id": 19129, "id": 95819, "time": "2006-11-14T03:54:31Z", "bug_id": 40921, "creation_time": "2006-11-14T03:54:31Z", "is_private": false, "text": "Created attachment 19129\nsignedxml"}, {"count": 21, "attachment_id": 19130, "bug_id": 40921, "text": "Created attachment 19130\nxmldsig.jar", "id": 95820, "time": "2006-11-14T03:55:27Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-14T03:55:27Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 40921, "attachment_id": 19131, "text": "Created attachment 19131\nxmlsec.jar", "id": 95821, "time": "2006-11-14T03:55:51Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-14T03:55:51Z", "is_private": false}, {"count": 23, "attachment_id": null, "bug_id": 40921, "text": "(In reply to comment #22)\n> Created an attachment (id=19131) [edit]\n> xmlsec.jar\n\nHello \n\nPlease disconsider what i said....the keyinfo object has a  DOMX509Data object \nand a DOMKeyValue.\n\nTks!!", "id": 95833, "time": "2006-11-14T08:26:38Z", "creator": "fillipelima@gmail.com", "creation_time": "2006-11-14T08:26:38Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "id": 95837, "time": "2006-11-14T10:32:09Z", "bug_id": 40921, "creation_time": "2006-11-14T10:32:09Z", "is_private": false, "text": "\n> Please disconsider what i said....the keyinfo object has a  DOMX509Data object \n> and a DOMKeyValue.\n\nOk, I am closing this as not a bug.\n"}, {"count": 25, "tags": [], "creator": "sean.mullan@oracle.com", "text": "Closing old bugs.", "id": 108400, "time": "2007-09-19T12:23:32Z", "bug_id": 40921, "creation_time": "2007-09-19T12:23:32Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "deletedlogfile@hotmail.com", "attachment_id": null, "is_private": false, "id": 12652, "time": "2002-04-02T02:54:31Z", "bug_id": 7678, "creation_time": "2002-04-02T02:54:31Z", "text": "I have noticed the particular behavior of log4j methods. If a log file is \ndeleted, log4j will continue write to that file stream until the defined log4j \nfile size has been obtained. The contents of that file stream will be lost. \nWhen the log4j buffer is full it will create a new file and a new buffer. Data \nin the old buffer is lost."}, {"count": 1, "tags": [], "bug_id": 7678, "text": "I'm also seeing this behavior with 1.1.3.  Does a later release fix this issue?\n\nOS: Solaris 2.8\nUse of RollingFileAppender w/ AsycAppender", "id": 21929, "time": "2002-08-28T22:00:59Z", "creator": "jesse.j.aalberg@accenture.com", "creation_time": "2002-08-28T22:00:59Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "text": "\nIf you open a file in Java and while writing to it someone removes it, bad \nthings are bound to happen. The java application does not get an exception and \nwill silently continue to write to an inexistent file. This is not a log4j \nproblem but a Java issue. \n\nAnyway, why is the file being removed in the first place? ", "id": 21944, "time": "2002-08-29T07:08:30Z", "bug_id": 7678, "creation_time": "2002-08-29T07:08:30Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 7678, "attachment_id": null, "id": 21967, "time": "2002-08-29T14:02:42Z", "creator": "jesse.j.aalberg@accenture.com", "creation_time": "2002-08-29T14:02:42Z", "is_private": false, "text": "Well, thanks - I'll go back to the client with that.\n\nReason for file being deleted : torture testing out application."}, {"attachment_id": null, "tags": [], "bug_id": 7678, "text": "There are plenty of perfectly valid reasons for opening a file and then\nimmediately unlinking (removing) it. Most major OS/filesystem combinations let\nyou do this intentionally. The only _portable_ way I know of to detect this\ncondition is to close the file and then try to open it again to see if its\nthere. However, that's fairly useless in this case as this would have a\nsignificant performance penalty. Real solution is to not remove files you still\nwant. I'm not seeing why this is an issue at all. So why is this issue still\nopen after 2 years? Just curious.", "count": 4, "id": 61351, "time": "2004-07-30T00:05:58Z", "creator": "mprice@atl.lmco.com", "creation_time": "2004-07-30T00:05:58Z", "is_private": false}, {"count": 5, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "is_private": false, "id": 68281, "time": "2004-12-10T19:39:32Z", "bug_id": 7678, "creation_time": "2004-12-10T19:39:32Z", "text": "It shouldn't have been opened in the first place, you're right."}]
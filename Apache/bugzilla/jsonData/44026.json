[{"count": 0, "tags": [], "text": "I'm seeing on the order of several MB of creeping memory utilization per thread\nwhen running Apache 2.2.6 with worker MPM in forward proxy mode. With a few\nthousand connections Apache often exhausts 16GB of RAM. This is not a workable\nsituation for a production environment.", "attachment_id": null, "id": 111478, "creator": "pbelau1@yahoo.com", "time": "2007-12-05T19:57:51Z", "bug_id": 44026, "creation_time": "2007-12-05T19:57:51Z", "is_private": false}, {"count": 1, "tags": [], "creator": "trawick@apache.org", "text": "Are you using balancer?\n\nApply this fix, which will be in 2.2.7:\n\nhttp://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/modules/proxy/proxy_util.c?r1=576910&r2=582620&diff_format=h\n\nThat fixes keepalive for backend connections.  I think the management of the\nmemory for backend connections is broken -- no way to recycle the memory when\neventually the backend connection dies.  Without keepalive working, memory usage\ngrows at a fantastic rate.  You'll probably still need \"MaxRequestsPerChild\nhigh-number\" to keep it from growing high enough to hurt (until the memory\nmanagement is fixed, that is).\n", "id": 111493, "time": "2007-12-06T04:29:51Z", "bug_id": 44026, "creation_time": "2007-12-06T04:29:51Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "No, I'm not using balancer. It's just a forward proxy. Will provide more info\nlater ...", "attachment_id": null, "id": 111494, "creator": "pbelau1@yahoo.com", "time": "2007-12-06T05:15:10Z", "bug_id": 44026, "creation_time": "2007-12-06T05:15:10Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 21253\nPatch against 2.2.x\n\nCan you please try the attached patch if it fixes your problem. It would be\ninteresting to know if it fixes your problem even if you did not apply the\npatch proposed earlier (which is needed in all cases to boost performance).", "is_private": false, "id": 111600, "creator": "rpluem@apache.org", "time": "2007-12-10T04:16:04Z", "bug_id": 44026, "creation_time": "2007-12-10T04:16:04Z", "attachment_id": 21253}, {"count": 4, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111611, "time": "2007-12-10T11:38:48Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-10T11:38:48Z", "is_private": false, "text": "Ruediger,\n\nOuch, that patch made things even worse. The proxy won't server more than a few\nrequests before one of the threads segfaults."}, {"count": 5, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 111639, "time": "2007-12-11T08:15:07Z", "bug_id": 44026, "creation_time": "2007-12-11T08:15:07Z", "is_private": false, "text": "Can you please provide me with the backtrace of the crash such that I can\nimprove the patch (http://httpd.apache.org/dev/debugging.html)."}, {"count": 6, "tags": [], "bug_id": 44026, "attachment_id": null, "text": "Here you go:\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 1076060480 (LWP 18441)]\napr_allocator_free (allocator=0x0, node=0x2aaab000c950) at\nmemory/unix/apr_pools.c:342\n342         if (allocator->mutex)\n(gdb) bt\n#0  apr_allocator_free (allocator=0x0, node=0x2aaab000c950) at\nmemory/unix/apr_pools.c:342\n#1  0x00002aaaab167a67 in heap_bucket_destroy (data=0x2aaab000aa48)\n    at buckets/apr_buckets_heap.c:36\n#2  0x00002aaaab165a74 in apr_brigade_cleanup (data=<value optimized out>)\n    at buckets/apr_brigade.c:44\n#3  0x000055555559609c in ap_core_output_filter (f=0x5555593f6b78, b=0x555559415018)\n    at core_filters.c:876\n#4  0x00005555555a490a in ap_pass_brigade (next=0x5555593f6b78, bb=0x55555940cba8)\n    at util_filter.c:526\n#5  0x00005555555d7a5b in check_pipeline_flush (r=0x555559412f88) at\nhttp_request.c:231\n#6  0x00005555555d7b05 in ap_process_request (r=0x555559412f88) at\nhttp_request.c:282\n#7  0x00005555555d44fe in ap_process_http_connection (c=0x5555593f6440) at\nhttp_core.c:184\n#8  0x00005555555a0408 in ap_run_process_connection (c=0x5555593f6440) at\nconnection.c:43\n#9  0x00005555555a0855 in ap_process_connection (c=0x5555593f6440,\ncsd=0x5555593f6228)\n    at connection.c:178\n#10 0x00005555555e05e2 in process_socket (p=0x5555593f61a8, sock=0x5555593f6228,\nmy_child_num=0,\n    my_thread_num=7, bucket_alloc=0x555559406e88) at worker.c:544\n#11 0x00005555555e0f0d in worker_thread (thd=0x5555593b1218,\ndummy=0x5555593e91e0) at worker.c:894\n#12 0x00002aaaabe0e1b5 in start_thread () from /lib64/libpthread.so.0\n#13 0x00002aaaac2f436d in clone () from /lib64/libc.so.6\n", "id": 111648, "time": "2007-12-11T11:24:56Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-11T11:24:56Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 44026, "attachment_id": null, "text": "Here you go:\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 1076060480 (LWP 18441)]\napr_allocator_free (allocator=0x0, node=0x2aaab000c950) at\nmemory/unix/apr_pools.c:342\n342         if (allocator->mutex)\n(gdb) bt\n#0  apr_allocator_free (allocator=0x0, node=0x2aaab000c950) at\nmemory/unix/apr_pools.c:342\n#1  0x00002aaaab167a67 in heap_bucket_destroy (data=0x2aaab000aa48)\n    at buckets/apr_buckets_heap.c:36\n#2  0x00002aaaab165a74 in apr_brigade_cleanup (data=<value optimized out>)\n    at buckets/apr_brigade.c:44\n#3  0x000055555559609c in ap_core_output_filter (f=0x5555593f6b78, b=0x555559415018)\n    at core_filters.c:876\n#4  0x00005555555a490a in ap_pass_brigade (next=0x5555593f6b78, bb=0x55555940cba8)\n    at util_filter.c:526\n#5  0x00005555555d7a5b in check_pipeline_flush (r=0x555559412f88) at\nhttp_request.c:231\n#6  0x00005555555d7b05 in ap_process_request (r=0x555559412f88) at\nhttp_request.c:282\n#7  0x00005555555d44fe in ap_process_http_connection (c=0x5555593f6440) at\nhttp_core.c:184\n#8  0x00005555555a0408 in ap_run_process_connection (c=0x5555593f6440) at\nconnection.c:43\n#9  0x00005555555a0855 in ap_process_connection (c=0x5555593f6440,\ncsd=0x5555593f6228)\n    at connection.c:178\n#10 0x00005555555e05e2 in process_socket (p=0x5555593f61a8, sock=0x5555593f6228,\nmy_child_num=0,\n    my_thread_num=7, bucket_alloc=0x555559406e88) at worker.c:544\n#11 0x00005555555e0f0d in worker_thread (thd=0x5555593b1218,\ndummy=0x5555593e91e0) at worker.c:894\n#12 0x00002aaaabe0e1b5 in start_thread () from /lib64/libpthread.so.0\n#13 0x00002aaaac2f436d in clone () from /lib64/libc.so.6\n", "id": 111649, "time": "2007-12-11T11:26:17Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-11T11:26:17Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111682, "time": "2007-12-11T23:13:33Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-11T23:13:33Z", "is_private": false, "text": "Thanks for the backtrace. I think I have an idea why this happens, but currently\nI have no good idea how to fix this. I keep investigating. So stay tuned."}, {"count": 9, "tags": [], "creator": "rpluem@apache.org", "attachment_id": 21263, "id": 111695, "time": "2007-12-12T05:24:02Z", "bug_id": 44026, "creation_time": "2007-12-12T05:24:02Z", "is_private": false, "text": "Created attachment 21263\nNew patch that hopefully fixes SIGSEGV in previous patch\n\nCan you please try the new patch instead of the old one?. And if it crashes,\nplease provide me with the stacktrace :-)."}, {"count": 10, "tags": [], "text": "Well, the good news is that the patch does indeed fix the SEGV. The bad news is\nthat it doesn't do much to address the memory consumption issues (I was going to\nsay it does nothing but I'm actually seeing RSS go down over time as connections\ndrop off whereas before memory was never deallocated). Regardless, memory\nconsumption is still unreasonably high (usage was growing after reaching 10gb\nRSS with ~2000 simultaneous connections).\n\n", "is_private": false, "id": 111720, "creator": "pbelau1@yahoo.com", "time": "2007-12-12T12:54:20Z", "bug_id": 44026, "creation_time": "2007-12-12T12:54:20Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111723, "time": "2007-12-12T13:34:33Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-12T13:34:33Z", "is_private": false, "text": "Many thanks for your testing feedback. I try to investigate further. BTW: Did\nJeff's patch proposal help?"}, {"count": 12, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111724, "time": "2007-12-12T13:48:49Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-12T13:48:49Z", "is_private": false, "text": "Jeff's patch had no noticeable effect. Thanks for your efforts as well. Please\nlet me know if there's anything that I can look at. I'm pretty comfortable with\nC and the POSIX API but my experience with the Apache codebase is limited to a\nsimple patch to one of the entity encoding functions.\n\nAnyway, if you give me an idea of where to look perhaps I can lend you a hand :)\n"}, {"count": 13, "tags": [], "text": "Created attachment 21266\nFix that considers forward proxy situation.\n\nAhh, I missed the point that you are using a forward proxy. Can you please try\nthe latest patch. It uses a slight variant of the previous patch.\nBTW: Regarding the forward proxy Jeffs proposal shouldn't really help.", "attachment_id": 21266, "bug_id": 44026, "id": 111725, "time": "2007-12-12T13:55:00Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-12T13:55:00Z", "is_private": false}, {"count": 14, "tags": [], "text": "I'm testing the latest patch right now. Will let you know of the results\nshortly. BTW, would it help if you had access to the system/setup that provokes\nthis bug ?", "attachment_id": null, "bug_id": 44026, "id": 111729, "time": "2007-12-12T14:25:44Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-12T14:25:44Z", "is_private": false}, {"count": 15, "tags": [], "creator": "pbelau1@yahoo.com", "text": "Stopped the test at 10gb again. No improvement.\n", "id": 111730, "time": "2007-12-12T14:43:53Z", "bug_id": 44026, "creation_time": "2007-12-12T14:43:53Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "rpluem@apache.org", "text": "OK. Then we need to do it the hard way :-(. Please apply the patch I attach in a\nfew minutes (which only add a few apr_pool_tag calls which will also remain in\nproduction code) and execute configure with the following CFLAGS set:\nCFLAGS=\"-O2 -g -Wall -DAPR_POOL_DEBUG=16\"\nand recompile your httpd. This creates a log message for every pool allocation\nin stderr which is your terminal during startup and your main error_log file\nafter detachment.\nLines look like the following:\n\nPOOL DEBUG: [20233/1094719840]  PALLOC (     20289/     20289/    329106) 0x552a\nc86ed0 \"proxy_conn_scpool\" <buckets/apr_brigade.c:61> (46/46/1)\n\nSo it would be good if you could grep your logfile for \"POOL DEBUG\" after you\nreached 10G memory consumption. To be honest I do not know how large your error\nlog gets until this and if this is technically feasible in your environment.\nIf the result is too large even in compressed form we need to discuss further\npreaggregations before you can attach the results here.", "id": 111758, "attachment_id": null, "bug_id": 44026, "creation_time": "2007-12-13T06:38:27Z", "time": "2007-12-13T06:38:27Z", "is_private": false}, {"count": 17, "tags": [], "creator": "rpluem@apache.org", "text": "Created attachment 21270\nPatch with appropriate apr_pool_tag calls", "id": 111759, "attachment_id": 21270, "bug_id": 44026, "creation_time": "2007-12-13T06:39:40Z", "time": "2007-12-13T06:39:40Z", "is_private": false}, {"count": 18, "tags": [], "text": "(In reply to comment #10)\n\n> drop off whereas before memory was never deallocated). Regardless, memory\n> consumption is still unreasonably high (usage was growing after reaching 10gb\n> RSS with ~2000 simultaneous connections).\n\nSome additional thoughts / questions:\n\n1. I assume 10GB is the amount of memory consumed by all child processes.\n2. Please provide the following config settings:\n\n    StartServers          \n    MaxClients          \n    MinSpareThreads      \n    MaxSpareThreads      \n    ThreadsPerChild      \n    MaxRequestsPerChild  \n\n3. Please provide the number of processes that are consuming the 10GB.\n4. Please provide the output of\n   ulimit -a\n5. Please provide the output of pmap for one of the httpd child processes.", "is_private": false, "id": 111785, "creator": "rpluem@apache.org", "time": "2007-12-13T11:29:15Z", "bug_id": 44026, "creation_time": "2007-12-13T11:29:15Z", "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 44026, "attachment_id": null, "text": "The new patch does not seem to build a working httpd. I'm getting:\n\n/usr/local/apache2/bin/httpd: symbol lookup error: /usr/local/apache2/bin/httpd:\nundefined symbol: apr_pool_join\n\nwhen I try to run apache. FYI, I reversed the previous patch when applying this\none. I hope this action was correct.", "id": 111793, "time": "2007-12-14T00:51:14Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-14T00:51:14Z", "is_private": false}, {"count": 20, "tags": [], "text": "(In reply to comment #19)\n> The new patch does not seem to build a working httpd. I'm getting:\n> \n> /usr/local/apache2/bin/httpd: symbol lookup error: /usr/local/apache2/bin/httpd:\n> undefined symbol: apr_pool_join\n\nYou also need to rebuild APR / APR-UTIL. Sorry that I forgot to mention this.\n\n> \n> when I try to run apache. FYI, I reversed the previous patch when applying this\n> one. I hope this action was correct.\n\nYes, this was correct. The latest patch is a replacement for the previous ones.\nMaybe it would be already helpful if you could answer some of the questions I\nposted in comment #18. At least 1., 2., and 4. should be easy to answer even\nwithout recompiling.\n", "attachment_id": null, "bug_id": 44026, "id": 111794, "time": "2007-12-14T01:40:32Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-14T01:40:32Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 44026, "attachment_id": 21277, "text": "Created attachment 21277\npmap output\n\nThis is taken from an idle Apache process with a custom module inserted. You\nshould be able to see a the 256k stack which I'm using in the test runs as\nwell. Will provide a more accurate pmap in the morning.", "id": 111798, "time": "2007-12-14T02:51:41Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-14T02:51:41Z", "is_private": false}, {"count": 22, "tags": [], "creator": "pbelau1@yahoo.com", "text": "\n> \n> 1. I assume 10GB is the amount of memory consumed by all child processes.\n\nThis is correct.\n\n> 2. Please provide the following config settings:\n> \n>     StartServers          \nNot explicitely set\n\n>     MaxClients    \n\n4096 \n      \n>     MinSpareThreads    \n\nNot set.  \n>     MaxSpareThreads    \n\nNot set.  \n>     ThreadsPerChild  \n\n512\n    \n>     MaxRequestsPerChild  \n\n10000 (intentionally set very low but seems to have no positive effect on memory\n  consumption)\n> \n> 3. Please provide the number of processes that are consuming the 10GB.\n\n8\n\n> 4. Please provide the output of\n>    ulimit -a\ncore file size          (blocks, -c) 0\ndata seg size           (kbytes, -d) unlimited\nmax nice                        (-e) 0\nfile size               (blocks, -f) unlimited\npending signals                 (-i) 139264\nmax locked memory       (kbytes, -l) 32\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 1024\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nmax rt priority                 (-r) 0\nstack size              (kbytes, -s) 10240\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 139264\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n\n\n> 5. Please provide the output of pmap for one of the httpd child processes.\n\nattached.\n\n\n\n", "id": 111799, "attachment_id": null, "bug_id": 44026, "creation_time": "2007-12-14T02:52:21Z", "time": "2007-12-14T02:52:21Z", "is_private": false}, {"count": 23, "tags": [], "text": "(In reply to comment #22)\n\n> > 3. Please provide the number of processes that are consuming the 10GB.\n> \n> 8\n\nThanks for this. So we have 4096 threads running. As you have reduced the stack\nsize for each thread from standard 10MB to just 256k we are dealing only with\n4096 * 256k = 1GB virtual stack memory allocated by all threads. So this\nactually does not consume all memory not even virtually (yes I noticed that you\nhad a memory consumption of 10GB RSS and not only virtually).\n\n\n\n", "is_private": false, "id": 111800, "creator": "rpluem@apache.org", "time": "2007-12-14T03:44:42Z", "bug_id": 44026, "creation_time": "2007-12-14T03:44:42Z", "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 44026, "text": "(In reply to comment #21)\n> Created an attachment (id=21277) [edit]\n> pmap output\n> \n> This is taken from an idle Apache process with a custom module inserted. You\n\nIs it possible to run further tests without the custom module? This would rule\nout that the custom module has something to do with the memory problem.\n\n\n", "id": 111801, "time": "2007-12-14T03:52:09Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-14T03:52:09Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111890, "time": "2007-12-19T01:20:16Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-19T01:20:16Z", "is_private": false, "text": "I'm doing a 'make clean' in the root httpd directory ? Is this insufficient for\nrebuilding APR ?\n\n(In reply to comment #24)\n> (In reply to comment #21)\n> > Created an attachment (id=21277) [edit] [edit]\n> > pmap output\n> > \n> > This is taken from an idle Apache process with a custom module inserted. You\n> \n> Is it possible to run further tests without the custom module? This would rule\n> out that the custom module has something to do with the memory problem.\n> \n> \n> "}, {"count": 26, "tags": [], "bug_id": 44026, "text": "(In reply to comment #25)\n> I'm doing a 'make clean' in the root httpd directory ? Is this insufficient for\n> rebuilding APR ?\n\nYes.", "id": 111891, "time": "2007-12-19T01:22:00Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-19T01:22:00Z", "is_private": false, "attachment_id": null}, {"count": 27, "tags": [], "creator": "pbelau1@yahoo.com", "text": "I've done a make clean and am passing the extra compiler flags via the CFLAGS\nenvironment variable but unresolved symbol error persists. Any ideas ?\n", "id": 111892, "time": "2007-12-19T01:52:27Z", "bug_id": 44026, "creation_time": "2007-12-19T01:52:27Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "creator": "rpluem@apache.org", "text": "Please try the following:\n\nmake clean\nCFLAGS=\"-O2 -g -Wall -DAPR_POOL_DEBUG=16\" ./configure <whatever your options are>\nmake\nmake install\n\nThis should work, if not please let me know.", "id": 111893, "time": "2007-12-19T01:59:01Z", "bug_id": 44026, "creation_time": "2007-12-19T01:59:01Z", "is_private": false, "attachment_id": null}, {"text": "This is exactly what I did, twice :) It doesn't work.\n\n(In reply to comment #28)\n> Please try the following:\n> \n> make clean\n> CFLAGS=\"-O2 -g -Wall -DAPR_POOL_DEBUG=16\" ./configure <whatever your options are>\n> make\n> make install\n> \n> This should work, if not please let me know.\n\n", "tags": [], "bug_id": 44026, "attachment_id": null, "count": 29, "id": 111894, "time": "2007-12-19T02:07:29Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-19T02:07:29Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111895, "time": "2007-12-19T02:23:13Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-19T02:23:13Z", "is_private": false, "text": "Ok, next round.\n\n1. Please check that your httpd is really loading the libapr you compiled and\nnot some other libapr installed system wide by\n\nldd httpd\n\n2. If everything is ok in 1. please add --with-apr=builtin to your configure\noptions and check if you really compiled apr by checking that libapr in the lib\ndirectory of your installation is fresh."}, {"count": 31, "tags": [], "creator": "pbelau1@yahoo.com", "is_private": false, "id": 111896, "attachment_id": null, "bug_id": 44026, "creation_time": "2007-12-19T02:31:12Z", "time": "2007-12-19T02:31:12Z", "text": "Good catch. libaprutil-1.so.0 was pointing to libaprutil-1.so.0.3.0 ... I'll get\nthe logs to you in the next 30 minutes or so."}, {"count": 32, "tags": [], "creator": "pbelau1@yahoo.com", "text": "Created attachment 21290\nError logs", "id": 111897, "time": "2007-12-19T03:26:28Z", "bug_id": 44026, "creation_time": "2007-12-19T03:26:28Z", "is_private": false, "attachment_id": 21290}, {"count": 33, "tags": [], "bug_id": 44026, "attachment_id": null, "id": 111899, "time": "2007-12-19T03:27:56Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-19T03:27:56Z", "is_private": false, "text": "Well, here's something to chew on, although unfortunately not what I wanted to\nsee. After about 1 minute of uptime Apache started refusing connections to port\n8080. RSS was about 32mb in two processes. Netstat was showing the httpd process\nstill bound and listening to 8080. I've attached the associated error_log but\nwill look at the connection refused issue again tomorrow. Also, please find new\npmap attached."}, {"count": 34, "tags": [], "bug_id": 44026, "attachment_id": 21291, "id": 111900, "time": "2007-12-19T03:29:09Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-19T03:29:09Z", "is_private": false, "text": "Created attachment 21291\npmap"}, {"count": 35, "tags": [], "creator": "rpluem@apache.org", "text": "Thanks for the error log and the pmap file. To be honest currently I do not see\nthe memory usage going somewhere to the size you described (10 GB RSS). The pmap\nfile showed \"only\" about 256 MB. Given that you have 8 processes we end up with\nabout 2 GB in total and that is not even RSS.\nNevertheless I think I identified another leak. Could you please try the\nfollowing *additional* patch on top of my last one and let me know the results?\n\nIndex: proxy_util.c\n===================================================================\n--- proxy_util.c        (revision 605503)\n+++ proxy_util.c        (working copy)\n@@ -1655,7 +1655,7 @@\n     if (conn->close || !worker->is_address_reusable) {\n         apr_pool_t *p = conn->pool;\n         apr_pool_clear(p);\n-        memset(conn, 0, sizeof(proxy_conn_rec));\n+        conn = apr_pcalloc(p, sizeof(proxy_conn_rec));\n         conn->pool = p;\n         conn->worker = worker;\n         apr_pool_create(&(conn->scpool), p);\n@@ -1743,7 +1743,7 @@\n      */\n     apr_pool_create(&scpool, ctx);\n     apr_pool_tag(scpool, \"proxy_conn_scpool\");\n-    conn = apr_pcalloc(pool, sizeof(proxy_conn_rec));\n+    conn = apr_pcalloc(ctx, sizeof(proxy_conn_rec));\n \n     conn->pool   = ctx;\n     conn->scpool = scpool;\n", "id": 111904, "time": "2007-12-19T04:41:18Z", "bug_id": 44026, "creation_time": "2007-12-19T04:41:18Z", "is_private": false, "attachment_id": null}, {"count": 36, "attachment_id": null, "bug_id": 44026, "text": "Some new results:\n\n1. I cannot run apache under high load with the debug logging turned on. The\nlogging itself is too resource intensive in order to get meaningful results\n(Apache server very quckly becomes completely unresponsive)\n\n2. I tried the new patch for about 15 minutes during which RSS hit about 800mb.\nThis number was still growing at a constant rate at the end of the test. The\ntest was stopped after 15 minutes since I cannot run a simple forward proxy for\nlong in production. The number of simultaneous connections was about 600.\n\n3. I also tried running with my custom Apache module. In this case memory\nconsumption grows about 10x as quickly than without it. This is the case even if\nthe module is reduced to nothing but passing brigades through itself.\n\nPlease let let me know what other info I can provide.", "id": 111932, "time": "2007-12-19T18:14:14Z", "creator": "pbelau1@yahoo.com", "creation_time": "2007-12-19T18:14:14Z", "tags": [], "is_private": false}, {"text": "(In reply to comment #36)\n> Some new results:\n> \n> 1. I cannot run apache under high load with the debug logging turned on. The\n> logging itself is too resource intensive in order to get meaningful results\n> (Apache server very quckly becomes completely unresponsive)\n\nI already feared this :-(. Thanks for trying anyway.\n\n> \n> 2. I tried the new patch for about 15 minutes during which RSS hit about 800mb.\n> This number was still growing at a constant rate at the end of the test. The\n> test was stopped after 15 minutes since I cannot run a simple forward proxy for\n> long in production. The number of simultaneous connections was about 600.\n\nOk. Lets have some estimation of what RSS can be expected for all processes\ntogether:\n\n1. You already set the stacksize per thread to 256k\n2. I think it is not unreasonable to expect that each thread that was / is in\nuse consumes about 128k heap.\n\nGiven your settings this should result in\n\n8 * 512 * (256 + 128)k = 1572864 k = 1536 MB = 1.5 GB\n\nSo you should not expect your RSS consumption below that. The virtual\nconsumption will be somewhat higher as we need to add the MMAPed binaries for\neach process.\n\nOf course this is still a lot away from the 10 GB you have seen.\n\n> \n> 3. I also tried running with my custom Apache module. In this case memory\n> consumption grows about 10x as quickly than without it. This is the case even if\n> the module is reduced to nothing but passing brigades through itself.\n\nThis seems to be a hint that something is wrong with your custom module. As you\nsay it passes brigades I assume it is a filter. Please have a look at\n\nhttp://httpd.apache.org/docs/trunk/en/developer/output-filters.html\n\nand check if your code follows these guidelines.\n\n> \n> Please let let me know what other info I can provide.\n\nI am a little bit lost now. My only idea is to reduce the number of debug\nmessages printed. So please try the following patch for apr:\n\nIndex: memory/unix/apr_pools.c\n===================================================================\n--- memory/unix/apr_pools.c     (revision 598762)\n+++ memory/unix/apr_pools.c     (working copy)\n@@ -493,6 +493,7 @@\n     unsigned int          stat_alloc;\n     unsigned int          stat_total_alloc;\n     unsigned int          stat_clear;\n+    unsigned int          print_count;\n #if APR_HAS_THREADS\n     apr_os_thread_t       owner;\n     apr_thread_mutex_t   *mutex;\n@@ -1125,6 +1126,12 @@\n static void apr_pool_log_event(apr_pool_t *pool, const char *event,\n                                const char *file_line, int deref)\n {\n+    if (pool->print_count++ < APR_PRINT_COUNT) {\n+        return;\n+    }\n+    else {\n+        pool->print_count = 0;\n+    }\n     if (file_stderr) {\n         if (deref) {\n             apr_file_printf(file_stderr,\n\nand recompile httpd / APR with\n\nmake clean\nCFLAGS=\"-O2 -g -Wall -DAPR_POOL_DEBUG=16 -DAPR_PRINT_COUNT=100\" ./configure\n<whatever your options are>\nmake\nmake install\n\nFeel free to increase the value of APR_PRINT_COUNT to 1000 or whatever is needed\nto keep your httpd running with load.", "tags": [], "bug_id": 44026, "attachment_id": null, "count": 37, "id": 111937, "time": "2007-12-20T00:24:35Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-20T00:24:35Z", "is_private": false}, {"count": 38, "tags": [], "text": "I'll give it a go tomorrow morning. Regarding the custom module, it's currently\ndoing nothing besides allocating a data structure in RegisterHooks function,\ncalling a lookup function on that data structure, and returning the brigade with:\n\nreturn ap_pass_brigade(f->next,pbbIn);\n\n\nWhy would this so drastically affect the rate of memory consumption ?", "attachment_id": null, "id": 111941, "creator": "pbelau1@yahoo.com", "time": "2007-12-20T01:33:09Z", "bug_id": 44026, "creation_time": "2007-12-20T01:33:09Z", "is_private": false}, {"count": 39, "tags": [], "creator": "rpluem@apache.org", "text": "(In reply to comment #38)\n> I'll give it a go tomorrow morning. Regarding the custom module, it's currently\n> doing nothing besides allocating a data structure in RegisterHooks function,\n> calling a lookup function on that data structure, and returning the brigade with:\n> \n> return ap_pass_brigade(f->next,pbbIn);\n> \n> \n> Why would this so drastically affect the rate of memory consumption ?\n\nWithout further insight in the code this is hard to tell :-).\n\n\n", "id": 111943, "time": "2007-12-20T03:49:50Z", "bug_id": 44026, "creation_time": "2007-12-20T03:49:50Z", "is_private": false, "attachment_id": null}, {"count": 40, "tags": [], "bug_id": 44026, "attachment_id": null, "text": "Backported to 2.2.x as r657440 (http://svn.apache.org/viewvc?rev=657440&view=rev).", "id": 116759, "time": "2008-05-17T12:56:29Z", "creator": "rpluem@apache.org", "creation_time": "2008-05-17T12:56:29Z", "is_private": false}]
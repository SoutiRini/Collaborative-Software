[{"count": 0, "tags": [], "text": "I was integrating Atomikos into Tomcat to register the transaction manager, and the lookup for the transaction manager works fine in JNDI, unless someone else, looks up a JNDI context and closes it. And subsequent calls to lookup the transaction manager also fails saying java:comp is not found. I went through the code and found the problem at \"org.apache.naming.SelectorContext\". When methods of that class is calls, those are delegated to a Context received through \"getBoundContext()\", which returns a \"org.apache.naming.NamingContext\" object. And these are stored in a map in ContextBindings class. So the getBoundContext checks this cache, and if it's found it returns it or else, create a new object and store it and returns it. So the problem happens, if someone calls \"close()\" in the NamingContext object. Then it's implemented in the following way,\n\n   public void close()\n        throws NamingException {\n        env.clear();\n    }\n\nWhich just clears the environment, but it doesn't in no way invalidate that cache in the ContextBindings class to remove its entry. So in the next time also when getBoundContext is called to get the same context, it will return the earlier 'closed' context without creating a new one. And the environment it has would be cleared and subsequent lookups done from that will fail. \n\nSo I guess the proper fix would be to remove that context from ContextBinding's cache when its close method is closed.\n\nCheers,\nAnjana.", "is_private": false, "id": 148918, "creator": "lafernando@gmail.com", "time": "2011-08-30T08:43:40Z", "bug_id": 51744, "creation_time": "2011-08-30T08:43:40Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "text": "Given that the JNDI context is meant to be (largely) read-only, I don't think calls to close() should be permitted here. I have added a call to checkWriteable() before the environment is cleared.\n\nThis fix has been applied to trunk and 7.0.x and will be included in 7.0.22 onwards.", "id": 148925, "time": "2011-08-31T14:20:15Z", "bug_id": 51744, "creation_time": "2011-08-31T14:20:15Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 51744, "attachment_id": null, "is_private": false, "id": 148926, "time": "2011-08-31T14:33:31Z", "creator": "lafernando@gmail.com", "creation_time": "2011-08-31T14:33:31Z", "text": "Hi Mark,\n\nSo for the situation I'm facing, in the close method, if the environment is cleared, will this be removed from \"ContextBindings\" also? .. Since that was the problem I faced. \n\nCheers,\nAnjana."}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "text": "No. The attempt to use the close() method will fail.", "id": 148927, "time": "2011-08-31T14:35:00Z", "bug_id": 51744, "creation_time": "2011-08-31T14:35:00Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 51744, "text": "Hi Mark,\n\nSorry, maybe I misunderstood, I guessed the modified version would be something like the following,\n\npublic void close() throws NamingException {\n    if (checkWriteable()) {\n        env.clear();\n    } else {\n        throw something...\n    }\n}\n\nso in the case of checkWriteable() == true, the environment is cleared and if the user again looks up that context, wouldn't my same problem occur again? .. \n\nCheers,\nAnjana.", "id": 148929, "time": "2011-08-31T14:43:14Z", "creator": "lafernando@gmail.com", "creation_time": "2011-08-31T14:43:14Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 51744, "text": "Rather than guessing why don't you look at the source code and see what it actually does? You might also want to investigate when the JNDI context is writeable.", "id": 148930, "time": "2011-08-31T14:48:59Z", "creator": "markt@apache.org", "creation_time": "2011-08-31T14:48:59Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 51744, "is_private": false, "id": 148932, "time": "2011-08-31T15:32:13Z", "creator": "lafernando@gmail.com", "creation_time": "2011-08-31T15:32:13Z", "tags": [], "text": "Hi Mark,\n\nOK, sorry, I should have looked at the code before. I just didn't know where the svn for this was (yeah it was a simple looking around the tomcat project page), I thought you wouldn't mind showing the code. \n\nAnyways, yeah, the code was close to what I assumed. So a quick question, let's assume the context is writeable (I'm still not that sure when they are exactly writeable or not), just bare with me, so in the case where \"checkWriteable\" doesn't throw anything, wouldn't you want to clear this object from the map at ContextBindings?, so later the method \"getBoundContext\" from SelectorContext wouldn't return an invalid Context object, and also I guess you would want to remove it from that map for it to be GC'ed later. \n\nCheers,\nAnjana."}, {"count": 7, "tags": [], "creator": "markt@apache.org", "text": "I'll repeat: \"You might also want to investigate when the JNDI context is\nwriteable.\"\n\nI really do not appreciate code reviews based on guess work. If you are going to comment on the code please have the courtesy to read and understand the relevant portions of the source rather than guessing what the source code might be.\n\nI do not intend replying to further comments on this issue until you have actually read the relevant code.", "id": 148933, "time": "2011-08-31T15:37:20Z", "bug_id": 51744, "creation_time": "2011-08-31T15:37:20Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "lafernando@gmail.com", "text": "Mark,\n\nYou could have used all those words to give me a simple explanation, I gave the comments and reported the bug to my ability, I explained the issue as I understood it, and since I actually faced it, it's not like I \"guessed\" this issue or imagined it and reported it. And I accept I'm not in any kind of an expert in these areas, that's why we talk to you guys, the actual developers, to get some help. Talking about \"courtesy\", you should have the common courtesy to give a proper response or at-least direct the user to some resources to understand it more. So much for the spirit of open source development! .. I don't expect you to respond to this also, good bye!.\n\nCheers,\nAnjana.", "id": 148934, "time": "2011-08-31T15:57:33Z", "bug_id": 51744, "creation_time": "2011-08-31T15:57:33Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 51744, "attachment_id": null, "is_private": false, "id": 150924, "time": "2011-10-25T21:17:49Z", "creator": "lmikhailov@esri.com", "creation_time": "2011-10-25T21:17:49Z", "text": "Guys,\n\nIt appears that something is not quite right with this fix in 7.0.22. The following worked just fine in 7.0.14 (and GlassFish, WebLogic, and WebSphere) and now fails on envCtx.close() with \"Context is read only\" message.\n\njavax.naming.Context initCtx = new InitialContext();\njavax.naming.Context envCtx = (javax.naming.Context) initCtx.lookup(\"java:comp/env\");\n//some clever logic that uses envCtx\nenvCtx.close();//Fails here!\ninitCtx.close();\n\nAccording to JavaDoc I should be able to safely close the context when I am done with it.  \n\nThanks,\n\nLeon"}, {"count": 10, "tags": [], "bug_id": 51744, "attachment_id": null, "text": "Reopening, so that new issue in comment 9 is not lost.\nDo you have a stack trace?", "id": 150931, "time": "2011-10-26T11:01:34Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-26T11:01:34Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 51744, "attachment_id": null, "is_private": false, "id": 150950, "time": "2011-10-26T21:24:19Z", "creator": "lmikhailov@esri.com", "creation_time": "2011-10-26T21:24:19Z", "text": "Here you go:\n\njavax.naming.NamingException: Context is read only\n\tat org.apache.naming.NamingContext.checkWritable(NamingContext.java:941)\n\tat org.apache.naming.NamingContext.close(NamingContext.java:747)\n\tat com.esri.sds.rest.AdminDatasourcesResource.listDatasources(AdminDatasourcesResource.java:44)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:149)\n\tat com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:67)\n\tat com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:259)\n\tat com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:83)\n\tat com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:133)\n\tat com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:71)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:990)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:941)\n\tat com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:932)\n\tat com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:384)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:451)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:797)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:770)\n\tat com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:731)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:964)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)\n\nThanks,\n\nLeon"}, {"count": 12, "tags": [], "text": "To quote from section EE.5.3.4 of the Java EE spec\n<quote>\nThe container must ensure that the application component instances have only read access to their naming context. The container must throw the javax.naming.OperationNotSupportedException from all the methods of the javax.naming.Context interface that modify the environment naming context and its subcontexts.\n</quote>\n\nI would argue that the close() method is a method that \"modifies the environment naming context\" and therefore an exception should be thrown here. Tomcat is, however, not throwing the right exception in this case. Fortunately, the exception we should be throwing is a sub-class of the one we are throwing so changing it shouldn't break anything.\n\nProviding an option on the StandardContext to silently swallow this error rather than throwing an Exception looks doable. I'll take a look.", "is_private": false, "id": 150965, "creator": "markt@apache.org", "time": "2011-10-27T16:11:07Z", "bug_id": 51744, "creation_time": "2011-10-27T16:11:07Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 51744, "text": "The correct exception is now thrown and the option to control whether or not an exception is thrown has been added to the StandardContext.\n\nBoth of these changes have been made to trunk and 7.0.x and will be included in 7.0.23 onwards.", "id": 151007, "time": "2011-10-28T14:33:29Z", "creator": "markt@apache.org", "creation_time": "2011-10-28T14:33:29Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "text": "(In reply to comment #13)\n> The correct exception is now thrown and the option to control whether or not an\n> exception is thrown has been added to the StandardContext.\n> \n> Both of these changes have been made to trunk and 7.0.x and will be included in\n> 7.0.23 onwards.\n\nMark,\n\nI just installed 7.0.23 and I still see \"Context is read only\" exception thrown. \n\nIn your previous message you mentioned:\n> To quote from section EE.5.3.4 of the Java EE spec\n> <quote>\n> The container must ensure that the application component instances have only\n> read access to their naming context. The container must throw the\n> javax.naming.OperationNotSupportedException from all the methods of the\n> javax.naming.Context interface that modify the environment naming context and\n> its subcontexts.\n> </quote>\n> \n> I would argue that the close() method is a method that \"modifies the\n> environment naming context\" and therefore an exception should be thrown here.\n\nI hoped to avoid an argument but... I believe you are not interpreting the spec correctly. Here is a recommendation from a tutorial (http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/close.html) explaining how one is supposed to work with Contexts:\n\n\"Normal garbage collection takes care of removing Context instances when they are no longer in use. Connections used by Context instances being garbage collected will be closed automatically. Therefore, you do not need to explicitly close connections. Network connections, however, are limited resources and for certain programs, you might want to have control over their proliferation and usage.\" \n\nAnd here is a promoted usage pattern:\n    // Create initial context\n    DirContext ctx = new InitialDirContext(env);\n    // Get a copy of the same context\n    Context ctx2 = (Context)ctx.lookup(\"\");\n    // Get a child context\n    Context ctx3 = (Context) ctx.lookup(\"ou=NewHires\");\n    // do something useful with ctx, ctx2, ctx3\n    // Close the contexts when we're done\n    ctx.close();\n    ctx2.close();\n    ctx3.close();\n\nClosing a context has nothing to do with modifying it - you are just telling the system that you are done with a resource and it can be safely released at this time. Modifying a context means adding and/or deleting something from it. \n\nI have written a sample application that works as described above with no logged exceptions in GlassFish and in all Tomcat versions prior to 7.0.22. \nI can send it to you if you like.\n\nI don't believe the current implementation is correct. No exceptions should be logged by default.\n\nRegards,\n\nLeon", "is_private": false, "id": 151909, "creator": "lmikhailov@esri.com", "time": "2011-12-01T23:17:40Z", "bug_id": 51744, "creation_time": "2011-12-01T23:17:40Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 51744, "text": "I'm using Tomcat 7.0.25 and am still seeing this same issue. Any attempt to close a Context object results in the exception \"Context is read only\", and I am unable to instantiate a JNDI DataSource. My code worked fine on previous versions (earlier than 7.0.22), but is now broken.\n\nAre we supposed to just leave the Context open, and it will not cause memory leaks?", "id": 155328, "time": "2012-03-27T22:03:48Z", "creator": "mmaurer61@gmail.com", "creation_time": "2012-03-27T22:03:48Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 51744, "text": "(In reply to comment #14)\n\n> I hoped to avoid an argument but... I believe you are not interpreting the\n> spec correctly. Here is a recommendation from a tutorial\n> (http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/close.html)\n\nI agree and I also hope to avoid an argument but I also hope that the bug gets fixed... Just retried on 7.0.27 and the current behaviour is incorrect.", "id": 160160, "time": "2012-06-21T12:44:12Z", "creator": "ric.almeida@gmail.com", "creation_time": "2012-06-21T12:44:12Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 51744, "attachment_id": null, "text": "(In reply to comment #16)\n> I agree and I also hope to avoid an argument but I also hope that the bug\n> gets fixed... Just retried on 7.0.27 and the current behaviour is incorrect.\n\nYou're not going to get an argument but you are going to be told to have the courtesy to actually read the bug before re-opening it.\n\nTo repeat:\n- the current behaviour is required by the specification\n- if you don't like it (and there are plenty of valid reasons why you might not) there is an option available on the StandardContext to disable it.\n\nThe only reason I can think of that would warrant re-opening this bug is if the option on the StandardContext did not work but that is not what you are saying.", "id": 160171, "time": "2012-06-21T18:56:38Z", "creator": "markt@apache.org", "creation_time": "2012-06-21T18:56:38Z", "is_private": false}, {"count": 18, "tags": [], "creator": "markt@apache.org", "text": "*** Bug 54168 has been marked as a duplicate of this bug. ***", "id": 163540, "time": "2012-11-19T20:54:43Z", "bug_id": 51744, "creation_time": "2012-11-19T20:54:43Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 51744, "attachment_id": null, "is_private": false, "id": 185462, "time": "2015-09-24T01:48:48Z", "creator": "bingalee7@gmail.com", "creation_time": "2015-09-24T01:48:48Z", "text": "The work-around is to apply jndiExceptionOnFailedWrite to the context (https://tomcat.apache.org/tomcat-7.0-doc/config/context.html#Standard_Implementation), e.g.\n\n<Context jndiExceptionOnFailedWrite=\"false\">"}]
[{"attachment_id": null, "tags": [], "bug_id": 31251, "text": "The manifest task is truncating my classpath attribute so that it no longer is \ncorrect - it splits path components rather than truncating on spaces between \nthem. for example, here's the output from a recent usage:\n\nManifest-Version: 1.0\nAnt-Version: Apache Ant 1.6.1\nCreated-By: 1.4.2_02-b03 (Sun Microsystems Inc.)\nClass-Path:  ResponseGenerator.jar TestSequences.jar commons-beanutils\n .jar commons-collections.jar commons-digester.jar commons-fileupload.\n jar commons-lang.jar commons-logging.jar commons-validator.jar jakart\n a-oro.jar struts-legacy.jar struts.jar", "count": 0, "id": 63617, "time": "2004-09-15T19:57:37Z", "creator": "joel.regen@activant.com", "creation_time": "2004-09-15T19:57:37Z", "is_private": false}, {"count": 1, "tags": [], "creator": "conor@apache.org", "text": "That output is completely correct\n\n\n*** This bug has been marked as a duplicate of 31218 ***", "id": 63645, "time": "2004-09-15T23:00:45Z", "bug_id": 31251, "creation_time": "2004-09-15T23:00:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 31251, "attachment_id": null, "id": 63647, "creation_time": "2004-09-15T23:19:45Z", "time": "2004-09-15T23:19:45Z", "creator": "joel.regen@activant.com", "text": "WHAT! This is broken! I looked at the source in Manifest.java, the writeValue \nmethod of the Attribute class:\nGive me a break! This produces BROKEN class path attributes in any manifest.\n!!!!!!!!!!!\n\nHere's my proposed fix:\n        private void writeValue(PrintWriter writer, String value)\n             throws IOException {\n            String line = name + \": \" + value;\n            String pathComponent = null;\n            boolean done = false;\n\n            // If this is a class-path, be smarter about breaking up \n            // value string - break only at whitespace. In fact,\n            // just put each classpath component on a separate line.\n            // It's simpler.\n            if (\"Class-Path\".equals(name)) {\n                StringTokenizer st = new StringTokenizer(value);\n                writer.print(name + \": \");\n                while (st.hasMoreElements()) {\n                    String elem = st.nextToken();\n                    writer.print(elem + EOL + \" \");\n                }\n            }\n            else{\n                while (line.getBytes().length > MAX_LINE_LENGTH) {\n                    // try to find a MAX_LINE_LENGTH byte section\n                    int breakIndex = MAX_SECTION_LENGTH;\n                    String section = line.substring(0, breakIndex);\n                    while (section.getBytes().length > MAX_SECTION_LENGTH\n                         && breakIndex > 0) {\n                        breakIndex--;\n                        section = line.substring(0, breakIndex);\n                    }\n                    if (breakIndex == 0) {\n                        throw new IOException(\"Unable to write manifest line \"\n                            + name + \": \" + value);\n                    }\n                    writer.print(section + EOL);\n                    line = \" \" + line.substring(breakIndex);\n                }\n                writer.print(line + EOL);\n            }\n        }\n    }\n", "is_private": false}, {"attachment_id": 12748, "tags": [], "bug_id": 31251, "text": "Created attachment 12748\nSimple test of manifests (zip)", "count": 3, "id": 63649, "time": "2004-09-16T00:10:48Z", "creator": "conor@apache.org", "creation_time": "2004-09-16T00:10:48Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 31251, "text": "This is not BROKEN. \n\nIf you believe it is broken, please tell us *how* it is broken. What effect does\nit have? What does not work? What part of the spec does it violate?\n\nTo test this out, I wrote a little test - attached. The result for your manifest is\n\ntest:\n    [javac] Compiling 1 source file\n     [java] Class path = ResponseGenerator.jar TestSequences.jar\ncommons-beanutils.jar commons-collections.jar commons-digester.jar\ncommons-fileupload.jar commons-lang.jar commons-lo\ngging.jar commons-validator.jar jakarta-oro.jar struts-legacy.jar struts.jar\n\nwhich indicates the manifest has been put back together correctly.\n\nIs your problem just that this looks bad? \n\nYour proposed change will break for any classpath entry which is longer than 70\ncharacters (and even less for the first entry in the classpath).\n\nNote that this issue comes up regularly:\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=22530\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=10960\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=3811\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=9258\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=7079\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=6240\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=6076", "count": 4, "id": 63650, "time": "2004-09-16T00:14:42Z", "creator": "conor@apache.org", "creation_time": "2004-09-16T00:14:42Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 31251, "attachment_id": null, "id": 63728, "creation_time": "2004-09-17T14:53:26Z", "time": "2004-09-17T14:53:26Z", "creator": "joel.regen@activant.com", "text": "Ok. My bad. Apparently I received some bogus information from a co-worker - he \nsaid that this form of truncation would cause the class loader to miss those \njars whose names were split across lines in the manifest during class path \nprocessing. However, this seems to have only been a problem on SCO Unix (not \nsure which version) and probably only on jdk1.3xxx.  I tested this with 1.4.2 \non windoze and it worked fine.\nSorry. \nJR", "is_private": false}]
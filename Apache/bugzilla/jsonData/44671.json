[{"count": 0, "tags": [], "creator": "nikolai@prokoschenko.de", "attachment_id": 21712, "id": 114949, "time": "2008-03-25T08:00:36Z", "bug_id": 44671, "creation_time": "2008-03-25T08:00:36Z", "is_private": false, "text": "Created attachment 21712\nIllustrating test case.\n\nThis bug is a yet another spin-off of #44519 and #40934. As I've described there, using a JDBC sampler with user parameters is currently not possible, since parameter expansion doesn't work there. Apparent explanation by sebb is that the configuration element is initialized before pre-compiler runs so that the solution might be using a User Defined Variables configuration element instead of User Parameters. However, this doesn't work either, at least not the way I need it.\n\nMy testcases use parameter expansion extensively so that the test can be run for different servers without much hassle. When using User Parameters, it is possible to define common string parts in a parameter and re-use it in other parameters, e.g. setting commonPath variable to \"c:\\test\" and using it in testsPath variable as \"${commonPath}\\tests\". This is not possible with User Defined Variables. When defined in the same manner, testsPath contains \"${commonPath}\\tests\" at runtime instead of \"c:\\test\\tests\".\n\nI include a test case which illustrates the problem. Two network addresses are defined in UDV and two user names in UP. In the result from the Debug Sampler I see UPs expanded and UDV unexpanded which is IMHO not the correct behaviour. Same problem if the variables are defined on Test Plan level.\n\nI'm sorry if this bug report is based on false assumptions about the way JMeter functions."}, {"count": 1, "tags": [], "text": "I'm not quite sure why variable references - e.g. ${netPrefix} - are not being evaluated in the UDV element, because function references are evaluated.\n\nHowever, this does mean that there is a work-round: the __evalVar() function\n\nhttp://jakarta.apache.org/jmeter/usermanual/functions.html#__evalVar\n\nTry using ${__evalVar(netPrefix)} instead of ${netPrefix} - does that work?", "is_private": false, "id": 114950, "creation_time": "2008-03-25T08:37:29Z", "time": "2008-03-25T08:37:29Z", "creator": "sebb@apache.org", "bug_id": 44671, "attachment_id": null}, {"count": 2, "text": "It doesn't work twofold. \n\n1. When used as UDV, it gets replaced with an empty string.\n2. When used on the Test Plan level, I'm getting this exception:\n\n2008/03/25 16:43:34 ERROR - jmeter.engine.StandardJMeterEngine: Error occurred compiling the tree: java.lang.NullPointerException\n\tat org.apache.jmeter.functions.EvalVarFunction.execute(EvalVarFunction.java:69)\n\tat org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:128)\n\tat org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:97)\n\tat org.apache.jmeter.testelement.property.FunctionProperty.getStringValue(FunctionProperty.java:77)\n\tat org.apache.jmeter.testelement.AbstractTestElement.getPropertyAsString(AbstractTestElement.java:208)\n\tat org.apache.jmeter.config.Argument.getValue(Argument.java:113)\n\tat org.apache.jmeter.config.Arguments.getArgumentsAsMap(Arguments.java:95)\n\tat org.apache.jmeter.testelement.TestPlan.getUserDefinedVariables(TestPlan.java:138)\n\tat org.apache.jmeter.engine.PreCompiler.addNode(PreCompiler.java:88)\n\tat org.apache.jorphan.collections.HashTree.traverse(HashTree.java:955)\n\tat org.apache.jmeter.engine.StandardJMeterEngine.compileTree(StandardJMeterEngine.java:182)\n\tat org.apache.jmeter.engine.StandardJMeterEngine.run(StandardJMeterEngine.java:344)\n\tat java.lang.Thread.run(Unknown Source)", "bug_id": 44671, "attachment_id": null, "id": 114951, "time": "2008-03-25T08:47:41Z", "creator": "nikolai@prokoschenko.de", "creation_time": "2008-03-25T08:47:41Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 114952, "time": "2008-03-25T09:02:29Z", "bug_id": 44671, "creation_time": "2008-03-25T09:02:29Z", "text": "1.(In reply to comment #2)\n> It doesn't work twofold. \n> \n> 1. When used as UDV, it gets replaced with an empty string.\n\nOK. That works in the current code; I thought it was already in 2.3.1. Obviously it was added later, so it will be fixed in the next release.\n\n> 2. When used on the Test Plan level, I'm getting this exception:\n\nVariables have not been properly initialised at this point, so it cannot work.\nHowever, I've fixed the code so it logs an error rather than generating an NPE.\n\n> 2008/03/25 16:43:34 ERROR - jmeter.engine.StandardJMeterEngine: Error occurred\n> compiling the tree: java.lang.NullPointerException\n>         at\n> org.apache.jmeter.functions.EvalVarFunction.execute(EvalVarFunction.java:69)\n>         at\n> org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:128)\n>         at\n> org.apache.jmeter.engine.util.CompoundVariable.execute(CompoundVariable.java:97)\n>         at\n> org.apache.jmeter.testelement.property.FunctionProperty.getStringValue(FunctionProperty.java:77)\n>         at\n> org.apache.jmeter.testelement.AbstractTestElement.getPropertyAsString(AbstractTestElement.java:208)\n>         at org.apache.jmeter.config.Argument.getValue(Argument.java:113)\n>         at\n> org.apache.jmeter.config.Arguments.getArgumentsAsMap(Arguments.java:95)\n>         at\n> org.apache.jmeter.testelement.TestPlan.getUserDefinedVariables(TestPlan.java:138)\n>         at org.apache.jmeter.engine.PreCompiler.addNode(PreCompiler.java:88)\n>         at org.apache.jorphan.collections.HashTree.traverse(HashTree.java:955)\n>         at\n> org.apache.jmeter.engine.StandardJMeterEngine.compileTree(StandardJMeterEngine.java:182)\n>         at\n> org.apache.jmeter.engine.StandardJMeterEngine.run(StandardJMeterEngine.java:344)\n>         at java.lang.Thread.run(Unknown Source)\n> "}, {"count": 4, "tags": [], "creator": "nikolai@prokoschenko.de", "attachment_id": null, "is_private": false, "id": 114953, "time": "2008-03-25T09:05:42Z", "bug_id": 44671, "creation_time": "2008-03-25T09:05:42Z", "text": "What about the evalVar workaround? Will it get fixed so that variables expand automatically or should I wrap every expression in __evalVar for now?"}, {"count": 5, "tags": [], "text": "One more addition: according to documentation, \"${__eval(select ${column} from ${table})}\" should expand column and table if they are defined. In my testcase, I replaced the value of firstDb with \"${__eval(${netPrefix}.1)}\" and have got a \"${netPrefix}.1\" as result. So __eval doesn't know how to expand variables, maybe this is the bug?", "is_private": false, "bug_id": 44671, "id": 114977, "time": "2008-03-26T04:01:28Z", "creator": "nikolai@prokoschenko.de", "creation_time": "2008-03-26T04:01:28Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 115089, "time": "2008-03-29T04:21:01Z", "bug_id": 44671, "creation_time": "2008-03-29T04:21:01Z", "is_private": false, "text": "I've discovered the problem: UDV parameters are not available as variables until the UDV element has been processed. I'll update the documentation for the next version.\n\nIf you split the UDV element into two elements, such that the first one defines netPrefix and the next uses it, you should find that it all works OK.\n\nOr you move the netPrefix definition to the Test Plan - which probably makes more sense anyway.\n\nIf this does not work for you, please re-open with test case.\n"}]
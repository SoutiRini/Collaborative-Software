[{"count": 0, "tags": [], "creator": "bug_reqtimeout@phmd.net", "attachment_id": null, "is_private": false, "id": 176417, "time": "2014-07-16T12:14:31Z", "bug_id": 56729, "creation_time": "2014-07-16T12:14:31Z", "text": "Keep-Alive broken by mod_reqtimeout since 2.2.20 :\nHTTP 1.1 GET  : works fine\nHTTP 1.1 POST without POST-DATA : works fine\nHTTP 1.1 POST with POST-DATA : is broken\n\nAs the variable is named, **Request**ReadTimeout ... they must not timeout slow **Response** body.\n\nexemple :\nSlow generated csv text file data during more than 15 sec with default(ubuntu/debian) RequestReadTimeout body=15\nor slow download during more than body=[duration]\nor big file download with HTTP POST with post-data during more than timeout\n\n\nThe doc says well that the timeout apply to : receiving **request** headers and body **from client**\nhttp://httpd.apache.org/docs/2.2/mod/mod_reqtimeout.html\n\nDuring download of the response (header and body(post-data) from the request is already received by apache) , the \"timer\" of mod reqtimeout continue to increase and at the end of the response the tcp connection is closed ( TCP FIN ).\n\nWhile keep-alive is in use it close the connexion while another http request is already in transit.\n\nThe network connection is expected to survive for later reuse during 30 more seconds ( or 100 hit ) because of Client and Server allow Keep-Alive\nand apache respond : Connexion: Keep-Alive\n\n\nClient Header sent :\n    Connection: keep-alive\n\nServer response header from the first request  :\n    Keep-Alive: timeout=30, max=100\n    Connection: Keep-Alive\n\nBut connexion is closee by tcp FIN at then end of the first request.\n\nSlow \"download\" (from the client point of view) is not slow **Request** sending header or slow sending body like Slowloris ..\nBig file download at high speed during more than 15 seconds should not break keep-alive mecanism.\n\nTest case whith mod_proxy and slow jsp page in backend : One POST without reconnect worke fine ( keep-alive used ( max=X decrease  ))\n\ndoussot@PC-TEC-12:~$ export URL=\"http://hostname/page.jsp\" ; curl -i -X POST -H \"Connection: keep-alive\" -w @curl-format_post.txt \"$URL\" -o /tmp/output1 \"$URL\" -o /tmp/output2 ; head -n 10 /tmp/output1 ; head -n 10 /tmp/output2\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  195k    0  195k    0     0   9957      0 --:--:--  0:00:20 --:--:--  9693\n0,123: time_namelookup\n0,164: time_connect\n0,164: time_pretransfer\n0,218: time_starttransfer\n----------\n20,087: time_total\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  195k    0  195k    0     0  10045      0 --:--:--  0:00:19 --:--:--  9693\n0,000: time_namelookup\n0,000: time_connect\n0,000: time_pretransfer\n0,056: time_starttransfer\n----------\n19,911: time_total\n\nHTTP/1.1 200 OK\nDate: Fri, 11 Jul 2014 12:45:57 GMT\nServer: Sun GlassFish Enterprise Server v2.1\nX-Powered-By: JSP/2.1\nContent-Type: text/html;charset=ISO-8859-1\nSet-Cookie: JSESSIONID=............................................; Path=/\nKeep-Alive: timeout=30, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\n\nHTTP/1.1 200 OK\nDate: Fri, 11 Jul 2014 12:46:17 GMT\nServer: Sun GlassFish Enterprise Server v2.1\nX-Powered-By: JSP/2.1\nContent-Type: text/html;charset=ISO-8859-1\nSet-Cookie: JSESSIONID=............................................; Path=/\nKeep-Alive: timeout=30, max=99\nConnection: Keep-Alive\nTransfer-Encoding: chunked\n\n\n\nThe second request dont made connect :  time_connect 0,000 .. fine\n\n\nIf we add POST data : curl --data \"test=1\"\n\n\ndoussot@PC-TEC-12:~$ export URL=\"http://hostname/page.jsp\" ; curl -i --data \"test=1\" -X POST -H \"Connection: keep-alive\" -w @curl-format_post.txt \"$URL\" -o /tmp/output1 \"$URL\" -o /tmp/output2 ; head -n 10 /tmp/output1 ; head -n 10 /tmp/output2\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  195k    0  195k    0     6   9949      0 --:--:--  0:00:20 --:--:--  9688\n0,130: time_namelookup\n0,170: time_connect\n0,170: time_pretransfer\n0,226: time_starttransfer\n----------\n20,102: time_total\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  195k    0  195k    0     6  10009      0 --:--:--  0:00:19 --:--:--  9682\n0,000: time_namelookup\n0,044: time_connect\n0,044: time_pretransfer\n0,100: time_starttransfer\n----------\n19,982: time_total\n\nHTTP/1.1 200 OK\nDate: Fri, 11 Jul 2014 12:47:04 GMT\nServer: Sun GlassFish Enterprise Server v2.1\nX-Powered-By: JSP/2.1\nContent-Type: text/html;charset=ISO-8859-1\nSet-Cookie: JSESSIONID=............................................ Path=/\nKeep-Alive: timeout=30, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\n\nHTTP/1.1 200 OK\nDate: Fri, 11 Jul 2014 12:47:24 GMT\nServer: Sun GlassFish Enterprise Server v2.1\nX-Powered-By: JSP/2.1\nContent-Type: text/html;charset=ISO-8859-1\nSet-Cookie: JSESSIONID=............................................; Path=/\nKeep-Alive: timeout=30, max=100\nConnection: Keep-Alive\nTransfer-Encoding: chunked\n\n\n2x time_connect != 0\nA new connection is made beaucause of the drop of the first by apache2.2\nKeep-Alive max reset to 100 for the second request\n\n\n\n\nTested on :\n\nDebian Squeeze\n    apache2.2-bin -> 2.2.16-6+squeeze12    : OK\n\nUbuntu precise 12.04LTS\n    apache2.2-bin -> 2.2.22-1ubuntu1.5     : Broken\n\nManual build : 2.2.19 : OK\nManual build : 2.2.20 : Broken\nManual build : latest stable : 2.4.9  : Broken\n\nWith LogLevel  debug: we can see that the network connexion is reset :( 2.4.9 )\n[Wed Jul 16 12:24:39.433978 2014] [core:error] [pid 23190:tid 140066114492160] (104)Connection reset by peer: [client 127.0.0.1:60110] AH00574: ap_content_length_filter: apr_bucket_read() failed\n\n\nRelated to :\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=51103\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1162862\nhttp://svn.apache.org/viewvc?view=revision&revision=1103213\n\n\nReproducible with diff\u00e9rent client http: curl 7.22/jmeter 2.11\nReproducible diff\u00e9rent content to download : generated by /bin/bash cgi / jsp / big static file\n\ntest case available for jsp cgi jmeter curl to follow"}, {"count": 1, "tags": [], "bug_id": 56729, "attachment_id": 31817, "id": 176419, "creation_time": "2014-07-16T12:23:06Z", "time": "2014-07-16T12:23:06Z", "creator": "bug_reqtimeout@phmd.net", "text": "Created attachment 31817\ntestcase_jmeter_cgi.tgz\n\ntestcase jmeter + cgi ( bin/bash ) + result jmeter + network capture wireshark", "is_private": false}, {"count": 2, "tags": [], "creator": "bug_reqtimeout@phmd.net", "attachment_id": 31818, "is_private": false, "id": 176421, "time": "2014-07-16T12:33:59Z", "bug_id": 56729, "creation_time": "2014-07-16T12:33:59Z", "text": "Created attachment 31818\ntestcase_curl_jsp.tgz\n\nTest case curl + jsp to generate slow content"}, {"count": 3, "tags": [], "bug_id": 56729, "attachment_id": null, "text": "Bug still present in 2.4.10", "id": 177305, "time": "2014-08-22T07:59:13Z", "creator": "bug_reqtimeout@phmd.net", "creation_time": "2014-08-22T07:59:13Z", "is_private": false}, {"count": 4, "tags": [], "creator": "bug_reqtimeout@phmd.net", "attachment_id": null, "is_private": false, "id": 177306, "time": "2014-08-22T08:12:11Z", "bug_id": 56729, "creation_time": "2014-08-22T08:12:11Z", "text": "(In reply to Philippe Doussot from comment #3)\n> Bug still present in 2.4.10\n\nDefault MPM :\nServer Version: Apache/2.4.10 (Unix)\nServer MPM: event"}, {"count": 5, "tags": [], "text": "Maybe related to :\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=44782\n\nI will check more today and post feedback.", "is_private": false, "bug_id": 56729, "id": 177346, "time": "2014-08-25T07:12:05Z", "creator": "bug_reqtimeout@phmd.net", "creation_time": "2014-08-25T07:12:05Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 177358, "time": "2014-08-25T16:38:55Z", "bug_id": 56729, "creation_time": "2014-08-25T16:38:55Z", "text": "Was able to reproduce, investigating"}, {"count": 7, "tags": [], "bug_id": 56729, "attachment_id": null, "id": 177359, "creation_time": "2014-08-25T16:56:51Z", "time": "2014-08-25T16:56:51Z", "creator": "covener@gmail.com", "text": "The failure is during an AP_MODE_SPECULATIVE read during check_pipeline()", "is_private": false}, {"count": 8, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 177451, "time": "2014-08-30T13:01:07Z", "bug_id": 56729, "creation_time": "2014-08-30T13:01:07Z", "is_private": false, "text": "Thanks again for the report, fixed in trunk http://svn.apache.org/r1621453 and will propose for backport."}, {"count": 9, "tags": [], "creator": "bug_reqtimeout@phmd.net", "attachment_id": null, "id": 178910, "time": "2014-11-03T10:57:31Z", "bug_id": 56729, "creation_time": "2014-11-03T10:57:31Z", "is_private": false, "text": "Thanks Eric for your quick patch.\n\nSince your patch in trunk on 2014-08-30\nthe next build in branch 2.2 was out  : http://www.apache.org/dist/httpd/CHANGES_2.2.29\nwithout this bug corrected.\n\nIs the backport of this bug delayed or refused in 2.2 branch ?\n\nMust-I absolutely upgrade to 2.4 to get this work well or just wait next 2.2 release ?"}, {"count": 10, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 178912, "time": "2014-11-03T14:04:50Z", "bug_id": 56729, "creation_time": "2014-11-03T14:04:50Z", "text": "proposed for 22x, patch applies with minor conflict\n\nhttp://people.apache.org/~covener/patches/httpd-2.2.2-reqtimeout-slow-post.diff"}, {"count": 11, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": 32863, "is_private": false, "id": 183806, "time": "2015-06-30T11:28:22Z", "bug_id": 56729, "creation_time": "2015-06-30T11:28:22Z", "text": "Created attachment 32863\nProposed bugfix: do not reset the \"in_keep_alive\" flag for speculative reads\n\nI think that the bugfix ( http://svn.apache.org/r1621453 ) is flawed. I use a module that also issues speculative reads. mod_reqtimeout detects the end of the keep-alive phase too early.\n\nPlease have a look at the proposed patch (mod_reqtimeout.c.diff). It resets the \"in_keep_alive\" flag only if the read is not speculative."}, {"count": 12, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "is_private": false, "id": 183807, "time": "2015-06-30T12:12:32Z", "bug_id": 56729, "creation_time": "2015-06-30T12:12:32Z", "text": "The patch looks correct, but I'm not not sure you can safely call the filter stack when the connection is in keepalive state.\n\nWith the event MPM the connection may be processed at any time, and with other MPMs there is probably one thread already blocked in the ap_get_brigade() call.\n\nI don't know where your module is hooked though."}, {"count": 13, "tags": [], "text": "My module is a content generator (uses ap_hook_handler). But I have discovered that the speculative reads are triggered by check_pipeline(), not by my module - sorry for the confusion...\n\nI have debugged the problem. Sometimes check_pipeline() is called *before* the connection enters the keep-alive state (and also before the log_transaction handler that mod_reqtimeout uses to detect the end of the request). In this case, it works. The branch \"if (block == APR_NONBLOCK_READ && mode == AP_MODE_SPECULATIVE) ...\" is taken.\n\nBut sometimes check_pipeline() is called *after* the connection has already entered the keep-alive state. Then the branch \"if (ccfg->in_keep_alive) ...\" is taken, and this branch does not check for speculative reads - that's the bug.\n\nI don't know exactly how these two cases are triggered.\n\nIt would be great if this bugfix and the previous bugfixes r1621453 / r1641376 would be included in a future 2.4.x release.", "is_private": false, "bug_id": 56729, "id": 183811, "time": "2015-06-30T15:53:27Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-06-30T15:53:27Z", "attachment_id": null}, {"count": 14, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": 32866, "id": 183813, "time": "2015-06-30T21:09:28Z", "bug_id": 56729, "creation_time": "2015-06-30T21:09:28Z", "is_private": false, "text": "Created attachment 32866\nProposed bugfix: do not reset the \"in_keep_alive\" flag for speculative reads - v2\n\nI have attached a better (less intrusive) patch: mod_reqtimeout.c-v2.diff"}, {"count": 15, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": 32867, "is_private": false, "id": 183814, "time": "2015-06-30T21:32:59Z", "bug_id": 56729, "creation_time": "2015-06-30T21:32:59Z", "text": "Created attachment 32867\nProposed bugfix: do not reset the \"in_keep_alive\" flag for speculative reads - v3"}, {"count": 16, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 183815, "time": "2015-06-30T22:22:34Z", "bug_id": 56729, "creation_time": "2015-06-30T22:22:34Z", "is_private": false, "text": "Thanks Michael for the analyse and patches!\n\n(In reply to Michael Kaufmann from comment #13)\n> \n> But sometimes check_pipeline() is called *after* the connection has already\n> entered the keep-alive state. Then the branch \"if (ccfg->in_keep_alive) ...\"\n> is taken, and this branch does not check for speculative reads - that's the\n> bug.\n> \n> I don't know exactly how these two cases are triggered.\n\nCould you please provide a backtrace (gdb's \"bt full\"?) of this situation?\n\n> \n> It would be great if this bugfix and the previous bugfixes r1621453 /\n> r1641376 would be included in a future 2.4.x release.\n\nI'll propose a backport for the whole, but first the above trace would help determine the root cause (I'm not sure whether this should happen)."}, {"count": 17, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": 32872, "id": 183830, "time": "2015-07-01T11:58:15Z", "bug_id": 56729, "creation_time": "2015-07-01T11:58:15Z", "is_private": false, "text": "Created attachment 32872\nBacktraces (reqtimeout_after_body)\n\nThe backtraces for reqtimeout_filter look the same, so I have created backtraces for reqtimeout_after_body (attached).\n\nI have used Apache 2.4.10, a patched mod_reqtimeout (including r1621453 + r1641376 from trunk) and the worker MPM."}, {"count": 18, "tags": [], "text": "Created attachment 32873\nFull backtraces (reqtimeout_after_body)", "is_private": false, "bug_id": 56729, "id": 183832, "time": "2015-07-01T12:21:45Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-07-01T12:21:45Z", "attachment_id": 32873}, {"count": 19, "tags": [], "bug_id": 56729, "attachment_id": 32874, "id": 183836, "creation_time": "2015-07-01T18:07:37Z", "time": "2015-07-01T18:07:37Z", "creator": "ylavic.dev@gmail.com", "text": "Created attachment 32874\nSet the in_keep_alive state in pre_read_request hook\n\nDoes this patch solve the issue?\n\nOtherwise, could you please, provide the backtrace from reqtimeout_filter() for the two cases (so to determine where the \"faulty\" call to the filter comes from)?\n\nThanks!", "is_private": false}, {"count": 20, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": null, "is_private": false, "id": 183839, "time": "2015-07-02T07:29:36Z", "bug_id": 56729, "creation_time": "2015-07-02T07:29:36Z", "text": "Unfortunately your patch does not work with the event MPM (but yes, it fixes the bug for the worker MPM).\n\nI will attach the backtrace. I have also created an example module that you can use to reproduce the bug."}, {"count": 21, "tags": [], "creator": "apache-bugzilla@michael-kaufmann.ch", "attachment_id": 32875, "is_private": false, "id": 183840, "time": "2015-07-02T07:30:09Z", "bug_id": 56729, "creation_time": "2015-07-02T07:30:09Z", "text": "Created attachment 32875\nFull backtrace (reqtimeout_filter)"}, {"count": 22, "tags": [], "text": "Created attachment 32876\nExample module that triggers the bug (mod_bugtest)", "is_private": false, "bug_id": 56729, "id": 183841, "time": "2015-07-02T07:31:01Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-07-02T07:31:01Z", "attachment_id": 32876}, {"count": 23, "tags": [], "text": "Created attachment 32877\nApache configuration for the example module", "is_private": false, "bug_id": 56729, "id": 183842, "time": "2015-07-02T07:31:31Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-07-02T07:31:31Z", "attachment_id": 32877}, {"count": 24, "tags": [], "bug_id": 56729, "attachment_id": null, "id": 183843, "creation_time": "2015-07-02T07:33:18Z", "time": "2015-07-02T07:33:18Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "text": "With the example module & the worker MPM, it's possible to trigger the bug with this request:\n\n$ time telnet localhost 8080\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nGET / HTTP/1.1\nHost: localhost\nConnection: Keep-Alive\n\nHTTP/1.1 200 OK\nDate: Thu, 02 Jul 2015 07:25:33 GMT\nServer: Apache/2.4.12 (Unix)\nContent-Length: 4\nKeep-Alive: timeout=20, max=100\nConnection: Keep-Alive\n\nTestConnection closed by foreign host.\n\nreal\t0m10.661s\nuser\t0m0.000s\nsys\t0m0.002s", "is_private": false}, {"count": 25, "tags": [], "bug_id": 56729, "attachment_id": 32879, "id": 183855, "creation_time": "2015-07-02T15:41:22Z", "time": "2015-07-02T15:41:22Z", "creator": "ylavic.dev@gmail.com", "text": "Created attachment 32879\nUse reqtimeout_before_headers instead of reqtimeout_after_body for the HTTP header state\n\nHow about this version?\n\nOtherwise, could you define \"does not work with the event MPM\"?", "is_private": false}, {"count": 26, "tags": [], "bug_id": 56729, "attachment_id": null, "id": 183862, "creation_time": "2015-07-02T19:10:46Z", "time": "2015-07-02T19:10:46Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "text": "> How about this version?\n\nProbably does not work too (not tested) because it has the same problem as the previous patch (see below)\n\n\n> Otherwise, could you define \"does not work with the event MPM\"?\n\nThe worker MPM calls the hook \"pre_read_request\" when a request has been processed, *before* the keep-alive state. The event MPM calls this hook when the next request has been detected, *after* the keep-alive state.\n\nExample:\n\nDetect incoming data\nProcess request 1\nFinish request 1\n--> worker calls the pre_read_request hooks here\n... wait for next request (keep-alive state) ...\nDetect incoming data\n--> event calls the pre_read_request hooks here\nProcess request 2\nFinish request 2\n\nSo with the event MPM, the pre_read_request hook cannot be used to set ccfg->in_keep_alive because it's too late.\n\nMay I remind you that I have proposed a working patch? ;-)", "is_private": false}, {"count": 27, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "is_private": false, "id": 183871, "time": "2015-07-02T23:59:20Z", "bug_id": 56729, "creation_time": "2015-07-02T23:59:20Z", "text": "(In reply to Michael Kaufmann from comment #26)\n> \n> Probably does not work too (not tested) because it has the same problem as\n> the previous patch (see below)\n\nYou possibly should test it...\n\n> \n> The worker MPM calls the hook \"pre_read_request\" when a request has been\n> processed, *before* the keep-alive state. The event MPM calls this hook when\n> the next request has been detected, *after* the keep-alive state.\n\nI think we need to agree on what the keepalive state is.\nFrom mod_reqtimeout POV, this is when the time taken waiting for the next request should not be taken into account, which happens to be when called from read_request_line().\n\nThis report is about subsequent requests possibly timedout by the module because the keep-alive time becomes accounted after some speculative read (from check_pipeline) resets the state.\n\nAfter r1621453 and r1641376 (which BTW I assume you applied already), the new issue is that the log_transaction hook may happen either before or after the subsequent request is processed, depending on whether the previous request has already been destroyed or not (e.g. pipelined responses).\n\nIn the latter case, the keepalive state may not be set (or too late, or twice, ..., that's a race).\n\nWith the latest patch, read_request_line() is called just after the pre_read_request hook (which indeed happens after the previous request is processed, but mainly *before* the one mod_reqtimeout's state is for).\n\nThe worker MPM calls read_request_line() directly to read the next request, so it will pass the keep-alive timeout time in reqtimeout_filter(), we must not account it, nor depend on the previous request to be destroyed.\n\nThe event MPM handles the kept-alive connections by itself (polling the socket directly, without using the input filter stack), consequently when read_request_line() is then called, the current (as per the latest patch) request is indeed already available, yet we can't depend on the previous request to update the state.\n\nThat's what the latest patch addresses, the state is initialized in the pre_read_request hook ([be]for[e] the new request) by reqtimeout_before_headers(), thus the racy log_transaction hook reqtimeout_after_body() is not needed anymore.\n\nThe patch now also account for the request line read itself (after the wait), whereas the original code simply forwarded the result with no timeout check (subsequent requests only).\n\nHopefully it would solve your issue since now I can't see how the state could be wrong (from moq_reqt POV...).\n\n> \n> Example:\n> \n> Detect incoming data\n> Process request 1\n> Finish request 1\nworker and event could have called ap_run_log_transaction() here, or not...\n> --> worker calls the pre_read_request hooks here\n> ... wait for next request (keep-alive state) ...\nworker::ap_read_request()::ap_run_pre_read_request()::reqtimeout_before_headers()\nworker::process_socket()::ap_process_connection():..:ap_read_request()::read_request_line()::reqtimeout_filter()\nWhereas:\nevent::[listen]::poll()\n> Detect incoming data\n> --> event calls the pre_read_request hooks here\nYes, with:\nevent::[work]::ap_run_process_connection():..:ap_read_request()::ap_run_pre_read_request()::reqtimeout_before_headers()\nAnd then:\nevent::[work]::ap_run_process_connection():..:ap_read_request()::read_request_line()::reqtimeout_filter()\nevent::[work]::ap_run_process_connection():..:ap_read_request()::ap_read_mime_headers()::reqtimeout_filter()*\nWhereas worker is already here:\nworker::process_socket()::ap_process_connection():..:ap_read_request()::ap_read_mime_headers()::reqtimeout_filter()*\n> Process request 2\n> Finish request 2\n> \n> So with the event MPM, the pre_read_request hook cannot be used to set\n> ccfg->in_keep_alive because it's too late.\n\nThat's just before the very first read about the upcoming request on this kept-alive connection, we must reset the state here, and set in_keep_alive (which really is the state of the connection until we read something by the way, and waiting for this read shall not be accounted).\n\n> \n> May I remind you that I have proposed a working patch? ;-)\n\nIt can't be correct, as any concurrent read (be it speculative) during the keep-alive state."}, {"count": 28, "tags": [], "bug_id": 56729, "attachment_id": null, "text": "> You possibly should test it...\nYes, you are right. I have tested the latest patch and it indeed fixes this bug! Sorry that I have made wrong assumptions.\n\n> After r1621453 and r1641376 (which BTW I assume you applied already)\nThat's correct, I have tested including these two changes.\n\n> thus the racy log_transaction hook reqtimeout_after_body() is not needed anymore.\nGood refactoring! (minor issue: the old hook name \"log_transaction\" is still mentioned in a comment)\n\n> I can't see how the state could be wrong (from moq_reqt POV...).\nMaybe some future or custom MPM does nonblocking+speculative reads in the keep-alive state. So perhaps the corresponding \"if\" block that handles this case should be moved to the top of the function. But this is probably more a theoretical issue.\n\nYann, I really appreciate the time and effort that you have put into fixing this bug. Keep up the good work!", "id": 183882, "time": "2015-07-03T18:05:38Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-07-03T18:05:38Z", "is_private": false}, {"count": 29, "tags": [], "text": "Thanks Michael for the feedbacks and testing on this issue.\n\nCommitted in r1689325 and backport proposed to 2.4.x (including r1621453 and r1641376).", "is_private": false, "bug_id": 56729, "id": 183903, "time": "2015-07-06T08:25:00Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-07-06T08:25:00Z", "attachment_id": null}, {"count": 30, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 184043, "time": "2015-07-16T07:34:32Z", "bug_id": 56729, "creation_time": "2015-07-16T07:34:32Z", "is_private": false, "text": "Fixed in 2.4.16 (r1689922) and 2.2.30 (r1678698)."}]
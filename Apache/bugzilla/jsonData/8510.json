[{"attachment_id": null, "tags": [], "bug_id": 8510, "is_private": false, "count": 0, "id": 14706, "time": "2002-04-25T11:08:36Z", "creator": "mcconnell@apache.org", "creation_time": "2002-04-25T11:08:36Z", "text": "When aborting a forked java process the shutdown hook does not fire if the \nunderlying JDK is version 1.4.0 (1.4beta 3 and earlier are ok). The forked java \nprocess will continue running after the main build task has completed.  A \ndemonstration of this problem is included in a test application (source and \nbuildfile) available under http://home.osm.net/020423.html"}, {"count": 1, "tags": [], "text": "Steve,\ndoes this problem also arise when you run the java app from the command line? \nIt may be a java 1.4 issue, cos when ant runs stuff ina  new jvm, it just \nexecs java", "attachment_id": null, "id": 14816, "creator": "steve_l@iseran.com", "time": "2002-04-26T07:10:53Z", "bug_id": 8510, "creation_time": "2002-04-26T07:10:53Z", "is_private": false}, {"count": 2, "text": "1. running the demo app from the command line works fine \n2. running the demo app as a sub-process created by a parent \n   process where the parent is executed from the command line\n   works fine\n3. running the demo app from the Ant target <java ... fork=\"false\"> \n   works fine\n4. running the demo app from the Ant target <java ... fork=\"true\"> \n   fails with the subprocess still in existance after the parent\n   process has terminated\n\nGiven that process destruction happens when running from the command line and \ndoes not happen when running with the <java ... fork=\"true\"/> suggests that \nthis is an Ant bug and not a JVM bug (even through it feels like a JVM bug) - \nbottom line is that I have not been able to create the same fail condition \noutside of Ant.\n\nHave updated the demo on http://home.osm.net/020423.html to demonstrate this.\nOnce built the non-fail command line demo can be run using:\n\n   $ java -classpath test.jar Main\n   \nWith the following output:\n\n   main\n   MAIN: sub-process created: java.lang.Win32Process@f4a24a\n   MAIN: shutdown hook set\n\nThe hit ^C\n\n   MAIN: shutdown hook fired\n   MAIN: subprocess destroyed\n\nInvoking <ant fork=\"true\" ... > should result in similar behaviour.  I.e. the \nforked java sub-process should terminate - instead it continues until manually \ndestroyed using the task manager.\n", "creator": "mcconnell@apache.org", "attachment_id": null, "id": 14841, "time": "2002-04-26T14:32:18Z", "bug_id": 8510, "creation_time": "2002-04-26T14:32:18Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "Could you please try a recent nightly build of Ant?\n\nWe've added a \"ProcessDestroyer\" after the 1.4.1 release that tries to kill\nforked processes when Ant gets aborted.  I think this should fix your problem,\nif the shutdown hook inside the VM that is running Ant gets time to fire, that\nis.", "is_private": false, "id": 14842, "creator": "bodewig@apache.org", "time": "2002-04-26T14:57:22Z", "bug_id": 8510, "creation_time": "2002-04-26T14:57:22Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "mcconnell@apache.org", "is_private": false, "text": "Using Ant 1.5 alpha (CVS) results in the termination of the forked process \n(which is better) but this does not resolve the core problem.  The forked \nprocess shutdownhook is still not triggered.", "id": 14852, "time": "2002-04-26T16:46:23Z", "bug_id": 8510, "creation_time": "2002-04-26T16:46:23Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Just a note concerning Ant 1.5 status - when invoking <java fork=\"true\" ...> the\n1.5 version does handle cleanup of the forked process however the when using\n<java jar=\"whatever.jar\" fork=\"true\" ...> the process is not cleaned-up and\ncontinues to execute independently.", "is_private": false, "id": 15602, "creator": "mcconnell@apache.org", "time": "2002-05-07T01:36:46Z", "bug_id": 8510, "creation_time": "2002-05-07T01:36:46Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 8510, "attachment_id": null, "is_private": false, "id": 19558, "time": "2002-07-15T14:08:39Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-15T14:08:39Z", "text": "Does anyone has the slighest idea of what's going on here that avoid the \nshutdown hook to be triggered ? I can't find what could be the problem !\n\nThe last entry of Stephen also puzzles me, there is no difference in Ant \nbetween executing a java command with or without a jar, we are just building \nthe command line."}, {"count": 7, "tags": [], "bug_id": 8510, "attachment_id": null, "id": 19597, "time": "2002-07-16T13:37:32Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-16T13:37:32Z", "is_private": false, "text": "Concerning the last entry of the process continuing to run with -jar, it does \nnot happen under JDK 1.3.1 but only with JDK 1.4"}, {"count": 8, "tags": [], "text": "5003 seems like it could be related, but I've always viewed this specific \nproblem as a black hole of hell and wanted to stay as far away from the even \nhorizon as I could.\n\n8510 looks like it could be solved by this patch, however.", "attachment_id": null, "id": 19622, "creator": "Hal.Hildebrand@hellblazer.com", "time": "2002-07-16T15:45:08Z", "bug_id": 8510, "creation_time": "2002-07-16T15:45:08Z", "is_private": false}, {"count": 9, "tags": [], "text": "With regards to:\n\n> Does anyone has the slighest idea of \n> what's going on here that avoid the \n> shutdown hook to be triggered ? I can't \n> find what could be the problem !\n\nThe problem is that when the InterruptedException is caught and ignored in the \nwaitFor() method, the executing process is assumed to have completed and is \nremoved from the shutdown hook.  This is not the case when the thread is \ninterrupted.  The issue is that catching the InterruptedException, and \nsilently ignoring it, is acting just like the process exited normally.  The \nexecute() method has no way of knowing if the thread was interrupted - and \ntherefore the process is still executing - of if the process exited.  So when \nthe InterruptedException is thrown in the thread, and the waitFor() exits, it \njust removes the shutdown hook and assumes the process is done.  Therefore the \nprocess will just happily continue to execute and no one will ever kill it.", "attachment_id": null, "id": 19623, "creator": "Hal.Hildebrand@hellblazer.com", "time": "2002-07-16T15:49:34Z", "bug_id": 8510, "creation_time": "2002-07-16T15:49:34Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 8510, "attachment_id": null, "is_private": false, "id": 19624, "time": "2002-07-16T15:51:35Z", "creator": "Hal.Hildebrand@hellblazer.com", "creation_time": "2002-07-16T15:51:35Z", "text": "Shoot.  Wrong bug.  Sorry for the noise.  I *thought* I was responding to bug \n10345."}, {"count": 11, "text": "*** Bug 12796 has been marked as a duplicate of this bug. ***", "creator": "matteyamar@msn.com", "attachment_id": null, "id": 23981, "time": "2002-10-04T23:47:42Z", "bug_id": 8510, "creation_time": "2002-10-04T23:47:42Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 8510, "attachment_id": null, "id": 25037, "time": "2002-10-23T11:43:52Z", "creator": "Markus.Kieninger@jsoft.de", "creation_time": "2002-10-23T11:43:52Z", "is_private": false, "text": "I did some tests concerning the shutdown hook problem with jdk 1.4. \nHere are the results:\n\nshutdown hook works fine with:\n\njdk 1.3.x + application + no ant + windows (nt 4.0 + 2000)\njdk 1.3.x + application + no ant + linux\njdk 1.4.x + application + no ant + windows (nt 4.0 + 2000)\njdk 1.4.x + application + no ant + linux\njdk 1.3.x + application + ant 1.5.x (java + fork) + windows (nt 4.0 + 2000)\njdk 1.3.x + application + ant 1.5.x (java + fork) + linux\njdk 1.4.x + application + ant 1.5.x (java + fork) + linux\n\nshutdown hook does not work with:\n\njdk 1.4.x + application + ant 1.5.x (java + fork) + windows (nt 4.0 + 2000)\n\nI tried several jdk versions (1.3.0, 1.3.1, 1.4.0, 1.4.1) and ant versions\n(1.5.0, 1.5.1). Always with the result described above.\n\nSo I think they must have changed something in jdk 1.4.x (win) about the\nshutdown (hook) procedure, which is not integrated in ant so far. I don't think\nit is a bug in the jdk, because when I run the application without ant all works\nfine.\n\nMaybe one of you can verify my results and I hope this will help to solve the\nproblem.\n\n"}, {"count": 13, "tags": [], "bug_id": 8510, "attachment_id": null, "is_private": false, "id": 25111, "time": "2002-10-24T10:16:18Z", "creator": "luors@iii.org.tw", "creation_time": "2002-10-24T10:16:18Z", "text": "I make some experiments and make a \"guess\".\nMaybe the guess is wrong, but hope the other information\nwill help to solve the problem.\n\n\n == Experiment 1: use JDK to invoke MyProg ==\n\n\"MyProg\" is a program with shutdown hook installed.\nPress \"Ctrl+C\" to stop it.\n\n\"Yes\" means the showdown hook of \"MyProg\" is invoked.\n\njava.exe MyProg\n    JDK 1.3.1 Yes      (1.3.1_03-b03)\n    JDK 1.4.0 Yes      (1.4.0-b92)\n\n\n == Experiment 2: use Ant 1.5.1 to invoke MyProg ==\n\nRun \"MyProg\" with Ant. Press \"Ctrl+C\" to stop it.\n\nAnt 1.5.1 has its own shotdown hook (added by\nProcessDestroyer.java) which call java.lang.Process.destroy()\non the process of \"MyProg\".\n\n\"Yes\" means the showdown hook of \"MyProg\" is invoked.\n\nAnt 1.5.1 -> MyProg\n    JDK 1.3.1 *Yes*\n    JDK 1.4.0  No\n\n\n == Experiment 3: use \"Invoker\" to invoke MyProg ==\n\n\"Invoker\" is a program which launches \"MyProg\" with\nSystem.exec().\n\"Invoker\" has its own shotdown hook which call\njava.lang.Process.destroy() on the process of \"MyProg\".\n\n\"Yes\" means the showdown hook of \"MyProg\" been invoked.\n\njava.exe Invoker -> MyProg\n    JDK 1.3.1       JDK 1.4.0\n        0  No           0  No\n        1  No           1  No\n        2 *Yes*         2  No\n\n    case 0: Invoker call proc.destroy() directly\n            (not in its shutdown hook)\n    case 1: Invoker call proc.destroy() in its own\n            shutdown hook triggered when the\n            \"main\" thread completed.\n    case 2: Invoker call proc.destroy() in its own\n            shutdown hook triggered by Ctrl+C.\n\n\n == Code and Document ==\n\nOn Win32 systems java.lang.Process.destroy()\nmake system call TerminateProcess() in both\nJDK 1.3.1 and 1.4.0 which unconditionally\ncause a process to exit.\n(src\\win32\\native\\java\\lang\\Win32Process_md.c)\n\nIn the JavaDoc of java.lang.Runtime,\n  \"In rare circumstances the virtual machine may abort,\n   that is, stop running without shutting down cleanly.\n   This occurs when the virtual machine is terminated\n   externally, for example with the SIGKILL signal on\n   Unix or the TerminateProcess call on Win32.\".\n\n\n == My guess ==\n\nProcess.destroy() which calls TerminateProcess() should\ngive \"MyProg\" no chance to run its shutdown hook.\nThere are two exceptions: (marked with '*')\n\n    JDK 1.3.1 + Ant 1.5.1 + MyProg (with Ctrl+C)\n    JDK 1.3.1 + Invoker + MyProg (with Ctrl+C)\n\nI \"guess\" that JDK 1.3.1 also send \"Ctrl+C\" to MyProg\nwhich cause it to run the shutdown hook before killed\nby TerminateProcess() from Ant and Invoker. But I have\nno evidence.\n\n\n\n == Code: MyProg.java ==\n\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class MyProg\n{\n    public static void log(String s)\n    {\n        try\n        {\n            FileWriter fw = new FileWriter(\"MyProg.txt\", true);\n            fw.write(s + \"\\n\");\n            fw.flush();\n            fw.close();\n        } catch (IOException e) { }\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n        log(\"MyProg: main() : \" + System.getProperty(\"java.runtime.version\"));\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            public void run()\n            {\n                log(\"MyProg: hook invoked\");\n            }});\n        log(\"MyProg: hook installed\");\n        while (true) ;\n    }\n\n}\n\n\n == Code: Invoker.java ==\n\npublic class Invoker\n{\n    public static Process exec()\n    {\n        try\n        {\n            System.out.println(\"before exec\");\n            Process proc = Runtime.getRuntime().exec(\"java MyProg\");\n            System.out.println(\"after exec, sleep 5 sec\");\n            Thread.currentThread().sleep(5 * 1000);\n            System.out.println(\"ready\");\n            return proc;\n        } catch (Exception e) { e.printStackTrace(); return null; }\n    }\n\n    public static void addHook(final Process proc)\n    {\n        System.out.println(\"enter addHook\");\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            public void run()\n            {\n                System.out.println(\"Invoker: hook invoked\");\n                System.out.println(\"before destory\");\n                proc.destroy();\n                System.out.println(\"after destory\");\n            }});\n        System.out.println(\"leave addHook\");\n    }\n\n    public static void destroyDirectly()\n    {\n        Process proc = exec();\n        System.out.println(\"before destroy\");\n        proc.destroy();\n        System.out.println(\"after destroy\");\n    }\n\n    public static void destroyFromHook1()\n    {\n        Process proc = exec();\n        addHook(proc);\n    }\n\n    public static void destroyFromHook2()\n    {\n        Process proc = exec();\n        addHook(proc);\n        System.out.println(\"waiting for ctrl+c\");\n        while (true) ;\n    }\n\n\n    public static void main(String[] args) throws Exception\n    {\n        switch (Integer.parseInt(args[0]))\n        {\n            case 0 :\n                destroyDirectly();\n                break;\n            case 1 :\n                destroyFromHook1();\n                break;\n            case 2 :\n                destroyFromHook2();\n                break;\n\n        }\n    }\n}\n\n == build.xml ==\n \n<project name=\"A\" default=\"A\" basedir=\".\">\n    <target name=\"A\">\n        <java classname=\"MyProg\" fork=\"yes\">\n            <classpath>\n                <pathelement location=\".\"/>\n            </classpath>\n        </java>\n    </target>\n</project> "}, {"count": 14, "tags": [], "creator": "stevel@apache.org", "is_private": false, "text": "If 1.4.x really does use ::TerminateProcess() then that is kind of brutal and\npotentially dirty. I wonder if we can do some very low level stuff to work out\nexactly what goes on.\n\n", "id": 25141, "time": "2002-10-24T16:06:33Z", "bug_id": 8510, "creation_time": "2002-10-24T16:06:33Z", "attachment_id": null}, {"count": 15, "text": "Both JDK 1.3.? (I don't know the exact version) and JDK 1.4.0\nuse the same code to destroy() a process.\n\nJNIEXPORT void JNICALL\nJava_java_lang_Win32Process_destroy(JNIEnv *env, jobject process)\n{\n    jboolean exc;\n    jint handle = JNU_GetFieldByName(env, &exc, process, \"handle\", \"I\").i;\n    if (exc) {\n        return;\n    }\n    TerminateProcess((void *)handle, 1);\n}\n\nMaybe sometimes it returns before invoking ::TerminateProcess() ?\n\nP.S. Is it legal to post the code here?", "creator": "luors@iii.org.tw", "attachment_id": null, "id": 25297, "time": "2002-10-29T04:35:10Z", "bug_id": 8510, "creation_time": "2002-10-29T04:35:10Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "text": "I have resolved some aspects of this bug, although it mainly applies to Unix\nsystems (more on that in a minute).\n\nUnder Ant 1.5 under Linux, the ProcessDestroyer does not wait for the\nterminating processes to complete their shutdowns. If they have anything more\nthan a trivial shutdown process, it would get truncated as the Ant VM shuts\ndown. The ProcessDestroyer also blocked Execute.java in the remove() method as\nit held the lock on the processes object. So even if the process managed to\ngenerate output, it may not have made it to the Ant output log.\n\nUnder Windows and JDK 1.4, the process shutdown hooks are not fired. This is\nmarked by Sun as \"not a bug\". See\nhttp://developer.java.sun.com/developer/bugParade/bugs/4485742.html\nalthough http://developer.java.sun.com/developer/bugParade/bugs/4671966.html may\nbe able to change that.\n\nJDK 1.3 appears to fire the shutdown hook on Windows but it is something of an\nillusion as the shutdown is not allowed to complete. If you put this in the\ngiven Demo class' run method\n\n                System.err.println(\"DEMO shutdown hook fired\");\n                try {\n                    PrintWriter pw\n                        = new PrintWriter(new FileOutputStream(\"test.txt\"));\n                    Thread.currentThread().sleep(3000);\n                    pw.println(\"Test\");\n                    pw.close();\n                } catch (Exception e) {\n                }\n                System.err.flush();\n\nyou will find that test.txt is created but no content is written. This works\nunder Linux.\n\nNote that the use of output or error streams to determine if the shutdown hook\nhas fired or not is suspect. The above file based approach is more conclusive.\nThis is because the output generated may still be within a couple of Ant stream\nprocessing threads (daemons) which get terminated in the shutdown process.\n\nThe Main.java does not really demonstrate a problem. It gives no info about the\nfiring of the shutdown hook in the subprocess. In fact it has the same behaviour\nas Ant - the subprocess shutdown is not fired. It is indeed a JVM bug^H^H^Hfeature.\n\nI'm marking as fixed from Ant's point of view. You need to lobby Sun to address\nthe shutdown issues under windows.", "is_private": false, "id": 40700, "creator": "conor@apache.org", "time": "2003-07-15T07:23:55Z", "bug_id": 8510, "creation_time": "2003-07-15T07:23:55Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 8510, "is_private": false, "count": 17, "id": 42378, "time": "2003-08-08T03:41:07Z", "creator": "conor@apache.org", "creation_time": "2003-08-08T03:41:07Z", "text": "*** Bug 22026 has been marked as a duplicate of this bug. ***"}, {"count": 18, "tags": [], "bug_id": 8510, "attachment_id": null, "id": 68057, "time": "2004-12-07T17:54:56Z", "creator": "davesag@gmail.com", "creation_time": "2004-12-07T17:54:56Z", "is_private": false, "text": "I am using ant 1.6.2 and have a working test case on MacOSX that clearly shows that a shutdown hook \nis never invoked when you ctrl-c an app run from ant's java task."}, {"count": 19, "tags": [], "text": "Created attachment 13672\na small simple test case that shows the bug in action\n\nsee the readme in the zip file.", "is_private": false, "id": 68058, "creator": "davesag@gmail.com", "time": "2004-12-07T18:09:14Z", "bug_id": 8510, "creation_time": "2004-12-07T18:09:14Z", "attachment_id": 13672}, {"count": 20, "tags": [], "bug_id": 8510, "attachment_id": null, "id": 68061, "time": "2004-12-07T18:25:34Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-07T18:25:34Z", "is_private": false, "text": "I tested your example problem and saw the same thing under linux.\nHowever, I then read Conor's report\n\n\"Note that the use of output or error streams to determine if the shutdown hook\nhas fired or not is suspect. The above file based approach is more conclusive.\"\n\nSo, I changed the code to do:\n\tpublic class Shutter extends Thread {\n\t\tpublic void run() {\n//\t\t\tlog.debug(\"clean shutdown\");\n                    System.err.println(\"DEMO shutdown hook fired\");\n                    try {\n                        java.io.PrintWriter pw\n                            = new java.io.PrintWriter(\n                      new java.io.FileOutputStream(\"test.txt\"));\n                        Thread.currentThread().sleep(3000);\n                        pw.println(\"Test\");\n                        pw.close();\n                    } catch (Exception e) {\n                    }\n                    System.err.flush();\n                    System.out.println(\"clean shutdown...\");\n\t\t}\n\t}\n\nAnd noted that clean shutdown... was not seen, but the file was created\nand written to, and the DEMO shutdown hook fired message was seen.\nCan you make the above changes and see if they fix the problem?\n"}, {"count": 21, "tags": [], "text": "(In reply to comment #20)\nInteresting.  I made the changes you described and lo - the file is written but i get no consol output at \nall.\nThe reason i first came across this bug is that a project I am woring on opens a connection to an SMPP \nserver and the shutdown hook is supposed to close that connection if the user ctrl-c's the app.  this \nworks fine if i run it from a shell script but not from ant.\nI can see from my SMPP server logs that a connection is still left there dangling.\nIs there some work-around for this?", "is_private": false, "id": 68308, "creator": "davesag@gmail.com", "time": "2004-12-11T13:18:48Z", "bug_id": 8510, "creation_time": "2004-12-11T13:18:48Z", "attachment_id": null}, {"attachment_id": 13734, "tags": [], "bug_id": 8510, "is_private": false, "count": 22, "id": 68309, "time": "2004-12-11T13:25:48Z", "creator": "davesag@gmail.com", "creation_time": "2004-12-11T13:25:48Z", "text": "Created attachment 13734\nAn update to the test case that shows the dehaviour described by peter reilly\n\nthis works but raises more questions - ie what can and can not be expected to\nexecute in a shutdown hook when you expect the app to be run from ant and the\nuser is able to ctrl-c.\nperhaps the ant docs need to be updated to reflect this behaviour."}, {"count": 23, "tags": [], "bug_id": 8510, "attachment_id": null, "id": 68411, "time": "2004-12-13T18:55:01Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-13T18:55:01Z", "is_private": false, "text": "The writing to std output/error for forked processes are handled by\nthread objects reading the relativent streams. At shutdown time\nthese threads may be stopped before they have finished reading their\nstream - so it is a timing and flushing behaviour dependent what\nis actually written to the console.\n\nThis timing issue should not effect closing the connection to an SMPP\nserver. Maybe you could use the write to file techinque to debug your\nproblem. (Surely the connection should be closed automatticlly by the\nOS when the ant process ends?)"}, {"count": 24, "tags": [], "bug_id": 8510, "attachment_id": null, "is_private": false, "id": 121953, "time": "2008-10-28T07:03:18Z", "creator": "bodewig@apache.org", "creation_time": "2008-10-28T07:03:18Z", "text": "Closing it since the issues cited by Conor really point at a JDK not-a-bug.\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4671966 is still not closed AFAICS."}]
[{"count": 0, "tags": [], "creator": "dougapache@claar.org", "attachment_id": null, "text": "If a form does a POST, and the script that it calls outputs a large amount of\ndata without reading STDIN, apache will hang for 5 minutes.\nAn strace shows:\n\npoll\naccept -> 13\nread 13 -> \"POST /twiki/bin/save/...\"\npipe(14,15)\npipe(16,17)\npipe(18,19)\nclone -------------------------------------->Child\nclose 14,17,19                              dup(14,0)\n                                            dup(17,1)\n                                            dup(19,2)\n                                            exec(...twiki/bin/view)\nwrite 15, \"text=%23...\",5540)               write(1, \"Set-Cookie...\", 171)\nwrite 15, \"are%3A+%5C%0\",1444 -> EAGAIN     write(1, \"<!DOCTYPE html...\", 4096)\npoll(15, POLLOUT, 300000)\n\nThis can be duplicated with a simple script that prints a lot, and a POST that\nsends a lot.", "id": 88227, "time": "2006-04-18T21:29:46Z", "bug_id": 39342, "creation_time": "2006-04-18T21:29:46Z", "is_private": false}, {"count": 1, "text": "Created attachment 18129\nPerl script to send big POST to web server", "bug_id": 39342, "attachment_id": 18129, "id": 88228, "time": "2006-04-18T21:31:34Z", "creator": "dougapache@claar.org", "creation_time": "2006-04-18T21:31:34Z", "tags": [], "is_private": false}, {"count": 2, "text": "Created attachment 18130\nCGI script that outputs a bunch of data\n\nIf you uncomment the @l=<STDIN> line, then apache doesn't hang.", "bug_id": 39342, "is_private": false, "id": 88229, "time": "2006-04-18T21:35:16Z", "creator": "dougapache@claar.org", "creation_time": "2006-04-18T21:35:16Z", "tags": [], "attachment_id": 18130}, {"count": 3, "tags": [], "bug_id": 39342, "attachment_id": null, "text": "Here's a stack trace from the wait (I ran with gdb, did a control-C, then a\nstack trace):\n\n#0  0x009277a2 in _dl_sysinfo_int80 () from /lib/ld-linux.so.2\n#1  0x009fdc6d in poll () from /lib/tls/libc.so.6\n#2  0x0047656b in apr_poll (aprset=0xbfe50c40, num=1, nsds=0xbfe50c3c,\n    timeout=300000) at poll.c:130\n#3  0x0047696b in apr_wait_for_io_or_timeout (f=0x86bff28, s=0x0, for_read=0)\n    at waitio.c:54\n#4  0x0046c10d in apr_file_write (thefile=0x86bff28, buf=0x86b448a,\n    nbytes=0xbfe50cd8) at readwrite.c:209\n#5  0x0046b1f0 in apr_file_write_full (thefile=0x86bff28, buf=0x86b448a,\n    nbytes=5278, bytes_written=0x0) at fullrw.c:53\n#6  0x00b63cfd in cgi_handler (r=0x86bb4a0) at mod_cgi.c:877\n#7  0x0806767a in ap_run_handler (r=0x86bb4a0) at config.c:152\n#8  0x08067a45 in ap_invoke_handler (r=0x86bb4a0) at config.c:364\n#9  0x08064ec1 in ap_internal_redirect (\n    new_uri=0xfffffffc <Address 0xfffffffc out of bounds>, r=0x493e1)\n    at http_request.c:465\n#10 0x080651ea in ap_process_request (r=0x86b8a20) at http_request.c:262\n#11 0x08060d85 in ap_process_http_connection (c=0x8667408) at http_core.c:251\n#12 0x0806f9ae in ap_run_process_connection (c=0x8667408) at connection.c:43", "id": 88325, "time": "2006-04-20T16:52:10Z", "creator": "dougapache@claar.org", "creation_time": "2006-04-20T16:52:10Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jorton@redhat.com", "text": "Yes, that will cause a deadlock, since the CGI module will always write the\nrequest body to the script's stdin before trying to read the response from the\nstdout.   So scripts must always discard stdin before writing to stdout.", "id": 88350, "time": "2006-04-21T08:51:14Z", "bug_id": 39342, "creation_time": "2006-04-21T08:51:14Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 39342, "attachment_id": null, "text": "For what it's worth, Jeff Trawick pointed out this behavior in comment 15 on Bug\n22030, but referred to it as an \"issue to solve with mod_cgi[d]...\" even though\nit \"isn't something that many scripts have encountered....\"\n\n(See http://issues.apache.org/bugzilla/show_bug.cgi?id=22030#c15.)\n\nI hope I'm not making too much noise about an admittedly minor issue. (After\nall, servers are free to insist that scripts dispose of a big STDIN before\nwriting a big STDOUT -- the CGI spec doesn't forbid it.) But, as Jeff pointed\nout, removing this limitation would permit some possibly interesting cgi\nbehavior. And besides, the product would end up being that much more robust.\n\nPerhaps, rather than closing it as invalid, it would be more appropriate to\nlower this bug's priority or change its severity to \"enhancement\".\n\nIf not remove the limitation, another useful resolution would be simply to\ndocument how big \"big\" is for the benefit of CGI programmers.", "id": 97178, "time": "2006-12-21T19:05:51Z", "creator": "tomory+apache@gmail.com", "creation_time": "2006-12-21T19:05:51Z", "is_private": false}]
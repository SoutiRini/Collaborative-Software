[{"count": 0, "tags": [], "bug_id": 44157, "attachment_id": null, "id": 112428, "time": "2008-01-01T23:03:35Z", "creator": "oberhaus@gmail.com", "creation_time": "2008-01-01T23:03:35Z", "is_private": false, "text": "log4j catches and ignores InterruptedIOException's, causing code that uses log4j to freeze under \ncertain conditions.\n\nWhen the exception InterruptedException is caught, special care must be taken. If InterruptedException \nis caught and ignored, and the thread does not exit, other code that interrupted that thread will not \nfunction correctly.\n\nThe same is true of InterruptedIOException (which derives from IOException). This can be thrown from \nany java.nio blocking method, or can be thrown from java.io methods on Solaris. An \nInterruptedIOException must be treated the same as an InterruptedException; either the exception \nshould be allowed to continue up the call stack, or something special must be done.\n\nOne example of something special is to call the following:\n\nThread.currentThread().interrupt();\n\nI propose that everywhere in log4j that IOException is caught, a special catch of InterruptedIOException \nis done and Thread."}, {"count": 1, "tags": [], "bug_id": 44157, "is_private": false, "text": "Here are some documents that support my suggestion:\n\nhttp://java.sun.com/j2se/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html\nHow do I stop a thread that waits for long periods (e.g., for input)?\n\nhttp://www-128.ibm.com/developerworks/java/library/j-jtp05236.html\nDon't swallow interrupts\n\n", "id": 112430, "time": "2008-01-01T23:05:16Z", "creator": "oberhaus@gmail.com", "creation_time": "2008-01-01T23:05:16Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44157, "attachment_id": null, "id": 119277, "time": "2008-08-02T13:57:52Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T13:57:52Z", "is_private": false, "text": "I think this should be carefully considered before next release."}, {"count": 3, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "is_private": false, "id": 119799, "time": "2008-08-13T14:39:32Z", "bug_id": 44157, "creation_time": "2008-08-13T14:39:32Z", "text": "Committed patch in rev 685684.  Appreciate feedback."}, {"count": 4, "tags": [], "bug_id": 44157, "is_private": false, "id": 119806, "creation_time": "2008-08-13T16:40:00Z", "time": "2008-08-13T16:40:00Z", "creator": "oberhaus@gmail.com", "text": "This is great, thank you! I took a look at the change, and here's what I observed:\n\n* java/org/apache/log4j/PropertyConfigurator.java\n* java/org/apache/log4j/xml/DOMConfigurator.java\nThere are a few catch(Exception) and catch(Throwable) that could also be hiding InterruptedException.\n\n* java/org/apache/log4j/jmx/AbstractDynamicMBean.java\n* java/org/apache/log4j/jmx/Agent.java\n* java/org/apache/log4j/jmx/AppenderDynamicMBean.java\n* java/org/apache/log4j/jmx/HierarchyDynamicMBean.java\n* java/org/apache/log4j/jmx/LayoutDynamicMBean.java\nThere are couple of catch(Exception) here that do nothing but printStackTrace(). This hides InterruptedException and InterruptedIOException, but I suspect that the intent of those catches is that they never happen... But there are still others that appear to be normal operation and will hide InterruptedException.\n\n* java/org/apache/net/JMSAppender.java\nThere's a catch(Exception) in the close() method\n\n* java/org/apache/net/JMSSink.java\nThere's a catch(Exception) in the constructor\n\n* java/org/apache/net/SMTPAppender.java\nIn sendBuffere there's a catch(Exception)\n\n* java/org/apache/net/SocketAppender.java\nIn the connect() method there's a catch(IOException) that might call errorHandler.error, but in other cases will not, in which case the InterruptedException will be lost...\n\n* java/org/apache/net/SocketHubAppender.java\nThere are catch(IOException) in cleanup() and append() that will hide InterruptedIOException.\n\n* java/org/apache/net/TelnetAppender.java\nThere are a few ignored catch(Exception) and one ignored catch(InterruptedException)\n\n* java/org/apache/log4j/spi/LoggingEvent.java\nThere's a catch(Exception) here\n\n* java/org/apache/log4j/varia/ExternallyRolledFileAppender.java\nThe class HUP extends Thread and checks for isInterrupted(), but the catch(Exception) block will effectively eat any that are thrown. Also there are a couple other catch(Exception) in that file.\n\n* java/org/apache/log4j/varia/Roller.java\nThere's a catch(IOException) here too, but it calls System.exit(2).\n\n* java/org/apache/log4j/chainsaw/...\nThere are several files in here that catch(Exception); however, this isn't nearly as critical as the InterruptedException's lost above, because chainsaw is usually its own standalone tool.\n\n* java/org/apache/log4j/lf5/...\nLike chainsaw, this probably isn't as important as the above, as it's a standalone tool.\n\n", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44157, "is_private": false, "id": 119811, "creation_time": "2008-08-14T00:58:47Z", "time": "2008-08-14T00:58:47Z", "creator": "carnold@apache.org", "text": "org.apache.log4j.lf5 and .chainsaw are no longer maintained but are provided simply for compatibility with earlier jars.  Probably would not hurt anyone if they disappeared, but can't say that for certain so they have to stay.  However, don't see any need to change them.  Chainsaw 2 was spun out from log4j and is a different beast than the org.apache.log4j.chainsaw classes in the jar.\n\nCommitted round two in 685796.\n\n\n", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 44157, "is_private": false, "id": 119845, "creation_time": "2008-08-14T15:25:57Z", "time": "2008-08-14T15:25:57Z", "creator": "oberhaus@gmail.com", "text": "Thanks again for your change. Looks great...\n\nFirst, I have to admit that my feedback in Comment #4 was based on my\nreviewing an older copy of log4j, not the latest trunk. Please accept\nmy apologies for this... I am rectifying that now by checking out the\nlatest trunk and looking it over.\n\nHere is what I've observed:\n\n* Ignoring issues in contribs/...\n* Ignoring issues in examples/...\n* Ignoring issues in tests/...\n* Ignoring chainsaw and lf5 (thanks for the info in Comment #5)\n\n* catch(Throwable), catch(Exception), catch(InvocationTargetException)\nThere are cases I've found of catch(InvocationTargetException), and of\ncatch(Throwable) and catch(Exception). In the case where\nInvocationTargetException is thrown, the result of getTargetException\ncould be an InterruptedException or an InterruptedIOException. Also,\nthe Throwable or Exception could be InterruptedException or\nInterruptedIOException, or an InvocationTargetException with\nInterruptedException or InterruptedIOException in\ngetTargetException. Perhaps a utility method could be used (similar to\nErrorHandler.error) that analyzes all of these cases.\n\nNote that I now realize I should audit my own code for these cases, as\nI also use Method.invoke and catch(InvocationTargetException)...\n\nHere's a list of the places where I found either catch(Throwable),\ncatch(Exception) or catch(InvocationTargetException) and it seemed\nthat one of these exceptions was possible (I'm ignoring cases where\nThrowable/Exception couldn't include one of the 3 above exceptions):\n\njava/org/apache/log4j/config/PropertyGetter.java:80\njava/org/apache/log4j/config/PropertySetter.java:145\njava/org/apache/log4j/config/PropertySetter.java:229\njava/org/apache/log4j/helpers/Loader.java:115\njava/org/apache/log4j/helpers/Loader.java:175\njava/org/apache/log4j/helpers/OptionConverter.java:233\njava/org/apache/log4j/helpers/OptionConverter.java:331\njava/org/apache/log4j/jmx/Agent.java:85\njava/org/apache/log4j/jmx/AppenderDynamicMBean.java:254\njava/org/apache/log4j/jmx/AppenderDynamicMBean.java:310\njava/org/apache/log4j/jmx/LayoutDynamicMBean.java:192\njava/org/apache/log4j/jmx/LayoutDynamicMBean.java:250\njava/org/apache/log4j/net/SocketNode.java:106\njava/org/apache/log4j/spi/LocationInfo.java:170\njava/org/apache/log4j/spi/LoggingEvent.java:441\njava/org/apache/log4j/xml/DOMConfigurator.java:406\n\n\n* java/org/apache/log4j/net/SocketHubAppender.java:374\nIgnored InterruptedException\n\n* java/org/apache/log4j/net/TelnetAppender.java:108\nIgnored InterruptedException\n\n* java/org/apache/log4j/net/SocketHubAppender.java:428\nignored InterruptedIOException; the comment says that it's a timeout,\nbut a timeout will usually cause SocketTimeoutException.\n\n", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 44157, "attachment_id": null, "id": 119850, "time": "2008-08-14T23:01:19Z", "creator": "carnold@apache.org", "creation_time": "2008-08-14T23:01:19Z", "is_private": false, "text": "Applied everything in comment 6 in rev 686149 except:\n\n> java/org/apache/log4j/net/SocketHubAppender.java:428\n> ignored InterruptedIOException; the comment says that it's a timeout,\n> but a timeout will usually cause SocketTimeoutException.\n\nSocketTimeoutException was added in JDK 1.4 and extends InterruptedIOException.  The only way to catch the timeout JDK 1.3 and earlier is to catch the InterruptedIOException.  I think the logic is doing what it needs to do.\n\nThere is the unlikely possibility that InstantiationExceptions are also masking InterruptedExceptions or InterruptedIOExceptions however InstantiationException.getCause() was added in JDK 1.4.  I do not feel that it is worth doing a reflective call to check for the underlying exception."}, {"count": 8, "tags": [], "bug_id": 44157, "text": "This is great, thanks so much for your changes.\n\nI forget that log4j has to deal with older versions of the JVM; thanks for watching out for that and letting me know. And thanks for pointing out InstantiationException; and the approach to treating it is fair.\n\nI'll be waiting for the next release of log4j that contain these changes... Thanks again!\n\n", "id": 119851, "time": "2008-08-14T23:36:28Z", "creator": "oberhaus@gmail.com", "creation_time": "2008-08-14T23:36:28Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 44157, "text": "*** Bug 47401 has been marked as a duplicate of this bug. ***", "id": 128212, "time": "2009-06-23T12:50:32Z", "creator": "gscokart@gmail.com", "creation_time": "2009-06-23T12:50:32Z", "is_private": false, "attachment_id": null}]
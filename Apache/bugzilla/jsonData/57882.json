[{"count": 0, "tags": [], "creator": "geoff.groos@empowerops.com", "attachment_id": null, "text": "As a developer and POI user I want to be able to append sheets to an existing very large workbook as quickly as possible so that I can allow my application users to update existing workbooks easily\n\nSpecifically I am looking for the ability to point POI at a very large workbook and say 'add these sheets to it' without having to deal with any of the already existing content in that workbook. If you would humor a little bit of feature creep and speculative development: I suspect many users would appreciate a mode whereby they can append rows to an existing sheet.\n\nCurrently the only method (given a small heap space) to do this would be to use the XSSF workbook with a SAX driver and lazy reading scheme, streaming its content to 'the front' of an SXSSF workbook, such that all the contents of the existing workbook can be put into the SXSSF instances file buffer. Once that (long running) task is finished, I can append any new data to the back of that SXSSF workbook.\n\nWorth noting, that while I'm pretty sure this strategy would work, after a 20 minute implementation I haven't got it working: creating my XSSF workbook with the package object in READ mode appears to do some amount of fairly aggressive prefetching, which is causing heap space errors.", "id": 182787, "time": "2015-05-01T17:39:43Z", "bug_id": 57882, "creation_time": "2015-05-01T17:39:43Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "apache@gagravarr.org", "text": "If you just want to add sheets, then as long as those sheets have no external references, it should be fairly easy. Open the destination OPCPackage, and read the workbook stream in via xmlbeans (it's small). Open the OPCPackage holding your sheets to add, create a part in the destination, then copy the contents over of the sheet part. Add the relation for the new sheet, and use xmlbeans to add a reference to the new sheet with that relation. Save!\n\nI'm not sure if this counts as in-scope for SXSSF or not, but I could certainly see value in writing it up as something for the examples directory for now at least. If you do get it working, please contribute it back as such!", "id": 182788, "time": "2015-05-01T17:47:21Z", "bug_id": 57882, "creation_time": "2015-05-01T17:47:21Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 57882, "text": "I've never worked with the OPCP package so I'm only understanding your suggestion vaguely, but I'll see what I can do and if I come up with something elegant I'll get it back to you guys.\n\nRight now the issue that would implement this feature on my side is blocked by another feature request I've got with JavaFX (https://javafx-jira.kenai.com/browse/RT-40703), so I'm not going to make any forward progress on this for some time.\n\nIn the mean time you I'd be happy to turn this issue into a 'add documentation on how to do appending sheets to large workbooks' and leave it open until I get around to implementing it, or simply closing it as WONT-FIX.", "id": 182789, "time": "2015-05-01T18:14:22Z", "creator": "geoff.groos@empowerops.com", "creation_time": "2015-05-01T18:14:22Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 57882, "attachment_id": null, "id": 191668, "time": "2016-06-15T11:01:47Z", "creator": "onealj@apache.org", "creation_time": "2016-06-15T11:01:47Z", "is_private": false, "text": "Any updates on the JavaFX bug or suggested documentation (or example code https://svn.apache.org/viewvc/poi/trunk/src/examples/)"}, {"count": 4, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Keeping this on needinfo based on previous comment.", "id": 193175, "time": "2016-08-18T14:20:38Z", "bug_id": 57882, "creation_time": "2016-08-18T14:20:38Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "onealj@apache.org", "text": "A more general solution to the memory problem is to lazy load sheets and allow sheets to be swapped between disk and memory. I'm guessing this is how Microsoft Excel keeps its memory footprint from exploding on workbooks with thousands of sheets.", "id": 193625, "time": "2016-09-11T00:50:48Z", "bug_id": 57882, "creation_time": "2016-09-11T00:50:48Z", "tags": [], "is_private": false}]
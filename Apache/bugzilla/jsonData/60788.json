[{"count": 0, "tags": [], "bug_id": 60788, "is_private": false, "text": "Under some rare circumstances it looks like Tomcat-8 is keeping quotes around Cookie values where it shouldn't. It seems to be associated to the presence of a $Version=1 token in the request's Cookie header. I noticed this behaviour in a real world application's log with the following request:\n\nUser-Agent: Dalvik/2.1.0 (Linux; U; Android 5.1; A2 Build/LMY47I)\nCookie: $Version=\"1\"; userId=\"foo\";$Path=\"/\";$Domain=\"www.example.org\"\n\nMy application would read \"foo\" (including quotes) were it it actually should be foo without quotes.\n\nSkimming through RFCs 2109, 2965 and 6265 a value may be enclosed with quotes. But I'm no expert on this, I just skimmed through the RFCs by looking at the production rules and searching for the term \"quote\" to see if there are any exeptions. For me, this request looks valid and the parsed Cookie value should not contain quotes.\n\nI created this SSCCE where the tests demonstrate the issue:\nhttps://github.com/spring-projects/spring-boot-issues/pull/63/files\nIn the tests you can see that it only keeps quotes if the request contains a $Version=1 token. Without that token, quotes are removed.\n\nAs you can see it's a Spring Boot application, but digging through the code, I couldn't find any Cookie parsing code in Spring. They use the servlet API, which is effectivly provided by an embedded Tomcat-8.5.11.", "id": 197317, "time": "2017-02-28T16:52:43Z", "creator": "markus@malkusch.de", "creation_time": "2017-02-28T16:52:43Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60788, "is_private": false, "text": "I've converted the provided cookie header into a Tomcat test case and the value is returned unquoted with both the Rfc6265CookieProcessor and the LegacyCookieProcessor.\n\nThere is variation for the path and the domain. They are returned unquoted with the Legacy processor but quoted with the RFC6265 processor.\n\nIt looks like there is something odd going on with your SSCCE.", "id": 197341, "time": "2017-03-01T14:51:08Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T14:51:08Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "markus@malkusch.de", "text": "Thanks for your effort. I'll then will reopen the ticket on Spring's side as it's more likely an issue there. In your testcase, did you also use Tomcat-8.5.11?", "id": 197346, "time": "2017-03-01T15:57:20Z", "bug_id": 60788, "creation_time": "2017-03-01T15:57:20Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 60788, "attachment_id": null, "id": 197347, "time": "2017-03-01T16:06:53Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T16:06:53Z", "is_private": false, "text": "I tested 9.0.x trunk and 8.5.x trunk. Both worked as expected.\n\nPersonally, I'd start with your test case and look at exactly what header values are being sent. I'd be surprised if Spring Boot is playing a role in Cookie handling."}, {"count": 4, "tags": [], "bug_id": 60788, "text": "Actually I also don't think Spring is messing around with Cookie parsing, but something is. The test cases are fine. I double checked by comparing Tomcat's log on the receiver side. Tomcat receives the Cookie header as sent by the test cases. I'll start the debugger and come back when I found the cause.", "id": 197348, "time": "2017-03-01T16:14:27Z", "creator": "markus@malkusch.de", "creation_time": "2017-03-01T16:14:27Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60788, "text": "So I debugged the request:\nI enter org.apache.catalina.connector.Request.parseCookies()\nwhich goes into org.apache.tomcat.util.http.Rfc6265CookieProcessor.parseCookieHeader(MimeHeaders, ServerCookies)\nMimeHeaders.toString() shows the cookie from the test case:\n=== MimeHeaders ===\ncookie = $Version=\"1\"; foo=\"bar\";$Path=\"/\";$Domain=\"www.example.org\"\n\nWhen Request.parseCookies() is finished I see that Request.coyoteRequest.serverCookies contains one Cookie with the value \"bar\" (including quotes). No Spring involved so far. However I can't exculde if Spring is configuring something to create this behaviour.", "id": 197350, "time": "2017-03-01T16:37:00Z", "creator": "markus@malkusch.de", "creation_time": "2017-03-01T16:37:00Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 60788, "attachment_id": null, "text": "Let me take a closer look.", "id": 197351, "time": "2017-03-01T17:13:24Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T17:13:24Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 60788, "is_private": false, "text": "I looked also a bit deeper. Parsing that header enters org.apache.tomcat.util.http.parser.Cookie.readQuotedString(ByteBuffer), which if I understand correctly will always return the value including the quotes (start contains the position with the first quote). And from there on I didn't find anything which would remove the quotes. It looks almost as this was intentionally.", "id": 197353, "time": "2017-03-01T18:06:01Z", "creator": "markus@malkusch.de", "creation_time": "2017-03-01T18:06:01Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 60788, "attachment_id": null, "text": "Also please let me know if you agree that I can finally close the issue on Spring's side.", "id": 197354, "time": "2017-03-01T18:12:22Z", "creator": "markus@malkusch.de", "creation_time": "2017-03-01T18:12:22Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 60788, "text": "Definitely not a Spring issue.", "id": 197355, "time": "2017-03-01T18:44:22Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T18:44:22Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 60788, "text": "Progress. The quotes are retained and the unit test is removing them before comparing the actual and expected values. That also looks very deliberate. I need to remind myself why that is the case.\n\nThe handling of cookies has a long history. A summary of a good chunk of it can be found at https://wiki.apache.org/tomcat/Cookies", "id": 197356, "time": "2017-03-01T18:53:40Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T18:53:40Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 60788, "is_private": false, "text": "Yes, I saw that wiki page already and it feels like some hair got lost on implementing that.\n\nLet me know when you remember the reason and also if you plan to keep it like that. For me it's not a big deal to remove the quotes in my application. It happens very rarely, but still I was very surprised when I saw that and I think it would be better for future developers (or those who didn't notice that yet) if Tomcat would remove those quotes.", "id": 197358, "time": "2017-03-01T19:05:23Z", "creator": "markus@malkusch.de", "creation_time": "2017-03-01T19:05:23Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 60788, "is_private": false, "text": "This particular behaviour relates to exactly what should be presented to, and returned from, the Servlet API. The Servlet spec is silent on this issue.\n\nWhat the Tomcat developers opted for was the general aim of symmetric, consistent round-trip behaviour. For any valid value it should be possible to create a Cookie with a given value, add it to the response and then retrieve the same value from the next request.\n\nFor RFC 2109 cookies (anything with an explicit version of 1 or 0)\n- unquoted values that require quoting to be valid are automatically quoted and escaped to make them valid\n- any quotes and escaping in received values is retained.\n\nBecause of the various edge cases around quoting RFC2109 cookies, keeping the values as quoted made handling simpler and less likely to do the wrong thing.\n\nThe quotes are always removed from received RFC 6265 cookies (anything without an explicit version of 1 or 0). Tomcat also strips quotes before generating the Cookie header for RFC 6265 cookies.\n\nBecause there is no escaping in RFC 6265 and because quotes are not allowed in values, removing them was much simpler (and generally is what applications expect).\n\nThere are a lot of edge cases in all of this and no single solution that works perfectly for everyone. The current behaviour has evolved over a long period of time to a solution that works for most users, most of the time and configuration options to cover the majority of edge cases. As such, changes are unlikely but not impossible (e.b. bug 60627). Ultimately, the last major refactoring added the CookieProcessor interface which enables any user to essentially completely customise the cookie handling on a per application basis.", "id": 197359, "time": "2017-03-01T19:56:36Z", "creator": "markt@apache.org", "creation_time": "2017-03-01T19:56:36Z", "attachment_id": null}, {"count": 13, "attachment_id": null, "creator": "markus@malkusch.de", "text": "Then let me add more details to the described case: The intended symetric round trip behaviour was not given. The Cookie was initially created with the Servlet API (containing only alphanumeric characters), which sends a Set-Cookie header without quotes (Set-Cookie: userId=foo;Max-Age=15552000;path=/).\n\nIt was the user agent (Dalvik/2.1.0 (Linux; U; Android 5.1; A2 Build/LMY47I)) which then continued to send it back with quotes. I couldn't find anything in the related RFCs which forbids this, so I assume it's a possible and valid behaviour.\n\nI think it's wrong in this case to expose those quotes to the application programmer. It is unexpected and leads to errors in application.\n\nHowever it is currently a rare case. I observe it once every 5k requests. Application programmers can easily mitigate the issue themselves, if they only knew.", "id": 197362, "time": "2017-03-01T20:39:21Z", "bug_id": 60788, "creation_time": "2017-03-01T20:39:21Z", "tags": [], "is_private": false}]
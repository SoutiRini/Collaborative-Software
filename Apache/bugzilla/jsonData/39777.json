[{"count": 0, "tags": [], "bug_id": 39777, "text": "This patch isn't really meant to be applied... Rather to be reviewed by\ninterested parties to check if I'm not wrong. Changelog:\n* javadocs for the Knuth line- and page-breaking algorithms. Some items are\nmarked with double question marks because I haven't found out yet what is their\npurpose. I will probably find eventually, but if anybody has immediate hints\nthey will be welcome.\n* some methods have been marked deprecated because AFAICT they are not called\nanywhere. If this is agreed I'll remove them in my next patch\n* bugfix? In the last for loop of the method\nlayoutmgr.PageBreakingAlgorithm.noBreakBetween I think the exit condition should\nbe a strict comparison ('<' instead of '<='). Confirmation?\n* the javadoc comments for some methods have been removed because they will\ninherit them from their super-class\n* some checkstyle fixes", "id": 90061, "time": "2006-06-11T15:57:35Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-06-11T15:57:35Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 39777, "attachment_id": 18447, "id": 90062, "time": "2006-06-11T16:00:27Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-06-11T16:00:27Z", "is_private": false, "text": "Created attachment 18447\nproposed patch"}, {"count": 2, "tags": [], "bug_id": 39777, "attachment_id": null, "id": 90098, "time": "2006-06-12T12:45:10Z", "creator": "jeremias@apache.org", "creation_time": "2006-06-12T12:45:10Z", "is_private": false, "text": "(In reply to comment #0)\n> This patch isn't really meant to be applied... Rather to be reviewed by\n> interested parties to check if I'm not wrong. Changelog:\n> * javadocs for the Knuth line- and page-breaking algorithms. Some items are\n> marked with double question marks because I haven't found out yet what is their\n> purpose. I will probably find eventually, but if anybody has immediate hints\n> they will be welcome.\n\nKnuthBlockBox:\nbpdim seems to be used in concert with the proprietary display-align=\"fill\"\nvalue Luca implemented. See AbstractBreaker.optimizeLineLength(). If I\nunderstand it right it is somehow used to make sure all the pages have more or\nless the same amount of content (in bpd).\npos and bAux are defined in ListElement/KnuthElement.\n\nBreakingAlgorithm:\nalignment: EN_BEFORE is not used. EN_START is used instead, since the class is\nused in both ipd and bpd. EN_BEFORE is mapped into EN_START. Actually, alignment\nuses a slightly different set of value than the FO properties, so reusing the\ninteger constants may not be the best thing, but we're not under Java 5, yet,\nwhere we could use enums.\nbFirst is used for the text-indent property so only the first paragraph of a\nblock is indented. See block_text-indent.xml.\npartOverflowRecovery is used in page breaking to defer an element which would\noverflow the available BPD to the next page if it's the only element in a part\n(=line or page).\n\n> * some methods have been marked deprecated because AFAICT they are not called\n> anywhere. If this is agreed I'll remove them in my next patch\n\n+1\n\n> * bugfix? In the last for loop of the method\n> layoutmgr.PageBreakingAlgorithm.noBreakBetween I think the exit condition should\n> be a strict comparison ('<' instead of '<='). Confirmation?\n\nnot sure. :-(\n\n> * the javadoc comments for some methods have been removed because they will\n> inherit them from their super-class\n\nI think Checkstyle will bark about that. If you do Ctrl-J in Eclipse, you get an\nautomatic @see entry which satisfies Checkstyle. @inheritDoc does not work in\nevery Java version.\n\n> * some checkstyle fixes\n\nHTH"}, {"count": 3, "tags": [], "bug_id": 39777, "text": "Created attachment 18456\nUpdated patch, whith some additions and corrections\n\nI think this patch may be applied. It contains new javadoc comments and adds\nsome precisions to previous ones. Deprecated elements have been removed.", "id": 90150, "time": "2006-06-13T16:03:01Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-06-13T16:03:01Z", "is_private": false, "attachment_id": 18456}, {"count": 4, "tags": [], "bug_id": 39777, "text": "(In reply to comment #3)\n> Created an attachment (id=18456) [edit]\n> Updated patch, whith some additions and corrections\n> \n> I think this patch may be applied. It contains new javadoc comments and adds\n> some precisions to previous ones. Deprecated elements have been removed.\n\nPatch applied. Thank you! Precious work for anyone who wants to dive in here.\nhttp://svn.apache.org/viewvc?rev=414135&view=rev", "id": 90186, "time": "2006-06-14T07:49:25Z", "creator": "jeremias@apache.org", "creation_time": "2006-06-14T07:49:25Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 39777, "text": "Created attachment 18617\nFirst patch for before-floats implementation\n\nBasic implementation of before-floats. Known problems are:\n* bug when the whole normal content is typeset and there are both footnotes and\nfloats left to be placed;\n* floats too big to even fit on one page alone are not handled yet;\n* the keep-with-previous property for the generated inline anchor-area is not\nimplemented;\n* some clean-up in LayoutManagers should be possible;\n* others that I may have missed...\n\nChangelog:\n* Created a breaking subpackage where, if this is agreed, all classes related\nto the Knuth approach will eventually be placed.\n* Created an OutOfLineRecord class for dealing with both before-floats and\nfootnotes. It is basically made of code extracted from PageBreakingAlgorithm\nthat was related to footnote handling. Most of it could also be used for\nfloats.\n\n(pending: documentation and testcases)", "id": 91409, "time": "2006-07-19T10:13:19Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-07-19T10:13:19Z", "is_private": false, "attachment_id": 18617}, {"count": 6, "tags": [], "bug_id": 39777, "attachment_id": null, "id": 91511, "time": "2006-07-23T19:47:14Z", "creator": "jeremias@apache.org", "creation_time": "2006-07-23T19:47:14Z", "is_private": false, "text": "I finally had a chance to take a first look. What I've seen so far looks pretty\nnice. A first simple test behaved as would be expected. Making a before-float\ntoo big to fit on a page (although there are break points inside the content)\nresults in an OutOfMemoryError (probably due to an infinite loop).\n\nIt would be good if you would write a set of test cases for before-floats as\nyour next task. This is to document what works and what doesn't and to give you\nand us more confidence when doing further chances in the code.\n\nFinally, would you compile a list of classes you propose to move into the\n\"breaking\" package? The idea itself is worth investigating since the layoutmgr\npackage has already grown rather big again.\n\nWhat we need to decide now is whether to put the changes in a branch until they\nstabilize or if we put it in Trunk. I'd prefer a branch for now so in case I\nhave time to finish the work on 0.93, we don't have any problems from this end.\n\nKeep up the good work. This looks very promising."}, {"count": 7, "tags": [], "text": "This is a good piece of work. A few remarks:\n\n1. Copyright year on new classes should be only 2006.\n\n2. Wiki page: The argument for an inner class in bullet 3 only refers\n   to an object inner class. Therefore contradicts bullet 4, a static\n   inner class, and is invalid.\n\n3. fo:float seems to be the only FO that can be placed in inline and\n   block content. This causes a problem because FOP distinguishes\n   between inline and block LMs rather much. I do not think that this\n   problem needs to be solved in this project. It should be fine to\n   make an implementation which works for inline fo:float FOs.\n\n4. Infos is not correct english; better call it\n   ProgressInfo. cumulatedLengths is better changed to\n   cumulativeLengths.\n\n5. The implementation does not use the max and min property of the BPD\n   of a float. In a text with little stretch and shrink, e.g. an\n   adapted version of the test file footnote_basic.xml, there is no\n   possibility to place the floats with less than infinite badness,\n   and they are moved towards the end of the page sequence.\n\n6. The OutOfLineRecord.getFootnoteSplit and\n   OutOfLineRecord.getFloatSplit methods suggest that there is room\n   for two subclasses. It would be nice if the two conditional blocks\n   in PageBreakingAlgorithm.computeDifference, if (floats.existing())\n   and if (footnotes.existing()) could be merged, and the difference\n   in the logic be moved to the footnotes and floats objects. But that\n   is finishing touch.\n\n", "attachment_id": null, "id": 91554, "creator": "spepping@apache.org", "time": "2006-07-24T20:21:38Z", "bug_id": 39777, "creation_time": "2006-07-24T20:21:38Z", "is_private": false}, {"count": 8, "tags": [], "text": "(In reply to comment #7)\n\nThanks for your comments, Simon. A few answers:\n\n> 2. Wiki page: The argument for an inner class in bullet 3 only refers\n>    to an object inner class. Therefore contradicts bullet 4, a static\n>    inner class, and is invalid.\n\nWell, the private fields of any ProgressInfo instance are directly \naccessible within OutOfLineRecord. This avoids using getter and setter \nmethods everywhere in OutOfLineRecord, for the progressInfo field as \nwell as the prevProgress parameters of the get[Footnote|Float]Split \nmethods. That's what I meant.\n\n\n> 3. fo:float seems to be the only FO that can be placed in inline and\n>    block content. This causes a problem because FOP distinguishes\n>    between inline and block LMs rather much. I do not think that this\n>    problem needs to be solved in this project. It should be fine to\n>    make an implementation which works for inline fo:float FOs.\n\nOk, noted. On the tests I've done this seems to work, but I don't know \nif it will in all cases. I think the solving of this problem may be done \ntogether with the implementation of the keep-with-previous property for \nthe anchor element. I put it on my TODO-list.\n\n\n> 4. Infos is not correct english; better call it\n>    ProgressInfo. cumulatedLengths is better changed to\n>    cumulativeLengths.\n\nThanks, always glad to improve my english ;-)\n\n\n> 5. The implementation does not use the max and min property of the BPD\n>    of a float. In a text with little stretch and shrink, e.g. an\n>    adapted version of the test file footnote_basic.xml, there is no\n>    possibility to place the floats with less than infinite badness,\n>    and they are moved towards the end of the page sequence.\n\nYes. If I'm correct the shrink/stretch capabilities of footnotes aren't \nconsidered either. More generally there is a problem with too short \nnodes (considered as such because no stretching is possible), which are \nhandled separately from the other nodes. The algorithm may prefer a \nnormal node with a deferred float instead of a \"too short\" node with the \nfloat on the same page.\nI'm thinking about an improved algorithm which would handle such cases. \nI think I will give some ideas on the Wiki page soon, after I've \nsubmitted testcases. But before implementing it I'll perhaps work on \nside-floats, don't know yet.\n\n\n> 6. The OutOfLineRecord.getFootnoteSplit and\n>    OutOfLineRecord.getFloatSplit methods suggest that there is room\n>    for two subclasses. It would be nice if the two conditional blocks\n>    in PageBreakingAlgorithm.computeDifference, if (floats.existing())\n>    and if (footnotes.existing()) could be merged, and the difference\n>    in the logic be moved to the footnotes and floats objects. But that\n>    is finishing touch.\n\nI agree (that some further refactoring is possible). As this part of the \ncode may change if an improved algorithm is to be implemented, I didn't \nput too much effort in it. This will belong to a second refactoring \nstep.\n\n\nThanks,\nVincent\n", "attachment_id": null, "bug_id": 39777, "id": 91568, "time": "2006-07-25T08:28:11Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-07-25T08:28:11Z", "is_private": false}, {"count": 9, "tags": [], "text": "Created attachment 18637\nThe very same patch, with some english corrections as suggested by Simon Pepping\n\n* (OutOfLineRecord.)ProgressInfos renamed into ProgressInfo\n* (OutOfLineRecord.)cumulatedLengths renamed into cumulativeLengths", "is_private": false, "bug_id": 39777, "id": 91569, "time": "2006-07-25T08:32:46Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-07-25T08:32:46Z", "attachment_id": 18637}, {"count": 10, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": 18644, "text": "Created attachment 18644\nTestcases for before-floats\n\nTestcases for basic features of before-floats. There are also some disabled\ntestcases for features known to be broken.", "id": 91619, "time": "2006-07-26T16:06:45Z", "bug_id": 39777, "creation_time": "2006-07-26T16:06:45Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 39777, "text": "Applied the latest two patches to a temporary branch (\"Temp_Floats\"):\nhttp://svn.apache.org/viewvc?rev=427052&view=rev\n\nI managed to reenable one of the disabled test cases because you were fooled by\nthe default values for widows and orphans. Having only 3 lines in a block does\nnot allow any break possibilities with default widows and orphans. 4 lines\ncreates one break possibility in the middle.", "id": 91724, "time": "2006-07-31T09:34:38Z", "creator": "jeremias@apache.org", "creation_time": "2006-07-31T09:34:38Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 39777, "text": "Vincent, would you please add a testcase for the outstanding bug?\n\"* bug when the whole normal content is typeset and there are both footnotes and\nfloats left to be placed;\"\n\nWhenever possible with reasonable effort, I create a testcase before I start\nbugfixing. That documents the bug with a concrete and debug-friendly example and\nlets you know when you've finished fixing the bug. Even if you don't fix the bug\nright away, it is still helpful, because anyone else can start on the bugfix\nright away if he/she has time. \"Test first\", as in XP. Only good experiences so\nfar. Note that adding a disabled testcase to the list automatically updates the\nwebsite with \"known issues\" (at least after next site deployment, see\nhttp://xmlgraphics.apache.org/fop/knownissues.html).", "id": 91726, "time": "2006-07-31T10:25:00Z", "creator": "jeremias@apache.org", "creation_time": "2006-07-31T10:25:00Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": 18666, "bug_id": 39777, "text": "Created attachment 18666\nDisabled testcases for (known) non-working features; patch against the Temp_Floats branch.", "id": 91743, "time": "2006-07-31T18:08:32Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-07-31T18:08:32Z", "tags": [], "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 39777, "is_private": false, "id": 91744, "time": "2006-07-31T18:09:40Z", "creator": "vhennebert@gmail.com", "creation_time": "2006-07-31T18:09:40Z", "tags": [], "text": "(In reply to comment #12)\n> Vincent, would you please add a testcase for the outstanding bug?\n> \"* bug when the whole normal content is typeset and there are both footnotes and\n> floats left to be placed;\"\n\nDone. I've also added a testcase for before-floats too large to even fit on one\npage alone.\n\nVincent\n"}, {"count": 15, "attachment_id": null, "bug_id": 39777, "is_private": false, "id": 157910, "time": "2012-04-11T06:17:36Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:17:36Z", "tags": [], "text": "change status from ASSIGNED to NEW for consistency"}]
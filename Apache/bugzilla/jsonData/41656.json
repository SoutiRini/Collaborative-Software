[{"count": 0, "tags": [], "bug_id": 41656, "attachment_id": null, "id": 99562, "time": "2007-02-19T13:43:51Z", "creator": "adelmelle@apache.org", "creation_time": "2007-02-19T13:43:51Z", "is_private": false, "text": "The proposed patch refactors the fo tree in the following ways:\n-> removal of the childNodes instance member in fop.fo.FObj\n-> addition of a firstChild instance member in fop.fo.FObj\n-> addition of a siblings instance member in fop.fo.FONode\n-> addition of a FONodeIterator interface in FONode + corresponding implementation in FObj\n-> changed implementations of FObj.addChildNode(), .removeChild() and .getChildNodes()\n\nPossible benefits: \nReduction of the number of ArrayLists used by the fo tree. \nBefore the patch, for every FObj that has at least one child, an ArrayList is instantiated with a default \ncapacity of 10 elements (a backing Object[10], effectively wasting space on nulls in a substantial \namount of cases)\nAfter the patch, every FObj has a maximum of 3 references: one first-child (possibly null), a preceding \nand a following sibling. If the node only has children, it will have only two references: one child, one \nuninitialized array of siblings.\nDownside is that this means an added reference for any FONode, even FOText or a single child, but this \nmay be negligeable, considering that most FObj subtypes in general have a quite a few references \nalready (mostly properties).\n\nAnother upside: this refactoring made it possible to remove fo:character nodes during the refinement \nwhite-space-handling /as they were encountered/, so there was no more need to wait for the \nRecursiveCharIterator to go out of scope. The FObjIterator does not throw a \nConcurrentModificationException, since there is no real backing list anymore.\nMore generally, while extremely dangerous if used carelessly, this does open up the possibility of \nstarting to process the virtual list of child nodes while another thread keeps appending nodes to the \nend.\n\nSince this is only a proof-of-concept, I'd appreciate any feedback, especially from the profiler-geeks \nout there (Richard? I'd be very interested to see how many more cells you can process before running \ninto an OOMError...)\nI'd expect it to save us 'some' heap space, no idea how much. OTOH, I'd also expect a slowdown --\nsince an add() means traversing the following-sibling axis until the last one is reached. I have not yet \nperformed any optimizations where it comes to FOs with a lot of children. Maybe a solution would be to \nuse an iterator for the addition, and append the new child to its previous element...?\n\nIn the (very) long run, parts of the layout algorithm may already be triggered sooner. \nFor example: layoutmanager initialization, base element list generation, providing new pages...\n\nThis latter would, however, take quite a bit of refactoring, so don't get any wild ideas. ;)"}, {"count": 1, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": 19612, "is_private": false, "id": 99563, "time": "2007-02-19T13:44:45Z", "bug_id": 41656, "creation_time": "2007-02-19T13:44:45Z", "text": "Created attachment 19612\npatch containing the proposed changes"}, {"count": 2, "tags": [], "bug_id": 41656, "attachment_id": null, "text": "See http://issues.apache.org/bugzilla/show_bug.cgi?id=41044 for details of other\nmemory usage patches.\n\nHaving done some tests, this patch takes the number of processable table cells\non my given example from 30406 up to 32442. The patches in 41044 take the number\nfrom 30406 up to 83197. Applying both patches allows me to process 100803 cells.\nHence, I'd say both patches look like a good improvement - assuming they don't\nbreak anything else I haven't looked at.\n\n", "id": 102357, "time": "2007-04-25T08:30:55Z", "creator": "richardw@geoquip-rnd.demon.co.uk", "creation_time": "2007-04-25T08:30:55Z", "is_private": false}, {"count": 3, "tags": [], "creator": "adelmelle@apache.org", "text": "\nLooking again at this patch, and Richard's observations, I'd say it is worth it. Breaks nothing, and the \nbenefit seems to become bigger with the number of FOs.\n\nPatch applied. see: http://svn.apache.org/viewvc?view=rev&rev=554104", "id": 105156, "time": "2007-07-06T18:11:34Z", "bug_id": 41656, "creation_time": "2007-07-06T18:11:34Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 41656, "attachment_id": null, "id": 155518, "time": "2012-04-01T06:25:51Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:25:51Z", "is_private": false, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
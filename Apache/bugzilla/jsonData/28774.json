[{"count": 0, "tags": [], "bug_id": 28774, "text": "This patch introduces the Jakarta Commons CLI library for command line\nprocessing, in apps/CommandLineOptions.java. It is meant to raise the\nquestion whether this library is useful enough for FOP to use it and\nthereby introduce a dependency on another library.\n\nFeatures: Short and long forms for all options. Any order of the\noptions is allowed and options and arguments may be mixed freely. The\napplication may process the options in any order, independently of the\norder in which they were specified; the order of multiple\nspecifications of the same option is retained.\n\nThe library does not guard against multiple specifications of the same\noption, and the application cannot specify whether that is allowed or\nnot. Normal option value retrieval retrieves the first specified\nvalue. To obtain all values a different call should be made, see\noption 'param'.\n\nIn this patch I implemented the same command line conventions as the\ncurrent code. There is one exception; I changed '-print help' to '-h\nprint', because it is more difficult to return an option value to the\ncommand line if it is not a specific value, and for '-h' it seems more\nlogical to assume always that the following non-option is an option\nvalue and not an argument. Usage of the library would make it easy to\nimplement a different convention, e.g. Posix (one-letter short\noptions). The current convention is called GNU by the library,\nalthough GNU applications usually use the GNU getops CLI library,\nwhich implements Posix.\n\nElsewhere in the code I replaced a few Booleans with calls to the\nparsed command line, e.g. \"if (cl.hasOption('x'))\" instead of 'if\n(showConfiguration == Boolean.TRUE)'. Otherwise the code has remained\nrather similar, except for options specification and parsing.\n\nThe current release of commons-cli is labeled 1.0-beta-2-dev. Peter\nWest uses commons-cli in his code. There was a discussion about\ncommons-cli on this list just over a year ago:\nhttp://marc.theaimsgroup.com/?t=105105418200006&r=1&w=2", "id": 56831, "attachment_id": null, "creator": "spepping@apache.org", "creation_time": "2004-05-04T19:31:25Z", "time": "2004-05-04T19:31:25Z", "is_private": false}, {"count": 1, "tags": [], "creator": "spepping@apache.org", "is_private": false, "id": 56832, "attachment_id": 11427, "bug_id": 28774, "creation_time": "2004-05-04T19:32:23Z", "time": "2004-05-04T19:32:23Z", "text": "Created attachment 11427\nThe patch as described"}, {"count": 2, "tags": [], "bug_id": 28774, "attachment_id": null, "text": "Thanks for taking the time to create this patch.\n\nWhen I first read the patch, my first thought was \"no!--not another library!\" \nBut I do have to say the new code looks much cleaner and more readable.  (Part\nof the reason for the previous messy code, I think, was Victor needing to break\nout the param parsing into several \"parseXXXXOption()\" methods, in order to keep\nthe main parse() function less than 150 or so lines of code.   We at the time\nwere using a code style tool that recommended not having methods > 150 lines, or\nmaybe it was 300 or something.) \n\nIssues I currently see with Commons-CLI:\n1) A release version is still unavailable--this may indicate it is not well\nsupported, or hasn't been supported recently. \n\n2) Not raising errors on duplicate parameters would appear to be a feature that\na robust CLI library should be able to provide.  The absence of this option\nmight reduce the usage of this library by other apps, and by the way OS works,\nthe amount of support this library gets.\n\n3) The fact that both Joerg and Peter have also researched and like Commons-CLI\nis a good sign.  Bad sign:  Xalan still just hardcodes their CLI [1]--being\nlinked into the JDK, they don't like the risk of additional libraries apparently.\n\n[1]\nhttp://cvs.apache.org/viewcvs.cgi/xml-xalan/java/src/org/apache/xalan/xslt/Process.java?rev=1.62&view=auto\n\nMy instinct, however boring, is to \"build on stone\" again here--once it is\nworking, it is \"nailed down\", and you never have to look at it or worry about it\nagain.  But this is not that important to me (we can easily revert the code if\nit later presents a problem--it's only being used in one class), and it\ncertainly does make the code look cleaner and more maintainable.  I guess either\nway is OK for me.\n\nThanks,\nGlen", "id": 56844, "time": "2004-05-05T03:16:47Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-05-05T03:16:47Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 28774, "is_private": false, "id": 56888, "attachment_id": null, "creator": "jeremias@apache.org", "creation_time": "2004-05-05T19:05:25Z", "time": "2004-05-05T19:05:25Z", "text": "Commons CLI is available as 1.0 final [1]. CLI 2.0 is in development although \nno quick progress is visible. \n\n[1] http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-\ndev@jakarta.apache.org&msgId=530775\n\nI'm using Commons CLI in Barcode4J and it does a small but fine job.\n\nBeing a supporter of code reuse even if it means adding yet another small \nlibrary, I'm +1 for applying this patch."}, {"count": 4, "tags": [], "creator": "pbwest@powerup.com.au", "attachment_id": null, "id": 56902, "time": "2004-05-05T23:10:32Z", "bug_id": 28774, "creation_time": "2004-05-05T23:10:32Z", "is_private": false, "text": "Some observations on Commons CLI:-\n\nWhile there are exclusive groups of options, there are no inclusive groups; e.g.\nXML and XSLT.\n\nThere seems to be no way to control the order of option output in the\nHelpFormatter, though the header and footer texts are very useful for clarifying\nsuch issues.  The virtue of HelpFormatter is that usage/help text is generated\ndirectly from the Options object.\n\nEclipse complains about the (very useful) code structure\n\noptions.addOption(OptionBuilder.withLongOpt(\"xml-file\")\n       .hasArg().withArgName(\"file\")\n       .withDescription(\"XML input file\")\n       .create(\"xml\"));"}, {"text": "Peter,\n\nI could not make OptionGroups work; I thought they were still under development.\nThey are very useful for our input and output options. I had a look at your code\nand try again.\n\nAbout Eclipse, I assume this means that I have to split up the lines like in\nyour code:\n\n        // The mutually exclusive verbosity group includes the -d and -q flags\n        OptionGroup verbosity = new OptionGroup();\n        OptionBuilder.withArgName(\"debug mode\");\n        OptionBuilder.withLongOpt(\"full-error-dump\");\n        OptionBuilder.withDescription(\"Verbosity: verbose reporting\");\n        verbosity.addOption(OptionBuilder.create(\"d\"));\n\n\nSimon\n", "tags": [], "creator": "spepping@apache.org", "is_private": false, "count": 5, "id": 56954, "time": "2004-05-06T20:34:52Z", "bug_id": 28774, "creation_time": "2004-05-06T20:34:52Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 28774, "attachment_id": null, "text": "Simon,\n\nIf the OptionGroups didn't work for you, then the CLI code is probably buggy.  I\nassumed it was working and did not specifically test for clashes in the\nOptionGroups.  If so, could you let the CLI guys know?\n\nYou're right; the reason my OptionBuilder code is so verbose is to keep Eclipse\nquiet.  That's not a compelling reason though.  There is no necessity to use\nEclipse, and if the consensus is that clean compact code is better, let's go\nwith that, and wait for the Eclipse guys to accommodate such cases.\n\nPeter", "id": 56958, "time": "2004-05-06T23:17:28Z", "creator": "pbwest@powerup.com.au", "creation_time": "2004-05-06T23:17:28Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 28774, "attachment_id": null, "text": "Peter,\n\nNo, OptionGroup now works fine. The secret is that you should call\noptions.addOptionGroup after the OptionGroup has been configured\ncompletely. I attach a new installment of the patch, with\nOptionGroups. It really looks nice. Only the error message from the\nlibrary, when someone uses two options from a group, is not very\nclear: \"an option from this group has already been selected: 'xml'\".\nI think an average user will not be very enlightened by the text 'from\nthis group'.\n\nSimon\n", "id": 57002, "time": "2004-05-07T20:00:41Z", "creator": "spepping@apache.org", "creation_time": "2004-05-07T20:00:41Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 28774, "attachment_id": 11457, "text": "Created attachment 11457\nThe patch as described", "id": 57003, "time": "2004-05-07T20:01:31Z", "creator": "spepping@apache.org", "creation_time": "2004-05-07T20:01:31Z", "is_private": false}, {"count": 9, "text": "I had erroneously used PosixParser instead of GnuParser, an error pointed out to\nme by Arjen Duursma, and now corrected in alt-design.  Thanks to Arjen.", "bug_id": 28774, "is_private": false, "id": 57066, "time": "2004-05-10T05:51:39Z", "creator": "pbwest@powerup.com.au", "creation_time": "2004-05-10T05:51:39Z", "tags": [], "attachment_id": null}, {"count": 10, "text": "I decided not to switch to Jakarta Commons CLI. For an application like FOP it\nis not really useful. FOP has its own well written CLI parser.\n", "bug_id": 28774, "is_private": false, "id": 61777, "time": "2004-08-10T19:38:06Z", "creator": "spepping@apache.org", "creation_time": "2004-08-10T19:38:06Z", "tags": [], "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 28774, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156818, "time": "2012-04-01T13:53:19Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:53:19Z", "is_private": false, "attachment_id": null}]
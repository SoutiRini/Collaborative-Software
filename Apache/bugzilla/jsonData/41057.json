[{"count": 0, "tags": [], "bug_id": 41057, "attachment_id": null, "text": "POST parameter values stay referenced by a static field in\norg.apache.tomcat.util.buf.StringCache - thus the GC can never release the memory.\n\nSteps to Reproduce:\n1) install and start tomcat 5.5\n(http://apache.zone-h.org/tomcat/tomcat-5/v5.5.20/bin/apache-tomcat-5.5.20.zip)\n\n2) see the example webapp \"Request Parameters Example\" included in the install\n(http://localhost:8080/servlets-examples/servlet/RequestParamExample)\n\n3) run script \"send.sh\" to create heavy load\n#!/bin/bash\n\nexport LEAK_COMMAND='curl --silent\nhttp://localhost:8080/servlets-examples/servlet/RequestParamExample --output\nresponse.htm --data @send.txt'\n\n#create initial POST parameter with value about 10kB\n\necho \"firstname=\" > send.txt\nfor((i=0;$i<=10000;i=$(($i+1))));do\n  echo -n \"x\" >> send.txt\ndone\n\n\n#send the request\nfor((i=0;$i<=1000;i=$(($i+1))));do\n  echo $i\n  # modify the param value to send (append i)\n  echo -n $i >> send.txt\n  \n  $LEAK_COMMAND\n\ndone\n\n4) running the script causes heap usage to increase for some 40MB", "id": 96286, "time": "2006-11-28T10:07:27Z", "creator": "vilks56@gmail.com", "creation_time": "2006-11-28T10:07:27Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41057, "attachment_id": 19184, "text": "Created attachment 19184\nsome JRockit Memory Leak Detector pictures and the script to send data", "id": 96287, "time": "2006-11-28T10:13:01Z", "creator": "vilks56@gmail.com", "creation_time": "2006-11-28T10:13:01Z", "is_private": false}, {"count": 2, "tags": [], "creator": "remm@apache.org", "text": "You seem to be in a hurry. You did not seem to notice it, but the cache is\nbounded and also configurable. Using the Servlet API provided methods for\nparameters handling with very large POSTs is inefficient and will lead to large\namounts of garbage collections.\n\nIf you'd like me to look into adjusting the defaults or some of the behavior of\nthe cache, you should send me an explanation I can understand (unlike these\nscripts).", "id": 96309, "time": "2006-11-28T15:46:47Z", "bug_id": 41057, "creation_time": "2006-11-28T15:46:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 41057, "is_private": false, "id": 96312, "time": "2006-11-28T16:06:48Z", "creator": "remm@apache.org", "creation_time": "2006-11-28T16:06:48Z", "tags": [], "text": "Ok, I understand the script I think. The first one generate a:\n\"firstname=xxxxxxx[long]xxxxxxxx\" line. The second makes a number of requests\nwhile appending a number to it. Solution: the string cache is useful, but\nthere's little point caching large strings."}, {"count": 4, "attachment_id": null, "bug_id": 41057, "is_private": false, "id": 96359, "time": "2006-11-29T06:36:18Z", "creator": "vilks56@gmail.com", "creation_time": "2006-11-29T06:36:18Z", "tags": [], "text": "(In reply to comment #3)\n> Ok, I understand the script I think. \n\nYes, the script works exactly how You said. I created it just to isolate the\nproblem from my real app where I need to POST many large Strings (could be\nmegabytes). \n\nFirst, I don't understand why there is a need to cache request parameters for a\nlonger duration than it takes to process the request. It would be useful only in\nvery rare cases: if clients would make the exact same request many times.\n\nSecond, I could not confgure the cahce in a useful way. These are default \nStringCache settings in catalina.properties:\n\n# String cache configuration.\ntomcat.util.buf.StringCache.byte.enabled=true\n#tomcat.util.buf.StringCache.char.enabled=true\n#tomcat.util.buf.StringCache.trainThreshold=500000\n#tomcat.util.buf.StringCache.cacheSize=5000\n\nThe byte cahce is enabled by default and the memrory leak occurs.\n\nI tried to avoid the leak by trying different configurations and here is what I\ndiscovered:\n\n1) The leak does not appear if the byte cache is disabled\n(...StringCache.byte.enabled=false). But disabled cache can't be useful at all.\n\n2) I don't know what is the purpose of trainTreshold property, but that is the\nonly property that can help: setting it low enough (even extremely low) avoids\nthe leak. For example, lowering trainTreshold to 100 for 10kB requests avoids\nthe leak, but isn't that the same as disabling the cache?\n\n3) Limiting the cache size does not work as expected - for example, with\ncacheSize=1 the large requests still lead to exhaustion of heap memory. Digging\nwith Memory Leak Detector shows that _all_ the request parameters still stay in\nheap, referenced by a static field in org.apache.tomcat.util.buf.StringCache.\n"}, {"count": 5, "tags": [], "bug_id": 41057, "attachment_id": null, "is_private": false, "id": 96364, "time": "2006-11-29T08:21:41Z", "creator": "remm@apache.org", "creation_time": "2006-11-29T08:21:41Z", "text": "This cache caches the result of the conversion of byte[] to String. This is an\nexpensive operation since it includes many allocations and B2C  operations(which\nmakes the cache lookup cost insignificant as long as no sync occurs), and it's a\nbit of an experiment.\n\nThe way the cache works is that it looks for a while at the strings the webapp\nis using, build usage data (for example, the attributes names, etc, are going to\nbe used oftem), and then generates a static cache out of that.\n\nThe cache is supposed to be relatively small, however, so if it can get too big\nit's bug. I added a limit on the String size in the code along with a new system\nproperty, which should be all that is needed."}, {"count": 6, "tags": [], "bug_id": 41057, "attachment_id": null, "text": "This has been fixed by Remy in SVN for 6.0.x and I have ported his fix to 5.5.x.\n\nThe fix will be included in 5.5.21 and 6.0.3 onwards.", "id": 96476, "time": "2006-12-02T12:12:26Z", "creator": "markt@apache.org", "creation_time": "2006-12-02T12:12:26Z", "is_private": false}]
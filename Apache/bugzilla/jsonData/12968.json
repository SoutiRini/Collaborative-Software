[{"count": 0, "tags": [], "text": "From looking at the Tomcat 4.0.4 source (I can imagine this hasn't changed in\nTomcat 4.1.x), when Tomcat starts up, the Catalina class dynamically sets up\npackage.access security when a SecurityManager is enabled.  Specifically, it\nadds protection to \"org.apache.catalina.,org.apache.jasper.\".  However, this\nwon't protect the package \"org.apache.catalina\" itself, just the subpackages\nlike \"org.apache.catalina.core.\"  Is this a security bug?  In addition to the\nexisting package.access check, shouldn't the dynamic package.access logic also\ntry to protect \"org.apache.catalina,org.apache.jasper\"?  (Note that these\n*don't* have the trailing period.)\n\nThanks,\nEddie", "attachment_id": null, "bug_id": 12968, "id": 23321, "time": "2002-09-24T18:15:04Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2002-09-24T18:15:04Z", "is_private": false}, {"count": 1, "tags": [], "creator": "glenn@apache.org", "text": "This would have been very easy to verify.  If you had taken the time to do so\nyou would have found that those packaage.access and package.define settings\nwork just fine. You end up getting a ClassNotFoundException.\n\nHere is an example JSP.  In this instance the checkPackageDefinition\ncode in the WebappClassLoader fails and a ClassNotFoundException is thrown.\n\n<html>\n<body>\nThis is a test of package access.\n\n<%\n   System.out.println(\"Before Class.forName()\");\n   try {\n      Class clazz = Class.forName(\"org.apache.catalina.Globals\");\n      System.out.println(\"After Class.forName()\");\n   } catch(Exception e) {\n      System.out.println(\"CLAZZ Exception: \" + e.getMessage());\n      e.printStackTrace();\n   }\n%>\n</body>\n</html>\n\nPlease don't submit a bug report when you are only speculating that there\nmay be a security bug.  If you can _prove_ that there is a security bug\nplease send email to security@apache.org, real security bugs should not \nbe posted to an email list or submitted as a bugzilla report.\n", "id": 23339, "time": "2002-09-25T02:19:16Z", "bug_id": 12968, "creation_time": "2002-09-25T02:19:16Z", "is_private": false, "attachment_id": null}, {"text": "Ouch!  Glenn, I was just pointing out that since you take the time to protect\nthe subpackages of org.apache.catalina and org.apache.jasper (and rightfully\nso), you might as well protect the packages themselves.  It just so happens\nthat the classes in each package aren't loadable by webapps because they are\nloaded by the \"server\" classloader, which is not part of the delegation path\nfrom the webapp classloader.  However, if a public class gets introduced\ndirectly in org.apache.catalina or org.apache.jasper and is part of\nbin/bootstrap.jar, in the \"common\" classloader path, or in the \"webapp\"\nclassloader path, that class WILL get loaded and an AccessControlException\nwon't get thrown.  It's just a suggestion to avoid introducing a security hole.\n\nAs a side issue, forgive me if I don't keep up with all the protocols of when\nand where to post what, but perhaps you can look past that for a second and be\na bit more THANKFUL of others for trying HELP you with an OPEN source project.\n\nRegards.", "tags": [], "bug_id": 12968, "attachment_id": null, "count": 2, "id": 23377, "time": "2002-09-25T17:36:47Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2002-09-25T17:36:47Z", "is_private": false}, {"count": 3, "tags": [], "text": "Vetting applications for security vulnerabilities is important.\nI applaud efforts to do so, the more eyes reviewing _and_ testing\ncode for vulnerabilities the better.\n\nWhat I dislike are your methods.  You speculate that there may be a security\nhole and post it as a critical bug.  Without doing any testing to verify\nthat your assumptions are correct.\n\nI then responded to your bug report with example code which disproves\nyour speculation that a security bug exists.\n\nThe reason I took the tone I did is because security _is_ important.\nWhen a security announcement is made regarding Tomcat it ends up\nin CERT advisory's and on bugtraq. \n\nYour second post now speculates on a different possible security bug\nrelated to class loading and package access.  Once again without writing\nany code to test whether your assumptions are correct before posting.\n\nYes, org.apache.catalina.* classes get loaded by the server class loader.\n(Except for those dozen or so in bootstrap.jar)  But all ClassLoaders\nin the delegation path for a web application implement checkPackageAccess()\nand checkPackageDefinition().  So the packages restricted by the\npackage.access and package.defnition properties will be honored by all\nof the possible class loaders which can be delegated to.  Including\nthe ClassLoader for the class path and the system classloader. Those checks\nwill fail if _any_ classes on the java stack since the last doPrivileged()\ncall have not been granted the appropriate permission.\n\nThe test I posted proved that org.apache.catalina.* is equivalent to\norg.apache.catalina for the purposes of package access restrictions.\n\nHere is a good overview of how the Java SecurityManager works within Tomcat:\n\nhttp://kinetic.more.net/web/javaserver/security.shtml\n\nPlease send any followup discussion about clasloading or the Java\nSecurityManager to the tomcat-dev or tomcat-uesr lists.  \n\nThis bug report is closed.\n\n\n\n\n\n", "attachment_id": null, "bug_id": 12968, "id": 23400, "time": "2002-09-26T02:50:27Z", "creator": "glenn@apache.org", "creation_time": "2002-09-26T02:50:27Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 40220, "attachment_id": null, "text": "Consider two jar files:\nJarA contains:\n/mypackage/SomeClass.class\n/mypackage/SomeClass.hbm.xml\n\nJarB contains:\n/mypackage/Another.class\n\nWhen 'JarA' gets loaded before 'JarB' I have access to 'SomeClass.hbm.xml', but\nwhen the order is changed the resource is not available. I do have access to the\nclasses at all time though. This behaviour only seems to occur when both jars\ncontain classes in the package where the resource is located.", "id": 92078, "time": "2006-08-09T11:27:40Z", "creator": "mplatvoet@gmail.com", "creation_time": "2006-08-09T11:27:40Z", "is_private": false}, {"count": 1, "tags": [], "text": "If you could upload a simple webapp that demonstrates this issue, that would be\ngreat.  It would facilitate our reproduction of the issue and therefore its fix.", "attachment_id": null, "id": 97321, "creator": "yoavs@computer.org", "time": "2006-12-26T06:41:30Z", "bug_id": 40220, "creation_time": "2006-12-26T06:41:30Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 40220, "text": "The issue is straight forward and understood, I've come across it before and\nunfortunately dont have anything concrete to point at to indicate which\nbehaviour is correct.\n\n\nThe question that remains \"Is it legal to have the same package existing in more\nthan one source location on the classpath ?\"\n\nIf the specification is clear that all class loaders MUST perform an exhaustive\nsearch from all source locations.  Then TCs current behaviour is wrong and needs\nto be fixed.\n\nAnything less than a \"MUST\" allows TC to consider current behaviour correct.\n\n\nJust thinking about this issue for a moment:\n\n * There maybe some securiry reasons why; when one one or more artifacts of a\npackage are found on the classpath then it will look no more.  This might stop a\nrouge application adding classes into java.util.* package and possibily picking\nup wildcard security policy for java.util.*.  Especially in the case of Java Web\nStart / Applets, where one source location is the local JVM and another a remote\nJAR on the webserver.\n\n * There are also performance reasons why its not the default, if you are doing\nresource lookups and keep missing (resource not found), you are forcing a\ncomplete classpath search everytime.\n\n * I'd expect the behaviour of generic Java custom class loader may leave this\npolicy open to allow things to go either way once the lookup has been delegated\naway from the system class loader (to ensure java.util.* security).\n\n\nMy belief is that current behaviour can be considered correct.  But if TC wanted\nto it could perform an exhaustive search within the web-app realm\nWEB-INF/{classes,lib} if it so wished to implement such a class loading policy.\n", "id": 97365, "time": "2006-12-27T02:15:13Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-12-27T02:15:13Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 40220, "text": "An exhaustive search within any realm seems to me like desired behaviour. So consider 3 different \nrealms:\n1. jvm\n2. app-server\n3. web-app\n\nI think within every realm an exhaustive search should be performed. This way a realm won't have any \n'order of jar loading' issues. But when a realm boundary is crossed, so for instance duplicate paths to \nresources exist in the app-server realm and the web-app realm, the upper realm should be preferred. \nSo in this case that would be the web-app realm. This seems to me both secure as desirable. \n\nSo I don't think the current class loading is correct since it ignores resources that shouldn't, for \nwhatever reason, be ignored.", "id": 97375, "time": "2006-12-27T11:04:08Z", "creator": "mplatvoet@gmail.com", "creation_time": "2006-12-27T11:04:08Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "mplatvoet@gmail.com", "attachment_id": null, "text": "Oops, rephrase:\n\"...the upper realm should be preferred. \nSo in this case that would be the APP-SERVER realm.\"", "id": 97396, "time": "2006-12-28T00:06:55Z", "bug_id": 40220, "creation_time": "2006-12-28T00:06:55Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 40220, "text": "I have spent some time trying to reproduce this based on the description above\nand I can't. I have also reviewed the Tomcat code I believe to be relevant and I\ncan't see anything that would cause the behaviour described.\n\nIf you still see this issue please re-open this bug report and provide the\nsimplest possible test war that demonstrates it on a vanilla Tomcat install.\n\nUnless a security manager is present and the jars are sealed, it is legal for\npackages to be split across multiple jars.", "id": 98338, "time": "2007-01-21T17:16:58Z", "creator": "markt@apache.org", "creation_time": "2007-01-21T17:16:58Z", "is_private": false, "attachment_id": null}]
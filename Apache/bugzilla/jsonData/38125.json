[{"count": 0, "text": "Current message pattern log methods are of the form:\n\ndebug(String message, Object arg1);\ndebug(String message, Object arg1, Object arg2);\n\nPlease add (for info/warn/error/fatal/trace as well):\n\ndebug(String message, Object arg1, Throwable t);\ndebug(String message, Object arg1, Object arg2, Throwable t);\n\nThanks,\nMichael", "bug_id": 38125, "is_private": false, "id": 84222, "time": "2006-01-04T18:58:55Z", "creator": "michael.newcomb@gdc4s.com", "creation_time": "2006-01-04T18:58:55Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "carnold@apache.org", "text": "There are a couple of reasons that I'm not in favor of these changes:\n\n1. I have a personal dislike of the MessageFormatter work-alike methods being on Logger to begin \nwith.  I think they actually should be in a helper class which would allow the user to select which \nformatter they use (MessageFormatter or the JDK 1.5 formatter) and should be the actual JDK \nimplementation and not a log4j subset of the MessageFormatter.\n\n2. The motivation for the debug methods is to avoid the cost of formatting the message if the debug \nmessages are being suppressed.  However, info and higher messages are generally enabled, so their is \nno significant optimization savings for short-cutting the formatter.  In these cases, use:\n\nlogger.warn(new MessageFormatter(\"foo {}\").format(someObj))\n\n3. Since throwing and catching an exception should are expensive, should be rare, and should result in \na high level, the potential for optimization by deferring formatting again should be minimal.  In these \ncases, use:\n\nlogger.warn(new MessageFormatter(\"foo {}\").format(someObj), t);", "id": 84226, "time": "2006-01-04T20:01:38Z", "bug_id": 38125, "creation_time": "2006-01-04T20:01:38Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 38125, "is_private": false, "id": 84227, "time": "2006-01-04T20:19:37Z", "creator": "ceki@apache.org", "creation_time": "2006-01-04T20:19:37Z", "tags": [], "text": "Notwithsanding Curt's personal dislike for parametrized printing\nmethods, they are quite helpful in many situations.  It has been a\npopular feature of the SLF4J API.  In the absence of an alternative, I\nwould like to see these methods added for trace, info, warn, error and\nfatal.  However, as Curt points out, it is not practical to add them\nfor variants taking a Throwable. (Otherwise, the number of methods to\nbe added increases by 10.)\n"}, {"count": 3, "attachment_id": null, "bug_id": 38125, "is_private": false, "id": 84228, "time": "2006-01-04T20:48:48Z", "creator": "michael.newcomb@gdc4s.com", "creation_time": "2006-01-04T20:48:48Z", "tags": [], "text": "How about:\n\npublic void debug(String messagePattern, Object[] args) {\n  if (repository.isDisabled(Level.DEBUG_INT)) {\n    return;\n  }\n  if (Level.DEBUG.isGreaterOrEqual(this.getEffectiveLevel())) {\n\n    // add format(String, Object[] args) to MessageFormatter\n    //\n    messagePattern = MessageFormatter.format(messagePattern, args);\n\n    // get last item in argument list\n    //\n    Object o = args != null && args.length > 0 ? args[args.length - 1] : null;\n\n    forcedLog(FQCN, Level.DEBUG, messagePattern,\n              o instanceof Throwable ? (Throwable) o : null);\n  }\n}\n\nAnd for JDK 1.5:\npublic void debug(String messagePattern, Object... args) {\n  ...\n}\n"}, {"count": 4, "attachment_id": null, "creator": "carnold@apache.org", "text": "The Object[] or Object... forms were not desirable on the debug level since they still incur an array creation  \ncost in the typical case of debug not being enabled.  For the info and higher levels, they may be tolerable \nsince they would not be called nearly as frequently and those levels are commonly enabled.\n\nI don't have a problem with parameterized messages, I think it is much cleaner if they are on a different \nclass and not Logger which would allow the user to choose which formatter to be used (MessageFormat or \nthe JDK 1.5's java.util.Formatter) and may allow some better options supporting JDK 1.5 varargs.  I think \nthe right time to discuss the issue is in the log4j 1.3 API review which would follow the current \ncompatibility push.", "id": 84237, "time": "2006-01-04T23:09:49Z", "bug_id": 38125, "creation_time": "2006-01-04T23:09:49Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "is_private": false, "id": 107091, "time": "2007-08-22T18:59:56Z", "bug_id": 38125, "creation_time": "2007-08-22T18:59:56Z", "text": "Addressed in LogMF and LogSF in extras companion."}]
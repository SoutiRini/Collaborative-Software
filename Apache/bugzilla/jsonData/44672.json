[{"count": 0, "tags": [], "bug_id": 44672, "attachment_id": null, "id": 114955, "time": "2008-03-25T12:06:53Z", "creator": "olsonw@richer.ca", "creation_time": "2008-03-25T12:06:53Z", "is_private": false, "text": "Summary:\n--------\n\nWhen printing right aligned content in a table, the PCL renderer does not correctly align the content.  This worked in 0.20.5, but is broken in all 0.9x releases which I tested, including current trunk.  It appears that the longer the content string is, the more the output is offset to the left.  This only affects PCL; PDF output is correct.\n\nSteps to Reproduce:\n-------------------\n\n1) Download attachment test.fo\n2) Run command './fop -fo test.fo -pdf test.pdf' to get a benchmark of what the output is supposed to look like.\n3) Run command './fop -fo test.fo -pcl test.pcl' to generate the incorrect output.\n4) Print this file using the command 'lpr test.pcl' (this assumes that you have a default printer set up, which accepts PCL documents).\n\nObserved Results:\n-----------------\n\nCompare the printout and the PDF file.  Note that in the PDF, the right aligned content is all aligned correctly.  In the PCL file, some of the lines are offset to the left.  It appears to me from testing that the longer the text is, the further it is offset.\n\nDesired Results:\n----------------\n\nThe PCL output should look the same as PDF: the right aligned text should truly be right aligned.\n\nFurther Notes:\n--------------\n\nI looked through the source, but was not able to find where this is handled.  If someone could give me a pointer to a few classes which may contain the bug, I would be willing to give this a shot myself."}, {"count": 1, "tags": [], "creator": "olsonw@richer.ca", "attachment_id": 21713, "text": "Created attachment 21713\nTest file for right alignment issue\n\nThis is the test file which demonstrates the right alignment issue in PCL output.", "id": 114956, "time": "2008-03-25T12:10:58Z", "bug_id": 44672, "creation_time": "2008-03-25T12:10:58Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 21714\nSome demo output (made from PCL output by GhostPCL)\n\nI can't see exactly what you described. In my tests some of the right-most characters are slightly shifted to the right and into the border I made around the table to get some boundaries. I've enhanced your example a bit and attached the resulting TIFF here. This first part uses \"Helvetica\" which is mapped to a PCL standard font (text-rendering set to \"auto\") and the second part uses a TrueType font (\"DejaVu Serif\") which is painted using bitmaps. You can see that in the second part there are no such effects.\n\nThe problem is the following: We don't have the exact font metrics of those native PCL fonts. They may even be different from printer to printer which would explain your different results. So the result is just an approximation for the case where a native PCL font is used. The good thing about the native font is a smaller PCL file but obviously, it comes with a downside.\n\nFortunately, there is a setting where you can force FOP to output all fonts using bitmaps which should make your problem go away. See the \"text-rendering\" setting in http://xmlgraphics.apache.org/fop/0.95/output.html#pcl-configuration\n(you need to switch from \"auto\" to \"bitmap\")\n\nThe alternative would be to implement TrueType font embedding support for the PCL renderer but I've looked into this and it looks very complicated. As a side-note: Even most Windows PCL printer drivers generate all text as bitmaps rather than PCL text.\n\nAnyway, you've asked for pointers into the code:\norg.apache.fop.render.pcl.PCLRenderer, method renderText(TextArea)\nThe local variable \"pclFont\" determines whether the text is painted as PCL text or as bitmaps.\n\nHTH", "attachment_id": 21714, "bug_id": 44672, "id": 114957, "time": "2008-03-25T13:01:14Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-25T13:01:14Z", "is_private": false}, {"count": 3, "tags": [], "creator": "olsonw@richer.ca", "attachment_id": null, "text": "That makes perfect sense about not knowing the font metrics for each device, and explains why we are seeing different results.  I have tried using the bitmap output, and it works perfectly.  As far as I am concerned, this is a valid workaround, and I agree with you that it would be just about impossible to get this to work for all printers without some more information.  I'm still not sure why 0.20.5 works; perhaps it defaults to bitmapped output?\n\nI would be fine with closing this ticket as a successful workaround.  If there is nothing else which anyone wants to add, I will go ahead and do so.\n\nThanks again for your speedy and excellent response!\n\nCheers", "id": 114959, "time": "2008-03-25T13:30:39Z", "bug_id": 44672, "creation_time": "2008-03-25T13:30:39Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 44672, "attachment_id": null, "id": 114961, "time": "2008-03-25T13:52:33Z", "creator": "jeremias@apache.org", "creation_time": "2008-03-25T13:52:33Z", "is_private": false, "text": "(In reply to comment #3)\n<snip/>\n> I'm still\n> not sure why 0.20.5 works; perhaps it defaults to bitmapped output?\n\nNo, it always uses native PCL text. Not sure why it's good there. Maybe the lack of kerning support reduces the negative effects.\n\n<snip/>\n"}, {"count": 5, "tags": [], "bug_id": 44672, "attachment_id": null, "id": 156756, "time": "2012-04-01T13:52:17Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:52:17Z", "is_private": false, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs"}]
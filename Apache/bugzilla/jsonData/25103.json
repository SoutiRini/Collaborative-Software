[{"count": 0, "tags": [], "bug_id": 25103, "is_private": false, "id": 48330, "attachment_id": null, "creator": "mcorcoran@spidersoftware.com", "creation_time": "2003-12-01T09:41:29Z", "time": "2003-12-01T09:41:29Z", "text": "It looks as though the purpose that APR_PROGRAM and APR_PROGRAM_ENV are \nsupposed to serve in apr_proc_create() in (apr/threadproc/unix/proc.c) is being \nimplemented the wrong way.\n\nThe problem being that when a call is made to apr_proc_create() with NULL for \nthe env argument, and APR_PROGRAM is specified in the attr argument, then NULL \nends up getting passed to the call to execve, which seems to cause the exec'ed \nprogram to seg fault before it even has a chance to run.  This was most \nnoticeable to me while trying to use rotatelogs and SSLPassPhraseDialog \nexec:/blah/blah.\n\nHere's a simple diff to fix it:\ndiff ./httpd-2.0.48/srclib/apr/threadproc/unix/proc.c ./httpd-\n2.0.48.fix/srclib/apr/threadproc/unix/proc.c\n482c482\n<             execve(progname, (char * const *)args, (char * const *)env);\n---\n>             execv(progname, (char * const *)args);\n489c489\n<             execv(progname, (char * const *)args);\n---\n>             execve(progname, (char * const *)args, (char * const *)env);\n\nThanks."}, {"count": 1, "tags": [], "bug_id": 25103, "is_private": false, "text": "APR_PROGRAM_ENV means that the new child process should use the same environment\ntable as the current process.  We'll call execv() and the system will reference\nthe global variable environ for propagating those variables.\n\nAPR_PROGRAM means that the table of environment variables will not be inherited,\nand we'll call execve() to pass it in.\n\nSo I don't think the meanings are reversed.\n\nThis doesn't help your segfaults, but I don't know of other reports of segfaults\nwhen trying to start up Apache piped loggers, and those are created with\nAPR_PROGRAM and NULL passed to apr_proc_create() for the env table.\n\nWhat is a backtrace for the segfaults you're getting?\n", "id": 48334, "time": "2003-12-01T11:32:41Z", "creator": "trawick@apache.org", "creation_time": "2003-12-01T11:32:41Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 25103, "attachment_id": null, "id": 48336, "time": "2003-12-01T12:40:17Z", "creator": "mcorcoran@spidersoftware.com", "creation_time": "2003-12-01T12:40:17Z", "is_private": false, "text": "\nHmm.  Your description makes sense.  Problem is that I can't really get a \nbacktrace because the program (including rotatelogs) literally dies before it \neven gets a chance to run.  As a quick hack, I tried putting a sleep() for 60 \nseconds as the very first line of code in the main() function so that I could \nattach with gdb and see what's happening, but it doesn't even get to the call \nto sleep()... Instead, it seg faults, generates a core with no stack.  I think \nthat the NULL being passed to execve is causing problems on Solaris (Intel) \nmaybe - I haven't tried on a different platform yet.\n\nThing is I'm sure it does work on most platforms, otherwise there would have \nbeen complaints by now.  But it definitely is causing things like rotatelogs, \nand the SSLPassPhraseDialog exec:/program to die before starting.\n\nMaybe a simple addition like the following would be more appropriate:\n\nif (env != NULL)\n    execve(progname, (char * const *)argv, (char * const *)env);\nelse\n    execv(progname, (char * const *)argv);\n\nThanks,\nMike C.\n\n"}, {"count": 3, "tags": [], "bug_id": 25103, "attachment_id": null, "text": "What does truss -f show as the processing that happens in the new child after\nfork() but before reaching main() in the child?  Just that we reached execve()\nand got no further?\n\nWhat if you add logic such as the following to apr_proc_create() so that we use\nan empty environment table instead of a NULL pointer when the caller passes in\nNULL?  Does that help?\n\nIndex: threadproc/unix/proc.c\n===================================================================\nRCS file: /home/cvs/apr/threadproc/unix/proc.c,v\nretrieving revision 1.71\ndiff -u -r1.71 proc.c\n--- threadproc/unix/proc.c      6 Nov 2003 00:25:33 -0000   1.71\n+++ threadproc/unix/proc.c      1 Dec 2003 13:02:59 -0000\n@@ -320,6 +320,11 @@\n                                           apr_pool_t *pool)\n {\n     int i;\n+    const char * const empty_envp[] = {NULL};\n+\n+    if (!env) {\n+        env = empty_envp;\n+    }\n\n     new->in = attr->parent_in;\n     new->err = attr->parent_err;\n", "id": 48337, "time": "2003-12-01T13:04:08Z", "creator": "trawick@apache.org", "creation_time": "2003-12-01T13:04:08Z", "is_private": false}, {"count": 4, "tags": [], "text": "\nHi,\n\nBelow is a exerpt from the truss output for both a vanilla Apache install, \nfollowed by a truss output with the patch suggested by you (Jeff T.).  They are \nboth dying.  Interesting, the second one uses the empty environment array, and \nstill dies.  Is there something obviouse in the truss output that would \nexplains this?  FYI.  Everything seems to be fine if I use execv() instead, \nwhen env in NULL.\n\n\n14250:  close(8)                                        = 0\n14250:  fcntl(7, F_DUP2FD, 0x00000000)                  = 0\n14250:  close(7)                                        = 0\n14250:  sigaction(SIGCLD, 0x080478B8, 0x08047960)       = 0\n14249:  brk(0x081E5ED0)                                 = 0\n14249:  brk(0x081E7ED0)                                 = 0\n14249:  brk(0x081E7ED0)                                 = 0\n14249:  brk(0x081E9ED0)                                 = 0\n14250:  execve(\"/usr/local/spidercache/apache_swac/bin/rotatelogs\", 0x081A37A8, \n0x00000000)  argc = 3\n14250:  open(\"/usr/lib/ld.so.1\", O_RDONLY)              = 3\n14250:  fxstat(2, 3, 0x08047D64)                        = 0\n14250:  mmap(0x00000000, 236188, PROT_READ|PROT_EXEC, MAP_SHARED, 3, 0) = \n0xDFB10000\n14250:  mmap(0x00000000, 212992, PROT_READ|PROT_EXEC, MAP_SHARED, 3, 0) = \n0xDFAD0000\n14250:  mmap(0xDFAD0000, 134124, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, \n0) = 0xDFAD0000\n14250:  munmap(0xDFAF1000, 61440)                       = 0\n14250:  mmap(0xDFB00000, 12884, PROT_READ|PROT_WRITE|PROT_EXEC, \nMAP_PRIVATE|MAP_FIXED, 3, 131072) = 0xDFB00000\n14249:  brk(0x081E9ED0)                                 = 0\n14250:  open(\"/dev/zero\", O_RDWR)                       = 4\n14249:  brk(0x081EBED0)                                 = 0\n14250:  mmap(0xDFB03000, 596, PROT_READ|PROT_WRITE|PROT_EXEC, \nMAP_PRIVATE|MAP_FIXED, 4, 0) = 0xDFB03000\n14250:  close(3)                                        = 0\n14250:      Incurred fault #6, FLTBOUNDS  %pc = 0xDFADA23F\n14250:        siginfo: SIGSEGV SEGV_MAPERR addr=0x00000007\n14250:      Received signal #11, SIGSEGV [default]\n14250:        siginfo: SIGSEGV SEGV_MAPERR addr=0x00000007\n14249:  brk(0x081EBED0)                                 = 0\n14249:  brk(0x081EDED0)                                 = 0\n14249:  time()                                          = 1070300584\n14249:  getpid()                                        = 14249 [14248]\n14249:  open(\"/dev/urandom\", O_RDONLY|O_NONBLOCK|O_NOCTTY) = 7\n14249:  poll(0x08047754, 1, 10)                         = 1\n14249:  read(7, \"DBCFD4CFBA9B EC1 91E 5C9\".., 32)       = 32\n14249:  close(7)                                        = 0\n14249:  getuid()                                        = 0 [0]\n14249:  time()                                          = 1070300584\n14249:  xstat\n(2, \"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \n0x080458E8) = 0\n14250:          *** process killed ***\n14249:  open(\"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \nO_RDONLY) = 7\n14249:  close(7)                                        = 0\n14249:  open(\"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \nO_RDONLY) = 7\n14249:  fstat64(7, 0x08045604)                          = 0\n\n\n\n\n17061:  close(5)                                        = 0\n17061:  close(8)                                        = 0\n17061:  fcntl(7, F_DUP2FD, 0x00000000)                  = 0\n17061:  close(7)                                        = 0\n17061:  sigaction(SIGCLD, 0x080478B8, 0x08047960)       = 0\n17061:  execve(\"/usr/local/spidercache/apache_swac/bin/rotatelogs\", 0x081A37A8, \n0x080479DC)  argc = 3\n17061:  open(\"/usr/lib/ld.so.1\", O_RDONLY)              = 3\n17060:  brk(0x081E7ED0)                                 = 0\n17060:  brk(0x081E9ED0)                                 = 0\n17061:  fxstat(2, 3, 0x08047D64)                        = 0\n17061:  mmap(0x00000000, 236188, PROT_READ|PROT_EXEC, MAP_SHARED, 3, 0) = \n0xDFB10000\n17061:  mmap(0x00000000, 212992, PROT_READ|PROT_EXEC, MAP_SHARED, 3, 0) = \n0xDFAD0000\n17061:  mmap(0xDFAD0000, 134124, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, \n0) = 0xDFAD0000\n17061:  munmap(0xDFAF1000, 61440)                       = 0\n17061:  mmap(0xDFB00000, 12884, PROT_READ|PROT_WRITE|PROT_EXEC, \nMAP_PRIVATE|MAP_FIXED, 3, 131072) = 0xDFB00000\n17061:  open(\"/dev/zero\", O_RDWR)                       = 4\n17061:  mmap(0xDFB03000, 596, PROT_READ|PROT_WRITE|PROT_EXEC, \nMAP_PRIVATE|MAP_FIXED, 4, 0) = 0xDFB03000\n17061:  close(3)                                        = 0\n17060:  brk(0x081E9ED0)                                 = 0\n17061:      Incurred fault #6, FLTBOUNDS  %pc = 0xDFADA23F\n17061:        siginfo: SIGSEGV SEGV_MAPERR addr=0x00000007\n17060:  brk(0x081EBED0)                                 = 0\n17061:      Received signal #11, SIGSEGV [default]\n17061:        siginfo: SIGSEGV SEGV_MAPERR addr=0x00000007\n17060:  brk(0x081EBED0)                                 = 0\n17060:  brk(0x081EDED0)                                 = 0\n17060:  time()                                          = 1070301281\n17060:  getpid()                                        = 17060 [17059]\n17060:  open(\"/dev/urandom\", O_RDONLY|O_NONBLOCK|O_NOCTTY) = 7\n17060:  poll(0x08047754, 1, 10)                         = 1\n17060:  read(7, \"CDF5B1A59517D49483 = < &\".., 32)       = 32\n17060:  close(7)                                        = 0\n17061:          *** process killed ***\n17060:  getuid()                                        = 0 [0]\n17060:  time()                                          = 1070301281\n17060:  xstat\n(2, \"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \n0x080458E8) = 0\n17060:  open(\"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \nO_RDONLY) = 7\n17060:  close(7)                                        = 0\n17060:  open(\"/usr/local/spidercache/apache_swac/conf/ssl/spiderbox.cert.cert\", \nO_RDONLY) = 7\n17060:  fstat64(7, 0x08045604)                          = 0\n17060:  brk(0x081EDED0)                                 = 0\n", "attachment_id": null, "id": 48348, "creator": "mcorcoran@spidersoftware.com", "time": "2003-12-01T18:10:06Z", "bug_id": 25103, "creation_time": "2003-12-01T18:10:06Z", "is_private": false}, {"count": 5, "tags": [], "text": "Is this still reproducible with 2.0.54/APR 0.9.6?\n\nIf Jeff's patch didn't make a difference here I'm not sure what the bug is.", "attachment_id": null, "id": 78981, "creator": "jorton@redhat.com", "time": "2005-08-25T14:12:13Z", "bug_id": 25103, "creation_time": "2005-08-25T14:12:13Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 25103, "attachment_id": null, "id": 85504, "time": "2006-02-07T07:41:27Z", "creator": "wrowe@apache.org", "creation_time": "2006-02-07T07:41:27Z", "is_private": false, "text": "\n  No response from submittor, presuming issue is resolved."}]
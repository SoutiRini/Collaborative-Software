[{"count": 0, "tags": [], "bug_id": 7397, "attachment_id": null, "is_private": false, "id": 12216, "time": "2002-03-23T19:17:40Z", "creator": "haui@haumacher.de", "creation_time": "2002-03-23T19:17:40Z", "text": "Ant promises a platform independent build process. But this build\nprocess may require the generation of platform dependent files. Such\nfiles e.g. are shell scripts. One requirement for shell scripts on\nUnix and DOS are line separators corresponding to the target platform\nof the script. So neither a scripts with \\r\\n line separator will work\non Unix, nor does a batch file with \\n line separator in a DOS shell.\n\nWith the current ant distribution up to 1.5 alpha from the CVS it is\nnot possible to create shell scripts using the token filtering for\nanother platform than the one used for build (without faking the\nline.separator property). To create shell scripts for various\nplatforms, one would like to specify the line separator used in the\ncopy task. This even does not require that the editor used for\ncreating the sources supports the handling of different line separator\nstyles.\n\nI propose two additional attributes for the copy task, one to specify\nthe line separator explicitly (lineSeparator) and one\n(lineSeparatorStyle) to select a line separator style form a\npredefined list of styles (at least unix, dos, and mac).\n\nTo create a batch file for dos, one may use a task definition like the\nfollowing. This is independent of the build platform and does not\nrequire editor support of the dos line separator style to create the\nsources.\n \n   <copy todir=\"${build}\" filtering=\"true\" lineSeparatorStyle=\"dos\">\n     <fileset dir=\"${basedir}\">\n       <include name=\"bin/*.bat\"/>\n     </fileset>\n   </copy>\n\nThe creation of Unix scripts on any platform may look like this:\n\n   <copy todir=\"${build}\" filtering=\"true\" lineSeparatorStyle=\"unix\">\n     <fileset dir=\"${basedir}\">\n       <include name=\"bin/*.sh\"/>\n     </fileset>\n   </copy>\n\nI attach a patch against the latest development sources 1.5alpha that\nimplements the proposed feature. I'm also willing to prepare a patch\nagainst the 1.4 branch, if I find a person willing to commit it. The\nmove task may also be a candidate for supporting these two new\nattributes.\n\nBest regards,   Bernhard Haumacher.\n\n\n--- src/main/org/apache/tools/ant/taskdefs/Copy.java\t6 Mar 2002 14:29:18 -0000\n1.37\n+++ src/main/org/apache/tools/ant/taskdefs/Copy.java\t23 Mar 2002 19:05:46 -0000\n@@ -95,6 +95,14 @@\n  * @ant.task category=\"filesystem\"\n  */\n public class Copy extends Task {\n+    public static final String LINE_SEPARATOR_STYLE_UNIX = \"unix\";\n+    public static final String LINE_SEPARATOR_STYLE_DOS  = \"dos\";\n+    public static final String LINE_SEPARATOR_STYLE_MAC  = \"mac\";\n+\n+    public static final String LINE_SEPARATOR_UNIX = \"\\n\";\n+    public static final String LINE_SEPARATOR_DOS  = \"\\r\\n\";\n+    public static final String LINE_SEPARATOR_MAC  = \"\\r\";\n+\n     protected File file = null;     // the source file\n     protected File destFile = null; // the destination file\n     protected File destDir = null;  // the destination directory\n@@ -117,6 +125,8 @@\n     private FileUtils fileUtils;\n     private String encoding = null;\n \n+    private String lineSeparator = null;\n+\n     public Copy() {\n         fileUtils = FileUtils.newFileUtils();\n     }\n@@ -288,6 +298,37 @@\n     }\n \n     /**\n+     * Sets the line separator for this copy operation. Has only an\n+     * effect, if token filtering is performed.\n+     *\n+     * @since 1.32, Ant 1.5 \n+     */\n+    public void setLineSeparator (String lineSeparator) {\n+        this.lineSeparator = lineSeparator;\n+    }\n+\n+    /**\n+     * @return the line separator, <code>null</code> if not set.\n+     *\n+     * @since 1.32, Ant 1.5\n+     */\n+    public String getLineSeparator() {\n+        return lineSeparator;\n+    }\n+\n+    public void setLineSeparatorStyle (String lineSeparatorStyle) {\n+\tif (lineSeparatorStyle.equals(LINE_SEPARATOR_STYLE_UNIX)) {\n+\t    setLineSeparator(LINE_SEPARATOR_UNIX);\n+\t} else if (lineSeparatorStyle.equals(LINE_SEPARATOR_STYLE_DOS)) {\n+\t    setLineSeparator(LINE_SEPARATOR_DOS);\n+\t} else if (lineSeparatorStyle.equals(LINE_SEPARATOR_STYLE_MAC)) {\n+\t    setLineSeparator(LINE_SEPARATOR_MAC);\n+\t} else {\n+\t    throw new BuildException(\"Unknown line separator style '\" +\nlineSeparatorStyle + \"'\");\n+\t}\n+    }\n+\n+    /**\n      * Performs the copy operation.\n      */\n     public void execute() throws BuildException {\n@@ -479,7 +520,7 @@\n                     }\n                     fileUtils.copyFile(fromFile, toFile, executionFilters,\nfilterChains,\n                                        forceOverwrite, preserveLastModified,\n-                                       encoding, project);\n+                                       encoding, project, lineSeparator);\n                 } catch (IOException ioe) {\n                     String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                         + \" due to \" + ioe.getMessage();\n--- src/main/org/apache/tools/ant/util/FileUtils.java\t21 Mar 2002 08:09:19 -0000\n1.20\n+++ src/main/org/apache/tools/ant/util/FileUtils.java\t23 Mar 2002 19:05:46 -0000\n@@ -225,7 +225,30 @@\n         throws IOException {\n         copyFile(new File(sourceFile), new File(destFile), filters,\n                  filterChains, overwrite, preserveLastModified,\n-                 encoding, project);\n+                 encoding, project, null);\n+    }\n+\n+    /**\n+     * Convienence method to copy a file from a source to a\n+     * destination specifying if token filtering must be used, if\n+     * filter chains must be used, if source files may overwrite\n+     * newer destination files, if the last modified time of\n+     * <code>destFile</code> file should be made equal\n+     * to the last modified time of <code>sourceFile</code> and \n+     * a custom line separator should be used.\n+     *\n+     * @throws IOException\n+     *\n+     * @since 1.21, Ant 1.5\n+     */\n+    public void copyFile(String sourceFile, String destFile,\n+                         FilterSetCollection filters, Vector filterChains,\n+                         boolean overwrite, boolean preserveLastModified,\n+                         String encoding, Project project, String\nlineSeparator)\n+        throws IOException {\n+        copyFile(new File(sourceFile), new File(destFile), filters,\n+                 filterChains, overwrite, preserveLastModified,\n+                 encoding, project, lineSeparator);\n     }\n \n     /**\n@@ -314,6 +337,28 @@\n                          boolean overwrite, boolean preserveLastModified,\n                          String encoding, Project project)\n         throws IOException {\n+        copyFile(sourceFile, destFile, filters, filterChains, overwrite,\n+                 preserveLastModified, encoding, project, null);\n+    }\n+\n+    /**\n+     * Convienence method to copy a file from a source to a\n+     * destination specifying if token filtering must be used, if\n+     * filter chains must be used, if source files may overwrite\n+     * newer destination files, if the last modified time of\n+     * <code>destFile</code> file should be made equal\n+     * to the last modified time of <code>sourceFile</code> and a \n+     * custome line separator should be used.\n+     *\n+     * @throws IOException\n+     *\n+     * @since 1.21, Ant 1.5\n+     */\n+    public void copyFile(File sourceFile, File destFile,\n+                         FilterSetCollection filters, Vector filterChains,\n+                         boolean overwrite, boolean preserveLastModified,\n+                         String encoding, Project project, String\nlineSeparator)\n+        throws IOException {\n \n         if (overwrite || !destFile.exists() ||\n             destFile.lastModified() < sourceFile.lastModified()) {\n@@ -335,6 +380,10 @@\n                                                    && filterChains.size() > 0);\n \n             if (filterSetsAvailable || filterChainsAvailable) {\n+\t\tif (lineSeparator == null) {\n+\t\t    lineSeparator = System.getProperty(\"line.separator\");\n+\t\t}\n+\n                 BufferedReader in = null;\n                 BufferedWriter out = null;\n \n@@ -368,7 +417,7 @@\n                     String line = in.readLine();\n                     while (line != null) {\n                         if (line.length() == 0) {\n-                            out.newLine();\n+\t\t\t    out.write(lineSeparator); // out.newLine();\n                         } else {\n                             if (filterSetsAvailable) {\n                                 newline = filters.replaceTokens(line);\n@@ -376,7 +425,7 @@\n                                 newline = line;\n                             }\n                             out.write(newline);\n-                            out.newLine();\n+                            out.write(lineSeparator); // out.newLine();\n                         }\n                         line = in.readLine();\n                     }"}, {"count": 1, "tags": [], "bug_id": 7397, "text": "Created attachment 1410\nImplementation of the proposed feature. Patch against 1.5alpha Sat Mar 23 20:21:40 CET 2002", "id": 12217, "time": "2002-03-23T19:22:45Z", "creator": "haui@haumacher.de", "creation_time": "2002-03-23T19:22:45Z", "is_private": false, "attachment_id": 1410}, {"count": 2, "tags": [], "bug_id": 7397, "is_private": false, "id": 12218, "creation_time": "2002-03-23T19:32:24Z", "time": "2002-03-23T19:32:24Z", "creator": "jakarta@ehatchersolutions.com", "text": "Is there a reason <fixcrlf> isn't good enough?", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 7397, "text": "No, there is no reason :-))\n\nBut it's really unexpected that the copy task does *change* the line\nseparator style during the token filtering process. Maybe adding a\nnote to the documentation of the copy task is enough.\n", "id": 12219, "time": "2002-03-23T19:51:20Z", "creator": "haui@haumacher.de", "creation_time": "2002-03-23T19:51:20Z", "tags": [], "is_private": false}]
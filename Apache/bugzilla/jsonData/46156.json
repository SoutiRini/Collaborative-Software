[{"count": 0, "tags": [], "bug_id": 46156, "attachment_id": null, "id": 122234, "time": "2008-11-05T21:17:20Z", "creator": "yonghua.pang@statestreet.com", "creation_time": "2008-11-05T21:17:20Z", "is_private": false, "text": "Currently when evaluate the addition of two double variables, + is use directly.\n\nBut as we know there are precision loss in java float types, like:\nSystem.out.println(0.05+0.01);   \n\nresult: 0.060000000000000005   \n\n\n\nActually it's not POI's fault but as POI's API gives the result of the addition, it should be better if POI can return a immutable, arbitrary-precision signed decimal numbers (like BigDecimal).\n\nIn fact, it's much more easier to process 0.06 than 0.060000000000000005."}, {"count": 1, "tags": [], "bug_id": 46156, "attachment_id": null, "is_private": false, "id": 122235, "time": "2008-11-05T21:43:10Z", "creator": "josh@apache.org", "creation_time": "2008-11-05T21:43:10Z", "text": "POI's internal evaluation works entirely in terms of IEEE doubles which is mostly consistent with Excel.  My bet is that internally Excel experiences the same floating point anomalies, but hides them relatively well by using nice number-to-text conversion.\n\nI don't think using BigDecimal is a solution.  It just transforms the problem into a question of setting the correct 'scale' (which I'm assuming would be POI's responsibility).\n\nThere is an outstanding request to get POI to more closely emulate Excel number-to-text conversion.  Do you think this would help solve your problem?\n\n"}, {"count": 2, "attachment_id": null, "creator": "yonghua.pang@statestreet.com", "is_private": false, "id": 122236, "time": "2008-11-05T22:15:32Z", "bug_id": 46156, "creation_time": "2008-11-05T22:15:32Z", "tags": [], "text": "Thanks Josh.\nIt's really helpful but I don't agree with your suppose ahout the number-to-text conversion in excel. \n\nIn fact I investigated some about this conversion these days and find it's hard to get the solution. Just imagin how people judge when looking at the numbler like 0.060000000000000005. I bet people maybe guess it's 0.06 but only decide when they've seen 0.05+0.01\n\nSo if we only get the result 0.060000000000000005 and we don't know the scale, how to converse?\n\nAnyway, this condition only appears when there are Formula cells. What if POI can give support to get the Formula RESULT directly from excel? Or if it's not reachable, maybe we can only consider the expression (0.05+0.01) when do the conversion you said.\n\n\n"}, {"count": 3, "tags": [], "bug_id": 46156, "attachment_id": null, "is_private": false, "id": 122237, "time": "2008-11-05T23:30:24Z", "creator": "josh@apache.org", "creation_time": "2008-11-05T23:30:24Z", "text": "Just an aside - to be clear about the rounding problem at hand.  The following java code:\nSystem.out.println(0.06);\nSystem.out.println(0.05 + 0.01);\n\nproduces the following output:\n0.06\n0.060000000000000005\n\nIn this example of the apparent anomaly, the value 0.06 *seems* to be exactly representable with an IEEE double, but the evaluation of 0.05+0.01 produces a result which is not quite equal to 0.06.\n\nThese anomalies are not obvious in Excel.\n\n"}, {"count": 4, "tags": [], "bug_id": 46156, "attachment_id": null, "is_private": false, "id": 122238, "time": "2008-11-05T23:42:33Z", "creator": "josh@apache.org", "creation_time": "2008-11-05T23:42:33Z", "text": "(In reply to comment #2)\n> ... What if POI\n> can give support to get the Formula RESULT directly from excel? ...\n\nAs it turns out, Excel *does* cache the results of calculations for each formula cell (In POI the equivalent data is mapped to FormulaRecord.field_4_value).\n\nYou can access numeric formula results with HSSFCell.getNumericCellValue()\nFor example: \n\nInputStream is = new FileInputStream(\"sample.xls\");\nHSSFWorkbook wb = new HSSFWorkbook(is);\nHSSFCell cell = wb.getSheetAt(0).getRow(0).getCell(0);\nSystem.out.println(\"Value is \" + cell.getNumericCellValue());\n\nI made a workbook 'sample.xls' in Excel with the formula \"=0.5+0.1\" in Sheet1!A1.  With that spreadsheet, the above code produced the following output:\n\nValue is 0.060000000000000005\n\nIt appears that internally Excel has the same rounding issue, so getting \"the Formula RESULT directly from excel\" is not going to help us here.\n\n--  --  --  --\n\nI still believe that the solution to this problem involves intelligent rounding during number to text conversion. For example:\n\ndouble messyResult = 0.05+0.01;\nString resultText = ExcelNumberToTextConverter.render(messyResult); // *\ndouble roundedResult = Double.parseDouble(resultText);\nSystem.out.println(roundedResult);\n\n*ExcelNumberToTextConverter would be a new POI class.\nIf you disagree, can you explain why a solution like this won't do what you need, and/or suggest a specific alternative?\n\n"}, {"count": 5, "tags": [], "bug_id": 46156, "attachment_id": null, "id": 122239, "time": "2008-11-06T00:16:39Z", "creator": "yonghua.pang@statestreet.com", "creation_time": "2008-11-06T00:16:39Z", "is_private": false, "text": "Hi,\nI do think that the ExcelNumberToTextConverter may be a good idea, but I want to insist that for the convertion we need not only the result (number like 0.060000000000000005) but also the expression (like 0.5 + 0.1). Otherwise, I think it's hard to find out the approach of 'intelligent rounding'.\n\nJust as what I mentioned, people can maybe guess out the result but can only confirm when they've seen the original expression. So does the computer.\n\nHowever, if the expression is really needed. The ExcelNumberToTextConverter is no longer a single converter as it's named."}, {"count": 6, "tags": [], "bug_id": 46156, "attachment_id": null, "id": 122971, "time": "2008-12-01T15:42:46Z", "creator": "josh@apache.org", "creation_time": "2008-12-01T15:42:46Z", "is_private": false, "text": "Fixed in svn r722284\n\nA new class NumberToTextConverter was added.  It is now used for all number to text conversion used during formula rendering and formula evaluation.  You can also use it on plain double values in the following way:\n\nString text = NumberToTextConverter.toText(0.05+0.01);\nassertEquals(\"0.06\", text);\n\n\n----\n\nYou mentioned the idea of storing both the formula text and result value together in a single object.  I imagine it would be quite difficult to provide a complete solution along these lines.  Formulas can reference other formulas, and the formula text of the top cell may not have the necessary information.  Furthermore, it is not clear how knowing the formula text would be useful in general.\n\n\nIf you still think such a class (holding formula & result) would be useful in POI, please submit a working patch to explain more clearly."}]
[{"count": 0, "tags": [], "text": "Created attachment 29792\npatch file for config.c\n\nHello All,\n\n    In file 'config.c', I found instances of strdup() which lacked checks\nfor a return value of NULL, indicating failure.  The patch file also corrects\nthe issue with a small memory leak by calling free() for *tmp before the\nfunction exits, if strdup() was successful :)\n\nThe patch file is below:\n\n--- config.c.orig\t2012-12-22 07:57:22.113635984 -0800\n+++ config.c\t2012-12-22 08:05:20.617739373 -0800\n@@ -600,6 +600,11 @@\n         }\n \n         ap_module_short_names[m->module_index] = strdup(sym_name);\n+        if (ap_module_short_names[m->module_index] == NULL) {\n+            /* used fprintf() here, might be ap_log_error called */\n+            fprintf(stderr, \"unable to duplicate sym_name\\n\");\n+            return NULL;\n+        }\n         ap_module_short_names[m->module_index][len] = '\\0';\n         merger_func_cache[m->module_index] = m->merge_dir_config;\n     }\n@@ -623,7 +628,12 @@\n \n     /* We cannot fix the string in-place, because it's const */\n     if (m->name[strlen(m->name)-1] == ')') {\n-        char *tmp = strdup(m->name); /* FIXME: memory leak, albeit a small one */\n+        char *tmp = strdup(m->name);\n+        if (tmp == NULL) {\n+            /* should we use ap_error_log, rather than fprintf() for error msgs? */\n+            fprintf(stderr, \"No memory to duplicate m->name\\n\");\n+            return NULL;\n+        }\n         tmp[strlen(tmp)-1] = '\\0';\n         m->name = tmp;\n     }\n@@ -635,6 +645,9 @@\n      */\n     ap_register_hooks(m, p);\n \n+    /* release memory assigned to tmp (since strdup() was successful) */\n+    free(tmp);\n+\n     return NULL;\n }\n\nIn file 'htpasswd.c', I found a call to strdup() which had no test\nfor a return value of NULL, indicating failure.  The patch file is below:\n\n--- htpasswd.c.orig\t2012-12-22 08:20:14.022413380 -0800\n+++ htpasswd.c\t2012-12-22 08:26:04.174554073 -0800\n@@ -93,6 +93,7 @@\n #define ERR_OVERFLOW 5\n #define ERR_BADUSER 6\n #define ERR_INVALID 7\n+#define ERR_NOMEMORY 8\n \n #define APHTP_NEWFILE        1\n #define APHTP_NOFILE         2\n@@ -241,6 +242,10 @@\n         apr_cpystrn(cpw, cbuf, sizeof(cpw) - 1);\n         if (strlen(pw) > 8) {\n             char *truncpw = strdup(pw);\n+            if (truncpw == NULL) {\n+                apr_file_printf(errfile, \"Warning: unable to allocate memory to truncate password.\" NL);\n+                return ERR_NOMEMORY;\n+            }\n             truncpw[8] = '\\0';\n             if (!strcmp(cpw, crypt(truncpw, salt))) {\n                 apr_file_printf(errfile, \"Warning: Password truncated to 8 characters \"\n\nIn file 'suexec.c', I found 3 instances where strdup() is called, but\nno check for a return value of NULL is made, indicating failure.  The\npatch file is below:\n\n--- suexec.c.orig\t2012-12-22 08:30:25.771738982 -0800\n+++ suexec.c\t2012-12-22 08:37:41.396556928 -0800\n@@ -391,6 +391,10 @@\n     }\n     gid = gr->gr_gid;\n     actual_gname = strdup(gr->gr_name);\n+    if (actual_gname == NULL) {\n+        log_err(\"Unable to malloc memory for group name: (%s)\\n\", gr->gr_name);\n+        exit(106);\n+    }\n \n #ifdef _OSD_POSIX\n     /*\n@@ -425,6 +429,10 @@\n     uid = pw->pw_uid;\n     actual_uname = strdup(pw->pw_name);\n     target_homedir = strdup(pw->pw_dir);\n+    if (actual_uname == NULL || target_homedir == NULL) {\n+        log_err(\"failed to malloc memory for username or home directory\\n\");\n+        exit(106);\n+    }\n \n     /*\n      * Log the transaction here to be sure we have an open log\n\nPlease feel free to make any comments or changes to the attached\npatch files.\n\nBill Parker (wp02855 at gmail dot com)", "attachment_id": 29792, "id": 164217, "creation_time": "2012-12-22T18:44:38Z", "time": "2012-12-22T18:44:38Z", "creator": "wp02855@gmail.com", "bug_id": 54345, "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 54345, "text": "Fixed a bit differently in trunk in\n\nr1425771\nr1425772\nr1425775\n\nNote that in config.c, the copied string must not be freed because it is still referenced as m->name.", "id": 164234, "time": "2012-12-25T21:21:23Z", "creator": "sf@sfritsch.de", "creation_time": "2012-12-25T21:21:23Z", "tags": [], "is_private": false}]
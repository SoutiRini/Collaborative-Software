[{"count": 0, "tags": [], "creator": "kirillcool@yahoo.com", "attachment_id": null, "id": 92903, "time": "2006-09-01T16:48:55Z", "bug_id": 40392, "creation_time": "2006-09-01T16:48:55Z", "is_private": false, "text": "The JGVTComponent.paintComponent ignores the opacity setting and paints the\nbackground in any case:\n\n        g2d.setComposite(AlphaComposite.SrcOver);\n        g2d.setPaint(getBackground());\n        g2d.fillRect(visRect.x,     visRect.y, \n                     visRect.width, visRect.height);\n\nA workaround is to set the background to new Color(0x0, true)"}, {"text": "(In reply to comment #0)\n> The JGVTComponent.paintComponent ignores the opacity setting and paints the\n> background in any case:\n\n   I take it you are refering to:\n      JComponent.setOpaque(boolean isOpaque)\n\n   If so your 'workaround' is the correct answer.  One might\nargue that Batik should look at the 'Background' given and\nsetOpaque(flase) if the background color has an alpha less\nthan 1.0 (255).  The purpose of setOpaque is to inform\nSwing that it needs to draw any components that are 'under'\nthe canvas.  Otherwise it skips painting them under the\nassumption that the Canvas will simply cover them.\n\n> A workaround is to set the background to new Color(0x0, true)\n\n   This is in fact the correct thing to do.\n", "tags": [], "bug_id": 40392, "attachment_id": null, "count": 1, "id": 93024, "time": "2006-09-05T11:25:06Z", "creator": "deweese@apache.org", "creation_time": "2006-09-05T11:25:06Z", "is_private": false}]
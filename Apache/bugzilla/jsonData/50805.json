[{"count": 0, "tags": [], "bug_id": 50805, "attachment_id": 26677, "text": "Created attachment 26677\npatch for ConnectionPool\n\nLeak and performance issue occurs when using getConnectionAsync().\n\ngetConnectionAsync() calls borrowConnection(int, String, String), and add PooledConnection to the busy queue.\nfuture.get() also calls borrowConnection(long, PooledConnection, String, String), and same PooledConnection is added to the busy queue again.\nThe first connection is removed from the busy queue when returnConnection() is called, but the second one remains as garbage.\nThe busy queue overflows at once because of these garbage connection.\nInt this time, ConnectionPool.size is smaller than busy queue size. And new real connection is created when getConnectionAsync() is called.\nAnd, when the busy queue overflows, the connection is released in ConnectionPool.returnConnection(). This causes the problem of the performance. \n\n---\nFurthermore, in most case the following codes are not executed, because borrowConnection(int, String, String) is not returned null except as validation failed.\n\n    149         if (idle instanceof FairBlockingQueue<?>) {\n    150             Future<PooledConnection> pcf = ((FairBlockingQueue<PooledConnection>)idle).pollAsync();\n    151             return new ConnectionFuture(pcf);\n    152         } else if (idle instanceof MultiLockFairBlockingQueue<?>) {\n    153                 Future<PooledConnection> pcf = ((MultiLockFairBlockingQueue<PooledConnection>)idle).pollAsync();\n    154                 return new ConnectionFuture(pcf);\n    155         } else {\n    156             throw new SQLException(\"Connection pool is misconfigured, doesn't support async retrieval. Set the 'fair' property to 'true'\");\n    157         }\n\n-----\nBased on above, I improved the getConnectionAsync().\n\nBest regards.", "id": 144397, "time": "2011-02-17T23:11:36Z", "creator": "mashmk02@gmail.com", "creation_time": "2011-02-17T23:11:36Z", "is_private": false}, {"count": 1, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "id": 144404, "time": "2011-02-18T10:34:54Z", "bug_id": 50805, "creation_time": "2011-02-18T10:34:54Z", "is_private": false, "text": "hi Eiji, thanks for your bug report. \nI'm a bit confused by your suggested patch. Seems as the problem is that it calls borrowConnection when it shouldn't based on the input data.\n\nIndex: java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\n===================================================================\n--- java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\t(revision 1071670)\n+++ java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\t(working copy)\n@@ -1090,7 +1090,7 @@\n                 if (result!=null) return result;\n                 if (configured.compareAndSet(false, true)) {\n                     try {\n-                        pc = borrowConnection(System.currentTimeMillis(),pc, null, null);\n+                        pc = this.pc!=null?this.pc:borrowConnection(System.currentTimeMillis(),pc, null, null);\n                         result = ConnectionPool.this.setupConnection(pc);\n                     } catch (SQLException x) {\n                         cause = x;\n\n\nDoesn't this one liner do exactly what you need? A test case would be help ful, I will create one today if I have time"}, {"count": 2, "tags": [], "bug_id": 50805, "text": "Another fix, equally simple could be\n\nIndex: java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\n===================================================================\n--- java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\t(revision 1071670)\n+++ java/org/apache/tomcat/jdbc/pool/ConnectionPool.java\t(working copy)\n@@ -1056,6 +1056,12 @@\n         \n         public ConnectionFuture(PooledConnection pc) {\n             this.pc = pc;\n+            try {\n+                result = ConnectionPool.this.setupConnection(pc);\n+                configured.set(true);\n+            }catch (SQLException x) {\n+                result = null;\n+            }\n         }\n         /**\n          * {@inheritDoc}", "id": 144408, "time": "2011-02-18T10:52:04Z", "creator": "fhanik@apache.org", "creation_time": "2011-02-18T10:52:04Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "text": "Fixed in r1073531\n\nThank you for the report!", "id": 144491, "time": "2011-02-22T17:46:07Z", "bug_id": 50805, "creation_time": "2011-02-22T17:46:07Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50805, "attachment_id": null, "text": "Sorry for not replying sooner.\nThe performance issue was solved by the latest revision. \nMany thanks!", "id": 144494, "time": "2011-02-22T21:07:29Z", "creator": "mashmk02@gmail.com", "creation_time": "2011-02-22T21:07:29Z", "is_private": false}]
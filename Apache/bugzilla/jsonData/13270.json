[{"count": 0, "tags": [], "bug_id": 13270, "text": "We have a very simple JSP app that is deployed on TC, integrating with Apache, using either ajp12 or ajp13 protocol. When used with ajp13, we realized that the classic interaction between Nagle algorithm (on the TC side) and delayed ack (on the Apache side) results in 200ms delay per request-response loop on the Mac OS X platform.\n\nDetailed description:\n\n1. The connector that we used is mod_jk, which is capable of ajp12 or ajp13.\n\n2. When we use ajp12, the entire request-response loop takes about 1ms on a LAN. Using tcpdump on the traffic shows no obvious slow down. This is good.\n\n3. Using the same hardware/software setup but just switching to the ajp13 protocol, each request-response is about 200ms. Mac OS X  10.2 (darwin), by default, turns on Nagle and set the delayed ack to be 200ms. So, intuitively, we know that it's probably due to that.\n\n4. Indeed, analyzing the protocol at http://jakarta.apache.org/tomcat/tomcat-4.1-doc/jk2/common/AJPv13.html and the tcp dump confirms this. Experimentally, if I either turn off Nagle on the TC side or turn off delayed ack on the Apache, then performance is as good as ajp12.\n\n5. So there are 2 potentially simple fix:\n\ta. We could turn off delayed ack on the Apache side but on darwin, there is no such socket level option. Hence, it will affect the entire machine, which is not wise.\n\tb. Turn off Nagle on the TC side, for ajp13. Analysis of the protocol shows that ajp13 first sends Headers (small load) back to Apache, followed by Body Chunk (big load) and then an End Response (small load). So it's a good candidate for turning off Nagle anyway.\n\nI saw that #2176 was fixed so maybe this has a chance.\nSuggestion:\n\n\tin org.apache.ajp.Ajp13:189, insert 'socket.setTcpNoDelay(true)' after setSoLinger()\n\nsidenote: Experimenting on RedHat7.2 shows a slowdown as well when using ajp13, though not as dramatic. I was told that RH actually uses a smart kernel algorithm to make the delayed ack non obvious.", "id": 23874, "time": "2002-10-04T02:09:11Z", "creator": "hanming@apple.com", "creation_time": "2002-10-04T02:09:11Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "There must be something wrong on your OS setup, since I never saw a ajp13\nreq/replie took 200ms on others boxes (Linux, Windows), may be something\nspecific to MacOS X IP stack.\n\nBTW, the support for no delay is included :\n\nJust try to add tcpnoDelay=true in server.xml part of Ajp13.\n\nRegards", "attachment_id": null, "bug_id": 13270, "id": 23894, "time": "2002-10-04T09:05:09Z", "creator": "hgomez@apache.org", "creation_time": "2002-10-04T09:05:09Z", "is_private": false}, {"count": 2, "tags": [], "creator": "hanming@apple.com", "attachment_id": null, "id": 23954, "time": "2002-10-04T19:44:19Z", "bug_id": 13270, "creation_time": "2002-10-04T19:44:19Z", "is_private": false, "text": "Thanks Henri.\n\nCertainly, Mac OS X's IP stack can be further optimized so that the\ninteraction between Nagle and delayed ack can be minimized (Linux, which I have tested, didn't suffer as much).\nBut I hope it doesn't take away the fact that ajp13 protocol lends itself\nto be a good candidate for turning on TCP_NODELAY, by default.\n\nAnyway, I took your advice and tried to add tcpnoDelay to true.\nUnfortunately, it didn't work. I tried both with \nCoyoteConnector+JKCoyoteHandler and simply Ajp13Connector. Looking at the \nsource codes, there is nowhere in either ChannelSocket.java nor Ajp13.java\nthat turns TCP_NODELAY on/off. As well, the docs didn't mention that\n\"tcpnoDelay\" is a valid attribute in the XML element <Connector>.\n\nHere's part of the server.xml\n\n<!-- Define a Coyote/JK2 AJP 1.3 Connector on port 8009 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"             \n port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"              \n enableLookups=\"true\" redirectPort=\"8443\"\n acceptCount=\"10\" debug=\"0\" connectionTimeout=\"20000\"               \n tcpNoDelay=\"true\"               useURIValidationHack=\"false\"\nprotocolHandlerClassName=\"org.apache.jk.server.JkCoyoteHandler\"/>\n\n\n<!-- Define an AJP 1.3 Connector on port 8009 -->\n<!-- I tried this as well\n    <Connector className=\"org.apache.ajp.tomcat4.Ajp13Connector\"             port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"              \nacceptCount=\"10\" debug=\"0\" tcpnoDelay=\"true\" />\n-->"}, {"count": 3, "tags": [], "bug_id": 13270, "text": "For coyote - it's in jk2.properties ( where all jk properties are set ).\nJust set channelSocket.XXX -> if you look at org.apache.jk.common.ChannelSocket\nyou'll find all supported properties and how they are implemented.\n( each property in jk2.properties is turned into a setter ).\n\nI fixed the code to actually do something with this setting :-)\nNot sure about the default - yet.", "id": 23979, "time": "2002-10-04T23:33:25Z", "creator": "cmanolache@yahoo.com", "creation_time": "2002-10-04T23:33:25Z", "is_private": false, "attachment_id": null}]
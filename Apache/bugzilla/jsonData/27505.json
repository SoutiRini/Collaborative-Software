[{"count": 0, "tags": [], "creator": "mguillemot@yahoo.fr", "text": "It would be interessant to configure a JDBC appender to use a DataSource\nspecified through JNDI to connect to the database.", "id": 53605, "time": "2004-03-07T17:10:14Z", "bug_id": 27505, "creation_time": "2004-03-07T17:10:14Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "rdecampo@twcny.rr.com", "text": "Note that the new JDBC-based appenders I have included in the log4j sandbox\nallows the use of a JNDI data source.  See the\norg.apache.log4j.jdbc.PreparedStatementAppender class in the log4j sandbox.", "id": 53956, "time": "2004-03-13T23:24:24Z", "bug_id": 27505, "creation_time": "2004-03-13T23:24:24Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 27505, "is_private": false, "id": 55119, "time": "2004-04-01T22:46:09Z", "creator": "clement.ong@shinetech.com", "creation_time": "2004-04-01T22:46:09Z", "tags": [], "text": "Hi Gino,\n \nYou're right that the JDBCAppender is not of production quality. This is the \nsecond problem I discovered in this class. The first was when we were using an \nold version of log4j which has the persistent major memory leak in the flush \nmethod and the most recent memory leak due to stale connection. This parcular \nproblem is very subtle(which could be caused the firewall or a *database \nrestart or crash.*) as it's very hard to pinpoint where the memory leak is \noccuring in.\n \nIn a J2EE environment it is ill advised to use file based logging destination \nas it contravene the EJB specification rule.  This is where JDBCAppender or \nJMSType destination could be use. "}, {"count": 3, "attachment_id": null, "bug_id": 27505, "text": "disregard my posting, it went to the wrong thread.", "id": 55120, "time": "2004-04-01T22:48:22Z", "creator": "clement.ong@shinetech.com", "creation_time": "2004-04-01T22:48:22Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 27505, "text": "This Appender is no longer maintained.  This functionality is available in \nlog4j 1.3 via DBAppender's JNDIConnectionSource implementation.", "id": 68517, "attachment_id": null, "creator": "yoavs@computer.org", "creation_time": "2004-12-14T21:54:43Z", "time": "2004-12-14T21:54:43Z", "is_private": false}]
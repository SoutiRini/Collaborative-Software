[{"count": 0, "tags": [], "bug_id": 46863, "attachment_id": null, "id": 125584, "time": "2009-03-16T12:11:15Z", "creator": "liamsb@ca.ibm.com", "creation_time": "2009-03-16T12:11:15Z", "is_private": false, "text": "The close() method should be called on java.util.zip.DeflaterOutputStream instances when they are no longer needed. In particular, the writeIDAT() and writeZTXT() methods in org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder do not call close() on DeflaterOutputStream.\n\nSince close() is not called, end() is not called on the java.util.zip.Deflater instance until it is garbage collected. Due to the implementation of Deflater, this causes an OutOfMemoryError to occur in some cases when the PNGImageEncoder is invoked repeatedly. This issue with Deflater is described in detail at http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4797189, where the recommended solution is to ensure that end() is called on the Deflater in a timely fashion.\n\nTested in Batik versions 1.5 and 1.7.\n\nStack trace:\n[...]\nCaused by: java.lang.OutOfMemoryError\n\tat java.util.zip.Deflater.init(Native Method)\n\tat java.util.zip.Deflater.<init>(Deflater.java:134)\n\tat java.util.zip.Deflater.<init>(Deflater.java:143)\n\tat org.apache.batik.ext.awt.image.codec.PNGImageEncoder.writeIDAT(Unknown Source)\n\tat org.apache.batik.ext.awt.image.codec.PNGImageEncoder.encode(Unknown Source)\n\tat org.apache.batik.svggen.ImageHandlerBase64Encoder.encodeImage(Unknown Source)\n\tat org.apache.batik.svggen.ImageHandlerBase64Encoder.handleHREF(Unknown Source)\n\tat org.apache.batik.svggen.ImageHandlerBase64Encoder.handleHREF(Unknown Source)\n\tat org.apache.batik.svggen.DefaultImageHandler.handleImage(Unknown Source)\n\tat org.apache.batik.svggen.SimpleImageHandler.handleImage(Unknown Source)\n\tat org.apache.batik.svggen.SVGGraphics2D.drawImage(Unknown Source)\n\tat org.apache.batik.svggen.SVGGraphics2D.drawImage(Unknown Source)\n[...]"}, {"count": 1, "attachment_id": 23388, "creator": "helder.magalhaes@gmail.com", "is_private": false, "id": 125591, "time": "2009-03-17T04:28:51Z", "bug_id": 46863, "creation_time": "2009-03-17T04:28:51Z", "tags": [], "text": "Created attachment 23388\nUntested patch adapted from proposal\n\nFirst of all, I'm not sure if we should fix this, as it's a Java bug -- should this be marked as invalid instead?\n\nNevertheless, by making a short investigation and taking a look at the class documentation [1], it seems that simply replacing finish() by close() would fix this and also shouldn't hurt anything so here goes an untested patch.\n\nIf anyone has the opportunity to review/test this patch, please follow up with results. Other proposals are (naturally) welcome. :-)\n\nHope this helps,\n Helder Magalh\u00e3es\n\n[1] http://java.sun.com/j2se/1.4.2/docs/api/java/util/zip/DeflaterOutputStream.html"}, {"count": 2, "tags": [], "bug_id": 46863, "attachment_id": null, "text": "(In reply to comment #1)\n> Created an attachment (id=23388) [details]\n> Untested patch adapted from proposal\n\nThanks.\n\n> First of all, I'm not sure if we should fix this, as it's a Java bug -- should\n> this be marked as invalid instead?\n\nIf we can easily work around a known problem, I think we should.\n\n> Nevertheless, by making a short investigation and taking a look at the class\n> documentation [1], it seems that simply replacing finish() by close() would fix\n> this and also shouldn't hurt anything so here goes an untested patch.\n\nInterestingly, it seems Sun's DeflaterOutputStream won't call end() on its Deflater from inside DeflaterOutputStream.close() if a Deflater was supplied to the DeflaterOutputStream constructor.  We might need to call end() on the Deflater directly.  But I'd like to test this first, so...\n\n> If anyone has the opportunity to review/test this patch, please follow up with\n> results. Other proposals are (naturally) welcome. :-)\n\n...liamsb, can you provide a short test case that demonstrates the OOM problem?  I tried with this small test of PNGImageEncoder, but memory usage didn't grow:\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;\n\npublic class A {\n    public static void main(String[] args) {\n        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        for (;;) {\n            PNGImageEncoder e = new PNGImageEncoder(new ByteArrayOutputStream(), null);\n            try {\n                e.encode(bi);\n            } catch (IOException ex) {\n            }\n        }\n    }\n}", "id": 125620, "time": "2009-03-18T20:30:47Z", "creator": "cam@apache.org", "creation_time": "2009-03-18T20:30:47Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46863, "text": "Hi, thanks for looking into this issue.\n\nHere is a test case that results in the OOM exception after running for about 10 minutes on my computer:\n\nimport java.awt.RenderingHints;\nimport java.awt.RenderingHints.Key;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.BufferedImageOp;\nimport java.util.HashMap;\n\nimport org.apache.batik.dom.GenericDOMImplementation;\nimport org.apache.batik.svggen.SVGGraphics2D;\nimport org.w3c.dom.Document;\n\npublic class A {\n    public static void main(String[] args) {\n    \tBufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n    \tDocument document = GenericDOMImplementation.getDOMImplementation().createDocument(null, \"svg\", null);\n    \tSVGGraphics2D svgGraphics = new SVGGraphics2D(document);\n    \tBufferedImageOp bio = new AffineTransformOp(new AffineTransform(), new RenderingHints(new HashMap<Key, Object>()));\n    \tfor (;;) {\n    \t\t//for (int i = 0; i < 200; i++) //20\n    \t\tsvgGraphics.drawImage(bi, bio, 0, 0);\n    \t\t//System.gc(); //22\n    \t}\n   }\n}\n\nIf lines 20 and 22 are uncommented, then the program seems to run forever. I did not experience an OOM exception after running the program for more than an hour.", "id": 125820, "time": "2009-03-26T08:48:01Z", "creator": "liamsb@ca.ibm.com", "creation_time": "2009-03-26T08:48:01Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46863, "attachment_id": null, "text": "(In reply to comment #3)\n> Here is a test case that results in the OOM exception after running for about\n> 10 minutes on my computer:\n> \n[...]\n>         for (;;) {\n>             //for (int i = 0; i < 200; i++) //20\n>             svgGraphics.drawImage(bi, bio, 0, 0);\n>             //System.gc(); //22\n>         }\n[...]\n> \n> If lines 20 and 22 are uncommented, then the program seems to run forever. I\n> did not experience an OOM exception after running the program for more than an\n> hour.\n\nAs far as I know, automatic GC is a low priority task which runs in the background. As you are running this within an infinite loop (\"for (;;)\"), the GC will probably never be allowed a chance to run and therefore the OOM error.\n\nAlso, the fact that explicitely invoking GC seems to work around the issue makes me suggests that this may be an invalid report: it hints that the thing is being garbage collected, maybe just not fast enough. On the other hand, you may not have tested this enough (more than one hour may not have been enough).\n\nI'd suggest making a few experiments (leaving the test application run overnight, using the verbose GC switches [1], etc.) and report results back. There's an interesting article [1] on GC tuning you may be interested in. ;-)\n\n[1] http://www.petefreitag.com/articles/gctuning/", "id": 126387, "time": "2009-04-20T06:40:17Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-04-20T06:40:17Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 46863, "is_private": false, "text": "Hi,\n\nI have run some more tests. Here are the results:\n\nWith the gc() calls, the test case ran out of java heap space after running for almost four hours:\nException in thread \"main\" java.lang.OutOfMemoryError\n\tat java.awt.image.DataBufferInt.<init>(DataBufferInt.java:52)\n\tat java.awt.image.SinglePixelPackedSampleModel.createDataBuffer(SinglePixelPackedSampleModel.java:231)\n\tat sun.awt.image.IntegerInterleavedRaster.<init>(IntegerInterleavedRaster.java)\n\tat sun.awt.image.IntegerInterleavedRaster.createCompatibleWritableRaster(IntegerInterleavedRaster.java:527)\n\tat java.awt.image.AffineTransformOp.createCompatibleDestImage(AffineTransformOp.java:459)\n\tat java.awt.image.AffineTransformOp.filter(AffineTransformOp.java:220)\n\tat org.apache.batik.svggen.SVGGraphics2D.drawImage(SVGGraphics2D.java:995)\n\tat A.main(A.java:21)\n\nSince we are drawing images repeatedly to the SVGGraphics2D, it's not surprising that it eventually runs out of java heap space.\n\nRunning the test case (without the gc() calls) in a profiler shows frequent garbage collection and still crashes within 10 minutes. (I saw between 2-50 garbage collections per 10 second period, and 350+ total collections.)  Thus, it seems unlikely that the OOME is caused by the garbage collector not having a chance to run.\n\nMy understanding is that the jvm will not throw an OutOfMemoryError on an allocation without first running a garbage collection to attempt to free enough space for the allocation.\n\nThe Sun defect (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4797189) explains that the garbage collector is not aware of the native memory associated with the Deflater instances, and therefore does not anticipate that freeing these objects will provide the needed native heap space.", "id": 126410, "time": "2009-04-21T08:09:25Z", "creator": "liamsb@ca.ibm.com", "creation_time": "2009-04-21T08:09:25Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 46863, "is_private": false, "text": "Hi,\n\nAny update on the suggested fix? \n\nThank you.", "id": 127247, "time": "2009-05-21T09:22:23Z", "creator": "akatti@ca.ibm.com", "creation_time": "2009-05-21T09:22:23Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 46863, "is_private": false, "text": "(In reply to comment #6)\n> Any update on the suggested fix? \n\nThomas seems to have addressed this in revision 796596. :-)\n\nI'm not sure if this has caused bug 48693, though, so I'm leaving this issue open until further clarifications are made. :-|", "id": 134750, "time": "2010-02-21T15:58:10Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2010-02-21T15:58:10Z", "attachment_id": null}]
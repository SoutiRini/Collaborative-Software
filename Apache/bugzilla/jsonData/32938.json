[{"count": 0, "attachment_id": null, "bug_id": 32938, "text": "Current implementation of JNDIRealm does not support \"Salted\" SHA passwords.\nSo, if the password was set by iPlaned Admin server - it can't be verified by\nJNDIRealm.\nHere is the patch to make it work.\n\n*** orig/catalina/src/share/org/apache/catalina/realm/JNDIRealm.java\tTue Jan  4\n11:34:07 2005\n---\njakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/realm/JNDIRealm.java\nTue Jan  4 11:16:54 2005\n*************** import javax.naming.directory.SearchCont\n*** 43,48 ****\n--- 43,50 ----\n  import javax.naming.directory.SearchResult;\n  import org.apache.catalina.LifecycleException;\n  import org.apache.catalina.util.Base64;\n+ import org.apache.tomcat.util.buf.ByteChunk;\n+ import org.apache.tomcat.util.buf.CharChunk;\n  \n  \n  /**\n*************** public class JNDIRealm extends RealmBase\n*** 1191,1196 ****\n--- 1193,1231 ----\n                          new String(Base64.encode(md.digest()));\n                      validated = password.equals(digestedPassword);\n                  }\n+             } else if (password.startsWith(\"{SSHA}\")) {\n+                 /* sync since super.digest() does this same thing */\n+                 synchronized (this) {\n+                     password = password.substring(6);\n+ \n+                     md.reset();\n+                     md.update(credentials.getBytes());\n+ \t\t\t\t\t//Decode stored password.\n+                     ByteChunk pwbc = new ByteChunk(password.length());\n+                     try {\n+                         pwbc.append(password.getBytes(), 0, password.length());\n+                     } catch (java.io.IOException e) {\n+                         e.printStackTrace(); //Hopefully will never happen.\n+                     }\n+                     CharChunk decoded = new CharChunk();\n+                     Base64.decode(pwbc, decoded);\n+                     char[] pwarray = decoded.getBuffer();\n+                     // Split decoded password into hash and salt.\n+                     final int saltpos = 20;\n+                     byte[] hash = new byte[saltpos];\n+                     for (int i=0; i< hash.length; i++)\n+                         hash[i] = (byte)pwarray[i];\n+ \n+                     byte[] salt = new byte[pwarray.length - saltpos];\n+                     for (int i=0; i< salt.length; i++)\n+                         salt[i] = (byte)pwarray[i+saltpos];\n+ \n+                     md.update(salt);\n+                     \n+                     byte[] dp = md.digest();\n+ \n+                     validated = java.util.Arrays.equals(dp, hash);\n+                 }\n              } else {\n                  // Hex hashes should be compared case-insensitive\n                  validated = (digest(credentials).equalsIgnoreCase(password));\n*************** public class JNDIRealm extends RealmBase\n*** 1202,1208 ****\n      }\n  \n  \n- \n      /**\n       * Check credentials by binding to the directory as the user\n       *\n--- 1237,1242 ----", "id": 69211, "time": "2005-01-04T17:52:04Z", "creator": "Andrew_Polozov@yahoo.com", "creation_time": "2005-01-04T17:52:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "Andrew_Polozov@yahoo.com", "attachment_id": 13885, "id": 69212, "time": "2005-01-04T17:53:08Z", "bug_id": 32938, "creation_time": "2005-01-04T17:53:08Z", "is_private": false, "text": "Created attachment 13885\nThe patch to make it work."}, {"count": 2, "tags": [], "bug_id": 32938, "attachment_id": null, "id": 2187, "time": "2005-03-23T16:18:05Z", "creator": "yoavs@computer.org", "creation_time": "2005-03-23T16:18:05Z", "is_private": false, "text": "Done for 5.5.9.  Thanks for the contribution.\n\nWhat would really be great is if you wanted to amend the realm-howto doc page to\ninclude the new feature you sent us.  If you do this, please open a separate\nbugzilla issue for the doc enhancement, don't reopen this one.  Thanks!"}]
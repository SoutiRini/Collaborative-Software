[{"count": 0, "tags": [], "text": "I have a configuration file with the following java task:\n\n\n        <java   classname=\"InstallAnywhere\"\n                fork=\"yes\"\n                jvm=\"${installanywhere.home}/jre/bin/jre\"\n                maxmemory=\"128M\">\n            <arg value=\"-b\"/>\n            <arg value=\"${basedir}/iwatchweb.iap\"/>\n            <classpath>\n                <pathelement location=\"${installanywhere.home}/jre/lib/rt.jar\"/>\n                <pathelement location=\"${installanywhere.home}/IAClasses.zip\"/>\n                <pathelement \nlocation=\"${installanywhere.home}/resource/support.zip\"/>\n                <fileset dir=\"${installanywhere.home}/resource\">\n                    <include name=\"*.class\" />\n                </fileset>\n            </classpath>\n        </java>\n\nIf I run Ant using a 1.2 JVM then Ant assumes that the JVM in the Java task has \nthe same version and passes the memory parameter in 1.2 format. This causes an \nerror when the jvm attribute points to a 1.1 JVM, as follows:\n\nCreateInstaller:\n     [java] Forking d:\\progra~1\\instal~1.0en\\jre\\bin\\jre -Xmx128M -classpath \n\"D:\\Program Files\\InstallAnywhere 3.0 Enterprise\\jre\\lib\\rt.jar;D:\\Program \nFiles\\InstallAnywhere 3.0 Enterprise\\IAClasses.zip;D:\\Program \nFiles\\InstallAnywhere 3.0 Enterprise\\resource\\support.zip;D:\\Program \nFiles\\InstallAnywhere 3.0 Enterprise\\resource\\IAKey.class;D:\\Program \nFiles\\InstallAnywhere 3.0 Enterprise\\resource\\__resourceanchor.class\" \nInstallAnywhere -b L:\\Ant/iwatchweb.iap\nExecute:Java11CommandLauncher: d:\\progra~1\\instal~1.0en\\jre\\bin\\jre -Xmx128M \n-classpath '\"D:\\Program Files\\InstallAnywhere 3.0 \nEnterprise\\jre\\lib\\rt.jar;D:\\Program Files\\InstallAnywhere 3.0 \nEnterprise\\IAClasses.zip;D:\\Program Files\\InstallAnywhere 3.0 \nEnterprise\\resource\\support.zip;D:\\Program Files\\InstallAnywhere 3.0 \nEnterprise\\resource\\IAKey.class;D:\\Program Files\\InstallAnywhere 3.0 \nEnterprise\\resource\\__resourceanchor.class\"' InstallAnywhere -b \nL:\\Ant/iwatchweb.iap\n     [java] Illegal option: -Xmx128M\n     [java] Java(tm) Runtime Loader Version 1.1.8\n     [java] Usage: jre [-options] classname [arguments]\n     [java] Options:\n     [java]     -?, -help         print out this message\n     [java]     -v, -verbose      turn on verbose mode\n     [java]     -verbosegc        print a message when garbage collection occurs\n     [java]     -noasyncgc        disable asynchronous garbage collection\n     [java]     -noclassgc        disable class garbage collection\n     [java]     -ss<number>       set the maximum native stack size for any \nthread\n     [java]     -oss<number>      set the maximum Java stack size for any thread\n     [java]     -ms<number>       set the initial Java heap size\n     [java]     -mx<number>       set the maximum Java heap size\n     [java]     -D<name>=<value>  set a system property\n     [java]     -classpath <path> set class path to <path>\n     [java]     -cp <path>        prepend <path> to base class path\n     [java]     -verify           verify all classes when loaded\n     [java]     -verifyremote     verify classes loaded from the network \n(default)\n     [java]     -noverify         do not verify any classes\n     [java]     -nojit            disable JIT compiler\n     [java] Java Result: 1", "attachment_id": null, "bug_id": 2913, "id": 4167, "time": "2001-07-30T20:32:48Z", "creator": "rob.griffin@oz.quest.com", "creation_time": "2001-07-30T20:32:48Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 2913, "text": "One way to handle this would be to allow for a JVMVersion attribute which could \nbe set to \"1.1\" in this case. This new attribute could be used in conjunction \nwith the jvm attribute. If not present, the current behaviour, to assume the \nsame version as Ant, would be used.\n\nAs far as I can tell, the only attribute for which this makes a difference is \nthe MaxMemory attribute. If you know you are going to use a 1.1 VM, you could \nuse a <jvmarg> element in place of the MaxMemory attribute to set the max \nmemory in a way compatible with the JVM\n", "id": 4213, "time": "2001-08-01T06:52:25Z", "creator": "conor@apache.org", "creation_time": "2001-08-01T06:52:25Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "conor@apache.org", "text": "Added jvmVersion attribute to <java> task so that the maxmeory string is \nformatted correctly for the JVM being run. Please try nightly build 2001-08-03", "id": 4239, "attachment_id": null, "bug_id": 2913, "creation_time": "2001-08-02T07:40:29Z", "time": "2001-08-02T07:40:29Z", "is_private": false}]
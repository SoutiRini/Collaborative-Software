[{"count": 0, "tags": [], "bug_id": 54285, "text": "Created attachment 29747\nJava code proposal to escape properly double quotes for MSWindows\n\nI want to pass to some application the following string:\\\\\n{noformat}\n<link rel=\"icon\" type=\"image/png\" size=\"48x48\" href=\"path/to/my/favion.png\" />\n{noformat}\n\nSo I use the following:\\\\\n{noformat} \n<exec executable=\"some_executable.exe\">\n<arg value=\"&lt;link rel=&quote;icon&quote; type=&quote;image/png&quote; size=&quote;48x48&quote; href=&quote;path/to/my/favion.png&quote; /&gt;\"/>\n</exec>\n{noformat}\n\nHowever, the application gets this instead:\\\\\n{noformat}\n<link rel=icon type=image/png size=48x48 href=path/to/my/favion.png />\n{noformat}\n\nDouble quotes were stripped by MSWindows because they were not properly escaped in the command line by Ant.\n\nI wrote a piece of code to do escaping of double quotes properly, and I attached it to the issue. There are two implementation proposed for the double quote escaping, on is based on regexps, and the other is plain character processing --- probably more efficient, but maybe a little more obscure.", "id": 164038, "time": "2012-12-12T19:24:56Z", "creator": "vincent.b.1@hotmail.fr", "creation_time": "2012-12-12T19:24:56Z", "is_private": false, "attachment_id": 29747}, {"count": 1, "tags": [], "bug_id": 54285, "attachment_id": null, "id": 164039, "time": "2012-12-12T19:26:11Z", "creator": "vincent.b.1@hotmail.fr", "creation_time": "2012-12-12T19:26:11Z", "is_private": false, "text": "I had initially submitted the bug to the wrong bug tracer on Jira, and this is why the markup are Jira markups."}, {"count": 2, "tags": [], "creator": "vincent.b.1@hotmail.fr", "attachment_id": null, "text": "One more thing: concerning the quote escaping, the code which I submitted contains two flavours of implementation one in ForcedQuote which is based on plain string manipulations, and one in ConditionalQuote which is based on regexps.\n\nI mention this because in addition ForcedQuote does quoting always, and ConditionalQuote does it only when needed by content. \n\nSo it is a bit confusing as in fact there is no relationship between \"forced versus conditional on content\" quoting on the one hand, and \"based on plain string manipulation versus using regexps\" on the other hand: it would actually be possible to have an implementation doing the quoting only when needed by content and based only on elementary string manipulation, or to have an implementation based on regexp and doing the quoting always.\n\nI provided these two implementation just to show that the problem can be solved in a number of manner depending on what you want to get, and how you want to get it.\n\nPlease note also that I did double quote escaping based on use of backslash, however this is not the sole technique, one can also replace each double quotes by 3 of them, that happen to work as long as there aren't any preceding backslash.", "id": 164230, "time": "2012-12-24T12:10:10Z", "bug_id": 54285, "creation_time": "2012-12-24T12:10:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 54285, "text": "This bug is duplicate with Bug 23273.\n\nI don't know which one should be closed with \"mark as duplicated\" and which one has to be kept alive until the problem is solved.", "id": 165188, "time": "2013-02-12T06:56:17Z", "creator": "vincent.b.1@hotmail.fr", "creation_time": "2013-02-12T06:56:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "vincent.b.1@hotmail.fr", "text": "Hi,\n\nAfter more thoughts I think that the code which I have provided is over-complex, and there is a simpler solution as follows to double-quote a string which is to replace all backslash and double quote respectively by \\\\ and \\\"\n\nExamples:\n\na\\b         is double quoted as \"a\\\\b\"\na\"b         is double quoted as \"a\\\"b\"\na\\\\b        is double quoted as \"a\\\\\\\\b\"\n\"ab\"        is double quoted as \"\\\"ab\\\"\"\n\nthis means that if you call a command like this:\n\nmy-command \"a\\\\b\" \"a\\\"b\" \"a\\\\\\\\b\" \"\\\"ab\\\"\" \n\nthen the argument passed to my-command are the following (one per line):\n\narg 1=a\\b\narg 2=a\"b\narg 4=a\\\\b\narg 5=\"ab\"\n\nOne more nasty stuff is how to quote the percent sign. Imagine that you have an environment variable TOTO that is unset, then\n\nmy-command \"a%TOTO%b\"\n\nwill pass argument 1 as follows\n\narg 1=a%TOTO%b\n\nbut if now TOTO is set to xxx, then the same\n\nmy-command \"a%TOTO%b\"\n\nwill pass\n\narg 1=axxxb\n\nthis is why, not to take any risks percent signs should also be quoted, and the way to do that is to replace any % by ^% outside of the double-quotes so\n\na%TOTO%b is double quoted as \"a\"^%\"TOTO\"^%\"b\"\na%%%b    is double quoted as \"a\"^%^%^%\"b\"\n\nI will prepare some updated code proposal for MSDosQuoter to reflex these new thoughts.", "id": 165411, "time": "2013-02-21T05:19:12Z", "bug_id": 54285, "creation_time": "2013-02-21T05:19:12Z", "is_private": false, "attachment_id": null}]
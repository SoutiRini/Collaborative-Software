[{"count": 0, "tags": [], "text": "Tomcat should end all (Connector-)Threads after a redeployment. This may be\nconfigurable.\n_______________________________________________________\n\nReason for OutOfMemory:\n\nAfter several redeployments I get always an OutOfMemory-Error. Tracking down\nthis bug, I identified several causes, which are widely discussed, eg.\nhttp://www.jroller.com/agileanswers/entry/preventing_java_s_java_lang or\nhttp://opensource.atlassian.com/confluence/spring/pages/viewpage.action?pageId=2669\n\nSeveral of the bug (e.g. Commons Logging) are based on the usage of ThreadLocal.\n\nAdditional, ThreadLocals used in static fields prevents the unloading after a\nredeployment completely:\n\nHttpThread.threadLocal -> Thread$ThreadLocalMap$Entry.fieldValue ->\nOwnClass.$class -> OwnClass.class.classLoader -> \nClassLoader.classes -> OtherClass.myStaticThreadLocal -> myThreadLocal-Instance\n\nwhich prevents the release of myThreadLocal, which is never released as long as\nthe Thread exists. The threadLocal itself is reached through strong references.\n_______________________________________________________\n\nParticular problem with log4j:\n\nNow I get stuck on our configuration of log4j/commonslogging, which holds a\nreference to our (undeployed) webappliation:\n\n      [1634]: 67mb  ApplicationShutdownHooks.class                              \n        hooks: 67mb  IdentityHashMap                            \n          *: 67mb  Catalina$CatalinaShutdownHook \"Thread-52\"                   \n                      \n             server: 66mb  StandardServer                          \n                services: 65mb  Service[]                               \n                  *: 65mb  StandardService \"Catalina\"                           \n                    connectors: 65mb  Connector[]                               \n                      *: 65mb  Connector                                \n                        protocolHandler: 65mb  Http11Protocol                  \n        \n                          tp: 63mb  ThreadPool \"http-8080\"                     \n        \n                            threads: 63mb  Hashtable                            \n                              *: 63mb  ThreadWithAttributes \n                                inheritableThreadLocals: 63mb  \n>                                 *: 31mb  ContextMap                       \norg.apache.log.ContextMap@22e2e6a \n>                                   $class: 31mb  ContextMap.class             \n                class$org.apache.log.ContextMap@de96f9\n                                      $classloader: 31mb  WebappClassLoader    \n                        org.apache.catalina.loader.WebappClassLoader@1b08b90 \n                                        classes: 31mb  Vector                  \n        \n                                          *: 29mb  NewGeoLocator.class\n....\n\n_______________________________________________________\n\nA simple solution for this problem would be the termination of all processing\nthreads. \nAfter every redeployment: \n  - All threads in the pool should be terminated. \n  - Working threads should be terminated instead of putting back into the pool.   \n  - Connection-Keepalives should be terminated if the threads recognizes a\nredeployment.\n\nI know, this solves not the main reason for the OutOfMemory, but its easy to\nimplement and prevents many OutOfMemories due to ThreadLocal problems.\n\nA cleaner solution may be to clear any of the problems in the library\n(log4j/commonslogging) or in the own problem. But even in well designed\nprograms, unexpected exception may skip the cleanup code, unless we write huge\namounts of nested try/finally statements.\n\nSo I suggest simply the termination of all threads after any redeployment with a\nnew configuration option (restartThreadsAfterRedeployment).", "is_private": false, "id": 109388, "creator": "montimcmannus-apache@yahoo.de", "time": "2007-10-16T04:19:48Z", "bug_id": 43636, "creation_time": "2007-10-16T04:19:48Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43636, "attachment_id": null, "is_private": false, "id": 112606, "time": "2008-01-07T16:08:15Z", "creator": "markt@apache.org", "creation_time": "2008-01-07T16:08:15Z", "text": "There have been a number of memory leaks, the most recent one logging related,\nfixed within Tomcat. There have also been changes to a libraries such as\ncommons-logging to better handle the multi-classloader environment of a J2EE\nserver. This fixes/changes will all help.\n\nBy default, org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\nis true which should work around most of the remaining issues.\n\nI would much rather fix a specific issue than add more workarounds that are\nlikely to cause just as many problems as they set out to solve (threads are per\nconnector, not per context, would need to handle long running threads in other\ncontexts etc)\n\nI you have a test case that demonstrates a memory leak with the latest stable\n6.0.x release, please feel free to open a new issue, attach the test case and I\nwill take a look."}]
[{"count": 0, "tags": [], "bug_id": 27717, "attachment_id": null, "text": "SunOS 5.6: J2SE 1.4.2_03: tomcat 5.0.19, JSTL 1.1\n\nVery poor performance when using <x:forEach> in JSTL 1.1.  Did not have this \nproblem in JSTL 1.0 (all other variables the same - os, java version, tomcat \nversion).  I think this only shows when looping on a fairly high number of \nelements though.  My example is about 1750 elements.  Here's my test code:\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %>\n\n<html>\n<body>\n<c:import url=\"WebUI.xml\" varReader=\"raw\">\n    <x:parse var=\"xml\" xml=\"${raw}\"/>\n</c:import>\n<x:forEach select=\"$xml//column\">\n    <x:out select=\".\"/><br>\n</x:forEach>\n</body>\n</html>\n\nHere's a snippet of my data (I don't know if I can put it all):\n\n<?xml version=\"1.0\"?>^M\n<uiData>^M\n    <station name=\"PH_HOLD\" headerColor=\"#FFFFFF\">^M\n        <row color=\"#FFFFFF\">^M\n            <column name=\"_rank\">1</column>^M\n            <column name=\"+ROW\">1</column>^M\n            <column name=\"_lotid\">3324197</column>^M\n            <column name=\"+LOTID\">3324197</column>^M\n            <column name=\"+InProc\" />^M\n            <column name=\"+LP\">6990</column>^M\n            <column name=\"+OPN\">8250</column>^M\n            <column name=\"+DEVICE\">B6A/182514SF5</column>^M\n            <column name=\"+TEST\" />^M\n            <column name=\"+RECIPE\" />^M\n            <column name=\"+RET_FURN\">E363-710</column>^M\n            <column name=\"+THK_TIME\" />^M\n            <column name=\"+TOOL\">XM 16 18 </column>^M\n            <column name=\"+QTY\">22</column>^M\n            <column name=\"+PRI\">2</column>^M\n            <column name=\"+H\">Y</column>^M\n            <column name=\"+T\" />^M\n            <column name=\"+stocker\">WIP73-4</column>^M\n            <column name=\"+LPAge\">1.2</column>^M\n            <column name=\"+LOTSTART\" />^M\n            <column name=\"+TIME REMAIN.\" />^M\n            <column name=\"+LC2\">66</column>^M\n            <column name=\"+Rank\">-991.0</column>^M\n            <column name=\"+Next_BN\">PH_LS66D</column>^M\n            <column name=\"+BNFF\">0.00</column>^M\n            <column name=\"+CR\">3.14</column>^M\n            <column name=\"_assigned\">03/11/04 12:18:33</column>^M\n            <column name=\"_batch\">1</column>^M\n            <column name=\"_site_defined1\">1</column>^M\n            <column name=\"_site_defined2\">PH_HOLD</column>^M\n            <column name=\"_site_defined3\">22</column>^M\n            <column name=\"_site_defined4\">0.0</column>^M\n            <column name=\"_site_defined5\">3.1</column>^M\n            <column name=\"_site_defined6\">Y</column>^M\n            <column name=\"_site_defined7\">6990</column>^M\n            <column name=\"_site_defined8\">B6A/182514SF5</column>^M\n            <column name=\"_site_defined9\">8250</column>^M\n            <column name=\"_site_defined10\">[Not Set]</column>^M\n            <column name=\"_site_defined11\">00:00:00</column>^M\n            <column name=\"_site_defined12\" />^M\n            <column name=\"_site_defined13\">-991.0</column>^M\n            <column name=\"_site_defined14\">01/01/99 00:00:00</column>^M\n            <column name=\"_site_defined15\">NONE</column>^M\n            <column name=\"_site_defined16\">03/10/04 06:32:40</column>^M\n            <column name=\"_site_defined17\">29:45:37</column>^M\n            <column name=\"_site_defined18\" />^M\n            <column name=\"_site_defined19\">03/11/2004 09:00:19</column>^M\n            <column name=\"_site_defined20\" />^M\n            <column name=\"_eqpid\" />^M\n            <column name=\"_site_defined21\" />^M\n        </row>^M\n        <row color=\"#FFFFFF\">^M\n            <column name=\"_rank\">2</column>^M\n            <column name=\"+ROW\">2</column>^M\n            <column name=\"_lotid\">4048139</column>^M\n            <column name=\"+LOTID\">4048139</column>^M\n            <column name=\"+InProc\" />^M\n            <column name=\"+LP\">1960</column>^M\n            <column name=\"+OPN\">8300</column>^M\n            <column name=\"+DEVICE\">D3P/4770FH</column>^M\n            <column name=\"+TEST\" />^M\n            <column name=\"+RECIPE\" />^M\n            <column name=\"+RET_FURN\">E251-178</column>^M\n            <column name=\"+THK_TIME\" />^M \n            <column name=\"+TOOL\">LM 08 07 06 05 </column>^M\n            <column name=\"+QTY\">12</column>^M\n            <column name=\"+PRI\">3</column>^M\n            <column name=\"+H\">F</column>^M\n            <column name=\"+T\" />^M\n            <column name=\"+stocker\">XK101P</column>^M\n            <column name=\"+LPAge\">4.4</column>^M\n            <column name=\"+LOTSTART\" />^M\n            <column name=\"+TIME REMAIN.\" />^M\n            <column name=\"+LC2\">53</column>^M\n            <column name=\"+Rank\">-991.0</column>^M\n            <column name=\"+Next_BN\">PH_LS53D</column>^M\n            <column name=\"+BNFF\">0.00</column>^M\n            <column name=\"+CR\">0.68</column>^M\n            <column name=\"_assigned\">03/11/04 12:18:33</column>^M\n            <column name=\"_batch\">1</column>^M\n            <column name=\"_site_defined1\">2</column>^M\n            <column name=\"_site_defined2\">PH_HOLD</column>^M\n            <column name=\"_site_defined3\">12</column>^M\n            <column name=\"_site_defined4\">0.0</column>^M\n            <column name=\"_site_defined5\">0.7</column>^M\n            <column name=\"_site_defined6\">F</column>^M\n            <column name=\"_site_defined7\">1960</column>^M\n            <column name=\"_site_defined8\">D3P/4770FH</column>^M\n            <column name=\"_site_defined9\">8300</column>^M\n            <column name=\"_site_defined10\">06:14:40:03</column>^M\n            <column name=\"_site_defined11\">00:00:00</column>^M\n            <column name=\"_site_defined12\" />^M\n            <column name=\"_site_defined13\">-991.0</column>^M\n            <column name=\"_site_defined14\">01/01/99 00:00:00</column>^M\n            <column name=\"_site_defined15\">NONE</column>^M\n            <column name=\"_site_defined16\">03/07/04 03:37:12</column>^M\n            <column name=\"_site_defined17\">104:41:05</column>^M\n            <column name=\"_site_defined18\" />^M\n            <column name=\"_site_defined19\">03/09/2004 16:19:53</column>^M\n            <column name=\"_site_defined20\" />^M\n            <column name=\"_eqpid\" />^M\n            <column name=\"_site_defined21\" />^M\n        </row>^M\n        ...\n    </station>^M\n</uiData>^M\n\nAnother thing to note is that when I truss'd the tomcat process while the loop \nwas ongoing, I was seeing errors pointing to a failure to find the \njaxp.properties and xalan.properties files, plus lots of locking, unlocking and \nwaiting.  I see none of this when using JSTL 1.0.  Even after setting system \nproperties to define the parser and xslt paths, the performance was poor.  Here \nis what I've seen with truss:\n\nstat64(\"/usr/j2sdk1.4.2_03/jre/lib/jaxp.properties\",0xDF97FFF8) Err#2 ENOENT\nstat64(\"/usr/j2sdk1.4.2_03/jre/lib/xalan.properties\", 0xDF47F850) Err#2 ENOENT\nlwp_mutex_lock(0x0002E7E0)                      = 0\nlwp_mutex_unlock(0x0002E7E0)                    = 0\nlwp_mutex_lock(0x0002E710)                      = 0\nlwp_cond_wait(0x0002E728, 0x0002E710, 0x00000000) = 0\nlwp_cond_broadcast(0x0002E728)                  = 0\nlwp_mutex_unlock(0x0002E778)                    = 0\nlwp_mutex_lock(0x0002E778)                      = 0\nlwp_cond_broadcast(0x0002E860)                  = 0\nlwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\nlwp_mutex_unlock(0x0002E848)                    = 0\nlwp_mutex_lock(0x0002E848)                      = 0\npoll(0xE997FBC0, 0, 50)                         = 0\npoll(0xE997FBC0, 0, 50)                         = 0\nlwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\nlwp_cond_signal(0x0002E7F8)                     = 0\nlwp_cond_broadcast(0x0002E860)                  = 0\nlwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\npoll(0xE997FBC0, 0, 50)                         = 0\npoll(0xE997FBC0, 0, 50)                         = 0\npoll(0xE997FBC0, 0, 50)                         = 0\nlwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n\n\nThanks for the help,\nChris Johnson", "id": 54089, "time": "2004-03-16T17:27:15Z", "creator": "chrisjohnson@ti.com", "creation_time": "2004-03-16T17:27:15Z", "is_private": false}, {"count": 1, "tags": [], "creator": "kschneider@gmail.com", "attachment_id": null, "is_private": false, "id": 54093, "time": "2004-03-16T18:22:58Z", "bug_id": 27717, "creation_time": "2004-03-16T18:22:58Z", "text": "Couple of comments:\n\nPrevious id of problem:\nhttp://www.mail-archive.com/taglibs-user@jakarta.apache.org/msg06308.html\n\nTemporary workaround (use XSLT and <x:transform>):\nhttp://www.mail-archive.com/taglibs-user@jakarta.apache.org/msg06337.html\n\nI certainly don't have my head completely around the codebase, but it appears\nthat Standard 1.1 is using an approach that leverages Xalan's XPathAPI as\nopposed to CachedXPathAPI. As a data point, I put together a test using an XML\nfile like:\n\n<root>\n    <child/>\n    <child/>\n    <!-- about 1400 total children -->\n    ...\n</root>\n\nand two code variations:\n\n#1\n--\nDocument doc = ...;\nString xpathStr = \"//child\";\nCachedXPathAPI cachedXPath = new CachedXPathAPI();\nNodeIterator i = cachedXPath.selectNodeIterator(doc, xpathStr);\nMap values = new TreeMap();\nint count = 1;\nlong now = System.currentTimeMillis();\nfor (Node node = i.nextNode(); node != null; node = i.nextNode()) {\n  XObject xo = cachedXPath.eval(node, \".\");\n  values.put(new Integer(count), xo);\n  count++;\n}\nlong delta = System.currentTimeMillis() - now;\nSystem.out.println(\"duration: \" + delta + \"ms\");\n\n#2\n--\nDocument doc = ...;\nString xpathStr = \"//child\";\nNodeIterator i = XPathAPI.selectNodeIterator(doc, xpathStr);\nMap values = new TreeMap();\nint count = 1;\nlong now = System.currentTimeMillis();\nfor (Node node = i.nextNode(); node != null; node = i.nextNode()) {\n  XObject xo = XPathAPI.eval(node, \".\");\n  values.put(new Integer(count), xo);\n  count++;\n}\nlong delta = System.currentTimeMillis() - now;\nSystem.out.println(\"duration: \" + delta + \"ms\");\n\nRunning on WinXP with Sun's JDK 1.4.2_03 plus Xerces 2.6.2 and Xalan 2.6.0, the\nCachedXPathAPI test completes in under 700ms. The XPathAPI test threw an\nOutOfMemoryError. I had to use -Xmx256 (it failed with 220!) and then it\ncompleted in just under 10000ms.\n\nAgain, I haven't spent the time in the codebase to say whether this is truly\nequivalent to how Standard 1.1 is using Xalan, but if it is, it looks like a\nmemory issue in addition to a performance issue."}, {"count": 2, "tags": [], "text": "CC'ing the taglibs-dev address to all Standard bugs. ", "is_private": false, "bug_id": 27717, "id": 57248, "time": "2004-05-12T00:26:51Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-12T00:26:51Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 27717, "is_private": false, "text": "We have noticed that x:set also appears very slow.\n\nSHould I file this as a seperate issue", "id": 57265, "time": "2004-05-12T07:04:57Z", "creator": "mike.skells@ebizz-consulting.com", "creation_time": "2004-05-12T07:04:57Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 27717, "attachment_id": null, "id": 57271, "time": "2004-05-12T08:58:28Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-12T08:58:28Z", "is_private": false, "text": "Hi Mike,\n\nYes, please fill a new bug, preferably with instructions on how to reproduce it.\n\nIf we later realize the new bug is caused by the same problem , we can mark it\nthen as duplicated of this one.\n\nThanks,\n\nFelipe"}, {"count": 5, "tags": [], "creator": "justyna.horwat@sun.com", "text": "Created attachment 12261\nTest xforeach jsp file", "id": 61331, "time": "2004-07-29T20:27:25Z", "bug_id": 27717, "creation_time": "2004-07-29T20:27:25Z", "is_private": false, "attachment_id": 12261}, {"count": 6, "tags": [], "bug_id": 27717, "attachment_id": 12262, "text": "Created attachment 12262\nTest xtransform jsp file", "id": 61332, "time": "2004-07-29T20:27:55Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-07-29T20:27:55Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 12263\nTest xml file", "attachment_id": 12263, "bug_id": 27717, "id": 61333, "time": "2004-07-29T20:28:23Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-07-29T20:28:23Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 27717, "attachment_id": 12264, "text": "Created attachment 12264\nTest xsl file", "id": 61334, "time": "2004-07-29T20:28:55Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-07-29T20:28:55Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 27717, "attachment_id": null, "text": "Justyna,\n\nI prepared two test cases which show the difference\nin execution time between en x:forEach loop and an x:transform.\n\nJust try them.\n\nTest_xforeach.jsp uses Test.xml as input. (countains xml data)\n\nTest_xtransform.jsp uses Test.xml as input and Test.xsl as stylesheet.\n\nWith jstl 1.1 things become problematic for the x:foreach loop\n\nThe x:foreach loop with jstl 1.0 gives the same,good, response times\nas the x:transform in jstl 1.1\n\nRegards\nWim\n\nps : the jsp files are send as .txt as attachment. You have to rename them.\n\n\n\n-----Oorspronkelijk bericht-----\nVan: Justyna Horwat\nVerzonden: woensdag 28 juli 2004 19:36\nAan: Tag Libraries Users List\nOnderwerp: Re: JSTL 1.1 jaxp problem (under tomcat 5.0.19/java 1.4.2_03)\n\n\nHi Wim,\n\nHave you tried the following to avoid the property file lookups? What\nwere the results when you set the following properties?\n\n----\njaxp.properties file lookup:\n\n\nJAVA_OPTS=\"$JAVA_OPTS\n-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBu\nilderFactoryImpl\"\n\n\nLookup procedure (for my own reference):\nhttp://java.sun.com/j2se/1.4.2/docs/api/javax/xml/parsers/DocumentBuilderFac\ntory.html#newInstance()\n\n----\n\nxalan.properties file lookup:\n\n\nJAVA_OPTS=\"$JAVA_OPTS\n-Dorg.apache.xml.dtm.DTMManager=org.apache.xml.dtm.ref.DTMManagerDefault\"\n\n\nLookup procedure (for my own reference):\nhttp://xml.apache.org/xalan-j/apidocs/org/apache/xml/dtm/DTMManager.html#new\nInstance(org.apache.xml.utils.XMLStringFactory)\n----\n\nThanks,\n\nJustyna\n\nWim Goossens wrote:\n\n\n>> Chris, Kris, Pierre,\n>>\n>> Do you know anything about a fix for this problem ?\n>> I also submitted a bug report, probably at the wrong place,\n>> in february. No solution so far.\n>> http://developer.java.sun.com/developer/bugParade/bugs/4993200.html\n>>\n>> Regards,\n>> Wim\n>>\n>>\n>>\n>> -----Oorspronkelijk bericht-----\n>> Van: Johnson, Chris\n>> Verzonden: dinsdag 16 maart 2004 18:29\n>> Aan: Tag Libraries Users List\n>> Onderwerp: RE: JSTL 1.1 jaxp problem (under tomcat 5.0.19/java 1.4.2_03)\n>>\n>>\n>> Thanks for all of the help so far.\n>>\n>> I submitted bug 27717.\n>>\n>> Chris\n>>\n>> -----Original Message-----\n>> From: Pierre.Delisle\n>> Sent: Tuesday, March 16, 2004 10:58 AM\n>> To: Tag Libraries Users List\n>> Subject: Re: JSTL 1.1 jaxp problem (under tomcat 5.0.19/java 1.4.2_03)\n>>\n>>\n>> Yes, as Kris mentioned, please file a bug report with proper test cases.\n>> We'll have a look into it.\n>>\n>>     -- Pierre\n>>\n>> Kris Schneider wrote:\n>>\n>>\n>\n>>>>You're posting to the right place to make people aware of the problem.\n>\n>>\n>>\n>\n>>>>To formalize the issue, a bug report should probably get submitted:\n>>>>\n>>>>http://issues.apache.org/bugzilla/enter_bug.cgi?product=Taglibs\n>>>>\n>>>>As part of the report, it would be helpful to include a simplified\n>>>>test case (XML and JSP files) that reproduces the problem. If you have\n>\n>>\n>>\n>\n>>>>any questions about the bug submission process just let me (us) know.\n>>>>At this point, the problem seems to be either the way JSTL is using\n>>>>Xalan or Xalan itself.\n>>>>\n>>>>Quoting \"Johnson, Chris\" <chrisjohnson>:\n>>>>\n>>>>\n>>>>\n>>\n>>>>>>That gets rid of the xalan file search, but the performance is still\n>>>>>>awful.  For now I guess I'll try to look into xslt, but this looks\n>>>>>>like a bug that needs to be fixed or something.  Who else needs to\n>>>>>>know about this to get it either fixed, or to tell me what else I\n>>>>>>might be doing wrong (if anything).  Here's more of what truss is\n>>>>>>spitting out if that\n>>>>>>helps:\n>>>>>>\n>>>>>>lwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n>>>>>>lwp_cond_signal(0x0002E7F8)                     = 0\n>>>>>>lwp_mutex_lock(0x0002E7E0)                      = 0\n>>>>>>lwp_mutex_unlock(0x0002E7E0)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E710)                      = 0\n>>>>>>lwp_cond_wait(0x0002E728, 0x0002E710, 0x00000000) = 0\n>>>>>>lwp_cond_broadcast(0x0002E728)                  = 0\n>>>>>>lwp_mutex_unlock(0x0002E778)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E778)                      = 0\n>>>>>>lwp_cond_broadcast(0x0002E860)                  = 0\n>>>>>>lwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\n>>>>>>lwp_mutex_unlock(0x0002E848)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E848)                      = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>lwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n>>>>>>lwp_cond_signal(0x0002E7F8)                     = 0\n>>>>>>lwp_cond_broadcast(0x0002E860)                  = 0\n>>>>>>lwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>lwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n>>>>>>lwp_cond_signal(0x0002E7F8)                     = 0\n>>>>>>lwp_cond_broadcast(0x0002E860)                  = 0\n>>>>>>lwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>lwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n>>>>>>lwp_cond_signal(0x0002E7F8)                     = 0\n>>>>>>lwp_cond_broadcast(0x0002E860)                  = 0\n>>>>>>lwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\n>>>>>>lwp_mutex_unlock(0x0002E848)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E848)                      = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>lwp_cond_wait(0x0002E7F8, 0x0002E7E0, 0xEC681B08) = 0\n>>>>>>lwp_cond_signal(0x0002E7F8)                     = 0\n>>>>>>lwp_mutex_lock(0x0002E7E0)                      = 0\n>>>>>>lwp_mutex_unlock(0x0002E7E0)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E710)                      = 0\n>>>>>>lwp_cond_wait(0x0002E728, 0x0002E710, 0x00000000) = 0\n>>>>>>lwp_cond_broadcast(0x0002E728)                  = 0\n>>>>>>lwp_mutex_unlock(0x0002E778)                    = 0\n>>>>>>lwp_mutex_lock(0x0002E778)                      = 0\n>>>>>>lwp_mutex_lock(0x0002E848)                      = 0\n>>>>>>lwp_cond_broadcast(0x0002E860)                  = 0\n>>>>>>lwp_cond_wait(0x0002E860, 0x0002E848, 0x00000000) = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>poll(0xE997FBC0, 0, 50)                         = 0\n>>>>>>\n>>>>>>It looks like a lot of locking, unlocking and waiting to me, but what\n>>>>>>do I know?\n>>>>>>\n>>>>>>Any help you can get me in escalating this would be much appreciated.\n>>>>>>\n>>>>>>Thanks again,\n>>>>>>Chris\n>>>>>>\n>>>>>>-----Original Message-----\n>>>>>>From: Kris Schneider []\n>>>>>>Sent: Monday, March 15, 2004 3:37 PM\n>>>>>>To: Tag Libraries Users List\n>>>>>>Subject: RE: JSTL 1.1 jaxp problem (under tomcat 5.0.19/java 1.4.2_03)\n>>>>>>\n>>>>>>\n>>>>>>Try adding\n>>>>>>-Dorg.apache.xml.dtm.DTMManager=org.apache.xml.dtm.ref.DTMManagerDefau\n>>>>>>lt\n>>>>>>to JAVA_OPTS.\n>>>>>>\n>>>>>>Quoting \"Johnson, Chris\" <chrisjohnson@ti.com>:\n>>>>>>\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>Thanks, Kris.\n>>>>>>>>\n>>>>>>>>I did all that you suggested (setting the system properties and\n>>>>>>>>installing new jars), and indeed tomcat doesn't seem to be searching\n>>>>>>>>for the jaxp.properties file any longer.  But, the performance is\n>>>>>>>>still just about as bad as before.  So, I did truss again and now\n>>>>>>>>tomcat is looking for xalan.properties\n>>>>>>>>(stat64(\"/usr/j2sdk1.4.2_03/jre/lib/xalan.properties\", 0xDF47F850)\n>>>>>>>>Err#2 ENOENT), just about as much, if not more, than it was for\n>>>>>>>>jaxp.properties.  So how can I fix this?\n>>>>>>>>\n>>>>>>>>Chris\n>>>>>>>>\n>>>>>>>>-----Original Message-----\n>>>>>>>>From: Kris Schneider []\n>>>>>>>>Sent: Monday, March 15, 2004 2:32 PM\n>>>>>>>>To: Tag Libraries Users List\n>>>>>>>>Subject: Re: JSTL 1.1 jaxp problem (under tomcat 5.0.19/java\n>>>>>>>>1.4.2_03)\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>Interesting. <x:forEach> has been tagged as a performance problem\n>>>>>>>>before for JSTL 1.1, but without the accompanying truss info. The\n>>>>>>>>XPath engine for JSTL was changed from Jaxen/SAXPath in 1.0 to Xalan\n>>>>>>>>in 1.1. If you can replace <x:forEach> with <x:transform> and an XSLT\n>\n>>\n>>\n>\n>>>>>>>>stylesheet, that seemed to help with the last performance issue.\n>>>>>>>>Otherwise, you could try explicitly configuring JAXP by setting the\n>>>>>>>>appropriate system properties (assuming Xerces and Xalan):\n>>>>>>>>\n>>>>>>>>env\n>>>>>>>>JAVA_OPTS=\"-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerc\n>\n>>\n>> e\n>>\n>\n>>>>>>>>s.\n>>>>>>>>jaxp.DocumentBuilderFactoryImpl\n>>>>>>>>\n>>>\n>>>>>>\n>>>>>>-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserF\n>>>>>>ac\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>toryImpl\n>>>>>>>>\n>>>\n>>>>>>\n>>>>>>-Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.Tr\n>>>>>>an\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>sformerFactoryImpl\"\n>>>>>>>>$CATALINA_HOME/bin/startup.sh\n>>>>>>>>\n>>>>>>>>That way, jaxp.properties should never be searched for. You may also\n>>>>>>>>want to download the latest Xalan release and dump the following in\n>>>>>>>>$CATALINA_HOME/common/endorsed:\n>>>>>>>>\n>>>>>>>>xalan.jar\n>>>>>>>>xercesImpl.jar\n>>>>>>>>xml-apis.jar\n>>>>>>>>\n>>>>>>>>Quoting \"Johnson, Chris\" <chrisjohnson>:\n>>>>>>>>\n>>>>>>>>\n>>>>>>>>\n>>>>\n>>>>>>>>>>Hello,\n>>>>>>>>>>\n>>>>>>>>>>I'm new to the world of JSP/JSTL, but have managed to get some code\n>>>>>>>>>>running under tomcat 4.1.29 (bundled with jboss 3.2.3 - as I'm using\n>>>\n>>>>>>\n>>>\n>>>>>>>>>>JMS too)/JSTL 1.0.  I'm using java 1.4.2_03.\n>>>>>>>>>>\n>>>>>>>>>>I'm using only the c and x libraries currently, but wanted to use\n>>>>>>>>>>the\n>>>>>>>>>>new EL functions of JSTL 1.1, so I installed tomcat 5.0.19 alongside\n>>>\n>>>>>>\n>>>\n>>>>>>>>>>the previously mentioned jboss/tomcat versions.\n>>>>>>>>>>\n>>>>>>>>>>I've gotten the code to run under the new tomcat, but the\n>>>>>>>>>>performance\n>>>>>>>>>>is terrible.  I've narrowed the performance problem down to any\n>>>>>>>>>><x:forEach> loop.  There wasn't anything of interest in the tomcat\n>>>>>>>>>>log, so I did a truss on the tomcat process, and found it spitting\n>>>\n>>>>>>\n>>>>>>out\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>>>this error over and over:\n>>>>>>>>>>stat64(\"/usr/j2sdk1.4.2_03/jre/lib/jaxp.properties\",\n>>>>>>>>>>0xDF97FFF8) Err#2 ENOENT.  I understand this to be tomcat looking\n>>>\n>>>>>>\n>>>>>>for\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>>>the jaxp.properties file and not finding it.  I never saw this error\n>\n>>\n>>\n>\n>>>>>>>>>>message while trussing the tomcat 4.1.29 process, and it processes\n>>>\n>>>>>>\n>>>>>>the\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>>>xml extremely quickly.\n>>>>>>>>>>\n>>>>>>>>>>With the older tomcat and JSTL 1.0, I didn't have to do any special\n>>>>>>>>>>configuration of jaxp (I understood that to be built into java\n>>>>>>>>>>1.4.2x), so I figured it would be the same with the newer tomcat,\n>>>\n>>>>>>\n>>>>>>but\n>>>>>>\n>>>>>>\n>>>\n>>>>>>>>>>I guess not.\n>>>>>>>>>>\n>>>>>>>>>>So far I've tried setting parser system properties in the web.xml\n>>>>>>>>>>and\n>>>>>>>>>>in files under META-INF with no change.  What am I missing?  If\n>>>>>>>>>>someone can just point me to some good docs on the subject, I'd\n>>>>>>>>>>appreciate it greatly.\n>>>>>>>>>>\n>>>>>>>>>>Thanks,\n>>>>>>>>>>Chris Johnson\n", "id": 61335, "time": "2004-07-29T20:31:31Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-07-29T20:31:31Z", "is_private": false}, {"count": 10, "tags": [], "creator": "rahul@apache.org", "text": "*** Bug 33297 has been marked as a duplicate of this bug. ***", "id": 80416, "time": "2005-09-24T16:53:35Z", "bug_id": 27717, "creation_time": "2005-09-24T16:53:35Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "*** Bug 40717 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 27717, "id": 95503, "time": "2006-11-06T15:36:23Z", "creator": "bayard@apache.org", "creation_time": "2006-11-06T15:36:23Z", "is_private": false}, {"count": 12, "tags": [], "text": "See the suggested fix in 40717.", "is_private": false, "bug_id": 27717, "id": 96625, "time": "2006-12-07T12:02:23Z", "creator": "bayard@apache.org", "creation_time": "2006-12-07T12:02:23Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 27717, "attachment_id": null, "text": "Ignore the fix suggestion in 40717 - I believe it is really just suggesting a\nchange that would be akin to reverting back to CachedXPathUtil. ", "id": 111622, "time": "2007-12-10T22:49:00Z", "creator": "bayard@apache.org", "creation_time": "2007-12-10T22:49:00Z", "is_private": false}, {"count": 14, "tags": [], "creator": "bayard@apache.org", "attachment_id": null, "is_private": false, "id": 111629, "time": "2007-12-11T01:28:07Z", "bug_id": 27717, "creation_time": "2007-12-11T01:28:07Z", "text": "Pushing this a bit - I don't think the problem is in x:foreach. I think it's in\nx:out. x:foreach executes relatively quickly, but then each execution of x:out\nis not cheap and it's adding up as the loop gets bigger.\n\nPresumably running the following is hurting:\n\n        XPathUtil xu = new XPathUtil(pageContext);\n        String result = xu.valueOf(XPathUtil.getContext(this), select);\n\nDigging into valueOf leads to agreement with David Winterbourne's comment in\n40717 that the problem is in fillVarStack. It's in valueOf too and definitely\nlooks like a culprit. So apologies for my last comment on 40717 being akin to\nCachedXPathAPI. That just caches the xpathSupport variable.\n\nLooking at the speed of things, I've not found where the slow down is yet. There\nare times when there are large chunks of slow down (100 milliseconds), which\nmight be GC due to massive object creation. Also over time the general time\ntaken on each eval call slowly rises, although still only to 10 milliseconds. \n\nObviously I need to test in a profiler etc."}, {"count": 15, "tags": [], "bug_id": 27717, "attachment_id": null, "id": 111968, "time": "2007-12-20T18:52:39Z", "creator": "kschneider@gmail.com", "creation_time": "2007-12-20T18:52:39Z", "is_private": false, "text": "(In reply to comment #14)\n> Obviously I need to test in a profiler etc.\n\nSpeaking of which, I just grabbed NB6 and set up Standard 1.0.6 and Standard\n1.1.2 projects to get a better idea of the performance difference. Using the\nTest.xml attached a few years back and the following loop:\n\n<% long start = System.currentTimeMillis(); %>\n<x:forEach select=\"$doc//countries/country\">\ncountry id: <x:out select=\"id\"/>\ncountry description: <x:out select=\"description\"/>\ncountry countrycode: <x:out select=\"countrycode\"/>\ncountry carcode: <x:out select=\"carcode\"/>\ncountry nationality: <x:out select=\"nationality\"/>\n</x:forEach>\n<% long delta = System.currentTimeMillis() - start; out.println(\"Duration: \" +\ndelta + \"ms\"); %>\n\nHere's what I got:\nStandard 1.0.6: ~150ms\nStandard 1.1.2: ~16000ms\n\nI'm running JDK 1.5.0_12, Xalan 2.7.0, Xerces 2.7.1, Tomcat 5.5.23, and WinXP SP2."}, {"count": 16, "tags": [], "creator": "bayard@apache.org", "attachment_id": null, "is_private": false, "id": 112568, "time": "2008-01-06T22:26:04Z", "bug_id": 27717, "creation_time": "2008-01-06T22:26:04Z", "text": "Profiling, all the time is spent in the following line:\n\n            int ctxtNode = xpathSupport.getDTMHandleFromNode(contextNode);\n\nThe Javadoc for this method notes that it is non-optimal [wheee].\n\nReading CachedXPathAPI, what it does is cache the DTMManager, so definitely\nmakes sense that switching back to CachedXPathAPI will fix the slowness of x:out.\n\nAs there's no JSTL API to modify the DOM, I don't see any reason not to use\nCachedXPathAPI - except for the memory issue of caching and figuring out where\nin the lifecycle to remove it.\n\nGiven that this is only a notable problem for x:out in x:foreach, it would seem\nthat we need to attach the cache to the x:foreach start/close cycle, and have\nthe x:out notice that its session has such a thing.\n\nTime to poke around in the code."}, {"count": 17, "tags": [], "creator": "bayard@apache.org", "attachment_id": null, "is_private": false, "id": 112569, "time": "2008-01-06T23:15:02Z", "bug_id": 27717, "creation_time": "2008-01-06T23:15:02Z", "text": "The src/org/apache/taglibs/standard/tag/common/xml/ForEachTag.java class needs\nto cache its XPathUtil object in setAttribute (default page scope), and tell\nXPathUtil to use CachedJSTLXPathAPI rather than JSTLXPathAPI.\n\nAdditionally, XPathUtil needs that change, and a CachedJSTLXPathAPI needs to\nexist that includes all the changes that JSTLXPathAPI has had from Xalan's XPathAPI.\n\nExprSupport needs to be changed to (somehow) find the XPathUtil and use it\ninstead of making a new one. Presumably this can be attached to the forEach's\nvar attribute (and whatever system is used to handle nested var's with the same\nname (such as default name).\n\n---\n\nMaybe. I think the problem with all that is that x:foreach is supplying a new\nnode each time around. We need to cache the original node, and adjust the x:out\nby appending(?) it to the x:foreach pattern each time. That all seems very dodgy.\n\nCachedXPathAPI says that:  \"A faster way is to precompile the XPaths using the\nlow-level API, and then just use the XPaths over and over\". That sounds quite\nattractive - each x:out could precompile an XPath and run it on its node. The\npain there is figuring out how to use the low level XPath API."}, {"count": 18, "tags": [], "bug_id": 27717, "attachment_id": null, "text": "(In reply to comment #17)\n> CachedXPathAPI says that:  \"A faster way is to precompile the XPaths using the\n> low-level API, and then just use the XPaths over and over\". That sounds quite\n> attractive - each x:out could precompile an XPath and run it on its node. The\n> pain there is figuring out how to use the low level XPath API.\n\nJava5 introduced a standard XPath API that supports pre-compilation of XPath expressions. How about parsing the supplied XPath in the setter for the tag attribute and relying on tag pooling to avoid unnecessary recompilations?\n\nThe API also provides for a XPathVariableResolver that could work with the ELResolver to handle variables present in the XPath expressions.", "id": 138141, "time": "2010-07-04T21:28:58Z", "creator": "jboynes@apache.org", "creation_time": "2010-07-04T21:28:58Z", "is_private": false}, {"count": 19, "tags": [], "text": "Created attachment 25749\nUpdate ExprSupport to use JAXP", "is_private": false, "bug_id": 27717, "id": 138345, "time": "2010-07-11T01:18:30Z", "creator": "jboynes@apache.org", "creation_time": "2010-07-11T01:18:30Z", "attachment_id": 25749}, {"count": 20, "tags": [], "creator": "jboynes@apache.org", "attachment_id": 25750, "is_private": false, "id": 138346, "time": "2010-07-11T01:19:20Z", "bug_id": 27717, "creation_time": "2010-07-11T01:19:20Z", "text": "Created attachment 25750\nSupporting variable resolver"}, {"count": 21, "tags": [], "bug_id": 27717, "attachment_id": 26445, "id": 142929, "time": "2010-12-23T15:11:18Z", "creator": "jboynes@apache.org", "creation_time": "2010-12-23T15:11:18Z", "is_private": false, "text": "Created attachment 26445\nPatch to use JAXP XPath support\n\nPatch attached to abstract the XPath API and provide an implementation using JAXP XPath.\n\nHowever, there is a issue with <x:set> as it does not appear JAXP's XPath class can return the actual result type of the XPath expression - it requires coercion to specific return type. This breaks the contract for <x:set> where the variable needs to be set to the actual return type."}, {"count": 22, "tags": [], "creator": "jboynes@apache.org", "text": "Created attachment 26448\nPatch for XPath using Xalan API\n\nContinuation of patch 26445 with addition of a Xalan based implementation.", "id": 142955, "time": "2010-12-27T14:18:26Z", "bug_id": 27717, "creation_time": "2010-12-27T14:18:26Z", "is_private": false, "attachment_id": 26448}, {"count": 23, "tags": [], "bug_id": 27717, "attachment_id": 26452, "id": 143013, "time": "2010-12-30T22:06:15Z", "creator": "jboynes@apache.org", "creation_time": "2010-12-30T22:06:15Z", "is_private": false, "text": "Created attachment 26452\nUpdated patch using Xalan directly\n\nSimplified patch that just uses the low-level Xalan APIs directly."}, {"count": 24, "tags": [], "bug_id": 27717, "attachment_id": null, "id": 143018, "time": "2010-12-31T18:18:43Z", "creator": "jboynes@apache.org", "creation_time": "2010-12-31T18:18:43Z", "is_private": false, "text": "Fixed in revision 1054175\nRefactored XPath support to use Xalan low-level APIs directly.\n\nPerformance for large data sets scales with n^2 due to Xalan constructing a backing array for the iterator with a monotonic block size causing multiple calls to System.arrayCopy(). On a 2006 generation MacBookPro iterating 100000 elements takes ~1600ms."}, {"count": 25, "tags": [], "text": "Reverting spam changes", "attachment_id": null, "bug_id": 27717, "id": 162581, "time": "2012-10-05T10:23:01Z", "creator": "markt@apache.org", "creation_time": "2012-10-05T10:23:01Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "creator": "y.shahun@gmail.com", "text": "Adding conditional formatting with certain set of ranges gets stuck in endless loop.\n\nTest code to reproduce:\n\nWorkbook workbook = new HSSFWorkbook();\nSheet sheet = workbook.createSheet();\nCellRangeAddress[] ranges = new CellRangeAddress[] {\n    CellRangeAddress.valueOf(\"C9:D30\"), CellRangeAddress.valueOf(\"C7:C31\")\n};\nConditionalFormattingRule rule = sheet.getSheetConditionalFormatting().createConditionalFormattingRule(\"$A$1>0\");\nsheet.getSheetConditionalFormatting().addConditionalFormatting(ranges, rule);\n\nDebugging shows that code gets stuck in org.apache.poi.hssf.record.cf.CellRangeUtil.mergeCellRanges(List) method on repeated merging/unmerging regions.", "count": 0, "id": 169263, "time": "2013-08-07T18:29:59Z", "bug_id": 55380, "creation_time": "2013-08-07T18:29:59Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "text": "Does this happen for XSSF too? (That'll help us narrow down if it's common code that's broken, or HSSF specific code that's the problem)", "count": 1, "id": 169316, "time": "2013-08-08T23:01:28Z", "bug_id": 55380, "creation_time": "2013-08-08T23:01:28Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55380, "text": "I verified that this happens for XSSF too because the same CellRangeUtil class is used.", "id": 169317, "time": "2013-08-08T23:56:15Z", "creator": "y.shahun@gmail.com", "creation_time": "2013-08-08T23:56:15Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Stacktrace when it hangs: \n\n\tCellRangeUtil.mergeCellRanges(List) line: 118\t\n\tCellRangeUtil.mergeCellRanges(CellRangeAddress[]) line: 101\t\n\tCFHeaderRecord.<init>(CellRangeAddress[], int) line: 45\t\n\tCFRecordsAggregate.<init>(CellRangeAddress[], CFRuleRecord[]) line: 72\t\n\tHSSFSheetConditionalFormatting.addConditionalFormatting(CellRangeAddress[], HSSFConditionalFormattingRule[]) line: 155\t\n\tHSSFSheetConditionalFormatting.addConditionalFormatting(CellRangeAddress[], HSSFConditionalFormattingRule) line: 172\t\n\tHSSFSheetConditionalFormatting.addConditionalFormatting(CellRangeAddress[], ConditionalFormattingRule) line: 182\t\n\tTestHSSFConditionalFormatting(BaseTestConditionalFormatting).testBug55380() line: 698", "attachment_id": null, "bug_id": 55380, "id": 169321, "time": "2013-08-09T12:27:55Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-08-09T12:27:55Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 55380, "text": "A simplified reproducer is as follows:\n\n    public void testMergeCellRanges55380() {\n        CellRangeAddress cr1 = CellRangeAddress.valueOf(\"C9:D30\");\n        CellRangeAddress cr2 = CellRangeAddress.valueOf(\"C7:C31\");\n        CellRangeAddress[] cr3 = CellRangeUtil.mergeCellRanges(new CellRangeAddress[]{cr1, cr2});   // endless loop...\n        assertEquals(2, cr3.length);\n        assertEquals(\"C9:D30\", cr3[0].formatAsString());\n        assertEquals(\"C7:C31\", cr3[1].formatAsString());\n    }", "id": 169322, "time": "2013-08-09T13:11:03Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-08-09T13:11:03Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "dominik.stadler@gmx.at", "is_private": false, "count": 5, "id": 169327, "time": "2013-08-09T15:12:05Z", "bug_id": 55380, "creation_time": "2013-08-09T15:12:05Z", "text": "It happens with Overlapping Regions (i.e. not enclosing/inside and not no_intersection), the handling of this case is quite complex and seems to be buggy, I would propose to simply remove this for now as it only would be able to merge some rare cases and obviously does not do that well anyway right now. \n\nAny objections to the removal of this code-pieces, i.e. resolveRangeOverlap() and related methods?"}, {"count": 6, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "text": "For now I have removed merging of overlapping regions to avoid the endless loops in the implementation of the mergeCellRanges(). None of the unit tests stepped into the method, so the code was untested and probably never fully worked at all or was broken sometimes back by other changes.", "id": 169373, "time": "2013-08-12T19:24:50Z", "bug_id": 55380, "creation_time": "2013-08-12T19:24:50Z", "is_private": false}]
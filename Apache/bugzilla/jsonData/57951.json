[{"count": 0, "text": "JDK8 corrected some rounding issues with NumberFormat/DecimalFormat that effect some number formatting while processing Excel files. (See http://stackoverflow.com/questions/22797964/is-inconsistency-in-rounding-between-java-7-and-java-8-a-bug). These problems are noticed when not using BigDecimal.\n\nIf I add the Junit mod below to org.apache.poi.ss.usermodel.TestDataFormatter, it passes with JDK6, but fails with JDK8.\n\n    public void testRounding() {\n        DataFormatter dfUS = new DataFormatter(Locale.US);\n\n        assertEquals(\"13.90\", dfUS.formatRawCellContents(13.895, 2, \"0.00\"));\n        assertEquals(\"13.91\", dfUS.formatRawCellContents(13.905, 2, \"0.00\"));\n        assertEquals(\"13.92\", dfUS.formatRawCellContents(13.915, 2, \"0.00\"));\n        assertEquals(\"13.93\", dfUS.formatRawCellContents(13.925, 2, \"0.00\"));\n        assertEquals(\"13.94\", dfUS.formatRawCellContents(13.935, 2, \"0.00\"));\n        assertEquals(\"13.95\", dfUS.formatRawCellContents(13.945, 2, \"0.00\"));\n        assertEquals(\"13.96\", dfUS.formatRawCellContents(13.955, 2, \"0.00\"));\n        assertEquals(\"13.97\", dfUS.formatRawCellContents(13.965, 2, \"0.00\"));\n        assertEquals(\"13.98\", dfUS.formatRawCellContents(13.975, 2, \"0.00\"));\n        assertEquals(\"13.99\", dfUS.formatRawCellContents(13.985, 2, \"0.00\"));\n        assertEquals(\"14.00\", dfUS.formatRawCellContents(13.995, 2, \"0.00\"));\n        assertEquals(\"14.01\", dfUS.formatRawCellContents(14.005, 2, \"0.00\"));\n     }\n\nIf you make the code change below to org.apache.poi.ss.usermodel.DataFormatter, the test above will pass for JDK6 and JDK8.\n\npublic String formatRawCellContents(double value, int formatIndex, String formatString, boolean use1904Windowing) {\n     :\n     :\n\n     // else Number\n         Format numberFormat = getFormat(value, formatIndex, formatString);\n         if (numberFormat == null) {\n             return String.valueOf(value);\n         }\n         \n         String result;\n         // When formatting 'value', double to text to BigDecimal produces more\n         // accurate results than double to Double in JDK8 (as compared to\n         // previous versions). However, if the value contains E notation, this\n         // would expand the values, which we do not want, so revert to\n         // original method.\n         final String textValue = NumberToTextConverter.toText(value);\n         if (textValue.indexOf('E') > -1) {\n             result = numberFormat.format(new Double(value));\n         }\n         else {\n             result = numberFormat.format(new BigDecimal(textValue));\n         }\n         // Complete scientific notation by adding the missing +.\n         if (result.indexOf('E') > -1 && !result.contains(\"E-\")) {\n             result = result.replaceFirst(\"E\", \"E+\");\n         }\n         return result;\n}\n\nI apologize for not taking the time to learn how to submit a proper patch, but I believe this code is all that is needed for this issue. Also, I changed some of the previous comments regarding the E notation (I was the RK in those comments).\n\nThanks", "bug_id": 57951, "is_private": false, "id": 183114, "time": "2015-05-26T22:59:00Z", "creator": "robert_kish@yahoo.com", "creation_time": "2015-05-26T22:59:00Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 183120, "time": "2015-05-27T08:59:06Z", "bug_id": 57951, "creation_time": "2015-05-27T08:59:06Z", "is_private": false, "text": "Any chance you could get a JDK9 snapshot, and check with that too? While we're doing Java version compatibility fixes, it would seem a good chance to do all of them at once!"}, {"count": 2, "tags": [], "bug_id": 57951, "attachment_id": null, "is_private": false, "id": 183132, "time": "2015-05-27T16:03:14Z", "creator": "robert_kish@yahoo.com", "creation_time": "2015-05-27T16:03:14Z", "text": "Using build 1.9.0-ea-b65, I get the same behavior as in build 1.8.0_45-b14; my new Junit test fails with poi 3.12 code and it succeeds with modified code using BigDecimal."}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 183134, "time": "2015-05-27T17:15:41Z", "bug_id": 57951, "creation_time": "2015-05-27T17:15:41Z", "text": "Thanks for this investigation!\n\nI've applied your change in r1682083."}]
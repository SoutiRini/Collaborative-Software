[{"count": 0, "tags": [], "text": "Some of the changes made to mod_proxy in trunk (which were also backported to\n2.0.55) have resulting in mod_proxy assuming that all sub-requests are GETs.\nWhilst this is typically true of SSIs, I don't see a reason to enforce this.\nIndeed, I have a custom module that requires exactly this (it turns certain\nsub-requests into POSTs, which go to a backend server using mod_proxy).\n\nI asked about this on the apache-dev mailing list:\nhttp://marc.theaimsgroup.com/?l=apache-httpd-dev&m=111099194601082&w=2\nNo one stated any opposition (though it generate much discussion to be fair), so\nI'd like to go ahead and suggest this is a regression in behaviour and the\npatch(s) I'm about to attach should be applied.", "attachment_id": null, "id": 82210, "creator": "stuart@terminus.co.uk", "time": "2005-11-08T14:28:36Z", "bug_id": 37402, "creation_time": "2005-11-08T14:28:36Z", "is_private": false}, {"count": 1, "tags": [], "creator": "stuart@terminus.co.uk", "attachment_id": 16904, "text": "Created attachment 16904\nallow POST sub-requests in HTTP proxy (for 2.1-HEAD)", "id": 82213, "time": "2005-11-08T14:32:08Z", "bug_id": 37402, "creation_time": "2005-11-08T14:32:08Z", "is_private": false}, {"count": 2, "tags": [], "creator": "stuart@terminus.co.uk", "attachment_id": null, "text": "(In reply to comment #1)\n> Created an attachment (id=16904) [edit]\n> allow POST sub-requests in HTTP proxy (for 2.0-HEAD)\n> \n\nNrgh - sorry, that's the 2.1-HEAD patch - have updated the description.", "id": 82215, "time": "2005-11-08T14:34:27Z", "bug_id": 37402, "creation_time": "2005-11-08T14:34:27Z", "is_private": false}, {"count": 3, "tags": [], "creator": "stuart@terminus.co.uk", "attachment_id": 16907, "text": "Created attachment 16907\nallow POST sub-requests in HTTP proxy (for 2.0-HEAD)", "id": 82217, "time": "2005-11-08T14:36:49Z", "bug_id": 37402, "creation_time": "2005-11-08T14:36:49Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 37402, "attachment_id": null, "id": 107594, "time": "2007-09-01T12:29:06Z", "creator": "nick@webthing.com", "creation_time": "2007-09-01T12:29:06Z", "is_private": false, "text": "Did this ever get applied, or has it fallen by the wayside?"}, {"count": 5, "attachment_id": null, "bug_id": 37402, "text": "(In reply to comment #4)\n> Did this ever get applied, or has it fallen by the wayside?\n\nI'm pretty certain it has not been applied. Just checked mod_proxy_http.c in\ntrunk, and it's still doing if (r->main) { ...; goto skip_body; } for all HTTP\nmethods.\n\nI never got the \"should httpd allow sub-requests to be other than GET?\" question\nanswered, but I would stand by the argument that it did previously, and to\nchange the behaviour back should not break anything. I was contacted privately a\nwhile ago from someone else who found this bug report, and would also appreciate\nthe suggested patch being applied. So if you're happy to do that, great!\n\nIf I can do anything to help (such as creating updated patches for trunk and\n2.2.x) please do let me know. Reviewing the patch (I wrote it a while ago now!),\nI wonder if r->method_number != M_POST is a reasonable check. Do any other HTTP\nmethods have bodies (eg: PUT); is there something else we can check? Actually, I\nwonder if the \"correct\" fix here is actually in the sub-request generation code\n- making it not inherit C-L/T-E headers for GETs (the default). If someone (such\nas myself) tries to generate a POST sub-request, they should be responsible for\nsetting those headers accordingly. Then the explicit skip_body check would no\nlonger be necessary.", "id": 107595, "time": "2007-09-01T13:16:53Z", "creator": "stuart@terminus.co.uk", "creation_time": "2007-09-01T13:16:53Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "There are some underlying issues caused by the way the server currently works that make this a difficult problem to solve.\n\nRight now today, the server goes to some effort to ensure that a body is read from the browser once, and once only. If the body were to be read twice, the next browser request would be read in and interpreted as a body instead, or if there is no next request, the request would hang waiting for data from the browser that the browser has no intention of sending.\n\nThis has been addressed on trunk through the kept body filter, which attempts to set aside the body up to some limit just once, and then \"caps\" the input filter stack, allowing you to read the same saved body over and over again in subrequests, without ever having to worry that the browser be read from more than once.", "attachment_id": null, "bug_id": 37402, "id": 130336, "time": "2009-09-12T16:49:20Z", "creator": "minfrin@sharp.fm", "creation_time": "2009-09-12T16:49:20Z", "is_private": false}]
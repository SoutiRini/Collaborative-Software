[{"count": 0, "tags": [], "text": "Created attachment 26286\nBuild configuration command\n\nI have symptoms like those described on bug 42829. However, since that bug was\nmarked RESOLVED FIXED on 2009-02-13 I am starting a new bug. I am sorry if this\nis the wrong thing to do.\n\nI am running Apache 2.2.17 (prefork) compiled from source using the Sun\nStudio 12.1 C compiler on a Solaris 10 x86/64 system at kernel patch\nlevel 142910-17. I will attach the configuration options used for the\nbuild, and the cut-down httpd.conf I have used to reproduce the problem.\n\nThe problem is that, almost every time I do a graceful (USR1) restart, one\nor more child processes remain stuck indefinitely in the 'Gracefully\nfinishing' state (represented bu a 'G' in the status display). My\nconfiguration contains more that one Listen directive. In the simplified\nexample, I listen on an IPv4 address and an IPv6 address.\n\nI cannot reproduce the problem if I have only one Listen directive. It is\nthis detail which leads me to suspect that my problem is related to bug\n42829.\n\nI have managed to reproduce the problem with an httpd running under truss,\nso I have a system call trace covering a graceful restart which left two\nstuck processes. I will attach this, and pstack backtraces of the two\nprocesses which were stuck. (Truss alters the timing, and reduces the\nchance of stuck processes.)", "attachment_id": 26286, "bug_id": 50261, "id": 141664, "time": "2010-11-12T10:08:01Z", "creator": "cj10@cam.ac.uk", "creation_time": "2010-11-12T10:08:01Z", "is_private": false}, {"count": 1, "tags": [], "creator": "cj10@cam.ac.uk", "text": "Created attachment 26287\nCut down cinguration for the test", "id": 141665, "time": "2010-11-12T10:09:49Z", "bug_id": 50261, "creation_time": "2010-11-12T10:09:49Z", "is_private": false, "attachment_id": 26287}, {"count": 2, "attachment_id": 26288, "bug_id": 50261, "text": "Created attachment 26288\nSystem call trace", "id": 141666, "time": "2010-11-12T10:10:31Z", "creator": "cj10@cam.ac.uk", "creation_time": "2010-11-12T10:10:31Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "cj10@cam.ac.uk", "attachment_id": 26289, "id": 141667, "time": "2010-11-12T10:11:09Z", "bug_id": 50261, "creation_time": "2010-11-12T10:11:09Z", "is_private": false, "text": "Created attachment 26289\nBacktrace of one stuck process ..."}, {"count": 4, "tags": [], "bug_id": 50261, "is_private": false, "text": "Created attachment 26290\n... and the second one", "id": 141668, "time": "2010-11-12T10:11:55Z", "creator": "cj10@cam.ac.uk", "creation_time": "2010-11-12T10:11:55Z", "attachment_id": 26290}, {"count": 5, "attachment_id": null, "bug_id": 50261, "text": "Charles, can you hit the problem with \"AcceptMutex sysvsem\" ?\n\nI wonder if the stall of these two children in pthread_mutex_lock is caused by the pthread mutex getting cleaned up in the parent when pconf is destroyed while there are still users of the mutex.  I don't know what happens when the parent munmaps the storage for the mutex or if that could be system dependent.\n\nThe following is just a quick hack to try to see if killing the pthread mutex in the parent during this graceful restart scenario is what causes the children to hang.  (It never deletes the old mutex.)\n\nCharles, perhaps you could try to recreate with this patch and the default AcceptMutex?\n\nIndex: server/mpm/prefork/prefork.c\n===================================================================\n--- server/mpm/prefork/prefork.c\t(revision 1034057)\n+++ server/mpm/prefork/prefork.c\t(working copy)\n@@ -940,7 +940,7 @@\n                                  ap_my_pid);\n \n     rv = apr_proc_mutex_create(&accept_mutex, ap_lock_fname,\n-                               ap_accept_lock_mech, _pconf);\n+                               ap_accept_lock_mech, s->process->pool);\n     if (rv != APR_SUCCESS) {\n         ap_log_error(APLOG_MARK, APLOG_EMERG, rv, s,\n                      \"Couldn't create accept lock (%s) (%d)\",\n\nIt isn't a permanent solution because it leaks pthread mutexes across graceful restart, but it may be helpful for the investigation.", "id": 141672, "time": "2010-11-12T11:13:20Z", "creator": "trawick@apache.org", "creation_time": "2010-11-12T11:13:20Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 50261, "attachment_id": null, "is_private": false, "id": 141677, "time": "2010-11-12T12:01:31Z", "creator": "cj10@cam.ac.uk", "creation_time": "2010-11-12T12:01:31Z", "text": "\"AcceptMutex sysvsem\" chases the problem away.\n\nThe patch also stops the process drain.\n\nThis is all good news. Thank you."}, {"count": 7, "attachment_id": null, "bug_id": 50261, "text": "We also had the same problem on a SunOS/sparc host, and we have replaced \"AcceptMutex pthread\" (which is 100% fine on Linux) by \"AcceptMutex posixsem\"\n\nOur investigations have shown that the current code makes the assumption that the 'apr_proc_mutex_lock(accept_mutex)' call /may/ exit when the process is notified of a cancellation.\n\nUnfortunately, pthread_mutex_lock (when \"AcceptMutex pthread\") is not a cancellation point, so the call will not exit with a status code different of APR_SUCCESS, ... and the process will actually continue to wait for the next time it will be lucky enough to capture the mutex, and then exit thanks to 'if(listener_may_exit)'.\n\nOn SunOS, it seems that the old processes are forgotten by the scheduler, so they stay visible \"forever\", until a genuine 'apachectl stop' is called ('apr_proc_mutex_lock()' exits when the mutex is destroyed).\n\nWe have used the 'posixsem' type as a quick workaround (a semaphore is a cancellation point), but not compared the performance drop yet. We have not tried the 'sysvsem' type because 'posixsem' seemed to work.", "id": 141718, "time": "2010-11-15T04:50:50Z", "creator": "egarreau@gmail.com", "creation_time": "2010-11-15T04:50:50Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "cross@hccs.com", "text": "I just thought I would add something I noticed.\n\nI have Sparc Solaris 10 and I had noticed the graceful restart resulting in G's in server-status never going away with apache 2.2.13 years ago, compiled with SUN cc 12.1 and preinstalled ssl from /usr/sfw.  I installed 2.2.14 and the problem went away.  If you do not implement ssl there is no problem.\n\nThis week I set up a clean, patched Solaris 10, with httpd 2.2.18, compiled using gcc and openssl 0.9.8R in /usr/local/ssl.  I saw that the problem returned, G in server-status.  I installed 2.2.19 the same way and the problem remained.  \n\nI returned to 2.2.14, configured and compiled the same way as 18 and 19, and the problem is NOT there.  \n\nI\"m just an admin but I thought this might help someone figure out why.\n\nThanks", "id": 148324, "time": "2011-08-01T19:24:12Z", "bug_id": 50261, "creation_time": "2011-08-01T19:24:12Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 50261, "text": "The only two changes to prefork between 2.2.14 and 2.2.18 are\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1069428\nhttp://svn.apache.org/viewvc?view=revision&revision=1021621\n\nSomeone could try if reverting one of these two fixes the issue. If not, it may be a change in apr. You could try running 2.2.19 with the version of apr shipped with 2.2.14, then.", "id": 148437, "time": "2011-08-06T11:58:42Z", "creator": "sf@sfritsch.de", "creation_time": "2011-08-06T11:58:42Z", "tags": [], "is_private": false}, {"count": 10, "attachment_id": null, "bug_id": 50261, "text": "(In reply to comment #9)\n> The only two changes to prefork between 2.2.14 and 2.2.18 are\n> \n> http://svn.apache.org/viewvc?view=revision&revision=1069428\n> http://svn.apache.org/viewvc?view=revision&revision=1021621\n> \n> Someone could try if reverting one of these two fixes the issue. If not, it may\n> be a change in apr. You could try running 2.2.19 with the version of apr\n> shipped with 2.2.14, then.\n\nI just installed another http 2.2.19/openssl 1.0 and when I graceful restart I get the G's in server-status.  If I do not load the ssl.conf, there is no problem.  This is on Solaris 10 and the compiler doesn't matter.  I have a linux server running 2.2.15 and openssl 1.0e and there is no problem, as well as my 2.2.14.  \n\nHas there been any fix or patch for this that I can try please?\n\nSomeone suggested in this post to use the apr from 2.2.14 but I am not sure what he means by that, and what could be the problems with doing that please?\n\nThanks", "id": 151135, "time": "2011-11-02T20:29:37Z", "creator": "cross@hccs.com", "creation_time": "2011-11-02T20:29:37Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 50261, "attachment_id": null, "text": "Hi,\n\nHas anyone found a fix for this, the Graceful being stuck in G in server-status please?  I really want to start upgrading my apache and we only do graceful restarts.\n\nthanks", "id": 155327, "time": "2012-03-27T21:43:33Z", "creator": "cross@hccs.com", "creation_time": "2012-03-27T21:43:33Z", "is_private": false}, {"count": 12, "tags": [], "creator": "cj10@cam.ac.uk", "text": "(In reply to comment #11)\n> Hi,\n> \n> Has anyone found a fix for this, the Graceful being stuck in G in server-status\n> please?  I really want to start upgrading my apache and we only do graceful\n> restarts.\n> \n> thanks\n\nThere is a workaround which I have found satisfactory. I have\nthe following lines in my configuration file:\n\n\n  # The default setting of AcceptMutex is dependent on both\n  # platform and version. For Solaris on 2.0 it was 'fcntl'.\n  # In versions 2.2.16 and 17 the default is 'pthread', which\n  # promises better performance. However, it doesn't work if there\n  # is more than one Listen directive. See CJJ's bug at\n  # https://issues.apache.org/bugzilla/show_bug.cgi?id=50261.\n  # The following directive makes no change for 2.0 and\n  # circumvents the bug for 2.2.\n\n  AcceptMutex fcntl\n\n  # LockFile is needed - /var/run is a good place. Docs say\n  # 'The PID of the main server process is automatically\n  # appended to the filename', so we can use the same name for\n  # all instances. Note, the lock files are invisible when\n  # the server is running - presumably unlinked.\n\n  LockFile /var/run/httpd.lock\n\nI have not noticed any performance problems caused by this. I would\nlike to suggest that, if the bug is not to be fixed, the default for\nAcceptMutex for Solaris should be changed back to 'fnctl'.", "id": 155337, "time": "2012-03-28T07:49:03Z", "bug_id": 50261, "creation_time": "2012-03-28T07:49:03Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "Hi,\n\nThank you for the workaround.  I did find that it was happening on later versions too, but I will try it and see how it goes.  Is there a way to tell if the connection is being closed gracefully or abruptly shut with your fix?  Can you shed some light on what happens in a graceful stop?  \n\nThanks you very very much.", "attachment_id": null, "bug_id": 50261, "id": 158114, "time": "2012-04-16T20:12:50Z", "creator": "cross@hccs.com", "creation_time": "2012-04-16T20:12:50Z", "is_private": false}]
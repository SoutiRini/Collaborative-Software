[{"count": 0, "tags": [], "bug_id": 50957, "attachment_id": null, "id": 145195, "time": "2011-03-22T18:09:35Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-22T18:09:35Z", "is_private": false, "text": "Tomcat: 7.0.8\nOS:  Windows 2008 Server (x64)\n\nCompression enabled on both HTTP and HTTPS connectors.\n\nWhen using standard blocking IO HTTP/1.1 over a period of 2+ days under moderate traffic, Tomcat 7 will begin to occasionally serve the incorrect responses for a request.\n\nIncorrect responses span a variety behaviors\n* Serving a javascript (.js) file instead of HTML or Image\n* Serving the wrong image\n* Serving a .css file instead of HTML, javascript file, or Image\n\nThis behavior has been observed in both HTTP & HTTPS.\n\nAnother observation is that if the wrong response is served, the response is at least for something that was also requested and not something random.\n\n\nOnce the behavior was detected, I used WebScarab as a proxy to monitor the entire Browser <--> Tomcat conversation.  I was able to confirm a scenario like the following:\n--------\nImageA.gif\nImageB.gif\n\nEach has different file size, ETAG, etc.\n\nGET ImageB.gif returned ImageA.gif (with ImageA.gif's ETAG, headers, binary content, and content size)\n-------\n\nThis report corroborates another report discovered in the wild:\nhttp://www.apacheserver.net/q11460/Tomcat-serving-wrong-content\n\nIn the above report, the person requested a page and received an image.\n\nNo reproduction steps have been identified to trigger this condition.  The only thing the above reporter & I noticed is that Tomcat needs to be up for a while and serve traffic throughout that period.  Once the condition has been established it is still seemingly random when it occurs.\n\nWhenever it begins to happen, however, disable caching & keep reloading an image-heavy page until you see obvious misplaced images or other things. Using a debugging proxy will allow you to verify that incorrect content is served.\n\nSwitching to NIO appears to bypass the problem or at least NIO does not exhibit the same behavior.  As the other reporter had noted, restarting Tomcat will clear the condition.  \n\nMy hypothesis is that there is some condition within Tomcat & Blocking IO where a series of (pipelined?) requests (images, css, js) spawned from a page can become confused resulting in swapped responses (A <--> B) or duplicated responses (A & A).  Maybe some output buffer is getting clobbered.  Based upon Http11Processor, pipelined requests are constrained to the same Socket so I do not believe there is a risk of swapping responses across users.  It is unknown if this bug could be deliberately exploited in some way.\n\n\nNeedless to say, a server that is serving incorrect content justifies a very serious severity rating. I would not recommend using BIO in any Production environment for the time being."}, {"count": 1, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "Experience has shown that most instances of this type of error are triggered by application bugs rather than Tomcat bugs - usually in the form of retaining and re-using a reference to the request or response object. One way to test this is to set the system property org.apache.catalina.connector.RECYCLE_FACADES to true. If you see NPEs then that is indicative of an application bug.\n\nSomething else that would be very useful since you are able to reproduce this (albeit rarely) is a Wireshark trace of a connection where this occurred. If it is a Tomcat bug it is likely to be triggered by an error condition in a previous request on the connection.\n\nIt is worth updating to the latest 7.0.x in case you are seeing a variation of bug 50189.\n\nUltimately, without more information that points to a Tomcat bug this is going to get resolved as WORKSFORME.", "id": 145196, "time": "2011-03-22T18:45:08Z", "creator": "markt@apache.org", "creation_time": "2011-03-22T18:45:08Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bplies@bulliondirect.com", "attachment_id": null, "id": 145197, "time": "2011-03-22T18:51:58Z", "bug_id": 50957, "creation_time": "2011-03-22T18:51:58Z", "is_private": false, "text": "Found a few other somewhat related threads\n\n\"Response Swapping\"\nhttp://marc.info/?l=tomcat-user&m=130048233431588&w=2\nmod_jk & Tomcat 5.5.30\n\n\nhttp://marc.info/?l=tomcat-user&m=129796706820107&w=4\nTomcat 7 BIO Connector sockets are queued\nImplies a difference in BIO between Tomcat 6 & 7 and may explain why I've never seen this bug in Tomcat 6."}, {"count": 3, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "(In reply to comment #1)\n> Experience has shown that most instances of this type of error are triggered by\n> application bugs rather than Tomcat bugs - usually in the form of retaining and\n> re-using a reference to the request or response object. One way to test this is\n> to set the system property org.apache.catalina.connector.RECYCLE_FACADES to\n> true. If you see NPEs then that is indicative of an application bug.\n \nIf it were true that this could be caused by application references to request & response objects, that may not explain why changing to NIO would have any different behavior.  Also, why would it take an amount of time before exhibiting the behavior?  If an application did in fact do this, one would expect a higher occurance rate.\n\nIn case I am unable to locate examples of these past instances you describe, could you provide a few that you know of?  That way I can do a better job matching characteristics and symptoms.\n\nI will have to evaluate some code to see if any references to request or response object are being held anywhere.  I would like to try the RECYCLE_FACADES recommendation but will not be able to put BIO back into the environment where it was detected.\n\n\n> It is worth updating to the latest 7.0.x in case you are seeing a variation of\n> bug 50189.\n\n50189 differs from this submission in that it relied on AJP and possessed zero-length messages as symptoms.  By contrast, this submission is using BIO and not using AJP and positive-length messages are delivered just with the wrong payloads.  \n\nI cannot yet say at this point if application code is reading from a request after the response outputstream is closed.  I really doubt it but I'll look anyway.", "id": 145198, "time": "2011-03-22T19:17:07Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-22T19:17:07Z", "is_private": false}, {"text": "(In reply to comment #1)\n> Experience has shown that most instances of this type of error are triggered by\n> application bugs rather than Tomcat bugs - usually in the form of retaining and\n> re-using a reference to the request or response object. One way to test this is\n> to set the system property org.apache.catalina.connector.RECYCLE_FACADES to\n> true. If you see NPEs then that is indicative of an application bug.\n\nI forgot to mention that this same application has run on Tomcat 6 BIO for years without this problem.  It only surfaced once we ran the app in Tomcat 7 BIO.", "tags": [], "bug_id": 50957, "attachment_id": null, "count": 4, "id": 145199, "time": "2011-03-22T19:25:29Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-22T19:25:29Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 50957, "text": "That BIO worked in 6 but has the error in 7 does point to this being a Tomcat bug.\n\nI've checked the request queuing code and that looks OK. However, a larger change was the async support. I have found one area where I have some suspicions but I need to do more research to see if there is a bug there or not.\n\nWhile bug 50189 was reported against AJP, the fix was made for all connectors. There may also have been issues with HTTP although I don't recall any reports. However, the code was the same in 6.0.x so that tends to rule that out as a possibility.\n\nGetting ahead of myself I know, but if my suspicions prove to be correct, are you able to test BIO and a potentially fixed 7.0.x in the environment where you saw this error?", "id": 145200, "time": "2011-03-22T19:31:20Z", "creator": "markt@apache.org", "creation_time": "2011-03-22T19:31:20Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50957, "attachment_id": null, "id": 145201, "time": "2011-03-22T20:19:48Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-22T20:19:48Z", "is_private": false, "text": "(In reply to comment #5)\n> Getting ahead of myself I know, but if my suspicions prove to be correct, are\n> you able to test BIO and a potentially fixed 7.0.x in the environment where you\n> saw this error?\n\nThanks for the reply.  As much as I'd love to continue to help the ASF & everyone else with this I will unfortunately be unable to test the potential fix on that environment.  We appear to have a functioning workaround (NIO) and it must remain that way.  \n\nThe best I can offer is to try some simulations of the potential fix using the same application in another environment which will not match the same uptime or traffic levels - and may not trigger the condition at all.\n\nAs for resolution of this issue either you or someone else will manage to find more suspicious code, other users will report \"me too\", or it will be fixed in relation to some other issue."}, {"count": 7, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "(In reply to comment #0)\n> Tomcat: 7.0.8\n> OS:  Windows 2008 Server (x64)\n> \n> Compression enabled on both HTTP and HTTPS connectors.\n> \n> (...)\n> Once the behavior was detected, I used WebScarab as a proxy to monitor the\n> entire Browser <--> Tomcat conversation.  I was able to confirm a scenario like\n> the following:\n> --------\n> ImageA.gif\n> ImageB.gif\n> \n> Each has different file size, ETAG, etc.\n> \n> GET ImageB.gif returned ImageA.gif (with ImageA.gif's ETAG, headers, binary\n> content, and content size)\n> -------\n\nDo you know/remember whether GET ImageA.gif returned ImageA.gif as well, whether either of them was compressed, and whether the requests were from the same client? Do you know the size of those files?\n\n(gif files are not in AbstractHttp11Processor .compressableMimeTypes by default, so I think that they should have not be compressed)\n\nWhat were your compression settings? Just compression=\"on\"?", "id": 145202, "time": "2011-03-22T20:55:21Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-03-22T20:55:21Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 50957, "attachment_id": null, "id": 145209, "time": "2011-03-23T01:01:58Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-23T01:01:58Z", "is_private": false, "text": "(In reply to comment #7)\n> (In reply to comment #0)\n> > Tomcat: 7.0.8\n> > OS:  Windows 2008 Server (x64)\n> > \n> > Compression enabled on both HTTP and HTTPS connectors.\n> > \n> > (...)\n> > Once the behavior was detected, I used WebScarab as a proxy to monitor the\n> > entire Browser <--> Tomcat conversation.  I was able to confirm a scenario like\n> > the following:\n> > --------\n> > ImageA.gif\n> > ImageB.gif\n> > \n> > Each has different file size, ETAG, etc.\n> > \n> > GET ImageB.gif returned ImageA.gif (with ImageA.gif's ETAG, headers, binary\n> > content, and content size)\n> > -------\n> \n> Do you know/remember whether GET ImageA.gif returned ImageA.gif as well,\n> whether either of them was compressed, and whether the requests were from the\n> same client? Do you know the size of those files?\n> \n> (gif files are not in AbstractHttp11Processor .compressableMimeTypes by\n> default, so I think that they should have not be compressed)\n> \n> What were your compression settings? Just compression=\"on\"?\n\nI recall a case where ImageA and ImageB were swapped and because the images were very different dimensions, the page looked really awkward.  I'm fairly sure I had also witnessed ImageA as both ImageA and ImageB.  Yes all observations were performed as the same client.\n\nEven though compression was enabled on the connectors the image MIME types are not included (as you suspected).\n\nOther scenarios occurred where compressable text resources (.js, .css, .xml, .html) were also served with the incorrect response:  HTML -> IMG, HTML -> JS, HTML -> CSS, and so on.\n\nI had only mentioned compression=\"on\" just in case it happens to be a contributory factory.  I would not suspect that it would be related...\n\nI have not and will not have the opportunity to try BIO with compression=\"off\""}, {"count": 9, "tags": [], "creator": "bplies@bulliondirect.com", "text": "Brainstorming out loud after examining some Tomcat code...\n\nIn the witnessed case of receiving ImageA.gif as ImageB.gif, this suggests that the same InternalOutputBuffer was re-used to respond to both requests.  This could hypothetically be possible if the output buffer were not properly reset between requests.\n\nHttp11Processor.process(socket) \nAbstractOutputBuffer.nextRequest() will call response.recycle() that will reset the contentType, status, headers, encoding, etc.  Most of these recycling/resetting operations are guarded by !isAsync() (AsyncStateMachine)\n\n\nI wonder if there is a concurrency hazard surrounding isAsync()? Namely that isAsync accesses shared state and is, itself, not synchronized.  So couldn't you have, due to unlucky timing, a dirty read where: \n\nisAsync() returns true but almost immediately becomes false or\nisAsync() returns false but almost immediately becomes true\n\nWhile all of the async state mutating methods are synchronized, an unsynchronized read is governing control flow of external code.  It should be possible for the state to be written concurrently with the unsync read and perhaps cause an unanticipated code path to execute.\n\nHttp11Processor.process(socket) calls isAsync() 4 times (swallowInput(), endRequest(), buffers.nextRequest(), & SocketState.LONG) and could all conceivably return different answers from call to call.", "id": 145360, "time": "2011-03-28T14:44:59Z", "bug_id": 50957, "creation_time": "2011-03-28T14:44:59Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "I have been looking at this as well.\n\nTo address the isAsync() question I suspect that this is not the cause since:\n- the issue is with static content where async state is not changing\n- it doesn't explain why BIO is affected but NIO is not\n\nIn the same way a failure to recycled an output buffer could cause this, so could not recycling an input buffer. I have been reviewing the code and for a single request there are multiple points where recycle is called. While I can find a error conditions where I can skip one of the recycle calls, I can't find a code path that would allow all of them to be skipped.\n\nI'll tighten up the areas I can find for 7.0.12 but without a clear idea of exactly how this issue is triggered I can't be sure that the issue will be fixed. If no further reports appear post 7.0.12 then that would suggest that the issue was fixed. I'm not exactly comfortable with that plan but barring a reproducible test case or an explanation of how the error occurs I don't have a better plan right now.", "id": 145361, "time": "2011-03-28T15:04:59Z", "creator": "markt@apache.org", "creation_time": "2011-03-28T15:04:59Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "(In reply to comment #10)\n> To address the isAsync() question I suspect that this is not the cause since:\n> - the issue is with static content where async state is not changing\nYes and no.  Even though it is static content being swapped & duplicated, static content is not the only resource in the request stream.  For instance ImageA.gif & ImageB.gif are included in a page that contains a number of dynamic JSP elements as well.\n\nIn post #1 I listed a scenario where a JS file was served instead of HTML.  In that case, the page was a dynamic JSP.\n\n\n> - it doesn't explain why BIO is affected but NIO is not\nIf indeed BIO & NIO share nearly identical isAsync() logic and if the real problem is a concurrency hazard within that logic then the unlucky timing would just happen to be more likely in BIO.  NIO Protocol has notably less isAsync() calls.  So for all I know NIO is affected also, we just haven't noticed yet.  Maybe it is a Bohrbug or Heisenbug :)\n\nMaybe someone with exceptionally strong concurrency skills can review isAsync() and its usage for safety.  Either it is a hazard or it isn't.\n\n \n> In the same way a failure to recycled an output buffer could cause this, so\n> could not recycling an input buffer. I have been reviewing the code and for a\n> single request there are multiple points where recycle is called. While I can\n> find a error conditions where I can skip one of the recycle calls, I can't find\n> a code path that would allow all of them to be skipped.\nGood point on input v.s. output.  Yet aren't those input recycle calls governed by the same suspect guard?  Perhaps it is not necessary to skip all recycle calls in order to cause the behavior.\n\n \n> I'll tighten up the areas I can find for 7.0.12 but without a clear idea of\n> exactly how this issue is triggered I can't be sure that the issue will be\n> fixed. If no further reports appear post 7.0.12 then that would suggest that\n> the issue was fixed. I'm not exactly comfortable with that plan but barring a\n> reproducible test case or an explanation of how the error occurs I don't have a\n> better plan right now.\n\nI can respect that.  Given how long Tomcat 7.0 has been GA before this report was submitted, I would not expect additional reports to be as forthcoming even if it still is a bug.  At least you and others are aware of this report and might be able to match it to future reports.  Hopefully someone else will be able to do a better job defining a reproducible test case.", "id": 145362, "time": "2011-03-28T15:33:18Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-03-28T15:33:18Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 50957, "text": "(In reply to comment #11)\n> (In reply to comment #10)\n> > To address the isAsync() question I suspect that this is not the cause since:\n> > - the issue is with static content where async state is not changing\n> Yes and no.  Even though it is static content being swapped & duplicated,\n> static content is not the only resource in the request stream.  For instance\n> ImageA.gif & ImageB.gif are included in a page that contains a number of\n> dynamic JSP elements as well.\n> \n> In post #1 I listed a scenario where a JS file was served instead of HTML.  In\n> that case, the page was a dynamic JSP.\n\nNone of those requests use async processing. Unless you explicitly use Servlet 3.0 async APIs then isAsync() will always return false.\n\n> > - it doesn't explain why BIO is affected but NIO is not\n> If indeed BIO & NIO share nearly identical isAsync() logic and if the real\n> problem is a concurrency hazard within that logic then the unlucky timing would\n> just happen to be more likely in BIO.  NIO Protocol has notably less isAsync()\n> calls.  So for all I know NIO is affected also, we just haven't noticed yet. \n> Maybe it is a Bohrbug or Heisenbug :)\n> \n> Maybe someone with exceptionally strong concurrency skills can review isAsync()\n> and its usage for safety.  Either it is a hazard or it isn't.\n\nAt the moment, I'm happy isAsync() is safe. There were issues in the past (bug 49884) but the re-factoring that fixed that bug means that it should not be possible for one thread to be reading isAsync() whilst another is changing the value it returns.", "id": 145363, "time": "2011-03-28T16:03:53Z", "creator": "markt@apache.org", "creation_time": "2011-03-28T16:03:53Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "bplies@bulliondirect.com", "attachment_id": null, "id": 145364, "time": "2011-03-28T16:42:53Z", "bug_id": 50957, "creation_time": "2011-03-28T16:42:53Z", "is_private": false, "text": "(In reply to comment #12)\n> None of those requests use async processing. Unless you explicitly use Servlet\n> 3.0 async APIs then isAsync() will always return false.\n\nIn our application we are not explicitly using Servlet 3.0 async so the hypothesis that async() is suspicious in this case is invalid.  So as far as deduction goes it one must backtrack to examining how buffers are used and pipelined requests are handled.\n\n\n> At the moment, I'm happy isAsync() is safe. There were issues in the past (bug\n> 49884) but the re-factoring that fixed that bug means that it should not be\n> possible for one thread to be reading isAsync() whilst another is changing the\n> value it returns.\n\nisAsync(), I see, uses volatile so maybe it is alright afterall.\n\nAt least we've managed to deduce a few things that aren't the problem.  Thanks for helping.  I'll take a look at anything that gets committed and will at least try to run a recent build w/ BIO in an alternate environment."}, {"count": 14, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "It may be unrelated, but I'm trying to track down a (very) reproducible error on one of our products where using Firefox with HTTP pipelining enabled results in garbled responses (and a smattering of 401 and 505 responses).\n\nThe user reports of this error went along the lines of seeing JavaScript content where HTML responses were expected, images switched etc., which sounds similar to this.", "id": 145448, "time": "2011-04-01T02:32:40Z", "creator": "timw@apache.org", "creation_time": "2011-04-01T02:32:40Z", "is_private": false}, {"count": 15, "tags": [], "creator": "bplies@bulliondirect.com", "attachment_id": null, "id": 145490, "time": "2011-04-01T12:16:03Z", "bug_id": 50957, "creation_time": "2011-04-01T12:16:03Z", "is_private": false, "text": "(In reply to comment #14)\n> It may be unrelated, but I'm trying to track down a (very) reproducible error\n> on one of our products where using Firefox with HTTP pipelining enabled results\n> in garbled responses (and a smattering of 401 and 505 responses).\n> \n> The user reports of this error went along the lines of seeing JavaScript\n> content where HTML responses were expected, images switched etc., which sounds\n> similar to this.\n\nThank you for the report.  \n\nThis report certainly matches the primary characteristic of swapped content.  During my tests I do not recall observing those response codes, but that wasn't what I was primarily paying attention to anyway.  I was triggering the condition via rapid browser reloads so perhaps some responses could have had unusual codes like that and I just missed them.\n\nCan you confirm the Tomcat version and that BIO is used?  Have you tried NIO?  If it is very reproducible what are the exact conditions that you have established to trigger it?  Would you be able to provide a \"Wireshark trace\" as Mark recommended?"}, {"count": 16, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "I cannot remember now, but I'm sure I observed this under IE as well during my proxy tests.  So I'm not certain this problem is confined to Firefox", "id": 145491, "time": "2011-04-01T12:18:46Z", "creator": "bplies@bulliondirect.com", "creation_time": "2011-04-01T12:18:46Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 50957, "attachment_id": null, "id": 145501, "time": "2011-04-01T17:47:27Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-04-01T17:47:27Z", "is_private": false, "text": "If all the bug takes is load to reproduce, it should be easy to set up a test that uses wget or something similar to just download a list of files a whole bunch of times. If you have filenames which match the expected byte count (4096.gif or whatever), the client can detect that an error has occurred and log a message including a timestamp.\n\nIf keepalive is required to trigger this bug, then a test might be a bit more difficult to rig... I'm not even sure how to get HttpURLConnection to let me make multiple requests via a single connection.\n\nAny idea if keepalives either allow this bug to occur or increase the chances of it occurring?"}, {"count": 18, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 145503, "time": "2011-04-01T18:05:02Z", "bug_id": 50957, "creation_time": "2011-04-01T18:05:02Z", "is_private": false, "text": "Sounds like a job for Apache JMeter ... that can issue a large load, and supports Keep-Alive and assertions to check for failures.\n\nThe HttpClient version of the HTTP Sampler has better control over connection re-use."}, {"count": 19, "tags": [], "bug_id": 50957, "attachment_id": null, "text": "My testing was against 7.0.8 with the BIO connector on CentOS 5.4/x64.\nClient was Firefox 4.0 with network.http.pipelining=true enabled in about:config.\nWeb app is a fairly complex mixed static/JSP/other dynamic resources app.\nTo replicate all I have to do is log in and do 30-60 seconds of random 'refresh 'o' doom' - once errors start appearing, many resource loads in Firefox break (e.g. favicon.ico with wrong image, JS resources where HTML should be etc.)\n\nOn the HTTP side of things I was seeing 401 (Bad Request) responses from Tomcat, and the occasional 505 (Version Not Supported). Looking at SOCKS proxy and Wireshark traces of the HTTP, I couldn't see anything that Firefox was doing wrong.\n\nI've tested with r1088179 (post 7.0.12) of trunk, and things appear to be better - I can't get the UI to break anymore in Firefox - but I'm now seeing no 401 responses and many more 505 responses.\n\nI'm not able to spend much time on this in the next couple of weeks, but I'll try to drop in a build with some additional tracing into our test system at some point.", "id": 145521, "time": "2011-04-02T23:07:22Z", "creator": "timw@apache.org", "creation_time": "2011-04-02T23:07:22Z", "is_private": false}, {"text": "Correction: the 401 responses are actually 400 Bad Requests.", "tags": [], "bug_id": 50957, "attachment_id": null, "count": 20, "id": 145530, "time": "2011-04-03T19:26:46Z", "creator": "timw@apache.org", "creation_time": "2011-04-03T19:26:46Z", "is_private": false}, {"count": 21, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 145580, "time": "2011-04-06T07:11:34Z", "bug_id": 50957, "creation_time": "2011-04-06T07:11:34Z", "is_private": false, "text": "Tim's comments got me thinking along the right lines.\n\nThere is an issue with how pipe-lined requests are handled. Fortunately, the fix in 7.0.12 will stop any chance of request mix-up but you will see 505 responses.\n\nI have a fix in mind but it needs some tests. The workaround is to switch to NIO or APR/native, neither of which suffer from this problem.\n\nI am reducing the severity since the response mix-ups are no longer possible with 7.0.12.\n\nThe investigation of this issue has highlighted a number of areas that need a wider discussion. Tim has already started a thread on some of these on the dev list and I will be adding my observations there."}, {"count": 22, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 145595, "time": "2011-04-06T12:40:31Z", "bug_id": 50957, "creation_time": "2011-04-06T12:40:31Z", "is_private": false, "text": "The fix fir pipe-lining with HTTP BIO has been applied to trunk and will be included in 7.0.13 onwards."}, {"count": 23, "tags": [], "bug_id": 50957, "attachment_id": null, "id": 145611, "time": "2011-04-06T20:30:34Z", "creator": "timw@apache.org", "creation_time": "2011-04-06T20:30:34Z", "is_private": false, "text": "I'm unable to reproduce the 505 errors now with trunk."}]
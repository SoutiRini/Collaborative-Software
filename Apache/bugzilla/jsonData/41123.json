[{"count": 0, "tags": [], "bug_id": 41123, "attachment_id": null, "text": "This patch is only rewritten patch from bug #31383 to be able to fit Apache\n2.2.x version.", "id": 96603, "time": "2006-12-07T05:47:13Z", "creator": "michalp@ics.muni.cz", "creation_time": "2006-12-07T05:47:13Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 19224\nOCSP Patch", "attachment_id": 19224, "bug_id": 41123, "id": 96604, "time": "2006-12-07T05:48:58Z", "creator": "michalp@ics.muni.cz", "creation_time": "2006-12-07T05:48:58Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 19386\nNew version of OCSP patch containg missing file ssl_ocsp.c\n\nIn previous bug I forgot to add ssl_ocsp.c file.", "attachment_id": 19386, "id": 97882, "creation_time": "2007-01-10T06:17:21Z", "time": "2007-01-10T06:17:21Z", "creator": "michalp@ics.muni.cz", "bug_id": 41123, "is_private": false}, {"attachment_id": 19390, "tags": [], "creator": "marc.stern@approach.be", "text": "Created attachment 19390\nNew version of OCSP patch generalising validation check, and including ssl_ocsp.c file in Visual C++ project\n\nThis implements the following validation workflow:\n\n1. if (useOCSP)\n   => check OCSP\n   => if ( OCSP validation possible ) return status\n2. Other online validation checks in the future (LDAP, etc.)\n   => check new protocol\n   => if ( validation possible ) return status\n3. if (crl)\n   => check CRL\n   => If ( CRL validation possible ) return status\n4. If ( forceValidation ) return !ok\n5. return ok", "count": 3, "id": 97932, "time": "2007-01-11T06:10:17Z", "bug_id": 41123, "creation_time": "2007-01-11T06:10:17Z", "is_private": false}, {"count": 4, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": 19391, "text": "Created attachment 19391\nCorrected a #include", "id": 97933, "time": "2007-01-11T06:54:38Z", "bug_id": 41123, "creation_time": "2007-01-11T06:54:38Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 19392\nCorrected a #include", "attachment_id": 19392, "bug_id": 41123, "id": 97934, "time": "2007-01-11T06:57:23Z", "creator": "marc.stern@approach.be", "creation_time": "2007-01-11T06:57:23Z", "is_private": false}, {"count": 6, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": 19399, "is_private": false, "id": 97977, "time": "2007-01-12T01:35:07Z", "bug_id": 41123, "creation_time": "2007-01-12T01:35:07Z", "text": "Created attachment 19399\nPort to 2.2.4"}, {"count": 7, "tags": [], "text": "Created attachment 19445\nDocumentation patch", "is_private": false, "id": 98444, "creation_time": "2007-01-24T02:50:19Z", "time": "2007-01-24T02:50:19Z", "creator": "marc.stern@approach.be", "bug_id": 41123, "attachment_id": 19445}, {"count": 8, "tags": [], "text": "Created attachment 19446\nValidation schema\n\nSchema describing the certificates validation mechanism", "is_private": false, "id": 98446, "creation_time": "2007-01-24T03:15:02Z", "time": "2007-01-24T03:15:02Z", "creator": "marc.stern@approach.be", "bug_id": 41123, "attachment_id": 19446}, {"count": 9, "tags": [], "creator": "jorton@redhat.com", "text": "From review of attachment in comment 6:\n\nA couple of things which make this code hard to review:\n- many code style issues with this code; tabs, many indenting problems,\nwhitespace around if statements, see: \nhttp://httpd.apache.org/dev/styleguide.html and be familiar with existing httpd\ncode \n- don't use C++-style comments\n- lots of stretches of code have been commented out rather than just deleted. \nIf they aren't needed, delete them.\n\nGeneral review:\n- don't log anything in the ssl_cmd_* functions, this doesn't add much\n- don't invent macros for logging in ssl_ocsp.c, just use ap_log_* directly\n- when and where is NO_OCSP supposed to be defined?  this needs an autoconf\ncheck presumably; call the define MODSSL_something\n- if it's useful for users to be able configure a proxy make it properly\nconfigurable, otherwise remove the debugging code\n- X509_Int2Str() should be static and have a name outside a namespace owned by\nOpenSSL.  Use of the static result buffer inside is not thread-safe.\n- use pools not malloc\n- using pools, and pool cleanups, or just better function structure, should be\nable to eliminate the excessive use of goto in VerifyOCSP\n- GetExtensionValue looks scary.  Why is this not looking up extensions by NID,\ncan X509_get_ext_d2i not be used here?\n- also a bit scared about using the toy HTTP/1.0 client in OpenSSL :(", "id": 99058, "time": "2007-02-07T05:15:49Z", "bug_id": 41123, "creation_time": "2007-02-07T05:15:49Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "I modified and cleaned up the code as requested; I will upload a new patch.\n\nSome questions:\n\n1. I used the connection pool for memory allocation: c->pool from\nssl_callback_SSLVerify_Validity(). Is that correct ? I did not use any pool\ncleanup, as this will be closed at the end of the connection.\n\n2. I originally added the #ifdef NOOCSP in case you want a version that is\ncompiled with this code. Is this really needed ? Can I remove it ?\n\n3. Should I replace the HTTP connection by some calls to some Apache API ? Which\nAPI is available ?\n\n4. Probably dependent to the previous question, is there any global setting\ndefining a proxy to call when opening an outgoing HTTP(S) connection ? I could\ndefine it for the OCSP call only, but some other code (even external modules)\ncould also need it; this would lead to the same info being defined several time.\nShould I implement it only for my code ? Or can I assume that the server will\nalways have a direct access to the OCSP server ?\n", "attachment_id": null, "id": 99171, "creation_time": "2007-02-09T05:22:18Z", "time": "2007-02-09T05:22:18Z", "creator": "marc.stern@approach.be", "bug_id": 41123, "is_private": false}, {"count": 11, "tags": [], "bug_id": 41123, "attachment_id": null, "text": "Is it possible to use mod_proxy connection pools ?\nThis would make sense, although the outgoing connection pool should go out from\nmod_proxy to a separate module in order to be reusable by every module ...\nThis would maybe be the future best track, but it sounds a bit heavy to\nreimplement all mod_proxy connection pool handling just for the OCSP connection.\nCan we leave this as a future improvement and currently use the OpenSSL\nconnection (which works well in practice in several very big eGov sites) ?", "id": 99175, "time": "2007-02-09T05:57:31Z", "creator": "marc.stern@approach.be", "creation_time": "2007-02-09T05:57:31Z", "is_private": false}, {"count": 12, "tags": [], "text": "(In reply to comment #10)\n> I modified and cleaned up the code as requested; I will upload a new patch.\n\n\n>\n> 3. Should I replace the HTTP connection by some calls to some Apache API ? Which\n> API is available ?\n> \n> 4. Probably dependent to the previous question, is there any global setting\n> defining a proxy to call when opening an outgoing HTTP(S) connection ? I could\n> define it for the OCSP call only, but some other code (even external modules)\n> could also need it; this would lead to the same info being defined several time.\n> Should I implement it only for my code ? Or can I assume that the server will\n> always have a direct access to the OCSP server ?\n> \n\nProbably not well thought out, but how about a sub request to the proxy_handler\nprovided by mod_proxy?", "attachment_id": null, "bug_id": 41123, "id": 99213, "time": "2007-02-10T01:29:55Z", "creator": "rpluem@apache.org", "creation_time": "2007-02-10T01:29:55Z", "is_private": false}, {"count": 13, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "id": 99265, "time": "2007-02-11T23:54:19Z", "bug_id": 41123, "creation_time": "2007-02-11T23:54:19Z", "is_private": false, "text": "> how about a sub request to the proxy_handler provided by mod_proxy?\n\nIs there any documentation on how to do that ?\nWould it be acceptable to oblige loading mod_proxy for OCSP validation ?"}, {"count": 14, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #13)\n> > how about a sub request to the proxy_handler provided by mod_proxy?\n> \n> Is there any documentation on how to do that ?\n\nNot as far as I know. But having a look into mod_include for subrequest\ninclusion and at mod_rewrite for preparing a request to go to the proxy could be\nhelpful.\n\n> Would it be acceptable to oblige loading mod_proxy for OCSP validation ?\n\nI think this should be discussed on dev@httpd.apache.org and not here.", "id": 99291, "time": "2007-02-12T12:25:05Z", "bug_id": 41123, "creation_time": "2007-02-12T12:25:05Z", "is_private": false}, {"count": 15, "tags": [], "creator": "marc.stern@approach.be", "text": "Created attachment 19667\nCode following recommandations\n\nI followed all recommandations, except the connection that is still established\nby OpenSSL calls - using mod_proxy was too complex. Note that the OpenSSL\nconnection works very well in big production environments.", "id": 100052, "time": "2007-03-05T08:19:06Z", "bug_id": 41123, "creation_time": "2007-03-05T08:19:06Z", "is_private": false, "attachment_id": 19667}, {"count": 16, "tags": [], "text": "I've been working on a cleanup of this patch - we need a CLA on file for all the\ncontributors before anything can be committed, since it's a contribution of new\ncode; I'm not sure who out of the following that means:\n\n1) Marc Stern [no CLA]\n2) Matthieu Estrade [CLA on file] has worked on this previously\n3) Michal Prochazka [no CLA] wrote the initial port to 2.2 attached here.\n\nMarc, can you confirm the lineage of the patch most recently attached?\n\nhttp://issues.apache.org/bugzilla/attachment.cgi?id=19667\n", "attachment_id": null, "id": 102819, "creation_time": "2007-05-03T07:52:10Z", "time": "2007-05-03T07:52:10Z", "creator": "jorton@redhat.com", "bug_id": 41123, "is_private": false}, {"attachment_id": null, "tags": [], "creator": "marc.stern@approach.be", "is_private": false, "count": 17, "id": 103953, "time": "2007-06-01T02:57:52Z", "bug_id": 41123, "creation_time": "2007-06-01T02:57:52Z", "text": "Joe,\n\nI submitted the CLA some time ago.\nMichal did only port the patch to the new version, no new code was added.\nMatthieu could provide a CLA if needed (don't know if need for apache.org members).\n\nCan you acknowledge that everything is OK.\n\nThanks"}, {"count": 18, "tags": [], "text": "(In reply to comment #17)\n> Joe,\n> \n> I submitted the CLA some time ago.\n\nYour iCLA has been registered a while ago (May 7th, see\nhttp://people.apache.org/~jim/committers.html and search for Marc Stern).\nSo this is fine.\n\n> Michal did only port the patch to the new version, no new code was added.\n\nNot quite sure if an iCLA is needed in this case. Joe?\n\n> Matthieu could provide a CLA if needed (don't know if need for apache.org\nmembers).\n\nHis iCLA is already on file. So this is fine too.", "attachment_id": null, "bug_id": 41123, "id": 103955, "time": "2007-06-01T03:20:57Z", "creator": "rpluem@apache.org", "creation_time": "2007-06-01T03:20:57Z", "is_private": false}, {"count": 19, "tags": [], "text": "In ssl_ocsp.c, function ap_ocsp_verify_ocsp:\n\n----- start -----\n   if (rc == SSL_OCSP_OK) {\n        /* Get issuer */\n        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"Get Issuer\");\n        rc = X509_STORE_CTX_get1_issuer(&issuer, ctx, cert);\n        if (rc != 1) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n                         \"Cannot get issuer of '%s'. rc=%d\",\nX509_SUBJ_NAME(cert), rc);\n            rc = SSL_OCSP_ERROR_INTERNAL;\n        }\n    }\n\n    if (rc == SSL_OCSP_OK) {\n----- end -----\n\nThis can't work. If there's no issuer rc is set to SSL_OCSP_ERROR_INTERNAL. If\nthere is one, rc stays \"1\". However, SSL_OCSP_OK is 0, 1 means\nSSL_OCSP_ERROR_PARSE_URL\n\n", "attachment_id": null, "id": 108149, "creation_time": "2007-09-13T07:42:48Z", "time": "2007-09-13T07:42:48Z", "creator": "Wolfram.Joost@dak.de", "bug_id": 41123, "is_private": false}, {"count": 20, "tags": [], "bug_id": 41123, "attachment_id": 20958, "text": "Created attachment 20958\nSmall corrections in error handling, OCSP response logging, and memory leaks corrections (remarks from OpenSSL developers)", "id": 109234, "time": "2007-10-11T03:46:58Z", "creator": "marc.stern@approach.be", "creation_time": "2007-10-11T03:46:58Z", "is_private": false}, {"count": 21, "tags": [], "text": "Comment on attachment 20958\nSmall corrections in error handling, OCSP response logging, and memory leaks corrections (remarks from OpenSSL developers)\n\ndiff -uaEbwNp orig/ssl_ocsp.c ./ssl_ocsp.c\n--- orig/ssl_ocsp.c\t1970-01-01 01:00:00.000000000 +0100\n+++ ./ssl_ocsp.c\t2007-10-11 16:37:20.866178500 +0200\n@@ -0,0 +1,441 @@\n+/* Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+    \n+/*\t\t\t _\t       _\n+ *  _ __ ___\t___   __| |    ___ ___| |  mod_ssl\n+ * | '_ ` _ \\ / _ \\ / _` |   / __/ __| |  Apache Interface to OpenSSL\n+ * | | | | | | (_) | (_| |   \\__ \\__ \\ |\n+ * |_| |_| |_|\\___/ \\__,_|___|___/___/_|\n+ *\t\t\t |_____|\n+ *  ssl_ocsp.c\n+ *  The SSL OCSP checking\n+ *\n+ *  Developed by Marc Stern, for Approach Belgium / CSC / Belgian Government\n+ *\t      based on code developed by Zetes Pass\n+ *\n+ *  This code was added to support the Belgian Electronic Identity Card\n+ *\n+ *  The OCSP responder URL is read from the certificate itself\n+ *\n+ */ \n+    /* ``When the only tool you own is a hammer,\n+\t  every problem begins to resemble a nail.\u00b4\u00b4\n+     */ \n+    \n+#include \"mod_ssl.h\"\n+#include \"ssl_private.h\"\n+#include \"apr_base64.h\"\n+\n+#define X509_NAME2STR(name_)\t     X509_NAME_oneline(name_, NULL, 0)\n+#define X509_SUBJ_NAME(cert_)\t    \nX509_NAME2STR(X509_get_subject_name(cert_))\n+#define X509_ISSUER_NAME(cert_)     X509_NAME2STR(X509_get_issuer_name(cert_))\n+\n+\n+static char *ap_ocsp_ASN1_Int2Str(ASN1_INTEGER *data, apr_pool_t *pool)\n+{\n+    char *result = (char *)apr_palloc(pool, 100); /* 100 should be enough */\n+    char *buf = NULL;\n+    BIGNUM *bn = ASN1_INTEGER_to_BN(data, NULL);\n+\n+    *result = 0;\n+    if (bn && !BN_is_zero(bn)) {\n+\t buf = BN_bn2hex(bn);\n+\t if (buf) {\n+\t     strncpy(result, buf, sizeof(result) - 1);\n+\t     result[sizeof(result) - 1 ] = 0;\n+\t }\n+    }\n+\n+    if (bn) BN_free(bn);\n+    if (buf) OPENSSL_free(buf);\n+    return result;\n+}\n+\n+static char *ap_ocsp_get_ocsp_uri(X509 *cert, apr_pool_t *pool)\n+{\n+    int crit, j;\n+    STACK_OF(ACCESS_DESCRIPTION) *values =\n+\t (STACK_OF(ACCESS_DESCRIPTION) *)\n+\t\tX509_get_ext_d2i(cert, NID_info_access, &crit, NULL);\n+    if (! values) return NULL;\n+\n+    for (j = 0; j < sk_ACCESS_DESCRIPTION_num(values); j++) {\n+\t ACCESS_DESCRIPTION *value = sk_ACCESS_DESCRIPTION_value(values, j);\n+\t if(OBJ_obj2nid(value->method) == NID_ad_OCSP) {\n+\t     /* Name found in extension */\n+\t\t\tchar *result;\n+\t\t\t\n+\t\t\t/* Check that it is a URI */\n+\t\t\tif (value->location->type != GEN_URI)\n+\t\t\t\tcontinue;\n+\n+\t     result = apr_pstrdup(pool,\n+\t\t\t      (char\n*)value->location->d.uniformResourceIdentifier->data);\n+\t\t\t AUTHORITY_INFO_ACCESS_free(values);\n+\t     return result;\n+\t }\n+    }\n+\n+\tsk_ACCESS_DESCRIPTION_free(values);\n+\t//AUTHORITY_INFO_ACCESS_free(values);\n+    return NULL;\n+}\n+\n+\n+static BIO *ap_ocsp_connect(const char *host, int port) \n+{\n+    BIO *connection = BIO_new_connect((char *)host);\n+    if (!connection) return 0;\n+\n+    BIO_set_conn_int_port(connection, &port);\n+    if (BIO_do_connect(connection) <= 0) {\n+\t /* Not needed - default: BIO_set_close(connection, BIO_CLOSE); */\n+\t BIO_free_all(connection);\n+\t return NULL;\n+    }\n+\n+    return connection;\n+\n+}\n+\n+\n+static OCSP_RESPONSE *ap_ocsp_sendreq(const char *ocspHost, const char\n*ocspPort, const char *ocspPath, OCSP_REQUEST *request, server_rec *s) \n+{\n+    BIO *bio = NULL;\n+    OCSP_RESPONSE *response = NULL;\n+\n+    /* establish a connection to the OCSP responder */ \n+    ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t \"Connect to OCSP responder '%s:%s'\", ocspHost, ocspPort);\n+    bio = ap_ocsp_connect(ocspHost, atoi(ocspPort));\n+    if (!bio) {\n+\t ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t \"Cannot connect to OCSP responder '%s:%s'\", ocspHost,\nocspPort);\n+\t return NULL;\n+    }\n+    \n+    /* send the request and get a response */ \n+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t\t \"sending request to OCSP responder\");\n+    response = OCSP_sendreq_bio(bio, (char *)ocspPath, request);\n+    if (!response) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Cannot send request to OCSP responder '%s'\",\nocspHost);\n+\t }\n+\n+    BIO_free_all(bio);\n+\n+    return response;\n+}\n+\n+\n+static int ap_ocsp_verify_ocsp(X509 *cert, X509_STORE_CTX *ctx, server_rec *s,\n+\t\t\t\tint *ocspStatus, apr_pool_t *pool) \n+{\n+    int rc = SSL_OCSP_OK;\n+    X509 *issuer = NULL;\n+    char *ocspUrl = NULL, *ocspHost = NULL, *ocspPort = NULL, *ocspPath =\nNULL;\n+    BIO * bio = NULL;\n+    OCSP_RESPONSE * response = NULL;\n+    OCSP_BASICRESP * basicResponse = NULL;\n+    OCSP_REQUEST * request = NULL;\n+    OCSP_CERTID * certID = NULL;\n+    int ssl = 0;\n+    SSLSrvConfigRec *sc = mySrvConfig(s);\n+\tchar *subj_name = X509_SUBJ_NAME(cert);\n+\tchar *issuer_name = X509_ISSUER_NAME(cert);\n+\n+    *ocspStatus = V_OCSP_CERTSTATUS_UNKNOWN;\n+    X509_STORE_CTX_set_error(ctx, X509_V_ERR_APPLICATION_VERIFICATION);\n+    ap_log_error(APLOG_MARK, APLOG_INFO, 0, s,\n+\t \"OCSP check - cert='%s', issuer='%s'\", subj_name, issuer_name);\n+   \n+    \n+    /* First look if we force the responder url*/\n+    if (sc->server->OCSPForceResponderURL) {\n+\t ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t\t \"Force the url of responder to: %s\",\nsc->server->OCSPForceResponderURL);\n+\t ocspUrl = sc->server->OCSPForceResponderURL;\n+    }\n+    /* if not, look inside the certificate if we have one */\n+    else {\n+\t  /* Get OCSP Responder URI (only first one) */\n+\t ocspUrl = ap_ocsp_get_ocsp_uri(cert, pool); \n+\t if (ocspUrl)\n+\t     ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t\t \"OCSP responder from certificate: %s\", ocspUrl);\n+    }\n+\n+    if (!ocspUrl && sc->server->OCSPDefaultResponderURL) {\n+\t ap_log_error(APLOG_MARK, APLOG_INFO, 0, s,\n+\t     \"No Responder URL in certificate - using default: %s\",\n+\t     sc->server->OCSPDefaultResponderURL);\n+\t ocspUrl = sc->server->OCSPDefaultResponderURL;\n+    }\n+\n+    if (!ocspUrl) {\n+\t ap_log_error(APLOG_MARK, APLOG_WARNING, 0, s,\n+\t  \"Cannot get OCSP responder URL from '%s' and no default URL\nResponder\",\n+\t  subj_name);\n+\t rc = SSL_OCSP_ERROR_PARSE_URL;\n+    }\n+    \n+    if (rc == SSL_OCSP_OK) {\n+\t if (!OCSP_parse_url(ocspUrl, &ocspHost, &ocspPort, &ocspPath, &ssl)) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t \"Cannot parse OCSP responder URL from '%s'\",\n+\t\t\t\tsubj_name);\n+\t     rc = SSL_OCSP_ERROR_PARSE_URL;\n+\t }\n+    }\n+    \n+\n+    if (rc == SSL_OCSP_OK) {\n+\t ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"Create new OCSP\nrequest\");\n+\t request = OCSP_REQUEST_new();\n+\t if (!request) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Cannot create new OCSP request\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+    \n+    if (rc == SSL_OCSP_OK) {\n+\t /* Get issuer */\n+\t\tint r;\n+\t\t/* Enhancement: ctx->chain is already ordered -> extract 2nd ?\n*/\n+\t ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"Get Issuer\");\n+\t r = X509_STORE_CTX_get1_issuer(&issuer, ctx, cert);\n+\t if (r != 1) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Cannot get issuer of '%s'. rc=%d\", subj_name, rc);\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t certID = OCSP_cert_to_id(0, cert, issuer);\n+\t if (!certID || !OCSP_request_add0_id(request, certID)) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s\n+\t\t\t, \"Cannot get certificate id from '%s'\", subj_name);\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t OCSP_request_add1_nonce(request, 0, -1);\n+\n+\t /*  To use a proxy, do the following\n+\t       - ocspHost = proxyHost;\n+\t       - ocspPort = proxyPort;\n+\t       - ocspPath = ocspUrl;\n+\t  */\n+    \n+\t /* establish a connection to the OCSP responder */ \n+\t response = ap_ocsp_sendreq(ocspHost, ocspPort, ocspPath, request, s);\n+\t if (!response) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t     \"Cannot send request to OCSP responder '%s'\", ocspHost);\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\n+\n+    if ( (rc == SSL_OCSP_OK) && (s->loglevel >= APLOG_DEBUG) ) {\n+\t /* Log OCSP answer (complete OpenSSL buffer) */\n+\t char *buf = apr_palloc(pool,\n+\t\t\napr_base64_encode_len(response->responseBytes->response->length) + 1);\n+\t if (buf) {\n+\t     apr_base64_encode(buf,\n+\t\t\t (const char*)response->responseBytes->response->data,\n+\t\t\t response->responseBytes->response->length);\n+\t     ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t\t\t \"OCSP response (OpenSSL bufer): serial=%s | dn=%s |\n%s\",\n+\t\t\t  ap_ocsp_ASN1_Int2Str(X509_get_serialNumber(cert),\npool),\n+\t\t\t   X509_SUBJ_NAME(cert), buf);\n+\t }\n+\t else {\n+\t    ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"Cannot allocate\nbuffer\");\n+\t }\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t\tint r;\n+\t ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t\t \"Analyse OCSP request answer\");\n+\t r = OCSP_response_status(response);\n+\t if (r != OCSP_RESPONSE_STATUS_SUCCESSFUL) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Bad OCSP responder answer. rc=%d\", rc);\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+    \n+    if ( (rc == SSL_OCSP_OK) && (s->loglevel >= APLOG_DEBUG) ) {\n+\t /* Log OCSP answer (only the \"bare\" response) */\n+\t int len = i2d_OCSP_RESPONSE(response, NULL);\n+\t if (len <= 0)\n+\t    rc = SSL_OCSP_ERROR_INTERNAL;\n+\t else {\n+\t\t\tunsigned char *buf1, *buf2;\n+\t     buf1 = buf2 = (unsigned char *)apr_palloc(pool, len);\n+\t     if (!buf1) {\n+\t\t\t\tap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"Out\nof memory\");\n+\t\t rc = SSL_OCSP_ERROR_INTERNAL;\n+\t     }\n+\t     else {\n+\t\tif (i2d_OCSP_RESPONSE(response, &buf1) != len) \n+\t\t\t       rc = SSL_OCSP_ERROR_INTERNAL;\n+\t\telse {\n+\t\t     /* contents is in buf2, because buf1 is now pointing\n+\t\t\tto the end of the structure */\n+\t\t     char h[] = \"OCSP response : \";\n+\t\t     int len64 = apr_base64_encode_len(len);\n+\t\t     char *msg = (char *)apr_palloc(pool, len64 + strlen(h) +\n1);\n+\t\t     if (msg) {\n+\t\t\t strcpy(msg, h);\n+\t\t\t apr_base64_encode(msg + strlen(h), buf2, len);\n+\t\t\t msg[strlen(h) + len64 + 1] = 0;\n+\t\t\t ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, msg);\n+\t\t     }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t basicResponse = OCSP_response_get1_basic(response);\n+\t if (!basicResponse) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Bad OCSP responder answer\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t if (OCSP_check_nonce(request, basicResponse) <= 0) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Bad OCSP responder answer (bad nonce)\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\t \n+    if (rc == SSL_OCSP_OK) {\n+\t if (OCSP_basic_verify(basicResponse, 0, ctx->ctx,\n+\t\t sc->server->OCSPResponderVerifyFlag) <= 0) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Error verifying OCSP responder answer\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+    \n+    if (rc == SSL_OCSP_OK) {\n+\t int ocspReason = -1;\n+\t ASN1_GENERALIZEDTIME * ocspProducedAt, *ocspThisUpdate,\n+\t     *ocspNextUpdate;\n+\t rc = OCSP_resp_find_status(basicResponse, certID, ocspStatus,\n+\t\t       &ocspReason, &ocspProducedAt,\n+\t\t       &ocspThisUpdate, &ocspNextUpdate);\n+\t if (rc == 0) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"Bad OCSP status\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t \"OCSP validation completed: status=%d\", *ocspStatus);\n+    rc = SSL_OCSP_OK;\n+    }\n+\n+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"Cleanup OCSP code\");\n+\tif (issuer) X509_free(issuer);\n+\tif (subj_name)\t OPENSSL_free(subj_name);\n+\tif (issuer_name) OPENSSL_free(issuer_name);\n+    if (request)  OCSP_REQUEST_free(request);\n+    if (response) OCSP_RESPONSE_free(response);\n+    if (basicResponse) OCSP_BASICRESP_free(basicResponse);\n+\tif (ocspHost) OPENSSL_free(ocspHost);\n+\tif (ocspPort) OPENSSL_free(ocspPort);\n+\tif (ocspPath) OPENSSL_free(ocspPath);\n+    /* certID is just a pointer, nothing to free */ \n+\n+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, \"Ending cleanup OCSP code\");\n+    return rc;\n+}\n+\n+int ssl_cmd_VerifyOCSP(X509_STORE_CTX *ctx, server_rec *s, int *ocspStatus,\n+ apr_pool_t *pool) \n+{\n+    int rc = SSL_OCSP_OK, i;\n+    X509 *cert = X509_STORE_CTX_get_current_cert(ctx);\n+    X509_STORE_CTX *ocspCtx = NULL;\n+    X509_STORE *store = NULL;\n+    SSLSrvConfigRec *sc = mySrvConfig(s);\n+\tchar *subj_name = X509_SUBJ_NAME(cert);\n+\tchar *issuer_name = X509_ISSUER_NAME(cert);\n+\n+    ap_log_error(APLOG_MARK, APLOG_INFO, 0, s,\n+\t \"Validating certificate '%s', issuer: '%s'\",\n+\t    subj_name, issuer_name);\n+    \n+    /* Store certif chain in a store */ \n+    if (!ctx->chain) {\n+\t ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, \"No certificate chain\");\n+\t return SSL_OCSP_ERROR_INTERNAL;\n+    }\n+\n+    /*\n+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,\n+\t \"certificates chain length: %d\", ctx->chain->num);\n+    */ \n+\n+    store = X509_STORE_new();\n+    if (!store) {\n+\t ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t \"Cannot create a new X509 store\");\n+\t return SSL_OCSP_ERROR_INTERNAL;\n+    }\n+    \n+    for (i = 0; i < ctx->chain->num; i++)\n+    if (!X509_STORE_add_cert(store, sk_X509_value(ctx->chain, i))) {\n+\t ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t \"Cannot add certificate to X509 store\");\n+\t rc = SSL_OCSP_ERROR_INTERNAL;\n+    }\n+\n+    if (rc == SSL_OCSP_OK) {\n+\t ocspCtx = X509_STORE_CTX_new();\n+\t if (!ocspCtx) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t     \"Cannot create a new X509 context\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+    if (rc == SSL_OCSP_OK) {\n+\t if (X509_STORE_CTX_init(ocspCtx, store, cert, 0) != 1) {\n+\t     ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,\n+\t\t\t \"Cannot initialise the new X509 context\");\n+\t     rc = SSL_OCSP_ERROR_INTERNAL;\n+\t }\n+    }\n+\n+    if (rc == SSL_OCSP_OK)\n+\t rc = ap_ocsp_verify_ocsp(cert, ocspCtx, s, ocspStatus, pool);\n+\n+\t if (subj_name)   OPENSSL_free(subj_name);\n+\t if (issuer_name) OPENSSL_free(issuer_name);\n+    if (store)   X509_STORE_free(store);\n+    if (ocspCtx) X509_STORE_CTX_free(ocspCtx);\n+    return rc;\n+}", "attachment_id": 20958, "bug_id": 41123, "id": 109301, "time": "2007-10-12T06:22:21Z", "creator": "marc.stern@approach.be", "creation_time": "2007-10-12T06:22:21Z", "is_private": false}, {"count": 22, "tags": [], "text": "I've been looking into updating the patch to use mod_proxy and the sub request\nmechanism for OCSP queries. Unfortunately the request_rec structure is not set\nin SSL_get_app_exdata2() at the time it is needed and there doesn't appear to be\nan easy way to obtain it. This may be because the requested page is unknown at\nthis time because the SSL handshake is in progress and no HTTP headers have been\nsent. Does this make sub requests a non starter for OCSP or is it possible to\nuse an alternative technique?", "attachment_id": null, "id": 109494, "creation_time": "2007-10-19T06:09:07Z", "time": "2007-10-19T06:09:07Z", "creator": "steve@openssl.org", "bug_id": 41123, "is_private": false}, {"count": 23, "tags": [], "bug_id": 41123, "is_private": false, "text": "*** Bug 31383 has been marked as a duplicate of this bug. ***", "id": 110323, "time": "2007-11-08T07:00:24Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-08T07:00:24Z", "attachment_id": null}, {"count": 24, "tags": [], "text": "Yes it doesn't look like use of mod_proxy subrequests will be possible\nunfortunately, per discussion on dev@.\n\nI've got a heavily cleaned up version of the latest patch which I will attach\nshortly.\n\nI notice the latest patches have a comment \"based on code developed by Zetes\nPass\" which scares me again.   It is important to understand that we cannot\ninclude code in the ASF repository unless the copyright status is clear.  So\nagain, Marc; is this an original contribution to which you entirely own the\ncopyright?  If some other party wrote half the code then we need a CLA from them\ntoo since this is a substantial contribution of new code.", "is_private": false, "id": 110324, "creation_time": "2007-11-08T07:06:51Z", "time": "2007-11-08T07:06:51Z", "creator": "jorton@redhat.com", "bug_id": 41123, "attachment_id": null}, {"count": 25, "tags": [], "text": "> I notice the latest patches have a comment \"based on code developed by Zetes\n> Pass\" which scares me again.\n> is this an original contribution to which you entirely own the\n> copyright?\nYou can remove the copyright, as\n1. the code I mentionned was developped for the same project (Belgian Government)\n2. Nothing exists anymore from the original code, I rewrote everything\nThis was a kind of \"recognition\"", "attachment_id": null, "id": 110327, "creation_time": "2007-11-08T07:39:08Z", "time": "2007-11-08T07:39:08Z", "creator": "marc.stern@approach.be", "bug_id": 41123, "is_private": false}, {"count": 26, "tags": [], "bug_id": 41123, "attachment_id": null, "text": "(In reply to comment #24)\n> I've got a heavily cleaned up version of the latest patch which I will attach\n> shortly.\n1. Just to notice that ocsp.c must also be added to config.m4, but I guess you\ndiscovered this.\n2. I also noticed that, in order to compile it with the latest Microsoft SDK\n(from Visual C++ 2008), we need to include \"openssl/ocsp.h\" at the very\nbeginning of ssl_ocsp.h & ssl_engine_kernel.c.\n3. I am also planning to move the directives (SSLUseOCSP, etc.) to a location\nlevel, to offer more flexibility. Do you want to tackle this at the same time,\nor do you prefer I do it ?\n4. For which version did you plan to rework the patch ? 2.2.4, 2.2.6, Head ?", "id": 110328, "time": "2007-11-08T08:14:01Z", "creator": "marc.stern@approach.be", "creation_time": "2007-11-08T08:14:01Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 41123, "is_private": false, "text": "Created attachment 21130\nattempt 1 of refactored OCSP support\n\nThis is the cleaned up version of Marc's OCSP patch, diff relative to the\ntrunk.\t\n\nRelative changes:\n\n- moves OCSP code to ssl_engine_ocsp.c\n- heavily refactors, cleans up, simplifies code style etc in the above\n- tones down the debugging a lot.  some common helper functions are needed in\nssl_engine_log.c to log cert subject name etc, if desired\n- updates config.m4\n- removed error handling for OpenSSL functions which can only fail on OOM\n- removed poorly-named SSLOCSPResponderVerify (can be added back separately)\n- removed addition of SSLForceValidation, which is orthogonal to basic OCSP\nsupport (likewise add separately later)\n- reworked the config options to be:\n\n    SSLOCSPEnable <bool>\n    SSLOCSPOverrideResponder <bool>\n    SSLOCSPDefaultResponder <URL>\n\n  rather than redundantly having two directives to supply a URL.\n- simplify unnecessarily complex status/error handling for OCSP code \n\nThis is untested since my OCSP test setup is broken currently, so it probably\ndoesn't actually work.", "id": 110588, "time": "2007-11-15T06:13:59Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-15T06:13:59Z", "attachment_id": 21130}, {"attachment_id": null, "tags": [], "creator": "jorton@redhat.com", "is_private": false, "count": 28, "id": 110591, "time": "2007-11-15T06:16:34Z", "bug_id": 41123, "creation_time": "2007-11-15T06:16:34Z", "text": "(In reply to comment #26)\n> 1. Just to notice that ocsp.c must also be added to config.m4, but I guess you\n> discovered this.\n\nYup :)\n\n> 2. I also noticed that, in order to compile it with the latest Microsoft SDK\n> (from Visual C++ 2008), we need to include \"openssl/ocsp.h\" at the very\n> beginning of ssl_ocsp.h & ssl_engine_kernel.c.\n\nWhy, what's the failure otherwise?  The #include in ssl_toolkit_compat.h should\nbe sufficient.\n\n> 3. I am also planning to move the directives (SSLUseOCSP, etc.) to a location\n> level, to offer more flexibility. Do you want to tackle this at the same time,\n> or do you prefer I do it ?\n\nSounds useful, let's get the basic functionality committed first then deal with\nstuff like that incrementally.\n\n> 4. For which version did you plan to rework the patch ? 2.2.4, 2.2.6, Head ?\n\ntrunk.\n"}, {"count": 29, "tags": [], "bug_id": 41123, "attachment_id": null, "text": "> > In order to compile it with the latest Microsoft SDK\n> > (from Visual C++ 2008), we need to include \"openssl/ocsp.h\" at the very\n> > beginning of ssl_ocsp.h & ssl_engine_kernel.c.\n> \n> Why, what's the failure otherwise?  The #include in ssl_toolkit_compat.h\n> should be sufficient.\nSome general Apache include files end up in including standard MS SDK.\nIn latest SDK, MS defines some types if they are not defined yet. These types\nare defined by OpenSSL, so they have to be included before SDK .h, so before\nApache .h.\nThis could also be done in ssl_private.h: either include \"openssl/ocsp.h\" before\nApache files, or \"ssl_toolkit_compat.h\", or all \"ssl*.h\" files.", "id": 110594, "time": "2007-11-15T07:10:49Z", "creator": "marc.stern@approach.be", "creation_time": "2007-11-15T07:10:49Z", "is_private": false}, {"count": 30, "tags": [], "text": "(In reply to comment #27)\n> - removed addition of SSLForceValidation, which is orthogonal to basic OCSP\nThis is a very important feature (also for other validation mechanisms, like CRL\nor, maybe in the future LDAP).\nWithout that, the administrator cannot decide what to do when no validation\nmechanism is available (OCSp responder not available, or CRL files not up to\ndate). Depending on the server security level, the implementation will either be\nseen as conatining a security hole (the cert is accepted although it is\ninvalid),  or it will be considered as too strict (blocking valid users because\nof third party infrastsucture problems).\nThis is a feature that we see as crucial for most of the application owners.", "attachment_id": null, "id": 110596, "creation_time": "2007-11-15T07:19:43Z", "time": "2007-11-15T07:19:43Z", "creator": "marc.stern@approach.be", "bug_id": 41123, "is_private": false}, {"count": 31, "tags": [], "text": "(In reply to comment #30)\n> (In reply to comment #27)\n> > - removed addition of SSLForceValidation, which is orthogonal to basic OCSP\n> This is a very important feature (also for other validation mechanisms, like \n\nYes, that's fine, but it's also orthogonal to getting basic OCSP support\nworking, so it can be added afterwards.  Removing the intrusive changes to the\nverification callback makes the basic code easier to review and test.", "attachment_id": null, "bug_id": 41123, "id": 110598, "time": "2007-11-15T07:29:31Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-15T07:29:31Z", "is_private": false}, {"count": 32, "tags": [], "creator": "steve@openssl.org", "text": "Some comments on the latest patch.\n\n1. The function extract_responder_uri() has a memory leak. It should call:\n\nAUTHORITY_INFO_ACCESS_free(values);\n\ninstead of:\n\nsk_ACCESS_DESCRIPTION_free(values);\n\n2. After the call to apr_uri_parse() shouldn't we check the scheme is\nreally \"http\"? I've heard of some responders which use \"https\". There is also\nthe possibility that the URL will be split up into a path and query string which\nshould be concatenated when passed to OpenSSL.\n\n3. The OCSP query code doesn't include a timeout. This is a problem with the\nOpenSSL's rather simplistic OCSP handler and the fact that there is no\ngeneralized socket timeout code in OpenSSL. There are several ways to work\naround this. The easiest is to use APR sockets with a timeout. See my OCSP query\ncode in Bug 43822\n\n4. The code unconditionally uses an OCSP nonce. Some responders do not sign\nevery request but just server pre-cached responses. As a result the nonce value\ncan't be honoured and an error will occur when attempting to use such\nresponders. The most notable example is VeriSign's OCSP responder but there are\nothers.\n", "id": 110634, "time": "2007-11-16T04:53:34Z", "bug_id": 41123, "creation_time": "2007-11-16T04:53:34Z", "is_private": false, "attachment_id": null}, {"count": 33, "tags": [], "creator": "jorton@redhat.com", "attachment_id": 21193, "id": 111144, "time": "2007-11-27T09:02:15Z", "bug_id": 41123, "creation_time": "2007-11-27T09:02:15Z", "is_private": false, "text": "Created attachment 21193\nupdated patch"}, {"count": 34, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 111146, "time": "2007-11-27T09:13:57Z", "bug_id": 41123, "creation_time": "2007-11-27T09:13:57Z", "is_private": false, "text": "Changes in second patch:\n\n1) fixed to check URI scheme, and correctly free \"values\" stack per Steve's comment\n\n2) drop the duplicate X509_STORE_CTX & X509_STORE creation.  I can't see why\nthis is necessary; Marc, can you explain what that was for?  OCSP_basic_verify()\ncreates its own X509_STORE_CTX anyway in which to do the verify the response\nsignature, so it was never used directly.  Dropping this doesn't seem to make\nany difference to result in testing, either.\n\nWas this just here to allow for future customisation of how the response\nsignature is verified?\n\n3) simplified some more logging/debugging.  Uses the new ssl_log_cxerror()\nfunction added on the trunk to log cert details as context.\n\nSteve, thanks for a lot for the review - agree with your points (3) and (4) but\nwould like to address these later."}, {"count": 35, "tags": [], "bug_id": 41123, "is_private": false, "text": "[adding CC]", "id": 111147, "time": "2007-11-27T09:18:35Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-27T09:18:35Z", "attachment_id": null}, {"count": 36, "tags": [], "bug_id": 41123, "is_private": false, "text": "> \n> 2) drop the duplicate X509_STORE_CTX & X509_STORE creation.  I can't see why\n> this is necessary; Marc, can you explain what that was for?  \n\nI haven't tested it explicitly but I think the extra X509_STORE and ctx was\nintended to extract the issuer certificate from the client certificate in a\nreliable way.\n\nNote that X509_STORE_CTX_get1_issuer() will only retrieve the issuer certificate\nif it is trusted, hence the extra store to make all certificates trusted. To see\nwhy suppose you have this situation:\n\nRoot->Intermediate->Cert\n\nWhere Root only is trusted. The client would send Cert and Intermediate. The\nOpenSSL validation logic would then build the whole chain.\n\nA call to X509_STORE_CTX_get1_issuer() would fail because Intermediate is not in\nthe trusted store.\n\nIn actual fact it isn't necessary to create a separate store because the\ncertificate chain has already been built and validated. All you should need to\ndo is to extract the second member of the validated chain like this....\n\nissuer = sk_X509_value(X509_STORE_CTX_get_chain(ctx), 1);\nif (issuer == NULL) /* Error */\n\nSince issuer is an internal pointer it shouldn't be freed as it will be freed up\nwhen the ctx is cleaned up.\n\nOh and btw you do need to free up certID.\n", "id": 111186, "time": "2007-11-27T16:52:21Z", "creator": "steve@openssl.org", "creation_time": "2007-11-27T16:52:21Z", "attachment_id": null}, {"count": 37, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 111196, "time": "2007-11-28T02:34:41Z", "bug_id": 41123, "creation_time": "2007-11-28T02:34:41Z", "is_private": false, "text": "OK, but the SSLVerify callback (and hence this OCSP validation code) is invoked\nfor each and (necessarily) every cert from the root CA down to the peer's\ncertificate, to verify the complete chain - so:\n\n1) we must always be able to assume that the issuer of the\nX509_STORE_CTX_get_current_cert() cert is trusted, since otherwise we wouldn't\nget this far?\n\n2) sk_X509_value(X509_STORE_CTX_get_chain(ctx), 1) is not necessarily the issuer\nof the current cert - it might *be* the current cert?\n\n...right?  Or am I missing something fundamental?\n\nOn the CERTID front, if I add \n\n    if (certID) OCSP_CERTID_free(certID);\n\nit crashes on that line:\n\n#0  0x0000003800e75edb in free () from /lib64/libc.so.6\n#1  0x00000038094572fd in CRYPTO_free () from /lib64/libcrypto.so.6\n#2  0x00000038094bcc37 in ASN1_STRING_free () from /lib64/libcrypto.so.6\n..."}, {"count": 38, "tags": [], "creator": "jorton@redhat.com", "attachment_id": 21201, "is_private": false, "id": 111215, "time": "2007-11-28T11:37:19Z", "bug_id": 41123, "creation_time": "2007-11-28T11:37:19Z", "text": "Created attachment 21201\nfinal patch\n\nFinal patch before committing to trunk.  Changes:\n\n1) factors out the HTTP client into ssl_util_ocsp, and re-implements using APR\nfunctions directly; fixing I/O timeout handling, server address handling, and\nadding response memory use constraints rather than streaming into RAM\nindefinitely (!) as the OpenSSL code does.  Also allows this code to be easily\nswitched out for a Real HTTP Client (TM) later.\n\n2) removes the debugging code which dumps base64-encoded which seems overkill;\ntcpdump/wireshark works for such case.\n\n3) use a temporary pool to constrain connection pool memory use"}, {"count": 39, "tags": [], "bug_id": 41123, "is_private": false, "text": "> \n> 1) we must always be able to assume that the issuer of the\n> X509_STORE_CTX_get_current_cert() cert is trusted, since otherwise we wouldn't\n> get this far?\n> \n\nI'll check the current patch. As things stand I suspect if the server just\ntrusts a root CA and the client sends root->intermediate->EE it will fail to\nfind the intermediate CA because it isn't in the store.\n\n> 2) sk_X509_value(X509_STORE_CTX_get_chain(ctx), 1) is not necessarily the issuer\n> of the current cert - it might *be* the current cert?\n> \n> ...right?  Or am I missing something fundamental?\n> \n\nI was missing something. I was assuming the OCSP calls were being made *after*\nthe chain is validated instead of inside the verification callback.\n\nIf you make OCSP calls inside the verification callback the chain may not be\nfully trusted when you make the OCSP requests. This would allow a carefully\nconstructed certificate chain to persuade a server to make arbitrary OCSP\nrequests to any URL. Some would regard this as undesirable.\n\n> On the CERTID front, if I add \n> \n>     if (certID) OCSP_CERTID_free(certID);\n> \n> it crashes on that line:\n> \n\nYes, I missed that, sorry. It will be freed when the request is freed.\n\n", "id": 111221, "time": "2007-11-28T13:23:50Z", "creator": "steve@openssl.org", "creation_time": "2007-11-28T13:23:50Z", "attachment_id": null}, {"count": 40, "tags": [], "bug_id": 41123, "attachment_id": null, "text": "(In reply to comment #39)\n> I was missing something. I was assuming the OCSP calls were being made *after*\n> the chain is validated instead of inside the verification callback.\n> \n> If you make OCSP calls inside the verification callback the chain may not be\n> fully trusted when you make the OCSP requests. This would allow a carefully\n> constructed certificate chain to persuade a server to make arbitrary OCSP\n> requests to any URL. Some would regard this as undesirable.\n\nIf the cert being verified is not trusted the SSLVerify callback will get\ninvoked with ok=0 though surely? (the OCSP code won't get invoked in that case,\nonly if the cert *is* trusted) \n\nBut I did find this confusing, anyway.  Is it at all desirable to be doing OCSP\nvalidation of every cert in the chain, including whatever root CA?  Marc, was\nthe code written like this deliberately?\n\nIt would be simple enough to only do the OCSP validation for the actual peer cert.", "id": 111223, "time": "2007-11-28T14:28:28Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-28T14:28:28Z", "is_private": false}, {"count": 41, "tags": [], "text": "It wasn't quite as bad as I originally though. The final verification step is\nthe signature validation of each cert in the chain. So if that is successful the\ncallback is called ok==1 for each cert in the chain. \n\nI thought that the chain went leaf to root which would have allowed arbitrary\nURIs from a bogus chain.\n\nInstead it goes root to leaf which isn't as bad but would allow a bogus EE cert\nto trigger chain validation because it isn't checked until the end.\n\nAs things stand the current_issuer field of X509_STORE_CTX can be used to obtain\nthe issuer cert. Think that was first added in OpenSSL 0.9.7.\n\nThe only other case is when ok is set to 1 because it tolerates an earlier\nerror. That could end up doing an OCSP (and CRL) check twice AFAICS.\n\n\n", "is_private": false, "id": 111226, "creation_time": "2007-11-28T16:13:49Z", "time": "2007-11-28T16:13:49Z", "creator": "steve@openssl.org", "bug_id": 41123, "attachment_id": null}, {"count": 42, "tags": [], "bug_id": 41123, "is_private": false, "text": "Committed to trunk:\n\nhttp://svn.apache.org/viewvc?view=rev&revision=599385\n\nthanks to all for the patches, review, and patience to those who have worked on\nthis.\n\nFurther work:\n\n* add config options to configure whether CRL-and/or-OCSP validation is\nmandatory as in the \"ForceValidation\" config option, whether a nonce is used,\nwhat verification flags are passed to OCSP_basic_verify()\n\n* move verification to per-location context?\n\npatches welcome for all the above!  Marking this fixed; for issues with the\ncommitted code please file new bugs or mail dev@httpd, likewise for discussion\nof above future work.  (and as always, patches welcome!)", "id": 111252, "time": "2007-11-29T03:42:54Z", "creator": "jorton@redhat.com", "creation_time": "2007-11-29T03:42:54Z", "attachment_id": null}, {"count": 43, "tags": [], "bug_id": 41123, "attachment_id": null, "is_private": false, "id": 111257, "time": "2007-11-29T04:14:18Z", "creator": "marc.stern@approach.be", "creation_time": "2007-11-29T04:14:18Z", "text": "(In reply to comment #40)\n> Is it at all desirable to be doing OCSP validation of every cert in the chain,\n> including whatever root CA?\n> It would be simple enough to only do the OCSP validation for the actual peer\n> cert.\nIf you compromise the intermediate certificate, you could create a fake OCSP\nserver, with responses that will be accepted by Apache. The only way to ensure\nthe OCSP response is valid is to validate its certificate, and the same up to\nthe root."}, {"count": 44, "tags": [], "creator": "robe@allenta.com", "attachment_id": null, "id": 130277, "time": "2009-09-10T03:03:03Z", "bug_id": 41123, "creation_time": "2009-09-10T03:03:03Z", "is_private": false, "text": "I'm trying to add OCSP support to apache 2.2.9, and I've used this patch. But it doesn't work, because it doesn't find the function ssl_log_cxerror, that belongs (AFAIK) to apache 2.3 and up.\n\nI thought this patch was for the 2.2.x series, but if I'm wrong, what's the right patch to use with 2.2.x?\n\nThanks in advance."}, {"count": 45, "tags": [], "bug_id": 41123, "is_private": false, "text": "(In reply to comment #44)\n\n> I thought this patch was for the 2.2.x series, but if I'm wrong, what's the\n> right patch to use with 2.2.x?\n\nIMHO there is currently no patch for 2.2.x. So you need to backport the trunk version yourself.", "id": 130280, "time": "2009-09-10T04:12:30Z", "creator": "rpluem@apache.org", "creation_time": "2009-09-10T04:12:30Z", "attachment_id": null}, {"count": 46, "tags": [], "creator": "moreda@allenta.com", "attachment_id": null, "text": "I backported the basic OCSP support from trunk to 2.2.17.\n\nI tried to stay away from modifications out of the modules/ssl part of the source tree. \nThis patch doesn't provide the full featured OCSP support (i.e. stapling) currently present in trunk in order to avoid a more complex patch.\n\nThe lsdiff of the patch is:\n\na/configure\na/modules/ssl/mod_ssl.c\na/modules/ssl/ssl_engine_config.c\na/modules/ssl/ssl_engine_kernel.c\na/modules/ssl/ssl_engine_log.c\nb/modules/ssl/ssl_engine_ocsp.c\na/modules/ssl/ssl_private.h\na/modules/ssl/ssl_toolkit_compat.h\nb/modules/ssl/ssl_util_ocsp.c\n\nand it is based in the successive application of the patches corresponding to the svn trunk revisions:\n\n599385\n599496\n599497\n600482\n600493\n600497\n682788\n683242\n704917\n757463\n815719\n815741\n\n... plus a specific patch needed to add the ssl_log_cxerror(...) function in ssl_engine_log.c.\n\nYou have to define the HAVE_OCSP define flag at configure time (i.e. CPPFLAGS='-DHAVE_OCSP') in order to activate the support.\n\nAll in all, it could be useful for those that can't wait for the stable version of 2.3 and needed OCSP support without stapling in 2.2.x series.\n\nGreets.", "id": 142822, "time": "2010-12-17T15:57:54Z", "bug_id": 41123, "creation_time": "2010-12-17T15:57:54Z", "is_private": false}, {"count": 47, "tags": [], "creator": "moreda@allenta.com", "attachment_id": 26420, "id": 142823, "time": "2010-12-17T15:59:58Z", "bug_id": 41123, "creation_time": "2010-12-17T15:59:58Z", "is_private": false, "text": "Created attachment 26420\nAdd basic OCSP support to 2.2.17"}]
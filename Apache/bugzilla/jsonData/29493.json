[{"count": 0, "tags": [], "creator": "timothy.rundle@volvo.com", "attachment_id": null, "is_private": false, "id": 59003, "time": "2004-06-10T12:23:11Z", "bug_id": 29493, "creation_time": "2004-06-10T12:23:11Z", "text": "The Cookie Manager doesn't removes an existing cookie that has been set to \nexpired. This bug can be reproduced by creating a script with 3 HttpSampler \ncalls. Have the first HttpSample call a page that issues a valid transient \ncookie.  Have the second HttpSampler call abother page that re-issues the \ncookie with an expired timestamp, which should remove the cookie.  However, \nwhen the third HttpSampler is called the cookie is sent in the request.\n  I believe the bug is a combination of line 344 and lines 362-367 of the \nCookieManager.  On line 344 the default expiration time is set for 24 hrs. \nfrom now. That value is only change on lines 362-367 when the expired date is \nin the future.  There is even a TODO comment questioning this logic.  As a \nresult the timestamp will never be in the past so the cookie will never be \nremoved.  I beleive this can be fixed by removing the conditional statement \nand always set the Expires field of the cookie if an expiration date exists in \nthe header.\n\nCode Update (lines 362-367):\n//                if (date.getTime() > System.currentTimeMillis())\n                        //TODO: why this conditional? If it's expired, it's\n                        // expired!\n//                  {\n                        newCookie.setExpires(date.getTime());\n//                  }"}, {"id": 59005, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "count": 1, "text": "Thanks for the report. Fixed in the 2.0 branch code.", "time": "2004-06-10T12:35:49Z", "bug_id": 29493, "creation_time": "2004-06-10T12:35:49Z", "is_private": false}]
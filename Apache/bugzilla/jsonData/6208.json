[{"count": 0, "tags": [], "creator": "brentboyer@hotmail.com", "attachment_id": null, "text": "BACKGROUND:\nI need to sign some Javascript files (because they will do some priveleged\nactions) that are part of an html page that will be dished back to a modern\nMozilla client (e.g. Mozilla 0.9.7).\n\nMozilla has changed their code signing procedure, so that you must now place\nyour entire html page in a jar file, and then sign that entire jar file. \nDetails may be found in:\n    http://www.mozilla.org/projects/security/components/signed-scripts.html#signing\n\nA key thing with modern Mozilla is that you must now use a special jar url\nformat to access the signed data; see the \"Accessing a Signed Page\" subsection\nof the above link.\n\nIn my case, the jar url is something like:\n    jar:http://somehost/controllerMoz.jar!/controllerMoz.html\n\n(To be thorough, I have hand pasted the above url into Mozilla and verified that\nMozilla can fetch it and handle it correctly, so there is no problem with it.)\n\nTHE BUG IN TOMCAT:\nGiven the above, I have a servlet (an HttpServlet, to be precise) which will (if\nthe client has provided correct login information) send a redirect to the client\ntelling it to load the above url.  The java code for this is:\n    res.sendRedirect(\"jar:http://somehost/controllerMoz.jar!/controllerMoz.html\");\n\n(where res is the HttpServletResponse that is passed in to the doPost method of\nevery HttpServlet).\n\nUnfortunately, when the client attempts to login, all he gets is a 302 error\ncode page.\n\nIn trying to diagnose the problem, I set the webapps debug level to 9 and\nactivated a RequestDumperValve in the server.xml file.\n\nThis found the problem: it turns out that Tomcat is actually NOT sending back\nthe requested url to the client.  Instead, it sends back (the following is\ncopied from the log file):\n    RequestDumperValve[/cobrowser]:             header=Location=jar:\nIn other words, Tomcat is for some reason chopping off the remainder of the full\nredirect jar url.\n\nWhat Tomcat SHOULD have done is sent back\n   RequestDumperValve[/cobrowser]:             header=Location=jar:http://\nsomehost/controllerMoz.jar!/controllerMoz.html\n\nI am (probably falsely) assuming that the sendRedirect method is chopping it\noff; sendRedirect is probably working, but something later in Tomcat is\nmutilating it.  As near as I can tell, this is a bug.\n\nPlease get back to me ASAP on this!!!", "id": 10278, "time": "2002-02-04T01:46:34Z", "bug_id": 6208, "creation_time": "2002-02-04T01:46:34Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 10364, "time": "2002-02-05T12:59:11Z", "bug_id": 6208, "creation_time": "2002-02-05T12:59:11Z", "text": "Send redirect doesn't really do that (look at the javadocs).\nInstead, set the header and the status code yourself, and it should work."}, {"count": 2, "tags": [], "bug_id": 6208, "text": "Remy writes:\n\n>Send redirect doesn't really do that (look at the javadocs).\n\nI disagree.  To quote from the javadocs (taken from the latest Servlet 2.3 spec):\n\n\tpublic void sendRedirect(java.lang.String location)\n\t\t\t\t\t  throws java.io.IOException\n\n\t\tSends a temporary redirect response to the client using the specified\n\t\tredirect location URL. This method can accept relative URLs...\n\t\t[discussion of relative URL handling ommitted]\n\nThe first sentence above (\"Sends a temporary redirect response...\") says that it\nought to do what I originally stated in my bug report.\n\nThe next sentence states that the redirect Url CAN be, but does not HAVE to be,\nrelative.\n\nTherefore, I conclude that as far as the javadocs go, I should be able to call\n\tres.sendRedirect(\"jar:http://somehost/controllerMoz.jar!/controllerMoz.html\");\nas stated in my original bug report.\n\nNow, in my original code, before I had to worry about digital signatures, I used\nrelative Urls, doing stuff like\n\tres.sendRedirect(\"/controllerMoz.html\");\nwhich always worked.\n\nI just did an additional test with an http: absolute Url, \n\tres.sendRedirect(\"http://somehost/controllerMoz.html\");\nand the above also works fine; here is what the log file reports back for the\nresponse's header value:\n\theader=Location=http://166.84.156.61/controllerMoz.html\nwhich is exactly what I would expect.\n\nSo tell me why http: protocol abosolute Urls should work just fine, but jar:\nprotocol Urls get mutilated to just\n\theader=Location=jar:\n(when the response's header should be\n\theader=Location=jar:http://somehost/controllerMoz.jar!/controllerMoz.html\n)\n\nClearly, tomcat is somehow treating jar: absolute Urls differently than http:\nabsolute Urls.\n\nTherefore, I maintain that this behavior is a bug, and I am reopening it.\n\n\n>Instead, set the header and the status code yourself, and it should work.\n\nOK -- that should constitute a reasonable workaround of the bug.  Thanks for the\nsuggestion (it is better than an uglier workaround that I thought of).\n\n\n", "id": 10379, "time": "2002-02-06T04:22:30Z", "creator": "brentboyer@hotmail.com", "creation_time": "2002-02-06T04:22:30Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Tomcat has no way to reliable way to tell what is or what isn't an absolute URL,\nexcept checking if it begins with http or https (which I think is how is\nimplemented now). If you find a nice way to improve this and support your use\ncase, please submit a patch.", "id": 10616, "time": "2002-02-12T23:40:40Z", "bug_id": 6208, "creation_time": "2002-02-12T23:40:40Z", "is_private": false}]
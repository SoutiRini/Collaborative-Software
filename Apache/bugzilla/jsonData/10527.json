[{"count": 0, "tags": [], "bug_id": 10527, "attachment_id": null, "is_private": false, "id": 19088, "time": "2002-07-06T22:00:47Z", "creator": "jfienberg@simmedia.com", "creation_time": "2002-07-06T22:00:47Z", "text": "Migrating from 4.03 to 4.04 and Coyote, getting error using HTTPS with the \nCoyote connector. Some access to HTTPS pages works, but once error occurs, \nsubsequent access to HTTPS pages is blocked (and one gets 404 errors) for a \ntime. Then HTTPS access works again for a while, then blocked, etc.\n\nHere is my config for Coyote, followed by the console error messages:\n\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"80\" minProcessors=\"5\" maxProcessors=\"100\" bufferSize=\"4096\"\n               enableLookups=\"false\" redirectPort=\"443\"\n               acceptCount=\"20\" debug=\"0\" connectionTimeout=\"60000\"/>\n\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"443\" minProcessors=\"5\" maxProcessors=\"100\" \nbufferSize=\"4096\"\n               enableLookups=\"false\"\n\t       acceptCount=\"20\" debug=\"0\" scheme=\"https\" secure=\"true\">\n      <Factory className=\"org.apache.coyote.tomcat4.CoyoteServerSocketFactory\"\n               clientAuth=\"false\" protocol=\"TLS\" keystorePass=\"mypasssword\" \nkeystoreFile=\"mycertificate.p12\" keystoreType=\"pkcs12\"/>\n\nPoolTcpEndpoint: Handshake failed\njava.net.SocketException: Software caused connection abort: socket write error\n        at java.net.SocketOutputStream.socketWrite0(Native Method)\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\nPoolTcpEndpoint: Handshake failed\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:126)\n        at com.sun.net.ssl.internal.ssl.OutputRecord.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.Handshaker.sendChangeCipherSpec\n(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.ServerHandshaker.d(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.ServerHandshaker.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.ServerHandshaker.processMessage\n(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.Handshaker.process_record(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.AppOutputStream.write(DashoA6275)\n        at java.io.OutputStream.write(OutputStream.java:58)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(DashoA6275)\n        at org.apache.tomcat.util.net.JSSESocketFactory.handshake\n(JSSESocketFactory.java:270)\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:493)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:518)\n        at java.lang.Thread.run(Thread.java:536)\njava.net.SocketException: Software caused connection abort: JVM_recv in socket \ninput stream read\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:116)\nThreadPool: Caught exception executing \norg.apache.tomcat.util.net.TcpWorkerThread@e4245, terminating thread\n        at com.sun.net.ssl.internal.ssl.InputRecord.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.InputRecord.read(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA6275)\n        at com.sun.net.ssl.internal.ssl.AppOutputStream.write(DashoA6275)\n        at java.io.OutputStream.write(OutputStream.java:58)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(DashoA6275)\n        at org.apache.tomcat.util.net.JSSESocketFactory.handshake\n(JSSESocketFactory.java:270)\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:493)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:518)\n        at java.lang.Thread.run(Thread.java:536)\njava.lang.NullPointerException\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:512)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:518)\n        at java.lang.Thread.run(Thread.java:536)\nThreadPool: Caught exception executing \norg.apache.tomcat.util.net.TcpWorkerThread@e4245, terminating thread\njava.lang.NullPointerException\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:512)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:518)\n        at java.lang.Thread.run(Thread.java:536)\nJul 6, 2002 2:42:36 PM \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler \nprocessConnection\nINFO: SocketException reading request, ignored\nJul 6, 2002 2:42:38 PM \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler \nprocessConnection\nINFO: SocketException reading request, ignored\n\nThe last SocketException error repeats more.\n\nTIA\nJay"}, {"count": 1, "tags": [], "bug_id": 10527, "attachment_id": null, "is_private": false, "id": 19092, "time": "2002-07-07T08:07:19Z", "creator": "remm@apache.org", "creation_time": "2002-07-07T08:07:19Z", "text": "Assuming this actually happens (it doesn't for me), it is a problem with your\nclient. It is unlikely that the phenomenon you describe then happens, as this\nstack trace was printed out at a much higher level that the socket handling code\n(it wasn't an uncaught exception)."}, {"count": 2, "tags": [], "bug_id": 10527, "attachment_id": 18354, "is_private": false, "id": 89518, "time": "2006-05-26T13:16:07Z", "creator": "akhil@lucent.com", "creation_time": "2006-05-26T13:16:07Z", "text": "Created attachment 18354\nTomcat thread hung on handshake\n\nServer.xml \n<Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\" port=\"8443\"\nminProcessors=\"5\" maxProcessors=\"75\" enableLookups=\"true\" acceptCount=\"100\"\ndebug=\"0\" scheme=\"https\" secure=\"true\" useURIValidationHack=\"false\"\ndisableUploadTimeout=\"true\">\n\t\t\t<Factory\nclassName=\"org.apache.coyote.tomcat4.CoyoteServerSocketFactory\"\nclientAuth=\"false\"\nkeystoreFile=\"/omcsw/27.0.2.8.00/lib/3pt/bes/var/domains/base/configurations/EMF/mos/presentation/Client_iEMS/appl/iemsKeystore\"\nkeystorePass=\"lucent\" protocol=\"TLS\"/>\n\t\t</Connector>\n\nWe found that this is happening in our setup here. All the connections were\nfine and then after some time the tomcat was slow in responding and then it\nstopped responding. We believe it is because our maxProcessors was set to 75\nand we can see there were 74 threads on handshake running. So we understand the\nserver slowness could be of high number of threads but what we do not\nunderstand is why the threads are performing socket read and why there is no\ntime out. \n\nIf it is not a tomcat problem any clue on what client configuration could be\nwrong will be helpful."}, {"count": 3, "tags": [], "bug_id": 10527, "attachment_id": null, "text": "After more investigation we found that the problem that is happening is that on\nthe server side we have an applet and whenever browser is trying to download\nthis applet over https the number of handshake threads in tomcat are reproducing\nquickly and is reaching max number of threads.\n\nAfter that tomcat does not work as it is not able to spawn threads. We tried\nsigning the applet and still the same behaviour. Any help will be appreciated on\nwhat could be the problem.", "id": 89550, "time": "2006-05-29T12:53:18Z", "creator": "akhil@lucent.com", "creation_time": "2006-05-29T12:53:18Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 10527, "attachment_id": null, "is_private": false, "id": 89562, "time": "2006-05-29T15:54:41Z", "creator": "akhil@lucent.com", "creation_time": "2006-05-29T15:54:41Z", "text": "We found the problem. I am not sure if it is bug in tomcat or a right behaviour.\nFrom my point of view crashing of tomcat is not a right behaviour. Anyway the\nroot cause of the problem was that on the server side we had a keystore which\nwas not generated for every machine i.e. it was just a common one.\n\nWe use IP address to access the URL and hence we used to get a warning whenever\nconnected to https site that the \"Certificate address does not match the address\nin the URL\" but it used to continue by clicking on Ok.  Hence we thought it is\njust a warning and should not cause any problem. But later we found out that\nthis was preventing the tomcat to have handshake with the browser and was\ncausing the exhaustion of tomcat threads.\n\nSo the solution is to have a keystore which is generated for each IP address or\nvalid for a domain depending on the URL from where the java applet is downloaded."}]
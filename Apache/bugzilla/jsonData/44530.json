[{"count": 0, "tags": [], "bug_id": 44530, "attachment_id": null, "text": "I am running the junit task with forkmode=\"once\" and the xml formatter.  It seemsthe xml output and subsequent report generation only contain system.out for the first test class that is ran.  If I set showoutput=\"true\" I have the same problem (system.out is not in every xml output) but the console output shows system.out for every test class.  Here's my junit task definition:\n\n<junit fork=\"true\" forkmode=\"once\" showoutput=\"true\">", "id": 114263, "time": "2008-03-04T09:42:39Z", "creator": "mrosett@alumni.ucsd.edu", "creation_time": "2008-03-04T09:42:39Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44530, "attachment_id": null, "id": 114884, "creation_time": "2008-03-22T16:44:28Z", "time": "2008-03-22T16:44:28Z", "creator": "peterreilly@apache.org", "text": "I have tested this and do not see the problem\nbuild file:\n<project name=\"x\" default=\"run\">\n  <target name=\"run\">\n    <path id=\"t.path\">\n      <path path=\"build/classes\"/>\n      <fileset dir=\"lib\" includes=\"*.jar\"/>\n    </path>\n    <mkdir dir=\"build/classes\"/>\n    <mkdir dir=\"build/test/reports\"/>\n    <javac srcdir=\"src\" destdir=\"build/classes\"\n           target=\"1.5\" source=\"1.5\" debug=\"yes\"\n           classpathref=\"t.path\"/>\n\n    <junit fork=\"true\" forkmode=\"once\" showoutput=\"true\">\n      <formatter type=\"brief\" usefile=\"false\"/>\n      <classpath refid=\"t.path\"/>\n      <formatter type=\"xml\"/>\n      <batchtest todir=\"build/test/reports\">\n        <fileset dir=\"src\" includes=\"**/*Test.java\"/>\n      </batchtest>\n    </junit>\n  </target>\n  \n  <target name=\"clean\">\n    <delete dir=\"build\"/>\n  </target>\n</project>\nand the java files:\npeter/T1TEst.java:package peter;\n\nimport org.junit.*;\n\npublic class T1Test {\n    @Test\n    public void t1() {\n        System.out.println(\"T1Test::t1\");\n    }\n}\nand\npackage peter;\n\nimport org.junit.*;\n\npublic class T2Test {\n    @Test\n    public void t2() {\n        System.out.println(\"T2Test::t2\");\n    }\n}\n\nThe xml reports contain the stdout from each test.\n\n\nI have seen something similar with (shudder) Log4j\n\nAt the each of each test, the std output copy is closed\n*unless* one uses the follow attribute in the log4j.properties\nfile.\n# attributes for stdout appender\n# need to set follow for stdout as it gets moved around in junit tests\nlog4j.appender.STDOUT.follow=true\n\nSetting to NEEDINFO, it would be nice to have a complete\ntar.gz or zip file showing the problem.\n\n\n\n", "is_private": false}, {"count": 2, "attachment_id": 26906, "bug_id": 44530, "is_private": false, "id": 145859, "time": "2011-04-19T08:15:08Z", "creator": "willem.verstraeten@gmail.com", "creation_time": "2011-04-19T08:15:08Z", "tags": [], "text": "Created attachment 26906\ntestcase reproducing the problem using java.util.logging"}, {"count": 3, "attachment_id": null, "bug_id": 44530, "text": "It is easy to reproduce this with JUL (java.util.logging). JUL also caches a reference to System.err.", "id": 145860, "time": "2011-04-19T08:15:21Z", "creator": "willem.verstraeten@gmail.com", "creation_time": "2011-04-19T08:15:21Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "ejona@google.com", "attachment_id": null, "id": 151578, "time": "2011-11-17T00:54:58Z", "bug_id": 44530, "creation_time": "2011-11-17T00:54:58Z", "is_private": false, "text": "I just implemented a workaround for this bug in my own codebase by using a formatter created for the task (a la org.apache.tools.ant.taskdefs.optional.junit.TearDownOnVmCrash). My workaround is for users of java.util.logging.\n\nThe code for the formatter is available at (I'll add it as an attachment as well):\nhttp://code.google.com/p/plexi/source/browse/test/JUnitLogFixFormatter.java\n\nUse it by adding an additional formatter tag to your build.xml:\n\n<junit...\n  ...\n  <formatter classname=\"JUnitLogFixFormatter\" usefile=\"false\"/>\n  ...\n</junit>\n\n\nAt the beginning of each test, the code looks at the root Logger and replaces any ConsoleHandlers it finds with a new ConsoleHandler (and copies over the configuration). ConsoleHandler caches System.err during its constructor, so constructing a new instance is required. After the test completes, the original handlers are replaced back into the root Logger.\n\nFor my codebase this seems to work, but YMMV."}, {"count": 5, "tags": [], "bug_id": 44530, "attachment_id": 27961, "text": "Created attachment 27961\nJUnitLogFixFormatter.java\n\nWorkaround formatter for java.util.logging users", "id": 151579, "time": "2011-11-17T00:56:28Z", "creator": "ejona@google.com", "creation_time": "2011-11-17T00:56:28Z", "is_private": false}]
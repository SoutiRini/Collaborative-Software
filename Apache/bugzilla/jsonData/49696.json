[{"count": 0, "tags": [], "bug_id": 49696, "attachment_id": 25835, "text": "Created attachment 25835\nAdds method to ImageWriterRegistry to allow priority when registering writers\n\nFor the singleton instance of ImageWriterRegistry, there is no way to register a new writer to override an already-registered MIME type.\n\nImageWriterRegistry retrieves writers based on a high-to-low priority, and checks whether the writer is functional.\n\nThe text of the ImageWriterRegistry register method reads \"If an ImageWriter for the same target MIME type has already been registered, it is overwritten with the new one.\", but this is not a true statement.  The writer is instead placed in an internal MIME type-specific array based on a high-to-low preference priority.\n\nPriorities are assigned based on the class name.  Other than adjusting the class loader or altering the package-level default-preferred-order.properties file, there is no way to add a new ImageWriter class name with a priority to the registry.\n\nNew writers added via the existing register method will always receive a priority of 0, and built-in classes for existing MIME types (JPEG, TIFF, PNG) will always be preferred.\n\nProposal is \n1) leave the existing register method which preferences a higher priority over a lower priority alone, but adjust the JavaDoc to state \"If an ImageWriter for the same target MIME type has already been registered, it is placed in an array based on priority.\"\n\n2) add a new method, register(ImageWriter writer, int priority) which will add the priority for the writer class name to the preferred order map prior to calling register(ImageWriter).", "id": 138856, "time": "2010-08-03T19:17:00Z", "creator": "joshua.marquart@firstdata.com", "creation_time": "2010-08-03T19:17:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 49696, "text": "Thanks for that patch, Joshua. Applied: http://svn.apache.org/viewvc?rev=991835&view=rev\n\nI've also changed the default order to use negative numbers so the default register() method already overrides the existing implementations:\nhttp://svn.apache.org/viewvc?rev=991838&view=rev", "id": 139611, "time": "2010-09-02T03:57:46Z", "creator": "jeremias@apache.org", "creation_time": "2010-09-02T03:57:46Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 49696, "attachment_id": null, "text": "Did a code comparison of checked-in vs. patch.\n\nLine \n import java.util.HashMap;import java.util.Map;\nwas removed in favor of \n    private Map imageWriterMap = new java.util.HashMap();\n\nNot that it matters to me which way is used, but is there a preference that I don't know about to using new qualified.class.Name() instead of import qualified.class.Name;", "id": 139629, "time": "2010-09-02T17:02:45Z", "creator": "joshua.marquart@firstdata.com", "creation_time": "2010-09-02T17:02:45Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 49696, "text": "(In reply to comment #2)\n> Did a code comparison of checked-in vs. patch.\n> \n> Line \n>  import java.util.HashMap;import java.util.Map;\n> was removed in favor of \n>     private Map imageWriterMap = new java.util.HashMap();\n> \n> Not that it matters to me which way is used, but is there a preference that I\n> don't know about to using new qualified.class.Name() instead of import\n> qualified.class.Name;\n\nActually I'd be curious to know the rationale too :-)\n\nVincent", "id": 139656, "time": "2010-09-03T06:49:23Z", "creator": "vhennebert@gmail.com", "creation_time": "2010-09-03T06:49:23Z", "is_private": false, "attachment_id": null}, {"text": "You can read up on the discussion from 2002 right here:\nhttp://markmail.org/thread/n3gp3og37xuzrlio\n\nThe FOP Java best practices note that, too:\nhttp://xmlgraphics.apache.org/fop/dev/conventions.html#java-best-practices", "tags": [], "bug_id": 49696, "attachment_id": null, "count": 4, "id": 139734, "time": "2010-09-07T09:33:40Z", "creator": "jeremias@apache.org", "creation_time": "2010-09-07T09:33:40Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 49696, "attachment_id": null, "text": "(In reply to comment #4)\n\nI think you misunderstood the question, Jeremias.\n\nWe understand that assigning a class implementation as the interface (assigning a HashMap to Map) is a core Java Best Practice.\n\nWhat the initial question (which is really not that important) is:\n\nWhy was the following code used:\n\nMap mapObject = new java.util.HashMap();\n\ninstead of\n\nimport java.util.HashMap;\n\nMap mapObject = new HashMap();\n\nWas there a benefit to doing this, and if so, what is it because we're openly curious and would probably apply the practice of not using \"import\" in our own code if there was a benefit.", "id": 139748, "time": "2010-09-07T18:08:23Z", "creator": "joshua.marquart@firstdata.com", "creation_time": "2010-09-07T18:08:23Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jeremias@apache.org", "text": "(In reply to comment #5)\n\nAh, I see. Sorry for being slow. I guess it's a matter of personal preference. I like shorter import sections and not having implementation details there may make the whole thing less cluttered. It's not like this is very important to me but I like to think that this reinforces the idea behind prefer-interface-over-impl. I hope that makes sense.", "id": 139754, "time": "2010-09-08T05:25:44Z", "bug_id": 49696, "creation_time": "2010-09-08T05:25:44Z", "is_private": false, "attachment_id": null}]
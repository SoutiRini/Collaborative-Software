[{"count": 0, "tags": [], "bug_id": 46323, "text": "Created attachment 22978\nJNDI Realm additions. NtlmAuthenticator class will be added separately\n\nGoals:\n* centralize the parameterization of user authentication at the container level;\n* have a simple NTLM authentication for intranet users;\n* be able to run Tomcat in a Microsoft Active Directory network where the server is secured (absolutely no login allowed to regular users)\n\nThere is a Microsoft \u201cspecification\u201d (bug?) by which all LDAP binds are evaluated on the Domain Server (like if the user was attempting to login on the Domain Server).\n\nIt would be better to have binds evaluated as if they were originating from the LDAP client machine (the Tomcat Server).\n\nTo circumvent this, I have been obliged to remove the binding (the password checking) but to ensure that it is NTLM (and nothing else) which provides the username.\n\nThe users are therefore automatically logged with the username used to log on their PC.\n\nThe attached patch is for current Apache Tomcat sources (6.0.18).\n\nIt adds:\n\n1) An NTLM Authenticator: nothing to configure except in the web.xml of each application:\n   <login-config>\n       <auth-method>NTLM</auth-method>\n       <realm-name>ThisIsApassword</realm-name>\n   </login-config> \nThe realm-name is the \u201cpassword\u201d which ensures that authentication is done by NTLM and no other method.\n\nA very long password is strongly recommended.\n\n2) A modified JNDI Realm with new parameters: \n* preAuthenticatedPassword=\u201dThisIsApassword\u201d\nThis to suppress password checking if preAuthenticatedPassword is provided. \n* userIdentification=\u201duserPrincipalName\u201d provides a standardized username, whatever the retrieved user name (case of complex userSearch patterns) \n* userNamePrefix and userNameSuffix\nThis to suppress a prefix and/or a suffix from username before returning it to the application: good to suppress domain identification, etc.\nWhen you user complex userSearch pattern, this can be very useful.\n\nExample:\nuserSearch=\"(|(sAMAccountName={0})(userPrincipalName={0}@domain.com)(userPrincipalName={0}))\"\nuserIdentification=\"userPrincipalName\" userNamePrefix=\u201ddomain\\\u201d userNameSuffix=\u201d@domain.com\u201d \n\nHopes this can be useful to the community!", "id": 123000, "time": "2008-12-02T09:13:48Z", "creator": "christophe.dupriez@poisoncentre.be", "creation_time": "2008-12-02T09:13:48Z", "is_private": false, "attachment_id": 22978}, {"count": 1, "tags": [], "bug_id": 46323, "attachment_id": 22979, "text": "Created attachment 22979\nNtlmAuthenticator.java\n\nThis completes the patch file with a new Authenticator Class.", "id": 123001, "time": "2008-12-02T09:15:03Z", "creator": "christophe.dupriez@poisoncentre.be", "creation_time": "2008-12-02T09:15:03Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46323, "attachment_id": null, "text": "So do I understand this right? This authenticator does not do any authentication but only receives the user name on the user's computer?\n\nIf so, I am against including this in the Tomcat distribution, as people would probably think that this would provide any security. Instead, we need an authenticator that authorises against the Active Directory somehow and offers fallback Basic authentication (like mod_ntlm for Apache does, for example).", "id": 134394, "time": "2010-02-10T02:41:37Z", "creator": "cdauth+issues.apache.org@cdauth.de", "creation_time": "2010-02-10T02:41:37Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46323, "attachment_id": null, "is_private": false, "id": 134396, "time": "2010-02-10T05:56:29Z", "creator": "christophe.dupriez@poisoncentre.be", "creation_time": "2010-02-10T05:56:29Z", "text": "Basic Authentication is taking control when the user provided by NTLM is not recognized (or the user comes from outside the LAN).\n\nAs you read:\n*** There is a Microsoft \u201cspecification\u201d (bug?) by which all LDAP binds are\nevaluated on the Domain Server (like if the user was attempting to login on the\nDomain Server).\n\nIt would be better to have binds evaluated as if they were originating from the\nLDAP client machine (the Tomcat Server).\n\nTo circumvent this, I have been obliged to remove the binding (the password\nchecking) but to ensure that it is NTLM (and nothing else) which provides the\nusername. ***\n\nSomebody who \"emulates\" (cracks) NTLM can forge its identity: this patch is not securing more a Microsoft network than NTLM protocol (which is phasing out if I understand well). Meanwhile, for many LANs, NTLM protocol remains the only option.\n\nThe \"roles\" of the user (memberOf) are fetched from the Active Directory: a user cannot forge its rights."}, {"count": 4, "tags": [], "text": "If I understand it right, an NTLM token (or whatever you call it) consists of the encrypted username and password (and in NTLMv2 the hostname you authenticate to). When I want to log on to an SMB share with a user whose password I don't know, I cannot forge his NTLM token because I don't know his password. If I try to log on with an NTLM token that in fact contains the correct username, Windows will (at least I suppose so) check the token for the right password.\n\nDo you, in your code, perform a validation anywhere or do you just extract the username out of the NTLM token? Can I create an NTLM token with the right username but a wrong password and the login will still work? If so (and I could not find any validation in your code), this authenticator is only applicable for information, not for authentication/authorisation, thus I would not include it in the Tomcat distribution to avoid confusion.", "is_private": false, "id": 134426, "creator": "cdauth+issues.apache.org@cdauth.de", "time": "2010-02-11T12:38:42Z", "bug_id": 46323, "creation_time": "2010-02-11T12:38:42Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I cannot check the password because I would then need to make a \"bind\" from Tomcat. This bind would be originating from the server (and, if I remember well, would be seen as a login to the LDAP server!). As our Network Management completely forbid any user login to the servers, binds are then always failing.\n\nI agree with you that Tomcat Distribution must not include potential security holes: thank you for pointing the potential problem my solution brings (I did not realized it). For our situation (closed LAN), it is not a real problem but for others, it may be. For them, I think some way to fully validate the token without \"bind\" or to make a bind on behalf of the originating computer (you mention NTLMv2 which includes the hostname: may be something to check here).\n\nMeanwhile, my Network Management is asking more and more often if NTLM could be disabled in the whole LAN!!! I would be very happy to discuss this with other people looking to solve those issues on the long term.\n\nFor now, our users are enjoying to access applications without ever having to log in. And when you have physical access to the premises, you can do worse than by forging NTLM tokens. But this is not acceptable for worldwide distribution, I agree. I would happily test solution ideas if there is any...", "is_private": false, "id": 134429, "creator": "christophe.dupriez@poisoncentre.be", "time": "2010-02-11T13:05:59Z", "bug_id": 46323, "creation_time": "2010-02-11T13:05:59Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 134430, "time": "2010-02-11T13:25:26Z", "bug_id": 46323, "creation_time": "2010-02-11T13:25:26Z", "tags": [], "text": "This isn't going to be included in any Tomcat distribution but the source will always be available through Bugzilla for those users that find it useful."}]
[{"count": 0, "tags": [], "creator": "morten@apache.org", "attachment_id": 30597, "id": 168640, "time": "2013-07-17T12:23:48Z", "bug_id": 55276, "creation_time": "2013-07-17T12:23:48Z", "is_private": false, "text": "Created attachment 30597\nmod_proxy_balancer.c with added handler for REST API\n\nI am looking to extend the Apache web server with a REST API that allows my application nodes to automatically register themselves with the Apache mod_proxy_balancer module.\n\nMy motivation for doing this is to allow my application nodes to exist as elastic resources in a cloud. This allows me to create a single VM image for my application, and use my hypervisor to bring up new VMs from this single VM image on demand.\n\nI have updated mod_proxy_balancer.c with a new handler \"balancer-api\", implemented as the balancer_api(request_req*) function in the attached modified version of mod_proxy_balancer.c\n\nI configure my load balancer as follows:\n\n  <Proxy balancer://runtime>\n  BalancerMember http://192.168.66.66:8081\n  </Proxy>\n\n  ProxySet balancer://runtime growth=100\n  ProxyPass /xdist balancer://runtime\n  ProxyPassReverse /xdist balancer://runtime\n\n  <Location /balancer-api>\n  SetHandler balancer-api\n  Order Deny,Allow\n  Deny from all\n  Allow from 127.0.0.1\n  Allow from 127.0.0.2\n  Allow from 192.168.66.66\n  </Location>\n\nThe balancer-api handler allows JSON/REST request to retrieve the list of balancers and workers, but also to add and disable workers using REST request like:\n\n    HTTP GET http://hostname:port/balancer-api  -- lists all balancers and their workers\n    HTTP PUT http://hostname:port/balancer-api/balancer/http://workerhost:port  -- adds \"http://workerhost:port\" to \"balancer\"\n    HTTP DELETE http://hostname:port/balancer-api/balancer/http://workerhost:workerport  -- disables \"http://workerhost:port\" to \"balancer\"\n\nThere isn't much security in this, other than the standard \"Deny from all\", \"Allow from hostname\", etc. and I am not sure if more is needed to ensure that the load balancer cannot be hacked from the outside."}, {"count": 1, "tags": [], "creator": "covener@gmail.com", "is_private": false, "text": "Please attach as a universal diff from trunk. I think we would want some kind of nonce/CRSF token (I think the balancer manager has this?)", "id": 168641, "time": "2013-07-17T12:27:25Z", "bug_id": 55276, "creation_time": "2013-07-17T12:27:25Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "morten@apache.org", "attachment_id": 30598, "is_private": false, "id": 168643, "time": "2013-07-17T13:53:28Z", "bug_id": 55276, "creation_time": "2013-07-17T13:53:28Z", "text": "Created attachment 30598\nsvn diff for proposed enhancement"}, {"count": 3, "tags": [], "text": "Marking status as \"new\" as required information is supplied.", "is_private": false, "bug_id": 55276, "id": 168644, "time": "2013-07-17T13:53:49Z", "creator": "morten@apache.org", "creation_time": "2013-07-17T13:53:49Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "> I think we would want some kind of nonce/CRSF token\n> (I think the balancer manager has this?)\n\nThe balancer-api handler is intended for access by an application over the REST protocol. However, there is nothing preventing a user's browser from hitting the balancer-api handler from within their secure network (where they are allowed access the URL for the balancer-api handler). But, updates to the load balancer, such as adding a worker or disabling a worker can only be done using HTTP PUT and HTTP DELETE. I am not sure if these HTTP verbs can be forged through a URL embedded in a 3rd party website - but I seriously doubt that.\n\nWith this in mind, can you please review if the nonce/CRSF token is required?\n\nI don't really know how this would be implemented for a REST API that is accessed by an external application. Would you require two service calls; one to get the nonce, and a subsequent call to submit your PUT/DELETE request with the nonce embedded in the URL or body?", "attachment_id": null, "bug_id": 55276, "id": 168645, "time": "2013-07-17T14:04:16Z", "creator": "morten@apache.org", "creation_time": "2013-07-17T14:04:16Z", "is_private": false}, {"count": 5, "tags": [], "text": "Bump...\n\nAny chance of having this extension integrated for the next release? I don't think a CRSF token is required, as standard security filters can be used to restrict access to only an internal network segment.", "is_private": false, "bug_id": 55276, "id": 172787, "time": "2014-01-29T11:07:29Z", "creator": "morten@apache.org", "creation_time": "2014-01-29T11:07:29Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "I am still wondering what the actually deficiency is with the current balancer-manager method?\n\nThanks!", "is_private": false, "bug_id": 55276, "id": 173340, "time": "2014-02-18T18:12:44Z", "creator": "jim@apache.org", "creation_time": "2014-02-18T18:12:44Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "morten@apache.org", "attachment_id": null, "id": 173374, "time": "2014-02-19T21:19:47Z", "bug_id": 55276, "creation_time": "2014-02-19T21:19:47Z", "is_private": false, "text": "Jim, the improvement is adding a REST API that application nodes can use to register/deregister with the load balancer at startup/shutdown rather than having to manually add the new nodes using the balancer-manager interface. This speeds up the node startup process, and my intention is to be able to get an elastic-ish environment outside of an elastic cloud like Amazon EC2. Amazon EC2 do this automatically, but I would like to do something similar in a non-elastic cloud environment or a conventional hosting environment."}, {"count": 8, "tags": [], "text": "Hello,\n\nthis concept is similar to mod_cluster, however mod_cluster is based on older mod_proxy_balancer interface, and both of those modules do not load well together. by having this enhancement we can have same concept in the core module.\n\nit is very useful for environments that scale dynamically/on demand.\n\nas far as authentication goes, endpoint can be restricted with location block and few allow from directives, in addition to few authentication modules that are already shipped with httpd.", "is_private": false, "bug_id": 55276, "id": 176757, "time": "2014-07-30T03:31:48Z", "creator": "winfinit@gmail.com", "creation_time": "2014-07-30T03:31:48Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 55276, "text": "Looking further at this ticket, i think we should put a bit more thought into structure of such service for mod_proxy_balancer, such functionality should be part of mod_proxy, and mod_proxy should implement it in such way that mod_proxy_balancer can extend it with directives that it exposes (i.e. BalancerMember), that way one can configure dynamically all aspects of proxy, and not just managing balancer members, so we can do natively what mod_cluster does already, just in more standard HTTP/REST way.", "id": 176758, "time": "2014-07-30T04:15:15Z", "creator": "winfinit@gmail.com", "creation_time": "2014-07-30T04:15:15Z", "is_private": false, "attachment_id": null}]
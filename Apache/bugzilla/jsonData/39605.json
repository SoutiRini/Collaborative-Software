[{"count": 0, "attachment_id": null, "creator": "slamb@slamb.org", "text": "Affects at least versions 2.0.52 and 2.2.x. Not sure about 2.3.x; it's pretty different.\n\nI ran into bug 34332 with httpd 2.0.52 and apr 0.9.6. It was frustrating to diagnose because Apache \njust skipped the end of one chunk and went on to the next. My Subversion client said this:\n\n    $ svn co http://example.com/svn/foo\n    ...\n    svn: REPORT request failed on '/svn/!svn/vcc/default'\n    svn: REPORT of '/svn/!svn/vcc/default': Chunk delimiter was invalid (http://example.com)\n\nAlthough bug 34332 has been fixed in APR, Apache's behavior still confounds diagnosis of such \nconditions. It continues to use the connection if a write has returned EAGAIN. In core_output_filter it \nlogs this:\n\n            ap_log_error(APLOG_MARK, APLOG_INFO, rv, c->base_server,\n                         \"core_output_filter: writing data to the network\");\n\nbut that's a priority below the default LogLevel, so I didn't see it. This bit here:\n\n            /* No need to check for SUCCESS, we did that above. */\n            if (!APR_STATUS_IS_EAGAIN(rv)) {\n                c->aborted = 1;\n            }\n\n            /* The client has aborted, but the request was successful. We\n             * will report success, and leave it to the access and error\n             * logs to note that the connection was aborted.\n             */\n\nis broken. The status should never be EAGAIN here, and if it is, aborting the connection would be better \nthan ignoring it. The conditional just makes the comment wrong.", "id": 89231, "time": "2006-05-18T07:20:56Z", "bug_id": 39605, "creation_time": "2006-05-18T07:20:56Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 39605, "attachment_id": 18310, "id": 89232, "time": "2006-05-18T07:22:19Z", "creator": "slamb@slamb.org", "creation_time": "2006-05-18T07:22:19Z", "is_private": false, "text": "Created attachment 18310\nFix for httpd-2.2.x branch"}, {"count": 2, "attachment_id": null, "bug_id": 39605, "is_private": false, "id": 89256, "time": "2006-05-18T15:53:36Z", "creator": "slamb@slamb.org", "creation_time": "2006-05-18T15:53:36Z", "tags": [], "text": "Tested it this morning; my fix was not enough.\n\nStepping back a second, I see this on an strace of brokenness:\n\nhere it's trying to send a 130203-byte chunk. Only 27487 bytes get sent out, leaving 102716.\n\n    writev(12, [{\"1fc9b\\r\\n\", 7}, {\"5xwAAIagAJRlhdwPgIoCRoJ0lkWDEICH\"..., 3611}, \n{\"QtsAfKloOGu5EQW50evUC2wwSilrLzKE\"..., 126592}, {\"\\r\\n\", 2}], 4) = 27494\n\nHere it succeeds in sending 66608 bytes, leaving 36108.\n\n    poll([{fd=12, events=POLLOUT, revents=POLLOUT}], 1, 120000) = 1\n    writev(12, [{\"IEBwkBEAAABQMCAwMIBwUJAgMEBREGBw\"..., 102716}, {\"\\r\\n\", 2}], 2) = 66608\n\nHere it succeeds in sending 33304 bytes, leaving 2804.\n\n    poll([{fd=12, events=POLLOUT, revents=POLLOUT}], 1, 120000) = 1\n    writev(12, [{\"ePFoc8+VaNcmDB5ycecSbTE9/Ps2R7ch\"..., 36108}, {\"\\r\\n\", 2}], 2) = 33304\n\n...next write times out:\n\n    poll([{fd=12, events=POLLOUT}], 1, 120000) = 0\n    [...some reads from another descriptor...]\n\nAnd here it goes on to the next chunk, completely forgetting about those 2804 bytes.\n\n    writev(12, [{\"12e8e\\r\\n\", 7}, {\"AACD4lSOD4OxYICVU1GVF41QlFGFRZRl\"..., 2452}, {\"hDB/\njOkpPxHqDQJh4NcLNujizjHb8wSl\"..., 75002}, {\"\\r\\n\", 2}], 4) = 10136\n\nWith the patch below and another one that makes writev_it_all log everything (different run), I see this:\n\n[Thu May 18 08:32:42 2006] [error] writev_it_all 130212 bytes: take 1: apr_sendv 130212 bytes -> \n27494\n[Thu May 18 08:32:42 2006] [error] writev_it_all 130212 bytes: take 2: apr_sendv 102718 bytes -> \n66608\n[Thu May 18 08:32:42 2006] [error] writev_it_all 130212 bytes: take 3: apr_sendv 36110 bytes -> \n33304\n[Thu May 18 08:34:42 2006] [error] (70007)The timeout specified has expired: writev_it_all 130212 \nbytes: take 4: apr_sendv 2806 bytes -> 0\n[Thu May 18 08:34:42 2006] [info] (70007)The timeout specified has expired: core_output_filter: \nwriting data to the network\n[Thu May 18 08:34:42 2006] [error] writev_it_all 77463 bytes: take 1: apr_sendv 77463 bytes -> 10136\n\nThere are two problems here:\n\n(1) APR_TIMEUP; our network's pretty messed up right now so this isn't that surprising.\n\n(2) core_output_filter sees the error and gives up on data it has to send without aborting the \nconnection, causing further chunks to be messed up and diagnosis to be frustrating.\n\nI opened this bug for #2. Apparently setting c->aborted isn't enough, though it looks like a bunch of \ncallers check it before writing stuff. I'll look around a bit more."}, {"count": 3, "tags": [], "bug_id": 39605, "attachment_id": null, "text": "If c->aborted gets set unconditionally as your patch proposes and things still\ndo not work I think this is a bug of the caller (seems to be subversion in your\ncase) as it should not call ap_pass_brigade again if c->aborted is set. But\nmaybe the following patch is a useful sanity check to ensure that no further\ndata gets sent:\n\nIndex: core_filters.c\n===================================================================\n--- core_filters.c      (Revision 406722)\n+++ core_filters.c      (Arbeitskopie)\n@@ -542,6 +542,20 @@\n     apr_read_type_e eblock = APR_NONBLOCK_READ;\n     apr_pool_t *input_pool = b->p;\n\n+    /*\n+     * Maybe we have been called by a buggy part in the lower filter chain\n+     * or a buggy handler on a connection that has been already aborted.\n+     * Just destroy the brigade and return with APR_SUCCESS.\n+     */\n+    if (c->aborted) {\n+        ap_log_cerror(APLOG_MARK, APLOG_ERR, rv, c, \"core_output_filter:\"\n+                      \" Trying to write on a connection aborted by the\"\n+                      \" client.\");\n+        if (b)\n+            apr_brigade_destroy(b);\n+        return APR_SUCCESS;\n+    }\n+\n     if (ctx == NULL) {\n         ctx = apr_pcalloc(c->pool, sizeof(*ctx));\n         net->out_ctx = ctx;\n\n\n", "id": 89266, "time": "2006-05-18T20:26:34Z", "creator": "rpluem@apache.org", "creation_time": "2006-05-18T20:26:34Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "slamb@slamb.org", "is_private": false, "count": 4, "id": 89270, "time": "2006-05-18T21:29:25Z", "bug_id": 39605, "creation_time": "2006-05-18T21:29:25Z", "text": "Yeah, that's helpful. I'm totally in favor of anything that makes stuff easier to diagnose.\n\nLooks like the call stack is this:\n\nwindow_handler\n* svn_stream_write\n** brigade_write_fn\n*** apr_brigade_write\n**** ap_filter_flush\n***** ap_pass_brigade\n****** ap_byterange_filter\n******* ap_pass_brigade\n******** ap_content_length_filter\n********* ap_pass_brigade\n********** chunk_filter\n*********** ap_pass_brigade\n************ core_output_filter <- sets aborted\n...\n** svn_stream_write again\n...\n************ core_output_filter again <- errors\n\nSubversion's only use of aborted seems to be this in dav_svn__send_xml:\n\n  /* ### check for an aborted connection, since the brigade functions\n     don't appear to be return useful errors when the connection is\n     dropped. */\n  if (output->c->aborted)\n    return svn_error_create(SVN_ERR_APMOD_CONNECTION_ABORTED, 0, NULL);\n\nIf the contract on brigade writing is that the caller should check c->aborted before and after, then \nperhaps this should be moved into brigade_write_fn. I will take it up on the Subversion mailing list and \nsee what happens."}, {"count": 5, "tags": [], "bug_id": 39605, "text": "Created attachment 18319\nPatch to mod_dav_svn to avoid this problem\n\nCould you try this patch to mod_dav_svn and see if it fixes the problem?", "id": 89271, "time": "2006-05-18T21:43:14Z", "creator": "rooneg@electricjellyfish.net", "creation_time": "2006-05-18T21:43:14Z", "is_private": false, "attachment_id": 18319}, {"count": 6, "tags": [], "bug_id": 39605, "text": "Created attachment 18320\nPatch to mod_dav_svn to avoid this problem\n\nOops, here's one that'll probably compile, and use the correct error\nconstant...", "id": 89272, "time": "2006-05-18T21:45:45Z", "creator": "rooneg@electricjellyfish.net", "creation_time": "2006-05-18T21:45:45Z", "is_private": false, "attachment_id": 18320}, {"count": 7, "tags": [], "text": "With the mod_dav_svn patch, I end up in core_output_filter on an aborted connection with this call \nstack:\n\n#3  0x00c526a8 in core_output_filter (f=0x9f97080, b=0xa013bb0) at /usr/src/debug/httpd-2.0.52/\nserver/core.c:3966\n#4  0x00c49009 in ap_pass_brigade (next=0x9f97080, bb=0xa013bb0) at /usr/src/debug/\nhttpd-2.0.52/server/util_filter.c:511\n#5  0x00c33423 in chunk_filter (f=0xa013ab0, b=0xa013bb0) at /usr/src/debug/httpd-2.0.52/\nmodules/http/http_core.c:217\n#6  0x00c49009 in ap_pass_brigade (next=0xa013ab0, bb=0xa013bb0) at /usr/src/debug/\nhttpd-2.0.52/server/util_filter.c:511\n#7  0x00c4bae5 in ap_content_length_filter (f=0x9fcce48, b=0xa013bb0) at /usr/src/debug/\nhttpd-2.0.52/server/protocol.c:1241\n#8  0x00c49009 in ap_pass_brigade (next=0x9fcce48, bb=0xa013bb0) at /usr/src/debug/\nhttpd-2.0.52/server/util_filter.c:511\n#9  0x00c4b640 in end_output_stream (r=0x9fcc078) at /usr/src/debug/httpd-2.0.52/server/\nprotocol.c:1032\n#10 0x00c387de in ap_process_request (r=0x9fcc078) at /usr/src/debug/httpd-2.0.52/modules/http/\nhttp_request.c:256\n#11 0x00c3363f in ap_process_http_connection (c=0x9f96b80) at /usr/src/debug/httpd-2.0.52/\nmodules/http/http_core.c:250\n#12 0x00c46349 in ap_run_process_connection (c=0x9f96b80) at /usr/src/debug/httpd-2.0.52/\nserver/connection.c:42\n#13 0x00c466b4 in ap_process_connection (c=0x9f96b80, csd=0x0) at /usr/src/debug/httpd-2.0.52/\nserver/connection.c:175\n#14 0x00c39901 in child_main (child_num_arg=Variable \"child_num_arg\" is not available.\n) at /usr/src/debug/httpd-2.0.52/server/mpm/prefork/prefork.c:609\n#15 0x00c39af8 in make_child (s=0x9eb8e88, slot=0) at /usr/src/debug/httpd-2.0.52/server/mpm/\nprefork/prefork.c:649\n#16 0x00c39c17 in startup_children (number_to_start=8) at /usr/src/debug/httpd-2.0.52/server/\nmpm/prefork/prefork.c:721\n#17 0x00c3a4db in ap_mpm_run (_pconf=0x9eb70a8, plog=0x9ee3158, s=0x9eb8e88) at /usr/src/\ndebug/httpd-2.0.52/server/mpm/prefork/prefork.c:940\n#18 0x00c4134a in main (argc=2, argv=0xbfff3694) at /usr/src/debug/httpd-2.0.52/server/main.c:\n618\n\nwhich I guess means Subversion isn't the only such caller.\n\nIs it just me or is checking c->aborted all the time a pretty awkward thing to expect callers to do? I'm \nnot familiar enough with Apache's innards to know what returning failures from core_output_filter \nwould do, but it does seem more inline with callers' usual expectations.", "attachment_id": null, "bug_id": 39605, "id": 89274, "time": "2006-05-18T22:18:37Z", "creator": "slamb@slamb.org", "creation_time": "2006-05-18T22:18:37Z", "is_private": false}, {"count": 8, "attachment_id": null, "creator": "jorton@redhat.com", "is_private": false, "id": 89287, "time": "2006-05-19T12:31:00Z", "bug_id": 39605, "creation_time": "2006-05-19T12:31:00Z", "tags": [], "text": "Now that bug 31759 is fixed there should be no need for the core output filter\nto be doing this trick of returning APR_SUCCESS on failure AFAIK.\n\nIt should now be safe and correct to always just return the error on that error\npath (I don't know why the EAGAIN check would be needed there either); and also\nadd the check per comment 3, which can also just return APR_ECONNABORTED rather\nthan hiding the failure."}, {"attachment_id": null, "tags": [], "creator": "markphip@gmail.com", "is_private": false, "count": 9, "id": 119103, "time": "2008-07-29T12:53:38Z", "bug_id": 39605, "creation_time": "2008-07-29T12:53:38Z", "text": "What is the status of this bug and what are possible solutions?\n\nWe have Subversion users running Apache 2.2.8, with mod_dav_svn 1.5.0 that still get this error pretty regularly, so I assume there is still some kind of fix needed."}, {"count": 10, "tags": [], "bug_id": 39605, "is_private": false, "text": "This should be fixed on the 2.2.x branch now as of r791454.", "id": 128551, "time": "2009-07-06T05:31:18Z", "creator": "jorton@redhat.com", "creation_time": "2009-07-06T05:31:18Z", "attachment_id": null}]
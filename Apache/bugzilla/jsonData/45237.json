[{"count": 0, "tags": [], "bug_id": 45237, "attachment_id": 22143, "text": "Created attachment 22143\nTest case showing the problem\n\nSee thread on fop-dev:\nhttp://markmail.org/message/7p7jgxff6zx2gvss\nor\nhttp://mail-archives.apache.org/mod_mbox/xmlgraphics-fop-dev/200806.mbox/%3C20080619092704.BFBA.DEV@jeremias-maerki.ch%3E", "id": 117813, "time": "2008-06-19T05:12:57Z", "creator": "jeremias@apache.org", "creation_time": "2008-06-19T05:12:57Z", "is_private": false}, {"count": 1, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "is_private": false, "id": 117818, "time": "2008-06-19T06:46:54Z", "bug_id": 45237, "creation_time": "2008-06-19T06:46:54Z", "text": "\nJust had an idea. To be considered together with the already mentioned swapping startOfNode() and addChildNode():\n\nThe problem is that FOText.endOfNode() (and subsequentially FOEventHandler.characters()) is called before handleWhiteSpace().\n\nIf we remove the endOfNode() call from flushText(), and instead call endOfNode() for the text-nodes upon addChildNode() for the following node (after handleWhiteSpace()), the issue should be partly alleviated. The FOEventHandler will then receive characters() for text-nodes that have been treated and the ignorable white-space is no longer reported in those events...\n\nFor fo:characters, we could move the call to FOEventHandler.character() to endOfNode(). We would then only need to make sure that this particular endOfNode() call is skipped in FOTreeBuilder (?)\n\nFor inline-level FOs, there would still need to be some sort of deferral (since the XMLWhiteSpaceHandler also has to wait until either the next node or Block.endOfNode() to finish them)."}, {"count": 2, "tags": [], "bug_id": 45237, "text": "Looked closer at this one, and simply swapping the call-sequence of startOfNode() and addChildNode() broke some table-related testcases, since the table-code relied on startOfNode() being called before addChildNode() (leading to some dubious lines of code in AbstractRetrieveMarker.cloneSingleNode()...)\n\nProposed solution: introduction of a public finalizeNode() method in FONode, whose main purpose will be to perform 'finishing' tasks. The default endOfNode() implementation in FONode invokes this method without registering any event. Subclasses can then add overrides like:\n\n...\nsuper.endOfNode(); // trigger finalizeNode();\ngetFOEventHandler().endXXX(); // send endOfNode() notification\n...\n\nAs such, AbstractRetrieveMarker can then call finalizeNode() to avoid sending the event twice.\nThe initialization code for the table-related FOs would be moved to a processNode() override (which is already public), so that the calls to startOfNode() can also be avoided, and both methods can retain their protected visibility in the table-FOs.", "id": 117882, "time": "2008-06-22T06:41:32Z", "creator": "adelmelle@apache.org", "creation_time": "2008-06-22T06:41:32Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 45237, "is_private": false, "text": "resetting P2 open bugs to P3 pending further review", "id": 157542, "time": "2012-04-07T01:44:29Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:44:29Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 45237, "text": "change status from ASSIGNED to NEW for consistency", "id": 157893, "time": "2012-04-11T06:16:27Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:16:27Z", "is_private": false, "attachment_id": null}]
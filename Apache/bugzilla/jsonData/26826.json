[{"count": 0, "tags": [], "bug_id": 26826, "attachment_id": null, "id": 52047, "time": "2004-02-10T12:12:28Z", "creator": "sunsear@raketnet.nl", "creation_time": "2004-02-10T12:12:28Z", "is_private": false, "text": "David Wall sent a performance enhancing patch to the jakarta-taglibs-user list.\nAfter modding it some and testing it fairly extensively, I've created a patch\nfrom his enhancements. Below the patch we would like to see applied:\n\nIndex: Util.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-taglibs/standard/src/org/apache/taglibs/standard/tag/common/core/Util.java,v\nretrieving revision 1.12\ndiff -u -r1.12 Util.java\n--- Util.java\t13 Dec 2003 05:48:07 -0000\t1.12\n+++ Util.java\t10 Feb 2004 12:07:55 -0000\n@@ -152,23 +152,47 @@\n      * See also OutSupport.out().\n      */\n     public static String escapeXml(String input) {\n-        StringBuffer sb = new StringBuffer();\n-        for (int i = 0; i < input.length(); i++) {\n-            char c = input.charAt(i);\n-            if (c == '&')\n-                sb.append(\"&amp;\");\n-            else if (c == '<')\n-                sb.append(\"&lt;\");\n-            else if (c == '>')\n-                sb.append(\"&gt;\");\n-            else if (c == '\"')\n-                sb.append(\"&#034;\");\n-            else if (c == '\\'')\n-                sb.append(\"&#039;\");\n-            else\n-                sb.append(c);\n-        }\n-        return sb.toString();\n+\t\tStringBuffer sb = null;\n+\t\tint length = input.length();\n+\t\tint currentPos;\n+\n+\t\t//Check if there are any special characters to escape\n+\t\tfor (currentPos = 0; currentPos < length; currentPos++) {\n+\t\t\tchar c = input.charAt(currentPos);\n+\t\t\tif (c == '&' || c == '<' || c == '>' || c == '\"' || c == '\\'') {\n+\t\t\t\tsb = new StringBuffer(length+5);\n+\t\t\t\tsb.append(input.substring(0,currentPos)); // copy over the string up until\nwe found this char\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// If we didn't create a new buffer, then the input string didn't need any\nescaping so we win big time\n+\t\t// and we can just return the same string they gave us (no object creation,\nno copying).\n+\t\tif ( sb == null )\n+\t\t{\n+\t\t\tSystem.out.println(\"Nothing found to escape. Returning.\");\n+\t\t\treturn input;\n+\t\t}\n+\t\t\n+\t\tSystem.out.println(\"Something found to escape. processing.\");\n+\n+\t\t// Oh well, we did have some escaping to do, so let's check the rest to see\nif there are any more to do.\n+\t\tfor (; currentPos < length;++currentPos) {\n+\t\t\tchar c = input.charAt(currentPos);\n+\t\t\tif (c == '&')\n+\t\t\t\tsb.append(\"&amp;\");\n+\t\t\telse if (c == '<')\n+\t\t\t\tsb.append(\"&lt;\");\n+\t\t\telse if (c == '>')\n+\t\t\t\tsb.append(\"&gt;\");\n+\t\t\telse if (c == '\"')\n+\t\t\t\tsb.append(\"&#034;\");\n+\t\t\telse if (c == '\\'')\n+\t\t\t\tsb.append(\"&#039;\");\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n     }  \n     \n     /**"}, {"count": 1, "tags": [], "bug_id": 26826, "attachment_id": null, "text": "Oops, forgot to remove my last printlns. Below a fresh patch:\n\nIndex: Util.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-taglibs/standard/src/org/apache/taglibs/standard/tag/common/core/Util.java,v\nretrieving revision 1.12\ndiff -u -r1.12 Util.java\n--- Util.java\t13 Dec 2003 05:48:07 -0000\t1.12\n+++ Util.java\t10 Feb 2004 12:16:08 -0000\n@@ -152,23 +152,45 @@\n      * See also OutSupport.out().\n      */\n     public static String escapeXml(String input) {\n-        StringBuffer sb = new StringBuffer();\n-        for (int i = 0; i < input.length(); i++) {\n-            char c = input.charAt(i);\n-            if (c == '&')\n-                sb.append(\"&amp;\");\n-            else if (c == '<')\n-                sb.append(\"&lt;\");\n-            else if (c == '>')\n-                sb.append(\"&gt;\");\n-            else if (c == '\"')\n-                sb.append(\"&#034;\");\n-            else if (c == '\\'')\n-                sb.append(\"&#039;\");\n-            else\n-                sb.append(c);\n-        }\n-        return sb.toString();\n+\t\tStringBuffer sb = null;\n+\t\tint length = input.length();\n+\t\tint currentPos;\n+\n+\t\t//Check if there are any special characters to escape\n+\t\tfor (currentPos = 0; currentPos < length; currentPos++) {\n+\t\t\tchar c = input.charAt(currentPos);\n+\t\t\tif (c == '&' || c == '<' || c == '>' || c == '\"' || c == '\\'') {\n+\t\t\t\tsb = new StringBuffer(length+5);\n+\t\t\t\tsb.append(input.substring(0,currentPos)); // copy over the string up until\nwe found this char\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// If we didn't create a new buffer, then the input string didn't need any\nescaping so we win big time\n+\t\t// and we can just return the same string they gave us (no object creation,\nno copying).\n+\t\tif ( sb == null )\n+\t\t{\n+\t\t\treturn input;\n+\t\t}\n+\t\t\n+\n+\t\t// Oh well, we did have some escaping to do, so let's check the rest to see\nif there are any more to do.\n+\t\tfor (; currentPos < length;++currentPos) {\n+\t\t\tchar c = input.charAt(currentPos);\n+\t\t\tif (c == '&')\n+\t\t\t\tsb.append(\"&amp;\");\n+\t\t\telse if (c == '<')\n+\t\t\t\tsb.append(\"&lt;\");\n+\t\t\telse if (c == '>')\n+\t\t\t\tsb.append(\"&gt;\");\n+\t\t\telse if (c == '\"')\n+\t\t\t\tsb.append(\"&#034;\");\n+\t\t\telse if (c == '\\'')\n+\t\t\t\tsb.append(\"&#039;\");\n+\t\t\telse\n+\t\t\t\tsb.append(c);\n+\t\t}\n+\t\treturn sb.toString();\n     }  \n     \n     /**\n\n\n", "id": 52048, "time": "2004-02-10T12:17:17Z", "creator": "sunsear@raketnet.nl", "creation_time": "2004-02-10T12:17:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 26826, "attachment_id": null, "id": 52107, "time": "2004-02-11T12:34:04Z", "creator": "kschneider@gmail.com", "creation_time": "2004-02-11T12:34:04Z", "is_private": false, "text": "My feedback from taglibs-dev (http://marc.theaimsgroup.com/?t=107639893000003):\n\nIt looks like most of the speedup of the new version can be gained by just\nmaking the old version take the input length into account (based on my own\nlimited benchmarking, YMMV):\n\npublic static String escapeXml(String input) {\n  String output = input;\n  if (input != null) {\n    int length = input.length();\n    StringBuffer sb = new StringBuffer(length);\n    for (int i = 0; i < length; i++) {\n      char c = input.charAt(i);\n      if (c == '&') sb.append(\"&amp;\");\n      else if (c == '<') sb.append(\"&lt;\");\n      else if (c == '>') sb.append(\"&gt;\");\n      else if (c == '\"') sb.append(\"&#034;\");\n      else if (c == '\\'') sb.append(\"&#039;\");\n      else sb.append(c);\n    }\n    output = sb.toString();\n  }\n  return output;\n}\n\nI suppose you could also add a test for input.length() == 0. If the time savings\naren't really that significant, I'd opt for simpler, easier to read code. BTW,\nany modification should account for input == null. It doesn't make sense to\nthrow an NPE."}, {"count": 3, "tags": [], "bug_id": 26826, "attachment_id": null, "is_private": false, "id": 57247, "time": "2004-05-12T00:26:49Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-12T00:26:49Z", "text": "CC'ing the taglibs-dev address to all Standard bugs. "}, {"count": 4, "tags": [], "bug_id": 26826, "attachment_id": null, "id": 59077, "time": "2004-06-11T01:44:08Z", "creator": "justyna.horwat@sun.com", "creation_time": "2004-06-11T01:44:08Z", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of 25382 ***"}]
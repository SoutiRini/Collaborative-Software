[{"count": 0, "tags": [], "bug_id": 11427, "attachment_id": null, "text": "Has anyone else experienced Apache sapping memory on Win NT/2K/XP with each \nconnection? If you watch your task manager one of the two Apache.exe's memory \nusage increases. The memory doesn't release after the connection is done, it \nonly releases after a restart of the Apache service. If there is a workaround \nor a fix available I would appreciate hearing it.", "id": 20617, "time": "2002-08-02T16:30:21Z", "creator": "jerod@actions.com", "creation_time": "2002-08-02T16:30:21Z", "is_private": false}, {"count": 1, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 21122, "time": "2002-08-15T21:33:17Z", "bug_id": 11427, "creation_time": "2002-08-15T21:33:17Z", "is_private": false, "text": "\n  Please test 2.0.40 and see if you continue to observe the same behavior.\n"}, {"count": 2, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 24489, "time": "2002-10-14T19:39:10Z", "bug_id": 11427, "creation_time": "2002-10-14T19:39:10Z", "is_private": false, "text": "\n  No response from submittor, assuming issue is closed at least by 2.0.43."}, {"count": 3, "tags": [], "creator": "alex@varju.ca", "attachment_id": null, "text": "I am able to reproduce this problem.  With Apache 2.0.43 on Windows 2000 Pro I\nsee the memory used by Apache.exe grow like crazy when I run CGI scripts.  The\nmore text printed to STDOUT in the script, the faster the memory growth.\n\nThis does not seem to occur if I access static pages, no matter how large they are.\n\nI have almost the exact same configuration on Linux, Solaris, and FreeBSD, and\nthis problem does not occur.", "id": 26882, "time": "2002-11-23T23:04:48Z", "bug_id": 11427, "creation_time": "2002-11-23T23:04:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 11427, "attachment_id": null, "text": "Observations for an SSL-vhost on Win2k with\nApache/2.0.43 (Win32) mod_ssl/2.0.43 OpenSSL/0.9.6g PHP/4.2.4-dev\nI've proofed the system, httpd.conf and php.ini, opened the server-status.\nphp scripts have been cleaned up due to not deleted temporary files;\nbehavior is better than before, but during many simultaneous requests - most\nsites are php scripts - the server seems to hang, CPU load goes to near 100\npercent, memory usage may have doubled from 250 over 500 MB RAM.\nI've instructed a local admin to stop and start the server (not graceful) in\nsuch a situation. Otherwise it may take 10 to 20 minutes until the server\ncleans up. No request is possible in this phase. Server status shows a lot of\nlong running reading requests. Example:\n0-1 1064 0/461/461 R 734 0 0.0 1.71 1.71 ? ? ..reading.. \n0-1 1064 0/0/403 R  756 0 0.0 0.00 1.32  ? ? ..reading..\n\n\"Fortunately\" this happens mostly only once a day during business hours at\nMonday and Thursday when many customers are active.\nphp scripts are in further cleanup process, but that looks more like a bug in\nApache and/or Win2k.\n(i.t 2002-11)", "id": 27190, "time": "2002-11-30T15:53:23Z", "creator": "i.t@ithum.de", "creation_time": "2002-11-30T15:53:23Z", "is_private": false}, {"count": 5, "tags": [], "creator": "alex@varju.ca", "attachment_id": null, "id": 27631, "time": "2002-12-10T21:11:36Z", "bug_id": 11427, "creation_time": "2002-12-10T21:11:36Z", "is_private": false, "text": "I've just checked out the 2.1-dev branch from CVS, and the problem still occurs.\n The easiest way to reproduce this is to do the following:\n\n1. Create CGI that sends output to stdout.  e.g.:\n\n  #!/usr/bin/perl -I..\n\n  print \"Content-type: text/html\\n\\n\";\n  for ($i = 0; $i < 2000; $i++)\n  {\n    printf(\"%1024s\", \"asfdasdf\");\n  }\n\n2. ScriptAlias this script so that it is URL executable.\n\n3. Go to that URL with your browser, and then use the keyboard command to reload\nthe page (e.g. F5 in IE).  Hold down the reload key, and you should see a number\nof processes spawned simultaneously.  Let go after 15-20 seconds, and allow the\nprocesses to finish.  The look at Apache's memory footprint ... it should be\nlarger.  Repeat test, watch Apache grow."}, {"count": 6, "attachment_id": null, "bug_id": 11427, "text": "I am having a similar problem with Apache 2.0.44 on Windows NT.  Watching the\nprocess list on the NT Task Manager shows a slow but steady increase in the\namount of memory taken by Apache.exe. \n\nThis continues until Apache stops serving pages (the rest of the Machine seems\nto work Ok) and the error log records \"Server ran out of Threads to server\nrequest.  Consider raising the ThreadsperChild setting\".  This machine does not\nhandle much traffic (maybe 20 hits per hour).\n\nRestarting Apache brings the memory usage back down and the slow increase begins\nagain.", "id": 31780, "time": "2003-02-21T21:14:36Z", "creator": "rich@richsawin.com", "creation_time": "2003-02-21T21:14:36Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 11427, "text": "I don't know if this is the best solution, but I did manage to resolve this on\nour servers with the following change:\n\nIndex: server/mpm/winnt/child.c\n===================================================================\nRCS file: /webct1/cvsroot/external/apache2/server/mpm/winnt/child.c,v\nretrieving revision 1.4\nretrieving revision 1.5\ndiff -u -p -u -r1.4 -r1.5\n--- server/mpm/winnt/child.c\t1 Apr 2003 22:00:37 -0000\t1.4\n+++ server/mpm/winnt/child.c\t3 Apr 2003 00:06:59 -0000\t1.5\n@@ -123,6 +123,7 @@ AP_DECLARE(void) mpm_recycle_completion_\n     if (context) {\n         apr_pool_clear(context->ptrans);\n         context->next = NULL;\n+        context->ba = apr_bucket_alloc_create(context->ptrans);\n         ResetEvent(context->Overlapped.hEvent);\n         apr_thread_mutex_lock(qlock);\n         if (qtail) {\n@@ -205,7 +206,7 @@ AP_DECLARE(PCOMP_CONTEXT) mpm_get_comple\n                 apr_pool_tag(context->ptrans, \"ptrans\");\n  \n                 context->accept_socket = INVALID_SOCKET;\n-                context->ba = apr_bucket_alloc_create(pchild);\n+                context->ba = apr_bucket_alloc_create(context->ptrans);\n                 apr_atomic_inc(&num_completion_contexts); \n                 break;\n             }\n@@ -440,7 +441,7 @@ static PCOMP_CONTEXT win9x_get_connectio\n         context = apr_pcalloc(pchild, sizeof(COMP_CONTEXT));\n         apr_pool_create(&context->ptrans, pchild);\n         apr_pool_tag(context->ptrans, \"ptrans\");\n-        context->ba = apr_bucket_alloc_create(pchild);\n+        context->ba = apr_bucket_alloc_create(context->ptrans);\n     }\n     \n     while (1) {", "id": 34547, "time": "2003-04-04T18:16:32Z", "creator": "alex@varju.ca", "creation_time": "2003-04-04T18:16:32Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "clnospam2@laposte.net", "attachment_id": null, "text": "I can reproduce this problem under a Linux RedHat 9.0, P200 with 128MB.\nApache is configured to use prefork MPM.\n\nWhen serving big files with PHP or cgi shell scripts, the child process memory \nsize grows proportionnaly to the amount of data sent.\nThe size of each child process (if not used) then decreases *very* slowly.", "id": 39824, "time": "2003-07-02T07:07:57Z", "bug_id": 11427, "creation_time": "2003-07-02T07:07:57Z", "is_private": false}, {"count": 9, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "If Alex's analysis is correct per patch, this is a bug in the way the WinNT MPM\ncreates the bucket allocator; Christophe, you're probably seeing a different issue.", "id": 58670, "time": "2004-06-03T21:57:54Z", "bug_id": 11427, "creation_time": "2004-06-03T21:57:54Z", "is_private": false}, {"count": 10, "tags": [], "text": "I am also seeing this bug.  Apache will start out at around 18 MB of memory \nusage and slowly grow until it chokes the server to death.  I have seen Apache \nat over 200 MB of memory usage, but I'm sure it gets even higher since my \nserver has actually BSOD'd due to its RAM being exhausted.\n\nI am using Apache 2.0.52 and PHP 5.0.2 as a module.  It appears to consume a \nlittle bit more memory with every request.  Not sure if it grows on static \npages or just PHP pages, but I know that this was also a problem with PHP 4.3.2 \nand 4.3.9 on Apache 2.0.52.", "attachment_id": null, "id": 65284, "creation_time": "2004-10-18T17:45:27Z", "time": "2004-10-18T17:45:27Z", "creator": "mwhitlock@whitsoftdev.com", "bug_id": 11427, "is_private": false}, {"count": 11, "tags": [], "bug_id": 11427, "attachment_id": null, "text": "Still seeing this aswell with Apache 2.0.52 and PHP 5.0.3, with same behaviour \nas previous posters. Is the patch applied in 2.0.53 and if not, what are the \ninstructions to do so myself?", "id": 70923, "time": "2005-02-14T12:21:15Z", "creator": "webmaster@palmclub.nl", "creation_time": "2005-02-14T12:21:15Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 11427, "attachment_id": null, "text": "We are experiencing a very similar issue.  Apache.exe starts out around 30 M,\nand has grown to nearly 800 MB before we have had to restart.  We are running\nApache 2.0.47 with SSL, mod_proxy, and PHP 4.3.4.4 (module) on Windows 2000\nAdvanced Server Service Pack 4.  ", "id": 71668, "time": "2005-03-01T17:33:54Z", "creator": "bryson@osn.state.oh.us", "creation_time": "2005-03-01T17:33:54Z", "is_private": false}, {"count": 13, "tags": [], "creator": "sambukkaa@hotmail.com", "attachment_id": null, "id": 84600, "time": "2006-01-13T13:09:21Z", "bug_id": 11427, "creation_time": "2006-01-13T13:09:21Z", "is_private": false, "text": "Yep, I have Apache 2.0.55 with all other last updates of windows and PHP.\nThe server doesn't free some allocated memory somewhere and the memory usage \nincrease till the server crash and automatically reboots.\nI have seen in the error log file. After each crash, the number of  \"workers\" \nare reduced with an announcement that there is not enough memory to start all \nworkers until the server simply hangs.\nI think that the problem is coming from the \"mod_perl\" extension on windows \nsince I get twice these lines:\n[error] <none>=HASH(0x5144000)\neach time before the party starts ;))\nI will test it by removing the \"mod_perl\" from the server and let it run for \nfew days and eventually, I will add my test results here\n"}, {"count": 14, "tags": [], "bug_id": 11427, "text": "This bug was several different things (as tends to happen) but the\npatch provided looks like a prime target to correct the scope of\nthe allocator.  Considering this patch for commit.", "id": 112095, "time": "2007-12-22T11:35:22Z", "creator": "wrowe@apache.org", "creation_time": "2007-12-22T11:35:22Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "Alex, this was definitely one aspect of the flaw, and your patch was\ncorrect and committed for the next 2.0 and 2.2 releases in the coming week.\n\nRemains to be seen if this was the entire scope of misallocations by the\nwinnt mpm.  Marking as needinfo for feedback from users.\n\nPLEASE keep in mind that the children are supposed to grow to the maxmemfree\nand remain at a steady-state of memory allocation.  Which means, if you repeat\na stress test a number of times, the memory should cease to grow.  Limiting\nthe number of workers to something smaller, such as 5 or 25, will help observe\nthis more carefully.\n\nOnce you determine the steady-state of the server uses too much memory, it's\ntime to consider lowering the number of worker threads.", "id": 112277, "time": "2007-12-28T23:58:47Z", "bug_id": 11427, "creation_time": "2007-12-28T23:58:47Z", "is_private": false}, {"count": 16, "tags": [], "creator": "Tom.Donovan@acm.org", "text": "Created attachment 21348\nWin32DisableAcceptEx patch\n\nThe current patch (change 607393 to trunk / 607394 to 2.2.x) disables the\nWin32DisableAcceptEx directive and Win9x platforms because\nwin9x_get_connection() destroys the bucket allocator whenever it clears the\ntrans pool.\n\nPatch (trunk) to create a new bucket allocator for each trans.", "id": 112518, "time": "2008-01-05T07:54:02Z", "bug_id": 11427, "creation_time": "2008-01-05T07:54:02Z", "is_private": false, "attachment_id": 21348}, {"count": 17, "tags": [], "creator": "wrowe@apache.org", "text": "Tom, your patch was spot-on.  Your patch from comment #16 applied for trunk,\n2.2 branch (for 2.2.8) and 2.0 branch (for 2.0.63).  Thanks!\n\nNow marking this FIXED; if there are other unrelated memory leaks found they\nshould be assigned their own incidents.\n", "id": 112525, "time": "2008-01-05T10:30:06Z", "bug_id": 11427, "creation_time": "2008-01-05T10:30:06Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "arielandres@hotmail.com", "attachment_id": null, "id": 127235, "time": "2009-05-21T07:32:52Z", "bug_id": 47234, "creation_time": "2009-05-21T07:32:52Z", "is_private": false, "text": "Hi,\nI'm using the tribes cluster module in my own application (which has nothing to do with tomcat) and I'm using the member alive time value to sort all the cluster members.\nThis bug produces the following:\nI have 2 nodes that were started almost at the same time and both nodes claim that the other node was started before them\n\nNODE1:\nRemote members: (-52.63.57.110:4001 ready=true suspect=false failing=false aliveTime=1526)\nLocal member: (-52.63.57.109:4000 ready=true suspect=false failing=false aliveTime=1236)\n\n\nNODE2:\nRemote members: (-52.63.57.109:4000 ready=true suspect=false failing=false aliveTime=2021)\nLocal member: (-52.63.57.110:4001 ready=true suspect=false failing=false aliveTime=1069)\n\n\nMy code do the following:\nMember[] members = groupChannel.getMembers();\nprintRemote(members);\nMember localMember = groupChannel.getLocalMember(true);\nprintLocal(localMember);\n\n\nIn that code (due to timing issues) it should possible the other way around (that every node claim to be started before the other) but not that case.\n\nThe issue occurs because when the McastService is started, it assigns a start  time to the local member. \npublic class McastService .... {\npublic void start(int level) {\n     ....\n    localMember.setServiceStartTime(System.currentTimeMillis());\n    ....\n    impl = new McastServiceImpl(localMember, ....);\n    impl.start(level);\n}\n}\nBut, then it creates and starts a McastServiceImpl which also stores a new serviceStartTime :-(\n \npublic class McastServiceImpl {\nprotected long serviceStartTime;\npublic void start(int level) {\n     ....\n    serviceStartTime = System.currentTimeMillis();\n    ....\n}\n}\n\nSo, we have 2 different start times. Unfortunately both times are used:\nTo get the local member, the impl.getServiceStartTime() is used:\n\npublic class McastService .... {\npublic Member getLocalMember(boolean alive) {\n  if ( alive && localMember != null && impl != null)\n      localMember.setMemberAliveTime(System.currentTimeMillis()-impl.getServiceStartTime());\n    return localMember;\n  }\n}\n\nBut, when the member is transmited throw the network, the MemberImpl.getServiceStartTime() is used.\npublic class MemberImpl .... {\n    public byte[] getData(boolean getalive, boolean reset)  {\n        if ( reset ) dataPkg = null;\n        //look in cache first\n        if ( dataPkg!=null ) {\n            if ( getalive ) {\n                //you'd be surprised, but System.currentTimeMillis\n                //shows up on the profiler\n                long alive=System.currentTimeMillis()-getServiceStartTime();\n                XByteBuffer.toBytes( (long) alive, dataPkg, TRIBES_MBR_BEGIN.length+4);\n            }\n            return dataPkg;\n        }\n ......\n}\n\nThat produces that weird behaviour.\nIMHO, the fix should be setting the same \"serviceStartTime\" to both components.\n\nThis issue is affecting seriously my code. I would appreciate if you could fix it asap.\nI've verified that the same code is present in trunk repository.\n\nRegards,\nAriel"}, {"count": 1, "attachment_id": 23703, "creator": "fhanik@apache.org", "text": "Created attachment 23703\nProposed patch\n\nConsolidated service start time to use a single value", "id": 127248, "time": "2009-05-21T09:30:55Z", "bug_id": 47234, "creation_time": "2009-05-21T09:30:55Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 47234, "text": "Hi Filip,\nI agree with your change. \nDo you know when it could be commited into the repository?\n\nRegards,\nAriel", "id": 127249, "time": "2009-05-21T11:11:56Z", "creator": "arielandres@hotmail.com", "creation_time": "2009-05-21T11:11:56Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "id": 127250, "time": "2009-05-21T12:10:50Z", "bug_id": 47234, "creation_time": "2009-05-21T12:10:50Z", "is_private": false, "text": "Patch applied in trunk revision 777210."}]
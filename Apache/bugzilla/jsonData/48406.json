[{"count": 0, "tags": [], "bug_id": 48406, "attachment_id": null, "text": "When Sheet.autoSizeColumn is performed on a sheet with fonts like Verdana and Calibri the resulting columns widths are too narrow.", "id": 132903, "time": "2009-12-17T06:58:46Z", "creator": "kdekooter@gmail.com", "creation_time": "2009-12-17T06:58:46Z", "is_private": false}, {"count": 1, "tags": [], "text": "Can you attach the source file and the file passed through Sheet.autoSizeColumn?\n\nMake sure that Verdana and Calibri are available on the machine where Sheet.autoSizeColumn is called. The result can be 'off' if fonts are missing.\n\nYegor", "is_private": false, "id": 133052, "creator": "yegor@dinom.ru", "time": "2009-12-22T00:13:05Z", "bug_id": 48406, "creation_time": "2009-12-22T00:13:05Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "The fonts are available on the machine.\n\nUnfortunately my customer will not allow me to share the files with you.\n\nHere is the code doing the autosize:\n\n\tprivate void setColumnWidths(Sheet sheet) {\n\t\tsheet.setColumnWidth(0, 13 * 256);\n\t\tfor (int i = 1; i <= lastColumnIndex; i++) {\n\t\t\tsheet.autoSizeColumn(i);\n\t\t}\n\t}", "is_private": false, "id": 133056, "creator": "kdekooter@gmail.com", "time": "2009-12-22T05:07:55Z", "bug_id": 48406, "creation_time": "2009-12-22T05:07:55Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48406, "attachment_id": null, "text": "After setting all text cells in a column with mostly long upper case strings, calling setAutoSize usually sets it to a width that is too narrow.\n\nIt appears that HSSFSheet.setAutoSize uses '0' as the default character width. The Verdana Plain 10 font on the Macintosh has a width of 6. 'W' and 'm' both are 10 and '%' is the widest at 11.\n\nShouldn't this be changed from '0' to '%' or loop through the FontMetrics of the font to find the widest character?\n\nBTW I do see it setting the width more correctly using Helvetica Plan 10, but not with Arial Plain 10 which is the default font.\n\n\nSample source\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFFont;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\npublic class AutoSize {\n\n    public static void main(String[] args) {\n\n        HSSFWorkbook workBook = new HSSFWorkbook();\n        HSSFCellStyle style = workBook.createCellStyle();\n        final HSSFFont font = workBook.createFont();\n        font.setFontHeightInPoints((short) 10);\n        font.setFontName(\"Verdana\");\n        style.setFont(font);\n        HSSFSheet sheet = workBook.createSheet();\n        HSSFRow row = sheet.createRow((short) 0);\n        HSSFCell cell;\n\n        cell = row.createCell(0);\n        cell.setCellValue(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        cell.setCellStyle(style);\n\n        cell = row.createCell(1);\n        cell.setCellValue(\"1234\");\n\n        sheet.autoSizeColumn(0);\n\n        try {\n            FileOutputStream stream = new FileOutputStream(new File(System.getProperty(\"user.home\"),\n                    \"Book1.xls\"));\n            workBook.write(stream);\n        } catch (IOException error) {\n        }\n    }\n\n}", "id": 135364, "time": "2010-03-15T18:47:49Z", "creator": "billsdesk@verizon.net", "creation_time": "2010-03-15T18:47:49Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 48406, "is_private": false, "text": "Sheet.autoSizeColumn has been improved in recent releases. Please try POI-3.8-beta3 or the latest build from trunk.\n\nI tested for autoSizeColumn  for \"Calibri\", \"Arial\", \"Verdana\", \"Consolas\" and \"Times New Roman\" and it works pretty close to Excel. \n\nYegor", "id": 147278, "time": "2011-06-20T15:29:42Z", "creator": "yegor@dinom.ru", "creation_time": "2011-06-20T15:29:42Z", "attachment_id": null}]
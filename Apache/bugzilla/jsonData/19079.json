[{"count": 0, "tags": [], "bug_id": 19079, "attachment_id": null, "id": 35354, "time": "2003-04-16T16:55:47Z", "creator": "fred@stsci.edu", "creation_time": "2003-04-16T16:55:47Z", "is_private": false, "text": "I didn't have any luck with subscribing to or posting messages to the POI\nmailing lists, so this is a long post... The following diff and new files\nare against the cvs repostiory for POI. The changes included here are:\n\nChange to string handling in a formula to allow for more characters within a\nstring.  I am not sure \"\"\"\" is being handled correctly.\n\nThe argument pointers are set in the method that calls Expression() instead of\nin Expression() itself which caused too many arguments to functions for more\ncomplex expressions.\n\nSupport for other conditionals besides '='. > and >= have been tested.\n\nMinor changes to operator handling.\n\nI left in the isSpecialCharacter() and getNameAsIs().  I didn't refactor the\nrecord types (a lot of duplicated code there).  Do with this as you wish...\n\n=============================================================================\nDiff of model/FormulaParser.java:\n=============================================================================\n\ncvs diff model/FormulaParser.java\nIndex: model/FormulaParser.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-poi/src/java/org/apache/poi/hssf/model/FormulaParser.java,v\nretrieving revision 1.9\ndiff -r1.9 FormulaParser.java\n72a73,77\n> import org.apache.poi.hssf.record.formula.LessPtg;\n> import org.apache.poi.hssf.record.formula.GreaterPtg;\n> import org.apache.poi.hssf.record.formula.LessEqualPtg;\n> import org.apache.poi.hssf.record.formula.GreaterEqualPtg;\n> import org.apache.poi.hssf.record.formula.NotEqualPtg;\n157c162\n<         //System.out.println(\"Got char: \"+Look);\n---\n>         //System.out.println(\"Got char: \"+look);\n416c421\n< \n---\n> \n429c434\n<                \n---\n> \n434d438\n< \n449a454\n> \n477a483\n>             addArgumentPointer();\n486a493\n>             addArgumentPointer();\n499d505\n<             return;\n520,522c526,542\n<         String name= GetNameAsIs();\n<         Match('\"');\n<         tokens.add(new StringPtg(name));\n---\n> \n>         StringBuffer Token = new StringBuffer();\n>         for(;;) {\n>             if(look == '\"') {\n>                 GetChar();\n>                 if(look == '\"')\n>                     Token.append(\"\\\"\");\n>                 else\n>                     break;\n>             } else if(look == 0) {\n>                 break;\n>             } else {\n>                 Token.append(look);\n>                 GetChar();\n>             }\n>         }\n>         tokens.add(new StringPtg(Token.toString()));\n546c566\n<         while (look == '*' || look == '/' || look == '^' || look == '&' ||\nlook == '=' ) {\n---\n>         while (look == '*' || look == '/' || look == '^' || look == '&') {\n549,552c569,571\n<             if (look == '/') Divide();\n<             if (look == '^') Power();\n<             if (look == '&') Concat();\n<             if (look == '=') Equal();\n---\n>             else if (look == '/') Divide();\n>             else if (look == '^') Power();\n>             else if (look == '&') Concat();\n573c592\n<         Term();\n---\n>         Expression();\n576c595,635\n<     \n---\n> \n>     private void Greater() {\n>         Match('>');\n>         if(look == '=')\n>             GreaterEqual();\n>         else {\n>             Expression();\n>             tokens.add(new GreaterPtg());\n>         }\n>     }\n> \n>     private void GreaterEqual() {\n>         Match('=');\n>         Expression();\n>         tokens.add(new GreaterEqualPtg());\n>     }\n> \n>     private void Less() {\n>         Match('<');\n>         if(look == '=')\n>             LessEqual();\n>         else if(look == '>')\n>             NotEqual();\n>         else {\n>             Expression();\n>             tokens.add(new LessPtg());\n>         }\n>     }\n> \n>     private void LessEqual() {\n>         Match('=');\n>         Expression();\n>         tokens.add(new LessEqualPtg());\n>     }\n> \n>     private void NotEqual() {\n>         Match('>');\n>         Expression();\n>         tokens.add(new NotEqualPtg());\n>     }\n> \n600,602c659\n<             if (look == '-') Subtract();\n<             if (look == '*') Multiply();\n<             if (look == '/') Divide();\n---\n>             else if (look == '-') Subtract();\n604,605c661,672\n<         addArgumentPointer();\n<         \n---\n> \n> /*\n>  * This isn't quite right since it would allow multiple comparison operators.\n>  */\n> \n>         if(look == '=' || look == '>' || look == '<') {\n>             if (look == '=') Equal();\n>             else if (look == '>') Greater();\n>             else if (look == '<') Less();\n>             return;\n>         }\n> \n\n=============================================================================\nDiff of record/formula/Ptg.java:\n=============================================================================\ncvs diff record/formula/Ptg.java\nIndex: record/formula/Ptg.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-poi/src/java/org/apache/poi/hssf/record/formula/Ptg.java,v\nretrieving revision 1.25\ndiff -r1.25 Ptg.java\n178a179,198\n> \n>             case LessPtg.sid:\n>                 retval = new LessPtg(data, offset);\n>                 break;\n>                 \n>             case GreaterPtg.sid:\n>                 retval = new GreaterPtg(data, offset);\n>                 break;\n>                 \n>             case LessEqualPtg.sid:\n>                 retval = new LessEqualPtg(data, offset);\n>                 break;\n>                 \n>             case GreaterEqualPtg.sid:\n>                 retval = new GreaterEqualPtg(data, offset);\n>                 break;\n> \n>             case NotEqualPtg.sid:\n>                 retval = new NotEqualPtg(data, offset);\n>                 break;\n\n===========================\nNew file record/formula/GreaterEqualPtg.java:\n===========================\n/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache POI\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache POI\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\n/*\n * LessPtg.java\n *\n * Created on November 17, 2001, 12:51 PM\n */\npackage org.apache.poi.hssf.record.formula;\n\nimport java.util.List;\n\nimport org.apache.poi.hssf.util.SheetReferences;\n\n/**\n *\n * @author  andy\n */\n\npublic class GreaterEqualPtg\n    extends OperationPtg\n{\n    public final static int  SIZE = 1;\n    public final static byte sid  = 0x0c;\n\n    /** Creates new AddPtg */\n\n   public GreaterEqualPtg()\n    {\n    }\n\n    public GreaterEqualPtg(byte [] data, int offset)\n    {\n\n        // doesn't need anything\n    }\n\n    public void writeBytes(byte [] array, int offset)\n    {\n        array[ offset + 0 ] = sid;\n    }\n\n    public int getSize()\n    {\n        return SIZE;\n    }\n\n    public int getType()\n    {\n        return TYPE_BINARY;\n    }\n\n    public int getNumberOfOperands()\n    {\n        return 2;\n    }\n\n    public String toFormulaString(SheetReferences refs)\n    {\n        return \">=\";\n    }\n \n    public String toFormulaString(String[] operands) {\n         StringBuffer buffer = new StringBuffer();\n\n        \n        buffer.append(operands[ 0 ]);\n        buffer.append(toFormulaString((SheetReferences)null));\n        buffer.append(operands[ 1 ]);\n        return buffer.toString();\n    }       \n\n    public Object clone() {\n      return new GreaterEqualPtg();\n    }\n\n\n}\n\n====================================\nNew file record/formula/GreaterPtg.java:\n====================================\n\n/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache POI\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache POI\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\n/*\n * LessPtg.java\n *\n * Created on November 17, 2001, 12:51 PM\n */\npackage org.apache.poi.hssf.record.formula;\n\nimport java.util.List;\n\nimport org.apache.poi.hssf.util.SheetReferences;\n\n/**\n *\n * @author  andy\n */\n\npublic class GreaterPtg\n    extends OperationPtg\n{\n    public final static int  SIZE = 1;\n    public final static byte sid  = 0x0d;\n\n    /** Creates new AddPtg */\n\n   public GreaterPtg()\n    {\n    }\n\n    public GreaterPtg(byte [] data, int offset)\n    {\n\n        // doesn't need anything\n    }\n\n    public void writeBytes(byte [] array, int offset)\n    {\n        array[ offset + 0 ] = sid;\n    }\n\n    public int getSize()\n    {\n        return SIZE;\n    }\n\n    public int getType()\n    {\n        return TYPE_BINARY;\n    }\n\n    public int getNumberOfOperands()\n    {\n        return 2;\n    }\n\n    public String toFormulaString(SheetReferences refs)\n    {\n        return \">\";\n    }\n \n    public String toFormulaString(String[] operands) {\n         StringBuffer buffer = new StringBuffer();\n\n        \n        buffer.append(operands[ 0 ]);\n        buffer.append(toFormulaString((SheetReferences)null));\n        buffer.append(operands[ 1 ]);\n        return buffer.toString();\n    }       \n\n    public Object clone() {\n      return new GreaterPtg();\n    }\n\n\n}\n\n=============================\nNew file record/formula/LessEqualPtg.java:\n=============================\n\n/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache POI\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache POI\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\n/*\n * LessPtg.java\n *\n * Created on November 17, 2001, 12:51 PM\n */\npackage org.apache.poi.hssf.record.formula;\n\nimport java.util.List;\n\nimport org.apache.poi.hssf.util.SheetReferences;\n\n/**\n *\n * @author  andy\n */\n\npublic class LessEqualPtg\n    extends OperationPtg\n{\n    public final static int  SIZE = 1;\n    public final static byte sid  = 0x0a;\n\n    /** Creates new AddPtg */\n\n   public LessEqualPtg()\n    {\n    }\n\n    public LessEqualPtg(byte [] data, int offset)\n    {\n\n        // doesn't need anything\n    }\n\n    public void writeBytes(byte [] array, int offset)\n    {\n        array[ offset + 0 ] = sid;\n    }\n\n    public int getSize()\n    {\n        return SIZE;\n    }\n\n    public int getType()\n    {\n        return TYPE_BINARY;\n    }\n\n    public int getNumberOfOperands()\n    {\n        return 2;\n    }\n\n    public String toFormulaString(SheetReferences refs)\n    {\n        return \"<=\";\n    }\n \n    public String toFormulaString(String[] operands) {\n         StringBuffer buffer = new StringBuffer();\n\n        \n        buffer.append(operands[ 0 ]);\n        buffer.append(toFormulaString((SheetReferences)null));\n        buffer.append(operands[ 1 ]);\n        return buffer.toString();\n    }       \n\n    public Object clone() {\n      return new LessEqualPtg();\n    }\n\n\n}\n\n==================================\nNew file record/formula/LessPtg.java:\n==================================\n\n/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache POI\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache POI\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\n/*\n * LessPtg.java\n *\n * Created on November 17, 2001, 12:51 PM\n */\npackage org.apache.poi.hssf.record.formula;\n\nimport java.util.List;\n\nimport org.apache.poi.hssf.util.SheetReferences;\n\n/**\n *\n * @author  andy\n */\n\npublic class LessPtg\n    extends OperationPtg\n{\n    public final static int  SIZE = 1;\n    public final static byte sid  = 0x09;\n\n    /** Creates new AddPtg */\n\n   public LessPtg()\n    {\n    }\n\n    public LessPtg(byte [] data, int offset)\n    {\n\n        // doesn't need anything\n    }\n\n    public void writeBytes(byte [] array, int offset)\n    {\n        array[ offset + 0 ] = sid;\n    }\n\n    public int getSize()\n    {\n        return SIZE;\n    }\n\n    public int getType()\n    {\n        return TYPE_BINARY;\n    }\n\n    public int getNumberOfOperands()\n    {\n        return 2;\n    }\n\n    public String toFormulaString(SheetReferences refs)\n    {\n        return \"<\";\n    }\n \n    public String toFormulaString(String[] operands) {\n         StringBuffer buffer = new StringBuffer();\n\n        \n        buffer.append(operands[ 0 ]);\n        buffer.append(toFormulaString((SheetReferences)null));\n        buffer.append(operands[ 1 ]);\n        return buffer.toString();\n    }       \n\n    public Object clone() {\n      return new LessPtg();\n    }\n\n\n}\n\n===============================\nNew file record/formula/NotEqualPtg.java:\n===============================\n/* ====================================================================\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution,\n *    if any, must include the following acknowledgment:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowledgment may appear in the software itself,\n *    if and wherever such third-party acknowledgments normally appear.\n *\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n *    \"Apache POI\" must not be used to endorse or promote products\n *    derived from this software without prior written permission. For\n *    written permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\",\n *    \"Apache POI\", nor may \"Apache\" appear in their name, without\n *    prior written permission of the Apache Software Foundation.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\n\n/*\n * NotPtg.java\n *\n * Created on November 17, 2001, 12:51 PM\n */\npackage org.apache.poi.hssf.record.formula;\n\nimport java.util.List;\n\nimport org.apache.poi.hssf.util.SheetReferences;\n\n/**\n *\n * @author  andy\n */\n\npublic class NotEqualPtg\n    extends OperationPtg\n{\n    public final static int  SIZE = 1;\n    public final static byte sid  = 0x0e;\n\n    /** Creates new AddPtg */\n\n   public NotEqualPtg()\n    {\n    }\n\n    public NotEqualPtg(byte [] data, int offset)\n    {\n\n        // doesn't need anything\n    }\n\n    public void writeBytes(byte [] array, int offset)\n    {\n        array[ offset + 0 ] = sid;\n    }\n\n    public int getSize()\n    {\n        return SIZE;\n    }\n\n    public int getType()\n    {\n        return TYPE_BINARY;\n    }\n\n    public int getNumberOfOperands()\n    {\n        return 2;\n    }\n\n    public String toFormulaString(SheetReferences refs)\n    {\n        return \"<>\";\n    }\n \n    public String toFormulaString(String[] operands) {\n         StringBuffer buffer = new StringBuffer();\n\n        \n        buffer.append(operands[ 0 ]);\n        buffer.append(toFormulaString((SheetReferences)null));\n        buffer.append(operands[ 1 ]);\n        return buffer.toString();\n    }       \n\n    public Object clone() {\n      return new NotEqualPtg();\n    }\n\n\n}"}, {"count": 1, "tags": [], "bug_id": 19079, "text": "oooh, thanks for taking care of this ugly work.  can you click \"Create a new\nattachment\" to attach files from now on?\n\ncan you use 'cvs diff -u' for creating a patch?\n\nwe would also love for you to create testcases.  we have a conditionals patch\nthat's only missing testcases as a reason for not being committed.  we need to\nmake sure any new formulaparser changes do not break the fixes you provided.\n\n", "id": 35356, "time": "2003-04-16T17:03:17Z", "creator": "dmui@apache.org", "creation_time": "2003-04-16T17:03:17Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "fred@stsci.edu", "text": "I can't tell from this if the diff -u attachment was sucessful.  If not I will\ntry again.  The diff -u does not appear to include the new files.  Also\ntest cases is a little more difficult.  I have a wrapper that generates a\nspreadsheet from a database query, but does things like get the cell types\ncorrect and supports formulas.  My test cases are currently in XML and run\nthrough a converter that translates R1C1 format to cell names and generates\na conditional. So I can't really just give you the 6 or so test cases that\nI already have.  I will look into generating a couple though.\n\n", "id": 35358, "time": "2003-04-16T17:27:47Z", "bug_id": 19079, "creation_time": "2003-04-16T17:27:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "fred@stsci.edu", "attachment_id": 5868, "text": "Created attachment 5868\ndiff -u requested, note does not include new files (second try)", "id": 35360, "time": "2003-04-16T17:47:10Z", "bug_id": 19079, "creation_time": "2003-04-16T17:47:10Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 19079, "text": "the unified patch looks good...usually you have to tar/zip up the new files.\n\ntestcases are pretty simple for formulas..typically we usually check if the ptgs\nare generated as expected.  TestFormulaParser has a lot of examples.  If you\nhave 6 testcases, i'm assuming that's 6 different formulas you're testing. \nworst case scenario, 6 new methods to write ;).\n\nthanks!\n\n", "id": 35366, "time": "2003-04-16T18:45:51Z", "creator": "dmui@apache.org", "creation_time": "2003-04-16T18:45:51Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "avik@apache.org", "is_private": false, "id": 36720, "time": "2003-05-05T19:26:35Z", "bug_id": 19079, "creation_time": "2003-05-05T19:26:35Z", "tags": [], "text": "Danny, are you going to commit this? Given that this did not have patch in its\ntitle, i missed it while doing the other bug. I can do this tomorrow for sure ,\nunless you beat me to it. Given my previous commit, which surely clash with this\none, it seems that, again, this patch will have to be applied line by line!! "}, {"count": 6, "tags": [], "creator": "dmui@apache.org", "attachment_id": null, "id": 36721, "time": "2003-05-05T19:47:07Z", "bug_id": 19079, "creation_time": "2003-05-05T19:47:07Z", "is_private": false, "text": "Yeah I've been feeling naughty and will commit this.  I'll do the line by line\nand add test cases.  I was going to remove the greater/less than stuff since we\nalready had a patch for that."}, {"count": 7, "tags": [], "bug_id": 19079, "is_private": false, "text": "Committed with 2 test methods that test the new ptgs inside an embedded.  Thanks\nfor the contribution", "id": 36799, "time": "2003-05-07T03:57:47Z", "creator": "dmui@apache.org", "creation_time": "2003-05-07T03:57:47Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "alex.heneveld@cloudsoftcorp.com", "text": "if a war file is updated multiple times within a 1s window the autodeployment logic may fail to deploy the latest war.\n\nthis is particularly a problem if doing something like wget to install a war directly to the webapps directory.  it may fail (because the zip is invalid) but then not retry when the download completes (presumably because the file timestamp is not different to the failed timestamp, even though the file *is* different.)\n\nfor example, try the following script:\n\n    while [ true ]  ; do\n      curl http://path/to/large/sample.war -o sample.war\n      sleep 15\n      if [ ! -d sample ] ; then exit ; fi\n    done\n\nwith the sleep 15, tomcat should be guaranteed to unpack the war (running with its default 10s detect audodeployment files). however this script usually fails one in 20 times with a sufficiently large war file (where download time is >5s). in such cases the last autodeployment attempt logs an invalid zip, there is no subsequent autodeployment, and the timestamp of the completed (valid) download is identical to the log timestamp of the failed autodeployment, at least to a one-second resolution (common on filesystems).\n\nwhat i suspect is happening is, for example:\n\n    00:00:00.100 sample.war is partially written\n    00:00:00.200 autodeployment is attempted, and fails\n    00:00:00.300 sample.war is completely written\n    00:00:10.200 subsequent autodeployment cycle does not attempt re-deployment\n\ni suspect that at time 00:00:00.200, when the deployment fails, it records a \"last update\" timestamp.  10 seconds later it checks the timestamp of the file on disk, which will be 00:00:00 (note no milliseconds) which is not later than the \"last update\" timestamp and so it incorrectly skips the redeployment.\n\nthis could probably also result in the following situation\n\n    00:00:00.100 sample.war v1 is written\n    00:00:00.200 autodeployment is done\n    00:00:00.300 sample.war v2 is written\n    00:00:10.200 subsequent autodeployment cycle does not attempt re-deployment\n\nand so v1 is deployed even though v2 was subsequently written.\n\ni suggest that autodeployment should wait for files to stabilise, i.e. skipping any file updated within the 1s window immediately prior to autodeployment (and ensuring that it is picked up on the next autodeployment cycle, unless it is still being changed).\n\nthere are workarounds:\n\n* download to a tmp directory then atomically `mv` the file to the webapps directory upon completion\n* use the manager webapp instead of autodeployment\n\nbut it would be nice to fix this so that autodeployment works as advertised (and i think the fix sketched here should be fairly straightforward).", "id": 182136, "time": "2015-03-27T04:37:08Z", "bug_id": 57765, "creation_time": "2015-03-27T04:37:08Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 57765, "attachment_id": null, "text": "Fixed as suggested in trunk, 8.0.x (for 8.0.22 onwards) and 7.0.x (for 7.0.62 onwards).\n\nThanks for the report, analysis and suggested fix.", "id": 182203, "time": "2015-03-31T19:14:43Z", "creator": "markt@apache.org", "creation_time": "2015-03-31T19:14:43Z", "is_private": false}]
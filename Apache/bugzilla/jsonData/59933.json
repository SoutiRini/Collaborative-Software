[{"text": "Hi!\n\nSince version 3.13 there is an issue with the logger and the changed POILogger: \n\nWhenever in the DocumentHelper class in the method trySetXercesSecurityManager and within the catch block (line 84) the logger is called, an IllegalAccessError is thrown by the logger instance call: \n\nlogger.log(POILogger.WARN, \"SAX Security Manager could not be setup\", t);\n\nException: \njava.lang.IllegalAccessError: tried to access method org.apache.poi.util.POILogger.log(ILjava/lang/Object;Ljava/lang/Throwable;)V from class org.apache.poi.util.DocumentHelper\n\nThis happens always if a xlsx workbook is contructed. \n\nWhen some of you fix this in the POILogger, please also change the order of SecurityManager whereas the in a server environment (e.g. JEE and JBoss) the org.apache.xerces.util.SecurityManager might probably more often in use: \n\nShould be: \n\n \"org.apache.xerces.util.SecurityManager\"\n \"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n           \nThank you in advance,\nAndreas", "tags": [], "creator": "a.niemeyer@euroimmun.de", "attachment_id": null, "count": 0, "id": 192850, "time": "2016-08-03T09:37:13Z", "bug_id": 59933, "creation_time": "2016-08-03T09:37:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 59933, "attachment_id": null, "text": "I don't see why DocumentHelper shouldn't be able to call POILogger, and I haven't noticed any issues with it elsewhere. Are you able to put together a small junit test case that triggers this IllegalAccessError?\n\nBased on the comments in the code, we're trying the JDK built-in one first, as that's what we think most people are more likely to be using. It tries the other one if not, so you shouldn't miss out!", "id": 192851, "time": "2016-08-03T09:57:01Z", "creator": "apache@gagravarr.org", "creation_time": "2016-08-03T09:57:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 59933, "attachment_id": null, "text": "Ok, you are right, order should be ok. \n\nTo keep things simple, put a line before the return statement. \n\nlogger.log(POILogger.INFO, \"SAX Security Manager setup\"); \n\nIf you see the changed method signature, all should clear, or not?\n\nKind regards,\nAndreas", "id": 192852, "time": "2016-08-03T10:02:38Z", "creator": "a.niemeyer@euroimmun.de", "creation_time": "2016-08-03T10:02:38Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 59933, "text": "I added your logger statement to just before the return statement, and re-ran several of the XSSF unit tests. The logger statement worked just fine", "id": 192853, "time": "2016-08-03T10:23:21Z", "creator": "apache@gagravarr.org", "creation_time": "2016-08-03T10:23:21Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 59933, "attachment_id": null, "text": "I tried a bit more debugging and think I found it. \n\nInspecting the NullLogger object, which is returned in the DocumentHelper\n\n private static POILogger logger = POILogFactory.getLogger(DocumentHelper.class);\n\nthere is a missing @Override annotation for the method public void log(int level, Object obj1, final Throwable exception): \n\n   /**\n     * Log a message\n     *\n     * @param level One of DEBUG, INFO, WARN, ERROR, FATAL\n     * @param obj1 The object to log.\n     */\n\n    @Override\n    public void log(final int level, final Object obj1)\n    {\n        // do nothing\n    }\n\n    /**\n     * Log a message\n     *\n     * @param level One of DEBUG, INFO, WARN, ERROR, FATAL\n     * @param obj1 The object to log.  This is converted to a string.\n     * @param exception An exception to be logged\n     */\n    public void log(int level, Object obj1, final Throwable exception) {\n        // do nothing\n    }\n\nFor probably that reason, the abstract method from the POILogger is called and the exception reflecting it: \n\nCaused by: java.lang.IllegalAccessError: tried to access method org.apache.poi.util.POILogger.log(ILjava/lang/Object;Ljava/lang/Throwable;)V from class org.apache.poi.util.DocumentHelper\n\tat org.apache.poi.util.DocumentHelper.trySetXercesSecurityManager(DocumentHelper.java:84)\n\tat org.apache.poi.util.DocumentHelper.<clinit>(DocumentHelper.java:57)\n\n\nTry using it with a call before the return should prove it (where t can be null for testing purpose): \n\nlogger.log(POILogger.WARN, \"SAX Security Manager - test logger\", t);\n\nBTW the older 3.12 version of the NullLogger class has the annotation above the method. \n\nCan you confirm?\n\nKind regards, \nAndreas", "id": 192859, "time": "2016-08-03T11:45:56Z", "creator": "a.niemeyer@euroimmun.de", "creation_time": "2016-08-03T11:45:56Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59933, "attachment_id": null, "text": "Ok, I downloaded the 3.14 source from here:\n\nhttps://www.apache.org/dyn/closer.lua/poi/release/src/poi-src-3.14.tar.gz\n\nI did a few changes in 2 class files and compiled the source with Java 8, 32 bit. \n\nFix 1)\nTo fix the IllegalAccessError, the abstract methods in the POILogger class are changed to public instead of protected:\n\nabstract public void log(int level, Object obj1);\nabstract public void log(int level, Object obj1, final Throwable exception);\n\nFix 2)\n\nPut the @Override annotation above the method: \n\n@Override \n    public void log(int level, Object obj1, final Throwable exception) {\n        // do nothing\n    }", "id": 192904, "time": "2016-08-05T09:37:42Z", "creator": "a.niemeyer@euroimmun.de", "creation_time": "2016-08-05T09:37:42Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 59933, "text": "I don't think those two changes should make a difference, @override is a pure compile-time thing and not reflected in the bytecode in the .class/.jar file. Also protected should be fine and iwould usually fail during compile time if access is too strict.\n\nCan you try to recompile the sources in their original state and see if that alone alreafy makes it work.", "id": 192906, "time": "2016-08-05T11:14:54Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-08-05T11:14:54Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 59933, "text": "You might be right, but in that real case the IllegalAccess error is gone. \nThe application server run with Java 1.8.0_72 and a JRE runtime error happens - probably a Oracle bug or a desired behaviour for such kind of declaration (abstract protected and override it with public).\n \nThere is nothing special I did, and I can't provide you a simple TestCase. As I mententioned before - try a logging with the method signature of the throwable and see yourself with Java 8. \n\nKind regards,\nAndreas", "id": 192907, "time": "2016-08-05T11:47:31Z", "creator": "a.niemeyer@euroimmun.de", "creation_time": "2016-08-05T11:47:31Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 59933, "attachment_id": null, "id": 192966, "time": "2016-08-09T14:15:36Z", "creator": "a.niemeyer@euroimmun.de", "creation_time": "2016-08-09T14:15:36Z", "is_private": false, "text": "Please consider \n\n- the runtime is Java 8 in a JBoss 6 server environment\n\n- the POILogger class in the DocumentHelper has no public log method (it is protected) - that leads to an IllegalAccess exception: \n\nprivate static POILogger logger = POILogFactory.getLogger(DocumentHelper.class);\n\nPlease change methods to public in POILogger and the thrill is gone:\n\nabstract public void log(int level, Object obj1);\nabstract public void log(int level, Object obj1, final Throwable exception);"}, {"text": "Anyone got a work around on this ? Running Iseries ( as400;systemi;whatever ibm wants to call it ).", "tags": [], "creator": "nickba@wbho.co.za", "attachment_id": null, "count": 9, "id": 193808, "time": "2016-09-19T12:24:48Z", "bug_id": 59933, "creation_time": "2016-09-19T12:24:48Z", "is_private": false}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "I think I have fixed this in r1761662. The problem is that the signature of log(int, Object...) is identical to log(int, Object) or log(int, Object, final Throwable). We are relying on the visibility of the last two to make the log(int, Object...) the version that gets called.\nLooking at the code, Java must prefer non-varargs over varargs functions when the signature is otherwise compatible, which is why Andreas had issues with NullLogger calling the log methods that were protected in POILogger but public in NullLogger.\n\nWe are silently falling back to using a NullLogger for the DocumentHelper class, hopefully because the org.apache.poi.util.POILogger system property has not been set and not a different reason. POILogFactory [1] seems to be catching and suppressing exceptions in multiple locations.\n\nCould you verify this fix with the latest trunk release?\n\n[1] POILogFactory https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/util/POILogFactory.java?view=log", "id": 193868, "time": "2016-09-21T02:21:24Z", "bug_id": 59933, "creation_time": "2016-09-21T02:21:24Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 59933, "attachment_id": null, "id": 193871, "time": "2016-09-21T02:53:04Z", "creator": "onealj@apache.org", "creation_time": "2016-09-21T02:53:04Z", "is_private": false, "text": "I fixed the accidental accessibility elevation from protected to public in the remaining logging classes in r1761665.\n\nThis does not introduce any backwards compatibility issues because log(int, Object...) is still public and will catch any of the old uses."}, {"count": 12, "tags": [], "bug_id": 59933, "attachment_id": null, "id": 193876, "time": "2016-09-21T06:47:15Z", "creator": "nickba@wbho.co.za", "creation_time": "2016-09-21T06:47:15Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #10)\n> I think I have fixed this in r1761662. The problem is that the signature of\n> log(int, Object...) is identical to log(int, Object) or log(int, Object,\n> final Throwable). We are relying on the visibility of the last two to make\n> the log(int, Object...) the version that gets called.\n> Looking at the code, Java must prefer non-varargs over varargs functions\n> when the signature is otherwise compatible, which is why Andreas had issues\n> with NullLogger calling the log methods that were protected in POILogger but\n> public in NullLogger.\n> \n> We are silently falling back to using a NullLogger for the DocumentHelper\n> class, hopefully because the org.apache.poi.util.POILogger system property\n> has not been set and not a different reason. POILogFactory [1] seems to be\n> catching and suppressing exceptions in multiple locations.\n> \n> Could you verify this fix with the latest trunk release?\n> \n> [1] POILogFactory\n> https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/util/\n> POILogFactory.java?view=log\n\nSorted downloaded the beta1 release 3.16 problem gone Thanks !!!"}, {"count": 13, "tags": [], "bug_id": 59933, "attachment_id": null, "text": "@backwards compatibility: this is backwards compatible with any class using a logger, but not for classes subclassing POI logger. They will need to change log to _log and optionally drop the accessibility to protected.", "id": 193895, "time": "2016-09-21T16:46:59Z", "creator": "onealj@apache.org", "creation_time": "2016-09-21T16:46:59Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 22489, "time": "2002-09-09T09:28:17Z", "creator": "dylan@van-iersel.org", "creation_time": "2002-09-09T09:28:17Z", "is_private": false, "text": "When calling request.getUserPrincipal() from an unprotected resource, the method returns \nnull even when the user is actually authenticated.\n\nFrom Servlet 2.3 spec:\npublic \njava.security.Principal getUserPrincipal()\nReturns a java.security.Principal object \ncontaining the name of the current\nauthenticated user. If the user has not been authenticated, \nthe method returns\nnull.\n\nMy interpretation would be that once a user has been \nauthenticated, a call to getUserPrincipal() would always return the associated Principal \nobject whether it is from a protected or unprotected resource."}, {"count": 1, "tags": [], "creator": "apara@standardset.com", "attachment_id": null, "text": "This is a major problem for us porting our application.  We have a menu system\nwhich stays the same for all the users.  Based on the role and if we have a\nprincipal or not, the menu changes with more or less options.", "id": 44799, "time": "2003-09-28T19:11:57Z", "bug_id": 12428, "creation_time": "2003-09-28T19:11:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 44811, "time": "2003-09-29T02:30:24Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-09-29T02:30:24Z", "is_private": false, "text": "I don't see anything in the 2.3 spec that precludes the way that Tomcat handles \nthis.  The 2.4 spec is a bit more ambiguous, so I'm going to have to try to get \na clarification from the expert-group before marking this as INVALID.\n\nAs a work-around, try using a simple Filter something like:\n   public void doFilter(ServletRequest req, ServletResponse res, FilterChain \nchain)\n      throws IOException, ServletException {\n      HttpServletRequest request = (HttpServletRequest)req;\n      Principal userPrin = request.getUserPrincipal();\n      if(userPrin == null) {\n          HttpSession session = request.getSession(true);\n          Principal myPrin = (Principal)session.getAttribute\n(\"com.myfirm.MyPrincipal\");\n          if(myPrin != null) {\n            req = new MyAuthRequest(myPrin);\n          }\n      } else {\n          HttpSession session = request.getSession(true);\n          session.setAttribute(\"com.myfirm.MyPrincipal\", userPrin);\n      }\n      chain.doFilter(req, res);\n   }\n   static class MyAuthRequest extends HttpServletRequestWrapper {\n      Principal myPrin;\n      MyAuthRequest(Principal prin) {\n      myPrin = prin;\n      }\n      public Principal getUserPrincipal() {\n         return myPrin;\n      }\n   }\n\n"}, {"count": 3, "tags": [], "creator": "apara@standardset.com", "attachment_id": null, "text": "This works, but only in the context of the WEB container.  If my WEB application\ncalls down to my entity beans, I am out of luck.  I don't know of a way to pass\nthis \"context\" down to the entity beans without having to implicitly pass a user\nparameter to ALL the functions which would normally get a principal from the\ncontext.\n\nBy the way, this is happening with JBOSS 3.2.2RC3 which has TomCat version 4.1\nbundled with it (I am not sure which one).\n\nIn my application, additional features become available when user becomes a\nmember.  Thus all of my code is based on:\n\na) Do I have a principal, no? then GUEST access otherwise b)\nb) If role X is enabled, allow functions X1...Xn\n\nNot having principal in the public pages, does not allow me to check the role.  \n\nI noticed that I am not the only one who is having an issue with the way this\nworks.  Is there a way to make a parameter, that when set, would pass the\nprincipal to the public pages.  If the parameter is not set, then don't pass the\nprincipal as it's now?  Since the spec is so ambiguous, it makes migration to\nTomCat/JBOSS combo from Weblogic, Orion or other app servers difficult.\n\nThanks.", "id": 44812, "time": "2003-09-29T03:16:16Z", "bug_id": 12428, "creation_time": "2003-09-29T03:16:16Z", "is_private": false}, {"count": 4, "tags": [], "creator": "apara@standardset.com", "attachment_id": 8384, "text": "Created attachment 8384\nFilter attempting to store principal in the session", "id": 44818, "time": "2003-09-29T08:20:06Z", "bug_id": 12428, "creation_time": "2003-09-29T08:20:06Z", "is_private": false}, {"count": 5, "tags": [], "text": "I tried your suggestion, code attached, but it did not work.  Turns out that the\nfilter is getting called pretty late in the game.  By the time the filter is\ncalled, a null Principal was already seen and configured in to the \"context\".  I\nneed to work at the Pipeline/Valve level to get this to work.  ", "attachment_id": null, "id": 44836, "creation_time": "2003-09-29T13:17:54Z", "time": "2003-09-29T13:17:54Z", "creator": "apara@standardset.com", "bug_id": 12428, "is_private": false}, {"count": 6, "tags": [], "bug_id": 12428, "text": "Ya  - this is a problem but tomcat is compatible with the spec. (So its a spec\nproblem) The pricipal only needs to be set on protected URLs.", "id": 51886, "time": "2004-02-07T15:14:47Z", "creator": "funkman@joedog.org", "creation_time": "2004-02-07T15:14:47Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "doh - wrong status", "attachment_id": null, "id": 51887, "creation_time": "2004-02-07T15:15:13Z", "time": "2004-02-07T15:15:13Z", "creator": "funkman@joedog.org", "bug_id": 12428, "is_private": false}, {"count": 8, "tags": [], "bug_id": 12428, "text": "fix status to INVALID, not FIXED. (Sorry for the extra emails)", "id": 51889, "time": "2004-02-07T15:15:56Z", "creator": "funkman@joedog.org", "creation_time": "2004-02-07T15:15:56Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "funkman@joedog.org", "attachment_id": null, "text": "*** Bug 29537 has been marked as a duplicate of this bug. ***", "id": 59152, "time": "2004-06-12T16:22:42Z", "bug_id": 12428, "creation_time": "2004-06-12T16:22:42Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 12428, "text": "I've been reading again the servlet 2.3 specification, and, actually, i don't \nsee in it anything that give the opposite position, ie always return the \nprincipal when one has been authenticated, when the requested url is protected \nor not. Further, Tomcat 4 behaves as expected (i mean, i expect), which is, i \nthink, the 2.3 implementation. What about the 2.4 version, which is the base \nfor the new Tomcat 5 ?...\n\nMore, what about the 'isUserInRole' ? Does it follow the same rule ? How a \nsimple menu page could take decision according to identity or roles of the \nauthenticated user, and show or hide links for example, even if this page \nitself is not protected ?\n\nThanks for your precisions.\n", "id": 59248, "time": "2004-06-15T18:21:17Z", "creator": "ephemeris.lappis@tiscali.fr", "creation_time": "2004-06-15T18:21:17Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "cho@cubitech.dk", "attachment_id": null, "text": "I truly think this is a wrong interpretation of the spec. From the JavaDoc of\nHttpServletRequest:\n\n\"Returns a java.security.Principal object containing the name of the current\nauthenticated user. If the user has not been authenticated, the method returns\nnull.\"\n\nThis clearly states that the getUserPrincipal()-method should only return null\nwhen the user has not been authenticated. There is no exception to this rule, as\nearlier comments would suggest.\n\nClearly it would not be against the spec to always return the principal when\nauthentication has been done wether or not the viewed resource is protected or\nnot. This is clearly needed for many web-applications.", "id": 63142, "time": "2004-09-06T23:19:09Z", "bug_id": 12428, "creation_time": "2004-09-06T23:19:09Z", "is_private": false}, {"count": 12, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "There is a an exception.\n\n<spec-quote>\nSRV.12.9 Default Policies\nBy default, authentication is not needed to access resources. Authentication is\nneeded for requests for a web resource collection only when specified by the\ndeployment descriptor.\n</spec-quote>\n\nHence the user is only authenticated for protected resources.\n\nI appreciate the application design issues raised above, but it remains the \ncase that TC4 is compliant with the spec.", "id": 63552, "time": "2004-09-14T22:52:54Z", "bug_id": 12428, "creation_time": "2004-09-14T22:52:54Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 63556, "time": "2004-09-15T04:08:00Z", "creator": "apara@standardset.com", "creation_time": "2004-09-15T04:08:00Z", "is_private": false, "text": "That's fine.  You are right, there is no need to Authenticate for non protected\nresources, however, once authenticated and the Principal is available it should\nbe returned regardless if authenticated or un-authenticated resource is being\naccessed."}, {"count": 14, "tags": [], "bug_id": 12428, "text": "The underlying issue here is how BASIC authentication works. With BASIC\nauthentication, the user is required to authenticate with every request and the\nbrowser helpfully caches the user name and password and re-uses them with\nsubsequent requests.\n\nThe spec requires that authentication only takes place if a resource is\nprotected. Therefore, for an unprotected resource no BASIC authentication takes\nplace even if the browser sends the credentials. In turn, this means that\ngetUserPrincipal() will return null since the user has not been authenticated.\n\nOne work-around is to use FORM authentication. In this scheme, the user is\nauthenticated once and the Principal added to the session. This authenticated\nPrincipal remains available whilst the session is valid regardless of whether an\nindividual request requires authentication.\n\nI have considered modifying the BASIC authentication implementation so a user is\nalways authenticated if the present credentials but:\n- this would violate the spec\n- the behaviour if the authentication fails is undefined (because the spec\nobviously doesn't define behaviour that violates the spec)\n\nTherefore I am going to resolve this as INVALID since any other behaviour is a\nspec violation.\n\nAs a final comment I do not like that this means that application behaviour\nvaries with the authentication scheme specified in web.xml but this is a direct\nside-effect of the differences in per-request and per-session authentication.", "id": 80290, "time": "2005-09-21T23:49:39Z", "creator": "markt@apache.org", "creation_time": "2005-09-21T23:49:39Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "text": "(In reply to comment #14)\nUnless there have been changes in the latest version of TomCat, I have always\nbeen using Form Authentication.  So the description of this problem is IN the\ncontext of Form Authentication.  Even after being authenticated via a Form\nauthentication method, the getUserPrincipal still returns NULL for those\nresources which are not protected.  \n\nI worked around this problem, however, by creating my own Valve and storing the\nauthenticated user somewhere I can get it later.  Later, I ensure that this user\nis correctly setup for the JBOSS call to the EJB.", "attachment_id": null, "id": 80303, "creation_time": "2005-09-22T05:09:25Z", "time": "2005-09-22T05:09:25Z", "creator": "apara@standardset.com", "bug_id": 12428, "is_private": false}, {"count": 16, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 103667, "time": "2007-05-25T03:43:34Z", "creator": "werner.donne@re.be", "creation_time": "2007-05-25T03:43:34Z", "is_private": false, "text": "I disagree with the assesment of this bug. Tomcat's behaviour is based on the\nfollowing:\n\n<spec-quote>\nSRV.12.9 Default Policies\nBy default, authentication is not needed to access resources. Authentication is\nneeded for requests for a web resource collection only when specified by the\ndeployment descriptor.\n</spec-quote>\n\nAuthentication can also be provided when it is not mandated by the deployment\ndescriptor. The spec quote doesn't say that authentication is forbidden when it\nis not specified in the deployment descriptor.\n\nWhen authentication is provided, no matter how and why, the documentation of the\ngetUserPrincipal method applies.\n\nThe use case for this is any situation where authorisation is based on\napplication data. When some application logic has found that unauthenticated\naccess to a resource is not allowed it can require authentication and reconsider\nits access control descision. The status code 401 can also be returned by the\napplication. How would you otherwise implement RFC 3744 for example?"}, {"count": 17, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 103986, "time": "2007-06-01T16:42:14Z", "creator": "markt@apache.org", "creation_time": "2007-06-01T16:42:14Z", "is_private": false, "text": "Having looked at this again, I agree that authenticating the user, if\ncredentials are present, for a non-protected resource would not be in violation\nof the spec. However, the question remains - what to do if that authentication\nfails?\n\nAnyway, I am changing this to an enhancement request since the current behaviour\nis spec compliant. As ever, patches for review will be welcomed."}, {"text": "When the authentication fails the server can return a 401, because the\nspontaneously provided Authorization header is wrong (RFC 2617 section 1.2).\nSince the server didn't require authentication for the method, the User Agent\nwould have volunteered it, perhaps trying to get in and call other methods for\nwhich authentication is required. After having received the 401, the User Agent\ncan continue interacting with the server unauthenticated. In this scenario the\nserver should always check a provided Authorization header, even if the method\ndoesn't require authentication.\n\nEvaluating whether the current behaviour is compliant with the spec or not\ndepends. The starting point is the specification of the\nHttpServletRequest.getUserPrincipal method. Looking at that alone makes the\nbehaviour non-compliant. Including SRV.12.9 makes it more difficult. Does\nSRV.12.9 apply in this case? In don't think so, because it says nothing about\nspontaneous authentication, which is allowed.", "tags": [], "creator": "werner.donne@re.be", "attachment_id": null, "count": 18, "id": 103997, "time": "2007-06-02T01:08:52Z", "bug_id": 12428, "creation_time": "2007-06-02T01:08:52Z", "is_private": false}, {"count": 19, "tags": [], "creator": "werner.donne@re.be", "attachment_id": 20857, "text": "Created attachment 20857\nMake authentication independent of security constraints\n\nThe specification of the getUserPrincipal doesn't say the availability of\nprincipal information depends on the existance of security constraints in the\ndeployment descriptor.\n\nThe patch causes the login configuration to be installed unconditionally and\nchecks if authentication is provided in the request regardless of the existance\nof security constraints. Credentials may have been provided spontaneously or\nafter a 401 response comming from the servlet.\n\nNote that this is also the way WebLogic behaves.\n\nThis patch is for Tomcat 5.5.23 and not Tomcat 4 for which the bug was created.", "id": 108435, "time": "2007-09-20T02:47:33Z", "bug_id": 12428, "creation_time": "2007-09-20T02:47:33Z", "is_private": false}, {"count": 20, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Please provide a text version of your patch in diff -u form.\n\n", "id": 108448, "time": "2007-09-20T08:03:26Z", "bug_id": 12428, "creation_time": "2007-09-20T08:03:26Z", "is_private": false}, {"count": 21, "tags": [], "creator": "werner.donne@re.be", "attachment_id": 20859, "text": "Created attachment 20859\norg.apache.catalina.authenticator.AuthenticatorBase", "id": 108449, "time": "2007-09-20T08:24:35Z", "bug_id": 12428, "creation_time": "2007-09-20T08:24:35Z", "is_private": false}, {"count": 22, "tags": [], "creator": "werner.donne@re.be", "attachment_id": 20860, "text": "Created attachment 20860\norg.apache.catalina.startup.ContextConfig", "id": 108450, "time": "2007-09-20T08:25:25Z", "bug_id": 12428, "creation_time": "2007-09-20T08:25:25Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 12428, "text": "Having looked at this further this is no need for a patch. Tomcat has the necessary functionality to do this. You just need to ensure that a) the application is using sessions and b) that the authenticators are configured to cache the authenticated Principal in the session.\n\nA recent enhancement to Tomcat 7 (the alwaysUseSession attribute) will make this even easier. On earlier versions, ensure a session exists before the authentication takes place. Depending on circumstances that might require a valve.\n\nMarking this as WONTFIX since the patch isn't going to be applied.\n\nThe other advantage of this approach is that the handling of fail unprompted authentications does not need to be considered. There were issues with complying with RFC2617 with that approach and it couldn't possible work with DIGEST auth.", "id": 142786, "time": "2010-12-16T14:00:15Z", "creator": "markt@apache.org", "creation_time": "2010-12-16T14:00:15Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 12428, "text": "Sessions don't solve the problem and doesn't make it comply to the spec. The container is not the only party that can decide if authentication is necessary. The application can do this too. Even if no credentials were provided spontaneously by the client, the application could set the status code to 401. The client would then reissue the request with credentials and the application couldn't anything else but return 401 again, because the principal is not passed through by Tomcat as the resource is not declared as protected in web.xml.\n\nWhat were the issues with RFC 2617?\n\nThe fact that it wouldn't work for DIGEST authentication is not relevant. We're talking about a valid scenario for Basic authentication.", "id": 142788, "time": "2010-12-16T14:32:26Z", "creator": "werner.donne@re.be", "creation_time": "2010-12-16T14:32:26Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This is a grey area of the specification. My reading of the various specs remains that Tomcat is spec compliant. I have added this to my list of things to ask the Servlet EG to clarify in 3.next \n\nI believe that a web application's fundamental behaviour should not change just by changing the authentication mechanism. That DIGEST can't work with pre-emptive authentication is a significant concern.\n\nThe scope of the feature is also important. This is do-able as previously described with container managed authentication. Once the application starts to get involved, things get more complex. However there is a way to do this in Servlet 3.0. The application can call request.authenticate() but it needs to make sure it checks the return code and stops any 401 going back to the client. The application will also need to handle any IllegalStateExcpetions if the response has already been committed.\n\nThe RFC2617 issue was mainly that a failed authentication SHOULD result in a 401 response and this feature requires that there is no 401 else the application could end up prevent a user from accessing a page for which no authentication is required. The SHOULD does give some leeway (it isn't a MUST) but I'm not convinced there is a good enough reason to ignore the spec here.", "id": 142794, "time": "2010-12-16T16:09:04Z", "bug_id": 12428, "creation_time": "2010-12-16T16:09:04Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 12428, "attachment_id": null, "id": 142802, "time": "2010-12-17T04:05:00Z", "creator": "werner.donne@re.be", "creation_time": "2010-12-17T04:05:00Z", "is_private": false, "text": "There are two issues here. The first is pre-emptive authentication. RFC 2617 section 1.2 is very clear on this:\n\n\" A user agent that wishes to authenticate itself with an origin\n   server--usually, but not necessarily, after receiving a 401\n   (Unauthorized)--MAY do so by including an Authorization header field\n   with the request.\"\n\nAnd further:\n\n\"If the origin server does not wish to accept the credentials sent\n   with a request, it SHOULD return a 401 (Unauthorized) response. The\n   response MUST include a WWW-Authenticate header field containing at\n   least one (possibly new) challenge applicable to the requested\n   resource.\"\n\nThis means the origin server must always deal with this, no matter the technology being used. The fact that a method is not declared as being protected doesn't play any role.\n\nThe second issue is that according to you the application should not be able to trigger the challenge-reponse mechanism by setting the status code to 401. Can you give one piece of evidence in the servlet spec for this? Are there restrictions in the HttpServletRequest.setStatus() method that say the application can't use certain status codes? Here is what the servlet spec says about programmatic security:\n\n\"Programmatic security is used by security aware applications when declarative security alone is not sufficient to express the security model of the application.\"\n\nDeclarative security is fine, but doesn't prohibit programmatic security and programmatic security doesn't require declarative security to be present. They are simply not related. According to you they are. Can you tell me why?\n\nThe patch shows how trivial it is to implement this correctly. Would harm be done if it were implemented? Which spec would be violated in that case?\n\nYour stance makes it impossible to implement WebDAV ACLs (RFC 3744). A user can change access control for a resource from protected to public. The former requires authentication prior to access control, while the latter doesn't."}, {"text": "see comment #26", "tags": [], "creator": "koen@koma.be", "attachment_id": null, "count": 27, "id": 142827, "time": "2010-12-18T06:18:27Z", "bug_id": 12428, "creation_time": "2010-12-18T06:18:27Z", "is_private": false}, {"count": 28, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Since this is the last open Tomcat 4 bug and a) I would like to make the Tomcat 4 bugs read-only and b) any changes as a result of this bug will be in Tomcat 7 onwards, I am moving this issue to Tomcat 7.", "id": 145343, "time": "2011-03-28T06:11:46Z", "bug_id": 12428, "creation_time": "2011-03-28T06:11:46Z", "is_private": false}, {"count": 29, "tags": [], "text": "This has been fixed in 7.0.x and will be included in 7.0.12 onwards. It is disable by default but can be enabled on a per context basis.\n\nTo address some of the points raised in comment 26:\n\nI don't believe RFC2617 or the Servlet specification are sufficiently clear to enable preemptive authentication by default. They are open to interpretation and my reading of them is that there are ambiguities in the language that defines the server response in such a scenario.\n\nI did not say that an application cannot trigger authentication by returning a 401 response. My point was that if the application uses the Servlet 3.0 API to manually implement preemptive authentication, it needs to consider what to do if that authentication fails when the client has requested a non-protected resource. Returning a 401 in that case strikes me as the wrong thing to do but that goes back to the ambiguity in the Servlet spec and RFC2617.\n\nRegarding programmatic security and declarative security, the relationship between them is set out in section 13 if the servlet spec. The point I was making was that if an application uses both declarative security and programmatic security and the programmatic security performs actions normally handled by declarative security (e.g. sending and processing authentication headers) then you need to be careful to ensure that the two do not interfere.\n\nTo summarise the current position:\n- with alwaysUseSession and cache enabled on an authenticator, the authenticated user name and principal will be available to all requests once the user has accessed a protected resource\n- with preemptiveAuthentication enabled on an authenticator, the authenticated user name and principal will always be available", "attachment_id": null, "id": 145458, "creation_time": "2011-04-01T07:21:31Z", "time": "2011-04-01T07:21:31Z", "creator": "markt@apache.org", "bug_id": 12428, "is_private": false}, {"count": 30, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "Fascinating reading. My question would be: why does anyone want to have a resource that doesn't need authentication (no security-constraint) but then checks the authentication status, anyway (calls getPrincipal, isUserInRole, etc.)?\n\nIf this \"bug\" was really ruining anyone's day, isn't it a simple matter of providing an aliased URL to the same resource that /is/ protected by a security-constrains and always sending authenticated users to /that/ URL instead?\n\nGlad the 9-year saga is over...", "id": 145498, "time": "2011-04-01T17:07:10Z", "bug_id": 12428, "creation_time": "2011-04-01T17:07:10Z", "is_private": false}, {"count": 31, "tags": [], "text": "@Mark The relevant specs are crystal clear. If you think there is any room for interpretation then you should provide proof of how your interpretation can be constructed. At present we still don't know what that is.\n\nYou wonder what a \"non-protected\" servlet should do when the provided credentials are wrong. That is simple, it should do nothing, because the container will have returned a 401, which it should always do when the credentials are wrong. That is because there is no response code for reporting wrong credentials.\n\nWhere can there be interference? All involved parties, container and servlet, should comply with the specifications. When the container imposes a security constraint because it was declared in the application, the servlet won't see anything about it.\n\n@Chris You don't seem to understand the difference between declarative and programmatic protection. An alternative URL doesn't provide prgrammatic protection. Study the WebDAV ACL specification and you will see it is impossible to implement it without this bug being fixed.", "attachment_id": null, "id": 145509, "creation_time": "2011-04-02T04:00:55Z", "time": "2011-04-02T04:00:55Z", "creator": "werner.donne@re.be", "bug_id": 12428, "is_private": false}]
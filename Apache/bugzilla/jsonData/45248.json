[{"count": 0, "tags": [], "text": "(I first saw this in APR 1.2.12: it is still present in 1.3.2.)\n\nThe symptoms are:\n\napr_thread_rwlock_t Tests\n    Initializing the apr_thread_rwlock_t                    OK\n    Starting 3 threads    OK\n[indefinite stall]\n\ngdb shows that the lock is still outstanding:\n\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b28b478 in pthread_join () from /lib/libpthread.so.0\n#2  0x4002222f in apr_thread_join (retval=0xbfe707bc, thd=0x9e09348) at threadproc/unix/thread.c:217\n#3  0x08048c97 in test_thread_rwlock (num_threads=2) at testlockperf.c:212\n#4  0x08049228 in main (argc=Cannot access memory at address 0x0\n) at testlockperf.c:276\n(gdb) thread 2\n[Switching to thread 2 (Thread 0x40451b90 (LWP 9811))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n(gdb) thread 3\nThread ID 3 not known.\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n(gdb) quit\n\n\nI'm not really sure where to go from here. It's not at all obvious what's wrong.", "attachment_id": null, "bug_id": 45248, "id": 117874, "time": "2008-06-20T16:36:06Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-06-20T16:36:06Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "bojan@rexursive.com", "is_private": false, "id": 117887, "time": "2008-06-22T23:42:37Z", "bug_id": 45248, "creation_time": "2008-06-22T23:42:37Z", "tags": [], "text": "Could you do 'info threads' and then do a backtrace of all three threads that are exercising the lock?"}, {"count": 2, "tags": [], "text": "Sorry, maybe I wasn't clear. The message \"Thread ID 3 not known.\" is usually due to the fact that thread ids are something other than 1, 2 and 3 here.", "attachment_id": null, "bug_id": 45248, "id": 117888, "time": "2008-06-22T23:45:47Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-22T23:45:47Z", "is_private": false}, {"count": 3, "tags": [], "text": "Sure: will do tomorrow evening. (Sorry for the delay, but I just got home and it's past midnight here.)\n", "attachment_id": null, "bug_id": 45248, "id": 117951, "time": "2008-06-24T16:23:24Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-06-24T16:23:24Z", "is_private": false}, {"count": 4, "tags": [], "creator": "bojan@rexursive.com", "attachment_id": null, "is_private": false, "id": 117953, "time": "2008-06-24T16:31:15Z", "bug_id": 45248, "creation_time": "2008-06-24T16:31:15Z", "text": "Thanks. If you could also include the distro information, that would help."}, {"count": 5, "tags": [], "text": "Fascinating. I tried to bisect the bug, only to find that it doesn't work as far back as I can go (1.2.0 doesn't work, earlier versions require libtool downgrades so I didn't go further back). I know for a fact that 1.2.6 worked for me when I built it, so obviously something external to apr has changed.\n\nFrom my upgrade logs I strongly suspect glibc 2.5 -> 2.6.1 (I'm on 2.7 now, going to 2.8 fairly shortly), although it could be the kernel, I suppose. I'll do a test glibc reversion in a chroot and see how that flies.\n\n(The distro, well, it was Linux From Scratch a decade before LFS was cool. My autobuilders work well enough that I see no point using someone else's distro, plus it means I get to find all sorts of interesting bugs like, well, this one.)\n\nSorry for the gdb stupidity: I do know how to use it but not when under hay fever drugs of this intensity ;}\n\n\nLooking again (with 1.3.2), the two-thread case freezes up now.\n\napr_thread_rwlock_t Tests\n    Initializing the apr_thread_rwlock_t                    OK\n    Starting 2 threads    OK\n\n  2 Thread 0x40250b90 (LWP 15230)  0x40000424 in __kernel_vsyscall ()\n  1 Thread 0x4004f7e0 (LWP 15222)  0x40000424 in __kernel_vsyscall ()\n\n(gdb) thread 1\n[Switching to thread 1 (Thread 0x4004f7e0 (LWP 15222))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b28b478 in pthread_join () from /lib/libpthread.so.0\n#2  0x4002222f in apr_thread_join (retval=0xbf918a68, thd=0x9ce6328) at threadproc/unix/thread.c:217\n#3  0x08048c97 in test_thread_rwlock (num_threads=2) at testlockperf.c:212\n#4  0x08049228 in main (argc=Cannot access memory at address 0x0\n) at testlockperf.c:276\n(gdb) thread 2\n[Switching to thread 2 (Thread 0x40250b90 (LWP 15230))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n\nIf I continue, the lock is released and the three-thread case sweeps by without problems. If I run it under GDB directly rather than attaching, it never hangs.\n\nI tried running it under valgrind to drastically change the performance profile, and bingo, a three-thread hang, last displayed:\n\napr_thread_rwlock_t Tests\n    Initializing the apr_thread_rwlock_t                    OK\n    Starting 3 threads    OK\n\nUnfortunately interrupting valgrind while hung isn't very useful: the interrupt happens while you're inside the valgrind VM, and that confuses gdb's unwinder (on account of that VM being relocated) so that all you get is something like this:\n\n#0  0x3807211c in ?? ()\n#1  0x38746cf0 in ?? ()\n#2  0x3887ca7c in ?? ()\n#3  0x6234deec in ?? ()\n#4  0x38746cfc in ?? ()\n...\n", "attachment_id": null, "bug_id": 45248, "id": 117993, "time": "2008-06-25T15:58:03Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-06-25T15:58:03Z", "is_private": false}, {"count": 6, "tags": [], "text": "Probably a silly question (I'm not sure if that can be relevant in current glibc at all) - did you build glibc with NPTL or without?", "attachment_id": null, "bug_id": 45248, "id": 117996, "time": "2008-06-25T16:38:20Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-25T16:38:20Z", "is_private": false}, {"count": 7, "attachment_id": null, "creator": "nix@esperi.org.uk", "is_private": false, "id": 117997, "time": "2008-06-25T16:40:10Z", "bug_id": 45248, "creation_time": "2008-06-25T16:40:10Z", "tags": [], "text": "With NPTL, from glibc 2.5 on (i.e. essentially forever, certainly since long before this problem first appeared)."}, {"count": 8, "attachment_id": null, "creator": "bojan@rexursive.com", "is_private": false, "id": 117998, "time": "2008-06-25T16:45:54Z", "bug_id": 45248, "creation_time": "2008-06-25T16:45:54Z", "tags": [], "text": "OK, thanks.\n\nThis backtrace from second thread:\n----------------------------\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n----------------------------\n\nIs this complete backtrace? Was there something else there?"}, {"count": 9, "tags": [], "text": "Created attachment 22177\nPrint locking errors in the test\n\nCould you try the attached patch? If locking/unlocking doesn't go through, it should let us know.", "attachment_id": 22177, "bug_id": 45248, "id": 117999, "time": "2008-06-25T16:56:06Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-25T16:56:06Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 45248, "is_private": false, "text": "Created attachment 22178\nPrint locking errors in the test", "id": 118000, "time": "2008-06-25T16:59:30Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-25T16:59:30Z", "attachment_id": 22178}, {"count": 11, "tags": [], "creator": "nix@esperi.org.uk", "attachment_id": null, "id": 118058, "time": "2008-06-27T02:39:10Z", "bug_id": 45248, "creation_time": "2008-06-27T02:39:10Z", "is_private": false, "text": "The patch doesn't cause anything to be printed.\n\nHere are some better backtraces, though (gdb frame-base bug, I think):\n\n(gdb) thread 1\n[Switching to thread 1 (Thread 0x400547e0 (LWP 26416))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b28b478 in pthread_join () from /lib/libpthread.so.0\n#2  0x400218ae in apr_thread_join (retval=0xbf984298, thd=0x8c19328) at threadproc/unix/thread.c:217\n#3  0x08048c46 in test_thread_rwlock (num_threads=2) at testlockperf.c:220\n#4  0x0804920f in main (argc=1, argv=Cannot access memory at address 0x4\n) at testlockperf.c:284\n(gdb) thread 2\n[Switching to thread 2 (Thread 0x40255b90 (LWP 26424))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n#3  0x400158f0 in apr_thread_rwlock_wrlock (rwlock=0x8c192f0) at locks/unix/thread_rwlock.c:97\n#4  0x08048a6f in thread_rwlock_func (thd=0x8c19328, data=0x0) at testlockperf.c:74\n#5  0x40021666 in dummy_worker (opaque=0x8c19328) at threadproc/unix/thread.c:142\n#6  0x4b28a079 in start_thread () from /lib/libpthread.so.0\n"}, {"count": 12, "tags": [], "text": "> The patch doesn't cause anything to be printed.\n\nRight. This suggest we don't have any lock/unlock attempt failures in the process.\n\nThe manual page for pthread_rwlock_wrlock() function claims:\n-------------------\nThe pthread_rwlock_wrlock() function shall apply a write  lock  to  the\nread-write  lock  referenced by rwlock. The calling thread acquires the\nwrite lock if no other thread (reader or writer) holds  the  read-write\nlock rwlock. Otherwise, the thread shall block until it can acquire the\nlock. The calling thread may deadlock if at the time the call  is  made\nit holds the read-write lock (whether a read or write lock).\n-------------------\n\nIs is possible that the thread calling the locking routine is holding that lock already?", "attachment_id": null, "bug_id": 45248, "id": 118109, "time": "2008-06-29T14:12:05Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-29T14:12:05Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 45248, "is_private": false, "text": "In comment #11, was that the test where 2 threads were started (i.e. total number of threads was 3)? Meaning, two \"worker\" threads plus main thread?\n\nIf so, what was the backtrace of that third thread?", "id": 118110, "time": "2008-06-29T14:19:24Z", "creator": "bojan@rexursive.com", "creation_time": "2008-06-29T14:19:24Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "I forced this to happen by changing the initial number of threads to 3 (since otherwise it stalls at the 2-thread stage).\n\nThe backtraces of the two lock-blocked threads are identical:\n\n(gdb) info threads\n  3 Thread 0x4024fb90 (LWP 21108)  0x40000424 in __kernel_vsyscall ()\n  2 Thread 0x40450b90 (LWP 21109)  0x40000424 in __kernel_vsyscall ()\n  1 Thread 0x4004e7e0 (LWP 21096)  0x40000424 in __kernel_vsyscall ()\n(gdb) thread 1\n[Switching to thread 1 (Thread 0x4004e7e0 (LWP 21096))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b28b478 in pthread_join () from /lib/libpthread.so.0\n#2  0x400218ae in apr_thread_join (retval=0xbfb79488, thd=0x82f4270) at threadproc/unix/thread.c:217\n#3  0x08048c87 in test_thread_rwlock (num_threads=3) at testlockperf.c:212\n#4  0x080491df in main (argc=1, argv=Cannot access memory at address 0x4\n) at testlockperf.c:276\n(gdb) thread 2\n[Switching to thread 2 (Thread 0x40450b90 (LWP 21109))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n#3  0x400158f0 in apr_thread_rwlock_wrlock (rwlock=0x82f4238) at locks/unix/thread_rwlock.c:97\n#4  0x08048a6f in thread_rwlock_func (thd=0x82f4290, data=0x0) at testlockperf.c:74\n#5  0x40021666 in dummy_worker (opaque=0x82f4290) at threadproc/unix/thread.c:142\n#6  0x4b28a079 in start_thread () from /lib/libpthread.so.0\n(gdb) thread 3\n[Switching to thread 3 (Thread 0x4024fb90 (LWP 21108))]#0  0x40000424 in __kernel_vsyscall ()\n(gdb) bt\n#0  0x40000424 in __kernel_vsyscall ()\n#1  0x4b290ec2 in __lll_lock_wait () from /lib/libpthread.so.0\n#2  0x4b28de60 in pthread_rwlock_wrlock () from /lib/libpthread.so.0\n#3  0x400158f0 in apr_thread_rwlock_wrlock (rwlock=0x82f4238) at locks/unix/thread_rwlock.c:97\n#4  0x08048a6f in thread_rwlock_func (thd=0x82f4270, data=0x0) at testlockperf.c:74\n#5  0x40021666 in dummy_worker (opaque=0x82f4270) at threadproc/unix/thread.c:142\n#6  0x4b28a079 in start_thread () from /lib/libpthread.so.0\n\n\n(Can anyone else replicate this?)\n", "attachment_id": null, "bug_id": 45248, "id": 118167, "time": "2008-07-01T15:38:55Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-07-01T15:38:55Z", "is_private": false}, {"count": 15, "tags": [], "creator": "bojan@rexursive.com", "attachment_id": null, "id": 118169, "time": "2008-07-01T16:01:20Z", "bug_id": 45248, "creation_time": "2008-07-01T16:01:20Z", "is_private": false, "text": "I was unable to replicate this in my environment (Fedora 9 on i686/x86_64, RHEL 4 on i686, CentOS 4 on i686 and CentOS 5 on i686/x86_64). AFAIK, people running Ubuntu reported this test passing for 1.3.2 release."}, {"count": 16, "attachment_id": null, "creator": "nix@esperi.org.uk", "is_private": false, "id": 118174, "time": "2008-07-01T16:59:24Z", "bug_id": 45248, "creation_time": "2008-07-01T16:59:24Z", "tags": [], "text": "I guess it's something weird specific to my environment then.\n\nI'll dig deeper and see what's misbehaving. It pretty much has to be glibc or the kernel, really.... I hope it's not glibc, getting fixes into that is like pushing water uphill while someone fires a flamethrower at you."}, {"count": 17, "tags": [], "creator": "bojan@rexursive.com", "attachment_id": 22207, "id": 118180, "time": "2008-07-01T18:34:44Z", "bug_id": 45248, "creation_time": "2008-07-01T18:34:44Z", "is_private": false, "text": "Created attachment 22207\nTest case without APR\n\nDoes this test program run OK on your system?"}, {"count": 18, "tags": [], "text": "No, it still fails. Thus it's not APR at fault.\n\n... interesting. Adding a heap of write() calls shows:\n\nMain\nMain got lock\nThread\nThread\nThread\nMain made threads\nThread got lock; thread released lock\n[~10000 repetitions of the above two lines]\nThread released lock\nMain released lock\nead released lock\nThread got lock; thread released lock\n[~1.1 million repetitions of the above two lines]\n[Hang]\n\nUpon deadlock the rwlock says\n\n__lock = 0, __nr_readers = 0, __readers_wakeup = 0, __writer_wakeup = 219178, __nr_readers_queued = 0, __nr_writers_queued = 0, __flags = 0 '\\0', __shared = 0 '\\0', __pad1 = 0 '\\0', __pad2 = 0 '\\0', __writer = 0\n\ni.e. it shouldn't be blocking (no readers, not locked nothing queued).\n\nI think it's plain that pthread_rwlocks are not, well, locking, at least not for me (although they deadlock fine), and that this cannot be blamed on APR.\n\nSorry for wasting your time. I'll dig into glibc's rwlock implementation and see if any fixes have been made upstream since glibc 2.7.\n", "attachment_id": null, "bug_id": 45248, "id": 118182, "time": "2008-07-02T00:18:36Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-07-02T00:18:36Z", "is_private": false}, {"text": "OK, it works on a bunch of other randomly selected Linux boxes with the same kernel, compiled with the same compiler. \n\nIt's this glibc at fault. Now to figure out why (it's almost identical to a stock Debian glibc with a couple of especially disruptive POSIX-violating patches unrelated to locks removed: miscompilation of glibc?)\n\nI'm starting to see why nobody else has seen this bug. :)", "tags": [], "bug_id": 45248, "is_private": false, "count": 19, "id": 118183, "time": "2008-07-02T00:30:43Z", "creator": "nix@esperi.org.uk", "creation_time": "2008-07-02T00:30:43Z", "attachment_id": null}, {"count": 20, "attachment_id": null, "creator": "bojan@rexursive.com", "is_private": false, "id": 118189, "time": "2008-07-02T03:32:20Z", "bug_id": 45248, "creation_time": "2008-07-02T03:32:20Z", "tags": [], "text": "Thanks for letting us know. Good luck with the glibc stuff!"}]
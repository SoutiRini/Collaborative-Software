[{"count": 0, "tags": [], "bug_id": 18359, "text": "when trying to access a URL with the following parameters\n\naction=N%E4yt%E4%20dokumentin%20tunnistetiedot&project=Project101&currdir=Node175&selecteddocs=Doc170\n\nthe parameters get erranously encoded like this:\n\naction=N%EF%BF%BDyt%EF%BF%BDdokumentin+tunnistetiedot&project=Project101&currdir=Node175&selecteddocs=Doc170", "id": 33816, "time": "2003-03-26T09:33:36Z", "creator": "aspa@kronodoc.fi", "creation_time": "2003-03-26T09:33:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 18359, "text": "Well, I tried your string, and it worked perfectly.  Only difference is that '+'\nsymbols were used instead of '%20', which shouldn't be a big deal.", "id": 35921, "time": "2003-04-23T19:09:35Z", "creator": "mstover1@apache.org", "creation_time": "2003-04-23T19:09:35Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 18359, "text": "We have a similar problem, but with a post parameter that is base64 encoded. \nWhat happens is the proxy server records the URL encoded version incorrectly,\nand then during playback of the test the decoded version will not base64 decode.\n All of the pages are utf-8.\nHere is the block that is in the actual form as a form parameter:\n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\n\nHere is the block as recorded by the http proxy:\nAA3vqwEAAAABAAD+7QAAAAEAAAAEAAC+7wAAAAIEAAAAvu8AAAADBAAAAL7vAAAABAQAAAC+7wAA\n%0D%0AAAUBAQAAAAwAAP7tAAAABgAAAAYAAL7vAAAABwQAAAC+7wAAAAgEAAAAvu8AAAAJAwAAAL\n7vAAAA%0D%0ACgQAAAC+7wAAAAsEAAAAvu8AAAAMBAAAAAAAAAD+7QAAAA0AAAAGAAC+7wAAAA4E\nAAAAvu8AAAAP%0D%0ABAAAAL7vAAAAEAMAAAC+7wAAABEEAAAAvu8AAAASBAAAAL7vAAAAEwQAAA\nAAAAAA%2Fu0AAAAUAAAA%0D%0ABgAAvu8AAAAVBAAAAL7vAAAAFgQAAAC+7wAAABcDAAAAvu8AAA\nAYBAAAAL7vAAAAGQQAAAC+7wAA%0D%0AABoEAAAAAAAAAP7tAAAAGwAAAAYAAL7vAAAAHAQAAAC+\n7wAAAB0EAAAAvu8AAAAeAwAAAL7vAAAA%0D%0AHwQAAAC+7wAAACAEAAAAvu8AAAAhBAAAAAAAAA\nD+7QAAACIAAAAGAAC+7wAAACMEAAAAvu8AAAAk%0D%0ABAAAAL7vAAAAJQMAAAC+7wAAACYEAAAA\nvu8AAAAnBAAAAL7vAAAAKAQAAAAAAAAA%2Fu0AAAApAAAA%0D%0ABgAAvu8AAAAqBAAAAL7vAAAA\nKwQAAAC+7wAAACwDAAAAvu8AAAAtBAAAAL7vAAAALgQAAAC+7wAA%0D%0AAC8EAAAAAAAAAP7tAA\nAAMAAAAAYAAL7vAAAAMQQAAAC+7wAAADIEAAAAvu8AAAAzAwAAAL7vAAAA%0D%0ANAQAAAC+7wAA\nADUEAAAAvu8AAAA2BAAAAAAAAAD+7QAAADcAAAAGAAC+7wAAADgEAAAAvu8AAAA5%0D%0ABAAAAL\n7vAAAAOgMAAAC+7wAAADsEAAAAvu8AAAA8BAAAAL7vAAAAPQQAAAAAAAAA%2Fu0AAAA+AAAA%0D%\n0ABgAAvu8AAAA%2FBAAAAL7vAAAAQAQAAAC+7wAAAEEDAAAAvu8AAABCBAAAAL7vAAAAQwQAAAC+\n7wAA%0D%0AAEQEAAAAAAAAAP7tAAAARQAAAAYAAL7vAAAARgQAAAC+7wAAAEcEAAAAvu8AAABIAw\nAAAL7vAAAA%0D%0ASQQAAAC+7wAAAEoEAAAAvu8AAABLBAAAAAAAAAD+7QAAAEwAAAAGAAC+7wAA\nAE0EAAAAvu8AAABO%0D%0ABAAAAL7vAAAATwMAAAC+7wAAAFAEAAAAvu8AAABRBAAAAL7vAAAAUg\nQAAAAAAAAA%2Fu0AAABTAAAA%0D%0ABgAAvu8AAABUBAAAAL7vAAAAVQQAAAC+7wAAAFYDAAAAvu\n8AAABXBAAAAL7vAAAAWAQAAAC+7wAA%0D%0AAFkEAAAAAAAfiwgAAAAAAAAArVhLT9tAEL4j5T%2\nF0DyTxPmddKYcCPVSiFWor9cLFJEZEtZ2IGCEu%0D%0A%2Fe1de2fWns3eAhfYh8cz3%2FfNwxi9\najdycWVW3eZUN%2FW2r3f3TdUNO+2mWFyJctU2wx9m5c833WvT%0D%0ALK5A0ab0z7WHrn9u3n9W\nfT3ujAZV6U+O3tKPqq3HZdj2u9Xx2Oy3Vdf%2Ffj8OR7A6DbZUuOHiC4vh%0D%0Abte9Vs1tvXvd\n9vvHph63gyXwx7u6r%2FbN6W7f%2FR13xhPhD4T%2FceNWs%2FlV15%2Fwot8x0erN4Vi9t3XX%0\nD%0Aj7vh0QJfrhS6jz6ic9LiuYsXRYrA8M5m89z3x9PD5%2FX67e1t1b43+6f6WPXPq+2hXT+etu\nunfber%0D%0Ahhesd4e3rjlUu%2FWfr9eyKMRSuKX%2FXayOu6fRfvDMMTz9ctwGh34IG1B0JXPc\nIe7+OEHL79BJApGD%0D%0ANCRHyOoceAI15EyWMEfYmglb9FkyXwVKxw3YX%2F%2F6fl8U8s4Dsr\njS+iMh1aQwC8QmuSaKNHSBcnOC%0D%0A4e+QFutYCBZpsTa1YxFuKfFVmhRkdRY2S5kpLo%2FdTH\nIivRhSMmjyQ0bYhYe9HIHK0K1RUrZgiFgE%0D%0ASgNDRKN0tEkR0aQLQYioLBBaRQvoKOnHxScF\nc916mPFEulwI0sV0nvsqiSOd+iqJDLILxJ6UWael%0D%0AjPrAewVzUXkTZMplLUB5Oe868g5UL+\nzcDSFH%2Fuc0AkYKMtSToTxc6gYYUl+s7TF4IhVkWqAAITRl%0D%0AyoY%2FSUqWQU26i721iFeR\n0w2gxg3kWxNqPU8oMmAME4ILdS8Im534umcU40aqy7kQhiRhqKfFkiAC%0D%0A5ZpKw5gGdftYv3\ny7DQUJt0OUcnou7cTTSejV7mxMEGeNmXJyPiFg3GjFZnFVmLVKM%2FiMB5ZUpoqP%0D%0ABE6RZg\n3FCVSIlGSEKfRc8Kbs3TnRbDUiOfMzRRIVJ8568hATR1BE+WF55CPDEspS+crjK%2F928zAX%0D%\n0A2r%2F5SrKVYivNVoatLFsBWzm2KucrUbDV9HZs%2Fc7FzA6Y5YcMYeK1BEFnp9KQ4KWYYELhR4\nmTtl12%0D%0A4rHFdEw9jE1nIqYIG8aoKZSsCIdxMh25kHgLzLJFjq0JcFiTxmtNvJFmmJgaaC4o\nqgdUpDXJ0goW%0D%0Ahp62Q0VzF2WXXgrfLcNk5hgjMNaiefgayfQDYShVOg1f63gjpZvyQlF9Mz\nO6c4OOjIBkW3w5AX1p%0D%0AcflyY6m6OHJTFxx1FIQEhpH2O4Z3CRSA7xYjRlKlGElimgqZpkI2\ndBiOmiXR+HkkmBPZiUrEseFC%0D%0AMGApdWxRJEWAyYt0TEAahnmJuw6Q8xQwgz5gvIodAQyjCm\niy1VNbiN+0GIc6G2pU%2FHTAuw6%2F6MgK%0D%0AEgAiK0eYsjFByLgpTzlCZ2CWEZtkvrI5KA1m\nYx5n+sfCy2bqPEEolHxzzP4Dmik4hokQAAA%3D\n\nAnd here is what the block SHOULD be when URL encoded (which works):\nAA3vqwEAAAABAAD%2B7QAAAAEAAAAEAAC%2B7wAAAAIEAAAAvu8AAAADBAAAAL7vAAAABAQAAAC%\n2B7wAA%0D%0AAAUBAQAAAAwAAP7tAAAABgAAAAYAAL7vAAAABwQAAAC%2B7wAAAAgEAAAAvu8AAA\nAJAwAAAL7vAAAA%0D%0ACgQAAAC%2B7wAAAAsEAAAAvu8AAAAMBAAAAAAAAAD%2B7QAAAA0AAAAG\nAAC%2B7wAAAA4EAAAAvu8AAAAP%0D%0ABAAAAL7vAAAAEAMAAAC%2B7wAAABEEAAAAvu8AAAASBA\nAAAL7vAAAAEwQAAAAAAAAA%2Fu0AAAAUAAAA%0D%0ABgAAvu8AAAAVBAAAAL7vAAAAFgQAAAC%2B\n7wAAABcDAAAAvu8AAAAYBAAAAL7vAAAAGQQAAAC%2B7wAA%0D%0AABoEAAAAAAAAAP7tAAAAGwAA\nAAYAAL7vAAAAHAQAAAC%2B7wAAAB0EAAAAvu8AAAAeAwAAAL7vAAAA%0D%0AHwQAAAC%2B7wAAAC\nAEAAAAvu8AAAAhBAAAAAAAAAD%2B7QAAACIAAAAGAAC%2B7wAAACMEAAAAvu8AAAAk%0D%0ABAAA\nAL7vAAAAJQMAAAC%2B7wAAACYEAAAAvu8AAAAnBAAAAL7vAAAAKAQAAAAAAAAA%2Fu0AAAApAAAA\n%0D%0ABgAAvu8AAAAqBAAAAL7vAAAAKwQAAAC%2B7wAAACwDAAAAvu8AAAAtBAAAAL7vAAAALgQA\nAAC%2B7wAA%0D%0AAC8EAAAAAAAAAP7tAAAAMAAAAAYAAL7vAAAAMQQAAAC%2B7wAAADIEAAAAvu\n8AAAAzAwAAAL7vAAAA%0D%0ANAQAAAC%2B7wAAADUEAAAAvu8AAAA2BAAAAAAAAAD%2B7QAAADcA\nAAAGAAC%2B7wAAADgEAAAAvu8AAAA5%0D%0ABAAAAL7vAAAAOgMAAAC%2B7wAAADsEAAAAvu8AAA\nA8BAAAAL7vAAAAPQQAAAAAAAAA%2Fu0AAAA%2BAAAA%0D%0ABgAAvu8AAAA%2FBAAAAL7vAAAAQA\nQAAAC%2B7wAAAEEDAAAAvu8AAABCBAAAAL7vAAAAQwQAAAC%2B7wAA%0D%0AAEQEAAAAAAAAAP7t\nAAAARQAAAAYAAL7vAAAARgQAAAC%2B7wAAAEcEAAAAvu8AAABIAwAAAL7vAAAA%0D%0ASQQAAAC%\n2B7wAAAEoEAAAAvu8AAABLBAAAAAAAAAD%2B7QAAAEwAAAAGAAC%2B7wAAAE0EAAAAvu8AAABO%0\nD%0ABAAAAL7vAAAATwMAAAC%2B7wAAAFAEAAAAvu8AAABRBAAAAL7vAAAAUgQAAAAAAAAA%2Fu0A\nAABTAAAA%0D%0ABgAAvu8AAABUBAAAAL7vAAAAVQQAAAC%2B7wAAAFYDAAAAvu8AAABXBAAAAL7v\nAAAAWAQAAAC%2B7wAA%0D%0AAFkEAAAAAAAfiwgAAAAAAAAArVhLT9tAEL4j5T%2F0DyTxPmddKY\ncCPVSiFWor9cLFJEZEtZ2IGCEu%0D%0A%2Fe1de2fWns3eAhfYh8cz3%2FfNwxi9ajdycWVW3eZU\nN%2FW2r3f3TdUNO%2B2mWFyJctU2wx9m5c833WvT%0D%0ALK5A0ab0z7WHrn9u3n9WfT3ujAZV6U\n%2BO3tKPqq3HZdj2u9Xx2Oy3Vdf%2Ffj8OR7A6DbZUuOHiC4vh%0D%0Abte9Vs1tvXvd9vvHph63\ngyXwx7u6r%2FbN6W7f%2FR13xhPhD4T%2FceNWs%2FlV15%2Fwot8x0erN4Vi9t3XX%0D%0Aj7vh\n0QJfrhS6jz6ic9LiuYsXRYrA8M5m89z3x9PD5%2FX67e1t1b43%2B6f6WPXPq%2B2hXT%2Betuun\nfber%0D%0Ahhesd4e3rjlUu%2FWfr9eyKMRSuKX%2FXayOu6fRfvDMMTz9ctwGh34IG1B0JXPcIe\n7%2BOEHL79BJApGD%0D%0ANCRHyOoceAI15EyWMEfYmglb9FkyXwVKxw3YX%2F%2F6fl8U8s4Dsr\njS%2BiMh1aQwC8QmuSaKNHSBcnOC%0D%0A4e%2BQFutYCBZpsTa1YxFuKfFVmhRkdRY2S5kpLo%2\nFdTHIivRhSMmjyQ0bYhYe9HIHK0K1RUrZgiFgE%0D%0ASgNDRKN0tEkR0aQLQYioLBBaRQvoKOnH\nxScFc916mPFEulwI0sV0nvsqiSOd%2BiqJDLILxJ6UWael%0D%0AjPrAewVzUXkTZMplLUB5Oe86\n8g5UL%2BzcDSFH%2Fuc0AkYKMtSToTxc6gYYUl%2Bs7TF4IhVkWqAAITRl%0D%0AyoY%2FSUqWQU\n26i721iFeR0w2gxg3kWxNqPU8oMmAME4ILdS8Im534umcU40aqy7kQhiRhqKfFkiAC%0D%0A5ZpK\nw5gGdftYv3y7DQUJt0OUcnou7cTTSejV7mxMEGeNmXJyPiFg3GjFZnFVmLVKM%2FiMB5ZUpoqP%0\nD%0ABE6RZg3FCVSIlGSEKfRc8Kbs3TnRbDUiOfMzRRIVJ8568hATR1BE%2BWF55CPDEspS%2Bcrj\nK%2F928zAX%0D%0A2r%2F5SrKVYivNVoatLFsBWzm2KucrUbDV9HZs%2Fc7FzA6Y5YcMYeK1BEFn\np9KQ4KWYYELhR4mTtl12%0D%0A4rHFdEw9jE1nIqYIG8aoKZSsCIdxMh25kHgLzLJFjq0JcFiTxm\ntNvJFmmJgaaC4oqgdUpDXJ0goW%0D%0Ahp62Q0VzF2WXXgrfLcNk5hgjMNaiefgayfQDYShVOg1f\n63gjpZvyQlF9MzO6c4OOjIBkW3w5AX1p%0D%0AcflyY6m6OHJTFxx1FIQEhpH2O4Z3CRSA7xYjRl\nKlGElimgqZpkI2dBiOmiXR%2BHkkmBPZiUrEseFC%0D%0AMGApdWxRJEWAyYt0TEAahnmJuw6Q8x\nQwgz5gvIodAQyjCmiy1VNbiN%2B0GIc6G2pU%2FHTAuw6%2F6MgK%0D%0AEgAiK0eYsjFByLgpTz\nlCZ2CWEZtkvrI5KA1mYx5n%2BsfCy2bqPEEolHxzzP4Dmik4hokQAAA%3D", "id": 80851, "time": "2005-10-06T17:17:47Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T17:17:47Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 18359, "text": "Which version of JMeter are you using?\n\nCan you provide a simple test-case?", "id": 80856, "time": "2005-10-06T19:42:18Z", "creator": "sebb@apache.org", "creation_time": "2005-10-06T19:42:18Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 18359, "text": "JMeter 2.0.3 JDK 1.4.2_05\n\nI'll work on getting a simple test case created.", "id": 80861, "time": "2005-10-06T20:07:11Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T20:07:11Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 18359, "text": "Just a bit more information, it doesn't seem isolated to the HTTP Proxy\nrecording process.  As a test I removed the form parameter and inserted a HTTP\nURL Re-writing Modifier to capture the form parameter value and insert it back\ninto the form during the test.  This causes the exact same issue, unencoded form\nvalue gets URL encoded incorrectly and can't be base64 decoded after the\nparameter is URL decoded.", "id": 80864, "time": "2005-10-06T20:28:25Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T20:28:25Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 18359, "text": "Tracing through the jmeter code, we have determined what is happening.  JMeter\nis always URL decoding all form parameters during capture.  What this causes is\nthe BASE64 encoded form value on the page to be URL decoded and corrupted.  This\ncorrupted value is then either stored in the test sample or if you are using a\nURL Re-writing Modifier, stored internally corrupted.  During the test this\ncorrupted value is now URL encoded, and passed to the form which on the backend\nis URL decoded back into the corrupted value, causing the failure.\n\nIn URLRewritingModifier.modify(HTTPSamplerBase, String) [line: 121]\n\n sampler.getArguments().removeArgument(getArgumentName()); [line: 129]\n sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value,\ntrue)); [line: 130]\n\nTrue is passed in explicitly to the constructor of the HTTPArgument indicating\nthat the value is URL encoded.  HTTPArgument then runs the value through the\ndecoder before storing it.  Running a BASE64 encoded string through the URL\ndecoder corrupts the string.  The URL Re-Writing Modifier (and any other element\nthat parses/stores form values) should allow an option to indicate whether or\nnot the value is url encoded.", "id": 80866, "time": "2005-10-06T21:24:38Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T21:24:38Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 18359, "text": "Looking into the way URL encoding and decoding should work per the HTTP spec, I\nwould strongly suggest that this parameter should be defaulted to \"false\" for\nany element in JMeter that will be parsing the HTML response.  Since the browser\nURL encodes the form parameters and the server decodes them, and visa-versa the\nHTML will always contain the URL decoded values so they do not need to be URL\ndecoded AGAIN.  Since JMeter is taking the place of the browser, they do need to\nbe URL encoded when the form is sent but the extra decode is a true bug in\nJMeter for elements that parse the HTML response.  Defaulting the value to false\nfor the URLRewritingModifier corrects this issue for our tests shown below, and\nshould be done for any other element that parses the HTTP response.\n\nIn URLRewritingModifier.modify(HTTPSamplerBase, String) [line: 121]\n\n sampler.getArguments().removeArgument(getArgumentName()); [line: 129]\n sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value,\nfalse)); [line: 130]", "id": 80870, "time": "2005-10-06T22:10:30Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T22:10:30Z", "tags": [], "is_private": false}, {"count": 8, "attachment_id": 16612, "bug_id": 18359, "text": "Created attachment 16612\nExample patch of URL Re-Writing modifier", "id": 80871, "time": "2005-10-06T22:12:19Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-10-06T22:12:19Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 18359, "text": "Is there any further info that you guys need to fix this one?  We've been having\nto patch JMeter to work around this issue.", "id": 83094, "time": "2005-12-01T21:15:58Z", "creator": "myphsto@hotmail.com", "creation_time": "2005-12-01T21:15:58Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 18359, "text": "Did you intend for the patch to be a jar file that includes two class files only?\n\nAny chance of a test case?", "id": 83113, "time": "2005-12-02T01:42:51Z", "creator": "sebb@apache.org", "creation_time": "2005-12-02T01:42:51Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 18359, "text": "Created attachment 17565\nExtended unit test that shows the double html decode bug\n\nThis unit test clearly shows that elements that parse the HTML response are URL\ndecoding the already URL decoded text and causing an issue with base64 values\nin the HTML.", "id": 85311, "time": "2006-02-01T16:54:41Z", "creator": "myphsto@hotmail.com", "creation_time": "2006-02-01T16:54:41Z", "is_private": false, "attachment_id": 17565}, {"count": 12, "tags": [], "bug_id": 18359, "attachment_id": null, "is_private": false, "id": 86743, "time": "2006-03-12T23:21:56Z", "creator": "sebb@apache.org", "creation_time": "2006-03-12T23:21:56Z", "text": "I've checked in a fix for the URL Rewriting modifier and the HTML Link Parser -\nthey should no longer double-encode the information extracted from the HTML.\n\nHowever, I don't think these changes will fix the Proxy recording problem.\n\nPlease check if the nightly (2-1.20060312 or later) has solved the other problems."}, {"count": 13, "tags": [], "creator": "myphsto@hotmail.com", "text": "I just tested out 2-1.20060313 and both the URL Rewriting modifier and the HTML\nLink Parser are working in my jmeter tests that were having the issue.\n\nI haven't had a chance to test the proxy recording, but the double encoding can\nbe avoided since during playback of a captured parameter you can switch the URL\nencoding of post parameters.", "id": 86804, "time": "2006-03-14T19:57:04Z", "bug_id": 18359, "creation_time": "2006-03-14T19:57:04Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "myphsto@hotmail.com", "text": "I've tested the proxy recording and it doesn't seem to be a issue.  Parameters \nthat are captured are URL encoded, as long as during playback of the sample \nyou don't tick the \"ENCODE?\" box everything works.  I'd say we can close the \nbook on this one.", "id": 88176, "time": "2006-04-17T21:40:39Z", "bug_id": 18359, "creation_time": "2006-04-17T21:40:39Z", "is_private": false, "attachment_id": null}]
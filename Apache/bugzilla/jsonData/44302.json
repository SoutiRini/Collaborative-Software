[{"count": 0, "tags": [], "text": "When using an ldapi:// (local socket) url apache issues the error [LDAP:\nldap_simple_bind_s() failed][Can't contact LDAP server]. I'm not familiar with\nlibldap API, but it seems ldap_simple_bind_s cannot accept a filename as hostname.\n\nPS. The output of the URL parsing is (and it doesn't work even if %2f were\nreplaced with '/'):\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(870): [28272] auth_ldap url\nparse: `ldapi://%2fvar%2frun%2fldapi/ou=Users,dc=lan'\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(879): [28272] auth_ldap url\nparse: Host: /var/run/ldapi\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(881): [28272] auth_ldap url\nparse: Port: 389\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(883): [28272] auth_ldap url\nparse: DN: ou=Users,dc=lan\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(885): [28272] auth_ldap url\nparse: attrib: (null)\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(887): [28272] auth_ldap url\nparse: scope: base\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(892): [28272] auth_ldap url\nparse: filter: (null)\n[Sun Jan 27 17:17:18 2008] [debug] mod_authnz_ldap.c(972): LDAP: auth_ldap not\nusing SSL connections", "attachment_id": null, "id": 113167, "creator": "n.mavrogiannopoulos@gmail.com", "time": "2008-01-27T07:31:46Z", "bug_id": 44302, "creation_time": "2008-01-27T07:31:46Z", "is_private": false}, {"count": 1, "tags": [], "text": "I'm not sure that this is still an issue.  Using Apache HTTPD 2.2.16 under Ubuntu 10.10, ldapi:/// URLs are working for me.  However, even if this is also working for everyone else, the documentation should be updated to reflect this before this bug is closed, as I can't find any references to this either way in the documentation.\n\nOtherwise, per some of the comments in bug 48505, it seems that maybe the various LDAP URL support is provided by the OS rather than Apache, which could explain why this is working for me but not the original reporter, while we're both using an Apache 2.2 release.  (If it is a function of the OS rather than Apache, please document this as well.)", "attachment_id": null, "bug_id": 44302, "id": 142974, "time": "2010-12-28T16:15:00Z", "creator": "bugs@mark.ziesemer.com", "creation_time": "2010-12-28T16:15:00Z", "is_private": false}, {"count": 2, "tags": [], "creator": "stephane.chazelas@gmail.com", "attachment_id": null, "text": "Confirmed with apache 2.22 and apr-util 1.3.12 (from ubuntu 12.04). ldapi:// URLs don't work. Worse, if you enter ldapi:///, it is (silently) treated as ldap://localhost:389, that is, the connection is still done over TCP to localhost.\n\nYou can't use \"EXTERNAL\" type authentication (whereby the ldap server can verify the user name that contacts it from the unix domain socket).\n\nTo verify, enter a ldapi://%2fvar%2frun%2fslapd%2dldapi/... URL and see the wrong debug output as in Nikos' case, or enter ldapi:/// and see (with a network capture or looking at netstat) that it's doing a TCP connection to port 389. You could also disable TCP in slapd to verify that it stops working.", "id": 165212, "time": "2013-02-12T19:11:33Z", "bug_id": 44302, "creation_time": "2013-02-12T19:11:33Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 44302, "attachment_id": null, "id": 165216, "time": "2013-02-12T20:59:47Z", "creator": "stephane.chazelas@gmail.com", "creation_time": "2013-02-12T20:59:47Z", "is_private": false, "text": "I've checked the code of various versions of apache and apr-util including the latest ones (2.4.3 / 1.5.1).\n\nWhile the newer apr-util has a new apr_ldap_is_ldapi_url function, it is not used by mod_authnz_ldap.\n\napr_ldap_url_parse_ext, which is called by mod_auth_ldap_parse_url, does extract the URL scheme (and explicitely cares for ldapi, though parses the socket path as a host:port and stores it in a field called lud_host), however mod_authnz_ldap doesn't make use of it. It just compares the start of the URL by itself with \"ldaps\" and assumes \"ldap\" if it doesn't match which explains why ldapi:// URLs are treated as ldap://localhost ones (default host is \"localhost\" for \"ldap\")."}, {"count": 4, "tags": [], "bug_id": 44302, "text": "Created attachment 30254\nhttpd patch to implement ldapi and ldap_initialize api\n\nI had to implement ldapi in my installation, i see ldap_initialize is not supported in apr-util.", "id": 167041, "time": "2013-05-05T17:52:13Z", "creator": "info@simonecaruso.com", "creation_time": "2013-05-05T17:52:13Z", "is_private": false, "attachment_id": 30254}, {"count": 5, "tags": [], "bug_id": 44302, "text": "Created attachment 30255\nChanges to apr-util 1.5.x branch\n\nChanges i made to apr-util 1.5.x branch", "id": 167042, "time": "2013-05-05T17:53:06Z", "creator": "info@simonecaruso.com", "creation_time": "2013-05-05T17:53:06Z", "is_private": false, "attachment_id": 30255}, {"count": 6, "tags": [], "text": "Created attachment 30256\nChanges to apr-util 1.5.x branch", "attachment_id": 30256, "bug_id": 44302, "id": 167048, "time": "2013-05-05T22:37:30Z", "creator": "info@simonecaruso.com", "creation_time": "2013-05-05T22:37:30Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 44302, "attachment_id": 30254, "id": 171895, "time": "2013-12-23T13:16:40Z", "creator": "christophe.jaillet@wanadoo.fr", "creation_time": "2013-12-23T13:16:40Z", "is_private": false, "text": "Comment on attachment 30254\nhttpd patch to implement ldapi and ldap_initialize api\n\n>diff --git a/include/util_ldap.h b/include/util_ldap.h\n>index 3d5faed..ede304f 100644\n>--- a/include/util_ldap.h\n>+++ b/include/util_ldap.h\n>@@ -106,7 +106,7 @@ typedef struct util_ldap_connection_t {\n> #if APR_HAS_THREADS\n>     apr_thread_mutex_t *lock;           /* Lock to indicate this connection is in use */\n> #endif\n>-\n>+    const char *url;\n>     const char *host;                   /* Name of the LDAP server (or space separated list) */\n>     int port;                           /* Port of the LDAP server */\n>     deref_options deref;                /* how to handle alias dereferening */\n>@@ -237,7 +237,7 @@ APR_DECLARE_OPTIONAL_FN(apr_status_t,uldap_connection_unbind,(void *param));\n>  *                                                           const char *binddn, const char *bindpw, deref_options deref,\n>  *                                                           int netscapessl, int starttls)\n>  */\n>-APR_DECLARE_OPTIONAL_FN(util_ldap_connection_t *,uldap_connection_find,(request_rec *r, const char *host, int port,\n>+APR_DECLARE_OPTIONAL_FN(util_ldap_connection_t *,uldap_connection_find,(request_rec *r, const char *url, const char *host, int port,\n>                                                   const char *binddn, const char *bindpw, deref_options deref,\n>                                                   int secure));\n> \n>diff --git a/modules/aaa/mod_authnz_ldap.c b/modules/aaa/mod_authnz_ldap.c\n>index b7b132e..fc35993 100644\n>--- a/modules/aaa/mod_authnz_ldap.c\n>+++ b/modules/aaa/mod_authnz_ldap.c\n>@@ -434,7 +434,7 @@ static util_ldap_connection_t *get_connection_for_authz(request_rec *r, enum aut\n>             bindpw = req->password;\n>     }\n> \n>-    return util_ldap_connection_find(r, sec->host, sec->port,\n>+    return util_ldap_connection_find(r, (const char *)sec->url, sec->host, sec->port,\n>                                      binddn, bindpw,\n>                                      sec->deref, sec->secure);\n> }\n>@@ -487,7 +487,7 @@ static authn_status authn_ldap_check_password(request_rec *r, const char *user,\n>             binddn = ldap_determine_binddn(r, user);\n>         }\n> \n>-        ldc = util_ldap_connection_find(r, sec->host, sec->port,\n>+        ldc = util_ldap_connection_find(r, (const char *)sec->url, sec->host, sec->port,\n>                                        binddn, bindpw,\n>                                        sec->deref, sec->secure);\n>     }\n>@@ -1406,6 +1406,8 @@ static const char *mod_auth_ldap_parse_url(cmd_parms *cmd,\n>         sec->port = urld->lud_port? urld->lud_port : LDAP_PORT;\n>     }\n> \n>+    sec->url = apr_pstrndup(cmd->pool, sec->url, strrchr((char *)url, '/') - url);\n>+\n>     sec->have_ldap_url = 1;\n> \n>     ap_log_error(APLOG_MARK, APLOG_TRACE1, 0, cmd->server,\n>diff --git a/modules/ldap/util_ldap.c b/modules/ldap/util_ldap.c\n>index dc08dd4..f0f099f 100644\n>--- a/modules/ldap/util_ldap.c\n>+++ b/modules/ldap/util_ldap.c\n>@@ -291,7 +291,8 @@ static int uldap_connection_init(request_rec *r,\n>      * some hosts with ports and some without. All hosts which do not\n>      * specify a port will use the default port.\n>      */\n>-    apr_ldap_init(r->pool, &(ldc->ldap),\n>+\n>+    apr_ldap_init(r->pool, &(ldc->ldap), ldc->url,\n>                   ldc->host,\n>                   APR_LDAP_SSL == ldc->secure ? LDAPS_PORT : LDAP_PORT,\n>                   secure, &(result));\n>@@ -686,7 +687,7 @@ static int compare_client_certs(apr_array_header_t *srcs,\n>  * a pointer to the existing ldc structure will be returned.\n>  */\n> static util_ldap_connection_t *\n>-            uldap_connection_find(request_rec *r,\n>+            uldap_connection_find(request_rec *r, const char *url,\n>                                   const char *host, int port,\n>                                   const char *binddn, const char *bindpw,\n>                                   deref_options deref, int secure)\n>@@ -828,6 +829,7 @@ static util_ldap_connection_t *\n>         apr_thread_mutex_lock(l->lock);\n> #endif\n>         l->bound = 0;\n>+        l->url = url;\n>         l->host = apr_pstrdup(l->pool, host);\n>         l->port = port;\n>         l->deref = deref;"}]
[{"count": 0, "text": "I am trying to implement my own JAAS LoginModule.\n\nI configure server.xml\n<Realm className=\"org.apache.catalina.realm.JAASRealm\"\n                 debug=\"99\" \n                 appName=\"NadejJAAS\" \n                 userClassName=\"com.micropole.jaas.memory.UserPrincipal\"\n                 roleClassName=\"com.micropole.jaas.memory.RolePrincipal\"\n                 />\n                 \nMy LoginModule works fine until i need to populate Principal in the commit() \nmethod.\n\nKind of result:\n\n\t\t[MemoryLoginModule] user entered user name: testUser\n\t\t[MemoryLoginModule] user entered password: testPassword\n\t\t[MemoryLoginModule] authentication succeeded\n\nAnd finnaly i get a 403 : forbidden access to ressource ....\n\nI find an explication in the following method of RealmBase.hasRole(Principal \nprincipal, String role) \n\nIn fact, i populate with my own Principal (RolePrincipal) but\nTomcat rejects my user because it is waiting for a GenericPrincipal.\n \nJAASRealm seems to use public boolean hasRole(Principal principal, String role) \ninherited from RealmBase with the following code :\n\npublic boolean hasRole(Principal principal, String role) {\n\n        // Should be overriten in JAASRealm - to avoid pretty inefficient \nconversions\n        if ((principal == null) || (role == null) ||\n            !(principal instanceof GenericPrincipal))\n            return (false);\n\n        GenericPrincipal gp = (GenericPrincipal) principal;\n        if (!(gp.getRealm() == this)) {\n            log.debug(\"Different realm \" + this + \" \" + gp.getRealm());//    \nreturn (false);\n        }\n        boolean result = gp.hasRole(role);\n        if (log.isDebugEnabled()) {\n            String name = principal.getName();\n            if (result)\n                log.debug(sm.getString(\"realmBase.hasRoleSuccess\", name, role));\n            else\n                log.debug(sm.getString(\"realmBase.hasRoleFailure\", name, role));\n        }\n        return (result);\n\n    }\n    \n Two things :\n 1 - the comment says that it should be re-implemented in JAASRealm but it is \nnot done.\n 2 - This implementation depends on a GenericPrincipal class specific to \nCatalina packages.\n \n Maybe somebody is working about this JAASRealm and can help me to be able to \nwrite a LoginModule that is not compiling depend of Catalina but usable with \nCatalina.   \n \n A bonus question : why using two principals in server.xml realm tag if we are \nusing in one code?\n \n It seems there is an error in the manual (Realm Element Attributes Table seems \nto talk about MemoryRealm instead of JAASRealm).", "bug_id": 26236, "attachment_id": null, "id": 50716, "time": "2004-01-19T09:00:29Z", "creator": "eburriel@yahoo.com", "creation_time": "2004-01-19T09:00:29Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 26236, "text": "Well... I've tried to reproduce the bug... I've created my own LoginModule,  \nand two classes wich implements de java.security.Principal interface (one for  \nthe user principal and other to the roles principals) just like the bug  \ndescription said, and it worked fine!  \n  \nI also couldn't figure out how the method hasRole() in the RealmBase class can  \nbe related to this problem because the method createPrincipal() (which is  \ncalled by the authenticate() method in the JAASRealm class) creates a  \nGenericPrincipal, as expected by the hasRole() method.  \n  \nI think the problem can be related to the LoginModule of your application,  \nmaybe it's not returning any RolePrincipal or something like that. \n \nI'll change the bug status to INVALID, if you got any new information, you can \nreopen it.  ", "count": 1, "id": 51400, "time": "2004-01-29T15:15:18Z", "creator": "carlows@unerj.br", "creation_time": "2004-01-29T15:15:18Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 40145, "is_private": false, "text": "According to the Javadocs: %r - Used to output the number of milliseconds \nelapsed since the start of the application until the creation of the logging \nevent.\n\nIn practice the initial time is actually initialised from when the \nPatternLayout class is loaded and the static initialisers are fired.\n\nConsider the following rather contrived and paraphrased example:\n\npublic class MyClass\n{\n static final Logger logger = Logger.getLogger(MyClass.class);\n\n public static void main(String[] args) throws Exception\n {\n  BasicConfigurator.configure();\n\n  Thread.sleep(10 * 1000);\n\n  logger.info(\"Hello, World!\");\n }\n}\n\nThe time reported at Hello, World is actually very close to zero.\n\nAFAIK it seems to be practically impossible to know the app/JVM launch-time, \nnonetheless it could be better.\n\nSolutions I guess would be for the configuration call or, probably better, one \nof the Logger.getLogger() calls initialised the time or forces load of the \nPatternLayout class-load?\n\nA workaround is to log something early and of course many apps do this so it \nisn't a noted problem.\n\nIn practice this is probably not unique to any platform or possibly even \nversion of Log4J.\n\nDo any of the other implementations suffer from the same problem.", "id": 91739, "time": "2006-07-31T17:09:32Z", "creator": "mark.atwell@jpmorgan.com", "creation_time": "2006-07-31T17:09:32Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 40145, "attachment_id": null, "id": 91797, "time": "2006-08-02T03:34:08Z", "creator": "carnold@apache.org", "creation_time": "2006-08-02T03:34:08Z", "is_private": false, "text": "log4cxx captures the time of the APR initializer which should occur during static initialization so it should \nbe very close to application start time.\n\nAt this point, the safest thing to do with log4j 1.2 would be to change the documentation to match the \nestablished behavior which I have done for both log4j 1.2 and 1.3.  However, if someone wants to submit \na patch for log4j 1.3 that implements the previously documented behavior, I'd be open to committing it.\n\nCommited in rev 427875 and 427876 (1.2 and trunk, respectively)."}]
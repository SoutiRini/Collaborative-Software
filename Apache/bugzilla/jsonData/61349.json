[{"count": 0, "tags": [], "creator": "tallison@mitre.org", "is_private": false, "id": 200063, "creation_time": "2017-07-26T18:50:53Z", "time": "2017-07-26T18:50:53Z", "bug_id": 61349, "text": "Now that I've added sanity checks for byte[] allocation in EMF/WMF, fuzzing is finding other areas where we might want to do this -- see stacktrace below.\n\nFor EMF/WMF, I set some arbitrary max lengths...should we do this more throughout the codebase to prevent ooms on corrupt files? \n\n\nYet another OOM:\n\nCaused by: java.lang.OutOfMemoryError: Java heap space\n\tat java.lang.Object.clone(Native Method)\n\tat org.apache.poi.ddf.EscherComplexProperty.<init>(EscherComplexProperty.java:46)\n\tat org.apache.poi.ddf.EscherPropertyFactory.createProperties(EscherPropertyFactory.java:69)\n\tat org.apache.poi.ddf.AbstractEscherOptRecord.fillFields(AbstractEscherOptRecord.java:54)\n\tat org.apache.poi.ddf.EscherContainerRecord.fillFields(EscherContainerRecord.java:81)\n\tat org.apache.poi.ddf.EscherContainerRecord.fillFields(EscherContainerRecord.java:81)\n\tat org.apache.poi.hwpf.model.EscherRecordHolder.fillEscherRecords(EscherRecordHolder.java:56)\n\tat org.apache.poi.hwpf.model.EscherRecordHolder.<init>(EscherRecordHolder.java:45)\n\tat org.apache.poi.hwpf.HWPFDocument.<init>(HWPFDocument.java:280)", "attachment_id": null}, {"count": 1, "tags": [], "creator": "tallison@mitre.org", "text": "r1809169 initial commit.\n\nI tried to avoid checks in \"serialize()\" methods on the theory that the object has already been collected, it should be good.\n\nI also avoided most checks where there was a copy of an existing array.\n\nWe'll likely have to increase some of the thresholds, and I look forward to running these mods against our regression sets.", "id": 201043, "time": "2017-09-21T14:56:03Z", "bug_id": 61349, "creation_time": "2017-09-21T14:56:03Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "text": "Should we be making better use of the transient modifier when allocating performance-related data structures?", "id": 201045, "time": "2017-09-21T15:40:09Z", "bug_id": 61349, "creation_time": "2017-09-21T15:40:09Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 61349, "is_private": false, "id": 201104, "time": "2017-09-24T05:58:27Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-09-24T05:58:27Z", "tags": [], "text": "I ran a regression test run with the new limitations. \n\nOut of 1.1 million documents only 80 differences occurred in 4.0.0 compared to 3.17.\n \nOut of these 19 were OOMs that probably happened before as well.\n\nThus only 61 documents fail with the new limit. \n\nI saw that almost all of them are in the 1-2MB range, a few try to allocate a bit more than 2MB, so if we raise the limit to 2.5MB, we should be safe for almost all documents of this corpus.\n\nSee http://people.apache.org/~centic/poi_regression/reportsAll/index317to400SNAPSHOT.html for details."}, {"count": 4, "tags": [], "text": "Wow.  Thank you, Dominik!  I'm surprised there weren't more problems.\n\nIn r1809623, I bumped the following to 10MB:\n\nPPDrawing\nPPDrawingGroup\nPlexOfCps\nExOleObjStg\nListLevel\nSoundData\n\nI bumped the following to 100MB:\nEscherBlipRecord\n\nThere are still a few records with some pretty big sizes, but, that's the point of this fix, e.g.: 536,871,012, 2,013,296,702, 1,451,486,230  :)\n\nThank you, again, Dominik!", "is_private": false, "id": 201125, "creator": "tallison@mitre.org", "time": "2017-09-25T12:53:36Z", "bug_id": 61349, "creation_time": "2017-09-25T12:53:36Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "I think this is mostly fixed now, new items can be handled in separate issues if necessary.", "id": 202996, "time": "2018-01-01T14:59:39Z", "bug_id": 61349, "creation_time": "2018-01-01T14:59:39Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Tomcat Native 1.2.0 is unusable for HTTPS with Tomcat 7, 8 due to missing APIs on java side.\n\nApparently it can be used for plain HTTP and AJP, as other Tomcat 7 tests (using plain HTTP) pass successfully.\n\nTo reproduce:\n===============\n1) Run org.apache.tomcat.util.net.TestSsl test standalone with Tomcat 7, by placing the following line into build.properties\n\ntest.entry=org.apache.tomcat.util.net.TestSsl\n\nI was testing Tomcat 7 trunk (at r1711498)\n\n2) I was running Ant with JAVA_HOME=JDK 8u66 (32-bit) on Windows 7.\n\nNotes:\n=========\n1) Ant build with this single test was running for 17 minutes. Two tests were run\n\n- [testSimpleSsl] printed NoSuchMethodError and hung for 17 minutes\n- [testKeyPass] crashed the JVM.\n\n2) The \"TEST-org.apache.tomcat.util.net.TestSsl.APR.txt\" after JVM crash is effectively empty.\n\nYou need to catch console output of Ant by redirecting it into a file. The console output has NoSuchMethodError and other messages.\n\nErrors:\n========\n1)\n    [junit] SEVERE: Failed to initialize connector [Connector[HTTP/1.1-auto-1]]\n    [junit] org.apache.catalina.LifecycleException: Failed to initialize component [Connector[HTTP/1.1-auto-1]]\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:106)\n    [junit]     at org.apache.catalina.core.StandardService.initInternal(StandardService.java:559)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     at org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:821)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n    [junit]     at org.apache.catalina.startup.Tomcat.start(Tomcat.java:339)\n    [junit]     at org.apache.catalina.startup.TomcatBaseTest$TomcatWithFastSessionIDs.start(TomcatBaseTest.java:793)\n    [junit]     at org.apache.tomcat.util.net.TestSsl.testSimpleSsl(TestSsl.java:61)\n...\n    [junit] Caused by: java.lang.NoSuchMethodError: sniCallBack\n    [junit]     at org.apache.tomcat.jni.SSLContext.make(Native Method)\n    [junit]     at org.apache.tomcat.util.net.AprEndpoint.bind(AprEndpoint.java:573)\n    [junit]     at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:651)\n    [junit]     at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:434)\n    [junit]     at org.apache.catalina.connector.Connector.initInternal(Connector.java:978)\n    [junit]     at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n    [junit]     ... 33 more\n\n2) From JVM crash file:\n\n[[[\nStack: [0x17440000,0x17490000],  sp=0x1748f504,  free space=317k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nV  [jvm.dll+0xe26df]\nC  [tcnative-1.dll+0x9d73]\nC  [tcnative-1.dll+0xc905d]\n\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  org.apache.tomcat.jni.SSLSocket.handshake(J)I+0\nj  org.apache.tomcat.util.net.AprEndpoint.setSocketOptions(J)Z+106\nj  org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run()V+34\nj  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+95\nj  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5\nj  org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run()V+4\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub\n]]]\n\n\nSource code\n============\nFrom quick look into native implementation of SSLContext.make() (sslcontext.c),\n\n[[[\n    /* Cache Java side SNI callback if not already cached */\n    if (ssl_context_class == NULL) {\n        ssl_context_class = (*e)->NewGlobalRef(e, o);\n        sni_java_callback = (*e)->GetStaticMethodID(e, ssl_context_class,\n                                                    \"sniCallBack\", \"(JLjava/lang/String;)J\");\n    }\n]]]\n\n1) There is no test for success of GetStaticMethodID() call.\n2) There is a race condition. Testing that ssl_context_class is not NULL does not mean that sni_java_callback has already been initialized.\n\nAs stacktrace above shows, SSLContext.make() is called from AprEndpoint.bind(), so a race here is unlikely unless someone initializes several connectors concurrently at the same time. It explains the JVM crash in the tests, as the first call results in NoSuchMethodError, but the second call succeeds with ssl_context_class check and crashes later.", "id": 186125, "time": "2015-10-31T01:47:07Z", "bug_id": 58566, "creation_time": "2015-10-31T01:47:07Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58566, "attachment_id": 33235, "text": "Created attachment 33235\nStdout/Stderr output of Apache Ant\n\nAnt output. Testing Tomcat 7 trunk (at r1711498) with JDK 8u66", "id": 186126, "time": "2015-10-31T01:55:29Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-10-31T01:55:29Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58566, "attachment_id": 33236, "text": "Created attachment 33236\nJVM crash log", "id": 186127, "time": "2015-10-31T02:01:48Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-10-31T02:01:48Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58566, "attachment_id": null, "id": 186134, "creation_time": "2015-10-31T18:52:28Z", "time": "2015-10-31T18:52:28Z", "creator": "markt@apache.org", "text": "I am not concerned about the potential race condition here.\n\nIn Tomcat, starting of multiple connectors is always single threaded.\n\nIn theory, connectors could be started in parallel via the embedded API but even then the likelihood of a race is low and, as it happens, the fix for the method not being present should prevent any crashes if the race occurs.\n\nI have a fix for this that enables 1.2.x to work with current 7.0.x trunk. I'll be committing that fix shortly.", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58566, "attachment_id": null, "id": 186135, "creation_time": "2015-10-31T19:03:00Z", "time": "2015-10-31T19:03:00Z", "creator": "markt@apache.org", "text": "Fixed in trunk for 1.2.1", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 58566, "text": "(In reply to Mark Thomas from comment #3)\n> I am not concerned about the potential race condition here.\n> \n> In Tomcat, starting of multiple connectors is always single threaded.\n> \n> In theory, connectors could be started in parallel via the embedded API but\n> even then the likelihood of a race is low and, as it happens, the fix for\n> the method not being present should prevent any crashes if the race occurs.\n\nThere is also JMX API, StandardService.addConnector(...). There is no indication in java code that SSLContext.make() should be called by a single thread only (e.g. method not marked as synchronized).\n\nThere is a method that is certainly called only once - the method called by APRLifecycleListener, SSL.initialize(). I wonder whether this code can be moved there.\n\nI agree that this is not a stopper. Usually connectors have <Connector bindOnInit=\"true\"/> so there is a delay between initialization of all connectors and their start. The worst case - serving several requests without SNI - won't happen because all connectors will be initialized before starting them.\n\nBTW, in sslcontext.c / SSLContext.make():\n\n    /* Cache the byte[].class for performance reasons */\n    clazz = (*e)->FindClass(e, \"[B\");\n    byteArrayClass = (jclass) (*e)->NewGlobalRef(e, clazz);\n\nThe same lookup/caching of \"[B\" is present in ssl.c / SSL.initialize().\n\n\nReview of r1711667:\n(Comment typo already fixed by r1711675)\n\n1. sslcontext.c / SSLContext.make(..)\n\n>        /* Older Tomcat versions may not have this static method */\n>        if ( JNI_TRUE == (*e)->ExceptionCheck(e) ) {\n>            (*e)->ExceptionClear(e);\n>        }\n\nOther places (info.c, misc.c) just call\n         if ((*e)->ExceptionCheck(e)) {\n\n2. sslcontext.c / ssl_callback_ServerNameIndication()\n\n> if (sni_java_callback != 0) {\n\n1) sni_java_callback is jmethodID which is a pointer to a structure. So != NULL\n\n2) If callback call is skipped, new_ssl_context variable is left uninitialized (random value) and \"if (original_ssl_context != new_ssl_context) {\" check is satisfied and goes on accessing random memory.\n\n3) If sni_java_callback is unavailable, this method should return early. It does a lot of unneeded work.\n\n4) Java method SSLContext.sniCallBack() implemented in Tomcat trunk by default returns 0\n\nAs such,  \"if (original_ssl_context != new_ssl_context) {\"  compares not-null pointer with 0 returned by the method.\n\n5)\n> SSL_set_SSL_CTX(ssl, J2P(new_ssl_context, SSL_CTX *));\n\nIs \"new_ssl_context\" here a pointer to SSL_CTX ?\n\nI cannot confirm it. From java code it looks that it is a pointer to tcn_ssl_ctxt_t structure, which field \"ctx\" is (SSL_CTX*).\n\n\nLooking at Tomcat trunk code, the method \nin APREndpoint.bind():\n> sslHostConfig.setOpenSslContext(Long.valueOf(ctx));\n\nctx is a pointer to tcn_ssl_ctxt_t structure, not a SSL_CTX pointer.\n\n6) In SSLHostConfig.java in Tomcat trunk:\n\n    public Object getOpenSslContext() {\n        return openSslContext;\n    }\n\ns/Object/Long/, to match setter method and to avoid class casts later.", "id": 186165, "time": "2015-11-02T03:19:20Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-11-02T03:19:20Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 58566, "text": "Review comments all addressed.", "id": 186196, "time": "2015-11-02T13:59:37Z", "creator": "markt@apache.org", "creation_time": "2015-11-02T13:59:37Z", "is_private": false, "attachment_id": null}]
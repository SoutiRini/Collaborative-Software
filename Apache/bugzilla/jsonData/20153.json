[{"count": 0, "tags": [], "creator": "s.jain@gtisoft.com", "attachment_id": null, "is_private": false, "id": 37599, "time": "2003-05-22T15:00:36Z", "bug_id": 20153, "creation_time": "2003-05-22T15:00:36Z", "text": "The <zip> / <unzip> task have last modified dates of the files offset by an \nhour. The <zip> task records the last modified date an hour older than the \noriginal file. The <unzip> task unzips the files in the zip with last modified \ndate that is an hour newer than the files inside zip."}, {"count": 1, "tags": [], "bug_id": 20153, "is_private": false, "id": 37616, "creation_time": "2003-05-22T16:50:37Z", "time": "2003-05-22T16:50:37Z", "creator": "stevel@apache.org", "text": "tell us about your system. What TZ are you in? Are you working with a remote\nfile server, or is all this exhbited on your local FS?", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 20153, "text": "Yes, it might be related to TZ (Time-Zone). Although, I could not figure out \nwhat it is.\nWhen I zip the file, the source files are located on remote file-server (Win2K-\nserver) and the drive is mapped on my machine (Win2K).\nI checked the TZ on both and they are both (GMT-06:00) Central Time (US & \nCanada). I checked the clocks on both and they are in sync. So I dont, where \nelse to look ???\nIf its not really a bug, please mark this report as \"Invalid\". I will find my \nanswer from mailing list.\nThanks for help.", "id": 37618, "time": "2003-05-22T17:15:32Z", "creator": "s.jain@gtisoft.com", "creation_time": "2003-05-22T17:15:32Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "text": "I wouldnt say its invalid, just 'interesting'. Usually such clock issues do come\nabout from the two systems being off in time (like do they both think they are\nin summer time?), and I guess ant and Java is getting confused. \n\n", "count": 3, "id": 37630, "time": "2003-05-22T18:56:14Z", "bug_id": 20153, "creation_time": "2003-05-22T18:56:14Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "s.jain@gtisoft.com", "text": "I checked to make sure that both machines have \"day light savings\" turned ON.\nAnother thing that comes to my mind is if the problem is related to timezone,\nit should affect <copy> task also, not just the zip/unzip task. As I tested, the\ncopy task works fine (of course with preservelastmodified=\"true\").", "id": 37636, "time": "2003-05-22T20:23:12Z", "bug_id": 20153, "creation_time": "2003-05-22T20:23:12Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 20153, "is_private": false, "id": 37681, "creation_time": "2003-05-23T17:11:28Z", "time": "2003-05-23T17:11:28Z", "creator": "s.jain@gtisoft.com", "text": "I have another interesting observation which (kind of) makes sense.\nUntill now, I was zipping files that were older since the last\n\"day-light-savings\".\nNow my collection of files have some files that are newer than that\ndate. When I zip all files together, the files that are created after\nthe last \"day-light-saving\" instant have proper date, while the ones\nthat were created before have an hour off.\nDoes this mean ant/java does not handle day-light-saving very well, or\ndoes it mean Windows does not provide enough info for java to be able\nto figure this out ?", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 20153, "is_private": false, "text": "I dont know where the problem lies. With a combination of local+remote systems,\ntz transition and the many layers of code, who knows. \n\nNow, if you want to track down the problem, I'm sure we will accept a bug fix\nthat you can find. But it seems to me like this will be one of those\nnearly-impossible-to-replicate situations that are hard to deal with.\n\nMy recommendation is to leave this as a WONTFIX, do a clean build, and move on\n:( (recommendation 2 is everyone moves to GMT, uses time_t as a clock and does\naway with leap seconds, but that is likely to encounter opposition from the rest\nof humanity)", "id": 37690, "time": "2003-05-23T20:58:41Z", "creator": "stevel@apache.org", "creation_time": "2003-05-23T20:58:41Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 20153, "is_private": false, "id": 38028, "creation_time": "2003-05-30T08:08:29Z", "time": "2003-05-30T08:08:29Z", "creator": "bodewig@apache.org", "text": "Is it only <zip> that is getting the wrong time for \"old\" files or does, say <tar>\nsuffer from the same problem?", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 20153, "text": "I just tried - all similar tasks zip/tar/war have this exactly same problem.\nAs far as I guess, it affects files created before the last day-light.\n\n\"First Sunday in April\" / \"Last Sunday in October\".", "id": 38047, "time": "2003-05-30T14:06:06Z", "creator": "s.jain@gtisoft.com", "creation_time": "2003-05-30T14:06:06Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 20153, "is_private": false, "text": "I raised the severity to major and set version to 1.6.1, since this bug leads to\na serious surprising behaviour in following scenario:\n\n1. Create or get a new Zip-File e.g. created with WinZip with entries from 11:30 h\n2. extract it with the unzip task at 11.45 h\n    ----> the entries (having 11:30 h in Zip file) have now time 12:30 h in the\nfile system\n3. modify one of these entries (new date 11:46 h)\n4. Update the zip file with the zip task\n    ---> this fails, since Zip task means that entry in Zip file is newer (12:30 h)\n\n\nIch checked with Winzip as reference, which has no such surprising behaviour at all.\n\nMy System is Windows XP Pro, running in Germany, with Daylight saving on.\n", "id": 61441, "time": "2004-08-02T10:11:22Z", "creator": "Peter.Schaich@mind8.com", "creation_time": "2004-08-02T10:11:22Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "Peter.Schaich@mind8.com", "attachment_id": null, "is_private": false, "id": 61446, "time": "2004-08-02T11:42:41Z", "bug_id": 20153, "creation_time": "2004-08-02T11:42:41Z", "text": "Ok, I rechecked the sequence, and it was the following\n\n1. Zip files with the Zip Task.\n2. Unzip with Unzip task\n3. Zip with Winzip\n4. Unzip with Unzip Task\n5  Update Zip it with Zip Task"}, {"count": 11, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 118452, "time": "2008-07-10T05:35:32Z", "bug_id": 20153, "creation_time": "2008-07-10T05:35:32Z", "tags": [], "text": "using\n\n<project>\n  <target name=\"zip\">\n    <mkdir dir=\"test\"/>\n    <touch file=\"test/test.txt\"/>\n    <zip destfile=\"test.zip\" basedir=\".\" includes=\"test/\"/>\n    <delete dir=\"test\"/>\n  </target>\n  <target name=\"unzip\">\n    <unzip src=\"test.zip\" dest=\".\"/>\n  </target>\n</project>\n\non a German WinXP during daylight saving time with Ant 1.7.1 creates the exact same timestamps inside the zip and when unzipped that the created files originally had.    \n\nIf I add\n\n    <touch file=\"test/winter.txt\" datetime=\"03/01/2008 11:30 am\"/>\n\nWindows \"compressed folder\" shows the correct time, but unzip creates a file time of 0:30 pm.  I'll need to investigate on a different OS as well."}, {"count": 12, "tags": [], "bug_id": 20153, "text": "well, unzip is consistent with touch, since touch also created the file as 0:30 pm.\n", "id": 118541, "time": "2008-07-11T01:28:57Z", "creator": "bodewig@apache.org", "creation_time": "2008-07-11T01:28:57Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 20153, "is_private": false, "id": 118542, "creation_time": "2008-07-11T02:24:44Z", "time": "2008-07-11T02:24:44Z", "creator": "bodewig@apache.org", "text": "OK, I'm afraid it boils down to a documentation problem, this is what I'm going to add to the manual:\n\n--\n\nPlease note that different ZIP tools handle timestamps differently when it comes to applying timezone offset calculations of files.  Some ZIP libraries will store the timestamps as they've been read from the filesystem while others will modify the timestamps both when reading and writing the files to make all timestamps use the same timezone.  A ZIP archive created by one library may extract files with \"wrong timestamps\" when extracted by another library.\n\nAnt's ZIP classes use the same algorithm as the InfoZIP tools and zlib (timestamps get adjusted), Windows' \"compressed folders\" function and WinZIP don't change the timestamps.  This means that using the unzip task on files created by Windows' compressed folders function may create files with timestamps that are \"wrong\", the same is true if you use Windows' functions to extract an Ant generated ZIP archive.\n\n--\n\nWhile browsing the InfoZIP AppNotes I stumbled over the \"extended timestamp\" extra field which explicitly states that timestamps are in UTC.  I have no idea whether any library would use it if present, though.  My initial tests with InfoZIP's zip show no hint that it would be written.  I may experiment with using that extra field, this might lead to more consistency, but I'm afraid it wouldn't.", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 20153, "is_private": false, "id": 120317, "creation_time": "2008-09-03T07:54:46Z", "time": "2008-09-03T07:54:46Z", "creator": "bodewig@apache.org", "text": "even if we set the \"extended timestamp\" field, it wouldn#t get used on Windows so it wouldn't help.\n\nChanged to a documentation enhancement and marked as fixed.", "attachment_id": null}]
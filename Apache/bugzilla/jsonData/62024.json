[{"count": 0, "tags": [], "bug_id": 62024, "attachment_id": null, "text": "When we run our app for 2-3 hours we experience this leak related to our web sockets connections:\n\nOne instance of \"org.apache.coyote.AbstractProtocol$ConnectionHandler\" loaded by \"java.net.URLClassLoader @ 0x720029098\" occupies 2,153,196,128 (88.10%) bytes. The memory is accumulated in one instance of \"java.util.concurrent.ConcurrentHashMap$Node[]\" loaded by \"<system class loader>\".\n\nKeywords\norg.apache.coyote.AbstractProtocol$ConnectionHandler\njava.util.concurrent.ConcurrentHashMap$Node[]\njava.net.URLClassLoader @ 0x720029098\n\nPlease help", "id": 203381, "time": "2018-01-19T22:48:31Z", "creator": "serge@american-data.com", "creation_time": "2018-01-19T22:48:31Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 62024, "text": "There is nothing in this report that indicates a bug in Apache Tomcat and no information that might enable a developer to reproduce the behaviour you are seeing.\n\nBugzilla is not a support forum. Please use the Tomcat users mailing list to debug this issue. If that discussion concludes that there is a Tomcat bug, please re-open this issue and provide the necessary steps to reproduce the issue on a clean install of the latest release of any currently supported branch.\n\nhttp://tomcat.apache.org/lists.html#tomcat-users", "count": 1, "id": 203461, "time": "2018-01-24T16:30:34Z", "creator": "markt@apache.org", "creation_time": "2018-01-24T16:30:34Z", "is_private": false}, {"count": 2, "tags": [], "creator": "serge@american-data.com", "is_private": false, "text": "Mark\n\nLooks like it did not save my environment - Windows Server 2012\n\nAlso these bugs might be related to this one:\n\n*    [57546](https://bz.apache.org/bugzilla/show_bug.cgi?id=57546)\n*    [57750](https://bz.apache.org/bugzilla/show_bug.cgi?id=57750)\n\nThe 57546 bug looks very similar to what we are experiencing. We tested on Linux and so far we do not see the same behavior. Also this is our web socket code:\n\npackage ad.ecs.async.websocket;\n\nimport java.io.IOException;\nimport java.util.Arrays;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\nimport ad.common.Global;\nimport ad.ecs.async.AsyncEngine;\nimport ad.ecs.async.AsyncResponse;\nimport ad.ecs.async.AsyncType;\nimport ad.ecs.db.DatabaseEngine;\nimport ad.ecs.db.paradox.User;\nimport ad.ecs.security.engine.SecurityEngine;\n\n/**\n * @author Serge Perepel\n * @since Aug 23, 2017 12:23:32 PM\n */\n@ServerEndpoint(value = \"/asyncMsg\", encoders = AsyncResponseEncoder.class)\npublic class ECSAsync {\n    \n    @OnOpen\n    public void open(Session session) throws IOException{\n        session.getBasicRemote().sendText(\"Connection Established\");\n    }\n\n    @OnMessage\n    public String login(String sessionID, Session session) {\n    \tAsyncEngine.INSTANCE.wsConnect(session, sessionID);\n    \torg.hibernate.Session dbSession = DatabaseEngine.getSessionFactory().openSession();\n    \ttry {\n    \t\tint userID = SecurityEngine.INSTANCE.getUserIDBasedOnSessionID(sessionID);\n    \t\tUser user = (User) dbSession.get(User.class, userID);\n    \t\tif (user != null) {\n    \t\t\tif (user.getNextLogin() == 1) {\n    \t\t\t\tAsyncResponse response = new AsyncResponse();\n    \t\t\t\tresponse.setType(AsyncType.None);\n    \t\t\t\tresponse.setData(Arrays.asList(\"PASSWORD\"));\n    \t\t\t\tresponse.setObjData(\"PASSWORD\");\n    \t\t\t\tAsyncEngine.INSTANCE.addTransientResult(sessionID, response);\n    \t\t\t}\n    \t\t}\n    \t} finally {\n    \t\tdbSession.close();\n    \t}\n    \treturn \"ok\"; \n    }\n    \n    @OnClose \n    public void close(Session session, CloseReason reason) {\n        AsyncEngine.INSTANCE.wsDisconnect(session);\n    }\n    \n    @OnError\n    public void error(Session session, Throwable error) {\n        Global.INSTANCE.getLogHelper().exception(error);\n        //session.close(new CloseReason(closeCode, reasonPhrase));\n    }\n}\n\nFront end opens connection and sends invalid sessionID which causes\nthe line `AsyncEngine.INSTANCE.wsConnect(session, sessionID);` to throw exception and after that disconnect happens on the front end. At this point front end opens new connection and process goes into the loop. I'm assuming that the connection handler suppose to get freed after a disconnect happen. But it seems to accumulate. You can try this code and just replace code in the login method to always throw the exception. On the front end onDisconnect try to open new connection and send a random message to the web socket. Hopefully this will reproduce the issue for you.", "id": 203465, "time": "2018-01-24T18:17:47Z", "bug_id": 62024, "creation_time": "2018-01-24T18:17:47Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 62024, "attachment_id": null, "text": "We added the code to reproduce the leak:\n\nhttps://www.mail-archive.com/users@tomcat.apache.org/msg128214.html", "id": 203566, "time": "2018-01-30T15:16:57Z", "creator": "serge@american-data.com", "creation_time": "2018-01-30T15:16:57Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 62024, "attachment_id": null, "id": 203619, "time": "2018-02-03T21:22:07Z", "creator": "markt@apache.org", "creation_time": "2018-02-03T21:22:07Z", "is_private": false, "text": "Thanks for the test case. It makes investigation so much easier. The leak stands out very clearly in a profiler.\n\nI've tracked down a bug in the exception handling case and I have a patch for that. I still need to look at the normal close variant."}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 203623, "time": "2018-02-04T22:19:28Z", "bug_id": 62024, "creation_time": "2018-02-04T22:19:28Z", "is_private": false, "text": "Fixed in:\n- trunk for 9.0.5 onwards\n- 8.5.x for 8.5.28 onwards\n\nThis appears to have been a regression in the connector refactoring in 8.5.x. Testing with 8.0.x shows it handles it correctly. Also, I could only trigger an issue when using an exception. Clean closes were handled correctly."}, {"count": 6, "tags": [], "bug_id": 62024, "attachment_id": null, "text": "Thank you very much", "id": 203627, "time": "2018-02-05T14:20:31Z", "creator": "serge@american-data.com", "creation_time": "2018-02-05T14:20:31Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 62024, "attachment_id": null, "text": "Mark- Our technicians are wondering if there a patch fix that can be applied to existing Windows versions of Tomcat", "id": 203630, "time": "2018-02-05T17:06:17Z", "creator": "serge@american-data.com", "creation_time": "2018-02-05T17:06:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 62024, "is_private": false, "count": 8, "id": 203633, "time": "2018-02-05T22:56:00Z", "creator": "chris@christopherschultz.net", "creation_time": "2018-02-05T22:56:00Z", "text": "Short answer: the Tomcat team provides replacement versions, not patches. You will need to upgrade to 8.5.28 when it becomes available.\n\nThe Tomcat 8.5 RM announced the intention of rolling a release and calling for a vote in the next few days. You are welcome to join the tomcat-dev mailing list and vote (non-binding) on the release. If all goes well, I'd expect a release to be ready for you by next Monday."}]
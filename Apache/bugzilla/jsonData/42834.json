[{"count": 0, "tags": [], "creator": "paulk@asert.com.au", "attachment_id": null, "id": 105187, "time": "2007-07-08T07:57:34Z", "bug_id": 42834, "creation_time": "2007-07-08T07:57:34Z", "is_private": false, "text": "RawDataBlock assumes that IOUtils.readFully() returns data in blocks that are\nPOIFSConstants.BIG_BLOCK_SIZE in size. When reading an Excel file out of a Jar\nor from a socket or http client connection with no buffering, this appears not\nto be the case. It appears to be an issue with all reads on a slow server (e.g.\ncrystal reports generating the PDF on a heavily loaded machine or across a slow\nnetwork) and an issue for the last read when crystal reports is running locally\non a lightly loaded machine. The fix seems to be to remove the code which checks\nif the  size returned is a multiple of POIFSConstants.BIG_BLOCK_SIZE as per the\nattached patch. At least that has worked for the latest few versions of crystal\nreports."}, {"count": 1, "tags": [], "creator": "paulk@asert.com.au", "text": "Created attachment 20478\npatch", "id": 105188, "time": "2007-07-08T07:58:31Z", "bug_id": 42834, "creation_time": "2007-07-08T07:58:31Z", "is_private": false, "attachment_id": 20478}, {"count": 2, "tags": [], "creator": "paulk@asert.com.au", "text": "Possibly the same as 28231 which has a similar issue but a slightly different fix.\n\nRelated to 13478 which provided a partial but incomplete fix (as far as I can tell).", "id": 106039, "time": "2007-07-29T20:21:30Z", "bug_id": 42834, "creation_time": "2007-07-29T20:21:30Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 111409, "time": "2007-12-04T04:37:13Z", "bug_id": 42834, "creation_time": "2007-12-04T04:37:13Z", "is_private": false, "text": "I'm tempted to say that we ought to throw an error if the last data block is\nshort, but handle the case of a slow read meaning we don't get all of a data\nblock in one go. That'll need a little bit more code than the patch offers though"}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "text": "I've written a test which works with a very slow inputstream. With this, I don't\nhave any problems reading a whole block, even if done so in lots of tiny little\nbits with gaps. I've also tweaked the comments/javadocs/exception text to ensure\nthey're clear on exactly what will and won't work\n\nYou should only get the IOException if your stream EOFs in the middle of reading\na block, which should never be the case for a valid OLE2 document (which is\nrequired to be a multiple of the blocksize)\n\nSo, I'm not sure what your problem is, but I think it isn't related to\nIOUtils.readFully()\n\nIf you're still getting this issue after trying with a svn checkout from trunk,\ncould you put together a unit test that demonstrates the issue? (My slow reading\nunit test couldn't trigger it, so we will need a failing unit test to be able to\nreplicate the issue, if it's still present)", "id": 112700, "time": "2008-01-09T08:35:35Z", "bug_id": 42834, "creation_time": "2008-01-09T08:35:35Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 19575, "attachment_id": null, "is_private": false, "id": 36562, "time": "2003-05-02T12:19:55Z", "creator": "gregor@apache.org", "creation_time": "2003-05-02T12:19:55Z", "text": " "}, {"count": 1, "tags": [], "bug_id": 19575, "attachment_id": null, "is_private": false, "id": 36563, "time": "2003-05-02T12:20:31Z", "creator": "gregor@apache.org", "creation_time": "2003-05-02T12:20:31Z", "text": "8) the admin section is heavily DHTML-ized. It works on all 6th\ngeneration browsers and the user is able to upload images and such\nwithout requiring rountripping\n\n[by setting the 'src' property of an img with the value of the <input\ntype=\"file\"> it is possible to visualize the image the user is uploading\nright from disk, without requiring any rountripping. this improves the\nuser experience *immensively*!]\n\n[also, using dom cloneNode() it is possible to keep on adding images in\nthe form without requiring roundtripping.]\n\nMy experiences in DHTML programming with 6th browsers has been very\npositive. IE and Moz are pretty much compatible, there are only a few\nissues that really bug me:\n\n 1) if you have <div class=\"blah\"> blah is found in div.class in mozilla\nbut div.className in IE! sometimes I think those guys in redmond just\nneed more sunshine. I ended up testing for 'document.all' to\ndiscriminate between the two DOM types.\n\n 2) the event model is *completely* different. there are tricks to make\nthe same code work on both, but things like onclick(), onchange() and\nonfocus() never seems to work the same way. I ended up using\nonpropertychange() which is IE-specific. It is amazing how two different\nbrowsers can claim compliance with a spec, but still be completely not\ninteroperable.\n\nTo be honest, I have to say this is not only Redmond's fault: the DOM\nspec lacks any connection with the system. So, it says that events are\npushed, and what is their names, but not *how* and *in what order*!\n\nAs a result, I wrote some 300 lines of javascript for the client side\nand only 4 of them were browser-dependent.\n\n 9) I used Mozilla for development. If you are using another browser to\ndevelop your sites, throw it away and use mozilla. If you haven't done\nso, please read:\nhttp://devedge.netscape.com/viewsource/2003/mozilla-webdev/\n\nbut even better, go to http://livehttpheaders.mozdev.org and download\nthat awesome plugin that shows you the dump of all the headers that flow\nthru between you and the server. This saved me hours of cocoon-view\nbased debugging, expecially on multipart forms. Not counting the ease of\nuse of the javascript console compared to the stinking useless IE error\npopup window. yuck.\n\n 10) at the end, this is a web site designed with *extreme usability* in\nmind. I spent endless hours trying to remove *everything* possible from\nthe site without sacrificing the information that the site needed to\ntransmit. Also, the site is completely manageable by people who are\nbarely able to read email.\n\n 11) despite the ability of IE6 on all machines that need to access the\ninternal CMS, I decided *NOT* to use any contentEditable solution but to\nuse pure forms for two reasons:\n\n   a) their content is always structured\n\n   b) web users are used to forms, but not to inline editable pages\n(yet, at least). Forms provide visual semantics which are generally\nunderstood, inline editing is not standardized and without proper visual\nindications, users assume that if it's not in a textarea, the content is\nsimply not editable. I think that even in a future of advanced inline\nediting, forms will still have their pretty consistent usage because of\nthe clear visual semantics that are associated to them.\n\n\n                                    - o -\n\nLessons learned:\n\n a) cocoon can be very useful for small sites, but the hard part is\n*not* to use all its features and get down to easy stuff like a velocity\ntemplate that generates XHTML. Still, it can provide very useful\nfeatures even in that case (think style wrapping instead of\nheader/footer inclusion)\n\n b) flowscript rocks the planet. it will rock even more combined with\nhot-deployable avalon components.\n\n c) LiveConnect (the glue between javascript and java) makes it hard to\nabuse the flow to write business logic in it. Even after a few lines of\nhaving to call the classes by their full package names, you spin it off\ninto their own classes and call them. This turns out to be very\nstraightforward and keeps the flow *very* clean.\n\n d) flow + inputmodules + redirection from flow totally substitute the\nneed for actions in the sitemap. The elegance of the resulting solution\nis not even close to be action-based equivalent.\n\n e) sessions and continuations do need to cohexist and they do very well\nalready.\n\n f) cocoon needs an xml repository as an avalon component accessible\nfrom the flow! the use of protocols is simply not enough for the kind of\ndata manipulation required in seriously roundtripping webapps that have\nto mix, match and change stored xml content. This doesn't need to be an\nxml database, it could be a virtual file system on top of a blob-capable\nDB or a CVS view.\n\nHope this helps.\n\n-- \nStefano.\n"}, {"count": 2, "tags": [], "text": "what's the point of this bug? it's certainly an interesting piece of\ninformation, so i'm putting it into the wiki for now:\nhttp://wiki.apache.org/lenya/RandomInterestingSnippetsFromBugzilla\n", "is_private": false, "bug_id": 19575, "id": 93273, "time": "2006-09-09T14:32:55Z", "creator": "nettings@apache.org", "creation_time": "2006-09-09T14:32:55Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 52233, "is_private": false, "id": 151738, "creation_time": "2011-11-23T16:22:31Z", "time": "2011-11-23T16:22:31Z", "creator": "sowen@cs.manchester.ac.uk", "text": "Whenever I write a XSSFWorkbook out using XSSFWorkbook.write, the book afterwards is left in a state where calling getColumnWidth on one of its sheet causes an IndexOutOfBoundsException. Below is a unit test that isolates the problem (in this case it creates a new Workbook and constucts a sheet and cells, but I also have the same problem when starting from an existing workbook loaded through WorkbookFactory).\n\n@Test\npublic void testColumnWidthPOI() throws Exception {\n       XSSFWorkbook workbook = new XSSFWorkbook();\n       XSSFSheet sheet = workbook.createSheet();\n       XSSFRow row = sheet.createRow(0);\n       XSSFCell cell = row.createCell(0);\n       cell.setCellValue(\"hello world\");\n       assertEquals(\"hello world\",workbook.getSheetAt(0).getRow(0).getCell(0).getStringCellValue());\n       assertEquals(2048,workbook.getSheetAt(0).getColumnWidth(0)); //<-works\n\n       //gets a UUID based temporary file\n       File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n       String uuid = UUID.randomUUID().toString();\n       File f = new File(tmpDir,uuid+\".xlsx\");\n\n       BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(f));\n       workbook.write(stream);\n       stream.close();\n       assertTrue(f.exists());\n\n       assertEquals(\"hello world\",workbook.getSheetAt(0).getRow(0).getCell(0).getStringCellValue());\n       assertEquals(2048,workbook.getSheetAt(0).getColumnWidth(0)); //<- throws IndexOutOfBoundsException\n   }", "attachment_id": null}, {"count": 1, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 169410, "time": "2013-08-13T19:23:38Z", "bug_id": 52233, "creation_time": "2013-08-13T19:23:38Z", "is_private": false, "text": "Analysis:\nClass ColumnHelper has a member worksheet of type CTWorksheetImpl. If I look at it before and after the call to write(), there is a line \"  <main:cols/>\" missing after writing, so it seems writing is removing this line somehow.\n\nWhen looking more closely the onSave() call in XSSFWorkbook.write() invokes XSSFSheet.write(), which causes the removal via \n\n                worksheet.setColsArray(null);\n\nI am not sure why the setColsArray() is done here and if not doing this would have side-effects, but it would solve the problem here and probably some others that are reported in some other Bugs when users try using a Workbook after writing it out once."}, {"count": 2, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 169441, "time": "2013-08-14T14:58:42Z", "bug_id": 52233, "creation_time": "2013-08-14T14:58:42Z", "is_private": false, "text": "I have now removed the setting of colsarray to null in XSSFSheet.write() to not make the Workbook corrupt by writing it out. This fixes this bug, all existing unit tests still run fine, not sure why the code was there initiallly, also the SNV Log did not provide any useful information here."}, {"count": 3, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 169600, "time": "2013-08-20T15:01:01Z", "bug_id": 52233, "creation_time": "2013-08-20T15:01:01Z", "is_private": false, "text": "Reopening this bug as I need to revert the changes done for this Bug for now as it breaks xlsx reading in Excel!"}, {"count": 4, "tags": [], "bug_id": 52233, "attachment_id": null, "id": 169613, "creation_time": "2013-08-20T19:06:40Z", "time": "2013-08-20T19:06:40Z", "creator": "dominik.stadler@gmx.at", "text": "Fix differently now, it seems we need to set the colsArray to null in order to produce valid XLSX-files, so we restore the colsArray after writing the document out.", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 3198, "attachment_id": null, "id": 4671, "time": "2001-08-21T02:28:44Z", "creator": "mikes@netentertainment.com", "creation_time": "2001-08-21T02:28:44Z", "is_private": false, "text": "If you have several elements in the sourcepath (nested <src>), and the same \nclass occurs in more than one place, Ant may add the same class several times \nto the javac command line, which results in an \"duplicate class\" error from \njavac."}, {"count": 1, "tags": [], "bug_id": 3198, "attachment_id": null, "text": "What behaviour are you expecting here?", "id": 4904, "time": "2001-08-27T06:09:33Z", "creator": "conor@apache.org", "creation_time": "2001-08-27T06:09:33Z", "is_private": false}, {"count": 2, "tags": [], "text": "I'm expecting Ant to only add each class once, the first one found when \nsearching the Serach Path. Just as javac itself does.", "attachment_id": null, "id": 4905, "creator": "mikes@netentertainment.com", "time": "2001-08-27T06:14:09Z", "bug_id": 3198, "creation_time": "2001-08-27T06:14:09Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 3198, "attachment_id": null, "text": "OK, this is what I get with javac - so I am not sure what javac behavour you \nare referring to.\n\nF:\\antdev\\bugs\\javacmultisourcepath>javac -sourcepath src1;src2 \nsrc1/x/Test.java src2/x/Test.java\nsrc2/x/Test.java:3: duplicate class: x.Test\npublic class Test {\n       ^\n1 error", "id": 4913, "time": "2001-08-27T07:27:05Z", "creator": "conor@apache.org", "creation_time": "2001-08-27T07:27:05Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 3198, "text": "That is how Ant currently invokes javac. I want Ant to invoke javac like this:\n\njavac -sourcepath src1;src2 src1/x/Test.java src2/x/AnotherClass.java\n\n(Given that x/Test.java exists in both src1 and src2, and x/AnotherClass.java \nexists in src2 only.)\n\nOr perhaps Ant could invoke javac like this:\n\njavac -sourcepath src1;src2 x/Test.java x/AnotherClass.java\n\n", "id": 4914, "time": "2001-08-27T07:32:33Z", "creator": "mikes@netentertainment.com", "creation_time": "2001-08-27T07:32:33Z", "is_private": false, "attachment_id": null}, {"count": 5, "text": "I can confirm this as a serious loss of functionality compared with running \njavac at the command line and also support at least an option to use the \nstandard javac behavior.  There is no easy workaround.\n\nThe command line -sourcepath works like the include and lib paths in C \ncompilers ( and the classpath and the system PATH) by finding files on a 'first-\nfound' basis.  However, Ant searches for files by itself in a different manner, \nand there is no easy way to access the javac behavior.\n\nWhy is this important?  It allows additional flexibility in managing your \nsource code. e.g., I work on a team with 5 developers and we have a stable set \nof code in\n\n/source/stable  ( com/wigcom/*.java - 100 java files )\n\nNow I want to make a change to a single file: com/wigcom/ServerManager.java\n\nI don't need/want to copy/synchronize 100 Java files and I can't overwrite the \none in /source/stable because my team members rely on that one. So, I check out \n(or copy ) com/wigcom/ServerManager.java to an empty /home/sean/mychanges \ndirectory.\n\nFrom there I issue the command  'javac -sourcepath .:/source/stable -d . \ncom/wigcom/*.java'  And javac compiles all the java files in '.' \nand '/source/stable' EXCEPT /source/stable/com/wigcom/ServerManager.java \nbecause it found a local one with an identical name first.  Thus I've created a \nfull application configuration from one full configuration and a \npartial 'delta' to that configuration.\n\nCombining the 'first-found' behaviour with ant's powerful multidepth \nwildcarding will really extend ant's utility.\n", "creator": "sean@openmake.com", "attachment_id": null, "id": 9188, "time": "2001-12-28T13:13:48Z", "bug_id": 3198, "creation_time": "2001-12-28T13:13:48Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "Why does something such as \n\n <javac srcdir=\".\" destdir=\"${build.classes}\">\n      <classpath refid=\"project.class.path\" />\n      <src path=\"/source/stable\" />\n       <include name=\"com/wigcom/*.java\"/>\n </javac>\n\nnot work for you ?\n\n", "is_private": false, "id": 9195, "creator": "donaldp@apache.org", "time": "2001-12-28T18:08:17Z", "bug_id": 3198, "creation_time": "2001-12-28T18:08:17Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 3198, "text": "It doesn't work if you have the same source file in both source directories.\n\n    <javac srcdir=\"src1\" destdir=\"out\">\n      <src path=\"src2\" />\n      <include name=\"a/Foo.java\" />\n    </javac>\n\nGives:\n\nAnt version 1.4.1 compiled on October 11 2001\nBuildfile: test.ant\nDetected Java version: 1.3 in: C:\\jdk1.3.1\\jre\nDetected OS: Windows 2000\nparsing buildfile C:\\home\\mikes\\workarea\\test.ant with URI = \nfile:C:/home/mikes/workarea/test.ant\nProject base dir set to: C:\\home\\mikes\\workarea\nBuild sequence for target `test' is [test]\nComplete build sequence is [test]\n\ntest:\n    [javac] a\\Foo.java added as C:\\home\\mikes\\workarea\\out\\a\\Foo.class doesn't \nexist.\n    [javac] a\\Foo.java added as C:\\home\\mikes\\workarea\\out\\a\\Foo.class doesn't \nexist.\n    [javac] Compiling 2 source files to C:\\home\\mikes\\workarea\\out\n    [javac] Using modern compiler\n    [javac] Compilation args: -d C:\\home\\mikes\\workarea\\out -classpath \nC:\\home\\mikes\\workarea\\out;C:\\jdk1.3.1\n\\lib\\tools.jar;C:\\javaInstall\\ant\\lib\\jaxp.jar;C:\\javaInstall\\ant\\lib\\jakarta-\nant-1.4.1-\noptional.jar;C:\\javaInstall\\ant\\lib\\crimson.jar;C:\\javaInstall\\ant\\lib\\ant.jar -\nsourcepath C:\\home\\mikes\\workarea\\src2;C:\\home\\mikes\\workarea\\src1 -g:none\n    [javac] Files to be compiled:\n    C:\\home\\mikes\\workarea\\src2\\a\\Foo.java\n    C:\\home\\mikes\\workarea\\src1\\a\\Foo.java\n\n    [javac] C:\\home\\mikes\\workarea\\src1\\a\\Foo.java:5: duplicate class: a.Foo\n    [javac] public class Foo\n    [javac]        ^\n    [javac] 1 error\n\nBUILD FAILED\n\nC:\\home\\mikes\\workarea\\test.ant:7: Compile failed, messages should have been \nprovided.\n\tat org.apache.tools.ant.taskdefs.Javac.execute(Javac.java:559)\n\tat org.apache.tools.ant.Task.perform(Task.java:217)\n\tat org.apache.tools.ant.Target.execute(Target.java:184)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:202)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:601)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:560)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:454)\n\tat org.apache.tools.ant.Main.start(Main.java:153)\n\tat org.apache.tools.ant.Main.main(Main.java:176)\n\nTotal time: 4 seconds\n\n", "id": 9202, "time": "2001-12-29T02:31:41Z", "creator": "mikael.staldal@home.se", "creation_time": "2001-12-29T02:31:41Z", "is_private": false, "attachment_id": null}, {"count": 8, "text": "I am not sure how good of an idea is for a build system to allow you to mask \nout  file in the way you pretend. To me that is a kind of hack and I am not \nsure is the best kind of feature for producing stable builds.\n\nHave you thought on other methods of acomplishing your work?\nI guess the question is: is this the only way for you to do your job, or is ti \njust the way you have been using upto now.\n", "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "id": 9206, "time": "2001-12-29T07:52:05Z", "bug_id": 3198, "creation_time": "2001-12-29T07:52:05Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "donaldp@apache.org", "attachment_id": null, "id": 9213, "time": "2001-12-29T14:27:52Z", "bug_id": 3198, "creation_time": "2001-12-29T14:27:52Z", "is_private": false, "text": "Ooops - then lets try\n\n <javac srcdir=\".\" destdir=\"${build.classes}\">\n      <classpath refid=\"project.class.path\" />\n      <src path=\"/source/stable\">\n        <!-- insert appropriate excludes here -->\n        <exclude name=\"com/wigcom/*.java\"/> \n      </src>\n      <include name=\"com/wigcom/*.java\"/>\n </javac>\n\n\nBTW this is a pattern that is used extensively throughout my own build files \nso it should work (if I type it out properly)\n\n"}, {"count": 10, "attachment_id": null, "bug_id": 3198, "is_private": false, "id": 9219, "time": "2001-12-30T14:23:11Z", "creator": "mikael.staldal@home.se", "creation_time": "2001-12-30T14:23:11Z", "tags": [], "text": "It doesn't work at all, I get this error when I try:\n\nAnt version 1.4.1 compiled on October 11 2001\nBuildfile: test.ant\nDetected Java version: 1.3 in: C:\\jdk1.3.1\\jre\nDetected OS: Windows 2000\nparsing buildfile C:\\home\\mikes\\workarea\\test.ant with URI = file:C:/home/mikes/\nworkarea/test.ant\nProject base dir set to: C:\\home\\mikes\\workarea\n\nBUILD FAILED\n\nC:\\home\\mikes\\workarea\\test.ant:27: The <path> data type doesn't support the nes\nted \"exclude\" element.\n        at org.apache.tools.ant.IntrospectionHelper.createElement(IntrospectionH\nelper.java:323)"}, {"count": 11, "tags": [], "creator": "jdennist@lehman.com", "attachment_id": null, "text": "There is an additional downside to Ant using javac -sourcepath rather than a \nlist of files.  \nImagine you have two different packages com.xyz.one and com.xyz.two which have \nthe same base but require different third party JARs to compile.  The obvious \nthing would be to have two targets with different classpaths and \nincludes/excludes.  If you do this, Ant correctly decides whether there are any \nfiles to compile but if there are, then javac incorrectly attempts to compile \ncode in both packages and fails because of missing JARs", "id": 14413, "time": "2002-04-23T09:06:35Z", "bug_id": 3198, "creation_time": "2002-04-23T09:06:35Z", "is_private": false}, {"count": 12, "tags": [], "text": "As far as I can understand the original bug description, it cannot be \nperformed without parsing the class to decide whether or not it is a duplicate \nand remove it from the list (yes, the class could possibly not be in a package \nand the other one could be).\n\nTherefore I'm setting this bug as WONTFIX and think Alberto advices are good, \notherwise in one point or another it's a hack.\n\n\n", "attachment_id": null, "id": 18500, "creator": "sbailliez@apache.org", "time": "2002-06-24T21:01:08Z", "bug_id": 3198, "creation_time": "2002-06-24T21:01:08Z", "is_private": false}, {"count": 13, "text": "Wouldn't be possible to let javac do that parsing for you?\n\nThe problem is that Ant tries to do some stuff that javac itself can do, and \njavac would do a better job.\n", "creator": "mikael.staldal@home.se", "attachment_id": null, "id": 18755, "time": "2002-06-29T12:50:28Z", "bug_id": 3198, "creation_time": "2002-06-29T12:50:28Z", "tags": [], "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 3198, "text": "when compiling multiple elements, why does javac exits saying \"BUILD FAILED\" \nrather than writing the classes of sucessful compilation.\nIm running into a problem where classes are not getting generated just because \nof one error which iam not concerned about and it blocks the whole build.\n", "id": 36164, "time": "2003-04-26T11:14:37Z", "creator": "praseed_b@yahoo.com", "creation_time": "2003-04-26T11:14:37Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 3198, "attachment_id": null, "id": 52042, "time": "2004-02-10T10:01:27Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-02-10T10:01:27Z", "is_private": false, "text": "The issue with the javac task is I think the fact that it is a\n MatchingTask and cannot take embebedd filesets as nested elements.\n\nThe person  wants to do this:\n\njavac -sourcepath src1;src2 src1/x/Test.java src2/x/AnotherClass.java\n\nwhere src2/x/Test.java and src1/x/AnotherClass.java may exist, but\nthe user does not want to compile them.\n\nA javac task with embedded srcfileset may look like this:\n<javac destdir=\"classes\">  <!-- note: no source dir set -->\n  <srcfileset dir=\"src1\"> <!-- note: this gets mapped to -sourcepath src1 -->\n     <include name=\"x/Test.java\"/>\n  </srcfileset>\n  <srcfileset dir=\"src2\" includes=\"x/AnotherClass.java\"/>\n</javac>\n"}, {"count": 16, "tags": [], "bug_id": 3198, "text": "I think it's fairly safe to assume WONTFIX stands.", "id": 56173, "time": "2004-04-21T15:10:46Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-21T15:10:46Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": " ", "is_private": false, "bug_id": 41633, "id": 99467, "time": "2007-02-16T03:07:52Z", "creator": "joe.nemeth@cpluscsystems.axelero.net", "creation_time": "2007-02-16T03:07:52Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "joe.nemeth@cpluscsystems.axelero.net", "text": "Created attachment 19610\nexample supporting the claim \n\nHere is an XSL-FO sample fragment and two jpg-s that show how it was rendered\nby the Antennahous formatter and FOP.", "id": 99512, "time": "2007-02-17T00:02:03Z", "bug_id": 41633, "creation_time": "2007-02-17T00:02:03Z", "is_private": false, "attachment_id": 19610}, {"count": 2, "attachment_id": null, "creator": "adelmelle@apache.org", "text": "\nTook a closer look, and neither block- nor inline-progression-dimension are supported on fo:inline, so \nchanged the bug summary to reflect this.\n\nSteps to take:\n-> activate related property code in fop.fo.flow.Inline.java\nRelated properties are currently commented out/unused.\nThis goes for inline- and block-progression-dimension, height and width.\nThose properties need to be merged anyway, to avoid storing the very same value twice: proposal here \nwould obviously be to use native XSL properties as the instance members, and if necessary, implement \naccessor methods for height/width.\n\n-> implement necessary parts in fop.layoutmgr.inline.InlineLayoutManager\n\nWRT the latter: \nDoes anyone know what the expected behaviour is if the fo:inline's content exceeds the specified or \nimplied inline-progression-dimension.maximum? I'd expect the inline to grow with a warning, since no \nclip/overflow apply here and they're non-inherited, but I'm not 100% certain... The behaviour would be \ndifferent than for the (as yet unimplemented) fo:inline-container, where the content could be clipped?", "id": 99515, "time": "2007-02-17T03:17:17Z", "bug_id": 41633, "creation_time": "2007-02-17T03:17:17Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 41633, "is_private": false, "count": 3, "id": 99520, "time": "2007-02-17T14:15:06Z", "creator": "jeremias@apache.org", "creation_time": "2007-02-17T14:15:06Z", "text": "(In reply to comment #2)\n> -> implement necessary parts in fop.layoutmgr.inline.InlineLayoutManager\n> \n> WRT the latter: \n> Does anyone know what the expected behaviour is if the fo:inline's content\nexceeds the specified or \n> implied inline-progression-dimension.maximum? I'd expect the inline to grow\nwith a warning, since no \n> clip/overflow apply here and they're non-inherited, but I'm not 100%\ncertain... The behaviour would be \n> different than for the (as yet unimplemented) fo:inline-container, where the\ncontent could be clipped?\n\nI'd agree with your view here. It's something similar to the b-p-d on table-row\nwhere growing beyond the specified maximum does not clip, but instead grows and\nonly issues an error message.\nFrankly, I'm surprised to see b-p-d and i-p-d applicable to inline at all. After\nall it's the only FO which generates normal areas, not viewport or reference\nareas that i-p-d and b-p-d applies to. That's weird IMO! IMO it would sufficed\nto let inline-container handle this case. Too bad, we haven't implemented that\none, yet."}, {"count": 4, "attachment_id": null, "creator": "gadams@apache.org", "text": "resetting P2 open bugs to P3 pending further review", "id": 157444, "time": "2012-04-07T01:43:00Z", "bug_id": 41633, "creation_time": "2012-04-07T01:43:00Z", "tags": [], "is_private": false}]
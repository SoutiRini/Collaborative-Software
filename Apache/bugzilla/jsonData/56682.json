[{"count": 0, "tags": [], "bug_id": 56682, "text": "Created attachment 31766\nList of Exception Management Anti-Patterns and Code Smells\n\nCode smells are defined as symptoms in the program source code which are usually not bugs or technically incorrect but indicates a possible deeper problem. Anti-patterns are counterparts of design patterns and are defined as mistakes during software development that produces negative consequences and is ineffective or counter-productive. During program execution, error events can occur that disrupts the normal flow of the program. Programming languages provide exception handling mechanism to developers for handling errors and exception events. \n\nI mined the source-code for automatically detecting 10 exception handling anti-patterns (https://today.java.net/article/2006/04/04/exception-handling-antipatterns).  In this issue report, I list the exception handling anti-patterns and code-smells that I found in the source code. My experimental results demonstrate presence of various exception handling anti-patterns and throw light on their intensity. I believe my tool for automatic detection of anti-patterns in source code and the attached results can be useful to programmers by helping them correct mistakes and write effective code.", "id": 176093, "time": "2014-06-29T10:48:20Z", "creator": "ashish@iiitd.ac.in", "creation_time": "2014-06-29T10:48:20Z", "is_private": false, "attachment_id": 31766}, {"count": 1, "tags": [], "text": "There's a slight code smell in the generated output :-)\nMost of the messages have the prefix:\n\nANTI-PATTERN:\nbut some have\nANTI-PATTERN :\n\nThis can make it harder to process the results, as well as indicating possible code duplication/corruption in the tool.\n\nAlso the summary totals at the end don't use the same wording as the individual messages so it's not immediately obvious which total refers to which message. This makes the summary totals harder to use.\n\nMinor nit: the file path names use the Windows path separator (\\) which can cause issues for users on other OSes. Windows Java can use / in paths, so it is more generally useful to use that in output that applies to multiple OSes.\n\nFurther, the output might be easier to use in a format that better suited automatic processing. For example, CSV.\n\n==\n\nI've not checked all the results; there are too many.\nI did not spot any obvious false positives, but whether all the antipatterns really represent problems is another matter. The article is quite old, and recent practice may have changed for some of the antipatterns.", "is_private": false, "id": 176094, "creator": "sebb@apache.org", "time": "2014-06-29T11:58:58Z", "bug_id": 56682, "creation_time": "2014-06-29T11:58:58Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 56682, "is_private": false, "id": 176095, "attachment_id": null, "creator": "sebb@apache.org", "creation_time": "2014-06-29T12:15:34Z", "time": "2014-06-29T12:15:34Z", "text": "Also just noticed that the tool was also run on the test code.\nThere are often good reasons to use different techniques in unit test code."}, {"count": 3, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 176096, "time": "2014-06-29T12:26:58Z", "bug_id": 56682, "creation_time": "2014-06-29T12:26:58Z", "is_private": false, "text": "I only counted 982 Java files in the report, yet the total at the end says:\n\nNUMBER OF JAVA FILES :1053\n\nThere do not seem to be any warning messages corresponding to the following:\n\nNUMBER OF CATCH-AND-IGNORE ANTIPATTERN:7"}, {"count": 4, "tags": [], "creator": "sebb@apache.org", "is_private": false, "id": 176097, "creation_time": "2014-06-29T12:29:00Z", "time": "2014-06-29T12:29:00Z", "bug_id": 56682, "text": "(In reply to Sebb from comment #2)\n> Also just noticed that the tool was also run on the test code.\n> There are often good reasons to use different techniques in unit test code.\n\nIn particular, JUnit3 tests normally look like\n\npublic void testXYZ() throws Exception {...}\n\nI don't think anyone would agree that is a code smell.", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 56682, "text": "Just found a false-positive:\n\nFILE NAME : apache-jmeter-2.11\\src\\jorphan\\org\\apache\\jorphan\\collections\\HashTree.java\n\n\nCATCH CLAUSE : catch (RuntimeException e) {\n  if (!e.getMessage().equals(FOUND)) {\n    throw e;\n  }\n}\n\n\nANTI-PATTERN: Wrapping the exception and passing getMessage() destroys the stack trace of original exception", "id": 176099, "time": "2014-06-29T12:38:19Z", "creator": "sebb@apache.org", "creation_time": "2014-06-29T12:38:19Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 56682, "is_private": false, "id": 176100, "attachment_id": null, "creator": "sebb@apache.org", "creation_time": "2014-06-29T12:40:03Z", "time": "2014-06-29T12:40:03Z", "text": "The report does not have line numbers."}, {"count": 7, "tags": [], "creator": "sebb@apache.org", "is_private": false, "text": "(In reply to Sebb from comment #1)\n> ... whether all the antipatterns\n> really represent problems is another matter. \n\nFor example, catching Exception rather than a list of specific Exceptions.\n\nFor code that wants to be able to continue following an Exception, it would be necessary to catch all the possible checked Exceptions as well as RuntimeException. This can get very messy.", "id": 176101, "time": "2014-06-29T13:11:35Z", "bug_id": 56682, "creation_time": "2014-06-29T13:11:35Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Created attachment 31767\nList of Exception Management Anti-Patterns and Code Smells", "is_private": false, "bug_id": 56682, "id": 176102, "time": "2014-06-29T18:57:26Z", "creator": "ashish@iiitd.ac.in", "creation_time": "2014-06-29T18:57:26Z", "attachment_id": 31767}, {"count": 9, "attachment_id": null, "bug_id": 56682, "is_private": false, "id": 176103, "time": "2014-06-29T19:14:23Z", "creator": "ashish@iiitd.ac.in", "creation_time": "2014-06-29T19:14:23Z", "tags": [], "text": "Thanks for the feedback \u2013 really appreciate it. I have addressed all the comments/issues mentioned in this discussion thread and fixed it (except the minor nit which also I will address soon). I have attached the new report (refer to Comment 8 and Attachments).\n \nI agree that for the unit-test-code throwing and catching generic exception (Exception) is not an anti-pattern and I need to figure out a solution to this problem (warning message based on whether test-code or not)\n\nI am working towards enhancing the tool to fix issues and add more exception handling anti-patterns (currently it has 10 anti-patterns). I will make the tool free and open-source and host it on GitHub. Thanks"}, {"text": "(In reply to Ashish Sureka from comment #9)\n> Thanks for the feedback \u2013 really appreciate it. I have addressed all the\n> comments/issues mentioned in this discussion thread and fixed it (except the\n> minor nit which also I will address soon). I have attached the new report\n> (refer to Comment 8 and Attachments).\n\nI was referring to line numbers for the source code.\n  \n> I agree that for the unit-test-code throwing and catching generic exception\n> (Exception) is not an anti-pattern and I need to figure out a solution to\n> this problem (warning message based on whether test-code or not)\n\nThere are likely other anti-patterns that are common in Unit test code.\n\nIt would probably be better to produce separate reports for the two source trees.\n\n> I am working towards enhancing the tool to fix issues and add more exception\n> handling anti-patterns (currently it has 10 anti-patterns). I will make the\n> tool free and open-source and host it on GitHub. Thanks\n\nNote that there are already a lot of other such tools.\nFor example, Findbugs.", "tags": [], "creator": "sebb@apache.org", "is_private": false, "count": 10, "id": 176104, "time": "2014-06-29T19:25:41Z", "bug_id": 56682, "creation_time": "2014-06-29T19:25:41Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "ashish@iiitd.ac.in", "is_private": false, "text": "Sebb: I was referring to line numbers for the source code.\n\nAshish: Mentioning line-number of the source code and inserting line-numbers in the report \u2013 both are useful. I will work towards adding source-code line numbers also (good feature).\n\nSebb: There are likely other anti-patterns that are common in Unit test code. It would probably be better to produce separate reports for the two source trees. \n\nAshish: I agree. This will be a good feature. However, I need to come-up with a solution to differentiate between test-code and non-test-code. \n\nSebb: Note that there are already a lot of other such tools. For example, Findbugs.\n\nAshish: The focus of my tool is Exception handling anti-patterns and code-smells. While there are several anti-pattern detecting tools, they do not cover exception handling anti-patterns. Here\u2019s the link to FindBugs Bug Descriptions and it does not cover the anti-patterns in my tool (+ I am implementing more anti-patterns which are not covered in FindBugs). \n\nThanks again for the inputs. FYI \u2013 I am submitting issue-reports to some more open-source Java projects and I a observing that some anti-patterns from the report are accepted as issues and assigned for fix.", "id": 176112, "time": "2014-06-29T19:49:08Z", "bug_id": 56682, "creation_time": "2014-06-29T19:49:08Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 56682, "text": "Hello,\nIt would be nice if tool could generate a CSV with those informations.\n\nThanks", "id": 176250, "time": "2014-07-06T20:03:06Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2014-07-06T20:03:06Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 56682, "attachment_id": null, "id": 176852, "time": "2014-08-03T13:41:02Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2014-08-03T13:41:02Z", "is_private": false, "text": "Closing as current report is not usable.\nMany reported issues are not really ones, some have been fixed, output is hard to use and test code is mixed with non test code."}]
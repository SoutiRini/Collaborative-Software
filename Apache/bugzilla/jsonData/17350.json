[{"count": 0, "tags": [], "creator": "tony@dahbura.com", "attachment_id": null, "is_private": false, "id": 31880, "time": "2003-02-24T22:52:56Z", "bug_id": 17350, "creation_time": "2003-02-24T22:52:56Z", "text": "My application is using client certificates over ssl (these all occur\nafter I unlock and present my certificate (which btw is the same on\nall three of these browsers).   Tomcat is running on jdk 1.4.\n\nWhen I access my protected resource with IE version 6.0 all works fine. When \nI access my protected\nresource with Mozilla version 1.1 I receive an error page from tomcat\nthat says: HTTP Status 400 - No client certificate chain in this\nrequest. \nDescription:The request sent by the client was syntactically\nincorrect (No client certificate chain in this request). \n\nIf I hit reload it works fine. \n\nWhen I access my protected resource with Netscape Communicator I receive a \nblank page. After hitting reload I am prompted for my certificate again and \nit works correctly. I believe this message is being generated by the \nfollowing code in org.apache.catalina.authenticator.SSLAuthenticator.java: \n// Retrieve the certificate chain for this client \nHttpServletResponse hres = (HttpServletResponse) response.getResponse();\nif (debug >= 1) > log(\"Looking up certificates\"); \nX509Certificate certs[] =\n \n(X509Certificate[])request.getRequest().getAttribute(Globals.CERTIFICATES_ATTR);\nif ((certs == null) || (certs.length < 1)) { \n\tcerts = (X509Certificate[])\n\trequest.getRequest().getAttribute(Globals.SSL_CERTIFICATE_ATTR); }\nif ((certs == null) || (certs.length < 1)) { \n\tif (debug >= 1) > log(\"No certificates included with this request\");\n\thres.sendError(HttpServletResponse.SC_BAD_REQUEST,\n\t\t\tsm.getString(\"authenticator.certificates\"));\n\treturn (false); } \nMy question is why the inconsistent behavior between browsers? Secondly if\nI do not do cert authentication within my webapp but instead turn it on\nfor the whole SSL context (using clientAuth) I do not get this message\nwith any of the above mentioned browsers. \n\nSome comments from the mail list include:\nThe special (internal to Tomcat) 'SSL_CERTIFICATE_ATTR' attribute causes Tomcat \nto re-negotiate\nthe handshake with the additional requirement of a client cert if there\nisn't already a cert present (and this is why clientAuth works). \n\nIn addition, for the JDK1.4 of JSSE, there are some tricks to get around\nthat version's refusal to re-negotiate until there is real traffic on\nthe Socket. This is probably what is confusing Mozilla & Netscape. You\ncan file a bug-report at http://nagoya.apache.org/bugzilla/\n\nThe basic problem is that the JSSE that ships with JDK1.4 doesn't allow\nsimply sending back a re-handshake request.  It won't actually send it down\nthe wire until there is content to send as well.  This is what is confusing\nMozilla & Netscape (since Tomcat tries (it seems, unsuccessfully :(, to fake\nthe browser out when running under JDK1.4)."}, {"count": 1, "tags": [], "creator": "medthomas@ntlworld.com", "attachment_id": null, "is_private": false, "id": 43066, "time": "2003-08-20T22:54:52Z", "bug_id": 17350, "creation_time": "2003-08-20T22:54:52Z", "text": "I have tested this for the latest versions of tomcat 4 and 5 and with the \nlatest versions of IE, Mozilla and Netscape. In all cases I was using the \n1.4.1 JDK.\n\nI was unable to reproduce the problem and am therefore changing the status to \nresolved (fixed) on the assumption a code change in Tomcat since 4.1.18 is \nresponsible for this being fixed.\n\nI believe I have covered all the options but if you identify a configuration \nwhere this still occurs, please reopen the bug, detail the configuration and I \nwill be happy to investigate further."}]
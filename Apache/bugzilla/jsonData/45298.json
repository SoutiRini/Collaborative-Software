[{"count": 0, "tags": [], "bug_id": 45298, "attachment_id": null, "text": "On Windows when a thread is created detached or apr_thread_detach() is called, the apr_thread_t->td member gets set to NULL.  Therefore, when apr_os_thread_get() is called, NULL is returned.\n\nThis differs from the UNIX implementation which always returns the pthread_t * even if the thread is detached.\n\nAlso, similar to Bug 42728, it appears to be possible for apr_os_thread_get() to be called in the created thread before apr_thread_create() in the creating thread has had a chance to set thd->td.\n\nPerhaps threads on Windows should be created with CREATE_SUSPENDED flag and ResumeThread() should be called once thd->td has been set.", "id": 118063, "time": "2008-06-27T05:56:08Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-06-27T05:56:08Z", "is_private": false}, {"count": 1, "attachment_id": 22190, "creator": "Joe.Mudd@sas.com", "text": "Created attachment 22190\nthread.c updates\n\nProposed fix", "id": 118078, "time": "2008-06-27T13:49:45Z", "bug_id": 45298, "creation_time": "2008-06-27T13:49:45Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 45298, "text": "Created attachment 22191\napr_arch_threadproc.h\n\nProposed fix", "id": 118079, "time": "2008-06-27T13:50:21Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-06-27T13:50:21Z", "is_private": false, "attachment_id": 22191}, {"count": 3, "tags": [], "bug_id": 45298, "text": "I have added a patch that may do the trick for this bug and Bug 42728.\n\nWell, assuming that callers are expected to call apr_thread_exit() and when the thread is not detached, apr_thread_join().", "id": 118080, "time": "2008-06-27T13:52:01Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-06-27T13:52:01Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 45298, "text": "The patch should also address Bug 45291.", "id": 118115, "time": "2008-06-30T08:25:58Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-06-30T08:25:58Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 45298, "text": "This bug hasn't seen any activity.  Did I fail to follow the proper bug reporting procedures?  Please let me know or point me in to the proper documentation to ensure this bug is addressed.  Thanks.", "id": 120393, "time": "2008-09-05T05:58:45Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-09-05T05:58:45Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 45298, "is_private": false, "id": 172725, "creation_time": "2014-01-28T09:01:31Z", "time": "2014-01-28T09:01:31Z", "creator": "lars.diehl@fiducia.de", "text": "This issue still seems unresolved in the current APR version. When detached threads are used in windows the apr_os_thread_current() causes a handle leak for each thread created. For me it is not clear why the thread handle that apr_os_thread_current() returns is duplicated inside the function. \n\nThe race condition in apr_thread_create() can cause handle leaks for non-detached threads.\n\nFor us a fix for this issue is critical. We are facing handle leaks in our code. In case we cannot get this fixed in APR we need to replace apr_os_thread_current() and observe the race condition the threading \n\nJoe provided a patch for this issue 5 years ago. Is somebody taking care of these requests?\n\nThis issue seems to be a duplicate of bug 42728.\n\nWhat would be the preferred way to get this fixed in APR trunk, 1.5 and 1.4?", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 45298, "is_private": false, "text": ">Joe provided a patch for this issue 5 years ago. Is somebody taking care of these requests?\nMy guess at the cause of the lack of responsiveness:  When devs have looked at the patch they have the initial impression that it is way too complicated to be the right fix (not necessarily a correct assessment), and that combined with the fact that only a subset of devs work on the Windows code aside from very minor changes has resulted in the proposed patch not being evaluated all this time.\n\nI'll give it a hard look before the next apr 1.5.x release.", "id": 172747, "time": "2014-01-28T15:51:43Z", "creator": "trawick@apache.org", "creation_time": "2014-01-28T15:51:43Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 45298, "text": "ok - understand. \n\nI prepared a set of changes before I found this record. IMHO the issue could be solved simpler. \n\nWould it make it easier to post my proposal here?", "id": 172748, "time": "2014-01-28T16:14:39Z", "creator": "lars.diehl@fiducia.de", "creation_time": "2014-01-28T16:14:39Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "trawick@apache.org", "is_private": false, "id": 172750, "attachment_id": null, "bug_id": 45298, "creation_time": "2014-01-28T16:17:07Z", "time": "2014-01-28T16:17:07Z", "text": ">Would it make it easier to post my proposal here?\nYes, please provide your proposal."}, {"count": 10, "tags": [], "bug_id": 45298, "is_private": false, "id": 172784, "creation_time": "2014-01-29T08:23:41Z", "time": "2014-01-29T08:23:41Z", "creator": "lars.diehl@fiducia.de", "text": "Created attachment 31269\nProposed fix based on 1.4.8\n\nI apologize - the proposal is based on APR Version 1.4.8 (which is the current version we are using). So far I was unable to build any 1.5.X or trunk versions on windows due to compilation errors.\n\nThe proposal contains two changes:\n\n1. Start threads suspended in order to work around the race-condition when saving the thread handle in apr_thread_create().\n\n2. Use GetCurrentThread() API in apr_os_thread_current(). I'm not sure why in the current implementation the handle is duplicated. Maybe I missed something here.", "attachment_id": 31269}, {"count": 11, "tags": [], "bug_id": 45298, "is_private": false, "id": 172785, "creation_time": "2014-01-29T08:34:13Z", "time": "2014-01-29T08:34:13Z", "creator": "lars.diehl@fiducia.de", "text": "Created attachment 31270\nProposed Fix based on 1.4.8\n\nI apologize - the proposal is based on APR Version 1.4.8 (which is the current version we are using). So far I was unable to build any 1.5.X or trunk versions on windows due to compilation errors.\n\nThe proposal contains two changes:\n\n1. Start threads suspended in order to work around the race-condition when saving the thread handle in apr_thread_create().\n\n2. Use GetCurrentThread() API in apr_os_thread_current(). I'm not sure why in the current implementation the handle is duplicated. Maybe I missed something here.\n\nFix: Added CREATE_SUSPENDED for the Windows-CE version.", "attachment_id": 31270}]
[{"count": 0, "tags": [], "text": "Attempts to load in my 'spreadsheet from hell' have advanced slightly since the\nprevious reported bug was closed, I downloaded the 20020610 nightly build, and\nre-ran my test script, now I get a new error:\n\njava.lang.reflect.InvocationTargetException: java.lang.RuntimeException: Unknown\nPTG = 3d (61)\n        at org.apache.poi.hssf.record.formula.Ptg.createPtg(Ptg.java:241)\n        at\norg.apache.poi.hssf.record.NameRecord.getParsedExpressionTokens(NameRecord.java:604)\n        at org.apache.poi.hssf.record.NameRecord.fillFields(NameRecord.java:576)\n        at org.apache.poi.hssf.record.Record.fillFields(Record.java:142)\n        at org.apache.poi.hssf.record.Record.<init>(Record.java:104)\n        at org.apache.poi.hssf.record.NameRecord.<init>(NameRecord.java:116)\n        at java.lang.reflect.Constructor.newInstance(Native Method)\n        at\norg.apache.poi.hssf.record.RecordFactory.createRecord(RecordFactory.java:247)\n        at\norg.apache.poi.hssf.eventmodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:201)\n        at\norg.apache.poi.hssf.eventmodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:139)\n        at PoiTest.main(PoiTest.java:268)\nException in thread \"main\" org.apache.poi.hssf.record.RecordFormatException:\nUnable to construct record instance, the following exception occured: null\n        at\norg.apache.poi.hssf.record.RecordFactory.createRecord(RecordFactory.java:260)\n        at\norg.apache.poi.hssf.eventmodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:201)\n        at\norg.apache.poi.hssf.eventmodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:139)\n\nUnfortunately I dont know what a PTG is, so I can't offer a tremendous amount of\n insight yet.  I can provide additional information if necessary.", "attachment_id": null, "bug_id": 9758, "id": 17531, "time": "2002-06-10T21:51:52Z", "creator": "daniel@cheeseplant.org", "creation_time": "2002-06-10T21:51:52Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 9758, "attachment_id": null, "text": "Sounds like a formula thing (which is still being worked on in the trunk). \nCheckout the 1.5 branch. (Branch tag: REL_1_5_BRANCH).\n\nAttn: Formula guys!  Is this fixable?", "id": 17539, "time": "2002-06-10T23:48:41Z", "creator": "glens@apache.org", "creation_time": "2002-06-10T23:48:41Z", "is_private": false}, {"count": 2, "tags": [], "text": "This error seems to be a reoccurring problem.  The way I am using HSSF, I\nread in existing Excel workbooks which have a wide variety of \"features\".  I\nseem to get this error ( but with different PTG = ?? values ) quite often.\nThe crux is, I am using the EventModel, and this cripples me with an\nexception.  Is this unknown PTG problem going to be continuous, and if so,\ncan we throw this exception somewhere else in the API, thus shielding the\nEventModel from failure?  \n\nMy hope for the EventModel is that it allows me to \"only care about what I\nneed\".  In this case, I couldn't care about parsing errors on formulas.  I\nwant the data.  \n\njust my 1.5 cents...\n\nJason Hoffman\n", "is_private": false, "id": 17541, "creator": "jason.hoffman@fmr.com", "time": "2002-06-11T00:10:28Z", "bug_id": 9758, "creation_time": "2002-06-11T00:10:28Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 9758, "text": "you shouldn't get this with 1.5 if you have EXPERIMENTAL_FORMULA_SUPPORT\ncompiled out (default).  If this is in the 2.0-dev branch well...thats why its\nthe dev branch.  If not then we should target this for 1.5.1 and fix it.", "count": 3, "id": 17546, "time": "2002-06-11T01:07:01Z", "creator": "poi-support@buni.org", "creation_time": "2002-06-11T01:07:01Z", "is_private": false}, {"count": 4, "tags": [], "creator": "daniel@cheeseplant.org", "attachment_id": null, "text": "Aha.. works fine on the 1.5 branch -- excellent.. Thank you.\n", "id": 17549, "time": "2002-06-11T01:58:33Z", "bug_id": 9758, "creation_time": "2002-06-11T01:58:33Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 9758, "text": "BTW, 0x3D is ptgAreaErr3dR .. whatever that means :). Given that we are not \nlikely to implement the semantics of *that* ptg very soon, maybe we should \nremove the remove the exception and use an UnknownPtg pattern so that we can \nwrite back everything we read even if we dont understand it yet. Seems to go in \nwith the philosophy of rest of poi. No?", "count": 5, "id": 17556, "time": "2002-06-11T04:36:31Z", "creator": "avik@apache.org", "creation_time": "2002-06-11T04:36:31Z", "is_private": false}, {"count": 6, "tags": [], "creator": "poi-support@buni.org", "is_private": false, "text": "Hi Avik,  If you think about it you'll realize why its not possible.  While we\n*could* have the formula record able to do this without exception, PTGs have an\nindeterminant size.  Records always explicitly declare their size.  So, while\nI'd love to do it that way if I have 10 ptgs, and the 5th one can't be parsed,\nthen neither can the one's following (Because the size of the 5th can't be\ndetermined).\n\nWhat we *should* do is make the *formula* record lazy parse these.  Only if\nsomeone asks it for something related to the PTGS should it parse them.  If it\ncan't...Then throw the exception and let the user handle it.  For the moment\nthis should be a *checked* exception.  (which will make people hate us, but its\nthe *right* thing to do, because its the same sitation as say reading a\nfile...even if you *know* its there....one day it won't be).  The formula record\nshould keep some flag on whether to just write the raw stored bytes or un-parse\nthe array of interperated PTG objects.  Make sense?  (reopening against 2.0-dev)", "id": 17573, "time": "2002-06-11T12:14:19Z", "bug_id": 9758, "creation_time": "2002-06-11T12:14:19Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "avik@apache.org", "is_private": false, "text": "Learning for the day. Thanks a lot Andy. \n\nI dont know about a checked exception, since the exception is being thrown due \nto an issue with our code, rather than an issue with the environment. What will \nhappen when we finally manage to handle all ptg's. Or do u forsee that the file \nformat will keep evolving and we will never be able to understand *ALL* ptgs?\n\nOnce i am thru with my current work in a day or two, i'll look at implementing \nall ptgs (read and write, but not generate). I think i'll be able to do them \npretty fast (unlike the current struggle against undocumented formula \nsemantics).  Then maybe the problem will go away?", "id": 17577, "time": "2002-06-11T12:26:51Z", "bug_id": 9758, "creation_time": "2002-06-11T12:26:51Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "I like the idea of \"lazy\" parsing.  Also, my co-worker and I were discussing \nthe idea of stepping back and registering the records you care about as the \nultimate first step.  This would essentially mean \"lazily\" pasring EVERYTHING, \nunless you have registered that you would like a thorough parsing of certain \nrecord types.  This could possibly reduce the memory usage of \"Reading\" \nexisting spreadsheets.  I'm implying taking this \"lazy\" approach as far back as \nis possible, thus reducing the unnecessary creation of Java objects, which will \nnever be used.  \n\n( my additional .5 cents, added to earlier comment = 2 cents.. ( I'll shutup \nnow ))", "is_private": false, "id": 17590, "creation_time": "2002-06-11T14:17:00Z", "time": "2002-06-11T14:17:00Z", "creator": "jason.hoffman@fmr.com", "bug_id": 9758, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 9758, "text": "Registering interest .. well, thats what the Event API is meant for. \n\nI have fixed this problem for the moment as follows: \n\nIf its a PTG we cannot recognise, then the FormulaRecord falls back to \ndumb \"store the whole byte thingy\" behaviour. Trying to get the formula from \nusermodel will result in a #NAME , which is what Excel itself uses when it cant \nunderstand a formula. Therefore, people who dont need to read formulas will not \nbe bother by unknown ptg exceptions, and it will be written back properly. \n\nAs a result, one method on FormulaRecord CAN return a null. It is therefore \nnoted in its javadoc comments, callers should check. However the method is \nmeant to be called primarily from within poi. so we should be okay. I've tried \nto check all its callers in poi. \n\nI think this fixes jason's 1.5 cents, the other .5 cents i am not sure we \nneed ... just my own 2c :)", "count": 9, "id": 17620, "time": "2002-06-11T20:44:28Z", "creator": "avik@apache.org", "creation_time": "2002-06-11T20:44:28Z", "is_private": false}]
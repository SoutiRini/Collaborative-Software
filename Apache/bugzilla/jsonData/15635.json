[{"count": 0, "tags": [], "bug_id": 15635, "text": "I have servlet, called from the http client, which calls another servlet, using \nRequestDispatcher. The called servlet do a query on the database and returns \nresult to the client.\nWhen the elapsed time, for doing the query and sending back the result, is too \nlong ( as tested, more than 30 seconds ), connection is closed when using \nCoyote connector, but it works fine using Catalina connector ( only modifying \nserver.xml configuration file, Connector className ).\nThis one occured starting with version 4.1.10 and following.\nIt doesn't seems, for me, to be a configuration problem but instead a trouble \nwith coyote connector.\nHoping this help; regards - Jacques Brax", "id": 28216, "time": "2002-12-23T17:18:22Z", "creator": "jacques.brax@treasury.arcelor.com", "creation_time": "2002-12-23T17:18:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 15635, "text": "There's a connection timeout parameter. There's also a parameter which extends\nthe connection timeout during the time the servlet is doing processing. This\nshould take care of this issue.", "id": 35543, "time": "2003-04-18T14:17:54Z", "creator": "remm@apache.org", "creation_time": "2003-04-18T14:17:54Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "So I tested using version 4.1.24;\nhere's the connector configuration :\n    <!-- Define a SSL Coyote HTTP/1.1 Connector on port 8443 -->\n    <!-- <Connector \nclassName=\"org.apache.catalina.connector.http.HttpConnector\" -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"443\" minProcessors=\"32\" maxProcessors=\"128\"\n               enableLookups=\"true\"\n\t       acceptCount=\"100\" debug=\"0\"  connectionTimeout=\"600000\"\n\t       scheme=\"https\" secure=\"true\"\n               useURIValidationHack=\"false\" disableUploadTimeout=\"true\">\n      <!-- <Factory className=\"org.apache.catalina.net.SSLServerSocketFactory\" -\n->\n      <Factory className=\"org.apache.coyote.tomcat4.CoyoteServerSocketFactory\"\n               keystoreFile=\"c:\\appl\\win\\java\\tomcat41\\keystore\" \nkeystorePass=\"test\" \n               clientAuth=\"false\" protocol=\"TLS\" />\n    </Connector>\n\nI set connection timeout to 10 min. and disableuploadTimeout is set to true.\nUsing catalina, it works; using coyote, it doesn't work.\n\nMoreover, when the query runs, the client Internet Explorer says that it's \nopening the web page, using Catalina. It says nothing using Coyote.\n\nAs the called servlet reports errors, when using Coyote, it says that \nthe 'Connection has been shutdown'.\n\nRegards - Jacques Brax\n", "attachment_id": null, "id": 35906, "creator": "jacques.brax@treasury.arcelor.com", "time": "2003-04-23T15:46:53Z", "bug_id": 15635, "creation_time": "2003-04-23T15:46:53Z", "is_private": false}, {"count": 3, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "disableUploadTimeout should be false. ", "id": 35910, "time": "2003-04-23T17:00:00Z", "bug_id": 15635, "creation_time": "2003-04-23T17:00:00Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 15635, "text": "Ok, it works ... having one servlet calling once another one, or at least a \nsmall number of time\nMeanwhile, as my servlet didn't wanted to work, I tried to make an example\nshowing that catalina works, and coyote doesn't.\nIt seems that when a servlet is called a lot of time ( try 300 times ),\ncatalina does it, and coyote stops after 180 times (about)\nSo, here is the example (everything is under /examples):\n\nFirst Test0.html (for calling the servlet Test0)\n-----------------------------------------------------\n<HTML><HEAD><meta HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; iso-8859-\n1\"><meta http-equiv=\"Pragma\" CONTENT=\"no-cache\">\n<meta http-equiv=\"Expires\" CONTENT=\"0\">\n<TITLE> test</TITLE>\n</HEAD><BODY>\n<form action=\"/examples/servlet/Test0\" method=POST >\n<table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"5\" \nbordercolor=\"#000000\">\n<tr> <td>Timer</td><td><input type=text name=Time size=4 value=\"300\" ></td></tr>\n<tr><td><input type=\"submit\" name=\"GETIT\" value=\"Launch \nServlet\"></td></tr></table></FORM><BR>\n</BODY></HTML>\n------------------------------------------------------\n\nThen parameters in the web.xml\n------------------------------------------\n<!-- Test Servlet -->\n  <servlet>\n    <servlet-name>Test0</servlet-name>\n    <servlet-class>Test0</servlet-class>\n  </servlet>\n  <servlet>\n    <servlet-name>Test</servlet-name>\n    <servlet-class>Test</servlet-class>\n  </servlet>\n\nand \n\n<!-- *** TRANSLATION URL *** -->\n <!-- Test0 -->\n   <servlet-mapping>\n        <servlet-name>Test0</servlet-name>\n        <url-pattern>/examples/servlet/Test0</url-pattern>\n    </servlet-mapping>\n <!-- Test -->\n   <servlet-mapping>\n        <servlet-name>Test</servlet-name>\n        <url-pattern>/examples/servlet/Test</url-pattern>\n    </servlet-mapping>\n-----------------------------------------------------------\n\nAnd then the servlet (very simple; Test0 call Test)\nSource for Test0\n-----------------------------------------------------\nimport java.io.*;\nimport java.text.*;\nimport java.util.*;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\n/**\n *\n *\n * Test0 Servlet appele une autre servlet\n */\n\npublic class Test0 extends HttpServlet\n{\n\tpublic void init(ServletConfig config)throws ServletException\t{\n\t\tsuper.init(config);\n\t\tSystem.out.println (\"Load Test0\");\n\t\t}\n// ---------------------- Traite une requete GET ------------------------------\n\tpublic void doPost(HttpServletRequest req, HttpServletResponse res) \nthrows ServletException, IOException\n\t\t{\n\t\tdoGet( req, res );\n\t\t}\n\tpublic void doGet(HttpServletRequest req, HttpServletResponse res)\n\t\tthrows ServletException, IOException\n\t\t{\n\t\tServletOutputStream out = null;\n\t\tHttpSession session = req.getSession(true);\n\t\tres.setContentType(\"text/html\");\n\t\tout = res.getOutputStream();\n\t\t// PrintWriter out = res.getWriter();\n\n\t\t// retrieve parameter\n\t\tString sTime = null;\n\t\tint i=0;\n\t\tsTime = req.getParameter(\"Time\");\n\t\tif (sTime != null && sTime.length() > 0)\n\t\t\ti = 0;\n\t\telse {\n\t\t\tsTime = \"45\";\n\t\t\t}\n\t\tInteger Count1 = new Integer(sTime );\n\t\tint count1 = Count1.intValue();\n\t\tout.println(\"<html><HEAD><title>Test0</title><meta http-\nequiv=\\\"Pragma\\\" CONTENT=\\\"no-cache\\\">\");\n\t\tout.println(\"<meta http-equiv=\\\"Expires\\\" CONTENT=\\\"0\n\\\"></head><body>\");\n\t\tout.println(\"Call another servlet which wait \" + sTime + \" \nseconds\");\n\t\tout.println(\"<br><br>\");\n\t\t// appele une autre servlet autant de fois que demande avec une \ndur\u00e9e de 1 s\n\t\ti=0;\n\t\tfor (i=0; i < count1; i++) {\n\t\t\tSystem.out.println (\"Call Test \" + i);\n\t\t\tRequestDispatcher dispatch = getServletContext\n().getRequestDispatcher( \"/examples/servlet/Test?Time=1\" );\n\t\t\tdispatch.include(req, res);\n\t\t\t}\n\n\t\tSystem.out.println (\"Call Test qui dure \" + count1 );\n\t\tRequestDispatcher dispatch = getServletContext\n().getRequestDispatcher( \"/examples/servlet/Test?Time=\" + sTime );\n\t\tdispatch.include(req, res);\n\n\t\tout.println(\"</html>\");\n\t\tout.close();\n\t\t}\n\tpublic void destroy() {\n\t\tsuper.destroy();\n\t\t}\n\tpublic String getServletInfo() {\n\t\treturn \"Test0\";\n\t\t}\n\t}\n------------------------------------------------\n\nAnd source for Test.java\n-------------------------------------------------\nimport java.io.*;\nimport java.text.*;\nimport java.util.*;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\n/**\n *\n *\n * test Servlet appelee par une autre\n */\n\npublic class Test extends HttpServlet   {\n\tServletContext _context;\n\tprivate SimpleDateFormat simpleDate;\n\n    // ---------------------- Initialisation de l'appli ------------------------\n------\n\tpublic void init( ServletConfig config ) throws ServletException{\n\t\tsuper.init(config);\n\t\t_context \t= config.getServletContext();\n\t\tSystem.out.println (\"Load Test\");\n\t\t}\n\n// ---------------------- Traite une requete GET ------------------------------\n\tpublic void doPost(HttpServletRequest req, HttpServletResponse res) \nthrows ServletException, IOException\n\t\t{\n\t\tdoGet( req, res );\n\t\t}\n    public void doGet(HttpServletRequest req, HttpServletResponse res) throws \nServletException, IOException\n\t\t{\n\t\tDate currentDate;            // Used to get date to display\n\t\tDate currentDate1;            // Used to get date to display\n\t\tSystem.out.println (\"Begin Test\");\n\t\t// Get the user's session\n\t\tHttpSession session = req.getSession(true);\n\n\t\t// PrintWriter out = res.getWriter();\n\t\tServletOutputStream out = res.getOutputStream();\n\t\t// out.println(\"<BR><B>DEBUT Test Servlet</B>\");\n\t\t// retrieve parameter\n\t\tString sTime = null;\n\t\tint i=0;\n\t\tsTime = req.getParameter(\"Time\");\n\t\tInteger Count1 = new Integer(sTime );\n\t\tint count1 = Count1.intValue();\n\t\tcurrentDate =  new Date();\n\t\t// out.println(\"<BR><B>Start Test Servlet waiting for \" + sTime \n+ \" \" + currentDate + \"</B>\");\n\t\t// wait\n\t\ttry {\n\t\t\tThread.currentThread().sleep(1000 * count1);\n\t\t\t}\n\t\tcatch (InterruptedException e) { }\n\n\t\tcurrentDate1 =  new Date();\n \t\tout.println(\"<BR><B>Start Test Servlet waiting for \" + sTime \n+ \" \" + currentDate + \"</B>\");\n\t\tout.println(\"<BR><B>End Test Servlet waiting for \" + sTime \n+ \" \" + currentDate1 + \"</B>\");\n\t\tSystem.out.println (\"End Test\");\n    \t}\n\t// ----------- Info Servlet -------------------------\n\tpublic String getServletInfo() {\n\t\treturn \"Test Servlet request dispatcher\";\n\t\t}\n\tpublic void destroy() {\n\t\tsuper.destroy();\n\t\t}\n\t}\n---------------------------------------------------------------\n\nHope this help; regards - Jacques Brax", "id": 36209, "time": "2003-04-28T07:52:13Z", "creator": "jacques.brax@treasury.arcelor.com", "creation_time": "2003-04-28T07:52:13Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 15635, "is_private": false, "id": 36212, "time": "2003-04-28T09:09:53Z", "creator": "remm@apache.org", "creation_time": "2003-04-28T09:09:53Z", "tags": [], "text": "I do not quite understand what your test does other than waiting 180s.\n\nAnyway, I recommend you modify the CoyoteConnector source to have it match your\ntimeout needs.\nThe following properties are useful on the protocol handler:\n- timeout: Max timeout for request processing when no data upload occurs (when\ndisableUploadTimeout is set to false)\n- soTimeout: Socket timeout for keepalive\n- serverSoTimeout: Server socket accept timeout (will default to 0 in 4.1.25;\n1000 currently)\n\nIf it still does not work for you, the issue will not be resolved (do not reopen\nthe bug unless you can provide a clean patch). I am sure you are aware that\nhaving long running servlets will result in a server which won't scale at all,\nso is therefore *BAD*."}, {"count": 6, "tags": [], "creator": "jacques.brax@treasury.arcelor.com", "attachment_id": null, "text": "Well, at least, thanks for the answer; what I was wondering is why Coyote \nbehaves in a different manner than catalina connector (on my test server, using \nservlets which query a huge database [so it's long]),connection is broken after \naround 30 sec.\nHaving a look at source code for coyote connector, it seems to me that \nconfiguring parameters in the web.xml should be suffisant.\nBut i'll have a more closer look.\nMeanwhile, you told me that disableUploadTimeout should be false, and it seems \nthat it have to be set to true if I want to disable timeout limit.\nRegards - J Brax", "id": 36222, "time": "2003-04-28T11:06:17Z", "bug_id": 15635, "creation_time": "2003-04-28T11:06:17Z", "is_private": false}, {"count": 7, "tags": [], "text": "No, the setting means that you disable setting a different timeout value for\nuploading (otherwise, the main connection timeout is used for everything). If\nyou look deeper, you can see the fields and properties used for fine tuning the\nvarious timeouts. Some extra get/set will be added in Tomcat 4.1.25 to help.", "attachment_id": null, "id": 36224, "creator": "remm@apache.org", "time": "2003-04-28T11:39:55Z", "bug_id": 15635, "creation_time": "2003-04-28T11:39:55Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 26372, "is_private": false, "id": 51046, "creation_time": "2004-01-23T11:40:20Z", "time": "2004-01-23T11:40:20Z", "creator": "mguillemot@yahoo.fr", "text": "Many times I've got a java.lang.ThreadDeath exception when trying to reload a\nwebapp using the ant task. \nThe call stack of the last time is:\n\n2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Associated with\nDeployer 'localhost'\n2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Global resources are\navailable\n2004-01-23 12:25:37 StandardContext[/manager]Manager: restart: Reloading web\napplication at '/jn'\n2004-01-23 12:25:38 StandardContext[/manager]Manager: ManagerServlet.reload[/jn]\njava.lang.ThreadDeath\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1253)\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1213)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:315)\n        at org.apache.log4j.HTMLLayout.format(HTMLLayout.java:129)\n        at org.apache.log4j.net.SMTPAppender.sendBuffer(Unknown Source)\n        at org.apache.log4j.net.SMTPAppender.append(Unknown Source)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n        at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n        at org.apache.log4j.Category.callAppenders(Category.java:187)\n        at org.apache.log4j.Category.forcedLog(Category.java:372)\n        at org.apache.log4j.Category.log(Category.java:864)\n        at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:192)\n        at\norg.apache.catalina.session.StandardManager.start(StandardManager.java:692)\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216)\n        at\norg.apache.catalina.core.StandardContext.reload(StandardContext.java:2992)\n        at\norg.apache.catalina.manager.ManagerServlet.reload(ManagerServlet.java:1019)\n        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:377)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:284)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:204)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:256)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n        at\norg.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:245)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:199)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:594)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:195)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:164)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:156)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:972)\n        at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:211)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:805)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:696)\n        at\norg.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:605)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:677)\n        at java.lang.Thread.run(Thread.java:536)", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 26372, "is_private": false, "text": "This is the old issue of log4j trying to use the previous classloader (reloading\nwill create a new classloader to load class definitions; see bug 3888). Maybe it\nwould be good to leave this bug open so that people can complain using it,\nrather than file duplicates. However, I'd like everyone to know that the \"bug\"\nwill never be fixed.\nYou can probably fix the problem by putting log4 JARs (and the necessary\ncommons-logging wrapper classes) inside the webapp repository.", "id": 51047, "time": "2004-01-23T11:54:07Z", "creator": "remm@apache.org", "creation_time": "2004-01-23T11:54:07Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 26372, "is_private": false, "text": "The problem has long been fixed by adding LogManager.shutdown() the\ncontextDestroyed() method of a servlet context listener.  I have mentioned this\nbefore, but for some reason no one takes notice.  I'm writing it here so that at\nleast there is a reference.\n\nJake", "id": 53355, "time": "2004-03-03T05:19:57Z", "creator": "hoju@visi.com", "creation_time": "2004-03-03T05:19:57Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "niall@pobox.com", "attachment_id": null, "text": "The suggested fix of putting the log4j jars in WEB-INF/lib doesn't seem to work.", "id": 57200, "time": "2004-05-11T14:15:40Z", "bug_id": 26372, "creation_time": "2004-05-11T14:15:40Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 61575, "time": "2004-08-05T11:52:36Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-08-05T11:52:36Z", "text": "We are getting this a lot after recompilation of a class in a web app which \nmakes Tomcat reload the application. \n\nHowever, we DO have the LogManager.shutdown in our servlet context listener but \nit does not solve the problem. \n\n\tpublic void contextDestroyed(ServletContextEvent scE) {\t\t\n\t\tLogManager.shutdown();  \n\t}\n\nInterestingly this has only occurred the past 2 weeks since using 5.0.25. Prior \nto this we developed for 7 months with no problem on 5.0.19. So we just tried \nrolling back to 5.0.19 but it ALSO started happening there too. We find this \nbehaviour very very odd. Furthermore we never had a LogManager.shutdown for \nthose 7 months either. There is a lot of conflicting behaviour going on here \nand I would really like to know how to solve this as right now we are looking \nat having to rip out log4j which is bad news. \n\nSEVERE: Exception invoking periodic operation: \njava.lang.ThreadDeath\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1229)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1189)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.<init>(LoggingEvent.java:241)\n\tat org.apache.log4j.Category.forcedLog(Category.java:431)\n\tat org.apache.log4j.Category.log(Category.java:966)\n\tat org.apache.commons.logging.impl.Log4JLogger.error\n(Log4JLogger.java:195)\n\tat org.apache.catalina.session.StandardManager.start\n(StandardManager.java:659)\n\tat org.apache.catalina.core.StandardContext.start\n(StandardContext.java:4272)\n\tat org.apache.catalina.core.StandardContext.reload\n(StandardContext.java:3021)\n\tat org.apache.catalina.core.StandardContext.backgroundProcess\n(StandardContext.java:4629)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1619)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1628)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1628)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run\n(ContainerBase.java:1608)\n\tat java.lang.Thread.run(Unknown Source)"}, {"count": 5, "tags": [], "bug_id": 26372, "attachment_id": null, "id": 61579, "creation_time": "2004-08-05T13:07:40Z", "time": "2004-08-05T13:07:40Z", "creator": "allistair.crossley@qas.com", "text": "Relates to : http://issues.apache.org/bugzilla/show_bug.cgi?id=27371", "is_private": false}, {"count": 6, "tags": [], "bug_id": 26372, "is_private": false, "id": 64047, "creation_time": "2004-09-22T14:12:14Z", "time": "2004-09-22T14:12:14Z", "creator": "yoavs@computer.org", "text": "Per Jay Paulsen's findings archived at http://marc.theaimsgroup.com/?\nt=109578393000004&r=1&w=2, please try adding the Introspector.flush call and re-\nrunning the test.", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 64434, "time": "2004-09-30T15:05:46Z", "creator": "yoavs@computer.org", "creation_time": "2004-09-30T15:05:46Z", "text": "Unless I hear that the combination of solutions offered in this thread does not \naddress this problem, I will close this issue as WORKFORME soon."}, {"count": 8, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "\nA couple of questions:\n\n1) Does it actually work for you?\n2) Does it work for Allistair Crossley ?\n3) Wouldn't closing the report hide or obfuscate the information contained herein? ", "id": 64437, "time": "2004-09-30T15:12:34Z", "creator": "ceki@apache.org", "creation_time": "2004-09-30T15:12:34Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 26372, "is_private": false, "id": 64439, "creation_time": "2004-09-30T15:17:52Z", "time": "2004-09-30T15:17:52Z", "creator": "allistair.crossley@qas.com", "text": "I'm on it. Will let you know ASAP what the outcome of Introspector.flushCaches\n() is on this bug.", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "Can confirm that the ThreadDeath is still occurring after every class compile \nthat causes a webapp reload by Tomcat resulting in total failure of Tomcat with \nthe following in our contextDestroyed\n\nLogManager.shutdown();\njava.beans.Introspector.flushCaches();\nLogFactory.releaseAll();\n\n", "id": 64471, "time": "2004-10-01T09:22:30Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-01T09:22:30Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "\nAllistair,\n\nDo you observe any difference when you configure log4j only by using \nBasisConfigurator.configure()? I mean without calling PropertyConfigurator or \nDOMConfigruator...", "id": 64473, "time": "2004-10-01T10:23:12Z", "creator": "ceki@apache.org", "creation_time": "2004-10-01T10:23:12Z", "is_private": false}, {"count": 12, "tags": [], "creator": "allistair.crossley@qas.com", "attachment_id": null, "id": 64550, "time": "2004-10-04T09:50:05Z", "bug_id": 26372, "creation_time": "2004-10-04T09:50:05Z", "is_private": false, "text": "i use log4j only by placing log4j.properties into classes in my web \napplication, not programmatically as I think you are suggesting."}, {"count": 13, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "> i use log4j only by placing log4j.properties into classes in my web \n> application, not programmatically as I think you are suggesting.\n\nThe log4j.properties file is parsed by PropertiesConfigurator. So you are indirectly \ninvoking PropertiesConfigurator. \n\nDo you observe any difference if you remove log4j.properties file, i.e. not \nconfigure log4j at all? What do you observe if you call BasicConfigurator.configure() \nmethod?\n", "id": 64551, "time": "2004-10-04T10:02:23Z", "creator": "ceki@apache.org", "creation_time": "2004-10-04T10:02:23Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 64614, "time": "2004-10-05T10:44:48Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-05T10:44:48Z", "text": "can confirm that removal of log4j.properties from web application allows Tomcat \nto reload webapp gracefully after class compilation with dynamic class \nreloading on."}, {"count": 15, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 64616, "time": "2004-10-05T11:43:34Z", "bug_id": 26372, "creation_time": "2004-10-05T11:43:34Z", "is_private": false, "text": "\nTwo questions:\n\n1) Could you include the contents of your log4j.properties file.\n2) Are you 100% sure that the trio\n  - LogManager.shutdown();\n  - java.beans.Introspector.flushCaches();\n  - LogFactory.releaseAll();java.beans.Introspector.flushCaches() \nreally gets called?"}, {"count": 16, "tags": [], "bug_id": 26372, "is_private": false, "text": "OK, \n\nCan confirm that contextDestroyed is called. Discovered LogManager.shutdown(); \nis working because a logging statement afterwards does not materialize but one \nbefore it is fine. System.out.println was used instead. Here is the relevant \nlogging\n\nINFO: Reloading this Context has started\nbefore Renewals Application Destroyed\none Renewals Application Destroyed\ntwo Renewals Application Destroyed\nafter Renewals Application Destroyed\nlog4j:WARN No appenders could be found for logger \n(org.apache.struts.util.PropertyMessageResources).\nlog4j:WARN Please initialize the log4j system properly.\n05-Oct-2004 16:13:38 org.apache.catalina.loader.WebappClassLoader loadClass\nINFO: Illegal access: this web application instance has been stopped already \n(the eventual following stack trace is caused by an error thrown for debugging \npurposes as well as to attempt to terminate the thread which caused the illegal \naccess, and has no functional impact)\n05-Oct-2004 16:13:38 org.apache.catalina.loader.WebappClassLoader loadClass\nINFO: Illegal access: this web application instance has been stopped already \n(the eventual following stack trace is caused by an error thrown for debugging \npurposes as well as to attempt to terminate the thread which caused the illegal \naccess, and has no functional impact)\n05-Oct-2004 16:13:38 org.apache.commons.modeler.Registry registerComponent\nSEVERE: Null component \nCatalina:type=JspMonitor,WebModule=//localhost/,J2EEApplication=none,J2EEServer=\nnone\n05-Oct-2004 16:13:38 \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor \nprocessChildren\nSEVERE: Exception invoking periodic operation: \njava.lang.ThreadDeath\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1229)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1189)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.<init>(LoggingEvent.java:241)\n\tat org.apache.log4j.Category.forcedLog(Category.java:431)\n\tat org.apache.log4j.Category.log(Category.java:966)\n\tat org.apache.commons.logging.impl.Log4JLogger.error\n(Log4JLogger.java:195)\n\tat org.apache.catalina.session.StandardManager.start\n(StandardManager.java:659)\n\tat org.apache.catalina.core.StandardContext.start\n(StandardContext.java:4272)\n\tat org.apache.catalina.core.StandardContext.reload\n(StandardContext.java:3021)\n\tat org.apache.catalina.core.StandardContext.backgroundProcess\n(StandardContext.java:4629)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1619)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1628)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChild\nren(ContainerBase.java:1628)\n\tat \norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run\n(ContainerBase.java:1608)\n\tat java.lang.Thread.run(Unknown Source)\n\nAnd here is the log4j.properties file.\n\n################################################################################\n#\n# Renewals Log4j Configuration\n#\n################################################################################\n\n################################################################################\n#### Root\n################################################################################\n\n#log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n#log4j.appender.stdout.Target=System.out\n#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n#log4j.appender.stdout.layout.ConversionPattern=%d - %5p (%C:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/jakarta-tomcat-5.0.25/logs/root.log\nlog4j.appender.R.MaxFileSize=100KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%d - %5p (%C:%L) - %m%n\n\nlog4j.rootCategory=error, R\n\n################################################################################\n#### Named\n################################################################################\n\nlog4j.logger.Application=debug, ApplicationA\nlog4j.appender.ApplicationA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.ApplicationA.Threshold=DEBUG\nlog4j.appender.ApplicationA.ImmediateFlush=true\nlog4j.appender.ApplicationA.File=c:/jakarta-tomcat-5.0.25/logs/sys-\napplication.log\nlog4j.appender.ApplicationA.Append=true\nlog4j.appender.ApplicationA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ApplicationA.layout.ConversionPattern=%d - %5p (%C:%L) - %m%n\nlog4j.appender.ApplicationA.DatePattern='.'yyyy-MM-dd\n\nlog4j.logger.Errors=debug, ErrorsA\nlog4j.appender.ErrorsA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.ErrorsA.Threshold=DEBUG\nlog4j.appender.ErrorsA.ImmediateFlush=true\nlog4j.appender.ErrorsA.File=c:/jakarta-tomcat-5.0.25/logs/sys-errors.log\nlog4j.appender.ErrorsA.Append=true\nlog4j.appender.ErrorsA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ErrorsA.layout.ConversionPattern=%d - %5p (%C:%L) - %m%n\nlog4j.appender.ErrorsA.DatePattern='.'yyyy-MM-dd\n\n################################################################################\n#### Classes\n################################################################################\n\n#log4j.logger.net.sf.hibernate=debug, ApplicationA\n#log4j.logger.net.sf.hibernate.type=debug, ApplicationA\n#log4j.logger.net.sf.hibernate.tool.hbm2ddl=debug, ApplicationA\n\n################################################################################\n\nlog4j.logger.org.apache.struts=debug, R", "id": 64628, "time": "2004-10-05T15:17:33Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-05T15:17:33Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 64632, "time": "2004-10-05T15:47:03Z", "creator": "ceki@apache.org", "creation_time": "2004-10-05T15:47:03Z", "text": "\nI suppose the following output lines confim that the trio we talked abour earlier is \nbeing called. \n\nINFO: Reloading this Context has started\nbefore Renewals Application Destroyed\none Renewals Application Destroyed\ntwo Renewals Application Destroyed\nafter Renewals Application Destroyed\n\nAm I Correct?\n\nWhat happens if you simplify the log4j.properties file to say:\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%d - %5p (%C:%L) - %m%n\nlog4j.rootCategory=error, console\nlog4j.logger.org.apache.struts=debug\n\nIf you wish, we can continue this discussion directly. My email is Ceki AATT qos \nDDOOTT ch."}, {"count": 18, "tags": [], "creator": "allistair.crossley@qas.com", "attachment_id": null, "id": 64635, "time": "2004-10-05T16:30:51Z", "bug_id": 26372, "creation_time": "2004-10-05T16:30:51Z", "is_private": false, "text": "You are correct. These were just output messages entered between the 3 calls to \nensure they were being called.\n\nWe can confirm ThreadDeath occurs even with the simplified log4j.\n\nCheers."}, {"count": 19, "tags": [], "bug_id": 26372, "is_private": false, "text": "Ceki asked for log4j and commons-logging jar locations. It revealed a disparity \nbetween commons-logging in tomcat's bin and the webapp lib.\n\nInitial tests with our original log4j file and now replacing commons-logging in \nthe webapp with the commons-logging-api version found in tomcat's bin, is \nsuccessful.\n\nI suppose this will disappear from TC 5.5 but it does appear to have gone away \nfor now ..\n\nWe will keep an eye on it, but this appears to be the problem", "id": 64665, "time": "2004-10-06T09:02:13Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-06T09:02:13Z", "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 64751, "time": "2004-10-07T13:13:37Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-07T13:13:37Z", "text": "I wouldn't be quick to conclude this will disappear from Tomcat 5.5.  Tomcat \n5.5. still uses commons-logging (in fact, more heavily than before), and still \nlocates the commons-logging jar on the bin classpath, because it uses it from \nthe very startup of the server.  Tomcat 5.0 and 5.5 both require commons-\nlogging.  What your investigation reveals, I think, is that the version of \ncommons-logging used by the webapp must be the same as that uses by Tomcat \n(which uses the latest stable commons-logging build)."}, {"count": 21, "tags": [], "creator": "remm@apache.org", "text": "I've commented a while ago on how to properly package commons-logging:\n- commons-logging-api goes in the system classloader (it will go first in the\ndelegation order)\n- put the necessary commons-logging wrapper classes for the logger you're using\nat the same spot as your logger JAR\nThis seemed to avoid problems.", "id": 64755, "time": "2004-10-07T13:42:43Z", "bug_id": 26372, "creation_time": "2004-10-07T13:42:43Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 26372, "is_private": false, "text": "If you (any of the people following this thread) want, please suggest text \nthat I can put in the following places:\n- Tomcat's Logging configuration page\n- Tomcat's FAQ\n- Log4J FAQ\n- Other places you find appropriate\n\nOtherwise, I'll come up with some text myself (which will include a link to \nthis Bugzilla issue) and place the text at the above locations.  At that time \nI will close this item, as it's not a Tomcat bug and there's no reason for it \nto stay open.  ", "id": 64886, "time": "2004-10-10T20:56:51Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-10T20:56:51Z", "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "I have found out that the reason I managed to have this problem in the first \nplace is because I upgraded to Struts 1.2.4 recently where the bundled JAR for \ncommon is commons-logging.jar. Would it make sense to rename Tomcat's JAR to \ncommons-logging? Also, is it really not a Tomcat problem that user's cannot use \nAPIs like Struts and who knows what else from Jakarta that demand or come \npackaged with commons-logging? It seems to me that the webapps should work \nfirst and foremost with whatever APIs they like in their LIB and should not \nhave to worry about the application server dying?\n\n", "id": 64913, "time": "2004-10-11T08:18:14Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-11T08:18:14Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 26372, "is_private": false, "text": "There's a significant difference between commons-logging.jar and commons-\nlogging-api.jar, it's not just a rename.  Every version of commons-logging has \nboth distributions and for good reason.\n\nAs for the rant about being able to use whatever library and not wortying about \nthe web server dying: I'd point out it's only 'dying' when you're trying the \napp reload, nor normal usage.  This feature is not mandated by the Spec so \nwe're not obliged to provided it in the first place: it's caused mostly trouble \nand has very limited usage in production environments.  So if you have patches \nfor it, that's great, but the common usage scenario for Tomcat doesn't include \nwebapp reload, and so doesn't suffer from this issue at all.", "id": 65090, "time": "2004-10-13T18:56:44Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-13T18:56:44Z", "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 26372, "is_private": false, "text": "sorry you thought it was a rant, it wasn't meant to come over like that :) i \nsuppose because tomcat has a manager application and reloadable class facility, \ni assumed it should do that gracefully in all circumstances. it is true i don't \nfully appreciate all the issues with this feature so i suppose this is just an \nissue we have to workaround. In fact, the workaround has been listed here now.\n\nIt is also true that this is in our case was always related to a development \ninstance. \n\nI am interested in your comment that reload of webapp is mostly trouble and \nlimited in production environments though. My understanding was that if you \nwant to make a build to production or a patch of some files, you would use ant \nor similar as we do here to reconstruct the WAR to deploy. Does this not \nrequire tomcat being able to reload? In fact, we tell the business the intranet \nwill be down for 5 minutes and post a message page up for inbound requests. We \nstop tomcat, delete the old war and expanded war files and place the new war \nand startup tomcat again. We constantly get irked by the fact that if a bug is \non production we have to wait until the evening to patch it whereas our ASP \ncoutnerparts can so easily hot-patch. We also use JSP precompilation to improve \nperformance so it's not so easy to patch JSPs either.\n\nAnyways! Cheers\n\nPS: this was not a rant ... just inquisitive ;)\n", "id": 65114, "time": "2004-10-14T08:06:45Z", "creator": "allistair.crossley@qas.com", "creation_time": "2004-10-14T08:06:45Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 26372, "is_private": false, "text": "I hope hot deployment and redeployment is a reality. However, there are issues\nwhen the webapp tries to interact with some services which reside in the system\nclassloader (logging here). Packaging webapps a little differently could solve\nthe problems for now.", "id": 65116, "time": "2004-10-14T08:35:00Z", "creator": "remm@apache.org", "creation_time": "2004-10-14T08:35:00Z", "attachment_id": null}, {"count": 27, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 65522, "time": "2004-10-22T17:29:27Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-22T17:29:27Z", "text": "Allistair, I'll be glad to continue this discussion on the mailing list and try \nand explain why I think reloading an app in-place has only limited usage in \nproduction environments.  This (Bugzilla) is not the right forum for \ndiscussions.\n\nI'm closing this item as it's not a Tomcat bug, and a link to it has been added \nto the Tomcat FAQ."}, {"count": 28, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "I ran into this issue, and having written a trivial test case, I can confirm \nthat this zilla has nothing to do with logging (commons or log4j) or parent \nclassloaders etc.  No amount of fiddling with library classloading will fix it.\n\nThe real cause is that Tomcat is invalidating (through a call to stop()) the \nWebappClassLoader belonging to a servlet instance whose service() method runs a \nlittle longer than usual in some conditions (>2 seconds is enough).  This can \nhappen under heavy (server, DB) load, with threads still running in service(), \nand may occur in any lifecycle event that runs StandardWrapper.unload() e.g. \nstop, undeploy, reload, shutdown.  If the longish service() method needs to \nload a class after unload() loses its patience, WebappClassLoader throws a \nThreadDeath.\n\nMight want to leave this one open until I get a chance to log a couple of more \nconcise zillas.\n", "id": 69112, "time": "2004-12-31T04:56:27Z", "creator": "brett_s_r@yahoo.com.au", "creation_time": "2004-12-31T04:56:27Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 69115, "time": "2004-12-31T10:51:14Z", "creator": "remm@apache.org", "creation_time": "2004-12-31T10:51:14Z", "text": "Please do not reopen the report. If you look in the code, you'll see that if you\nissue a stop or reload, it will wait only a limited amount of time for current\nrequests to complete."}, {"count": 30, "tags": [], "bug_id": 26372, "is_private": false, "id": 78546, "creation_time": "2005-08-16T19:57:08Z", "time": "2005-08-16T19:57:08Z", "creator": "cowwoc@bbs.darktech.org", "text": "Sorry, the FAQ points to this issue but it still isn't clear to me how to fix it.\n\nTomcat/bin contains commons-logging-api.jar\nEach webapp ships with its own log4j*.jar files\n\nso what should I be changing in my configuration to prevent a ThreadDeath?\nPlease clarify.", "attachment_id": null}, {"count": 31, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "*** Bug 36250 has been marked as a duplicate of this bug. ***", "id": 78649, "time": "2005-08-18T19:21:47Z", "creator": "remm@apache.org", "creation_time": "2005-08-18T19:21:47Z", "is_private": false}, {"count": 32, "tags": [], "bug_id": 26372, "attachment_id": null, "id": 78828, "creation_time": "2005-08-22T18:24:56Z", "time": "2005-08-22T18:24:56Z", "creator": "remm@apache.org", "text": "*** Bug 36250 has been marked as a duplicate of this bug. ***", "is_private": false}, {"count": 33, "tags": [], "bug_id": 26372, "is_private": false, "id": 79810, "creation_time": "2005-09-12T16:34:53Z", "time": "2005-09-12T16:34:53Z", "creator": "remm@apache.org", "text": "*** Bug 36250 has been marked as a duplicate of this bug. ***", "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 26372, "is_private": false, "id": 79813, "creation_time": "2005-09-12T16:41:17Z", "time": "2005-09-12T16:41:17Z", "creator": "remm@apache.org", "text": "*** Bug 36250 has been marked as a duplicate of this bug. ***", "attachment_id": null}, {"count": 35, "tags": [], "creator": "petr.jiricka@sun.com", "attachment_id": null, "text": "Tomcat developers, do you still insist that this bug is invalid even though it\nhas  4 duplicates?", "id": 82756, "time": "2005-11-23T14:37:39Z", "bug_id": 26372, "creation_time": "2005-11-23T14:37:39Z", "is_private": false}, {"count": 36, "tags": [], "creator": "remm@apache.org", "text": "(In reply to comment #35)\n> Tomcat developers, do you still insist that this bug is invalid even though it\n> has  4 duplicates?\n\nStill in whine mode ? Obviously, duplicates never make something invalid,\nespecially since the 4 duplicates were filed by the same person. Duh.\n\nI have another small tweak which removes the exception in some cases (trading\nthis for a stack trace, possible CL failure, and some memory leaking), but the\nfact remains that the setup you are using for logging is broken. Apparently you\ndon't feel concerned.", "id": 82759, "time": "2005-11-23T15:13:13Z", "bug_id": 26372, "creation_time": "2005-11-23T15:13:13Z", "is_private": false, "attachment_id": null}, {"count": 37, "tags": [], "bug_id": 26372, "attachment_id": null, "id": 83424, "creation_time": "2005-12-08T16:11:33Z", "time": "2005-12-08T16:11:33Z", "creator": "bugzilla-asf@dm.cobite.com", "text": "i think i know how to reproduce and prevent this error.  assistance from the\ntomcat developers could enhance the workaround.\n\nthe problem (for me) seems to stem from bad commons-logging interaction.  the\ncommons-logging that the container uses to log errors from my context ends up\ndiscovering the commons-logging.jar and log4j.jar that I have put in my\nWEB-APP/lib.  the container ends up with instances of classes loaded by the\nWebAppClassloader associated with the initial instance (initial start cycle) of\nthe webapp.  when reload happens, that classloader becomes invalid, and any\nfurther classloading that is attempted through it will cause ThreadDeath.\n\nHowever, any classes previously loaded are (apparently) still OK.  so the main\ncause of ThreadDeath can be avoided if all the classes that need to be loaded\nare loaded while the initial WebAppClassloader is still valid (i.e. before the\nfirst reload).  \n\nthe easiest way to force all the classes to load is to LOG A MESSAGE from the\nappropriate context.  until a message has been logged, not all classes in the\nlogging 'execution path' will have been accessed, and so there will be some\nclass loading that happens during the first logged message.  after that, that\nexecution path will be 'loaded' and can run till the cows come home.\n\nfor me, the easiest thing to do is force a JSP error. maybe have a JSP called\ncant_compile.jsp, and hit it as soon as you start up tomcat.  then you will have\nNO problems until you shutdown tomcat again.\n\nan easy solution not requiring any changes at all is to put:\n\nlog4j.logger.org.apache.catalina.session=DEBUG\n\ninto log4j.properties.  you will not get TOO much debug crapola in your logs\n(about 15 lines on startup/shutdown).\n\nhere's where the tomcat developers come in.  if tomcat logged something as soon\nas startup is complete - AT A SUFFICIENTLY HIGH LOGGING LEVEL (eg info) that it\nwill be feasible to have logging enabled at that level. \n\nin particular, changing the debug statement at line 655 of StandardManager.java\nto info seems a likely candidate.\n\nthen users could set (in log4j.properties or equiv):\n\nlog4j.logger.org.apache.catalina.session=INFO\n\nand not get superfluous debugging statements.\n\n\n", "is_private": false}, {"count": 38, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 83512, "time": "2005-12-10T15:56:48Z", "creator": "darryl@darrylmiles.org", "creation_time": "2005-12-10T15:56:48Z", "text": "(In reply to comment #37)\n> i think i know how to reproduce and prevent this error.  assistance from the\n> tomcat developers could enhance the workaround.\n\nI would disagree, your suggestion simply masks your own problem.\n\nLogging isn't the only culprit in the world, and your solution only touches (and\nloads) those segments of the logging infrastructure it uses at that time for\nthat message.\n\n\nWhat TC could do to help the developer is improve that ThreadDeath message and\nhelp the developer identify the exact thread of execution (by name and thread\nid) and the class it was trying to load at the time.  This feels like a step in\nthe right direction it helps the developers stamp out their bugs and does not\nencrouch into an ugly half-baked solution the maintainers rightfully want to\nkeep out.\n\n\nI'm still toying with the idea of keeping generation(s) of WebAppClassLoader's\naround, this idea does have merit for me especially when you keep generations of\nall modifications to the web-app around (between container restarts) there are\nother good side effects too like hot JAR replace on Win32 where JAR locking\nmight be an issue.  But this sort of development process has to be driven from\nan IDE.\n"}, {"count": 39, "tags": [], "bug_id": 26372, "attachment_id": null, "is_private": false, "id": 83725, "time": "2005-12-16T06:51:03Z", "creator": "boni@yasutech.com", "creation_time": "2005-12-16T06:51:03Z", "text": "(In reply to comment #38)\nHi, \n\nWe are getting this issue, any pointers to fix this would greatly help us. I \ndon' see any practical solution being offered in any of the responses below. \nAny help would be greatly appreciated. There is no LOG4J in the stack trace!!!\n\nutility.UpdateHelper is our application code.\n\n\nthanks in advance\nboni\nTomcat Version: 5.0.28 (using AXIS 1.1), windows platform\n\nThe stack trace is :\njava.lang.ThreadDeath\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1229)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1189)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:88)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:195)\n\tat javax.xml.parsers.DocumentBuilderFactory.newInstance\n(DocumentBuilderFactory.java:98)\n\tat utility.UpdateHelper.TextValueOfElement(UpdateHelper.java:200)\n\tat sun.reflect.GeneratedMethodAccessor70.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat com.yasutech.qrules.network.k.if(ExpressionEvaluator.java:1018)\n\tat com.yasutech.qrules.network.k.a(ExpressionEvaluator.java:446)\n\tat com.yasutech.qrules.network.k.if(ExpressionEvaluator.java:88)\n\tat com.yasutech.qrules.network.Activation.evaluateExpression\n(Activation.java:964)\n\tat com.yasutech.qrules.network.Activation.changeVariable\n(Activation.java:640)\n\tat com.yasutech.qrules.network.Activation.performAssignAction\n(Activation.java:626)\n\tat com.yasutech.qrules.network.Activation.decideCourseOfAction\n(Activation.java:204)\n\tat com.yasutech.qrules.network.Activation.fire(Activation.java:160)\n\tat com.yasutech.qrules.network.r.try(Agenda.java:94)\n\tat com.yasutech.qrules.network.Rete.run(Rete.java:1330)\n\tat com.yasutech.qrules.rete.ReteAdapter.fireRules(ReteAdapter.java:112)\n\tat com.yasutech.qrules.rete.ReteRuleEngineAPIHelper.evaluateFacts\n(ReteRuleEngineAPIHelper.java:620)\n\tat com.yasutech.qrules.rete.ReteRuleEngineAPIHelper.executeRuleset\n(ReteRuleEngineAPIHelper.java:333)\n\tat com.yasutech.qrules.rete.ReteEngine.invokeRuleset\n(ReteEngine.java:964)\n\tat webservice.example1.server.MyRuleEngineService.invokeRuleset\n(MyRuleEngineService.java:366)\n\tat sun.reflect.GeneratedMethodAccessor56.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.axis.providers.java.RPCProvider.invokeMethod\n(RPCProvider.java:402)\n\tat org.apache.axis.providers.java.RPCProvider.processMessage\n(RPCProvider.java:309)\n\tat org.apache.axis.providers.java.JavaProvider.invoke\n(JavaProvider.java:333)\n\tat org.apache.axis.strategies.InvocationStrategy.visit\n(InvocationStrategy.java:71)\n\tat org.apache.axis.SimpleChain.doVisiting(SimpleChain.java:150)\n\tat org.apache.axis.SimpleChain.invoke(SimpleChain.java:120)\n\tat org.apache.axis.handlers.soap.SOAPService.invoke\n(SOAPService.java:481)\n\tat org.apache.axis.server.AxisServer.invoke(AxisServer.java:323)\n\tat org.apache.axis.transport.http.AxisServlet.doPost\n(AxisServlet.java:854)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:709)\n\tat org.apache.axis.transport.http.AxisServletBase.service\n(AxisServletBase.java:339)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:237)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:157)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:214)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:104)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:520)\n\tat org.apache.catalina.core.StandardContextValve.invokeInternal\n(StandardContextValve.java:198)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:152)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:104)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:520)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:137)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:104)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:118)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:102)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:520)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:109)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:104)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:520)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929)\n\tat org.apache.coyote.tomcat5.CoyoteAdapter.service\n(CoyoteAdapter.java:160)\n\tat org.apache.coyote.http11.Http11Processor.process\n(Http11Processor.java:799)\n\tat \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:705)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:577)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:683)\n\tat java.lang.Thread.run(Thread.java:595)\n> (In reply to comment #37)\n> > i think i know how to reproduce and prevent this error.  assistance from the\n> > tomcat developers could enhance the workaround.\n> I would disagree, your suggestion simply masks your own problem.\n> Logging isn't the only culprit in the world, and your solution only touches \n(and\n> loads) those segments of the logging infrastructure it uses at that time for\n> that message.\n> What TC could do to help the developer is improve that ThreadDeath message and\n> help the developer identify the exact thread of execution (by name and thread\n> id) and the class it was trying to load at the time.  This feels like a step \nin\n> the right direction it helps the developers stamp out their bugs and does not\n> encrouch into an ugly half-baked solution the maintainers rightfully want to\n> keep out.\n> I'm still toying with the idea of keeping generation(s) of WebAppClassLoader's\n> around, this idea does have merit for me especially when you keep generations \nof\n> all modifications to the web-app around (between container restarts) there are\n> other good side effects too like hot JAR replace on Win32 where JAR locking\n> might be an issue.  But this sort of development process has to be driven from\n> an IDE.\n\n"}, {"count": 40, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "(In reply to comment #39)\nSome additional information:\n\nThis ThreadDeath is just killing the tomcat (java.exe process itself disappears \nfrom the process list). We have to restart tomcat. Java version being used is \njdk 1.5.0_04. \n\nthanks\nboni\n> (In reply to comment #38)\n> Hi, \n> We are getting this issue, any pointers to fix this would greatly help us. I \n> don' see any practical solution being offered in any of the responses below. \n> Any help would be greatly appreciated. There is no LOG4J in the stack trace!!!\n> utility.UpdateHelper is our application code.\n> thanks in advance\n> boni\n> Tomcat Version: 5.0.28 (using AXIS 1.1), windows platform\n> The stack trace is :\n> java.lang.ThreadDeath\n> \tat org.apache.catalina.loader.WebappClassLoader.loadClass\n> (WebappClassLoader.java:1229)\n> \tat org.apache.catalina.loader.WebappClassLoader.loadClass\n> (WebappClassLoader.java:1189)\n> \tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:88)\n> \tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:195)\n> \tat javax.xml.parsers.DocumentBuilderFactory.newInstance\n> (DocumentBuilderFactory.java:98)\n> \tat utility.UpdateHelper.TextValueOfElement(UpdateHelper.java:200)\n> \tat sun.reflect.GeneratedMethodAccessor70.invoke(Unknown Source)\n> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n> (DelegatingMethodAccessorImpl.java:25)\n> \tat java.lang.reflect.Method.invoke(Method.java:585)\n> \tat com.yasutech.qrules.network.k.if(ExpressionEvaluator.java:1018)\n> \tat com.yasutech.qrules.network.k.a(ExpressionEvaluator.java:446)\n> \tat com.yasutech.qrules.network.k.if(ExpressionEvaluator.java:88)\n> \tat com.yasutech.qrules.network.Activation.evaluateExpression\n> (Activation.java:964)\n> \tat com.yasutech.qrules.network.Activation.changeVariable\n> (Activation.java:640)\n> \tat com.yasutech.qrules.network.Activation.performAssignAction\n> (Activation.java:626)\n> \tat com.yasutech.qrules.network.Activation.decideCourseOfAction\n> (Activation.java:204)\n> \tat com.yasutech.qrules.network.Activation.fire(Activation.java:160)\n> \tat com.yasutech.qrules.network.r.try(Agenda.java:94)\n> \tat com.yasutech.qrules.network.Rete.run(Rete.java:1330)\n> \tat com.yasutech.qrules.rete.ReteAdapter.fireRules(ReteAdapter.java:112)\n> \tat com.yasutech.qrules.rete.ReteRuleEngineAPIHelper.evaluateFacts\n> (ReteRuleEngineAPIHelper.java:620)\n> \tat com.yasutech.qrules.rete.ReteRuleEngineAPIHelper.executeRuleset\n> (ReteRuleEngineAPIHelper.java:333)\n> \tat com.yasutech.qrules.rete.ReteEngine.invokeRuleset\n> (ReteEngine.java:964)\n> \tat webservice.example1.server.MyRuleEngineService.invokeRuleset\n> (MyRuleEngineService.java:366)\n> \tat sun.reflect.GeneratedMethodAccessor56.invoke(Unknown Source)\n> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n> (DelegatingMethodAccessorImpl.java:25)\n> \tat java.lang.reflect.Method.invoke(Method.java:585)\n> \tat org.apache.axis.providers.java.RPCProvider.invokeMethod\n> (RPCProvider.java:402)\n> \tat org.apache.axis.providers.java.RPCProvider.processMessage\n> (RPCProvider.java:309)\n> \tat org.apache.axis.providers.java.JavaProvider.invoke\n> (JavaProvider.java:333)\n> \tat org.apache.axis.strategies.InvocationStrategy.visit\n> (InvocationStrategy.java:71)\n> \tat org.apache.axis.SimpleChain.doVisiting(SimpleChain.java:150)\n> \tat org.apache.axis.SimpleChain.invoke(SimpleChain.java:120)\n> \tat org.apache.axis.handlers.soap.SOAPService.invoke\n> (SOAPService.java:481)\n> \tat org.apache.axis.server.AxisServer.invoke(AxisServer.java:323)\n> \tat org.apache.axis.transport.http.AxisServlet.doPost\n> (AxisServlet.java:854)\n> \tat javax.servlet.http.HttpServlet.service(HttpServlet.java:709)\n> \tat org.apache.axis.transport.http.AxisServletBase.service\n> (AxisServletBase.java:339)\n> \tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n> \tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n> (ApplicationFilterChain.java:237)\n> \tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n> (ApplicationFilterChain.java:157)\n> \tat org.apache.catalina.core.StandardWrapperValve.invoke\n> (StandardWrapperValve.java:214)\n> \tat org.apache.catalina.core.StandardValveContext.invokeNext\n> (StandardValveContext.java:104)\n> \tat org.apache.catalina.core.StandardPipeline.invoke\n> (StandardPipeline.java:520)\n> \tat org.apache.catalina.core.StandardContextValve.invokeInternal\n> (StandardContextValve.java:198)\n> \tat org.apache.catalina.core.StandardContextValve.invoke\n> (StandardContextValve.java:152)\n> \tat org.apache.catalina.core.StandardValveContext.invokeNext\n> (StandardValveContext.java:104)\n> \tat org.apache.catalina.core.StandardPipeline.invoke\n> (StandardPipeline.java:520)\n> \tat org.apache.catalina.core.StandardHostValve.invoke\n> (StandardHostValve.java:137)\n> \tat org.apache.catalina.core.StandardValveContext.invokeNext\n> (StandardValveContext.java:104)\n> \tat org.apache.catalina.valves.ErrorReportValve.invoke\n> (ErrorReportValve.java:118)\n> \tat org.apache.catalina.core.StandardValveContext.invokeNext\n> (StandardValveContext.java:102)\n> \tat org.apache.catalina.core.StandardPipeline.invoke\n> (StandardPipeline.java:520)\n> \tat org.apache.catalina.core.StandardEngineValve.invoke\n> (StandardEngineValve.java:109)\n> \tat org.apache.catalina.core.StandardValveContext.invokeNext\n> (StandardValveContext.java:104)\n> \tat org.apache.catalina.core.StandardPipeline.invoke\n> (StandardPipeline.java:520)\n> \tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929)\n> \tat org.apache.coyote.tomcat5.CoyoteAdapter.service\n> (CoyoteAdapter.java:160)\n> \tat org.apache.coyote.http11.Http11Processor.process\n> (Http11Processor.java:799)\n> \tat \n> \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\n> n(Http11Protocol.java:705)\n> \tat org.apache.tomcat.util.net.TcpWorkerThread.runIt\n> (PoolTcpEndpoint.java:577)\n> \tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n> (ThreadPool.java:683)\n> \tat java.lang.Thread.run(Thread.java:595)\n> > (In reply to comment #37)\n> > > i think i know how to reproduce and prevent this error.  assistance from \nthe\n> > > tomcat developers could enhance the workaround.\n> > I would disagree, your suggestion simply masks your own problem.\n> > Logging isn't the only culprit in the world, and your solution only touches \n> (and\n> > loads) those segments of the logging infrastructure it uses at that time for\n> > that message.\n> > What TC could do to help the developer is improve that ThreadDeath message \nand\n> > help the developer identify the exact thread of execution (by name and \nthread\n> > id) and the class it was trying to load at the time.  This feels like a \nstep \n> in\n> > the right direction it helps the developers stamp out their bugs and does \nnot\n> > encrouch into an ugly half-baked solution the maintainers rightfully want to\n> > keep out.\n> > I'm still toying with the idea of keeping generation(s) of \nWebAppClassLoader's\n> > around, this idea does have merit for me especially when you keep \ngenerations \n> of\n> > all modifications to the web-app around (between container restarts) there \nare\n> > other good side effects too like hot JAR replace on Win32 where JAR locking\n> > might be an issue.  But this sort of development process has to be driven \nfrom\n> > an IDE.\n\n", "id": 83726, "time": "2005-12-16T06:56:19Z", "creator": "boni@yasutech.com", "creation_time": "2005-12-16T06:56:19Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 26372, "is_private": false, "id": 83734, "creation_time": "2005-12-16T09:02:02Z", "time": "2005-12-16T09:02:02Z", "creator": "satishkumar@yasutech.com", "text": "(In reply to comment #0)\n> Many times I've got a java.lang.ThreadDeath exception when trying to reload a\n> webapp using the ant task. \n> The call stack of the last time is:\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Associated with\n> Deployer 'localhost'\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Global resources \nare\n> available\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: restart: Reloading web\n> application at '/jn'\n> 2004-01-23 12:25:38 StandardContext[/manager]Manager: ManagerServlet.reload\n[/jn]\n> java.lang.ThreadDeath\n>         at\n> org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1253)\n>         at\n> org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1213)\n>         at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:315)\n>         at org.apache.log4j.HTMLLayout.format(HTMLLayout.java:129)\n>         at org.apache.log4j.net.SMTPAppender.sendBuffer(Unknown Source)\n>         at org.apache.log4j.net.SMTPAppender.append(Unknown Source)\n>         at org.apache.log4j.AppenderSkeleton.doAppend\n(AppenderSkeleton.java:221)\n>         at\n> org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:57)\n>         at org.apache.log4j.Category.callAppenders(Category.java:187)\n>         at org.apache.log4j.Category.forcedLog(Category.java:372)\n>         at org.apache.log4j.Category.log(Category.java:864)\n>         at org.apache.commons.logging.impl.Log4JLogger.error\n(Log4JLogger.java:192)\n>         at\n> org.apache.catalina.session.StandardManager.start(StandardManager.java:692)\n>         at org.apache.catalina.core.StandardContext.start\n(StandardContext.java:4216)\n>         at\n> org.apache.catalina.core.StandardContext.reload(StandardContext.java:2992)\n>         at\n> org.apache.catalina.manager.ManagerServlet.reload(ManagerServlet.java:1019)\n>         at org.apache.catalina.manager.ManagerServlet.doGet\n(ManagerServlet.java:377)\n>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)\n>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n>         at\n> org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:284)\n>         at\n> org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:204)\n>         at\n> org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:256)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardContextValve.invokeInternal\n(StandardContextValve.java:245)\n>         at\n> org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:199)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.authenticator.AuthenticatorBase.invoke\n(AuthenticatorBase.java:594)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:149)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:195)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:164)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:149)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:156)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:972)\n>         at org.apache.coyote.tomcat5.CoyoteAdapter.service\n(CoyoteAdapter.java:211)\n>         at\n> org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:805)\n>         at\n> \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:696)\n>         at\n> org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:605)\n>         at\n> org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:677)\n>         at java.lang.Thread.run(Thread.java:536)\n\n(In reply to comment #0)\n> Many times I've got a java.lang.ThreadDeath exception when trying to reload a\n> webapp using the ant task. \n> The call stack of the last time is:\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Associated with\n> Deployer 'localhost'\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: init: Global resources \nare\n> available\n> 2004-01-23 12:25:37 StandardContext[/manager]Manager: restart: Reloading web\n> application at '/jn'\n> 2004-01-23 12:25:38 StandardContext[/manager]Manager: ManagerServlet.reload\n[/jn]\n> java.lang.ThreadDeath\n>         at\n> org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1253)\n>         at\n> org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1213)\n>         at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:315)\n>         at org.apache.log4j.HTMLLayout.format(HTMLLayout.java:129)\n>         at org.apache.log4j.net.SMTPAppender.sendBuffer(Unknown Source)\n>         at org.apache.log4j.net.SMTPAppender.append(Unknown Source)\n>         at org.apache.log4j.AppenderSkeleton.doAppend\n(AppenderSkeleton.java:221)\n>         at\n> org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:57)\n>         at org.apache.log4j.Category.callAppenders(Category.java:187)\n>         at org.apache.log4j.Category.forcedLog(Category.java:372)\n>         at org.apache.log4j.Category.log(Category.java:864)\n>         at org.apache.commons.logging.impl.Log4JLogger.error\n(Log4JLogger.java:192)\n>         at\n> org.apache.catalina.session.StandardManager.start(StandardManager.java:692)\n>         at org.apache.catalina.core.StandardContext.start\n(StandardContext.java:4216)\n>         at\n> org.apache.catalina.core.StandardContext.reload(StandardContext.java:2992)\n>         at\n> org.apache.catalina.manager.ManagerServlet.reload(ManagerServlet.java:1019)\n>         at org.apache.catalina.manager.ManagerServlet.doGet\n(ManagerServlet.java:377)\n>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)\n>         at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n>         at\n> org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:284)\n>         at\n> org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:204)\n>         at\n> org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:256)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardContextValve.invokeInternal\n(StandardContextValve.java:245)\n>         at\n> org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:199)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.authenticator.AuthenticatorBase.invoke\n(AuthenticatorBase.java:594)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:149)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:195)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:164)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:149)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at\n> org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:156)\n>         at\n> org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n>         at\n> org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:564)\n>         at org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:972)\n>         at org.apache.coyote.tomcat5.CoyoteAdapter.service\n(CoyoteAdapter.java:211)\n>         at\n> org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:805)\n>         at\n> \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:696)\n>         at\n> org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:605)\n>         at\n> org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:677)\n>         at java.lang.Thread.run(Thread.java:536)\n\n", "attachment_id": null}, {"count": 42, "tags": [], "bug_id": 26372, "attachment_id": null, "text": "For your information, I've tracked down at least one underlying cause of this\nkind of failure. During shutdown, Tomcat tries to serialize HTTP sessions to\ndisk. If a session contains Hibernate objects associated with a hibernate\nsession which has already been closed, then object.writeReplace() will throw an\nexception. This, in turn, causes the serialization process to failure and\nTomcat's reload operation fails as well.\n\nI'd expect Tomcat to be more robust. Specifically, it should emit a warning that\n\"serialization on shutdown\" has failed but should not fail the overall reload\noperation. Secondly, if an exception is thrown during serialization it should\nprint out the stack-trace, not just the exception message (which is what it does\nnow).", "id": 84996, "time": "2006-01-25T17:09:18Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2006-01-25T17:09:18Z", "is_private": false}, {"count": 43, "tags": [], "creator": "allistair.crossley@qas.com", "attachment_id": null, "id": 84998, "time": "2006-01-25T17:12:52Z", "bug_id": 26372, "creation_time": "2006-01-25T17:12:52Z", "is_private": false, "text": "hm .. we see thread death still once in a while and i've noticed a couple \nrecently that occur around the time of a stack trace serializable exception. we \nstore disconnected hibernate pojos in session objects also."}, {"count": 44, "tags": [], "bug_id": 26372, "is_private": false, "text": "(In reply to comment #43)\n> hm .. we see thread death still once in a while and i've noticed a couple \n> recently that occur around the time of a stack trace serializable exception. we \n> store disconnected hibernate pojos in session objects also.\n\nAfter studying this thread for a while, I finally reached the previous post and\nit opened my eyes. Never place *connected* hibernate pojos in the session or\na ThreadDeath will occur on reload.", "id": 91719, "time": "2006-07-29T22:30:44Z", "creator": "downeyt@cs.fiu.edu", "creation_time": "2006-07-29T22:30:44Z", "attachment_id": null}]
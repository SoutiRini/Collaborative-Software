[{"count": 0, "tags": [], "bug_id": 37882, "is_private": false, "text": "Symptoms:\n\nIf catalina.policy is changed to include grants that have any principals\nspecified (including wildcard principals \"* *\") then any web application that is\nprotected with a security constraint will cause a\njava.lang.ClassCircularityError to be thrown when an attempt is made to log into it.\n\nHow to reproduce:\n\n1. In the jsp-examples web application edit web.xml and comment out or delete\nthe following lines:\n\n<servlet>\n  <servlet-name>org.apache.jsp.security.protected_.index_jsp</servlet-name>\n  <servlet-class>org.apache.jsp.security.protected_.index_jsp</servlet-class>\n</servlet>\n\n<servlet-mapping>\n  <servlet-name>org.apache.jsp.security.protected_.index_jsp</servlet-name>\n  <url-pattern>/security/protected/index.jsp</url-pattern>\n</servlet-mapping>\n\n2. Add the following grant to catalina.policy:\n  grant principal * * {\n      permission java.util.PropertyPermission \"*\", \"read\";\n  };\n\n3. Start tomcat with the security manager enabled (-security).\n\n4. Attempt to log into the jsp-examples protected application with the following\nURL (modified to suit of course)\n  http://<ip address>:<port>/jsp-examples/security/protected/index.jsp\n\nYou should then see the following exception:\n\njava.lang.ClassCircularityError: WILDCARD_PRINCIPAL_CLASS\n\tjava.lang.Class.forName0(Native Method)\n\tjava.lang.Class.forName(Class.java:242)\n\tsun.security.provider.PolicyFile.addPermissions(PolicyFile.java:1403)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1307)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1270)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1211)\n\tsun.security.provider.PolicyFile.implies(PolicyFile.java:1166)\n\tjava.security.ProtectionDomain.implies(ProtectionDomain.java:195)\n\tjava.security.AccessControlContext.checkPermission(AccessControlContext.java:249)\n\tjava.security.AccessController.checkPermission(AccessController.java:427)\n\tjava.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n\tjava.lang.SecurityManager.checkRead(SecurityManager.java:871)\n\tjava.io.File.exists(File.java:700)\n\torg.apache.naming.resources.FileDirContext.file(FileDirContext.java:826)\n\torg.apache.naming.resources.FileDirContext.lookup(FileDirContext.java:210)\n\torg.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:293)\n\torg.apache.catalina.loader.WebappClassLoader.findResourceInternal(WebappClassLoader.java:1851)\n\torg.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1716)\n\torg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:866)\n\torg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1319)\n\torg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1198)\n\tjava.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tjava.lang.Class.forName0(Native Method)\n\tjava.lang.Class.forName(Class.java:242)\n\tsun.security.provider.PolicyFile.addPermissions(PolicyFile.java:1403)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1307)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1270)\n\tsun.security.provider.PolicyFile.getPermissions(PolicyFile.java:1211)\n\tsun.security.provider.PolicyFile.implies(PolicyFile.java:1166)\n\tjava.security.ProtectionDomain.implies(ProtectionDomain.java:195)\n\tjava.security.AccessControlContext.checkPermission(AccessControlContext.java:249)\n\tjava.security.AccessController.checkPermission(AccessController.java:427)\n\tjava.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n\tjava.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1512)\n\tsun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:265)\n\tjava.lang.ClassLoader.loadClass(ClassLoader.java:299)\n\tjava.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\tjava.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\torg.apache.jasper.servlet.JspServletWrapper.<init>(JspServletWrapper.java:101)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:307)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:264)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tjava.lang.reflect.Method.invoke(Method.java:585)\n\torg.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:243)\n\tjava.security.AccessController.doPrivileged(Native Method)\n\tjavax.security.auth.Subject.doAsPrivileged(Subject.java:517)\n\torg.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:275)\n\torg.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:161)\n\nNotes:\n\nThe same error will occur no matter what principal class you try. It looks like\nthe code is trying to load the principal class when refreshing the policy but\nthen checks its permission to load the class and trys to refresh the policy to\ndo that and then gets the ClassCircularityError.\n\nNote that the error will not occur if you leave web.xml as it is. This is\nobviously a point of some importance but the error was originally seen with our\nweb application that has all of its JSP's mapped to servlets in web.xml using\nsimilar declarations created by JSPC so it doesn't appear that modifying web.xml\nis going to help us in this regard.\n\nThis problem has been seen by other people. One of them proposed moving all\nclasses to the shared directory but this had no effect in our case. Here are\nsome references:\n\nhttp://marc.theaimsgroup.com/?l=tomcat-user&m=108497966630946&w=2\nhttp://mail-archives.apache.org/mod_mbox/jakarta-tomcat-user/200408.mbox/%3CBC6E0186-E532-11D8-B5E8-000A95B26EEC@suranyami.com%3E\n\nFinally, as noted in the second reference, the problem doesn't seem to happen in\ntomcat 5.0.19 (but then we have other problems, as well as having to go\nbackwards in tomcat revisions)", "id": 83586, "time": "2005-12-13T02:06:54Z", "creator": "james.woods@symbionetworks.com", "creation_time": "2005-12-13T02:06:54Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 37882, "is_private": false, "text": "After comparing SecurityUtil.java in 5.0.19 to 5.0.28 it can be seen that in\n5.0.19 the principal was not being associated with the subject. It seems likely\nthen that the reason that the ClassCircularityError did not appear under 5.0.19\nwas simply because the security check failed because the subject had no\nprincipals and it was looking at a grant that had principals specified. In turn\nthis avoided the security code needing to load the principal class and hence no\nClassCircularityError.", "id": 83587, "time": "2005-12-13T05:31:42Z", "creator": "james.woods@symbionetworks.com", "creation_time": "2005-12-13T05:31:42Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "james.woods@symbionetworks.com", "is_private": false, "count": 2, "id": 83615, "time": "2005-12-13T22:33:53Z", "bug_id": 37882, "creation_time": "2005-12-13T22:33:53Z", "text": "In further investigation we built the 5.5.14 source and ran that instead. We\nfound that in this case that all secured applications (including the management\napplication) were affected by this error."}, {"count": 3, "tags": [], "bug_id": 37882, "attachment_id": null, "text": "Suggested patch?", "id": 87937, "time": "2006-04-13T18:28:56Z", "creator": "yoavs@computer.org", "creation_time": "2006-04-13T18:28:56Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "james.woods@symbionetworks.com", "is_private": false, "count": 4, "id": 88181, "time": "2006-04-17T23:36:53Z", "bug_id": 37882, "creation_time": "2006-04-17T23:36:53Z", "text": "(In reply to comment #3)\n> Suggested patch?\n\nWe've since written our own policy implementation that bypasses the Sun\nimplementation (we were going to do this anyway as we wanted to use a database\nas our policy repository). Our hack to get around the ClassCircularityError is\nto always grant java.io.FilePermission, java.lang.RuntimePermission\n\"accessClassInPackage\", and java.lang.RuntimePermission \"defineClassInPackage\"\nwhen the file or class in question relates to our Principal class. Not very\nelegant I know but it works for us.\n\nIf we could get access to the Sun policy implementation source code we might be\nable to work out why the error occurred in the first place."}, {"count": 5, "tags": [], "bug_id": 37882, "is_private": false, "text": "any updates on this bug ... any patch rleased", "id": 93565, "time": "2006-09-14T08:38:23Z", "creator": "maris_sentient@yahoo.com", "creation_time": "2006-09-14T08:38:23Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 37882, "is_private": false, "text": "maris, I would use James' workaround for now.  As he said, it might not be the\nprettiest, but it works.  Since the bug appears to be in Sun's policy\nimplementation, you might want to check out their BugParade.", "id": 97256, "time": "2006-12-24T19:41:49Z", "creator": "yoavs@computer.org", "creation_time": "2006-12-24T19:41:49Z", "attachment_id": null}]
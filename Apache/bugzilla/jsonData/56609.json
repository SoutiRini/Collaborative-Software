[{"count": 0, "tags": [], "creator": "dlazerka@gmail.com", "attachment_id": null, "id": 175746, "time": "2014-06-09T17:46:36Z", "bug_id": 56609, "creation_time": "2014-06-09T17:46:36Z", "is_private": false, "text": "WorkbookFactory.create() does not close the filesystem it opens, so after some time server JVM crashes with \"Too many open files\" error.\n\nI've read bug 56537, but disagree the proposed workaround -- to copy-paste create() source code, because it's not evident that it leaks resource (until it goes to production). There's no warnings in create() javadoc about the leak, so there's no reason for user to not trust it does the right thing.\n\nI think it's better to not have the method at all, to force user to care about closing file handles (before the buggy code is pushed to production servers, not after). In the way it is currently, it's certainly not industry-reliable: it not only stops creating Workbook-s, it crashes the whole JVM with all the services in the JVM.\n\nOr, to make it to close file handles automatically in any way you prefer."}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 175747, "time": "2014-06-09T18:37:01Z", "bug_id": 56609, "creation_time": "2014-06-09T18:37:01Z", "text": "The JavaDocs already have a note on this, see http://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/WorkbookFactory.html#create%28java.io.File%29 - \"Note that for Workbooks opened this way, it is not possible to explicitly close the underlying File resource.\"\n\nI believe that these files should be cleaned up during garbage collection, assuming you don't have references to them, so for most people it won't be a problem\n\nIf someone is able to come up with a new pattern which maintains the simplicity of WorkbookFactory and the low memory footprint of using a File (vs a Stream), and also allows for explicit closing, then we'll happily apply that!"}, {"count": 2, "tags": [], "text": "As part of Bug 56537 we have added interface Closeable to the Workbook class which means resources can be freed by properly closing the object after use. Javadoc will be updated as well to reflect this. \n\nSo I think this is effectively a duplicate now.\n\n*** This bug has been marked as a duplicate of bug 56537 ***", "attachment_id": null, "bug_id": 56609, "id": 176159, "time": "2014-07-02T15:03:02Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-07-02T15:03:02Z", "is_private": false}, {"count": 3, "tags": [], "text": "Thanks for the JavaDoc.\nNick Burch, the files are not cleaned up during garbage collection, because they are not Java objects -- these are lower level system resources (unix file handles). Once a process goes over the limit of open file handles, OS prevents it from opening new ones. For JVM that means crash. We found out that on production :)\nThat's why I was advocating removing the method at all -- because it crashes the whole system, not only POI-related features.", "is_private": false, "bug_id": 56609, "id": 176169, "time": "2014-07-02T18:03:00Z", "creator": "dlazerka@gmail.com", "creation_time": "2014-07-02T18:03:00Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 43174, "text": "Hi,\n\nIf SESSION.ser file was invalid, because Tomcat had been killed or something,\nthen EOFException would be thrown.\nBut StandardManager doesn't delete the invalid session file.\nSo if Tomcat is restarted, EOFException will be thrown repeatedly.\n\njava.io.EOFException\n\tat java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2232)\n\tat\njava.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:2698)\n\tat java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:750)\n\tat java.io.ObjectInputStream.<init>(ObjectInputStream.java:268)\n\tat\norg.apache.catalina.util.CustomObjectInputStream.<init>(CustomObjectInputStream.java:57)\n\tat org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:361)\n\tat org.apache.catalina.session.StandardManager.load(StandardManager.java:320)\n\tat org.apache.catalina.session.StandardManager.start(StandardManager.java:636)\n\tat org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4130)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524)\n\tat org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:904)\n\tat org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:867)\n\tat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:474)\n\tat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1112)\n\tat org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:310)\n\tat\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1021)\n\tat org.apache.catalina.core.StandardHost.start(StandardHost.java:718)\n\tat org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1013)\n\tat org.apache.catalina.core.StandardEngine.start(StandardEngine.java:442)\n\tat org.apache.catalina.core.StandardService.start(StandardService.java:450)\n\tat org.apache.catalina.core.StandardServer.start(StandardServer.java:709)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:551)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:275)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\n\n\nI think StandardManager#doload should delete the session file after the\nexecution whether sucess or not.\n\nI made a patch.\n\nRegards,\n\nIndex: /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n===================================================================\n--- /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n(revision 566663)\n+++ /tc6.0.x/trunk/java/org/apache/catalina/session/StandardManager.java\n(working copy)\n@@ -345,6 +345,9 @@\n             return;\n         if (log.isDebugEnabled())\n             log.debug(sm.getString(\"standardManager.loading\", pathname));\n+\n+        try {\n+\n         FileInputStream fis = null;\n         ObjectInputStream ois = null;\n         Loader loader = null;\n@@ -427,15 +430,17 @@\n                 } catch (IOException f) {\n                     // ignored\n                 }\n-\n-                // Delete the persistent storage file\n-                if (file != null && file.exists() )\n-                    file.delete();\n             }\n         }\n \n         if (log.isDebugEnabled())\n             log.debug(\"Finish: Loading persisted sessions\");\n+\n+        } finally {\n+            // Delete the persistent storage file\n+            if (file != null && file.exists() )\n+                file.delete();\n+        }\n     }", "id": 106959, "time": "2007-08-21T05:33:06Z", "creator": "kanekotky@gmail.com", "creation_time": "2007-08-21T05:33:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43174, "text": "Created attachment 20685\npatch\n\nI'm sorry. My patch has a problem about concurrency.\nI reviced my patch.\n\nThanks.", "id": 106972, "time": "2007-08-21T09:36:39Z", "creator": "kanekotky@gmail.com", "creation_time": "2007-08-21T09:36:39Z", "is_private": false, "attachment_id": 20685}, {"count": 2, "tags": [], "bug_id": 43174, "is_private": false, "text": "Deleting the file doesn't give a system admin any chance to examine it to see why it failed. We have seen serialisation bugs that this fix would make much harder to investigate.\n\nThe corrupted file will be over-written when Tomcat shutsdown so the exceptions will only be seen once anyway.", "id": 116044, "time": "2008-04-30T00:26:37Z", "creator": "markt@apache.org", "creation_time": "2008-04-30T00:26:37Z", "attachment_id": null}]
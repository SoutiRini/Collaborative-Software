[{"count": 0, "tags": [], "text": "The API spec bundled with Tomcat says, in: .../jakarta-servletapi-3.2.3/docs/\napi/javax/servlet/http/HttpServletRequest.html#getRequestURI()\n\n    public java.lang.String getRequestURI() \n\n    Returns the part of this request's URL from the protocol name up to the \nquery string in the first line of the HTTP request. For example: \n\nFirst line of HTTP request                      Returned Value \nPOST /some/path.html HTTP/1.1                   /some/path.html \nGET http://foo.bar/a.html HTTP/1.0              http://foo.bar/a.html \nHEAD /xyz?a=b HTTP/1.1                          /xyz \n\nThe second line is an example that doesn't works win T 3.2.3. I'm amazed, \nbecause this works fine with Tomcat 3.2.1 and  tomcat 3.2.2. Tomcat 3.2.3 \nloses a slash. \n\nHector./", "is_private": false, "bug_id": 3249, "id": 4774, "time": "2001-08-23T08:48:42Z", "creator": "alonso@consist.com.ar", "creation_time": "2001-08-23T08:48:42Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 3249, "is_private": false, "id": 4849, "time": "2001-08-25T16:30:26Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-08-25T16:30:26Z", "tags": [], "text": "This is result of URI normalization. Normalization ( eliminate //, /../, etc ) \nis required because the servlet spec define mapping too strictly, so \n//foo will not match security constraints for /foo.\n\nYour example is important for a proxy server, and we could add a flag or\nsomething to suport the use of tomcat as proxy - but this case is tricky. You\ncould use a module to support this ( for example by extracting protocol and host\nand saving them as attributes - before the decode interceptor in 3.3 )."}]
[{"count": 0, "tags": [], "bug_id": 35657, "text": "Actually, when the \"failonerror\" parameter is set to true, the build process is\nstopped when the parser finds an error in a file. The problem appears when we\nhave several files to validate and that we don't want to stop the validation\nprocess on the first error.\nWe should be able to choose to validate or not all the files, log the errors and\nthen stop the build process if we have encountered any errors. A \"haltonerror\"\nparameter could be used to achieve this goal.\nIf set to true, we stop the build process when we encounter an invalid file.\nIf set to false, we validate ALL the files and stop the build process only if we\nhave encountered some validation errors.", "id": 77100, "time": "2005-07-08T11:55:25Z", "creator": "davidlemoing@free.fr", "creation_time": "2005-07-08T11:55:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "stevel@apache.org", "text": "better to have a failureproperty that is set on success... no, better to make\nxmlvalidate a condition that can be used in a <condition> or <fail> statemement. \n\nIn the meantime, \n1. why not break things up into multiple files? I do that, after using\n<presetdef> to set up XSD validation right. \n\n2. There is actually a sort-of-bug with multifile validation in xmlvalidate in\nant1.6; we dont reset the parser. Current versions of xerces require a new\nparser for every validation. So only ant1.7 will do bulk files properly, all the\ntime.", "id": 77109, "time": "2005-07-08T16:20:33Z", "bug_id": 35657, "creation_time": "2005-07-08T16:20:33Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "davidlemoing@free.fr", "text": "I know about the multifile validation problem in xmlvalidate (ant1.6). I'm using\nthe last version in CVS, so I don't have this bug.\nI'm just disappointed not to be able to choose to validate all the files against\nmy XSD and log errors before choosing to make the build process fail with the\n\"failonerror\" parameter.\nI'm not sure I've well explained what I want to achieve :\nI've got 10 files, 3 of these files are invalid according to my XSD. If I use\nxmlvalidate, the build process will stop when the parser will meet an invalid\nfile (Only if \"failonerror\" set to true. If set to false, the build process will\nnever be stopped). As a consequence, not all the files will be validated. It\nwill be more interesting if the 10 files can be validated, log all the errors\nfor the 3 incorrect ones and stop the build process if the parser reports some\nerrors.\nIf I understand well, you think it will be a better idea to use a\nfailureproperty that will be set on success if the \"failonoerror\" parameter is\nset to false (in order to validate every file without stopping the build\nprocess). Is it correct ? This idea sounds great also.\nI beg your pardon but I don't understand what you've said about breaking things\nup into multiple files. How can it help ?", "id": 77124, "time": "2005-07-08T17:57:52Z", "bug_id": 35657, "creation_time": "2005-07-08T17:57:52Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 35657, "text": "multiple files. This is what I mean. But that doesnt do what you want either,\ndoes it?\n\n  <target name=\"test-documents\"\n    description=\"validate the CD: test documents\"\n    depends=\"init\">\n\n    <validate-cddlm file=\"${valid.dir}/minimal.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/extra-elements.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/webserver.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/webserver-no-namespace.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/webserver-default-namespace.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/documented.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/references-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/references-2.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/references-3.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/expression-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/type-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/lazy-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/lazy-2.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/parameterization-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/full-example-1.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/full-example-2.cdl\"/>\n    <validate-cddlm file=\"${valid.dir}/full-example-3.cdl\"/>\n  </target>", "id": 77127, "time": "2005-07-08T18:53:02Z", "creator": "stevel@apache.org", "creation_time": "2005-07-08T18:53:02Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "paul.arzul@sadalbari.com", "attachment_id": null, "id": 97111, "time": "2006-12-20T01:10:42Z", "bug_id": 35657, "creation_time": "2006-12-20T01:10:42Z", "is_private": false, "text": "i just ran into this problem too:\n<http://marc.theaimsgroup.com/?l=ant-user&m=116653702922966&w=2>\n\ni've got a slow workaround using 2 optional tasks, jing and ant-contrib:\n<http://marc.theaimsgroup.com/?l=ant-user&m=116654529803752&w=2>\n\nit amounts to what steve loughran suggested in comment 3, but works with a fileset.\n\ni've just tried this again with ant 1.7.0 (released today), and the problem\nstill exists. adding:\n<attribute name=\"http://xml.org/sax/features/validation\" value=\"false\" />\n\nto xmlvalidate does not help. although most errors do not stop validation (with\nlenient=\"true\"), dtd lookups still do, eg:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n<!DOCTYPE frameME SYSTEM \"nasty.dtd\">\n\ndies with:\n/nasty.xml:123: Could not validate document nasty.xml\nCaused by: java.io.FileNotFoundException: nasty.dtd (No such file o\nr directory)\n\nresolveEntity: 'null': 'file:nasty.dtd'\nNo matching catalog entry found, parser will use: 'nasty.dtd'\n\nis there a way to switch off dtd loading? why does it need it when validation is\nset to false? the xmlvalidate documentation is misleading-- it leads one to\nbelieve that lenient=\"true\" will do well-formedness checking only. (from my\ncurrent understanding of well-formedness, this goes beyond that.)\n\n- p\n"}, {"count": 5, "attachment_id": null, "bug_id": 35657, "text": "This bug hit me when trying to execute <xmlvalidate> behind a web proxy. Even though \"lenient\" is set to true, the task will still fail if the DTD (which is ignored anyway, AFAIK) cannot be downloaded.\n\nThere are a number of workarounds when trying to use xmlvalidate behind a web proxy:\n1. Download the DTD locally and define as a <dtd> in the task\n2. Use the -autoproxy option for Ant (which I couldn't get working with Eclipse)\n3. Use the <setproxy> task to manually set the proxy within Ant\n\nSee: http://www.jevon.org/wiki/Disabling_DTD_validation_for_Ant_xmlvalidate_task_within_Eclipse", "id": 154718, "time": "2012-03-09T02:30:47Z", "creator": "jevon@jevon.org", "creation_time": "2012-03-09T02:30:47Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "creator": "jglick@apache.org", "text": "(In reply to comment #5)\n> the task will still fail if the DTD (which is\n> ignored anyway, AFAIK) cannot be downloaded.\n\nIf the document has a DOCTYPE but you do not wish to validate against DTD, you can define a catalog which has an entry with that public ID but an empty body. The XML spec mandates that the DTD be retrieved even when not validating, since it can affect the infoset. (This is one compelling reason to switch to Schema or RELAX-NG.)", "id": 154749, "time": "2012-03-09T14:51:09Z", "bug_id": 35657, "creation_time": "2012-03-09T14:51:09Z", "tags": [], "is_private": false}]
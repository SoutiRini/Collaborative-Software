[{"count": 0, "tags": [], "bug_id": 55511, "text": "Created attachment 30789\nPatch diff to WebappClassLoader to enable concurrent read of cache\n\nAs part of this patchset - http://svn.apache.org/viewvc?view=revision&revision=927565 - the loadClass() method was marked synchronized, which means all class loading in a web application is fully serialized against the class loader.\n\nThere are a number of libraries which call loadClass repeatedly (eg some versions of Saxon XSLT engine).\n\nAttached is a patch that alleviates some of the pressure by converting the local cache from Hashmap to a ConcurrentHashMap and moving the cache lookup outside the synchronized block. Thus, all class loading against this CL should now operate concurrently. Anything requiring the superclass or parent loader is still synchronized.\n\nLet me know if you need some additional test metrics etc.", "id": 169850, "time": "2013-08-31T14:35:39Z", "creator": "jasonk@bluedevel.com", "creation_time": "2013-08-31T14:35:39Z", "is_private": false, "attachment_id": 30789}, {"count": 1, "tags": [], "text": "It's been quite difficult to hook up the classloader in a JHM environment, so let me know if you need benchmarks and I'll hook some up end to end.", "attachment_id": null, "id": 169851, "creator": "jasonk@bluedevel.com", "time": "2013-08-31T14:37:09Z", "bug_id": 55511, "creation_time": "2013-08-31T14:37:09Z", "is_private": false}, {"count": 2, "tags": [], "text": "Comment on attachment 30789\nPatch diff to WebappClassLoader to enable concurrent read of cache\n\nMark as patch", "attachment_id": 30789, "id": 169865, "creator": "markt@apache.org", "time": "2013-09-02T19:54:53Z", "bug_id": 55511, "creation_time": "2013-09-02T19:54:53Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55511, "attachment_id": null, "id": 169866, "time": "2013-09-02T20:16:35Z", "creator": "markt@apache.org", "creation_time": "2013-09-02T20:16:35Z", "is_private": false, "text": "The patch doesn't apply cleanly with either Eclipse (which can be fussy) or TortoiseSVN (which is usually quite tolerant).\n\nI'd like to see some performance numbers before considering this patch given the problems any solution that didn't sync the whole method has demonstrated in the past."}, {"count": 4, "tags": [], "bug_id": 55511, "attachment_id": null, "id": 169867, "time": "2013-09-02T20:43:42Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-09-02T20:43:42Z", "is_private": false, "text": ">   @Override\n> - public synchronized Class<?> loadClass(String name, boolean resolve)\n> + public Class<?> loadClass(String name, boolean resolve)\n\nThe method that is overridden here is marked as synchronized in java.lang.ClassLoader in Java 6. Thus it is synchronized in Tomcat as well.\n\nThat method is not synchronized in Java 7, but as far as I remember, you need to jump through some hoops such as \"registerAsParallelCapable()\" to make use of parallel execution. See discussion in bug 48903 (esp. comments 2 and 6).\n\nDiscussion in issue 48903 was three years ago when Java 7 was still beta. I am not aware of what is the current state of affairs in that API."}, {"count": 5, "tags": [], "bug_id": 55511, "attachment_id": null, "text": "Having a little trouble building an isolated minimal case benchmark.\n\nBackground - my app, when profiled, shows ~30% of response time under load is due to the classloader locking. App under profile is Java 6, Tomcat 6, on SPARC but code has not changed since that time. My attempt to repro the issue with a simple servlet that calls loadClass as the only item in the servlet does not show contention. \n\nPossible causes - falsely showing this issue in my app, is not an issue under Tomcat 8 for other reasons, attempting to repro on x86, can't drive enough work onto the x86 server that I have (bandwidth saturated), issue may not really be with WebappClassLoader but some parent item.\n\nWhen I have applied a full CachingWebappClassLoader by subclassing it showed significant benefits but I was unable at the time to hook up a JHM benchmark in WebappClassLoader, seems to have a lot of dependencies with the container.\n\nHere some additional results for a full subclass of WebappClassLoader - I made a possibly flawed assumption that the reason WebappClassLoader with CHM did not show issues was because I was not loading classes from JARs registered with that loader (but instead loading classes via WebappCL to the system loader) \n\nhttp://fasterjava.blogspot.com.au/2013/08/caching-classes-from-classloader.html\n\nWill continue investigating.", "id": 169954, "time": "2013-09-08T03:41:32Z", "creator": "jasonk@bluedevel.com", "creation_time": "2013-09-08T03:41:32Z", "is_private": false}, {"count": 6, "attachment_id": null, "creator": "jasonk@bluedevel.com", "text": "Looks like this is a heisenberg-bug actually related to Yourkit. When I've removed all of it and stripped back to basics, the \"contention\" impact is extremely low; it seems YJP agent is hooking the monitor enter / exit with its own code and triggering misleading results in the profiler.\n\nHappy to have this rejected/closed.", "id": 170108, "time": "2013-09-15T00:23:12Z", "bug_id": 55511, "creation_time": "2013-09-15T00:23:12Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Just adding an additional comment - trailing from my blog - in case somebody else comes across this and wants to open it up.\n\nIn my opinion this will become an issue for someone in the future, but I wasn't able to hook up a suitable test to prove it. Hopefully somebody else can.\n\nhttp://fasterjava.blogspot.com/2013/08/caching-classes-from-classloader.html\n=====\nHi Ryan - totally agree with you. TC classloader is definitely a source of contention, but I was unable to come up with a real-world scenario where it affected throughput.\n\nIf you have enough of a test bench you can probably re-run the tests and see how it goes, I'd be keen to hear about it. I assume you are looking at Tomcat?\n\nWhat I found is that when I used the default Tomcat classloader in a real world scenario (about 2000req/sec incl business logic, db query, output transform, etc), changing the classloader did not significantly affect the req/sec rate. It only changes it when running under the profiler or under contrived examples - eg calling loadClass in a tight loop. I don't have the test bench to drive enough load onto the server - I was able to saturate the NIC before running out of CPU.", "attachment_id": null, "id": 170146, "creator": "jasonk@bluedevel.com", "time": "2013-09-17T22:20:34Z", "bug_id": 55511, "creation_time": "2013-09-17T22:20:34Z", "is_private": false}, {"count": 8, "tags": [], "text": "Happy to revisit this if a test case is developed that shows a genuine problem. However, given that - at the moment - such a test case doesn't exist I'm resolving this as invalid.", "attachment_id": null, "id": 170151, "creator": "markt@apache.org", "time": "2013-09-18T11:20:10Z", "bug_id": 55511, "creation_time": "2013-09-18T11:20:10Z", "is_private": false}]
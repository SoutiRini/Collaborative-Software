[{"count": 0, "tags": [], "creator": "bto@sabre-holdings.com", "attachment_id": null, "id": 140348, "time": "2010-10-01T05:56:54Z", "bug_id": 50034, "creation_time": "2010-10-01T05:56:54Z", "is_private": false, "text": "To enable effective test automation with Jmeter we would like to use Jmeter in non-gui mode calling it directly in Java app. This is very similar scenario as in case maven-jmeter-plugin...\n\nCurrently we have to:\n1. create new JMeter() \n2. invoke start with command line args.\n3. parse JMeter log to find the results.\n4. change security manager to capture System.exit calls\n5. wait for all of the threads that it spawned to exit\n\nWe would like to:\n1. create new JMeterNonGUI()\n2. invoke runTest with all arguments passed as appropriate objects (no need to wrap and parse them)\n3. wait for runTest to end (it should execute all tests)\n4. read test results returned by runTest\n\nExample:\n\nJMeterNonGUI jmeter = new JMeterNonGUI();\nTestResults results = jmeter.runTests(jmxTestFile);\n\nI propose to:\n- extract from JMeter class JMeterGUI class responsible for starting GUI version of JMeter\n- extract from JMeter class JMeterNonGUI class responsible for starting non-GUI version of JMeter\n- refactor the code so that JMeter class will be responsible only for parsing command line arguments and delegating JMeter start to appropriate class JMeterGUI or JMeterNonGUI\n- create public JMeterNonGUI.runTests method that will block execution until test end and will gather test results to some TestResults list (the hardest part?)\n- replace all System.exit calls with call to some SystemExitHandlerInterface that in case of non-GUI method can be implemented without using System.exit"}, {"attachment_id": null, "tags": [], "bug_id": 50034, "is_private": false, "count": 1, "id": 143033, "time": "2011-01-03T07:37:58Z", "creator": "sebb@apache.org", "creation_time": "2011-01-03T07:37:58Z", "text": "*** Bug 50537 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "bug_id": 50034, "text": "Thanks to the BTO Team @ Sabre-Holdings for logging this feature request. I would also benefit from such API, as I think anyone wanting to run JMeter scripts as part of a larger automated test effort. Especially when being used to automated dependency management like with Maven it is a bit of a set-back to have the administrative overhead of installing JMeter at a fixed path on the machines of all developers and build servers.\nAlso if you want to use e.g. FitNesse for maintaining test and reporting on results, then you find that it is a pain to write reliable fixtures for this.\n\nDear developers, please consider working in this. It would be much appreciated.\n\nFor reference: before I found this issue I started a thread on the mailing list: http://mail-archives.apache.org/mod_mbox/jakarta-jmeter-user/201107.mbox/%3C38FD45F8B3DE904BBF437A2E16B81EC806CF47A00B@DEEXVS51.wincor-nixdorf.com%3E", "id": 148123, "attachment_id": null, "creator": "palgemeen@gmail.com", "creation_time": "2011-07-25T11:43:04Z", "time": "2011-07-25T11:43:04Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 50034, "text": "Returning the TestResults at the end of the run could require a lot of memory.\n\nA better solution might be to provide a call-back mechanism which returns each sample as it occurs.", "count": 3, "id": 148124, "time": "2011-07-25T12:37:07Z", "creator": "sebb@apache.org", "creation_time": "2011-07-25T12:37:07Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50034, "text": "Currently we are running JMeter as a new process which is quite lame when running from java. For our purposes it would be enough to be able to run main() and be sure that all threads finish before the method finishes. Results would be also fine, but currently we just load resulting XML file using dom4j.\n\nHowever, the library behavior would be the most clear solution.", "id": 158919, "time": "2012-05-09T07:01:39Z", "creator": "msimek@kerio.com", "creation_time": "2012-05-09T07:01:39Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 50034, "is_private": false, "count": 5, "id": 176487, "time": "2014-07-18T11:57:42Z", "creator": "dzmitry.kashlach@blazemeter.com", "creation_time": "2014-07-18T11:57:42Z", "text": "AFAIK. it's possible now to run JMeter from external application using NewDriver class, isn't it?"}]
[{"count": 0, "tags": [], "bug_id": 41670, "text": "Hi,\n\nSee my post #15 in the bug 28647\nAs indicated in the reply #16, it makes more sense to make this an RFE of its \nown so here it is\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=28647\n\nI totally aggree with the flushing being tied to the level of the event (as in \n28647). This totally makes sense and would be good to have it in the default \nlog4J.\n\nMy use cases for a flush of a given Logger, of one Appender or of all the \nLogger/Appender are the following\n1) application shuting down. You don't want to loose any logging done so far\n2) need to see the whole log in production (or in a production like \nenvironment) from an administrative interface or not without penaly for the \nnormal performance (so you just flush for this purpose). So you need a way to \nforce a flush of one or all Logger/Appender\n\nAs Simon in 28647, I also use a shutdown hook in my application to address the \nissue in case 1) The only way that I found to flush was to close all the \nappenders. This is fine as I am stopping the application but a way to flush \nglobally all the logs without closing the appenders in a very simple way should \nalso be there. But what do I know about other libraries/jars outside of my \ncode ? They could also use Log4J and log something after this closing \noperation. Closing the appenders could forbid them to log normally and would \ncreate confusing error messages about closed appenders. A simple way to flush \nwould be very convenient.\n\nCase 2). I am simply stuck. I don't want to close all the appenders to reopen \nthem later (if I can). I could loose some logging in the mean time and create \nsome serious mess. So flushing should be present in each appender that could \ndelegate to sub appenders if required. Here I am totally stuck with the default \nimplementation. I want to use out of the box functions of log4j without \ncreating my own appenders and others\n\nThe current implementation looks like the app runs forever or never needs to be \nmaintained/troubleshooted but this is not always the case in real life.\n\nRegarding the API, I am proposing a method\n- Logger.flush() (not static) sends a flush order to all the appenders this \nlogger is connected to\n- Appender.flush() (not static) sends a flush order to all this appender \n(implementation) and sub appenders if any\n- Logger.flushAll() (static) and/or Appender.flushAll() (static) sends a flush \norder to all the opened appenders\nI insist on the fact that you may want flushing a Logger or/and an Appender (or \nall) based on your situation. \n\nImplementation.\nGuys you are the specialists. You could add these methods, create an interface \nFlushableLogger/Appender with the new methods to preserve the compatibility, \ndecide to create a new kind of LoggingEvent forcing a flush.... It's up to you\n\nThanks a lot for this great library.\n\nOlivier DUPUY", "id": 99634, "time": "2007-02-21T11:29:39Z", "creator": "opldupuy@gmail.com", "creation_time": "2007-02-21T11:29:39Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41670, "text": "log4j 2.0 design goal.", "id": 107112, "time": "2007-08-22T19:57:38Z", "creator": "carnold@apache.org", "creation_time": "2007-08-22T19:57:38Z", "is_private": false, "attachment_id": null}]
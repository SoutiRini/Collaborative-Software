[{"count": 0, "tags": [], "creator": "nikola.stohanzl@ness.com", "text": "Created attachment 29974\ngenerated XSSF workbooks with and witout bordering\n\nHi, \n\ni just started with Apache POI and created a simple test XSSF workbook (see attached files, sheet is locked, password is \"kuku\"). I noticed a big gap in elapsed times after adding borders. Small benchmark (average of 10 consecutive runs) on my i5@2,5GHz notebook (Oracle JDK 1.7, JVM setting -Xmx256M) shows\n\nXSSF no borders: 700ms\nXSSF borders: 2500ms\nHSSF borders: 290ms\n\nI use RegionUtil for bordering (as is suggested in the quick guide) and my bordering helper method looks like\n\nprivate static void thinBorder(Workbook wb, Sheet sh, CellRangeAddress rng) {\n\tRegionUtil.setBorderBottom(CellStyle.BORDER_THIN, rng, sh, wb);\n\tRegionUtil.setBorderLeft(CellStyle.BORDER_THIN, rng, sh, wb);\n\tRegionUtil.setBorderRight(CellStyle.BORDER_THIN, rng, sh, wb);\n\tRegionUtil.setBorderTop(CellStyle.BORDER_THIN, rng, sh, wb);\t\t\n} \n\nand i use that approach for bordering single cells as well. After a small debugging, i found that underlaying calls to CellUtil method\n\nprivate static void setFormatProperties(CellStyle style, Workbook workbook, Map<String, Object> properties)\n\ntake 30-70ms each. Combined with a creation of different styles during the bordering, that might be the cause of my problem. Without borders, there are 9 different styles (based on Workbook.getNumCellStyles()), with borders, there are 66 styles.\n\nPerhaps my bordering strategy can be optimised, but creation of approx. 25 styles per second (if i understand the code logic well) seems like poor performance and could be a stopper for big workbooks with formatting. I understand that the HSSF implementation migh be more effective avoiding XML, but the difference simply seems too big.", "id": 165412, "time": "2013-02-21T10:18:52Z", "bug_id": 54593, "creation_time": "2013-02-21T10:18:52Z", "is_private": false, "attachment_id": 29974}, {"count": 1, "tags": [], "bug_id": 54593, "attachment_id": null, "is_private": false, "id": 167512, "time": "2013-05-30T15:42:31Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-05-30T15:42:31Z", "text": "Do you have sample code that can be used as test-case which reproduces the problem?"}, {"count": 2, "tags": [], "bug_id": 54593, "attachment_id": 30345, "is_private": false, "id": 167516, "time": "2013-05-30T16:59:57Z", "creator": "nikola.stohanzl@ness.com", "creation_time": "2013-05-30T16:59:57Z", "text": "Created attachment 30345\ntest case"}, {"count": 3, "tags": [], "bug_id": 54593, "attachment_id": 30346, "id": 167519, "time": "2013-05-30T21:09:16Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-05-30T21:09:16Z", "is_private": false, "text": "Created attachment 30346\nScrenshot showing where most of the time is spent\n\nI did a quick performance analysis using dynaTrace, it seems really the underlying XML handling is causing this behavior. It seems XSSFCellBorder calls toString() on the CTBorder element both in hashCode() and equals(). The call is done a large number of times and every time causes XML Text to be generated for the border-element, so almost all the exeuction time of the test case is spent somewhere in there.\n\nSo yes, using HSSF instead of XSSF would probably speed it up considerably. Otherwise some caching might help, but for this I still lack details of POI to see if it would be possible. I assume the real issue is in the openformats-framework that is used by POI which seems to have an expensive toString() implementation."}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "text": "Suggestions gratefully received on a smarter way to do the hashCode and equals methods for XSSFCellBorder!", "id": 167521, "time": "2013-05-30T22:22:56Z", "bug_id": 54593, "creation_time": "2013-05-30T22:22:56Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 54593, "text": "Created attachment 30723\nInitial try of caching the toString() result\n\nI gave it a try and implemented caching of the toString() value in XSSFCellBorder and compared elapsed times, below are the raw results, patch is attached. It improves a lot, but there is still a chance that the changes break stuff as there is a getBorder() method which is used elsewhere and could modify the contents of the border whereas the borderStr might be kept, so this mostly shows the potential of doing toString() differently here, however I still think the base implementation is not optimal by causing a lot of stuff in toString() including synchronization, the same might be the case in many other types that derive from XmlObjectBase as well...\n\nBefore:\n\nfileName = /tmp/01.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 531\nfileName = /tmp/02.xlsx, doBorders = true\n  elapsed bordering: 3424\n  styles count: 68\n  elapsed total: 3699\nfileName = /tmp/01.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 73\nfileName = /tmp/02.xlsx, doBorders = true\n  elapsed bordering: 2181\n  styles count: 68\n  elapsed total: 2300\nfileName = /tmp/03.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 73\nfileName = /tmp/04.xlsx, doBorders = true\n  elapsed bordering: 1819\n  styles count: 68\n  elapsed total: 1902\n\nAfter:\n\nfileName = /tmp/01.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 269\nfileName = /tmp/02.xlsx, doBorders = true\n  elapsed bordering: 1580\n  styles count: 68\n  elapsed total: 1856\nfileName = /tmp/01.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 193\nfileName = /tmp/02.xlsx, doBorders = true\n  elapsed bordering: 643\n  styles count: 68\n  elapsed total: 770\nfileName = /tmp/03.xlsx, doBorders = false\n  elapsed bordering: 0\n  styles count: 4\n  elapsed total: 55\nfileName = /tmp/04.xlsx, doBorders = true\n  elapsed bordering: 424\n  styles count: 68\n  elapsed total: 532", "id": 169377, "time": "2013-08-12T21:17:09Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-08-12T21:17:09Z", "is_private": false, "attachment_id": 30723}, {"count": 6, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Bug 58787 might solve some of these efficiency problems, since styles are built up in a standalone data structure then applied in one go, creating fewer intermediate styles and searching through the styles table for matching styles fewer times (setCellStyleProperties).", "id": 189982, "time": "2016-04-05T17:10:42Z", "bug_id": 54593, "creation_time": "2016-04-05T17:10:42Z", "attachment_id": null}]
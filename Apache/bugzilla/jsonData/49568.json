[{"count": 0, "tags": [], "bug_id": 49568, "text": "Created attachment 25729\nldif file containing user that doesn't work.  Password for the user is the string: two\n\nIf a user's DN contains a multi-byte character, auth_ldap will not authenticate the user because the multi-byte characters returned by the searchRequest will be converted to ?'s when attempting to bind.\n\nFor example a user with the following dn:\ncn=t[UTF-8: 0xE6 0x88 0x91], ou=people\n\nUTF-8: 0xE6 0x88 0x91 is the utf-8 character for the chinese word for me.\n\nWill not work because the bind request will be for\ncn=t?,ou=people\n\nSee this mailing list thread with a discussion on this:\nhttp://marc.info/?l=apache-httpd-dev&m=121623942300453&w=2\n\nAttached is an ldif file containing the dn I used.", "id": 138259, "time": "2010-07-07T15:27:57Z", "creator": "dopey@moonteeth.com", "creation_time": "2010-07-07T15:27:57Z", "is_private": false, "attachment_id": 25729}, {"count": 1, "tags": [], "creator": "dopey@moonteeth.com", "text": "I was able to get this to work by setting the system locale on the windows server to one that has a codepage mapping for the multi-byte character.\n\nI still don't understand exactly how Windows handles UTF-8 codepage enough to explain why this works, but it does appear that if multiple languages are necessary in LDAP DNs that are not all represented within a Windows language, then this method of setting the system locale will probably not work.\n\nFrom William Rowe on the apache-dev mailing list:\n\nI'd presume there are ldap_funcW() equivalents which accept unicode (trivial\nconversion from utf8) which could be leveraged on win32, but there is noone\nright now who is really focused on improving the msldap32 compatibility.", "id": 138312, "attachment_id": null, "bug_id": 49568, "creation_time": "2010-07-09T16:33:20Z", "time": "2010-07-09T16:33:20Z", "is_private": false}]
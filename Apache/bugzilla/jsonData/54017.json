[{"count": 0, "tags": [], "creator": "xshao@ebay.com", "attachment_id": null, "id": 162788, "time": "2012-10-17T08:47:42Z", "bug_id": 54017, "creation_time": "2012-10-17T08:47:42Z", "is_private": false, "text": "If the target class is \"Object.class\", the generator generates\n        \"new String(\" + quoted + \")\";\nas attribute value for Tag Handler.\n\nHow about using quoted directly same as when the target class is \"Object.class\"?\n\nCreating a String instance will cause some overhead from memory allocation and hash code recaluation when it is used as a key on HashMap.\n\n\nHere is the detail code,\n\n        /*\n         * @param c The target class to which to coerce the given string @param\n         * s The string value @param attrName The name of the attribute whose\n         * value is being supplied @param propEditorClass The property editor\n         * for the given attribute @param isNamedAttribute true if the given\n         * attribute is a named attribute (that is, specified using the\n         * jsp:attribute standard action), and false otherwise\n         */\n        private String convertString(Class<?> c, String s, String attrName,\n                Class<?> propEditorClass, boolean isNamedAttribute) {\n\n            String quoted = s;\n            if (!isNamedAttribute) {\n                quoted = quote(s);\n            }\n\n            if (propEditorClass != null) {\n                String className = c.getCanonicalName();\n                return \"(\"\n                        + className\n                        + \")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromBeanInfoPropertyEditor(\"\n                        + className + \".class, \\\"\" + attrName + \"\\\", \" + quoted\n                        + \", \" + propEditorClass.getCanonicalName() + \".class)\";\n            } else if (c == String.class) {\n                return quoted;\n            } else if (c == boolean.class) {\n                return JspUtil.coerceToPrimitiveBoolean(s, isNamedAttribute);\n            } else if (c == Boolean.class) {\n                return JspUtil.coerceToBoolean(s, isNamedAttribute);\n            } else if (c == byte.class) {\n                return JspUtil.coerceToPrimitiveByte(s, isNamedAttribute);\n            } else if (c == Byte.class) {\n                return JspUtil.coerceToByte(s, isNamedAttribute);\n            } else if (c == char.class) {\n                return JspUtil.coerceToChar(s, isNamedAttribute);\n            } else if (c == Character.class) {\n                return JspUtil.coerceToCharacter(s, isNamedAttribute);\n            } else if (c == double.class) {\n                return JspUtil.coerceToPrimitiveDouble(s, isNamedAttribute);\n            } else if (c == Double.class) {\n                return JspUtil.coerceToDouble(s, isNamedAttribute);\n            } else if (c == float.class) {\n                return JspUtil.coerceToPrimitiveFloat(s, isNamedAttribute);\n            } else if (c == Float.class) {\n                return JspUtil.coerceToFloat(s, isNamedAttribute);\n            } else if (c == int.class) {\n                return JspUtil.coerceToInt(s, isNamedAttribute);\n            } else if (c == Integer.class) {\n                return JspUtil.coerceToInteger(s, isNamedAttribute);\n            } else if (c == short.class) {\n                return JspUtil.coerceToPrimitiveShort(s, isNamedAttribute);\n            } else if (c == Short.class) {\n                return JspUtil.coerceToShort(s, isNamedAttribute);\n            } else if (c == long.class) {\n                return JspUtil.coerceToPrimitiveLong(s, isNamedAttribute);\n            } else if (c == Long.class) {\n                return JspUtil.coerceToLong(s, isNamedAttribute);\n            } else if (c == Object.class) {\n                return \"new String(\" + quoted + \")\";\n            } else {\n                String className = c.getCanonicalName();\n                return \"(\"\n                        + className\n                        + \")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromPropertyEditorManager(\"\n                        + className + \".class, \\\"\" + attrName + \"\\\", \" + quoted\n                        + \")\";\n            }\n        }"}, {"count": 1, "tags": [], "bug_id": 54017, "attachment_id": null, "id": 162927, "time": "2012-10-25T12:17:37Z", "creator": "markt@apache.org", "creation_time": "2012-10-25T12:17:37Z", "is_private": false, "text": "Yes, that makes sense since String is an instance of an Object there is no need to create a new String. Fixed for 7.0.x and trunk and will be included in 7.0.33 onwards."}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Regarding this fix ( r1402122 r1402123 ),\n\nThe JSP 2.2 spec chapter JSP.1.14.2.1 \"Conversions from String values\"\ndefines conversion to an Object as\n\n[quote]\n\"As if new String(string-literal). This results in new String(\"\")\nif the string is empty.\"\n[/quote]\n\nThis should be the reason for the original code changed by this fix.\n\nActually I agree with OP and Mark and I see no good reason to use a String(String) constructor here.\n\nThe only good point I see in String(String) constructor is that it trims the backing char array to contain only the needed count of characters, but I do not think it is important here.", "id": 163838, "time": "2012-12-04T11:49:48Z", "bug_id": 54017, "creation_time": "2012-12-04T11:49:48Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 47401, "attachment_id": 23847, "text": "Created attachment 23847\nlog4j properties file\n\nThe issue we face is similar to parts of bug-41214, but more specific and reproducible in a single thread. log4j version used is 1.2.15. Also this is not specific to one appender - I've got this problem with both FileAppender and RollingFileAppender. The following program can consistently simulate the problem\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\npublic class issue\n{\n\tpublic static void main(String a[]){\n\t\tLog log=LogFactory.getLog(issue.class);\n\t\tlog.debug(new issue());\n\t\tSystem.err.println(\"Interrupt Status: \"+Thread.currentThread().isInterrupted());\n\t}\n\n\tpublic String toString(){\n\t\tThread.currentThread().interrupt();\n\t\treturn(\"log msg\");\n\t}\n}\n\n\nOn an AIX with java 1.5.0, it runs correctly as displayed below:\n---\nbash-3.00$ uname -srv\nAIX 1 6\nbash-3.00$ java -cp commons-logging-1.1.1.jar:log4j-1.2.15.jar:. issue\nInterrupt Status: true\nbash-3.00$ cat app.log\n2009-06-22 08:00:37,593 DEBUG main issue - log msg\nbash-3.00$\n---\n\n\nHowever on a Solaris, with every 1.5 and 1.6 java versions used, it fails to write the log statement instead prints an InterruptedIOException trace besides reading/unsetting the thread's interrupt flag:\n---\nbash-3.00$ uname -rvs\nSunOS 5.10 Generic_137137-09\nbash-3.00$ java -version\njava version \"1.6.0_05\"\nJava(TM) SE Runtime Environment (build 1.6.0_05-b13)\nJava HotSpot(TM) Server VM (build 10.0-b19, mixed mode)\nbash-3.00$ java -cp commons-logging-1.1.1.jar:log4j-1.2.15.jar:. issue\nlog4j:ERROR Failed to flush writer,\njava.io.InterruptedIOException\n        at java.io.FileOutputStream.writeBytes(Native Method)\n        at java.io.FileOutputStream.write(FileOutputStream.java:260)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:202)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:272)\n        at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:276)\n        at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:122)\n        at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:212)\n        at org.apache.log4j.helpers.QuietWriter.flush(QuietWriter.java:58)\n        at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:316)\n        at org.apache.log4j.WriterAppender.append(WriterAppender.java:160)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)\n        at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)\n        at org.apache.log4j.Category.callAppenders(Category.java:206)\n        at org.apache.log4j.Category.forcedLog(Category.java:391)\n        at org.apache.log4j.Category.log(Category.java:856)\n        at org.apache.commons.logging.impl.Log4JLogger.debug(Log4JLogger.java:177)\n        at issue.main(issue.java:9)\nInterrupt Status: false\nbash-3.00$ cat app.log\nbash-3.00$\n---\n\nBesides the trace, note that the interrupt status printed is false. Based on the nature of log4j, even if a thread happens to be in some file writing log4j code while receiving an interrupt and thereby gets an InterruptedIOException, shouldn't the log4j system itself catch it and set the interrupt flag back (that the message was not written to the log file is a smaller issue, but even the log write operation can be reattempted without harm). In this example, the interrupt flag was set even before any actual write.\n\nI've a feeling that this particular issue of interrupt is still to be handled in the log4j layer and the problem is not visible in the IBM jvm on AIX only because it has a different interpretation of when to throw the InterruptedIOException(may be it doesn't throw if the interrupt flag was already set before an IO operation).\n\nThe log4j properties file is attached.", "id": 128147, "time": "2009-06-22T07:25:37Z", "creator": "anishc@excite.com", "creation_time": "2009-06-22T07:25:37Z", "is_private": false}, {"count": 1, "tags": [], "text": "This is already solved on the trunk.  It was fixed in #44157.\n\nThis was coming from the QuietWriter that is catching IOException but doesn't reset the interupt flag.\n\nHowever, I'm a little bit surprised by the fix.  The QuietWriter delegates to the ErrorHandler the responsability to reset the interupt flag.  This is done in OnlyOnceErrorHandler and in FallbackErrorHandler.  I would rather have expected to see this done directly in the QuietWriter.\n\nBut anyway, this is fixed on the trunk.\n\n*** This bug has been marked as a duplicate of bug 44157 ***", "attachment_id": null, "bug_id": 47401, "id": 128211, "time": "2009-06-23T12:50:32Z", "creator": "gscokart@gmail.com", "creation_time": "2009-06-23T12:50:32Z", "is_private": false}]
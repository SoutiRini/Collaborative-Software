[{"count": 0, "tags": [], "bug_id": 54116, "text": "Created attachment 29567\nstack information with the blockeds threads\n\nThe problem is very well detailed in the following mysql bug: http://bugs.mysql.com/bug.php?id=64954\n\nI found exactly the same situation related in this mysql bug. The answer from mysql guys is: \n\n\"This is precisely the reason the JDBC-4.0 spec added the abort() method. There is no foolproof way to implement the semantics of Connection.close() *and* never have deadlocks.\n\nThe abort() method is designed to be used in these cases (it takes no locks, but doesn't attempt to clean up currently open statements, etc).\n\nHave you asked your connection pool vendor why they're not using the abort() method?\"\n\nAnd the bug's is market with \"won't fix\". My question is, \u00bfis jdbc-pool using this abort method instead of close?, \u00bfif the \"Pool-Cleaner\" is one of the threads involved in the blocking this can cause connections not removed from the pool?. I attach to this bug the stack trace information, yo can see that this thread is blocked. I can reproduce this error via load/stress testing the application, in production this error occurs randomly between 3 or 4 days running.\n\nFor more information i'm using grails with the grails tomcat jdbc plugin (http://grails.org/plugin/jdbc-pool).", "id": 163270, "time": "2012-11-07T22:53:33Z", "creator": "casado.alfredo@gmail.com", "creation_time": "2012-11-07T22:53:33Z", "is_private": false, "attachment_id": 29567}, {"count": 1, "tags": [], "bug_id": 54116, "attachment_id": null, "id": 163301, "time": "2012-11-09T09:10:55Z", "creator": "patric@rufflar.com", "creation_time": "2012-11-09T09:10:55Z", "is_private": false, "text": "Looks like mysql jdbc driver bug because they use inconsistent locking:\n\ncom.mysql.jdbc.ConnectionImpl.close() locks in the following order:\n\n1. com.mysql.jdbc.JDBC4Connection\n2. com.mysql.jdbc.JDBC4ResultSet\n\nwhile com.mysql.jdbc.ResultSetImpl.getString() locks in a reversed order:\n\n1. com.mysql.jdbc.JDBC4ResultSet\n2. com.mysql.jdbc.JDBC4Connection\n\nBecause I see no jdbc pool classes involved in the locking of these objects I doubt that jdbc pool is responsible in this deadlock situation."}, {"count": 2, "tags": [], "bug_id": 54116, "attachment_id": null, "id": 163310, "time": "2012-11-09T11:47:19Z", "creator": "casado.alfredo@gmail.com", "creation_time": "2012-11-09T11:47:19Z", "is_private": false, "text": "Thanks for your response.\n\nPlease can you answer my second question: \u00bfif the Pool-Cleaner thread is blocked how this affect the behaviour of the pool?, \u00bfthe pool is no longer \"clean\" unused connections?. If this is true the problem is really a big issue in production\n environments using tomcat+mysql.\n\nIn the first place i go to mysql driver project issue manager, i found one report of a identical bug and following the recomendations in this issue i'm here contacting with \"my pool vendor\". As you can see now i have two deadlocks: one in my production servers and the second one in this bug resolution.\n\nAs you can see in the mysql bug they insist that the pool implementation must call abort() instead of close(). I'm not sure what are the implications of this.\n\nI'm not an expert in JDBC spec and in driver's or pool's implementations details, i can't judge if the problem is in mysql driver like you say or if the problem is in pool implementations, like the mysql guy say.\n\nI have the following options:\n\n- go again to mysql issue manager and reopen the bug. \n- don't use jdbc-pool (i think that others pool implementations call close in the same way, the option is not using a pool at all)\n- don't use mysql j/connector driver. \u00bfis there another mysql driver implementation i can use?\n\n\u00bfwhat do you recomend?"}, {"count": 3, "tags": [], "bug_id": 54116, "text": "The pool cleaner thread periodically \n- checks for abandoned connections (depending on configuration)\n- does pool resizing (e.g. dropping connections), if necessary\n- verifies idle connections (depending on configuration)\n\nIf this thread gets blocked you'll loose this functionality.\nIt depends on your application if you rely on these features or not.\nNormally, this will not cause your application to fail (completely).\n\nIf I were you I would drop a comment at the existing mysql issue and tell them that they use inconsistent locking in their jdbc driver which is causing the problem here.\nAlso mention that Connection.abort() is only available in java 7. \nIf they will not fix the inconsistent locking ask for a java 6 compatible solution.\n\nBTW: A workaround which will lower the probability of the deadlock is to disable the jdbc-pool's \"remove abandoned connections\" feature.", "id": 163379, "time": "2012-11-12T13:25:15Z", "creator": "patric@rufflar.com", "creation_time": "2012-11-12T13:25:15Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Inconsistent locking in the driver is not a JDBC pool issue.", "id": 163780, "time": "2012-12-03T11:23:05Z", "bug_id": 54116, "creation_time": "2012-12-03T11:23:05Z", "is_private": false}]
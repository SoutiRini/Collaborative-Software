[{"count": 0, "tags": [], "bug_id": 55719, "attachment_id": null, "id": 170914, "time": "2013-10-29T16:41:54Z", "creator": "dan@danshome.net", "creation_time": "2013-10-29T16:41:54Z", "is_private": false, "text": "We've been using the same cargo deployer (v 1.2.4) from Jenkins to deploy WAR's to Tomcat 7.0.30 for almost a year with no issues at all, then after we upgraded to Tomcat 7.0.42 and JDK 1.7.0_40 we started getting random failures with WAR deployments.  We've seen similar issues with someone tries to manually deploy a WAR to the webapps folder when autodeploy is enabled and Tomcat tries to unzip the WAR before the file copy is complete, but we've never seen this when using the Tomcat Manager /deploy. We do have auto deploy enabled at this time.  Is it possible that a change between 7.0.30 and 7.0.42 could be causing Tomcat with autodeploy enabled to try to decompress the WAR before the Tomcat Manager has finished dropping the WAR in the webapps folder?  \n\nThe problem happens at random, and in most cases simply re-running the deployment works.\n\n\nOct 24, 2013 9:23:24 PM org.apache.catalina.startup.HostConfig deleteRedeployResources\nINFO: Undeploying context [/CrashMapBuilder]\nOct 24, 2013 9:34:03 PM org.apache.catalina.startup.HostConfig deployWAR\nINFO: Deploying web application archive E:\\servers\\tomcat\\inst\\tomcatsrv1\\webapps\\CrashMapBuilder.war\nOct 24, 2013 9:34:03 PM org.apache.catalina.startup.ContextConfig init\nSEVERE: Exception fixing docBase for context [/CrashMapBuilder]\njava.util.zip.ZipException: error in opening zip file\n\tat java.util.zip.ZipFile.open(Native Method)\n\tat java.util.zip.ZipFile.<init>(ZipFile.java:215)\n\tat java.util.zip.ZipFile.<init>(ZipFile.java:145)\n\tat java.util.jar.JarFile.<init>(JarFile.java:153)\n\tat java.util.jar.JarFile.<init>(JarFile.java:90)\n\tat sun.net.www.protocol.jar.URLJarFile.<init>(URLJarFile.java:93)\n\tat sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:69)\n\tat sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:109)\n\tat sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)\n\tat sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:89)\n\tat org.apache.catalina.startup.ExpandWar.expand(ExpandWar.java:113)\n\tat org.apache.catalina.startup.ContextConfig.fixDocBase(ContextConfig.java:722)\n\tat org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:843)\n\tat org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:387)\n\tat org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n\tat org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n\tat org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:402)\n\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)\n\tat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:976)\n\tat org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1653)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:724)\n\nOct 24, 2013 9:34:03 PM org.apache.catalina.core.StandardContext resourcesStart\nSEVERE: Error starting static Resources\njava.lang.IllegalArgumentException: Invalid or unreadable WAR file : error in opening zip file\n\tat org.apache.naming.resources.WARDirContext.setDocBase(WARDirContext.java:138)\n\tat org.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:5055)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5235)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)\n\tat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:976)\n\tat org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1653)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:724)\n\nOct 24, 2013 9:34:03 PM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Error in resourceStart()\nOct 24, 2013 9:34:03 PM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Error getConfigured\nOct 24, 2013 9:34:03 PM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Context [/CrashMapBuilder] startup failed due to previous errors"}, {"count": 1, "tags": [], "bug_id": 55719, "attachment_id": null, "text": "One thing that is important to mention is that I just found out that we had several backup processes starting on the same SAN that is used by the underlying storage where the WAR's are deployed. This was creating an extreme mount if I/O contention and slowed down the deployment of the WAR from Tomcat manager. So you may not see this issue unless you are able to create enough I/O contention to slow the deployment down to a crawl.  Regardless of how slow it takes for Tomcat Manager to receive and copy the WAR to the web apps folder, it still seems like autodeploy should be smart enough to know that Tomcat Manager is in the middle of a WAR deployment and not to try to to extract the WAR.", "id": 170915, "time": "2013-10-29T17:13:52Z", "creator": "dan@danshome.net", "creation_time": "2013-10-29T17:13:52Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55719, "attachment_id": null, "id": 170929, "time": "2013-10-30T11:35:40Z", "creator": "markt@apache.org", "creation_time": "2013-10-30T11:35:40Z", "is_private": false, "text": "How many Tomcat instances are using the WARs that are being deployed to this SAN?"}, {"count": 3, "tags": [], "creator": "dan@danshome.net", "attachment_id": null, "is_private": false, "id": 170935, "time": "2013-10-30T16:33:56Z", "bug_id": 55719, "creation_time": "2013-10-30T16:33:56Z", "text": "Only a single Tomcat instance."}, {"count": 4, "tags": [], "bug_id": 55719, "attachment_id": null, "id": 170936, "time": "2013-10-30T18:40:38Z", "creator": "markt@apache.org", "creation_time": "2013-10-30T18:40:38Z", "is_private": false, "text": "The manager app does the following:\n- marks the context as services so the auto deployer leaves it alone\n- removes the old war\n- reads the input stream and writes the WAR directly to the appBase\n- triggers a deploy for the new WAR\n- removes the serviced marker\n\nGiven that auto deployment is disabled in your environment anyway, the only way I can see the problem you are having arising is if the file upload somehow goes wrong and a partial file is written to the appBase.\n\nLet me look though the source code to check if all the possible errors are correctly handled."}, {"count": 5, "tags": [], "bug_id": 55719, "is_private": false, "text": "Hi Mark,\n\nAs I stated in my original posting \"We DO have auto deploy enabled at this time.\"  We moved our SAN backups last night so they didn't run during the nightly deployment and there were no zip failures this time.  We'll have to watch things over the the next few days, but it seems that the I/O contention somehow allowed for the Tomcat Manager deployment and autodeploy to collide.  The idea that the transfer of the WAR failed sounds reasonable.  Even so, if we hit some timeout that caused the WAR to abort the upload, shouldn't Tomcat Manager have caught the disconnect and removed the incomplete WAR?", "id": 170937, "time": "2013-10-30T19:53:52Z", "creator": "dan@danshome.net", "creation_time": "2013-10-30T19:53:52Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Even with auto deployment enabled, the use of the serviced flag by the manager means it should not be a factor here.\n\nI suspect some form of timeout as well. I agree it should be handled. I want to check to make sure that it is handled.", "id": 170938, "time": "2013-10-30T20:02:03Z", "bug_id": 55719, "creation_time": "2013-10-30T20:02:03Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 55719, "attachment_id": null, "text": "I been through the code and if the upload fails there should be something logged to $CATALINA_BASE/logs/manager-<timestamp>.log\n\nDo you still have those logs? If so, could you check to see if anything was logged?", "id": 171052, "time": "2013-11-05T10:32:43Z", "creator": "markt@apache.org", "creation_time": "2013-11-05T10:32:43Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 55719, "is_private": false, "text": "Without further input this issue will eventually get resolved as WONTFIX. If that does happen, it can always be re-opened once further information is available.", "id": 171467, "time": "2013-11-27T17:23:09Z", "creator": "markt@apache.org", "creation_time": "2013-11-27T17:23:09Z", "attachment_id": null}]
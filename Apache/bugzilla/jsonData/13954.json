[{"count": 0, "tags": [], "creator": "plittle@vergecorp.com", "attachment_id": null, "id": 25158, "creation_time": "2002-10-24T22:39:31Z", "time": "2002-10-24T22:39:31Z", "bug_id": 13954, "text": "When a timeout occurs, the HttpSession passed into valueUnbound() via the \nHttpBindingEvent contains an already invalidated HttpSession.  Since there is \nno lifecycle of an HttpSession defined in the servlet spec, I an guessing this \nis open to implementor's to decide.  I would *expect* all listeners to have \ntheir valueUnbound() methods called before the session they were attached to is \nactually invalidated by the Web Container.\n\nA stacktrace below shows the timeline of events:\n--------------------------------------------------\n\n(D)-255- | Thu Oct 24 14:36:52 MDT 2002 | OnlineMonitor | valueUnbound | \n36838.1035489988143 | Entering\njava.lang.Exception: getAttribute: Session already invalidated\n        at com.vergecorp.util.Log.error(Log.java:445)\n        at net.ejip.monitor.online.OnlineMonitor.valueUnbound\n(OnlineMonitor.java:69)\n        at org.apache.catalina.session.StandardSession.removeAttribute\n(StandardSession.java:1073)\n        at org.apache.catalina.session.StandardSession.expire\n(StandardSession.java:596)\n        at org.apache.catalina.session.StandardManager.processExpires\n(StandardManager.java:755)\n        at org.apache.catalina.session.StandardManager.run\n(StandardManager.java:832)\n        at java.lang.Thread.run(Thread.java:536)\n(E) | Thu Oct 24 14:36:52 MDT 2002 | OnlineMonitor | valueUnbound | \n36838.1035489988143 | getAttribute: Session already invalidated\n\n\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\nStandardSession.expire() code has the setValid(true) method called too \nearly!!!!  It should really be called after all of the valueUnbound() methods \nare called.  For instance, right before the expiring=false is set near the \nbottom of the method.\n\n/**\n     * Perform the internal processing required to invalidate this session,\n     * without triggering an exception if the session has already expired.\n     */\n    public void expire() {\n\n        // Mark this session as \"being expired\" if needed\n        if (expiring)\n            return;\n        expiring = true;\n        setValid(false);\n\n        // Remove this session from our manager's active sessions\n        if (manager != null)\n            manager.remove(this);\n\n        // Unbind any objects associated with this session\n        String keys[] = keys();\n        for (int i = 0; i < keys.length; i++)\n            removeAttribute(keys[i]);\n\n        // Notify interested session event listeners\n        fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n\n        // Notify interested application event listeners\n        // FIXME - Assumes we call listeners in reverse order\n        StandardContext context = (StandardContext) manager.getContainer();\n        Object listeners[] = context.getApplicationListeners();\n        if (listeners != null) {\n            HttpSessionEvent event =\n              new HttpSessionEvent(getSession());\n            for (int i = 0; i < listeners.length; i++) {\n                int j = (listeners.length - 1) - i;\n                if (!(listeners[j] instanceof HttpSessionListener))\n                    continue;\n                HttpSessionListener listener =\n                    (HttpSessionListener) listeners[j];\n                try {\n                    context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                               listener);\n                    listener.sessionDestroyed(event);\n                    context.fireContainerEvent(\"afterSessionDestroyed\",\n                                               listener);\n                } catch (Throwable t) {\n                    context.fireContainerEvent(\"afterSessionDestroyed\",\n                                               listener);\n                    // FIXME - should we do anything besides log these?\n                    log(sm.getString(\"standardSession.sessionEvent\"), t);\n                }\n            }\n        }\n\n        // We have completed expire of this session\n        expiring = false;\n        if ((manager != null) && (manager instanceof ManagerBase)) {\n            recycle();\n        }\n\n    }", "is_private": false}, {"count": 1, "tags": [], "bug_id": 13954, "text": "\n\n*** This bug has been marked as a duplicate of 16589 ***", "id": 51742, "time": "2004-02-04T22:36:19Z", "creator": "markt@apache.org", "creation_time": "2004-02-04T22:36:19Z", "is_private": false, "attachment_id": null}]
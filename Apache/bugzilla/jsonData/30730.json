[{"count": 0, "tags": [], "creator": "scotty@technophobia.co.uk", "attachment_id": null, "id": 62133, "time": "2004-08-18T15:33:59Z", "bug_id": 30730, "creation_time": "2004-08-18T15:33:59Z", "is_private": false, "text": "Hello,\n\nI'me using mod_actions to pass images (and add a watermark) through a php script\nusing the following in my httpd.conf:\nAction image/jpeg /watermark.php\n\nI also use server-status to see how much traffic my box has transfered, when\nusing this Action field, the Total Traffic stat on /server-status doesn't\nrepresent the full amount of data transfered, just adding a few bytes when an\nimage is accessed. The data is correct in my log files.\n\nregards,\n\nS :~>"}, {"count": 1, "tags": [], "creator": "basant.kukreja@sun.com", "attachment_id": null, "text": "\nWith the following configuration, I am able to reproduce the issue :\n\nExtendedStatus on\n <Location /server-status>\nSetHandler server-status\n\nOrder Deny,Allow\nDeny from all\nAllow from all\n</Location>\n\n\nDocumentRoot \"/disk/apache/apache2/imgs\"\n\n<Location \"/\">\n    AddHandler watermark .jpeg\n    Action watermark \"/cgi-bin/watermark1.php\"\n</Location>\n\nFor a request e.g /test.jpeg, request is internally redirected.\nap_internal_redirect_handler handles the redirection.\nap_internal_redirect_handler creates a new request_rec. ap_invoke_handler\nprocess the request. In this case jpeg file is sent. The new request_rec\nstructure contains the bytes sent but the original request's bytes are never\nincremented so mod_status doesn't count the bytes sent.\n\n\n\nHere is the watermark1.php\n-------------------------------------------\n\n#!/opt/php5.2.1/bin/php\n<?php\n\n/*\n   program:      makeimg.php\n   description:  creates new image by merging\n                 source image with watermark\n                 and outputs it to browser\n*/\n\nheader(\"Content-Type: image/jpeg\");\n//(because the script outputs picture)\n\n\nprint \"\\r\\n\";\n$transparency = 40; //watermark's transparency (0-100)\n\n//source photo\n$source_photo = stripslashes($_ENV{'PATH_TRANSLATED'});\n$photo = imagecreatefromjpeg($source_photo);\n\n//watermark\n$watermark = imagecreatefrompng('watermark.png');\n$watermark_width = imagesx($watermark);\n$watermark_height = imagesy($watermark);\n\n//location of the watermark on the source image\n$size = getimagesize($source_photo);\n$dest_x = ($size[0] - $watermark_width) / 2;\n$dest_y = ($size[1] - $watermark_height) / 2;\n\n//make the image (merge source image with watermark)\nimagecopymerge($photo, $watermark, $dest_x, $dest_y, 0, 0, $watermark_width,\n$watermark_height, $transparency);\n\n//output the image\nimagejpeg($photo);\n\n//free memory\nimagedestroy($photo);\nimagedestroy($watermark);\n\n?>\n-------------------------------------------\nphp shipped with Fedora Core 5 doesn't work correctly.\nAlso for this script, cgi/php will not work. cli/php will work correctly\nbecause cgi/php will expect script name to be in PATH_TRANSLATED variable.\n-------------------------------------------\n", "id": 100352, "time": "2007-03-13T14:21:28Z", "bug_id": 30730, "creation_time": "2007-03-13T14:21:28Z", "is_private": false}, {"count": 2, "tags": [], "creator": "basant.kukreja@sun.com", "text": "If we write a simple php script :\n\n#!/opt/php5.2.1/bin/php\n<?php\nheader('Location: /one.html') ;\nheader('Status: 200') ;\n?>\n\nThen cgi handler cgid_handler invokes ap_internal_redirect_handler which\nprocesses the relocated URI.\n\nIn this case too, mod_status doesn't get updated properly because\nap_internal_redirect_handler ignores the new request_rec's monitoring data.\n\n", "id": 100359, "time": "2007-03-13T15:09:23Z", "bug_id": 30730, "creation_time": "2007-03-13T15:09:23Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "basant.kukreja@sun.com", "attachment_id": 19706, "text": "Created attachment 19706\nPatch\n\nap_increment_counts updates the scoreboard structure (worker_score) and is\ncalled by http processing functions e.g ap_process_http_connection. \n\nIf a request is internally redirected then apache creates a new request_rec\nand process the request by calling ap_process_request_internal. Before this\nfix, apache miss the bytes sent by a internal redirect. In this fix, we\ninvoke a new function ap_increment_bytes which only increment the sent bytes. \nIt would be incorrect to call ap_increment_counts from internal redirect\nfunction because it increments the access counts too which will result in\nmore than 1 access count for a single request. A small refactoring was needed\nin scoreboard.c to make a single point of incrementing bytes.\n\nList of affected files :\nserver/scoreboard.c\ninclude/scoreboard.h\nmodules/http/http_request.c\n\n\nHow did I test the patch :\n1. Internal redirect by \nAction image/jpeg /watermark.php\nas reported by bug.\n2. Internal redirect by php script as mentioned before.\n\nserver-status is monitored to make sure that for each access, Total Traffic is\nreported correctly. Also \"Conn and Child\" was also observed for these requests.", "id": 100363, "time": "2007-03-13T18:02:01Z", "bug_id": 30730, "creation_time": "2007-03-13T18:02:01Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 30730, "attachment_id": null, "id": 101171, "time": "2007-03-29T11:12:56Z", "creator": "jim@apache.org", "creation_time": "2007-03-29T11:12:56Z", "is_private": false, "text": "Why the increment_bytes() function? Why not delete that, and have ap_increment_counts() call \nap_increment_bytes() directly (passing sb)?"}, {"count": 5, "tags": [], "text": "Against which codebase has this patch been created (2.0.x / 2.2.x / trunk)?\nDoes this problem also occur on trunk? On trunk the cleanup function of the eor\nbucket is responsible for incrementing the respective counters and this might\nalso work in the case of an internal redirect.", "attachment_id": null, "id": 101175, "creator": "rpluem@apache.org", "time": "2007-03-29T12:57:13Z", "bug_id": 30730, "creation_time": "2007-03-29T12:57:13Z", "is_private": false}, {"count": 6, "tags": [], "text": "The patch is generated against 2.2.x branch.\nI will check to see if the issue reproduces on trunk.\n\nRegarding Jim's question \"\n> Why the increment_bytes() function? Why not delete that, and have\nap_increment_counts() call \n>ap_increment_bytes() directly (passing sb)?\nIf we call ap_increment_bytes directly then ap_increment_bytes will obtain the\nworker_score pointer again by calling :\n    ws = &ap_scoreboard_image->servers[sb->child_num][sb->thread_num];\n\nSince ap_increment_count already have the ws pointer so I felt it is bit more\ncleaner to have a separate static function which takes worker_score as a\npointer.\n\n", "attachment_id": null, "id": 101182, "creator": "basant.kukreja@sun.com", "time": "2007-03-29T14:41:51Z", "bug_id": 30730, "creation_time": "2007-03-29T14:41:51Z", "is_private": false}, {"count": 7, "tags": [], "creator": "basant.kukreja@sun.com", "attachment_id": null, "text": "I am able to reproduce the problem in trunk too.\n", "id": 101188, "time": "2007-03-29T15:32:42Z", "bug_id": 30730, "creation_time": "2007-03-29T15:32:42Z", "is_private": false}, {"count": 8, "tags": [], "creator": "basant.kukreja@sun.com", "attachment_id": null, "text": "I debugged the issue in trunk. eor_bucket_cleanup is getting called. It also\ninvokes ap_increment_count. But there are two request objects. One is main\nrequest object and another one is the redirected request object which is created\nby ap_internal_redirect_handler\n    request_rec *new = internal_internal_redirect(new_uri, r);\n\neor_bucket_cleanup is called with main request object. In the case of\nredirect, bytes_sent are stored in second (redirected) request object (named\nnew).  The result is that access counters are incremented correctly but\nbytes_sent never incremented correctly. We can't call ap_increment_counts for\nredirected request because in that case access count will be incremented\ntwice.\n\n$ curl --dump-header - -o /tmp/one.jpeg http://localhost:4014/conv_test.jpeg\n\nHere is the debugging session :\n\nBreakpoint 1, ap_process_request (r=0x96ba458) at http_request.c:278\n278         conn_rec *c = r->connection;\n(gdb) c\nContinuing.\n\nBreakpoint 3, ap_internal_redirect_handler (new_uri=0x96bbf30\n\"/cgi-bin/watermark1.php/conv_test.jpeg\",\n    r=0x96ba458) at http_request.c:513\n513         request_rec *new = internal_internal_redirect(new_uri, r);\n(gdb) n\n516         if (!new) {\n(gdb) n\n520         if (r->handler)\n(gdb) n\n521             ap_set_content_type(new, r->content_type);\n(gdb) n\n522         access_status = ap_process_request_internal(new);\n(gdb) n\n523         if (access_status == OK) {\n(gdb) n\n524             if ((access_status = ap_invoke_handler(new)) != 0) {\n(gdb) n\n528             ap_finalize_request_protocol(new);\n(gdb) n\n533     }\n(gdb) p new\n$10 = (request_rec *) 0x96bbf58\n(gdb) p r\n$11 = (request_rec *) 0x96ba458\n(gdb) p new->bytes_sent\n$12 = 5046\n(gdb) p r->bytes_sent\n$13 = 0\n(gdb) c\nContinuing.\n\nBreakpoint 4, eor_bucket_cleanup (data=0x96b47f0) at eor_bucket.c:24\n24          apr_bucket *b = (apr_bucket *)data;\n(gdb) n\n25          request_rec *r = (request_rec *)b->data;\n(gdb) n\n27          if (r != NULL) {\n(gdb) p r\n$14 = (request_rec *) 0x96ba458\n(gdb) p r->bytes_sent\n$15 = 0\n(gdb) n\n32              b->data = NULL;\n(gdb)\n34              ap_update_child_status(r->connection->sbh, SERVER_BUSY_LOG, r);\n(gdb)\n35              ap_run_log_transaction(r);\n(gdb)\n36              if (ap_extended_status) {\n(gdb)\n37                  ap_increment_counts(r->connection->sbh, r);\n(gdb)\n40          return APR_SUCCESS;\n(gdb) p r->bytes_sent\n$16 = 0\n(gdb) c\n\nI considered transferring for bytes from redirected request object to main\nrequest object but I think that might create other problems.\n", "id": 101195, "time": "2007-03-29T17:16:42Z", "bug_id": 30730, "creation_time": "2007-03-29T17:16:42Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 30730, "attachment_id": 19843, "id": 101196, "time": "2007-03-29T17:35:17Z", "creator": "basant.kukreja@sun.com", "creation_time": "2007-03-29T17:35:17Z", "is_private": false, "text": "Created attachment 19843\npatch against trunk\n\nPatch generated for httpd trunk.\n\nBefore the fix :\n\nParent Server Generation: 0\nServer uptime: 3 seconds\nTotal accesses: 0 - Total Traffic: 0 kB\nCPU Usage: u0 s0 cu0 cs0\n0 requests/sec - 0 B/second -\n---------------------------\nAfter sending 4 jpeg requests (5 KB each)\n---------------------------\nParent Server Generation: 0\nServer uptime: 58 seconds\nTotal accesses: 5 - Total Traffic: 2 kB\nCPU Usage: u0 s0 cu0 cs0\n.0862 requests/sec - 35 B/second - 409 B/request\n\nNote that access count is incremented but bytes count remained 2 kB while it\nshould be \n4 * 5kB + 2kB for status = 22 kB\n\n--------------------------------------------------------------------\nAfter the fix :\n\nParent Server Generation: 2\nServer uptime: 1 second\nTotal accesses: 0 - Total Traffic: 0 kB\nCPU Usage: u0 s0 cu0 cs0\n0 requests/sec - 0 B/second -\n\n---------------------------\nAfter sending 4 jpeg requests (5 KB each)\n---------------------------\nParent Server Generation: 2\nServer uptime: 35 seconds\nTotal accesses: 5 - Total Traffic: 22 kB\nCPU Usage: u0 s0 cu0 cs0\n.143 requests/sec - 643 B/second - 4505 B/request\n\nNote that traffic is now 22 kB\n\n--------------------------------------------------------------------"}]
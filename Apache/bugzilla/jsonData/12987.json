[{"count": 0, "attachment_id": null, "bug_id": 12987, "is_private": false, "id": 23346, "time": "2002-09-25T06:47:36Z", "creator": "dave.kelly@samsungcontact.com", "creation_time": "2002-09-25T06:47:36Z", "tags": [], "text": "Description of problem:\nWhen my Linux server boots up, my application (Samsung Contact) is started \nfirst. This creates 2 semaphores with id=0 and id=32769.\n\nWhen Apache starts up, it changes the permissions on semaphore 0 from \n666 to 600 and ownership from openmail to apache. This causes errors to be \ngenerated within Samsung Contact because a daemon can no longer operate on the \nsemaphore it created.\n\nIf Samsung Contact is stopped and restarted, it's semaphores are created with \nnon-zero ids and subsequent restarts of Apache do not cause a problem.\n\nA strace on /usr/sbin/httpd shows that there are 3 calls to semctl to change \nthe ownership. However, within the strace, there are only ever 2 semgets. \nSomehow, the daemon is also calling semctl on semaphore 0.\n\nTrying to track this down with the 1.3.23-14 source RPM, there is no code that \nmatches the behaviour seen in the strace.\n\nThere are 2 calls to semctl for each semid: 1 to with IPC_STAT and 1 with \nIP_SET where the permissions and ownership are changed.\n\nThere are calls to semctl in http_main.c but they do not match up with the \nstrace output.\n\nAttempting to compile the source with debugging symbols turned on does not seem \nto reproduce the problem. (Help would be appreciated on enabling debugging \nsuccessfully :-) )\n\nCompiling the source from the SRPM, will reproduce the problem.\n\nWe are also seeing that after Apache has been shut down, the semaphores it \ncreated are being left.\n\nVersion-Release number of selected component (if applicable):\n\n\nHow reproducible:\nAlways\n\nSteps to Reproduce:\n1) Stop Apache or boot up without Apache running.\n2) Create a semaphore using the attached C program. If this is run just after \nboot up, it should have id 0. If not, modify the program so that semid=0 when \nthe call to semctl with IPC_SET is made.\n3) Run ipcs -s to confirm the permissions and ownership.\n4) Start up Apache.\n5) Run ipcs -s to see that the permissions and ownership of semaphore 0 have \nchanged.\n\t\n\nExpected Results:  Apache should not be \"stomping\" over an existing semaphore.\n\nAdditional info:\n\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/sem.h>\n\n#if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)\n\t/* union semun is defined by including <sys/sem.h> */\n#else\n\t/* according to X/OPEN we have to define it ourselves */\nunion semun {\n\tint val;                  /* value for SETVAL */\n\tstruct semid_ds *buf;     /* buffer for IPC_STAT, IPC_SET */\n\tunsigned short *array;    /* array for GETALL, SETALL */\n\t/* Linux specific part: */\n\tstruct seminfo *__buf;    /* buffer for IPC_INFO */\n};\n#endif\n\nint main(int argc, char *argv[])\n{\n\t\tint semid;\n\t\tchar c;\n\t\tunion semun arg;\n\t\tstruct semid_ds buf;\n\n\t\tsemid = semget(IPC_PRIVATE, 1, IPC_CREAT | 0666);\n\n\t\tbuf.sem_perm.uid = 100;\n\t\tbuf.sem_perm.gid = 11;\n\t\targ.buf = &buf;\n\t\tsemctl(semid, 1, IPC_SET, arg);\n\n//\t\tsemctl(semid, 1, IPC_RMID);\n\n\t\texit(0);\n\n}"}, {"count": 1, "tags": [], "bug_id": 12987, "text": "Sounds more like a problem with the semaphore implementation. IPC_PRIVATE means \njust that; if the kernel isn't honoring that there is little that Apache can do. Use a different \nmutex mechanism.", "id": 34736, "attachment_id": null, "creator": "jim@apache.org", "creation_time": "2003-04-08T15:15:27Z", "time": "2003-04-08T15:15:27Z", "is_private": false}]
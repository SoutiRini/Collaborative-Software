[{"count": 0, "tags": [], "bug_id": 47396, "text": "Created attachment 23839\nPatch to allow binding of external contexts\n\nI have created a patch to bind an external context to the JNDI tree using the <Resource /> tags.\n\nFor example the following Context.xml binds a remote JBoss naming context to the \"java:/comp/env/ejb\"\n \n<Context>\n\t<Resource name=\"ejb\" type=\"javax.naming.Context\" factory=\"org.jnp.interfaces.NamingContextFactory\" URL=\"jnp://apphost:1099/myapp\"/>\n</Context>\n\n\nThe reason why I am using this instead of using the <Ejb /> references is twofold:\n\n1) The tomcat naming context stores the retrieved EJB in its context, returning the same object with each lookup() call.\nFROM JSR 220: NOTE: When a stateful session bean is looked up or otherwise obtained through the explicit JNDI lookup mechanisms, the container must provide a new stateful session bean instance, as required by the Java EE specification (Section \u201cJava Naming and Directory Interface (JNDI) Naming Context\u201d [12]).\n\n2) After trying a quick hack to fix (1), I realised that each call it was creating a fresh NamingContext and associated objects for each call. Which is an unnecessary given that it should be essentially static.\n\n************\nTHE PATCH\n************\nNamingContextListener -- looks up the resource and rebinds (so it is stored as type=NamingEntry.CONTEXT).\nNamingContext -- I needed to wack a toString() call in as JBoss's JNP starting complaining that it wasn't a CompoundName because tomcat uses CompositeName. Not the best solution but it works.", "id": 128124, "time": "2009-06-20T15:09:05Z", "creator": "watts.chris@gmail.com", "creation_time": "2009-06-20T15:09:05Z", "is_private": false, "attachment_id": 23839}, {"count": 1, "tags": [], "bug_id": 47396, "text": "I think it would be better to address the root cause of this issue, that Tomcat was returning the same object from a JNDI lookup rather than a new one. That issue was reported (and fixed) as bug 49994. However, that in turn caused big problems (bug 50159) for JNDI DataSources where apps expect the same connection pool to be used for each lookup.\n\nTomcat 7 has addressed this by introducing the singleton attribute for resources. There are no plans to back-port the singleton feature to Tomcat 6 but if it is required please re-open bug 50159 and request a back-port to Tomcat 6.\n\nI am closing this as won't fix since it addresses the symptom rather than the root casue.", "id": 145737, "time": "2011-04-12T18:23:43Z", "creator": "markt@apache.org", "creation_time": "2011-04-12T18:23:43Z", "is_private": false, "attachment_id": null}]
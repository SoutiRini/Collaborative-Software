[{"count": 0, "tags": [], "creator": "ian988@darwinsys.com", "attachment_id": null, "is_private": false, "id": 100198, "time": "2007-03-08T15:06:36Z", "bug_id": 41795, "creation_time": "2007-03-08T15:06:36Z", "text": "o.a.b.classfile.ClassParser throws two exceptions. One has the file_name\nvariable included but the one that only comes up when you have a corrupted class\nfile does not. When you have thousands and thousands of classes (counting all\nthe classes in dependent jars) in a large project, this can make it very\ndifficult to find the problem! \n\nOne could in theory argue that the application using BCEL should report this,\nbut the canonical example of a file-related problem is FileNotFoundException\nwhich does include the filename, for the same reason as I suggest the exception\nthrown by ClassParser does. E.g., create new FileReader(\"/nosuchfile\") and you get:\n\nException in thread \"main\" java.io.FileNotFoundException: /nosuchfile (No such\nfile or directory)\n\nA simple SVN patch against r516101  follows (bigger than it needs to be due to\nEclipse's auto-remove-excess-whitespace mode):\n\nIndex:\n/home/ian/workspace/bcel/src/main/java/org/apache/bcel/classfile/ClassParser.java\n===================================================================\n---\n/home/ian/workspace/bcel/src/main/java/org/apache/bcel/classfile/ClassParser.java\n(revision 516101)\n+++\n/home/ian/workspace/bcel/src/main/java/org/apache/bcel/classfile/ClassParser.java\n(working copy)\n@@ -38,7 +38,7 @@\n  * further details about the structure of a bytecode file.\n  *\n  * @version $Id$\n- * @author <A HREF=\"mailto:m.dahm@gmx.de\">M. Dahm</A> \n+ * @author <A HREF=\"mailto:m.dahm@gmx.de\">M. Dahm</A>\n  */\n public final class ClassParser {\n \n@@ -206,7 +206,8 @@\n         }\n         if (((access_flags & Constants.ACC_ABSTRACT) != 0)\n                 && ((access_flags & Constants.ACC_FINAL) != 0)) {\n-            throw new ClassFormatException(\"Class can't be both final and\nabstract\");\n+            throw new ClassFormatException(\n+            \t\"Class \" + file_name + \" can't be both final and abstract\");\n         }\n         class_name_index = file.readUnsignedShort();\n         superclass_name_index = file.readUnsignedShort();"}, {"count": 1, "tags": [], "bug_id": 41795, "is_private": false, "text": "Thanks, applied. Please attach the diff next time.", "id": 100243, "time": "2007-03-10T06:51:55Z", "creator": "tcurdt@apache.org", "creation_time": "2007-03-10T06:51:55Z", "attachment_id": null}]
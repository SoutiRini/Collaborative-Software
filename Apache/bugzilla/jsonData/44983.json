[{"attachment_id": null, "tags": [], "bug_id": 44983, "text": "After XSLT transformation, xml security canonicalize it. This is wrong according to standard. User should manually append c14n transfomation.\n\nFrom standard:\nThe output of this transform is an octet stream. The processing rules for the XSL style sheet or transform element are stated in the XSLT specification [XSLT]. We RECOMMEND that XSLT transform authors use an output method of xml for XML and HTML. As XSLT implementations do not produce consistent serializations of their output, we further RECOMMEND inserting a transform after the XSLT transform to canonicalize the output. These steps will help to ensure interoperability of the resulting signatures among applications that support the XSLT transform. Note that if the output is actually HTML, then the result of these steps is logically equivalent [XHTML].", "count": 0, "id": 116548, "time": "2008-05-13T00:15:17Z", "creator": "Matej.Spiller@siol.net", "creation_time": "2008-05-13T00:15:17Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44983, "attachment_id": null, "text": "I have the same problem, I am using XSLT on an enveloped Signature Transform. In my case the dsig namespace is inserted into the resulting data and passed to the hash function. \n\nfor a quick fix/test I've inserted a test-function and replaced the c14n\n\n\n\ntest-function: converts DOMNode to safeBuffer\nsafeBuffer test(xercesc::DOMNode *node)\n{\n\tDOMImplementationLS* impl = DOMImplementationRegistry::getDOMImplementation(L\"LS\");\n\tDOMWriter* wrt = impl->createDOMWriter();\n\n\tMemBufFormatTarget* target = new MemBufFormatTarget();\n\twrt->writeNode(target,*node);\n\n\tchar* t = new char[target->getLen()+1];\n\tmemset(t,'\\0',target->getLen()+1);\n\tmemcpy(t,target->getRawBuffer(),target->getLen());\n\tsafeBuffer ret = t;\n\tdelete[] t;\n\n\twrt->release();\n\tdelete target;\n\n\treturn ret;\n}\n\n\nand changes in DSIGTransformXSL::appendTransformer\n\n\t// Create the XSLT transform\n\tXSECnew(x, TXFMXSL(mp_txfmNode->getOwnerDocument()));\n\tinput->appendTxfm(x);\n\n/*\n\t// Again use C14n (convenient) to translate to a SafeBuffer\n\n\tXSECC14n20010315 c14n(mp_txfmNode->getOwnerDocument(), mp_stylesheetNode);\n\tsafeBuffer sbStyleSheet;\n\tunsigned int size, count;\n\tunsigned char buf[512];\n\tsize = 0;\n\t\n\twhile ((count = c14n.outputBuffer(buf, 512)) != 0) {\n\t\t\n\t\tsbStyleSheet.sbMemcpyIn(size, buf, count);\n\t\tsize += count;\n\t\t\n\t}\n\t\n\tsbStyleSheet[size] = '\\0';\t\t// Terminate as though a string\n*/\n\n\tsafeBuffer sbStyleSheet = test(mp_stylesheetNode);\n\n\nI will build an XSECDomToSafeBuffer class with the same syntax as XSECC14n20010315, so there should only be small changes except the class :)\nComing in the next few days...", "id": 136723, "time": "2010-05-07T09:08:36Z", "creator": "patrick.hagelkruys@gmail.com", "creation_time": "2010-05-07T09:08:36Z", "is_private": false}, {"count": 2, "tags": [], "creator": "patrick.hagelkruys@gmail.com", "text": "sorry missing header file :)\n\nYou need to add following include command to the file DSIGTransformXSL.cpp\n\n#include <xercesc/framework/MemBufFormatTarget.hpp>", "id": 136724, "time": "2010-05-07T09:18:17Z", "bug_id": 44983, "creation_time": "2010-05-07T09:18:17Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": 25415, "creator": "patrick.hagelkruys@gmail.com", "text": "Created attachment 25415\nXSECDomToSafeBuffer.cpp\n\nXSECDomToSafeBuffer class", "id": 136730, "time": "2010-05-07T11:17:06Z", "bug_id": 44983, "creation_time": "2010-05-07T11:17:06Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": 25416, "creator": "patrick.hagelkruys@gmail.com", "is_private": false, "id": 136731, "time": "2010-05-07T11:17:56Z", "bug_id": 44983, "creation_time": "2010-05-07T11:17:56Z", "tags": [], "text": "Created attachment 25416\nXSECDomToSafeBuffer.hpp\n\nXSECDomToSafeBuffer class"}, {"attachment_id": null, "tags": [], "bug_id": 44983, "text": "Here is my DomToSafeBuffer class, is has not the same syntax as the c14n class, but i think this way it is much easier.\n\nI put the class into xsec/utils/\n\n\nchanges in DSIGTransformXSL::appendTransformer()\n\n\t// Create the XSLT transform\n\tXSECnew(x, TXFMXSL(mp_txfmNode->getOwnerDocument()));\n\tinput->appendTxfm(x);\n\n/*\n\t// Again use C14n (convenient) to translate to a SafeBuffer\n\t\n\tXSECC14n20010315 c14n(mp_txfmNode->getOwnerDocument(), mp_stylesheetNode);\n\tsafeBuffer sbStyleSheet;\n\tunsigned int size, count;\n\tunsigned char buf[512];\n\tsize = 0;\n\t\n\twhile ((count = c14n.outputBuffer(buf, 512)) != 0) {\n\t\t\n\t\tsbStyleSheet.sbMemcpyIn(size, buf, count);\n\t\tsize += count;\n\t\t\n\t}\n\t\n\tsbStyleSheet[size] = '\\0';\t\t// Terminate as though a string\n*/\n\t\n\tXSECDomToSafeBuffer tosb(mp_txfmNode->getOwnerDocument(), mp_stylesheetNode);\n\tsafeBuffer sbStyleSheet = tosb.getSafeBuffer();\n\n\tx->evaluateStyleSheet(sbStyleSheet);", "count": 5, "id": 136732, "time": "2010-05-07T11:20:14Z", "creator": "patrick.hagelkruys@gmail.com", "creation_time": "2010-05-07T11:20:14Z", "is_private": false}, {"count": 6, "tags": [], "text": "Do you have a contributor's agreement on file with Apache? I can't accept a patch of this size without that to cover copyright.\n\n(I also can't produce a patch myself because I don't use Xalan or even build the library with any of the XPath/XSLT support.)", "attachment_id": null, "id": 136734, "creator": "cantor.2@osu.edu", "time": "2010-05-07T13:11:41Z", "bug_id": 44983, "creation_time": "2010-05-07T13:11:41Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 44983, "is_private": false, "count": 7, "id": 136792, "time": "2010-05-11T16:39:05Z", "creator": "cantor.2@osu.edu", "creation_time": "2010-05-11T16:39:05Z", "text": "I believe your patch assumes an out of date DOM3 / Xerces API, so it will take some reworking."}, {"count": 8, "tags": [], "bug_id": 44983, "attachment_id": 25429, "text": "Created attachment 25429\nProposed patch to fix bug for Xerces 2 and 3\n\nCould you please test the attached self-contained patch to DSIGTransformXSL.cpp?\n\nUnless there's a need to factor out the serialization code, I'm inclined to leave it inline.", "id": 136794, "time": "2010-05-11T17:10:41Z", "creator": "cantor.2@osu.edu", "creation_time": "2010-05-11T17:10:41Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 44983, "attachment_id": null, "is_private": false, "id": 136809, "time": "2010-05-12T09:14:22Z", "creator": "patrick.hagelkruys@gmail.com", "creation_time": "2010-05-12T09:14:22Z", "text": "for usage with xerces 2.8 I had to add 2 additional include files to compile the library\n\n#include <xercesc/util/XMLUniDefs.hpp>\n#include <xercesc/util/Janitor.hpp>"}, {"attachment_id": null, "tags": [], "bug_id": 44983, "is_private": false, "count": 10, "id": 136810, "time": "2010-05-12T09:23:03Z", "creator": "patrick.hagelkruys@gmail.com", "creation_time": "2010-05-12T09:23:03Z", "text": "With xerces 2.8 the XSL Transform now seems correct.\nI will test it with xerces 3.0 within the next few days."}, {"count": 11, "attachment_id": null, "creator": "cantor.2@osu.edu", "text": "Thanks, I'll wait to hear back before I check it in. The missing headers are fixed in my copy.", "id": 136816, "time": "2010-05-12T10:23:34Z", "bug_id": 44983, "creation_time": "2010-05-12T10:23:34Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 44983, "is_private": false, "text": "also works with xerces 3", "id": 136819, "time": "2010-05-12T12:19:15Z", "creator": "patrick.hagelkruys@gmail.com", "creation_time": "2010-05-12T12:19:15Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 44983, "text": "http://svn.apache.org/viewvc?view=revision&revision=943580", "count": 13, "id": 136820, "time": "2010-05-12T13:11:07Z", "creator": "cantor.2@osu.edu", "creation_time": "2010-05-12T13:11:07Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Several operating systems don't support IPv4-mapped IPv6 address or have it \ndisabled by default (windows, OpenBSD, FreeBSD, NetBSD).\n\nIn Sun's jvm on windows when a ServerSocket is created the jvm creates two \nsockets, one for IPv4 and another for IPv6. The BSD's haven't ported this \nfeature yet and opted to disable IPv6 in jvm until someone ports the two socket \napproach.\n\nWhen using tcnative on Windows or a *BSD system and the Connector element in \nServer.xml doesn't specify an address attribute, the behavior of the Connector\nchanges. On windows it goes from listening on both IPv6 and IPv4 to just \nlistening on IPv6. For *BSD it goes from listening on IPv4 to listening on \nIPv6.\n\nI should point out I've only seen the above described behavior change on the \nBSD's (I don't use windows), but based on my knowledge of how Sun's jvm works I \nexpect the windows behavior to be as I described.\n\nI believe the fully correct solution would be to implement the two socket \napproach like Sun did for server sockets on windows, however that's going to \ntake a bit work. As a stop gap the following untested diff keeps IPv4 working \nfor windows and *BSD. For windows to get both IPv4 and IPv6 support while using \ntcnative, users will need to configure a second Connector with address \nspecified to \"::\" or other IPv6 address.\n\nIndex: util/java/org/apache/tomcat/util/net/AprEndpoint.java\n===================================================================\n--- util/java/org/apache/tomcat/util/net/AprEndpoint.java       (revision \n523411)\n+++ util/java/org/apache/tomcat/util/net/AprEndpoint.java       (working copy)\n@@ -555,10 +555,11 @@\n         }\n         int family = Socket.APR_INET;\n         if (Library.APR_HAVE_IPV6) {\n-            if (addressStr == null)\n+            if (addressStr == null) {\n+                if (!OS.IS_BSD && !OS.IS_WIN32 && !OS.IS_WIN64)\n+                    family = Socket.APR_UNSPEC;\n+            } else if (addressStr.indexOf(':') >= 0)\n                 family = Socket.APR_UNSPEC;\n-            else if (addressStr.indexOf(':') >= 0)\n-                family = Socket.APR_UNSPEC;\n         }\n         long inetAddress = Address.info(addressStr, family,\n                 port, 0, rootPool);", "attachment_id": null, "bug_id": 41973, "id": 101118, "time": "2007-03-28T11:13:03Z", "creator": "kurt@intricatesoftware.com", "creation_time": "2007-03-28T11:13:03Z", "is_private": false}, {"count": 1, "tags": [], "text": "I agree with you, and yes windows has the same behavior as BSD\nprobably because Microsoft stole the entire networking from BSD ;)\n\nAnyhow, in case the address is null it make sense to force the\nIPV4 on those platforms (by default APR for windows comes without\nIPV6 support, so you need to manually enable that during the build time).\n\nOn Windows and BSD one can simulate the same behavior like on Linux\nor Solaris by using two connectors with the same port\nIPV4 with address=\"0.0.0.0\"\nIPV6 with address=\"::\"\n(Something JDK is doing)\n\nAnyhow, the problem is not with Tomcat native, but rather the APR\nshould probably support that transparently.\n(It's on my TODO list for APR 2)\n", "attachment_id": null, "bug_id": 41973, "id": 101125, "time": "2007-03-28T11:54:25Z", "creator": "mturk@apache.org", "creation_time": "2007-03-28T11:54:25Z", "is_private": false}, {"id": 101160, "tags": [], "bug_id": 41973, "is_private": false, "count": 2, "text": "Making APR 2 transparently handle dual stacks sounds great. As a long term goal\nthat's the ideal solution. Also from a security standpoint, not using IPv4\nmapped addresses for all OS's (even those that support it) would be a good idea,\nIMO.\n\nWhile tcnative is aligned with APR 1 could the proposed change be added? I\nwasn't sure from your reply if it was. For the BSD's it is particularly needed\nsince our native jvm doesn't support IPv6. So what happens is that a working\nserver.xml stops working when tcnative is installed (due to the IPv4 to IPv6\nshift when address is null).", "time": "2007-03-29T07:15:18Z", "creator": "kurt@intricatesoftware.com", "creation_time": "2007-03-29T07:15:18Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Commited the proposed solution by using AF_INET for null addresses.", "is_private": false, "bug_id": 41973, "id": 101365, "time": "2007-04-03T03:48:11Z", "creator": "mturk@apache.org", "creation_time": "2007-04-03T03:48:11Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 67214, "time": "2004-11-19T14:02:48Z", "bug_id": 32319, "creation_time": "2004-11-19T14:02:48Z", "is_private": false, "text": "Idle connection disconnect - free waiting tomcat threads\n\nA mod_jk connection consumes one tomcat connector thread, even if it's idle for\na long time. The idle connection check in mod_jk only works, if the idle\nconnection is going to be used. Then it is checked if it was idle for too long\nand probably is beeing closed and reconnected.\n\nI implemented a feature, where in configurable intervals all workers of an lb\nworker are checked for idle connections, even the ones which are not returned by\nget_most_suitable_worker. It is only necessary, that the apache process uses\nsome worker inside the same lb. This way connections only used temporarily (e.g.\ndue to restart of clustered nodes) will be reliably closed after some idle time. \n\nMy implementation currently is only for Apache 1.3 and works very well under\nSolaris. I don't know, if it will work under Win/Netware/etc.. It does not use a\nseperate maintenance thread. The principles are the following (and I can sent\ncomplete code if you are interested):\n\na) In common/service.h in jk_worker define an additional hook JK_METHOD check\nto be implemented by the workers:\n\n    /*\n     * Check all workers on a regular basis,\n     * even if they do not process requests.\n     */\n    int (JK_METHOD *check)(jk_worker_t *w,\n                           int force,\n                           jk_logger_t *l);\n\nb) In common/jk_worker.c provide an entry point wc_check, that will call\nthe check method for all workers in the worker_map:\n\nvoid wc_check(jk_logger_t *l)\n{\n    int sz = map_size(worker_map);\n    jk_log(l, JK_LOG_DEBUG, \"wc_check got %d workers to check\\n\", sz);\n    if(sz > 0) {\n        int i;\n        for(i = 0 ; i < sz ; i++) {\n            jk_worker_t *w = map_value_at(worker_map, i);\n            if(w) {\n                w->check(w, 0, l);\n            }\n        }\n    }\n}\n\nc) In apache/1.3/mod_jk.c in method jk_handler before calling\nwc_get_worker_for_name call wc_check:\n\n        wc_check(l);\n\nd) For the individual worker types implement the check method according to\nyour needs. For instance for the ajp13 worker I did:\n\n/* Check uses the same function for ajp13 and ajp14 */\nstatic int JK_METHOD check(jk_worker_t *pThis,\n                           int force,\n                           jk_logger_t *l)\n{\n    return (ajp_check(pThis, force, l));\n}\nint JK_METHOD ajp13_worker_factory(\n...\n    aw->check_interval         = AJP_DEF_CHECK_INTERVAL;\n    aw->last_check             = time(NULL);\n...\n    aw->worker.check           = check;\n\nusing a generalized ajp_check from common/jk_ajp_common.c:\n\n/*\n* Check all workers on a regular basis,\n* even if they do not process requests.\n* Currently only one function is implemented:\n* close endpoint sockets if endpoint has been idle for too long.\n*/\nint ajp_check(jk_worker_t *pThis,\n              int force,\n              jk_logger_t *l)\n{\n    jk_log(l, JK_LOG_DEBUG, \"Into jk_worker_t::check\\n\");\n\n    if (pThis && pThis->worker_private) {\n        ajp_worker_t *p = pThis->worker_private;\n        if (force || p->check_interval) {\n            time_t now;\n            unsigned elapsed = 0;\n            now = time(NULL);\n            if (! force) {\n                elapsed = (unsigned)(now-p->last_check);\n            }\n            if (force || ( elapsed > p->check_interval )) {\n                p->last_check = now;\n                /* Handle endpoint idle timeouts */\n                close_idle_endpoints(p, l);\n            }\n        }\n        return JK_TRUE;\n    }\n    jk_log(l, JK_LOG_ERROR,\n           \"In jk_worker_t::check, NULL parameters\\n\");\n    return JK_FALSE;\n}\n\ne) Similarly for an lb worker I use\n\nstatic int JK_METHOD check(jk_worker_t *pThis,\n                           int force,\n                           jk_logger_t *l)\n{\n    jk_log(l, JK_LOG_DEBUG, \"Into jk_worker_t::check\\n\");\n\n    if(pThis && pThis->worker_private) {\n        lb_worker_t *p = pThis->worker_private;\n        if (force || p->check_interval) {\n            time_t now;\n            unsigned elapsed = 0;\n            now = time(NULL);\n            if (! force) {\n                elapsed = (unsigned)(now-p->last_check);\n            }\n            if (force || ( elapsed > p->check_interval )) {\n                int i;\n                p->last_check = now;\n                for(i = 0 ; i < p->num_of_workers ; i++) {\n                    /* Calling check for balanced workers using force flag */\n                    p->lb_workers[i].w->check(p->lb_workers[i].w, 1, l);\n                }\n            }\n        }\n        return JK_TRUE;\n    }\n    jk_log(l, JK_LOG_ERROR,\n           \"In jk_worker_t::check, NULL parameters\\n\");\n    return JK_FALSE;\n}"}, {"count": 1, "tags": [], "bug_id": 32319, "attachment_id": null, "text": "Hi,\n\n1. Can you rename 'check' to maintain\n2. Add the time(NULL) to function call so we don't call that for\n   each worker. For example call time(NULL) before calling wc_maintain,\n   so we don't call that function for each worker in the list.\n3. Explain the close_idle_endpoints function.\n4. Make a diff -u against current cvs head.\n\nThanks.", "id": 67497, "time": "2004-11-26T17:55:59Z", "creator": "mturk@apache.org", "creation_time": "2004-11-26T17:55:59Z", "is_private": false}, {"count": 2, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Created attachment 13560\nCall new jk method hook \"maintain\" from apache 1.3 jk_handler\n\nPart one of the patch: apached-1.3 patch", "id": 67511, "time": "2004-11-28T01:08:53Z", "bug_id": 32319, "creation_time": "2004-11-28T01:08:53Z", "is_private": false, "attachment_id": 13560}, {"count": 3, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Created attachment 13561\nImplement maintain jk method hook + minor bug fixes\n\npart 2: patch for the common files to implement maintain hook", "id": 67512, "time": "2004-11-28T01:10:16Z", "bug_id": 32319, "creation_time": "2004-11-28T01:10:16Z", "is_private": false, "attachment_id": 13561}, {"count": 4, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "'check' renamed to 'maintain' OK\n\ntime(NULL) called globally OK\n\ndiff -u attached\n\nclose_idle_endpoints function: closes all endpoints of a worker from inside the\nmaintain call, if the endpoint was not used at least idle_timeout seconds\n(default: disabled).\n\nNote:\n\n1) All changes are included inside \"defines\":\nKPDT_MAINTAIN_HOOK: add maintain hook\nKPDT_IDLE_TIMEOUT: add idle timeout (needs also KPDT_MAINTAIN)\nKPDT_BUG_FIX: some very small bug fixes\nKPDT_DEBUG: Adds more debug log output (not for production)\n\n2) I didn't have the time to compile and test. Since I changes the names (check\n-> maintain) and the position of the time() calls, I might have introduced\nerrors. I will not be able to test before wesdnesday. The original code was OK\nand is productive.\n\n3) I'm not sure, if there are implications for multi-threaded use, e.g. Apache\n2.0. I think wc_maintain has to be checked.\n\n4) To use the feature:\n\nDefine attribute maintain_interval (seconds) for the workers in the worker list\nin workers.properties. If you are using a load balancing worker, you only have\nto define the attribute for the lb itself.\n\nDefine attribute idle_timeout (seconds) for all the ajp13 or ajp14 workers used.\nWhenever a request processed and maintain_interval has passed for any worker in\nthe worker list, if the worker is ajp13 or ajp14 and the connections is idle for\nlonger then idle_timeout, is it closed. If the worker is lb and any of its\nbalanced workers is ajp13 or ajp14 and idle for more than its idle_timeout, its\nconnections is also closed.\n\nI hope this is understandable ;)\n", "id": 67513, "time": "2004-11-28T01:25:46Z", "bug_id": 32319, "creation_time": "2004-11-28T01:25:46Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "mturk@apache.org", "text": "Hi Reiner,\n\nThe patch look realy fine, but it has one major problem.\nCan you remove all #if KPDT directives?\nI mean we can not put something like that in the CVS.\nSeems that the maintain is configurable and it will take\nplace only if configured, thus all that preproc directives\nare an obstacle rather then feature.\n\nKeep up the good work!\n\nRegards,\nMladen.\n", "id": 67535, "time": "2004-11-29T12:22:12Z", "bug_id": 32319, "creation_time": "2004-11-29T12:22:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 32319, "attachment_id": 13581, "is_private": false, "id": 67545, "time": "2004-11-29T17:08:34Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2004-11-29T17:08:34Z", "text": "Created attachment 13581\nCall new jk method hook \"maintain\" from apache 1.3 jk_handler   \t \n\nStripped KPDT-defines"}, {"count": 7, "tags": [], "bug_id": 32319, "attachment_id": 13582, "text": "Created attachment 13582\nImplement maintain jk method hook + minor bug fixes\n\nStripped KPDT-defines and used JK_IS_DEBUG_LEVEL and JK_LOG_TRACE.", "id": 67546, "time": "2004-11-29T17:09:20Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2004-11-29T17:09:20Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 32319, "is_private": false, "text": "Defines were only meant during development/test cycles to definitely get rid of\nall additional code by compilation.\n\nDuring runtime usage of the new functionality is configurable and the defaults\nare to disable it, but of course some parts of the code nevertheless are lie\ninside the flow of control.", "id": 67547, "time": "2004-11-29T17:12:48Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2004-11-29T17:12:48Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "mturk@apache.org", "text": "Most of the ideas are already in the current CVS but implemented\nin a different fashion.", "id": 76946, "time": "2005-07-03T11:17:12Z", "bug_id": 32319, "creation_time": "2005-07-03T11:17:12Z", "is_private": false, "attachment_id": null}]
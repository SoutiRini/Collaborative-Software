[{"count": 0, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "I was merging multiple manifests into one with jar task. Lines that have 71 or \n72 characters are not shortened to 72 bytes. I think that the problem is in \norg.apache.tools.ant.taskdefs.Manifest.Attribute class in method writeValue. \nVariable value does not have crlf at the end of the string (at least in my \nsituation).\n\nI encountered this bug when I used bouncycastle's bcprov-jdk14-130.jar.", "id": 82616, "time": "2005-11-17T12:34:28Z", "creator": "daleksandar@neobee.net", "creation_time": "2005-11-17T12:34:28Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "Are all information in the manifest and the lines are only splitted? See the \nmanual of <manifest> [1] and the according jar specification [2].\n\n[1] http://ant.apache.org/manual/CoreTasks/manifest.html\n[2] http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html", "id": 82617, "time": "2005-11-17T12:55:36Z", "creator": "jan@materne.de", "creation_time": "2005-11-17T12:55:36Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 37548, "text": "I'm not sure I understand the problem.  Is this an encoding issue i.e. \"71 or 72\ncharacters are not shortened to 72 bytes\"?  Or what?  Can you attach the\nmanifest to show what you mean?", "id": 82620, "time": "2005-11-17T17:36:51Z", "creator": "mbenson@apache.org", "creation_time": "2005-11-17T17:36:51Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": 16989, "creator": "daleksandar@neobee.net", "text": "Created attachment 16989\nexample manifest", "id": 82624, "time": "2005-11-17T19:11:43Z", "bug_id": 37548, "creation_time": "2005-11-17T19:11:43Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 37548, "text": "For example these lines:\n\n*Name: org/bouncycastle/jce/provider/JCERSACipher$SHA512OAEPPadding.cla*\n* ss*\n*SHA1-Digest: mqoIoBS35xqt/Pd6T9ZXd54jxCg=*\n\nbecome:\n\n*Name: org/bouncycastle/jce/provider/JCERSACipher$SHA512OAEPPadding.class*\n*SHA1-Digest: mqoIoBS35xqt/Pd6T9ZXd54jxCg=*\n\n(I added stars for line start and line end in case they are not preserved)\n\nManifest file can't have lines longer than 72 bytes by specification.\n\norg.apache.tools.ant.taskdefs.Manifest.Attribute method checks for 72 bytes \nlimit but on strings without cr lf. In situations when line is 71 or 72 \ncharacters (without cr lf) long, resulting line will be 73 or 74 bytes long \nrespecteivly.\n\nI changed this method and it now works for me, but I am not sure if it works \nfor all situations. This is source code of method when I changed it. Line with \nstars is changed. (I am not familiar with diff and that is why I didn't use it)\n\n\n        private void writeValue(PrintWriter writer, String value)\n             throws IOException {\n\n            String line = name + \": \" + value;\n\n****        while (line.getBytes(\"UTF-8\").length > MAX_SECTION_LENGTH) {\n                // try to find a MAX_LINE_LENGTH byte section\n                int breakIndex = line.length() > MAX_SECTION_LENGTH ?\n\t\t\t\t\tMAX_SECTION_LENGTH : line.length();\n                String section = line.substring(0, breakIndex);\n                while (section.getBytes(\"UTF-8\").length > MAX_SECTION_LENGTH\n                     && breakIndex > 0) {\n                    breakIndex--;\n                    section = line.substring(0, breakIndex);\n                }\n                if (breakIndex == 0) {\n                    throw new IOException(\"Unable to write manifest line \"\n                        + name + \": \" + value);\n                }\n                writer.print(section + EOL);\n                line = \" \" + line.substring(breakIndex);\n            }\n            writer.print(line + EOL);\n        }\n    }", "id": 82625, "time": "2005-11-17T19:23:28Z", "creator": "daleksandar@neobee.net", "creation_time": "2005-11-17T19:23:28Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "I have a local copy with changes that have the same effect as the ones below,\nbut I am not yet 100% sure if that is correct\n\nFrom the specification:\n\n# Line length:\n\nNo line may be longer than 72 bytes (not characters), in its UTF8-encoded form.\nIf a value would make the initial line longer than this, it should be continued\non extra lines (each starting with a single SPACE). \n\n# Limitations:\n\nBecause header names cannot be continued, the maximum length of a header name is\n70 bytes (there must be a colon and a SPACE after the name).\n\nThe latter limitation suggests that the total length of the line could very well\nbe 74 bytes, including CR/LF\n70 bytes header name, colon an space make 72 bytes, that line has to be\nterminated and would have 73 or 74 bytes in total", "id": 82627, "time": "2005-11-17T21:21:07Z", "creator": "jkf@apache.org", "creation_time": "2005-11-17T21:21:07Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "Yes. Specification is not clear on this.\n\nI had problems with this because my jar wouldn't load after merging. It \nreported security issues for lines that are 71 or 72 characters long. After I \nmanualy changed those lines jar could be loaded.\n\nAlso, lines that are longer then 72 characters are split on 70th character. I \nthink that all lines should be split on either 70th or on 72nd character.", "id": 82640, "time": "2005-11-18T08:47:06Z", "creator": "daleksandar@neobee.net", "creation_time": "2005-11-18T08:47:06Z", "is_private": false}, {"count": 7, "attachment_id": null, "creator": "arjan.kok@nl.compuware.com", "text": "I propose to use the jkd make72safe to write the manifest:\n\n       /**\n         * Adds line breaks to enforce a maximum 72 bytes per line.\n         */\n        static void make72Safe(StringBuffer line) {\n            int length = line.length();\n            if (length > 72) {\n                int index = 70;\n                while (index < length - 2) {\n                    line.insert(index, \"\\r\\n \");\n                    index += 72;\n                    length += 3;\n                }\n            }\n            return;\n        }\n\nIt could be used as follows:\n\n        /**\n         * Write a single attribute value out\n         *\n         * @param writer the Writer to which the attribute is written\n         * @param value the attribute value\n         *\n         * @throws IOException if the attribute value cannot be written\n         */\n        private void writeValue(PrintWriter writer, String value) throws \nIOException {\n            String line = name + \": \" + value +EOL;\n            StringBuffer buf = new StringBuffer(line);\n            make72Safe(buf);\n            writer.print(buf.toString());\n         }\n\nThis also solves bug 34425.\n\nRegards, Arjan Kok.\n\n", "id": 84086, "time": "2005-12-30T16:29:40Z", "bug_id": 37548, "creation_time": "2005-12-30T16:29:40Z", "tags": [], "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 37548, "text": "I did a test:\n\n<project>\n    <manifest file=\"mf1.txt\">\n        <attribute name=\"one\" value=\"1234567890 234567890 234567890 234567890\n234567890 234567890 234567890 234567890 234567890 234567890\"/>\n    </manifest>\n    <jar destfile=\"test.jar\" manifest=\"mf1.txt\">\n        <manifest>\n            <attribute name=\"two\" value=\"1234567890 234567890 234567890\n234567890 234567890 234567890 234567890 234567890 234567890 234567890\"/>\n        </manifest>\n    </jar>\n    <mkdir dir=\"x\"/>\n    <unzip src=\"test.jar\" dest=\"x\"/>\n</project>\n\n\nBut the resulting manifest seems to be ok\n\n*Manifest-Version: 1.0*\n*Ant-Version: Apache Ant 1.7alpha*\n*Created-By: 1.5.0_06-b05 (Sun Microsystems Inc.)*\n*two: 1234567890 234567890 234567890 234567890 234567890 234567890 2345*\n* 67890 234567890 234567890 234567890*\n*one: 1234567890 234567890 234567890 234567890 234567890 234567890 2345*\n* 67890 234567890 234567890 234567890*\n\nApache Ant version 1.7alpha compiled on July 7 2006\n\n\n\nCould you give a reproducable sample?", "id": 91043, "time": "2006-07-10T06:58:34Z", "creator": "jan@materne.de", "creation_time": "2006-07-10T06:58:34Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "What I was trying to do when I encountered this problem was merging multiple \njar files into one file. I had problems with bouncycastle's bcprov-jdk14-\n130.jar file which can be downloaded from their site \n(http://www.bouncycastle.org/). I used apache ant 1.6.5.\n\nAnd, as I pointed out before, there were problems with lines that are 71 or 72 \ncharacters long. All longer and all shorter lines were ok. I see that lines in \nyour example are longer than 72 characters.\n\nThis illustrates bug (on version 1.6.5 as I don't have newer one):\n\n*<project>*\n*    <manifest file=\"mf1.txt\">*\n*        <attribute name=\"one\" value=\"1234567890 234567890 234567890 234567890 \n234567890 234567890 2345aa\"/>*\n*        <attribute name=\"two\" value=\"1234567890 234567890 234567890 234567890 \n234567890 234567890 2345a\"/>*\n*        <attribute name=\"thr\" value=\"1234567890 234567890 234567890 234567890 \n234567890 234567890 2345\"/>*\n*        <attribute name=\"for\" value=\"1234567890 234567890 234567890 234567890 \n234567890 234567890 2345aaa\"/>*\n*    </manifest>*\n*    <jar destfile=\"test.jar\" manifest=\"mf1.txt\">*\n*        <manifest>*\n*            <attribute name=\"one\" value=\"1234567890 234567890 234567890 \n234567890 234567890 234567890 2345aa\"/>*\n*            <attribute name=\"two\" value=\"1234567890 234567890 234567890 \n234567890 234567890 234567890 2345a\"/>*\n*\t        <attribute name=\"thr\" value=\"1234567890 234567890 234567890 \n234567890 234567890 234567890 2345\"/>*\n*    \t    <attribute name=\"for\" value=\"1234567890 234567890 234567890 \n234567890 234567890 234567890 2345aaa\"/>*\n*        </manifest>*\n*    </jar>*\n*    <mkdir dir=\"x\"/>*\n*    <unzip src=\"test.jar\" dest=\"x\"/>*\n*</project>*", "id": 91069, "time": "2006-07-10T20:15:01Z", "creator": "daleksandar@neobee.net", "creation_time": "2006-07-10T20:15:01Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 37548, "attachment_id": null, "text": "(In reply to comment #7)\n> I propose to use the jkd make72safe to write the manifest:\n> \n>        /**\n>          * Adds line breaks to enforce a maximum 72 bytes per line.\n>          */\n>         static void make72Safe(StringBuffer line) {\n>             int length = line.length();\n>             if (length > 72) {\n>                 int index = 70;\n>                 while (index < length - 2) {\n>                     line.insert(index, \"\\r\\n \");\n>                     index += 72;\n>                     length += 3;\n>                 }\n>             }\n>             return;\n>         }\n\nSorry, but that algorithm is not correct, it counts characters, not bytes. The\nspec is specific about that the string must be UTF-8 encoded. I've applied my\npatch, I prepared quite some time ago.\n\nPlease verify and reopen if this issue is not solved in HEAD.\nNote that attribute names of 70 characters are still allowed, and will yield 74\nbyte long lines (including eol). For this attribute names of 69 or 70 characters\nare treated separately.", "id": 91073, "time": "2006-07-10T21:54:52Z", "creator": "jkf@apache.org", "creation_time": "2006-07-10T21:54:52Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 41972, "attachment_id": null, "text": "I have performance issue while reading a large size excel file using Event User \nModel.\n\nI have simple java program which will read a excel file and print the values  \nIts working fine with smaller size file(26 column and 100 rows),\n\nBut I have excel file with 26 column and 32,000 rows when try to read this \nexcel sheets, Its taking more than 5 hrs to read the entire sheet (16 Mb approx)\n\nIs there any way to improve the performance, Because in real scenario I have \nsome excel files which is more than 40 MB.\n\nKindly please help he resolve this issue.\n\nThis is the code I am using\n-----------------------------------------------------------------------------\npublic class CopyExcelExample {\n\tString infile;\n\tSSTRecord sstrec;\n\tpublic CopyExcelExample() {}\n\n\tpublic void setInputFile(String infile) {\n\t\tthis.infile = infile;\n\t}\t\n\n\tpublic void run() throws IOException {\n\t\tSystem.out.println(\"Loading the input stream...\");\n\t\tFileInputStream fin = new FileInputStream(infile);\n\t\tSystem.out.println(\"Creating  the POIFSFileSystem object...\");\n\t\tPOIFSFileSystem poifs = new POIFSFileSystem(fin);\t\t\n\t\tSystem.out.println(\"Creating  createDocument InputStream\");\n\t\tInputStream din = poifs.createDocumentInputStream(\"Workbook\");\n\t\tHSSFRequest req = new HSSFRequest();\n\t\treq.addListenerForAllRecords(new MetronetExcelListener(this));\n\t\tHSSFEventFactory factory = new HSSFEventFactory();\n\t\tSystem.out.println(\"Start event process\");\n\t\tfactory.processEvents(req, din);\n\t\tfin.close();\n\t\tdin.close();\n\t\tLOG.info(\"done.\");\n\t}\n\n\tpublic void blankRecordHandler(Record record, int sheetnum) {\n\t\tBlankRecord blankrec = (BlankRecord) record;\n\t\tSystem.out.println(\"Ignore this row.\" + blankrec.getRow());\t\n\t\n\t}\n\n\tpublic void numberRecordHandler(Record record, int sheetnum) {\n\t\tNumberRecord numrec = (NumberRecord) record;\n\t\tint currentRowIndex = numrec.getRow();\n\t\tSystem.out.println(\"numrec \" + numrec.getColumn()\t+ \"row \"\n\t\t\t\t+ currentRowIndex + \"  \"\n\t\t\t\t+ getFormattedValue((int) numrec.getColumn(), \nnumrec.getValue()));\t\t\n\t}\n\n\tpublic void lableRecordHandler(Record record, int sheetNum) {\n\t\tLabelSSTRecord lrec = (LabelSSTRecord) record;\n\t\tint currentRowIndex = lrec.getRow();\n\t\tSystem.out.println(\"label \"\n\t\t\t\t+ lrec.getColumn()\t+ \"row \"+ \ncurrentRowIndex\n\t\t\t\t+ \"  \"\t+ \nsstrec.getString(lrec.getSSTIndex()));\t\t\n\t}\n\n\tpublic void recordHandler(Record record) {\n\t\tint sheetnum = -1;\n\n\t\tswitch (record.getSid()) {\n\t\t\n\t\tcase BOFRecord.sid:\n\t\t\tBOFRecord bof = (BOFRecord) record;\n\n\t\t\tif (BOFRecord.TYPE_WORKBOOK == bof.getType()) {\n\t\t\t\tLOG.info(\"A New Work book found\");\n\t\t\t\tsheetnum = 0;\n\t\t\t} else if (BOFRecord.TYPE_WORKSHEET == bof.getType()) {\n\t\t\t\tLOG.info(\"A new work sheet found\");\n\t\t\t\tsheetnum++;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase NumberRecord.sid:\n\t\t\tnumberRecordHandler(record, sheetnum);\n\t\t\tbreak;\n\n\t\tcase SSTRecord.sid:\n\t\t\tsstrec = (SSTRecord) record;\n\t\t\tSystem.out.println(record);\n\t\t\tbreak;\n\n\t\tcase LabelSSTRecord.sid:\n\t\t\tlableRecordHandler(record, sheetnum);\n\t\t\tbreak;\n\n\t\tcase MulBlankRecord.sid:\n\t\t\tSystem.out.println(record);\n\t\t\tbreak;\n\t\t\t\n\t\tcase BlankRecord.sid:\n\t\t\tblankRecordHandler(record, sheetnum);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tif ((args.length < 2) || !args[0].equals(\"--help\")) {\n\t\t\ttry {\n\t\t\t\tCopyExcelExample viewer = new \nCopyExcelExample();\n\t\t\t\tviewer.setInputFile(args[1]);\n\t\t\t\tlong l1 = System.currentTimeMillis();\n\t\t\t\tDate st = new Date();\n\t\t\t\tviewer.run();\n\t\t\t\tDate end = new Date();\n\t\t\t\tlong l2 = System.currentTimeMillis();\n\t\t\t\tSystem.out.println(\"\\n\\n done \\n\\n\");\n\t\t\t\tSystem.out.println(end);\n\t\t\t\tSystem.out.println(st);\n\t\t\t\tSystem.out.println(\"L2 - L1 <<<<<>>>>>>>>>>>>>> \n\" +  (l2-l1)/1000 +\" Sec..\");\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Usage: java \ncom.buildonline.bulkimport.metronet.CopyExcelExample \"+ \"file1 file2\");\n\t\t}\n\t}\n}\n\nclass MetronetExcelListener implements HSSFListener {\n\tCopyExcelExample efhssf;\n\n\tpublic MetronetExcelListener(CopyExcelExample efhssf) {\n\t\tthis.efhssf = efhssf;\n\t}\n\n\tpublic void processRecord(Record record) {\n\t\tefhssf.recordHandler(record);\n\t}\n}\n-----------------------------------------------------------------------------", "id": 101114, "time": "2007-03-28T09:24:30Z", "creator": "vvairam@ctspace.com", "creation_time": "2007-03-28T09:24:30Z", "is_private": false}, {"count": 1, "tags": [], "creator": "vvairam@ctspace.com", "attachment_id": 19833, "id": 101115, "time": "2007-03-28T09:32:09Z", "bug_id": 41972, "creation_time": "2007-03-28T09:32:09Z", "is_private": false, "text": "Created attachment 19833\nTestExcel"}, {"count": 2, "tags": [], "bug_id": 41972, "attachment_id": null, "text": "I suspect you are suffering very poor System.out performance, or your logging framework. I've never had any excel file take more than a few seconds to process with eventusermodel\n\nTry running your app with no output, no logging etc, and I suspect it'll run in a few seconds. However, without your excel file, there's no way to know for sure.", "id": 117007, "time": "2008-05-27T06:56:34Z", "creator": "apache@gagravarr.org", "creation_time": "2008-05-27T06:56:34Z", "is_private": false}]
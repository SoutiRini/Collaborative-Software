[{"count": 0, "tags": [], "creator": "ag@4js.com", "attachment_id": 26964, "is_private": false, "id": 146165, "time": "2011-05-06T13:26:14Z", "bug_id": 51160, "creation_time": "2011-05-06T13:26:14Z", "text": "Created attachment 26964\nPatch to apply from the root of the poi-3.6-20091214 source tree\n\nIn response to a discussion with Nick Burch in the user forum (see http://apache-poi.1045710.n5.nabble.com/HSSF-and-XSSF-memory-usage-some-numbers-td4312784.html) I am submitting an example implementation to provide support for very large xlsx files via the regular high level API without requiring more memory that is provided by the default heap space.\n\nThis text assumes knowledge of the thread mentioned above so that the problem and its proposed solution are not repeated again here.\n\nGeneral remarks\n-------------------------\n1) The code is far from being ready for general availability but I am submitting it to see if there is a chance that it may become part of the general source tree. If yes, then I will spend more time on it and do what I can to make it feature complete.\n2) I made the patch on the 3.6 version because that is what we currently are using. That of course is nonsense and I should have done it on the 3.8 beta2 but for having a first look, I thought that it wouldn't make a difference. If for whatever reason that is inconvenient to you, please tell me and I will apply the patch to the 3.8 version and make the necessary changes if any.\n\nDescription of the patch\n----------------------------------\nThe patch adds a demo application PoiTest (This is the application mentioned in the thread that was used to do the benchmarks) in patched/src/examples/src/org/apache/poi/ss/examples.\nThis console program takes some command line arguments and produces sheets in the formats xls. and xlsx using HSSF, XSSF and SXSSF. The SXSSF classes are new (The 'S' in the name stands for \"streaming)\" and they are the main subject of this proposal.\nThe program creates very simple workbooks (only one sheet, no styles, no images, no merged regions, only numeric data) but the implementation handles the mentioned items and string values too. I expect that many of your unit test will fail but us this is already sufficient to create the most sophisticated output we have.\nThe patch includes a shell script at the root \"RunPoiTest.sh\" which contains an example invocation which creates a 300,000 x 33 sheet using SXSSF.\nThe patch introduces 4 source files in the \"ooxml/java/org/apache/poi/xssf/usermodel\" package.\n1) SXSSFWorkbook extends XSSFWorkbook.\n\nThis class overloads write() to do the \"BigGridDemo\" patching stuff (Had to remove the \"final\" on the method in POIXMLDocument for that).\nI tricked the class into creating SXSSFSheets (instead of XSSFSheets) in calls to createSheet() and cloneSheet() by means of a virtual function XSSFWorkbook.getWorksheetRelation(). It seems to work but it is done without understanding your instantiation code at all.\n\n2) SXSSFSheet extends XSSFSheet\n\nThis class overloads all methods that deal with row creation and management. Instead of producing XSSFRow instances in calls to createRow() it returns SXSSFRow instances.\nI decided to make SXSSFRow implement the \"Row\" interface from scratch rather then making it a subclass of XSSFRow. This causes the following problem:\nSince XSSFSeet specializes some (or all?) functions from the interface Sheet that return or take a parameter of type \"Row\" to \"XSSFRow\" I could not overload those methods because SXSSFRow is not a subclass of XSSFRow as in the following example: \nThe signature of Sheet.createRow() in ss.usermodel.Sheet is \"public Row createRow(...)\"\nIn xssf.usermodel.XSSFSheet is is \"public XSSFRow createRow(..)\"\nNow in xssf.usermodel.SXSSFSheet I want to overload the function and write \"public Row createRow(...)\" or perhaps even \"public SXSSRow createRow()\". Neither is possible because you can only specialize but not generalize on overloading a method in a sub class.\n\nI solved the problem the wrong way. What I did was to remove the specialization in the signatures of the function in XSSFSheet so that the signatures are identical with the interface definitions.  As a result of this I had to add casts in many places in classes in the xssf package. So far, this is fine because a XSSFSheet may safely assume that \"Row XSSFSheet.getRow(int index)\" will in reality return a SXSSFRow.\n\nBy the time I had worked my self through the unit test replacing XSSFRow row=sheet.createRow() with \"Row row=sheet.createRow()\" and started on the examples I realized that this had not been the smartest idea. If this were version 1.0 of POI then that would have been fine but asking everybody to change from \"XSSFRow\" to \"Row\" is perhaps not such a good idea. \nNevertheless I did it that way for the moment it and we can't solve it any other way, we can always resort to composition (implement SXSSFWorkbook and SXSSFSheet form scratch) which is what I did on my local version here. Incidentally, this also solves the problem that \"final void write()\" cannot be overloaded.\n\nThe class uses an inner class \"SheetDataWriter\" which is inspired by the \"SpreadsheetWriter\" class from the \"BigGridDemo\". Its functionality has been reduced to the capability to serialize the \"<sheetData>\" containing the rows only via calls to SheetDataWriter.writeRow(int rowIndex,Row row). \nUnlike the \"BigGridDemo\" which produces the entire file, this class produces a document fragment file which is then injected into the \"sheet\" file produced by XSSFWorkbook.write(). If you find this confusing then look at the function SXSSFWorkbook.write(). \n\n3) SXSSFRow implements Row\nThis is a lightweight implementation of a Row with array storage for the cells. \nThe serialization is done by its owning SXSSFSheet.\nThe function row.createCell() returns SXSSFCell instances described below.\n\n3) SXSSFCell implements Cell\nThis is a lightweight implementation of a Cell with an array storage for the cells. It can be made a lot lighter but this naive implementation is sufficiently lean to provide a 5000 row cache in the default heap space without any problems at all. I haven't tested the actual numbers but guessing from the other naive models I played with earlier I would expect a cell to take per average something between 70 to 100 byte which is close to what HSSF consumes.\n\nI added \"//TODO:\" wherever there I was aware that I didn't implement something or when I was unsure about something.\n\nOK, I probably forgot some items but I can't think of anything else for the moment."}, {"count": 1, "tags": [], "bug_id": 51160, "text": "Thanks for the great patch! I'm reviewing it and will give my feedback soon. \n\nWhen I wrote BugGridDemo, I had in a generic streaming api in mind, but your implementation goes far beyond that. Very cool, I should say. \n\nSome comments on a quick review:\n\n 1. Please remove 'Property of Four Js*' and other copyright statements. By submitting a patch to Apache POI you agree to the Apache Licence Terms.\n 2. the SXSSF classes should live in a separate package under xssf. I propose to re-package them to org.apache.poi.xssf.streaming.*\n 3. I'm in two minds if subclasscing from XSSF was a good idea, most of XSSF classes are final by design and not meant for extention. Also, many operations in the streaming mode are not allowed and should throw IllegalStateException. It would be easier control if SXSSF classes were composites. \nNever mind for now, I will say my final word after review.\n\n 4. The PoiTest application should be renamed to something more descriptive, e.g. SSPerformanceTest\n \nPlease upload a patch against trunk. Your patch applies OK to 3.6, but I had problems applying it to trunk and had to resolve the rejections.\n\nRegards,\nYegor", "id": 146208, "time": "2011-05-09T12:39:02Z", "creator": "yegor@dinom.ru", "creation_time": "2011-05-09T12:39:02Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51160, "text": "Hi Yegor,\nthanks for looking into this so quickly. I will make a version for trunk with the requested changes as soon as you have decided for either composition or subclassing. \nI discovered the first problem with the implementation. I found that images were not correctly sized and went after the issue. It seems that you are using \"twoCellAnchor\" for images and since the SXSSFSheet has no rows you are computing \"rowOff\" based on the default row height. I went hunting for the place where this is computed but I couldn't find it (Can you help?). The solution could be to update any Anchor that spans a row when Row.setHeight() is called. Another solution could be to use \"oneCellAnchor\" whenever an image is anchored using ClientAnchor.DONT_MOVE_AND_RESIZE. Are there other issues like this?\nI added code to quote character data in the the spreadheet writer (this should also be done in the BigGridDemo) because otherwise it will create invalid documents when you write string values containing characters that are meaningful in XML like the character '<'. Do you have a utilty class for this?\nIs this the peferred method to communicate or am I misusing bugzilla?\nThanks,\nAlex", "id": 146213, "time": "2011-05-09T14:00:50Z", "creator": "ag@4js.com", "creation_time": "2011-05-09T14:00:50Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 51160, "text": "Hi Alex,\n\nBugzilla is the right place to discuss patches. This way we have a public record of the discussion and can easily track history.\n\nI'm leaning towards copmposition. The advantage is that with this approach we can stay untangled from XSSF and don't need to change signatures of XSSFSheet#getRow and XSSFSheet#createRow. My concern is compatibility with existing client code (including products I wrote for my company). There can be legacy code assuming that  XSSFSheet#createRow returns XSSFRow, not Row and your changes would broke it. \n\nSo, please refactor your patch to use composition instead of subclassing. I would like to check it in and include in the next beta. \n\nAt first glance,  SXSSF handles images correctly. I ran org.apache.poi.xssf.usermodel.examples.WorkingWithPictures from POI examples, only modified it to construct SXSSFWorkbook instead of XSSFWorkbook and the output looks good. Do you call XSSFPicture#resize() after you add it to a drawing? This is the place where the image is resized relative to its top-left corner.\n\nRegards,\nYegor", "id": 146319, "time": "2011-05-14T09:49:23Z", "creator": "yegor@dinom.ru", "creation_time": "2011-05-14T09:49:23Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "ag@4js.com", "attachment_id": 27006, "is_private": false, "id": 146351, "time": "2011-05-16T09:38:58Z", "bug_id": 51160, "creation_time": "2011-05-16T09:38:58Z", "text": "Created attachment 27006\nStreaming patch using composition"}, {"count": 5, "tags": [], "creator": "ag@4js.com", "attachment_id": null, "is_private": false, "id": 146352, "time": "2011-05-16T09:40:20Z", "bug_id": 51160, "creation_time": "2011-05-16T09:40:20Z", "text": "Hi Yegor,\nfind attached a batch based on 3.8-beta2-20110408 using composition. As requested the files are now in the new \"org.apache.poi.xssf.streaming\" package and PoiTest was renamed to SSPerformanceTest. The copyrights are removed and I added our company name to the @author if that is OK. Regarding the image bug find attached a small program that shows the differences in image output for the formats HSSF, XSSF and SXSSF. Note the relative path to the image \"./test-data/spreadsheet/logoKarmokar4.png\" in the program that has to be adapted if you run the program from anywhere else but the root of the source tree. The sample is prepared to be put as a test case using HSSFTestDataSamples.getTestDataFileContent() instead (The code is commented).\nThanks,\nAlex"}, {"count": 6, "tags": [], "creator": "ag@4js.com", "attachment_id": 27007, "is_private": false, "id": 146353, "time": "2011-05-16T09:44:43Z", "bug_id": 51160, "creation_time": "2011-05-16T09:44:43Z", "text": "Created attachment 27007\nTest case for differences in image output for the formats HSSF, XSSF and SXSSF\n\nRunning the program will produce three files. The issues are:\n- In the XSSFOuput.xlsx the image is not visible\n- In both XSSF and SXSSF the first row appears larger than in HSSF (supposed to be 2 inch high)\n- In SXSSF the image appears vertically stretched for the reasons I describe earlier."}, {"count": 7, "tags": [], "bug_id": 51160, "is_private": false, "text": "Applied in r1104120. \n\nI modified SSPerformanceTest to produce diffrent types of cells - numeric, string, etc. This utility is a handy indicator that all three APIs generate the same output and it is readable. Most feature works OK with SXSSF, I found only two issues so far: \n\n - booleans are shown as 1/0 instead of TRUE/FALSE\n - formulas are not yet supported. \n\nSee my TODO's in the code. \n\nOne strange thing is that SXSSF is slower than XSSF, I expect these APIs to be at least on par. \n\nHere are my benchmarks using SSPerformanceTest. Second column is max heap size, third is the size of grid, the last column is elapsed time.\n\nHSSF   -Xmx1024  10000x100  5 sec\nXSSF   -Xmx1024  10000x100  38 sec\nSXSSF  default   10000x100  302 sec   // almost 10x slower than XSSF!\n\nThere is something to work on.\n\nAlex, would you like to continue working on this feature and submit more patches? The code is great, but to be complete it needs documentation and tests. \n\nRegards,\nYegor", "id": 146375, "time": "2011-05-17T11:09:34Z", "creator": "yegor@dinom.ru", "creation_time": "2011-05-17T11:09:34Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 51160, "text": "It is a bug in XSSFPicture on line 250:\n\ninstead of \n\ndouble ch = getRowHeightInPixels(row2 + 1);\n\nit should be\n\ndouble ch = getRowHeightInPixels(row2);\n\nThe fix is coming soon.\n\nYegor\n\n(In reply to comment #6)\n> Created attachment 27007 [details]\n> Test case for differences in image output for the formats HSSF, XSSF and SXSSF\n> \n> Running the program will produce three files. The issues are:\n> - In the XSSFOuput.xlsx the image is not visible\n> - In both XSSF and SXSSF the first row appears larger than in HSSF (supposed to\n> be 2 inch high)\n> - In SXSSF the image appears vertically stretched for the reasons I describe\n> earlier.", "id": 146376, "time": "2011-05-17T11:11:15Z", "creator": "yegor@dinom.ru", "creation_time": "2011-05-17T11:11:15Z", "is_private": false, "attachment_id": null}, {"text": "I fixed the issue with the image not visible in XSSFOuput.xlsx. As I said, there was a bug in XSSFPicture on line 253. The fix committed in r1312341\n\nThe image in SXSSF is still vertically  stretched if you set a custom row height. It is not a bug, rather a feature of the current implemenetation. \n\nSee what happens:\n\nWhen you create a  Drawing you delegate the call to the underlying XSSFSheet#createDrawingPatriarch(). Then you create a picture, resize rows and call Picture#resize(). Excel anchores shapes to cells and rows and Picture#resize() attempts to calculate how much columns and rows the image occupies. It asks the parent (XSSFSheet, not SXSSFSheet!) to get the height of the first row, but XSSFSheet knows nothing about it and returns the default row height.\n\nTo be clear, the problem is in XSSFPicture#getRowHeightInPixels(int rowIndex) :\n\n    private float getRowHeightInPixels(int rowIndex){\n        XSSFSheet sheet = (XSSFSheet)getDrawing().getParent();\n\n        XSSFRow row = sheet.getRow(rowIndex);\n        float height = row != null ?  row.getHeightInPoints() : sheet.getDefaultRowHeightInPoints();\n        return height*PIXEL_DPI/POINT_DPI;\n    }\n\n\nIt operates with XSSF* objects while in a SXSSF context it should operate with SXSSFSheet and SXSSFRow.\n\nI'm not yet sure what is the best way to fix it. One approach is to create SXSSFDrawing and SXSSFPicture. Any ideas? \n\nRegards,\nYegor\n\n(In reply to comment #6)\n> Created attachment 27007 [details]\n> Test case for differences in image output for the formats HSSF, XSSF and SXSSF\n> \n> Running the program will produce three files. The issues are:\n> - In the XSSFOuput.xlsx the image is not visible\n> - In both XSSF and SXSSF the first row appears larger than in HSSF (supposed to\n> be 2 inch high)\n> - In SXSSF the image appears vertically stretched for the reasons I describe\n> earlier.", "tags": [], "bug_id": 51160, "is_private": false, "count": 9, "id": 146405, "time": "2011-05-18T10:40:22Z", "creator": "yegor@dinom.ru", "creation_time": "2011-05-18T10:40:22Z", "attachment_id": null}, {"count": 10, "attachment_id": null, "creator": "yegor@dinom.ru", "text": "Alex,\n\nI committed initial support for SXSSF tests in r1124177. There are four classes based on the abstract spreadsheet tests that are used for HSSF and XSSF testing. Failing tests are disabled. Ideally, all tests that make sense in SXSSF should pass. Please feel free to add / modify them any way you like.\n\nI see that some tests fail because you don't validate input arguments, for example, sheet.createRow(-1) throws IllegalArgumentException in HSSF and XSSF, but not in SXSSF. I hope those are easy to fix.\n\nRegards,\nYegor", "id": 146406, "time": "2011-05-18T11:14:02Z", "bug_id": 51160, "creation_time": "2011-05-18T11:14:02Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "is_private": false, "id": 146465, "time": "2011-05-19T12:14:38Z", "bug_id": 51160, "creation_time": "2011-05-19T12:14:38Z", "text": "I did a deeper review of SXSSSF and made a lot of small fixes, mostly to have the commented tests pass. I'm happy with the result. There are 9 disabled tests of 57, but these involve operations not supported in SXSSF:\n\n1. evalution of formulas. \n2. cloning of sheets\n3. shifting rows\n\nOther than that the API works fine and fully conforms to the POI spreadsheet interfaces.\n\n Below is a summary if my changes:\n\n SXSSFWorkbook\n   - cloneSheet does not make sense in SXSSF throws NotImplemented\n\n SXSSFSheet\n   - added support for blank, boolean, error and formula cells \n   - fixed getFirstRowNum() and getLastRowNum()  to return 0 if there are no rows. The old code threw NoSuchElement exception.\n   - removeRow(Row row) throws exception if the argument row belongs to a different sheet\n\n SXSSFRow\n   - getCell(int cellnum) validates the input argument and throws IllegalArgumentException if it is < 0.\n   - getCell(int cellnum) respects MissingCellPolicy and returns either null or blank depending on the workbook settings.\n   - getLastCellNum() returns -1 if there are no cells.\n   - Constructed FilledCellIterator points to the first cell (was to cellIndex=0 which isn't always the case)\n\n SXXSFCell\n   - misc fixes related to conversion of cell types. For example, if you create a string cell and then change its type to boolean then then string value must be converted and if it was \"TRUE\" or 1 then the boolean value=true. \n   - getCellStyle() always returns not-null. Default cell style has zero index and can be obtained as workbook.getCellStyleAt(0)\n   - implememented toString()\n   \n\nCommitted in r1124698. Shout if I've done something wrong.\n   \n\nRegards,\nYegor"}, {"count": 12, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "is_private": false, "id": 146467, "time": "2011-05-19T12:26:50Z", "bug_id": 51160, "creation_time": "2011-05-19T12:26:50Z", "text": "We can to a point where we can resolve this ticket. The initial version of SXXSF is in trunk and bugs will be in new tickets.\n\nI opened Bug 51233 for the stretched image issue.\n\nYegor"}]
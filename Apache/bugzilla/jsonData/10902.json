[{"count": 0, "tags": [], "text": "Catalina and CatalinaService classes programmatically update \nthe \"package.access\" SecurityManager property (if a SecurityManager is present) \nby adding Tomcat-specific package prefixes to protect access to, \nincluding \"org.apache.jasper.\".  This package-prefix is so general for Jasper \nthat even precompiled JSPs cannot run with the basic SecurityManager and policy \nfor Tomcat without getting a package access security exception.  This should be \nupdated to protect only the subset of Jasper packages (if any) that are NOT \npart of the Jasper runtime, so that precompiled JSPs can work seamlessly (as \nstandard servlets do) with a Tomcat instance running with the SecurityManager.\n\nA code snippet from Tomcat 4.0.1 follows that shows what gets set, but the same \nproblem has been verified to exist in 4.0.4:\n\n        // If a SecurityManager is being used, set properties for\n        // checkPackageAccess() and checkPackageDefinition\n        if( System.getSecurityManager() != null ) {\n            String access = Security.getProperty(\"package.access\");\n            if( access != null && access.length() > 0 )\n                access += \",\";\n            else\n                access = \"sun.,\";\n            Security.setProperty(\"package.access\",\n                access + \"org.apache.catalina.,org.apache.jasper.\");\n            String definition = Security.getProperty(\"package.definition\");\n            if( definition != null && definition.length() > 0 )\n                definition += \",\";\n            else\n                definition = \"sun.,\";\n            Security.setProperty(\"package.definition\",\n                // FIX ME package \"javax.\" was removed to prevent HotSpot\n                // fatal internal errors\n                definition + \"java.,org.apache.catalina.,org.apache.jasper.\");\n        }", "is_private": false, "id": 19688, "creator": "ruvinsky@yahoo.com", "time": "2002-07-17T16:06:27Z", "bug_id": 10902, "creation_time": "2002-07-17T16:06:27Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "glenn@apache.org", "is_private": false, "text": "Compiled JSP pages are put in package org.apache.jsp, not org.apache.jasper.\nRestricting access to org.apache.jasper has worked for a long time.\n\nWhat package is your precompiled JSP in?", "id": 19762, "time": "2002-07-18T12:28:06Z", "bug_id": 10902, "creation_time": "2002-07-18T12:28:06Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 10902, "text": "precompiling a simple JSP containing only \"hello world\" gives the following \n(note the references to \"org.apache.jasper.runtime.\"):\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.jsp.*;\nimport org.apache.jasper.runtime.*;\n\n\npublic class quiz extends HttpJspBase {\n\n\n    static {\n    }\n    public quiz( ) {\n    }\n\n    private static boolean _jspx_inited = false;\n\n    public final void _jspx_init() throws org.apache.jasper.runtime.JspException\n {\n    }\n\n    public void _jspService(HttpServletRequest request, HttpServletResponse  res\nponse)\n        throws java.io.IOException, ServletException {\n\n        JspFactory _jspxFactory = null;\n        PageContext pageContext = null;\n        HttpSession session = null;\n        ServletContext application = null;\n        ServletConfig config = null;\n        JspWriter out = null;\n        Object page = this;\n        String  _value = null;\n        try {\n\n            if (_jspx_inited == false) {\n                synchronized (this) {\n                    if (_jspx_inited == false) {\n                        _jspx_init();\n                        _jspx_inited = true;\n                    }\n                }\n            }\n            _jspxFactory = JspFactory.getDefaultFactory();\n            response.setContentType(\"text/html;charset=ISO-8859-1\");\n            pageContext = _jspxFactory.getPageContext(this, request, response,\n                                \"\", true, 8192, true);\n\n            application = pageContext.getServletContext();\n            config = pageContext.getServletConfig();\n            session = pageContext.getSession();\n            out = pageContext.getOut();\n\n            // HTML // begin [file=\"/quiz.jsp\";from=(0,0);to=(1,0)]\n                out.write(\"hello world\\r\\n\");\n\n            // end\n\n        } catch (Throwable t) {\n            if (out != null && out.getBufferSize() != 0)\n                out.clearBuffer();\n            if (pageContext != null) pageContext.handlePageException(t);\n        } finally {\n            if (_jspxFactory != null) _jspxFactory.releasePageContext(pageContex\nt);\n        }\n    }\n}\n", "id": 19788, "time": "2002-07-18T16:25:23Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2002-07-18T16:25:23Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "glenn@apache.org", "text": "Instead of Tomcat trying to fine tune the package access rules,\nwhy not just add the following permission to the default grant:\n\npermission \"java.lang.RuntimePermission\"\n\"accessClassInPackage.org.apache.jasper.runtime.*\";\n\nPlease let me know if this takes of the problem.\n\nIf it does, we may be able to add this as a default grant in\nthe catalina.policy which comes with Tomcat 4.", "id": 19790, "time": "2002-07-18T16:40:29Z", "bug_id": 10902, "creation_time": "2002-07-18T16:40:29Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 10902, "text": "Yes, adding the line\n\npermission \njava.lang.RuntimePermission \"accessPackageInClass.org.apache.jasper.runtime.\";\n\nto the security policy makes the problem go away.  Yes, in the mean time, \nplease add this fix into the default Tomcat security policy.  If that's the \ncase, you may be able to pull out the logic in JspServlet that dynamically \ngrants code blocks this permission for each servlet context JspServlet is \nexecuted in (at init time).\n\nAs an aside, Tomcat can be more specific about which jasper/jsp packages it \nadds to the \"package.access\" check list, but this will require more maintenance \ndown the road as jasper/jsp package names change.  However, what sounds \ncleanest long-term (but obviously requires more work) is to reorganize the \nJasper/JSP classes into appropriate packages that Tomcat can \nadd \"package.access\" restrictions to w/o having to grant any special package \naccess privileges in the security policy.", "id": 19797, "time": "2002-07-18T17:45:28Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2002-07-18T17:45:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "glenn@apache.org", "text": "The accessClassInPackage.org.apache.jasper.runtime.* permission has been added\nto the default catalina.policy in both the 4.0 and 4.1 branches of Tomcat.\n\nI think this is the best solution.  All packages are in org.apache.jasper,\nand only one permission needs to be granted for JSPC generated servlets.\n\nI also reviewed the classes in org.apache.jasper.runtime again to verify\nthat there weren't any security problems granting access to it.", "id": 19853, "time": "2002-07-19T12:42:04Z", "bug_id": 10902, "creation_time": "2002-07-19T12:42:04Z", "is_private": false, "attachment_id": null}]
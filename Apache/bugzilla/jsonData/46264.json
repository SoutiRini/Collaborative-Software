[{"attachment_id": null, "tags": [], "bug_id": 46264, "is_private": false, "count": 0, "id": 122725, "time": "2008-11-21T08:52:10Z", "creator": "joekislos@gmail.com", "creation_time": "2008-11-21T08:52:10Z", "text": "Shutting down tomcat with large number of contexts is slow\n\nOn some of our sandbox testing environments, we have tomcat loaded with 30-40 contexts, and run a very large heap (2-3GB).  Most of these contexts are large applications which take anywhere from 5-10 seconds to shutdown each.  Most of the time spent shutting down each application is not spent using the local app server CPU, but shutting down remote resources (Announcing the application is going down over JMS, flushing write buffers, closing DB connections, closing JMS connections, closing log connections, etc.).  Shutting down tomcat typically takes minutes, because it shuts down one context at a time."}, {"count": 1, "tags": [], "text": "I propose that during the context shutdown, tomcat use multiple threads to shutdown the contexts in parallel.\n\nI have attached a patch which will fire off:\n\n2 x # of Cores\n\nThreads during the shutdown process and work in a FIFO manner shutting down the contexts in parallel.  I suspect even when shutting down contexts which are entirely local in nature (not using resources on remote systems) on a single CPU machine a parallel shutdown will increase the shutdown speed because of various waits, sleeps and other things that may be called in the destroy() method of servlets that can be done in parallel\n\n", "attachment_id": null, "id": 122726, "creator": "joekislos@gmail.com", "time": "2008-11-21T09:04:01Z", "bug_id": 46264, "creation_time": "2008-11-21T09:04:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46264, "text": "Created attachment 22912\nProposed patch", "id": 122727, "time": "2008-11-21T09:04:50Z", "creator": "joekislos@gmail.com", "creation_time": "2008-11-21T09:04:50Z", "is_private": false, "attachment_id": 22912}, {"count": 3, "tags": [], "bug_id": 46264, "text": "I can confirm my patch still works on Tomcat 6.0.29", "id": 142146, "time": "2010-11-29T15:14:59Z", "creator": "joekislos@gmail.com", "creation_time": "2010-11-29T15:14:59Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 46264, "text": "(In reply to comment #3)\n> I can confirm my patch still works on Tomcat 6.0.29\n\nWould the java.util.concurrency package not provide a more elegant way of solving this problem?", "count": 4, "id": 142172, "time": "2010-11-30T01:41:00Z", "creator": "bugzilla@pidster.com", "creation_time": "2010-11-30T01:41:00Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 46264, "attachment_id": null, "id": 150385, "time": "2011-10-09T16:31:14Z", "creator": "markt@apache.org", "creation_time": "2011-10-09T16:31:14Z", "is_private": false, "text": "A few comments on the patch.\n\n1. Consider allowing the number of threads to be used to be configured (probably as a attribute of the host).\n\n2. Webapp start/stop time can vary widely. A more efficient solution would be to put all the webapps in a queue and have worker threads remove them one at a time.\n\n3. Both start and stop needs to be addressed."}, {"count": 6, "tags": [], "bug_id": 46264, "text": "Created attachment 27755\nstarting contexts in parallel using an executor\n\nWhile this patch is not really for stopping context, but for starting them in parallel, it might be useful nontheless.\n\nThere are two different ways to configure the amount of threads for parallel deployment. First extend the Host element in server.xml with the new attribute parallelDeployment. A value greater 0 will be used. If no valid value was given that way, the system property hostConfig.parallelDeploymentCount will be tested. Again a value greater zero will be valid. If still no valid value could be found Runtime will be asked for the number of available processors.", "id": 150435, "time": "2011-10-10T17:42:06Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2011-10-10T17:42:06Z", "is_private": false, "attachment_id": 27755}, {"count": 7, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "text": "Hi Felix,\n\ndon't want to split hairs or paint bikesheds but the attribute name seems problematic: in TC 7 we call \"parallel deployment\" the possibility to serve multiple versions of the same context in parallel by deploying versioned contexts.\n\nSomething like startupConcurrency might be better (and I think the fact that it would also be used for shutdown is not a big deal).\n\nRegards,\n\nRainer", "id": 150436, "time": "2011-10-10T18:05:29Z", "bug_id": 46264, "creation_time": "2011-10-10T18:05:29Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 46264, "attachment_id": null, "text": "I'm currently working on combining these two patches into a complete solution that covers multi-threaded deployment, and container start and stop.", "id": 150461, "time": "2011-10-11T11:02:10Z", "creator": "markt@apache.org", "creation_time": "2011-10-11T11:02:10Z", "is_private": false}, {"count": 9, "tags": [], "text": "Created attachment 27758\nThreaded start, stop and deployment fo Contexts\n\nThis proposed patch (against trunk) provides threaded start/stop for Contexts and Hosts and threaded deployment for Contexts. It builds on the previous suggested patches and the discussion on the users mailing list.\n\nThe patch is provided for review and feedback. It will be amended or committed based on the feedback received.", "attachment_id": 27758, "id": 150466, "creator": "markt@apache.org", "time": "2011-10-11T13:39:57Z", "bug_id": 46264, "creation_time": "2011-10-11T13:39:57Z", "is_private": false}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n\n+        // Zero == Runtime.getRuntime().availableProcessors()\n+        // -ve  == Runtime.getRuntime().availableProcessors() - value\n+        // These two are the same\n+        result = Runtime.getRuntime().availableProcessors() - result;\n\nresult is negative, so it gets more threads than processors?\n\nYou would want \"+ result\" here and \"+ value\" in the comment and in docs.", "is_private": false, "id": 150467, "creator": "knst.kolinko@gmail.com", "time": "2011-10-11T13:48:19Z", "bug_id": 46264, "creation_time": "2011-10-11T13:48:19Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 46264, "attachment_id": 27759, "text": "Created attachment 27759\nstarting contexts in parallel using an executor\n\nIn my testings, I have found that my patch sometimes throws exception deep inside tomcat. Those seem to come from incorrect locking of the digester in ContextConfig. I have corrected the initialization, so that findbugs is happy.\n\nBut while testing while writing this I got:\njava.lang.NullPointerException\n        at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1231)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)\n        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)\n        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)\n        at org.apache.catalina.startup.ContextConfig.processContextConfig(ContextConfig.java:650)\n        at org.apache.catalina.startup.ContextConfig.contextConfig(ContextConfig.java:607)\n        at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:845)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:340)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:389)\n        at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:655)\n        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:653)\n        at org.apache.catalina.startup.HostConfig$1.run(HostConfig.java:563)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\n\nafter that the digester seems to be unusable and I get following:\norg.xml.sax.SAXException: FWK005 parse may not be called while parsing.\n        at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1245)\n        at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)\n        at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)\n        at org.apache.catalina.startup.ContextConfig.processContextConfig(ContextConfig.java:650)\n        at org.apache.catalina.startup.ContextConfig.contextConfig(ContextConfig.java:587)\n        at org.apache.catalina.startup.ContextConfig.init(ContextConfig.java:845)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:340)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:389)\n        at org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:110)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:139)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:655)\n        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:653)\n        at org.apache.catalina.startup.HostConfig$1.run(HostConfig.java:563)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\n\nAfter that I changed class variable digester in ContextConfig to an instance variable.\n\nI also implemented a simple \"same thread executor\" to be used when only one thread is configured.\n\nI renamed parallelDeployment to startupConcurrency as suggested by Rainer and extended Host to expose getters and setters.", "id": 150468, "time": "2011-10-11T13:53:26Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2011-10-11T13:53:26Z", "is_private": false}, {"attachment_id": 27760, "tags": [], "bug_id": 46264, "text": "Created attachment 27760\nmake ContextConfig threadsafe\n\nSince Mark's patch is more elegant and complete than mine, it makes mine obsolete. But it has the same problem with the missing threadsafety of ContextConfig.\n\nThe attached patch makes Digester a member variable and the initialization more correct. With that I haven't seen an exception (yet).", "count": 12, "id": 150469, "time": "2011-10-11T14:49:21Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2011-10-11T14:49:21Z", "is_private": false}, {"count": 13, "tags": [], "text": "I've fixed the +/- issue locally and will include that in the next version of the patch. Thanks Konstantin for the catch.\n\nFelix, I think you have found one of the places where it is assumed context's are processed serially. I'm pretty sure there will be others or places where multiple threads don't help because of syncs (e.g. processing web.xml) I'll take a look through the Context init code and see what I can find. I'll include any fixes in the next version of the patch.", "attachment_id": null, "id": 150470, "creator": "markt@apache.org", "time": "2011-10-11T15:17:17Z", "bug_id": 46264, "creation_time": "2011-10-11T15:17:17Z", "is_private": false}, {"attachment_id": 27761, "tags": [], "bug_id": 46264, "is_private": false, "count": 14, "id": 150473, "time": "2011-10-11T17:12:24Z", "creator": "markt@apache.org", "creation_time": "2011-10-11T17:12:24Z", "text": "Created attachment 27761\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that:\n- fixes the issues identified by Konstantin\n- includes a variation of Felix's patch for context.xml parsing\n- fixes a similar issue with web.xml parsing\n- fixes an issue that meant the host's executor spun up threads every time it checked for new apps to deploy\n\nWith this patch applied, I see around 30% improvement in start time for 10s of small, simple applications. This is better, but not the improvement I was hoping for with 4 threads on an 8-core machine. The bulk of the time appears to be spent in XML parsing.\n\nI'm continuing to look into to this to see if there is scope for further improvement. Suggestions and/or additional analysis welcome.\n\nNote: The overhead of creating a digester per app is noticeable at ~5% so I think it is a price worth paying."}, {"count": 15, "tags": [], "bug_id": 46264, "attachment_id": null, "text": "There is a new Digester release (3.0), but I have no idea whether it would significantly improve speed and I suspect it's incompatible so could require non-trivial modifications elsewhere.", "id": 150475, "time": "2011-10-11T18:05:57Z", "creator": "bugzilla@pidster.com", "creation_time": "2011-10-11T18:05:57Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 46264, "attachment_id": null, "is_private": false, "id": 150479, "time": "2011-10-11T20:32:53Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-11T20:32:53Z", "text": "(In reply to comment #15)\n> There is a new Digester release (3.0), but I have no idea whether it would\n> significantly improve speed\n\nFrom threading point of view it is still the same: Rule, Digester and xml parser are usable in a single thread at once only. I do not think that xml parsers can be multi-threaded.\n\nThere is new API to declare a factory that creates sets of rules (binder.RulesModule), but we already do something similar, e.g. WebRuleSet#addRuleInstances().\n\nDigester 3.0 release notes:\nhttp://commons.apache.org/digester/commons-digester-3.0/RELEASE-NOTES.txt"}, {"count": 17, "text": "The HashMap HostConfig#deployed is used by multiple threads, but is not synchronized.\nSo there could be problems, even if I haven't seen any yet.\n\nWe could either wrap it using Collections.synchronizedMap, change it to a real concurrent Map implementation or use the Future, we get from the executorService to manipulate it again in a single thread.", "creator": "felix.schumacher@internetallee.de", "is_private": false, "id": 150488, "time": "2011-10-12T08:45:45Z", "bug_id": 46264, "creation_time": "2011-10-12T08:45:45Z", "tags": [], "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 46264, "attachment_id": 27767, "id": 150514, "time": "2011-10-13T10:37:08Z", "creator": "markt@apache.org", "creation_time": "2011-10-13T10:37:08Z", "is_private": false, "text": "Created attachment 27767\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that:\n- fixes the concurrency issue with the map of deployed applications\n- completes the remaining TODOs in the patch\n- removes the use of threads to start/stop listeners etc to prevent memory leaks as that is no longer required if all start/stop is done on a separate, short-lived thread\n\nI think this patch is getting pretty close now. Feedback from users with large numbers of apps would be useful."}, {"count": 19, "tags": [], "bug_id": 46264, "attachment_id": null, "is_private": false, "id": 150518, "time": "2011-10-13T11:32:13Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-13T11:32:13Z", "text": "(In reply to comment #18)\n> Created attachment 27767 [details]\n\nRe: startStopExecutor.allowCoreThreadTimeOut(true);\n\nI think that just using \"0\" instead of getStartStopThreadsInternal() as the value of first argument (corePoolSize) in ThreadPoolExecutor constructor will have the same effect. It is not much of a difference though.\n\nRe: Iterator<Future<Void>> iter = results.iterator();\n\nIt could be rewritten as for(Future<Void> future: results) loop.\nIn one place Future<?> is used, while I think it could be Future<Void> like in other places.\n\nRe: HostConfig\n\nI do not quite understand why to remove\n\"if (deploymentExists(cn.getName())) { return; }\"\nfrom the beginning of e.g. deployDescriptor() method.\n\nThe HostConfig#deployApps() method is called every 10 seconds to perform autodeployment (by HostConfig#check() called by HostConfig#lifecycleEvent())\nand without early return it will proceed to parsing context.xml file.\n\nRenaming s/dir/war/ can be done now, to slightly reduce future patch."}, {"attachment_id": null, "tags": [], "bug_id": 46264, "text": "> (In reply to comment #18)\n> > Created attachment 27767 [details]\n\nRe: HostConfig, one more:\n\n-hostConfig.deployWar=Deploying web application archive {0}\n\nThe above message should not have been removed from LocalStrings.properties file. It is used.\n\nRe: docs/config/host.xml, engine.xml:\n\nMaybe move the phrase about the default value to the end of the description.", "count": 20, "id": 150519, "time": "2011-10-13T11:40:13Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-13T11:40:13Z", "is_private": false}, {"count": 21, "tags": [], "text": "Created attachment 27769\nThreaded start, stop and deployment for Contexts\n\nUpdated patch that addresses review comments so far.", "attachment_id": 27769, "id": 150523, "creator": "markt@apache.org", "time": "2011-10-13T12:46:23Z", "bug_id": 46264, "creation_time": "2011-10-13T12:46:23Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 46264, "is_private": false, "count": 22, "id": 150528, "time": "2011-10-13T13:42:01Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2011-10-13T13:42:01Z", "text": "In ContainerBase#initInternal the ThreadPoolExecutor gets initialized with a core pool size of \"0\", but if we call ContainerBase#setStartStopThreads core pool size gets set to maximum pool size. Is this intended, or have I misinterpreted the code?"}, {"attachment_id": null, "tags": [], "bug_id": 46264, "text": "With core pool size set to \"0\" in ContainerBase#initInternal I get no concurrency at startup. It will be sequential only. If I change it back to \n\n  startStopExecutor = new ThreadPoolExecutor(getStartStopThreadsInternal(),\n                getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,\n                startStopQueue);\n\nI get a concurrent startup. (Startup time for my 20 dummy applications go down from 16s to 9s)\n\n\nAs ContainerBase#initInternal is also called from StandardContext, each Context will get its own startStopExecutor. Is this really needed?", "count": 23, "id": 150530, "time": "2011-10-13T14:41:42Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2011-10-13T14:41:42Z", "is_private": false}, {"count": 24, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 150531, "time": "2011-10-13T15:01:23Z", "bug_id": 46264, "creation_time": "2011-10-13T15:01:23Z", "text": "(In reply to comment #23)\n> With core pool size set to \"0\" in ContainerBase#initInternal I get no\n> concurrency at startup. It will be sequential only. If I change it back to \n> \n>   startStopExecutor = new ThreadPoolExecutor(getStartStopThreadsInternal(),\n>                 getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,\n>                 startStopQueue);\n> \n> I get a concurrent startup. (Startup time for my 20 dummy applications go down\n> from 16s to 9s)\n\nI'll take another look at that.\n\n> As ContainerBase#initInternal is also called from StandardContext, each Context\n> will get its own startStopExecutor. Is this really needed?\n\nIt isn't used at the moment and is likely to stay that way."}, {"attachment_id": null, "tags": [], "bug_id": 46264, "text": "(In reply to comment #19)\n> Re: startStopExecutor.allowCoreThreadTimeOut(true);\n> \n> I think that just using \"0\" instead of getStartStopThreadsInternal() as the\n> value of first argument (corePoolSize) in ThreadPoolExecutor constructor will\n> have the same effect. It is not much of a difference though.\n\nThis doesn't work since the queue is unbounded no more than one thread is every created.", "count": 25, "id": 150551, "time": "2011-10-13T23:04:51Z", "creator": "markt@apache.org", "creation_time": "2011-10-13T23:04:51Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 46264, "attachment_id": 27772, "is_private": false, "id": 150552, "time": "2011-10-13T23:19:14Z", "creator": "markt@apache.org", "creation_time": "2011-10-13T23:19:14Z", "text": "Created attachment 27772\nThreaded start, stop and deployment for Contexts\n\nUpdated version of the patch that restores the ability to start contexts in parallel.\nThe overhead (with the TCK webapps) of using a single thread is roughly what we have gained caching the global web.xml so users should see no change in the default config.\nOn an 8-core machine (and with the TCK webapps) I see a 50% reduction in start time when I use 4 threads."}, {"count": 27, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Created attachment 27846\nThreaded start, stop and deployment for Contexts\n\nUpdated patch without the line-ending issue of the previous one. I intend to apply this in the next day or so.", "id": 150902, "time": "2011-10-25T17:27:35Z", "bug_id": 46264, "creation_time": "2011-10-25T17:27:35Z", "attachment_id": 27846}, {"count": 28, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "This has been implemented in trunk and 7.0.x and will be included in 7.0.23 onwards.", "id": 150995, "time": "2011-10-28T08:02:48Z", "bug_id": 46264, "creation_time": "2011-10-28T08:02:48Z", "attachment_id": null}, {"count": 29, "tags": [], "text": "Some experience figures for 24 contents of which 12 are heavy applications:\n\n* original startup time with 7.0.21: 280 seconds\n* with  startStopThreads=\"16\": 30 seconds\n\nThank you!", "is_private": false, "id": 151966, "creator": "guido.leenders@invantive.com", "time": "2011-12-04T23:00:39Z", "bug_id": 46264, "creation_time": "2011-12-04T23:00:39Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 46264, "is_private": false, "count": 30, "id": 153713, "time": "2012-02-13T07:31:36Z", "creator": "mmmsleepytime@gmail.com", "creation_time": "2012-02-13T07:31:36Z", "text": "Where do we set the startStopThreads parameter value?"}, {"count": 31, "tags": [], "text": "(In reply to comment #30)\n> Where do we set the startStopThreads parameter value?\n\nIn the <Engine> component:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/engine.html\n\nPlease use the users' list for questions in the future.", "is_private": false, "id": 153751, "creator": "chris@christopherschultz.net", "time": "2012-02-13T20:24:39Z", "bug_id": 46264, "creation_time": "2012-02-13T20:24:39Z", "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 46264, "attachment_id": null, "is_private": false, "id": 153753, "time": "2012-02-13T20:41:25Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2012-02-13T20:41:25Z", "text": "(In reply to comment #31)\n> (In reply to comment #30)\n> > Where do we set the startStopThreads parameter value?\n> \n> In the <Engine> component:\n> http://tomcat.apache.org/tomcat-7.0-doc/config/engine.html\n\nAlso <Host>:\nhttp://tomcat.apache.org/tomcat-7.0-doc/config/host.html\n\n> Please use the users' list for questions in the future.\n\nAbsolutely."}]
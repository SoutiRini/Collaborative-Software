[{"count": 0, "tags": [], "text": "org.apache.catalina.loader.WebappClassLoader#started field isn't volatile,when org.apache.catalina.loader.WebappClassLoader#stop is executing by thread A,and  thread  B is loading class, thread b could see non-updated value started=false. and then  cause a NoClassDefFoundError.", "is_private": false, "id": 174463, "creator": "qiuboboy@qq.com", "time": "2014-04-11T07:59:51Z", "bug_id": 56387, "creation_time": "2014-04-11T07:59:51Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "1. You are confusing 'false' and 'true'. It is just wrong.\n\n2. At best it is just a theory. Can you demonstrate it with a testcase?\n\n3. When webapp stops, all its processing threads should have already been stopped. There are plenty of syncs involved when that happens, thus volatility is not an issue.", "id": 174485, "time": "2014-04-11T15:19:39Z", "bug_id": 56387, "creation_time": "2014-04-11T15:19:39Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 56387, "attachment_id": null, "is_private": false, "id": 174545, "time": "2014-04-14T01:37:26Z", "creator": "qiuboboy@qq.com", "creation_time": "2014-04-14T01:37:26Z", "text": "yes,thread b could see non-updated value started=true,my typo.\n\nwe found this excepiton:\n\njava.lang.NoClassDefFoundError: org/jboss/netty/util/internal/ExecutorUtil\n        at org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory.releaseExternalResources(NioServerSocketChannelFactory.java:146) ~[netty-3.2.5.Final.jar:na]\n        at org.jboss.netty.bootstrap.Bootstrap.releaseExternalResources(Bootstrap.java:324) ~[netty-3.2.5.Final.jar:na]\n        at com.alibaba.dubbo.remoting.transport.netty.NettyServer.doClose(NettyServer.java:124) ~[dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.remoting.transport.AbstractServer.close(AbstractServer.java:155) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.remoting.transport.AbstractServer.close(AbstractServer.java:163) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeServer.close(HeaderExchangeServer.java:121) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol.destroy(DubboProtocol.java:395) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.destroy(ProtocolFilterWrapper.java:66) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.destroy(ProtocolListenerWrapper.java:72) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.config.ProtocolConfig.destroyAll(ProtocolConfig.java:435) [dubbo-2.5.3.jar:2.5.3]\n        at com.alibaba.dubbo.config.AbstractConfig$1.run(AbstractConfig.java:452) [dubbo-2.5.3.jar:2.5.3]\n        at java.lang.Thread.run(Thread.java:722) [na:1.7.0_03]\nCaused by: java.lang.ClassNotFoundException: org.jboss.netty.util.internal.ExecutorUtil\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1711) ~[na:na]\n        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1556) ~[na:na]\n        ... 12 common frames omitted\n\nthe thread b is a java shunt down hook.so,it haven't been stopped ."}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "It is your responsibility to stop any threads that a web application may have started.  Especially, an application (and libraries that it uses) must not register any shutdown hooks.", "id": 174548, "time": "2014-04-14T08:06:34Z", "bug_id": 56387, "creation_time": "2014-04-14T08:06:34Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "Thanks your advice, Konstantin.\n\nSome libraries not only run in tomcat,it can be used in standalone application, shutdown hook is a ideal place to close external resources.I think tomcat must be throw a reasonable exception such as IllegalStateException(\"tomcat has been stopped.\") to hint users to handle their misusage.\n\nAdd volatile keyword to org.apache.catalina.loader.WebappClassLoader#started can help us to find problem quickly.\n\n(In reply to Konstantin Kolinko from comment #3)\n> It is your responsibility to stop any threads that a web application may\n> have started.  Especially, an application (and libraries that it uses) must\n> not register any shutdown hooks.", "is_private": false, "id": 174554, "creator": "qiuboboy@qq.com", "time": "2014-04-14T15:11:32Z", "bug_id": 56387, "creation_time": "2014-04-14T15:11:32Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "1. What exactly is your version of Tomcat?\n\nSo that I can interpret those line numbers in the exception.\n\n2. I agree that the code could be improved to provide more detail.\n\na) It cannot throw an IllegalStateException (per the API contract), but it can nest one into ClassNotFoundException that it throws.\n\nb) In WebappClassLoader.loadClass(String, boolean)\n\n        if (!started) {\n            try {\n                throw new IllegalStateException();\n            } catch (IllegalStateException e) {\n                log.info(sm.getString(\"webappClassLoader.stopped\", name), e);\n            }\n        }\n\nThat is some logic that logs the access. It would be better to follow that by failing fast via throwing an ClassNotFoundException instead of continuing.\n\nc) In WebappClassLoader.findClass(String)\n\nIt fails fast, but does not provide any details, nor logs this access.\n\n        // Cannot load anything from local repositories if class loader is stopped\n        if (!started) {\n            throw new ClassNotFoundException(name);\n        }\n\n\n> Add volatile keyword to org.apache.catalina.loader.WebappClassLoader#started\n> can help us to find problem quickly.\n\nThat would not hurt, but I do not believe that that would help you. I do not believe that your thread saw stale value of that flag.\n\n\nI am REOPENING this issue and changing severity and title. I do not see a bug here, but the behaviour can be improved.", "id": 174557, "time": "2014-04-14T18:14:42Z", "bug_id": 56387, "creation_time": "2014-04-14T18:14:42Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 56387, "is_private": false, "id": 174579, "time": "2014-04-15T07:53:05Z", "creator": "qiuboboy@qq.com", "creation_time": "2014-04-15T07:53:05Z", "tags": [], "text": "(In reply to Konstantin Kolinko from comment #5)\n> 1. What exactly is your version of Tomcat?\n> \n> So that I can interpret those line numbers in the exception.\n\nwe use tomcat 7.0.27.\n\n> 2. I agree that the code could be improved to provide more detail.\n> \n> a) It cannot throw an IllegalStateException (per the API contract), but it\n> can nest one into ClassNotFoundException that it throws.\n\nI agree with you idea,nest one into ClassNotFoundException will be prefect.\n\n> b) In WebappClassLoader.loadClass(String, boolean)\n> \n>         if (!started) {\n>             try {\n>                 throw new IllegalStateException();\n>             } catch (IllegalStateException e) {\n>                 log.info(sm.getString(\"webappClassLoader.stopped\", name), e);\n>             }\n>         }\n> \n> That is some logic that logs the access. It would be better to follow that\n> by failing fast via throwing an ClassNotFoundException instead of continuing.\n> \n> c) In WebappClassLoader.findClass(String)\n> \n> It fails fast, but does not provide any details, nor logs this access.\n> \n>         // Cannot load anything from local repositories if class loader is\n> stopped\n>         if (!started) {\n>             throw new ClassNotFoundException(name);\n>         }\n> \n> \n> > Add volatile keyword to org.apache.catalina.loader.WebappClassLoader#started\n> > can help us to find problem quickly.\n> \n> That would not hurt, but I do not believe that that would help you. I do not\n> believe that your thread saw stale value of that flag.\n\nNoClassDefFoundError happen Occasionally.and I analyze the code,only thread see stale value of that flag will cause the exception.\n \n> I am REOPENING this issue and changing severity and title. I do not see a\n> bug here, but the behaviour can be improved.\n\nthanks your help.^_^"}, {"count": 7, "tags": [], "text": "I agree that no evidence has been produced that supports the assertation that a state value of the started flag was observed. Note the state is volatile in Tomcat 8.\n\nI have improved the code that handles an attempt to load a class after a web application has been stopped. This will be in 8.0.9 onwards.", "is_private": false, "id": 175322, "creator": "markt@apache.org", "time": "2014-05-19T19:38:06Z", "bug_id": 56387, "creation_time": "2014-05-19T19:38:06Z", "attachment_id": null}]
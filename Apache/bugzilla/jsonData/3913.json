[{"count": 0, "tags": [], "bug_id": 3913, "attachment_id": null, "is_private": false, "id": 6256, "time": "2001-10-01T16:26:02Z", "creator": "garrick.olson@aceva.com", "creation_time": "2001-10-01T16:26:02Z", "text": "The documentation states classes will be removed from the coverage report if \nthey are not in the reference classpath.  The implementation does not filter \nout these classes properly.\n\nHere is a patch to fix the problem:\n\nIndex: XMLReport.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\nant/src/main/org/apache/tools/ant/taskdefs/optional/sitraka/XMLReport.java,v\nretrieving revision 1.1\ndiff -u -r1.1 XMLReport.java\n--- XMLReport.java\t2001/07/31 08:40:12\t1.1\n+++ XMLReport.java\t2001/09/14 18:18:23\n@@ -88,6 +88,9 @@\n \t/** parsed document */\n \tprotected Document report;\n \n+    /** mapping of class names to <code>ClassFile</code>s from the reference \nclasspath.  It is used to filter the JProbe report. */\n+    protected Hashtable classFiles;\n+    \n \t/** mapping package name / package node for faster access */\n \tprotected Hashtable pkgMap;\n \n@@ -155,7 +158,7 @@\n \t\t\t\t\tmethodname.delete(methodname.toString\n().indexOf(\"(\") , methodname.toString().length());\n \t\t\t\t\tString signature = classname + \".\" + \nmethodname + \"()\";\n \t\t\t\t\tif (filters.accept(signature)){\n-\t\t\t\t\t\tlog(\"keeped method:\" + \nsignature);\n+\t\t\t\t\t\tlog(\"kept method:\" + signature);\n \t\t\t\t\t\tnbmethods++;\n \t\t\t\t\t}\n \t\t\t\t\telse {\n@@ -163,7 +166,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t// if we don't keep any method, we don't keep \nthe class\n-\t\t\t\tif (nbmethods != 0){\n+\t\t\t\tif (nbmethods != 0 && classFiles.containsKey\n(classname)){\n \t\t\t\t\tlog(\"Adding class '\" + classname + \"'\");\n \t\t\t\t\tclassMap.put(classname, clazz);\n \t\t\t\t\tnbclasses++;\n@@ -186,19 +189,8 @@\n \t/** create the whole new document */\n \tpublic Document createDocument(String[] classPath) throws Exception {\n \n-\t\tDocumentBuilder dbuilder = newBuilder();\n-\t\tInputSource is = new InputSource( new FileInputStream(file) );\n-\t\tif (jprobeHome != null){\n-\t\t\tFile dtdDir = new File(jprobeHome, \"Dtd/snapshot.dtd\");\n-\t\t\tis.setSystemId( \"file:///\" + dtdDir.getAbsolutePath() );\n-\t\t}\n-\t\treport = dbuilder.parse( is );\n-\t\treport.normalize();\n-\n-\t\t// create maps for faster node access\n-\t\tcreateNodeMaps();\n-\n-\t\t// iterate over the classpath...\n+\t\t// Iterate over the classpath to identify reference classes\n+        classFiles = new Hashtable();\n \t\tClassPathLoader cpl = new ClassPathLoader(classPath);\n \t\tEnumeration enum = cpl.loaders();\n \t\twhile ( enum.hasMoreElements() ){\n@@ -207,8 +199,28 @@\n \t\t\tlog(\"Processing \" + classes.length + \" classes in \" + \nfl.getFile());\n \t\t\t// process all classes\n \t\t\tfor (int i = 0; i < classes.length; i++){\n-\t\t\t\tserializeClass(classes[i]);\n+\t\t\t\tclassFiles.put(classes[i].getFullName(), classes\n[i]);\n \t\t\t}\n+\t\t}\n+\n+        // Load the JProbe coverage XML report\n+\t\tDocumentBuilder dbuilder = newBuilder();\n+\t\tInputSource is = new InputSource( new FileInputStream(file) );\n+\t\tif (jprobeHome != null){\n+\t\t\tFile dtdDir = new File(jprobeHome, \"Dtd\");\n+\t\t\tis.setSystemId( \"file:///\" + dtdDir.getAbsolutePath() \n+ \"/\");\n+\t\t}\n+\t\treport = dbuilder.parse( is );\n+\t\treport.normalize();\n+\n+\t\t// create maps for faster node access (also filters out \nunwanted nodes)\n+\t\tcreateNodeMaps();\n+\n+\t\t// Make sure each class from the reference path ends up in the \nreport\n+\t\tEnumeration classes = classFiles.elements();\n+\t\twhile ( classes.hasMoreElements() ){\n+\t\t\tClassFile cf = (ClassFile) classes.nextElement();\n+            serializeClass(cf);\n \t\t}\n \t\t// update the document with the stats\n \t\tupdate();"}, {"count": 1, "tags": [], "creator": "garrick.olson@aceva.com", "text": "Created attachment 618\nFix for this bug (text file)", "id": 6257, "time": "2001-10-01T16:28:35Z", "bug_id": 3913, "creation_time": "2001-10-01T16:28:35Z", "is_private": false, "attachment_id": 618}, {"count": 2, "tags": [], "bug_id": 3913, "attachment_id": null, "is_private": false, "id": 8023, "time": "2001-11-17T17:30:46Z", "creator": "sbailliez@apache.org", "creation_time": "2001-11-17T17:30:46Z", "text": "Fixed in CVS.\nI changed the bytecode reader as well to minimize the number of useless objects \ncreated, it should be far less resource demanding than the original version.\n\nYou might want to give a try to ensure that I did not break too many things.\nI will try to do a real test and write a basic testcase."}, {"attachment_id": null, "tags": [], "bug_id": 3913, "is_private": false, "count": 3, "id": 8455, "time": "2001-11-29T20:56:24Z", "creator": "garrick.olson@aceva.com", "creation_time": "2001-11-29T20:56:24Z", "text": "\nI tried out your changes, and everything looks fine on Windows 2000.  I \nrecently started using these tasks on Solaris, and am having a bit of trouble, \nbut I don't think that is related to your changes.  I will open a separate \ndefect report for that."}]
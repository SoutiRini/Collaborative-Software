[{"count": 0, "tags": [], "creator": "slaurent@apache.org", "attachment_id": 25535, "is_private": false, "id": 137394, "time": "2010-06-06T17:57:11Z", "bug_id": 49395, "creation_time": "2010-06-06T17:57:11Z", "text": "Created attachment 25535\npatch for tomcat 6\n\nIt would be nice if the \"find leaks\" feature of the manager servlet provided the date and time at which the leaking context was started.\n\nI provide patches for tomcat 7 and 6 to do that."}, {"count": 1, "tags": [], "bug_id": 49395, "attachment_id": 25536, "id": 137395, "time": "2010-06-06T17:57:55Z", "creator": "slaurent@apache.org", "creation_time": "2010-06-06T17:57:55Z", "is_private": false, "text": "Created attachment 25536\npatch for tomcat 7"}, {"attachment_id": null, "tags": [], "bug_id": 49395, "is_private": false, "count": 2, "id": 137396, "time": "2010-06-06T17:58:58Z", "creator": "markt@apache.org", "creation_time": "2010-06-06T17:58:58Z", "text": "What is the use case for this? I can't see what problem you are trying to solve."}, {"count": 3, "tags": [], "bug_id": 49395, "text": "Interesting, though there are some issues\n\n1) Host.findReloadedContextMemoryLeaks is callable through JMX.\nI need to test it, but I suppose that ContextLeakInfo cannot be rendered by JConsole.\n\n2) It looks like an API change for me.\n\n3) I would like to see not only when the context was started, but also when it was stopped.\n\n4) ContextLeakInfo.java needs the Apache license header.\n\n5) i18n.\n\n6) As a further enhancement I think that the result returned by StandardHost.findReloadedContextMemoryLeaks() might be sorted by contextPath and then by startDate.\n\n7) The documentation has to be updated: manager-howto.xml, html-manager-howto.xml\n\n\nI think that the use cases for this improvement are the following:\nKnowing the times will allow someone to\na) distinguish new results from the old ones,\nwhich is needed because the information on the leaked contexts accumulates over time.\n\nb) match the leaked application instance to a certain time frame in the deployment history of that web application, its logs, GC logs. E.g. if not each start/stop cycle exposes the leak, or if GC cannot be forced and we must wait some time before it occurs naturally.", "id": 137398, "time": "2010-06-06T19:23:55Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-06-06T19:23:55Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "slaurent@apache.org", "attachment_id": null, "is_private": false, "id": 137421, "time": "2010-06-07T17:25:05Z", "bug_id": 49395, "creation_time": "2010-06-07T17:25:05Z", "text": "Konstantin,\n\nyour use cases are what I had in mind. Most notably, it's interesting to know whether the leaking context is the first one that was deployed or subsequent ones. In the former case, this might indicate that some Thread is spawned once per JVM with an incorrect CCL (the kind of leak the JreMemoryLeakPreventListener tries to avoid). I know that it does not replace a full heap analysis with a tool, but it gives a quick clue.\n\nI'll take your points into account and post a new patch in a couple of days."}, {"count": 5, "tags": [], "creator": "slaurent@apache.org", "is_private": false, "id": 137422, "attachment_id": null, "bug_id": 49395, "creation_time": "2010-06-07T17:39:45Z", "time": "2010-06-07T17:39:45Z", "text": "Regarding JMX, jconsole cannot display the array of ContextLeakInfo because it does not have the class locally.\n\nIs it that important ? Otherwise we could return an array of String as it is done currently, with each String containing the various information separated by a tab (or another special character like a pipe)."}, {"count": 6, "tags": [], "bug_id": 49395, "text": "Created attachment 25570\npatch for tomcat 7, v2\n\nI'm proposing a new patch that addresses the points you noticed. There remains the question of JMX\n\n> 1) Host.findReloadedContextMemoryLeaks is callable through JMX.\n> I need to test it, but I suppose that ContextLeakInfo cannot be rendered by\n> JConsole.\nIn the new patch I kept the String[] for the return value, separating context path, start date and stop dates by a tab.\n\n> \n> 2) It looks like an API change for me.\nIf we keep String[], the only thing that change is the content of the Strings. Is it that important ? This type of information is probably rather for humans.\n\n> \n> 3) I would like to see not only when the context was started, but also when it\n> was stopped.\ndone\n\n> 4) ContextLeakInfo.java needs the Apache license header.\ndone\n\n> 5) i18n.\nI just modified the text in the HTMLmanager translation. Dates are is ISO 8601 format, no need for translation.\n\n> 6) As a further enhancement I think that the result returned by\n> StandardHost.findReloadedContextMemoryLeaks() might be sorted by contextPath\n> and then by startDate.\ndone\n\n> 7) The documentation has to be updated: manager-howto.xml,\n> html-manager-howto.xml\ndone", "id": 137512, "time": "2010-06-09T17:02:11Z", "creator": "slaurent@apache.org", "creation_time": "2010-06-09T17:02:11Z", "is_private": false, "attachment_id": 25570}, {"count": 7, "tags": [], "text": "I think a way to go is to provide separate JMX command, e.g. \"findleaks2\", that will provide not just list of applications, but additional information in parseable format.\n\nFor Tomcat 7 this can include separate values for name and path of the context.\n\nNote, that there exists another enhancement request for findleaks command:\nbug 51195.", "attachment_id": null, "bug_id": 49395, "id": 148176, "time": "2011-07-26T11:24:08Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-07-26T11:24:08Z", "is_private": false}]
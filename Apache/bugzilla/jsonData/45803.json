[{"count": 0, "tags": [], "creator": "javabrett@gmail.com", "text": "As per discussion on the mailing list.\n\nWith JUL it is possible to use a system property to control the\nLogManager class.  So I created a class:\n\n   /* *** */\n   package org.apache.logging.julbridge;\n\n   import java.io.IOException;\n\n   import org.apache.log4j.LogManager;\n\n   public class JULBridgeLogManager extends java.util.logging.LogManager {\n\n       public void readConfiguration() throws IOException, SecurityException {\n           JULLog4jBridge.assimilate(LogManager.getLoggerRepository());\n       }\n   }\n\nThen, I can set\n-Djava.util.logging.manager=org.apache.logging.julbridge.JULBridgeLogManager\nfor my JVM startup, and the bridge is activated on the first call to\nthe LogManager, when a Logger is first requested.  There seems to be\nsufficient synchronization protection around this.\n\nThis works for me and avoids a) the initial JUL LogManager\ninitialization (minor) and b) the need for a static call to activate\nthe bridge, nicely replaced with a system property.\n\nCandidate patch attached.  This code is \"all yours\".", "id": 120586, "time": "2008-09-14T03:52:49Z", "bug_id": 45803, "creation_time": "2008-09-14T03:52:49Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 45803, "is_private": false, "id": 120587, "attachment_id": 22562, "creator": "javabrett@gmail.com", "creation_time": "2008-09-14T03:53:59Z", "time": "2008-09-14T03:53:59Z", "text": "Created attachment 22562\nCandidate patch."}, {"count": 2, "tags": [], "bug_id": 45803, "attachment_id": null, "is_private": false, "id": 120599, "time": "2008-09-14T20:08:11Z", "creator": "psmith@apache.org", "creation_time": "2008-09-14T20:08:11Z", "text": "Fixed in revision 695336, thanks!\n\nCouldn't work out how to trick JUL to allow me to write a unit test for this though, because the static block in j.u.l.LogManager reads the system property early, so defeats my ability to 'activate' that feature in a single unit test.  Ideas on evil-hacking to build a test case appreciated.\n"}, {"count": 3, "tags": [], "bug_id": 45803, "attachment_id": null, "is_private": false, "id": 120725, "time": "2008-09-17T15:43:07Z", "creator": "javabrett@gmail.com", "creation_time": "2008-09-17T15:43:07Z", "text": "I think that evil hacking would involve getting into jUnit's test case class reloading capabilities, forcing a fresh classloader to load the particular test case.\n\nThis is all that can be done, as LogManager references the system property during its static initialization, so if will have to be reloaded in order to test it.\n\nBumping up to jUnit4 might assist, as might playing with jUnit's \"loading\" property in its BaseTestRunner class.\n\nCheers\nBrett"}]
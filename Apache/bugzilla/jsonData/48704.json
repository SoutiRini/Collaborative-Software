[{"count": 0, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134341, "time": "2010-02-08T11:30:36Z", "creator": "aware24seven@gmail.com", "creation_time": "2010-02-08T11:30:36Z", "is_private": false, "text": "This may already be a known issue.\nWhen multiple java process log to the same log file and rotate the same log file the process that gets to rotate the file first gets the change to write to the new and most current log file and all other java processes continue to log to the renamed, rotated file.\n\nScenario relevance : this probably should happen in any clustered environtment where cluster members log to the same log file.\n\nThe issue seems to be happenning because the file writers in the other java processes are still pointing to the old file that was renamed by the other java process in a cluster.\n\nSo if there is an additional rollOver method, in the current RollOver classes, that is cluster aware that checks the file writers in the appenders and refreshes them before writing to a log file and also after rolling them over it would be a great help to clustered environtments.\n\nOtherwise developers may have to extend the appenders and add this functionality and may have to update code everytime when Apache does a new log4j release.\n\nI have attached one such sample zip file with changed src code for reference.\n\nOr if there is some other solution to this problem can someone pls update the online documentation. Thanks !"}, {"count": 1, "tags": [], "text": "You are correct that it is a known issue.  I don't have the time at the moment to check which bug I should mark this as a duplicate.\n\nThe unavoidable issue (at least for anything derived from WriterAppender) is that java.io provides no mechanism to synchronize file writing between multiple JVM's or even multiple FileOutputStreams within a single JVM's.\n\nMost of the time when people configure multiple appender to write to the same file, everything seems to work.  However, they are depending on implementation details.  Things do go spectacularly wrong with the RFA's as you have noticed.\n\nThere is no way to reliably address this using java.io.  The right thing to do would be to write a RFA replacement using java.nio which has been on my wish list for years now.", "is_private": false, "id": 134381, "creator": "carnold@apache.org", "time": "2010-02-09T21:04:43Z", "bug_id": 48704, "creation_time": "2010-02-09T21:04:43Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "text": "Or you just avoid the contention of trying to share one log file across multiple processes, e.g. by using process id (and host name as needed) in the log file name.  [The process id is readily available in Java 5 and higher.]", "id": 134382, "time": "2010-02-09T21:19:15Z", "bug_id": 48704, "creation_time": "2010-02-09T21:19:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134387, "time": "2010-02-10T00:51:04Z", "creator": "ceki@apache.org", "creation_time": "2010-02-10T00:51:04Z", "is_private": false, "text": "Alternatively, you could use logback, log4j's successor, which supports having multiple JVMs writing to the same file. See prudent mode [1] for details.\n\n[1] http://logback.qos.ch/manual/appenders.html#prudent"}, {"count": 4, "tags": [], "text": "Thank you all for your response !\n\nI tried the tip to use logback and tested this in a windows env and it seems to work fine, thanks, when same file is accessed from multiple jvms and from multiple threads.\n\nGeneral questions though ..since the app is already in prod and we are looking to take the route with minimal change to fix this until the next release is scheduled...\n\n* Is log4j goging to be retired soon ? Is there a place in the website where I can see End Of Life notifications for log 4j api ?\n\n* If we had to override a few public and protected methods from the current rolling file appenders how safe is it from a change management point of view ? Ball park, are there any proposals to update RFA's say within the next 6 months ?\n\nThanks !\n\n(In reply to comment #3)\n> Alternatively, you could use logback, log4j's successor, which supports having\n> multiple JVMs writing to the same file. See prudent mode [1] for details.\n> [1] http://logback.qos.ch/manual/appenders.html#prudent", "is_private": false, "id": 134435, "creator": "aware24seven@gmail.com", "time": "2010-02-11T17:40:45Z", "bug_id": 48704, "creation_time": "2010-02-11T17:40:45Z", "attachment_id": null}, {"count": 5, "text": "\n* SLF4J ships with a migration tool [1] which significatly eases the\npain of migrating to SLF4J from log4j. Once you migrate to SL4J, you\ncan either continue to use log4j or switch to logback. Since logback\nnatively implements the SLF4J API, you don't need change the code in\n*your* application. BTW, that is the whole point of SLF4J.\n\n* Although log4j has been vegetating for several years, I don't see any\nindication that log4j will be officially retired any time soon. \n\n* The logging API of logback is determined by SLF4J which is very\nstable. However, although logback internals are relatively stable, that\nstability is not guaranteed and radical changes may occur. More\nspecifically, there are proposals [2] to change the way FileAppender\nand co. write their output to log files. When this change is adopted,\nit will affect your implementation of RFA. Nevertheless, you should be\nable to adapt to the changes with few lines of code on your\nside. It should be mechanical change...\n\n[1] http://www.slf4j.org/migrator.html\n[2] http://jira.qos.ch/browse/LBCORE-128", "creator": "ceki@apache.org", "attachment_id": null, "id": 134436, "time": "2010-02-11T18:03:54Z", "bug_id": 48704, "creation_time": "2010-02-11T18:03:54Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134460, "time": "2010-02-12T13:28:59Z", "creator": "carnold@apache.org", "creation_time": "2010-02-12T13:28:59Z", "is_private": false, "text": "I have not reviewed the logback implementation, but there is nothing that indicates that implementing the \"prudent\" mode in log4j would not be possible.\n\nApache log4j and QoS.ch's logback have a shared heritage, but have divergent licenses, communities and governance.  Statements from one fork about the other should be considered in that light."}, {"count": 7, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134462, "time": "2010-02-12T14:29:36Z", "creator": "ceki@apache.org", "creation_time": "2010-02-12T14:29:36Z", "is_private": false, "text": "(In reply to comment #6)\n> I have not reviewed the logback implementation, but there is nothing that\n> indicates that implementing the \"prudent\" mode in log4j would not be possible.\n\nPrudent mode could be implemented in log4j. It would just take a few days of work.\n \n> Apache log4j and QoS.ch's logback have a shared heritage, but have divergent\n> licenses, communities and governance.  Statements from one fork about the other\n> should be considered in that light.\n\nArnold, speaking of governance, when do you plan to put your seat as\nchairman of the Apache Logging project for elections? Five years\nwithout elections is not exactly the Apache way, is it? You previously\nstated that since the advent of java.util.logging there was no longer\nany need for log4j. It is my understanding that your vision for the\nfuture of log4j is to see it vegetate and die. Or am I misquoting you\nin some way?"}, {"count": 8, "tags": [], "text": "I've reviewed logback's implementation of \"prudent\" mode.  Essentially, it precedes each stream write with java.nio calls to lock the stream and position the stream to the end of the file, then it performs the write and then releases the lock.  As it depends on java.nio, it is not available on JDK's prior to 1.4.  It is a reasonable hybrid use of java.io and .nio. \n\nI'll take a shot implementing it and try to make it so it doesn't add a JDK 1.4 run-time dependency unless you use it.", "is_private": false, "id": 134469, "creator": "carnold@apache.org", "time": "2010-02-13T14:47:27Z", "bug_id": 48704, "creation_time": "2010-02-13T14:47:27Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "By my reading, the effectiveness of prudent mode is dependent on the JVM\nimplementation and OS.  Can't make a hard guarantee that things will work as desired or consistently on different JVM implementations or OS's.\n\nhttp://java.sun.com/javase/6/webnotes/compatibility.html, item 3, suggests that\nit may be more effective on JDK 1.6 than 1.4 or 1.5.\n\nhttp://books.google.com/books?id=BSz14O3uQwsC&lpg=PA68&ots=ZOO7a9ysfH&dq=java%20FileChannel%20multiple%20JVM&pg=PA68#v=onepage&q=java%20FileChannel%20multiple%20JVM&f=false\n(O'Reilly Java NIO, page 68)\n\n\"The semantics of concurrent file access by multiple processes is highly\ndependent on the underlying operating system and/or filesystem.  Concurrent\naccess to the same file by FileChannel objects running in different JVMs will,\ngenerally, be consistent with concurrent access between non-Java processes.\"", "is_private": false, "id": 134470, "creator": "carnold@apache.org", "time": "2010-02-13T15:21:25Z", "bug_id": 48704, "creation_time": "2010-02-13T15:21:25Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "I've done a quick implementation of prudent mode.   However, I think your\nsuccess with logback's RFA's could be due to switch from Unix to Windows,\ninstead of switching to prudent mode on logback.\n\nReviewing your log you mentioned that you tested logback's RFA in a Windows\nenvironment, but your initial bug report indicates Solaris and the behavior you\ndescribe is how RFA's misbehave on Unix platforms when multiple RFA's are\nacting.  File renames and deletes are radically different between Windows and\nUnix.  Basically, in Unix directory entries are changed, but any existing\nhandle is still valid for operations.  On Windows, an attempt to rename an open\nfile will fail and the rollover does not occur.\n\nPrudent mode would likely improve observed behavior of multiple JVM's writing to the same file, however I do not believe it would offer any benefit to the observed behavior on rollovers under Unix-like OS's.  I did a quick check of the logback code and was not able to find anything that indicated that looked like cross-app locking around file renames if that were possible.", "is_private": false, "id": 134472, "creator": "carnold@apache.org", "time": "2010-02-13T18:20:07Z", "bug_id": 48704, "creation_time": "2010-02-13T18:20:07Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134473, "time": "2010-02-13T18:25:33Z", "creator": "carnold@apache.org", "creation_time": "2010-02-13T18:25:33Z", "is_private": false, "text": "Committed purient mode option in rev 909868."}, {"count": 12, "text": "Reverted in rev 910151. \n\nThe independent authorship of the patch is disputed, see log4j-dev mailing list on 2010-02-14.  Since a release push for log4j 1.2.16 is underway, it seems prudent to pull the patch for the time being.", "creator": "carnold@apache.org", "attachment_id": null, "id": 134517, "time": "2010-02-15T13:11:49Z", "bug_id": 48704, "creation_time": "2010-02-15T13:11:49Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 48704, "attachment_id": null, "id": 134567, "time": "2010-02-16T15:45:33Z", "creator": "aware24seven@gmail.com", "creation_time": "2010-02-16T15:45:33Z", "is_private": false, "text": "Iam sorry .you are correct I performed my test on windows env the other day with log back ..today I compiled and ran the same code in Solaris 5.10 env with jdk150_11 and got the same results.\n\nI used TimeBasedRolling with prudent mode( as there were some constraints with using size based rolling with prudent mode in logback) and tried to roll same file from two multithreaded java instances pointing to the same log file and the rolling and logging worked well as far as I can tell found no issues with Solaris.\n\nBtw ..thank you for the fix ..I will look forward to it on the next release of log4j.\n\n(In reply to comment #12)\n> Reverted in rev 910151. \n> The independent authorship of the patch is disputed, see log4j-dev mailing list\n> on 2010-02-14.  Since a release push for log4j 1.2.16 is underway, it seems\n> prudent to pull the patch for the time being."}, {"count": 14, "tags": [], "text": "Hi \n\niam seeing that log4j version 16 got  released sometime in April ..so did this patch make it in by any chance ?\n\nThanks !\n\n(In reply to comment #13)\n> Iam sorry .you are correct I performed my test on windows env the other day\n> with log back ..today I compiled and ran the same code in Solaris 5.10 env with\n> jdk150_11 and got the same results.\n> I used TimeBasedRolling with prudent mode( as there were some constraints with\n> using size based rolling with prudent mode in logback) and tried to roll same\n> file from two multithreaded java instances pointing to the same log file and\n> the rolling and logging worked well as far as I can tell found no issues with\n> Solaris.\n> Btw ..thank you for the fix ..I will look forward to it on the next release of\n> log4j.\n> (In reply to comment #12)\n> > Reverted in rev 910151. \n> > The independent authorship of the patch is disputed, see log4j-dev mailing list\n> > on 2010-02-14.  Since a release push for log4j 1.2.16 is underway, it seems\n> > prudent to pull the patch for the time being.", "is_private": false, "id": 136328, "creator": "aware24seven@gmail.com", "time": "2010-04-22T11:18:38Z", "bug_id": 48704, "creation_time": "2010-04-22T11:18:38Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 48704, "attachment_id": null, "is_private": false, "id": 176520, "time": "2014-07-18T20:34:48Z", "creator": "akumar.anil@gmail.com", "creation_time": "2014-07-18T20:34:48Z", "text": "Hi\n\nI have written a Java Class to log some telephonic based error event in Log4j logs.  I am able to write that logs to the file however other java class which not a part of my Java Application project are also pushing there logs in my log fie.  Any idea how do I fix this issue?"}]
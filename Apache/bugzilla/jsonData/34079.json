[{"count": 0, "tags": [], "bug_id": 34079, "attachment_id": null, "text": "I am using jar task to produce a jar file containing classes generated by the \nJAXB reference implementation xjc compiler. This compiler takes a XSD file and \ngenerated equivalent java classes.\n\nThe jar task when producing the jar file does not include the inner classes \nnested 3 levels below from the outer.\n\nThe path name name is 170 characters long. It looks something like below (x \nreplaces actual characters in the path name)\n\nxxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxx/xxxx/xxxxxxxxxxxxxxx\nxxxxxxxxxl$xxxxxxxxxxxxxTypeImpl$xxxxxxxTypeImpl$xxxxxxxxxxxxxxxxxxxxxCATIONSTyp\neImpl", "id": 72680, "time": "2005-03-19T00:20:59Z", "creator": "svrk@mac.com", "creation_time": "2005-03-19T00:20:59Z", "is_private": false}, {"text": "Here is the jar task we use\n\n<jar jarfile=\"${subproject.archive}/${ant.project.name}.jar\">\n  <fileset dir=\"${subproject.classes}\" excludes=\"**/test/**\" /> \n  </jar>", "tags": [], "bug_id": 34079, "attachment_id": null, "count": 1, "id": 72681, "time": "2005-03-19T00:27:39Z", "creator": "svrk@mac.com", "creation_time": "2005-03-19T00:27:39Z", "is_private": false}, {"text": "Please specify the OS, java version and the length of the absolute path / filename.\n\nPlease also verify that the path does not contain test anywhere. If it does as a\ndirectory name it is not an error, but excluded by your file. If it is contained\nsomewhere else please let us know.\n\nDoes the filename contain any non a-zA-Z0-9 characters apart from the $ (and a\nsingle . before the .class) \n\ncould not reproduce on \nlinux\nwindows\ncygwin\n\nant 1.7 alpha\nant 1.6.3 alpha \n\njdk 1.4.2\n\nC:\\java_stuff\\eclipse\\workspace\\ant>build -file test.xml\nBuildfile: test.xml\n\ntest:\n      [jar] Building jar: C:\\java_stuff\\eclipse\\workspace\\ant\\test.jar\n\nBUILD SUCCESSFUL\nTotal time: 1 second\nC:\\java_stuff\\eclipse\\workspace\\ant>jar xvf test.jar\n  created: META-INF/\nextracted: META-INF/MANIFEST.MF\n  created: xxx/\n  created: xxx/xxxxxxx/\n  created: xxx/xxxxxxx/xxxxxxxxxxxxx/\n  created: xxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/\n  created: xxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/xxxxxxxxx/\n  created: xxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxx/\n  created: xxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxx/xxxx/\nextracted: xxx/xxxxxxx/xxxxxxxxxxxxx/xxxxxxxxx/xxxxxxxxx/xxxxxxxxxxxxx/xxxx/xxxx\nxxxxxxxxxxxxxxxxxxxxl$xxxxxxxxxxxxxTypeImpl$xxxxxxxTypeImpl$xxxxxxxxxxxxxxxxxxxx\nxCATIONSTypeImpl.class\n", "tags": [], "creator": "jkf@apache.org", "attachment_id": null, "count": 2, "id": 72694, "time": "2005-03-19T11:46:54Z", "bug_id": 34079, "creation_time": "2005-03-19T11:46:54Z", "is_private": false}, {"text": "OS is Windows 2000. \nJava 1.4.2_05\nLength of path 174 chars\n\nThe file name consists of only alphanumeric. Since this is generated from XSD \nby the jaxb compiler, only valid java classes are generated.\n\nYour concern about 'test' pattern in directory is not valid because there are \nother files in the same directory that are included.\n\nDid you create a sample inner class nested three levels below from the outer?\n\n\n\nWhen I run ant in the verbose mode, I can clearly see that the file is not \nbeing listed by the jar task when it says adding file ...\n\n", "tags": [], "creator": "svrk@mac.com", "attachment_id": null, "count": 3, "id": 72713, "time": "2005-03-20T02:35:03Z", "bug_id": 34079, "creation_time": "2005-03-20T02:35:03Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 34079, "attachment_id": null, "id": 72715, "time": "2005-03-20T10:36:01Z", "creator": "jkf@apache.org", "creation_time": "2005-03-20T10:36:01Z", "is_private": false, "text": "I get this problem once the inner class absolute filename (including drive\nletter) gets over 259 characters. (By creating inner classes till I got to the\nlimit where the inner class was not included in the jar file anymore)\n(On windows XP)\n\nI connot imagine that the relative pathname is 170 characters long and the\nabsolute path name is 174 long. this would mean that the files are stored in\nc:\\\\xxx, which would be an invalid name. (4 characters to make something\nabsolute does not leave place for a directory name on windows.), though maybe\n\\\\a\\ where a is a hostname would be possible, but unlikely. Again, please verify\nthe absolute length of the filename of the class, from the drive letter onward\n\nso if the project is in \nc:\\some\\project\\name\\classes\\\nand the file name inluding the directories for the package name would be 170\ncharacters long, the absolute filename is 199 characters long.\n\nOn windows various limitations exist on size of file, directory,\nfile+directory+drive, some artificial some not. Consensus seems to be among\nwindows applications the sum should not exeed 259 characters (it is for instance\nalso not possible to rename a file using explorer once the path name gets longer).\n\n"}, {"count": 5, "tags": [], "bug_id": 34079, "attachment_id": null, "id": 72725, "time": "2005-03-20T19:53:31Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-03-20T19:53:31Z", "is_private": false, "text": "This is a Java issue that is fixed in Java 1.6.\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4403166"}, {"text": "Martijn's case probably is a CANTFIX or does anybody see a workaround for us?\n\nsvrk, if you run ant -debug, do you see the task talk about the file in question\nat all - at any place.  Is it possible that the absolute file name is longer\nthan 260 characters?", "tags": [], "bug_id": 34079, "attachment_id": null, "count": 6, "id": 53113, "time": "2005-03-21T11:10:32Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-21T11:10:32Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 34079, "is_private": false, "text": "The abosulte path length is 254 chars. I cannot even rename the file using \nexplorer. Looks like an OS issue.\n\nBut the curious thing I can zip the classes using WinZip and create a jar.\nI create a zip from the directory above the package directory. \n\nI tried specifying the basedir for jar task, but still no use.\n<jar jarfile=\"${subproject.archive}/${ant.project.name}.jar\" \nbasedir=\"${subproject.classes}\"/>\n", "id": 47674, "time": "2005-03-21T16:42:58Z", "creator": "svrk@mac.com", "creation_time": "2005-03-21T16:42:58Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 34079, "attachment_id": null, "id": 55073, "time": "2005-03-21T16:44:28Z", "creator": "svrk@mac.com", "creation_time": "2005-03-21T16:44:28Z", "is_private": false, "text": "To answer Stefan Bodewig question, I ran using the debug switch. The file is \nnot even listed as being processed. It just ignores those files.\n"}, {"count": 9, "tags": [], "bug_id": 34079, "attachment_id": null, "text": "POSIX path names are limited to 255 characters, no?\n\nSo you can't ever compile deeply nested inner classes using the Javac compiler \nwe have now, since it must output a class file on disk, no? --DD", "id": 47078, "time": "2005-03-21T17:32:59Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-03-21T17:32:59Z", "is_private": false}, {"text": "Compilation in not a problem. The class file is being written. But the jar task \nis not able to include the file in the jar.", "tags": [], "bug_id": 34079, "attachment_id": null, "count": 10, "id": 47975, "time": "2005-03-21T17:35:41Z", "creator": "svrk@mac.com", "creation_time": "2005-03-21T17:35:41Z", "is_private": false}, {"count": 11, "attachment_id": null, "creator": "stevel@apache.org", "text": "I can see how this happens. I can imagine the runtime creates the file through\nits internal logic...it isnt reading a file of over 255 chars; it is creating a\nfile of this length as it goes. We cant read it on input.\n\nPutting my old win32 dev hat on, the 255 char limit is pretty hard unless you\nopen files with unicode paths \"\\\\?\\full path here\". I dont know what happens\nwhen you try to open a file with that name on java.io.file, but it is the only\nway to do it through the Win32 ::CreateFile() API\n\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/createfile.asp\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/naming_a_file.asp\n\nAs an aside, I bet we cant have files called COM4, CLOCK$, NUL, etc. Actually, I\nthink you can create a dir called COM4, you just can't delete it :)\n\nWe should document this as a cantfix fault. You need to rebuild the OS with\nMAX_PATH redefined, and only MS can do that. \n\nsvrk, \n1. can you build the file into a higher up dir, or is it the mapping of JAXB\nthat is the problem. If it is the latter, set up a mapping file to fix things.\n\n2. Verify that this wont work from the command line either. Then we can be sure\nthat this is a real problem. ", "id": 42320, "time": "2005-03-22T11:41:16Z", "bug_id": 34079, "creation_time": "2005-03-22T11:41:16Z", "tags": [], "is_private": false}, {"text": "Winzip creates the jar correctly. But ANT jar task cannot. I wonder what is the\ndifference.", "tags": [], "creator": "svrk@mac.com", "attachment_id": null, "count": 12, "id": 31288, "time": "2005-03-22T17:20:51Z", "bug_id": 34079, "creation_time": "2005-03-22T17:20:51Z", "is_private": false}, {"count": 13, "tags": [], "creator": "stevel@apache.org", "text": "Winzip is a native windows app, it can use the proper unicode file access APIs,\nas described in the docs I pointed to. Java apps can only use what sun give us,\nand here it is broken.\n\nto repeat: if the Java1.6 bugrep is right, there is no way for *any* java app to\nread or write a file with a name of more than 260 chars, or create a dir of that\nlength, on windows. <jar> is just one example; all ant code will break. \n\nWhat winzip does is moot, because it is native code. ", "id": 31289, "time": "2005-03-22T17:33:18Z", "bug_id": 34079, "creation_time": "2005-03-22T17:33:18Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 34079, "attachment_id": null, "id": 26494, "time": "2005-03-22T18:08:58Z", "creator": "alexeys@inventigo.com", "creation_time": "2005-03-22T18:08:58Z", "is_private": false, "text": "Actually, it is possible to create files with long paths with older JVMs (javac is an example - it can create classfiles with long path), but not all APIs have long path support before Java 1.6 ."}, {"count": 15, "tags": [], "creator": "svrk@mac.com", "attachment_id": null, "text": "Actually I should have quoted a better example than WinZip. I can create a\ncorrect jar using the 'jar' tool that ships with the JVM. I change to the\ndirectory just above the 'com' package directory and issue the command like this\n\njar cvf datam.jar com/ \n\ndoes this 'jar' uses a different Java API from ANT task?\n\n Javac compiles classes files and creates long file path. \nIt is the ANT jar task that is not able to include those class files in the jar\nfile.\n\n", "id": 21518, "time": "2005-03-22T20:16:05Z", "bug_id": 34079, "creation_time": "2005-03-22T20:16:05Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "clamprecht@gmail.com", "attachment_id": null, "is_private": false, "id": 97460, "time": "2006-12-29T15:41:28Z", "bug_id": 41263, "creation_time": "2006-12-29T15:41:28Z", "text": "Access the following short test JSP running on a tomcat behind mod_jk and Apache:\n\n\n<% out.println(\"Your IP is \"+request.getRemoteAddr()+\", your port is\n\"+request.getRemotePort()); %>\n\n\nIt returns either 0 or -1 for the remote port.  It seems to return 0 the first\ntime, and -1 for any subsequent request which is on the same underlying\nkeepalive connection.  \n\nThe desired behaviour would be that it returns the actual remote port that the\nclient connected from (on the client's machine), when available.  In other\nwords, it should behave the same as when you access the JSP through tomcat\ndirectly through an HTTP connector (via port 8080 on a default tomcat install,\nfor instance).\n\nI understand this information will not always be available, for instance, when\nrunning behind a proxy.  But in the case of running behind mod_jk, shouldn't\nthis information be available, since the remote IP number is already available?"}, {"count": 1, "tags": [], "bug_id": 41263, "text": "Unfortunately the remote port is not part of the information passed along via\nthe ajp13 protocol. On the page\n\nhttp://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html\n\nyou can find under the heading \"Request Packet Structure\":\n\nAJP13_FORWARD_REQUEST :=\n    prefix_code      (byte) 0x02 = JK_AJP13_FORWARD_REQUEST\n    method           (byte)\n    protocol         (string)\n    req_uri          (string)\n    remote_addr      (string)\n    remote_host      (string)\n    server_name      (string)\n    server_port      (integer)\n    is_ssl           (boolean)\n    num_headers      (integer)\n    request_headers *(req_header_name req_header_value)\n    attributes      *(attribut_name attribute_value)\n    request_terminator (byte) OxFF\n\nSo I'm marking this as an enhancement request.\nIt's unclear though, if and when we will resolve this.\nThanks for the report.", "id": 97481, "time": "2006-12-30T06:04:32Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2006-12-30T06:04:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41263, "attachment_id": null, "id": 97484, "time": "2006-12-30T06:12:34Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2006-12-30T06:12:34Z", "is_private": false, "text": "Implementation hint: if we want to stay compatible with ajp13 we could use\nanother request attribute (in the ajp13 sense, e.g. SC_A_REMOTE_PORT = 14).\nUnknown attributes are ignored on the tomcat side."}, {"count": 3, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "is_private": false, "id": 97486, "time": "2006-12-30T09:43:15Z", "bug_id": 41263, "creation_time": "2006-12-30T09:43:15Z", "text": "Unfortunately ignoring unknown attributes does not really happen. It's only what\nthe code comments claim to happen.\n\nInstead unknown bytes are simply dropped, but if we introduce a new attribute\nwith a new indicator byte, the indicator gets dropped, but one of the following\nlength or data bytes might coincidently by equal to another indicator byte and\nthen everything breaks.\n\nI tested by adding a new attribute server_addr, and the length of the addr\nstring was 12=oc. The decoder dropped the new indicator byte 0e but then found\nthe length byte 0c and assumed this to be equal to the SECRET indicator byte...\n\nNo easy way of adding new attributes :(\n\nremotePort and LocalAddr have been forgotten (they were added in Servlet Spec\n2.4) (resp. were dropped to not break the AJP13 protocol). We can easily get\nboth from Apache and IIS, but we first have to find a way to transmit them via\nAJP13.\n"}, {"count": 4, "tags": [], "bug_id": 41263, "attachment_id": null, "id": 112457, "time": "2008-01-03T05:54:51Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-01-03T05:54:51Z", "is_private": false, "text": "This needs a protocol extension for AJP13 (or whatever the version number will\nthen be).\nWould be nice to also build in an easier protocol extensibility."}, {"count": 5, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Just a workaround, not a solution:\n\nYou can use JkEnvVar to forward arbitrary data, which is available in the form of so called httpd environment variables. The remote port fortunately is available under the name REMOTE_PORT.\n\nSo in mod_jk you can set\n\nJkEnvVar REMOTE_PORT\n\nand in the java webapp you can retrieve the data with\n\nrequest.getAttribute(\"REMOTE_PORT\")\n\nObviously this is not spec compliant. You might be able to wrap the request in a filter and overwrite remotePort() using the above call.\n\nA final solution needs an enhanced AJP13 protocol.", "id": 125666, "attachment_id": null, "bug_id": 41263, "creation_time": "2009-03-21T04:47:36Z", "time": "2009-03-21T04:47:36Z", "is_private": false}, {"count": 6, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "id": 125667, "attachment_id": null, "bug_id": 41263, "creation_time": "2009-03-21T07:10:17Z", "time": "2009-03-21T07:10:17Z", "text": "I added a fix to Tomcat trunk to automatically respect the forwarded attribute REMOTE_PORT as the value for getRemotePort():\n\nhttp://svn.eu.apache.org/viewvc?view=rev&revision=756926\n\nThe change has been proposed for backport to TC 6.0 and 5.5.\n\nWe might also forward the REMOTE_PORT env var as an attribute automatically without JKEnvVar starting with a future mod_jk version like 1.2.29."}, {"count": 7, "attachment_id": null, "bug_id": 41263, "text": "I added automatic forwarding of port info to mod_jk in r1078805.\nWill be part of mod_jk 1.2.32.\n\nA getRemotePort() working out of the box without workaround needs mod_jk 1.2.32 and Tomcat 5.5.28, 6.0.20 or 7.0.0 - or newer.", "id": 144809, "time": "2011-03-07T15:45:03Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2011-03-07T15:45:03Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "mdiener@mdiener.de", "attachment_id": null, "is_private": false, "id": 192620, "time": "2016-07-25T12:33:57Z", "bug_id": 59897, "creation_time": "2016-07-25T12:33:57Z", "text": "mod_jk occasionally crashes Apache because due to a buffer overflow.\n\n\n\nmod_jk 1.2.41 (happens also for 1.2.37)\nApache 2.4.7\nTomcat 6.0.39\nJava 1.6.0_45 x86\nLinux Ubuntu 14.04 x64 (3.13.0-91-generic)\n\n\n\nHere is the error log from Apache:\n\n**** buffer overflow detected ***: /usr/sbin/apache2 terminated=======\nBacktrace:\n=========/lib/x86_64-linux-gnu/libc.so.6(+0x7329f)[0x7fe9aa7de29f]/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x5c)[0x7fe9aa875bbc]/lib/x86_64-linux-gnu/libc.so.6(+0x109a90)[0x7fe9aa874a90]/lib/x86_64-linux-gnu/libc.so.6(+0x10ab07)[0x7fe9aa875b07]/usr/lib/apache2/modules/mod_jk.so(jk_open_socket+0x8d8)[0x7fe9a7c60cb8]/usr/lib/apache2/modules/mod_jk.so(ajp_connect_to_endpoint+0x65)[0x7fe9a7c7bf75]/usr/lib/apache2/modules/mod_jk.so(+0x36422)[0x7fe9a7c7d422]/usr/lib/apache2/modules/mod_jk.so(+0x1674c)[0x7fe9a7c5d74c]/usr/sbin/apache2(ap_run_handler+0x40)[0x7fe9ab65fbe0]/usr/sbin/apache2(ap_invoke_handler+0x69)[0x7fe9ab660129]/usr/sbin/apache2(ap_process_async_request+0x20a)[0x7fe9ab6756ca]/usr/sbin/apache2(+0x69500)[0x7fe9ab672500]/usr/sbin/apache2(ap_run_process_connection+0x40)[0x7fe9ab669220]/usr/lib/apache2/modules/mod_mpm_event.so(+0x681b)[0x7fe9a783981b]/lib/x86_64-linux-gnu/libpthread.so.0(+0x8184)[0x7fe9aab38184]/lib/x86_64-linux-gnu/libc.so.6(clone+0x6d)[0x7fe9aa86537d]*\n======= Memory map: ========\n7fe688000000-7fe68806a000 rw-p 00000000 00:00 0\n7fe68806a000-7fe68c000000 ---p 00000000 00:00 0\n.......\n7fffa6c27000-7fffa6c48000 rw-p 00000000 00:00 0 [stack]\n7fffa6c86000-7fffa6c88000 r-xp 00000000 00:00 0 [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]\n[Wed Jun 29 05:01:50.052325 2016] [core:notice] [pid 1747:tid\n140641581987712] AH00051: child pid 17018 exit signal Aborted (6), possible\ncoredump in /etc/apache2\n\n\n\nI was able to trace it down to the method nb_connect in jk_connect.c. In version 1.2.41 the issue is line 291:\n\n280>   do {\n281>        rc = connect(sd, (const struct sockaddr *)&addr->sa.sin, addr->salen);\n282>    } while (rc == -1 && errno == EINTR);\n283>\n284>    if ((rc == -1) && (errno == EINPROGRESS || errno == EALREADY)\n285>                   && (timeout > 0)) {\n286>        fd_set wfdset;\n287>        struct timeval tv;\n288>        socklen_t rclen = (socklen_t)sizeof(rc);\n289>\n290>        FD_ZERO(&wfdset);\n*291>        FD_SET(sd, &wfdset);*\n292>        tv.tv_sec = timeout / 1000;\n293>        tv.tv_usec = (timeout % 1000) * 1000;\n294>        rc = select(sd + 1, NULL, &wfdset, NULL, &tv);\n\n\nFrom what I understand a buffer overflow would only happen for FD_SET if\nthe fd_set gets over 1024 descriptors. I made sure that my ulimit for open\nfiles is set and applied large enough, so that's not it.\n\n\n\nI tried to switch FD_SET to poll and it seems to work now also for sd greater than\n1024:\n\nstruct pollfd pfd_read;\npfd_read.fd = sd;\npfd_read.events = POLLOUT;\nrc = poll(&pfd_read, 1, timeout);\n\n\n\nThis would be a possible fix for the problem - at least it works fine in my setup.\nAlso, poll() already seems to be used somewhere else in this particular source file, so no extra import necessary.\n\n\n\nHere more configuration files:\n\n/etc/libapache2-mod-jk/httpd-jk.conf\n\n<IfModule jk_module>\n\n        JkWorkersFile /etc/libapache2-mod-jk/workers.properties\n        JkLogFile /var/log/apache2/mod_jk.log\n        JkLogLevel warn\n        JkShmFile /var/log/apache2/jk-runtime-status\n\n</IfModule>\n\n\n\n\n/etc/libapache2-mod-jk/workers.properties\n\nworkers.tomcat_home=/usr/share/tomcat6\nworkers.java_home=/usr/lib/jvm/java-6-sun\nps=/\n\nworker.list=loadbalancer\n\nworker.loadbalancer.type=lb\nworker.loadbalancer.balance_workers=ajp13_worker,ajp13_worker2\nworker.loadbalancer.sticky_session=0\n\nworker.ajp13_worker.port=xxx\nworker.ajp13_worker.host=localhost\nworker.ajp13_worker.type=ajp13\nworker.ajp13_worker.ping_mode=A\nworker.ajp13_worker.secret=xxx\nworker.ajp13_worker.fail_on_status=503\nworker.ajp13_worker.connection_pool_size=32768\nworker.ajp13_worker.redirect=ajp13_worker2\n\nworker.ajp13_worker2.port=xxx\nworker.ajp13_worker2.host=otherhost\nworker.ajp13_worker2.type=ajp13\nworker.ajp13_worker2.ping_mode=A\nworker.ajp13_worker2.secret=xxx\nworker.ajp13_worker2.fail_on_status=503\nworker.ajp13_worker2.connection_pool_size=32768\nworker.ajp13_worker2.activation=disabled\n\n\n\n/etc/tomcat6/server.xml\n\n    <Connector\n        port=\"xxx\" protocol=\"AJP/1.3\" redirectPort=\"8443\"\n        enableLookups=\"false\" maxThreads=\"65536\" minSpareThreads=\"25\"\nmaxSpareThreads=\"75\"\n        connectionTimeout=\"300000\" packetSize=\"65536\" request.secret=\"xxx\"\n    />\n\n\n\nApache mpm_event:\n\n        StartServers                     2\n        ServerLimit          16\n\n        MinSpareThreads          256\n        MaxSpareThreads          1280\n\n        ThreadLimit                      1024\n        ThreadsPerChild          1024\n\n        MaxRequestWorkers         16384\n        MaxConnectionsPerChild   0\n\n\n\nPlease also see my question about this in the tomcat_users mailing group here (continued in July):\nhttps://mail-archives.apache.org/mod_mbox/tomcat-users/201606.mbox/%3CCABVo0f+stYj9=Cxrb-t+bhJaf_a9hX2wdvHsBYmE-bge_vwxTg@mail.gmail.com%3E"}, {"count": 1, "tags": [], "bug_id": 59897, "text": "One more thing to add, although Apache mpm_event is used, most connections are via SSL, so AFAIK it should behave like mpm_worker.", "id": 192621, "time": "2016-07-25T12:56:19Z", "creator": "mdiener@mdiener.de", "creation_time": "2016-07-25T12:56:19Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "kwilde@bol.com", "attachment_id": 34417, "is_private": false, "id": 194796, "time": "2016-11-03T13:59:59Z", "bug_id": 59897, "creation_time": "2016-11-03T13:59:59Z", "text": "Created attachment 34417\n[PATCH] Use poll(2) in posix nb_connect\n\nThis issue is caused by limitations of the select(2) system call. From the (linux) manpage:\n\n> POSIX allows an implementation to define an upper limit, advertised via the\n> constant FD_SETSIZE, on the range of file descriptors that can be specified\n> in a file descriptor set.  The Linux kernel imposes no fixed limit, but the\n> glibc implementation makes fd_set a fixed-size type, with FD_SETSIZE defined\n> as 1024, and the FD_*() macros operating according to that limit.  To\n> monitor file descriptors greater than 1023, use poll(2) instead.\n\nAs Michiel already noted, poll(2) is already imported in jk_connect.c, so using poll(2) doesn't add any new dependencies.\n\nI've attached a patch that uses poll(2) if it is available at compile time; otherwise it falls back to the current select(2) implementation.\n\nOn the long run, it would probably be preferable to use some kind of event library like libuv or libevent that abstracts over the kernel interface, and automatically uses the optimal one available (e.g. epoll on linux and kqueue on FreeBSD). This would both improve portability and performance, and possibly code simplicity."}, {"count": 3, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "id": 200565, "attachment_id": null, "bug_id": 59897, "creation_time": "2017-09-01T14:47:31Z", "time": "2017-09-01T14:47:31Z", "text": "I think this patch is worth serious consideration and testing.\n\n(I feel like we had this conversation elsewhere, too.)"}]
[{"count": 0, "text": "When creating a thread pool apr_thread_pool_create() calls apr_thread_create() without acquiring the corresponding thread pool mutex.\n\nwhile (init_threads) {\n        rv = apr_thread_create(&t, NULL, thread_pool_func, *me, (*me)->pool);\n        ...   \n}\n\napr_thread_create() proceeds to allocate and initialize its internal objects from the pool before spawning a thread,\n\n    (*new) = (apr_thread_t *)apr_pcalloc(pool, sizeof(apr_thread_t));\n    ...\n    (*new)->td = (pthread_t *)apr_pcalloc(pool, sizeof(pthread_t));\n    ...\n    (*new)->data = data;\n    (*new)->func = func;\n    ...\n    stat = apr_pool_create(&(*new)->pool, pool);\n    ...\n    if ((stat = pthread_create((*new)->td, temp, dummy_worker, (*new))) == 0) {\n    ...\n\nThe new thread starts in dummy_worker(), which passes control to the thread_pool_func(). The latter acquires the thread pool mutex and allocates apr_thread_list_elt object from the same memory pool. If apr_thread_pool_create() needs to start more than one initial thread, the memory pool may end up being used concurrently by two threads, one executing apr_thread_create() and another executing thread_pool_func(). This may result in data corruption as APR memory pools are not thread-safe.\n\nProposed fix - hold thread pool mutex around the call to apr_thread_create() in apr_thread_pool_create().", "bug_id": 47843, "is_private": false, "id": 130420, "time": "2009-09-15T10:42:36Z", "creator": "akorobka@fxcm.com", "creation_time": "2009-09-15T10:42:36Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 47843, "attachment_id": null, "text": "Suggestion, sometimes complex requests are best handled with an actual\npatch which illustrates the fix.  Agreed there is an issue, and I don't\nwant to move this off my plate, but can you offer the appropriate\ncorrection in the form of an attached diff and mark this bug with the\nkeyword \"PatchAvailable\" please?", "id": 130666, "time": "2009-09-24T22:17:47Z", "creator": "wrowe@apache.org", "creation_time": "2009-09-24T22:17:47Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 47843, "text": "Created attachment 24312\nLock thread pool mutex around the call to apr_thread_create", "id": 130683, "time": "2009-09-25T09:42:44Z", "creator": "akorobka@fxcm.com", "creation_time": "2009-09-25T09:42:44Z", "is_private": false, "attachment_id": 24312}, {"count": 3, "text": "Thanks for the patch!\nIt has been committed to apr trunk as well as apr-util branches 1.3.x and higher.", "bug_id": 47843, "attachment_id": null, "id": 140207, "time": "2010-09-27T08:01:59Z", "creator": "trawick@apache.org", "creation_time": "2010-09-27T08:01:59Z", "tags": [], "is_private": false}]
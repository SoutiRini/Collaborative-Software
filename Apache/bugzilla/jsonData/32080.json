[{"count": 0, "tags": [], "bug_id": 32080, "attachment_id": null, "id": 66516, "time": "2004-11-05T12:08:17Z", "creator": "artem@bizlink.ru", "creation_time": "2004-11-05T12:08:17Z", "is_private": false, "text": "It would be great to have an effective\n#public synchronized boolean match(CharSequence pattern, CharSequence input)\nand\n#public synchronized String substitute(CharSequence expression, CharSequence \ninput)\nmethods.\nOtherwise we need to copy the CharSequence into the String,\nwhich is cumbersome both in notation and in performance.\n\nI hope there would be a way for you to achieve it\nwithout breaking compatibility with earlier JDKs (if you care)."}, {"count": 1, "tags": [], "bug_id": 32080, "attachment_id": null, "is_private": false, "id": 66581, "time": "2004-11-07T15:59:02Z", "creator": "dfs@apache.org", "creation_time": "2004-11-07T15:59:02Z", "text": "We have avoided making use of J2SE 1.4 features to maintain backward\ncompatibility.  We intend to use conditional compilation to provide\ndifferent versions for J2ME, J2SE < 1.4 and J2SE >= 1.4.  At that time,\nwe will make use of 1.4isms like CharSequence.\n"}, {"count": 2, "tags": [], "text": "Ability to use char[] is even better.\n\nIt is usually possible to effectively wrap/unwrap char[] arrays into whatever\nCharSequence objects we have. And no J2SE 1.4 dependency required.\n\norg.apache.oro.text.perl.Perl5Util.match seems to have char[] argument already.\nMay I ask for other methods to have fast char[] variants also?\nIn particular, for:\norg.apache.oro.text.perl.Perl5Util.split( Collection, String, String, int )\norg.apache.oro.text.perl.Perl5Util.substitute( StringBuffer, String, String )\nand\norg.apache.oro.text.regex.MatchResult.group( int )\n", "attachment_id": null, "id": 68983, "creator": "artem@bizlink.ru", "time": "2004-12-25T14:58:26Z", "bug_id": 32080, "creation_time": "2004-12-25T14:58:26Z", "is_private": false}, {"count": 3, "tags": [], "text": "Afterthought, it is less important to have a char[] alternative to\n\norg.apache.oro.text.regex.MatchResult.group( int )\n\nsince in most cases we will append the result to something else using\nString.getChars. But\n\norg.apache.oro.text.perl.Perl5Util.split( Collection, String, String, int )\norg.apache.oro.text.perl.Perl5Util.substitute( StringBuffer, String, String )\n\nare still important, becouse their arguments might be quite big and there is no\nway to wrap existing char[] array into String without needless copying.", "attachment_id": null, "id": 68984, "creator": "artem@bizlink.ru", "time": "2004-12-25T15:15:30Z", "bug_id": 32080, "creation_time": "2004-12-25T15:15:30Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 32080, "attachment_id": null, "is_private": false, "id": 68985, "time": "2004-12-25T15:43:08Z", "creator": "artem@bizlink.ru", "creation_time": "2004-12-25T15:43:08Z", "text": "For org.apache.oro.text.perl.Perl5Util.split it is even better to use the\norg.apache.oro.text.regex.PatternMatcherInput as parameter. split already uses\nPatternMatcherInput! And PatternMatcherInput allows to specify a part of char[]\narray - perfect. It seems quite reasonable to include a method which accepts\nPatternMatcherInput directly, instead of creating it every time from String. Am\nI missing something?  : )"}, {"count": 5, "tags": [], "bug_id": 32080, "is_private": false, "text": "The org.apache.oro.text.regex package contains already everything i need to work\nwith char[] arrays. Sorry for the buzz.", "id": 77025, "time": "2005-07-06T08:08:13Z", "creator": "artem@bizlink.ru", "creation_time": "2005-07-06T08:08:13Z", "attachment_id": null}]
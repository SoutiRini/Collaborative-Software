[{"count": 0, "tags": [], "bug_id": 28429, "attachment_id": null, "is_private": false, "id": 55888, "time": "2004-04-16T10:23:19Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-04-16T10:23:19Z", "text": "Hi,\n\nAn SVG file that demonstrates the problem will be attached.\n\nI think that arabic diacritics for vowels (e.g. \\u064E/afii57454 or\n\\u0650/afii57456) :\n\n1) are too close from the baseline, i.e. upper signs are too low whereas lower\nsigns are too high\n\n2) are too much on the left side of the letter they are related to.\n\nIs this related to an automatic generation of the font ? Can this be improved ?\n\nCheers,\n\np.b."}, {"count": 1, "tags": [], "bug_id": 28429, "is_private": false, "text": "Created attachment 11257\nAn SVG document that demonstrated how arabic vowels are treated", "id": 55890, "time": "2004-04-16T10:26:58Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-04-16T10:26:58Z", "attachment_id": 11257}, {"count": 2, "tags": [], "bug_id": 28429, "attachment_id": null, "id": 61789, "time": "2004-08-11T00:26:31Z", "creator": "deweese@apache.org", "creation_time": "2004-08-11T00:26:31Z", "is_private": false, "text": "Unfortunately I don't really know anything about arabic.\n\nBut it looks like the diacritics are just normal glyphs,  I don't have\na clue what tries to position them over the previous characters.\nSome of them seem to be done as ligatures.\n\nEspecially for SVG fonts we just do what the font says, so I would\nsuspect that the flaw is in the font generation if there is one.\nWhich may point at ttf2svg being the problem but I don't really know."}, {"count": 3, "text": "Hi,\n\nWell, regarding horizontal positionning, I wonder if the horizontal advance for\narabic diacritics is considered as running from right to left. The fact that the\ndiacritics are too much on the left would indicate that they run from left to\nright. But I may be totally wrong...\n\nBasically, this problem is a kerning problem (horizontal and vertical). Quality\nfonts would offer somewhat big kerning tables to handle this prettily, but it\nlooks like this isn't the case for arial because ttf2svg seems to handle kerning\ninformation well.\n\nMirroring the horizontal position of diacritics would improve the rendering but\nI'm afraid that the vertical positionning would be more complicated.\n\nAnyway, I stay tuned :-)\n\np.b.", "bug_id": 28429, "is_private": false, "id": 61798, "time": "2004-08-11T08:18:33Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-08-11T08:18:33Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "creator": "deweese@apache.org", "is_private": false, "text": "My understanding is that glyphs are _always_ layed out left->right.\nSo there is a complex processes to rearrange the chacters from\nlogical to display order.\n\nI still strongly suspect that there is something wacky in the \ngeneration of the font.  Did you subset the font output from\nttf2svg?  It is possible that all of the diacritics are supposed\nto be done by ligatures but when subsetting ttf2svg doesn't output\nthese and you are left with sub optimal 'generic' diacritic handling.", "id": 62630, "time": "2004-08-28T11:47:00Z", "bug_id": 28429, "creation_time": "2004-08-28T11:47:00Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 28429, "is_private": false, "text": "Well, it's still difficult to me to figure out what's happening.\n\nSquiggle has no rulers, stroke information and there's no mean to get an\nintermediate SVG representation after a text ruled by a SVG font has been processed.\n\nHowever, consider the last 2 characters, i.e. the ones at the bottom left of the\nvocalized text. These are :\n\n<glyph unicode=\"&#x633;\" glyph-name=\"afii62786\" horiz-adv-x=\"1682\"\narabic-form=\"terminal\" d=\"M1752 293H1673Q1613 293 1568 309T1475 362Q1433 324\n1400 311Q1353 293 1263 293H1140Q1140 201 1096 114Q1039 1 922 -65Q775 -148 554\n-148Q354 -148 248 -78Q132\n-1 132 158Q132 244 153 332T210 509Q232 563 286 675L326 657Q256 513 234 430T211\n278Q211 154 299 90T552 25Q744 25 895 92Q1083 175 1083 324Q1083 424 1046 514Q1017\n585 964 650L1047 855Q1097 773 1115 710Q1140 621 1140 467H1263Q1358 467 1398 496Q1433\n521 1433 573Q1433 602 1430 631T1419 696L1459 756L1475 659Q1497 561 1534 518Q1575\n470 1650 470Q1673 470 1685 484T1698 521Q1698 571 1667 628Q1644 670 1606 712L1673\n821Q1720 744 1730 716Q1752 653 1752 533V293Z\"/>\n\nand :\n\n<glyph unicode=\"&#x650;\" glyph-name=\"afii57456\" horiz-adv-x=\"412\" d=\"M412\n164Q412 116 360 72Q270 37 70 -43Q70 0 114 40Q197 74 412 164Z\"/>\n\nThis last one is considered by Batik as a \"transparent\" character.\n\nIn AWTGVTGlyphVector, I can see :\n\n// if c is a transparent arabic char then need to shift the\n// following glyphs left so that the current glyph is overwritten\nchar c = ci.setIndex(i + ci.getBeginIndex());\nif (ArabicTextHandler.arabicCharTransparent(c)) {\n  shiftLeft += getGlyphMetrics(i).getHorizontalAdvance();\n}\n\n... which looks correct given the preliminary reordering of transparent\ncharacters (or, rather, Glyphes) by the ArabicTextHandler.\n\nHowever, I need more understanding of this Glyph.java snippet :\n\nif (this.unicode.length() > 0\n    && ArabicTextHandler.arabicCharTransparent(this.unicode.charAt(0))) {\n  // if this glyph is arabic and transparent,\n  // then it doesn't cause any advance\n  this.horizAdvX = 0;\n  this.vertAdvY = 0;\n}\n\nIt look like the Glyph intrinsic advance is properly cancelled. This could\nexplain the leftish position.\n\nStill investigating...\n\nCheers,\n\np.b.\n\n\n\n\n\n\n\n\n\n\n\n ", "id": 62653, "time": "2004-08-28T18:17:57Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-08-28T18:17:57Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 28429, "attachment_id": null, "id": 62779, "time": "2004-08-30T12:13:52Z", "creator": "deweese@apache.org", "creation_time": "2004-08-30T12:13:52Z", "is_private": false, "text": "What is a transparent char?\nIs it the diacritic or the character that gets the diacritic?\nThe code looks like it is the character that gets the diacritic but\nthat doesn't make lots of sense to me (but I'm looking at it from\nthe perspective of European Accent marks which is likely totally\noff base for Arabic).\n"}, {"count": 7, "text": "Well, \"transparent char\" is Batik's definition, not mine, nor Unicode's\n(http://www.unicode.org/charts/PDF/U0600.pdf). See arabicCharTransparent method\nin ArabicTextHandler.\n\nThese characters are diacritics and have a behaviour very similar to european\naccent marks, really !\n\nIt's just a bit more complicated in arabic because a few diacritics can be\nstacked and because letters that are \"diacriticized\" change their shapes (and\nthus their advances) according to their context (initial, medial, final, isolated).\n\nIMHO however, it's the font duty to adjust (read \"kern\") the diacritic position\nwhich if of course *not* the case with the ttf2sgv-generated Windows' default\nArial font.\n\nThe problem (and thus this bug report) is that Batik assigns a left to right\nwrong (very possibly 0) advance to arabic text diacritics. This is particularly\nvisible if you add : \n\n<text x=\"30\" y=\"300\" fill=\"green\" style=\"font-family: SVGArial\">Leftish\ndiacritic whatever the context:</text>\t\n<text x=\"30\" y=\"340\" xml:lang=\"ar-SA\" style=\"font-family:  SVGArial;\nfont-size:33\">&#x633;&#x650;&#x633;&#x650;&#x633;&#x650; &#x633;&#x650;</text>\n\nto the test case.\n\nCheers,\n\np.b.", "bug_id": 28429, "is_private": false, "id": 62787, "time": "2004-08-30T16:38:32Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-08-30T16:38:32Z", "tags": [], "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 28429, "is_private": false, "text": "I've taken a close look at the code involved and I now understand why\nwe get the rendering we get.  With the new example it is clearer to me\nwhat you think is broken, and I even can see a couple of ways of tweaking\nwhat we produce, however I have a few concerns here.\n\n1) Can you provide a reference that says what we are actually supposed \n   to do here?  I would _really_ rather avoid just hacking in stuff without\n   understanding what we are expected to do with these chars. (I've looked\n   at the font generator and unless the arabic kerning info is in a different\n   table from normal kerning there is as far as I can tell no kern info).\n\n2) Any idea how ligatures are supposed to be handled.  I suppose this is\n   part of #1.  If the accented char ligatures with another char there is\n   no way to tell what part of the ligature should get the accent mark.\n\n   I've done a number of google searches for info on arabic text/glyph\nhandling and aside from a interesting paper pointing out how current font\ntech can't really handle arabic, I've turned up nothing indicating how \ncurrent font tech is supposed to handle arabic to the extent it is capable.", "id": 62839, "time": "2004-08-31T12:06:24Z", "creator": "deweese@apache.org", "creation_time": "2004-08-31T12:06:24Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 28429, "attachment_id": null, "is_private": false, "id": 62858, "time": "2004-08-31T17:00:04Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-08-31T17:00:04Z", "text": "Hi,\n\nFirst a few examples :\n\nhttp://www.dallal.com/Tajweed_Vowels.htm (the basics on an isolated-form letter)\nhttp://www.ummah.com/islam/taqwapalace/linguistics/arabic17.html\n\nhttp://www.omniglot.com/writing/arabic.htm (see the \"Arabic vowels\" paragraph\nwhere vowels are also very leftish when they are on isolated-form letters).\n\nhttp://www.microsoft.com/typography/OpenType%20Dev/arabic/intro.mspx. More\ntechnical and provided by the Devil himself :-)\n\nNow, more explanations : \n\nLet's consider a \"transparent character\" which has a small advance and which is\nrelatively narrow :\n\n...XXX\n......\n\nLet's consider a \"normal\" character which has a slightly smaller advance but\nwhich is wide :\n\n.............\n..XXXXXXXXXXX\n\nBoth combined give :\n\n...XXX.......\n..XXXXXXXXXXX\n\nNow, let's advance from right to left as in arabic. We should have :\n\n.......XXX...\nXXXXXXXXXXX..\n\nBut looks like Batik gives :\n\n...XXX.......\nXXXXXXXXXXX..\n\ni.e., the transparent seems to loose its directionality.\n\nNote that there I don't involve any kerning consideration here. Each character\nshall use its own intrinsic advance. This, however, doesn't prevent such a font\nto behave quite correctly in arabic even though kerning info, especially\nvertical one, obviously gives better results.\n\nRegarding ligatures, the provided examples are not concerned with them. The\ngiven font doesn't look to have ligatures. If it were the case, the problem\nremains exactly the same : consider the ligatured glyphes as one glyph and\n(correctly) draw the diacritic sign onto it.\n\nRegarding font tech in arabic, some may like to point out their own little\nproblems. However, generally speaking, arabic font handling by computers is\ncorrect and legible, even on my Windows 98 notepad.\n\np.b."}, {"count": 10, "text": "> Note that there I don't involve any kerning consideration here. Each character\n> shall use its own intrinsic advance. This, however, doesn't prevent such a font\n> to behave quite correctly in arabic even though kerning info, especially\n> vertical one, obviously gives better results.\n\n   There are two problems here.  First as I said earlier _Glyphs_ are always\nlayed out left to right (top to bottom).  This is as true for Arabic as Latin\n(this can be seen by the fact that 0,0 is on the left side of the Arabic glyph,\nand the advance is positive).\n\n   Second without any kerning and using the intrinsic advances, the mark \nwill not appear over any glyph it will appear all by it's self.  So some\nspecial handling is required.\n\n   I am also happy to agree that Batik's current special handling isn't\ngood.  What I am trying to assertain is what the correct thing is.  I also \nunderstand what you think should be done. I would really like to find an \nauthoratative technical source that describes how arabic marks are to be handled \nwith something like TrueType (so I can apply it to SVG fonts).\n\n   The Microsoft document (thanks for the link) comes close to this.  It \nappears that they largely handle positioning marks with special 2D kerning \ntables (in fact they also have special mark on mark kerning tables).  \nI still have two problems however, first SVG fonts don't have such\ntables, and second they don't say what should happen if there isn't a table \nentry for a mark and a glyph (the normal case for SVG :).\n\n   Since SVG does have support for arabic-forms I feel like we must be missing\nsomething as it would appear that the handling of these marks is really\nimportant for proper rendition.\n\n---\n\n   The reason I raised the issue of ligatures, is that while clearly the\ngoal is to correctly draw the mark, once you have a ligature (which is \ncommon in Arabic) I think your solution will always mark the last char in\nthe ligature which is not really good either.  The Microsoft document\nallows marks to be specially positioned for ligatures (although I don't\nknow if you can provide different position info for each marked char in\nthe ligature).\n\n---\n\n   To summarize, I agree that your solution is better than the current\nsolution.  The real question is rather than replace one incomplete solution\nwith another incomplete solution can we really fix the problem?\n\n\n", "bug_id": 28429, "is_private": false, "id": 62859, "time": "2004-08-31T17:59:03Z", "creator": "deweese@apache.org", "creation_time": "2004-08-31T17:59:03Z", "tags": [], "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 28429, "attachment_id": null, "id": 62862, "time": "2004-08-31T19:54:25Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-08-31T19:54:25Z", "is_private": false, "text": "Hi,\n\n>this can be seen by the fact that 0,0 is on the left side of the Arabic glyph,\n>and the advance is positive\n\nThat's were it hurts IMHO. Considering the left side of an arabic glyph seems a\nnonsense to me. I agree however that we have to choose a rendering sense and the\nwell-known left-to-right makes sense. Anyway, my own considerations won't help\nBatik :-)\n\nBTW, what about the definition taken from\nhttp://freetype.sourceforge.net/freetype2/docs/glyphs/glyphs-3.html\n\n-----\nAdvance width or advanceX\n\nThe horizontal distance the pen position must be incremented (for left-to-right\nwriting) or decremented (for right-to-left writing) by after each glyph is\nrendered when processing text. It is always positive for horizontal layouts, and\nnull for vertical ones.\n-----\n\nThe main point is, of course, incrementation vs. decrementation. See below\nhowever for a standard left-to-right suggestion...\n\n>Second without any kerning and using the intrinsic advances, the mark \n>will not appear over any glyph it will appear all by it's self.  So some\n>special handling is required.\n\nFor sure, but is would be a *very* special use-case since a diacritic sign\nusually... diacriticizes another sign. Right anyway.\n\n>I am also happy to agree that Batik's current special handling isn't\n>good\n\nTake it easy :-) Batik's rendering for vocalized arabic is the best I know as\nfar as (Open Type) patents aren't involved : FOP and even the Windows 98 version\nof Mozilla can't handle vocalized arabic properly. This issue is annoying, no\nmore thant that (see the bug report's title).\n\n>It appears that they largely handle positioning marks with special 2D kerning \n>tables\n\nThey know how to promote their own technology :-) Remember that the test font I\nprovided is the standard Arial font from... Microsoft. Since all works well with\nthis font on my Windows apps, either ttf2svg misses the Microsoft \"smart\" table,\neither diacritics can be well rendered without such a complex treatment. I\ndefinitely lean toward the latter since it is obvious to me that Batik draws the\ndiacritic in a classical left-to-right fashion at : \n\nx(0) + diacritic_left_bearing \n\nwhere it should drawn it at :\n\nx(0) + total_width_of_the_underlying_character - diacritic_right_bearing -\nwidth_of_the_diacritic\n\nIf you like, your can consider x(0) + total_width_of_the_underlying_character as\nbeing equal to x(-1), i.e. where the pen was left after the previous\nnon-transparent arabic character was processed, in a left-to-right drawing\napproach of course.\n\nAbout ligatures :\n\n>I think your solution will always mark the last char in\n>the ligature which is not really good either\n\nWell, it should rather mark the first, i.e. the leftmost one IMHO (see below). \n\nThis issue is complicated however since both characters (for a double character\nligature) could carry diacritics. \n\nFrankly, except with very elaborated kerning, I wouldn't consider ligatures as\nbeing compatible with diacritics but the lam-alif one (which is the only\nmandatory one, mentionned above). \n\nSince the use of diacritics is mainly dedicated to teaching, I wouldn't bother\npupils with both diacritics and sometimes odd Unicode arabic presentation forms\nligatures :-) \n\nAs far as I remember, I've never seen a book mixing elaborate ligatures with\ndiacritics. It looks even typographically impossible to me...\n\n>To summarize, I agree that your solution is better than the current\n>solution.  The real question is rather than replace one incomplete solution\n>with another incomplete solution can we really fix the problem?\n\nPretty positive : thanks ! I don't think my solution is incomplete however. It's\na \"less worst\" case from a poor arabic-capable font. IMHO, a very good\nproof-of-concept from Batik/SVG Fonts.\n\nI'll try to find a specific arabic-capable font with elaborate kerning info but\nI'm pretty sure Batik misses the calculation of the diacritic signs' X-origins.\n\nStay tuned and thanks for the response.\n\np.b.\n\n\n"}, {"count": 12, "tags": [], "creator": "deweese@apache.org", "is_private": false, "id": 63065, "attachment_id": null, "bug_id": 28429, "creation_time": "2004-09-03T19:14:07Z", "time": "2004-09-03T19:14:07Z", "text": "This is now fixed per your suggestion in CVS."}, {"count": 13, "tags": [], "bug_id": 28429, "attachment_id": null, "is_private": false, "id": 63147, "time": "2004-09-07T09:06:34Z", "creator": "pierrick.brihaye@free.fr", "creation_time": "2004-09-07T09:06:34Z", "text": "Hi,\n\nThat looks much more readable, thanks !\n\nI still have to find a font with complex kerning info for diacritics and see how\nit behaves. I also have to test the behaviour when joining/non-joining\ncharacters are involved, but the current implementation is definitely a big step\nforward :-)\n\nI will reopen this bug if necessary.\n\nCheers,\n\np.b.\n\n\n\n"}]
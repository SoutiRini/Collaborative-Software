[{"count": 0, "attachment_id": null, "creator": "marcel.may.de@gmail.com", "text": "Implements IRR, including test.", "id": 142347, "time": "2010-12-03T14:24:23Z", "bug_id": 50409, "creation_time": "2010-12-03T14:24:23Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 26372\nPatch against SVN trunk", "attachment_id": 26372, "bug_id": 50409, "id": 142348, "time": "2010-12-03T14:25:43Z", "creator": "marcel.may.de@gmail.com", "creation_time": "2010-12-03T14:25:43Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50409, "attachment_id": null, "text": "\nThere were a few problems with the code as originally submitted:\n\n (1) Irr incorectly ineterpeted columns and rows. Look at your test case, you populate cells A1:E1, but evaluate A1:A5\n \n+    public void testEvaluateInSheet() {\n+        HSSFWorkbook wb = new HSSFWorkbook();\n+        HSSFSheet sheet = wb.createSheet(\"Sheet1\");\n+        HSSFRow row = sheet.createRow(0);\n+\n+        row.createCell(0).setCellValue(-4000d);\n+        row.createCell(1).setCellValue(1200d);\n+        row.createCell(2).setCellValue(1410d);\n+        row.createCell(3).setCellValue(1875d);\n+        row.createCell(4).setCellValue(1050d);\n+\n+        HSSFCell cell = row.createCell(5);\n+        cell.setCellFormula(\"IRR(A1:A5)\");\n+\n+        HSSFFormulaEvaluator fe = new HSSFFormulaEvaluator(wb);\n+        fe.clearAllCachedResultValues();\n+        fe.evaluateFormulaCell(cell);\n+        double res = cell.getNumericCellValue();\n+        assertEquals(0.143d, Math.round(res * 1000d) / 1000d);\n+    }\n \n (2) Avoid implicit casting to TwoDEval or NumberEval.  Input arguments can be numbers, strings, booleans, arrays, named ranges or formula results:\n\n=NPV(10%,A2:A6)\n=NPV(C2,A2:A6)  // where C2=10%\n=NPV(C2,A2:A6)  // where C2=TRUE which evaluates to 1!\n=NPV(named_range1,named_range1)\n=NPV(COUNT(A1,A2),INDIRECT(\"A2:A6\"))\n=NPV(COUNT(A1,A2),{100, 200, 300})\n\nThe best candidate to convert input ValueEvals into an array of doubles is AggregateFunction.ValueCollector, I raised visibility of this class from private to default and changed Irr and Npv to use it.\n\n (3) The implementation of Irr does not properly work for short data series and a negative guess. \n I created a sample .xls file based on the data from Excel online documentation and the calculated bresult for =IRR(A2:A4,-10%)  is wrong. \n See failing TestIrr#testIrrFromSpreadsheet().\n\nRow[14]: IRR(A2:A4,-10%) expected:<-0.443506941334654> but was:<-25833.516857587092>\nRow[15]: IRR(A2:A4,irr_guess) expected:<-0.44350694133474056> but was:<-100630.10400193676>\n\nPlease take a look at the changes. The updated patch includes both Irr nd Npv implementations. \n\nRegards,\nYegor", "id": 142505, "time": "2010-12-09T05:07:16Z", "creator": "yegor@dinom.ru", "creation_time": "2010-12-09T05:07:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50409, "attachment_id": 26383, "text": "Created attachment 26383\nupdated patch", "id": 142506, "time": "2010-12-09T05:08:01Z", "creator": "yegor@dinom.ru", "creation_time": "2010-12-09T05:08:01Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50409, "text": "Created attachment 26384\ntest-data/spreadsheet/IrrNpvTestCaseData.xls", "id": 142507, "time": "2010-12-09T05:08:42Z", "creator": "yegor@dinom.ru", "creation_time": "2010-12-09T05:08:42Z", "is_private": false, "attachment_id": 26384}, {"count": 5, "tags": [], "creator": "yegor@dinom.ru", "text": "The proposed implementation is based on the Secant solver which relies on the initial guesses. You start with  the bracket [estimatedIrr / 2, estimatedIrr] and it seems not to work if estimatedIrr  is negative or the sum of cash flows is negative (that's what I concluded from debugging). \n\nBTW, the Commons-Math's Secant solver seems to handle it OK, at least, I'm getting the same result as Excel. Here is my code (requires commons-math-2.1.jar in the classpath):\n\nimport org.apache.commons.math.analysis.UnivariateRealFunction;\nimport org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory;\nimport org.apache.commons.math.analysis.solvers.UnivariateRealSolver;\nimport org.apache.commons.math.FunctionEvaluationException;\nimport org.apache.poi.ss.formula.functions.FinanceLib;\nimport junit.framework.TestCase;\n\n/**\n * @author Yegor Kozlov\n */\npublic class TestCommonsMathSolvers extends TestCase {\n\n    public static void main(String[] args) throws Exception {\n\n        double[] values = new double[]{-70000d, 12000, 15000};\n        double guess = -0.1; // not used by the Commons-Math's secant solver\n        double irr = irr_secant(values, guess);\n        assertEquals(-0.44, Math.round(irr * 100d) / 100d);\n    }\n\n    public static double irr_secant(final double[] values, final double guess) throws Exception {https://issues.apache.org/bugzilla/show_bug.cgi?id=50409\n        UnivariateRealFunction function = new UnivariateRealFunction(){\n            public double value(double x) throws FunctionEvaluationException {\n                return FinanceLib.npv(x, values);\n            }\n        };\n\n        UnivariateRealSolverFactory factory = UnivariateRealSolverFactory.newInstance();\n        UnivariateRealSolver solver = factory.newSecantSolver();\n        return solver.solve(function, values[0], values[values.length - 1], guess);\n    }\n}\n\nDo you have a clue what solver is used by Excel? My guess it is Secant or Newton or a combination to assure convergence. \n\nYegor", "id": 142531, "time": "2010-12-09T12:28:00Z", "bug_id": 50409, "creation_time": "2010-12-09T12:28:00Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50409, "attachment_id": null, "text": "(In reply to comment #5)\n...\n> \n> Do you have a clue what solver is used by Excel? My guess it is Secant or\n> Newton or a combination to assure convergence. \n> \n> Yegor\n\nNot really, sorry. There's a hint here:\n\"Excel's IRR function uses \"plain vanilla\" Newton-Raphson root finding algorithm\"\nhttp://one-nomads-blog.blogspot.com/2006/07/excels-npv-and-irr-function.html", "id": 142535, "time": "2010-12-09T13:40:26Z", "creator": "marcel.may.de@gmail.com", "creation_time": "2010-12-09T13:40:26Z", "is_private": false}, {"count": 7, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "id": 142570, "time": "2010-12-10T10:00:40Z", "bug_id": 50409, "creation_time": "2010-12-10T10:00:40Z", "is_private": false, "text": "I re-wrote your implementation of IRR to use the Newton-Raphson Method. Now all tests pass and the patch can be checked-in. \nMy implementation was inspired by the Commons-Math's NewtonSolver:\nhttps://svn.apache.org/repos/asf/commons/proper/math/tags/MATH_2_1/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java\n\nApplied in r1044370\n\nYegor"}]
[{"count": 0, "tags": [], "creator": "mike.pechkin@gmail.com", "attachment_id": null, "text": "1. Simple httpd.conf:\n\nLoadModule ssl_module modules/mod_ssl.so\n<skip>\nSSLRandomSeed startup file:/dev/urandom 512\nSSLRandomSeed connect file:/dev/urandom 512\nSSLSessionCache shmcb:log/ssl_scache(512000)\nSSLMutex default \n<skip>\n<VirtualHost 172.25.16.86:8443>\n    ServerAdmin kuku@parks.lv\n    ServerName redhat1-mp.parks.lv\n    DocumentRoot \"/mihailp1/www-secure\"\n\n    SSLEngine on\n    SSLCertificateKeyFile \"/root/redhat1-mp-ca/redhat1-mp.key\"\n    SSLCertificateFile  \"/root/redhat1-mp-ca/redhat1-mp.crt\"\n    SSLCACertificateFile \"/root/redhat1-mp-ca/redhat1-mp-ca.crt\"\n    \n    <Directory /mihailp1/www-secure/s>\n    SSLVerifyDepth 3\n    SSLVerifyClient require\n    SSLOptions +OptRenegotiate\n    </Directory>\n\n    ErrorLog  \"logs/secure-error_log\"\n    CustomLog \"logs/secure-access_log\" common\n</VirtualHost>\n\n2. Simple user's auth, cert imported to browser.\n3. If i access url: https://redhat1-mp.parks.lv:8443/s/test.txt\nbrowser opens pop-window to select which cert to use.\n\nThe problem is browser opens pop-windows for every request, it doesn't use cache. So, i see only SET requests:\n[Mon Apr 20 14:59:36 2009] [debug] ssl_engine_kernel.c(1598): Inter-Process Session Cache: request=SET status=OK id=DA696786BAFAD9ED6DF78942C7B98C3771A4614DF693ED9DF7EB10B619419ABC timeout=299s (session caching)\n\nThe problem appear from openssl.0.9.8f, there is the CHANGELOG:\n  *) In the SSL/TLS server implementation, be strict about session ID\n     context matching (which matters if an application uses a single\n     external cache for different purposes).  Previously,\n     out-of-context reuse was forbidden only if SSL_VERIFY_PEER was\n     set.  This did ensure strict client verification, but meant that,\n     with applications using a single external cache for quite\n     different requirements, clients could circumvent ciphersuite\n     restrictions for a given session ID context by starting a session\n     in a different context.\n     [Bodo Moeller]\n\n4. Check the diff between 0.9.8e and 0.9.8f for ssl_sess.c:ssl_get_prev_session(). If i copy this function from 0.9.8e version apache works as before.\n\n5. It doesn't use SSL_CTX_set_session_id_context() in ssl_engine_init.c:ssl_init_ctx_session_cache(), but it didn't help.\n\n6. I have setuped test environment and can easily test and patch set.", "id": 126382, "time": "2009-04-20T05:10:21Z", "bug_id": 47055, "creation_time": "2009-04-20T05:10:21Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 126383, "time": "2009-04-20T05:19:28Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-04-20T05:19:28Z", "is_private": false, "text": "it fails at SSL_get_peer_certificate() from ssl_engine_kernel.c\n\n[Thu Apr 16 11:12:02 2009] [debug] ssl_engine_kernel.c(426): Changed client verification type will force renegotiation\n[Thu Apr 16 11:12:02 2009] [info] Requesting connection re-negotiation\n[Thu Apr 16 11:12:02 2009] [debug] ssl_engine_kernel.c(616): Performing full renegotiation: complete handshake protocol\n<skip>\n[Thu Apr 16 11:12:02 2009] [info] Awaiting re-negotiation handshake \n\n\nbut if i compile apache with openssl.0.9.8e it works as expected:\n[Thu Apr 16 11:48:40 2009] [debug] ssl_engine_kernel.c(426): Changed client verification type will force quick renegotiation\n[Thu Apr 16 11:48:40 2009] [info] Requesting connection re-negotiation\n[Thu Apr 16 11:48:40 2009] [debug] ssl_engine_kernel.c(549): Performing quick renegotiation: just re-verifying the peer\n[Thu Apr 16 11:48:45 2009] [debug] ssl_engine_kernel.c(1770): OpenSSL: Write: SSL negotiation finished successfully"}, {"count": 2, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 126385, "time": "2009-04-20T05:56:52Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-04-20T05:56:52Z", "is_private": false, "text": "Browser: FF 3.0.8.\n1. FF3.0.x has 'Ask me every time' by default (Tools -> Options -> Advanced -> Encryption), that's pop-up window is the issue here.\n2. IE8 automatic by default - no problem."}, {"count": 3, "tags": [], "creator": "mike.pechkin@gmail.com", "attachment_id": null, "text": "How much costs the fix ?", "id": 127040, "time": "2009-05-15T06:45:36Z", "bug_id": 47055, "creation_time": "2009-05-15T06:45:36Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 127061, "time": "2009-05-17T02:27:50Z", "creator": "jorton@redhat.com", "creation_time": "2009-05-17T02:27:50Z", "is_private": false, "text": "It's not clear to me why this would fail.  mod_ssl calls SSL_set_session_id_context() to set the \"session id context\" for every new SSL * object, so this looks correct.\n\nIt would be useful if you could put some extra debugging in your OpenSSL 0.9.8f build, to help track this down:\n\nfprintf(stderr, \"CACHE MISS %u %u\\n\", \n   ret->sid_ctx_length, s->sid_ctx_length);\n\nbefore the:\n\n                goto err; /* treat like cache miss */\n\nline - I'm presuming that is the branch being taken, otherwise you'd be seeing an error.  If that doesn't help, start sprinkling fprintf's around until you find the branch that is failing.\n\n(If you need a specific patch to apply, let me know.)"}, {"count": 5, "tags": [], "creator": "mike.pechkin@gmail.com", "attachment_id": null, "text": "Thank you, i will reply ASAP.", "id": 127092, "time": "2009-05-17T22:22:14Z", "bug_id": 47055, "creation_time": "2009-05-17T22:22:14Z", "is_private": false}, {"count": 6, "attachment_id": null, "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 127100, "time": "2009-05-18T01:47:31Z", "bug_id": 47055, "creation_time": "2009-05-18T01:47:31Z", "tags": [], "text": "I can repeat it under RHEL5 too.\nI tried write service request (1912050) but declined."}, {"count": 7, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 127101, "time": "2009-05-18T02:11:30Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-18T02:11:30Z", "is_private": false, "text": "I don't see the output from openssl.\ni've put hello word in always execute branch."}, {"count": 8, "tags": [], "creator": "mike.pechkin@gmail.com", "attachment_id": null, "text": "oops, i see the output :)\nfflush() helps.", "id": 127115, "time": "2009-05-18T07:09:08Z", "bug_id": 47055, "creation_time": "2009-05-18T07:09:08Z", "is_private": false}, {"count": 9, "text": "Created attachment 23683\nenable funny debug\n\nthis patch enable debug output. see description", "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 127116, "time": "2009-05-18T08:08:24Z", "bug_id": 47055, "creation_time": "2009-05-18T08:08:24Z", "tags": [], "attachment_id": 23683}, {"count": 10, "tags": [], "bug_id": 47055, "text": "Apply the patch for openssl 0.9.8k (latest)\n\nFirst scenario, get file from virtual host:\nCACHE ret-len: 32, s-len: 32\nCACHE ret-str: 529a40abf407766626d15b85c1627a5f,\n      s-str: 529a40abf407766626d15b85c1627a5f\n3\n4\n5\n7\n\nSecond scenario, get file from LocationMatch:\nConfig related part\n<LocationMatch ^/nike(.*)>\n        SSLVerifyClient require \n        SSLVerifyDepth 3\n        SSLOptions +OptRenegotiate\n</LocationMatch>\n\nCACHE ret-len: 4, s-len: 32\nCACHE ret-str: <4-byte-mess>, s-str: 529a40abf407766626d15b85c1627a5f\n1\n8\n10", "id": 127117, "time": "2009-05-18T08:11:48Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-18T08:11:48Z", "is_private": false, "attachment_id": null}, {"count": 11, "text": "Important, if i copy IF part from openssl 0.9.8e i see:\nNo warning:\n\nCACHE ret-len: 4, s-len: 32\nCACHE ret-str: <17-byte-mess>, s-str: 529a40abf407766626d15b85c1627a5f\n3\n4\n5\n7\n\nit doesn't execute code inside IF that's why it works under 0.9.8e", "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 127118, "time": "2009-05-18T08:18:44Z", "bug_id": 47055, "creation_time": "2009-05-18T08:18:44Z", "tags": [], "attachment_id": null}, {"count": 12, "tags": [], "creator": "mike.pechkin@gmail.com", "attachment_id": null, "text": "As you can see len and context corrupted between step 10 and 11:\n\n[Tue May 19 12:30:29 2009] [debug] ssl_engine_kernel.c(620): Performing full renegotiation: complete handshake protocol\n[Tue May 19 12:30:29 2009] [error] ssl_hook_Access-reneg 10: ssl-len: 32, ssl-str: 529a40abf407766626d15b85c1627a5f \\x92\\x8f\\t\\n\n[Tue May 19 12:30:29 2009] [error] ssl_hook_Access-reneg 11: ssl-len: 4, ssl-str: 0\\t\\x8e\\t40abf407766626d15b85c1627a5f \\x92\\x8f\\t\\n\n\nLet's see the source:\n\nap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,\n  \"ssl_hook_Access-reneg 10: ssl-len: %u, ssl-str: %s\\n\" ,\n  ssl->sid_ctx_length, ssl->sid_ctx);\n\nSSL_set_session_id_context(ssl, \n  (unsigned char *)&id, sizeof(id));\n                \nap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,\n  \"ssl_hook_Access-reneg 11: ssl-len: %u, ssl-str: %s\\n\" ,\n  ssl->sid_ctx_length, ssl->sid_ctx);\n\n\"id\" is not md5 of host - 529a40abf407766626d15b85c1627a5f\nThats why you can see this above:\nCACHE ret-len: 4, s-len: 32\nCACHE ret-str: <4-byte-mess>, s-str: 529a40abf407766626d15b85c1627a5f\n1\n8\n10", "id": 127145, "time": "2009-05-19T02:34:34Z", "bug_id": 47055, "creation_time": "2009-05-19T02:34:34Z", "is_private": false}, {"count": 13, "attachment_id": null, "bug_id": 47055, "text": "fix for wrong sid_ctx doesn't help.\nthe core of the issue is here:\n\nif ((dc->nOptions & SSL_OPT_OPTRENEGOTIATE) &&\n    (verify_old == SSL_VERIFY_NONE) &&\n    ((peercert = SSL_get_peer_certificate(ssl)) != NULL))\n   {\n        renegotiate_quick = TRUE;\n        X509_free(peercert);\n   }\n\nSSL_get_peer_certificate() returns NULL and renegotiate_quick doesn't set TRUE\nand apache doesn't do *quick* renegotiation and client auth.\n\n\nkeep having fun...", "id": 127149, "time": "2009-05-19T05:11:00Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-19T05:11:00Z", "tags": [], "is_private": false}, {"count": 14, "text": "config contained wrong \"SSLOptions -OptRenegotiate\" that's why i was failed.\nnow i have a workaround for the bug.\n\nproblem is here. there is should be md5 string:\nSSL_set_session_id_context(ssl, (unsigned char *)&id, sizeof(id));\n\nlike here:\nif (!SSL_set_session_id_context(ssl, (unsigned char *)vhost_md5,\n                                    APR_MD5_DIGESTSIZE*2))\n    {\n        ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, c,\n                      \"Unable to set session id context to `%s'\", vhost_md5);\n        ssl_log_ssl_error(APLOG_MARK, APLOG_ERR, c->base_server);\n\n        c->aborted = 1;\n\n        return DECLINED; /* XXX */\n    }\n\nwith workaround compare is always true and quick renegotiation always works.\nif (ret->sid_ctx_length != s->sid_ctx_length\n    || memcmp(ret->sid_ctx,s->sid_ctx,ret->sid_ctx_length))\n\t{\n\tgoto err; /* treat like cache miss */\n\t}", "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 127150, "time": "2009-05-19T05:38:47Z", "bug_id": 47055, "creation_time": "2009-05-19T05:38:47Z", "tags": [], "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 47055, "attachment_id": 23689, "id": 127156, "time": "2009-05-19T06:19:47Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-19T06:19:47Z", "is_private": false, "text": "Created attachment 23689\npatch"}, {"count": 16, "tags": [], "bug_id": 47055, "attachment_id": 23697, "id": 127202, "time": "2009-05-20T00:22:25Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-20T00:22:25Z", "is_private": false, "text": "Created attachment 23697\npatch"}, {"count": 17, "attachment_id": null, "bug_id": 47055, "is_private": false, "id": 127203, "time": "2009-05-20T02:49:26Z", "creator": "jorton@redhat.com", "creation_time": "2009-05-20T02:49:26Z", "tags": [], "text": "Hmmmm, very interesting, nice investigative work Mike, thanks a lot for looking into this in such detail.\n\nI expect the intent of the code in ssl_engine_kernel.c that your patch changes is deliberate - to create a unique \"context id\" for the directory, such that it cannot be resumed in a different context.  (similar to the intent of using the vhost id to constrain the session to a specific vhost)\n\nI'm just trying to understand the debug output you've posted - \n\nfor the two tests you ran, are you restarting the browser or otherwise ensuring a fresh session is used by the client each time?\n\nin this case:\n\nCACHE ret-len: 4, s-len: 32\nCACHE ret-str: <4-byte-mess>, s-str: 529a40abf407766626d15b85c1627a5f\n1\n8\n10\n\nif I am reading this right, what is happening is:\n\n1) the \"session id context\" for the SSL * object has been set to the md5(vhost-id) string at the time of this code being invoked\n\n2) the client has asked to resume a session with some id\n\n3) that id is looked up in the session cache, and the session is found\n\n4) this cached session has an \"id context\" of the md5(request_rec *) for the location pointer; i.e. it is a session previously used for the per-dir renegotation\n\n5) hence, the code falls through the cache-miss path because of the mismatch between expected \"sid context\" and the cached session's \"sid context\"\n\nDo you agree with that analysis? \n\nI think that is expected if this is initial handshake for a new connection to that vhost.  i.e. we are the point before the GET request is processed and the second handshake is required for the configured per-dir access control stuff.\n\nI haven't got my head round the security impact of the sid context mismatches, so I'm not at all sure whether or not your patch is going to open up a security issue."}, {"count": 18, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "Sorry md5(request rec *) should simply read \"request_rec *\" i.e. a 4-byte sid context corresponding to the value of the pointer, per the existing code touched by your patch.", "id": 127204, "time": "2009-05-20T02:52:40Z", "bug_id": 47055, "creation_time": "2009-05-20T02:52:40Z", "is_private": false}, {"count": 19, "attachment_id": null, "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 127205, "time": "2009-05-20T03:17:50Z", "bug_id": 47055, "creation_time": "2009-05-20T03:17:50Z", "tags": [], "text": "\nNow, I want mention the history of the problem.\n*Every* person in Estonia must have chip smartcard.\n*Every* bank which works in Estonia market must implement integration between Internet banking and smartcards. Smartcard protected by PIN. Smartcard contain user's SSL cert. (sk.ee, id.ee)\n\nNow supported two browsers: IE and FF. Every user have a smartcard reader.\nUser enter PIN, select the cert from the list for authorization and login to internet banking system. \n\nNow,\n1. In FF2x user browse without popup windows with list of certs.\n2. In FF3x user get popup window after *every* click, its boring and wrong.\n3. IE works without popups.\n\nCurrent workaround in FF3.0.x is select 'Select one automatically' in (Tools -> Options -> Advanced -> Encryption). This is not acceptable in practise.\n\nEvery admin in every bank in estonia have a headache to implement user's auth in <Location> or <Directory> not in the *whole* of the site."}, {"count": 20, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 127209, "time": "2009-05-20T05:48:48Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-20T05:48:48Z", "is_private": false, "text": "My scenario is trivial.\nIt's already known (no words about limitations) - \nhttp://httpd.apache.org/docs/2.2/ssl/ssl_howto.html#arbitraryclients"}, {"count": 21, "attachment_id": null, "bug_id": 47055, "is_private": false, "id": 127210, "time": "2009-05-20T05:54:16Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-20T05:54:16Z", "tags": [], "text": "Joe:\n1. I press F5 in FF3.0.x i see popup window only *once* with my patch, it will popup again after session expiration. \n2. You understand right the analisys.\n3. I'm waiting for noise from somebody who understand the staff."}, {"count": 22, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 127213, "time": "2009-05-20T06:03:15Z", "creator": "jorton@redhat.com", "creation_time": "2009-05-20T06:03:15Z", "is_private": false, "text": "The fact that newer versions of Firefox do not remember client-cert/URL associations is a Firefox problem, which I understand they do plan to fix.\n\nI will look into this in some more detail but please do appreciate that if mod_ssl cannot securely reuse cached sessions in this case, then this is expected behaviour and the correct fix is on the Firefox side."}, {"count": 23, "attachment_id": null, "bug_id": 47055, "text": "(In reply to comment #22)\n> The fact that newer versions of Firefox do not remember client-cert/URL\n> associations is a Firefox problem, which I understand they do plan to fix.\n> \nhow you know ? :/", "id": 127214, "time": "2009-05-20T06:06:49Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-05-20T06:06:49Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "text": "OK, \"acknowledge the need for improvement\" would be better wording than \"plan to fix\".  The bug covering this is here:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=32010", "is_private": false, "id": 127215, "creator": "jorton@redhat.com", "time": "2009-05-20T06:12:32Z", "bug_id": 47055, "creation_time": "2009-05-20T06:12:32Z", "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 47055, "text": "*** Bug 44858 has been marked as a duplicate of this bug. ***", "id": 127551, "time": "2009-06-02T03:06:20Z", "creator": "jorton@redhat.com", "creation_time": "2009-06-02T03:06:20Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 128261, "time": "2009-06-24T23:57:57Z", "creator": "juan-manuel.perez@tecsidel.es", "creation_time": "2009-06-24T23:57:57Z", "is_private": false, "text": "[About Bug 44858 marked as duplicated of this one]\nThis patch solves, indeed, the problem we reported. We have only these\ncomments:\n- It worked properly only after adding the +OptRenegotiate option. Thus, we\n  finally have this configuration (only relevant piece shown):\n        SSLVerifyClient none\n        <Location \"/test\">\n          SSLVerifyClient require\n          SSLVerifyDepth  10\n          SSLOptions +OptRenegotiate\n        </Location>\n- There is only a little 'misbehaviour' we have found. If, after starting\napache, and firefox 3 (with clean cache), we first access 'https://localhost'\n(which doesn't require client cert), and then we access 'https://test/', we are\nprompted for the client certificate twice (this is the 'misbehaviour'). From\nthen onwards, we are not prompted any more (perfect!) Also, if we first access\n'https://test/', we are prompted only once (perfect!).\n\nI have only one more question. When is planned this patch to be included in an\nofficial Apache release?"}, {"count": 27, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 128385, "time": "2009-06-29T06:58:32Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-06-29T06:58:32Z", "is_private": false, "text": "I have had to insert \"SetEnv nokeepalive\" inside <LocationMatch> tag.\nWithout setenv staff i can still popup window in FF even with my patch."}, {"count": 28, "tags": [], "text": "Hi everybody,\n\nDoes anyone know if Mike's patch is going to be applied?\nI've been experiencing the same bug because the context id is the memory address of \"request_rec->id\" which is different for each request. Is there any reason to use this \"hacky\" id, instead of a vhost id hash like in \"ssl_init_ssl_connection()\"?\n\nThanks in advance.", "attachment_id": null, "id": 130238, "creator": "rm4dillo@gmail.com", "time": "2009-09-09T04:38:59Z", "bug_id": 47055, "creation_time": "2009-09-09T04:38:59Z", "is_private": false}, {"count": 29, "attachment_id": null, "bug_id": 47055, "is_private": false, "id": 130239, "time": "2009-09-09T05:23:32Z", "creator": "wrowe@apache.org", "creation_time": "2009-09-09T05:23:32Z", "tags": [], "text": "Just for fun, would you try; \n\n        SSLVerifyClient optional\n        SSLVerifyDepth  10\n\n        <Location \"/test\">\n          SSLVerifyClient require\n          SSLVerifyDepth  10\n          SSLOptions +OptRenegotiate\n        </Location>\n\nThe first line ensures that the client-certificate accepted session will be\nhonored when the user navigates from /test, to say, /data and back again,\nor when they start a new request that hasn't resolved to /test.\n\nI'm a bit confused why the same session would not be reused until the session\nexpires, irrespective of the URL-path.  So I'm concerned that httpd may be \nhandshaking, refusing their certificate, and renegotating for the session with\nthe certificate immediately afterwards.  This would be suboptimal."}, {"count": 30, "tags": [], "bug_id": 47055, "attachment_id": 24236, "id": 130241, "time": "2009-09-09T06:14:34Z", "creator": "rm4dillo@gmail.com", "creation_time": "2009-09-09T06:14:34Z", "is_private": false, "text": "Created attachment 24236\nLight patch"}, {"count": 31, "tags": [], "bug_id": 47055, "text": "Comment on attachment 24236\nLight patch\n\nSSL session id context is already correctly initialized in \"mod_ssl.c:ssl_init_ssl_connection()\". Hence, it is not useful to reset this session id context and we should keep the first one.\n\nThis is the reason why I came up with this patch.\n\nI'll be thankful if you could apply this patch to the 2.2.14 release.\nThanks.\n\nP.S.: Mike, does this patch work for you too?", "id": 130242, "time": "2009-09-09T06:20:53Z", "creator": "rm4dillo@gmail.com", "creation_time": "2009-09-09T06:20:53Z", "is_private": false, "attachment_id": 24236}, {"count": 32, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 130243, "time": "2009-09-09T06:23:18Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-09-09T06:23:18Z", "is_private": false, "text": "rm4dillo: Thank you the new version of patch.\nI need more time to check it, i will try this week."}, {"count": 33, "tags": [], "creator": "rm4dillo@gmail.com", "attachment_id": 24237, "text": "Created attachment 24237\nLight Patch\n\nSorry, my first patch was not in unified format. It should be better now.", "id": 130244, "time": "2009-09-09T06:58:00Z", "bug_id": 47055, "creation_time": "2009-09-09T06:58:00Z", "is_private": false}, {"count": 34, "tags": [], "bug_id": 47055, "text": "rm4dillo: Your patch works for me.", "id": 130274, "time": "2009-09-10T01:08:42Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-09-10T01:08:42Z", "is_private": false, "attachment_id": null}, {"count": 35, "tags": [], "bug_id": 47055, "text": "(In reply to comment #34)\n> rm4dillo: Your patch works for me.\n\nPerfect!!!\nThanks for testing.", "id": 130275, "time": "2009-09-10T01:11:50Z", "creator": "rm4dillo@gmail.com", "creation_time": "2009-09-10T01:11:50Z", "is_private": false, "attachment_id": null}, {"text": "Hi all,\n\nIs there anything I can do so this patch can be part of the next httpd release?\n\nThank you in advance.", "tags": [], "creator": "rm4dillo@gmail.com", "attachment_id": null, "count": 36, "id": 130561, "time": "2009-09-21T08:47:11Z", "bug_id": 47055, "creation_time": "2009-09-21T08:47:11Z", "is_private": false}, {"text": "I had raised a question which was never answered, that's a first good step in\ngetting a patch committed at all.\n\nSecondly, you need to pass the trunk gauntlet, get it committed to the dev\nbranch.  I'm not willing to do this because I'm still unclear why it has\nhandshaked the wrong session if the client produced the right session ID,\nis it because the server at the root level refuses to accept the client\ncertificate at all, resulting in a new session?\n\nFinally, once a patch is on trunk, three devs need to agree to move it to\nthe stable branch, where it would appear in the next httpd 2.2 release.", "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "count": 37, "id": 130665, "time": "2009-09-24T21:54:44Z", "bug_id": 47055, "creation_time": "2009-09-24T21:54:44Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 130672, "time": "2009-09-25T01:29:53Z", "creator": "rm4dillo@gmail.com", "creation_time": "2009-09-25T01:29:53Z", "is_private": false, "text": "Sorry, I did not see your first question.\n\nIn fact, the session id is correct and the problem is in the session id context.\nIn mod_ssl the session id context should be set once in \"mod_ssl.c:ssl_init_ssl_connection\" function and it's value is the md5 hash of the virtual_host id.\n\nThe problem is that at the first connection of the user, when we perform a full renegotiation the function \"ssl_engine_kernel.c:ssl_hook_Access\" sets the session id context to an invalid value which is \"(unsigned char *)&id\" where \"id\" is a \"request_req *\" before storing the session id in the context.\n\nSo at the next connection of the user, mod_ssl never finds the session id in the cache because it uses the session id context set in \"mod_ssl.c:ssl_init_ssl_connection\" which is valid but the session id is not stored there. It's stored using the \"request_req *\" context which we'll never find again.\n\nmod_ssl keeps storing session ids in a different context for each request but it never finds them again. The patch solves this by removing the call to \"SSL_set_session_id_context\" in \"ssl_engine_kernel.c\". That solves the problem and no side effects have been detected.\n\nIf that doesn't answer your question, don't hesitate.\n\nThank you for your response though\n\n\n(In reply to comment #37)\n> I had raised a question which was never answered, that's a first good step in\n> getting a patch committed at all.\n> \n> Secondly, you need to pass the trunk gauntlet, get it committed to the dev\n> branch.  I'm not willing to do this because I'm still unclear why it has\n> handshaked the wrong session if the client produced the right session ID,\n> is it because the server at the root level refuses to accept the client\n> certificate at all, resulting in a new session?\n> \n> Finally, once a patch is on trunk, three devs need to agree to move it to\n> the stable branch, where it would appear in the next httpd 2.2 release."}, {"count": 39, "tags": [], "bug_id": 47055, "text": "Let me restate my earlier comment: I think it must be true that either all the calls to SSL_set_session_id_context in mod_ssl are unnecessary, or, removing any of them is a security issue.  i.e. the proposed patch is either incomplete or insecure.\n\nI would presume it is insecure until proved otherwise.  The session id context stuff is there to prevent a session in one security context (vhost, location context) being resumed in a different one.  Note that the mod_ssl ACL hooks may not occur after a session resumption since a client can initiate a ChangeCipherSpec independently of the what's happening in the app_data layer.", "id": 130727, "time": "2009-09-28T10:53:42Z", "creator": "jorton@redhat.com", "creation_time": "2009-09-28T10:53:42Z", "is_private": false, "attachment_id": null}, {"count": 40, "tags": [], "creator": "rm4dillo@gmail.com", "attachment_id": null, "text": "(In reply to comment #39)\n> Let me restate my earlier comment: I think it must be true that either all the\n> calls to SSL_set_session_id_context in mod_ssl are unnecessary, or, removing\n> any of them is a security issue.  i.e. the proposed patch is either incomplete\n> or insecure.\n> \n> I would presume it is insecure until proved otherwise.  The session id context\n> stuff is there to prevent a session in one security context (vhost, location\n> context) being resumed in a different one.  Note that the mod_ssl ACL hooks may\n> not occur after a session resumption since a client can initiate a\n> ChangeCipherSpec independently of the what's happening in the app_data layer.\n\nHello, sorry for answering so late.\n\nFor the first part, maybe you're right and then we should use Mike's patch.\nI don't have a deep knowledge of mod_ssl but I don't totally agree with you about the ACL hooks issue as for a particular request we keep using the same context as the context id is the request structure address and quick renegotiation has nothing to do with this. In addition to this \"modssl_set_verify\" is called in \"ssl_hook_Access\" so even if a resumption happens the verification will still be done, so what's the security issue if a ChangeCipherSpec happens?", "id": 131070, "time": "2009-10-11T08:24:17Z", "bug_id": 47055, "creation_time": "2009-10-11T08:24:17Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 131824, "time": "2009-11-09T08:00:48Z", "creator": "mike.pechkin@gmail.com", "creation_time": "2009-11-09T08:00:48Z", "is_private": false, "text": "Joe, does config from first comment is vulnerabile to CVE-2009-3555?\nAny comments?\n\np.s. Just started reading related links."}, {"count": 42, "tags": [], "text": "(In reply to comment #41)\n> Joe, does config from first comment is vulnerabile to CVE-2009-3555?\n\nYes it is. Even with the patch applied. You can only \"fix\" it with openssl 0.9.8l, but as soon as you use 0.9.8l this config will stop working at all.", "is_private": false, "id": 131825, "creator": "rpluem@apache.org", "time": "2009-11-09T08:28:23Z", "bug_id": 47055, "creation_time": "2009-11-09T08:28:23Z", "attachment_id": null}, {"count": 43, "text": "Ruediger, \n\n1. does the config still vulnerable if user redirects to \"/mihailp1/www-secure/s\" only after double authentication by soft (password-pin)?\n2. why *this* config vulnerable if i disable renegotiation initiated by client?\n\nThank you.", "creator": "mike.pechkin@gmail.com", "is_private": false, "id": 131826, "time": "2009-11-09T08:56:47Z", "bug_id": 47055, "creation_time": "2009-11-09T08:56:47Z", "tags": [], "attachment_id": null}, {"count": 44, "tags": [], "bug_id": 47055, "text": "(In reply to comment #43)\n> Ruediger, \n> \n> 1. does the config still vulnerable if user redirects to\n> \"/mihailp1/www-secure/s\" only after double authentication by soft\n> (password-pin)?\n\nYes. \n\n> 2. why *this* config vulnerable if i disable renegotiation initiated by client?\n\nServer triggered renegotiations have the same problems as client triggered renegotiations. The only difference is that the MIM needs to know a request a URL from the server that triggers server triggered renegotiation in contrast to the client driven renegotiation where the client can decide this at will.\nThe only way to make your configuration safe is to move\n\n    SSLVerifyDepth 3\n    SSLVerifyClient require\n    SSLOptions +OptRenegotiate\n\non the virtual host level and thus protect the whole virtual host.\n\nFor more details see:\n\nhttp://extendedsubset.com/Renegotiating_TLS.pdf\nhttp://extendedsubset.com/Renegotiating_TLS_pd.pdf", "id": 131830, "time": "2009-11-09T11:45:37Z", "creator": "rpluem@apache.org", "creation_time": "2009-11-09T11:45:37Z", "is_private": false, "attachment_id": null}, {"count": 45, "tags": [], "text": "Ruediger, thank you for reply.", "is_private": false, "id": 131831, "creator": "mike.pechkin@gmail.com", "time": "2009-11-09T12:16:31Z", "bug_id": 47055, "creation_time": "2009-11-09T12:16:31Z", "attachment_id": null}, {"count": 46, "tags": [], "creator": "r.waldner@phion.com", "attachment_id": null, "text": "Hi,\n\nwe just ran into exactly the same problem. More analysis revealed that the impacts from this change (\"be strict about session ID context matching\") are stronger than anybody thought:\n\na) performance: The performance of the server may suffer because every access to a client cert protected directory now forces a full renegotiation without resuming the session\n\nb) user annoyance: Users of browsers who cannot use a checkbox in the sense of \"remember chosen certificate\" are plagued with popups to confirm with the correct client cert\n\nc) change of SSL session ID: applications relying on the SSL session ID now are constantly faced with changing SSL session ids.\n\nCan anybody explain (eg. with an example) why this session ID context matching is now needed?\n\nThanks\n  Roger", "id": 132826, "time": "2009-12-15T02:10:25Z", "bug_id": 47055, "creation_time": "2009-12-15T02:10:25Z", "is_private": false}, {"count": 47, "tags": [], "bug_id": 47055, "attachment_id": null, "id": 132874, "time": "2009-12-16T12:36:07Z", "creator": "jorton@redhat.com", "creation_time": "2009-12-16T12:36:07Z", "is_private": false, "text": "Nothing has changed in mod_ssl on this front.  It may be that the following change in OpenSSL 0.9.8f is shaking problems out of the woodwork here:\n\n  *) In the SSL/TLS server implementation, be strict about session ID\n     context matching (which matters if an application uses a single\n     external cache for different purposes).  Previously,\n     out-of-context reuse was forbidden only if SSL_VERIFY_PEER was\n     set.  This did ensure strict client verification, but meant that,\n     with applications using a single external cache for quite\n     different requirements, clients could circumvent ciphersuite\n     restrictions for a given session ID context by starting a session\n     in a different context.\n     [Bodo Moeller]"}, {"count": 48, "tags": [], "creator": "r.waldner@phion.com", "attachment_id": null, "text": "Well, yes this could be the source of the problem.\n\nOTH, my impression was that \"Apache\" (sorry I can't be more specific but I guess it is mod_ssl) defines what a \"context\" is and therefore uses this OpenSSL functionality.\n\nIn our tests it showed that entering or leaving (with a HTTPS request) a <Location> which requires client certificates, results in a new SSL session, enforced by the server.\n\nBTW: Chasing this behaviour of getting a new SSL session ID revealed that Apache up to and including 2.2.11 did not have this behaviour and Apache versions from 2.2.12 onwards behave as written above.", "id": 132886, "time": "2009-12-16T23:02:09Z", "bug_id": 47055, "creation_time": "2009-12-16T23:02:09Z", "is_private": false}, {"count": 49, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #48)\n\n> \n> BTW: Chasing this behaviour of getting a new SSL session ID revealed that\n> Apache up to and including 2.2.11 did not have this behaviour and Apache\n> versions from 2.2.12 onwards behave as written above.\n\nSounds like it has something to do with SNI support introduced in 2.2.12", "id": 132890, "time": "2009-12-17T00:45:48Z", "bug_id": 47055, "creation_time": "2009-12-17T00:45:48Z", "is_private": false}, {"count": 50, "tags": [], "bug_id": 47055, "text": "I think the problem here is introduced due the OpenSSL changes from 0.9.8e to 0.9.8f. Also, the below link describes the same problem in some more depth.\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=44961\n\nSince there is option for ssl session resumption from 0.9.8f onwards, won't it be better to commit the proposed patch to Apache?", "id": 134489, "time": "2010-02-14T11:56:32Z", "creator": "ce.kohli.nikhil@gmail.com", "creation_time": "2010-02-14T11:56:32Z", "is_private": false, "attachment_id": null}, {"count": 51, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "*** Bug 44961 has been marked as a duplicate of this bug. ***", "id": 147937, "time": "2011-07-15T10:41:19Z", "bug_id": 47055, "creation_time": "2011-07-15T10:41:19Z", "is_private": false}, {"count": 52, "text": "Comment on attachment 24237\nLight Patch\n\n>--- modules/ssl/ssl_engine_kernel.c.orig\n>+++ modules/ssl/ssl_engine_kernel.c\n>@@ -718,17 +718,11 @@\n>             }\n>         }\n>         else {\n>-            request_rec *id = r->main ? r->main : r;\n>-\n>             /* do a full renegotiation */\n>             ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n>                           \"Performing full renegotiation: \"\n>                           \"complete handshake protocol\");\n>\n>-            SSL_set_session_id_context(ssl,\n>-                                       (unsigned char *)&id,\n>-                                       sizeof(id));\n>-\n>             SSL_renegotiate(ssl);\n>             SSL_do_handshake(ssl);", "creator": "kess20.06@hotmail.com", "is_private": false, "id": 193392, "time": "2016-08-29T19:47:08Z", "bug_id": 47055, "creation_time": "2016-08-29T19:47:08Z", "tags": [], "attachment_id": 24237}]
[{"count": 0, "tags": [], "creator": "jsapbz@kanargh.force9.co.uk", "attachment_id": 22663, "is_private": false, "id": 121136, "time": "2008-10-01T12:08:12Z", "bug_id": 45930, "creation_time": "2008-10-01T12:08:12Z", "text": "Created attachment 22663\nTest case\n\nThe attached test case works fine under the normal prefork MPM, but hangs under the worker MPM.\n\nWhat happens is the worker MPM uses apr_setup_signal_thread() to arrange for all signals it can possibly block to be blocked using sigprocmask(). It then uses sigwait() to dispatch individual signals in a more controlled fashion under (I assume) a single nominated thread.\n\nWhen invoking an external CGI binary via fork()/exec(), it fails to reset the signal mask. Pretty much every standalone UNIX program that uses signals assumes it is started with an empty mask and all it need do is call signal()/sigaction().\n\nIn the test case, iostat uses signal()/alarm()/pause() to implement the 2 second data gathering delay. Entering it with SIGALRM blocked means the timeout never expires and the process hangs forever. However this issue is more general and applies to any external binary that expects to be able to use one of the blocked signals for its own purposes.\n\nThe solution is to reset the signal mask after the fork() (so that the parent Apache process is not affected) but before the exec() so that the CGI child inherits a sane state."}, {"count": 1, "tags": [], "text": "Created attachment 22664\nProposed fix against HEAD APR", "is_private": false, "id": 121137, "creation_time": "2008-10-01T12:09:59Z", "time": "2008-10-01T12:09:59Z", "creator": "jsapbz@kanargh.force9.co.uk", "bug_id": 45930, "attachment_id": 22664}]
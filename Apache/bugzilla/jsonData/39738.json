[{"count": 0, "tags": [], "creator": "lindner@inuus.com", "attachment_id": null, "text": "I'm having a hard time tracking down random core dumps on a large\nproduction site at work.  It appears to be a memory corruption problem\nsomewhere.  Checking the core files with gdb I find crc32() and bndm()\ncalled with pointers to invalid memory locations.\n I've followed the steps in the debugging page\n   http://httpd.apache.org/dev/debugging.html\n\nBut I'm unsure what to do with the core dumps I've found. The problem seems to\nmanifest itself in two ways.  In the first case crc32() calls\nin the expires module get passed an invalid pointer. These are requests for\nindex.xml or index.rdf files.  The second case occurs in\nSSI processing in the bndm() call.  Again, we have corrupted pointers into memory.\n Should I delve into the memory debugging here?\n  http://httpd.apache.org/docs/2.0/developer/debugging.html\n\nOr is there an easier way to trace this down?\n\nSome details:\n\n* Worker mpm, 5 servers, 32 threads each\n* MaxRequestsPerChild  0\n* Linux 2.6.latest - Fedora Core 4\n* To prevent runaways we have 'ulimit -v 600000' to give us an upper limit on\n  virtual memory use\n* Nominal memory usage is less..  from /proc/XXXX/status\n  * VmPeak:   402152 kB\n    VmSize:   400068 kB\n    VmHWM:     24968 kB\n    VmRSS:     23016 kB\n    VmData:   364080 kB* Core dumps are not larger than the , around 400MB each.\n* Apache 2.2.2 compiled from source\n  * various modules compiled in   * --enable-nonportable-atomics on\n* Sample backtraces (many more available on request.)\n \nThread 29 (process 7660): #0  0x000000308582f5f7 in kill () from /lib64/libc.so.6\n#1  0x000000000044f6a4 in sig_coredump (sig=7) at mpm_common.c:1170\n#2  <signal handler called> #3  0x0000003085f0265b in crc32 () from\n/usr/lib64/libz.so.1\n#4  0x000000000046d268 in deflate_out_filter (f=0x150cd78, bb=0x150d368) at\nmod_deflate.c:524 #5  0x0000000000450c88 in ap_pass_brigade (next=0x150cd78,\nbb=0x150d368) at util_filter.c:526\n#6  0x0000000000473c32 in expires_filter (f=0x150cf70, b=0x150d368) at\nmod_expires.c:515 #7  0x0000000000450c88 in ap_pass_brigade (next=0x150cf70,\nbb=0x150d368) at util_filter.c:526\n#8  0x000000000043bbd0 in default_handler (r=0x2aaaaca62368) at core.c:3701 #9 \n0x00000000004434d7 in ap_run_handler (r=0x2aaaaca62368) at config.c:157\n#10 0x0000000000443d8c in ap_invoke_handler (r=0x2aaaaca62368) at config.c:371\n\n\nThread 28 (process 8782):\n#0  0x000000308582f5f7 in kill () from /lib64/libc.so.6\n#1  0x000000000044f6a4 in sig_coredump (sig=7) at mpm_common.c:1170\n#2  <signal handler called>\n#3  0x0000003085f0265b in crc32 () from /usr/lib64/libz.so.1\n#4  0x000000000046d268 in deflate_out_filter (f=0xd5c690, bb=0xd5cc80) at\nmod_deflate.c:524\n#5  0x0000000000450c88 in ap_pass_brigade (next=0xd5c690, bb=0xd5cc80) at\nutil_filter.c:526\n#6  0x0000000000473c32 in expires_filter (f=0xd5c888, b=0xd5cc80) at\nmod_expires.c:515\n#7  0x0000000000450c88 in ap_pass_brigade (next=0xd5c888, bb=0xd5cc80) at\nutil_filter.c:526\n#8  0x000000000043bbd0 in default_handler (r=0x13e1fd8) at core.c:3701\n#9  0x00000000004434d7 in ap_run_handler (r=0x13e1fd8) at config.c:157\n...\n#0  0x000000308582f5f7 in kill () from /lib64/libc.so.6\n#1  0x000000000044f6a4 in sig_coredump (sig=7) at mpm_common.c:1170\n#2  <signal handler called> #3  0x0000003085f0265b in crc32 () from\n/usr/lib64/libz.so.1\n#4  0x000000000046d268 in deflate_out_filter (f=0x2aaaabfd7688, bb=0x2aaaabfd7c80)\n    at mod_deflate.c:524 #5  0x0000000000450c88 in ap_pass_brigade\n(next=0x2aaaabfd7688, bb=0x2aaaabfd7c80)\n    at util_filter.c:526 #6  0x0000000000473c32 in expires_filter\n(f=0x2aaaabfd7880, b=0x2aaaabfd7c80) at mod_expires.c:515\n#7  0x0000000000450c88 in ap_pass_brigade (next=0x2aaaabfd7880, bb=0x2aaaabfd7c80)\n    at util_filter.c:526 #8  0x000000000043bbd0 in default_handler\n(r=0x2aaaabff2688) at core.c:3701\n... \nThread 7 (process 7120): #0  0x000000308582f5f7 in kill () from /lib64/libc.so.6\n#1  0x000000000044f6a4 in sig_coredump (sig=7) at mpm_common.c:1170 #2  <signal\nhandler called>\n#3  0x0000000000466ef4 in bndm (t=0x9a4898,\n    h=0x2aaaabc476ca <Address 0x2aaaabc476ca out of bounds>, hl=27993) at\nmod_include.c:2473\n#4  0x0000000000466fe7 in find_start_sequence (ctx=0x9a4798,\n    data=0x2aaaabc476ca <Address 0x2aaaabc476ca out of bounds>, len=27993) at\nmod_include.c:2514\n#5  0x000000000046854d in send_parsed_content (f=0x9a4118, bb=0x9a4758) at\nmod_include.c:3191\n#6  0x0000000000469ce4 in includes_filter (f=0x9a4118, b=0x9a4758) at\nmod_include.c:3601\n#7  0x0000000000450c88 in ap_pass_brigade (next=0x9a4118, bb=0x9a4758) at\nutil_filter.c:526\n#8  0x000000000043bbd0 in default_handler (r=0x95a0b8) at core.c:3701\n#9  0x00000000004434d7 in ap_run_handler (r=0x95a0b8) at config.c:157\n#10 0x0000000000443d8c in ap_invoke_handler (r=0x95a0b8) at config.c:371\n#11 0x00000000004add20 in ap_process_request (r=0x95a0b8) at http_request.c:258\n....\n#0  0x0000000000466ef4 in bndm (t=0x152e730,\n    h=0x2aaaaba6cf13 <Address 0x2aaaaba6cf13 out of bounds>, hl=8338) at\nmod_include.c:2473\n#1  0x0000000000466fe7 in find_start_sequence (ctx=0x152e630,\n    data=0x2aaaaba6cf13 <Address 0x2aaaaba6cf13 out of bounds>, len=8338) at\nmod_include.c:2514\n#2  0x000000000046854d in send_parsed_content (f=0x152dfa8, bb=0x152e5f0) at\nmod_include.c:3191\n#3  0x0000000000469ce4 in includes_filter (f=0x152dfa8, b=0x152e5f0) at\nmod_include.c:3601\n....\n\n\n#0  0x000000308582f5f7 in kill () from /lib64/libc.so.6\n#1  0x000000000044f6a4 in sig_coredump (sig=7) at mpm_common.c:1170\n#2  <signal handler called>\n#3  0x0000003085f0265b in crc32 () from /usr/lib64/libz.so.1\n#4  0x000000000046d268 in deflate_out_filter (f=0xc68108, bb=0xc68700) at\nmod_deflate.c:524\n#5  0x0000000000450c88 in ap_pass_brigade (next=0xc68108, bb=0xc68700) at\nutil_filter.c:526\n#6  0x0000000000473c32 in expires_filter (f=0xc68300, b=0xc68700) at\nmod_expires.c:515\n#7  0x0000000000450c88 in ap_pass_brigade (next=0xc68300, bb=0xc68700) at\nutil_filter.c:526\n#8  0x000000000043bbd0 in default_handler (r=0xa06698) at core.c:3701\n....", "id": 89830, "time": "2006-06-06T19:30:05Z", "bug_id": 39738, "creation_time": "2006-06-06T19:30:05Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "This is on x86_64?  --enable-nonportable-atomics shouldn't make a difference on\nthat platform.  What compiler flags did you use? Does this go away if use\nprefork rather than worker? You are sure that these segfaults are happening\n*only* in those two functions? \n\nSome things to try:\n\n- reconfigure and rebuild passing CFLAGS=\"-g -O0\" to configure; makes debugging\nmore reliable, might rule out compiler issues\n- try prefork\n- try a fresh build with --enable-pool-debug\n\n", "id": 89862, "time": "2006-06-07T09:15:32Z", "bug_id": 39738, "creation_time": "2006-06-07T09:15:32Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 39738, "attachment_id": null, "id": 89872, "time": "2006-06-07T12:47:35Z", "creator": "lindner@inuus.com", "creation_time": "2006-06-07T12:47:35Z", "is_private": false, "text": "Thanks for the response.  We don't use prefork since worker has done so well for\nus over the years, and I'd like to avoid increasing the memory footprint on\nthese servers.\n\nSo far all the cores die in these two functions.  We get about 10-12 hits on\nthis per day.\n\nCFLAGS is set to -g, (verified by checking config.status)  Our original build\nused CFLAGS set by rpmbuild, which was more aggressive.  We can certainly try\n-O0, but it seems to me that this is a memory corruption bug, not a gcc 4.1 error.\n\nWhat do I look for when adding --enable-pool-debug ?  Log messages?\n\n\nHere's the exact build recipe we use for Apache 2.2.2, pretty straightforward:\n\nCFLAGS := -g\n\n.....\n\nhttpd-2.2.2:\n        test -f $@.tar.bz2 || wget -c\nhttp://archive.apache.org/dist/httpd/$@.tar.bz2\n        tar xjf $@.tar.bz2\n        cd $@; env CFLAGS=\"$(CFLAGS)\" ./configure  \\\n        --enable-nonportable-atomics --enable-access \\\n        --enable-actions             --enable-alias \\\n        --enable-asis                --enable-auth \\\n        --disable-autoindex          --disable-cgi \\\n        --disable-cgid               --enable-auth-digest\\\n        --disable-dav                --disable-dav-fs\\\n        --enable-deflate             --enable-dir\\\n        --enable-env                 --enable-headers\\\n        --disable-imap               --enable-include \\\n        --enable-log-config          --enable-logio\\\n        --enable-log-forensic        --enable-mime \\\n        --enable-negotiation         --enable-proxy \\\n        --enable-proxy-http          --enable-rewrite \\\n        --enable-setenvif            --enable-status \\\n        --disable-suexec             --disable-userdir\\                   \n        --disable-vhost-alias        --enable-ssl=static \\\n        --enable-so                  --enable-cache\\\n        --enable-file-cache          --enable-disk-cache\\\n        --enable-mem-cache           --enable-expires\\\n        --enable-exception-hook      --with-mpm=worker \\\n        --prefix=$(INSTDIR)\\\n        --with-berkeley-db \\\n        --with-dbm=db4\\\n        --with-program-name=httpd2\n        cd $@; make\n        cd $@; make install"}, {"count": 3, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "I mention -O0 not only to help eliminate compiler optimisation issues but also\nto make the core dumps easier to debug.\n\nIf you build with --enable-pool-debug you can then run with\n\n export MALLOC_CHECK_=2\n\nto get glibc to use a more paranoid malloc - this is often useful for tracking\ndown memory corruption issues.", "id": 89873, "time": "2006-06-07T13:00:29Z", "bug_id": 39738, "creation_time": "2006-06-07T13:00:29Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 39738, "attachment_id": null, "id": 109242, "time": "2007-10-11T06:22:41Z", "creator": "jorton@redhat.com", "creation_time": "2007-10-11T06:22:41Z", "is_private": false, "text": "I recently worked with a user to track down an issue with identical backtraces -\nthe root cause was PR 36780; (optimistically?) marking as a duplicate.\n\n*** This bug has been marked as a duplicate of 36780 ***"}]
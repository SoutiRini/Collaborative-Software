[{"count": 0, "tags": [], "bug_id": 55612, "attachment_id": 30895, "id": 170356, "creation_time": "2013-09-30T09:34:59Z", "time": "2013-09-30T09:34:59Z", "creator": "luca.dellatoffola@inf.ethz.ch", "text": "Created attachment 30895\nHSSFCellStyle patch\n\nSimilarly to BUG-55611 we found an easy way to improve POI's performance. \nThe idea is to avoid re-executing HSSFCellStyle.getDataFormatString() if the various parameters/object-state are not changing.\nThis can be done by adding a single-static-entry cache and check if the parameters/object-state did change from the previous call, and in case invalidate the static cache. While the code in the patch might not be the most elegant my main purpose is to expose this performance problem I have found with an easy fix as solution.\nFor example, when running Poi 3.9 on a small document (~40 KB) and on a larger document (~13.5 MB), the patch reduces the running time\ngiving a speedup of ~11% in the first case and ~92% in the second case.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 55612, "is_private": false, "text": "Can you please explain the logic in details?\n\nWhy do you not compare lastFormat and format ? You cache lastFormat  but use it only in a \"not null\" clause and not in equals. \n\n\nWhy do you need to cache lastFormatSummary and collection of workbook's format records? \n\nYegor", "id": 170694, "time": "2013-10-19T14:45:05Z", "creator": "yegor@dinom.ru", "creation_time": "2013-10-19T14:45:05Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55612, "attachment_id": null, "id": 170701, "time": "2013-10-19T17:00:57Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-19T17:00:57Z", "is_private": false, "text": "(In reply to Yegor Kozlov from comment #1)\n> Can you please explain the logic in details?\n> \n> Why do you not compare lastFormat and format ? You cache lastFormat  but use\n> it only in a \"not null\" clause and not in equals. \n\nThe main reason to keep all that state is to be on the safe side for the cache invalidation. Since the cache is static I wanted to store the state of the \"this\" object of the previous call. Obviously not all this state is used directly in the computation of getDataFormatString(),\nso there is margin to simplify the patch. \n\nRegarding the check \"_format\" is initially initialised to null so I wanted to keep that case in the invalidation condition.\nIf both are null then we are fine the two object fields are equal, otherwise if the format is not null we need to compare the fields to see if the previous \"this\" object changed. To have a quick-and-dirty check I packed the fields of ExtendedFormatRecord into an array.\n \n> Why do you need to cache lastFormatSummary and collection of workbook's\n> format records? \n\nFor lastFormatSummary because part of it (one field) is used as parameter for the call \"format.getFormat(...)\" in HSSFCellStyle.getDataFormatString(InternalWorkbook), the remaining array elements for the reasons explained above. \n\nFor the collection of workbook's format records I wanted to keep them because they are used in the constructor of HSSFDataFormat created in HSSFCellStyle.getDataFormatString(InternalWorkbook) so I consider them as implicit \"parameters\" of the method getDataFormatString().\n\nI'm preparing a new patch that stores only the collection of workbook's format records and the value returned by the method HSSFCellStyle.getDataFormat() for the invalidation.\nResults of the performance tests are coming soon."}, {"count": 3, "tags": [], "bug_id": 55612, "is_private": false, "id": 170749, "creation_time": "2013-10-22T12:56:24Z", "time": "2013-10-22T12:56:24Z", "creator": "luca.dellatoffola@inf.ethz.ch", "text": "Created attachment 30953\nHSSFCellStyle patch (static lock)", "attachment_id": 30953}, {"count": 4, "tags": [], "bug_id": 55612, "attachment_id": 30954, "id": 170750, "time": "2013-10-22T12:57:29Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-22T12:57:29Z", "is_private": false, "text": "Created attachment 30954\nHSSFCellStyle patch (thread local)"}, {"count": 5, "tags": [], "creator": "luca.dellatoffola@inf.ethz.ch", "attachment_id": null, "id": 170751, "time": "2013-10-22T13:01:09Z", "bug_id": 55612, "creation_time": "2013-10-22T13:01:09Z", "is_private": false, "text": "I attached two new patches. One used a static lock to synchronize the cache, the other a thread-local variables. Both now only uses a sub-set of the fields of the object, so we have simpler invalidation mechanism. \n\nIn the same initial scenario (single-threaded) program both result in a similar performance improvement (thread-local version works slightly better) as the original patch. As in the other bug report I don't a have a testing scenario with multiple threads accessing the cache, in that case intuitively we will expect a performance degradation.\n\n(In reply to Yegor Kozlov from comment #1)\n> Can you please explain the logic in details?\n> \n> Why do you not compare lastFormat and format ? You cache lastFormat  but use\n> it only in a \"not null\" clause and not in equals. \n> \n> \n> Why do you need to cache lastFormatSummary and collection of workbook's\n> format records? \n> \n> Yegor"}, {"count": 6, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "is_private": false, "id": 170846, "time": "2013-10-25T18:50:46Z", "bug_id": 55612, "creation_time": "2013-10-25T18:50:46Z", "text": "patched applied in r1535810\n\nI realized I was wrong when I wrote about thread unsafety of this patch. We really needed synchronization in Bugzilla 55611 because DateUtil.isADateFormat(int, String) is static and the state of its cache must be synchronized. \n\nHSSFCellStyle.getDataFormatString() is an instance method and  we can assume that it is accessed from one thread ta a time. So I removed the synchronization lock and committed. \n\nSorry if my comment caused confusion and extra work on your side. \n\nRegards,\nYegor"}, {"count": 7, "tags": [], "bug_id": 55612, "attachment_id": null, "id": 170861, "time": "2013-10-27T12:09:44Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-27T12:09:44Z", "is_private": false, "text": "No problem at all, I'm happy that I could contribute.\n\nPS: Few days back in Bugzilla 55611 I made another comment/patch after your commit. I don't know if you had a look at it already. \n\n(In reply to Yegor Kozlov from comment #6)\n> patched applied in r1535810\n> \n> I realized I was wrong when I wrote about thread unsafety of this patch. We\n> really needed synchronization in Bugzilla 55611 because\n> DateUtil.isADateFormat(int, String) is static and the state of its cache\n> must be synchronized. \n> \n> HSSFCellStyle.getDataFormatString() is an instance method and  we can assume\n> that it is accessed from one thread ta a time. So I removed the\n> synchronization lock and committed. \n> \n> Sorry if my comment caused confusion and extra work on your side. \n> \n> Regards,\n> Yegor"}, {"count": 8, "tags": [], "bug_id": 55612, "attachment_id": null, "id": 170862, "creation_time": "2013-10-27T13:49:16Z", "time": "2013-10-27T13:49:16Z", "creator": "luca.dellatoffola@inf.ethz.ch", "text": "(In reply to Yegor Kozlov from comment #6)\n> I realized I was wrong when I wrote about thread unsafety of this patch. We\n> really needed synchronization in Bugzilla 55611 because\n> DateUtil.isADateFormat(int, String) is static and the state of its cache\n> must be synchronized. \n> \n\nI think you were actually right in the beginning. Even if HSSFCellStyle.getDataFormatString() is an instance method the cache is static so we need a static lock to synchronize various threads accessing/updating the cache.", "is_private": false}, {"count": 9, "tags": [], "bug_id": 55612, "attachment_id": null, "id": 174934, "time": "2014-04-29T15:58:41Z", "creator": "seebass@gmx.ch", "creation_time": "2014-04-29T15:58:41Z", "is_private": false, "text": "I can confirm that synchronization is a must. I just experienced an application showing random behaviour due to multi threaded usage of HSSFCellStyle.getDataFormatString()\n\nHowever, as the current issue is already closed, I didn't find it at first and filed a new one (BUG-56453)."}]
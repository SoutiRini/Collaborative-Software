[{"count": 0, "tags": [], "text": "request.getLocalAddr() does not return an IP-address, but the host name from the http header. \n\nAccessing http://127.0.0.1:8080/ will make getLocalAddr() return 127.0.0.1\nAccessing http://localhost:8080/ will make getLocalAddr() return localhost\nAccessing http://localhost/ using mod_jk/ajp13 will also make getLocalAddr() return localhost\n\nI see this on java7 using MacOS and FreeBSD.", "attachment_id": null, "bug_id": 56661, "id": 175997, "time": "2014-06-24T00:10:58Z", "creator": "girgen@pingpong.net", "creation_time": "2014-06-24T00:10:58Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 56661, "text": "Not yet verified (by me), but the Servlet API Javadoc pretty clearly says this method should return an IP address (and not a hostname).", "id": 176017, "time": "2014-06-24T16:28:56Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-06-24T16:28:56Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 176215, "time": "2014-07-04T19:38:25Z", "bug_id": 56661, "creation_time": "2014-07-04T19:38:25Z", "text": "Tested with 7.0.x and 8.0.x on OSX and request.getLocalAddr() returns an IP address when accessed via http://localhost:8080/..."}, {"count": 3, "attachment_id": null, "bug_id": 56661, "text": "I do get 0:0:0:0:0:0:0:1 when accessing http://localhost:8080/ now, that might just have been a mistake.\n\nIt seems that the problem is with the AJP Connector?\n\n$ cat foo.jsp \n\t<%= request.getLocalAddr() %>\n$ curl  http://localhost/foo.jsp\n\tlocalhost\n$ curl -k https://localhost/foo.jsp\n\tlocalhost\n\nThis holds true for tomcat 7.0.54 on FreeBSD and Mac OS X.", "id": 176218, "time": "2014-07-05T00:02:45Z", "creator": "girgen@pingpong.net", "creation_time": "2014-07-05T00:02:45Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 56661, "attachment_id": null, "id": 176219, "time": "2014-07-05T00:20:10Z", "creator": "kpreisser@apache.org", "creation_time": "2014-07-05T00:20:10Z", "is_private": false, "text": "Hi,\n\nI can confirm that this problem happens with Tomcat 8.0.9 when using AJP NIO connector (I used the ISAPI Redirector with IIS).\nIn this case, request.getLocalAddr() returns the name of the \"Host\" header instead of an IP address, e.g. \"localhost\".\n\nIf using the HTTP NIO connector, the problem does not occur; request.getLocalAddr() will return an IP address in this case, e.g. \"0:0:0:0:0:0:0:1\"."}, {"count": 5, "tags": [], "bug_id": 56661, "attachment_id": null, "id": 176260, "time": "2014-07-06T22:31:26Z", "creator": "markt@apache.org", "creation_time": "2014-07-06T22:31:26Z", "is_private": false, "text": "All AJP connectors behave this way and have done since getLocalAddr() was added in Servlet 2.4.\n\nThe problem is that the AJP protocol passes the remoteAddr, remoteHost, localName and localPort but *NOT* the localAddr.\n\nlocalAddr should be the IP address the client used to contact the server and this simply is not available - hence why the host name was used.\n\nPossible solutions include modifying the AJP protocol but this is non-trivial.\n\nA simple work-around would be to have the reverse proxy add a custom header with the localAddr information and then have a Valve / Filter read that header value and then present it to the application.\n\nI'm leaning towards resolving this as WONTFIX."}, {"count": 6, "tags": [], "text": "Technically, this shouldn't require a change to the AJP protocol, as arbitrary HTTP headers can be sent just by modifying the configuration.\n\nUnfortunately, the CGI spec does not specify anything like \"localAddr\"... the closest thing available is SERVER_NAME which ... comes from the client's \"Host\" header. I suspect this is what is being used for getLocalAddr, here.\n\nReading a bit about httpd's capabilities, I'm not sure it's actually possible to get the IP address of the server interface that accepted the request from the client. If the address *can* be obtained, sending it via an HTTP header and using something like the RemoteIpValve would probably work.", "attachment_id": null, "id": 176269, "creator": "chris@christopherschultz.net", "time": "2014-07-07T15:18:18Z", "bug_id": 56661, "creation_time": "2014-07-07T15:18:18Z", "is_private": false}, {"count": 7, "tags": [], "text": "I've just taken a look at the httpd docs as well and I don't see any way of obtaining the IP address of the interface that the request was received on. That reduces the choices to:\na) returning null\nb) return the hose name (current behaviour)\nc) use DNS to get the IP address\nd) return an empty string\n\nIf I was starting from a clean slate, I choose option a). However, given the current behaviour that is likely to start triggering NPEs in applications. That makes d) preferrable to a).\n\nThere are many cases where c) will not return the correct value. DNS round-robin load-balancing being one. Therefore, I don't think this apporach should be used.\n\nSo that leaves b) or d) as the possible options in this case. I don't think we should change it for 7.0.x or earlier but we could change it in 8.0x onwards.\n\nI leave it a few days before doing anything to give folks a chance to comment.", "attachment_id": null, "id": 176272, "creator": "markt@apache.org", "time": "2014-07-07T16:17:37Z", "bug_id": 56661, "creation_time": "2014-07-07T16:17:37Z", "is_private": false}, {"count": 8, "tags": [], "text": "Just re=read my previous comment and it isn't very clear.\n\nMy proposal is to leave 7.0.x and earlier unchanged and to change 8.0.x onwards to return the empty string by default for getLocalAddr()", "attachment_id": null, "id": 176273, "creator": "markt@apache.org", "time": "2014-07-07T16:18:52Z", "bug_id": 56661, "creation_time": "2014-07-07T16:18:52Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 56661, "attachment_id": null, "id": 176274, "time": "2014-07-07T16:26:44Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-07T16:26:44Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #7)\n> I've just taken a look at the httpd docs as well and I don't see any way of\n> obtaining the IP address of the interface that the request was received on.\n\nLooking at CustomLog formats [1] it says that \"%A\" is \"Local IP-address\". Thus there should be a way.\n\nThere is also such feature as IP-based virtual hosts. [2]\n\n\n[1] http://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats\n[2] http://httpd.apache.org/docs/2.4/vhosts/ip-based.html"}, {"count": 10, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "There is such directive as\n JkOptions  +ForwardLocalAddress\n\nhttp://tomcat.apache.org/connectors-doc/webserver_howto/apache.html\n\nCommit that implemented it:\nhttp://marc.info/?l=tomcat-dev&m=111545377731908&w=2\n\n>> r->connection->local_ip", "id": 176277, "time": "2014-07-07T16:42:30Z", "bug_id": 56661, "creation_time": "2014-07-07T16:42:30Z", "attachment_id": null}, {"count": 11, "attachment_id": null, "bug_id": 56661, "text": "As examples:\nImplementation of custom \"JK_LB_ACTIVATION\" request attribute: r1078846\nImplementation of custom \"AJP_REMOTE_PORT\" request attribute: r756926 r757223\n\nThose are the only custom header names in native/common/jk_ajp_common.h of mod_jk, so I think those are the only examples.", "id": 176278, "time": "2014-07-07T16:53:59Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-07T16:53:59Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "text": "OK. Looks like the information is available in the httpd internals but not (obviously) via config. Therefore, if mod_jk implements a new request atribute to pass this information, Tomcat can use it for getLocalAddr(). Moving this to mod_jk to get that implemented.", "attachment_id": null, "id": 176281, "creator": "markt@apache.org", "time": "2014-07-07T19:57:04Z", "bug_id": 56661, "creation_time": "2014-07-07T19:57:04Z", "is_private": false}, {"count": 13, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 176342, "time": "2014-07-10T23:33:11Z", "bug_id": 56661, "creation_time": "2014-07-10T23:33:11Z", "is_private": false, "text": "Implemented new request attribute \"AJP_LOCAL_ADDR\" in mod_jk r1609589.\n\nWill be part of version 1.2.41.\n\nAssigning issue back to Tomcat for implementing the use of the new attribute."}, {"count": 14, "tags": [], "bug_id": 56661, "attachment_id": null, "id": 176343, "time": "2014-07-11T00:01:14Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-07-11T00:01:14Z", "is_private": false, "text": "I added support for the new attribute to TC 8 in r1609593.\nNeeds some more testing before porting back to TC7 an probably 6.\n\nA full test needs a dev build of mod_jk r1609589 or later.\n\nAlternatively one can try in Apache:\n\nSetEnvIf Server_Addr \"(.*)\" AJP_LOCAL_ADDR=$1\nJkEnvVar AJP_LOCAL_ADDR\n\nWhich for current releases of mod_jk would send a request attribute named AJP_LOCAL_ADDR with its value set to the value of the Apache internal variable SERVER_ADDR which in turn contains the local IP address of Apache.\n\nStarting with mod_jk 1.2.41 the attribute will be set without explicit configuration."}, {"count": 15, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 176344, "time": "2014-07-11T02:01:02Z", "bug_id": 56661, "creation_time": "2014-07-11T02:01:02Z", "is_private": false, "text": "Test looked good.\nPorted by to TC 7 in r1609606 and proposed for TC 6."}, {"count": 16, "tags": [], "bug_id": 56661, "attachment_id": null, "id": 176383, "time": "2014-07-14T06:09:15Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-07-14T06:09:15Z", "is_private": false, "text": "Forwarding the local IP address as the custom request attribute will also be part of mod_proxy_ajp in the Apache web server 2.4.10. Adding it to the next release of Apache httpd 2.2 has been proposed as well."}, {"count": 17, "attachment_id": null, "bug_id": 56661, "text": "Fixed in 6.0.x for 6.0.42 onwards.", "id": 176747, "time": "2014-07-29T09:42:35Z", "creator": "markt@apache.org", "creation_time": "2014-07-29T09:42:35Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "bug_id": 56661, "text": "I'm a bit confused with the definition of getLocalXXX() APIs.\nShould they return the web server(intermediary in view of WAS)'s information?", "id": 176761, "time": "2014-07-30T08:14:30Z", "creator": "bluewolf.chung@gmail.com", "creation_time": "2014-07-30T08:14:30Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 176763, "time": "2014-07-30T09:08:45Z", "bug_id": 56661, "creation_time": "2014-07-30T09:08:45Z", "is_private": false, "text": "(In reply to Eugene Chung (TmaxSoft) from comment #18)\n> I'm a bit confused with the definition of getLocalXXX() APIs.\n> Should they return the web server(intermediary in view of WAS)'s information?\n\nI haven't checked the Spec but I don't it will clarify the behavior for that situation.\n\nOne of the major ideas behind the AJP protocol is to transport the communication data, that the intermediary saw, to the backend and let the application see that information as if the backend was placed at the position of the intermediary. One goal is to make sure, that any self-referential URL the application creates will actually point to the intermediary and not the the backend.\n\nThat's why we have chosen to return the local IP of the intermediary from the AJP connector."}]
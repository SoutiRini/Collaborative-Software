[{"count": 0, "tags": [], "text": "When running the ZIP task it changes the file attributes from Read Only to \nR/W, this should not happen, the original file attributes should be preserved.", "attachment_id": null, "id": 101170, "creator": "ofirda@gmail.com", "time": "2007-03-29T10:57:34Z", "bug_id": 41985, "creation_time": "2007-03-29T10:57:34Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41985, "text": "Do you mean, when <zip> creates a new file, it creates it with the default\npermissions of the user, rather than those of whatever the file was in place?\n\nif so, I dont think we're going to change it. Your build files should be\ndesigned to work cross platform, regardless of whether the output files should\nexist or not. If you want to set the permissions after a <zip>, use <chmod>", "id": 101314, "time": "2007-04-02T02:12:55Z", "creator": "stevel@apache.org", "creation_time": "2007-04-02T02:12:55Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41985, "attachment_id": null, "id": 101451, "time": "2007-04-05T03:55:44Z", "creator": "ofirda@gmail.com", "creation_time": "2007-04-05T03:55:44Z", "is_private": false, "text": "(In reply to comment #0)\n> When running the ZIP task it changes the file attributes from Read Only to \n> R/W, this should not happen, the original file attributes should be \npreserved.\n\nFirst, to make sure its clear - I am refering to the files WITHIN the zip file \nand not to the attributes of the zip file itself. The files contained in the \nzip are NOT perserving their original attributes (Read Only) and they become \nRead/Write, you can see this after you extract the zip.\n\nSecond, the problem is appearing in Windows OS (I have not tested on UNIX), \nsince in Windows you cannot grant default attributes to a new file created \n(i.e. Read Only), each file created appears with R/W.\n\nI assume that the problem is in ANT <zip> task since if I use other zip \nsoftware (such as winzip command line tool) the files' attributes are \nperserved within the zip file, it can be seen after they are being extracted."}, {"count": 3, "tags": [], "bug_id": 41985, "attachment_id": null, "id": 101475, "time": "2007-04-05T14:08:30Z", "creator": "stevel@apache.org", "creation_time": "2007-04-05T14:08:30Z", "is_private": false, "text": "ahh, now the bugrep makes sense. Changing the title to use the terminology of\nthe team."}, {"count": 4, "tags": [], "text": "I think the title is misleading, I have encountered this when I INITIALLY \narchived a folder containing files, not during an update of an existing zip \nfile.", "attachment_id": null, "id": 101484, "creator": "ofirda@gmail.com", "time": "2007-04-06T06:06:21Z", "bug_id": 41985, "creation_time": "2007-04-06T06:06:21Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 41985, "text": "Ofir. when ant creates a <zip> file from all files in a directory, it will not\npick up any permissions from the files in the filesystem.\n\nThat is, if you have a file in the filesys marked read-only or exec, when it\ngets into the zip it will have R/W permissions. We do not read the filesystem\npermissions. As the manual says, \"Note that file permissions will not be stored\nin the resulting zipfile.\".\n\nYou can explicitly list perms using a <zipfileset>.\nhttp://ant.apache.org/manual/CoreTypes/zipfileset.html\n\nNow, is this the problem? That permissions in the file system are not being\npicked up and passed to entries in the zip file?", "id": 101548, "time": "2007-04-10T02:24:23Z", "creator": "stevel@apache.org", "creation_time": "2007-04-10T02:24:23Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "Maybe it is time to rethink it. R/W attributes are available for some time and\nexecutable permission is in Java 6. Backward compatibility can be affected, so\npermission handling should be optional.", "attachment_id": null, "id": 101558, "creation_time": "2007-04-10T08:02:59Z", "time": "2007-04-10T08:02:59Z", "creator": "alexeys@inventigo.com", "bug_id": 41985, "is_private": false}, {"count": 7, "tags": [], "bug_id": 41985, "attachment_id": null, "id": 101559, "time": "2007-04-10T10:19:12Z", "creator": "ofirda@gmail.com", "creation_time": "2007-04-10T10:19:12Z", "is_private": false, "text": "Steve - your description is right, that is exactly the problem...or WAS the \nproblem, since you now showed me that I missed this part in the specs.\n\nI will retry with the <zipfileset>, although I do believe that the \nfilesystme's attributes should have been preserved when zipping by default, \nmaybe you can consider adding a new parameter to the <zip> task to specify \nthis.\n\nFYI - I have tried to zip with winzip and 7-zip, both of these zipped the \nfiles WITH their original attributes within the filesystem, so why shouldn't \nANT behave the same?"}, {"count": 8, "tags": [], "bug_id": 41985, "text": "Because there's no way to faithfully query the permissions in a pure-Java way?\n\nTake a closer look at the permission-related API additions to java.io.File: I\ndon't see a way to query ALL of the permission data. The APIs that are there can\nonly tell you if the current process can read, write or execute a given file -\nthey don't cover world or groups.\n\nYou can _almost_ make an argument for permission preservation for <unzip>, but\neven there the APIs don't cover standard UNIX permissions.", "id": 101560, "time": "2007-04-10T10:38:32Z", "creator": "carej@us.ibm.com", "creation_time": "2007-04-10T10:38:32Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 41985, "text": "Ok, I've changed the title of the bugrep again,to make it clear its about the RO\nbit.\n\nAs Jeffrey says, we have been constrained by Java, pre-1.6. Permissions get lost\non <zip>, <tar> and <copy>. More subtly, we are constrained by the need to be\ncross platform...you need builds that work on windows as well as unix, so can't\nrely on permission bits. Forcing people to use the <zipfileset> permissions does\nguarantee that the build file will work on windows, as well as unix.\n\nthat said, as alexy notes, the read/read-only flag does appear to be more\nportable. File.setReadOnly() is java1.2+ and file.canWrite() is java1.0 era, so\nwe should be able to propage the writeable flag. For java1.6+, we can even make\na go at execute permissions, though I don't know what happens on Windows in that\nsituation. Or -and this is the one that scares me- cygwin on windows.\n\nBecause of that possibility, I'm leaving this open, instead of WONTFIX/CANTFIX.\nWe may be able to do something about this, now.", "id": 101571, "time": "2007-04-11T02:27:13Z", "creator": "stevel@apache.org", "creation_time": "2007-04-11T02:27:13Z", "is_private": false, "attachment_id": null}]
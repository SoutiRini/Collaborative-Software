[{"count": 0, "tags": [], "creator": "james.sulak@flightaware.com", "attachment_id": null, "is_private": false, "id": 180572, "time": "2015-01-26T15:33:15Z", "bug_id": 57501, "creation_time": "2015-01-26T15:33:15Z", "text": "Version 2.2 on FreeBSD.\n\nAfter calling ::rivet::parse, a call to abort_page does not stop the execution of the page, if the included rvt calls abort_page.  If the included rvt does *not* call abort_page, the call in the outer rvt functions as expected.\n\nI'm unclear as to what the intended behavior is.  Is the intention that the rvt executed by ::rivet::parse is independent, with an independent lifecycle, or is it simply meant as a \"function call\" inside the outer rvt page?\n\n\nTest case:\n\ntest_parse.rvt:\n\n<?\nparse test_parse2.rvt\nabort_page\n\nputs \"Execution continued.\"\n?>\n\ntest_parse2.rvt:\n\n<?\nputs \"Parsed rvt.\"\nabort_page\n?>\n\n\nAs a secondary issue, note that in a rivet + Tcl 8.5 installation, this can be worked around by placing a \"return\" call after the parse statement.  However, with Tcl 8.6, this results in the following error:\n\n\"errorCode 'TCL UNEXPECTED_RESULT_CODE 0', errorInfo 'command returned bad code: 0    while executing \"namespace eval request { puts -nonewline \"\" ...\""}, {"count": 1, "tags": [], "text": "Thank you for reporting this issue. I think you hit something more relevant than a simple bug, the way mod_rivet does script parsing and execution has to be reconsidered and ironed out", "is_private": false, "bug_id": 57501, "id": 180594, "time": "2015-01-27T16:16:33Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-01-27T16:16:33Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": 32403, "is_private": false, "id": 180605, "time": "2015-01-27T23:09:39Z", "bug_id": 57501, "creation_time": "2015-01-27T23:09:39Z", "text": "Created attachment 32403\nTcl error status propagates to the caller when ::rivet::parse is called\n\nTcl return error propagates up to the toplevel script and script execution finalized in Rivet_SendContent"}, {"attachment_id": 32404, "tags": [], "creator": "mxmanghi@apache.org", "text": "Created attachment 32404\nfix for improper handling of error code returned by parse command\n\nNot only the Tcl status didn't unwind the whole calls stack but after_every_script was called inconditionately after *each* parse", "count": 3, "id": 180613, "time": "2015-01-28T08:35:26Z", "bug_id": 57501, "creation_time": "2015-01-28T08:35:26Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57501, "is_private": false, "text": "Thank you for the quick response.  We'll test and see how it works.\n\nI had noticed that after_every_script was called after every parse - which is in fact how I discovered the bug, since our after_every_script calls abort_page.  That seemed wrong, which is why I asked about intended behavior.", "id": 180617, "time": "2015-01-28T13:56:13Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-01-28T13:56:13Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57501, "text": "In case abort_page gets called from within after_every_script it won't trigger the AbortScript. AfterEveryScript was executed after AbortScript before I made this patch anyway. And now it works this way all the more so because it gets executed really as very last script. So it must be changed again. Let me check the documentation but I suspect we have been having a quite haphazard setup for these procedures. If I understand you want to have AbortScript to be run whenever ::rivet::abort_page is called (perhaps only ErrorScript shouldn't run it) which makes sense but it's going to add here and there a few more \n\nif (rsc->after_every_script != NULL)\n\n   Tcl_Exec....\n\n\n\nplease hold on a few more hours then...", "id": 180621, "time": "2015-01-28T14:32:33Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-01-28T14:32:33Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "mxmanghi@apache.org", "text": "Created attachment 32406\n3rd patch for ::rivet::abort_page handling\n\nit turned out to be easier then I thought at first, but I haven't tested it. Please let me know", "id": 180628, "time": "2015-01-28T15:40:56Z", "bug_id": 57501, "creation_time": "2015-01-28T15:40:56Z", "is_private": false, "attachment_id": 32406}, {"count": 7, "tags": [], "creator": "mxmanghi@apache.org", "is_private": false, "text": "the patch aimed at fixing bug #57501 was applied (a bit further elaborated to move the charset handling into TclWeb_PrintHeaders) and committed to branches/2.2\n\nI'm going to allow a few more dayes after which if no further problems will surface I will close the bug \n\n -- Massimo", "id": 180777, "time": "2015-02-05T09:12:09Z", "bug_id": 57501, "creation_time": "2015-02-05T09:12:09Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "I apologize, we haven't had a chance to test yet, since we've been using the version of Rivet in FreeBSD ports, and haven't had a chance to patch and build.\n\nWe are going to test the 2.2 branch tomorrow and will update this thread with our results.", "is_private": false, "bug_id": 57501, "id": 180803, "time": "2015-02-05T16:36:20Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-02-05T16:36:20Z", "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 57501, "is_private": false, "id": 181071, "time": "2015-02-14T08:53:58Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-02-14T08:53:58Z", "tags": [], "text": "Please, let us know when you've done your tests, I wish to roll another version of rivet including the fix of this bug"}, {"count": 10, "tags": [], "bug_id": 57501, "is_private": false, "text": "I apologize for the delay again.  We have done a test, which unfortunately resulted in an apache core dump.  Since the test was conducted on an active dev environment, we have yet to analyze the dump or isolate the problem more thoroughly.  I'll keep this bug updated as we proceed.", "id": 181488, "time": "2015-03-03T21:39:14Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-03-03T21:39:14Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "A possible cause of segfaults was found in the 2.2 branch and in trunk as well. The 2.2 branch has been patched and trunk will follow soon. I don't know if it can help to find the source of the segfault you observed in your test environment", "is_private": false, "bug_id": 57501, "id": 181663, "time": "2015-03-11T10:46:04Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-03-11T10:46:04Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 57501, "text": "Any news from your test environments?", "id": 181834, "time": "2015-03-17T10:14:21Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-03-17T10:14:21Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 57501, "text": "Apologies again for the delay.  \n\nFor a clean install of the 2.2 branch on FreeBSD, I don't get a segfault, and it looks like the initial problem is fixed.\n\nHowever, if I set the AfterEveryScript to abort_page, I get:\n\nRivet AfterEveryScript failed!\n\nPage generation terminated by abort_page directive\n    invoked from within\n\"abort_page\"\n\nIs this expected, or should we not be attempting to call abort_page in the AfterEveryScript?   Note of course in production we don't use abort_page as the actual AfterEveryScript, but it is called from it.", "id": 182457, "time": "2015-04-17T15:13:13Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-04-17T15:13:13Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 57501, "text": "AfterEveryScript was meant to be exactly that: the last resort for catching anything left dangling. It has no ErrorScript or AbortScript but it makes sense it should be caught by an ErrorScript in case of Tcl errors. I'm not sure AbortScript should be triggered from AfterEveryScript (which won't be run after-every-script anymore), but for uniformity of behavior it might be the case we also assume abort_page to be able to trigger an exception even during this very final stage. I would be glad to add it, I just have a feeling like we are forcing and overloading AbortScript of tasks that should probably be carried out withing AfterEveryScript itself. But I'm a bit too conservative at times\n\nThoughts?", "id": 182458, "time": "2015-04-17T16:28:47Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-04-17T16:28:47Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 57501, "text": ">  I'm not sure AbortScript should be triggered from AfterEveryScript (which won't be run after-every-script anymore)\n\nThis is where my understanding of Rivet is a bit limited.  My understanding is that abort_page is not meant to trigger an error, but simply as an exit statement from the rivet page.  Or is your point that since AfterEveryScript is run after the script is aborted, then calling abort_page is nonsensical and unnecessary?\n\nAlso to confirm, is the error on abort_page in AfterEveryScript new with your recent changes?  It's in our current AfterEveryScript, which operates without issues.", "id": 182459, "time": "2015-04-17T17:54:06Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-04-17T17:54:06Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": null, "is_private": false, "id": 182460, "time": "2015-04-17T18:58:30Z", "bug_id": 57501, "creation_time": "2015-04-17T18:58:30Z", "text": "Forget about my comment. I misinterpreted the code. I don't even know how I did it, not very accurate but I checked rather carelessly.\n\n ::rivet::abort_page with AfterEveryScript fires the execution of AbortScript. Sorry for confusing it and sorry for getting you on the wrong track. \n\nI generally refer to abort_page as a way to generate exceptions because it's the closer analogy I have in mind. It's not exactly like in Java or C++, but the logic behind it is quite similar, you stop the execution and jump to where the a condition can be caught. And abort_page accepts an argument for driving the response of AbortScript. But to add more confusion to the issue...well...yes, abort_page returns a TCL_ERROR code with a reserved error code that triggers the execution of an AbortScript if exists. This is the way the mechanism was designed.\n\nThe bottom line is: we need also to check if an ErrorScript must be run. Your error is caused by something that failed in the AfterEveryScript. Perhaps the error message could be also improved"}, {"count": 17, "tags": [], "creator": "mxmanghi@apache.org", "is_private": false, "text": "I did some more accurate analysis of the problem, yesterday wasn't the right time for doing it, today I have more time and less things going on around me.\n\nScripts execution was already changed and performed by calling Rivet_ExecuteAndCheck. Within this function error conditions are examined and in case handled by AbortScript or ErrorScript. These scripts cannot be run through Rivet_ExecuteAndCheck for obvious reasons and their errors must be handled directly. Ideally these scripts must not fail.\n\nI spotted a problem in Rivet_ExecuteAndCheck: the error code returned by an ErrorScript has no effect on the code returned by Rivet_ExecuteAndCheck whereas in case of successful execution it simply should return TCL_OK to the caller. \n\nThis is a problem I'm going to fix right away.", "id": 182471, "time": "2015-04-18T13:52:39Z", "bug_id": 57501, "creation_time": "2015-04-18T13:52:39Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 57501, "text": "Created attachment 32659\nextended error handling\n\nThis patch extends the error handling. The central procedure in mod_rivet for script execution (Rivet_ExecuteAndCheck) has been modified and it's now sided by a new procedure Rivet_ExecuteErrorHandler. This procedure runs for both a URL referenced script and for an AbortScript in case of errors. I did some tests and it worked but needs to be tested on a wider set of cases. This patch should also fix the problem you're observing: if an AbortScript or ErrorScript exits successfully it the whole procedure should return TCL_OK. Please let me know what's the result of your tests now", "id": 182472, "time": "2015-04-18T17:16:57Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-04-18T17:16:57Z", "is_private": false, "attachment_id": 32659}, {"count": 19, "tags": [], "creator": "james.sulak@flightaware.com", "attachment_id": null, "is_private": false, "id": 182507, "time": "2015-04-20T19:52:44Z", "bug_id": 57501, "creation_time": "2015-04-20T19:52:44Z", "text": "Thanks for the patch.  When we apply it to the 2.2 branch, the unmodified index.rvt rivet test page gives the same error as previously listed:\n\nRivet AfterEveryScript failed!\n\nPage generation terminated by abort_page directive\n    invoked from within\n\"abort_page\"\nGET HTTP \nresponds with code two hundred\npage loads, YOU GOT SERVED"}, {"count": 20, "tags": [], "bug_id": 57501, "text": "Created attachment 32672\nNew handling of abort script if abort_page is called but no AbortScript defined\n\ncalling abort_page it breaks execution but doesn't return TCL_ERROR if no AbortScript is defined", "id": 182531, "time": "2015-04-21T13:48:26Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-04-21T13:48:26Z", "is_private": false, "attachment_id": 32672}, {"count": 21, "tags": [], "text": "Comment on attachment 32672\nNew handling of abort script if abort_page is called but no AbortScript defined\n\nThe patch has the wrong extension (.tcl instead of .diff). Sorry for the prolonged messing about this issue. I definitely need some time off work", "is_private": false, "bug_id": 57501, "id": 182545, "time": "2015-04-22T06:50:12Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-04-22T06:50:12Z", "attachment_id": 32672}, {"count": 22, "tags": [], "text": "Created attachment 32688\nError handling further improved\n\nImproved handling of AbortScript and ErrorScript. ErrorScripts are always run when any other script fails (if defined). If an ErrorScript is defined it's left to the programmer the task of generating a suitable error message if needed", "is_private": false, "bug_id": 57501, "id": 182659, "time": "2015-04-27T15:20:35Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-04-27T15:20:35Z", "attachment_id": 32688}, {"attachment_id": null, "tags": [], "creator": "james.sulak@flightaware.com", "text": "Thanks for the latest patch.\n\nWith this patch, I get the following behavior:\n\n- abort_page within a parsed file \"test_parse2.rvt\" in this instance, does abort the execution of the parsed page, but not the calling page.  \n- Subsequent calls to abort_page from the calling page also have no effect, page execution continues.\n- Abort_page works properly when no parse is involved.", "count": 23, "id": 182728, "time": "2015-04-29T16:28:07Z", "bug_id": 57501, "creation_time": "2015-04-29T16:28:07Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 57501, "text": "Created attachment 32709\nChecking abort condition when rolling back through the call stack to prevent spurious error handling\n\nThis patch uses the globals->page_aborting flag to check if the TCL_ERROR status was returned after calling abort_page. Thus calling abort_page within a nested template shouldn't result in a Tcl error. Please let me know", "id": 182777, "time": "2015-05-01T00:41:26Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-05-01T00:41:26Z", "is_private": false, "attachment_id": 32709}, {"count": 25, "tags": [], "creator": "james.sulak@flightaware.com", "is_private": false, "text": "Thanks.\n\nThe actual behavior of the pages is correct, and behaves as I expect.  However, when abort_page is called, either in the calling page, the called page, or in the AfterEveryScript, mod_rivet records an error in the httpd-error.log, for example:\n\n[Mon May 04 14:25:35 2015] [error] (20014)Internal error: mod_rivet: Error in Rivet_ParseExecFile exec file '/usr/local/www/apache22/data/test.rvt': Page generation terminated by abort_page directive\\n    invoked from within\\n\"abort_page\"\\n    invoked from within\\n\"parse test_parse2.rvt\"\\n    (in namespace eval \"::request\" script line 5)\\n    invoked from within\\n\"namespace eval request {\\nputs -nonewline \"\"\\n\\n\\nparse test_parse2.rvt\\n\\n\\nputs \"Execution continued.\"\\n\\n# abort_page\\n\\nputs -nonewline \"\\n\\n\\n \\n\"\\n\\n}\"", "id": 182817, "time": "2015-05-04T14:27:56Z", "bug_id": 57501, "creation_time": "2015-05-04T14:27:56Z", "attachment_id": null}, {"count": 26, "tags": [], "creator": "mxmanghi@apache.org", "attachment_id": 32713, "is_private": false, "id": 182820, "time": "2015-05-04T16:42:42Z", "bug_id": 57501, "creation_time": "2015-05-04T16:42:42Z", "text": "Created attachment 32713\nAlso we don't report abort_page generated errors\n\nYes! top level script execution mustn't report errors generate by abort_page calls. Please check this out, it works for me"}, {"count": 27, "tags": [], "bug_id": 57501, "text": "The latest patch prevents spurious error logging by checking the flag globals->page_aborting (Tcl interpreter associated data) but there also cases when you want to print an error even when abort_page has been called\n\nAfter abort_page is called execution is interrupted and control passed on to AbortScript and AfterEveryScript. If any of these scripts fail for some reason logging must be re-enabled and therefore that flag must be reset each time an error handler is called (Rivet_ExecuteErrorHandler)\n\nThis simple change is in my working box, I'm certain your AbortScript is fail proof ;) so it won't change your tests. I will check it more closely and commit it in a day or two", "id": 182821, "time": "2015-05-04T17:12:31Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-05-04T17:12:31Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "text": "Thanks for the patch.  All my tests pass, and I'm no longer seeing errors in httpd.log when calling abort_page.\n\nabort_page, when called from within a parsed parsed, aborts the entire page, including the caller.\n\nTo make sure we're on the same page, AfterEveryScript is not called (I believe) when a parsed page finishes.  My test is using abort_page as the AfterEveryScript.  When I do that, if I do not call abort_page explicitly from within the parsed page, page execution continues in the caller.\n\nI think that's reasonable behavior, although I could see the argument for calling AfterEveryScript after the parsed page, since it too is a script.", "is_private": false, "bug_id": 57501, "id": 182859, "time": "2015-05-06T14:09:32Z", "creator": "james.sulak@flightaware.com", "creation_time": "2015-05-06T14:09:32Z", "attachment_id": null}, {"count": 29, "attachment_id": null, "bug_id": 57501, "is_private": false, "id": 182917, "time": "2015-05-10T20:16:59Z", "creator": "mxmanghi@apache.org", "creation_time": "2015-05-10T20:16:59Z", "tags": [], "text": "I'm not sure I understand all the details in your last comment.\n\nIf you look at the function Rivet_SendContent in src/apache-2/mod_rivet.c you will see the AfterEveryScript (stored in rsc->after_every_script, where rsc is the configuration record) is executed right after Rivet_ParseExecFile regardless the status code returned by this function. The pointer storing the script has to be non NULL to be fired.\n\nabort_page sets an internal status flag and subsequent calls to abort_page have no effect until the request has been served. The rationale for this is that the parsed template (or also pure Tcl script for what it matters) is supposed to interrupt execution immediately and hand the control on to the AbortScript from where I don't see the point of calling abort_page again.\n\nThen AfterEveryScript was introduced and now we passed it throught Rivet_ExecuteAndCheck, which runs rsc->rivet_abort_script if abort_page is called, so we should have two cases\n\n 1) abort_page is invoked from the parsed page and then it should be uneffective from that point on to the end a single request\n 2) abort_oage is invoked from rsc->after_every_script and it should fire rsc->rivet_abort_page anyway\n\n Does it match your tests? Do we want AbortPage scripts to be treated differently when called from AfterEveryScript?"}, {"count": 30, "tags": [], "creator": "james.sulak@flightaware.com", "text": "I apologize- the current behavior works for us, I was just confused about the implementation details.", "id": 182963, "time": "2015-05-12T16:43:07Z", "bug_id": 57501, "creation_time": "2015-05-12T16:43:07Z", "is_private": false, "attachment_id": null}]
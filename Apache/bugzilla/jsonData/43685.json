[{"count": 0, "tags": [], "bug_id": 43685, "attachment_id": null, "id": 109682, "time": "2007-10-24T00:56:03Z", "creator": "kr@it-practice.dk", "creation_time": "2007-10-24T00:56:03Z", "is_private": false, "text": "I'm having trouble verifying a signature generated by BEA Aqualogic - it looks \nlike the SHA-1 hash generated when verifying is not the same as specified in \nthe signature.\n\nHere is the security header, I'll attach the entire signed XML file too.\n\nHere, both the timestamp and the body SHA-1 hash does not match, but the binary \nsecuritytoken is ok.\n\n\t\t<wsse:Security soapenv:mustUnderstand=\"1\" \nxmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-\nsecext-1.0.xsd\">\n\t\t\t<wsse:BinarySecurityToken wsu:Id=\"bst_eYXO4naFUHt1oMiY\" \nValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-\nprofile-1.0#X509v3\" EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-\n200401-wss-soap-message-security-\n1.0#Base64Binary\">MIIE7TCCBFagAwIBAgIEQDZd9zANBgkqhkiG9w0BAQUFADA/MQswCQYDVQQGEw\nJESzEMMAoGA1UEChMDVERDMSIwIAYDVQQDExlUREMgT0NFUyBTeXN0ZW10ZXN0IENBIElJMB4XDTA1MT\nAzMTA4MjgxOVoXDTA3MTAzMTA4NTgxOVowczELMAkGA1UEBhMCREsxIDAeBgNVBAoTF1REQyBBL1MgLy\n8gQ1ZSOjE0NzczOTA4MUIwGQYDVQQDExJUREMgQS9TIC0gUElEIFRFU1QwJQYDVQQFEx5DVlI6MTQ3Nz\nM5MDgtVUlEOjEwODM4Mzg5MTQzOTIwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKlUxEE8Miw22X\nnNdMBJpkZjcvBQWBboL8N/bjKrmHyUC68PIr+OTDtlq0QcIxYwWp7iHvd/FEQBjWc09KBTpVPy23rEM3\nn/0EXoBFeq0zFOrZt3eAwhY4RA4ipaW9bBjnzuhTXEQ/VJfROIcbcjORqBrJbDVpjv8Z7zzmLrQGE3Ag\nMBAAGjggLAMIICvDAOBgNVHQ8BAf8EBAMCA7gwKwYDVR0QBCQwIoAPMjAwNTEwMzEwODI4MTlagQ8yMD\nA3MTAzMTA4NTgxOVowRgYIKwYBBQUHAQEEOjA4MDYGCCsGAQUFBzABhipodHRwOi8vdGVzdC5vY3NwLm\nNlcnRpZmlrYXQuZGsvb2NzcC9zdGF0dXMwggEDBgNVHSAEgfswgfgwgfUGCSkBAQEBAQEBAzCB5zAvBg\ngrBgEFBQcCARYjaHR0cDovL3d3dy5jZXJ0aWZpa2F0LmRrL3JlcG9zaXRvcnkwgbMGCCsGAQUFBwICMI\nGmMAoWA1REQzADAgEBGoGXVERDIFRlc3QgQ2VydGlmaWthdGVyIGZyYSBkZW5uZSBDQSB1ZHN0ZWRlcy\nB1bmRlciBPSUQgMS4xLjEuMS4xLjEuMS4xLjEuMy4gVERDIFRlc3QgQ2VydGlmaWNhdGVzIGZyb20gdG\nhpcyBDQSBhcmUgaXNzdWVkIHVuZGVyIE9JRCAxLjEuMS4xLjEuMS4xLjEuMS4zLjAXBglghkgBhvhCAQ\n0EChYIb3JnYW5XZWIwFgYDVR0RBA8wDYELcGJ1dUB0ZGMuZGswgZYGA1UdHwSBjjCBizCBiKCBhaCBgq\nRQME4xCzAJBgNVBAYTAkRLMQwwCgYDVQQKEwNUREMxIjAgBgNVBAMTGVREQyBPQ0VTIFN5c3RlbXRlc3\nQgQ0EgSUkxDTALBgNVBAMTBENSTDOGLmh0dHA6Ly90ZXN0LmNybC5vY2VzLmNlcnRpZmlrYXQuZGsvb2\nNlc3BjMy5jcmwwHwYDVR0jBBgwFoAUHJgJRxpMOLkQxQQpW/H0ToBqzH4wHQYDVR0OBBYEFOtlUEQqrO\nK/XSqgOmGhs/lT4XelMAkGA1UdEwQCMAAwGQYJKoZIhvZ9B0EABAwwChsEVjcuMQMCA6gwDQYJKoZIhv\ncNAQEFBQADgYEAUaMFA/2wqk8PzeNW8wHCMqDyx5G4onfRiH1lTw5v0yOC2MNgAnIN87LHrsYRx2gobU\nemjajrbjA+jDC8k2sxHkFyj2vqwXqEys7coScQeeIz5J4V5pFz9YhgXrb8xAdI7YexWSAqAttz5mde7n\nvHNsQ2vpWDLmjGsynNaP7avFg=</wsse:BinarySecurityToken>\n\t\t\t<dsig:Signature \nxmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\">\n\t\t\t\t<dsig:SignedInfo>\n\t\t\t\t\t<dsig:CanonicalizationMethod \nAlgorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t<dsig:SignatureMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n\t\t\t\t\t<dsig:Reference \nURI=\"#Timestamp_NINwvG8AFBVIRLEX\">\n\t\t\t\t\t\t<dsig:Transforms>\n\t\t\t\t\t\t\t<dsig:Transform \nAlgorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n\t\t\t\t\t\t\t\n\t<exc14n:InclusiveNamespaces PrefixList=\"\" \nxmlns:exc14n=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t\t\t</dsig:Transform>\n\t\t\t\t\t\t</dsig:Transforms>\n\t\t\t\t\t\t<dsig:DigestMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n\t\t\t\t\t\n\t<dsig:DigestValue>j6FEasOTde+K4VAIyT1AnJjj/38=</dsig:DigestValue>\n\t\t\t\t\t</dsig:Reference>\n\t\t\t\t\t<dsig:Reference URI=\"#Id-650323651\">\n\t\t\t\t\t\t<dsig:Transforms>\n\t\t\t\t\t\t\t<dsig:Transform \nAlgorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n\t\t\t\t\t\t\t\n\t<exc14n:InclusiveNamespaces PrefixList=\"\" \nxmlns:exc14n=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t\t\t</dsig:Transform>\n\t\t\t\t\t\t</dsig:Transforms>\n\t\t\t\t\t\t<dsig:DigestMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n\t\t\t\t\t\n\t<dsig:DigestValue>edC2luHbb+q5TSLk1XcVeiDVNb4=</dsig:DigestValue>\n\t\t\t\t\t</dsig:Reference>\n\t\t\t\t\t<dsig:Reference \nURI=\"#bst_eYXO4naFUHt1oMiY\">\n\t\t\t\t\t\t<dsig:Transforms>\n\t\t\t\t\t\t\t<dsig:Transform \nAlgorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n\t\t\t\t\t\t\t\n\t<exc14n:InclusiveNamespaces PrefixList=\"\" \nxmlns:exc14n=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n\t\t\t\t\t\t\t</dsig:Transform>\n\t\t\t\t\t\t</dsig:Transforms>\n\t\t\t\t\t\t<dsig:DigestMethod \nAlgorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n\t\t\t\t\t\n\t<dsig:DigestValue>gVM6kHVLvllHfM1wx0pXLy5fOJg=</dsig:DigestValue>\n\t\t\t\t\t</dsig:Reference>\n\t\t\t\t</dsig:SignedInfo>\n\t\t\t\n\t<dsig:SignatureValue>CV3lBSJ/KI8yj3ZgQdg/XLGvOhEDGYs2qu7qOn2L8e4e2t8Va9R\ndZBvnZsuNpOC5b4Vkl6UQWc6HvNMrp+EjB6/PgD7D74R3CcJhpSQpLwiiwyzgOnX+AGsjh+NabWJZw8F\nx8SP3tQ+TqSsF0OCy+UzJ+I9bKDaWghjUMG61xkE=</dsig:SignatureValue>\n\t\t\t\t<dsig:KeyInfo>\n\t\t\t\t\t<wsse:SecurityTokenReference \nwsu:Id=\"str_eKIZMaztAU9dy8pc\">\n\t\t\t\t\t\t<wsse:Reference \nURI=\"#bst_eYXO4naFUHt1oMiY\" ValueType=\"http://docs.oasis-\nopen.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\"/>\n\t\t\t\t\t</wsse:SecurityTokenReference>\n\t\t\t\t</dsig:KeyInfo>\n\t\t\t</dsig:Signature>\n\t\t\t<wsu:Timestamp wsu:Id=\"Timestamp_NINwvG8AFBVIRLEX\">\n\t\t\t\t<wsu:Created>2007-10-10T10:23:32Z</wsu:Created>\n\t\t\t\t<wsu:Expires>2007-10-10T10:24:32Z</wsu:Expires>\n\t\t\t</wsu:Timestamp>\n\t\t</wsse:Security>\n\nWhat looks odd to me, is the InclusiveNamespaces PrefixList which is empty - I \ndo not know if this is the problem or not.\n\nCan anyone help figure out what is going on ? I am working at a project for a \ncustomer where this is a critical problem and I would really appreciate if \nanyone can help me identify if it is a problem in XML-Security or in BEA's \nAqualogic."}, {"count": 1, "text": "Created attachment 21030\nXML which WSS4J/XML-Security is unable to verify\n\nAttached is the XML I have trouble verifying.", "bug_id": 43685, "is_private": false, "id": 109683, "time": "2007-10-24T00:59:58Z", "creator": "kr@it-practice.dk", "creation_time": "2007-10-24T00:59:58Z", "tags": [], "attachment_id": 21030}, {"count": 2, "tags": [], "bug_id": 43685, "text": "Created attachment 21031\nSample java code which uses WSS4J to verify the signature", "id": 109684, "time": "2007-10-24T01:01:59Z", "creator": "kr@it-practice.dk", "creation_time": "2007-10-24T01:01:59Z", "is_private": false, "attachment_id": 21031}, {"count": 3, "tags": [], "bug_id": 43685, "text": "Is anyone looking or planning to look at this bug report at all, or has the \nXML security project really gone stale ?\n", "id": 111488, "time": "2007-12-06T01:25:31Z", "creator": "kr@it-practice.dk", "creation_time": "2007-12-06T01:25:31Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "You're asking somebody else to debug your signature. Unless there's evidence of\na bug, bugzilla isn't the place for that, and frankly, it's not something you\nshould expect.\n\nWhen I have signature problems, I debug the node sets being digested and compare\nthem closely until I identify what's different about them. That's the only way\nto find the problem.\n\nxmlsec can log that information on DEBUG, or you can debug into the jar and look\nat the digest input that way. BEA is another matter, but that's what you usually\nhave to do.", "bug_id": 43685, "is_private": false, "id": 111506, "time": "2007-12-06T08:24:49Z", "creator": "cantor.2@osu.edu", "creation_time": "2007-12-06T08:24:49Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 43685, "text": "I didn't mean to ask you to debug my signature (although I probably could have \nformulated that better in the bug description).\n\nWhat I believe is a problem in weblogic, is that it adds an empty PrefixList - \nI am having some difficulty in figuring out what is supposed to happen when an \nempty list is provided, and I hoped that someone else could help med with \nfiguring this out.\n\nI suspect that weblogic and axis have two different views about how the \ncanonicalization should be done in this case which probably what is causing \ninteroperability problems.\n\nI have debugged through the code, and the difference seems to lie in the \noutput of the canonalization algorithms in weblogic and axis.\n\nSo if you could help shed some light on what is supposed to happen, that would \nhelp me a lot in finding out what is really going on and figuring out if it is \na problem in xmlsec or in weblogics implementation.\n\nSo, is an empty PrefixList valid at all ? What is supposed to happen if its \nempty ? The same as when its not specified ? The same as if it \ncontained \"#default\" ?\n", "id": 111521, "time": "2007-12-06T15:27:35Z", "creator": "kr@it-practice.dk", "creation_time": "2007-12-06T15:27:35Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 43685, "text": "Ah, ok, that's more reasonable. ;-)\n\nTo answer your question, I can't say what the Java does, but I'm fairly sure the\nC++ version treats an empty prefix list the same as if the element wasn't there\nat all, which is what makes sense to me. It certainly is *not* the same as\n\"#default\" would be.\n\nSo if the Java's not doing that, I'd say it should be. But that said, sending an\nempty prefix list is at least \"bad form\" if nothing else.\n\nYou say you have evidence that the c14n output is different? Did you spot\nanything that would suggest how one or the other of the libraries is treating\nthat empty list? Is one of them treating a namespace inclusively?\n\nWith an empty list, I would expect them all to be exclusive, which means omitted\nunless visibly used, and if used, declared in the outermost element where the\nnamespace is first used.", "count": 6, "id": 111525, "time": "2007-12-06T18:25:56Z", "creator": "cantor.2@osu.edu", "creation_time": "2007-12-06T18:25:56Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43685, "text": "(In reply to comment #6)\n> Ah, ok, that's more reasonable. ;-)\n> \n> To answer your question, I can't say what the Java does, but I'm fairly sure the\n> C++ version treats an empty prefix list the same as if the element wasn't there\n> at all, which is what makes sense to me. \n\nYes, from browsing the Java code, this appears to be what we also do.\n\n> So if the Java's not doing that, I'd say it should be. But that said, sending an\n> empty prefix list is at least \"bad form\" if nothing else.\n\nAccording to the Exc-C14N recommendation, it is legal. \n\nI haven't had time to look at this issue yet, and likely won't until after the New Year. If you can get the\nReference's canonicalized bytes when signing with the BEA implementation and put this in the bug \nreport, that would help tremendously. Otherwise, it will be mostly a guessing game as to what the \nproblem is (or whose fault it is). Also, have you tried validating the signature with another \nimplementation? ", "id": 111543, "time": "2007-12-07T13:02:18Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-12-07T13:02:18Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 43685, "text": "I am currently trying to get at the debug output from BEA's AquaLogic - it \nisn't too easy, since it is running at another company and I have no control \nover the server, so I am currently trying to persuade them to add debug \nsettings.\n\nBut, while jogging around the various forums, I found this link:\n\nhttp://forums.bea.com/thread.jspa?threadID=600008882\n\nIt mentions a similar problem where the poster claimed he patched wss4j to get \nit to work, here is a quote from the post:\n\n-----\nI've gotten a little further since my initial post. As it turns out there is a \ncannonicalization problem. I believe its on the wss4j/XML-Security side. The \nproblem seems to occur because of \"non-visible\" namespaces in the body of the \nmessage due to soap encoding of array types. The particular service I was \ntrying to secure has some of these in there, i.e there are attributes that look \nlike soapenc:arrayType=\"mynsprefix:mytype[]\". I believe AL is following the \nspirit of the WS-I Basic Security profile and is including the mynsprefix in \nthe cannonicalized xml. wss4j on the other hand isnt. So, I modified wss4j to \nscan for these namespaces and included them in the list of includednamespaces \nto the exclusive-c14n cannonicalization algorithim. Long story short, with the \nchange I made, the digests are the same and the signatures match.\n-----\n\nI don't know if its relevant or not, but I'm including it in case it rings a \nbell somewhere ;)\n\nI'll get back to you when I have the canonicalized bytes from AquaLogic.\n", "id": 111614, "time": "2007-12-10T12:35:29Z", "creator": "kr@it-practice.dk", "creation_time": "2007-12-10T12:35:29Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "is_private": false, "id": 111694, "time": "2007-12-12T05:03:40Z", "bug_id": 43685, "creation_time": "2007-12-12T05:03:40Z", "text": "(In reply to comment #8)\n\n> But, while jogging around the various forums, I found this link:\n> \n> http://forums.bea.com/thread.jspa?threadID=600008882\n> \n> It mentions a similar problem where the poster claimed he patched wss4j to get \n> it to work, here is a quote from the post:\n> \n> -----\n> I've gotten a little further since my initial post. As it turns out there is a \n> cannonicalization problem. I believe its on the wss4j/XML-Security side. The \n> problem seems to occur because of \"non-visible\" namespaces in the body of the \n> message due to soap encoding of array types. The particular service I was \n> trying to secure has some of these in there, i.e there are attributes that look \n> like soapenc:arrayType=\"mynsprefix:mytype[]\". I believe AL is following the \n> spirit of the WS-I Basic Security profile and is including the mynsprefix in \n> the cannonicalized xml. wss4j on the other hand isnt. So, I modified wss4j to \n> scan for these namespaces and included them in the list of includednamespaces \n> to the exclusive-c14n cannonicalization algorithim. Long story short, with the \n> change I made, the digests are the same and the signatures match.\n> -----\n> \n> I don't know if its relevant or not, but I'm including it in case it rings a \n> bell somewhere ;)\n\nIf this does indeed turn out to be the same problem, then the issue needs to be\nfixed (assuming it is the correct behavior) in the wss4j implementation (to add\nthis namespace to the InclusiveNamespaces PrefixList attribute), and not the\nxmlsec implementation.\n\n> \n> I'll get back to you when I have the canonicalized bytes from AquaLogic.\n> \n\nOk, thanks."}, {"attachment_id": null, "tags": [], "bug_id": 43685, "text": "Unfortunately I still have not been able to get the debug output I need from \nAquaLogic.\n\nThe customer who controls the AquaLogic server have run tests against both a WS-\nSecurity implementation in .NET and a hardware based one (haven't been able to \nget the name/model/manufacturer of it) and both were able to verify the \nsignature on the XML without any problems while Axis failed on the same file.\n\nSo this indeed points to the problem being in Axis/WSS4J/XML Security - I hope \nthat the debug output when I get it will help identify exactly where the \nproblem is.\n", "count": 10, "id": 111960, "time": "2007-12-20T12:13:55Z", "creator": "kr@it-practice.dk", "creation_time": "2007-12-20T12:13:55Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 43685, "text": "I too have the BEA Aqualogic / WSS4J issue as Kim reported back in December 2007. \n\nMaybe I can help this bugreport with some digests. FYI, the same BEA client is used and thus it is the signed server response where I'm getting this error.\n\nThe original digest which is working and is output by the BEA serverside has this body reference element:\n\"\n<dsig:Reference URI=\"#Body_ZPjVfxxAijn8HTWs\">\n<dsig:Transforms>\n<dsig:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\">\n  <exc14n:InclusiveNamespaces xmlns:exc14n=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"\" /> \n  </dsig:Transform>\n  </dsig:Transforms>\n  <dsig:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> \n  <dsig:DigestValue>rU1baQUuqrcsdOmBAVzsCDJn7wE=</dsig:DigestValue> \n  </dsig:Reference>\n\"\n\nWSS4J yields the following response Body reference on the same request and content:\n\"\n<ds:Reference URI=\"#id-18980564\">\n<ds:Transforms>\n<ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></ds:Transform>\n</ds:Transforms>\n<ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></ds:DigestMethod>\n<ds:DigestValue>uXlkH/DReGo0XPrkX2ukFrg6jN0=</ds:DigestValue>\n</ds:Reference>\n\"\n\nThe SOAP Body in both references above is this test sample:\n\"\n<soapenv:Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"id-18980564\">\n  <m:getMeOperationResponse xmlns:m=\"http://skat.dk\">\n    <m:return>\n      <java:Me xmlns:java=\"java:dk.skat.ip.test.fkt23.komponent.b2B.service\">-1</java:Me>\n    </m:return>\n  </m:getMeOperationResponse>\n</soapenv:Body>\n\"\n\nThe reported error from the requesting BEA client, when the server side used WSS4J, is:\n\"\n     [java] java.rmi.RemoteException: weblogic.xml.dom.marshal.MarshalException: weblogic.xml.crypto.wss.WSSecurityException: Signature failed to vali\ndate.  Reference: #id-18980564 does not validate.\n     [java] ; nested exception is:\n     [java]     weblogic.xml.crypto.wss.WSSecurityException: weblogic.xml.dom.marshal.MarshalException: weblogic.xml.crypto.wss.WSSecurityException: S\nignature failed to validate.  Reference: #id-18980564 does not validate.\n     [java]\n\"\n\nPlease let me know if I can provide anything else in order to get this bug fixed.", "count": 11, "id": 116835, "time": "2008-05-19T23:51:29Z", "creator": "rene@hjortskov.dk", "creation_time": "2008-05-19T23:51:29Z", "is_private": false}, {"count": 12, "tags": [], "creator": "rene@hjortskov.dk", "attachment_id": null, "is_private": false, "id": 116877, "time": "2008-05-21T02:29:45Z", "bug_id": 43685, "creation_time": "2008-05-21T02:29:45Z", "text": "Btw, it might be helpful to know how BEA sees the InclusiveNamespaces:\n\n\"\nThe WebLogic Web Services security runtime does not support specifying an\nInclusiveNamespaces PrefixList that contains a list of namespace prefixes or a token indicating the presence of the default namespace to the canonicalization algorithm.\n\" \n*   taken from http://edocs.bea.com/wls/docs100/pdf/webserv_ref.pdf\n\nDoes this impact the way that WSS4J perceives things, i.e. create the Reference digest?"}, {"count": 13, "text": "Enabling isWsiBSPCompliant the element \n\"\n<exc14n:InclusiveNamespaces\nxmlns:exc14n=\"http://www.w3.org/2001/10/xml-exc-c14n#\" PrefixList=\"\" /> \n\"\n\ngets inserted by WSS4J, however, enabling this feature makes it imposible to include a reference to the BinarySecurityToken in order to get that signed too. The BEA generated WSDL requires the BinarySecurityToken to be signed along with timestamp and body. Furthermore, the SignatureValue on the BEA client cannot be verified anymore as it could in isWsiBSPCompliant = false mode.\n\nIn order to add a reference for the BinarySecurityToken is must be present in the security header, otherwise getPrefixList throws an NullPointerException, but the conveniance method WSSecSignaure.build adds the references before updating the security header leading to the NullPointerException.\n\nFurthermore, the isWsiBSPCompliant=true mode forced the above InclusiveNamespaces to both the SignedInfo canonilization method as well as to the timestamp and body references. BEA only agrees with the two last ones.\n\nSo neither isWsiBSPCompliant mode disabled or enabled works together with a BEA client. :(", "bug_id": 43685, "is_private": false, "id": 116899, "time": "2008-05-22T06:42:02Z", "creator": "rene@hjortskov.dk", "creation_time": "2008-05-22T06:42:02Z", "tags": [], "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 43685, "is_private": false, "text": "Created attachment 22183\nReference canonicalized output", "id": 118032, "time": "2008-06-26T14:12:29Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-06-26T14:12:29Z", "attachment_id": 22183}, {"count": 15, "tags": [], "bug_id": 43685, "text": "FWIW, I have attached the canonicalized bytes of the two References in the\nattached signature that are invalid.\n\nNothing appears strange to me as far as what namespaces are included, given \nthat the InclusiveNamespaces parameter is set to \"\", which is the same as not\nspecifying it.\n\nSo I'm inclined to close this bug unless I get some additional information soon. There is nothing more I can do unless you can get the same canonicalized bytes when generating the signature. Then we can do a comparison to see what the difference is and probably guess which side the problem is in. If it is indeed a bug I would really like to fix it but at this point I have nothing to go by, and all of our existing exclusive c14n interoperability tests pass.", "id": 118034, "time": "2008-06-26T14:15:13Z", "creator": "sean.mullan@oracle.com", "creation_time": "2008-06-26T14:15:13Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 43685, "text": "Multiple things can go wrong using InclusiveNamespaces PrefixList=\"\".\n\n1) If the logical representation uses InclusiveNamespaces PrefixList=\"\", but the physical representation (the canonilized output before signing) completely ignores it in only one end it poses a problem\n\n2a) If InclusiveNamespaces PrefixList=\"\" means different things in BEA and WSS4J such as one end interpreting it as the default namespace\n\n2b) If InclusiveNamespaces PrefixList=\"\" means different things in BEA and WSS4J such as one end interpreting it as part of the physical representation and the other leaving it out, yet preserves it in the logical representation\n\nThis problem persist even after upgrading WebLogic Server 9.2 to Maintanance Pack 3, where newline and Document Order is fixed in relation to canonilization.\n\nBEA Support and WSS4J both ask for more information, and both claims to be WS-I compliant, however, they don't work together.\n\nAs I would expect BEA Support to download WSS4J and create a test, I would also expect WSS4J to download WLS 9.2 with MP 3 and create a sample. I guess that both parties find it just as hard and timeconsuming a task as I find it hard and timeconsuming to provide the solution for you.\n\nThe BEA API doesn't allow one to print the canonilized output as WSS4J does. BEA Support just wrote me today and said that signing (the step after canonilization) often happens while streaming over the network or sometimes in the handleRequest or handleResponse events. If that is true, then output of a BEA client must be exactly what is output from the canonilization step.\n\nFeel free to contact me by email, if you are interested in the BEA client and the WSS4J serverside.\n\nAnyway, thanks for responding Sean - I'm trying to get BEA Support to help me provide the information you require, since I have to decompile and rewrite and recompile the weblogic.jar in order to get the canonilized output.", "count": 16, "id": 118069, "time": "2008-06-27T09:06:08Z", "creator": "rene@hjortskov.dk", "creation_time": "2008-06-27T09:06:08Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 43685, "attachment_id": null, "id": 118358, "creation_time": "2008-07-07T12:05:11Z", "time": "2008-07-07T12:05:11Z", "creator": "sean.mullan@oracle.com", "text": "(In reply to comment #16)\n\n> The BEA API doesn't allow one to print the canonilized output as WSS4J does.\n\nThis should be a fundamental requirement for any XML Signature implementation.\nThere should be some sort of hook that allows the canonicalized bytes from \nboth the Reference and SignedInfo to be emitted or cached and retrieved. I \nwould have been unable to analyze and fix dozens of bugs (or prove they \nweren't bugs) without this basic level of debugging support. \n \n> BEA Support just wrote me today and said that signing (the step after\n> canonilization) often happens while streaming over the network or sometimes in\n> the handleRequest or handleResponse events. If that is true, then output of a\n> BEA client must be exactly what is output from the canonilization step.\n\nThis is not a signing failure. It fails when the references are validated. \nThe digests don't match.\n\n> \n> Feel free to contact me by email, if you are interested in the BEA client and\n> the WSS4J serverside.\n> \n> Anyway, thanks for responding Sean - I'm trying to get BEA Support to help me\n> provide the information you require, since I have to decompile and rewrite and\n> recompile the weblogic.jar in order to get the canonilized output.\n\nYou're welcome. I hope you figure out the problem.", "is_private": false}, {"count": 18, "tags": [], "bug_id": 43685, "text": "I'm happy to tell you that I have found the solution.\n\nI have been using javax.xml.transform objects to convert my signed Document in order to forward the content onto my servlet OutputStream. Result was invalid Timestamp and body references due to differences in the digests.\n\nA few days ago I read http://wiki.apache.org/ws/FrontPage/WsFx/wss4jFAQ, which suggested that some formatting/alteration of the signed document was happening.\n\nThus I felt compelled to try different ways of streaming the document to the OutputStream.\n\n// Usecase XMLSerializer \n      // Fixed Timestamp reference issue, however, body reference is invalid\n      org.apache.xml.serialize.OutputFormat format = new org.apache.xml.serialize.OutputFormat(signedDoc);\n      org.apache.xml.serialize.XMLSerializer serializer = new org.apache.xml.serialize.XMLSerializer(out, format);\n      serializer.serialize(doc.getDocumentElement());\n\nThe output still looks logical fine, but some formatting problem still exists for the body element. Since I was signing and then streamed onto the network without any intermediary steps I started to think up more ways to perform the streaming step.\n\n// Usecase DOM2Writer\n      // Yields IOException on the client side. The message is received and logged, but fails  due to \"Unterminated value\" which triggers the handlerFault with bea exception trace for Unterminated value\n      org.apache.ws.security.util.DOM2Writer domout = new org.apache.ws.security.util.DOM2Writer();\n      domout.serializeAsXML(doc, (Writer)new OutputStreamWriter(out),false);\n\n// Usecase DOM2Writer with windows linefeed\n      // Yields IOException on the client side. \n// Due to Unterminated value on client side see, DOM2Writer usecase... send line termination      \norg.apache.ws.security.util.DOM2Writer domout = new org.apache.ws.security.util.DOM2Writer();\n      domout.serializeAsXML(doc, (Writer)new OutputStreamWriter(out),false);      \n// Due to Unterminated value on client side see, DOM2Writer... send line termination\n      out.write(\"\\n\\r\".getBytes());\n// YES, this worked fine! \n\n// Usecase Canonicalizer ( Perserves signed content(Idempotent), but let me use the writeTo )\nCanonicalizer c14n = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS); \nbyte[] canonicalMessage = c14n.canonicalizeSubtree(signedDoc);\nByteArrayInputStream in = new ByteArrayInputStream(canonicalMessage); \nMessageFactory factory = MessageFactory.newInstance(); \n((SOAPMessage)factory.createMessage(null, in)).writeTo(out); \n// YES, this worked fine! \n\nI don't think this is a bug anymore.\n\nThanks, for your time.\n", "id": 118467, "time": "2008-07-10T07:44:17Z", "creator": "rene@hjortskov.dk", "creation_time": "2008-07-10T07:44:17Z", "is_private": false, "attachment_id": null}]
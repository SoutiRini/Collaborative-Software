[{"count": 0, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "id": 152149, "time": "2011-12-13T18:47:41Z", "bug_id": 52326, "creation_time": "2011-12-13T18:47:41Z", "is_private": false, "text": "Reference: https://jira.springsource.org/browse/SPR-8894\n\nTomcat attempts to load classes when it searches for annotations. These class loading attempts when failed, should be silently ignored. \n\nIf the application attempts to load the classes later, it will receive the actual error. However, when Tomcat prints out the stack trace of this class loading error, it gives the wrong signal. There is actually not anything wrong in the application itself, so a WARN as tomcat logs with a stack trace becomes misleading.\n\nThe initial fix would be: ContextConfig.java to drop log level to debug in checkHandleTypes method\n       Class<?> clazz = null;\n        try {\n            clazz = context.getLoader().getClassLoader().loadClass(className);\n        } catch (NoClassDefFoundError e) {\n            log.debug(sm.getString(\"contextConfig.invalidSciHandlesTypes\",\n                    className), e);\n            return;\n        } catch (ClassNotFoundException e) {\n            log.warn(sm.getString(\"contextConfig.invalidSciHandlesTypes\",\n                    className), e);\n            return;\n        } catch (ClassFormatError e) {\n            log.warn(sm.getString(\"contextConfig.invalidSciHandlesTypes\",\n                    className), e);\n            return;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.warn(sm.getString(\"contextConfig.invalidSciHandlesTypes\",\n                    className), t);\n            return;\n        }\n\nThe better fix would be to achieve the same without classloading at all.\nOther containers do ignore any type of classloading errors during this sequence."}, {"count": 1, "tags": [], "creator": "mail@johannesrost.de", "attachment_id": null, "id": 152365, "time": "2011-12-22T10:55:19Z", "bug_id": 52326, "creation_time": "2011-12-22T10:55:19Z", "is_private": false, "text": "If the application is big, the process of loading all classes takes quite long. Aproximatly 3 minutes extra for a 66MB web application, which takes about 20 seconds to start up, when no ServletContainerInitializer implementation is present.\nIt also consumes a lot of permGenSpace. More than 128MB extra, compared to start up without the initializer."}, {"count": 2, "tags": [], "bug_id": 52326, "is_private": false, "id": 152367, "creation_time": "2011-12-22T11:59:55Z", "time": "2011-12-22T11:59:55Z", "creator": "cbeams@gmail.com", "text": "Filip, here's an additional closely related issue, essentially making the case that much stronger.\n\nhttps://jira.springsource.org/browse/SPR-8945", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 3, "id": 152468, "time": "2011-12-29T20:10:39Z", "bug_id": 52326, "creation_time": "2011-12-29T20:10:39Z", "text": "Fixed (by dropping to debug level) in trunk and 7.0.x. The fix will be in 7.0.24 onwards.\n\nThe 'better' fix will require a fair amount of refactoring. The reason the classes are loaded at the moment is to perform a Class.isAssignableFrom(Class) call."}, {"count": 4, "tags": [], "creator": "cbeams@gmail.com", "attachment_id": null, "id": 152511, "time": "2012-01-01T20:01:14Z", "bug_id": 52326, "creation_time": "2012-01-01T20:01:14Z", "is_private": false, "text": "Thanks, Mark.  We've seen several comments lately about startup time suffering due (apparently) to SCI classloading overhead.\n\nFor example: http://forum.springsource.org/showthread.php?120138-Startup-time-in-3-1-0-RELEASE\n\nThis is leading us to recommend folks start using metadata-complete=\"true\" in web.xml; it's nice that there is an escape hatch here, but unfortunate to require people to do this when upgrading to Spring 3.1+Tomcat 7.\n\nIs there already another issue that addresses the refactoring necessary to avoid classloading?  I can create it if not, though I'm sure you'd be more articulate at doing so.\n\nRegards,\n\nChris"}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 152514, "time": "2012-01-01T21:18:54Z", "bug_id": 52326, "creation_time": "2012-01-01T21:18:54Z", "is_private": false, "text": "It sounds like offtopic in this issue, but just to correct misinformation,\n\n(In reply to comment #4)\n> This is leading us to recommend folks start using metadata-complete=\"true\" in\n> web.xml; it's nice that there is an escape hatch here, but unfortunate to\n> require people to do this when upgrading to Spring 3.1+Tomcat 7.\n\nThe metadata-complete attribute is nothing new. It is @since Servlet 2.5 and thus is already present in Tomcat 6.\n\nThe tip to set metadata-complete=\"true\" is valid for any web application using servlet 2.5 or later, regardless of the server that you are using."}, {"count": 6, "tags": [], "bug_id": 52326, "is_private": false, "id": 152517, "creation_time": "2012-01-02T07:24:44Z", "time": "2012-01-02T07:24:44Z", "creator": "cbeams@gmail.com", "text": "Hi Konstantin,\n\nRight, the 'metadata-complete' attribute has been around for a while, but when used against Servlet 3.0+, its semantics expand to mean that ServletContainerInitializer processing is skipped altogether.  For users experiencing long startup times due to ServletContainerInitializer classloading overhead, metadata-complete=\"true\" provides a simple way of avoiding the problem.\n\nOf course, the trouble is that these users may actually want or need to use ServletContainerInitializer functionality, for example taking advantage of Spring 3.1's WebApplicationInitializer support[1].  As long as SCI processing involves expensive classloading, larger applications will suffer from long startup times and thus be encouraged to \"shut off\" this functionality via metadata-complete=\"true\".\n\nThanks,\n\nChris\n\n[1] http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/WebApplicationInitializer.html", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 52326, "is_private": false, "id": 152642, "time": "2012-01-09T17:13:57Z", "creator": "cbeams@gmail.com", "creation_time": "2012-01-09T17:13:57Z", "tags": [], "text": "I just created bug 52444 to capture the request to move away from classloading when processing @HandlesTypes."}, {"attachment_id": null, "tags": [], "creator": "costin.leau@gmail.com", "is_private": false, "count": 8, "id": 153246, "time": "2012-01-29T11:33:15Z", "bug_id": 52326, "creation_time": "2012-01-29T11:33:15Z", "text": "Another +1 regarding skipping class loading - it simply has too many bad side effects (including initializing static blocks way too early). See bug 52549 for more info."}]
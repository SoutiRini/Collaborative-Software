[{"count": 0, "tags": [], "bug_id": 36293, "attachment_id": null, "text": "If you look inside WebappClassLoader, once a resource is loaded and a\nResourceEntry is allocated for it it is never freed. Now say a user references a\nlarge image on my webapp once 10 hours ago, I'm stuck with that memory loss\nindefinately. My website is very image oriented (a lot of large images) and it\nis quite painful to keep those unused images around forever. I keep on running\ninto OutOfMemoryErrors.\n\nWe should be able to configure reasonable idle settings. For example, I'd like\nfor image resources to be freed if they've been idle for over 30 minutes.", "id": 78771, "time": "2005-08-21T21:21:44Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2005-08-21T21:21:44Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 78772, "time": "2005-08-21T22:12:15Z", "bug_id": 36293, "creation_time": "2005-08-21T22:12:15Z", "text": "How about filing sensible bug reports rather than continuously waste people's\ntime with non existent corner cases ? Obviously there are one million ways to\nwrite broken webapps."}, {"count": 2, "tags": [], "bug_id": 36293, "attachment_id": null, "is_private": false, "id": 78773, "time": "2005-08-21T22:22:26Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2005-08-21T22:22:26Z", "text": "Remm, this isn't a problem with my webapp. This is a problem with Tomcat.\n\nWebappClassLoader disregards the context cache settings. That is the problem. I\ncan't even configure its behavior."}, {"count": 3, "tags": [], "text": "Look Remy, I'm not trying to fight with you but what I'm saying is this...\n\nresourceEntries is only referenced by WebappClassLoader.java (I scanned the\nentire source-code tree) and within that file, entries are added but never\nremoved. It does not respect the configuration settings outlined here:\nhttp://jakarta.apache.org/tomcat/tomcat-5.5-doc/config/context.html\n\nSpecifically, cacheMaxSize, cacheTTL.", "is_private": false, "bug_id": 36293, "id": 78774, "time": "2005-08-21T22:28:44Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2005-08-21T22:28:44Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "remm@apache.org", "is_private": false, "id": 78789, "time": "2005-08-22T09:44:08Z", "bug_id": 36293, "creation_time": "2005-08-22T09:44:08Z", "tags": [], "text": "(In reply to comment #3)\n> Look Remy, I'm not trying to fight with you but what I'm saying is this...\n> \n> resourceEntries is only referenced by WebappClassLoader.java (I scanned the\n> entire source-code tree) and within that file, entries are added but never\n> removed. It does not respect the configuration settings outlined here:\n> http://jakarta.apache.org/tomcat/tomcat-5.5-doc/config/context.html\n> \n> Specifically, cacheMaxSize, cacheTTL.\n\nThese attributes are not for controlling the classloader behavior."}, {"count": 5, "tags": [], "text": "Ok, then humbly request that you allow me to file this RFE. Is there any good\nreason to not allow the classloader to deallocate idle resource cache entries?\nIf a large JAR entry was accessed accessed a few hours ago, why should it remain\ncached in memory?", "is_private": false, "bug_id": 36293, "id": 78825, "time": "2005-08-22T18:11:39Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2005-08-22T18:11:39Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "remm@apache.org", "is_private": false, "id": 78830, "time": "2005-08-22T18:30:49Z", "bug_id": 36293, "creation_time": "2005-08-22T18:30:49Z", "tags": [], "text": "Classloaders are nearly all of the time meant to load applications and their\nneeded resources. As a result, all the said resources will have the same\nlifecycle. You are trying to use the Tomcat classloader to do something else.\nFor that kind of usage, you should use a custom classloader implementation, or\n(better) use a loading mechanism which actually suit your needs."}, {"count": 7, "tags": [], "text": "Yes, but how many ClassLoaders keep a cache around forever with no maximum size\nor idle detection? At the very least you should be using SoftReferences here,\nwhich have been around since JDK 1.2 and have been specifically designated for\ncaches. Webapps are rarely short-lived which makes this problem even worse.\n\nI would be perfectly fine with SoftReferences with no configuration settings.\nCan you make this modification?", "attachment_id": null, "id": 78832, "creator": "cowwoc@bbs.darktech.org", "time": "2005-08-22T18:37:21Z", "bug_id": 36293, "creation_time": "2005-08-22T18:37:21Z", "is_private": false}, {"count": 8, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 78834, "attachment_id": null, "bug_id": 36293, "creation_time": "2005-08-22T18:45:43Z", "time": "2005-08-22T18:45:43Z", "text": "How come classloaders hold class definitions forever until they are destroyed ?"}, {"count": 9, "tags": [], "text": "Remy, I really don't understand what your objection is all about. What is lost\nby modifying the code to use SoftReferences?\n\nClasses can be kept around forever with a minimal memory impact. Caching the\nunderlying resources on the other hand is a totally different matter as they are\n*much* bigger. I don't think anything is lost by using SoftReferences.", "is_private": false, "id": 78836, "creator": "cowwoc@bbs.darktech.org", "time": "2005-08-22T18:57:10Z", "bug_id": 36293, "creation_time": "2005-08-22T18:57:10Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 36293, "attachment_id": null, "text": "(In reply to comment #9)\n> Remy, I really don't understand what your objection is all about. What is lost\n> by modifying the code to use SoftReferences?\n\nDo you really understand SoftReferences? Quite a lot of the time, a\nSoftReference will be GC'ed as soon as the JVM has to do its first full GC.  For\nmost of our applications, we've found that SoftReferences are GC'ed on an\naverage within minutes or even seconds of losing their last hard reference.", "id": 78843, "time": "2005-08-22T22:49:53Z", "creator": "shankarunni@netscape.net", "creation_time": "2005-08-22T22:49:53Z", "is_private": false}, {"count": 11, "tags": [], "creator": "cowwoc@bbs.darktech.org", "attachment_id": null, "is_private": false, "id": 78844, "time": "2005-08-22T23:01:25Z", "bug_id": 36293, "creation_time": "2005-08-22T23:01:25Z", "text": "Shankar,\n\nFrom the Javadoc:\n\n\"Virtual machine implementations are, however, encouraged to bias against\nclearing recently-created or recently-used soft references.\"\n\nand\n\n\"Thus a sophisticated cache can, for example, prevent its most recently used\nentries from being discarded by keeping strong referents to those entries,\nleaving the remaining entries to be discarded at the discretion of the garbage\ncollector.\"\n\nMemory has to come from somewhere. There is absolutely nothing wrong with\nresource cache entries being removed by GC if it just so happens that these\nreferences are used less often than others in the pool.\n\nI understand your concerns, but I think we can all agree on the following\nuse-case: if a large image resource has not been accessed in over 12 hours, it\nmakes perfect sense to allow it to be garbage collected.\n\nIf you really want to guarantee that resources will remain cached for a minimum\nof X minutes, simply maintain a hard reference to them and after X minutes\nremove the hard reference leaving only SoftReferences in place. I've used this\nmany times in my own code and it works beautifully."}]
[{"count": 0, "tags": [], "creator": "mbm@ptc.com", "attachment_id": null, "id": 135778, "time": "2010-03-29T22:21:59Z", "bug_id": 49021, "creation_time": "2010-03-29T22:21:59Z", "is_private": false, "text": "Sub-builds (antcall, subant) load a task each time the task is defined, but do not release it when the sub-build project completes.  \n\nIt would be best if the sub-build would recognize the task is already loaded, just like it does when the task is loaded within the same project using loaderref.  If it is not feasible to re-use the task in this scenario, then it should be released to avoid sucking up all the available memory very quickly. I think this is only a problem with recent (> 1.5.8) releases of Groovy, since it requires so much PermGen.  You can't give it enough anymore.\n\nThe attached script runs out of memory in about 34 iterations of defining the groovy task within an antcall. \n\nIt can be run as follows, where 3rdparty_libdir is the folder that contains the jars needed for the groovy task:\n  ant -f GroovyMem.xml -Diterations=100 -D3rdparty_libdir=\\3rdPartyJars\\lib\n\nNote: The script uses AntContrib to iterate.\n\nhttp://marc.info/?l=ant-user&m=126970939205980&w=2"}, {"count": 1, "attachment_id": 25209, "bug_id": 49021, "is_private": false, "id": 135779, "time": "2010-03-29T22:29:26Z", "creator": "mbm@ptc.com", "creation_time": "2010-03-29T22:29:26Z", "tags": [], "text": "Created attachment 25209\nAnalysis Script\n\nDemonstrates memory bug with:\n   ant -f GroovyMem.xml -Diterations=100 -D3rdparty_libdir=\\3rdPartyJars\\lib"}, {"count": 2, "tags": [], "creator": "kdgregory@yahoo.com", "text": "I ran into a similar problem. It appears that <taskdef> creates a new classloader every time (makes sense), but uses the J2EE delegation model and doesn't tie that classloader to the task/project that created it (doesn't make sense to me, but there might be a reason). So the classes never get GC'd. A longer writeup is on blog.kdgregory.com, today's date.\n\nThere is a work-around: use Groovy via antlib, just like you're already doing with ant-contrib. Change your <project> element like this:\n\n<project name=\"GroovyMem\" default=\"all\"\n         xmlns:antc=\"antlib:net.sf.antcontrib\"\n         xmlns:groovy=\"antlib:org.codehaus.groovy\">\n\nThen delete all of the <taskdef>s, and refer to the Groovy tasks using the namespace prefix:\n\n   <target name=\"run_groovy\">\n            <groovy:groovy>\n               // do nothing\n            </groovy:groovy>               \n   </target>\n\nNote that you will have to add Groovy to Ant's runtime classpath. My preferred way to do this is with the \"-lib\" command-line option.", "id": 138992, "time": "2010-08-09T07:40:18Z", "bug_id": 49021, "creation_time": "2010-08-09T07:40:18Z", "is_private": false, "attachment_id": null}]
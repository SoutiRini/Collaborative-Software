[{"count": 0, "tags": [], "bug_id": 57771, "text": "Created attachment 32618\nSimple fix\n\nThe cleanup_script function in mod_cgid.c (line 1347 in 2.4.12) initializes req.conn_id to info->r->connection->id when it should be using the saved conn_id in the cleanup_script_info structure. This causes the wrong process (or a nonexistant process) to be cleaned up if the connection ID changes during processing (e.g., due to waiting around).\n\nAttached is a patch for 2.4.12 that fixes this.", "id": 182155, "time": "2015-03-27T17:58:02Z", "creator": "mike@gistnet.com", "creation_time": "2015-03-27T17:58:02Z", "is_private": false, "attachment_id": 32618}, {"count": 1, "tags": [], "bug_id": 57771, "is_private": false, "text": "Created attachment 33706\nSimple fix\n\nUpdated for apache 2.4.18", "id": 189752, "time": "2016-03-28T11:22:56Z", "creator": "nick@linicks.net", "creation_time": "2016-03-28T11:22:56Z", "attachment_id": 33706}, {"count": 2, "attachment_id": null, "creator": "nick@linicks.net", "text": "This issue still exists for 2.4.18.", "id": 189753, "time": "2016-03-28T11:24:15Z", "bug_id": 57771, "creation_time": "2016-03-28T11:24:15Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "covener@gmail.com", "text": "Anyone have an idea about what causes the ID to change? I don't think the pool cleanups should run on a different thread then where the cgid handler ran.", "id": 190584, "time": "2016-04-26T21:24:48Z", "bug_id": 57771, "creation_time": "2016-04-26T21:24:48Z", "tags": [], "is_private": false}, {"count": 4, "text": "(In reply to Eric Covener from comment #3)\n> Anyone have an idea about what causes the ID to change? I don't think the\n> pool cleanups should run on a different thread then where the cgid handler\n> ran.\n\nConnection IDs can change any time the thread is put to sleep, which can happen basically any time Apache is waiting for something (like the output of an #exec). This bug was discovered on an SSI page that had an #exec followed by some #flastmod's. The #exec'ed script doesn't get cleaned up until the end of the page, and either due to load or scheduling issues the page would get handed off to another thread between the #flastmod's and the cleanup (although it could just as easily be handed off during the page generation itself).\n\nNick Warne has a trace showing the problem if you need to see the timing, but the exact timing of the request isn't the problem. The problem is that mod_cgid is using the *current* connection ID (which isn't tied to the existing CGI if the connection gets handed off) instead of using the saved connection ID that was used to create the CGI process.\n\nThis is why info->conn_id exists in the first place. You can see mod_cgid.c use it just 16 lines down from where it incorrectly uses info->r->connection->conn_id (line 1386 in 2.4.18). So when the thread has been handed off, mod_cgid will try to clean up the wrong ID then spit out an error message that refers to a different ID.\n\nThe patch is very simple and obviously correct, and should be applied to trunk. Is there a reason it hasn't been?", "bug_id": 57771, "is_private": false, "id": 190586, "time": "2016-04-26T23:03:41Z", "creator": "mike@gistnet.com", "creation_time": "2016-04-26T23:03:41Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57771, "text": "(In reply to Michael Thorpe from comment #4)\n> (In reply to Eric Covener from comment #3)\n> > Anyone have an idea about what causes the ID to change? I don't think the\n> > pool cleanups should run on a different thread then where the cgid handler\n> > ran.\n> \n> Connection IDs can change any time the thread is put to sleep, which can\n> happen basically any time Apache is waiting for something (like the output\n> of an #exec). \n\nWhile my \"cgid handler\" comment is invalid because this is the INCLUDES filter calling into mod_cgid, I still don't see why there'd be any thread change here.  Can you capture \"trace8\" of this happening for a single request on a provided simple SSI?\n\nFor me, a #exec from an SSI that sleeps for a second runs and cleans up on the same thread and never has a different connection ID, as expected:\n\n[Tue Apr 26 19:36:23.540275 2016] [cgid:trace8] [pid 2561:tid 139709191948032] mod_cgid.c(1385): [client 127.0.0.1:42188] COV: cleanup cid 2 cid 2 pid 2686\n[Tue Apr 26 19:36:24.548188 2016] [cgid:trace8] [pid 2561:tid 139709191948032] mod_cgid.c(1385): [client 127.0.0.1:42188] COV: cleanup cid 2 cid 2 pid 2728\n[Tue Apr 26 19:36:25.556125 2016] [cgid:trace8] [pid 2561:tid 139709191948032] mod_cgid.c(1385): [client 127.0.0.1:42188] COV: cleanup cid 2 cid 2 pid 2730\n[Tue Apr 26 19:36:26.564173 2016] [cgid:trace8] [pid 2561:tid 139709191948032] mod_cgid.c(1385): [client 127.0.0.1:42188] COV: cleanup cid 2 cid 2 pid 2732\n[Tue Apr 26 19:36:27.572111 2016] [cgid:trace8] [pid 2561:tid 139709191948032]\n....\nIndex: modules/generators/mod_cgid.c\n===================================================================\n--- modules/generators/mod_cgid.c       (revision 51728)\n+++ modules/generators/mod_cgid.c       (working copy)\n@@ -1382,6 +1382,7 @@\n         return stat;\n     }\n \n+    ap_log_rerror(APLOG_MARK, APLOG_TRACE8, 0, info->r, \"COV: cleanup cid %lu cid %lu pid %d\", info->r->connection->id, info->conn_id, pid);\n     if (pid == 0) {\n         ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, info->r, APLOGNO(01261)\n                       \"daemon couldn't find CGI process for connection %lu\",", "id": 190588, "time": "2016-04-26T23:41:23Z", "creator": "covener@gmail.com", "creation_time": "2016-04-26T23:41:23Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "mike@gistnet.com", "attachment_id": null, "text": "(In reply to Eric Covener from comment #5)\n> While my \"cgid handler\" comment is invalid because this is the INCLUDES\n> filter calling into mod_cgid, I still don't see why there'd be any thread\n> change here.\n\nAs a simple scenario, assume there are two MPM event threads:\n1) Request A comes in and thread #1 starts handling it.\n2) Request B comes in and thread #2 starts handling it.\n3) Request A creates a CGI using conn_id=1.\n4) Thread #1 puts request A to sleep while it waits for the CGI.\n5) Request C comes in and thread #1 starts handling it (using conn_id=1).\n6) Thread #2 finishes handling request B.\n7) The CGI finishes, and thread #2 picks it up (changing its conn_id to 2) since thread #1 is still handling request C.\n8) Request A finishes and thread #2 enters the cleanup_script function.\n9) Thread #2 stuffs the *current* connection ID (in this case, 2) and asks the daemon for the PID for that conn_id, but that fails because no CGI was created with that conn_id.\n10) Thread #2 prints an error message saying that it couldn't clean up the CGI for conn_id #1, because the error message code is correct even though the daemon-request code is wrong.\n\n> Can you capture \"trace8\" of this happening for a single request on a provided simple SSI?\n\nOn a single request you'll never see the problem.  It's only when the server is loaded that requests can get moved around between threads.", "id": 190590, "time": "2016-04-27T00:53:11Z", "bug_id": 57771, "creation_time": "2016-04-27T00:53:11Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 57771, "attachment_id": null, "is_private": false, "id": 190592, "time": "2016-04-27T01:21:03Z", "creator": "covener@gmail.com", "creation_time": "2016-04-27T01:21:03Z", "text": "\n> 4) Thread #1 puts request A to sleep while it waits for the CGI.\n\nThis bit doesn't make sense to me, but maybe someone else can clarify."}, {"count": 8, "tags": [], "bug_id": 57771, "text": "(In reply to Eric Covener from comment #7)\n> > 4) Thread #1 puts request A to sleep while it waits for the CGI.\n> \n> This bit doesn't make sense to me, but maybe someone else can clarify.\n\nFYI Eric, I see the issue on my NRTG page, which uses a lot of #flastmod.  This small patch totally fixes it up, and I have to apply it manually each new apache release.\n\nNick", "id": 190604, "time": "2016-04-27T15:41:20Z", "creator": "nick@linicks.net", "creation_time": "2016-04-27T15:41:20Z", "is_private": false, "attachment_id": null}, {"count": 9, "text": "(In reply to Nick Warne from comment #8)\n> (In reply to Eric Covener from comment #7)\n> > > 4) Thread #1 puts request A to sleep while it waits for the CGI.\n> > \n> > This bit doesn't make sense to me, but maybe someone else can clarify.\n> \n> FYI Eric, I see the issue on my NRTG page, which uses a lot of #flastmod. \n> This small patch totally fixes it up, and I have to apply it manually each\n> new apache release.\n> \n> Nick\n\nSorry I didn't get back to this. Can you try http://svn.apache.org/viewvc?view=revision&revision=1758083 in your env? It's in the same neighborhood, but I think a different cause (IMO the cause ITT is not known even if the one-liner works.)", "bug_id": 57771, "is_private": false, "id": 193366, "time": "2016-08-27T23:17:49Z", "creator": "covener@gmail.com", "creation_time": "2016-08-27T23:17:49Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 57771, "text": "Fixed in 2.4.25 (no feedback but very similar problem fixed and confirmed)", "id": 195746, "time": "2016-12-31T00:26:15Z", "creator": "covener@gmail.com", "creation_time": "2016-12-31T00:26:15Z", "is_private": false, "attachment_id": null}]
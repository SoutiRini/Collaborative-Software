[{"count": 0, "tags": [], "bug_id": 5380, "attachment_id": null, "id": 8821, "time": "2001-12-12T08:08:47Z", "creator": "sriddell@sct.com", "creation_time": "2001-12-12T08:08:47Z", "is_private": false, "text": "Calls to parse() on a DOMParser appear to randomly block forever, preventing \nthe calling thread from doing any more work.\n\nThis problem has been observed to occurr in a heavily multi-threaded \napplication.\n\nI have replicated it in a small test case (included below) on both Win2k and \nSolaris.  The following logs are from a Solaris run under JDK 1.3.1_01 using \nXerces 1.4.3.  (I have also tried 1.4.4 and observed the same problem.)\n\nThe text.xml can be any xml file whose DOCTYPE references an external DTD \nserved from an http server.  (I have not observed the problem when the DTD is \non the local file system, only when it is on an http server separate from the \nserver running the test.)\n\nThe problem occurs if xml validation is on, or if validation is off, but \nexternal DTD loading is still on.  \n\nThe only reliable way I have found to prevent the problem is to disable both \nvalidation and external DTD loading (features \nhttp://xml.org/sax/features/validation and \nhttp://apache.org/xml/features/nonvalidating/load-external-dtd both set to \nfalse).\n\nI suspect the problem may be related to bug 1965, as it always seems to occurr \nafter the test harness encounters random parse failures.\n\nThe following is the output from a brief test run of XmlTest.  After the output \nlog indicated that a thread appeared to have stalled, I issued a kill to allow \nthe shutdown hook to run and gracefully shutdown the VM.  However, the VM never \nexited, and continued to consume about 50% of the cpu.\n\nUsing \"kill -QUIT\" on the process yielded the following in my log:\n\nThread Thread[Thread-104,5,main] appears to have stalled\nThread Thread[Thread-75,5,main] appears to have stalled\n\nFull thread dump:\n\n\"Thread-150\" prio=5 tid=0xa3778 nid=0xa6 waiting on monitor \n[0xe3281000..0xe32819e0]\n\tat java.lang.Thread.sleep(Native Method)\n\tat XmlTest$1.run(XmlTest.java:85)\n\n\"SIGTERM handler\" daemon prio=10 tid=0xa3648 nid=0xa5 waiting on monitor \n[0xe3381000..0xe33819e0]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Thread.join(Thread.java:930)\n\tat java.lang.Thread.join(Thread.java:983)\n\tat java.lang.Shutdown.runHooks(Shutdown.java:133)\n\tat java.lang.Shutdown.sequence(Shutdown.java:168)\n\tat java.lang.Shutdown.exit(Shutdown.java:213)\n\tat java.lang.Terminator$1.handle(Terminator.java:38)\n\tat sun.misc.Signal$1.run(Signal.java:198)\n\tat java.lang.Thread.run(Thread.java:484)\n\n\"Thread-104\" prio=5 tid=0x1ea788 nid=0x74 waiting for monitor entry \n[0xe6180000..0xe61819e0]\n\tat sun.net.ProgressData.update(ProgressData.java:103)\n\tat sun.net.www.MeteredStream.justRead(MeteredStream.java:45)\n\tat sun.net.www.MeteredStream.skip(MeteredStream.java:81)\n\tat sun.net.www.http.KeepAliveStream.close(KeepAliveStream.java:64)\n\tat sun.net.www.MeteredStream.justRead(MeteredStream.java:40)\n\tat sun.net.www.MeteredStream.read(MeteredStream.java:69)\n\tat org.apache.xerces.utils.ChunkyByteArray.read\n(ChunkyByteArray.java:131)\n\tat org.apache.xerces.readers.UTF8Reader.fillCurrentChunk\n(UTF8Reader.java:2762)\n\tat org.apache.xerces.readers.UTF8Reader.slowLoadNextByte\n(UTF8Reader.java:152)\n\tat org.apache.xerces.readers.UTF8Reader.lookingAtValidChar\n(UTF8Reader.java:292)\n\tat org.apache.xerces.framework.XMLDTDScanner.scanComment\n(XMLDTDScanner.java:972)\n\tat org.apache.xerces.framework.XMLDTDScanner.scanDecls\n(XMLDTDScanner.java:1418)\n\tat org.apache.xerces.framework.XMLDocumentScanner.scanDoctypeDecl\n(XMLDocumentScanner.java:2147)\n\tat org.apache.xerces.framework.XMLDocumentScanner.access$0\n(XMLDocumentScanner.java:2100)\n\tat \n\norg.apache.xerces.framework.XMLDocumentScanner$PrologDispatcher.dispatch\n(XMLDocumentScanner.java:831)\n\tat org.apache.xerces.framework.XMLDocumentScanner.parseSome\n(XMLDocumentScanner.java:381)\n\tat org.apache.xerces.framework.XMLParser.parse(XMLParser.java:1098)\n\tat XmlTest.run(XmlTest.java:33)\n\n\"Thread-75\" prio=5 tid=0x1d7748 nid=0x57 runnable [0xe7e80000..0xe7e819e0]\n\tat java.util.Observable.clearChanged(Observable.java:171)\n\tat java.util.Observable.notifyObservers(Observable.java:138)\n\tat sun.net.ProgressData.update(ProgressData.java:124)\n\tat sun.net.www.MeteredStream.justRead(MeteredStream.java:45)\n\tat sun.net.www.MeteredStream.skip(MeteredStream.java:81)\n\tat sun.net.www.http.KeepAliveStream.close(KeepAliveStream.java:64)\n\tat org.apache.xerces.utils.ChunkyByteArray.close\n(ChunkyByteArray.java:205)\n\tat org.apache.xerces.readers.UTF8Reader.fillCurrentChunk\n(UTF8Reader.java:2770)\n\tat org.apache.xerces.readers.UTF8Reader.slowLoadNextByte\n(UTF8Reader.java:152)\n\tat org.apache.xerces.readers.UTF8Reader.lookingAtValidChar\n(UTF8Reader.java:292)\n\tat org.apache.xerces.framework.XMLDTDScanner.scanComment\n(XMLDTDScanner.java:972)\n\tat org.apache.xerces.framework.XMLDTDScanner.scanDecls\n(XMLDTDScanner.java:1418)\n\tat org.apache.xerces.framework.XMLDocumentScanner.scanDoctypeDecl\n(XMLDocumentScanner.java:2147)\n\tat org.apache.xerces.framework.XMLDocumentScanner.access$0\n(XMLDocumentScanner.java:2100)\n\tat \n\norg.apache.xerces.framework.XMLDocumentScanner$PrologDispatcher.dispatch\n(XMLDocumentScanner.java:831)\n\tat org.apache.xerces.framework.XMLDocumentScanner.parseSome\n(XMLDocumentScanner.java:381)\n\tat org.apache.xerces.framework.XMLParser.parse(XMLParser.java:1098)\n\tat XmlTest.run(XmlTest.java:33)\n\n\"Signal Dispatcher\" daemon prio=10 tid=0xb1a08 nid=0xa waiting on monitor \n[0..0xfae81a48]\n\n\"Finalizer\" daemon prio=5 tid=0xadf60 nid=0x7 waiting on monitor \n[0xfaf81000..0xfaf819e0]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:108)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:123)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:162)\n\n\"Reference Handler\" daemon prio=5 tid=0xac638 nid=0x6 waiting on monitor \n[0xfe281000..0xfe2819e0]\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Object.wait(Object.java:420)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:110)\n\n\"main\" prio=5 tid=0x29170 nid=0x1 waiting on monitor [0xffbee000..0xffbeeeb4]\n\tat java.lang.Thread.sleep(Native Method)\n\tat XmlTest.main(XmlTest.java:106)\n\n\"VM Thread\" prio=5 tid=0xab9d8 nid=0x4 runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0xafda8 nid=0x8 waiting on monitor \n\"Suspend Checker Thread\" prio=10 tid=0xafe60 nid=0x9 runnable \n\n\nShowing that the stalled threads 75 and 104.  Every time I have run this (and \nin my real application as well) has shown a similar stack trace.\n\nThe following is the code I used to replicate the problem (based on the test \nfrom bug report 1965):\n\nimport javax.xml.parsers.*;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.*;\nimport org.apache.xerces.parsers.DOMParser;\nimport java.io.*;\nimport java.util.*;\n\npublic class XmlTest extends Thread {\n  private boolean _stop = false;\n  private String _input;\n  private boolean _isRunning;\n  private static boolean _keepRunning = true;\n\n  private static int _threadCount = 150;\n  private static XmlTest _threads[] = new XmlTest[_threadCount];\n  private static Hashtable _threadMap = new Hashtable();\n\n\n  public XmlTest(String input) {\n    _input = input;\n  }\n\n  public void run() {\n    int i = 0;\n    _isRunning = true;\n    //SAXParser parser = parserFactory.newSAXParser();\n    //XMLReader reader = parser.getXMLReader();\n    \n\n    while (!_stop) {\n      try {\n          DOMParser parser = new DOMParser();\n          parser.parse( new InputSource( new StringReader( _input ) ) );\n          \n      } catch (Exception ex) {\n        ex.printStackTrace( System.out );\n      } finally {\n          _threadMap.put( this, new Long( System.currentTimeMillis() ) );\n      }\n    }\n    _threadMap.remove( this );\n    _isRunning = false;\n  }\n\n    public boolean isRunning() {\n        return _isRunning;\n    }\n\n    public static void main(String[] args) throws Exception {\n        \n        File file = new File( \"test.xml\" );\n        BufferedReader reader = new BufferedReader( new FileReader( file ) );\n        StringBuffer input = new StringBuffer();\n        while (reader.ready()) {\n            input.append( reader.readLine() );\n        }\n    \n    \n        for (int i = 0; i < _threads.length; i++) {\n            _threads[i] = new XmlTest( input.toString() );\n            _threadMap.put( _threads[i], new Long( System.currentTimeMillis\n() ) );\n            _threads[i].start();\n        }\n        System.out.println( \"started \" + _threads.length + \" threads\" );\n        BufferedReader in = new BufferedReader( new InputStreamReader( \nSystem.in ) );\n\n        Runtime.getRuntime().addShutdownHook( new Thread() {\n                    public void run() {\n\n                        System.out.println( \"stopping threads\" );\n                        for (int i = 0; i < _threads.length; i++) {\n                            _threads[i]._stop = true;\n                        }\n                    \n                        boolean isRunning = true;\n                        while (isRunning) {\n                            isRunning = false;\n                            for (int i = 0; i < _threads.length; i++) {\n                                if (_threads[i].isRunning()) {\n                                    isRunning = true;\n                                } else {\n                                    //System.out.println( \"Thread \" + i + \" \nstopped\" );\n                                }\n                            }\n                            try { Thread.currentThread().sleep( 5000 ); } catch \n(InterruptedException e) {}\n                        }\n\n                        _keepRunning = false;\n                        System.out.println( \"All threads stopped\" );\n                    }\n                }\n            );\n\n\n\n        while (_keepRunning) {\n            Hashtable map = (Hashtable) _threadMap.clone();\n            for (Enumeration e = map.keys(); e.hasMoreElements();) {\n                Object key = e.nextElement();\n                Long lastTime = (Long) map.get( key );\n                if (System.currentTimeMillis()-lastTime.longValue() > \n2*60*1000) {\n                    System.out.println( \"Thread \" + key + \" appears to have \nstalled\" );\n                }\n            }\n\n            try { Thread.currentThread().sleep( 30*1000 ); } catch \n(InterruptedException e) {}\n\n        }\n\n        \n\n            \n    }\n}"}]
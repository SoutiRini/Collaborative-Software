[{"count": 0, "tags": [], "bug_id": 35878, "attachment_id": null, "id": 77684, "time": "2005-07-26T22:45:03Z", "creator": "dvanwate@mail.donaldson.com", "creation_time": "2005-07-26T22:45:03Z", "is_private": false, "text": "We are using Batik 1.6. Our Java application GUI uses mutliple JSVGCanvas \ncomponents to render various SVG's to help our users. Depending on the panel \nthat is being displayed, about 2-8 JSVGCanvas components are displayed. During \nthe display of these SVG's we are seeing the Swing GUI lock, completely \nfreezing the application. \n\nI have not tried to reproduce this problem in a test case program as it would \ntake a fair bit of time. Our application instaniates the JSVGCanvas, does a \nsetURI(..), and then adds the panel to a parent panel that is then displayed. \nThis takes place multiple times depending on the number of SVG's being \ndisplayed.\n\nBelow is a partial listing of the thread dump showing the two threads and \nobjects that caused the deadlock. \n\nJava stack information for the threads listed above:\n===================================================\n\"RunnableQueue-5\":\n\tat \norg.apache.batik.bridge.UpdateManager$UpdateManagerRunHander.executionResumed\n(Unknown Source)\n\t- waiting to lock <66b91388> (a org.apache.batik.bridge.UpdateManager)\n\tat org.apache.batik.util.RunnableQueue.executionResumed(Unknown Source)\n\t- locked <66dd01c0> (a org.apache.batik.util.RunnableQueue)\n\tat org.apache.batik.util.RunnableQueue.run(Unknown Source)\n\t- locked <66dd02f0> (a java.lang.Object)\n\tat java.lang.Thread.run(Thread.java:595)\n\"AWT-EventQueue-0\":\n\tat org.apache.batik.util.RunnableQueue.getQueueState(Unknown Source)\n\t- waiting to lock <66dd02f0> (a java.lang.Object)\n\tat org.apache.batik.bridge.UpdateManager.resume(Unknown Source)\n\t- locked <66b91388> (a org.apache.batik.bridge.UpdateManager)\n\tat org.apache.batik.bridge.UpdateManager.interrupt(Unknown Source)\n\t- locked <66b91388> (a org.apache.batik.bridge.UpdateManager)\n\tat org.apache.batik.swing.svg.JSVGComponent.stopProcessing(Unknown \nSource)\n\tat org.apache.batik.swing.svg.JSVGComponent.stopThenRun(Unknown Source)\n\tat org.apache.batik.swing.svg.JSVGComponent.loadSVGDocument(Unknown \nSource)\n\tat org.apache.batik.swing.JSVGCanvas.setURI(Unknown Source)\n\tat \ncom.donaldson.dtools.gui.superwidget.SVGSuperWidgetRenderer.gvtRenderingComplete\nd(SVGSuperWidgetRenderer.java:84)\n\tat org.apache.batik.swing.gvt.GVTTreeRenderer$4.dispatch(Unknown Source)\n\tat org.apache.batik.util.EventDispatcher.dispatchEvent(Unknown Source)\n\tat org.apache.batik.util.EventDispatcher.fireEvent(Unknown Source)\n\tat org.apache.batik.util.EventDispatcher$1.run(Unknown Source)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:199)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:461)\n\tat java.awt.EventDispatchThread.pumpOneEventForHierarchy\n(EventDispatchThread.java:234)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy\n(EventDispatchThread.java:163)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:157)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:149)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:110)\n\nFound 1 deadlock."}, {"count": 1, "tags": [], "creator": "dvanwate@mail.donaldson.com", "attachment_id": 15788, "text": "Created attachment 15788\nFull thread dump showing deadlock in Batik 1.6.", "id": 77685, "time": "2005-07-26T22:48:19Z", "bug_id": 35878, "creation_time": "2005-07-26T22:48:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 35878, "attachment_id": null, "id": 77753, "time": "2005-07-28T11:43:51Z", "creator": "deweese@apache.org", "creation_time": "2005-07-28T11:43:51Z", "is_private": false, "text": "This is interesting.  My analysis is that the fundamental problem is the\nRunnableQueue is calling callbacks while holding important internal locks.\n\nI think the best way to resolve this is to split the synchronize block on \nthe 'stateLock'.  Can you please test my patch to see if this resolves\nthe problem for you?\n"}, {"count": 3, "tags": [], "bug_id": 35878, "attachment_id": 15810, "id": 77754, "time": "2005-07-28T11:46:04Z", "creator": "deweese@apache.org", "creation_time": "2005-07-28T11:46:04Z", "is_private": false, "text": "Created attachment 15810\nPatch to RunnableQueue that should prevent deadlock."}, {"count": 4, "tags": [], "bug_id": 35878, "text": "(In reply to comment #3)\n> Created an attachment (id=15810) [edit]\n> Patch to RunnableQueue that should prevent deadlock.\n\nCould you e-mail me a new jar with the fix in it(In reply to comment #3)\n> Created an attachment (id=15810) [edit]\n> Patch to RunnableQueue that should prevent deadlock.\n\nCould you send me a .jar for 1.6 containing the fix? You can e-mail me or \nattach it to this bug.", "id": 77766, "time": "2005-07-28T16:02:25Z", "creator": "dvanwate@mail.donaldson.com", "creation_time": "2005-07-28T16:02:25Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "dvanwate@mail.donaldson.com", "attachment_id": null, "text": "(In reply to comment #3)\n> Created an attachment (id=15810) [edit]\n> Patch to RunnableQueue that should prevent deadlock.\n\nActually we grabbed the batik1.6src.zip and applied your fix to the source, \nrebuilt, deployed and tested and it appears to fix the problem as the deadlock \nno longer occurs. Thanks.\n\nAny idea about what release of batik will include this fix?", "id": 77780, "time": "2005-07-28T18:05:37Z", "bug_id": 35878, "creation_time": "2005-07-28T18:05:37Z", "is_private": false}]
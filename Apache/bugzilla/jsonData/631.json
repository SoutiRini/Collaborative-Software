[{"count": 0, "attachment_id": null, "creator": "wille@loverbek.de", "is_private": false, "id": 742, "time": "2001-02-16T15:04:35Z", "bug_id": 631, "creation_time": "2001-02-16T15:04:35Z", "tags": [], "text": "Hello,\n\nRequestDispatcher.include creates output in wrong order.\nThe output of my test case should be \"A B C\", but it is \"B A C\".\n\n---- begin test.jsp ----\nA\n\n<%\n  RequestDispatcher rd = application.getRequestDispatcher (\"/test2.jsp\");\n  rd.include (request, response);\t\t\n%>\n\nC\n--- end ---\n\n--- begin test2.jsp ---\nB\n--- end ---\n\n\nThis is probably the same problem as bug #244."}, {"count": 1, "tags": [], "bug_id": 631, "attachment_id": null, "is_private": false, "id": 744, "time": "2001-02-17T07:01:23Z", "creator": "Larry.Isaacs@sas.com", "creation_time": "2001-02-17T07:01:23Z", "text": "This is not a bug.  This is the expected behavior for your test case, i.e when\nusing RequestDispatcher.include() inside a JSP.  The Servlet 2.2 spec states\nthat RequestDispatcher.include() should not do any \"flushing\", leaving that\nup to the application.  The JSP 1.1 spec says that the JspWriter that JSP\npages get by default have buffering enabled.  The JSP 1.1 spec also says\nthat when using <jsp:include ... flush=\"true\" />, the flush=\"true\" is required.\n\nYour test case illustrates why the flush=\"true\" is required.  In your test\ncase, the JspWriter buffers will be flushed at the end of the JSP page.  This\nmeans that test2.jsp's buffer gets flushed before test.jsp's buffer.  Since you\nare not using <jsp:include .../>, but calling RequestDispatcher.include()\ndirectly, it is up to you to call out.flush() before the include operation.  If\nyou don't, you get the result you are seeing."}, {"count": 2, "tags": [], "bug_id": 631, "attachment_id": null, "id": 779, "time": "2001-02-20T00:05:44Z", "creator": "wille@loverbek.de", "creation_time": "2001-02-20T00:05:44Z", "is_private": false, "text": "\nCalling out.flush() before RequestDispatcher.include () does indeed change the\noutput to what I wanted.\n\n\nBut I still think Tomcat's behaviour is a bug. This is why:\n\n1. The servlet spec does not say that a call out.flush() is necessary for\nRequestDispatcher.include () to work as expected.\nInstead it says:\n\n\t8.3 Include\n\n\tThe include method of the RequestDispatcher interface may be \n\tcalled at any time. The target servlet has access to all aspects of\n\tthe request object, but can only write information to the\n\tServletOutputStream or Writer of the response object as will as the\n\tability to commit a response \n\tby either writing content past the end (!!!) of the response buffer \n\tor \n\texplicitly calling the flush method of the ServletReponse interface.\n\t[...]\n\n    \"by writing content past the end of the response buffer\" seems \n    a pretty argument point to me.\n\n2. Calling out.flush will reduce performance, because it will split the output\nin two IP packets:\nThe first will contain \"Content-type: xxxxx....  A\"  and the  second \"B C\".\nI can't imagine that the spec authors want that behaviour.\n\n3. BEA Weblogic 5.1 gets the output right without a call to out.flush ().\n\n4. Why would somebody want the output of RequestDispatcher.include() in front \nof the other output? This behaviour is counter-intuitive.\nSo even if Tomcat's behaviour were conformant (which I doubt), it has a\n\"usability bug\".\n"}, {"count": 3, "tags": [], "text": "This won't be addressed in 3.2.2.  I side with Larry that this probably isn't a \nbug, but if someone wants to run it through servletapi-feedback and get an \nofficial ruling maybe it can be resolved in 3.3. ", "is_private": false, "id": 1336, "creator": "marc.saegesser@apropos.com", "time": "2001-03-16T16:17:57Z", "bug_id": 631, "creation_time": "2001-03-16T16:17:57Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 631, "attachment_id": null, "id": 2024, "time": "2001-04-22T12:08:10Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-04-22T12:08:10Z", "is_private": false, "text": "I think I agree with Wille, regardless of spec wording this behavior is\ncounter-intuitive. I don't think that can be fixed befor jasper refactoring,\nas it requires better communication between tomcat and jasper buffers.\n( it may be possible to fix it with the current jasper - but it's too difficult\nIMHO ). Sorry, I think this will remain open for later."}]
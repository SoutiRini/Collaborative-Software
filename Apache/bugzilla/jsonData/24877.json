[{"count": 0, "tags": [], "bug_id": 24877, "attachment_id": null, "id": 47747, "time": "2003-11-21T04:04:16Z", "creator": "eric@timebytes.com", "creation_time": "2003-11-21T04:04:16Z", "is_private": false, "text": "Using the exec core task, if I set the attribute failonerror to true, ant will \nexit if the executed sub-program returns an error code.  That part is fine.\n\nThe error message displayed does not include anything the sub-program displayed \non the error stream.  \n\nI get: \"/home/esafern/depot/ContentDev/BuildTools/build.xml:868: exec returned: \n2\" - not the most useful of error messages.\n \nThis, I could argue, is a bug right here - it is an error stream, after all. \n\nBut, OK, I should be able to override this behavior as follows:\n\n<exec executable=\"perl\" failonerror=\"no\" errorproperty=\"errorText\">\n <arg line=\"prog.pl\" />\n</exec>\n\n<antcall target=\"failOnError\" />\n\n<!-- failOnError: exit if the errorText property is set -->\n<target name=\"failOnError\" if=\"errorText\">\n <fail message=\"Error: an executed program has returned the following \nerror: '${errorText}'.  Please contact your site\n administrator for further help.\" />\n</target> <!-- failOnError -->\n\nHowever, this doesn't work - the failOnError target is always called.\n\nWhy?\n\nBecause the exec task sets the errorText property, even if the subprogram \nproduces no output on the error stream!\n\nI believe it shouldn't do that.  \n\nThe same logic applies to the outputproperty (which I haven't tested) - then I \ncan take action depending on whether or not the subprogram produced output.  \n\nI realize I could build a condition around <not> <equals arg1=${errorText} \narg2=\"\"></not> - but this seems overly complex."}, {"count": 1, "tags": [], "bug_id": 24877, "attachment_id": null, "id": 47749, "time": "2003-11-21T08:14:14Z", "creator": "stevel@apache.org", "creation_time": "2003-11-21T08:14:14Z", "is_private": false, "text": "What about using the resultproperty to cache the return code, then probing that\nfor being non-zero? It would be a workaround.\n\nOut of curiosity, what it the contents of the errorText property after the exec?\nan empty string? We really ought to consider leaving it unset in such a case."}, {"count": 2, "tags": [], "bug_id": 24877, "is_private": false, "id": 47754, "attachment_id": null, "creator": "conor@apache.org", "creation_time": "2003-11-21T10:33:35Z", "time": "2003-11-21T10:33:35Z", "text": "I'm not sure it is better to leave this unset if there is no output. It is\npossible but does it make sense? Should it apply to output properties as well.\nWhat about people who output the properties after a run\n\n<echo message=\"errors: ${erroroutput}\"/>\n\nThe results for that would be the string ${erroroutput} if it is not set. Maybe\nnot that desirable."}, {"count": 3, "tags": [], "text": "I argree with Conor. Eric is trying to overload the meaning of\nthe errorproperty.\n\nThere is a resultProperty in exec which can be used to see if the\nexec returned a non zero value. (This also always gets set)\n\nOne can also use ant-contrib's trycatch.\n", "attachment_id": null, "id": 47756, "creator": "peter.reilly@corvil.com", "time": "2003-11-21T11:33:25Z", "bug_id": 24877, "creation_time": "2003-11-21T11:33:25Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 24877, "attachment_id": null, "is_private": false, "id": 47758, "time": "2003-11-21T11:50:55Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-21T11:50:55Z", "text": "(fun with beanshelldef : see\nhttp://marc.theaimsgroup.com/?l=ant-dev&m=106577547220771&w=2"}, {"count": 5, "tags": [], "bug_id": 24877, "is_private": false, "id": 47759, "attachment_id": null, "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-21T11:53:02Z", "time": "2003-11-21T11:53:02Z", "text": "Opps I did a send by accidient:\nOne could extend ExecTask with an onerror nested element:\n\n  <target name=\"init\">\n    <bsh:beanshelldef name=\"exec2\" classname=\"Exec2\">\n      import org.apache.tools.ant.taskdefs.condition.Condition;\n      import org.apache.tools.ant.taskdefs.ExecTask;\n      import org.apache.tools.ant.taskdefs.Sequential;\n      public class Exec2 extends ExecTask implements Condition {\n          private boolean runOk = false;\n          private Sequential onError;\n          protected void maybeSetResultPropertyValue(int result) {\n             super.maybeSetResultPropertyValue(result);\n             runOk = (result == 0);\n         }\n         public void addOnError(Sequential onError) {\n             this.onError = onError;\n         }\n         public boolean eval() {\n             execute();\n             return runOk;\n         }\n         public void execute() {\n             super.execute();\n             if (!runOk &amp;&amp; onError != null) {\n                onError.perform();\n             }\n         }\n      }\n    </bsh:beanshelldef>\n  </target>\n\nand use it like so:\n\n  <target name=\"onerror\" depends=\"init\">\n    <exec2 executable=\"sh\"\n           errorproperty=\"sh.error.output\"\n           failonerror=\"false\">\n      <arg value=\"error.sh\"/>\n      <onError>\n        <echo>exec failed with error output: ${sh.error.output}</echo>\n      </onError>\n    </exec2>\n  </target>\n"}, {"count": 6, "tags": [], "bug_id": 24877, "is_private": false, "id": 47824, "attachment_id": null, "creator": "eric@timebytes.com", "creation_time": "2003-11-21T18:00:26Z", "time": "2003-11-21T18:00:26Z", "text": "Well, I like the OnError idea.\n\nChecking the return value works, but a) it's an ugly block of code needed after \neach and every exec and b) The ant documentation goes out of it's way to say \nthat the definition of 'return code specifying failure' is OS-specific. This \nmakes my code OS dependent, by making explicit that a non-zero return specifies \nfailure.\n\nIn answer to Steve, yes - the errorText property is an empty string but set.\n\nFinally, no one picked up on my first suggestion (perhaps not very clear).  If \nyou set failonerror=\"yes\", the errror message returned should quote the error \nmessage returned by the sub-program, and return the error code - rather than \njust telling me the error code as it does now.\n"}, {"count": 7, "tags": [], "bug_id": 24877, "attachment_id": null, "id": 47874, "creation_time": "2003-11-21T21:54:39Z", "time": "2003-11-21T21:54:39Z", "creator": "eric@timebytes.com", "text": "OK, here's an update: the suggestion to set a property based on the return \nvalue doesn't work when you're execing more than one sub-program.\n\nWhy?\n\nBecause of the way Ant properties work - they're immutable.  So after the first \nexec call, execError and errorText are both set and can't be changed! I suppose \nI could bury each exec call in an ant task that I <antcall> - but where does \nthe ugliness end??\n\n", "is_private": false}, {"count": 8, "tags": [], "bug_id": 24877, "attachment_id": null, "id": 48027, "time": "2003-11-24T17:43:39Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-24T17:43:39Z", "is_private": false, "text": "I do not think that this is a bug.\nIf the command generates output on the error stream, ant\nwill display this output.\nThe user/build script author may suppress this output\nby using the \"outputproperty\" or the \"errorproperty\" attributes.\n(if \"outputproperty\" is sprecified by itself, it will have contain\nerror and std output).\n\nDisplaying the error output despite the user specifing otherwise would\nin my opinion be an error.\n"}, {"count": 9, "tags": [], "bug_id": 24877, "attachment_id": null, "is_private": false, "id": 48036, "time": "2003-11-24T18:21:38Z", "creator": "eric@timebytes.com", "creation_time": "2003-11-24T18:21:38Z", "text": "You could say the same thing about the resultproperty, which *is* displayed \nwhen the failonerror is enabled (despite the user's setting or non-setting of \nthis property).  That's why the manual says \"Only of interest if \nfailonerror=false.\" If we did the same thing with errorproperty, we could add \nthe same line to the manual by errorproperty as well.\n\nThe bottom line is that I need some reasonable way to display the error message \nwhen the execed subprogram fails!  I have yet to hear any way to do this, short \nof having a dedicated property and a dedicated target for *each* call to exec:\n\n\n<exec executable=\"perl\" failonerror=\"no\" errorproperty=\"eP1\" \nresultproperty=\"rP1\">\n  <arg line=\"Prog1.pl\" />\n</exec>\n\n<condition property=\"execFailed1\">\n  <not>\n    <equals arg1=\"${rp1}\" arg2=\"0\" />\n  </not>\n</condition>\n\n<antcall target=\"failOnError1\" />\n\n<target name=\"failOnError1\" if=\"execFailed1\">\n  <fail message=\"Error: an executed program has returned the following \nerror: '${eP1}'.  Please contact your site\n administrator for further help.\" />\n</target> <!-- failOnError1 -->\n\n\n<exec executable=\"perl\" failonerror=\"no\" errorproperty=\"eP2\" \nresultproperty=\"rP2\">\n  <arg line=\"Prog2.pl\" />\n</exec>\n\n<condition property=\"execFailed2\">\n  <not>\n    <equals arg1=\"${rp2}\" arg2=\"0\" />\n  </not>\n</condition>\n\n<antcall target=\"failOnError2\" />\n\n<target name=\"failOnError2\" if=\"execFailed2\">\n  <fail message=\"Error: an executed program has returned the following \nerror: '${eP2}'.  Please contact your site administrator for further help.\" />\n</target> <!-- failOnError2 -->\n\nrepeated again and again.  That's 12 lines of noise to 3 lines of useful code.\n\nAnd talk about subtle bugs - what do you think will happen if the programmer \nscrews up his cut-and-paste and leaves a '3' when he needed a '4?'  Good luck \ncatching that in the testing process!!!\n\n\n"}]
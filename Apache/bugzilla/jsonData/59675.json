[{"count": 0, "tags": [], "bug_id": 59675, "text": "The exact version we're running with right now is 3.14-beta2.\n\nOriginally reported on 53494 as a NPE, but the new code doesn't produce the right result anyway, so I'm reporting it again.\n\n    @Test\n    public void testCellFormatWithChineseDateFormat() throws Exception\n    {\n        // -804 here means Chinese.\n        CellFormat format = CellFormat.getInstance(\n            \"[$-804]mmmm dd yyyy  h:mm AM/PM\");\n\n        // Substitute whatever way you want to create the Date.\n        // I left our test utilities and joda in the example.\n        Date date = new DateTime(1973, 11, 27, 11, 28, 0,\n                                 DateTestUtils.SYDNEY_TIME).toDate();\n\n        // Since the format said to use Chinese, we expect Chinese.\n        assertThat(\n            format.apply(date).text,\n            is(equalTo(\"\u5341\u4e00\u6708 27 1973  11:28 \u4e0a\u5348\")));\n    }\n\nThis fails because the locale is presumably ignored:\n\n    Expected :\u5341\u4e00\u6708 27 1973  11:28 \u4e0a\u5348\n    Actual   :November 27 1973  11:28 AM\n\nAnother developer noted that if you add this at the start of the text:\n\n        LocaleUtil.setUserLocale(Locale.SIMPLIFIED_CHINESE);\n\n(I would prefer a way to set the user locale which doesn't involve a static method, though, as static methods have a habit of poisoning later tests which run in unexpected ways. But setting that aside...)\n\nWith this, it does generate Chinese, but with a quirk where it seemingly replaces the last character with an M:\n\n    Expected :\u5341\u4e00\u6708 27 1973  11:28 \u4e0a\u5348\n    Actual   :\u5341\u4e00\u6708 27 1973  11:28 \u4e0aM\n\nI tracked this particular quirk down to CellDateFormatter which has some really baffling code going on.\n\n            } else if(it1.getAttribute(Field.AM_PM) != null) {\n                if(!doneAm1) {\n                    if(this.showAmPm) {\n                        if(this.amPmUpper) {\n                            toAppendTo.append(Character.toUpperCase(ch1));\n                            if(this.showM) {\n                                toAppendTo.append('M');\n                            }\n                        } else {\n                            toAppendTo.append(Character.toLowerCase(ch1));\n                            if(this.showM) {\n                                toAppendTo.append('m');\n                            }\n                        }\n                    }\n\n                    doneAm1 = true;\n                }\n            }\n\nIf I breakpoint before this code runs, the current contents of the buffer is exactly the expected result, and then this code goes and stamps an M at the end. (lol)\n\nIdeally though I should not even have to set the user locale to get this test to pass. The cell format itself contains the locale which should be used to format the value, so that should be used.", "id": 191474, "time": "2016-06-09T07:18:24Z", "creator": "trejkaz@trypticon.org", "creation_time": "2016-06-09T07:18:24Z", "is_private": false, "attachment_id": null}]
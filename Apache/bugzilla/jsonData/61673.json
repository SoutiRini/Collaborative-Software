[{"count": 0, "tags": [], "bug_id": 61673, "attachment_id": null, "id": 201708, "time": "2017-10-27T05:13:53Z", "creator": "thiru.jdev@gmail.com", "creation_time": "2017-10-27T05:13:53Z", "is_private": false, "text": "Exception in thread \"https-openssl-apr-8443-exec-178\" java.util.ConcurrentModificationException\n\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)\n\tat java.util.HashMap$ValueIterator.next(HashMap.java:1466)\n\tat org.apache.coyote.http2.Http2UpgradeHandler.close(Http2UpgradeHandler.java:943)\n\tat org.apache.coyote.http2.Http2UpgradeHandler.closeConnection(Http2UpgradeHandler.java:483)\n\tat org.apache.coyote.http2.Stream.close(Stream.java:600)\n\tat org.apache.coyote.http2.StreamProcessor.process(StreamProcessor.java:85)\n\tat org.apache.coyote.http2.StreamRunnable.run(StreamRunnable.java:35)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\nConcurrentModificationException is thrown when trying to push around 1000 resources from a servlet. Note, this issue is not consistently reproducible.\n\nSteps to reproduce:\n1. Access the demo.html (details provided below) over http and it works fine \n2. Keep the browser open and idle for few mins (i tried the next request after 5 mins)\n3. Then try to invoke the demo servlet (details provided below) over https, you can now see the concurrent-modification-exception in tomcat log\n  \n\nEnvironment:\n    Tomcat 9.0.1\n    JDK 8 update 131\n    tomcat-native-1.2.14-win32-bin (64bit)\n    Firefox 56 (64bit)\n\nEnabled HTTP/2 using the below configuration\n\n <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\" >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"certs/ca.key\"\n                         certificateFile=\"certs/ca.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n\nCode snippet to reproduce the issue (DemoServlet doGet method)\n\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tPushBuilder pb = request.newPushBuilder();\n\t\tfor(int i=0;i<1000;i++) {\n\t\t\tString image = \"image-\"+i+\".png\";\n\t\t\tpb.path(\"/images/\"+image);\n\t\t\tpb.push();\n\t\t}\n\t\trequest.getRequestDispatcher(\"/demo.html\").include(request, response);\n\t}\n\ndemo.html is a simple html file with a list of 1000 image tags."}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Does making Http2UpgradeHandler.streams a ConcurrentHashMap help ?", "id": 201881, "time": "2017-11-03T14:48:51Z", "bug_id": 61673, "creation_time": "2017-11-03T14:48:51Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61673, "attachment_id": null, "text": "What appears to be happening is that while the resources are being pushed, something goes wrong and the connection is closed. The connection close process iterates over the existing streams and resets them. That is going to result in concurrent access to the streams HashMap. Switching to the concurrent implementation will fix this issue. It is possible that fixing this may expose other concurrency issues. If it does, please open new bugs for them.", "id": 202160, "time": "2017-11-15T21:39:02Z", "creator": "markt@apache.org", "creation_time": "2017-11-15T21:39:02Z", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "text": "Fixed in:\n- trunk for 9.0.2 onwards\n- 8.5.x for 8.5.24 onwards", "id": 202161, "time": "2017-11-15T21:44:29Z", "bug_id": 61673, "creation_time": "2017-11-15T21:44:29Z", "is_private": false, "attachment_id": null}]
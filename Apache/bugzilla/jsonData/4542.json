[{"attachment_id": null, "tags": [], "bug_id": 4542, "is_private": false, "count": 0, "id": 7366, "time": "2001-10-31T07:57:57Z", "creator": "pduffin@volantis.com", "creation_time": "2001-10-31T07:57:57Z", "text": "If you jsp:include a page which throws an exception and the handles it the\nrest of the including page is still processed, although it does not generate\nany extra output. If the included page does not handle the exception then\nthe including page handles it which stops the rest of the page from being\nprocessed.\n\nIf the jsp:include is done from inside a custom tag then on return from \nprocessing the included page the BodyContent of the tag has been closed \n(by ApplicationDispatcher.doForward) which means that any attempt to use\nit will fail, probably with a NullPointerException.\ne.g.  out.write (...) after returning from include throws this\n\njava.lang.NullPointerException\n    at java.lang.System.arraycopy(Native Method)\n    at java.lang.String.getChars(String.java:553)\n    at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)\n    at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)\n    at org.apache.jsp.IncludeTest3$jsp._jspService(IncludeTest3$jsp.java:204)"}, {"count": 1, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "id": 7496, "creation_time": "2001-11-02T13:54:51Z", "time": "2001-11-02T13:54:51Z", "bug_id": 4542, "text": "I am not sure I understand what the problem is.  Are you saying that if you have\na <jsp:include> inside the body of a custom tag, and you do a out.write () after\nthat, you get an exception?  Please give a test case, something concrete that I\ncan verify.  Thanks.", "is_private": false}, {"count": 2, "tags": [], "bug_id": 4542, "attachment_id": 760, "id": 7525, "time": "2001-11-05T02:36:43Z", "creator": "pduffin@volantis.com", "creation_time": "2001-11-05T02:36:43Z", "is_private": false, "text": "Created attachment 760\nTestcase for this problem, see README in the tar file."}, {"attachment_id": null, "tags": [], "bug_id": 4542, "is_private": false, "count": 3, "id": 7526, "time": "2001-11-05T02:37:49Z", "creator": "pduffin@volantis.com", "creation_time": "2001-11-05T02:37:49Z", "text": "Untar the attached testcase.tar into your webapps directory and\nread the README.\n\nHope that makes it clear enough.\n\n"}, {"count": 4, "tags": [], "text": "Fixed in 20011205 nightly build.", "is_private": false, "bug_id": 4542, "id": 8607, "time": "2001-12-05T10:26:42Z", "creator": "kin-man.chung@sun.com", "creation_time": "2001-12-05T10:26:42Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 4542, "text": "I have tested this and the test case I supplied does work as I expected it too.\nUnfortunately I think that my expectations were wrong.\n\nIf an error occurs in the included page my test case expected the error page\nin the included page to be used but I think that the test page in the included\npage should be ignored and the exception should be passed up to the top level\npage which should handle it.\n\nThe Servlet 2.3 specification states in SRV.9.9.2 error pages\n  \"The error page mechanism described does not intervene when errors occur in\n   servlets invoked using the RequestDispatcher. In this way, a servlet using\n   the RequestDispatcher to call another servlet has the opportunity to handle\n   errors generated in the servlet it calls.\"\n\nThe JSP specification does not cover this situation though so it is probably\nopen to interpretation although the reasoning behind the statement in the\nservlet specification.", "id": 8660, "time": "2001-12-06T03:21:29Z", "creator": "pduffin@volantis.com", "creation_time": "2001-12-06T03:21:29Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 4542, "attachment_id": null, "id": 8661, "time": "2001-12-06T03:40:31Z", "creator": "pduffin@volantis.com", "creation_time": "2001-12-06T03:40:31Z", "is_private": false, "text": "<continued from above>... seems quite reasonable. The including page knows that\nit is including another page and so can make sure that the error page can cope\nwith an error from the included page but the included page does not know whether\nor not it is included inside another page or not so its error page might not\nprovide enough information.\n\nI am not sure if this is related or is a new bug but the default error page\nprocessing does not seem to be working. A JSP page which throws an exception\nbut does not have an error page specified results in a\n\t\"Document contained no data.\"\nmessage from Netscape.\n\nIf this is a new bug and not related to this one then could you let me know\nwhether there is a bug open on this already and if so what its number is and\nif not I will open a new one."}, {"count": 7, "tags": [], "text": "Let me use a specific example to make sure I understand what you are talking\nabout.  A.jsp includes B.jsp, and the errorPage for A.jsp is A.err.jsp, and that\nfor B.jsp is B.err.jsp.  An exception is thrown in B.jsp, and you expect the\nexception to be handled by A.err.jsp (not B.err.jsp).\n\nI do not agree.  It is certainly not the way Java exceptions work, where\nexceptions handlers are searched in the called method first, and then in calling\nmethods; but once a handler is found in the called method, the exception is\nconsidered handled, and the handlers in the calling mehtod are not considered. \nThe current Jasper is structured in such a way, and I suspect it would be hard\nto do it the other way.\n\nI have seen the \"Document contains no data\" in other context before, but thought\nwas fixed.  Go ahead and file a bug if it happens again.\n", "attachment_id": null, "id": 8678, "creator": "kin-man.chung@sun.com", "time": "2001-12-06T10:53:55Z", "bug_id": 4542, "creation_time": "2001-12-06T10:53:55Z", "is_private": false}, {"count": 8, "attachment_id": null, "creator": "pduffin@volantis.com", "is_private": false, "id": 8687, "time": "2001-12-07T06:59:04Z", "bug_id": 4542, "creation_time": "2001-12-07T06:59:04Z", "tags": [], "text": "What about the inconsistency between servlets and JSP which are really just\nServlets themselves ? As I mentioned above the Servlet specification clearly\nstates that error pages are not used if the servlet in which the exception\noccurs has been called from another servlet using the RequestDispatcher,\ninstead it goes back to the top level servlet which handled the original\nrequest.\n"}, {"count": 9, "tags": [], "text": "The servlet error page specified in the deployment descriptor is a global error\nhandler, whereas the error page specified in a jsp page directive is error\nhandler local to the page.  Therefore the servlet spec does not apply to a JSP\npage, which has it own rules governing errors.  Section JSP 2.4.2 states,\n\n\"Any uncaught exceptions thrown in the body of the JSP page implementation class\nresult in the fowarding of the client request and uncaught exception to the\nerrorPage URL specified by the JSP page (or the implementation default behavior,\nif none is specified).\"\n\nIt clearly indicates that errors occur in a page should be handled by its\nerrorPage, if specified.  In fact, the error page specified in the servlet\ndeployment descriptor need not be used, even if an errorPage is not specified in\na JSP page, since the \"implementation default behavior\" may choose to just\nreport the error without setting the error code in the response.", "attachment_id": null, "bug_id": 4542, "id": 8763, "time": "2001-12-10T18:32:33Z", "creator": "kin-man.chung@sun.com", "creation_time": "2001-12-10T18:32:33Z", "is_private": false}, {"text": "Thanks for the clarification. I have put the bug into FIXED state which I hope\nis the right thing to do. As far as I am concerned the bug that I raised has\nbeen fixed.", "tags": [], "creator": "pduffin@volantis.com", "is_private": false, "count": 10, "id": 8769, "time": "2001-12-11T04:13:49Z", "bug_id": 4542, "creation_time": "2001-12-11T04:13:49Z", "attachment_id": null}]
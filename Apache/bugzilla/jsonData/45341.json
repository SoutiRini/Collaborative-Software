[{"count": 0, "tags": [], "bug_id": 45341, "attachment_id": null, "id": 118291, "time": "2008-07-04T05:16:13Z", "creator": "JKirschner@firma.seznam.cz", "creation_time": "2008-07-04T05:16:13Z", "is_private": false, "text": "I'm running apache 2.2.3 as a caching reverse proxy (proxy.aa) to another server (server.aa). The problem appears when sending requests without If-Modified-Since present - the response shouldn't be 304.\n\nFirst, I send a request:\ntelnet proxy.aa 8312\nGET http://server.aa/request HTTP/1.1\nHost: server.aa\n\nthe proxy forwards to the server:\n\nGET /request HTTP/1.1\n\nHost: server.aa\n\nMax-Forwards: 10\n\nX-Forwarded-For: a.a.a.a\n\nX-Forwarded-Host: server.aa\n\nX-Forwarded-Server: proxy.aa\n\nConnection: Keep-Alive\n\n\n\nand receives (still everything OK):\nHTTP/1.1 200 OK\n\nDate: Fri, 04 Jul 2008 08:50:15 GMT\n\nExpires: Fri, 04 Jul 2008 08:52:25 GMT\n\nLast-Modified: Fri, 04 Jul 2008 08:43:47 GMT\n\nCache-Control: max-age=130\n\nServer: Server/2.3.1-1 (Unix, VB)\n\nAllow: GET,HEAD\n\nAccept-Ranges: none\n\nContent-Type: image/jpeg; charset=utf-8\n\nContent-Length: 3102\n\nConnection: close\n..... THE CONTENT ....\n\nSo the situation is: the proxy cached this request with max age 130s (2:10) and for every following 'request' doesn't forward and uses the cached result for 2 minutes. but than I send another request:\n\ntelnet proxy.aa 8312\nGET http://server.aa/creative?bannerId=618167&seqNo=4&set=sec HTTP/1.1\nHost: server.aa\n\nand proxy.aa forwards to server.aa:\n\nGET /request HTTP/1.1\n\nHost: server.aa\n\nIf-Modified-Since: Fri, 04 Jul 2008 08:43:47 GMT\n\nMax-Forwards: 10\n\nX-Forwarded-For: 10.0.2.236\n\nX-Forwarded-Host: server.aa\n\nX-Forwarded-Server: proxy.aa\n\nConnection: Keep-Alive\n\n\n\nthe server returns 304, because the content is still the same:\n\nHTTP/1.1 304 Not modified\n\nDate: Fri, 04 Jul 2008 08:52:25 GMT\n\nServer: Server/2.3.1-1 (Unix, VB)\n\nAllow: GET,HEAD\n\nAccept-Ranges: none\n\nConnection: close\n\nand I receive:\n\nHTTP/1.1 304 Not modified\nDate: Fri, 04 Jul 2008 08:52:37 GMT\nServer: Server/2.3.1-1 (Unix, VB)\n\nWhich is, I think, an error - from the client point of view. Client sends a non-conditional request and receives 304 - not modified. How is this possible?\n\nThe only idea, I've got is, that it is caused by missing Expires: or Cache-Control: max-age= in response from server.aa. But still, a 304 response on request without If-Modified-Since command.\n\nThe proxy (incomplete) configuration:\nListen 8312\n\nLoadModule authz_default_module /usr/lib/apache2/modules/mod_authz_default.so\nLoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so\nLoadModule cache_module /usr/lib/apache2/modules/mod_cache.so\nLoadModule disk_cache_module /usr/lib/apache2/modules/mod_disk_cache.so\nLoadModule mime_module /usr/lib/apache2/modules/mod_mime.so\nLoadModule mime_magic_module /usr/lib/apache2/modules/mod_mime_magic.so\nLoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so\nLoadModule proxy_connect_module /usr/lib/apache2/modules/mod_proxy_connect.so\nLoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so\nLoadModule setenvif_module /usr/lib/apache2/modules/mod_setenvif.so\nLoadModule forwardedfor_module /usr/lib/apache2/modules/mod_forwardedfor.so\n\nUseCanonicalName Off\n\nCacheRoot /home/xxxxxxxx\nCacheEnable disk /creative\nCacheDirLevels 5\nCacheDirLength 3\nCacheDefaultExpire 3600\n\nProxyTimeout 1\n\n\nNameVirtualHost *:8312\n\n<VirtualHost *:8312>\n    ProxyPass / http://server.aa:80/\n</VirtualHost>"}, {"count": 1, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "Works fine, when the server.aa sends Expires: xxxx in the 304 respose - proxy.aa returns 200 and the cached content. But still...", "id": 118296, "time": "2008-07-04T06:37:58Z", "creator": "JKirschner@firma.seznam.cz", "creation_time": "2008-07-04T06:37:58Z", "is_private": false}, {"count": 2, "tags": [], "creator": "nathan@technically.us", "attachment_id": null, "id": 118600, "time": "2008-07-13T10:34:26Z", "bug_id": 45341, "creation_time": "2008-07-13T10:34:26Z", "is_private": false, "text": "I'm also experiencing this bug, using Apache/2.2.8  with mod_cache and mod_disk_cache over an AJP reverse proxy of an Apache Wicket application; Wicket does not set Expire headers when responding with 304 (which works fine without the cache on). Here is my TCP trace:\n\n-------\nGET /resources/com.typeturner.Typeturner/image?name=kitchen1 HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_4; en-us) AppleWebKit/525.18 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1\nCache-Control: max-age=0\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nCookie: Typeturner_USER=nathan; Typeturner_AUTH=xxxx; JSESSIONID=xxxx\nConnection: keep-alive\nHost: technically.us\n\nHTTP/1.1 304 NOT_MODIFIED\nDate: Sun, 13 Jul 2008 13:23:28 GMT\nServer: Server: Jetty(6.0.x)\nConnection: Keep-Alive\nKeep-Alive: timeout=15, max=100\nVary: Accept-Encoding\n-------\n\nHowever, this failing behavior only seems to occur when a query string is present in the URL. Otherwise, mod_cache seems to perform an unconditional GET on the proxied server, and pass along that response to the client:\n\n-------\nGET /resources/org.apache.wicket.Application/eat-photo HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_4; en-us) AppleWebKit/525.18 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1\nCache-Control: max-age=0\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nCookie: Typeturner_USER=nathan; Typeturner_AUTH=xxxx; JSESSIONID=xxxx\nConnection: keep-alive\nHost: technically.us\n\nHTTP/1.1 200 OK\nDate: Sun, 13 Jul 2008 14:44:56 GMT\nServer: Server: Jetty(6.0.x)\nExpires: Sun, 20 Jul 2008 14:44:14 GMT\nCache-Control: max-age=604800\nVary: Accept-Encoding\nContent-Encoding: gzip\nLast-Modified: Wed, 09 Jul 2008 12:22:57 GMT\nContent-Length: 40831\nKeep-Alive: timeout=15, max=100\nConnection: Keep-Alive\nContent-Type: image/jpeg\n[....]\n-------\n\nTo work around the problem, I've patched Wicket to set an Expires header when responding with 304 and I'll offer that to the project as an improvement, but I do think mod_cache is behaving incorrectly."}, {"count": 3, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "(In reply to comment #1)\n> Works fine, when the server.aa sends Expires: xxxx in the 304 respose -\n> proxy.aa returns 200 and the cached content. But still...\n> \n\nDo your requests contain query strings like the ones of the second reporter?", "id": 118604, "time": "2008-07-13T12:06:19Z", "creator": "rpluem@apache.org", "creation_time": "2008-07-13T12:06:19Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45341, "attachment_id": null, "id": 118605, "time": "2008-07-13T12:17:34Z", "creator": "rpluem@apache.org", "creation_time": "2008-07-13T12:17:34Z", "is_private": false, "text": "(In reply to comment #2)\n> I'm also experiencing this bug, using Apache/2.2.8  with mod_cache and\n> mod_disk_cache over an AJP reverse proxy of an Apache Wicket application;\n> Wicket does not set Expire headers when responding with 304 (which works fine\n> without the cache on). Here is my TCP trace:\n> \n\nThis is somehow an error of Wicket. Why?\nBecause requests with query strings are only cacheable if the response contains an expires date. So I can only think of the following situation in your case:\n\n1. Request with query string is not cached\n2. Response is 200 and contains expire date => Request/response is cached.\n3. Subsequent request within the expiration time are served without problems\n   as mod_cache does not sent conditional requests to the backend.\n4. After the expiration date if passed mod_cache sents a *conditional* request to  \n   the backend even if the original request was unconditional.\n5. The response is 304 *without* expiration date, which tells the cache that the \n   cached response is unusable and needs to be ejected.\n\nThis is an error of wicket as a 304 response should contain all headers that are relevant for caching.\n\nThe cache is in a problematic situation here:\n\n1. Sending a 304 is wrong, because the original request was unconditional.\n2. Serving the contents from the cache is not allowed since the backend told the\n   cache that the current contents of the cache is invalid without delivering\n   new content."}, {"count": 5, "tags": [], "bug_id": 45341, "attachment_id": null, "id": 118608, "time": "2008-07-13T14:44:20Z", "creator": "nathan@technically.us", "creation_time": "2008-07-13T14:44:20Z", "is_private": false, "text": "(Jan does appear to be requesting also with a query string, http://server.aa/creative?bannerId=618167&seqNo=4&set=sec)\n\nYes, that is the sequence I have figured. But I'm not sure that the 304 response without an Expires header is strictly erroneous. If that is clear in the protocol I can file it as a bug in Wicket instead of an improvement, but I haven't been able to find anything definitive.\n\nI don't see how a plain 304 \"tells the cache that the cached response is unusable and needs to be ejected\". The cache has asked the back end if the resource has changed since a date. The answer is no, and the cache would do better to serve what it has. Relaying the 304 brings about a definite client error condition that would not have occurred without the cache."}, {"count": 6, "tags": [], "bug_id": 45341, "text": "(In reply to comment #5)\n> (Jan does appear to be requesting also with a query string,\n> http://server.aa/creative?bannerId=618167&seqNo=4&set=sec)\n> \n> Yes, that is the sequence I have figured. But I'm not sure that the 304\n> response without an Expires header is strictly erroneous. If that is clear in\n> the protocol I can file it as a bug in Wicket instead of an improvement, but I\n> haven't been able to find anything definitive.\n> \n> I don't see how a plain 304 \"tells the cache that the cached response is\n> unusable and needs to be ejected\". The cache has asked the back end if the\n\nThis is because of 13.9 in RFC2616\n\n> resource has changed since a date. The answer is no, and the cache would do\n\nThe resource hasn't changed, but its metadata has as no expires header is\ndelivered anymore.\n\n\n\n", "id": 118613, "time": "2008-07-14T00:21:10Z", "creator": "rpluem@apache.org", "creation_time": "2008-07-14T00:21:10Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "I know about 13.9, but I don't see where it says that all previous headers must be discarded. I do see that they must be updated if present, in 10.3.5: \"If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response.\" But there aren't any new field values given.\n\nSection 13.9.4, in talking about max-age=0 which is specifically where I'm having the problem, says simply \"If the server replies with 304 (Not Modified), then the cache can return its now validated copy to the client with a 200 (OK) response.\" \n\nThere is (always) some ambiguity, but I don't see why mod_cache would choose to interpret the back-end server's plain 304 as a request to nullify the cached Expires header to make the resource retroactively uncacheable. And even if that were the best way to read the situation, 10.3.5 tells you how to recover from a similar problem: \"If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.\"", "id": 118622, "time": "2008-07-14T05:57:57Z", "creator": "nathan@technically.us", "creation_time": "2008-07-14T05:57:57Z", "is_private": false}, {"count": 8, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 118652, "time": "2008-07-14T08:49:33Z", "bug_id": 45341, "creation_time": "2008-07-14T08:49:33Z", "is_private": false, "text": "(In reply to comment #7)\n> I know about 13.9, but I don't see where it says that all previous headers must\n> be discarded. I do see that they must be updated if present, in 10.3.5: \"If a\n\nOk I guess I wasn't clear in my explanation. I did not say that previous headers must be discarded. The only reason I can image why the cache did a conditional request on the backend in this situation is because the cached entity passed the expiration date given in the cached response expires header.\nSo the initial check of the cache on the entity reveals that it is not fresh\nenough any longer to serve directly and the freshness check with the backend\ndelivers a response that makes this object no longer cachable as there is no expiration date for a request with args.\n\n> cache uses a received 304 response to update a cache entry, the cache MUST\n> update the entry to reflect any new field values given in the response.\" But\n> there aren't any new field values given.\n> \n> Section 13.9.4, in talking about max-age=0 which is specifically where I'm\n> having the problem, says simply \"If the server replies with 304 (Not Modified),\n> then the cache can return its now validated copy to the client with a 200 (OK)\n> response.\" \n> \n> There is (always) some ambiguity, but I don't see why mod_cache would choose to\n> interpret the back-end server's plain 304 as a request to nullify the cached\n> Expires header to make the resource retroactively uncacheable. And even if that\n> were the best way to read the situation, 10.3.5 tells you how to recover from a\n> similar problem: \"If a 304 response indicates an entity not currently cached,\n> then the cache MUST disregard the response and repeat the request without the\n> conditional.\"\n> \n\nThis seems like a solution, but I guess it might be difficult to implement. So probably expect no quick solution when going down this path.\n\n"}, {"count": 9, "tags": [], "bug_id": 45341, "text": "\"The only reason I can image why the cache did a conditional request on the backend in this situation is because the cached entity passed the expiration date given in the cached response expires header.\"\n\nIt hasn't passed the expiration time it my testing. I would say it's requesting a refresh because Safari specified \"max-age:0\", and mod_cache is discarding the known, future expiration time. That is the first thing I would fix, and then the recovery procedure for when the expiration date has passed. (I never expect quick resolutions, or any resolutions, unless I'm providing a patch and it's small, so no worries there. I'm just trying to document the existing behavior and determine what would be the best correct behavior, for other people that run into the problem or that might want to fix it.)", "id": 118655, "time": "2008-07-14T09:39:01Z", "creator": "nathan@technically.us", "creation_time": "2008-07-14T09:39:01Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "JKirschner@firma.seznam.cz", "attachment_id": null, "text": "(In reply to comment #3)\n> \n> Do your requests contain query strings like the ones of the second reporter?\n> \n\nYes they do. ... There is a mistake in my (manually modified) http trace - all request strings were the same. Sorry for long response time - I was on my holiday last week.\n\n", "id": 118857, "time": "2008-07-21T00:32:47Z", "bug_id": 45341, "creation_time": "2008-07-21T00:32:47Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "This has nothing to do with query strings.\n\nIt is as stated already:\n\n1) the user submits a normal request but the item in ache is expired\n2) mod_cache submits a conditional request to the upstream server looking for a new version\n3) the upstream server responds with a 304 Not Modified, but then also includes\nheaders that indicate this previously cached item is no longer cacheable. Either\nbecause the expires haven't been updated, the cache rules have changed, etc.\n4) mod_cache checks for cacheability of the response, and if it cannot be cached (i.e., if 'reason' is set in the cache save filter), then it serves the upstream response directly, with no regard for whether the original request was conditional or not.\n\nAs stated, the best options are to either a) serve the content as-is from\ncache, then purge it so subsequent requests come from the origin, or b)\nre-request from the upstream server without the conditional headers, and pass on\nthe full result to the user.\n\nb) is probably the most standards-compliant. I have chosen to do a) for now. By not removing the cache_remove filter, the item is removed from cache after being served for this request.\n\nI can say that not fixing this makes mod_cache unusable in production, as it is never ok to return a 304 Not Modified / blank body to a non-conditional request, under any standard. This is a bad bug, unconfined to query strings not returning expires, or any other scenario thus far presented. It is perfectly reasonable to expect that an upstream server may change the cache rules for a piece of content, and it needs to be able to handle that on revalidation without creating an error for the user.\n\nHere is debug output. The scenario is that the cached item is cached, but expired, and the upstream server is responding with an Expires header in the past. The dates of the cached item were specifically altered for this test to be in the past, as well as the response from the upstream, but this spawned from real-world scenarios.\n\n* Please note, the line numbers will not directly correspond to line numbers in httpd repository. This server is running a modified 2.2.11.\n\n\n[Tue Apr 28 04:39:30 2009] [debug] mod_disk_cache.c(1217): disk_cache: Recalled status for cached URL http://host.com:80/content.file? from file /path/cache/path.header\n[Tue Apr 28 04:39:30 2009] [debug] mod_disk_cache.c(1758): disk_cache: Recalled headers for URL http://host.com:80/content.file?\n[Tue Apr 28 04:39:30 2009] [debug] cache_storage.c(361): Cached response for /content.file isn't fresh.  Adding/replacing conditional request headers.\n[Tue Apr 28 04:39:30 2009] [debug] mod_cache.c(690): Adding CACHE_SAVE filter for /content.file\n[Tue Apr 28 04:39:30 2009] [debug] mod_cache.c(703): Adding CACHE_REMOVE_URL filter for /content.file\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy_balancer.c(46): proxy: BALANCER: ***\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy_balancer.c(1301): proxy: ***\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy_balancer.c(1369): proxy ***\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy.c(1006): Running scheme balancer handler (attempt 0)\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy_http.c(2135): proxy: HTTP: serving URL http://upstream/content.file\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(1999): proxy: HTTP: has acquired connection for (upstream)\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(2055): proxy: connecting http://upstream/content.file to upstream:80\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(2153): proxy: connected /contet.file to upstream:80\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(2308): proxy: HTTP: fam 2 socket created to connect to upstream\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(2414): proxy: HTTP: connection complete to upsteam:80 (upstream)\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy_http.c(2005): proxy: header only\n[Tue Apr 28 04:39:30 2009] [debug] mod_cache.c(1214): cache: /contet.file not cached. Reason: Expires header already expired, not cacheable\n[Tue Apr 28 04:39:30 2009] [debug] mod_cache.c(1687): in CACHE_REMOVE_URL filter, and there is a cache\n[Tue Apr 28 04:39:30 2009] [debug] mod_disk_cache.c(88): ** removed item **\n[Tue Apr 28 04:39:30 2009] [debug] proxy_util.c(2017): proxy: HTTP: has released connection for (upstream)\n[Tue Apr 28 04:39:30 2009] [debug] mod_proxy.c(1053): proxy_handler(cleanup): access_status: 0, r->status: 304\n\n\nAnd the request:\n\nwget --header --server-response http://server/content.file\n--04:28:56--\nhttp://server/content.file    => `content.file'\nResolving server... ***.***.***.***\nConnecting to server|***.***.***.***|:80... connected.\nHTTP request sent, awaiting response...\n  HTTP/1.1 304 Not Modified\n  Date: Tue, 28 Apr 2009 08:22:33 GMT\n  Server: ** upstream server tokens **\n  Connection: Keep-Alive\n  Keep-Alive: timeout=5, max=100\n  ETag: \"** etag **\" \n  Expires: Mon, 06 Apr 2009 08:07:45 GMT\n  Cache-Control: max-age=259\n04:28:56 ERROR 304: Not Modified.", "id": 126584, "time": "2009-04-28T05:22:09Z", "creator": "mvenzke@voxel.net", "creation_time": "2009-04-28T05:22:09Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "It seems this behaviour is triggered when a 304 Not Modified response arrives that contains headers to say that the response isn't cacheable according to the RFC rules.\n\nThe cacheability check of the response kicks in, says \"this (304) is not cacheable, just pass this response through as is\", and that's how the 304 gets out.\n\nThis situation could arise if the origin server has in the mean time changed its mind about whether something is cachable (it was cacheable in the past, now it isn't), or if a broken origin server declares that 2xx responses are cacheable but 304 responses aren't (a contradiction in terms). Neither of these two happen often, which is probably why this problem is so rare in the wild.\n\nGiven that it isn't practical to restart the request again, it is probably a sensible compromise to pretend we couldn't connect to the backend at all, and return cached content for this request marked with a Warning to say the content is stale (which is what we are allowed to do as per RFC2616), and then we delete this URL from the cache, respecting the headers on the 304.\n\nIn the case where \"s-maxage\" or \"must-revalidate\" has been specified, and we can't return a warning, we delete the URL from the cache, and then could potentially return a redirect back to ourselves, in the process asking the client to try again.\n\nWill need to double check this logic against RFC2616.", "id": 140196, "time": "2010-09-27T05:59:52Z", "creator": "minfrin@sharp.fm", "creation_time": "2010-09-27T05:59:52Z", "is_private": false}, {"count": 13, "attachment_id": null, "creator": "minfrin@sharp.fm", "text": "Fixed in r1001884 on httpd-trunk.", "id": 140237, "time": "2010-09-27T15:30:12Z", "bug_id": 45341, "creation_time": "2010-09-27T15:30:12Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "text": "Proposed for backport to v2.2.", "attachment_id": null, "id": 140803, "creator": "minfrin@sharp.fm", "time": "2010-10-18T18:44:06Z", "bug_id": 45341, "creation_time": "2010-10-18T18:44:06Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 45341, "attachment_id": null, "text": "Adding dependency for completeness.", "id": 141636, "time": "2010-11-11T11:34:08Z", "creator": "nick@webthing.com", "creation_time": "2010-11-11T11:34:08Z", "is_private": false}, {"count": 16, "attachment_id": null, "creator": "rpluem@apache.org", "text": "Backported to 2.2.x as r1068313.", "id": 144045, "time": "2011-02-08T06:46:12Z", "bug_id": 45341, "creation_time": "2011-02-08T06:46:12Z", "tags": [], "is_private": false}]
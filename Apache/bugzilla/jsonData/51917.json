[{"count": 0, "tags": [], "bug_id": 51917, "is_private": false, "id": 149946, "attachment_id": null, "creator": "petar.petrov@microfocus.com", "creation_time": "2011-09-29T13:59:36Z", "time": "2011-09-29T13:59:36Z", "text": "There is a race condition in PumpStreamHandler. To reproduce execute a process using the ant API - the Execute class initialized with a LogStreamHandler instance. Put breakpoints at the beginning of PumpStreamHandler.stop() and LogOutputStream.processLine().\n\nMake sure the process started with Execute.execute() outputs at least one line in the standard output and exits. Once you start debugging, the debugger will stop at both breakpoints - the process has exited and PumpStreamHandler.stop() is called, while the thread which handles the output has also stopped at the breakpoint in LogOutputStream.processLine(). At this point if you resume the first thread, flush() will be called on the output stream - this will call processLine(). Thus, two different threads will process the same line, duplicating it in the output.\n\nWe are working on a build tool in Eclipse which start an Ant build script and then parses the output. Because of this race condition we can't get a reliable output of a spawned process.\n\nAlso this problem is not present in Ant 1.7.1."}, {"count": 1, "tags": [], "bug_id": 51917, "is_private": false, "id": 152009, "attachment_id": null, "creator": "bodewig@apache.org", "creation_time": "2011-12-06T16:50:24Z", "time": "2011-12-06T16:50:24Z", "text": "since svn revision 1095736 flush() no longer calls processLine in order\nto fix bug 50507\n\nThis should also fix the race condition you describe.  Can you please confirm\ntrunk works for you?"}]
[{"count": 0, "tags": [], "text": "Run the following Lambda EL expression in a JSP \n\n${incr = x->x+1; incr(10)}\n\nfails with this exception,\n\nmessage /TestLambda.jsp (line: 59, column: 42) The function incr must be used with a prefix when a default namespace is not specified\n\ndescription The server encountered an internal error that prevented it from fulfilling this request.\n\nexception\n\norg.apache.jasper.JasperException: /TestLambda.jsp (line: 59, column: 42) The function incr must be used with a prefix when a default namespace is not specified\n\torg.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)", "attachment_id": null, "bug_id": 57441, "id": 180292, "time": "2015-01-14T04:21:20Z", "creator": "codetester08@gmail.com", "creation_time": "2015-01-14T04:21:20Z", "is_private": false}, {"count": 1, "tags": [], "text": "Reproducible in 8.0.17.\n\nThe exception occurs during Validator$ValidateVisitor.validateFunctions() call.\n\nStacktrace in 8.0.17:\n\n org.apache.jasper.JasperException: /test.jsp (line: 1, column: 9) The function incr must be used with a prefix when a default namespace is not specified\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:41)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:275)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:107)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor$1FVVisitor.visit(Validator.java:1585)\n\tat org.apache.jasper.compiler.ELNode$Function.accept(ELNode.java:139)\n\tat org.apache.jasper.compiler.ELNode$Nodes.visit(ELNode.java:214)\n\tat org.apache.jasper.compiler.ELNode$Visitor.visit(ELNode.java:256)\n\tat org.apache.jasper.compiler.ELNode$Root.accept(ELNode.java:61)\n\tat org.apache.jasper.compiler.ELNode$Nodes.visit(ELNode.java:214)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.validateFunctions(Validator.java:1607)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.prepareExpression(Validator.java:1612)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:750)\n\tat org.apache.jasper.compiler.Node$ELExpression.accept(Node.java:950)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2428)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2434)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:464)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2376)\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1846)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:356)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:336)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:570)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:356)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:340)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:725)", "attachment_id": null, "id": 180293, "creation_time": "2015-01-14T06:29:29Z", "time": "2015-01-14T06:29:29Z", "creator": "knst.kolinko@gmail.com", "bug_id": 57441, "is_private": false}, {"count": 2, "tags": [], "bug_id": 57441, "attachment_id": null, "id": 180341, "time": "2015-01-17T17:50:50Z", "creator": "markt@apache.org", "creation_time": "2015-01-17T17:50:50Z", "is_private": false, "text": "I think it is time to ditch Jasper's partial EL parser and use o.a.el.lang.ExpressionBuilder.createNode() to fully parse the EL with a 'proper' EL implementation and then process those nodes.\n\nThe down side is that I think this would be the first thing to make Jasper depend on Tomcat's EL implementation rather than any EL implementation. Users would still be free to use another EL impl at runtime - Jasper would just always use Tomcat's impl directly so it can access the parsed nodes. (I need to check the dependency issues. The poms already show a dependency here.)\n\nThe upside should be an end to the steady stream of bugs with every new major release as the various new EL features are found to break the simple EL parsing Jasper does. A side benefit is deleting more code and I'm always happy when I can provide the same or better functionality with less code."}, {"count": 3, "tags": [], "bug_id": 57441, "text": "Is it at all possible to reliably validate functions at compile time?\n\nMaybe whitelist functions that have name only with no prefix?\n\n\nBTW, it is possible to use javax.el.ImportHandler.importStatic() to declare a function by importing a static method of a class.  An example of manipulating ImportHandler at run time is in bug 57142.  If it is manipulated at run time, it means that the information is not available at compile time to perform validation.\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=57142#c1", "id": 180365, "time": "2015-01-19T09:41:11Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-01-19T09:41:11Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57441, "attachment_id": null, "id": 180415, "time": "2015-01-20T10:59:22Z", "creator": "markt@apache.org", "creation_time": "2015-01-20T10:59:22Z", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #3)\n> Is it at all possible to reliably validate functions at compile time?\n\nYou are right. As of EL 3.0 this is no longer possible.\n\n> Maybe whitelist functions that have name only with no prefix?\n\nI think that is the only option at this point. In fact, I can't see any other option that would work because of the point you make below:\n\n> BTW, it is possible to use javax.el.ImportHandler.importStatic() to declare\n> a function by importing a static method of a class.  An example of\n> manipulating ImportHandler at run time is in bug 57142.  If it is\n> manipulated at run time, it means that the information is not available at\n> compile time to perform validation.\n> \n> https://issues.apache.org/bugzilla/show_bug.cgi?id=57142#c1\n\nHmm. If we have no choice but to whitelist functions with no prefix then there might not be a need for the switch to the full EL parser.\n\nI think it is worth raising this with the JSP maint lead. I'll do that shortly."}, {"count": 5, "tags": [], "bug_id": 57441, "text": "Fixed by whitelisting function names without a namespace. I have a query in the the JSP maintenance lead in case an alternative approach is decided.", "id": 180479, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2015-01-22T13:56:48Z", "time": "2015-01-22T13:56:48Z", "is_private": false}]
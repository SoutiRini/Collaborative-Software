[{"count": 0, "tags": [], "bug_id": 60562, "attachment_id": null, "text": "Since 1.9.7 it's impossible to run ant on Solaris 10 out of the box when really using the original BourneShell (sh) in the Shebang-lLine.\n\n\n> ./apache-ant-1.10.0/bin/ant -h\n./apache-ant-1.10.0/bin/ant: syntax error at line 66: `)' unexpected\n\nReplacing it by bash works fine.\n\nThe problem still seems to be in quoting command-line arguments by sed/awk/nawk.", "id": 195905, "time": "2017-01-09T14:32:15Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-09T14:32:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60562, "text": "We may have overlooked bootstrap.sh suffering from the same problems as build.sh - see bug 59898 \n\nDoes build.sh work for you (if you installed a binary built on a different platform)?", "id": 195906, "attachment_id": null, "creator": "bodewig@apache.org", "creation_time": "2017-01-09T14:44:26Z", "time": "2017-01-09T14:44:26Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 60562, "text": "(In reply to Stefan Bodewig from comment #1)\n> We may have overlooked bootstrap.sh suffering from the same problems as\n> build.sh - see bug 59898 \n> \n> Does build.sh work for you (if you installed a binary built on a different\n> platform)?\n\nI meant the ant wrapper script, not build.sh, sorry,", "id": 195907, "time": "2017-01-09T14:45:09Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-09T14:45:09Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 60562, "text": "Now I've unpacked the binary distibution of 1.10.0 on OpenSuSE 13.1 and calling \"ant -h\" works fine.\nOn Solaris 10 it breaks.\nOn SuSE Linux Enterprise 12.1 it works also fine.\n\nDoes this information help?", "id": 195908, "time": "2017-01-09T14:53:16Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-09T14:53:16Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "In a way it does, and to be honest it is pretty frustrating.\n\nWe know the wrapper script has been broken around 1.9.6 and we thought it had been fixed with 1.9.8/1.10.0, we even had people using Solaris confirm it was fixed.\n\nThe major problem for us is that the developers haven't got access to a Solaris box and we always need to ask whether something works - the last time around this led to people stopping to provide feedback and left us with an incomplete solution.\n\nOK, enough whining from my side.\n\nIf line 66 is what breaks the script on Solaris, this is inside a case for \"awk\" which should never get called anyway (esc_tool should always be sed). Does the script work on Solaris if you comment out lines 62 to 67 inside the  ant script?", "creator": "bodewig@apache.org", "is_private": false, "id": 195909, "time": "2017-01-09T15:01:07Z", "bug_id": 60562, "creation_time": "2017-01-09T15:01:07Z", "tags": [], "attachment_id": null}, {"count": 5, "text": "No it doesn't help. When calling it with \"sh -v ant\" I get this Output:\n\n    case \"$esc_tool\" in\n      'sed')\n        # Mac bsd_sed does not support group-0, so pattern uses group-1\n        # Solaris sed only proceses lines with trailing newline, passing in an extra newline\n        # subshell assignment will trim the added trailing newline\n        esc_arg=\"$(printf '%s\\n' \"$esc_arg\" | sed -e 's@\\([$\"\\\\`]\\)@\\\\\\1@g')\"\n        ;;\n#     'awk')\n#       esc_arg=\"$(printf '%s' \"$esc_arg\" | \"$awk_exec\" '{ gsub(/\\\\/, \"\\\\\\\\\"); print }' )\"\n#       esc_arg=\"$(printf '%s' \"$esc_arg\" | \"$awk_exec\" '{ gsub(/\\$/, \"\\\\$\");  print }' )\"\n#       esc_arg=\"$(printf '%s' \"$esc_arg\" | \"$awk_exec\" '{ gsub(/\\\"/, \"\\\\\\\"\"); print }' )\"\n#       esc_arg=\"$(printf '%s' \"$esc_arg\" | \"$awk_exec\" '{ gsub(/`/,  \"\\\\`\")./ant: syntax error at line 66: `)' unexpected", "creator": "thomas.stecher@bgr.de", "is_private": false, "id": 195911, "time": "2017-01-09T15:07:29Z", "bug_id": 60562, "creation_time": "2017-01-09T15:07:29Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 60562, "text": "so it trips over a closing paren in a commented-out line?\n\nso maybe we need to remove the block rather then comment it?", "id": 195912, "attachment_id": null, "creator": "bodewig@apache.org", "creation_time": "2017-01-09T15:17:27Z", "time": "2017-01-09T15:17:27Z", "is_private": false}, {"count": 7, "tags": [], "creator": "thomas.stecher@bgr.de", "is_private": false, "text": "A first try to remove line #63 to 79 doesn't fix it. It seems to me the real bug it some lines earlier and the case statement doesn't get recognized as such.", "id": 195913, "time": "2017-01-09T15:35:38Z", "bug_id": 60562, "creation_time": "2017-01-09T15:35:38Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 60562, "text": "After we've decided to go with sed (because it seemed we got it to work on Solaris as well) the whole case has become obsolete. Could you trying to replace thw whole case with just\n\n        esc_arg=\"$(printf '%s\\n' \"$esc_arg\" | sed -e 's@\\([$\"\\\\`]\\)@\\\\\\1@g')\"\n\n?", "id": 195914, "time": "2017-01-09T15:47:25Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-09T15:47:25Z", "is_private": false, "attachment_id": null}, {"count": 9, "text": "So now we fixed the \"case\". Maybe it was a matter of bytes inside the for-loop?!?\n\nBut have a new one.\n\nif $mingw ; then\n  [ -n \"$ANT_HOME\" ] &&\n    ANT_HOME=\"`(./apache-ant-1.10.0/bin/ant: syntax error at line 159: `(' unexpected", "creator": "thomas.stecher@bgr.de", "is_private": false, "id": 195917, "time": "2017-01-09T16:11:38Z", "bug_id": 60562, "creation_time": "2017-01-09T16:11:38Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "text": "that's bee bug 46936 https://github.com/apache/ant/commit/9aac905f3e768d42cd9cd4660f5be458ee990660 - I'll look into it\n\nI've removed the case in Ant's master branch and will likely ask you to re-try further iterations. I'm sorry this has to be so difficult.", "id": 195920, "time": "2017-01-09T17:37:43Z", "bug_id": 60562, "creation_time": "2017-01-09T17:37:43Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "bodewig@apache.org", "text": "I've replace the backticks completely and avoided the subshell in the mingw case, could you please try again with the master version?\n\nI'll ping the original author of bug 46936 and ask some cygwin users to double check my changes.", "id": 195923, "time": "2017-01-09T17:50:59Z", "bug_id": 60562, "creation_time": "2017-01-09T17:50:59Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "thomas.stecher@bgr.de", "is_private": false, "text": "The Problem seems to be your suggested line which wants to execute a command by $( command ). The bourne Shell on Solaris doesn't support that.\n\nWe have to replace it by something using `command` but must watch out for the back-tick in the sed statement.\n\nWhen we get a running fix I also can test it on cygwin.", "id": 195926, "time": "2017-01-09T17:59:06Z", "bug_id": 60562, "creation_time": "2017-01-09T17:59:06Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 60562, "attachment_id": null, "text": "I think this is a good try:\n\n\n    esc_arg=`printf '%s\\n' \"${arg}\" | sed -e 's@\\([$\"\\\\\\`]\\)@\\\\\\&@g'`\n\n    quoted_arg=\"\\\"$esc_arg\\\"\"", "id": 195927, "time": "2017-01-09T18:07:26Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-09T18:07:26Z", "is_private": false}, {"count": 14, "text": "The sed line is the result of several iterations and I'm really scared of the thought that we'd touch it again.\n\nIn my change I removed all backtick invocations as you didn't report problems with the other cases of $(). In fact we've had $() sequences all over the script even before the platform problems started. $() is POSIX, is it really not supported by sh on Solaris?", "creator": "bodewig@apache.org", "is_private": false, "id": 195948, "time": "2017-01-10T06:02:12Z", "bug_id": 60562, "creation_time": "2017-01-10T06:02:12Z", "tags": [], "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 60562, "text": "Here is a small test on a Solaris 10 machine...\n\nstecher@b2sn13:~/tmp > cat dollar.sh\n#!/bin/sh\n\n   value=$( pwd )\n\n   echo ${value}\nstecher@b2sn13:~/tmp > dollar.sh\n./dollar.sh: syntax error at line 3: `value=$' unexpected\n\nThe sed statment is really hard to understand. I'll test it today on other systems.\n\nThere are two other places using the invocation of $() which should also be changed. Sorry I didn't see these earlier.", "id": 195949, "time": "2017-01-10T07:27:47Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-10T07:27:47Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 60562, "text": "Created attachment 34602\nant-script running on solaris 10\n\nHere is an updated version of the ant script. I've tested it by calling \n\n./ant -debug -v '$ ` \\\\'\n\nwith \"ant_exec_debug=false\" set in line 22 to see if arguments are well processed. \n\nIt runs on Solaris 10, cygwin, SLES 12.1 and OpenSuSE 13.1\n\nBut to be sure some other people also should verify the correctness.", "id": 195951, "attachment_id": 34602, "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-10T08:21:41Z", "time": "2017-01-10T08:21:41Z", "is_private": false}, {"count": 17, "tags": [], "creator": "thomas.stecher@bgr.de", "is_private": false, "text": "\"ant_exec_debug=true\" was set to verify...", "id": 195952, "time": "2017-01-10T08:22:58Z", "bug_id": 60562, "creation_time": "2017-01-10T08:22:58Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 60562, "text": "The version contained in 1.10.0 is the result of https://github.com/apache/ant/pull/25 which was measured against the invocation\n\nant --execdebug \\\n  \"-Dfoo=dollar\\$_backtick\\`_single'_double\\\"\\\"_trailingbackslash\\\\\" \\\n  \"-Dbar=trailingnewline\n\" \\\n  \"-Dnewline=\n\" \\\n  \"-Ddoublespace=  \" \\\n  \"-Dx=y\" \\\n  \"-f\" \"test.xml\"\n\n(see the test.zip linked in the PR)\n\nAt least on Linux this seems to work as well.", "id": 195961, "time": "2017-01-10T16:45:02Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-10T16:45:02Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "bodewig@apache.org", "text": "(In reply to Stefan Bodewig from comment #18)\n\n> At least on Linux this seems to work as well.\n\nNo, it doesn't :-(\n\nYour script strips trailing newlines. Where the original script ends with\n\nrun:\n     [echo] hello world\n     [echo] foo=dollar$_backtick`_single'_double\"\"_trailingbackslash\\_\n     [echo] bar=trailingnewline\n     [echo] _\n     [echo] newline=\n     [echo] _\n     [echo] doublespace=  _\n     [echo] end\n\nusing the attached script I get\n\nrun:\n     [echo] hello world\n     [echo] foo=dollar$_backtick`_single'_double\"\"_trailingbackslash\\_\n     [echo] bar=trailingnewline_\n     [echo] newline=_\n     [echo] doublespace=  _\n     [echo] end", "id": 195962, "time": "2017-01-10T16:47:46Z", "bug_id": 60562, "creation_time": "2017-01-10T16:47:46Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 60562, "text": "The behavior error in the snippet leading to truncation is that Posix has subshells trim output returned to an assignment statement. Probably so that one can use things like echo to set variables more conveniently.\n\nThe value returned by the subshell expression (`...`) therefore needs non-whitespace padding on its output.\n\nUsing something like: `printf 'X%sX\\n' \"${arg}\"...`\nand then stripping the padding X in the main shell should resolve that quirk\n    esc_arg=\"${esc_arg#X}\"\n    esc_arg=\"${esc_arg%X}\"\n\nBut I can't test this and can't see how it is different (by spec) than the original 1.10 solution unless the core of the problem is $() vs `` for invoking subshells.", "id": 195967, "time": "2017-01-10T20:20:42Z", "creator": "jwadamson@gmail.com", "creation_time": "2017-01-10T20:20:42Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "creator": "thomas.stecher@bgr.de", "text": "Sorry for answering so late. Busy by business :-)\n\nNow I tried the test.zip an solaris and I see what you mean. Unfortunately the replacement by \n\n    esc_arg=\"${esc_arg#X}\"\n    esc_arg=\"${esc_arg%X}\"\n\nis also unsupported by /bin/sh. I'll try to find a way around that tomorrow or on friday.", "id": 195984, "time": "2017-01-11T15:39:33Z", "bug_id": 60562, "creation_time": "2017-01-11T15:39:33Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 60562, "text": "That stinks. :-(\n\nSolaris 10 was released in 2005, so that is sad it doesn't fit the 2004 (or earlier) POSIX spec but seems to be the case. http://unix.stackexchange.com/a/164242 \"/bin/sh is not the POSIX shell but the legacy Bourne shell which predates POSIX and is then missing features that came later with the standard.\" \n\nSolaris 11 /bin/sh -> ksh83 (and is POSIX compliant)\n\n\n\nPossibilities include:\n1) identifying if the script is running in the solaris 10 shell and skip the padding/stripping portions. This sacrifices trailing whitespace, but shouldn't be any worse than the original ant script on this platform.\n2) find a different syntax to do the job. I don't see operators for getting the length of a string or sub-stringing it, which would have been my second choice. Any use of sub-shell to process the value is going to strip whitespace and put us back to #1.", "id": 196046, "time": "2017-01-12T20:49:14Z", "creator": "jwadamson@gmail.com", "creation_time": "2017-01-12T20:49:14Z", "is_private": false, "attachment_id": null}, {"count": 23, "text": "Would prefer something specific to detect bourne-shell but I can't see any environment variables that would let us know if the ant script was running under heirloom-bourne. :-(\n\nWorst case we can test via uname skip the portions that do the adding/stripping of arg padding?\n\n----------------------\nBOURNE_SHELL=false\nOS=`uname -s`\nREL=`uname -r`\nif [ \"$OS\" = SunOS -a \"$REL\" = \"5.10\" ]\nthen\n    BOURNE_SHELL=true\nfi\n\nif [ $BOURNE_SHELL ]\nthen\n    esc_arg=\"$arg\"\nelse\n    esc_arg=\"X${arg}X\";\nfi\n\n# TODO do sed replacement statement on esc_arg, in bourne-shell this will wind up trimming whitespace due to subshell use.\n\nif [ $BOURNE_SHELL != \"true\" ]\nthen\n    esc_arg=\"${esc_arg#X}\"\n    esc_arg=\"${esc_arg%X}\"\nfi", "creator": "jwadamson@gmail.com", "is_private": false, "id": 196047, "time": "2017-01-12T22:32:38Z", "bug_id": 60562, "creation_time": "2017-01-12T22:32:38Z", "tags": [], "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 60562, "text": "(In reply to jwadamson from comment #22)\n> That stinks. :-(\n> \n> Solaris 10 was released in 2005, so that is sad it doesn't fit the 2004 (or\n> earlier) POSIX spec but seems to be the case.\n> http://unix.stackexchange.com/a/164242 \"/bin/sh is not the POSIX shell but\n> the legacy Bourne shell which predates POSIX and is then missing features\n> that came later with the standard.\" \n> \n> Solaris 11 /bin/sh -> ksh83 (and is POSIX compliant)\n\nThis explains why we got reports the new wrapper script would work on Solaris.\n\nDo we need to consider Solaris versions prior to 10? If so if we can't detect the incompatible /bin/sh can we detect the compatible one (maybe combined with detecting Solaris)?", "id": 196051, "time": "2017-01-13T05:58:58Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-13T05:58:58Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 60562, "text": "Downloaded a solarix 10 ova vm file.\nInteresting results\n1) seems like the `VAR=$( echo HI )` syntax does not work and throws an error\n2) `VAR=\"$( echo HI )\"` syntax actually does not execute the subshell at all and assigns the expression as a string to VAR\n3) \n    X=\" HI \"\n    echo \"\\$X=$X.\"\n    Y=\"`echo \"$X\"`\"\n    echo \".${Y}.\"\nshows that the shell does NOT trim the output from the subshell when assigning to Y.\n\nSo the best idea may be to detect the lack of trimming subshell capture, and in that case skip the padding+stripping operations since they are unnecessary.\n\nWill see if I can confirm this and mock up the old ant torture test to see if it still works on linux and solaris 10.", "id": 196057, "time": "2017-01-13T14:13:53Z", "creator": "jwadamson@gmail.com", "creation_time": "2017-01-13T14:13:53Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 60562, "text": "or maybe i am doing something wrong now.", "id": 196058, "time": "2017-01-13T14:57:04Z", "creator": "jwadamson@gmail.com", "creation_time": "2017-01-13T14:57:04Z", "is_private": false, "attachment_id": null}, {"count": 27, "tags": [], "bug_id": 60562, "attachment_id": null, "text": "I'll try to face the Problem of the newline inside of awk which will run after my last sed Suggestion because Solaris 10's sh doesn't support the Substitution of shell variables. I still think this will be possible.\n\nThe other way is to define the script to be BASH :-)\n\nStill trying to find a way. I'll let you know what comes out at the end.", "id": 196059, "time": "2017-01-13T15:06:21Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-01-13T15:06:21Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 60562, "text": "What I was doing wrong was that the rule for subshells actually is \"removing sequences of one or more <newline>s at the end of the substitution.\"\n\nAnd that is in effect for heritage and posix. So we can't use that as feature detection :-(\n\nSwitching to bash I do not think works for AIX, which does not include bash by default.\n\nI am still thinking that testing with uname for Solaris 10 and just not protecting trailing NLs in that case may be the best we can do.", "id": 196060, "attachment_id": null, "creator": "jwadamson@gmail.com", "creation_time": "2017-01-13T15:31:30Z", "time": "2017-01-13T15:31:30Z", "is_private": false}, {"count": 29, "tags": [], "creator": "jwadamson@gmail.com", "text": "Here is close as I could get.\n\nMain points\n1) Had to touch the icky sed line to make it use `` instead of $(). That is the part that scares me the most, but I can convince myself the expression is correct and my limited testing of special chars looked ok.\n2) solaris 10 will drop trailing newlines on arguments. They can avoid that by using a POSIX shell and setting env PROTECT_NL=true.\n\nhttps://github.com/apache/ant/pull/29\n\nThis is just an idea/example, I would love it if someone could come up with anything that worked 100% consistently across platforms or could feature-detect  heirloom shell.", "id": 196063, "time": "2017-01-13T18:39:58Z", "bug_id": 60562, "creation_time": "2017-01-13T18:39:58Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "bug_id": 60562, "text": "switching to bash is no real option.\n\nIf the latest incarnation - I've merged Jeff's changes into the master branch - work for Thomas this probably is what we'll be going on with.", "id": 196066, "time": "2017-01-14T18:02:59Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-14T18:02:59Z", "is_private": false, "attachment_id": null}, {"count": 31, "tags": [], "creator": "thomas.stecher@bgr.de", "text": "I hate the feeling to loose a challenge like this. Yesterday I thought to loose but now I have a cool idea to solve this problem and it seems to work fine.\n\nSo if we can't pass all the args directly clear to ant on solaris 10 when using the original /bin/sh... why not reinvoke everything with a compatible shell if available.\n\nI added this code at line 18 in the original released script of ant 1.10.0\n\n#-------------------------------------\n\nif [ `uname` = \"SunOS\" -a -x /usr/xpg4/bin/sh -a -z \"${SOLARIS_SPECIAL}\" ] ; then\n   SOLARIS_SPECIAL=true\n   export SOLARIS_SPECIAL\n   exec /usr/xpg4/bin/sh $0 \"$@\"\nfi\n\n#-------------------------------------\n\nOn solaris 10 there is on all my very naked installed Hosts a folder /usr/xpg4/bin which supplies executables compatible to POSIX !\n\nWhat do you think about that hack?", "id": 196070, "time": "2017-01-14T22:00:33Z", "bug_id": 60562, "creation_time": "2017-01-14T22:00:33Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 60562, "text": "That's a very interesting approach. I'm not really sure what I think of it. \nNice in that it would allow ant to use more POSIX in the rest of the file going forward. I find the semi-recursive aspect both concerning and thrilling.\n\nComments from the ant team or anyone else familiar with this issue?", "id": 196127, "time": "2017-01-17T21:32:42Z", "creator": "jwadamson@gmail.com", "creation_time": "2017-01-17T21:32:42Z", "is_private": false, "attachment_id": null}, {"count": 33, "tags": [], "bug_id": 60562, "text": "I'm afraid we still couldn't rely on POSIXy behaviour as /usr/xpg4/bin/sh may simply not be there. I'm not scared by the sem-recursiveness and could live with it.", "id": 196154, "time": "2017-01-18T16:04:55Z", "creator": "bodewig@apache.org", "creation_time": "2017-01-18T16:04:55Z", "is_private": false, "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 60562, "attachment_id": null, "text": "*** Bug 60673 has been marked as a duplicate of this bug. ***", "id": 196619, "time": "2017-02-01T08:23:15Z", "creator": "bodewig@apache.org", "creation_time": "2017-02-01T08:23:15Z", "is_private": false}, {"count": 35, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 196621, "time": "2017-02-01T14:42:32Z", "bug_id": 60562, "creation_time": "2017-02-01T14:42:32Z", "text": "if possible I'd like to stick with the script currently at the tip of the 1.9.x and master branches and cut new Ant releases.\n\nThomas, have you given that script a try?"}, {"count": 36, "tags": [], "bug_id": 60562, "text": "Hi Stefan,\n\nahm, which version exactly should I try? I'm a little confised :-)", "id": 196622, "attachment_id": null, "creator": "thomas.stecher@bgr.de", "creation_time": "2017-02-01T14:49:26Z", "time": "2017-02-01T14:49:26Z", "is_private": false}, {"count": 37, "tags": [], "bug_id": 60562, "text": "https://git-wip-us.apache.org/repos/asf?p=ant.git;a=blob;f=src/script/ant;h=8252d779c3aba453c0e1729f81763063fe12d4a7;hb=a92845215f55eb63f0ad911c1610eac4dfaf82b4 - which is the master branch. 1.9.x is the branch that will lead to 1.9.9. The scripts are identical, though.\n\nOr https://github.com/apache/ant/blob/master/src/script/ant if you prefer the github UI :-)", "id": 196623, "time": "2017-02-01T14:52:19Z", "creator": "bodewig@apache.org", "creation_time": "2017-02-01T14:52:19Z", "is_private": false, "attachment_id": null}, {"count": 38, "tags": [], "creator": "thomas.stecher@bgr.de", "text": "It seems to work except preserving the newlines (like my suggestion did :-))\n\nstecher@b2sn13:~/java > apache-ant-1.10.0/bin/ant -f test.xml\nBuildfile: /home/stecher/java/test.xml\n\nrun:\n     [echo] hello world\n     [echo] foo=${foo}_\n     [echo] bar=${bar}_\n     [echo] newline=${newline}_\n     [echo] doublespace=${doublespace}_\n     [echo] end\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds", "id": 196625, "time": "2017-02-01T15:12:43Z", "bug_id": 60562, "creation_time": "2017-02-01T15:12:43Z", "is_private": false, "attachment_id": null}, {"count": 39, "tags": [], "bug_id": 60562, "text": "Can you live with that or do we really want to shell out to bash when available?", "id": 196627, "attachment_id": null, "creator": "bodewig@apache.org", "creation_time": "2017-02-01T15:51:41Z", "time": "2017-02-01T15:51:41Z", "is_private": false}, {"count": 40, "tags": [], "bug_id": 60562, "text": "I have confirmed the current 1.9.x tip for ant wrapper script does work on Solaris 10.\n\nAs a side note, the current 1.9.8 version would work on Solaris 11, as Oracle changed /bin/sh from the native Bourne shell, to a symbolic link to ksh93.  But All prior versions of Solaris (Oracle and Sun) use the legacy Bourne shell at /bin/sh.", "id": 196637, "attachment_id": null, "creator": "awelsh@statestreet.com", "creation_time": "2017-02-01T17:57:29Z", "time": "2017-02-01T17:57:29Z", "is_private": false}, {"count": 41, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "text": "Many thanks, Armand.\n\nPlease forgive my ignorance, are any Solaris versions older than 10 still in widespread use? We currently special case Solaris 10 only and would likely still fail on Solaris 9.", "id": 196642, "time": "2017-02-01T20:40:28Z", "bug_id": 60562, "creation_time": "2017-02-01T20:40:28Z", "attachment_id": null}, {"count": 42, "tags": [], "bug_id": 60562, "text": "It's quiet interesting that there are some poeple who need newlines in commandline arguments. It was a cool challenge to find a way to keep them also on Solaris 10. But I really don't know in which usecase that makes sense. But on the other Hand from a technical view it's not okay to modify any argument that comes in.\n\nBut: I can live without that feature on Solaris 10. Even on other platforms :-)\n\nI'm looking forward  for the next release of ant fixing my real problem. Thank you very much !", "id": 196657, "time": "2017-02-02T08:49:03Z", "creator": "thomas.stecher@bgr.de", "creation_time": "2017-02-02T08:49:03Z", "is_private": false, "attachment_id": null}, {"count": 43, "tags": [], "bug_id": 60562, "attachment_id": null, "text": "Not preserving newlines is the behaviour of 1.9.6 and earlier, I think. So there are not too many people who need it :-)\n\nI'll create an enhancement request for preserving newlines on Solaris 10 (and maybe even before that) and will start the release process in the coming days.\n\nMany thanks for testing and many thanks again to Jeff for providing the fix.\n\nWill be fixed in 1.10.1 and 1.9.9.", "id": 196661, "time": "2017-02-02T10:02:14Z", "creator": "bodewig@apache.org", "creation_time": "2017-02-02T10:02:14Z", "is_private": false}]
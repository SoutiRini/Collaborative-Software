[{"count": 0, "tags": [], "creator": "erich@vdr.com", "text": "Created attachment 31112\nNetBeans profile snapshot of test of standard POI library\n\nWhen writing very large numbers of properties to the Custom Properties collection of new style office documents, the performance degrades badly.\nA test of writing 3k properties to a .DOCX file took 400 seconds.\n\nIn my time trials, monitoring timing each batch of 25 property writes, the first batch of 25 entries took 0.028 seconds, the batch at the 1k mark took 1.1 seconds, the batch at 2k took 4.3 seconds, and the batch at 3K took 10.1 seconds.  I have reason to believe the size of the dataset may reach much larger than 3k.\n\nWhen profiling the code, most of the time in adding a property was spent in org.apache.poi.POIXMLProperties.addProperty()->org.apache.poi.POIXMLProperties.add()->org.apache.poi.POIXMLProperties.cotains().  \nI tested a custom compile of POI with the call to .contains() removed, most of the time was spent in org.apache.poi.POIXMLProperties$CustomPropertiex.nextPid(). Within that, most of the time was to java.util.AbstractList$Itr.hasNext() followed by java.util.AbstractList$Itr.next()\n\nAnother test of the custom POI library without the call to .contains() for 3k properties took roughly 200 seconds, or half the time of the standard library.\n\nMy test was a loop appending the loop counter number to both the base name and base value text to be used in the property, forex \"prop_Name_0001\", \"prop_value_0001\"", "id": 171736, "time": "2013-12-13T20:30:57Z", "bug_id": 55882, "creation_time": "2013-12-13T20:30:57Z", "is_private": false, "attachment_id": 31112}, {"attachment_id": 31113, "tags": [], "bug_id": 55882, "is_private": false, "count": 1, "id": 171737, "time": "2013-12-13T21:29:23Z", "creator": "erich@vdr.com", "creation_time": "2013-12-13T21:29:23Z", "text": "Created attachment 31113\nNetBeans Profile snapshot of custom POI without cotains() check\n\nThis profile snapshot was also \"Profile All classes\""}, {"count": 2, "tags": [], "creator": "erich@vdr.com", "text": "Created attachment 31114\nScreen cap of profile showing contains timing\n\nThe full profile file is too large to attach so this is a screen shot showing the timing of the .contains()", "id": 171738, "time": "2013-12-13T22:28:50Z", "bug_id": 55882, "creation_time": "2013-12-13T22:28:50Z", "is_private": false, "attachment_id": 31114}, {"attachment_id": 31115, "tags": [], "bug_id": 55882, "is_private": false, "count": 3, "id": 171739, "time": "2013-12-13T22:29:49Z", "creator": "erich@vdr.com", "creation_time": "2013-12-13T22:29:49Z", "text": "Created attachment 31115\nScreen cap of profile showing nextPid timing\n\nthe profile file is too large to attach so this screen cap shows the timing of the nextPid which is second to .contains() in time taken."}, {"attachment_id": null, "tags": [], "bug_id": 55882, "is_private": false, "count": 4, "id": 171877, "time": "2013-12-22T00:12:22Z", "creator": "kiwiwings@apache.org", "creation_time": "2013-12-22T00:12:22Z", "text": "To solve this, there are two ways:\n- either we introduce some kind of hash map caching of the underlying properties, and have to make sure that the map is synced when somebody changes something underneath\n- or you call the getUnderlyingProperties() method and fill the underlying properties yourself\n\nAlthough always iterating over props.getProperties().getPropertyList() is probably the reason for that bad performance, I'm a bit reluctant to implement a caching method here, as the second method is probably sufficient for your case and I don't need to worry about syncing.\n\nPlease correct me, if I'm totally wrong, but I think, that these many properties aren't usual and to move the logic into users code is ok."}, {"count": 5, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "No update on this one and it seems there is a viable workaround that can b applied in user-code here. Therefore I am closing this as WORKSFORME for now.", "id": 184670, "time": "2015-08-20T19:18:02Z", "bug_id": 55882, "creation_time": "2015-08-20T19:18:02Z", "is_private": false, "attachment_id": null}]
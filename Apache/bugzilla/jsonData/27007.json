[{"count": 0, "tags": [], "bug_id": 27007, "text": "I have a subant task that invokes other targets, one of them is a custom task\nthat throws a NullPointerException, that causes the main build to fail, even if\nI have set failonerror=\"false\" in the subant.", "id": 52422, "time": "2004-02-17T14:11:58Z", "creator": "mariano@fuegolabs.com", "creation_time": "2004-02-17T14:11:58Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "The subant documentation says this : failonerror   \t Sets whether to fail with a\nbuild exception on error, or go on.\n\nSetting failonerrror to false in practice \n * catches instances of org.apache.tools.ant.BuildException \n * does not make the build fail if there is/are build file(s) missing in the\nbuild path\n  * does not catch RuntimeException(s)\nThe keepgoing (ant -k) feature allows you to go on in case of RuntimeExceptions.\n\nI would go for updating the doc and leaving the code alone.", "is_private": false, "id": 52424, "creator": "antoine@apache.org", "time": "2004-02-17T14:36:11Z", "bug_id": 27007, "creation_time": "2004-02-17T14:36:11Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 27007, "is_private": false, "text": "extract from the manual:\n\n  -keep-going, -k        execute all targets that do not depend\n                         on failed target(s)\n\n\nif I execute a single target that uses subant, and inside subant I got a NPE,\nwil the main target fail then? I guess so, so that does not work for me, since I\nneed the subant to continue for whatever reason.\n\nCould you add a keep-going feature for subant, so it behaves like the main ant,\nbut internally for each invoked target?", "id": 52427, "time": "2004-02-17T14:52:58Z", "creator": "mariano@fuegolabs.com", "creation_time": "2004-02-17T14:52:58Z", "attachment_id": null}, {"count": 3, "text": "I think that the failonerror flag for the subant task\nshould handle all exceptions.", "bug_id": 27007, "attachment_id": null, "id": 52428, "time": "2004-02-17T15:22:31Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-02-17T15:22:31Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "peter.reilly@corvil.com", "attachment_id": 10395, "id": 52429, "time": "2004-02-17T15:23:58Z", "bug_id": 27007, "creation_time": "2004-02-17T15:23:58Z", "is_private": false, "text": "Created attachment 10395\nPatch to catch throwables in subant"}, {"count": 5, "tags": [], "text": "I am far from sure that I want to change anything in subant.\nDo you want to try ant-contrib and <try/> <catch/> <finally/>\nCheers, Antoine", "is_private": false, "bug_id": 27007, "id": 52430, "time": "2004-02-17T15:27:46Z", "creator": "antoine@apache.org", "creation_time": "2004-02-17T15:27:46Z", "attachment_id": null}, {"count": 6, "text": "I can't use try/catch inside subant itself, how could I?\n\n", "bug_id": 27007, "attachment_id": null, "id": 52431, "time": "2004-02-17T15:30:18Z", "creator": "mariano@fuegolabs.com", "creation_time": "2004-02-17T15:30:18Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Let's try the patch of Peter Reilly. Antoine", "attachment_id": null, "id": 52432, "creator": "antoine@apache.org", "time": "2004-02-17T15:34:57Z", "bug_id": 27007, "creation_time": "2004-02-17T15:34:57Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 27007, "attachment_id": null, "id": 52434, "time": "2004-02-17T15:49:16Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-02-17T15:49:16Z", "is_private": false, "text": "Ok committed, will be present in ant 1.6.2."}, {"count": 9, "text": "I'm always intrigued by users who want to go on building when something fails \nat some point... but Peter's suggestion sounds reasonable. The principle of \nleast possible surprise with failorerror=\"false\" most likely warrants trapping \nall Exceptions, but probably not Errors though.\n\nThen again, you could as well trap Throwable, since I'll never use \nfailorerror=\"false\" most likely. --DD", "bug_id": 27007, "attachment_id": null, "id": 52435, "time": "2004-02-17T15:50:02Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-02-17T15:50:02Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "text": "the issue is that I don't 'build' something, I am running a series of\nindependent tests for each module, so I don't mind If some fails, I continue the\ntest build.", "is_private": false, "bug_id": 27007, "id": 52437, "time": "2004-02-17T15:58:26Z", "creator": "mariano@fuegolabs.com", "creation_time": "2004-02-17T15:58:26Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 27007, "attachment_id": null, "is_private": false, "id": 52440, "time": "2004-02-17T16:04:42Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-02-17T16:04:42Z", "text": "Well, when I run my tests, I do care if some fail, and if I were to test \nprojects, I'd write a JUnit adapter for whatever I'm testing. Ant runs it's XML \nbuild files using such an adapter, not <subant>.\n\nUsing <subant> to call a bunch of 'test' projects is abusing subant IMHO. --DD"}, {"count": 12, "tags": [], "bug_id": 27007, "attachment_id": null, "id": 52442, "time": "2004-02-17T16:10:00Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-02-17T16:10:00Z", "is_private": false, "text": "I agree too - if a test fails the build should also fail. If you want to run all the tests even when one of the tests fail - it is better to use \"-k\" option. <subant> does catch all exception in \"-k\" handling code."}, {"count": 13, "attachment_id": null, "bug_id": 27007, "is_private": false, "id": 52444, "time": "2004-02-17T16:17:53Z", "creator": "mariano@fuegolabs.com", "creation_time": "2004-02-17T16:17:53Z", "tags": [], "text": "We do care when tests fail, but when you run 30k tests on each run, for\ndifferent platforms, databases, configurations, you don't want to stop all of\nthem I test #28 failed because someone forgot to catch a null.\n\nOn the other hand, we do not only run junit tasks in the tests, we run custom\ntasks that prepare the test environment, and those were the ones who failed with\na NPE, so using JUnit adaptors would not apply to this. Actually we have\nhaltonerror and haltonfailure set to 'false' for junit.\n\nAn I don't see your point in thinking that using subant like this is an abuse,\nit makes my ant build much clearer, instead of:\n\n<ant antfile=\"${boot.build.file}\" target=\"-set0-daily\"/>\n<ant antfile=\"${lib.build.file}\" target=\"-set0-daily\"/>\n<ant antfile=\"${compiler.build.file}\" target=\"-set0-daily\"/>\n<ant antfile=\"${xml.build.file}\" target=\"-set0-daily\"/>\n\nI have a clear:\n<subant target=\"-set0-daily\" haltonerror=\"false\" inheritall=\"true\">\n  <dirset dir=\"${basedir}\">\n   <include name=\"boot\"/>\n   <include name=\"lib\"/>\n   <include name=\"compiler\"/>\n   <include name=\"xml\"/>\n  </dirset>\n</subant>\n\nPlease extend on the issue if you want.\n\nHaving seen the code for SubAnt, in KeepGoing mode it handles the exception for\neach invocation, so it will continue even after a NPE inside a buildfile."}, {"count": 14, "tags": [], "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "id": 52449, "time": "2004-02-17T17:21:19Z", "bug_id": 27007, "creation_time": "2004-02-17T17:21:19Z", "is_private": false, "text": "I really think that we are solving here the wrong problem.\nIMHO, the bug here is not with subant, which as a task to execute <targets>\nshould decide what to do based on BuildException.\n\nTo me the problem here is that the core code that executes <tasks>\nANY tasks, should catch any unhandle exception, e, and throw a corresponding\nBuildException(e) in its place.\n\nThe point is that the invariant of the execution engine should be either to \nfinish succesfully, or to throw a BuildException, anything else is a bug in \nCORE."}, {"count": 15, "tags": [], "bug_id": 27007, "is_private": false, "text": "What Jose says makes an enormous ammount of sense and I like it, but it means\neither we are saying... \"well don't write npe's\" to the user or we would need to\nchange the way tasks are called to auto-wrap them in a try catch that converts\nany  exceptions into build exceptions. This could be a back compatability issue\nif people have custom tasks that call other tasks and rely on the non-build\nexceptions leaking out.\n\nPerhaps if the default inherited execute() looked like this:\n\ntry {\n   safeExecute()\n} catch (Exception e) { \n   throw new BuildException(e) \n}\n\nThen existing tasks could obtain the new behavior by replacing execute() with\nsafeExecute() and recompiling I think errors/generic throwables should not be\ncaught.", "id": 52461, "time": "2004-02-17T22:50:10Z", "creator": "gus.heck@olin.edu", "creation_time": "2004-02-17T22:50:10Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 27007, "attachment_id": null, "id": 52478, "time": "2004-02-18T10:50:17Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-02-18T10:50:17Z", "is_private": false, "text": "I think we are getting into a backward compatibility redhearing here.\nI see no reason why people would be even thinking such code should be\nsupported. So to me this is a bug fix, nothing else.\n\nIt make no sense to me to create a new safeExecute() method since ALL\ntasks all over will override execute() which means obtaining the \"correct\"\nbehaviour will have an extremely high cost of conversion, which eventually\nwill defeat the whole purpose of the fix.\n\nIn any case, the fix should probably be not in Task.execute(), but in \nTask.perform() to be exact on the catch block for RuntimeException. \nIf you look at the code in there it throws the original exception as is,\ninstead, I think, it should catch Throwable (I am being bold here),\nand convert it into a BuildException before doing what is doing now.\n\nTask.perform() is what the ANT engine calls, and if someone wants to\nsee the raw result, it can always call Task.execute() directly."}]
[{"count": 0, "attachment_id": 28337, "bug_id": 52673, "is_private": false, "id": 153813, "time": "2012-02-15T17:14:01Z", "creator": "geoffrey.simmons@uplex.de", "creation_time": "2012-02-15T17:14:01Z", "tags": [], "text": "Created attachment 28337\nReplay Sampler patch\n\nWe would like to contribute the Replay Sampler to JMeter; source code is attached. This sampler reads recorded HTTP requests from log files to replay the request traffic back to a server. The log files are assumed to contain the entire contents of requests, including all headers and bodies (such as POST data), as well as the time offsets at which the requests were received, relative to the beginning of the recording. The request traffic in each log is played back by an individual JMeter thread, so that the collection of log files represents the concurrency of incoming traffic.\n\nThe Replay Sampler differs from the Access Log Sampler in that it plays back complete request contents (headers and bodies), and reproduces concurrency.\n\nYou can prepare the request logs any way you like. To generate them from an Apache httpd server, we use a patched version of the mod_dumpio module, which records request traffic in the error log, and a Perl script that parses the error log to produce log files suitable for the Replay Sampler -- see the URL given for this bug report. This creates request log files for each Apache connection ID (always unique at any given time)."}, {"count": 1, "tags": [], "creator": "geoffrey.simmons@uplex.de", "attachment_id": null, "id": 153814, "time": "2012-02-15T17:30:19Z", "bug_id": 52673, "creation_time": "2012-02-15T17:30:19Z", "is_private": false, "text": "I forgot to add that this code has the side effect of adding a FileListEditor to the JMeter GUI -- an editable FileListPanel."}, {"count": 2, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "id": 154785, "time": "2012-03-10T17:20:51Z", "bug_id": 52673, "creation_time": "2012-03-10T17:20:51Z", "is_private": false, "text": "Hello,\nThanks for your contribution.\nI have some questions:\n- could you document th\u00e9 expected format used by the sampler\n- are there any standard tools to generate this format , from my understanding you customized an Apache module\n\nThanks\nRegards"}, {"count": 3, "tags": [], "bug_id": 52673, "is_private": false, "id": 154787, "attachment_id": null, "creator": "geoffrey.simmons@uplex.de", "creation_time": "2012-03-10T20:44:41Z", "time": "2012-03-10T20:44:41Z", "text": "Hello Philippe,\n\nThe log file format is documented in the javadocs (you can see it at the URL given above). The files configured into the sampler are expected to contain requests (all headers and bodies) in chronological order, separated by a line that gives the time offset of the request -- the time in milliseconds at which the request is to be replayed, relative to the beginning of the test. The format of the time offset is:\n\n\\002NNN\\003\\r\\n\n\nwhere NNN is a sequence of ASCII digits representing the offset (relative time in ms). That is, byte value 2, followed by digits, followed by byte value 3 and then CR/LF. The idea here was to make it very unlikely that something looking like such a record separator appears in the body of POST requests.\n\nApache mod_dumpio was the closest thing that we could find to record incoming request traffic, and even that wasn't quite enough, for two reasons:\n\n- Parts of request data from different connections are recorded concurrently by dumpio, with no way of knowing how to reconstruct the different parts of the same request.\n\n- The data is recorded into error_log, which has 1-second granularity for its time stamps, and you can't change the format.\n\nSo we modified dumpio to address those problems. We couldn't find any better way to record incoming requests in their entirety.\n\nWe're working on a new module for Apache httpd specifically for the purpose of recording, with lower impact than dumpio. After some testing and tweaking, we plan to offer it to the httpd project. A similar kind of thing could be built as a valve for the Catalina servlet engine. And of course, the request logs could be built any way at all, as far as the sampler is concerned. But as it is, unless we missed something in our search, there don't seem to be any standardized options for recording incoming requests in full.\n\n\nBest,\nGeoff"}, {"count": 4, "tags": [], "creator": "geoffrey.simmons@uplex.de", "attachment_id": null, "id": 154795, "time": "2012-03-11T09:30:15Z", "bug_id": 52673, "creation_time": "2012-03-11T09:30:15Z", "is_private": false, "text": "Thinking about this further, I'd say that tcpdump/Wireshark are tools in widespread use that could also be applied to record incoming traffic. But I don't think you can infer a standardized request log format from that."}, {"count": 5, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "As discussed on dev mailing list on march 19 2012 with subject :\nIssues 52673 / 52698 / 41545 / 52707 / 52502", "id": 155141, "time": "2012-03-20T20:39:32Z", "bug_id": 52673, "creation_time": "2012-03-20T20:39:32Z", "is_private": false, "attachment_id": null}]
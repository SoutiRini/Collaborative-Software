[{"count": 0, "tags": [], "text": "Two equal XLSX Files\nBoth are using conditional Formatting of the Background Color on e.g. Column 1\nNow, copy one Row of File1 to File2 using:\n\nfor (int i = 0; i < sourceRow.getLastCellNum(); i++) {\n\n    XSSFCellStyle newStyle = destSheet.getWorkbook().createCellStyle();\n    newStyle.cloneStyleFrom(oldCell.getCellStyle());      \n    newCell.setCellStyle(newStyle);\n\n\n    // Set the cell data type\n    newCell.setCellType(oldCell.getCellType());\n\n    // Set the cell data value\n    switch (oldCell.getCellType()) {\n    case Cell.CELL_TYPE_BLANK:\n        newCell.setCellValue(oldCell.getStringCellValue());\n        break;\n    case Cell.CELL_TYPE_BOOLEAN:\n        newCell.setCellValue(oldCell.getBooleanCellValue());\n        break;\n    case Cell.CELL_TYPE_ERROR:\n        newCell.setCellErrorValue(oldCell.getErrorCellValue());\n        break;\n    case Cell.CELL_TYPE_FORMULA:\n        newCell.setCellFormula(oldCell.getCellFormula());\n        break;\n    case Cell.CELL_TYPE_NUMERIC:\n        newCell.setCellValue(oldCell.getNumericCellValue());\n        break;\n    case Cell.CELL_TYPE_STRING:\n        newCell.setCellValue(oldCell.getRichStringCellValue());\n        break;\n    }\n}\n\nThe Row is copied, the values, the size, also the background colors and so on.\nBut the conditional formatting does not longer work for the\ncopied rows. \"Not working\" means: the cells background is white, even if the value is the right one.\n\nIf you use the cell formatting options (in excel) and simply click on \"No Color\" for Filling (which is already selected), and confirm it with OK, it works.", "is_private": false, "id": 197597, "creator": "dollinger.florian@gmx.de", "time": "2017-03-10T23:47:57Z", "bug_id": 60845, "creation_time": "2017-03-10T23:47:57Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60845, "attachment_id": null, "id": 197598, "time": "2017-03-11T01:18:29Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-11T01:18:29Z", "is_private": false, "text": "there is a workaround, if you set the FillPattern by hand via\n\nbla.setFillPattern(FillPatternType.SOLID_FOREGROUND);\n\nfor the cells which are in the range of some CF-rule, then the conditional formatting works. the problem then is, that the cells background becomes BLACK if the CF-rule(s) do not fire."}, {"count": 2, "tags": [], "bug_id": 60845, "attachment_id": 34815, "text": "Created attachment 34815\nThe resulting file, which is not correctly displayed in Excel, but in LibreOffice\n\nThe same problem holds for\n\nMap<String, Object> prop = new HashMap<>();\nprop.put(CellUtil.ROTATION, oldCell.getCellStyle().getRotation());\nCellUtil.setCellStyleProperties(newCell, prop);\n\ntherefore it is not a cloneStyle issue I guess.", "id": 197601, "time": "2017-03-11T10:06:54Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-11T10:06:54Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60845, "attachment_id": 34816, "is_private": false, "id": 197602, "time": "2017-03-11T11:02:52Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-11T11:02:52Z", "text": "Created attachment 34816\ncorrupted styles.xml, which causes the described behaviour\n\ni was able to find out which file in the .zip filestructure causes the problem, it is the styles.xml, i will also add another one - which was created by excel on the same basis - the latter is working"}, {"count": 4, "tags": [], "bug_id": 60845, "attachment_id": 34817, "text": "Created attachment 34817\nworking styles.xml", "id": 197603, "time": "2017-03-11T11:03:16Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-11T11:03:16Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 60845, "attachment_id": null, "id": 197610, "time": "2017-03-12T19:11:01Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-12T19:11:01Z", "is_private": false, "text": "Okay, the problem is the following:\n\nExcel applies conditional formatting only to two sorts of cells:\n1) those who have the default fillId=0\n2) those who have a patternType like \"solid\"\n\nBut POI creates a new one like:\n\n<patternFill>\n<fgColor indexed=\"64\"/>\n<bgColor indexed=\"64\"/>\n</patternFill>\n\nwhich does not fit any of those two sorts."}, {"count": 6, "tags": [], "text": "https://www.java-forums.org/apache-poi/96985-conditional-formatting-does-not-work-copied-cells.html#post417600", "attachment_id": null, "bug_id": 60845, "id": 197650, "time": "2017-03-14T10:06:24Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-14T10:06:24Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 60845, "attachment_id": null, "text": "Thanks for all your replies!\nI finally found out where the problem is:\n\n1) Excel shows conditional formatting if, and only if, the cell has fillId=0 (the default NONE one) OR if the fillStylePattern != NONE.\nThats a bug in Excel, not in POI.\n\n2) The problem is, that Excel is de facto \"Standard\".\nPOI calls like this to set the new Style: setCellStyleProperties >> setFormatProperties >> setFillPattern\n\nHere is what setFillPattern looks like:\n\nJava Code:\npublic void setFillPattern(FillPatternType pattern) {\n        CTFill ct = getCTFill();\n        CTPatternFill ctptrn = ct.isSetPatternFill() ? ct.getPatternFill() : ct.addNewPatternFill();\n \n        if (pattern == FillPatternType.NO_FILL && ctptrn.isSetPatternType()) {\n                ctptrn.unsetPatternType();\n        } else {\n                ctptrn.setPatternType(STPatternType.Enum.forInt(pattern.getCode() + 1));\n        }\n \n        addFill(ct);\n}\n\n\nIt (POI) does simply not check if the FillStyle does already exist, it always adds a new one. And in general, this is then not fullfilling condtions in 1)", "id": 197674, "time": "2017-03-15T10:40:21Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-15T10:40:21Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 60845, "attachment_id": 34835, "is_private": false, "id": 197690, "time": "2017-03-15T16:48:57Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-15T16:48:57Z", "text": "Created attachment 34835\na first idea how to patch it\n\nA first approach to fix the issue, works for now but is still in progress. The idea is to search the styles.xml for already existing fills before adding a new one with the same properties."}, {"count": 9, "tags": [], "bug_id": 60845, "attachment_id": null, "text": "Okay, I again looked at the code and problem I described at first is caused by the following thing:\n\ncloneStyleFrom adds the styles from the original to the destination like that:\n\n---\n\nCTFill fill = CTFill.Factory.parse(\n    src.getCTFill().toString(), DEFAULT_XML_OPTIONS\n);\n                  \naddFill(fill);\n\n---\n\nI dont't know why, but that results in the following CTFill-String:\n\n<xml-fragment xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\">\n  <main:patternFill patternType=\"none\"/>\n</xml-fragment>\n\nwhich is definitely not the same as\n\n<patternFill patternType=\"none\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"/>\n\nat least not syntactically.\n\n---\n\naddFill (StylesTable.java) now looks if the new FillStyle is already in the Set by fills.indexOf(newFill).\n\nindexOf is based on equals of XSSFCellFill, which does a string-Comparison!\n\n---\n\nOne way to patch that would be to change the equals function to a semantic comparison like:\n\npublic boolean equals(Object o) {\n  if (!(o instanceof XSSFCellFill)) return false;\n\n  XSSFCellFill cf = (XSSFCellFill) o;\n        \n        \n  return (\n    this.getFillBackgroundColor() == cf.getFillBackgroundColor()\n    && this.getFillForegroundColor() == cf.getFillForegroundColor()\n    && this.getPatternType() == cf.getPatternType()\n  );\n}\n\nThe downside is the deteriorated performance I guess. And you have to do the same on XSSFFont.java and XSSFCellBorder.java (and maybe more).\n\n---\n\nAnother way is to convert the \"fragments\" into normal XML inside cloneStyleFrom(),\nI am still looking for a way to do that reliable (using xmlbeans).", "id": 197729, "time": "2017-03-16T23:40:44Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-16T23:40:44Z", "is_private": false}, {"count": 10, "tags": [], "text": "The XML-Fragment results from the copy() function in CTFill!\n\n\n private CTFill getCTFill(){\n  CTFill ct;\n  // bug 56295: handle missing applyFill attribute as \"true\" because Excel does as well\n  if(!_cellXf.isSetApplyFill() || _cellXf.getApplyFill()) {\n    int fillIndex = (int)_cellXf.getFillId();\n    XSSFCellFill cf = _stylesSource.getFillAt(fillIndex);\n            \n    ct = (CTFill)cf.getCTFill().copy();\n    // ^^^^^^\n            \n  } else {\n      ct = CTFill.Factory.newInstance();\n  }\n  return ct;\n}", "attachment_id": null, "bug_id": 60845, "id": 197730, "time": "2017-03-17T00:21:02Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-17T00:21:02Z", "is_private": false}, {"count": 11, "attachment_id": 34837, "bug_id": 60845, "is_private": false, "id": 197732, "time": "2017-03-17T02:11:26Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-17T02:11:26Z", "tags": [], "text": "Created attachment 34837\npatched equals function"}, {"count": 12, "attachment_id": 34838, "bug_id": 60845, "is_private": false, "id": 197733, "time": "2017-03-17T02:11:51Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-17T02:11:51Z", "tags": [], "text": "Created attachment 34838\npatched equals function"}, {"count": 13, "tags": [], "text": "Created attachment 34839\npatched equals function", "is_private": false, "id": 197734, "creator": "dollinger.florian@gmx.de", "time": "2017-03-17T02:12:47Z", "bug_id": 60845, "creation_time": "2017-03-17T02:12:47Z", "attachment_id": 34839}, {"count": 14, "tags": [], "bug_id": 60845, "attachment_id": 34840, "id": 197735, "time": "2017-03-17T02:18:03Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-17T02:18:03Z", "is_private": false, "text": "Created attachment 34840\npatched equals functions for XSSFFont, XSSFCellFill and XSSFCellBorder\n\nThis patch changes the equals functions to a semantic one, rather than the former syntactic one"}, {"count": 15, "tags": [], "text": "Please note that providing a diff instead of the whole source of the files would be better as the whole files can quickly become outdated due to other changes to the codebase and thus will make applying the changes more and more difficult over time. \n\nSee http://poi.apache.org/guidelines.html#SubmittingPatches for some automated ways of creating the patch-files.\n\nAlso ideally some additional unit-tests accompany a patch so the changes are verified and stay in place correctly through future changes to the code.", "is_private": false, "id": 197797, "creator": "dominik.stadler@gmx.at", "time": "2017-03-19T07:43:03Z", "bug_id": 60845, "creation_time": "2017-03-19T07:43:03Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 60845, "attachment_id": 34846, "text": "Created attachment 34846\npatch as a diff file (git)\n\nHey Dominik,\nthanks for the advice, i added the patch diff file - i am not very familiar with jUnit, but I will give it a try. Btw.: Should the current repository jUnit tests run without any errors?", "id": 197809, "time": "2017-03-19T20:56:15Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-19T20:56:15Z", "is_private": false}, {"count": 17, "tags": [], "text": "back to NEW", "is_private": false, "id": 197810, "creator": "dollinger.florian@gmx.de", "time": "2017-03-19T20:56:50Z", "bug_id": 60845, "creation_time": "2017-03-19T20:56:50Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 60845, "attachment_id": null, "is_private": false, "id": 197812, "time": "2017-03-19T21:34:20Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-19T21:34:20Z", "text": "Yes, unit-tests are expected to run fine always, we had some failures on Windows recently, but they should be fixed again. \n\nIf they fail for you, please post on the dev-mailing-list so we can discuss if it is a dev-setup-issue or a problem in the tests themselves."}, {"count": 19, "tags": [], "bug_id": 60845, "attachment_id": 34847, "is_private": false, "id": 197822, "time": "2017-03-20T13:07:34Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:07:34Z", "text": "Created attachment 34847\nbetter version"}, {"count": 20, "tags": [], "bug_id": 60845, "attachment_id": 34848, "id": 197823, "time": "2017-03-20T13:07:58Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:07:58Z", "is_private": false, "text": "Created attachment 34848\ncorrected test cases"}, {"count": 21, "tags": [], "text": "Created attachment 34849\nversion 3: non-forced font registration\n\nagain a new version with a non-forced font registration (does not create a new one if the cloned one is available)", "is_private": false, "id": 197824, "creator": "dollinger.florian@gmx.de", "time": "2017-03-20T13:48:49Z", "bug_id": 60845, "creation_time": "2017-03-20T13:48:49Z", "attachment_id": 34849}, {"count": 22, "tags": [], "bug_id": 60845, "attachment_id": 34850, "id": 197825, "time": "2017-03-20T13:49:37Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:49:37Z", "is_private": false, "text": "Created attachment 34850\nversion 3: non-forced font registration\n\nagain a new version with a non-forced font registration (does not create a new one if the cloned one is available)"}, {"count": 23, "tags": [], "text": "Created attachment 34851\ncorrected imports", "is_private": false, "id": 197826, "creator": "dollinger.florian@gmx.de", "time": "2017-03-20T13:55:54Z", "bug_id": 60845, "creation_time": "2017-03-20T13:55:54Z", "attachment_id": 34851}, {"count": 24, "tags": [], "bug_id": 60845, "attachment_id": 34852, "text": "Created attachment 34852\ncorrected imports\n\nmarked as patch and obsolete versions", "id": 197827, "time": "2017-03-20T13:56:42Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:56:42Z", "is_private": false}, {"count": 25, "tags": [], "text": "Created attachment 34853\ntestcases", "attachment_id": 34853, "bug_id": 60845, "id": 197828, "time": "2017-03-20T13:57:15Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:57:15Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 60845, "attachment_id": 34854, "id": 197829, "time": "2017-03-20T13:58:20Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-20T13:58:20Z", "is_private": false, "text": "Created attachment 34854\njava source\n\nlooks like i am too stupid to use bugzilla xD"}, {"count": 27, "tags": [], "bug_id": 60845, "attachment_id": 34856, "is_private": false, "id": 197858, "time": "2017-03-21T06:57:35Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-21T06:57:35Z", "text": "Created attachment 34856\nsrc patch, minor changes"}, {"count": 28, "tags": [], "bug_id": 60845, "attachment_id": 34871, "is_private": false, "id": 197933, "time": "2017-03-23T11:17:39Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-23T11:17:39Z", "text": "Created attachment 34871\nsrc, version 6: improved equals method"}, {"count": 29, "tags": [], "text": "Comment on attachment 34871\nsrc, version 6: improved equals method\n\nWhat is the purpose of this adjustment, It appears multiple times in your changes.\n\n-        if(!(o instanceof XSSFFont)) return false;\n+        \n+        if (this == o) \n+            return true;\n+        if (o == null) \n+            return false; \n+        if (o.getClass() != getClass()) \n+            return false;\n\nHow does the new code provide a different outcome? Aren't you just replacing a java construct with a bit of reflection?", "is_private": false, "id": 197934, "creator": "jmarkmurphy@apache.org", "time": "2017-03-23T11:45:06Z", "bug_id": 60845, "creation_time": "2017-03-23T11:45:06Z", "attachment_id": 34871}, {"count": 30, "tags": [], "bug_id": 60845, "attachment_id": null, "is_private": false, "id": 197944, "time": "2017-03-23T19:39:17Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-23T19:39:17Z", "text": "For:\n\n+        if (this == o) \n+            return true;\n\nI would say it's a bit faster if the object is identical to o (in terms of \"same\" not just \"equal\") - since the method returns immediately then. But maybe that's not the case too often...\n\n\nThe other two if's is just what i personally like\n+        if (o == null) \n+            return false; \n+        if (o.getClass() != getClass()) \n+            return false;\n\nDo you think it's slower in summary? It's not necessary to do it that way... I just thought that the Patch is not applied yet and I can modify it however I want xD"}, {"count": 31, "attachment_id": null, "bug_id": 60845, "is_private": false, "id": 197945, "time": "2017-03-23T19:57:43Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2017-03-23T19:57:43Z", "tags": [], "text": "(In reply to dollinger.florian from comment #30)\n> For:\n> \n> +        if (this == o) \n> +            return true;\n> \n> I would say it's a bit faster if the object is identical to o (in terms of\n> \"same\" not just \"equal\") - since the method returns immediately then. But\n> maybe that's not the case too often...\n> \n> \n> The other two if's is just what i personally like\n> +        if (o == null) \n> +            return false; \n> +        if (o.getClass() != getClass()) \n> +            return false;\n> \n> Do you think it's slower in summary? It's not necessary to do it that way...\n> I just thought that the Patch is not applied yet and I can modify it however\n> I want xD\n\nWell, there is a great debate about which is correct, but in this case, sticking with instanceof seems correct to me simply because changing to getClass is an unnecessary breaking change. Unless there is a bug introduced by the instanceof, I would keep it."}, {"count": 32, "attachment_id": null, "bug_id": 60845, "is_private": false, "id": 197960, "time": "2017-03-24T06:34:40Z", "creator": "dollinger.florian@gmx.de", "creation_time": "2017-03-24T06:34:40Z", "tags": [], "text": "Well, I was thinking since yesterday why and which one is preferable over the other and came to the conclusion that the method I used is maybe a bit more reliable, since\n\na.getClass() == b.getClass()\n\nreturns TRUE only, if the two Classes are really the same. In contrast,\n\na instanceOf bClass\n\nreturns also true, if a is of a subclass of b.\nI think that violates the equals contract on transitivity.\n\nI also found a website telling the same: http://onewebsql.com/blog/on-equals"}]
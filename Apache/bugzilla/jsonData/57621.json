[{"count": 0, "tags": [], "bug_id": 57621, "attachment_id": null, "is_private": false, "id": 181250, "time": "2015-02-23T11:58:33Z", "creator": "andrew-c.brown@ubs.com", "creation_time": "2015-02-23T11:58:33Z", "text": "Here's the message and its replies that I posted to the tomcat-users mailing list. The verbose description of the bug is in my original message and the actual lines of code that would fix it if they were run are included in my final followup at the bottom.\n\n> > From: Mark Thomas [mailto:markt@apache.org] On 19/02/2015 13:05, \n> > andrew-c.brown@ubs.com wrote:\n> > > Not sure whether the responsibility lies here or with spring so I \n> > > thought I'd ask here first. Here's the scenario.\n> > >\n> > > We have a Jetty 9.2.7 async reverse proxy. It always sends back to \n> > > the servers behind using chunked encoding.\n> > >\n> > > We have backend servers built around embedded 7.0.23 (also tested \n> > > the latest 7.0.59).\n> > >\n> > > Jetty is configured to make SSL connections to these servers. SSL \n> > > is not the issue, though it may make it easier to reproduce. I can \n> > > reproduce this issue at will.\n> > >\n> > > Our backend servers are using Spring MVC with automatic argument \n> > > assignment where some argument values come from decoded JSON in\n> the\n> > > body. For example:\n> > >\n> > > @RequestMapping(method = RequestMethod.PUT, value = SOME_URL)\n> > >\n> > > public @ResponseBody WebAsyncTask<SomeObject>\n> > ourMethod(@RequestBody\n> > > @Valid final SomeObject f, @Min(1) @PathVariable(SOME_ID) final \n> > > long someId, final HttpServletRequest request) {\n> > >\n> > > }\n> > >\n> > > Here's the issue.\n> > >\n> > > Using Wireshark I noticed that quite often the first TCP segment \n> > > passed from Jetty to the backend server contained the entire PUT \n> > > request\n> > > **except** (and this is important) the final 7 bytes chunk terminator.\n> > > That arrives in the next segment on the wire.\n> > >\n> > > \\r\\n\n> > > 0\n> > > \\r\\n\n> > > \\r\\n\n> > >\n> > > The nearly-complete segment causes Tomcat to wake up and start \n> > > processing the request. To cut a very long call stack short, the \n> > > automatic method argument assignment kicks into life and runs the \n> > > Jackson JSON parser to read the incoming body data using \n> > > org.apache.coyote.http11.filters.ChunkedInputFilter. Enough data \n> > > is present in the buffer to fully process the request so our \n> > > method is called with all the correct parameters and it does its \n> > > stuff and sends back a response.\n> > >\n> > > That's where it should end, but it doesn't.\n> > >\n> > > The remaining 7 bytes arrive on the wire and wake up Tomcat's NIO \n> > > loop again. Tomcat thinks it's a new request since the previous \n> > > one has been completely handled. This causes a 400 Bad Request to \n> > > be sent back up the wire following on from the correct response, \n> > > and the connection is terminated which causes a closed connection \n> > > to be present in Jetty's connection pool. That's bad.\n> > >\n> > > My opinion is that the Jackson JSON parser shouldn't have to care \n> > > about the type of stream it's reading from so the responsibility \n> > > should be with the chunked input stream to ensure that it doesn't \n> > > get into this state. Perhaps if it were to always read ahead the \n> > > next chunk size before handing back a completed chunk of data then \n> > > it could ensure that the trailing zero is always consumed.\n> > >\n> > > Any thoughts?\n> >\n> > This sounds like a Tomcat bug but it will need some research to \n> > figure out what is happening and confirm that.\n> >\n> > As an aside, the JSON parser should read until it gets a -1 (end of \n> > stream). I suspect it is using the structure of the JSON to figure \n> > out where the data ends and isn't doing the final read.\n> >\n> > When the request/response is completed Tomcat should do a blocking \n> > read until the end chunk has been read. That this isn't happening is \n> > what makes me think this is a Tomcat bug.\n> \n> The JSON parser is calling ObjectMapper._readMapAndClose(). This \n> completes its read - as far as its concerned it's finished - and it \n> calls close() on its JsonParser parameter. That stream close() call is \n> implemented by CoyoteInputStream.close(). This, in turn calls\n> org.apache.catalina.connector.InputBuffer.close() which just sets a \n> private 'closed' flag. The filters have an end method() and \n> ChunkedInputFilter uses it to seek to the end but that's never called.\n> \n> A good place to clean up the request filters held in \n> org.apache.coyote.http11.AbstractInputBuffer would appear to be in \n> org.apache.catalina.connector.close(), but I'm not familiar enough \n> with the async workflow to know if that's correct or not.\n\nSome more info. Inside the \"org.apache.coyote.http11. AbstractHttp11Processor<S>.process\" method there is this cleanup code after the main request while() loop:\n\n            // Finish the handling of the request\n            rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);\n\n            if (!isAsync() && !comet) {\n                if (error) {\n                    // If we know we are closing the connection, don't drain\n                    // input. This way uploading a 100GB file doesn't tie up the\n                    // thread if the servlet has rejected it.\n                    getInputBuffer().setSwallowInput(false);\n                }\n                endRequest();\n            }\n\nNote the call to endRequest(). If I make my methods synchronous (i.e. remove WebAsyncMethod<>) then isAsync() returns false, this cleanup block is entered, endRequest() is called, ChunkedInputFilter.end() is called and the trailing metadata is consumed. All is good. Only when methods are async is this block skipped and the cleanup missed.\n\nI'm sure it was coded this way for a good reason but perhaps there have been unintended consequences."}, {"count": 1, "tags": [], "bug_id": 57621, "attachment_id": null, "id": 181456, "time": "2015-03-03T09:31:56Z", "creator": "markt@apache.org", "creation_time": "2015-03-03T09:31:56Z", "is_private": false, "text": "Thanks for the report. This has been fixed in trunk, 8.0.x (for 8.0.21 onwards) and 7.0.x (for 7.0.60 onwards).\n\nYour analysis was heading in the right direction. The block you identified did need to be called but after the AsyncContext has completed. This meant adding a hook so that it could be called from the right place."}]
[{"count": 0, "tags": [], "bug_id": 6077, "text": "If you inherit Priority class and try to recreate your priority object after \nserializing you get NoSuchMethodException in readPriority() method.\n\nThe fix to this problem is when calling the correct method by reflection we \nneed to use getMethod(String name, Class[] parameterTypes) method of Class.java \ninstead of getDeclaredMethod(String name, Class[] parameterTypes) method as the \nmethods we are looking for [toPriority ()] are in parent class (Priority.java)", "id": 9993, "time": "2002-01-28T20:54:05Z", "creator": "sarjesh1@hotmail.com", "creation_time": "2002-01-28T20:54:05Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6077, "is_private": false, "id": 9995, "attachment_id": null, "creator": "ceki@apache.org", "creation_time": "2002-01-28T22:01:47Z", "time": "2002-01-28T22:01:47Z", "text": "\nThe serialization of Priority subclasses is know to work. Can you provide an \nexample that doesn't? Thanks, Ceki"}, {"count": 2, "tags": [], "bug_id": 6077, "text": "Here is the example code:\n\nInherited Category class\n\nimport org.apache.log4j.Category;\n\npublic class MyCategory extends Category {\n\n    public MyCategory(String name)\n    {\n        super(name);\n    }\n}\n\nInherited Priority class:\nimport org.apache.log4j.Priority;\n\npublic class MyPriority extends org.apache.log4j.Priority {\n\n\tfinal static public MyPriority ERROR =\n\t\tnew MyPriority(\n\t\t\tPriority.ERROR.toInt(),\n\t\t\tPriority.ERROR.toString(),\n\t\t\tPriority.ERROR.getSyslogEquivalent());\n\tfinal static public MyPriority WARN =\n\t\tnew MyPriority(\n\t\t\tPriority.WARN.toInt(),\n\t\t\tPriority.WARN.toString(),\n\t\t\tPriority.WARN.getSyslogEquivalent());\n\tfinal static public MyPriority INFO =\n\t\tnew MyPriority(\n\t\t\tPriority.INFO.toInt(),\n\t\t\tPriority.INFO.toString(),\n\t\t\tPriority.INFO.getSyslogEquivalent());\n\tfinal static public MyPriority DEBUG =\n\t\tnew MyPriority(\n\t\t\tPriority.DEBUG.toInt(),\n\t\t\tPriority.DEBUG.toString(),\n\t\t\tPriority.DEBUG.getSyslogEquivalent());\n\n        // Replicated from Priority (superclass)\n        final static int FATAL_INT = 50000;\n        final static int ERROR_INT = 40000;\n        final static int WARN_INT  = 30000;\n        final static int INFO_INT  = 20000;\n        final static int DEBUG_INT = 10000;\n\n\t/**\n\tInstantiate a priority object.\n\t*/\n\tprotected MyPriority(int level, String levelStr, int syslogEquivalent) {\n\t\tsuper(level, levelStr, syslogEquivalent);\n\t}\n\t/**\n\t * Description: (Copy constructor) Calls the <code>super</code> \nconstructor\n\t * with the int, String, and SysLogEquivalent fields of the\n\t * Priority.\n\t *\n\t * @param priority org.apache.log4j.Priority\n\t */\n\tpublic MyPriority(Priority priority) {\n\t\tsuper(priority.toInt(), priority.toString(), \npriority.getSyslogEquivalent());\n\t}\n\n}\n\nMain Test class:\n\n\nimport java.io.*;\nimport org.apache.log4j.Priority;\nimport org.apache.log4j.spi.*;\nimport org.apache.log4j.*;\nimport java.lang.*;\n\n/**\n *  Description of the Class\n *\n *@author     Sarjesh Patel\n *@created    January 25, 2002\n */\n\npublic class Driver\n{\n    public static void main(String args[])\n    {\n        MyPriority p = new MyPriority(Priority.DEBUG);\n        MyCategory cat = new MyCategory(\"MyCategory\");\n        Object obj = \"My Message\";\n        LoggingEvent event = new LoggingEvent(\"MyClass\", cat ,p,obj,null);\n\n        ObjectOutputStream OOst = null;\n        ObjectInputStream OIst = null;\n        LoggingEvent evt = null;\n\n\n        try\n        {\n            OOst = new ObjectOutputStream(new FileOutputStream(\"Object.txt\"));\n            OOst.writeObject((Object)event);\n            OIst = new ObjectInputStream(new FileInputStream(\"Object.txt\"));\n            evt = (LoggingEvent)OIst.readObject();\n        }\n        catch(Throwable e)\n        {\n            System.out.println(\"###########################################\");\n            e.printStackTrace();\n            System.out.println(\"##########################################\");\n        }\n\n       System.exit(0);\n}\n}\n", "id": 10000, "time": "2002-01-28T23:36:10Z", "creator": "sarjesh1@hotmail.com", "creation_time": "2002-01-28T23:36:10Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 6077, "text": "\nSarjesh,\n\nThank you for the reproducible bug report. I appreciate it. The usage of the\nClass.getDeclaredMethod instead of Class.getMethod is\nintentional. This requirement stems for the fact that Level subclasses\nMUST implement the toLevel(int) method. Actually, it does not make\nsense for Level subclasses NOT to implement this method. Also note\nthat only Level can be subclassed and not Priority.\n\nFrom my standpoint, the log4j code behaves as it should. Regards, Ceki\n\n", "id": 15349, "time": "2002-05-02T17:23:53Z", "creator": "ceki@apache.org", "creation_time": "2002-05-02T17:23:53Z", "is_private": false, "attachment_id": null}]
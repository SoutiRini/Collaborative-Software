[{"count": 0, "attachment_id": null, "bug_id": 44782, "text": "After months of trying to figure out what triggers this error:\n\n[Tue Apr 08 18:48:41 2008] [error] [client 123.456.789.012] (104)Connection reset by peer: ap_content_length_filter: apr_bucket_read() failed, referer: http://www.anydomain.com/someform.html\n\nI finally found how to duplicate this on any Apache server. I've found this to be true with all versions from 2.2.4 (earliest 2.x version I have) to 2.2.8 (latest).\n\nLinux CentOS (2.6.18-53.1.14.el5) completely up-to-date. Apache compiled from source. Using mod_perl compiled like this:\n\nshell> perl Makefile.PL MP_USE_STATIC=1 \\\nMP_AP_PREFIX=/usr/local/src/httpd-2.2.8 \\\nMP_AP_CONFIGURE=\"--with-mpm=worker \\\n--enable-nonportable-atomics=yes \\\n--prefix=/usr/local/etc/httpd \\\n--enable-so \\\n--enable-expires \\\n--enable-headers \\\n--enable-rewrite \\\n--with-ssl=/usr/local/src/openssl-0.9.8g \\\n--enable-ssl \\\n--disable-autoindex \\\n--disable-userdir\"\n\nAll it takes to produce the above error with Apache is to send a post to a cgi script that does not handle the post data. Example program (test.cgi - not running in mod_perl):\n\n<--snip-->\n#!/usr/bin/perl -w\n$| = 1;\n\nprint \"Content-type: text/html\\n\\n\";\nprint <<\"end_of_html\";\n<html>\n<head>\n<title>your title</title>\n</head>\n<body>\nanything\n</body>\n</html>\nend_of_html\n\nexit();\n<--snip-->\n\nNow setup a simple HTML form and post to the above program:\n\n<--snip-->\n<html>\n<head>\n<title>your title</title>\n</head>\n<body>\n<form action=\"/cgi-bin/test.cgi\" method=\"post\">\n<input type=\"submit\" name=\"test\" value=\"Test It\">\n</form>\n</body>\n</html>\n<--snip-->\n\n(notice the \"name='test'\" as some data is required.) The above will cause the browser to hang after post triggering the browser to disconnect from the server and will always produce the above error guaranteed! Change from POST to GET and no \"Connection reset by peer\" error. The test.cgi script will exit properly, but Apache keeps the connection alive and then the browser disconnects.\n\nI have tested this with Linux Firefox/1.5.0.12 - 2.0.0.13, Opera 9.26 as well as on Windows XP Professional with Firefox/2.0.0.13 and IE 7.0.5730.11.\n\nNote: If you add this to the top of the test.cgi program:\n\nread(STDIN, my $buffer, $ENV{'CONTENT_LENGTH'});\n\nNo disconnect is encountered.\n\nI believe this to be an Apache problem as all earlier versions of Apache did not behave in this manner.", "id": 115443, "time": "2008-04-08T21:46:12Z", "creator": "j_and_t@hotmail.com", "creation_time": "2008-04-08T21:46:12Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "j_and_t@hotmail.com", "attachment_id": null, "is_private": false, "id": 116191, "time": "2008-05-02T22:06:57Z", "bug_id": 44782, "creation_time": "2008-05-02T22:06:57Z", "text": "Is there a point in posting? Doesn't seem anything, not even a comment about this. Is it not worthy?"}, {"count": 2, "tags": [], "bug_id": 44782, "is_private": false, "id": 116223, "creation_time": "2008-05-04T11:42:46Z", "time": "2008-05-04T11:42:46Z", "creator": "vinci.cat@gmail.com", "text": "I encounter same bug with mod_perl 2.0.2 (perl 5.8.8), on apache 2 running at worker mode (apache2-mpm-worker) 2.2.4 on Ubuntu 7.10. Everything come from apt-get.\n\nFortunately, if you using GET at all the time you won't notice by this bug  \n\nThe solution works but this is not graceful if I need to do that on all cgi-script that receive POST request.\n\nActually this bug will causing unexpected 500 error when running with mod_security. \n", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "j_and_t@hotmail.com", "is_private": false, "count": 3, "id": 116371, "time": "2008-05-08T00:48:48Z", "bug_id": 44782, "creation_time": "2008-05-08T00:48:48Z", "text": "Yes this is a big bug and I don't know why no one from Apache has even commented on this post. My temporary solution so far is to add this line to programs before exit:\n\nif ($ENV{'CONTENT_LENGTH'}) {while (<STDIN>){}}\n\nVinci, you state it is not a problem with GET, but the problem is mainly if you use \"GET\" in your application and do not write for a POST. Some bots out there may try using your GET method forms/links, but instead may send a POST and that's where the problem is. Plus bots or any malicious user could try sending HUGE amounts of data via a POST bringing your server down as Apache waits for the POST data to be read. My solution to prevent this has been to limit how much of the $ENV{'CONTENT_LENGTH'} I would read in, but with this bug it just hangs your server until the client has finished sending their POST. The only solution I've been able to come up with is the one above, but it is band-aide rather than a fix. I sure wish someone from Apache would at least comment on this."}, {"count": 4, "tags": [], "bug_id": 44782, "text": "This works as designed. It is the task of the cgi script to swallow the whole request body prior to sending a response, whether it uses it for some purpose or not.", "id": 116373, "time": "2008-05-08T04:19:26Z", "creator": "rpluem@apache.org", "creation_time": "2008-05-08T04:19:26Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "j_and_t@hotmail.com", "attachment_id": null, "is_private": false, "id": 116571, "time": "2008-05-13T08:45:43Z", "bug_id": 44782, "creation_time": "2008-05-13T08:45:43Z", "text": "Of course this \"as designed\" is not good. You are asking everyone to modify everything they've done in past years to accept and \"gobble up\" all incoming \"request body\" (post, get, head and ?) content even though their programs may not be parsing incoming data. \n\nSome programs are designed to do nothing more but fetch a static document or print an image or ? and be triggered by nothing more than the execution of their script. Many programs may do nothing more than generate a cookie. But you are now asking us to create Microsoft bloatware to handing incoming data by either including our own routines to gobble things up (any kind of request) or include libraries (id, like Perl use CGI) in our code to create bloatware so that Apache terminates the \"bad\" connection! NOT GOOD!\n\nPersonally I do not agree with this as designed. This is obviously a change that either I missed or was not documented in the changes. As far as I know this was never a problem in past versions of Apache. \n\nWith the growing number of worms and viruses, developers would rather NOT \"gobble up\" incoming data if our program is not going to use it. Nor do we want to include libraries or write code to gobble every possible type of incoming data. Apache should accept our \"exit\" code from our program and terminate the connection between client and server regardless of the reason for our \"exit\" code. By keeping connections between client and server open after our exit you are asking for trouble. The more worms hitting the server that you keep active the more vunerable our Apache server is. You are asking us to re-develop everything we've done to handle all or any type of incoming data. For me I feel this is a burden you are asking us to take on.\n\nJust my opinion of this which I'm sure others share."}, {"count": 6, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "is_private": false, "id": 116575, "time": "2008-05-13T12:00:48Z", "bug_id": 44782, "creation_time": "2008-05-13T12:00:48Z", "text": "Sorry but this behaviour is there for ages (at least since 2.0.x) and it does not put a large burden on the cgi script developer. Simply read all the data from standard input and throw it away immediately without any further handling or just close the stdin file handle in your cgi script and you are done. If you close the stdin filehandle in your cgi script httpd will take the task and the burden to swallow all incoming data and discard it.\nIf you don't like doing this configure you cgi scripts via <limit> to only accept GET requests."}]
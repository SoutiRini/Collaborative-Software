[{"count": 0, "tags": [], "bug_id": 61857, "is_private": false, "id": 202575, "creation_time": "2017-12-05T12:27:01Z", "time": "2017-12-05T12:27:01Z", "creator": "markusgausling@googlemail.com", "text": "Issue was found in Apache 2.4.10 and is still available in trunk. The Apache 2.4.10 is not verifying URL hostname against certificate in SSL handshake for WebSockets even when SSLProxyCheckPeerCN and/or SSLProxyCheckPeerName are enabled.\n\nConfigure Apache as a \"WebSocket Relay\" that allows local clients to connect to (local) \u200bApache using \"ws://\" and Apache then maps this to \"wss://\" and passes the request on to the actual serving backend.\n\nDefine a Virtual Host for this:\n    <VirtualHost 127.0.0.1:8888>\n        SSLProxyEngine On\n        ProxyRequests Off\n\n        <Proxy \"*\">\n            Order deny,allow\n            Deny from all\n            Allow from 127.0.0.1\n        </Proxy>\n\n        ProxyPass /websocket/ wss://mywebsocket.org/\n    </VirtualHost>\n\nA local request to Apache for ws://\u200b127.0.0.1:8888/\u200bwebsocket/would end up in a request to wss://mywebsocket.org/.\n\nDefine the following security option (amongst others):\n    SSLProxyCheckPeerCN on\n    SSLProxyCheckPeerName on\n    SSLProxyCheckPeerExpire on\n    SSLProxyCACertificateFile \"/opt/apache2/mycert.pem\"\n    SSLProxyVerify require\n    SSLProxyVerifyDepth 1\n\nWhile Apache properly checks if the server provided certificate is not expired and also matches mycert.pem it does not validate the subject name or the subject alternative names.\n\nThis is a security hole and means e.g. when mapping the IP address of mywebsocket.org in /etc/hosts on Linux to e.g. to myotherwebsocket.org, then Apache establishes a secure connection to mywebsocket.org however it does not complain about the mismatch of the hostname in the request (\"myotherwebsocket.org\") vs. the one in the certificate provided during TLS session establishment (\"mywebsocket.org\").\n\nDoing a similar thing for HTTP (define Reverse Proxy which does http-to-https mapping) works, i.e. Apache corectly refuses the connection as it realizes that name in certificate provided by server and hostname in request URL do not match.\n\n========================================\nSource of Apache 2.4.10 \n-----------------------\nThe function ssl_io_filter_handshake() (in modules/ssl/ssl_engine_io.c) checks the peer hostname or the URL (depending on the Apache configuration) against the CN, agsinst the name or the subjectAltNames in the peer provided certificate.\nIt does this only if hostname_note is not empty:\n  const char *hostname_note = apr_table_get(c->notes,\n                                            \"proxy-request-hostname\");\n\n                                              \nIn proxy_http_handler() of module/proxy/mod_proxy_http.c the connection establishment with the backend stores \"proxy-request-hostname\":\n\n    /* Step Three: Create conn_rec */\n    backconn = backend->connection;\n    if (!backconn) {\n        if ((status = ap_proxy_connection_create_ex(proxy_function,\n                                                    backend, r)) != OK)\n            break;\n        backconn = backend->connection;\n\n        /*\n         * On SSL connections set a note on the connection what CN is\n         * requested, such that mod_ssl can check if it is requested to do\n         * so.\n         */\n        if (backend->ssl_hostname) {\n            apr_table_setn(backend->connection->notes,\n                           \"proxy-request-hostname\",\n                           backend->ssl_hostname);\n        }\n    }\n        \nFor the WebSocket tunneling in function proxy_wstunnel_handler() (in file: modules/proxy/mod_proxy_wstunnel.c) adding \"proxy-request-hostname\" is missing and as a result later in the TLS/SSL handshake the check is not done.\n\n========================================\n\nMy proposed fix is to add the same code used in the HTTP case for the WebSockets  in function proxy_wstunnel_handler() (file: modules/proxy/mod_proxy_wstunnel.c) as well:\n\n  /* Step Three: Create conn_rec */\n  if (!backend->connection) {\n      if ((status = ap_proxy_connection_create(scheme, backend,\n                                               c, r->server)) != OK)\n          break;\n\n+      /*\n+       * On SSL connections set a note on the connection what CN is\n+       * requested, such that mod_ssl can check if it is requested to do\n+       * so.\n+       */\n+       if (backend->ssl_hostname) {\n+           apr_table_setn(backend->connection->notes,\n+                          \"proxy-request-hostname\",\n+                          backend->ssl_hostname);\n      }\n  }\n    \nThis is 2.4.10 code but the code in trunk looks slightly different but the fix should be similar.", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 61857, "text": "Thanks for the report and patch.\n\nCommitted in r1818726, such that SSLProxyCheckPeer* directives can be used for any proxy module (with SSL backend connections).\n\nDoes that work for you?", "id": 202846, "time": "2017-12-19T22:49:30Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-12-19T22:49:30Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 61857, "text": "Yes looks good. \n\nThanks\nMarkus", "id": 202888, "time": "2017-12-22T10:31:53Z", "creator": "markusgausling@googlemail.com", "creation_time": "2017-12-22T10:31:53Z", "tags": [], "is_private": false}]
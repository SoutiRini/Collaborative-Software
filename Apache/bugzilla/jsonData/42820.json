[{"count": 0, "tags": [], "bug_id": 42820, "text": "A ClassLoader issue is causing NoSuchAlgorithmException to be thrown when\nloading a Provider implementation from the getImpl() method in XMLDigSecurity\nobject. The bug manifests within a J2EE application container when two separate\napplications (EAR files) register and reference providers using the local\nClassLoader provided by the container. The following scenario causes the failure\ncondition: Application A (within one EAR file) registers a security provider in\nthe java.security.Security object, which is loaded by the primordial class\nloader. At some later point, application B (in another EAR file) instantiates\nthe security provider loaded by A. The getImpl method in XMLDigSecurity\ndetermines the base class typeClass using the class member value (such as\njavax.xml.crypto.TransformService.class) and thus implicitly loads this class\nvia the current class loader. A call to doGetImpl loads the implementation class\nusing the class loader of the provider registered in java.security.Security and\nthen does a super class check between the the base class and the loaded\nimplementation class. Since the type class is loaded from the class loader in B\nand the implementation is loaded by class loader in A, the super class check\nfails and a NoSuchAlgorithmException is thrown.", "id": 105102, "time": "2007-07-05T11:33:19Z", "creator": "jwashington@thezenith.com", "creation_time": "2007-07-05T11:33:19Z", "is_private": false, "attachment_id": null}, {"count": 1, "text": "Created attachment 20455\nXMLDigSecurity.java patch\n\nThe patch changes XMLDigSecurity.java to use the current class loader to load\nthe provider implementation class rather then the provider class loader. This\nshould not cause any issues with scenarios that currently work given that for\nthe XMLDigSecurity to work, the class loaders needed to be arranged in a\nhierarchy. This fix removes that requirement.", "bug_id": 42820, "attachment_id": 20455, "id": 105103, "time": "2007-07-05T11:40:59Z", "creator": "jwashington@thezenith.com", "creation_time": "2007-07-05T11:40:59Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "id": 105297, "time": "2007-07-11T09:37:39Z", "bug_id": 42820, "creation_time": "2007-07-11T09:37:39Z", "is_private": false, "text": "(In reply to comment #1)\n> Created an attachment (id=20455) [edit]\n> XMLDigSecurity.java patch\n> \n> The patch changes XMLDigSecurity.java to use the current class loader to load\n> the provider implementation class rather then the provider class loader. This\n> should not cause any issues with scenarios that currently work given that for\n> the XMLDigSecurity to work, the class loaders needed to be arranged in a\n> hierarchy. This fix removes that requirement.\n\nThis patch causes the existing ClassLoaderTest\n(src_unitTests/javax/xml/crypto/test/dsig/ClassLoaderTest) to fail. I'm not\nsure why it is failing yet, but this will need to be further investigated\nbefore I apply the patch.\n\nAlso, it it possible you could provide a small test case using multiple class\nloaders (similar to the ClassLoaderTest) that reproduces this bug? I want to\nmake sure it doesn't come back again.\n\n"}, {"count": 3, "tags": [], "bug_id": 42820, "text": "Created attachment 20493\nXMLDigSecurity.java patch\n\nI tracked down the unit test failure and provided a new patch that fixes the\nproblem.", "id": 105299, "time": "2007-07-11T13:37:00Z", "creator": "jwashington@thezenith.com", "creation_time": "2007-07-11T13:37:00Z", "is_private": false, "attachment_id": 20493}, {"count": 4, "tags": [], "creator": "jwashington@thezenith.com", "attachment_id": 20494, "is_private": false, "id": 105300, "time": "2007-07-11T13:44:02Z", "bug_id": 42820, "creation_time": "2007-07-11T13:44:02Z", "text": "Created attachment 20494\nClassLoaderTest.java patch\n\nI added a additional unit test method test_provider_multiple_loaders() that\nsimulates the failure condition I observed in a J2EE environment. The new test\nadds a Provider instance to java.security.Security from the current class\nloader running the unit test and then retrieves the provider from another class\nloader. This test should fail for unpatched XMLDigSecurity.java but pass for\nthe patched version. I tested the patched XMLDigSecurity in my J2EE environment\nas well so the fix should be solid."}, {"count": 5, "tags": [], "bug_id": 42820, "attachment_id": null, "id": 105346, "time": "2007-07-12T13:08:15Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-07-12T13:08:15Z", "is_private": false, "text": "Fixed. Thanks for the patch and regression test!"}]
[{"count": 0, "tags": [], "creator": "bruno.blaise@cec.eu.int", "attachment_id": null, "is_private": false, "id": 21374, "time": "2002-08-20T13:49:33Z", "bug_id": 11857, "creation_time": "2002-08-20T13:49:33Z", "text": "Hi,\n\nI have a proposition for you to lookup in a bean (same technics use in struts).\n\n\nExample in JSP:\n\n  <i18n:formatDate name=\"ligne\" property=\"DatePrestation\" style=\"short\"/>\n\nThe i18n.tld have to be modified: value Not Mandatory and introduce two new\nattributes:\n\n        <attribute>\n            <name>name</name>\n            <required>false</required>\n            <rtexprvalue>false</rtexprvalue>\n            <type>String</type>\n        </attribute>\n        <attribute>\n            <name>property</name>\n            <required>false</required>\n            <rtexprvalue>true</rtexprvalue>\n            <type>String</type>\n        </attribute>\n\n\nInto FormatTagSupport.java, I have introduced two String _name and _property and\ntwo protected methods \"lookup\" and getValue has been modified.\n\nI did some tests with FormatNumber and FormatDate and It works... :-) I hope\nthat you will be interested by this enhancement.\n\nKind regards.\n\nBruno Blaise\n\nPlease see the following code:\n\n/*\n * $Header:\n/home/cvs/jakarta-taglibs/i18n/src/org/apache/taglibs/i18n/FormatTagSupport.java,v\n1.4 2001/10/14 22:01:25 tdawson Exp $\n * $Revision: 1.4 $\n * $Date: 2001/10/14 22:01:25 $\n *\n * ====================================================================\n * \n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 1999 The Apache Software Foundation.  All rights \n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution, if\n *    any, must include the following acknowlegement:  \n *       \"This product includes software developed by the \n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowlegement may appear in the software itself,\n *    if and wherever such third-party acknowlegements normally appear.\n *\n * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written \n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\"\n *    nor may \"Apache\" appear in their names without prior written\n *    permission of the Apache Group.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *\n */ \n\npackage org.apache.taglibs.i18n;\n\nimport java.io.IOException;\nimport java.text.Format;\nimport java.text.DateFormat;\nimport java.util.Enumeration;\nimport java.util.Locale;\n\nimport javax.servlet.ServletRequest;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.Tag;\nimport javax.servlet.jsp.tagext.TagSupport;\n\nimport java.beans.BeanInfo;\nimport java.beans.Introspector;\nimport java.beans.IntrospectionException;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.apache.commons.beanutils.PropertyUtils;\n\n/** An abstract base class for the formatting tags to provide \n  * implementation inheritence.\n  *\n  * @author James Strachan\n  * @version $Revision: 1.4 $\n  */\npublic abstract class FormatTagSupport extends TagSupport {\n    \n    String _name     = null;\n    String _property = null;\n  \n    /** the value to be formatted */\n    private Object value;    \n    /** the locale used to format the value */\n    private Locale locale;\n    /** the text output if the value is null */\n    private String defaultText = \"\";\n\n\n    public FormatTagSupport() {\n    }\n    \n\n    // Tag interface\n    //-------------------------------------------------------------------------\n    public int doStartTag() throws JspException {\n        return EVAL_BODY_INCLUDE;\n    }\n    \n    public int doEndTag() throws JspException {\n        try {\n            Object value = getValue();\n            JspWriter out = pageContext.getOut();\n            String text = null;\n            if ( value != null ) {\n                Format formatter = getFormat();\n                if ( formatter == null ) {\n                    throw new JspException( \"Could not find valid Format\ninstance\" );\n                }\n                text = formatter.format( value );\n            }\n            else {\n                text = getDefaultText();\n            }\n            if ( text != null ) {\n                out.print( text );\n            }\n        }\n        catch ( IOException e ) {\n            handleIOException( e );\n        }\n        return EVAL_PAGE;\n    }\n    \n    public void release() {\n        super.release();\n        value = null;\n        locale = null;\n        defaultText = \"\";\n        _name = null;\n        _property = null;\n    }\n    \n    // Properties\n    //-------------------------------------------------------------------------    \n\n    public void setName(String name) {\n      _name = name;\n    }\n  \n    public void setProperty(String property) {\n      _property = property;\n    }\n  \n    public Object getValue() {\n        if ( _name == null ) {\n            return value;\n        }\n        \n        Object o = lookup( pageContext, _name, _property, null);\n        \n        return (o==null) ? value : o;\n    }\n    \n    public void setValue( Object value ) {\n        this.value = value;\n    }\n\n    /** If no {@link java.util.Locale} has been explicitly configured then use the\n      * parent LocaleTag if present else the Locale from the ServletRequest\n      * else use the default JVM {@link java.util.Locale}.\n      */\n    public Locale getLocale() {\n        if ( locale == null ) {\n            return findLocale();\n        }\n        return locale;\n    }\n    \n    public void setLocale( Locale locale ) {\n        this.locale = locale;\n    }\n\n    public String getDefaultText() {\n        return defaultText;\n    }\n    \n    public void setDefaultText( String defaultText ) {\n        this.defaultText = defaultText;\n    }\n\n    \n    // Implementation methods\n    //-------------------------------------------------------------------------\n    \n    /** Abstract class to return the value formatter \n      */\n    protected abstract Format getFormat();    \n    \n    protected void handleIOException( IOException e ) throws JspException {\n        pageContext.getServletContext().log( \"Caught: IOException: \" + e );\n        throw new JspException( \"IOException: \" + e );\n    }\n\n    /** finds the current locale from either an outer LocaleTag or the \n      * current SerlvetRequest or the current JVM.\n      *\n      * @return a Locale instance\n      */\n    protected Locale findLocale() {\n        // lets try find a LocaleTag first\n        LocaleTag localeTag = (LocaleTag) findAncestorWithClass( this,\nLocaleTag.class );\n        if ( localeTag != null ) {\n            return localeTag.getLocale();\n        }\n        else {\n            return pageContext.getResponse().getLocale();\n        }\n    }\n    \n    \n    /** A helper method for date, datetime & time based formatting tags.\n      * This method converts a string into a DateFormat style code.\n      */\n    protected int getStyleCode( String style ) {\n        if ( \"short\".equalsIgnoreCase( style ) ) {\n            return DateFormat.SHORT; \n        }\n        else if ( \"medium\".equalsIgnoreCase( style ) ) {\n            return DateFormat.MEDIUM; \n        }\n        else if ( \"long\".equalsIgnoreCase( style ) ) {\n            return DateFormat.LONG; \n        }\n        else if ( \"full\".equalsIgnoreCase( style ) ) {\n            return DateFormat.FULL; \n        }\n        else {\n            return DateFormat.SHORT;\n        }\n    }\n    \n        /**\n     * Locate and return the specified bean, from an optionally specified\n     * scope, in the specified page context.  If no such bean is found,\n     * return <code>null</code> instead.  If an exception is thrown, it will\n     * have already been saved via a call to <code>saveException()</code>.\n     *\n     * @param pageContext Page context to be searched\n     * @param name Name of the bean to be retrieved\n     * @param scope Scope to be searched (page, request, session, application)\n     *  or <code>null</code> to use <code>findAttribute()</code> instead\n     *\n     * @exception JspException if an invalid scope name\n     *  is requested\n     */\n    protected Object lookup(PageContext pageContext, String name,\n                                String scope) {\n\n        Object bean = null;\n        if (scope == null)\n            bean = pageContext.findAttribute(name);\n        else if (scope.equalsIgnoreCase(\"page\"))\n            bean = pageContext.getAttribute(name, PageContext.PAGE_SCOPE);\n        else if (scope.equalsIgnoreCase(\"request\"))\n            bean = pageContext.getAttribute(name, PageContext.REQUEST_SCOPE);\n        else if (scope.equalsIgnoreCase(\"session\"))\n            bean = pageContext.getAttribute(name, PageContext.SESSION_SCOPE);\n        else if (scope.equalsIgnoreCase(\"application\"))\n            bean = pageContext.getAttribute(name, PageContext.APPLICATION_SCOPE);\n        return (bean);\n\n    }\n\n\n    /**\n     * Locate and return the specified property of the specified bean, from\n     * an optionally specified scope, in the specified page context.  If an\n     * exception is thrown, it will have already been saved via a call to\n     * <code>saveException()</code>.\n     *\n     * @param pageContext Page context to be searched\n     * @param name Name of the bean to be retrieved\n     * @param property Name of the property to be retrieved, or\n     *  <code>null</code> to retrieve the bean itself\n     * @param scope Scope to be searched (page, request, session, application)\n     *  or <code>null</code> to use <code>findAttribute()</code> instead\n     *\n     * @exception JspException if an invalid scope name\n     *  is requested\n     * @exception JspException if the specified bean is not found\n     * @exception JspException if accessing this property causes an\n     *  IllegalAccessException, IllegalArgumentException,\n     *  InvocationTargetException, or NoSuchMethodException\n     */\n    protected Object lookup(PageContext pageContext, String name,\n                                String property, String scope) {\n\n        // Look up the requested bean, and return if requested\n        Object bean = lookup(pageContext, name, scope);\n        if (bean == null) {\n            return null;\n        }\n        if (property == null)\n            return (bean);\n\n        // Locate and return the specified property\n        try {\n            return (PropertyUtils.getProperty(bean, property));\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n}"}, {"count": 1, "tags": [], "bug_id": 11857, "text": "I have to be honnest with the Struts's team. This technic (and the majority of\nthis methods: lookup, setName and setProperty, thus 99% of the code) has been\nextracted from this beautiful framework.\n\nAnd I did, as well, the following imports: \n\n  import java.beans.BeanInfo; \n  import java.beans.Introspector;\n  import java.beans.IntrospectionException;\n  import java.beans.PropertyDescriptor;\n  import java.lang.reflect.InvocationTargetException;\n  import java.lang.reflect.Method;\n\n  import org.apache.commons.beanutils.PropertyUtils;\n\nI don't know if you agree to import theses packages?", "id": 21380, "time": "2002-08-20T14:02:45Z", "creator": "bruno.blaise@cec.eu.int", "creation_time": "2002-08-20T14:02:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 11857, "attachment_id": null, "text": "JSTL replaced the i18n taglib, so this won't be worked on.", "id": 128691, "time": "2009-07-10T00:33:41Z", "creator": "bayard@apache.org", "creation_time": "2009-07-10T00:33:41Z", "is_private": false}]
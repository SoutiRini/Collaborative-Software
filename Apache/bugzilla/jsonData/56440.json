[{"count": 0, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "API: XSSF\nfile: *.xlsx\n\nWhen i use removeRow or shiftRows to handle some rows with FormulaCell,\nits almost cost 2Sec for one Row.\n\nDo the samething use HSSF is fast.", "id": 174753, "time": "2014-04-22T01:55:15Z", "creator": "tersitain@gmail.com", "creation_time": "2014-04-22T01:55:15Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "text": "HSSF is often a tiny bit faster than XSSF, but rarely more than a few times\n\nAre you able to use a profiler to work out where the extra time on XSSF goes?\n\nAlso, does it happen for simple files too? i.e. is this related to one specific class of file, or all files?", "count": 1, "id": 174754, "time": "2014-04-22T02:07:38Z", "bug_id": 56440, "creation_time": "2014-04-22T02:07:38Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "thx for answer me.\nJuet the simple file whth the FormulaCell[=IF((COUNT(U224,U225,U226,U227))>0,ROUND(SUM(U224,U225,U226,U227),6),0)].\nThe file has 2000rows and 100 cols,size is 1.3 MB,not ON ie.\n\nto delete 20rows for xlsx cost 40sec,but xls is 1sec....\n\nthe test soure is under..\n\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\n\npublic class ReadExcelSheetTest {\n    public static void main(final String[] args) throws InvalidFormatException {\n        try {\n            String templatePath = \"C:\\\\temp\\\\test.xlsx\";\n            FileInputStream fis = null;\n            fis = new FileInputStream(templatePath);\n            Workbook workbook = WorkbookFactory.create(fis);\n            Sheet sheet = workbook.getSheet(\"a\");\n\n            for (int i = 20; i >= 1; i--) {\n                Row row = sheet.getRow(i);\n                if (row != null) {\n                    sheet.removeRow(row);\n                    System.out.println(\"-----\" + i);\n                }\n            }\n            workbook.write(new FileOutputStream(\"C:\\\\temp\\\\3.xlsx\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "id": 174755, "time": "2014-04-22T02:41:26Z", "creator": "tersitain@gmail.com", "creation_time": "2014-04-22T02:41:26Z", "is_private": false}, {"count": 3, "tags": [], "creator": "tersitain@gmail.com", "text": "thx for answer me.\njust the simple file whth the FormulaCell[=IF((COUNT(U224,U225,U226,U227))>0,ROUND(SUM(U224,U225,U226,U227),6),0)].\nThe file has 2000rows and 100 cols,size is 1.3 MB,not ON ie.\n\nto delete 20rows for xlsx cost 40sec,but xls is 1sec....\n\nthe test soure is under..\n\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\n\npublic class ReadExcelSheetTest {\n    public static void main(final String[] args) throws InvalidFormatException {\n        try {\n            String templatePath = \"C:\\\\temp\\\\test.xlsx\";\n            FileInputStream fis = null;\n            fis = new FileInputStream(templatePath);\n            Workbook workbook = WorkbookFactory.create(fis);\n            Sheet sheet = workbook.getSheet(\"a\");\n\n            for (int i = 20; i >= 1; i--) {\n                Row row = sheet.getRow(i);\n                if (row != null) {\n                    sheet.removeRow(row);\n                    System.out.println(\"-----\" + i);\n                }\n            }\n            workbook.write(new FileOutputStream(\"C:\\\\temp\\\\3.xlsx\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "id": 174756, "time": "2014-04-22T04:34:39Z", "bug_id": 56440, "creation_time": "2014-04-22T04:34:39Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "Are you able to use a profiler to work out where the extra time goes on XSSF?", "id": 174758, "time": "2014-04-22T12:25:53Z", "creator": "apache@gagravarr.org", "creation_time": "2014-04-22T12:25:53Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "To debug the source  I knew c.length = 202176....\n\npackage org.apache.poi.xssf.model;\npublic class CalculationChain extends POIXMLDocumentPart {\n\u30fb\u30fb\u30fb\u30fb\npublic void removeItem(int sheetId, String ref){\n        //sheet Id of a sheet the cell belongs to\n        int id = -1;\n        CTCalcCell[] c = chain.getCArray();\n\n        for (int i = 0; i < c.length; i++){\n            //If sheet Id  is omitted, it is assumed to be the same as the value of the previous cell.\n            if(c[i].isSetI()) id = c[i].getI();\n\n            if(id == sheetId && c[i].getR().equals(ref)){\n                if(c[i].isSetI() && i < c.length - 1 && !c[i+1].isSetI()) {\n                    c[i+1].setI(id);\n                }\n                chain.removeC(i);\n                break;\n            }\n        }\n    }", "id": 174789, "time": "2014-04-23T05:41:29Z", "creator": "tersitain@gmail.com", "creation_time": "2014-04-23T05:41:29Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "I could not reproduce this with a simple file created as you describe below.\n\nCan you attach the test-file so we can try to reproduce this.", "id": 181677, "time": "2015-03-11T18:40:44Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-11T18:40:44Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 56440, "attachment_id": 32561, "text": "Created attachment 32561\ntest-file\n\n(In reply to Dominik Stadler from comment #6)\n> I could not reproduce this with a simple file created as you describe below.\n> \n> Can you attach the test-file so we can try to reproduce this.\n\nPlease confirm it.", "id": 181695, "time": "2015-03-12T01:52:59Z", "creator": "tersitain@gmail.com", "creation_time": "2015-03-12T01:52:59Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56440, "attachment_id": null, "text": "Your assessment with the time being spent in CalculationChain is correct. The method currently needs to iterate over the large array of entries and needs to perform checks for every removed cell and remove the entry thus copying around the array.\n\nUnfortunately the data structure in this case is defined by how the Microsoft XML format is structured, i.e. all formulas are listed in one large list so it is hard to build optimizations into how the data is stored in memory... hm.", "id": 181739, "time": "2015-03-13T17:25:17Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-13T17:25:17Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 56440, "attachment_id": null, "id": 182258, "time": "2015-04-06T10:23:24Z", "creator": "tersitain@gmail.com", "creation_time": "2015-04-06T10:23:24Z", "is_private": false, "text": "thx for answered me.\nSo theres no way to remove rows from the sheet used a lot of FormulaCell quickly?"}, {"count": 10, "tags": [], "bug_id": 56440, "attachment_id": null, "id": 185200, "time": "2015-09-13T20:00:30Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-09-13T20:00:30Z", "is_private": false, "text": "I tried a few local optimizations, but none really made a difference, the cleanup of formulas on cell removal is unfortunately deeply intertwined with Cell removal and there is no easy way to kind of \"remember\" all the removed cells and do the operation in bulk at the end. \n\nSo as long as nobody else comes up with a clever way of doing something like this while still keeping the code in maintainable order I don't think we can do much, removing many formulas is also likely not something that many people perform all the time. \n\nIf you want to take a look at improving this then you probably need to look at starting in XSSFRow.removeRow() which calls XSSFRow.removeCell() and from there directs to XSSFWorkbook.onDeleteFormula()...\n\nAnyway I am closing this WONTFIX now until there is some code-idea of how it can be done better."}]
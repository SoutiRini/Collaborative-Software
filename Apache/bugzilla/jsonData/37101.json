[{"count": 0, "tags": [], "creator": "bill.seddon@lyquidity.com", "text": "If you open an .xls containing cell comments and save it using \nHSSFWorkbook.write() the resulting document will not open successfully using \neither Excel or Poi.  The problem is manifested in the serialize() method of \nclass TextObjectRecord.  The serialize() method only outputs a string if there \nis one to export.  Even though one is read in (and the field length and format \nproperties indicate there is a string) the serialize() method sees an empty \nstring.  However the cause of the problem is not in serialize() but in the \nclass constructor.\n\nThe class has a variable, 'str', that is initialised *and* is set by the \nvirtual method fillFields().  The problem arises because fillFields is called \nin the constructor.  Java seems to run the constructor code (and super()) THEN \ninitialise class variables.  The effect is that no matter what value the str \nvariable is assigned when fillFields() is called by the constructor, the value \nit has when the constructor is complete is the value it is assigned when the \nvariable is initialised in the class (ie and empty string).\n\nThe solution is to assign a default value to variable 'str' in the constructor \nbefore calling super() rather than initialize it.\n\nHere are a couple of very short classes that show the same effect.  In these \nexamples, MethodToOverride() is the equivalent of fillFields().  It is called \nform the parent constructor just as fillFields() is called by the Record() \nconstructor (which is the ultimate parent of TextObjectRecord.\n\nIn this example, the end value of the class variable is BBB not the XXX set \nMethodToOverride().  This shows that Java initialises class variable after \ncompleting the constructor.\n\npublic abstract class ABaseClass\n{\n\tpublic ABaseClass()\n\t{\n\t\tMethodToOverride();\n\t}\n\tprotected abstract void MethodToOverride();\n}\n\npublic class DerivedClass extends ABaseClass\n{\n\tpublic String SomeDerivedString = \"BBB\";\n\n\tpublic DerivedClass() \n\t{\n\t\tsuper();\n\t}\n\n\tprotected void MethodToOverride()\n\t{\n\t\tSystem.out.println( \"Overridden method before'\" + \nSomeDerivedString + \"'\");\n\t\tSomeDerivedString = \"XXX\";\n\t\tSomeDerivedInt = 99;\n\t\tSystem.out.println( \"Overridden method after '\" + \nSomeDerivedString + \"'\");\n\t}\n\n\tpublic static void main(String [] args)\n    {\n\t\tDerivedClass d = new DerivedClass();\n\t\tSystem.out.println( d.SomeDerivedString );\n\t}\n}", "id": 81200, "time": "2005-10-16T14:14:28Z", "bug_id": 37101, "creation_time": "2005-10-16T14:14:28Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "bill.seddon@lyquidity.com", "attachment_id": null, "id": 81201, "time": "2005-10-16T14:20:08Z", "bug_id": 37101, "creation_time": "2005-10-16T14:20:08Z", "is_private": false, "text": "OK, you can't as I suggest initialise str before calling super(in) because \nthat not legal syntax.  So the following line should be called after the call \nto super(in).\n\nif (str == null) str = new HSSFRichTextString( \"\" );\n\nAlso, \n\nstr = new HSSFRichTextString( \"\" );\n\nshould appear in the default constructor.\n"}, {"count": 2, "tags": [], "creator": "trejkaz@trypticon.org", "text": "Is this a dupe of Bug 36947?\n", "id": 99565, "time": "2007-02-19T16:28:04Z", "bug_id": 37101, "creation_time": "2007-02-19T16:28:04Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Could you please try poi-3.1-beta1 and report if the problem still persists? \n\nYegor", "attachment_id": null, "bug_id": 37101, "id": 116737, "time": "2008-05-17T05:54:54Z", "creator": "yegor@dinom.ru", "creation_time": "2008-05-17T05:54:54Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 37101, "text": "I believe this was fixed some time ago, please re-open if the problem still occurs with poi 3.8 beta 1", "count": 4, "id": 144562, "time": "2011-02-25T17:00:15Z", "creator": "apache@gagravarr.org", "creation_time": "2011-02-25T17:00:15Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "rtulloh@yahoo.com", "attachment_id": null, "text": "> We are seeing problems in Solr with tika throwing exceptions. Sometimes we see OOM like this:\n> {noformat}\n> SEVERE: java.lang.OutOfMemoryError: Java heap space\n>        at org.apache.poi.hmef.attribute.TNEFAttribute.<init>(TNEFAttribute.java:50)\n>        at org.apache.poi.hmef.attribute.TNEFAttribute.create(TNEFAttribute.java:76)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:74)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.<init>(HMEFMessage.java:63)\n>        at org.apache.tika.parser.microsoft.TNEFParser.parse(TNEFParser.java:79)\n>        at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)\n>        at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)\n>        at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:129)\n>        at org.apache.solr.handler.extraction.ExtractingDocumentLoader.load(ExtractingDocumentLoader.java:195)\n>        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:58)\n>        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n>        at org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper.handleRequest(RequestHandlers.java:244)\n>        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1478)\n>        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n>        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n>        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)\n>        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)\n>        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n>        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n>        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\n>        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)\n>        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\n>        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n>        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n> {noformat}\n> Other times, we see errors like this one:\n> {noformat}\n> Caused by: org.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\n>        at org.apache.poi.util.LittleEndian.readUShort(LittleEndian.java:302)\n>        at org.apache.poi.hmef.attribute.TNEFAttribute.<init>(TNEFAttribute.java:53)\n>        at org.apache.poi.hmef.attribute.TNEFAttribute.create(TNEFAttribute.java:76)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:74)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n>        at org.apache.poi.hmef.HMEFMessage.<init>(HMEFMessage.java:63)\n>        at org.apache.tika.parser.microsoft.TNEFParser.parse(TNEFParser.java:79)\n>        at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:242)\n>        ... 26 more\n> {noformat}\n\nWe are currently evaluating Solr and Tika using valid sampele data. Solr and Tika projects have both indicated this problem should be reported and fixed in POI.", "id": 152475, "time": "2011-12-30T12:39:35Z", "bug_id": 52400, "creation_time": "2011-12-30T12:39:35Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52400, "attachment_id": null, "is_private": false, "id": 152477, "time": "2011-12-30T12:40:48Z", "creator": "rtulloh@yahoo.com", "creation_time": "2011-12-30T12:40:48Z", "text": "See also the original ticket for information.\n\nhttps://issues.apache.org/jira/browse/TIKA-835"}, {"count": 2, "tags": [], "bug_id": 52400, "attachment_id": null, "id": 152483, "time": "2011-12-31T03:50:39Z", "creator": "apache@gagravarr.org", "creation_time": "2011-12-31T03:50:39Z", "is_private": false, "text": "As you're not able to share the file, any chance you could debug through the creation of the attributes? It'd be useful to know what number attribute this is in the list of attributes (is it the 1st one, 2nd one etc), if the lengths + types + IDs of the preceeding attributes look sensible or not, and what the apparent length + ID + type of the failing attribute are?"}, {"count": 3, "tags": [], "bug_id": 52400, "attachment_id": null, "is_private": false, "id": 152505, "time": "2012-01-01T14:23:09Z", "creator": "rtulloh@yahoo.com", "creation_time": "2012-01-01T14:23:09Z", "text": "Num,ID,Type,Len\n36870,8,4\n36871,6,8\n2573,1152,512\n1,0,977272843 (boom!)\n\n{noformat}\nStep completed: \"thread=main\", org.apache.poi.hmef.attribute.TNEFAttribute.create(), line=65 bci=10\n65          if(id == TNEFProperty.ID_MAPIPROPERTIES.id ||\n\nmain[1] print id\n id = 1\nmain[1] print type\n type = 0\nmain[1] next\n>\n{noformat}\n\nAnd then a bit later\n\n{noformat}\nStep completed: \"thread=main\", org.apache.poi.hmef.attribute.TNEFAttribute.<init>(), line=49 bci=15\n49          property = TNEFProperty.getBest(id, type);\n\nmain[1] print length\n length = 977272843\n{noformat}"}, {"count": 4, "tags": [], "text": "I don't see any use or special handling of TYPE_TRIPLES in POI.\n\npublic static final int TYPE_TRIPLES = 0x0000;\n\nPerhaps these need to be handled differently/specially? I don't have MSDN access so I cannot research this. Peharps someone can give me a hand?", "attachment_id": null, "id": 152508, "creator": "rtulloh@yahoo.com", "time": "2012-01-01T15:04:12Z", "bug_id": 52400, "creation_time": "2012-01-01T15:04:12Z", "is_private": false}, {"count": 5, "tags": [], "text": "Apache committers may apply for free MSDN membership :)\n\nI don't know this format at all, but here are two pointers that may be of help:\nhttp://msdn.microsoft.com/en-us/library/cc815562.aspx\nhttp://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/mail/pop3vscan/work/pop3vscan-0.4/ripmime/tnef/tnef.h.html", "attachment_id": null, "id": 158128, "creator": "jan.asf@cominvent.com", "time": "2012-04-17T09:52:55Z", "bug_id": 52400, "creation_time": "2012-04-17T09:52:55Z", "is_private": false}, {"count": 6, "tags": [], "text": "I am also seeing the same exception. I can not provide a sample either. Sorry all.   \n\nUsing poi 3.8\n\nHaving to retype this ( may fat finger something ) \n\nCaused by: org.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\nat org.apache.poi.util.LittleEndian.readShort(LittleEndian.java:786)\nat org.apache.poi.hmef.attribute.TNEFAttribute.&lt;init&gt;(TNEFAttribute.java:62)\nat org.apache.poi.hmef.attribute.TNEFAttribute.create(TNEFAttribute.java:76)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:74)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.&lt;init&gt;(HMEFMessage.java:63)", "attachment_id": null, "bug_id": 52400, "id": 165858, "time": "2013-03-15T11:48:09Z", "creator": "highnoon@yahoo.com", "creation_time": "2013-03-15T11:48:09Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 52400, "attachment_id": null, "id": 165859, "time": "2013-03-15T12:23:39Z", "creator": "apache@gagravarr.org", "creation_time": "2013-03-15T12:23:39Z", "is_private": false, "text": "Without a sample file that can be shared, it's going to be up to one of the people with a confidential file to investigate and work out the fix..."}, {"count": 8, "tags": [], "bug_id": 52400, "attachment_id": null, "id": 165860, "time": "2013-03-15T14:01:10Z", "creator": "highnoon@yahoo.com", "creation_time": "2013-03-15T14:01:10Z", "is_private": false, "text": "I understand \n\nHere is another one I am seeing\n\nCaused by: org.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\nat org.apache.poi.util.LittleEndian.readInt(LittleEndian.java:723)\nat org.apache.poi.hmef.attribute.TNEFAttribute.&lt;init&gt;(TNEFAttribute.java:47)\nat org.apache.poi.hmef.attribute.TNEFAttribute.create(TNEFAttribute.java:76)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:74)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\nat org.apache.poi.hmef.HMEFMessage.&lt;init&gt;(HMEFMessage.java:63)"}, {"count": 9, "tags": [], "bug_id": 52400, "attachment_id": 30994, "id": 170979, "time": "2013-11-01T22:47:36Z", "creator": "wayne.mokane+apache@gmail.com", "creation_time": "2013-11-01T22:47:36Z", "is_private": false, "text": "Created attachment 30994\nSimple TNEF attachment\n\nA TNEF encoded message with the body \"This is the message body.\""}, {"count": 10, "tags": [], "bug_id": 52400, "attachment_id": 30995, "id": 170980, "time": "2013-11-01T22:48:22Z", "creator": "wayne.mokane+apache@gmail.com", "creation_time": "2013-11-01T22:48:22Z", "is_private": false, "text": "Created attachment 30995\nTNEF message with attachments\n\nHTML body reads: \"This is the body.  There are also two attachments.  The first is a 189KB PDF document with file named scion_tc_2007_maintenanceguide.pdf.  The second is a 119KB PNG image named Duke_Wave.png.\"\n\nThere are two embedded attachments in accordance with the body text."}, {"count": 11, "tags": [], "bug_id": 52400, "attachment_id": null, "id": 170981, "time": "2013-11-01T22:48:38Z", "creator": "wayne.mokane+apache@gmail.com", "creation_time": "2013-11-01T22:48:38Z", "is_private": false, "text": "I can provide some sample data files that cause this error.\n\nThe first (winmail-simple.dat) is a simple message with no attachments, and an HTML body which has the text \"This is the message body.\"\n\nThe other (winmail-with-attachments.dat) has a body, and the text in the body describes the two attachments: \"This is the body.  There are also two attachments.  The first is a 189KB PDF document with file named scion_tc_2007_maintenanceguide.pdf.  The second is a 119KB PNG image named Duke_Wave.png.\"\n\nBoth of these .dat files can be opened using the OS X program \"TNEF's Enough\" and possibly others.  They can also be read via the Aspose Java Mail API.  They were generated through the Microsoft Office 365 Live website.\n\nI am pasting my stack trace as follows (same for both files).  I am using jdk 1.7.0_25 on Mac OS X 10.9, and the version of POI I am using is 3.10-beta1.  But I have also tried versions 3.10-beta2, 3.9, and 3.8, all with the same result.\n\nPlease let me know if this helps, or if any additional info or test files would be useful.  \n\norg.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\n\tat org.apache.poi.util.LittleEndian.readUShort(LittleEndian.java:804)\n\tat org.apache.poi.hmef.attribute.TNEFAttribute.create(TNEFAttribute.java:61)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:74)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.process(HMEFMessage.java:98)\n\tat org.apache.poi.hmef.HMEFMessage.<init>(HMEFMessage.java:63)\n\tat com.gaggle.message.testing.tnef.TnefMessageTests.testPoi(TnefMessageTests.java:90)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)"}, {"count": 12, "tags": [], "text": "Thanks for the sample file Jeff!\n\nIf you have time, any chance you could step through the TNEF code in a debugger, and report back? Specifically, I'm interested to know if the sizes and IDs that the POI code reads look sensible? And in keeping with the POIFS chunk? Secondly, when processing the data, does it all look garbage, or is it fine for a bit then garbage then breaks?", "attachment_id": null, "id": 170995, "creator": "apache@gagravarr.org", "time": "2013-11-02T17:33:06Z", "bug_id": 52400, "creation_time": "2013-11-02T17:33:06Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 52400, "attachment_id": null, "is_private": false, "id": 170996, "time": "2013-11-02T17:36:56Z", "creator": "kiwiwings@apache.org", "creation_time": "2013-11-02T17:36:56Z", "text": "in the sample file without the attachment, it first starts with a little endian tnfversion attribute and then it switches to a big endian tnfversion entry ... seems to be quite strange ... I'm just adopting the TNEFAttribute class for the malformed input ... not sure if this makes sense though"}, {"count": 14, "tags": [], "text": "sorry for the last confusing comment ... there is/was an error in my changes", "is_private": false, "bug_id": 52400, "id": 170998, "time": "2013-11-02T19:08:07Z", "creator": "kiwiwings@apache.org", "creation_time": "2013-11-02T19:08:07Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "Created attachment 31000\n[PATCH] ignore trailing newlines of winmail.dat\n\nThe sample winmail files contained trailing newlines ... hopefully this is also the case with the other original findings", "attachment_id": 31000, "bug_id": 52400, "id": 171006, "time": "2013-11-02T21:41:23Z", "creator": "kiwiwings@apache.org", "creation_time": "2013-11-02T21:41:23Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 52400, "attachment_id": null, "id": 171013, "time": "2013-11-03T12:44:28Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2013-11-03T12:44:28Z", "is_private": false, "text": "Thanks for the patch, I have applied the changes as SVN rev r1538353 with a few minor modifications and some more tests."}, {"count": 17, "tags": [], "text": "(In reply to Nick Burch from comment #12)\n> Thanks for the sample file Jeff!\n> \n> If you have time, any chance you could step through the TNEF code in a\n> debugger, and report back? Specifically, I'm interested to know if the sizes\n> and IDs that the POI code reads look sensible? And in keeping with the POIFS\n> chunk? Secondly, when processing the data, does it all look garbage, or is\n> it fine for a bit then garbage then breaks?\n\nSure, I can do that.  Can you give me a bit more detail as to what I'd be looking for?  I'm fairly new to dealing with TNEF, and my only tools so far are using other applications/libs to read the total files.  I haven't dealt much with the low level parsing.", "attachment_id": null, "bug_id": 52400, "id": 171025, "time": "2013-11-04T13:02:40Z", "creator": "wayne.mokane+apache@gmail.com", "creation_time": "2013-11-04T13:02:40Z", "is_private": false}, {"count": 18, "tags": [], "text": "Is this fix not rolled out in 3.10 release?\nI still see the following stack trace, dont have a message to share\n\norg.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\n        at org.apache.poi.util.LittleEndian.readInt(LittleEndian.java:723)\n        at org.apache.poi.hmef.HMEFMessage.<init>(HMEFMessage.java:51)", "is_private": false, "id": 176027, "creator": "monishgandhi@yahoo.com", "time": "2014-06-25T09:18:34Z", "bug_id": 52400, "creation_time": "2014-06-25T09:18:34Z", "attachment_id": null}, {"count": 19, "attachment_id": null, "bug_id": 52400, "is_private": false, "id": 176029, "time": "2014-06-25T09:41:08Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-25T09:41:08Z", "tags": [], "text": "(In reply to Monish from comment #18)\n> Is this fix not rolled out in 3.10 release?\n\nThe fix is in 3.10, and all the files attached to this bug now parse without error\n\nIf you have another file which triggers a similar problem, please open a new bug, and upload a sample file which shows it"}]
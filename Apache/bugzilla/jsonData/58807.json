[{"count": 0, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "is_private": false, "id": 187399, "time": "2016-01-05T20:56:24Z", "bug_id": 58807, "creation_time": "2016-01-05T20:56:24Z", "text": "All of the following assumes you have set https.use.cached.ssl.context=false and are doing HTTPS tests using HC3 or HC4. The property is supposed the close/reset SSLContext, HTTPS connections and similar per thread at the beginning of each test iteration.\n\nInterface TestIterationListener has a method testIterationStart() that was used in r1172147 to implement this (feature request BZ 51380). Originally the implemention of the method in HTTPSamplerBase called sslMgr.resetContext() and then notifySSLContextWasReset() which in turn immediately closed all thread local HC3 and HC4 connections using closeThreadLocalConnections() in the respective implementations.\n\nUnfortunately there was a negative side effect, namely closing of http connections as well (BZ 55023). Since all the info needed to decide which protocol was used etc. would only be available when a sampler actually executes a request, the implementation was switched to delay the close/reset of the objects in the samplers until the next sample of the respective sampler executes. The TestIterationListener would only set a flag \"resetSSLContext\" in the sampler and the sampler would reset its flag once it has closed/reset the objects during the next execution. The flag is per sampler instance.\n\nNow here's the problem: multiple samplers can and often will share the HTTP connections and SSLContext etc. So in a test plan with e.g. two HC4 samplers s1 and s2 both requesting some URI from the same HTTPS host, after the iteration starts s1 would close/reset, then create new objects and run its sample, next s2 would close/reset again, again create new objects and run its sample.\n\nMore or less this means that https.use.cached.ssl.context=false also disables reusing SSLContext, connection Keep-Alive etc. between samples in the same iteration.\n\nAs far as I can see, resetting the SSLContext via JsseSSLManager should be done as one single call at the start of an iteration. It is only needed\n\nThe other part of the close/reset, namely cleaning up the httpClient and its connections etc. is mor etricky, because there is a whole map of HTTPClient instances. Currently each sampler cares about \"his\" HTTPClient instance, even if that one is shared with other samplers. I think it would be better to add a static method to HTTPHC4Impl (and HC3) which would do the reset/close for all HTTPClient instances in the (thread-local) Map HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.\n\nBoth parts could then be controlled via static flags instead of instance flags. One flag would be in HTTPHCAbstractImpl and controls reset of the SSLContext, one flag would be in HTTPHC4Impl and HTTPHC3Impl and controls the HTTPClient resets.\n\nI'll try that and see whether it makes sense. If it works, one should also be able to support config for SSLContext reset independent of HTTPClient and Connection reset (this feature then also in the HTTP case, not only for HTTPS)."}, {"count": 1, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 187400, "time": "2016-01-05T20:58:39Z", "bug_id": 58807, "creation_time": "2016-01-05T20:58:39Z", "is_private": false, "text": "> Both parts could then be controlled via static flags instead of instance\n> flags. One flag would be in HTTPHCAbstractImpl and controls reset of the\n> SSLContext, one flag would be in HTTPHC4Impl and HTTPHC3Impl and controls\n> the HTTPClient resets.\n\nCorrection: static -> static ThreadLocal"}, {"count": 2, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": 33410, "is_private": false, "id": 187407, "time": "2016-01-06T02:36:48Z", "bug_id": 58807, "creation_time": "2016-01-06T02:36:48Z", "text": "Created attachment 33410\nFixing SSLContext/HTTPClient/Connection reuse\n\nThe patch fixes reuse/reset between test iterations (on the same thread) of SSLContext, HTTPClient and HTTP connections for HC4 (and likely HC3).\n\nFor experiments the reuse of the three objects can be controlled using three different system properties\n\n- reuse.http.connections\n- reuse.http.client\n- https.use.cached.ssl.context\n\n\"true\" means \"reuse\" in all three cases, \"false\" means \"reset/close\" (do not reuse).\n\nResetting the HTTPClient results in also resetting HTTP Connections, but not vice versa.\n\nIt is not yet clear to me if we need to support both cases, resetting connection plus HTTPClient and also resetting Connections but reusing HTTPClient, or if one of the twi would suffice.\n\nFeedback welcome."}, {"count": 3, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 187410, "time": "2016-01-06T12:07:03Z", "bug_id": 58807, "creation_time": "2016-01-06T12:07:03Z", "is_private": false, "text": "(In reply to Rainer Jung from comment #2)\n> For experiments the reuse of the three objects can be controlled using three\n> different system properties\n\nThey seem to be JMeter properties, which is better."}, {"count": 4, "tags": [], "bug_id": 58807, "is_private": false, "text": "Yes, sorry, JMeter properties.\n\nI think we don't need/want all three of them (individual control over connection reuse, HTTPClient reuse and SSLContext reuse). After some experimenting IMHO the useful cases are:\n\n- full reuse of SSLContext, HTTPClient and existing connections\n- no reuse of SSLContext, HTTPClient and existing connections\n\nThe default should be full reuse like it is today.\n\nThe question is though, whether the name \"https.use.cached.ssl.context\" for the property is good. Once could use a uniform switch to determine reuse in the HTTP case as well, something like reset.http.objects.before.iteration. Default would be \"false\" (no reset = reuse) and to start each iteration with fresh objects you would switch to \"true\".\n\nThe old flag could be deprecated. If a user would use both, the old and the new, we could warn during startup and the new flag would win.", "id": 187414, "time": "2016-01-06T12:34:33Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2016-01-06T12:34:33Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58807, "attachment_id": null, "text": "(In reply to Rainer Jung from comment #4)\n> \n> The question is though, whether the name \"https.use.cached.ssl.context\" for\n> the property is good. \n\nSeems OK to me; the only problem is it does not fully describe what is re-used.\nBut that could be fixed by better docn in the jmeter.properties file.\n\n> Once could use a uniform switch to determine reuse in\n> the HTTP case as well, something like reset.http.objects.before.iteration.\n\nWhy do we need the reuse flag for http?", "id": 187419, "time": "2016-01-06T14:07:17Z", "creator": "sebb@apache.org", "creation_time": "2016-01-06T14:07:17Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58807, "is_private": false, "text": "As far as I understand the situation reusing (the default) means e.g. connections are kept open and are reused via HTTP Keep-Alive during the next iteration. I do see this behavior using https, I expect it to happen for http too. That's of course efficient but might not be what you want. A new iteration typically is a new user who would start with new connections.\n\nOf course modelling the connection behavior in an exact way is beyond what we support, but the decision to start a new iteration with new connections could be interesting for some (approximate modeling). It is somehow analogous to modeling the handshake rate by resetting the SSLContext, although a new connection is of cours less disruptive than a new ssl handshake. All in all not a critical feature.\n\nIn addition I think the optional behavior \"reset instead of reuse\" for http and https is a good safety net against problems that might creep in due to reuse of objects that might have more context than we expect (wrong basic auth, wrong cookie, wrong client cert, wrong SNI etc.). Of course most of these things do work now, but reusing the connections and the objects from the HC libs as well as the SSLContext might introduce future bugs of the sort \"next iteration uses context data from the previous one\" which could then be worked around quickly by disabling the reuse. In general since the risks are quite vague so I'd stay on the performance side here for the default value (reuse). But probably based on my incomplete understanding of the lifecycles of HC objects, I'd feel better if we had such a \"reset between iterations\" switch.", "id": 187420, "time": "2016-01-06T14:31:03Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2016-01-06T14:31:03Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 58807, "attachment_id": null, "text": "(In reply to Rainer Jung from comment #6)\n> As far as I understand the situation reusing (the default) means e.g.\n> connections are kept open and are reused via HTTP Keep-Alive during the next\n> iteration. I do see this behavior using https, I expect it to happen for\n> http too. That's of course efficient but might not be what you want. A new\n> iteration typically is a new user who would start with new connections.\n>\n> Of course modelling the connection behavior in an exact way is beyond what\n> we support, but the decision to start a new iteration with new connections\n> could be interesting for some (approximate modeling). It is somehow\n> analogous to modeling the handshake rate by resetting the SSLContext,\n> although a new connection is of cours less disruptive than a new ssl\n> handshake. All in all not a critical feature.\n\nSurelt that's already catered for by the \"Use Keepalive\" checkbox?\nIf not checked, JMeter sends Connection: close.\n \n> In addition I think the optional behavior \"reset instead of reuse\" for http\n> and https is a good safety net against problems that might creep in due to\n> reuse of objects that might have more context than we expect (wrong basic\n> auth, wrong cookie, wrong client cert, wrong SNI etc.). Of course most of\n> these things do work now, but reusing the connections and the objects from\n> the HC libs as well as the SSLContext might introduce future bugs of the\n> sort \"next iteration uses context data from the previous one\" which could\n> then be worked around quickly by disabling the reuse. In general since the\n> risks are quite vague so I'd stay on the performance side here for the\n> default value (reuse). But probably based on my incomplete understanding of\n> the lifecycles of HC objects, I'd feel better if we had such a \"reset\n> between iterations\" switch.\n\nI think we already do.", "id": 187427, "time": "2016-01-06T17:19:35Z", "creator": "sebb@apache.org", "creation_time": "2016-01-06T17:19:35Z", "is_private": false}, {"count": 8, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 187430, "time": "2016-01-06T19:10:37Z", "bug_id": 58807, "creation_time": "2016-01-06T19:10:37Z", "is_private": false, "text": "(In reply to Sebb from comment #7)\n> (In reply to Rainer Jung from comment #6)\n> > As far as I understand the situation reusing (the default) means e.g.\n> > connections are kept open and are reused via HTTP Keep-Alive during the next\n> > iteration. I do see this behavior using https, I expect it to happen for\n> > http too. That's of course efficient but might not be what you want. A new\n> > iteration typically is a new user who would start with new connections.\n> >\n> > Of course modelling the connection behavior in an exact way is beyond what\n> > we support, but the decision to start a new iteration with new connections\n> > could be interesting for some (approximate modeling). It is somehow\n> > analogous to modeling the handshake rate by resetting the SSLContext,\n> > although a new connection is of cours less disruptive than a new ssl\n> > handshake. All in all not a critical feature.\n> \n> Surelt that's already catered for by the \"Use Keepalive\" checkbox?\n> If not checked, JMeter sends Connection: close.\n\nI didn't mean to completely disable Keep-Alive but to not alow Keep-Alive from one itertaion to the next. The \"Use Keepalive\" checkbox would disable Keep-Alive completely.\n\n> > In addition I think the optional behavior \"reset instead of reuse\" for http\n> > and https is a good safety net against problems that might creep in due to\n> > reuse of objects that might have more context than we expect (wrong basic\n> > auth, wrong cookie, wrong client cert, wrong SNI etc.). Of course most of\n> > these things do work now, but reusing the connections and the objects from\n> > the HC libs as well as the SSLContext might introduce future bugs of the\n> > sort \"next iteration uses context data from the previous one\" which could\n> > then be worked around quickly by disabling the reuse. In general since the\n> > risks are quite vague so I'd stay on the performance side here for the\n> > default value (reuse). But probably based on my incomplete understanding of\n> > the lifecycles of HC objects, I'd feel better if we had such a \"reset\n> > between iterations\" switch.\n>\n> I think we already do.\n\nI don't understand you. The current impl of reset (https.use.cached.ssl.context) is a NOP in the http case."}, {"count": 9, "tags": [], "bug_id": 58807, "is_private": false, "text": "(In reply to Rainer Jung from comment #4)\n> Yes, sorry, JMeter properties.\n> \n> I think we don't need/want all three of them (individual control over\n> connection reuse, HTTPClient reuse and SSLContext reuse). After some\n> experimenting IMHO the useful cases are:\n> \n> - full reuse of SSLContext, HTTPClient and existing connections\n> - no reuse of SSLContext, HTTPClient and existing connections\n\nLooks ok to me.\n> \n> The default should be full reuse like it is today.\n> \n> The question is though, whether the name \"https.use.cached.ssl.context\" for\n> the property is good. Once could use a uniform switch to determine reuse in\n> the HTTP case as well, something like reset.http.objects.before.iteration.\n> Default would be \"false\" (no reset = reuse) and to start each iteration with\n> fresh objects you would switch to \"true\".\n> \n> The old flag could be deprecated. If a user would use both, the old and the\n> new, we could warn during startup and the new flag would win.\n\nThanks for fix", "id": 187434, "time": "2016-01-06T20:56:14Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-01-06T20:56:14Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "(In reply to Rainer Jung from comment #8)\n> (In reply to Sebb from comment #7)\n> > (In reply to Rainer Jung from comment #6)\n> > > As far as I understand the situation reusing (the default) means e.g.\n> > > connections are kept open and are reused via HTTP Keep-Alive during the next\n> > > iteration. I do see this behavior using https, I expect it to happen for\n> > > http too. That's of course efficient but might not be what you want. A new\n> > > iteration typically is a new user who would start with new connections.\n> > >\n> > > Of course modelling the connection behavior in an exact way is beyond what\n> > > we support, but the decision to start a new iteration with new connections\n> > > could be interesting for some (approximate modeling). It is somehow\n> > > analogous to modeling the handshake rate by resetting the SSLContext,\n> > > although a new connection is of cours less disruptive than a new ssl\n> > > handshake. All in all not a critical feature.\n> > \n> > Surelt that's already catered for by the \"Use Keepalive\" checkbox?\n> > If not checked, JMeter sends Connection: close.\n> \n> I didn't mean to completely disable Keep-Alive but to not alow Keep-Alive\n> from one itertaion to the next. \n\nWhat do you mean by iteration?\nIf you mean the start of the next loop, one just needs to clear Use KeepAlive on the last sampler.\n\n> The \"Use Keepalive\" checkbox would disable\n> Keep-Alive completely.\n\nUse Keepalive only applies to a single sample.\nIf deselected, it means the connection will be reset after it completes.\n\n> \n> > > In addition I think the optional behavior \"reset instead of reuse\" for http\n> > > and https is a good safety net against problems that might creep in due to\n> > > reuse of objects that might have more context than we expect (wrong basic\n> > > auth, wrong cookie, wrong client cert, wrong SNI etc.). Of course most of\n> > > these things do work now, but reusing the connections and the objects from\n> > > the HC libs as well as the SSLContext might introduce future bugs of the\n> > > sort \"next iteration uses context data from the previous one\" which could\n> > > then be worked around quickly by disabling the reuse. In general since the\n> > > risks are quite vague so I'd stay on the performance side here for the\n> > > default value (reuse). But probably based on my incomplete understanding of\n> > > the lifecycles of HC objects, I'd feel better if we had such a \"reset\n> > > between iterations\" switch.\n> >\n> > I think we already do.\n> \n> I don't understand you. The current impl of reset\n> (https.use.cached.ssl.context) is a NOP in the http case.\n\nI meant that Use KeepAlive acts as the reset if deselected.\n\nSo I think we already have the means to do a reset each iteration.", "is_private": false, "bug_id": 58807, "id": 187452, "time": "2016-01-07T03:01:42Z", "creator": "sebb@apache.org", "creation_time": "2016-01-07T03:01:42Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "id": 187453, "time": "2016-01-07T03:52:51Z", "bug_id": 58807, "creation_time": "2016-01-07T03:52:51Z", "is_private": false, "text": "(In reply to Sebb from comment #10)\n> (In reply to Rainer Jung from comment #8)\n> > (In reply to Sebb from comment #7)\n> > > (In reply to Rainer Jung from comment #6)\n> > > > As far as I understand the situation reusing (the default) means e.g.\n> > > > connections are kept open and are reused via HTTP Keep-Alive during the next\n> > > > iteration. I do see this behavior using https, I expect it to happen for\n> > > > http too. That's of course efficient but might not be what you want. A new\n> > > > iteration typically is a new user who would start with new connections.\n> > > >\n> > > > Of course modelling the connection behavior in an exact way is beyond what\n> > > > we support, but the decision to start a new iteration with new connections\n> > > > could be interesting for some (approximate modeling). It is somehow\n> > > > analogous to modeling the handshake rate by resetting the SSLContext,\n> > > > although a new connection is of cours less disruptive than a new ssl\n> > > > handshake. All in all not a critical feature.\n> > > \n> > > Surelt that's already catered for by the \"Use Keepalive\" checkbox?\n> > > If not checked, JMeter sends Connection: close.\n> > \n> > I didn't mean to completely disable Keep-Alive but to not alow Keep-Alive\n> > from one itertaion to the next. \n> \n> What do you mean by iteration?\n\nOne loop for the same thread.\n\n> If you mean the start of the next loop, one just needs to clear Use\n> KeepAlive on the last sampler.\n\nDepending on the logic controllers in the plan, there is no easy way to decide upon the last sampler, more precisely the last execution of the last sampler in one loop. It could change during plan execution. Most often it will be a defined logout sample or similar, but not necessarily. You e.g. might want to loop the last sampler until a condition becomes true.\n\n> > The \"Use Keepalive\" checkbox would disable\n> > Keep-Alive completely.\n> \n> Use Keepalive only applies to a single sample.\n> If deselected, it means the connection will be reset after it completes.\n\nOK, you were talking about a single HTTP sampler, I was talking about the HTTP sampler default config element. See above for problem of defining the \"last sampler\".\n\n> > > > In addition I think the optional behavior \"reset instead of reuse\" for http\n> > > > and https is a good safety net against problems that might creep in due to\n> > > > reuse of objects that might have more context than we expect (wrong basic\n> > > > auth, wrong cookie, wrong client cert, wrong SNI etc.). Of course most of\n> > > > these things do work now, but reusing the connections and the objects from\n> > > > the HC libs as well as the SSLContext might introduce future bugs of the\n> > > > sort \"next iteration uses context data from the previous one\" which could\n> > > > then be worked around quickly by disabling the reuse. In general since the\n> > > > risks are quite vague so I'd stay on the performance side here for the\n> > > > default value (reuse). But probably based on my incomplete understanding of\n> > > > the lifecycles of HC objects, I'd feel better if we had such a \"reset\n> > > > between iterations\" switch.\n> > >\n> > > I think we already do.\n> > \n> > I don't understand you. The current impl of reset\n> > (https.use.cached.ssl.context) is a NOP in the http case.\n> \n> I meant that Use KeepAlive acts as the reset if deselected.\n> \n> So I think we already have the means to do a reset each iteration.\n\nAs I wrote, connection keep alive is only one of the arguments. General object reuse between loop iterations (HTTPClient instance) is what makes me feel more uncomfortable. If someone with enough HC knowledge than me comments strongly that such a reset will most likely not be necessary, I'm OK to forget about that reset feature for http."}, {"count": 12, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "is_private": false, "id": 187580, "time": "2016-01-12T21:04:43Z", "bug_id": 58807, "creation_time": "2016-01-12T21:04:43Z", "text": "Hi,\nCan the patch be commited ?\nThanks"}, {"count": 13, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "id": 189391, "time": "2016-03-11T22:49:10Z", "bug_id": 58807, "creation_time": "2016-03-11T22:49:10Z", "is_private": false, "text": "Hello,\n\nI suggest we delay this bugfix to 3.1 unless there is a volunteer to test it and confirm it is OK (including Parallel Download)\n\nRegards\nPhilippe"}, {"count": 14, "tags": [], "creator": "bamboocha324@yahoo.de", "attachment_id": null, "is_private": false, "id": 193441, "time": "2016-08-31T18:31:20Z", "bug_id": 58807, "creation_time": "2016-08-31T18:31:20Z", "text": "Hi,\n\nwell in jmeter 2.13 i had the following (so far not clear to me) issue with https where the https WAS mutual ssl.\nI set up the ssl debug on and watched what happend with my http samplers.\n\nI had a java key store whith 2 client certs.\nI had a key store configuration element which starts at 0 and ends at 1 (2 elements).\n\nNow i had one thread group and 2 http samplers both pointing to the same https server. One sampler was targeting https://server/uri and the second ../uri2.\n\nNow i had the following problem.\nThe first http sampler picked the first ssl cert from my keystore [0] made a mutual ssl connection and execute .../uri. -great.\n\nThe second http sampler DOES NOT REUSE the connection and DOES NOT executed the ../uri2 BUT the second http sampler made a NEW connection (ssl) and picked a NEW client cert from the keystore [1]\n\nIt was STILL the SAME Thread just the next http sampler.\nIt was a mess because the user with the client cert on [1] was not allowed to execute the ../uri2. \n\nThen...i changed the parameter \"https.use.cached.ssl.context\" and put value \"true\".\nI have no idea why...but it WORKED?!?. \nMeans the first http sampler did mutual ssl and execute ../uri\nThe second http sampler did NOT the handshake again but execute the ../uri2 as the same user as the first sampler. perfect.\nBut why?"}]
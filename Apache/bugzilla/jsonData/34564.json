[{"count": 0, "tags": [], "bug_id": 34564, "attachment_id": null, "text": "I have a servlet which generates the excel file and I use an excel templete to \npush data from my servlet to the excel file. The problem is that I can't save \nthe excel file, well I can save it to disk but the file is very strange( not \nan excel file ). My servlet is as follows:\n\n/*\n* Copyright (c) 2002, Nordea\n* All rights reserved.\n */\npackage no.nordea.mo.es.web.servlet;\n\nimport java.text.ParsePosition;\nimport com.nordea.coffee.util.Log;\nimport com.nordea.coffee.util.LogMessage;\nimport no.nordea.mo.common.model.CustomerModel;\nimport no.nordea.mo.common.model.GeoAddressModel;\nimport no.nordea.mo.common.model.PersonModel;\nimport no.nordea.mo.engagement.model.EngagementModel;\nimport no.nordea.mo.engagement.web.EngagementForm;\nimport no.nordea.mo.es.model.TxModel;\nimport no.nordea.mo.es.web.bean.currentAccTrans;\nimport no.nordea.mo.es.web.forms.ComplexSearchForm;\nimport no.nordea.mo.es.web.forms.ESSessionStateForm;\nimport no.nordea.mo.ks.model.KSEngagementModel;\n//import org.apache.poi.hssf.usermodel.*;\n//import org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.util.HSSFColor;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\nimport no.nordea.mo.es.api.ESService;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport no.nordea.mo.common.util.Props;\nimport java.math.BigDecimal;\nimport no.nordea.mo.es.web.actions.performSearchAction;\nimport no.nordea.mo.es.command.TransactionSearchCommand;\nimport no.nordea.mo.es.detail.EntryDetail;\nimport no.nordea.mo.es.detail.EntryPk;\nimport no.nordea.mo.es.detail.TransactionSearchDetail;\nimport no.nordea.mo.es.detail.TransactionSearchPk;\nimport com.nordea.coffee.CfApplicationException;\nimport java.text.SimpleDateFormat;\nimport no.nordea.mo.common.util.KwsConstants;\nimport no.nordea.mo.es.bean.LabelValueBean;\nimport java.util.Calendar;\n\n/**\n * Describe what this class does\n *\n * @author         AC08772\n * @version        4.0 $Revision: 1.9 $\n */\npublic class ExcelServlet extends HttpServlet {\n    private final static String CONTENT_TYPE = \"application/vnd.ms-excel\";\n    private static transient Log log = Log.getInstance\n(ExcelServlet.class.getName());\n    private static boolean isTest = false;\n\n    private ServletOutputStream out;\n    //Initialize global variables\n\n    /**\n     * Describe what the method does\n     *\n     * @exception ServletException  Describe the exception\n     */\n    public void init() throws ServletException {\n    }\n\n    public void doDelete(HttpServletRequest request, HttpServletResponse \nresponse) throws ServletException, IOException {\n\n       log.debug(new LogMessage(\"doDelete\", \"method entered\"));\n    }\n\n    //Process the HTTP Get request\n\n    /**\n     * Describe what the method does\n     *\n     * @param request               Describe what the parameter does\n     * @param response              Describe what the parameter does\n     * @exception ServletException  Describe the exception\n     * @exception IOException       Describe the exception\n     */\n    public void doGet(HttpServletRequest request, HttpServletResponse \nresponse) throws ServletException, IOException {\n\n        log.debug(new LogMessage(\"doGet\", \"method entered\"));\n\n        out = response.getOutputStream();\n        response.setContentType(CONTENT_TYPE);\n\n        ESSessionStateForm essForm = (ESSessionStateForm) request.getSession\n().getAttribute(\"essForm\");\n        EngagementForm engagementForm = (EngagementForm) request.getSession\n().getAttribute(\"engagementForm\");\n        ComplexSearchForm complexForm = (ComplexSearchForm) \nessForm.getSearchForms();\n\n\t\t  // Get the request variable\n\t\t  String accountIndex = request.getParameter(\"accountIndex\");\n  \t     HSSFWorkbook workbook = null;\n\t\t  int index = 0;\n\n\t\t  try {\n\t\t\t\tfetchResults(complexForm);\n\n\t\t\t   if(accountIndex != null) {\n\t            index = Integer.parseInt(accountIndex);\n\t\t\t\t   workbook = createExcelDocument(essForm, \ncomplexForm, engagementForm, index);\n\t\t\t   } else {\n\t            workbook = createExcelDocument(essForm, complexForm, \nengagementForm);\n\t\t\t   }\n\n            workbook.write(out);\n            out.close();\n        } catch (Exception e) {\n            log.error(new LogMessage(\"doGet\", \"Error creating excel \ndocument\"));\n        }\n    }\n    //Clean up resources\n\n    /**\n     * Describe what the method does\n     *\n     */\n    public void destroy() {\n\n\n    }\n\n    public static void main(String[] argvs) {\n        ExcelServlet servlet = new ExcelServlet();\n\n        ESSessionStateForm essForm = new ESSessionStateForm();\n\n        // All the engagement models we need\n        EngagementModel model = new EngagementModel();\n        EngagementForm form = new EngagementForm();\n        KSEngagementModel ksEngagementModel = new KSEngagementModel();\n\n        // The data model we need\n        PersonModel personmodel = new PersonModel();\n        GeoAddressModel geoaddressmodel = new GeoAddressModel();\n        CustomerModel customermodel = new CustomerModel();\n\n        // Create a person\n        personmodel.setFirstName(\"Tor\");\n        personmodel.setLastName(\"Major\");\n\n        // Give him an address\n        geoaddressmodel.setPostalArea(\"Oslo\");\n        geoaddressmodel.setPostalCode(\"0107\");\n        geoaddressmodel.setStreetAddress(\"Essendropsgate 7\");\n\n        // Add the information to the customer model\n        customermodel.setPerson(personmodel);\n        customermodel.setAddress(geoaddressmodel);\n\n        // Add the customer model to the KS model to simulate a retrival from \nHost\n        ksEngagementModel.setCustomer(customermodel);\n\n        // Prepare the Engagement model with the fake host result and place in \nthe engagement form\n        model.setKs(ksEngagementModel);\n        form.setEngagementModel(model);\n\n        // Simulate a fake search result\n        ComplexSearchForm complexsearchform = new ComplexSearchForm();\n\n/*        Calendar fromDate = Calendar.getInstance();\n        fromDate.set(2002, 11, 1);\n\n        Calendar toDate = Calendar.getInstance();\n        toDate.set(2002, 12, 31);\n\n        complexsearchform.setStartDate(fromDate.getTime());\n\t\t  complexsearchform.setEndDate(toDate.getTime());*/\n\n\t\t  complexsearchform.setStartdate(\"2002-11-01\");\n\t\t  complexsearchform.setEnddate(\"2002-12-31\");\n\n\t\t  complexsearchform.addAccountToList(\"600308080800\");\n\t\t  complexsearchform.setAmountFrom(\"0\");\n\t\t  complexsearchform.setAmountTo(\"99999999\");\n\t\t  complexsearchform.setSelectedCurrency(\"NOK\");\n\n        currentAccTrans cacctrans = new currentAccTrans();\n        cacctrans.setAccountNr(\"600308080800\");\n\n        TxModel txmodel = new TxModel();\n        txmodel.setAmount(100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-1000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(4000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        complexsearchform.addToResultTrans(cacctrans);\n\t\t  complexsearchform.setDebit(true);\n\n        // ############################# Account number two\n        complexsearchform.addAccountToList(\"600308080900\");\n\n        cacctrans = new currentAccTrans();\n        cacctrans.setAccountNr(\"600308080900\");\n\n        txmodel = new TxModel();\n        txmodel.setAmount(100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-1000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(4000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        complexsearchform.addToResultTrans(cacctrans);\n\n        // ############################# Account number two\n        complexsearchform.addAccountToList(\"600308080300\");\n\n        cacctrans = new currentAccTrans();\n        cacctrans.setAccountNr(\"600308080300\");\n\n        txmodel = new TxModel();\n        txmodel.setAmount(100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-100);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Kort\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(-1000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        txmodel = new TxModel();\n        txmodel.setAmount(4000);\n        txmodel.setEntryDate(new Date());\n        txmodel.setTxType(\"Betaling\");\n        txmodel.setTransTypeTXT(\"Testing transaction Negative\");\n        cacctrans.addTxModelToList(txmodel);\n\n        complexsearchform.addToResultTrans(cacctrans);\n\n\t\t  String accounts[] = \n{\"600308080800\", \"600308080900\", \"600308080300\"};\n\t\t  complexsearchform.setSelectedAccount(accounts);\n\n        try {\n\t\t\t\tservlet.fetchResults(complexsearchform);\n            servlet.createExcelDocument(essForm, complexsearchform, form);\n            //servlet.createJXExcelDocument(essForm, complexsearchform, form);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public HSSFWorkbook createExcelDocument(ESSessionStateForm essForm, \nComplexSearchForm complexForm, EngagementForm engagementform) throws Exception \n{\n\t\treturn createExcelDocument(essForm, complexForm, \nengagementform, -1);\n    }\n\n    public HSSFWorkbook createExcelDocument(ESSessionStateForm essForm, \nComplexSearchForm complexForm, EngagementForm engagementform, int index) \nthrows Exception {\n        try {\n            POIFSFileSystem fsfilesystem = new POIFSFileSystem(new \nFileInputStream(Props.getProperty(\"mo\", \"excel.template\")));\n            HSSFWorkbook workbook = new HSSFWorkbook(fsfilesystem);\n\n            // Get engagement model\n            EngagementModel engagementmodel = engagementform.getEngagementModel\n();\n\n            // Ok we now have a workbook based on our template, we need to get \nthe number of accounts available\n            ArrayList accountList = complexForm.getAccountList();\n            int numberOfAccounts = accountList.size();\n            HSSFSheet movementssheet = workbook.getSheet(\"Bevegelser\");\n\n            // Check that the template is valid\n            if (movementssheet != null) {\n                // Fetch the Customer information first\n                CustomerModel customerModel = engagementmodel.getCustomer();\n                GeoAddressModel geoAddressModel = customerModel.getAddress();\n                PersonModel personModel = customerModel.getPerson();\n\n                // Set the First and last name\n                HSSFRow row = movementssheet.getRow(4);\n                HSSFCell cell = row.getCell((short) 1);\n                cell.setCellValue(personModel.getFirstName() + \" \" + \npersonModel.getLastName());\n\n                // Set the street address\n                row = movementssheet.getRow(5);\n                cell = row.getCell((short) 1);\n                cell.setCellValue(geoAddressModel.getStreetAddress());\n\n                // Set postcode and postplace\n                row = movementssheet.getRow(6);\n                cell = row.getCell((short) 1);\n                cell.setCellValue(geoAddressModel.getPostalCode() + \" \" + \ngeoAddressModel.getPostalArea());\n\n                // Set from and to date for the search\n                row = movementssheet.getRow(5);\n                cell = row.getCell((short) 7);\n                cell.setCellValue(complexForm.getStartdate());\n\n                cell = row.getCell((short) 9);\n                cell.setCellValue(complexForm.getEnddate());\n\n\t\t\t\t\t Iterator i = null;\n\n\t\t\t\t\t // Ok we want to ensure that we only \npick one account if it is specified\n\t\t\t\t\t if(index != -1) {\n\t\t\t\t\t\t// Fetch the account we want \nto look up\n\t\t\t\t\t   //String accountString = (String)\ncomplexForm.getAccountList().get(index);\n\t\t\t\t\t\tString accountString = \n((currentAccTrans)complexForm.getResultTrans().get(index)).getAccountNr();\n\t\t\t\t\t\t// Create an arrayList to \nensure that we get what we need\n\t\t\t\t\t\tArrayList newList = new \nArrayList();\n\n\t\t\t\t\t\t// Iterate through all the \nresults  [accouts]\n\t\t\t\t\t\ti = complexForm.getResultTrans\n().iterator();\n\n\t\t\t\t\t\twhile(i.hasNext()) {\n\t\t\t\t\t\t   // Find the account we want \nand ensure that only that one is shown\n\t\t\t\t\t\t   currentAccTrans accTrans = \n(currentAccTrans) i.next();\n\n\t\t\t\t\t\t\tif\n(accTrans.getAccountNr().equals(accountString))\n\t\t\t\t\t\t\t\tnewList.add\n(accTrans);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti = newList.iterator();\n\t\t\t\t\t } else {\n                  i = complexForm.getResultTrans().iterator();\n\t\t\t\t\t }\n\n                // OK we need to check how many accounts we have\n                int accountpointer = 8;\n\n                while (i.hasNext()) {\n                    // Get the account object\n                    currentAccTrans accTrans = (currentAccTrans) i.next();\n\n                    // Copying from the template to the actual workbook\n                    HSSFSheet templatesheet = workbook.getSheet(\"Template\");\n\n                    for (int rownr = 0; rownr < 6; rownr++) {\n                        int numberofrowsrepeated = 0;\n                        int numberoftransactions = 1;\n\n                        if (rownr == 2) {\n                            numberoftransactions = accTrans.getTxModelList\n().size();\n                        }\n\n                        // Copy the row a #numberofrowsrepeated times\n                        for (; numberofrowsrepeated < numberoftransactions; \nnumberofrowsrepeated++, accountpointer++) {\n                            HSSFRow selectedrow = templatesheet.getRow(rownr);\n                            HSSFRow copytorow = movementssheet.getRow\n(accountpointer);\n\n                            // Insert a fresh row if none exists\n                            if (copytorow == null)\n                                copytorow = movementssheet.createRow((short)\naccountpointer);\n\n                            // Set the hight to reflect the original rows \nheight\n                            copytorow.setHeight(selectedrow.getHeight());\n\n                            // Ensure that all cells are transfered correctly \nwith information about state\n                            for (int columnnr = 0; columnnr < 10; columnnr++) {\n                                HSSFCell selectedcell = selectedrow.getCell\n((short) columnnr);\n                                HSSFCell copytocell = copytorow.createCell\n((short) columnnr);\n\n                                // Copy the content of the cell\n                                if (selectedcell != null) {\n                                    if (selectedcell.getCellType() == \nHSSFCell.CELL_TYPE_BOOLEAN) {\n                                        copytocell.setCellValue\n(selectedcell.getBooleanCellValue());\n                                    } else if (selectedcell.getCellType() == \nHSSFCell.CELL_TYPE_NUMERIC) {\n                                        copytocell.setCellValue\n(selectedcell.getNumericCellValue());\n                                    } else if (selectedcell.getCellType() == \nHSSFCell.CELL_TYPE_STRING) {\n                                        copytocell.setCellValue\n(selectedcell.getStringCellValue());\n                                    } else if (selectedcell.getCellType() == \nHSSFCell.CELL_TYPE_FORMULA) {\n                                        copytocell.setCellValue\n(selectedcell.getCellFormula());\n                                    }\n\n                                    // Transfer the cell style and ensure that \nwrap is off\n                                    copytocell.setCellStyle\n(selectedcell.getCellStyle());\n                                    HSSFCellStyle style = \ncopytocell.getCellStyle();\n                                    style.setWrapText(false);\n                                }\n                            }\n                        }\n\n                        // Add the account info\n                        if (rownr == 0) {\n                            row = movementssheet.getRow(accountpointer - 1);\n                            cell = row.getCell((short) 5);\n                            cell.setCellValue(\"Konto nummer: \" + \naccTrans.getAccountNr());\n                        }\n                    }\n\n                    // Get the transactions\n                    Iterator iTxModel = accTrans.getTxModelList().iterator();\n\n                    // Set the starting point for the actual writing of the \ndata\n                    int startpoint = accountpointer - accTrans.getTxModelList\n().size() - 3;\n\n                    // Iterate over all the transactions\n                    while (iTxModel.hasNext()) {\n                        TxModel model = (TxModel) iTxModel.next();\n                        HSSFRow moverow = movementssheet.getRow(startpoint);\n\n                        HSSFCell movecell = moverow.getCell((short) 1);\n                        movecell.setCellValue(model.getMyEntryDate());\n                        movecell = moverow.getCell((short) 3);\n                        movecell.setCellValue(model.getTxType());\n                        movecell = moverow.getCell((short) 5);\n                        movecell.setCellValue(model.getTransTypeTXT());\n\n                        double innamount = 0, outamount = 0;\n\n                        if (model.getAmount() >= 0) {\n                            innamount = model.getAmount();\n                            outamount = 0;\n\t                        movecell = moverow.getCell((short) 9);\n                           movecell.setCellValue(innamount);\n                        } else {\n                            innamount = 0;\n                            outamount = model.getAmount();\n\t                        movecell = moverow.getCell((short) 7);\n                           movecell.setCellValue(outamount);\n                        }\n\n                        // Write the amount into the excel spreadheet cell\n                        startpoint++;\n                    }\n\n                    // Now we need to specify the formulas so that the values \nare computed correctly\n                    HSSFRow choosenrow = movementssheet.getRow(startpoint);\n\n                    // Chose the sub sum row, now insert the formulas \nneccessary\n                    HSSFCell outformulacell = choosenrow.getCell((short) 7);\n                    outformulacell.setCellFormula(\"SUM(H\" + (startpoint - \naccTrans.getTxModelList().size() + 1) + \":H\" + startpoint + \")\");\n\n                    HSSFCell informulacell = choosenrow.getCell((short) 9);\n                    informulacell.setCellFormula(\"SUM(J\" + (startpoint - \naccTrans.getTxModelList().size() + 1) + \":J\" + startpoint + \")\");\n\n                    // Chose the last row and insert the final summation\n                    choosenrow = movementssheet.getRow(startpoint + 2);\n                    HSSFCell balancecell = choosenrow.getCell((short) 9);\n                    balancecell.setCellFormula(\"H\" + (startpoint + 1) + \" + J\" \n+ (startpoint + 1));\n\n                    // Insert to empty rows to ensure that we have space \nbetween accounts if there are more than one\n                    movementssheet.createRow((short)accountpointer);\n                    movementssheet.createRow((short)accountpointer + 1);\n\n                    // Adjust start pointer\n                    accountpointer += 2;\n                }\n            }\n\n            // Delete template sheet to ensure that its not available\n            int sheetIndex = workbook.getSheetIndex(\"Template\");\n            workbook.removeSheetAt(sheetIndex);\n            movementssheet.setSelected(true);\n           // workbook.createSheet(\"\");\n\n            return workbook;\n        } catch (IOException e) {\n            e.printStackTrace();  //To change body of catch statement use \nOptions | File Templates.\n            return null;\n        }\n    }\n\n\tpublic void fetchResults(ComplexSearchForm complexSearchForm) throws \nCfApplicationException {\n       String METHOD_NAME = \"fetchResults\";\n\n\t\t TransactionSearchCommand tc = new TransactionSearchCommand();\n       TransactionSearchDetail detail = null;\n\t\t   BigDecimal fromAmount = null, toAmount = null;\n\t\t   Character sign = null;\n\n       complexSearchForm.clearResultTrans();\n\n                /*\n                 *  Debit Credit\n                 */\n                if (complexSearchForm.getDebit() && !\ncomplexSearchForm.getCredit()) {\n                    sign = TransactionSearchPk.DEBIT;\n\n                    fromAmount = performSearchAction.findFromAmount\n(sign.charValue(), complexSearchForm.getAmountFrom());\n                    toAmount = performSearchAction.findToAmount(sign.charValue\n(), complexSearchForm.getAmountTo());\n\n                } else if (complexSearchForm.getCredit() && !\ncomplexSearchForm.getDebit()) {\n                    sign = TransactionSearchPk.CREDIT;\n\n                    fromAmount = performSearchAction.findFromAmount\n(sign.charValue(), complexSearchForm.getAmountFrom());\n                    toAmount = performSearchAction.findToAmount(sign.charValue\n(), complexSearchForm.getAmountTo());\n\n                } else if (complexSearchForm.getDebit() && \ncomplexSearchForm.getCredit()) {\n                    sign = TransactionSearchPk.DEBIT_CREDIT;\n\n                    fromAmount = performSearchAction.findFromAmount\n(sign.charValue(), complexSearchForm.getAmountFrom());\n                    toAmount = performSearchAction.findToAmount(sign.charValue\n(), complexSearchForm.getAmountTo());\n\n                } else {\n                    log.error(new LogMessage(METHOD_NAME, \"You have to choose \neither Debit, Credit or both\"));\n                    throw new CfApplicationException\n(\"kws.es.chooseDebitCredit\", \"You have to choose either Debit, Credit or \nboth\");\n                }\n\n\t\t\t\t    // Perform the search and get the detail \nobject\n                for (int i = 0; i < complexSearchForm.getSelectedAccount\n().length; i++) {\n                    int transNr = 0;\n                    BigDecimal accountNo = new BigDecimal\n(complexSearchForm.getSelectedAccount()[i]);\n\n\t\t  SimpleDateFormat formatter = new SimpleDateFormat\n(KwsConstants.DATEFORMAT_FULL);\n        Date startDate = formatter.parse(complexSearchForm.getStartdate(), new \nParsePosition(0));\n        Date endDate = formatter.parse(complexSearchForm.getEnddate(), new \nParsePosition(0));\n\n                    TransactionSearchPk pk = new TransactionSearchPk(accountNo,\n                            startDate,\n                            endDate,\n                            fromAmount,\n                            toAmount,\n                            sign,\n                            complexSearchForm.getSelectedCurrency(),\n                            complexSearchForm.getSearchText(),\n                            TransactionSearchPk.BA,\n                            new Integer(Integer.MAX_VALUE));\n\n                    tc.setPrimaryKey(pk);\n                    detail = (TransactionSearchDetail) tc.execute();\n                    log.debug(new LogMessage(\"performExecute\", \"transactions \nretrieve time: \" + detail.getExecutionTime()));\n\n                    ArrayList entryDetails = detail.getEntryDetails();\n\n                    currentAccTrans currAccTrans = new currentAccTrans();\n                    currAccTrans.setAccountNr(accountNo.toString());\n                    log.debug(\"Total number of entries: \" + \ndetail.getTOT_NUM_ENTRIES());\n                    currAccTrans.setTOT_NUM_ENTRIES(detail.getTOT_NUM_ENTRIES\n());\n                    currAccTrans.setNumOfTrans(detail.getTOT_NUM_ENTRIES());\n                    currAccTrans.setNumOfEntries(new Integer\n(Integer.MAX_VALUE));\n                    currAccTrans.setPk((TransactionSearchPk) \ndetail.getPrimaryKey());\n\n                    pk = (TransactionSearchPk) detail.getPrimaryKey();\n                    currAccTrans.setPageNumber(pk.getCurrentPage());\n\n                    for (Iterator iter = entryDetails.iterator(); iter.hasNext\n(); ) {\n                        EntryDetail entrydetail = (EntryDetail) iter.next();\n                        TxModel model = new TxModel();\n                        model.setAmount(entrydetail.getENTR_AMOUNT\n().doubleValue());\n                        model.setTxType(entrydetail.getTEXTCODE_TEXT());\n                        model.setPaymentDate(entrydetail.getPAID_DATE());\n                        model.setEntryDate(entrydetail.getBOBA_BOOKING_DATE());\n                        SimpleDateFormat df = new SimpleDateFormat\n(KwsConstants.DATEFORMAT_FULL);\n                        model.addToTransTypefRest(new LabelValueBean\n(\"OPPDRAGSDATO:\", df.format(entrydetail.getPAID_DATE()).toString()));\n                        model.setTranNr(transNr);\n                        model.setExpand(false);\n\n                        String transTypeTXT = \"\";\n\t\t\t\t\t\t\t\tString friTXT  \n= \"\";\n\n                        for (Iterator iter1 = entrydetail.getTEXT_ENTRIES\n().iterator(); iter1.hasNext(); ) {\n                            String entryText = (String) iter1.next();\n                            if (entryText.substring(0, 3).equalsIgnoreCase\n(\"TXT\")) {\n                                transTypeTXT += entryText.substring(3, \nentryText.length());\n                                transTypeTXT += \" \";\n\n                            } else if (entryText.indexOf((char) 141) != -1) {\n                                model.addToTransTypefRest\n(performSearchAction.constructLabelValueBean(entryText));\n                            } else {\n\n                                if (entryText.substring(0, 3).equalsIgnoreCase\n(\"BGR\")) {\n                                    friTXT += entryText.substring(3, \nentryText.length());\n                                    friTXT += \" \";\n                                }\n\n                                if (entryText.substring(0, 3).equalsIgnoreCase\n(\"VBL\")) {\n                                    model.addToTransTypefRest(new \nLabelValueBean(\"VALUTATRANS :\", entryText.substring(3, entryText.length())));\n                                }\n\n                                model.setTransTypeWithoutText\n(entryText.substring(3, entryText.length()));\n                            }\n\n                            model.setTransTypeTXT(transTypeTXT);\n                        }\n\n                        if (transTypeTXT.equals(\"\")) {\n                            model.setTransTypeTXT(friTXT);\n                        }\n\n                        currAccTrans.setBalance(entrydetail.getENTR_AMOUNT\n().doubleValue());\n                        currAccTrans.addTxModelToList(model);\n                        transNr++;\n                    }\n\n                    complexSearchForm.addToResultTrans(currAccTrans);\n                }\n\t}\n\n\n    public void setIsTest\n            (\n            boolean isTest) {\n        this.isTest = isTest;\n    }\n}", "id": 73941, "time": "2005-04-22T09:13:43Z", "creator": "syed.sazzadul.haq@nordea.com", "creation_time": "2005-04-22T09:13:43Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 34564, "attachment_id": 14782, "id": 73942, "time": "2005-04-22T09:18:46Z", "creator": "syed.sazzadul.haq@nordea.com", "creation_time": "2005-04-22T09:18:46Z", "is_private": false, "text": "Created attachment 14782\nGenerated excel file\n\nGenerated excel file"}, {"attachment_id": 14783, "tags": [], "bug_id": 34564, "is_private": false, "count": 2, "id": 73944, "time": "2005-04-22T09:19:40Z", "creator": "syed.sazzadul.haq@nordea.com", "creation_time": "2005-04-22T09:19:40Z", "text": "Created attachment 14783\nTemplate file\n\nTemplate file"}, {"count": 3, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "id": 73965, "time": "2005-04-22T13:20:00Z", "bug_id": 34564, "creation_time": "2005-04-22T13:20:00Z", "is_private": false, "text": "This bug, as attached, fails to show any bug in POI. The code attached fails to\ncompile, making it impossible to make sense out of it. \n\n\"Very strange\" is not something anyone can debug. "}, {"count": 4, "tags": [], "bug_id": 34564, "attachment_id": null, "text": "This bug, as attached, fails to show any bug in POI. The code attached fails to\ncompile, making it impossible to make sense out of it. \n\n\"Very strange\" is not something anyone can debug. ", "id": 73966, "time": "2005-04-22T13:20:17Z", "creator": "avik@apache.org", "creation_time": "2005-04-22T13:20:17Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34564, "attachment_id": null, "text": "I am adding a very simple code which will compile and I am facing same problem \nwith this simple code. The genarated excel file looks very strange. Could it \nbe something with my excel template ?\n\npackage no.nordea.klow.web.actions;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletException;\n\nimport java.io.IOException;\nimport java.io.FileInputStream;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\npublic class ExcelServlet extends HttpServlet {\n    private final static String CONTENT_TYPE = \"application/vnd.ms-excel\";\n\n    private ServletOutputStream out;\n\n    public void init() throws ServletException {\n    }\n\n    public void doDelete(HttpServletRequest request, HttpServletResponse \nresponse) throws ServletException, IOException {\n        System.out.println(\"doDelete method entered\");\n    }\n\n    public void doGet(HttpServletRequest request, HttpServletResponse \nresponse) throws ServletException, IOException {\n\n        System.out.println(\"doGet method entered\");\n\n        out = response.getOutputStream();\n        response.setContentType(CONTENT_TYPE);\n\n        HSSFWorkbook workbook = null;\n\n        try {\n\n            POIFSFileSystem fsfilesystem = new POIFSFileSystem(new \nFileInputStream(\"C:\\\\MO\\\\nordea.xls\"));\n            workbook = new HSSFWorkbook(fsfilesystem);\n            workbook.write(out);\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "id": 74086, "time": "2005-04-25T16:23:06Z", "creator": "syed.sazzadul.haq@nordea.com", "creation_time": "2005-04-25T16:23:06Z", "is_private": false}]
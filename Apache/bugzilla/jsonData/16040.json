[{"count": 0, "tags": [], "creator": "alexeys@inventigo.com", "attachment_id": null, "text": "This in an example scripts that works on Windows but not on Solaris:\n<project name=\"test\" basedir=\".\" default=\"all\">\n  <target name=\"all\">\n    <exec executable=\"dir1/prog\" dir=\"dir2\"/>\n  </target>\n</project>", "id": 29307, "time": "2003-01-13T20:56:58Z", "bug_id": 16040, "creation_time": "2003-01-13T20:56:58Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 16040, "attachment_id": 4410, "is_private": false, "id": 29308, "time": "2003-01-13T20:57:46Z", "creator": "alexeys@inventigo.com", "creation_time": "2003-01-13T20:57:46Z", "text": "Created attachment 4410\ntest case"}, {"count": 2, "tags": [], "text": "Could you please try with an additional vmlauncher=\"false\"?\n\nProbably a duplicate of Bug 420 Bug 3129 and other similar bugs.", "attachment_id": null, "id": 29400, "creator": "bodewig@apache.org", "time": "2003-01-15T13:35:57Z", "bug_id": 16040, "creation_time": "2003-01-15T13:35:57Z", "is_private": false}, {"count": 3, "tags": [], "text": "vmlauncher=\"false\" does not change anything. The test script still reports that\ndir1/prog not found and \"Result: 1\"", "attachment_id": null, "id": 29482, "creator": "alexeys@inventigo.com", "time": "2003-01-15T23:28:20Z", "bug_id": 16040, "creation_time": "2003-01-15T23:28:20Z", "is_private": false}, {"count": 4, "tags": [], "text": "Fixed in CVS Head.\n\nCould you please checkout and test both on Solaris and Windows (I've tested on\nLinux) and it works with both vmlauncher = true and false.\n\nCould be ported to 1.5, once confirmed.", "is_private": false, "id": 30104, "creator": "conor@apache.org", "time": "2003-01-27T14:55:15Z", "bug_id": 16040, "creation_time": "2003-01-27T14:55:15Z", "attachment_id": null}, {"count": 5, "text": "You'll need to add resolveExecutable=\"yes\" to get this behaviour. That rules out\n1.5.", "creator": "conor@apache.org", "attachment_id": null, "id": 30106, "time": "2003-01-27T15:13:00Z", "bug_id": 16040, "creation_time": "2003-01-27T15:13:00Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "And if I also specify a nested <env key=\"Path\" .../>, will \nresolveExecutable=\"yes\" take this new Path into account to do the resolution? --\nDD", "attachment_id": null, "id": 30107, "creator": "ddevienne@lgc.com", "time": "2003-01-27T15:21:14Z", "bug_id": 16040, "creation_time": "2003-01-27T15:21:14Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 16040, "attachment_id": null, "is_private": false, "id": 30109, "time": "2003-01-27T15:27:38Z", "creator": "conor@apache.org", "creation_time": "2003-01-27T15:27:38Z", "text": "You mean resolution of somethign like dir1/prog against the path entries - no,\nbut the command line won't do that either. If that is not what you mean, could\nyou expand?"}, {"count": 8, "tags": [], "bug_id": 16040, "attachment_id": null, "text": "I meant that currently, to resolve the exe name to a full path, you must \nattempt to find it against the system Path, by looking for it against each \nelement of that path. This system path can be modified / changed by using a \nnested <env> tag so that the forked process executes under this new system \npath. Providing resolution against that updated path (rather than the system \npath of the Ant's JVM) would have solved an odd problem I was having in one of \nmy build script on some machine, where\n\n<exec executable=\"foo.exe\">\n  <env key=\"Path\" path=\"C:/path/to/foo;${env.Path}\" />\n</exec>\n\nwould fail, even though foo.exe full pathname was C:/path/to/foo/foo.exe. \nWorked on other machines. Had to do \n\n<property name=\"foo.exe\" location=\"foo.exe\" />\n<exec executable=\"${foo.exe}\">\n  <env key=\"Path\" path=\"C:/path/to/foo;${env.Path}\" />\n</exec>\n\nand override the foo.exe property in a user/machine-specific properties file to \nprovide a full pathname to make it work on those troublesome machines (I still \nkeep C:/path/to/foo on path of the forked process, since the latter was itself \nforking other stuff in there).\n\nAnyhow, I think <exec> (and <java fork=\"true\"> and <junit fork=\"true\">) would \nbenefit from supporting a special <path> or <syspath> nested element \nspecifically for the purpose of setting the forked process system path (and the \nresolution of the executable name should use it if specified).\n\nAm I making more sense? Thanks, --DD", "id": 30113, "time": "2003-01-27T15:54:37Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-01-27T15:54:37Z", "is_private": false}]
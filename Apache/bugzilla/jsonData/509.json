[{"count": 0, "tags": [], "bug_id": 509, "attachment_id": null, "text": "I'm using log4j 1.04 in a threaded environment, each thread logging to the \nconsole (FileAppender to stdout) and to its own log file (RollingFileAppenders).\n\nI get the following stack trace at regular intervals:\n\njava.lang.NullPointerException\n\tat org.apache.log4j.FileAppender.subAppend(FileAppender.java:441)\n\tat org.apache.log4j.FileAppender.append(FileAppender.java:219)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n\tat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:56)\n\tat org.apache.log4j.Category.callAppenders(Category.java:258)\n\tat org.apache.log4j.Category.forcedLog(Category.java:454)\n\tat org.apache.log4j.Category.debug(Category.java:315)\n\tat com.dyncorp.dynride.scheduler.MasterScheduler.run\n(MasterScheduler.java:203)\n\tat java.lang.Thread.run(Thread.java:484)\n\nThis didn't ever happen in 0.9!  Let me know if you need any additional info!\n\nFollowing is the log configuration file:\n\n# Set root category priority to INFO, but no appenders\nlog4j.rootCategory=INFO\n\n# Database log\nlog4j.category.Database=INFO, APP_DB, stdout\n\n# Schedule Control Thread\nlog4j.category.SchedulerControlThread=DEBUG, APP_SCT, stdout\n\n# Ride Matcher\nlog4j.category.RideMatch=DEBUG, APP_RM, stdout\n\n# Scheduler\nlog4j.category.MasterScheduler=DEBUG, A1, stdout\n\n# Data Pull\nlog4j.category.DATA_PULL_DMR=DEBUG, APP_DP, stdout\n\n# Postprocesor\nlog4j.category.BuildData=DEBUG, APP_BD\n\nlog4j.appender.stdout=org.apache.log4j.FileAppender\nlog4j.appender.stdout.File=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n\n\n# APP_DP is set to be a RollingFileAppender\nlog4j.appender.APP_DP=org.apache.log4j.RollingFileAppender\nlog4j.appender.APP_DP.File=DataPullDMR.log\nlog4j.appender.APP_DP.MaxBackupIndex=5\nlog4j.appender.APP_DP.MaxFileSize=512KB\n\n# APP_DP uses PatternLayout.\nlog4j.appender.APP_DP.layout=org.apache.log4j.PatternLayout\nlog4j.appender.APP_DP.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n\n\n# A1 is set to be a RollingFileAppender\nlog4j.appender.A1=org.apache.log4j.RollingFileAppender\nlog4j.appender.A1.File=MasterScheduler.log\nlog4j.appender.A1.MaxBackupIndex=5\nlog4j.appender.A1.MaxFileSize=512KB\n\n# A1 uses PatternLayout.\nlog4j.appender.A1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n\n# APP_DB is set to be a RollingFileAppender\nlog4j.appender.APP_DB=org.apache.log4j.RollingFileAppender\nlog4j.appender.APP_DB.File=Database.log\nlog4j.appender.APP_DB.MaxBackupIndex=5\nlog4j.appender.APP_DB.MaxFileSize=512KB\n\n# APP_DB uses PatternLayout.\nlog4j.appender.APP_DB.layout=org.apache.log4j.PatternLayout\nlog4j.appender.APP_DB.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n\n# APP_SCT is set to be a RollingFileAppender\nlog4j.appender.APP_SCT=org.apache.log4j.RollingFileAppender\nlog4j.appender.APP_SCT.File=ScheduleControlThread.log\nlog4j.appender.APP_SCT.MaxBackupIndex=5\nlog4j.appender.APP_SCT.MaxFileSize=512KB\n\n# APP_SCT uses PatternLayout.\nlog4j.appender.APP_SCT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.APP_SCT.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n\n\n# APP_RM is set to be a RollingFileAppender\nlog4j.appender.APP_RM=org.apache.log4j.RollingFileAppender\nlog4j.appender.APP_RM.File=RideMatcher.log\nlog4j.appender.APP_RM.MaxBackupIndex=5\nlog4j.appender.APP_RM.MaxFileSize=512KB\n\n# APP_RM uses PatternLayout.\nlog4j.appender.APP_RM.layout=org.apache.log4j.PatternLayout\nlog4j.appender.APP_RM.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n\n# APP_BD is set to be a RollingFileAppender\nlog4j.appender.APP_BD=org.apache.log4j.RollingFileAppender\nlog4j.appender.APP_BD.File=BuildData.log\nlog4j.appender.APP_BD.MaxBackupIndex=5\nlog4j.appender.APP_BD.MaxFileSize=512KB\n\n# APP_BD uses PatternLayout.\nlog4j.appender.APP_BD.layout=org.apache.log4j.PatternLayout\nlog4j.appender.APP_BD.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n", "id": 473, "time": "2001-02-01T09:19:17Z", "creator": "dave.miller@phase2e.com", "creation_time": "2001-02-01T09:19:17Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 509, "attachment_id": null, "text": "\nDave,\n\nAre you by any way configuring any of the appenders while still using them? Can \nyou try to reproduce the problem with a smaller set of appenders? Ceki", "id": 474, "time": "2001-02-01T10:18:12Z", "creator": "bugzilla@apache.org", "creation_time": "2001-02-01T10:18:12Z", "is_private": false}, {"count": 2, "tags": [], "creator": "dave.miller@phase2e.com", "text": "Ceki,\n\nThe only thing I change while the program is still running is the priority - \nsometimes I change the category priorities between DEBUG and WARN.  However \nthe problem can occur while I've been away from my desk for a while so I am not \nsure it is related.\n\nI will do a new config file that has the same categories, but all using the \nsame appender instead of several different appenders.  Will let you know how \nthat works.\n\n-- \nDave", "id": 475, "time": "2001-02-01T10:50:35Z", "bug_id": 509, "creation_time": "2001-02-01T10:50:35Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "dave.miller@phase2e.com", "attachment_id": null, "id": 476, "time": "2001-02-01T11:29:12Z", "bug_id": 509, "creation_time": "2001-02-01T11:29:12Z", "is_private": false, "text": "OK, the new log config file has two appenders, stdout and a file.  After a \nwhile I got this stack trace: \n\njava.lang.NullPointerException\n\tat org.apache.log4j.FileAppender.subAppend(FileAppender.java:441)\n\tat org.apache.log4j.RollingFileAppender.subAppend\n(RollingFileAppender.java:258)\n\tat org.apache.log4j.FileAppender.append(FileAppender.java:219)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n\tat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:56)\n\tat org.apache.log4j.Category.callAppenders(Category.java:258)\n\tat org.apache.log4j.Category.forcedLog(Category.java:454)\n\tat org.apache.log4j.Category.debug(Category.java:315)\n\tat com.dyncorp.dynride.scheduler.MasterScheduler.run\n(MasterScheduler.java:203)\n\tat java.lang.Thread.run(Thread.java:484)\n\n-- \nDave\n"}, {"count": 4, "tags": [], "creator": "bugzilla@apache.org", "text": "\nThe region where the null pointer exception occurs is copied below.\n\n  protected\n  void subAppend(LoggingEvent event) {\n    this.qw.write(this.layout.format(event)); <--- qw used here\n\n    if(layout.ignoresThrowable()) {\n      if(event.throwable != null) {\n\tevent.throwable.printStackTrace(this.tp);\n      }\n      // in case we received this event from a remote client    \n      else if (event.throwableInformation != null) { \n\tthis.qw.write(event.throwableInformation);\n      }\n    }\n \n    if(this.immediateFlush) {\n      this.qw.flush();    <--- this is line 441\n    } \n  }\n\nIt seems that this.qw is not set or set to null. However, this cannot happen \nsince this situation is checked against in checkEntryConditions method before \nentering subAppend. Moreover, this.qw is used at the beginning of the subAppend \nmethod. I am stumped.\n\nWhat kind of JVM is this? OS? JIT? ", "id": 491, "time": "2001-02-01T15:00:47Z", "bug_id": 509, "creation_time": "2001-02-01T15:00:47Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "dave.miller@phase2e.com", "attachment_id": null, "id": 511, "time": "2001-02-02T05:17:45Z", "bug_id": 509, "creation_time": "2001-02-02T05:17:45Z", "is_private": false, "text": "I saw the same thing... With only two concurrent threads, it seems relatively\nrare.  The more concurrent threads, the faster the exception happens... Does any\nother object have a reference to qw?\n\nI call PropertyConfigurator.configure as the first statement in most of my run()\nmethods, would that cause a problem?\n\n-- \nDave\n"}, {"count": 6, "tags": [], "text": "I forgot to give you my java info...\n\nc:>java -version\njava version \"1.3.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.3.0-C)\nJava HotSpot(TM) Client VM (build 1.3.0-C, mixed mode)\n\nThis is Sun's JVM running on Windows 2000 Advanced Server.\n\n-- \nDave\n", "attachment_id": null, "id": 512, "creator": "dave.miller@phase2e.com", "time": "2001-02-02T05:19:19Z", "bug_id": 509, "creation_time": "2001-02-02T05:19:19Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 509, "text": "\nCalling PropertyConfigurator.configure will have the effect of first \nremoving/closing all appenders for categories mentioned in the config file. \nThis might well be the source of the problem but the NullPointerException is \nmost probably a log4j bug. \n\nI suppose that when you call PropertyCOnfigurator.configure() you pass a \nfilename as a parameter. Right?", "id": 514, "time": "2001-02-02T08:41:47Z", "creator": "bugzilla@apache.org", "creation_time": "2001-02-02T08:41:47Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 509, "attachment_id": null, "text": "\nBug synopsis: \n\n  PropertyConfigurator closes an appedner while another thread is in subAppend. \n\nSolution:\n\n In FileAppender make the close method synchronized. ", "id": 515, "time": "2001-02-02T08:58:36Z", "creator": "bugzilla@apache.org", "creation_time": "2001-02-02T08:58:36Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 509, "attachment_id": null, "text": "Yes - I call PropertyConfigurator.configure(\"SomeFileName.properties\").\n\n-- \nDave", "id": 516, "time": "2001-02-02T09:35:09Z", "creator": "dave.miller@phase2e.com", "creation_time": "2001-02-02T09:35:09Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 509, "attachment_id": null, "text": "Fixed in recent log4j release.", "id": 1990, "time": "2001-04-22T06:39:11Z", "creator": "bugzilla@apache.org", "creation_time": "2001-04-22T06:39:11Z", "is_private": false}]
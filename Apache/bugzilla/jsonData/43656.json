[{"count": 0, "tags": [], "bug_id": 43656, "attachment_id": null, "id": 109489, "time": "2007-10-18T18:02:47Z", "creator": "mail@nils-eckert.de", "creation_time": "2007-10-18T18:02:47Z", "is_private": false, "text": "If ELSupport.coerceToType is called with an BigDecimal instance as the first Parameter 'obj' and \nBigDecimal.class as type it should return the inputted value.\n\nInstead the BigDecimal is converted into a double and back into a BigDecimal which leads to a diffenent \nvalue. This happens in Line 228:\n\n        if (BigInteger.class.equals(type)) {\n            if (number instanceof BigDecimal) {\n                return ((BigDecimal) number).toBigInteger();\n            }\n            return BigInteger.valueOf(number.longValue()); // This leads to a different value.\n        }\n\nExample: Run the Method with new BigDecimal(\"0.19\"), BigDecimal.class as parameters.\nThis should result in a BigDecimal with value 0.19. Instead i got \n0.190000000000000002220446049250313080847263336181640625.\n\n The easiest solution is to compare the class of the object to coerce with the target class and return the \ninputted value if the are equal in ELSupport.coerceToType Method:\n\npublic final static Object coerceToType(final Object obj, final Class type) throws \nIllegalArgumentException {\n\t\tif (type == null || Object.class.equals(type) || type.equals(obj.getClass())) {\n\t\t\treturn obj;\n\t\t}\n..."}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 115706, "time": "2008-04-18T11:09:54Z", "bug_id": 43656, "creation_time": "2008-04-18T11:09:54Z", "tags": [], "text": "This has been fixed in trunk and proposed for 6.0.x."}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "Well, the patch (as proposed in rev. 649639) fixes ELSupport.coerceToType(Object, Class), but the bug itself is in ELSupport.coerceToNumber(Number, Class).\n\nThere do exist other ways how coerceToNumber() is called from public methods of ELSupport.\n\nFor example, ELSupport.compare(Object, Object) calls it. I suppose, that those methods may suffer until coerceToNumber() itself is fixed.\n\nThe fix is OK for coerceToType() though.", "id": 115712, "time": "2008-04-18T20:03:29Z", "bug_id": 43656, "creation_time": "2008-04-18T20:03:29Z", "is_private": false}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 21831, "is_private": false, "id": 115713, "time": "2008-04-18T20:19:52Z", "bug_id": 43656, "creation_time": "2008-04-18T20:19:52Z", "text": "Created attachment 21831\nTestcase against ELSupport.coerceToNumber\n\nIt is a test case against ELSupport.coerceToNumber().\n\nThe tests with BigDecimal and BigInteger classes are failing."}, {"count": 4, "tags": [], "text": "Thanks for the test case. I have added the unit test and the necessary fixes to trunk. They have also been proposed for 6.0.x", "attachment_id": null, "bug_id": 43656, "id": 115716, "time": "2008-04-19T02:51:39Z", "creator": "markt@apache.org", "creation_time": "2008-04-19T02:51:39Z", "is_private": false}, {"count": 5, "tags": [], "text": "This has now been committed to 6.0.x and will be in 6.0.17 onwards.", "attachment_id": null, "bug_id": 43656, "id": 116105, "time": "2008-05-01T10:38:10Z", "creator": "markt@apache.org", "creation_time": "2008-05-01T10:38:10Z", "is_private": false}, {"count": 6, "tags": [], "creator": "luke@sce.net", "attachment_id": null, "text": "I think that this fix may have introduced a regression error, since after upgrading from 6.0.16 to 6.0.18 I am getting this error:\n\nCannot convert 4,390,241 of type class java.lang.Integer to class java.lang.Number\n\njava.lang.IllegalArgumentException\n\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:252)\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:265)\norg.apache.el.lang.ELSupport.coerceToType(ELSupport.java:353)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:925)\norg.deltava.jsp.main.home_jsp._jspx_meth_fmt_005fint_005f0(home_jsp.java)\n", "id": 119247, "time": "2008-08-02T09:27:15Z", "bug_id": 43656, "creation_time": "2008-08-02T09:27:15Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43656, "attachment_id": 22354, "id": 119326, "time": "2008-08-03T06:56:10Z", "creator": "mail@nils-eckert.de", "creation_time": "2008-08-03T06:56:10Z", "is_private": false, "text": "Created attachment 22354\nTestcase and fix for the Integer to Number issue\n\nThis fix returns the input-value if it is assignable to the given type."}, {"count": 8, "attachment_id": 22355, "creator": "mail@nils-eckert.de", "is_private": false, "id": 119327, "time": "2008-08-03T07:05:12Z", "bug_id": 43656, "creation_time": "2008-08-03T07:05:12Z", "tags": [], "text": "Created attachment 22355\nRemoved unnecessary Object-creation in coerceToNumber()\n\nThe method protected final static Number coerceToNumber(final Number number, final Class type) created new BigInteger or BigDecimal Objects if the input-value was of the given type. As far as BigInteger and BigDecimal are immutable we can return the input value.\n\nAnother possible risk is the number.doubleValue() in the BigDecimal if clause. This behaves different to the coerceToType Method and was replaced with number.toString()."}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 121179, "time": "2008-10-03T09:22:13Z", "bug_id": 43656, "creation_time": "2008-10-03T09:22:13Z", "text": "Thanks for the patch.\n\nI have committed it to trunk and proposed it for 6.0.x"}, {"count": 10, "tags": [], "bug_id": 43656, "text": "*** Bug 45953 has been marked as a duplicate of this bug. ***", "id": 121226, "time": "2008-10-06T05:09:35Z", "creator": "markt@apache.org", "creation_time": "2008-10-06T05:09:35Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "(In reply to comment #8)\n> Another possible risk is the number.doubleValue() in the BigDecimal if clause.\n> This behaves different to the coerceToType Method and was replaced with\n> number.toString().\n\nThis breaks the spec. I have reverted this part of the patch.", "attachment_id": null, "bug_id": 43656, "id": 121289, "time": "2008-10-07T13:53:18Z", "creator": "markt@apache.org", "creation_time": "2008-10-07T13:53:18Z", "is_private": false}, {"count": 12, "tags": [], "creator": "mail@nils-eckert.de", "attachment_id": null, "is_private": false, "id": 121291, "time": "2008-10-07T14:13:04Z", "bug_id": 43656, "creation_time": "2008-10-07T14:13:04Z", "text": "    public final static Object coerceToType(final Object obj, final Class type)\n            throws IllegalArgumentException {\n        if (type == null || Object.class.equals(type) ||\n                (obj != null && type.isAssignableFrom(obj.getClass()))) {\n            return obj;\n        }\n\n        ....\n\n    }\n\nbehaves in the same way and returns the object if the Type matches."}, {"count": 13, "attachment_id": null, "creator": "markt@apache.org", "text": "I only reverted the change to number.doubleValue()", "id": 121302, "time": "2008-10-08T03:27:33Z", "bug_id": 43656, "creation_time": "2008-10-08T03:27:33Z", "tags": [], "is_private": false}, {"count": 14, "text": "Thanks for the fix. It has been applied to 6.0.x and will be included in 6.0.19 onwards.", "bug_id": 43656, "attachment_id": null, "id": 121897, "time": "2008-10-27T06:00:40Z", "creator": "markt@apache.org", "creation_time": "2008-10-27T06:00:40Z", "tags": [], "is_private": false}, {"count": 15, "attachment_id": null, "creator": "markt@apache.org", "text": "*** Bug 46325 has been marked as a duplicate of this bug. ***", "id": 123006, "time": "2008-12-02T10:22:21Z", "bug_id": 43656, "creation_time": "2008-12-02T10:22:21Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "bug_id": 43656, "is_private": false, "text": "This does not appear to be fixed, but I'm not sure if the problem rests with the code here or JSPC. I get the following error when executing a JSP:\n\nCannot convert 0 of type class java.lang.Long to class java.lang.Number\n\njava.lang.IllegalArgumentException\n\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:250)\norg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:257)\norg.apache.el.lang.ELSupport.coerceToType(ELSupport.java:351)\norg.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:935)\norg.deltava.jsp.admin.diagnostics_jsp._jspx_meth_fmt_005fint_005f8(diagnostics_jsp.java)\norg.deltava.jsp.admin.diagnostics_jsp._jspx_meth_el_005ftable_005f0(diagnostics_jsp.java)\n\n\nLooking at the the method call, I see this in the JSP source:\n\n_jspx_th_fmt_005fint_005f8.setValue((java.lang.Number) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${mapsAPIUsage}\", java.lang.Number.class, (PageContext)_jspx_page_context, null, false));\n\nThe ELSupport.coerceToNumber(Number, Class) method appears to fail if the Class specified is java.lang.Number; there's no way it can execute without throwing an exception.", "id": 129708, "time": "2009-08-15T11:43:16Z", "creator": "luke@sce.net", "creation_time": "2009-08-15T11:43:16Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 43656, "attachment_id": null, "id": 129710, "time": "2009-08-15T12:55:36Z", "creator": "markt@apache.org", "creation_time": "2009-08-15T12:55:36Z", "is_private": false, "text": "Can you attach the simplest JSP that exhibits this error?"}, {"count": 18, "tags": [], "bug_id": 43656, "is_private": false, "text": "Mark as needing info", "id": 129722, "time": "2009-08-16T14:04:03Z", "creator": "markt@apache.org", "creation_time": "2009-08-16T14:04:03Z", "attachment_id": null}, {"count": 19, "attachment_id": null, "creator": "luke@sce.net", "is_private": false, "id": 129746, "time": "2009-08-17T12:09:29Z", "bug_id": 43656, "creation_time": "2009-08-17T12:09:29Z", "tags": [], "text": "I don't think I can do this with just a JSP.\n\nMy best guess is that it gets triggered when JSP includes a tag that has a parameter which is defined in the TLD as being of type java.lang.Number; then when JSPC compiles the page it takes the type defined in the TLD and passes it to coerceToNumber.\n\nCan I send you a JSP, TLD and a JAR with the tag?"}, {"count": 20, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 129748, "time": "2009-08-17T12:25:43Z", "bug_id": 43656, "creation_time": "2009-08-17T12:25:43Z", "text": "It is easier if we have access to the source. Can you provide source files for the simplest possible jsp, tld and tag combination that demonstrates the issue?"}, {"count": 21, "attachment_id": 24144, "creator": "luke@sce.net", "text": "Created attachment 24144\nTLD for tag\n\nThis is the TLD for the JSP where we pass in Number.class to coerceToNumber.", "id": 129777, "time": "2009-08-18T09:33:36Z", "bug_id": 43656, "creation_time": "2009-08-18T09:33:36Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 43656, "is_private": false, "text": "Created attachment 24145\nJSP and Tag source\n\nThis is the JSP and Tag sources for the JSP where we pass in Number.class to coerceToNumber.", "id": 129778, "time": "2009-08-18T09:34:49Z", "creator": "luke@sce.net", "creation_time": "2009-08-18T09:34:49Z", "attachment_id": 24145}, {"count": 23, "tags": [], "creator": "luke@sce.net", "attachment_id": null, "text": "This is a simple JSP I have created that should exhibit the behavior, along with a stripped-down TLD and tag sources.\n\nThe key I believe is to look at the compiled JSP's source and see what is getting passed in the setValue() method call.", "id": 129779, "time": "2009-08-18T09:35:45Z", "bug_id": 43656, "creation_time": "2009-08-18T09:35:45Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 43656, "attachment_id": null, "id": 130236, "time": "2009-09-09T04:11:34Z", "creator": "markt@apache.org", "creation_time": "2009-09-09T04:11:34Z", "is_private": false, "text": "The test case isn't clean (it references a class that doe snot exist) but once I clean it up this works for me with 6.0.20, 6.0.x and trunk.\n\nIf you still see this issue with the 6.0.x or later, please provide a working test case that demonstrates the issue."}, {"count": 25, "attachment_id": null, "creator": "luke@sce.net", "text": "Could you send me the compiled JSP source code?", "id": 130388, "time": "2009-09-14T11:40:12Z", "bug_id": 43656, "creation_time": "2009-09-14T11:40:12Z", "tags": [], "is_private": false}, {"count": 26, "tags": [], "bug_id": 43656, "text": "Created attachment 24692\nzip containing JSP, TLD and java file\n\nI came across this bug today - at least it looks a lot like it. \n\nIf I try to pass in a null to the function, it falls over giving me the following:\n\njava.lang.IllegalArgumentException: Cannot convert 0 of type class java.lang.Long to class java.lang.Number\n\torg.apache.el.lang.ELSupport.coerceToNumber(ELSupport.java:250)\n\nWhich is at best misleading and at worst, just the wrong way to handle nulls. Hopefully this is reproducible everywhere.", "id": 132757, "time": "2009-12-11T07:09:30Z", "creator": "adam.hardy@cyberspaceroad.com", "creation_time": "2009-12-11T07:09:30Z", "is_private": false, "attachment_id": 24692}, {"count": 27, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "attachment_id": null, "text": "The attached zip causes the stack trace in 6.0.20", "id": 132758, "time": "2009-12-11T07:11:44Z", "bug_id": 43656, "creation_time": "2009-12-11T07:11:44Z", "is_private": false}, {"count": 28, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 132792, "time": "2009-12-13T14:51:18Z", "bug_id": 43656, "creation_time": "2009-12-13T14:51:18Z", "text": "Thanks for the test case. This has been fixed in trunk and proposed for 6.0.x"}, {"count": 29, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 132964, "time": "2009-12-19T17:15:58Z", "bug_id": 43656, "creation_time": "2009-12-19T17:15:58Z", "text": "Fixed in 6.0.x and will be included in 6.0.21 onwards."}]
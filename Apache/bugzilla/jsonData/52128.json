[{"count": 0, "tags": [], "bug_id": 52128, "text": "Add support for a JDBC PreProcessor and PostProcessor.\n\nI often need to setup things before the actual measuring. Like creating a table (pre-process), then sample filling in some data and finally dropping the table (post-process). Or I need to clear the caches on the DB (pre-process/post-process).\n\nI could do all of this using the JDBC Request sampler, but it polutes my listeners with results I don't want in the final output. Thus this request.", "id": 151145, "time": "2011-11-03T14:21:27Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-03T14:21:27Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "rbargezi@infonic.net", "text": "Created attachment 27889\nDirectional Patch proposal for Jdbc Pre And Post Processor against build 1196526\n\nAs this is a major refactoring, please let me know if this is going in the right direction for you to accept. I will then clean up, add docs, etc. and submit a final proposal.", "id": 151146, "time": "2011-11-03T14:25:09Z", "bug_id": 52128, "creation_time": "2011-11-03T14:25:09Z", "is_private": false, "attachment_id": 27889}, {"count": 2, "tags": [], "bug_id": 52128, "attachment_id": null, "text": "Sounds like a job for the setUp and tearDown thread groups.\n\nHave you tried those?", "id": 151148, "time": "2011-11-03T14:52:33Z", "creator": "sebb@apache.org", "creation_time": "2011-11-03T14:52:33Z", "is_private": false}, {"text": "(In reply to comment #2)\n> Sounds like a job for the setUp and tearDown thread groups.\n> \n> Have you tried those?\n\nI can't quite see how they can solve my case. Two things I would like to note here:\n1. If I use the setup- and tear-down threads, I still get the results of the samples in those threads collected by my listeners. So even in this case I get garbage.\n\n2. I have a testcase where one thread group runs more than one loop (in my case 3). Before each loop starts sampling, I have to reset a field in a DB table. After I have sampled my JDBC test requests, I need to cleanup the data that was created by the sample. All I want to collect is the timings of the JDMC test request. If I use the setup and tear-down threads, the call is only made once before the 3 loops are executed and after all 3 loops have ended. Thus having a JDBC pre- and post-processor would be nice. So far I have used the BSF porcessors with some groovy, but this is not convenient if you have pure SQL testers.", "tags": [], "bug_id": 52128, "attachment_id": null, "count": 3, "id": 151185, "time": "2011-11-04T12:30:03Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-04T12:30:03Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 52128, "attachment_id": null, "id": 151186, "time": "2011-11-04T13:00:27Z", "creator": "sebb@apache.org", "creation_time": "2011-11-04T13:00:27Z", "is_private": false, "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> > Sounds like a job for the setUp and tearDown thread groups.\n> > \n> > Have you tried those?\n> \n> I can't quite see how they can solve my case. Two things I would like to note\n> here:\n> 1. If I use the setup- and tear-down threads, I still get the results of the\n> samples in those threads collected by my listeners. So even in this case I get\n> garbage.\n\nThat depends where you put the Listeners.\n\n> 2. I have a testcase where one thread group runs more than one loop (in my case\n> 3). Before each loop starts sampling, I have to reset a field in a DB table.\n> After I have sampled my JDBC test requests, I need to cleanup the data that was\n> created by the sample. All I want to collect is the timings of the JDMC test\n> request. If I use the setup and tear-down threads, the call is only made once\n> before the 3 loops are executed and after all 3 loops have ended. Thus having a\n> JDBC pre- and post-processor would be nice. So far I have used the BSF\n> porcessors with some groovy, but this is not convenient if you have pure SQL\n> testers.\n\nAgain, you can do this by careful placement of the Listeners.\n\nAlso, Pre- and Post-Processors are intended for use before/after *each sample*; the use-case here seems rather different.\n\nAlthough it is possible to adjust the positioning of the listeners, that can become tedious, so another possibility is to add an option to the JDBC Sampler so it returns a null sample (the Test Action Sampler does this). It should probably only nullify the result if successful."}, {"text": "(In reply to comment #4)\n> (In reply to comment #3)\n> > (In reply to comment #2)\n> > > Sounds like a job for the setUp and tearDown thread groups.\n> > > \n> > > Have you tried those?\n> > \n> > I can't quite see how they can solve my case. Two things I would like to note\n> > here:\n> > 1. If I use the setup- and tear-down threads, I still get the results of the\n> > samples in those threads collected by my listeners. So even in this case I get\n> > garbage.\n> \n> That depends where you put the Listeners.\n> \n> > 2. I have a testcase where one thread group runs more than one loop (in my case\n> > 3). Before each loop starts sampling, I have to reset a field in a DB table.\n> > After I have sampled my JDBC test requests, I need to cleanup the data that was\n> > created by the sample. All I want to collect is the timings of the JDMC test\n> > request. If I use the setup and tear-down threads, the call is only made once\n> > before the 3 loops are executed and after all 3 loops have ended. Thus having a\n> > JDBC pre- and post-processor would be nice. So far I have used the BSF\n> > porcessors with some groovy, but this is not convenient if you have pure SQL\n> > testers.\n> \n> Again, you can do this by careful placement of the Listeners.\n> \n> Also, Pre- and Post-Processors are intended for use before/after *each sample*;\n> the use-case here seems rather different.\n> \n> Although it is possible to adjust the positioning of the listeners, that can\n> become tedious, so another possibility is to add an option to the JDBC Sampler\n> so it returns a null sample (the Test Action Sampler does this). It should\n> probably only nullify the result if successful.\n\nMaybe I was not clear enough with my usecase description. My usecase is exactly that I need to pre-/post-process an individual sample. Thus I have so far placed the BSF Pre/Post processors with some SQL code before and after my JDBC Sampler to achieve my goal. In other cases I even have more than one JDBC sample I take in a single thread and need to pre-process and post-process individual samples.\n\nI did a quick test with returning a null sample result from the JDBC sample and it works. I just don't like the solution approach as it is more of a workaround and does not read properly (the user does not really see that things arepre/post-processed). I thus still think adding the JDBC pre/post-processors is the more elegant solution to the problem.", "tags": [], "bug_id": 52128, "attachment_id": null, "count": 5, "id": 151188, "time": "2011-11-04T13:52:35Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-04T13:52:35Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 52128, "text": "OK, I understand now - that makes more sense.\n\nI notice that the patch includes the following import:\n\nimport ch.infonic.jmeter.jdbc.JDBCSamplerDiagnosticListener;\n\nI assume this is not relevant to this issue?\n\nOtherwise the patch looks reasonable.", "id": 151193, "time": "2011-11-04T14:38:04Z", "creator": "sebb@apache.org", "creation_time": "2011-11-04T14:38:04Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 52128, "attachment_id": 27898, "text": "Created attachment 27898\nPatch proposal for Jdbc Pre And Post Processor against build 1196526\n\nAdded final patch proposal w/o the diagnostic listener mentioned by Sebb", "id": 151195, "time": "2011-11-04T15:05:11Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-04T15:05:11Z", "is_private": false}, {"count": 8, "tags": [], "creator": "rbargezi@infonic.net", "attachment_id": null, "id": 151196, "time": "2011-11-04T15:06:41Z", "bug_id": 52128, "creation_time": "2011-11-04T15:06:41Z", "is_private": false, "text": "Sebb, assuming you may now consider the enhancement I have added my final proposal. I am happy to update the Docs/Manual as well. As I don't quite know how, please let me know where I have to edit things and where you would want an upload."}, {"count": 9, "tags": [], "creator": "rbargezi@infonic.net", "text": "Created attachment 27899\nPatch proposal for Jdbc Pre And Post Processor against build 1196526", "id": 151197, "time": "2011-11-04T15:14:49Z", "bug_id": 52128, "creation_time": "2011-11-04T15:14:49Z", "is_private": false, "attachment_id": 27899}, {"attachment_id": 27901, "tags": [], "bug_id": 52128, "text": "Created attachment 27901\nPatch proposal for Jdbc Pre And Post Processor against build 1196526\n\nFixed some issues with resources.\n\nSEBB YOU MAY WANT TO CHECK THIS:\n- In trying not to duplicate resources, I added a base resource for the AbstractJDBCTestElement\n- I then only added the 'displayName' to the additional resource files (JDBCPostProcessorResources.properties and JDBCPreProcessorResources.properties)\n- The property labels worked fine but THE GROUP LABELS WERE NOT THERE!\n- So I added the group labels to the Processor resources and all was good\n- Then I did the same for JDBCSamplerResources.properties\n- NOW THE PROPERTY LABELS WERE GONE FOR THIS BEAN!\n\nThis really drives me nuts! Maybe you have an answer to this inexplicable behavior. Or is it just a bug?", "count": 10, "id": 151203, "time": "2011-11-04T18:07:05Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-04T18:07:05Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 52128, "text": "(In reply to comment #10)\n> Created attachment 27901 [details]\n> Patch proposal for Jdbc Pre And Post Processor against build 1196526\n> \n> Fixed some issues with resources.\n> \n> SEBB YOU MAY WANT TO CHECK THIS:\n> - In trying not to duplicate resources, I added a base resource for the\n> AbstractJDBCTestElement\n> - I then only added the 'displayName' to the additional resource files\n> (JDBCPostProcessorResources.properties and\n> JDBCPreProcessorResources.properties)\n> - The property labels worked fine but THE GROUP LABELS WERE NOT THERE!\n> - So I added the group labels to the Processor resources and all was good\n> - Then I did the same for JDBCSamplerResources.properties\n> - NOW THE PROPERTY LABELS WERE GONE FOR THIS BEAN!\n> \n> This really drives me nuts! Maybe you have an answer to this inexplicable\n> behavior. Or is it just a bug?\n\nI noticed some odd behaviour with the TestBean property handling some while ago. Never got to the bottom of it - not sure if it is a JMeter bug or a JavaBeans limitation. \n\nThe only existing BeanInfoSupport class hierarchies are the BeanShell and BSF/JSR223 trees, which have a common parent class and don't add any customisation in the subclasses - maybe that is why they work.\n\nHopefully we can sort out the behaviour once the main code is incorporated.", "id": 151213, "time": "2011-11-04T23:34:17Z", "creator": "sebb@apache.org", "creation_time": "2011-11-04T23:34:17Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 52128, "attachment_id": null, "text": "Thanks, applied.\n\nInheritance does not seem to work for TestBean properties files, so I just copied the common fields to the Pre and Post processor properties, and dropped the common parent.\n\nSeems to work.\n\nURL: http://svn.apache.org/viewvc?rev=1197848&view=rev\nLog:\nBug 52128 - Add JDBC pre- and post-processor\n\nAdded:\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/JDBCTestElementBeanInfoSupport.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/AbstractJDBCProcessor.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPostProcessor.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPostProcessorBeanInfo.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPostProcessorResources.properties   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPreProcessor.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPreProcessorBeanInfo.java   (with props)\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/processor/JDBCPreProcessorResources.properties   (with props)\nModified:\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java\n   jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSamplerBeanInfo.java\n   jmeter/trunk/xdocs/changes.xml", "id": 151214, "time": "2011-11-05T00:43:21Z", "creator": "sebb@apache.org", "creation_time": "2011-11-05T00:43:21Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 52128, "attachment_id": null, "text": "(In reply to comment #8)\n> Sebb, assuming you may now consider the enhancement I have added my final\n> proposal. I am happy to update the Docs/Manual as well. As I don't quite know\n> how, please let me know where I have to edit things and where you would want an\n> upload.\n\nThe documentation is in the file\n\nxdocs/usermanual/component_reference.xml\n\nYou just need to add the appropriate <component> paragraphs to the end of the relevant sections.\n\nPatch can be provided as for code patches.\n\nScreenshots can be generated using ^G if you want to do those; if not I can add them later. \nIf you have some useful (publishable) examples of SQL code that can be used in the pre/post processors that would be very good - either provide screenshots, or a test plan with the fields filled in, and we can the do the screenshots.", "id": 151215, "time": "2011-11-05T00:51:02Z", "creator": "sebb@apache.org", "creation_time": "2011-11-05T00:51:02Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 52128, "attachment_id": null, "id": 151629, "time": "2011-11-18T18:15:27Z", "creator": "sebb@apache.org", "creation_time": "2011-11-18T18:15:27Z", "is_private": false, "text": "Could you provide some examples for the documentation please?"}, {"text": "Created attachment 27975\nExample using JDBC pre and post processors\n\nSebb,\n\nI thought hard about some fictitious sample, but could not come up with something that makes sense. So I have attached a sample from our real world. What it does is it measures the execution for parallel runs of a multi-portfolio valuation.\n\nWhat needs to be done in preparation is:\n- setting up the list of portfolios to value as an XML\n- creating a container record (Price cut-off / PCO) for the results\n- retrieving the ID of the container\n\nThen we run the actual calculation and sample it\n\nThe post-processor then does the cleanup by deleting the results and the PCO\n\nHope this helps. I'll be off-line for the next 2 weeks, but please let me know if you need anything more. I'll follow up once I am online again.", "tags": [], "bug_id": 52128, "attachment_id": 27975, "count": 15, "id": 151726, "time": "2011-11-22T14:49:17Z", "creator": "rbargezi@infonic.net", "creation_time": "2011-11-22T14:49:17Z", "is_private": false}, {"count": 16, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Date: Fri Dec  2 21:34:56 2011\nNew Revision: 1209701\n\nURL: http://svn.apache.org/viewvc?rev=1209701&view=rev\nLog:\nBug 52128 - Add JDBC pre- and post-processor\n\nModified:\n   jmeter/trunk/xdocs/usermanual/component_reference.xml", "id": 151930, "time": "2011-12-02T21:36:24Z", "bug_id": 52128, "creation_time": "2011-12-02T21:36:24Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 53835, "attachment_id": null, "id": 161987, "time": "2012-09-06T11:09:44Z", "creator": "nmaupu@gmail.com", "creation_time": "2012-09-06T11:09:44Z", "is_private": false, "text": "Hello,\n\nI need to activate a setInputFilter DEFLATE in our vhost to provide gzip compression from our clients (iphone app) to our java app.\n\nIf I activate the DEFLATE filter, AJP proxy truncates to only one 8K packet and send it as is  to the backend.\nWithout any deflate input filter, the big body (more than 8K) is correctly sent to the Java backend.\n\nIf I understand well, AJP is a packet oriented protocol (max 8k chunk by default).\nWhen apache receives the request, it decompresses the body as expected but it seems to send the whole thing to the proxy and this one send only 8k to the backend. The rest of the packet seems to be lost.\n\nTo make a small test, I tried sending a small packet (less than 8k ungzipped) : it works\nI also tried to modify the following parameter in tomcat AJP connector : 'packetSize' and 'ProxyIOBufferSize' in apache to match a bigger value than 8k (65535). In this case, if I send my 11k packet, it works like a charm.\n\nFinally, if we use http instead of ajp in the proxy configuration, everything works great. The problem definitly comes from AJP protocol itself.\n\nSo my conclusion is that there is a bug with mod_proxy_ajp when using input filter. What do you think ?\n\nRegards,\nNicolas Maupu"}]
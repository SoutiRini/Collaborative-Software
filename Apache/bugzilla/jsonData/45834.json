[{"count": 0, "tags": [], "text": "I am running a RedHat 5 server to serve SVN and I am using mod_authnz_ldap for user authentication.  The server is configured correctly, I know this because shortly after a restart the authentications occur within a reasonable amount of time.  However, I have noticed that after long periods of inactivity (say over night) the authentication process will take approximately 15 minutes to complete.  During the time it is attempting to run the query I see through netstat that a connection was established and there is something in the transmit queue but for some reason it doesn't complete for 15+ minutes.  The interesting thing is that it does seem to complete.  However, I'm not sure if it is because it gives up and tries again or if that connection completes.  The log files in debug mode so very little information, basically only the request and then some time later the user was authenticated.  Through my debugging I have noticed that the ldap module does not close the connection to the ldap server even after long periods of no requests.  Our internal network is complex and there is a firewall sitting between our server and the LDAP server. However the latency is relatively low (less then 85ms) and the load on the LDAP server is minimal.  I'm assuming it is intentional the connections don't close but it may be contributing to the issue.\n\nI have tried this on apache 2.2.3 that comes with Redhat and I have compiled apache 2.2.9 and both show the same behavior.  I have included the netstat info and my configuration below.  I am using the defaults configurations for just about everything else.\n\nQuestions:\nIs there a way to disable the mod_ldap connection pooling?  I see that each idld/spare httpd process opens and maintains a connection.\nIs there a way to have mod_ldap disconnect after some period of time?  I have no insight into the firewall, it is possible it does not like the persistent connection and is playing a factor.  Ideally I would think if there was no activity for 15 minutes or so you could disconnect.\n\n\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address            Foreign Address State      \ntcp        0    138 xxx.xxx.xxx.xxx:33871    ldap.x.x:ldaps ESTABLISHED \n\n\nSVN and LDAP configurations files:\n\nLDAPCacheEntries 0\nLDAPCacheTTL 600\nLDAPConnectionTimeout 10\nLDAPOpCacheEntries 1024\nLDAPOpCacheTTL 600\nLDAPSharedCacheSize 10240\t\nLDAPTrustedMode SSL\nLDAPVerifyServerCert Off\n\n<Location /svn>\n\tDAV svn\n\tSSLRequireSSL\n\t\n\t# Subversion Paths\n\tSVNParentPath <PATH TO REPOS>\n\tSVNListParentPath on\n\tAuthzSVNAccessFile <PATH TO SVN AUTH FILE>\n\n\t# Access control policy\n\tAuthBasicProvider ldap file\n\tAuthzLDAPAuthoritative Off\n\tAuthType Basic\n\tAuthName \"Repositories\"\n\tAuthLDAPBindDN XXXXXX\n\tAuthLDAPBindPassword XXXXXX\n\tAuthLDAPURL \"ldaps://XXXXXX.com:636/ou=XXXXXX,o=XXXXXX?uid?sub?(objectClass=*)\"\n\tAuthUserFile <PATH TO WWW AUTH FILE>\n\tRequire valid-user\n</Location>", "attachment_id": null, "bug_id": 45834, "id": 120747, "time": "2008-09-18T09:03:04Z", "creator": "lucas@luc-ace.com", "creation_time": "2008-09-18T09:03:04Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45834, "attachment_id": null, "id": 120750, "time": "2008-09-18T09:57:03Z", "creator": "covener@gmail.com", "creation_time": "2008-09-18T09:57:03Z", "is_private": false, "text": "Nothing in mod_ldap monitors or cares about a pooled connection until some normal request-processing thread goes to use it.\n\nI do not see any way to turn off the connection pooling, and there is no search timeout either.  \n\nI assume you have 1 authenticated request that works, then a hang during a subsequent request -- can you get a backtrace of the relevant child process when it's hanging?"}, {"count": 2, "tags": [], "text": "Q: I assume you have 1 authenticated request that works, then a hang during a\nsubsequent request -- can you get a backtrace of the relevant child process\nwhen it's hanging?\n\nA: Correct when httpd is freshly started authentication works correctly for some time (during my debugging I have turned the caching practically off) it isn't until it becomes idle for a period of time that things start stalling.  Though from the strace it does look like the connection is timing out but why it takes so long (~28 minutes), I don't understand.\n\nAn strace on the process results in (I removed the encoded data and replaced it with XXXXXX:\n\n$strace -r -f -v -p 3863\nProcess 3863 attached - interrupt to quit\n     0.000000 time(NULL)                = 1221762688\n     0.001216 write(48, \"XXXXXX\"..., 138) = 138\n     0.000617 poll([{fd=48, events=POLLIN|POLLPRI|POLLERR|POLLHUP, revents=POLLIN|POLLERR|POLLHUP}], 1, -1) = 1\n  1707.565544 read(48, 0x92cb6a0, 5)    = -1 ETIMEDOUT (Connection timed out)\n     0.001745 time(NULL)                = 1221764396\n     0.000463 write(48, \"XXXXXX\"..., 138) = -1 EPIPE (Broken pipe)\n     0.000709 --- SIGPIPE (Broken pipe) @ 0 (0) ---\n     0.000931 time(NULL)                = 1221764396\n     0.000076 time(NULL)                = 1221764396\n     ...\n\nNote: It sits at \"poll(\" while waiting for it to authenticate.", "attachment_id": null, "id": 120759, "creator": "lucas@luc-ace.com", "time": "2008-09-18T12:16:47Z", "bug_id": 45834, "creation_time": "2008-09-18T12:16:47Z", "is_private": false}, {"count": 3, "tags": [], "text": "After further research this issue seems to be caused by the firewall between the requesting server and the LDAP server.  The firewall will break idle connections after a period of time thus explaining the timeout after a connection has been made.  However, this does seem to show a deficiency in Apache in that you cannot configure it to close connections after some specifiable time after a query and you cannot set a reasonable timeout for existing connections that don't get a response.\n\nThe development httpd code (2.3.0) now has a \"keep\" option in the uldap_connection_close function in file util_ldap.c. I believe this to imply that some might want an option to disconnect.  However, the development code always hard sets it to keep the connection.  Unfortunately, this does not solve my problem unless it is back ported to the 2.2.3 or 2.2.9 branches or I figure out how to safely modify the source.\n\nuldap_connection_close function with \"keep\":\nhttp://svn.apache.org/viewvc/httpd/httpd/trunk/modules/ldap/util_ldap.c?revision=646582&view=markup", "attachment_id": null, "id": 120812, "creator": "lucas@luc-ace.com", "time": "2008-09-19T15:37:50Z", "bug_id": 45834, "creation_time": "2008-09-19T15:37:50Z", "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> After further research this issue seems to be caused by the firewall between\n> the requesting server and the LDAP server.  The firewall will break idle\n> connections after a period of time thus explaining the timeout after a\n> connection has been made. \n\nThis sequence doesn't really explain the timeout. On a normal network, when the connection is severed the host OS finds out, then when the application goes to use the socket it finds out too -- without a delay.  This is the part that is failing.\n\nyou should be able to add something like:\nhttp://people.apache.org/~covener/trunk-ldap-nokeep.diff\nto\nhttp://svn.apache.org/viewvc?view=rev&revision=599164\nand use SetEnvIf to disable the re-use.\n\n(but as you can see, actually cleaning up the connections is unchartered territory)", "is_private": false, "id": 120815, "creator": "covener@gmail.com", "time": "2008-09-19T18:20:58Z", "bug_id": 45834, "creation_time": "2008-09-19T18:20:58Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 45834, "attachment_id": null, "id": 120819, "time": "2008-09-20T01:38:45Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-09-20T01:38:45Z", "is_private": false, "text": "(In reply to comment #4)\n> (In reply to comment #3)\n> > After further research this issue seems to be caused by the firewall between\n> > the requesting server and the LDAP server.  The firewall will break idle\n> > connections after a period of time thus explaining the timeout after a\n> > connection has been made. \n> \n> This sequence doesn't really explain the timeout. On a normal network, when the\n> connection is severed the host OS finds out, then when the application goes to\n> use the socket it finds out too -- without a delay.  This is the part that is\n> failing.\n\nI think it does. If the connection is already established and the firewall does an idle connection drop, none of the two communication partners are made aware of that. Communication packets apart from maybe RST and FIN are simply dropped by the firewall. As a consequence the sending side starts to do TCP retransmits which depending on OS and TCP tuning can take several minutes before the TCP stack finally gives up (I vaguely remember 7 minutes for some version of Solaris)."}, {"count": 6, "text": "What APR version do you have?\n\nThe changes in late May (r6660219 in 1.3.x) may be relevant here, if you set ttl below any timeouts imposed by external agents like your firewall.", "creator": "nick@webthing.com", "is_private": false, "id": 120820, "time": "2008-09-20T03:05:21Z", "bug_id": 45834, "creation_time": "2008-09-20T03:05:21Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 45834, "attachment_id": 22623, "id": 120859, "time": "2008-09-22T18:20:14Z", "creator": "lucas@luc-ace.com", "creation_time": "2008-09-22T18:20:14Z", "is_private": false, "text": "Created attachment 22623\nPatch that forces httpd's module mod_ldap to unbind after every requests\n\nThe patch is for the 2.2.3 branch.  This version was chosen to maintain version numbers with RedHat Linux 5."}, {"count": 8, "attachment_id": null, "bug_id": 45834, "is_private": false, "id": 120861, "time": "2008-09-22T18:33:11Z", "creator": "lucas@luc-ace.com", "creation_time": "2008-09-22T18:33:11Z", "tags": [], "text": "I attached a patch for the 2.2.3 that forces an unbind after every query.  This is obviously not most efficient solution but does resolve my issues.  I chose this version to patch so that I could maintain the RedHat RPM build process and patches.  Though it does mean my APR version is 1.2.7.\n"}, {"count": 9, "tags": [], "bug_id": 45834, "attachment_id": null, "is_private": false, "id": 121250, "time": "2008-10-06T14:03:13Z", "creator": "lucas@luc-ace.com", "creation_time": "2008-10-06T14:03:13Z", "text": "Follow-up, I built from source Apache 2.2.9 with APR 1.3.3 and APR-Util 1.3.4 and the problem persists.  For this test I was using the default ttl value."}, {"count": 10, "tags": [], "creator": "mike@marineau.org", "is_private": false, "text": "Just a quick note, recent versions of openldap properly enable tcp keep alive which fixes the original issue of the firewall killing idle connections. Just tune the net.ipv4.tcp_keepalive_* sysctl parameters according to your firewall's timeout and all will be happy. However it would still be nice if apache handled dead connections better by setting a timeout for any request it makes, not just when opening a connection.", "id": 127127, "time": "2009-05-18T14:51:46Z", "bug_id": 45834, "creation_time": "2009-05-18T14:51:46Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 45834, "attachment_id": null, "id": 139227, "time": "2010-08-18T19:08:02Z", "creator": "sf@sfritsch.de", "creation_time": "2010-08-18T19:08:02Z", "is_private": false, "text": "This is a ldap-toolkit / firewall issue.\n\nThe new LDAPTimeout directive in trunk allows to work around the problem."}]
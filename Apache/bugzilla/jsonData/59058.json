[{"count": 0, "tags": [], "bug_id": 59058, "attachment_id": null, "text": "Shawn Johnson recently posted a smallish docx file on TIKA-1866 that causes an OOM.\n\nWARNING: trying to parse this file in Intellij caused a system crash and required a hard reboot on Windows.\n\nI can reproduce this in pure POI with the following:\n\n        OPCPackage pkg = OPCPackage.open(path)\n        System.out.println(\"before creating extractor\");\n        POIXMLTextExtractor poiExtractor = ExtractorFactory.createExtractor(pkg);\n        System.out.println(\"finished creating extractor\");\n\nThe OOM happens during createExtractor, and I never hit the second println.\n\nHowever, there is no OOM with:\n\n        OPCPackage pkg = OPCPackage.open(Files.newInputStream(path));\n        System.out.println(\"before creating extractor\");\n        POIXMLTextExtractor poiExtractor = ExtractorFactory.createExtractor(pkg);\n        System.out.println(\"finished creating extractor\");\n\nAny idea what might cause the different treatment?\n\nJava 1.8.0_72 on Windows.", "id": 188745, "time": "2016-02-24T02:41:18Z", "creator": "tallison@mitre.org", "creation_time": "2016-02-24T02:41:18Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 33585\nTriggering file submitted by Shawn Johnson on TIKA-1866\n\nWhen I re-save this file, it no longer triggers the problem.", "is_private": false, "id": 188746, "creation_time": "2016-02-24T02:48:14Z", "time": "2016-02-24T02:48:14Z", "creator": "tallison@mitre.org", "bug_id": 59058, "attachment_id": 33585}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 188761, "time": "2016-02-24T12:09:31Z", "bug_id": 59058, "creation_time": "2016-02-24T12:09:31Z", "text": "Other than all the contents of the zip having the date \"1980-01-01 00:00\", I can't see anything immediately wrong\n\nLoading the sampe file as an OPCPackage from an InputStream on my machine seems to use ~13mb of memory (from a couple of tests). Loading it from a File is around ~3mb.\n\nSo, nothing obvious springs to mind. Would someone be able to dig in and find out where the memory is going, and how it differs between the two cases?"}, {"count": 3, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "is_private": false, "id": 188764, "time": "2016-02-24T12:32:49Z", "bug_id": 59058, "creation_time": "2016-02-24T12:32:49Z", "text": "Interesting.  Thank you for taking a look!  You're not seeing the OOM, then...  What version of Java?  Windows...right?\n\nIn addition to Windows with:\n\njava version \"1.8.0_72\"\nJava(TM) SE Runtime Environment (build 1.8.0_72-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.72-b15, mixed mode)\n\n\nI'm also getting the OOM with Tika (at least) in RHEL with:\n\njava version \"1.7.0_75\"\nOpenJDK Runtime Environment (rhel-2.5.4.0.el6_6-x86_64 u75-b13)\nOpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)"}, {"count": 4, "tags": [], "bug_id": 59058, "is_private": false, "id": 188765, "creation_time": "2016-02-24T12:36:10Z", "time": "2016-02-24T12:36:10Z", "creator": "apache@gagravarr.org", "text": "I'm not seeing the OOM on opening the package, only on extraction. Opening the package isn't taking much memory. JVM is java version \"1.7.0_95\" on Ubuntu", "attachment_id": null}, {"count": 5, "tags": [], "text": "Of course, sorry.  Thank you.\n\nThis looks very similar to 57031.  However, with the 57031.docx file, I'm getting an OOM while parsing whether I open the package with a File or with an InputStream.", "is_private": false, "id": 188766, "creation_time": "2016-02-24T13:02:11Z", "time": "2016-02-24T13:02:11Z", "creator": "tallison@mitre.org", "bug_id": 59058, "attachment_id": null}, {"count": 6, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "is_private": false, "id": 188767, "time": "2016-02-24T13:31:38Z", "bug_id": 59058, "creation_time": "2016-02-24T13:31:38Z", "text": "I reused Dominik's test on 57031.\n\nIf we use xerces instead of piccolo, we don't appear to have a problem with parsing either 57031 or 59058.\n\nThis leads to an OOM for both files:\n        ZipFile zf = new ZipFile(path0.toAbsolutePath().toString());\n        ZipEntry entry = zf.getEntry(\"word/document.xml\");\n        DocumentDocument document = DocumentDocument.Factory.parse(zf.getInputStream(entry));\n        assertNotNull(document);\n\nThis works for both files:\n        ZipFile zf = new ZipFile(path1.toAbsolutePath().toString());\n        ZipEntry entry = zf.getEntry(\"word/document.xml\");\n        XMLInputFactory xmlif = XMLInputFactory.newInstance();\n        XMLStreamReader reader = xmlif.createXMLStreamReader(zf.getInputStream(entry));\n        DocumentDocument document = DocumentDocument.Factory.parse(reader);\n        assertNotNull(document);\n        zf.close();"}, {"count": 7, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "is_private": false, "id": 188769, "time": "2016-02-24T13:49:06Z", "bug_id": 59058, "creation_time": "2016-02-24T13:49:06Z", "text": "In XWPFDocument's onDocumentRead(), if we change:\n\n            DocumentDocument doc = DocumentDocument.Factory.parse(getPackagePart().getInputStream(), DEFAULT_XML_OPTIONS);\n\n\nto:\n\n            XMLInputFactory xmlif = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlif.createXMLStreamReader(getPackagePart().getInputStream());\n\n            DocumentDocument doc = DocumentDocument.Factory.parse(reader, DEFAULT_XML_OPTIONS);\n\nWe can parse both files.\n\nThis change is on the periphery of my competence.  Any problems with this?  How can we require xerces via .newInstance()/newFactory()?"}, {"count": 8, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of bug 57031 ***", "attachment_id": null, "bug_id": 59058, "id": 188773, "time": "2016-02-24T18:21:20Z", "creator": "tallison@mitre.org", "creation_time": "2016-02-24T18:21:20Z", "is_private": false}]
[{"attachment_id": 29025, "tags": [], "creator": "stategyman@gmail.com", "text": "Created attachment 29025\nTest Plan showing the synchronization timer issue.\n\nHello,\n\nIt seems when I add a synchronizing timer, it blocks the test end if it is used in a thread group that stops based on the test duration. \n\nIt stops all threads that are not on a wait() command from the synchronization timer, but not those that are. It seems the test end function should have a notify, or a timeout property should be added to the CyclicBarrier so that the user can add a timeout to the timer. As it is, one cannot use it at all during duration tests.\n\n I've attached a small test that shows the issue. Once the 20 seconds are up, the test usually hangs as it cannot properly end the test and the program is stuck forever. I'm using 2.7 r1342410.", "count": 0, "id": 160422, "time": "2012-07-03T14:51:35Z", "bug_id": 53501, "creation_time": "2012-07-03T14:51:35Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53501, "is_private": false, "text": "Hello,\nI investigated this issue.\nMy idea to fix it is the following:\n\n    Add 2 new methods on AbstractThreadGroup:\n        public void start()  => Called when StandardJMeterEngine#startThreadGroup is called just before JMeterThread creation loop. It will notify AbstractThreadGroup that it is started\n        public void registerStartedThread(JMeterThread jmeterThread, Thread newThread) , which will be called just after Thread creation\n        public void stop(); => Called when stop or shutdown is called\n    Then in ThreadGroup, if scheduler mode is on , start will start a Timer that will execute on end of duration or at endTime. This timer will call on each JMeterThread of the Group:\n\n    JMeterThread item = entry.getKey();\n                item.stop(); // set stop flag\n                item.interrupt(); // interrupt sampler if possible\n                Thread t = entry.getValue();\n                if (t != null ) { // Bug 49734\n                    t.interrupt(); // also interrupt JVM thread\n                }\n\n    I will also have to handle premature stops to cancel timerTask.\n\n\n\nThese changes will impact AbstractThreadGroup which is extended by Plugins (JMETER Plugins @GC for example).  But for now they will just have to recompile.\n\nThey will also have to call super.start() if they implement method in the future.\n\n\nIt tried it and it fixes the issue but I wanted your ideas on impacts I may not have foreseen.\nRegards", "id": 160502, "time": "2012-07-08T13:45:20Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-07-08T13:45:20Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 53501, "text": "Hi,\n\nWell, I managed to fix the issue on my own by adding a timeout to the wait command on the barrier (barrier.await()) in the synchronization timer, and catching the time out exception in the outer call. If you do this with a single property timeout, it shouldn't really affect how the threads must be called, and would deal with the issue at hand. I would just consider taking this path as to not force plugin makers to recompile. \n\n\nBut your method seems to be a bit more broad, targeting the end thread rather than the timer itself. In the regular JMeter implementation the only component that seems to cause this is the synchronization timer, but perhaps you could also achieve it through a beanshell timer, or in another synchronization plugin. Then its an issue on whether the plugin/beanshell timer maker should have to deal with ending threads on timeout or not.\n\nRegards,\n\nAndres", "id": 160504, "time": "2012-07-08T14:17:14Z", "creator": "stategyman@gmail.com", "creation_time": "2012-07-08T14:17:14Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 53501, "is_private": false, "text": "Hello,\nYes my method aims at this because adding a timeout on CyclicBarrier for this would break Sync Timer contract as you will make timer return even if the number of participant is lower than what was set. How would you set this timeout correctly ?", "id": 160507, "time": "2012-07-08T14:27:19Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-07-08T14:27:19Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 53501, "is_private": false, "text": "From my understanding, the timeout on the cyclic barrier doesn't return the thread, it throws an exception. So you might make it so it restarts the thread (which would then go back to the timer), or you could change the sync timer contract by adding a box in the GUI for timeout duration, when given 0 it defaults to no time out or something.", "id": 160509, "time": "2012-07-08T16:27:24Z", "creator": "stategyman@gmail.com", "creation_time": "2012-07-08T16:27:24Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 53501, "text": "Issue has been fixed by sebb within work on issue 53418.\nWould it be possible for you to check on nightly build:\n- http://ci.apache.org/projects/jmeter/nightlies/", "id": 161543, "time": "2012-08-20T19:53:42Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-08-20T19:53:42Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 53501, "is_private": false, "text": "Currently (as of git 05f071840c7f6, https://svn.apache.org/repos/asf/jmeter/trunk@1481155) JMeter just calls sleep and it does not check if the \"time-after-wakeup\" is still in thread schedule.\n\nI do not find interrupts, mentioned in comment #1.\n\nThe bug is reproducable with simple Constant Timer\n\nThe behaviour is as follows:\n1) Set test duration (via threadgroup scheduler) to 1 minute\n2) Timer says: \"sleep 5 minutes\" (e.g. Constant Timer)\n3) The thread sleeps, ignoring the scheduler\n4) Test finishes only after 5 minutes\n\n\nExpected behaviours is as follows:\n3) Thread terminates, as there is no sense in sleeping\n4) Test finishes in 1 minute as per scheduler", "id": 167148, "time": "2013-05-12T10:58:54Z", "creator": "sitnikov.vladimir@gmail.com", "creation_time": "2013-05-12T10:58:54Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "gael.goinvic@gmail.com", "text": "Is there any workaround to this bug ? It's a major problem for one of the projects I work on.", "count": 7, "id": 172885, "time": "2014-02-04T13:05:35Z", "bug_id": 53501, "creation_time": "2014-02-04T13:05:35Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "sebb@apache.org", "text": "(In reply to Vladimir Sitnikov from comment #6)\n> Currently (as of git 05f071840c7f6,\n> https://svn.apache.org/repos/asf/jmeter/trunk@1481155) JMeter just calls\n> sleep and it does not check if the \"time-after-wakeup\" is still in thread\n> schedule.\n> \n> I do not find interrupts, mentioned in comment #1.\n> \n> The bug is reproducable with simple Constant Timer\n> \n> The behaviour is as follows:\n> 1) Set test duration (via threadgroup scheduler) to 1 minute\n> 2) Timer says: \"sleep 5 minutes\" (e.g. Constant Timer)\n> 3) The thread sleeps, ignoring the scheduler\n> 4) Test finishes only after 5 minutes\n> \n> \n> Expected behaviours is as follows:\n> 3) Thread terminates, as there is no sense in sleeping\n> 4) Test finishes in 1 minute as per scheduler\n\nThe scheduler is designed to stop the test once the duration has been reached. It is not designed to interrupt the test. So this test does not show a problem", "count": 8, "id": 172886, "time": "2014-02-04T14:32:31Z", "bug_id": 53501, "creation_time": "2014-02-04T14:32:31Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "Fixed within 56691 => Added timeout to Synchronizing Timer\n\n*** This bug has been marked as a duplicate of bug 56691 ***", "count": 9, "id": 176242, "time": "2014-07-06T13:14:03Z", "bug_id": 53501, "creation_time": "2014-07-06T13:14:03Z", "is_private": false}]
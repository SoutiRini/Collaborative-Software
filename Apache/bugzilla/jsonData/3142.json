[{"count": 0, "tags": [], "creator": "volkmar.nissen@sapmarkets.com", "text": "The Schema\n\nhttp://ifr.sap.com/catalog/query.jsp?namespace=urn:sap-\ncom:ifr:LO:46C&type=idoc&name=ORDERS02&xml=SCHEMA\n\ncan not be used for validation, because it generates memory overflows because \nof the maxOccurs=\"999999\" entries.\n\nIf I replace the maxOccurs=\"999999\" with maxOccurs=\"unbounded\" everthing is \nfine.\n\nThe Reason:\n\nThe loop in org.apache.xerces.validators.schema.SchemaGrammar makes a huge \nnumber of calls to createContentSpec and allocates a huge amount of memory, if \nyou enter a large number for maxOccurs in a Schema. \n\nThis causes memory overflows, if a schema contains a large number of elements \nwith a large number for maxOccurs.\n\nThis is the problematic part of the Code:\n=======================================================\n                index = optional;\n                for (int i=0; i < (maxOccurs-minOccurs-1); i++) {\n                    index = addContentSpecNode\n(XMLContentSpec.CONTENTSPECNODE_SEQ,\n                                                              index,\n                                                              optional,\n                                                              false);\n                }\n=====================================================================", "id": 4597, "time": "2001-08-16T01:17:04Z", "bug_id": 3142, "creation_time": "2001-08-16T01:17:04Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "I just ran into an StackOverflow Exception. in Method buildSyntaxTree\n\norg.apache.xerces.validators.common.Grammar:\n\nHere it is:\n\n           if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE)\n                ||  (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ)) {\n                //\n                //  Recurse on both children, and return a binary op node\n                //  with the two created sub nodes as its children. The node\n                //  type is the same type as the source.\n                //\n\n                nodeRet = new CMBinOp( contentSpec.type, buildSyntaxTree\n(leftNode, contentSpec)\n                                       , buildSyntaxTree(rightNode, \ncontentSpec));\n\n\t\t/* MODIFIED (Jan, 2001) */\n\n\t    } else if (contentSpec.type == \nXMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE\n", "is_private": false, "bug_id": 3142, "id": 4600, "time": "2001-08-16T05:12:33Z", "creator": "volkmar.nissen@sapmarkets.com", "creation_time": "2001-08-16T05:12:33Z", "attachment_id": null}, {"text": "Hi Volkmar,\n\nThis is a known problem/limitation of Xerces. maxOccurs=999999 results in a \nsequence of 999999 (possibly optional) elements. So definitely you'll get \nOutOfMemory or StackOverflow exception.\n\nWe don't plan to fix/improve this in Xerces1. In fact, we didn't see many \nrequirements for large occurrence value support. In most cases, \nmaxOccurs=unbounded would be a better choice.\n\nBut we are considering supporting such case in Xerces2. It's still in design \nphase, so we are open for any suggestions.\n\nCheers,\nSandy Gao", "tags": [], "bug_id": 3142, "attachment_id": null, "count": 2, "id": 4602, "time": "2001-08-16T06:50:04Z", "creator": "sandygao@ca.ibm.com", "creation_time": "2001-08-16T06:50:04Z", "is_private": false}, {"count": 3, "tags": [], "text": "Re-open so it can returned as a duplicate.", "attachment_id": null, "bug_id": 3142, "id": 7436, "time": "2001-11-01T08:01:43Z", "creator": "zongaro@ca.ibm.com", "creation_time": "2001-11-01T08:01:43Z", "is_private": false}, {"count": 4, "tags": [], "creator": "zongaro@ca.ibm.com", "text": "\n\n*** This bug has been marked as a duplicate of 3277 ***", "id": 7437, "time": "2001-11-01T08:02:02Z", "bug_id": 3142, "creation_time": "2001-11-01T08:02:02Z", "is_private": false, "attachment_id": null}]
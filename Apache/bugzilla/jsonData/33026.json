[{"count": 0, "tags": [], "text": "A NPE terminates the jar task if a zipgroupfileset is used to add a jar file\nthat doesn't contain a valid MANIFEST.MF entry.\n\n<jar destfile=\"bfj.jar\" filesetmanifest=\"merge\">\n\t<zipgroupfileset refid=\"manyjars.fileset\" />\n</jar>\n\nSource : ant/src/main/org/apache/tools/ant/taskdefs/Jar.java\n\nprivate Manifest getManifest(Reader r) {\n\n\tManifest newManifest = null;\n\ttry {\n\t\tnewManifest = new Manifest(r);\n\t} catch (ManifestException e) {\n\t\tlog(\"Manifest is invalid: \" + e.getMessage(), Project.MSG_ERR);\n\t\t//throw new BuildException(\"Invalid Manifest: \" + manifestFile, e,\ngetLocation()); // <-- here!\n\t\treturn null; // <-- and here!\n\t} catch (IOException e) {\n\t\tthrow new BuildException(\"Unable to read manifest file\"\n\t\t\t\t\t\t\t\t + \" (\" + e.getMessage() + \")\", e);\n\t}\n\treturn newManifest;\n}\n\nThe method getManifest(Reader) throws a BuildException if a source jar has a\ninvalid manifest, this is correct but can be annoying if you want to merge in\nthe jar file despite the invalid entry. Perhaps an option should decide wheiter\nthis function should throw an exception or just return null to allow merging of\nthird party jars with invalid manifests.", "attachment_id": null, "id": 69475, "creator": "karl@gan.no", "time": "2005-01-10T11:02:55Z", "bug_id": 33026, "creation_time": "2005-01-10T11:02:55Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 33026, "attachment_id": null, "id": 93207, "time": "2006-09-08T10:54:14Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-08T10:54:14Z", "is_private": false, "text": "Changing title as NPE happens only if you change the code."}]
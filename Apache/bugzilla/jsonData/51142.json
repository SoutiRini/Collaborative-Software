[{"attachment_id": null, "tags": [], "creator": "asfbugzilla-m@eghm.net", "text": "I submitted a patch on the review board https://reviews.apache.org/r/595/diff/#index_header to improve the error message If the AJP packetSize is not large enough.  As is:\n\norg.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler process                                                                                                                 \nSEVERE: Error reading request, ignored                                                                                                                                            \njava.lang.StringIndexOutOfBoundsException: String index out of range: 13628                                                                                                       \n        at java.lang.String.checkBounds(String.java:401)                                                                                                                          \n        at java.lang.String.<init>(String.java:442)                                                                                                                               \n        at org.apache.tomcat.util.buf.ByteChunk.toStringInternal(ByteChunk.java:497)                                                                                              \n        at org.apache.tomcat.util.buf.StringCache.toString(StringCache.java:216)                                                                                                  \n        at org.apache.tomcat.util.buf.ByteChunk.toString(ByteChunk.java:490)                                                                                                      \n        at org.apache.tomcat.util.buf.MessageBytes.toString(MessageBytes.java:213)                                                                                                \n        at org.apache.coyote.RequestInfo.updateCounters(RequestInfo.java:156)                                                                                                     \n        at org.apache.coyote.Request.updateCounters(Request.java:518)                                                                                                             \n        at org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:455)                                                                                                \n        at org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.process(AjpAprProtocol.java:384)                                                                             \n        at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1665)                                                                                               \n        at java.lang.Thread.run(Thread.java:662)                                                                                                                                  \n                                                                                                                                                                                  \n                                                                                                                                     \n[Fri Apr 08 17:23:44 2011] [error] ajp_read_header: ajp_ilink_receive failed                                                                                                      \n[Fri Apr 08 17:23:44 2011] [error] (120006)APR does not understand                                                                                                                \nthis error code: proxy: read response failed from 127.0.0.1:8003                                                                                                                  \n(127.0.0.1)                                                                                                                                                                       \n[Fri Apr 08 17:23:44 2011] [error] (104)Connection reset by peer:                                                                                                                 \najp_ilink_receive() can't receive header", "count": 0, "id": 146073, "time": "2011-05-03T02:37:03Z", "bug_id": 51142, "creation_time": "2011-05-03T02:37:03Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 51142, "text": "Putting a try/catch around the symptom is not the best way to handle this.\n\nIt should be possible to identify when packet length > buffer, log a suitable message at an appropriate level, ensure a 400 is recorded in the access log (probably only possible in Tomcat 7) and close the connection.", "id": 146123, "time": "2011-05-04T17:39:15Z", "creator": "markt@apache.org", "creation_time": "2011-05-04T17:39:15Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51142, "attachment_id": null, "is_private": false, "id": 146124, "time": "2011-05-04T18:33:34Z", "creator": "markt@apache.org", "creation_time": "2011-05-04T18:33:34Z", "text": "You might want to look at r1099556 which improves the handling of this case for Tomcat 7."}, {"count": 3, "tags": [], "bug_id": 51142, "text": "Thank-you.\n\nYou saw that the exception is happening during req.updateCounters in process? http://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/coyote/RequestInfo.java?annotate=581920 line 156: maxRequestUri=req.requestURI().toString(); called during \n\nI see I should have used 400 instead of 500.  Is error not appropriate level to log at?  They didn't close the connection in the two try/catch blocks a few lines before this line, but here it should?", "id": 146125, "time": "2011-05-04T19:31:17Z", "creator": "asfbugzilla-m@eghm.net", "creation_time": "2011-05-04T19:31:17Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "text": "No, you missed the key point in my review comment. Putting a try/catch around the point where the error is first seen is the wrong approach. The right approach is detecting when the packet length > buffer length and taking the appropriate action at that point (500 response, log message etc.)", "count": 4, "id": 146851, "time": "2011-06-03T22:35:11Z", "bug_id": 51142, "creation_time": "2011-06-03T22:35:11Z", "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> No, you missed the key point in my review comment. Putting a try/catch around\n> the point where the error is first seen is the wrong approach. The right\n> approach is detecting when the packet length > buffer length and taking the\n> appropriate action at that point (500 response, log message etc.)\n\nThanks, but the try catch block is not around where the error is first seen.  Depending how you count the patch is for the 3rd or 4th apache class up from where the exception occurs.  Just below two other try catch blocks (all in the same method) of which this one is nearly identical to.", "is_private": false, "bug_id": 51142, "id": 146862, "time": "2011-06-04T07:14:55Z", "creator": "asfbugzilla-m@eghm.net", "creation_time": "2011-06-04T07:14:55Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 51142, "attachment_id": null, "text": "Again, the point where the exception occurs is not the place to handle this. The place to handle this is the point where Tomcat knows that the message is longer than than the buffer.\n\nTake a look at the AjpProcessor.readMeassge() method in Tomcat 7 and compare it to the same method in Tomcat 6. Any patch also needs to cover the AjpAprProcessor.", "id": 146863, "time": "2011-06-04T10:50:04Z", "creator": "markt@apache.org", "creation_time": "2011-06-04T10:50:04Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 51142, "attachment_id": null, "is_private": false, "id": 146867, "time": "2011-06-04T19:03:39Z", "creator": "asfbugzilla-m@eghm.net", "creation_time": "2011-06-04T19:03:39Z", "text": "Is what you want from me, is to submit a patch copying Tomcat 7's AjpProcessor.readMessage to Tomcat 6?\n\n(In reply to comment #6)\n> Again, the point where the exception occurs is not the place to handle this.\n> The place to handle this is the point where Tomcat knows that the message is\n> longer than than the buffer.\n> \n> Take a look at the AjpProcessor.readMeassge() method in Tomcat 7 and compare it\n> to the same method in Tomcat 6. Any patch also needs to cover the\n> AjpAprProcessor."}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 8, "id": 197582, "time": "2017-03-10T11:21:32Z", "bug_id": 51142, "creation_time": "2017-03-10T11:21:32Z", "text": "6.0.x has reached end-of-life and this was already fixed in 7.0.x"}]
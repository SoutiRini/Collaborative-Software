[{"count": 0, "tags": [], "bug_id": 54386, "attachment_id": null, "id": 164473, "time": "2013-01-08T12:53:26Z", "creator": "p.rader@gmx.net", "creation_time": "2013-01-08T12:53:26Z", "is_private": false, "text": "If we understand JAR as an Java-Archive that contains Java and static resources Java needs. The functionality of a Content-Delivery-Network-Server has a clash with it: \n   even if the WAR will be exploded to an directory inside the deployment-directory the static resouces in the lib/any.jar!/META-INF/resources/ wont get exploded too. \n\n\"All of the above static content can also be packaged in a JAR file with the content listed above packaged in the META-INF/resources directory of the jar file. The JAR file can then be included in the WEB-INF/lib directory of the web \napplication. \"(JSR315\u00a710.10)\n\nOk, this does *not* automatically claim to explode the static content of the jar's. But i think this would be a nice feature so the CDN must *not* explode the resources of the class-loader.\n\nPlease do not say: Ok this is a responsibility of the CDN-Server, Tomcat is a Applicationserver. If you think so, please mark this FR as \"wont be fixed\"."}, {"count": 1, "tags": [], "bug_id": 54386, "is_private": false, "text": "I wouldn't say that this is a the responsibility of the CDN: it is your responsibility.\n\nNow, that isn't to say that Tomcat couldn't supply some useful tools to help you take a WAR file and dump all the static resources somewhere (directory, zip/tar archive, single JAR, etc.).\n\nWould you want such a tool to only dump items in JAR files' META-INF/resources directories, or would you want it to also dump static resources from the WAR file's base directory? If so, how does one determine what is a static resource from there?", "id": 164481, "time": "2013-01-08T15:25:26Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-08T15:25:26Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "You are right, this may be partitial a problem.\n\nWell i would be happy to keep it on the expertise of the developers to decide if the static contents in /WEB-INF/classes/META-INF/resources/** should be extracted too (even if JSR315\u00a73.6 seeems to ignore those contents). \n\nAbout the static content of the root of a war:\n1. At least this is not related to JSR315\u00a710.10/\u00a73.6 and must be in a seperate FR after all.\n2. I guess if they should be exploded we can enable the unpackWARs-annotation in the Context/Host-Configuration of the server.xml.\n\nMy Suggestion:\n\nCreate a new server.xml-attribute called: unpackJARResources (default: false).\nIf true, all those jar-resources should be extracted to a matching folder at deploy-time.\n\n    \"Resources inside the META-INF/resources directory of JAR file must be \nconsidered only if the container has unpacked them from their containing JAR file \nwhen a call to getRealPath() is made, and in this case MUST return the unpacked \nlocation.\" (JSR315\u00a73.6)\n\nIf they are finally exploded, getRealPath() shoud return the exploded, well-formed os-specific file-location of the static content inside of the unpacked-jarresources-folder (as \u00a73.6 suggest).", "attachment_id": null, "bug_id": 54386, "id": 164483, "time": "2013-01-08T17:06:52Z", "creator": "p.rader@gmx.net", "creation_time": "2013-01-08T17:06:52Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 29830\nSample ant script for extracting static resources.\n\nI've got a better suggestion: just use ant since this has nothing to do with actually deploying a web application to Tomcat.", "attachment_id": 29830, "id": 164495, "creator": "chris@christopherschultz.net", "time": "2013-01-08T20:35:50Z", "bug_id": 54386, "creation_time": "2013-01-08T20:35:50Z", "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to comment #1)\n> \n> Now, that isn't to say that Tomcat couldn't supply some useful tools to help\n> you take a WAR file and dump all the static resources somewhere (directory,\n> zip/tar archive, single JAR, etc.).\n> \n\nIt should be easy to write an Apache Ant script that does that. It can be simplified by using their support for zip resources.\n\n\n> Create a new server.xml-attribute called: unpackJARResources (default: false).\n\nIf such attribute were added for the purpose of providing non-null getRealPath for those resources,  then they will be unpacked into the /work directory, not into the /webapps one.  Some work will be needed to re-map the underlying resources implementation from the original location to the unpacked one.\n\nI think that will not help you much with your task.\n\n\nI think the resources should not be unpacked into webapp itself, because that would change the web application. Having those resources separate from the rest of webapp files is one of the features of those \"resource jars\".", "attachment_id": null, "id": 164496, "creator": "knst.kolinko@gmail.com", "time": "2013-01-08T20:39:07Z", "bug_id": 54386, "creation_time": "2013-01-08T20:39:07Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 54386, "attachment_id": null, "is_private": false, "id": 164500, "time": "2013-01-08T21:19:15Z", "creator": "p.rader@gmx.net", "creation_time": "2013-01-08T21:19:15Z", "text": "   @Kolinko\nYou are right, /work or /temp is the even better approach, that was my idea too! \nRedeployment may overwrite existing exploded jar-resources and we must prevent persistent-session injection. \n\nSo there should be a whole folder-structure unique to the domain/context (in example tomcat/work/resources/localhost/petshop/)!\n\n   @Schultz\nYes we can solve this via ant, but this always would be complex and dirty hack.\n\nIm not sure what if *two* jars contains different files but same *file-names*, which should be used? So there are some ant-tasks: \n1. The webapp/ant must introspect the class-loader and \n2. the class-load-order which jar would be load first, the shared/lib and bootstrap and combined and the systempath up to JRE/JDK. \n\nAnother workaround is to write a lifecycle-listener who knows all the resources an explode them at deployment. Ok we are at least now able to say: this is the subtask of the CDN's-jar (so it will be an Wontfix too)."}, {"count": 6, "tags": [], "bug_id": 54386, "is_private": false, "text": "(In reply to comment #5)\n> Yes we can solve this via ant, but this always would be complex and dirty\n> hack.\n\nI don't see \"deployment procedures\" as hacks.\n\n> I'm not sure what if *two* jars contains different files but same\n> *file-names*, which should be used?\n\nThere is nothing stopping the same situation from occurring if Tomcat were to serve these resources itself. I requested clarification earlier today and got an answer from Mark Thomas, a memory of the Servlet EG:\nhttp://markmail.org/message/trfu5zuxrisncv6i\n\nYou can provide whatever ordering you want if you use ant or a similar tool.\n\n> So there are some ant-tasks: \n> 1. The webapp/ant must introspect the class-loader and \n> 2. the class-load-order which jar would be load first, the shared/lib and\n> bootstrap and combined and the systempath up to JRE/JDK. \n\nI wasn't considering the case where static content for the webapp wasn't provided by the webapp. A bit of a pathological use case, wouldn't you say?\n\n> Another workaround is to write a lifecycle-listener who knows all the\n> resources an explode them at deployment. Ok we are at least now able to say:\n> this is the subtask of the CDN's-jar (so it will be an Wontfix too).\n\nI'm leaning toward WONTFIX because I really don't think this is the job of the container: it's the job of the deployer (that's either a person or a process carried out by people wielding tools). That said, it would be nice for Tomcat to provide a sample script, even if it is only available via the Wiki, for instance.", "id": 164508, "time": "2013-01-08T22:26:42Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-08T22:26:42Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "You got me, i am working in a madhouse.\n\nWell, the \"classpath:/META-INF/resources/\" identifier load the correct resources, as it is result of the current webapp-classloader. This is even better than use ant scripts (indeed pathological).\n\nTo use an CDN for those static resources ANT must be installed then? Finally i must life with that fact then.\n\nTomcat already have a deployment-process. To calculate what resources the defaultservlet would serve should not be a manual job of a person imo.", "attachment_id": null, "bug_id": 54386, "id": 164515, "time": "2013-01-09T09:42:47Z", "creator": "p.rader@gmx.net", "creation_time": "2013-01-09T09:42:47Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 54386, "attachment_id": null, "is_private": false, "id": 164529, "time": "2013-01-09T17:58:14Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-01-09T17:58:14Z", "text": "(In reply to comment #7)\n> Well, the \"classpath:/META-INF/resources/\" identifier load the correct\n> resources, as it is result of the current webapp-classloader. This is even\n> better than use ant scripts (indeed pathological).\n\nWell, perhaps it is more convenient for you. Adding something like this to Tomcat doesn't make any sense because it's a deployment detail, not anything to do with actually running the web application.\n\nThink about it this way: you want to modify Tomcat so that it can launch a webapp and dump a .zip file (or fill a directory) containing all your static content. Then what are you going to do? scp it up to a CDN, right? Well, that's going to have to be manual anyway, so what's the problem with manually-generating the .zip file or content directory?\n\nOr do you propose that Tomcat be fit with connectors to upload static content to popular CDNs so you can just go to a JSP page and click \"upload static content\" and have it work? Do you see how this is really not Tomcat's business, now?\n\n> To use an CDN for those static resources ANT must be installed then? Finally\n> i must life with that fact then.\n\nAnt must be installed on the host where you prepare your builds. How do you to builds, today? If you use Java and you don't use Ant, then you probably use Maven. I'm sure Maven can be taught to do this stuff, too -- I just don't know how. If you use some other build process, then use that: unzipping files and re-zipping them is not rocket science... you can do it with a 50-line shell script if you have to. I just used Ant because it's awfully convenient.\n\nOnce the static content has been extracted, you can upload it to your CDN which of course does not need Ant to be installed.\n\n> Tomcat already have a deployment-process. To calculate what resources the\n> defaultservlet would serve should not be a manual job of a person imo.\n\nThe point is that using Tomcat as a conflict-resolution system is ... unnecessary. You could easily write a servlet that can dump your static resources to a ZIP file and return it in the response. There is no need for Tomcat to implement this functionality."}]
[{"count": 0, "attachment_id": null, "bug_id": 32218, "text": "Any textPath is shown starting not from the start of the path bug at some\ndistance along the path. This makes this component unusable. Adobe SVG plugin\nand Inkscape render textPath correctly.", "id": 66827, "time": "2004-11-13T01:51:44Z", "creator": "buliabyak@gmail.com", "creation_time": "2004-11-13T01:51:44Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": 13423, "bug_id": 32218, "is_private": false, "id": 66829, "time": "2004-11-13T01:53:58Z", "creator": "buliabyak@gmail.com", "creation_time": "2004-11-13T01:53:58Z", "tags": [], "text": "Created attachment 13423\nexample file from Inkscape with several textPath elements"}, {"count": 2, "attachment_id": null, "bug_id": 32218, "text": "Hi buliabyak,\n\n   Thanks for reporting this.  The problem is the 'useless'\nx/y on the text element.  Batik was incorrectly assigning these to\nthe first character in the textPath which (for x) causes it to\nshift along the path.  I've patched Batik so it no longer\nbehaves this way.\n\n   Also we had a problem with opacity that I've straighted out.\nIt may be a few days before the fix is delivered to CVS as I am\nin the middle of working on a number of other things.", "id": 66830, "time": "2004-11-13T02:48:43Z", "creator": "deweese@apache.org", "creation_time": "2004-11-13T02:48:43Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "Hmm, indeed. So I just patched Inkscape to remove x/y from text when putting it\non path :) Now textPath created in Inkscape 0.40 will work with Batik 1.5 too.", "is_private": false, "id": 66833, "creator": "buliabyak@gmail.com", "time": "2004-11-13T05:22:05Z", "bug_id": 32218, "creation_time": "2004-11-13T05:22:05Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32218, "text": "I'm glad you updated inkScape as on closer reading of the SVG specificaiton\nI belive Batik's behavior is the correct one:\n\nWhen the inline-progression-direction is horizontal, then any x attributes on \n'text', 'tspan', 'tref' or 'altGlyph' elements represent new absolute offsets \nalong the path, thus providing explicit new values for startpoint-on-the-path.\n\n   (this is from the last paragraph in section 10.13)  This makes it\nclear that the 'x' attribute on the text element should apply to\nthe first character in the textPath adjusting it's position along the\npath.", "id": 66849, "time": "2004-11-13T13:30:03Z", "creator": "deweese@apache.org", "creation_time": "2004-11-13T13:30:03Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "I disagree. Quoting 10.7.1:\n\n\"\"\nAdjustments to the current text position are either absolute position\nadjustments or relative position adjustments. An absolute position adjustment\noccurs in the following circumstances:\n\n    * At the start of a 'text' element\n    * At the start of each 'textPath' element\n    * For each character within a 'text', 'tspan', 'tref' and 'altGlyph' element\nwhich has an x or y attribute value assigned to it explicitly\n\n...\n\nEach absolute position adjustment defines a new text chunk. \n\"\"\n\nThis clearly states that textPath starts a new chunk. In a new chunk, the\ncurrent text position of the previous chunk is ignored, and a new current text\nposition is started. For example if you have two tspan's following each other,\neach with explicit x/y, then the first one will have no effect on the position\nof the second. Similarly, x/y on text will have no effect on the child tspan\nthat has some other x/y because that starts a new chunk. It's the same with\ntextPath within text; the x/y on text starts a chunk but has no effect because\nthere are no glyphs in that chunk; textPath starts at once and starts a new\nchunk instead, whose x/y are defined by the path.\n\nAs for your quote from 10.13, I think it speaks about _child_ elements within\ntextPath, not parent. It's unfortunate that it does not make it clear enough.\nBut if you look in the rest of 10.13 you'll see many mentions of tspan, which\nall obviously refer to child tspans in a textPath. One problem with this theory\nis that per DTD, textPath is not allowed to contain 'text' element. But if we\naccept your theory that this paragraph speaks about _parent_ elements, then at\nleast tspan is not allowed to contain textPath in it. It's hard to believe that\nthis paragraph equally applies to both parents and children, without stating so\nexplicitly! So, I think it is clear that this list (\"'text', 'tspan', 'tref' or\n'altGlyph' elements\") refers to children of textPath and that including 'text'\nin it was an error in the spec.\n\n", "is_private": false, "id": 66852, "creator": "buliabyak@gmail.com", "time": "2004-11-13T15:40:46Z", "bug_id": 32218, "creation_time": "2004-11-13T15:40:46Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 32218, "text": "  For example if you have two tspan's following each other,\n  each with explicit x/y, then the first one will have no effect on the position\n  of the second. Similarly, x/y on text will have no effect on the child tspan\n  that has some other x/y because that starts a new chunk.\n\n   But this isn't true.  If the parent text element has a list of\nX/Y values then for chacters in the tspan that don't have X/Y values \nassigned from the tspan they 'inherit' the value from the text element.\nIf you read the section on X/Y attributes it seems pretty clear to me that\nthe X/Y values are part of the character attributes not the element attributes\n(for example the inheritence and they move with Bidi).  Read the\ndescription of the X attribute for text and tspan.\n\n    One problem with this theory is that per DTD, textPath is not allowed to \n    contain 'text' element. But if we accept your theory that this paragraph \n    speaks about _parent_ elements, then at least tspan is not allowed to \n    contain textPath in it.\n\n  I'm considering both children and parents of textPath, since either can \nprovide the absolute X/Y value for a particular character.  All that\nmatters is that the character has an absolute X/Y not where it comes from.\n\n", "id": 66857, "time": "2004-11-13T19:31:49Z", "creator": "deweese@apache.org", "creation_time": "2004-11-13T19:31:49Z", "is_private": false, "attachment_id": null}]
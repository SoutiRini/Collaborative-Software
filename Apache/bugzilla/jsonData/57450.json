[{"count": 0, "tags": [], "bug_id": 57450, "is_private": false, "id": 180333, "attachment_id": null, "creator": "dlikhten@gmail.com", "creation_time": "2015-01-16T21:22:42Z", "time": "2015-01-16T21:22:42Z", "text": "So it makes sense why the standard \"autoSize\" mechanism doesn't function on SXSSF Worksheets. However if you provided a tool which allows us to feed one row at a time and keep track of the largest value for each column desired, which can then be applied to the worksheet, we could get the autosize behavior without having to loop through everything at the end.\n\n\ntracker = new AutosizeTracker(sheet) // assume flush size is 10\ntracker.monitorColumn(1)\ntracker.monitorColumn(5)\n\n...\ntracker.trackRow(row1) // tracks widths, holds no reference to row1\ntracker.trackRow(row2)\n...\ntracker.trackRow(row5000)\n...\ntracker.applyWidths();\n\n\nI was considering writing one of these, but it seems that there is no well factored tool for getting the width of a single cell with all the knowledge cooked into the autoSizeColumn method of SXSSFSheet"}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "You'd need to refactor the current autosize column code out into a new tool, updating the existing code there to use that instead, then add this sxssf helper, but overall looks do-able and interesting.\n\nUnit testing might be tricky, as the sizing varies depending on the fonts available, but you could probably manage something similar to the current fuzzy matching the existing code's tests use\n\nAs a first step, I'd suggest you sketch out a plan for how you'd refactor the current code, and post it here or on the dev list for review. We can then give you some advice, before you start working on the patch!", "id": 180360, "time": "2015-01-18T18:40:25Z", "bug_id": 57450, "creation_time": "2015-01-18T18:40:25Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57450, "attachment_id": null, "text": "1) The logic in SXSSFSheet#autoSizeColumn for width calculation needs to be moved over into some generic code to convert the width to that 256 inflated number (sorry I'm still not 100% familiar with why that happens)\n\n2) SheetUtil.getColumnWidth has a ton of logic, but that logic is intertwined with looping through every single row in the sheet for a given column. It would be really useful to have a SheetUtil.getCellWidth which would allow me to do my count-tracking manually *but* it would still re-use the logic that you guys built for figuring out the width of a column. That way I don't actually have the ability to get things wrong.\n\n3) Unit testing: Since all the interesting logic is going to be left in *your* maintained code, my testing will be simple. I can stub all the width calculations and just focus on my (trivial) summation logic. This way my code cannot introduce new width calculation bugs.", "id": 180417, "time": "2015-01-20T16:29:09Z", "creator": "dlikhten@gmail.com", "creation_time": "2015-01-20T16:29:09Z", "is_private": false}, {"count": 3, "tags": [], "creator": "dlikhten@gmail.com", "text": "I forgot to mention:\n\n- SheetUtil.getCellWidth does exist, but the logic inside .getColumnWidth seems to also be significant enough that I don't want any of the knowledge inside my tool (if possible). Or I just don't grok the code well enough.\n\n- SXSSFSheet#autoSizeColumn also has some logic regarding max width. Once again I rather not have my code even have the possibility of getting that logic wrong. Also it seems XSSFSheet also has the exact same logic copy-pasta'd. Ditto for HSSFSheet.", "id": 180418, "time": "2015-01-20T16:33:40Z", "bug_id": 57450, "creation_time": "2015-01-20T16:33:40Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57450, "attachment_id": null, "is_private": false, "id": 180424, "time": "2015-01-20T21:07:39Z", "creator": "dlikhten@gmail.com", "creation_time": "2015-01-20T21:07:39Z", "text": "Other features I can see coming out of this tool:\n\n- ability to skip rows for auto-sizing. Example is ignore the header row when doing auto sizing calculations.\n\n- ability to set a minimum / maximum value. The tool can be made to allow the user to autosize with a minimum value, or with a maximum value that is smaller than the allowable amount."}, {"count": 5, "tags": [], "bug_id": 57450, "attachment_id": null, "text": "I am looking into this issue, trying to follow what was proposed by Dmitriy.\n\nAny thoughts on how the existing autosizeColumn() impl in SXSSFSheet should be handled? Left as it is, with @Deprecated? Or should it be an empty impl?", "id": 185849, "time": "2015-10-22T16:15:05Z", "creator": "st.mailinglists@gmail.com", "creation_time": "2015-10-22T16:15:05Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57450, "is_private": false, "id": 185853, "attachment_id": 33194, "creator": "st.mailinglists@gmail.com", "creation_time": "2015-10-22T18:58:38Z", "time": "2015-10-22T18:58:38Z", "text": "Created attachment 33194\nSXSSF test case showing the problem\n\nAdded patch file with an SXSSF test showing the problem described in this issue."}, {"count": 7, "tags": [], "creator": "st.mailinglists@gmail.com", "text": "Created attachment 33207\nSXSSF Autosizing Fix\n\nThis patch introduces an AutosizeColumnTracker class for handling autosizing when creating SXSSF files:\n* monitorColumn(int) to register which columns will be autosized\n* trackRow(Row) to include rows in autosize calculations\n* applyAutosizeToColumn(int) to finally apply autosizing after all rows have been added.\n\nAdditional memory overhead introduced by this class:\n* Data structures to save list of monitored columns and current maxWidth for every column\n* Caching DataFormatter instance\n\nAlso I'm unsure how to handle backward compatibility, I see three possibilities:\nA. throw exception in SXSSFSheet.autosizeColumn(int)\nB. keep current behaviour as-is and only add new fixed behaviour\nC. remove Sheet.autosizeColumn() and migrate all Sheet implementations to this new autosizing implementation\n\nI'm willing to improve the patch if required, so hopefully it will be included in the next Apache POI release :-)", "id": 185929, "time": "2015-10-25T16:22:31Z", "bug_id": 57450, "creation_time": "2015-10-25T16:22:31Z", "is_private": false, "attachment_id": 33207}, {"count": 8, "tags": [], "bug_id": 57450, "attachment_id": 33251, "text": "Created attachment 33251\nSXSSF Autosizing Fix\n\nSee feedback posted to poi-dev mailing list [1].\nI applied supporting changes in following commits:\nr1712213 - (minor) typos in BaseTestBugzillaIssues.java\nr1712214 - (minor) TestSXSSFBugs.java svn props\nr1712216 - (minor) SheetUtil svn props\nr1712217 - SheetUtil factor out getDefaultCharWidth and getColumnWidthForRow methods (note - these are private--just change them to protected, /*package*/, or public, optionally with @Internal if you need to elevate the visibility).\nr1712219 - (minor) renamed canComputeColumnWidht, see bug 58576 r1691341\n\nThese fixes created a few merge conflicts, so I've resolved them in the attached patch.\n\n[1] http://mail-archives.apache.org/mod_mbox/poi-dev/201511.mbox/%3CCAM%2BTppJWzhz50TExdHRAzPyFbMz8hgCKuTT%3DLxReq%2BkoBE4bxQ%40mail.gmail.com%3E", "id": 186216, "time": "2015-11-03T07:49:49Z", "creator": "onealj@apache.org", "creation_time": "2015-11-03T07:49:49Z", "is_private": false}, {"count": 9, "tags": [], "text": "Attaching an updated patch file with a refactored solution (after discussion on DEV mailing list). Main aspects:\n* AutoSizeColumnTracker is now completely internal and \"hidden\" behind Sheet API\n* by default SXSSF auto-sizing behaviour is identical to Apache POI 3.13 \n* to get the fixed SXSSF auto-sizing behaviour, one must explicitly call ((SXSSFSheet)sheet).setAutoSizeTrackAllFlushedRows(true). This will track all rows before they get flushed to disk\n* Ability to manually add/remove rows to/from tracking is not implemented. This should be handled in separate issue since it affects all types (HSSF/XSSF/SXSSF)", "is_private": false, "id": 186347, "creator": "st.mailinglists@gmail.com", "time": "2015-11-10T18:27:42Z", "bug_id": 57450, "creation_time": "2015-11-10T18:27:42Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "st.mailinglists@gmail.com", "text": "Created attachment 33269\nSXSSF Autosizing fix", "id": 186348, "time": "2015-11-10T18:28:54Z", "bug_id": 57450, "creation_time": "2015-11-10T18:28:54Z", "is_private": false, "attachment_id": 33269}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "text": "Looks pretty good to me. Could you write some unit tests for the new/modified functionality and submit those as well?", "id": 186390, "time": "2015-11-16T06:14:12Z", "bug_id": 57450, "creation_time": "2015-11-16T06:14:12Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "text": "Created attachment 33277\nSXSSF Autosizing fix\n\n@Javen: Sorry my test class somehow didn't make it into the patch file. I'm attaching an ant-built patch archive now, it contains all my changes :-)\n\nI've also added a note about auto-sizing behaviour in the SXSSF section in documentation, feel free to comment.", "is_private": false, "id": 186400, "creator": "st.mailinglists@gmail.com", "time": "2015-11-16T20:08:56Z", "bug_id": 57450, "creation_time": "2015-11-16T20:08:56Z", "attachment_id": 33277}, {"count": 13, "tags": [], "bug_id": 57450, "text": "Created attachment 33307\nSXSSF Autosizing Fix, excludes tracking rows\n\n(In reply to Stefan Thurnherr from comment #9)\n> Attaching an updated patch file with a refactored solution (after discussion\n> on DEV mailing list). Main aspects:\n> * AutoSizeColumnTracker is now completely internal and \"hidden\" behind Sheet\n> API\n> * by default SXSSF auto-sizing behaviour is identical to Apache POI 3.13 \n> * to get the fixed SXSSF auto-sizing behaviour, one must explicitly call\n> ((SXSSFSheet)sheet).setAutoSizeTrackAllFlushedRows(true). This will track\n> all rows before they get flushed to disk\n> * Ability to manually add/remove rows to/from tracking is not implemented.\n> This should be handled in separate issue since it affects all types\n> (HSSF/XSSF/SXSSF)\n\nStefan, I've been working on your patch, attachment 33277, removing the row-tracking code, adding more unit tests and java docs. The attached patch is what I've come up with.\n\nI wanted to minimize the amount of changes people will need to make to their SXSSFWorkbook code while still behaving consistently regardless of the number of rows in the random-access window.\n\nFor example, if the random-access window is the first 5 rows, autoSizeColumn has all the information it needs in the window to compute the best-fit width without telling the AutoSizeColumnTracker the columns they wish to track. While I could allow that, as soon as the first row gets flushed, the user would need to track the columns of interest, though it's now too late. Additionally, this would look like a bug and would be difficult to track down because of the latent failure. It's better to have consistent behavior and fail early.\n\nIn this patch, autoSizeColumn uses the AutoSizeColumnTracker to determine the best-fit width of all tracked flushed columns, then computes the best-fit column width in the active window, takes the maximum of the two values, and sets the column width to that value.\n\nThe only change users will need to make to SXSSF code is to add sxSheet.trackAllColumnsForAutoSizing() or sxSheet.trackColumnForAutoSizing(column) (this is faster and uses less memory than tracking all columns) before calling autoSizeColumn. To have consistent behavior with H/XSSFSheet, tracking columns should occur immediately after the sheet is created and before the first row is created, though nothing stops it from occurring later (for example, if you want to exclude the first 3 rows from auto-sizing, you could wait to register the columns until after the first 3 rows have been flushed).\n\nColumns can be un-tracked as well, which is needed if user code auto-sizes several columns after writing just a few rows, and then doesn't auto-size anything else. Without the ability to untrack rows, computing the best-fit width for all the remaining rows would be wasted effort.\n\n# Scenario 1: Auto-size header row only\n> SXSSFWorkbook wb = new SXSSFWorkbook();\n> SXSSFSheet sh = wb.createSheet();\n> sh.trackAllColumnsForAutoSizing(); //do this immediately\n> Row header = sh.createRow(0);\n> // populate row with data\n> header.createCell(0).setCellValue(\"Some really long header\");\n> header.createCell(1).setCellValue(\"short\");\n> sh.autoSizeColumn(0);\n> sh.untrackAllColumns();\n\n# Scenario 2: Exclude header row from auto-sizing\n> SXSSFWorkbook wb = new SXSSFWorkbook();\n> SXSSFSheet sh = wb.createSheet();\n> Row header = sh.createRow(0);\n> header.createCell(0).setCellValue(\"Some really long header\");\n> header.createCell(1).setCellValue(\"short\");\n> sh.flushRows();\n> sh.trackAllColumnsForAutoSizing();\n> for (int r=0; r<1000; r++) {\n>     Row data = sh.createRow(r);\n>     // populate row with data\n>     data.createCell(0).setCellValue(\"Cell[r=\"+r + \",c=0]\");\n> }\n> sh.autoSizeColumn(0);\n\nLet me know if I need to make any changes before committing this new functionality.", "id": 186620, "attachment_id": 33307, "creator": "onealj@apache.org", "creation_time": "2015-11-28T12:27:37Z", "time": "2015-11-28T12:27:37Z", "is_private": false}, {"count": 14, "tags": [], "text": "Created attachment 33308\nSXSSF Autosizing Fix, excludes tracking rows", "is_private": false, "id": 186621, "creator": "onealj@apache.org", "time": "2015-11-28T12:31:17Z", "bug_id": 57450, "creation_time": "2015-11-28T12:31:17Z", "attachment_id": 33308}, {"count": 15, "tags": [], "text": "Added in r1717146. Updated docs in r1717147.\n\nNote to implementers:\nThis fix may break existing code.\nIf your application uses or potentially uses SXSSFSheets and calls autoSizeColumn, you will need to make sure that the columns that are auto-sized are tracked prior to auto-sizing. The best place to do this tracking is immediately after the sheet is created.\nUse any of the following:\n* sxssfSheet.trackAllColumnsForAutoSizing()\n* sxssfSheet.trackColumnsForAutoSizing(int column)\n* sxssfSheet.trackColumnsForAutoSizing(Collection<Integer> columns)\n\nRealize that tracking all columns may have a larger memory footprint than tracking individual columns if you only intend on tracking some of the columns.\n\nIf the sheet type isn't known until runtime, you'll need to add the following to your code.\nSheet sheet = workbook.createSheet();\n+ if (sheet instanceof SXSSFSheet) {\n+    SXSSFSheet sxSheet = (SXSSFSheet) sheet;\n+    sxSheet.trackAllColumnsForAutoSizing();\n+    // or track columns individually\n+ }\n...\nsheet.autoSizeColumn(0);\n\nSee comment 13 for more info.", "is_private": false, "id": 186642, "creator": "onealj@apache.org", "time": "2015-11-30T00:35:19Z", "bug_id": 57450, "creation_time": "2015-11-30T00:35:19Z", "attachment_id": null}, {"text": "*** Bug 51740 has been marked as a duplicate of this bug. ***", "tags": [], "creator": "onealj@apache.org", "is_private": false, "count": 16, "id": 186839, "time": "2015-12-07T19:50:23Z", "bug_id": 57450, "creation_time": "2015-12-07T19:50:23Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "Updated spreadsheet quickguide in r1718764.", "is_private": false, "id": 186852, "creator": "onealj@apache.org", "time": "2015-12-09T06:04:40Z", "bug_id": 57450, "creation_time": "2015-12-09T06:04:40Z", "attachment_id": null}]
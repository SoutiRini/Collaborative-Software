[{"count": 0, "tags": [], "text": "I've been training up developers using an example project based on the \nbuild.xml in the tomcat developer's guide and the struts sample application.\nI've found that there are some duplication issues in the sample build.xml \nwhich invite errors and increase maintenance. \n\nThere are a couple of bugs with the stated functionality (e.g. in where \nproperties are loaded from) but the main issue is with the separate definition \nof compile.classpath . This requires developers to maintain not only the \nclasspath but an identical list of files to be copied into the distribution. \nThe (working) build.xml below is a rearrangement of the example in the \ndocumentation to fix these issues, and to make the build work 'out of \nthe box' for more projects. See initialled comments ('BE') in the file for more\ndetails.\n\n<!-- A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n-->\n\n\n<project name=\"My Project\" default=\"compile\" basedir=\".\">\n\n\n\n<!-- ===================== Property Definitions =========================== -->\n\n<!--\n\n  Each of the following properties are used in the build script.\n  Values for these properties are set by the first place they are\n  defined, from the following list:\n  * Definitions on the \"ant\" command line (ant -Dcatalina.home=xyz compile)\n  * Definitions from a \"build.properties\" file in the top level\n    source directory\n  * Definitions from a \"build.properties\" file in the developer's\n    home directory\n  * Default definitions in this build.xml file\n\n  You will note below that property values can be composed based on the\n  contents of previously defined properties.  This is a powerful technique\n  that helps you minimize the number of changes required when your development\n  environment is modified.  Note that property composition is allowed within\n  \"build.properties\" files as well as in the \"build.xml\" script.\n\n-->\n  <!-- BE: added lines below to make the statements above true!! -->\n  <property file=\"build.properties\"/>\n  <property file=\"${user.home}/build.properties\"/>\n \n\n\n<!-- ==================== File and Directory Names ======================== -->\n\n<!--\n\n  These properties generally define file and directory names (or paths) that\n  affect where the build process stores its outputs.\n\n  app.name             Base name of this application, used to\n                       construct filenames and directories.\n                       Defaults to \"myapp\".\n\n  app.version          Version identifier for this application.\n\n  build.home           The directory into which the \"prepare\" and\n                       \"compile\" targets will generate their output.\n                       Defaults to \"build\".\n\n  catalina.home        The directory in which you have installed\n                       a binary distribution of Tomcat 4.  This will\n                       be used by the \"deploy\" target.\n\n  deploy.home          The name of the directory into which the\n                       deployment hierarchy will be created, and into\n                       which the build directory will be copied.\n                       Defaults to \"${catalina.home}/webapps/${app.name}\".\n\n  dist.home            The name of the base directory in which\n                       distribution files are created.\n                       Defaults to \"dist\".\n\n-->\n\n  <property name=\"app.name\"      value=\"myapp\"/>\n  <property name=\"app.version\"   value=\"1.0\"/>\n  <property name=\"build.home\"    value=\"build\"/>\n  <!-- BE: set to default path used by tomcat installer. That way it works out \nof the box for some -->\n  <property name=\"catalina.home\" value=\"C:/Program Files/Apache Tomcat 4.0\"/> \n<!-- UPDATE THIS! -->\n  <property name=\"deploy.home\"   value=\"${catalina.home}/webapps/${app.name}\"/>\n  <property name=\"dist.home\"     value=\"dist\"/>\n\n\n\n<!--  ==================== Compilation Control Options ==================== -->\n\n<!--\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n-->\n\n  <property name=\"compile.debug\"       value=\"true\"/>\n  <property name=\"compile.deprecation\" value=\"false\"/>\n  <property name=\"compile.optimize\"    value=\"true\"/>\n\n\n\n<!-- ==================== External Dependencies =========================== -->\n\n\n<!--\n\n  Use property values to define the locations of external JAR files on which\n  your application will depend.  In general, these values will be used for\n  two purposes:\n  * Inclusion on the classpath that is passed to the Javac compiler\n  * Being copied into the \"/WEB-INF/lib\" directory during execution\n    of the \"deploy\" target.\n\n  Because we will automatically include all of the Java classes that Tomcat 4\n  exposes to web applications, we will not need to explicitly list any of those\n  dependencies.  You only need to worry about external dependencies for JAR\n  files that you are going to include inside your \"/WEB-INF/lib\" directory.\n\n-->\n\n<!-- Dummy external dependency -->\n<!--\n  <property name=\"foo.jar\"\n           value=\"/path/to/foo.jar\"/>\n-->\n\n\n\n\n\n<!-- ==================== All Target ====================================== -->\n\n<!--\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n-->\n\n  <target name=\"all\" depends=\"clean,compile\"\n   description=\"Clean build and dist, then compile\"/>\n\n\n\n<!-- ==================== Clean Target ==================================== -->\n\n<!--\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n-->\n\n  <target name=\"clean\"\n   description=\"Delete old build and dist directories\">\n    <delete dir=\"${build.home}\"/>\n    <delete dir=\"${dist.home}\"/>\n  </target>\n\n\n\n<!-- ==================== Compile Target ================================== -->\n\n<!--\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n  Rather than relying on the CLASSPATH environment variable, Ant includes\n  features that makes it easy to dynamically construct the classpath you\n  need for each compilation.  The example below constructs the compile\n  classpath to include the servlet.jar file, as well as the other components\n  that Tomcat makes available to web applications automatically, plus anything\n  that you explicitly added.\n\n  BE: moved classpath definition to here. Since the path now depends on files\n  repositioned by the 'prepare' target, we cannot define the path until \n  prepare has been executed.\n-->\n\n  <target name=\"compile\" depends=\"prepare\"\n   description=\"Compile Java sources\">\n\n    <!-- Compile Java classes as necessary -->\n    <mkdir    dir=\"${build.home}/WEB-INF/classes\"/>\n    <javac srcdir=\"src\"\n          destdir=\"${build.home}/WEB-INF/classes\"\n           debug=\"${compile.debug}\"\n     deprecation=\"${compile.deprecation}\"\n        optimize=\"${compile.optimize}\">\n        <classpath id=\"compile.classpath\">\n\n          <!-- Include all JAR files from /WEB-INF/lib -->\n          <pathelement location=\"${build.home}/WEB-INF/classes\"/>\n          <fileset dir=\"${build.home}/WEB-INF/lib\">\n            <include name=\"*.jar\"/>\n          </fileset>\n\n          <!-- Include all elements that Tomcat exposes to applications -->\n          <pathelement location=\"${catalina.home}/common/classes\"/>\n          <fileset dir=\"${catalina.home}/common/lib\">\n            <include name=\"*.jar\"/>\n          </fileset>\n          <pathelement location=\"${catalina.home}/classes\"/>\n          <fileset dir=\"${catalina.home}/lib\">\n            <include name=\"*.jar\"/>\n          </fileset>\n        </classpath>\n    </javac>\n\n    <!-- Copy associated resource files -->\n    <!-- BE: removed 'library' fom path - it placed properties outside \nclasspath -->\n    <copy  todir=\"${build.home}/classes\">\n    <fileset dir=\"src\" includes=\"**/*.properties\"/>\n    </copy>\n\n  </target>\n\n\n\n<!-- ==================== Deploy Target =================================== -->\n\n<!--\n\n  The \"deploy\" target copies the contents of the build directory into a\n  location required by our servlet container, and picks up any external\n  dependencies along the way.  AFter restarting the servlet container, you\n  can now test your web application.\n\n-->\n\n  <target name=\"deploy\" depends=\"compile\"\n   description=\"Deploy application to servlet container\">\n\n    <!-- Copy the contents of the build directory -->\n    <mkdir     dir=\"${deploy.home}\"/>\n    <copy    todir=\"${deploy.home}\">\n      <fileset dir=\"${build.home}\"/>\n    </copy>\n\n    <!-- BE: removed copying of libraries, now in 'prepare' target -->\n  </target>\n\n\n\n<!-- ==================== Dist Target ===================================== -->\n\n\n<!--\n\n  The \"dist\" target creates a binary distribution of your application\n  in a directory structure ready to be archived in a tar.gz or zip file.\n  Note that this target depends on two others:\n  * \"deploy\" so that the entire web application (including external\n    dependencies) will have been assembled\n  * \"javadoc\" so that the application Javadocs will have been created\n\n-->\n\n  <target name=\"dist\" depends=\"deploy,javadoc\"\n   description=\"Create binary distribution\">\n\n    <!-- Copy documentation subdirectory -->\n    <copy    todir=\"${dist.home}/docs\">\n      <fileset dir=\"docs\"/>\n    </copy>\n\n    <!-- Create application JAR file -->\n    <jar jarfile=\"${dist.home}/${app.name}.war\"\n         basedir=\"${deploy.home}\"/>\n\n    <!-- Copy additional files to ${dist.home} as necessary -->\n\n  </target>\n\n\n\n<!-- ==================== Javadoc Target ================================== -->\n\n<!--\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n  BE: added classpath from compilation, and made this task document\n  all packages by default - more useful out of the box\n-->\n\n  <target name=\"javadoc\" depends=\"compile\"\n   description=\"Create Javadoc API documentation\">\n\n    <mkdir          dir=\"${dist.home}/docs/api\"/>\n    <javadoc sourcepath=\"src\"\n                destdir=\"${dist.home}/docs/api\"\n           packagenames=\"*\">\n      <classpath refid=\"compile.classpath\"/>\n    </javadoc>\n\n  </target>\n\n\n\n<!-- ==================== Prepare Target ================================== -->\n\n<!--\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n-->\n\n  <target name=\"prepare\">\n\n    <!-- Create build directory and copy static content -->\n    <mkdir  dir=\"${build.home}\"/>\n    <copy todir=\"${build.home}\">\n      <fileset dir=\"web\"/>\n    </copy>\n\n    <!-- BE: moved copies here so theres no classpath duplication -->\n    <!-- Copy external dependencies as required -->\n    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->\n    <mkdir  dir=\"${build.home}/WEB-INF/lib\"/>\n<!--\n    <copy todir=\"${build.home}/WEB-INF/lib\" file=\"${foo.jar}\"/>\n-->\n\n  </target>\n\n\n\n</project>", "attachment_id": null, "bug_id": 4917, "id": 7984, "time": "2001-11-16T04:40:00Z", "creator": "Brian.Ewins@btinternet.com", "creation_time": "2001-11-16T04:40:00Z", "is_private": false}, {"count": 1, "tags": [], "text": "Whoops - this line in the compile target:\n    <copy  todir=\"${build.home}/classes\">\nshould of course read:\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n", "attachment_id": null, "bug_id": 4917, "id": 7994, "time": "2001-11-16T06:25:22Z", "creator": "Brian.Ewins@btinternet.com", "creation_time": "2001-11-16T06:25:22Z", "is_private": false}, {"count": 2, "tags": [], "creator": "craig.mcclanahan@sun.com", "attachment_id": null, "id": 8724, "time": "2001-12-09T17:37:48Z", "bug_id": 4917, "creation_time": "2001-12-09T17:37:48Z", "is_private": false, "text": "Committed the relevant updates on both the 4.0 and HEAD branches.  Thanks!\n"}]
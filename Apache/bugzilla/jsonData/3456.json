[{"count": 0, "tags": [], "creator": "paul_evenblij@nl.compuware.com", "attachment_id": null, "text": "In the SVG generator, multiple transformations specified in matrix notation are \nnot always concatenated when they should be. This can lead to boundlessly \ngrowing transform strings in the resulting SVG.\n\nREPRO:\n\nIf the following function is called on SVGGraphics2D, 3 <rect> elements are \ncreated in the SVG tree, with each transformation adding one more matrix() \nelement to the transform attribute: the first <rect> has 1, the second 2 etc.\n\nvoid paint(Graphics2D g2d) {\n\n    AffineTransform at = AffineTransform.getRotateInstance(Math.PI/8);    \n    at.translate(20,-10);        \n    g2d.transform(at);\n    \n    g2d.setColor(Color.red);\n    g2d.fillRect(50,50, 120, 90);\n    \n    at.translate(60,-20);\n    g2d.transform(at);\n    \n    g2d.setColor(Color.blue);\n    g2d.fillRect(50,50, 120, 90);\n    \n    at.translate(60,-20);\n    g2d.transform(at);\n    \n    g2d.setColor(Color.green);\n    g2d.fillRect(50,50, 120, 90);\n    \n}\n\nANALYSIS:\n\nIn ext.awt.g2d.TransformStackElement, code for concatenating transforms does \nnot include a case for matrix notation. This can simply be added.\n\nPATCH:\n\nrevision 1.1\n--- TransformStackElement.java.orig     Wed Mar 14 02:36:09 2001\n+++ TransformStackElement.java  Wed Sep  5 16:43:34 2001\n@@ -124,11 +124,27 @@\n                 transformParameters[0] *= stackElement.transformParameters[0];\n                 transformParameters[1] *= stackElement.transformParameters[1];\n                 break;\n+            case TransformType.TRANSFORM_GENERAL:\n+                transformParameters = matrixMultiply(\n+                                            transformParameters,\n+                                            stackElement.transformParameters);\n+                break;\n             default:\n                 canConcatenate = false;\n             }\n         }\n \n         return canConcatenate;\n+    }\n+    \n+    /**\n+     *  Multiplies two 2x3 matrices of double precision values\n+     */\n+    private double[] matrixMultiply(double[] matrix1, double[] matrix2) {\n+        double[] product = new double[6];\n+        AffineTransform transform1 = new AffineTransform(matrix1);\n+        transform1.concatenate(new AffineTransform(matrix2));\n+        transform1.getMatrix(product);\n+        return product;\n     }\n }", "id": 5153, "time": "2001-09-06T05:12:02Z", "bug_id": 3456, "creation_time": "2001-09-06T05:12:02Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 3456, "text": "Patch applied. See IdentityTest.java test in regsvggen.", "id": 6497, "time": "2001-10-09T04:44:04Z", "creator": "vincent.hardy@sun.com", "creation_time": "2001-10-09T04:44:04Z", "tags": [], "is_private": false}]
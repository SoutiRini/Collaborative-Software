[{"count": 0, "tags": [], "bug_id": 44744, "attachment_id": null, "text": "PDFGraphics2D.drawString(AttributedCharacterIterator it, float x, float y) throws NullPointerException:\n\nException in thread \"main\" java.lang.NullPointerException\n\tat org.apache.fop.svg.PDFGraphics2D.drawString(PDFGraphics2D.java:1559)\n\tat org.apache.xmlgraphics.java2d.AbstractGraphics2D.drawString(AbstractGraphics2D.java:652)\n\tat com.yegor.fop.TestPDFGraphics.main(TestPDFGraphics.java:35)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\nA failing test is attached. \n\nIt looks like drawString(AttributedCharacterIterator it, float x, float y) is not   finished. The variable fontState which results in NPE is assigned to null and never initialized. \n\nIf possible, I'd like to have it fixed in FOP 0.95. I would be happy to upload a patch but my knowledge of PDF is not enough for that :). Please suggest how it can be fixed.\n\nShouldn't this method be re-written so that drawString(String str, float x, float y) is called for each individual text run in the AttributedString? If so,    how can I measure the length of a text run and advance the x co-ordinate?  \n\nRegards,\nYegor", "id": 115284, "time": "2008-04-03T02:18:14Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-03T02:18:14Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44744, "attachment_id": 21775, "is_private": false, "id": 115285, "time": "2008-04-03T02:20:12Z", "creator": "yegor@dinom.ru", "creation_time": "2008-04-03T02:20:12Z", "text": "Created attachment 21775\nfailing test"}, {"count": 2, "tags": [], "bug_id": 44744, "is_private": false, "text": "(In reply to comment #0)\n<snip /> \n\nLooking at it closer, the possibility of the NPE is immediately signaled by my IDE when I open the file in question.\n\n> Shouldn't this method be re-written so that drawString(String str, float x,\n> float y) is called for each individual text run in the AttributedString?\n\nNot sure, but this could actually turn out to be suboptimal, since the former method may contain code that should only be called once. The initialization of the fontState falls in that category.\n\nI'm not really an expert on this part of the FOP-code, but have you tried copy-pasting the first few lines of the drawString(String...) variant, where the fontState is initialized?\n", "id": 115295, "time": "2008-04-03T09:33:05Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-03T09:33:05Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 44744, "attachment_id": null, "is_private": false, "id": 115317, "time": "2008-04-04T05:42:09Z", "creator": "jeremias@apache.org", "creation_time": "2008-04-04T05:42:09Z", "text": "I've disabled the method which makes PDFGraphics2D use the fallback implementation from AbstractGraphics2D (which uses the TextLayout approach). But I consider this to be suboptimal, just a temporary solution (whatever \"temporary\" means in our project).\n\nhttp://svn.apache.org/viewvc?rev=644697&view=rev\n\nIn the end, drawString(String, float, float) should rather call drawString(AttributedCharacterIterator, float, float) than the other way around. Mapping the more complex method to a number of calls to the simpler method is not the most efficient method.\n\nPDFTextPainter may provide some inspiration for an optimized implementation. It already contains some code to paint an AttributedCharacterIterator, even if that one is highly Batik-specific. So I'm leaving this bug open as a reminder."}, {"count": 4, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "is_private": false, "id": 157360, "time": "2012-04-07T01:41:53Z", "bug_id": 44744, "creation_time": "2012-04-07T01:41:53Z", "text": "resetting P2 open bugs to P3 pending further review"}]
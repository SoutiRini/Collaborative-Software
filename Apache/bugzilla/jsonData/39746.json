[{"count": 0, "attachment_id": null, "bug_id": 39746, "text": "Hello.\n\nWe used Apache 2.0.54 as a reverse proxy for an internet webmail access with the\nfollowing rewrite rule:\n\nAllowEncodedSlashes On\nRewriteEngine on\nRewriteRule \n  /(.*)/MessagePart/(.*)/(.*)/(.*)-H.txt               \n  http://127.0.0.1:8100/$1/MessagePart/$2\\%2F$3/$4-H.txt [P]\n\nIt is essential for the mailserver to get the %2F character instead of an /.\nOtherwise the request results in an \"404 not found error\". The ruleset worked\nwell until we upgraded to 2.0.58. Suddenly the rewrite produced another URL\nstring. What before was an %2F now results in an %252F. \n\nWe could track down that problem to the following patch that came with version\n2.0.55: http://svn.apache.org/viewvc?view=rev&revision=227435\n\nObviously the old (but for us correct) url translation worked in three steps:\nstep 1: mod_rewrite: .../... -> ...%2F...\nstep 2: mod_proxy: ...%2F... -> ...%252F...\nstep 3: mod_proxy: ...%252F... -> ...%2F...\n\nWith the patch step 3 is now obsolete and we have no possibility to encode an /\ncharacter into an %2F because mod_proxy will always replace any % charachter\nwith the %25 chars. \n\nIs this patch meant to be this way. If yes what other way will there be to\ntransform a single / in the calling URL to an proxied %2F.\n\nBest regards.\n\nMarkus Stockhausen", "id": 89868, "time": "2006-06-07T11:39:04Z", "creator": "markus.stockhausen@collogia.de", "creation_time": "2006-06-07T11:39:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "pieter.vanmeerbeek@able.be", "attachment_id": null, "is_private": false, "id": 91078, "time": "2006-07-10T22:29:03Z", "bug_id": 39746, "creation_time": "2006-07-10T22:29:03Z", "text": "Hi,\n\nI've seen similar behavior when upgrading from 2.0.53 to 2.2.2.\nI'm using mod_rewrite, i.e. first apply the unescape map, followed by an \nescape map ( in other words reescape incorrect escaped urls).\n\nSince the upgrade an % gets escaped to %25.\nSo I suppose a bug is introduced between 2.0.53 and 2.2.2.\n\nkind regards,\nPieter\n\n"}, {"count": 2, "tags": [], "text": "We hit the same bug, is there any workaround?", "attachment_id": null, "id": 107815, "creation_time": "2007-09-07T01:58:40Z", "time": "2007-09-07T01:58:40Z", "creator": "alex@nibbles.it", "bug_id": 39746, "is_private": false}, {"count": 3, "tags": [], "bug_id": 39746, "text": "Does AllowEncodedSlashes solve your issues?", "id": 107816, "time": "2007-09-07T02:00:53Z", "creator": "wrowe@apache.org", "creation_time": "2007-09-07T02:00:53Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "alex@nibbles.it", "text": "No, because I've a problem with the encoding of the % character, using\nmod_rewrite (not mod_proxy), but I'll try to better understand if I'm doing\nsomething wrong", "id": 107818, "time": "2007-09-07T03:09:42Z", "bug_id": 39746, "creation_time": "2007-09-07T03:09:42Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 39746, "attachment_id": null, "id": 107825, "time": "2007-09-07T10:22:19Z", "creator": "markus.stockhausen@collogia.de", "creation_time": "2007-09-07T10:22:19Z", "is_private": false, "text": "Nice to see that there comes a little bit of movement into this issue. \n\nWe tried several things to get araound this bug but AllowEncodedSlashes will \nnot solve the problem. As I wrote in my first post the failure occurs in \nmod_proxy. The mod_rewrite rule works perfectly - it translates the / \ncharacters into a %2F. If mod_proxy forwards this request afterwards it must \ndefinitly preserve the input url. As far as I understood the behaviour of \nmod_proxy it translates a % char into a %25 because it does not know that the \noriginal sequence is a %2F that should never be separated. So at last we have a \n%252F. This was never a problem at all as long as we had the third step that \nfixed the sequence back to %2F. \n\nBut the apache fix 227435 will always eleminate step 3 if we have a reverse \nproxy. I guess there was a wise intention to build this fix but exactly for our \nszenario it will not work at all. So my colleagues are alwas forced to turn \nback the patch whenever they need a new apache version.\n\nBest regards.\n\nMarkus\n"}, {"count": 6, "tags": [], "text": "From my point of view reverting the patch would open a security hole similar to\nCVE-2007-1860 (see http://tomcat.apache.org/security-jk.html and\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1860). So it is needed\nthat  the proxy code encodes the URL again before passing it to the backend to\navoid unexpected double decodings.", "is_private": false, "id": 107836, "creator": "rpluem@apache.org", "time": "2007-09-07T14:10:13Z", "bug_id": 39746, "creation_time": "2007-09-07T14:10:13Z", "attachment_id": null}, {"count": 7, "text": "If you expect to get a security hole when reverting the patch then you have to \nredesign the encoding/decondig process of mod_proxy. When you define a double \ndecoding as an error, I can only define an encoding from %2F to %252F as an \nerror. So it will be better when you investigate the encoding behaviour of \nmod_proxy so that an apache switch (maybe AllowEncodedSlashes) will allow the \nmodule to read over %2F or just any special sequences. \n\nAnother solution may be a mod_rewrite rule that will fill in escape characters \nbefore any char that you don't want mod_proxy to change. mod_proxy could \nafterwards eleminate the escape chars leaving the char behind untouched. \n\nBest regards.\n\nMarkus", "bug_id": 39746, "attachment_id": null, "id": 107845, "time": "2007-09-08T02:42:16Z", "creator": "markus.stockhausen@collogia.de", "creation_time": "2007-09-08T02:42:16Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 39746, "text": "I just tested: the patch in Comment #27 of PR#34602 fixes this problem.  I'm now\nreviewing that patch, with a view to whether it's suitable for committing to\n/trunk/ as a permanent fix.\n\nAnyone else watching either of these bugs: you could help by trying the patch\nyourselves and reporting back.\n\n*** This bug has been marked as a duplicate of 34602 ***", "count": 8, "id": 107848, "time": "2007-09-08T04:37:10Z", "creator": "nick@webthing.com", "creation_time": "2007-09-08T04:37:10Z", "is_private": false}, {"count": 9, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "is_private": false, "id": 107885, "time": "2007-09-08T17:57:08Z", "bug_id": 39746, "creation_time": "2007-09-08T17:57:08Z", "text": "*** Bug 41614 has been marked as a duplicate of this bug. ***"}]
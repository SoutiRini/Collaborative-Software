[{"count": 0, "tags": [], "bug_id": 31218, "attachment_id": null, "id": 63529, "time": "2004-09-14T13:47:26Z", "creator": "dwebb@hurff-webb.com", "creation_time": "2004-09-14T13:47:26Z", "is_private": false, "text": "I am using the manifest attribute of the ejbjar and war tasks to include my own \nMANIFEST.MF file in the packaging of my application.  I have a lot of external \njar references that are listed in the manifest file so the singe Class-Path: \nentry in the MANIFEST.MF file is approximately 500 characters long.\n\nThe MANIFEST.MF file that becomes part of my war or jar package gets wrapped \nafter every 70 characters.  This is not acceptable to the Java container \nreading the MANIFEST file to setup the classloader for my application.\n\nThe desireable behavior is for the Ant task to copy the manifest file exactly \nas it appears in the source file and not to wrap text at all.\n\nPlease contact me for any further assistance.\n\nThanks!"}, {"count": 1, "tags": [], "bug_id": 31218, "text": "If a wrapped manifest really is not acceptable to your container then,\nunfortunately, you need a new container. Ant implements the Java Jar file\nspecification - see\n\nhttp://java.sun.com/j2se/1.4.2/docs/guide/jar/jar.html\n\nPlease refer specifically to the Notes section, where you will find:\n\n# Line length:\n\nNo line may be longer than 72 bytes (not characters), in its UTF8-encoded form.\nIf a value would make the initial line longer than this, it should be continued\non extra lines (each starting with a single SPACE). \n\nWe often get bug reports like this and in most cases it turns out that the\nmanifest is NOT the problem. I suggest you look into other possible causes of\nyour problems.\n\nIn fact, I had a quick look at the Manifest reading code in the JDK 1.4 src.zip\nand I think it will throw an exception if a manifest line exceeds 512 bytes", "id": 63530, "time": "2004-09-14T14:30:53Z", "creator": "conor@apache.org", "creation_time": "2004-09-14T14:30:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 31218, "text": "Thanks for the reference to the specs.  I understand how it works now.  I did \nnotice one other thing that the ejbjar task correctly errors when a line in the \nmanifest file is > 512 characters, but the war task does not.  That is one of \nthe things that threw me off.  If you would like me to open a bug for that \nissue I can.  Thanks again.", "id": 63553, "time": "2004-09-14T23:46:54Z", "creator": "dwebb@hurff-webb.com", "creation_time": "2004-09-14T23:46:54Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 31218, "text": "The ejbjar and war tasks use different approaches to managing the manifest. This\nis for historical reasons - the war/jar task, being part of the Ant core needed\nto work with JDK 1.1, whereas ejbjar, being optional, could use the Manifest\nhandling classes from JDK 1.2+\n\nIn any case, the 512 byte limit is not part of the Jar spec - it's just the\narbitrary implementation limit of the JDK's Manifest class. The Ant Manifest\nclass has no such limitation and will correctly handle input lines of any length\nand format them into 72 byte lines.", "count": 3, "id": 63567, "time": "2004-09-15T08:39:32Z", "creator": "conor@apache.org", "creation_time": "2004-09-15T08:39:32Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "conor@apache.org", "is_private": false, "id": 63646, "time": "2004-09-15T23:00:47Z", "bug_id": 31218, "creation_time": "2004-09-15T23:00:47Z", "tags": [], "text": "*** Bug 31251 has been marked as a duplicate of this bug. ***"}]
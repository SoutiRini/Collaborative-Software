[{"count": 0, "tags": [], "creator": "chris@christopherschultz.net", "text": "StandardWrapper.allocate includes the following code:\n\n            // Load and initialize our instance if necessary\n            if (instance == null) {\n                synchronized (this) {\n                    if (instance == null) {\n                        try {\n                            if (log.isDebugEnabled())\n                                log.debug(\"Allocating non-STM instance\");\n\n                            instance = loadServlet();\n                        } catch (ServletException e) {\n                            throw e;\n                        } catch (Throwable e) {\n                            throw new ServletException\n                                (sm.getString(\"standardWrapper.allocate\"), e);\n                        }\n                    }\n                }\n            }\n\nThe behavior of the null check before the synchronized block is unspecified, and\ncan fail.\n\nThe additional check should be removed leaving only the check within the\nsynchronized block:\n\n            // Load and initialize our instance if necessary\n            synchronized (this) {\n                if (instance == null) {\n                    try {\n                        if (log.isDebugEnabled())\n                            log.debug(\"Allocating non-STM instance\");\n\n                        instance = loadServlet();\n                    } catch (ServletException e) {\n                        throw e;\n                    } catch (Throwable e) {\n                        throw new ServletException\n                            (sm.getString(\"standardWrapper.allocate\"), e);\n                    }\n                }\n            }", "id": 99803, "time": "2007-02-26T09:27:22Z", "bug_id": 41706, "creation_time": "2007-02-26T09:27:22Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 99809, "time": "2007-02-26T10:23:11Z", "bug_id": 41706, "creation_time": "2007-02-26T10:23:11Z", "is_private": false, "text": "Thanks. This is obviously not going to be addressed, however."}, {"count": 2, "tags": [], "bug_id": 41706, "attachment_id": null, "is_private": false, "id": 99813, "time": "2007-02-26T11:56:21Z", "creator": "chris@christopherschultz.net", "creation_time": "2007-02-26T11:56:21Z", "text": "Any particular reason not to address this?\n\nI realize that the Tomcat devs are very sensitive about performance issues, but\nin this case (actually, all cases) the use of DCL doesn't guarantee correct\noperation. For instance, \"instance\" could be non-null but also not initialized.\n\nPerhaps nobody ever sees this in the wild.\n\nI haven't had an actual problem, but noticed the use of the DCL anti-pattern\nwhile reading the source for other reasons.\n"}, {"count": 3, "tags": [], "bug_id": 41706, "attachment_id": null, "id": 99816, "time": "2007-02-26T12:20:02Z", "creator": "chris@christopherschultz.net", "creation_time": "2007-02-26T12:20:02Z", "is_private": false, "text": "Oh, wait. I'm sorry.\n\nI think that since this piece of code calls a method to instantiate and\ninitialize the \"instance\" member, it turns out that this is actually NOT a bug.\n\nYou can even avoid the synchronized block, since the loadServlet method itself\nis synchronized, and uses only local variables.\n\nMy recommendation would be to document the code to mention DCL and why it's\nstill safe to do in this case, remove the synchronization within the allocate()\nmethod, or both.\n\nThis code will be functionally the same as the existing code:\n            // Load and initialize our instance if necessary\n            if (instance == null) {\n                try {\n                    if (log.isDebugEnabled())\n                        log.debug(\"Allocating non-STM instance\");\n\n                    instance = loadServlet();\n                } catch (ServletException e) {\n                    throw e;\n                } catch (Throwable e) {\n                    throw new ServletException\n                        (sm.getString(\"standardWrapper.allocate\"), e);\n                }\n            }\n"}, {"count": 4, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 99838, "time": "2007-02-27T00:48:27Z", "bug_id": 41706, "creation_time": "2007-02-27T00:48:27Z", "text": "(In reply to comment #2)\n> Any particular reason not to address this?\n\nThe reason is that it is extremely unlikely there will ever be a problem, and\nOTOH the lock would be pretty heavily contested (so high cost, with no gain).\nFor example, all requests for JSPs would sync on that single lock, simply to\nensure that no request - right after the server was initialized - ever used a\nsecond instance of the servlet (as far as I can tell)."}]
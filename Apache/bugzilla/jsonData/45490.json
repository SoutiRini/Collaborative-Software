[{"count": 0, "tags": [], "creator": "ths-fop@cm4all.com", "attachment_id": null, "text": "There are a few lines of code in method\npublic Source org.apache.fop.apps.FOURIResolver.resolve(String href, String base), which inhibit inclusion of fonts from a JAR file.\n\nIf we have a JAR-File /path_to_jar/file.jar in filesystem, and within this JAR the font metrics exists in the JAR entry\n/path_within_jar/fonts/ttfnewsgothic.xml, then a valid URL to this entry is:\n\n  jar:file:/path_to_jar/file.jar!/path_within_jar/fonts/ttfnewsgothic.xml\n\nIf you use this URL, the method FOURIResolver.resolve(String href, String base)\nis called with the two arguments\nhref:   jar:file:/path_to_jar/file.jar!/path_within_jar/fonts/ttfnewsgothic.xml\nbase: jar:file:/path_to_jar/file.jar!/path_within_jar/\n\nThe problem is, that lines 194-196 remove \"jar:\" from href, and we run into\nthe problem, that in line 208 the constructor new URL(URL basURL, String href)\nis called with a href still containing a protocol (file:), which is different\nfrom the protocol of the baseURL (jar:), so\nabsoluteURL = new URL(baseURL, href) sets absoluteURL to\nfile:/path_to_file/file.jar!/path_within_jar/fonts/ttfnewsgothic.xml.\n\nThis URL doesn't work, cause it's missing the proper protocol specification (jar:).\n\nI have to admit, that I don't understand, what lines 197-203 should do (Ok, we prepend a slash to the url, if there is a colon and a slash in the url, and the\ncolon is places before the slash, but why?), so I'm not sure that I can give a proper solution for that problem.\n\nBut if it's not needed to remove the scheme from the url, if scheme isn't \n\"file:\" (cause only for this scheme, the slash is prepended), this diff whould\nhelp:\n\n195c236\n<                     if (href.startsWith(scheme)) {\n---\n>                     if (href.startsWith(scheme) && \"file:\".equals(scheme)) {\n197d237\n<                         if (\"file:\".equals(scheme)) {\n206d245\n<                     }\n\n\n(I already tried a posting on fop-dev, but actually I didn't get a proper contact person, so I try it this way.)", "id": 119057, "time": "2008-07-28T02:12:36Z", "bug_id": 45490, "creation_time": "2008-07-28T02:12:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45490, "attachment_id": null, "is_private": false, "id": 119082, "time": "2008-07-28T11:06:32Z", "creator": "adelmelle@apache.org", "creation_time": "2008-07-28T11:06:32Z", "text": "(In reply to comment #0)\n\nJust to make sure: which version of FOP are you using? The line numbers don't seem to match FOP Trunk, so it could help if we knew whether the issue still exists, and which version of the source files your comments refer to.\n\n<snip /> \n> I have to admit, that I don't understand, what lines 197-203 should do (Ok, we\n> prepend a slash to the url, if there is a colon and a slash in the url, and the\n> colon is places before the slash, but why?), so I'm not sure that I can give a\n> proper solution for that problem.\n\nThe reason: if the URL is a file URL, and the portion after 'file:' contains a colon, and the first slash (if any) appears after that colon, then the leading slash is missing (can happen on Windows, where some java.net.URL implementations return a \"URL\" like 'file:C:\\...', which is obviously invalid)"}, {"count": 2, "tags": [], "bug_id": 45490, "attachment_id": null, "text": "> Just to make sure: which version of FOP are you using? The line numbers don't\n> seem to match FOP Trunk, so it could help if we knew whether the issue still\n> exists, and which version of the source files your comments refer to.\n\nIndeed giving line numbers isn't useful without specifiying version :-)!\n\nI already tested this issue with 0.95b, with the sdame result. The line numbers correspond to release 0.94, but I looked at TRUNK version, and the relevant source isn't changed there.\n\nIn the actual trunk (rev. 679326), the line numbers are 235-237, the code block seems to be unchanged since rev. 551874.\n\n> The reason: if the URL is a file URL, and the portion after 'file:' contains a\n> colon, and the first slash (if any) appears after that colon, then the leading\n> slash is missing (can happen on Windows, where some java.net.URL\n> implementations return a \"URL\" like 'file:C:\\...', which is obviously invalid)\n\nOoops, sometimes I forget this \"other\" operating system :-), now I understand the code. And I also think that my patch (see comment #0) will fix this issue, cause it only changes the behaviour of URLs with protocol != \"file:\".\n", "id": 119092, "time": "2008-07-29T02:28:51Z", "creator": "ths-fop@cm4all.com", "creation_time": "2008-07-29T02:28:51Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45490, "text": "(In reply to comment #2)\n\nThanks for supplying the additional info.\n\n<snip /> \n> Ooops, sometimes I forget this \"other\" operating system :-), now I understand\n> the code. And I also think that my patch (see comment #0) will fix this issue,\n> cause it only changes the behaviour of URLs with protocol != \"file:\".\n> \n\nSomewhat of a nit, I think the suggested fix is, strictly speaking, not sufficient. The related portion of code is, as the preceding extensive comment explains, more or less a forced construction to retain backward compatibility with older parsers. The example URL 'file:c:\\...' is not invalid according to RFC1630, provided the base URL is 'file:/'.\n\nStrictly speaking, I think the behavior should apply to other protocols as well, so simply bypassing the entire check for non-file URLs would not be the right choice. Even if the code-block does not contain any code yet for other protocols, I'm not sure we may simply exclude that.\n \nI suggest changing:\n\nif (href.startsWith(scheme)) {\n  href = href.substring(...\n\nby\n\nif (href.startsWith(scheme)) {\n  String tmp = href.substring(...\n\nThen use the tmp variable further down when prepending the missing slash.\n\nThat way, if the protocol is something else than 'file:', at least the original href does not get corrupted.\n\n", "id": 119319, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2008-08-03T04:07:46Z", "time": "2008-08-03T04:07:46Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 45490, "attachment_id": null, "text": "Hi Andreas,\n\nI'm no sure if I understand the difference between your suggestion and mine.\n\nSo I decided to paste the full source and the suggested changes (as far\nas I did understand them) here!\n\nHere's the original implementation:\n\n if (href.startsWith(scheme)) {\n   href = href.substring(scheme.length());\n   if (\"file:\".equals(scheme)) {\n     int colonPos = href.indexOf(':');\n     int slashPos = href.indexOf('/');\n     if (slashPos >= 0 && colonPos >= && colonPos < slashPos) {\n       href = \"/\" + href; // Absolute file URL doesn't have a leading slash\n     }\n   }\n }\n\nIf I understand your comment #3, the result of the scheme removal should \ngo to a temporary var. The check for colon and slash index will be made\non this variable, right? And then, depending on the last condition, a\nleading slash will be added, ok?\n\n if (href.startsWith(scheme)) {\n   String tmp = href.substring(scheme.length());\n   if (\"file:\".equals(scheme)) {\n     int colonPos = tmp.indexOf(':');\n     int slashPos = tmp.indexOf('/');\n     if (slashPos >= 0 && colonPos >= && colonPos < slashPos) {\n       href = \"/\" + tmp; // Absolute file URL doesn't have a leading slash\n     }\n   }\n }\n\nBut if I'm right here, I see no difference between my suggestion and yours?\n\nThat's mine:\n\n if (href.startsWith(scheme) && \"file:\".equals(scheme)) {\n   int colonPos = tmp.indexOf(':');\n   int slashPos = tmp.indexOf('/');\n   if (slashPos >= 0 && colonPos >= && colonPos < slashPos) {\n     href = \"/\" + tmp; // Absolute file URL doesn't have a leading slash\n   }\n }\n\nHelp me out of my ignorance :-)!", "id": 119369, "time": "2008-08-04T11:17:29Z", "creator": "ths-fop@cm4all.com", "creation_time": "2008-08-04T11:17:29Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 45490, "attachment_id": null, "text": "(In reply to comment #4)\n> \n> I'm no sure if I understand the difference between your suggestion and mine.\n\nThe end-result is definitely the same, right now, since the workaround for older parsers actually only does something for the file-protocol, while I think the same holds for other types of URLs as well... It's just that 'file:' is probably the most commonly used.\n\nThat's what I meant by \"Even if the code-block does not contain any code yet for other protocols...\".\n\nYour suggestion would simply bypass the whole block, while mine would only avoid the assignment/modification of the original 'href' variable.\nIf it turns out that in the future, we need a similar workaround for a different protocol, then your change would have to be undone, and mine would probably have to be chosen as an alternative.\n\nBut in the end, you're right that the result is identical. Not sure what other devs prefer. If nobody gives an explicit opinion in due time (a couple of days), I'll stick my wet finger in the air, and see which one comes out. ;-)\n\nAgain, thanks for the feedback. If only all bug-reports contained a pointer to the related lines in the source-files, that would make our lives a lot easier... :-)", "id": 119370, "time": "2008-08-04T11:28:09Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-04T11:28:09Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 45490, "attachment_id": null, "is_private": false, "id": 119373, "time": "2008-08-04T12:50:17Z", "creator": "ths-fop@cm4all.com", "creation_time": "2008-08-04T12:50:17Z", "text": "\nOk, now I got it!\n\nThe question, if one will prefer an implementation, which is either open for future add-on or is the simplest possible implementation for the actual demand is rather a religious question, so I don't think it's useful to discuss it here :-).\n\nAnyway I thank you and look foreward to a fix of the observed issue: It will give us a nice, new opportunity for our layouting engine. \n\nKind regards,\nThomas"}, {"count": 7, "tags": [], "bug_id": 45490, "is_private": false, "id": 119658, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2008-08-10T05:38:19Z", "time": "2008-08-10T05:38:19Z", "text": "*** Bug 43571 has been marked as a duplicate of this bug. ***"}, {"count": 8, "tags": [], "bug_id": 45490, "is_private": false, "text": "\nFixed in FOP Trunk. see: http://svn.apache.org/viewvc?rev=684491&view=rev\n\nThanks for reporting, and suggesting the fix!", "id": 119659, "time": "2008-08-10T05:39:06Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-10T05:39:06Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 45490, "is_private": false, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155797, "time": "2012-04-01T06:41:23Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:41:23Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "I'm simply calling cat.debug(\" Read data...\") on my program, and that crashes\nthe Java virtual machine. This occurs on a Solaris platform (but I'm unable to \ntest on other platforms, as my code uses JNI that has not been ported to other \nplatforms yet).\n\nI have configured multiple appenders, and the error occurs on MyFileAppender.\nMy log4j configuration file is : \n\n# My Log4j configuration file\n# A. Apvrille - April 24th 2001\nlog4j.rootCategory=DEBUG,MyDebugAppender\nlog4j.category.worm=DEBUG,MyConsoleAppender\nlog4j.category.worm.gui=DEBUG,MyFileAppender\nlog4j.category.worm.tools=DEBUG,MyFileAppender\n\n# MyDebugAppender is a RollingFileAppender, max. size 5MB, using atmost\n# one file at a time.\nlog4j.appender.MyDebugAppender=org.apache.log4j.FileAppender\n#log4j.appender.MyDebugAppender.MaxFileSize=5MB\n#log4j.appender.MyDebugAppender.MaxBackupIndex=1\nlog4j.appender.MyDebugAppender.File=debug_log.txt\nlog4j.appender.MyDebugAppender.Append=false\nlog4j.appender.MyDebugAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MyDebugAppender.layout.ConversionPattern=%-4r %-5p (%30.30l) - %\nm%n\n\n# MyFileAppender is a RollingFileAppender, max. size 5MB, using atmost\n# one file at a time.\n#log4j.appender.MyFileAppender=org.apache.log4j.RollingFileAppender\nlog4j.appender.MyFileAppender=org.apache.log4j.FileAppender\n#log4j.appender.MyFileAppender.MaxFileSize=5MB\n#log4j.appender.MyFileAppender.MaxBackupIndex=1\nlog4j.appender.MyFileAppender.File=info_log.txt\nlog4j.appender.MyFileAppender.Append=false\nlog4j.appender.MyFileAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MyFileAppender.layout.ConversionPattern=%-4r [%-5p] - %m%n\nlog4j.appender.MyFileAppender.Threshold=INFO\n\n# Just print to Console really important things\n# Output will be sent to System.out, layout will be Time Thread Category & \nClass, and only logs >= WARN will be sent.\nlog4j.appender.MyConsoleAppender=org.apache.log4j.ConsoleAppender\nlog4j.appender.MyConsoleAppender.Target=System.out\nlog4j.appender.MyConsoleAppender.layout=org.apache.log4j.TTCCLayout\nlog4j.appender.MyConsoleAppender.Threshold=DEBUG\n\n# Print only message WARNING or above in cryptix.asn1 package \nlog4j.category.cryptix.asn1=ERROR\n\n---\nI have debugged the Java program down in the log4j code, and here's the method \nstack just before it crashed the JVM.\nIt actually crashes on line :\nClass dummy = Class.forName(\"com.ibm.uvm.tools.DebugSupport\");\n[LociationInfo.java, line 58] as log4j is checking if we're running visual age.\nBizarre, isn't it ?\nFrom that point I cannot even step into the method: it crashes.\n\nBreakpoint hit: thread=\"main\", org.apache.log4j.spi.LocationInfo.<init>(), \nline=60, bci=4\n\nmain[1] where\n  [1] org.apache.log4j.spi.LocationInfo.<init> (LocationInfo.java:60)\n  [2] org.apache.log4j.spi.LoggingEvent.getLocationInformation \n(LoggingEvent.java:133)\n  [3] org.apache.log4j.helpers.PatternParser$LocationPatternConverter.convert \n(PatternParser.java:445)\n  [4] org.apache.log4j.helpers.PatternConverter.format \n(PatternConverter.java:56)\n  [5] org.apache.log4j.PatternLayout.format (PatternLayout.java:547)\n  [6] org.apache.log4j.WriterAppender.subAppend (WriterAppender.java:295)\n  [7] org.apache.log4j.WriterAppender.append (WriterAppender.java:157)\n  [8] org.apache.log4j.AppenderSkeleton.doAppend (AppenderSkeleton.java:251)\n  [9] org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders \n(AppenderAttachableImpl.java:57)\n  [10] org.apache.log4j.Category.callAppenders (Category.java:257)\n  [11] org.apache.log4j.Category.forcedLog (Category.java:447)\n  [12] org.apache.log4j.Category.debug (Category.java:314)\n  [13] worm.io.test.TapeDeviceTest.testGo (TapeDeviceTest.java:294)\n  [14] java.lang.reflect.Method.invoke (native method)\n  [15] junit.framework.TestCase.runTest (TestCase.java:156)\n  [16] junit.framework.TestCase.runBare (TestCase.java:130)\n  [17] junit.framework.TestResult$1.protect (TestResult.java:106)\n  [18] junit.framework.TestResult.runProtected (TestResult.java:124)\n  [19] junit.framework.TestResult.run (TestResult.java:109)\n  [20] junit.framework.TestCase.run (TestCase.java:121)\n  [21] junit.framework.TestSuite.runTest (TestSuite.java:160)\n  [22] junit.framework.TestSuite.run (TestSuite.java:155)\n  [23] junit.framework.TestSuite.runTest (TestSuite.java:160)\n  [24] junit.framework.TestSuite.run (TestSuite.java:155)\n  [25] junit.textui.TestRunner.doRun (TestRunner.java:74)\n  [26] junit.textui.TestRunner.start (TestRunner.java:235)\n  [27] junit.textui.TestRunner.main (TestRunner.java:108)\nmain[1] dump this\n this = instance of org.apache.log4j.spi.LocationInfo(id=336) {\n    lineNumber: null\n    fileName: null\n    className: null\n    methodName: null\n    fullInfo: null\n    sw: instance of java.io.StringWriter(id=337)\n    pw: instance of java.io.PrintWriter(id=338)\n    NA: \"?\"\n    serialVersionUID: -1325822038990805636\n    inVisualAge: false\n}\nmain[1] step\nmain[1] \nUnexpected Signal : 11 occurred at PC=0xfe629134\nFunction name=JVM_NewInstanceFromConstructor\nLibrary=/usr/j2se/jre/lib/sparc/client/libjvm.so", "attachment_id": null, "id": 9784, "creator": "axellec@netcourrier.com", "time": "2002-01-22T10:56:48Z", "bug_id": 5956, "creation_time": "2002-01-22T10:56:48Z", "is_private": false}, {"count": 1, "tags": [], "text": "\nApparently the JDK is choking within the static initializer of LocationInfo:\n\n60  static {\n61    try {\n62      Class dummy = Class.forName(\"com.ibm.uvm.tools.DebugSupport\");\n63      inVisualAge = true;\n64      LogLog.debug(\"Detected IBM VisualAge environment.\");\n65    } catch(Throwable e) {\n66      // nothing to do\n67    }\n68  }\n\nAs far as I know, it is allowed to throw exceptions as long as they are caught.\nWhich JDK is this? Does the problem persists?", "is_private": false, "id": 15138, "creator": "ceki@apache.org", "time": "2002-04-30T15:01:53Z", "bug_id": 5956, "creation_time": "2002-04-30T15:01:53Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 5956, "attachment_id": null, "is_private": false, "id": 15317, "time": "2002-05-02T08:19:11Z", "creator": "axellec@netcourrier.com", "creation_time": "2002-05-02T08:19:11Z", "text": "Hi,\nActually, I've had to move on and change my code so I do not encounter the bug \nany longer. However, the bug is still there (actually, I suppose it's more a \nJava machine bug - I've posted there, but no answer).\n\nI was using JDK 1.3.1. I tried with the JDK 1.4 and it was still core dumping.\n\nThanks,\nAxelle."}, {"count": 3, "tags": [], "text": "\nWhat were the modifications? Do we agree that it is a JVM bug and not a logj \nproblem per se? Thanks, Ceki", "attachment_id": null, "id": 15319, "creator": "ceki@apache.org", "time": "2002-05-02T09:39:19Z", "bug_id": 5956, "creation_time": "2002-05-02T09:39:19Z", "is_private": false}, {"count": 4, "tags": [], "creator": "axellec@netcourrier.com", "is_private": false, "text": "1) I completely re-wrote the Java native library I was using, and changed the \ntest cases, and I do not have this error any longer. I did not really fix any \nbug, just used it differently. The bug is probably still there, but I couldn't \nwait for it to be fixed. [I know this is not nice programming, but I really \ncouldn't wait ;-)].\n\n2) Yes, I think this is a JVM bug, and not a log4j bug. Although, as I have not \nbeen able to spot the bug exactly, I thought it was best I pointed it out to \nyou, so that if ever somebody else enters the same bug, or you find some reason \nto this, this bug submission might be of some help.\n\nThanks for your help,\nAxelle.\n\n", "id": 15342, "time": "2002-05-02T16:07:00Z", "bug_id": 5956, "creation_time": "2002-05-02T16:07:00Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "We have the exact back trace using 1.4.2_02.b03 on Linux RedHat ES 2.x.  We \nnoticed that we start getting this due to a memory leak.  Running with -\nverbose:gc, we see many FULL GCs occuring, leading up to, and immediately \nbefore the crash.\n\nWe're going to look for our mem leak in our code and see if that gets rid of \nthis issue.  Just an fyi on some clues we've found.", "attachment_id": null, "id": 63531, "creator": "senordb@yahoo.com", "time": "2004-09-14T16:02:44Z", "bug_id": 5956, "creation_time": "2004-09-14T16:02:44Z", "is_private": false}, {"count": 6, "tags": [], "text": "\nSince a few days, when running on JDK 1.4 or later, log4j uses a different technique \nfor extracting location information. This technique is about twice as fast, and much \nmore memory efficient. Thus, if you are using the latest code from CVS, the problem \nmay no longer exist.", "is_private": false, "id": 63532, "creator": "ceki@apache.org", "time": "2004-09-14T16:08:32Z", "bug_id": 5956, "creation_time": "2004-09-14T16:08:32Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 46309, "attachment_id": null, "id": 122912, "creation_time": "2008-11-28T08:12:35Z", "time": "2008-11-28T08:12:35Z", "creator": "michel.rvb@gmail.com", "text": "The only way to express a path in any \"include\" tag is to use the so-called pattern expressions. While regexp() had been providing a complete and consistant pattern grammar for decades, the Ant pattern system uses a completely broken grammar :\n\n - only \"*\", \"**\" and \"?\" are allowed in the pattern grammar for variable elements.\n\nNo way to express a character range or word list for example such as [a-z], or {blah,foo}. No way to express a repetition number, etc. No way to express that a particular character is to be repeated zero or N times (* or ? means ANY character).\n\nThe documentation proudly affirms that \"you have a powerful way to select just the files you want.\". This is ridiculous, in my opinion correct only at *ant*'s sight, 1 mm up the ground level.", "is_private": false}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 122913, "time": "2008-11-28T08:28:57Z", "bug_id": 46309, "creation_time": "2008-11-28T08:28:57Z", "text": "in a bad mood today, aren't we?  I hope you feel better now.\n\nAnt's patterns are sufficient for a wide range of use cases and you pretty rarely need the full power of regular expressions.  If you need the power, writing a custom selector isn't too hard.  In fact Ant's trunk has enhanced the <filename> and <name> selectors to either use an Ant pattern or a regular expression.\n\n\n\n*** This bug has been marked as a duplicate of bug 45284 ***"}]
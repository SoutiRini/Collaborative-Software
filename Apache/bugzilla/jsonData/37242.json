[{"count": 0, "tags": [], "creator": "jizu@osa.sunysb.edu", "attachment_id": null, "text": "I am using Tomcat 5.5.12, JDK-1_5_0_05 on XP professional. I copied javascript\nfile ftiens4.js under webapps/myPractice, then typed URL\nhttp://localhost:8080/myPractice/ftiens4.js\n\nI was expecting the original javascript code without any change. To my suprise,\nI saw following code appeared near the end of the screen.\n\n      brHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nETag: W/\"33879-1130270899484\"\nLast-Modified: Tue, 25 Oct 2005 20:08:19 GMT\nContent-Type: text/javascript\nContent-Length: 33879\nDate: Tue, 25 Oct 2005 20:35:18 GMT\n\nI am attaching the source code of ftiens4.js below. Hope you can repeat the\nstrange phenomena.\n\n\n//source code of ftiens4.js\n\n//**************************************************************** \n// Keep this copyright notice: \n// This copy of the script is the property of the owner of the \n// particular web site you were visiting.\n// Do not download the script's files from there.\n// For a free download and full instructions go to: \n// http://www.treeview.net\n//**************************************************************** \n\n \n// Log of changes: \n//\n//      08 Jun 04 - Very small change to one error message\n//      21 Mar 04 - Support for folder.addChildren allows for much bigger trees\n//      12 May 03 - Support for Safari Beta 3\n//      01 Mar 03 - VERSION 4.3 - Support for checkboxes\n//      21 Feb 03 - Added support for Opera 7\n//      22 Sep 02 - Added maySelect member for node-by-node control\n//                  of selection and highlight\n//      21 Sep 02 - Cookie values are now separated by cookieCutter\n//      12 Sep 02 - VERSION 4.2 - Can highlight Selected Nodes and \n//                  can preserve state through external (DB) IDs\n//      29 Aug 02 - Fine tune 'supportDeferral' for IE4 and IE Mac\n//      25 Aug 02 - Fixes: STARTALLOPEN, and multi-page frameless\n//      09 Aug 02 - Fix repeated folder on Mozilla 1.x\n//      31 Jul 02 - VERSION 4.1 - Dramatic speed increase for trees \n//      with hundreds or thousands of nodes; changes to the control\n//      flags of the gLnk function\n//      18 Jul 02 - Changes in pre-load images function\n//      13 Jun 02 - Add ICONPATH var to allow for gif subdir\n//      20 Apr 02 - Improve support for frame-less layout\n//      07 Apr 02 - Minor changes to support server-side dynamic feeding\n//                  (example: FavoritesManagerASP)\n\n \n// Definition of class Folder \n// ***************************************************************** \nfunction Folder(folderDescription, hreference) //constructor \n{ \n  //constant data \n  this.desc = folderDescription; \n  this.hreference = hreference;\n  this.id = -1;\n  this.navObj = 0;\n  this.iconImg = 0; \n  this.nodeImg = 0;\n  this.isLastNode = 0;\n  this.iconSrc = ICONPATH + \"ftv2folderopen.gif\";\n  this.iconSrcClosed = ICONPATH + \"ftv2folderclosed.gif\";\n  this.children = new Array;\n  this.nChildren = 0;\n  this.level = 0;\n  this.leftSideCoded = \"\";\n  this.isLastNode=false;\n  this.parentObj = null;\n  this.maySelect=true;\n  this.prependHTML = \"\"\n \n  //dynamic data \n  this.isOpen = false;\n  this.isLastOpenedFolder = false;\n  this.isRendered = 0;\n \n  //methods \n  this.initialize = initializeFolder;\n  this.setState = setStateFolder; \n  this.addChild = addChild; \n  this.addChildren = addChildren;\n  this.createIndex = createEntryIndex; \n  this.escondeBlock = escondeBlock;\n  this.esconde = escondeFolder; \n  this.folderMstr = folderMstr; \n  this.renderOb = drawFolder; \n  this.totalHeight = totalHeight; \n  this.subEntries = folderSubEntries; \n  this.linkHTML = linkFolderHTML;\n  this.blockStartHTML = blockStartHTML;\n  this.blockEndHTML = blockEndHTML;\n  this.nodeImageSrc = nodeImageSrc;\n  this.iconImageSrc = iconImageSrc;\n  this.getID = getID;\n  this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders;\n} \n \nfunction initializeFolder(level, lastNode, leftSide) \n{ \n  var j=0; \n  var i=0;       \n  nc = this.nChildren; \n   \n  this.createIndex(); \n  this.level = level;\n  this.leftSideCoded = leftSide;\n\n  if (browserVersion == 0 || STARTALLOPEN==1)\n  {\n    this.isOpen=true;\n  }\n\n  if (level>0)\n    if (lastNode) //the last child in the children array \n\t\tleftSide = leftSide + \"0\";\n\telse\n\t\tleftSide = leftSide + \"1\";\n\n  this.isLastNode = lastNode;\n \n  if (nc > 0) \n  { \n    level = level + 1; \n    for (i=0 ; i < this.nChildren; i++)  \n    {\n      if (typeof this.children[i].initialize == 'undefined') //document node was\nspecified using the addChildren function\n      {\n        if (typeof this.children[i][0] == 'undefined' || typeof this.children[i]\n== 'string')\n        {\n          this.children[i] = [\"item incorrectly defined\", \"\"];\n        }\n\n        //Basic initialization of the Item object\n        //These members or methods are needed even before the Item is rendered\n        this.children[i].initialize=initializeItem;\n        this.children[i].createIndex=createEntryIndex;\n        if (typeof this.children[i].maySelect == 'undefined')\n          this.children[i].maySelect=true\n        this.children[i].forceOpeningOfAncestorFolders =\nforceOpeningOfAncestorFolders;\n      }\n      if (i == this.nChildren-1) \n        this.children[i].initialize(level, 1, leftSide);\n      else \n        this.children[i].initialize(level, 0, leftSide);\n    } \n  } \n} \n \nfunction drawFolder(insertAtObj) \n{ \n  var nodeName = \"\";\n  var auxEv = \"\";\n  var docW = \"\";\n  var i=0;\n\n  finalizeCreationOfChildDocs(this);\n\n  var leftSide = leftSideHTML(this.leftSideCoded);\n\n  if (browserVersion > 0) \n    auxEv = \"<a href='javascript:clickOnNode(\\\"\"+this.getID()+\"\\\")'>\" ;\n  else \n    auxEv = \"<a>\" ;\n\n  nodeName = this.nodeImageSrc();\n \n  if (this.level>0) \n    if (this.isLastNode) //the last child in the children array \n\t    leftSide = leftSide + \"<td valign=top>\" + auxEv + \"<img name='nodeIcon\" +\nthis.id + \"' id='nodeIcon\" + this.id + \"' src='\" + nodeName + \"' width=16\nheight=22 border=0></a></td>\";\n    else \n      leftSide = leftSide + \"<td valign=top background=\" + ICONPATH +\n\"ftv2vertline.gif>\" + auxEv + \"<img name='nodeIcon\" + this.id + \"' id='nodeIcon\"\n+ this.id + \"' src='\" + nodeName + \"' width=16 height=22 border=0></a></td>\";\n\n  this.isRendered = 1;\n\n  if (browserVersion == 2) { \n    if (!doc.yPos) \n      doc.yPos=20 ;\n  } \n\n  docW = this.blockStartHTML(\"folder\");\n\n  docW = docW + \"<tr>\" + leftSide + \"<td valign=top>\";\n  if (USEICONS)\n  {\n    docW = docW + this.linkHTML(false) ;\n    docW = docW + \"<img id='folderIcon\" + this.id + \"' name='folderIcon\" +\nthis.id + \"' src='\" + this.iconImageSrc() + \"' border=0></a>\";\n  }\n  else\n  {\n\t  if (this.prependHTML == \"\")\n        docW = docW + \"<img src=\" + ICONPATH + \"ftv2blank.gif height=2 width=2>\";\n  }\n  if (WRAPTEXT)\n\t  docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle width=100%>\";\n  else\n\t  docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle nowrap width=100%>\";\n  if (USETEXTLINKS) \n  { \n    docW = docW + this.linkHTML(true) ;\n    docW = docW + this.desc + \"</a>\";\n  } \n  else \n    docW = docW + this.desc;\n  docW = docW + \"</td>\";\n\n  docW = docW + this.blockEndHTML();\n\n  if (insertAtObj == null)\n  {\n\t  if (supportsDeferral) {\n\t\t  doc.write(\"<div id=domRoot></div>\"); //transition between regular flow HTML,\nand node-insert DOM DHTML\n\t\t  insertAtObj = getElById(\"domRoot\");\n\t\t  insertAtObj.insertAdjacentHTML(\"beforeEnd\", docW);\n\t  }\n\t  else\n\t\t  doc.write(docW);\n  }\n  else\n  {\n      insertAtObj.insertAdjacentHTML(\"afterEnd\", docW);\n  }\n \n  if (browserVersion == 2) \n  { \n    this.navObj = doc.layers[\"folder\"+this.id] ;\n    if (USEICONS)\n      this.iconImg = this.navObj.document.images[\"folderIcon\"+this.id] ;\n    this.nodeImg = this.navObj.document.images[\"nodeIcon\"+this.id] ;\n    doc.yPos=doc.yPos+this.navObj.clip.height ;\n  } \n  else if (browserVersion != 0)\n  { \n    this.navObj = getElById(\"folder\"+this.id);\n    if (USEICONS)\n      this.iconImg = getElById(\"folderIcon\"+this.id) ;\n    this.nodeImg = getElById(\"nodeIcon\"+this.id);\n  } \n} \n \nfunction setStateFolder(isOpen) \n{ \n  var subEntries ;\n  var totalHeight ;\n  var fIt = 0 ;\n  var i=0 ;\n  var currentOpen;\n \n  if (isOpen == this.isOpen) \n    return ;\n \n  if (browserVersion == 2)  \n  { \n    totalHeight = 0 ;\n    for (i=0; i < this.nChildren; i++) \n      totalHeight = totalHeight + this.children[i].navObj.clip.height ;\n      subEntries = this.subEntries() ;\n    if (this.isOpen) \n      totalHeight = 0 - totalHeight ;\n    for (fIt = this.id + subEntries + 1; fIt < nEntries; fIt++) \n      indexOfEntries[fIt].navObj.moveBy(0, totalHeight) ;\n  }  \n  this.isOpen = isOpen;\n\n  if (this.getID()!=foldersTree.getID() && PRESERVESTATE && !this.isOpen) //closing\n  {\n     currentOpen = GetCookie(\"clickedFolder\")\n     if (currentOpen != null) {\n         currentOpen = currentOpen.replace(this.getID()+cookieCutter, \"\");\n         SetCookie(\"clickedFolder\", currentOpen);\n     }\n  }\n\t\n  if (!this.isOpen && this.isLastOpenedfolder)\n  {\n\t\tlastOpenedFolder = null;\n\t\tthis.isLastOpenedfolder = false;\n  }\n  propagateChangesInState(this) ;\n} \n \nfunction propagateChangesInState(folder) \n{   \n  var i=0 ;\n\n  //Change icon\n  if (folder.nChildren > 0 && folder.level>0)  //otherwise the one given at\nrender stays\n    folder.nodeImg.src = folder.nodeImageSrc();\n\n  //Change node\n  if (USEICONS)\n    folder.iconImg.src = folder.iconImageSrc();\n\n  //Propagate changes\n  for (i=folder.nChildren-1; i>=0; i--) {\n    if (folder.isOpen) \n      folder.children[i].folderMstr(folder.navObj);\n    else \n  \t  folder.children[i].esconde() ;\n  }\n} \n \nfunction escondeFolder() \n{ \n  this.escondeBlock();\n   \n  this.setState(0) ;\n} \n \nfunction linkFolderHTML(isTextLink) \n{ \n  var docW = \"\";\n\n  if (this.hreference) \n  { \n\tif (USEFRAMES)\n\t  docW = docW + \"<a href='\" + this.hreference + \"' TARGET=\\\"basefrm\\\" \";\n\telse\n\t  docW = docW + \"<a href='\" + this.hreference + \"' TARGET=_top \";\n        \n    if (isTextLink) {\n        docW += \"id=\\\"itemTextLink\"+this.id+\"\\\" \";\n    }\n\n    if (browserVersion > 0) \n      docW = docW + \"onClick='javascript:clickOnFolder(\\\"\"+this.getID()+\"\\\")'\";\n\n    docW = docW + \">\";\n  } \n  else \n    docW = docW + \"<a>\" ;\n\n  return docW;\n} \n \nfunction addChild(childNode) \n{ \n  this.children[this.nChildren] = childNode ;\n  childNode.parentObj = this;\n  this.nChildren++ ;\n  return childNode ;\n} \n\n//The list can contain either a Folder object or a sub list with the arguments\nfor Item \nfunction addChildren(listOfChildren) \n{ \n  this.children = listOfChildren ;\n  this.nChildren = listOfChildren.length;\n  for (i=0; i<this.nChildren; i++);\n    this.children[i].parentObj = this;\n} \n\nfunction folderSubEntries() \n{ \n  var i = 0 ;\n  var se = this.nChildren ;\n \n  for (i=0; i < this.nChildren; i++){ \n    if (this.children[i].children) //is a folder \n      se = se + this.children[i].subEntries() ;\n  } \n \n  return se ;\n} \n\nfunction nodeImageSrc() {\n  var srcStr = \"\";\n\n  if (this.isLastNode) //the last child in the children array \n  { \n    if (this.nChildren == 0)\n      srcStr = ICONPATH + \"ftv2lastnode.gif\";\n    else\n      if (this.isOpen)\n        srcStr = ICONPATH + \"ftv2mlastnode.gif\"  ;\n      else\n        srcStr = ICONPATH + \"ftv2plastnode.gif\"  ;\n  } \n  else \n  { \n    if (this.nChildren == 0)\n      srcStr = ICONPATH + \"ftv2node.gif\";\n    else\n      if (this.isOpen)\n        srcStr = ICONPATH + \"ftv2mnode.gif\";\n      else\n        srcStr = ICONPATH + \"ftv2pnode.gif\";\n  }   \n  return srcStr;\n}\n\nfunction iconImageSrc() {\n  if (this.isOpen)\n    return(this.iconSrc);\n  else\n    return(this.iconSrcClosed);\n} \n \n// Definition of class Item (a document or link inside a Folder) \n// ************************************************************* \n \nfunction Item(itemDescription) // Constructor \n{ \n  // constant data \n  this.desc = itemDescription ;\n\n  this.level = 0;\n  this.isLastNode = false;\n  this.leftSideCoded = \"\";\n  this.parentObj = null;\n\n  this.maySelect=true;\n\n  this.initialize = initializeItem;\n  this.createIndex = createEntryIndex;\n  this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders;\n\n  finalizeCreationOfItem(this);\n} \n\n//Assignments that can be delayed when the item is created with folder.addChildren\n//The assignments that cannot be delayed are done in addChildren and in\ninitializeFolder\n//Additionaly, some assignments are also done in finalizeCreationOfChildDocs itself\nfunction finalizeCreationOfItem(itemArray)\n{\n  itemArray.navObj = 0; //initialized in render() \n  itemArray.iconImg = 0; //initialized in render() \n  itemArray.iconSrc = ICONPATH + \"ftv2doc.gif\" ;\n  itemArray.isRendered = 0;\n  itemArray.nChildren = 0;\n  itemArray.prependHTML = \"\";\n \n  // methods \n  itemArray.escondeBlock = escondeBlock;\n  itemArray.esconde = escondeBlock;\n  itemArray.folderMstr = folderMstr ;\n  itemArray.renderOb = drawItem ;\n  itemArray.totalHeight = totalHeight ;\n  itemArray.blockStartHTML = blockStartHTML;\n  itemArray.blockEndHTML = blockEndHTML;\n  itemArray.getID = getID;\n}\n\nfunction initializeItem(level, lastNode, leftSide) \n{  \n  this.createIndex() ;\n  this.level = level;\n  this.leftSideCoded = leftSide;\n  this.isLastNode = lastNode;\n} \n \nfunction drawItem(insertAtObj) \n{ \n  var leftSide = leftSideHTML(this.leftSideCoded);\n  var docW = \"\";\n\n  var fullLink = \"href=\\\"\"+this.link+\"\\\" target=\\\"\"+this.target+\"\\\"\nonClick=\\\"clickOnLink('\"+this.getID()+\"\\',\n'\"+this.link+\"','\"+this.target+\"');return false;\\\"\";\n  this.isRendered = 1;\n\n  if (this.level>0) \n    if (this.isLastNode) //the last 'brother' in the children array \n    { \n      leftSide = leftSide + \"<td valign=top><img src='\" + ICONPATH +\n\"ftv2lastnode.gif' width=16 height=22></td>\";\n    } \n    else \n    { \n      leftSide = leftSide + \"<td valign=top background=\" + ICONPATH +\n\"ftv2vertline.gif><img src='\" + ICONPATH + \"ftv2node.gif' width=16 height=22></td>\";\n    } \n\n  docW = docW + this.blockStartHTML(\"item\");\n\n  docW = docW + \"<tr>\" + leftSide + \"<td valign=top>\";\n  if (USEICONS)\n      docW = docW + \"<a \" + fullLink  + \" id=\\\"itemIconLink\"+this.id+\"\\\">\" +\n\"<img id='itemIcon\"+this.id+\"' \" + \"src='\"+this.iconSrc+\"' border=0>\" + \"</a>\";\n  else\n\t  if (this.prependHTML == \"\")\n        docW = docW + \"<img src=\" + ICONPATH + \"ftv2blank.gif height=2 width=3>\";\n\n  if (WRAPTEXT)\n    docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle width=100%>\";\n  else\n    docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle nowrap width=100%>\";\n\n  if (USETEXTLINKS) \n    docW = docW + \"<a \" + fullLink + \" id=\\\"itemTextLink\"+this.id+\"\\\">\" +\nthis.desc + \"</a>\";\n  else \n    docW = docW + this.desc;\n\n  docW = docW + \"</td>\";\n\n  docW = docW + this.blockEndHTML();\n \n  if (insertAtObj == null)\n  {\n\t  doc.write(docW);\n  }\n  else\n  {\n      insertAtObj.insertAdjacentHTML(\"afterEnd\", docW);\n  }\n\n  if (browserVersion == 2) { \n    this.navObj = doc.layers[\"item\"+this.id] ;\n    if (USEICONS)\n      this.iconImg = this.navObj.document.images[\"itemIcon\"+this.id] ;\n    doc.yPos=doc.yPos+this.navObj.clip.height ;\n  } else if (browserVersion != 0) { \n    this.navObj = getElById(\"item\"+this.id);\n    if (USEICONS)\n      this.iconImg = getElById(\"itemIcon\"+this.id);\n  } \n} \n \n \n// Methods common to both objects (pseudo-inheritance) \n// ******************************************************** \n \nfunction forceOpeningOfAncestorFolders() {\n  if (this.parentObj == null || this.parentObj.isOpen)\n    return\n  else {\n    this.parentObj.forceOpeningOfAncestorFolders()\n    clickOnNodeObj(this.parentObj)\n  }\n}\n\nfunction escondeBlock() \n{ \n  if (browserVersion == 1 || browserVersion == 3) { \n    if (this.navObj.style.display == \"none\") \n      return \n    this.navObj.style.display = \"none\" \n  } else { \n    if (this.navObj.visibility == \"hidden\") \n      return \n    this.navObj.visibility = \"hidden\" \n  }     \n} \n \nfunction folderMstr(domObj) \n{ \n  if (browserVersion == 1 || browserVersion == 3) { \n    if (t==-1)\n      return\n    var str = new String(doc.links[t])\n    if (str.slice(14,16) != \"em\")\n      return\n  }\n\n  if (!this.isRendered)\n     this.renderOb(domObj)\n  else\n    if (browserVersion == 1 || browserVersion == 3) \n      this.navObj.style.display = \"block\" \n    else \n      this.navObj.visibility = \"show\" \n} \n\nfunction blockStartHTML(idprefix) {\n  var idParam = \"id='\" + idprefix + this.id + \"'\"\n  var docW = \"\"\n\n  if (browserVersion == 2) \n    docW = \"<layer \"+ idParam + \" top=\" + doc.yPos + \" visibility=show>\"\n  else if (browserVersion != 0)\n    docW = \"<div \" + idParam + \" style='display:block; position:block;'>\"\n     \n  docW = docW + \"<table border=0 cellspacing=0 cellpadding=0 width=100% >\"\n\n  return docW\n}\n\nfunction blockEndHTML() {\n  var docW = \"\"\n\n  docW = \"</table>\"\n   \n  if (browserVersion == 2) \n    docW = docW + \"</layer>\"\n  else if (browserVersion != 0)\n    docW = docW + \"</div>\"\n\n  return docW\n}\n \nfunction createEntryIndex() \n{ \n  this.id = nEntries \n  indexOfEntries[nEntries] = this \n  nEntries++ \n} \n \n// total height of subEntries open \nfunction totalHeight() //used with browserVersion == 2 \n{ \n  var h = this.navObj.clip.height \n  var i = 0 \n   \n  if (this.isOpen) //is a folder and _is_ open \n    for (i=0 ; i < this.nChildren; i++)  \n      h = h + this.children[i].totalHeight() \n \n  return h \n} \n\n\nfunction leftSideHTML(leftSideCoded) {\n\tvar i;\n\tvar retStr = \"\";\n\n\tfor (i=0; i<leftSideCoded.length; i++)\n\t{\n\t\tif (leftSideCoded.charAt(i) == \"1\")\n\t\t{\n\t\t\tretStr = retStr + \"<td valign=top background=\" + ICONPATH +\n\"ftv2vertline.gif><img src='\" + ICONPATH + \"ftv2vertline.gif' width=16\nheight=22></td>\"\n\t\t}\n\t\tif (leftSideCoded.charAt(i) == \"0\")\n\t\t{\n\t\t\tretStr = retStr + \"<td valign=top><img src='\" + ICONPATH + \"ftv2blank.gif'\nwidth=16 height=22></td>\"\n\t\t}\n\t}\n\treturn retStr\n}\n\nfunction getID()\n{\n  //define a .xID in all nodes (folders and items) if you want to PERVESTATE that\n  //work when the tree changes. The value eXternal value must be unique for each\n  //node and must node change when other nodes are added or removed\n  //The value may be numeric or string, but cannot have the same char used in\ncookieCutter\n  if (typeof this.xID != \"undefined\") \n    return this.xID\n  else\n    return this.id\n}\n\n \n// Events \n// ********************************************************* \n \nfunction clickOnFolder(folderId) \n{ \n  var clicked = findObj(folderId)\n\n  if (typeof clicked=='undefined' || clicked==null)\n  {\n    alert(\"Treeview was not able to find the node object corresponding to ID=\" +\nfolderId + \". If the configuration file sets a.xID values, it must set them for\nALL nodes, including the foldersTree root.\")\n    return;\n  }\n\n  if (!clicked.isOpen) {\n    clickOnNodeObj(clicked) \n  }\n\n  if (lastOpenedFolder != null && lastOpenedFolder != folderId)\n    clickOnNode(lastOpenedFolder); //sets lastOpenedFolder to null\n\n  if (clicked.nChildren==0) {\n    lastOpenedFolder = folderId;\n    clicked.isLastOpenedfolder = true\n  }\n\n  if (isLinked(clicked.hreference)) {\n      highlightObjLink(clicked);\n  }\n} \n \nfunction clickOnNode(folderId) \n{ \n  fOb = findObj(folderId);\n  if (typeof fOb=='undefined' || fOb==null)\n  {\n    alert(\"Treeview was not able to find the node object corresponding to ID=\" +\nfolderId + \". If the configuration file sets a.xID, it must set foldersTree.xID\nas well.\")\n    return;\n  }\n\n  clickOnNodeObj(fOb);\n}\n\nfunction clickOnNodeObj(folderObj) \n{ \n  var state = 0 \n  var currentOpen\n \n  state = folderObj.isOpen \n  folderObj.setState(!state) //open<->close  \n\n  if (folderObj.id!=foldersTree.id && PRESERVESTATE)\n  {\n    currentOpen = GetCookie(\"clickedFolder\")\n    if (currentOpen == null)\n      currentOpen = \"\"\n\n    if (!folderObj.isOpen) //closing\n    {\n      currentOpen = currentOpen.replace(folderObj.getID()+cookieCutter, \"\")\n      SetCookie(\"clickedFolder\", currentOpen)\n    }\n    else\n      SetCookie(\"clickedFolder\", currentOpen+folderObj.getID()+cookieCutter)\n  }\n}\n\nfunction clickOnLink(clickedId, target, windowName) {\n    highlightObjLink(findObj(clickedId));\n    if (isLinked(target)) {\n        window.open(target,windowName);\n    }\n}\n\nfunction ld  ()\n{\n\treturn document.links.length-1\n}\n \n\n// Auxiliary Functions \n// *******************\n\nfunction finalizeCreationOfChildDocs(folderObj) {\n  for(i=0; i < folderObj.nChildren; i++)  {\n    child = folderObj.children[i]\n    if (typeof child[0] != 'undefined')\n    {\n      // Amazingly, arrays can have members, so   a = [\"a\", \"b\"]; a.desc=\"asdas\"\n  works\n      // If a doc was inserted as an array, we can transform it into an itemObj\nby adding \n      // the missing members and functions\n      child.desc = child[0] \n      setItemLink(child, GLOBALTARGET, child[1])   \n      finalizeCreationOfItem(child)\n    }\n  }\n}\n\nfunction findObj(id)\n{\n  var i=0;\n  var nodeObj;\n\n  if (typeof foldersTree.xID != \"undefined\") {\n    nodeObj = indexOfEntries[i];\n    for(i=0;i<nEntries&&indexOfEntries[i].xID!=id;i++) //may need optimization\n      ;\n    id = i\n  }\n  if (id >= nEntries)\n    return null; //example: node removed in DB\n  else\n    return indexOfEntries[id];\n}\n\nfunction isLinked(hrefText) {\n    var result = true;\n    result = (result && hrefText !=null);\n    result = (result && hrefText != '');\n    result = (result && hrefText.indexOf('undefined') < 0);\n    result = (result && hrefText.indexOf('parent.op') < 0);\n    return result;\n}\n\n// Do highlighting by changing background and foreg. colors of folder or doc text\nfunction highlightObjLink(nodeObj) {\n  if (!HIGHLIGHT || nodeObj==null || nodeObj.maySelect==false) {//node deleted\nin DB \n    return;\n  }\n\n  if (browserVersion == 1 || browserVersion == 3) {\n    var clickedDOMObj = getElById('itemTextLink'+nodeObj.id);\n    if (clickedDOMObj != null) {\n        if (lastClicked != null) {\n            var prevClickedDOMObj = getElById('itemTextLink'+lastClicked.id);\n            prevClickedDOMObj.style.color=lastClickedColor;\n            prevClickedDOMObj.style.backgroundColor=lastClickedBgColor;\n        }\n        \n        lastClickedColor    = clickedDOMObj.style.color;\n        lastClickedBgColor  = clickedDOMObj.style.backgroundColor;\n        clickedDOMObj.style.color=HIGHLIGHT_COLOR;\n        clickedDOMObj.style.backgroundColor=HIGHLIGHT_BG;\n    }\n  }\n  lastClicked = nodeObj;\n  if (PRESERVESTATE)\n    SetCookie('highlightedTreeviewLink', nodeObj.getID());\n}\n\nfunction insFld(parentFolder, childFolder) \n{ \n  return parentFolder.addChild(childFolder) \n} \n \nfunction insDoc(parentFolder, document) \n{ \n  return parentFolder.addChild(document) \n} \n\nfunction gFld(description, hreference) \n{ \n  folder = new Folder(description, hreference);\n  return folder;\n} \n \nfunction gLnk(optionFlags, description, linkData) \n{ \n  if (optionFlags>=0) { //is numeric (old style) or empty (error)\n    //Target changed from numeric to string in Aug 2002, and support for numeric\nstyle was entirely dropped in Mar 2004\n    alert(\"Change your Treeview configuration file to use the new style of\ntarget argument in gLnk\");\n    return;\n  }\n\n  newItem = new Item(description);\n  setItemLink(newItem, optionFlags, linkData);\n  return newItem;\n} \n\nfunction setItemLink(item, optionFlags, linkData) {\n  var targetFlag = \"\";\n  var target = \"\";\n  var protocolFlag = \"\";\n  var protocol = \"\";\n\n  targetFlag = optionFlags.charAt(0)\n  if (targetFlag==\"B\")\n    target = \"_blank\"\n  if (targetFlag==\"P\")\n    target = \"_parent\"\n  if (targetFlag==\"R\")\n    target = \"basefrm\"\n  if (targetFlag==\"S\")\n    target = \"_self\"\n  if (targetFlag==\"T\")\n    target = \"_top\"\n\n  if (optionFlags.length > 1) {\n    protocolFlag = optionFlags.charAt(1)\n    if (protocolFlag==\"h\")\n      protocol = \"http://\"\n    if (protocolFlag==\"s\")\n      protocol = \"https://\"\n    if (protocolFlag==\"f\")\n      protocol = \"ftp://\"\n    if (protocolFlag==\"m\")\n      protocol = \"mailto:\"\n  }\n\n  item.link = protocol+linkData;    \n  item.target = target\n}\n\n//Function created  for backwards compatibility purposes\n//Function contents voided in March 2004\nfunction oldGLnk(target, description, linkData)\n{\n}\n \nfunction preLoadIcons() {\n\tvar auxImg\n\tauxImg = new Image();\n\tauxImg.src = ICONPATH + \"ftv2vertline.gif\";\n\tauxImg.src = ICONPATH + \"ftv2mlastnode.gif\";\n\tauxImg.src = ICONPATH + \"ftv2mnode.gif\";\n\tauxImg.src = ICONPATH + \"ftv2plastnode.gif\";\n\tauxImg.src = ICONPATH + \"ftv2pnode.gif\";\n\tauxImg.src = ICONPATH + \"ftv2blank.gif\";\n\tauxImg.src = ICONPATH + \"ftv2lastnode.gif\";\n\tauxImg.src = ICONPATH + \"ftv2node.gif\";\n\tauxImg.src = ICONPATH + \"ftv2folderclosed.gif\";\n\tauxImg.src = ICONPATH + \"ftv2folderopen.gif\";\n\tauxImg.src = ICONPATH + \"ftv2doc.gif\";\n}\n\n//Open some folders for initial layout, if necessary\nfunction setInitialLayout() {\n  if (browserVersion > 0 && !STARTALLOPEN)\n    clickOnNodeObj(foldersTree);\n  \n  if (!STARTALLOPEN && (browserVersion > 0) && PRESERVESTATE)\n\t\tPersistentFolderOpening();\n}\n\n//Used with NS4 and STARTALLOPEN\nfunction renderAllTree(nodeObj, parent) {\n  var i=0;\n  nodeObj.renderOb(parent)\n  if (supportsDeferral)\n    for (i=nodeObj.nChildren-1; i>=0; i--) \n      renderAllTree(nodeObj.children[i], nodeObj.navObj)\n  else\n    for (i=0 ; i < nodeObj.nChildren; i++) \n      renderAllTree(nodeObj.children[i], null)\n}\n\nfunction hideWholeTree(nodeObj, hideThisOne, nodeObjMove) {\n  var i=0;\n  var heightContained=0;\n  var childrenMove=nodeObjMove;\n\n  if (hideThisOne)\n    nodeObj.escondeBlock()\n\n  if (browserVersion == 2)\n    nodeObj.navObj.moveBy(0, 0-nodeObjMove)\n\n  for (i=0 ; i < nodeObj.nChildren; i++) {\n    heightContainedInChild = hideWholeTree(nodeObj.children[i], true, childrenMove)\n    if (browserVersion == 2) {\n      heightContained = heightContained + heightContainedInChild +\nnodeObj.children[i].navObj.clip.height\n      childrenMove = childrenMove + heightContainedInChild\n\t}\n  }\n\n  return heightContained;\n}\n\n \n// Simulating inserAdjacentHTML on NS6\n// Code by thor@jscript.dk\n// ******************************************\n\nif(typeof HTMLElement!=\"undefined\" && !HTMLElement.prototype.insertAdjacentElement){\n\tHTMLElement.prototype.insertAdjacentElement = function (where,parsedNode)\n\t{\n\t\tswitch (where){\n\t\tcase 'beforeBegin':\n\t\t\tthis.parentNode.insertBefore(parsedNode,this)\n\t\t\tbreak;\n\t\tcase 'afterBegin':\n\t\t\tthis.insertBefore(parsedNode,this.firstChild);\n\t\t\tbreak;\n\t\tcase 'beforeEnd':\n\t\t\tthis.appendChild(parsedNode);\n\t\t\tbreak;\n\t\tcase 'afterEnd':\n\t\t\tif (this.nextSibling) \n\t\t\t\tthis.parentNode.insertBefore(parsedNode,this.nextSibling);\n\t\t\telse this.parentNode.appendChild(parsedNode);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tHTMLElement.prototype.insertAdjacentHTML = function(where,htmlStr)\n\t{\n\t\tvar r = this.ownerDocument.createRange();\n\t\tr.setStartBefore(this);\n\t\tvar parsedHTML = r.createContextualFragment(htmlStr);\n\t\tthis.insertAdjacentElement(where,parsedHTML)\n\t}\n}\n\nfunction getElById(idVal) {\n  if (document.getElementById != null)\n    return document.getElementById(idVal)\n  if (document.all != null)\n    return document.all[idVal]\n  \n  alert(\"Problem getting element by id\")\n  return null\n}\n\n\n// Functions for cookies\n// Note: THESE FUNCTIONS ARE OPTIONAL. No cookies are used unless\n// the PRESERVESTATE variable is set to 1 (default 0)\n// The separator currently in use is ^ (chr 94)\n// *********************************************************** \n\nfunction PersistentFolderOpening()\n{\n  var stateInCookie;\n  var fldStr=\"\"\n  var fldArr\n  var fldPos=0\n  var id\n  var nodeObj\n  stateInCookie = GetCookie(\"clickedFolder\");\n  SetCookie('clickedFolder', \"\") //at the end of function it will be back, minus\nnull cases\n\n  if(stateInCookie!=null)\n  {\n    fldArr = stateInCookie.split(cookieCutter)\n    for (fldPos=0; fldPos<fldArr.length; fldPos++)\n    {\n      fldStr=fldArr[fldPos]\n      if (fldStr != \"\") {\n        nodeObj = findObj(fldStr)\n        if (nodeObj!=null) //may have been deleted\n          if (nodeObj.setState) {\n            nodeObj.forceOpeningOfAncestorFolders()\n            clickOnNodeObj(nodeObj);\n          }\n          else\n            alert(\"Internal id is not pointing to a folder anymore.\\nConsider\ngiving an ID to the tree and external IDs to the individual nodes.\")\n      }\n    }\n  }\n}\n\nfunction storeAllNodesInClickCookie(treeNodeObj)\n{\n  var currentOpen\n  var i = 0\n\n  if (typeof treeNodeObj.setState != \"undefined\") //is folder\n  {\n    currentOpen = GetCookie(\"clickedFolder\")\n    if (currentOpen == null)\n      currentOpen = \"\"\n\n    if (treeNodeObj.getID() != foldersTree.getID())\n      SetCookie(\"clickedFolder\", currentOpen+treeNodeObj.getID()+cookieCutter)\n\n    for (i=0; i < treeNodeObj.nChildren; i++) \n        storeAllNodesInClickCookie(treeNodeObj.children[i])\n  }\n}\n\nfunction CookieBranding(name) {\n  if (typeof foldersTree.treeID != \"undefined\")\n    return name+foldersTree.treeID //needed for multi-tree sites. make sure\ntreeId does not contain cookieCutter\n  else\n    return name\n}\n \nfunction GetCookie(name)\n{  \n  name = CookieBranding(name)\n\n\tvar arg = name + \"=\";  \n\tvar alen = arg.length;  \n\tvar clen = document.cookie.length;  \n\tvar i = 0;  \n\n\twhile (i < clen) {    \n\t\tvar j = i + alen;    \n\t\tif (document.cookie.substring(i, j) == arg)      \n\t\t\treturn getCookieVal (j);    \n\t\ti = document.cookie.indexOf(\" \", i) + 1;    \n\t\tif (i == 0) break;   \n\t}  \n\treturn null;\n}\n\nfunction getCookieVal(offset) {  \n\tvar endstr = document.cookie.indexOf (\";\", offset);  \n\tif (endstr == -1)    \n\tendstr = document.cookie.length;  \n\treturn unescape(document.cookie.substring(offset, endstr));\n}\n\nfunction SetCookie(name, value) \n{  \n\tvar argv = SetCookie.arguments;  \n\tvar argc = SetCookie.arguments.length;  \n\tvar expires = (argc > 2) ? argv[2] : null;  \n\t//var path = (argc > 3) ? argv[3] : null;  \n\tvar domain = (argc > 4) ? argv[4] : null;  \n\tvar secure = (argc > 5) ? argv[5] : false;  \n\tvar path = \"/\"; //allows the tree to remain open across pages with diff names &\npaths\n\n  name = CookieBranding(name)\n\n\tdocument.cookie = name + \"=\" + escape (value) + \n\t((expires == null) ? \"\" : (\"; expires=\" + expires.toGMTString())) + \n\t((path == null) ? \"\" : (\"; path=\" + path)) +  \n\t((domain == null) ? \"\" : (\"; domain=\" + domain)) +    \n\t((secure == true) ? \"; secure\" : \"\");\n}\n\nfunction ExpireCookie (name) \n{  \n\tvar exp = new Date();  \n\texp.setTime (exp.getTime() - 1);  \n\tvar cval = GetCookie (name);  \n  name = CookieBranding(name)\n\tdocument.cookie = name + \"=\" + cval + \"; expires=\" + exp.toGMTString();\n}\n\n\n//To customize the tree, overwrite these variables in the configuration file\n(demoFramesetNode.js, etc.)\nvar USETEXTLINKS = 0;\nvar STARTALLOPEN = 0;\nvar USEFRAMES = 1;\nvar USEICONS = 1;\nvar WRAPTEXT = 0;\nvar PERSERVESTATE = 0; //backward compatibility\nvar PRESERVESTATE = 0;\nvar ICONPATH = '';\nvar HIGHLIGHT = 0;\nvar HIGHLIGHT_COLOR = 'white';\nvar HIGHLIGHT_BG    = 'blue';\nvar BUILDALL = 0;\nvar GLOBALTARGET = \"R\"; // variable only applicable for addChildren uses\n\n\n//Other variables\nvar lastClicked = null;\nvar lastClickedColor;\nvar lastClickedBgColor;\nvar indexOfEntries = new Array \nvar nEntries = 0 \nvar browserVersion = 0 \nvar selectedFolder=0\nvar lastOpenedFolder=null\nvar t=5\nvar doc = document\nvar supportsDeferral = false\nvar cookieCutter = '^' //You can change this if you need to use ^ in your xID or\ntreeID values\n\ndoc.yPos = 0\n\n// Main function\n// ************* \n\n// This function uses an object (navigator) defined in\n// ua.js, imported in the main html page (left frame).\nfunction initializeDocument() \n{ \n  preLoadIcons();\n  switch(navigator.family)\n  {\n    case 'ie4':\n      browserVersion = 1; //Simply means IE > 3.x\n      break;\n    case 'opera':\n      browserVersion = (navigator.version > 6 ? 1 : 0); //opera7 has a good DOM\n      break;\n    case 'nn4':\n      browserVersion = 2; //NS4.x \n      break;\n    case 'gecko':\n      browserVersion = 3; //NS6.x\n      break;\n    case 'safari':\n      browserVersion = 1; //Safari Beta 3 seems to behave like IE in spite of\nbeing based on Konkeror\n      break;\n\tdefault:\n      browserVersion = 0; //other, possibly without DHTML  \n      break;\n  }\n\n  // backward compatibility\n  if (PERSERVESTATE)\n    PRESERVESTATE = 1;\n\n  supportsDeferral = ((navigator.family=='ie4' && navigator.version >= 5 &&\nnavigator.OS != \"mac\") || browserVersion == 3);\n  supportsDeferral = supportsDeferral & (!BUILDALL);\n  if (!USEFRAMES && browserVersion == 2)\n  \tbrowserVersion = 0;\n  eval(String.fromCharCode(116,61,108,100,40,41));\n\n  //If PRESERVESTATE is on, STARTALLOPEN can only be effective the first time\nthe page \n  //loads during the session. For subsequent (re)loads the PRESERVESTATE data\nstored \n  //in cookies takes over the control of the initial expand/collapse\n  if (PRESERVESTATE && GetCookie(\"clickedFolder\") != null)\n    STARTALLOPEN = 0;\n\n  //foldersTree (with the site's data) is created in an external .js\n(demoFramesetNode.js, for example)\n  foldersTree.initialize(0, true, \"\") ;\n  if (supportsDeferral && !STARTALLOPEN) {\n      foldersTree.renderOb(null); //delay construction of nodes\n  }\n\n  else {\n    renderAllTree(foldersTree, null);\n\n    if (PRESERVESTATE && STARTALLOPEN)\n      storeAllNodesInClickCookie(foldersTree);\n\n    //To force the scrollable area to be big enough\n    if (browserVersion == 2) \n      doc.write(\"<layer top=\" + indexOfEntries[nEntries-1].navObj.top +\n\">&nbsp;</layer>\") ;\n\n    if (browserVersion != 0 && !STARTALLOPEN)\n      hideWholeTree(foldersTree, false, 0);\n  }\n\n  setInitialLayout();\n\n  if (PRESERVESTATE && GetCookie('highlightedTreeviewLink')!=null  &&\nGetCookie('highlightedTreeviewLink')!=\"\") {\n    var nodeObj = findObj(GetCookie('highlightedTreeviewLink'));\n    if (nodeObj!=null){\n      nodeObj.forceOpeningOfAncestorFolders();\n      highlightObjLink(nodeObj);\n    }\n    else\n      SetCookie('highlightedTreeviewLink', '');\n  }\n}", "id": 81728, "time": "2005-10-25T22:42:29Z", "bug_id": 37242, "creation_time": "2005-10-25T22:42:29Z", "is_private": false}, {"attachment_id": 16809, "tags": [], "bug_id": 37242, "text": "Created attachment 16809\nthe javascript file causing problem", "count": 1, "id": 81729, "time": "2005-10-25T22:45:54Z", "creator": "jizu@osa.sunysb.edu", "creation_time": "2005-10-25T22:45:54Z", "is_private": false}, {"count": 2, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "is_private": false, "id": 81731, "time": "2005-10-25T23:16:55Z", "bug_id": 37242, "creation_time": "2005-10-25T23:16:55Z", "text": "I suspect it would be more helpful if you could reduce this .js file to the\nminimum size that causes this error to occur with your system.  (i.e., if this\nerror still occurs with only a four-line JSP file, great!  Just send that file\ninstead.)"}, {"count": 3, "tags": [], "creator": "jizu@osa.sunysb.edu", "attachment_id": null, "text": "seems this bug is related to js file size. if reduce the js file size under 9000\nbytes, \"HTTP/1.1 200 OK...\" will disappear.", "id": 81782, "time": "2005-10-26T18:11:55Z", "bug_id": 37242, "creation_time": "2005-10-26T18:11:55Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 37242, "attachment_id": null, "is_private": false, "id": 81783, "time": "2005-10-26T18:21:39Z", "creator": "remm@apache.org", "creation_time": "2005-10-26T18:21:39Z", "text": "This obviously works for me. Please use users@tomcat instead."}]
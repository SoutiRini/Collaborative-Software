[{"count": 0, "tags": [], "bug_id": 54960, "attachment_id": 30278, "id": 167179, "time": "2013-05-13T20:08:41Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-05-13T20:08:41Z", "is_private": false, "text": "Created attachment 30278\ntestplan with MongoDB samplers\n\nHi!\n\nI wrote a very simple test plan. I wanted to measure performance of MongoDB increments:)\n\nI installed mongodb 2.4, and created BSON-document like this:\n\n> db.test.insert( { name: \"zloy@spamer.com\", cnt:0 } )\n> db.test.find();\n{ \"_id\" : ObjectId(\"518d7610f646b39cb7c84fc4\"), \"name\" : \"zloy@spamer.com\", \"cnt\" : 0 }\n\nCheck increments method:\n\n> db.test.update( { '_id':  ObjectId(\"518d7610f646b39cb7c84fc4\")}, { $inc : {cnt: 1}})\n> db.test.find();\n{ \"_id\" : ObjectId(\"518d7610f646b39cb7c84fc4\"), \"name\" : \"zloy@spamer.com\", \"cnt\" : 1 }\n\nThen i created test-plan mongodb-increment.jmx and run test\n\nschizophrenia@tachikoma02:~/Documents/mongodb-incs$ ~/bin/apache-jmeter-r1480854/bin/jmeter-tank -t mongodb-increment.jmx -Jthreads=4 -n\nCreated the tree successfully using mongodb-increment.jmx\nStarting the test @ Tue May 14 00:00:17 MSK 2013 (1368475217679)\nWaiting for possible shutdown message on port 4445\n#0\tThreads: 1/4\tSamples: 1\tLatency: 1\tResp.Time: 81\tErrors: 0\n#1\tThreads: 4/4\tSamples: 307\tLatency: 0\tResp.Time: 6\tErrors: 0\n#2\tThreads: 4/4\tSamples: 376\tLatency: 0\tResp.Time: 10\tErrors: 0\n#3\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 9\tErrors: 0\n#4\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 9\tErrors: 0\n#5\tThreads: 4/4\tSamples: 400\tLatency: 0\tResp.Time: 10\tErrors: 0\n#6\tThreads: 4/4\tSamples: 392\tLatency: 0\tResp.Time: 9\tErrors: 0\n#7\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 10\tErrors: 0\n#8\tThreads: 4/4\tSamples: 399\tLatency: 0\tResp.Time: 10\tErrors: 0\n#9\tThreads: 4/4\tSamples: 393\tLatency: 0\tResp.Time: 10\tErrors: 0\n#10\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 9\tErrors: 0\n#11\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 9\tErrors: 0\n#12\tThreads: 4/4\tSamples: 408\tLatency: 0\tResp.Time: 9\tErrors: 0\n#13\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 10\tErrors: 0\n#14\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 9\tErrors: 0\n#15\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 10\tErrors: 0\n#16\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 10\tErrors: 0\n#17\tThreads: 4/4\tSamples: 396\tLatency: 0\tResp.Time: 10\tErrors: 0\n#18\tThreads: 4/4\tSamples: 408\tLatency: 0\tResp.Time: 9\tErrors: 0\n#19\tThreads: 4/4\tSamples: 408\tLatency: 0\tResp.Time: 9\tErrors: 0\n#20\tThreads: 4/4\tSamples: 420\tLatency: 0\tResp.Time: 9\tErrors: 0\n\nI see throughput about 380rps. And MongoDB have a lock contention on db.\n\ninsert  query update delete getmore command flushes mapped  vsize    res faults  locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time \n    *0     32    384     *0       0   386|0       0   160m   886m    60m      0    .:72.3%          0       0|0     0|1    61k    25k     4   23:22:07 \n    *0     32    372     *0       0   373|0       0   160m   886m    60m      0    .:69.2%          0       0|0     0|1    59k    25k     4   23:22:08 \n    *0     31    384     *0       0   386|0       0   160m   886m    60m      0    .:72.5%          0       0|0     0|1    61k    26k     4   23:22:09 \n    *0     32    384     *0       0   385|0       0   160m   886m    60m      0    .:71.6%          0       0|0     0|1    61k    25k     4   23:22:10 \n    *0     32    384     *0       0   385|0       0   160m   886m    60m      0    .:71.8%          0       0|0     0|1    61k    25k     4   23:22:11 \n    *0     34    407     *0       0   407|0       0   160m   886m    60m      0    .:76.3%          0       0|0     0|1    65k    27k     4   23:22:12 \n    *0     34    397     *0       0   399|0       0   160m   886m    60m      0    .:75.1%          0       0|0     0|1    64k    26k     4   23:22:13 \n    *0     34    408     *0       0   410|0       0   160m   886m    60m      0    .:77.4%          0       0|0     0|1    65k    27k     4   23:22:14 \n    *0     34    409     *0       0   409|0       0   160m   886m    60m      0    .:79.0%          0       0|0     0|0    65k    27k     4   23:22:15 \n    *0     34    407     *0       0   409|0       0   160m   886m    60m      0    .:75.3%          0       0|0     0|1    65k    27k     4   23:22:16\n\nlock db is very high. But throughput is very small for hardware (i5 (2cores + ht) + ssd) and version (2.4.3). Whats the problem? In this table we seen command and query method. \t\nBut in reality, we should not see them. I go to source code and found that:\n\nhttps://github.com/apache/jmeter/blob/trunk/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptRunner.java#L54\n\n>>Object result = db.eval(script);\n\nSorry, but eval-method it's very poor choice for performance testing. DB must parse this js-command, but in reality this does not happen.\n\nOkey, let's write this test without eval method with simple beanshell samplers like this: http://schiz.me/blog/2012/11/03/base64-mongodb-with-beanshell-in-jmeter/\n\nNew testplan is mongodb-increment-beanshell.jmx\n\nschizophrenia@tachikoma02:~/Documents/mongodb-incs$ ~/bin/apache-jmeter-r1480854/bin/jmeter-tank -t mongodb-increment-beanshell.jmx -Jthreads=4 -Jconnections=4 -n\nCreated the tree successfully using mongodb-increment-beanshell.jmx\nStarting the test @ Mon May 13 23:58:50 MSK 2013 (1368475130845)\nWaiting for possible shutdown message on port 4445\n#0\tThreads: 1/4\tSamples: 1\tLatency: 0\tResp.Time: 264\tErrors: 0\n#1\tThreads: 3/4\tSamples: 381\tLatency: 0\tResp.Time: 2\tErrors: 0\n#2\tThreads: 4/4\tSamples: 1339\tLatency: 0\tResp.Time: 2\tErrors: 0\n#3\tThreads: 4/4\tSamples: 1493\tLatency: 0\tResp.Time: 2\tErrors: 0\n#4\tThreads: 4/4\tSamples: 2062\tLatency: 0\tResp.Time: 1\tErrors: 0\n#5\tThreads: 4/4\tSamples: 3104\tLatency: 0\tResp.Time: 1\tErrors: 0\n#6\tThreads: 4/4\tSamples: 7796\tLatency: 0\tResp.Time: 0\tErrors: 0\n#7\tThreads: 4/4\tSamples: 12378\tLatency: 0\tResp.Time: 0\tErrors: 0\n#8\tThreads: 4/4\tSamples: 15405\tLatency: 0\tResp.Time: 0\tErrors: 0\n#9\tThreads: 4/4\tSamples: 22729\tLatency: 0\tResp.Time: 0\tErrors: 0\n#10\tThreads: 4/4\tSamples: 23044\tLatency: 0\tResp.Time: 0\tErrors: 0\n#11\tThreads: 4/4\tSamples: 22872\tLatency: 0\tResp.Time: 0\tErrors: 0\n#12\tThreads: 4/4\tSamples: 22447\tLatency: 0\tResp.Time: 0\tErrors: 0\n#13\tThreads: 4/4\tSamples: 22509\tLatency: 0\tResp.Time: 0\tErrors: 0\n#14\tThreads: 4/4\tSamples: 22839\tLatency: 0\tResp.Time: 0\tErrors: 0\n#15\tThreads: 4/4\tSamples: 23165\tLatency: 0\tResp.Time: 0\tErrors: 0\n#16\tThreads: 4/4\tSamples: 22679\tLatency: 0\tResp.Time: 0\tErrors: 0\n#17\tThreads: 4/4\tSamples: 22851\tLatency: 0\tResp.Time: 0\tErrors: 0\n#18\tThreads: 4/4\tSamples: 22849\tLatency: 0\tResp.Time: 0\tErrors: 0\n#19\tThreads: 4/4\tSamples: 22686\tLatency: 0\tResp.Time: 0\tErrors: 0\n#20\tThreads: 4/4\tSamples: 22295\tLatency: 0\tResp.Time: 0\tErrors: 0\n#21\tThreads: 4/4\tSamples: 18992\tLatency: 0\tResp.Time: 0\tErrors: 0\n\nAnd mongostat:\n\ninsert  query update delete getmore command flushes mapped  vsize    res faults  locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time \n    *0     *0   6571     *0       0     1|0       0   160m   339m    59m      0 test:15.8%          0       0|0     0|0   532k     2k     5   00:01:54 \n    *0     *0  11211     *0       0     1|0       0   160m   339m    59m      0 test:19.7%          0       0|0     0|0   908k     2k     5   00:01:55 \n    *0     *0  21182     *0       0     1|0       0   160m   339m    59m      0 test:32.0%          0       0|0     0|0     1m     2k     5   00:01:56 \n    *0     *0  22699     *0       0     1|0       0   160m   339m    59m      0 test:34.9%          0       0|0     0|1     1m     2k     5   00:01:57 \n    *0     *0  21367     *0       0     1|0       0   160m   339m    59m      0 test:33.4%          0       1|0     0|0     1m     2k     5   00:01:58 \n    *0     *0  21169     *0       0     1|0       0   160m   339m    59m      0 test:32.7%          0       0|0     0|1     1m     2k     5   00:01:59 \n    *0     *0  19775     *0       0     1|0       0   160m   339m    59m      0 test:31.2%          0       0|0     0|0     1m     2k     5   00:02:00 \n    *0     *0  23328     *0       0     1|0       0   160m   339m    59m      0 test:35.8%          0       0|0     0|0     1m     2k     5   00:02:01 \n    *0     *0  21248     *0       0     1|0       0   160m   339m    59m      0 test:32.9%          0       1|0     0|0     1m     2k     5   00:02:02 \n    *0     *0  23005     *0       0     1|0       0   160m   339m    59m      0 test:35.5%          0       2|0     0|0     1m     2k     5   00:02:03 \ninsert  query update delete getmore command flushes mapped  vsize    res faults  locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time \n    *0     *0  23249     *0       0     1|0       0   160m   339m    59m      0 test:35.7%          0       1|0     0|1     1m     2k     5   00:02:04 \n    *0     *0  23555     *0       0     1|0       0   160m   339m    59m      0 test:36.3%          0       0|0     0|0     1m     2k     5   00:02:05 \n    *0     *0  23589     *0       0     1|0       0   160m   339m    59m      0 test:36.0%          0       1|0     0|1     1m     2k     5   00:02:06 \n    *0     *0  22073     *0       0     1|0       0   160m   339m    59m      0 test:34.0%          0       1|0     0|1     1m     2k     5   00:02:07 \n    *0     *0  22554     *0       0     1|0       0   160m   339m    59m      0 test:34.7%          0       0|0     0|1     1m     2k     5   00:02:08 \n    *0     *0  20692     *0       0     1|0       0   160m   339m    59m      0 test:32.5%          0       0|0     0|1     1m     2k     5   00:02:09 \n    *0     *0  20153     *0       0     1|0       0   160m   339m    59m      0 test:31.5%          0       0|0     0|1     1m     2k     5   00:02:10 \n    *0     *0  19480     *0       0     1|0       0   160m   339m    59m      0 test:30.7%          0       0|0     0|0     1m     2k     5   00:02:11 \n    *0     *0  21118     *0       0     1|0       0   160m   339m    59m      0 test:33.0%          0       0|0     0|1     1m     2k     5   00:02:12 \n    *0     *0  20639     *0       0     1|0       0   160m   339m    59m      0 test:32.2%          0       0|0     0|0     1m     2k     5   00:02:13\n\nI just use native-method instead very poor db.eval.\n\nSoo, I can't offer good solution, but with this we need to do something.\n\nIn fact, i have 60X boost. And now my test valid, it shows the reality of life"}, {"count": 1, "tags": [], "bug_id": 54960, "attachment_id": 30279, "text": "Created attachment 30279\nTestplan with beanshell mongodb samplers", "id": 167180, "time": "2013-05-13T20:10:17Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-05-13T20:10:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 54960, "attachment_id": null, "id": 167187, "time": "2013-05-14T06:59:31Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-05-14T06:59:31Z", "is_private": false, "text": ">>https://github.com/apache/jmeter/blob/trunk/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptRunner.java#L59\n\nWhy using return before finally-block?"}, {"count": 3, "tags": [], "bug_id": 54960, "attachment_id": null, "is_private": false, "id": 167203, "time": "2013-05-14T19:41:40Z", "creator": "janpaulettles@gmail.com", "creation_time": "2013-05-14T19:41:40Z", "text": "Thanks for showing interest in mongometer http://exceptionallyexceptionalexceptions.blogspot.co.uk/2013/01/mongometer-v20.html which I donated to the project a few months back.\n\nThis 'project' was initially a hack so I could quick and consistently compare the _relative_ performance of multiple mongodb scripts that were attempting to achieve the same outcome.  It was never about the performance of the plugin itself, the plugin was the vehicle to compare scripts.\n\nI'm more than happy for changes to be made that will improve the usability of the plugin - I'd suggest that the jmeter project owners moderate the changes to the code as they see fit; I'm not precious about it in any way.\n\nYou can also access the original source on github https://github.com/JanPaulEttles/mongometer\n\nWith regards to the return prior to the finally clause; what's your issue? The finally clause will always be called prior to the return."}, {"count": 4, "tags": [], "bug_id": 54960, "attachment_id": null, "id": 167204, "time": "2013-05-14T20:04:54Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-05-14T20:04:54Z", "is_private": false, "text": "Okey, Jan, do you understand, the all of people, who need test mongodb with this plugin have  incorrect and not valid results? This is major reason to not include this into JMeter 2.10 or talk about performance testing mongodb for more simple methods like find/update/delete and anything else. And a lot of people didn't know about it. Please, warning your audience of users.\n\n\n>>With regards to the return prior to the finally clause; what's your issue? The finally clause will always be called prior to the return.\n\nThank you, I did not know this"}, {"count": 5, "tags": [], "text": "Thanks Mikhail for analysis.\nBased on your analysis and further investigation, I propose to mark this code as ALPHA for now if we decide to release a version.\n\nMaybe we should just keep MongoDB Source Config and let users use Beanshell or JSR223 (Groovy) code to do what the want with it as it can be hard to express through GUI what the API can do.", "is_private": false, "id": 167779, "creator": "p.mouawad@ubik-ingenierie.com", "time": "2013-06-11T21:15:19Z", "bug_id": 54960, "creation_time": "2013-06-11T21:15:19Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 54960, "attachment_id": null, "is_private": false, "id": 167781, "time": "2013-06-12T07:53:02Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-06-12T07:53:02Z", "text": "I released three samplers for MongoDB with support this into core for operations: insert, find and findOne.\n\nAll this samplers give a json, convert to bson and works with mongodb fine on high throughput. For exmaple, insert works cool on 20krps throughput.\n\nBut, i have a problem. In json's objects a haven't support operators. Like $inc, $gt, and other. It's a big problem.\n\nWe can include simple samplers insert/find/findOne if you want. \n\nSource code: https://github.com/sch1z0phren1a/ApacheJMeter-mongodb-extensions/tree/master/src/main/java/me\n\nExample testplan in attachment:)"}, {"count": 7, "tags": [], "bug_id": 54960, "attachment_id": 30427, "id": 167782, "time": "2013-06-12T07:54:15Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-06-12T07:54:15Z", "is_private": false, "text": "Created attachment 30427\ninsert/find/findOne samplers for mongodb"}, {"count": 8, "text": "Hello Mikhail,\nThanks for feedback, could you attach them as a patch ?\n\nI vote for their inclusion but waiting for other commiters opinion.", "bug_id": 54960, "attachment_id": null, "id": 167841, "time": "2013-06-15T19:03:13Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-06-15T19:03:13Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 54960, "attachment_id": null, "id": 167854, "time": "2013-06-16T12:45:33Z", "creator": "janpaulettles@gmail.com", "creation_time": "2013-06-16T12:45:33Z", "is_private": false, "text": "\nGood luck with this approach.  Apart from violating the DRY principle, this approach is rather messy architecturally.  Are you planning on having a separate sampler for every API call?  \n\nThe original intention for mongometer was to enable a scratch pad, an area where you were not bound to any predifined interfaces, an area where you can experiment with your mongo scripts to compare their performance in a relative manner.  What this, per sampler approach does it to limit the user to the defined samplers.\n\nLook, I don't really care what you guys do with mongometer, I've donated it, I'm not looking for any credit and I'm not looking to support anything; you guys asked for it, so I gave it to you.\n\nThe last thing I'd add on this is, you'd be better off keeping the free text area/scratch pad area, sticking to a single sampler and creating a script-to-java layer.  You don't open a separate mongo shell for each type of query, so why should you have to with jmeter?  The script to java mapping layer not only allows you to adhere to the DRY principle, it also allows for better unit test coverage, and reduces the number of separate samplers that have to be written and maintained.\n\nMy 2p."}, {"count": 10, "tags": [], "bug_id": 54960, "attachment_id": null, "is_private": false, "id": 167856, "time": "2013-06-16T13:04:05Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-06-16T13:04:05Z", "text": "Hello Jean-Paul,\nThanks for your comment.\nWe are still investigating on the best approach so your contribution is an interesting one. \nWhat is sure is that we need to have an efficient sampler and eval is clearly not recommended by MongoDB even if it clearly solved this issue.\n\nAs you can see for now we keep the Source element and will see how to have the best from PERFORMANCE and usability."}, {"count": 11, "tags": [], "creator": "epikhinm@gmail.com", "attachment_id": null, "id": 167867, "time": "2013-06-17T08:02:38Z", "bug_id": 54960, "creation_time": "2013-06-17T08:02:38Z", "is_private": false, "text": "to Jean-Paul,\n>>Good luck with this approach.  Apart from violating the DRY principle, this approach is rather messy architecturally.  Are you planning on having a separate sampler for every API call?  \n\nI just wrote this samplers for my coworkers. They want performance testing simple operations like insert and find. I not created it for apache jmeter and anything opensource project. Just for me, just for my coworkers. I understanding DRY principle, and as you, i want to create simple and good architecture.\n\n>>The original intention for mongometer was to enable a scratch pad, an area where you were not bound to any predifined interfaces, an area where you can experiment with your mongo scripts to compare their performance in a relative manner.  What this, per sampler approach does it to limit the user to the defined samplers\n\nOkey, it's very good idea and MongoDB Java Driver have this eval-call, but it's very slow. And with this method you lock db on throughput ~500rps. What if you script have better performance? How you test it?\n\nto Philippe,\n>>Thanks for feedback, could you attach them as a patch ?\n\n>>I vote for their inclusion but waiting for other commiters opinion.\n\nIt's good idea, but this samplers have a very slow functionality. I think, we can create samper with scripting text area (BeanShell/JSR223). In text area we can describe BSON-object or query for database.\nIt would be more functionality, but something difficult for users.\n\nI can opensource it, but i agree with Jean-Paul. We need more functionality and simplify archetecture:)"}, {"count": 12, "tags": [], "bug_id": 54960, "attachment_id": null, "id": 169993, "time": "2013-09-09T20:07:46Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-09-09T20:07:46Z", "is_private": false, "text": "Fixed by introduction of MongoDBHolder and documentation of this limitation, ie only use for functional testing.\n\n*** This bug has been marked as a duplicate of bug 54584 ***"}]
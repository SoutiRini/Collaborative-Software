[{"count": 0, "tags": [], "bug_id": 30445, "is_private": false, "text": "The following RDBMS adapter is required for running Slide on Weblogic & Oracle\nbecause Weblogic has to use the class\n\"weblogic.jdbc.vendor.oracle.OracleThinBlob\" in order to save blob into an\nOracle DB. \n\n\n---------------------------------------------------------------------------------\npackage org.apache.slide.store.impl.rdbms;\n\nimport org.apache.slide.common.*;\nimport org.apache.slide.content.*;\nimport org.apache.slide.store.impl.rdbms.CommonRDBMSAdapter;\nimport org.apache.slide.store.impl.rdbms.SequenceAdapter;\nimport org.apache.slide.util.logger.Logger;\n\nimport java.io.*;\nimport java.sql.*;\n\n\n/**\n * \n *  Slide Adapter for Weblogic/oracle.\n * \n */\npublic class WeblogicOracleRDBMSAdapter extends CommonRDBMSAdapter implements\nSequenceAdapter \n{\n\n    protected static String normalizeSequenceName(String sequenceName) {\n        return sequenceName.replace('-', '_').toUpperCase() + \"_SEQ\";\n    }\n\n    // Constructor\n\n    public WeblogicOracleRDBMSAdapter(Service service, Logger logger) {\n        super(service, logger);\n    }\n\n\n    // Public Methods\n\n    public boolean isSequenceSupported(Connection conn) {\n        return true;\n    }\n\n    public boolean createSequence(Connection conn, String sequenceName) throws\nServiceAccessException {\n\n        String query = \"CREATE SEQUENCE \\\"\" +\nnormalizeSequenceName(sequenceName) + \"\\\"\";\n\n        PreparedStatement statement = null;\n\n        try {\n            statement = conn.prepareStatement(query);\n            statement.executeUpdate();\n            return true;\n        } catch (SQLException e) {\n            throw new ServiceAccessException(service, e);\n        } finally {\n            close(statement);\n        }\n\n    }\n\n    public long nextSequenceValue(Connection conn, String sequenceName) throws\nServiceAccessException {\n        String selectQuery = \"SELECT \\\"\" +\nnormalizeSequenceName(sequenceName)+\"\\\".nextval FROM DUAL\";\n\n        PreparedStatement selectStatement = null;\n        ResultSet res = null;\n\n        try {\n            selectStatement = conn.prepareStatement(selectQuery);\n            res = selectStatement.executeQuery();\n            if (!res.next()) {\n                throw new ServiceAccessException(service, \"Could not increment\nsequence \" + sequenceName);\n            }\n            long value = res.getLong(1);\n            return value;\n        } catch (SQLException e) {\n            throw new ServiceAccessException(service, e);\n        } finally {\n            close(selectStatement, res);\n        }\n    }\n\n    public boolean sequenceExists(Connection conn, String sequenceName) throws\nServiceAccessException {\n\n        PreparedStatement selectStatement = null;\n        ResultSet res = null;\n\n        try {\n            selectStatement =\n                conn.prepareStatement(\"ALTER SEQUENCE  \\\"\" +\nnormalizeSequenceName(sequenceName) + \"\\\" INCREMENT BY 1\");\n            res = selectStatement.executeQuery();\n            return true;\n        } catch (SQLException e) {\n            return false;\n        } finally {\n            close(selectStatement, res);\n        }\n    }\n\n    // Private Methods\n    protected void storeContent(\n        Connection connection,\n        Uri uri,\n        NodeRevisionDescriptor revisionDescriptor,\n        NodeRevisionContent revisionContent)\n        throws IOException, SQLException\n    {\n        getLogger().log(\"storeContent: \" + uri, Logger.DEBUG);\n\n        assureVersionInfo(connection, uri, revisionDescriptor);\n        long versionContentId = getVersionContentId(connection, uri,\nrevisionDescriptor);\n        insertEmptyContent(connection, versionContentId);\n\n        PreparedStatement statement = connection.prepareStatement(\n            \"SELECT vc.CONTENT FROM VERSION_CONTENT vc WHERE vc.VERSION_ID = ?\nFOR UPDATE\");\n        try {\n            statement.setLong(1, versionContentId);\n            ResultSet res = statement.executeQuery();\n            try {\n                res.next();\n                Blob blob = res.getBlob(1);\n                InputStream in = revisionContent.streamContent();\n                OutputStream out = ((weblogic.jdbc.vendor.oracle.OracleThinBlob)\nblob).getBinaryOutputStream();\n\n                if (bcompress) {\n                    getLogger().log(\"Compressing the data\", LOG_CHANNEL, 6);\n                    StoreContentZip ziputil = new StoreContentZip();\n                    ziputil.Zip(in);\n                    in = ziputil.getInputStream();\n                }\n\n                try {\n                    copy(in, out, ((weblogic.jdbc.vendor.oracle.OracleThinBlob)\nblob).getBufferSize());\n                } finally {\n                    close(out);\n                }\n            } finally {\n                close(res);\n            }\n        }  finally {\n            close(statement);\n        }\n    }\n\n\tprivate long getVersionContentId(Connection connection, Uri uri,\nNodeRevisionDescriptor revisionDescriptor)\n\t\tthrows SQLException\n\t{\n\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\"select vh.VERSION_ID from VERSION_HISTORY vh, URI u \" +\n\t\t\t\"where vh.URI_ID = u.URI_ID and u.URI_STRING = ? and vh.REVISION_NO\"\n\t\t\t+\ngetRevisionNumberAsWhereQueryFragement(revisionDescriptor.getRevisionNumber()));\n\t\ttry {\n\t\t\tstatement.setString(1, uri.toString());\n\t\t\tResultSet res = statement.executeQuery();\n\t\t\ttry {\n\t\t\t\tres.next();\n\t\t\t\treturn res.getLong(1);\n\t\t\t} finally {\n\t\t\t\tclose(res);\n\t\t\t}\n\t\t} finally {\n\t\t\tclose(statement);\n\t\t}\n\t}\n\n\tprivate void insertEmptyContent(Connection connection, long versionContentId)\n\t\tthrows SQLException\n\t{\n\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\"insert into VERSION_CONTENT (VERSION_ID, CONTENT) values (?, EMPTY_BLOB())\");\n\t\ttry {\n\t\t\tstatement.setLong(1, versionContentId);\n\t\t\tstatement.executeUpdate();\n\t\t} finally {\n\t\t\tclose(statement);\n\t\t}\n\t}\n\n}", "id": 61486, "time": "2004-08-03T10:41:18Z", "creator": "christophe.lombart@sword-technologies.com", "creation_time": "2004-08-03T10:41:18Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 30445, "text": "weblogic.jar is required to compile this adapter (found in the weblogic\ndistribution).", "id": 61487, "time": "2004-08-03T10:43:59Z", "creator": "christophe.lombart@sword-technologies.com", "creation_time": "2004-08-03T10:43:59Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 30445, "is_private": false, "id": 62347, "attachment_id": null, "creator": "devnull@corefandango.net", "creation_time": "2004-08-23T17:56:16Z", "time": "2004-08-23T17:56:16Z", "text": "Removed use of Oracle Blob extensions. "}]
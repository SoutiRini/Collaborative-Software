[{"count": 0, "attachment_id": null, "bug_id": 43589, "text": "mod_disk_cache uses buffered write operation when it stores the body of the\nentity, but then it doesn't check the result of buffers flush. As a result, the\ndisk can contain invalid body of entity, when the header of the entity is correct.\n\nSteps to reproduce one of possible consequences:\n\n1. Use Apache in reverse proxy mode with disk cache (mod_proxy / mod_cache /\nmod_disk_cache).\n2. Fill the disk with Apache's cache, leave 2-3 KB available.\n3. Request a file with size < 4 KB (GET request) that is not in the cache yet.\n4. Request the same file (GET request), a response will be invalid, with\n\"Content-length: 0\" and without body.\n5. Try to request information about the same file (HEAD request), it will return\ncorrect \"Content-length\".\n\nDetailed description of the reason, per mod_disk_cache.c source:\n\n1. store_body() function uses APR_BUFFERED flag in call to apr_file_mktemp(), so\nit uses buffered I/O.\n2. Result of apr_file_write_full() call in store_body() function is checked, but\nin case of buffered I/O it can flag successful writing to a buffer only.\n3. store_body() function then calls file_cache_el_final() function without\nchecking of result code.\n4. file_cache_el_final() function doesn't check result code of apr_file_close()\ncall. In case of buffered I/O apr_file_close() may return error code from\nunsuccessful call to apr_file_flush().", "id": 109203, "time": "2007-10-10T10:13:33Z", "creator": "michelnok@mail.ru", "creation_time": "2007-10-10T10:13:33Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 43589, "attachment_id": null, "is_private": false, "id": 151705, "time": "2011-11-21T17:28:17Z", "creator": "minfrin@sharp.fm", "creation_time": "2011-11-21T17:28:17Z", "text": "Fixed on trunk in r1204599."}]
[{"count": 0, "tags": [], "creator": "ric@cs.uregina.ca", "attachment_id": null, "is_private": false, "id": 18269, "time": "2002-06-21T00:39:17Z", "bug_id": 10095, "creation_time": "2002-06-21T00:39:17Z", "text": "IRIX appears to be brain dead in its responses to getpwnam_r calls.\n\nWithin userinfo.c you are expecting a non-zero return code if it fails.\nThis is a reasonable assumption.  However, under IRIX you always get\na zero return code.  You need to examine the returned value of pwptr\nand if it is NULL, then the call failed.  The IRIX man page actually\nsays that you need to check the pointer - what they don't say is that\nthe returned value is always zero.\n\nAlternatively, you can test errno.  IRIX appears to set this correctly.\n\nI have worked around it, by adding the test for a NULL pointer return.\n\nIt could also be hacked by undefining HAVE_GETPWNAM_R for IRIX builds."}, {"count": 1, "tags": [], "bug_id": 10095, "text": "I suppose that I should have mentioned that the effect of this bug is that\nthe httpd child process does a segment fault instead of returning a 404 Error\nif you request a URL that contains an invalid user id.", "id": 18270, "time": "2002-06-21T01:00:11Z", "creator": "ric@cs.uregina.ca", "creation_time": "2002-06-21T01:00:11Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "is_private": false, "id": 18272, "time": "2002-06-21T01:07:57Z", "bug_id": 10095, "creation_time": "2002-06-21T01:07:57Z", "text": "Is this essentially what you tested?\n\nIndex: srclib/apr/user/unix/userinfo.c\n===================================================================\nRCS file: /home/cvs/apr/user/unix/userinfo.c,v\nretrieving revision 1.18\ndiff -u -r1.18 userinfo.c\n--- srclib/apr/user/unix/userinfo.c     13 Mar 2002 20:39:31 -0000      1.18\n+++ srclib/apr/user/unix/userinfo.c     21 Jun 2002 01:06:22 -0000\n@@ -76,7 +76,8 @@\n {\n     struct passwd *pwptr;\n #if APR_HAS_THREADS && defined(_POSIX_THREAD_SAFE_FUNCTIONS) &&\ndefined(HAVE_GETPWNAM_R)\n-    if (!getpwnam_r(username, pw, pwbuf, PWBUF_SIZE, &pwptr)) {\n+    /* IRIX getpwnam_r() returns 0 and sets pwptr to NULL on failure */\n+    if (!getpwnam_r(username, pw, pwbuf, PWBUF_SIZE, &pwptr) && pwptr) {\n         /* nothing extra to do on success */\n #else\n     if ((pwptr = getpwnam(username)) != NULL) {\n"}, {"count": 3, "tags": [], "creator": "ric@cs.uregina.ca", "attachment_id": null, "text": "Same sort of idea.  The code that I added was specific to IRIX:\n\n#if APR_HAS_THREADS && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && \ndefined(HAVE_GETPWNAM_R)\n    if (!getpwnam_r(username, pw, pwbuf, PWBUF_SIZE, &pwptr)) {\n        /* nothing extra to do on success */\n\n#ifdef sgi\n\n        /* unless it's IRIX */\n\n        if (pwptr == NULL) {\n            return errno;\n        }\n\n#endif\n\n#else\n\nI have always been fearful of the type of compound test that you used\never since I ran into an overly aggressive C optimizer that believed\nthat the laws of logic overrode the normal expression evaluation order.\n\nHowever, your fix will catch other _damaged_ libc implementations.", "id": 18274, "time": "2002-06-21T03:25:36Z", "bug_id": 10095, "creation_time": "2002-06-21T03:25:36Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 10095, "text": "This has been fixed in CVS and will be in the next release.\n\nThanks for your report and for the code you had tested!  I went with a\nfix which was not specific to Irix.\n", "id": 18808, "time": "2002-07-01T16:46:41Z", "creator": "trawick@apache.org", "creation_time": "2002-07-01T16:46:41Z", "tags": [], "is_private": false}]
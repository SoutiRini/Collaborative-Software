[{"count": 0, "tags": [], "text": "We heavily use BeanShell pre-, post- processor and function components.\n\nWe discovered that after running for 10 minutes, we get OutOfMemoryExceptions, \nconsistenly.\n\nWe made some test with simplified scripts and we have te same - even simple \nBeanShell scripts cause leaks.\n\nIt turns out that this problem actually originates in the BeanShell interpreter \nitself. The only workaround I have found constitutes of throwing out the whole \ninterpreter object afer an eval.\n\nLooking at the sources, at the moment JMeter uses one isntance per component, \nper test run. \n\nTo see whether the workaround can work for JMeter, we have patched the \nBeanShell components to instantiate a interpreters any time they need to \nevaluate a script. This helped and now we have bounded memory use. We probably \nhave a performance loss, but so far this has posed no problem.\n\nSince I do not see BeanShell devs fixing their leak, perhaps JMeter should \nintegrate BeanShell using the workaround, to keep JMeter actually usable with \nthis scripting?\n\nCheers,\n  Nik", "is_private": false, "bug_id": 40850, "id": 95237, "time": "2006-10-31T02:58:25Z", "creator": "nikolay.diakov@fredhopper.com", "creation_time": "2006-10-31T02:58:25Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "guillaume.lasnier@sungard.com", "attachment_id": null, "id": 95317, "time": "2006-11-02T01:37:14Z", "bug_id": 40850, "creation_time": "2006-11-02T01:37:14Z", "is_private": false, "text": "Could you attach the patch?\n\n(In reply to comment #0)\n> We heavily use BeanShell pre-, post- processor and function components.\n> \n> We discovered that after running for 10 minutes, we get OutOfMemoryExceptions, \n> consistenly.\n> \n> We made some test with simplified scripts and we have te same - even simple \n> BeanShell scripts cause leaks.\n> \n> It turns out that this problem actually originates in the BeanShell interpreter \n> itself. The only workaround I have found constitutes of throwing out the whole \n> interpreter object afer an eval.\n> \n> Looking at the sources, at the moment JMeter uses one isntance per component, \n> per test run. \n> \n> To see whether the workaround can work for JMeter, we have patched the \n> BeanShell components to instantiate a interpreters any time they need to \n> evaluate a script. This helped and now we have bounded memory use. We probably \n> have a performance loss, but so far this has posed no problem.\n> \n> Since I do not see BeanShell devs fixing their leak, perhaps JMeter should \n> integrate BeanShell using the workaround, to keep JMeter actually usable with \n> this scripting?\n> \n> Cheers,\n>   Nik\n\n"}, {"count": 2, "attachment_id": 19070, "creator": "nikolay.diakov@fredhopper.com", "text": "Created attachment 19070\nexample of patching a component that uses BeanShell\n\nThis file exemplifies how I patched some of the components. I did not patch all\nof them, only pre-, post-, and function.\n\nI also changed the BeanShellInterpreter.java (see separate attachment). Perhaps\none can contain all necessary changes to that file - I did not have time to do\nthis.", "id": 95325, "time": "2006-11-02T03:49:39Z", "bug_id": 40850, "creation_time": "2006-11-02T03:49:39Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "nikolay.diakov@fredhopper.com", "attachment_id": 19071, "id": 95326, "time": "2006-11-02T03:51:10Z", "bug_id": 40850, "creation_time": "2006-11-02T03:51:10Z", "is_private": false, "text": "Created attachment 19071\n- the interpreter patched\n\nClearing the name space seems required as BeanShell has some static structure\nin there."}, {"count": 4, "tags": [], "creator": "eric.dalquist@doit.wisc.edu", "text": "Created attachment 19281\nPatch to resolve memory leak issue\n\nMinimal diff to fix the BeanShell memory leak. The patch changes the\nBeanShellInterpreter to create an instance of the bsh.Interpreter class each\ntime eval or source is called. Variables created in the Interpreter are loaded\ninto a Map after each evaluation and loaded back into the new Interpreter\nbefore each evaluation to keep the same state between runs.", "id": 97031, "time": "2006-12-18T12:08:27Z", "bug_id": 40850, "creation_time": "2006-12-18T12:08:27Z", "is_private": false, "attachment_id": 19281}, {"count": 5, "attachment_id": null, "creator": "sebb@apache.org", "is_private": false, "id": 100231, "time": "2007-03-09T12:54:58Z", "bug_id": 40850, "creation_time": "2007-03-09T12:54:58Z", "tags": [], "text": "I've just done an experiment with a very simple script:\n\nThread.sleep(200);\nreturn \"1\";\n\nWhen this is run from the script pane, memory usage does climb as the test \ncontinues.\n\nHowever, when the script is executed from a file, memory usage sees to \nincrease very slowly.\n\nPerhaps you can try this as a work-round."}, {"count": 6, "attachment_id": null, "creator": "eric.dalquist@doit.wisc.edu", "text": "I'm in the process of upgrading to jMeter 2.3.1 from 2.2 and re-tested our script on a vanilla 2.3.1 instance to see if the memory issue still exists. It does and in 684 samples from a single thread the BSH Listener was close to causing an out-of-memory error.\n\nI was monitoring the script execution using JConsole and have screen shots of the overall heap usage and old-gen usage after stopping the test. I also used jmap to get historgrams of the live object count/size immediately before and after stopping the test.\n\nThese files along with the jmx script and bsh script are available here: https://mywebspace.wisc.edu/dalquist/web/jMeterMemoryLeak/\n\nNote that the configuration files that specify the hosts and users used in the test are not included so the script is not runnable as is.\n\n\nWe'll be doing a vendor branch import of 2.3.1 later this week and migrating our BSH component fix, which is attached to this issue as \"Patch to resolve memory leak issue\", to the 2.3.1 code and I'll post an updated patch if needed.", "id": 115258, "time": "2008-04-02T11:10:12Z", "bug_id": 40850, "creation_time": "2008-04-02T11:10:12Z", "tags": [], "is_private": false}, {"count": 7, "attachment_id": null, "creator": "sebb@apache.org", "text": "I would be interested in seeing a patch against 2.3.1.\n\nI've just had another look at the 2006-12-18 patch, but it does not seem to be possible to apply it to BeanShellInterpreter, even if I revert the source to revision 488388. Most of the patch ends up being rejected.\n\nExamining the patch manually is also really difficult, as there are a lot of renames and method signature changes.\n\nIf you do provide another patch, it would be very helpful if it could be just the minimum needed.\n\nI can then look at incorporating it into the next release.\n\nIn the meantime, could you perhaps attach the full source for your copy of BeanShellInterpreter.java? I might be able to make some headway with that.", "id": 115288, "time": "2008-04-03T04:53:40Z", "bug_id": 40850, "creation_time": "2008-04-03T04:53:40Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "text": "I'm working on applying the patch to 2.3.1 now and should have a patch by the end of the week.\n\nThe essence of what the previous patch did was move the bshClass.newInstance(); call from the BeanShellInterpreter constructor to the bshInvoke method so a new interpreter instance is created each time to release the handle on the previously parsed script objects.\n\nThe downside of this approach is the extra object creation and the inability to pass data between BSH runs other than through jMeter properties. As far as I can tell from the BSH docs there is no way to give a bsh.Interpreter a script and just a have it run that same script over and over.\n\nI was thinking that this time around I could look at adding an option to the UI to either use a persistent Interpreter (realizing it leaks memory) or a per-call Interpreter which won't leak memory.", "attachment_id": null, "id": 115302, "creation_time": "2008-04-03T13:38:15Z", "time": "2008-04-03T13:38:15Z", "creator": "eric.dalquist@doit.wisc.edu", "bug_id": 40850, "is_private": false}, {"count": 9, "tags": [], "bug_id": 40850, "is_private": false, "text": "(In reply to comment #8)\n> I'm working on applying the patch to 2.3.1 now and should have a patch by the\n> end of the week.\n \nThanks.\n\n> The essence of what the previous patch did was move the bshClass.newInstance();\n> call from the BeanShellInterpreter constructor to the bshInvoke method so a new\n> interpreter instance is created each time to release the handle on the\n> previously parsed script objects.\n> \n> The downside of this approach is the extra object creation and the inability to pass data between BSH runs other than through jMeter properties. \n\nYes; that's why I've been wary of adding it.\n\n> As far as I\n> can tell from the BSH docs there is no way to give a bsh.Interpreter a script\n> and just a have it run that same script over and over.\n\nYou can define methods in a startup file, and call that from the screen or another file. This reduces the new objects created.\n \n> I was thinking that this time around I could look at adding an option to the UI\n> to either use a persistent Interpreter (realizing it leaks memory) or a\n> per-call Interpreter which won't leak memory.\n> \n\nIt could be UI or a property.", "id": 115304, "time": "2008-04-03T13:57:05Z", "creator": "sebb@apache.org", "creation_time": "2008-04-03T13:57:05Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 40850, "is_private": false, "text": "Created attachment 21783\nAdd option to reset bsh.Interpreter on each iteration\n\nThis patch is a slightly different approach to the problem than the patch for 2.2. \n\nIn BeanShellInterpreter the code that creates the new bsh.Interpreter instance and that calls init(String, Logger) has been moved into a public reset() method. This method is called by both constructors to retain the existing behavior but gives clients of the class a way to re-created and re-init the Interpreter.\n\nAll of the jMeter components that use the BeanShellInterpreter have been updated to provide a per-component configuration option to reset the interpreter on each iteration, this defaults to false.\n\nAll of the BeanShellBeanInfoSupport based UIs use a select box for the true/false selection, the assertion and sampler GUIs use a checkbox. It seems like a checkbox would be preferable for the BeanShellBeanInfoSupport based UIs but I couldn't figure out an easy way to add a JCheckBox to them.\n\nI did not update the BeanShell function as I'm not sure if that needs the option as well, if you think it does let me know and I can add an option for a reset call there as well.\n\nThe patch should be the absolute minimal diff based on 2.3.1, please let me know if you have problems applying it or questions about the patch.\n\nThank you,\nEric", "id": 115324, "time": "2008-04-04T09:47:46Z", "creator": "eric.dalquist@doit.wisc.edu", "creation_time": "2008-04-04T09:47:46Z", "attachment_id": 21783}, {"count": 11, "attachment_id": null, "creator": "sebb@apache.org", "is_private": false, "id": 115325, "time": "2008-04-04T12:24:09Z", "bug_id": 40850, "creation_time": "2008-04-04T12:24:09Z", "tags": [], "text": "Thanks very much. The patch worked OK with the current code (after 2.3.1) with only a minor tweak.\n\nI had to change it slightly, because public functions cannot be called from constructors. In the end, I merged the init() and reset() methods, as there seemed no reason to keep them separate.\n\nI've committed the changes in:\nhttp://svn.apache.org/viewvc?view=rev&revision=644823\nand\nhttp://svn.apache.org/viewvc?rev=644831&view=rev\nIf you want to test them, they are in the jakarta-jmeter-r644833 nightly build (and later ones).\n\nA previous patch also saved and restored variables.\nWould this still be useful, perhaps as a 3rd option?\nI.e reuse / reset / reset,keeping variables\n\nI don't think the BeanShell function needs a reset option.\n\n[As to TestBean checkboxes - they have not been implemented.]"}, {"count": 12, "tags": [], "bug_id": 40850, "attachment_id": null, "is_private": false, "id": 115326, "time": "2008-04-04T12:48:55Z", "creator": "eric.dalquist@doit.wisc.edu", "creation_time": "2008-04-04T12:48:55Z", "text": "Thanks for applying the patch, combining init and reset is a good move I just wanted to keep the diffs as small as possible.\n\nAs for copying the data between runs, it shouldn't be too hard logically bug doing it all via reflection may be painful as there are a few other BSH objects that look like they need to be referenced to make it happen. If it is an important feature let me know and I can see about implementing it."}, {"count": 13, "tags": [], "text": "If BeanShell scripts need to save data between invocations, as a work-round, they can use JMeter variables.\n\nClosing the bug.\n\nIf some form of automatic variable saving is needed, that would be best dealt with in an enhancement request.", "is_private": false, "bug_id": 40850, "id": 116374, "time": "2008-05-08T04:33:50Z", "creator": "sebb@apache.org", "creation_time": "2008-05-08T04:33:50Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "What about using Beanshell as a function, via __BeanShell?\n\nI'm seeing a massive drop in performance in my test plan after 5-10minutes, and I use beanshell functions inside my sampler (typically via a source() call). I believe the root cause is the same. From inspecting the code and the patch it doesn't appear that there is a way to reset the interpreter on each function call.", "attachment_id": null, "id": 134006, "creation_time": "2010-01-28T15:42:04Z", "time": "2010-01-28T15:42:04Z", "creator": "gnell69@hotmail.com", "bug_id": 40850, "is_private": false}, {"count": 15, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 134007, "time": "2010-01-28T16:06:17Z", "bug_id": 40850, "creation_time": "2010-01-28T16:06:17Z", "is_private": false, "text": "Using beanshell.function.init instead of using source() should reduce memory usage. You can define various functions in the same file.\n\nIf you wish to add a reset option to the __BeanShell function, please open a new Buzilla issue."}]
[{"count": 0, "tags": [], "bug_id": 59336, "attachment_id": 33770, "id": 190304, "time": "2016-04-16T03:25:33Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-04-16T03:25:33Z", "is_private": false, "text": "Created attachment 33770\nPatch file generated via Ant script\n\nDue to addition of CellUtil.setCellStylePrperties(Cell, Map<String, Object>), the Workbook parameter of CellUtil.setCellStyleProperty(Cell, Workbook, String, Object) does nothing except throw an exception if it does not match the Workbook object associated with Cell. This patch deprecates CellUtil.setCellStyleProperty(Cell, Workbook, String, Object) in favor of CellUtil.setCellStyleProperty(Cell, String, Object). Objects using the deprecated method are modified appropriately to use the new method. One aside, HSSFCellUtil is nothing but a wrapper for some of the methods in CellUtil. No XSSFCellUtil class exists. It is my opinion that the entire class HSSFCellUtil should be deprecated in favor of CellUtil, or it should be completed and XSSFCellUtil added. I prefer the former as HSSFCellUtil gives us nothing except the \"ability\" to lock the user in to the older HSSF format."}, {"count": 1, "tags": [], "text": "Did you attach the right patch? This patch looks like the patch for bug 58787. Usually \"deprecation bugs\" are just a few @deprecated annotations and replacing the usage of deprecated functions in the code and unit tests with non-deprecated versions.", "is_private": false, "bug_id": 59336, "id": 190305, "time": "2016-04-16T04:43:21Z", "creator": "onealj@apache.org", "creation_time": "2016-04-16T04:43:21Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59336, "text": "(In reply to Mark Murphy from comment #0)\n> It is my opinion that the entire class HSSFCellUtil should be deprecated in \n> favor of CellUtil\n\nI agree. Please open a separate bug to deprecate features in HSSFCellUtil and move them to CellUtil if CellUtil does not provide the same functionality.\n\nclass HSSFCellUtil {\n    public static Object someMethodThatIsAlsoInCellUtil() {\n        System.out.println(\"Hello World\");\n        return null;\n    }\n}\n\nbecomes\n\nclass HSSFCellUtil {\n    /*\n     * @deprecated 3.15 beta2. Removed in 3.17. Use {@link org.apache.poi.ss.util.CellUtil@someMethodThatIsAlsoInCellUtil} instead.\n     */\n    public static Object someMethodThatIsAlsoInCellUtil() {\n        return CellUtil.theMethodInCellUtil();\n    }\n}", "id": 190306, "time": "2016-04-16T04:52:47Z", "creator": "onealj@apache.org", "creation_time": "2016-04-16T04:52:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Created attachment 33771\nPatch file generated via Ant script\n\nYou are right, that was the wrong patch file. Try this one.", "attachment_id": 33771, "id": 190312, "creator": "jmarkmurph@yahoo.com", "time": "2016-04-16T21:12:11Z", "bug_id": 59336, "creation_time": "2016-04-16T21:12:11Z", "is_private": false}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 190317, "time": "2016-04-17T01:35:43Z", "bug_id": 59336, "creation_time": "2016-04-17T01:35:43Z", "is_private": false, "text": "Thanks for the patch!\n\nApplied with minor modification in r1739533 and r1739536. Updated changelog in r1739537.\n\nMinor modifications:\nTestCellUtil#setCellStyleProperties: assertEquals(styCnt1 + 1, styCnt2);\nFor helpful error messages when a junit assertion fails, the order of the parameters should be: assertEquals(expected, actual) or assertEquals(message, expected, actual). In this case, we expect 1 additional style to be created (styCnt+1), and the actual is styCnt2 (wb.getNumCellStyles() called after the cell style is added to the style table).\n\nI'm not too worried about line width. The coding style for this project aims for 80-100 characters width. I interpret this as \"go over this limit when it improves readability\". With the ubiquity of widescreen monitors, I assume that most developers looking at the code have screen space for 160-240 characters. I reverted some of your line-width/whitespace changs when I felt it didn't significantly improve the readability of the code. https://poi.apache.org/guidelines.html#CodeStyle\n\nIndentation: prefer 4 spaces over tabs, but better to be consistent in the method or class if a different indentation scheme is used. I replaced some tabs with spaces to make them consistent with the rest of the file.\n\nWhen deprecating methods, try to write the deprecated method in terms of the non-deprecated method to reduce code duplication (in case there's a bug in the non-duplicated method that gets fixed, you want the deprecated method to also get fixed) and for reducing the total number of lines of code--even if this makes the method slightly more expensive by recomputing values. See the change I made to CellUtil#setFont(Cell, Workbook, Font). This also makes it easier for developers to see how to update their code to the non-deprecated method.\n\nTo check your javadocs, run \"ant javadocs\" (runs in under 1 minute). This caught a copy-paste error with {@link #setFont(Cell, short)}."}]
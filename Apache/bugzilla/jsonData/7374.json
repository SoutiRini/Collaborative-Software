[{"count": 0, "attachment_id": null, "creator": "birsan@ca.ibm.com", "is_private": false, "id": 12198, "time": "2002-03-22T21:29:52Z", "bug_id": 7374, "creation_time": "2002-03-22T21:29:52Z", "tags": [], "text": "The Apache Tomcat/<version number> is unnecessarily printed on the standard \noutput stream. Can this be logged somewhere or simply not printed at all?\nWe are using Tomcat as an embedded app server (via the Embedded class) and it \nwould nice if there was nothing displayed on the standard output.\nAn alternative is to make the Globals.SERVER_INFO not a final field, so I can \nset it to nothing.\n\nThe code is in StandardEngine.java.\n\n    /**\n     * Start this Engine component.\n     *\n     * @exception LifecycleException if a startup error occurs\n     */\n    public void start() throws LifecycleException {\n\n        // Log our server identification information\n        System.out.println(Globals.SERVER_INFO);\n\n        // Standard container startup\n        super.start();\n\n    }"}, {"count": 1, "tags": [], "bug_id": 7374, "text": "I have to point out that many people like having something displayed on the sys.out.\nAlso, this is an enhancement request, not a bug.", "id": 12199, "time": "2002-03-22T21:34:09Z", "creator": "remm@apache.org", "creation_time": "2002-03-22T21:34:09Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 7374, "attachment_id": null, "text": "I don't mind providing the enhancement myself (as a patch) if you tell me what \nkind of solution is preferred (i.e. logging it to the tomcat log, outputing on \nthe sys.out when some debug level is set, etc.).\n", "id": 12230, "time": "2002-03-24T02:17:06Z", "creator": "birsan@ca.ibm.com", "creation_time": "2002-03-24T02:17:06Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 7374, "text": "\nHi,\nI take it you are doing embedded Tomcat and that is why you don't want to see \nthe output. Below is a workaround: a substitute Engine class that does \neverything the original engine does, except producing that output.\n\nHope this helps,\nNoah\n\n\npackage com.palm.aegis.web;\n\nimport java.io.IOException;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.catalina.*;\nimport org.apache.catalina.core.*;\nimport org.apache.catalina.startup.*;\n\n\n/**\n * Overrides StandardEngine just so we don't get the mandatory\n * System.out.println (\"Apache/Jakarta 1.0.2\") junk when start()\n * gets called.\n */\npublic class NewEngine extends StandardEngine\n{\n    public NewEngine (Embedded embedded)\n    {\n        super();\n        setDebug (embedded.getDebug());\n        setLogger(embedded.getLogger());\n        setRealm (embedded.getRealm());\n    }\n\n    public synchronized void start() throws LifecycleException\n    {\n        // Validate and update our current component state\n        if (started)\n            throw new LifecycleException\n                (sm.getString(\"containerBase.alreadyStarted\", logName()));\n        addDefaultMapper (\"org.apache.catalina.core.StandardEngineMapper\");\n        started = true;\n\n        // Start our subordinate components, if any\n        if ((loader != null) && (loader instanceof Lifecycle))\n            ((Lifecycle) loader).start();\n        if ((logger != null) && (logger instanceof Lifecycle))\n            ((Lifecycle) logger).start();\n        if ((manager != null) && (manager instanceof Lifecycle))\n            ((Lifecycle) manager).start();\n        if ((cluster != null) && (cluster instanceof Lifecycle))\n            ((Lifecycle) cluster).start();\n        if ((realm != null) && (realm instanceof Lifecycle))\n            ((Lifecycle) realm).start();\n        if ((resources != null) && (resources instanceof Lifecycle))\n            ((Lifecycle) resources).start();\n\n        // Start our Mappers, if any\n        Mapper mappers[] = findMappers();\n        for (int i = 0; i < mappers.length; i++) {\n            if (mappers[i] instanceof Lifecycle)\n                ((Lifecycle) mappers[i]).start();\n        }\n\n        // Start our child containers, if any\n        Container children[] = findChildren();\n        for (int i = 0; i < children.length; i++) {\n            if (children[i] instanceof Lifecycle)\n                ((Lifecycle) children[i]).start();\n        }\n\n        // Start the Valves in our pipeline (including the basic), if any\n        if (pipeline instanceof Lifecycle)\n            ((Lifecycle) pipeline).start();\n\n        // Notify our interested LifecycleListeners\n        lifecycle.fireLifecycleEvent(START_EVENT, null);\n    }\n}", "id": 17820, "time": "2002-06-14T19:16:40Z", "creator": "noah.green@corp.palm.com", "creation_time": "2002-06-14T19:16:40Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Thanks for the workaround, I'll give it a try.\nYes, we are using an embedded Tomcat and the workaround we did was to \ntemporarily set System.out to a different stream, start Tomcat, then reset \nSystem.out back to the original stream.", "bug_id": 7374, "is_private": false, "id": 17821, "time": "2002-06-14T19:30:22Z", "creator": "birsan@ca.ibm.com", "creation_time": "2002-06-14T19:30:22Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 7374, "is_private": false, "text": "This message uses a logger for all currently supported versions of Tomcat (5.5.x onwards) so resolving this as fixed.", "id": 138098, "time": "2010-07-02T16:45:34Z", "creator": "markt@apache.org", "creation_time": "2010-07-02T16:45:34Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 19037, "attachment_id": null, "id": 35234, "time": "2003-04-15T16:22:49Z", "creator": "cfouque@montrouge.sema.slb.com", "creation_time": "2003-04-15T16:22:49Z", "is_private": false, "text": "By now, the 'jar' and 'war' tasks ALWAYS create the target file, even if 'class' \nfiles are missing due to errors in 'java' sources.\n\nMy enhancement request is that the 'jar' and 'war' tasks should accept the \n'srcdir' attribute :\n\nThe 'jar' or 'war' task would first verify that for each 'java' source found in \nthe path given as value to the 'srcdir' attribute, there is a corresponding \nup-to-date 'class' file among those to be included in the target file, and would \nNOT create the target file if any 'class' file is missing or outdated."}, {"count": 1, "tags": [], "bug_id": 19037, "attachment_id": null, "id": 35262, "time": "2003-04-15T20:14:04Z", "creator": "stevel@apache.org", "creation_time": "2003-04-15T20:14:04Z", "is_private": false, "text": "I am confused. In any normal build file, you set the dependencies up so that the\nwar target depends on the targets it needs, such as <javac>. If <javac> fails to\ncompile, the WAR doesnt get built.\n\nHow is your build file different, so that the archives get built even if the\ndependencies fail?"}, {"count": 2, "tags": [], "creator": "cfouque@montrouge.sema.slb.com", "text": "Our build file is NOT 'normal' :\n\nWe use 'WorkAreas' pointing to 'Baselines' (see bug 19006).\n\nIn this context, Java dependencies are NOT currently supported by ANT (I will \ncreate a bug report specifically for Java dependencies, but that is much work), \nso we do NOT use the 'depend' and 'javac' tasks of ANT :\n\n-  We first compile 'java' files into 'class' files with a PERL script which \ncompletely handles Java dependencies (using the '-verbose' option of 'javac').\n\n-  We then generate 'jar' files with a PERL script which automatically verifies \nthat each 'java' file corresponding to an 'includes' attribute such as  \n'*.class' has a corresponding up-to-date 'class' file.\n\n-  We finally use ANT to generate the 'war' files.\n\nOur goal is to replace our proprietary PERL scripts by 'build.xml' files, but \nthat will be done step by step only after ANT fully supports the concepts of \n'WorkAreas' pointing to 'Baselines'.\n\nIn the meantime, the verification that I suggest would be of great help.\n\nI would like to add a detail :\nThe 'jar' or 'war' task should verify the presence of an up-to-date 'class' file \nfor 'java' files found in the path given as value to the 'srcdir' attribute only \nfor 'java' files corresponding to an 'includes' attribute such as '*.class'.\n", "id": 35762, "time": "2003-04-22T10:05:36Z", "bug_id": 19037, "creation_time": "2003-04-22T10:05:36Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 19037, "attachment_id": null, "id": 91110, "time": "2006-07-11T10:26:36Z", "creator": "jan@materne.de", "creation_time": "2006-07-11T10:26:36Z", "is_private": false, "text": "I think you could handle that using a construct like\n\n<jar>\n  <filset>\n    <depend>\n      <mapper>\n\nJAR archives all files the fileset would give.\nFILESET asks the depend-selector for each file whether to include in the list.\nDEPEND compares that file with another one.\nMAPPER could map *.class to *.java."}]
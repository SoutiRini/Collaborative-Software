[{"count": 0, "tags": [], "creator": "hak@2mba.dk", "is_private": false, "text": "Right now HSSFCell.setCellValue(Calendar) just calls HSSFCell.setCellValue(Date)\nautomatically converting the given time to the default timezone. This means that\n20:00+03:00 and 20:00-03:00 will not be reported as 20:00 but as two different\ntimes none of them 20:00 (unless the default timezone happens to be -03:00 or\n+03:00).", "id": 85761, "time": "2006-02-14T14:32:45Z", "bug_id": 38641, "creation_time": "2006-02-14T14:32:45Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38641, "text": "Created attachment 17688\nPatch HSSFCell.setCellValue(Calendar) to use the calendar's timezone\n\nThis patch changes HSSFCell.setCellValue(Calendar) to use the Calendar's\ntimezone so both 20:00-03:00 and 20:00+03:00 are reported as 20:00.", "id": 85762, "attachment_id": 17688, "creator": "hak@2mba.dk", "creation_time": "2006-02-14T14:36:02Z", "time": "2006-02-14T14:36:02Z", "is_private": false}, {"count": 2, "tags": [], "creator": "lpoublan@triloggroup.com", "attachment_id": null, "id": 113521, "time": "2008-02-07T05:23:18Z", "bug_id": 38641, "creation_time": "2008-02-07T05:23:18Z", "is_private": false, "text": "This bug is annoying when POI is used on the server side, and there are clients\nusing different time zones.\nCurrently, there is a workaround, but it would be simple to fix that bug.\nHere is the workaround:\n  long time=date.getTime();\n  TimeZone defaultTZ=TimeZone.getDefault();\n  TimeZone usedTZ= [get the timezone to use here]\n  int offset=usedTZ.getOffset(time) - defaultTZ.getOffset(time);\n\t\t\n  if (offset!=0){\n    date=new Date(time+offset);\n  }\n  cell.setCellValue(date);"}, {"count": 3, "tags": [], "bug_id": 38641, "is_private": false, "text": "Patch updated to match current HSSFDateUtils structure, and applied to svn trunk", "id": 113535, "time": "2008-02-07T08:53:46Z", "creator": "apache@gagravarr.org", "creation_time": "2008-02-07T08:53:46Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 41975, "attachment_id": null, "id": 101128, "time": "2007-03-28T12:35:29Z", "creator": "kurt@intricatesoftware.com", "creation_time": "2007-03-28T12:35:29Z", "is_private": false, "text": "Posix states accept() can return -1 with errno == EINTR.\n\nhttp://www.opengroup.org/onlinepubs/009695399/functions/accept.html\n\nIn some implementations of posix threads this can happen and should be retried \ninstead of failing.\n\n--- network_io/unix/sockets.c.orig      Thu Dec  8 12:24:36 2005\n+++ network_io/unix/sockets.c   Wed Mar 28 15:26:44 2007\n@@ -184,9 +184,11 @@ apr_status_t apr_socket_accept(apr_socket_t **new, apr\n #endif\n     (*new)->timeout = -1;\n\n-    (*new)->socketdes = accept(sock->socketdes,\n-                               (struct sockaddr *)&(*new)->remote_addr->sa,\n-                               &(*new)->remote_addr->salen);\n+    do {\n+        (*new)->socketdes = accept(sock->socketdes,\n+                                   (struct sockaddr \n*)&(*new)->remote_addr->sa,\n+                                   &(*new)->remote_addr->salen);\n+    } while ((*new)->socketdes == -1 && errno == EINTR);\n\n     if ((*new)->socketdes < 0) {\n         return errno;"}, {"count": 1, "attachment_id": null, "bug_id": 41975, "is_private": false, "id": 102453, "time": "2007-04-26T06:24:22Z", "creator": "jorton@redhat.com", "creation_time": "2007-04-26T06:24:22Z", "tags": [], "text": "This is deliberate, if somewhat inconsistent behaviour; to allow the caller to\navoid re-entering accept() if interrupted.   Only a particular set of functions\nare documented to never return EINTR in apr_network_io.h."}]
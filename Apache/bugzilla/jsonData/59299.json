[{"count": 0, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "text": "${...} clashes with mod_define\n%{...} clashes with mod_rewrite\nWe should have a different character that is not used by any module (like ~) for unescaped characters (and recommendations about $ and % should be removed)\n\nRemark: enclosing the parameter name in braces is needed to concatenate a string with another one but it may be replaced, for instance, by $(param) or $[param]", "id": 190133, "time": "2016-04-11T13:56:10Z", "bug_id": 59299, "creation_time": "2016-04-11T13:56:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 59299, "text": "Does the % syntax actually clash in any meaningful way?\n\nAIUI the only reason $ clashes is because the core of the server looks to expand $ variables from the native environment / mod_define before directives even get to process the arguments.\n\nBut the % usage in a macro is expanded before mod_rewrite ever takes a look at the variables.\n\n(99% of directives are like RewriteCond/RewriteRule. 1% are of a special type called \"EXEC_ON_READ\" which basically means some evaluation is done immediately -- those are the problematic ones because they run earlier then everything else).\n\nFor example this works:\n\n<Macro rewriteme %rule %subst %condvar %condval>\nRewriteEngine ON\nRewriteCond %{%condvar} %condval\nRewriteRule %rule %subst\n</Macro>\n\n\n<virtualhost *:80>\nUse rewriteme .* /XXX HTTP_HOST .*\n</virtualhost>\n\nShould we just prefer % and then @ if you don't like looking at %{%... in expressions/mod_Rewrite and relegate to $ as a last resort?", "id": 190189, "time": "2016-04-12T14:23:10Z", "creator": "covener@gmail.com", "creation_time": "2016-04-12T14:23:10Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "text": "Example of clash:\n  <Macro rewriteme ... %{condvar} ...>\n  RewriteCond %{condvar} %condval\n\nYou expect %{condvar} to be a macro parameter but it will maybe be replaced because we defined somewhere else \"Define codvar ...\".\nQuite tricky to troubleshoot.\n\n3 solutions:\n - modify mod_rewrite & mod_core (Define)\n - use other characters than %$ in mod_macro\n - use another character than {} as delimiter in macro parameters\n\nThe third solution works without any change (for people aware about it).\nThe second solution will avoid problems. If this is not done, documentation should at least speak about the problem and recommend solution 3.", "id": 190232, "time": "2016-04-14T11:46:41Z", "bug_id": 59299, "creation_time": "2016-04-14T11:46:41Z", "is_private": false}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "lost track of this one...\n\n(In reply to Marc Stern from comment #2)\n> Example of clash:\n>   <Macro rewriteme ... %{condvar} ...>\n>   RewriteCond %{condvar} %condval\n> \n> You expect %{condvar} to be a macro parameter but it will maybe be replaced\n> because we defined somewhere else \"Define codvar ...\".\n> Quite tricky to troubleshoot.\n\nI'm confused, did you have a typo above?  The core only expands mod_define variable with ${...} which is not used.  How does %{condvar} get expanded incorrectly there?  It is not expanded like e.g. #define in the C preprocessor.\n\nDo you have a more comprehensive example that fails?", "id": 190523, "time": "2016-04-24T16:56:42Z", "bug_id": 59299, "creation_time": "2016-04-24T16:56:42Z", "is_private": false}, {"count": 4, "tags": [], "creator": "marc.stern@approach.be", "attachment_id": null, "text": "(In reply to Eric Covener from comment #3)\n\nSorry, I wasn't clear at all.\nIf a user uses a RewriteCond keyword (like HTTPS), it will clash:\n  <Macro rewriteme ... %{https} ...>\n  RewriteCond %{https} %condval\n\nIn THIS case, we have a clash because %{https} is used by both mod_macro & mod_rewrite. Some keywords may come later and we can't expect all users to know all of them.", "id": 190529, "time": "2016-04-25T06:37:16Z", "bug_id": 59299, "creation_time": "2016-04-25T06:37:16Z", "is_private": false}]
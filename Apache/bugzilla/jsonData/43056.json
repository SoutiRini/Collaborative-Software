[{"count": 0, "tags": [], "creator": "alon.barlev@gmail.com", "attachment_id": null, "id": 106467, "time": "2007-08-07T15:39:13Z", "bug_id": 43056, "creation_time": "2007-08-07T15:39:13Z", "is_private": false, "text": "Hello,\n\nAt src/org/jcp/xml/dsig/internal/dom/DOMRSASignatureMethod.java the Signature \nobject is used, but it is initialized without a provider.\n\n[Relevant for decryption]\n\nThe problem is that if a hardware based provider is used (One which cannot \nextract its private key), the signature fails.\n\nThe expected behavior is to use a specific provider as any other java crypto \nmethods.\n\nI know there is an issue with the interface stabilization... But this is a \nrequired functionality, as there is no security without hardware \ncryptography... And security packages should be the first to support this.\n\nThanks!"}, {"count": 1, "tags": [], "creator": "sean.mullan@oracle.com", "text": "Can you please send more information, such as the exception stack trace and\ndetails of the software you are using (JDK, provider)? Enhancements to JDK 5\nwere made to specifically address the problems with unextractable keys that\nyou are reporting. You should not have to specify a specific provider.\nFor more information, see:\nhttp://java.sun.com/javase/6/docs/technotes/guides/security/p11guide.html#DelayedSelect\n", "id": 106488, "time": "2007-08-08T08:24:58Z", "bug_id": 43056, "creation_time": "2007-08-08T08:24:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 43056, "text": "Hello,\n\nI am using sun JVM version 1.5 and 1.6.\nI am using the PKCS#11 provider.\nThis provider provides SHA1withRSA.\nIts priority is lower than the default provider that also provides SHA1withRSA.\nSo the default provider try to perform the RSA operation so it tries to \ntranslate the PrivateKey into RSAPrivateKey to extract the attribute, and it \nfails.\nAnd for the up-coming question... No... PKCS#11 provider cannot be the first \none, as many things will go wrong... :)\n\n---\n\njavax.xml.crypto.dsig.XMLSignatureException: java.security.InvalidKeyException: \nPrivate keys must be instance of RSAPrivate(Crt)Key or have PKCS#8 encoding\n        at \norg.jcp.xml.dsig.internal.dom.DOMXMLSignature.sign(DOMXMLSignature.java:370)\nCaused by: java.security.InvalidKeyException: Private keys must be instance of \nRSAPrivate(Crt)Key or have PKCS#8 encoding\n        at \nsun.security.rsa.RSAKeyFactory.translatePrivateKey(RSAKeyFactory.java:246)\n        at \nsun.security.rsa.RSAKeyFactory.engineTranslateKey(RSAKeyFactory.java:149)\n        at sun.security.rsa.RSAKeyFactory.toRSAKey(RSAKeyFactory.java:79)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:90)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:84)\n        at java.security.Signature$Delegate.init(Signature.java:1073)\n        at java.security.Signature$Delegate.chooseProvider(Signature.java:1033)\n        at java.security.Signature$Delegate.engineInitSign(Signature.java:1097)\n        at java.security.Signature.initSign(Signature.java:480)\n        at \norg.jcp.xml.dsig.internal.dom.DOMRSASignatureMethod.sign(DOMRSASignatureMethod.java:162)\n        at \norg.jcp.xml.dsig.internal.dom.DOMXMLSignature.sign(DOMXMLSignature.java:367)\n        ... 2 more\njava.security.InvalidKeyException: Private keys must be instance of \nRSAPrivate(Crt)Key or have PKCS#8 encoding\n        at \nsun.security.rsa.RSAKeyFactory.translatePrivateKey(RSAKeyFactory.java:246)\n        at \nsun.security.rsa.RSAKeyFactory.engineTranslateKey(RSAKeyFactory.java:149)\n        at sun.security.rsa.RSAKeyFactory.toRSAKey(RSAKeyFactory.java:79)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:90)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:84)\n        at java.security.Signature$Delegate.init(Signature.java:1073)\n        at java.security.Signature$Delegate.chooseProvider(Signature.java:1033)\n        at java.security.Signature$Delegate.engineInitSign(Signature.java:1097)\n        at java.security.Signature.initSign(Signature.java:480)\n        at \norg.jcp.xml.dsig.internal.dom.DOMRSASignatureMethod.sign(DOMRSASignatureMethod.java:162)\n        at \norg.jcp.xml.dsig.internal.dom.DOMXMLSignature.sign(DOMXMLSignature.java:367)\njava.security.InvalidKeyException: Private keys must be instance of \nRSAPrivate(Crt)Key or have PKCS#8 encoding\n        at \nsun.security.rsa.RSAKeyFactory.translatePrivateKey(RSAKeyFactory.java:246)\n        at \nsun.security.rsa.RSAKeyFactory.engineTranslateKey(RSAKeyFactory.java:149)\n        at sun.security.rsa.RSAKeyFactory.toRSAKey(RSAKeyFactory.java:79)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:90)\n        at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:84)\n        at java.security.Signature$Delegate.init(Signature.java:1073)\n        at java.security.Signature$Delegate.chooseProvider(Signature.java:1033)\n        at java.security.Signature$Delegate.engineInitSign(Signature.java:1097)\n        at java.security.Signature.initSign(Signature.java:480)\n        at \norg.jcp.xml.dsig.internal.dom.DOMRSASignatureMethod.sign(DOMRSASignatureMethod.java:162)\n        at \norg.jcp.xml.dsig.internal.dom.DOMXMLSignature.sign(DOMXMLSignature.java:367)\n", "id": 106489, "time": "2007-08-08T08:40:00Z", "creator": "alon.barlev@gmail.com", "creation_time": "2007-08-08T08:40:00Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "BTW:\nI hacked the source in order to make it work...\n\n        if (signature == null) {\n            /* @HACK BEGIN */\n            /*\n             * Use a specific provider to perform\n             * signature\n             */\n            java.security.Provider p = \n(java.security.Provider)System.getProperties ().get \n(\"org.jcp.xml.dsig.internal.dom.signprovider\");\n            try {\n                // FIXME: do other hashes besides sha-1\n                if (p == null) {\n                        signature = Signature.getInstance(\"SHA1withRSA\");\n                }\n                else {\n                        signature = Signature.getInstance(\"SHA1withRSA\", p);\n                }\n            } catch (NoSuchAlgorithmException nsae) {\n                throw new InvalidKeyException(\"SHA1withRSA Signature not \nfound\");\n            }\n            /* @HACK END */\n        }\n", "is_private": false, "bug_id": 43056, "id": 106490, "time": "2007-08-08T08:42:41Z", "creator": "alon.barlev@gmail.com", "creation_time": "2007-08-08T08:42:41Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 43056, "is_private": false, "id": 106494, "time": "2007-08-08T13:04:11Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-08-08T13:04:11Z", "tags": [], "text": "Please read the bug report at\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=40826\n\nA similar problem has come up before and it can be caused by using a PrivateKey\nfrom a PKCS#11 provider instance that is passed to the KeyStore API or by\nmanipulating the providers using the Provider API. In particular, when you\nget your PrivateKey from the PKCS11 KeyStore, make sure you do not specify a\nspecific provider, instead just do the following:\n\nKeyStore.getInstance(\"PKCS11\");"}, {"count": 5, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "id": 111993, "time": "2007-12-21T08:59:33Z", "bug_id": 43056, "creation_time": "2007-12-21T08:59:33Z", "is_private": false, "text": "Fixed. In order to use a specific provider, you must pass the Provider object\nas a property to the XMLSignContext or XMLValidateContex, ex:\n\nsignContext.setProperty\n    (\"org.jcp.xml.dsig.internal.dom.SignatureProvider\", new MyProvider());"}]
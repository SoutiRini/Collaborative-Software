[{"count": 0, "tags": [], "text": "A context will not be reloaded automatically if autodeploy has been activated. \nThis is a problem, because if I *do* activate autodeploy, a wepapp gets deployed \ntwice. Once according to server.xml and once automatically.", "is_private": false, "bug_id": 28158, "id": 55152, "time": "2004-04-02T13:03:18Z", "creator": "jaBernet@gmx.ch", "creation_time": "2004-04-02T13:03:18Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "This is normal behavior. Webapps will be deployed if they are in appBase. Use\ncontext files rather than context declarations in server.xml.\nreloadable is also independant of the auto deployer, but wil only reload if\nclasses are modified.\nPost on tomcat-user for this kind of issues, and don't reopen this report.", "is_private": false, "bug_id": 28158, "id": 55153, "time": "2004-04-02T13:28:54Z", "creator": "remm@apache.org", "creation_time": "2004-04-02T13:28:54Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 28158, "is_private": false, "text": "> reloadable is also independant of the auto deployer, but wil only reload if\nclasses are modified.\n\nIf you say that reloadable is independant of the autodeploayer, then reloadable \nwith autodeploy=\"false\" should work and this bug would be valid.", "id": 55155, "time": "2004-04-02T13:35:34Z", "creator": "jaBernet@gmx.ch", "creation_time": "2004-04-02T13:35:34Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 28158, "attachment_id": null, "id": 55156, "time": "2004-04-02T13:41:33Z", "creator": "remm@apache.org", "creation_time": "2004-04-02T13:41:33Z", "is_private": false, "text": "If you look at the code, you'll see that class reloading is indeed independant\nof auto deploy. This should be obvious enough (see below for the code in the\ncontext). See, I'm sort of tired wasting my time testing non issues, so if you\ncould be convincing it would help me think this is going to be quality time.\n\n    /**\n     * Execute a periodic task, such as reloading, etc. This method will be\n     * invoked inside the classloading context of this container. Unexpected\n     * throwables will be caught and logged.\n     */\n    public void backgroundProcess() {\n\n        if (!started)\n            return;\n\n        count = (count + 1) % managerChecksFrequency;\n\n        if ((getManager() != null) && (count == 0)) {\n            try {\n                getManager().backgroundProcess();\n            } catch ( Exception x ) {\n                log.warn(\"Unable to perform background process on manager\",x);\n            }\n        }\n\n        if (getLoader() != null) {\n            if (reloadable && (getLoader().modified())) {\n                try {\n                    Thread.currentThread().setContextClassLoader\n                        (StandardContext.class.getClassLoader());\n                    reload();\n                } finally {\n                    if (getLoader() != null) {\n                        Thread.currentThread().setContextClassLoader\n                            (getLoader().getClassLoader());\n                    }\n                }\n            }\n            if (getLoader() instanceof WebappLoader) {\n                ((WebappLoader) getLoader()).closeJARs(false);\n            }\n        }\n\n    }\n"}, {"count": 4, "tags": [], "bug_id": 28158, "text": "I don't intend to waste your time. Reporting a bug costs my time too, so I only\ndo it if I think I found a bug, not to missuse bugzilla as a forum.\n\nI don't know if the code you provided is correct or not, as I don't have insight\nin the tomcat source. I just managed to reproduce the following behaviour in\nTomcat 5 (and 4), which is faulty IMO:\n\nAuto-reload works fine as long as I have autodeploy=\"true\" for the host my\ncontext resits in. As soon is I trun autodeploy off, reloading of the context\ndoesn't work anymore. So the relaoding-feature of a webapp seems to be somehow\ndependant of the autodeploy feature on the host.\n\nI posted the second part with the multiple deployment only to show why I think\nfixing this is important.\n\nI'm glad to post a server.xml to show what I think is a bug. Maybe you could\nconfirm it then.", "id": 55160, "time": "2004-04-02T13:55:46Z", "creator": "jaBernet@gmx.ch", "creation_time": "2004-04-02T13:55:46Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Ok, so:\n- I tested and it works\n- (as I said but you don't want to listen) don't use server.xml, use a context\nfile with a name matching the context name", "attachment_id": null, "bug_id": 28158, "id": 55161, "time": "2004-04-02T14:21:50Z", "creator": "remm@apache.org", "creation_time": "2004-04-02T14:21:50Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "jaBernet@gmx.ch", "is_private": false, "count": 6, "id": 55162, "time": "2004-04-02T14:29:46Z", "bug_id": 28158, "creation_time": "2004-04-02T14:29:46Z", "text": "> - I tested and it works\nHow can you know if it works if you don't have my server.xml? \n\n> - (as I said but you don't want to listen) don't use server.xml, use a context\nfile with a name matching the context name\nI did listen. Its just not a solution. Its as valid to put the whole \nconfiguration in the server.xml as it is to put it into individual files."}, {"attachment_id": 11103, "tags": [], "creator": "jaBernet@gmx.ch", "text": "Created attachment 11103\nserver.xml used (see comment in file)", "count": 7, "id": 55164, "time": "2004-04-02T14:34:29Z", "bug_id": 28158, "creation_time": "2004-04-02T14:34:29Z", "is_private": false}, {"count": 8, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 55170, "time": "2004-04-02T15:48:57Z", "bug_id": 28158, "creation_time": "2004-04-02T15:48:57Z", "text": "Please try to read my comments. Thanks.\n\"don't use server.xml, use a context file with a name matching the context name\""}, {"count": 9, "tags": [], "bug_id": 28158, "attachment_id": null, "id": 55295, "time": "2004-04-05T11:58:10Z", "creator": "jaBernet@gmx.ch", "creation_time": "2004-04-05T11:58:10Z", "is_private": false, "text": "> \"don't use server.xml, use a context file with a name matching the context name\"\nOk Remy. I've really tried everything now. Even with the Context-definition in a\nseperate .xml file realoding doesn't work if autodeploy is true.\n\nI tried every possible combination of autodeploy, deployonstartup and\ncontext-paths. I can list the different attemps on d\u00e9tail if you want me to. \n\nThe result in the end is always the same: if you don't turn on autodeploy\nauto-reloading will not work! I don't say that there is a direct link between\nthose two. But I suspect that there is a different loader attached (or no loader\nat all) to the context if its deployed directly (by specifying context in the\nserver.xml or in a specific context-xml) than if its deployed by the auto-deployer. \n\nSo one of those \"if\"'s here would not be true because of this.\n\n        if (getLoader() != null) { // <-- no loader attached?\n            if (reloadable && (getLoader().modified())) { // .modified() never\nreturns true for attached loader\n\nIf you still think I'm wasting your time with this I'll have a closer look at\nthe code myself, but obviously it would be much easier for you to find the problem."}]
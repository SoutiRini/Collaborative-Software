[{"count": 0, "tags": [], "bug_id": 54256, "attachment_id": null, "text": "(I posted this to the mailing list on Oct 28, 2011, but didn't end up creating a report on it until now.  I have the same error with Tomcat 7.)\n\nPROBLEM DESCRIPTION:\n\nI have an exception (appended below), and I think it would be nice to have more information about what is going on.\n\nIf I had more context, it would help me find the cause of my problem much more quickly.  For example, if the exception indicated what the file/resource that was having the problem was, it would speed up troubleshooting immensely.\n\nHOW TO REPRODUCE:\n\nIn a JAR file contained in WAR file's WEB-INF/lib folder:  Change the MANIFEST.MF file in the JAR file.  Put in a line with ONLY \"Class-Path:\".  Note there is no space after the period, which is what causes the error.  During load of the application, the exception which I have appended at the end of this message will show up.\n\nSUGGESTED IMPROVEMENT:\n\nMy suggestion would be to modify ExtensionValidator.validateApplication(...), around line 195.  This is the location that actually knows about what the resource is.  It would be nice if the IOException was caught, and information about the Resource was added to the exception, probably by wrapping the exception.\n\nBecause I have not gone through the overhead of getting a version of Tomcat running from source, these changes have not been compiled and tested, but I think the suggestion is relatively straight-forward.\n\nHere are the suggested code changes:\n\nFirst code change - move the definition of \"resource\" outside of the try/catch:\n\n         // Locate the Manifests for all bundled JARs\n         Resource resource = null; // ADDED\n         NamingEnumeration<Binding> ne = null;\n\nSecond code change - make the existing declaration of \"resource\" just an assignment:\n\n                 resource = (Resource) obj; // MODIFIED\n                 inputStream = resource.streamContent();\n                 Manifest jmanifest = getManifest(inputStream);\n\nThird code change: add a catch clause and re-throw:\n\n         } catch (NamingException nex) {\n             // Jump out of the check for this application because it\n             // has no resources\n         } catch (IOException ioex) { // ADDED\n             throw new IOException(\"validation problem in \" + resource.toString(), ioex); // ADDED\n         } finally {\n\nThe problem is that the resource may not have a proper toString().  I would suggest changing FileDirContext:898 (inner class=FileResource) to have a toString method, something along the lines of:\n\n         public String toString() { // ADDED\n             return file == null ? \"null\" : file.toString(); // ADDED\n         } // ADDED\n\nNote: about this, in the original email thread, Konstantin Kolinko said:\n\"Not sure about FileResource.toString(), but adding a catch for IOException looks like doable.\"\n\n\nFinally, here's the exception:\n\n28-Oct-2011 11:03:03 AM org.apache.catalina.core.StandardContext startInternal\nSEVERE: Error in dependencyCheck\njava.io.IOException: invalid header field\n     at java.util.jar.Attributes.read(Attributes.java:410)\n     at java.util.jar.Manifest.read(Manifest.java:199)\n     at java.util.jar.JarInputStream.<init>(JarInputStream.java:83)\n     at java.util.jar.JarInputStream.<init>(JarInputStream.java:60)\n     at org.apache.catalina.util.ExtensionValidator.getManifest(ExtensionValidator.java:394)\n     at org.apache.catalina.util.ExtensionValidator.validateApplication(ExtensionValidator.java:195)\n     at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5037)\n     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)\n     at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)\n     at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774)\n     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)\n     at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033)\n     at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291)\n     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)\n     at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)\n     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)\n     at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727)\n     at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148)\n     at org.apache.catalina.startup.Catalina.start(Catalina.java:621)\n     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n     at java.lang.reflect.Method.invoke(Method.java:616)\n     at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322)\n     at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)\n\n(And if only java.util.jar.Attributes.read reported WHICH attribute had the problem, we'd really be in business.)", "id": 163939, "time": "2012-12-06T20:44:32Z", "creator": "mouse@intranet.org", "creation_time": "2012-12-06T20:44:32Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "text": "Fixed along the lines you suggest in trunk. Note trunk has a new resources implementation so I don't think the change will be a simple back-port.", "id": 164336, "time": "2013-01-02T21:48:54Z", "bug_id": 54256, "creation_time": "2013-01-02T21:48:54Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "markt@apache.org", "text": "Fixed in 7.0.x using a slightly different approach to get the name of the JAR file.\n\nThanks for the report and the analysis.", "id": 164339, "time": "2013-01-02T21:58:03Z", "bug_id": 54256, "creation_time": "2013-01-02T21:58:03Z", "is_private": false, "attachment_id": null}]
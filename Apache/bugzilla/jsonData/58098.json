[{"count": 0, "tags": [], "bug_id": 58098, "text": "An NPE is being throw when opening a XLSX file that is currently opened by Excel (write mode).\nOn my opinion it should throw the java.io.FileNotFoundException instead.\n\n\nStacktrace:\nException in thread \"main\" java.lang.NullPointerException\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:235)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:165)\n\tat xxxxxx.CloseableWorkbook.create(CloseableWorkbook.java:271)\n\tat xxxxxx.ReadExcel.main(ReadExcel.java:29)\n\n\nIssue story description:\nNPOIFSFileSystem first tries to open the file and then gets an java.io.FileNotFoundException: (....).xlsx (The process cannot access the file because it is being used by another process) however since there is no null check on the channel it gets an NPE.\n\nClass NPOIFSFileSystem should be modified to check for channel first...\n\nprivate NPOIFSFileSystem(FileChannel channel, File srcFile, boolean readOnly, boolean closeChannelOnError)\n         throws IOException\n    {\n       (...) // try \n\n       } catch(IOException e) {\n          if(closeChannelOnError && channel != null) {\n             channel.close();\n          }\n          throw e;\n(...)\n\n\nPS: Actually the null check if being done when handling RuntimeException.", "id": 183877, "attachment_id": null, "creator": "tcavaleiro@gmail.com", "creation_time": "2015-07-03T10:14:46Z", "time": "2015-07-03T10:14:46Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58098, "text": "Are you able to create a cross-platform unit test that is able to trigger this NPE, or is it uniquely \"windows with file open\" only?\n\n(If we can add a universal unit test for this, that'd be great, but if not we won't bother waiting and can just add the null check)", "id": 183919, "time": "2015-07-06T22:29:06Z", "creator": "apache@gagravarr.org", "creation_time": "2015-07-06T22:29:06Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58098, "text": "I did try to recreate a unit test using a FileLock, but accordingly with the API [1] is can work differently on different systems.\n\n[1] http://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileLock.html\n\n\"Platform dependencies\n\n(...)\nWhether or not a lock actually prevents another program from accessing the content of the locked region is system-dependent and therefore unspecified. The native file-locking facilities of some systems are merely advisory, meaning that programs must cooperatively observe a known locking protocol in order to guarantee data integrity. On other systems native file locks are mandatory, meaning that if one program locks a region of a file then other programs are actually prevented from accessing that region in a way that would violate the lock. On yet other systems, whether native file locks are advisory or mandatory is configurable on a per-file basis. To ensure consistent and correct behavior across platforms, it is strongly recommended that the locks provided by this API be used as if they were advisory locks.\n(...)\"\n\n\nSo I don't think it's worth a try. Also the file lock should be simulated from a different process than Java (on the original case from Excel), or else it can have different behaviour due to how Java handles file I/O, etc..\nAnd last but not least, you're already doing the NPE check for RuntimeException as you can see on class NPOIFSFileSystem (line 243)\n\n(...)\n       } catch(IOException e) {\n          if(closeChannelOnError) {\n             channel.close();\n          }\n          throw e;\n       } catch(RuntimeException e) {\n          // Comes from Iterators etc.\n          // TODO Decide if we can handle these better whilst\n          //  still sticking to the iterator contract\n          if(closeChannelOnError) {\n              if (channel != null) {\n                  channel.close();\n                  channel = null;\n              }\n          }\n          throw e;\n       }\n(...)", "id": 183954, "time": "2015-07-08T10:40:24Z", "creator": "tcavaleiro@gmail.com", "creation_time": "2015-07-08T10:40:24Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58098, "attachment_id": null, "text": "Hopefully fixed in r1693311, I've added the same logic for both catches", "id": 184221, "time": "2015-07-29T16:37:56Z", "creator": "apache@gagravarr.org", "creation_time": "2015-07-29T16:37:56Z", "is_private": false}]
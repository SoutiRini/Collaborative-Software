[{"count": 0, "tags": [], "creator": "lionel.farbos@free.fr", "text": "I don't think it is a bug but I'd want to suggest you a new feature.\n\nActually, when I stop a context, its running threads are interrupted, \nso, \n- If my servlet had already send datas on the response outputstream, I can have\na 200 HTTP response with a truncated response,\n- If my servlet had not send datas before, I can have a 500 HTTP response with\nNullPointerException, XML11Configuration not found, ...\n\nSo I can't stop my Context without a service interruption (from a client point\nof view), even if I have load balancing/failover with mod_jk.\n\nSo, is it possible to add a configuration parameter in Tomcat Context to not\ninterrupt running threads ?\n\nThis request for new feature is also available for Tomcat 5.", "id": 71018, "time": "2005-02-15T18:16:15Z", "bug_id": 33589, "creation_time": "2005-02-15T18:16:15Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "No.", "id": 71019, "time": "2005-02-15T18:19:32Z", "bug_id": 33589, "creation_time": "2005-02-15T18:19:32Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 33589, "attachment_id": null, "text": "Clarification: yes, the threads will be \"stopped\" when stopping the webapp\n(obviously, they are not, but after the classloader stops doing anything, your\nrequests are basically dead). You just have the option of hacking a little in\nthe source to wait more.", "id": 71024, "time": "2005-02-15T18:30:30Z", "creator": "remm@apache.org", "creation_time": "2005-02-15T18:30:30Z", "is_private": false}, {"count": 3, "text": "Just fixing the severity and a couple of other flags.", "bug_id": 33589, "attachment_id": null, "id": 71032, "time": "2005-02-15T20:32:43Z", "creator": "markt@apache.org", "creation_time": "2005-02-15T20:32:43Z", "tags": [], "is_private": false}, {"count": 4, "text": "This is a fairly terrible request.  A context stop is a significant \nadministrative event, and clearing all the resources associated with a context \nupon a stop is imperative.  We hear complaints all the time that resources \naren't cleaned up quickly or efficiently enough.\n\nI'll give other developers ample time to express opinions and/or suggest \npatches for this, but if nothing is done for a few weeks, I'll close this \nissue as WONTFIX.", "bug_id": 33589, "attachment_id": null, "id": 71034, "time": "2005-02-15T20:41:49Z", "creator": "yoavs@computer.org", "creation_time": "2005-02-15T20:41:49Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "text": "There are 2 sorts of stop Context :\n\n1- When you want to stop a context because it has possibly a problem, the actual\nstop context is good because you want to force the stop as quickly as possible\nand you don't want to wait for anything.\n2- When you to stop the context because you want to install a new WAR, I'd like\nmy clients don't know about it. So, I'd want a \"stop light\" (with waiting for\nrunning threads). The service is not interrupted because, while I install my new\nWAR, mod_jk balance the requests on the other(s) tomcat. And when I am ready, I\nstart my context and \"stop light\" the others.\n\nThe 2nd case is not resolved with a reload, because, when I install my new WAR,\n(in default localhost with unpackWARs=\"true\") my context is not the new One.\nSo I need a stop...", "attachment_id": null, "bug_id": 33589, "id": 71067, "time": "2005-02-16T10:11:00Z", "creator": "lionel.farbos@free.fr", "creation_time": "2005-02-16T10:11:00Z", "is_private": false}, {"count": 6, "tags": [], "creator": "remm@apache.org", "text": "Did you actually read my comment ?\n- threads will have to exit your webapp while it's gone (when stopping, Tomcat\nwaits a little; as I've said, you can hack the code a little to wait more, or\nwait forever if you want to)\n- request processing will fail while your webapp is being reloaded/redeployed\n\nIf you want QoS, you need two Tomcat instances, and make use of the pause\noperation on the connectors.\n\nJudging by your latest comment, this doesn't seem it will go anywehere, so I'm\nclosing the bug. You are free to ask for features, and we are free to refuse to\ndo it ;)", "id": 71070, "time": "2005-02-16T10:20:41Z", "bug_id": 33589, "creation_time": "2005-02-16T10:20:41Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "lionel.farbos@free.fr", "attachment_id": null, "is_private": false, "id": 71119, "time": "2005-02-17T11:47:35Z", "bug_id": 33589, "creation_time": "2005-02-17T11:47:35Z", "text": "I agree : you are free to refuse any new feature.\n\nI read your comment but I thought that, instead of implementing a wait in the\ndestroy of all my servlets, it would be better to solve this within the\napplication server.\n\n\"use of the pause operation on the connectors\" : what do you mean ? (I find\nnothing in the docs :-( \nI use apache with mod_jk for load_balance and failover but I don't know the\npause operation...Do you have a doc link for this ?\n"}, {"count": 8, "tags": [], "creator": "lionel.farbos@free.fr", "text": "I tried what you suggest me (hack my code to wait more).\n\nTo do so, I implement a MotherServlet and all the servlets inherit to it.\nMotherServlet below :\n\npublic abstract class MotherServlet extends HttpServlet\n{\n  private static final Object lock = new Object();\n  private static int nbActifsThreads = 0;\n...\n  protected void service(HttpServletRequest request, HttpServletResponse\nresponse) throws IOException, ServletExcepti\non\n  {\n    synchronized (lock) { nbActifsThreads++; }\n    try {\n      super.service(request, response);\n    }\n    finally {\n      try {\n        response.flushBuffer();\n      }\n      catch (IOException e) {\n        log( \"exception\", e );\n      }\n    }\n    synchronized (lock) { nbActifsThreads--; }\n  }\n\n  public synchronized void destroy()\n  {\n    while (nbActifsThreads >0) {\n      try { Thread.sleep(100); } catch (Exception e) {}\n    }\n    super.destroy();\n  }\n}\n\nIt works for me.\n\nBut, now, the problem is :\nIf I want to force a stop Context, how to do it ?\nThe destroy doesn't know if I want a graceful stop or a force stop ...\n", "id": 71987, "time": "2005-03-08T18:21:38Z", "bug_id": 33589, "creation_time": "2005-03-08T18:21:38Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "yoavs@computer.org", "text": "Either way it's not a Tomcat issue, it's your problem, please don't reopen the \nissue.", "id": 71989, "time": "2005-03-08T18:32:40Z", "bug_id": 33589, "creation_time": "2005-03-08T18:32:40Z", "is_private": false, "attachment_id": null}]
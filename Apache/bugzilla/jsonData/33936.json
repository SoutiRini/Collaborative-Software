[{"count": 0, "tags": [], "creator": "rwong@ariba.com", "attachment_id": null, "text": "This is for xmlsec version 1.2 Java. \n\nThe defect is found in the reported configuration, but it should be a general \ndefect across all platforms, all OS.\n\nThe input stream is returned by instances of \norg.apache.xml.security.utils.resolver.ResourceResolver. \nXMLSignatureInput.upateOutputStream calls the reset method here:\n\n          } else {\n            InputStream is = this._inputOctetStreamProxy;\n            if (is.markSupported())\n                is.reset();\n                int num;\n                bytes = new byte[1024];\n                while ((num=is.read(bytes))>0) {\n                \tdiOs.write(bytes,0,num);\n                }\n                \n          }\n\nHere's the problem:\n\nFor implementations of the resolve method where the input stream supports the \nmark operation, the implmentations may not have called the mark method before \nreturning. And some implementation of InputStream can throw an IOException if \nthe mark method is NOT called before the reset method is called. (An example is \njava.io.BufferedInputStream.) In this case, \nXMLSignatureInput.updateOutputStream throws an IOException, when in fact it \ncould get the input stream data by simply reading the input stream. As a \nresult, even though my implementation is passing in a valid InputStream, the \ncore code throws an IOException when calling the reset method, and mistakenly \nthinks that my XMLSignatureInput instance is not available.\n\nThe workaround is for the implementation to make sure mark is called before \nreturning the input stream.\n\nBut I think the design should be as follows:\nThe XMLSignatureInput class has no business of resetting the input stream \nbecaus it does not if the input stream has been marked or not. The \nimplementation of the resolve method should handle all the business of marking \nand resetting the input stream where appropriate.\n\nThe contract for the resolve call should be such that the implementation \nreturns an XMLSignatureInput which contains a reference to the input stream \nwhich is ready to be consumed by the core code at whatever the current position \nin the input stream. The implementation can choose to always return a \nXMLSignatureInput that always references a new InputStream instance (in which \ncase no mark or reset needs to be called), or the implementing class can choose \nto cache the input stream, mark it, and then calls reset every time the resolve \nmethod is called.", "id": 72068, "time": "2005-03-09T19:30:06Z", "bug_id": 33936, "creation_time": "2005-03-09T19:30:06Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 33936, "attachment_id": null, "id": 72069, "time": "2005-03-09T19:32:15Z", "creator": "rwong@ariba.com", "creation_time": "2005-03-09T19:32:15Z", "is_private": false, "text": "By the way, forget to mention the error I got, which is not a lot, and does not \nshow the stacktrace:\n\n\"The Reference for URI cid:22375148.1068765666350@cxml.org has no \nXMLSignatureInput.\"\n"}, {"count": 2, "tags": [], "bug_id": 33936, "attachment_id": null, "id": 72086, "time": "2005-03-09T22:17:06Z", "creator": "raul-info@r-bg.com", "creation_time": "2005-03-09T22:17:06Z", "is_private": false, "text": "Please, test it against version 1.2.1 the behaviour has change and now only if\nthe the InputStrean is a ByteArrayInputStream."}, {"count": 3, "tags": [], "creator": "rwong@ariba.com", "attachment_id": null, "text": "(In reply to comment #2)\n> Please, test it against version 1.2.1 the behaviour has change and now only if\n> the the InputStrean is a ByteArrayInputStream.\n\nThanks for the update. I tested with 1.2.1. It worked. However, I wonder why \nthis is printed to system err rather than logging it.\n\n        if (_inputOctetStreamProxy.markSupported()) {\n            System.err.println(\"Mark Suported but not used as reset\");\n        }\n\nWe have unit test code that compares output from previous versions with that \nfrom the current versions, and the system.err messages causes a mismatch in the \ncomparison. We should be able to our baseline accordingly, but I wonder if \nother developers might have similar problem, so it would be nice to log the \nmessage instead of println to System.err.\n\nThanks.", "id": 72096, "time": "2005-03-10T00:14:37Z", "bug_id": 33936, "creation_time": "2005-03-10T00:14:37Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 33936, "attachment_id": null, "id": 72102, "time": "2005-03-10T00:39:10Z", "creator": "raul-info@r-bg.com", "creation_time": "2005-03-10T00:39:10Z", "is_private": false, "text": "Sorry, some debugging info missed. It is now fixed in CVS.\nI will change the state to fixed, when I update the changelog.\n"}, {"count": 5, "tags": [], "bug_id": 33936, "attachment_id": null, "is_private": false, "id": 91972, "time": "2006-08-06T17:51:44Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-08-06T17:51:44Z", "text": "Closing old bugs."}]
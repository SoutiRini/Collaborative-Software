[{"count": 0, "tags": [], "bug_id": 2378, "attachment_id": null, "text": " ", "id": 3315, "time": "2001-06-28T06:36:20Z", "creator": "georgec@towers.com", "creation_time": "2001-06-28T06:36:20Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 2378, "is_private": false, "text": "Created attachment 265\nError report from Xerces", "id": 3318, "time": "2001-06-28T07:06:21Z", "creator": "georgec@towers.com", "creation_time": "2001-06-28T07:06:21Z", "attachment_id": 265}, {"count": 2, "tags": [], "creator": "georgec@towers.com", "attachment_id": 266, "id": 3319, "time": "2001-06-28T07:07:15Z", "bug_id": 2378, "creation_time": "2001-06-28T07:07:15Z", "is_private": false, "text": "Created attachment 266\nThe Schema document"}, {"count": 3, "tags": [], "bug_id": 2378, "attachment_id": 267, "text": "Created attachment 267\nThe instance document", "id": 3320, "time": "2001-06-28T07:07:45Z", "creator": "georgec@towers.com", "creation_time": "2001-06-28T07:07:45Z", "is_private": false}, {"count": 4, "tags": [], "creator": "georgec@towers.com", "text": "Created attachment 268\nThe program that generates the Error report", "id": 3321, "time": "2001-06-28T07:08:34Z", "bug_id": 2378, "creation_time": "2001-06-28T07:08:34Z", "is_private": false, "attachment_id": 268}, {"count": 5, "tags": [], "creator": "georgec@towers.com", "attachment_id": null, "id": 3322, "time": "2001-06-28T07:20:24Z", "bug_id": 2378, "creation_time": "2001-06-28T07:20:24Z", "is_private": false, "text": "In Xerces 1.4.1 attempting to validate an XML document with recursive \nstructures results in the parser, at the first level of recursion (that is to \nsay, <tag><tag>bug is here</tag></tag>), saying that the element is \nundeclared.  What's funny is that, in spite of being \"undeclared\", the parser \nalso complains that mandatory attributes for the element be present (the \nattributes DO exist in the instance document) :)  What I find strange is that \nfor other simpler documents I have written recursive structures work fine.  The \nchoice of parsers has no bearing either: both SAXParser and DOMParser give the \nsame errors.  To get the errors, I implemented a very basic error handler that \nI'm including below in a piece of Java code (actually, this program is the very \none that generates the errors).\n\nAlso, there are some datatype validation bugs in Xerces 1.4.1 that are not \npresent in 1.4.0.  For example, Xerces treats the same element \n(<detailedDescription>) as a different datatype in different cases.  I have the \ntype declared as xsd:string, but in different positions in the instance \ndocument it is treated as a user-defined string type, and even an xsd:float.  \nAgain, this problem doesn't exist under Xerces 1.4.0.\n\nHere are the schema and the instance document that cause the errors, as well as \nthe error I receive from Xerces under JDK 1.3.  The instances are a bit long, \nand some of the structures might be a little convoluted, so please don't \nhesitate to write if you're at all confused!"}, {"count": 6, "tags": [], "bug_id": 2378, "is_private": false, "text": "In Xerces 1.4.1 attempting to validate an XML document with recursive \nstructures results in the parser, at the first level of recursion (that is to \nsay, <tag><tag>bug is here</tag></tag>), saying that the element is \nundeclared.  What's funny is that, in spite of being \"undeclared\", the parser \nalso complains that mandatory attributes for the element be present (the \nattributes DO exist in the instance document) :)  What I find strange is that \nfor other simpler documents I have written recursive structures work fine.  The \nchoice of parsers has no bearing either: both SAXParser and DOMParser give the \nsame errors.  To get the errors, I implemented a very basic error handler that \nI'm including below in a piece of Java code (actually, this program is the very \none that generates the errors).\n\nAlso, there are some datatype validation bugs in Xerces 1.4.1 that are not \npresent in 1.4.0.  For example, Xerces treats the same element \n(<detailedDescription>) as a different datatype in different cases.  I have the \ntype declared as xsd:string, but in different positions in the instance \ndocument it is treated as a user-defined string type, and even an xsd:float.  \nAgain, this problem doesn't exist under Xerces 1.4.0.\n\nHere are the schema and the instance document that cause the errors, as well as \nthe error I receive from Xerces under JDK 1.3.  The instances are a bit long, \nand some of the structures might be a little convoluted, so please don't \nhesitate to write if you're at all confused!", "id": 3323, "time": "2001-06-28T07:27:29Z", "creator": "georgec@towers.com", "creation_time": "2001-06-28T07:27:29Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 2378, "is_private": false, "text": "1. In TraverseSchema, 'push' and 'pop' of 'fCurrentTypeNameStack' were not in-\nsync.\n2. In XMLValidator, sometimes 'fCurrentDV' is not cleared after callEndElement.", "id": 3426, "time": "2001-07-05T10:58:22Z", "creator": "sandygao@ca.ibm.com", "creation_time": "2001-07-05T10:58:22Z", "attachment_id": null}]
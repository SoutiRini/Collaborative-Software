[{"count": 0, "text": "Created attachment 31462\nWAR file to reproduce exception\n\nEL expressions in jspx-files are Java-String-backslash-decoded twice when they're part of static template text. They're even decoded twice when they're part of certain JSP-Tag attributes, but they're only decoded once during processing when part of a JSTL tag attribute:\n\n<!-- Works as expected yielding \\?resize as value of asd -->\n<c:set var=\"asd\" value=\"${'\\\\?resize'}\" />\n\n<!-- Won't work, but should -->\n<set data-value=\"${'\\\\?resize'}\" />\n\n<!-- dito -->\n<jsp:element name=\"${'\\\\?resize'}\"></jsp:element>\n\n<!-- Works, but yields actually invalid results -->\n<set data-value=\"${'\\\\\\\\?resize'}\" />\n\nDuring JSP compiling the following exception is thrown (taken from Tomcat log):\n\nApr 01, 2014 10:51:31 AM org.apache.catalina.core.StandardWrapperValve invoke\nSchwerwiegend: Servlet.service() for servlet [jsp] in context with path [/tomcat_test] threw exception [/index.jspx (line: 12, column: 37) \"${'\\\\?resize'}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\\?resize'}]] with root cause\norg.apache.jasper.JasperException: /index.jspx (line: 12, column: 37) \"${'\\\\?resize'}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\\?resize'}]\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1399)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529)\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2427)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2433)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:474)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2375)\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1817)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:373)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:353)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:340) [...]\n\nAs you can see the \\\\ get processed to \\ between the output of the line information and the actual EL parsing.\n\nIn tomcat 7.0.27 the above examples work and produce the correct output.", "bug_id": 56334, "is_private": false, "id": 174196, "time": "2014-04-01T08:58:31Z", "creator": "pinl@chamaeleon.de", "creation_time": "2014-04-01T08:58:31Z", "tags": [], "attachment_id": 31462}, {"count": 1, "tags": [], "creator": "pinl@chamaeleon.de", "attachment_id": null, "is_private": false, "id": 174236, "time": "2014-04-03T07:40:33Z", "bug_id": 56334, "creation_time": "2014-04-03T07:40:33Z", "text": "Tomcat 7.0.53 still throws an Exception, but now the \\\\-decoding seems to be performed in an earlier step (as you can see the double-\\ has already been decoded in the first part of the exception message):\n\nervlet.service() for servlet [jsp] in context with path [/tomcat_test] threw exception [/index.jspx (line: 15, column: 37) \"${'\\?resize'}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\\?resize'}]] with root cause\norg.apache.jasper.JasperException: /index.jspx (line: 15, column: 37) \"${'\\?resize'}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${'\\?resize'}]\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1411)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772)\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251) [...]"}, {"count": 2, "tags": [], "text": "A binary search through recent 7.0.x Tomcat versions shows that this bug has been introduced with 7.0.52, i.e. 7.0.50 shows correct behaviour while .52 is broken.", "is_private": false, "bug_id": 56334, "id": 174271, "time": "2014-04-04T11:04:42Z", "creator": "pinl@chamaeleon.de", "creation_time": "2014-04-04T11:04:42Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "pinl@chamaeleon.de", "attachment_id": null, "id": 174272, "time": "2014-04-04T11:20:46Z", "bug_id": 56334, "creation_time": "2014-04-04T11:20:46Z", "is_private": false, "text": "(In reply to Markus from comment #2)\n> A binary search through recent 7.0.x Tomcat versions shows that this bug has\n> been introduced with 7.0.52, i.e. 7.0.50 shows correct behaviour while .52\n> is broken.\n\nOff-by-one: 47 works, 50 is broken. Sorry."}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 174516, "time": "2014-04-12T20:23:15Z", "bug_id": 56334, "creation_time": "2014-04-12T20:23:15Z", "text": "This has been fixed in 8.0.x for 8.0.6 onwards.\n\nThis has been fixed in 7.0.x for 7.0.54 onwards.\n\nThe fix has been proposed for 6.0.x."}, {"count": 5, "tags": [], "bug_id": 56334, "attachment_id": null, "text": "I'm looking at this again and I am not sure that all of the examples given in the original description are correct.\n\nThere are multiple factors at play here as the JSP spec has one rule for escaping and the EL spec has very different rules. I need to think carefully about exactly which spec applies at which point.\n\nThe short version is that there is going to be a further commit for this issue and the end result might not be exactly what you are expecting.", "id": 174601, "time": "2014-04-15T18:55:06Z", "creator": "markt@apache.org", "creation_time": "2014-04-15T18:55:06Z", "is_private": false}, {"count": 6, "text": "The question is whether EL should be processed as-is or inside some \"context\". I always thought (and till 7.0.47 it seems to be the case) that EL parsing is \"context free\", regardless whether the expression is in\n\n<c:set value=\"${'\\\\?'}\" ... />\n\nor in\n\n<set attribute=\"${'\\\\?'}\" />\n\n(\"context free\" not meaning Chomsky Hierarchy Context Free btw. but \"without regarding the context outside the EL expression\" ;)\n\nI skimmed through the JSP 2.2 spec and while \\ in JSP documents are indeed treated specially I'd say this only applies to \\ *outside* of EL expressions.\n\nEspecially when reading section JSP.10.1.11:\n\n\"For each escaped \\ preceeding an unescaped expression ${foo}, a ${'\\\\'} must be\ngenerated in the XML view, and neighboring generated ${'\\\\'} expressions must\nbe combined\"\n\n\nI think this implies \"treat \\ inside EL the same way regardless of position\" (\"context free\" in the notion above), because otherwise the spec would have to read something like \"convert \\ to ${'\\\\'} in case A and to ${'\\\\\\\\'} in case B\".\n\n\nIn \"The Java EE 6 Tutorial, Volume I\" Chapter 6 section \"Referring to Object Properties Using Value Expressions\" http://docs.oracle.com/cd/E19226-01/820-7627/gjddd/#6nisfjmda the following literals are defined for EL (amongst others):\n\n\"String: with single and double quotes; \" is escaped as \\\", ' is escaped as \\', and \\ is escaped as \\\\\"\n\n\nSo the EL specification defines the escaping literals *inside* EL expressions and the JSP specification defines processing rules of \\ *outside* EL expressions, and \\ inside EL should not be pre-processed by some JSP specific logic. (I could be wrong, but that's how I'd sitck together those different pieces...)", "bug_id": 56334, "is_private": false, "id": 174613, "time": "2014-04-16T08:19:23Z", "creator": "pinl@chamaeleon.de", "creation_time": "2014-04-16T08:19:23Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 174621, "time": "2014-04-16T11:17:25Z", "bug_id": 56334, "creation_time": "2014-04-16T11:17:25Z", "text": "I think I agree with you completely.\n\nI have just applied an additional commit to 8.0.x to handle the different escaping required inside and outside EL expressions. If you are able to test against a build of the latest 8.0.x that would be great.\n\nI have a few things I need to clean up before I back-port it but that should happen later today."}, {"count": 8, "tags": [], "bug_id": 56334, "attachment_id": null, "text": "(In reply to Markus from comment #0)\n> \n> <!-- dito -->\n> <jsp:element name=\"${'\\\\?resize'}\"></jsp:element>\n> \n\nFor a record, the above example makes no sense to me, as you should not generate XML tags with such names.\n\n[40]   \tSTag\t   ::=   \t'<' Name (S Attribute)* S? '>'\n\n[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\n\n4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n\n[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n\nper http://www.w3.org/TR/REC-xml/", "id": 174622, "time": "2014-04-16T11:22:42Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-16T11:22:42Z", "is_private": false}, {"count": 9, "tags": [], "text": "(In reply to Konstantin Kolinko from comment #8)\n> (In reply to Markus from comment #0)\n> > \n> > <!-- dito -->\n> > <jsp:element name=\"${'\\\\?resize'}\"></jsp:element>\n> > \n> \n> For a record, the above example makes no sense to me, as you should not\n> generate XML tags with such names.\n\nYes, that's true - however it should not produce an exception during runtime either - the produced markup might be invalid, but the (process of) producing is not.", "is_private": false, "id": 174623, "creation_time": "2014-04-16T11:25:41Z", "time": "2014-04-16T11:25:41Z", "creator": "pinl@chamaeleon.de", "bug_id": 56334, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 10, "id": 174833, "time": "2014-04-24T08:38:19Z", "bug_id": 56334, "creation_time": "2014-04-24T08:38:19Z", "text": "This has been fixed in 6.0.x for 6.0.40 onwards."}, {"count": 11, "tags": [], "text": "Created attachment 31566\n2014-04-28_tc8_XmlEscapeNonELVisitor_tests.patch\n\nAdditional tests and fix for Validator$ValidateVisitor$XmlEscapeNonELVisitor.\n\nWithout this fix the patched bug56334.jspx fails at run time:\n[[[\norg.apache.jasper.JasperException: /bug56334.jspx (line: 34, column: 45) \"05b$${&amp;${1+1}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [05b$${&amp;${1+1}]\n]]]\n\nWith this fix Java fails to compile the generated java file.\nbug56334_jspx.java contains:\n[[[\n      out.write(\"<set data-value=\\\"05a\\$\\${&amp;\\\"/>\");\n      out.write(\"<set data-value=\\\"\" + (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"05b\\\\$\\\\${&amp;${1+1}\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null) + \"\\\"/>\");\n      out.write(\"<set data-value=\\\"\" + (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"05c\\\\#\\\\#{&gt;${'hello'}&lt;\", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null) + \"\\\"/>\");\n]]]\n\nIn 05a the Java escaping is missing.\nIn 05b and 05c the Java escaping is OK.\n\nSomething else is missing.", "attachment_id": 31566, "bug_id": 56334, "id": 174920, "time": "2014-04-28T19:19:25Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-28T19:19:25Z", "is_private": false}, {"count": 12, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 174921, "time": "2014-04-28T19:30:54Z", "bug_id": 56334, "creation_time": "2014-04-28T19:30:54Z", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #11)\n\n2) With fix in Comment 11 it also breaks TestParser.testBug55198() test case.\n\nIt now generates HTML that contains (see bug55198.tagx)\nonclick=\"window.alert(&#034;2bar2&lt;&amp;&gt;&#034;)\"\nonclick=\"window.alert(&\\#034;3a&amp;b3&\\#034;)\"\n\nNote the '\\#'."}, {"count": 13, "text": "(In reply to Konstantin Kolinko from comment #12)\n\nThe additional issues have been fixed in Tomcat 7 and 8 and proposed for Tomcat 6.\nThe fixes will be in 7.0.54, 8.0.6.", "bug_id": 56334, "is_private": false, "id": 175146, "time": "2014-05-11T18:00:10Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-05-11T18:00:10Z", "tags": [], "attachment_id": null}, {"count": 14, "tags": [], "text": "Fixed in Tomcat 6. The fix will be in 6.0.40 onwards.", "is_private": false, "bug_id": 56334, "id": 175148, "time": "2014-05-11T19:54:46Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-05-11T19:54:46Z", "attachment_id": null}, {"count": 15, "text": "While some \\\\ in EL-strings work now, some others are still broken (in 7.0.54).\n\nFor example, the following fragment works now:\n\n<set data-value=\"${'\\\\?resize'}\" />\n\nThis also works:\n\n<set data-content=\"${fn:escapeXml('\\\\?resize=.+')}\" />\n\nBut this throws an Exception during JSP compiling:\n\n<set data-content=\"${fn:contains(some_value, '\\\\?resize=.+')}\" />\n\nFull stack trace:\n\norg.apache.jasper.JasperException: /page.jspx (line: 14, column: 68) \"${fn:contains(some_value, '\\\\?resize=.+')}\" contains invalid expression(s): javax.el.ELException: Failed to parse the expression [${fn:contains(some_value, '\\\\?resize=.+')}]\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:199) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.getJspAttribute(Validator.java:1420) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:772) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$UninterpretedTag.accept(Node.java:1251) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:895) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$CustomTag.accept(Node.java:1538) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:529) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:564) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2429) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2435) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:474) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2377) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Validator.validateExDirectives(Validator.java:1841) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:217) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:373) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:353) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:340) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:657) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390) ~[jasper.jar:7.0.54]\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334) ~[jasper.jar:7.0.54]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727) ~[servlet-api.jar:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:748) ~[catalina.jar:7.0.54]\n\tat org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:604) ~[catalina.jar:7.0.54]\n\tat org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:543) ~[catalina.jar:7.0.54]\n\tat a.b.c.d.webdav.Request.include(Request.java:206) ~[na:3.6.235]\n\tat a.b.c.d.e.render.RenderingFile.generate(RenderingFile.java:494) ~[na:3.6.235]\n\tat a.b.c.d.e.render.RenderingFile.getContent(RenderingFile.java:139) ~[na:3.6.235]\n\tat a.b.c.d.e.render.RenderingFile.getContent(RenderingFile.java:103) ~[na:3.6.235]\n\tat a.b.c.d.file.FileWrapper.getContent(FileWrapper.java:173) ~[na:3.6.235]\n\tat a.b.c.d.file.FileWrapper.getContent(FileWrapper.java:173) ~[na:3.6.235]\n\tat a.b.c.d.file.FileWrapper.getContent(FileWrapper.java:173) ~[na:3.6.235]\n\tat a.b.c.d.webdav.method.GET.run(GET.java:152) ~[na:3.6.235]\n\tat a.b.c.d.webdav.method.AbstractMethodHandler.handleRequest(AbstractMethodHandler.java:52) ~[na:3.6.235]\n\tat a.b.c.d.engine.Manager.handleRequest(Manager.java:361) [na:3.6.235]\n\tat a.b.c.d.engine.Manager.doFilter(Manager.java:283) [na:3.6.235]\n\tat a.b.d.w.i.ManagerWrapper.doFilter(ManagerWrapper.java:64) [ManagerWrapper.class:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) [catalina.jar:7.0.54]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:7.0.54]\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950) [catalina.jar:7.0.54]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) [catalina.jar:7.0.54]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) [catalina.jar:7.0.54]\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040) [tomcat-coyote.jar:7.0.54]\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607) [tomcat-coyote.jar:7.0.54]\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:314) [tomcat-coyote.jar:7.0.54]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_03]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_03]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-coyote.jar:7.0.54]\n\tat java.lang.Thread.run(Thread.java:722) [na:1.7.0_03]\n\nThe really funny part here is that in Eclipse's Console view I am unable to copy+paste the Exception message (Eclipse Kepler, Win7), the copied area always stops right after the comma in \"fn:contains(some_value,\", so it looks like there's something weird going on. There seem to be two blanks at that location in console view at this location.\n\nAnalyzing this further proves that when this Exception is constructed (DefaultErrorHandler.java line 43), the string errMsg passed to this method contains a NUL-char (\\u0000) at index 26 (right after the comma):\n\nerrMsg.getBytes() ->\n    (byte[]) [34, 36, 123, 102, 110, 58, 99, 111, 110, 116, 97, 105, 110, 115, 40, 115, 111, 109, 101, 95, 118, 97, 108, 117, 101, 44, 0, 32, 39, 92, 92, 63, ...\n\nThis NUL is taken from the ELException that is catched and rethrown in Validator.java line 1420.\n\nThis Exception is thrown in ExpressionBuilder.java line 145, and the Exception details there are interesting: the EL parser fails at the NUL char in expr, and the Exception message there is:\norg.apache.el.parser.ParseException: Encountered \" <ILLEGAL_CHARACTER> \" \"\" at line 1, column 26.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n\nThis NUL char ist NOT in 'value' in Validator$ValidateVisitor.visit() (Validator.java line 773), this means that it is added inside getJspAttribute(). Stepping through the code shows that this happens around line 1403 of the same file:\nXmlEscapeNonELVisitor v = new XmlEscapeNonELVisitor(\n\npageInfo.isDeferredSyntaxAllowedAsLiteral());\nel.visit(v);\nvalue = v.getText();\n\nSo basically something inside XmlEscapeNonELVisitor is causing this error. And I think this happens in ELParser.java, 'quote' is initialized to 0 (the string literal starts with a blank, not with the ' in my example expression - it is not trimmed), and this char 0 is appended to 'output' in line 320.\n\nRegards\nMarkus", "bug_id": 56334, "is_private": false, "id": 175850, "time": "2014-06-17T13:24:39Z", "creator": "pinl@chamaeleon.de", "creation_time": "2014-06-17T13:24:39Z", "tags": [], "attachment_id": null}, {"count": 16, "tags": [], "text": "Created attachment 31721\ntest_56334_c15.jspx\n\nI have not dug into the NUL character issue yet.\nA quick testing shows that the issue is reproducible with the current 7.0.x (@1603024).\n\nI am attaching the JSP that I used to reproduce the issue from Comment 15.\nSteps to reproduce:\n1. Put test_56334_c15.jspx into /webapps/examples/\n2. Go to http://localhost:8080/examples/test_56334_c15.jspx\n3. Actual behaviour: Compilation failure, as reported in Comment 15.\nExpected behaviour: Render the page.", "attachment_id": 31721, "bug_id": 56334, "id": 175851, "time": "2014-06-17T13:43:27Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-06-17T13:43:27Z", "is_private": false}, {"count": 17, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 175862, "time": "2014-06-18T09:56:12Z", "bug_id": 56334, "creation_time": "2014-06-18T09:56:12Z", "is_private": false, "text": "(In reply to Markus from comment #15)\n> But this throws an Exception during JSP compiling:\n> \n> <set data-content=\"${fn:contains(some_value, '\\\\?resize=.+')}\" />\n> \n\nIf I remove whitespace after \",\", it works successfully. The following works:\n<set data-content=\"${fn:contains(some_value,'\\\\?resize=.+')}\" />"}, {"count": 18, "tags": [], "creator": "pinl@chamaeleon.de", "attachment_id": null, "id": 175863, "time": "2014-06-18T10:10:28Z", "bug_id": 56334, "creation_time": "2014-06-18T10:10:28Z", "is_private": false, "text": "Yes, I thought so after digging through the source code, but could not test this yesterday. Basically the quote character detection fails because teh first character ' ' is not recognized as one, leading quote being initalized to (char) 0; this is later on added to the resulting String."}, {"count": 19, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 31724, "id": 175865, "time": "2014-06-18T11:16:22Z", "bug_id": 56334, "creation_time": "2014-06-18T11:16:22Z", "is_private": false, "text": "Created attachment 31724\n2014-06-17_tc8_56334_c15_v1.patch\n\nv1 of patch for Comment 15, including test cases\n\nThe test case \"07g\" fails, it is commented out.\n\nWhen there is a quoted string, a token for it is created by ELParser as\n\n  return new QuotedString(getAndResetWhiteSpace(), buf.toString());\n\nIt is later converted into ELText object\nELexpr.add(new ELNode.ELText(curToken.toString()));\n\nThe leading whitespace in ELText messes up quotes detection in ELParser.escapeELText().\nThe test \"07g\" checks whether single quotes in the value are re-escaped correctly."}, {"count": 20, "tags": [], "text": "#15 fixed in trunk for 8.0.9 and in 7.0.x for 7.0.55 and proposed for 6.0.x.", "attachment_id": null, "bug_id": 56334, "id": 175879, "time": "2014-06-18T21:04:29Z", "creator": "markt@apache.org", "creation_time": "2014-06-18T21:04:29Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "count": 21, "id": 176452, "time": "2014-07-17T11:17:30Z", "bug_id": 56334, "creation_time": "2014-07-17T11:17:30Z", "text": "*** Bug 56731 has been marked as a duplicate of this bug. ***"}, {"count": 22, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 178201, "time": "2014-09-30T13:13:47Z", "bug_id": 56334, "creation_time": "2014-09-30T13:13:47Z", "text": "This has been fixed in 6.0.x for 6.0.42 onwards."}]
[{"count": 0, "tags": [], "bug_id": 39451, "attachment_id": null, "text": "I'd like the batik bridge package to function more like a Builder or Abstract\nFactory pattern from the Design Patterns book so that 3rd parties could take\nadvantage of the existing reader code in bridge to build their own graphics node\nimplementations. (Note that the  book also contains a \"Bridge\" pattern, but I\ndon't think batik.bridge is that kind of bridge. It seems more like an Abstract\nFactory) The builder/factory would build a tree of graphics nodes of which gvt\nwould be one implementation. To accomplish this I'm trying to create an abstract\nfactory layer between gvt and bridge so new clients can create their own object\ntrees by subclassing the abstract factory classes. \n\nI'm not a batik expert, so I'm looking for feedback on whether this project\nseems doable and/or desireable, and if so, on implementation issues. I've done a\n skeletal first pass of creating the abstraction. In the attached code I've\ncreated a new package, org.apache.batik.bridge.gnode, which includes a set of\ninterfaces that encapsulate the gvt-specific method calls made from the bridge\nclasses. I've refactored some of the bridge classes so they only reference the\nnew gnode interfaces, and I've moved some gvt-dependent bridge classes to a new\npackage, org.apache.batik.bridge.gvt. (that may not be the best place for them,\nbut that's where they are now). Those classes are dependent on gvt. \n\nI've also created 'demo.batik.bridge.myvt' which contains factory classes to\nbuild trees of objects from package 'demo.myvt'. I've only refactored a small\nbit of the existing classes. I'm posting this here to see if I can get feedback\non what I've done so far. Thanks for your comments.", "id": 88670, "time": "2006-04-30T07:33:10Z", "creator": "seth.tager@gmail.com", "creation_time": "2006-04-30T07:33:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 39451, "attachment_id": 18209, "id": 88671, "time": "2006-04-30T07:37:10Z", "creator": "seth.tager@gmail.com", "creation_time": "2006-04-30T07:37:10Z", "is_private": false, "text": "Created attachment 18209\ncontains modifed source from bridge and new code in package demo"}, {"count": 2, "tags": [], "bug_id": 39451, "attachment_id": null, "is_private": false, "id": 88683, "time": "2006-04-30T23:34:18Z", "creator": "deweese@apache.org", "creation_time": "2006-04-30T23:34:18Z", "text": "So I had some time to look into this yesterday.  I didn't get through\neverything but I think I looked at enough to get the gist of things.\nIn short you tool the basic interface of the GraphicsNode and turned\nthem into interfaces.  Then the Bridges interact with these interfaces.\n\n   While I'm not dead set against this I would say that this is not\nparticularly exciting to me.  The whole 'gnode' interface is still\nrather large and proper implementation of it would be extremely\ndifficult (for example all of text layout is done in the GVT tree yet\nthis must be done properly for complex fills to be calculated properly).\n\n   So there is a non-trivial interaction between the Bridge classes\nand the GVT implementation (this only get's worse when you consider\nthe SVG DOM).  To be honest I'm not interested in trying to debug\nacross libraries as this would require (it works for GVT because of\n'X' but fails for BLAH, but the Bridge should really handle case 'Z'\neven though it can't occur with the GVT...)\n\n   Also this would really push the GVT out as a public 'interface' \nmeaning that any change to the Bridge<->GVT tree would break \n'external' software - or we would have to add new subinterfaces of \ninterfaces that the bridge would check for (Gahhh!).\n\n   Finally, I think that in _most_ cases people could, for less work,\nsimply subclass our existing GVT classes, and subclass the Bridges\n(replacing the 'createGraphicsNode' method) to build a 'custom' GVT\ntree (all the above steps are required in the 'gnode' case anyways).\n\n   The only drawback would be for someone who already had a graphics\ntree structure that was 'by chance' essentially identical in structure\nto the GVT tree.\n\n   I encourage other people to look at it and come to separate\nopinions, I'm not dead set against it but I think it would add\nsignificantly to the effort needed to develop Batik and I don't\nthink there would be significant benefit to Batik."}, {"count": 3, "tags": [], "bug_id": 39451, "attachment_id": null, "id": 89169, "time": "2006-05-16T17:24:42Z", "creator": "seth.tager@gmail.com", "creation_time": "2006-05-16T17:24:42Z", "is_private": false, "text": "\nI didn't provide much motivation when I posted this RFE, so here is some of\nthat, along with some thoughts on Thomas' comments.\n\nIt's possible that GNode would be large and difficult, but I think the benefits\nwould justify the effort. SVG has the potential to be the lingua franca (or RTF,\nif you prefer) of graphics applications, but at present it addresses only XML to\nraster conversions (i.e. gif, tiff, jpg). The goal of this proposal is to\npromote the potential of SVG to address conversion from any app to any other app.\n\nA way to do this is to give developers a leg up on importing SVG files into\ntheir apps. This enhancement would be useful for any application that deals with\ngraphics.\n\nMy goal in the attached code is not to build a 'custom gvt tree', but to build a\ncompletely distinct object graph for an application that has nothing to do with\nsvg. (The demo code may look a lot like gvt, but it doesn't have to be.) I think\nit could potentially have a large impact on the disemination of  svg if it were\neasy for developers to import svg documents and convert them to their own\napplication data structures.\n\nSubclassing gvt classes is not sufficient and has the negetive effect of making\ngvt a defacto public interface. Since it is not designed for that, apps that\nused it that way would likely break in complicated ways in subsequent releases\nof batik, which would make subclassing gvt a risk not worth taking.\n\nThe point of the GNode interface is to avoid pushing gvt out as a public\ninterface. GNode would be the public interface and it would be designed for\npublic consumption.\n\nI'm not sure I get the possbility where 'Bridge should really handle case 'Z'\neven though it can't occur with GVT. If we're talking about implementing the SVG\nspec it seems unlikely that there could be a situation where it was possible to\nwrite legal svg that wasn't handled by gvt. In addition, I think the GNode\ninterface should be made as simple as possible, leaving most of the\nimplementation details in subclasses. The more work required of the subclass,\nthe less chance there will be of conflicts."}]
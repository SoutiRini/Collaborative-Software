[{"count": 0, "tags": [], "bug_id": 5997, "text": "I am finding that tasks built under ANT 1.4.1 are not binary compatible with ANT 1.3. I have experienced the problem developing the Checkstyle task. When build under ANT 1.4.1 it fails to execute under ANT 1.3 with the exception below.\n\nThis is becoming a major headache for people (like me) who develop third-party ANT tasks.\n\nThe work around is to build the task under ANT 1.3. This indicates that the Checkstyle task does not require any ANT 1.4.1 specific features.\n\nTo reproduce this bug, build the checkstyle from source (http://checkstyle.sourceforge.net) under ANT 1.4.1. Then attempt to run it under ANT 1.3\n\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nBUILD FAILED\n\nc:\\apps\\checkstyle-src-1.4\\build.xml:187: java.lang.NoClassDefFoundError: org/apache/xalan/xslt/XSLTInputSource\n--- Nested Exception ---\njava.lang.NoClassDefFoundError: org/apache/xalan/xslt/XSLTInputSource\n        at org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator.createReport(XMLResultAggregator.java:114)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at org.apache.tools.ant.IntrospectionHelper$1.create(IntrospectionHelper.java:167)\n        at org.apache.tools.ant.IntrospectionHelper.createElement(IntrospectionHelper.java:275)\n        at org.apache.tools.ant.ProjectHelper$NestedElementHandler.init(ProjectHelper.java:535)\n        at org.apache.tools.ant.ProjectHelper$TaskHandler.startElement(ProjectHelper.java:499)\n        at com.sun.xml.parser.Parser.maybeElement(Parser.java:1391)\n        at com.sun.xml.parser.Parser.content(Parser.java:1499)\n        at com.sun.xml.parser.Parser.maybeElement(Parser.java:1400)\n        at com.sun.xml.parser.Parser.content(Parser.java:1499)\n        at com.sun.xml.parser.Parser.maybeElement(Parser.java:1400)\n        at com.sun.xml.parser.Parser.content(Parser.java:1499)\n        at com.sun.xml.parser.Parser.maybeElement(Parser.java:1400)\n        at com.sun.xml.parser.Parser.parseInternal(Parser.java:492)\n        at com.sun.xml.parser.Parser.parse(Parser.java:284)\n        at javax.xml.parsers.SAXParser.parse(SAXParser.java:155)\n        at org.apache.tools.ant.ProjectHelper.parse(ProjectHelper.java:117)\n        at org.apache.tools.ant.ProjectHelper.configureProject(ProjectHelper.java:85)\n        at org.apache.tools.ant.Main.runBuild(Main.java:403)\n        at org.apache.tools.ant.Main.main(Main.java:149)", "id": 9830, "time": "2002-01-24T02:59:55Z", "creator": "oliver@puppycrawl.com", "creation_time": "2002-01-24T02:59:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 5997, "attachment_id": null, "is_private": false, "id": 9833, "time": "2002-01-24T06:04:59Z", "creator": "steve_l@iseran.com", "creation_time": "2002-01-24T06:04:59Z", "text": "I am confused. This exception trace is not a binary compatibility error, it is \na \"junit report cant find XSLT exception\". Have you got all the jars that the \n[optional] tasks you are using in your build file in your ANT_HOME\\lib \ndirectory?\n\nI also want to emphasise that we do strive for backwards compatibility, both \nin build files and external task support. If you encounter problems, we \nwelcome the reports. You might also find being on ant-dev useful, as that way \nyou not only get advance warning of changes, you get to provide feedback \nbefore they happen."}, {"count": 2, "tags": [], "bug_id": 5997, "attachment_id": null, "id": 9834, "time": "2002-01-24T07:04:36Z", "creator": "oliver@puppycrawl.com", "creation_time": "2002-01-24T07:04:36Z", "is_private": false, "text": "Sorry - I added the wrong stack trace. Here is the proper one.\n\nBUILD FAILED\n\nc:\\oliver\\work\\sf.checkstyle\\build.xml:144: Could not create task of type: checkstyle due to java.lang.NoClassDefFoundError: org/apache/tools/ant/ProjectComponent\n--- Nested Exception ---\njava.lang.NoClassDefFoundError: org/apache/tools/ant/ProjectComponent\n        at java.lang.Class.newInstance0(Native Method)\n        at java.lang.Class.newInstance(Class.java:237)\n        at org.apache.tools.ant.Project.createTask(Project.java:439)\n        at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.java:83)\n        at org.apache.tools.ant.Target.execute(Target.java:152)\n        at org.apache.tools.ant.Project.runTarget(Project.java:898)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:536)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:510)\n        at org.apache.tools.ant.Main.runBuild(Main.java:421)\n        at org.apache.tools.ant.Main.main(Main.java:149)\n\nTotal time: 1 second\n"}, {"count": 3, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "text": "I haven't looked at the exact nature of the dependency between the\ncheckstyletask and project component  (not sure if I am allowed to read GPL code\n:-) ), but I think it could be the field reference to the protected project\nvariable which is now in ProjectComponent in this line\n\n final DirectoryScanner ds = fs.getDirectoryScanner(project);\n\n\nIf you replaced that project reference with getProject(), it may compile and run\nwith both 1.3 and 1.4.1. ", "id": 9915, "time": "2002-01-25T14:34:51Z", "bug_id": 5997, "creation_time": "2002-01-25T14:34:51Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 5997, "text": "Changed the direct reference of project to getProject(). I still get\nthe same exception.\n\nBUILD FAILED\n\nc:\\oliver\\work\\sf.checkstyle\\build.xml:144: Could not create task of type: checkstyle due to java.lang.NoClassDefFoundError: org/apache/tools/ant/ProjectComponent\n--- Nested Exception ---\njava.lang.NoClassDefFoundError: org/apache/tools/ant/ProjectComponent\n        at java.lang.Class.newInstance0(Native Method)\n        at java.lang.Class.newInstance(Class.java:237)\n        at org.apache.tools.ant.Project.createTask(Project.java:439)\n        at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.java:83)\n        at org.apache.tools.ant.Target.execute(Target.java:152)\n        at org.apache.tools.ant.Project.runTarget(Project.java:898)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:536)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:510)\n        at org.apache.tools.ant.Main.runBuild(Main.java:421)\n        at org.apache.tools.ant.Main.main(Main.java:149)\n\nTotal time: 1 second\n", "id": 9996, "time": "2002-01-28T22:19:05Z", "creator": "oliver@puppycrawl.com", "creation_time": "2002-01-28T22:19:05Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 5997, "attachment_id": null, "id": 10049, "time": "2002-01-30T00:01:43Z", "creator": "sbailliez@apache.org", "creation_time": "2002-01-30T00:01:43Z", "is_private": false, "text": "I would say that this is probably because Task inherit from ProjectComponent.\nThis is in since version 1.20(2001/8/1), that is between Ant 1.3 and Ant 1.4.\n\nSounds good, Conor ? :)\n\n"}, {"count": 6, "tags": [], "creator": "umagesh@apache.org", "attachment_id": null, "text": "You are only exposing a fundamental Java Machinery problem.  Let me simplify\nthe problem so that you understand the issue.  Create the following classes\nin individual java files:\n\npublic abstract class test2 {\n    public void x() {\n    }\n}\n\npublic abstract class test1 extends test2 {\n}\n\npublic class test1Caller extends test1 {\n    public static void main( String args[] ) {\n        try {\n            test1Caller t = (test1Caller) \n                Class.forName(\"test1Caller\").newInstance();\n            t.x();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nNow compile test1Caller.java and run it - you will have no problems.\n\nNow change test1.java to the following:\n\npublic abstract class test1 {\n    public void x() {\n    }\n}\n\nCompile test1.java *alone*.\n\nRun test1Caller\n\nYou will get an exception thrown. Recompile test1Caller.java and everything \nwill be fine.\n\nNow change test1.java back to \npublic abstract class test1 extends test2 {\n}\n\nand compile test1.java *only* and run test1Caller.  You will not have any \nproblems.\n\nSo, what is the lesson learnt?  Expecting that a generated class is always \n*backwards-ported* is a mistake.\n\nSo, coming to your problem.  Ship your task by compiling it against Ant 1.3.  \nIt will work on Ant >= 1.3 versions.  We strive to maintain backwards \n*compatibility* and not backwards *portability*, and neither should we be, IMHO.\nIf you compile it using Ant 1.4 classes and expect it to work on Ant 1.3 too, \nthen you are making a fundamental Java mis-judgement ;-(\n\nI am going to close this as WONTFIX because having to enforce backwards \nportability will seriously impact our ability to improve the product as such.\nSorry.\n\nCheers,\nMagesh\n", "id": 10191, "time": "2002-02-02T00:45:03Z", "bug_id": 5997, "creation_time": "2002-02-02T00:45:03Z", "is_private": false}]
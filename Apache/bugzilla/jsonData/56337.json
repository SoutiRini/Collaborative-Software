[{"count": 0, "tags": [], "bug_id": 56337, "is_private": false, "text": "Created attachment 31464\nSample build scripts\n\nI have two build files, the main one called build.xml:\n\n<project name=\"build\">\n\t<import file=\"hello.xml\" />\n\t<target name=\"hi\">\n\t\t<echo message=\"Hello\" />\n\t</target>\n</project>\n\nand hello.xml that it imports:\n\n<project name=\"hello\">\n\t<extension-point name=\"greeting\" />\n\t<target name=\"hi\" extensionOf=\"greeting\">\n\t\t<echo message=\"Hi!!!\" />\n\t</target>\n</project>\n\nWith Ant 1.8.4 when I run the \"greeting\" target I get:\n\n\u03bb ant greeting\nBuildfile: C:\\Development\\projects\\ant-playground\\override-target\\build.xml\n\nhi:\n     [echo] Hello\n\ngreeting:\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nHowever, with Ant 1.9.3 I get:\n\n\u03bb ant greeting\nBuildfile: C:\\Development\\projects\\ant-playground\\override-target\\build.xml\n\nhello.hi:\n     [echo] Hi!!!\n\ngreeting:\n\nBUILD SUCCESSFUL\n\nThis change in behavior is obviously wrecking havoc with our build scripts that depend on some amount of target overriding.  Is the new behavior considered the correct way and, if so, is there a way to revert back to the old behavior?\n\nI suspect this is related to bug 54940.", "id": 174203, "time": "2014-04-01T19:33:35Z", "creator": "rich@steelezone.net", "creation_time": "2014-04-01T19:33:35Z", "attachment_id": 31464}, {"count": 1, "tags": [], "bug_id": 56337, "text": "A bug 53405 \"ExtensionPoint doesn't work with nested import/include\" was fixed between 1.8.4 and 1.9.0. That's likely the reason for the change of behavior.\n\nIn your sample, the target hi in the main build file does not have the attribute extensionOf=\"greeting\". hi in the main build file overrides hi in the imported build file but does not override the extension point greeting. \n\nI feel that the behavior of Ant 1.9.3 is correct.", "id": 174234, "time": "2014-04-03T04:03:45Z", "creator": "antoine@apache.org", "creation_time": "2014-04-03T04:03:45Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 56337, "is_private": false, "count": 2, "id": 174239, "time": "2014-04-03T09:20:25Z", "creator": "jlboudart@apache.org", "creation_time": "2014-04-03T09:20:25Z", "text": "I agree with Antoine current behavior is the expected one.\nI guess, you found an expected side effect of 1.8.4 implementation :). There is no kind of inheritance here. \n\nI think it would be really dangerous when overriding a target to be attached to an extensionPoint you haven't declared by yourself.\n\nIf you add the extensionOf on the specific \"hi\" target like :\n<project name=\"build\">\n\t<import file=\"hello.xml\" />\n\t<target name=\"hi\" extensionOf=\"greeting\">\n\t\t<echo message=\"Hello\" />\n\t</target>\n</project>\n\nYou would then results both \"hi\" targets injected in greeting extension-point. I think this is not what you expect.\n\nIt's difficult to understand your use case but you probably \"misused\" extensionpoint. Wiring target to an extension point in your generic build file and then override this target in specifics build.xml seems not optimal.\n\nI would then recommend you to keep to not wire your target to extension point in your generic build file and give this job to specific build file with either :\n * a target like this <target name=\"specific\" extensionOf=\"myExtensionPoint\"/>\n * or using bind target task (see https://ant.apache.org/manual/Tasks/bindtargets.html)."}, {"count": 3, "tags": [], "bug_id": 56337, "is_private": false, "text": "My use case:\n\nImagine a java.xml that, among many other things, hooks into a compile extension point:\n\n<project name=\"java\">\n        <import file=\"compile.xml\" />\n\t<target name=\"java:compile\" extensionOf=\"compile\">\n\t\t<javac ... />\n\t</target>\n        .\n        .\n        .\n</project>\n\nfrom compile.xml:\n\n<project name=\"compile\">\n\t<extension-point name=\"compile\" />\n</project>\n\nMost projects would find using the default implementation of the java:compile target provided by the compile extension point, but sometimes we'd like to override its behavior:\n\n<project name=\"build\">\n\t<import file=\"java.xml\" />\n\t<target name=\"java:compile\">\n\t\t<javac ... />\n\t</target>\n</project>\n\nThis is usually needed when the default implementation doesn't do what is needed by this particular build and the generic scripts aren't quite flexible enough.\n\nWhile I do see the logic of the change: while I overrode the target--calling the java:compile target directly does work--the extension point is preserving its dependencies like regular dependencies do, I'm a little stuck.  Without the override, how would I allow a build script author to do what they need without resorting to copying and pasting the entirety of the original java.xml?  (It does more than just compile: javadoc, zipping up the source, etc.)  I'm failing to see how <bindtargets> helps in this case...unless I ditched using extensionOf entirely, using <bindtargets> with unless:true attributes and a while bunch of properties for each?  That seems complicated and error prone.", "id": 174246, "time": "2014-04-03T11:37:15Z", "creator": "rich@steelezone.net", "creation_time": "2014-04-03T11:37:15Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 56337, "attachment_id": null, "text": "I understand that you want to tie a target to an extension point and also have the possibility to override a default implementation\n\ndoes the below solve your problem ?\n\n<project name=\"build\">\n\n\n\t<import file=\"hello.xml\" />\n\n\t<target name=\"hi-impl\">\n\t\t<echo message=\"Hello\" />\n\t</target>\n\n</project>\n\n<project name=\"hello\">\n\n\t<extension-point name=\"greeting\" />\n\t<target name=\"hi\" extensionOf=\"greeting\" depends=\"hi-impl\">\n\t</target>\n        <target name=\"hi-impl\">\n\t\t<echo message=\"Hi!!!\" />\n        </target>\n\n</project>\n\nthe output is this :\n\nbash-3.2$ ant greeting\nBuildfile: /Users/antoine/dev/asf/56337/build.xml\n\nhi-impl:\n     [echo] Hello\n\nhi:\n\ngreeting:\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds", "id": 174264, "time": "2014-04-04T01:18:04Z", "creator": "antoine@apache.org", "creation_time": "2014-04-04T01:18:04Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 56337, "attachment_id": null, "is_private": false, "id": 174273, "time": "2014-04-04T12:43:08Z", "creator": "rich@steelezone.net", "creation_time": "2014-04-04T12:43:08Z", "text": "Yes it does even though it takes more forethought to implement.  That might be a good thing because I can establish a naming pattern for those targets that are intended to be overridden, rather than having the current \"anything goes\" mechanism today.\n\nThanks for taking the time to look into this."}, {"attachment_id": null, "tags": [], "bug_id": 56337, "is_private": false, "count": 6, "id": 174294, "time": "2014-04-05T01:30:22Z", "creator": "antoine@apache.org", "creation_time": "2014-04-05T01:30:22Z", "text": "marking as resolved."}]
[{"count": 0, "tags": [], "creator": "pedro_cristian@yahoo.fr", "attachment_id": null, "id": 1883, "time": "2001-04-17T09:19:12Z", "bug_id": 1362, "creation_time": "2001-04-17T09:19:12Z", "is_private": false, "text": "It seems that the java-task doesn't initialize the class the same way as the \njava tool.\n\nHere is a use case:\nu.A and t.B are two classes. \nmain is defined only in A.\njava t.B should call t.B class initialisation\nbut when used inside a ant buildfile it doesn't work this way :\n---------------------------------------------------------------\nU:\\test>ant\nBuildfile: build.xml\n\ncompile:\n\nrun:\nA CLASS INITIALIZATION<<<<<< hey what about B!\nMAIN\nI am a A.\n\nall:\n\nBUILD SUCCESSFUL\n\nTotal time: 1 second\n\nU:\\test>java -classpath build t.B\nA CLASS INITIALIZATION\nB CLASS INITIALIZATION<<<< Ok that is better!\nMAIN\nI am a B.\n\nHere is a list of files and contents :\n\nbuild.xml\n-------------------------------\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n<project name=\"test\" default=\"all\">\n<target name=\"all\" depends=\"run\" />\n\n<target name=\"run\" depends=\"compile\">\n  <java className=\"t.B\">\n    <classpath>\n      <pathelement path=\"build\"/>\n    </classpath> \n  </java>\n</target>\n\n<target name=\"compile\">\n  <javac destdir=\"build\" srcdir=\".\">\n    <patternset>\n      <include name=\"**/*.java\"/>\n    </patternset>\n    <classpath>\n      <pathelement path=\".\"/>\n    </classpath>\n  </javac>\n</target>\n<target name=\"init\">\n  <mkdir dir=\"build\"/>\n</target>\n</project>\n------------------------------\nt/B.java:\n------------------------------\npackage t;\npublic class B extends u.A\n{\n  static \n  {\n    System.out.println(\"B CLASS INITIALIZATION\");\n    setA(new B());\n  }\n  public String toString()\n  { \n    return \"I am a B.\";\n  }\n}\n------------------------------\nu/A.java:\n------------------------------\npackage u;\npublic class A\n{\n  public static void main(String [] args){\n    System.out.println(\"MAIN\");\n    System.out.println(a);\n  }\n  static A a=new A();\n  \n  static \n  {\n    System.out.println(\"A CLASS INITIALIZATION\");\n  }\n  \n  protected static void setA(A oa)\n  {\n    a=oa;\n  }\n   \n  public String toString()\n  { \n    return \"I am a A.\";\n  }\n       \n}\n\nAny clue of what is wrong?"}, {"count": 1, "tags": [], "bug_id": 1362, "attachment_id": 94, "text": "Created attachment 94\na jar with the test case.", "id": 1884, "time": "2001-04-17T09:28:07Z", "creator": "pedro_cristian@yahoo.fr", "creation_time": "2001-04-17T09:28:07Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 1362, "text": "\n\n*** This bug has been marked as a duplicate of 1613 ***", "id": 2241, "time": "2001-05-03T06:32:54Z", "creator": "bodewig@apache.org", "creation_time": "2001-05-03T06:32:54Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 1362, "attachment_id": null, "text": "Using IBM JDK 1.1.8, even if I invoke java -classpath build t.B from the \ncommandline, it still doesn't print out \"B CLASS INITIALIZATION\".  In other\nwords, IBM's JDK1.1.8 implementation of static initialization is flawed, IMO.", "id": 9714, "time": "2002-01-17T11:15:32Z", "creator": "umagesh@apache.org", "creation_time": "2002-01-17T11:15:32Z", "is_private": false}, {"count": 4, "tags": [], "creator": "umagesh@apache.org", "attachment_id": null, "id": 9715, "time": "2002-01-17T12:09:37Z", "bug_id": 1362, "creation_time": "2002-01-17T12:09:37Z", "is_private": false, "text": "In IBM JDK 1.3, it works as it should on the commandline. i.e., it prints\n\"B CLASS INITIALISATION\" properly.  Would it be a good stand to take if we say \nAnt's <java> task will work only as good as the JVM's java task?"}]
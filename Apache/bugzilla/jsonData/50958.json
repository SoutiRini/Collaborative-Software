[{"count": 0, "attachment_id": 26793, "creator": "vkhleidl@gmail.com", "is_private": false, "id": 145216, "time": "2011-03-23T09:57:05Z", "bug_id": 50958, "creation_time": "2011-03-23T09:57:05Z", "tags": [], "text": "Created attachment 26793\nContains test WAR and ISAPI config files\n\nThe ISAPI plugin seems to be vulnerable to HTTP response splitting attacks. \n\nThe plugin code doesn't filter CRLFs from response header values before the response is sent to the client. Tomcat replaces CRLFs with spaces when accessed directly through an HTTP connector. I suggest the ISAPI plugin does the same.\n\nThe test application in the attachment demonstrates the attack. It contains a simple JSP that sets a special header value that breaks the HTTP response structure. To run the test app, extract the attached zip file, deploy the WAR to Tomcat, and use the included config files for the ISAPI plugin. Once done, browse to http://localhost/response-splitting\n\nIf the message \"Please enter password\" with a text box is displayed, the exploit has worked. Compare that to the response you get by browsing to Tomcat directly (i.e. a blank page). \n\nThe test app uses a hard-coded header value, but it's easy to imagine that the value could come from an untrusted source, like a request parameter."}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> Created an attachment (id=26793) [details]\n> Contains test WAR and ISAPI config files\n> \n> The ISAPI plugin seems to be vulnerable to HTTP response splitting attacks.\n\nNo it isn't. An HTTP response splitting attack is something triggered by client input, not by an application.\n\n> The plugin code doesn't filter CRLFs from response header values before the\n> response is sent to the client. Tomcat replaces CRLFs with spaces when accessed\n> directly through an HTTP connector. I suggest the ISAPI plugin does the same.\n\nThat the HTTP connectors and the newer AJP connectors stop developers shooting themselves in the foot (at least in this way) whereas the older BIO AJP does not (the filtering is in the Tomcat connector not the ISAPI native code) is a benefit of the newer connectors but does not represent a vulnerability in the older BIO AJP connector.\n\nThe was a vulnerability in this area in the past, CVE-2008-1232, that was triggered by using non-filtered client supplied data directly in an HTTP response header.", "is_private": false, "id": 145237, "creator": "markt@apache.org", "time": "2011-03-24T11:52:28Z", "bug_id": 50958, "creation_time": "2011-03-24T11:52:28Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "vkhleidl@gmail.com", "is_private": false, "id": 145254, "time": "2011-03-25T08:34:24Z", "bug_id": 50958, "creation_time": "2011-03-25T08:34:24Z", "tags": [], "text": "Let me try and make my point again.\n\n> No it isn't. An HTTP response splitting attack is something triggered by client\n> input, not by an application.\n\nFair enough. A response splitting attack is triggered by the client. However, the root of the problem has nothing to do with client input. It's the application that doesn't honour the HTTP protocol. RFC 2616 seems to go through considerable lengths to disallow two or more consecutive CRLF pairs in various locations, including header values (see the TEXT, token, separators, and quoted-string productions in the BNF). I could easily imagine problems (not necessarily exploits) being caused by header values coming from other sources than client input.\n\nThe question is: where is the best place to enforce that conformance?\n\nIn the specific case of IIS + ISAPI + Tomcat + web app, I think it should be the ISAPI filter that enforces the protocol restrictions. I'm aware that this might just be my opinion, but here's why I believe that:\n\nThe web application just talks to an abstract interface, which is the Servlet API. Nowhere does the API disallow the provision of header values with two consecutive CRLF pairs. Also, why do I have to litter my web apps with code that strips them out? After all, that's what the API is for, it should abstract from the low-level protocol details. This is quite different to SQL or JS injection attacks, where the low-level details are not abstracted away from the application. Finally, not enforcing this limit in one common place will make that vulnerability crop up again and again. After all, developers are human, so they make mistakes. \n\n> \n> That the HTTP connectors and the newer AJP connectors stop developers shooting\n> themselves in the foot (at least in this way) whereas the older BIO AJP does\n> not (the filtering is in the Tomcat connector not the ISAPI native code) is a\n> benefit of the newer connectors but does not represent a vulnerability in the\n> older BIO AJP connector.\n\nI'm not sure why the AJP connector should strip CRLFs at all. AJP is a binary protocol and variable length strings are prefixed with a byte length. They're not delimited by CRLFs, like in HTTP. I've tried Tomcat 5.5, 6, and 7, and only the AJP connector that comes with 7 seems to do the stripping. So if I'm stuck with 5.5 or 6 I can't take advantage of that feature. I don't know why the decision was made to change the newer AJP connector, but I wouldn't blame it for not doing it.\n\nI think the best place to enforce the protocol is where the structured message is serialised into HTTP. I can see the code in front of me where that happens. It's in line 1050 of jk_isapi_plugin.c (rev 1085325). Simply copying the header value into the response is like constructing a URL without encoding URL parameters.\n\nAnd if you're still not convinced, Apache httpd in combination with mod_proxy_ajp also strips out CRLFs. \n\nRegards,\nVolker"}, {"count": 3, "tags": [], "bug_id": 50958, "text": "The users list is the place to see further assistance, such as how to use the newer BIO AJP connector with Tomcat 6.", "id": 145256, "time": "2011-03-25T09:02:42Z", "creator": "markt@apache.org", "creation_time": "2011-03-25T09:02:42Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "vkhleidl@gmail.com", "attachment_id": null, "id": 145260, "time": "2011-03-25T12:50:50Z", "bug_id": 50958, "creation_time": "2011-03-25T12:50:50Z", "is_private": false, "text": "I'm using 5.5, but that wasn't the point. Never mind, I'm obviously wasting my time here."}, {"count": 5, "tags": [], "text": "It must be reminded that bugzilla is an inappropriate place to report security issues. See\n\nhttp://tomcat.apache.org/security.html", "is_private": false, "id": 145281, "creator": "knst.kolinko@gmail.com", "time": "2011-03-25T18:53:19Z", "bug_id": 50958, "creation_time": "2011-03-25T18:53:19Z", "attachment_id": null}]
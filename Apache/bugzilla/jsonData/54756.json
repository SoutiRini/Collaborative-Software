[{"count": 0, "tags": [], "bug_id": 54756, "attachment_id": 30105, "is_private": false, "id": 166165, "time": "2013-03-26T19:49:39Z", "creator": "supra1234@shaw.ca", "creation_time": "2013-03-26T19:49:39Z", "text": "Created attachment 30105\nCrash log\n\nWe updated server from 7.0.29 to 7.0.37 and within 48 hours we have observed a crash. Log is attached. \n\nAnother similar report can be found here:\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=54046"}, {"count": 1, "tags": [], "bug_id": 54756, "text": "Created attachment 30106\nCrash log\n\nAdding log as plain text. Didn't see it was set to auto detect.", "id": 166166, "time": "2013-03-26T19:52:27Z", "creator": "supra1234@shaw.ca", "creation_time": "2013-03-26T19:52:27Z", "is_private": false, "attachment_id": 30106}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "1. No need to re-upload an attachment. You can edit its mime-type.\n\n2. You have not mentioned, but here is the essential bit. The thread that crashed:\n(citing it for sake of those who search through bugzilla)\n\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  org.apache.tomcat.jni.Socket.send(J[BII)I+0\nj  org.apache.coyote.http11.upgrade.UpgradeAprProcessor.write(I)V+14\nj  org.apache.coyote.http11.upgrade.UpgradeOutbound.write(I)V+5\nj  org.apache.catalina.websocket.WsOutbound.doWriteBytes(Ljava/nio/ByteBuffer;Z)V+45\nj  org.apache.catalina.websocket.WsOutbound.doWriteText(Ljava/nio/CharBuffer;Z)V+65\nj  org.apache.catalina.websocket.WsOutbound.writeTextMessage(Ljava/nio/CharBuffer;)V+44\nj  org.atmosphere.container.version.TomcatWebSocket.write(Lorg/atmosphere/cpr/AtmosphereResponse;Ljava/lang/String;)Lorg/atmosphere/websocket/WebSocket;+103\nj  org.atmosphere.container.version.TomcatWebSocket.write(Lorg/atmosphere/cpr/AtmosphereResponse;Ljava/lang/String;)Lorg/atmosphere/cpr/AsyncIOWriter;+3\nj  org.atmosphere.cpr.AtmosphereResponse$4.write(Ljava/lang/String;)V+36\nj  org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(Lorg/atmosphere/cpr/AtmosphereResourceEvent;)V+337\nj  org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(Lorg/atmosphere/cpr/AtmosphereResource;Lorg/atmosphere/cpr/AtmosphereResourceEvent;)V+7\nj  org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(Lorg/atmosphere/cpr/AtmosphereResource;Lorg/atmosphere/cpr/AtmosphereResourceEvent;)V+97\nj  org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(Lorg/atmosphere/cpr/DefaultBroadcaster$AsyncWriteToken;)V+313\nj  org.atmosphere.cpr.DefaultBroadcaster$3.run()V+385\nj  java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;+4\nj  java.util.concurrent.FutureTask$Sync.innerRun()V+30\nj  java.util.concurrent.FutureTask.run()V+4\nj  java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Ljava/lang/Runnable;)V+59\nj  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+28\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub", "id": 166167, "time": "2013-03-26T20:29:14Z", "bug_id": 54756, "creation_time": "2013-03-26T20:29:14Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 54756, "attachment_id": null, "text": "Thanks Konstantin. Didn't see where I could update the MIME type, but I see that now.\n\nRunning a few test to see if I can pin point the issue. Thought I would start with the crash log. Originally I suspected the Atmosphere Framework, but they suggested it looks like a Tomcat issue.", "id": 166168, "time": "2013-03-26T20:54:18Z", "creator": "supra1234@shaw.ca", "creation_time": "2013-03-26T20:54:18Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54756, "attachment_id": null, "is_private": false, "id": 166172, "time": "2013-03-26T22:57:51Z", "creator": "sebb@apache.org", "creation_time": "2013-03-26T22:57:51Z", "text": "A bit more info from the crash log: the original cause of the crash is an access violation:\n\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nC  [tcnative-1.dll+0x52f0]  Java_org_apache_tomcat_jni_Socket_send+0xa0\n\nThe thread that invoked the JNI code is as shown in comment 2.\n\nIdeally, it should not be possible to crash the JVM - whether that is by bugs in the JVM native code or in user-provided JNI code as is the case here.\n\nSeems to me it should be possible to fix tcnative so it does not generate this access violation. The calling code has likely violated an expected calling sequence or pre-condition, but IMO that should still not be able to cause an access violation. Rather, some kind of exception should be thrown & should give a clue as to what went wrong so the application can be more readily fixed."}, {"count": 5, "tags": [], "bug_id": 54756, "text": "(In reply to comment #4)\n> Ideally, it should not be possible to crash the JVM - whether that is by\n> bugs in the JVM native code or in user-provided JNI code as is the case here.\n\nUnfortunately, that's not true.  Native code invoked by JNI has full access to the memory of the process, so it can scribble all over the Java heap, C heap, the stack of any thread, or any other writable bits and pieces.  Get a bit of pointer arithmetic wrong or make use of a dead object and it's game over.  However, since the problem does appear to be in tcnative, one has to presume it's fixable.\n\nThis particular problem is attempting to read from address 0x0000000000000040, so I'm guessing the native code picked up a null pointer to something and is trying to look at offset 0x40 within the structure.  Since this is using the relatively new WebSocket capability with APR, I would suspect some timing issue in socket handling.", "id": 166176, "time": "2013-03-27T02:40:01Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2013-03-27T02:40:01Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "sebb@apache.org", "is_private": false, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > Ideally, it should not be possible to crash the JVM - whether that is by\n> > bugs in the JVM native code or in user-provided JNI code as is the case here.\n> \n> Unfortunately, that's not true.  Native code invoked by JNI has full access\n> to the memory of the process, so it can scribble all over the Java heap, C\n> heap, the stack of any thread, or any other writable bits and pieces.  Get a\n> bit of pointer arithmetic wrong or make use of a dead object and it's game\n> over.  \n\nIndeed.\n\n[Sorry, my comment was ambiguous / too terse.]\nWhat I meant by the phrase \"Ideally, it should not ...\" was that JNI code should be defensively written such that the calling Java code cannot cause a crash.\n\n> However, since the problem does appear to be in tcnative, one has to\n> presume it's fixable.\n\nYes, hopefully!", "id": 166182, "time": "2013-03-27T17:37:58Z", "bug_id": 54756, "creation_time": "2013-03-27T17:37:58Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 54756, "attachment_id": null, "is_private": false, "id": 166829, "time": "2013-04-24T19:58:42Z", "creator": "markt@apache.org", "creation_time": "2013-04-24T19:58:42Z", "text": "I've taken a look at this and have found an issue in that errors on the outbound side were silently swallowed when APR/native was being used. I suspect the crash observed here is the result of continuing using a socket that has already closed due to an error.\n\nI have fixed this particular issue and the fix will be in 7.0.40 onwards. Please test once 7.0.40 is released and let us know if the issue is resolved."}, {"count": 8, "tags": [], "creator": "supra1234@shaw.ca", "is_private": false, "text": "Thanks Mark, will do.", "id": 166837, "time": "2013-04-24T21:19:01Z", "bug_id": 54756, "creation_time": "2013-04-24T21:19:01Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 54756, "attachment_id": null, "is_private": false, "id": 166838, "time": "2013-04-24T22:20:30Z", "creator": "sebb@apache.org", "creation_time": "2013-04-24T22:20:30Z", "text": "(In reply to comment #7)\n> I've taken a look at this and have found an issue in that errors on the\n> outbound side were silently swallowed when APR/native was being used. I\n> suspect the crash observed here is the result of continuing using a socket\n> that has already closed due to an error.\n> \n> I have fixed this particular issue and the fix will be in 7.0.40 onwards.\n\nWhat if the user code ignores the new error?\nIs it still possible for user code to continue using the socket?\n\nI had a look at the patch but it only seemed to report the error, but maybe I'm missing something and it's not possible to get at the closed socket using Java code external to Tomcat.\n\nIt's good to report the error, but I would have thought the safest option would be to fix APR/native so it cannot be crashed externally - whether from Tomcat code or application code."}, {"attachment_id": null, "tags": [], "bug_id": 54756, "text": "No further reports of errors in almost 2 months. I am going to assume that this issue is fixed. Feel free to re-open it if that is not the case.", "count": 10, "id": 167945, "time": "2013-06-20T20:06:21Z", "creator": "markt@apache.org", "creation_time": "2013-06-20T20:06:21Z", "is_private": false}]
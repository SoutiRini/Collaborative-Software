[{"count": 0, "tags": [], "bug_id": 4387, "attachment_id": null, "text": "A couple of weeks ago I sent a mail to ant-dev with this content hoping that my \nmodifications might be considered, but I see that the subject of this mail was \nunfortunate and that enhancements generally are posted through the bug \ndatabase. I apolologize for posting this again in what appears to be the \nappropriate channel if you already have noticed my previous mail!\n\nDue to needs in my project I have modified\norg.apache.tools.ant.taskdefs.optional.vss.MSVSS and\norg.apache.tools.ant.taskdefs.optional.vss.MSVSSGET to handle the folloing\nscenario:\n\nI am getting the latest version of my project from MS SourceSafe to my\ndevelopment directory in which some files are checked out. When using\nMSVSSGET (version 1.4.1) the build fails, with:\n\n   [vssget] $/MyProject/mypackage:\n   [vssget]\n   [vssget] A writable copy of C:\\projects\\myproject\\mypackage\\A.java\nalready exists\n\nI am using JDK 1.3.1 and MS SourceSafe 6.0.\n\nFrom MSDN I have found an overview of options for ss GET\n(http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ssusexp98/\nhtml/cmdline_switchg.asp). There are four options to specify how local\nwritable copies are handled:\n\n-GWA Displays a dialog box asking the user to choose between replacing,\nskipping, or merging write-only files on Get Latest Version and Check Out\noperations.\n-GWM Merges write-only files on certain operations (Get and Check Out).\n-GWR Replaces write-only files on certain operations (Get and Check Out).\n-GWS Skips write-only files on certain operations (Get and Check Out).\n\nThus I have made the following proposition to\norg.apache.tools.ant.taskdefs.optional.vss.MSVSS and\norg.apache.tools.ant.taskdefs.optional.vss.MSVSSGET that handles these\noptions:\n\nMSVSS:\n\npublic abstract class MSVSS extends Task {\n\n    private String m_SSDir = \"\";\n    private String m_vssLogin = null;\n    private String m_vssPath = null;\n    private String m_serverPath = null;\n\n    /**\n     * Set the directory where ss.exe is located\n     *\n     * @param dir the directory containing ss.exe\n     */\n    public final void setSsdir(String dir) {\n        m_SSDir = project.translatePath(dir);\n    }\n\n    /**\n     * Builds and returns the command string to execute ss.exe\n     */\n    public final String getSSCommand() {\n        String toReturn = m_SSDir;\n        if ( !toReturn.equals(\"\") && !toReturn.endsWith(\"\\\\\") ) {\n            toReturn += \"\\\\\";\n        }\n        toReturn += SS_EXE;\n\n        return toReturn;\n    }\n\n    /**\n     * Set the login to use when accessing vss.\n     * <p>\n     * Should be formatted as username,password\n     *\n     * @param login the login string to use\n     */\n    public final void setLogin(String login) {\n        m_vssLogin = login;\n    }\n\n    /**\n     * @return the appropriate login command if the 'login' attribute was\nspecified, otherwise an empty string\n     */\n    public void getLoginCommand(Commandline cmd) {\n        if ( m_vssLogin == null ) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_LOGIN + m_vssLogin);\n        }\n    }\n\n    /**\n     * Set the path to the item in vss to operate on\n     * <p>\n     * Ant can't cope with a '$' sign in an attribute so we have to add it\nhere.\n     * Also we strip off any 'vss://' prefix which is an XMS special and\nshould probably be removed!\n     *\n     * @param vssPath\n     */\n    public final void setVsspath(String vssPath) {\n        if ( vssPath.startsWith(\"vss://\") ) {\n            m_vssPath= PROJECT_PREFIX + vssPath.substring(5);\n        } else {\n            m_vssPath = PROJECT_PREFIX + vssPath;\n        }\n    }\n\n    /**\n     * @return m_vssPath\n     */\n    public String getVsspath() {\n        return m_vssPath;\n    }\n\n    /**\n     * Set the path to the location of the ss.ini\n     *\n     * @param serverPath\n     */\n    public final void setServerpath(String serverPath) {\n        m_serverPath = serverPath;\n    }\n\n    protected int run(Commandline cmd) {\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this,\n                                                           Project.MSG_INFO,\n\nProject.MSG_WARN));\n\n            // If location of ss.ini is specified we need to set the\n            // environment-variable SSDIR to this value\n            if (m_serverPath != null) {\n                String[] env = exe.getEnvironment();\n                if( env == null ) {\n                    env = new String[0];\n                }\n                String[] newEnv = new String[env.length+1];\n                for( int i=0;i<env.length;i++ ) {\n                    newEnv[i] = env[i];\n                }\n                newEnv[env.length] = \"SSDIR=\" + m_serverPath;\n\n                exe.setEnvironment(newEnv);\n            }\n\n            exe.setAntRun(project);\n            exe.setWorkingDirectory(project.getBaseDir());\n            exe.setCommandline(cmd.getCommandline());\n            return exe.execute();\n        } catch (java.io.IOException e) {\n            throw new BuildException(e, location);\n        }\n    }\n\n    /**\n     * Constant for the thing to execute\n     */\n    private static final String SS_EXE = \"ss\";\n    /** */\n    public static final String PROJECT_PREFIX = \"$\";\n\n    /**\n     * The 'Get' command\n     */\n    public static final String COMMAND_GET = \"Get\";\n    /**\n     * The 'Checkout' command\n     */\n    public static final String COMMAND_CHECKOUT = \"Checkout\";\n    /**\n     * The 'Checkin' command\n     */\n    public static final String COMMAND_CHECKIN = \"Checkin\";\n    /**\n     * The 'Label' command\n     */\n    public static final String COMMAND_LABEL = \"Label\";\n    /**\n     * The 'History' command\n     */\n    public static final String COMMAND_HISTORY = \"History\";\n\n    /** */\n    public static final String FLAG_LOGIN = \"-Y\";\n    /** */\n    public static final String FLAG_OVERRIDE_WORKING_DIR = \"-GL\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_DEF = \"-I-\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_YES = \"-I-Y\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_NO = \"-I-N\";\n    /** */\n    public static final String FLAG_RECURSION = \"-R\";\n    /** */\n    public static final String FLAG_VERSION = \"-V\";\n    /** */\n    public static final String FLAG_VERSION_DATE = \"-Vd\";\n    /** */\n    public static final String FLAG_VERSION_LABEL = \"-VL\";\n    /** */\n    public static final String FLAG_WRITABLE = \"-W\";\n    /** */\n    public static final String VALUE_NO = \"-N\";\n    /** */\n    public static final String VALUE_YES = \"-Y\";\n    /** */\n    public static final String FLAG_QUIET = \"-O-\";\n    /** */\n    public static final String FLAG_REPLACEWRITABLE_ASK = \"-GWA\";\n    /** */\n    public static final String FLAG_REPLACEWRITABLE_MERGE = \"-GWM\";\n    /** */\n    public static final String FLAG_REPLACEWRITABLE_REPLACE = \"-GWR\";\n    /** */\n    public static final String FLAG_REPLACEWRITABLE_SKIP = \"-GWS\";\n}\n\nThe code added is the four flags at the bottom to handle the new options.\n\nMSVSSGET:\n\npublic class MSVSSGET extends MSVSS {\n\n    private String m_LocalPath = null;\n    private boolean m_Recursive = false;\n    private boolean m_Writable = false;\n    private String m_Version = null;\n    private String m_Date = null;\n    private String m_Label = null;\n    private String m_AutoResponse = null;\n    private boolean m_Quiet = false;\n    private String m_ReplaceWritable = null;\n\n    /**\n     * Executes the task.\n     * <p>\n     * Builds a command line to execute ss and then calls Exec's run method\n     * to execute the command line.\n     */\n    public void execute() throws BuildException {\n        Commandline commandLine = new Commandline();\n        int result = 0;\n\n        // first off, make sure that we've got a command and a vssdir ...\n        if (getVsspath() == null) {\n            String msg = \"vsspath attribute must be set!\";\n            throw new BuildException(msg, location);\n        }\n\n        // now look for illegal combinations of things ...\n\n        // build the command line from what we got the format is\n        // ss Get VSS items [-G] [-H] [-I-] [-N] [-O] [-R] [-V] [-W] [-Y]\n[-?]\n        // as specified in the SS.EXE help\n        commandLine.setExecutable(getSSCommand());\n        commandLine.createArgument().setValue(COMMAND_GET);\n\n        // VSS items\n        commandLine.createArgument().setValue(getVsspath());\n        // -GL\n        getLocalpathCommand(commandLine);\n        // -GWA or -GWM or -GWR or -GWS\n        getReplaceWritableCommand(commandLine);\n        // -I- or -I-Y or -I-N\n        getAutoresponse(commandLine);\n        // -O-\n        getQuietCommand(commandLine);\n        // -R\n        getRecursiveCommand(commandLine);\n        // -V\n        getVersionCommand(commandLine);\n        // -W\n        getWritableCommand(commandLine);\n        // -Y\n        getLoginCommand(commandLine);\n\n        result = run(commandLine);\n        if ( result != 0 ) {\n            String msg = \"Failed executing: \" + commandLine.toString();\n            throw new BuildException(msg, location);\n        }\n    }\n\n    /**\n     * Set the local path.\n     */\n    public void setLocalpath(Path localPath) {\n        m_LocalPath = localPath.toString();\n    }\n\n    /**\n     * Builds and returns the -GL flag command if required\n     * <p>\n     * The localpath is created if it didn't exist\n     */\n    public void getLocalpathCommand(Commandline cmd) {\n        if (m_LocalPath == null) {\n            return;\n        } else {\n            // make sure m_LocalDir exists, create it if it doesn't\n            File dir = project.resolveFile(m_LocalPath);\n            if (!dir.exists()) {\n                boolean done = dir.mkdirs();\n                if (done == false) {\n                    String msg = \"Directory \" + m_LocalPath + \" creation was\nnot \" +\n                        \"successful for an unknown reason\";\n                    throw new BuildException(msg, location);\n                }\n                project.log(\"Created dir: \" + dir.getAbsolutePath());\n            }\n\n            cmd.createArgument().setValue(FLAG_OVERRIDE_WORKING_DIR +\nm_LocalPath);\n        }\n    }\n\n    /**\n     * Set behaviour recursive or non-recursive\n     */\n    public void setRecursive(boolean recursive) {\n        m_Recursive = recursive;\n    }\n\n    /**\n     * @return the 'recursive' command if the attribute was 'true',\notherwise an empty string\n     */\n    public void getRecursiveCommand(Commandline cmd) {\n        if ( !m_Recursive ) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_RECURSION);\n        }\n    }\n\n    /**\n     * Sets/clears quiet mode\n     */\n    public final void setQuiet (boolean quiet) {\n        this.m_Quiet=quiet;\n    }\n\n    public void getQuietCommand (Commandline cmd) {\n        if (m_Quiet) {\n            cmd.createArgument().setValue (FLAG_QUIET);\n        }\n    }\n\n    /**\n     * Set behaviour, used in get command to make files that are 'got'\nwritable\n     */\n    public final void setWritable(boolean argWritable) {\n        m_Writable = argWritable;\n    }\n\n    /**\n     * @return the 'make writable' command if the attribute was 'true',\notherwise an empty string\n     */\n    public void getWritableCommand(Commandline cmd) {\n        if ( !m_Writable ) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_WRITABLE);\n        }\n    }\n\n    /**\n     * Set the stored version string\n     * <p>\n     * Note we assume that if the supplied string has the value \"null\" that\nsomething\n     * went wrong and that the string value got populated from a null\nobject. This\n     * happens if a ant variable is used e.g. version=\"${ver_server}\" when\nver_server\n     * has not been defined to ant!\n     */\n    public void setVersion(String version) {\n        if (version.equals(\"\") || version.equals(\"null\") ) {\n            m_Version = null;\n        } else {\n            m_Version = version;\n        }\n    }\n\n    /**\n     * Set the stored date string\n     * <p>\n     * Note we assume that if the supplied string has the value \"null\" that\nsomething\n     * went wrong and that the string value got populated from a null\nobject. This\n     * happens if a ant variable is used e.g. date=\"${date}\" when date\n     * has not been defined to ant!\n     */\n    public void setDate(String date) {\n        if (date.equals(\"\") || date.equals(\"null\") ) {\n            m_Date = null;\n        } else {\n            m_Date = date;\n        }\n    }\n\n    /**\n     * Set the labeled version to operate on in SourceSafe\n     * <p>\n     * Note we assume that if the supplied string has the value \"null\" that\nsomething\n     * went wrong and that the string value got populated from a null\nobject. This\n     * happens if a ant variable is used e.g. label=\"${label_server}\" when\nlabel_server\n     * has not been defined to ant!\n     */\n    public void setLabel(String label) {\n        if ( label.equals(\"\") || label.equals(\"null\") ) {\n            m_Label = null;\n        } else {\n            m_Label = label;\n        }\n    }\n\n    /**\n     * Simple order of priority. Returns the first specified of version,\ndate, label\n     * If none of these was specified returns \"\"\n     */\n    public void getVersionCommand(Commandline cmd) {\n\n        if ( m_Version != null) {\n            cmd.createArgument().setValue(FLAG_VERSION + m_Version);\n        } else if ( m_Date != null) {\n            cmd.createArgument().setValue(FLAG_VERSION_DATE + m_Date);\n        } else if (m_Label != null) {\n            cmd.createArgument().setValue(FLAG_VERSION_LABEL + m_Label);\n        }\n    }\n\n    public void setAutoresponse(String response){\n        if ( response.equals(\"\") || response.equals(\"null\") ) {\n            m_AutoResponse = null;\n        } else {\n            m_AutoResponse = response;\n        }\n    }\n\n    /**\n     * Checks the value set for the autoResponse.\n     * if it equals \"Y\" then we return -I-Y\n     * if it equals \"N\" then we return -I-N\n     * otherwise we return -I\n     */\n    public void getAutoresponse(Commandline cmd) {\n\n        if ( m_AutoResponse == null) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_DEF);\n        } else if ( m_AutoResponse.equalsIgnoreCase(\"Y\")) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_YES);\n\n        } else if ( m_AutoResponse.equalsIgnoreCase(\"N\")) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_NO);\n        }else {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_DEF);\n        } // end of else\n\n    }\n\n    public void setReplaceWritable(String replace) {\n        if ( replace.equals(\"\") || replace.equals(\"null\") ) {\n            m_ReplaceWritable = null;\n        } else {\n            m_ReplaceWritable = replace;\n        }\n    }\n\n    /**\n     * Checks the value for replacewritable.\n     * if it equals \"ask\" then we return -GWA\n     * if it equals \"merge\" then we return -GWM\n     * if it equals \"replace\" then we return -GWR\n     * if it equals \"skip\" then we return -GWS\n     * otherwise we return \"\"\n     */\n    public void getReplaceWritableCommand(Commandline cmd) {\n\n        if ( m_ReplaceWritable == null ) {\n            return;\n        }\n\n        if ( m_ReplaceWritable.equalsIgnoreCase(\"ask\") ) {\n            cmd.createArgument().setValue(FLAG_REPLACEWRITABLE_ASK);\n        } else if ( m_ReplaceWritable.equalsIgnoreCase(\"merge\") )\n\n            cmd.createArgument().setValue(FLAG_REPLACEWRITABLE_MERGE);\n        } else if ( m_ReplaceWritable.equalsIgnoreCase(\"replace\") ) {\n            cmd.createArgument().setValue(FLAG_REPLACEWRITABLE_REPLACE);\n        } else if ( m_ReplaceWritable.equalsIgnoreCase(\"skip\") ) {\n            cmd.createArgument().setValue(FLAG_REPLACEWRITABLE_SKIP);\n        }\n\n    }\n\n}\n\n...with the following addition to the javadoc:\n\n *   <tr>\n *      <td>replaceWritable</td>\n *      <td>How to treat a local writable version of a file. By default,\n *      this isn't treated. When set -GWA (ask), -GWM (merge), -GMR\n(replace)\n *      or -GWS (skip) is added to the command.\n *      <td>No<td>\n *   </tr>\n\nThe code added is a new instance variable m_ReplaceWritable, the new methods\npublic void setReplaceWritable(String replace) and public void\ngetReplaceWritableCommand(Commandline cmd) and calling\ngetReplaceWritableCommand from within execute().\n\nI have tested the added code in my environment (repeated: JDK 1.3.1, Ant\n1.4.1, MS VSS 6.0) with the following results:\n\nProperty replaceWritable not specified: No change to before (i.e. no option\nadded to the command).\nProperty replaceWritable=\"ask\": Works only when autoresponse=\"Y\", when it\nworks the same way as replace. When autoresponse=\"N\" the build fails just\nlike before. This probably should be removed. I have left it for reference\nthough!\nProperty replaceWritable=\"merge\": In my environment the local copy is left\nunchanged, which is what I would expect from skip. This appears to be a bug\nwith MS VSS - works fine otherwise.\nProperty replaceWritable=\"replace\": The local copy is replaced as expected -\nworks fine!\nProperty replaceWritable=\"skip\": The build fails as before with the same\nmessage. Since I have a far lesser understanding of the inner workings of\nAnt than you, I have left the code - because as I understand ss GET returns\na warning and not an error in this case and you may have good ways of\ntreating such a situation.\n\nI hope that this is useful:)", "id": 7087, "time": "2001-10-24T01:49:52Z", "creator": "brynjar.glesnes@entragroup.com", "creation_time": "2001-10-24T01:49:52Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 4387, "attachment_id": null, "is_private": false, "id": 9068, "time": "2001-12-19T19:24:13Z", "creator": "karish@well.com", "creation_time": "2001-12-19T19:24:13Z", "text": "This won't solve your problem.  Even with the -GWS flag set, ss.exe exits with\nstatus 100 when it skips the writable files.  ss.exe also exits with status 100\nwhen it encounters actual errors (file not found, for instance).\n\nTo handle this properly MSVSSGET will have to parse the messages from VSS, make\nsure they're just warnings that writable files were found, and override the\nnon-zero return status from execute()."}, {"count": 2, "tags": [], "bug_id": 4387, "attachment_id": null, "id": 32265, "time": "2003-03-02T17:20:18Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T17:20:18Z", "is_private": false, "text": "*** Bug 5643 has been marked as a duplicate of this bug. ***"}, {"count": 3, "attachment_id": null, "bug_id": 4387, "is_private": false, "id": 32277, "time": "2003-03-02T21:06:07Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T21:06:07Z", "tags": [], "text": "I've implemented 'skip', 'replace' and 'fail' (default)\n\nMerge does not work for me, so I did not implement it.\nAsk's behaviour can be obtained with 'skip' and 'fail' so I did not implement it.\n\nDue to ss.exe returning '100' when it encounters writable files (even if it\nreplaces them) using 'skip' implies 'failonerror=false'\n\nDocs and test cases updated.\n\nNote\n\nThis patch fixes bugs:\n#11562\n#8451\n#4387\n#12793\n#14174\n#13532\n#14463\n\nJesse"}, {"count": 4, "tags": [], "bug_id": 4387, "text": "Created attachment 5107\nPatch to add new attributes", "id": 32278, "time": "2003-03-02T21:06:36Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T21:06:36Z", "is_private": false, "attachment_id": 5107}, {"count": 5, "attachment_id": 5108, "bug_id": 4387, "is_private": false, "id": 32279, "time": "2003-03-02T21:06:51Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T21:06:51Z", "tags": [], "text": "Created attachment 5108\nPatch for docs"}, {"count": 6, "tags": [], "text": "*** Bug 18722 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 4387, "id": 34561, "time": "2003-04-04T22:55:14Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-04-04T22:55:14Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 4387, "is_private": false, "id": 35162, "time": "2003-04-15T04:33:19Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-04-15T04:33:19Z", "tags": [], "text": "fixed in CVS"}]
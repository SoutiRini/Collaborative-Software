[{"count": 0, "tags": [], "text": "I have unit tests whose fault output includes the full SOAPFault:\nhttp://people.apache.org/~stevel/cddlm/interop/ourgrid/org/smartfrog/services/deployapi/test/system/alpine/deployapi/api/creation/1_Api_06_system_properties_Test.html\n\nWhen this is turned into the reports, the XML in the fault is not escaped. This\nmeans that the XML is hidden, only the content shown. Or more importantly, active\nXHTML could be snuck into the test report. We should either escape the < and >\nsymbols, or make the results CDATA", "attachment_id": null, "id": 88831, "creator": "stevel@apache.org", "time": "2006-05-05T13:09:09Z", "bug_id": 39492, "creation_time": "2006-05-05T13:09:09Z", "is_private": false}, {"count": 1, "tags": [], "text": "Hi Steve,\n\nif a stack trace has a message \"<foo> does not like <bar>\", would we also have\nproblems reading it ?\n\nDo I understand well that the fix should be done in the xml formatter of the\njunit task ?\n\nAntoine", "is_private": false, "id": 93489, "creator": "antoine@apache.org", "time": "2006-09-13T01:56:48Z", "bug_id": 39492, "creation_time": "2006-09-13T01:56:48Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Steve,\ncan you attach the xml testresult file that was written by your JUnit test to \nthis bug?\n\nRegards, Jan", "attachment_id": null, "id": 93551, "creator": "j_cumps@yahoo.com", "time": "2006-09-13T20:32:04Z", "bug_id": 39492, "creation_time": "2006-09-13T20:32:04Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 39492, "attachment_id": null, "text": "I cant find a report to hand, though I can try to regenerate one. \n\nThe main thing is that when we generate the test reports, the stack traces need\nto be CDATA escaped. XSLT will handle the rest of the problem. If were extra\nparaniod, even the test name. You can generate tests with a new name, just by\npassing different stuff to the ctor of the test case in a Test Suite method...\n\npublic MyTestCase extends TestCase {\n public MyTestCase(String s) { super(s);}\n\n public static TestSuite suite() { \n  TestSuite s=new TestSuite();\n  s.add(new MyTestCase(\"<script>....</script>\");\n  return s;\n }\n}\n\n\n\n", "id": 95291, "time": "2006-11-01T06:54:13Z", "creator": "stevel@apache.org", "creation_time": "2006-11-01T06:54:13Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "pjodeleit@gmx.de", "text": "Here is an example from our \"alltests-fails.html\" which is corrupted (enclosed in \"table\", this is only an part of the file):\n\n<table>\n<tr valign=\"top\" class=\"Failure\">\n<td><a href=\"de/espirit/firstspirit/server/354_TestServerReleaseAction.html\">TestServerReleaseAction</a></td><td><a name=\"testBug46317_PropagateDependencyCheck2\"></a><a href=\"de/espirit/firstspirit/server/354_TestServerReleaseAction.html#testBug46317_PropagateDependencyCheck2\">testBug46317_PropagateDependencyCheck2</a></td><td>Failure</td><td>wrong pre condition release ms xml expected:&lt;...ODE editor=\"2\" id=\"2[4\" name=\"MF\" releaseRevision=\"12\" releasedby=\"2\" revision=\"12\"&gt;   &lt;MEDIUM editor=\"2\" filename=\"M\" id=\"25]\" releaseRevision=\"1...&gt; but was:&lt;...ODE editor=\"2\" id=\"2[3\" name=\"MF\" releaseRevision=\"12\" releasedby=\"2\" revision=\"12\"&gt;   &lt;MEDIUM editor=\"2\" filename=\"M\" id=\"24]\" releaseRevision=\"1...&gt;<br>\n\n<br>\n<code>junit.framework.ComparisonFailure: wrong pre condition release ms xml expected:<...ODE editor=\"2\" id=\"2[4\" name=\"MF\" releaseRevision=\"12\" releasedby=\"2\" revision=\"12\"><br/>\t\t<MEDIUM editor=\"2\" filename=\"M\" id=\"25]\" releaseRevision=\"1...> but was:<...ODE editor=\"2\" id=\"2[3\" name=\"MF\" releaseRevision=\"12\" releasedby=\"2\" revision=\"12\"><br/>\t\t<MEDIUM editor=\"2\" filename=\"M\" id=\"24]\" releaseRevision=\"1...><br/>\tat de.espirit.firstspirit.server.TestServerReleaseAction.testBug46317_PropagateDependencyCheck2(TestServerReleaseAction.java:4130)<br/></code></td><td>1.104</td>\n</tr>\n</table>", "id": 125797, "time": "2009-03-26T02:19:56Z", "bug_id": 39492, "creation_time": "2009-03-26T02:19:56Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "kevcunnane@ie.ibm.com", "text": "I experienced this problem too. The actual issue is incorrect behaviour in the br-replace template. This sets disable-output-escaping to \"no\", which unescapes all xml tags, not just the \"br\" tags. \nAfter a quick google search on correct methods for br-replace in xslt I found the following:\n\n<!-- Correct br replace algorithm -->\n<xsl:template name=\"br-replace\">\n <xsl:param name=\"word\"/>\n <xsl:choose>\n   <xsl:when test=\"contains($word,'&#10;')\">\n     <xsl:value-of select=\"substring-before($word,'&#10;')\"/>\n     <br/>\n     <xsl:call-template name=\"br-replace\">\n       <xsl:with-param name=\"word\" select=\"substring-after($word,'&#10;')\"/>\n     </xsl:call-template>\n   </xsl:when>\n   <xsl:otherwise>\n     <xsl:value-of select=\"$word\"/>\n   </xsl:otherwise>\n </xsl:choose>\n</xsl:template>\n\nThis seems to be a standard solution. Replacing the old br-replace template with this one solved the problem for me.", "id": 128997, "time": "2009-07-20T06:11:12Z", "bug_id": 39492, "creation_time": "2009-07-20T06:11:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "thanks for the analysis Kevin.\n\nFixed in svn revision 796144", "attachment_id": null, "id": 129010, "creator": "bodewig@apache.org", "time": "2009-07-20T22:01:12Z", "bug_id": 39492, "creation_time": "2009-07-20T22:01:12Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Created attachment 32365\nAdd option to strip extra data after websocket request headers\n\nI am using mod_proxy_wstunnel to use Apache httpd as a reverse proxy to\ntunnel websocket connections from the client to a given websocket server.\n\nProblem description (What am I trying to solve?)\n************************************************\n\nI observed a client that sends some extra data (i.e. an additional CRLF) after\nthe request headers in the request used to establish the websocket connection.\nWithout Apache inbetween, the communication between client and backend looks\nlike this:\n\nCLIENT                                BACKEND\n  | ------ [    HTTP request   ] ------> |\n  |          incl. extra* CRLF           |\n  |                                      |\n  | <----- [    HTTP response  ] ------- |\n  |  \"HTTP/1.1 101 Switching Protocols\"  |\n  |                                      |\n  | ------ [ 1st websocket frame ] ----> |\n  |                                      |\n\n* Please note that the client sends an extra CRLF after the mandatory empty\n  line used to terminate the request headers.\n\nUsing Apache httpd as reverse proxy the communication between client and\nbackend looks like this:\n\nCLIENT                              Apache                              BACKEND\n  | ---- [    HTTP request   ] -----> |                                      |\n  |        incl. extra* CRLF          |                                      |\n  |                                  [A]                                     |\n  |                                   | ------ [   HTTP request ] ---------> |\n  |                                   |       without extra CRLF             |\n  |                                   |                                      |\n  |                                   | <------- [ HTTP response ] --------- |\n  |                                   |  \"HTTP/1.1 101 Switching Protocols\"  |\n  |                                   |                                      |\n  | <--- [    HTTP response  ] ------ |                                      |\n  |       101 Switching Protocols     |                                      |\n  |                                  [B]                                     |\n  |                                   | -------- [ extra CRLF ] -----------> |\n  |                                   |    received from client before [A]   |\n  | ---- [ 1st websocket frame ] ---> |                                     [C]\n  |                                   | ----- [ 1st websocket frame ] -----> |\n  |                                   |                                      |\n\n\nThe extra CRLF sent by the client is actually not needed as per HTTP specs.\nSo, Apache httpd is totally right in just parsing in the HTTP request without\nthat extra CRLF in [A]. But as the client did already send the extra CRLF,\nit lingers around in the input filter chain. Eventually mod_proxy_wstunnel\nenters a tunneling mode, i.e. forwards all data seen on the client connection\nto the backend connection and vice versa. This results in the backend response \"HTTP/1.1 101 Switching Protocols\" being forwarded to the client, and [B]\nthe extra CRLF being forwarded to the backend. Next the client sends a\nwebsocket frame, which also gets forwarded to the backend.\n\nFrom the backends point of view the key difference is, that without Apache\nthe extra CRLF is received before switching to websocket protocol. The backend\nserver is lucky to read request headers sloppy enough to swallow the extra\nCRLF, so everything works just fine.  Whereas if Apache is configured as\nreverse proxy, the extra CRLF is received after switching to websocket\nprotocol. The outcome is a confused websocket parser on the backend server and\na broken websocket connection.\n\n\nFix approach\n************\n\nThe proposed patch introduces a new subprocess environment variable\n\"proxy-wstunnel-strip-extra-data\" that causes mod_proxy_wstunnel to strip any\nextra data received on the client socket after receiving the request headers\nand before connecting to the backend server.", "attachment_id": 32365, "bug_id": 57436, "id": 180271, "time": "2015-01-12T14:03:36Z", "creator": "micha@lenk.info", "creation_time": "2015-01-12T14:03:36Z", "is_private": false}]
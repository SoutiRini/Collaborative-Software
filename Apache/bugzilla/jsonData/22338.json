[{"count": 0, "tags": [], "bug_id": 22338, "is_private": false, "id": 42595, "creation_time": "2003-08-12T04:16:28Z", "time": "2003-08-12T04:16:28Z", "creator": "hauser@acm.org", "text": "different versions of an externally defined task may not all be suited for\nbuilding my project.\n\nSince the external task I use also has a command-line interface, I first thought\nto grab its version via \"--version\" exec call and then fail if I am not happy\nwith the output.\nBut as <condition> doesn't have a <greaterthan> and even that would be\ncumbersome if the version numbering is something like 0.8.11, I suggest the\naddition of two new attributes to taskdef in order to be able to ensure inside\nthe build.xml that appropriate versions of an external task are taken.\n\nTherefore, a \"minversion\" attribute that ensures that at least a certain version\nof the external task is used appears to be useful. The ant-execution could fail\nif the specified version number or higher is not met. (I assume that such an\nadditional attribute would require the cooperation of the author of the external\ntask).\n\nSimilarly, if the exact \"version\" is not availabe from an external task the\nbuild would abort as well.\n\n\nP.S.: One could try to do this with an <available> condition on the taskdef's\ninstallation path, but even then, a) \"non-cardinal\" version numbering is likely\nto make this cumbersome, b) some external tasks simply have a jar copied into\n$ANT_HOME/lib and c) it appears to be good practice to access installations with\npathto/bin/programName/curr/bin/commandName with \"curr\" being a symbolic link to\na directory with the name of the version currently in production use.", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 22338, "is_private": false, "id": 42613, "creation_time": "2003-08-12T11:24:28Z", "time": "2003-08-12T11:24:28Z", "creator": "ddekany@freemail.hu", "text": "It is not enough to check if there is greater-or-equal version available\nthan the version you have used originally with the project, because\nsoftware has sometimes non-backward compatible changes. So rather\nsomething like this should be used:\n\n<taskdef name=\"foo\" classname=\"bar.Foo\" compatible=\"1.4\"/>\n\nwhere \"compatible\" is an *arbitrary* string, and then Ant should define\na standard interface by which the external task can be invoked to check\nif it is compatible. So the external task is who parses the version\nnumber or whatever version description it gets with attribute\n\"compatible\", not Ant, and it is the external task who judges if he is\ncompatible or not, not Ant.\n\nBut... I wonder how many external task developers would take the trouble\nto maintain this stuff.", "attachment_id": null}]
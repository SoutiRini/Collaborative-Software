[{"count": 0, "tags": [], "creator": "jessh@ptc.com", "text": "If you explicitly list many (e.g. 600+) entries in an includes file for a jar \n(or related, e.g. zip) task, the task executes *extremely* slowly.\n\nIf you these same entries happen to be the only file in a directory tree and \nyou thus skip using any sort of inclusion specification, the task executes \nquite quickly (on part with the JDK's jar command's execution of the same).\n\nIf you pass the explicit includes list to the JDK's jar command (via the @ \nsyntax), then the execution is just as fast as when the JDK's jar command is \nsimply given the name of the root directory.\n\nThis becomes an issue when other tools provide the list of files to be included \n(e.g. in a client jar) and the files, though quite numerous, are a scattered, \nsparse subset of the directory tree in question.\n\nI am currently using the JDK's jar command through exec as the jar task \nperforms far too slowly.  The jar task should not degrade *this* much through \natypical usage.", "id": 27733, "time": "2002-12-12T13:37:33Z", "bug_id": 15310, "creation_time": "2002-12-12T13:37:33Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 15310, "attachment_id": null, "id": 31233, "time": "2003-02-13T14:32:35Z", "creator": "conor@apache.org", "creation_time": "2003-02-13T14:32:35Z", "is_private": false, "text": "Just to confirm - this is the includesfile attribute on the jar's fileset?\n"}, {"count": 2, "tags": [], "bug_id": 15310, "attachment_id": null, "text": "Yes.  Essentially if you list hundreds of explicit entries in the includes file,\nthe jar task takes *forever*.  If you feed the same list to the JSDK jar command\n(via the @includesfile arg syntax), the speed is about the same as if you simply\npassed the root directory for inclusion.  The jar task keeps up with the jar\ncommand pretty well if you just give it the root directory -- unfortunately, I\nhave code usage data which points me to exactly the several hundred files that\nneed to go into the jars -- out of thousands and thousands in the directory tree...", "id": 31240, "time": "2003-02-13T15:55:16Z", "creator": "jessh@ptc.com", "creation_time": "2003-02-13T15:55:16Z", "is_private": false}, {"count": 3, "tags": [], "creator": "y3x1-wwm9@spamex.com", "text": "\nThis may be related to:\n\nBug 20103 FileSet horrible performance when dir has huge number of subdirs", "id": 38202, "time": "2003-06-02T18:38:55Z", "bug_id": 15310, "creation_time": "2003-06-02T18:38:55Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jessh@ptc.com", "attachment_id": null, "is_private": false, "id": 38203, "time": "2003-06-02T18:45:26Z", "bug_id": 15310, "creation_time": "2003-06-02T18:45:26Z", "text": "It *may* be related, but note that if I simply don't specify a fileset (i.e.\ndefault includes of **), then the speed is comparable to that of the JDK jar\ncommand.  If, however, I list each file explicitly in an includes file, the\nperformance is abysmal.\n\nI'm still using the JDK's jar command via the exec task...\n"}, {"count": 5, "tags": [], "creator": "peter.reilly@corvil.com", "is_private": false, "text": "Have you tested ant 1.6.\nI have done a quick test and the performance is much much better:\n<project default=\"jarred\">\n  <target name=\"jarred\">\n    <delete quiet=\"yes\" file=\"jarred.jar\"/>\n    <jar file=\"jarred.jar\" includesfile=\"jarred.files\" basedir=\".\"/>\n  </target>\n</project>\nWith 10,000 files in jarred.files:\n1.5.4 : 2 minutes 40 seconds\n1.6b2 : 19 seconds\nMarking as fixed, please reopen if your env has a different result", "id": 47704, "time": "2003-11-20T15:42:02Z", "bug_id": 15310, "creation_time": "2003-11-20T15:42:02Z", "attachment_id": null}]
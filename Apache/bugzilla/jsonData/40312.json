[{"count": 0, "tags": [], "bug_id": 40312, "attachment_id": null, "id": 92511, "time": "2006-08-24T21:10:25Z", "creator": "issues.apache.org@ourdetour.com", "creation_time": "2006-08-24T21:10:25Z", "is_private": false, "text": "The ssl_init_ctx_verify function contains the following if statement which will\nnever evaluate to true according to the current code:\n\nif (!ca_list) {\n\n* on line 560 of ssl_engine_init.c in version 2.2.3.\n* on line 547 of ssl_engine_init.c in version 2.0.59.\n\nca_list is initialized with a call to sk_X509_NAME_new in the\nssl_init_FindCAList function which is called immediately preceding that if\nstatement in ssl_init_ctx_verify, and there is no possibility of it being set to\na NULL or zero value before ssl_init_FindCAList returns it...\n\nThe end result is that the error message \"Unable to determine list of acceptable\nCA certificates for client authentication\" will never make it into an error log,\nand Apache will start up acting as if the CA certificates were loaded correctly.\n If \"SSLVerifyClient required\" is set for the whole virtual host, then users may\nfind this message in their logs: \"Init: Oops, you want to request client\nauthentication, but no CAs are known for verification!?  [Hint:\nSSLCACertificate*]\"  That was particularly confusing to me because Apache never\ncomplained about my SSLCACertificateFile and/or SSLCACertificatePath settings.\n\nYou can verify that the \"Unable to determine list of acceptable CA certificates\nfor client authentication\" has never really made into users' error logs by\ngoogling for that exact phrase.  It only yields two or three results.\n\nThere is also a problem in ssl_init_FindCAList where openssl errors are silently\nignored if loading SSLCACertificateFile fails.  The ssl_init_PushCAList function\nis called to add the ca_file's certificate(s) to ca_list, but if its call to\nSSL_load_client_CA_file comes up empty, then it returns immediately without\nhaving added anything to ca_list.  That is how it has to be in\nssl_init_PushCAList, because it is also called for each file in the\nSSLCACertificatePath directory if that is also set, and that directory will\ncontain non-certificate files, so printing out the openssl errors inside\nssl_init_PushCAList is a bad idea.  However, I can find no reason why\nssl_init_FindCAList shouldn't check to see if ca_list is still empty after\ntrying to use ssl_init_PushCAList to add the SSLCACertificateFile's certs to the\nlist.  If ca_list is still empty after trying to load the cert(s) in that file,\nthen we know openssl has an error to report, and currently that error is being\nsilently discarded.\n\nIn my case, I had a self-signed CA certificate with \"BEGIN TRUSTED CERTIFICATE\"\non the first line, instead of \"BEGIN CERTIFICATE\" and openssl was unable to load\nthe certificate because:\n\n6751:error:0906D06C:PEM routines:PEM_read_bio:no start\nline:pem_lib.c:642:Expecting: CERTIFICATE\n\nBut I never saw any mention of that in my Apache error logs, which resulted in\nthe hours of confusion and debugging which led me here.  I have two very small\npatch files, one for 2.0-HEAD and one for 2.2-HEAD.  I'll append those patches\nas attachments."}, {"count": 1, "tags": [], "bug_id": 40312, "attachment_id": 18751, "text": "Created attachment 18751\nPatch for 2.0.59 which fixes the invalid if condition, and logs openssl errors if SSLCACertificateFile fails to load", "id": 92512, "time": "2006-08-24T21:13:23Z", "creator": "issues.apache.org@ourdetour.com", "creation_time": "2006-08-24T21:13:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 40312, "attachment_id": 18752, "id": 92513, "time": "2006-08-24T21:14:09Z", "creator": "issues.apache.org@ourdetour.com", "creation_time": "2006-08-24T21:14:09Z", "is_private": false, "text": "Created attachment 18752\nPatch for 2.2.3 which fixes the invalid if condition, and logs openssl errors if SSLCACertificateFile fails to load"}, {"count": 3, "tags": [], "bug_id": 40312, "text": "fixed in trunk in r1026906", "id": 140978, "time": "2010-10-24T18:15:22Z", "creator": "sf@sfritsch.de", "creation_time": "2010-10-24T18:15:22Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "tlhackque@yahoo.com", "is_private": false, "count": 4, "id": 145445, "time": "2011-03-31T21:13:40Z", "bug_id": 40312, "creation_time": "2011-03-31T21:13:40Z", "text": "1) This seems to be the same issue raised in  bug #47329.  I, too, lost hours debugging the same problem with a TRUSTED certificate.\n\n2) Bug #47329 contained a suggested patch (by jorton, modified by me) that was never committed.\n\n3) The code added here only reports an error in one of two cases.\n\nYour analysis indicated that the directory case should continue to fail silently because other files can exist in that directory.  I don't think this is right.  If a directory contains hundreds of files, debugging a problem where just one or two fail to load will be at least as painful as the case that you fixed.  We can do better.\n\nI believe that the only other files that can legitimately be in a certificate directory are CRLs and hash symlinks.  Note that c_rehash will complain if any other type of file is found.\n\nHash symlinks for certificates are exactly 8 hex digits, '.', and a decimal sequence number.  Filenames of this form can be ignored since the file that they point to will be in the same directory.  (At least if the standard c_rehash utility is used.  I suppose someone could be 'clever' and separate them.)  Ignoring them has the advantage that we will only read the file once, rather than processing it twice and discarding the duplicates...\n\nHash symlinks for CRLs are exactly 8 hex digits, '.r', and a decimal sequence number. Filenames of this form can be ignored since we aren't loading CRLs.\n\nA file can contain any number of certificates and/or CRLs.  I don't think there's a way to identify what's in a file without reading it and looking for the '^-----BEGIN (((TRUSTED|X509) CERTIFICATE)|X509 CRL)----- line(s).\n\nA file that doesn't contain at least one of these tags doesn't belong in the directory, and we should log an error.  (It's probably corrupt, in DER format, a key or some other data.  Again, c_rehash would whine in this case.)\n\nA file that contains just 'X509 CRL' lines can be silently ignored.\n\nOtherwise, the file claims to contain one or more certificates, and we can ask OpenSSL to read it.  Any error returned by OpenSSL should be logged...\n\nIt's too bad that OpenSSL doesn't provide a sufficiently detailed error code to avoid the need for mod_ssl to prescan the file, but that's life.  \n\nThis wouldn't be as inefficient as it seems; currently we're asking OpenSSL to process each file twice (once via symlink, once as a regular file).  And these are likely to be a good distance apart because of the names.  Scanning to classify first is only a string search on each line (not base64/ASN.1 decode, etc), and OpenSSL will almost certainly find the data in the buffer cache for the files we select."}, {"count": 5, "tags": [], "bug_id": 40312, "attachment_id": null, "text": "This has been fixed in the 2.4.x branch (in the 2.3.9 dev release)", "id": 180712, "time": "2015-02-03T07:30:31Z", "creator": "christophe.jaillet@wanadoo.fr", "creation_time": "2015-02-03T07:30:31Z", "is_private": false}]
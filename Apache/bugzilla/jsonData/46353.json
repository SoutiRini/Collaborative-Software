[{"count": 0, "tags": [], "bug_id": 46353, "attachment_id": null, "id": 123116, "time": "2008-12-05T03:59:40Z", "creator": "java@dialsolutions.co.uk", "creation_time": "2008-12-05T03:59:40Z", "is_private": false, "text": "JSVGCanvas and JSVGComponent ignore setOpaque() and always draw a background\n\nI think it's becuase\nAbstractJGVTComponent.paintComponent\nalways does this...\n\ng2d.setComposite(AlphaComposite.SrcOver);\ng2d.setPaint(getBackground());\ng2d.fillRect(visRect.x,     visRect.y,\n             visRect.width, visRect.height);\n\nbut perhaps this should be wrapped in a isOpaque check?\n\nif{isOpqaue())\n{\ng2d.setComposite(AlphaComposite.SrcOver);\ng2d.setPaint(getBackground());\ng2d.fillRect(visRect.x,     visRect.y,\n             visRect.width, visRect.height);\n}\n\ncurrent workaround (which maybe processor heavy) is to set the component background to a color with a alpha channel set to 0 (e.g. setBackground(new Color(0,0,0,0));"}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> JSVGCanvas and JSVGComponent ignore setOpaque() and always draw a background\n\n  Correct it always draws the background color you tell it to.\nThere is no reason that setOpaque should disable this, the\nbackground color may be semi-transparent.\n\n> but perhaps this should be wrapped in a isOpaque check?\n\n  No.\n\n> current workaround (which maybe processor heavy) is to set the component\n> background to a color with a alpha channel set to 0 (e.g. setBackground(new\n> Color(0,0,0,0));\n\n   This is the correct solution.  I'd be suprised if it was processor \nintensive as the Graphics2D engine almost certainly will skip actually\ndrawing the rect if the color has an opacity of zero.\n", "attachment_id": null, "bug_id": 46353, "id": 123140, "time": "2008-12-05T18:01:35Z", "creator": "deweese@apache.org", "creation_time": "2008-12-05T18:01:35Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46353, "attachment_id": null, "id": 123187, "time": "2008-12-09T02:13:50Z", "creator": "java@dialsolutions.co.uk", "creation_time": "2008-12-09T02:13:50Z", "is_private": false, "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > JSVGCanvas and JSVGComponent ignore setOpaque() and always draw a background\n> \n>   Correct it always draws the background color you tell it to.\n> There is no reason that setOpaque should disable this, the\n> background color may be semi-transparent.\n> \nWhat should setOpaqaue(false) do then on a JSVGCanvas or JSVGComponent?\n\nI've been digging around the javaswing to find the equivalent and JComponent.paintComponent invokes the update method in\nComponentUi.java which does this...\n    public void update(Graphics g, JComponent c) {\n\tif (c.isOpaque()) {\n\t    g.setColor(c.getBackground());\n\t    g.fillRect(0, 0, c.getWidth(),c.getHeight());\n\t}\n\tpaint(g, c);\n    }\n"}, {"count": 3, "tags": [], "bug_id": 46353, "attachment_id": null, "id": 123188, "time": "2008-12-09T02:26:52Z", "creator": "java@dialsolutions.co.uk", "creation_time": "2008-12-09T02:26:52Z", "is_private": false, "text": "this may also be of interest, I think it's saying the background color should only be used if the component is opaque.\n\nhttp://java.sun.com/javase/6/docs/api/javax/swing/JComponent.html#setBackground(java.awt.Color)\n\ncheers\n-- \nJames D"}]
[{"count": 0, "tags": [], "bug_id": 47262, "text": "The value \"120\" in an Excel cell that is formatted as type text is being read as type CELL_TYPE_NUMERIC with a value of \"120.0\" when the contents are retrieved using the cell.toString() function.\n\ntest output:java test_num SamplespreadSheet.xls\n\nCell 0,0 Numeric: 120.0.\nCell 1,0 String: abc.\nCell 2,0 Numeric: 120.01.\n\n\n\n\ntest code - test_num.java\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.FilePermission;\nimport java.util.Iterator;\nimport java.security.AccessController;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.GnuParser;\nimport org.apache.commons.cli.HelpFormatter;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.poi.hssf.usermodel.*;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\nimport org.xml.sax.SAXException;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.SAXParseException;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\n\nimport java.io.IOException;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.dom.DOMSource;\n\nimport org.xml.sax.*; \nimport org.xml.sax.helpers.DefaultHandler;\nimport java.util.regex.*;\n\n\npublic class test_num {\n\n    static File xlsFile; \n\n    public static String file_name;\n\n\n    public static void main (String[] args) {\n\n        file_name = args[0];\n        xlsFile =  new File(file_name);\n\n        try {\n\n            POIFSFileSystem fs = new POIFSFileSystem( \n                new FileInputStream( \n                    file_name));\n\n            HSSFWorkbook wb = new HSSFWorkbook(fs);\n            HSSFSheet sheet = wb.getSheetAt(0);\n            int firstRow;\n            int lastRow;\n            int numPhysicalRows;\n            \n            firstRow = sheet.getFirstRowNum();\n            lastRow = sheet.getLastRowNum();\n            numPhysicalRows = sheet.getPhysicalNumberOfRows() ;\n\n            for (int i = firstRow; i<= lastRow; i++){\n    \t\t\n                HSSFRow row = sheet.getRow(i);\n                if(row != null) {\n\n                    short firstCell;\n                    short lastCell;\n                    int physicalNumberofCells;\n                    firstCell = row.getFirstCellNum();\n                    lastCell = row.getLastCellNum();\n                    physicalNumberofCells = row.getPhysicalNumberOfCells();\n\n                    if(physicalNumberofCells > 0){\n                            \n                        for (int j = firstCell; j < lastCell; j++ ){\n                                \n                            HSSFCell cell = row.getCell(j);\n\n                            if (cell != null) {\n                                int cellType = cell.getCellType();\n                                switch(cellType){\n    \t\t\n                                case org.apache.poi.hssf.usermodel.HSSFCell.CELL_TYPE_NUMERIC:  System.out.println(\"Cell \"+i+\",\"+j+\" Numeric: \"+cell.toString()+\".\"); break;\n                                case org.apache.poi.hssf.usermodel.HSSFCell.CELL_TYPE_STRING:  System.out.println(\"Cell \"+i+\",\"+j+\" String: \"+cell.toString()+\".\"); break;\n                                default: System.err.println(\"Invalid unknown cell type: \"+i+\",\"+j+\"\\n\");//break;\n                                }                    \n                                        //    readCell(cell, i, docRow);\n                            } \n                        }\n\n                    }\n                                    \n                }\n                                \n            }\n        } catch (Exception e) {\n\n            System.err.println(\"caught exception \"+e.toString());\n            e.printStackTrace();\n            System.exit(1);\n\n        }\n    }\n}", "id": 127385, "time": "2009-05-25T12:04:19Z", "creator": "david.wilson@cgi.com", "creation_time": "2009-05-25T12:04:19Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 47262, "text": "Created attachment 23713\nInput excel file", "id": 127386, "time": "2009-05-25T12:05:38Z", "creator": "david.wilson@cgi.com", "creation_time": "2009-05-25T12:05:38Z", "is_private": false, "attachment_id": 23713}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 127405, "time": "2009-05-26T05:30:26Z", "bug_id": 47262, "creation_time": "2009-05-26T05:30:26Z", "is_private": false, "text": "This is entirely to be expected. Please see the docs for more details. Excel really does store these cells as numeric."}]
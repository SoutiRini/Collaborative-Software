[{"count": 0, "tags": [], "creator": "xsilly@java.at", "text": "request.getRequestDispatcher( \"...\" ) does not return null (as said in the API \ndocumentation), when it does not know the resource.\nE.g.\nrequest.getRequestDispatcher( \"aaaaa\" ).forward( request, response ) \nforwards an error page, saying that aaaaa does not exist.\nIn former versions of servlet engines, getRequestDispatcher did return null in \nsuch a case - and this is also what is said in the documentation.", "id": 8916, "time": "2001-12-14T05:19:33Z", "bug_id": 5432, "creation_time": "2001-12-14T05:19:33Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "craig.mcclanahan@sun.com", "attachment_id": null, "id": 8941, "time": "2001-12-14T18:47:52Z", "bug_id": 5432, "creation_time": "2001-12-14T18:47:52Z", "is_private": false, "text": "To be precise, this is what the Javadocs say:\n\n    \"This method returns null if the ServletContext\n    cannot return a RequestDispatcher.\"\n\nwhich is not quite the same as \"when it does not know the resource\".\n\nThe way a RequestDispatcher is located is this:  all the servlet mappings in the\ncurrent web application are compared to the path you specify.  If no servlet can\nbe found to handle this path, you'll get a null back -- if you had submitted\nsuch a request from your browser, you'd get a 403 BAD REQUEST error).\n\nNow, Tomcat supports serving static resources from your application (a feature\nnot required in the Servlet Spec, by the way).  The way this is accomplished is\nthrough the \"default servlet mapping\" feature of the Servlet Specification.  You\nwill find the following entry in $CATALINA_HOME/conf/web.xml:\n\n    <servlet-mapping>\n        <servlet-name>default</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\nWhat the special mapping pattern \"/\" means is \"whenever you are processing a URL\nthat does not match any other servlet, give it to the 'default' servlet\", which\nis the servlet that actually serves the static resource.  In other words, there\nwill *always* be a servlet to map to a servlet -- therefore you will not get a\nnull back from the getRequestDispatcher() call.\n\nNote that the container has no way to know whether the path is meaningful to the\ndefault servlet or not (remember, you can replace the default servlet with your\nown if you want).  Therefore, it's just going to hand the request on to that\nservlet.\n\nIf you want to programmatically check whether a resource exists, you can say:\n\n    URL url = getServletContext().getResource(\"/foo.txt\");\n    if (url == null)\n        ... the resource does not exist ...\n\nOne final note -- Tomcat has worked this way the entire time I've been working\nwith it (in other words, since version 3.0).\n"}]
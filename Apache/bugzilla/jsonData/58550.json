[{"count": 0, "tags": [], "bug_id": 58550, "attachment_id": 33222, "id": 185974, "time": "2015-10-26T11:25:46Z", "creator": "horowity@gmail.com", "creation_time": "2015-10-26T11:25:46Z", "is_private": false, "text": "Created attachment 33222\nPatch to allow multiple accept mutexes\n\nHello Apache gurus.\n\nI was working on a project which used Apache 2.2.x with prefork MPM (using flock as mutex method) on Linux machine (with 20 cores), and run into the following problem.\n\nDuring load, when number of Apache child processes get beyond some point (~3000 processes) - Apache didn\u2019t accept the incoming connections in reasonable time (seen in netstat as SYN_RECV).\n\nI found a document about Apache Performance Tuning [1], in which there is an idea to improve the performance by:\n\n\u201cAnother solution that has been considered but never implemented is to partially serialize the loop -- that is, let in a certain number of processes. This would only be of interest on multiprocessor boxes where it's possible that multiple children could run simultaneously, and the serialization actually doesn't take advantage of the full bandwidth. This is a possible area of future investigation, but priority remains low because highly parallel web servers are not the norm.\u201d\n\nI wrote a small patch (aligned to 2.2.31) that implements this idea \u2013 create 4 mutexes and spread the child processes across the mutexes (by getpid() % mutex_number).\n\nSo in any given time - 4 ideal child processes are expected [2] to wait in the \u201cselect loop\u201d.\n\nOnce a new connection arrive - 4 processes are awake by the OS: 1 will succeed to accept the socket (and will release his mutex) and 3 will return to the \u201cselect loop\u201d.\n\nThis solved my specific problem and allowed me to get more load on the machine.\n\nMy questions to this forum are:\n\n1.       Do you think this is a good implementation of the suggested idea?\n\n2.       Any pitfalls I missed?\n\n3.       Would you consider accepting this patch to the project?\nIf so, could you guide me what else needs to be done for acceptances?\nI know there is a need for configuration & documentation work - I\u2019ll work on once the patch will be approved\u2026\n\n4.       Do you think \u20184\u2019 is a good default for the mutexes number? What should be the considerations to set the default?\n\n5.       Does such implementation relevant for other MPMs (worker/event)?\n\nAny other feedback is welcome.\n\n[1] http://httpd.apache.org/docs/2.2/misc/perf-tuning.html, accept Serialization - Multiple Sockets section.\n\n[2] There is no guarantee that exactly 4 processes will wait as all processes of \u201cgetpid() % mutex_number == 0\u201d might be busy in a given time. But this sounds to me like a fair limitation.\n\nNote: flock give me the best results, still it seems to be with n^2 complexity (where \u2018n\u2019 is the number of waiting processes), so reducing the number of processes waiting on each mutex give exponential improvement.\n\nRegards,\n\nYehezkel Horowitz\nCheck Point Software Technologies Ltd."}]
[{"attachment_id": null, "tags": [], "bug_id": 57738, "text": "When reading a spreadsheet containing certain numbers (for example 8.2), the XSSFSheetXmlHandler will output the incorrect value. \n\nI believe this is due to an error in the NUMBER case of the method endElement, where formatted cells are parsed as doubles, but unformatted cells simply return the internal value, which for reasons I don't understand, is 8.1999... rather than 8.2. It appears that simply converting these into Doubles will return the correct value. \n\nWe don't currently have a work around - since this needs to happen only when the value is a number, in order to distinguish strings like '012' from numbers like '12' we can't simply attempt to parse all strings passed to output.cell. \n\nI'm unfamiliar with how to use SVN and create patches, but the following code seems to fix the problem:\n\ncase NUMBER:\n    String n = value.toString();\nif (this.formatString != null) {\n    thisStr = formatter.formatRawCellContents(Double.parseDouble(n), this.formatIndex, this.formatString);\n} else {\n    DecimalFormat df = new DecimalFormat(\"0\");\n    df.setMaximumFractionDigits(340);\n    thisStr = df.format(Double.parseDouble(n));\n}", "count": 0, "id": 181974, "time": "2015-03-22T21:08:21Z", "creator": "tim.slatcher@gmail.com", "creation_time": "2015-03-22T21:08:21Z", "is_private": false}, {"count": 1, "tags": [], "text": "Both Excel's .xls and .xlsx use doubles to store numbers, and formatting rules to specify how numbers should be shown to the user. If you want POI to give you a string of \"what Excel shows for a cell\", you need to use DataFormatter\n\nIf you look at org.apache.poi.xssf.eventusermodel.XLSX2CSV you'll see an example of doing this.", "is_private": false, "id": 181980, "creation_time": "2015-03-22T22:52:19Z", "time": "2015-03-22T22:52:19Z", "creator": "apache@gagravarr.org", "bug_id": 57738, "attachment_id": null}, {"count": 2, "tags": [], "text": "I'm not sure I follow. Are you saying I need to reimplement XSSFSheetXmlHandler to do what I want? Given that it outputs as strings, I see no reason it wouldn't give you the exactly content the user sees, is that class supposed to do something else?\n\nFrom looking at the source code to XLSX2CSV it has the exact same bug that I'm referencing here - put the number 8.2 in an XLSX, feed it through that class and the CSV will have different numbers in the cells. \n\nAlso, 8.2 is representable as a double, so this doesn't explain why this number would appear as 8.199... unless I'm miss-understand double representation.", "is_private": false, "id": 181981, "creation_time": "2015-03-22T23:09:18Z", "time": "2015-03-22T23:09:18Z", "creator": "tim.slatcher@gmail.com", "bug_id": 57738, "attachment_id": null}, {"count": 3, "tags": [], "creator": "tim.slatcher@gmail.com", "text": "Any response to my comment below? I'd like to re-open this unless you disagree with my statement that the XLSX2CSV converter also has this bug.", "id": 182299, "time": "2015-04-10T09:00:55Z", "bug_id": 57738, "creation_time": "2015-04-10T09:00:55Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57738, "attachment_id": null, "id": 182604, "time": "2015-04-24T01:35:32Z", "creator": "apache@gagravarr.org", "creation_time": "2015-04-24T01:35:32Z", "is_private": false, "text": "Are you able to produce a very small .xlsx file which shows the problem with XLSX2CSV? Say, one with just a few cells completed, some of which POI is getting right, and some it isn't.\n\nIf so, please attach the file here, along with a screenshot of what Excel shows for the file, and details of what cells fail with XLSX2CSV + why (eg A4 should be 8.21 but is being output as 8.2099)\n\nIf you can reproduce the problem with XLSX2CSV and produce those things, it should make it quite quick to unit test + hopefully fix!"}]
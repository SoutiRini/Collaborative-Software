[{"count": 0, "tags": [], "bug_id": 30189, "attachment_id": null, "id": 60824, "time": "2004-07-19T19:18:26Z", "creator": "archie@dellroad.org", "creation_time": "2004-07-19T19:18:26Z", "is_private": false, "text": "There seems to be a bug in the UpdateManager suspend() and resume()\nmethods in Batik 1.5.1.\n\nThe bug is that a thread can invoke and return from both suspend()\nand resume() before the suspension has even taken effect, and then\nthe resume() seems to get lost.\n\nE.g., my code looks like this:\n\n        System.out.println(\"SUSPENDING\");\n        um.suspend();\n\n        .. do some stuff ..\n\n        System.out.println(\"RESUMING\");\n        um.resume();\n\nI also have an UpdateManagerListener which prints the events.\nThe output when it works correctly is:\n\n        SUSPENDING\n        listener: update manager was suspended\n        RESUMING\n        listener: update manager was resumed\n\nThe output when it fails is:\n\n        SUSPENDING\n        RESUMING\n        listener: update manager was suspended\n\n..and then no updates until further notice!"}, {"count": 1, "tags": [], "text": "Without a standalone reproducable test case there isn't\nmuch I can do with this bug report.\n", "attachment_id": null, "id": 60858, "creator": "deweese@apache.org", "time": "2004-07-20T11:02:53Z", "bug_id": 30189, "creation_time": "2004-07-20T11:02:53Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 30189, "attachment_id": null, "id": 62151, "time": "2004-08-18T22:32:25Z", "creator": "archie@dellroad.org", "creation_time": "2004-08-18T22:32:25Z", "is_private": false, "text": "The problem is clear by looking at the code...\n\n    /**\n     * Suspends the update manager.\n     */\n    public synchronized void suspend() {\n        if (running) {\n            suspendCalled = true;\n            updateRunnableQueue.suspendExecution(false);\n        }\n    }\n\nNote the \"false\", which means \"don't wait for the suspension\nto actually take effect\".\n\nWhat would be helpful is if there was a version of suspend()\nthat took a boolean parameter, which was passed on to the\nsuspendExecution() invocation.\n\nAlso, the existing no-arg version should be documented to\nnote that it doesn't wait by default.\n\nSo this is not really a code bug I guess, just a lack of clarity\nin the API doc which tripped me up.\n\nAs a workaround I'll try listening for the notification that\nthe update manager has been suspended before proceeding.\n\n"}, {"count": 3, "tags": [], "bug_id": 30189, "attachment_id": null, "id": 62170, "time": "2004-08-19T11:36:51Z", "creator": "deweese@apache.org", "creation_time": "2004-08-19T11:36:51Z", "is_private": false, "text": "Actually, I still consider this a bug.\nThe interface should ensure that if you call suspend then resume\nthings will eventually resume.\n\nSo can you still provide a test case?"}, {"count": 4, "tags": [], "text": "I don't have a test case handy and unfortunately it will take me a while to\ncreate one because of work overload at the moment.\n\nHowever, if you look at the code for UpdateManager.suspend() and\nRunnableQueue.suspendExecution() (~35 lines total) it's obvious\nwhat's going on:\n\n1. RunnableQueue.suspendExecution() returns immediately\n   because UpdateManager.suspend() invokes it with waitTillSuspended=false.\n\n2. UpdateManager.resume(), does nothing unless UpdateManager.running\n   is false. But it won't immediately be false because\n   UpdateManager.UpdateManagerRunHander.executionSuspended(), which\n   is the listener notification method that sets running to false,\n   hasn't had time to be invoked yet (because the suspension hasn't\n   actually happened yet).\n\nPerhaps the fix is for UpdateManager.resume() to check for the\npredicate \"suspendCalled && running\", and if so, invoke\nupdateRunnableQueue.resumeExecution().. ?\n\n", "attachment_id": null, "id": 62184, "creator": "archie@dellroad.org", "time": "2004-08-19T16:35:30Z", "bug_id": 30189, "creation_time": "2004-08-19T16:35:30Z", "is_private": false}, {"count": 5, "tags": [], "text": "I believe this bug is fixed in CVS on Feb 20.\nPlease reopen if you dissagree.", "attachment_id": null, "id": 40580, "creator": "deweese@apache.org", "time": "2005-03-22T11:53:01Z", "bug_id": 30189, "creation_time": "2005-03-22T11:53:01Z", "is_private": false}]
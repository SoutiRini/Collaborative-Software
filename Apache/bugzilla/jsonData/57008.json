[{"attachment_id": null, "tags": [], "creator": "guenter.hoffmann@hp.com", "text": "I've created a Workbook using \"new XSSFWorkbook()\", created a sheet, a row and a cell. Into this cell I wrote \"sometext_x0427_sometext\" using \"setCellValue\". When storing the resulting workbook in a file and then try to open it with Excel, Excel tells me that the file is corrupted. After saying \"ok, repair the file\" I can see some strange character instead of the \"_0x427_\". If you send the excel file from Web-Server to IE-Client over a response stream you cannot even open the Excel data.\nThis seems to be an Excel \"feature\" and if you prepend this string with \"_0x005F\" the string stays at it is.\nOf course I might change my code and check the strings I want to write whether they contain strings in a certain format and then prepend this \"_0x005F\". But I think \"nobody\" knows about this feature and every one is wondering what happened to their data.\nSo I think the prepending of \"_0x005f\" should happen in POI.\nIf a programmer wants to use this \"feature\" he might call a new POI function i.e. setUseStrangeExcelFeature(true).", "count": 0, "id": 178048, "time": "2014-09-23T14:09:20Z", "bug_id": 57008, "creation_time": "2014-09-23T14:09:20Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 57008, "is_private": false, "id": 178053, "creation_time": "2014-09-23T15:47:55Z", "time": "2014-09-23T15:47:55Z", "creator": "apache@gagravarr.org", "text": "First up, can you try with 3.11 beta 2? (And the associated newer xmlbeans runtime)\n\nIf that doesn't help, can you see if that happens for all characters in that range, or just 0x0427?", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 57008, "is_private": false, "id": 178071, "time": "2014-09-24T09:37:05Z", "creator": "guenter.hoffmann@hp.com", "creation_time": "2014-09-24T09:37:05Z", "tags": [], "text": "Sorry I entered the wrong POI version. The version I am using is the 3.10.1 (I changed it in this bug)\n\nIf I write the string: \n\nhgh_x0041_**_x0100_*_x0101_*_x0190_*_x0200_*_x0300_*_x0427_*\n\ninto a cell the following appears on the screen: \n\nhghA**\u0100*\u0101*\u0190*\u0200*\u0300*\u0427*\n\nSo the problem occurs (so it seems) for all strings with the pattern: _xhhhh_\nwhere h is a hex digit and x is exact a lower x.\n\nI will try to use the latest poi version if I find the time. I think this will last some days.\n\nThanks for your help!"}, {"count": 3, "tags": [], "bug_id": 57008, "is_private": false, "id": 178081, "creation_time": "2014-09-24T15:06:12Z", "time": "2014-09-24T15:06:12Z", "creator": "guenter.hoffmann@hp.com", "text": "My problem is described on the following URL:\nhttp://social.msdn.microsoft.com/Forums/office/en-US/7580de39-489b-4593-b68d-dc1c33b1a6b3/escaping-encoded-characters-ex-xf8ff-?forum=exceldev\nBut there seems to be no answer since 2010 :-(", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57008, "is_private": false, "id": 178410, "creation_time": "2014-10-13T19:48:13Z", "time": "2014-10-13T19:48:13Z", "creator": "dominik.stadler@gmx.at", "text": "I did some searching and found a few places where this is discussed:\n\n* http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.74/lib/Excel/Writer/XLSX/Package/SharedStrings.pm\n\n    # Excel escapes control characters with _xHHHH_ and also escapes any\n    # literal strings of that type by encoding the leading underscore. So\n    # \"\\0\" -> _x0000_ and \"_x0000_\" -> _x005F_x0000_.\n    # The following substitutions deal with those cases.\n\n    # Escape the escape.\n    $string =~ s/(_x[0-9a-fA-F]{4}_)/_x005F$1/g;\n\n    # Convert control character to the _xHHHH_ escape.\n    $string =~ s/([\\x00-\\x08\\x0B-\\x1F])/sprintf \"_x%04X_\", ord($1)/eg;\n\n* http://public.vrac.iastate.edu/~charding/HCI574_lecture_notes/lecture24/XlsxWriter-0.5.3/xlsxwriter/sharedstrings.py\n\n        # Excel escapes control characters with _xHHHH_ and also escapes any\n        # literal strings of that type by encoding the leading underscore.\n        # So \"\\0\" -> _x0000_ and \"_x0000_\" -> _x005F_x0000_.\n        # The following substitutions deal with those cases.\n\n        # Escape the escape.\n        string = re.sub('(_x[0-9a-fA-F]{4}_)', r'_x005F\\1', string)\n\n        # Convert control character to the _xHHHH_ escape.\n        string = re.sub(r'([\\x00-\\x08\\x0B-\\x1F])',\n                        lambda match: \"_x%04X_\" %\n                        ord(match.group(1)), string)\n\n* https://social.technet.microsoft.com/Forums/sharepoint/en-US/a00949a6-4b2d-4cde-875f-850870b76900/ssrs2012-export-to-excel-excel-found-unreadable-content?forum=sqlreportingservices\n\nSo there seems to be a way to escape characters this way and also a way to escape the escape-sequence to allwo to embed this in literal form.", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57008, "is_private": false, "id": 178913, "creation_time": "2014-11-03T15:27:25Z", "time": "2014-11-03T15:27:25Z", "creator": "guenter.hoffmann@hp.com", "text": "Hi there, \nI wrote a test program and also a small web application using the newest beta version of POI (poi-3.11-beta2-20140822)\nand (as expected) the problem is still there.\n\nI\u00b4m not familiar with reporting bugs and what responses I can expect from you. So I don\u00b4t want to offend anybody but\nMy Problem is: I have about 20 reports which get their data from a database. Each reports got several sheets and each sheet got 20 and more columns.\nSo there are many, many statements like \"call.setCellValue(dataFromDatabase)\".\nIt \u00b4s rather impractical to add some conversion code to all these calls.\nAnd the fact is that the problem is in POI not in my/our code.\nIn my opinion POI should offer a method where the programmer can decide whether he wants to have an automatic conversion of these \"_xhhhh_\" stuff or not.\nAnd the default behavior of setCellValue should be\n\"I\u00b4d like to see the text in Excel as I can see it in the database\".\nOr in other words: If I enter \"_x0123_\" in Excel it stays \"_x0123_\" in Excel, but if I enter \"_x0123_ in POI (using setCellValue) it does not stay the same!\n\nSo I don\u00b4t need a work-around I need a solution.\nAnd this solution should be in POI I think.\n\nSo again: I don\u00b4t want to bother you (thanks to Dominik for his researches) but I need some \"POI responsible\" who corrects this mis-behavior in POI and then of course a new POI version some day.", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 57008, "text": "As POI-developer time is always scarce, you can greatly increase the chances of getting this fixed if you can provide a simple unit tests that show the problem and a proposed fix, if you are able to come up with one.", "id": 178964, "time": "2014-11-04T16:24:29Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-11-04T16:24:29Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": 32621, "bug_id": 57008, "is_private": false, "id": 182183, "time": "2015-03-30T13:28:35Z", "creator": "carlo.dellacqua@ext.piksel.it", "creation_time": "2015-03-30T13:28:35Z", "tags": [], "text": "Created attachment 32621\nTest classes and description of the results\n\nTest_xNNNN_inCell is a test class which calls setCellValue(...) (for XSSF,SXSSF, HSSF) to write a text string containing the substring \"_x0046_\";\nUtils is a class which contains methods used to escape the previous code;\nTest_xNNNN_inCell_HSSF.xls, Test_xNNNN_inCell_XSSF.xlsx, Test_xNNNN_inCell_SXSSF.xlsx are the excel files written by the test class.\n\nTest_xNNNN_inCell_HSSF.xls contains:\nrow 0, cell 0 _x0046_ without changes\nrow 0, cell 1 _x005f_x0046_ with changes\nthat is the right original and escaped text strings.\n\nTest_xNNNN_inCell_XSSF.xlsx contains:\nrow 0, cell 0 F without changes\nrow 0, cell 1 _x0046_ with changes\nthat is the first cell contains 'F' which is the character related to the unicode x0046, which is the text written in the cell,\nthe second cell contains the expected text \"_x0046_\", obtained adding the text \"_x005F\"."}, {"count": 8, "attachment_id": null, "bug_id": 57008, "is_private": false, "id": 182186, "time": "2015-03-30T14:51:26Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-30T14:51:26Z", "tags": [], "text": "Thanks, that now made it easier to dig into this, unfortunately it seems this is currently done \"by design\" in POI to implement the encoding that Excel files define so we write and read files consistently with what Microsoft OOXML spec states.\n\nEscaping is done at XSSFRichtTextString.utfDecode(), however it seems this was put in on purpose, so I am reluctant to \"undo\" it here as likely others depend on it being in place...\n\nFurthermore as we did not get any related bug-report for a long time and the code is in place since 2010, I don't think many people write such a _xXXXX_ text \"by chance\" into their files, unfortunately it seems to have hit you here.\n\nOverall I think your best bet currently is to perform the escaping via _0x005F in your code before you populate the cell via some helper function."}, {"count": 9, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "*** Bug 57780 has been marked as a duplicate of this bug. ***", "id": 182513, "time": "2015-04-20T20:40:06Z", "bug_id": 57008, "creation_time": "2015-04-20T20:40:06Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 57008, "is_private": false, "id": 193810, "creation_time": "2016-09-19T13:14:32Z", "time": "2016-09-19T13:14:32Z", "creator": "dominik.stadler@gmx.at", "text": "*** Bug 60147 has been marked as a duplicate of this bug. ***", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "matthias.gerth@avelon.ch", "text": "I understand that this is decoding is necessary when reading an excel file. But why this decoding is done when simply setting the value of a cell programmatically escapes me.\n\nThis behaviour is not mentioned in the API documentation. And there is no escaping function provided.\n\nSince it this function does not work like it is defined in the Cell interface I consider this a bug.", "count": 11, "id": 203241, "time": "2018-01-12T15:15:42Z", "bug_id": 57008, "creation_time": "2018-01-12T15:15:42Z", "is_private": false}, {"count": 12, "tags": [], "creator": "jmarkmurphy@apache.org", "text": "I was intrigued by this issue so I went into Excel and typed LUS_BO_WP_x24B8_AI into a cell. Excel retained the text as typed. So I looked in the XML and found that _x24B8_ had been changed to _x005F_x24B8_. It seems to me that when a user sets a value, that value should be escaped if it isn't already so that what they set the value to is what they get. I also recognize that some may need to use the special strings to encode Unicode characters, and would want them to appear as such. It seems to me that the default behavior should be to insert the escaped value into the cell, and have a special setRawValue() method for the cases where you want those special values to remain unescaped. Though I could be convinced that we should leave setValue alone and create a setEscapedText() method where a user might want to use these _x####_ values.", "id": 203245, "attachment_id": null, "bug_id": 57008, "creation_time": "2018-01-12T20:16:58Z", "time": "2018-01-12T20:16:58Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 57008, "text": "I've written an escape function as a workaround.\nhttps://stackoverflow.com/questions/48222502/xssfcell-in-apache-poi-encodes-certain-character-sequences-as-unicode-character\n\nSo my use case is this: I need to store a string containing \"_x24B8_\" into an excel file. This is user input and I can not prevent this. The setValue function on XSSFCell has one parameter of type java.lang.String. Java string does not use microsoft encoding to represent unicode character.\n\nSo this happens\n1. String value = \"_x24B8_\";\n2. String valueEscaped = escape(value); // \"_x005F_x24B8_\"\n3. cell.setValue(valueEscaped) // cell.value is now \"_x24B8_\"\n4. once the file is written is changes back to \"_x005F_x24B8_\" in the file\n\nI think setValue should not call XSSFRichTextString.utfDecode(). This would prevent this back and forth encoding.\nWe could also make XSSFRichTextString.utfDecode() a public for people who are using this type of encoding. I would prefer this microsoft encoding terminated within the library since it is specific to the office file format.", "id": 203278, "time": "2018-01-15T16:02:15Z", "creator": "matthias.gerth@avelon.ch", "creation_time": "2018-01-15T16:02:15Z", "is_private": false, "attachment_id": null}, {"count": 14, "attachment_id": null, "bug_id": 57008, "is_private": false, "id": 203301, "time": "2018-01-16T17:40:39Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2018-01-16T17:40:39Z", "tags": [], "text": "(In reply to Matthias Gerth from comment #13)\n> I've written an escape function as a workaround.\n> https://stackoverflow.com/questions/48222502/xssfcell-in-apache-poi-encodes-\n> certain-character-sequences-as-unicode-character\n> \n> So my use case is this: I need to store a string containing \"_x24B8_\" into\n> an excel file. This is user input and I can not prevent this. The setValue\n> function on XSSFCell has one parameter of type java.lang.String. Java string\n> does not use microsoft encoding to represent unicode character.\n> \n> So this happens\n> 1. String value = \"_x24B8_\";\n> 2. String valueEscaped = escape(value); // \"_x005F_x24B8_\"\n> 3. cell.setValue(valueEscaped) // cell.value is now \"_x24B8_\"\n> 4. once the file is written is changes back to \"_x005F_x24B8_\" in the file\n> \n> I think setValue should not call XSSFRichTextString.utfDecode(). This would\n> prevent this back and forth encoding.\n> We could also make XSSFRichTextString.utfDecode() a public for people who\n> are using this type of encoding. I would prefer this microsoft encoding\n> terminated within the library since it is specific to the office file format.\n\nIn my mind, this is how it should work: cell.setValue() should perform a utfEscape() (this does not currently exist) which will add \"_x005F\" to anything that looks like \"_x####_\" but not to things that look like \"_x005F_x####_\". conversely cell.getRichTextString() should perform a utfUnescape() (this does not exist) which will strip the \"_x005F\" from anything that looks like \"_x005F_x####_\". But we need to make sure that when reading a file, or processing XML, these Unicode special characters remain unchanged. Section 3.18.96 in Office Open XML 1st Edition Part 4 indicates that Unicode characters that cannot be in an XML document need to be encoded as \"_x####_\". I was unable to find out just which characters those were, so I don't know about encoding and decoding these characters. Right now it looks like we just decode \"_x####_\" to the Unicode character on read.\n\nSo If I use your example above:\n1. cell.setValue(\"_x24B8_\"); // resulting XML should contain \"_x005F_x24B8_\"\n2. cell.getRichTextString(); // should return \"_x24B8_\"\n\nFor a file read in that contains \"_x24B8_\" in a cell:\n3. cell.getRechTextString(): // should return \"\u24b8\" - utfDecode() does this correctly.\n\nFor a file read in that contains \"_x005F_x24B8_\" in a cell:\n3. cell.getRechTextString(): // should return \"_x24B8_\""}, {"count": 15, "attachment_id": null, "bug_id": 57008, "is_private": false, "id": 203317, "time": "2018-01-17T13:11:05Z", "creator": "matthias.gerth@avelon.ch", "creation_time": "2018-01-17T13:11:05Z", "tags": [], "text": "Why should utfEscape() not escape things like \"_x005F_x####_\"?\nIf I want a cell that contains the string \"_x005F_x####_\" it needs to be escaped as \"_x005F_x005F_x####_\" in the file so we get a cell that contains \"_x005F_x####_\".\nThat is the workaround I'm currently running."}, {"count": 16, "tags": [], "creator": "matthias.gerth@avelon.ch", "text": "> So If I use your example above:\n> 1. cell.setValue(\"_x24B8_\"); // resulting XML should contain \"_x005F_x24B8_\"\n> 2. cell.getRichTextString(); // should return \"_x24B8_\"\n\nI agree. But currently cell.getRichTextString() returns \"\u24b8\" in this eample and it will show \"\u24b8\" in excel.\n\nThe other two examples already work correctly.", "id": 203323, "time": "2018-01-17T17:20:55Z", "bug_id": 57008, "creation_time": "2018-01-17T17:20:55Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jmarkmurphy@apache.org", "text": "(In reply to Matthias Gerth from comment #15)\n> Why should utfEscape() not escape things like \"_x005F_x####_\"?\n> If I want a cell that contains the string \"_x005F_x####_\" it needs to be\n> escaped as \"_x005F_x005F_x####_\" in the file so we get a cell that contains\n> \"_x005F_x####_\".\n> That is the workaround I'm currently running.\n\nAgreed, I was just thinking myself into a loop, and then trying to avoid it. We should check Excel to see how it stores various versions of \"_x005f_x####\", \"_x005f_x005f_x####\", _x005f_x005f_x005f_x####_\", ... there should be a pattern.", "count": 17, "id": 203326, "time": "2018-01-17T20:23:02Z", "bug_id": 57008, "creation_time": "2018-01-17T20:23:02Z", "is_private": false}, {"count": 18, "attachment_id": null, "bug_id": 57008, "is_private": false, "id": 203327, "time": "2018-01-17T20:45:53Z", "creator": "gwoolsey@apache.org", "creation_time": "2018-01-17T20:45:53Z", "tags": [], "text": "I always go back to the standards doc when I get going around in circles.  Here's what it says about escaped strings:\n\n22.4.2.4 bstr (Basic String)\nThis element defines a binary basic string variant type, which can store any valid Unicode character. Unicode characters that cannot be directly represented in XML as defined by the XML 1.0 specification, shall be escaped using the Unicode numerical character representation escape character format _xHHHH_, where H represents a hexadecimal character in the character's value. [Example: The Unicode character 8 is not permitted in an XML 1.0 document, so it shall be escaped as _x0008_. end example] To store the literal form of an escape sequence, the initial underscore shall itself be escaped (i.e. stored as _x005F_). [Example: The string literal _x0008_ would be stored as _x005F_x0008_. end example]\n\nThe possible values for this element are defined by the W3C XML Schema string datatype.\n\nI think POI should assume it needs to escape Unicode when setting CT* class value strings, and unescape when reading them.  I don't think POI should be attempting to unescape them at any other time than when reading a string value from a CT* class."}, {"count": 19, "tags": [], "creator": "jmarkmurphy@apache.org", "text": "I saw that, and the XML spec isn't terribly helpful except that it does tell which characters are valid in XML. x00-x1F are invalid except for TAB, CR, and LF (x09, x0A, x0D). There are a few others as well that we probably should encode/decode when copying to/from the CT classes. The OOXML specs mention the XML 1.0 spec as the driving source. Here are the valid XML characters according to the XML 1.0 specification:\n\nChar    ::=    #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]", "id": 203333, "time": "2018-01-18T12:46:27Z", "bug_id": 57008, "creation_time": "2018-01-18T12:46:27Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "creator": "raviaw@gmail.com", "attachment_id": 35688, "text": "Created attachment 35688\nTest version of the program that writes 1024 OLE objects across 3 sheets\n\nTest version of the program that writes 1024 OLE objects across 3 sheets.\n\nThis version does not trigger the error - to trigger it, change the number in the constant to 1024 - this will cause 1025 objects to be written and it will trigger the error.", "id": 203377, "time": "2018-01-19T18:35:11Z", "bug_id": 57008, "creation_time": "2018-01-19T18:35:11Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 57008, "text": "(In reply to Ravi Wallau from comment #20)\n> Created attachment 35688 [details]\n> Test version of the program that writes 1024 OLE objects across 3 sheets\n> \n> Test version of the program that writes 1024 OLE objects across 3 sheets.\n> \n> This version does not trigger the error - to trigger it, change the number\n> in the constant to 1024 - this will cause 1025 objects to be written and it\n> will trigger the error\n\nWas this attached to the wrong bug?", "id": 203394, "time": "2018-01-22T12:51:09Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2018-01-22T12:51:09Z", "is_private": false, "attachment_id": null}]
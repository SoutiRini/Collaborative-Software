[{"count": 0, "tags": [], "bug_id": 49737, "attachment_id": null, "id": 139035, "time": "2010-08-10T11:24:18Z", "creator": "vernon@mauery.com", "creation_time": "2010-08-10T11:24:18Z", "is_private": false, "text": "I was playing with access control and found that while 'order allow,deny' does work as advertised on http://httpd.apache.org/docs/2.2/mod/mod_authz_host.html#order for IPv4, it does not work for IPv6.\n\nI have in my virtual host config file some lines like:\n\n<Location />\n    order allow,deny\n    allow from 2001:4860::/32\n    allow from 10.0.0.0/8\n    allow from 192.168.0.0/16\n    ....\n    # no deny lines at all, so deny if not allow match\n</Location>\n\nWith this, I am able to see that IPv4 addresses not in the list get blocked, but IPv6 addresses not in the list do not get blocked.\n\nThis is a bug as far as I can tell (or something wrong with the documentation).  But it is possible that I am mistaken somehow."}, {"count": 1, "tags": [], "bug_id": 49737, "is_private": false, "id": 139380, "attachment_id": null, "creator": "wrowe@apache.org", "creation_time": "2010-08-23T11:54:12Z", "time": "2010-08-23T11:54:12Z", "text": "Did you mean;\n\nallow from [2001:4860::]/32\n\n?  Please recheck that this fails."}, {"count": 2, "tags": [], "bug_id": 49737, "attachment_id": null, "id": 139383, "time": "2010-08-23T12:21:08Z", "creator": "vernon@mauery.com", "creation_time": "2010-08-23T12:21:08Z", "is_private": false, "text": "I figured that the unbracketed notation of IPv6 addresses was okay because on another configuration \"deny from 2001:470:80e9:0:227:13ff:fe67:7c63\" works just fine.  But at your request, I tried adding brackets to the IP address and this is what I get:\n\nroot@telly:/etc/apache2/sites-available# /etc/init.d/apache2 reload\nSyntax error on line 40 of /etc/apache2/sites-enabled/000-mauery.org:\nThe specified IP address is invalid.\n   ...fail!\n\nLine 40 is:\nallow from [2001:4860::]/32\n\n\nAs I understand the documentation, \"order allow,deny\" should default to deny in the case of only \"allow from ...\" statements.  So if all my statements are allows, then it should deny everything else.  This seems to work fine on the IPv4 addresses, but not on IPv6."}, {"count": 3, "tags": [], "bug_id": 49737, "attachment_id": null, "id": 145507, "time": "2011-04-02T03:18:08Z", "creator": "redhatter@gentoo.org", "creation_time": "2011-04-02T03:18:08Z", "is_private": false, "text": "The documentation states that brackets should not be included in mod_access specifications, and gives examples in that form.\n\nI have tried numerous variations to get allow-by-IPv6 subnets for the best part of a year.  It was a problem in older versions of Apache, and continues to be a problem in 2.2.16.\n\nI'll try it on a couple of other platforms, and double check, but I know it to be a problem on i686 Linux.\n\nI have the following in my Apache configuration:\n\nAlias /portage /home/portage\n<Directory /home/portage>\n        AllowOverride None\n        Options +Indexes -ExecCGI\n        Order deny,allow\n        Deny from all\n        Allow from 127.0.0.0/8\n        Allow from 192.168.0.0/16\n        Allow from 10.0.0.0/8\n        Allow from 2001:388:d000:1100::/56\n</Directory>\n\nI have tried:\n\n* Allow from 2001:0388:d000:1100:0000:0000:0000:0000/56\n* Allow from 2000/3\n* Allow from ::\n\nWith and without the IPv4 addresses.  They are correct according to the docs and the configuration file parser, they should work, but don't."}, {"text": "Should have added this the first time.  Logs when attempting via IPv6:\n\n==> /var/log/apache2/error_log <==\n[Sat Apr 02 17:22:45 2011] [error] [client 2001:388:d000:1100:223:32ff:fece:508] client denied by server configuration: /home/portage/\n\n==> /var/log/apache2/access_log <==\n2001:388:d000:1100:223:32ff:fece:508 - - [02/Apr/2011:17:22:45 +1000] \"GET /portage/ HTTP/1.1\" 403 263\n\nLogs when attempting via IPv4:\n\n==> /var/log/apache2/access_log <==\n192.168.64.40 - - [02/Apr/2011:17:21:54 +1000] \"GET /portage/ HTTP/1.1\" 200 1469", "tags": [], "bug_id": 49737, "attachment_id": null, "count": 4, "id": 145508, "time": "2011-04-02T03:23:12Z", "creator": "redhatter@gentoo.org", "creation_time": "2011-04-02T03:23:12Z", "is_private": false}, {"count": 5, "tags": [], "creator": "sf@sfritsch.de", "attachment_id": null, "text": "This works for me both with 2.2.9 and with 2.2.17. Maybe there is some interaction with other parts of your configuration. Can you provide a (minimal) complete httpd configuration that exhibits the problem?\n\nWhich version of apr are you using?", "id": 145571, "time": "2011-04-05T17:23:20Z", "bug_id": 49737, "creation_time": "2011-04-05T17:23:20Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 49737, "attachment_id": null, "is_private": false, "id": 176969, "time": "2014-08-07T09:57:26Z", "creator": "frettled@gmail.com", "creation_time": "2014-08-07T09:57:26Z", "text": "I have experienced the same problem with deny statements in .htaccess to block IPv6 addresses with stock Apache 2.2.16 as delivered by Debian. It simply doesn't work.\n\nThis is may be related what is described here:\n\nhttp://serverfault.com/questions/484239/apache-ipv4-deny-directive-blocks-ipv6-addresses\n\nIn brief: IPv6 addresses get blocked by bitmasks for IPv4 addresses, since the first bits for IPv4 addresses also match the first bits for certain IPv6 addresses.\n\nA test could be to figure out what IPv4 address might have the same bitmask as 2001:4860::/32 and see if that blocks 2001:4860::/32.\n\nWith an innocent side victim in IPv4 space, of course."}, {"count": 7, "tags": [], "bug_id": 49737, "attachment_id": null, "id": 177023, "time": "2014-08-08T17:38:26Z", "creator": "vernon@mauery.com", "creation_time": "2014-08-08T17:38:26Z", "is_private": false, "text": "Yup. That would totally make sense.\n\nBlocking 42.1.0.0/19 (0x2a010000) would also amount to blocking 2a01:4f8:120:8201::2/128 (0x2a0104f8012082010000000000000002) if one failed to check which type of IP address they were looking at.\n\n0x2a010000/19 bitmask = 0xffffe000\n0xffffe000.......................0\n0x2a0104f8012082010000000000000002\n(logical and)\n0x2a010000000000000000000000000000\n\nAnd this gives us the significant network bits of 42.1.0.0/19. Q.E.D.\n\nFix the code to check what kind of IP address the netmasks are specified in and it should work just fine."}]
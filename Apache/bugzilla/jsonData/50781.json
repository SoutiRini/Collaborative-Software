[{"text": "The javac task does not put all long list-like command line arguments (classpath, etc.) into a response file, just the list of source files to be compiled.\n\nThis can create command lines when fork=\"true\" that are too long for the host OS if there are too many entries in \n-classpath,\n-sourcepath,\n-bootclasspath,\n-extdirs and\n-endorseddirs.", "tags": [], "bug_id": 50781, "is_private": false, "count": 0, "id": 144298, "time": "2011-02-15T07:40:00Z", "creator": "kunszabo67@gmail.com", "creation_time": "2011-02-15T07:40:00Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50781, "attachment_id": null, "id": 144302, "time": "2011-02-15T08:31:01Z", "creator": "kunszabo67@gmail.com", "creation_time": "2011-02-15T08:31:01Z", "is_private": false, "text": "The same is true for java task, too."}, {"count": 2, "text": "also true for the JUnit task", "bug_id": 50781, "is_private": false, "id": 150175, "time": "2011-10-05T12:45:30Z", "creator": "willem.verstraeten@gmail.com", "creation_time": "2011-10-05T12:45:30Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 50781, "attachment_id": 28096, "id": 152363, "time": "2011-12-22T04:51:14Z", "creator": "justin@halfempty.org", "creation_time": "2011-12-22T04:51:14Z", "is_private": false, "text": "Created attachment 28096\nPatch to fix Bug 50781\n\nThe trouble maker for this bug is the -classpath argument which can grow without control and surpass the 32K buffer allowed by Windows. The current logic only protect a long source file list. The fix includes all parameters into the @ temp file. I've tested locally and it works fine."}, {"count": 4, "tags": [], "bug_id": 50781, "attachment_id": null, "is_private": false, "id": 152438, "time": "2011-12-28T07:48:11Z", "creator": "bodewig@apache.org", "creation_time": "2011-12-28T07:48:11Z", "text": "The reason the code works the way it does is that many implementations of javac (the code is shared) do not support arbitrary arguments in the response file, only source files.  IIRC this has been true for Sun's javac until 1.3 or 1.4 as well.\n\nIn order to make use of the patch it has to be guarded by some kind of conditional that ensures we don't feed additional args to jikes or Microsoft's jvc.  We may even need an attribute to control it for the JDK's javac as people may be using older javacs in forked mode."}, {"count": 5, "tags": [], "bug_id": 50781, "text": "Does javac 1.3 and 1.4 have to be supported? This code only runs if the command line is too long, which means they've had this error for ages and haven't filed any bugs.  I'm not familiar enough with the Ant codebase to know how to conditionalize this code to only with with javac > 1.4. If someone could tell me that, I could submit another patch.", "id": 159226, "time": "2012-05-22T17:33:36Z", "creator": "justin@halfempty.org", "creation_time": "2012-05-22T17:33:36Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50781, "text": "DefaultCompilerAdapter has a combo of assumeJava1x methods you can use, something like !assumeJava13 && !assumeJava14", "id": 159230, "time": "2012-05-22T17:52:11Z", "creator": "bodewig@apache.org", "creation_time": "2012-05-22T17:52:11Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "is_private": false, "id": 159231, "time": "2012-05-22T18:18:52Z", "bug_id": 50781, "creation_time": "2012-05-22T18:18:52Z", "text": "Jikes's home page has not been updated in seven years, and jvc is ancient history. We should optimize for the problem affecting users of current tools; @args works for me with javac 1.4.2b19 and later (*), and also with ecj 3.5.1. And remember that you can use a current javac and pass -source 1.2 -bootclasspath ... to build for an old platform without actually using a compiler binary from the previous millenium.\n\nIf there is a way to automatically detect that an obsolete compiler is in use, great, but I am not sure what that would be, especially if it is just known that C:\\something\\bin\\javac.exe is to be invoked. If we need to retain compatibility here, we should default to the behavior in the patch, but make it possible to restore the prior behavior using a project property (or, if necessary, task attribute).\n\n(In reply to comment #5)\n> This code only runs if the\n> command line is too long, which means they've had this error for ages\n\nMy understanding is that if you are compiling a large number of source files with a short classpath using a very old compiler, the 1.8.3 task will work but the task with the proposed patch will fail.\n\n(*) JDK 1.3 can no longer be made to run on Linux without great effort."}, {"count": 8, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "id": 159233, "time": "2012-05-22T18:28:51Z", "bug_id": 50781, "creation_time": "2012-05-22T18:28:51Z", "is_private": false, "text": "(In reply to comment #6)\n> DefaultCompilerAdapter has a combo of assumeJava1x methods\n\nThese are useless for this purpose: if you run <javac fork=\"true\" executable=\"...\"/>, DCA.assumeJavaXY will just assume whatever version of Java Ant is running on, which for 1.8.3 will necessarily be 1.4+."}, {"count": 9, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "is_private": false, "id": 159234, "time": "2012-05-22T18:39:52Z", "bug_id": 50781, "creation_time": "2012-05-22T18:39:52Z", "text": "BTW the patch as it stands is wrong, since it ignores the documented firstFileName parameter. What you meant to do is adjust the doc for this parameter to indicate that it could in fact be zero even when there are some options; and change callers (esp. JavacExternal but also perhaps AptExternalCompilerAdapter) to pass zero by default rather than cmd.size().\n\n(The patch also, curiously, behaves as if firstFileName=1 rather than =0: it copies over the first real arg unchanged, then adds the @rest. This could fail in case the first arg happened to be something very long, such as -J-Xbootclasspath/p:/some/long/path/to/compiler/patch.jar.)"}, {"count": 10, "text": "Created attachment 28819\nPatch for discussion (not yet tested)", "bug_id": 50781, "is_private": false, "id": 159235, "time": "2012-05-22T18:53:06Z", "creator": "jglick@apache.org", "creation_time": "2012-05-22T18:53:06Z", "tags": [], "attachment_id": 28819}, {"count": 11, "tags": [], "bug_id": 50781, "text": "<java> and <junit> (comment #1, comment #2) would also need to be investigated.", "id": 159236, "time": "2012-05-22T18:54:32Z", "creator": "jglick@apache.org", "creation_time": "2012-05-22T18:54:32Z", "is_private": false, "attachment_id": null}, {"count": 12, "text": "(In reply to comment #9)\n> BTW the patch as it stands is wrong, since it ignores the documented\n> firstFileName parameter.\n\nI agree that my origin patch wasn't ideal and is broken in respect to firstFileName. \n\n> (The patch also, curiously, behaves as if firstFileName=1 rather than =0: it\n> copies over the first real arg unchanged, then adds the @rest. This could\n> fail in case the first arg happened to be something very long, such as\n> -J-Xbootclasspath/p:/some/long/path/to/compiler/patch.jar.)\n\nYour patch while much better it is lacking in one respect, it could potentially create commandArray of size 1 with just the name of the @tmpfile, which isn't an executable. You need to maintain index 0, since it is pointing to the actual javac.exe (that's one thing my patch got right). Keep in mind that commandArray  is cmd in CommandLaucher.exec and eventually becomes Runtime.getRuntime().exec(cmd, env). I believe you're assuming the first element in the array is the first command line argument.\n\nPrevious to this change, firstFileName would never practically been 0, so the lurking bug of setting commandArray with a size of 1 would never happen. I think if you change this:\n\nProject.toBoolean(project.getProperty(\"pre-50781\")) ? cmd.size() : 0;\n\nto:\n\nProject.toBoolean(project.getProperty(\"pre-50781\")) ? cmd.size() : 1;\n\nYou'll avoid the problem, and the it will fix this defect.", "bug_id": 50781, "is_private": false, "id": 160457, "time": "2012-07-05T02:35:28Z", "creator": "justin@halfempty.org", "creation_time": "2012-07-05T02:35:28Z", "tags": [], "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 50781, "attachment_id": 29031, "id": 160458, "time": "2012-07-05T03:31:53Z", "creator": "justin@halfempty.org", "creation_time": "2012-07-05T03:31:53Z", "is_private": false, "text": "Created attachment 29031\nJesse Glick's patch with default value as 1\n\nDefault to a value which will skip the executable at index zero."}, {"count": 14, "tags": [], "bug_id": 50781, "text": "We're seeing this break our builds at <junit>, but I noticed after only a bit of investigation that java.exe doesn't have a way to move command-line arguments to a file anyway, so unless Ant builds its own alternative launcher for Java, this is going to be difficult to work around.", "id": 181628, "time": "2015-03-10T04:55:07Z", "creator": "trejkaz@trypticon.org", "creation_time": "2015-03-10T04:55:07Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "dturner@twosigma.com", "attachment_id": null, "text": "I hit this bug recently.  Unfortunately, the patches won't work for me; my arguments are \"-Xblahblahblah\", \"MyCompilerClass\", \"-classpath\", \"[too long]\".  As I understand it, for javac, the class argument may not be read from an @file.  As other comments imply, this problem is not solvable in general; arbitrary compilers may have arbitrary spilling rules.  But one possibility is to only start spilling at 4096 minus N characters, where N is the length of the temp filename; this is the best we can do, and if it breaks, then there was probably no way to salvage the situation.", "id": 199638, "time": "2017-07-07T20:05:11Z", "bug_id": 50781, "creation_time": "2017-07-07T20:05:11Z", "is_private": false}]
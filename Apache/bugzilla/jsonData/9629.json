[{"count": 0, "tags": [], "bug_id": 9629, "text": "According to my understanding of the spec, the method\nServletContext.getResourcePaths() should:\n\n  1. Return null if input path argument is null (currently, NPE thrown)\n  2. Return null if a NamingException occurs in looking up a path\n     (all the occurrances of NamingException [I've seen] report\n     the error: \"resource not found\") (current empty set is returned)\n  3. Change all occurrances of the pattern \"/*\" in the input path to \"/\"", "id": 17171, "time": "2002-06-05T14:07:33Z", "creator": "avm3@cdc.gov", "creation_time": "2002-06-05T14:07:33Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 9629, "attachment_id": 2011, "text": "Created attachment 2011\nfixes to ApplicationContext.getResourcePaths", "id": 17173, "time": "2002-06-05T14:08:27Z", "creator": "avm3@cdc.gov", "creation_time": "2002-06-05T14:08:27Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 9629, "attachment_id": null, "text": "I've submitted a patch which should fix this bug, as\nwell as bug 5603.  Note that this bug (accidentally)\nduplicates bug 9629.", "id": 17176, "time": "2002-06-05T14:12:32Z", "creator": "avm3@cdc.gov", "creation_time": "2002-06-05T14:12:32Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "avm3@cdc.gov", "is_private": false, "id": 17187, "time": "2002-06-05T14:47:53Z", "bug_id": 9629, "creation_time": "2002-06-05T14:47:53Z", "tags": [], "text": "Sorry, it does not duplicate 9629, but bug 9356."}, {"count": 4, "tags": [], "bug_id": 9629, "attachment_id": null, "id": 17190, "time": "2002-06-05T15:44:26Z", "creator": "bob@jadn.com", "creation_time": "2002-06-05T15:44:26Z", "is_private": false, "text": "Humm.  I have the Java Servlet Specification version 2.3 Final which\non page 140 says\n\n\"\npublic java.util.Set getResourcePaths(java.lang.String path)\n\nReturns a directory-like listing of all the paths to resources within\nthe web application whose longest sub-path matches the supplied path\nargument.  Paths indicating subdirectory paths end with a '/'. The\nreturned paths are all relative to the root of the web application and\nhave a leading '/'.  [ examples ]\n\nParameters:\nthe - partial path used to match the resources, which must start with a /\n\nReturns: a Set containing the directory listing, or null if there are no\nresources in the web application whose path begins with the supplied path.\nSince: Servlet 2.3\n\"\n\nThis doesnt give guidance about a null being passed in.\nIt doesnt mention a NamingException.  \nDoesnt mention changes to '//' or tweaking '/*'\n\nThat said, I dont see anything wrong with your suggested changes.\n\n"}, {"count": 5, "tags": [], "bug_id": 9629, "text": "*** Bug 5603 has been marked as a duplicate of this bug. ***", "id": 17196, "time": "2002-06-05T16:32:28Z", "creator": "remm@apache.org", "creation_time": "2002-06-05T16:32:28Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 9629, "attachment_id": null, "id": 17199, "time": "2002-06-05T16:42:15Z", "creator": "remm@apache.org", "creation_time": "2002-06-05T16:42:15Z", "is_private": false, "text": "The only thing the spec talks about is returning null if the path does not\nexist. I don't see anything about path normalization."}, {"count": 7, "tags": [], "text": "getResourcePaths will now return null for non-existing paths. The rest is not\nspecified in the spec, so I'm marking it as enhancement.", "attachment_id": null, "id": 17203, "creator": "remm@apache.org", "time": "2002-06-05T17:06:55Z", "bug_id": 9629, "creation_time": "2002-06-05T17:06:55Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 9629, "text": "Yea, the spec falls short for;\n   normalization\n   being passed null for path\n   handling partial paths (ones without a trailing '/')\n\nI am requesting clarification from the Servlet Spec leads, \nyutaka.yoshida@sun.com and danny.coward@sun.com   Dont know if\nwe will ever get a response, but perhaps the next version of the servlet spec\nwill add clarity.\n", "count": 8, "id": 17206, "time": "2002-06-05T17:25:22Z", "creator": "bob@jadn.com", "creation_time": "2002-06-05T17:25:22Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 9629, "text": "Right, there is no specification for normalization, but\nthis is what tomcat does now:\n\n  1. input:         /WEB-INF//lib\n  2. normalize to:  /WEb-INF//lib/       (craig's patch)\n  3. normalize to:  /WEB-INF/lib/        (done by javax.naming.directory.\n                                                  DirResources.listBindings())\n  4. get sub paths: Set\n  5a. return:       /WEB-INF//lib/ + Set (non-normalized, current implementation)\n  5b. norm-return:  /WEB-INF/lib/ + Set  (normalize)\n\nIt seems to me that if we're going with the non-normalized return (5a),\nthen we should match (exactly) on the non-normalized path in (2),\nin which case, the method would return null for the a path like '//WEB-INF'.\nHowever, if we're using the normalized path in (3) (which is the current\nimplementation), then we should use the normalized result in (5b).\n\nThe current strategy (in my opinion) is inconsistent, in that we normalize\nto match, but don't normalize on output.\n", "id": 17208, "time": "2002-06-05T18:21:20Z", "creator": "avm3@cdc.gov", "creation_time": "2002-06-05T18:21:20Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 9629, "text": "Why is only the first directory level (sub paths as [4]) returned? As of Tomcat\n4.0.4 this is a somewhat surprising result, since I would expect (from\ninterpreting the Spec) that all paths recursively available are returned.", "id": 22700, "time": "2002-09-11T19:18:41Z", "creator": "niko@ontopia.net", "creation_time": "2002-09-11T19:18:41Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 9629, "attachment_id": null, "text": "(In reply to comment #10)\n> Why is only the first directory level (sub paths as [4]) returned? As of Tomcat\n> 4.0.4 this is a somewhat surprising result, since I would expect (from\n> interpreting the Spec) that all paths recursively available are returned.\n\nThe key phrase is \"longest sub-path\". The Servlet 3 makes the intended behaviour clear with an example.", "id": 142692, "time": "2010-12-14T14:58:23Z", "creator": "markt@apache.org", "creation_time": "2010-12-14T14:58:23Z", "is_private": false}, {"count": 12, "tags": [], "text": "This is fixed in 7.0.x. I haven't checked 5.5.x and 6.0.x but changing the behaviour (if it hasn't already been changed) in those versions would be too risky anyway.", "attachment_id": null, "id": 142694, "creator": "markt@apache.org", "time": "2010-12-14T15:04:36Z", "bug_id": 9629, "creation_time": "2010-12-14T15:04:36Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "jared.breeden@gmail.com", "attachment_id": null, "text": "On unix, when executing an APR_SHELLCMD[_ENV] cmd_type, `apr_proc_create` does not quote the arguments given to the shell correctly.\n\nEXAMPLE:\n\n- `apr_proc_create` is called with [\"ruby\", \"-e\", \"exit 1\"]\n- In the code shown below, this is converted to [SHELL_PATH, \"-c\", \"ruby -e exit 1\"]\n- Notice that \"exit 1\" is not quoted, and so will be evaluated as two arguments.\n\n\nFrom unix/proc.c, with comments added & some lines omitted:\n\n```\nif (attr->cmdtype == APR_SHELLCMD ||\n    attr->cmdtype == APR_SHELLCMD_ENV) {\n    /* \n     * ...\n     * Constucting `newargs` as [SHELL_PATH, '-c', onearg]\n     * ...\n     */\n    default:\n    {\n        char *ch, *onearg;\n        \n        ch = onearg = apr_palloc(pool, onearg_len);\n        i = 0;\n        while (args[i]) {\n            size_t len = strlen(args[i]);\n\n            /*\n             * Each argument is appended onto `onearg` without quotes.\n             */\n            memcpy(ch, args[i], len);\n            ch += len;\n            *ch = ' ';\n            ++ch;\n            ++i;\n        }\n        --ch; /* back up to trailing blank */\n        *ch = '\\0';\n        newargs[2] = onearg;\n    }\n  }\n    \n  /*\n   * ...\n   * Later, when execv is called, the shell will split `onearg` on the spaces,\n   * possible separating any args that simply had spaces in them.\n   */\n\n  execv(SHELL_PATH, (char * const *)newargs);\n```\n\nNOTE:\n\nNot tested, but the code for Windows seems to handle this correctly...\n\nFrom win32/proc.c\n```\ncmdline = \"\";\nfor (i = 1; args && args[i]; ++i) {\n    if (has_space(args[i]) || !args[i][0]) {\n        cmdline = apr_pstrcat(pool, cmdline, \" \\\"\", args[i], \"\\\"\", NULL);\n    }\n    else {\n        cmdline = apr_pstrcat(pool, cmdline, \" \", args[i], NULL);\n    }\n}\n```\n\nWORKAROUND:\n\nPassing the argument vector as a single string (ie: [\"ruby -e \\\"exit 1\\\"]) seems to work fine.", "id": 183982, "time": "2015-07-11T03:00:01Z", "bug_id": 58123, "creation_time": "2015-07-11T03:00:01Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jared.breeden@gmail.com", "attachment_id": null, "id": 183983, "time": "2015-07-11T03:02:13Z", "bug_id": 58123, "creation_time": "2015-07-11T03:02:13Z", "is_private": false, "text": "Forgot to close a quote in the workaround. Sorry for not supplying real code examples. I'm working with the code through mruby bindings, and I didn't think posting Ruby was helpful."}, {"count": 2, "tags": [], "creator": "jared.breeden@gmail.com", "attachment_id": 32895, "text": "Created attachment 32895\nProposed patch\n\nHere is a proposed patch to the proc file. It's basically taking the same code from the win32/proc.c file. `has_space` is duplicated, which is probably not ideal. However, it was tiny and static so it seemed ok. I can refactor to remove the dup if desired. Just let me know where to put it!\n\nRan `testall` before & after the patch. Same results each time (2 failures on my system, neither with procs) shown below. This fixes `apr_proc_create` for my use case.\n\n[jared:~/projects/apr/test] ./testall\ntestatomic          : SUCCESS\ntestdir             : SUCCESS\ntestdso             : SUCCESS\ntestdup             : SUCCESS\ntestenv             : SUCCESS\ntestescape          : SUCCESS\ntestfile            : SUCCESS\ntestfilecopy        : SUCCESS\ntestfileinfo        : SUCCESS\ntestflock           : SUCCESS\ntestfmt             : SUCCESS\ntestfnmatch         : SUCCESS\ntestargs            : SUCCESS\ntesthash            : SUCCESS\ntesthooks           : SUCCESS\ntestipsub           : SUCCESS\ntestlock            : SUCCESS\ntestcond            : SUCCESS\ntestlfs             : SUCCESS\ntestmmap            : SUCCESS\ntestnames           : SUCCESS\ntestoc              : SUCCESS\ntestpath            : SUCCESS\ntestpipe            : SUCCESS\ntestpoll            : FAILED 1 of 24\ntestpools           : SUCCESS\ntestproc            : SUCCESS\ntestprocmutex       : \\default_timedlock() not implemented,-flock_timedlock() not implemented,|sysvsem_timedlock() not implemented,\\posix_timedlock() not implemented,-fcntl_timedlock() not implemented,-default_timed not implemented,FAILED 1 of 6\ntestrand            : SUCCESS\ntestsleep           : SUCCESS\ntestshm             : SUCCESS\ntestsock            : SUCCESS\ntestsockets         : SUCCESS\ntestsockopt         : SUCCESS\nteststr             : SUCCESS\nteststrnatcmp       : SUCCESS\ntesttable           : SUCCESS\ntesttemp            : SUCCESS\ntestthread          : SUCCESS\ntesttime            : SUCCESS\ntestud              : SUCCESS\ntestuser            : SUCCESS\ntestvsn             : SUCCESS\nteststrmatch        : SUCCESS\ntesturi             : SUCCESS\ntestuuid            : SUCCESS\ntestbuckets         : SUCCESS\ntestpass            : SUCCESS\ntestbase64          : SUCCESS\ntestmd4             : SUCCESS\ntestmd5             : SUCCESS\ntestcrypto          : SUCCESS\ntestdbd             : SUCCESS\ntestdate            : SUCCESS\ntestmemcache        : SUCCESS\ntestxml             : SUCCESS\ntestxlate           : SUCCESS\ntestrmm             : SUCCESS\ntestdbm             : SUCCESS\ntestqueue           : SUCCESS\ntestreslist         : SUCCESS\ntestlfsabi          : SUCCESS\ntestskiplist        : SUCCESS\nFailed Tests   \t\tTotal\tFail\tFailed %\n===================================================\ntestpoll       \t\t   24\t   1\t  4.17%\ntestprocmutex  \t\t    6\t   1\t 16.67%", "id": 183984, "time": "2015-07-11T04:00:25Z", "bug_id": 58123, "creation_time": "2015-07-11T04:00:25Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58123, "attachment_id": 32896, "id": 183985, "time": "2015-07-11T04:13:10Z", "creator": "jared.breeden@gmail.com", "creation_time": "2015-07-11T04:13:10Z", "is_private": false, "text": "Created attachment 32896\nPatch as diff run from root\n\nContribution guide reads \"We should be able to feed the patch directly into the \"patch\" program and have it update the file\"\n\nRemade the same patch from the root folder for this purpose. (Sorry for all the updates!)"}, {"attachment_id": null, "tags": [], "bug_id": 58123, "text": "It seems the quoting done in the Windows case is a bit too naive, as well. It blindly wraps the arguments in quotes if (and only if) they contain a space. It ignore the possibility that the arguments contain a \" character themselves, which requires escaping (and, I believe, to escape the double quote you have to also wrap the whole arg in double quotes, regardless of whether there is a space in the arg or not).\n\nI seem to be bumping into a lot of problems using apr_create_proc, and I'm having to perform platform specific quoting, catering not only to the platform but to APR's behavior (eg I have to know that it's going to double quote my arg on windows if it has a space and act accordingly - by quoting it myself if it has a quote but no space in it, or not quoting if it *does* have a space. Plus I'm doing the escaping). I don't believe I'm using the API incorrectly, but that's possible.\n\nI would think the general process for arguments would go:\n\nShell Cmd?\n  # The user already knows this is going \n  # to be shell interpreted, that's what they asked for.\n  # So don't process the args. Really, we could\n  # expect them to always pass only a single string.\n  # That would avoid having to decipher shell metacharacters\n  # and determine if the user expected them to be escaped or not.\n  cmdline = argv.join(' ')\n  On Windows?\n    # Comments in APR say cmd.exe expects the cmdline to be wrapped\n    # in quotes, but I don't find this to be the case (Windows 8 at least)\n    CreateProcess with command = \"cmd.exe /C #{cmdline}\"\n  On Unix?\n    execl('/bin/sh', '-c', cmdline);\nProgram Cmd?\n  On Unix?\n    # Great, the user passed us an argv that we can pass directly to exec*\n  On Windows?\n    # Make a cmdline that CommandLineToArgv will deconstruct back into our\n    # argv in the child process.\n    cmdline = progname\n    for each arg in argv\n      arg has double quote or space?\n        arg = escape quotes, escape \\'s, wrap whole arg in double quotes\n      cmdline += \" #{arg}\"\n    end\n    CreateProcess with cmdline & the dozen other required arguments\n  end\nend\n\nThis is the approach I'm using with APR at the moment. I use only APR_PROGRAM* cmdtype (never APR_SHELLCMD*), and I build the cmdline strings myself if I'm running a shell cmd. The results are much more aligned with my expectations (and the results from typing directly into the shell) than the current implementation.\n\nIf you guys agree there are some issues to resolve in this area, I'd be happy to submit a patch proposal. For now, I'm going to stick with my workarounds since I don't really want to maintain a fork. I know apr2 is being developed now though... so this may be a good time to address these issues.\n\nIf I've just totally lost it, any guidance would be appreciated!", "count": 4, "id": 184053, "time": "2015-07-17T02:31:39Z", "creator": "jared.breeden@gmail.com", "creation_time": "2015-07-17T02:31:39Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "asmorgrav@yahoo.no", "text": "When a server processes a request using both mod_cache and mod_filter, httpd dumps core. \n\nCore dumps seem to occur when httpd serves a request from cache and the response matches a content filter where the provides is DEFLATE. \n\nWhen one requests a resource which does not match any of the content filters, the problem does not occur.\n\nIf mod_filter is replaced by \"SetOutputFilter DEFLATE\", the server does not crash.\n\nThe first time the resource /rpforms/index.html is requested it is saved in cache and served with \"content-encoding: gzip\". The next time it is requested unconditionally, httpd crashes.\n\nFilterDeclare compressed CONTENT_SET\nFilterProvider compressed deflate resp=Content-Type $text/html\nFilterProvider compressed deflate resp=Content-Type $text/plain\nFilterProvider compressed deflate resp=Content-Type $text/css\nFilterProvider compressed deflate resp=Content-Type $javascript\nFilterProtocol compressed deflate \"change=yes\"\nFilterTrace compressed 0\n\nCacheRoot /var/run/apache01/cache\nCacheIgnoreHeaders Set-Cookie\n\n<VirtualHost centuri-01:443>\n... mod_ssl directives removed ...\nFilterChain compressed\nCacheEnable disk /rpforms\n</VirtualHost>\n\nFull GDB back-trace:\n\n#0  filter_harness (f=0x2c1af8, bb=0x2c1b40) at mod_filter.c:352\n        ret = 2759704\n        cachecontrol = 0x2a1c18 \"\"\n        str = 0x2c4683 \"\"\n        ctx = (harness_ctx *) 0x0\n        filter = (ap_filter_rec_t *) 0x1ef7c0\n#1  0xfef51f2c in cache_url_handler (r=0x2abef0, lookup=0) at mod_cache.c:226\n        rv = 0\n        auth = 0x1ef7c0 \"\"\n        providers = (cache_provider_list *) 0x0\n        cache = (cache_request_rec *) 0x2ad7b8\n        conf = (cache_server_conf *) 0x2c1b40\n        out = (apr_bucket_brigade *) 0x2c1b40\n#2  0x0003f80c in ap_run_quick_handler (r=0x2abef0, lookup=0) at config.c:160\n        pHook = (ap_LINK_quick_handler_t *) 0xfe6a3c84\n        n = 0\n        rv = 0\n#3  0x000621b8 in ap_process_request (r=0x47a88) at http_request.c:254\n        access_status = 1\n        e = (apr_bucket *) 0x0\n        bb = (apr_bucket_brigade *) 0x2a2090\n        c = (conn_rec *) 0x1\n        ap__b = (apr_bucket *) 0x8\n#4  0x0005e5fc in ap_process_http_connection (c=0x7eff0) at http_core.c:190\n        r = (request_rec *) 0x2abef0\n        csd = (apr_socket_t *) 0x0\n#5  0x000476d0 in ap_run_process_connection (c=0x2a1c18) at connection.c:43\n        pHook = (ap_LINK_process_connection_t *) 0x0\n        n = 0\n        rv = 2\n#6  0x0007f864 in worker_thread (thd=0x20b138, dummy=0x0) at worker.c:544\n        ti = (proc_info *) 0xfefd4c3c\n        process_slot = 1\n        thread_slot = 99\n        csd = (apr_socket_t *) 0x2a1b28\n        bucket_alloc = (apr_bucket_alloc_t *) 0x0\n        last_ptrans = (apr_pool_t *) 0x64\n        ptrans = (apr_pool_t *) 0x2a1af0\n        rv = 0\n        is_idle = 0\n        current_conn = (conn_rec *) 0x0\n        conn_id = 199\n        csd = 20\n        sbh = (ap_sb_handle_t *) 0x2a1c10\n#7  0xfefd4c44 in _lwp_start () from /usr/lib/lwp/libthread.so.1\nNo symbol table info available.\n#8  0xfefd4c44 in _lwp_start () from /usr/lib/lwp/libthread.so.1\nNo symbol table info available.\nPrevious frame identical to this frame (corrupt stack?)", "id": 115417, "time": "2008-04-08T06:35:38Z", "bug_id": 44778, "creation_time": "2008-04-08T06:35:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "asmorgrav@yahoo.no", "attachment_id": null, "id": 115464, "time": "2008-04-09T09:56:27Z", "bug_id": 44778, "creation_time": "2008-04-09T09:56:27Z", "is_private": false, "text": "Looking at the code of mod_filter.c I realised that the problem cannot possibly have occurred at line 352 because f->r->status==200 :\n\n351:    if (f->r->status != 200) {\n352:        ap_remove_output_filter(f);\n352:        return ap_pass_brigade(f->next, bb);\n354:    }\n\nSince ctx==NULL the problem is likely to have occurred at line 359:\n\n    if (!ctx->func) {\n\n\n\nThe code in mod_cache.c that ends up making the call to filter_harness is:\n\n    next = r->output_filters;\n\n    while (next && (next->frec != cache_out_handle)) {\n        ap_remove_output_filter(next);\n        next = next->next;\n    }\n\n    /* kick off the filter stack */\n    out = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n    rv = ap_pass_brigade(r->output_filters, out);\n\nThis makes me wonder whether the problem could possibly be in the re-ordering of the filters in mod_cache rather than in mod_filter."}, {"count": 2, "tags": [], "bug_id": 44778, "attachment_id": null, "text": "(In reply to comment #1)\n \n> \n> The code in mod_cache.c that ends up making the call to filter_harness is:\n> \n>     next = r->output_filters;\n\nPlease set a breakpoint after the line above and do a\n\np r->output_filters\ndump_filters r->output_filters\n\n> \n>     while (next && (next->frec != cache_out_handle)) {\n>         ap_remove_output_filter(next);\n>         next = next->next;\n>     }\n> \n>     /* kick off the filter stack */\n>     out = apr_brigade_create(r->pool, r->connection->bucket_alloc);\n\nPlease set a breakpoint to the line above and do a\n\np r->output_filters\ndump_filters r->output_filters\n\n", "id": 115523, "time": "2008-04-10T13:39:33Z", "creator": "rpluem@apache.org", "creation_time": "2008-04-10T13:39:33Z", "is_private": false}, {"count": 3, "tags": [], "creator": "asmorgrav@yahoo.no", "attachment_id": null, "id": 115589, "time": "2008-04-14T06:36:30Z", "bug_id": 44778, "creation_time": "2008-04-14T06:36:30Z", "is_private": false, "text": "(In reply to comment #2)\n\nI did not find any dum_filters method so instead I printed the name and ctx of each filter using the following commands:\n\nprint r->output_filters->frec->name\nprint r->output_filters->ctx\nprint r->output_filters->next->frec->name\nprint r->output_filters->next->ctx\n\n\nWhen entering the cache_url_handler:\n$1 = 0xc91f8 \"byterange\"\n$2 = (void *) 0x0\n$3 = 0xc34d8 \"content_length\"\n$4 = (void *) 0x0\n$5 = 0xc4b78 \"http_header\"\n$6 = (void *) 0x0\n$7 = 0xc9038 \"http_outerror\"\n$8 = (void *) 0x0\n$9 = 0x170920 \"ssl/tls filter\"\n$10 = (void *) 0x2a1d38\n$11 = 0xc37b8 \"core\"\n$12 = (void *) 0x2aaa90\n\nAt the line calling the filter-harness\n$1 = 0x1ef700 \"compressed\"\n$2 = (void *) 0x0\n$3 = 0xc3fe8 \"fixup_headers_out\"\n$4 = (void *) 0x0\n$5 = 0x128bf8 \"cache_out\"\n$6 = (void *) 0x0\n$7 = 0xc91f8 \"byterange\"\n$8 = (void *) 0x0\n$9 = 0xc34d8 \"content_length\"\n$10 = (void *) 0x0\n$11 = 0xc4b78 \"http_header\"\n$12 = (void *) 0x0\n$13 = 0xc9038 \"http_outerror\"\n$14 = (void *) 0x0\n$15 = 0x170920 \"ssl/tls filter\"\n$16 = (void *) 0x2a1d38\n$17 = 0xc37b8 \"core\"\n$18 = (void *) 0x2aaa90\nCannot access memory at address 0x0\n\n\nSo it seems like r->output_filters->ctx is NULL for all filters in the chain except for the ssl/tls and core filters even as we enter cache_url_handler.\n\nAnother thing I noticed is that the coredumps only occur with SSL-enabled virtual hosts. The same configuration w/o SSL does not coredump."}, {"count": 4, "tags": [], "creator": "asmorgrav@yahoo.no", "text": "The problem was probably caused by a combination of Apache 2.0 and 2.2 modules", "id": 115592, "time": "2008-04-14T08:19:54Z", "bug_id": 44778, "creation_time": "2008-04-14T08:19:54Z", "is_private": false, "attachment_id": null}]
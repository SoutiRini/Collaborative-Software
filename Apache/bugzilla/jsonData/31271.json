[{"count": 0, "tags": [], "text": "Given you are familiar with ANT copy task terms:\n\nFor efficient usage of tokenfiltering I was missing\n(1) an error message if a tokens value could not be found in a filtersfile\n(2) a warning if a filtersfile contains a tokenvalue that is never used\n\nTherefore I wrote a <checkTokens>-Task which I would like to donate to ANT.\n\n\nIf this sounds interesting to you, see the README.txt in the attached .zip (if I\nmanage to attach it, me, the Bugzilla novice :-)\n\nRegards,\n  Holger", "attachment_id": null, "bug_id": 31271, "id": 63708, "time": "2004-09-17T07:39:57Z", "creator": "Holger.Krauth@danet.de", "creation_time": "2004-09-17T07:39:57Z", "is_private": false}, {"attachment_id": 12756, "tags": [], "creator": "Holger.Krauth@danet.de", "is_private": false, "count": 1, "id": 63709, "time": "2004-09-17T07:43:21Z", "bug_id": 31271, "creation_time": "2004-09-17T07:43:21Z", "text": "Created attachment 12756\nZip of the project reflecting my suggestion: unzip and README.txt, please"}, {"count": 2, "tags": [], "bug_id": 31271, "attachment_id": null, "id": 63710, "time": "2004-09-17T07:45:54Z", "creator": "Holger.Krauth@danet.de", "creation_time": "2004-09-17T07:45:54Z", "is_private": false, "text": "Abstract:\n=========\n\n<checkToken> is a custom ANT-Task that can be used together with the\ntokenfiltering of\nthe <copy>-task. It fails if at least one tokens is not supplied a value and\nwarns if values are supplied without matching tokens.\n\nIt can also be used to assure that different properties files contain the same\nset of keys.\n\nThis .tar.gz is intended to illustrate the enhancement request to ANT that I made.\n\nI assume that you read this after having seen my enhancement request in Bugzilla and\nunpacked the attached checkTokens.tar.gz, so you know about ANT.\nIf not check out http://ant.apache.org.\n\nHolger Krauth (Holger.Krauth@danet.de/Holger.Krauth@web.de)\n\n\nBackground Tokenfiltering:\n==========================\n\nThe copy task inside ANT has a built in feature called tokenfiltering.\nIf switched on, it parses all files to be copied for tokens and replaces\nall tokens with values found in the fiven filtersfile.\n\nThus, you can define your application's \"demo.properties\" as a pattern, e.g.\ncontaining\nthe line \"port=@_port_@\", the latter \"port\" being the token.\n(The default token delimiters '@' are inappropriate if there is a comma separated\nlist of smtp addresses somewhere in your properties files!\nThus I chose to take '@_' and '_@' repectively).\n\nHaving 2 filtersfiles \"test.properties\" and \"production.properties\"\ncontaining the line \"port=2222\" and \"port=1111\" enables you to produce (via ANTs\ncopy)\na \"demo.properties\" containing either \"port=2222\" or \"port=1111\" depending on\nthe filtersfile passed when copying with tokenfiltering.\n\nA nice side effect is that all environment specific settings are gathered in one\nsingle\nfiltersfile.\n\n\nMotivation:\n===========\n\nWe use tokenfiltering a lot to build applications for different environments:\nlocal, inhouseTest, testSystem, production...\n\nFor efficient usage of tokenfiltering I was missing\n(1) an error message if a tokens value could not be found in a filtersfile\n(2) a warning if a filtersfile contains a tokenvalue that is never used\n\nIf you need to be convinced about the necessity:\nImagine a property connect.as.uid= being empty due to tokenname mistyping just\nfor the production\nbuilt of your application and to connecting to a database a anonymous and so\nnever retrieving the\nwhole data but just what anonymous can so and so due to missing values\nassuming... Contact me\nfor colourful examples from real life.\n\n\nContents:\n=========\n\n./README.txt\n./build.xml\n./runDemo.sh\n\n./src/java/jakarta/contribution/suggestion/ant/Demo.java\n./src/java/jakarta/contribution/suggestion/ant/CheckTokens.java\n\n./src/build-patterns/demo.properties\n\n./src/build-environments/test.properties\n./src/build-environments/production.properties\n\n./src/test/jakarta/contribution/suggestion/ant/CheckTokensTest.java\n\n./lib/ant-1.5.jar\n./lib/junit-3.8.1.jar\n./doc/api/index.html\n\n\nRunning Demo:\n=============\n\nThis mini-project contains a Demo.main() being:\n\n        Properties p = new Properties();\n        p.load(ClassLoader.getSystemResource(\"demo.properties\").openStream());\n        System.out.println(\"Connecting to \" + p.getProperty(\"host\") + \":\"\n                + p.getProperty(\"port\"));\n\nThe shippend build.xml can build this demo application for environment \"test\" or\n\"production\":\n\n$ ...checkTokens/ > ant test.deploy\n[...]\n$ ...checkTokens/ > runDemo.sh\nConnecting to testhost:2222\n\n$ ...checkTokens/ > ant production.deploy\n[...]\n$ ...checkTokens/ > runDemo.sh\nConnecting to PRODUCTION-HOST:1111\n\n\nThese build targets are depending on the <checkTokens> task which can easily be\nprovoked to fail:\nOpen the ./src/build-environments/production.properties and change the line\nport=1111\nto be\nCORRUPTport=1111\n\n\nBuilding again will end up like:\n$ ...checkTokens/ > ant production.deploy\n[...]\ncheckTokens:\n[checktokens] production.properties contains unused value 'CORRUPTport'!\n[checktokens] production.properties provides no value for 'port' from\ndemo.properties!\n\nBUILD FAILED\nfile:/home/hokr/projects/checkTokens/build.xml:83: There were errors.\n\n\nHere \"contains unused\" is just a warning, whereas \"provides no value\" is an error.\n\n\nFor further details, please refer to the code.\nor send me your comments, remarks, suggestions to Holger.Krauth@danet.de\n\nThank you for reading.\n\nRegards,\n  Holger Krauth"}]
[{"count": 0, "tags": [], "bug_id": 9645, "text": "I would like to suggest a new attribute \"rolloverPath\" be added to the \nDailyRollingFileAppender class.  In short, the rolloverPath (configurable via a \nproperty) could point to a new location to which rolled-over files could be \ncopied.  The code samples below illustrate how we have implemented this \nfeature.  For brevity\u2019s sake, I\u2019ve included code snippets instead of the entire \norg.apache.log4j.DailyRollingFileAppender.java file that we've enhanced.  The \nsample code should be read in the context of Log4J 1.2.2 \nDailyRollingFileAppender.java source.\n\nFirst, I added the following Javadoc:\n* <p>An optional <code>rolloverPath</code> may be specified such \n* that files that are rolled over will be created in the location\n* specified by this path.  Any parent path information in the original\n* logfile name is ignored when the rollover occurs. \n* <code>rolloverPath</code> may be absolute or relative. \n*\n* If in the previous example the <code>rolloverPath</code> is set to \n* <code>/archive</code>, the logging file <code>/foo/bar.log</code>\n* will be copied to <code>/archive/bar.log.2001-02-16</code> and \n* logging will continue normally.\n*/\n\n\nAdded new attributes:\n/**\n * Pathname and directory (File object) used if files are to archive to\n * a different location than where the lof file is created.\n */\nprivate String rolloverPath;\nprivate File rolloverDir;\n\n    \nAdded a new constructor:\n/**\n * Instantiate a <code>DailyRollingFileAppender</code> and open the\n * file designated by <code>filename</code>.  Files that are rolled \n * over are archived to the location specified by the\n * <code>rolloverPath</code>\n */\npublic DailyRollingFileAppender(Layout layout, String rolloverPath, \n  String filename, String datePattern)\n                                                 throws IOException {\n    this( layout, filename, datePattern );\n        \n    setRolloverPath( rolloverPath );\n}\n\nAlso added the setRolloverPath() method:\n/**\n * Sets the location to which log files will be rolled over .  If the\n * given path already exists, it must be writable and must be a\n * directory.  If it doesn't exist, it will get created, along with any\n * necessary, non-existent parent directories.\n */\npublic void setRolloverPath( String pathName ) {\n    rolloverPath = pathName;\n    rolloverDir = new File( rolloverPath );\n\n    // Check to see if the rollover path exists (needs to be created) \n    // and if we can write to it.\n    if ( rolloverDir.exists() ) {\n        if ( !rolloverDir.isDirectory() ) {\n            LogLog.warn( \"The path name \" + pathName + \" does not refer to a \ndirectory.\" );\n            rolloverDir = null;\n        }\n        else if ( !rolloverDir.canWrite() ){\n            LogLog.warn( \"Unable to write to directory \" + \n  rolloverDir.getAbsolutePath() );\n            rolloverDir = null;\n        }\n            \n    }\n    else if ( !rolloverDir.mkdirs() ) {\n        LogLog.warn( \"Unable to create rollover directory for \" + \n    rolloverPath );\n        rolloverDir = null;\n    }\n}\n\n\nUpdated the rollover() method:\n.\n.\n.\n/* If rolloverDir was specified, ignore any path information in\n * the original filename and use the rolloverPath instead. */\n// File target  = new File(scheduledFilename); // Original code\nFile target;\nif ( rolloverDir == null ) {\n    target = new File( scheduledFilename );\n}\nelse {\n    target = new File( rolloverDir, \n                      (new File(scheduledFilename)).getName() );\n}\n.\n.\n.    \n//LogLog.debug(fileName +\" -> \"+ scheduledFilename); // Original code\nLogLog.debug(fileName +\" -> \"+ target.getPath());\n.\n.\n.", "id": 17215, "time": "2002-06-05T19:26:50Z", "creator": "jeff.stickel@seurat.com", "creation_time": "2002-06-05T19:26:50Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "is_private": false, "id": 17498, "time": "2002-06-10T17:12:29Z", "bug_id": 9645, "creation_time": "2002-06-10T17:12:29Z", "text": "\nGood suggestion. However, DailyRollingFileAppender is now considered legacy \ncode. Log4j 1.3 will have a different mechanism for rolling files. We will make \nsure to take your suggestion into account before 1.3 is released.\n"}]
[{"count": 0, "tags": [], "bug_id": 3560, "text": "- REUtil.quoteMeta() removes meta characters\n    quoteMeta(\"aa+\") returns aa\\\n    This does not occur when the package is used in Xerces parser.\n\n- Shorthands in negative character classes cause IllegalArgumentException\n     for example, [^\\w]\n\n- Union operator terminates matching in some cases\n    The pattern \"fo|foo\" should match to \"foobar\" in non-XML-Schema mode.\n    This does not occur in Xerces parser.\n\n- Wrong surrogate processing\n    The pattern \"a\\ud800\\udc00+\" should match to \"a\\ud800\\udc00\\ud800\\udc00\",\n    actually it does not match.\n\n- REUtil.createRegex() crashes when it is called 21 times.\n    This does not occur in Xerces parser.\n\n\nThe following code checks behavior of the regex package.\nThe code should print some '.' and `Passed/total: 26/26'.\n\npublic class RegexTest {\n    int total = 0;\n    int passed = 0;\n\n    void test(String pattern, String options, String target, boolean expected) {\n        RegularExpression re = new RegularExpression(pattern, options);\n        this.total++;\n        boolean actual = re.matches(target);\n        if (expected == actual) {\n            this.passed++;\n            System.err.print(\".\");\n        } else {\n            System.err.print(\"*\");\n            System.err.print(\" actual=\"+actual);\n            System.err.print(\" '\"+re+\"' '\"+target+\"' \");\n        }\n        System.err.flush();\n    }\n\n    void testQuote(String source, String expected) {\n        this.total ++;\n        String result = REUtil.quoteMeta(source);\n        if (result.equals(expected)) {\n            this.passed ++;\n            System.err.print(\".\");\n        } else {\n            System.err.print(\"*(\"+result+\")\");\n        }\n        System.err.flush();\n    }\n\n    private void dumpResult(String[] array) {\n        System.err.print(\" \");\n        for (int i = 0;  i < array.length;  i++) {\n            System.err.print(\"'\");\n            System.err.print(array[i]);\n            System.err.print(\"' \");\n        }\n    }\n\n    public static void main(String[] argv) throws Exception {\n        RegexTest stat = new RegexTest();\n                     // pattern/to,  source,   expected\n        stat.testQuote(\"aaaa\", \"aaaa\");\n        stat.testQuote(\"aa+a\", \"aa\\\\+a\");\n        stat.testQuote(\"*bbbb\", \"\\\\*bbbb\");\n        stat.testQuote(\"bbbb.\", \"bbbb\\\\.\");\n        stat.testQuote(\"bbbb*.\", \"bbbb\\\\*\\\\.\");\n        System.err.println(\"\");\n\n        stat.test(\"a\\ud800\\udc00\", \"\", \"a\\ud800\\udc00\", true);\n        stat.test(\"^a\\ud800\\udc00+$\", \"\", \"a\\ud800\\udc00\\udc00\", false);\n        stat.test(\"^a\\ud800\\udc00+$\", \"\", \"a\\ud800\\udc00\\ud800\\udc00\", true);\n        stat.test(\"a.\\ud800\\udc00\", \"\", \"a\\ud800\\udc00\\ud800\\udc00\", true);\n        stat.test(\"foo(?=bar)\", \"\", \"foobar\", true);\n        stat.test(\"foo(?=bar)\", \"\", \"foobab\", false);\n        stat.test(\"foo(?!bar)\", \"\", \"foobar\", false);\n        stat.test(\"foo(?!bar)\", \"\", \"foobab\", true);\n        stat.test(\"(?<=bar)foo\", \"\", \"barfoo\", true);\n        stat.test(\"(?<=bar)foo\", \"\", \"babfoo\", false);\n        stat.test(\"(?<!bar)foo\", \"\", \"barfoo\", false);\n        stat.test(\"(?<!bar)foo\", \"\", \"babfoo\", true);\n\n        stat.test(\"fo|foo\", \"X\", \"foo\", true);\n        stat.test(\"fo|foo\", \"\", \"foabc\", true);\n        stat.test(\"fo|foo\", \"\", \"fooabc\", true);\n\n        stat.test(\"[^\\\\d\\\\w]\", \"\", \"+\", true);\n        stat.test(\"[^\\\\d\\\\w]\", \"X\", \"+\", true);\n        stat.test(\"[^\\\\d\\\\w]\", \"\", \"a\", false);\n        stat.test(\"[^\\\\d\\\\w]\", \"X\", \"a\", false);\n        stat.test(\"[^\\\\d\\\\w]\", \"\", \"0\", false);\n        stat.test(\"[^\\\\d\\\\w]\", \"X\", \"0\", false);\n        System.out.println(\"\");\n\n        System.err.println(\"Passed/total: \"+stat.passed+\"/\"+stat.total);\n    }\n}", "id": 5408, "attachment_id": null, "creator": "kent@hauN.org", "creation_time": "2001-09-12T00:01:51Z", "time": "2001-09-12T00:01:51Z", "is_private": false}, {"count": 1, "tags": [], "creator": "kent@hauN.org", "text": "Created attachment 526\nThis patch fixes these bugs.", "id": 5409, "time": "2001-09-12T00:18:50Z", "bug_id": 3560, "creation_time": "2001-09-12T00:18:50Z", "is_private": false, "attachment_id": 526}, {"count": 2, "tags": [], "bug_id": 3560, "attachment_id": null, "id": 10424, "time": "2002-02-07T06:25:10Z", "creator": "kent@hauN.org", "creation_time": "2002-02-07T06:25:10Z", "is_private": false, "text": "*** Bug 6294 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 3560, "attachment_id": null, "text": "*** Bug 6296 has been marked as a duplicate of this bug. ***", "id": 10425, "time": "2002-02-07T06:28:01Z", "creator": "kent@hauN.org", "creation_time": "2002-02-07T06:28:01Z", "is_private": false}, {"count": 4, "tags": [], "creator": "neilg@ca.ibm.com", "attachment_id": null, "id": 18982, "time": "2002-07-03T22:25:13Z", "bug_id": 3560, "creation_time": "2002-07-03T22:25:13Z", "is_private": false, "text": "Finally applied patches that were sent to Xerces list a while ago; these bugs \nshould now be fixed in CVS."}]
[{"attachment_id": null, "tags": [], "bug_id": 48746, "text": "I'm running apache ant 1.8.0 on Red Hat Enterprise Linux 5.4, x86_64, with the 64-bit version of java 1.6.0_18 from sun (the latest available at least as of last week).  I can also see this behavior with 1.5.0_15, which is used in some of our development environments for various reasons.\n\nWith ant 1.8.0, there is a fairly high probability that ant's exec task will generate extraneous newlines in command output.  For example, with this build.xml file:\n\n<project default=\"all\">\n <target name=\"all\">\n  <exec executable=\"cat\">\n   <arg value=\"/tmp/a\"/>\n  </exec>\n </target>\n</project>\n\nand the following /tmp/a:\n\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n01234567890123456789012345678901234567890123456789\n\n\"most\" of the time, I get the expected output:\n\nBuildfile: /tmp/build.xml\n\nall:\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nbut sometimes I get variations with an extraneous line break in an indeterminate spot.  For example:\n\n     [exec] 01234567890123456789012345\n     [exec] 678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n     [exec] 01234567890123456789012345678901234567890123456789\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nIf I run ant 50 times in a loop, I see this or similar behavior (the line break is not always in the same place) about 50% of the time.  I'm running ANT like this:\n\nwhile true; do if JAVA_HOME=~/tmp/jdk1.6.0_18 $ANT_HOME/bin/ant -f /tmp/build.xml | diff - /tmp/a1; then echo yes >> /tmp/a2; else echo no >> /tmp/a2; done\n\nwhere /tmp/a1 just contains what the ant command is supposed to contain.\n\nI never see this behavior with 1.7.0, and I don't believe I've seen it with 1.7.1 either.\n\nThis problem is causing false test failures for us and will thus prevent us from upgrading to 1.8.0 pending a solution.  A quick diff of ExecTask.java between versions doesn't reveal any relevant changes.  Any suggestions on where in the code to check?  Let me know if there's anything you need me to test or submit.", "count": 0, "id": 134531, "time": "2010-02-15T21:05:58Z", "creator": "ejb@ql.org", "creation_time": "2010-02-15T21:05:58Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 48746, "is_private": false, "count": 1, "id": 134532, "time": "2010-02-15T23:22:28Z", "creator": "antoine@apache.org", "creation_time": "2010-02-15T23:22:28Z", "text": "Hi,\n\nI have tried this on my mac and i can confirm this.\nI have this java version :\n\njava version \"1.6.0_17\"\nJava(TM) SE Runtime Environment (build 1.6.0_17-b04-248-10M3025)\nJava HotSpot(TM) 64-Bit Server VM (build 14.3-b01-101, mixed mode)\n\nand MacOS Snow Leopard.\n\nMy guess is that the bits of codes which would cause this must be handling input output, probably PumpStreamHandler and the classes it delegates to.\n\nAntoine"}, {"count": 2, "tags": [], "creator": "antoine@apache.org", "text": "Created attachment 25031\npatch of PumpStreamHandler\n\nThis patch fixes the issue. \n\nI will probably commit it soon, but if meanwhile some one can explain what is the justification of a special wait behavior in StreamPumper for Windows systems ? The change makes all operating systems behave the same in this respect, so looping to wait for input in the streamPumper#waitForInput method.\n\nI do not have yet a unit test for this issue. I am also wondering whether this change might not make some unit tests which are not behaving consistently behave more consistently.", "id": 134731, "time": "2010-02-21T05:13:40Z", "bug_id": 48746, "creation_time": "2010-02-21T05:13:40Z", "is_private": false, "attachment_id": 25031}, {"attachment_id": null, "tags": [], "bug_id": 48746, "is_private": false, "count": 3, "id": 134732, "time": "2010-02-21T06:09:24Z", "creator": "antoine@apache.org", "creation_time": "2010-02-21T06:09:24Z", "text": "committed my change.\n\nWe have an antunit test case testRedirector13 in src/tests/antunit/taskdefs/exec/apply-test.xml which was failing inconsistently. I bet that this change in PumpStreamHandler will prevent this test from failing."}, {"count": 4, "tags": [], "text": "The patch causes a regression in stream handling inside NetBeans: under some circumstances, an <exec> gobbles up all subsequent output from Ant! I recommend this patch be rolled back for 1.8.2.\n\nI am not sure if there is any reliable fix for the originally reported bug; Ant tries to log messages corresponding to complete lines, even in case the final \\n is missing; but if it receives some characters without a newline it simply cannot know whether or not more characters are coming in the same line, so it just waits a short while to see if any arrive. Increasing StreamPumper.POLL_INTERVAL might reduce the likelihood of problems (untested).\n\nWhy would a test be checking the output of Ant's log, anyway? This should be considered informational. You can capture the output of <exec> to a file if it must be exact.", "is_private": false, "bug_id": 48746, "id": 137119, "time": "2010-05-25T12:46:15Z", "creator": "jglick@apache.org", "creation_time": "2010-05-25T12:46:15Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "ejb@ql.org", "attachment_id": null, "text": "Just to answer the question of why a test would be looking at ant's output, the test suite is for a build tool that invokes ant (as well as doing many other things).  I already have filters in the test suite to compensate for unpredictable aspects of ant's output, such as durations.  If it is deemed that the output of <exec> is not reliable when output to the screen, I will just modify my test suite to normalize it in some way.  For my original purposes, I don't care about it in the general case.  I just need to make sure ant is doing what it is supposed to do when invoked from my other tool.\n\nIn other words, running ant is the objective in this case, not a means to an end.  So I care about ant's output.  But since I'm not testing ant, I can work around its quirks without damaging the integrity of my open application's test suite.", "id": 137122, "time": "2010-05-25T17:04:38Z", "bug_id": 48746, "creation_time": "2010-05-25T17:04:38Z", "is_private": false}, {"count": 6, "tags": [], "creator": "antoine@apache.org", "text": "Hello Jesse,\n\ncould you explain in more details the problem that you have in Netbeans ? \n\nMaybe the issue that you have in NetBeans can be resolved in the netbeans integration.\n\nthere is a comment in your Netbeans bug report saying this :\n\n\"I've switched to a local (non-bundled) installation of Ant 1.8.1 (original\nrelease from apache). This fixes the bug.\"\n\n\nThe change which I did for this bug 48746 was to systematically set useAvailable=true in o.a.t.a.t.StreamPumper. Before, useavailable was set to true on Windows and false on other platforms.\n\nI was able to reproduce the problem described in this bug 48746 of lines being cut in the log of ant. I reproduced this on my MAC. If I did what is described in the bug report 50 times, I would get 30 times approximatively lines broken.\n\nI did not create a JUnit testcase for the original issue, which I should do to prevent regression.\n\nRegards,\n\nAntoine", "id": 137125, "time": "2010-05-25T18:13:48Z", "bug_id": 48746, "creation_time": "2010-05-25T18:13:48Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "(In reply to comment #6)\n> could you explain in more details the problem that you have in Netbeans? \n\nI think the URL field explains it in detail. Under 1.8.1, with that example, output from <exec> is never displayed, nor is any subsequent output from Ant.\n\n> Maybe the issue that you have in NetBeans can be resolved in the netbeans\n> integration.\n\nIt is possible, and I will try to investigate the root cause, but issues involving stdio are especially nasty to track down so reverting the problematic patch seems safest.\n\n> The change which I did for this bug 48746 was to systematically set\n> useAvailable=true in o.a.t.a.t.StreamPumper. Before, useavailable was set to\n> true on Windows and false on other platforms.\n\nRight. And if I set it back to false on Linux, everything is fine. I will double-check on XP, but I think platform-specific differences in stdio handling meant that there was no problem on Windows to begin with.", "id": 137142, "time": "2010-05-26T09:46:30Z", "bug_id": 48746, "creation_time": "2010-05-26T09:46:30Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "id": 137157, "time": "2010-05-26T18:13:09Z", "bug_id": 48746, "creation_time": "2010-05-26T18:13:09Z", "is_private": false, "text": "Oddly enough, the bug in the test case is reproducible in XP in 1.8.1 (not in 1.8.0). This fixes it for both Linux and XP:\n\nIndex: src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java\n===================================================================\n--- src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java\t(revision 948598)\n+++ src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java\t(working copy)\n@@ -244,7 +244,7 @@\n         final Thread result\n             = new ThreadWithPumper(new StreamPumper(is, os,\n                                                     closeWhenExhausted,\n-                                                    true));\n+                                                    false));\n         result.setDaemon(true);\n         return result;\n     }\n\nBut I have not yet checked the effect on the test cases from bug #5003."}, {"count": 9, "tags": [], "bug_id": 48746, "attachment_id": null, "text": "So, I'm just a user and am not familiar with the internals of ant, but isn't it pretty clear that if changing this parameter to true breaks one thing and changing it to false breaks something else, that neither code is correct?  I hope we don't fall into the trap here of choosing which bug we'd rather have but instead continue to investigate why the change to fix the extraneous newline problem causes the other issue.  Sorry if I'm stating the obvious here.", "id": 137158, "time": "2010-05-26T18:17:37Z", "creator": "ejb@ql.org", "creation_time": "2010-05-26T18:17:37Z", "is_private": false}, {"count": 10, "tags": [], "creator": "jglick@apache.org", "text": "Caused by PumpStreamHandler.finish interrupting the thread, which can cause a listener based on java.nio.channel to abruptly terminate with a ClosedByInterruptException. I think somehow timing-dependent; the extra waiting for output caused by useAvailable probably causes the pumper thread to hit the JOIN_TIMEOUT, thus falling through to the backup behavior of interrupting it until it dies.\n\nWorkaround on listener side is to forcibly clear the thread interrupt status immediately before writing to the channel. Still subject to a race condition but seems to work.", "id": 137192, "time": "2010-05-28T12:34:56Z", "bug_id": 48746, "creation_time": "2010-05-28T12:34:56Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "jglick@apache.org", "text": "Created attachment 25494\nHandy diagnostic patch", "id": 137193, "time": "2010-05-28T12:37:03Z", "bug_id": 48746, "creation_time": "2010-05-28T12:37:03Z", "is_private": false, "attachment_id": 25494}, {"count": 12, "tags": [], "bug_id": 48746, "is_private": false, "id": 137612, "attachment_id": null, "creator": "bodewig@apache.org", "creation_time": "2010-06-14T06:30:21Z", "time": "2010-06-14T06:30:21Z", "text": "There also is bug 46805 which somehow may also be related.\n\nOf the suggested changes over there we have performed one (join timeout) but\nneglected two that we may want to rethink:\n\n* unconditionally call process.destroy and don't close the streams at all\n  (rely on process.destroy to do that).  I'm not convinced this is going to help\n  or even poses a problem.  At the point where we close the streams either\n  process.waitFor has succeeded or we have invoked process.destroy\n\n* first close the streams and then stop the threads\n  At first glance I'd expect this change to make it more likely to miss\n  output written by the process but at the same time it may force buffers to\n  get flushed.\n\nI'll look into bringing real testcases for bug 5003 into Ant's trunk so we can\ntest a few things.  I don't think I ever checked in the ones I used by the\nend of 2008 and don't have them anymore, so I'll have to recreate them."}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "I did turn Peter's example code into an AntUnit test back then in\nsvn revision 927753 \n\ntestDoesntWaitForChildren in src/tests/antunit/taskdefs/exec/exec-test.xml\ntakes three seconds on my Win7 machine when run with Ant 1.8.[01] and\n21 seconds with Ant 1.7.1.\n\nIf I apply the suggested change of comment 8 I'm back at 22 seconds again,\nswapping close/stopThreads doesn't change that either.  But if I swap them,\nI don't even see the \"finished\" output the original process executed\nso it would actually make things worse.\n\nSo whatever we do, the flag has to remain true on Windows.", "count": 13, "id": 137613, "time": "2010-06-14T06:47:39Z", "bug_id": 48746, "creation_time": "2010-06-14T06:47:39Z", "is_private": false}, {"count": 14, "tags": [], "creator": "baron@cthing.com", "text": "I have been experiencing the LeadPipeInputStream Broken Pipe error with Ant 1.8.1 and Antoine pointed me at this issue. I am running on Windows XP and my use case is the Java Task with a LineCOntainsRegExp output filter chain redirector. In Ant 1.7.1 I would see the broken pipe error very infrequently, once every 5 - 10 builds. In Ant 1.8.1 I see it with every build.\n\nI have tried the 6/28/2010 trunk source and still see the problem. I have also tried changing the flag in createPumper and still see the problem.", "id": 137961, "time": "2010-06-28T23:27:03Z", "bug_id": 48746, "creation_time": "2010-06-28T23:27:03Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "greg.schueler@gmail.com", "attachment_id": null, "text": "This bug appears unresolved in ant 1.8.1.\n\nusing 1.8.1 release and Jay's original test build.xml I can easily see it.\n\nMac OS X 10.6.4, java version \"1.6.0_20\"", "id": 138077, "time": "2010-07-01T20:40:17Z", "bug_id": 48746, "creation_time": "2010-07-01T20:40:17Z", "is_private": false}]
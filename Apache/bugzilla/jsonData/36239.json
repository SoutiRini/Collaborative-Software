[{"count": 0, "tags": [], "creator": "matt@cenqua.com", "attachment_id": null, "id": 78623, "time": "2005-08-18T12:16:48Z", "bug_id": 36239, "creation_time": "2005-08-18T12:16:48Z", "is_private": false, "text": "When using <repalceregex>, specifying flags=\"s\" has no effect (that is, you want the regex to span \nlines).\n\nExample:\n<project basedir=\".\" default=\"test\" name=\"test\">\n  <target name=\"test\">\n    <copy overwrite=\"true\" file=\"src.txt\" tofile=\"dest.txt\">\n      <filterchain>\n\t<tokenfilter>\n\t  <replaceregex pattern=\"START.*\" replace=\"SNIP\" flags=\"gs\"/>\n\t</tokenfilter>\n      </filterchain>\n    </copy>\n  </target>\n</project>\n\n== src.txt ==\nline1\nfoo START this bit should disappear\nand so should this bit\n== ==\n\nTo Reproduce:\nRun the above build.xml, and look at dest.txt. Everything from START to EOF should be replaced with \n\"snip\", but it is not. Changing or removing the byline attribute has no effect.\n\nDiagnosis:\nI had a look at TokenFilter.ChainableReaderFilter. The \"byline\" attribute seems to be what I want, but \nrunning this through a debugger proved that ChainableReaderFilter.chain(Reader) is *never* called.\n\nSolution:\nNot to sure, reading the whole TokenFilter/ChainableReader thing was like chasing a rabbit down a hole \n:P\n\nWorkaround:\nI wrote my own FilteredReader to use with <filterreader>"}, {"count": 1, "tags": [], "text": "Hmm. I try this with byline=\"false\" and it works for me; please verify.", "attachment_id": null, "id": 78647, "creator": "mbenson@apache.org", "time": "2005-08-18T19:13:14Z", "bug_id": 36239, "creation_time": "2005-08-18T19:13:14Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 36239, "text": "(In reply to comment #1)\n> Hmm. I try this with byline=\"false\" and it works for me; please verify.\n\nI changed it to this:\n<replaceregex pattern=\"START.*\" replace=\"SNIP\" flags=\"gs\" byline=\"false\"/>\n\nand I get\n== dest.txt ==\nline1\nfoo SNIP\nand so should this bit\n== ==\n\nI *expect* to see:\n== ==\nline1\nfoo SNIP\n== ==\n\nI'm running Ant 1.6.5 on OSX and Linux on JDK 1.4.2. So you *do* see \"and should this bit\" get snipped \nas well?", "id": 78678, "time": "2005-08-19T00:47:41Z", "creator": "matt@cenqua.com", "creation_time": "2005-08-19T00:47:41Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 36239, "attachment_id": null, "text": "Indeed I do.  I will try later on another platform (I was testing on Windows).  \nI'm actually also using CVS HEAD but I can't remember any changes between 1.6.5 \nand HEAD that should affect this.", "id": 78737, "time": "2005-08-19T23:50:18Z", "creator": "mbenson@apache.org", "creation_time": "2005-08-19T23:50:18Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 36239, "text": "Thanks for taking the time to investigate this Matt.\n\nI tried the most recent Ant CVS snapshot ant_20050819221200.tar.gz, and I still see same problem (on \nOSX). I'll try it again on linux and windows later today.", "id": 78739, "time": "2005-08-20T01:09:13Z", "creator": "matt@cenqua.com", "creation_time": "2005-08-20T01:09:13Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 36239, "attachment_id": null, "is_private": false, "id": 78741, "time": "2005-08-20T01:40:26Z", "creator": "matt@cenqua.com", "creation_time": "2005-08-20T01:40:26Z", "text": "I added some debugging to ChainableReaderFilter (in my cvs snapshot):\n\n== ==\n        public void setByLine(boolean byLine) {\n\t    project.log(getClass().getName() + \".setByLine = \" + byLine);\n...\n        public Reader chain(Reader reader) {\n\t    project.log(getClass().getName() + \".chain() called, byLine = \" + byLine);\n...\n== ==\n\nI can see setByLine() being called, but chain() never seems to be called? Like I said, I'll try on linux later \ntoday.\n\nFor clarity, this is the *exact* build.xml I'm using.\n== ==\n<project basedir=\".\" default=\"test\" name=\"test\">\n  <target name=\"test\">\n    <copy overwrite=\"true\" file=\"src.txt\" tofile=\"dest.txt\">\n      <filterchain>\n        <tokenfilter>\n          <replaceregex pattern=\"START.*\" replace=\"SNIP\" flags=\"gs\" byline=\"false\"/>\n        </tokenfilter>\n      </filterchain>\n    </copy>\n  </target>\n</project>\n== =="}, {"count": 6, "tags": [], "bug_id": 36239, "attachment_id": null, "text": "Okay, this is an issue w/ the tokenfilter, but your workaround is to omit the \ntokenfilter element and nest the replaceregex directly.  That's what I did, \nhence our differing results.  Sorry for the delay, I've been away.", "id": 79015, "time": "2005-08-25T21:12:17Z", "creator": "mbenson@apache.org", "creation_time": "2005-08-25T21:12:17Z", "is_private": false}, {"count": 7, "tags": [], "text": "The way tokenfilter works is that it tokenizes the input stream by\ndefault into lines before passing them to the nested token filters.\n\nOne can change the tokenizer by adding a nested tokenizer to tokenfilter.\nIn your case you need to use <filetokenizer/>.\n\nSo the copy should look like:\n\n    <copy overwrite=\"true\" file=\"src.txt\" tofile=\"dest.txt\">\n      <filterchain>\n        <tokenfilter>\n          <filetokenizer/>\n          <replaceregex pattern=\"START.*\" replace=\"SNIP\" flags=\"gs\"/>\n        </tokenfilter>\n      </filterchain>\n    </copy>\n\nThis is probally a doc issue.", "attachment_id": null, "bug_id": 36239, "id": 79237, "time": "2005-08-31T17:49:19Z", "creator": "peterreilly@apache.org", "creation_time": "2005-08-31T17:49:19Z", "is_private": false}]
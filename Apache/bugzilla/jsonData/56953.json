[{"count": 0, "tags": [], "bug_id": 56953, "attachment_id": 31993, "text": "Created attachment 31993\npatch\n\nThe method \"readUnsignedShort()\" of \"DataInputStream\" read the stream twice to get the unsigned short. This happens even if the \"BufferedInputStream\" is invoked.\n\n    public final int readUnsignedShort() throws IOException {\n        int ch1 = in.read();\n        int ch2 = in.read();\n        if ((ch1 | ch2) < 0)\n            throw new EOFException();\n        return (ch1 << 8) + (ch2 << 0);\n    }\n\nIt may cause extra cost for some boundary processing. This case also appears in \"readInt\", \"readChar\", etc. It is obvious in some large projects.\n\nUse a interface to replace \"DataInputStream\" by \"FastDataInputStream\" can bypass these processes. The \"FastDataInputStream\" gets the bytes from buffer directly.\n\n//========== method in FastDataInputStream. ==========\n    public int readUnsignedShort() throws IOException{\n\n    \tif(pos + 1 >= cnt) {\n    \t\tfill();\n    \t\tif(pos + 1 >= cnt) throw new EOFException();\n    \t}\n    \t\n    \tint ch1 = this.buf[pos++] & 0xff;\n    \tint ch2 = this.buf[pos++] & 0xff;\n        return (ch1 << 8) + (ch2 << 0);\n    }\n\nBenefit shows bellow, it is got from the test case in attachment.\n=====lots of jar files=====\nDataInputStream: 592\nFastDataInputStream: 488\n=====few jar files=====\nDataInputStream: 93\nFastDataInputStream: 77\n\nnotice: The optimized method is called before original method in the test case, so the real result should be more obvious.", "id": 177715, "time": "2014-09-11T05:51:38Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-09-11T05:51:38Z", "is_private": false}, {"attachment_id": 31994, "tags": [], "bug_id": 56953, "text": "Created attachment 31994\ntest case", "count": 1, "id": 177716, "time": "2014-09-11T05:52:11Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-09-11T05:52:11Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56953, "attachment_id": null, "text": "The patch is no good. It includes a whole bunch of changes unrelated to this issue.", "id": 177770, "time": "2014-09-11T20:09:16Z", "creator": "markt@apache.org", "creation_time": "2014-09-11T20:09:16Z", "is_private": false}, {"count": 3, "tags": [], "creator": "hzhang9@ebay.com", "attachment_id": 32008, "id": 177783, "time": "2014-09-12T05:05:24Z", "bug_id": 56953, "creation_time": "2014-09-12T05:05:24Z", "is_private": false, "text": "Created attachment 32008\npatch"}, {"count": 4, "tags": [], "bug_id": 56953, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #2)\n> The patch is no good. It includes a whole bunch of changes unrelated to this\n> issue.\nIt is indeed a problem.\nThe change should be simpler than it shows in the patch, we just need to design a new stream for the parse. \n\nBut the methods in \"DataInputStream\" are always be \"final\", so I can only use a interface to implement it.\n\nDo you have any suggestion for this situation?", "id": 177785, "time": "2014-09-12T05:39:58Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-09-12T05:39:58Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 56953, "is_private": false, "id": 177787, "time": "2014-09-12T08:06:00Z", "creator": "markt@apache.org", "creation_time": "2014-09-12T08:06:00Z", "tags": [], "text": "If you continue to ignore the comments you are given then this issue is going to get closed as WONTFIX.\n\nYour first patch was 86k and full of irrelevant changes. The second attempt is worse at 107k.\n\nStarting at the beginning of the patch:\n1. The first chunk changes restores an svn keyword the Tomcat team previously removed. This change has nothing to do with this issue and should not be in this patch.\n\n2. The second chunk reverts a fix to a constant name the Tomcat team previously fixed and removes some code necessary for Java 8 support. This change has nothing to do with this issue and should not be in this patch. Further this change breaks Java 8 support.\n\n3. The third chunk makes further changes that have nothing to do with this issue and further breaks Java 8 support.\n\nAnd so on.\n\nI have no problem with reviewing a patch that completely replaces DataInputStream because of final methods. It is all the other irrelevant, breaking changes in the patch that are the problem."}, {"count": 6, "tags": [], "text": "The point of java.io.BufferedInputStream() is that is.read() were fast enough. I do not see much benefit in re-implementing standard JRE classes.\n\nBy the way, is.read() is a blocking method. If you were to use fill() or is.read(chars[]) there is no guarantee of how many bytes they can actually read in a single call.\n\nThat is why DataInput.readFully() method is there.", "attachment_id": null, "id": 177798, "creation_time": "2014-09-12T10:48:12Z", "time": "2014-09-12T10:48:12Z", "creator": "knst.kolinko@gmail.com", "bug_id": 56953, "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 56953, "text": "With the various other changes and improvements back-ported to 7.0.x, I'm prepared to consider this idea if the benefit justifies it. That said, we need a patch that implements this idea - and just this idea - first.", "count": 7, "id": 177816, "time": "2014-09-12T13:28:26Z", "creator": "markt@apache.org", "creation_time": "2014-09-12T13:28:26Z", "is_private": false}, {"count": 8, "tags": [], "creator": "hzhang9@ebay.com", "text": "OK, and I'm working on this.", "id": 177867, "time": "2014-09-15T08:08:52Z", "bug_id": 56953, "creation_time": "2014-09-15T08:08:52Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "A large portion of \"your\" code is apparently borrowed from some software that uses GPL license. You cannot contribute such code to an Apache project.", "id": 177873, "time": "2014-09-15T09:17:41Z", "bug_id": 56953, "creation_time": "2014-09-15T09:17:41Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "hzhang9@ebay.com", "text": "Created attachment 32029\nchange DataInputStream to DataInput", "id": 177920, "time": "2014-09-17T08:53:03Z", "bug_id": 56953, "creation_time": "2014-09-17T08:53:03Z", "is_private": false, "attachment_id": 32029}, {"count": 11, "attachment_id": 32030, "bug_id": 56953, "text": "Created attachment 32030\nFastDataInputStream implementation", "id": 177921, "time": "2014-09-17T08:56:33Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-09-17T08:56:33Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "hzhang9@ebay.com", "text": "Created attachment 32031\nTest case", "id": 177922, "time": "2014-09-17T08:57:22Z", "bug_id": 56953, "creation_time": "2014-09-17T08:57:22Z", "is_private": false, "attachment_id": 32031}, {"count": 13, "attachment_id": null, "bug_id": 56953, "text": "Sorry for the delay.\nNew patch applies on TRUNK, and the codes borrowed from GPL has been changed.\n\nBenefit shows bellow(300 jar files involved in this test):\n=====Call FDIS first=====\nDataInputStream: 7342\nFastDataInputStream: 6967\n\n=====reverse call sequency=====\nDataInputStream: 7369\nFastDataInputStream: 6979\n\nThe benefit is considerable when there are 200 or more jar files need to be parse.", "id": 177923, "time": "2014-09-17T09:07:06Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-09-17T09:07:06Z", "tags": [], "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 56953, "is_private": false, "id": 177924, "time": "2014-09-17T10:35:42Z", "creator": "markt@apache.org", "creation_time": "2014-09-17T10:35:42Z", "tags": [], "text": "Thanks for the updated patches. I see a 20-25% improvement with the patch so it has been applied to 8.0.x for 8.0.13 onwards.\n\nI'll look into porting it to 7.0.x."}, {"count": 15, "tags": [], "text": "OK, this is better.\n\n1. Formatting: the code shall not use tab characters\n\n2. In \"skipBytes(int n)\":  there is no reason to call \"fillNew()\" after calling \"in.skip(n - sum)\" on the underlying stream. If another skip call follows then there is no point in filling the buffer.\n\n3. \"<< 0\" shift operation is NOOP and can be removed.\n\n4. I wonder whether \"ch + ch\" or \"ch | ch\" works better. In theory the latter should be faster, but I guess there is no measurable difference nowadays.\n\n5. In uninmplemented readLine() method: maybe better throw new java.lang.UnsupportedOperationException() instead of IOException.", "attachment_id": null, "id": 177926, "creation_time": "2014-09-17T10:47:42Z", "time": "2014-09-17T10:47:42Z", "creator": "knst.kolinko@gmail.com", "bug_id": 56953, "is_private": false}, {"count": 16, "attachment_id": null, "bug_id": 56953, "is_private": false, "id": 177929, "time": "2014-09-17T12:49:53Z", "creator": "markt@apache.org", "creation_time": "2014-09-17T12:49:53Z", "tags": [], "text": "Patch has been applied to 7.0.x for 7.0.56 onwards."}, {"count": 17, "tags": [], "creator": "markt@apache.org", "text": "Review comments applied.", "id": 177931, "time": "2014-09-17T13:01:29Z", "bug_id": 56953, "creation_time": "2014-09-17T13:01:29Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "creator": "hzhang9@ebay.com", "text": "Thanks for your advice.\nThese points are extremely wise.\n\n(In reply to Konstantin Kolinko from comment #15)\n> OK, this is better.\n> \n> 1. Formatting: the code shall not use tab characters\n> \n> 2. In \"skipBytes(int n)\":  there is no reason to call \"fillNew()\" after\n> calling \"in.skip(n - sum)\" on the underlying stream. If another skip call\n> follows then there is no point in filling the buffer.\n> \n> 3. \"<< 0\" shift operation is NOOP and can be removed.\n> \n> 4. I wonder whether \"ch + ch\" or \"ch | ch\" works better. In theory the\n> latter should be faster, but I guess there is no measurable difference\n> nowadays.\n> \n> 5. In uninmplemented readLine() method: maybe better throw new\n> java.lang.UnsupportedOperationException() instead of IOException.", "id": 177947, "time": "2014-09-18T00:44:27Z", "bug_id": 56953, "creation_time": "2014-09-18T00:44:27Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Note that there was a regression caused by this change - bug 57173.", "id": 179007, "time": "2014-11-08T02:12:58Z", "bug_id": 56953, "creation_time": "2014-11-08T02:12:58Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 56953, "text": "(In reply to Konstantin Kolinko from comment #19)\n> Note that there was a regression caused by this change - bug 57173.\n\nI checked the case, and the problem does exist because I didn't implement several method on it.\nI'll try to fix it later.\n\nThe suggestion to roll back the change can be adopted temporarily.", "count": 20, "id": 179015, "time": "2014-11-10T00:54:49Z", "creator": "hzhang9@ebay.com", "creation_time": "2014-11-10T00:54:49Z", "is_private": false}, {"count": 21, "tags": [], "creator": "markt@apache.org", "text": "This fix has been reverted from trunk, 8.0.x (for 8.0.16 onwards) and 7.0.x (for 7.0.58 onwards) and will not be reapplied.\n\nOnce the issues causing the regressions found so far are fixed, the performance improvement is only a few percent. It simply isn't worth the risk of further regressions to shave a few percent of the scanning time at application start.", "id": 179283, "time": "2014-11-25T15:47:50Z", "bug_id": 56953, "creation_time": "2014-11-25T15:47:50Z", "is_private": false, "attachment_id": null}]
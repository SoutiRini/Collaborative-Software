[{"count": 0, "tags": [], "text": "I like to sprinkle my library code with the 'assert' keyword to help ensure that\nthe internal state is consistent. A JUnit test will check that the external\ncontracts of everything behave as expected, but it would still be nice to do\nthese additional assertion checks just to make sure. Since assertions are off by\ndefault in Java, <junit> will not normally permit the tested code to run its\nassertions while being tested. This seems a shame - you want assertions turned\non aggressively while you are developing code, especially while you are testing it.\n\nThe attached patch adds an attribute 'javaassertions' to the <junit> task,\ndefault false for compatibility (is that an issue?). If turned on, the whole\ntest runner gets assertions turned on in all packages. Practically, it is just\nthe tested code you care about (not e.g. the JUnit framework, or your unit tests\nwhich are presumably using junit.framework.Assert in the normal way), but it\nseems harmless to have it on for all packages anyway, and that is simplest.\n\nFor technical reasons, assertions can only be turned on (1) if you fork, (2) if\nyou use <classpath> when not forking. It seems odd to me to put testcases in the\nAnt startup classpath, anyway (since you are normally compiling them from the\nbuild script), so this is probably not a real limitation. Note that it is\nassumed that if you are running JDK 1.4 and fork a VM, that JVM is also 1.4 and\ncan accept the -ea switch. If you try to turn on assertions and this is not\npossible, a warning is printed.\n\nPatch includes:\n\n- code change with Javadoc\n- manual addition\n- WHATSNEW entry\n- test case, of course :-)\n\nThe test case is only meaningful when run from JDK 1.4, otherwise it should just\npass without testing anything. (But please sanity-check this.)", "attachment_id": null, "bug_id": 21387, "id": 40125, "time": "2003-07-07T23:48:10Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2003-07-07T23:48:10Z", "is_private": false}, {"attachment_id": 7141, "tags": [], "creator": "jesse.glick@netbeans.com", "is_private": false, "count": 1, "id": 40126, "time": "2003-07-07T23:48:52Z", "bug_id": 21387, "creation_time": "2003-07-07T23:48:52Z", "text": "Created attachment 7141\nSuggested patch against CVS trunk (see also added file in next attachment)"}, {"count": 2, "text": "Created attachment 7142\nAdded test case; save as src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitJavaAssertionsTest.java", "bug_id": 21387, "is_private": false, "id": 40127, "time": "2003-07-07T23:49:46Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2003-07-07T23:49:46Z", "tags": [], "attachment_id": 7142}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "is_private": false, "count": 3, "id": 40133, "time": "2003-07-08T00:56:54Z", "bug_id": 21387, "creation_time": "2003-07-08T00:56:54Z", "text": "hey Jesse.\n\nyou know there is an Assertions class in ant.types whose role in life is to\nrepresent sets of assertions in Java calls. I just havent got round to the\nintegration with java and junit.\n\nIt would seem to me that while Junit integration is good, total integration with\n<java> better, so if you want to get involved in finishing off what I have left\nundone, that would be great.\n"}, {"count": 4, "tags": [], "creator": "jesse.glick@netbeans.com", "attachment_id": null, "is_private": false, "id": 40138, "time": "2003-07-08T02:56:39Z", "bug_id": 21387, "creation_time": "2003-07-08T02:56:39Z", "text": "Thanks, I didn't see that class. That would be more natural - to add an\n<assertions> subelement to <junit>. If I have another moment, I will try to redo\nthis patch to use that util class. Can't promise to be able to get to <java> too.\n\nBTW it is not true that you can only turn on assertions when forking. Any\nclasses loaded from a new class loader can have their assertion status set as\nthey are loaded. See the current patch here for an example - <junit fork=\"false\"\njavaassertions=\"true\"> does work if you load the test classes in a new loader,\nthe normal mode. Therefore I think the API of Assertions should be changed a bit\n- currently it assumes that it will be used only in CommandlineJava, but you\nshould be able to have it apply itself to a ClassLoader too, I suppose. I might\nsuggest a public void applyAssertions(ClassLoader), and also making\ngetCommandPrefix & toCommand package-private - impl detail of\napplyAssertions(CommandlineJava). One annoyance is that child class loaders will\nnot inherit the assertion status of their ancestors as far as I can tell."}, {"count": 5, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 40190, "time": "2003-07-08T16:09:31Z", "bug_id": 21387, "creation_time": "2003-07-08T16:09:31Z", "is_private": false, "text": "I was vaguely aware of the in-jvm assertion stuff, but was curious about\nimplications for the Ant classloaders to add assertion support; saying 'you must\nfork' is probably the simplest. But if it can be done easily, then go for it. "}, {"count": 6, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "is_private": false, "id": 72098, "time": "2005-03-10T00:17:43Z", "bug_id": 21387, "creation_time": "2005-03-10T00:17:43Z", "text": "Jesse,\ndo you still want to do this?"}, {"count": 7, "tags": [], "bug_id": 21387, "is_private": false, "text": "junit supports assertions since svn revision 275067", "id": 129049, "time": "2009-07-22T07:45:37Z", "creator": "bodewig@apache.org", "creation_time": "2009-07-22T07:45:37Z", "attachment_id": null}]
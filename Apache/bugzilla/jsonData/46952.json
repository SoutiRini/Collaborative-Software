[{"count": 0, "tags": [], "creator": "lat@iki.fi", "attachment_id": 23434, "is_private": false, "id": 125934, "time": "2009-04-01T12:48:16Z", "bug_id": 46952, "creation_time": "2009-04-01T12:48:16Z", "text": "Created attachment 23434\nextra debugging for mod_ssl\n\nUsing apache 2.2.11 with openssl 0.9.7d, a location-specific SSLVerifyClient optional (or require), and a long list of CA certificates, the SSL session re-negotiation hangs.  Shrinking the \"CA\" list works around the problem.\n\nThere is bug in mod_ssl / openssl such that mod_ssl buffers the data, openssl thinks it issues a flush while working through the renegotiation state machine, but mod_ssl never flushes the data out. The web client hangs waiting for more data from the server, and the server hangs waiting for the client to send certificate, thinking it's sent the data out already.\n\nThe client hang occurs at least with firefox (3.0.x), curl and openssl s_client.  Safari does not hang.  We have had mixed reports about Konqueror.\n\nFor example I use the following command to connect to the server:\n\n  curl --cert mycert.pem --key mykey.pem --cacert ca-list.pem \\\n     -L -v -1 -o - https://myserver.domain:443/test/testme\n\nThe detailed SSL debug output in (A) is from:\n\n  openssl s_client -state -debug -connect myserver.domain:443 \\\n     -key mykey.pem -cert mycert.pem -CAfile ca-list.pem\n\nOnce in the interactive mode, type in the URL which is protected with \"SSLVerifyClient require\":\n\n  GET /test/testme HTTP/1.1\n  Host: myserver.domain\n  (enter for empty line)\n\nThe client side output from the hang is in (A), excluding wire bytes.\n\nThe server side debug output is in (B), starting from the processing of the HTTP request which forces renegotiation, again excluding actual wire bytes.\n\nI added considerably more logging to ssl_engine_io.c, and the crux of the issue appears to be that once the SSL re-negotiation begins it hangs in the stack trace in (C).\n\nThis is around line 612 in my version of ssl_hook_Access() in ssl_engine_kernel.c, in the \"renegotiate\" part but not \"renegotiate_quick\".  If CA list is long (our server responds with 4096+4096+4148 bytes for server hello + server cert + key exchange + cert request with list of 85 CAs) such that the last block is > 4096 bytes, the third and last data segment is cached into bio_filter_out_ctx_t.buffer, and the last flush from \"Loop: SSLv3 flush data\" never actually calls bio_filter_out_ctrl() and issues a flush to send the data out.  If we shrink the CA list so that the last third segment is <4096 bytes, everything is flushed out fine and there is no hang.\n\nI added logging to bio_filter_out_flush(), bio_filter_out_write() and bio_filter_out_ctrl(), and even though the \"Loop: SSLv3 flush data\" is output, there is _no_ call to bio_filter_out_ctrl() to flush the data if the CA list is too long.  If the list is shorter, it does come.  I couldn't quite work out from openssl / mod_ssl interaction how that was possible.  The actual sequence of calls resulting in a hang is in (D).  The sequence of calls for a successful server response is in (E).  The patch that adds the logging is attached.\n\n\n(A)\n\nEnter pass phrase for mykey.pem:\nCONNECTED(0000000E)\nSSL_connect:before/connect initialization\nwrite to 0x455bf0 [0xef000] (89 bytes => 89 (0x59))\nSSL_connect:SSLv3 write client hello A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (74 bytes => 74 (0x4A))\nSSL_connect:SSLv3 read server hello A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (4257 bytes => 4257 (0x10A1))\ndepth=2 /.../CN=...\nverify return:1\ndepth=1 /.../CN=...\nverify return:1\ndepth=0 /.../CN=...\nverify return:1\nSSL_connect:SSLv3 read server certificate A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (525 bytes => 525 (0x20D))\nSSL_connect:SSLv3 read server key exchange A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (4 bytes => 4 (0x4))\nSSL_connect:SSLv3 read server done A\nwrite to 0x455bf0 [0x180ae00] (139 bytes => 139 (0x8B))\nSSL_connect:SSLv3 write client key exchange A\nwrite to 0x455bf0 [0x180ae00] (6 bytes => 6 (0x6))\nSSL_connect:SSLv3 write change cipher spec A\nwrite to 0x455bf0 [0x180ae00] (53 bytes => 53 (0x35))\nSSL_connect:SSLv3 write finished A\nSSL_connect:SSLv3 flush data\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (1 bytes => 1 (0x1))\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (48 bytes => 48 (0x30))\nSSL_connect:SSLv3 read finished A\nCertificate chain\n 0 <snip>\n 1 <snip>\n 2 <snip>\n---\nServer certificate\n<snip>\nSSL handshake has read 4939 bytes and written 287 bytes\n---\nNew, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA\nServer public key is 2048 bit\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : TLSv1\n    Cipher    : DHE-RSA-AES256-SHA\n    Session-ID: <snip>\n    Session-ID-ctx: \n    Master-Key: <snip>\n    Key-Arg   : None\n    Start Time: 1238608803\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---\nGET /test/testme HTTP/1.1\nHost: myserver.domain\n\nwrite to 0x455bf0 [0xef000] (90 bytes => 90 (0x5A))\nwrite to 0x455bf0 [0xef000] (90 bytes => 90 (0x5A))\nwrite to 0x455bf0 [0xef000] (74 bytes => 74 (0x4A))\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (32 bytes => 32 (0x20))\nSSL_connect:SSL renegotiate ciphers\nwrite to 0x455bf0 [0xef000] (117 bytes => 117 (0x75))\nSSL_connect:SSLv3 write client hello A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (96 bytes => 96 (0x60))\nSSL_connect:SSLv3 read server hello A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (4288 bytes => 4238 (0x108E))\nread from 0x455bf0 [0xeb093] (50 bytes => 50 (0x32))\ndepth=2 /.../CN=...\nverify return:1\ndepth=1 /.../CN=...\nverify return:1\ndepth=0 /.../CN=...\nverify return:1\nSSL_connect:SSLv3 read server certificate A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (560 bytes => 560 (0x230))\nSSL_connect:SSLv3 read server key exchange A\nread from 0x455bf0 [0xea000] (5 bytes => 5 (0x5))\nread from 0x455bf0 [0xea005] (7328 bytes => 3228 (0xC9C))\nread from 0x455bf0 [0xeaca1] (4100 bytes => 0 (0x0))\nSSL_connect:failed in SSLv3 read server certificate request A\n1493:error:140940E5:SSL routines:SSL3_READ_BYTES:ssl handshake failure:s3_pkt.c:990:\n\n(B)\n\n[info] Initial (No.1) HTTPS request received for child 1 (server myserver.domain:443)\n[debug] ssl_engine_kernel.c(426): Changed client verification type will force renegotiation\n[info] Requesting connection re-negotiation\n[debug] ssl_engine_kernel.c(616): Performing full renegotiation: complete handshake protocol\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSL renegotiate ciphers\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request C\n[info] Awaiting re-negotiation handshake\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: before accept initialization\n[debug] ssl_engine_io.c(1817): OpenSSL: read 5/5 bytes from BIO#f54db0 [mem: f5c480] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 read client hello A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write server hello A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate A\n[debug] ssl_engine_kernel.c(1143): [client ip.ad.dr.es] handing out temporary 1024 bit DH key\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write key exchange A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate request A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n\n\n(C)\n\n#0 0x00000035179c08ef in poll () from /lib64/tls/libc.so.6\n#1 0x0000002a957c483f in apr_wait_for_io_or_timeout ()\n#2 0x0000002a957bfcaa in apr_socket_recv ()\n#3 0x0000002a9556cd30 in socket_bucket_read ()\n#4 0x0000000000433a02 in ap_core_input_filter ()\n#5 0x0000002a96104e19 in logio_in_filter ()\n#6 0x0000002a96942230 in bio_filter_in_read ()\n#7 0x000000351948f1a3 in BIO_read () from /lib64/libcrypto.so.4\n#8 0x0000003519b1af12 in ssl3_alert_code () from /lib64/libssl.so.4\n#9 0x0000003519b1bb7e in ssl3_read_bytes () from /lib64/libssl.so.4\n#10 0x0000003519b1cc5b in ssl3_get_message () from /lib64/libssl.so.4\n#11 0x0000003519b14c5d in ssl3_accept () from /lib64/libssl.so.4\n#12 0x0000003519b22108 in SSL_do_handshake () from /lib64/libssl.so.4\n#13 0x0000002a96944c45 in ssl_hook_Access ()\n#14 0x0000000000430b9f in ap_run_access_checker ()\n#15 0x0000000000432bc6 in ap_process_request_internal ()\n#16 0x0000000000442070 in ap_process_request ()\n#17 0x000000000043f7cd in ap_process_http_connection ()\n#18 0x000000000043be73 in ap_run_process_connection ()\n#19 0x0000000000446164 in child_main ()\n#20 0x0000000000446384 in make_child ()\n#21 0x0000000000446f09 in ap_mpm_run ()\n#22 0x0000000000423055 in main ()\n\n(D)\n\n[info] Initial (No.1) HTTPS request received for child 0 (server myserver.domain:443)\n[debug] ssl_engine_kernel.c(426): Changed client verification type will force renegotiation\n[info] Requesting connection re-negotiation\n[debug] ssl_engine_kernel.c(616): Performing full renegotiation: complete handshake protocol\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSL renegotiate ciphers\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f4f240, in#f651c0, inl 37), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f4f240)->buffer[0, 0: 37]\n[debug] ssl_engine_io.c(1858): OpenSSL: write 37/37 bytes to BIO#f4f240 [mem: f651c0] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request A\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 3, 0, #0); ctx:[37, 0]\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 3, 0, #0); ctx:[37, 0]->ret 37\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 11, 0, #0); ctx:[37, 0]\n[debug] ssl_engine_io.c(136): OpenSSL: flush 1: BIO#f4f240, blen=37, length=0\n[debug] ssl_engine_io.c(159): OpenSSL: flush 2: BIO#f4f240, head=f51318, bucket=f4cf78\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f4f240, e=f4ce38 [#f4f308, 37] -> f4cf78\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f4f240, e=f4cf78 [#0, 0] -> f51320\n[debug] ssl_engine_io.c(180): OpenSSL: flush 5: BIO#f4f240, rc=0, APR_SUCCESS=0, retval=1\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 11, 0, #0); ctx:[0, 0]->ret 1\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request C\n[info] Awaiting re-negotiation handshake\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 6, 0, #0); ctx:[0, 0]\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f4f240, 6, 0, #0); ctx:[0, 0]->ret 0\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: before accept initialization\n[debug] ssl_engine_io.c(1858): OpenSSL: read 5/5 bytes from BIO#f552e0 [mem: f5c9b0] (BIO dump follows)\n[debug] ssl_engine_io.c(1858): OpenSSL: read 112/112 bytes from BIO#f552e0 [mem: f5c9b5] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 read client hello A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write server hello A\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f4f240, in#f6cb00, inl 4096), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f4f240)->buffer[0, 0: 4096]\n[debug] ssl_engine_io.c(1858): OpenSSL: write 4096/4096 bytes to BIO#f4f240 [mem: f6cb00] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate A\n[debug] ssl_engine_kernel.c(1143): [client ip.ad.dr.es] handing out temporary 1024 bit DH key\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write key exchange A\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f4f240, in#f6cb00, inl 4096), retry=0, ctx: [length 0, blen 4096, nobuffer=0]\n[debug] ssl_engine_io.c(254): OpenSSL: bio_filter_out_write(BIO#f4f240)->bucket(4096, 4096: #f4ced8)\n[debug] ssl_engine_io.c(136): OpenSSL: flush 1: BIO#f4f240, blen=4096, length=4096\n[debug] ssl_engine_io.c(159): OpenSSL: flush 2: BIO#f4f240, head=f51318, bucket=f4cd98\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f4f240, e=f4cf78 [#f4f308, 4096] -> f4ced8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f4f240, e=f4ced8 [#f6cb00, 4096] -> f4cd98\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f4f240, e=f4cd98 [#0, 0] -> f51320\n[debug] ssl_engine_io.c(180): OpenSSL: flush 5: BIO#f4f240, rc=0, APR_SUCCESS=0, retval=1\n[debug] ssl_engine_io.c(1858): OpenSSL: write 4096/4096 bytes to BIO#f4f240 [mem: f6cb00] (BIO dump follows)\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f4f240, in#f65e61, inl 4148), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f4f240)->buffer[0, 0: 4148]\n[debug] ssl_engine_io.c(1858): OpenSSL: write 4148/4148 bytes to BIO#f4f240 [mem: f65e61] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate request A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n[debug] ssl_engine_io.c(1869): OpenSSL: I/O error, 5 bytes expected to read on BIO#f552e0 [mem: f5c9b0]\n\n\n(E)\n\n\n[info] Initial (No.1) HTTPS request received for child 2 (server myserver.domain:443)\n[debug] ssl_engine_kernel.c(426): Changed client verification type will force renegotiation\n[info] Requesting connection re-negotiation\n[debug] ssl_engine_kernel.c(616): Performing full renegotiation: complete handshake protocol\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSL renegotiate ciphers\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f789d0, in#f990a0, inl 37), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f789d0)->buffer[0, 0: 37]\n[debug] ssl_engine_io.c(1859): OpenSSL: write 37/37 bytes to BIO#f789d0 [mem: f990a0] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request A\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 3, 0, #0); ctx:[37, 0]\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 3, 0, #0); ctx:[37, 0]->ret 37\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 11, 0, #0); ctx:[37, 0]\n[debug] ssl_engine_io.c(136): OpenSSL: flush 1: BIO#f789d0, blen=37, length=0\n[debug] ssl_engine_io.c(159): OpenSSL: flush 2: BIO#f789d0, head=f88208, bucket=f80e58\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80d18 [#f861f8, 37] -> f80e58\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80e58 [#0, 0] -> f88210\n[debug] ssl_engine_io.c(180): OpenSSL: flush 5: BIO#f789d0, rc=0, APR_SUCCESS=0, retval=1\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 11, 0, #0); ctx:[0, 0]->ret 1\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write hello request C\n[info] Awaiting re-negotiation handshake\n[debug] ssl_engine_kernel.c(1752): OpenSSL: Handshake: start\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 6, 0, #0); ctx:[0, 0]\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 6, 0, #0); ctx:[0, 0]->ret 0\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: before accept initialization\n[debug] ssl_engine_io.c(1859): OpenSSL: read 5/5 bytes from BIO#f78a50 [mem: f90890] (BIO dump follows)\n[debug] ssl_engine_io.c(1859): OpenSSL: read 192/192 bytes from BIO#f78a50 [mem: f90895] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 read client hello A\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write server hello A\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f789d0, in#fa5600, inl 4096), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f789d0)->buffer[0, 0: 4096]\n[debug] ssl_engine_io.c(1859): OpenSSL: write 4096/4096 bytes to BIO#f789d0 [mem: fa5600] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate A\n[debug] ssl_engine_kernel.c(1143): [client ip.ad.dr.es] handing out temporary 1024 bit DH key\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write key exchange A\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f789d0, in#fa5600, inl 4096), retry=0, ctx: [length 0, blen 4096, nobuffer=0]\n[debug] ssl_engine_io.c(254): OpenSSL: bio_filter_out_write(BIO#f789d0)->bucket(4096, 4096: #f80ef8)\n[debug] ssl_engine_io.c(136): OpenSSL: flush 1: BIO#f789d0, blen=4096, length=4096\n[debug] ssl_engine_io.c(159): OpenSSL: flush 2: BIO#f789d0, head=f88208, bucket=f80db8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80e58 [#f861f8, 4096] -> f80ef8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80ef8 [#fa5600, 4096] -> f80db8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80db8 [#0, 0] -> f88210\n[debug] ssl_engine_io.c(180): OpenSSL: flush 5: BIO#f789d0, rc=0, APR_SUCCESS=0, retval=1\n[debug] ssl_engine_io.c(1859): OpenSSL: write 4096/4096 bytes to BIO#f789d0 [mem: fa5600] (BIO dump follows)\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 write certificate request A\n[debug] ssl_engine_io.c(217): OpenSSL: bio_filter_out_write(BIO#f789d0, in#fa5600, inl 4020), retry=0, ctx: [length 0, blen 0, nobuffer=0]\n[debug] ssl_engine_io.c(238): OpenSSL: bio_filter_out_write(BIO#f789d0)->buffer[0, 0: 4020]\n[debug] ssl_engine_io.c(1859): OpenSSL: write 4020/4020 bytes to BIO#f789d0 [mem: fa5600] (BIO dump follows)\n[debug] ssl_engine_io.c(272): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 11, 0, #0); ctx:[4020, 0]\n[debug] ssl_engine_io.c(136): OpenSSL: flush 1: BIO#f789d0, blen=4020, length=0\n[debug] ssl_engine_io.c(159): OpenSSL: flush 2: BIO#f789d0, head=f88208, bucket=f80ef8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80db8 [#f861f8, 4020] -> f80ef8\n[debug] ssl_engine_io.c(163): OpenSSL: flush 3: BIO#f789d0, e=f80ef8 [#0, 0] -> f88210\n[debug] ssl_engine_io.c(180): OpenSSL: flush 5: BIO#f789d0, rc=0, APR_SUCCESS=0, retval=1\n[debug] ssl_engine_io.c(322): OpenSSL: bio_filter_out_ctrl(BIO#f789d0, 11, 0, #0); ctx:[0, 0]->ret 1\n[debug] ssl_engine_kernel.c(1760): OpenSSL: Loop: SSLv3 flush data\n[debug] ssl_engine_io.c(1859): OpenSSL: read 5/5 bytes from BIO#f78a50 [mem: f90890] (BIO dump follows)"}, {"count": 1, "tags": [], "bug_id": 46952, "attachment_id": null, "text": "This might be an openssl bug. Have you tried if this still occurs with a more recent version of openssl?", "id": 125936, "time": "2009-04-01T13:21:59Z", "creator": "rpluem@apache.org", "creation_time": "2009-04-01T13:21:59Z", "is_private": false}, {"count": 2, "tags": [], "creator": "lat@iki.fi", "attachment_id": null, "text": "Thanks, no I haven't tried a more recent openssl yet, will try that later.", "id": 125937, "time": "2009-04-01T13:30:53Z", "bug_id": 46952, "creation_time": "2009-04-01T13:30:53Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "steve@traylen.net", "text": "\n  We also noticed this at the same time , we use the same CA set as\n  Lassi.\n\n  There is a log of our investigation here.\n\n  https://savannah.cern.ch/bugs/index.php?48458\n\n  including a work around for one case which fails to work in another case.\n\n  The debian bug.\n\n  http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=478470\n\n  for a secure exim is the looking  very close to the problem and \n   has some explanation.\n\n  Steve", "count": 3, "id": 126502, "time": "2009-04-24T12:15:06Z", "bug_id": 46952, "creation_time": "2009-04-24T12:15:06Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 46952, "is_private": false, "text": "Hi Ruediger,\n\n I tried with a newer openssl - Fedora Core 10 has:\n\nhttpd-2.2.11-2.fc10.x86_64\nopenssl-0.9.8g-12.fc10.x86_64\nmod_ssl-2.2.11-2.fc10.x86_64 \n\n  and the same thing happens.\n\n  Perhaps more interesting is that if you use openssl's tiny\n  web server then everything is okay. \n\n  i.e \n\n  openssl s_server -accept 8443 -verify 5 \\\n  -cert /etc/grid-security/hostcert.pem \\\n  -key /etc/grid-security/hostkey.pem -debug \\\n  -CApath /etc/grid-security/certificates/ -www \n\n  to set up a web server and then\n\n  openssl s_client -connect vtb-generic-70.cern.ch:8443 \\\n  -cert ~/.globus/usercert.pem \\\n  -key ~/.globus/userkey.pem \\\n  -debug -CApath /etc/grid-security/certificates/ << EOF\n  GET / HTTP/1.0\n  EOF \n\n  then the debug page comes back. i.e it suggests that while openssl\n  is okay something faulty with the mod_ssl layer?\n\n Steve", "id": 127018, "time": "2009-05-14T06:20:56Z", "creator": "steve@traylen.net", "creation_time": "2009-05-14T06:20:56Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 46952, "is_private": false, "text": "\nA ticket has been opened in the OpenSSL request tracker:\n\n    http://rt.openssl.org/Ticket/Display.html?id=1949\n\n    account:  guest\n    password: guest", "id": 127673, "time": "2009-06-05T05:20:07Z", "creator": "litmaath@cern.ch", "creation_time": "2009-06-05T05:20:07Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "Akos.Frohner@cern.ch", "attachment_id": 23831, "text": "Created attachment 23831\ntest case for the bug\n\nI've attached a test case for the bug, which generates test \ncertificate to trigger the problem. \n\nThe first point is that the certificate of the server has to be \nbigger than OpenSSL's buffer size, which is 4kB by default. I have\npadded the server certificate with comments. \nOne can play with this number by using the '--pads 123' option.\n\nThe second point is to create enough CA entries that the summary \nof ServerHello, Certificate, ServerKeyExchange, CertificateRequest\nand ServerHelloDone record sizes adds up over 12kB (4kB of the \nbuffer in OpenSSL and 8kB for the BIO of mod_ssl).\nOne can play with this number by using the '--cas 123' option.\n\n\nRun the script and follow the instructions:\n   ../test-certs\n   ./httpd/server start\n   ./httpd/client # which shall hang\n   ./httpd/server stop\n\nYou can clean up/regernerate with different parameters:\n    ../test-certs --cas 70 # works\n    ../test-certs --cas 80 # hangs\n    ../test-certs --cas 110 # hangs\n    ../test-certs --cas 120 # works\n\nI hope it clarifies the problem!", "id": 128076, "time": "2009-06-19T03:15:34Z", "bug_id": 46952, "creation_time": "2009-06-19T03:15:34Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 46952, "attachment_id": null, "id": 128077, "time": "2009-06-19T03:33:30Z", "creator": "lat@iki.fi", "creation_time": "2009-06-19T03:33:30Z", "is_private": false, "text": "For an additional mod_ssl / openssl data point, I confirm I have verified the problem exists using the just-attached \"test case for the bug\" (or rather version I tested yesterday) on Mac OS X 10.4.11 with:\n\n$ openssl version\nOpenSSL 0.9.8i 15 Sep 2008\n\n$ xxx/bin/httpd -V\nServer version: Apache/2.2.10 (Unix)\nServer built:   Dec 17 2008 00:20:21\nServer's Module Magic Number: 20051115:18\nServer loaded:  APR 1.3.3, APR-Util 1.3.4\nCompiled using: APR 1.3.3, APR-Util 1.3.4\nArchitecture:   32-bit\nServer MPM:     Prefork\n  threaded:     no\n    forked:     yes (variable process count)\nServer compiled with....\n -D APACHE_MPM_DIR=\"server/mpm/prefork\"\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=128\n -D HTTPD_ROOT=\"xxx\"\n -D SUEXEC_BIN=\"xxx/bin/suexec\"\n -D DEFAULT_PIDLOG=\"logs/httpd.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_LOCKFILE=\"logs/accept.lock\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"conf/mime.types\"\n -D SERVER_CONFIG_FILE=\"conf/httpd.conf\""}, {"count": 8, "tags": [], "bug_id": 46952, "is_private": false, "text": "Hello,\n\nI have been making some investigation of the problem - and wanted to summarise the current understanding of the details - which I'm fairly clear about. I've also included a tentative fix, but as I explain there are some considerations - the wider audience here will probably have some more ideas. (I'll write a similar report on the openssl bug list, as there are also openssl issues raised).\n\nApparently the problem (dialogue stall) arrises because of the two layers of buffering between mod_ssl's filter_out BIO and the wbio buffer BIO (i.e. a BIO_f_buffer()), which openssl adds to the stack of wbio BIOs for most of the handshake process. In particular s3_srvr.c (in openssl) uses this check during the flush state:\n\ncase SSL3_ST_SW_FLUSH:\n                        /* number of bytes to be flushed */\n                        num1=BIO_ctrl(s->wbio,BIO_CTRL_INFO,0,NULL);\n                        if (num1 > 0)\n                                {\n                                s->rwstate=SSL_WRITING;\n                                num1=BIO_flush(s->wbio);\n                                if (num1 <= 0) { ret= -1; goto end; }\n                                s->rwstate=SSL_NOTHING;\n                                }\n\nThe BIO_CTRL_INFO call for the BIO_f_buffer (first in the list of s->wbio stack) only checks the number of buffered outgoing bytes in that BIO; so if the BIO_f_buffer has no bytes remaining to be written, but mod_ssl's filter_out BIO does then BIO_flush is not called - bytes remain in the filter_out BIO and the dialogue stalls.\n\ne.g. observed sequence during a renegotiate sequence that stalls:\n\nbio_filter_out_write receives 37 bytes (SSL renegotiate ciphers request)\n37 bytes added to outctx->buffer: total 37 bytes\n\nFlushed from s3_srvr.c: BIO_flush called on bio_filter out. outctx->buffer is 0 again.\n\nopenssl adds in the BIO_f_buffer BIO to the ssl wbio (via ssl_init_wbio_buffer())\n\nopenssl server sends HELLO A: 101 bytes\nAdded to BIO_f_buffer: buffer total = 101 bytes (sending from BIO_f_buffer to filter_out is done in  crypto routine buffer_write(), bf_buff.c)\n\nopenssl sever sends SERVER CERT A: 4325 bytes\n(buffer_write()) fills BIO_f_buffer with extra 3995 bytes: total = 4096\n   4096 bytes sent to bio_filter_out_write: outctx->buffer now 4096 bytes\n   BIO_f_buffer: 0 bytes buffered\nRemainder bytes added to BIO_f_buffer: 330 bytes buffered\n\nopenssl server sends KEY EXCHANGE A: 565 bytes\nBIO_f_buffer receives 565 bytes: total 895 bytes\n\nopenssl server sends CERT REQ A: 7797 bytes\n\nBIO_f_buffer adds 3201 to buffer making total of 4096:\n  4096 bytes sent to bio_filter_out_write: All 8192 bytes flushed. outctx->buffer is 0 again.\n  BIO_f_buffer: 0 bytes buffered\nRemainder of 4596 sent to bio_filter_out_write(): Added to outctx->buffer for total of 4596 buffed bytes.\n\nopenssl server passes through SSL3_ST_SW_FLUSH state and checks wbio (i.e. BIO_f_buffer) with BIO_CTRL_INFO: Returns 0 as there is nothing buffered, and so no call BIO_flush on wbio. Thus no flush call to mod_ssl's filter_out BIO.\n\nTrial fix - a change in both openssl and mod_ssl:\n\n--- s3_srvr.c-  2009-06-17 20:44:54.000000000 +0200\n+++ s3_srvr.c   2009-06-17 17:20:33.000000000 +0200\n@@ -413,7 +413,7 @@\n\n               case SSL3_ST_SW_FLUSH:\n                       /* number of bytes to be flushed */\n-                       num1=BIO_ctrl(s->wbio,BIO_CTRL_INFO,0,NULL);\n+                       num1=BIO_ctrl(s->wbio,BIO_CTRL_WPENDING,0,NULL);\n                       if (num1 > 0)\n                               {\n                               s->rwstate=SSL_WRITING;\n\n\n--- ssl_engine_io.c-    2009-06-17 20:48:19.000000000 +0200\n+++ ssl_engine_io.c     2009-06-17 17:41:07.000000000 +0200\n@@ -260,10 +260,10 @@\n      case BIO_CTRL_SET_CLOSE:\n        bio->shutdown = (int)num;\n        break;\n-      case BIO_CTRL_WPENDING:\n+      case BIO_CTRL_PENDING:\n        ret = 0L;\n        break;\n-      case BIO_CTRL_PENDING:\n+      case BIO_CTRL_WPENDING:\n        ret = (long)(outctx->blen + outctx->length);\n        break;\n      case BIO_CTRL_FLUSH:\n\n\nthe change in openssl is to modify the BIO_ctrl function used in the flush check to BIO_CTRL_WPENDING: That call on the BIO_f_buffer returns either number of buffer outgoing bytes (similar to BIO_CTRL_INFO) or if zero calls BIO_CTRL_WPENDING on the next_bio (e.g. mod_ssl's filter_out BIO). In the there is no BIO_f_buffer (e.g. when the SSL renegotiate ciphers request is sent) s3_srvr will directly call BIO_CTRL_WPENDING on the filter_out BIO. Unfortunately it looks like BIO_CTRL_PENDING and BIO_CTRL_WPENDING are reversed in ssl_engine_io.c:  so while I've seen the patch overall appears to work without problem it would need to be applied to mod_ssl before or at the same time as openssl. It also has the effect of changing the observed behavior for any application providing their own BIO: WPENDING is called rather than BIO_CTRL_INFO. Possibly the SSL3_ST_SW_FLUSH BIO_ctrl check in s3_srvr.c could be explicitly made up of a BIO_CTRL_INFO call, and then a further WPENDNING call only if zero bytes are returned.\n\nInterestingly in the above example the stall would be avoided with only a change in bio_filter_out_write(); to buffer bytes up to 8192, not 8191 bytes as current check does: But this relies on the BIO_f_buffer size being 4096 bytes, and there is still an apparent sequence of writes possible to leave the BIO_f_buffer empty but the filter_out BIO full.\n\nDavid", "id": 128080, "time": "2009-06-19T04:36:08Z", "creator": "David.Smith@cern.ch", "creation_time": "2009-06-19T04:36:08Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 46952, "text": "Superb analysis, thanks David.  Your proposed change to bio_filter_out_ctrl() makes sense to me.", "id": 128166, "time": "2009-06-23T01:36:18Z", "creator": "jorton@redhat.com", "creation_time": "2009-06-23T01:36:18Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "David.Smith@cern.ch", "attachment_id": null, "text": "Hello Joe. We have an RT ticket (#1949) open with openssl for the same problem; I've alerted them there is more detail and the test case here. I hope they will consider the openssl/crypto suggestion and give some feedback.", "id": 128194, "time": "2009-06-23T08:13:43Z", "bug_id": 46952, "creation_time": "2009-06-23T08:13:43Z", "is_private": false}, {"count": 11, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 128196, "time": "2009-06-23T08:46:55Z", "bug_id": 46952, "creation_time": "2009-06-23T08:46:55Z", "text": "I've committed your fix in r787722.\n\nIt doesn't look like this will make any different to existing OpenSSL implementations - I can't see anywhere significant in ssl/ which is calling BIO_pending, BIO_wpending, or BIO_ctrl with _PENDING/_WPENDING similarly."}, {"count": 12, "tags": [], "bug_id": 46952, "attachment_id": null, "text": "For reference: http://marc.info/?l=openssl-dev&m=124575128524176&w=2\n\nI've committed a change to have mod_ssl flush pending output unconditionally in r788715, which has been confirmed to fix this issue.\n\nThanks again for your work on this, David.", "id": 128322, "time": "2009-06-26T07:24:21Z", "creator": "jorton@redhat.com", "creation_time": "2009-06-26T07:24:21Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 46952, "attachment_id": null, "text": "(In reply to comment #12)\n> For reference: http://marc.info/?l=openssl-dev&m=124575128524176&w=2\n> \n> I've committed a change to have mod_ssl flush pending output unconditionally in\n> r788715, which has been confirmed to fix this issue.\n> \n> Thanks again for your work on this, David.\n\nIs there some reason this hasn't been backported to 2.2.X?", "id": 133958, "time": "2010-01-26T09:44:49Z", "creator": "steve@openssl.org", "creation_time": "2010-01-26T09:44:49Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 46952, "attachment_id": null, "text": "Does anyone have an update on this issue? We hit this exact issue on both firefox and IE when using SSLVerifyClient on a particular location directive. It is reproducable every time. Shrinking the CA Size to < 200k helped for the most part, but there are still cases where we get the renegotiation error.\n\nWe are running a slightly customized build of Apache 2.2.15 and OpenSSL 0.9.8.k\nThe issue can be reproduced easily with the binaries on httpd.apache.org with the OpenSSL they ship as well.\n\nBasically here is the issue.\n\nca-bundle.crt is 253k with a hundred or so CA's in it (generated from Mozilla certdata.txt)\n\n1. User connects to https://server/logonx509 via IE or Firefox\n2. URL is protected using this directive:\n\t<location logonx509>\n\t\tSSLOptions +StdEnvVars +ExportCertData\n\t\tSSLRequireSSL\n\t\tSSLVerifyClient require\n\t\tSSLVerifyDepth 10\n\t\tRequestHeader set SSL_CLIENT_CERT \"%{SSL_CLIENT_CERT}e\"\n\t</location>\n3. Firefox connects will prompt for smartcard pin, authenticate then fail on re-negotiation.\n4. IE connects will prompt for smartcard pin, authenticate then fail on re-negotiation.\n\n\nShrinking CA size will greatly help, but not always.\n\nTypical error in our apache ssl error logs is:\n\nThu May 13 10:53:49 2010] [debug] ssl_engine_io.c(1893): OpenSSL: I/O error, 5 bytes expected to read on BIO#7d7d480 [mem: 7dd72e8]\n[Thu May 13 10:53:49 2010] [debug] ssl_engine_kernel.c(1903): OpenSSL: Exit: error in SSLv3 read client certificate A\n[Thu May 13 10:53:49 2010] [error] [client x.x.x.x] Re-negotiation handshake failed: Not accepted by client!?, referer: https://x.x.x.x/sessionmanager/login.jsp?back=https%3a%2f%2fx.x.x.x%2fem\n\nI've reviewed this thread in depth and am not sure it resolves all of the issues. Any help appreciated here.", "id": 136843, "time": "2010-05-13T16:25:51Z", "creator": "steve.berube@hp.com", "creation_time": "2010-05-13T16:25:51Z", "is_private": false}, {"count": 15, "tags": [], "creator": "steve.berube@hp.com", "attachment_id": null, "text": "Does anyone have an update on this issue? We hit this exact issue on both firefox and IE when using SSLVerifyClient on a particular location directive. It is reproducable every time. Shrinking the CA Size to < 200k helped for the most part, but there are still cases where we get the renegotiation error.\n\nWe are running a slightly customized build of Apache 2.2.15 and OpenSSL 0.9.8.k\nThe issue can be reproduced easily with the binaries on httpd.apache.org with the OpenSSL they ship as well.\n\nBasically here is the issue.\n\nca-bundle.crt is 253k with a hundred or so CA's in it (generated from Mozilla certdata.txt)\n\n1. User connects to https://server/logonx509 via IE or Firefox\n2. URL is protected using this directive:\n\t<location logonx509>\n\t\tSSLOptions +StdEnvVars +ExportCertData\n\t\tSSLRequireSSL\n\t\tSSLVerifyClient require\n\t\tSSLVerifyDepth 10\n\t\tRequestHeader set SSL_CLIENT_CERT \"%{SSL_CLIENT_CERT}e\"\n\t</location>\n3. Firefox connects will prompt for smartcard pin, authenticate then fail on re-negotiation.\n4. IE connects will prompt for smartcard pin, authenticate then fail on re-negotiation.\n\n\nShrinking CA size will greatly help, but not always.\n\nTypical error in our apache ssl error logs is:\n\nThu May 13 10:53:49 2010] [debug] ssl_engine_io.c(1893): OpenSSL: I/O error, 5 bytes expected to read on BIO#7d7d480 [mem: 7dd72e8]\n[Thu May 13 10:53:49 2010] [debug] ssl_engine_kernel.c(1903): OpenSSL: Exit: error in SSLv3 read client certificate A\n[Thu May 13 10:53:49 2010] [error] [client x.x.x.x] Re-negotiation handshake failed: Not accepted by client!?, referer: https://x.x.x.x/sessionmanager/login.jsp?back=https%3a%2f%2fx.x.x.x%2fem\n\nI've reviewed this thread in depth and am not sure it resolves all of the issues. Any help appreciated here.", "id": 136844, "time": "2010-05-13T16:26:18Z", "bug_id": 46952, "creation_time": "2010-05-13T16:26:18Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "steve.berube@hp.com", "text": "One more update\nUsing apache 2.2.15 and openssl 1.0.0 the error we get has a bit more info\n\n[Thu May 13 16:51:56 2010] [debug] ssl_engine_kernel.c(1903): OpenSSL: Exit: error in SSLv3 flush data\n[Thu May 13 16:51:56 2010] [error] [client x.x.x.x] Re-negotiation handshake failed: Not accepted by client!?, referer: https://x.x.x.x/sessionmanager/login.jsp?back=https%3a%2f%2fx.x.x.x%2fconsole%2f\n[Thu May 13 16:52:03 2010] [debug] ssl_engine_io.c(1893): OpenSSL: I/O error, 5 bytes expected to read on BIO#14d33f8 [mem: 15fe15b]\n[Thu May 13 16:52:03 2010] [info] [client 2002:10d5:7868::10d5:7868] (OS 10060)A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.  : SSL input filter read failed.\n[Thu May 13 16:52:03 2010] [debug] ssl_engine_kernel.c(1884): OpenSSL: Write: SSL negotiation finished successfully\n[Thu May 13 16:52:03 2010] [info] [client 2002:10d5:7868::10d5:7868] Connection closed to child 242 with standard shutdown (server qanj318.americas.hpqcorp.net:443)", "count": 16, "id": 136845, "time": "2010-05-13T16:53:55Z", "bug_id": 46952, "creation_time": "2010-05-13T16:53:55Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "litmaath@cern.ch", "text": "\nHi Steve,\na workaround for current/older versions of httpd/openssl is to put\na lot of _dummy_ CAs on the server.  That is what we do for now,\nsince it will be a while before we can rely on patched versions\nbeing supplied by the distributions that matter to us.\nWe constructed an rpm with 50 dummy CAs that are sufficient to\nget us beyond the zone of trouble, as we have about 90 real CAs\nthat we need to support.  The dummy-ca-certs-20090630-1.noarch.rpm\nis available here:\n\nhttp://glitesoft.cern.ch/LCG-CAs/current/RPMS.production/\n\nSee comment at the end of this page:\n\nhttp://grid-deployment.web.cern.ch/grid-deployment/lcg2CAlist.html", "count": 17, "id": 136846, "time": "2010-05-13T17:04:55Z", "bug_id": 46952, "creation_time": "2010-05-13T17:04:55Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 46952, "is_private": false, "count": 18, "id": 136920, "time": "2010-05-17T14:58:30Z", "creator": "jorton@redhat.com", "creation_time": "2010-05-17T14:58:30Z", "text": "The fix for this has been merged to 2.2.x."}, {"attachment_id": null, "tags": [], "creator": "jorton@redhat.com", "text": "I forgot: the fix for this specific issue is in 2.2.15.\n\nIf you are seeing reneg failures with 2.2.15 it is likely to be related to the fixes for CVE-2009-3555.  Please contact users@httpd.apache.org in the first instance for help diagnosing the issue.", "count": 19, "id": 136921, "time": "2010-05-17T15:08:28Z", "bug_id": 46952, "creation_time": "2010-05-17T15:08:28Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "pahuja@adobe.com", "text": "(In reply to comment #19)\n> I forgot: the fix for this specific issue is in 2.2.15.\n> \n> If you are seeing reneg failures with 2.2.15 it is likely to be related to the\n> fixes for CVE-2009-3555.  Please contact users@httpd.apache.org in the first\n> instance for help diagnosing the issue.\n\nI am not able to get around this problem for Apache 2.2.17 (with openssl 0.9.8o) , 2.2.19 (with openssl 0.9.8r) and 2.2.19 (with openssl 1.0.0d) windows server for ios clients. Strangely the Linux server works fine but the windows version shows the same problem with ios clients (I am able to get it working for the desktop browsers, openssl -s_client and ios client with Apache on linux). Could there be some issue on ios client or somehow Apache on windows is not flushing data even thought the openssl is forcing a flush?", "count": 20, "id": 147800, "time": "2011-07-06T17:46:58Z", "bug_id": 46952, "creation_time": "2011-07-06T17:46:58Z", "is_private": false}, {"count": 21, "text": "FWIW, there is also a report in Debian about this issue still affecting 2.2.16:\n\nhttp://bugs.debian.org/cgi-bin/bugreport.cgi?bug=630888\n\nBut I haven't looked into it.", "bug_id": 46952, "is_private": false, "id": 147802, "time": "2011-07-06T21:09:03Z", "creator": "sf@sfritsch.de", "creation_time": "2011-07-06T21:09:03Z", "tags": [], "attachment_id": null}, {"count": 22, "text": "(In reply to comment #20)\n> (In reply to comment #19)\n> > I forgot: the fix for this specific issue is in 2.2.15.\n> > \n> > If you are seeing reneg failures with 2.2.15 it is likely to be related to the\n> > fixes for CVE-2009-3555.  Please contact users@httpd.apache.org in the first\n> > instance for help diagnosing the issue.\n> I am not able to get around this problem for Apache 2.2.17 (with openssl\n> 0.9.8o) , 2.2.19 (with openssl 0.9.8r) and 2.2.19 (with openssl 1.0.0d) windows\n> server for ios clients. Strangely the Linux server works fine but the windows\n> version shows the same problem with ios clients (I am able to get it working\n> for the desktop browsers, openssl -s_client and ios client with Apache on\n> linux). Could there be some issue on ios client or somehow Apache on windows is\n> not flushing data even thought the openssl is forcing a flush?\n\nHello,\n\nI also have that problem under Windows Server 2003 (haven't been able to test it on a different version/OS). I am currently with 2.2.17 (win32) and OpenSSL 0.9.8o and I will also test with latest stable versions.\nYour talking about data flush? Is it something that can be done manually to restore temporarly the services? I saw there was a patch release but doesn't seem to resolve the issue. This patch is included in 2.2.17 or higher?\n\nFYI, here's the error I have in the apache logs.\n---\n[Fri Jun 03 13:46:45 2011] [info] Subsequent (No.100) HTTPS request received for child 970 (server genesys:443)\n[Fri Jun 03 13:46:45 2011] [debug] ssl_engine_io.c(1708): OpenSSL: I/O error, 5 bytes expected to read on BIO#108da8d8 [mem: 10514300]\n[Fri Jun 03 13:46:45 2011] [info] (OS 10060)A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.  : SSL input filter read failed.\n[Fri Jun 03 13:46:45 2011] [debug] ssl_engine_kernel.c(1749): OpenSSL: Write: SSL negotiation finished successfully\n[Fri Jun 03 13:46:45 2011] [info] Connection to child 956 closed with standard shutdown(server genesys:443, client 172.26.69.60)\n---\n\nThank you.", "bug_id": 46952, "is_private": false, "id": 148041, "time": "2011-07-20T16:29:58Z", "creator": "keven.boudreau@videotron.com", "creation_time": "2011-07-20T16:29:58Z", "tags": [], "attachment_id": null}, {"count": 23, "text": "Try using a fully qualified domain name as CN of the server certificate.\n\n--Puneet\n\n(In reply to comment #22)\n> (In reply to comment #20)\n> > (In reply to comment #19)\n> > > I forgot: the fix for this specific issue is in 2.2.15.\n> > > \n> > > If you are seeing reneg failures with 2.2.15 it is likely to be related to the\n> > > fixes for CVE-2009-3555.  Please contact users@httpd.apache.org in the first\n> > > instance for help diagnosing the issue.\n> > I am not able to get around this problem for Apache 2.2.17 (with openssl\n> > 0.9.8o) , 2.2.19 (with openssl 0.9.8r) and 2.2.19 (with openssl 1.0.0d) windows\n> > server for ios clients. Strangely the Linux server works fine but the windows\n> > version shows the same problem with ios clients (I am able to get it working\n> > for the desktop browsers, openssl -s_client and ios client with Apache on\n> > linux). Could there be some issue on ios client or somehow Apache on windows is\n> > not flushing data even thought the openssl is forcing a flush?\n> \n> Hello,\n> \n> I also have that problem under Windows Server 2003 (haven't been able to test\n> it on a different version/OS). I am currently with 2.2.17 (win32) and OpenSSL\n> 0.9.8o and I will also test with latest stable versions.\n> Your talking about data flush? Is it something that can be done manually to\n> restore temporarly the services? I saw there was a patch release but doesn't\n> seem to resolve the issue. This patch is included in 2.2.17 or higher?\n> \n> FYI, here's the error I have in the apache logs.\n> ---\n> [Fri Jun 03 13:46:45 2011] [info] Subsequent (No.100) HTTPS request received\n> for child 970 (server genesys:443)\n> [Fri Jun 03 13:46:45 2011] [debug] ssl_engine_io.c(1708): OpenSSL: I/O error, 5\n> bytes expected to read on BIO#108da8d8 [mem: 10514300]\n> [Fri Jun 03 13:46:45 2011] [info] (OS 10060)A connection attempt failed because\n> the connected party did not properly respond after a period of time, or\n> established connection failed because connected host has failed to respond.  :\n> SSL input filter read failed.\n> [Fri Jun 03 13:46:45 2011] [debug] ssl_engine_kernel.c(1749): OpenSSL: Write:\n> SSL negotiation finished successfully\n> [Fri Jun 03 13:46:45 2011] [info] Connection to child 956 closed with standard\n> shutdown(server genesys:443, client 172.26.69.60)\n> ---\n> \n> Thank you.", "bug_id": 46952, "is_private": false, "id": 148042, "time": "2011-07-20T16:37:55Z", "creator": "pahuja@adobe.com", "creation_time": "2011-07-20T16:37:55Z", "tags": [], "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 46952, "attachment_id": null, "id": 148083, "time": "2011-07-22T12:31:31Z", "creator": "jorton@redhat.com", "creation_time": "2011-07-22T12:31:31Z", "is_private": false, "text": "There is not enough data in comments since this bug was reopened to be able to diagnose any new bug.\n\nI suggest those seeing problems with mod_ssl first try to resolve these via the users@ mailing list: http://httpd.apache.org/lists.html#http-users\n\nIf you can diagnose a further bug with an httpd \"hang\" during an SSL handshake you need to provide at least:\n\na) debug-level log output where the timestamps clearly show a hang, and/o\nb) network traces and strace output, along with command-line client output.\nc) openssl and httpd version"}]
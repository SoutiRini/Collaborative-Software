[{"count": 0, "tags": [], "bug_id": 57619, "attachment_id": null, "is_private": false, "id": 181247, "time": "2015-02-23T09:29:12Z", "creator": "jaroslav@kamenik.cz", "creation_time": "2015-02-23T09:29:12Z", "text": "I have inspected running tomcat containing two webapps with Eclipse Memory Analyser and have found lots of same instances of String. For example\n\n14300x \"jar\"\n3100x \"/home/xxxx/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp2/wtpwebapps/XXXXXXXX/WEB-INF/lib/AppXXXXXXX.jar\"\n\nlots of similar long paths to other jars.\n\nIt is just few MBs of memory, but it could help a little to merge them somehow."}, {"count": 1, "tags": [], "bug_id": 57619, "attachment_id": null, "id": 181282, "time": "2015-02-23T22:32:46Z", "creator": "markt@apache.org", "creation_time": "2015-02-23T22:32:46Z", "is_private": false, "text": "No analysis provided to suggest the proposed merging is even possible. (Chances are it isn't without a lot of complexity else the JVM would have already done it.)"}, {"count": 2, "tags": [], "bug_id": 57619, "attachment_id": null, "is_private": false, "id": 181310, "time": "2015-02-24T20:00:43Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-24T20:00:43Z", "text": "I tracked-down a bunch of similar issues in our own application several years ago, and it turned out that the application framework (Struts 1, in our case), was the culprit. We never found that Tomcat was a significant source of \"duplicate\" strings."}, {"count": 3, "tags": [], "bug_id": 57619, "attachment_id": null, "is_private": false, "id": 201958, "time": "2017-11-07T07:45:50Z", "creator": "dmitri_blinov@mail.ru", "creation_time": "2017-11-07T07:45:50Z", "text": "I have found the similar simptoms that the multiple \"jar\" strings are allocated by tomcat WebappClassLoader. The problem stems from usage of java.net.URL(String spec) constructor for ResourceEntry. The java.net.URL(String) parses the source and splits the \"scheme\" part, and by forcibly converting it toLowerString a separate copy of \"jar\" string is created for each new ResourceEntry. The problem can be solved by using different java.net.URL(String protocol, String host, int port, String file) constructor, where \"jar\" can by passed as a constant which could be shared by all instances of created URL classes. \n\nI have created a small home test for Tomcat 7.0.82, which by means of visualvm/heapdump showed that \"jar\" strings are realy shared among different instances of URLs.\n\nThe code for example for Tomcat 7.0.82 is located in org.apache.tomcat.buf.UriUtil.java, the commented lines are from previous version:\n\n    public static URL buildJarUrl(String fileUrlString, String entryPath) throws MalformedURLException {\n        String safeString = makeSafeForJarUrl(fileUrlString);\n        StringBuilder sb = new StringBuilder();\n        // sb.append(\"jar:\");\n        sb.append(safeString);\n        sb.append(\"!/\");\n        if (entryPath != null) {\n            sb.append(makeSafeForJarUrl(entryPath));\n        }\n        // return new URL(sb.toString());\n        return new URL(\"jar\", null, -1, sb.toString());\n    }"}, {"count": 4, "tags": [], "bug_id": 57619, "attachment_id": null, "is_private": false, "id": 203107, "time": "2018-01-05T14:44:08Z", "creator": "markt@apache.org", "creation_time": "2018-01-05T14:44:08Z", "text": "Thanks for the patch - it looks reasonable to me. My testing shows 7.0.x benefits from this more, possibly due to the resources refactoring in 8.0.x onwards.\n\nFixed in:\n- trunk for 9.0.3 onwards\n- 8.5.x for 8.5.25 onwards\n- 8.0.x for 8.0.49 onwards\n- 7.0.x for 7.0.84 onwards"}]
[{"count": 0, "tags": [], "bug_id": 10896, "attachment_id": null, "is_private": false, "id": 19685, "time": "2002-07-17T15:27:48Z", "creator": "fengyun@jetic.org", "creation_time": "2002-07-17T15:27:48Z", "text": "//org.apache.jasper.compiler.ParserController\n//\n    private void figureOutJspDocument(String file,\n                                      String encoding,\n                                      InputStreamReader reader)\n        throws JasperException\n    {\n        JspReader jspReader;\n        try {\n            jspReader = new JspReader(ctxt, file, encoding, reader,\n                compiler.getErrorDispatcher());\n        }\n        catch (FileNotFoundException ex) {\n            throw new JasperException(ex);\n        }\n        jspReader.setSingleFile(true);\n        Mark startMark = jspReader.mark();\n\n        // Check for the jsp:root tag\n        // No check for xml prolog, since nothing prevents a page\n        // to output XML and still use JSP syntax.\n        jspReader.reset(startMark);\n        Mark mark = jspReader.skipUntil(JSP_ROOT_TAG);\n        if (mark != null) {\n            isXml = true;\n        }\n        else {\n            isXml = false;\n        }\n\n        newEncoding = null;\n\n        // Figure out the encoding of the page\n        // FIXME: We assume xml parser will take care of\n        // encoding for page in XML syntax. Correct?\n        if (!isXml) {\n            jspReader.reset(startMark);\n            while (jspReader.skipUntil(\"<%@\") != null) {\n                jspReader.skipSpaces();\n                if (jspReader.matches(\"page\")) {\n//Bug: The next line is no use.\n//                  jspReader.advance(4);"}, {"count": 1, "tags": [], "bug_id": 10896, "text": "Fixed.  Thanks for the patch.", "id": 19799, "time": "2002-07-18T18:05:45Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-07-18T18:05:45Z", "is_private": false, "attachment_id": null}]
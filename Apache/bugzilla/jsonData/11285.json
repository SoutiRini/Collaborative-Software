[{"count": 0, "tags": [], "creator": "kfl@f-online.com", "text": "We are using a SimpleSocketServer that receives all logging requests and all \ncomponents use the SocketAppender provided with log4j version 1.2.4.\nFrequently, we need to update the server properties file to add new categories. \nJust after that we restart the socket server.\nAll components though are unable to connect to the new server immediately, \nmaking us loose several important logging events.\nAfter a small check in the code, I realised we could set the ReconnectionDelay \nto a relatively small value (less than the default of 30 seconds) and be able \nto reduce the number of logging events we loose.\nIn any case though, even when the ReconnectionDelay is set to 1, we will loose \nthe current event, which is not acceptable in our case. \nIs it possible to try ONCE to reconnect and if it fails, then sleep for \nReconnectionDelay milliseconds and wait till the server is available?", "id": 20406, "time": "2002-07-30T10:44:09Z", "bug_id": 11285, "creation_time": "2002-07-30T10:44:09Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "mwomack@apache.org", "attachment_id": null, "text": "I think it will be very tough to guarantee that log messages will not \nget \"dropped\" when a connection is down/lost.  You don't want to tie up the \nappender to reconnect when it is trying to append the event because that will \naffect the performance of the caller.  I think that to better guarantee the \ndelivery of log messages and still maintain good performance one would need to \ncreate a buffer where messages get stored while the connection is down.  Then, \nwhen the connection comes back up, the contents of the buffer get sent.", "id": 20440, "time": "2002-07-30T18:27:21Z", "bug_id": 11285, "creation_time": "2002-07-30T18:27:21Z", "is_private": false}, {"count": 2, "tags": [], "creator": "kfl@f-online.com", "text": "I have to state before anything else, that the use of the SocketAppender is a \nnecessity for us, as several applications are writing to similar log files. We \nhad big problems in the past when all those applications were opening the same \nfile for writing.\n\nI agree in general with your comments, but in our case a small modification \nwould save us from loosing ANY message. What you suggest demands more work and \nmay be memory consuming (when do you stop buffering messages?).\nBoth solutions are fine by me, as long as we do something for it.\nI can even suggest one more solution:\n   keep the current thread that tries to connect to the server, but increase \nthe sleep time every time you fail. Then, I can put a very small sleep for the \nfirst effort - which in my case will immediately succeed - and still not get \nthousands of errors when the server is REALLY down.\n\nOne just final remark: concerning performance, if someone considers it a \nbottleneck, then he may well use the AsynchAppender to offload the main \napplication. In our case, it would still not solve the problem.", "id": 20444, "time": "2002-07-30T20:48:12Z", "bug_id": 11285, "creation_time": "2002-07-30T20:48:12Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 11285, "attachment_id": null, "id": 68354, "time": "2004-12-13T16:23:43Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-13T16:23:43Z", "is_private": false, "text": "Set a very small reconnection delay.  If your server really is available right \naway, no problem."}]
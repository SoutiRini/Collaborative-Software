[{"count": 0, "tags": [], "text": "Here\u2019s the situation as it stands today and what can be done to solve it. I\u2019ll \ntry to keep this short.\n\nRunning configuration:\n\n\u2022\tRunning on Linux Red-Hat Ent 3\n\u2022\t1 X F5 load balancer and hardware SSL box.\n\u2022\t5 X Apache 1.3.33/mod_jk 1.2.14\n\u2022\t6 X JBoss 4.0.0/Tomcat 5.0.28 using the AJP13 connector. \n\u2022\tOracle 9i\n\nOur production environment hosts a number of applications, each with different \nload and usage patterns. Our problem comes from the fact that it is difficult \nto find a web farm configuration that will satisfy every application. For \nreasons I will not explain here, we cannot have a dedicated web farm for each \napplication.\n\nThis is what we think is happening in our production environment based on \ntests ran in UAT (User Acceptance Tests) and literature from the Apache and \nTomcat products. This is all pretty new to us so if someone can provide hard \nfacts, you are more than welcome.\n\n1.\tThe 1.3 generation of Apache web servers will spawn a child process to \nhandle an HTTP request. Only one HTTP request at a time can be processed by \nthat child. \n2.\tAs the load increases on the web server, additional child processes \nwill be spawned to concurrently serve the requests. There is a default limit \nto how many child processes can be forked. That limit defaults to 256 but has \nbeen changed in production to 16384. This is the MaxClients directive. It \nseems that production really needs the 16384 value instead of the 256 default. \nWith 256, our web servers were rejecting connections and could not support the \nload generated by all of our clients.\n3.\tTo prevent latency, Apache will maintain a maximum of 100 spare child \nprocesses alive. Spare means that they are not serving requests. Once reached, \nthat number of spare servers does not seem to decrease. This is the number we \nsee in our tests in UAT where 201 threads remain active in Tomcat. This is the \n100 spare children connections * 2 web server plus accept() thread. \n4.\tIf a request needs to be forwarded to Tomcat/JBoss (dynamic pages), \nthe child process mod_jk module will instantiate a socket connection to the \najp13 connector in Tomcat. \n5.\tTomcat will accept the connection and create a thread to serve it. \nConnections will be accepted up to a concurrent maximum of 1200. This upper \nvalue has been set by us. \n6.\tTomcat will reject connections when the maximum is reached. JBoss \n4.0.0 has a known issue where the server will die when the maximum is reached. \nThis has been fixed in 4.0.2. \n7.\tA connection could potentially be recycled in mod_jk (recycle_timeout) \nif no activity occurs thru the connection. However, any requests to Tomcat \nfrom any user session-bound to that Tomcat instance could go thru the \nconnection, thus keeping it active. Recycling does not seem to occur. We use a \nrecycle_timeout value of 300.\n8.\tThe fact that the production web servers can potentially serve up to \n16384 concurrent requests make it possible for a web server to instantiate an \nalmost infinite number of connections to Tomcat and nuke it. \n9.\tTomcat can then become overloaded with connections. If a valid HTTP \nrequest comes thru Apache and is routed to a child process that has not yet \nmade a connection to Tomcat, the connection could be impossible if Tomcat has \nalready accepted its 1200 limit. \n10.\tIn that case, mod_jk could potentially fail over to another Tomcat. \nThe user would however loose his session.\n11.\tThe recycle_timeout and  cache_size options are of no use to us \nbecause too many web server children are created to serve the company load. \nThus, many different routes can be taken by requests targeted to our \napplication, keeping all the connection alive.\n12.\tWe tried really small recycle_timeout values (e.g. 20) with no effect. \nA netstat reveals that connections remain ESTABLISHED. \n13.\tThe maxRequestsPerChild setting is set to 0 in PROD. It means that \nApache child processes will never die, unless you reach the maxSpareServers \nvalue. Thus, at least 100 connections per web server will always remain \nactively connected to Tomcat. A > 0 value would at least guarantee that a \nchild process would eventually die, freeing Tomcat connections and releasing \nback leaked memory to the OS. \n\nIt\u2019s hard to see a path out of this one.\n\nOne solution would be to reduce the MaxClients Apache config back to 256. This \nwould mean that a single instance of Tomcat would not be hit by more than 256 \n* 5 = 1280 (5 is the web farm size) connections. Our current jvm settings \n(heap + thread stack sizes) would allow us to do it. We would also need to \nbump our current 1200 limit a bit higher. However, this solution if not \ncompatible with other applications which have really high loads.\n\nSecond option would be to patch mod_jk so that connections are dropped as soon \nas the response has been received from Tomcat. Drawbacks include preventing us \nfrom upgrading to new releases (unless we re-apply the modifications), \nintroduce the risk of breaking something in this add-on, concentrate knowledge \nin the head of the person making the changes, introduce yet another component \nfor the prod people to know and manage. The overhead of a connection is \nprobably quite small but would need to be validated.\n\nFinally, having our own web farm would be another solution. However, this goes \nagainst Production master plan of having only one web farm for production.", "is_private": false, "id": 80510, "creator": "rgendron@taleo.com", "time": "2005-09-27T16:01:41Z", "bug_id": 36827, "creation_time": "2005-09-27T16:01:41Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 36827, "attachment_id": null, "id": 80511, "time": "2005-09-27T16:59:03Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2005-09-27T16:59:03Z", "is_private": false, "text": "Please witch over to tomcat-user for discussion. This is not a bug.\n\nFirst hints from my side: reduce to equal number of apache and tomcat instances,\nconfigure F5 with rule that sends URLs with session cookie or jsessionid in URL\nto the \"correct\" apache. Furthermore configure mod_jk, such that each apache\nsends requests without sessions to it's preferred tomcat partner.\n\nThat way almost all apache processes will connect to only one tomcat.\n\nIf you still need 16K apache processes per instance you are in trouble (maybe\nupgrade to apache 2), if you manage to handle the workload with 1K apache\nprocesses, 1K Threads in Tomcat should be OK.\n"}, {"count": 2, "tags": [], "creator": "yoavs@computer.org", "text": "As Rainer noted...", "id": 81094, "time": "2005-10-13T06:42:37Z", "bug_id": 36827, "creation_time": "2005-10-13T06:42:37Z", "is_private": false, "attachment_id": null}]
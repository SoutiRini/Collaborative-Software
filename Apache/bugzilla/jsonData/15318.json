[{"count": 0, "tags": [], "bug_id": 15318, "attachment_id": null, "is_private": false, "id": 27744, "time": "2002-12-12T16:36:18Z", "creator": "jstrachman@athenium.com", "creation_time": "2002-12-12T16:36:18Z", "text": "My understanding is that the ramp-up function is supposed to control in what \norder the threads get launched.  For some reason, even when I use large values \nfor the ramp-up, it still often starts them in seemingly random order, e.g. \nThread 1, then 3, then 2 will start.  This screws up things like HTML Parameter \nMask objects.  (I would imagine that Counters also will suffer the same problem \nbut I can't use 1.8 due to some silly bug.)\n\nHere's an example of the output:\n\nRunning the test!\n (The system cannot find the path specified)\n (The system cannot find the path specified)\nThread PFRClassicMode-1 started\nThread PFRClassicMode-2 started\nThread PFRClassicMode-4 started\nThread PFRClassicMode-3 started\nThread PFRClassicMode-5 started\nThread PFRClassicMode-6 started\nThread PFRClassicMode-7 started\nThread PFRClassicMode-8 started\nThread PFRClassicMode-9 started\nThread PFRClassicMode-10 started\n\nThere's a 15 second ramp-up, so I can't figure out why thread 4 starts before \nthread 3, and my userIDs get all screwed up."}, {"count": 1, "tags": [], "creator": "jsalvata@atg.com", "text": "Ramp-up should certainly assure that threads are started at the given pace, but\nI don't see why they should be started in a given order.\n\nAnyway, the \"userID screw-up\" described can be avoided by using variables such\nas the ${__threadNum},...\n\nResolving as INVALID.", "id": 29663, "time": "2003-01-18T17:11:16Z", "bug_id": 15318, "creation_time": "2003-01-18T17:11:16Z", "is_private": false, "attachment_id": null}]
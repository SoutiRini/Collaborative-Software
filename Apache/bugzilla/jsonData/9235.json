[{"count": 0, "tags": [], "creator": "cmills@silverstream.com", "attachment_id": null, "is_private": false, "id": 16389, "time": "2002-05-19T15:37:07Z", "bug_id": 9235, "creation_time": "2002-05-19T15:37:07Z", "text": "Hi,\n\nI'm new to FOP but have got FOP working from the command line and even from a \nservlet, but only when I pass the servlet the fo file.\n\nWhen I try and pass the servlet the XML and XSL files it just renders an empty \nPDF document.  I've added .pdf to the servlets URL but no difference.  This is \nIE 6.0 running on XP.\n\nI know the XML and XSL documents are ok because they work from the command \nline.  Below is the output from Tomcat server console:\n\nThanks\n\nDEBUG   10218   [fop     ] (): using SAX parser \norg.apache.xerces.parsers.SAXPar\nser\nINFO    10218   [fop     ] (): building formatting object tree\nDEBUG   10218   [fop     ] (): setting up fonts\nINFO    10218   [fop     ] (): [1]\nDEBUG   10218   [fop     ] (): Last page-sequence produced 1 pages.\nINFO    10218   [fop     ] (): Parsing of document complete, stopping renderer\nDEBUG   10218   [fop     ] (): Initial heap size: 2064Kb\nDEBUG   10218   [fop     ] (): Current heap size: 2159Kb\nDEBUG   10218   [fop     ] (): Total memory used: 95Kb\nDEBUG   10218   [fop     ] ():   Memory use is indicative; no GC was performed\nDEBUG   10218   [fop     ] ():   These figures should not be used comparatively\nDEBUG   10218   [fop     ] (): Total time used: 821ms\nDEBUG   10218   [fop     ] (): Pages rendererd: 1\nDEBUG   10218   [fop     ] (): Avg render time: 821ms/page"}, {"count": 1, "tags": [], "text": "Is there any way that the code being used to interact with FOP could be posted \nhere?  It would be exceedingly helpful in finding out what's going on.", "attachment_id": null, "bug_id": 9235, "id": 16402, "time": "2002-05-20T12:08:55Z", "creator": "raultman@fcci-group.com", "creation_time": "2002-05-20T12:08:55Z", "is_private": false}, {"count": 2, "tags": [], "text": "/*\n * $Id: FopServlet.java,v 1.4.2.1 2002/03/01 12:44:39 chrisg Exp $\n * Copyright (C) 2001 The Apache Software Foundation. All rights reserved.\n * For details on use and redistribution please refer to the\n * LICENSE file included with these sources.\n */\n\nimport java.io.*;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\nimport org.xml.sax.InputSource;\nimport org.xml.sax.XMLReader;\n\nimport org.apache.fop.apps.Driver;\nimport org.apache.fop.apps.Version;\nimport org.apache.fop.apps.*;\n\nimport org.apache.log.*;\n\n/**\n * Example servlet to generate a PDF from a servlet.\n * Servlet param is:\n * <ul>\n *   <li>fo: the path to a formatting object file to render\n * </ul>\n *\n * Example URL: http://servername/servlet/FopServlet?fo=readme.fo\n * Example URL: http://servername/servlet/FopServlet?\nxml=data.xml&xsl=format.xsl\n * Compiling: you will need \n * - servlet_2_2.jar\n * - fop.jar\n * - sax api\n * - logkit jar\n *\n * Running: you will need in the WEB-INF/lib/ directory:\n * - fop.jar\n * - batik.jar\n * - avalon-framework-4.0.jar\n * - logkit-1.0.jar\n * - xalan-2.0.0.jar\n */\npublic class FopServlet extends HttpServlet {\n    public static final String FO_REQUEST_PARAM = \"fo\";\n    public static final String XML_REQUEST_PARAM = \"xml\";\n    public static final String XSL_REQUEST_PARAM = \"xsl\";\n    Logger log = null;\n\n    public void doGet(HttpServletRequest request,\n                      HttpServletResponse response) throws ServletException {\n        if(log == null) {\n            Hierarchy hierarchy = Hierarchy.getDefaultHierarchy();\n            log = hierarchy.getLoggerFor(\"fop\");\n            log.setPriority(Priority.DEBUG);\n        }\n        try {\n            String foParam = request.getParameter(FO_REQUEST_PARAM);\n            String xmlParam = request.getParameter(XML_REQUEST_PARAM);\n            String xslParam = request.getParameter(XSL_REQUEST_PARAM);\n\t\t\t\n\t\t\tSystem.out.println(\"XML = (\" + xmlParam + \")\");\n\t\t\tSystem.out.println(\"XSL = (\" + xslParam + \")\");\n\n            if (foParam != null) {\n                FileInputStream file = new FileInputStream(foParam);\n                renderFO(new InputSource(file), response);\n            } else if((xmlParam != null) && (xslParam != null)) {\n                //InputHandler input = new XSLTInputHandler(new File\n(xmlParam), new File(xslParam));\n\t\t\t\tSystem.out.println(\"Before renderXML\");\n                renderXML(new File(xmlParam), new File(xslParam), response);\n            } else {\n                PrintWriter out = response.getWriter();\n                out.println(\"<html><head><title>Error</title></head>\\n\"+\n                            \"<body><h1>FopServlet Error</h1><h3>No 'fo' \"+\n                            \"request param given.</body></html>\");\n            }\n        } catch (ServletException ex) {\n            throw ex;\n        }\n        catch (Exception ex) {\n            throw new ServletException(ex);\n        }\n    }\n\n    /**\n     * renders an FO inputsource into a PDF file which is rendered\n     * directly to the response object's OutputStream\n     */\n    public void renderFO(InputSource foFile,\n                         HttpServletResponse response) throws ServletException \n{\n        try {\n\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n            response.setContentType(\"application/pdf\");\n\t\t\t//response.setContentType(\"text/html\");\n\n            Driver driver = new Driver(foFile, out);\n            driver.setLogger(log);\n            driver.setRenderer(Driver.RENDER_PDF);\n            driver.run();\t\t\t\n\n            byte[] content = out.toByteArray();\n\t\t\t\t\n\t\t\tresponse.setContentLength(content.length);\n            response.getOutputStream().write(content);\n            response.getOutputStream().flush();\n        } catch (Exception ex) {\n            throw new ServletException(ex);\n        }\n    }\n\n    public void renderXML(File inputXML, File inputXSL,\n                         HttpServletResponse response) throws ServletException \n{\n        try {\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n            response.setContentType(\"application/pdf\");\n\t\t\tInputHandler inputHandler = new XSLTInputHandler\n(inputXML, inputXSL);\n\t\t\tXMLReader parser = inputHandler.getParser();\n\t\t\t\n            Driver driver = new Driver();\n            driver.setLogger(log);\n            driver.setRenderer(Driver.RENDER_PDF);\n\t\t\t\n            driver.setOutputStream(out);\n            driver.render(parser, inputHandler.getInputSource());\n\n            byte[] content = out.toByteArray();\n            System.out.println(\"Length = (\" + content.length + \")\");\n\n            response.setContentLength(content.length);\n            response.getOutputStream().write(content);\n            response.getOutputStream().flush();\n        } catch (Exception ex) {\n            throw new ServletException(ex);\n        }\n    }\n\n    /**\n     * creates a SAX parser, using the value of org.xml.sax.parser\n     * defaulting to org.apache.xerces.parsers.SAXParser\n     *\n     * @return the created SAX parser\n     */\n    static XMLReader createParser() throws ServletException {\n        String parserClassName = System.getProperty(\"org.xml.sax.parser\");\n        if (parserClassName == null) {\n            parserClassName = \"org.apache.xerces.parsers.SAXParser\";\n        }\n\n        try {\n            return (XMLReader) Class.forName(\n                     parserClassName).newInstance();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n\n}\n", "attachment_id": null, "bug_id": 9235, "id": 16409, "time": "2002-05-20T12:52:13Z", "creator": "cmills@silverstream.com", "creation_time": "2002-05-20T12:52:13Z", "is_private": false}, {"count": 3, "tags": [], "creator": "oleg@tkachenko.com", "attachment_id": null, "is_private": false, "id": 26226, "time": "2002-11-13T19:43:31Z", "bug_id": 9235, "creation_time": "2002-11-13T19:43:31Z", "text": "Not enough information to identify the problem. Save generated pdf to a disk\nbefore sending it to a browser and check if it's ok. Excuse me, but I'll resovle\nthe bug as invalid, but feel free to reopen it if you think that's really FOP bug."}, {"count": 4, "tags": [], "bug_id": 9235, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156751, "time": "2012-04-01T13:52:10Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:52:10Z", "is_private": false, "attachment_id": null}]
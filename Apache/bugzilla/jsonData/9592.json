[{"count": 0, "tags": [], "creator": "jonwilmoth@hotmail.com", "attachment_id": null, "id": 17115, "time": "2002-06-03T22:28:32Z", "bug_id": 9592, "creation_time": "2002-06-03T22:28:32Z", "is_private": false, "text": "The problem lies in the existing org.apache.log4j.Hierarchy line 254.  The \nCategoryKey used to access the Logger instance cache only uses the \nString \"name\" param, which may only be a portion of the full category name if \na custom factory is used.  So if the cache is not empty for String name, it \nreturns the existing logger instance and does not call \nfactory.makeNewLoggerInstance(name) which may produce a category with a  \ndifferent name.  Assuming a custom factory's makeNewLoggerInstance(String) \nalways returns a Logger instance with the same category name given the same \nstring parameter, you could cache with a CategoryKey of \ncustomLoggerFactory.getClass().getName() + name.  However if \nfactory.makeNewLoggerInstance(\"myName\").getName().equals\n(factory.makeNewLoggerInstance(\"myName\").getName()) isn't true you still have \nthe same problem.  IMHO I think the caching needs to be put in the factory \nitself."}, {"count": 1, "tags": [], "bug_id": 9592, "attachment_id": 1995, "text": "Created attachment 1995\nJUnit Test Case demonstrating bug", "id": 17118, "time": "2002-06-03T22:35:54Z", "creator": "jonwilmoth@hotmail.com", "creation_time": "2002-06-03T22:35:54Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 9592, "attachment_id": 1996, "text": "Created attachment 1996\nSample Consumer of Logger.getLogger(String,LoggerFactory)", "id": 17119, "time": "2002-06-03T22:36:43Z", "creator": "jonwilmoth@hotmail.com", "creation_time": "2002-06-03T22:36:43Z", "is_private": false}, {"attachment_id": 1997, "tags": [], "bug_id": 9592, "is_private": false, "count": 3, "id": 17120, "time": "2002-06-03T22:37:24Z", "creator": "jonwilmoth@hotmail.com", "creation_time": "2002-06-03T22:37:24Z", "text": "Created attachment 1997\nCustom LoggerFactory which produces contatinated category names"}, {"count": 4, "tags": [], "creator": "ceki@apache.org", "text": "\nCan you explain what you are trying to in English for mortals please? What is \nthe context? Thank you.\n\n--\nCeki", "id": 17121, "time": "2002-06-03T22:40:01Z", "bug_id": 9592, "creation_time": "2002-06-03T22:40:01Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 9592, "attachment_id": null, "text": "Simplified description:\n\nLogger.getLogger(String,LoggerFactory) caches incorrectly.  If class A calls \nthis with 'foo' as the String param (and it's the first time the method's been \ncalled with 'foo'), the Logger instance for class A is cached.  When class B \nmakes the call with 'foo' string value, class A's logger instance is returned.", "id": 17122, "time": "2002-06-03T22:46:05Z", "creator": "jonwilmoth@hotmail.com", "creation_time": "2002-06-03T22:46:05Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 9592, "attachment_id": null, "is_private": false, "id": 17123, "time": "2002-06-03T22:51:14Z", "creator": "ceki@apache.org", "creation_time": "2002-06-03T22:51:14Z", "text": "\nYes, that is the intended behavior. The name of logger is determinant\nfactor not the class that calls for the logger's creation.  I am\nclosing this bug. If you wish to discuss it further please do so on\nlog4j-dev. Bugzilla is not the most appropriate means of\ncommunications to discuss enhacements. Thanks. \n-- \nCeki\n"}]
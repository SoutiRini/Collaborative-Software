[{"count": 0, "tags": [], "bug_id": 59797, "attachment_id": null, "id": 192119, "time": "2016-07-04T19:52:05Z", "creator": "markt@apache.org", "creation_time": "2016-07-04T19:52:05Z", "is_private": false, "text": "OpenSSL maintains a hash of recent errors per thread.\n\nThe way the tc-native code is written, a new entry is created for any thread that performs a TLS read or write.\n\nThe hash is never cleaned up so it grows indefinitely.\n\nThe greater the turn-over of threads (e.g. due to executor configuration or the use of async reads or writes on non-container threads), the greater the problem.\n\nWhile the leak has been observed, there are no known instances (so far) of it growing to the point where it causes problems.,\n\nFor full details see this thread:\nhttps://lists.apache.org/thread.html/6d61c7169e37841b594f10c99952a80a5bb65a42958d36dcc6f7b4ae@%3Cdev.tomcat.apache.org%3E"}, {"attachment_id": 34005, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 1, "id": 192120, "time": "2016-07-04T19:55:28Z", "bug_id": 59797, "creation_time": "2016-07-04T19:55:28Z", "text": "Created attachment 34005\nPatch to expose the thread cleaning method\n\nFor discussion..."}, {"count": 2, "text": "Created attachment 34006\nPatch to clean the thread on every access", "bug_id": 59797, "attachment_id": 34006, "id": 192121, "time": "2016-07-04T19:58:42Z", "creator": "markt@apache.org", "creation_time": "2016-07-04T19:58:42Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Created attachment 34007\nPatch that triggers cleaning via the thread pool", "id": 192122, "time": "2016-07-04T19:59:09Z", "bug_id": 59797, "creation_time": "2016-07-04T19:59:09Z", "attachment_id": 34007}, {"count": 4, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 192123, "time": "2016-07-04T20:15:07Z", "bug_id": 59797, "creation_time": "2016-07-04T20:15:07Z", "text": "The fix for the issue doesn't look very pretty."}, {"count": 5, "tags": [], "bug_id": 59797, "attachment_id": null, "id": 192124, "time": "2016-07-04T20:20:25Z", "creator": "markt@apache.org", "creation_time": "2016-07-04T20:20:25Z", "is_private": false, "text": "Just adding some notes...\n\nFixing it in Tomcat means an additional native call (relatively slow) for every call to clean the current thread.\n\nFixing it in native means a call to clean after every read or write which is far more often than necessary any may cause contention for the hash write lock.\n\nFixing it in the thread pool is good in that the calls to clean are minimized. But this excludes calls from non-container threads.\n\nThe problem goes away with OpenSSL 1.1.0 but that is not stable yet and probably won't be designated an LTS release.\n\nGiven how invasive the fixes look to be, I think Id prefer to think about this some more to see if a cleaner fix can be found."}, {"count": 6, "text": "The thread pool patch has RAT / checkstyle issues.\n\nThe native side patch has the following fragment:\n\n> #if (OPENSSL_VERSION_NUMBER < 0x10000000L) || defined(OPENSSL_USE_DEPRECATED)\n>     ERR_remove_state(0);\n> #elif (OPENSSL_VERSION_NUMBER < 0x10100000L)\n>     ERR_remove_thread_state(NULL);\n> #endif\n\nI do not understand \"|| defined(OPENSSL_USE_DEPRECATED)\" part of the above condition. I think that ERR_remove_thread_state() is the correct cleanup function and shall be used as soon as it is available, so the OPENSSL_USE_DEPRECATED part of the condition should be removed.\n\nMotivation:\n\n1. Looking into implementation of ERR_remove_state() in crypto/err/err.c of openssl-1.0.2d  it ignores its argument. I think such implementation is bad and should not be invoked.\n\n#ifndef OPENSSL_NO_DEPRECATED\nvoid ERR_remove_state(unsigned long pid)\n{\n    ERR_remove_thread_state(NULL);\n}\n#endif\n\n2. Deprecation of ERR_remove_state() is clearly mentioned in CHANGES file of openssl-1.0.2d as a change \"between 0.9.8n and 1.0.0  [29 Mar 2010]\". I see no reason to call the old function. Also OpenSSL 0.9.8 is no longer supported. Tomcat-Native 1.2.x requires OpenDDL 1.0.2+ (as documented in native/BUILDING file).\n\n\n(In reply to Mark Thomas from comment #5)\n> Fixing it in the thread pool is good in that the calls to clean are\n> minimized. But this excludes calls from non-container threads.\n\nERR_remove_thread_state() can be called with an explicit thread id. If we know ids for threads that completed execution (and are gc'ed) we can perform cleanup for them from a different thread.\n\nI think that monitoring of completed (gc'ed) threads can be performed with a WeakReference and a ReferenceQueue that is processed by a background thread.", "bug_id": 59797, "is_private": false, "id": 192158, "time": "2016-07-06T00:18:17Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-07-06T00:18:17Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 59797, "text": "(In reply to Konstantin Kolinko from comment #6)\n> ERR_remove_thread_state() can be called with an explicit thread id. If we\n> know ids for threads that completed execution (and are gc'ed) we can perform\n> cleanup for them from a different thread.\n> \n> I think that monitoring of completed (gc'ed) threads can be performed with a\n> WeakReference and a ReferenceQueue that is processed by a background thread.\n\nIf this is indeed possible and not fragile, it should be done this way: tricking each thread into calling the cleanup() method will either be badly-performing, error-prone, or both.", "id": 192183, "time": "2016-07-06T21:04:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-07-06T21:04:32Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 59797, "attachment_id": 34597, "id": 195885, "time": "2017-01-05T22:17:13Z", "creator": "apache@neworld.us", "creation_time": "2017-01-05T22:17:13Z", "is_private": false, "text": "Created attachment 34597\nNative only patch to release ssl errors on thread exit\n\nI took a look at how openssl implemented error releasing in 1.1, which now does it automatically and used that to implement similar behavior in tomcat-native.\n\nOn windows clean up is invoked on thread detach and on other platforms a thread local with a destructor is used. Whenever ERR_clear_error or ERR_get_error is called the thread local is set. When the thread exits the destructor will be invoked on any thread which does not have a NULL value for the thread local.\n\nI tested this with openssl 1.0.2. I compiled tomcat native against 1.1.0 but I have not done any windows testing since I don't have a windows build system."}, {"count": 9, "tags": [], "bug_id": 59797, "text": "Created attachment 34686\nNative patch to handle releasing ssl errors on thread exit\n\nSame as previous patch but added error handling around creating the thread local.", "id": 196509, "time": "2017-01-27T20:31:49Z", "creator": "apache@neworld.us", "creation_time": "2017-01-27T20:31:49Z", "is_private": false, "attachment_id": 34686}, {"count": 10, "tags": [], "bug_id": 59797, "attachment_id": null, "id": 196802, "time": "2017-02-07T10:24:40Z", "creator": "markt@apache.org", "creation_time": "2017-02-07T10:24:40Z", "is_private": false, "text": "Thanks for the patch. It has been applied (with some changes on the Windows side - primarily to handle x64 and to avoid a crash on JVM termination) to 1.2.x and will be included in 1.2.11 onwards."}]
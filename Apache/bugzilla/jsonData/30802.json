[{"count": 0, "tags": [], "text": "I created an XSD which contains elements with same name but different complex \ntypes. For example, the high level XSD looks like -\n\n<xs:element name = \"Field\" type = \"ComplexType1\">\n<xs:element name = \"Field\" type = \"ComplexType2\" minOccurs=0>\n<xs:element name = \"Field\" type = \"ComplexType3\">\n\n- while the corresponding XML would be -\n\n<Field type=\"Field1\">\n<Field type=\"Field2\">\n<Field type=\"Field3\">\n\nIf I validate this XML against the XSD it works fine.\nBut if I remove the second element from the XML as shown below as it's \nminOccurs = 0\n\n<Field type=\"Field1\">\n<Field type=\"Field3\">\n\nand try to validate it against the XSD it throws an exception as shown below\n\norg.xml.sax.SAXParseException: cvc-complex-type.3.1: Value 'Field3' of attribute\n 'name' of element 'Field' is not valid with respect to the corresponding attrib\nute use. Attribute 'name' has a fixed value of 'Field2'.\n\nBut this works fine with XML SPY without any problems.\n\nCould you please let me know why it's happening and is it a bug in Xerces?\nIf it's a bug then is there a work around for this?\n\nI am pasting the Actual XSD and XML below for your reference\n\nXSD:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xs:schema xmlns:mm2=\"mm2\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" \ntargetNamespace=\"mm2\" attributeFormDefault=\"unqualified\" \nelementFormDefault=\"qualified\">\n\t<xs:element name=\"Test_element\" type=\"mm2:Test_Type\">\n\t</xs:element>\n\t\n\t<xs:simpleType name=\"SHORT_TEXT255_Type\">\n\t\t<xs:restriction base=\"xs:string\">\n\t\t\t<xs:maxLength value=\"255\"/>\n\t\t</xs:restriction>\n\t</xs:simpleType>\n\t\n\t\n\t<xs:complexType name=\"Test_Type\">\n\t\t<xs:sequence minOccurs=\"0\" maxOccurs=\"1\">\n\t\t\t\t\t<xs:choice minOccurs=\"1\" maxOccurs=\"1\">\n\t\t\t\t\t\t<xs:element minOccurs=\"0\" \nname=\"Field\" maxOccurs=\"1\">\n\t\t\t\t\t\t\t<xs:complexType>\n\t\t\t\t\t\t\t\n\t<xs:simpleContent>\n\t\t\t\t\t\t\t\t\n\t<xs:extension base=\"mm2:SHORT_TEXT255_Type\">\n\t\t\t\t\t\t\t\t\t\n\t<xs:attribute type=\"xs:string\" fixed=\"Field1\" name=\"name\"/>\n\t\t\t\t\t\t\t\t\n\t</xs:extension>\n\t\t\t\t\t\t\t\n\t</xs:simpleContent>\n\t\t\t\t\t\t\t</xs:complexType>\n\t\t\t\t\t\t</xs:element>\n\t\t\t\t\t</xs:choice>\n\t\t\t\t\t<xs:choice minOccurs=\"0\" maxOccurs=\"1\">\n\t\t\t\t\t\t<xs:element minOccurs=\"0\" \nname=\"Field\" maxOccurs=\"1\">\n\t\t\t\t\t\t\t<xs:complexType>\n\t\t\t\t\t\t\t\n\t<xs:simpleContent>\n\t\t\t\t\t\t\t\t\n\t<xs:extension base=\"mm2:SHORT_TEXT255_Type\">\n\t\t\t\t\t\t\t\t\t\n\t<xs:attribute type=\"xs:string\" fixed=\"Field2\" name=\"name\"/>\n\t\t\t\t\t\t\t\t\n\t</xs:extension>\n\t\t\t\t\t\t\t\n\t</xs:simpleContent>\n\t\t\t\t\t\t\t</xs:complexType>\n\t\t\t\t\t\t</xs:element>\n\t\t\t\t\t</xs:choice>\n\t\t\t\t\t<xs:choice minOccurs=\"1\" maxOccurs=\"1\">\n\t\t\t\t\t\t<xs:element minOccurs=\"1\" \nname=\"Field\" maxOccurs=\"1\">\n\t\t\t\t\t\t\t<xs:complexType>\n\t\t\t\t\t\t\t\n\t<xs:simpleContent>\n\t\t\t\t\t\t\t\t\n\t<xs:extension base=\"mm2:SHORT_TEXT255_Type\">\n\t\t\t\t\t\t\t\t\t\n\t<xs:attribute type=\"xs:string\" fixed=\"Field3\" name=\"name\"/>\n\t\t\t\t\t\t\t\t\n\t</xs:extension>\n\t\t\t\t\t\t\t\n\t</xs:simpleContent>\n\t\t\t\t\t\t\t</xs:complexType>\n\t\t\t\t\t\t</xs:element>\n\t\t\t\t\t</xs:choice>\n\t\t\t\t</xs:sequence>\n\t\t\t\t<xs:attribute type=\"xs:string\" fixed=\"Test\" \nname=\"type\"/>\n\t</xs:complexType>\n\t</xs:schema>\n\n\nXML:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--Sample XML file generated by XMLSPY v5 U (http://www.xmlspy.com)-->\n<Test_element xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"mm2\">\n\t<Field name=\"Field1\">String</Field>\n\t<Field name=\"Field3\">String</Field>\n</Test_element>\n\n\nException thrown by Parser (thrown for both SAX and DOM parsing):\n\norg.xml.sax.SAXParseException: cvc-complex-type.3.1: Value 'Field3' of attribute\n 'name' of element 'Field' is not valid with respect to the corresponding attrib\nute use. Attribute 'name' has a fixed value of 'Field2'.\n\n\nAnd here is the code which I am using for parsing\n\n\n        /** <p>XML representation of boolean \"true\".</p>*/\n        private static final String YES = \"yes\";\n\n        /** <p>XML representation of boolean \"false\".</p>*/\n        private static final String NO = \"no\";\n\n        /** <p>Character encoding used when reading files.</p>*/\n        private static final String CHAR_ENCODING = \"UTF8\";\n\n        /** <p>Sets the namespace aware property for parsers</p>*/\n        private static final boolean NAME_SPACE_AWARE = true;\n\n        /** <p>Sets the validating property for parsers</p>*/\n        private static final boolean VALIDATING = true;\n\n        /** <p>Defines schema language to be used by parser for \nvalidation.</p>*/\n        private static final String SCHEMA_LANGUAGE =\n                                            \"http://java.sun.com/xml/jaxp/proper\nties/schemaLanguage\";\n        /**\n         * <p>The URI value of schema language specification property. This \nvalue supports W3C XML\n         * Schema specification to be compliant with JAXP 1.2 specification.</p>\n         */\n        private static final String SCHEMA_LANGUAGE_VAL \n= \"http://www.w3.org/2001/XMLSchema\";\n\n    private static final String SCHEMA_SOURCE =\n                                               \"http://java.sun.com/xml/jaxp/pro\nperties/schemaSource\";\n\n   public static void SaxParser(String[] args) {\n\t\t\ttry {\n\t\t\t\tReader xmlReader;\n\t\t\t\tReader xsdReader;\n\n\t\t\t\txmlReader = new FileReader\n(\"E:\\\\apps\\\\parsertest\\\\Untitled2.xml\");\n\t\t\t\txsdReader = new FileReader\n(\"E:\\\\apps\\\\parsertest\\\\Untitled2.xsd\");\n\n\t\t\t\tSAXParserFactory factory = \nSAXParserFactory.newInstance();\n\n\t\t\t\t// Configure SAXParserFactory to provide \nparsers that are namespace aware.\n\t\t\t\tfactory.setNamespaceAware(NAME_SPACE_AWARE);\n\t\t\t\t// Configure SAXParserFactory to provide \nparsers that are validating. This property\n\t\t\t\t// must have the value true for any of the \nproperty strings defined below to take\n\t\t\t\t// effect.\n\t\t\t\tfactory.setValidating(VALIDATING);\n\n\t\t\t\tSAXParser parser = factory.newSAXParser();\n\n\t\t\t\t// Setting the schema language for xml schema \nvalidation\n\t\t\t\tparser.setProperty(SCHEMA_LANGUAGE, \nSCHEMA_LANGUAGE_VAL);\n\t\t\t\t// Setting the schema source for xml schema \nvalidation\n\t\t\t\tparser.setProperty(SCHEMA_SOURCE, new \nInputSource(xsdReader));\n\n\t\t\t    DefaultHandler handler = new XmlDefaultHandler();\n\t\t\t    parser.parse(new InputSource(xmlReader), handler);\n\t\t\t}\n\t\t\tcatch (FactoryConfigurationError e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (ParserConfigurationException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (SAXException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n}\n\npublic static void DomParser() {\n\t\t\ttry {\n\t\t\t\tReader xmlReader;\n\t\t\t\tReader xsdReader;\n\n\t\t\t\txmlReader = new FileReader\n(\"E:\\\\apps\\\\parsertest\\\\validrequest-create-approveedit.xml\");\n\t\t\t\txsdReader = new FileReader\n(\"E:\\\\apps\\\\parsertest\\\\Untitled1.xsd\");\n\n\t\t\t\tDocumentBuilderFactory factory =\n\t\t\t\t    DocumentBuilderFactory.newInstance();\n\n\t\t\t\t// Configure SAXParserFactory to provide \nparsers that are namespace aware.\n\t\t\t\tfactory.setNamespaceAware(NAME_SPACE_AWARE);\n\t\t\t\t// Configure SAXParserFactory to provide \nparsers that are validating. This property\n\t\t\t\t// must have the value true for any of the \nproperty strings defined below to take\n\t\t\t\t// effect.\n\t\t\t\tfactory.setValidating(VALIDATING);\n\t\t\t\t// Setting the schema language for xml schema \nvalidation\n\t\t\t\tfactory.setAttribute(SCHEMA_LANGUAGE, \nSCHEMA_LANGUAGE_VAL);\n\t\t\t\t// Setting the schema source for xml schema \nvalidation\n\t\t\t\tfactory.setAttribute(SCHEMA_SOURCE, new \nInputSource(xsdReader));\n\n\t\t\t\tDocumentBuilder builder = \nfactory.newDocumentBuilder();\n\n\n\n\t\t\t    //DefaultHandler handler = new XmlDefaultHandler();\n\t\t\t    builder.parse(new InputSource(xmlReader));\n\t\t\t}\n\t\t\tcatch (FactoryConfigurationError e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (ParserConfigurationException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (SAXException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t    System.out.println(e.toString());\n\t\t\t}\n\t\t}\n    /**\n     * <p>Provides <code>DefaultHandler</code> implementation to handles \ncallbacks during parsing\n     * and validation of XML documents. Returns the <code>Exception</code> as \nit is if any failure\n     * occurs.</p>\n     */\n    public static class XmlDefaultHandler extends DefaultHandler {\n\n        /**\n         * @see org.xml.sax.ErrorHandler#error(SAXParseException)\n         */\n        public void error(SAXParseException spe) throws SAXException {\n            throw spe;\n        }\n\n        /**\n         * @see org.xml.sax.ErrorHandler#fatalError(SAXParseException)\n         */\n        public void fatalError(SAXParseException spe) throws SAXException {\n            throw spe;\n        }", "is_private": false, "id": 62332, "creator": "jbehal@sapient.com", "time": "2004-08-23T12:32:38Z", "bug_id": 30802, "creation_time": "2004-08-23T12:32:38Z", "attachment_id": null}]
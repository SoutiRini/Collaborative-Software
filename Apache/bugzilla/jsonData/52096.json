[{"count": 0, "tags": [], "creator": "achu.prav@gmail.com", "attachment_id": null, "id": 150952, "time": "2011-10-27T10:22:50Z", "bug_id": 52096, "creation_time": "2011-10-27T10:22:50Z", "is_private": false, "text": "If the packages are created directly under the source directory for JAVAC,then the logic for creating empty package-info.class would be right.\n\nBut in case there are sub-folders inside the source directory for JAVAC,then the logic for detecting the packages includes the sub-folders and hence the empty package-info.class gets always created and also created with the subfolders included in the destination directory of JAVAC.\n\nI think the removeleading path method in FileUtils class removes the leading path till the source directory ,but if there are sub-folders under the source directory ,this method cannot remove the same.\n\nSuppose for example:\n\nIf I have a folder structure\n\n->src\n  -->java\n    --->fld1\n        package:com.apache.test1\n    --->fld2\n        package:com.apache.test2\n\nSuppose the source directory to JAVAC is \"src/java\".I have a package-info.java file inside package \"com.apache.test1\".Suppose the destination directory is build/classes.If I run JAVAC task using ant 1.8.2 ,it creates an empty package-info.class in build/classes/fld1/com/apache/test1.\nThe problem seems to be in the construction of the packageinfo map and the usage of removeleadingpath in the fileutils class."}, {"count": 1, "tags": [], "bug_id": 52096, "text": "Your src shouldn't be \"src/java\" but you should be using multiple source directories - one per \"fld\".\n\nIf you use a single srcdir javac's logic of whether it needs to recompile a class or not is going to fail as well.", "id": 150955, "time": "2011-10-27T12:42:53Z", "creator": "bodewig@apache.org", "creation_time": "2011-10-27T12:42:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "But javac allows users to specify in this way.User's can take call whether they want to recompilation check to happen or not.\nFor example : If we do not want a recompilation check ,all classes previously generated are cleaned before building it again ,in that case the user need not provide multiple source directories.Anyway to me if javac allows ,then ANT's JAVAC task should also support creating the package-info classes the same way.", "id": 150962, "time": "2011-10-27T14:42:20Z", "creator": "achu.prav@gmail.com", "creation_time": "2011-10-27T14:42:20Z", "is_private": false}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "text": "Yes, javac allows users to use it that way, but then it does unexpected things like creating package-info.class files in wrong places ;-)\n\nThe package-info.class is only created for the purpose of tracking what needs to get recompiled.  If you deliberately break that there isn't anything Ant can do (it doesn't know the package name as it assumes you structure follows best practices).\n\nIn a case like yours the only thing we could do was to offer an attribute that suppresses the generation of empty package-info.class files completely.  I don't expect this will be widely used, though.", "id": 150997, "time": "2011-10-28T09:32:25Z", "bug_id": 52096, "creation_time": "2011-10-28T09:32:25Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "(In reply to comment #3)\n> Yes, javac allows users to use it that way, but then it does unexpected things\n> like creating package-info.class files in wrong places ;-)\n> The package-info.class is only created for the purpose of tracking what needs\n> to get recompiled.  If you deliberately break that there isn't anything Ant can\n> do (it doesn't know the package name as it assumes you structure follows best\n> practices).\n> In a case like yours the only thing we could do was to offer an attribute that\n> suppresses the generation of empty package-info.class files completely.  I\n> don't expect this will be widely used, though.\n\nI do have different views on it ,\"Best practice\" for a project folder structure is very specific to each and every project and a very relative term.\n\nYes suppressing it would atleast make it behave the way the earlier versions (1.7.X) used to behave.I am sure \"javac\" by itself would come with a solution for the problem that you were trying to solve in ANT 1.8.X and then anyway this feature in ANT need not be used.I hope its already there in the latest versions of the JDK.\n\nYes suppressing option would surely help.:)", "id": 150998, "time": "2011-10-28T09:50:28Z", "creator": "achu.prav@gmail.com", "creation_time": "2011-10-28T09:50:28Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "I really don't want to argue the best practice term here, one last note:  Of course the folder structure is best determnied by the project but you should tell Ant about it.  So rather than \n\n<javac src=\"src/java\" .../>\n\nuse\n\n<javac ...>\n  <src>\n    <pathelement location=\"src/java/fld1\"/>\n    <pathelement location=\"src/java/fld2\"/>\n  </src>\n</javac>\n\nor a dirset nested into src if you want to keep it dynamic.\n\nIt's not that Ant wants to enforce a structure, it just needs understanding the one you use.\n\nBack to the topic at hand: the class file created really only is there for Ant, not javac.  Some package level annotations don't create anything in class files so Ant will always recompile the package-info.java files unless it creates them itself - something you don't care about.\n\nI'll turn this into an enhancement request, change the subject and look into implementing it.", "id": 151000, "time": "2011-10-28T10:10:58Z", "creator": "bodewig@apache.org", "creation_time": "2011-10-28T10:10:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "(In reply to comment #5)\n> I really don't want to argue the best practice term here, one last note:  Of\n> course the folder structure is best determnied by the project but you should\n> tell Ant about it.  So rather than \n> <javac src=\"src/java\" .../>\n> use\n> <javac ...>\n>   <src>\n>     <pathelement location=\"src/java/fld1\"/>\n>     <pathelement location=\"src/java/fld2\"/>\n>   </src>\n> </javac>\n> or a dirset nested into src if you want to keep it dynamic.\n> It's not that Ant wants to enforce a structure, it just needs understanding the\n> one you use.\n> Back to the topic at hand: the class file created really only is there for Ant,\n> not javac.  Some package level annotations don't create anything in class files\n> so Ant will always recompile the package-info.java files unless it creates them\n> itself - something you don't care about.\n> I'll turn this into an enhancement request, change the subject and look into\n> implementing it.\n\nThanks a lot for your patience hearing me :).\nI will surely have a look into all the work arounds and see how feasible it would be right now for my work.Thanks once again.", "id": 151001, "time": "2011-10-28T10:16:58Z", "creator": "achu.prav@gmail.com", "creation_time": "2011-10-28T10:16:58Z", "is_private": false}, {"count": 7, "tags": [], "creator": "bodewig@apache.org", "text": "createMissingPackageInfoClass attribute added with svn revision 1190243", "id": 151002, "time": "2011-10-28T10:44:54Z", "bug_id": 52096, "creation_time": "2011-10-28T10:44:54Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "id": 151008, "time": "2011-10-28T14:39:55Z", "bug_id": 52096, "creation_time": "2011-10-28T14:39:55Z", "is_private": false, "text": "A fix for the originally stated problem would be for lookForPackageInfos to read the actual \"package com.apache.test1;\" line in package-info.java, as javac itself would. One reason the code does not already do this is out of concern over handling of non-ASCII characters in the package name and potential interaction with the filesystem. But I suppose it would work to just read package-info.java using the same encoding being passed to javac.\n\nAdditionally, it is just easier to strip off a path prefix than to parse a general source file including comments, annotations, and/or import statements. In practice, it is overwhelmingly likely that the package statement is on a line by itself, and that there is not something that looks like a package statement inside a block comment. There must be exactly one package statement in a package-info.java, so it would almost always suffice to look for lines of the form\n\n^\\s*package\\s+(\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(?:[.]\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*)\\s*;\\s*$\n\nand use \\1 if exactly one such is found, falling back to the current logic otherwise. This would only be fooled by pathological cases such as\n\n/*\npackage fake;\n*/\npackage\nreal;\n\nor the use of \\uXXXX escapes."}, {"count": 9, "tags": [], "creator": "achu.prav@gmail.com", "attachment_id": null, "id": 151047, "time": "2011-10-30T10:08:58Z", "bug_id": 52096, "creation_time": "2011-10-30T10:08:58Z", "is_private": false, "text": "I agree with you...But this issue seems to have been already resolved and closed and I am not sure how this this needs to be addressed"}, {"count": 10, "tags": [], "bug_id": 52096, "text": "(In reply to comment #8)\n> A fix for the originally stated problem would be for lookForPackageInfos to\n> read the actual \"package com.apache.test1;\" line in package-info.java, as javac\n> itself would.\n\nSure, this could work.\n\nIsn't the whole point of creating the package-info.class files to avoid the overhead of running javac on the source files?  Wouldn't opening each package-info.java file and scanning it with some regexp take almost as long as simply passing the files to javac in the end?  These are honest questions.\n\nStefan", "id": 151067, "time": "2011-10-31T06:15:50Z", "creator": "bodewig@apache.org", "creation_time": "2011-10-31T06:15:50Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "id": 151350, "time": "2011-11-10T00:06:33Z", "bug_id": 52096, "creation_time": "2011-11-10T00:06:33Z", "is_private": false, "text": "(In reply to comment #10)\n> Wouldn't opening each\n> package-info.java file and scanning it with some regexp take almost as long as\n> simply passing the files to javac in the end?\n\nProbably depends on the situation. While javac itself is reasonably fast on small files, i.e. not much slower than the I/O of loading the file, running javac incurs two kinds of additional cost:\n\n1. Opening any classpath entries, which may be numerous and/or large.\n\n2. Running any annotation processors, which could be slow."}, {"count": 12, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "If we modified the task as you describe we'd trade decreased performance for all users (who have a package-info.java files) for not generating empty package-info.class files in non-existant packages for the very few users who prefer to run javac in a way that it cannot guess the package hierarchy.\n\nDoesn't sound attractive to me.", "id": 151400, "time": "2011-11-11T14:29:34Z", "creator": "bodewig@apache.org", "creation_time": "2011-11-11T14:29:34Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 52096, "attachment_id": null, "text": "(In reply to comment #12)\n> Doesn't sound attractive to me.\n\nOK. Would be significantly more work anyway.", "id": 151421, "time": "2011-11-11T19:31:53Z", "creator": "jglick@apache.org", "creation_time": "2011-11-11T19:31:53Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 52096, "text": "BTW if we can detect that JDK 7 javac is being used we could pass -Xpkginfo:always instead of the current behavior of createMissingPackageInfoClass=true.", "id": 154831, "time": "2012-03-12T16:27:15Z", "creator": "jglick@apache.org", "creation_time": "2012-03-12T16:27:15Z", "is_private": false, "attachment_id": null}]
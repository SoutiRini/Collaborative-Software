[{"count": 0, "tags": [], "creator": "phil.pickett@springsource.com", "text": "The background is that we use mod_headers to set request headers like this :\nRequestHeader set X-MS-Unique-Id %{UNIQUE_ID}e env=!HAVE_X-MS-Unique-Id\n\n[ the env=! part does not matter -- it does it even for statically configured request headers ]\n\nThis works fine when Apache directly serves a request first time. It breaks badly when Apache uses a subrequest during its processing. This is because mod_headers sets the header (in r->headers_in) during the subrequest, using the request pool from that subrequest.\n\nUnfortunately, Apache passes subrequests a reference to r->headers_in, not a copy. So at the end of the subrequest when the sub-request's pool is destroyed, you have invalid data on the parent request's headers_in table.\n\nThe core apache code responsible for this is ap_set_sub_req_protocol() in server/protocol.c :\n\n/* did the original request have a body? (e.g. POST w/SSI tags)\n* if so, make sure the subrequest doesn't inherit body headers\n*/\nif (apr_table_get(r->headers_in, \"Content-Length\")\n|| apr_table_get(r->headers_in, \"Transfer-Encoding\")) {\nclone_headers_no_body(rnew, r);\n} else {\n/* no body (common case). clone headers the cheap way */\nrnew->headers_in = r->headers_in;\n}\n\nUnfortunately, the 'cheap way' allows subrequests to modify the parent request's data structures. We fixed the problem by changing this to :\n\nelse {\n/* no body (common case). clone headers the cheap way */\n/* rnew->headers_in = r->headers_in; */\nrnew->headers_in = apr_table_copy(rnew->pool, r->headers_in);\n}\n\n\nThere is a performance penalty with this. One other solution would be to modify mod_headers to set the table value using the table's own pool rather than its request pool, but that doesn't prevent subrequests can having potentially strange side-effects.\n\nThis bug has potentially serious security consequences as the main request ends up referencing memory it shouldn't be doing. We have seen it give away security sensitive data to the client, and would like to see this patched and a security fix made available as soon as possible please.", "id": 132691, "time": "2009-12-09T07:21:41Z", "bug_id": 48359, "creation_time": "2009-12-09T07:21:41Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "With reference to trunk, but I'm sure this applies also to 2.2 ...\n\nA look at the code in question indicates that the use of r->pool causing the issue is in function process_tags(), and could be fixed by a simple patch:\n\n--- modules/metadata/mod_headers.c\t(revision 888304)\n+++ modules/metadata/mod_headers.c\t(working copy)\n@@ -551,6 +551,10 @@\n \n     format_tag *tag = (format_tag*) hdr->ta->elts;\n \n+    while (r->main != NULL) {\n+        r = r->main;\n+    }\n+\n     for (i = 0; i < hdr->ta->nelts; i++) {\n         s = tag[i].func(r, tag[i].arg);\n         if (str == NULL)\n\nDoes this make sense, or am I missing something?  Haven't checked the implications of passing the parent to tags[i].func, FWIW.", "is_private": false, "id": 132697, "creator": "nick@webthing.com", "time": "2009-12-09T09:46:49Z", "bug_id": 48359, "creation_time": "2009-12-09T09:46:49Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "rpluem@apache.org", "text": "Committed a fix to trunk as r889408.", "id": 132728, "time": "2009-12-10T12:19:14Z", "bug_id": 48359, "creation_time": "2009-12-10T12:19:14Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48359, "is_private": false, "id": 132828, "attachment_id": null, "creator": "jacob.scott@morganstanley.com", "creation_time": "2009-12-15T03:02:45Z", "time": "2009-12-15T03:02:45Z", "text": "The fix does make sense, but I think that this means that the behavior of the Request headers is different to that of the Response headers w.r.t. sub-requests.\n\nCore Apache makes a copy of the outgoing headers when calling a sub-request -- so any changes that mod_headers make are discarded at the end of the subrequest and don't effect the rest of the processing.\n\nRequest headers are passed to a sub-request by reference, so a change by mod_headers in a sub-request persists into the rest of the processing.\n\nIf this is by design then fine, but I think that needs to be documented.  I tend to think that making a copy of the request headers as is done for the response headers is more consistent.\n\n\nThanks\n\nJake Scott"}, {"count": 4, "tags": [], "bug_id": 48359, "is_private": false, "id": 133705, "attachment_id": null, "creator": "wrowe@apache.org", "creation_time": "2010-01-19T12:17:53Z", "time": "2010-01-19T12:17:53Z", "text": "I agree with Jake; letting the subrequest manipulate the input headers is\nprobably not the way to go; I'd suggest reverting the trunk patch and applying\nhis proposed solution.\n\nCopying the input header array seems like a better patch than the solution \nin trunk, and more consistant with user and module author expectations."}, {"count": 5, "tags": [], "bug_id": 48359, "is_private": false, "id": 133711, "attachment_id": null, "creator": "rpluem@apache.org", "creation_time": "2010-01-19T23:30:35Z", "time": "2010-01-19T23:30:35Z", "text": "(In reply to comment #4)\n> I agree with Jake; letting the subrequest manipulate the input headers is\n> probably not the way to go; I'd suggest reverting the trunk patch and applying\n> his proposed solution.\n> \n> Copying the input header array seems like a better patch than the solution \n> in trunk, and more consistant with user and module author expectations.\n\nIs this a veto? If yes I would simply revert. If not as I am short of time currently feel free to revert r889408 and implement Jakes proposal."}, {"count": 6, "tags": [], "creator": "wrowe@apache.org", "text": "It's a RFC - if your comment represents a +1, I'm happy to revert and commit\na patch based on his proposal - I was looking for a sanity check from the\nother committers who had reviewed the original fix.", "id": 133712, "time": "2010-01-19T23:36:08Z", "bug_id": 48359, "creation_time": "2010-01-19T23:36:08Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 48359, "is_private": false, "id": 133713, "time": "2010-01-20T02:47:50Z", "creator": "rpluem@apache.org", "creation_time": "2010-01-20T02:47:50Z", "tags": [], "text": "(In reply to comment #6)\n> It's a RFC - if your comment represents a +1, I'm happy to revert and commit\n> a patch based on his proposal - I was looking for a sanity check from the\n> other committers who had reviewed the original fix.\n\nYes, this a +1."}, {"count": 8, "tags": [], "bug_id": 48359, "attachment_id": null, "text": "No, Nick.  No modules relied upon this, because any module which relied upon this\nbehavior would have crashed.", "id": 133749, "time": "2010-01-20T14:06:54Z", "creator": "wrowe@apache.org", "creation_time": "2010-01-20T14:06:54Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 48359, "is_private": false, "id": 133755, "attachment_id": null, "creator": "nick@webthing.com", "creation_time": "2010-01-20T15:33:24Z", "time": "2010-01-20T15:33:24Z", "text": "Will, don't technical discussions belong on-list?\n\nWhy would a module crash, except in the special case (of this bug) where it sets something allocated on r->pool in the headers table?"}, {"count": 10, "tags": [], "bug_id": 48359, "attachment_id": null, "text": "Unfortunately, the list doesn't have this thread, in any case bugzilla is fine\nfor accepting or rejecting patches with a rational.\n\nYou've rejected this because, as you state, modules might rely on percolating\ntheir changes up a level.  If these are pool allocated, as you point out, the\nupstream modules crash.  If these are static or an 'unset' operation, they\nwould not crash.\n\nBut the subrequest is distinct and should *not* pollute the top level request.\nThanks for making me spend more time considering this, so I'm quite certain\nthat Jake's observations were correct.", "id": 133757, "time": "2010-01-20T16:32:57Z", "creator": "wrowe@apache.org", "creation_time": "2010-01-20T16:32:57Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 48359, "text": "(In reply to comment #10)\n> Unfortunately, the list doesn't have this thread, in any case bugzilla is fine\n> for accepting or rejecting patches with a rational.\n> \n> You've rejected this because, as you state, modules might rely on percolating\n> their changes up a level.  If these are pool allocated, as you point out, the\n> upstream modules crash.  If these are static or an 'unset' operation, they\n> would not crash.\n> \n> But the subrequest is distinct and should *not* pollute the top level request.\n\nNot good enough.  We have an API that supports this, and a contract with the world not to break that API in the lifetime of 2.2.  \"Should not\" is no part of that.  We haven't told module developers not to manipulate headers in a subrequest, nor even to check whether they're in a subrequest (e.g. something running from mod_includes).  Nor have we forbidden modules to reverse-engineer other modules observed to have side-effects such as manipulating headers.\n\n> Thanks for making me spend more time considering this, so I'm quite certain\n> that Jake's observations were correct.\n\nYes, they're correct.  And indeed they're *observations* of how things are, with a balanced suggestion that we either change it (fine for 2.4) or document it.  No quarrel with that.", "id": 133762, "time": "2010-01-20T18:03:15Z", "creator": "nick@webthing.com", "creation_time": "2010-01-20T18:03:15Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "text": "Nick, this makes no sense.  The subrequest should not violate the parent request,\nand the patch in trunk is evidence that the module's behavior was bugged.\n\nBugs are fixed on stable branches.  By all means, we preserve behavior, but not\nto the extreme of an API contract on all incidental misbehavior.\n\nIIF the subrequest-handling module wishes to violate the parent request, there is\nan API for that; walk the request parent chain backwards and modify that request\nrec closely observing that specific request pool.\n\nI'll patch trunk and propose for backport.", "is_private": false, "id": 133764, "creator": "wrowe@apache.org", "time": "2010-01-20T20:44:13Z", "bug_id": 48359, "creation_time": "2010-01-20T20:44:13Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "wrowe@apache.org", "text": "Nick;\n\nyour objection is further flawed by the fact that all requests-with-bodies\nalready received a shallow copy of headers_in.\n\nA patch is committed as r901578, please review and reconsider your vote.\nMany thanks.", "id": 133766, "time": "2010-01-20T23:21:10Z", "bug_id": 48359, "creation_time": "2010-01-20T23:21:10Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "wrowe@apache.org", "text": "Note the change is r901578+r901589 per rpluem's observation.", "id": 133796, "time": "2010-01-21T10:17:27Z", "bug_id": 48359, "creation_time": "2010-01-21T10:17:27Z", "is_private": false, "attachment_id": null}, {"count": 15, "attachment_id": 24896, "bug_id": 48359, "text": "Created attachment 24896\nBackport of 2nd revision, to 2.2\n\nPatch as proposed for 2.2 backport in STATUS", "id": 133975, "time": "2010-01-27T10:54:01Z", "creator": "wrowe@apache.org", "creation_time": "2010-01-27T10:54:01Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "text": "Note finally, the API you claim exists, Nick, has been broken since;\n\n-------\nRevision 158798 - (view) (download) (annotate) - [select for diffs]\nModified Wed Mar 23 16:36:45 2005 UTC (4 years, 10 months ago) by gregames\nFile length: 52751 byte(s)\nDiff to previous 151408 (colored)\n\ndon't propagate input headers describing a body to a subrequest.  this can cause a\nback end server to hang in a read for a body which no longer exists.\n-------\n\nfor all requests-with-bodies, which shipped as 2.1.5, although this change was\napparently never propagated to 2.0 (committed just before 2.0.54).\n\nThe proposed patch breaks the 'contract' of permitting the user to skip the\npresumably mandatory step of walking r->main backwards to modify r->main only\nfor the remaining bodiless-requests.  For such requests, the existing code has\nalways allowed subrequest header_in changes to become invalid, which in the\ncase of non-prefork MPM's may later consist of another request's data (which\nthe administrator is free to then reflect with mod_headers).", "is_private": false, "id": 134247, "creator": "wrowe@apache.org", "time": "2010-02-04T15:41:47Z", "bug_id": 48359, "creation_time": "2010-02-04T15:41:47Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 48359, "is_private": false, "id": 134957, "attachment_id": null, "creator": "minfrin@sharp.fm", "creation_time": "2010-03-01T01:44:37Z", "time": "2010-03-01T01:44:37Z", "text": "The old code seems to have arbitrarily chosen to sometimes copy the input headers, and sometimes not, entirely arbitrarily from the point of view of a module. From what I can see, any module that depended on being able to manipulate main request headers by fiddling with subrequest headers is not only broken but likely to suffer inconsistent behaviour depending on the request. +1 to wrowe's patch."}, {"count": 18, "tags": [], "creator": "jorton@redhat.com", "text": "This was committed to 2.2.x in r917867.\n\nDo you have a simple configuration which can be used to reliably reproduce the bug?  I'm trying to make a test case for the test suite.\n\nIt looks like this will affect 2.0.x too.", "id": 135051, "time": "2010-03-04T14:38:39Z", "bug_id": 48359, "creation_time": "2010-03-04T14:38:39Z", "is_private": false, "attachment_id": null}, {"count": 19, "attachment_id": null, "bug_id": 48359, "is_private": false, "id": 135098, "time": "2010-03-06T00:13:42Z", "creator": "wrowe@apache.org", "creation_time": "2010-03-06T00:13:42Z", "tags": [], "text": "Note that this incident has been assigned CVE-2010-0434 (cve.mitre.org)"}]
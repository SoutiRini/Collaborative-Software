[{"count": 0, "tags": [], "creator": "steve@openssl.org", "attachment_id": null, "is_private": false, "id": 110352, "time": "2007-11-09T05:37:01Z", "bug_id": 43822, "creation_time": "2007-11-09T05:37:01Z", "text": "This patch adds provisional OCSP stapling support to mod_ssl. \n\nOCSP stapling is a technique where instead of each client connecting to a\nresponder individually performing OCSP checks the server itself performs a\nsingle check and sends the response to multiple clients using the certificate\nstatus TLS extension.\n\nThe patch requires a recent OpenSSL 0.9.8 stable snapshot or the 0.9.9-dev\nversion. The first official release will be 0.9.8h.\n\nIf OpenSSL 0.9.8 is used then the compilation option \"enable-tlsext\" is also\nrequired because TLS extension support is not compiled in by default in\nOpenSSL 0.9.8.\n\nThe following configuration options are added:\n\nSSLUseStapling: enable OCSP stapling, default off.\n\nSSLStaplingResponseSkew: number of seconds tolerance when checking OCSP\nresponses to allow for differences in clock setting, default 5 minutes.\n\nSSLStaplingMaxAge: number of seconds to keep an OSCP response overriding\nany notAfter date present. This is to cover two cases. If notAfter is not\npresent according to standard updated information is immediately available,\nthis option indicates the time such a response should be considered valid.\nIn other cases responder responses have been know to have very long notAfter\ndates weeks or months in the future even though new information is available\nlong before then. Default is to rely on notAfter time and not override.\n\nSSLStaplingResponderTimeout: number of seconds to wait for a reply from\nan OCSP responder. Default is 10 seconds.\n\nSSLStaplingStandardCacheTimeout: number of seconds to cache valid responses,\ndefault 60 minutes.\n\nSSLStaplingErrorCacheTimeout: number of seconds to cache invalid responses,\ndefault foo minutes.\n\nSSLStaplingReturnResponderErrors: errors in the OCSP responder (status errors\nand returning of expired OCSP responses) are sent back to the client when\nthis option is set, default on. When not set no OCSP response is sent back\nto the client if an error is retrieved.\n\nSSLStaplingFakeTryLater: if a connection cannot be established with the\nresponder or no response is received then this option will send the status\ncode \"tryLater\" back to the client.\n\nSSLStaplingForceURL: for the responder URL to use. Normally the certificate\nextensions indicate the responder URL to use, this option allows it to be\noverridden. This can be useful in cases where an OCSP responder is behaving\nas a proxy for example. Default is unset.\n\nSSLStaplingMutex: mutex to use for stapling. Syntax is identical to SSLMutex\noption.\n\nSome notes on the implementation:\n\nThe caching is performed by storing the OCSP response in an SSL_SESSION\nstructure. This allows the standard caching mechanisms to be utilised and\nreduces the number of changes required.\n\nThe caching of error responses is designed to be kind to the OCSP responder\nby not repeatedly making requests when it is not returning valid responses.\n\nThe caching policy may need tweaking to handle practical cases.\n\nA new mutex is required for OCSP stapling, this is to ensure that multiple\nprocesses do not request an updated response simultaneoudly. The mutex code\nhas been generalized to allow the addition of new mutexes.\n\nThe OCSP query code uses OpenSSLs rather basic HTTP request mechanism. For\nthe OCSP patch it has been suggested that sub requests and mod_proxy would be\nmore efficient. However the request_rec structure is not available inside\nmod_ssl at the time of the OCSP query... if this can be worked around then\nsuggestions are welcomed.\n\nTimeouts on OCSP responses are implemented using a custom BIO which makes use\nof APR socket I/O. If the OCSP patch is also used this code could be shared\nbetween the two.\n\nAll comments welcomed."}, {"count": 1, "tags": [], "bug_id": 43822, "text": "Created attachment 21100\nOCSP Stapling patch", "id": 110353, "time": "2007-11-09T05:39:04Z", "creator": "steve@openssl.org", "creation_time": "2007-11-09T05:39:04Z", "is_private": false, "attachment_id": 21100}, {"count": 2, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "Does this patch relate to Bug 41123 and its patch?", "id": 110354, "time": "2007-11-09T06:22:37Z", "bug_id": 43822, "creation_time": "2007-11-09T06:22:37Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "steve@openssl.org", "text": "(In reply to comment #2)\n> Does this patch relate to Bug 41123 and its patch?\n\nIn a way this does the opposite of #41123. \n\n#41123 is to allow a *server* to determine the certificate revocations status of\na *client* certificate using OCSP.\n\nThis patch is to allow a *client* to retrieve a cached response of the *server*\ncertificate status using OCSP.\n\nNormally a busy site might result in large numbers of clients all simultaneously\nquerying a responder to determine the status of the same server certificate.\nThis patch makes the server query the responder once and distribute the same\ncached response to multiple clients.\n\nThis makes use of the certificate status request TLS extension which is already\nin use in IE7 under Vista and I believe other browsers may soon follow suit.\n\nThere is some common functionality between the two patches which could be\nshared. They both include code to query a responder using OCSP. This version\nmakes use of APR sockets to implement a timeout whereas #41123 doesn't.", "id": 110367, "time": "2007-11-09T09:19:43Z", "bug_id": 43822, "creation_time": "2007-11-09T09:19:43Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 43822, "is_private": false, "id": 115879, "creation_time": "2008-04-25T09:14:04Z", "time": "2008-04-25T09:14:04Z", "creator": "jorton@redhat.com", "text": "The trunk mod_ssl now has:\n\n1) session caching code factored out, and\n2) generic-ish OCSP request implementation.\n\nwhich should simplify this patch quite a lot.  Any chance the patch could be redone for trunk?\n\nI don't much like adding another mutex object type on top of APR global mutexes, it seems redundant; I'd think that extending ssl_mutex_*() to take a apr_global_mutex_t * or something similar would be sufficient, so that those functions are simple helpers around the APR global mutex.  (or *possibly* extending util_mutex.c to do that might make sense).", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 43822, "text": "Created attachment 22981\nStapling patch", "id": 123008, "time": "2008-12-02T10:23:10Z", "creator": "steve@openssl.org", "creation_time": "2008-12-02T10:23:10Z", "is_private": false, "attachment_id": 22981}, {"count": 6, "attachment_id": 22982, "bug_id": 43822, "text": "Created attachment 22982\nNew stapling.c file.", "id": 123009, "time": "2008-12-02T10:24:08Z", "creator": "steve@openssl.org", "creation_time": "2008-12-02T10:24:08Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 43822, "text": "(In reply to comment #4)\n> The trunk mod_ssl now has:\n> \n> 1) session caching code factored out, and\n> 2) generic-ish OCSP request implementation.\n> \n> which should simplify this patch quite a lot.  Any chance the patch could be\n> redone for trunk?\n> \n> I don't much like adding another mutex object type on top of APR global\n> mutexes, it seems redundant; I'd think that extending ssl_mutex_*() to take a\n> apr_global_mutex_t * or something similar would be sufficient, so that those\n> functions are simple helpers around the APR global mutex.  (or *possibly*\n> extending util_mutex.c to do that might make sense).\n> \n\nI've finally been able to look at this again. The two attachments are an initial (incomplete) port to the trunk, it works for testing purposes but lacks some features. \n\nThe rest can be done when I've clarified what people think is the best way to go about things...\n\nThe mutex code has been removed and some dummy functions to replace them for now. I can change ssl_mutex_*() to apr_global_mutex_t and some additional parameters for ssl_mutex_init() and ssl_mutex_reinit() and removal of the special case code (AP_SOCACHE_FLAG_TOTMPSAFE etc) since the mutex for stapling will always be used.\n\nThe timeout option doesn't currently work. There is support for timeout in the generic-ish OCSP but it is hard coded. I could change that to take a parameter.\n\nThe uri and certificate parsing code does duplicate some used in some static functions in the OCSP code (but with hard coded parameters). Again that could be removed by some generalisation.\n \nI haven't at this stage altered the session caching code. It still makes use of the SSL session cache to store OCSP responses. Would a separate cache be in order, which works in a manner similar to the SSL session cache? The requirements for the OCSP stapling cache differ from the session cache: only a small number (one per certificate) of entries of relatively small size (under 1K) will be needed but they are likely to persist for longer (several minutes).\n\n\n", "id": 123011, "time": "2008-12-02T10:40:38Z", "creator": "steve@openssl.org", "creation_time": "2008-12-02T10:40:38Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 43822, "attachment_id": null, "id": 123058, "time": "2008-12-03T12:57:20Z", "creator": "jorton@redhat.com", "creation_time": "2008-12-03T12:57:20Z", "is_private": false, "text": "Can you post this to dev@, Steve.  I have a bunch of feedback which will kill me to type into this little box."}, {"count": 9, "tags": [], "bug_id": 43822, "is_private": false, "text": "(In reply to comment #8)\n> Can you post this to dev@, Steve.  I have a bunch of feedback which will kill\n> me to type into this little box.\n> \n\nOK last comments, sent to dev@ under subject \"OCSP Stapling support for mod_ssl\".", "id": 123117, "time": "2008-12-05T04:59:58Z", "creator": "steve@openssl.org", "creation_time": "2008-12-05T04:59:58Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 43822, "text": "An updated version of the patch is included. This is now fully functional and has been tested against IE 7. The caching has been rewritten to use the session caching code instead of hacking SSL_SESSION. The mutex now follows the same scheme as ssl mutex.", "id": 124323, "time": "2009-01-23T10:38:41Z", "creator": "steve@openssl.org", "creation_time": "2009-01-23T10:38:41Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "steve@openssl.org", "attachment_id": 23168, "is_private": false, "id": 124324, "time": "2009-01-23T10:41:45Z", "bug_id": 43822, "creation_time": "2009-01-23T10:41:45Z", "text": "Created attachment 23168\nUpdate stapling diff"}, {"count": 12, "tags": [], "bug_id": 43822, "text": "Created attachment 23169\nUpdated ssl_stapling.c file", "id": 124325, "time": "2009-01-23T10:42:41Z", "creator": "steve@openssl.org", "creation_time": "2009-01-23T10:42:41Z", "is_private": false, "attachment_id": 23169}, {"count": 13, "tags": [], "bug_id": 43822, "attachment_id": null, "text": "Per mail to dev@:\n\nhttp://marc.info/?l=apache-httpd-dev&m=125650127120687&w=2\n\nThis is now committed to trunk:\n\nhttp://svn.apache.org/viewvc?rev=829619&view=rev\n\nfor anybody wishing to test this stuff out, please submit feedback to dev@ and/or file new issues for any bugs found.\n\nAgain, thanks to Stephen!", "id": 131394, "time": "2009-10-26T14:00:06Z", "creator": "jorton@redhat.com", "creation_time": "2009-10-26T14:00:06Z", "is_private": false}]
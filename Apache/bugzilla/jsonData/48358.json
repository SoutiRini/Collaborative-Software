[{"count": 0, "tags": [], "bug_id": 48358, "attachment_id": 24684, "id": 132690, "time": "2009-12-09T06:58:37Z", "creator": "isabel@apache.org", "creation_time": "2009-12-09T06:58:37Z", "is_private": false, "text": "Created attachment 24684\nPatch including tests that fixed the problem for us.\n\nCurrently Tomcat does not support unloading JSPs. When constantly changing and reloading JSP files (especially during development time) this causes the JVM to run out of memory.\n\nThe patch fixes this problem by tracking the last time a JSP page was requested. Objects are destroyed if a configurable number of JSPs is live, starting with the \"oldest\" ones. This behaviour is deactivated by default. It must be configured explicitly.\n\nThe patch comes with tests that check the added functionality. To make testing easier I added easymock as dependency to the classpath.\n\nI'd appreciate any feedback on the code changes - suggestions for improvement, potential problems with the code etc.\n\nThis work was done in collaboration with some of my colleagues at work. I will forward a link to this bug entry to those involved so they can provide more information on the background of the patch if needed.\n\nOn a side note: Just in case you might like to include the patch - I couldn't find a \"patch intended for inclusion\" check box (like the one in jira) in bugzilla - thus stating explicitly: License to ASF granted for inclusion in ASF works (as per the Apache License \u00a75)."}, {"count": 1, "tags": [], "creator": "pr@objektpark.de", "is_private": false, "id": 132719, "attachment_id": null, "bug_id": 48358, "creation_time": "2009-12-10T07:28:36Z", "time": "2009-12-10T07:28:36Z", "text": "Hi Isabel,\n\nfeature looks fine for me :-) Many Thanks.\n\nBut some comments...\n\n- Patch missing message  jsp.warning.maxLoadedJsps at java/org/apache/jasper/resources/LocalStrings.properties\n\n- The oldest JSP search seams not cheap. Some CMS-Sites have more 30000 active JSP's!\n\n- Have you tested your JSP unloading with heavy load?\n\nPeter"}, {"attachment_id": null, "tags": [], "bug_id": 48358, "is_private": false, "count": 2, "id": 132726, "time": "2009-12-10T09:22:47Z", "creator": "markt@apache.org", "creation_time": "2009-12-10T09:22:47Z", "text": "As a point of clarification, if a JSP is changed then the old implementation should be unloaded before the new implementation is loaded. Therefore, lots of changes to a small number of pages shouldn't cause an issue. If such a scenario does cause an issue then that is a bug and I would ask that you please open a separate issue.\n\nThis enhancement appears to be addressing the use case where an application consists of many thousands of pages that are rarely used so, in an effort to conserve resources, pages that have not been accessed for a while are unloaded. I can see how this could be useful in development, particularly if memory is tight on an individual developer's machine. In production, I think it would be easier (and give better performance) to spend few hundred dollars on some extra memory for the server.\n\nI also share Peter's concerns about the cost of the oldest JSP search and think that this part of the patch needs to be revisited."}, {"count": 3, "tags": [], "bug_id": 48358, "attachment_id": null, "is_private": false, "id": 132729, "time": "2009-12-10T12:27:05Z", "creator": "isabel@apache.org", "creation_time": "2009-12-10T12:27:05Z", "text": "> I also share Peter's concerns about the cost of the oldest JSP search and\n> think that this part of the patch needs to be revisited\n\nI agree - will look into that ASAP - Thanks pointing out the problem."}, {"count": 4, "tags": [], "creator": "isabel@apache.org", "attachment_id": 24707, "id": 132823, "time": "2009-12-15T01:53:57Z", "bug_id": 48358, "creation_time": "2009-12-15T01:53:57Z", "is_private": false, "text": "Created attachment 24707\nPatch including tests that adds support for selectively unloading jsps.\n\nThe patch includes changes to the way of identifying the jsp(s) to destroy: If unloading is activated, the JspRuntimeContext tracks the relative \"age\" - in terms of last execution time - of each jsp.\n\nAge is tracked in a queue that supports additions, updates and removal of its nodes in constant time.\n\nIf unloading is activated this gets rid of the costly loop for identifying candidate jsps. It should incur only slight overhead at jsp execution time."}, {"count": 5, "tags": [], "creator": "isabel@apache.org", "attachment_id": null, "is_private": false, "id": 132824, "time": "2009-12-15T01:57:40Z", "bug_id": 48358, "creation_time": "2009-12-15T01:57:40Z", "text": "> Have you tested your JSP unloading with heavy load?\n\nWe ran initial smoke-tests against artificial setups as well as load tests against a \"real-world\" web application with user requests extracted from log files on our test systems. So far everything looks good. Further tests are currently being run. Will report the results as soon as they are available."}, {"count": 6, "tags": [], "creator": "isabel@apache.org", "is_private": false, "id": 132825, "attachment_id": null, "bug_id": 48358, "creation_time": "2009-12-15T02:03:43Z", "time": "2009-12-15T02:03:43Z", "text": "> As a point of clarification, if a JSP is changed then the old implementation\n> should be unloaded before the new implementation is loaded. Therefore, lots of\n> changes to a small number of pages shouldn't cause an issue.\n\nYou are right: 1) My explanation was wrong in this respect, 2) re-loading existing jsps this doesn't cause an issue."}, {"count": 7, "tags": [], "bug_id": 48358, "attachment_id": null, "is_private": false, "id": 133594, "time": "2010-01-14T02:17:49Z", "creator": "isabel@apache.org", "creation_time": "2010-01-14T02:17:49Z", "text": "> - Have you tested your JSP unloading with heavy load?\n\nThe refined patch was tested with some 400 requests per second (up to 700 max) - all looked fine.\n\nMark, do you have any comments on the refined version of the patch? Anything in particular I should clarify?"}, {"count": 8, "tags": [], "text": "(In reply to comment #1)\n\n> - Have you tested your JSP unloading with heavy load?\n> \n> Peter\n\nWe're using the patched version of tomcat for all *.lecker.de and *.wunderweib.de domains, i.e. http://tinakochen.lecker.de.\nWe're talking about appr. 20Mio PI/month over all portals. Might not be heavy load, but it's pretty high load.\nThe patch made operation of the portals much easier and reduced the number of forced restarts of tomcat to one scheduled restart every night.\nPrior the patch we were heading towards 10-20 restarts of each of the two load balanced tomcats each day, resulting in temporarily unavailability of the whole site from time to time, because both tomcats have been automaticaly restarted in parallel ...", "is_private": false, "bug_id": 48358, "id": 135204, "time": "2010-03-09T15:19:44Z", "creator": "marko.kitzing@neofonie.de", "creation_time": "2010-03-09T15:19:44Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 136395, "attachment_id": null, "bug_id": 48358, "creation_time": "2010-04-25T08:21:56Z", "time": "2010-04-25T08:21:56Z", "text": "Thanks for the patch. It has been applied to 7.0.x and will be included in 7.0.0.\n\nI had to make a few changes:\n- correct indentation\n- add documentation\n- add AL2 headers"}, {"count": 10, "text": "Another Thanks goes to Christian Lorenz for helping me understand the Tomcat sources and integrate the changes.", "bug_id": 48358, "attachment_id": null, "id": 136490, "time": "2010-04-28T10:55:51Z", "creator": "isabel@apache.org", "creation_time": "2010-04-28T10:55:51Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 48358, "attachment_id": null, "id": 141757, "time": "2010-11-17T03:43:21Z", "creator": "cbrandel@gmx.de", "creation_time": "2010-11-17T03:43:21Z", "is_private": false, "text": "Any chances that this patch might make it into the 6.0.x line?"}, {"count": 12, "tags": [], "bug_id": 48358, "attachment_id": null, "id": 141792, "time": "2010-11-18T06:01:15Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2010-11-18T06:01:15Z", "is_private": false, "text": "Thanks for the reminder.\n\nThe patch has substantially changed since it has originally been applied to Tomcat 7. The updated patch for TC 6 is available at\n\nhttp://people.apache.org/~rjung/patches/BZ48358-JSP_Unloading-TC6_20101118.patch\n\nThe patch itself is low risk because the feature is off by default. Committers will have to decide whether we want to keep the feature as a new feature in TC 7, or whether the problem addressed is important enough to warrant applying it to TC 6. I proposed it for backport."}, {"count": 13, "tags": [], "bug_id": 48358, "is_private": false, "text": "Excellent, Rainer!\n\nExcuse my ignorance, if this is somehow obvious from the patch itself (this'll be my first patch): Against which version can this be applied? 6.0.29? 6.x trunk from SVN?\n\nThanks,\nChris", "id": 141903, "time": "2010-11-22T04:58:13Z", "creator": "cbrandel@gmx.de", "creation_time": "2010-11-22T04:58:13Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 48358, "is_private": false, "count": 14, "id": 141920, "time": "2010-11-22T09:18:24Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2010-11-22T09:18:24Z", "text": "As far as I remember it should apply cleanly to 6.0.29 and 6.0.x trunk (as of now). Try it and shout if it doesn't work."}, {"count": 15, "tags": [], "creator": "cbrandel@gmx.de", "attachment_id": null, "id": 142303, "time": "2010-12-02T10:00:12Z", "bug_id": 48358, "creation_time": "2010-12-02T10:00:12Z", "is_private": false, "text": "Tha patch applies cleanly to 6.0.29 from the src archive.\nHowever it does not work for me the way I expected it and I am still facing PermGen Out Of Memory errors.\n\n- The counters in the JspMonitor MBean for jspCount, jspReloadCount, jspUnloadCount, jspQueueLength were updated appropriately\n\n- When running with -XX:+TraceClassUnloading I did not see any org.apache.jsp.* classes being unloaded until I shut down the Tomcat process\n\n- Looking at a Heap Dump written at the time of the crash, I saw 337 instances of org.apache.jsp.xxx classes being held while I configured the maxLoadedJSPs to be 200\n\nAre there any additional settings that have to be adapted? My current settings are:\n\nJava 1.6 32bit on Windows 2003 Server with the following settings (memory parameters are set to small values to shorten the time until tomcat crashes)\n\n-Xms256m -Xmx256m\n-XX:MaxPermSize=48M\n-XX:+UseConcMarkSweepGC\n-XX:+CMSIncrementalMode\n-XX:+CMSClassUnloadingEnabled\n-XX:+CMSPermGenSweepingEnabled\n-XX:+PrintGCDetails\n-XX:+PrintGCTimeStamps\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath=E:\\logs\\wcmInternet\\ContentProxy1\\tomcat\n-Dorg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false\n-Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true\n-Dorg.apache.jasper.runtime.BodyContentImpl.USE_POOL=false\n-XX:+TraceClassUnloading\n\nGlobal web.xml:\n    <servlet>\n        <servlet-name>jsp</servlet-name>\n        <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>\t\n\t<init-param>\n            <param-name>fork</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <init-param>\n            <param-name>development</param-name>\n            <param-value>true</param-value>\n        </init-param>\n\t\t<init-param>\n            <param-name>enablePooling</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <init-param>\n            <param-name>modificationTestInterval</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>genStringAsCharArray</param-name>\n            <param-value>true</param-value>\n        </init-param>\n\t\t<init-param>\n            <param-name>xpoweredBy</param-name>\n            <param-value>false</param-value>\n        </init-param>\n        <init-param>\n            <param-name>maxLoadedJsps</param-name>\n            <param-value>200</param-value>\n        </init-param>\t\t\n        <load-on-startup>3</load-on-startup>\n    </servlet>\n\nSide note: If this is not the correct place to discuss this, I'm happy to continue it elsewhere."}, {"count": 16, "tags": [], "creator": "cbrandel@gmx.de", "attachment_id": null, "id": 142312, "time": "2010-12-02T11:35:07Z", "bug_id": 48358, "creation_time": "2010-12-02T11:35:07Z", "is_private": false, "text": "Update:\n\nI ran a similar test against the examples webapp with maxLoadedJsps set to 10. Right before and after a manually triggered GC there were 43 instances of org.apache.jsp. classes (jsps and some tag instances) in the heap dump.\nSo it looks to me as if somehow the classes are not unloaded.\n\n(In reply to comment #15)\n> Tha patch applies cleanly to 6.0.29 from the src archive.\n> However it does not work for me the way I expected it and I am still facing\n> PermGen Out Of Memory errors.\n> \n> - The counters in the JspMonitor MBean for jspCount, jspReloadCount,\n> jspUnloadCount, jspQueueLength were updated appropriately\n> \n> - When running with -XX:+TraceClassUnloading I did not see any org.apache.jsp.*\n> classes being unloaded until I shut down the Tomcat process\n> \n> - Looking at a Heap Dump written at the time of the crash, I saw 337 instances\n> of org.apache.jsp.xxx classes being held while I configured the maxLoadedJSPs\n> to be 200\n> \n> Are there any additional settings that have to be adapted? My current settings\n> are:\n> \n> Java 1.6 32bit on Windows 2003 Server with the following settings (memory\n> parameters are set to small values to shorten the time until tomcat crashes)\n> \n> -Xms256m -Xmx256m\n> -XX:MaxPermSize=48M\n> -XX:+UseConcMarkSweepGC\n> -XX:+CMSIncrementalMode\n> -XX:+CMSClassUnloadingEnabled\n> -XX:+CMSPermGenSweepingEnabled\n> -XX:+PrintGCDetails\n> -XX:+PrintGCTimeStamps\n> -XX:+HeapDumpOnOutOfMemoryError\n> -XX:HeapDumpPath=E:\\logs\\wcmInternet\\ContentProxy1\\tomcat\n> -Dorg.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING=false\n> -Dorg.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true\n> -Dorg.apache.jasper.runtime.BodyContentImpl.USE_POOL=false\n> -XX:+TraceClassUnloading\n> \n> Global web.xml:\n>     <servlet>\n>         <servlet-name>jsp</servlet-name>\n>         <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>    \n>     <init-param>\n>             <param-name>fork</param-name>\n>             <param-value>false</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>development</param-name>\n>             <param-value>true</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>enablePooling</param-name>\n>             <param-value>false</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>modificationTestInterval</param-name>\n>             <param-value>0</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>genStringAsCharArray</param-name>\n>             <param-value>true</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>xpoweredBy</param-name>\n>             <param-value>false</param-value>\n>         </init-param>\n>         <init-param>\n>             <param-name>maxLoadedJsps</param-name>\n>             <param-value>200</param-value>\n>         </init-param>        \n>         <load-on-startup>3</load-on-startup>\n>     </servlet>\n> \n> Side note: If this is not the correct place to discuss this, I'm happy to\n> continue it elsewhere."}, {"count": 17, "tags": [], "creator": "isabel@apache.org", "attachment_id": 26571, "id": 143754, "time": "2011-01-28T10:18:07Z", "bug_id": 48358, "creation_time": "2011-01-28T10:18:07Z", "is_private": false, "text": "Created attachment 26571\nTrivial fix for NPE problem for problem clarification\n\nAfter checking the changes made to the initial patch version I think I have found the main reason why unloading currently does not work as expected:\n\nIn org.apache.jasper.servlet.JspServlet in line 385 you call rctxt.addWrapper(...) which adds the jsp to the list of known jsps in the runtime context. However, for each wrapper the pointer to the unloadHandle is not updated before wrapper.service is called (same file, line 391).\n\nIn the org.apache.jasper.compilerJspRuntimeContext in \"checkUnload\" (which is triggered periodically) you iterate over the list of jsps, calling jsw.getUnloadHandle() in line 609. This method will return null, until wrapper.service has been called. As a result the unload loop crashes with an NPE in that case:\n\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor \nprocessChildren\nSCHWERWIEGEND: Exception invoking periodic operation:\njava.lang.NullPointerException at org.apache.jasper.util.FastRemovalDequeue$Entry.access$700(FastRemovalDequeue.java:250)\n         at org.apache.jasper.util.FastRemovalDequeue.remove(FastRemovalDequeue.java:173)\n         at org.apache.jasper.compiler.JspRuntimeContext.checkUnload(JspRuntimeContext.java:609)\n         at org.apache.jasper.servlet.JspServlet.periodicEvent(JspServlet.java:360)\n         at org.apache.catalina.core.StandardWrapper.backgroundProcess(StandardWrapper.java:660)\n         at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1393)\n         at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1403)\n         at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1403)\n         at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1403)\n         at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1382)\n         at java.lang.Thread.run(Thread.java:619)\n\n\nThe attached patch fixed the problem for us - however neither does it solve the root cause of the issue, nor am I certain that it works in general (e.g. there is another call to addWrapper in TagFileProcessor). Patch is merely for clarification than for fixing the issue."}, {"count": 18, "tags": [], "creator": "isabel@apache.org", "is_private": false, "id": 143755, "attachment_id": null, "bug_id": 48358, "creation_time": "2011-01-28T10:19:26Z", "time": "2011-01-28T10:19:26Z", "text": "See comment above."}, {"count": 19, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 144259, "time": "2011-02-14T11:38:25Z", "bug_id": 48358, "creation_time": "2011-02-14T11:38:25Z", "text": "One thought about limitations of this feature:\nas far as I remember, and as mentioned in the Javadoc comment for java.lang.String#intern(), all String constants are placed by JVM into the same global cache.\n\nUnloading the JSPs will not free those strings. Though if new versions of JSPs do not differ from the old ones in their text, there will be no noticeable consequences.\n\nSee also bug 50726.\n\n(In reply to comment #15)\n>         <init-param>\n>             <param-name>genStringAsCharArray</param-name>\n>             <param-value>true</param-value>\n>         </init-param>\n\nThere is a typo above. The correct name of the above init-param name is genStrAsCharArray. See comments in conf/web.xml or the code of EmbeddedServletOptions class."}, {"count": 20, "tags": [], "creator": "cbrandel@gmx.de", "attachment_id": null, "id": 146008, "time": "2011-04-26T10:22:35Z", "bug_id": 48358, "creation_time": "2011-04-26T10:22:35Z", "is_private": false, "text": "Konstantin:\n\nthere is no typo.\nAt least for Tomcat Version 7.0.12 it's not getStrAsCharArray but genStringAsCharArray. The only occurrence of the string \"getStrAsCharArray\" I can find is in the localization files (LocalStrings.properties  etc.).\n\nThe class org.apache.jasper.EmbeddedServletOptions contains: \n\nString genCharArray = config.getInitParameter(\"genStringAsCharArray\");\n\nComments in web.xml also refer to genStringAsCharArray."}, {"count": 21, "tags": [], "bug_id": 48358, "attachment_id": null, "is_private": false, "id": 152814, "time": "2012-01-15T21:56:52Z", "creator": "markt@apache.org", "creation_time": "2012-01-15T21:56:52Z", "text": "Moving to 6.0.x as this feature has been present in 7.0.x for some time."}, {"count": 22, "tags": [], "text": "I'm not so sure this problem is restricted to Tomcat 6.\n\nI encountered the same issues as Isabel Drost in comment #17 on a fresh Tomcat 7 install with jspIdleTimeout (and maxLoadedJsps) set.", "attachment_id": null, "bug_id": 48358, "id": 160886, "time": "2012-07-25T04:43:34Z", "creator": "trent.bartlem@gmail.com", "creation_time": "2012-07-25T04:43:34Z", "is_private": false}, {"count": 23, "text": "6.0.x is now end-of-line so I have not reviewed the 6.0.x code.\n\nThe 7.0.x code is working as expected. It has been checked via a manual test and a profiler (thanks again to YourKit) as well as by code inspection for the issues raised in the most recent comments.\n\nI am, therefore, marking this issue as fixed.", "bug_id": 48358, "attachment_id": null, "id": 197583, "time": "2017-03-10T13:06:57Z", "creator": "markt@apache.org", "creation_time": "2017-03-10T13:06:57Z", "tags": [], "is_private": false}]
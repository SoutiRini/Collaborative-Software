[{"count": 0, "tags": [], "bug_id": 2295, "attachment_id": null, "id": 3218, "time": "2001-06-22T17:09:37Z", "creator": "kyle@zxmail.com", "creation_time": "2001-06-22T17:09:37Z", "is_private": false, "text": "the Core Task jar does not work properly.  When using Sun's version of jar , if \nyou specify a manifest, that has Class-Path line longer than 70 characters then \nit automatically formats the line properly.  Where as ant's jar function just \ncopies the manifest file and does no manipulation to lines longer than 70 \ncharacters.  Below is an example of what my manifest file looked like using \nants jar process:\n\n****************  ANT manifest file  **************************\n\nClass-Path: Config.properties /software/xmls/jdom-\nb6/build/jdom.jar /software/xmls/ext/jms.jar /software/xmls/ext/mail.jar /softwa\nre/xmls/ext/activation.jar /software/xmls/ext/com.ibm.mq.jar /software/xmls/ext/\ncom.ibm.mqjms.jar /software/xmls/ext/providerutil.jar /software/xmls/ext/weblogi\nc.jar\n\n**********************************************************\nBelow is what it should look like, and what Sun's version of jar converts the \nClassPath line above to:\n\n******************  Sun's Version *********************\n\nClass-Path: Config.properties /software/xmls/jdom-b6/build/jdom.jar /s\n oftware/xmls/ext/jms.jar /software/xmls/ext/mail.jar /software/xmls/e\n xt/activation.jar /software/xmls/ext/com.ibm.mq.jar /software/xmls/ex\n t/com.ibm.mqjms.jar /software/xmls/ext/providerutil.jar /software/xml\n s/ext/weblogic.jar\n\n*******************************************************"}, {"count": 1, "tags": [], "bug_id": 2295, "attachment_id": null, "id": 3536, "time": "2001-07-10T01:14:30Z", "creator": "conor@apache.org", "creation_time": "2001-07-10T01:14:30Z", "is_private": false, "text": "Does this cause functionality problems or is it just that it doesn't look nice"}, {"count": 2, "tags": [], "bug_id": 2295, "attachment_id": null, "id": 3548, "time": "2001-07-10T08:47:13Z", "creator": "kyle@zxmail.com", "creation_time": "2001-07-10T08:47:13Z", "is_private": false, "text": "Yes it causes functionality problems, because if the classpath line does not \nwrap properly, then it only uses the first line and does not pick up the rest of \nthe stuff on the classpath and the program will not run properly...kyle"}, {"attachment_id": null, "tags": [], "creator": "jesse.glick@netbeans.com", "text": "Not sure what the last comment meant--if the line is not wrapped, surely it\ncannot be wrapped \"improperly\"--but anyway: the manifest specification says that\nlines must be wrapped at some number of characters, 70 or 72 I guess. And\njava.util.jar.Manifest does in fact perform this wrapping, and the JDK's jar\ntool uses it. That said, I do not know of any software which actually fails to\ncorrectly parse manifest lines of arbitrary length. Certainly Manifest class\nparses them fine even if they are long.", "count": 3, "id": 3555, "time": "2001-07-10T10:34:47Z", "bug_id": 2295, "creation_time": "2001-07-10T10:34:47Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 2295, "attachment_id": null, "id": 3557, "time": "2001-07-10T10:42:14Z", "creator": "kyle@zxmail.com", "creation_time": "2001-07-10T10:42:14Z", "is_private": false, "text": "Well when I use the ant jar process I get the results I posted earlier, where \nthe classpath doesn't wrap at 70-72, and when I try to run my application from \nthe jar file it doesnot work because it cannot find classes that are on the \nManifest file classpath but are not wrapped properly.  But when I manually jar \nthe file using Sun's jdk 1.3 it does properly wrap the Manifest classpath, and \nmy application runs fine from the jar file..."}, {"count": 5, "tags": [], "bug_id": 2295, "text": "OK, I had a look at the JDK source and it will fail on lines longer than 512. \nThe simplest would be to manipulate the manifests using the Manifest class \nthrough reflection (tedium). This would mean that jars generated by JDK 1.1 \nwould not have correct manifests.", "id": 3805, "time": "2001-07-18T07:25:03Z", "creator": "conor@apache.org", "creation_time": "2001-07-18T07:25:03Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 2295, "text": "Is it really difficult to do manually without use of java.util.jar.Manifest?\nRead each line in the manifest; if length > 72 or whatever, split into blocks of\nlength at most 71 and make into separate lines, each preceded by a single space.", "id": 3821, "time": "2001-07-18T12:18:57Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2001-07-18T12:18:57Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 2295, "attachment_id": null, "id": 4091, "time": "2001-07-28T07:17:23Z", "creator": "conor@apache.org", "creation_time": "2001-07-28T07:17:23Z", "is_private": false, "text": "Added a Minfest class to handle the wrapping of long lines, merging of \nManifests and validation of manifest files."}]
[{"count": 0, "tags": [], "bug_id": 57574, "attachment_id": 32462, "id": 180999, "creation_time": "2015-02-12T08:53:08Z", "time": "2015-02-12T08:53:08Z", "creator": "janb@webtide.com", "text": "Created attachment 32462\nImportHandler proposed patch\n\nThe code in javax.el.ImportHandler.importPackage(String name) tries to load a package, first via java.lang.Package.getPackage(name), and if that fails, via the thread context classloader getResource(name) instead.\n\nThe call to Package.getPackage(name) appears to return null under Equinox, not sure about other osgi environments.\n\nUnfortunately the call to the TCCL.getResource(name) also returns null, because the name does not have a trailing '/'. Eg \"javax/servlet\" should be \"javax/servlet/\".\n\nThe attached patch always adds a trailing '/' to the package name. The fix has been tested on a recent version of Equinox. \n\nregards\nJan", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 181000, "time": "2015-02-12T09:05:49Z", "bug_id": 57574, "creation_time": "2015-02-12T09:05:49Z", "is_private": false, "text": "So why isn't this a bug in Equinox? If you can point to a specification that says the trailing / is required then we can add it but otherwise this is going to get resolved as invalid."}, {"count": 2, "text": "This is some error-handling path in case if Package.getPackage(name) returned null. Is there a valid reason for getPackage() method to return null? From the comment in the code it looks that there is.\n\n> String path = name.replace('.', '/');\n> URL url = cl.getResource(path);\n\nI think that both approaches (with and without terminating '/') are invalid.\n\nI see no saying in ClassLoader.getResource() javadoc that this operation is applicable to directories.  The support of ending '/' may be dependent on the underlying file system. I.e.:\n\n- I think a file system is likely to behave independently of the trailing slash.\n\n- I think a JAR is likely to expect a trailing '/' if it was packed with explicit archive entries for directories. If there are no such entries in the archive then it is likely to return false 'null' answers.\n\n\nI propose to postpone the check until one actually tries to locate the class. It is for performance's sake, like it is already done with ImportHandler.importClass() method.", "bug_id": 57574, "is_private": false, "id": 181007, "time": "2015-02-12T15:51:06Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-02-12T15:51:06Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "creator": "janb@webtide.com", "attachment_id": null, "is_private": false, "id": 181033, "time": "2015-02-13T00:23:30Z", "bug_id": 57574, "creation_time": "2015-02-13T00:23:30Z", "text": "The behaviour of Package.getPackage(name) is to use the classloader of the caller of the package to try and retrieve the package info. In osgi-land the classloader of the caller may not be allowed to see that package because of strict osgi rules about class visbility. The caller was loaded from the javax.el bundle or the jasper bundle. Neither of those bundles can possibly have manifest dependencies on the packages that will be dynamically loaded by the jsp being compiled.\n\nAs far as the trailing '/' is concerned, I think Konstantin is on-the-money as the bundles are probably packed jars and I can see code in the Equinox impl that uses ZipFile/ZipEntry to look into the bundle, and IIRC those methods tend to like a trailing '/' to signify a directory.\n\nregards\nJan"}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 181050, "time": "2015-02-13T11:08:31Z", "bug_id": 57574, "creation_time": "2015-02-13T11:08:31Z", "text": "I removed the package existence check. The fix will be in 8.0.19 onwards.\n\nr1659505 in trunk, r1659506 in 8.0."}]
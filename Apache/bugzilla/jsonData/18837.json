[{"count": 0, "text": "When I research about encoding problems in POI,I found a bug in\norg.apache.poi.util.StringUtil#getFromUnicode().\n\nNow it breaks double bytes character codes,because the method is doing not same \nas StringUtil#getFromUnicodeHigh().", "bug_id": 18837, "attachment_id": null, "id": 34767, "time": "2003-04-09T04:01:01Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T04:01:01Z", "tags": [], "is_private": false}, {"count": 1, "text": "Created attachment 5721\nTestcase to find this problem.", "bug_id": 18837, "attachment_id": 5721, "id": 34768, "time": "2003-04-09T04:02:41Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T04:02:41Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 18837, "attachment_id": 5722, "id": 34769, "time": "2003-04-09T04:03:30Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T04:03:30Z", "is_private": false, "text": "Created attachment 5722\nPATCH to fix the problem."}, {"count": 3, "tags": [], "creator": "kamoshida.toshiaki@future.co.jp", "attachment_id": null, "is_private": false, "id": 34770, "time": "2003-04-09T04:09:51Z", "bug_id": 18837, "creation_time": "2003-04-09T04:09:51Z", "text": "I feel, the methods #getFromUnicode() and #getFromUnicodeHigh() don't have to \ndo like now,a little difficult.\n\nThe easy way to make response is;\nreturn String(string,offset,len*2,\"UTF-16BE\");\nand\nreturn string(string,offset,len*2,\"UTF-16LE\");\n\nHow about it:D?"}, {"count": 4, "tags": [], "bug_id": 18837, "attachment_id": null, "text": ">return String(string,offset,len*2,\"UTF-16BE\");\nreturn new String(string,offset,len*2,\"UTF-16BE\");\n>return string(string,offset,len*2,\"UTF-16LE\");\nreturn new String(string,offset,len*2,\"UTF-16LE\");\n\nBTW,\nXP!\nStringUtils#putUncompressedUnicodeHigh() contains a bug clearly...\n\npublic static void putUncompressedUnicodeHigh(final String input,\n        final byte[] output,\n        final int offset) {\n        int strlen = input.length();\n        for (int k = 0; k < strlen; k++) {\n            char c = input.charAt(k);\n>           output[offset + (2 * k)] = (byte) (c >> 8);\n>           output[offset + (2 * k)] = (byte) c;\n//what is this???\n        }\n}\n\nI feel it is no need any testcase to fix it...\n", "id": 34778, "time": "2003-04-09T09:22:18Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T09:22:18Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 18837, "attachment_id": null, "text": "we once did use the new string with UTF-16LE etc..  It didn't work.  I believe\nthe UTF-8 and UTF-16 constants are a misnomer.  They really just mean \"16 bit or\n8 bit characterset\"", "id": 34790, "time": "2003-04-09T12:33:12Z", "creator": "poi-support@buni.org", "creation_time": "2003-04-09T12:33:12Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 18837, "attachment_id": null, "is_private": false, "id": 34808, "time": "2003-04-09T14:32:35Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T14:32:35Z", "text": "Oh,really?\nBut in my local testcase,it works correctly reading/writing Excel file.\n\nI feel,maybe you mistook how to use it...\n\n\"UTF-16\" Encoder/Decoder causes some special effects.\nWhen decode byte arrays to String,check the head 2bytes indicator of Endian and \ndecide the rest is Big Endian\"UTF-16BE\" or Little Endian\"UTF-16LE\",if the head \nis not indicator bytes,JVM decide to decode all byte arrays (contains the head \n2bytes)as Big Endian \"UTF-16BE\".\n\nAnd when encode String to byte arrays, JVM allways add 2byte as the indicator \nof Endian to the head of byte arrays, and encode the rest with Big Endian \"UTF-\n16BE\".\n\nSo if you use \"UTF-16\" as charset indicator,you must care about thease side \neffects.\"UTF-16\" works NOT SYMMETRICAL when decode and encode String,especially \nbyte array is encoded by \"UTF-16LE\" with no Endian indicator bytes like the \ncharacter sequences in Excel files.\n\nBut,\"UTF-16BE\" and \"UTF-16LE\" don't do like so.Thease rules are simply do like \nStringUtil is now doing(This is in a part of J2SE API specification,so we don't \nhave to care it is depend on env).So we can use thease encoding indicator as a \nrules to encode/decode byte arrays with no such effects.It works byte array \ncontains;\n[16BitUnicode high byte][16BitUnicode low byte]...->\"UTF16-BE\"\n[16BitUnicode low byte][16BitUnicode high byte]...->\"UTF16-LE\"\n\nI see the character sequences in Excel is 16Bit Unicode with Little Endian,\nexcept the string is COMPRESSED_UNICODE(8bit).\nSo in theory,it will works correctly,and I checked it works good.\n\nI'll submit a sample patch of StringUtil,so please test it in your env.\n\nBTW,\nI feel many people usinig ASCII characters as natural language often \nmisunderstand the thing,\"UTF-8\" is not 8bit character encoding.\nThis rule encode 1 charcter to 1~3bytes.ASCII character is encoded to 1byte \nlike \"ISO-8859-1\",but many Japanese and other DBCS on 16Bit Unicode character \nis encoded to 2 or 3bytes per 1char.The length of byte array is variable,depend \non each caracter's code.\"8\" don't means \"8bit per 1char\":D\n"}, {"count": 7, "tags": [], "creator": "kamoshida.toshiaki@future.co.jp", "attachment_id": 5735, "is_private": false, "id": 34809, "time": "2003-04-09T14:40:22Z", "bug_id": 18837, "creation_time": "2003-04-09T14:40:22Z", "text": "Created attachment 5735\nPatches to show,charset indicator works good."}, {"count": 8, "tags": [], "bug_id": 18837, "attachment_id": null, "is_private": false, "id": 34814, "time": "2003-04-09T15:25:03Z", "creator": "kamoshida.toshiaki@future.co.jp", "creation_time": "2003-04-09T15:25:03Z", "text": "The patch I submitted at 2003-04-09 04:03 is to fix simple bug at \norg.apache.poi.util.StringUtil#getFromUnicode().\nAnd the comment I submitted at 2003-04-09 09:22 is reporting another bug.\n\nPlease evaluate thease,it is not related to my LONG comment..."}, {"count": 9, "text": "please put the new file in a directory preserving zip relative to jakarta-poi\nmodule and I'll then apply it (provided the unit tests pass, etc).  ", "bug_id": 18837, "attachment_id": null, "id": 34930, "time": "2003-04-11T03:06:52Z", "creator": "poi-support@buni.org", "creation_time": "2003-04-11T03:06:52Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "kamoshida.toshiaki@future.co.jp", "attachment_id": 5786, "id": 34931, "time": "2003-04-11T03:32:46Z", "bug_id": 18837, "creation_time": "2003-04-11T03:32:46Z", "is_private": false, "text": "Created attachment 5786\nPatches and testcases are zipped.(patching StringUtil and added 4 testcase to TestStringUtil)"}, {"count": 11, "text": "doh...  I dropped the ball on this one.", "bug_id": 18837, "attachment_id": null, "id": 41370, "time": "2003-07-24T16:10:20Z", "creator": "poi-support@buni.org", "creation_time": "2003-07-24T16:10:20Z", "tags": [], "is_private": false}, {"count": 12, "text": "The patch was applied long ago. I'm closing it this bug.\nPlease try the latest POI 3.5-beta4.\n\nYegor", "bug_id": 18837, "attachment_id": null, "id": 123514, "time": "2008-12-25T10:33:54Z", "creator": "yegor@dinom.ru", "creation_time": "2008-12-25T10:33:54Z", "tags": [], "is_private": false}]
[{"count": 0, "text": "In my Scenario I need a custom Logger and RootLogger so I created one accordingly, let's call it CustomLogger and RootCustomLogger. Now, when I try to use my newly created logger in the following way:\n\nHierarchy h = new Hierarchy(new RootCustomLogger((Level)Level.DEBUG));\nLogManager.setRepositorySelector(new DefaultRepositorySelector(h), null);\nDOMConfigurator.configure(someURL);\n\nI noticed that the default RootLogger is first loaded and configured in the static  initialization block. However, when the new DefaultRepositorySelector is set in the LogManager.setRepositorySelector method, no clean-up of the old RootLogger, contained in the former DefaultRepositorySelector is done. \n\nThis can cause a problem if any of the configured Appenders is still holding resources like file handles (the RollingFileAppender is a good example for that).\n\nIn my case, I just inserted the following statement in the LogManager.setRepositorySelector method, before the new RepositorySelector is assigned to the repositorySelector field in the last line of the method:\n\n// if the root logger didn't change, no reason to do that, I guess.       if(!selector.getLoggerRepository().getRootLogger().equals(LogManager.getRootLogger())){\n   LogManager.getRootLogger().removeAllAppenders();\n}\n\nNot sure, if there are any further clean ups necessary, but for me it does the trick.", "bug_id": 44557, "is_private": false, "id": 114413, "time": "2008-03-07T06:01:44Z", "creator": "mirkojahn@gmail.com", "creation_time": "2008-03-07T06:01:44Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 44557, "text": "Could you elaborate on why you want a custom root logger?", "id": 119294, "time": "2008-08-02T15:10:42Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T15:10:42Z", "is_private": false, "attachment_id": null}]
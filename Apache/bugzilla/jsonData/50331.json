[{"count": 0, "tags": [], "creator": "steve@ebiggs.ca", "attachment_id": 26336, "text": "Created attachment 26336\nSample Excel file with macro\n\nOverview: \n\nOpening existing HSSFWorkbook that was created using Excel and contains a macro\nand then writing the workbook to a new file causes the macro project to be lost when opening the spreadsheet in Excel.\n\nSteps to Reproduce:\n\n1. Create a workbook using Excel application.  Create a macro within the workbook.\n2. Access workbook in Java using new HSSFWorkbook().\n3. Write the workbook (no changes need to be made) to a new file.\n4. Open newly saved workbook in Excel application.  Select enabled macros when prompted.\n\nActual Results: \n\nExcel opens and presents security warning asking whether to enable or disable macros (this is normal).  After selecting enable macros Excel presents a dialog that says \"File not found\".  Click ok on this dialog and Excel presents a new dialog that says \"Excel found unreadable content in \"test out.xls\".  Do you want to recover the contents of this workbook?  If you trust the source of this workbook, click Yes.\"  After clicking yes Excel presents another security warning.  Click enable macros and a final dialog reports \"Errors were detected in \"test out.xls\" but Microsoft Office Excel was able to open the file by making the repairs listed below.\".  The repair listed in the dialog is \"Lost Visual Basic project\".  Close this dialog.\n\nThe contents of the worksheet appear correct, but go to Tools->Macro->Visual Basic Editor and the VBA project is gone.\n\nExpected Results:\n\nExcel should open the file without any errors.  The VBA project should be accessible.\n\nBuild Date & Platform: \n\nPOI 3.7 beta3 2010-09-24\nWindows XP Service Pack 3\nMicrosoft Office Excel 2003 SP3 (11.8324.8324)\n\nAdditional Information: \n\nAttached sample Excel file.\n\nJava sample code:\n\npublic class TestHSSF {\n   public static void main(String[] args) throws IOException {\n      InputStream inputFile=null;\n      FileOutputStream outputFile=null;\n      inputFile=new FileInputStream(\"C:\\\\Documents and Settings\\\\Administrator\\\\Desktop\\\\test.xls\");\n      HSSFWorkbook wb=new HSSFWorkbook(new POIFSFileSystem(inputFile),false);\n\t\t\t\n      outputFile=new FileOutputStream(\"C:\\\\Documents and Settings\\\\Administrator\\\\Desktop\\\\test out.xls\");\n      wb.write(outputFile);\n      outputFile.close();\n      inputFile.close();\n   }\n}", "id": 141980, "time": "2010-11-24T17:12:43Z", "bug_id": 50331, "creation_time": "2010-11-24T17:12:43Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "yegor@dinom.ru", "text": "Pass 'true' as the second parameter in the constructor HSSFWorkbook(InputStream is, boolean preserveNodes) and you will be good. Or better use the default constructor HSSFWorkbook(InputStream is).\n\nExcel file is a compound OLE2 document and the workbook stream and macros are nodes of the OLE2 document.  The second boolean parameter tells POI whether to preserve nodes other than Workbook, such as  macros. Passing 'false' truncates the OLE2 file system to only the Workbook stream and document properties which is exactly what is happening in your case. \n\nYegor", "id": 142600, "time": "2010-12-12T07:25:59Z", "bug_id": 50331, "creation_time": "2010-12-12T07:25:59Z", "tags": [], "is_private": false}]
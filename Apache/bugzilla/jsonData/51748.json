[{"count": 0, "tags": [], "creator": "lowprio20@gmail.com", "text": "I think the version 2.2.19 behavior is correct.\nSee RFC 2616 section 14.35.1 \"Byte Ranges\".\n\n\nRequest and response sample in each versions.\n===== version 2.2.20\nGET / HTTP/1.1\nHost: localhost\nRange: bytes=-1\n\nHTTP/1.1 206 Partial Content\nServer: Apache/2.2.20 (Unix)\nAccept-Ranges: bytes\nContent-Length: 2\nContent-Range: bytes 0-1/10240\nContent-Type: text/html\n\n===== version 2.2.19\nGET / HTTP/1.1\nHost: localhost\nRange: bytes=-1\n\nHTTP/1.1 206 Partial Content\nServer: Apache/2.2.19 (Unix)\nAccept-Ranges: bytes\nContent-Length: 1\nContent-Range: bytes 10239-10239/10240\nContent-Type: text/html\n=====\n\n\nFix patch for version 2.2.20 release.\n=====\ndiff -Nur httpd-2.2.20-orig/modules/http/byterange_filter.c httpd-2.2.20/modules/http/byterange_filter.c\n--- httpd-2.2.20-orig/modules/http/byterange_filter.c   2011-08-30 00:59:39.000000000 +0900\n+++ httpd-2.2.20/modules/http/byterange_filter.c        2011-09-01 15:05:44.000000000 +0900\n@@ -501,7 +501,7 @@\n             break;\n         }\n\n-        if (dash == range) {\n+        if (dash == cur) {\n             /* In the form \"-5\" */\n             if (apr_strtoff(&number, dash+1, &errp, 10) || *errp) {\n                 break;\n=====", "id": 148942, "time": "2011-09-01T06:48:01Z", "bug_id": 51748, "creation_time": "2011-09-01T06:48:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 51748, "attachment_id": null, "is_private": false, "id": 148943, "time": "2011-09-01T10:26:32Z", "creator": "rpluem@apache.org", "creation_time": "2011-09-01T10:26:32Z", "text": "You are correct. Fixed in trunk as r1163985."}, {"count": 2, "tags": [], "bug_id": 51748, "attachment_id": null, "is_private": false, "id": 149187, "time": "2011-09-13T12:52:07Z", "creator": "thoger@redhat.com", "creation_time": "2011-09-13T12:52:07Z", "text": "There is one special case here: -0\n\nRFC does not define that case as syntactically invalid.  My reading is that it's considered valid but unsatisfiable (If a syntactically valid byte-range-set includes ... at least one suffix-byte-range-spec with a non-zero suffix-length, then the byte-range-set is satisfiable.).\n\nThe latest httpd behaviour is to handle that as invalid, hence ignore Range header and return 200.  That's quite reasonable, given that -0 is not any better than invalid 10-9.  Just noting here so it can be decided if it should stay as is or be changed to be more rfc-compliant.  Required change seems trivial (allowing number >= 0).\n\nAnd maybe I'm just reading the RFC wrong."}, {"count": 3, "tags": [], "bug_id": 51748, "attachment_id": null, "is_private": false, "id": 149380, "time": "2011-09-17T15:22:17Z", "creator": "sf@sfritsch.de", "creation_time": "2011-09-17T15:22:17Z", "text": "Fixed in 2.2.21"}, {"count": 4, "tags": [], "creator": "thoger@redhat.com", "text": "Regarding comment #2, I wonder if it's been overlooked, or whatever the behaviour (invalid vs. unsatisfiable) is for the meaningless case is considered fine.  Should I do separate bug for it?  Thanks!", "id": 151476, "time": "2011-11-14T13:04:18Z", "bug_id": 51748, "creation_time": "2011-11-14T13:04:18Z", "is_private": false, "attachment_id": null}]
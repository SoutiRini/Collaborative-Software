[{"count": 0, "tags": [], "creator": "tallison@mitre.org", "attachment_id": 30199, "is_private": false, "id": 166639, "time": "2013-04-16T01:40:12Z", "bug_id": 54849, "creation_time": "2013-04-16T01:40:12Z", "text": "Created attachment 30199\nexample file with content that cannot be extracted with 3.9-stable\n\nSome docx files with controlled content/forms content are not being properly processed.  The result is that it is not possible to extract text from the controlled content fields currently (at least with stable 3.9).  \n\nThe technical issue is that some docx files place the content paragraphs under the SdtBlock.  When loading the file, the cursor only looks for paragraphs and tables right below body; the current cursor is not configured to look for paragraphs and/or tables below the first level below body."}, {"count": 1, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "is_private": false, "id": 166640, "time": "2013-04-16T01:43:09Z", "bug_id": 54849, "creation_time": "2013-04-16T01:43:09Z", "text": "A quick fix is to add:\n\n\nelse if ( o instanceof CTSdtBlock){\n                \tCTSdtBlock block = (CTSdtBlock)o;\n                \tCTSdtContentBlock content = block.getSdtContent();\n                \tList<CTP> ctps = content.getPList();\n                \t\n                \tfor (CTP ctp : ctps){\n                \t\t XWPFParagraph p = new XWPFParagraph((CTP) ctp, this);\n                         bodyElements.add(p);\n                         paragraphs.add(p);\n                \t}\n                \tList<CTTbl> cttables = content.getTblList();\n                \tfor (CTTbl table : cttables){\n                        XWPFTable t = new XWPFTable((CTTbl) table, this);\n                        bodyElements.add(t);\n                        tables.add(t);\n                \t}\n                }\n\nafter:\n else if (o instanceof CTTbl) {\n                    XWPFTable t = new XWPFTable((CTTbl) o, this);\n                    bodyElements.add(t);\n                    tables.add(t);\n                }\n\nin XWPFDocument's onDocumentRead\n\nIf someone can help me add a few files to poi-ooxml-schemas from the larger ooxml-schemas-1.1.jar, I'll be happy to submit a formal patch."}, {"count": 2, "tags": [], "bug_id": 54849, "attachment_id": 30203, "id": 166657, "time": "2013-04-16T17:14:18Z", "creator": "tallison@mitre.org", "creation_time": "2013-04-16T17:14:18Z", "is_private": false, "text": "Created attachment 30203\n[PATCH] POI 54849\n\nProposed patch is attached.  In the long run, it'd be great to build out the controlled content/form object (on par with XWPFParagraph and XWPFTable), but for now, this will at least read the text within one into the paragraphs, tables and bodyelements lists.\n\nAny recommendations?"}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 166662, "time": "2013-04-16T21:03:49Z", "bug_id": 54849, "creation_time": "2013-04-16T21:03:49Z", "is_private": false, "text": "(In reply to comment #1)\n > If someone can help me add a few files to poi-ooxml-schemas from the larger\n> ooxml-schemas-1.1.jar, I'll be happy to submit a formal patch.\n\nAdd a unit test which causes the extra CT classes to be used, and they'll be automatically included when you run the jar ant task"}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 166664, "time": "2013-04-16T21:06:56Z", "bug_id": 54849, "creation_time": "2013-04-16T21:06:56Z", "text": "(In reply to comment #2)\n> Created attachment 30203 [details]\n> [PATCH] POI 54849\n> \n> Proposed patch is attached.  In the long run, it'd be great to build out the\n> controlled content/form object (on par with XWPFParagraph and XWPFTable),\n> but for now, this will at least read the text within one into the\n> paragraphs, tables and bodyelements lists.\n> \n> Any recommendations?\n\nI think it might be best to add a very simple body element for the controlled content, and have the inner paragraphs+tables made available from that. That would seem to be the most future proof way to go, as we can then add in future logic / information on the controlled content later, without changing the behaviour. If we do a simple parsing now and pop the text into the regular list, then when we come to add proper support we'd risk breaking existing code by causing the location of the text objects to move in the body hierarchy."}, {"count": 5, "tags": [], "bug_id": 54849, "is_private": false, "text": "Agreed that that is much cleaner. XWPFControlledContent implements IBody?(In reply to comment #3)\n> (In reply to comment #1)\n>  > If someone can help me add a few files to poi-ooxml-schemas from the\n> larger\n> > ooxml-schemas-1.1.jar, I'll be happy to submit a formal patch.\n> \n> Add a unit test which causes the extra CT classes to be used, and they'll be\n> automatically included when you run the jar ant task\nThank you!", "id": 166667, "time": "2013-04-16T23:19:05Z", "creator": "tallison@mitre.org", "creation_time": "2013-04-16T23:19:05Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "id": 166668, "time": "2013-04-16T23:25:55Z", "bug_id": 54849, "creation_time": "2013-04-16T23:25:55Z", "is_private": false, "text": "(In reply to comment #4)\n> (In reply to comment #2)\n> > Created attachment 30203 [details]\n> > [PATCH] POI 54849\n> > \n> > Proposed patch is attached.  In the long run, it'd be great to build out the\n> > controlled content/form object (on par with XWPFParagraph and XWPFTable),\n> > but for now, this will at least read the text within one into the\n> > paragraphs, tables and bodyelements lists.\n> > \n> > Any recommendations?\n> \n> I think it might be best to add a very simple body element for the\n> controlled content, and have the inner paragraphs+tables made available from\n> that. That would seem to be the most future proof way to go, as we can then\n> add in future logic / information on the controlled content later, without\n> changing the behaviour. If we do a simple parsing now and pop the text into\n> the regular list, then when we come to add proper support we'd risk breaking\n> existing code by causing the location of the text objects to move in the\n> body hierarchy.\n\nAgreed. Makes it much cleaner.  \n\nNot much time to burn on this...maybe by end of next week for first draft."}, {"count": 7, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "id": 166787, "time": "2013-04-23T12:51:49Z", "bug_id": 54849, "creation_time": "2013-04-23T12:51:49Z", "is_private": false, "text": "(In reply to comment #4)\n> (In reply to comment #2)\n> > Created attachment 30203 [details]\n> > [PATCH] POI 54849\n> > \n> > Proposed patch is attached.  In the long run, it'd be great to build out the\n> > controlled content/form object (on par with XWPFParagraph and XWPFTable),\n> > but for now, this will at least read the text within one into the\n> > paragraphs, tables and bodyelements lists.\n> > \n> > Any recommendations?\n> \n> I think it might be best to add a very simple body element for the\n> controlled content, and have the inner paragraphs+tables made available from\n> that. That would seem to be the most future proof way to go, as we can then\n> add in future logic / information on the controlled content later, without\n> changing the behaviour. If we do a simple parsing now and pop the text into\n> the regular list, then when we come to add proper support we'd risk breaking\n> existing code by causing the location of the text objects to move in the\n> body hierarchy.\n\nAgree on future-proofing.  I'm trying to think of the smallest changes possible as a first step.  It looks like:\n\nNew classes:\nXWPFControlledContent implements IBodyElement\nXWPFControlledContentBlock implements IBody\n\nAdd entries to BodyType and ElementType\n\nAdd to IBody interface:\ngetControlledContents()\ngetControlledContentArray()\n\nI think we'll need to make changes to all classes that implement IBody's getBodyElements().\n\nFor all classes that implement IBody, we'll need to add the new methods.\n\nDoes this seem like a reasonable first step?  \nIs there a simpler option?\nIs it ok if I leave stubs for dynamically adding controlled content (I propose \"read only\" from an existing docx for this patch)."}, {"text": "We'll also have to make XWPFControlledContent equivalent to a run.", "tags": [], "bug_id": 54849, "is_private": false, "count": 8, "id": 166847, "time": "2013-04-25T10:56:36Z", "creator": "tallison@mitre.org", "creation_time": "2013-04-25T10:56:36Z", "attachment_id": null}, {"text": "For an easy start, don't implement getControlledContents() and friends - just rely on people finding them from the IBody getBodyElements() method. That should make things simpler and minimise the code changes needed to get started. Otherwise, looks a good plan!", "tags": [], "bug_id": 54849, "is_private": false, "count": 9, "id": 167062, "time": "2013-05-06T16:49:57Z", "creator": "apache@gagravarr.org", "creation_time": "2013-05-06T16:49:57Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "Created attachment 30268\nRound 2 patch, with interfaces and room to grow\n\nTried to modify as little as possible.  Still wound up modifying more that I would have liked.  Plenty of room to clean up the stub interfaces.  Recommendations?", "attachment_id": 30268, "bug_id": 54849, "id": 167127, "time": "2013-05-10T01:38:56Z", "creator": "tallison@mitre.org", "creation_time": "2013-05-10T01:38:56Z", "is_private": false}, {"count": 11, "tags": [], "creator": "tallison@mitre.org", "attachment_id": 30289, "id": 167248, "time": "2013-05-16T17:34:21Z", "bug_id": 54849, "creation_time": "2013-05-16T17:34:21Z", "is_private": false, "text": "Created attachment 30289\nRound 3 patch\n\nAdded headers, footers, footnotes and endnotes."}, {"count": 12, "tags": [], "bug_id": 54849, "attachment_id": 30289, "id": 167249, "time": "2013-05-16T17:38:32Z", "creator": "tallison@mitre.org", "creation_time": "2013-05-16T17:38:32Z", "is_private": false, "text": "Comment on attachment 30289\nRound 3 patch\n\nupdated metadata = patch"}, {"count": 13, "tags": [], "text": "This issue was just raised as a bug in Tika (https://issues.apache.org/jira/browse/TIKA-1130?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel).  If anyone has some time to review my patch, that would be much appreciated.  Thank you!", "is_private": false, "bug_id": 54849, "id": 167688, "time": "2013-06-05T23:47:52Z", "creator": "tallison@mitre.org", "creation_time": "2013-06-05T23:47:52Z", "attachment_id": null}, {"text": "I've finally had a chance to review this, and on the whole it looks great, thanks!\n\nA couple of minor points though:\n * We don't normally use @author tags in the code. The code is maintained, supported and extended by the whole community, so it's best not to give the impression that only one person \"owns\" a bit of code\n * It's generally best to have whitespace fixing up in a different patch/commit (where possible). Otherwise, it's harder to review the patch for the code changes, as they end up lost amidst the noise...\n\nI'm minded to try to fix the whitespace stuff, commit that, then ask you to svn up and then produce an updated patch with just the logic changes in it. Would that work ok for you?", "tags": [], "bug_id": 54849, "attachment_id": null, "count": 14, "id": 167803, "time": "2013-06-13T11:34:12Z", "creator": "apache@gagravarr.org", "creation_time": "2013-06-13T11:34:12Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 54849, "attachment_id": null, "id": 167807, "time": "2013-06-13T16:36:07Z", "creator": "tallison@mitre.org", "creation_time": "2013-06-13T16:36:07Z", "is_private": false, "text": "Nick, Great.  Thank you!\n\nOn the authorship attribution, I was following the checklist (http://poi.apache.org/guidelines.html) \n\u2022the code includes the @author tag on any files you've altered or created.\n\nI completely agree with you, though, and will remove author tags.\n\nI don't wnat to take up your time with the spacing.  I'd like to get the spacing right.  Is the issue too many newlines/deleted new lines, or did I convert tabs to spaces or add too many spaces per line?  Or are both going on?  I'll repull and run the patch against the pull to see, but if you could offer feedback, that'd be great.\n\nFinally, at the end of the Round 3 patch, I realized that I left one case not covered: a table cell can be equivalent to an SDT.  Should I add that in the same way that I've added the equivalence to paragraphs and runs?  Or should I save that for a follow on patch? My preference is that the current version (with space/author attrib fixed) be committed asap, and then I'll do some follow on work.  Let me know your preference.\n\nThank you, again."}, {"text": "Whoops, those guidelines are rather out of date... I've just had a quick stab at updating them based on what we've tended to do over the last couple of years. Hopefully that'll help!\n\nI'll blitz through some of the more obvious whitespace bits shortly, then please re-do your patch if possible. XWPF has been contributed to by a wide range of people, and without code style documented it can be a bit of a hodge-podge!", "tags": [], "bug_id": 54849, "attachment_id": null, "count": 16, "id": 167808, "time": "2013-06-13T18:19:52Z", "creator": "apache@gagravarr.org", "creation_time": "2013-06-13T18:19:52Z", "is_private": false}, {"count": 17, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 167809, "time": "2013-06-13T18:53:32Z", "bug_id": 54849, "creation_time": "2013-06-13T18:53:32Z", "text": "As of r1492818, most of the more obvious javadoc mistakes and whitespace inconsistencies in the files you're working on should be fixed. Please rebase you patch on that and send us a new one, so we can commit the real logic!"}, {"text": "Created attachment 30432\nRound 4 patch\n\nAdded back logic.  Let me know if this works.  Thank you, Nick!", "tags": [], "bug_id": 54849, "is_private": false, "count": 18, "id": 167820, "time": "2013-06-14T17:28:46Z", "creator": "tallison@mitre.org", "creation_time": "2013-06-14T17:28:46Z", "attachment_id": 30432}, {"count": 19, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 167907, "time": "2013-06-18T23:35:23Z", "bug_id": 54849, "creation_time": "2013-06-18T23:35:23Z", "text": "XWPFRun - had to keep getParagraph and the constructor to maintain backwards compatibility\n\nFootnote doubling in xwpfdocument - I've kept that bit out. Will go into another commit shortly...\n\nIRunBody + IRunElement + friends - javadoc moved to class, and expanded out\n\nXWPFTable - removed commented system.err\n\nJava 1.6-isms fixed\n\nThanks! Committed as described in r1494376."}, {"count": 20, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 167909, "time": "2013-06-18T23:40:07Z", "bug_id": 54849, "creation_time": "2013-06-18T23:40:07Z", "text": "Footnote doubling fix added in r1494379. Please could you update the associated bug(s) to mark them as resolved / flag them as needing their unit tests applying?"}, {"text": "Nick,\n  Thank you for your guidance, review and edits and, of course, for committing this patch!  I added a simple testcase for 55066 and marked it resolved.  If you could commit that testcase, that'd be great.  Apologies if I should have left it as \"unit test needs to be applied.\"  Thank you, again.", "tags": [], "bug_id": 54849, "attachment_id": null, "count": 21, "id": 167922, "time": "2013-06-20T00:11:47Z", "creator": "tallison@mitre.org", "creation_time": "2013-06-20T00:11:47Z", "is_private": false}]
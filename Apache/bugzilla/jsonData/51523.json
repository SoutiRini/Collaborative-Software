[{"count": 0, "tags": [], "bug_id": 51523, "attachment_id": 27296, "is_private": false, "id": 147973, "time": "2011-07-18T09:32:17Z", "creator": "alonso.domin@gmail.com", "creation_time": "2011-07-18T09:32:17Z", "text": "Created attachment 27296\nLocalhost log file\n\nTomcat 7 fails to find listener class defined in TLD.\n\nTag library is packaged inside folder \"META-INF\" of one the libraries deployed with the webapp. Tomcat seems to read perfectly the tag library definition but throws a \"ClassNotFoundException\" when trying to invoke the listener class, which exists and it's contained in same jar file as the tag library definition.\n\nSame application starts up perfectly with Tomcat 6.x."}, {"count": 1, "tags": [], "text": "This works for me with a simple test case and I'd be surprised if the TCKs didn't cover this as well (although I haven't checked).\n\nThis is most likely a configuration error, possibly an issue with the TLD and/.or web.xml since Tomcat 7 is stricter about validating these.", "attachment_id": null, "bug_id": 51523, "id": 148005, "time": "2011-07-19T13:47:15Z", "creator": "markt@apache.org", "creation_time": "2011-07-19T13:47:15Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 51523, "attachment_id": null, "id": 148006, "time": "2011-07-19T13:54:41Z", "creator": "alonso.domin@gmail.com", "creation_time": "2011-07-19T13:54:41Z", "is_private": false, "text": "I should be more specific in my previous post. As you can see at logfile the exception message is:\n\njava.lang.ClassNotFoundException: \n            net.sf.jasperreports.jsf.config.ConfigurationStartupListener\n\nand the listener definition in TLD is as follows:\n\n<listener>\n    <listener-class>\n        net.sf.jasperreports.jsf.config.ConfigurationStartupListener\n    </listener-class>\n</listener>\n\nSo, Tomcat 7 is not trimming blanks at the string which has been read from the TLD file. I think it should be considered as a bug no matter how stricter Tomcat 7 had become validating the TLD file, since TLD is still valid with or without those blanks."}, {"count": 3, "tags": [], "bug_id": 51523, "attachment_id": null, "id": 148008, "time": "2011-07-19T14:12:24Z", "creator": "markt@apache.org", "creation_time": "2011-07-19T14:12:24Z", "is_private": false, "text": "This works for me with the blanks present as well.\n\nThis still looks like a configuration error and the users list is the place to get help."}, {"count": 4, "attachment_id": null, "creator": "alonso.domin@gmail.com", "is_private": false, "id": 148009, "time": "2011-07-19T14:29:12Z", "bug_id": 51523, "creation_time": "2011-07-19T14:29:12Z", "tags": [], "text": "Sorry for being so pedant, but I'm not asking for help, I'm reporting a bug because if I modify the TLD inside the jar file (removing blanks), repack it and deploy the same webapp with the modified jar, then the application is started up without problems. I didn't posted previously whithout check that first.\n\nPlease, review the code at the component which loads TLD files since I'm pretty sure that it is not trimming blanks a that string.\n\nI'm using Tomcat 7.0.16 and this library:\nhttps://sourceforge.net/projects/jasperreportjsf/\n\nKind regards."}, {"count": 5, "tags": [], "bug_id": 51523, "attachment_id": null, "is_private": false, "id": 148010, "time": "2011-07-19T15:49:55Z", "creator": "markt@apache.org", "creation_time": "2011-07-19T15:49:55Z", "text": "Hmm. I still can't reproduce this even with that library.\n\nTrying with 7.0.16 rather than trunk...\n\nThat reproduced it. Very odd. I don't recall any changes since 7.0.16 that fixed this. Trying with 7.0.19. That also reproduces it... Even stranger. The changes between 7.0.19 and trunk are minimal and seem unrelated to this. Still digging..."}, {"count": 6, "tags": [], "bug_id": 51523, "is_private": false, "text": "Tracked it down.\n\nThe TLD provided by the JAR you are using is invalid. If you follow the definitions in the XSDs you'll eventually see that leading and trailing whitespace should not be present.\n\nSince this is an invalid TLD Tomcat will not be adding a work-around for this. Tomcat very rarely adds workarounds for bugs in third-party applications/libraries.\n\nThe reason I wasn't seeing it is that I always run Tomcat with -Dorg.apache.catalina.STRICT_SERVLET_COMPLIANCE=\"true\"\nAmongst other things, this configures the XML parsers to use the slower but specification compliant settings of validation=true and namespaceAware=true. With these settings the parsers remove leading and trailing whitespace.\n\nOne work-around that is available to you is to enable STRICT_SERVLET_COMPLIANCE or configure appropriate XML validation for the specific context. Help with either of those options is available on the users mailing list.", "id": 148013, "time": "2011-07-19T17:00:09Z", "creator": "markt@apache.org", "creation_time": "2011-07-19T17:00:09Z", "attachment_id": null}]
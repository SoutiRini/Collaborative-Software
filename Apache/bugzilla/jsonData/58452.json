[{"count": 0, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Carried over from poi-user mailing list\nOriginal post: http://mail-archives.apache.org/mod_mbox/poi-user/201509.mbox/%3CCAM%2BTppJHZRk4QfZ%3DJ8WF0zw5%2B%2BrHi-XOnXAXTNezHsgXtr2gPQ%40mail.gmail.com%3E\nNick's response: http://mail-archives.apache.org/mod_mbox/poi-user/201509.mbox/%3Calpine.DEB.2.02.1509221216360.18373%40urchin.earth.li%3E\n\nIf a formula contains one or more unregistered UDF's, a FormulaParseException is normally thrown.\n\nI need a way to allow the formula to be parsed, using placeholder Ptgs for the unregistered functions. With this array of Ptgs, I can manipulate registered Ptgs as needed, then recreate the cell formula and write it to the cell.\n\nFormulas containing unregistered functions will not be eligible for computation in the calculation chain.\n\nSolution will be targeted for XSSFWorkbooks, but it's possible a fix may also be available for HSSFWorkbooks if the source cell that the formula is being copied from was created by Excel (that is, Excel has validated the formula and the Ptg is saved in the BIFF file).\n\nFrom Nick via poi-user mailing list\n> [Add formula parsing option] to skip / unchange unknown function names? (It \n> might actually be easier to do the copy in the Ptg space, rather than \n> Formula text space, as with the ptgs you could check for non-absolute \n> references and update just them. That'd mean you'd need a ways to flag to \n> skip these functions / leave them unchanged or something)\n\nI'll hack away at this to see what I can come up with.", "id": 185461, "time": "2015-09-24T01:29:01Z", "bug_id": 58452, "creation_time": "2015-09-24T01:29:01Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58452, "is_private": false, "count": 1, "id": 185590, "time": "2015-10-03T03:15:04Z", "creator": "onealj@apache.org", "creation_time": "2015-10-03T03:15:04Z", "text": "No code just yet. Here's what I have figured out so far (mostly a brain dump for me, a passive request for help/direction from formula/ptg experts, and a guide for future contributors):\n\nUsing testdata/spreadsheet/testNames.xls, UDF's (VBA macros) are saved in the workbook names (Workbook.getName(String)), along with named ranges.\n\nConverting this to an Excel2007 files, the UDFs are not included in the workbook names.\n\nThis means that the behavior of FormulaParser.parse(\"MyFunc(\\\"arg\\\")\", fpb, FormulaParser.CELL, -1); is different for Excel97 and Excel2007 booms when MyFunc is a UDF. Parse throws FormulaParseException if the formula contains a UDF that isn't in the workbook names for both.\n\nFor my application, I want to copy formulas and shift the cell references, so I will not be adding new formulas to the workbook. I'm not sure yet if I want to implement a solution that could handle new formula names (since that would create an invalid formula without adding the corresponding UDF to vbaProject.bin or replacing vbaProject.bin with a vbaProject.bin from another workbook.\n\nSince XSSFWorkbook.getName() only includes named ranges, I'm assuming adding UDFs to XSSFWotkbook._names is not desired. Right now I'm looking at creating a variant of NamePtg that can hold information for XSSFWorkbook UDFs, so that FormulaParser.parse returns ptgs that could be rendered back to a formula string. Without registering a UDF with the same  name with the workbook via XSSFWorkbook.addToolPack(UDFFinder), trying to evaluate a formula containing a nkn-registered UDF will fail.\n\nI could see where a user may rely on formula parse errors to detect unregistered UDFs in a formula string, so I could introduce this fix by requiring the user call Workbook.setAllowParsingUnregisteredUDFs(true), but I'm thinking there are very few if any scenarios where someone would want to disallow unregistered UDFs where they couldn't more directly detect it--such as checking for UnregisteredNamePtg instances in the result of parse or otherwise."}, {"count": 2, "tags": [], "bug_id": 58452, "text": "Created attachment 33167\nsupporting changes (java docs, add FormulaParsingWorkbook.createName)\n\nTwo approaches here how to handle when an \"completely unknown name\" is found in the workbook:\n\n1) Add the name to the workbook and use that to create the NamePtg that is linked to the workbook.\n> nameToken = _book.getNameXPtg(name, null);\n> if (nameToken == null) {\n>     // name is not an internal or external name\n>     if (log.check(POILogger.WARN)) {\n>         log.log(POILogger.WARN,\n>                \"Name '\" + name + \"' is completely unknown in the current workbook.\");\n>     }\n>     // name is probably the name of an unregistered User-Defined Function\n>     addName(name);\n>     hName = _book.getName(name, _sheetIndex);\n>     nameToken = hName.createPtg();\n> }\n\n2) Do not add the name to the workbook. Create a NamePtg that isn't linked to the workbook.\nhttps://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/formula/FormulaParser.java?revision=1700670&view=markup#l943\n> nameToken = _book.getNameXPtg(name, null);\n> if (nameToken == null) {\n>     if (log.check(POILogger.WARN)) {\n>         log.log(POILogger.WARN,\n>                 \"Name '\" + name + \"' is completely unknown in the current workbook.\");\n>     }\n>     switch(_book.getSpreadsheetVersion()) {\n>         case EXCEL97:\n>             nameToken = new NameXPtg(name);\n>             break;\n>         case EXCEL2007:\n>             nameToken = new NameXPxg(name);\n>             break;\n>         default:\n>             throw new IllegalStateException(\"Unrecognized SpreadsheetVersion\" + _book.getSpreadsheetVersion());\n>     }\n> }\n\nThe second case seems like a cleaner solution since it doesn't introduce weird side-effects (name gets added to workbook).\nHowever, HSSFWorkbooks require all non-built-in-names (for named ranges and UDFs, registered or not) to have an entry in the internal or external names table. Thus, in order to save an HSSFWorkbook, we must add the name to the workbook, meaning option 1 is the only feasible option here. This is because the function name token is serialized as an index into the worksheet names table, not a string of the function name.\n\nWorkbook.createName is currently not accessible in FormulaParser.parse. In the attached patch, I add createName to the FormulaParsingWorkbook interface so that these names can be created.\nFormulaParsingWorkbook {\n  public Name createName() {\n    return _uBook.createName()\n  }\n}\nAlternatively, we could just expose the _uBook Workbook via a getWorkbook() call, and that'd save us from proxying so many functions to the underlying Workbook. Let me know if you'd prefer that solution and I will upload the patches with those changes.", "id": 185642, "time": "2015-10-06T02:33:50Z", "creator": "onealj@apache.org", "creation_time": "2015-10-06T02:33:50Z", "is_private": false, "attachment_id": 33167}, {"count": 3, "tags": [], "bug_id": 58452, "attachment_id": 33168, "is_private": false, "id": 185643, "time": "2015-10-06T03:17:52Z", "creator": "onealj@apache.org", "creation_time": "2015-10-06T03:17:52Z", "text": "Created attachment 33168\nmain FormulaParser changes\n\nWhen parsing a formula, if there is an unknown name in the formula, add the name to the workbook and continue parsing. This is consistent with how Excel works: it allows formulas to contain \"unrecognized text\" or \"invalid name errors\", but the formula result is #NAME?.\n\nFormula evaluation is unchanged: a org.apache.poi.ss.formula.eval.NotImplementedFunctionException/NotImplementedException is thrown if a formula contains a UDF that isn't registered (workbook.addToolPack).\n\n\nIn this patch:\n* FormulaParser.parse no longer throws FormulaParseException for formulas containing unregistered functions  such as '=myFunc(\"arg\")'.\n* modify TestExternalFunctions as necessary\n* add FormulaParser unit tests to make sure formulas with invalid syntax still throw FormulaParseException."}, {"attachment_id": null, "tags": [], "bug_id": 58452, "text": "Current patches (attachment 33167 and attachment 33168) result in a corrupted XLSM workbook.", "count": 4, "id": 185663, "time": "2015-10-06T17:47:34Z", "creator": "onealj@apache.org", "creation_time": "2015-10-06T17:47:34Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 33170\ntestNames.xlsm - Test case spreadsheet\n\nAdd this attached workbook as /test-data/spreadsheet/testNames.xlsm\nSet the appropriate mime-type: application/vnd.ms-excel.sheet.macroEnabled.12 or application/octet-stream\n\nThis workbook is based on /test-data/spreadsheet/testNames.xls [1] at r1614697. I used MS Excel 2013 to convert this to Excel 2007 format, and removed personal information.\n\n[1] http://svn.apache.org/viewvc/poi/trunk/test-data/spreadsheet/testNames.xls?view=log&pathrev=1614697", "is_private": false, "id": 185666, "creator": "onealj@apache.org", "time": "2015-10-06T20:07:00Z", "bug_id": 58452, "creation_time": "2015-10-06T20:07:00Z", "attachment_id": 33170}, {"count": 6, "tags": [], "text": "Created attachment 33171\nsupporting changes (java docs, add FormulaParsingWorkbook.createName)\n\nSupporting changes, including java docs updates where documentation was lacking", "attachment_id": 33171, "id": 185667, "creator": "onealj@apache.org", "time": "2015-10-06T20:18:56Z", "bug_id": 58452, "creation_time": "2015-10-06T20:18:56Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 33172\nmain FormulaParser changes\n\nmain changes (commit after supporting changes and testNames.xlsm)\n\nBehavior:\n* For EXCEL97 workbooks, a defined name is required, so add one to the workbook\n* For EXCEL2007 workbooks, external names are saved as strings instead of in a table and referenced by index, so create a NameXPxg without adding a defined name to the workbook.\n\nI checked the output to make sure Excel is able to open the workbooks without complaining about corrupted contents. No issues in this build (/test-data/spreadsheet/testNames-saved.xls and testNames-saved.xlsm)", "is_private": false, "id": 185668, "creator": "onealj@apache.org", "time": "2015-10-06T20:23:36Z", "bug_id": 58452, "creation_time": "2015-10-06T20:23:36Z", "attachment_id": 33172}, {"count": 8, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Created attachment 33173\nmain FormulaParser changes\n\nUnit test should fail if evaluating the formula 'MYFUNC(\"B1\")' does not raise a org.apache.poi.ss.formula.eval.NotImplementedFunctionException/NotImplementedException.", "id": 185669, "time": "2015-10-06T20:34:11Z", "bug_id": 58452, "creation_time": "2015-10-06T20:34:11Z", "attachment_id": 33173}, {"count": 9, "tags": [], "bug_id": 58452, "attachment_id": null, "id": 186132, "time": "2015-10-31T12:03:03Z", "creator": "onealj@apache.org", "creation_time": "2015-10-31T12:03:03Z", "is_private": false, "text": "Applied supporting changes in r1711600, main changes in r1711605 to trunk\n\nSite docs updated in r1711608."}]
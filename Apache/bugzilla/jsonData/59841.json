[{"count": 0, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "id": 192289, "time": "2016-07-11T14:24:08Z", "bug_id": 59841, "creation_time": "2016-07-11T14:24:08Z", "is_private": false, "text": "I have a use case where I have a worksheet with a large amount of data.\nI'm using XSSFEventBasedExcelExtractor to try to extract the text from the workbook and am hoping to use as little memory as possible.\nMost of the code base seems pretty memory efficient but the putting the worksheet data into a ByteArrayOutputStream in the ZipInputStreamZipEntrySource.FakeZipEntry causes high memory consumption.\nPOI has temp file support via DefaultTempFileCreationStrategy.\nWould it be possible to consider using temp files in this code base, even it was just for data beyond a certain size?"}, {"count": 1, "text": "To minimise memory use, open the XLSX file using a real File object, not an InputStream, see http://poi.apache.org/spreadsheet/quick-guide.html#FileInputStream . That should avoid all in-memory buffering of the xml parts at the OPC / Zip level", "bug_id": 59841, "attachment_id": null, "id": 192290, "time": "2016-07-11T14:40:58Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-11T14:40:58Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 59841, "is_private": false, "id": 192296, "creation_time": "2016-07-11T18:10:25Z", "time": "2016-07-11T18:10:25Z", "creator": "fanningpj@yahoo.com", "text": "Thanks Nick for the quick response. In my case, the xlsx file is password protected and I'm using POIFSFileSystem to decrypt it. I don't want to store the unencrypted xlsx on the file system.", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 59841, "attachment_id": null, "is_private": false, "id": 192303, "time": "2016-07-11T19:16:06Z", "creator": "fanningpj@yahoo.com", "creation_time": "2016-07-11T19:16:06Z", "text": "I have created https://github.com/apache/poi/pull/34 - if this approach is acceptable, I can add extra test coverage."}, {"count": 4, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "is_private": false, "id": 192352, "time": "2016-07-13T20:57:14Z", "bug_id": 59841, "creation_time": "2016-07-13T20:57:14Z", "text": "Using temp files for the fake zip entries makes a big difference in memory usage in the use case I have. The https://github.com/apache/poi/pull/34 change leaves the default behaviour as it is but allows user to provide customised overrides to the behaviour.\nWould it be possible to consider reopening this issue and I will proceed to extend the test coverage?\nI think it is a legitimate concern not wanting to put unencrypted xlsx files onto disk in order to read them efficiently."}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 192354, "time": "2016-07-13T22:13:32Z", "bug_id": 59841, "creation_time": "2016-07-13T22:13:32Z", "is_private": false, "text": "(In reply to PJ Fanning from comment #4)\n> I think it is a legitimate concern not wanting to put unencrypted xlsx files\n> onto disk in order to read them efficiently.\n\nI'm not sure how your patch helps with this - all it does is only put parts of the unencrypted data on disk at a time, but the unencrypted data is still on disk in the temp files!"}, {"count": 6, "tags": [], "bug_id": 59841, "attachment_id": null, "is_private": false, "id": 192355, "time": "2016-07-13T22:20:01Z", "creator": "fanningpj@yahoo.com", "creation_time": "2016-07-13T22:20:01Z", "text": "I have a class that encrypts the temp files (not part of patch). With the patch I can create my own custom FakeZipEntryStrategy class that uses this temp file util under the hood."}, {"count": 7, "tags": [], "bug_id": 59841, "attachment_id": null, "id": 192356, "time": "2016-07-13T22:23:50Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-13T22:23:50Z", "is_private": false, "text": "Ah, that makes more sense now :)\n\nRe-opening so that someone can review the patch, and apply if appropriate / give further comments if not!"}, {"count": 8, "text": "Sorry - I don't understand your FakeEntry approach ... and even Nick beat me on this, I'd like to add my two cents ...\n\nSo lets summarize:\n- you have a hugh encrypted .xlsx\n- and want to use eventmodel for text extraction\n- the extraction should be on a file and not a stream\n- it's not a problem to a have temporary file, but it should be encrypted\n\nMy/further insights:\n- the shared string table is loaded in full into the memory, so this might be a caveat\n- you need to provide a custom ZipFile implementation with standard AES or custom encryption support which is used by POI - maybe \"Apache Commons Compress\" can be used for that ... and of course we need to adapt the OPCPackage handling for that\n\nSo currently it looks like the following approach for me:\n- read the ole2 container\n- copy the encrypted stream into a encrypted zip with a session key\n- provide the zip to an adapted ZIP-/OPCPackage\n- use XSSFReader with that OPCPackage\n\nThe key is, that we need to change the ZIPPackage to support a custom ZipFile!\nSo writing the ZipFile is not an issue and can be handled without changing POI, but reading is the interesting part.", "bug_id": 59841, "is_private": false, "id": 192360, "time": "2016-07-13T22:37:13Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-13T22:37:13Z", "tags": [], "attachment_id": null}, {"count": 9, "text": "So we could either\n- add a OPCPackage.open(ZipFile) method, which would skip the functionality of ZipSecureFile\n- or pass a FilterInputStream-wrapper/decorator down to ThresholdInputStream which is used decrypt/deobfuscate the raw zip bytes - of course the encrypting part seems to be not trivial then, if not a simple bytewise XOR is used ...\n\n(again this all assumes, we are working on a random accessible file and not on a stream)", "bug_id": 59841, "is_private": false, "id": 192364, "time": "2016-07-13T23:15:29Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-13T23:15:29Z", "tags": [], "attachment_id": null}, {"text": "Thanks Andreas for your analysis. Your summary is exactly what I am looking to achieve. I understand the Shared String Table could be another memory issue but I'm wondering if at least the FakeZipEntry memory consumption could be addressed by my patch set? I've added a basic test case to the pull request. My custom strategy class would be similar to the one in the test case except that it has its own built-in AES encryption.\nThis approach is based on the pre-existing TempFile creation strategy class in POI.\nOf course, the solutions you are suggesting are also well worth considering.", "tags": [], "bug_id": 59841, "attachment_id": null, "count": 10, "id": 192365, "time": "2016-07-13T23:19:43Z", "creator": "fanningpj@yahoo.com", "creation_time": "2016-07-13T23:19:43Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 59841, "attachment_id": null, "id": 192370, "time": "2016-07-14T08:44:36Z", "creator": "onealj@apache.org", "creation_time": "2016-07-14T08:44:36Z", "is_private": false, "text": "(In reply to Andreas Beeker from comment #8)\n> - the extraction should be on a file and not a stream\n\nAnd another requirement, since there usually tends to be a trade off between memory consumption and execution speed:\nIf using a file is slower, we must keep the stream variant so users  can choose based on what best meets their needs. Having a method that operates on an OutputStream and letting the user pass in a the implementation: BAOS or a FOS, and an InputStream with the choice of implementation including BAOS, FIS, ZipInputStream, EncryptedZipInputStream, EncryptedZipFileInputStream, etc)."}, {"count": 12, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "is_private": false, "id": 192418, "time": "2016-07-15T19:54:46Z", "bug_id": 59841, "creation_time": "2016-07-15T19:54:46Z", "text": "(In reply to PJ Fanning from comment #10)\n> This approach is based on the pre-existing TempFile creation strategy class\n> in POI.\n\nAlthough I understand, that a temp file needs to be created, this can be done outside of POI and therefore user code can do whatever temp creation they want to do - so this is not my main scope as mentioned above, i.e. \"writing the ZipFile is not an issue\".\n\nI'll now try to do a test implementation with commons-compress which doesn't extend java.util.zip.ZipFile, therefore I need a interface to a delegate which forwards the zip operations to the underlying zip implementation. This interface will be referenced via OPCPackage.open(interface)."}, {"count": 13, "text": "Created attachment 34046\nnew OPCPackage.open(ZipEntrySource) method / custom encrypted temp zip\n\nAs described above, the OPCPackage needed to be extended to provide the functionality of providing a custom encrypted temp file, which can be streamed to POI\n\nAt first I've started to use packages like zip4j, winzipaes or commons-compress (which doesn't provide encryption support), but as the resulting temp doesn't need to be outside of the user process, I've downgraded it to a simple custom enc-/decryption routine.\n\nAlso as noted above, I haven't put any effort into the the temp file generation, as this is simply a user code issue - so given your described use case, I don't see a need to push the logic into ZipInputStreamZipEntrySource & Co. and rather supply an example in the unit tests for further reference, i.e. I'm reluctant to make things more complicated ...\n\nPlease validate that approach and if it's ok I'll commit it.", "bug_id": 59841, "attachment_id": 34046, "id": 192427, "time": "2016-07-16T21:59:09Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-16T21:59:09Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 59841, "attachment_id": null, "is_private": false, "id": 192428, "time": "2016-07-16T23:00:29Z", "creator": "fanningpj@yahoo.com", "creation_time": "2016-07-16T23:00:29Z", "text": "Thanks Andreas. I tried out your patch code on 2 xlsx files and got the same NullPointerException for both.\n\n\tat org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable.getEntryAt(ReadOnlySharedStringsTable.java:184)\n\tat org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler.endElement(XSSFSheetXMLHandler.java:353)\n\tat com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:609)\n\nI'm using the OPCPackage in new XSSFEventBasedExcelExtractor.\nI can try to put together a test case to demonstrate the issue I'm seeing."}, {"text": "I've added a call to XSSFEventBasedExcelExtractor and also receive that error ...\nI see what I can do ...", "tags": [], "bug_id": 59841, "attachment_id": null, "count": 15, "id": 192429, "time": "2016-07-16T23:12:47Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-16T23:12:47Z", "is_private": false}, {"count": 16, "text": "ReadOnlySharedStringsTable readFrom(InputStream is) does a check on is.available and for the CipherInputStream, this seems to be zero.\nI suspect that we don't need the is.available check.", "bug_id": 59841, "is_private": false, "id": 192430, "time": "2016-07-16T23:42:50Z", "creator": "fanningpj@yahoo.com", "creation_time": "2016-07-16T23:42:50Z", "tags": [], "attachment_id": null}, {"text": "Created attachment 34047\nnew OPCPackage.open(ZipEntrySource) method / custom encrypted temp zip\n\nThere's an error in handling InputStreams via available() in reading shared strings tables, i.e. assuming EOF on available() == 0 is simply wrong.\n\nI've fixed it for this use case, but on a quick search, this wrong assumption is also on various other places.\n\nSo check if it works for you and I open a new ticket for fixing the other invocations.", "tags": [], "bug_id": 59841, "is_private": false, "count": 17, "id": 192431, "time": "2016-07-16T23:53:18Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-16T23:53:18Z", "attachment_id": 34047}, {"count": 18, "tags": [], "bug_id": 59841, "is_private": false, "id": 192432, "creation_time": "2016-07-17T00:00:02Z", "time": "2016-07-17T00:00:02Z", "creator": "fanningpj@yahoo.com", "text": "I spotted that problem with the available check too and removing it fixes my test case.", "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 59841, "attachment_id": null, "id": 192433, "time": "2016-07-17T00:15:25Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-17T00:15:25Z", "is_private": false, "text": "Thank you for testing.\npatch applied via r1753003"}]
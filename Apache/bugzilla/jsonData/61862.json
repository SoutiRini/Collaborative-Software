[{"attachment_id": 35589, "tags": [], "creator": "onealj@apache.org", "is_private": false, "count": 0, "id": 202596, "time": "2017-12-06T11:17:48Z", "bug_id": 61862, "creation_time": "2017-12-06T11:17:48Z", "text": "Created attachment 35589\nan example SortedMap subclass that caches the first key and last key, written by Javen. No unit test.\n\nPOI has several TreeMaps to maintain the sorted order of cells in a row or rows in a sheet.\n\nGetting the last and first keys on those maps can be expensive (O(log N)) if called frequently.\n\nLet's investigate if any of these maps would benefit from a Map implementation that cached the first and last key, making those keys available in O(1).\n\nMost common example:\nsheet.getLastRowNum()"}, {"count": 1, "tags": [], "bug_id": 61862, "is_private": false, "text": "I have not tested this new caching TreeMap to see if it's faster or slower than a regular TreeMap. TreeMap's O(log(N)) performance is probably pretty good.\nThe first or last key of a TreeMap containing 1,000,000 rows would traverse through ~20 nodes (2^20=1,000,000).\n\nThe constant overhead of keeping the cache up to date for every modification just to make firstKey/lastKey faster for getFirstRowNum() and getLastRowNum() faster, which are probably called no more than once per sheet anyways... This might not actually be an improvement for XSSFSheet.", "id": 202597, "time": "2017-12-06T11:23:45Z", "creator": "onealj@apache.org", "creation_time": "2017-12-06T11:23:45Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61862, "text": "How about caching the first and last keys and a \"dirty\" flag or clearing the cache values on structural changes?  Then the first/last would only need to be calculated on first access after changes.  I can see these being referenced many times when evaluating formulas, for example, but we wouldn't want them to be continuously updated as rows are being created.  Lazy init, eager clearing/dirtying would perhaps still offer a formula performance gain without adding much if any overhead when creating documents.\n\nThe only cases where it wouldn't add much value, and still wouldn't add much overhead beyond what TreeMap already does, would be cases where data changes and formula evaluations/data scanning are done repeatedly or in some iterative/interleaved pattern.  In my experience these are not typical use cases.", "id": 202612, "time": "2017-12-06T23:46:01Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-12-06T23:46:01Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "gwoolsey@apache.org", "is_private": false, "count": 3, "id": 202614, "time": "2017-12-07T00:00:12Z", "bug_id": 61862, "creation_time": "2017-12-07T00:00:12Z", "text": "All said and done, however, the Map interface has so many possible mutation vectors, including submaps and iterators, it likely isn't worth it.  Caching in the evaluation structures is I think sufficient.  There we already have a required manual method for clearing cached values when data changes.  As you mentioned, most use cases where users iterate over things like rows, it's done once per sheet, and the cost is negligible."}]
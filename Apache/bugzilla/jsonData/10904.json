[{"count": 0, "tags": [], "creator": "mnewcomb@tacintel.com", "text": "Scenario:\nYou have a bunch of subprojects which all 'include' a common-build.xml file to \nget some common properties and taskdefs.  Now, you have an overall project file \nwhich includes the 'common-build.xml' file and uses 'Ant' tasks to call all the \nsubprojects.\n\nProblem:\nUpon examining the Ant.java task, each sub-project inherits all of the the \ncontaining projects data types and task defs.\n\nFirst question:  Why is this the default behavior?  Should there be some \nproperties similary to inheritAll like inheritTaskDefs and inheritDataTypes?\n\nBy inheriting the task defs, a bug is revealed in how taskdefs are invalidated \nbased upon the implementing class.  The containing build file includes the \ncommon-build.xml file and defines the task first, but each sub-project build \nfile does the same thing and when it is done in the sub-project, the task is \nalready defined, but since it was loaded from a different class loader, it is \nnot equal and therefore all the tasks based upon the taskdef are invalidated.\n\nActual taskdefed objects are created because when the parser encounters the non-\ncore element, it finds it is in the set of defined tasks and therefore goes \nthrough the proper rigamorall of setting all the sub-elements and stuff.\n\nNow when the task (based upon the taskdef) is finally executed, it sees that it \nis invalid and asks Task.java.getReplacement() for an UnknownElement to take \nits place.  Then when the UnknownElement is maybeConfigure() it will look up \nand instantiate the actual Task that it wraps.  This works for the most part, \nbut it has one major flaw, the invalidated tasks children are not added to the \nnew UnknownElement object and therefore maybeConfigure() doesn't have any \nchildren to configure and that causes tasks requiring children to fail!\n\nSolution:\nThe best solution to this problem would be for the Project to re-parse the task \nelement from the project file from which the invalidated task was generated.  \nWithout re-parsing the task element, its impossible for the the invalidation \nprocess to work properly.\n\nSolution Problems:\nHow do we re-parse the task element?  We can't because we process the file in \nits entirety using a SAX parser.\n\nWorkaround:\nThe only real work around is to do a taskdef in each sub-project.  I don't see \nthis is being a good solution because it leaves task invalidation broken.\n\nIdeas?\n\nMichael", "id": 19691, "time": "2002-07-17T16:23:09Z", "bug_id": 10904, "creation_time": "2002-07-17T16:23:09Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 10904, "attachment_id": null, "text": "Luckily enough we are keeping the information in RuntimeConfigurable already.\n\nSupposed to be fixed in nightly build 2002-07-23.", "id": 19974, "time": "2002-07-22T12:39:09Z", "creator": "bodewig@apache.org", "creation_time": "2002-07-22T12:39:09Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 19975, "time": "2002-07-22T12:50:39Z", "bug_id": 10904, "creation_time": "2002-07-22T12:50:39Z", "is_private": false, "text": "and in 1.5.1."}]
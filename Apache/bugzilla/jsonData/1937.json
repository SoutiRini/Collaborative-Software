[{"count": 0, "tags": [], "text": "Email from Philipe Le Hegaret.\n\nI noticed that Batik doesn't send any Accept headers (or wrong ones) in the\nHTTP requests.\nI added them in the 1.0 version (see attachments).\n\nNote:\n - Didn't do anything about Accept-Language yet.\n - the charset parameter is valid for text/xml and application/xml.\n   Don't know about image/svg+xml.\n - I also added the User-Agent header.\n   \n\nPhilippe\n\n\n\n\nIndex: sources/org/apache/batik/ext/awt/image/ImageLoader.java\n===================================================================\nRCS file: \n/home/cvspublic/xml-batik/sources/org/apache/batik/ext/awt/image/ImageLoader.ja\nva,v\nretrieving revision 1.1\ndiff -r1.1 ImageLoader.java\n22c22,24\n< public class ImageLoader {\n---\n> import org.apache.batik.util.HTTPConstants;\n> \n> public class ImageLoader implements HTTPConstants {\n185c190,201\n<                 in = url.openStream();\n---\n>               URLConnection urlC = url.openConnection();\n> \n>               if (urlC instanceof HttpURLConnection) {\n>                   urlC.setRequestProperty(HTTP_USER_AGENT_HEADER, \n>                                           HTTP_BATIK_USER_AGENT);\n>                   urlC.setRequestProperty(HTTP_ACCEPT_HEADER,\n>                                           HTTP_ACCEPT_JPEG);\n>               }\n> \n>               urlC.connect();\n> \n>                 in = urlC.getInputStream();\n\n\n\n\nIndex: sources/org/apache/batik/apps/svgbrowser/JSVGViewerFrame.java\n===================================================================\nRCS file: \n/home/cvspublic/xml-batik/sources/org/apache/batik/apps/svgbrowser/JSVGViewerFr\name.java,v\nretrieving revision 1.44\ndiff -r1.44 JSVGViewerFrame.java\n47a48,49\n> import java.net.URLConnection;\n> import java.net.HttpURLConnection;\n108a111\n> import org.apache.batik.util.HTTPConstants;\n140a144\n>                HTTPConstants,\n1037a1042,1051\n>                       URLConnection urlC = u.openConnection();\n>       \n>                       if (urlC instanceof HttpURLConnection) {\n>                           urlC.setRequestProperty(HTTP_USER_AGENT_HEADER, \n>                                                   HTTP_BATIK_USER_AGENT);\n>                           urlC.setRequestProperty(HTTP_ACCEPT_HEADER,\n>                                                   HTTP_ACCEPT_SVG);\n>                       }\n>                       \n>                       urlC.connect();\n1039c1053,1054\n<                         InputStream is = ParsedURL.checkGZIP(u.openStream());\n---\n>                         InputStream is = \n>                           ParsedURL.checkGZIP(urlC.getInputStream());\n\n\n\n\nIndex: sources/org/apache/batik/util/ParsedURLData.java\n===================================================================\nRCS file: \n/home/cvspublic/xml-batik/sources/org/apache/batik/util/ParsedURLData.java,v\nretrieving revision 1.1\ndiff -r1.1 ParsedURLData.java\n14a15,16\n> import java.net.URLConnection;\n> import java.net.HttpURLConnection;\n19c21,23\n< public class ParsedURLData {\n---\n> import org.apache.batik.util.HTTPConstants;\n> \n> public class ParsedURLData implements HTTPConstants {\n232c236,251\n<         return url.openStream();\n---\n> \n>       URLConnection urlC = url.openConnection();\n>       \n>       if (urlC instanceof HttpURLConnection) {\n>           urlC.setRequestProperty(HTTP_USER_AGENT_HEADER, \n>                                   HTTP_BATIK_USER_AGENT);\n>           urlC.setRequestProperty(HTTP_ACCEPT_HEADER,\n>                                   HTTP_ACCEPT_PNG + \",\"\n>                                   + HTTP_ACCEPT_JPEG + \",\"\n>                                   + HTTP_ACCEPT_GIF + \",\"\n>                                   + HTTP_ACCEPT_TIFF);\n>       }\n>       \n>       urlC.connect();\n> \n>         return urlC.getInputStream();\n\n\n\n\nIndex: sources/org/apache/batik/css/parser/Parser.java\n===================================================================\nRCS file: \n/home/cvspublic/xml-batik/sources/org/apache/batik/css/parser/Parser.java,v\nretrieving revision 1.10\ndiff -r1.10 Parser.java\n18a19,20\n> import java.net.URLConnection;\n> import java.net.HttpURLConnection;\n28a31\n> import org.apache.batik.util.HTTPConstants;\n51a55\n>                HTTPConstants,\n1536c1540,1553\n<                 return characterStream(source, url.openStream(), enc);\n---\n>               URLConnection urlC = url.openConnection();\n> \n>               if (urlC instanceof HttpURLConnection) {\n>                   urlC.setRequestProperty(HTTP_USER_AGENT_HEADER, \n>                                           HTTP_BATIK_USER_AGENT);\n>                   urlC.setRequestProperty(HTTP_ACCEPT_HEADER,\n>                                           HTTP_ACCEPT_CSS);\n>               }\n> \n>               urlC.connect();\n> \n>               // Don't disconnect the connection to allow persistent\n>               // connection.\n>                 return characterStream(source, urlC.getInputStream(), enc);\n\n\n\n\nIndex: sources/org/apache/batik/dom/svg/SAXSVGDocumentFactory.java\n===================================================================\nRCS file: \n/home/cvspublic/xml-batik/sources/org/apache/batik/dom/svg/SAXSVGDocumentFactor\ny.java,v\nretrieving revision 1.8\ndiff -r1.8 SAXSVGDocumentFactory.java\n11a12\n> import java.io.BufferedInputStream;\n16a18,19\n> import java.net.URLConnection;\n> import java.net.HttpURLConnection;\n23a27,28\n> import org.apache.batik.util.HTTPConstants;\n> \n41c46,47\n<     implements SVGDocumentFactory {\n---\n>     implements SVGDocumentFactory,\n>                HTTPConstants {\n78a85,86\n>       URLConnection urlC;\n> \n85c93,109\n<         InputStream is = url.openStream();\n---\n>       urlC = url.openConnection();\n>       \n>       if (urlC instanceof HttpURLConnection) {\n>           // no constant for Batik version?!?\n>           urlC.setRequestProperty(HTTP_USER_AGENT_HEADER, \n>                                   HTTP_BATIK_USER_AGENT);\n>           // this is a CSS parser, only accept the CSS mime type\n>           urlC.setRequestProperty(HTTP_ACCEPT_HEADER,\n>                                   HTTP_ACCEPT_SVG);\n>       }\n> \n>       urlC.connect();\n>       \n>         InputStream is = urlC.getInputStream();\n>       if (!is.markSupported()) {\n>           is = new BufferedInputStream(is, 4096);\n>       }\n86a111\n>           is.mark(16);\n89,90c114\n<             is.close();\n<             is = url.openStream();\n---\n>           is.reset();\n94a119,144\n> \n>       // now looking for a charset encoding in the content type       \n>       // such as \"image/svg+xml; charset=iso8859-1\"\n>       // this is not official for image/svg+xml yet! only for text/xml and \nmaybe\n>       // for application/xml\n>       String contentType = urlC.getContentType();\n>       int cindex = (contentType == null)? \n>           -1 \n>           : contentType.indexOf(HTTP_CHARSET);\n> \n>       if (cindex != -1) {\n>           StringBuffer bcharset = new StringBuffer(10);\n>           int length            = contentType.length();\n>           int i                 = cindex + HTTP_CHARSET.length();\n>           while ((i < length) && (contentType.charAt(i) != '=')) {\n>               i ++;\n>           }\n>           if (++i < length) {\n>               char c;\n>               while ((i < length) && ((c = contentType.charAt(i)) != ',')) {\n>                   bcharset.append(c);\n>                   i ++;\n>               }\n>               isrc.setEncoding(bcharset.toString().trim());\n>           }\n>       }\n\n\n\n\n/*****************************************************************************\n * Copyright (C) The Apache Software Foundation. All rights reserved.        *\n * ------------------------------------------------------------------------- *\n * This software is published under the terms of the Apache Software License *\n * version 1.1, a copy of which has been included with this distribution in  *\n * the LICENSE file.                                                         *\n *****************************************************************************/\n\npackage org.apache.batik.util;\n\n/**\n * Contains useful HTTP Headers used for HTTP requests.\n */\npublic interface HTTPConstants {\n    String HTTP_ACCEPT_HEADER          = \"Accept\";\n    String HTTP_ACCEPT_LANGUAGE_HEADER = \"Accept-Language\";\n    String HTTP_USER_AGENT_HEADER      = \"User-Agent\";\n\n    String HTTP_CHARSET                = \"charset\";\n\n    String HTTP_BATIK_USER_AGENT       = \"Batik/1.0\";\n    String HTTP_ACCEPT_JPEG            = \"image/jpeg\";\n    String HTTP_ACCEPT_GIF             = \"image/gif\";\n    String HTTP_ACCEPT_PNG             = \"image/png\";\n    String HTTP_ACCEPT_TIFF            = \"image/tiff\";\n    String HTTP_ACCEPT_CSS             = \"text/css\";\n    String HTTP_ACCEPT_SVG             =\n        \"image/svg+xml,application/xml,text/xml\";\n\n}\n\n\n---------------------------------------------------------------------\nTo unsubscribe, e-mail: batik-dev-unsubscribe@xml.apache.org\nFor additional commands, e-mail: batik-dev-help@xml.apache.org", "attachment_id": null, "id": 2685, "creator": "vincent.hardy@sun.com", "time": "2001-05-29T10:39:47Z", "bug_id": 1937, "creation_time": "2001-05-29T10:39:47Z", "is_private": false}, {"count": 1, "tags": [], "creator": "deweese@apache.org", "is_private": false, "text": "Batik now sets user-agent, accept, and accept-encoding headers for HTTP\nrequests.  It should also properly handle charsets for documents as well.\nThanks for raising the issue and pointing the way.", "id": 3835, "time": "2001-07-19T04:36:09Z", "bug_id": 1937, "creation_time": "2001-07-19T04:36:09Z", "attachment_id": null}]
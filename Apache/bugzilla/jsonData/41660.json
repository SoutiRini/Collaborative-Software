[{"count": 0, "tags": [], "creator": "trevor@vocaro.com", "attachment_id": null, "id": 99573, "time": "2007-02-20T00:48:00Z", "bug_id": 41660, "creation_time": "2007-02-20T00:48:00Z", "is_private": false, "text": "I am using the new annotation support in the BCEL trunk to write a utility for processing custom \nannotations. This required extending the Annotations and AnnotationEntry classes, and the subclasses I \ncreated needed to access the fields in the superclasses. Unfortunately, this wasn't possible because \nthese fields have private access. They should instead have protected access."}, {"count": 1, "tags": [], "bug_id": 41660, "attachment_id": 19614, "id": 99574, "time": "2007-02-20T00:50:23Z", "creator": "trevor@vocaro.com", "creation_time": "2007-02-20T00:50:23Z", "is_private": false, "text": "Created attachment 19614\nSimple patch that makes the private fields protected"}, {"count": 2, "attachment_id": null, "bug_id": 41660, "text": "Just as a general note, protected fields should be used with caution as they\nhave significant implications for binary compatibility; once added they become\npart of the \"public api\" of the class and cannot be changed without potentially\nbreaking existing code.\n\nWhere possible, protected accessor methods are better than allowing direct\naccess to protected fields.\n\nNote, however, that I haven't reviewed this patch to determine what the best\nsolution is for this particular case.", "id": 99583, "time": "2007-02-20T14:55:09Z", "creator": "skitching@apache.org", "creation_time": "2007-02-20T14:55:09Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "trevor@vocaro.com", "attachment_id": null, "text": "I think accessor methods might also work in my case, but I would prefer protected members (possibly in \naddition to accessors) because it offers the most flexibility and control.\n\nAnd yes, field access rights raise compatibility issues, which is why I hope this bug can be resolved \nbefore the annotation support in BCEL migrates from the trunk to an official release.\n\nIn any case, something must be changed, otherwise it will be impossible for users to extend BCEL's \nannotation support.", "id": 99586, "time": "2007-02-20T15:25:57Z", "bug_id": 41660, "creation_time": "2007-02-20T15:25:57Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 41660, "attachment_id": null, "id": 100251, "time": "2007-03-10T07:23:57Z", "creator": "tcurdt@apache.org", "creation_time": "2007-03-10T07:23:57Z", "is_private": false, "text": "Could you elaborate why you have to extend them?"}, {"count": 5, "tags": [], "creator": "trevor@vocaro.com", "attachment_id": null, "id": 100260, "time": "2007-03-10T11:56:24Z", "bug_id": 41660, "creation_time": "2007-03-10T11:56:24Z", "is_private": false, "text": "I need to extend them in order to tell BCEL how to process non-standard annotations. Currently BCEL is \nhard-coded for the existing annotation names: RuntimeInvisibleAnnotations, \nRuntimeInvisibleAnnotations, RuntimeInvisibleParameterAnnotations, and \nRuntimeVisibleParameterAnnotations. However, with the JSR-308 proposal, new annotation names are \nlikely on the way: RuntimeInvisibleTypeAnnotations/RuntimeVisibleTypeAnnotations and (possibly) \nRuntimeInvisibleStatementAnnotations/RuntimeVisibleStatementAnnotations.\n\nNow, I'd like to use BCEL to parse and display these new annotation types. In fact, I've already written \nsuch a utility here:\n\nhttp://volta.svn.sourceforge.net/viewvc/volta/util/dump-annotations/\n\nHowever, the utility can't work with the current BCEL trunk because the Annotations and AnnotationEntry \nclasses have private inaccessible fields. This makes extending those classes in any meaningful way \nimpossible. But if I simply modify BCEL so that those fields are exposed to subclasses, then my utility \nworks perfectly.\n"}, {"count": 6, "attachment_id": null, "bug_id": 41660, "text": "So, is this patch acceptable for inclusion in the trunk, or does it need more work? Should I rewrite it to \nuse accessor methods instead of protected fields?\n", "id": 101764, "time": "2007-04-16T12:54:18Z", "creator": "trevor@vocaro.com", "creation_time": "2007-04-16T12:54:18Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 41660, "text": "Can someone please review this patch? It's a very simple fix. If you like, I can submit another one that \nuses accessor methods instead of protected fields.\n", "id": 104376, "time": "2007-06-13T12:21:00Z", "creator": "trevor@vocaro.com", "creation_time": "2007-06-13T12:21:00Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "trevor@vocaro.com", "attachment_id": null, "text": "I found another example of why this bug needs to be fixed:\n\nhttp://forum.java.sun.com/thread.jspa?threadID=775449\n\nNote that Mathias has created two entirely new types of annotations \n(RuntimeVisibleLocalVariableAnnotations and RuntimeInvisibleLocalVariableAnnotations). Naturally, one \nmight want to use BCEL to read these annotations from a class file, but that's currently impossible. \nUnless this bug is fixed, BCEL is effectively hard-coded for the standard annotation names.\n\n", "id": 108222, "time": "2007-09-15T03:09:04Z", "bug_id": 41660, "creation_time": "2007-09-15T03:09:04Z", "is_private": false}, {"count": 9, "tags": [], "creator": "tcurdt@apache.org", "attachment_id": null, "id": 133481, "time": "2010-01-10T11:26:17Z", "bug_id": 41660, "creation_time": "2010-01-10T11:26:17Z", "is_private": false, "text": "    public int getTypeIndex() {\n        return type_index;\n    }\n\n    public ConstantPool getConstantPool() {\n        return constant_pool;\n    }\n\n    public boolean isRuntimeVisible() {\n        return isRuntimeVisible;\n    }\n\nExpose the variables now. In Annotations they are already available and you can even set the annotation table. Should fix your problems. Please re-open if that's not enough."}]
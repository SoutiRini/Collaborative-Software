[{"count": 0, "attachment_id": null, "bug_id": 17722, "is_private": false, "id": 32558, "time": "2003-03-06T14:16:51Z", "creator": "garethwebbley@hotmail.com", "creation_time": "2003-03-06T14:16:51Z", "tags": [], "text": "If a 413 error is encountered no response is sent to the client\nIf an ErrorDocument directive for 413 is present in httpd.conf the request \neither blocks if the ErrorDocument is a URL or closes the connection if the \nerrordocument is text.\n\nI have a LimitRequestBody of 10000240.  I have created a simple file upload \npage to reproduce the problem :-\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 \nTransitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<title>Error</title>\n</head>\n<body marginheight=\"0\" marginwidth=\"0\" rightmargin=\"0\" topmargin=\"0\" \nleftmargin=\"0\" bottommargin=\"0\">\n<form id=\"attachForm\" name=\"attachForm\" enctype=\"multipart/form-data\" \nmethod=\"post\" action=\"/html/test413.html\">\n\t<BR><input class=\"browseAttach\" name=\"file\" size=\"25\" type=\"file\">\n\t<P><INPUT TYPE=\"submit\" VALUE=\"Upload file\" METHOD=\"post\">\n</form>\n</body>\n</html>\n\nSelecting a file > 10000240 causes the problem to occur.\n\nI have used a http sniffer to check what's being sent and when a 413 error \noccurs no response is returned from apache.\n\nI have tried this with a 1.3 version of Apache and all works as expected."}, {"count": 1, "tags": [], "bug_id": 17722, "text": "After further testing this appears to only be a problem with IE.  All works as \nexpected with Opera and Mozilla.", "id": 32723, "attachment_id": null, "creator": "garethwebbley@hotmail.com", "creation_time": "2003-03-08T16:49:48Z", "time": "2003-03-08T16:49:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "tom@impulsed.net", "text": "I have also encountered this bug, and in my testing it has not been attributable\nto a specific browser - it has affected any and every browser I have tested. I\nbelieve this is a similar bug to 21544 -\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=21544 - and I disagree with\nthe conclusion that was drawn there. I am testing over a fast network link ot\nthe server, and transmitting the file takes very little time - less than one\nsecond. \n\nOccasionally the 413 responce IS thrown up, especially if LimitRequestBody is\nsmall (I tested at 100kb, and the 413 error was returned for files upto 200kb),\nbut testing with the limit set to 1048576 bytes and uploading a 1048577 byte\nfile causes a null responce.\n\nSoftware used:\nApache 2.0.48\nLinux 2.4.20\nInternet Explorer 6 SP 1\nMozilla Firebird 0.6\n\nExpected Responce:\nServer replies with 413 error message\n\nActual Responce:\nThe server closes the connection\n\nCode to replicate:\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 \nTransitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<title>Error</title>\n</head>\n<body marginheight=\"0\" marginwidth=\"0\" rightmargin=\"0\" topmargin=\"0\" \nleftmargin=\"0\" bottommargin=\"0\">\n<form id=\"attachForm\" name=\"attachForm\" enctype=\"multipart/form-data\" \nmethod=\"post\" action=\"/html/test413.html\">\n\t<BR><input class=\"browseAttach\" name=\"file\" size=\"25\" type=\"file\">\n\t<P><INPUT TYPE=\"submit\" VALUE=\"Upload file\" METHOD=\"post\">\n</form>\n</body>\n</html>\n\nin httpd.conf:\nLimitRequestBody 1048576 \n\nChoose a file > 1048576 bytes", "id": 51118, "time": "2004-01-25T02:15:47Z", "bug_id": 17722, "creation_time": "2004-01-25T02:15:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "nd@perlig.de", "text": "Sounds like a server crash. What program receives the upload? Is there anything\nrelated in the errorlog?", "id": 51119, "time": "2004-01-25T02:56:01Z", "bug_id": 17722, "creation_time": "2004-01-25T02:56:01Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 17722, "text": "Only what is to be expected :\n\n[Sun Jan 25 22:05:40 2004] [error] [client 192.168.0.50] Requested\ncontent-length of 1049317 is larger than the configured limit of 1048576,\nreferer: http://site/news/tst-upload.html\n\nThe error gets there, but no responce/status code is returned to the browser.", "id": 51163, "attachment_id": null, "creator": "tom@impulsed.net", "creation_time": "2004-01-25T22:01:05Z", "time": "2004-01-25T22:01:05Z", "is_private": false}, {"count": 5, "tags": [], "creator": "trawick@apache.org", "text": "FWIW, I was doing some testing recently with an Apache 2-based server and a\nplug-in which can return 413, trying to see how to get IE to display a custom\nmessage via ErrorDocument.\n\nMy network traces showed the server always seemed to return the right data\n(either 302 or 413 response based on type of ErrorDocument) but IE would not\ndisplay it.  But then I tried a large error document (8K or so IIRC) and then it\nworked.\n\nThis is a slightly different flow than when Apache generates the 413.\n", "id": 54346, "time": "2004-03-21T19:20:39Z", "bug_id": 17722, "creation_time": "2004-03-21T19:20:39Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 17722, "text": "I saw a similar bug to this in 2.0 in the C-L parsing error path in\nap_http_filter; it failed to set ctx->remaining = 0, and then some later filter\naborted and just closed the connection.  Perhaps the same thing is correct for\nthe ctx->remaining > ctx->limit case.", "id": 66321, "attachment_id": null, "creator": "jorton@redhat.com", "creation_time": "2004-11-02T22:41:43Z", "time": "2004-11-02T22:41:43Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 17722, "is_private": false, "text": "I vote for this bug to be fixed too! It's really annoying!\n\nI too get this in the error log:\n\n[Tue Jul 26 12:47:35 2005] [error] [client x.x.x.x] Request content-length of\n28495103 is larger than the configured limit of 5242880\n\nAnd a strace of httpd -X shows the following (with comments):\n\nopen(\"/home/xxx/public_html/.htaccess\", O_RDONLY|O_LARGEFILE) = 5\nfstat64(5, {st_mode=S_IFREG|0660, st_size=818, ...}) = 0\nfstat64(5, {st_mode=S_IFREG|0660, st_size=818, ...}) = 0\nold_mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) =\n0x40015000\nread(5, \"# Error documents\\r\\nErrorDocument\"..., 4096) = 818\nread(5, \"\", 4096)                       = 0\nclose(5)                                = 0\nmunmap(0x40015000, 4096)                = 0\nlstat64(\"/home/xxx/public_html/cgi-bin\", {st_mode=S_IFDIR|0755, st_size=136,\n...}) = 0\nopen(\"/home/xxx/public_html/cgi-bin/.htaccess\", O_RDONLY|O_LARGEFILE) = -1\nENOENT (No such file or directory)\nlstat64(\"/home/xxx/public_html/cgi-bin/foo.cgi\", {st_mode=S_IFREG|0755,\nst_size=4928, ...}) = 0\nopen(\"/home/xxx/public_html/cgi-bin/foo.cgi\", O_RDONLY|O_LARGEFILE) = 5\nfcntl64(5, F_DUPFD, 15)                 = 20\nclose(5)                                = 0\nread(20, \"#!/usr/bin/perl -w\\n\\n# This is a t\"..., 4096) = 4096\nclose(20)                               = 0\ntime(NULL)                              = 1122378455\nwrite(15, \"[Tue Jul 26 12:47:35 2005] [erro\"..., 139) = 139\n\n^^^ This corresponds to the error_log entry\n\nalarm(300)                              = 0\nalarm(0)                                = 300\nalarm(300)                              = 0\nalarm(0)                                = 300\nalarm(300)                              = 0\nalarm(0)                                = 300\nwrite(4, \"HTTP/1.1 413 Request Entity Too \"..., 685) = 685\n\n^^^ This *looks* like it's trying to return something to the browser! And the\nhandle (4) is the same one that is all requests and responses are read\nfrom/written to throughout the strace dump.\n\ntime(NULL)                              = 1122378455\nwrite(17, \"host-x-x-x-x.xxxxx.com\"..., 263) = 263\n\n^^^ This corresponds to the access_log entry\n\nalarm(30)                               = 0\nshutdown(4, 1 /* send */)               = 0\nselect(5, [4], NULL, NULL, {2, 0})      = 1 (in [4], left {2, 0})\nread(4, \"\\231Hy\\230\\2710\\217\\253\\20r\\201t\\3443)\\227<\\24XC,\\2168\"..., 512) = 512\nselect(5, [4], NULL, NULL, {2, 0})      = 1 (in [4], left {2, 0})\nread(4, \"\\37\\207\\37qm\\373\\7\\201^\\254\\215\\272\\273o\\340]~\\f\\237>|\"..., 512) = 512\n\n^^^ These last 4 lines are then repeated, and repeated (although the actual data\nchanges). The handle is again 4, and the data corresponds to a file uploaded in\nthe request, so it looks like httpd is accepting the request!!!\n\nI'm not that knowledgable at programming under *nix (yet), so I thought I'd post\nthis in case it helps anyone.", "id": 77665, "time": "2005-07-26T14:50:34Z", "creator": "edam@waxworlds.org", "creation_time": "2005-07-26T14:50:34Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 17722, "text": "After a day of reading source-code and running Ethereal (which I wish I'd done\nfirst!), I think I understand what is going on. I dont think this is actually a\nbug in apache at all...\n\n\nThis is what happens:\n\n* The browser sends the request. In my case it is a multi-part POST which\nincludes a file too big for the limit set by LimitRequestBody.\n\n* The server responds with the expected 413 error page. It then calls\nlingering_close() in main/http_main.c which partially closes the socket,\nstopping the server sending any more outgoing data, and also causing a TCP FIN\nto be sent to the browser. The FIN packet indicates that the server is done\nsending and wishes to close the connection. The server then continues to accept\nincoming data from the browser in order to try and avoid a situation that\nhappens later anyway (read on).\n\n* Instead of displaying the returned 413 error page, the browser ignores both\nthe 413 error page and the FIN packet and continues to send it's request! The\nserver continues to soak it up (waiting for the connection to close).\n\n* After a designated timeout period (30 seconds), the server decides to give up\nwaiting for the browser to stop spewing rubbish, and closes the connection. When\nthe TCP mechanism at the server-end then recieves further incoming packets from\nthe browser, it responds with an RST packet. This is precisely the situation\nthat lingering_close() tries to prevent, because the browser then believes the\nconnection to have been unexpectedly reset. This causes the browser to discard\nany previous response from the server (which is why no one ever sees the 413\nerror page!) and display the familliar \"Net Reset Error\".\n\n\nI dont know the ins and outs of the HTTP protocol, and frankly I want to go to\nbed, not wade through RFCs! But it seems to me that this is an issue with the\nbrowser isn't it? Surely if a response has been sent to the browser, and that\nresponse was an error, and it was followed by a TCP FIN packet, isn't it\nreasonable to assume that the rest of the request can be discarded? Surely this\nwould make more sense, especially in the case where the request is large and the\nerror is the \"413 Request Entity Too Large\" error!\n\nI've tried a couple of browsers. The following exhibited the above behavior:\n\tMSIE 6\n\tFirefox 1.0.6\n\nHowever the following worked ok:\n\tOpera 7.53\n\nIt looks like Opera waits for a \"100 Continue\" response from the server before\nspewing the large upload... I'll post a bug report on FireFox's Bugzilla too.\nScrew IE though.  :o)\n\nI'd very much like to hear what any of the apache team think about all this! As\nI said before, I'm still learning about a lot of this stuff...\n\n\nBefore I go, here's an (edited) Ethereal capture of the above bahavior:\n\nFRAME TIME        SOURCE IP            DESTINATION IP\n    1 0.000000    192.168.0.1          web.se.rv.er\n        TCP      2076 > http [SYN] Seq=0 Ack=0 Win=64240 Len=0 MSS=1460\n    2 0.046966    web.se.rv.er         192.168.0.1  \n        TCP      http > 2076 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460\n    3 0.047054    192.168.0.1          web.se.rv.er\n        TCP      2076 > http [ACK] Seq=1 Ack=1 Win=64240 Len=0\n    4 0.050230    192.168.0.1          web.se.rv.er\n        HTTP     POST /foo.html HTTP/1.1\n\n^^^ server sends request...\n\n    5 0.050940    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n\n^^^ ...and then immediately starts sending the file. From the packet:\n    Content-Type: multipart/form-data; boundary=------[snip]\\r\\n\n    Content-Length: 28495103\\r\\n\n    \\r\\n\n    Data (1345 bytes)\n\n    6 0.114983    web.se.rv.er         192.168.0.1  \n        TCP      http > 2076 [ACK] Seq=1 Ack=671 Win=6700 Len=0\n    7 0.115087    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n    8 0.115093    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n    9 0.152971    web.se.rv.er         192.168.0.1  \n        TCP      http > 2076 [ACK] Seq=1 Ack=2131 Win=8760 Len=0\n   10 0.153055    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n   11 0.153063    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n\n^^^ various server acknowledgments, and the browser sendings...\n\n   12 0.193151    web.se.rv.er         192.168.0.1   \n       HTTP     HTTP/1.1 413 Request Entity Too Large\n\n^^^ server respondes with 413 error (packet includes the HTML error page)...\n\n   13 0.193968    web.se.rv.er         192.168.0.1  \n        TCP      http > 2076 [FIN, ACK] Seq=676 Ack=2131 Win=8760 Len=0\n\n^^^ ...followed by a FIN packet\n\n   14 0.194024    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n   15 0.231948    web.se.rv.er         192.168.0.1  \n        TCP      http > 2076 [ACK] Seq=677 Ack=5051 Win=14600 Len=0\n   16 0.232125    192.168.0.1          web.se.rv.er\n        HTTP     Continuation\n\n^^^ browser continues to send, server continues to acknowledge.\n\n      . . . this continues for 30 seconds until . . .\n\n  888 31.572576   web.se.rv.er         192.168.0.1  \n        TCP      [TCP ZeroWindow] http > 3510 [RST] Seq=706\n  889 31.785558   web.se.rv.er         192.168.0.1  \n        TCP      [TCP ZeroWindow] [TCP Dup ACK 888#1] http > 3510 [RST] Seq=706\n  890 31.843627   web.se.rv.er         192.168.0.1  \n        TCP      [TCP ZeroWindow] [TCP Dup ACK 888#2] http > 3510 [RST] Seq=706\n  891 31.883537   web.se.rv.er         192.168.0.1  \n        TCP      [TCP ZeroWindow] [TCP Dup ACK 888#3] http > 3510 [RST] Seq=706\n\n^^^ server responds with RST packets. Browser stops sending and displays error.\n", "id": 77692, "attachment_id": null, "creator": "edam@waxworlds.org", "creation_time": "2005-07-26T23:41:38Z", "time": "2005-07-26T23:41:38Z", "is_private": false}, {"count": 9, "tags": [], "creator": "trawick@apache.org", "text": "Right.  In this scenario, Apache can't keep reading unlimited data from the\nbrowser, yet doing so is the only way to get the browser to read the error response.\n\nIf the browser were to send Expect: 100-Continue and Content-Length with the\nrequest, Apache can reject it before the browser starts sending the data. \nApache either responds with an error such as 413, or Apache sends 100-Continue\nto tell the browser to start sending data.  IE doesn't implement this.  (no\nknowledge here of which browsers do)\n", "id": 77695, "time": "2005-07-27T02:09:04Z", "bug_id": 17722, "creation_time": "2005-07-27T02:09:04Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 17722, "is_private": false, "id": 80457, "time": "2005-09-25T22:23:56Z", "creator": "jorton@redhat.com", "creation_time": "2005-09-25T22:23:56Z", "tags": [], "text": "The lingering close bug is a genuine cause of this problem, insofar as this\nissue is fixable; so marking this as a duplicate of that bug.\n\n*** This bug has been marked as a duplicate of 35292 ***"}]
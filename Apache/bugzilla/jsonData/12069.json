[{"count": 0, "tags": [], "creator": "minarikv@gmail.com", "attachment_id": null, "id": 21785, "time": "2002-08-27T08:56:23Z", "bug_id": 12069, "creation_time": "2002-08-27T08:56:23Z", "is_private": false, "text": "Tomcat creates more than one HttpSession object when it gets two or more\nrequests with invalid (old, timed out) session cookie concurrently.\nFor example the server gets two requests with old cookie, checks that the\nsession object has timed out and creates two new HttpSession objects instead\nof only one.\n\nIf you store some data to the session attributes when processing both requests,\nyou cannot be sure which data (of these two requests) will be there by the next\nrequest, because you cannot influence which cookie will the browser use the\nnext time. The browser gets with these two responses also two different cookies,\nand probably uses the one which comes later with next request. So you lose all\nthe data stored to the session from the request which finished first.\n\nHow to reproduce:\nDownload my testing source from\nhttp://bimbo.fjfi.cvut.cz/~minarikv/jsp/sessions.zip\nor make a JSP with the HTML similar to the following:\n\n&lt;script&gt;\n  function onLink()\n  {\n    window.open\n( 'secondRequest.jsp', 'wizard', 'width=400px,height=250px,resizable=yes');\n  }\n&lt;/script&gt;\n&lt;a href=\"firstRequest.jsp\" onclick=\"onLink();\"&gt;link&lt;/a&gt;\n\nNote:\nThis is not a browser problem (tested in MSIE 5.0, MSIE 5.5, MSIE 6.0,\nNetscape 4.77, and Opera 6.01 with the same result: two sessions were created).\nThe problem must be solved at Tomcat side, when it gets an old cookie more than\nonce."}, {"count": 1, "tags": [], "creator": "minarikv@gmail.com", "text": "Hey, what is this bug list for?\nIf there is a bug report without any reaction for more than one month, there \nmust be something wrong. At least a notice \"we know about this issue, but we \nwill not fix it in 4.x\" would be polite.\nAn example:\nWhen I have submitted a bug to a cURL bug list, the problem was fixed the same \nday.", "id": 23735, "time": "2002-10-02T07:34:48Z", "bug_id": 12069, "creation_time": "2002-10-02T07:34:48Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "hgailly@ereline.fr", "attachment_id": null, "id": 33239, "time": "2003-03-15T16:45:31Z", "bug_id": 12069, "creation_time": "2003-03-15T16:45:31Z", "is_private": false, "text": "I seems to have run into this problem with Tomcat 4.1.12, seems related to bug \nnumber 11845. I don't know, is there a way to know is the bug is accepted or \nnot? How can we know why the session expires in the first place?\n"}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 53973, "time": "2004-03-14T20:23:23Z", "bug_id": 12069, "creation_time": "2004-03-14T20:23:23Z", "is_private": false, "text": "The HTTP state management spec (RFC 2109) does not discuss concurrent requests.\n\nImplementing a solution to the problem you describe would be tricky. Tomcat \nwould have to maintain a list of old and new sessions and check this in a \nthread-safe way when creating a new session because the old one expired. This \nisn't going to have positive impact on performance.\n\nPrevious requests along similar lines have not been implemented.\n\nI am going to change this to an enhancement request for now but without a \nproposed patch from you or interest from a tomcat committer this is unlikely \nto be implemented.\n\nYou might have better luck with changing the architecture of the web app that \ncreates the concurrent requests."}, {"count": 4, "attachment_id": null, "bug_id": 12069, "text": "Although you state that RFC 2109 doesn't discuss concurrent requests, browsers \nlike MSIE 6 use them, so I think server should somehow treat this situation.\n\nI don't think that mantaining a list of old and new sessions would have any \nsignificant negative impact on performance since it is needed to check this \nlist ONLY when the server gets an old session ID and cannot find existing \nsession object for it. Then, prior to creating a new session object, it should \ncheck the list of \"old-to-new session IDs mapping\" whether there has not been \nalready created a new session for the old session ID.\nI agree that it could be tricky to implement the list, e.g. to retain small \nsize of the list. Server must remove obsolete mappings when they aren't needed \nanymore (to prevent inappropriate memory consumption).\n\nWhy I think tomcat should treat concurrent requests?\nWell, the example for which I submitted the download link, is little bit \nuncommon.\nBut still I think changing the architecture of the web app you are suggesting \nisn't right solution of the problem. Consider the following (very usual?) \nsituation:\nOne frameset with two or more JSP frames. Since the frameset's content isn't \nchanging, it is normal to set some longer expiration time to it, isn't it? Now \nconsider that the session is lost on the server (session timeout) and user \nwants to refresh the page. He isn't interested in the fact he refreshes a \nframeset, not a page. But what will do the browser? First it checks the \nexpiration time of the top level page (==frameset). Because it is still valid \n(not expired), it uses concurrent connections to get the content of the frames. \nAnd now two or more sessions are created and later some data stored in session \nattributes are lost...", "id": 54010, "time": "2004-03-15T15:36:32Z", "creator": "minarikv@gmail.com", "creation_time": "2004-03-15T15:36:32Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "text": "All patches gratefully received... ;)\n\nIf you have frames that participate as part of the same web app, can you not \ninclude a (possibly nested) frameset as part of the app? That way the sesion \nwill expire at the same time for everything.\n\nI agree that this would be a 'nice to have' but without a proposed patch this \nis unlikely to be implemented.", "id": 54034, "time": "2004-03-15T19:25:34Z", "bug_id": 12069, "creation_time": "2004-03-15T19:25:34Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 12069, "is_private": false, "id": 142752, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2010-12-15T13:11:30Z", "time": "2010-12-15T13:11:30Z", "text": "This was fixed for 5.5.x (and 6.0.x, 7.0.x) by re-using the session ID"}]
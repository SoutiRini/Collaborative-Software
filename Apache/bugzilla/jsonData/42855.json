[{"count": 0, "tags": [], "bug_id": 42855, "text": "Hi. My team ship a product which uses custom log4j appenders for integration\nwith a messaging system.\n\nUsually everything is very nice. However, we recently hit a nasty problem where\none of our customers was using commons-logging on top of log4j. A\nNoClassDefFoundError was raised, as runtime dependencies of our custom appender\nwere missing, and this error propagated through the static clinit in LogManager.\nUsually this wouldn't have been so bad, as the exception would have been\nreported and easy to debug from, but with commons-logging loading log4j, the\nexception is swallowed and some other logging system is swapped in.\n\nLater on, when our code tries to use log4j directly, things are broken\ninternally. LogManager failed to load, so future attempts to reference loggers\ndie with \"java.lang.NoClassDefFoundError at\norg.apache.log4j.Logger.getLogger(Logger.java:117)\". When this is the only error\nyou're seeing, it's quite hard to debug what's going on.\n\nI suggest that LogManager should do more handling of errors; perhaps it could\ndump the stack trace to stderr before propagating an unhandled exception or\nerror out of the static initialization block?\n\nI've also suggested that commons-logging could behave better here than silently\nswallowing the NoClassDefFoundError, in\nhttps://issues.apache.org/jira/browse/LOGGING-114, but it's uphill. I'm very\nmuch hoping one project or the other will agree to a tweak, so that nobody else\nhas to debug from these very confusing messages!", "id": 105277, "attachment_id": null, "creator": "malcolm.cleaton@ubs.com", "creation_time": "2007-07-11T03:18:14Z", "time": "2007-07-11T03:18:14Z", "is_private": false}, {"count": 1, "tags": [], "creator": "thorbjoern@gmail.com", "is_private": false, "text": "If I understand your issue correctly, your problem is that you WANT to use log4j but the log4j loading inside commons-logging fails due to missing classes.\n\nPersonally I would suggest you stop using commons-logging and instead use slf4j with the log4j backend (this is a simple compile-time binding without class loader voodoo) and add the commons-logging slf4j module to satisfy your current commons-logging calls.\n\nSee http://slf4j.org/docs.html for documentation.\n\nAs an added benefit it gives you the ability to use {} in your log strings as object.toString() placeholders.  This allow you to get rid of many logger.isDebugEnabled() calls.  See http://slf4j.org/faq.html#logging_performance\n\nI do not think that this is a bug in log4j, and certainly not one which warrants adding try-catch stuff to the static init part of LogManager.  Please reopen issue if you disagree.\n\n\n", "id": 119266, "time": "2008-08-02T12:34:48Z", "bug_id": 42855, "creation_time": "2008-08-02T12:34:48Z", "attachment_id": null}]
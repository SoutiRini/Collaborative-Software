[{"count": 0, "tags": [], "text": "Log files created by poi can be manipulated. For example in MessageSubmissionChunk:\n\nlogger.log(POILogger.WARN, \"Warning - unable to make sense of date \" +dateS);\n \nwhere dataS can contain unvalidated user input. An attacker could take advantage of this behavior to forge log entries or inject malicious content into the log.\n\nExplanation:\n\nLog forging vulnerabilities occur when:\n\n1. Data enters an application from an untrusted source.\n2. The data is written to an application or system log file.\n\nApplications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.\n\nInterpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. A more subtle attack might involve skewing the log file statistics. Forged or otherwise, corrupted log files can be used to cover an attacker's tracks or even to implicate another party in the commission of a malicious act. In the worst case, an attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.", "is_private": false, "bug_id": 58040, "id": 183551, "time": "2015-06-16T12:51:46Z", "creator": "dkwakkel@gmail.com", "creation_time": "2015-06-16T12:51:46Z", "attachment_id": null}, {"count": 1, "text": "Here are two links to this topic from the first google matches ...:\nthe owasp entry where the entry text was copied from [1]\nand how to setup fortify [2] to create custom rules for it\n\nI haven't checked our sonarcube instance for this error and we somehow don't get a slot in the apache sonarcube.\n\nMaybe some can provide a current fortify (or similar) report for this error?\n\nAndi.\n\n[1] https://www.owasp.org/index.php/Log_Forging\n[2] http://stackoverflow.com/questions/12784707/log-forging-fortify-fix", "creator": "kiwiwings@apache.org", "attachment_id": null, "id": 183563, "time": "2015-06-16T15:48:05Z", "bug_id": 58040, "creation_time": "2015-06-16T15:48:05Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "Hi Andi,\n\nIt is not clear to me if you need INFO from me or someone else.\n\nSee this article how to solve log forging (just replace CR/LF): http://www.jtmelton.com/2010/09/21/preventing-log-forging-in-java/\n\nIf you need more info from me, please let me know.", "attachment_id": null, "bug_id": 58040, "id": 183571, "time": "2015-06-16T20:36:59Z", "creator": "dkwakkel@gmail.com", "creation_time": "2015-06-16T20:36:59Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58040, "attachment_id": null, "is_private": false, "id": 183582, "time": "2015-06-16T23:55:06Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-06-16T23:55:06Z", "text": "Actually I'm not sure how to fix this ...:\nfirst thought was, there might be a config option in the underlying logger, but we can't  rely on it as we have different logger interfaces which some (or all?) do not provide such an option.\n\nNext thought was, to simply change the POILogger class and sanitize the CR/LFs, limit the length, but then we also might need XSS filtering. I don't like the idea of forcing html encoding in the logging class, just because the log might be viewed in a browser.\n\nSo maybe we just provide another logging facade with the above features, but then should we enable it by default, by system property (which nobody realize to set it) or some heuristic (\"we are running in an appserver, so we should activate xss filtering, because appserver logs are often viewed online ...\")?\n\nAndi"}, {"count": 4, "tags": [], "bug_id": 58040, "text": "I think something like XSS is thevresponsibility of the web app doing the displaying, not the logger. At least I did not come across projects which do this in such a pro-active way.\n\nI would just do the CR/LF replacing for now always as additional options/properties tend to be ignored by users :)", "id": 183587, "time": "2015-06-17T05:02:08Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-06-17T05:02:08Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58040, "attachment_id": null, "text": "Fixed with r1686748\n\nThe fix just replaces CR/LF - the exception logging stays unchanged.\nI've changed the log methods to varargs and because this leads to binary incompatibilities, marked the classes as internal, as I think user code shouldn't depend on our internal log propagation mechanism.\n\nDepending on the discussion [1], we might eventually include and move to SLF4J logging.\n\nAndi.\n\n[1] http://apache-poi.1045710.n5.nabble.com/Logging-Binary-compatibility-td5719152.html", "id": 183678, "time": "2015-06-21T19:23:42Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-06-21T19:23:42Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 41059, "text": "When the WebAppClassLoader stops it manually sets all static and final \nvariables to null in the clearReferences method.  This results in NPEs for any \nthread that was not stopped and not expecting its final or static variables to \nbe null.  This is particularly a problem with hot deploys since the unload \nfails and terminating the deploy.", "id": 96299, "time": "2006-11-28T11:53:02Z", "creator": "jbirmingham@verisign.com", "creation_time": "2006-11-28T11:53:02Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41059, "text": "You are not supposed to have any threads associated with this classloader at\nthis point.", "id": 96310, "time": "2006-11-28T15:48:25Z", "creator": "remm@apache.org", "creation_time": "2006-11-28T15:48:25Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41059, "attachment_id": null, "text": "Note that if you want a \"fix\", you can offer a patch disabling this code (with a\nsystem property or some other mechanism like that).", "id": 96311, "time": "2006-11-28T15:53:56Z", "creator": "remm@apache.org", "creation_time": "2006-11-28T15:53:56Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jbirmingham@verisign.com", "attachment_id": null, "text": "Here is a patch that uses a system property to disable this feature.  The \npatch was made against tomcat 5.5.20 source.\n\n--- WebappClassLoader.java.orig 2006-09-12 11:12:42.000000000 -0400\n+++ WebappClassLoader.java      2006-11-29 09:03:42.000000000 -0500\n@@ -163,7 +163,12 @@ public class WebappClassLoader\n      * resources.\n      */\n     boolean antiJARLocking = false;\n-\n+\n+    /**\n+     * Use clearReferences experimental code to deal with possible memory \nleaks.\n+     */\n+    private static final boolean ENABLE_CLEAR_REFERENCES = Boolean.valueOf\n(System.getProperty\n(\"org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\", \"true\"\n)).booleanValue();\n+\n\n     // ----------------------------------------------------------- \nConstructors\n\n@@ -1489,7 +1494,9 @@ public class WebappClassLoader\n\n         // Clearing references should be done before setting started to\n         // false, due to possible side effects\n-        clearReferences();\n+        if(ENABLE_CLEAR_REFERENCES) {\n+            clearReferences();\n+        }\n\n         started = false;\n", "id": 96358, "time": "2006-11-29T06:05:59Z", "bug_id": 41059, "creation_time": "2006-11-29T06:05:59Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 41059, "is_private": false, "text": "I provided a patch to work around this issue.  ", "id": 96397, "time": "2006-11-30T05:36:25Z", "creator": "jbirmingham@verisign.com", "creation_time": "2006-11-30T05:36:25Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 41059, "is_private": false, "text": "Just marking as an enhancement.", "id": 96472, "time": "2006-12-02T09:12:43Z", "creator": "markt@apache.org", "creation_time": "2006-12-02T09:12:43Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "remm@apache.org", "text": "The patch was bad: it is wrong to disable the whole method.", "id": 96538, "time": "2006-12-05T02:56:36Z", "bug_id": 41059, "creation_time": "2006-12-05T02:56:36Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "jbirmingham@verisign.com", "attachment_id": null, "text": "Here is a new patch that disables only the code which resets the static and \nfinal variables.\n\n--- WebappClassLoader.java.orig 2006-09-12 11:12:42.000000000 -0400\n+++ WebappClassLoader.java      2006-12-05 08:34:52.000000000 -0500\n@@ -163,7 +163,16 @@ public class WebappClassLoader\n      * resources.\n      */\n     boolean antiJARLocking = false;\n-\n+\n+    /**\n+     * Use experimental code in clearReferences to reset static and final \nvariables\n+     * to deal with possible memory leaks.\n+     */\n+    private static final boolean ENABLE_NULLING_STATIC_FINAL_REFERENCES =\n+            Boolean.valueOf(System.getProperty(\n+                    \"org.apache.catalina.loader.WebappClassLoader.ENABLE_NULLI\nNG_STATIC_FINAL_REFERENCES\",\n+                    \"true\")).booleanValue();\n+\n\n     // ----------------------------------------------------------- \nConstructors\n\n@@ -1585,46 +1594,48 @@ public class WebappClassLoader\n\n         // Null out any static or final fields from loaded classes,\n         // as a workaround for apparent garbage collection bugs\n-        Iterator loadedClasses = ((HashMap) resourceEntries.clone()).values\n().iterator();\n-        while (loadedClasses.hasNext()) {\n-            ResourceEntry entry = (ResourceEntry) loadedClasses.next();\n-            if (entry.loadedClass != null) {\n-                Class clazz = entry.loadedClass;\n-                try {\n-                    Field[] fields = clazz.getDeclaredFields();\n-                    for (int i = 0; i < fields.length; i++) {\n-                        Field field = fields[i];\n-                        int mods = field.getModifiers();\n-                        if (field.getType().isPrimitive()\n-                                || (field.getName().indexOf(\"$\") != -1)) {\n-                            continue;\n-                        }\n-                        if (Modifier.isStatic(mods)) {\n-                            try {\n-                                field.setAccessible(true);\n-                                if (Modifier.isFinal(mods)) {\n-                                    if (!((field.getType().getName\n().startsWith(\"java.\"))\n-                                            || (field.getType().getName\n().startsWith(\"javax.\")))) {\n-                                        nullInstance(field.get(null));\n+        if(ENABLE_NULLING_STATIC_FINAL_REFERENCES) {\n+            Iterator loadedClasses = ((HashMap) resourceEntries.clone\n()).values().iterator();\n+            while (loadedClasses.hasNext()) {\n+                ResourceEntry entry = (ResourceEntry) loadedClasses.next();\n+                if (entry.loadedClass != null) {\n+                    Class clazz = entry.loadedClass;\n+                    try {\n+                        Field[] fields = clazz.getDeclaredFields();\n+                        for (int i = 0; i < fields.length; i++) {\n+                            Field field = fields[i];\n+                            int mods = field.getModifiers();\n+                            if (field.getType().isPrimitive()\n+                                    || (field.getName().indexOf(\"$\") != -1)) {\n+                                continue;\n+                            }\n+                            if (Modifier.isStatic(mods)) {\n+                                try {\n+                                    field.setAccessible(true);\n+                                    if (Modifier.isFinal(mods)) {\n+                                        if (!((field.getType().getName\n().startsWith(\"java.\"))\n+                                                || (field.getType().getName\n().startsWith(\"javax.\")))) {\n+                                            nullInstance(field.get(null));\n+                                        }\n+                                    } else {\n+                                        field.set(null, null);\n+                                        if (log.isDebugEnabled()) {\n+                                            log.debug(\"Set field \" + \nfield.getName()\n+                                                    + \" to null in class \" + \nclazz.getName());\n+                                        }\n                                     }\n-                                } else {\n-                                    field.set(null, null);\n+                                } catch (Throwable t) {\n                                     if (log.isDebugEnabled()) {\n-                                        log.debug(\"Set field \" + field.getName\n()\n-                                                + \" to null in class \" + \nclazz.getName());\n+                                        log.debug(\"Could not set field \" + \nfield.getName()\n+                                                + \" to null in class \" + \nclazz.getName(), t);\n                                     }\n                                 }\n-                            } catch (Throwable t) {\n-                                if (log.isDebugEnabled()) {\n-                                    log.debug(\"Could not set field \" + \nfield.getName()\n-                                            + \" to null in class \" + \nclazz.getName(), t);\n-                                }\n                             }\n                         }\n-                    }\n-                } catch (Throwable t) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Could not clean fields for class \" + \nclazz.getName(), t);\n+                    } catch (Throwable t) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Could not clean fields for class \" + \nclazz.getName(), t);\n+                        }\n                     }\n                 }\n             }\n", "id": 96541, "time": "2006-12-05T05:47:17Z", "bug_id": 41059, "creation_time": "2006-12-05T05:47:17Z", "is_private": false}, {"count": 8, "tags": [], "creator": "michael.a.moynihan@fmr.com", "text": "This is causing a problem for me also and I think requires a fix other than the \npatch given here. I get the following stack trace which shows that the error \noccurs on  Tomcat's clean up thread and therefore should be addressed with a \nmore permanent fix.\n\nThe problem arises because Tomcat tries to null a static/final field of a type \nthat has not yet been loaded, which causes the class initializer to run. In my \ncase, that initializer fetched a log from Commons Logging, which had \n(presumably) already been \"cleaned up\" by Tomcat, and threw an NPE.\n\n\n[FATAL] LoggingInit - Failed to obtain logger returning simple logger for \nCONFIG.com.commons.monitoring.util.Instrument \n<org.apache.commons.logging.LogConfigurationException: \njava.lang.NullPointerException (Caused by java.lang.NullPointerException)\n>org.apache.commons.logging.LogConfigurationException: \njava.lang.NullPointerException (Caused by java.lang.NullPointerException)\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance\n(LogFactoryImpl.java:538)\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance\n(LogFactoryImpl.java:235)\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:370)\n\tat com.commons.logging.LoggingInit.getLog(LoggingInit.java:334)\n\tat sun.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat com.commons.catalog.CatalogUtils.getLog(CatalogUtils.java:75)\n\tat com.commons.catalog.GenericTrace.<init>(GenericTrace.java:279)\n\tat com.commons.catalog.SimpleTrace.<init>(SimpleTrace.java:34)\n\tat com.commons.monitoring.util.Instrument.<clinit>\n(AbstractRuntimeInstrument.java:44)\n\tat sun.misc.Unsafe.ensureClassInitialized(Native Method)\n\tat sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(Unknown \nSource)\n\tat sun.reflect.ReflectionFactory.newFieldAccessor(Unknown Source)\n\tat java.lang.reflect.Field.acquireFieldAccessor(Unknown Source)\n\tat java.lang.reflect.Field.getFieldAccessor(Unknown Source)\n\tat java.lang.reflect.Field.get(Unknown Source)\n\tat org.apache.catalina.loader.WebappClassLoader.clearReferences\n(WebappClassLoader.java:1612)\n\tat org.apache.catalina.loader.WebappClassLoader.stop\n(WebappClassLoader.java:1496)\n\tat org.apache.catalina.loader.WebappLoader.stop(WebappLoader.java:734)\n\tat org.apache.catalina.core.StandardContext.stop\n(StandardContext.java:4398)\n\tat org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1067)\n\tat org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1067)\n\tat org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:448)\n\tat org.apache.catalina.core.StandardService.stop\n(StandardService.java:510)\n\tat org.apache.catalina.core.StandardServer.stop(StandardServer.java:734)\n\tat org.apache.catalina.startup.Catalina.stop(Catalina.java:602)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:577)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295)\n\tat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)\nCaused by: java.lang.NullPointerException\n\n\nUpgrading Commons Logging to v1.1 on Tomcat's server classpath removes the NPE \nbut the problem isn't really fixed.\n\nPossible solution is to use two phases: first collect all the non-null Fields \n(Field.get will cause the declared type to be loaded) then null them.", "id": 102862, "time": "2007-05-04T09:20:58Z", "bug_id": 41059, "creation_time": "2007-05-04T09:20:58Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 41059, "is_private": false, "text": "Created attachment 22408\nAdds preliminary pass to clearReferences to prevent untimely class initialization\n\nThis issue is resulting in bugs (40212 and 43867, specifically maybe others) being reported to log4j.\n\nThe patch seems reasonable and compiles, but has not been tested.  I'm putting here and inviting those currently tracking 43867 to check that it fixes the problems that they are observing and add comments here.", "id": 119581, "time": "2008-08-07T22:09:08Z", "creator": "carnold@apache.org", "creation_time": "2008-08-07T22:09:08Z", "attachment_id": 22408}, {"count": 10, "tags": [], "bug_id": 41059, "is_private": false, "text": "Curt's patch fixes the problem without disabling any part of the code.", "id": 119610, "time": "2008-08-08T07:35:19Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2008-08-08T07:35:19Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "cowwoc@bbs.darktech.org", "text": "BTW, this causes Tomcat to hang when shutting down (randomly) for me. It happens rather frequently and is a problem because I restart Tomcat nightly (due to unrelated memory leak problems). I am increasing severity to \"major\" but leaving the priority as is. Curt I will gladly test out your patch if you can provide me with a drop-in JAR file or otherwise indicate how I can patch my existing Tomcat system without rebuilding the entire thing from source.", "id": 120372, "time": "2008-09-04T19:04:22Z", "bug_id": 41059, "creation_time": "2008-09-04T19:04:22Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 41059, "attachment_id": null, "text": "Could this bug be taken into consideration?\n\nIn my case, I have the symptoms outlined in bug #43867 and this is caused by the following situation (I'm using Tomcat 5.5.26):\n\n- WebappClassLoader.clearReferences() at line 1617 inspects some static fields in order to set them to null afterwards, using reflection\n- one of these fields seems to be a field of an Axis2 class (I have an Axis2 Servlet with load-on-startup configured in my web.xml); field.get(null) causes the VM to pass through sun.misc.Unsafe.ensureClassInitialized(Class) (in other words: Tomcat is trying to inspect a static field of a class that hasn't ever be initialized before)\n- that method of Sun implementation causes specifically org.apache.axis2.context.OperationContext to be initialized; this class has a static field declared as:\nprivate static final Log log = LogFactory.getLog(OperationContext.class);\n- this static declaration causes a new Log4JLogger to be created; this is still in charge of the WebappClassLoader, so when Log4JLogger constructor calls getLogger(), a call to org.apache.log4j.LogManager.getLoggerRepository() is made\n- however, at this time the static field repositorySelector is null, probabily because it has been set to null by a previous iteration of the same loop that is in running in WebappClassLoader.clearReferences() (this is just a hypothesis)\n\nSo, from what I have said, I think that either:\n- WebappClassLoader.clearReferences() should skip to inspect fields of classes that have not been initialized yet, otherwise they will be initialized at that point (and it might be too late!)\n- I didn't look at Curt's patch, but I assume he worked on this issue and he followed a 2-pass approach that also solves it\n\nI hope this helps in any way.\nMauro.", "id": 123982, "time": "2009-01-13T01:57:25Z", "creator": "mauromol@tiscali.it", "creation_time": "2009-01-13T01:57:25Z", "is_private": false}, {"count": 13, "tags": [], "creator": "cowwoc@bbs.darktech.org", "text": "FYI, Glassfish fixed this bug within a week of being reported: https://glassfish.dev.java.net/issues/show_bug.cgi?id=6637\n\nI'll leave it up to you to draw your own conclusions.", "id": 123986, "time": "2009-01-13T03:31:51Z", "bug_id": 41059, "creation_time": "2009-01-13T03:31:51Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This has been fixed in trunk and proposed for 6.0.x and 5.5.x\n\nKeep in mind that ENABLE_CLEAR_REFERENCES=true is intended to:\na) work around GC issues in old JVMs (unlikely to an issue with current jvms)\nb) work around one source of memory leaks in webapps that are buggy or use buggy libraries\n\nThe very nature of the ENABLE_CLEAR_REFERENCES code is that it is likely to cause problems - as it does with log4j. Whilst this patch (thanks for the patch by the way) will reduce the chances or seeing errors, it will not eliminate them.\n\nA better approach is to set ENABLE_CLEAR_REFERENCES=false and to use a profiler to identify and fix the root causes of any memory leaks. A well-written app using well behaved libraries should not need ENABLE_CLEAR_REFERENCES=true\n\nIf when doing this you find a memory leak in the Tomcat code (hopefully you won't - all the ones we know about should be fixed) then please open a new Bugzilla entry and report it.", "id": 128957, "time": "2009-07-17T10:30:38Z", "bug_id": 41059, "creation_time": "2009-07-17T10:30:38Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 41059, "is_private": false, "text": "Thanks again for the patch. It has been applied to 5.5.x and 6.0.x and will be included in 5.5.29 and 6.0.21 onwards.", "id": 128992, "time": "2009-07-20T03:18:23Z", "creator": "markt@apache.org", "creation_time": "2009-07-20T03:18:23Z", "attachment_id": null}]
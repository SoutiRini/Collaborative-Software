[{"count": 0, "tags": [], "creator": "apache@shoenix.nl", "attachment_id": null, "text": "I have searched quite a lot, and the only thing I could find were postings\nfrom about a year ago on this issue (Bug id 7503) however, this was in the\nold bug tracking system and I could find no references for solutions for\napache 1.3.x. I have, however, re-written those early patches to work with\napache 1.3.x, but I got strange results and I have corrected them in a new\npatch. I need confirmation that I have done the right thing. (or that I \ndidn't ;))\n\nThe original problem is that RedirectMatch escapes the complete target URL,\nwhich results in bad redirects if it contains '?' of '#' signs. escaped. The\nprior patch for old bug id 7503 did solve this problem, but it causes the \nprotocol and hostinfo part to get lost. I could not confirm with the original\nwriter of that patch, since there was no email listed. The 'Redirect' statement\ndoes not pose this problem.\n\nMy (working) patch against mod_alias.c in apache 1.3.26 :\n\n*** mod_alias.c.orig    Mon Nov 25 15:14:08 2002\n--- mod_alias.c Tue Dec  3 16:18:52 2002\n***************\n*** 313,319 ****\n                    found = ap_pregsub(r->pool, p->real, r->uri,\n                                    p->regexp->re_nsub + 1, regm);\n                    if (found && doesc) {\n!                       found = ap_escape_uri(r->pool, found);\n                    }\n                }\n                else {\n--- 313,335 ----\n                    found = ap_pregsub(r->pool, p->real, r->uri,\n                                    p->regexp->re_nsub + 1, regm);\n                    if (found && doesc) {\n! /*                    found = ap_escape_uri(r->pool, found); */\n!                         uri_components uri;\n!                       ap_parse_uri_components(r->pool, found, &uri);\n!                       if (uri.scheme) {\n!                          /* Reconstruct complete URL */\n!                            found = ap_pstrcat(r->pool, uri.scheme, \"://\", \nuri.hostinfo, NULL);\n!                            found = ap_pstrcat(r->pool, found, ap_escape_uri(r-\n>pool, uri.path),\n NULL);\n!                       } else {\n!                          /* See it as a relative URL */\n!                            found = ap_escape_uri(r->pool, uri.path);\n!                       }\n!                         if (uri.query) {\n!                             found = ap_pstrcat(r->pool, found, \"?\", \nuri.query, NULL);\n!                         }\n!                         else if (uri.fragment) {\n!                             found = ap_pstrcat(r->pool, found, \"#\", \nuri.fragment, NULL);\n!                         }\n                    }\n                }\n                else {", "id": 27334, "time": "2002-12-03T16:22:30Z", "bug_id": 15028, "creation_time": "2002-12-03T16:22:30Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bishop@platypus.bc.ca", "attachment_id": null, "text": "I think that dave@convio.com 's patch was only good for apache 2.0 anyway;  we\nwould need to back-port that for 1.3 (hmm, it wasn't done already?) .\n\nI can reproduce this bug, FWIW, easily.  Oh, so easily.  I don't think I can\nchange the state to Confirmed, though.", "id": 27566, "time": "2002-12-09T23:03:05Z", "bug_id": 15028, "creation_time": "2002-12-09T23:03:05Z", "is_private": false}, {"count": 2, "tags": [], "creator": "apache@shoenix.nl", "attachment_id": null, "is_private": false, "id": 39834, "time": "2003-07-02T10:27:02Z", "bug_id": 15028, "creation_time": "2003-07-02T10:27:02Z", "text": "Rechecked in 1.3.27 and found no solution. Fix is done in 2.x apache as bug id \n7503. We really DO need a backport for this."}, {"count": 3, "tags": [], "bug_id": 15028, "attachment_id": null, "text": "Please note that bugid 7503 was in the OLD bugtracking system.", "id": 39835, "time": "2003-07-02T10:29:58Z", "creator": "apache@shoenix.nl", "creation_time": "2003-07-02T10:29:58Z", "is_private": false}]
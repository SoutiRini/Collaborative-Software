[{"count": 0, "tags": [], "bug_id": 52832, "text": "The configuration parsing logic for numerical entries almost all use atoi() or atol() to convert a string to an integer (for example, in set_max_ranges(), set_max_reversals(), etc.) \n\nHowever, atoi and atol will only return error (<=0) if the initial portion of the string is not digit. In case the string starts with some digits, they will convert the initial portions without reporting any error.\n\nFor example, the string \"2o0\" will be parsed and returned as 2. In this case, although the users' original intention might be set it to 200, the program executes as it is 2 instead, without giving out any warnings.\n\nIt seems it affects almost all versions of httpd, and every place where atoi / atol is used to convert configuration parameters from string to integer.\n\nBug fix proposal: use strtol(char* nptr, char **endptr, int base) instead, and give out warnings if the endptr does not point to the end of the string. Or use apr_strtoi64() instead.", "id": 154552, "time": "2012-03-05T23:06:40Z", "creator": "zation99@gmail.com", "creation_time": "2012-03-05T23:06:40Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "s.voelker78@gmail.com", "attachment_id": null, "text": "hmmm... interesting. I agree with this point.\n\nalthough it seems a quite stupid mistake to have 20O instead of 200, the correct system response is to check because human beings can make any kinds of mistakes.\n\nactually in a lot of modules, Apache does use strtol to check this problem.", "id": 154668, "time": "2012-03-08T01:56:13Z", "bug_id": 52832, "creation_time": "2012-03-08T01:56:13Z", "is_private": false}, {"count": 2, "tags": [], "creator": "tixu@cs.ucsd.edu", "attachment_id": null, "text": "(In reply to comment #0)\n> The configuration parsing logic for numerical entries almost all use atoi() or\n> atol() to convert a string to an integer (for example, in set_max_ranges(),\n> set_max_reversals(), etc.) \n> \n> However, atoi and atol will only return error (<=0) if the initial portion of\n> the string is not digit. In case the string starts with some digits, they will\n> convert the initial portions without reporting any error.\n> \n> For example, the string \"2o0\" will be parsed and returned as 2. In this case,\n> although the users' original intention might be set it to 200, the program\n> executes as it is 2 instead, without giving out any warnings.\n> \n> It seems it affects almost all versions of httpd, and every place where atoi /\n> atol is used to convert configuration parameters from string to integer.\n> \n> Bug fix proposal: use strtol(char* nptr, char **endptr, int base) instead, and\n> give out warnings if the endptr does not point to the end of the string. Or use\n> apr_strtoi64() instead.\n\n\nanother problem I can think about is the integer overflow.\n\nBeing fed with a overflowed number, atoi() will return a random number.\n\nfor example, on my machine, ind b = atoi(10000000000), b will be 1410065408. \n\nIt seems that Apache httpd heavily uses atoi() without carefully check. Just randomly pick one example as follows:\n\n//in server/listen.c\nAP_DECLARE_NONSTD(const char *) ap_set_send_buffer_size(cmd_parms *cmd,\n                                                        void *dummy,\n                                                        const char *arg)\n{\n    int s = atoi(arg);\n    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);\n\n    if (err != NULL) {\n        return err;\n    }\n\n    if (s < 512 && s != 0) {\n        return \"SendBufferSize must be >= 512 bytes, or 0 for system default.\";\n    }\n\n    send_buffer_size = s;\n    return NULL;\n}\n\nI think a good software should be able to check and have correct response instead of keeping silent.", "id": 155143, "time": "2012-03-20T21:00:16Z", "bug_id": 52832, "creation_time": "2012-03-20T21:00:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 52832, "attachment_id": null, "id": 174216, "time": "2014-04-02T11:48:02Z", "creator": "OlafvdSpek@GMail.Com", "creation_time": "2014-04-02T11:48:02Z", "is_private": false, "text": "(In reply to Tianyin Xu from comment #2)\n> Being fed with a overflowed number, atoi() will return a random number.\n> \n> for example, on my machine, ind b = atoi(10000000000), b will be 1410065408. \n\nActually it's worse: \"If the value cannot be represented, the behavior is undefined.\"\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/atoi.html\n\nCode using strtol often fails to check for ERANGE too.\nIMO the best solution would be to introduce a better strtol wrapper that returns an int/error on invalid input."}]
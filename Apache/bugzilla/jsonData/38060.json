[{"count": 0, "tags": [], "bug_id": 38060, "attachment_id": null, "is_private": false, "id": 84031, "time": "2005-12-28T05:51:46Z", "creator": "michael@ralston.id.au", "creation_time": "2005-12-28T05:51:46Z", "text": "Alot of programmers neglect to close files when programming in Java. I guess \nthey assume the garbage collector will eventually clean up these files and they \ndon't have to worry about them. This causes problems with Java running on \nWindows operating systems, as they make certain demands about open files, eg \nnot allowed to delete them etc. These bugs are quite hard to track down as it \ncan be intermittent, the garbage collector MIGHT close the file and there won't \nbe a problem... then again it might not. \n \nThis problem manifests itself in lenya in various places. The bug isn't \nactually in lenya but in some of the xml processing infrastructure which it \ndepends on. I propose rather than waiting for the developers of cocoon etc to \nfix these problems, we fix the lenya code to take care of opening the files and \nthen we know somebody else isn't going to leave the file open and cause a \nproblem. \n \nThe patch attached fixes one particular instance of this problem, when \ndeactivating a page on windows, a file needs to be deleted but it has been left \nopen by a documentParser object. \n \nI'm sure these file open bugs are causing problems elsewhere in lenya, I have \nseen a few things on the mailing list which I am sure is caused by the same \nsort of thing. I haven't experienced them myself as yet. In particular I'm not \nrunning Lenya on windows anymore so I don't know if I will be useful in \ntracking down further bugs."}, {"count": 1, "tags": [], "bug_id": 38060, "attachment_id": 17289, "text": "Created attachment 17289\norg.apache.lenya.xml.DocumentHelper fix for open files.\n\nFix for DocumentHelper to open files itself instead of allowing DocumentParser\nto do it.", "id": 84032, "time": "2005-12-28T05:55:35Z", "creator": "michael@ralston.id.au", "creation_time": "2005-12-28T05:55:35Z", "is_private": false}, {"count": 2, "tags": [], "text": "hmm. is this still an issue?\ni don't like the fix at first glance, since it seems to circumvent the original\ndesign intent... plus there are a numbe of readDocument methods that will all\nhave the same problem, and the fix addresses only one. is DocumentHelper the one\nclass that handles file i/o? if so, it should be fixed there, if not, we should\nrestructure the stuff so that there is just one class to ever handle files\ndirectly, but that's probably post 1.4 stuff. wdyt?\n", "is_private": false, "id": 98536, "creator": "nettings@apache.org", "time": "2007-01-25T17:00:23Z", "bug_id": 38060, "creation_time": "2007-01-25T17:00:23Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 38060, "attachment_id": null, "is_private": false, "id": 101506, "time": "2007-04-07T02:58:20Z", "creator": "nettings@apache.org", "creation_time": "2007-04-07T02:58:20Z", "text": "*** Bug 35586 has been marked as a duplicate of this bug. ***"}, {"count": 4, "text": "we need to look into this immediately after 1.4.0.", "creator": "nettings@apache.org", "is_private": false, "id": 102407, "time": "2007-04-25T15:19:00Z", "bug_id": 38060, "creation_time": "2007-04-25T15:19:00Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 38060, "attachment_id": null, "is_private": false, "id": 138327, "time": "2010-07-10T05:39:18Z", "creator": "rfrovarp@apache.org", "creation_time": "2010-07-10T05:39:18Z", "text": "Unaware of any locking issues in 2.x. Setting back to 1.2.x."}]
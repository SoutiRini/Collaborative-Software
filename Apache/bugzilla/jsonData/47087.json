[{"count": 0, "attachment_id": null, "bug_id": 47087, "is_private": false, "id": 126470, "time": "2009-04-23T16:08:33Z", "creator": "mazer1310@gmail.com", "creation_time": "2009-04-23T16:08:33Z", "tags": [], "text": "when responding to a HTTP request that has the following headers:\n\nExpect: 100-continue\nTransfer-Encoding: chunked\n\nif the response is anything other than simply \"100 Continue\" (e.g. if the response is 302 redirect or 401 authorization required), the server interprets any body elements in the request as being part of a new request instead of discarding the chunks.\n\nThe scenario is as follows:\nThe client transmits:\n\nPOST /RedirectedLocation HTTP/1.1\nHost: localhost:9999\nUser-Agent: MyAgent/1.1\nContent-Type: multipart/form-data; boundary=Boundary1240524002\nTransfer-Encoding: chunked\nExpect: 100-continue\nCRLFCRLF\n\nThe server immediately responds with something like:\nHTTP/1.1 302 Found\nDate: Thu, 23 Apr 2009 22:00:05 GMT\nServer: Apache\nLocation: /newLocation\nContent-Length: 257\nKeep-Alive: timeout=10, max=100\nConnection: Keep-Alive\nContent-Type: text/html; charset=iso-8859-1\n\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>302 Found</title>\n</head><body>\n<h1>Found</h1>\n<p>The document has moved <a href=\"/newLocation\">here</a>.</p>\n<hr>\n<address>Apache Server at localhost Port 9999</address>\n</body></html>\n\nHowever, in this scenario due to network lag, this response is not received by the client before its timeout period expires waiting for the 100 continue or for another response.  Therefore, having not received the response, the client begins to send the body:\n\n\n49\n--Boundary1240524002\nContent-Disposition: form-data; name=\"FileName\"\n\nAt this point, the client receives the 302 response and stops transmitting by sending this:\n\n0\n\nHowever, the Apache server responds with the following:\nNOTE: there is no HTTP header information associated with the rest of the response and it appears that the server is treating the chunk size \"49\" as an unknown HTTP method\n\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>501 Method Not Implemented</title>\n</head><body>\n<h1>Method Not Implemented</h1>\n<p>49 to /index.htm not supported.<br />\n</p>\n<hr>\n<address>Apache Server at myserver Port 9999</address>\n</body></html>\n\nIt looks like RFC2616 section 8.2.3 Use of the 100 (Continue) Status (http://www.ietf.org/rfc/rfc2616.txt), is indeterminate in this matter.  However, I believe the current behavior is incorrect given that HTML data is being sent across the wire without an associated HTTP header that would indicate its content-length or chunked encoding.\n\nI would propose that the correct behavior would be to either wait for and discard the rest of the response or close the connection.  This seems to be in line with what is said about this in the RFC (relevant section delimited by >>>><<<<):\n\nUpon receiving a request which includes an Expect request-header field with the \"100-continue\" expectation, an origin server MUST either respond with 100 (Continue) status and continue to read from the input stream, or respond with a final status code. The origin server MUST NOT wait for the request body before sending the 100 (Continue) response.  >>>>>>If it responds with a final status code, it MAY close the transport connection or it MAY continue to read and discard the rest of the request.<<<<<<  It MUST NOT perform the requested method if it returns a final status code."}, {"count": 1, "tags": [], "bug_id": 47087, "is_private": false, "text": "I also ran into this bug when trying to write a simple WebDAV client using Microsoft's .NET Framework. I have a very simple C# test program that demonstrates the problem, and have Wireshark network traces that demonstrate that the error is in Apache rather than .NET.\n\nYou can read the discussion and find links to the network traces on the MSDN forums at:\n\n<http://social.msdn.microsoft.com/Forums/en-US/ncl/thread/5c576a2d-2f13-485c-8ada-b4c3ee127d3c/>\n\nI just re-ran the test against Apache 2.2.13 on Mac OS X Snow Leopard, and the problem is still there.\n\nIt appears that Apache is violating this paragraph from RFC 2616:\n\n      - Upon receiving a request which includes an Expect request-header\n        field with the \"100-continue\" expectation, an origin server MUST\n        either respond with 100 (Continue) status and continue to read\n        from the input stream, or respond with a final status code. The\n        origin server MUST NOT wait for the request body before sending\n        the 100 (Continue) response. If it responds with a final status\n        code, it MAY close the transport connection or it MAY continue\n        to read and discard the rest of the request.  It MUST NOT\n        perform the requested method if it returns a final status code.", "id": 129991, "time": "2009-08-27T09:22:42Z", "creator": "samalone@llamagraphics.com", "creation_time": "2009-08-27T09:22:42Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 47087, "is_private": false, "text": "Hmm.\n\nIn the absence of something that's syntactically an HTTP/1.0 or higher request, the server falls back to assuming HTTP/0.9, which is where the bare HTML page comes from.  But since it's not a GET, I guess a 400 response would make more sense.\n\nRe: the recent comment, that makes sense to me.  Unless we close the connection, we should retain its state so we can interpret subsequent data as not-a-request.  But that still leaves ambiguity if the next data look like a syntactically valid request.\n\nI guess closing the connection is the only safe thing to do here, unless someone has a better idea.  Thinking.", "id": 130049, "time": "2009-08-29T22:03:10Z", "creator": "nick@webthing.com", "creation_time": "2009-08-29T22:03:10Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 47087, "attachment_id": null, "text": "(In reply to comment #2)\n> Re: the recent comment, that makes sense to me.  Unless we close the\n> connection, we should retain its state so we can interpret subsequent data as\n> not-a-request.  But that still leaves ambiguity if the next data look like a\n> syntactically valid request.\n> \n> I guess closing the connection is the only safe thing to do here, unless\n> someone has a better idea.  Thinking.\n\nI think this is right.  The RFC spec gives these two options:\n\n\"If [the server] responds with a final status code, it MAY close the transport connection or it MAY continue to read and discard the rest of the request.\"\n\nClosing the connection is nice and immediate.  Reading and discarding the rest of the request is fine as well, but assumes that the client will also behave nicely.  If the next chunk looks like a valid request, then any ambiguity is on the shoulders of the client.  However, since this would be a change in behavior from prior versions, it could break existing clients that are reliant upon the current buggy behavior.\n\nI agree that the safest course of action is to close the connection, and this is one of the options specified in the RFC, so that should be fine", "id": 130078, "time": "2009-08-31T10:04:55Z", "creator": "mazer1310@gmail.com", "creation_time": "2009-08-31T10:04:55Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 47087, "attachment_id": 24460, "text": "Created attachment 24460\nExperimental patch.\n\nI'm attaching a patch that should fix this by closing the connection, with the proviso that r->expecting_100 is set (a check for the request header itself at this point would be slower).  If you have a testbed for provoking this behavior, it would be great if you could test the patch against it.", "id": 131571, "time": "2009-11-02T07:36:25Z", "creator": "nick@webthing.com", "creation_time": "2009-11-02T07:36:25Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 47087, "text": "Scrap that: it's not going to work because we don't set r->status to HTTP_CONTINUE.  Need to fix up the two points where an interim response is sent so we have a test that works.", "id": 131572, "time": "2009-11-02T07:45:01Z", "creator": "nick@webthing.com", "creation_time": "2009-11-02T07:45:01Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 47087, "text": "Created attachment 24461\nAmended experimental patch\n\nOK, anyone in a position to test-drive the amended patch is encouraged to do so.  This one unsets r->expecting_100 as soon as an interim response is sent (which might want further thought) but best to test whether it fixes this bug first!", "id": 131574, "attachment_id": 24461, "creator": "nick@webthing.com", "creation_time": "2009-11-02T08:13:22Z", "time": "2009-11-02T08:13:22Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 47087, "attachment_id": null, "text": "Nick, the patch is working for me. I applied it to the httpd-2.2.14 sources and re-ran my .NET Framework test code that combines PROPFIND, digest authentication, and 100-continue. Before the patch, the test would fail if the PROPFIND contained a body. After the patch, the PROPFIND succeeds both with and without a body.  It's a very limited test, but so far, so good.\n\nThanks for working on this.", "id": 131612, "time": "2009-11-03T05:25:16Z", "creator": "samalone@llamagraphics.com", "creation_time": "2009-11-03T05:25:16Z", "is_private": false}, {"count": 8, "tags": [], "text": "*** Bug 46709 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 132653, "creator": "nick@webthing.com", "time": "2009-12-07T10:13:29Z", "bug_id": 47087, "creation_time": "2009-12-07T10:13:29Z", "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 47087, "is_private": false, "id": 132654, "time": "2009-12-07T10:17:15Z", "creator": "nick@webthing.com", "creation_time": "2009-12-07T10:17:15Z", "tags": [], "text": "(In reply to comment #7)\n> Nick, the patch is working for me. I applied it to the httpd-2.2.14 sources and\n> re-ran my .NET Framework test code that combines PROPFIND, digest\n> authentication, and 100-continue. Before the patch, the test would fail if the\n> PROPFIND contained a body. After the patch, the PROPFIND succeeds both with and\n> without a body.  It's a very limited test, but so far, so good.\n> \n> Thanks for working on this.\n\nThanks for the comment - just noticed it when I marked another bug a duplicate of this.\n\nBug me if I don't revisit the patch in the next week or two, given your confirmation."}, {"count": 10, "tags": [], "text": "Disabling keepalive unconditionally for all requests which include Expect: 100-continue is overkill.  I think it would be sufficient to fix this bug to disable keepalive when sending a final response, if the client has sent \"Expect: 100-continue\", and no 1xx interim response has already been sent.\n\nRFC 2616 lists that as a \"MAY\" if I interpret section 8.2.3 correctly.", "is_private": false, "bug_id": 47087, "id": 132660, "time": "2009-12-07T13:52:35Z", "creator": "jorton@redhat.com", "creation_time": "2009-12-07T13:52:35Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 47087, "text": "(In reply to comment #10)\n> Disabling keepalive unconditionally for all requests which include Expect:\n> 100-continue is overkill.  I think it would be sufficient to fix this bug to\n> disable keepalive when sending a final response, if the client has sent\n> \"Expect: 100-continue\", and no 1xx interim response has already been sent.\n> \n> RFC 2616 lists that as a \"MAY\" if I interpret section 8.2.3 correctly.\n\nJoe, is that a reservation about the patch?  It will disable keepalive if and only if we sent a non-100 response when the client was expecting 100.  That's an errordocument (or some app that can't deal with 100 and should therefore presumably force HTTP/1.0).  Seems right to me.", "id": 132661, "time": "2009-12-07T15:59:16Z", "creator": "nick@webthing.com", "creation_time": "2009-12-07T15:59:16Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "bug_id": 47087, "is_private": false, "id": 132830, "time": "2009-12-15T04:39:41Z", "creator": "sven-apache@incase.de", "creation_time": "2009-12-15T04:39:41Z", "tags": [], "text": "(In reply to comment #10)\n> Disabling keepalive unconditionally for all requests which include Expect:\n> 100-continue is overkill.  I think it would be sufficient to fix this bug to\n> disable keepalive when sending a final response, if the client has sent\n> \"Expect: 100-continue\", and no 1xx interim response has already been sent.\n> \n> RFC 2616 lists that as a \"MAY\" if I interpret section 8.2.3 correctly.\n\nAs I was asked in https://issues.apache.org/bugzilla/show_bug.cgi?id=46709#c3 wether I would be able to test drive this patch: No, not at the moment. It might be possible again in early 2010 (i.e. end of February, begin of March).\n\nAnyhow, as far as I understood from the discussion, this patch disables keepalive for any response but \"100 Continue\", which means the connections are closed after the final response. Unfortunately, this would cause troubles here, as we found out. Some of the clients simply don't reconnect when they asked for a keep-alive session. If they get a disconnect with the non-100 response, they seem to report an error.\n\nPlease note that I don't have access to the client sources, and probably will never have that access. I just know a few facts about them:\nThey use the .Net framework, don't authenticate on first try (as a means to find out how to authenticate), request keep-alive and 100-continue. The rest differs: Some clients correctly reconnect on no-keepalive, some don't. Some handle a 417 return code correctly, some don't....."}, {"count": 13, "tags": [], "bug_id": 47087, "text": "(In reply to comment #12)\n\n> Anyhow, as far as I understood from the discussion, this patch disables\n> keepalive for any response but \"100 Continue\", which means the connections are\n> closed after the final response. Unfortunately, this would cause troubles here,\n> as we found out. Some of the clients simply don't reconnect when they asked for\n> a keep-alive session. If they get a disconnect with the non-100 response, they\n> seem to report an error.\n\nClosing the connection is always at least an option under HTTP, and any client that can't cope is broken.  Bearing in mind that non-100 responses are commonly genuine errors and should indeed be reported as such, are you saying you get an error in the case of a non-error response?", "id": 132831, "time": "2009-12-15T05:24:35Z", "creator": "nick@webthing.com", "creation_time": "2009-12-15T05:24:35Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 47087, "is_private": false, "text": "We've tested out this patch to see if it solves the problem and indeed it does.  The behavior we were seeing before, and looking at wireshark captures was\n1. Client sends request with Except: 100-continue\n2. Server responds with non 100 response (401, 302, whatever) and keep the keepalive connection open.\n3. Client continues to send original request body from #1 without headers\n4. Server barfs (and imo, rightly so).\n\nWith the patch\n1. Client sends request with Expect: 100-continue\n2. Server responds with non 100 resopnse and Connection: close\n3. Client continues to send original request body\n4. Server responds with RST to extra crap from #3.\n\nI think the questions for the comment #12 problem are\n1) is it the fact that the keep-alive was broken that caused the problem\n2) or is it that the client didn't know what to do with the TCP RST?\ntwo separate problems, but both it seems are a problem with the client not being resilient enough.\n\nSo based on what our tests indicates, this patch seems to do what it needs to do.  It'd be better if the client was smarter and didn't waste the traffic on the extra body, but oh well.  Any idea if this is something that might make it into 2.2 branch sometime soon?", "id": 132843, "time": "2009-12-15T13:26:22Z", "creator": "dopey@moonteeth.com", "creation_time": "2009-12-15T13:26:22Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 47087, "text": "(In reply to comment #13)\n> (In reply to comment #12)\n> \n> > Anyhow, as far as I understood from the discussion, this patch disables\n> > keepalive for any response but \"100 Continue\", which means the connections are\n> > closed after the final response. Unfortunately, this would cause troubles here,\n> > as we found out. Some of the clients simply don't reconnect when they asked for\n> > a keep-alive session. If they get a disconnect with the non-100 response, they\n> > seem to report an error.\n> \n> Closing the connection is always at least an option under HTTP, and any client\n> that can't cope is broken.  Bearing in mind that non-100 responses are commonly\n> genuine errors and should indeed be reported as such, are you saying you get an\n> error in the case of a non-error response?\n\nWell, yes. I agree that the clients are broken. But as those are paying customers (and their client used to work with Apache 2.0), I'm not exactly in a position to force them to immediately fix/update their clients.\n\nWhat we saw was this sequence:\nClient sends request with 100-continue expectation (note: It actually sends the full request, headers and body, as far as I could tell from tcpdump/wireshark protocols), unauthenticated. Server answers with \"authentication required\", and gets to see body of request (which actually is a single line XML thingy in our case) with the header of the authenticated request appended to it (ie. \"<xml>...</xml>PUT ....\" or something similar).\n\nTrouble is the broken clients which won't retry. If we use nokeepalive on the clients, some correctly reopen the connection, sending the second request cleanly. Others however won't do so, so we needed to ignore their 100-continue expectation, causing the http daemon to read the full initial request before sending the authentication required response, after that the client successfully sent an authenticated request.\n\nSo for us, the update committed as a result of this bug report doesn't actually fix all client problems we had (but most of them, like 75%). To work around the problems with the rest of our customers clients, the ignore-continue patch I proposed in the other bug report (https://issues.apache.org/bugzilla/show_bug.cgi?id=46709) would still be needed.\n\n<rant>Damn .Net, why can't it just do the correct things by default? Oh, I forgot it is a microsoft product, so that probably explains it</rant>\n\nregards,\nSven", "id": 132865, "time": "2009-12-16T07:07:48Z", "creator": "sven-apache@incase.de", "creation_time": "2009-12-16T07:07:48Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 47087, "is_private": false, "text": "(In reply to comment #15)\n> [chop]\n\nThis problem really belongs on the users@ list.\n\nDoes it help if you either:\n (a) use mod_headers to unset the Expect: request header for the app?\nor:\n (b) use a browser match to force HTTP/1.0 for the client?\nIf not, then your own hack may be your best workaround.\n\nCome to think of it, you have another valid point.  We should ensure any surplus request data are mopped up before closing the connection.  I'll try and find time to test the patch for that and fix it up if necessary.", "id": 132866, "time": "2009-12-16T08:00:27Z", "creator": "nick@webthing.com", "creation_time": "2009-12-16T08:00:27Z", "attachment_id": null}, {"count": 17, "tags": [], "creator": "rpluem@apache.org", "text": "(In reply to comment #16)\n\n> \n> Come to think of it, you have another valid point.  We should ensure any\n> surplus request data are mopped up before closing the connection.  I'll try and\n> find time to test the patch for that and fix it up if necessary.\n\nIsn't this done already by ap_discard_request_body?", "id": 132873, "time": "2009-12-16T12:03:27Z", "bug_id": 47087, "creation_time": "2009-12-16T12:03:27Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 47087, "is_private": false, "text": "(In reply to comment #17)\n\n> Isn't this done already by ap_discard_request_body?\n\nThat's what I meant to check: is anything causing that not to happen?", "id": 132875, "time": "2009-12-16T15:32:51Z", "creator": "nick@webthing.com", "creation_time": "2009-12-16T15:32:51Z", "attachment_id": null}, {"count": 19, "tags": [], "text": "This is still unresolved, right?  We ran into this problem this week, we tried to upgrade our Apache installation that proxies to our app servers and it caused all our desktop software out there \"in the world\" to stop being able to connect correctly. Thanks to Stack Overflow we found the problem and implemented the header-stripping fix but wanted to register our interest in this getting fixed.", "is_private": false, "id": 144921, "creator": "ernest.mueller@ni.com", "time": "2011-03-10T16:14:22Z", "bug_id": 47087, "creation_time": "2011-03-10T16:14:22Z", "attachment_id": null}, {"count": 20, "tags": [], "text": "(In reply to comment #19)\n> This is still unresolved, right?\n\nYou're right.  The patch has been in trunk for over a year but not backported to the 2.2.x (stable) branch.  I've just proposed it for backport.", "is_private": false, "id": 145285, "creator": "nick@webthing.com", "time": "2011-03-26T07:02:55Z", "bug_id": 47087, "creation_time": "2011-03-26T07:02:55Z", "attachment_id": null}, {"count": 21, "attachment_id": null, "bug_id": 47087, "is_private": false, "id": 145442, "time": "2011-03-31T18:25:11Z", "creator": "tkb608@gmail.com", "creation_time": "2011-03-31T18:25:11Z", "tags": [], "text": "Thank you Nick. That would be greatly appreciated.I'm stuck back at 2.2.8 IBM HTTP server."}, {"count": 22, "attachment_id": null, "bug_id": 47087, "is_private": false, "id": 148335, "time": "2011-08-02T14:02:10Z", "creator": "walter.kacynski@gmail.com", "creation_time": "2011-08-02T14:02:10Z", "tags": [], "text": "I have encountered this problem mostly with .NET clients.  Does anyone know if a bug has been submitted to Microsoft on this problem?"}, {"count": 23, "tags": [], "creator": "sf@sfritsch.de", "text": "r1098104 / 2.2.18", "id": 149396, "time": "2011-09-17T16:02:12Z", "bug_id": 47087, "creation_time": "2011-09-17T16:02:12Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "thomas@m3y3r.de", "attachment_id": 34600, "id": 195897, "time": "2017-01-07T16:43:42Z", "bug_id": 60560, "creation_time": "2017-01-07T16:43:42Z", "is_private": false, "text": "Created attachment 34600\npropsed patch\n\nUse the provided channel from systemd/inetd.\nsystemd will bind to the socket and forward the channel to tomcat, so tomcat can run as non-root user on port 80.\n\nFor this to work correctly tomcat must be started directly as java program from systemd unit file and not from intermediate script for channel passing to work correctly."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 196586, "time": "2017-01-31T09:57:49Z", "bug_id": 60560, "creation_time": "2017-01-31T09:57:49Z", "is_private": false, "text": "The patch assumes that there is only a single NIO endpoint. That assumption is not valid. The patch needs to handle the multiple end-point case. That in turn raises the question of how useful this feature is since it appears only to be able to handle a single channel.\n\nThis feature is not compatible with NIO2. Nor is it compatible with APR/native.\n\nThe patch needs to be extended to enable configuration to be used to specify which connector should use the inherited channel. I'd suggest either a new configuration option called \"useInheritedChannel\" or a special value for \"address\". My preference would be for a new option. It should be specific to NIO.\n\nDocumentation is also required."}, {"count": 2, "tags": [], "text": "About NIO2, this doesn't work as the code in System.inheritableChannel uses the NIO API directly, but the API itself is \"compatible\" (an AsynchronousServerSocketChannel will implement Channel). Odd that this was never added (as a separate equivalent method). I think they forgot about this stuff (I had no idea it existed personally).", "attachment_id": null, "bug_id": 60560, "id": 196594, "time": "2017-01-31T10:43:28Z", "creator": "remm@apache.org", "creation_time": "2017-01-31T10:43:28Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 60560, "text": "Updated patch here: http://static.217.14.99.88.clients.your-server.de/401\n\nWhere can I find the source of the documentation. It seems to be in an different repository?!", "count": 3, "id": 196692, "time": "2017-02-03T20:03:26Z", "creator": "thomas@m3y3r.de", "creation_time": "2017-02-03T20:03:26Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "text": "Documentation is in trunk/webapps/docs", "id": 197424, "time": "2017-03-03T12:26:46Z", "bug_id": 60560, "creation_time": "2017-03-03T12:26:46Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "thomas@m3y3r.de", "attachment_id": 34844, "id": 197790, "time": "2017-03-18T12:31:09Z", "bug_id": 60560, "creation_time": "2017-03-18T12:31:09Z", "is_private": false, "text": "Created attachment 34844\nupdated patch with documentation"}, {"count": 6, "tags": [], "text": "Created attachment 34982\nupdated patch with documentation", "attachment_id": 34982, "bug_id": 60560, "id": 198688, "time": "2017-05-05T08:00:17Z", "creator": "thomas@m3y3r.de", "creation_time": "2017-05-05T08:00:17Z", "is_private": false}, {"count": 7, "tags": [], "creator": "csutherl@apache.org", "attachment_id": null, "id": 203379, "time": "2018-01-19T19:13:32Z", "bug_id": 60560, "creation_time": "2018-01-19T19:13:32Z", "is_private": false, "text": "Comments from a review of the latest provided patch:\n\n* Your patch adds an unnecessary space before the TimeUnit import in NioEndpoint\n* There is a typo, 'automatically', in http.xml\n* The useInheritedChannel documentation addition in http.xml specifies type (boolean) which is inconsistent with other (bool) attrs\n* If you specify useInheritedChannel on a Connector it shouldn't fall back to the default behavior when starting without an OS provided socket. If you specifically designate that tomcat should use an OS socket, then it should fail to start the Connector (like the behavior that causes an SSL Connector to fail to start when it can't find the keystore).\n* If you're borrowing a socket from the OS for tomcat to use (by skipping the bind), then you shouldn't be closing the socket in NioEndpoint.unbind().\n\nAfter applying this patch the behavior seems to work (mostly, systemd is behaving a bit odd, but that's not tomcat's fault), but there's something that may be confusing for users: the thread name (i.e. Starting ProtocolHandler [\"http-nio-8080\"]). If you specify useInheritedChannel on the Connector then you're no longer using the specified port. We should probably address that somehow."}, {"attachment_id": null, "tags": [], "bug_id": 60560, "text": "And just individuals interested in testing this, you need the following new socket descriptor and modification to the systemd service unit:\n\nCreate a socket in /etc/systemd/system/tomcat.socket (this one opens a socket bound to localhost on port 80):\n\n~~~\n[Unit]\nDescription=Socket for Tomcat\nPartOf=tomcat.service\n\n[Socket]\nListenStream=127.0.0.1:80\n\n[Install]\nWantedBy=sockets.target\n~~~\n\nThen add `Requires=tomcat.socket` to the [Unit] section of your tomcat systemd service unit and `StandardInput=socket` to the [Service] section.\n\nAfter adding those, starting the service (systemctl start tomcat) will open the socket and pass that through to tomcat. You can also start the tomcat service on the first request to localhost:80, but you have to start the socket first (systemctl start tomcat.socket).", "count": 8, "id": 203380, "time": "2018-01-19T19:18:07Z", "creator": "csutherl@apache.org", "creation_time": "2018-01-19T19:18:07Z", "is_private": false}]
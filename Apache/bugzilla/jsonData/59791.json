[{"count": 0, "tags": [], "bug_id": 59791, "attachment_id": null, "id": 192094, "time": "2016-07-04T09:27:28Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T09:27:28Z", "is_private": false, "text": "Methods that require a cell type use Cell's CELL_TYPE_* integer constants. Classes that use these constants are untyped, making it possible to have latent failures for invalid constants or bloating the code with boilerplate value checking.\n\nCell types should be stored in an enum for type safety and make method signatures more meaningful."}, {"attachment_id": null, "tags": [], "bug_id": 59791, "text": "This is a pretty hefty change. It breaks binary compatibility as the getCellType-like methods return o.a.p.ss.usermodel.CellType enum rather than int, and I didn't want to bloat the classes with getCellTypeType()-like methods.\nCell#setCellType(int) is one of the few methods that was able to maintain backwards compatibility. Nonetheless, if users used Cell.CELL_TYPE_* constants rather than literals, their code will likely work without modification.\n\nIt should be pretty straight-forward to replace all \"Cell.CELL_TYPE_\" strings with \"CellType.\" in the user's code.\n\nApplied in r1751237.", "count": 1, "id": 192095, "time": "2016-07-04T09:45:54Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T09:45:54Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 59791, "text": "Can we do this in a way that won't break backwards-compatibility? The use of those int constants is something that goes back to the very earliest days of Apache POI, and will be used by a huge number of programs out there. They'll be used for both getters and setters, and in some cases I've spotted (on the mailing list and on stackoverflow, amongst others), people have actually hard-coded the int values like 2 and 3 in their code! :/\n\nIf we break source compatibility on this, we risk lots of people not being able to upgrade. If there's a source-breaking change, I'd suggest we wait for 4.0 when we're breaking CT stuff as well", "count": 2, "id": 192096, "time": "2016-07-04T09:55:15Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-04T09:55:15Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 59791, "is_private": false, "id": 192097, "time": "2016-07-04T10:16:37Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T10:16:37Z", "tags": [], "text": "Replaced all references to Cell#CELL_TYPE_* with CellType.* in r1751240"}, {"count": 4, "tags": [], "bug_id": 59791, "attachment_id": null, "id": 192098, "time": "2016-07-04T10:37:36Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T10:37:36Z", "is_private": false, "text": "(In reply to Nick Burch from comment #2)\n> Can we do this in a way that won't break backwards-compatibility?\n\nMost of the changes were internal to POI. The user-facing changes were mostly limited to [Cell|HSSFCell|XSSFCell|SXSSFCell|EvaluationCell].[constructor|getCellType|setCellType|getBaseCellType].\nThere's not much backwards-compatibility breakage as far as the API goes, it's just likely that these changes will impact nearly every POI user because of code that looks like:\nswitch(cell.getCellType()) {\n    case NUMERIC:\n        return cell.getNumericCellValue();\n    case STRING:\n        return cell.getStringCellValue();\n    ...\n}\n\nI'm afraid that we're still a couple years away from seeing POI 4.0 and don't think this change is worth putting off that long. I'm always cautious to use literals in my code, and I would hope that most POI users who are interested in writing forward-compatible code would use the constants we provide rather than hard-coding literals.\n\nIf the user-facing changes are as limited as I think they are, we could revert the few public-facing methods to have signatures that operate on ints, but use CellType anywhere internally, then make the final change when we begin work on POI 4.0.\n\nPerhaps a discussion on the users/dev list would help us figure out whether moving forward with int->CellTypes is preferred by the community."}, {"count": 5, "text": "You're not the standard of coder we need to worry about! ;-)\n\nCan we do this in a way where we can use the enums internally in POI, allow users who want to switch to use enums, but hold-off breaking changes for everyone else until 4?\n\n(My view is that we're likely to have a 3.x and a 4.x branch in parallel for some time, as I can't see us being able to make the switch that quickly and we don't want to stop all other development for many many months!)", "bug_id": 59791, "is_private": false, "id": 192101, "time": "2016-07-04T10:58:49Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-04T10:58:49Z", "tags": [], "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 59791, "is_private": false, "id": 192105, "time": "2016-07-04T12:01:39Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T12:01:39Z", "tags": [], "text": "(In reply to Javen O'Neal from comment #4)\n> If the user-facing changes are as limited as I think they are, we could\n> revert the few public-facing methods to have signatures that operate on\n> ints, but use CellType anywhere internally.\n\nReverted Cell and EvaluationCell in r1751256.\n\nThis preserves binary backwards-compatibility with previous versions of POI. Hopefully by having a few versions where the int getters and setters are deprecated we can complete the transition before POI 4.0.\n\nCurrently the code looks like this:\n\ninterface Cell or EvaluationCell {\n    int getCellType();\n\n    @deprecated will be deleted when we make the CellType enum transition\n    @Internal\n    CellType getCellTypeEnum();\n\n    int getCachedFormulaResultType();\n\n    @deprecated will be deleted when we make the CellType enum transition\n    @Internal\n    CellType getCachedFormulaResultTypeEnum();\n\n    @deprecated\n    void setCellType(int);\n\n    void setCellType(CellType);\n}"}, {"count": 7, "attachment_id": null, "bug_id": 59791, "is_private": false, "id": 192107, "time": "2016-07-04T12:36:14Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T12:36:14Z", "tags": [], "text": "Similar changes to FormulaEvaluator interface for backwards compatibility in r1751261 and r1751264.\n\ninterface FormulaEvaluator {\n    int evaluateFormulaCell(Cell);\n\n    @deprecated will be deleted when we make the CellType enum transition\n    @Internal\n    CellType evaluateFormulaCellEnum(Cell);\n}"}, {"count": 8, "attachment_id": null, "bug_id": 59791, "is_private": false, "id": 192108, "time": "2016-07-04T13:15:48Z", "creator": "onealj@apache.org", "creation_time": "2016-07-04T13:15:48Z", "tags": [], "text": "Should we add some kind of warning or decoration to methods that will change their return value so that users can get a heads up before the signature changes?\n@deprecation implies the method is going away, but has warnings that integrate well with IDEs and the project can be built to treat deprecation warnings\n\nSearching for all public methods using CellType\nsetters:\n$ grep -nr --exclude-dir=\".svn\" -P \"public [^\\(]+\\([^\\)]*CellType [^\\)]+\\)\" src\ngetters:\n$ grep -nr --exclude-dir=\".svn\" -P \"public [^\\(]*CellType [^[(]*\\([^\\)]*\\)\" src\n\nWith r1751273, I believe I have reverted all public constructors and methods to be backwards compatible (at the binary level). There were some protected methods or inner classes that seemed unlikely to be used in projects where changing the return type would be a concern."}, {"count": 9, "attachment_id": null, "creator": "apache@gagravarr.org", "text": "You could try asking the Commons folks - they're the most likely to have gone through something similar amongst the Apache Java communities!", "id": 192110, "time": "2016-07-04T13:44:53Z", "bug_id": 59791, "creation_time": "2016-07-04T13:44:53Z", "tags": [], "is_private": false}, {"attachment_id": 34170, "tags": [], "bug_id": 59791, "text": "Created attachment 34170\nImprove backwards compatibility\n\nThis patch improves backwards compatibility (so that Cell.CELL_TYPE_* still returns an int, works in a switch statement in Java 6, and has the same data type as Cell.getCellType()).\n\nOld usage:\nint Cell.CELL_TYPE_*\nint Cell.getCellType()\nCell.setCellType(int)\n\nNew usage:\nCellType CellType.*\nCellType Cell.getCellTypeEnum()\nCell.setCellType(CellType)\n\nBoth usages are supported with this patch.", "count": 10, "id": 193271, "time": "2016-08-22T17:53:08Z", "creator": "onealj@apache.org", "creation_time": "2016-08-22T17:53:08Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 59791, "is_private": false, "id": 193272, "time": "2016-08-22T17:58:28Z", "creator": "onealj@apache.org", "creation_time": "2016-08-22T17:58:28Z", "tags": [], "text": "Committed attachment 34170 from comment #10 in r1757235."}, {"count": 12, "tags": [], "bug_id": 59791, "is_private": false, "text": "Added test for hard-coded int literals in r1757237", "id": 193273, "time": "2016-08-22T18:15:25Z", "creator": "onealj@apache.org", "creation_time": "2016-08-22T18:15:25Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 59791, "text": "Reverted CellValue#getCellType() to return an int as in POI 3.15 beta 2 and prior releases. This is to maintain backwards compatibility between 3.15 and 3.14. r1760607.", "id": 193685, "time": "2016-09-13T23:26:16Z", "creator": "onealj@apache.org", "creation_time": "2016-09-13T23:26:16Z", "is_private": false, "attachment_id": null}]
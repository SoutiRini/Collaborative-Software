[{"count": 0, "tags": [], "bug_id": 29526, "attachment_id": null, "id": 59107, "time": "2004-06-11T14:30:05Z", "creator": "psivolob@quest.com", "creation_time": "2004-06-11T14:30:05Z", "is_private": false, "text": "1)Start tomcat\n2)Go to Manager.\n3)deploy a war file.\n4)undeploy it.\n5)try to  deploy it again and you get message\n\"FAIL - War file \"proxy.war\" already exists on server\".\n\nIt used to work fine in tomcat 5.0.19.\nIt not fixed in the version 5.0.26-beta."}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "This works for me. Please don't reopen the report.", "id": 59109, "time": "2004-06-11T14:44:38Z", "bug_id": 29526, "creation_time": "2004-06-11T14:44:38Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 29526, "is_private": false, "id": 59110, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2004-06-11T15:03:27Z", "time": "2004-06-11T15:03:27Z", "text": "Hmm, actually, I tested again, and it now doesn't work anymore.\nI did countless changes already to fix this issue, and now I'm really really\nsick of it and tired of mickey mouse OS. As a result, I'm not going to fix this\nissue. I recommend either using Linux, investigating this issue more (and submit\na patch), or convince another developer to look into it."}, {"count": 3, "tags": [], "text": "Remy,\nI am also encountering this bug with my application. When undeploying it \nleaves a single jar that cannot be deleted. I've tracked it down to a single \nclass within this jar that is causing the problem. Here is the code, can you \nthink of any reason this class may be causing a problem?:\n\npackage com.company;\n\n// ----------------------------------------------------------------------------\n-\n// StringEncrypter.java\n// ----------------------------------------------------------------------------\n-\n\n// CIPHER / GENERATORS\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.KeyGenerator;\n\n// KEY SPECIFICATIONS\nimport java.security.spec.KeySpec;\nimport java.security.spec.AlgorithmParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEParameterSpec;\n\n// EXCEPTIONS\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.spec.InvalidKeySpecException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport java.io.UnsupportedEncodingException;\nimport java.io.IOException;\n\n\n/**\n * ----------------------------------------------------------------------------\n-\n * The following example implements a class for encrypting and decrypting\n * strings using several Cipher algorithms. The class is created with a key and\n * can be used repeatedly to encrypt and decrypt strings using that key.\n * Some of the more popular algorithms are:\n *      Blowfish\n *      DES\n *      DESede\n *      PBEWithMD5AndDES\n *      PBEWithMD5AndTripleDES\n *      TripleDES\n * ----------------------------------------------------------------------------\n-\n */\n\npublic class Encrypter {\n\n    Cipher ecipher;\n    Cipher dcipher;\n\n\n    /**\n     * Constructor used to create this object.  Responsible for setting\n     * and initializing this object's encrypter and decrypter Chipher instances\n     * given a Secret Key and algorithm.\n     * @param key        Secret Key used to initialize both the encrypter and\n     *                   decrypter instances.\n     * @param algorithm  Which algorithm to use for creating the encrypter and\n     *                   decrypter instances.\n     */\n    Encrypter(SecretKey key, String algorithm) {\n        try {\n            ecipher = Cipher.getInstance(algorithm);\n            dcipher = Cipher.getInstance(algorithm);\n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            dcipher.init(Cipher.DECRYPT_MODE, key);\n        } catch (Exception e) {\n        }\n    }\n\n\n    /**\n     * Constructor used to create this object.  Responsible for setting\n     * and initializing this object's encrypter and decrypter Chipher instances\n     * given a Pass Phrase and algorithm.\n     * @param passPhrase Pass Phrase used to initialize both the encrypter and\n     *                   decrypter instances.\n     */\n    Encrypter(String passPhrase) {\n\n        // 8-bytes Salt\n        byte[] salt = {\n            (byte)0xA9, (byte)0x9B, (byte)0xC8, (byte)0x32,\n            (byte)0x56, (byte)0x35, (byte)0xE3, (byte)0x03\n        };\n\n        // Iteration count\n        int iterationCount = 20;\n\n        try {\n\n            KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, \niterationCount);\n            SecretKey key = SecretKeyFactory.getInstance\n(\"PBEWithMD5AndDES\").generateSecret(keySpec);\n\n            ecipher = Cipher.getInstance(key.getAlgorithm());\n            dcipher = Cipher.getInstance(key.getAlgorithm());\n\n            // Prepare the parameters to the cipthers\n            AlgorithmParameterSpec paramSpec = new PBEParameterSpec(salt, \niterationCount);\n\n            ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);\n            dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);\n\n        } catch (Exception e) {\n        }\n    }\n\n\n    /**\n     * Takes a single String as an argument and returns an Encrypted version\n     * of that String.\n     * @param str String to be encrypted\n     * @return <code>String</code> Encrypted version of the provided String\n     */\n    public String encrypt(String str) {\n        try {\n            // Encode the string into bytes using utf-8\n            byte[] utf8 = str.getBytes(\"UTF8\");\n\n            // Encrypt\n            byte[] enc = ecipher.doFinal(utf8);\n\n            // Encode bytes to base64 to get a string\n            return new sun.misc.BASE64Encoder().encode(enc);\n\n        } catch (Exception e) {\n        }\n    }\n\n\n    public static Encrypter getEncrypter()\n    {\n        return new Encrypter(\"Any old phrase\");\n    }\n\n    /**\n     * Takes a encrypted String as an argument, decrypts and returns the \n     * decrypted String.\n     * @param str Encrypted String to be decrypted\n     * @return <code>String</code> Decrypted version of the provided String\n     */\n    public String decrypt(String str) {\n\n        try {\n\n            // Decode base64 to get bytes\n            byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(str);\n\n            // Decrypt\n            byte[] utf8 = dcipher.doFinal(dec);\n\n            // Decode using utf-8\n            return new String(utf8, \"UTF8\");\n\n        } catch (Exception e) {\n        }\n    }\n\n", "is_private": false, "id": 59668, "creator": "Dave@JungleMoss.com", "time": "2004-06-21T13:56:49Z", "bug_id": 29526, "creation_time": "2004-06-21T13:56:49Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "This problem won't be resolved in 5.0.x. I'll redo the deployer in the next\nrelease so that JARs are locked sometimes (as usual), but we don't care about it\n(similar to JBoss). Until then, I don't recommend using Windows if you want hot\ndeployment to work reliably (at least not until M$ adds some option to allow\ncertain processes to avoid the file locking \"feature\" - I understand this is a\n\"useful\" feature for the average desktop user, but for server side ...).", "is_private": false, "id": 60009, "creator": "remm@apache.org", "time": "2004-06-28T16:20:54Z", "bug_id": 29526, "creation_time": "2004-06-28T16:20:54Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 29526, "attachment_id": null, "id": 60241, "time": "2004-07-07T14:35:19Z", "creator": "j3322ptm@yahoo.de", "creation_time": "2004-07-07T14:35:19Z", "is_private": false, "text": "> tired of mickey mouse OS\nThe same happened to me on AIX 5 with /webapps on a NFS mounted drive, with\nNFS lock files hanging around instead of the jars itself, thereby blocking\nremoval of the directory.\nThe really annoying part is that the Ant task claims success:\n\nwardeploymanager:\n   [deploy] OK - Anwendung mit Kontext Pfad /bre entfernt\n   [deploy] OK - Anwendung mit Kontext Pfad /bre entfernt\n   [deploy] OK - Anwendung mit Kontext Pfad /bre installiert\n\nIsn't there a way to reliably detect that the webapp removal failed (for\nwhatever reason)?"}, {"count": 6, "tags": [], "bug_id": 29526, "attachment_id": null, "id": 61090, "time": "2004-07-24T19:57:09Z", "creator": "cr@apama.com", "creation_time": "2004-07-24T19:57:09Z", "is_private": false, "text": "Not using Windows isn't always an option...\n\nThe changes for 28272 uses the jar URL to see if the context.xml file exists \ninside the .war.  The jar URL connection class caches by default, and leaves a \nfile descriptor open to the jar file.  By disabling caching, it doesn't and the \njar file can be deleted.\n\n--- ManagerServlet.java.orig\tThu Jun 17 21:02:56 2004\n+++ ManagerServlet.java\tSat Jul 24 20:40:52 2004\n@@ -27,6 +27,7 @@\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.net.URL;\n+import java.net.URLConnection;\n import java.net.MalformedURLException;\n import java.util.Iterator;\n import java.util.jar.JarEntry;\n@@ -845,7 +846,9 @@\n                         }\n                         contextXml = new URL(contextWar +\n                                              \"META-INF/context.xml\");\n-                        stream = contextXml.openStream();\n+                        URLConnection \njarUrlConnection=contextXml.openConnection();\n+                        jarUrlConnection.setUseCaches(false);\n+                        stream = jarUrlConnection.getInputStream();;\n                         // WAR contains META-INF/context.xml resource - install\n                         deployer.install(new URL(contextWar));\n                         return;\n"}, {"count": 7, "tags": [], "bug_id": 29526, "attachment_id": null, "id": 62178, "time": "2004-08-19T15:18:46Z", "creator": "frankspies@gmx.de", "creation_time": "2004-08-19T15:18:46Z", "is_private": false, "text": "This does not work for me on my linux machine using Tomcat 5.0.19."}, {"attachment_id": null, "tags": [], "bug_id": 29526, "is_private": false, "count": 8, "id": 62809, "time": "2004-08-30T20:20:42Z", "creator": "yoavs@computer.org", "creation_time": "2004-08-30T20:20:42Z", "text": "I've applied the patch for Tomcat 5.0(.29) -- thanks for submitting it.  For \nTomcat 5.5, this is not applicable as significant changes have been made to \nrelevant code (both the Manager and the Context).  When 5.5.0 is available, \ntest out the \"antiJARLocking\" attribute and if a bug still exists, file an \nissue against 5.5.0.  Thanks."}]
[{"count": 0, "tags": [], "bug_id": 61022, "attachment_id": null, "text": "The connection pool was returning a closed connection to the pool.  The root cause of this was that my code was accessing the underlying (\"real\") connection and closing it.  My code snipped follows:\n\n   private void onResultSetExhausted() throws SQLException {\n      if (!getResultSet().isClosed()) {\n         Statement statement = getResultSet().getStatement();\n         if (!statement.isClosed()) {\n            Connection connection = statement.getConnection();\n            getResultSet().getStatement().close();\n            if (!connection.isClosed()) {\n               connection.close();\n            }\n         }\n         getResultSet().close();\n      }\n   }\n\nThis implies that the problem may be a regression of the problem described in 48392.  My proposed solution is to check the real connection state in the ProxyConnection::invoke method.  A snippet of that code is:\n\n        if (compare(CLOSE_VAL,method)) {\n            if (connection==null) return null; //noop for already closed.\n            PooledConnection poolc = this.connection;\n            this.connection = null;\n            if (!poolc.getConnection().isClosed()) { // <-- Added this\n                pool.returnConnection(poolc);\n            }\n            return null;\n        } else if (compare(TOSTRING_VAL,method)) {", "id": 198452, "time": "2017-04-21T13:13:41Z", "creator": "glm@hilbertinc.com", "creation_time": "2017-04-21T13:13:41Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 61022, "attachment_id": null, "id": 198453, "time": "2017-04-21T14:10:52Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-04-21T14:10:52Z", "is_private": false, "text": "(In reply to Gary Murphy from comment #0)\n> my code was accessing the underlying (\"real\")\n> connection and closing it.\n\nUmm... don't do that / NOTABUG?"}, {"count": 2, "tags": [], "bug_id": 61022, "attachment_id": null, "id": 198454, "time": "2017-04-21T14:35:49Z", "creator": "glm@hilbertinc.com", "creation_time": "2017-04-21T14:35:49Z", "is_private": false, "text": "I am not sure what you are needing.  I am using the connection pool with functional programming, not in a serlvet container as the normal use case would expect.  As a result, I don't always easily have the reference to the connection, unless I start passing it through the monad, which is possible, I suppose.\n\nI guess my expectation is that a proper implementation of a proxy design pattern would implement all of the use cases of the proxy.  Or to put it another way, if 48392 was accepted as a bug, this should be, too.\n\nI took a second look at the code and my proposed solution might leak resources, so I updated the ConnectionPool class to check in the \"returnConnection\" method.\n\nWhat are our next steps, here?"}, {"count": 3, "tags": [], "bug_id": 61022, "attachment_id": null, "text": "Are you saying that bug #48392 is actually not completely fixed? 48392 was reported for getResultSet().getConnection(), but the comments indicate that also getResultSet().getStatement().getConnection() was fixed as well.\n\nSo, are you reporting a regression/incomplete fix for 48392 or am I missing something else?", "id": 198455, "time": "2017-04-21T15:24:24Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-04-21T15:24:24Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61022, "attachment_id": null, "id": 198459, "time": "2017-04-21T16:32:45Z", "creator": "glm@hilbertinc.com", "creation_time": "2017-04-21T16:32:45Z", "is_private": false, "text": "I didn't go back through the source code history, since 48392 was fixed in 2011. I suspect it was fixed properly and regressed at some subsequent refactor.\n\nI think the proper fix would be the one discussed there - meaning that the connection should provide a proxy for the statement and the statement should provide a proxy for the result set.  That will keep the semantics of the Connection class consistent.\n\nHowever, the fix I made to ConnectionPool to simply check for a closed connection would be simpler and would resolve my issue.  I would be glad to send that to you for your review if you would like."}, {"count": 5, "tags": [], "creator": "kfujino@apache.org", "attachment_id": null, "text": "The org.apache.tomcat.jdbc.pool.interceptor.StatementDecoratorInterceptor was introduced in the fix for 48392.\nHowever, The StatementDecoratorInterceptor is not enabled by default.\nYou should set StatementDecoratorInterceptor to jdbcInterceptors.", "id": 198482, "time": "2017-04-24T02:11:15Z", "bug_id": 61022, "creation_time": "2017-04-24T02:11:15Z", "is_private": false}, {"count": 6, "tags": [], "creator": "glm@hilbertinc.com", "attachment_id": null, "is_private": false, "id": 198495, "time": "2017-04-24T13:03:43Z", "bug_id": 61022, "creation_time": "2017-04-24T13:03:43Z", "text": "Thank you.  That resolved the issue.  Is there documentation for this and other available interceptors?"}, {"count": 7, "text": "You mean like this?\n\nhttp://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html", "bug_id": 61022, "is_private": false, "id": 198496, "time": "2017-04-24T14:35:37Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-04-24T14:35:37Z", "tags": [], "attachment_id": null}]
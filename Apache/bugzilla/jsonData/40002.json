[{"count": 0, "tags": [], "bug_id": 40002, "attachment_id": null, "id": 91067, "time": "2006-07-10T18:52:55Z", "creator": "rbodkin+LISTS@gmail.com", "creation_time": "2006-07-10T18:52:55Z", "is_private": false, "text": "We want to reference our own formatter class that is packaged in a Web\napplication with its own logging.properties file. Unfortunately, the JULI\nClassLoaderLogManager class doesn't override\nLogManager.getFormatterProperty(String, Formatter), which uses the system Class\nLoader to resolve a formatter class. One fix would be to override the\ngetFormatterProperty logic to resolve the formatter class using the context\nloader instead of the system class loader."}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Those are package private helper methods, which are custom to Sun's impl. If you\nuse custom Handlers, you should not be using these methods.", "id": 91077, "time": "2006-07-10T22:24:52Z", "bug_id": 40002, "creation_time": "2006-07-10T22:24:52Z", "is_private": false}, {"count": 2, "tags": [], "text": "But this method gets invoked if you try to set a formatter for a custom handler\nin a properties file. How else is one to configure the formatter for a custom\nhandler?", "attachment_id": null, "id": 91079, "creator": "rbodkin+LISTS@gmail.com", "time": "2006-07-10T23:10:16Z", "bug_id": 40002, "creation_time": "2006-07-10T23:10:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40002, "text": "For that matter, how is one to set the formatter for a standard handler. Or are\nyou saying that you just won't support configuring formatters for handlers in\nJULI, it has to be done programatically instead, which seems unfortunate.", "id": 91081, "time": "2006-07-10T23:21:33Z", "creator": "rbodkin+LISTS@gmail.com", "creation_time": "2006-07-10T23:21:33Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 40002, "attachment_id": null, "id": 96000, "time": "2006-11-20T03:52:53Z", "creator": "maggie@voicenet.com", "creation_time": "2006-11-20T03:52:53Z", "is_private": false, "text": "From my reading of the docs, it should be possible for a webapp to specify a\ncustom formatter for its own logging, but I've been unable to make this\nwork...and neither java.util.logging.XMLFormatter (too verbose) nor\njava.util.logging.SimpleFormatter meets the needs of my application. \n\n(SimpleFormatter is especially pointless since about half of every log record is\nspent telling me that the log message was issued from the point at which Tomcat\ndoes logging for webapps, which of course never changes.) \n\nI appreciate that the new logging scheme is extremely useful and flexible for\npeople working on Tomcat itself, but the reason there _is_ a container is to run\nthe contained applications. If,  by design, webapp devs can't set a custom\nformatter with JULI and WEB_INF/classes/logging.properties, that should be\ndocumented. If we can, it would be nice if we could figure out how to do that\nfrom reading the the docs.   "}, {"count": 5, "tags": [], "bug_id": 40002, "text": "\"One fix would be to override the getFormatterProperty logic to resolve the\nformatter class using the context loader instead of the system class loader.\" \n\nThis seems pretty reasonable to me.  Remy et al, any objections?", "id": 100929, "time": "2007-03-25T15:12:35Z", "creator": "yoavs@computer.org", "creation_time": "2007-03-25T15:12:35Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "william.barker@wilshire.com", "attachment_id": null, "text": "(In reply to comment #5)\n> \"One fix would be to override the getFormatterProperty logic to resolve the\n> formatter class using the context loader instead of the system class \nloader.\" \n> This seems pretty reasonable to me.  Remy et al, any objections?\n\n-0 from me (I don't care enough to actually veto :).  As Remy has already \nstated, this is specific to Sun's JVM.  While adding the ability to use WEB-\nINF/classes/logging.properties is a good goal, I'd prefer a patch that works \non Harmony as well :).", "id": 100933, "time": "2007-03-25T15:41:39Z", "bug_id": 40002, "creation_time": "2007-03-25T15:41:39Z", "is_private": false}, {"count": 7, "tags": [], "creator": "mailmur@yahoo.com", "attachment_id": null, "text": "I had a same need to override formatter. I wanted to have Tomcat4.0/Tomcat5.0x\ntype of logfile formatter. I created a formatter and copied .jar file to\ntomcat/common/lib folder. It would be a lot more flexible able to use it from\nweb-inf/lib files.", "id": 109593, "time": "2007-10-23T06:57:01Z", "bug_id": 40002, "creation_time": "2007-10-23T06:57:01Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 40002, "attachment_id": null, "id": 124750, "time": "2009-02-09T11:44:58Z", "creator": "markt@apache.org", "creation_time": "2009-02-09T11:44:58Z", "is_private": false, "text": "I don't see how we can fix this in a JVM vendor neutral way. j.u.logging did not consider the class loader hierarchy of a typical container. Whilst JULI does go quite some way to address these issues, there are some things that can't be addressed as the j.i.logging API doesn't support it.\n\nAdding your formatters to the container is the best option until the j.u.logging API exposes the necessary methods."}]
[{"count": 0, "text": "Below is test taken from JUnit test case. \nIt consists of:\n Part I - write 4 Strings to xls file, \n Part II - read \n Part III - verify the read result. \n\nThe thing is that HSSFRow.getLastCellNum() returns 3 for the previously \nwritten xls file (written with POI) and the test fails. It would be fine, but \nwhen you open the file with Excel and save the file then close it (Ctrl-S then \nAlt-F4) and comment out the 'Part I' (write test) and re-run the test (so it \ntests the read part) the HSSFRow.getLastCellNum() returns 4.\n\nSo either write function incorrectly marks the last cell in the row, or \nHSSFRow.getLastCellNum() returns different numbers for files written with POI \nand written by Excel.\n\n\ntest method (it was cleared out):\n\n\tpublic void testWrite2Read() throws IOException{\n\t//PART I - write\n\t\tHSSFWorkbook wb = new HSSFWorkbook();\n\t\tHSSFSheet sheet = null;\n\t\tHSSFRow row = null;\n\t\tHSSFCell cell = null;\n\t\tString cellValue;\n\n\n\t\tsheet = wb.createSheet(\"CDs\");\n\t\twb.setSheetName(0, \"CDs\", HSSFWorkbook.ENCODING_UTF_16);\n\t\t\n\t\t//write data\n\t\trow = sheet.createRow(0);\n\t\tString[] data = new String[]{\"Identification \nNumber:\", \"Title:\", \"Retail price:\", \"Test:\"};\n\t\tfor (short i = 0; i < data.length; i++){\n\t    \t\tcellValue = data[i];\n\t\t    \tcell = row.createCell(i);\n\t\t    \tcell.setCellValue(cellValue);\n\t    \t}\n\n\t\t//write to outputstream\n\t\tByteArrayOutputStream bOut = new ByteArrayOutputStream();\n\t\twb.write(bOut);\n\t\tbOut.close();\n\t\t\n\t\tassertTrue(\"size of outputstream\", bOut.size()>0);\n\n\t\t//COMMENT THIS FOR SECOND TEST\n\t\t//write to file\n\t\tFileOutputStream file;\n\t\ttry {\n\t\t\tfile = new FileOutputStream(\"target/test-\nclasses/xls_test_files_tmp_files/wr_1.xls\");\n\t\t\tfile.write(bOut.toByteArray());\n\t\t\tfile.flush();\n\t\t\tfile.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\t\n\t//PART II - read\n\t\tInputStream is = classLoader.getResourceAsStream\n(\"xls_test_files_tmp_files/wr_1.xls\");\n\t\tassertNotNull(\"InputStream for \nxls_test_files_tmp_files/wr_1.xls not null\", is);\n\n\t\twb = null;\n\t\tsheet = null;\n\t\t\n\t\tPOIFSFileSystem fs = new POIFSFileSystem(is);\n\t\twb = new HSSFWorkbook(fs);\n\t\tsheet = wb.getSheetAt(0);\n\t\tIterator rowIter = sheet.rowIterator();\n\n\t\tString[] readData = null;\n\t\tif (rowIter.hasNext()){\n\t    \t\trow = (HSSFRow) rowIter.next();\n\t\t    \tSystem.out.println(\"last cell: \"+row.getLastCellNum());\n\t\t    \treadData = new String[row.getLastCellNum()];\n\t    \t\tfor(short i = 0; i < row.getLastCellNum(); i++){\n\t\t    \t\tcell = row.getCell(i);\n\t\t\t    \tSystem.out.println(\"cell value: \"+ \ncell.getStringCellValue());\n\t\t\t    \treadData[i] = cell.getStringCellValue();\n\t    \t\t}\n\t\t}\n\n\t//Part III verify\n\t\tassertNotNull(\"result not null\", readData);\n\t\tassertTrue(\"result not empty\", readData.length > 0);\n\n\t\tassertTrue(\"compare result length vs. expected result length\", \nreadData.length == data.length);\n\t\tfor(short i = 0; i < data.length; i++){\n\t\t\tassertEquals(\"Should be equal\", data[i], readData[i]);\n\t\t}\n\t}\n\n  \nPS. Before testing plase update the file paths", "creator": "lukaszr@netzero.com", "attachment_id": null, "id": 61989, "time": "2004-08-14T22:21:15Z", "bug_id": 30671, "creation_time": "2004-08-14T22:21:15Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 30671, "attachment_id": null, "id": 93033, "time": "2006-09-05T13:11:42Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:11:42Z", "is_private": false, "text": "I believe this is a duplicate of Bug 30671. Both issues have been open for ages."}, {"count": 2, "tags": [], "creator": "cpuidle@gmx.de", "attachment_id": null, "text": "Sorry, meant bug 30635.", "id": 93035, "time": "2006-09-05T13:13:11Z", "bug_id": 30671, "creation_time": "2006-09-05T13:13:11Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 30671, "attachment_id": null, "id": 93036, "time": "2006-09-05T13:15:36Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:15:36Z", "is_private": false, "text": "*** This bug has been marked as a duplicate of 30635 ***\n\n*** This bug has been marked as a duplicate of 30635 ***"}]
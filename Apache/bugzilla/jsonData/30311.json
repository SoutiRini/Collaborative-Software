[{"count": 0, "tags": [], "creator": "andrex.puppy@ntlworld.com", "attachment_id": null, "text": "A cell's conditional formatting cannot be retrieved/set/copied-from-an-existing-\ncell. Many of the spreadsheets I'm working with use this Excel feature to \nhighlight cells with specific values, in most cases with coloured backgrounds.", "id": 61089, "time": "2004-07-24T18:28:47Z", "bug_id": 30311, "creation_time": "2004-07-24T18:28:47Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 30311, "attachment_id": 21680, "id": 114727, "time": "2008-03-18T21:55:24Z", "creator": "dq@mail.com", "creation_time": "2008-03-18T21:55:24Z", "is_private": false, "text": "Created attachment 21680\nNew Files"}, {"count": 2, "tags": [], "bug_id": 30311, "text": "Created attachment 21681\nPatch for Conditional Formatting", "id": 114728, "time": "2008-03-18T21:56:32Z", "creator": "dq@mail.com", "creation_time": "2008-03-18T21:56:32Z", "is_private": false, "attachment_id": 21681}, {"count": 3, "attachment_id": null, "bug_id": 30311, "text": "Thanks for this patch Dmitriy, it looks great.\n\nI've applied it to svn trunk, after having made a few tweaks, to get all the existing tests to still pass. (There seemed to be some problems with the formulas on certain files in the test suite, so I had to convert the ptgs into a non shared format, so they could be serialised)", "id": 114739, "time": "2008-03-19T05:28:15Z", "creator": "apache@gagravarr.org", "creation_time": "2008-03-19T05:28:15Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "dq@mail.com", "attachment_id": 21708, "text": "Created attachment 21708\nHSSFConditionalFormatting javadoc patch\n\nA javadoc patch with a Conditional Formatting usage example", "id": 114935, "time": "2008-03-24T22:45:17Z", "bug_id": 30311, "creation_time": "2008-03-24T22:45:17Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 30311, "text": "(In reply to comment #4)\n\nThanks for the javadoc, Dmitriy. Applied in r640711.\n\nBTW I was attempting to improve this class a little bit (make fields private final, etc) but when I checked the junits at the end I found that none of them actually hit this class.  \n\nCould you please make a junit that exercises HSSFConditionalFormatting especially the new addConditionalFormatting() methods on HSSFSheet? \n\nI'll attach a diff of the suggested improvements (which might help you think of test cases, if any of the changes are wrong).\n", "id": 114936, "time": "2008-03-24T23:45:24Z", "creator": "josh@apache.org", "creation_time": "2008-03-24T23:45:24Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 30311, "text": "Created attachment 21709\nsvn diff of 2 files\n\nSuggested improvements to HSSFConditionalFormatting.  Minor changes to HSSFSheet.", "id": 114937, "time": "2008-03-24T23:47:34Z", "creator": "josh@apache.org", "creation_time": "2008-03-24T23:47:34Z", "is_private": false, "attachment_id": 21709}, {"count": 7, "tags": [], "creator": "dq@mail.com", "attachment_id": 21711, "text": "Created attachment 21711\nFurther javadocs and other minor changes (to replace patch 21709)\n\nJosh, \nYour changes do make sense. I continued in the same direction and \nmade some additional minor changes. \nAlso renamed some methods and further improved javadocs.\nIf I get more time, I will try to create a junit.\nFor now just this.\n\nMy patch(svn3.diff) includes your changes as well, so you can apply it instead of yours.", "id": 114946, "time": "2008-03-25T06:23:18Z", "bug_id": 30311, "creation_time": "2008-03-25T06:23:18Z", "is_private": false}, {"count": 8, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "(In reply to comment #7)\n> Created an attachment (id=21711) [details]\n> Further javadocs and other minor changes (to replace patch 21709)\n\nApplied in svn r641157", "id": 114970, "time": "2008-03-25T22:31:25Z", "bug_id": 30311, "creation_time": "2008-03-25T22:31:25Z", "is_private": false}, {"count": 9, "tags": [], "creator": "dq@mail.com", "attachment_id": 21733, "text": "Created attachment 21733\nunit test for HSSFConditionalFormatting and fixes", "id": 115082, "time": "2008-03-28T17:12:57Z", "bug_id": 30311, "creation_time": "2008-03-28T17:12:57Z", "is_private": false}, {"count": 10, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "(In reply to comment #9)\n> unit test for HSSFConditionalFormatting and fixes\n\nAdded this patch in svn r642878.\n\nI did some other clean-up (mostly for better encapsulation).  Please review, and let me know if there is anything wrong.\n\nPOI is mostly coded in a way that reading an XLS file and rewriting it will have no ill-effects.  It seems like the conditional formatting stuff mostly obeys this principle.  However, writing a new XLS file or adding conditional formatting to an existing XLS file might need a bit of work.\n\nI found two bugs in CFRuleRecord (which have been fixed and have junits now):  The 'undocumented' bits of the options field need to be set to zero (as far as I can tell).  Setting them all to one causes Excel to report errors when reading the generated file.  Another problem was that the wrong formula length field was being set when formula2 was changed.\n\nAnother test I tried but gave up on, was to create some conditional formatting using a FontFormatting object.  It seems that POI doesn't generate proper XLS files when this feature is used.  The 118 byte data generated is quite different to the one generated by Excel (if you attempt to make the formatting the same).\n\n\n", "id": 115119, "time": "2008-03-30T22:27:12Z", "bug_id": 30311, "creation_time": "2008-03-30T22:27:12Z", "is_private": false}, {"count": 11, "tags": [], "creator": "dq@mail.com", "attachment_id": 21784, "text": "Created attachment 21784\nBetter support for CF read/modify mode\n\nadded methods \ngetFontFormatting()\ngetBorderFormatting()\ngetFontFormatting() \nto HSSFConditionalFormattingRule \nto allow access for modifications of existing worksheets.\nAttempted to match flags FontFormatting with the ones created by Excel.\nDisabled condense flags Excel does not support them and there is not way \nto verify them.", "id": 115354, "time": "2008-04-06T19:44:12Z", "bug_id": 30311, "creation_time": "2008-04-06T19:44:12Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 30311, "attachment_id": null, "id": 115355, "time": "2008-04-06T20:27:45Z", "creator": "josh@apache.org", "creation_time": "2008-04-06T20:27:45Z", "is_private": false, "text": "(In reply to comment #11)\n> Created an attachment (id=21784) [details]\n\npatch applied in svn r645352.\n\nDmitriy,\n \nCould you please have a look at comment 10?  This most recent patch doesn't seem to address those issues.\n\nCan you write a test which sets some conditional formatting with a new FontFormatting instance, and produces an XLS file?  Last time I tried, Excel would not read that file.\n"}, {"count": 13, "tags": [], "creator": "dq@mail.com", "attachment_id": null, "text": "Josh,\n\nI did try to create a file and it worked fine for me. I also tried to read an xls file created by Excel and found that FontFormatting 118 bytes array looked a little bit different than the program expected. I made some corrections for that.\n\nIt would be good to create a test which produces a file, saves it and then reads it. What are the POI's conventions for file creation? Should I do it in a standard  TEMP directory or POI uses some properties to define that place? Do you know other tests which do that?", "id": 115366, "time": "2008-04-07T06:48:54Z", "bug_id": 30311, "creation_time": "2008-04-07T06:48:54Z", "is_private": false}, {"count": 14, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "Dmitriy,\n\nLooks like everything is mostly OK now.  Perhaps we should consider this bugzilla closed since this is a good milestone - POI now seems to support quite a few simple Conditional Formatting use-cases.  Any future bugs related to Conditional Formatting should probably get their own specific bugzilla.\n\n(In reply to comment #13)\n> ... What are the POI's conventions for file creation? ...\n\nSee methods at the top of hssf.usermodel.TestBugs.  The least preferred action is to create an XLS file that requires a developer to open and inspect - mostly because that operation is expensive.  Usually the only person that can properly judge success is the one who originally wrote the junit.\nSo - try to write tests that unambiguously detect bug conditions with plain java code.  For example, if you find that setting CFHeaderRecord.field_1_numcf=-1 causes excel to crash, write a junit that confirms POI does not do this, and put a comment on it explaining why this is important.  \nThis approach requires does more work though, because it involves a little bit of reverse engineering: \"What exactly does my bug-fix change about the output XLS file that causes it to open OK in Excel?\"\n\n\n\n---------------\n> ... I did try to create a file and it worked fine for me...\n\nI found the old test which gave me trouble and re-ran it, and things are much better now. I also re-ran as-of svn revision 642878, but the bold format seems to get lost.  So you must have fixed something regarding font formatting since then.\nThe original (more serious bug) was that Excel would complain when opening the file, and (un)fortunately I couldn't reproduce that.  I must have inadvertently fixed that while completing the work for 642878.  \n\nI attached the sample code below for you to take a look at.  Note that it still shows a difference in the 118 byte font format data.  Is that a problem? Your call.\nThe input file (cfEx.xls) for this test is a file created by Excel with one conditional format entry.  The only format is font-type: bold, so the sample code should ideally change nothing\n\n--\n\nInputStream is = new FileInputStream(\"cfEx.xls\");\nHSSFWorkbook wb = new HSSFWorkbook(is);\nHSSFSheet sheet = wb.getSheetAt(0);\n\nHSSFConditionalFormatting cf = sheet.getConditionalFormattingAt(0);\nRegion[] regions = cf.getFormattingRegions();\n\nsheet.removeConditionalFormatting(0);\n\nHSSFFontFormatting fontFmt = new HSSFFontFormatting();\nfontFmt.setFontStyle(false, true);\nbyte op = CFRuleRecord.ComparisonOperator.BETWEEN;\nHSSFConditionalFormattingRule rule = sheet.createConditionalFormattingRule(op, \"5\", \"10\",  fontFmt, null, null);\n\nHSSFConditionalFormattingRule rule1 = cf.getRule(0); \n\nbyte[] rawRecord1 = rule1.getCfRuleRecord().getFontFormatting().getRawRecord();\nfor (int i = 0; i < rawRecord1.length; i++) {\n\tSystem.out.print(rawRecord1[i] + \",\");\n}\nSystem.out.println();\n\nbyte[] rawRecord = fontFmt.getFontFormattingBlock().getRawRecord();\nfor (int i = 0; i < rawRecord.length; i++) {\n\tSystem.out.print(rawRecord[i]+ \",\");\n}\nSystem.out.println();\n\n\nsheet.addConditionalFormatting(regions, new HSSFConditionalFormattingRule[] { rule, });\n\nOutputStream os = new FileOutputStream(\"cfEx-out.xls\");\nwb.write(os);\nos.close();\n", "id": 115388, "time": "2008-04-07T16:15:34Z", "bug_id": 30311, "creation_time": "2008-04-07T16:15:34Z", "is_private": false}, {"count": 15, "tags": [], "creator": "dq@mail.com", "attachment_id": 21789, "text": "Created attachment 21789\nSet some bits in FontFormatting record to match with Excel\n\nI verified the comparison between Excel's FontFormatting record and POI's.\nActually the first 64 bytes of 118 byte array according to OpenOffice documentation are reserved for the font name. My code initializes this area with 0s which works fine for Excel. Excel seem to live some random garbage  there after the bytes containing 0 length. (I found a substring of a printer name in that area). I believe the comparison of these first 64 bytes does not give a lot.\n\nI reviewed the rest 54 bytes and found one difference (which somehow did not affect Excel's behavior). I noticed that when the file is created by excel, 4 bytes at offset 112 (documented by OpenOffice as \"Not used\") always contain 0x7FFFFFFF.\nSo I did the same in the constructor. Now they should match with Excel.", "id": 115395, "time": "2008-04-07T20:45:24Z", "bug_id": 30311, "creation_time": "2008-04-07T20:45:24Z", "is_private": false}, {"count": 16, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "(In reply to comment #15)\n> Created an attachment (id=21789) [details]\n> Set some bits in FontFormatting record to match with Excel\n\napplied in svn r646194", "id": 115445, "time": "2008-04-08T22:55:42Z", "bug_id": 30311, "creation_time": "2008-04-08T22:55:42Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 30311, "attachment_id": 21818, "id": 115566, "time": "2008-04-11T22:52:58Z", "creator": "dq@mail.com", "creation_time": "2008-04-11T22:52:58Z", "is_private": false, "text": "Created attachment 21818\nFixes and API improvements\n\nImproved logic working with CFRuleRecord option flags.\nNow it is possible to create correct (so that they work in Excel ) \nConditional Formatting rules not only for FontFormatting, \nbut for the other two structures: PatternFormatting and BorderFormatting.\n\nI do not include a test working with files yet.\n\nImproved high level API. Now it is more convenient  and consistent.\nExample :\nPrevious approach:\n-----------------------------------------\n// This  patternFtmt object is detached from the rule\n// and consequently cannot notify the rule when it changes.\nHSSFPatternFormatting patternFmt = new HSSFPatternFormatting();\n\n\nHSSFConditionalFormattingRule rule = sheet.createConditionalFormattingRule(formula, null, null, patternFmt);\n\n// It is also possible to share this patternFmt between more than one rules\n// which creates potential conflicts between the rules,\n// since changes on one patternFmt will implicitly affect all related rules\nHSSFConditionalFormattingRule rule2 = sheet.createConditionalFormattingRule(formula2, null, null, patternFmt);\n\n\n-----------------------------------------\n\nNew approach:\n-----------------------------------------\nHSSFConditionalFormattingRule rule = sheet.createConditionalFormattingRule(formula);\n\n// This patternFmt always exists in context of it's parent rule.\n// No conflicts possible. \n// API does not allow to share the same instance of HSSFPatternFormatting \n// between many rules.\nHSSFPatternFormatting patternFmt = rule.createPatternFormatting();\n\n-----------------------------------------"}, {"count": 18, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "(In reply to comment #17)\n> Created an attachment (id=21818) [details]\n> Fixes and API improvements\n\nApplied in svn r648334\n\nI separated all the conditional formatting stuff from HSSFSheet (which has many methods already).  This will give more freedom to add methods to the API, like the recent overloaded convenience methods in this patch.\n\nI noticed you changed the definition of CFRuleRecord.modificationBits - it broke a junit (easy fix).  Could you add a comment as to why you took the MSB out of the mask?\n\n\n\n", "id": 115613, "time": "2008-04-15T10:12:49Z", "bug_id": 30311, "creation_time": "2008-04-15T10:12:49Z", "is_private": false}]
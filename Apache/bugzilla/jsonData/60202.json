[{"attachment_id": null, "tags": [], "bug_id": 60202, "text": "It appears that a network or other failure to connect/bind to LDAP counts as an authentication failure for the purpose of the lockout realm. This means maintenance on the LDAP system can cause LDAP users to be locked out due to failed connections with correct passwords.", "count": 0, "id": 194130, "time": "2016-10-04T15:45:54Z", "creator": "ben@zvan.net", "creation_time": "2016-10-04T15:45:54Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60202, "text": "Given the way that the LockOutRealm works (as a Realm wrapper with no insight into the inner workings of the Realm it wraps) there is no easy way to fix this as it has no way to dertermine why an authentication has failed.\n\nAdditionally, most LDAP services implement their own lock out policy for failed passwords so use of the LockOutRealm may not be necessary in this case.", "id": 194131, "time": "2016-10-04T16:05:52Z", "creator": "markt@apache.org", "creation_time": "2016-10-04T16:05:52Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "chris@christopherschultz.net", "is_private": false, "id": 194134, "time": "2016-10-04T17:02:48Z", "bug_id": 60202, "creation_time": "2016-10-04T17:02:48Z", "tags": [], "text": "Perhaps the Realm interface could be adjusted to throw a variety of exceptions:\n\n- AuthenticationException (triggers lock-out)\n- CommunicationException (does not trigger lock-out)\n\nHonestly, if a Realm throws an exception during authentication, I would think that should always be considered a transient failure and NOT trigger lock-out.\n\nIf the LDAPRealm is returning <false> when a communications exception occurs, I think it should instead throw an exception."}, {"count": 3, "tags": [], "bug_id": 60202, "attachment_id": null, "text": "The realm doesn't and shouldn't throw exceptions at all :) Look at the lock out realm code.", "id": 194135, "time": "2016-10-04T17:17:02Z", "creator": "remm@apache.org", "creation_time": "2016-10-04T17:17:02Z", "is_private": false}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 194137, "time": "2016-10-04T18:41:41Z", "bug_id": 60202, "creation_time": "2016-10-04T18:41:41Z", "is_private": false, "text": "(In reply to Remy Maucherat from comment #3)\n> The realm doesn't and shouldn't throw exceptions at all :) Look at the lock\n> out realm code.\n\nHow should the Realm behave if there is a communications error? I assert that throwing an exception is a perfectly reasonable thing to do.\n\nThe current Realm code is irrelevant. It will behave however we want it to behave. I'm suggesting a change to the behavior, not asking why it doesn't behave in a way that it wasn't programmed to do.\n\nIt's not LockOutRealm that you need to read, it's LDAPRealm, which shows that it catches exceptions like CommunicationException (a transient, non-authentication-related problem) and returns null which makes it look the same as an authentication problem, which is isn't."}, {"count": 5, "attachment_id": null, "bug_id": 60202, "text": "So I want it to behave the way it does, mostly, and especially not fail requests like that.\n-1", "id": 194138, "time": "2016-10-04T18:46:48Z", "creator": "remm@apache.org", "creation_time": "2016-10-04T18:46:48Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 60202, "attachment_id": null, "text": "I agree with Christopher here. Possibly this is a two-part fix, one to adjust the LDAPRealm to treat connection failures differently than authentication failures, and one to allow the LockoutRealm to know the difference.", "id": 194183, "time": "2016-10-06T14:39:59Z", "creator": "ben@zvan.net", "creation_time": "2016-10-06T14:39:59Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 60202, "text": "This is not useful, we can understand all you care about is having your issue fixed, regardless of the collateral damage. Exception propagation is clearly not the right way to do it, since the request should go on without an authenticated user and then generate a response according to the security constraints (if any).\n\nSomething that could be possible: return a singleton token principal in case of some failure that is not an auth failure. The downside is that it's a hack that is risky, and I'm not convinced it is worth trying.", "id": 194184, "time": "2016-10-06T14:47:40Z", "creator": "remm@apache.org", "creation_time": "2016-10-06T14:47:40Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 60202, "text": "I'm not asking for a hack fix and I'm not asking for a fix that might break something down the line. I'm asking for an improvement that will make the application work better implemented in whatever way the development community decides is best for the project.", "id": 194185, "time": "2016-10-06T15:21:33Z", "creator": "ben@zvan.net", "creation_time": "2016-10-06T15:21:33Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 60202, "is_private": false, "text": "It's not magical and at this point the thinking is that we have to change something and it would be problematic.\n\nSomething that could work better is having a \"Realm.isUp\" method or something like this. That's not quite the way this realm is designed to work with its connection at the moment.", "id": 194186, "time": "2016-10-06T16:34:01Z", "creator": "remm@apache.org", "creation_time": "2016-10-06T16:34:01Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 60202, "text": "Remy, I just want to take the opportunity to point out that, in *this* bug you claim that throwing an IOException (essentially what is happening, here) would be some kind of major moral violation yet in bug #59876 you argue that \"hey, sometimes IOExceptions happen and you just have to deal with them\".\n\nIt sounds like your position is that code should never change after its been written.\n\n-1 to your attitude :(\n\nI'm reopening this bug for further discussion.", "count": 10, "id": 194236, "time": "2016-10-08T19:33:47Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-10-08T19:33:47Z", "is_private": false}, {"count": 11, "tags": [], "text": "I am not the one who closed this report in the first place, hence my -1 is seconded. You don't need to reopen a bug to have further discussion as well.\n\nYour argument on exceptions doesn't make sense. In realms, the authentication must look as if it fails to see what the request will do, regardless on what happens in the realm. Elsewhere, exception are propagated. Async, as in the other report, is something else, the user component receives the exception and can do anything with it (so it is an opportunity for processing, logging, etc).", "attachment_id": null, "id": 194293, "creation_time": "2016-10-10T06:38:49Z", "time": "2016-10-10T06:38:49Z", "creator": "remm@apache.org", "bug_id": 60202, "is_private": false}, {"count": 12, "tags": [], "bug_id": 60202, "text": "Created attachment 34352\nisUp idea from comment 9\n\nUsing LifecycleState.FAILED is also a possibility but it could have side effects so I didn't try it.", "id": 194302, "time": "2016-10-10T13:00:37Z", "creator": "remm@apache.org", "creation_time": "2016-10-10T13:00:37Z", "is_private": false, "attachment_id": 34352}, {"count": 13, "tags": [], "bug_id": 60202, "is_private": false, "text": "Created attachment 34396\nv2\n\nI still had the changes locally, so I added the checks to the other similar realms. It's not accurate for a transient connection failure, but it should be good enough since the only consumer of this is the lockout realm.", "id": 194612, "time": "2016-10-21T08:53:00Z", "creator": "remm@apache.org", "creation_time": "2016-10-21T08:53:00Z", "attachment_id": 34396}, {"count": 14, "tags": [], "bug_id": 60202, "is_private": false, "text": "That looks like a pretty elegant solution. How would it interact with third-party realms?", "id": 194633, "time": "2016-10-22T01:31:56Z", "creator": "ben@zvan.net", "creation_time": "2016-10-22T01:31:56Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 60202, "text": "(In reply to Ben from comment #14)\n> That looks like a pretty elegant solution. How would it interact with\n> third-party realms?\n\nA third party realm would have to implement the new API method.", "id": 194654, "time": "2016-10-24T13:56:56Z", "creator": "remm@apache.org", "creation_time": "2016-10-24T13:56:56Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 60202, "is_private": false, "count": 16, "id": 194672, "time": "2016-10-25T20:52:19Z", "creator": "ben@zvan.net", "creation_time": "2016-10-25T20:52:19Z", "text": "(In reply to Remy Maucherat from comment #15)\n> (In reply to Ben from comment #14)\n> > That looks like a pretty elegant solution. How would it interact with\n> > third-party realms?\n> \n> A third party realm would have to implement the new API method.\n\nLast question (bear with me since I'm not a developer):\nAm I correct that the default isAvailable() you added in Realm.java would return true if a 3rd-party realm did not have its own isAvailable() method?\n\nIf so, this looks like minimal fallout and a good solution to my problem. I'll defer to the community on whether to accept the change but it has my vote."}, {"count": 17, "tags": [], "bug_id": 60202, "attachment_id": null, "is_private": false, "id": 194887, "time": "2016-11-09T09:59:49Z", "creator": "remm@apache.org", "creation_time": "2016-11-09T09:59:49Z", "text": "I included the change for 8.5.9 and 9.0.0.M14. I don't plan to backport to earlier versions since it's an API change."}]
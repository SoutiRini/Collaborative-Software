[{"count": 0, "text": "I was having problems using ant to start a j2ee server (Jonas). The problem was that ant \nkept waiting for the process to finish (which is strange, as it was started by a script in the \nbackground). Anyway, this does seem to occur to other people too (I found some references \nin the mailing list with people having the same kind of problem when starting tomcat).  \nThe suggested solution that seems to be wildly circulated on the mailing lists is a hacked \nversion of the Exec task (apropriately called 'spawn'). Therefore I propose to allow an \noptional boolean parameter called 'detach' to the exec task (defaulting to false) which \ncontrols this kind of behaviour. I have implemented this and provide the patch (base version \nis ant 1.5.4) below. I'm not sure that it will behave properly under all circumstances (I'm not \nan expert in forked processes behaviour and handling), but it does solve my problem (which \nis a good start ;-) ). \n \nregards, \nIves Landrieu \n \n------------------- patch follows ----------------------- \n--- apache-ant-1.5.4/src/main/org/apache/tools/ant/taskdefs/ExecTask.java\t2003-08-12 \n14:11:06.000000000 +0200 \n+++ apache-ant-1.5.4.patched/src/main/org/apache/tools/ant/taskdefs/ExecTask.java\t\n2003-08-25 21:38:48.000000000 +0200 \n@@ -98,6 +98,7 @@ \n     private String resultProperty; \n     private boolean failIfExecFails = true; \n     private boolean append = false; \n+\tprivate boolean detach = false; \n  \n     /**  \n      * Controls whether the VM (1.3 and above) is used to execute the \n@@ -126,6 +127,24 @@ \n     } \n  \n     /** \n+     * Controls detachement of the executing process. \n+     * \n+     * @since Ant 1.6 \n+     */ \n+    public void setDetach(boolean value) { \n+        detach = value; \n+    } \n+ \n+    /** \n+     * Controls detachement of the executing process. \n+     * \n+     * @since Ant 1.6 \n+     */ \n+    public boolean getDetach() { \n+        return detach; \n+    } \n+ \n+    /** \n      * The command to execute. \n      */ \n     public void setExecutable(String value) { \n@@ -307,6 +326,7 @@ \n         exe.setAntRun(getProject()); \n         exe.setWorkingDirectory(dir); \n         exe.setVMLauncher(vmLauncher); \n+\t\texe.setDetach(detach); \n         String[] environment = env.getVariables(); \n         if (environment != null) { \n             for (int i = 0; i < environment.length; i++) { \ndiff --exclude='*flc' --exclude='*~' -Naur \napache-ant-1.5.4/src/main/org/apache/tools/ant/taskdefs/Execute.java \napache-ant-1.5.4.patched/src/main/org/apache/tools/ant/taskdefs/Execute.java \n--- apache-ant-1.5.4/src/main/org/apache/tools/ant/taskdefs/Execute.java\t2003-08-12 \n14:11:08.000000000 +0200 \n+++ apache-ant-1.5.4.patched/src/main/org/apache/tools/ant/taskdefs/Execute.java\t\n2003-08-25 21:35:40.000000000 +0200 \n@@ -96,6 +96,7 @@ \n  \n     /** Controls whether the VM is used to launch commands, where possible */ \n     private boolean useVMLauncher = true; \n+\tprivate boolean detach = false; \n  \n     private static String antWorkingDirectory = System.getProperty(\"user.dir\"); \n     private static CommandLauncher vmLauncher = null; \n@@ -394,6 +395,17 @@ \n     } \n  \n     /** \n+     * Controls whether ant will wait for the launched process to finish. \n+     * @param useVMLauncher true if exec should launch through thge VM, \n+     *                   false if the shell should be used to launch the \n+     *                   command. \n+     */ \n+ \n+    public void setDetach(boolean detach) { \n+        this.detach = detach; \n+    } \n+ \n+    /** \n      * Creates a process that runs a command. \n      * \n      * @param project the Project, only used for logging purposes, may be null. \n@@ -445,16 +457,20 @@ \n         if (watchdog != null) { \n             watchdog.start(process); \n         } \n-        waitFor(process); \n- \n-        // remove the process to the list of those to destroy if the VM exits \n-        // \n-        processDestroyer.remove(process); \n+\t\tif(!detach) { \n+\t\t\twaitFor(process); \n+\t\t\t \n+\t\t\t// remove the process to the list of those to destroy if the VM exits \n+\t\t\t// \n+\t\t\tprocessDestroyer.remove(process); \n+\t\t} \n  \n         if (watchdog != null) { \n             watchdog.stop(); \n         } \n-        streamHandler.stop(); \n+\t\tif(!detach) { \n+\t\t\tstreamHandler.stop(); \n+\t\t} \n         if (watchdog != null) { \n             watchdog.checkException(); \n         }", "creator": "ives.landrieu@pandora.be", "attachment_id": null, "id": 43268, "time": "2003-08-25T20:13:13Z", "bug_id": 22710, "creation_time": "2003-08-25T20:13:13Z", "tags": [], "is_private": false}, {"count": 1, "text": "CVS HEAD's <exec> has a spawn attribute.\n\n*** This bug has been marked as a duplicate of 5907 ***", "creator": "bodewig@apache.org", "is_private": false, "id": 43313, "time": "2003-08-26T07:36:57Z", "bug_id": 22710, "creation_time": "2003-08-26T07:36:57Z", "tags": [], "attachment_id": null}]
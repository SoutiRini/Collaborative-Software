[{"count": 0, "tags": [], "bug_id": 48877, "text": "If you use an XSSFWorkbook together with a RichTextString, that applies a font to a string containing a new line char (\"\\n\"), the line-break is ignored. \nHere is a slightly modified code sample of the \"Quick-Guide - Using newlines in cells\" http://jakarta.apache.org/poi/hssf/quick-guide.html#NewLinesInCells:\n\n        Workbook wb = new XSSFWorkbook();\n        Sheet sheet = wb.createSheet();\n        \n        Font font1 = wb.createFont();\n        font1.setColor((short) 20);\n\n        Row row = sheet.createRow(2);\n        Cell cell = row.createCell(2);\n        \n        RichTextString richTextString = wb.getCreationHelper().createRichTextString(\"Use \\n with word wrap on to create a new line\");\n        richTextString.applyFont(0, 3, font1);\n        cell.setCellValue(richTextString);\n\n        //to enable newlines you need set a cell styles with wrap=true\n        CellStyle cs = wb.createCellStyle();\n        cs.setWrapText(true);\n        cell.setCellStyle(cs);\n\n        //increase row height to accomodate two lines of text\n        row.setHeightInPoints((2*sheet.getDefaultRowHeightInPoints()));\n\n        //adjust column width to fit the content\n        //sheet.autoSizeColumn((short)2);\n\n        FileOutputStream fileOut = new FileOutputStream(\"ooxml-newlines.xlsx\");\n        wb.write(fileOut);\n        fileOut.close();", "id": 135189, "time": "2010-03-09T12:50:36Z", "creator": "sm01@mitzis-home.de", "creation_time": "2010-03-09T12:50:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 48877, "text": "After running the sample code and opening the generated xslx-File, there is no line break in the Cell with value \"Use \\n with word wrap on to create a new line\";", "id": 135190, "time": "2010-03-09T12:55:31Z", "creator": "sm01@mitzis-home.de", "creation_time": "2010-03-09T12:55:31Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 48877, "text": "XmlBeans will sometimes eat linebreaks if you don't tell it the right options\n\nAny chance you could create a short junit testcase that creates a new file with the line breaks supposed to be there, saves it and loads it again, and checks for the line break? That'll give us something to debug with, as well as a unit test to verify it stays fixed once we track down the issue", "id": 135198, "time": "2010-03-09T14:40:10Z", "creator": "apache@gagravarr.org", "creation_time": "2010-03-09T14:40:10Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "POI 3.7 has the same issue.", "attachment_id": null, "bug_id": 48877, "id": 143017, "time": "2010-12-31T15:04:23Z", "creator": "duanxingjian@gmail.com", "creation_time": "2010-12-31T15:04:23Z", "is_private": false}, {"count": 4, "tags": [], "text": "I've just tried this with svn trunk. I've added a slightly extended versionn of your unit test, which shows that the text remains unchanged on save / reload, and the newlines (and even trailing spaces) are fine. When I save the file out and load it up, I see the newlines in the cell as expected\n\nIf you still have problems on a recent svn / nightly build, please include an updated unit test that shows the problem.", "attachment_id": null, "bug_id": 48877, "id": 144741, "time": "2011-03-04T12:06:59Z", "creator": "apache@gagravarr.org", "creation_time": "2011-03-04T12:06:59Z", "is_private": false}, {"count": 5, "tags": [], "text": "I've just run into this issue in 3.7 so I upgraded to 3.8-beta2 and I'm still experiencing what seems to be strange behaviour. The code below shows the problem which I think might be related to the line-break \"\\n\" being treated as two characters.\n\nFor example, on row zero it's impossible to completely style the word \"Incorrect\" and also end up with a line break. I would have expected \"Incorrect\" to be fully styled when i == 2 then a line-break and then the text \"Line-Breaking\" what actually happens is \"Incorrect\" is styled, the line-break is removed or ignored and \"Line-Breaking\" is placed hard up against \"Incorrect\". Interestingly when i == 4 so that the first character of \"Line-Breaking\" is styled the line-break re-appears.\n\nI've worked around this issue by putting spaces around the line-break character which lets me style each part individually at the cost of some extra space but that's not so noticeable when the text is centred.\n\nXSSFCellStyle headerStyle = (XSSFCellStyle) wb.createCellStyle();\nheaderStyle.setWrapText(true);\n\nFont largeHeaderfont = wb.createFont();\nlargeHeaderfont.setBoldweight(Font.BOLDWEIGHT_BOLD);\nlargeHeaderfont.setFontHeightInPoints((short) 14);\n\nCreationHelper createHelper = wb.getCreationHelper();\n\nRow row0 = sheet.createRow(0);\nfor( int i = 0, n = 7; i < n; i++ ) {\n\tRichTextString headerString = createHelper.createRichTextString(\"Incorrect\\nLine-Breaking\");\n\theaderString.applyFont(0, 7 + i, largeHeaderfont);\n\n\tCell cell = row0.createCell(i);\n\tcell.setCellStyle(headerStyle);\n\tcell.setCellValue(headerString);\n}\n\nRow row1 = sheet.createRow(1);\nfor( int i = 0, n = 7; i < n; i++ ) {\n\tRichTextString headerString = createHelper.createRichTextString(\"Incorrect \\n Line-Breaking\");\n\theaderString.applyFont(0, 7 + i, largeHeaderfont);\n\n\tCell cell = row1.createCell(i);\n\tcell.setCellStyle(headerStyle);\n\tcell.setCellValue(headerString);\n}", "is_private": false, "id": 145896, "creation_time": "2011-04-20T07:07:36Z", "time": "2011-04-20T07:07:36Z", "creator": "wobblycogs@gmail.com", "bug_id": 48877, "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 48877, "text": "I've beefed up the unit test in TestXSSFBugs, and I can do the styling you're after. With it, I can create a string with a default styling, and two different styles one of which runs to a new line.\n\nCan you give that test a go (uncomment the file output bit) and see if that gives what you need?", "id": 146155, "time": "2011-05-06T08:05:28Z", "creator": "apache@gagravarr.org", "creation_time": "2011-05-06T08:05:28Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "text": "Fixed in r1139505\n\nXSSFRichTextString didn't respect leading or trailing line breaks. The problem was in how POI preserved space characters: each format run is represented by a xml element and if a run starts or ends with a space, it is important to set the  xml:space=\"preserve\" attribute, otherwise XML serializer will strip the space off.\n\nThe old code properly handled the whitespace character (' '), but not line breaks (actually any characters from the 'space' family should be preserved - line breaks, tabs, etc.).\n\nThe old code looked something like this:\n  if (text.startsWith(\" \") || text.endsWith(\" \")) {\n     // set  xml:space=\"preserve\"\n  }\n\nIt evidently ignored line breaks. I changed it as follows and it did the trick:\n\n  if(Character.isWhitespace(firstChar) || Character.isWhitespace(lastChar)) {\n     // set  xml:space=\"preserve\"\n  }\n\n\nYegor", "id": 147478, "time": "2011-06-25T08:46:47Z", "bug_id": 48877, "creation_time": "2011-06-25T08:46:47Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 39177, "is_private": false, "id": 87493, "time": "2006-04-01T10:10:10Z", "creator": "yegor@dinom.ru", "creation_time": "2006-04-01T10:10:10Z", "tags": [], "text": "Nick, it seems there is a bug with stylings. I'm implementing TextBox shape and\nget corrupted files.\n\nDescription:\n If change text via TextRun.setText and save the resulting ppt the output has\ncorrect\nstructure but when opening it in PowerPoint it looks corrupted.\n\nTest case:\n\n    public void testChangeText() throws Exception {\n        String dirname = System.getProperty(\"HSLF.testdata.path\");\n        \n        String filename = dirname + \"/with_textbox.ppt\";\n        HSLFSlideShow hss = new HSLFSlideShow(filename);\n        SlideShow ppt = new SlideShow(hss);\n        \n        Slide sl = ppt.getSlides()[0];\n        TextRun[] txt = sl.getTextRuns();\n        for (int i = 0; i < txt.length; i++) {\n          String text = txt[i].getText();\n\n          //everything should remain the same. Existing data structures must be\npreserved.\n          txt[i].setText(text);\n        }\n         \n        FileOutputStream out = new FileOutputStream(\"text_poi.ppt\");\n        ppt.write(out);\n        out.close();\n\n        //open it and see that it is corrupted\n    }\n\nIf you compare the original file and the re-saved one you will see thast the\ndifferences are\nonly in StyleTextPropAtom.\nFor example, for \"Plain Text\" string:\n\n                   before           after\nparagraph.length   12               11\ncharacters.length  12               11\n\nfor \"This is Times New Roman\":\n\n                   before           after\nparagraph.length   24               23\ncharacters.length  24               23\n\nThat is the length of text in stylings is always text.length while it should be\ntext.length+1.\nIf text consists of multiple RichTextRun object then the total size of all text\nruns must be rawtext.length+1.\n\nQuick fix:\nLines 277 and 288 in TextRun.setText should be changed as follows:\n\n  pCol.updateTextSize(s.length()+1);\n  cCol.updateTextSize(s.length()+1);\n\n With this fix everything works right. The re-saved ppt have the same structure\nas the original file.\n\n\nRegards, Yegor"}, {"count": 1, "tags": [], "bug_id": 39177, "attachment_id": 18012, "id": 87494, "creation_time": "2006-04-01T10:11:21Z", "time": "2006-04-01T10:11:21Z", "creator": "yegor@dinom.ru", "text": "Created attachment 18012\nCode which fixes the bug", "is_private": false}, {"count": 2, "tags": [], "bug_id": 39177, "attachment_id": null, "is_private": false, "id": 87561, "time": "2006-04-04T15:00:25Z", "creator": "yegor@dinom.ru", "creation_time": "2006-04-04T15:00:25Z", "text": "Hi Nick,\n\nI got why the sum of lengths must be rawtext.length + 1.\nExtra character controls the format of new text which is appended to the end.\nFor example, consider a string \"Hello, World!\" with 2 format runs:\n\n<b>Hello,</b><i> World!</i>\nThe first part is bold, the second is italic. \n\nTotal length of the string is 13 so the sum of lengths must be 13 + 1 = 14.\nExtra character must be included either in  <b>Hello,</b> or to <i> World!</i>\nfragment.\n\nIn first case if you edit the text in PowerPoint and append something to the end\nit will be bold, in the second case - italic. \n\nSounds tricky. Isn't it? I think we should keep it simple and automatically add\nthe extra character \nto the last format run. Any objections? \n\nRegards, Yegor"}, {"count": 3, "attachment_id": null, "bug_id": 39177, "is_private": false, "id": 87562, "time": "2006-04-04T15:05:21Z", "creator": "apache@gagravarr.org", "creation_time": "2006-04-04T15:05:21Z", "tags": [], "text": "Ah, that's looking better. I was a bit worried about randomly just adding one\nmore onto the last length!\n\nI'll probably run some tests on several files, to make sure that adding 1 to the\nlast text run is the right thing to do (it sounds right to me, but you never\nknow with PPT!) and then commit it.\n\nCheers for figuring this out :)"}, {"count": 4, "tags": [], "bug_id": 39177, "attachment_id": null, "id": 87851, "time": "2006-04-12T19:01:33Z", "creator": "apache@gagravarr.org", "creation_time": "2006-04-12T19:01:33Z", "is_private": false, "text": "We also need a tweak to the last RichTextRun, to make that 1 longer too\n\nI've committed a fix that covers both, along with some tests to ensure we don't\nbreak things on re-writes."}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> We also need a tweak to the last RichTextRun, to make that 1 longer too\n> \n> I've committed a fix that covers both, along with some tests to ensure we don't\n> break things on re-writes.\n\nHi Nick,\n\nI was writing this post when you commited the fix. \nIt looks like the problem is fixed. \n\nBelow is an extract from what I was going to post, just to repeat it once more:\n\nThe sum of length of all text runs must equal to total length of the text plus 1.\nThe last text run always contains an extra character which defines styling of a\nnew text \nwhich is appended to the end. This rule works both for character and paragraph\nstyles. I.e. \nthe sum of length of all character styles must be equal to rawtext.length +1\nand the sum of length of all paragraph styles must be equal to rawtext.length +1.\n\nIt makes sense to reflect it in the documentation. Text styling is one of the\nmost weird things in PPT. Even if you look at the working code it's extremely\nhard to figure out why it has the extra character at the end.\n\nBest Regards, Yegor", "is_private": false, "bug_id": 39177, "id": 87855, "time": "2006-04-12T19:21:27Z", "creator": "yegor@dinom.ru", "creation_time": "2006-04-12T19:21:27Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "apache@gagravarr.org", "is_private": false, "id": 87860, "time": "2006-04-12T19:58:42Z", "bug_id": 39177, "creation_time": "2006-04-12T19:58:42Z", "tags": [], "text": "Ah, I'd been wondering about why there was that extra 1 character on the end.\n\nI'm going to need to do another review of the code, to make sure when we build\nup the RichTextRuns, we're properly taking account of this extra character.\n\nWhen it comes to writing it back out, I want to get my head straight on how it\ninterplays with both the reading in, and paragraph stylings (not all the final\nparagraphs seem to have this extra char, so some are 1 shorter than the char\none). I have a feeling that the current code isn't always putting an extra 1\nonto the paragraph styling length, so I want to know if we do need it or not,\nand then get it consistent.\n\nWhen I've got that all sorted, I can try to write some comments that make sense\nto others!"}, {"count": 7, "tags": [], "creator": "apache@gagravarr.org", "text": "OK, the latest re-attack of the RichTextCode should hopefully have this\ncompletely correctly sorted. As a bonus, it's also got it documented, and\nhopefully much easier to see why we're doing it :)", "id": 90142, "time": "2006-06-13T15:02:52Z", "bug_id": 39177, "creation_time": "2006-06-13T15:02:52Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "Daniel.Barclay@digitalfocus.com", "attachment_id": null, "id": 2337, "time": "2001-05-08T14:57:18Z", "bug_id": 1667, "creation_time": "2001-05-08T14:57:18Z", "is_private": false, "text": "It seems that the \"unjar\" task does not check dependencies between\ninput and output files as other Ant tasks do.  \n\nThe main problem is that unjar always emits messages indicating that \nthe task is being performed.  Also not a huge problem, this does disrupt\nchecking that your build file covers everything correctly.  \n\n(I'm thinking of the case of a fully incremental chain of tasks, running \nAnt once to make sure everything it built, running Ant a second time, and \nscanning the output to confirm that no tasks ran the second time, to make \nsure you've set the build file up correctly.  Many tasks are incremental, \nand would work in that mode, but unjar is not.  It always writes an output\nmessage.)\n\n\nThe specific symptoms are:\n\nIn non-verbose mode, unjar reports its \"Expanding xxx into yyy/\"\nmessage even if no files are out of date.\n\nIn verbose mode, unjar lists each file from the Jar file even if\nno files are out of date.\n\nThe unjar task also overwrites any extracted files that were \nmodified since the previous extraction.  It's not clear whether\nthis is intentional (re-extracting to make the timestamp on the\nfile match the timestamp in the Jar file) or simply a result of\nnot checking dependencies.\n\n(No, it probably wouldn't be common to modify files after extracting\nthem, but if other Ant tasks don't overwrite _newer_ files, unjar\nshouldn't either unless it specifically intends to make the output\nfiles (e.g., their timestamps) match what's in the Jar file.)"}, {"count": 1, "tags": [], "bug_id": 1667, "attachment_id": null, "id": 4078, "time": "2001-07-26T23:56:24Z", "creator": "bodewig@apache.org", "creation_time": "2001-07-26T23:56:24Z", "is_private": false, "text": "Nightly build 2001-07-28 adds an overwrite attribute to unjar - that defaults\nto true for backwards compatibility."}]
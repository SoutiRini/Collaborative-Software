[{"count": 0, "attachment_id": null, "bug_id": 42157, "is_private": false, "id": 101858, "time": "2007-04-18T04:15:38Z", "creator": "rui.damas@gmail.com", "creation_time": "2007-04-18T04:15:38Z", "tags": [], "text": "The URLs returned by ServletContext.getResource(String) cannot resolve, ie...\n\nURL url = getResource(\"/WEB-INF/\");\n// url = \"jndi:/servername//WEB-INF/\"\nURI uri = url.toURI().resolve(\"aFile.txt\");\n// uri = \"jndi:/servername/WEB-INF/\"\n// misses the double slash and\nuri.toURL().openStream();\n// will fail\n\n// noticed also...\nURLConnection c = url.openConnection();\nc.getInputStream();\n// should return a stream containing the lits of files\n// (like for the \"file\" protocol)\n// so that directories can be browsed and add to URL.\n// and...\nc.getContentType();\n// could return some special content type so that \n// files can be ditinguished from directories or\n// maybe something like...\nBoolean.parse(c.getRequestProperty(\"is-directory\"));"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 101865, "time": "2007-04-18T05:17:16Z", "bug_id": 42157, "creation_time": "2007-04-18T05:17:16Z", "is_private": false, "text": "This will not be addressed (toURI().resolve is useless, and getInputStream for a\nfolder is a proprietary capability). When running Tomcat over a regular file\nbased environment, it will return file: URL, but if you keep to normal URL\nmanipulation, you may use it over non file based repositories."}, {"count": 2, "attachment_id": null, "bug_id": 42157, "is_private": false, "id": 101881, "time": "2007-04-18T08:23:39Z", "creator": "rui.damas@gmail.com", "creation_time": "2007-04-18T08:23:39Z", "tags": [], "text": "Ok, the lack of directory listing support i understand.\n\nBut as for the URI.resolve... i do not understand.\nShouldn't a URL be URI \"compatible\"... the error happens because the\ngetResource returns one of these: \"jndi:/servername//WEB-INF/\"\nshouldn't it be more like \"jndi://servername/WEB-INF/\" as most URLs,\nit makes sense and URIs would work fine.\n\nAnd i'am running this over a \"a regular file environment\", bellow is the HOST\nelement that I'm using in server.xml.\n\n<Host name=\"alphabit\" unpackWARs=\"false\"\n   appBase=\"/data/http/\">\n  <Context path=\"/\" docBase=\"KISSLet\"/>\n</Host>\n\n(In reply to comment #1)\n> This will not be addressed (toURI().resolve is useless, and getInputStream for a\n> folder is a proprietary capability). When running Tomcat over a regular file\n> based environment, it will return file: URL, but if you keep to normal URL\n> manipulation, you may use it over non file based repositories.\n\n(In reply to comment #1)\n> This will not be addressed (toURI().resolve is useless, and getInputStream for a\n> folder is a proprietary capability). When running Tomcat over a regular file\n> based environment, it will return file: URL, but if you keep to normal URL\n> manipulation, you may use it over non file based repositories.\n\n"}, {"count": 3, "tags": [], "bug_id": 42157, "attachment_id": null, "is_private": false, "id": 101884, "time": "2007-04-18T09:08:07Z", "creator": "remm@apache.org", "creation_time": "2007-04-18T09:08:07Z", "text": "I made a mistake: it will not return a file: URL in most cases. The stream\nhandler factory for the jndi: protocol is set during Tomcat startup, however."}, {"text": "Ok, I know that :), because when i use winstone server (that does not jndi) over\nthe same webapp i get a \"file:\" URL from getResource...\n\nBut the problem is that the jndi URL returned has the TWO SLASHES after and not\nbefore the server name, dont't know about jndi protocol but i think that this\nmust be plain wrong because all URLs i've seen have the TWO SLASHES before the\nserver name and not after.\n\nWould you please give me a better explanation... I still believe this is a bug.\n\n(In reply to comment #3)\n> I made a mistake: it will not return a file: URL in most cases. The stream\n> handler factory for the jndi: protocol is set during Tomcat startup, however.\n\n", "tags": [], "bug_id": 42157, "attachment_id": null, "count": 4, "id": 101887, "time": "2007-04-18T10:54:55Z", "creator": "rui.damas@gmail.com", "creation_time": "2007-04-18T10:54:55Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 42157, "attachment_id": null, "is_private": false, "id": 101896, "time": "2007-04-18T14:18:34Z", "creator": "rui.damas@gmail.com", "creation_time": "2007-04-18T14:18:34Z", "text": "When you wrote \"toURI().resolve is useless\"...\nI've searched a bit and that's not correct, since all URLs are URIs\n(http://www.google.com/search?q=%22all+URLs+are+URIs%22) using toURI().resolve\nshould work and be useful.\n\nat the URI java class documentation explains the following format:\n[scheme:][//authority][path][?query][#fragment]\n\nand not: [scheme:][/authority//][path][?query][#fragment]\n\nIn \"jndi:/servername//WEB-INF/\" the server name is actually part the of the\npath, i tested it and...\n\nURL url = context.getResource(\"/WEB-INF/\");\nurl.getHost();\n// returns \"\"\nurl.getPath();\n// returns \"/servername//WEB-INF/\"\n\nI'm reopening the bug, at least till someone confirm that that's way is supposed\nto be.\n"}, {"count": 6, "tags": [], "creator": "remm@apache.org", "text": "The stream handler factory for the jndi: protocol is set during Tomcat startup,\nwhich means the code you cut & pasted will work, as long as the stream handler\nis correctly set. Please do not reopen the report.", "id": 101899, "time": "2007-04-18T15:42:22Z", "bug_id": 42157, "creation_time": "2007-04-18T15:42:22Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "rui.damas@gmail.com", "text": "Ok... i have taken a look at the source code of version 5.5.23 to better\nunderstand why this behaviour...\n\nThe URL is constructed at ApplicationContext.getResource() at lines 501-503:\n\nreturn new URL\n  (\"jndi\", \"\", 0, getJNDIUri(hostName, fullPath),\n  new DirContextURLStreamHandler(resources));\n\nWhere the hostName is part of the path.\nWhy is the hostName at the host name parameter instead of \"\"?...\nMy only guess is that the host name parameter could possibly be \nbe used to represent jndi resources on other machines and hostName\nis used to represent the virtual host, is that why?\n\nBut thats not really the problem...\nThe path gets built using getJNDIUri(hostName, fullPath), lines 967-972:\n\nprivate static String getJNDIUri(String hostName, String path) {\n  if (!path.startsWith(\"/\"))\n    return \"/\" + hostName + \"/\" + path;\n  else\n    return \"/\" + hostName + path;\n}\n\nHere is where the URL gets the TWO SHASHES...\nI see you do check the path... but the hostName is not checked\nso the second slash must come from the hostName,\nobviously this cannot be solved here because the URL handlers\ndo understand the path with two slashes.\n\nI started to track where the host name comes from and reached\nStandartHost class somewhere arround:\npublic ObjectName preRegister(MBeanServer server, ObjectName oname ) \npublic ObjectName createObjectName(String domain, ObjectName parent)\npublic void setName(String name) {\npublic String getName() {\n\n... Why does the (virtual) hostName comes with a slash?\nis it supposed to be like this?\n\nI bumped into this when codding a servlet that uses XSLT transformations,\nwhich uses URI's to resolve resources, because URI.resolve will alter\nthe two slashes to one, the URLConnection will not work.\n\nThis feels ridiculous, is it suposed to not be able use XSLT transformations?\nDoes this has another solution?\n\nI could use the getRealPath() but that only works for file://, and will\ndisable the possibility of storing the webapp in a \".war\" file.\n\n", "id": 101927, "time": "2007-04-19T03:24:46Z", "bug_id": 42157, "creation_time": "2007-04-19T03:24:46Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "william.barker@wilshire.com", "text": "Of course if you had spent 1/20th of the time reading the Tomcat documentation \nthat you have spent on this, or if you had bothered to ask on the users list, \nyou would have learned that all of your problems are because of your invalid \n<Context> definition from #2.  You *must* leave out the ending '/' character \nwhen defining the path in the <Context>.\n\nAs Remy has been nice enough to point out (repeatedly), your use case works as \nexpected in Tomcat.  ", "id": 101975, "time": "2007-04-19T22:58:07Z", "bug_id": 42157, "creation_time": "2007-04-19T22:58:07Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 42157, "is_private": false, "id": 101979, "time": "2007-04-20T03:08:41Z", "creator": "rui.damas@gmail.com", "creation_time": "2007-04-20T03:08:41Z", "tags": [], "text": "(In reply to comment #8)\n\nWilliam... you are absolutely right :D\n\nI just read: http://tomcat.apache.org/tomcat-5.5-doc/config/context.html\ntested it and it works beautifully \\o/\n\nI use tomcat for a few years now... I guess when I started missed that path\ndetail and until now I've never had trouble.... so I presumed the configuration\nwas fine (maybe initially used some file already bad configured that worked\nfine or simply was being dumb, really don't remember).\n\nI'm sorry for wasting you time on this.\nand thank you for clearly care to explain my mistake.\n\nAs you say i was trying to help and did spent time reading the source\ncode (plus the time i tried solve this in the code i'm writing),\nso don't be \"bothered\" at this.\n\nI wish that some day Remy is able to provide such quality as you in his replies.\n\nAgain, thank you very much :D\n"}]
[{"count": 0, "tags": [], "bug_id": 7901, "attachment_id": null, "text": "According the \u201cDeveloping JAVA Beans (O\u2019Reilly)\u201d book: \nhttp://safari.oreilly.com/main.asp?bookname=javabeans, I think it is useful to \nhave a task that help us to insert the serialVersionUID in the source code.\n\nSerialization of objects to persistent storage presents a potential problem \nwith class version mismatches. This is because the class itself is not \nserialized with the object. Instead, an instance of java.io.ObjectStreamClass \nthat describes the class of the object is serialized. The \njava.io.ObjectStreamClass contains the class name and a version identifier for \nthe serialized object. This allows the local version of the class to evolve \nindependently of the serialized data.\n\nThe compatible class modifications, such as to add a method, modify the \nsignature of the class. If we try to read a serialized object with a class that \nchanged like this, the JVM returns a java.io.InvalidClassException (Local class \nnot compatible) exception. \n\nTo tell to the JVM that nothing significant changed since the last compatible \nclass, we have to mark the class with the same stream identification, named \nSUID. The JDK provides the serialver program that gives the SUID for all \nserializable class.\n\nThe static member variable called serialVersionUID can be included in the code \nof the new class version that implements a compatible modification. So, all \nobjects serialized by the original class are compatible with the new class.\n\nI propose a first ANT task that echoes this SUID, and a second that insert in \nthe source code the serialVersionUID declaration. When the developer wants to \nbreak the compatibility, he can insert in the code a special tag that will be \nreplaced by the SUID. All next compatible compilations will integrate this \nvalue.", "id": 13143, "time": "2002-04-10T00:34:56Z", "creator": "stchauvin@yahoo.com", "creation_time": "2002-04-10T00:34:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 7901, "is_private": false, "text": "Created attachment 1512\ncurrent version of the task (diff on 04/09 build)", "id": 13144, "time": "2002-04-10T00:36:47Z", "creator": "stchauvin@yahoo.com", "creation_time": "2002-04-10T00:36:47Z", "attachment_id": 1512}, {"count": 2, "text": "Hi Magesh,\n\n>If you want getProject to not return a null, your\n>Filter Reader must implement ChainableReader.  Is it\n>implementing it?  Which task are you using to test\n>your filter reader, btw?  One of <copy>, <move>,\n><loadfile>?\nYes, my filter implements ChainableReader and I am using\nthe <copy> task. It works fine if I add my filter in FilterChain:\n\n  <javac srcdir=\"${src}\" includes=\"**/SUIDTest1.java\"/>\n  <copy file=\"${src}\" tofile=\"${dest}/SUIDTest2.java\" overwrite=\"true\">\n    <filterchain>\n      <suidfilterreader failonerror=\"false\">\n        <classpath>\n          <pathelement path=\"${classpath}\"/>\n        </classpath>\n      </suidfilterreader>\n    </filterchain>\n  </copy>\n\nbut not if I am using the filterreader element:\n\n  <javac srcdir=\"${src}\" includes=\"**/SUIDTest1.java\"/>\n  <copy file=\"${src}\" tofile=\"${dest}/SUIDTest2.java\" overwrite=\"true\">\n    <filterchain>\n      <filterreader \nclassname=\"org.apache.tools.ant.taskdefs.optional.serialver.SUIDFilterReader\">\n        <classpath>\n          <pathelement path=\"${classpath}\"/>\n        </classpath>\n        <param name=\"failonerror\" value=\"true\"/>\n      </filterreader>\n    </filterchain>\n  </copy>\nI enclosed the source of the filter, just for information, but the worse is not \nthere...\n\n>Why would you want to execute your SerialVer task\n>from within a filterreader?  We do not encourage\n>calling execute methods of tasks directly, anyway.\n\nMy goal is (and how works the serialver):\n- I create a new serializable class (classA V0).\n- I compile classA V0.\n- I run the serialver program on the compiled classA \n(that's why I need the classpath). It returns its SUID (SUID V0).\n- I add the \"static final long serialVersionUID\" declaration\nin my source code (classA V0).\n- I am done for the V0. If I compile again and run again\nthe serialver program on it, I will get the same SUID.\n- I serialize an object with classA V0 (serA1 V0).\n- Now I decide to add a method doNothing() in classA V0.\nThis modification is compatible and doesn't break the versioning.\nI keep the serialVersionUID declaration. Let's name this new \ncode classA V0-1.\n- I compile classA V0-1.\n- I do not need to run the serialver program. If I do it, it \nwill return the SUID V0, which I put in hard coding.\n- I serialize an object with classA V0-1 (serA2 V0-1).\n- I am able to load serA2 V0-1 or serA1 V0 with classA V0.\nI am also able to read them with classA V0-1. The JVM doesn't\nreturn a java.io.InvalidClassException (Local class not compatible),\nbecause all objects and classes have the same SUID V0.\n- Now let's break the compatibility. I change the API in classA V0-1\nto create classA V1.\n- I need to change the SUID signature. I remove the serialVersionUID \ndeclaration in the source code.\n- I compile classA V1.\n- I run the serialver program on the compiled classA V1\nIt returns its new SUID (SUID V1).\n- I add the \"static final long serialVersionUID\" declaration (SUID1)\nin my source code (classA V1).\n- I am done for the V1.\n- The classA V1 is not able to read the serA2 V0 or serA2 V0-1.\n\nWhat can ANT do for me? A great job!\n- I can put a special token in the source code when I create a\nnew serializable class (classA V0) or when I would like to break \nthe compatibility (classA V1).\n- I compile (<javac>).\n- I parse the source file to replace the special tokens with the\nserialVersionUID declaration (<replaceSUID>).\n- My code is ready for other compilation and compatible modifications.\n\nTo come back to the question, in the solution that I propose, I would like\nto run the serialver program only when I read the special token in a source \nfile.\nIf I am running it for all the fileset all the time, just before to parse the \nsource file, this program returns:\n- an error if the class is not serializable. So the user has to select the \ncorrect\nfiles, and not only the source directory.\n- the same SUID all the time, if the user keep the same serialVersionUID \ndeclaration.\nIt could be annoying to read this list in the ANT output, instead to have a \nlist of the \nnew SUID.\n\nI am wondering if the filterreader is the good solution:\n- calling a task from the read() method is not recommended.\n- how can I get know the filename or better directly the classname of the \ncurrent\nfile. I need it for the argument of the serialver program.\n- if I am doing it in 2 steps: get all the SUID with the <serialver> task, and \nadd them in\na property. Then, a <copy> task use a filterreader to do the replacement. \n\t- it is 2 steps instead of once;\n\t- I have to call serialver on all files (see previous answer).\n\t- the token has to be unique for each file to replace it \n\twith the good SUID (it could be the package name + token, but it is \nking of heavy \n\tfor the user).\n\nShould we come back to the <replaceSUID> task?... I know that you will be \ndisappointed.\nAn alternative solution could be to publish only the <serialver> task. I can \nuse <replaceSUID> task for myself anyway ;-) May be, one day, a developer will \nfind THE solution!\n\nbest regards,\nStephane.\n", "bug_id": 7901, "is_private": false, "id": 13424, "time": "2002-04-12T22:02:54Z", "creator": "stchauvin@yahoo.com", "creation_time": "2002-04-12T22:02:54Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "creator": "stchauvin@yahoo.com", "attachment_id": 1540, "is_private": false, "id": 13425, "time": "2002-04-12T22:04:48Z", "bug_id": 7901, "creation_time": "2002-04-12T22:04:48Z", "text": "Created attachment 1540\nA filterreader to replace the SUID."}, {"count": 4, "tags": [], "creator": "stchauvin@yahoo.com", "attachment_id": 2287, "is_private": false, "id": 19148, "time": "2002-07-09T00:53:16Z", "bug_id": 7901, "creation_time": "2002-07-09T00:53:16Z", "text": "Created attachment 2287\nUpdate of the serialver task in order to use it later in a filter reader."}, {"count": 5, "tags": [], "creator": "stchauvin@yahoo.com", "text": "Created attachment 2693\nSecond proposition with FilterReader implementation", "id": 20940, "attachment_id": 2693, "bug_id": 7901, "creation_time": "2002-08-12T23:59:05Z", "time": "2002-08-12T23:59:05Z", "is_private": false}, {"count": 6, "tags": [], "creator": "stchauvin@yahoo.com", "attachment_id": null, "is_private": false, "id": 26402, "time": "2002-11-15T19:57:42Z", "bug_id": 7901, "creation_time": "2002-11-15T19:57:42Z", "text": "The Serialver task is now available as an External Task.\n\n  URL:           http://serialver.sourceforge.net/\n  Compatibility: ANT 1.5.1. and later\n  Contact:       developer mailing list: \nhttps://lists.sourceforge.net/lists/listinfo/serialver-development\n  Licence:       Apache Software License\n  Description:   SerialVer adds the Java serialver functionality to the ANT \ntool of Apache-Jakarta. This project adds Tasks and FilterReaders to get, to \ninsert and to modify the serialVersionUID in the source code of a serializable \nclass.\n\nThanks,\nStephane"}, {"count": 7, "tags": [], "bug_id": 7901, "attachment_id": null, "is_private": false, "id": 26456, "time": "2002-11-18T08:20:29Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-18T08:20:29Z", "text": "http://jakarta.apache.org/ant/external.html#SerialVer\n\nThanks"}]
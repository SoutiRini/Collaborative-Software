[{"count": 0, "tags": [], "bug_id": 35472, "attachment_id": null, "id": 76618, "time": "2005-06-22T19:54:47Z", "creator": "christian@iks-jena.de", "creation_time": "2005-06-22T19:54:47Z", "is_private": false, "text": "Hello there,\n\nwe're using an application that uses a custom implementation of\nHttpServletRequest to trigger the RequestDispatcher. With an\ninclude call everything works fine but forward doesn't work.\nBasically there are two problems:\n\na) Catalina uses the internal DISPATCHER_TYPE (see Globals.java)\n   attribute to remember the request state (REQUEST, FORWARD,\n   INCLUDE, ERROR). This attribute is hardcoded in Catalinas\n   request.getAttribute implementation and not listed during a\n   request.getAttributeNames call. A standard Servlet 2.4\n   application does not know the attribute and therefore can't\n   copy it to it's own HttpServletRequest. A workaround is\n   calling the container requests getAttribute as a fallback.\n   But that's somewhat ugly. As the request implementation just\n   returns a hardcoded REQUEST if the attribute is null this\n   would be sufficient for the forward call, too.\n   See my suggestions and code snippets from\n   org.apache.catalina.core.ApplicationDispatcher CVS version 1.44 below.\n   \nb) unwrapRequest is called once during doInclude inside the\n   invoke Method. Thats sufficient. doForward calls unwrapRequest\n   again at the end of the method. Because unwrapRequest only\n   breaks on instanceof Request and RequestFacade the code\n   runs through and a ClassCastException occurs at the end.\n\nDISPATCHER_TYPE attribute:\n   \n449 : remm 1.19     private void processRequest(ServletRequest request,  \n450 :                                     ServletResponse response) \n451 :             throws IOException, ServletException { \n452 : jfarcand 1.15                  \n453 : remm 1.19         Integer disInt = (Integer) request.getAttribute \n454 :                 (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR); \n455 :             if (disInt != null) { \n456 : jfarcand 1.15             if (disInt.intValue() != \nApplicationFilterFactory.ERROR) { \n457 : remm 1.19                 outerRequest.setAttribute \n458 :                         \n(ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR, \n459 :                          origServletPath); \n460 :                     outerRequest.setAttribute \n461 :                         (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR, \n462 :                          new Integer(ApplicationFilterFactory.FORWARD)); \n463 : jfarcand 1.15                 invoke(outerRequest, response); \n464 :                 } else { \n465 : remm 1.19                 invoke(outerRequest, response); \n466 : jfarcand 1.15             } \n467 : remm 1.19         } \n468 :      \n469 : jfarcand 1.15     } \n\nprocessRequest is called by doForward only.\ninvoke() is only called if the attribute is not null.\nThe easiest fix for that would be to set the attribute to FORWARD\nand call invoke when the attribute is null also. (same for the\nDISPATCHER_REQUEST_PATH_ATTR) The check above is for the ERROR\ncase, if the attribute does not exist it can't be an error - its\na REQUEST by hardcoded default in org.apache.catalina.connector.Request.\n\n\nunwrapRequest:\n\n787 :         private void unwrapRequest() { \n788 :      \n789 :             if (wrapRequest == null) \n790 :                 return; \n791 :      \n792 :             ServletRequest previous = null; \n793 :             ServletRequest current = outerRequest; \n794 :             while (current != null) { \n795 :      \n796 :                 // If we run into the container request we are done \n797 :                 if ((current instanceof Request) \n798 :                     || (current instanceof RequestFacade)) \n799 :                     break; \n800 :      \n801 :                 // Remove the current request if it is our wrapper \n802 :                 if (current == wrapRequest) { \n803 :                     ServletRequest next = \n804 :                       ((ServletRequestWrapper) current).getRequest(); \n805 :                     if (previous == null) \n806 :                         outerRequest = next; \n807 :                     else \n808 :                         ((ServletRequestWrapper) previous).setRequest\n(next); \n809 :                     break; \n810 :                 } \n811 :      \n812 :                 // Advance to the next request in the chain \n813 :                 previous = current; \n814 :                 current = ((ServletRequestWrapper) current).getRequest\n(); \n815 :      \n816 :             } \n817 :      \n818 :         } \n\nSee line 797 - 799. If 'current' is an instance of HttpServletRequest\nthe request is fully unwrapped. Remember according to Servlet 2.4\nSRV 6.2.2 the request attribute can be any descendant of HttpServletRequest.\nAs you can see the code runs through in this case up to line 814 where\nthe variable is casted to ServletRequestWrapper which causes the\nClassCastException. The fix is easy by adding HttpServletRequest to\nthe statement at line 797.\nThe only workaround is catching the ClassCastException around a\nforward call and ignore it. But thats pretty ugly again ;-)\n\nI hope I supplied enough information to fix it.\nIf there any questions I'll try to clarify.\n\nThanks.\n\nBest regards,\nChristian"}, {"count": 1, "attachment_id": null, "bug_id": 35472, "is_private": false, "id": 76620, "time": "2005-06-22T20:08:59Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-06-22T20:08:59Z", "tags": [], "text": "(In reply to comment #0)\n> See line 797 - 799. If 'current' is an instance of HttpServletRequest\n> the request is fully unwrapped. Remember according to Servlet 2.4\n> SRV 6.2.2 the request attribute can be any descendant of HttpServletRequest.\n\nHowever, SRV 8.2 states that it can only be the original HttpServletRequest, \nor a descendant of HttpServletRequestWrapper (and in the later case, must wrap \nthe original request).  As such, your use case is in violation of the spec.  \n\n"}]
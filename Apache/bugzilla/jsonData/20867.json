[{"count": 0, "tags": [], "bug_id": 20867, "attachment_id": null, "is_private": false, "id": 39022, "time": "2003-06-18T12:06:44Z", "creator": "t.kitynski@11interactive.com", "creation_time": "2003-06-18T12:06:44Z", "text": "Currently I can load properties via eg. <property/> or <loadproperties/> and \nthis is good. Now, I have several projects that depend on each other in much \nsophisticated way that could <ant/> task to resolve. I put as many properties \nto external files as possible and I load them into via appriopriate task into \nant scripts where necessary, but still I have to play with some properties in \neach build script. Let's say I want to include current velocity jar into each \nproject---if there's newer version of it, I have to change every build file to \npoint to correct file. Well, you can say I could have one properties file with \nall the paths and load it, but since I have different machines, I would like \nto spare myself the nescessity of setting absolute paths. Instead I rather set \n$VELOCITY_HOME and change it when new velocity appears, but using env \nvariables is not possible in properties files, and again: loading just the \ncurrent jar name and joining it within an ant script currently forces me to do \nit in every build.xml file.\n\nSo it would be great to have something, that have the possibility of setting \nprops like now, use $ references to names, and that would allow include those \nproperties in running script---this is exactly inversely to what <ant/> task \ndoes (in the meaning of passing properties).\n\nI've looked at the faq and documentation, but I haven't found anything like \nthat---if this actually IS implemented, then please let me know.\n\nTIA"}, {"count": 1, "text": "Have a look at how I deal with libraries in the JavaDevWithAnt project: http://\nwww.ehatchersolutions.com/JavaDevWithAnt/ant.html#lib \n\nWith a bit of indirection you can achieve the separation you are aiming for.", "bug_id": 20867, "attachment_id": null, "id": 39023, "time": "2003-06-18T12:52:48Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2003-06-18T12:52:48Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 20867, "attachment_id": null, "is_private": false, "id": 39025, "time": "2003-06-18T13:14:29Z", "creator": "t.kitynski@11interactive.com", "creation_time": "2003-06-18T13:14:29Z", "text": "Hmm, looks interresting---first of all it turned out, that actually using $ \nreferences in properties IS allowed 8) Great! 8) I guess this solves much of \nmuch concerns, and with help of your description it seems that I'll be able to \ndo what I intented to---thanks a lot!"}, {"count": 3, "tags": [], "creator": "jakarta@ehatchersolutions.com", "attachment_id": null, "id": 39032, "time": "2003-06-18T14:27:33Z", "bug_id": 20867, "creation_time": "2003-06-18T14:27:33Z", "is_private": false, "text": "Just marking as WONTFIX so its not an issue on the to-do list."}, {"count": 4, "tags": [], "bug_id": 20867, "is_private": false, "text": "Uhm, I let myself to reopen this rfi, since after my enthusiasm on your \nsolution I shortly find out, that it still doesn't resolve all my problems.\n\nBut let's get to the point. It is great thing, that the loaded properties are \nparsed against ${var} references. It really is very helpfull, but still I can \nnot get rid of redundant code. Similary to what you'd suggested in the link \nyou have provided last time, I've defined lib.properties, prj.properties \n(common properties for most projects) and commons.xml (common tasks for most \nprojects). All those files are placed in .ant directory available to all build \nscripts. Besides I have build.xml and build.properties in each project's ant \nfolder. File build.properties holds release, version, revision numbers, \ncompiler options, some per-projects settings, etc.\n\nFile commons.xml contains (amongs others) three targets: release, version and \nrevision, which are called in init target of the commons.xml, which of course \nis called from each build.xml/init target. These targets utilize \n<propertyfile/> task to eventually set new version numbers, depending on build \nmode passed via -D property. This works fine.\n\nThe point is, that now I have to 1) put version numbers (or shall I say: \nversion string) into lib.properties and 2) replace it every time I change \nversion number of some of my projects. Besides it's redundant. Well, I could \nwork this around, and place in lib.properties file just the path to the \nproject dir (some libs are \"external\"---provided by other people/companies, \nand some are \"internal\"---provided by me and their sources are somewhere in my \nfs) and read the build.properties for needed subproject (lib) in each \nbuild.xml and set necessary strings, but I have to do it in each build file---\nthe code is exactly the same and from the point of view of a programmer it's \nterrible solution.\n\nWhat shall be done, then? Well, it would be great to add more processing power \nto properties files or (that's what I would vote for) have the possibility to \ninclude properties (and eventually all refs) to build files. With this I could \nchange lib.properties into lib.xml and set there complete <path/> or \n<fileset/>---in most cases it's common for most of the projects, I could set \nthere some filterset, properties a.s.o.\n\nI have prj.properties skelton like this (just two properties to make it more \nclear):\n\n...\nprj.tag = ${prj.name}-${release}.${version}.${revision}\nprj.jar = ${prj.tag}.jar\n...\n\nThis file is placed in shared folder (let's call it .ant). Version numbers of \neach project are placed in build.properties, eg:\n\n...\nrelease = 1\nversion = 3\nrevision = 43\n...\n\nTo set default properties in each build file I have to:\n\n<property file=\"build.properties\"/>\n<property file=\"${.ant}/prj.properties\"/>\n\nand that's okay. Worse if I need to use subproject and to know this subproject \nversion numbers. I can ofcourse do\n\n<property file=\"${subprj.path}/ant/build.properties\" prefix=\"${subprj.name}\"/>\n\nbut I can not make use of ${subprj.name}.prj.tag and -.jar like I did in the \nmain build file.\n\nI think of some kind of task like this:\n\n<include prefix=\"${subprj.name}\">\n\t<filelist dir=\"${subprj.path}/ant\" files=\"build.properties\"/>\n\t<filelist dir=\"${.ant}\" files=\"prj.properties\"/>\n</include>\n\nI think that <include/> element (or whatever would it be called) could make \nuse of inheritAll and -Refs attrs too. By default all inherit attrs should be \nset to false IMO. Further, we could include not only props and refs, but also \ntargets---in this case the immutability rule should apply too. (It should be \ndiscussed if targets are to be prefixed also---maybe we could add a switch \nprefixTargets=\"true|false\" for that reason). The prefix atribute is optional \nand the sequence of <filelist/> elements and files named in files attribute \nmust be preserved. Maybe, for shortening, an attribute files (and optionally \ndir?) could appear in DTD for <include/> element too.\n\nThe ability to include props, refs and targets into build scripts would \ngreately reduce the amount of code in each script and thus the nescessity of \nupdating of tones of files when something changes.\n\nWell, I am not sure if I am completly understandable with my explenation---\nEnglish is not my native language, besides I am writting it as I am thinking \nof it, so I do not have precise vision of including build scripts. But I hope \nin general it's obvious what I think of---thank you for your time.\n", "id": 39203, "time": "2003-06-20T19:57:05Z", "creator": "t.kitynski@11interactive.com", "creation_time": "2003-06-20T19:57:05Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "mirko@raner.ws", "is_private": false, "text": "Hello, Batik Developers!\n\nI work as a Systems Engineer for Parasoft, and we regularly test our Automated Error Prevention products on open source projects. We just finished running our flagship product, Jtest, on some projects and I chose to have a look at Apache Batik. This exercise already helped us to find some false positives in our analysis, but I thought I'd share the results with the developer community as well. That way everybody benefits. My initial run using Parasoft's Recommended Rules produced over 6000 warnings, but since nobody would look at such a large amount of warnings I boiled it down to a configuration that included only the 10 most essential analysis rules and produced 66 warnings.\n\nI have attached the report that was produced by Jtest. While it is possible that all the detected bugs are effectively inconsequential the report points to a number of problems where code clearly does not do what it is supposed to do. So, I definitely suggest that somebody familiar with the code base have a look at it.\n\nThe report is based on the sources for Batik 1.7, so some of the line numbers might have shifted in the meantime. Please let us know if this analysis proved valuable for you or if you found any false positives or have other related feedback!", "id": 121932, "time": "2008-10-27T18:24:49Z", "bug_id": 46103, "creation_time": "2008-10-27T18:24:49Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mirko@raner.ws", "attachment_id": 22781, "text": "Created attachment 22781\nJtest Static Analysis for Apache Batik", "id": 121933, "time": "2008-10-27T18:27:05Z", "bug_id": 46103, "creation_time": "2008-10-27T18:27:05Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46103, "attachment_id": null, "id": 121938, "time": "2008-10-28T02:19:32Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2008-10-28T02:19:32Z", "is_private": false, "text": "This seems interesting input. :-)\n\nCould a similar report be created against the trunk code [1]?\n\nThank you for sharing,\n\n Helder Magalh\u00e3es\n\n[1] http://xmlgraphics.apache.org/batik/download.cgi#Subversion+repository"}, {"count": 3, "tags": [], "creator": "info@dvholten.de", "attachment_id": null, "text": "Thanks for the effort and thanks for sharing the results.\n\nYou might wonder, why the use of such a sophisticated tool like JTest doesnt produce more 'sophisticated' bug-warnings: in the last two years the Batik code-base has been analysed from time to time with Findbugs and the detectors in the IntelliJ IDE. So most of the interesting (and mechanically findable) bugs have been found and removed already...\nThe names of the authors show, that these are parts of Batik, which havent been touched since quite a while - 'stable code'.\n\nMost of the 'sync on non-final' - warnings are known to me - no urgent action needed. I'd prefer to make those fields final or private, but that changes the API of the class. \nI will have a look on those conditional expressions with fixed outcome.\n \nIf you want to test the capabilities of your tool, you might try an older version of Batik - there have been some interesting bugs. \n\nOTOH, when you have a new, state-of-the-art detector waiting to see some non-trivial real world code, then Batik is the right food for it.\n\ngreetings\ndieter von holten\n\n\n\n", "id": 121944, "time": "2008-10-28T04:51:20Z", "bug_id": 46103, "creation_time": "2008-10-28T04:51:20Z", "is_private": false}, {"count": 4, "tags": [], "creator": "mirko@raner.ws", "attachment_id": 22785, "id": 121977, "time": "2008-10-28T14:27:10Z", "bug_id": 46103, "creation_time": "2008-10-28T14:27:10Z", "is_private": false, "text": "Created attachment 22785\nJtest Static Analysis for Apache Batik (trunk)\n\nAs requested by Helder, I re-ran a slightly modified configuration on the SVN trunk over lunch and attached the report. I took out the TRS.SOUF rule about possible synchronization problems, as Dieter mentioned that he was well aware of the issue. In turn, I enabled a rule for detecting the broken Double Checked Locking pattern, which promptly found a violation. Also, I added detection of unused package-private fields and methods. Unless there is some fancy Reflection API access going on somewhere those fields and methods can probably be removed.\n\nThe attached results were all produced by simple static analysis, i.e. pattern matching assisted by some additional collected information about type hierarchies, mutability, etc. Jtest can also perform a full flow analysis, which is essentially a partial simulation of executed code and finds bugs that are caused by scenarios that may involve multiple classes. In the reports I attached, this type of analysis was not enabled, mainly for two reasons: (1) it can obviously take a very long time to run, which would exceed the scope of our internal testing of open source projects, and (2) the bugs indeed turn out to be more \"sophisticated\", involving multiple correlated stack traces which are typically very hard to explore without the corresponding UI in Jtest. Anyway, if I get a chance and can find a machine with some spare CPU cycles I can try running flow analysis and send you the report. But don't hold your breath for that right now."}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> As requested by Helder, I re-ran a slightly modified configuration on the SVN\n> trunk over lunch and attached the report.\n\nThank you. I've only quickly review, given that I don't have enough Batik expertize for further analyzing the potential issues, but it definitely deserves a deeper analysis and/or follow up actions. ;-)\n\n\n> Anyway, if I get a chance and can find a machine with some spare CPU cycles\n> I can try  running flow analysis and send you the report.\n\nYes, it would also be great whenever possible. :-)", "is_private": false, "bug_id": 46103, "id": 122692, "time": "2008-11-21T04:10:59Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2008-11-21T04:10:59Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 36004, "attachment_id": null, "id": 78032, "time": "2005-08-03T22:12:08Z", "creator": "spepping@apache.org", "creation_time": "2005-08-03T22:12:08Z", "is_private": false, "text": "This patch contains the current state of my work on block content in inline content."}, {"count": 1, "tags": [], "bug_id": 36004, "attachment_id": 15868, "id": 78033, "time": "2005-08-03T22:14:03Z", "creator": "spepping@apache.org", "creation_time": "2005-08-03T22:14:03Z", "is_private": false, "text": "Created attachment 15868\nMy work on block content in inline content"}, {"attachment_id": null, "tags": [], "bug_id": 36004, "text": "Implementation notes\n====================\n\nKnuthSequence now has a variable and a method declaring whether it\ncontains a sequence of inline or block Knuth elements.\n\ngetNextKnuthElements() of InlineLevelLMs construct and return a list\nof KnuthSequences. During the construction, if the last sequence is an\ninline sequence, it is kept open for addition of further returned\ninline Knuth elements (lastSequence != null). While it is open, newly\nreceived inline sequences are added to it. It is closed when a\nreceived inline sequence is ended by a negative infinite penalty,\nwhich signals a forced line break, or when a forced line break is read\n(TextLM).\n\nThose InlineLevelLMs that can have BlockLevelLM children, turn the\nlist of Knuth elements that they receive from their BlockLevelLM\nchildren into a block sequence, after having wrapped their\npositions. Before they add this sequence to their return list, they\nclose the open inline sequence. They create a separate sequence for\neach block level child LM.\n\nLineLM, collectInlineKnuthElements: inline Knuth sequences are turned\ninto paragraphs. The positions of the elements of block sequences are\nwrapped. knuthParagraphs is a list of Paragraphs and block\nKnuthSequences.\n\nRepresent each block sequence (one line area) by a LineBreakPosition,\nwith iParIndex as the index of the block sequence in\nknuthParagraphs. The LBP must be placed as\nlineLayoutsList[0].possibilitiesList[0].breakPositions[0], in\nagreement with the placement of LBPs of inline sequences. The type of\nthe block sequence leads to different processing in addAreas: an\niterator over the block sequence, the child area being placed in a\nsingle line area (and the block areas must be children of a single\ninline area, which is a descendant of the child area of the line\narea).\n\nState diagram of InlineLM:\nPossible states:\n I: lastSequence != 0 && lastSequence.isInlineSequence()\n B: lastSequence != 0 && !lastSequence.isInlineSequence()\n 0: lastSequence == 0\nStart state = 0\nInlineLevelLMs return a list of Knuth sequences, mixed inline and\n block; each returned sequence is a separate event\nBlockLevelLMs return a list of Knuth elements\nPossible events:\n ILM(i): InlineLevelLM returns inline sequence\n ILM(ic): InlineLevelLM returns closed inline sequence\n ILM(b): InlineLevelLM returns block sequence\n BLM(s): BlockLevelLM, curLM == lastLM\n BLM(o): BlockLevelLM, curLM != lastLM\n BLM:\t BlockLevelLM = BLM(s) or BLM(o)\nSymbols:\n [ I: open new lastInlineSequence and add to return list,\n\t  add returned inline sequence\n [ L: open new lastBlockSequence and add to return list,\n\t  add returned list\n + I: add inline sequence to existing lastInlineSequence\n + L: add list to existing lastBlockSequence\n ]: close sequence\n B: add block sequence to return list\nTransitions:\n0 - ILM(i): [ I,      state becomes I\n  - ILM(ic): [ I ],   state remains 0\n  - ILM(b): B,\t\t  state remains 0\n  - BLM:\t[ L,\t  state becomes B\nI - ILM(i): + I,\t  state remains I\n  - ILM(ic): + I ],   state becomes 0\n  - ILM(b): ] B,\t  state becomes 0\n  - BLM:\t] [ L,\t  state becomes B\nB - ILM(i): ] [ I,\t  state becomes I\n  - ILM(ic): ] [ I ], state becomes 0\n  - ILM(b): ] B,\t  state becomes 0\n  - BLM(s):\t+ L,\t  state remains B\n  - BLM(o): ] [ L,\t  state remains B\n\nThe routine may end in states 0 or I. Technically it can also end in\nstate B, but the parent LM will never consider a returned block\nsequence as open; therefore ending in state B is effectively ending in\nstate 0.\n\nAn inline sequence must be closed by an explicit negative infinite\npenalty, so that the parent LM can see that it is closed. A block\nsequence is implicitly closed. Only its creator can add elements to\nit.\n\nState diagram of InlineLevelLMs with InlineLevelM children:\nPossible states:\n I: lastSequence != 0\n 0: lastSequence == 0\nStart state = 0\nInlineLevelLMs return a list of Knuth sequences, mixed inline and\n block; each returned sequence is a separate event\nPossible events:\n ILM(i): InlineLevelLM returns inline sequence\n ILM(ic): InlineLevelLM returns closed inline sequence\n ILM(b): InlineLevelLM returns block sequence\nSymbols:\n [ I: open new lastInlineSequence and add to return list,\n\t  add returned inline sequence\n + I: add inline sequence to existing lastInlineSequence\n ]: close sequence\n B: add block sequence to return list\nTransitions:\n0 - ILM(i): [ I,      state becomes I\n  - ILM(ic): [ I ],   state remains 0\n  - ILM(b): B,\t\t  state remains 0\nI - ILM(i): + I,\t  state remains I\n  - ILM(ic): + I ],   state becomes 0\n  - ILM(b): ] B,\t  state becomes 0\n\nFor block sequences we do this whole process (adding a\nLineBreakPosition to a layout possibility) in\nLineLM.createBlockLineBreak. We add one layout possibility, with 1\nline and 0 demerits. Then we create one linebreak position for the\nsequence. The parameters for the linebreak position are as follows:\n\nLineBreakPosition lbp = new LineBreakPosition\n (this,\n  knuthParagraphs.indexOf(seq),\n  seq.size() - 1,\n  lineShrink,\n  lineStretch,\n  0, // difference \n  0, // ipd adjustment\n  0, // adjust (= bpd adjustment?)\n  0, // start indent\n  lineHeight,\n  0, // line width\n  0, // baseline\n  0, // topshift\n  0); // bottomshift\n\nAs a bonus for using the same complicated data structure also for\nblock sequences, in postProcessLineBreaks, inline and blocksequences\nare treated alike. The only difference is in fetching the footnote\nlist, which needs to be copied from the contained KnuthBlockBoxes.\n\nAdding areas: InlineLM is supposed to return an InlineArea, but\nInlineAreas cannot contain a block area. Created a new type,\nInlineBlockParent.\n\nAbstractRenderer.RenderInlineArea must recognize InlineBlockParent.\n\nEach renderer must have a method RenderInlineBlockParent. Implemented\nfor AbstractRenderer, XMLRenderer.", "count": 2, "id": 78034, "time": "2005-08-03T22:33:47Z", "creator": "spepping@apache.org", "creation_time": "2005-08-03T22:33:47Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 36004, "text": "Moved to the branch 'inlineblock' for further development", "count": 3, "id": 78128, "time": "2005-08-04T22:31:52Z", "creator": "spepping@apache.org", "creation_time": "2005-08-04T22:31:52Z", "is_private": false}, {"count": 4, "tags": [], "text": "Simon, thanks for your work on inlines and for setting up the branch. As you \nwill have seen, I've hacked around a little bit in the branch and I think \nwe're ready to merge the branch back into trunk. All necessary tests pass. \nWould you please review? My KnuthElement/KnuthSequence mixture might be \nsubject to discussion but it allowed not adjusting some of the LMs and creates \nfewer objects that way. WDYT?", "attachment_id": null, "id": 78231, "creator": "jeremias@apache.org", "time": "2005-08-08T16:36:33Z", "bug_id": 36004, "creation_time": "2005-08-08T16:36:33Z", "is_private": false}, {"count": 5, "tags": [], "text": "This feature has been implemented without directly using this patch report.", "is_private": false, "id": 94656, "creator": "spepping@apache.org", "time": "2006-10-09T07:47:58Z", "bug_id": 36004, "creation_time": "2006-10-09T07:47:58Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 156313, "time": "2012-04-01T07:09:24Z", "bug_id": 36004, "creation_time": "2012-04-01T07:09:24Z", "attachment_id": null}]
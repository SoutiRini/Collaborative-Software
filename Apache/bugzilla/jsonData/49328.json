[{"attachment_id": 25472, "tags": [], "creator": "alex@docauer.net", "text": "Created attachment 25472\nPrevent filter_init in mod_filter from destroying it's own harness context\n\nCurrently, mod_filter can't be used as a harness for mod_deflate when a \nsubrequest may be initiated, specifically from mod_include.  Attempting to \ndo so causes data in the response to be lost and/or sent uncompressed even\nthough the Content-Encoding header specifies a \"gzip\" encoding.\n\nI originally thought this was related to bug 17629, and comments on that \nbug which describe similar symptoms indicate that many others do, too.  \nHowever, the solution I proposed for this issue failed to address the \noriginal problem described in that bug, so I no longer think they are related.\nI don't believe this is related to bug 43939 either, as mod_filter wasn't being \nused in that case.  A repeatable example of this issue follows.\n\n\nThe httpd configuration loads mod_filter and mod_include and contains these \ndirectives:\n\nAddType text/html .shtml\nAddOutputFilter INCLUDES .shtml\n\nFilterDeclare smart_compress CONTENT_SET\nFilterProvider smart_compress DEFLATE resp=Content-Type $text/\nFilterChain smart_compress\n\n\nContents of example.shtml:\n\n<HTML>\n<BODY>\nIncluded text below line\n<HR />\n<!--#include virtual=\"/includeme.shtml\"-->\n</BODY>\n</HTML>\n\n\nContents of includeme.shtml:\n\nThis text was included\n\n\nCommand:\n\n( echo 'GET /example.shtml HTTP/1.1' ; \\\n         echo 'Host: localhost' ; \\\n         echo 'Accept-Encoding: gzip' ; \\\n         echo '' ) | nc localhost 3080\n\n\nOutput:\n\nHTTP/1.1 200 OK\nDate: Sun, 23 May 2010 03:01:39 GMT\nServer: Apache/2.2.14 (Unix)\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nTransfer-Encoding: chunked\nContent-Type: text/html\n\n17\nThis text was included\n\n11\n\n</BODY>\n</HTML>\n\n0\n\n\n\nOutput should be (as viewed in less):\n\nHTTP/1.1 200 OK\nDate: Sun, 23 May 2010 03:05:12 GMT\nServer: Apache/2.2.14 (Unix)\nLast-Modified: Sun, 23 May 2010 02:51:50 GMT\nETag: \"2cb08c0-68-4873a01821d80\"\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nContent-Length: 105\nContent-Type: text/html\n\n^_<8B>^H^@^@^@^@^@^@^C<B3><F1>^H<F1><F5><B1><E3><B2>q<F2>w<89><B4><E3><F2><CC>K<CE>)MIMQ(I<AD>(QH<CA><C9>/W<C8><C9><CC>K<E5><B2>\n<F1>^HR<D0>^G<AA>R<D4><D5>U\u0384<A8>Q(<CB>,*)M\u0331U<U+0487><8A><E4><A6><EA>^Ug<94><E4><E6>(<E9><EA>^B<95><EA>CL<B4>\u0447X^@^@<B5>r<8E>Gh^@^@^@\n\n\n\nmod_filter appears to be the only module that uses the filter_init_func field\nof the ap_filter_rec_t structure.  This member is a pointer to function that is\nto be run right after the insert_filter hooks are run and right before the\ncontent handler is invoked.  As most modules do their initialization at the\ntime they are called to process data, this feature is largely unused.  However,\nmod_filter chooses to do its initialization here  so that it can correctly call\nthe filter_init_func of each provider if it exists.  \n\nmod_filter sets filter_init_func to be a pointer to its filter_init function. \nIn filter_init, it first creates the context for the harness, before calling\nfilter_init_func of each provider.  The initial context for each provider and\nthe ongoing context of the subsequently invoked provider are all stored in the\nharness context.\n\nThe problem arises in that mod_filter intuitively assumes that filter_init will\nonly ever be called once during the lifetime of the filter harness.  However,\nwhen mod_include creates a subrequest, all of the filters from the main request\nget copied into the subrequest.  Before the content handler is invoked in the\nsubrequest, the filter_init_func of every filter in the subrequest gets called.\n This means that the filter_init_func of the filter harness gets called again,\none addition time for each subrequest.\n\nThe first thing that mod_filter does in filter_init is to assign the context\npointer to freshly allocated memory.  When called more than once, this\nessentially destroys the existing harness context and any provider contexts\nthat it contains.  In the case of mod_deflate, it loses any data waiting in the\ncompression buffer.  Furthermore, when mod_deflate is invoked again without a\ncontext, it assumes it is being called for the first time in that request. \nWhen it sees that Content-Encoding is already set to gzip, it removes itself\nfrom the filter chain, leaving the remaining output uncompressed.\n\nI don't know if it's considered correct or ideal operation that\nfilter_init_func can be called more than once, but as it stands, mod_filter\ncan't assume that it doesn't.  I am attaching a small patch that will make\nfilter_init first check for an existing harness context, simply returning if it\nfinds one already exists. I tested this patch with 2.2.14.", "count": 0, "id": 137042, "time": "2010-05-23T00:37:20Z", "bug_id": 49328, "creation_time": "2010-05-23T00:37:20Z", "is_private": false}, {"count": 1, "tags": [], "text": "I'm sorry. The correct output should look more like:\n\nHTTP/1.1 200 OK\nDate: Sun, 23 May 2010 11:29:29 GMT\nServer: Apache/2.2.14 (Unix)\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nContent-Length: 89\nContent-Type: text/html\n\n^_<8B>^H^@^@^@^@^@^@^C<B3><F1>^H<F1><F5><B1><E3><B2>q<F2>w<89><B4><E3><F2><CC>K<CE>)MIMQ(I<AD>(QHJ<CD><C9>/W<C8><C9><CC>K<E5><B2>\n<F1>^HR\u0437<E3>\n<C9><C8>,<86>\u0215'^V+dBUsq<D9><E8>C<F4><DB><E8>C<8C>^C^@<A9>W^L<D9>V^@^@^@", "attachment_id": null, "bug_id": 49328, "id": 137050, "time": "2010-05-23T07:31:34Z", "creator": "alex@docauer.net", "creation_time": "2010-05-23T07:31:34Z", "is_private": false}, {"count": 2, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "is_private": false, "id": 137051, "time": "2010-05-23T10:17:30Z", "bug_id": 49328, "creation_time": "2010-05-23T10:17:30Z", "text": "I don't think that your patch is correct. What about filters that expect their init function to be called a second time? The following patch should fix that. Could you please give it a try?\n\nIndex: modules/filters/mod_filter.c\n===================================================================\n--- modules/filters/mod_filter.c        (Revision 947412)\n+++ modules/filters/mod_filter.c        (Arbeitskopie)\n@@ -100,10 +100,16 @@\n {\n     ap_filter_provider_t *p;\n     provider_ctx *pctx;\n+    provider_ctx *pctx_head;\n     int err;\n     ap_filter_rec_t *filter = f->frec;\n+    harness_ctx *fctx = f->ctx;\n\n-    harness_ctx *fctx = apr_pcalloc(f->r->pool, sizeof(harness_ctx));\n+    /* Only allocate if not done previously */\n+    if (!fctx) {\n+       fctx = apr_pcalloc(f->r->pool, sizeof(harness_ctx));\n+    }\n+    pctx_head = fctx->init_ctx;\n     for (p = filter->providers; p; p = p->next) {\n         if (p->frec->filter_init_func == filter_init) {\n             ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, f->c,\n@@ -112,6 +118,15 @@\n         }\n         else if (p->frec->filter_init_func) {\n             f->ctx = NULL;\n+            /*\n+             * Check if we already had a context for this filter and if\n+             * yes restore it.\n+             */\n+            for (pctx = pctx_head; pctx; pctx = pctx->next) {\n+                if (pctx->provider == p) {\n+                    f->ctx = pctx->ctx ;\n+                }\n+            }\n             if ((err = p->frec->filter_init_func(f)) != OK) {\n                 ap_log_cerror(APLOG_MARK, APLOG_ERR, 0, f->c,\n                               \"filter_init for %s failed\", p->frec->name);"}, {"count": 3, "text": "(In reply to comment #2)\n> I don't think that your patch is correct. What about filters that expect their\n> init function to be called a second time? The following patch should fix that.\n> Could you please give it a try?\n\nI guess the question is whether filter_init_func _should_ be called more than \nonce. It's description in util_filter.h is:\n\n/** The function to call before the handlers are invoked. Notice\n * that this function is called only for filters participating in\n * the http protocol. Filters for other protocols are to be\n * initialized by the protocols themselves.\n */\n\nI read \"before the handlers are invoked\" to mean that I should never expect \nthe filter_init_func to be called after the handler has been invoked.  I think the \nbest fix to this problem would be to make it so that Apache never calls \nfilter_init_func more than once.  However, that might require a change to the\nrequest_rec, and thus can only be incorporated into 2.3 or later.\n\nSo, I would argue:\n\n1) If it's decided that the behavior of calling filter_init_func a second time in a \nsubrequest needs to be preserved for compatibility with existing 2.2 modules, \nthen I would only apply your patch to the 2.2 branch while in trunk eliminating\nmultiple calls to filter_init_func instead.\n\n2) Any filter that relies on it's context being preserved in a subrequest is already \nbroken when used with mod_filter.  After fixing mod_filter's context handling, \nfailing to call filter_init_func a second time shouldn't introduce new negative\nbehavior.\n\n3) I can't think of a case where one might actually expect filter_init_func to \nbe called twice.  Modules in the wild today that use filter_init_func most likely \nbreak in subrequests.", "bug_id": 49328, "is_private": false, "id": 137053, "time": "2010-05-23T12:22:00Z", "creator": "alex@docauer.net", "creation_time": "2010-05-23T12:22:00Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 49328, "attachment_id": null, "id": 137061, "time": "2010-05-24T06:47:08Z", "creator": "jorton@redhat.com", "creation_time": "2010-05-24T06:47:08Z", "is_private": false, "text": "I've added a test case for this, http://svn.apache.org/viewvc?rev=947593&view=rev\n\n(will look at the patches shortly)"}, {"count": 5, "tags": [], "bug_id": 49328, "attachment_id": 25550, "id": 137448, "time": "2010-06-08T12:20:11Z", "creator": "jorton@redhat.com", "creation_time": "2010-06-08T12:20:11Z", "is_private": false, "text": "Created attachment 25550\npatch which fixes ap_invoke_filter_init\n\n(Foreword: great analysis of both this and bug 17629, Alex - thanks)\n\n1) I don't think it makes any sense for a filter to expect a second \"filter_init_func\" invocation here merely because a subrequest has been created and changed some independent part of the filter chain.\n\n2) Although there is a vague caveat regarding this in the header, the code will AFAICT re-run the \"init\" functions for any protocol/connection-level filters for each request and each sub-request therein, which would be kind of insane if it were the intended API.\n\nSo I would argue we should simply \"clarify\" the API description here and fix the bug, rather than attempt to work around it.  Fixing the bug is fairly simple, patch is attached and fixes the test case without causing any other regressions in the test suite, for what that's worth.\n\nI was hoping for an all-in-one solution for both this and bug 17629, by more cleanly separating the subreq's filter chain from the main request_rec, as mentioned in dev@ thread today, but couldn't get that working without regressions."}, {"count": 6, "tags": [], "text": "Created attachment 25554\nupdated patch to fix ap_invoke_filter_init\n\nFinished off version of patch to fix the filter_init process.\n\nI'd hope this is uncontroversial for trunk, and will commit soonish unless I hear otherwise.\n\nI'll propose for 2.2.x but we could go with either Alex's or Ruediger's patch there instead if there is concern; I guess if there's concern it must be to retain the multi-init \"feature\" so Ruediger's patch is the way.", "is_private": false, "bug_id": 49328, "id": 137468, "time": "2010-06-09T04:40:10Z", "creator": "jorton@redhat.com", "creation_time": "2010-06-09T04:40:10Z", "attachment_id": 25554}, {"count": 7, "tags": [], "bug_id": 49328, "is_private": false, "text": "(In reply to comment #6)\n> Created an attachment (id=25554) [details]\n> updated patch to fix ap_invoke_filter_init\n> \n> Finished off version of patch to fix the filter_init process.\n> \n> I'd hope this is uncontroversial for trunk, and will commit soonish unless I\n> hear otherwise.\n\n+1\n\n> \n> I'll propose for 2.2.x but we could go with either Alex's or Ruediger's patch\n> there instead if there is concern; I guess if there's concern it must be to\n> retain the multi-init \"feature\" so Ruediger's patch is the way.\n\nI think this is even fine for backporting to 2.2.x as I am now convinced that calling it on a subrequest does not make sense.", "id": 137499, "time": "2010-06-09T11:00:04Z", "creator": "rpluem@apache.org", "creation_time": "2010-06-09T11:00:04Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Thanks for reviewing, Ruediger.\n\ntrunk: http://svn.apache.org/viewvc?view=revision&revision=953311", "is_private": false, "bug_id": 49328, "id": 137541, "time": "2010-06-10T08:56:48Z", "creator": "jorton@redhat.com", "creation_time": "2010-06-10T08:56:48Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "I just wanted to say that we've validated that this patch resolves our issue and are moving to production with 2.2.16.  As far as I'm concerned, this bug can be closed.", "attachment_id": null, "bug_id": 49328, "id": 140334, "time": "2010-09-30T15:06:23Z", "creator": "alex@docauer.net", "creation_time": "2010-09-30T15:06:23Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "text": "Alex, given that it's your bug and you're happy with the conclusion, it would've made sense for you to close it.  Don't be shy if there's a next time!", "count": 10, "id": 140421, "time": "2010-10-03T22:13:15Z", "bug_id": 49328, "creation_time": "2010-10-03T22:13:15Z", "is_private": false}, {"count": 11, "tags": [], "text": "Sorry, I disagree. I have verified that the patch is part of 2.2.16, but the\nbug is not fixed nevertheless:\n\nSituation:\n\nerror.shtml contains: <h1>TEST</h1><!--#include virtual=\"error.php\" -->\n\nerror.php contains: HELLO\n\nRelevant lines from httpd.conf:\n\nScriptAlias /sys-bin/ \"/www/sys-bin/\"\nAction php5-script /sys-bin/php5/php\nAddHandler php5-script php\nAddType text/html .shtml\nAddOutputFilter includes;deflate .shtml\n\n(When removing \";deflate\" from the AddOutputFilter line, the problem is circumvented and the output delivered uncompressed to the browser.)\n\nRequest:\n\nGET /WWWTest/error.shtml HTTP/1.1\nHost: www\nUser-Agent: Dummy/1.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 115\nConnection: keep-alive\n\nResponse (via Cut&Paste, thus not exactly):\n\nHTTP/1.1 200 OK\nDate: Wed, 13 Oct 2010 13:40:51 GMT\nServer: Apache\nLast-Modified: Wed, 13 Oct 2010 13:20:21 GMT\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nContent-Type: text/html\nKeep-Alive: timeout=1, max=500\nConnection: Keep-Alive\nTransfer-Encoding: chunked\n\n6\nHELLO\n\n20\n\ufffd\ufffd\ufffd\n\ufffd\ufffd2\ufffd\ufffd3\ufffd\n0\n\nObviously the output of the PHP handler does not get compressed and thus the output is broken.", "is_private": false, "bug_id": 49328, "id": 140718, "time": "2010-10-13T09:48:27Z", "creator": "perske@uni-muenster.de", "creation_time": "2010-10-13T09:48:27Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "perske@uni-muenster.de", "attachment_id": null, "is_private": false, "id": 140991, "time": "2010-10-25T06:33:37Z", "bug_id": 49328, "creation_time": "2010-10-25T06:33:37Z", "text": "With 2.2.17 my test case does not produce the bug any longer. Can it be that the fix for Bug 43939 by accident fixed my test case, too?"}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "text": "(In reply to comment #12)\n> With 2.2.17 my test case does not produce the bug any longer. Can it be that\n> the fix for Bug 43939 by accident fixed my test case, too?\n\nNo.  It's because you hijacked a *different* bug report that just happened to have similar symptoms to 43939 (and is in fact a much older issue).", "count": 13, "id": 140993, "time": "2010-10-25T06:46:00Z", "bug_id": 49328, "creation_time": "2010-10-25T06:46:00Z", "is_private": false}]
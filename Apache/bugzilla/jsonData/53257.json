[{"count": 0, "tags": [], "creator": "andreas.etzlstorfer@ibees.at", "attachment_id": 28802, "is_private": false, "id": 159144, "time": "2012-05-18T06:24:44Z", "bug_id": 53257, "creation_time": "2012-05-18T06:24:44Z", "text": "Created attachment 28802\nfull stacktrace\n\nJasper Compiler has an issue on compiling JSPs if they are contained in a folder like the following example: /a+b/test.jsp. The plus charachter seems to break \n the org.apache.jasper.JspCompilationContext#getLastModified() method, because it returns -1 every time:\n\njava.lang.IllegalArgumentException: Negative time\n\tjava.io.File.setLastModified(File.java:1258)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:376)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:353)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:340)\n\torg.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:644)\n\torg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:358)\n\torg.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n\torg.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\t*******************************************************\n\t*******************************************************\n\tnet.sf.ehcache.constructs.web.filter.GzipFilter.doFilter(GzipFilter.java:81)\n\tnet.sf.ehcache.constructs.web.filter.Filter.doFilter(Filter.java:92)\n\torg.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)\n\torg.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)\n\nSome details:\n - First I suspected URIEncoding=\"utf-8\" in the Connector, but removing the configuration didn't fix the bug\n - The same bug occurs on my developing machine (Windows 7, NTFS, Apache Tomcat 7.0.22)\n - On a other customer machine the same example as above worked fine! (Any Linux Distribution, Apache Tomcat 7.0.19)\n - By the way I also tried the right URI-Encoding: http://.../a%2Bb/test.jsp\n\nPlease find attached the full stack trace\n\nBest Regards\nA. Etzlstorfer"}, {"text": "Confirmed, with 7.0.x built 2012-05-13.\n\nE.g. in examples webapp rename\nwebapps\\examples\\jsp\\jsp2\\el\\basic-arithmetic.jsp \ninto\nwebapps\\examples\\jsp\\jsp2\\el\\basic+arithmetic.jsp \n\nTrying to access it fails\nhttp://localhost:8080/examples/jsp/jsp2/el/basic+arithmetic.jsp\n[[[\njava.lang.IllegalArgumentException: Negative time\n\tjava.io.File.setLastModified(File.java:1258)\n\torg.apache.jasper.compiler.Compiler.compile(Compiler.java:376)\n]]]", "tags": [], "bug_id": 53257, "attachment_id": null, "count": 1, "id": 159145, "time": "2012-05-18T06:37:32Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-05-18T06:37:32Z", "is_private": false}, {"text": "To determine the file date Compiler class calls JspCompilationContext#getLastModified(String resource)\nwhere in my example the resource value is\n'/jsp/jsp2/el/basic+arithmetic.jsp'\n\nIt calls some method that converts it into URL,\n'jndi:/localhost/examples/jsp/jsp2/el/basic+arithmetic.jsp'\n\nIt opens url connection from this URL (implemented by DirContextUrlConnection), then calls methods on it, which result in calling DirContextUrlConnection#connect().\n\n\nThe problem is in the following line in o.a.naming.resource.DirContextUrlConnection#connect():\n\n160        path = URLDecoder.decode(path, \"UTF-8\");\n\nThis call was added in r1152593 to address bug 51584.\n\nThere are two problems with the line 160 here.\n1) The JRE method called here decodes '+' as ' '. That would be correct in a query string or in POST body, but here (in a path) it is not correct.\n\n2) The decode call itself here is wrong. To demonstrate, create one more copy of that sample jsp under the following name: \"basic%abarithmetic.jsp\"\n\nNow let's try accessing\nhttp://localhost:8080/examples/jsp/jsp2/el/basic%2Barithmetic.jsp\nhttp://localhost:8080/examples/jsp/jsp2/el/basic%25abarithmetic.jsp\n\nIn JspContext#getLastModified(String resource) the value of resource argument will be\n'/jsp/jsp2/el/basic+arithmetic.jsp'\n'/jsp/jsp2/el/basic%abarithmetic.jsp'\n\nThe URLDecoder.decode() call will decode the above paths one more time, which is wrong.", "tags": [], "bug_id": 53257, "attachment_id": null, "count": 2, "id": 159149, "time": "2012-05-18T07:50:43Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-05-18T07:50:43Z", "is_private": false}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 159153, "time": "2012-05-18T08:56:51Z", "bug_id": 53257, "creation_time": "2012-05-18T08:56:51Z", "is_private": false, "text": "Conversion of string -> URL is performed via a call to ServletContext.getResource(path).\n\nI have some trouble understanding whether ServletContext API operates on urlencoded on non-urlencoded paths.\n\nMy point of view is that argument of ServletContext.getResource() and the paths returned by ServletContext.getResourcePaths() are just file system paths and they should not be urlencoded.\n\n\nFrom the above it follows that method\no.a.catalina.core.ApplicationContext#getResource(String) that returns\n\n                return new URL\n                    (\"jndi\", \"\", 0, getJNDIUri(hostName, fullPath),\n                     new DirContextURLStreamHandler(resources));\n\nis responsible to perform urlencoding of the path. The docs for java.net.URL say that \"The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396.\" So it should urlencode the path before constructing the URL. \nMaybe use new URI(.,.,.,.,.,.,).toURL(); here, as URI class handles encoding.\n\n\nI think that JspCompilationContext methods such as #getResource(String), #getLastModified(String) should also operate on non-urlencoded strings, like ServletContext does. (That is what they already do today. I am just clarifying my point of view).\n\n\nThere is method DirContextURLConnection#list(). I do not see it called anywhere besides o.a.c.startup.ContextConfig#processAnnotationsJndi(), so it is like our internal API. It returns url-encoded paths (as modified by 1152593). It looks OK with the only place where it is used (and this API is not related to ServletContext.getResourcePaths()), but needs to be documented.\n\n\n(- BTW, in JspContext#getResource(String) there is\n306   result = context.getResource(canonicalURI(res));\n\nThe \"canonicalURI(res)\" call does not hurt, but it seems excessive because ApplicationContext#getResource(String) will call RequestUtil.normalize() on its argument, which does effectively the same.\n)"}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> Conversion of string -> URL is performed via a call to\n> ServletContext.getResource(path).\n> \n> I have some trouble understanding whether ServletContext API operates on\n> urlencoded on non-urlencoded paths.\n> \n> My point of view is that argument of ServletContext.getResource() and the\n> paths returned by ServletContext.getResourcePaths() are just file system\n> paths and they should not be urlencoded.\n\nHaving looked at the Javadoc for ServletContext.getResource() I have the opposite view. Since the URL returned is meant to be independent of where the resource is located, then it can't be a file system path. It is a URL and as such needs to be encoded. It could easily be using the http scheme. I haven't yet checked the rest of the spec for language that supports or undermines that view. That job is next.\n\n> From the above it follows that method\n> o.a.catalina.core.ApplicationContext#getResource(String) that returns\n> \n>                 return new URL\n>                     (\"jndi\", \"\", 0, getJNDIUri(hostName, fullPath),\n>                      new DirContextURLStreamHandler(resources));\n> \n> is responsible to perform urlencoding of the path. The docs for java.net.URL\n> say that \"The URL class does not itself encode or decode any URL components\n> according to the escaping mechanism defined in RFC2396.\" So it should\n> urlencode the path before constructing the URL. \n> Maybe use new URI(.,.,.,.,.,.,).toURL(); here, as URI class handles encoding.\n\nThat I do agree with, although I worry about what it might break.\n\n> I think that JspCompilationContext methods such as #getResource(String),\n> #getLastModified(String) should also operate on non-urlencoded strings, like\n> ServletContext does. (That is what they already do today. I am just\n> clarifying my point of view).\n\nNot sure on this one. I suspect that these may also need to be encoded to handle all the edge cases.\n\n> There is method DirContextURLConnection#list(). I do not see it called\n> anywhere besides o.a.c.startup.ContextConfig#processAnnotationsJndi(), so it\n> is like our internal API. It returns url-encoded paths (as modified by\n> 1152593). It looks OK with the only place where it is used (and this API is\n> not related to ServletContext.getResourcePaths()), but needs to be\n> documented.\n\nWhatever is decided, more documentation is almost certain to be helpful to those looking at this code in a few years time.\n\n> (- BTW, in JspContext#getResource(String) there is\n> 306   result = context.getResource(canonicalURI(res));\n> \n> The \"canonicalURI(res)\" call does not hurt, but it seems excessive because\n> ApplicationContext#getResource(String) will call RequestUtil.normalize() on\n> its argument, which does effectively the same.\n> )\n\nThen lets remove that bit.", "is_private": false, "id": 159574, "creation_time": "2012-05-31T18:31:19Z", "time": "2012-05-31T18:31:19Z", "creator": "markt@apache.org", "bug_id": 53257, "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 159575, "time": "2012-05-31T20:43:52Z", "bug_id": 53257, "creation_time": "2012-05-31T20:43:52Z", "text": "The original fix for bug 51584 has been reverted and a new fix applied that fixes that issue and some additional issues new unit tests created for this bug identified.\n\nThe fix has been applied to trunk and 7.0.x and will be included in 7.0.28 onwards."}]
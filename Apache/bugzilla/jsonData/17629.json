[{"count": 0, "tags": [], "bug_id": 17629, "is_private": false, "id": 32390, "attachment_id": null, "creator": "koreth-apache@midwinter.com", "creation_time": "2003-03-04T05:53:59Z", "time": "2003-03-04T05:53:59Z", "text": "This is almost certainly a variant of bug 15423, but that bug is fixed and this\nproblem still exists.  I'm not sure whether it's really a mod_deflate bug or a\nmod_include bug.  If I have a server-parsed HTML file on an Apache 2 server that\nhas mod_deflate enabled for HTML content, and it includes a CGI that issues a\nredirect to another HTML file, the redirected content isn't compressed, even\nthough the server issues a \"Content-Encoding: gzip\" header line.  My test case:\n\ndozer% cat test-apache2-redir.shtml\n<!--#include virtual=\"/cgi-bin/redirtest\" --> Got to end!\n\ndozer% cat foo.html\nhiya\n\ndozer% cat ~/apache/cgi-bin/redirtest\n#!/bin/sh\necho Location: /foo.html\necho ''\n\ndozer% ( echo 'GET /test-apache2-redir.shtml HTTP/1.1' ; \\\n         echo 'Accept-Encoding: gzip' ; \\\n         echo 'Host: dozer' ; \\\n         echo '' ) | nc dozer 8763 | less\nHTTP/1.1 200 OK\nDate: Tue, 04 Mar 2003 05:47:21 GMT\nServer: Apache/2.0.44 (Unix) mod_fastcgi/mod_fastcgi-SNAP-0210222112\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nConnection: close\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=ISO-8859-1\n\n5\nhiya\n\n21\n^_<8B^@^@^@^@^@^@^CSp<CF>/Q(<C9>WH<CD>KQ<E4>^B^@<EB><D7>y<BD>^M^@^@^@\n0\n\nThe output (with the patch for bug 15423 applied) is correct if I don't accept\ngzip encoding:\n\ndozer% ( echo 'GET /test-apache2-redir.shtml HTTP/1.1' ; \\\n         echo 'Host: dozer' ; \\\n         echo '' ) | nc dozer 8763\nHTTP/1.1 200 OK\nDate: Tue, 04 Mar 2003 05:49:36 GMT\nServer: Apache/2.0.44 (Unix) mod_fastcgi/mod_fastcgi-SNAP-0210222112\nAccept-Ranges: bytes\nVary: Accept-Encoding\nConnection: close\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=ISO-8859-1\n\n5\nhiya\n\nd\n Got to end!\n\n0"}, {"count": 1, "tags": [], "text": "Reproduced here. Will dig into the code ...", "attachment_id": null, "bug_id": 17629, "id": 32696, "time": "2003-03-07T22:22:06Z", "creator": "nd@perlig.de", "creation_time": "2003-03-07T22:22:06Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 32716, "time": "2003-03-08T04:01:18Z", "creator": "ianh@apache.org", "creation_time": "2003-03-08T04:01:18Z", "is_private": false, "text": "does this also happen with the standard mod_cgi ?\nalso in your config, how are turning deflate 'on' ?\nusing\n Addoutputfilterbytype text/html DEFLATE \n\nThe 'werid' thing is the defalte filter should not be able to be added to the\nsubrequest.\n\nmy thinking is that the first bucket has passed through, and then deflate has\nbeen added to the filter chain.  (does this make sense?)"}, {"count": 3, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "Yep. It's not a special problem of deflate or mod_cgi. The internal redirect\nbypasses the content filter (points directly to r->proto_output_filters).\n\nSee my not-sure-if-ready-patch on the dev list :)\n\nMy config is:\n\n<Directory /documentroot>\n    :\n    :\n    Addoutputfilter includes shtml\n    setoutputfilter deflate\n</Directory>", "id": 32719, "time": "2003-03-08T14:43:15Z", "bug_id": 17629, "creation_time": "2003-03-08T14:43:15Z", "is_private": false}, {"count": 4, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 14451 ***", "is_private": false, "id": 38845, "creator": "koreth-apache@midwinter.com", "time": "2003-06-13T23:09:47Z", "bug_id": 17629, "creation_time": "2003-06-13T23:09:47Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 17629, "is_private": false, "id": 38857, "attachment_id": null, "creator": "nd@perlig.de", "creation_time": "2003-06-14T08:44:16Z", "time": "2003-06-14T08:44:16Z", "text": "That is not a dupe of 14451 (unfortunately)."}, {"count": 6, "tags": [], "text": "Oops, right, this is still broken in 2.0.46.  But your patch (which, for other\npeople reading this, is at http://groups.yahoo.com/group/new-httpd/message/43096\n) works for me under 2.0.46. Any chance this fix will get rolled into the next\nrelease?", "is_private": false, "id": 38940, "creator": "koreth-apache@midwinter.com", "time": "2003-06-16T22:14:15Z", "bug_id": 17629, "creation_time": "2003-06-16T22:14:15Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "apache@neil.fraser.name", "attachment_id": null, "is_private": false, "id": 39242, "time": "2003-06-22T10:02:50Z", "bug_id": 17629, "creation_time": "2003-06-22T10:02:50Z", "text": "*** Bug 20945 has been marked as a duplicate of this bug. ***"}, {"count": 8, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 39574, "time": "2003-06-28T14:26:30Z", "creator": "nd@perlig.de", "creation_time": "2003-06-28T14:26:30Z", "is_private": false, "text": "*** Bug 21162 has been marked as a duplicate of this bug. ***"}, {"count": 9, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "*** Bug 21162 has been marked as a duplicate of this bug. ***", "id": 39578, "time": "2003-06-28T16:16:46Z", "bug_id": 17629, "creation_time": "2003-06-28T16:16:46Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 39764, "time": "2003-07-01T15:37:00Z", "creator": "kiza@kcore.de", "creation_time": "2003-07-01T15:37:00Z", "is_private": false, "text": "Hi,\nI tried the mentioned patch on 2.0.46\n\n(+ new->output_filters = r->output_filters; \n+ new->input_filters = r->input_filters; )\n\nHowever it does _not_ fix the problem for me. Output created from mod_deflate is\nstill broken."}, {"count": 11, "tags": [], "text": "I've been playing with this example, and have I think a better diagnosis.  This\nis from mod_filter, into which I've now incorporated debugging info from the old\nmod_diagnostics (I'm planning to check mod_filter into CVS real soon now:-).\n\nThe deflate filter gets called three times:\n(1) with an mmap bucket of size zero (before the SSI include)\n(2) with an mmap bucket from the include, followed by an EOS bucket\n(3) with an mmap bucket containing text after the SSI include, and *another* EOS.\n\n(2) is from the subrequest, and doesn't work because of\n       /* only work on main request/no subrequests */\n        if (r->main) {\n            ap_remove_output_filter(f);\n            return ap_pass_brigade(f->next, bb);\n        }\n\nWe can't simply fix that by removing the test: then we'd have two interleaved\nbut different streams of compressed data coming out.\n\nRunning DEFLATE as a PROTOCOL filter but before prepending the headers (i.e.\ngiving it a new slot in the filter chain) looks as if it should fix this, though\nI'm not sure.  I'm thinking about whether I can fix this as part of mod_filter\ndevelopment.", "attachment_id": null, "bug_id": 17629, "id": 63361, "time": "2004-09-10T15:45:42Z", "creator": "nick@webthing.com", "creation_time": "2004-09-10T15:45:42Z", "is_private": false}, {"count": 12, "tags": [], "text": "On further thought, this is a much more general problem than mod_deflate.  We\nshould *always* merge data from subrequests *before* exposing them to any (more)\noutput filters.\n\nI'm not sure how to fix this, but if mod_filter can do it so as to support the\ncurrent mod_include and others without change, that would be a useful goal.\n", "is_private": false, "id": 63362, "creator": "nick@webthing.com", "time": "2004-09-10T15:50:57Z", "bug_id": 17629, "creation_time": "2004-09-10T15:50:57Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 69523, "time": "2005-01-11T14:46:01Z", "creator": "jorton@redhat.com", "creation_time": "2005-01-11T14:46:01Z", "is_private": false, "text": "Another effect of this bug has popped up with PHP; any response data written\nusing ap_r* may get buffered by the filter inserted into r->output_filters.  But\nthen if a subrequest->internal redirect occurs the output from the redirect\nbypasses the then r->main->output_filters and hence the buffered data is sent\nout-of-order."}, {"count": 14, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "is_private": false, "id": 69529, "time": "2005-01-11T14:59:25Z", "bug_id": 17629, "creation_time": "2005-01-11T14:59:25Z", "text": "Joe, yes, that's exactly the bug here ;-)"}, {"count": 15, "tags": [], "text": "Now you ap_rflush() main request before running sub-request. I think it's bad\nidea *always* to flush. It make impossible to modify main request from\nsub-requst, impossible to set http status of main request (impossible make http\nredirect from sub request) impossible \"conditional get\" from sub-request. May be\nthere sould be second boolean parameter \"to flush or not to flush\". Or may be\nsimple call php's flush() before virtual().", "is_private": false, "id": 75277, "creator": "gentoo.me@gmail.com", "time": "2005-05-24T17:47:01Z", "bug_id": 17629, "creation_time": "2005-05-24T17:47:01Z", "attachment_id": null}, {"count": 16, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "(In reply to comment #15)\n> Now you ap_rflush() main request before running sub-request.\n\nSorry, ehm, who exactly are you meaning with \"you\"? I have problems to put your\ncomment in a proper context.", "id": 75318, "time": "2005-05-25T07:21:28Z", "bug_id": 17629, "creation_time": "2005-05-25T07:21:28Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 75338, "time": "2005-05-25T14:02:01Z", "creator": "gentoo.me@gmail.com", "creation_time": "2005-05-25T14:02:01Z", "is_private": false, "text": "(In reply to comment #16)\n> Sorry, ehm, who exactly are you meaning with \"you\"? I have problems to put your\n> comment in a proper context.\n\nOk. Look into php's virtual function: since php 5.0.3 added call ap_rflush()\nbefore running sub-request. And now in php 5.0.4 impossible to add or change\nhttp headers (or change http status) in main request from sub-request because\nheaders already sended to user (sometimes it's good, sometimes bad), php-script\ndeveloper should select this behaviour.\n\n============\n\nindex.php\n<?php\n  //...\n  if ($should_we_handle_request) {\n    handle_http_request();\n  }\n  else {\n    # call another handler\n    virtual(\"/call-mod_perl\");\n  }\n?>\n\ncall-mod_perl.pm\nsub handler : method {\n  my $class = (@_ >= 2) ? shift : __PACKAGE__;\n  # $r is Apache2::RequestRec\n  my $r = shift;\n\n  #... some work\n\n  if ($need_redirect) {\n    if ($r->is_initial_req()) {\n      # this is main request, no php here\n      $r->headers_out->set('Location' => $where_to_redirect);                 \n      return Apache2::Const::REDIRECT;\n    }\n    else {\n      # this is the sub-request (may be from php)\n      my $main_r = $r->main();\n\n      # set Location: in main request not in sub-request\n      $main_r->headers_out->set('Location' => $where_to_redirect);\n\n      # return OK instead REDIRECT because it is sub-request's status\n      return Apache2::Const::OK;\n    }\n  }\n}\n\nhttpd.conf\n<Location \"/call-mod_perl\">\n  SetHandler modperl\n  PerlResponseHandler call-mod_perl->handler\n</Location>\n\n===========\n\nin this example redirect will not work if ap_rflush() main request before\nrunning sub-request (php 5.0.4), because user already got HTTP status 200.\n"}, {"count": 18, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 75341, "time": "2005-05-25T14:28:06Z", "creator": "nd@perlig.de", "creation_time": "2005-05-25T14:28:06Z", "is_private": false, "text": "Oh well, then \"you\" is bugs.php.net :-)"}, {"count": 19, "tags": [], "text": "The flush is a necessary workaround for this bug, there is no point in asking\nPHP to be changed until this bug is fixed.", "attachment_id": null, "bug_id": 17629, "id": 75342, "time": "2005-05-25T14:30:44Z", "creator": "jorton@redhat.com", "creation_time": "2005-05-25T14:30:44Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 17629, "is_private": false, "id": 75344, "attachment_id": null, "creator": "gentoo.me@gmail.com", "creation_time": "2005-05-25T14:51:37Z", "time": "2005-05-25T14:51:37Z", "text": "(In reply to comment #19)\n> The flush is a necessary workaround for this bug, there is no point in asking\n> PHP to be changed until this bug is fixed.\n\nwhat about\ninteger virtual ( string filename, integer not_to_flush=0 )\n"}, {"count": 21, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "The PHP developers are not going to make interface changes to work around 2.0 bugs.", "id": 75345, "time": "2005-05-25T15:00:34Z", "bug_id": 17629, "creation_time": "2005-05-25T15:00:34Z", "is_private": false}, {"count": 22, "tags": [], "text": "(In reply to comment #21)\n> The PHP developers are not going to make interface changes to work around 2.0\nbugs.\n\nThe PHP developers not fix any bug. They make work around by changing behaviour\nof virtual() function.\nWill GLibc herd change behaviour of printf() because XYZ monitor has a bug? -)", "is_private": false, "bug_id": 17629, "id": 75347, "time": "2005-05-25T15:22:46Z", "creator": "gentoo.me@gmail.com", "creation_time": "2005-05-25T15:22:46Z", "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 75409, "time": "2005-05-26T10:16:15Z", "creator": "gentoo.me@gmail.com", "creation_time": "2005-05-26T10:16:15Z", "is_private": false, "text": "Sorry for spam this bugzilla, php's bugzilla is strange.\n\nfor Joe Orton\nWhat sub-request can to do?\nIt can:\n - add content (most usable)\n - remove and may be change content\n - add, remove and change http headers\n - change http status\n - add, remove output filters\nif you flush main request before running sub-request\nthen only 1-st is avaible (add content only)!\nAre you really want it?\n\nMay be user can do:\n<?php\n    flush();\n    virtual('add_content_only.html');\n?>\nif hi really need it, without any workarounds?\n"}, {"count": 24, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "Vitaly, the workaround added to PHP is necessary to prevent garbled out-of-order\ncontent being sent (see php bug 30446) due to this 2.0 bug.  The issues you are\ndescribing are far less serious than out-of-order content in a common use of\nvirtual().  Therefore the workaround in PHP will stay until either someone comes\nup with a better workaround, or this 2.0 bug is fixed.  If you have any input on\nhow to achieve the former, please bring it up on the php internals@ list. \nOtherwise, this discussion is off-topic here.", "id": 75410, "time": "2005-05-26T10:29:14Z", "bug_id": 17629, "creation_time": "2005-05-26T10:29:14Z", "is_private": false}, {"count": 25, "tags": [], "creator": "nksurvive@126.com", "attachment_id": null, "text": "hello,something bother me about virtual function.\n\nexample:\nmain.php\n\n<?\n\necho \"before virtual\";\n\n$res=\"KKKKKKKKKK\";\nrequest($res);\n\n$res.=\"EEEEEEEEEE\";\n\necho $res;\n\n\n\nfunction request(&$res)\n{\n        $res.=\"----------header---------\\n\";\n        virtual(\"myfunc.php\");\n        $res.=\"-----------footer------\\n\";\n        echo \"xxxxxxxxx\".$res .\"yyyyyyyyy\";\n}\n\n?>\n\nmyfunc.php:\n<?\n\necho \"in my func\";\n\nmyfunc();\nexit();//look here. #1\n\nfunction myfunc()\n{\n        echo \"in sub func\";\n        //exit(); //look here #2\n}\n\n?>\n\ndifferent place of exit function got different response.\n\n#1:\nbefore virtualin my funcin sub funcxxxxxxxxxKKKKKKKKKK----------header---------\n -----------footer------ yyyyyyyyyKKKKKKKKKK----------header--------- ----------\n-footer------ EEEEEEEEEE\n#2:\nbefore virtualin my funcin sub funcxxxxxxxxx-----------footer------ \nyyyyyyyyyKKKKKKKKKK----------header--------- EEEEEEEEEE\n\n\n\nI think, #1 and #2 should gave the same response.Is there anything wrong?\n\n\n", "id": 83786, "time": "2005-12-19T05:41:49Z", "bug_id": 17629, "creation_time": "2005-12-19T05:41:49Z", "is_private": false}, {"count": 26, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "*** Bug 40693 has been marked as a duplicate of this bug. ***", "id": 94575, "time": "2006-10-06T03:43:10Z", "bug_id": 17629, "creation_time": "2006-10-06T03:43:10Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 94576, "time": "2006-10-06T04:02:11Z", "creator": "stefan@priebe.ws", "creation_time": "2006-10-06T04:02:11Z", "is_private": false, "text": "Hello!\n\nWhat is the status of this bug? At the moment i cannot use mod_deflate with \nmod_fcgid and mod_include... and this bug is open since 2003-03-04...\n\nStefan"}, {"count": 28, "tags": [], "text": "Hello!\n\nIs there a workaround?\n\nI've tried something like:\nSetEnvIf REQUEST_URI \\.shtml$ no-gzip\n\nBut that also does not work...\n\nStefan\n", "is_private": false, "bug_id": 17629, "id": 94614, "time": "2006-10-07T10:02:01Z", "creator": "stefan@priebe.ws", "creation_time": "2006-10-07T10:02:01Z", "attachment_id": null}, {"count": 29, "tags": [], "creator": "apche_bug@spininhetweb.nl", "attachment_id": null, "is_private": false, "id": 125461, "time": "2009-03-10T06:19:54Z", "bug_id": 17629, "creation_time": "2009-03-10T06:19:54Z", "text": "Hi,\n\nIs there any chance this issue will get fixed in a new mod_filter implementation? mod_deflate (or any FilterChain with more than one filter) is now unusable to anyone who does not know in advance if some of the processing will require subrequests.\n\nBy the way, in httpd 2.2.3, when a file is run through mod_include containing a subrequest, and afterwards through mod_deflate, the output will not be mixed gzipped/ non-gzipped, but will be not compressed. The only problem now is, that mod_deflate still adds the Content-Encoding: gzip, which confuses the client...\n\nSo this html-file:\n---\n<html>\n<body><!--#include virtual=\"/output.cgi\"--></body>\n</html>\n-----\n\nand this output.cgi file:\n---\n#!/bin/bash\n\necho 'Content-Type: text/html'\necho ''\necho 'This is the output'\n---\n\nWill be delivered, when ran through mod_include and mod_deflate as:\n------\nHTTP/1.1 200 OK\nDate: Tue, 10 Mar 2009 13:18:05 GMT\nServer: Apache\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Encoding: gzip\nConnection: close\nContent-Type: text/html\n\nThis is the output\n</body>\n</html>\n-----\n\nAs you can see: the body is not encoded. \n\n(and there isn't even a redirect in the cgi, it is run through a handler and just outputs the content).\n\nJelmer"}, {"count": 30, "tags": [], "bug_id": 17629, "is_private": false, "id": 136404, "attachment_id": null, "creator": "alex@docauer.net", "creation_time": "2010-04-25T23:51:43Z", "time": "2010-04-25T23:51:43Z", "text": "I believe I have identified the cause of this issue and have a resolution.\n\nmod_filter appears to be the only module that uses the filter_init_func field of the ap_filter_rec_t structure.  This member is a pointer to function that is to be run right after the insert_filter hooks are run and right before the content handler is invoked.  As most modules do their initialization at the time they are called to process data, this feature is largely unused.  However, mod_filter chooses to do its initialization here  so that it can correctly call the filter_init_func of each provider if it exists.  \n\nmod_filter sets filter_init_func to be a pointer to its filter_init function.  In filter_init, it first creates the context for the harness, before calling filter_init_func of each provider.  The initial context for each provider and the ongoing context of the subsequently invoked provider are all stored in the harness context.\n\nThe problem arises in that mod_filter intuitively assumes that filter_init will only ever be called once during the lifetime of the filter harness.  However, when mod_include creates a subrequest, all of the filters from the main request get copied into the subrequest.  Before the content handler is invoked in the subrequest, the filter_init_func of every filter in the subrequest gets called.  This means that the filter_init_func of the filter harness gets called again, one addition time for each subrequest.\n\nThe first thing that mod_filter does in filter_init is to assign the context pointer to freshly allocated memory.  When called more than once, this essentially destroys the existing harness context and any provider contexts that it contains.  In the case of mod_deflate, it loses any data waiting in the compression buffer.  Furthermore, when mod_deflate is invoked again without a context, it assumes it is being called for the first time in that request.  When it sees that Content-Encoding is already set to gzip, it removes itself from the filter chain, leaving the remaining output uncompressed.\n\nI don't know if it's considered correct or ideal operation that filter_init_func can be called more than once, but as it stands, mod_filter can't assume that it doesn't.  I am attaching a small patch that will make filter_init first check for an existing harness context, simply returning if it finds one already exists.  I tested this patch with 2.2.14."}, {"count": 31, "tags": [], "bug_id": 17629, "attachment_id": 25350, "id": 136405, "time": "2010-04-26T00:00:34Z", "creator": "alex@docauer.net", "creation_time": "2010-04-26T00:00:34Z", "is_private": false, "text": "Created attachment 25350\nPrevent filter_init in mod_filter from destroying it's own harness context\n\nThis should resolve the issue.  This patch was tested with 2.2.14."}, {"count": 32, "tags": [], "bug_id": 17629, "is_private": false, "id": 136406, "attachment_id": null, "creator": "pnasrat@googlemail.com", "creation_time": "2010-04-26T01:58:47Z", "time": "2010-04-26T01:58:47Z", "text": "(In reply to comment #31)\n> Created an attachment (id=25350) [details]\n> Prevent filter_init in mod_filter from destroying it's own harness context\n> \n> This should resolve the issue.  This patch was tested with 2.2.14.\n\nI tested with the reproducer I found as described here using a virtual ssi and mod_deflate/mod_filter with your patch - see users archive for full details:\n\nhttp://mail-archives.apache.org/mod_mbox/httpd-users/200803.mbox/%3C48c2022e0803250736p4ce51f8diad6f5264ba123a94@mail.gmail.com%3E\n\nBuilt using 2.2.15 with your patch this still produces incorrect input\n\n* About to connect() to localhost port 8081 (#0)\n*   Trying ::1... connected\n* Connected to localhost (::1) port 8081 (#0)\n> GET /test.shtml HTTP/1.1\n> User-Agent: curl/7.16.4 (i386-apple-darwin9.0) libcurl/7.16.4 OpenSSL/0.9.7l zlib/1.2.3\n> Host: localhost:8081\n> Accept: */*\n> Accept-Encoding: gzip\n> \n< HTTP/1.1 200 OK\n< Date: Mon, 26 Apr 2010 05:57:07 GMT\n< Server: Apache/2.2.15 (Unix)\n< Accept-Ranges: bytes\n< Vary: Accept-Encoding\n< Content-Encoding: gzip\n< Transfer-Encoding: chunked\n< Content-Type: text/html\n< \n{ [data not shown]\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0    49    0    49    0     0   8305      0 --:--:-- --:--:-- --:--:--     0* Connection #0 to host localhost left intact\n\n* Closing connection #0\npaul-nasrats-macbook:httpd-2.2.15 pnasrat$ hexdump -C ~/test \n00000000  3c 68 31 3e 49 6e 63 6c  75 64 65 64 3c 2f 68 31  |<h1>Included</h1|\n00000010  3e 0a 1f 8b 08 00 00 00  00 00 00 03 0b 0e 71 0c  |>.............q.|\n00000020  0a e1 e2 72 f5 73 e1 02  00 bd 52 71 7a 0b 00 00  |.??r?s?..?Rqz...|\n00000030  00                                                |.|\n00000031"}, {"count": 33, "tags": [], "bug_id": 17629, "attachment_id": null, "id": 136414, "time": "2010-04-26T08:24:14Z", "creator": "alex@docauer.net", "creation_time": "2010-04-26T08:24:14Z", "is_private": false, "text": "I may have posted this fix to the wrong original bug.  However, this bug has a lot of posts referring to the issue with combining mod_include with mod_filter.  It now appears that the original bug is unrelated to the mod_filter + mod_include issue.  I will try to find the correct bug."}, {"count": 34, "tags": [], "creator": "mkent@magoazul.com", "attachment_id": null, "is_private": false, "id": 136923, "time": "2010-05-17T18:46:18Z", "bug_id": 17629, "creation_time": "2010-05-17T18:46:18Z", "text": "(In reply to comment #33)\n> I may have posted this fix to the wrong original bug.  However, this bug has a\n> lot of posts referring to the issue with combining mod_include with mod_filter.\n>  It now appears that the original bug is unrelated to the mod_filter +\n> mod_include issue.  I will try to find the correct bug.\n\nDid you find a more correct bug for this issue?\n\nExperiencing it here on 2.2.15 with mod_filter, ssi and deflate. Preventing a full conversion to mod_filter unfortunately."}, {"count": 35, "tags": [], "creator": "alex@docauer.net", "attachment_id": null, "text": "(In reply to comment #34)\n> Did you find a more correct bug for this issue?\n> \n> Experiencing it here on 2.2.15 with mod_filter, ssi and deflate. Preventing a\n> full conversion to mod_filter unfortunately.\n\nI have opened bug 49328 to address the mod_filter + mod_include + mod_deflate issue.  If you are specifically experiencing corrupt output after a file is included with mod_include and mod_deflate is being used from within mod_filter, I would track that bug instead.", "id": 137043, "time": "2010-05-23T00:50:49Z", "bug_id": 17629, "creation_time": "2010-05-23T00:50:49Z", "is_private": false}, {"count": 36, "tags": [], "text": "I'm using this patch to address this issue it is working fine.\n\n--- http/http_request.c 2006-07-12 05:38:44.000000000 +0200\n+++ ../http_request.c   2006-10-07 19:29:33.000000000 +0200\n@@ -374,17 +374,27 @@ static request_rec *internal_internal_re\n     new->proto_output_filters  = r->proto_output_filters;\n     new->proto_input_filters   = r->proto_input_filters;\n \n-    new->output_filters  = new->proto_output_filters;\n-    new->input_filters   = new->proto_input_filters;\n-\n     if (new->main) {\n+        new->output_filters = r->output_filters;\n+        new->input_filters = r->input_filters;\n+\n         /* Add back the subrequest filter, which we lost when\n          * we set output_filters to include only the protocol\n          * output filters from the original request.\n+         *\n+         * XXX: This shouldn't be neccessary any longer, because the filter\n+         * is still in place -- isn't it?\n          */\n         ap_add_output_filter_handle(ap_subreq_core_filter_handle,\n                                     NULL, new, new->connection);\n     }\n+    else {\n+        /* In subrequests we _must_ point to the complete upper request's\n+         * filter chain, so skip the filters _only_ within the main request.\n+         */\n+        new->output_filters  = new->proto_output_filters;\n+        new->input_filters   = new->proto_input_filters;\n+    }\n \n     update_r_in_filters(new->input_filters, r, new);\n     update_r_in_filters(new->output_filters, r, new);\n@@ -438,10 +448,19 @@ AP_DECLARE(void) ap_internal_fast_redire\n     r->subprocess_env = apr_table_overlay(r->pool, rr->subprocess_env,\n                                           r->subprocess_env);\n \n-    r->output_filters = rr->output_filters;\n-    r->input_filters = rr->input_filters;\n+    /* copy the filters _only_ within the main request. In subrequests\n+     * we _must_ point to the upper requests' filter chain, so do not\n+     * touch 'em!\n+     */\n+    if (!r->main) {\n+        r->output_filters = rr->output_filters;\n+        r->input_filters = rr->input_filters;\n+    }\n \n     if (r->main) {\n+        /* XXX: This shouldn't be neccessary any longer, because the filter\n+         * is still in place -- isn't it?\n+         */\n         ap_add_output_filter_handle(ap_subreq_core_filter_handle,\n                                     NULL, r, r->connection);\n     }", "attachment_id": null, "bug_id": 17629, "id": 137047, "time": "2010-05-23T05:01:32Z", "creator": "stefan@priebe.ws", "creation_time": "2010-05-23T05:01:32Z", "is_private": false}, {"count": 37, "tags": [], "text": "The patch in comment 36 does indeed fix the reproducer I was seeing:\n\nTested against 2.2.15 with both Alex's patch and Stefan's patch:\n\nhexdump -C ~/test \n00000000  1f 8b 08 00 00 00 00 00  00 03 0b 0e 71 0c 0a e1  |............q..?|\n00000010  b2 c9 30 b4 f3 cc 4b ce  29 4d 49 4d b1 d1 07 72  |??0???K?)MIM??.r|\n00000020  b8 b8 5c fd 5c b8 00 4a  99 4a 1a 1d 00 00 00     |??\\?\\?.J.J.....|\n\npaul-nasrats-macbook:~ pnasrat$ gzcat /Users/pnasrat/test \nSTART\n<h1>Included</h1>\n\nEND\n\nAs there seems to be multiple issues conflated in this bug, if this is what is meant to be tracked in bug 49328 then Stefan can you attach the patch there?", "attachment_id": null, "bug_id": 17629, "id": 137048, "time": "2010-05-23T05:38:05Z", "creator": "pnasrat@googlemail.com", "creation_time": "2010-05-23T05:38:05Z", "is_private": false}, {"count": 38, "tags": [], "text": "I don't think Stefan's patch applies to bug 49328, as he is patching internal_internal_redirect and ap_internal_fast_redirect, which is called by mod_cgi(d) and/or mod_fastcgi.  In my example, no CGIs are used to repeat the incorrect behavior. mod_include is calling make_sub_request directly, not making internal redirects.\n\nHowever, I think it's quite possible these bugs might be endemic of the same underlying design decision.  It seems that there are a number of cases where one would want to operate only on the filters that were pushed during the current subrequest and not any filters that we inherited from a parent request. In bug 49328, only the filters that were added in the subrequest should have had their filter_init_func called, but the filters inherited from the parent are re-initialized along with the new ones.  In bug 17629, only the filters that were added to the request that triggered the redirect should be removed, but since all of the filters except the protocol filters are removed, the data generated by the redirect gets passed straight to the protocol filters instead of first passing through its parent filters.\n\nThat being said, I don't think that Stephan's patch correctly handles all cases of internal redirects, even through it does happen to work for the case listed in this bug.  Instead of special-casing the behavior based on whether the current request is a main request or a subrequest, it should simply copy the parent request's filters (which would just consist of the protocol filters if we are the main request) into the subrequest, thus discarding any filters added in the current request.\n\nI think implementing the fix in such a way would at least entail creating new fields in the request_rec that represent the lists of input and output filters copied from the parent, establishing new invariants for how these lists should be treated, and then modification of request-handling logic in several files to take these new lists into account.\n\nSuch a fix may also address bug 43939, which I suspect is being cause by an internal redirect in mod_dir.", "is_private": false, "bug_id": 17629, "id": 137049, "time": "2010-05-23T07:27:56Z", "creator": "alex@docauer.net", "creation_time": "2010-05-23T07:27:56Z", "attachment_id": null}, {"count": 39, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 137069, "time": "2010-05-24T09:43:56Z", "bug_id": 17629, "creation_time": "2010-05-24T09:43:56Z", "text": "Test case for this added: http://svn.apache.org/viewvc?rev=947641&view=rev"}, {"count": 40, "tags": [], "creator": "stefan@priebe.ws", "attachment_id": null, "is_private": false, "id": 137074, "time": "2010-05-24T11:11:41Z", "bug_id": 17629, "creation_time": "2010-05-24T11:11:41Z", "text": "My \"fix\" fixes the problem with mod_deflate and ssi - nothing more."}, {"count": 41, "tags": [], "text": "Doing this:\n\n     if (new->main) {\n+        new->output_filters = r->output_filters;\n+        new->input_filters = r->input_filters;\n\nseems attractive, and clearly fixes this particular bug, but I think it's a regression.  \n\nThe output of the internal redirect should be equivalent to a client following an (\"external\", if you will) HTTP redirect.  Inheriting the entire filter chain for an internal redirect, any (resource/content-level) filters which applied to the original location would be applied to the redirect location.\n\nImagine you have some content-transforming filter applied to resources in /a/ but not in /b/.  Any internal redirect from /a/foo to /b/bar should hence act as if the client requested /b/bar directly -- without that filter applied.", "attachment_id": null, "bug_id": 17629, "id": 137408, "time": "2010-06-07T05:07:20Z", "creator": "jorton@redhat.com", "creation_time": "2010-06-07T05:07:20Z", "is_private": false}, {"count": 42, "tags": [], "creator": "jorton@redhat.com", "attachment_id": 25544, "is_private": false, "id": 137427, "time": "2010-06-08T05:20:45Z", "bug_id": 17629, "creation_time": "2010-06-08T05:20:45Z", "text": "Created attachment 25544\nproposed patch\n\nProposed patch for this bug.\n\nThis changes only the handling of internal redirect, not internal fast redirects (as seen with mod_dir, for example)."}, {"count": 43, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 137437, "time": "2010-06-08T06:55:44Z", "bug_id": 17629, "creation_time": "2010-06-08T06:55:44Z", "text": "I can't convince myself that this issue does not exist with internal fast redirects too (mod_dir, mod_negotiation).  But, per bug 43939, the changes on the trunk seem to be sufficient."}, {"count": 44, "tags": [], "text": "I've committed my proposed patch to the trunk:\n\nhttp://svn.apache.org/viewvc?view=revision&revision=952828\n\nI've rediffed for 2.2.x and uploaded here:\n\nhttp://people.apache.org/~jorton/ap22_pr17629.patch\n\nfurther results from testing are very welcome!", "is_private": false, "id": 137459, "creator": "jorton@redhat.com", "time": "2010-06-08T17:27:33Z", "bug_id": 17629, "creation_time": "2010-06-08T17:27:33Z", "attachment_id": null}, {"count": 45, "tags": [], "text": "Backported to 2.2.x as r988400.", "is_private": false, "id": 139404, "creator": "rpluem@apache.org", "time": "2010-08-24T02:45:44Z", "bug_id": 17629, "creation_time": "2010-08-24T02:45:44Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "wb@wimsbios.com", "text": "the following doesn't work:\n\n<sql:connection id=\"conn1\">\n  <sql:url initParameter=\"dbURL\"/> \n  <sql:driver initParameter=\"mysqlDriver\"/>\n  <sql:userId initParameter=\"dbUserId\"/> \n  <sql:password initParameter=\"dbPassword\"/>\n</sql:connection>\n\n<sql:statement id=\"stmt1\" conn=\"conn1\">\n \n \t<sql:query>\n    select wanted_text from wanted_bios \n    ORDER BY wanted_text\n  \t</sql:query>\n\n<ul>\n<sql:resultSet id=\"rset2\">\n  <li><sql:getColumn colName=\"wanted_text\"/>\n\n</sql:resultSet>\n</ul>\n</sql:statement>\n<sql:closeConnection conn=\"conn1\"/>\n\nThe error I get:\n\n[2001/12/04 11:07:26] null\njava.lang.NullPointerException\n\tat\norg.apache.taglibs.dbtags.resultset.BaseGetterTag.getColumnNumber(BaseGetter\nTag.java:239)\n\tat\norg.apache.taglibs.dbtags.resultset.BaseGetterTag.getPosition(BaseGetterTag.\njava:111)\n\tat\norg.apache.taglibs.dbtags.resultset.GetColumnTag.doStartTag(GetColumnTag.jav\na:116)\n\tat _wanted__jsp._jspService(_wanted__jsp.java:211)\n\tat com.caucho.jsp.JavaPage.service(JavaPage.java:74)\n\tat com.caucho.jsp.Page.subservice(Page.java:485)\n\tat\ncom.caucho.server.http.FilterChainPage.doFilter(FilterChainPage.java:176)\n\tat com.strangegizmo.filter.GzipFilter.doFilter(GzipFilter.java:117)\n\tat\ncom.caucho.server.http.FilterChainFilter.doFilter(FilterChainFilter.java:87)\n\tat com.caucho.server.http.Invocation.service(Invocation.java:278)\n\tat\ncom.caucho.server.http.CacheInvocation.service(CacheInvocation.java:129)\n\tat\ncom.caucho.server.http.ServletServer.serviceTop(ServletServer.java:847)\n\tat\ncom.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:213)\n\tat\ncom.caucho.server.http.HttpRequest.handleConnection(HttpRequest.java:158)\n\tat com.caucho.server.TcpConnection.run(TcpConnection.java:140)\n\tat java.lang.Thread.run(Thread.java:484)\n\n\nIt is clear that <sql:getColumn colName=\"wanted_text\"/> is the thing that\ngives me the null pointer exception. When there is only one element returned\nfrom the database this doesn't happen, only when two or more elements are\nreturned. Also <sql:getColumn position=\"1\"/> gives me the same error. \n\nI've been looking into the code and it happens because _name is null the\nsecond time:\n\nIn BaseGetterTag.java:\n\npublic int getPosition() throws JspTagException{\n    // if the column was set according to its name,\n    // figure out its position\n    System.out.println(\"position:\" + _position);\n    if (_position == -1) {\n      _position = getColumnNumber(_name);\n    }\n    System.out.println(\"position after if:\" + _position);\n    return _position;\n  }\n\nthe second time the code gets executed (second result from the db) _position\n= -1 (I don't know why, when  I do getColumn position = 1 I'm not using the\ncolumn name at all\n\nSo we pass _name (a null value) to that function and in that function we do\n: strName.equalsIgnoreCase (meta.getColumnName (i))\n\n(strName == null !!!!)\n\nCan someone from the developers tell me why _name doesn't get properly set\nthe second time ? Or why the _position doesn't get properly set ? (should be\n1, and not -1 logically?)\n\nI'm using Resin 2.0.4 (downloadable at http://www.caucho.com), but Resin\n2.0.2 gives the same errors.\n\nTried DBTags beta 1 and latest nightly build from December 3rd, 2001", "id": 8561, "time": "2001-12-04T02:28:55Z", "bug_id": 5258, "creation_time": "2001-12-04T02:28:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "wb@wimsbios.com", "is_private": false, "id": 8595, "creation_time": "2001-12-05T02:22:51Z", "time": "2001-12-05T02:22:51Z", "bug_id": 5258, "text": "After talking to Resin developers we've found out it is a bug in DBTags.\n\nThe BaseGetterTag.doEndTag() violates the spec by setting _name to null. Tags \nmay not change attribute values until release it called. \n\nMore information at http://www.caucho.com/quercus/bugtrack/view.xtp?\nbugreport_id=135\n\nA proposed fix is:\n\nIn BaseGetterTag.doEndTag() :\n\n  /**\n   * If I understand the new JSP spec correctly, release()\n   * is NOT called between invocations of a cached taglib,\n   * so I guess we do it manually or write a new method.\n   * \n   * @return EVAL_PAGE constant\n   */\n  public int doEndTag() {\n    return EVAL_PAGE;\n  }\n\n(I removed the call to release() )\n\nResin 2.0.x and DBTags now work okay :-)\n\nWim Bervoets\n\n", "attachment_id": null}, {"count": 2, "tags": [], "creator": "mdelagra@eb.com", "text": "The JSP 1.1 spec was sadly vague with regard to certain aspect of the taglib \nlifecycle.  If I understand the JSP 1.2 spec correctly, release() is only \nguaranteed to be called upon garbage collection of a tag, which is not \nnecessarily with every invocation.  Therefore, tags must reset their state \nmanually.\n\nMy guess is that this version of Resin does not call the getter methods on a \ntag while inside a loop (either when faced with a constant, or always).  Is \nthis the case?  If so, it sounds like an optimization that does not agree with \nthe lifecycle clarifications in the JSP 1.2 spec.", "id": 13551, "time": "2002-04-15T02:37:55Z", "bug_id": 5258, "creation_time": "2002-04-15T02:37:55Z", "is_private": false, "attachment_id": null}]
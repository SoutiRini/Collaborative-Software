[{"count": 0, "tags": [], "bug_id": 58074, "attachment_id": 32853, "id": 183725, "creation_time": "2015-06-24T08:35:47Z", "time": "2015-06-24T08:35:47Z", "creator": "qedisk@gmail.com", "text": "Created attachment 32853\nSSCCE\n\nScenario: I have enabled session serialization on stop+start/reload/undeploy+deploy for my ROOT.war by adding <Manager pathname=\"${catalina.base}/ROOT-sessions.ser\" /> into /webapp/META-INF/context.xml in my application. My sessions for my app are de/serialized properly. But when my custom object implementing Serializable is stored in some session, then after stop, reload or undeploy and \"Find leaks\" in manager console I get a message: \"The following web applications were stopped (reloaded, undeployed), but their classes from previous runs are still loaded in memory, thus causing a memory leak (use a profiler to confirm): /\". With non-serializable objects in session there is no problem (of course, I have to have disabled <distributable />). According to mailing list, this is not a bug, but I don't believe it: http://bit.ly/1HbBzrJ . Currently it seems that I have only one option: to restart a service after undeploy to prevent memory leaks. I'd like to work without service restarting, if it is possible. My application has <distributable /> in web.xml. I'm using latest Tomcat 7 + latest JDK 7 + Win 7 Pro 64. I don't know if bug persists in Tomcat 8. The serializable object is very simple (see attached SSCCE):\n\npublic class SessionUser implements Serializable {\n  public SessionUser() {}\n  public String toString() { return \"xx\"; }\n}.\n\nThe question is: Is it possible to have session serialization enabled (and have serializable objects in session) and do redeploy without service restart while no memory leaks happens?", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "A profiler confirms that there is no memory leak here. weak references != memory leaks. GC will clear them as/if necessary to relieve memory pressure.", "id": 183726, "time": "2015-06-24T10:53:09Z", "bug_id": 58074, "creation_time": "2015-06-24T10:53:09Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "(In reply to Mark Thomas from comment #1)\n> A profiler confirms that there is no memory leak here. weak references !=\n> memory leaks. GC will clear them as/if necessary to relieve memory pressure.\n\nI must confirm that you are correct. I didn't believe it, but multiple redeployment of my app showed PermGen space growth UNTIL MAX limit was reached (I pressed \"Perform GC\" in the meantime as much as I could - with no effect) and then, SUDDENLY when the crucial reload was made - the one I hoped to crash Tomcat - ALL PermGen space occupied by \"leaks\" was freed AND \"Find leaks\" button suddenly showed \"No web applications appear to have triggered a memory leak\". I must be more careful next time with issuing bug reports. Thanks for answer.", "is_private": false, "id": 183735, "creation_time": "2015-06-24T14:11:03Z", "time": "2015-06-24T14:11:03Z", "creator": "qedisk@gmail.com", "bug_id": 58074, "attachment_id": null}]
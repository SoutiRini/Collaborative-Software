[{"count": 0, "tags": [], "text": "The fix for bug 48746 causes slowdown in task execution significantly.\nOn my system with the \"time\" command it appears to add around 400ms of latency for each process exec.\n\nI've only tested it on chmod, because one of our projects has need to chmod massive files.\n\nI have a simple build.xml:\n\n<project name=\"chmodtest\" default=\"doChmodSingle\" basedir=\".\">\n   <target name=\"doChmodSingle\">\n      <chmod dir=\".\" type=\"file\" perm=\"755\" includes=\"**\" parallel=\"false\"/>\n   </target>\n   <target name=\"doChmodParallel\">\n      <chmod dir=\".\" type=\"file\" perm=\"755\" includes=\"**\" parallel=\"true\"/>\n   </target>\n\n</project>\n\nrun against 100 files created with:\nfor i in `seq 1 100`; do touch $i; done\n\nWith the 1.8.1 stock PumpStreamHandler:\n\nBuildfile: /mnt/disk1/home/awang/test/build.xml\n\ndoChmodSingle:\n\nBUILD SUCCESSFUL\nTotal time: 41 seconds\n\nreal    0m41.483s\nuser    0m0.738s\nsys     0m0.614s\n\nWith the Os.isFamily(\"windows\") back in the StreamPumper constructor (this was removed and replaced with true for the fix for bug 48746) the results are:\n\nBuildfile: /mnt/disk1/home/awang/test/build.xml\n\ndoChmodSingle:\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nreal    0m1.079s\nuser    0m0.704s\nsys     0m0.601s\n\nWith the doChmodParallel, the results are consistently:\nstock 1.8.1 behavior\nreal    0m0.874s (this varies from 872-875 on about a dozen runs)\nOs.isFamily(\"windows\") check behavior:\nreal    0m0.474s (this is pretty consistent)\n\nBecause of AIX's annoying handling of parallelism, for certain large directories, we just gave up and turned off parallelism.  Even with a realistic maxparallel, the extra 400ms per execution can add as minutes to the build script time.", "is_private": false, "bug_id": 49384, "id": 137336, "time": "2010-06-03T17:20:27Z", "creator": "dopey@moonteeth.com", "creation_time": "2010-06-03T17:20:27Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "dopey@moonteeth.com", "is_private": false, "id": 137338, "attachment_id": 25522, "bug_id": 49384, "creation_time": "2010-06-03T17:35:54Z", "time": "2010-06-03T17:35:54Z", "text": "Created attachment 25522\nstack trace for chmod task call\n\nStack trace during chmod task call.\n\n\"Thread-165\" daemon prio=10 tid=0x00007f548823a000 nid=0x1a73 in Object.wait() [0x00007f540249a000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n   at java.lang.Object.wait(Native Method)\n   - waiting on <0x00007f545c633fd8> (a org.apache.tools.ant.taskdefs.StreamPumper)\n   at org.apache.tools.ant.taskdefs.StreamPumper.waitForInput(StreamPumper.java:229)\n   - locked <0x00007f545c633fd8> (a org.apache.tools.ant.taskdefs.StreamPumper)\n   at org.apache.tools.ant.taskdefs.StreamPumper.run(StreamPumper.java:126)\n   at java.lang.Thread.run(Thread.java:619)\n\nBasically, Threads with this same stack get continually created, and sit around for about half a second per chmod call.  Don't know if this is helpful or not"}, {"count": 2, "tags": [], "bug_id": 49384, "is_private": false, "text": "Chmod should just be fixed to use File.set* calls when running on JDK 6+, which would be far faster, and probably more reliable as well.", "id": 137455, "time": "2010-06-08T15:04:19Z", "creator": "jglick@apache.org", "creation_time": "2010-06-08T15:04:19Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 49384, "text": "Just marking bug relationships.", "count": 3, "id": 137456, "time": "2010-06-08T15:04:41Z", "creator": "jglick@apache.org", "creation_time": "2010-06-08T15:04:41Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 49384, "is_private": false, "text": "(In reply to comment #2)\n> Chmod should just be fixed to use File.set* calls when running on JDK 6+, which\n> would be far faster, and probably more reliable as well.\n\nbut don't provide the same functionality - you can't change permission for the group or set sticky bits.\n\nI agree that a File.set* based task as a cross-platform alterantive to chmod and attrib would be nice.", "id": 137840, "time": "2010-06-23T08:23:02Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-23T08:23:02Z", "attachment_id": null}, {"count": 5, "text": "(In reply to comment #4)\n> [java.io.File methods in JDK 6] don't provide the same functionality -\n> you can't change permission for the group or set sticky bits.\n\nHow often do people set a sticky bit from Ant? What people usually want is o-w, go-r, or a+x, all of which you can do from java.io.File.\n\nNote that JDK 7 has APIs permitting full control over file attributes:\n\nhttp://java.sun.com/javase/7/docs/api/java/nio/file/attribute/PosixFilePermissions.html", "bug_id": 49384, "attachment_id": null, "id": 137845, "time": "2010-06-23T09:32:15Z", "creator": "jglick@apache.org", "creation_time": "2010-06-23T09:32:15Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 49384, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > [java.io.File methods in JDK 6] don't provide the same functionality -\n> > you can't change permission for the group or set sticky bits.\n> \n> How often do people set a sticky bit from Ant?\n\nNo too often.\n\n> What people usually want is o-w, go-r, or a+x, all of which you can do from\n> java.io.File.\n\nI'm not sure how common different permissions for group and others would be,\nwhich I don't think you could achieve with the File API.\n\n> Note that JDK 7 has APIs permitting full control over file attributes:\n\nWhich is even further in the future.\n\nLike I said, such a task would be a nice alternative but won't be able to\nreplace the current tasks completely.", "id": 137848, "time": "2010-06-23T10:19:59Z", "creator": "bodewig@apache.org", "creation_time": "2010-06-23T10:19:59Z", "tags": [], "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 49384, "text": "So funny you should mention sticky bits.  One of the uses for me is the sticky bit.", "id": 138683, "time": "2010-07-26T17:25:12Z", "creator": "dopey@moonteeth.com", "creation_time": "2010-07-26T17:25:12Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "bodewig@apache.org", "text": "\n\n*** This bug has been marked as a duplicate of bug 54128 ***", "id": 171872, "time": "2013-12-21T19:53:56Z", "bug_id": 49384, "creation_time": "2013-12-21T19:53:56Z", "is_private": false, "attachment_id": null}]
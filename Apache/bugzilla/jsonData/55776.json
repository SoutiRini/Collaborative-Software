[{"count": 0, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171212, "creation_time": "2013-11-14T06:14:50Z", "time": "2013-11-14T06:14:50Z", "creator": "labnizdirac@126.com", "text": "I use ibatis in my project, config file path include '..', tomcat can not find the file, command line show:\nCould not find resource ../ibatis/code/sendType.xml", "is_private": false}, {"count": 1, "tags": [], "bug_id": 55776, "text": "Do you know which API call ultimately gets made? E.g. ServletContext.getResource(), etc.?", "id": 171221, "time": "2013-11-14T18:34:50Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-11-14T18:34:50Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171234, "time": "2013-11-15T04:44:07Z", "creator": "labnizdirac@126.com", "creation_time": "2013-11-15T04:44:07Z", "is_private": false, "text": "(In reply to Christopher Schultz from comment #1)\n> Do you know which API call ultimately gets made? E.g.\n> ServletContext.getResource(), etc.?\n\nI browse the source,  this problem occors at \n\"org.apache.catalina.webresources.AbstractFileResourceSet.file(String name, boolean mustExist)\""}, {"count": 3, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171235, "time": "2013-11-15T09:59:43Z", "creator": "markt@apache.org", "creation_time": "2013-11-15T09:59:43Z", "is_private": false, "text": "Again, which API is being calling and with what parameters? Without that information this bug is likely to be resolved as INVALID."}, {"text": "WebClassLoader.getResource cause this problem,This is my example in jsp:\n<% java.net.URL url = this.getClass().getClassLoader().getResource(\"/../classes/app.xml\"); System.out.println(\"url=\"+url);%>\n\nprint: url=null", "tags": [], "bug_id": 55776, "attachment_id": null, "count": 4, "id": 171236, "time": "2013-11-15T10:49:51Z", "creator": "labnizdirac@126.com", "creation_time": "2013-11-15T10:49:51Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171243, "time": "2013-11-15T14:18:51Z", "creator": "markt@apache.org", "creation_time": "2013-11-15T14:18:51Z", "is_private": false, "text": "That isn't valid since the first /../ sequence is trying to step outside the root of the class loader resources. However /foo/../app.xml also fails and that is valid so I am currently working on a fix."}, {"count": 6, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171246, "time": "2013-11-15T15:10:01Z", "creator": "markt@apache.org", "creation_time": "2013-11-15T15:10:01Z", "is_private": false, "text": "Thanks for the report. I've fixed the /foo/../app.xml case in trunk and it will be included in 8.0.0-RC6 onwards."}, {"count": 7, "tags": [], "bug_id": 55776, "text": "-0\n\nTesting behaviour of classloader of Java 1.7.0_45, such a getResource() call works when resource is in a file system, but returns null if it is in a Jar file. \n\nI think that a name containing \"/../\" or \"/./\" is not a valid resource name and you should not expect it to work. I think it is not class loader's job to normalize resource names.\n\n\nhttp://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#getResource%28java.lang.String%29", "id": 171251, "time": "2013-11-15T19:26:05Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-11-15T19:26:05Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 55776, "text": "Created attachment 31047\nTest.java. Demo for ClassLoader.getResource().", "id": 171252, "time": "2013-11-15T19:38:06Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2013-11-15T19:38:06Z", "is_private": false, "attachment_id": 31047}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Point taken with respect to the standard class loader implementation but you also have to look at how 7.0.x behaved. 7.0.x allowed /../ and /./ sequences. It also allowed stepping outside of /WEB-INF/classes (note it only allowed stepping as far as the context root and this was because it added /WEB-INF/classes to the resource path before doing a standard resources lookup).\n\nI would argue that this fix in 8.0.x is currently a step in the right direction.", "id": 171258, "time": "2013-11-16T07:45:21Z", "bug_id": 55776, "creation_time": "2013-11-16T07:45:21Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 55776, "attachment_id": null, "id": 171340, "creation_time": "2013-11-20T09:18:36Z", "time": "2013-11-20T09:18:36Z", "creator": "markt@apache.org", "text": "I'm changing this back to fixed.\n\nAccepting /../ and /./ in the path is something that previous Tomcat versions have done and - based on this bug report - at least one user is depending on it (which probably means there are more).\n\nGiven that the feature exists and has been used, I don't think we should remove it (or even provide an option to disable it) solely because the standard class loader doesn't permit it. If there is a use case for disabling it then I'd be OK with adding an option to do that but that would be best handled under a new enhancement request.", "is_private": false}]
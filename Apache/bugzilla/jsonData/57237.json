[{"count": 0, "tags": [], "bug_id": 57237, "attachment_id": 32217, "is_private": false, "id": 179191, "time": "2014-11-19T13:37:20Z", "creator": "mailparassharma@gmail.com", "creation_time": "2014-11-19T13:37:20Z", "text": "Created attachment 32217\njmeter_expression_extractor_bug\n\nfor the following response from a JDBC request 1~19~22~35~12~5~30~32~29~31~28~26~14~11~9~27~6~17~10~16~37~34~13~33~8~36~2~18~21~20~15\tnull\n\nthe regular expression extractor is skipping alternate values for the expression\n <~(.+?)~>\n\nScreenshot attached"}, {"count": 1, "attachment_id": null, "creator": "felix.schumacher@internetallee.de", "is_private": false, "id": 179194, "time": "2014-11-19T19:12:38Z", "bug_id": 57237, "creation_time": "2014-11-19T19:12:38Z", "tags": [], "text": "Bugzilla is not a support forum. Please ask your question on the user mailing list.\n\nI think you might want to use a simple \\d+ as the regex."}, {"count": 2, "tags": [], "creator": "mailparassharma@gmail.com", "text": "Like I said, every expression is skipping alternate values.\nEven this \"\\d+\" . I am not expecting help or solution , it looked to me a bug and hence reported", "id": 179199, "time": "2014-11-20T06:18:58Z", "bug_id": 57237, "creation_time": "2014-11-20T06:18:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "mailparassharma@gmail.com", "attachment_id": null, "id": 179200, "time": "2014-11-20T06:49:20Z", "bug_id": 57237, "creation_time": "2014-11-20T06:49:20Z", "is_private": false, "text": "My mistake, that is how regular expression works so its not a bug"}]
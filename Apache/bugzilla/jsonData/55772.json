[{"count": 0, "tags": [], "bug_id": 55772, "text": "Created attachment 31040\nTest case to reproduce request state (cookie) leakage\n\nThis issue is easily reproducible with the attached test case. Request state is leaked between requests due to the ADAPTER_NOTES note on the coyote request containing the catalina connector request (which holds the cookies from the first request) and never gets cleaned up in this error case (and maybe others similar to it).\n\nIt seems like it would be worthwhile to clear out the notes field from the coyote request when we recycle() it to prevent future issues like this.", "id": 171201, "time": "2013-11-13T04:45:21Z", "creator": "todd.west@jivesoftware.com", "creation_time": "2013-11-13T04:45:21Z", "is_private": false, "attachment_id": 31040}, {"count": 1, "tags": [], "bug_id": 55772, "attachment_id": null, "is_private": false, "id": 171209, "time": "2013-11-13T18:20:09Z", "creator": "seth.pellegrino@jivesoftware.com", "creation_time": "2013-11-13T18:20:09Z", "text": "From our analysis of the issue, the problem occurs because of AbstractHttp11Processor's reentrancy via the Response object. From the following stack trace:\n\njava.io.IOException: Broken pipe\n\tat sun.nio.ch.FileDispatcherImpl.write0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:94)\n\tat sun.nio.ch.IOUtil.write(IOUtil.java:65)\n\tat sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:450)\n\tat org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:123)\n\tat org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:94)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:163)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:242)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:94)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:793)\n\tat org.apache.coyote.Response.action(Response.java:174)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:359)\n\tat org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:326)\n\tat org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)\n\t...\n\t<application code>\n\t...\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)\n\tat org.apache.coyote.AbstractProtocol.AbstractConnectionHandler.process(AbstractProtocol.java:589)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1686)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\nThe key insight is that the AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023) frame near the bottom is inside the same instance as the AbstractHttp11Processor.action(AbstractHttp11Processor.java:793) frame near the top. The latter sets the instance-level error flag as a result of the broken pipe exception, causing the #process invocation to return SocketState.CLOSED. Because the request is async, the CoyoteAdapter has not cleaned up the catalina request in its finally block (the same object as referenced through ADAPTER_NOTES as Todd describes), but the SocketState.CLOSED indicates to the connection handler that the processor is ready for recycling (which does NOT recycle the catalina request) and re-use."}, {"count": 2, "attachment_id": null, "bug_id": 55772, "is_private": false, "id": 171242, "time": "2013-11-15T13:48:28Z", "creator": "markt@apache.org", "creation_time": "2013-11-15T13:48:28Z", "tags": [], "text": "Thanks for the test case and analysis. I modified it a little to incorporate it into the existing test case for AbstractHttp11Processor, to speed it up in the failure case (setting the async timeout less than the default of 30s) and to fix an NPE once the test passed.\n\nThe fix has been applied to 8.0.x for 8.0.0-RC6 onwards and 7.0.x for 7.0.48 onwards. The test case has also been added to both versions.\n\nThanks again for a very easy to fix bug report."}]
[{"count": 0, "attachment_id": null, "bug_id": 5856, "is_private": false, "id": 9642, "time": "2002-01-15T00:43:48Z", "creator": "mhaavald@online.no", "creation_time": "2002-01-15T00:43:48Z", "tags": [], "text": "Problem:\nAn application/system has several \"sub-systems\" all logging at different levels.\n\nFollowing one subsystem, or following a \"specific category\" (other than \nlocation, but theme...) is necessary.\n\nTherefore having the SocketAppender as it is is not sufficient.\nA more flexible approach is an observer pattern behaviour.\nI.e. the configuration is a setup port.\nThen viewers/listerners contact the logserver/application:port for setup.\nThe setup contains the viewers listen-port for log messages.\nThe \"logger\" then adds this viewer to an observer list and sends log messages \nto the observer list.\nIf socket closes/exception is caught: close the log servers side of the socket.\n\nIf the log server goes down having a Runtime...shutdown hook...send a \"shutting \ndown\" message to the viewer...\nThis makes it possible to write intelligent viewers/listeners which then may \neither close viewer application or try to reconnect towards the logapplications \nsetup port.\n\nIt is also possible for the log application to use the JNDI and register \nthere....to abstract the actual location of logapplication....\n\n\n/Morten"}, {"count": 1, "tags": [], "text": "\nA similar approach has been suggested on the log4j-dev. It's in the\n1.3 plan. Thanks for your input. Ceki", "is_private": false, "id": 11758, "creation_time": "2002-03-13T20:54:01Z", "time": "2002-03-13T20:54:01Z", "creator": "ceki@apache.org", "bug_id": 5856, "attachment_id": null}]
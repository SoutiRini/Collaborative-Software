[{"count": 0, "tags": [], "bug_id": 52333, "attachment_id": null, "id": 152168, "time": "2011-12-14T17:57:13Z", "creator": "sebb@apache.org", "creation_time": "2011-12-14T17:57:13Z", "is_private": false, "text": "When using System.nanoTime(), the SampleResult ctors calculate the current offset from currentTimeMillis().\n\nThis was previously done just once when the class was initialised, but this was found to cause problems because of drift - see Bug 51855.\n\nConsider using a background thread to calculate the offset, rather than calculating it for each sample - this should reduce the overhead for high sample rates. So long as the time between refreshes is kept reasonably low, drift should not be sufficient to cause an issue."}, {"count": 1, "tags": [], "bug_id": 52333, "attachment_id": null, "text": "Note: it looks like Thread.sleep() returns to the thread shortly after a clock transition (as might be expected).\n\nCalculating the nanoTime offset immediately afterwards should ensure more consistent values.\n\nWith the current implementation - which may call currentTimeMills at any point in the clock cycle - the granularity of currentTimeMillis (generally 10ms-15ms) means that the offset can vary by that amount.", "id": 152170, "time": "2011-12-14T19:55:00Z", "creator": "sebb@apache.org", "creation_time": "2011-12-14T19:55:00Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52333, "attachment_id": null, "text": "URL: http://svn.apache.org/viewvc?rev=1215361&view=rev\nLog:\nBug 52333 - Reduce overhead in calculating SampleResult#nanoTimeOffset\nUse a background thread to calculate the offset instead of doing it each sample\n\nModified:\n   jmeter/trunk/bin/jmeter.properties\n   jmeter/trunk/src/core/org/apache/jmeter/samplers/SampleResult.java\n   jmeter/trunk/test/src/org/apache/jmeter/samplers/TestSampleResult.java\n   jmeter/trunk/xdocs/changes.xml\n   jmeter/trunk/xdocs/usermanual/listeners.xml", "id": 152235, "time": "2011-12-17T00:17:01Z", "creator": "sebb@apache.org", "creation_time": "2011-12-17T00:17:01Z", "is_private": false}]
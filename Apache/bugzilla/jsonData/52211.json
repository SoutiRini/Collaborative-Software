[{"attachment_id": null, "tags": [], "bug_id": 52211, "is_private": false, "count": 0, "id": 151632, "time": "2011-11-18T20:57:49Z", "creator": "jxz164@hotmail.com", "creation_time": "2011-11-18T20:57:49Z", "text": "I am using the POI 3.8 beta 5 (from my own build on 10/06) on mainframe to read Excel files. Reading/Writing xls file is OK. I am getting the following stack trace when reading xlsx files.\n\nException in thread \"main\" org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: Package.init() : this exception should never happen, if you read this message please send a mail to the developers team. : The specified content type 'application/vnd.openxmlformats-package.core-properties+xml' is not compliant with RFC 2616: malformed content type.\n\tat org.apache.poi.openxml4j.opc.OPCPackage.init(OPCPackage.java:166)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.<init>(OPCPackage.java:141)\n\tat org.apache.poi.openxml4j.opc.ZipPackage.<init>(ZipPackage.java:82)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:228)\n\tat org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:67)\n\tat TestWorkbookFactoryCreate.main(TestWorkbookFactoryCreate.java:16)\n\nHere is the output of \"java -version\".\n\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pmz31dev-20090707 (SR10 ))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 z/OS s390-31 j9vmmz3123-20090707 (JIT enabled)\nJ9VM - 20090706_38445_bHdSMr\nJIT  - 20090623_1334_r8\nGC   - 200906_09)\nJCL  - 20090705\n\nOutput of \"uname -a\"\nOS/390 ABIZOS08 21.00 03 2818\n\nTest code\n\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.*;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n\npublic class TestWorkbookFactoryCreate {\n\n  public static void main(String[] args) throws IOException, Exception {\n    FileInputStream fileIn = null;\n\n    try\n      {\n\tfileIn = new FileInputStream(\"utf8.xlsx\");\n\tXSSFWorkbook wb = (XSSFWorkbook) WorkbookFactory.create(fileIn);\n\tSystem.out.println(\"Workbook created\");                \n      } finally {\n\tif (fileIn != null)\n\t  fileIn.close();\n      }\n  }\n    \n}"}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "Could you please attach the problematic file too?\n\nAlso, do you know how the file was generated?", "id": 151633, "time": "2011-11-18T20:59:30Z", "bug_id": 52211, "creation_time": "2011-11-18T20:59:30Z", "is_private": false, "attachment_id": null}, {"attachment_id": 27970, "tags": [], "bug_id": 52211, "is_private": false, "count": 2, "id": 151634, "time": "2011-11-18T21:13:03Z", "creator": "jxz164@hotmail.com", "creation_time": "2011-11-18T21:13:03Z", "text": "Created attachment 27970\nTest xlsx file"}, {"count": 3, "tags": [], "bug_id": 52211, "text": "Any xlsx file created by Excel 2007 has this problem. I have attached a sample file.", "id": 151635, "time": "2011-11-18T21:13:58Z", "creator": "jxz164@hotmail.com", "creation_time": "2011-11-18T21:13:58Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jxz164@hotmail.com", "is_private": false, "count": 4, "id": 151636, "time": "2011-11-18T21:20:55Z", "bug_id": 52211, "creation_time": "2011-11-18T21:20:55Z", "text": "I did more testing on this on mainframe and figured out that I have to pass the -Dfile.encoding=utf-8 option.\n\n$ java -Dfile.encoding=UTF-8 TestWorkbookFactoryCreate\nWorkbook created\n\n$ java  TestWorkbookFactoryCreate\n                               \nException in thread \"main\" org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: Package.init() : this exception should never happen, if you read this message please send a mail to the developers team. : The specified content type 'application/vnd.openxmlformats-package.core-properties+xml' is not compliant with RFC 2616: malformed content type.\n\tat org.apache.poi.openxml4j.opc.OPCPackage.init(OPCPackage.java:166)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.<init>(OPCPackage.java:141)\n\tat org.apache.poi.openxml4j.opc.ZipPackage.<init>(ZipPackage.java:82)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:228)\n\tat org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:67)\n\tat TestWorkbookFactoryCreate.main(TestWorkbookFactoryCreate.java:16)\n\nTherefore, the -Dfile.encoding=utf-8 solves my problem. The default encoding in mainframe is ebcdic, and I have to use utf-8. I sent this as a poi bug earlier because the error message said so."}, {"count": 5, "tags": [], "bug_id": 52211, "attachment_id": null, "text": "Hmm, we must have an encoding assumption in the OPC code somewhere then\n\nThe odd thing is that that error message is coming from the ContentType class, which does hard code the encoding to US-ASCII, so I'm not sure where the issue is", "id": 151637, "time": "2011-11-18T21:28:11Z", "creator": "apache@gagravarr.org", "creation_time": "2011-11-18T21:28:11Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jxz164@hotmail.com", "attachment_id": null, "id": 151706, "time": "2011-11-21T19:33:06Z", "bug_id": 52211, "creation_time": "2011-11-21T19:33:06Z", "is_private": false, "text": "I hope to get this working without passing passing the -Dfile.encoding=UTF-8 option when calling java."}, {"count": 7, "tags": [], "bug_id": 52211, "attachment_id": null, "text": "If you're able to, fire up your JVM with remote debugging enabled, and attach a remote debugger (eg eclipse) to it. Then, step through the problem code, and see if you can work out what is incorrectly encoded that's breaking.\n\n(Nothing springs to mind as wrong from looking at the source code, so it's likely something subtle)", "id": 151708, "time": "2011-11-21T21:16:56Z", "creator": "apache@gagravarr.org", "creation_time": "2011-11-21T21:16:56Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 52211, "attachment_id": null, "id": 162449, "time": "2012-09-28T08:44:33Z", "creator": "c.pagenkopp@googlemail.com", "creation_time": "2012-09-28T08:44:33Z", "is_private": false, "text": "Hello,\n\nWe are using the POI API (stable 3.8) on a system running ibm500 encoding as default encoding.\nSo we got the same error, when trying to create a Workbook using WorkbookFactory.create(ByteArrayInputStream bais).\n\nWe found that the problem lies in the method\norg.apache.poi.openxml4j.opc.internal.ContentType.ContentType(String contentType)\n\nIn line 139, the follwoing code is called:\ncontentTypeASCII = new String(contentType.getBytes(), \"US-ASCII\");\n\nThe String.getBytes() causes the system to return the bytes in default system encoding (for instance ibm500). Afterwards this should be converted using encoding US-ASCII. This cannot work.\n\nSo, we wonder, why this conversion will be done?\n\nWe deleted the line and just put following code:\ncontentTypeASCII = contentType;\n\nAfterwards it worked fine.\n\nRegards\nConstantin"}, {"count": 9, "tags": [], "bug_id": 52211, "attachment_id": null, "id": 162490, "time": "2012-10-01T13:20:52Z", "creator": "yegor@dinom.ru", "creation_time": "2012-10-01T13:20:52Z", "is_private": false, "text": "It is very likely that your hypothesis is correct and this oine of code can cause problems.\n\nThe problematic piece of code exists since POI-3.5, when OpenXml4j was contributed to Apache POI. \nI guess the intention was to ensure that the string being parsed and validated is in the ASCII encoding. \nThis \"worked\" for years but the conversion does not make sense because if the input argument contains characters above ASCII then they are converted to 0XFFFD (\"not a character\" unicode) and the subsequent validation against the patternMediaType regex fails.\n\nConsider the following examples:\n\n(a) new ContentType(\"text/\\u007E\") \n(b) new ContentType(\"text/\\u0080\") \n\nThe first case (a) works because all characters in the input string are in ASCII and the conversion does not change the input string. \nThe second case (b) fails no matter if the input argument is re-converted to US-ASCII or not. If you apply your fix (contentTypeASCII=contentType) then the regex check at line 146 fails. Current code first converts the input string to \"text/\\uFFFD\" and then the regex fails.\n\nSo I agree that this conversion is extra and can be removed. The fix is coming soon.\n\nRegards,\nYegor\n\n(In reply to comment #8)\n> Hello,\n> \n> We are using the POI API (stable 3.8) on a system running ibm500 encoding as\n> default encoding.\n> So we got the same error, when trying to create a Workbook using\n> WorkbookFactory.create(ByteArrayInputStream bais).\n> \n> We found that the problem lies in the method\n> org.apache.poi.openxml4j.opc.internal.ContentType.ContentType(String\n> contentType)\n> \n> In line 139, the follwoing code is called:\n> contentTypeASCII = new String(contentType.getBytes(), \"US-ASCII\");\n> \n> The String.getBytes() causes the system to return the bytes in default\n> system encoding (for instance ibm500). Afterwards this should be converted\n> using encoding US-ASCII. This cannot work.\n> \n> So, we wonder, why this conversion will be done?\n> \n> We deleted the line and just put following code:\n> contentTypeASCII = contentType;\n> \n> Afterwards it worked fine.\n> \n> Regards\n> Constantin"}, {"count": 10, "tags": [], "bug_id": 52211, "text": "Should be fixed in r1394001. \n\nYegor", "id": 162556, "attachment_id": null, "creator": "yegor@dinom.ru", "creation_time": "2012-10-04T11:53:19Z", "time": "2012-10-04T11:53:19Z", "is_private": false}]
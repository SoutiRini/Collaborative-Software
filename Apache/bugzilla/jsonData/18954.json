[{"count": 0, "tags": [], "bug_id": 18954, "attachment_id": null, "id": 34974, "time": "2003-04-11T15:08:45Z", "creator": "fw.wolter@siemens.com", "creation_time": "2003-04-11T15:08:45Z", "is_private": false, "text": "HSSFCell.getCellFormula() returns #NAME for formulas like\n=WENN(A1>B1;\"a1>b1\";\"A1<B1\"). \nThe same result for =WENN(ISTLEER(A1);\"a1>b1\";\"A1<B1\"). \n\nA Formula like\n=WENN(A1;\"a1>b1\";\"A1<B1\") does work."}, {"count": 1, "tags": [], "bug_id": 18954, "attachment_id": null, "id": 34979, "time": "2003-04-11T15:14:14Z", "creator": "dmui@apache.org", "creation_time": "2003-04-11T15:14:14Z", "is_private": false, "text": "how is this formula entered? reading from an excel file or using the api?\n\ndon't recognize WENN but I guess that's just i18ed for IF?\n\n"}, {"count": 2, "tags": [], "bug_id": 18954, "attachment_id": null, "text": "Yes, it is the IF-Formula. The formula is read from an Excel-File.", "id": 34980, "time": "2003-04-11T15:23:08Z", "creator": "fw.wolter@siemens.com", "creation_time": "2003-04-11T15:23:08Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 18954, "text": "can you attach the file and/or short snippet of the code you're using?\n\nthanks", "id": 34981, "time": "2003-04-11T15:24:48Z", "creator": "dmui@apache.org", "creation_time": "2003-04-11T15:24:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "fw.wolter@siemens.com", "attachment_id": null, "is_private": false, "id": 34987, "time": "2003-04-11T15:39:17Z", "bug_id": 18954, "creation_time": "2003-04-11T15:39:17Z", "text": "Hello Danny,\n\nthanks for the fast reply\n\nFrank Wolter\n\nhere is my (stripped) code:\n\n\n  public boolean parseSheet(String sheetname ) \n  {\n     m_SheetNameExcel = sheetname;\n     m_SheetNameDisplay = m_SheetNameExcel;\n     m_visibleRange = null;\n     m_cellsWithSheetReferences.clear();\n     HSSFCellStyle c_style;\n     int col_n = 0;\n     int row_n = 0;\n     HSSFRow phyRow = null;\n     HSSFSheet sheet    = m_workbook.getSheet(sheetname);\n     HSSFFont cellfont  = m_workbook.getFontAt((short)0);\n\n     logger.debug( \"ENTER parseSheet(sheetname=\" + sheetname + \")\" );\n\n\n     int rowNum = sheet.getLastRowNum();\n\n     Iterator rows = sheet.rowIterator();\n     HSSFRow row;\n     while( rows.hasNext()) \n     {\n            row = (HSSFRow) rows.next();\n            row_n = row.getRowNum();\n\n            // Iterate over each cell in the row and print out the cell's \ncontent\n            Iterator cells = row.cellIterator();\n\n            short fontindex;\n            short c_bcolor;\n            short c_fcolor;\n            HSSFCell cell;\n\n            while( cells.hasNext()) \n            {\n                cell = (HSSFCell) cells.next();\n                col_n = cell.getCellNum();\n                logger.info(\"Working on cell(row=\"+ (row_n) + \", col=\" + \n(col_n) + \")\");\n\n                try\n                {\n                    c_style = cell.getCellStyle();\n\n                    switch ( cell.getCellType() ) {\n                        case HSSFCell.CELL_TYPE_NUMERIC:\n\n                            break;\n                        case HSSFCell.CELL_TYPE_STRING:\n                            break;\n                        case HSSFCell.CELL_TYPE_BLANK:\n                            break;\n                        case HSSFCell.CELL_TYPE_FORMULA:\n// HERE THE PROBLEM OCCURS:\n                            logger.debug(\"Formula: \" + cell.getCellFormula());\n                            break;\n                        default:\n                            logger.error( \"unsuported cell type in sheet'\" + \nsheetname + \"', row=\" +  row_n + \", col=\" +  col_n);\n\n                            break;\n                    }\n                }\n                catch ( Exception e )\n                {\n                    logger.error(\"Exception for cell(\"+ row_n + \", \" + col_n \n+ \") Exception:\" + e.toString());\n                    e.printStackTrace();\n\n                } /* end catch() */  \n\n            } //end while\n\n        } //end first while"}, {"count": 5, "tags": [], "creator": "dmui@apache.org", "attachment_id": null, "is_private": false, "id": 34990, "time": "2003-04-11T15:56:36Z", "bug_id": 18954, "creation_time": "2003-04-11T15:56:36Z", "text": "can you attach the file you're reading as well?"}, {"count": 6, "tags": [], "bug_id": 18954, "attachment_id": 5805, "text": "Created attachment 5805\noffending excel file", "id": 34995, "time": "2003-04-11T16:13:21Z", "creator": "dmui@apache.org", "creation_time": "2003-04-11T16:13:21Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 18954, "text": "We had some formula parser patches and the result of reading/writing your excel\nfiles keeps the values intact.  Please verify.", "id": 36878, "time": "2003-05-08T00:19:47Z", "creator": "dmui@apache.org", "creation_time": "2003-05-08T00:19:47Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "fw.wolter@siemens.com", "text": "Thanks for the correction. Everything works fine with version 2.0 pre1.", "id": 38256, "time": "2003-06-03T13:26:00Z", "bug_id": 18954, "creation_time": "2003-06-03T13:26:00Z", "is_private": false, "attachment_id": null}]
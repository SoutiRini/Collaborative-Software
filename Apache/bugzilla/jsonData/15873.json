[{"count": 0, "tags": [], "bug_id": 15873, "attachment_id": null, "text": "When I try and retrieve the value of a property of my own custom bean, and my \nbean throws an exception, the exception message is returned and displayed but \nthe stack history is lost.\n\n\n\n\nI can see the code in org.apache.taglibs.standard.lang.jstl.Evaluator, where an \nELException is caught and a JspException is thrown, and the rootCause exception \nis available, and the message is returned, but the stack trace is never passed \nup the chain.\n\n\n\n\nI wasn't sure how to fix this properly, so I patched Evaluator to give me the \nstack history as follows:\n\n\n\n\n  /**\n\n\n   *\n\n\n   * Evaluates the expression at request time\n\n\n   **/\n\n\n  public Object evaluate (String pAttributeName,\n\n\n\t\t\t  String pAttributeValue,\n\n\n\t\t\t  Class pExpectedType,\n\n\n\t\t\t  Tag pTag,\n\n\n\t\t\t  PageContext pPageContext,\n\n\n\t\t\t  Map functions,\n\n\n\t\t\t  String defaultPrefix)\n\n\n    throws JspException\n\n\n  {\n\n\n    try {\n\n\n      return sEvaluator.evaluate\n\n\n\t(pAttributeValue,\n\n\n\t pPageContext,\n\n\n\t pExpectedType,\n\n\n\t functions,\n\n\n\t defaultPrefix);\n\n\n    }\n\n\n    catch (ELException exc) {\n\n\n\n\n    StringWriter sw = new StringWriter() ; // SRM\n\n\n    PrintWriter pw = new PrintWriter(sw) ; // SRM\n\n\n    exc.getRootCause().printStackTrace(pw); // SRM\n\n\n    String fullStackTrace = sw.toString() ; // SRM\n\n\n\n\n      throw new JspException\n\n\n\t(MessageFormat.format\n\n\n\t (Constants.ATTRIBUTE_EVALUATION_EXCEPTION,\n\n\n\t  new Object [] {\n\n\n\t    \"\" + pAttributeName,\n\n\n\t    \"\" + pAttributeValue,\n\n\n\t    exc.getMessage(),\n\n\n\t    //exc.getRootCause() // SRM\n\n\n        fullStackTrace // SRM\n\n\n\t  }));\n\n\n    }\n\n\n  }\n\n\n\n\nThere's probably a better way to do it, perhaps?\n\n\n\n\nAlso, here's a simple webpage fragment that will demonstrate the problem:\n\n\n\n\n<%@ page contentType=\"text/html\" %>\n\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>\n\n\n<%!\n\n\n  public class MyBean {\n\n\n    public String throwExceptionInHere() {\n\n\n      if (true) {\n\n\n        throw new RuntimeException(\"Hey!\");\n\n\n      }\n\n\n\t  return \"\";\n\n\n    }\n\n\n    public String getThrowException() {\n\n\n      String x = throwExceptionInHere();\n\n\n      return \"\";\n\n\n    }\n\n\n  }\n\n\n%>\n\n\n<%\n\n\n  pageContext.setAttribute(\"myBean\", new MyBean());\n\n\n%>\n\n\n<c:set var=\"foo\" value=\"${myBean.throwException}\" />\n\n\n<c:out value=\"${foo}\" />", "id": 28989, "time": "2003-01-07T22:53:51Z", "creator": "steve@clearfield.com", "creation_time": "2003-01-07T22:53:51Z", "is_private": false}, {"count": 1, "tags": [], "creator": "pierre.delisle@sun.com", "text": "Agree that it is important to expose the original exception thrown by the\nweb application. However, we've opted for a different\nsolution than the one proposed in this bug report.\n\nThe stack trace does not belong to the textual message of the exception.\nHowever, the stack trace information should be made available.\nThe code in Evaluator has therefore been modified so it adds the original \nexception that occurred as the rootCause of the JspException. This \ntherefore makes the original exception accessible to the container as \na Throwable object, not just as text message.\n\nUnless the calling code is instrumented to catch exceptions, it then becomes\nthe responsibility of the container to decide what should be displayed.\nUnfortunately, Tomcat does not currently follow through more than 1 level\nof nested root exceptions (it only displays a root cause exception defined\nfor ServletException). It would seem desirable for Tomcat to display rootCause\nexceptions nested at deeper levels.\nAn RFE (see http://nagoya.apache.org/bugzilla/show_bug.cgi?id=15941) \nhas been filed to that effect.", "id": 29099, "time": "2003-01-10T02:04:03Z", "bug_id": 15873, "creation_time": "2003-01-10T02:04:03Z", "is_private": false, "attachment_id": null}]
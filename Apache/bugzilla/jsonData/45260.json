[{"count": 0, "tags": [], "creator": "w.schindling@netconomy.net", "text": "Hi!\n\nWe're having a rather big problem at my company with a moderately large Excel report (6 sheets, 15 columns, maximum 102 rows) using POI.\n\nWe do a lot of formatting using about 28 different font styles (arial, 10pt, 12pt, colored, bold, italic ... - half of the fonts are strikeout as we use it to mark old entries). We have up to 6 different fonts in one cell.\n\nNow, usually the POI-generated Excel-file is readable without any problem, but SOMETIMES MS Excel can't open it saying that there's \"unreadable content\". Our customer needs this 100% working all of the time and I can't figure out the exact reason. It looks like it has something to do with the applyFont() method. Because of this I've built in a switch to leave out text formatting. While the formatted file sometimes can be read, the unformatted ALWAYS can be.\n\nOne bugfix that I hoped was to be the solution was to add several blank spaces at the end of each cell String (I thought that corrupt font indices were the reason for the error). This worked for some time but now turned out to not always work.\n\n I've also tried to make BIFF-dumps of the files but can't open the resulting files with the viewers I've tried out (BIFF-Workbench etc.) ... ?\n\nI hope someone can help me with this, I've been goofing around for ages with this and have become pretty frustrated.\n\nI don't want to add the generated files as an attachment (this is pretty sensitive data) but could mail it to someone who can help me. URGENT HELP is needed here!! :)\n\nRegards, Werner\n\n(btw text formatting on an assembled HSSFRichTextString is quite annoying to do as you can't append to it ... therefore you have to remember the indices for applying the fonts and do that after the result string has been pieced together)\n\nPS opening the file with Open Office always works and saving it with OO makes the file readable with MS Office (I wish I could convince our customer to use OO ...)", "id": 117917, "time": "2008-06-23T08:36:49Z", "bug_id": 45260, "creation_time": "2008-06-23T08:36:49Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "(In reply to comment #0)\n> PS opening the file with Open Office always works and saving it with OO makes\n> the file readable with MS Office (I wish I could convince our customer to use\n> OO ...)\n\nOne thing to try then is run a BiffViewer on the poi output file, and the oo output file. See if you can spot what open office has done differently (and presumably correctly) with the formatting stuff\n\nAlso, can you generate a problem file with dummy data in? Without a test file to work against for unit tests etc, I can't see anyone being able to help \n\n", "id": 117920, "time": "2008-06-23T08:45:25Z", "bug_id": 45260, "creation_time": "2008-06-23T08:45:25Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "w.schindling@netconomy.net", "is_private": false, "text": "(In reply to comment #1)\n\nHi!\n\nThanks for the quick reply. :)\n\n> One thing to try then is run a BiffViewer on the poi output file, and the oo\n> output file. See if you can spot what open office has done differently (and\n> presumably correctly) with the formatting stuff\n\nThe POI-generated file has only 20 font records in it (some created in the code seem to be missing) while the open office file has 32.\n\nAlso, the POI file has 2 format records while the open office one has 8.\n\n\n> Also, can you generate a problem file with dummy data in? Without a test file\n> to work against for unit tests etc, I can't see anyone being able to help \n> \n\nI'll look into this in a moment.", "id": 117928, "time": "2008-06-24T01:31:51Z", "bug_id": 45260, "creation_time": "2008-06-24T01:31:51Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 45260, "attachment_id": null, "text": "I'm adding two BIFF-Dumps, one of the corrupted POI-generated file and one of the same file resaved with Open Office 2.2.\n\ncorrupt POI-generated file dump:\nhttp://oradb02.local.netconomy.net/doris_andritz_mirror/temp/POIGeneratedFile.xls.BD5\n\nworking open office file dump:\nhttp://oradb02.local.netconomy.net/doris_andritz_mirror/temp/OpenOfficeSavedFile.xls.BD5\n\nI made both files using BIFF-Workbench.", "id": 117929, "time": "2008-06-24T02:03:23Z", "creator": "w.schindling@netconomy.net", "creation_time": "2008-06-24T02:03:23Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 45260, "text": "Ok, here comes a corrupt excel file (though not the one from the dump I've posted before) with masked data:\n\nhttp://oradb02.local.netconomy.net/doris_andritz_mirror/temp/corruptPOIfile.xls", "id": 117931, "time": "2008-06-24T02:30:45Z", "creator": "w.schindling@netconomy.net", "creation_time": "2008-06-24T02:30:45Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "w.schindling@netconomy.net", "is_private": false, "text": "Created attachment 22170\nMy code for initialising fonts and styles", "id": 117958, "time": "2008-06-25T00:40:48Z", "bug_id": 45260, "creation_time": "2008-06-25T00:40:48Z", "attachment_id": 22170}, {"count": 6, "tags": [], "creator": "w.schindling@netconomy.net", "attachment_id": null, "id": 117959, "time": "2008-06-25T00:42:18Z", "bug_id": 45260, "creation_time": "2008-06-25T00:42:18Z", "is_private": false, "text": "Nick, or someone else, do you have an idea why some of the fonts are missing in the corrupted file?\n\nMaybe there's something wrong in how i create the fonts and styles (see attachment above)."}, {"count": 7, "tags": [], "bug_id": 45260, "is_private": false, "text": "The font creation code looks fine, though being only a code snippet I can't say anything else\n\nWith such large files, finding the cause probably won't be quick\n\nI take it that if you apply the same fonts to a smaller file, it all works fine? Have you noticed any particular file complexity point where the problem manifests itself? Can you produce a file that works just fine, but adding another few rows or another sheet causes it to break?\n\n(The more information you can supply on this, especially things like two very similar files where one works and one doesn't the better. It's much easier, and hence more likely, to fix a problem of the type \"fonts not correctly written once 10 ???? Records present\" than \"fonts sometimes fail on my really large file\")", "id": 118013, "time": "2008-06-26T08:34:47Z", "creator": "apache@gagravarr.org", "creation_time": "2008-06-26T08:34:47Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "skyfree@comcast.net", "is_private": false, "text": "I ran into the same problem, and determined that it was only happening on files larger than 5MB, but sometimes large files of over 7MB worked fine and I couldn't narrow it down further.  Depending on the data set, it either happened or did not, but once it did it was 100% reproducible.  \n\nReducing the number of applyFont calls would cure the problem in the offending sheets.  \n\nIt only seems to happen when you mix fonts within a single RichText object. \n\nLastly, mixing fonts within a single RTS seems to bloat the XLS file incredibly.  If I don't apply the fonts to the single column that has the mixed fonts, the XLS reduces from 7.8MB to 1.5MB.", "id": 121042, "time": "2008-09-27T23:42:05Z", "bug_id": 45260, "creation_time": "2008-09-27T23:42:05Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 45260, "attachment_id": null, "is_private": false, "id": 125177, "time": "2009-02-26T00:43:44Z", "creator": "yegor@dinom.ru", "creation_time": "2009-02-26T00:43:44Z", "text": "Please try the latest 3.5-beta5. \n\nThere was a bug in how applyFont handled overlapping regions and regions with formatting applied twice. \n\nThe fix was submitted in Bug 40520 and applied in r738908\n\nYegor"}, {"count": 10, "tags": [], "creator": "w.schindling@netconomy.net", "text": "Great!\n\nHowever, with Beta3.5 there's only 4 or 5 fonts im my Excel output file now instead of 30. Is the formatting run cancelled as soon as there's a problem with overlapping regions or something like that?\n\nI need to switch back to Beta3.3.", "id": 125178, "time": "2009-02-26T02:12:26Z", "bug_id": 45260, "creation_time": "2009-02-26T02:12:26Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 45260, "attachment_id": null, "is_private": false, "id": 125181, "time": "2009-02-26T04:20:52Z", "creator": "yegor@dinom.ru", "creation_time": "2009-02-26T04:20:52Z", "text": "(In reply to comment #10)\n> Great!\n> \n> However, with Beta3.5 there's only 4 or 5 fonts im my Excel output file now\n> instead of 30. Is the formatting run cancelled as soon as there's a problem\n> with overlapping regions or something like that?\n> \n> I need to switch back to Beta3.3.\n\nSounds like a bug. \n\nIf I had it right, 3.5-beta3 and earlier versions produce files that can't  be opened by Excel. After read-write using OpenOffice the file becomes readable. \n\nWith 3.5-beta5 the output can be read by Excel, but some fonts are missing. \n\nCan you upload a file with a dummy data generated by 3.5-beta5? Ideally, it would be the same file as you posted previously. \n\nYegor"}, {"count": 12, "tags": [], "creator": "w.schindling@netconomy.net", "text": "Created attachment 23312\nDifferent files generated with beta3 and beta5\n\nOf course I can.\nSince I found out the generated report is open to public anyway, here are two files, generated with beta 3 (has all fonts) and beta 5 (has only some of the fonts).", "id": 125182, "time": "2009-02-26T04:31:18Z", "bug_id": 45260, "creation_time": "2009-02-26T04:31:18Z", "is_private": false, "attachment_id": 23312}, {"count": 13, "tags": [], "bug_id": 45260, "is_private": false, "text": "Is there anything special in the way you create / set rich text strings? Can you post the code you used to generated the attached files? \n\nCompare two code snippets:\n\n        HSSFRichTextString str1 = new HSSFRichTextString(\"Andritz AG, Graz Short Name: AAG\");\n        str1.applyFont(0, 16, FONT_CELL_HEADER_BLUE.getIndex());\n        str1.applyFont(17, 29, FONT_ITALIC.getIndex());\n        str1.applyFont(29, 32, FONT.getIndex());\n        cell.setCellValue(str1);\n\n\n        HSSFRichTextString str2 = new HSSFRichTextString(\"Andritz AG, Graz Short Name: AAG\");\n        cell2.setCellValue(str2);\n        str2.applyFont(0, 16, FONT_CELL_HEADER_BLUE.getIndex());\n        str2.applyFont(17, 29, FONT_ITALIC.getIndex());\n        str2.applyFont(29, 32, FONT.getIndex());\n\nThey are not equivalent. The second one is incorrect and can produce wrong results. Once a HSSFRichTextString  is assigned, it is supposed to be immutable. I would say in the latter case the code should throw IllegalStateException. We don't do that only because of backwards compatibility. \n\nOne of the problems with beta5fileMissingFonts.xls is that the internal cache of strings is incorrect. There are duplicate entries and as result, beta5fileMissingFonts.xls is 504 KB while beta3fileAllFonts.xls is just 331 KB. \nInternally, Excel stores all strings in a shared string table which is shared across workbook. Text cells just contain indexes into the string table as the value of a cell, instead of the full string. If the string cache is broken, it is very likely to be the reason why some fonts are missing. \n\nRegards,\nYegor", "id": 125213, "time": "2009-02-27T06:25:13Z", "creator": "yegor@dinom.ru", "creation_time": "2009-02-27T06:25:13Z", "attachment_id": null}, {"count": 14, "tags": [], "creator": "w.schindling@netconomy.net", "attachment_id": null, "id": 125239, "time": "2009-03-02T01:03:59Z", "bug_id": 45260, "creation_time": "2009-03-02T01:03:59Z", "is_private": false, "text": "(In reply to comment #13)\n> Is there anything special in the way you create / set rich text strings? Can\n> you post the code you used to generated the attached files? \n> \n> Compare two code snippets:\n> \n>         HSSFRichTextString str1 = new HSSFRichTextString(\"Andritz AG, Graz\n> Short Name: AAG\");\n>         str1.applyFont(0, 16, FONT_CELL_HEADER_BLUE.getIndex());\n>         str1.applyFont(17, 29, FONT_ITALIC.getIndex());\n>         str1.applyFont(29, 32, FONT.getIndex());\n>         cell.setCellValue(str1);\n> \n> \n>         HSSFRichTextString str2 = new HSSFRichTextString(\"Andritz AG, Graz\n> Short Name: AAG\");\n>         cell2.setCellValue(str2);\n>         str2.applyFont(0, 16, FONT_CELL_HEADER_BLUE.getIndex());\n>         str2.applyFont(17, 29, FONT_ITALIC.getIndex());\n>         str2.applyFont(29, 32, FONT.getIndex());\n> \n> They are not equivalent. The second one is incorrect and can produce wrong\n> results. Once a HSSFRichTextString  is assigned, it is supposed to be\n> immutable. I would say in the latter case the code should throw\n> IllegalStateException. We don't do that only because of backwards\n> compatibility. \n> \n> One of the problems with beta5fileMissingFonts.xls is that the internal cache\n> of strings is incorrect. There are duplicate entries and as result,\n> beta5fileMissingFonts.xls is 504 KB while beta3fileAllFonts.xls is just 331 KB. \n> Internally, Excel stores all strings in a shared string table which is shared\n> across workbook. Text cells just contain indexes into the string table as the\n> value of a cell, instead of the full string. If the string cache is broken, it\n> is very likely to be the reason why some fonts are missing. \n> \n> Regards,\n> Yegor\n\nHi Yegor,\n\nthanks for taking the time on this!\nIn my code setCellValue(text) is called after all the fonts have been applied. The biggest problem for me is that you just can't append to a HSSFRichTextString. I have to run 2 identical loops, one for piecing the String together and then another one to apply the fonts to the finished HSSFRichTextString.\nHere's the code ;) ... (I've tried to remove unimportant lines)\n\n\nStringBuffer buffer = new StringBuffer();\n\t\t\n\t\tfor (POICellContent content : this.content){\n\t\t\t\n\t\t\t\n\t\t\tfor (int i = 0; i < content.indent; i++){\n\t\t\t\t// insert leading whitespaces\n\t\t\t\tbuffer.append(\" \");\n\t\t\t}\n\t\t\t// insert content\n\t\t\tbuffer.append(content.toString());\n\t\t\t\n\t\t\tif (this.companyReport.showHistory && content.getInterval() != null){\n\t\t\t\tString dateString = companyReport.createDateString(content.getInterval());\n\t\t\t\tif (!\"\".equals(dateString)){\n\t\t\t\t\tint dateLength = dateString.length();\n\t\t\t\t\tint textLength = 0;\n\t\t\t\t\tif (buffer.indexOf(\"\\n\") != - 1){\n\t\t\t\t\t\ttextLength = (buffer.length() - 1) - buffer.lastIndexOf(\"\\n\");\n\t\t\t\t\t} else textLength = buffer.length();\n\t\t\t\t\t\n\t\t\t\t\t// factor: variable to determine, whether the date string fits in the same line\n\t\t\t\t\t// or a new line is needed\n\t\t\t\t\tdouble fontHeight = content.getFont().getFontHeightInPoints();\n\t\t\t\t\tif (fontHeight == 9) fontHeight = SMALL_FONT_MAGNIFICATION;\n\t\t\t\t\tdouble widthFactor = CompanyReportXlsGenerator.LINE_BREAK_FACTOR * fontHeight;\n\t\t\t\t\tdouble approxColumnWidth = column.getWidth() / widthFactor;\n\t\t\t\t\tboolean makeNewLine = content.dateWrap && textLength < approxColumnWidth \n\t\t\t\t\t\t\t&& textLength + dateLength + 1 > approxColumnWidth;\n\n\n\t\t\t\t\tif (makeNewLine){\n\t\t\t\t\t\tbuffer.append(CompanyReportXlsGenerator.NEW_LINE);\n\t\t\t\t\t\tif (content.dateIndent > 0){\n\t\t\t\t\t\t\tfor (int i = 0; i < content.dateIndent; i++){\n\t\t\t\t\t\t\t\tdateString = \" \" + dateString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (content.indent > 0){\n\t\t\t\t\t\t\tfor (int i = 0; i < content.indent; i++){\n\t\t\t\t\t\t\t\tdateString = \" \" + dateString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.append(dateString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer.append(\" \" + dateString);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tHSSFRichTextString resultString = new HSSFRichTextString(buffer.toString());\n\t\t// build the cell String again to apply fonts\n\t\tbuffer = new StringBuffer();\n\t\t\n\t\tint end = 0;\n\t\tint start = 0;\n\t\tfor (POICellContent content : this.content){\n\t\t\t\n\t\t\tstart = end;\n\t\t\tend = start + content.toString().length();\n\t\t\tfor (int i = 0; i < content.indent; i++) {\n\t\t\t\t// insert leading whitespaces\n\t\t\t\tbuffer.append(\" \");\n\t\t\t}\n\t\t\tend += content.indent;\n\t\t\t\n\t\t\t// insert content\n\t\t\tbuffer.append(content.toString());\n\t\t\tHSSFFont font = content.getFont();\n\t\t\tif (!font.getStrikeout() && row.getEntry().isStrikeOut() && content.strikeOutEnabled){\n\t\t\t\t// use strikeOut Font\n\t\t\t\tfont = companyReport.getStrikeOutFont(content.getFont());\n\t\t\t}\n\t\t\tHSSFFont indentFont = companyReport.getNoStrikeOutFont(font);\n\t\t\tif ((companyReport.useFormatting || row.getEntry().isStrikeOut()) && content.indent > 0){\t\t\t\n\t\t\t\tresultString.applyFont(start, start + content.indent, indentFont);\n\t\t\t\tresultString.applyFont(start + content.indent, end, font);\n\t\t\t} else if (companyReport.useFormatting || row.getEntry().isStrikeOut()){\n\t\t\t\tresultString.applyFont(start, end, font);\n\t\t\t}\n\t\t\tif (this.companyReport.showHistory && content.getInterval() != null){\n\t\t\t\tString dateString = companyReport.createDateString(content.getInterval());\n\t\t\t\tif (!\"\".equals(dateString)){\n\t\t\t\t\tint dateLength = dateString.length();\t\t\t\t\t\t\t\t\n\t\t\t\t\tif (dateLength > 0){\n\t\t\t\t\t\tstart = end;\n\t\t\t\t\t\tend = end + dateLength;\n\t\t\t\t\t\t// + 1 because of whitespace/new line\n\t\t\t\t\t\tend++;\n\t\n\t\t\t\t\t\tint textLength =  buffer.length();\n\t\t\t\t\t\tif (buffer.indexOf(\"\\n\") != - 1){\n\t\t\t\t\t\t\ttextLength = (buffer.length() - 1) - buffer.lastIndexOf(\"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (content.dateIndent > 0){\n\t\t\t\t\t\t\t\tfor (int i = 0; i < content.dateIndent; i++){\n\t\t\t\t\t\t\t\t\tdateString = \" \" + dateString;\n\t\t\t\t\t\t\t\t\tend++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (content.indent > 0){\n\t\t\t\t\t\t\t\tfor (int i = 0; i < content.indent; i++){\n\t\t\t\t\t\t\t\t\tdateString = \" \" + dateString;\n\t\t\t\t\t\t\t\t\tend++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer.append(dateString);\n\t\t\t\t\t\t\n\t\t\t\t\t\tHSSFFont dateFont = this.companyReport.FONT_DATE;\n\t\t\t\t\t\tif (font.getStrikeout() || row.getEntry().isStrikeOut()) {\n\t\t\t\t\t\t\tdateFont = this.companyReport.FONT_DATE_STRIKE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (companyReport.useFormatting || row.getEntry().isStrikeOut()){\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (makeNewLine && content.dateIndent > 0){\n\t\t\t\t\t\t\t\t\tresultString.applyFont(start, start + content.dateIndent, \n\t\t\t\t\t\t\t\t\t\t\tcompanyReport.FONT_DATE);\n\t\t\t\t\t\t\t\t\tresultString.applyFont(start + content.dateIndent, end, dateFont);\t\n\t\t\t\t\t\t\t\t} else if (makeNewLine && content.indent > 0){\n\t\t\t\t\t\t\t\t\tresultString.applyFont(start, start + content.indent, \n\t\t\t\t\t\t\t\t\t\t\tcompanyReport.FONT_DATE);\n\t\t\t\t\t\t\t\t\tresultString.applyFont(start + content.indent, end, dateFont);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresultString.applyFont(start, end, dateFont);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (IllegalArgumentException e){\n\t\t\t\t\t\t\t\tlogger.error(\"Company Report error: font indices messed up: \" + e.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn resultString;"}, {"count": 15, "tags": [], "bug_id": 45260, "attachment_id": null, "text": "Potentially related to bug 48995: Unreadable content in workbook when using applyFont on RichTextString in XSSFWorkbok.", "id": 186307, "time": "2015-11-07T18:11:14Z", "creator": "onealj@apache.org", "creation_time": "2015-11-07T18:11:14Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 42219, "attachment_id": null, "id": 102231, "time": "2007-04-24T07:09:23Z", "creator": "m101@io.com", "creation_time": "2007-04-24T07:09:23Z", "is_private": false, "text": "In the (apparently) new org.apache.tools.ant.types.resources.Union class, and in\nthe venerable org.apache.tools.ant.DirectoryScanner class, Vectors or ArrayList\nobjects are used to accumulate unique file names.  The resultant use of the\n\"contains\" or \"indexOf\" methods on those objects consumes a tremendous amount of\nCPU time when the lists get long. The primary offender is the code in the new\nUnion class, specifically in the \"getCollection\" implementation.  The code in\nDirectoryScanner is similar but (in my experience) causes less dramatic problems.\n\nI'll attach a test build.xml file.\n\nThe solution is simple: since Java 1.4, java.util.LinkedHashSet has been\navailable to combine the lookup (\"contains\") performance of a HashSet coupled\nwith the predictable ordering of ArrayList or Vector.  In the Union class, the\ncode change necessary is to replace the ArrayList with a LinkedHashSet. In\nDirectoryScanner, all the Vector sets can be similarly replaced, though a few\ncleanup code changes are necessary (invisible outside the class).\n\nIn my real-life build, I have an \"install\" phase that involves at one point\ncopying over 12,000 .class files into an application directory. That was taking\nabout 45 seconds of solid 100% CPU-burning time (without actually doing any\ncopying; it was a \"null build\" situation where a build had just been completed),\nbut after hacking in my own fix to Union.java the build runs in about 15 seconds\n(directly comparable to 1.6.5).  By applying the fixes to DirectoryScanner as\nwell, the \"null build\" time drops to 10 or 11 seconds."}, {"count": 1, "tags": [], "bug_id": 42219, "attachment_id": 20031, "id": 102232, "time": "2007-04-24T07:12:16Z", "creator": "m101@io.com", "creation_time": "2007-04-24T07:12:16Z", "is_private": false, "text": "Created attachment 20031\nExample build.xml\n\nI used the attached build.xml by dropping it into a directory and then running\nit (on my Linux workstation) with:\n\nant -Dinput=/usr/share -Doutput=/tmp/slow slow\n\nThe output directory has to be created first.  Make sure you've got disk space,\nalthough the big CPU burn happens before any actual copying starts."}, {"count": 2, "tags": [], "bug_id": 42219, "text": "With Java 1.4, we have somewhat of a problem.  It looks as though future Ant releases along the 1.7.x \nbranch will support Java 1.3 .  So until 1.8 (when we anticipate dropping Java 1.3 support), we would have \nto provide our own class here.  It might be easiest to steal ListOrderedSet from commons-collections and \nmake it package-private or an inner class until we can assume Java >= 1.4 and depend on LinkedHashSet.  \nJust a note; don't worry about accounting for all this in your patches.  :)\n\nThanks,\nMatt", "id": 102241, "time": "2007-04-24T08:07:04Z", "creator": "mbenson@apache.org", "creation_time": "2007-04-24T08:07:04Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42219, "is_private": false, "text": "(In reply to comment #2)\n> With Java 1.4, we have somewhat of a problem.  It looks as though future Ant releases along the \n1.7.x \n> branch will support Java 1.3 .  So until 1.8 (when we anticipate dropping Java 1.3 support), we would \nhave \n> to provide our own class here.  It might be easiest to steal ListOrderedSet from commons-collections \nand \n> make it package-private or an inner class until we can assume Java >= 1.4 and depend on \nLinkedHashSet.  \n> Just a note; don't worry about accounting for all this in your patches.  :)\n> \n\nOh, and since your patch was only a buildfile (I forgot) don't misread that I think the suggested change \nis complex enough to warrant your submitting Java patches either.  :)\n\n> Thanks,\n> Matt\n\n", "id": 102242, "time": "2007-04-24T08:08:03Z", "creator": "mbenson@apache.org", "creation_time": "2007-04-24T08:08:03Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "m101@io.com", "attachment_id": null, "id": 102251, "time": "2007-04-24T08:58:46Z", "bug_id": 42219, "creation_time": "2007-04-24T08:58:46Z", "is_private": false, "text": "Alternatively, for the Union class the code could keep a plain HashSet in\nparallel to the ArrayList.  In DirectoryScanner, I can't see that anything\nrelies on the ordering properties so plain HashSets would probably work; even\nTreeSet since I think it sometimes wants the lists sorted anyway.\n"}, {"count": 5, "text": "We could provide alternative implementations for different Java versions and\nmake ANT launcher to automatically generate CLASSPATH depending on the current\nversion. For example, it could put ant-jdk1.4.jar in front of ant.jar if\nconditions are right.\n\nMy interest is primarily file permissions in Java 6.", "creator": "alexeys@inventigo.com", "attachment_id": null, "id": 102254, "time": "2007-04-24T09:53:46Z", "bug_id": 42219, "creation_time": "2007-04-24T09:53:46Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 42219, "attachment_id": null, "id": 102255, "time": "2007-04-24T10:09:31Z", "creator": "peterreilly@apache.org", "creation_time": "2007-04-24T10:09:31Z", "is_private": false, "text": "#1 \nThanks mike for the build.xml, it would be nicer\nto be completel self contained - perhaps a\nbash/python script to create a big directory, and the\nbuild.xml to use this (see:\nhttp://svn.apache.org/viewvc/ant/core/trunk/src/etc/performance/build.xml?revision=448449&view=markup\nfor an example of a selcontained test.\n\n#5\nI do not think that we should do this (provide a pre-jdk1.4 jar) for\nthis problem.\n\n"}, {"count": 7, "tags": [], "creator": "bodewig@apache.org", "text": "DirectoryScanner is pretty much bound to Vector in several protected attributes so we can't change too much.  Most other cases should have been replaced by now (findFile and isSymlink could be replaced but I'm not convinced we'd win much).\n\nUnion is addressed by svn revision 581394 which is part of Ant 1.7.1.\n", "id": 120682, "time": "2008-09-16T06:33:14Z", "bug_id": 42219, "creation_time": "2008-09-16T06:33:14Z", "is_private": false, "attachment_id": null}]
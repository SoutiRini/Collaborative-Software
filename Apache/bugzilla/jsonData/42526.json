[{"count": 0, "tags": [], "bug_id": 42526, "attachment_id": null, "text": "iconv supports the explicit Big-Endian and explicit Little-Endian encodings of \nUTF-16.  I would imagine that the default utf-16 module in apr-iconv can tackle \nboth, so it would be great if requests for an explicit endian-ness could be \nrequested from apr-iconv", "id": 103722, "time": "2007-05-27T00:38:30Z", "creator": "margol@beamartyr.net", "creation_time": "2007-05-27T00:38:30Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42526, "attachment_id": 20277, "text": "Created attachment 20277\nProposed fix for bug 42526", "id": 103724, "time": "2007-05-27T00:46:08Z", "creator": "margol@beamartyr.net", "creation_time": "2007-05-27T00:46:08Z", "is_private": false}, {"count": 2, "tags": [], "text": "As I point out on list - simply aliasing these is invalid.\n\nIf we call for -be variants on a small endian platform, the byte order of the\nunicode words must be transposed.\n\nIf we call for -le variants on a large endian platform, the byte order of the\nunicode words must be transposed.\n\nI presume your proposed fix does not do this?", "attachment_id": null, "bug_id": 42526, "id": 103831, "time": "2007-05-30T12:38:55Z", "creator": "wrowe@apache.org", "creation_time": "2007-05-30T12:38:55Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 42526, "attachment_id": null, "text": "Paraphrasing my reply from dev@apr, I (naively) assumed that the lack of \nseperate BE and LE modules, that the existing utf-16 module could somehow \nhandle both (otherwise how could we handle, for example, a BE client sending \nUTF-16 to an LE server).  Unfortunately, the implementation doesn't seem to do \nthat, and just assumes an HSB encoding unless a BOM says otherwise.", "id": 103836, "time": "2007-05-30T13:08:56Z", "creator": "margol@beamartyr.net", "creation_time": "2007-05-30T13:08:56Z", "is_private": false}]
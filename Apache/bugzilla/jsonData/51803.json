[{"count": 0, "tags": [], "bug_id": 51803, "attachment_id": 27490, "id": 149189, "time": "2011-09-13T15:01:50Z", "creator": "lucene@mikemccandless.com", "creation_time": "2011-09-13T15:01:50Z", "is_private": false, "text": "Created attachment 27490\nSimple PPT with a master slide w/ footer text \"Master footer is here\"\n\nI hit this in Tika https://issues.apache.org/jira/browse/TIKA-712 but it sounds like we need to fix it in POI first.\n\nIdeally each slide's master slide would have the elements from its corresponding master slide inlined, but if this is problematic, a fallback would just be to see each master slide once.\n\nThe attached PPT has a slide whose master slide has \"Master footer is here\" footer; you can see it rendered when you view this in Office.  But when I extract text using Tika, the footer isn't included.\n\nThis also happens for PPTX; I'll open a separate issue."}, {"count": 1, "tags": [], "bug_id": 51803, "attachment_id": null, "id": 149594, "time": "2011-09-21T16:53:16Z", "creator": "apache@gagravarr.org", "creation_time": "2011-09-21T16:53:16Z", "is_private": false, "text": "Turns out it's actually already supported by HSLF, you just need to set the flag to include master text (off by default)"}, {"count": 2, "text": "I think there is still a problem here: with the example PPT I\nattached, I see boiler-plate text when I run PowerPointExtract (which\ndoes set to flag to include master slide text, in its static main\nmethod).\n\nI see code in HSLF for detecting that a given Shape is a placeholder\n(MasterSheet.isPlaceholder), so it seems possible we can avoid\nextracting such text?  But I'm not familiar enough with the APIs, eg\nwhen Sheet.findTextRuns is invoked for a MasterSlide, how can it get\nthe Shape for each run and then skip its text if it's a placeholder?", "creator": "lucene@mikemccandless.com", "is_private": false, "id": 151218, "time": "2011-11-05T10:55:13Z", "bug_id": 51803, "creation_time": "2011-11-05T10:55:13Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 51803, "attachment_id": null, "id": 151264, "time": "2011-11-07T13:43:00Z", "creator": "yegor@dinom.ru", "creation_time": "2011-11-07T13:43:00Z", "is_private": false, "text": "MasterSlide.getTextRuns is used in other places and should return all runs including boilerplate ones from placeholders. I think the correct fix would be as follows: The line 224 in PowerPointExtractor.java invokes textRunsToText, but this method can't tell runs from placeholders from normal text.\n\n                    textRunsToText(ret, master.getTextRuns());\n\nIt is better to re-write it and iterate over shapes in the master sheet:\n\n                    for(Shape sh : master.getShapes()){\n                        if(sh instanceof TextShape){\n                            if(MasterSheet.isPlaceholder(sh)) {\n                                // don't bother about boiler plate text on master sheets\n                                continue;\n                            }\n                            TextShape tsh = (TextShape)sh;\n                            String text = tsh.getText();\n                            ret.append(text);\n                            if (!text.endsWith(\"\\n\")) {\n                                ret.append(\"\\n\");\n                            }\n                        }\n                    }\n \nAny volunteers to help me with testing? I never worked with text extractors and don't want to occasionally break things. I guess the best would be  to apply this fix, build and test from inside Tika. \n\nYegor\n\n(In reply to comment #2)\n> I think there is still a problem here: with the example PPT I\n> attached, I see boiler-plate text when I run PowerPointExtract (which\n> does set to flag to include master slide text, in its static main\n> method).\n> \n> I see code in HSLF for detecting that a given Shape is a placeholder\n> (MasterSheet.isPlaceholder), so it seems possible we can avoid\n> extracting such text?  But I'm not familiar enough with the APIs, eg\n> when Sheet.findTextRuns is invoked for a MasterSlide, how can it get\n> the Shape for each run and then skip its text if it's a placeholder?\n\n(In reply to comment #2)\n> I think there is still a problem here: with the example PPT I\n> attached, I see boiler-plate text when I run PowerPointExtract (which\n> does set to flag to include master slide text, in its static main\n> method).\n> \n> I see code in HSLF for detecting that a given Shape is a placeholder\n> (MasterSheet.isPlaceholder), so it seems possible we can avoid\n> extracting such text?  But I'm not familiar enough with the APIs, eg\n> when Sheet.findTextRuns is invoked for a MasterSlide, how can it get\n> the Shape for each run and then skip its text if it's a placeholder?"}, {"count": 4, "tags": [], "bug_id": 51803, "attachment_id": null, "id": 151266, "time": "2011-11-07T13:50:31Z", "creator": "lucene@mikemccandless.com", "creation_time": "2011-11-07T13:50:31Z", "is_private": false, "text": "Hi Yegor,\n\nThat sounds like a great fix!  (Iterating over shapes ourselves).\n\nI'm happy to test a patch to confirm we're skipping the boiler plate text.  Thanks!"}, {"count": 5, "tags": [], "bug_id": 51803, "attachment_id": null, "id": 151267, "time": "2011-11-07T13:55:40Z", "creator": "lucene@mikemccandless.com", "creation_time": "2011-11-07T13:55:40Z", "is_private": false, "text": "In fact you already described exactly what to test, so I'll take your proposed change, test it, and report back!  Thanks."}, {"count": 6, "tags": [], "bug_id": 51803, "attachment_id": 27907, "id": 151273, "time": "2011-11-07T17:41:06Z", "creator": "lucene@mikemccandless.com", "creation_time": "2011-11-07T17:41:06Z", "is_private": false, "text": "Created attachment 27907\nPatch w/ fix, plus test\n\nOK the change works well!  I see no more placeholder text from the\nmaster slide.\n\nI worked out a patch (attached), containing the above fix, and fixes\nto the tests, and some minor improvements to Sheet.java (cutover from\nVector -> List<TextRun>).\n\nOne test failed with this change (TestExtracter.testMasterText),\nbecause the master text in the test PPT for that test was in fact\nplaceholder text.\n\nSo, I replaced that test file (test-data/slideshow/master_text.ppt)\nwith a new PPT, that has non-placeholder text from the master slide,\nand also added an assert to verify placeholder text doesn't come\nthrough.\n\nThe assert fails on trunk today and passes with the patch, so I think\nwe are good.\n\nThanks Yegor!"}, {"count": 7, "tags": [], "text": "Created attachment 27908\nPPT for test case (replaces current test-data/slideshow/master_text.ppt).", "is_private": false, "id": 151274, "creator": "lucene@mikemccandless.com", "time": "2011-11-07T17:42:08Z", "bug_id": 51803, "creation_time": "2011-11-07T17:42:08Z", "attachment_id": 27908}, {"count": 8, "tags": [], "creator": "lucene@mikemccandless.com", "attachment_id": null, "text": "Hi, I think this patch is ready to go in?  It has a patch with a test case... is there a committer who can  double check and commit?  Thanks!", "id": 151604, "time": "2011-11-17T16:18:35Z", "bug_id": 51803, "creation_time": "2011-11-17T16:18:35Z", "is_private": false}, {"count": 9, "tags": [], "text": "Sorry for the delay. Patch applied in r1203295\n\nThanks,\nYegor", "is_private": false, "id": 151605, "creator": "yegor@dinom.ru", "time": "2011-11-17T17:36:38Z", "bug_id": 51803, "creation_time": "2011-11-17T17:36:38Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 51803, "attachment_id": null, "id": 151614, "time": "2011-11-17T22:02:04Z", "creator": "lucene@mikemccandless.com", "creation_time": "2011-11-17T22:02:04Z", "is_private": false, "text": "Awesome, thanks Yegor!"}]
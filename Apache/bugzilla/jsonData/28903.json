[{"count": 0, "attachment_id": null, "creator": "jschneid@netilla.com", "text": "There is currently no way to override the environment variables set by\nap_set_common_vars or ap_set_cgi_vars.  The following patch introduces a pair of\nhook functions (add_vars and add_cgi_vars) that can be used to add new\nenviroment variables, or override or remove existing environment variables.  The\nhook functions take an apr_table_t * as their only parameter, which is the\npointer to the subprocess_env member of the request record.\n\n--<cut here>--\nIndex: include/http_request.h\n===================================================================\ndiff -U3 -r1.1.1.2 http_request.h\n--- include/http_request.h      2003/04/10 19:09:56     1.1.1.2\n+++ include/http_request.h      2004/05/11 16:28:04\n@@ -404,6 +404,18 @@\n  */\n AP_DECLARE_HOOK(void,insert_filter,(request_rec *r))\n\n+/**\n+ * This hook allows modules to add environment variables during\n+ * ap_add_common_vars()\n+ */\n+AP_DECLARE_HOOK(void,add_vars,(apr_table_t *t))\n+\n+/**\n+ * This hook allows modules to add environment variables during\n+ * ap_add_cgi_vars()\n+ */\n+AP_DECLARE_HOOK(void,add_cgi_vars,(apr_table_t *t))\n+\n AP_DECLARE(int) ap_location_walk(request_rec *r);\n AP_DECLARE(int) ap_directory_walk(request_rec *r);\n AP_DECLARE(int) ap_file_walk(request_rec *r);\nIndex: server/util_script.c\n===================================================================\ndiff -U3 -r1.1.1.2 util_script.c\n--- server/util_script.c        2003/04/10 19:09:56     1.1.1.2\n+++ server/util_script.c        2004/05/11 16:28:04\n@@ -85,6 +85,16 @@\n #include <os2.h>\n #endif\n\n+/* Hook structure for add_vars and add_cgi_vars */\n+APR_HOOK_STRUCT(\n+               APR_HOOK_LINK(add_vars)\n+               APR_HOOK_LINK(add_cgi_vars)\n+)\n+\n+/* implement ap_run_add_vars and ap_run_add_cgi_vars */\n+AP_IMPLEMENT_HOOK_VOID(add_vars, (apr_table_t *t), (t))\n+AP_IMPLEMENT_HOOK_VOID(add_cgi_vars, (apr_table_t *t), (t))\n+\n /*\n  * Various utility functions which are common to a whole lot of\n  * script-type extensions mechanisms, and might as well be gathered\n@@ -305,6 +315,7 @@\n        }\n     }\n\n+    ap_run_add_vars(e);\n     if (e != r->subprocess_env) {\n       apr_table_overlap(r->subprocess_env, e, APR_OVERLAP_TABLES_SET);\n     }\n@@ -416,6 +427,7 @@\n        }\n        ap_destroy_sub_req(pa_req);\n     }\n+    ap_run_add_cgi_vars(e);\n }", "id": 57205, "time": "2004-05-11T16:51:39Z", "bug_id": 28903, "creation_time": "2004-05-11T16:51:39Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "is_private": false, "id": 57207, "time": "2004-05-11T17:01:25Z", "bug_id": 28903, "creation_time": "2004-05-11T17:01:25Z", "text": "Hmm. What is the advantage compared to fixup, which is, what mod_env uses (where\nyou can take all these actions, except for HTTP_ stuff, which should not be\nmodified anyway [CGI/1.1 spec])?"}, {"count": 2, "text": "Actually, ap_set_common_vars happens after ap_run_fixups, so anything done in\nthe fixups phase can be undone in ap_set_common_vars (or ap_set_cgi_vars).  If\nyou need to modify the variables set in either of these places, you're out of luck.\n\nAs for not modifying the HTTP_.* and other CGI variables, there are cases where\nit makes sense to modify them (for example, proxied Apache instances, or cases\nwhere network transport is handled by another entity).  If I'm able to change\nwhat's in the SERVER_ADDR and SERVER_PORT fields (for example), I can use a\nparticular badly-written CGI program that creates its own self-referential URLs\nwhen I move to a proxied scheme (no, fixing the CGI program isn't really an\noption - it's a compiled C++ program provided by a third party).\n\nDon't get me wrong, I'm not saying we should abandon any specs here, but I don't\nthink the mere existance of a specification should prohibit adding tools that\n_may_ be used to violate it.", "bug_id": 28903, "attachment_id": null, "id": 57211, "time": "2004-05-11T17:31:14Z", "creator": "jschneid@netilla.com", "creation_time": "2004-05-11T17:31:14Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 28903, "is_private": false, "id": 57223, "time": "2004-05-11T19:10:51Z", "creator": "nd@perlig.de", "creation_time": "2004-05-11T19:10:51Z", "tags": [], "text": "Ok.\n\nI still see a couple of issues:\n\n- why do we need *two* hooks? as far as I can see, one would be enough (after\nall variables are set)\n- in such a general function that is called from arbitrary pieces of code, the\nhook would be misplaced.\n\nIf you want to modify variables that are inherited to the CGI, I think a better\nplace for that hook would be in mod_cgi itself (And with r as parameter, since\nyou need to get the information from somewhere). Such as \"ap_run_fixup_cgi_env\".\n\nHow does this sound?"}, {"count": 4, "tags": [], "text": "I provided two hooks because sometimes both ap_add_common_vars and\nap_add_cgi_vars are called, and sometimes only ap_add_common_vars is called, and\nI figured it would be more general to have both hooks available.\n\nI'm calling the hooks in ap_add_common_vars and ap_add_cgi_vars because that's\nwhere the variables are set.  Calling them elsewhere seems more error-prone -\nyou need to find all occurences of ap_add_common_vars or ap_add_cgi_vars, trace\nthe execution path, and install the hooks right before the variables get used.\n\nAlso, I'm passing a pointer to a table because ap_add_common_vars overwrites\nwhatever is in the subprocess_env table.  I'm not averse to passing the\nrequest_rec as an additional parameter, but the apr_table_t needs to be passed,\ntoo, or it won't work in ap_add_common_vars.", "is_private": false, "id": 57225, "creator": "jschneid@netilla.com", "time": "2004-05-11T19:47:19Z", "bug_id": 28903, "creation_time": "2004-05-11T19:47:19Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "text": "I disagree.\n\nThe problems needs to be nailed down where the hole is, not where the hammer is.\nSo what do you ant to achieve? A modification of the environment passed to a\nCGI. mod_cgi should be changed only then.\n\nAdding hooks to a basic *utility* function is not an option. That is really\nerror prone, because you're starting to influence code that you cannot control.\n\nFinally, one hook with (r) is enough. You want to modify r->subprocess_env after\nit was filled in, nothing else. How it was built before is totally the same to\nthe hook function.\n\nOther opinions would be appreciated here.", "id": 57229, "time": "2004-05-11T20:37:51Z", "bug_id": 28903, "creation_time": "2004-05-11T20:37:51Z", "is_private": false}, {"count": 6, "tags": [], "creator": "geoff@apache.org", "attachment_id": null, "is_private": false, "id": 57242, "time": "2004-05-12T00:00:59Z", "bug_id": 28903, "creation_time": "2004-05-12T00:00:59Z", "text": "the simple way would be that if a flag is set (configuration directive or\nwhatnot) and if the variable is already defined in subprocess_env, use the\nexisting value instead.  the directive could look like\n\n  AllowEnvironmentOverride On\n\nyou could also do \n  AllowEnvironmentOverride REMOTE_USER\n\nor whatnot, but the ability to use mod_env or other means to set subprocess_env\nusually comes with the ability to edit httpd.conf as well."}, {"count": 7, "tags": [], "text": "That's a great idea.  I'll work on it this morning.  Any preference as to doing\nthis as a standalone module, or tying it into a standard module?", "is_private": false, "bug_id": 28903, "id": 57280, "time": "2004-05-12T12:56:01Z", "creator": "jschneid@netilla.com", "creation_time": "2004-05-12T12:56:01Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 54707, "attachment_id": null, "id": 165867, "time": "2013-03-15T17:41:24Z", "creator": "bruce@iris.washington.edu", "creation_time": "2013-03-15T17:41:24Z", "is_private": false, "text": "This problem was discovered while trying to make the Perl LWP library work with tomcat where a path was being protected with digest authentication. \n\nUltimately, this is a bug with Perl (see https://rt.cpan.org/Public/Bug/Display.html?id=43354), and it has been possibly fixed. \nHOWEVER, this requires users to update their perl libraries etc (a big pain for our customers and for us).\n\nA simple fix to tomcat would solve this problem for us and make life good again.\n\nA typical digest response header from perl looks like:\n\nAuthorization: Digest username=\"joe\", realm=\"ACME\", qop=\"auth\", algorithm=\"MD5\", uri=\"/my/protected/path\", nonce=\"1363130363664:71e75a43d7fdbfff8c54bece373058b8\", nc=\"00000001\", cnonce=\"513fb7fb\", response=\"baeeff0b6b9b7e74e769630160d3725b\", message-digest=\"d41d8cd98f00b204e9800998ecf8427e\", opaque=\"9C2C62C52D30A7D5707F75F5A813F113\"\n\nThe entry nc=\"00000001\" causes tomcat to reject the request.  It should be nc=00000001 (the perl client's mistake)\n\nThe following perl script demonstrates the problem:\n\n#!/usr/bin/perl\nuse strict;\nuse LWP;\n\n&doGet(\"myname\", \"mypassword\", \"myrealmname\", \"myhost\", \"8080\", \"/my/protected/path\");\n\nsub doGet\n{\n    my ($username, $password, $realm, $host, $port, $uri) = @_;\n    my $url = \"http://\".$host.\":\".$port.$uri;\n\n    print \"GET: $url\\n\";\n\n    my $browser = LWP::UserAgent->new;\n\n    $browser->agent('Debug Digest Problem');\n    $browser->credentials($host.\":\".$port,$realm,$username=>$password);\n\n    my $response=$browser->get($url);\n\n    print \"HTTP STATUS:\".$response->status_line.\"\\n\";\n    print $response->content;\n}\n\nThe fix should be in org.apache.tomcat.util.http.parser.HttpParser.java\n\nLooking at build 7.0.37 code:\n\nAround line 147:\n                case 3:\n                    // FIELD_TYPE_LHEX\n                    value = readLhex(input);\n                    break;\n\nThis switch is hit when the field is 'nc' (due to line 72 fieldTypes.put(\"nc\", FIELD_TYPE_LHEX); ]\n\nThe method readLhex() does not tolerant quotes. (see line 434 and below).\n\nA similar tomcat issue was fixed a while back for the quoted qop field. (the qop response field should also not be quoted, but tomcat handles this).\n\nAlso see line 375\n     * This is not defined in any RFC. It is a special case to handle data from\n     * buggy clients (known buggy clients include Microsoft IE 8 & 9, Apple\n     * Safari for OSX and iOS) that add quotes to values that should be tokens.\n\nServer software which tolerates this mistake in the perl client includes Apache and Spring's security filter \n(org.springframework.security.web.authentication.www.DigestAuthenticationFilter)."}, {"count": 1, "tags": [], "bug_id": 54707, "attachment_id": 30055, "id": 165873, "time": "2013-03-15T22:54:22Z", "creator": "bruce@iris.washington.edu", "creation_time": "2013-03-15T22:54:22Z", "is_private": false, "text": "Created attachment 30055\nPossible change to HttpParser.readLhex and HttpParser.readQuotedLhex\n\nTo fix the problem, readLhex() must be changed. \n\nThe existing readQuotedLhex() calls readLhex(), therefore it must also be changed. \n\nThis fix places the old readLhex() code inside of readQuotedLhex() so that it \ndoes not call readLhex(). \n\nThe new readLhex() can tolerate an optional starting quote. \n\nIf there's  a starting quote, but no ending quote, readLhex() returns null.\n\nEasy as Pi."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Why isn't the fix just:\n\nIndex: java/org/apache/tomcat/util/http/parser/HttpParser.java\n===================================================================\n--- java/org/apache/tomcat/util/http/parser/HttpParser.java\t(revision 1456972)\n+++ java/org/apache/tomcat/util/http/parser/HttpParser.java\t(working copy)\n@@ -68,7 +68,7 @@\n         fieldTypes.put(\"cnonce\", FIELD_TYPE_QUOTED_STRING);\n         fieldTypes.put(\"opaque\", FIELD_TYPE_QUOTED_STRING);\n         fieldTypes.put(\"qop\", FIELD_TYPE_QUOTED_TOKEN);\n-        fieldTypes.put(\"nc\", FIELD_TYPE_LHEX);\n+        fieldTypes.put(\"nc\", FIELD_TYPE_QUOTED_LHEX);\n \n         // Setup the flag arrays\n         for (int i = 0; i < 128; i++) {", "id": 165874, "time": "2013-03-15T23:01:15Z", "bug_id": 54707, "creation_time": "2013-03-15T23:01:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 54707, "attachment_id": null, "id": 165875, "time": "2013-03-15T23:09:18Z", "creator": "bruce@iris.washington.edu", "creation_time": "2013-03-15T23:09:18Z", "is_private": false, "text": "I believe this will make Perl work and everything else fail!. Another alternative would be to make quotes optional all the way round, but I'm not sure that's good idea? Maybe it is, I don't know."}, {"count": 4, "tags": [], "text": "This doesn't really cause a problem since there's a fall through that catches\nthe mistake... \n\nBut at line 66 you'll see:\nfieldTypes.put(\"digest-uri\", FIELD_TYPE_QUOTED_STRING);\n\nI believe that's a typo. Should read:\nfieldTypes.put(\"uri\", FIELD_TYPE_QUOTED_STRING);\n\nSee: http://tools.ietf.org/html/rfc2617 \n3.2.2 The Authorization Request Header\n\n       digest-uri       = \"uri\" \"=\" digest-uri-value\n       digest-uri-value = request-uri   ; As specified by HTTP/1.1\n\nThe RFC's are hard to read!", "attachment_id": null, "id": 165876, "creator": "bruce@iris.washington.edu", "time": "2013-03-15T23:38:33Z", "bug_id": 54707, "creation_time": "2013-03-15T23:38:33Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 54707, "text": "(In reply to comment #3)\n> I believe this will make Perl work and everything else fail!\n\nYou are correct. That is what I get for trying to add something to a bug report when I should be sleeping.\n\n> Another alternative would be to make quotes optional all the way round, but I'm\n> not sure that's good idea? Maybe it is, I don't know.\n\nRFC2616 encourages servers to be tolerant of buggy input where they can do so unambiguously. I'll take a more general look at the parser and see what can be done. Either way, this particular issue will be fixed.", "id": 165881, "time": "2013-03-16T12:24:46Z", "creator": "markt@apache.org", "creation_time": "2013-03-16T12:24:46Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 54707, "is_private": false, "id": 165896, "time": "2013-03-17T13:48:56Z", "creator": "markt@apache.org", "creation_time": "2013-03-17T13:48:56Z", "tags": [], "text": "Fixed in trunk and 7.0.x and will be included in 7.0.39 onwards."}]
[{"count": 0, "tags": [], "creator": "rich@steelezone.net", "text": "The current implementations of <fileset> and <dirset> only allow for a single base directory; I would like the ability to specify multiple base directories, perhaps something like this:\n\n<fileset>\n   <basedirs refid=\"src\" />\n   <include name=\"*.java\" />\n</fileset>\n\nRationale:\n\nThe <javac> task allows for multiple source directories using the <src> element; this is particularly useful for builds that generate source code.  I can create a generic (reusable) build file for generating source from an arbitrary number of source directories using this element.\n\nHowever, dealing with multiple source directories becomes problematic in other areas, like creating a zip file of all the sources.\n\nI'd prefer to not have to depend on a custom task, like using antcontrib's <for>, because the script handling this is meant to be generic; the same argument goes against writing my own task to do this (which I've done).", "id": 133947, "time": "2010-01-26T07:34:24Z", "bug_id": 48621, "creation_time": "2010-01-26T07:34:24Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 48621, "attachment_id": null, "text": "Most if not all Ant tasks deal with resource collections now.  Is there anything, a <union> of <fileset>s doesn't cover?", "id": 133948, "time": "2010-01-26T07:43:19Z", "creator": "bodewig@apache.org", "creation_time": "2010-01-26T07:43:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 48621, "attachment_id": null, "text": "That would work if I knew ahead of time the specific base directories I'm dealing with; however, my (perhaps overly?) generic shared build file doesn't know that: it's usually one source directory, sometimes two, but it could be more.\n\nFor my project, the \"concrete\" build file that imports the generic build file just sets a \"java-build-sources-path\" reference, which the common build script uses by having <src refid=\"java-build-sources-path\"> in the  <javac> task.  This works for <javac>, but then how do I generically build the source zip file artifact (for example)? I've struggled to figure out how to use the java-build-sources-path reference with <zip>.\n\nIf you know of a way that doesn't resort to looping with either antcontrib or any other custom task, I'll be happy to give it a try.", "id": 133951, "time": "2010-01-26T08:03:51Z", "creator": "rich@steelezone.net", "creation_time": "2010-01-26T08:03:51Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 48621, "attachment_id": null, "text": "I understand - you are correct if the list of basedirs is not known there is no built-in way to do that.\n\nYou may get there using a <for> loop creating a fileset, echoing the included filenames to a file using pathconvert and echo and finally use a filelist reading the written file, but this is clumsy.\n\nExtending <fileset> won't work since most tasks that work on fileset expect it to have a single base directory (they invoke getBasedir and getIncludedFiles and build up File instances).\n\nWhat we can do is to write a resource collection that behaves like a union of filesets that share the same include/exclude patterns with basedirs taken from another resource collection.  It shouldn't be too hard to do, but we are too close to the 1.8.0 release to throw it in right now.", "id": 133966, "time": "2010-01-26T21:21:23Z", "creator": "bodewig@apache.org", "creation_time": "2010-01-26T21:21:23Z", "is_private": false}, {"count": 4, "tags": [], "creator": "rich@steelezone.net", "attachment_id": null, "id": 133982, "time": "2010-01-27T18:29:34Z", "bug_id": 48621, "creation_time": "2010-01-27T18:29:34Z", "is_private": false, "text": "Your solution seems like it would work, thank you very much."}, {"count": 5, "tags": [], "creator": "rich@steelezone.net", "attachment_id": null, "id": 136929, "time": "2010-05-18T10:12:57Z", "bug_id": 48621, "creation_time": "2010-05-18T10:12:57Z", "is_private": false, "text": "It looks like this change didn't make the 1.8.1 release that just went out, unless I just missed it in the change notes.  Can you confirm, please?"}, {"attachment_id": null, "tags": [], "bug_id": 48621, "text": "you are correct.  It's still on my TODO list but got burried under a bunch of other things, sorry.", "count": 6, "id": 136930, "time": "2010-05-18T10:24:37Z", "creator": "bodewig@apache.org", "creation_time": "2010-05-18T10:24:37Z", "is_private": false}, {"count": 7, "tags": [], "creator": "rich@steelezone.net", "text": "\nAbsolutely no need to be sorry!  After all, I fully understand being buried under a pile of work.  I only asked so I can plan our migration path to 1.8.\n\nThanks.", "id": 136931, "time": "2010-05-18T10:27:59Z", "bug_id": 48621, "creation_time": "2010-05-18T10:27:59Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "Created attachment 25530\nThis adds a datatype called the \"BaseDirList\" which essentially acts as a list of FileSet s", "attachment_id": 25530, "id": 137367, "creation_time": "2010-06-04T22:36:24Z", "time": "2010-06-04T22:36:24Z", "creator": "seatracer@gmail.com", "bug_id": 48621, "is_private": false}, {"count": 9, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 137369, "time": "2010-06-05T00:34:18Z", "bug_id": 48621, "creation_time": "2010-06-05T00:34:18Z", "is_private": false, "text": "Just wanted to point out that the recently-added <augment> task would allow one to dynamically add nested filesets to a union..."}, {"count": 10, "tags": [], "creator": "rich@steelezone.net", "text": "(In reply to comment #9)\n> Just wanted to point out that the recently-added <augment> task would allow one\n> to dynamically add nested filesets to a union...\n\nCan you give or point to an example?  I'm not familiar with <augment>.", "id": 137438, "time": "2010-06-08T07:17:03Z", "bug_id": 48621, "creation_time": "2010-06-08T07:17:03Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "http://ant.apache.org/manual/Tasks/augment.html is the manual page.  The way you could accumulate FileSets using <augment> would be:\n\n- set up a <path> or <union> with an id\n- iterate over your basedirs using e.g. antcontrib <for>\n- for each basedir, <augment> your id'd path|union from step 1 by adding a <fileset> whose dir is the currently iterated member\n\nHTH,\nMatt", "attachment_id": null, "id": 137510, "creation_time": "2010-06-09T16:27:24Z", "time": "2010-06-09T16:27:24Z", "creator": "mbenson@apache.org", "bug_id": 48621, "is_private": false}, {"count": 12, "tags": [], "creator": "rich@steelezone.net", "attachment_id": null, "id": 137511, "time": "2010-06-09T16:38:40Z", "bug_id": 48621, "creation_time": "2010-06-09T16:38:40Z", "is_private": false, "text": "<augment> looks like something that's very useful; it's similar to, though more general and more powerful (and more supported!) than a custom <modifypath> task I created.\n\nHowever, I still can't rely on using antcontrib tasks in my base build scripts.  Unfortunately, not all of the groups using these scripts will accept using that, so I need a solution that doesn't.\n\nThanks, though, for the pointer.  I'm really looking forward to upgrading to 1.8.1+."}, {"count": 13, "tags": [], "creator": "rich@steelezone.net", "text": "> What we can do is to write a resource collection that behaves like a union of\n> filesets that share the same include/exclude patterns with basedirs taken from\n> another resource collection.  It shouldn't be too hard to do, but we are too\n> close to the 1.8.0 release to throw it in right now.\n\nIs there any hope this will get resolved?  Or is it already and I've just missed it?", "id": 144364, "time": "2011-02-16T13:53:08Z", "bug_id": 48621, "creation_time": "2011-02-16T13:53:08Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 48621, "is_private": false, "count": 14, "id": 144365, "time": "2011-02-16T14:49:40Z", "creator": "mbenson@apache.org", "creation_time": "2011-02-16T14:49:40Z", "text": "If the only thing stopping you from using <augment> is antcontrib, can you require Java 6 and use the built-in Rhino interpreter to do any iteration?"}, {"count": 15, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 144366, "time": "2011-02-16T14:52:18Z", "bug_id": 48621, "creation_time": "2011-02-16T14:52:18Z", "is_private": false, "text": "(In reply to comment #14)\n> If the only thing stopping you from using <augment> is antcontrib, can you\n> require Java 6 and use the built-in Rhino interpreter to do any iteration?\n\nActually, in this case you'd be beyond the help of <augment> since it's based on the XML processing, but once you're scripting you can just work directly with Ant's Java API.  Alternatively you could write a custom task in Java, but I think you said you already did so..."}, {"count": 16, "tags": [], "text": "I'm not sure whether anybody still needs this but I've finally managed to reach the bottom of my Ant TODO list ...\n\nMore than four years later, oh my.\n\nsvn revision 1578003", "attachment_id": null, "id": 173860, "creation_time": "2014-03-16T09:08:54Z", "time": "2014-03-16T09:08:54Z", "creator": "bodewig@apache.org", "bug_id": 48621, "is_private": false}, {"count": 17, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 173861, "time": "2014-03-16T09:20:39Z", "bug_id": 48621, "creation_time": "2014-03-16T09:20:39Z", "is_private": false, "text": "and svn revision 1578009 as a fix for my slipping fingers"}]
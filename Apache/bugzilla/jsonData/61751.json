[{"count": 0, "tags": [], "bug_id": 61751, "is_private": false, "text": "Using the NIO2 connector \"org.apache.coyote.http11.Http11Nio2Protocol\" incoming requests are cut at some point.\n\nThe bug was first discovered in a web application handling SOAP requests. The SOAP implementation complains about malformed XML. When tracking down the error, I could see, that the XML content in the message body ends at some random point.\n\nTests show, that requests are not cut at the same point. Sometimes, request bodies are cut somewhere beyond 16kByte, sometime they are cut somwhere near 2kByte.\n\nI could not determine some pattern here.\n\nThe connector is configured to use the OpennSSL implementation \"org.apache.tomcat.util.net.openssl.OpenSSLImplementation\".\n\n\nVersions:\nTomcat: 8.5.16\nJava: 1.8.0_144-b01\nOpenSSL. 1.0.2h", "id": 202092, "time": "2017-11-13T11:55:47Z", "creator": "markus.doerschmidt@gmx.de", "creation_time": "2017-11-13T11:55:47Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Do you think you could give some pointers on reproduction ?\nIn the past there was BZ57799 which was caused by an unexpected interaction with use of available() by the framework.", "attachment_id": null, "id": 202174, "creator": "remm@apache.org", "time": "2017-11-16T12:56:27Z", "bug_id": 61751, "creation_time": "2017-11-16T12:56:27Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61751, "is_private": false, "text": "Yes, we are going to need some information on how to reproduce this.", "id": 202176, "time": "2017-11-16T13:38:24Z", "creator": "markt@apache.org", "creation_time": "2017-11-16T13:38:24Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61751, "text": "Created attachment 35539\nMinimal code to reproduce bug", "id": 202261, "time": "2017-11-20T12:12:52Z", "creator": "markus.doerschmidt@gmx.de", "creation_time": "2017-11-20T12:12:52Z", "is_private": false, "attachment_id": 35539}, {"count": 4, "tags": [], "text": "I attached a simple web application to reproduce the code.\n\nTry sending XML data to application using curl:\ncurl -X POST -k --header \"Content-Type: text/xml;charset=UTF-8\" --data @\"test.xml\"  <your-url-here>\n\nAfter calling curl for a 5MB XML file, I get this response:\n<!doctype html><html lang=\"en\"><head><title>HTTP Status 500 ? Internal Server Error</title><style type=\"text/css\">h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 500 ? Internal Server Error</h1><hr class=\"line\" /><p><b>Type</b> Status Report</p><p><b>Message</b> Premature end of file.</p><p><b>Description</b> The server encountered an unexpected condition that prevented it from fulfilling the request.</p><hr class=\"line\" /><h3>Apache Tomcat</h3></body></html>\n\nTomcat is configured to allow uploads up to 20MB.\n\nCurrent versions are: Tomcat 8.5.23, OpenSSL 1.0.2-k, Tomcat Native 1.2.14", "is_private": false, "id": 202262, "creator": "markus.doerschmidt@gmx.de", "time": "2017-11-20T12:17:51Z", "bug_id": 61751, "creation_time": "2017-11-20T12:17:51Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 61751, "text": "This works for me.", "id": 202269, "time": "2017-11-20T13:54:16Z", "creator": "remm@apache.org", "creation_time": "2017-11-20T13:54:16Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "markus.doerschmidt@gmx.de", "is_private": false, "id": 202270, "attachment_id": null, "bug_id": 61751, "creation_time": "2017-11-20T13:56:39Z", "time": "2017-11-20T13:56:39Z", "text": "The real web application uses Spring Webservices 2.4.0. \nThe SOAP request contains a base64-encoded binary element.\n\nThe SOAP request never reaches the Webservice framework, because parsing the XML documents fails due to incomplete data."}, {"count": 7, "tags": [], "text": "As I said, I tried the same connector with your test upload, it worked for me.\n\nThis issue is not very well presented IMO, for instance it seems to imply it is a NIO2 + OpenSSL issue only, but in the end that's not very clear.\nDoes it also cause issues for you with:\n- NIO ?\n- No SSL ?\n- JSSE rather than OpenSSL ?\n- Any XML file ? The document builder input stream read behavior would cause this (I'm pretty sure using a buffered IS would be a workaround), so it might not break with any file.\n- Why do I need to use a multi MB XML when it breaks after a few KB ?\nIf you get a stack trace, please post it. In your test case, instead of the exception reporting used, you should probably use e.printStackTrace(),", "is_private": false, "id": 202296, "creator": "remm@apache.org", "time": "2017-11-21T07:03:52Z", "bug_id": 61751, "creation_time": "2017-11-21T07:03:52Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 61751, "is_private": false, "id": 202314, "time": "2017-11-21T21:09:37Z", "creator": "markt@apache.org", "creation_time": "2017-11-21T21:09:37Z", "tags": [], "text": "I can't reproduce this problem with the given test case either. I've tested:\n- NIO2\n- 8.5.x trunk\n- http and https\n- https with OpenSSL (Tomcat native 1.2.16, OpenSSL ubuntu latest)\n- https with JSSE\n- Java 1.8.0u144\n\nThere are no obvious changes in the versions I am using compared to the versions you tested that might have fixed this issue."}, {"count": 9, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 203311, "time": "2018-01-17T08:07:30Z", "bug_id": 61751, "creation_time": "2018-01-17T08:07:30Z", "is_private": false, "text": "No further activity, and failed to reproduce."}, {"count": 10, "tags": [], "bug_id": 61751, "is_private": false, "text": "I reopened, because I have new information about how to reproduce the bug:\n\nThe bug is reproducable with the litte web application I previously attached to this bug report.\n\nI got the bug in an environment with these conditions:\n1. Server and client have to be in different networks with a gateway between\n2. Tomcat needs NIO2 connector handling HTTPs\n\nWhen I send an XML file to \"/xml\" of my example application using CURL, I get an server-side error about a malformed XML document, when the XML exceeds some random size limit.\n\nWhen I send the same XML file to \"/test\", which simply reads and count read bytes, I get a client-side error:\n\ncurl: (55) SSL_write() returned SYSCALL, errno = 104\n\n\nThe bug does not occur if:\n- protocol handled by NIO2 connector is HTTP\n- or client and server are in the same network", "id": 203503, "time": "2018-01-26T12:46:48Z", "creator": "markus.doerschmidt@gmx.de", "creation_time": "2018-01-26T12:46:48Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 203626, "attachment_id": null, "bug_id": 61751, "creation_time": "2018-02-05T14:03:11Z", "time": "2018-02-05T14:03:11Z", "text": "Thanks for the additional information. I can now reproduce this (thanks to Microsoft for the free azure credits).\n\nI have two clean Tomcat 9.0.x builds. One locally, one on Azure. Key config is HTTPS / OpenSSL / NIO2. Locally the upload works. Uploading to Azure fails. Switching the Azure instance to NIO makes the problem go away.\n\nI'm starting to investigate now."}, {"count": 12, "tags": [], "creator": "markt@apache.org", "text": "I've found the root cause. A blocking read obtained bytes from the network but after unwrapping there were zero application bytes. Since this is a blocking read, more network bytes should be read and unwrapped until there are some application bytes. This wasn't happening. I have a fix that I'll apply shortly. I just need to check if it needs to be applied anywhere else as well.", "id": 203634, "time": "2018-02-05T23:01:40Z", "bug_id": 61751, "creation_time": "2018-02-05T23:01:40Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 61751, "text": "Fixed in:\n- trunk for 9.0.5 onwards\n- 8.5.x for 8.5.28 onwards", "id": 203637, "time": "2018-02-05T23:35:21Z", "creator": "markt@apache.org", "creation_time": "2018-02-05T23:35:21Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 203640, "attachment_id": null, "bug_id": 61751, "creation_time": "2018-02-06T05:37:00Z", "time": "2018-02-06T05:37:00Z", "text": "Great job on that fix ! :)"}, {"count": 15, "tags": [], "text": "On second thought, this will need to be revisited as the blocking read of SecureNio2Channel is supposed to block until it returns non 0. Of course, the algorithm is complex already ...\nI will add a TODO comment in trunk about that.", "attachment_id": null, "id": 203641, "creator": "remm@apache.org", "time": "2018-02-06T08:45:58Z", "bug_id": 61751, "creation_time": "2018-02-06T08:45:58Z", "is_private": false}]
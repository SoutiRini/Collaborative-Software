[{"count": 0, "tags": [], "bug_id": 4065, "text": "Hi,\n\n   I'm trying to use the regexp mapper with a specific classpath (much as it is\nnow possible with style). The documentation says : \n\n \u00ab The regexp mapper needs a supporting library and an implementation of\norg.apache.tools.ant.util.regexp.RegexpMatcher that hides the specifics of the\nlibrary. Ant comes with implementations for the java.util.regex package of JDK\n1.4, jakarta-regexp and jakarta-ORO. If you compile from sources and plan to use\none of them, make sure the libraries are in your CLASSPATH. \u00bb\n\nand indeed, with one of these jars in the build classpath, the mapper will work.\n\nHowever when the classpath is specified via the documented classpathref\nattribute of mapper :\n\n***\n\n<path id=\"regexp.path\">\n<pathelement location=\"lib/extlib/regexp/1.2/lib/jakarta-regexp-1.2.jar\"/>\n</path>\n\n<target name=\"make-src\">\n\n<copy todir=\"${dest}\">\n<mapper to=\"\\1/\\2\" from=\"^(.*)/src/java/(.*)$$\" classpathref=\"regexp.path\"\ntype=\"regexp\"/>\n***\n\nant will fail with :  No supported regular expression matcher found\n\nSo there seem to be a problem somewhere.\n\nThat's a pain, the regexp jar is downloaded somewhere else in the build process\nand therefore I can't use in in the general classpath since it won't exist at first.\n\n(btw a nested classpath element to mapper would be nice)", "id": 6534, "time": "2001-10-10T03:38:20Z", "creator": "nicolas.mailhot@one2team.com", "creation_time": "2001-10-10T03:38:20Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 4065, "text": "I think this is a classloader problem that we cannot easily resolve.  If you\nremove org/apache/tools/ant/util/regexp/JakartaRegexpMatcher.class from\noptional.jar and add it to the classpath of the mapper, it will probably work.\n\nFor a description of why this happens, see bug#3934 for further explanation of\nthe classloader issue.\n\nBTW - <mapper> does support nested <classpath> elements 8-)", "id": 7849, "time": "2001-11-13T05:07:55Z", "creator": "bodewig@apache.org", "creation_time": "2001-11-13T05:07:55Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "nicolas.mailhot@one2team.com", "text": "It is ?\nThen that's a documentation bug (that's the kind of bug  I *love*).\nHowever will it work better than classpathref here ?\n\nA for bug#3934, if there are no references to another regexp parser in ant\ninternal classes, I don't see why it should apply.\n\nAs far as I see the problem is not clashes between my jar specification and some\ninternal ant one, but that somehow ant forgets to seeache the specified\nclasspathref for a valid RegexpMatcher\n\n\n\n", "id": 7867, "time": "2001-11-13T07:52:14Z", "bug_id": 4065, "creation_time": "2001-11-13T07:52:14Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 7869, "time": "2001-11-13T08:09:21Z", "bug_id": 4065, "creation_time": "2001-11-13T08:09:21Z", "text": "OK, let's start with the documentation bug - it is documented in my copy, but I'm\nnot 100% sure that the paragraph\n\nThe classpath can be specified via a nested <classpath>, as well - that is,\na path-like structure.\nhas always been there - I've changed the file to add a heading and make it more\nvisible now.\nNo, a nested <classpath> element will do exactly the same as your classpathref\nattribute.\n\nLet me rephrase what I've written in the style case for regexp - it is not about\nconflicting libraries or so:\n\norg.apache.tools.ant.util.regexp.JakartaRegexpRegexp is part of optional.jar.\noptional.jar is in ANT_HOME/lib and thus will be put into CLASSPATH, which means\nit can be found by the system classloader - the parent of all classloaders.\n\nYou give an additional classpath that contains the jakarta-regexp library and\nmaybe even set the system property to tell Ant you want to use jakarta-regexp.\n\nAnt tries to load org.apache.tools.ant.util.regexp.JakartaRegexpRegexp via a new\nclassloader that contains the CLASSPATH you've specified.  Being a good\nclassloader, Ant's classloader does like Sun asks it to do and consults the\nsystem classloader first.  Great, the class can be found and loaded via the\nsystem classloader.  Now, this class needs additional classes from the JAR you've\nsupplied - it tries to load them, but as it has been loaded via the system\nclassloader, it doesn't know about your JAR and fails to find the classes.\n\nThis is where my proposed solution kicks in, remove the class from optional.jar.\nIf the class cannot be found via the system classloader, you can specify the\nadditional library as well.\n\nI hope this is at least a little clearer."}, {"count": 4, "tags": [], "text": "Ok. I think this time I've understood this.\n\nDoes that mean ant will never consult the specified classpath if optionnal.jar\nis present as in any normal installation ? Why doesn't he tries a second time on\nthe specified classpeth if the system one fails ?\n\nI don't really see the point of ant scripts if you have to go on all the user\nposts modify the default ant install to make them work (this is the frustrated\nme speaking:()", "is_private": false, "bug_id": 4065, "id": 7872, "time": "2001-11-13T08:39:24Z", "creator": "nicolas.mailhot@one2team.com", "creation_time": "2001-11-13T08:39:24Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 4065, "is_private": false, "text": "Please see whether I make any sense in what I've written in the description of\nthe META BUG.\n\nI think in the case of mappers, things are even worse as the regexp classes have\nbeen part of ant.jar and not optional.jar (this will be different in the future).\n\nThe way it is right now in Ant - ant.jar and optional.jar are on CLASSPATH is\nlegacy and there is nothing much we could do without breaking backwards\ncompatibility.\n\nMost users will rather clutter their CLASSPATH with the required libraries \ninstead of using nested <classpath> elements in their build files - for those\nusers the default of having optional.jar in CLASSPATH is correct.\n\nI'm not trying to defend the current situation and I completely understand your\nfrustration, but I'm afraid we cannot fix it without breaking backwards\ncompatibility.\n\n\n*** This bug has been marked as a duplicate of 6606 ***", "id": 11015, "time": "2002-02-21T11:54:15Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-21T11:54:15Z", "attachment_id": null}]
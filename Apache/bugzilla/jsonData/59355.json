[{"count": 0, "tags": [], "creator": "idiotioc@gmail.com", "attachment_id": 33778, "is_private": false, "id": 190386, "time": "2016-04-19T15:04:59Z", "bug_id": 59355, "creation_time": "2016-04-19T15:04:59Z", "text": "Created attachment 33778\n1 Line Patch Correction\n\nWhen the XSSFPivotTable is created with a source data area not starting from column index 0, adding a column label can throw an NPE when trying to change the column header cell style to String.\n\nFrom investigation, it appears that the method private void addDataField(DataConsolidateFunction function, int columnIndex, String valueFieldName) incorrectly calculates the column for the corresponding header cell."}, {"count": 1, "attachment_id": null, "bug_id": 59355, "text": "Thanks for the report, any chance of a small unit-test that allows us to reproduce this and ensure that it stays fixed in the future?", "id": 190389, "time": "2016-04-19T18:19:10Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-19T18:19:10Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 59355, "text": "(In reply to Dominik Stadler from comment #1)\n> Thanks for the report, any chance of a small unit-test that allows us to\n> reproduce this and ensure that it stays fixed in the future?\n\nShould the unit test be added to the TestXSSFPivotTable test case?", "id": 190393, "time": "2016-04-19T21:30:27Z", "creator": "idiotioc@gmail.com", "creation_time": "2016-04-19T21:30:27Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "idiotioc@gmail.com", "attachment_id": 33779, "text": "Created attachment 33779\nPatch for bug + testcase in TestXSSFPivotTable", "id": 190394, "time": "2016-04-19T21:35:06Z", "bug_id": 59355, "creation_time": "2016-04-19T21:35:06Z", "is_private": false}, {"count": 4, "tags": [], "creator": "idiotioc@gmail.com", "is_private": false, "text": "The bug that causes the NullPointerException is in addDataField(DataConsolidateFunction function, int columnIndex, String valueFieldName)\nIt incorrectly calculates the column for the corresponding header cell. Instead of adding the column offset to the referenced area's first cell column index, it only uses the column offset.\n\nIf the mis-referenced column cell is uninitialized (and the sheet MissingCellPolicy is to return null), then it will throw a NullPointerException. Another side-effect is that if there was a non-String cell value in the mis-referenced cell, it will inadvertently change the cell type to String.", "id": 190395, "time": "2016-04-19T21:39:06Z", "bug_id": 59355, "creation_time": "2016-04-19T21:39:06Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "idiotioc@gmail.com", "attachment_id": 33779, "text": "Comment on attachment 33779\nPatch for bug + testcase in TestXSSFPivotTable\n\nIndex: src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotTable.java\n===================================================================\n--- src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotTable.java\t(revision 1739932)\n+++ src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotTable.java\t(working copy)\n@@ -355,7 +355,8 @@\n         }\n         CTDataField dataField = dataFields.addNewDataField();\n         dataField.setSubtotal(STDataConsolidateFunction.Enum.forInt(function.getValue()));\n-        Cell cell = getDataSheet().getRow(pivotArea.getFirstCell().getRow()).getCell(columnIndex);\n+        Cell cell = getDataSheet().getRow(pivotArea.getFirstCell().getRow())\n+                .getCell(pivotArea.getFirstCell().getCol() + columnIndex);\n         cell.setCellType(Cell.CELL_TYPE_STRING);\n         dataField.setName(valueFieldName);\n         dataField.setFld(columnIndex);\nIndex: src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFPivotTable.java\n===================================================================\n--- src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFPivotTable.java\t(revision 1739932)\n+++ src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFPivotTable.java\t(working copy)\n@@ -32,6 +32,8 @@\n \n public class TestXSSFPivotTable extends TestCase {\n     private XSSFPivotTable pivotTable;\n+    private XSSFPivotTable offsetPivotTable;\n+    private Cell offsetOuterCell;\n     \n     @Override\n     public void setUp(){\n@@ -71,6 +73,45 @@\n \n         AreaReference source = new AreaReference(\"A1:C2\");\n         pivotTable = sheet.createPivotTable(source, new CellReference(\"H5\"));\n+        \n+        XSSFSheet offsetSheet = (XSSFSheet) wb.createSheet();\n+        \n+        Row tableRow_1 = offsetSheet.createRow(1);\n+        offsetOuterCell = tableRow_1.createCell(1);\n+        offsetOuterCell.setCellValue(-1);\n+        Cell tableCell_1_1 = tableRow_1.createCell(2);\n+        tableCell_1_1.setCellValue(\"Row #\");\n+        Cell tableCell_1_2 = tableRow_1.createCell(3);\n+        tableCell_1_2.setCellValue(\"Exponent\");\n+        Cell tableCell_1_3 = tableRow_1.createCell(4);\n+        tableCell_1_3.setCellValue(\"10^Exponent\");\n+        \n+        Row tableRow_2 = offsetSheet.createRow(2);\n+        Cell tableCell_2_1 = tableRow_2.createCell(2);\n+        tableCell_2_1.setCellValue(0);\n+        Cell tableCell_2_2 = tableRow_2.createCell(3);\n+        tableCell_2_2.setCellValue(0);\n+        Cell tableCell_2_3 = tableRow_2.createCell(4);\n+        tableCell_2_3.setCellValue(1);\n+        \n+        Row tableRow_3= offsetSheet.createRow(3);\n+        Cell tableCell_3_1 = tableRow_3.createCell(2);\n+        tableCell_3_1.setCellValue(1);\n+        Cell tableCell_3_2 = tableRow_3.createCell(3);\n+        tableCell_3_2.setCellValue(1);\n+        Cell tableCell_3_3 = tableRow_3.createCell(4);\n+        tableCell_3_3.setCellValue(10);\n+        \n+        Row tableRow_4 = offsetSheet.createRow(4);\n+        Cell tableCell_4_1 = tableRow_4.createCell(2);\n+        tableCell_4_1.setCellValue(2);\n+        Cell tableCell_4_2 = tableRow_4.createCell(3);\n+        tableCell_4_2.setCellValue(2);\n+        Cell tableCell_4_3 = tableRow_4.createCell(4);\n+        tableCell_4_3.setCellValue(100);\n+        \n+        AreaReference offsetSource = new AreaReference(new CellReference(\"C2\"), new CellReference(\"E4\"));\n+        offsetPivotTable = offsetSheet.createPivotTable(offsetSource, new CellReference(\"C6\"));\n     }\n \n     /**\n@@ -268,4 +309,20 @@\n         }\n         fail();\n     }\n+    \n+    /**\n+     * Verify that the Pivot Table operates only within the referenced area, even when the\n+     * first column of the referenced area is not index 0.\n+     */\n+    public void testAddDataColumnWithOffsetData() {\n+        offsetPivotTable.addColumnLabel(DataConsolidateFunction.SUM, 1);\n+        assertEquals(Cell.CELL_TYPE_NUMERIC, offsetOuterCell.getCellType());\n+        \n+        try {\n+            offsetPivotTable.addColumnLabel(DataConsolidateFunction.SUM, 0);\n+        } catch(NullPointerException e) {\n+            fail();\n+        }\n+        return;\n+    }\n }", "id": 190396, "time": "2016-04-19T21:41:00Z", "bug_id": 59355, "creation_time": "2016-04-19T21:41:00Z", "is_private": false}, {"count": 6, "tags": [], "creator": "idiotioc@gmail.com", "text": "Created attachment 33780\nPatch for bug + testcase in TestXSSFPivotTable", "id": 190397, "time": "2016-04-19T21:42:13Z", "bug_id": 59355, "creation_time": "2016-04-19T21:42:13Z", "is_private": false, "attachment_id": 33780}, {"count": 7, "tags": [], "text": "Applied via r1744635, thank you for the Patch!", "is_private": false, "id": 191121, "creation_time": "2016-05-19T20:18:42Z", "time": "2016-05-19T20:18:42Z", "creator": "dominik.stadler@gmx.at", "bug_id": 59355, "attachment_id": null}]
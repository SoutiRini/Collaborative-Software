[{"count": 0, "tags": [], "bug_id": 3963, "attachment_id": null, "id": 6351, "time": "2001-10-04T01:36:23Z", "creator": "vincent.hardy@sun.com", "creation_time": "2001-10-04T01:36:23Z", "is_private": false, "text": "> \n> george moudry wrote:\n> >\n> > Hi Christophe and Vincent,\n> > I modified the javascript code so it stores last few compiled scripts.\n> > I don't know the proper format of a patch email, so I'm sending output of a \n'diff' command.\n> > If I can help with some other format, let me know.\n> > Regards,\n> > /george\n> >\n> > PS. This tested okay on my IBM-JDK1.3 system on SuSE 7.2.\n> >\n> > Modified:    sources/org/apache/batik/script/rhino RhinoInterpreter.java\n> > gg@pes:~/prj/batik/sources/org/apache/batik/script/rhino > diff \nRhinoInterpreter.java.orig RhinoInterpreter.java\n> > 28a29\n> > > import org.mozilla.javascript.Script;\n> > 88a90,112\n> > >     // this Map holds precompiled objects, keyed by the text of the \nscript.\n> > >       private static java.util.TreeMap compiledScriptsMap = new \njava.util.TreeMap();\n> > >\n> > >       // store last 32 precompiled objects.\n> > >       // when we compile the 33rd, the eldest object will be deleted.\n> > >       private static final int MAX_CACHED_SCRIPTS = 32;\n> > >\n> > >       // allow debugging\n> > >       public static final boolean DEBUG = false;\n> > >\n> > >       // this variable 'staticIndex' is incremented on every access\n> > >       // (compiled objects with lowest index will be removed from Map)\n> > >       private static long staticIndex = 0;\n> > >\n> > >       /** helper class to remember both a compiled object and time when \nit was used.\n> > >        */\n> > >       class ScriptAndIndex {\n> > >               org.mozilla.javascript.Script   script;\n> > >               long                                                    \nlastUseIndex;\n> > >               ScriptAndIndex(Script s,long i){ script=s; lastUseIndex=i; \n}\n> > >       }\n> > >\n> > >\n> > 91c115,116\n> > <     /**\n> > ---\n> > >\n> > >       /**\n> > 95c120,124\n> > <      * value of the last expression evaluated in the script\n> > ---\n> > >      * value of the last expression evaluated in the script.\n> > >        *\n> > >        * 2001.Oct.03: we call compileReader()+exec() instead of \nevaluateReader().\n> > >        * This has the benefit that for \"onmousemove=bubbleYes(evt,'red')\" \ncode,\n> > >        * we do not re-compile and classload for every move of the mouse.\n> > 98,99c127,138\n> > <         throws InterpreterException, IOException {\n> > <         Object rv = null;\n> > ---\n> > >         throws InterpreterException, IOException\n> > >       {\n> > >               //first, read in entire script and convert it to string.\n> > >               // That was, we can use it as a Map key.\n> > >               StringBuffer sb = new StringBuffer();\n> > >               int chr = scriptreader.read();\n> > >               while(chr!=-1){\n> > >                       sb.append((char)chr);\n> > >                       chr = scriptreader.read();\n> > >               }\n> > >               String codeString = sb.toString();\n> > >\n> > 101,105c140,187\n> > <         try {\n> > <             rv = ctx.evaluateReader(globalObject,\n> > <                                     scriptreader,\n> > <                                     \"<SVG>\",\n> > <                                     1, null);\n> > ---\n> > >               Script script = null; //script will be either compiled \nfresh or looked up in the Map.\n> > >               synchronized(compiledScriptsMap){\n> > >                       ScriptAndIndex sni = (ScriptAndIndex) \ncompiledScriptsMap.get(codeString);\n> > >                       if(sni==null){\n> > >                               //this script has not been compiled yet:\n> > >                               //compile it and store it for future use.\n> > >                               script = ctx.compileReader( globalObject, \n//scope\n> > >                                                                           \n    new java.io.StringReader(codeString),\n> > >                                                                           \n    \"<SVG>\", //sourceName\n> > >                                                                           \n    1,               //lineNo\n> > >                                                                           \n    null );  //securityDomain\n> > >\n> > >                               \nif(compiledScriptsMap.size()>MAX_CACHED_SCRIPTS)\n> > >                               {\n> > >                                       //too many cached items - delete \nthe oldest entry.\n> > >                                       java.util.Iterator iter = \ncompiledScriptsMap.keySet().iterator();\n> > >                                       long oldestIndex = Long.MAX_VALUE;\n> > >                                       String oldestKey = null;\n> > >                                       while(iter.hasNext()){\n> > >                                               String key = (String) \niter.next();\n> > >                                               sni = (ScriptAndIndex) \ncompiledScriptsMap.get(key);\n> > >                                               if( \nsni.lastUseIndex<oldestIndex ){\n> > >                                                       oldestIndex = \nsni.lastUseIndex;\n> > >                                                       oldestKey   = key;\n> > >                                               }\n> > >                                       }\n> > >                                       \ncompiledScriptsMap.remove(oldestKey);\n> > >                               }\n> > >\n> > >                               // stroring is done here:\n> > >                               sni = new \nScriptAndIndex(script,staticIndex++);\n> > >                               compiledScriptsMap.put(codeString,sni);\n> > >                               if(DEBUG){ \nSystem.out.println(\"RhinoInterpreter: storing code for \"+codeString); }\n> > >\n> > >                       } else {\n> > >                               //this script has been compiled before,\n> > >                               //just update it's index so it won't get \ndeleted soon.\n> > >                               script = sni.script;\n> > >                               sni.lastUseIndex = staticIndex++;\n> > >                               if(DEBUG){ \nSystem.out.println(\"RhinoInterpreter: re-using code for \"+codeString); }\n> > >                       }\n> > >\n> > >               } //end sychronized\n> > >\n> > >         Object rv = null;\n> > >               try {\n> > >                       rv = script.exec(ctx, globalObject);"}, {"count": 1, "tags": [], "creator": "cjolif@apache.org", "attachment_id": null, "text": "apply an equivalent patch (avoiding string->reader->string->reader conversion)", "id": 6461, "time": "2001-10-08T08:21:12Z", "bug_id": 3963, "creation_time": "2001-10-08T08:21:12Z", "is_private": false}]
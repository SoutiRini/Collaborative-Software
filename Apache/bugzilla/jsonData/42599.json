[{"count": 0, "tags": [], "bug_id": 42599, "attachment_id": null, "text": "I've implemented a full-featured XPointer resource resolver, which suspectedly\ndepends on java-1.5\n\nPlease review the code, make it java-1.3 compatible and schedule the thing for\nintegration in xmlsec-1.5\n\nA problem with my implementation is, that it internally uses\nDocument.getElementByID(), which inly works on schema-validated DOM documents.\nThis is due to the internal implementation of XPath' id() function. Maybe\nsomeone will find a way to get around this feasibility problem for users, which\ndo not want to incorporate schema-validation in theier application?", "id": 104112, "time": "2007-06-06T00:54:56Z", "creator": "wolfgang.glas@iteg.at", "creation_time": "2007-06-06T00:54:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42599, "text": "Created attachment 20318\nMy XPointerResolver implementation for review/further development.", "id": 104113, "time": "2007-06-06T00:57:23Z", "creator": "wolfgang.glas@iteg.at", "creation_time": "2007-06-06T00:57:23Z", "is_private": false, "attachment_id": 20318}, {"count": 2, "tags": [], "bug_id": 42599, "text": "Added Raul to CC", "id": 104116, "attachment_id": null, "creator": "wolfgang.glas@iteg.at", "creation_time": "2007-06-06T01:36:39Z", "time": "2007-06-06T01:36:39Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 42599, "text": "Regarding the ID resolution issue: something similar came up on the dev list\nrecently.  If it really needs to work without schema validation, I think the\nonly option (short of implementing your own ID resolver, and it's not even clear\nhow that would work) is for the calling code to first pre-process the DOM\nDocument using knowledge of the content model, and find and mark/register the\nID's so they can be resolved.\n\nIf you want to assume DOM Level 3 support then the Attr nodes can be marked as\nan ID type with the Element#setID* methods.  (This is what we do in OpenSAML\nwhen we marshall to and unmarshall from the DOM model to our object provider model.)\n\nIf not, then you could register them manually with the Apache xmlsec library's\nIDResolver.  In org.apache.xml.security.utils.IdResolver, see:\nIdResolver#registerElementById(Element, Attr)\nIdResolver#registerElementById(Element, String)\n\nEither way, you probably want to use the Apache IDResolver in your code here,\nsince it just delegates to Document#getElementById anyway:\n\n// plain ID reference.\n  if (i==0 && !parts[i].startsWith(XP_OPEN))\n  {\n     node = this.baseNode.getOwnerDocument().getElementById(parts[i]);\n  }\n\nIf you're saying the javax.xml.xpath.XPath engine is hardcoded to use\nDocument#getElementByID internally, and doesn't have any way to modify how ID\nresolution works (e.g. ID resolver plugin, etc), then I guess you're stuck with\nmarking the Attr nodes as ID types (and limited to DOM Level 3 environments).", "id": 104149, "time": "2007-06-06T13:18:50Z", "creator": "putmanb@georgetown.edu", "creation_time": "2007-06-06T13:18:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 42599, "attachment_id": null, "text": "The code you cited here is just the short-circuit case, where a reference looks like\n\n\"#myref\"\n\nwhich is not a compliant XPath expression, but widely used in XML signatures.\nThe implementation with Document#getElementById() has been chosen in order be\ncompliant with the XPath resolver, who would be called lateron in the code for\nan expression like:\n\n\"#id('myref')\"\n", "id": 104152, "time": "2007-06-06T13:49:16Z", "creator": "wolfgang.glas@iteg.at", "creation_time": "2007-06-06T13:49:16Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 42599, "attachment_id": null, "text": "Please note, that I already developed a revised version (which better fits into\nthe infrastructure used by XML security) of the XPointerResourceResolver as part\nof the ECDSASignature junit test case in in bug 42239. Unfortunately, this test\ncase has not found it's way into the svn tree. Iwill ask Raul, if he can\nintegrate the test case there.", "id": 104153, "time": "2007-06-06T14:01:14Z", "creator": "wolfgang.glas@iteg.at", "creation_time": "2007-06-06T14:01:14Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 42599, "text": "Yes, I noticed the ID short-circuit case before, and I was wondering why you\nweren't just letting those be handled by the default fragment URI resolver\n(FragmentResolver) since that's exactly what it does. Meaning let that one run\nin the resolver chain before yours does.\n\nBut I had not noticed that your impl has a mandatory single-arg constructor that\ntakes the Node base node.  Does this not mean that this resolver can not be\nconfigured in the ResourceResolver chain in the Apache config.xml , and must be\nmanually registered (with the correct Node value) on each XMLSignature that\nyou're going to process?  So that means the caller has to know in advance that\nthey're going to be processing XPointer references and do the appropriate base\nnode resolution and resolver registration?\n\nIf would be nice if this base node Node could be resolved/inferred from the\n'Attr URI' and/or the 'String baseURI' that are passed into the engineResolve\nmethod of the ResourceResolverSpi, and eliminate the document-specific\nconstructor requirement.  Maybe this isn't possible due to the requirements of\nthe XPath and XPointer processing, I'm only passingly familiar with those\ntechnologies.\n\nBy the way, our OpenSAML user tried it out and it worked fine for him on the use\ncase I originally posted (subject to the resolver registration limitation).", "id": 104175, "time": "2007-06-07T09:29:33Z", "creator": "putmanb@georgetown.edu", "creation_time": "2007-06-07T09:29:33Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 42599, "text": "(In reply to comment #5)\n(moved from 42239)\nI've tried the xpointer resolver for generating signatures for the german\nbanking interface EBICS which uses #xpointer(//*[@authenticate='true']) to sign\nall elements with this attribute. Unfortunately, signing fails because\nCanonicalizerBase.canonicalizeXPathNodeSet strips away subnodes because\nisVisibleDO returns 0 for subnodes of nodes in the xpathnodeset. The check for\nvisibility in xpathnodesets probably should check if the element itself or one\nof its ancestors is contained in the xpathnodeset.\n\nRegards\nChristian", "id": 107021, "time": "2007-08-22T02:38:42Z", "creator": "drunix@gmx.de", "creation_time": "2007-08-22T02:38:42Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 42599, "attachment_id": null, "text": "(In reply to comment #7)\n> I've tried the xpointer resolver for generating signatures for the german\n> banking interface EBICS which uses #xpointer(//*[@authenticate='true']) to sign\n[...]\n\nAfter rechecking the EBICS spec I think there is a difference in what their\nreference declaration says what is to sign and what they actually want to sign\nbased on their informal description. They say that they want to sign everything\ncontained in elements with attribute authenticate set to true including the\nelements itself, so I think they actually want to sign\n\"//*[@authenticate='true']/descendant-or-self::*\". So probably\nCanonicalizerBase.canonicalizeXPathNodeSet is right thing to not include child\nnodes of selected nodes. ", "id": 107646, "time": "2007-09-03T01:37:34Z", "creator": "drunix@gmx.de", "creation_time": "2007-09-03T01:37:34Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 42599, "attachment_id": null, "text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > I've tried the xpointer resolver for generating signatures for the german\n> > banking interface EBICS which uses #xpointer(//*[@authenticate='true']) to sign\n> [...]\n> \n> After rechecking the EBICS spec I think there is a difference in what their\n> reference declaration says what is to sign and what they actually want to sign\n> based on their informal description. They say that they want to sign everything\n> contained in elements with attribute authenticate set to true including the\n> elements itself, so I think they actually want to sign\n> \"//*[@authenticate='true']/descendant-or-self::*\". So probably\n> CanonicalizerBase.canonicalizeXPathNodeSet is right thing to not include child\n> nodes of selected nodes. \n\n\nI have to correct my previous statement.The EBICS spec is correct:\nhttp://www.w3.org/TR/xmldsig-core/ says \n\n4.3.3.3 Same-Document URI-References\n\n[...] The application MUST behave as if the result of XPointer processing [XPointer-Framework] were a node-set derived from the resultant subresource as follows:\n\n   1. include XPath nodes having full or partial content within the subresource\n   2. replace the root node with its children (if it is in the node-set)\n   3. replace any element node E with E plus all descendants of E (text, comment, PI, element) and all namespace and attribute nodes of E and its descendant elements.\n   4. if the URI has no fragment identifier or the fragment identifier is a shortname XPointer, then delete all comment nodes\n\nIMHO  from 3. it is clear that we do not just have to include the nodes but also their descendants.", "id": 125457, "time": "2009-03-10T00:38:28Z", "creator": "drunix@gmx.de", "creation_time": "2009-03-10T00:38:28Z", "is_private": false}]
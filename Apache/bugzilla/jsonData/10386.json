[{"count": 0, "tags": [], "creator": "vpatryshev@borland.com", "attachment_id": null, "text": "Try this:\n\n    <property name=\"var7\" value=\"var7 not assigned\"/>\n    <condition property=\"var7\" value=\"var7 assigned\">\n      <isset property=\"${env.var0}\"/>\n    </condition>\n    <property name=\"var8\" value=\"var8 not assigned\"/>\n    <condition property=\"var8\" value=\"var8 assigned\">\n      <not>\n        <isset property=\"${env.var0}\"/>\n      </not>\n    </condition>\n    <echo message=\"${var7} ${var8}\"/>\n\nBoth will print \"not assigned\" - meaning that there must be an exception thrown\nor something. \n\nThis does not work correctly with 1.4.1 or the latest 1.6 either.\n\nI also tried this:\n\n    <property name=\"para0\" value=\"$\"/>\n    <property name=\"para1\" value=\"\\$\"/>\n    <property name=\"var0\" value=\"${env.var0}\"/>\n    <property name=\"var1\" value=\"var1 not assigned\"/>\n    <condition property=\"var1\" value=\"var1 assigned\">\n      <not>\n        <equals arg1=\"${env.var0}\" arg2=\"${para0}{env.var0}\"/>\n      </not>\n    </condition>\n    <property name=\"var2\" value=\"var2 not assigned\"/>\n    <condition property=\"var2\" value=\"var2 assigned\">\n      <not>\n        <equals arg1=\"${env.var0}\" arg2=\"${para1}{env.var0}\"/>\n      </not>\n    </condition>\n    <property name=\"var3\" value=\"var3 not assigned\"/>\n    <condition property=\"var3\" value=\"var3 assigned\">\n      <equals arg1=\"${env.var0}\" arg2=\"${para0}{env.var0}\"/>\n    </condition>\n    <property name=\"var4\" value=\"var4 not assigned\"/>\n    <condition property=\"var4\" value=\"var4 assigned\">\n      <equals arg1=\"${env.var0}\" arg2=\"${para1}{env.var0}\"/>\n    </condition>\n    <property name=\"var5\" value=\"var5 not assigned\"/>\n    <condition property=\"var5\" value=\"var5 assigned\">\n      <equals arg1=\"${env.var0}\" arg2=\"$${env.var0}\"/>\n    </condition>\n    <property name=\"var6\" value=\"var6 not assigned\"/>\n    <condition property=\"var6\" value=\"var6 assigned\">\n      <not>\n        <equals arg1=\"${env.var0}\" arg2=\"$${env.var0}\"/>\n      </not>\n    </condition>\n\nIn all these cases var1..var6 remain not assigned.\n\nIt is not logical, to have condition X and <not> condition X return false.", "id": 18819, "time": "2002-07-01T20:57:14Z", "bug_id": 10386, "creation_time": "2002-07-01T20:57:14Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 10386, "attachment_id": null, "id": 18820, "time": "2002-07-01T21:01:07Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-07-01T21:01:07Z", "is_private": false, "text": "Do not use the ${} syntax with <isset>.  Its asking for the property name, but \nwhen you use the ${} around it, its passing the property value, which is \nliterally \"${property.name}\" if its not set.\n\nCan we mark this as invalid now?"}, {"count": 2, "tags": [], "text": "Okay, I have removed ${}. The same result. And, from the logical point of view,\nit does not matter. Expression like these two, X and <not> X </not>, cannot both\nreturn false.", "attachment_id": null, "bug_id": 10386, "id": 18966, "time": "2002-07-03T20:21:32Z", "creator": "vpatryshev@borland.com", "creation_time": "2002-07-03T20:21:32Z", "is_private": false}, {"count": 3, "tags": [], "creator": "holtdl@yahoo.com", "attachment_id": null, "text": "But you're explicitly setting \"var7\" yourself -before- the condition -- and \n<condition> change that value.\n\nWatch:\n$ var0=foo ant -f test.xml\ndefault:\n    [echo] var7 not assigned var8 not assigned\n\nNow take out that <property>:\ndefault:\n     [echo] var7 assigned var8 not assigned", "id": 18972, "time": "2002-07-03T21:16:08Z", "bug_id": 10386, "creation_time": "2002-07-03T21:16:08Z", "is_private": false}, {"count": 4, "tags": [], "creator": "holtdl@yahoo.com", "attachment_id": null, "text": "Oops -- typo. Should've read: and <condition> won't change that value.", "id": 18973, "time": "2002-07-03T21:17:09Z", "bug_id": 10386, "creation_time": "2002-07-03T21:17:09Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 10386, "attachment_id": null, "id": 18983, "time": "2002-07-03T22:34:36Z", "creator": "vpatryshev@borland.com", "creation_time": "2002-07-03T22:34:36Z", "is_private": false, "text": "I am afraid there is a misunderstanding.\n\nI am talking about two conditions; one is the negation of another. One of them\nshould assign the value to the variable.\n\nWe can assume that the logic is not boolean here, so that A _or_ _not_ A may not\nbe true. But! In any sensible logic _not_ A _or_ _not_ _not_ A should be true.\nAnd it is not true either in our case (you can check this: <condition\nproperty=\"doublenegation\" value=\"is assigned\"><not><not><isset\nproperty=\"env.var0\"/></not></not></condition>)\n\nI am sorry, but I am not sure whether you understand me correctly. We can\ndiscuss it in normal e-mail, vpatryshev@borland.com, or over the phone, my\nnumber is (831)4311165\n\nThanks,\nVlad"}, {"count": 6, "tags": [], "bug_id": 10386, "attachment_id": null, "id": 18985, "time": "2002-07-03T23:07:05Z", "creator": "holtdl@yahoo.com", "creation_time": "2002-07-03T23:07:05Z", "is_private": false, "text": "Or maybe we should just bypass all the OR's and NOT's and just get down to \nwhat, in Ant, you're actually trying to do. I suspect that's where the real \nmisunderstanding may be.\n\nBTW: When var0 isn't set in the environment, var7 doesn't get set -- in case \nthat wasn't clear in my example. So if you were looking to have var7 hold a \ndefault value for cases where var0 isn't set in the env, then you simply need \nto move your default-value-setting <property> to after the <condition>."}, {"count": 7, "tags": [], "bug_id": 10386, "text": "It is obvious that when var0 is not set, the condition with isset does not set\nthe variable. But another condition, <not> <isset> does not set the variable either.\n\nYes, I agree; I can actually do something like this:\n\n<property name=\"value_of_var0\" value=\"not_assigned\"/>\n<condition property=\"value_of_var0\" value=\"${env.var0}\">\n  <isset property=\"env.var0\"/>\n</condition>\n\nMeaning that yes, I can bypass it.\n\nBut it is still a bug. Logical operators should work in a logical way.\n", "id": 18986, "time": "2002-07-03T23:39:18Z", "creator": "vpatryshev@borland.com", "creation_time": "2002-07-03T23:39:18Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "holtdl@yahoo.com", "attachment_id": null, "text": "> But another condition, <not> <isset> does not set the variable either.\n\nYes, it does -- but, again, you've got your defaults *before* your <condition>, \nand that will not work. You've got to move those to *after* the condition:\n<project default=\"whatever\">\n  <property environment=\"env\"/>\n  <target name=\"whatever\">\n    <condition property=\"var7\" value=\"var7 set because env.var0 IS set\">\n      <isset property=\"env.var0\"/>\n    </condition>\n    <property name=\"var7\" value=\"DEFAULT VALUE for var7\"/>\n    <condition property=\"var8\" value=\"var8 set because env.var0 is NOT set\">\n      <not>\n        <isset property=\"env.var0\"/>\n      </not>\n    </condition>\n    <property name=\"var8\" value=\"DEFAULT VALUE for var8\"/>\n    <echo message=\"${var7}   ${var8}\"/>\n  </target>\n</project>\n\n$ ant\nwhatever:\n     [echo] DEFAULT VALUE for var7   var8 set because env.var0 is NOT set\n$ var0=foo ant\nwhatever:\n     [echo] var7 set because env.var0 IS set   DEFAULT VALUE for var8", "id": 18988, "time": "2002-07-03T23:53:39Z", "bug_id": 10386, "creation_time": "2002-07-03T23:53:39Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 10386, "attachment_id": null, "id": 18989, "time": "2002-07-04T00:26:46Z", "creator": "vpatryshev@borland.com", "creation_time": "2002-07-04T00:26:46Z", "is_private": false, "text": "My error. It works perfectly if used properly."}]
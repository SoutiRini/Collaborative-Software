[{"count": 0, "tags": [], "bug_id": 46823, "attachment_id": null, "id": 125431, "time": "2009-03-09T01:54:42Z", "creator": "dev@cumiskey.com", "creation_time": "2009-03-09T01:54:42Z", "is_private": false, "text": "Rendering our own ./examples/fo/basic/blockcontainer.fo causes the BlockContainerLayoutManager to be unable to recover from content overflow.\n\nHere is the exception:\n\norg.apache.fop.layoutmgr.LayoutException: Content overflows the viewport of an fo:block-container in block-progression direction by 100800 millipoints. Content will be clipped. (See position 155:44)\n        at org.apache.fop.layoutmgr.LayoutException$LayoutExceptionFactory.createException(LayoutException.java:92)\n        at org.apache.fop.events.EventExceptionManager.throwException(EventExceptionManager.java:54)\n        at org.apache.fop.events.DefaultEventBroadcaster$1.invoke(DefaultEventBroadcaster.java:152)\n        at $Proxy0.viewportOverflow(Unknown Source)\n        at org.apache.fop.layoutmgr.BlockContainerLayoutManager.getNextKnuthElementsAbsolute(BlockContainerLayoutManager.java:533)\n        at org.apache.fop.layoutmgr.BlockContainerLayoutManager.getNextKnuthElements(BlockContainerLayoutManager.java:196)\n        at org.apache.fop.layoutmgr.BlockStackingLayoutManager.getNextKnuthElements(BlockStackingLayoutManager.java:304)\n        at org.apache.fop.layoutmgr.BlockLayoutManager.getNextKnuthElements(BlockLayoutManager.java:118)\n        at org.apache.fop.layoutmgr.FlowLayoutManager.getNextKnuthElements(FlowLayoutManager.java:115)\n        at org.apache.fop.layoutmgr.PageBreaker.getNextKnuthElements(PageBreaker.java:144)\n        at org.apache.fop.layoutmgr.AbstractBreaker.getNextBlockList(AbstractBreaker.java:553)\n        at org.apache.fop.layoutmgr.PageBreaker.getNextBlockList(PageBreaker.java:136)\n        at org.apache.fop.layoutmgr.AbstractBreaker.doLayout(AbstractBreaker.java:303)\n        at org.apache.fop.layoutmgr.AbstractBreaker.doLayout(AbstractBreaker.java:265)\n        at org.apache.fop.layoutmgr.PageSequenceLayoutManager.activateLayout(PageSequenceLayoutManager.java:107)\n        at org.apache.fop.area.AreaTreeHandler.endPageSequence(AreaTreeHandler.java:234)\n        at org.apache.fop.fo.pagination.PageSequence.endOfNode(PageSequence.java:120)\n        at org.apache.fop.fo.FOTreeBuilder$MainFOHandler.endElement(FOTreeBuilder.java:346)\n        at org.apache.fop.fo.FOTreeBuilder.endElement(FOTreeBuilder.java:177)\n        at org.apache.xalan.transformer.TransformerIdentityImpl.endElement(TransformerIdentityImpl.java:1101)\n        at org.apache.xerces.parsers.AbstractSAXParser.endElement(Unknown Source)\n        at org.apache.xerces.xinclude.XIncludeHandler.endElement(Unknown Source)\n        at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanEndElement(Unknown Source)\n        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)\n        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)\n        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)\n        at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)\n        at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n        at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)\n        at org.apache.xalan.transformer.TransformerIdentityImpl.transform(TransformerIdentityImpl.java:484)\n        at org.apache.fop.cli.InputHandler.transformTo(InputHandler.java:236)\n        at org.apache.fop.cli.InputHandler.renderTo(InputHandler.java:128)\n        at org.apache.fop.cli.Main.startFOP(Main.java:174)\n        at org.apache.fop.cli.Main.main(Main.java:205)"}, {"count": 1, "attachment_id": null, "bug_id": 46823, "text": "\nFWIW: in spite of the fact that this bug is marked as applicable to 'ALL' versions, I cannot reproduce the issue with FOP Trunk on Mac OS X (tried rendering to PDF or AWT).", "id": 125440, "time": "2009-03-09T10:50:04Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-09T10:50:04Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 46823, "attachment_id": null, "id": 125441, "time": "2009-03-09T10:53:45Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-09T10:53:45Z", "is_private": false, "text": "\nSorry, a bit too quick, but there is a logical explanation: I had commented out the last fo:block-container, which has a overflow='error-if-overflow', so the fact that you get an exception is expected."}, {"attachment_id": null, "tags": [], "bug_id": 46823, "is_private": false, "count": 3, "id": 125451, "time": "2009-03-09T13:58:31Z", "creator": "dev@cumiskey.com", "creation_time": "2009-03-09T13:58:31Z", "text": "I should have looked at the FO more closely...  still, this is not a very good example for someone wanting to try FOP out.  It would be better to remove the error on overflow and generate some useful output for the user. WDYT?"}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> I should have looked at the FO more closely...  still, this is not a very good\n> example for someone wanting to try FOP out.  It would be better to remove the\n> error on overflow and generate some useful output for the user. WDYT?\n\nGood idea. Indeed, a dubious demo file. :-)", "is_private": false, "id": 125452, "creation_time": "2009-03-09T14:05:29Z", "time": "2009-03-09T14:05:29Z", "creator": "adelmelle@apache.org", "bug_id": 46823, "attachment_id": null}, {"count": 5, "tags": [], "creator": "spepping@apache.org", "attachment_id": null, "text": "The spec says: error-if-overflow: This value implies the same semantics as the value \"hidden\" with the additional semantic that an error shall be indicated; implementations may recover by clipping the region.\n\nThe code says: boolean canRecover = (getBlockContainerFO().getOverflow() != EN_ERROR_IF_OVERFLOW); (BlockContainerLayoutManager, line 533).\n\nDoes that not mean that the code is wrong: it should recover, but issue an ERROR instead of a WARNING?", "id": 125732, "time": "2009-03-24T03:26:54Z", "bug_id": 46823, "creation_time": "2009-03-24T03:26:54Z", "is_private": false}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> The spec says: error-if-overflow: This value implies the same semantics as the\n> value \"hidden\" with the additional semantic that an error shall be indicated;\n> implementations may recover by clipping the region.\n> \n> The code says: boolean canRecover = (getBlockContainerFO().getOverflow() !=\n> EN_ERROR_IF_OVERFLOW); (BlockContainerLayoutManager, line 533).\n> \n> Does that not mean that the code is wrong: it should recover, but issue an\n> ERROR instead of a WARNING?\n\nThe spec says \"may recover\", it doesn't say \"should recover\", so it isn't technically wrong. That doesn't mean it can't be changed. But my personal expectation is an error if I explicitely say \"error-if-overflow\" instead of \"hidden\". If I say \"hidden\" I don't care if any content is lost.", "is_private": false, "id": 125737, "creator": "jeremias@apache.org", "time": "2009-03-24T04:11:44Z", "bug_id": 46823, "creation_time": "2009-03-24T04:11:44Z", "attachment_id": null}, {"count": 7, "attachment_id": 23407, "bug_id": 46823, "is_private": false, "id": 125750, "time": "2009-03-24T05:42:14Z", "creator": "spepping@apache.org", "creation_time": "2009-03-24T05:42:14Z", "tags": [], "text": "Created attachment 23407\nProposed patch\n\nWould the attach patch solve the problem in a good way?"}, {"count": 8, "tags": [], "bug_id": 46823, "attachment_id": null, "id": 125771, "time": "2009-03-24T10:24:51Z", "creator": "jeremias@apache.org", "creation_time": "2009-03-24T10:24:51Z", "is_private": false, "text": "(In reply to comment #7)\n> Created an attachment (id=23407) [details]\n> Proposed patch\n> \n> Would the attach patch solve the problem in a good way?\n\nI think you're doing pretty much the same thing I did there, only in reverse. I specified the event for FATAL level, and \"canRecover\" can lower the severity to WARN. Your change would set the default level to WARN and increase it to ERROR if it's error-on-overflow. The only difference is that the error cause used FATAL before and uses ERROR after the change which would effectively not stop the formatting and allow the user to increase the event severity to FATAL if he so chooses. You could skip the isError attribute and just set all overflow events to ERROR level by default (Javadoc @event.severity). That would have the same effect. Don't forget that the block-container case is not the only overflow where an error is possible. As I said before I'm not opposed to lowering FATAL to ERROR for \"error-if-overflow\". A custom event handler can always throw an exception."}, {"count": 9, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "attachment_id": null, "bug_id": 46823, "id": 157374, "time": "2012-04-07T01:42:03Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:42:03Z", "is_private": false}]
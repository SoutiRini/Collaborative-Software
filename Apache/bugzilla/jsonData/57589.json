[{"count": 0, "tags": [], "bug_id": 57589, "is_private": false, "text": "Our product is Adobe Media Server (AMS). It uses the Apache web server for streaming multimedia over HTTP. There are 4 Apache httpd modules developed by us that are included in our Apache build. One of these modules \u2013 mod_f4fhttp.so is concerned with live streaming of multimedia using the HDS standard.\n\nIssue: For some unconditional GET requests, querying the Apache APR API apr_table_get for \u201cIf-Modified-Since\u201d header field returns a valid value.\n\nThis issue is observed only in the release build of Apache web server. The setup consists of Flash Media Live Encoder (FMLE) as the live video publisher and 3 video subscribers (OSMF Player 2.0 instances embedded in web browsers). With Apache httpd release build, the issue crops up within 10 minutes of live streaming. When the debug build is used, the issue does not appear even after 2 hours of streaming.\n\nThe mod_f4fhttp.so module uses the Apache API function apr_table_get to query the request object for the presence of \u201cIf-Modified-Since\u201d header field. The problem arises when this API returns a valid non-null value for the \u201cIf-Modified-Since\u201d header field even when it is not present (i.e. it\u2019s an unconditional GET) in the HTTP request.  This can be confirmed by the logs (attached) of packet capture tools.\n\nThis behavior causes the mod_f4fhttp.so module to think that the HTTP request is a conditional one and so it returns a 304 response code. This is a problem for the client since it had generated an unconditional GET request.\n\nThis (querying the \u201cIf-Modified-Since\u201d header) was done at the entry point of the module mod_f4fhttp.so, so this eliminates the possibility of the module itself inserting this field in the request.\n\nIt does not matter whether the debug or release version of mod_f4fhttp.so module is used \u2013 regardless of that, the issue can be seen in the Apache httpd release build only. The issue cannot be reproduced in the debug build of Apache httpd.\n\nThree different network packet capture tools were used \u2013 Wireshark, Windump and HTTPDebugger.  There are no differences between their capture logs i.e. 304 responses for unconditional GET requests can be seen in all of them. The logs are attached here.\n\nSteps to reproduce the issue:\n1. Install Adobe Media Player (AMS) 5.0.7. During installation, when it asks for a serial number, leave it blank \u2013 this will install the \u201cStarter Edition\u201d. Leave all other options unchanged during installation. The limitation of \u201cStarter Edition\u201d is that it allows 10 minutes of streaming, which is enough to reproduce this issue. \n2. Copy crossdomain.xml to \u201cwebroot\u201d folder in the AMS installation.\n3. Install Flash Media Live Encoder (FMLE) 3.2.\n4. Launch FMLE. \n\to Ensure the following settings in the presets\n\tVideo:\n\tFormat: H.264\n\tProfile: Main\n\tLevel: 3.1\n\tKeyframe Frequency: 4 seconds\n\tFrame Rate: 30.00 fps\n\tInput Size: 320x240\n\tBit Rate: 200 Kbps\n\tOutput Size: 320x240\n\n\tAudio:\n\tFormat: Mp3\n\tChannels: Stereo\n\tSample Rate: 44100 Hz\n\tBit Rate: 96 Kbps\n\n\to Set the following fields in the Output box\n\t\t\uf0a7 Check \u201cStream to Flash Media Player\u201d\n\t\t\uf0a7 FMS URL: rtmp://localhost/livepkgr\n\t\t\uf0a7 Stream: livestream?adbe-live-event=liveevent\n\n\to Click on Connect. [The button\u2019s caption should now change to \u201cDisconnect\u201d].\n\to Click on Start (the green button at the bottom of the window). This will start the publishing stream from FMLE to AMS.\n5. Launch OSMF Player instances. The player has to be hosted on an http server. A second machine can be used for this. In a web browser, open the OSMF Player web page. E.g. http://localhost/OSMFP/OSMFPlayer.html. The attached OSMFPlayer build can be used. Two more instances of the player can launched \u2013 either in the same browser or different ones. If the player launches successfully, a control console will be visible in a smaller window on the web page. Click on the \u201cEject\u201d button to open the \u201cMedia URL\u201d textbox. Enter the URL of the live stream manifest in this box \u2013 http://<hostname or IP address where AMS is installed>/hds-live/livepkgr/_definst_/liveevent/livestream.f4m - and press Enter. The live stream should now start playing in the window.\n\n\nNotes\n\u2022 When caching is disabled (by commenting out \"CacheEnable disk /hds-live\" in httpd.conf), this issue does not arise. \n\u2022 The same issue is also confirmed to be present in Apache httpd v2.2.21\n\nDownload links:\nAdobe Media Server (AMS) - http://www.adobe.com/in/products/adobe-media-server-standard.html\nFlash Media Live Encode (FMLE) - http://www.adobe.com/in/products/flash-media-encoder.html\nOSMF Player 2.0 source - http://sourceforge.net/projects/osmf.adobe/files/OSMF%202.0%20Release%20%28final%20source%2C%20ASDocs%2C%20pdf%20guides%20and%20release%20notes%29/\n\n\nAttachments\n\u2022 Packet capture logs\n\to Wireshark \u2013 \u201cwireshark-s.pcapng\u201d. Frame 297 is the HTTP request for a video fragment. Its response is in Frame 298.\n\to Windump \u2013 \u201cwindump.log\u201d. Check the end of the log for the 304 response.\n\to HTTPDebugger \u2013 \u201chttp debugger - headers.txt\u201d\n\u2022 crossdomain.xml\n\u2022 OSMF Player", "id": 181123, "time": "2015-02-18T07:24:56Z", "creator": "bala@adobe.com", "creation_time": "2015-02-18T07:24:56Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 57589, "text": "Attachments can be downloaded from \nhttps://www.dropbox.com/sh/k3o3secxlafac1e/AACBvW0k3y_u7AAwV1NZC9cta?dl=0", "id": 181124, "time": "2015-02-18T07:37:41Z", "creator": "bala@adobe.com", "creation_time": "2015-02-18T07:37:41Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57589, "is_private": false, "text": "It is inconceivable that apr_table_get() will return a table entry that doesn't exist.  There may be memory corruption in the process that has corrupted the table or there may be errors in your observation of the activity or something else.\n\nIn the event that I am incorrect in my assessment, you're still the only one in a position to find the root cause.  Good luck!", "id": 181726, "time": "2015-03-13T12:00:31Z", "creator": "trawick@apache.org", "creation_time": "2015-03-13T12:00:31Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57589, "is_private": false, "id": 181742, "creation_time": "2015-03-13T19:10:53Z", "time": "2015-03-13T19:10:53Z", "creator": "nick@webthing.com", "text": "Jeff, yes, it's inconceivable that it's a bug in APR, but the behaviour described could point to a bug in HTTPD's proxy/cache framework.\n\nTo the OP: My best guess is that httpd, having the object in cache but potentially stale, sends a conditional request to the origin.  The bug is in the assumptions your module makes in checking the headers.\n\nThe best place to discuss this would probably be the modules-dev list.", "attachment_id": null}]
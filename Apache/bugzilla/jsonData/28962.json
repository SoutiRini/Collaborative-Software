[{"count": 0, "tags": [], "bug_id": 28962, "attachment_id": null, "is_private": false, "id": 57376, "time": "2004-05-13T19:39:09Z", "creator": "jonl@muppetlabs.com", "creation_time": "2004-05-13T19:39:09Z", "text": "a CRITICAL error is not FATAL, but it is worse than a regular ERROR because it\nindicates that FATALity may be imminent.  CRITICAL errors might typically page\nsomeone.  i think it would be worthwhile to add this extra granularity to\nnon-fatal errors."}, {"count": 1, "tags": [], "bug_id": 28962, "attachment_id": null, "text": "oops... sorry, wrong version.  i'm using log4j version 1.2.8.\n\nand thanks!\n", "id": 57377, "time": "2004-05-13T19:40:02Z", "creator": "jonl@muppetlabs.com", "creation_time": "2004-05-13T19:40:02Z", "is_private": false}, {"text": "Hello Jon,\n\nI think that, given that an error is an error, distinguishing between FATAL\nand non-FATAL errors is somewhat useless or even silly. If log4j could be\ndone all over again, I'd only use ERROR, WARN, INFO and DEBUG. FATAL would not \nbe included in the list.\n\nComing back to your suggestion, why would one care distinguish between an error\nand a critical error? Presumably, both types are going to be logged... \n ", "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "count": 2, "id": 57427, "time": "2004-05-14T16:43:09Z", "bug_id": 28962, "creation_time": "2004-05-14T16:43:09Z", "is_private": false}, {"text": "If the goal is to process in a different way (use smtpappender, etc) near-FATAL\nevents, it seems that this is supported in the upcoming alpha release by\nspecifying a filter on an appender matches when an MDC entry is set on the event\n(for example, FAILURE_IN_10_MINUTES=true).", "tags": [], "creator": "sdeboy@iname.com", "attachment_id": null, "count": 3, "id": 57430, "time": "2004-05-14T16:52:43Z", "bug_id": 28962, "creation_time": "2004-05-14T16:52:43Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 28962, "attachment_id": null, "text": "the main reason for wanting to distinguish between normal errors and critical\nerrors has to do with the treatment of the errors in operating a complex system.\n in many cases, you will have dozens of errors being logged which do not require\nthe immediate attention of an operator or developer.  \n\nfor the same reason that log4j distinguishes between \"warn\" and \"error\", i think\nthe \"fatal\" distinction is actually a very good one.  if a fatal error happens,\ni want special stuff to happen like getting a text message on my cell phone. \nwhile the MDC feature that scott mentions below might work, it strikes me as a\nbit non-intuitive.  \n\nthe ultimate problem is that errors aren't just errors.  they come in\n\"disposition\" classes based on what kind of handling they are going to require\nby human beings (i agree with you that this is not quite as true in\ncode-based-error-handling where an error is an error to a much larger extent...\nalthough VirtualMachineError is a much different kind of error than\nNumberFormatException and might be handled pretty differently!).\n\nthe thing that seems to be missing here that would make critical and fatal error\nclasses truly useful is a way of easily mapping errors to appenders based on\nerror disposition.  i think it's not really enough to simply enable or disable\nlogging at a given node in the hierarchy of loggers.  that's very powerful, as\nall us log4j users know... but you also want to be able to direct errors of a\ngiven disposition level to different types of appenders at each node.\n\nin other words, instead of saying:\n\n  # Set root logger level to DEBUG and its only appender to Console\n  log4j.rootLogger=DEBUG,Console\n\ni want to be able to say:\n\n  # Set root logger level to DEBUG \n  log4j.rootLogger.level=DEBUG\n  log4j.logger.com.whatever.level=WARNING\n\n  # Set mapping of appenders for root logger\n  log4j.rootLogger.appenders.DEBUG=Console,Socket\n  log4j.rootLogger.appenders.WARNING=File\n  log4j.rootLogger.appenders.ERROR=File,Email\n  log4j.rootLogger.appenders.CRITICAL=File,Email\n  log4j.rootLogger.appenders.FATAL=File,Email,Pager\n\nnow, when a given class has the right level of logging set, it will\nautomatically go to the right appenders where it can be handled by the right\nkinds of human beings.  in this scheme... you can set up your appender mapping\nfor a given logger and then fuss with the levels separately!\n\nam i making more sense now?\n\nbtw, i'm working on an interesting abstraction that wraps Log4J in something\nmore general and abstract.  the idea is to allow Log4J to be plugged in without\nusing it directly.  i'm using a mediator pattern where classes call a factory to\nget a broadcaster for a class and code category.  the broadcaster then has\nmethods that ultimately map onto a set of listener interfaces.  one of the\nimplementers of my ICodeListener interface is Log4J.  but interestingly, OTHER\nkinds of things can listen to your code's operational information as well.  if\nanyone has interest in working on this with me, i could discuss open sourcing\nthis with my business partner.  please contact me at jonl@muppetlabs.com if you\nwant to talk about this...\n\nthanks for listening!", "id": 57434, "time": "2004-05-14T18:04:42Z", "creator": "jonl@muppetlabs.com", "creation_time": "2004-05-14T18:04:42Z", "is_private": false}, {"count": 5, "tags": [], "creator": "paul.smith@lawlex.com.au", "attachment_id": null, "id": 57470, "time": "2004-05-15T03:24:16Z", "bug_id": 28962, "creation_time": "2004-05-15T03:24:16Z", "is_private": false, "text": "IHMO, this is where you would just use a different logger.  It's still an \nERROR, but your app deems a particular event to be worthy of some other \nconsideration, and so I would suggest doing something like:\n\nprivate static final Logger LOG = Logger.getLogger(MyClass.class);\nprivate static final Logger CRITICAL_LOGGER = Logger.getLogger\n(\"MyApp.HolySmokeBatman\");\n\n.....\n\ncatch(RunForTheHillsException e){\n LOG.error(\"Hmm, better get the running shoes on\", e);\n CRITICAL_LOGGER.error(\"Core Meltdown - It's been nice knowing you\", e);\n}\n\nThis way you can still log an Error, but decide when an error really is serious \nenough to do something different.\n\nAdding a CRITICAL level just leads us down a road of Level explosion: \nCRITICAL_BUT_NOT_DEADLY, and FATAL_BUT_WE_HAVE_HOPE_NO_ONE_GOT_KILLED.\n\n"}, {"count": 6, "tags": [], "bug_id": 28962, "attachment_id": null, "is_private": false, "id": 57497, "time": "2004-05-16T04:22:01Z", "creator": "bill-apache@carpenter.org", "creation_time": "2004-05-16T04:22:01Z", "text": "I'm not particularly supporting CRITICAL, but the workaround suggested above \nof having a particular appender for CRITICAL_LOGGER suffers from a pragmatic \nlimitation.  Different component software might make different choices about \nwhat the CRITICAL_LOGGER's identity is.  What hope does the end use have if 5 \ndifferent embedded components all work differently?  (This is a general \nproblem with the standard log4j expert advice of \"here are the piece-parts; \nroll your own\".  The advice assumes total control of the whole application, \nincluding embedded components.)"}, {"text": "you are correct that having a separate logger for critical errors would work. \nand that seems like a good workaround for me.  if that's the community consensus\nfor how this should be handled, i'm good with that...\n\nin fact, if levels can only to be used for controlling verbosity, i agree with\nyou all on all the above points (being able to crank the volume down and only\nlisten to critical errors is pretty useless!  and i agree with ceki that fatal\nis useless in this context as well).  but if levels could be used to determine\nwhich appender(s) get called, i would argue more strongly for critical.  i think\ncritical errors really are different from normal errors in the same way that\nerrors are different from warnings and warnings are different from \"info\".  i\nstill think it would be nice and very powerful to make it \"config-file-easy\" to\nredirect output based on priority level. \n", "tags": [], "creator": "jonl@muppetlabs.com", "attachment_id": null, "count": 7, "id": 57498, "time": "2004-05-16T04:29:52Z", "bug_id": 28962, "creation_time": "2004-05-16T04:29:52Z", "is_private": false}]
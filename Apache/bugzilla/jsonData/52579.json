[{"count": 0, "tags": [], "creator": "hayashihra@nttdata.co.jp", "is_private": false, "text": "Created attachment 28251\nJSP file to reproduce the matter\n\n(1) Overview\n\nWhen I install Tomcat5.5.35\uff0bjdk1.5.0_22 and run the JSP(please see the attached document),\nI cannot get proper value of a request parameter.\n\nI enter multibyte character (e.g. 10 or aa) into the textbox of the JSP,\nit runs correcly and i can get the input value (e.g. 10 or aa).\nBut I enter 1 byte character (e.g. \"1\" or \"a\"),\nit runs incorrectly and i can get nothing.\n\nPlease advise me.\n(Our customers are also waiting for the reason.)\nThank you.\n\n\n(2) Steps to Reproduce\n[2-1] Install Tomcat5.5.35\uff0bjdk1.5.0_22\n[2-2] Deploy the JSP file in the following directory.\n      /apache-tomcat-5.5.35/webapps/jsp-examples\n[2-3] Enter the 1 byte character (e.g. \"1\" or \"0\") to the textbox and push ok button.\n\n\n(3) Actual Results\nThe \"message\" shows nothing.\n\n\n(4) Expected Results\nThe \"message\" shows the input character.\n\n\n(5) Build Date & Platform\nBuild 2012-02-02 on Windows7\n(I suppose it does not depend on the Platform.)\n\n\n(6) Additional Information\nTomcat5.5.34\uff0bjdk1.5.0_22 runs correctly.\nSo the following codes may be the reason:\n\n---\norg.apache.tomcat.util.buf.ByteChunk.toStringInternal()\n\n# Line514\n\nCharBuffer cb;\ncb = charset.decode(ByteBuffer.wrap(buff, start, end-start));\nreturn new String(cb.array(), cb.arrayOffset(), cb.length());\n---", "id": 153357, "time": "2012-02-02T10:03:26Z", "bug_id": 52579, "creation_time": "2012-02-02T10:03:26Z", "attachment_id": 28251}, {"count": 1, "tags": [], "bug_id": 52579, "attachment_id": null, "text": "Similar recent discussion on users@:\n(\"POST data (single character) cleared when using tomcat 6.0.33 and Character Encoding Filter\")\nhttp://marc.info/?t=132668010800001&r=1&w=2\nhttp://markmail.org/message/o7l2p7ve5cpswnzl\n\nYou stumbled upon bug in charset implementation in Java 1.5:\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6196991", "id": 153358, "time": "2012-02-02T10:37:21Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-02-02T10:37:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52579, "attachment_id": 28252, "is_private": false, "id": 153360, "time": "2012-02-02T11:00:11Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-02-02T11:00:11Z", "text": "Created attachment 28252\nTest.java - Test Charset.decode()\n\nI am attaching a test class that I wrote based on reproduction scenario in bug 6196991 + charset enumeration code from r1140904.\n\nThis test prints names of charsets that cannot perform encoding+decoding roundtrip for single \"A\" character.\n\n\nHere is the list of charsets that are affected by this issue,\ntested with 1.5.0_20-b02, on Windows:\n---\nBig5\nBig5-HKSCS\nEUC-JP\nEUC-KR\nGB2312\nGBK\nISO-2022-JP\nJIS_X0212-1990\nShift_JIS\nwindows-31j\n+ two dozens of non-standard charsets whose names start with \"x-\"\n---\n\nWith 1.4.2_19-b04 on Windows the list is the same less GB2312 which is absent.\n\nWith 1.6.0_30-b12 on Windows the list contains this only charset:\n----\nJIS_X0212-1990\n+ 4 non-standard charsets whose names start with \"x-\"\n----\n\nSo:\n1. The issue is indeed a bug in JRE.\n\nIt is present in latest public versions of 1.4 and 1.5 that I have. I do not know anything about later \"Java for business\" versions.\n\n2. The issue is absent in Oracle/Sun JDK 1.6.30.\n\n3. The issue affects only certain encodings.\n\nIf you can update your configuration and applications to use UTF-8, you would avoid this issue."}, {"count": 3, "tags": [], "bug_id": 52579, "text": "Created attachment 28257\nnew implementation of ByteChunk.toStringInternal()\n\nHi All.\n\nI am using Charaset affected by this issue.\nAlthough I know this is a issue in Java, \nI propose  new implementation of ByteChunk.toStringInternal().\n\nI will propose to STATUS.txt. (both 5.5.x and 6.0.x)", "id": 153394, "time": "2012-02-03T09:32:27Z", "creator": "kfujino@apache.org", "creation_time": "2012-02-03T09:32:27Z", "is_private": false, "attachment_id": 28257}, {"count": 4, "tags": [], "creator": "hayashihra@nttdata.co.jp", "text": "Thank you very much for the answer, Mr. Kolinko.\nAnd Thank you for the patch to the issue, Mr. Fujino.\n\nI tried to run the program from Mr. Kolinko,\nand could get the \"Broken charset\" like Shift_JIS.\n\nI could understand that the issue is a bug in JRE,\nand it is sure that the support limitation of Java5 was over.\nThank you, sir.\n\nOn the other hand, there is a message\"Tomcat5.5.x requires 5.0 or later\"on the page.\nhttp://tomcat.apache.org/tomcat-5.5-doc/building.html#Download_and_install_a_Java_Development_Kit_1.4.x_or_later\n\nSo, We hope to get the patch to the program.\n\nThank you very much.", "id": 153398, "time": "2012-02-03T10:22:20Z", "bug_id": 52579, "creation_time": "2012-02-03T10:22:20Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 52579, "is_private": false, "id": 153426, "time": "2012-02-04T00:46:39Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-02-04T00:46:39Z", "tags": [], "text": "(In reply to comment #3)\n> Created attachment 28257 [details]\n> new implementation of ByteChunk.toStringInternal()\n>\n\n-1. There are two errors:\n\n1) \"return new String(buff, start, end-start);\" is just wrong. It converts bytes to String using OS default encoding.\n\nAs far as I understand the \"result.isUnderflow()\" condition means that all input data has been processed. This \"return new String\" code just handles an unexpected state.\n\nI suggest to replace that code by  \"cr.throwException();\".\n\n2) \"charset.newDecoder()\" is expected to be an expensive operation. In scenario of CVE-2012-0022 I expect it to have notable impact on performance.\n\nCharset.decode() uses a ThreadLocal-based cache of decoders. Maybe we can implement something like that cache, or just use a simple ThreadLocal (or other way) to pass a Decoder instance around while processing the same request."}, {"count": 6, "attachment_id": null, "bug_id": 52579, "text": "(In reply to comment #5)\n> Maybe we can \n> implement (...) just use a simple ThreadLocal\n> to pass a Decoder instance around while processing the same request.\n\nIf a Decoder instance is obtained from a ThreadLocal a quick way to test it against required charset is to compare it with decoder.charset().\n\n\n3) For large input data the current implementation that calls Charset.decode() is better than the proposed one, because it allocates less memory. The difference is between (size * averageCharsPerByte()) and (size * maxCharsPerByte()).\n\nI think threshold can be around 10 bytes.\n\nThe Java bug #6196991 occurs when the value of (input size * decoder.averageCharsPerByte()) coerced to integer is 0.  In this case in Java 5 the CharsetDecoder#decode(ByteBuffer) method erroneously treats it as if no input data were available. If input is > 10 bytes it should not trigger the bug #6196991.", "id": 153427, "time": "2012-02-04T01:29:57Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-02-04T01:29:57Z", "tags": [], "is_private": false}, {"attachment_id": 28274, "tags": [], "bug_id": 52579, "text": "Created attachment 28274\npatch v2\n\nMany thanks for the comments.\n\nI reimplement ByteChunk.toStringInternal().\n\n> I suggest to replace that code by  \"cr.throwException();\".\n\nThe code was replaced by result.throwException(). \nCharacterCodingException is thrown as RuntimeException. \n\n> Charset.decode() uses a ThreadLocal-based cache of decoders. Maybe we can\n> implement something like that cache, or just use a simple ThreadLocal (or other\n> way) to pass a Decoder instance around while processing the same request.\n\nCache of Decoder was created using simple ThreadLocal.\nThis cache is very simple now. \nOnly one Decoder instance is always cached.\nIf you would like to cache two or more Decoder instances, it is necessary to refactor. \nIn that case, a code will become complicated to a slight degree. \n\n> 3) For large input data the current implementation that calls Charset.decode()\n> is better than the proposed one, because it allocates less memory. The\n> difference is between (size * averageCharsPerByte()) and (size *\n> maxCharsPerByte()).\n>\n> I think threshold can be around 10 bytes.\n\nThe threshold value was added.", "count": 7, "id": 153494, "time": "2012-02-06T08:20:18Z", "creator": "kfujino@apache.org", "creation_time": "2012-02-06T08:20:18Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 52579, "text": "I am still leaning heavily towards WONTFIX for this.\n\nThis issue affects a version of the JVM where fixes are no longer provided for free by Oracle. Users of such a JVM have two options:\n1. Upgrade to a JVM release (minimum 1.6) where this is fixed and Oracle continue to make fixes freely available.\n2. Pay for Oracle support.\n\nI am extremely reluctant to start adding significant chunks of code into what is a very old Tomcat release in order to work around a bug in a JVM that no-one should be using unless they are paying for support.", "id": 153889, "time": "2012-02-17T18:29:36Z", "creator": "markt@apache.org", "creation_time": "2012-02-17T18:29:36Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 52579, "is_private": false, "text": "I am vetoing this proposed fix. My reasons are set out in comment #8 above.", "id": 162482, "time": "2012-10-01T08:12:22Z", "creator": "markt@apache.org", "creation_time": "2012-10-01T08:12:22Z", "attachment_id": null}]
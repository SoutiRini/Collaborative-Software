[{"count": 0, "tags": [], "bug_id": 59104, "attachment_id": null, "id": 189041, "time": "2016-03-03T04:09:07Z", "creator": "trejkaz@trypticon.org", "creation_time": "2016-03-03T04:09:07Z", "is_private": false, "text": "In our build, we are using <makeurl> to generate the URL for log4j.configuration:\n\n    <makeurl file=\"${project.dir}/src/config/log4j.properties\"\n             property=\"log4j.configuration.url\"/>\n\nOn Windows, log4j fails to loadf the configuration, because the URL Ant has generated is missing one slash.\n\n[exec] log4j:ERROR Could not read configuration file from URL [file://H:/hudson/sharedspace/trunk/os/windows/src/config/log4j.properties].\njava.net.UnknownHostException: H\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat java.net.Socket.connect(Socket.java:538)\n\tat sun.net.ftp.impl.FtpClient.doConnect(FtpClient.java:957)\n\tat sun.net.ftp.impl.FtpClient.tryConnect(FtpClient.java:917)\n\tat sun.net.ftp.impl.FtpClient.connect(FtpClient.java:1012)\n\tat sun.net.ftp.impl.FtpClient.connect(FtpClient.java:998)\n\tat sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:294)\n\tat sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:393)\n\tat org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:557)\n\tat org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:526)\n\tat org.apache.log4j.LogManager.<clinit>(LogManager.java:127)\n\tat org.apache.log4j.Logger.getRootLogger(Logger.java:135)\n\tat Main.main(Main.java:59)\n\nSo as you can see, it has generated:\n    file://H:/hudson/sharedspace/trunk/os/windows/src/config/log4j.properties\nBut it should have been:\n    file:///H:/hudson/sharedspace/trunk/os/windows/src/config/log4j.properties\n\nAnt isn't doing anything particularly mysterious to convert it:\n\n        return new File(path).toURI().toASCIIString();\n\nBut back in v1.6.5, there was code that appears to be special casing this exact thing:\n\n        // catch exception if normalize thinks this is not an absolute path\n        try {\n            path = normalize(path).getAbsolutePath();\n            sb.append(\"//\");\n            // add an extra slash for filesystems with drive-specifiers\n            if (!path.startsWith(File.separator)) {\n                sb.append(\"/\");\n            }\n        } catch (BuildException e) {\n            // relative path\n        }\n\nSo I think it's fair to consider this a regression in Ant even if the real bug is in the JRE.\n\nThe code in v1.9.6 is using the same utility method, so I'm assuming it will cause the same behaviour and haven't tried upgrading to it."}, {"count": 1, "tags": [], "bug_id": 59104, "attachment_id": null, "is_private": false, "id": 201920, "time": "2017-11-05T02:59:18Z", "creator": "jaikiran@apache.org", "creation_time": "2017-11-05T02:59:18Z", "text": "Is this still reproducible? I don't have a Windows setup to test this. Can you tell us a bit more about which Java vendor and version you are using? You can paste the output of the following command:\n\njava -version"}, {"count": 2, "tags": [], "text": "It's just Oracle's Java 8u92... but enough time has passed that we have stopped using Ant for the area where the problem originally occurred anyway.", "is_private": false, "id": 201921, "creator": "trejkaz@trypticon.org", "time": "2017-11-05T03:27:20Z", "bug_id": 59104, "creation_time": "2017-11-05T03:27:20Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 59104, "is_private": false, "id": 201922, "time": "2017-11-05T03:50:56Z", "creator": "jaikiran@apache.org", "creation_time": "2017-11-05T03:50:56Z", "tags": [], "text": "Thank you for providing that detail. I'm curious on this one since this one has now been reported in more than one place. I'll try and see if this can be narrowed down to something specific, once I get access to some Windows setup."}, {"count": 4, "attachment_id": null, "bug_id": 59104, "is_private": false, "id": 201972, "time": "2017-11-07T20:42:02Z", "creator": "jan@materne.de", "creation_time": "2017-11-07T20:42:02Z", "tags": [], "text": "I did a small test:\n<project>\n    <mkdir dir=\"bak\"/>\n    <makeurl file=\"build.xml\" property=\"url\"/>\n    <echo>url=${url}</echo>\n    <get src=\"${url}\" dest=\"bak\"/>\n    <loadresource property=\"content\">\n        <url url=\"${url}\"/>\n    </loadresource>\n    <echo>content=${content}</echo>\n</project>\n\nthis worked on my win7 machine.\n\n\nThe code basically wrapps \"new File(path).toURI().toASCIIString()\", so we rely on the Java core. \n\nMaybe I haven't found the exact source ...\nhttps://tools.ietf.org/html/rfc3986 (URI): have read some paragraphs where I think three slashes are mandatory, but also some paragraphs where I think two are ok.\n\nI also found https://blogs.msdn.microsoft.com/ie/2006/12/06/file-uris-in-windows/\nThis basically sais:\n* If you have an UNC path (with the computer name included) you have two slashes\n* If you have a local path (with the drive letter included) you have three slashes\n\nSo maybe this conversion is wrong.\nBut than this is a bug in the Java core (I think)."}, {"count": 5, "tags": [], "creator": "jaikiran@apache.org", "attachment_id": null, "text": "Jan, you are right - this most likely will end up being something (either a bug or a differing implementation) of the JRE. However, I haven't yet been able to narrow it down to a specific set of OS and JRE combination. This same issue has been reported in various different places (in Ant and Ivy) in various different use cases and that's what made me look into this. Most of the times (almost always?), the issue has been reported on Windows. I don't have access to any Windows system to be able to spend some time to narrow this down.", "id": 202662, "time": "2017-12-09T04:44:40Z", "bug_id": 59104, "creation_time": "2017-12-09T04:44:40Z", "is_private": false}]
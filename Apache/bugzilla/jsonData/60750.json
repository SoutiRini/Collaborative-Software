[{"count": 0, "tags": [], "creator": "qixiaobo.nj@gmail.com", "is_private": false, "text": "Created attachment 34768\nchunked with content-length\n\nPOST http://192.168.1.153:8080/kzf6/user/resetMyPassword.json HTTP/1.1\nHost: 192.168.1.153:8080\nConnection: keep-alive\nContent-Length: 15\nAccept: application/json, text/javascript, */*; q=0.01\nOrigin: http://192.168.1.153:8080\nX-Requested-With: XMLHttpRequest\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nDNT: 1\nReferer: http://192.168.1.153:8080/kzf6/page/index/index.jsp\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2\nCookie: JSESSIONID=58A5A067D9686D43146177A27F7C3ADA; __lnkrntdmcvrd=-1; currMenu=%E9%A6%96%E9%A1%B5; PLAY_SESSION=\"2c9de2e98e99047a6f56d82c3558b38ba77efb9e-accountName=&stationCode=CHS201604060327&appId=wxee37461196767726&flag=&accountId=586&wxAppName=F6%E9%AB%98%E5%AE%9D%E6%B1%BD%E8%BD%A6%E6%9C%8D%E5%8A%A1%E5%8F%B7&activeDate=null&stationId=537&account=gbxq&parentAccountId=null&password=96e79218965eb72c92a549dd5a330112&isSystem=1\"; F6ONL_SESSION=\"d4b1bcc15c082a61a1e12db295e3c51f3635de20-pwd=96e79218965eb72c92a549dd5a330112&username=gbxq&creditValue=0.0&orgCode=CHS201604060327&prjRights=bsx2016%2Cpts2016&userid=243515852076984501487578195330\"; totalReminder=%5Bobject%20Object%5D\n\n\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Mon, 20 Feb 2017 08:12:05 GMT\n\ne2\n{\"btnStatus\":\"\",\"idBill\":null,\"idCar\":null,\"idCustomer\":null,\"idPay\":null,\"idStock\":null,\"list\":null,\"noBill\":null,\"noPay\":null,\"noStock\":null,\"options\":null,\"pageResult\":null,\"param\":\"\",\"status\":\"success\",\"str\":\"\",\"token\":\"\"}", "id": 197164, "time": "2017-02-20T13:39:53Z", "bug_id": 60750, "creation_time": "2017-02-20T13:39:53Z", "attachment_id": 34768}, {"count": 1, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 197170, "time": "2017-02-20T20:39:04Z", "bug_id": 60750, "creation_time": "2017-02-20T20:39:04Z", "tags": [], "text": "I do not see any bug here.\n\nThe request has Content-Length.\n\nThe response has \"Transfer-Encoding: chunked\" and does not have a Content-Length. This is all as expected.\n\nRead the HTTP protocol specification and ask you question on the users mailing list.  Bugzilla is not a support forum.\n\nhttps://wiki.apache.org/tomcat/Specifications#HTTP\nhttps://tools.ietf.org/html/rfc7230#section-4.1\nhttp://tomcat.apache.org/bugreport.html#Bugzilla_is_not_a_support_forum"}, {"count": 2, "tags": [], "creator": "qixiaobo.nj@gmail.com", "attachment_id": 34771, "id": 197173, "time": "2017-02-21T06:44:29Z", "bug_id": 60750, "creation_time": "2017-02-21T06:44:29Z", "is_private": false, "text": "Created attachment 34771\nnormal request\n\nwith 0-sized chunk"}, {"count": 3, "tags": [], "creator": "qixiaobo.nj@gmail.com", "is_private": false, "text": "Created attachment 34772\nerror request\n\nwithout 0-sized chunk", "id": 197174, "time": "2017-02-21T06:45:32Z", "bug_id": 60750, "creation_time": "2017-02-21T06:45:32Z", "attachment_id": 34772}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "What code do you have that results in a non-zero chunk followed by *no* final zero-byte chunk?", "id": 197203, "time": "2017-02-22T04:10:37Z", "bug_id": 60750, "creation_time": "2017-02-22T04:10:37Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60750, "attachment_id": null, "id": 197205, "time": "2017-02-22T05:21:27Z", "creator": "qixiaobo.nj@gmail.com", "creation_time": "2017-02-22T05:21:27Z", "is_private": false, "text": "Very simple code!\n\n        OutputStream out = outputMessage.getBody();\n        String text = JSON.toJSONString(obj, features);\n        byte[] bytes = text.getBytes(charset);\n        out.write(bytes);\nThe same code runs in product or development env very normal .Just become abnormal in test env (with ip).\n\n\n\u4fe1\u606f: Server version:        Apache Tomcat/7.0.70\n\u4fe1\u606f: Server built:          Jun 15 2016 16:27:45 UTC\n\u4fe1\u606f: Server number:         7.0.70.0\n\u4fe1\u606f: OS Name:               Linux\n\u4fe1\u606f: OS Version:            2.6.32-504.el6.x86_64\n\u4fe1\u606f: Architecture:          amd64\n\u4fe1\u606f: Java Home:             /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.65.x86_64/jre\n\u4fe1\u606f: JVM Version:           1.7.0_65-mockbuild_2014_07_16_06_06-b00\n\u4fe1\u606f: JVM Vendor:            Oracle Corporation\n\u4fe1\u606f: CATALINA_BASE:         /home/opt/apache-tomcat-7.0.70-erp\n\u4fe1\u606f: CATALINA_HOME:         /home/opt/apache-tomcat-7.0.70-erp\n\u4fe1\u606f: Command line argument: -Djava.util.logging.config.file=/home/opt/apache-tomcat-7.0.70-erp/conf/logging.properties\n\u4fe1\u606f: Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n\u4fe1\u606f: Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n\u4fe1\u606f: Command line argument: -Dcom.sun.management.jmxremote\n\u4fe1\u606f: Command line argument: -XX:PermSize=64M\n\u4fe1\u606f: Command line argument: -XX:MaxNewSize=128m\n\u4fe1\u606f: Command line argument: -XX:MaxPermSize=128m\n\u4fe1\u606f: Command line argument: -Djava.rmi.server.hostname=192.168.1.153\n\u4fe1\u606f: Command line argument: -Dcom.sun.management.jmxremote.port=9999\n\u4fe1\u606f: Command line argument: -Dcom.sun.management.jmxremote.ssl=false\n\u4fe1\u606f: Command line argument: -Dcom.sun.management.jmxremote.authenticate=false\n\u4fe1\u606f: Command line argument: -XX:+PrintGCTimeStamps\n\u4fe1\u606f: Command line argument: -XX:+PrintGCDetails\n\u4fe1\u606f: Command line argument: -Xloggc:logs/gc.log\n\u4fe1\u606f: Command line argument: -Xdebug\n\u4fe1\u606f: Command line argument: -Xnoagent\n\u4fe1\u606f: Command line argument: -Djava.compiler=NONE\n\u4fe1\u606f: Command line argument: -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5888\n\u4fe1\u606f: Command line argument: -Djava.endorsed.dirs=/home/opt/apache-tomcat-7.0.70-erp/endorsed\n\u4fe1\u606f: Command line argument: -Dcatalina.base=/home/opt/apache-tomcat-7.0.70-erp\n\u4fe1\u606f: Command line argument: -Dcatalina.home=/home/opt/apache-tomcat-7.0.70-erp\n\u4fe1\u606f: Command line argument: -Djava.io.tmpdir=/home/opt/apache-tomcat-7.0.70-erp/temp\n\u4fe1\u606f: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"}, {"attachment_id": null, "tags": [], "bug_id": 60750, "is_private": false, "count": 6, "id": 197214, "time": "2017-02-22T14:40:31Z", "creator": "qixiaobo.nj@gmail.com", "creation_time": "2017-02-22T14:40:31Z", "text": " \ncase CLOSE_NOW: {\n            // Block further output\n            getOutputBuffer().finished = true;\n            setErrorState(ErrorState.CLOSE_NOW, null);\n            break;\n        }\n\n public void endRequest()\n        throws IOException {\n\n        if (!committed) {\n\n            // Send the connector a request for commit. The connector should\n            // then validate the headers, send them (using sendHeader) and \n            // set the filters accordingly.\n            response.action(ActionCode.COMMIT, null);\n\n        }\n\n        if (finished)\n            return;\n\n        if (lastActiveFilter != -1)\n            activeFilters[lastActiveFilter].end();\n        finished = true;\n    }"}, {"count": 7, "tags": [], "creator": "qixiaobo.nj@gmail.com", "attachment_id": null, "text": "\"http-bio-8080-exec-15@10822\" daemon prio=5 tid=0x1dd nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n\t  at org.apache.coyote.Response.setCommitted(Response.java:217)\n\t  at org.apache.coyote.http11.InternalOutputBuffer.commit(InternalOutputBuffer.java:194)\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:776)\n\t  at org.apache.coyote.Response.action(Response.java:174)\n\t  at org.apache.coyote.Response.sendHeaders(Response.java:348)\n\t  at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:352)\n\t  at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)\n\t  at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:101)\n\t  at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:180)\n\t  at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:148)\n\n\t  at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:90)\n\t  at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:189)\n\t  at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:69)\n\t  at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122)\n\t  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:745)\n\t  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:686)\n\t  at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:80)\n\t  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)\n\t  at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\n\t  at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)\n\t  at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855)\n\t  at javax.servlet.http.HttpServlet.service(HttpServlet.java:650)\n\t  at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)\n\t  at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n\t  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n\t  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\t  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\t  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n\t  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\t  at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)\n\t  at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)\n\t  at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)\n\t  at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\n\t  at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)\n\t  at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)\n\t  at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)\n\t  at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)\n\t  at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)\n\t  at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)\n\t  at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)\n\t  at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)\n\t  at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343)\n\t  at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260)\n\t  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n\t  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\t  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:218)\n\t  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\n\t  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\n\t  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)\n\t  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\n\t  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:956)\n\t  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n\t  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:442)\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1082)\n\t  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:623)\n\t  at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)\n\t  - locked <0x2bf4> (a org.apache.tomcat.util.net.SocketWrapper)\n\t  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\t  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\t  at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\t  at java.lang.Thread.run(Thread.java:745)\n\n\n\n\nThen \n\n\"http-bio-8080-exec-15@10822\" daemon prio=5 tid=0x1dd nid=NA runnable\n  java.lang.Thread.State: RUNNABLE\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:905)\n\t  at org.apache.coyote.Response.action(Response.java:172)\n\t  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n\t  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:956)\n\t  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n\t  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:442)\n\t  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1082)\n\t  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:623)\n\t  at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)\n\n\n\npublic void endRequest()\n        throws IOException {\n\n        if (!committed) {\n\n            // Send the connector a request for commit. The connector should\n            // then validate the headers, send them (using sendHeader) and \n            // set the filters accordingly.\n            response.action(ActionCode.COMMIT, null);\n\n        }\n\n        if (finished)\n            return;\n\n        if (lastActiveFilter != -1)\n            activeFilters[lastActiveFilter].end();\n        finished = true;\n    }\n\nAt this point (finished==true),tomcat will not send \n\n\n /**\n     * End the current request. It is acceptable to write extra bytes using\n     * buffer.doWrite during the execution of this method.\n     */\n    @Override\n    public long end()\n        throws IOException {\n\n        // Write end chunk\n        buffer.doWrite(END_CHUNK, null);\n        \n        return 0;\n\n    }\nSo the error occours.", "id": 197218, "time": "2017-02-23T02:42:38Z", "bug_id": 60750, "creation_time": "2017-02-23T02:42:38Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 197231, "time": "2017-02-23T13:53:36Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-02-23T13:53:36Z", "text": "Updated the SUMMARY field."}, {"count": 9, "tags": [], "bug_id": 60750, "attachment_id": null, "id": 197247, "time": "2017-02-23T17:04:10Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-02-23T17:04:10Z", "is_private": false, "text": "> Server number:         7.0.70.0\n\nYou are using Tomcat 7.0.70. The current version of Tomcat 7 is 7.0.75.\n\nI wonder whether the behaviour is reproducible with Tomcat 7.0.75.\n\n> org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318)\n\nThe above class in stacktrace means that you are using BIO connector implementation.\n\n> Comment 5\n\n>        OutputStream out = outputMessage.getBody();\n>        String text = JSON.toJSONString(obj, features);\n>        byte[] bytes = text.getBytes(charset);\n>        out.write(bytes);\n\nCan this be simplified further to be reproduced without 3-rd party classes?\n\nA simple sample web application?\n\n\nIt seems that your hypothesis in Comment 6 and Comment 7 is the following:\n\n1. The zero-length chunk is not send because org.apache.coyote.http11.filters.ChunkedOutputFilter.end() method is not called.\n\n2. The end() method is not called (in org.apache.coyote.http11.AbstractOutputBuffer.endRequest())\nbecause 'AbstractOutputBuffer.finished' flag is 'true'.\n\n3. The 'AbstractOutputBuffer.finished' flag is set to 'true' in\norg.apache.coyote.http11.AbstractHttp11Processor.action()\nwhen processing 'case CLOSE_NOW'.\n\n\nThis behaviour is by design. The \"CLOSE_NOW\" action code means that connection must be terminated immediately, without any further I/O.\n\nE.g. some fatal error has occurred.\n\nE.g. the client went away (closed its side of connection) without waiting for your end chunk.\n\nSee the javadoc:\nhttps://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/coyote/ActionCode.java?revision=1740727&view=markup#l34\n\n\nThe CLOSE_NOW code was introduced by r1602443 (Tomcat 7.0.55 onwards), 2,5 years ago."}, {"count": 10, "tags": [], "text": "(In reply to qixiaobo.nj from comment #5)\n> Very simple code!\n> \n>         OutputStream out = outputMessage.getBody();\n\nWhat type is the \"outputMessage\" reference? You need to post more code.\n\nThe stack traces are confusing to me. Is that a thread dump? A show of a deadlock situation? What are you trying to show?", "attachment_id": null, "id": 197320, "creator": "chris@christopherschultz.net", "time": "2017-02-28T19:53:41Z", "bug_id": 60750, "creation_time": "2017-02-28T19:53:41Z", "is_private": false}, {"count": 11, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "This needs a simple test case (without the 3rd party libraries) to demonstrate the issue. Without such a test case, the assumption is going to be that it is not a Tomcat bug.", "id": 197364, "time": "2017-03-01T21:03:38Z", "bug_id": 60750, "creation_time": "2017-03-01T21:03:38Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 197477, "time": "2017-03-06T14:40:15Z", "creator": "ty733420@gmail.com", "creation_time": "2017-03-06T14:40:15Z", "text": "qixiaobo.nj, please try increasing your max heap.\n\nWe ran into this exact situation last week.  The entire response is delivered to the browser, except that one crucial part (the zero-byte chunk signalling the end of the data stream).  Like qixiaobo.nj, we were seeing it in some environments but not others.  Gradually we merged configs from those environments and found that increasing the heap max (in our case, more than doubling it) resolved the issue.\n\nThe behavior was unusual in many ways:\n- again, the entire data stream was delivered to the browser, just not that \"0\".\n- the server seems to *think* it sent a complete response (it logged the response summary to the access log)\n- there is no OOME in stdout or stderr\n- there is no tell-tale sign of memory trouble, or even an increase in memory utilization in JMX+JConsole\n- in our case, the data stream size (about 700K) was several orders of magnitude smaller than the max heap (768m). \n\nUnfortunately I don't have any better info than qixiaobo.nj as to how this can be reproduced.  The application we were dealing with is heavily dependent on third-party libraries and I don't have any evidence where the problem lies. \n\nI figured I'd leave this here for qixiaobo.nj or anyone else who runs across this."}, {"count": 13, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "(In reply to Ty from comment #12)\n> - there is no OOME in stdout or stderr\n\nI seem to recall some try/catch code in certain places in Tomcat that swallowed exceptions that I thought ought to at least be logged. It's possible that this particular edge-case hits those catches.\n\nOOMEs can happen for a number of reasons -- not always complete heap-exhaustion. So you might not be able to tell an OOME occurred if it didn't get logged to stderr and you were just watching e.g. total JVM memory usage.\n\nI'd be interested to see if JMX reports an increase in the OOME count when these zero-length chunks are dropped from the responses.", "id": 197506, "time": "2017-03-07T16:21:49Z", "bug_id": 60750, "creation_time": "2017-03-07T16:21:49Z", "attachment_id": null}, {"count": 14, "tags": [], "creator": "ty733420@gmail.com", "attachment_id": null, "id": 197510, "time": "2017-03-07T16:57:28Z", "bug_id": 60750, "creation_time": "2017-03-07T16:57:28Z", "is_private": false, "text": "> OOMEs can happen for a number of reasons -- not always complete heap-exhaustion.\n\nVery true, I forgot about the \"initialize an object array of size=Integer.MAX_VALUE\" operations that OOME before they even begin.\n\n> I'd be interested to see if JMX reports an increase in the OOME count when these \n> zero-length chunks are dropped from the responses.\n\nOnce the heap size was increased, I see a very sharp and short-lived (i.e. garbage-collectable) increase in OldGen utilization.  From memory, a spike of about 850MB.  I think that's what you're asking about.\n\nBesides the probably-swallowed OOME, that just leaves the mystery of a response that (when under memory constraints) is missing the last chunk but otherwise is complete.  I'd wager a third-party library is to blame -- in our case and in OP's case, there is a JSON library in the mix-- but what is strange to me is the response isn't compliant with the RFC spec for Transfer-Encoding: chunked, at least according to my reading of it:  a response can't be considered complete without the zero byte chunk, but the server seems to think it is."}, {"count": 15, "tags": [], "bug_id": 60750, "attachment_id": null, "id": 197557, "time": "2017-03-09T03:38:20Z", "creator": "qixiaobo.nj@gmail.com", "creation_time": "2017-03-09T03:38:20Z", "is_private": false, "text": "Sorry for my late response.\nThis request will logout my application. I think there is something wrong with shiro framework.\n\nin localhost.2017-02-23.log:\norg.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.\n        at org.apache.shiro.SecurityUtils.getSecurityManager(SecurityUtils.java:123)\n        at org.apache.shiro.subject.Subject$Builder.<init>(Subject.java:626)\n        at org.apache.shiro.SecurityUtils.getSubject(SecurityUtils.java:56)\n        at org.apache.shiro.web.tags.SecureTag.getSubject(SecureTag.java:43)\n        at org.apache.shiro.web.tags.PermissionTag.isPermitted(PermissionTag.java:66)\n        at org.apache.shiro.web.tags.HasPermissionTag.showTagBody(HasPermissionTag.java:32)\n        at org.apache.shiro.web.tags.PermissionTag.onDoStartTag(PermissionTag.java:57)\n        at org.apache.shiro.web.tags.SecureTag.doStartTag(SecureTag.java:53)\n        at org.apache.jsp.page.common.head_jsp._jspService(head_jsp.java:215)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:747)\n        at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:603)\n        at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:542)\n        at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:955)\n        at org.apache.jsp.page.error._404_jsp._jspService(_404_jsp.java:103)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:747) \n\n\n\n\nSince I remove some configs , I can receive the 0-sized trunk package and it becomes normal.\nMaybe in this case it's a fatal error ?"}, {"count": 16, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 197558, "time": "2017-03-09T03:46:32Z", "creator": "qixiaobo.nj@gmail.com", "creation_time": "2017-03-09T03:46:32Z", "text": "(In reply to Ty from comment #14)\n> > OOMEs can happen for a number of reasons -- not always complete heap-exhaustion.\n> \n> Very true, I forgot about the \"initialize an object array of\n> size=Integer.MAX_VALUE\" operations that OOME before they even begin.\n> \n> > I'd be interested to see if JMX reports an increase in the OOME count when these \n> > zero-length chunks are dropped from the responses.\n> \n> Once the heap size was increased, I see a very sharp and short-lived (i.e.\n> garbage-collectable) increase in OldGen utilization.  From memory, a spike\n> of about 850MB.  I think that's what you're asking about.\n> \n> Besides the probably-swallowed OOME, that just leaves the mystery of a\n> response that (when under memory constraints) is missing the last chunk but\n> otherwise is complete.  I'd wager a third-party library is to blame -- in\n> our case and in OP's case, there is a JSON library in the mix-- but what is\n> strange to me is the response isn't compliant with the RFC spec for\n> Transfer-Encoding: chunked, at least according to my reading of it:  a\n> response can't be considered complete without the zero byte chunk, but the\n> server seems to think it is.\n\nNo oom"}, {"count": 17, "tags": [], "text": "A reproducible test case is required for this issue.", "is_private": false, "id": 197724, "creator": "markt@apache.org", "time": "2017-03-16T20:55:35Z", "bug_id": 60750, "creation_time": "2017-03-16T20:55:35Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 197748, "time": "2017-03-17T14:32:06Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-03-17T14:32:06Z", "text": "The following JSP runs (somewhat) correctly on Tomcat 8.0.41. It emits 2 chunks, then intentionally causes an OOME before the third section of the response. Tomcat captures the error and emits a 0-length chunk to properly end the response.\n\n=== CUT ===\nThe first chunk should be here.\n<%\n    out.flush();\n%>\nThe second chunk should be here.\n<%\n    out.flush();\n\n    // Let's cause an OOME\n    int[] a = new int[Integer.MAX_VALUE];\n%>\nThe final chunk should be here.\n=== CUT ==="}, {"count": 19, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 197749, "time": "2017-03-17T14:39:06Z", "bug_id": 60750, "creation_time": "2017-03-17T14:39:06Z", "is_private": false, "text": "Tomcat 7.0.76 chokes on this JSP in the way that qixiaobo.nj@gmail.com has described. Here are the TCP responses from Tomcat 7 captured using Wireshark:\n\nPacket 1:\n0000   48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d  HTTP/1.1 200 OK.\n0010   0a 53 65 72 76 65 72 3a 20 41 70 61 63 68 65 2d  .Server: Apache-\n0020   43 6f 79 6f 74 65 2f 31 2e 31 0d 0a 53 65 74 2d  Coyote/1.1..Set-\n0030   43 6f 6f 6b 69 65 3a 20 4a 53 45 53 53 49 4f 4e  Cookie: JSESSION\n0040   49 44 3d 41 32 31 46 37 43 44 39 30 33 42 45 30  ID=A21F7CD903BE0\n0050   38 45 32 43 33 35 31 45 33 36 44 46 39 37 33 41  8E2C351E36DF973A\n0060   45 45 43 3b 20 50 61 74 68 3d 2f 65 78 61 6d 70  EEC; Path=/examp\n0070   6c 65 73 3b 20 48 74 74 70 4f 6e 6c 79 0d 0a 43  les; HttpOnly..C\n0080   6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 78  ontent-Type: tex\n0090   74 2f 68 74 6d 6c 3b 63 68 61 72 73 65 74 3d 49  t/html;charset=I\n00a0   53 4f 2d 38 38 35 39 2d 31 0d 0a 54 72 61 6e 73  SO-8859-1..Trans\n00b0   66 65 72 2d 45 6e 63 6f 64 69 6e 67 3a 20 63 68  fer-Encoding: ch\n00c0   75 6e 6b 65 64 0d 0a 44 61 74 65 3a 20 46 72 69  unked..Date: Fri\n00d0   2c 20 31 37 20 4d 61 72 20 32 30 31 37 20 31 34  , 17 Mar 2017 14\n00e0   3a 33 35 3a 35 32 20 47 4d 54 0d 0a 0d 0a 32 30  :35:52 GMT....20\n00f0   0d 0a 54 68 65 20 66 69 72 73 74 20 63 68 75 6e  ..The first chun\n0100   6b 20 73 68 6f 75 6c 64 20 62 65 20 68 65 72 65  k should be here\n0110   2e 0a 0d 0a                                      ....\n\nPacket 2:\n0000   32 32 0d 0a 0a 54 68 65 20 73 65 63 6f 6e 64 20  22...The second \n0010   63 68 75 6e 6b 20 73 68 6f 75 6c 64 20 62 65 20  chunk should be \n0020   68 65 72 65 2e 0a 0d 0a                          here....\n\nThe only data exchange after Packet 2 above are TCP control packets... no actual data."}, {"count": 20, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 197750, "time": "2017-03-17T15:04:16Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-03-17T15:04:16Z", "text": "(In reply to Christopher Schultz from comment #19)\n> Tomcat 7.0.76 chokes on this JSP in the way that qixiaobo.nj@gmail.com has\n> described. Here are the TCP responses from Tomcat 7 captured using Wireshark:\n\nChristopher,\n\nthe correct behaviour after an OOM like that is to abort the connection, without any terminating chunk.\n\nOOM = the processing failed, the client should note that the failure occurred, e.g. that the document that the person downloads is truncated.\n\nSending the terminating 0-length chunk gives an illusion that everything is OK, while it certainly is not.\n\n\nSee r1602443 and CLOSE_NOW action that I mentioned in Comment 9.\n\nDiscussion that lead to that change is in thread\ntitled \"Error handling\" on dev@, started 2014-05-29.\nhttp://tomcat.markmail.org/thread/znillhttbmvsl5e5"}, {"count": 21, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "(In reply to Konstantin Kolinko from comment #20)\n> the correct behaviour after an OOM like that is to abort the connection,\n> without any terminating chunk.\n\nOkay, then Tomcat 8 is non-compliant.\n\n> OOM = the processing failed, the client should note that the failure\n> occurred, e.g. that the document that the person downloads is truncated.\n> \n> Sending the terminating 0-length chunk gives an illusion that everything is\n> OK, while it certainly is not.\n> \n> \n> See r1602443 and CLOSE_NOW action that I mentioned in Comment 9.\n> \n> Discussion that lead to that change is in thread\n> titled \"Error handling\" on dev@, started 2014-05-29.\n> http://tomcat.markmail.org/thread/znillhttbmvsl5e5\n\nIf the desired behavior is to close the connection without a terminating 0-byte chunk (which is reasonable behavior IMO), then I think Tomcat should be consistent across versions.\n\nBut I have now published a simple reproducible test case that can be used across Tomcat versions to verify the behavior claimed in this bug, so that should make it easier to test should a decision be made either way.", "id": 197755, "time": "2017-03-17T16:03:45Z", "bug_id": 60750, "creation_time": "2017-03-17T16:03:45Z", "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 198006, "time": "2017-03-27T11:09:09Z", "creator": "markt@apache.org", "creation_time": "2017-03-27T11:09:09Z", "text": "9.0.x behaves as expected and closes the connection without a final chunk."}, {"count": 23, "tags": [], "bug_id": 60750, "attachment_id": null, "id": 198010, "time": "2017-03-27T13:23:50Z", "creator": "markt@apache.org", "creation_time": "2017-03-27T13:23:50Z", "is_private": false, "text": "As does 8.5.x"}, {"count": 24, "tags": [], "text": "It sounds like this should really be WONTFIX: Tomcat 7.0.x and 8.0.x will emit a 0-byte final chunk, and changing that in the 7.0.x or 8.0.x branches should probably not be done.\n\n8.5.x and 9.0.x represent new (and compliant) behavior and require no change.", "attachment_id": null, "id": 198068, "creator": "chris@christopherschultz.net", "time": "2017-03-29T20:58:52Z", "bug_id": 60750, "creation_time": "2017-03-29T20:58:52Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 60750, "attachment_id": null, "is_private": false, "id": 198069, "time": "2017-03-29T21:02:35Z", "creator": "markt@apache.org", "creation_time": "2017-03-29T21:02:35Z", "text": "I'm leaning towards fixing it but... I do recall we had a discussion around this topic or one similar in the past. Let me see if I can find a reference to it."}, {"count": 26, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 198072, "time": "2017-03-29T21:15:03Z", "bug_id": 60750, "creation_time": "2017-03-29T21:15:03Z", "is_private": false, "text": "This is what I was thinking of from 2014\nhttp://markmail.org/thread/znillhttbmvsl5e5\n\nand the change to close the connection without the final chunk was back-ported to 8.0.x and 7.0.x.\n\nThanks makes me more in favour of fixing this."}, {"count": 27, "tags": [], "text": "The current 8.0.x code also does not emit the final chunk. This behaviour is correct.", "attachment_id": null, "id": 198498, "creator": "markt@apache.org", "time": "2017-04-24T17:06:44Z", "bug_id": 60750, "creation_time": "2017-04-24T17:06:44Z", "is_private": false}, {"count": 28, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 198500, "time": "2017-04-24T18:16:05Z", "bug_id": 60750, "creation_time": "2017-04-24T18:16:05Z", "is_private": false, "text": "Tomcat 7.0.x also behaves correctly.\n\nSince there is nothing to fix here, I am closing this as WORKSFORME."}]
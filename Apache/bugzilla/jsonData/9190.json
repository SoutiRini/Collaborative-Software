[{"count": 0, "tags": [], "bug_id": 9190, "attachment_id": null, "text": "There is no way to call setTaskType from outside of \npackage since its package private. Should be public or protected\ntaskType is a protected  variable but setter is package private.", "id": 16289, "time": "2002-05-17T02:02:51Z", "creator": "memmel2@yahoo.com", "creation_time": "2002-05-17T02:02:51Z", "is_private": false}, {"count": 1, "tags": [], "text": "Why do you need to set this? I see no reason for this to be accessible to tasks.", "is_private": false, "bug_id": 9190, "id": 16292, "time": "2002-05-17T02:34:13Z", "creator": "conor@apache.org", "creation_time": "2002-05-17T02:34:13Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "\nFirst if its not to be accesible then the variable should be package private.\nThus it can be set in a subclass\nNext I'm working on a new PackageHelper class and its set when UknownElement is\ncreated. If it should not be accesible then it should be set in Task or at least\nUnkownElement constructor to its default value.\n\nThe workaround is to sublcass UnkownElement and set it which is a hack.\n\n", "attachment_id": null, "id": 16300, "creation_time": "2002-05-17T03:12:17Z", "time": "2002-05-17T03:12:17Z", "creator": "memmel2@yahoo.com", "bug_id": 9190, "is_private": false}, {"count": 3, "tags": [], "bug_id": 9190, "attachment_id": null, "text": "I agree - the field should be private. In fact all fields should be private.\nUnfortunately this is not the case :-(. It cannot just be changed now due to\nbackward compatability considerations.\n\nIn fact one of the things Ant suffers from is that its API has not been well\ncontrolled and many things are too open. This makes evolution harder, again due\nto backward compatability issues. I hope this explains my initial reaction. \n\nSince the Task objects are being created by Ant's core (in the createTask\nmethod) the core should be setting this value and it should not be something a\ntask should mess with. \n\nCan I ask you how you are using this field and what problems you are currently\nseeing? By the time your task execute it should be set correctly. ", "id": 16302, "time": "2002-05-17T03:54:30Z", "creator": "conor@apache.org", "creation_time": "2002-05-17T03:54:30Z", "is_private": false}, {"count": 4, "tags": [], "creator": "memmel2@yahoo.com", "text": "\nSetting it to a default in Task should be the \"right\" thing.\nIf you don't expose it it should be set to a real value. \nBasically Task should intialialize as UnknownElement in its constrcutor.\nI'm not sure you really need UnknownElement I think it can be eliminated.\nTheres no reason I think for Task to be abstract instead it can be combined\nwith UnkownElment to create a concrete class. \n\n\nOkay you asked I guess I need to admit what I'm using Ant for. \nFirst its not what it was designed for but I've written a completley new AWT\nimplementation thats full screen and has all kinds of cool features it will be\nreleased I hope early next week. \nFeatures\nRDF (Resource Description Framework) built in meta repository.\nAWT implemented on top of Swing \nBasic changes which open up the possibility to unify Swing/AWT apis.\nFairly robust Multi Application Support almost the best you can do with out\nfundamental changes to the JVM implementation.\nThe ability to lauch a full desktop interface of the Network.\netc etc.\nI recently moved the Java build process over to Ant and as I did it I realized\nthe core design for Ant was almost exactly what I want my\nxml based application launcher to do. I wrote a task for gcc its a hack but I\ndid add the abilitly to generate the javah headers on the fly by greping the\nC source file for jni like headers which I find very useful for jni code. Thats\nsomething I would not want to do using make but it was very easy using ant. If\nyou guys want it tell me where to send it. A real \"generic\" C compiler task is a\nlot of work but maybe this could be useful as input if someones writing one.\n\nAs I worked with ant I realized the ant task model really fits a lot of other\nproblems and I feel the core of ant can be abstracted to provide a\ngeneric task management system. I was able to replace my launcher with ant very\neasily. The ant core really only needs a bit of work to provide a very cool api\nwhenever someone wants to use the task/xml concept which ant implements.\n\nIn my case I want to use ant task to intilize the JavaOS launch Apps and\neven provide a Cron/At task all this can be done using ants core with very few\nchanges. \n\nAnd you can see why I will be making strange bug reports : )\n", "id": 16303, "time": "2002-05-17T04:54:29Z", "bug_id": 9190, "creation_time": "2002-05-17T04:54:29Z", "is_private": false, "attachment_id": null}]
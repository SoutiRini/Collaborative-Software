[{"text": "It seems that MySQL DBD authentication is incompatible with SSL. I have 3 directories. One uses internal authentication and works with SSL. The 2nd uses AuthUserFile and works with SSL (PHP scripts). The 3rd uses MySQL DBD authentication and works without SSL (PHP scripts) but fails with SSL and security is by-passed completely.\n\nThe loaded PHP page, rather than rendering, dumps a lot of PHP $_SERVER variables which have little meaning and ends with the string \"Fatal: 1.\" That should mean something but I can't find what or if it is from Apache or PHP.\n\nThe following is the VH config file:\n\nLoadModule dbd_module modules/mod_dbd.so\nLoadModule authn_dbd_module modules/mod_authn_dbd.so\n<VirtualHost *:80>\n        DocumentRoot \"/var/www/html\"\n        ServerName myhost.mydomain.com\n        ServerAdmin mailman-owner@mydomain.com\n        ErrorLog \"/var/log/httpd/myhost_error_log\"\n        CustomLog \"/var/log/httpd/myhost_access_log\" combined\n\n# Force SSL for certain directories\n        RewriteEngine Off\n        RewriteLogLevel 0\n        RewriteLog \"/var/log/httpd/rewrite_log\"\n        RewriteCond %{HTTPS} off [NC]\n        RewriteRule ^/mailman(/.*)$ https://%{HTTP_HOST}/mailman$1 [R,L]\n        RewriteRule ^/cufs(/.*)$ https://%{HTTP_HOST}/cufs$1 [R,L]\n        RewriteRule ^/backupmgr(/.*)$ https://%{HTTP_HOST}/backupmgr$1 [R,L]\n\n        <IfModule mod_dbd.c>\n                DBDriver mysql\n                DBDParams \"dbname=cufsalumni user=myuser pass=xxxxxxx\"\n                DBDMin 1\n                DBDKeep 8\n                DBDMax 20\n        </IfModule>\n\n        <Directory \"/var/www/html/cufs/cufsauth/\">\n                AuthName \"CUFS Alumni Login\"\n                AuthType Basic\n                require valid-user\n                AuthBasicProvider dbd\n                AuthDBDUserPWQuery \"SELECT pwd FROM cufsalumni.alumni WHERE us\nername=%s\"\n        </Directory>\n\n        <Directory \"/var/www/html/backupmgr/\">\n                AuthType Basic\n                AuthName \"Backup Manager Administration\"\n                AuthUserFile \"/var/www/passwords\"\n                Require valid-user\n        </Directory>\n\n</VirtualHost>\n\nThe mailman URL works with SSL, the backupmgr URL works with SSL, the cufs URL works WITHOUT SSL and fails WITH SSL. Here is the ssl.conf:\n\n#\n# This is the Apache server configuration file providing SSL support.\n# It contains the configuration directives to instruct the server how to\n# serve pages over an https connection. For detailing information about\nthese\n# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>\n#\n# Do NOT simply read the instructions in here without understanding\n# what they do.  They're here only as hints or reminders.  If you are unsure\n# consult the online docs. You have been warned.\n#\n\nLoadModule ssl_module modules/mod_ssl.so\n\n#\n# When we also provide SSL we have to listen to the\n# the HTTPS port in addition.\n#\nListen 443\n\n##\n##  SSL Global Context\n##\n##  All SSL configuration in this context applies both to\n##  the main server and all SSL-enabled virtual hosts.\n##\n\n#   Pass Phrase Dialog:\n#   Configure the pass phrase gathering process.\n#   The filtering dialog program (`builtin' is a internal\n#   terminal dialog) has to provide the pass phrase on stdout.\nSSLPassPhraseDialog  builtin\n\n#   Inter-Process Session Cache:\n#   Configure the SSL Session Cache: First the mechanism\n#   to use and second the expiring timeout (in seconds).\nSSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)\nSSLSessionCacheTimeout  300\n\n#   Semaphore:\n#   Configure the path to the mutual exclusion semaphore the\n#   SSL engine uses internally for inter-process synchronization.\nSSLMutex default\n\n#   Pseudo Random Number Generator (PRNG):\n#   Configure one or more sources to seed the PRNG of the\n#   SSL library. The seed data should be of good random quality.\n#   WARNING! On some platforms /dev/random blocks if not enough entropy\n#   is available. This means you then cannot use the /dev/random device\n#   because it would lead to very long connection times (as long as\n#   it requires to make more entropy available). But usually those\n#   platforms additionally provide a /dev/urandom device which doesn't\n#   block. So, if available, use this one instead. Read the mod_ssl User\n#   Manual for more details.\nSSLRandomSeed startup file:/dev/urandom  256\nSSLRandomSeed connect builtin\n#SSLRandomSeed startup file:/dev/random  512\n#SSLRandomSeed connect file:/dev/random  512\n#SSLRandomSeed connect file:/dev/urandom 512\n\n#\n# Use \"SSLCryptoDevice\" to enable any supported hardware\n# accelerators. Use \"openssl engine -v\" to list supported\n# engine names.  NOTE: If you enable an accelerator and the\n# server does not start, consult the error logs and ensure\n# your accelerator is functioning properly.\n#\nSSLCryptoDevice builtin\n#SSLCryptoDevice ubsec\n\n##\n## SSL Virtual Host Context\n##\n\n<VirtualHost _default_:443>\n\n# General setup for the virtual host, inherited from global configuration\n#DocumentRoot \"/var/www/html\"\n#ServerName www.example.com:443\n\n# Use separate log files for the SSL virtual host; note that LogLevel\n# is not inherited from httpd.conf.\nErrorLog /var/log/httpd/ssl_error_log\nTransferLog /var/log/httpd/ssl_access_log\nLogLevel warn\n\n#   SSL Engine Switch:\n#   Enable/Disable SSL for this virtual host.\nSSLEngine on\n\n#   SSL Protocol support:\n# List the enable protocol levels with which clients will be able to\n# connect.  Disable SSLv2 access by default:\nSSLProtocol all -SSLv2\n\n#   SSL Cipher Suite:\n# List the ciphers that the client is permitted to negotiate.\n# See the mod_ssl documentation for a complete list.\nSSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\n\n#   Server Certificate:\n# Point SSLCertificateFile at a PEM encoded certificate.  If\n# the certificate is encrypted, then you will be prompted for a\n# pass phrase.  Note that a kill -HUP will prompt again.  A new\n# certificate can be generated using the genkey(1) command.\nSSLCertificateFile /etc/httpd/ssl.crt/server.crt\n\n#   Server Private Key:\n#   If the key is not combined with the certificate, use this\n#   directive to point at the key file.  Keep in mind that if\n#   you've both a RSA and a DSA private key you can configure\n#   both in parallel (to also allow the use of DSA ciphers, etc.)\nSSLCertificateKeyFile /etc/httpd/ssl.crt/server.key\n\n#   Server Certificate Chain:\n#   Point SSLCertificateChainFile at a file containing the\n#   concatenation of PEM encoded CA certificates which form the\n#   certificate chain for the server certificate. Alternatively\n#   the referenced file can be the same as SSLCertificateFile\n#   when the CA certificates are directly appended to the server\n#   certificate for convinience.\n#SSLCertificateChainFile /etc/httpd/ssl.crt/server.crt\n\n#   Certificate Authority (CA):\n#   Set the CA certificate verification path where to find CA\n#   certificates for client authentication or alternatively one\n#   huge file containing all of them (file must be PEM encoded)\n#SSLCACertificateFile /etc/httpd/ssl.crt/ca.crt\n\n#   Client Authentication (Type):\n#   Client certificate verification type and depth.  Types are\n#   none, optional, require and optional_no_ca.  Depth is a\n#   number which specifies how deeply to verify the certificate\n#   issuer chain before deciding the certificate is not valid.\n#SSLVerifyClient require\n#SSLVerifyDepth  10\n\n#   Access Control:\n#   With SSLRequire you can do per-directory access control based\n#   on arbitrary complex boolean expressions containing server\n#   variable checks and other lookup directives.  The syntax is a\n#   mixture between C and Perl.  See the mod_ssl documentation\n#   for more details.\n#<Location />\n#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \\\n#            and %{SSL_CLIENT_S_DN_O} eq \"Snake Oil, Ltd.\" \\\n#            and %{SSL_CLIENT_S_DN_OU} in {\"Staff\", \"CA\", \"Dev\"} \\\n#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \\\n#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \\\n#           or %{REMOTE_ADDR} =~ m/^192\\.76\\.162\\.[0-9]+$/\n#</Location>\n\n#   SSL Engine Options:\n#   Set various options for the SSL engine.\n#   o FakeBasicAuth:\n#     Translate the client X.509 into a Basic Authorisation.  This means\nthat\n#     the standard Auth/DBMAuth methods can be used for access control.  The\n#     user name is the `one line' version of the client's X.509 certificate.\n#     Note that no password is obtained from the user. Every entry in\nthe user\n#     file needs this password: `xxj31ZMTZzkVA'.\n#   o ExportCertData:\n#     This exports two additional environment variables: SSL_CLIENT_CERT and\n#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the\n#     server (always existing) and the client (only existing when client\n#     authentication is used). This can be used to import the certificates\n#     into CGI scripts.\n#   o StdEnvVars:\n#     This exports the standard SSL/TLS related `SSL_*' environment\nvariables.\n#     Per default this exportation is switched off for performance reasons,\n#     because the extraction step is an expensive operation and is usually\n#     useless for serving static content. So one usually enables the\n#     exportation for CGI and SSI requests only.\n#   o StrictRequire:\n#     This denies access when \"SSLRequireSSL\" or \"SSLRequire\" applied even\n#     under a \"Satisfy any\" situation, i.e. when it applies access is denied\n#     and no other module can change it.\n#   o OptRenegotiate:\n#     This enables optimized SSL connection renegotiation handling when SSL\n#     directives are used in per-directory context.\n#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire\n<Files ~ \"\\.(cgi|shtml|phtml|php3?)$\">\n    SSLOptions +StdEnvVars\n</Files>\n<Directory \"/var/www/cgi-bin\">\n    SSLOptions +StdEnvVars\n</Directory>\n\n#   SSL Protocol Adjustments:\n#   The safe and default but still SSL/TLS standard compliant shutdown\n#   approach is that mod_ssl sends the close notify alert but doesn't\nwait for\n#   the close notify alert from client. When you need a different shutdown\n#   approach you can use one of the following variables:\n#   o ssl-unclean-shutdown:\n#     This forces an unclean shutdown when the connection is closed, i.e. no\n#     SSL close notify alert is send or allowed to received.  This violates\n#     the SSL/TLS standard but is needed for some brain-dead browsers. Use\n#     this when you receive I/O errors because of the standard approach\nwhere\n#     mod_ssl sends the close notify alert.\n#   o ssl-accurate-shutdown:\n#     This forces an accurate shutdown when the connection is closed, i.e. a\n#     SSL close notify alert is send and mod_ssl waits for the close notify\n#     alert of the client. This is 100% SSL/TLS standard compliant, but in\n#     practice often causes hanging connections with brain-dead\nbrowsers. Use\n#     this only for browsers where you know that their SSL implementation\n#     works correctly.\n#   Notice: Most problems of broken clients are also related to the HTTP\n#   keep-alive facility, so you usually additionally want to disable\n#   keep-alive for those clients, too. Use variable \"nokeepalive\" for this.\n#     SSL close notify alert is send and mod_ssl waits for the close notify\n#     alert of the client. This is 100% SSL/TLS standard compliant, but in\n#     practice often causes hanging connections with brain-dead\nbrowsers. Use\n#     this only for browsers where you know that their SSL implementation\n#     works correctly.\n#   Notice: Most problems of broken clients are also related to the HTTP\n#   keep-alive facility, so you usually additionally want to disable\n#   keep-alive for those clients, too. Use variable \"nokeepalive\" for this.\n#   Similarly, one has to force some clients to use HTTP/1.0 to workaround\n#   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\" and\n#   \"force-response-1.0\" for this.\nSetEnvIf User-Agent \".*MSIE.*\" \\\n         nokeepalive ssl-unclean-shutdown \\\n         downgrade-1.0 force-response-1.0\n\n#   Per-Server Logging:\n#   The home of a custom SSL log file. Use this when you want a\n#   compact non-error SSL logfile on a virtual host basis.\nCustomLog logs/ssl_request_log \\\n          \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\"\n\n</VirtualHost>\n\nApologies for including all the comments but I did not want to\ninadvertently omit something important.", "tags": [], "creator": "awingnut@outlook.com", "is_private": false, "count": 0, "id": 179479, "time": "2014-12-03T13:04:41Z", "bug_id": 57304, "creation_time": "2014-12-03T13:04:41Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "covener@gmail.com", "text": "You'll need to distill this to a smaller testcase and describe exactly the behavior you see with respect to URLs, authentication prompts, and redirects.\n\nThere's something fishy about your authentication in your non-SSL vhosts anyway. Isn't all of this broken if someone just starts with SSL?", "id": 179480, "time": "2014-12-03T13:30:46Z", "bug_id": 57304, "creation_time": "2014-12-03T13:30:46Z", "is_private": false, "attachment_id": null}]
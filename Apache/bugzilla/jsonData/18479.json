[{"count": 0, "tags": [], "creator": "dave@windward.net", "attachment_id": null, "id": 34086, "time": "2003-03-28T19:08:02Z", "bug_id": 18479, "creation_time": "2003-03-28T19:08:02Z", "is_private": false, "text": "I have an object that implements HttpSessionBindingListener. It calls \nvalueBound fine. But it never calls valueUnbound. Not when it times out and not \nwhen Tomcat is closed."}, {"count": 1, "tags": [], "bug_id": 18479, "is_private": false, "id": 34144, "attachment_id": null, "creator": "dave@windward.net", "creation_time": "2003-03-31T01:42:20Z", "time": "2003-03-31T01:42:20Z", "text": "With version 4.1.24 it does call it on a timeout. However, it does not call it \nif Tomcat is shut down and if the listener class is not serializable it is not \nbrought back when Tomcat restarts."}, {"count": 2, "tags": [], "text": "Fixed in CVS for TC4 and TC5.", "is_private": false, "bug_id": 18479, "id": 54690, "time": "2004-03-25T22:26:14Z", "creator": "markt@apache.org", "creation_time": "2004-03-25T22:26:14Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "I believe the fix for this issue has caused another one.  The Tomcat-5.0.21\nchanglog says the following about the fix for this bug report...\n\n18479: Non-serializable sessions attributes should be removed (so valueUnbound\nis called) (markt)\n\nI have a session that is perfectly serializable in both 5.0.19 and 5.0.20, but\nas of 5.0.21, the value for the session attribute comes back null.  I also\ntested in 5.0.22 with the same result.  The test consists of a hit counter that\nstays in the session and should pick up right where it left off upon\nserver/application reload as long as the session hasn't yet timed out.\n\nI have a HttpSessionAttributeListener reporting when objects are\nadded/removed/replaced in the session.  I get the report of the object in\nquestion being added, but I never see that it has been removed or replaced.  As\nsuch, I must assume that the session attribute is still there, but its value\nchanged to null somewhere behind the scenes in a way that doesn't report it to\nthe HttpSessionAttributeListener (at a minimum, attributeReplaced() should be\ncalled, no?).\n\nIf this report should be separate from this bug, please say so and I'll do that,\nbut this one seems suspect as the cause for the issue I am seeing.  Also let me\nknow if more information is needed or if a test case is needed.  I, obviously,\nhave a test case, but it not exactly simplified.  I'll do that if what I am\nreporting seems non-obvious to the Tomcat gurus.\n\nJake", "attachment_id": null, "id": 55636, "creator": "hoju@visi.com", "time": "2004-04-11T06:12:58Z", "bug_id": 18479, "creation_time": "2004-04-11T06:12:58Z", "is_private": false}, {"count": 4, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 55638, "time": "2004-04-11T11:28:31Z", "bug_id": 18479, "creation_time": "2004-04-11T11:28:31Z", "is_private": false, "text": "Please don't bother.\n\nThe new code  in writeObject is:\n        // Accumulate the names of serializable and non-serializable attributes\n        String keys[] = keys();\n        ArrayList saveNames = new ArrayList();\n        ArrayList saveValues = new ArrayList();\n        for (int i = 0; i < keys.length; i++) {\n            Object value = null;\n            synchronized (attributes) {\n                value = attributes.get(keys[i]);\n            }\n            if (value == null)\n                continue;\n            else if ( (value instanceof Serializable) \n                    && (!exclude(keys[i]) )) {\n                saveNames.add(keys[i]);\n                saveValues.add(value);\n            } else {\n                removeAttribute(keys[i]);\n            }\n        }\n\nThe change is the added removeAttribute. The patch which \"broke\" everything is\n(this is the only difference between 5.0.20 and 5.0.21):\n  diff -u -r1.40 -r1.41\n  --- StandardSession.java\t12 Mar 2004 22:36:46 -0000\t1.40\n  +++ StandardSession.java\t25 Mar 2004 22:17:54 -0000\t1.41\n  @@ -1397,6 +1397,8 @@\n                       && (!exclude(keys[i]) )) {\n                   saveNames.add(keys[i]);\n                   saveValues.add(value);\n  +            } else {\n  +                removeAttribute(keys[i]);\n               }\n           }\n\nI doubt your \"perfectly serializable\" stuff actually is."}, {"count": 5, "tags": [], "bug_id": 18479, "attachment_id": null, "id": 55644, "time": "2004-04-12T01:06:15Z", "creator": "hoju@visi.com", "creation_time": "2004-04-12T01:06:15Z", "is_private": false, "text": "Hi Remy,\n\nI have to admit, it looks pretty rock solid, but how is it that in 5.0.20 my\nsession serialized/deserialized *without* error and gave me a non-null attribute\nvalue (exactly as I expected) after reload?  Serialization is pretty straight\nforward; either it is serializable and you get no errors or it isn't\nserializable and you get errors.  I get no errors.  How is that not the\ndefinition of \"perfectly serializable\"?  And if removeAttribute() is being\ncalled, why isn't the attributeRemoved() method in my SessionBindingListener\nbeing triggered?  I have println() statements in all methods of my\nSessionBindingListener and the only ones I'm seeing are on attributeAdded(). \nYou can go ahead and stick to your guns and say that my object is not\nserializable (I'm 99.9999% sure it is), but you can't, at the same time, claim\nthat it is being removed from the session when attributeRemoved() is not being\ntriggered.... unless there is a bug where the removeAttribute(keys[i]) call is\nnot notifying listeners of the attributes it is removing.\n\nSo, I guess I'll have to investigate some more, but something is wrong here. \nHopefully we can work together to figure it out.\n\nJake"}, {"count": 6, "tags": [], "text": "You were right, Remy,\n\nAfter some investigation, I figured out that one of the packages I was using\nadded a session attribute whose job was to react to cases where it had its\nvalueUnbound() method called and do some cleanup.  However, it was set as an\nanonymous HttpSessionBindingListener which (obviously) doesn't implement\nSerializable.  Besides that, the class in which the anonymous class was created\nis not serializable and if you do a toString() on the session value that was\ncreated, you get the name of the containing class, so I think the containing\nclass would have to be serializable here as well.  In any case, the alternative\nmethod would be to just use a SessionListener#sessionDestroyed() method to do\nthe cleanup.  I think the former method was used because the session is already\ndestroyed in Jetty by the time sessionDestroyed() is called (I think that's\nright?) making cleanup in sessionDestroyed() impossible (That's got to be bad\nbehavior on Jetty's part, but this needs to work with all containers, hence the\nworkaround).  Everything worked under Tomcat after I moved to using\nsessionDestroyed() to do the cleanup.\n\nHowever, shouldn't valueUnbound() be called on the non-serializable attribute\nvalue when it is removed from the session HashTable?  Actually, isn't that\nexactly what this bug is about?  If so, isn't this bug not really fixed?  At the\nvery least, some logging should be done to tell me what happening.  I wouldn't\nhave even have started asking questions here if Tomcat had provided me with some\nhint of what it was doing instead of silently removing non-serializable attributes.\n\n\nJake", "attachment_id": null, "id": 55692, "creator": "hoju@visi.com", "time": "2004-04-13T05:22:22Z", "bug_id": 18479, "creation_time": "2004-04-13T05:22:22Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 18479, "attachment_id": null, "id": 55695, "time": "2004-04-13T09:44:41Z", "creator": "remm@apache.org", "creation_time": "2004-04-13T09:44:41Z", "is_private": false, "text": "The sessionDestroyed timing problem is what the 2.3 specification mandated (this\nwas a mistake obviously), so you cannot have something portable between 2.3 and\n2.4 here.\n\nvalueUnbound is, as far as I can see, correctly called after the value is no\nlonger available through getAttribute.\n\nIn setAttribute:\n        // Replace or add this attribute\n        Object unbound = attributes.put(name, value);\n\n        // Call the valueUnbound() method if necessary\n        if ((unbound != null) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(this, name));\n            } catch (Throwable t) {\n                log(sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\nIn removeAttribute:\n        // Remove this attribute from our collection\n        Object value = attributes.remove(name);\n\n        // Do we need to do valueUnbound() and attributeRemoved() notification?\n        if (!notify || (value == null)) {\n            return;\n        }\n\n        // Call the valueUnbound() method if necessary\n        HttpSessionBindingEvent event = null;\n        if (value instanceof HttpSessionBindingListener) {\n            event = new HttpSessionBindingEvent(this, name, value);\n            ((HttpSessionBindingListener) value).valueUnbound(event);\n        }\n\n"}, {"count": 8, "tags": [], "text": "Hi Remy,\n\nYou are right.  valueUnbound() *is* being called.  The problem is, my registered\nSessionAttributeListener isn't being called (and yes, it is registered.  I get\nprintln() output from attributeAdded()).  I added some println() statements to\nStandardSession to see what was going on and I found something weird; The\nlisteners[] array is null.\n\nHere's my debugging output...\n\nApr 14, 2004 12:23:48 AM org.apache.catalina.core.StandardContext reload\nINFO: Reloading this Context has started\nJRK... key being removed: KILLER_HELPER\nJRK... instance of HttpSessionBindingListener? true\nServletContainerListener.valueUnbound() called!\nJRK... listeners are: null\nApr 14, 2004 12:23:48 AM org.apache.catalina.logger.LoggerBase stop\nINFO: unregistering logger Catalina:type=Logger,path=/picoservlet,host=localhost\n\n\nSo, it makes sense that I wasn't seeing the println() statements in my\nattributeRemoved() method since the following code in\nStandardSession.removeAttributeInternal() can't find the listeners...\n\n    Context context = (Context) manager.getContainer();\n    Object listeners[] = context.getApplicationEventListeners();\n\n\nHere's a patch showing where I added the debugging lines resulting in the above\noutput...\n\nIndex: catalina/src/share/org/apache/catalina/session/StandardSession.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/session/StandardSession.java,v\nretrieving revision 1.43\ndiff -u -r1.43 StandardSession.java\n--- catalina/src/share/org/apache/catalina/session/StandardSession.java\t1 Apr\n2004 20:18:15 -0000\t1.43\n+++ catalina/src/share/org/apache/catalina/session/StandardSession.java\t14 Apr\n2004 05:26:23 -0000\n@@ -1398,6 +1398,8 @@\n                 saveNames.add(keys[i]);\n                 saveValues.add(value);\n             } else {\n+                System.out.println(\"JRK... key being removed: \" + keys[i]);\n+                System.out.println(\"JRK... instance of\nHttpSessionBindingListener? \" + (value instanceof HttpSessionBindingListener));\n                 removeAttribute(keys[i]);\n             }\n         }\n@@ -1568,6 +1570,7 @@\n         // Notify interested application event listeners\n         Context context = (Context) manager.getContainer();\n         Object listeners[] = context.getApplicationEventListeners();\n+        System.out.println(\"JRK... listeners are: \" + listeners);\n         if (listeners == null)\n             return;\n         for (int i = 0; i < listeners.length; i++) {\n\n\nThis is a valid bug, no?\n\nJake", "attachment_id": null, "id": 55733, "creator": "hoju@visi.com", "time": "2004-04-14T05:50:17Z", "bug_id": 18479, "creation_time": "2004-04-14T05:50:17Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 18479, "attachment_id": null, "id": 55873, "time": "2004-04-16T01:48:31Z", "creator": "hoju@visi.com", "creation_time": "2004-04-16T01:48:31Z", "is_private": false, "text": "Just to be clear, the listeners are null only when Tomcat is removing\nnon-serializable attributes.  Listeners exist (as they should) when attributes\nare removed during normal session expiration.  And valueUnbound() always works\njust fine.  So, the bug here is to make sure HttpSessionAttributeListeners get\ncalled in cases where the attribue is being removed because the attribute's\nvalue isn't serializable.\n\nJake"}, {"count": 10, "tags": [], "bug_id": 18479, "attachment_id": null, "id": 56015, "time": "2004-04-19T12:22:22Z", "creator": "moewe@gmx.de", "creation_time": "2004-04-19T12:22:22Z", "is_private": false, "text": "I think Jacob is right cause I have a similiar problem:\n\nUsing Tomcat 5.0.19 I call the function invalidate() to destroy the session. \nThere is a Listener but the method valueUnbound() is not called."}, {"count": 11, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 56352, "time": "2004-04-25T10:39:36Z", "bug_id": 18479, "creation_time": "2004-04-25T10:39:36Z", "is_private": false, "text": "I committed a change which may fix this. Either this fixes it or it will not be\nfixed since (unless you submit a tested patch) I don't see the issue as very\nimportant."}, {"count": 12, "tags": [], "text": "Thanks Remy, that sovled the issue!  The listeners are no longer null so the\nattributeRemoved() method of my HttpSessionAttributeListener is now successfully\ncalled as expected.\n\nJake", "attachment_id": null, "id": 56500, "creator": "hoju@visi.com", "time": "2004-04-27T18:08:08Z", "bug_id": 18479, "creation_time": "2004-04-27T18:08:08Z", "is_private": false}]
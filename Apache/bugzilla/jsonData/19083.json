[{"count": 0, "tags": [], "creator": "fy7175@sbc.com", "attachment_id": null, "is_private": false, "id": 35361, "time": "2003-04-16T17:52:57Z", "bug_id": 19083, "creation_time": "2003-04-16T17:52:57Z", "text": "Hi, \n\nThis bug is for POI HSSF project (in both release versions and most recent dev \nversions).\n\nI use HSSFWorkbook to create 5 spreadsheets and save string values\nto these 5 spreadsheets in a single Excel file. The Java program runs ok \nwithout any error. However, when I open the Excel file manually from my 384M \nRAM NT machine I receive \"Not enough memory\" message from Excel 97. I try to \nopen the same file from 512M or above RAM W2K machine I get \"Errors were \ndetected but Microsoft was able to open the file by making repairs\" message. In \nboth cases, I look at the file opened in Excel 97, it seems that all data were \nthere (there may have something corrupted that I did not notice). So why I \nstill receive the error messages and  how do I get rid of the error messages?\n\nIf I create only one or two spreadsheets of above five at a time, I will not\nreceive any error message when I manually open the Excel file. I start to \nreceive above error messages when I try to create three or more of them. \n\nI attached my source codes here.\n\n\nThanks,\n\nFeng\n\n-------------------------------------------------------------------------------\n\nimport java.lang.reflect.*;\nimport java.util.*;\nimport java.io.*;\n\nimport org.apache.poi.hssf.usermodel.*;\nimport org.apache.poi.poifs.filesystem.*;\n\n\n/**\n *\n * =============================================================================\n * Description: This agent converts a table or set of tables into an Excel file,\n * \t\twhich the user can then save on their hard drive.\n *\n */\npublic class HSSF\n{\n\t\n\tprivate String fileName  = null;\n\t\n\t\n// =============================================================================\n\tpublic HSSF(String fileName)\n\t\tthrows IOException \n\t\t\n    \t{\n    \t\tthis.fileName = fileName;\n    \t}\n\n\t\n// =============================================================================\n\tpublic void writeExcelSpreadsheetOut()\n    \t{\n    \t\n    \t\tFileOutputStream lOutputStream = null; \n    \t\tBufferedOutputStream lBufferedStream = null;\n    \t\n    \t\ttry\n    \t\t{\n\t    \t\t// Create a new file\n\t    \t\t// throws FileNotFoundException\n\t    \t\tlOutputStream = new FileOutputStream( \n\t    \t\t\tthis.fileName );\n\t\t\t\t\n\t\t\t// Create a buffered output stream\n\t\t\tlBufferedStream = new BufferedOutputStream( \n\t\t\t\tlOutputStream );\n\t\t\t\t\n\t\t\t// create a new workbook\n\t\t\tHSSFWorkbook lWorkbook = new HSSFWorkbook( );\n\t\t\t\n\t\t\t// Create the sheets in the workbook.\n\t\t\twriteOneTable( lWorkbook );\t\t\t\n\t\t\twriteOneTable( lWorkbook );\n\t\t\twriteOneTable( lWorkbook  );\n\t\t\twriteOneTable( lWorkbook  );\n\t\t\twriteOneTable( lWorkbook  );\n\t\t\t\n\t\t\t// Set the sheet names.\n\t\t\tlWorkbook.setSheetName( 0, \"PB/NB\" ); \n\t\t\tlWorkbook.setSheetName( 1, \"SWBT\" ); \n\t\t\tlWorkbook.setSheetName( 2, \"SNET\" ); \n\t\t\tlWorkbook.setSheetName( 3, \"AIT\" ); \n\t\t\tlWorkbook.setSheetName( 4, \"Revenue Summary\" ); \n\n\t\t\t// throws IOException\n\t\t\tlWorkbook.write( lBufferedStream );\n\t\t\t\t\t\n\t   \t}\n    \t\tcatch ( FileNotFoundException e )\n    \t\t{\n    \t\t\te.printStackTrace();\n    \t\t}\n    \t\n    \t\tcatch ( IOException e )\n    \t\t{\n    \t\t\te.printStackTrace();\n    \t\t}\n    \t\n    \t\tfinally\n        \t{\t\t\t\n        \t\t// Close the streams.\n        \t\tif ( lBufferedStream != null )\n            \t\t{\n            \t\t\ttry\n                \t\t{\n                \t\t\t// throws IOException\n                \t\t\tlBufferedStream.close( );\n               \t\t\t}\n                \t\tcatch ( IOException e )\n                \t\t{\n                   \t\t\te.printStackTrace();\n               \t \t\t}\n            \t\t}\n            \n            \t\t// Close the streams.\n            \t\tif ( lOutputStream != null )\n            \t\t{\n            \t\t\ttry\n                \t\t{\n                \t\t\t// throws IOException\n                \t\t\tlOutputStream.close( );\n                \t\t}\n                \t\tcatch ( IOException e )\n                \t\t{\n                    \t\t\te.printStackTrace();\n                \t\t}\n            \t\n        \t\t}\n   \t\t }\n\t}\n    \n// =============================================================================\n\tprivate void writeOneTable(HSSFWorkbook aWorkbook)\n    \t{\n    \t    \ttry\n    \t\t{\n    \t\t\t// create a new sheet\n\t\t\tHSSFSheet lSheet = aWorkbook.createSheet( );\n\t\t\t\n\t\t\tint lNumberOfRows = 10;\n\t\n\t\t\t// Get the number of columns from the table.\n\t\t\tint lColumnCount = 90;\n\t\t\t\n\t\t\t\n\t\t\t// Create the first row on the sheet.\n\t\t\tHSSFRow lFirstRow = lSheet.createRow( ( short )0 );\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t// Loop through the columns and write the column \nheaders to the \n\t\t\t// first row.\n\t\t\t// Make sure to calculate the width needed.\n\t\t\tfor( int lColumnHeaderIndex = 0; lColumnHeaderIndex < \nlColumnCount;\n\t\t\t\tlColumnHeaderIndex++ )\n\t\t\t{\n\t\t\t\tHSSFCell lColumnCell = lFirstRow.createCell( \n\t\t\t\t\t( short )lColumnHeaderIndex ); \n\t\t\t\t\n\t\t\t\t// Create a cell style\n\t\t\t\tHSSFCellStyle lCellStyle = \naWorkbook.createCellStyle( );\n\t\t\t\t\n\t\t\t\t// Create a font.\n\t\t\t\tHSSFFont lFont = aWorkbook.createFont( );\n\t\t\t\t\n\t\t\t\t// Set the font to have bold characteristics.\n\t\t\t\tlFont.setBoldweight( HSSFFont.BOLDWEIGHT_BOLD );\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tlCellStyle.setFont( lFont );\n\t\t\t\t\n\t\t\t\t// Set this for the cell.\n\t\t\t\tlColumnCell.setCellStyle( lCellStyle );\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tlColumnCell.setCellValue( \"This is a Test. \" );\n\t\t\t\t\t\t\t\t \n\t\t\t\t\n\t\t\t\t// Set the correct width using the multiplier\n\t\t\t\tlSheet.setColumnWidth( ( short )\nlColumnHeaderIndex, \n\t\t\t\t\t(short) 2000 );\n\t\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\t// Write a for loop here.  Start with the second row to \naccomodate the\n\t\t\t// column headers in the first row.  \n\t\t\t// For every row, and every cell\n\t\t\t\n\t\t\t\n\t\t\tfor( int lRowIndex = 1; lRowIndex <= lNumberOfRows; \nlRowIndex++ )\n\t\t\t{\n\t\t\t\t// Create a new row on the sheet.\n\t\t\t\tHSSFRow lRow = lSheet.createRow( ( short )\nlRowIndex );\n\t\t\t\t\n\t\t\t\t// Loop through each column and assign to a \ncell.\n\t\t\t\tfor( int lColumnIndex = 0; lColumnIndex < \nlColumnCount;\t\n\t\t\t\t\tlColumnIndex++ )\n\t\t\t\t{\t\n\t\t\t\t\t// Create a cell for each column\n\t\t\t\t\tHSSFCell lCell = lRow.createCell( ( \nshort )lColumnIndex ); \n\t\t\t\t\t\t\n\t\t\t\t\t// Fill the cell with data.  We get \nthis from the table and not\n\t\t\t\t\t// the model since we are representing \nwhat the user sees on \n\t\t\t\t\t// the screen.\n\t\t\t\t\t\t\n\t\t\t\t\tlCell.setCellValue( \"123456\" ); \n\t\t\t\t}\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n    \t}\n  \tcatch ( Exception e )\n    \t{\n    \t\te.printStackTrace();\n    \t}\n    }\n\n\n    public static void main(String [] args)\n    {\n\n    \ttry\n\t{\n\t\tSystem.out.println(\"Start creating xls file.\");\n\t\tHSSF hssf = new HSSF(\"MochaTest.xls\");\n\t\tSystem.out.println(\"In process...\");\n\t\thssf.writeExcelSpreadsheetOut();\n\t\tSystem.out.println(\"File created!\");\n\t}\n\tcatch (Exception e )\n\t{\n\t   \te.printStackTrace();\n    \t}\n    }\n\n}"}, {"count": 1, "tags": [], "bug_id": 19083, "text": "can you be more specific on what versions?  To be honest I never read this\nbecause I saw the 1.0.2 at the top.  Can you attach the code via create new\nattachment, most folks can't cut and paste it, it gets mangled.  Leaving open\nfor more info.  Please remove [NEEDS-INFO] from the subj once its added", "id": 41377, "time": "2003-07-24T16:16:24Z", "creator": "poi-support@buni.org", "creation_time": "2003-07-24T16:16:24Z", "is_private": false, "attachment_id": null}, {"id": 65113, "tags": [], "creator": "jheight@apache.org", "is_private": false, "count": 2, "text": "This is fixed in HEAD. Maybe it has been fixed for some time.\n\nIt might be because, Using the code below i got an IllegalArgumentException\nbecause the sheet name contained a '/' maybe that had something to do with it.\nWe have only recently begun throwing this as an error.\n\nJason", "time": "2004-10-14T06:51:45Z", "bug_id": 19083, "creation_time": "2004-10-14T06:51:45Z", "attachment_id": null}]
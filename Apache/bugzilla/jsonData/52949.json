[{"count": 0, "tags": [], "bug_id": 52949, "attachment_id": null, "id": 155084, "time": "2012-03-20T06:37:14Z", "creator": "z.wx.js.c@qq.com", "creation_time": "2012-03-20T06:37:14Z", "is_private": false, "text": "Hi,Nick Burch\nRecently, I want to extract VBA Macros code from Excel file.\nIs it possible to extract Macros code from the inputstream of the Workbook by using POI's method? When the value of the parameter [preserveNodes] in the construct of HSSFWorkbook(InputStream s, boolean preserveNodes) is true, if will preserve macros nodes. Could I have some method to extract the macros from these nodes?\n\nThanks a lot!"}, {"count": 1, "attachment_id": null, "bug_id": 52949, "text": "Unfortunately POI cannot read macro code. The main difficulty is that VBA isn't stored as plain text but instead MS Office uses pretty complex format as described in [MS-OVBA].pdf. \n\nAt minimum, you can grab the node holding VBA code and try to parse it yourself. The main source of information how to do that is [MS-OVBA].pdf, you can download it from the Microsoft site.\n\nBoth HSSF and XSSF preserve macro nodes, this means that you can create templates with macros in MS Office and then populates them with data using POI. \n\nYegor", "id": 155089, "time": "2012-03-20T08:29:22Z", "creator": "yegor@dinom.ru", "creation_time": "2012-03-20T08:29:22Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 52949, "text": "Hi,Yegor\nThanks for your answer!\nI also noticed your email on [http://apache-poi.1045710.n5.nabble.com/Google-Summer-of-Code-Apache-POI-td5582557.html].\nDepending on your tips, I get some ideas from this website[http://www.cpearson.com/Excel/vbe.aspx], and in this way, it may export the VBComponent code module to a text file(Of course, my approach is not a pure java way).\nFirst, using the JACOB(Java COM Bridge) to call the macro which in the VBA.\nSecond, the macro in the VBA which exports the existing VBComponent Code Module to a text file.\nFinally, we could extrat the source code from the output text file(\".frm\",\".bas\" etc.).\nUnfortunately, now I can't make the VBA source code visible, when the VBA Project has been encrypted and I can't supply the password.\nIs there anyway I could make the make the VBA source code fully visible without providing password?\n\nAny idea is welcome.\nThanks a lot!", "id": 155260, "time": "2012-03-23T12:17:56Z", "creator": "z.wx.js.c@qq.com", "creation_time": "2012-03-23T12:17:56Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52949, "attachment_id": 30052, "id": 165847, "time": "2013-03-14T20:12:35Z", "creator": "blagerweij@gmail.com", "creation_time": "2013-03-14T20:12:35Z", "is_private": false, "text": "Created attachment 30052\nClass which can extrace macro source code\n\nSince POI does not provide access to this, I've written a class which allows you to extract the sourcecode as text.\n\nThe two attached classes can be used together with POI (I've tested with 3.8 and 3.9) to process the xl/vbaProject.bin (for ooxml) or XLS file and retrieve the sources.\n\nThe RLEDecompressingInputStream is an InputStream which can be used to decompress the chunks as described in the MS-OVBA specification. It wraps around a compressed inputstream (ussually a DocumentInputStream from the POIFS) and decompresses on the fly to preserve memory.\n\nThe VBAMacroExtractor processes the OLE binary stream records, records the CodePage (in order to convert byte-arrays to Strings) and will store the ModuleOffset. This offset specifies the location in the MemoryStream where the sourcecode starts. The VBAMacroExtractor has been written to automatically detect XLSM or XLS, and uses POIFSReader to process the file only once and preserve memory.\n\nIt might be worthwhile to enhance the POI workbook with classes which provide access to the VBA modules, see Andrey Yesyev's contributions to the poi-dev mailinglist.\n\nI hope it's useful, feel free to use the sources under Apache2 license."}, {"count": 4, "attachment_id": null, "bug_id": 52949, "text": "How would I extract the vba macro code from a doc and OOXML docx file format. Does it necessary to store them in macro enabled format. May be this is a wrong place for posting this question. But I don't know whether I should create another bug or continue in the same because the two are related.", "id": 170066, "time": "2013-09-12T11:18:28Z", "creator": "sehrawat.parshant@gmail.com", "creation_time": "2013-09-12T11:18:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to Barry Lagerweij from comment #3)\n> Created attachment 30052 [details]\n> Class which can extrace macro source code\n> \n> Since POI does not provide access to this, I've written a class which allows\n> you to extract the sourcecode as text.\n\nI know this is reviving an old thread, but this is the only Java code that I've found for extracting VBA macros from Excel as plain text, which works really well.\n\nOne minor improvement: on line 83 of VBAMacroExtractor.java, there is a path with a  backslash hence the code will only work on Windows.\n\n\"\\\\VBA\" should become: File.separatorChar + \"VBA\"\n\nThanks again for sharing this code.", "attachment_id": null, "bug_id": 52949, "id": 190091, "time": "2016-04-09T10:39:29Z", "creator": "asf_bugzilla@duncanjauncey.com", "creation_time": "2016-04-09T10:39:29Z", "is_private": false}, {"count": 6, "tags": [], "text": "The fix mentioned in comment #5 has been spun-off to bug 59296", "attachment_id": null, "id": 190093, "creator": "onealj@apache.org", "time": "2016-04-09T19:33:24Z", "bug_id": 52949, "creation_time": "2016-04-09T19:33:24Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 52949, "text": "Disregard comment 6. Comment 5 refers to attachment 30052 from comment 3, not existing code, so comment 5's fix will be handled in this bug.", "id": 190094, "time": "2016-04-09T20:02:57Z", "creator": "onealj@apache.org", "creation_time": "2016-04-09T20:02:57Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 52949, "text": "Thanks for this. Committed as of r1738431 with a number of tweaks (using NPOIFS, opening logic similar to WorkbookFactory etc)\n\nThere are now two classes you can call, one which returns the macros as in this, the other which is more a tool to extract to disk or STDOUT\n\nNo documentation beyond javadocs yet though, help appreciated on that!\n\nhttps://poi.apache.org/apidocs/org/apache/poi/poifs/macros/VBAMacroReader.html\nhttps://poi.apache.org/apidocs/org/apache/poi/poifs/macros/VBAMacroExtractor.html", "id": 190106, "time": "2016-04-10T13:06:11Z", "creator": "apache@gagravarr.org", "creation_time": "2016-04-10T13:06:11Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 52949, "attachment_id": null, "id": 190107, "time": "2016-04-10T13:39:25Z", "creator": "onealj@apache.org", "creation_time": "2016-04-10T13:39:25Z", "is_private": false, "text": "I wrote a few unit tests for attachment 30052. I was planning to wait until after 3.15-beta1 was released before committing, but it looks like you beat me to it :)"}, {"count": 10, "attachment_id": null, "bug_id": 52949, "text": "See changes: r1738418, r1738423, r1738427, r1738429, r1738431", "id": 190108, "time": "2016-04-10T13:50:00Z", "creator": "onealj@apache.org", "creation_time": "2016-04-10T13:50:00Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 52949, "text": "Added unit tests for document, slideshow, and diagram files in r1738438, r1738439, r1738513, r1738651\n\nCurrently supported for VBA macro reading:\n* Spreadsheet: HSSF, XSSF\n* Document: HWPF, XWPF\n* Slideshow: XSLF (HSLF not supported yet, see bug 59302)\n* Diagram: XDGF (HDGF not supported yet)", "id": 190160, "time": "2016-04-11T21:45:24Z", "creator": "onealj@apache.org", "creation_time": "2016-04-11T21:45:24Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 52949, "attachment_id": null, "id": 190173, "time": "2016-04-12T06:24:00Z", "creator": "apache@gagravarr.org", "creation_time": "2016-04-12T06:24:00Z", "is_private": false, "text": "It's probably worth adding a quite note on this to the site, maybe under the POIFS Embedded resources page?"}]
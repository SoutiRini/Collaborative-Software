[{"count": 0, "attachment_id": null, "bug_id": 14550, "text": "While sending paramters of called cgi script from working thrad to cgid serwer\nby socket '\\n' char is used to separate each part. If in sending enviroment '\\n'\nchar will be used, all parameters will be send bad, some enviroment elements and\n- what worst - every PUT variable will be lost. This bug making cgi scripts\nwhich are working in SSL enviromend and which need SSL information unusable. \nMaybe this patch to mod-cgid.c will help:\n\n284,287d283\n<     rc = read(fd, &j, sizeof(int));\n<     if (rc != sizeof(int)) {\n<         return 1;\n<     }\n303a300,303\n>     rc = read(fd, &j, sizeof(int));\n>     if (rc != sizeof(int)) {\n>         return 1;\n>     }\n305,307c305,313\n<     i = 0; \n<     for (i = 0; i < j; i++) { \n<         environ[i] = ap_getword(r->pool, (const char **)&data, '\\n'); \n---\n>     for(i=0;i<j;i++){\n>     \trc = read(fd, &len, sizeof(int));\n>     \tif (rc != sizeof(int)) {\n> \t    return 1;\n> \t}\n> \tenviron[i] = apr_pcalloc(r->pool,len+1);\n> \trc = read(fd,environ[i],len);\n> \tif (rc != len){\n> \t    return 1;\n308a315,316\n>     }\n> \n310c318,331\n<     r->args = ap_getword(r->pool, (const char **)&data, '\\n'); \n---\n> \n>     rc = read(fd, &len, sizeof(int));\n>     if (rc != sizeof(int)) {\n> \treturn 1;\n>     }\n>     if(rc!=0){\n>     \tr->args = apr_pcalloc(r->pool,len+1);\n>     \trc = read(fd,r->args,len);\n>     \tif (rc != len){\n> \t     \treturn 1;\n>     \t}\n>     } else {\n>     \tr->args=NULL;\n>     }\t\n399a421,425\n>     /* Write the request type (SSI \"exec cmd\" or cgi). */\n>     if (write(fd, &r_type, sizeof(int)) < 0) {\n> \tap_log_rerror(APLOG_MARK, APLOG_ERR, errno, r,\n> \t\t     \"write to cgi daemon process\");\n>     }\n403,404c429,432\n<     for (i =0; env[i]; i++) { \n<         continue; \n---\n>     len=strlen(data);\n>     if (write(fd, &len, sizeof(int))<0){\n>         ap_log_rerror(APLOG_MARK, APLOG_ERR, errno, r,\n> \t\t     \"write to cgi daemon process\");\n407,408c435\n<     /* Write the request type (SSI \"exec cmd\" or cgi). */\n<     if (write(fd, &r_type, sizeof(int)) < 0) {\n---\n>     if(write(fd,data,len)<0){\n412a440,444\n>    for (i =0; env[i]; i++) { \n> \tcontinue; \n>     } \n> \n> \n420c452,465\n<         data = apr_pstrcat(r->pool, data, env[i], \"\\n\", NULL); \n---\n>         len=strlen(env[i]); \n> \tif(write(fd,&len,sizeof(int)) < 0) {\n> \t\tap_log_rerror(APLOG_MARK, APLOG_ERR, errno, r,\n> \t\t\t      \"write to cgi daemon process\");\n> \t}\n> \tif(write(fd,env[i],len) < 0){\n> \t\tap_log_rerror(APLOG_MARK, APLOG_ERR, errno, r,\n> \t\t             \"write to cgi daemon process\");\n> \t}\t\t\n>     }\n>     if(r->args!=NULL){ \n>     \tlen=strlen(r->args);\n>     } else {\n> \tlen=0;\n422,424c467\n<     data = apr_pstrcat(r->pool, data, r->args, NULL); \n<     len = strlen(data); \n<     /* Write the length of the concatenated env string. */\n---\n> \n429,430c472,473\n<     /* Write the concatted env string. */     \n<     if (write(fd, data, len) < 0) {\n---\n>     if( len!=0){\n>    \tif (write(fd,r->args,len)<0){\n433a477,478\n>     }\n>", "id": 26262, "time": "2002-11-14T11:41:11Z", "creator": "apache@czarny.eu.org", "creation_time": "2002-11-14T11:41:11Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 14550, "attachment_id": null, "text": "A fix has just been committed.\n\nCommunication between handler and daemon was extensively reworked.\nEnvironment variables were handled as in the patch submitted with\nthis PR.\n\nThanks for your debug work, and thanks for using Apache 2.0!\n", "id": 26333, "time": "2002-11-15T02:51:39Z", "creator": "trawick@apache.org", "creation_time": "2002-11-15T02:51:39Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 14550, "attachment_id": null, "text": "*** Bug 9953 has been marked as a duplicate of this bug. ***", "id": 53830, "time": "2004-03-10T18:12:39Z", "creator": "jorton@redhat.com", "creation_time": "2004-03-10T18:12:39Z", "is_private": false}]
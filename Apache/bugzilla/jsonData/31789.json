[{"count": 0, "tags": [], "creator": "darylb@date.com", "text": "This is actually a bug for version 1.0.6 (but I couldn't select that version\nbecause it wasn't listed).\n\nWHAT IS IT?:\n     All evaluated expressions are added to the ELEvaluator's\nsCachedExpressionStrings map and never removed. This causes a memory leak which\ncan eventually cause running programs to crash due to an OutOfMemoryError.\n\nWHERE IS IT?:\n     org.apache.taglibs.standard.lang.jstl.ELEvaluator.parseExpressionString(String)\n\nTO REPRODUCE:\n     Write a simple page that uses a JSTL tag, give it a different\ndynamically-generated expression as an attribute value and refresh the page\nseveral times. Eventually you will see the memory climb (through profiling,\nsystem logs or by your process exiting with an OutOfMemoryError).\n\nA POSSIBLE FIX:\n     A possible fix would be to use a last-recently-used cache (such as Java\n1.4's LinkedHashMap) to ensure that items do not remain in this cache indefinitely.", "id": 65334, "time": "2004-10-19T21:28:08Z", "bug_id": 31789, "creation_time": "2004-10-19T21:28:08Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 31789, "attachment_id": null, "text": "Just for the record, there is a thread going on the devs list about how to solve\nthis issue:\n\nhttp://nagoya.apache.org/eyebrowse/BrowseList?listName=taglibs-dev@jakarta.apache.org&by=thread&from=903348\n\nBTW, I have some suggesions to make, but will do it from home (as my email\nclient is not configured here at work to send the proper From: id). Meanwhile, I\nwould suggest Daryl to use this bug for uploading anything.\n\n-- Felipe\n", "id": 65385, "time": "2004-10-20T20:40:38Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-10-20T20:40:38Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 31789, "attachment_id": 13161, "text": "Created attachment 13161\nThe String cache size of my application after ~ 35 mins.", "id": 65389, "time": "2004-10-20T21:18:21Z", "creator": "darylb@date.com", "creation_time": "2004-10-20T21:18:21Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 31789, "attachment_id": 13162, "text": "Created attachment 13162\nThe String cache hit rate of my application after ~ 35 mins.", "id": 65390, "time": "2004-10-20T21:18:49Z", "creator": "darylb@date.com", "creation_time": "2004-10-20T21:18:49Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 13163\nThe String cache calls by my application after ~ 35 mins.", "attachment_id": 13163, "id": 65391, "creator": "darylb@date.com", "time": "2004-10-20T21:19:05Z", "bug_id": 31789, "creation_time": "2004-10-20T21:19:05Z", "is_private": false}, {"count": 5, "text": "Created attachment 13189\neval() calls non-expressions vs. expressions ratio in custom tags", "bug_id": 31789, "is_private": false, "id": 65509, "time": "2004-10-22T15:37:38Z", "creator": "darylb@date.com", "creation_time": "2004-10-22T15:37:38Z", "tags": [], "attachment_id": 13189}, {"count": 6, "tags": [], "text": "Created attachment 13190\neval() calls non-expressions vs. expressions ratio in JSTL tags", "is_private": false, "bug_id": 31789, "id": 65510, "time": "2004-10-22T15:37:59Z", "creator": "darylb@date.com", "creation_time": "2004-10-22T15:37:59Z", "attachment_id": 13190}, {"count": 7, "tags": [], "creator": "darylb@date.com", "text": "Created attachment 13191\nString cache size with indexOf(\"${\") bypass enabled.", "id": 65511, "time": "2004-10-22T15:39:47Z", "bug_id": 31789, "creation_time": "2004-10-22T15:39:47Z", "is_private": false, "attachment_id": 13191}, {"count": 8, "tags": [], "text": "Created attachment 13192\nString cache calls with indexOf(\"${\") bypass enabled (in custom tags).", "attachment_id": 13192, "id": 65512, "creator": "darylb@date.com", "time": "2004-10-22T15:40:21Z", "bug_id": 31789, "creation_time": "2004-10-22T15:40:21Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 31789, "attachment_id": 13193, "is_private": false, "id": 65513, "time": "2004-10-22T15:40:54Z", "creator": "darylb@date.com", "creation_time": "2004-10-22T15:40:54Z", "text": "Created attachment 13193\nString cache hit-rate with indexOf(\"${\") bypass enabled (in custom tags)."}, {"count": 10, "tags": [], "bug_id": 31789, "attachment_id": null, "id": 71412, "time": "2005-02-23T19:35:08Z", "creator": "dhiru.pandey@sun.com", "creation_time": "2005-02-23T19:35:08Z", "is_private": false, "text": "*** Bug 30136 has been marked as a duplicate of this bug. ***"}, {"count": 11, "tags": [], "creator": "bayard@apache.org", "text": "Created attachment 19542\nSPI like fix for this issue, 17700 and 32311\n\nPatch attached which creates a pluggable system via Java system properties to\nallow for different types of caches to resolve the problems expressed in this\nissue, and in #32311 and #17700. \n\nThe Java system property configuration seems weak, but I'm not sure what you\ncould replace it with without changing a bunch of code.\n\nCompletely untested :) Will aim to test it next week.", "id": 99080, "time": "2007-02-07T17:32:21Z", "bug_id": 31789, "creation_time": "2007-02-07T17:32:21Z", "is_private": false, "attachment_id": 19542}, {"count": 12, "text": "There are other locations that might require the caching strategy.\ntag.common.fmt would seem to have a few.", "bug_id": 31789, "attachment_id": null, "id": 99083, "time": "2007-02-07T17:34:18Z", "creator": "bayard@apache.org", "creation_time": "2007-02-07T17:34:18Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 31789, "attachment_id": 20701, "is_private": false, "id": 107228, "time": "2007-08-24T07:59:50Z", "creator": "bayard@apache.org", "creation_time": "2007-08-24T07:59:50Z", "text": "Created attachment 20701\nUpdated version of the caching factory patch\n\nThis is a tested version of the original patch, with a few bugs fixed. Things\nshould behave the same as before by default, but you can either turn on caching\n(forever) or turn off caching (null) to ease some of these issues.\nAlternatively you could write your own cache.\n\nFor DateFormat for example, speed improves 30% if you turn caching of\nDateFormat objects on.\n\nOne issue is that for ELEvaluator parsing, I've removed the synchronization\nthat was being done. I need to change the patch so that that is still there."}, {"count": 14, "tags": [], "bug_id": 31789, "attachment_id": null, "id": 107230, "time": "2007-08-24T08:54:19Z", "creator": "bayard@apache.org", "creation_time": "2007-08-24T08:54:19Z", "is_private": false, "text": "Scratch the synchronization comment. Had been a bit since I'd looked at the\ncode. The ForeverCache maintains the synchronization, so it's at a lower level.\n\nThe patch has a bug in the Resources class where it still uses format(String,\nObject[]) and hasn't had the 'res' deleted to make it use format(Object[]). Even\nwith that fix, I can't make a fmt:message faster."}, {"count": 15, "tags": [], "bug_id": 31789, "attachment_id": 20866, "text": "Created attachment 20866\nPatch implementing Kris's mBypassCache suggestion\n\nHere's a patch that implement's Kris's mBypassCache.", "id": 108487, "time": "2007-09-21T15:06:08Z", "creator": "bjorn@sourcelabs.com", "creation_time": "2007-09-21T15:06:08Z", "is_private": false}, {"count": 16, "text": "Also reported to EL as:\n\nhttp://issues.apache.org/jira/browse/EL-1", "bug_id": 31789, "is_private": false, "id": 108501, "time": "2007-09-22T11:39:44Z", "creator": "bayard@apache.org", "creation_time": "2007-09-22T11:39:44Z", "tags": [], "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 31789, "attachment_id": 20868, "text": "Created attachment 20868\nSlight modification of Bjorn's patch\n\nI've attached a slight modification to Bjorn's patch - adding a note to the\njavadoc and restricting the change to the ELEvaluator class.", "id": 108502, "time": "2007-09-22T12:32:22Z", "creator": "bayard@apache.org", "creation_time": "2007-09-22T12:32:22Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 31789, "attachment_id": 20887, "text": "Created attachment 20887\nImplementation of LRU cacheing strategy\n\nAfter doing a ton of research, I found that someone had actually branched 1.0.6\nand implemented a LRU-based cacheing strategy, with the size of the cache\ndefinable by the user in a context initialization parameter. The implementation\nuses a set of classes borrowed from Commons Collections, but does not introduce\nCollections as a dependancy. I found this code in the following branch:\n\nhttp://svn.apache.org/repos/asf/jakarta/taglibs/proper/standard/branches/STANDARD_1_0_BRANCH\n\n\nThe default cache size is 100 entries. It'd probably be wise to experiment with\nthis value in one's own environment before settling on an optimum size.\n\nAfter a conversation with Henri on the taglibs dev list, I've gone ahead and\nadapted the patch to work with 1.1.  I've already run it through the taglibs\nunit test suite -- all tests passed. This patch also fixes the issue whereby\ncacheing could not be turned off.", "id": 108661, "time": "2007-09-26T12:59:29Z", "creator": "bjorn@sourcelabs.com", "creation_time": "2007-09-26T12:59:29Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 31789, "attachment_id": null, "text": "And for the sake of completeness, here's a link to the new mailing list\ndiscussion on this bug:\n\nhttp://mail-archives.apache.org/mod_mbox/jakarta-taglibs-dev/200709.mbox/browser", "id": 108662, "time": "2007-09-26T13:03:37Z", "creator": "bjorn@sourcelabs.com", "creation_time": "2007-09-26T13:03:37Z", "is_private": false}, {"count": 20, "tags": [], "text": "The 1.0.6 fix has been applied to the 1.1 branch.", "is_private": false, "bug_id": 31789, "id": 108825, "time": "2007-09-29T22:55:14Z", "creator": "bayard@apache.org", "creation_time": "2007-09-29T22:55:14Z", "attachment_id": null}]
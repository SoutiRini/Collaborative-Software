[{"count": 0, "tags": [], "text": "jdk version: 1.3.1\n\nwe write rmi client in jsp. the client calls lookup method, then one rmi \nmethod, which on server side simply prints a count to console and returns \nimmediately. testing using microsoft web stress tool with either multi-thread \nor single-thread, the server port (8080 by default) becomes not accessible \nafter about 100,000 requests. the rmiregister, rmi server and tomcat are all \nok, but the port 8080 is down, and tomcat needs to be restarted.\n\nwe move the same rmi client code to servlet, test millions of request with web \nstress tool, everything is ok.\n\nthis bug is reproducible. we also test it on an aix system and the port becomes \nnot accessible merely after thousands of requests.", "is_private": false, "id": 11199, "creation_time": "2002-02-27T07:03:13Z", "time": "2002-02-27T07:03:13Z", "creator": "hughjlee@yahoo.com", "bug_id": 6704, "attachment_id": null}, {"count": 1, "tags": [], "text": "In Tomcat 3.3.x, JSP pages are just special cases of Servlets.  As such, I find \nthis one to be really strange.  However, there isn't really enough here to let \nme track it down.  It would help if you could post the Tomcat log files as an \nattachment to this bug.  \n\nOne other thing that would be interesting to try is if you get the same problem \nwhen you declare the servlet in the web.xml file:\n<servlet>\n  <servlet-name>MyRMIPage</servlet-name>\n  <jsp-page>/rmipage.jsp</jsp-page>\n</servlet>\nand access it via a servlet-mapping:\n<servlet-mapping>\n  <servlet-name>MyRMIPage</servlet-name>\n  <url-pattern>/MyRMIPage/*</url-pattern>\n</servlet-mapping>\n\n(The examples are instructive only, it shouldn't matter if you vary them).", "is_private": false, "id": 11201, "creator": "william.barker@wilshire.com", "time": "2002-02-27T07:56:17Z", "bug_id": 6704, "creation_time": "2002-02-27T07:56:17Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "william.barker@wilshire.com", "attachment_id": null, "text": "The actual problem turned out to be that the tests were creating a new session \nfor each request, until the JVM (almost) ran out of memory.  Tomcat is already \ndoing as much as it can (by allowing the webmaster to set maxActiveSession on \nthe SimpleSessionStore element) for this case.", "id": 11377, "time": "2002-03-02T05:28:10Z", "bug_id": 6704, "creation_time": "2002-03-02T05:28:10Z", "is_private": false}]
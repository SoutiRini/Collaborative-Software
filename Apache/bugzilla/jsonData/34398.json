[{"count": 0, "tags": [], "bug_id": 34398, "text": "each task has its own syntax which is related to its specific nature.\n\nI propose layering a standard alternate task syntax which normalises elements\nand attributes, making life a little bit easier to create a validation schema;\n\n<echo message=\"this is a test\"/>\n\nwould be\n\n<task name=\"echo\">\n  <attribute name=\"message\">this is a test</attribute>\n</task>\n\n<task name=\"echo\">\nthis is a test\n</task>\n\nachieved via creation of a new <task/>. \n\n<task name=\"\">\n <element name=\"\"/>\n <attribute name=\"\"/>\n</task>", "id": 73523, "time": "2005-04-11T14:33:42Z", "creator": "james.fuller.2007@gmail.com", "creation_time": "2005-04-11T14:33:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "is_private": false, "id": 73525, "time": "2005-04-11T15:07:31Z", "bug_id": 34398, "creation_time": "2005-04-11T15:07:31Z", "text": "Should be possible.\n\n<task name=\"\"/> would use Project.createTask() and <attriubte> and <element> \nwould be done via reflection ... But why? Ok, you could validate the schema - \nbut not the real content. There is no difference between\n\n<nonexistenttask/>\n\nand\n\n<task name=\"nonexistenttask\"/>\n\nThe validation process wouldnt be helpful here.\n\n\nAnd for validation: it would be possible to mix them because of bwc reasons!\n\nSo I think the chance for this is very low - especially if you dont provide a \npatch ;-)"}, {"count": 2, "tags": [], "bug_id": 34398, "attachment_id": null, "id": 73527, "time": "2005-04-11T15:16:31Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2005-04-11T15:16:31Z", "is_private": false, "text": "If the only need for this is validation, then why not having an XSLT that \ntransform the regular ANT structure into this alternate and then passes the \nresult into the validation. You may need to add some smarts to match errors \nback into the original input, but should be doable.\n\nI do not like providing several syntax for the same thing, it will just cause \nproblems.\n"}, {"count": 3, "tags": [], "creator": "james.fuller.2007@gmail.com", "attachment_id": null, "text": "agree with both points\n\nalso its easy enought to go from an xml format like this to a valid Ant build\nusing xslt, so from this point of view, I would want to cut out a step....the\nmain reason is to leverage the typing that I have implemented into a larger\nbuild system, which generates this type of thing;\n\n<task name=\"echo\">\n   <attribute schema:type=\"xs:string\" name=\"message\">this is a message</attribute>\n</task>\n\nwith a bit more meta data as well.\n\nre we get lexical validation of primative datatype values as well...I probably\nshould have guessed that most of the benefits of generating a more verbose and\nregular format would not interest most users.....hehe, which is why I will\nsupply patch\n", "id": 73528, "time": "2005-04-11T15:32:26Z", "bug_id": 34398, "creation_time": "2005-04-11T15:32:26Z", "is_private": false}, {"count": 4, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "text": "How are you going to handle types that take arbitrary XML inline?", "id": 73529, "time": "2005-04-11T15:35:59Z", "bug_id": 34398, "creation_time": "2005-04-11T15:35:59Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34398, "text": "At one time I had suggested to be able to perform definition/execution at once\nwith a \n<task classname=\"foo\">\n<type classname=\"foo\">\n\nstructure.  If this initiative could include these alternatives to the name\nattribute you would probably get my support.  Most likely a way to supply the\nclasspath for this would be helpful as well.  This would indicate a nested\nclasspath, usually.  And that leads me to think you may do better to enclose the\n\"normal\" config attrs/elems/arbitrary XML within one or separate blocks to\neliminate confusion, esp. since you don't necessarily care about brevity if I\nunderstand you correctly.\n\n-Matt\n\nince you're already in a long format here it may prove helpful, especially ", "id": 73535, "time": "2005-04-11T16:43:29Z", "creator": "mbenson@apache.org", "creation_time": "2005-04-11T16:43:29Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "james.fuller.2007@gmail.com", "attachment_id": null, "text": "(In reply to comment #5)\n> At one time I had suggested to be able to perform definition/execution at once\n> with a \n> <task classname=\"foo\">\n> <type classname=\"foo\">\n\n+1, this is good from an ant processing perspective, already have classname\nmapped to my existing <task/> markup...so easy to bring in \n", "id": 73538, "time": "2005-04-11T17:04:21Z", "bug_id": 34398, "creation_time": "2005-04-11T17:04:21Z", "is_private": false}, {"count": 7, "tags": [], "creator": "james.fuller.2007@gmail.com", "attachment_id": null, "is_private": false, "id": 73540, "time": "2005-04-11T17:15:18Z", "bug_id": 34398, "creation_time": "2005-04-11T17:15:18Z", "text": "(In reply to comment #4)\n> How are you going to handle types that take arbitrary XML inline?\n\n<element schema:type=\"myschema:inline\"/> would be one way....or create an\n<inline/> element...not quite sure yet have to work my way through most tasks to\nmake sure this is valid approach.\n\nI see this a way of nearly coming up with a task prototype/signature as\ndefinition in parallel \n\n<ant:task name=\"\" classname=\"\">\n\n<ant:element name=\"\" schema:type=\"xs:boolean\" classname=\"\"/>\n\n<ant:element name=\"fileset\" schema:type=\"myschema:fileset\" classname=\"\"/> or\nshorthand <ant:fileset/>\n\n<ant:attribute name=\"\" schema:type=\"xs:string\"/>\n\n<ant:inline/>\n\n</ant:task>\n\ncheers, Jim Fuller"}, {"count": 8, "tags": [], "text": "IMO, XSD is evil and misguided. That doesn't mean that people arent free to use\nit, but any attempt to retrofit ant to work with XSD is inherently doomed. It's\njust too inflexible, and very hard to mix XSD with dynamic typing/naming of\nelements, which is what ant offers (i.e. you cannot determine which set of\nelements are valid in ant unless you execute the build file and that of any\ninclusions). I would definitely -1 any attempt to use XSD as the type system for\nant, a vote based on experience ( http://forge.gridforum.org/projects/cddlm-wg )\n\nPutting that aside, it may be possible to have a verbose representation of a\ntask invocation that didnt use XSD or other schema, if that makes it easier for\nmachines to work with the language. But then, if you want machine only, why not\ndefined an XML representation that can drive Ant directly, and is verbose for\ndependencies and other stuff that is implicitly hidden in strings, but which\nmaps to ant classic. \n\n", "is_private": false, "bug_id": 34398, "id": 73545, "time": "2005-04-11T18:21:18Z", "creator": "stevel@apache.org", "creation_time": "2005-04-11T18:21:18Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 34398, "is_private": false, "text": "(In reply to comment #8)\n> IMO, XSD is evil and misguided. That doesn't mean that people arent free to use\n> it, but any attempt to retrofit ant to work with XSD is inherently doomed. It's\n> just too inflexible, and very hard to mix XSD with dynamic typing/naming of\n> elements, which is what ant offers (i.e. you cannot determine which set of\n\nin my system I use RelaxNG, though I process using NRL so a DTD/XML\nSchema/RelaxNG...even XSLT templates/functions can be specified to validate...no\none schema technology is complete...for example using XML Schema it is very\ndifficult/not possible to define co-constraints...I am not putting forward an\narguement to constrain Ant processing to these datatypes.\n\nXML schema is not evil, as with many enterprise in scope specifications...its\njust not applicable to 99% of the problem domain (the same icky feeling with the\nWS* stack applies here as well). \n\nI think we will find that XML Schema primative datatypes will find some level of\nadoption; there still is a a lot of automation that can be derived from even\nsimple datatypes...we shall see..as I said in any event I am agnostic.\n\nI *am* trying to create editor tools which are given enough hints to generate\nvalid markup (across many different processes not just Ant)...I am not proposing\nthat Ant actually consumes/validates against the schema:type attribute \n\n> Putting that aside, it may be possible to have a verbose representation of a\n> task invocation that didnt use XSD or other schema, if that makes it easier for\n> machines to work with the language. But then, if you want machine only, why not\n> defined an XML representation that can drive Ant directly, and is verbose for\n> dependencies and other stuff that is implicitly hidden in strings, but which\n> maps to ant classic. \n\nyes, I agree that I can find some middle ground...working on a prototype approach\n\n\n", "id": 73548, "time": "2005-04-11T18:36:37Z", "creator": "james.fuller.2007@gmail.com", "creation_time": "2005-04-11T18:36:37Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "This will not be done.\nThe engine of ant is based around mapping\nattribute names to bean attributes and elements\nto nested beans.\nChanging this behaviour will not be useful.", "attachment_id": null, "bug_id": 34398, "id": 92982, "time": "2006-09-04T13:24:04Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-04T13:24:04Z", "is_private": false}]
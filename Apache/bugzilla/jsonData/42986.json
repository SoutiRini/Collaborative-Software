[{"count": 0, "tags": [], "bug_id": 42986, "is_private": false, "text": "When Oracle's xmlparserv2 is used along with Axis WS client and WSS4J, the \nSOAPEnvelop generated after xmlsecurity processing is faulty. It puts the \n</#document> tag.\n\nI looked thru the xmlsecurity and find out the problem is in method \ncanonicalizeSubTree \noforg.apache.xml.security.c14n.implementations.CanonicalizerBase.java. After \nline #321 it doesnt check if the parentNode type is not Node.DOCUMENT_NODE and \nit appends in the writer.\n\nThe check I added:\n\n...\nafter #321\n\n    \t\twhile (sibling==null  && parentNode!=null) {    \t\n\t      \t\t      \t\t\t\n\t\t\t\tif(parentNode.getNodeType() != \nNode.DOCUMENT_NODE)\n\t\t\t\t{\n\t\t\t\t\twriter.write(_END_TAG);\n\t\t\t\t\tUtfHelpper.writeByte(((Element)\nparentNode).getTagName(),writer,cache);        \n\t\t\t\t\twriter.write('>');\n\t\t\t\t}\n.....", "id": 105993, "time": "2007-07-27T05:21:33Z", "creator": "dubeysumit@yahoo.com", "creation_time": "2007-07-27T05:21:33Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 42986, "text": "I need a test case for this bug. I am not sure I understand the problem or the\nfix. If the type of parentNode is Node.DOCUMENT_NODE, then this statement will\nthrow a ClassCastException:\n\nUtfHelpper.writeByte(((Element)parentNode).getTagName(),writer,cache);", "id": 108989, "time": "2007-10-04T08:14:37Z", "creator": "sean.mullan@oracle.com", "creation_time": "2007-10-04T08:14:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 42986, "is_private": false, "text": "Created attachment 22545\nTest case", "id": 120495, "time": "2008-09-09T04:01:14Z", "creator": "rsanz@indra.es", "creation_time": "2008-09-09T04:01:14Z", "attachment_id": 22545}, {"count": 3, "tags": [], "creator": "rsanz@indra.es", "attachment_id": null, "text": "Using Apache XML Security and Oracle XML parser (xmlparserv2) to canonicalize a document generates a malformed document (always ends with tag: </#document> ). Works fine using Xerces instead of Oracle XML parser.\n\nA simple testcase is attached. Result of testcase is a malformed xml:\n<NodeRoot><NodeTest></NodeTest></NodeRoot></#document>", "id": 120496, "time": "2008-09-09T04:03:32Z", "bug_id": 42986, "creation_time": "2008-09-09T04:03:32Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 42986, "text": "Created attachment 23749\nA patch for this issue.\n\n\nI debugged through this test-case and have come up with a patch.\n\nThe reason there's a problem with the Oracle DOM implementation is that the Document implementation seems to also implement the Element interface, and so the line:\n\nif (!(parentNode instanceof Element)) {\n\nin CanonicalizerBase doesn't get executed, even though \"parentNode\" is a document node, and hence the extra content \"</#document>\" gets outputted.\n\nThe good news is that this can be easily fixed by examining the Node type of parentNode rather than using reflection, i.e.:\n\nif (parentNode == null || Node.ELEMENT_NODE != parentNode.getNodeType()) {\n\nas the Node in question is a Document node, even if confusingly it's also an instanceof Element. \n\nI've confirmed that this fix works fine with the Oracle DOM implementation. The patch also replaces any other call to instanceof Element/Document in XML-Security - we should avoid using reflection when a simple API call will suffice for performance reasons.\n\nColm.", "id": 127592, "time": "2009-06-03T06:56:24Z", "creator": "coheigea@apache.org", "creation_time": "2009-06-03T06:56:24Z", "is_private": false, "attachment_id": 23749}, {"count": 5, "tags": [], "bug_id": 42986, "is_private": false, "id": 128716, "attachment_id": null, "creator": "coheigea@apache.org", "creation_time": "2009-07-10T04:34:57Z", "time": "2009-07-10T04:34:57Z", "text": "\nPatch applied.\n\nColm."}]
[{"count": 0, "tags": [], "bug_id": 28874, "is_private": false, "id": 57095, "creation_time": "2004-05-10T14:48:53Z", "time": "2004-05-10T14:48:53Z", "creator": "xavier.witdouck@ubs.com", "text": "When trying to extend an environment for a forked VM for example, it is \npossible to specify modified environment variables, such as pre-pending \nsomething to the PATH for example.  The modified environment is worked out \nwithin the Execute class' patchEnvironment() method which has two fundamental \nproblems which could cause things to go subtly wrong.\n\n1.  It does case sensitive matching of environment variable keys on all \nplatforms.  This should not be the case on Windows.  Our XP machines use \"Path\" \nfor the PATH environment variable, however this is not necessarily guaranteed.  \nPersonally I suggest to extend the <env> element with an optional boolean \nattribute to specify whether the environment variable is case sensitive or not.\n\n2.  Looking at the patchEnvironment() implementation, it matches keys by using \nstring.startsWith() which means that PATH_CAT also matches PATH substring.  \nThis could dangerously cause some environment variables to be dropped off your \nforked process leading to all sorts of potential problems.  Keys should be \nmatched for exact length match as well as contents, and also check case \ninsestive matches according to the platform or possibly some user specification.", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28874, "is_private": false, "id": 93669, "creation_time": "2006-09-16T23:44:30Z", "time": "2006-09-16T23:44:30Z", "creator": "peterreilly@apache.org", "text": "As regards 1., you are quite correct.\nWindows is case-insenstive as regards to env variables.\nThis has causes a lot of grief with build files and\nsome bizarre work-arounds.\nI have modded patchEnvoronment to be case-insensitive\nfor windows os, should be in ant 1.7.\n\nAs regards 2., the key includes the '=' character\nso the code is correct it will match Path= and not Path_cat=\n\nThanks for the report and a pointer to the code\nin question as it can be very hard to find this!.\n", "attachment_id": null}, {"count": 2, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 95936, "time": "2006-11-17T08:18:16Z", "bug_id": 28874, "creation_time": "2006-11-17T08:18:16Z", "text": "*** Bug 40992 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 28874, "is_private": false, "id": 103272, "creation_time": "2007-05-16T13:21:14Z", "time": "2007-05-16T13:21:14Z", "creator": "mark_melvin@amis.com", "text": "This is nice that you tried to fix this for Ant 1.7 but I think you have made \nthings worse than before - especially for people that have inserted ugly \nworkarounds.  For example, to ensure I had augmented any existing PATH \nenvironment variable values before on Windows I would have inserted the \nfollowing into my Ant scripts:\n\n<exec ...\n  <env key=\"Path\" value=\"new\\paths;${env.Path}\" />\n  <env key=\"PATH\" value=\"new\\paths;${env.PATH}\" />\n\nThis would have covered my butt before, augmenting the PATH whether it happened \nto be defined as \"Path\" or \"PATH\" in my current Windows environment.\n\nHowever - my builds all broke in Ant 1.7.  It took me quite a while to figure \nout why, but it looks like it is due to this bugfix.  It appears that the \nbugfix was only implemented for the \"setting\" of environment variables.  For \ninstance, on Windows XP my path is defined as \"Path\".  If I read my environment \ninto the property \"env\", then ${env.Path} gives me my actual path and \n${env.PATH} is not defined at all!  However, if I execute my Ant snippet above \n(which is in all my build scripts as a workaround), I end up setting my path \ncorrectly with the first <env> key and then hosing it with the second one.\n\nObviously it is impractical to set a property for every case combination of \nevery environment variable, but how are we supposed to know which case is even \nset?  If I am interested in getting the path in my build script, how do I know \nif it is \"Path\" or \"PATH\"?  Now I have to do something like this:\n\n<property environment=\"env\"/>\n<condition property=\"env.brandNewPath\" value=\"${env.Path}\">\n  <isset property=\"env.Path\" />\n</condition>\n<condition property=\"env.brandNewPath\" value=\"${env.PATH}\">\n  <isset property=\"env.PATH\" />\n</condition>\n\n<exec ...\n  <env key=\"Path\" value=\"new\\paths;${env.brandNewPath}\" />\n\n\nI'm not sure if there is a good solution to this problem at all.  However, I \nlike the idea of an optional boolean that was proposed in Comment #1.  At least \nthen you are explicitly turning this behaviour on.  Perhaps a boolean that \nforces all environment variables to be uppercase in the <property> task would \nbe a good solution?  Something like:\n\n<property environment=\"env\" forceuppercase=\"true\" />\n\nOr perhaps we can get an \"append\" or \"prepend\" attribute on the <env> element \nthat will do the right case-insensitive thing when setting a variable?\n\nI dunno.", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 28874, "attachment_id": null, "text": "(In reply to comment #3)\n> <exec ...\n>   <env key=\"Path\" value=\"new\\paths;${env.Path}\" />\n>   <env key=\"PATH\" value=\"new\\paths;${env.PATH}\" />\n> \n\nLong story short, I think you just picked the wrong workaround.  :(  The more common way to work \naround this would be:\n\n<property environment=\"env\" />\n<property name=\"env.PATH\" value=\"${env.Path}\" />\n<!-- now you know that whichever version was in the env, env.PATH now has its content -->\n...\n\n<exec ...>\n  <env key=\"PATH\" path=\"new\\paths;${env.PATH}\" />\n</exec>", "id": 103274, "time": "2007-05-16T13:34:32Z", "creator": "mbenson@apache.org", "creation_time": "2007-05-16T13:34:32Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 28874, "is_private": false, "id": 103276, "creation_time": "2007-05-16T14:23:40Z", "time": "2007-05-16T14:23:40Z", "creator": "mark_melvin@amis.com", "text": "Aha.  Well, that's a bit of a drag - but your workaround is much more elegant \nthan the conditional junk.  Thanks.", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rkhb@gmx.net", "attachment_id": null, "id": 75822, "time": "2005-06-02T23:00:27Z", "bug_id": 35194, "creation_time": "2005-06-02T23:00:27Z", "is_private": false, "text": "Tested with:\nOS: Win98SE, Win2k\nHTTPD: Apache 1.3.26, 1.3.27, 1.3.33, 2.0.53, 2.0.54\nModule: mod_actions\nPHP: 4.3.9, 4.3.10, 5.0.2\n\nIf PHP is merged as a CGI binary by an Action-directive in httpd.conf,\nLimitRequestBody, which is set in a .htaccess-file or a\n<Directory>/<Location>-Block is ignored for a POST-Request that matches the\nAction-Directive. PHP will be executed as if LimitRequestBody does not exist.\n\nExample:\n\nConfiguration httpd.conf as described in the manual:\nAddType application/x-httpd-php .php\nAction application/x-httpd-php \"/php/php.exe\" (\"/php/php-cgi.exe\" )\n\nCreate anywhere a .htaccess:\nLimitRequestBody 1000\n\nPut a \"proto1.php\" in the same directory:\n\n<html>\n<?php\necho '<pre>',\n\t'safe_mode=',ini_get('safe_mode'),\"\\n\",\n\t'max_execution_time=',ini_get('max_execution_time'),\"\\n\",\n\t'file_uploads=',ini_get('file_uploads'),\"\\n\",\n\t'upload_tmp_dir=',ini_get('upload_tmp_dir'),\"\\n\",\n\t'upload_max_filesize=',ini_get('upload_max_filesize'),\"\\n\",\n\t'post_max_size=',ini_get('post_max_size'),\"\\n\",\n\t'$_FILES ',print_r($_FILES),\"\\n\",\n\t'</pre>';\n?>\n<form enctype=\"multipart/form-data\" action=\"proto1.php\" method=post>\nSend this file: <input name=\"userfile\" type=\"file\">\n<input type=\"submit\" value=\"Send File\">\n</html>\n\nThere is no way to get an error 413!\n\nFor my purposes (local development) I put following block into mod_actions just\nbefore the ap_internal_redirect_handler(...)-call:\n\nApache 1.3.33:\n\nif ( ap_table_get(r->headers_in, \"Content-Length\") &&\n     atoi(ap_table_get(r->headers_in, \"Content-Length\")) >\n(int)ap_get_limit_req_body(r)\n   ) return DECLINED;\n\nApache 2.0.54:\n\nif ( apr_table_get(r->headers_in, \"Content-Length\") &&\n     atoi(ap_table_get(r->headers_in, \"Content-Length\")) >\n(int)apr_get_limit_req_body(r)\n   ) return DECLINED;\n\nI don't believe that this is the correct way to handle the problem in a\nproduction server, but I didn't find a better place yet."}, {"count": 1, "tags": [], "bug_id": 35194, "attachment_id": null, "text": "Apache 2.0.54:\n\nif ( apr_table_get(r->headers_in, \"Content-Length\") &&\n     atoi(apr_table_get(r->headers_in, \"Content-Length\")) >\n     (int)ap_get_limit_req_body(r)\n   ) return DECLINED;\n\nSorry.\n\t", "id": 75823, "time": "2005-06-02T23:07:07Z", "creator": "rkhb@gmx.net", "creation_time": "2005-06-02T23:07:07Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 35194, "attachment_id": null, "text": "This is just a guess because I haven't looked at the code in question, but what\nif you apply the LimitRequestBody to php.exe rather than proto1.php.  php.exe is\nthe one that is actually getting the POST.", "id": 75966, "time": "2005-06-03T15:30:58Z", "creator": "slive@apache.org", "creation_time": "2005-06-03T15:30:58Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 35194, "attachment_id": null, "text": ">apply the LimitRequestBody to php.exe rather than proto1.php\n\nYour guess is correct, LimitRequestBody in a <Directory '/php/'>-block will be\nexecuted. But the website will later be uploaded to an internet webserver where\nI haven't access to the httpd.conf neither information about it. On that server\nLimitRequestBody in a .htaccess file is considered - while PHP (or something\nelse) crashes when POST_MAX_SIZE is exceeded.\n\nI solved the problem for myself. Maybe the described behavior is not a bug, but\na misunderstanding on my side. In this case I would appreciate adding a CAUTION\nto the documentation.", "id": 75985, "time": "2005-06-03T18:51:33Z", "creator": "rkhb@gmx.net", "creation_time": "2005-06-03T18:51:33Z", "is_private": false}]
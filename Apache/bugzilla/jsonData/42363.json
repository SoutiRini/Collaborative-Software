[{"count": 0, "tags": [], "creator": "o.flege@market-maker.de", "attachment_id": null, "id": 102979, "time": "2007-05-09T00:16:27Z", "bug_id": 42363, "creation_time": "2007-05-09T00:16:27Z", "is_private": false, "text": "org.apache.catalina.tribes.io.BufferPool\nuses double-checked locking:\n\n        if (  (instance == null) ) {\n            synchronized (BufferPool.class) {\n                if ( instance == null ) {\n\nsince dcl is broken, please replace with thread-safe initialization."}, {"count": 1, "tags": [], "creator": "fhanik@apache.org", "text": "why is this broken?", "id": 102984, "time": "2007-05-09T02:31:39Z", "bug_id": 42363, "creation_time": "2007-05-09T02:31:39Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "sebster@sebster.com", "text": "(In reply to comment #1)\n> why is this broken?\n\nBecause of the way the Java memory model works.\n\nSee:\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n", "id": 102985, "time": "2007-05-09T02:38:10Z", "bug_id": 42363, "creation_time": "2007-05-09T02:38:10Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42363, "attachment_id": null, "text": "(In reply to comment #1)\n> why is this broken?\n\naccording to http://www.javaconcurrencyinpractice.com/ p. 348: \"it is possible\nto see a current value of the reference (i.e. instance) but stale values for the\nobject's state, meaning that the object could be seen to be in an invalid or\nincorrect state\". \n\n", "id": 102987, "time": "2007-05-09T04:24:46Z", "creator": "o.flege@market-maker.de", "creation_time": "2007-05-09T04:24:46Z", "is_private": false}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "I love code lawyers :)", "id": 102988, "time": "2007-05-09T04:25:12Z", "bug_id": 42363, "creation_time": "2007-05-09T04:25:12Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 42363, "attachment_id": null, "text": "The last comment fails to explain why this bug report is invalid.\n\nIn fact, this *is* a valid bug report. With the supplied code it is perfectly\npossible for the \"instance\" field to become visible to another thread before the\n\"maxPoolSize\" field in the pool implementation does. Since these other threads\nthen no longer synchronize on the lock, this internal state of the pool\nimplementation may never become visible to these threads. This could cause\ngetMaxSize() to always return 0 in these threads.\n\nAs it stands this class is not thread safe, and the only way to properly use it\naccross multiple threads is through extra synchronization by those who use the\nclass.", "id": 102990, "time": "2007-05-09T05:01:00Z", "creator": "sebster@sebster.com", "creation_time": "2007-05-09T05:01:00Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 42363, "is_private": false, "id": 102998, "time": "2007-05-09T07:10:06Z", "creator": "fhanik@apache.org", "creation_time": "2007-05-09T07:10:06Z", "tags": [], "text": "Basically, you are saying that the JVM vendors have not modified the java memory\nmodel since 2001. And the example they are giving is with the Symantec JIT\ncompiler, does this one even exist anymore?\n\nFurther more, JSR 133 was created in 2001 to address this problem, and was\napproved in 2004\n\n<static>Houston, do we still have a problem</static>"}, {"count": 7, "tags": [], "bug_id": 42363, "attachment_id": null, "is_private": false, "id": 102999, "time": "2007-05-09T07:17:18Z", "creator": "fhanik@apache.org", "creation_time": "2007-05-09T07:17:18Z", "text": "also, volatile should solve it, so I'll add that in :) does that give us a start\nin the little black book :)\n"}, {"count": 8, "attachment_id": null, "bug_id": 42363, "is_private": false, "id": 103000, "time": "2007-05-09T07:42:48Z", "creator": "sebster@sebster.com", "creation_time": "2007-05-09T07:42:48Z", "tags": [], "text": "\n(In reply to comment #7)\n> also, volatile should solve it, so I'll add that in :) does that give us a start\n> in the little black book :)\n> \n\nJSR-133 does not fix the double checked locking idiom. However, volatile does\nindeed solve the problem (of course only in JVMs that implement it, so that\nmeans 1.5 and up). See also\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html for some more\nbackground and the alternative thread safe solution that works on all JVMs\n(Initialization On Demand Holder idiom).\n"}, {"count": 9, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "Who cares ? There's most likely no reason to add a volatile: some double locking\nusage is well justifed, it depends on the situation.\n\nI would recommend ignoring Sebastiaan, BTW :)\n", "id": 103002, "time": "2007-05-09T08:06:11Z", "bug_id": 42363, "creation_time": "2007-05-09T08:06:11Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "djencks@apache.org", "attachment_id": null, "id": 103006, "time": "2007-05-09T08:33:52Z", "bug_id": 42363, "creation_time": "2007-05-09T08:33:52Z", "is_private": false, "text": "Is there some reason not to put the initialization code in a static block, thus\navoiding the question of whether or when double checked locking works?  I can't\nsee any way this class could be loaded without wanting the initialization performed.\n\nRemy, could you provide an example of where double checked locking works or is\n\"well justified\" without additional synchronization (such as the volatile, or\ninitializing the \"locked object\" in a static block)?  "}, {"count": 11, "tags": [], "bug_id": 42363, "is_private": false, "text": "Remy is right, it's extremely difficult to \"break\" double locking, and basically\nwhat he is saying is that it's becoming nitpicking, and opening up one bugzilla\nitem for each place I have that in, would be many BZ items, for something that\nis very unlikely to happen. there are still bigger fish to fry\n\nbut I appreciate the attention, there is a lot to be learned when it comes to\nconcurrency.", "id": 103007, "time": "2007-05-09T09:25:06Z", "creator": "fhanik@apache.org", "creation_time": "2007-05-09T09:25:06Z", "attachment_id": null}]
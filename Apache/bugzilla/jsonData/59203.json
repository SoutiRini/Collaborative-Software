[{"count": 0, "attachment_id": null, "bug_id": 59203, "text": "Current behavior:\nWhen undeploying an web app, tomcat first tries to check whether a container thread is still handling request, if so, it will log a warning message. Furthermore, if clearReferencesStopThreads is configured to be true, tomcat will try to call Thread.stop to stop the thread in order to prevent memory leak.\n\nOur scenario:\nWe found that sometimes, a container thread is actually blocking an operation, e.g. network I/O, but for some reasons, the operation is not returned for quite a long time. I know that the best way should be application code to timeout for such an operation. But I think tomcat can do sth. rather that log a warning message.\n\nProposed behavior:\nIf configured, tomcat will call Thread.interrupt to force the blocking operation return and container thread to proceed. Since application code may continue to block on further operations, we can provide an option to let tomcat call Thread.interrupt for several times. If that sill does not work, the final defense is calling Thread.stop if configured.\n\nAny interest on this proposal? If so, I can provide a patch on this.", "id": 189611, "time": "2016-03-21T02:51:34Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2016-03-21T02:51:34Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 191187, "creation_time": "2016-05-23T15:33:29Z", "time": "2016-05-23T15:33:29Z", "bug_id": 59203, "text": "I like the idea in that interrupting a thread is a lot nicer than trying to stop it.", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59203, "is_private": false, "text": "Thanks for showing your interest.\nI will submit a patch later on.", "id": 191208, "time": "2016-05-24T01:16:10Z", "creator": "huxing.zhang@gmail.com", "creation_time": "2016-05-24T01:16:10Z", "attachment_id": null}]
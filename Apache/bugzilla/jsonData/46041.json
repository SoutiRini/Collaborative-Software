[{"count": 0, "tags": [], "bug_id": 46041, "attachment_id": 22759, "id": 121687, "time": "2008-10-20T03:36:19Z", "creator": "mszpak@wp.pl", "creation_time": "2008-10-20T03:36:19Z", "is_private": false, "text": "Created attachment 22759\nVM's stacktrace\n\nThere is a problem with Tomcat 5.5.26 using native DLL on Windows 2003. The service is terminated unexpectedly (regarding to the system logs). It happens very irregular (sometimes a few times in an hour, sometimes once per week). In the stack trace (attached) there is:\n\n# An unexpected error has been detected by HotSpot Virtual Machine:\n#\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x58d845a4, pid=3472, tid=588\n#\n# Java VM: Java HotSpot(TM) Server VM (1.5.0_16-b02 mixed mode)\n# Problematic frame:\n# C  [tcnative-1.dll+0x45a4]\n\nWhich points to the native library. I have seen quite old (from 2006) bug 38898, but there in a stacktrace jvm.dll is mentioned, so I'm not sure if it's a duplicate.\nI don't see any other problems in tomcat logs (there was an issue with OutOfMemoryError some time earlier, but currently Tomcat can use 1,25GB and it seems to be enough). It's a test system with 1GB RAM + 1,5GB swap on a VMWare Server."}, {"count": 1, "tags": [], "text": "Is there always an OOM before the crash?\n\nWhat version of TC native are you using?", "is_private": false, "id": 121694, "creator": "markt@apache.org", "time": "2008-10-20T07:02:15Z", "bug_id": 46041, "creation_time": "2008-10-20T07:02:15Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46041, "text": "The current thread running\n=>0x0072e600 JavaThread \"Finalizer\" daemon [_thread_in_native, id=588]\n\nif you are on a 32bit system you might be pushing your -Xmx value a bit too high.\nif you lower it, and get OOME, then I would focus on resolving your OOME, since the memory usage could be related to your crash. Since you crash while the \"Finalizer\" thread is running\n\n", "id": 121697, "time": "2008-10-20T07:54:04Z", "creator": "fhanik@apache.org", "creation_time": "2008-10-20T07:54:04Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 46041, "attachment_id": null, "id": 121708, "time": "2008-10-21T00:15:05Z", "creator": "mszpak@wp.pl", "creation_time": "2008-10-21T00:15:05Z", "is_private": false, "text": "This is a version 1.1.4.0 of tcnative-1.dll. It was downloaded automatically during the installation process of Tomcat 5.5.26 a few weeks ago.\n\nIt was strange, but when the available memory was increased (from 512MB) there were no errors in Tomcat log, just Java/Tomcat process had been terminated.\n\nBut there may be something wrong with a memory usage. In every stacktrace there is 99% usage of perm gen:\n compacting perm gen  total 45312K, used 45063K [0x53d70000, 0x569b0000, 0x57d70000)\n   the space 45312K,  99% used [0x53d70000, 0x56971f40, 0x56972000, 0x569b0000)\n\nProbably It isn't normal. I will try to set up JMX and monitor it.\n\nCurrently I switched a configuration to not use native DLL to check if the problem remains.\n\n\nBtw, I don't know if it could be a reason, but with your suggestion it read some Java documnetn and there are suggested to set maximum head size to 1GB for 32-bits machine. I will try to lower it.\n"}, {"count": 4, "tags": [], "bug_id": 46041, "attachment_id": null, "id": 121768, "time": "2008-10-22T02:13:54Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-10-22T02:13:54Z", "is_private": false, "text": "99% perm is not necessarily a problem. The default Max size of perm depends on the platform, Java version and sometimes on the available hardware ressources, but often it is 64m. Unless you configure it explicitely, it will start with a smaller perm space and then add something to it when needed and up until to the max.\n\nI guess in your case the max. will be 64m and the 99% (of 45312K) simply means you don't yet need the maximum."}]
[{"count": 0, "tags": [], "text": "Created attachment 23199\nscreendump.jpg\n\nOur Apache servers, each processing some 7 million requests a day, sometimes take way to long to send a response (1500000ns as compared to the normal 500ns). This happens with content stored on the local disk and under different load conditions all day round and can be observed in the server access logs as well as on the client side.\n\nUsing tcpdump we've tracked the problem down to the following:\n1) server receives request A (for tab1_active.gif) and sends response immediately\n2) server receives request B (for btn_pfeil.gif) on the same connection (using keep-alive), waits some 2 seconds after accepting the GET and then sends out response for B\n3) however in the logfiles, the time taken for request A ist given as over 2 seconds whereas request B is logged as processed in 200ns.\n\nThis looks like for some reason Apache suffers from some delay between receiving a request and sending out the response, but before(!) calculating the time taken for the previous request. The problem was tracked down on 2.2.3 but also occures on 2.2.10.\n\nSo there are two sub-problems:\nA) the time taken in the log files does not match the real time taken\nB) it shouldn't take that long to deliver a small file at all\n\nAttached you'll find a screenshot of the tcpdump, the corresponding log entries as well as the configuration of the system Apache is running on.\n\nAny help is greatly appreciated as this problem severely affects the performance of the whole website.", "attachment_id": 23199, "id": 124518, "creator": "m-b@nurfuerspam.de", "time": "2009-01-30T05:55:55Z", "bug_id": 46634, "creation_time": "2009-01-30T05:55:55Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 23200\napache_access.log", "attachment_id": 23200, "id": 124519, "creator": "m-b@nurfuerspam.de", "time": "2009-01-30T05:56:23Z", "bug_id": 46634, "creation_time": "2009-01-30T05:56:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46634, "text": "Created attachment 23201\nsysteminfo.txt", "id": 124520, "time": "2009-01-30T05:56:46Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-01-30T05:56:46Z", "is_private": false, "attachment_id": 23201}, {"count": 3, "tags": [], "text": "Can you please provide a stacktrace of the httpd process that is stuck for 2 seconds?", "attachment_id": null, "id": 124528, "creator": "rpluem@apache.org", "time": "2009-01-30T07:08:19Z", "bug_id": 46634, "creation_time": "2009-01-30T07:08:19Z", "is_private": false}, {"count": 4, "tags": [], "creator": "m-b@nurfuerspam.de", "is_private": false, "id": 124532, "creation_time": "2009-01-30T09:01:31Z", "time": "2009-01-30T09:01:31Z", "bug_id": 46634, "text": "Ok, we'll see what is possible. Probably need to recompile the server and roll it out. However that'll take some days. Or is there any other easy way to capture the dump in exactly that moment?", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 46634, "attachment_id": 23222, "is_private": false, "id": 124633, "time": "2009-02-03T09:47:00Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-02-03T09:47:00Z", "text": "Created attachment 23222\nstacktraces.txt"}, {"count": 6, "tags": [], "text": "In the attachment stacktraces.txt you'll find two stacktraces of requests that were logged as being unusually slow. \n\nTo be able to use conditional breakpoints, we had to make some changes to mod_log_config.so though:\n1) Patched mod_log_config.c:log_request_duration_microseconds to store value in local variable (as shown in attachment)\n2) Changed some compiler options: removed \"-O2\", added \"-g -g3 -ggdb\"\n", "attachment_id": null, "id": 124634, "creator": "m-b@nurfuerspam.de", "time": "2009-02-03T09:47:26Z", "bug_id": 46634, "creation_time": "2009-02-03T09:47:26Z", "is_private": false}, {"count": 7, "tags": [], "text": "I've forgot to mention: For the debugging session, we've used the 2.2.10 version of the server.", "is_private": false, "id": 124635, "creator": "m-b@nurfuerspam.de", "time": "2009-02-03T09:57:56Z", "bug_id": 46634, "creation_time": "2009-02-03T09:57:56Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 46634, "is_private": false, "id": 124647, "time": "2009-02-03T23:59:50Z", "creator": "rpluem@apache.org", "creation_time": "2009-02-03T23:59:50Z", "tags": [], "text": "Sorry but the stacktrace doesn't really help as you set a breakpoint in the logging section. What we need is that once httpd gets stuck you start your debugging session (which stops httpd) and we see where it is stuck."}, {"count": 9, "tags": [], "bug_id": 46634, "attachment_id": null, "id": 124651, "time": "2009-02-04T02:14:12Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-02-04T02:14:12Z", "is_private": false, "text": "Hmmm... That doesn't sound very feasible to me, 'cause it would require us stopping httpd in exactly that moment when any of the hundred parallel requests hangs for a second or two. However, neither do we know beforehand, when that will happen nor do we know which request is affected until it is logged. Even if we tracked it down with wireshark in parallel, it would not be possible to analyze the data that fast and stop httpd.\n\nOf course, if there is any way to achieve this, we'll try. Any help to accomplish this task is appreciated.\n\nAnother option would be some investigation in the sources. The problem seems to occur somewhere after the last byte of the previous response is sent, the next pipelined request is accepted on the connection, but before the log is written for the first response."}, {"count": 10, "tags": [], "bug_id": 46634, "text": "There are some news: With some debugging and call tracing we've found the place where it hangs. It is mmap_bucket_read in srclib/apr-util/buckets/apr_buckets_mmap.c called from server/ap_core_output_filter in core_filters.c.\n\nThe strange thing is: This function as well as apr_mmap_offset in srclib/apr/mmap/unix/common.c only does some pointer shuffeling but sometimes takes over a second to complete.", "id": 125017, "time": "2009-02-20T05:51:57Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-02-20T05:51:57Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "Interesting; I don't see any touching of the memory page with the mmap-ed file either.\n\nIt can block for disk I/O at the point where the memory address returned by the bucket-read is dereferenced a bit later; I don't grok a block at an earlier point, unless this heap storage representing the mmap is getting paged out.\n\nHelp ;)", "id": 125019, "time": "2009-02-20T07:16:32Z", "bug_id": 46634, "creation_time": "2009-02-20T07:16:32Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 46634, "is_private": false, "id": 125023, "time": "2009-02-20T09:17:20Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-02-20T09:17:20Z", "tags": [], "text": "It's getting really weird now. The situation is as follows:\n\n1. The line \"rv = apr_bucket_read(e, &str, &n, eblock);\" in ap_core_output_filter (core_filters.c) takes more than a second (1000000\u00b5s) to complete\n2. When that happens, the return value of apr_bucket_read is 0 (APR_SUCCESS).\n3. After apr_bucket_read returns, the value of e->type->name is always \"MMAP\".\n4. After apr_bucket_read returns, the value of e->type->read is always the address of mmap_bucket_read (apr_buckets_mmap.c).\n5. mmap_bucket_read records time on entry and just before \"return APR_SUCCESS\" with apr_time_now().\n6. A difference of more than 300000\u00b5s is _never_ recorded in that function.\n\nSo it looks like, calling apr_bucket_read takes over a second, but the called function never takes more than a third of a second between first and last statement.\n\nIs it possible, that a completely different function is called, i.e. the value of e->type->read changes due to the call? Could it really take so long to evaluate e->type->read in the macro apr_bucket_read and do some basic logic of a function call?"}, {"count": 13, "tags": [], "text": "Ok, call to \"read\" DOES seem to replace bucket received as a parameter. With that in mind, we were able to trace it down to the system call \"mmap\" called by a file bucket. However, the problem still persists with \"EnableMMAP Off\", so it's somewhere in basic file I/O. We'll keep on looking what could be the reason for that. To some degree, it seems to depend on the compiler version used to build Apache and the kernel.", "is_private": false, "id": 125132, "creator": "m-b@nurfuerspam.de", "time": "2009-02-24T10:05:49Z", "bug_id": 46634, "creation_time": "2009-02-24T10:05:49Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 46634, "text": "Finally, we found the reason for the delay. After switching off logging file access time in ext3, the values went back to normal. Access time with ext2 seems fine however. So I've lowered the priority of the bug. What remains, is that the long request is logged for the request _before_ such a delay in a connection with keep alive, not for the one that is actually slow.", "id": 125145, "time": "2009-02-25T06:50:22Z", "creator": "m-b@nurfuerspam.de", "creation_time": "2009-02-25T06:50:22Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "text": "Hi\n\nI am also seeing apache loggin wrong time to serve reqeust in the log.\n\nMy TCPdump shows that the reqeust took 51 seconds, but my apache log reports \"14282\" microseconds.\n\nIn other cases where it takes along time, its spot on, but in some cases its wrong.\nI am not sure how to procede with this finding.", "is_private": false, "id": 171770, "creator": "morten@kallesoee.dk", "time": "2013-12-16T14:01:21Z", "bug_id": 46634, "creation_time": "2013-12-16T14:01:21Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "tschoening@am-soft.de", "text": "Im building apr-util with Embarcadero C++-Builder 10 Seattle and run into compile time problems in apr_dbd_odbc.c, which uses the following line:\n\n> #define   ODBC_INTPTR_T  intptr_t\n\nintptr_t is part of stdint.h, which is available, but doesn't seem to be included, therefore intptr_t is not defined. In APR itself apr.h contains APR_HAVE_STDINT_H, which was 0 by default in apr.hw, but even if I change it to 1 that doesn't change anything, because apr.hw doesn't include stdint.h on it's own, instead of apr.h.in, which does. If I add such an include on my own, the error about missing intptr_t is gone and I think it makes sense to add it in apr.hw, because it already checks and includes other things.", "id": 185591, "time": "2015-10-03T06:38:05Z", "bug_id": 58476, "creation_time": "2015-10-03T06:38:05Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "tschoening@am-soft.de", "text": "Created attachment 33157\napr.hw.patch\n\nIndex: apr.hw\n===================================================================\n--- apr.hw\t(Revision 4145)\n+++ apr.hw\t(Arbeitskopie)\n@@ -25,7 +25,7 @@\n  * And please, make an effort to stub apr.hnw and apr.h.in in the process.\n  *\n  * This is the Win32 specific version of apr.h.  It is copied from\n- * apr.hw by the apr.dsp and libapr.dsp projects. \n+ * apr.hw by the apr.dsp and libapr.dsp projects.\n  */\n \n /**\n@@ -32,7 +32,7 @@\n  * @file apr.h\n  * @brief APR Platform Definitions\n  * @remark This is a generated header generated from include/apr.h.in by\n- * ./configure, or copied from include/apr.hw or include/apr.hnw \n+ * ./configure, or copied from include/apr.hw or include/apr.hnw\n  * for Win32 or Netware by those build environments, respectively.\n  */\n \n@@ -96,7 +96,7 @@\n #define NOIME\n #endif\n #include <windows.h>\n-/* \n+/*\n  * Add a _very_few_ declarations missing from the restricted set of headers\n  * (If this list becomes extensive, re-enable the required headers above!)\n  * winsock headers were excluded by WIN32_LEAN_AND_MEAN, so include them now\n@@ -148,7 +148,7 @@\n #define APR_HAVE_SEMAPHORE_H    0\n #define APR_HAVE_SIGNAL_H       1\n #define APR_HAVE_STDARG_H       1\n-#define APR_HAVE_STDINT_H       0\n+#define APR_HAVE_STDINT_H       1\n #define APR_HAVE_STDIO_H        1\n #define APR_HAVE_STDLIB_H       1\n #define APR_HAVE_STRING_H       1\n@@ -212,8 +212,8 @@\n /** @} */\n /** @} */\n \n-/* We don't include our conditional headers within the doxyblocks \n- * or the extern \"C\" namespace \n+/* We don't include our conditional headers within the doxyblocks\n+ * or the extern \"C\" namespace\n  */\n \n #if APR_HAVE_STDLIB_H\n@@ -228,6 +228,9 @@\n #if APR_HAVE_STDDEF_H\n #include <stddef.h>\n #endif\n+#if APR_HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n #if APR_HAVE_TIME_H\n #include <time.h>\n #endif\n@@ -241,7 +244,7 @@\n \n /**\n  * @addtogroup apr_platform\n- * @ingroup APR \n+ * @ingroup APR\n  * @{\n  */\n \n@@ -261,12 +264,12 @@\n #define APR_USE_SHMEM_MMAP_ANON    0\n #define APR_USE_SHMEM_BEOS         0\n \n-#define APR_USE_FLOCK_SERIALIZE           0 \n+#define APR_USE_FLOCK_SERIALIZE           0\n #define APR_USE_POSIXSEM_SERIALIZE        0\n #define APR_USE_SYSVSEM_SERIALIZE         0\n #define APR_USE_FCNTL_SERIALIZE           0\n-#define APR_USE_PROC_PTHREAD_SERIALIZE    0 \n-#define APR_USE_PTHREAD_SERIALIZE         0 \n+#define APR_USE_PROC_PTHREAD_SERIALIZE    0\n+#define APR_USE_PTHREAD_SERIALIZE         0\n \n #define APR_HAS_FLOCK_SERIALIZE           0\n #define APR_HAS_SYSVSEM_SERIALIZE         0\n@@ -478,8 +481,8 @@\n #define APR_END_DECLS\n #endif\n \n-/** \n- * Thread callbacks from APR functions must be declared with APR_THREAD_FUNC, \n+/**\n+ * Thread callbacks from APR functions must be declared with APR_THREAD_FUNC,\n  * so that they follow the platform's calling convention.\n  * <PRE>\n  *\n@@ -494,7 +497,7 @@\n \n /**\n  * The public APR functions are declared with APR_DECLARE(), so they may\n- * use the most appropriate calling convention.  Public APR functions with \n+ * use the most appropriate calling convention.  Public APR functions with\n  * variable arguments must use APR_DECLARE_NONSTD().\n  *\n  * @remark Both the declaration and implementations must use the same macro.\n@@ -503,20 +506,20 @@\n  * APR_DECLARE(rettype) apr_func(args)\n  * </PRE>\n  * @see APR_DECLARE_NONSTD @see APR_DECLARE_DATA\n- * @remark Note that when APR compiles the library itself, it passes the \n- * symbol -DAPR_DECLARE_EXPORT to the compiler on some platforms (e.g. Win32) \n+ * @remark Note that when APR compiles the library itself, it passes the\n+ * symbol -DAPR_DECLARE_EXPORT to the compiler on some platforms (e.g. Win32)\n  * to export public symbols from the dynamic library build.\\n\n  * The user must define the APR_DECLARE_STATIC when compiling to target\n- * the static APR library on some platforms (e.g. Win32.)  The public symbols \n+ * the static APR library on some platforms (e.g. Win32.)  The public symbols\n  * are neither exported nor imported when APR_DECLARE_STATIC is defined.\\n\n  * By default, compiling an application and including the APR public\n  * headers, without defining APR_DECLARE_STATIC, will prepare the code to be\n  * linked to the dynamic library.\n  */\n-#define APR_DECLARE(type)            type \n+#define APR_DECLARE(type)            type\n \n /**\n- * The public APR functions using variable arguments are declared with \n+ * The public APR functions using variable arguments are declared with\n  * APR_DECLARE_NONSTD(), as they must follow the C language calling convention.\n  * @see APR_DECLARE @see APR_DECLARE_DATA\n  * @remark Both the declaration and implementations must use the same macro.\n@@ -534,7 +537,7 @@\n  * @see APR_DECLARE @see APR_DECLARE_NONSTD\n  * @remark Note that the declaration and implementations use different forms,\n  * but both must include the macro.\n- * \n+ *\n  * <PRE>\n  *\n  * extern APR_DECLARE_DATA type apr_variable;\\n", "id": 185592, "time": "2015-10-03T06:38:50Z", "bug_id": 58476, "creation_time": "2015-10-03T06:38:50Z", "is_private": false, "attachment_id": 33157}, {"count": 2, "tags": [], "creator": "trawick@apache.org", "text": "Older MSVC doesn't have <stdint.h>, hence the historic setting of APR_HAVE_STDINT_H to 0 and not conditionally including it.\n\nOne potential long term solution is to update the cmake build of apr to check for stdint.h and define the symbol to 1 and include it in apr.hwc (\"c\" for \"cmake\") when present (matching apr.h on Unix).\n\nHave you tried any cmake projects with Embarcadero C++-Builder 10?  I'm not sure if cmake supports that.  Even if so, the apr cmake build would likely need tweaks here and there to remove MSVC-isms, but that's probably not too hard.\n\nOther devs may know an appropriate way to update the MSVC makefiles/project files to handle this issue.", "id": 185703, "time": "2015-10-08T20:54:51Z", "bug_id": 58476, "creation_time": "2015-10-08T20:54:51Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58476, "text": "(In reply to Jeff Trawick from comment #2)\n> Older MSVC doesn't have <stdint.h>, hence the historic setting of\n> APR_HAVE_STDINT_H to 0 and not conditionally including it.\n\nThe problem with forcefully setting it to 0 is that one can't override it on the project level, only by changing the header... So could you please at least consider adding the conditional include of stdint.h? This shouldn't harm for older compilers because HAVE_STDINT_H will just be 0 as it was before and users with newer compilers would not need to change two parts of the file, but just HAVE_STDINT_H to 1.\n\n> Have you tried any cmake projects with Embarcadero C++-Builder 10?  I'm not\n> sure if cmake supports that.\n\nIt doesn't, cmake only generates old makefiles, for which the support in C++-Builder has been dropped years ago. It now uses MSBuild based XML files enhanced with some custom values and such, cmake is of no help with them.\n\nhttps://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#makefile-generators\nhttp://stackoverflow.com/a/22998868/2055163 point 4", "id": 185704, "time": "2015-10-09T06:55:49Z", "creator": "tschoening@am-soft.de", "creation_time": "2015-10-09T06:55:49Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "trawick@apache.org", "is_private": false, "text": ">So could you please at least consider adding the conditional include of stdint.h?\n\nI'll do that.\n\nPerhaps there's an existing pattern in that build implementation that uses settings to enable certain features, and this would be a natural addition.  I don't know.  Hopefully one of the maintainers of that build support will respond.\n\n>point 4\n\nOuch/sorry.", "id": 185710, "time": "2015-10-09T11:58:51Z", "bug_id": 58476, "creation_time": "2015-10-09T11:58:51Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58476, "is_private": false, "text": "The sync with Unix apr.h on the include of stdint.h is now in the 1.6.x branch (r1707712) and 1.5.x branch (r1707717).", "id": 185711, "time": "2015-10-09T13:07:12Z", "creator": "trawick@apache.org", "creation_time": "2015-10-09T13:07:12Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "alexc@sbrella.com", "attachment_id": null, "text": "Our tool has reported an invalid use of stack address, in function `ap_http_chunk_filter` of modules/http/chunk_filters.c, https://github.com/apache/httpd/blob/trunk/modules/http/chunk_filter.c#L137\n\n            e = apr_bucket_transient_create(chunk_hdr, hdr_len,\n                                            c->bucket_alloc);\n            APR_BRIGADE_INSERT_HEAD(b, e);\n\n\nIn the above code piece, chunk_hdr is a local variable, e->data will point to chunk_hdr after `apr_bucket_transient_create`, and APR_BRIGADE_INSERT_HEAD binds e with outside variable b (comes from function argument).\n\n=> binds buf (it is stack memory in this case) with a new created bucket.\nAPR_DECLARE(apr_bucket *) apr_bucket_transient_make(apr_bucket *b,\n                                                    const char *buf,\n                                                    apr_size_t length)\n{\n    b->data   = (char *)buf;\n    b->length = length;\n    b->start  = 0;\n    b->type   = &apr_bucket_type_transient;\n    return b;\n}\n\nAnybody might have a look? thanks.\nSourceBrella Inc.\nAlex", "id": 199445, "time": "2017-06-27T09:19:51Z", "bug_id": 61228, "creation_time": "2017-06-27T09:19:51Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "As their name suggests, \"transient\" buckets can point to stack memory, where the creator of such buckets is responsible for the scope.\n\nIn this case, the transient bucket 'e' will be either setaside (moved to heap memory) by subsequent filters in ap_pass_brigade(), or cleaned up with its brigade 'b' before the end of the function.\n\nSo it won't \"leak\" (hence be accessed) outside the function, AFAICT.", "count": 1, "id": 199446, "time": "2017-06-27T11:16:39Z", "bug_id": 61228, "creation_time": "2017-06-27T11:16:39Z", "is_private": false}, {"text": "(In reply to Yann Ylavic from comment #1)\n> As their name suggests, \"transient\" buckets can point to stack memory, where\n> the creator of such buckets is responsible for the scope.\n> \n> In this case, the transient bucket 'e' will be either setaside (moved to\n> heap memory) by subsequent filters in ap_pass_brigade(), or cleaned up with\n> its brigade 'b' before the end of the function.\n> \n> So it won't \"leak\" (hence be accessed) outside the function, AFAICT.\n\nI see, `apr_brigade_cleanup` unlinks all 'e' from their brigade, b cannot reference its 'e' (e->data, stack memory) anymore (since the destroy callback of  `apr_bucket_type_transient` is a empty function, but the unlinking from b will do the job). Really thanks for your concerns and clarification @Ylavic", "tags": [], "creator": "alexc@sbrella.com", "attachment_id": null, "count": 2, "id": 199447, "time": "2017-06-27T12:02:33Z", "bug_id": 61228, "creation_time": "2017-06-27T12:02:33Z", "is_private": false}, {"text": "(In reply to Yann Ylavic from comment #1)\n> As their name suggests, \"transient\" buckets can point to stack memory, where\n> the creator of such buckets is responsible for the scope.\n> \n> In this case, the transient bucket 'e' will be either setaside (moved to\n> heap memory) by subsequent filters in ap_pass_brigade(), or cleaned up with\n> its brigade 'b' before the end of the function.\n> \n> So it won't \"leak\" (hence be accessed) outside the function, AFAICT.\n\nInside `apr_brigade_cleanup`, there is a FIX for https://bz.apache.org/bugzilla/show_bug.cgi?id=51062, https://svn.apache.org/viewvc/apr/apr/trunk/buckets/apr_brigade.c?annotate=1102687&pathrev=1102687,\n\nCould there is a chance that: when hitting the above brigade corruption, the fix breaks infinite loop but leave the brigade unclean (leak stack memory?) ? \n\nCould anybody have a check on this?", "tags": [], "creator": "alexc@sbrella.com", "attachment_id": null, "count": 3, "id": 199459, "time": "2017-06-28T07:17:21Z", "bug_id": 61228, "creation_time": "2017-06-28T07:17:21Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61228, "attachment_id": 35401, "id": 201331, "time": "2017-10-07T17:49:21Z", "creator": "putra.brenkz@gmail.com", "creation_time": "2017-10-07T17:49:21Z", "is_private": false, "text": "Created attachment 35401\nAsw"}, {"count": 5, "tags": [], "bug_id": 61228, "text": "Created attachment 35403\nap an", "id": 201333, "time": "2017-10-07T17:56:18Z", "creator": "oyan288@gmail.com", "creation_time": "2017-10-07T17:56:18Z", "is_private": false, "attachment_id": 35403}]
[{"count": 0, "attachment_id": 35266, "bug_id": 61468, "text": "Created attachment 35266\nsimple monthly budget\n\nWith the attached spreadsheet POI 3.17-beta1 incorrectly evaluates the formula in the cell  E5 to \"3500.0\". It should be \"3750.0\" (that's what Excel shows). \n\nThe version 3.15 works correctly. The issue appears in 3.16 and 3.17-beta1.", "id": 200506, "time": "2017-08-29T12:35:58Z", "creator": "viktor@vaadin.com", "creation_time": "2017-08-29T12:35:58Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 61468, "is_private": false, "count": 1, "id": 200507, "time": "2017-08-29T12:44:47Z", "creator": "viktor@vaadin.com", "creation_time": "2017-08-29T12:44:47Z", "text": "UPD: the cell is E9 (not E5 as stated above). The formula which is incorrectly evaluated is `=TotalMonthlyIncome`.\n\nThe following code snippet produces different results in 3.15 and 3.17:\nInputStream input = Main.class.getClassLoader().getResourceAsStream(\"simple-monthly-budget.xlsx\");\nWorkbook workbook = WorkbookFactory.create(input);\nCell cell = workbook.getSheetAt(0).getRow(8).getCell(4);\nSystem.out.println(\"E9 numeric value (before evaluating formula): \" + cell.getNumericCellValue());\nFormulaEvaluator formulaEvaluator = workbook.getCreationHelper().createFormulaEvaluator();\nformulaEvaluator.evaluateInCell(cell);\nSystem.out.println(\"E9 numeric value (after evaluating formula): \" + cell.getNumericCellValue());\n\nIn 3.15:\nE9 numeric value (before evaluating formula): 3750.0\nE9 numeric value (after evaluating formula): 3750.0\n\nIn 3.17:\nE9 numeric value (before evaluating formula): 3750.0\nE9 numeric value (after evaluating formula): 3500.0"}, {"count": 2, "tags": [], "text": "Thank you for this report and test case.  I suspect I broke this while adding some functionality I needed for my Vaadin Spreadsheet app, so I'll look into it.", "is_private": false, "id": 200511, "creator": "gwoolsey@apache.org", "time": "2017-08-29T15:57:15Z", "bug_id": 61468, "creation_time": "2017-08-29T15:57:15Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 61468, "is_private": false, "id": 200512, "time": "2017-08-29T17:16:16Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-08-29T17:16:16Z", "tags": [], "text": "Fixed in r1806623.\n\nThe table syntax evaluation is incorrectly assuming a table footer row now, when there isn't one, and the last row's value is left out of the SUM() calculation.\n\nIt turns out this is because \n\norg.apache.poi.ss.formula.FormulaParser.ParseStructuredReference(String)\n\nmakes the incorrect API assumption noted in the JavaDocs recently added for XSSFTable.isHasTotalsRow():\n\nNote: This is misleading. The Spec indicates this is true if the totals row has _ever_ been shown, not whether or not it is currently displayed. Use getTotalsRowCount() > 0 to decide whether or not the totals row is visible.\n\nI have no idea why MS thought this was helpful or desirable behavior, but this is experimentally exactly how Excel uses this field, per the OOXML spec.\n\nAll POI callers of isHasTotalsRow() have been updated to use getTotalsRowCount() instead.  this failing file has been added as a unit test, and now passes."}]
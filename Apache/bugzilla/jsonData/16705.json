[{"count": 0, "attachment_id": null, "creator": "thomas.siedschlag@gmx.net", "is_private": false, "id": 30558, "time": "2003-02-03T14:33:41Z", "bug_id": 16705, "creation_time": "2003-02-03T14:33:41Z", "tags": [], "text": "Sometimes we have problems that one user can see the stored session data of\nanother one.\nWe find out that the recycling of invalidated sessions is unsafe, if there are\npending requests. The pending request can write some data in a recycled session,\nif the associated session of this request were invalidated during the request!\n\nConsider the following example.\n\n-- first.jsp\n<%\n  // invalidate a valid session if there is one\n  if(request.getSession(false) != null) {\n    request.getSession().invalidate();\n  }\n\n  // get a new session\n  request.getSession(true);\n\n  // print out the new session id\n  out.write(request.getSession().getId()+\"<br>\");\n\n  out.write(\"<a href=\\\"second.jsp\\\">Go</a>\");\n%>\n\n\n\n-- second.jsp\n<%\n  // do the work only if there is a session\n  if(session != null && !session.isNew()) {\n\n    // save the old session id\n    String firstId = session.getId();\n\n    // print out the old session id\n    out.write(firstId+\"<br>\");\n    out.write(\"<br>\");\n\n    // this wait of 10 seconds is only to achieve reproducibility\n    System.out.println(\"start!\");\n    try {\n      synchronized(this) {\n        wait(10000);\n      }\n    }\n    catch(Exception e) {\n    }\n    System.out.println(\"end!\");\n\n    // save id in session if there is no one\n    if(session.getAttribute(\"Id\") == null) {\n      session.setAttribute(\"Id\",firstId);\n    }\n\n    // get the saved id\n    String savedId = (String) session.getAttribute(\"Id\");\n\n    // print out the 'actual' session id and the saved session id\n    out.write(session.getId()+\"<br>\");\n    out.write(savedId+\"<br>\");\n  }\n  else {\n    out.write(\"Please call <a href=\\\"first.jsp\\\">this</a> first!\");\n  }\n%>\n\nTo reproduce the bug do the following:\n\n1. Call first.jsp - You will get a new session.\n\n2. Call second.jsp.\n\n3. Wait if \"start!\" is logged on the Tomcat console.\n\n4. Break up the request to second.jsp in your browser.\n\n5. Call first.jsp again - The old session will invalidate and you will get a new\n  session again.\n\n6. Call second.jsp again.\n\n7. In the response the last two printed ids differs!"}, {"count": 1, "tags": [], "bug_id": 16705, "text": "Session recycling was a possibly problematic feature (potential security issues\n/ little or no performance benefit, as the most expensive operation is session\nid generation), and has been removed in Tomcat 4.1.24. I think this should fix\nany issue related to that.", "id": 35541, "time": "2003-04-18T14:12:56Z", "creator": "remm@apache.org", "creation_time": "2003-04-18T14:12:56Z", "is_private": false, "attachment_id": null}]
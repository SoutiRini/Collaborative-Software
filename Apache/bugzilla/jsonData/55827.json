[{"count": 0, "tags": [], "creator": "bob@contemplateltd.com", "attachment_id": null, "text": "We ran our static analysis tool ThreadSafe [1] on version 2.10 of JMeter, which appeared to uncover a couple of concurrency issues. One of the most interesting was the possibility of an unsynchronised iteration over a synchronised collection in the class 'AbstractTestElement'.\n\nThe relevant line is 499:\n   Iterator<Map.Entry<String, JMeterProperty>>  iter = propMap.entrySet().iterator();\n\nwhere the propMap field always contains a synchronised collection created at line 57 in the same file.\n\nThe JDK documentation for Collections.synchronizedMap states that:\n\n>  It is imperative that the user manually synchronize on the\n> returned map when iterating over any of its collection views:\n>\n>  Map m = Collections.synchronizedMap(new HashMap());\n>      ...\n>  Set s = m.keySet();  // Needn't be in synchronized block\n>      ...\n>  synchronized (m) {  // Synchronizing on m, not s!\n>      Iterator i = s.iterator(); // Must be in synchronized block\n>      while (i.hasNext())\n>          foo(i.next());\n>  }\n>\n> Failure to follow this advice may result in non-deterministic behavior. \n\nIt appears that the code on line 499 does not correctly synchronize on propMap, leading to the possibility of the non-deterministic behaviour the JDK documentation warns about.\n\nWe're not sure that this can actually result in a user-visible bug, but we thought you'd like to know.\n\nWe are also planning to use this finding as an example of Android-related concurrency mistakes in an article about ThreadSafe. Obviously, if you, as the developers of JMeter, have any objections to our using this as an example, then we won't.\n\n[1] ThreadSafe is a static analysis tool for Java concurrency, developed by Contemplate Ltd.:\n     http://www.contemplateltd.com/", "id": 171490, "time": "2013-11-28T16:44:13Z", "bug_id": 55827, "creation_time": "2013-11-28T16:44:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 55827, "attachment_id": null, "is_private": false, "id": 171492, "time": "2013-11-28T16:46:22Z", "creator": "bob@contemplateltd.com", "creation_time": "2013-11-28T16:46:22Z", "text": "I wrote:\n\n> We are also planning to use this finding as an example of Android-related \n> concurrency mistakes in an article about ThreadSafe.\n\nObviously, \"Android-related\" was a mistake here. I meant to write \"Java-related\". Sorry about that."}, {"count": 2, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Thanks for report, I was wondering why your tool does not also report line 456:\nreturn new PropertyIteratorImpl(propMap.values());\n\n\nDid you report all findings of your tool or only some examples ?", "id": 171619, "time": "2013-12-06T21:27:01Z", "bug_id": 55827, "creation_time": "2013-12-06T21:27:01Z", "is_private": false}, {"count": 3, "tags": [], "text": "> Thanks for report, I was wondering why your tool does not also report line 456:\n> return new PropertyIteratorImpl(propMap.values());\n\nActually, our tool doesn't report the instance on line 456 because it doesn't look into the implementation of PropertyIteratorImpl while analysing the AbstractTestElement class. Therefore, it doesn't realise that everything that is passed in will have .iterator() called on it. This is certainly something that we will look at adding to ThreadSafe in the future. Thanks!\n\n> Did you report all findings of your tool or only some examples ?\n\nI only reported two examples of findings that I thought looked interesting. If I get more time soon I will report the rest of the interesting looking reports that ThreadSafe gives.", "attachment_id": null, "id": 171693, "creator": "bob@contemplateltd.com", "time": "2013-12-11T20:12:18Z", "bug_id": 55827, "creation_time": "2013-12-11T20:12:18Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 55827, "attachment_id": null, "is_private": false, "id": 196540, "time": "2017-01-29T10:14:01Z", "creator": "graham@ham1.co.uk", "creation_time": "2017-01-29T10:14:01Z", "text": "Created PR for the example identified in this issue: https://github.com/apache/jmeter/pull/260\n\nAre there any more that the tool found (in the latest code) which should be addressed?"}, {"count": 5, "tags": [], "bug_id": 55827, "attachment_id": null, "id": 196829, "time": "2017-02-07T22:04:45Z", "creator": "sitnikov.vladimir@gmail.com", "creation_time": "2017-02-07T22:04:45Z", "is_private": false, "text": "As far as I can see, the syncrhonizedMap was added in attempt to fix https://bz.apache.org/bugzilla/show_bug.cgi?id=16304\nThe latest reply suggests that the synchronization did not help.\n\nSo I do not see much reason to complicate code.\nI don't think it would hurt, yet I see no reason how it would help."}, {"count": 6, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "id": 196830, "creation_time": "2017-02-07T22:29:19Z", "time": "2017-02-07T22:29:19Z", "bug_id": 55827, "text": "(In reply to Vladimir Sitnikov from comment #5)\n> As far as I can see, the syncrhonizedMap was added in attempt to fix\n> https://bz.apache.org/bugzilla/show_bug.cgi?id=16304\n> The latest reply suggests that the synchronization did not help.\n> \n> So I do not see much reason to complicate code.\n> I don't think it would hurt, yet I see no reason how it would help.\n\nThanks Felix for digging, interesting indeed.\n\nA question for you, I have a doubt. In my understanding, calling synchronized in monothreaded call has a cost:\nhttp://stackoverflow.com/questions/973518/are-synchronized-methods-slower-in-single-threaded-applications\n\nDo you confirm this from benchmarks you did ?", "is_private": false}, {"count": 7, "tags": [], "bug_id": 55827, "attachment_id": null, "is_private": false, "id": 197261, "time": "2017-02-24T22:23:41Z", "creator": "graham@ham1.co.uk", "creation_time": "2017-02-24T22:23:41Z", "text": "(In reply to Vladimir Sitnikov from comment #5)\n> As far as I can see, the syncrhonizedMap was added in attempt to fix\n> https://bz.apache.org/bugzilla/show_bug.cgi?id=16304\n> The latest reply suggests that the synchronization did not help.\n> \n> So I do not see much reason to complicate code.\n> I don't think it would hurt, yet I see no reason how it would help.\n\nIt does say the problem still exists in the comment yet the issue was set to resolved.\n\nMaybe we should remove the synchronizedMap as we are accessing it in an unsafe way anyway - or just comment the code and close this bz."}]
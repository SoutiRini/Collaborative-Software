[{"count": 0, "tags": [], "bug_id": 59843, "attachment_id": null, "is_private": false, "id": 192312, "time": "2016-07-12T04:18:33Z", "creator": "jzhao@talend.com", "creation_time": "2016-07-12T04:18:33Z", "text": "When I create a new excel abc.xlsx\nCreate a new sheet \"test\"\nAdd a cell value in \"C20\"\nThen I try to use XSSF and SAX (Event API) to read this xml.\nI can only get the 1 row value.\n<sheetData>\n  <row r=\"20\" spans=\"3:3\" x14ac:dyDescent=\"0.25\">\n    <c r=\"C20\" t=\"s\">\n      <v>0</v>\n    </c>\n  </row>\n</sheetData>\n\nCan't find a way to get the empty rows 1~19.\nI use this example to test my data.\nhttps://github.com/apache/poi/blob/trunk/src/examples/src/org/apache/poi/xssf/eventusermodel/examples/FromHowTo.java#L73~L74\nJust change it write xml to a local file"}, {"count": 1, "tags": [], "text": "Excel files are normally (mostly) sparse, so this is entirely as expected\n\nAll rows and cells come with details of what one they are, so with 2 counters you can easily spot gaps. See https://svn.apache.org/repos/asf/poi/trunk/src/examples/src/org/apache/poi/xssf/eventusermodel/XLSX2CSV.java for an easy-to-read example of doing this\n\nAlternately, switch to the full UserModel code, and there's handy helpers there to assist you in dealing with missing cells etc", "is_private": false, "id": 192322, "creator": "apache@gagravarr.org", "time": "2016-07-12T10:13:03Z", "bug_id": 59843, "creation_time": "2016-07-12T10:13:03Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jzhao@talend.com", "attachment_id": null, "text": "Thanks Nick, I would try with you suggestion.\nSeems I forgot to check in latest examples.", "id": 192481, "time": "2016-07-18T10:05:31Z", "bug_id": 59843, "creation_time": "2016-07-18T10:05:31Z", "is_private": false}]
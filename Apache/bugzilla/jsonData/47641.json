[{"count": 0, "tags": [], "creator": "jeremias@apache.org", "attachment_id": 24099, "id": 129447, "time": "2009-08-04T10:34:45Z", "bug_id": 47641, "creation_time": "2009-08-04T10:34:45Z", "is_private": false, "text": "Created attachment 24099\nFO File that demonstrates the int overflow problem\n\nA rather nasty bug: In XSL-FO, we usually have font sizes under 11'000 points.\nNo problem. Switch to SVG and define a viewBox with relatively high values and\nyou can quickly end up with a font size of 11'000 (units not points). It\nhappened to me when I ran an SVG that was produced by the SVG document handler\nin the FOP sandbox. That one just sets up FOP's internal millipoint coordinate\nsystem in SVG. No SVG editor/viewer has a problem with that.\n\nSo, the problem is, for example, the generated Helvetica class' getWidth(int i,\nint size) method which returns an int. Multiply a number in the 1000 range with\nthe font size that has been multiplied by 1000 (pt -> mpt conversion for normal\nFO).\n\n950 * (1000 * 11000) = 10450000000 (0x26EDE5880)\n\nThat result is bigger than a 32-bit int.\n\nFor comparison, the usual case in FO:\n950 * (1000 * 11) = 10450000 (0x9F7450)\n\nI've locally added long variants of the problematic methods (getWidth() ->\ngetWidthLong()) to see if this really solves the problem and it does indeed.\nJust replacing int with long everywhere is not a good idea because of\nbackwards-compatibility. We know that some people are using these classes\noutside of FOP. To me, the additional long variants look like the cleanest\nsolution, but maybe someone has a better solution."}, {"count": 1, "tags": [], "bug_id": 47641, "attachment_id": null, "text": "resetting P2 open bugs to P3 pending further review", "id": 157331, "time": "2012-04-07T01:41:33Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:41:33Z", "is_private": false}]
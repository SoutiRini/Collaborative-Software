[{"count": 0, "tags": [], "creator": "wburrows@e2open.com", "is_private": false, "text": "The problem I have seen is that after forking a revision that the first time \nthat you checkin a revision on the new branch that DB2 will fail the insert \ninto the VERSION_PREDS table because it finds two identical \"successor\" entries \nfor a single revision in the revision descriptors object and the exact same \nentry pair can't be inserted twice into the table as each entry must be unique. \nThe problem seems to be due to this SELECT statement in \nretrieveRevisionDescriptors in the StandardRDBMSAdapter:\n\n\tselect pvh.REVISION_NO from VERSION_HISTORY vh, VERSION_HISTORY pvh, \nVERSION_PREDS vp, URI u where pvh.VERSION_ID = vp.VERSION_ID and vp.VERSION_ID \n= vh.VERSION_ID and vh.URI_ID = u.URI_ID and u.URI_STRING = ? and \nvh.REVISION_NO = ?\n\nIn the case that leads to the problem above this SELECT returns two rows if the \nversion we're looking for has been forked. Eg. if the version is 1.1 and we \nhave forked to a 1.1.1 branch then the VERSION_PREDS table now has two entries \nin it for the \"1.1\" version. It seems logical that there can be more than one \nentry for each version id in the VERSION_PREDS table as the unique key for the \ntable is the version_id and predecessor_id pair indicating that the version_id \nisn't unique. So the problem seems to be that the above select statement should \ncater for the fact that two entries could be in the VERSION_PREDS table and \nthat the SELECT against it can return multiple identical entries. So what I \nhave done to fix this is change the SELECT to be:\n\n\tselect DISTINCT pvh.REVISION_NO from VERSION_HISTORY vh, (etc)\n\nWhich will eliminate duplicates and return the correct data. The DISTINCT \nkeyword is a standard SQL keyword so it should work for all DB implementations \nunder the standard adapter.\n\nTEST CASE:\n\n1. upload a new document and put it under version control.\n2. checkout/checkin two (2) new versions of the document to bring the version \nto 1.2\n3. use the UPDATE method to activate the 1.1 version of the document.\n4. checkout/checkin to the document again. It should create a new branch with \n1.1.1 as the revision number.\n5. checkout/checkin to the document again and it will fail with a (500) error \nand a \"non-unique insert\" SQL exception is generated.", "id": 66492, "time": "2004-11-05T00:02:38Z", "bug_id": 32072, "creation_time": "2004-11-05T00:02:38Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "wburrows@e2open.com", "attachment_id": null, "is_private": false, "id": 66994, "time": "2004-11-17T00:49:54Z", "bug_id": 32072, "creation_time": "2004-11-17T00:49:54Z", "text": "Accepting this bug. Will commit when I have committer access."}]
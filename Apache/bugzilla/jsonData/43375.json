[{"count": 0, "attachment_id": null, "bug_id": 43375, "text": "apr_pool_check_integrity will assert at the ownership test  for apr_thread_exit\n\napr_thread_exit destroys a pool allocated on another thread. This pool is\ncreated in apr_thread_create and is the pool in which the thread resources are\nallocated (the pool belongs to the parent thread).\n\nSo the thread trying to do destroy in apr_thread_exit does not have\nownership of the pool. apr_thread_exit must be called from the thread\n who wants to exit since it calls pthread_exit.\n\nA solution to fix this would be for apr_thread_exit() to not call\napr_pool_destroy() since it does not own the pool and leave this to the\nthread parent. This will comply with apr_pool_check_integrity requirements", "id": 108108, "time": "2007-09-13T01:32:55Z", "creator": "daniel.tacalau@avira.com", "creation_time": "2007-09-13T01:32:55Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Can you reproduce this in test/ where we do have various tests of creating\nand freeing threads?  Or is this strictly in your application?", "attachment_id": null, "id": 108117, "creation_time": "2007-09-13T03:36:29Z", "time": "2007-09-13T03:36:29Z", "creator": "wrowe@apache.org", "bug_id": 43375, "is_private": false}, {"count": 2, "tags": [], "bug_id": 43375, "attachment_id": null, "text": "First I found about this in my application. Then I noticed the same behavior\nwith your threadtest from apr/test/. More than that there is no doubt about this\nhappening just by looking at the source code for: apr_thread_create,\napr_thread_exit and apr_pool_check_integrity\n\n\nIn general this are reproducing steps:\n1. Compile apr with --enable-debug --enable-pool-debug=all\n2. Run any test or apr feature that involve threads \n\nIt will surely crash because of asserting from apr_pool_check_integrity.", "id": 108126, "time": "2007-09-13T05:03:10Z", "creator": "daniel.tacalau@avira.com", "creation_time": "2007-09-13T05:03:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43375, "attachment_id": null, "id": 108129, "time": "2007-09-13T05:14:32Z", "creator": "wrowe@apache.org", "creation_time": "2007-09-13T05:14:32Z", "is_private": false, "text": "Thanks, absolutely noting as something the project must address.  Great research!"}, {"count": 4, "tags": [], "bug_id": 43375, "attachment_id": null, "text": "As all implementations of apr_thread_create uses a dummy_worker it would be possible to re-assign the pool's owner to the new thread before passing control to the user function.\nI'm not sure if this would really be correct though.\nBoth this and the proposed solution makes our program run without asserts.\n\nNote also that the OS2 implementation doesn't seem to destroy the pool on apr_thread_exit.\n", "id": 118538, "time": "2008-07-11T00:11:54Z", "creator": "daniel.rejment@tacton.com", "creation_time": "2008-07-11T00:11:54Z", "is_private": false}, {"count": 5, "tags": [], "creator": "issues.apache.org@siliconium.net", "text": "Any progress with this?\nThe use of threads is currently unsafe because of this race condition.\n\n==32143== Possible data race during read of size 4 at 0x6896040 by thread #1\n==32143== Locks held: 2, at addresses 0x40250B8 0x4027228\n==32143==    at 0x544D0AE: allocator_alloc (in /usr/lib/libapr-1.so.0.4.5)\n==32143==    by 0x544DDA4: apr_pool_create_ex (in /usr/lib/libapr-1.so.0.4.5)\n==32143==    by 0x545E222: apr_thread_create (in /usr/lib/libapr-1.so.0.4.5)\n==32143== \n==32143== This conflicts with a previous write of size 4 by thread #2\n==32143== Locks held: 1, at address 0x40210A8\n==32143==    at 0x544D4FE: allocator_free (in /usr/lib/libapr-1.so.0.4.5)\n==32143==    by 0x544DD05: apr_pool_destroy (in /usr/lib/libapr-1.so.0.4.5)\n==32143==    by 0x545E2CD: apr_thread_exit (in /usr/lib/libapr-1.so.0.4.5)\n==32143==    by 0x406CEF: tester_thread (threadtest.c:63)\n==32143==    by 0x42D7E7: _thread_helper (core.c:77)\n==32143==    by 0x545E116: dummy_worker (in /usr/lib/libapr-1.so.0.4.5)", "id": 153735, "time": "2012-02-13T15:35:12Z", "bug_id": 43375, "creation_time": "2012-02-13T15:35:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "sf@sfritsch.de", "text": "This should now work in trunk. Commits:\n\nr1460182\nr1460183\nr1460184\nr1460185\nr1460186", "id": 166112, "time": "2013-03-23T16:23:23Z", "bug_id": 43375, "creation_time": "2013-03-23T16:23:23Z", "is_private": false, "attachment_id": null}]
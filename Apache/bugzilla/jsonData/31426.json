[{"count": 0, "tags": [], "bug_id": 31426, "attachment_id": null, "id": 64233, "time": "2004-09-26T16:48:02Z", "creator": "erik.pischel@t-systems.com", "creation_time": "2004-09-26T16:48:02Z", "is_private": false, "text": "we got this java.lang.OutOfMemoryError and we could not connect via HTTP to\ntomcat any more. Although the main problem is the OutOfMemory Exception,\ntomcat should handle this situation more gracefully.\n\nFull error message is:\n2004-09-23 23:59:59,135 ERROR [http8080-Processor265]\n[org.apache.tomcat.util.threads.ThreadPool] Caught exception (java\n.lang.OutOfMemoryError: unable to create new native thread) executing\norg.apache.tomcat.util.net.TcpWorkerThread@36b4a7,\n terminating thread\n\nIt looks like the bug is in PoolTcpEndpoint, line 553 (in version 5.0.28) / line\n547 (in version 5.0.19): in method \"runIt\", right after \"acceptSocket\"-call the\nTcpWorkerThreads asks the connection pool of the enclosing TcpEndpoint to\nexecute itself (most importantly \"acceptSocket\") using\n\"endpoint.tp.runIt(this);\" But when tp.runIt fails because it  got an\nOutOfMemory exception up thread creation, the calling threads \"dies\" (in\nThreadPool.java, line 653 [version 5.0.19]) and there is no other thread calling\n\"acceptSocket\" any more. \n\nAgain, although the main issue here is the OutOfMemory exception (which probably\nhas to sth todo with # threads and lack of native memory etc.) tomcat should\nhandle that kind of \"DoS\" gracefully. It should not stop accepting HTTP requests\nforever  (or any kind of requests since \"TcpEndpoint\" indicates it is not\nlimited to HTTP).\n\nIn my opinion, the current TcpWorkerThread should catch the exception, close the\ncurrent connection and return to \"socketAccept\"-mode."}, {"count": 1, "tags": [], "text": "You can patch your Tomcat to do that if you want to, but the main problem is\nthat the VM is not in a stable state once an OOM error occurs (and besides, the\nVM will likely be spending all its time doing full GCs).\nFinding the source of the OOM would be better for you, IMO.", "attachment_id": null, "id": 64244, "creator": "remm@apache.org", "time": "2004-09-27T06:32:00Z", "bug_id": 31426, "creation_time": "2004-09-27T06:32:00Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 31426, "attachment_id": null, "text": "This has nothing to do with running out of heap. It is about running native\nmemory : every thread uses some native memory (mainly for stack trace). Even if\nthere is plenty of heap, native memory area might be to small to create a new\nthread. So JVM should run stable if no other threads are created.", "id": 64245, "time": "2004-09-27T07:13:42Z", "creator": "erik.pischel@t-systems.com", "creation_time": "2004-09-27T07:13:42Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 31426, "text": "ups, I meant \"it is about running out of native memory\" and native memory is\nmainly used for thread stacks (not traces).\n\nAs for the proposed fix: on the other hand, the ThreadPool's contract might be\nabout not throwing an exception when failing to create a new thread but\ntolerating this and queuing the runIt request for an existing thread to execute.", "id": 64246, "time": "2004-09-27T07:18:03Z", "creator": "erik.pischel@t-systems.com", "creation_time": "2004-09-27T07:18:03Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 31426, "attachment_id": null, "text": "No, I disagree with your proposed fix.  The ability to work when your \nconfiguration is bad enough that you can't create a new thread is not something \nI want to even try to do.  Make sure your configuration (of the heap, of the \nstack size, and of the thread pool properties) works along with your hardware \nand operating system.", "id": 64261, "time": "2004-09-27T13:30:22Z", "creator": "yoavs@computer.org", "creation_time": "2004-09-27T13:30:22Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 31426, "text": "*** Bug 32262 has been marked as a duplicate of this bug. ***", "id": 66991, "time": "2004-11-16T10:43:07Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2004-11-16T10:43:07Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 31426, "text": "This is obviously a problem with at least not logging the problem!\neBay gets OOM all the time in the application stack that are recoverable.\n\nThis behavior is unacceptable for an enterprise server.\n\n", "id": 87654, "time": "2006-04-07T02:08:03Z", "creator": "agoldber@ebay.com", "creation_time": "2006-04-07T02:08:03Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "agoldber@ebay.com", "attachment_id": null, "id": 87655, "time": "2006-04-07T02:08:34Z", "bug_id": 31426, "creation_time": "2006-04-07T02:08:34Z", "is_private": false, "text": "This is obviously a problem with at least not logging the problem!\neBay gets OOM all the time in the application stack that are recoverable.\n\nThis behavior is unacceptable for an enterprise server.\n\n"}, {"count": 8, "tags": [], "text": "We had the same issue (jdk1.5, tomcat 5.0.25) and it was solved by giving the vm\nmore PermGenSpace.", "attachment_id": null, "id": 87660, "creator": "struts_user@anotheria.net", "time": "2006-04-07T10:50:04Z", "bug_id": 31426, "creation_time": "2006-04-07T10:50:04Z", "is_private": false}]
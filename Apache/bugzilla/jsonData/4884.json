[{"count": 0, "tags": [], "creator": "tgochenour@peregrine.com", "attachment_id": null, "id": 7933, "time": "2001-11-14T23:33:10Z", "bug_id": 4884, "creation_time": "2001-11-14T23:33:10Z", "is_private": false, "text": "Test this example:\n\n<?xml version=\"1.0\"?>\n \n<project name=\"depends_test\" default=\"test\" basedir=\".\">\n \n <target name=\"start\">\n   <antcall target=\"test00\"/>\n   <antcall target=\"test01\"/>\n   <antcall target=\"test10\"/>\n   <antcall target=\"test11\"/>\n </target>\n\n <target name=\"test00\">\n   <echo message=\"test00 fired\"/>\n   <antcall target=\"test\"/>\n </target>\n <target name=\"test01\">\n   <echo message=\"test01 fired\"/>\n   <property name=\"test.ok\" value=\"present\"/>\n   <antcall target=\"test\"/>\n </target>\n <target name=\"test10\">\n   <echo message=\"test10 fired\"/>\n   <property name=\"skip.test\" value=\"present\"/>\n   <antcall target=\"test\"/>\n </target>\n <target name=\"test11\">\n   <echo message=\"test11 fired\"/>\n   <property name=\"test.ok\" value=\"present\"/>\n   <property name=\"skip.present\" value=\"present\"/>\n   <antcall target=\"test\"/>\n </target>\n\n <target name=\"test\" if=\"test.ok\" unless=\"skip.test\" depends=\"something\">\n    <echo message=\"test fired\"/>\n </target>\n \n <target name=\"something\">\n  <echo message=\"something fired\"/>\n  <property name=\"skip.test\" value=\"present\"/>\n </target>\n \n</project>\n\nYou'll get\n\ntest00 \nsomething fired\ntest01\nsomething fired\ntest10\nsomething fired\ntest11\nsomething fired\n\nI don't want the target \"something\" to fire if \"test.ok\" is false \nor \"skip.test\" is true.  That's why the attribute is called \"depends\". \nShouldn't dependant targets fire only when we're unsure whether the parent \ntarget could fire?  If we know it won't, why bother checking a dependant?"}, {"count": 1, "tags": [], "creator": "donaldp@apache.org", "text": "For better or worse that is the way ant is designed to operate. The dependent \ntargets (ie \"something\") are always processed *before* the dependee (ie \n\"test\") is processed and before dependee checks if/unless attributes. This is \ndesigned so that the dependent can set up conditions under which dependee may \nuse.\n\nie\n\n<target name=\"dependee\" depends=\"dependent\" if=\"property.is.set\">\n  <echo message=\"This will print\"/>\n</target>\n\n<target name=\"dependent\" >\n  <property name=\"property.is.set\" value=\"aValue\"/>\n</target>\n\ndependee will always printout out \"this will print\"\n\nIf you believe this behaviour is wrong you can always make a case for changing \nit on mailing list and we will consider it for ant2.0 when we can break \nbackwards compatability.\n", "id": 7934, "time": "2001-11-15T00:28:37Z", "bug_id": 4884, "creation_time": "2001-11-15T00:28:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 4884, "text": "The scenario you give will continue to work with my enhancement request.  The \nonly possible break with backward compatibility is when \"property.is.set\" is \nALREADY SET yet the author still wants dependent targets to fire.  Are there \nany actual instances where when the primary target is already known to be \ninvalid yet the user still wants the dependent targets to fire?\n\nThere are scenarios, however, where I want the entire set of targets to be \ninvalid, for no other reason than to optimize performance.\n\nThe if and unless conditions should be checked both before and after the firing \nof dependents.  I believe this change will be safe for all existing ant \nimplementations.\n\n\n\n\n", "id": 7948, "time": "2001-11-15T11:11:16Z", "creator": "tgochenour@peregrine.com", "creation_time": "2001-11-15T11:11:16Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "On second thought, your scenario doesn't work if the test for if=\"\" is done \nprior to firing dependents.  Let be modify my enhancement request.  The \nunless=\"\" test should be done prior to firing dependent targets.", "creator": "tgochenour@peregrine.com", "attachment_id": null, "id": 7950, "time": "2001-11-15T11:24:03Z", "bug_id": 4884, "creation_time": "2001-11-15T11:24:03Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 4884, "attachment_id": null, "id": 7956, "time": "2001-11-15T12:18:08Z", "creator": "donaldp@apache.org", "creation_time": "2001-11-15T12:18:08Z", "is_private": false, "text": "Unfortunately it will not be safe for existing installations as it breaks \nbackwards compatability. Again - If you want this changed in future lobby for \nit to change in Ant2.\n\n\nFow what you want it may be better to use antcall to conditionally call \n\"chain\" of targets.\n"}, {"count": 5, "tags": [], "bug_id": 4884, "text": "Targets invoked by antcall cannot set properties that are visible to the \ncalling target.  One must use the depends=\"\" invocation to implement the \nscenario you mention where a dependent target sets a property for the calling \ntarget to use.\n\nI have the following scenario which I use as a work-around:\n\n<target name=\"build-default\" unless=\"skip.build.x\" depends=\"special-case1, \nspecial-case2\">\n  <echo message=\"build-default\"/>\n</target>\n\n<target name=\"special-case1\" if=\"build.special-case1\" unless=\"skip.build.x\">\n  <property name=\"skip.build.x\" value=\"true\"/>\n  <echo message=\"build-special-case1\"/>\n</target>\n\n<target name=\"special-case2\" if=\"build.special-case2\" unless=\"skip.build.x\">\n  <property name=\"skip.build.x\" value=\"true\"/>\n  <echo message=\"build-special-case2\"/>\n</target>\n\nEach special case needs an explicit unless=\"skip.build.x\" to prevent it from \nfiring.  The problem is I can't test for a different condition or nest a \nsimilar strategy within one of these special cases.  If default tested the \nunless before firing dependents then I could omit the unless clauses in each of \nmy special case targets.\n\nAs for lobbying for a change in Ant2...perhaps this is what I'm doing now.\n\nTodd", "id": 7962, "attachment_id": null, "creator": "tgochenour@peregrine.com", "creation_time": "2001-11-15T14:27:05Z", "time": "2001-11-15T14:27:05Z", "is_private": false}]
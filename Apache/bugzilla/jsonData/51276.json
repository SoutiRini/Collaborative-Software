[{"count": 0, "tags": [], "creator": "ale@FreeBSD.org", "text": "Startup time in tomcat 7.0.14 is 10x higher than 7.0.12, if there are a few shared JARs in tomcat/lib and a few webapps.\nThe issue is very simple to reproduce, simply add 10 empty directories in tomcat/webapps and (for example) the Metro webservices jars in tomcat/lib. On my machine the startup time increase from 0.5 secs (default installation) to 35.2 secs.\nWhen using tomcat 7.0.12 the startup time is about 3 secs on my machine in this test case.", "id": 146673, "time": "2011-05-27T11:09:03Z", "bug_id": 51276, "creation_time": "2011-05-27T11:09:03Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "ale@FreeBSD.org", "text": "I've debugged the problem and found the issue. This is the incriminated commit:\n\n===\nWhile scanning JARs for TLDs and fragments, avoid using JarFile and use JarInputStream as in most circumstances where JARs are scanned, JarFile will create a temporary copy of the JAR rather than using the resource directly. This change significantly improves startup performance for applications with lots of JARs to be scanned. (markt)\n===\n\nThe last sentence is clearly false, since JarFile is optimized for random access, while JarInputStream has to read the entire file.\n\nI'm attaching a very simple test case, showing the issue. This is a sample output:\n\n%java TomcatSlowTest webservices-rt.jar\nTime elapsed with JarFile (Tomcat 7.0.12): 1 ms\nTime elapsed with JarInputStream (Tomcat 7.0.14): 458 ms", "id": 146681, "time": "2011-05-27T14:49:54Z", "bug_id": 51276, "creation_time": "2011-05-27T14:49:54Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 51276, "is_private": false, "id": 146682, "creation_time": "2011-05-27T14:51:01Z", "time": "2011-05-27T14:51:01Z", "creator": "ale@FreeBSD.org", "text": "Created attachment 27076\nTest case showing the issue.", "attachment_id": 27076}, {"count": 3, "tags": [], "bug_id": 51276, "is_private": false, "id": 146683, "creation_time": "2011-05-27T15:14:18Z", "time": "2011-05-27T15:14:18Z", "creator": "ale@FreeBSD.org", "text": "Other notes:\n- the issue is reproducible on all platforms (tested configurations: OpenJDK6 on FreeBSD and Oracle JDK 1.6 on Windows)\n- even modifying the test case to look for an existing file (and in the first bytes of the jar), the JarInputStream is slower than JarFile\n- JarFile has most parts in native code, while JarInputStream is 100% Java code", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 51276, "is_private": false, "count": 4, "id": 146684, "time": "2011-05-27T15:43:20Z", "creator": "markt@apache.org", "creation_time": "2011-05-27T15:43:20Z", "text": "The attached test case isn't representative of how Tomcat handles JARs. The references to the JARs are passed as URLs. The temporary copy that JarFile creates in this case has a much more significant impact on performance than using JarInputStream.\n\nThat said, the increase in start time isn't good and is worth investigating further. If (as is likely) it is related to the switch to JarInputStream, then it may be possible to determine if the URL points to a file and switch to JarFile in that case."}, {"count": 5, "tags": [], "text": "(In reply to comment #3)\n> - JarFile has most parts in native code, while JarInputStream is 100% Java code\n\nSorry, that's completely untrue.  All I/O is done by native code in the JRE, and all ZIP-format handling is done by native code in the standard zlib library.", "attachment_id": null, "id": 146685, "creator": "chuck.caldarale@unisys.com", "time": "2011-05-27T16:06:59Z", "bug_id": 51276, "creation_time": "2011-05-27T16:06:59Z", "is_private": false}, {"count": 6, "tags": [], "text": "I wanted to create the most simple test case to show up the *enormous and unjustified* performance difference of JarFile vs JarInputStream on local files. Passing a URL pointing to a local file doesn't change anything (yes, I tried), probably you can see a speedup if the url is pointing to a very slow location (when does it happen?). So I agree with you to use JarFile if the file is local and JarInputStream for other cases.", "is_private": false, "id": 146688, "creator": "ale@FreeBSD.org", "time": "2011-05-27T16:58:33Z", "bug_id": 51276, "creation_time": "2011-05-27T16:58:33Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "Your test cases are not representative of the typical jar handling within Tomcat.\n\nAs is explained in the code commentary in the patch, Jars in web applications are referenced via JNDI URLs. Using JarFile with these URLs (or any non-file URL) triggers the creation of a full copy of the jar file in the temp directory. This is significantly slower than accessing the jar with JarInputStream.\n\nThe issue you are seeing is as a result of using shared jars. While supported, such an approach is not recommended due to the complications it can create both when upgrading and with memory leaks on reload with some libraries. The shared jars are referenced via file URLs so the switch to JarInputStream will result in a slow down in that case.\n\nAs per comment #4, I'll see if there is an easy way to switch to JarFile for jars referenced via file URLs rather than JNDI URLs", "is_private": false, "bug_id": 51276, "id": 146743, "time": "2011-05-30T08:55:57Z", "creator": "markt@apache.org", "creation_time": "2011-05-30T08:55:57Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 51276, "attachment_id": null, "id": 146813, "time": "2011-06-02T11:12:32Z", "creator": "markt@apache.org", "creation_time": "2011-06-02T11:12:32Z", "is_private": false, "text": "This was doable and has been added to 7.0.x. It will be included in 7.0.15 onwards."}, {"count": 9, "tags": [], "bug_id": 51276, "attachment_id": null, "id": 146881, "time": "2011-06-06T07:04:32Z", "creator": "ale@FreeBSD.org", "creation_time": "2011-06-06T07:04:32Z", "is_private": false, "text": "Is there an ETA for tomcat 7.0.15?"}]
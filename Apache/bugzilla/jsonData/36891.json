[{"count": 0, "attachment_id": null, "creator": "gregorypierce@mac.com", "text": "When going through the ant documentation I came across the scp task and determined that it would \nsuit my needs. The docs only spoke of needing the jsch.jar file, so I made sure that file was in my lib \ndirectory and tried to run, then I discovered the evil horror of the optional build process - optional files \nare build into the core ant.jar file but only if certain things were present when that version of ant was \ncompiled. \n\nThis is just wrong! What results is not just different versions of ant separated by version number, but \nalso different versions of ant separated by the libraries available when it was built. Who the heck knows \nwhat .jar files were around when that version of ant was built! If you are in a corporate environment this \nis especially true as the ant version may already be installed by a system admin. There should be a core \nant and either one optional ant which ALWAYS includes all the optional tasks or a bunch of separate \noptional ant jars that either get built or not(i.e. there is no artifact from the build process) based on \nlibraries being available.\n\nWhat REALLY should happen is that the optional stuff should be split out on its own and these \nmisleading empty MANIFEST.MF .jar files should go away. What is the point of having these .jar files \nwhich deceive you into believing that you have the optional .jar files already built.\n\n\nIf you do however insist on keeping the build process this way (which is not ideal in any way), there \nneeds to be a way to ask an ant .jar file which optional ant tasks it supports and a way from the ant \ncommand line a way to push in new optional tasks.\n\noverall, just kinda disappointed in the way the optional tasks work. If I have to open up ant's source and \nbuild.xml to try and figure out why I have no optional tasks, and why when I add jars to the /lib \ndirectory I don't get working optional tasks - something is wrong somewhere.", "id": 80680, "time": "2005-10-02T17:39:05Z", "bug_id": 36891, "creation_time": "2005-10-02T17:39:05Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I was able to \"workaround\" part of this issue (the part where it doesn't build right) by editing the \nbuild.xml and changing the empty classpath path to \n\n  <path id=\"classpath\">\n\t<fileset id=\"lib.jars\" dir=\"lib\">\n\t\t<include name=\"**/*.jar\"/>\n\t\t<include name=\"**/*.zip\"/>\n\t</fileset>  \n  </path>\n\nNow I can actually drop optional library jar files into the ant lib directory and they build when ant gets \nbuilt as well as being available when ant runs.", "is_private": false, "id": 80682, "creator": "gregorypierce@mac.com", "time": "2005-10-02T18:11:17Z", "bug_id": 36891, "creation_time": "2005-10-02T18:11:17Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 36891, "attachment_id": null, "id": 80683, "time": "2005-10-02T20:44:06Z", "creator": "jkf@apache.org", "creation_time": "2005-10-02T20:44:06Z", "is_private": false, "text": "While I agree the manifest only jars are confusing, I do not have any problem\nbuilding the optional jars for the libraries I have available. Manifest only\njars are only created (after a successful build) for those optional parts that\nhave not actually been built.\n\nThe optional files are included in the optional files. For instance ant-jsch.jar\nif jsch.jar is available when building ant. If jsch.jar is not available when\nbuilding ant, ant-jsch.jar will contain a manifest only.\n\nThe procedure when building an official ant distribution includes placing all\nlibraries in the ant_src/lib directory\nWhen the following commands are executed:\ncd ant_src\nbootstrap\nbuild dist_lite\nan custom build ant with optional tasks for all optional libraries available\nwill be created in ant_src/dist. The optional libraries are copied to\nant_src/dist/lib. when running ant ANT_HOME can then be set to ant_src/dist.\n\nDo not build ant using another ant version.\n\n\n"}, {"count": 3, "tags": [], "text": "Well I assumed that building ant with another version of ant was valid since there is a build.xml sitting in \nthe root of the source distro. Ant is so engrained in the psyche that whenever I encounter a build.xml file, \nmy first inclination is to type 'ant' - and I'm generally not disappointed.\n\nI am hoping that someone out there sees the issue with having a version of ant that actually can't do the \nsame thing as another version of ant. All ant version 1.6.5 distributions should do the same thing, not be \ndifferent depending on how/when they were built - just seems to be a bad practice IMO.", "is_private": false, "bug_id": 36891, "id": 80684, "time": "2005-10-02T20:54:03Z", "creator": "gregorypierce@mac.com", "creation_time": "2005-10-02T20:54:03Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 36891, "attachment_id": null, "id": 80685, "time": "2005-10-02T21:35:16Z", "creator": "jkf@apache.org", "creation_time": "2005-10-02T21:35:16Z", "is_private": false, "text": "Well for \"homebuild\" ant versions there is not much we can do about it. The\noptional parts can only be built against valid libraries containing the optional\nparts. We cannot include all optional jar files in the source distribution. The\nant 1.6.5 distribution from the apache web site is the only official ant 1.6.5\ndistribution. \n\nThe problem you touch upon is valid for all software, as soon as you rebuild in\nan environment with significant differences from the original environment, the\nresult will be different.\n\nOne can really not expect that the way you build will never have influence on\nthe software you build. One could say it is unacceptable that building software\nusing different compilers yields different results, fact is however that using\ndifferent compilers will typcially yield different results, and so does the\navailablility of third party libraries or even different versions of third party\nlibraries. Even transforming all optional-dependent parts to use reflection will\nnot solve this problem."}, {"count": 5, "tags": [], "text": "This is a rant and not a bug report", "attachment_id": null, "id": 80693, "creator": "peterreilly@apache.org", "time": "2005-10-03T10:43:05Z", "bug_id": 36891, "creation_time": "2005-10-03T10:43:05Z", "is_private": false}, {"count": 6, "tags": [], "text": "When someone is this unhappy, it usually means that they have just wasted a\nmeaningful amount of their life on something, and want to vent their frustrations.\n\nGregory, we are sorry for the bad experience you had with building ant. Remember\nthat ant is self bootstrapping and that causes its build process to be a bit quirky.\n\nEven so, the point about manifest-only JAR file is valid. Why do we create them?", "attachment_id": null, "id": 80942, "creator": "stevel@apache.org", "time": "2005-10-10T11:20:54Z", "bug_id": 36891, "creation_time": "2005-10-10T11:20:54Z", "is_private": false}, {"count": 7, "tags": [], "text": "We don't create these manifest only jar files anymore (unless specified to do so\nfor gump)", "attachment_id": null, "bug_id": 36891, "id": 80967, "time": "2005-10-10T20:29:13Z", "creator": "jkf@apache.org", "creation_time": "2005-10-10T20:29:13Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 36891, "is_private": false, "text": "Sorry for my intolerant message .... Peter", "id": 80980, "time": "2005-10-11T10:36:40Z", "creator": "peterreilly@apache.org", "creation_time": "2005-10-11T10:36:40Z", "attachment_id": null}]
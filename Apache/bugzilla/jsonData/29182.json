[{"count": 0, "text": "When using Ant to compile JSPs, Jasper locks jar files, so they can not be\ndeleted on Windows. I am attaching an application that reproduces this issue. To\nuse it, do the following:\n\n1. Unpack the zip archive\n2. Edit the build.properties file to point to your Tomcat installation\n(reproduced with 5.0.24)\n3. Run ant (reproduced with 1.6.1) in the root directory of the application\n\nThe ant script compiles pages in the application and then tried to delete the\njar files used by the app. Deletion fails.", "bug_id": 29182, "attachment_id": null, "id": 57970, "time": "2004-05-24T16:53:24Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-05-24T16:53:24Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 29182, "attachment_id": 11640, "is_private": false, "id": 57971, "time": "2004-05-24T16:55:32Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-05-24T16:55:32Z", "text": "Created attachment 11640\nTest case for this issue"}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 57990, "time": "2004-05-24T21:25:16Z", "bug_id": 29182, "creation_time": "2004-05-24T21:25:16Z", "is_private": false, "text": "Did you check that it's not an Ant or javac issue ? Do you use fork=true ?"}, {"count": 3, "tags": [], "creator": "petr.jiricka@netbeans.com", "text": "I don't think this is a Javac or Ant issue - in fact, my testcase does not use\nJavac at all. As I wrote privately to Kin-Man, I believe the problem is that\nJspC uses URLClassLoader, which is known to lock jar files. When Jasper runs\ninside the Catalina container, Catalina's WebappClassLoader is used, so the code\nthat locks jars is avoided.\n\nBut thanks for the hint with fork=true, this actually helped. I replaced the\n<taskdef name=\"jasper2\" classname=\"org.apache.jasper.JspC\"> style of calling\nJasper by the <java> task, which allows to fork JspC:\n\n<java classname=\"org.apache.jasper.JspC\"\n    fork=\"true\"\n    failonerror=\"true\"\n>\n    <arg value=\"-uriroot\"/>\n    <arg value=\"${basedir}/build/web\"/>\n    <arg value=\"-d\"/>\n    <arg value=\"${basedir}/build/jsps/src\"/>\n    <arg value=\"-die1\"/>\n    <classpath> \n        <pathelement location=\"${java.home}/../lib/tools.jar\"/> \n        <fileset dir=\"${tomcat.home}/bin\"> \n            <include name=\"*.jar\"/> \n        </fileset> \n        <fileset dir=\"${tomcat.home}/server/lib\"> \n            <include name=\"*.jar\"/> \n        </fileset> \n        <fileset dir=\"${tomcat.home}/common/lib\"> \n            <include name=\"*.jar\"/> \n        </fileset> \n    </classpath> \n</java>\n\nWhen using the above code, jar files are not locked and my testcase succeeds.\nHowever, I don't much like this solution, because:\n\n- Code that uses <java> is uglier than when you use <taskdef>\n- Tomcat documentation recommends the use of <taskdef>, see:\n  http://jakarta.apache.org/tomcat/tomcat-5.0-doc/jasper-howto.html\n\nSo I would still appreciate if this is fixed.\n\nThere is an additional aspect: many current IDEs have some kind of Ant\nintegrations, and most IDEs run Ant internally, without launching a separate\nprocess. So when JspC locks jar files, these jar files will be locked until the\nIDE exits. That's another compelling reason to fix this issue. Thanks.\n", "id": 58024, "time": "2004-05-25T08:54:02Z", "bug_id": 29182, "creation_time": "2004-05-25T08:54:02Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "yoavs@computer.org", "text": "I'm not sure a fix to URLClassLoader to not lock jar files is that easy, even \nif it's desirable.  However, would adding support for the fork attribute to \nthe JspC task (and maybe even making fork true by default) be good enough?", "id": 58269, "time": "2004-05-28T00:11:09Z", "bug_id": 29182, "creation_time": "2004-05-28T00:11:09Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 29182, "attachment_id": null, "is_private": false, "id": 58284, "time": "2004-05-28T08:38:05Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-05-28T08:38:05Z", "text": "> I'm not sure a fix to URLClassLoader to not lock jar files is that easy, even \n> if it's desirable.\n\nAgreed. Also, it's desirable to support existing JDKs.\n\nAdding fork attribute to JspC would be sufficient, although I'm not sure if it's\nthat easy, because:\n\n- You would have to also specify a classpath attribute (or nested element) that\nwould tell the task what classpath to use when the separate JVM is run\n- You would need to capture output from the separate process and somehow\nredirect it to the original task's output (Ant output).\n- You may want to allow all the attributes that the <java> task has that relate\nto JVM parameters, such as jvm, maxmemory, jvmargs, failonerror, or nested\nelements jvmarg, sysproperty\n\nIs this (easily) doable?"}, {"count": 6, "tags": [], "bug_id": 29182, "attachment_id": null, "is_private": false, "id": 58315, "time": "2004-05-28T14:15:06Z", "creator": "yoavs@computer.org", "creation_time": "2004-05-28T14:15:06Z", "text": "What I had in mind actually was either very simple or complex, depending on how \nyou look at it: have org.apache.jasper.JspC extend \norg.apache.tools.ant.taskdefs.Java ;)  That way we get all the attributes of \nthat task (classpath, jvmargs, sysproperty, forking, etc.) without having to \nwrite code for it.  We already have the ant.jar in common/lib, so we won't be \nadding any dependencies.\n\nThe complex part might be the testing: I don't know the JspC task well enought \nto comprehensively test it."}, {"count": 7, "tags": [], "creator": "yoavs@computer.org", "text": "Tomcat 5.1 will have an antiLockingResources or antiLockingJARs attribute on \nthe Host or Context that should address this.  I'm not sure this will be fixed \nin Tomcat 5.0.", "id": 61271, "time": "2004-07-28T21:12:39Z", "bug_id": 29182, "creation_time": "2004-07-28T21:12:39Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 29182, "attachment_id": null, "text": "That would be good, but will the attributes you mention really fix this? JspC\ndoes not use any Catalina code at all, and it does not read server.xml, AFAIK.\nThis is purely about Jasper code. How exactly will the new attributes affect\nthis issue? Thanks.", "id": 61288, "time": "2004-07-29T06:49:14Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-07-29T06:49:14Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 29182, "attachment_id": null, "is_private": false, "id": 62985, "time": "2004-09-02T19:23:31Z", "creator": "yoavs@computer.org", "creation_time": "2004-09-02T19:23:31Z", "text": "Tomcat 5.5 uses the Eclipse JDT compiler by default, hopefully it behaves \nbetter with regards to resource locking."}, {"count": 10, "tags": [], "creator": "petr.jiricka@netbeans.com", "attachment_id": null, "id": 63014, "time": "2004-09-03T10:12:13Z", "bug_id": 29182, "creation_time": "2004-09-03T10:12:13Z", "is_private": false, "text": "Yoav, I don't think the usage of JDT will help here, because this is not a Java\ncompiler issue, as I wrote in my comment on 2004-05-25. The problem occurs in\nthe JSP -> servlet translation phase, not in the servlet -> class compilation.\n\nSpecifically, I believe the problem is in method JspC.initClassLoader(...),\nwhich creates a new URLClassLoader. Using a different classloader that does not\nlock jar files (e.g. WebappClassLoader from Catalina) would fix this issue, IMHO."}, {"count": 11, "tags": [], "bug_id": 29182, "attachment_id": null, "text": "This is really getting ridiculous. -1 for adding workarounds to address broken\nimplementation in the JVM. (BTW, I never noticed the behavior you describe)\nInstead, you should ask your employer to fix *their* bug. Please don't reopen\nthis report.", "id": 63015, "time": "2004-09-03T10:19:47Z", "creator": "remm@apache.org", "creation_time": "2004-09-03T10:19:47Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 29182, "attachment_id": null, "text": "Remy, I don't understand what's ridiculous about this - this is a legitimate\nbug. Let's be constructive, please.\n\n> -1 for adding workarounds to address broken implementation in the JVM.\n\nDoesn't WebappClassLoader already have workarounds to prevent locking jars and\nto allow redeployment? There is code in Tomcat that bypasses URLConnection, so\nwhy apply different measures in this case?\n\nAlso, I believe Tomcat should strive to work with taday's existing JDKs.\n\nFYI, a bug was submitted against JDK, but it was not resolved:\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5041014\n\n> BTW, I never noticed the behavior you describe\n\nAre you saying you are not able to reproduce this usign the test case I submitted?\n\nOne practical real-world situation when this may arise is when you run Ant\nscripts that compile JSPs in IDEs. IDEs generally run Ant in their own VM; they\ndon't launch a separate one. So any jars that are locked by jspc will not be\nclosed after the Ant build completes. Next time you run ant clean (in your IDE),\nyou hit this bug. And here I am not only talking about NetBeans, Eclipse also\ndoes it this way, I believe.\n\n", "id": 63020, "time": "2004-09-03T11:35:54Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-09-03T11:35:54Z", "is_private": false}, {"count": 13, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 63023, "time": "2004-09-03T12:23:16Z", "bug_id": 29182, "creation_time": "2004-09-03T12:23:16Z", "is_private": false, "text": "I maintain my -1. Fixing this yould be *etremely* painful. The WCL is a\ndifferent solution, for different needs.\n\nThere are two workarounds:\n\na) fork your compilation in a separate VM. You should also be able to do that by\nputting the jspc task in a seprate target, and using a java call to run this\ntarget. You acknowledge something similar as a solution, but unfortunately, it\nis not clean enough for you. This kind of answer does annoy me greatly, as well\nas your insistence at abusing Yoav's time on this issue which should be handled\nin the JDK.\n\nb) use the Jasper internals, which will allow you to provide your own\nclassloader (which I hope, won't lock JARs).\n"}, {"count": 14, "tags": [], "bug_id": 29182, "attachment_id": null, "is_private": false, "id": 63025, "time": "2004-09-03T13:07:15Z", "creator": "petr.jiricka@netbeans.com", "creation_time": "2004-09-03T13:07:15Z", "text": "I agree these are both possible workarounds. However, they are not quite useful\nfor end users of Tomcat:\n\nRe. a) This is indeed what we do in NetBeans 4.0. But if we are serious about\nit, then it should be at least described in\nhttp://jakarta.apache.org/tomcat/tomcat-5.5-doc/jasper-howto.html\n\nRe. b) An end user of Tomcat is not going to write her own classloader. If we\nknow this would help, why not include and use such a classloader in Jasper\ndirectly? That way, ALL users will benefit, not just those who are able and\nwilling to write their own classloader."}, {"count": 15, "tags": [], "bug_id": 29182, "attachment_id": null, "is_private": false, "id": 63028, "time": "2004-09-03T13:17:54Z", "creator": "remm@apache.org", "creation_time": "2004-09-03T13:17:54Z", "text": "-1.\n\nBTW, you're definitely not a \"regular user\", you're embedding Jasper. It's the\nsame when I'm embedding Eclipse JDT (which is a very good compiler) and\nproviding it with a classloader (while I could choose to not care and feed it my\nclasspath using a higher level - and much simpler - interface), because I have\nspecific needs (and this way, since I assume the compiler would lock its JARs, I\nremain in control of the locking - to some extent: Windows sucks)."}]
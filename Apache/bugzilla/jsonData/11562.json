[{"count": 0, "tags": [], "creator": "f_ohagan@hotmail.com", "attachment_id": null, "id": 20807, "time": "2002-08-08T14:58:16Z", "bug_id": 11562, "creation_time": "2002-08-08T14:58:16Z", "is_private": false, "text": "We have found a problem with VSSGET when running a build. A common task is to \nget the latest version of the code from SourceSafe, and then copy over the top \nof this the files that a developer has been working on (before checking in).\n\nThis doesn't work, because by default, the time stamp on all the files will be \nthe time of the get, not the time the files were modified. So none of your \nlocally modified files have a later timestamp and are ignored.\n\nThere are command line switches that can change this, as listed in bug <a \nhref=\"http://nagoya.apache.org/bugzilla/show_bug.cgi?id=4387\">4387</a>. \n\nIt would be very useful if there were an additional attribute / nested tag that \ncould take any arbitrary command line switch to be added to the ss command, \nlike with the &lt;arg&gt; tag in the &lt;java&gt; task.\n\nI think it would also help people to put something about this in the \ndocumentation. There's a work around, which is to open the VSS client, and \nchoose Tools|Options and change 'Set date/time on local files' on the 'Local \nfiles' tab. This changes the behaviour of the command line operation as well as \nthe GUI."}, {"count": 1, "tags": [], "bug_id": 11562, "attachment_id": null, "id": 21134, "time": "2002-08-15T22:27:12Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-15T22:27:12Z", "is_private": false, "text": "It would be nice if you could provide a patch for this (cvs diff -u) as I \ndon't think that any committer is using VSS right now."}, {"count": 2, "tags": [], "bug_id": 11562, "attachment_id": null, "id": 30103, "time": "2003-01-27T14:50:14Z", "creator": "cxi@gltg.com", "creation_time": "2003-01-27T14:50:14Z", "is_private": false, "text": "As described in the Fiann's original post, the default option for timestamp \nwhen getting files from VSS is set to the current date and time. However, a lot \nof times setting the time to the modified time is more desirable. \n\nAccording to Microsoft, the followings are the available options:\n-GTC    Local copy is given the current date and time. \n-GTM    Local copy is given the date and time that the file was last modified, \n        not the current date and time. \n-GTU    Local copy is given the date and time that the file was last updated,\n        not the current date and time. \n\nI modified MSVSS.java and MSVSSGET.java to take these options into \nconsideration. The following changes have only been tested when no files are \nchecked out by the user. There are more options available regarding how local\nwritable copies are handled. Please see \nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=4387 for more information. \n\n********************************************\n*            MSVSS.java                    *                 \n********************************************\npackage org.apache.tools.ant.taskdefs.optional.vss;\n\n\n\nimport org.apache.tools.ant.Task;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.taskdefs.Execute;\nimport org.apache.tools.ant.taskdefs.LogStreamHandler;\nimport org.apache.tools.ant.types.Commandline;\n\n/**\n * A base class for creating tasks for executing commands on Visual SourceSafe.\n * <p>\n * The class extends the 'exec' task as it operates by executing the ss.exe \nprogram\n * supplied with SourceSafe. By default the task expects ss.exe to be in the \npath,\n * you can override this be specifying the ssdir attribute.\n * </p>\n * <p>\n * This class provides set and get methods for 'login' and 'vsspath' \nattributes. It\n * also contains constants for the flags that can be passed to SS.\n * </p>\n *\n * @author Craig Cottingham\n * @author Andrew Everitt\n */\npublic abstract class MSVSS extends Task {\n\n    private String m_SSDir = \"\";\n    private String m_vssLogin = null;\n    private String m_vssPath = null;\n    private String m_serverPath = null;\n\n    /**\n     * directory where <code>ss.exe</code> resides; optional.\n     * By default the task expects it to be in the PATH.\n     *\n     * @param dir the directory containing ss.exe\n     */\n    public final void setSsdir(String dir) {\n        m_SSDir = Project.translatePath(dir);\n    }\n\n    /**\n     * Builds and returns the command string to execute ss.exe\n     */\n    public final String getSSCommand() {\n        String toReturn = m_SSDir;\n        if (!toReturn.equals(\"\") && !toReturn.endsWith(\"\\\\\")) {\n            toReturn += \"\\\\\";\n        }\n        toReturn += SS_EXE;\n\n        return toReturn;\n    }\n\n    /**\n     * The login to use when accessing VSS, formatted as \"username,password\";\n     * optional.\n     * <p>\n     * You can omit the password if your database is not password protected.\n     *  if you have a password and omit it, Ant/VSS will hang.\n     *\n     * @param login the login string to use\n     */\n    public final void setLogin(String login) {\n        m_vssLogin = login;\n    }\n\n    /**\n     * @return the appropriate login command if the 'login' attribute was \nspecified, otherwise an empty string\n     */\n    public void getLoginCommand(Commandline cmd) {\n        if (m_vssLogin == null) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_LOGIN + m_vssLogin);\n        }\n    }\n\n    /**\n     * SourceSafe path which specifies the project/file(s) you wish to\n     * perform the action on; required. You should not specify the leading \ndollar-sign -\n     * it is prepended by Ant automatically.\n     * <p>\n     * Ant can't cope with a '$' sign in an attribute so we have to add it here.\n     * Also we strip off any 'vss://' prefix which is an XMS special and should \nprobably be removed!\n     * @todo dont add a $ prefix if it has one\n     * @param vssPath\n     */\n    public final void setVsspath(String vssPath) {\n        if (vssPath.startsWith(\"vss://\")) {\n            m_vssPath = PROJECT_PREFIX + vssPath.substring(5);\n        } else {\n            m_vssPath = PROJECT_PREFIX + vssPath;\n        }\n    }\n\n    /**\n     * @return m_vssPath\n     */\n    public String getVsspath() {\n        return m_vssPath;\n    }\n\n    /**\n     * Set the directory where <code>srssafe.ini</code> resides; optional.\n     * @param serverPath\n     */\n    public final void setServerpath(String serverPath) {\n        m_serverPath = serverPath;\n    }\n\n    protected int run(Commandline cmd) {\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this,\n                                                           Project.MSG_INFO,\n                                                           Project.MSG_WARN));\n\n            // If location of ss.ini is specified we need to set the\n            // environment-variable SSDIR to this value\n            if (m_serverPath != null) {\n                String[] env = exe.getEnvironment();\n                if (env == null) {\n                    env = new String[0];\n                }\n                String[] newEnv = new String[env.length + 1];\n                for (int i = 0; i < env.length ; i++) {\n                    newEnv[i] = env[i];\n                }\n                newEnv[env.length] = \"SSDIR=\" + m_serverPath;\n\n                exe.setEnvironment(newEnv);\n            }\n\n            exe.setAntRun(project);\n            exe.setWorkingDirectory(project.getBaseDir());\n            exe.setCommandline(cmd.getCommandline());\n            return exe.execute();\n        } catch (java.io.IOException e) {\n            throw new BuildException(e, location);\n        }\n    }\n\n    /**\n     * Constant for the thing to execute\n     */\n    private static final String SS_EXE = \"ss\";\n    /** */\n    public static final String PROJECT_PREFIX = \"$\";\n\n    /**\n     * The 'CP' command\n     */\n    public static final String COMMAND_CP = \"CP\";\n    /**\n     * The 'Add' command\n     */\n    public static final String COMMAND_ADD = \"Add\";\n    /**\n     * The 'Get' command\n     */\n    public static final String COMMAND_GET = \"Get\";\n    /**\n     * The 'Checkout' command\n     */\n    public static final String COMMAND_CHECKOUT = \"Checkout\";\n    /**\n     * The 'Checkin' command\n     */\n    public static final String COMMAND_CHECKIN = \"Checkin\";\n    /**\n     * The 'Label' command\n     */\n    public static final String COMMAND_LABEL = \"Label\";\n    /**\n     * The 'History' command\n     */\n    public static final String COMMAND_HISTORY = \"History\";\n    /**\n     * The 'Create' command\n     */\n    public static final String COMMAND_CREATE = \"Create\";\n\n\n    /** */\n    public static final String FLAG_LOGIN = \"-Y\";\n    /** */\n    public static final String FLAG_OVERRIDE_WORKING_DIR = \"-GL\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_DEF = \"-I-\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_YES = \"-I-Y\";\n    /** */\n    public static final String FLAG_AUTORESPONSE_NO = \"-I-N\";\n    /** */\n    public static final String FLAG_RECURSION = \"-R\";\n    /** */\n    public static final String FLAG_VERSION = \"-V\";\n    /** */\n    public static final String FLAG_VERSION_DATE = \"-Vd\";\n    /** */\n    public static final String FLAG_VERSION_LABEL = \"-VL\";\n    /** */\n    public static final String FLAG_WRITABLE = \"-W\";\n    /** */\n    public static final String VALUE_NO = \"-N\";\n    /** */\n    public static final String VALUE_YES = \"-Y\";\n    /** */\n    public static final String FLAG_QUIET = \"-O-\";\n\n    public static final String FLAG_FILETIME_DEF = \"-GTC\";\n\n    public static final String FLAG_FILETIME_MODIFIED = \"-GTM\";\n\n    public static final String FLAG_FILETIME_UPDATED = \"-GTU\";\n}\n\n********************************************\n*            MSVSSGET.java                 *                 \n********************************************\n\npackage org.apache.tools.ant.taskdefs.optional.vss;\n\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.types.Commandline;\nimport org.apache.tools.ant.types.Path;\n\nimport java.io.File;\n\n/**\n * Perform Get commands to Microsoft Visual SourceSafe.\n * <p>\n * The following attributes are interpreted:\n * <table border=\"1\">\n *   <tr>\n *     <th>Attribute</th>\n *     <th>Values</th>\n *     <th>Required</th>\n *   </tr>\n *   <tr>\n *      <td>login</td>\n *      <td>username,password</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>vsspath</td>\n *      <td>SourceSafe path</td>\n *      <td>Yes</td>\n *   </tr>\n *   <tr>\n *      <td>localpath</td>\n *      <td>Override the working directory and get to the specified path</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>writable</td>\n *      <td>true or false</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>recursive</td>\n *      <td>true or false</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>version</td>\n *      <td>a version number to get</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>date</td>\n *      <td>a date stamp to get at</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>label</td>\n *      <td>a label to get for</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>quiet</td>\n *      <td>suppress output (off by default)</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>autoresponse</td>\n *      <td>What to respond with (sets the -I option). By default, -I- is\n *      used; values of Y or N will be appended to this.</td>\n *      <td>No</td>\n *   </tr>\n *   <tr>\n *      <td>filetime</td>\n *      <td>What date time to give to the local copy.</td>\n *   </tr>\n * </table>\n * <p>Note that only one of version, date or label should be specified</p>\n *\n * @author Craig Cottingham\n * @author Andrew Everitt\n *\n * @ant.task name=\"vssget\" category=\"scm\"\n */\npublic class MSVSSGET extends MSVSS {\n\n    private String m_LocalPath = null;\n    private boolean m_Recursive = false;\n    private boolean m_Writable = false;\n    private String m_Version = null;\n    private String m_Date = null;\n    private String m_Label = null;\n    private String m_AutoResponse = null;\n    private boolean m_Quiet = false;\n    private String m_FileTime = null;\n\n    /**\n     * Executes the task.\n     * <p>\n     * Builds a command line to execute ss and then calls Exec's run method\n     * to execute the command line.\n     */\n    public void execute() throws BuildException {\n        Commandline commandLine = new Commandline();\n        int result = 0;\n\n        // first off, make sure that we've got a command and a vssdir ...\n        if (getVsspath() == null) {\n            String msg = \"vsspath attribute must be set!\";\n            throw new BuildException(msg, location);\n        }\n\n        // now look for illegal combinations of things ...\n\n        // build the command line from what we got the format is\n        // ss Get VSS items [-G] [-H] [-I-] [-N] [-O] [-R] [-V] [-W] [-Y] [-?]\n        // as specified in the SS.EXE help\n        commandLine.setExecutable(getSSCommand());\n        commandLine.createArgument().setValue(COMMAND_GET);\n\n        // VSS items\n        commandLine.createArgument().setValue(getVsspath());\n        // -GL\n        getLocalpathCommand(commandLine);\n        // -I- or -I-Y or -I-N\n        getAutoresponse(commandLine);\n        // -O-\n        getQuietCommand(commandLine);\n        // -R\n        getRecursiveCommand(commandLine);\n        // -V\n        getVersionCommand(commandLine);\n        // -W\n        getWritableCommand(commandLine);\n        // -Y\n        getLoginCommand(commandLine);\n        // -GTC or -GTM or -GTU\n        getFileTimeCommand(commandLine);\n\n        result = run(commandLine);\n        if (result != 0) {\n            String msg = \"Failed executing: \" + commandLine.toString();\n            throw new BuildException(msg, location);\n        }\n    }\n\n    /**\n     * Override the working directory and get to the specified path; optional.\n     */\n    public void setLocalpath(Path localPath) {\n        m_LocalPath = localPath.toString();\n    }\n\n    /**\n     * Builds and returns the -GL flag command if required.\n     * <p>\n     * The localpath is created if it didn't exist\n     */\n    public void getLocalpathCommand(Commandline cmd) {\n        if (m_LocalPath == null) {\n            return;\n        } else {\n            // make sure m_LocalDir exists, create it if it doesn't\n            File dir = project.resolveFile(m_LocalPath);\n            if (!dir.exists()) {\n                boolean done = dir.mkdirs();\n                if (!done) {\n                    String msg = \"Directory \" + m_LocalPath + \" creation was \nnot \" +\n                        \"successful for an unknown reason\";\n                    throw new BuildException(msg, location);\n                }\n                project.log(\"Created dir: \" + dir.getAbsolutePath());\n            }\n\n            cmd.createArgument().setValue(FLAG_OVERRIDE_WORKING_DIR + \nm_LocalPath);\n        }\n    }\n\n    /**\n     * Flag to tell the task to recurse down the tree;\n     * optional, default false.\n     */\n    public void setRecursive(boolean recursive) {\n        m_Recursive = recursive;\n    }\n\n    /**\n     * @return the 'recursive' command if the attribute was 'true', otherwise \nan empty string\n     */\n    public void getRecursiveCommand(Commandline cmd) {\n        if (!m_Recursive) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_RECURSION);\n        }\n    }\n\n    /**\n     * Flag to suppress output when true ; false by default.\n     */\n    public final void setQuiet (boolean quiet) {\n        this.m_Quiet = quiet;\n    }\n\n    public void getQuietCommand (Commandline cmd) {\n        if (m_Quiet) {\n            cmd.createArgument().setValue (FLAG_QUIET);\n        }\n    }\n\n    /**\n     * make fetched files  writable; optional, default false.\n     */\n    public final void setWritable(boolean argWritable) {\n        m_Writable = argWritable;\n    }\n\n    /**\n     * @return the 'make writable' command if the attribute was 'true', \notherwise an empty string\n     */\n    public void getWritableCommand(Commandline cmd) {\n        if (!m_Writable) {\n            return;\n        } else {\n            cmd.createArgument().setValue(FLAG_WRITABLE);\n        }\n    }\n\n    /**\n     * Set a version number to get;\n     * optional, only one of <tt>version</tt>, <tt>label</tt>, or <tt>date</tt>\n     * allowed.\n     * <p>\n     * ORIGINAL COMMENT THAT DOES NOT SEEM AT ALL VALID:\n     * Note we assume that if the supplied string has the value \"null\" that \nsomething\n     * went wrong and that the string value got populated from a null object. \nThis\n     * happens if a ant variable is used e.g. version=\"${ver_server}\" when \nver_server\n     * has not been defined to ant!\n     * NO, in this case the version string is \"${ver_server}\".\n     * @todo fix this\n     */\n    public void setVersion(String version) {\n        if (version.equals(\"\") || version.equals(\"null\")) {\n            m_Version = null;\n        } else {\n            m_Version = version;\n        }\n    }\n\n    /**\n     * Set the date to get;\n     * optional, only one of <tt>version</tt>, <tt>label</tt>, or <tt>date</tt>\n     * allowed.\n     * <p>\n     * ORIGINAL COMMENT THAT DOES NOT SEEM AT ALL VALID:\n     * Note we assume that if the supplied string has the value \"null\" that \nsomething\n     * went wrong and that the string value got populated from a null object. \nThis\n     * happens if a ant variable is used e.g. date=\"${date}\" when date\n     * has not been defined to ant!\n     * @todo fix this\n     */\n    public void setDate(String date) {\n        if (date.equals(\"\") || date.equals(\"null\")) {\n            m_Date = null;\n        } else {\n            m_Date = date;\n        }\n    }\n\n    /**\n     * Set the label to get;\n     * optional, only one of <tt>version</tt>, <tt>label</tt>, or <tt>date</tt>\n     * allowed.\n     * <p>\n     * Note we assume that if the supplied string has the value \"null\" that \nsomething\n     * went wrong and that the string value got populated from a null object. \nThis\n     * happens if a ant variable is used e.g. label=\"${label_server}\" when \nlabel_server\n     * has not been defined to ant!\n     */\n    public void setLabel(String label) {\n        if (label.equals(\"\") || label.equals(\"null\")) {\n            m_Label = null;\n        } else {\n            m_Label = label;\n        }\n    }\n\n    /**\n     * Simple order of priority. Returns the first specified of version, date, \nlabel.\n     * If none of these was specified returns \"\"\n     */\n    public void getVersionCommand(Commandline cmd) {\n\n        if (m_Version != null) {\n            cmd.createArgument().setValue(FLAG_VERSION + m_Version);\n        } else if (m_Date != null) {\n            cmd.createArgument().setValue(FLAG_VERSION_DATE + m_Date);\n        } else if (m_Label != null) {\n            cmd.createArgument().setValue(FLAG_VERSION_LABEL + m_Label);\n        }\n    }\n\n    /**\n     * What to respond with (sets the -I option). By default, -I- is\n     * used; values of Y or N will be appended to this.\n     */\n    public void setAutoresponse(String response){\n        if (response.equals(\"\") || response.equals(\"null\")) {\n            m_AutoResponse = null;\n        } else {\n            m_AutoResponse = response;\n        }\n    }\n\n    /**\n     * Checks the value set for the autoResponse.\n     * if it equals \"Y\" then we return -I-Y\n     * if it equals \"N\" then we return -I-N\n     * otherwise we return -I\n     */\n    public void getAutoresponse(Commandline cmd) {\n\n        if (m_AutoResponse == null) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_DEF);\n        } else if (m_AutoResponse.equalsIgnoreCase(\"Y\")) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_YES);\n\n        } else if (m_AutoResponse.equalsIgnoreCase(\"N\")) {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_NO);\n        } else {\n            cmd.createArgument().setValue(FLAG_AUTORESPONSE_DEF);\n        } // end of else\n\n    }\n\n    /**\n     * Set the option to the date and time given to the local copy\n     * optional, only one of <tt>current</tt>, <tt>modified</tt>, or\n     * <tt>updated</tt> allowed. The default is <tt>current</tt>.\n     */\n    public void setFileTime(String fileTime){\n        if (fileTime.equals(\"\") || fileTime.equals(\"null\")) {\n            m_FileTime = null;\n        } else {\n            m_FileTime = fileTime;\n        }\n    }\n\n    /**\n     * Checks the value set for the fileTime.\n     * if it equals \"current\" then we return -GTC\n     * if it equals \"modified\" then we return -GTM\n     * if it equals \"updated\" then we return -GTU\n     * otherwise we return -GTC\n     */\n    public void getFileTimeCommand(Commandline cmd) {\n\n        if (m_FileTime == null) {\n            cmd.createArgument().setValue(FLAG_FILETIME_DEF);\n        } else if (m_FileTime.equalsIgnoreCase(\"modified\")) {\n            cmd.createArgument().setValue(FLAG_FILETIME_MODIFIED);\n        } else if (m_FileTime.equalsIgnoreCase(\"updated\")) {\n            cmd.createArgument().setValue(FLAG_FILETIME_UPDATED);\n        } else {\n            cmd.createArgument().setValue(FLAG_FILETIME_DEF);\n        } // end of else\n\n    }\n}\n\n\n\nNote if you already have local copy that has a newer timestamp than the \nmodified timestamp in VSS, I don't think VSS will get the files. So you might \nwant to call an ant clean task to delete the local copies before you use this. \n\n"}, {"count": 3, "tags": [], "bug_id": 11562, "attachment_id": null, "text": "I've added the timestamp options to <vssget> and <vsscheckout>\n\nTest case is updated\n\nThis patch fixes bugs:\n#11562\n#8451\n#4387\n#12793\n#14174\n#13532\n#14463\n\nJesse", "id": 32271, "time": "2003-03-02T20:55:30Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T20:55:30Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 11562, "attachment_id": 5103, "id": 32272, "time": "2003-03-02T20:56:16Z", "creator": "jesse@cryptocard.com", "creation_time": "2003-03-02T20:56:16Z", "is_private": false, "text": "Created attachment 5103\nPatch to add new attributes"}, {"count": 5, "attachment_id": 5104, "creator": "jesse@cryptocard.com", "is_private": false, "id": 32273, "time": "2003-03-02T20:56:43Z", "bug_id": 11562, "creation_time": "2003-03-02T20:56:43Z", "tags": [], "text": "Created attachment 5104\nPatch for documentation"}, {"text": "fixed in CVS", "tags": [], "creator": "jesse@cryptocard.com", "attachment_id": null, "count": 6, "id": 35160, "time": "2003-04-15T04:32:13Z", "bug_id": 11562, "creation_time": "2003-04-15T04:32:13Z", "is_private": false}]
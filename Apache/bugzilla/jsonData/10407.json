[{"count": 0, "tags": [], "text": "Product: \t\tJava Web Application\nOperating system:\tWindows NT/2000 server, Linux, FreeBSD\nWeb Server:\t\tIIS, Apache etc\nApplication server:\tTomcat 3.2.4 and above\nDatabase server:\tMySQL 3.23.49, MS-SQL, Oracle etc\nJava Architecture:\tJSP (presentation) + Java Bean (Business logic)\n\n\tWe are currently hosting our web application using Tomcat 4 with IIS 5 \non Windows 2000 server. We have also supplied our product to some of our \ncustomers who are hosting it on Linux using Tomcat 3.2.4 also. We have been \nfacing the following problem for quite some time now. As more and more people \nare visiting and browsing the site, the Java.exe/Tomcat.exe size keeps growing \nand finally we end up with \"Out of memory\" error. Even if we leave the server \ninactive for hours, the memory doesn't get released and the only option is to \nrestart the Tomcat server. We have posted this problem in many forums and in \nthe Tomcat bug database also (both 3.* and 4). But we didn't get any solutions \nand also we were told that the problem could lie with our application. \n\tSo, we decided to conduct a test with Tomcat example JSP pages, so as \nto see whether the memory is getting released properly with them at least. The \nmemory.jsp contains the following code and all the example pages used had the \nsame code embedded to find out the memory usage.\n\nmemory.jsp:\n<%\ntry\n{\nout.println(\"<table border=1><tr><td>Total Memory \" + Runtime.getRuntime\n().totalMemory()/1000 +\" KB</td>\");\nout.println(\"<td>Memory in Use \"+((Runtime.getRuntime().totalMemory()-\nRuntime.getRuntime().freeMemory())/1000) +\" KB</td>\");\nout.println(\"<td>Thread Count \" + Thread.activeCount() + \"</td></tr></table>\");\n}\ncatch(Exception ex)\n{\n   out.println(ex);\n}\n%>\n\n\nFollowing is the result of the test done on Tomcat 4.03 as standalone server.\n\n\nName\t\t\t\t\tTotal memory\tUsed memory\tThreads\t\nmemory.jsp\t\t\t\t4026\t\t2744\t\t22\nexamples/jsp/num/numguess.jsp\t\t4026\t\t3464\t\t22\nexamples/jsp/num/numguess.jsp?guess=\t4026\t\t3704\t\t22\nexamples/jsp/dates/date.jsp\t\t4435\t\t3054\t\t22\nexamples/jsp/snp/snoop.jsp\u00b7\t\t4435\t\t3374\t\t22\nexamples/jsp/include/include.jsp\t4435\t\t3953\t\t22\nexamples/jsp/forward/forward.jsp\t4599\t\t3850\t\t22\nexamples/jsp/plugin/plugin.jsp\t\t4599\t\t4176\t\t22\nexamples/jsp/simpletag/foo.jsp\t\t4730\t\t2712\t\t22\nmemory.jsp\t\t\t\t4730\t\t2977\t\t22\nAfter 30 mins (session timeout)\t\t\nmemory.jsp\t\t\t\t4730\t\t3182\t\t22\n\n\tWe felt, as in our application, the memory used by Tomcat doesn't get \nreleased fully even for \nTomcat example JSP pages. We have repeated the same test many times, restarting \nTomcat, deleting work folder, clearing browser cache every time. We have even \ntried the same after restarting the machine. The pattern is exactly the same \nbarring variations of few bytes here and there. \n\t\tWe repeated the same test on Tomcat 3.2.4 and the results were \nsimilar. Only the figures were different. Then, we decided to conduct the same \ntest using JRun 3.1, so as to see whether the memory is getting released \nproperly with it at least.\n\nFollowing is the result of the test done on JRun 3.1 as standalone server.\n\n\nName\t\t\t\t\tTotal memory\tUsed memory\tThreads\t\n\t\nmemory.jsp\t\t\t\t2859\t\t2451\t\t2\nexamples/jsp/num/numguess.jsp\t\t3731\t\t2188\t\t4\nexamples/jsp/num/numguess.jsp?guess=\t3731\t\t2339\t\t4\nexamples/jsp/dates/date.jsp\t\t3870\t\t2150\t\t4\nexamples/jsp/snp/snoop.jsp\u00b7\t\t3870\t\t2472\t\t4\nexamples/jsp/include/include.jsp\t3870\t\t2010\t\t4\nexamples/jsp/forward/forward.jsp\t3870\t\t2273\t\t4\nexamples/jsp/plugin/plugin.jsp\t\t3870\t\t2006\t\t4\nexamples/jsp/simpletag/foo.jsp\t\t\t\nmemory.jsp\t\t\t\t3870\t\t2063\t\t4\nAfter 30 mins (session timeout)\t\t\nmemory.jsp\t\t\t\t3870\t\t1957\t\t2\n\n\tWe found out that the memory is getting released periodically and after \n30 minutes of inactivity the memory is totally released and even the thread \ncount is back to the original value. We have repeated the same test many times, \nrestarting JRun, deleting tmp folder, clearing browser cache every time. We \nhave even tried the same after restarting the machine. The pattern is exactly \nthe same barring variations of few bytes here and there. \n\n\tIs it a Tomcat bug? If so, how can we get over this problem? Because, \nwe need to support our application on Tomcat application server.", "attachment_id": null, "id": 18847, "creation_time": "2002-07-02T14:18:51Z", "time": "2002-07-02T14:18:51Z", "creator": "srikanth_s_india@hotmail.com", "bug_id": 10407, "is_private": false}, {"count": 1, "attachment_id": null, "creator": "bob@jadn.com", "is_private": false, "id": 20934, "time": "2002-08-12T21:34:04Z", "bug_id": 10407, "creation_time": "2002-08-12T21:34:04Z", "tags": [], "text": "\nIn short, I don't think this is a Tomcat bug. \n\nI think most modern operating systems allocate memory to a process, but\nprocesses dont (rarely) return memory back to the OS.  The standard malloc/free\nlibrary  can expand the amount of memory a proccess uses (by using sbrk()\ninstruction? - I am reaching back a few years here.), but most malloc/free\nlibaries don't ever return process space back to the OS.\n\n\n\n"}, {"count": 2, "tags": [], "text": "What you are reporting is not a bug, but here are some comments\nto help explain what you are seeing.\n\nTomcat Threads\n---------------\n\nMost all threads (except some tied to a specific Context) in Tomcat\nare never killed off, they are a resource which are reused.\n\nMemory Usage\n------------\n\nTotal memory usage is not controlled by Tomcat, it is controlled by the JVM.\nJava does have a System.gc() method to force garbage collection but it is\nnot recommended that applications do this, especially with modern JVM's\nlike those with HotSpot.  Tomcat 4 forces one GC, that is immediately after\nstartup just before it starts handling requests.\n\nThe memory usage for Tomcat varies depending on your applications and\nthe volume of requests handled.  The memory usage you see for the java\nJVM process is dependent upon the memory usage startup options you give\nto java.  Settings such as -Xms for minumum stack size -Xmx for maximum\nstack size -Xss for thread stack size, etc.  It is up to you to properly\ntune your java memory and gc startup options for the System, OS, and\napplications running in Tomcat.\n\nHere is a document which disucsses memory usage and gc:\n\nhttp://java.sun.com/docs/hotspot/gc/\n\nYou should also consider profiling Tomcat running your application\nusing tools like OptimizeIt or JProbe.", "is_private": false, "bug_id": 10407, "id": 20942, "time": "2002-08-13T03:51:53Z", "creator": "glenn@apache.org", "creation_time": "2002-08-13T03:51:53Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jeffwong50@hotmail.com", "text": "I encounter the same problem, the garbage collection is not done properly when \nI run Tomcat as a service in W2K but it seems to be ok when I do it in command \nprompt. Any suggestions ?", "count": 3, "id": 29237, "time": "2003-01-13T11:53:45Z", "bug_id": 10407, "creation_time": "2003-01-13T11:53:45Z", "is_private": false}, {"count": 4, "tags": [], "text": "Hi,\n     We tried calling System.gc() explicitly and it seems to work, at least in \nwindows. Hope this works for others too.\n\nregards, \n\nSrikanth. S", "is_private": false, "id": 30239, "creator": "srikanth_s_india@hotmail.com", "time": "2003-01-29T08:03:17Z", "bug_id": 10407, "creation_time": "2003-01-29T08:03:17Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 10407, "is_private": false, "text": "From the conversations in the comments I don't see any issues anymore. If there\nis an issue, please use the tomcat-user list to flush out the actual problem if\none still exists. The tomcat-user list readers are usually helpful in\nidentifying a  bug if one exists.", "id": 35542, "time": "2003-04-18T14:16:11Z", "creator": "funkman@joedog.org", "creation_time": "2003-04-18T14:16:11Z", "attachment_id": null}]
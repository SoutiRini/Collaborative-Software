[{"count": 0, "tags": [], "creator": "stamhankar@gmail.com", "attachment_id": null, "id": 145572, "time": "2011-04-05T18:45:59Z", "bug_id": 51026, "creation_time": "2011-04-05T18:45:59Z", "is_private": false, "text": "Steps to repro (written ad-hoc because the problem is very easy to describe): \n\nFile f = new File(\"c:/temp\");\nTarEntry x = new TarEntry(f);\nSystem.out.println(x.getSize());\n\nExpected result:\n0\n\nActual result:\nSometimes 0, sometimes 4096.\n\nThe reason is that File.length() behavior is undefined for directories.\n\nConsequence: you create a tar-ball with some directory tar-entries with a size of 4096. Then if you try to untar via TarInputStream, getNextEntry() actually skips 4k into the buffer to get to the next entry, when really the next entry is 0 bytes away (or something like that).\n\nWhy this doesn't affect ordinary mortals:\ntar'ing something incorrectly like this is fine with GNU tar for extraction; I'm guessing that gnu tar ignores the size field for directory tar entries.\n\nAnalogously, TarInputStream / TarEntry work fine when reading a properly generated tar-ball because a proper tar-ball won't have the 4k size value in tar-entries. One could argue that the fix should be in the TarEntry(File) constructor as well as TarInputStream.getNextEntry() so that the producer creates good tars and the consumer is tolerant of slightly bad tars."}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "The TarEntry constructor has been fixed about two years ago with svn revision 755231 - this is part of Ant 1.8.0.\n\nSince you seem to be using Ant's tar classes as a library let me suggest you take a look at Apache Commons Compress http://commons.apache.org/compress/ (which doesn't read tar archives with directories of a size > 0 properly either).", "id": 145715, "time": "2011-04-12T00:13:37Z", "bug_id": 51026, "creation_time": "2011-04-12T00:13:37Z", "is_private": false}, {"count": 2, "tags": [], "creator": "stamhankar@gmail.com", "attachment_id": null, "id": 145732, "time": "2011-04-12T17:50:09Z", "bug_id": 51026, "creation_time": "2011-04-12T17:50:09Z", "is_private": false, "text": "Umm... I don't think the TarEntry constructor has been fixed. When I look at TarEntry.java from the svn link you posted, it clearly shows on line 223: this.size = file.length();\n\nAlso, I tried using Ant 1.8.1 before filing the issue and managed to repro it there as well... although on further thought I may have only tested the untar'ing side of things (e.g. untar a tar-ball containing some dir entries with 4k size).\n\nSo this is still an open issue.\n\nAs for commons-compress: it's awesome that this logic has essentially been factored into a commons library like this. I will definitely move over to that. Thanks a ton for the tip!\n\n(In reply to comment #1)\n> The TarEntry constructor has been fixed about two years ago with svn revision\n> 755231 - this is part of Ant 1.8.0.\n> \n> Since you seem to be using Ant's tar classes as a library let me suggest you\n> take a look at Apache Commons Compress http://commons.apache.org/compress/\n> (which doesn't read tar archives with directories of a size > 0 properly\n> either)."}, {"count": 3, "tags": [], "bug_id": 51026, "text": "I just downloaded commons-compress, and I can see that the TarArchiveEntry(File, String) constructor does the right thing, so I don't have to work around this issue (or fix it in Ant) at this point.\n\nAnt should use commons-compress rather than keeping its current impl.\n\n(In reply to comment #2)\n> Umm... I don't think the TarEntry constructor has been fixed. When I look at\n> TarEntry.java from the svn link you posted, it clearly shows on line 223:\n> this.size = file.length();\n> \n> Also, I tried using Ant 1.8.1 before filing the issue and managed to repro it\n> there as well... although on further thought I may have only tested the\n> untar'ing side of things (e.g. untar a tar-ball containing some dir entries\n> with 4k size).\n> \n> So this is still an open issue.\n> \n> As for commons-compress: it's awesome that this logic has essentially been\n> factored into a commons library like this. I will definitely move over to that.\n> Thanks a ton for the tip!\n> \n> (In reply to comment #1)\n> > The TarEntry constructor has been fixed about two years ago with svn revision\n> > 755231 - this is part of Ant 1.8.0.\n> > \n> > Since you seem to be using Ant's tar classes as a library let me suggest you\n> > take a look at Apache Commons Compress http://commons.apache.org/compress/\n> > (which doesn't read tar archives with directories of a size > 0 properly\n> > either).", "id": 145738, "time": "2011-04-12T19:33:04Z", "creator": "stamhankar@gmail.com", "creation_time": "2011-04-12T19:33:04Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 145879, "time": "2011-04-20T01:19:55Z", "bug_id": 51026, "creation_time": "2011-04-20T01:19:55Z", "is_private": false, "text": "(In reply to comment #2)\n> Umm... I don't think the TarEntry constructor has been fixed. When I look at\n> TarEntry.java from the svn link you posted, it clearly shows on line 223:\n> this.size = file.length();\n\nMy fault, I gave you the wrong end of the revision diff I was looking at, the\nconstructor has been fixed in svn revision 755473\n\n> Also, I tried using Ant 1.8.1 before filing the issue and managed to repro it\n> there as well... although on further thought I may have only tested the\n> untar'ing side of things (e.g. untar a tar-ball containing some dir entries\n> with 4k size).\n\nThe untaring side hasn't been adapted (and I don't think commons-compress\ndeals with it either.\n\n(In reply to comment #3)\n\n> Ant should use commons-compress rather than keeping its current impl.\n\nhttp://ant.apache.org/antlibs/compress/\n\nFor Ant core we like to keep the number of our dependencies as small as possible."}]
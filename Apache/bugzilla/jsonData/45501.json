[{"count": 0, "tags": [], "text": "Created attachment 22329\npatch for adding \"bybusy\" lbmethod to mod_proxy_balancer, plus docs\n\nA new lbmethod (bybusy) that counts pending requests per worker, to ensure that workers (like Mongrel) that queue requests are evenly loaded at all times.\n\nWe've been using this in our live environment (see somewhat wordy link above) and it's helped smooth out performance a lot... I've gone from getting anything up to a dozen (generally spurious) Nagios alerts a night to none, so I thought it worth contributing back to Apache in the hope that others might find it useful.\n\n[Excuse blog post excerpt]\nFor each proxy worker thread in the web server, increment a \"busy\" counter when assigning a request to that worker. In the post-request hook, decrement the counter again. When choosing a worker, simply pick the worker with the lowest \"busy\" value.\n\nUse the \"byrequest\" method as a tie-breaker between workers with identical \"busy\" values (most frequently, when they are idle). So we get the moment-to-moment balancing we wanted to start with, but also the historical balancing that we had originally and which leads to nicely-balanced log files.\n[end excerpt]\n\nThe \"busy\" counter is already present in the worker's scoreboard (and has been since at least 2.2.3, which is as far back as I checked), but is unused until now.", "attachment_id": 22329, "id": 119113, "creator": "joelgluth@yahoo.com.au", "time": "2008-07-30T03:29:03Z", "bug_id": 45501, "creation_time": "2008-07-30T03:29:03Z", "is_private": false}, {"count": 1, "tags": [], "text": "Index: modules/proxy/mod_proxy_balancer.c\n===================================================================\n--- modules/proxy/mod_proxy_balancer.c\t(revision 680955)\n+++ modules/proxy/mod_proxy_balancer.c\t(working copy)\n@@ -367,7 +367,10 @@\n         }\n #endif\n     }\n+\n+    candidate->s->busy++;\n\nThis the wrong location to incerease the counter. It should be done in line\n540 instead:\n\n            apr_table_setn(r->subprocess_env, \"BALANCER_ROUTE_CHANGED\", \"1\");\n        }\n        *worker = runtime;\n    }\n\n+  (*worker)->s->busy++;\n\n    /* Add balancer/worker info to env. */\n    apr_table_setn(r->subprocess_env,\n                   \"BALANCER_NAME\", (*balancer)->name);\n    apr_table_setn(r->subprocess_env,\n                   \"BALANCER_WORKER_NAME\", (*worker)->name);\n    apr_table_setn(r->subprocess_env,\n                   \"BALANCER_WORKER_ROUTE\", (*worker)->s->route);\n\n\n\nstatic int rewrite_url(request_rec *r, proxy_worker *worker,\n@@ -598,7 +601,9 @@\n \n #endif\n \n+    worker->s->busy--;\n\nYou should check if worker is NULL here before doing the decrease\n\n     return OK;\n+\n }\n ", "attachment_id": null, "id": 119119, "creation_time": "2008-07-30T05:39:03Z", "time": "2008-07-30T05:39:03Z", "creator": "rpluem@apache.org", "bug_id": 45501, "is_private": false}, {"count": 2, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "text": "Sharing some experience from mod_jk: incrementing/decrementing could lead to incorrect counters. There might be subtle differences here, why it could be correct in the mod_proxy_balancer setup, but with mod_jk and 64 Bit counters in shared memory we noticed cases, were the busy counter under load slowly got an offset (e.g. ended up in getting negative). Not sure, if it was because of 64 Bit counters (non atomic), shared memory or maybe other factors like graceful restarts. We ended up in checking busy for being >0 before decrementing it in order to at least limit damage of one of the two possible increment/decrement inconsistencies.", "id": 119120, "time": "2008-07-30T06:08:09Z", "bug_id": 45501, "creation_time": "2008-07-30T06:08:09Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "joelgluth@yahoo.com.au", "attachment_id": 22331, "id": 119123, "time": "2008-07-30T07:48:12Z", "bug_id": 45501, "creation_time": "2008-07-30T07:48:12Z", "is_private": false, "text": "Created attachment 22331\npatch for adding \"bybusy\" lbmethod to mod_proxy_balancer, plus docs\n\nFeedback from Reudiger Pluem noted, and tabs excised.\n\nI'm hoping that int increment and decrement can be relied on to be atomic (hopefully I'll never need 64-bit \"busy\" values), and that httpd can be relied on to only call the pre- and post-request at sane times."}, {"attachment_id": null, "tags": [], "bug_id": 45501, "is_private": false, "count": 4, "id": 119892, "time": "2008-08-18T08:50:41Z", "creator": "jim@apache.org", "creation_time": "2008-08-18T08:50:41Z", "text": "Thanks for the patch. I will fold in to allow people to update/enhance in real time."}]
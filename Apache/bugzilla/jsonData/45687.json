[{"count": 0, "tags": [], "text": "Created attachment 22480\nPatch for mod_charset_lite.c\n\nWith mod_charset_lite in use, some error responses may not be returned\ncorrectly.  \n\nFor example, when a request body exceeds the configured LimitRequestBody, a 413\nshould be returned, but with mod_charset_lite in use, instead a 403 might be\nreturned (if the URI is forbidden).\n\nTo reproduce:\n\nBuild with mod_charset_lite (I don't think it gets built by default except on\nz/OS).\n\nInclude something like this in the configuration:\n\nLoadModule charset_lite_module modules/mod_charset_lite.so\n<Location />\nCharsetSourceEnc ISO8859-1\nCharsetDefault ASCII\nLimitRequestBody 2048\n</Location>\n\nSubmit a POST with a body over 2048 bytes.  The response status should be 413,\nbut it will be something else (e.g. 404).\n\n\nThe underlying cause is mod_charset_lite not treating metadata buckets\nspecially.  When a request body size limit is exceeded, for example, the error\ncode is communicated by adding an error bucket to the brigade.  When it gets to\nmod_charset_lite, the module reads the data from it (none) and discards it;\nthus the error code never gets to the end of the filter chain and is not sent\nback to the client.\n\nI've confirmed the problem on httpd-trunk on Linux, revision 688719.  It has\nalso been seen on older releases on z/OS.  \n\nIt did not show up in a bugzilla search.\n\nI've come up with a fix, and verified that it compiles without warning on Linux\nand solves the problem, so that a 413 response is sent back in the scenario\ndescribed above.\n\nA patch is attached for httpd-trunk.  I'd welcome comments on it.", "is_private": false, "id": 120077, "creator": "poirier@pobox.com", "time": "2008-08-25T08:37:27Z", "bug_id": 45687, "creation_time": "2008-08-25T08:37:27Z", "attachment_id": 22480}, {"count": 1, "tags": [], "text": "Hi, Dan.\n\nI looked very briefly.  There's an fprintf to stderr to axe.  I didn't follow why in one place we search the brigade for metadata and move it to the beginning of the brigade we return to the caller.\n\nIt would be nice to avoid the extra brigade creation and sending the metadata down separately, but that requires some fixing of existing code.  (no time here)\n", "is_private": false, "id": 120120, "creation_time": "2008-08-26T12:42:08Z", "time": "2008-08-26T12:42:08Z", "creator": "trawick@apache.org", "bug_id": 45687, "attachment_id": null}, {"count": 2, "tags": [], "text": "Thanks for catching the fprintf.\n\nThe logic in charset_lite was fundamentally different on input and\noutput.\n\nOn input (xlate_in_filter, xlate_brigade), the brigade is our output.  We're pulling data from upstream, translating it, and adding it to the brigade.  If we find a metadata bucket in what we've pulled, we need to pass it on to the brigade, keeping it in the right order relative to the translated data.\n\nThe logic in xlate_in_filter is a bit confusing.  It either pulls data or finds some carried over from the previous call in ctx->bb.  Either way, it puts it on the brigade, then calls xlate_brigade.  xlate_brigade goes through the brigade, removing buckets, translating the data, and putting the translated data into a buffer.  Then when control returns to xlate_in_filter, the translated data is put into a new bucket and put onto the brigade to be returned to the caller.\n\nReturning from xlate_brigade when we come to metadata avoids \"reading\" the bucket and throwing it away, but then xlate_in_filter sees we haven't emptied the brigade and moves the remaining buckets over to ctx->bb so they can be processed next time, including any metadata.  If we left the metadata there, we'd get stuck in a loop doing this over and over, so we need to move it back to bb before returning, but we should put the data we've processed onto the end of bb first so the metadata stays in order relative to the data.\n\nOn EOS, we just skip moving the remaining bucket over to ctx->bb, but for general metadata, we don't know there aren't more data buckets later (I don't think we know that, anyway), so if we left the brigade alone, any data after the metadata would be passed up the filter chain untranslated.\n\nPerhaps a simpler change in xlate_in_filter would be, immediately after the successful return from xlate_brigade, to see if the head bucket is metadata and move it aside for the moment.  We know there's only one because we return from xlate_brigade as soon as we see one.  Then after putting any remaining untranslated data onto ctx->bb, put the metadata back onto the head of the brigade.  The translated data would then be put in front of it, and everything would be in the right order upon returning the brigade to our caller.  Thoughts?\n\nThe output side is simpler.  We pull buckets off the brigade, translate their data, and push it downstream.  So all we need to do is recognize that we have metadata and push it downstream as-is instead of translating the data and discarding the bucket.  If metadata is frequent enough that it would be worthwhile optimizing the brigade creation to pass it downstream, we could look at that, but my impression is that metadata isn't that frequent.\n", "is_private": false, "bug_id": 45687, "id": 120136, "time": "2008-08-27T04:50:17Z", "creator": "poirier@pobox.com", "creation_time": "2008-08-27T04:50:17Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Created attachment 22497\nUpdated patch for mod_charset_lite\n\nI've updated the patch, killing the fprintf(stderr).  No other changes.", "attachment_id": 22497, "id": 120188, "creator": "poirier@pobox.com", "time": "2008-08-28T10:47:46Z", "bug_id": 45687, "creation_time": "2008-08-28T10:47:46Z", "is_private": false}, {"count": 4, "tags": [], "text": "In general you're WAAY ahead of me and I don't have much energy to spare on this...  if somebody with time avail is watching this space, pick it up and run\n\nAnother note on your patch:\n\nin xlate_brigade(), instead of adding a separate check, change the\n\nb == APR_BRIGADE_SINTENEL(bb) || APR_BUCKET_IS_EOS(b)\n\nto\n\nb == APR_BRIGADE_SENTINEL(bb) || APR_BUCKET_IS_METADATA(b)\n\nsince EOS is a type of METADATA; we just weren't handling the general condition here\n\nI withdraw my prior comment about \"searching\" for metadata; I now see that it is just picking off an arbitrary number of metadata buckets from the start;\nit should function the same just picking off the first, in case that makes it simpler to read\n\nfwiw, xlate_brigade() should work whether or not the caller is xlate_in_filter() (or did at one time)\n", "attachment_id": null, "bug_id": 45687, "id": 120216, "time": "2008-08-29T12:35:29Z", "creator": "trawick@apache.org", "creation_time": "2008-08-29T12:35:29Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 22521\nUpdated patch for mod_charset_lite\n\nBased on that suggestion I was able to shrink the patch down some.\n\nI don't believe this patch reduces the generality of xlate_brigade().", "attachment_id": 22521, "bug_id": 45687, "id": 120311, "time": "2008-09-03T06:42:50Z", "creator": "poirier@pobox.com", "creation_time": "2008-09-03T06:42:50Z", "is_private": false}, {"count": 6, "tags": [], "text": "reviewed the patch and Jeff's comments.  \n\nregarding the change to the input filter after the xlate_brigade call, it will work correctly (i.e. prevent an infinite loop) if one metadata bucket or n metadata buckets are picked off the the front of ctx->bb.  but the only difference to the source code I see is using \"while\" vs. \"if\", so I don't think there is any significant improvement in readability either way.", "attachment_id": null, "id": 120404, "creator": "gregames@apache.org", "time": "2008-09-05T08:57:11Z", "bug_id": 45687, "creation_time": "2008-09-05T08:57:11Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 45687, "attachment_id": 22546, "is_private": false, "id": 120498, "time": "2008-09-09T06:11:46Z", "creator": "poirier@pobox.com", "creation_time": "2008-09-09T06:11:46Z", "text": "Created attachment 22546\nFix for send_bucket_downstream() to reuse a single temporary brigade\n\nRuediger Pluem commented on send_bucket_downstream():\n\n  This is bad. Please store the brigade in the filter context and\n  reuse it, by cleaning it. See also\n  http://httpd.apache.org/docs/trunk/en/developer/output-filters.html#filtering\n  The same error is in send_downstream and IMHO they can share the\n  same brigade.\n\nThis patch fixes send_bucket_downstream().  It doesn't change\nsend_downstream(); what I'd like to do instead is just have\nsend_downstream() call send_bucket_downstream() and eliminate\nsome duplicated code."}, {"text": "Created attachment 22548\nFix for send_downstream() to use send_bucket_downstream()\n\nThis patch (which depends on the previous one) changes send_downstream()\nto use send_bucket_downstream(), instead of allocating a new temporary\nbrigade each time it's called.", "tags": [], "creator": "poirier@pobox.com", "attachment_id": 22548, "count": 8, "id": 120502, "time": "2008-09-09T07:55:25Z", "bug_id": 45687, "creation_time": "2008-09-09T07:55:25Z", "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 45687, "is_private": false, "id": 120504, "time": "2008-09-09T13:00:12Z", "creator": "rpluem@apache.org", "creation_time": "2008-09-09T13:00:12Z", "tags": [], "text": "All patches committed in revisions r692567, r693564 and r693577:\n\nhttp://svn.apache.org/viewvc?rev=692567&view=rev\nhttp://svn.apache.org/viewvc?rev=693564&view=rev\nhttp://svn.apache.org/viewvc?rev=693577&view=rev"}, {"count": 10, "tags": [], "creator": "rpluem@apache.org", "is_private": false, "text": "Backported to 2.2.10", "id": 121564, "time": "2008-10-15T12:55:56Z", "bug_id": 45687, "creation_time": "2008-10-15T12:55:56Z", "attachment_id": null}]
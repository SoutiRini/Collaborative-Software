[{"count": 0, "tags": [], "bug_id": 30542, "attachment_id": null, "id": 61719, "creation_time": "2004-08-09T15:59:06Z", "time": "2004-08-09T15:59:06Z", "creator": "apache@goots.org", "text": "Modifying our current Ant build system to work with IBM's J9 JVM. This is a CDC\nJVM which does not support all the command line options that javac supports. I\nmanaged to almost get it working using the standard options - \nI had to set sourcepath to \"\" (it doesn't support that flag), specify the\nexecutable, fork the process and use compiler=javac1.1 so that it doesn't use\nthe @files flag as that also isn't supported.\nThe one issue I found (currently I have hacked the source) was that when the\nDefaultCompilerAdapter::executeExternalCompile function puts together the\ncommand line it sets the working directory to the project base dir.\nDue to the fact j9 does not support sourcepath flag, it is best to run it from\nthe root of your sourcetree so that any implicitly needed files are\nautomatically found. \nTherefore it would be really handy if there was a way to set the working\ndirectory e.g. perhaps if sourcepath not set, and src is set then set working\ndir to that.", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 30542, "is_private": false, "id": 61721, "time": "2004-08-09T16:13:08Z", "creator": "stevel@apache.org", "creation_time": "2004-08-09T16:13:08Z", "tags": [], "text": "The tactic in this situation has to be to write your own compiler adapter; that\nis what the facade pattern is there for.\n\nIs what you are encountering a fundamental missing bit of the facade?"}, {"attachment_id": null, "tags": [], "creator": "apache@goots.org", "is_private": false, "count": 2, "id": 61723, "time": "2004-08-09T16:33:23Z", "bug_id": 30542, "creation_time": "2004-08-09T16:33:23Z", "text": "\nIt wouldn't be any major problem to write an adapter to modify\nexecuteExternalCompile to do \n<                 exe.setWorkingDirectory(project.getBaseDir());\n---\n>                 if (compileSourcepath.size() == 0) {\n>                    exe.setWorkingDirectory(new File (src.toString ()));\n>                 } else {\n>                    exe.setWorkingDirectory(project.getBaseDir());\n>                 }\n\nI guess then its more of a question - when executing an external process using\nexec we can set the working directory using dir - so why not be able to set the\nworking directory when forking javac? \nThanks!"}, {"count": 3, "tags": [], "creator": "apache@goots.org", "attachment_id": null, "id": 61823, "time": "2004-08-11T13:46:35Z", "bug_id": 30542, "creation_time": "2004-08-11T13:46:35Z", "is_private": false, "text": "In the end I have got it working by implementing my own compiler adapter. \n\nIt would be handy if the fork attribute stated that the working directory is set\nto the project basedir in the doc. "}, {"count": 4, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 72240, "time": "2005-03-11T22:04:57Z", "bug_id": 30542, "creation_time": "2005-03-11T22:04:57Z", "is_private": false, "text": "I don't see anyplace to put such a warning, except perhaps in the Javadoc of\nDefaultCompilerAdapter, where it would be correct."}, {"count": 5, "tags": [], "bug_id": 30542, "is_private": false, "text": "By that I mean to refer to the fact that forking is not supported for non-Sun\ncompilers, according to Javac's code.", "id": 72241, "time": "2005-03-11T22:06:50Z", "creator": "mbenson@apache.org", "creation_time": "2005-03-11T22:06:50Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "apache@goots.org", "attachment_id": null, "is_private": false, "id": 72457, "time": "2005-03-15T19:03:21Z", "bug_id": 30542, "creation_time": "2005-03-15T19:03:21Z", "text": "Yes, I see that bit in the code. However as far as I can see that is not\nmentioned in the main documentation - it implies that one can fork with e.g. the\njikes compiler. "}, {"count": 7, "tags": [], "text": "\"when executing an external process using exec we can set the working directory\nusing dir - so why not be able to set the working directory when forking javac?\"\n- because there is no *reason* to set the working directory on a correctly\nfunctioning compiler if all paths passed to on the commandline are absolute; it\nhas no effect (if it does, it may be a bug in the compiler). It is only known to\nhave an effect on the J9 compiler, I guess, so this detail of interfacing with\nthat compiler is best handled in that compiler adapter only. In fact I'm not\nreally sure what the purpose of the line\n\nexe.setWorkingDirectory(project.getBaseDir());\n\nin DefaultCompilerAdapter actually is; IMHO it could be removed. It was added by\nStefan in 2000, to Javac.java 1.31, for no reason mentioned in the commit\nmessage - and only to executeJikesCompile; also appears in Jikes.java 1.5.\n\nI propose that this issue be WONTFIX, but no strong opinion. Of course the\ncustom compiler adapter for J9 could be a useful patch independently of this.", "is_private": false, "bug_id": 30542, "id": 72998, "time": "2005-03-29T17:30:49Z", "creator": "jglick@apache.org", "creation_time": "2005-03-29T17:30:49Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 118716, "time": "2008-07-16T07:51:49Z", "bug_id": 30542, "creation_time": "2008-07-16T07:51:49Z", "is_private": false, "text": "I don't really recall it exactly, but I think Execute required a working directory in its early incarnations.  The patch Jesse cites is the one that made javac use the (by then) new execution framework in the first place.\n\nNick, would you be willing/able to contribute your adapter?\n\nI agree that the working directory should be irrelevant for a working compiler, but that doesn't help people who are forced to use a broken one.\n\nThe working directory is set for any forked compiler that uses executeExternalCompile - which basically means any forked compiler.  I'll add a note to the javadocs of DefaultCompilerAdapter and javac's doc page."}]
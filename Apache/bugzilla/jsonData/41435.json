[{"count": 0, "tags": [], "text": "I'm running into a problem with mod_ldap on Windows.  When I try to authenticate\nwithout passing in a username, I get a 500 server error.  Since the browser\ndoesn't get back a 401, it caches the user's credentials and I have to restart\nthe browser session in order to attempt to login again.\nThis is only happening on Windows, so I'm sure it's a difference (bug?) in the\nMicrosoft LDAP SDK.  Below is a proposed fix on top of Apache 2.2.4.  I added\nthe #if APR_HAS_MICROSOFT_LDAPSDK block.\n\nmodules/ldap/util_ldap.c (line 933):\n    /* try do the search */\n    if ((result = ldap_search_ext_s(ldc->ldap,\n                                    (char *)basedn, scope,\n                                    (char *)filter, attrs, 0,\n                                    NULL, NULL, NULL, -1, &res))\n            == LDAP_SERVER_DOWN)\n    {\n        ldc->reason = \"ldap_search_ext_s() for user failed with server down\";\n        uldap_connection_unbind(ldc);\n        goto start_over;\n    }\n\n#if APR_HAS_MICROSOFT_LDAPSDK\n    if ( result == LDAP_FILTER_ERROR )\n    { // no username was supplied, so fail with invalid credentials\n        /* failure? if so - return */\n        ldc->reason = \"ldap_search_ext_s() to search for user failed\";\n        ldap_msgfree(res);\n        uldap_connection_unbind(ldc);\n        return LDAP_INVALID_CREDENTIALS;\n    }\n#endif\n\n    /* if there is an error (including LDAP_NO_SUCH_OBJECT) return now */\n    if (result != LDAP_SUCCESS) {\n        ldc->reason = \"ldap_search_ext_s() for user failed\";\n        return result;\n    }\n\n\n\nIt would be great if this patch or something with similar affect could be\nincluded in the next Apache 2.2 release.  Thanks.\n,\nJosh.", "is_private": false, "id": 98368, "creator": "jfenlason@ptc.com", "time": "2007-01-22T10:42:40Z", "bug_id": 41435, "creation_time": "2007-01-22T10:42:40Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Unfortunately a platform specific #ifdef in util_ldap.c wouldn't be \nappropriate.  The easiest fix would be to add another result check at the end \nof authn_ldap_check_password() in mod_authnz_ldap.c.  However, the purpose of \nthe #ifdef's there was to handle the fact that not all platforms supported the \nmacro LDAP_SECURITY_ERROR() that checked a specific set of security related \nresult codes.  Adding a check for LDAP_FILTER_ERROR doesn't seem quite right \nsince that result code isn't really a security code even though it would solve \nthe problem for Win32.  The other solution would be to abstract all of the \nLDAP result codes into a set of APR_LDAP_xxx codes which is probably too big \nof a changed for 2.2.x.\n", "attachment_id": null, "bug_id": 41435, "id": 98369, "time": "2007-01-22T11:56:09Z", "creator": "bnicholes@apache.org", "creation_time": "2007-01-22T11:56:09Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 41435, "attachment_id": null, "id": 98855, "time": "2007-01-31T14:47:16Z", "creator": "bnicholes@apache.org", "creation_time": "2007-01-31T14:47:16Z", "is_private": false, "text": "There is another alternative.  The root of the problem is that the filter that \nis being built can be interpreted by the Windows SDK as invalid if the user id \nattribute is nothing.  The function that creates the filter, \nauthn_ldap_build_filter(), already has an #ifdef for the microsoft ldap sdk.  \nCan you patch the code within the #ifdef to make sure that an invalid filter \nfor the microsoft sdk is never produced?  If so, then all of the error \nchecking will just fall into place and there won't be a special case for \nWindows when checking for a failed login. \n\nIn reality an invalid filter should result in a general error rather than an \nauthentication failure.  A truely invalid filter could be the result of a bad \nfilter being passed in on the LDAP Url.  If we added the special case to check \nfor LDAP_INVALID_FILTER that was equivalent to a failed login, then a truely \ninvalid filter would be reported incorrectly."}, {"count": 3, "tags": [], "text": "Is there a valid use case for ever accepting a blank username? A possible\nworkaround might be to reject blank usernames entirely.\n", "attachment_id": null, "id": 111142, "creator": "minfrin@sharp.fm", "time": "2007-11-27T08:45:17Z", "bug_id": 41435, "creation_time": "2007-11-27T08:45:17Z", "is_private": false}]
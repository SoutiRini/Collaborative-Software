[{"count": 0, "tags": [], "bug_id": 58454, "attachment_id": 33139, "text": "Created attachment 33139\nPatch to make it work as suggested in the bug\n\nWhile trying to adopt the mod_logio to our needs we found a bug (that may not be a bug at all, but just a misunderstanding in the principles of how the module works and what it counts): when the requests are being sent using encrypted connection (SSL/TLS), the ^FB shows nothing (dash sign, \"-\") in the log.\n\nAfter a small research of the sources of mod_logio, I noticed a few things (the sources was obtained from latest 2.4.16 tarball):\n1. In the function ap_logio_add_bytes_out the time of the \"request is fully received\" event \"cf->r->request_time\" is being used to determine the difference between \"request read\" and \"first response byte was sent to the client\", which turns out not to be correct, since the time \"cf->r->request_time\" is being set when the first line of the request (like \"POST / HTTP/1.1\") was read by the server.\n2. The function ap_logio_add_bytes_out does not take into consideration that the SSL/TLS handshake is not a response to the client's request, but a data that preceeds the client's request. Hereby, it sets the cf->first_byte_seen to 1, even though the request was not read by that time.\n\nHere's my understanding of how it should work:\n1. When the logio_post_read_request being called, it should also set the TTFB request time to current time (apr_time_now)\n2. The function ap_logio_add_bytes_out should check that the request cf->r is not null BEFORE looking into the cf->first_byte_seen\n\nI think it is quite possible that I misunderstood the idea of ^FB logging, and the way it should work. Anyway, I attached the patch for mod_logio.c to make it work the way I described in case there\u2019s really a bug in the module.", "id": 185464, "time": "2015-09-24T06:55:25Z", "creator": "k.j.chernov@gmail.com", "creation_time": "2015-09-24T06:55:25Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58454, "attachment_id": null, "text": "Thanks for the report.\n\nRe part 1 -- I don't really see the necessity for the extra apr_time_now() to start the timer when the headers are read vs. the request line. Even in cases where it makes a practical difference, I'm not sure which way is preferred.  \n\nWill quickly test #2 and commit.", "id": 185471, "time": "2015-09-24T13:30:14Z", "creator": "covener@gmail.com", "creation_time": "2015-09-24T13:30:14Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58454, "text": "Eric, thank you very much for the response.\n\nAs for part 1, the most important thing is that when you have a very huge POST request (approx. 500KB-1MB or greater), it takes much more time to read the whole request than to read the first line of the request.\n\nIn our case, that is the reason why we need to use this module and that feature (TTFB) -- to figure out whether the request was serving for too long because of network (slow connection to the client) or our applications.\nAlso, the client may slow down after sending the first line because of some network issues, and without that feature it would be very hard to figure out whether there was a network issue or not.", "id": 185472, "time": "2015-09-24T13:37:27Z", "creator": "k.j.chernov@gmail.com", "creation_time": "2015-09-24T13:37:27Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58454, "text": "(In reply to Konstantin J. Chernov from comment #2)\n> Eric, thank you very much for the response.\n> \n> As for part 1, the most important thing is that when you have a very huge\n> POST request (approx. 500KB-1MB or greater), it takes much more time to read\n> the whole request than to read the first line of the request.\n\nDid you observe this? Normally in apache, the POST body is not read until much later, when the \"handler\" (mod_proxy, mod_cgi, etc) gets control.  IOW it should not affect the difference between r->request_time and post_read_request() (request line and headers only)", "id": 185473, "time": "2015-09-24T13:40:40Z", "creator": "covener@gmail.com", "creation_time": "2015-09-24T13:40:40Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 58454, "attachment_id": null, "id": 185474, "time": "2015-09-24T13:58:20Z", "creator": "k.j.chernov@gmail.com", "creation_time": "2015-09-24T13:58:20Z", "is_private": false, "text": "(In reply to Eric Covener from comment #3)\n> Did you observe this? Normally in apache, the POST body is not read until\n> much later, when the \"handler\" (mod_proxy, mod_cgi, etc) gets control.  IOW\n> it should not affect the difference between r->request_time and\n> post_read_request() (request line and headers only)\n\nI observed many times the situations where the headers was sent with delay after the first request line.\nAs for the situation with POST body being read after triggering post_read_request - you are right, I guess I misunderstood the way it works, and I do apologize for this."}, {"count": 5, "tags": [], "bug_id": 58454, "text": "I have stumbled on some other potential issues with short responses over SSL that might block action on this for a little bit.", "id": 185475, "time": "2015-09-24T15:08:42Z", "creator": "covener@gmail.com", "creation_time": "2015-09-24T15:08:42Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "text": "It seems this has been fixed in trunk with r1705099 and r1705134 and was backported to 2.4.17 in r1705666. It is now part of version 2.4.17.", "id": 185924, "time": "2015-10-25T12:10:35Z", "bug_id": 58454, "creation_time": "2015-10-25T12:10:35Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 50955, "text": "When attempt to extract text from a file error output:\n\njava.lang.IllegalStateException: Told we're for characters 0 -> 173225, but actually covers 173211 characters!\n\tat org.apache.poi.hwpf.model.TextPiece.<init>(TextPiece.java:50)\n\tat org.apache.poi.hwpf.model.TextPieceTable.<init>(TextPieceTable.java:95)\n\tat org.apache.poi.hwpf.model.ComplexFileTable.<init>(ComplexFileTable.java:54)\n\tat org.apache.poi.hwpf.HWPFOldDocument.<init>(HWPFOldDocument.java:68)\n\tat org.apache.poi.hwpf.HWPFOldDocument.<init>(HWPFOldDocument.java:42)\n\nHere's the source code, which I am trying to extract text from a file:\n\npublic Boolean parseFile(String pathToFile) {\n        InputStream isr = null;\n        try {\n            isr = new FileInputStream(pathToFile);\n            WordExtractor word = new WordExtractor(isr);\n            String fileContent = \"\";\n            String[] paragraphes = word.getParagraphText();\n            for (String paragraph : paragraphes) {\n                fileContent += \" \" + paragraph;\n            }\n            AddDataToIndex.class.newInstance().doAddData(fileContent, pathToFile);\n            return true;\n        } catch (OldWordFileFormatException ex) {\n            return parseWord6(pathToFile);\n\n        } catch (Exception ex) {\n            Vars.logger.fatal(ex);\n            return false;\n        } finally {\n            try {\n                isr.close();\n            } catch (IOException ex) {\n                Vars.logger.fatal(ex);\n            }\n        }\n    }\n\n    private Boolean parseWord6(String pathToFile) {\n        FileInputStream fis = null;\n        try {\n            File docFile = new File(pathToFile);\n            fis = new FileInputStream(docFile.getAbsolutePath());\n            POIFSFileSystem pfs = new POIFSFileSystem(fis);\n            HWPFOldDocument doc = new HWPFOldDocument(pfs);\n            Word6Extractor docExtractor = new Word6Extractor(doc);\n            return true;\n        } catch (Exception ex) {\n            Vars.logger.fatal(\"Error: \", ex);\n            return false;\n        } finally {\n            try {\n                fis.close();\n            } catch (IOException ex) {\n                Vars.logger.fatal(\"Error\", ex);\n            }\n        }\n    }\n\nFile, which I tried to parse - attached.", "id": 145190, "time": "2011-03-22T12:48:52Z", "creator": "forpdfsending@gmail.com", "creation_time": "2011-03-22T12:48:52Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50955, "text": "Created attachment 26789\nFile that does not parse.\n\nFile that does not parse.", "id": 145191, "time": "2011-03-22T12:51:46Z", "creator": "forpdfsending@gmail.com", "creation_time": "2011-03-22T12:51:46Z", "is_private": false, "attachment_id": 26789}, {"count": 2, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 147435, "time": "2011-06-24T08:27:32Z", "creator": "yegor@dinom.ru", "creation_time": "2011-06-24T08:27:32Z", "is_private": false, "text": "Still have the problem in trunk.\n\nYegor"}, {"count": 3, "tags": [], "creator": "vlsergey@gmail.com", "attachment_id": null, "text": "This problem is related to text character-detection in Word95. It doesn't have native unicode text support and stores all files in 8-bit encoding (not Windows-1252).\n\nNeed to figure a way to correctly extract source text encoding from Word 95 files.", "id": 147849, "time": "2011-07-09T14:54:40Z", "bug_id": 50955, "creation_time": "2011-07-09T14:54:40Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 27597\nStill have the problem in trunk (r1175705).\n\n[...]\nat org.apache.poi.hwpf.model.TextPiece.<init>(TextPiece.java:73)\nat org.apache.poi.hwpf.model.TextPieceTable.<init>(TextPieceTable.java:111)\nat org.apache.poi.hwpf.model.ComplexFileTable.<init>(ComplexFileTable.java:70)\n[...]", "attachment_id": 27597, "bug_id": 50955, "id": 149757, "time": "2011-09-26T10:15:20Z", "creator": "pablo.queixalos@polyspot.com", "creation_time": "2011-09-26T10:15:20Z", "is_private": false}, {"count": 5, "tags": [], "creator": "vlsergey@gmail.com", "attachment_id": null, "text": "*** Bug 51946 has been marked as a duplicate of this bug. ***", "id": 163201, "time": "2012-11-05T15:54:37Z", "bug_id": 50955, "creation_time": "2012-11-05T15:54:37Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 177365, "time": "2014-08-26T05:23:17Z", "creator": "mfazal_rehman@hotmail.com", "creation_time": "2014-08-26T05:23:17Z", "is_private": false, "text": "Any updated on this bug, since i am getting the same error.\n\nPlease suggest if some workaround available. I am wondering this bus is in new state since 2012."}, {"count": 7, "tags": [], "text": "*** Bug 60936 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 198114, "creator": "tallison@mitre.org", "time": "2017-03-31T18:37:10Z", "bug_id": 50955, "creation_time": "2017-03-31T18:37:10Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 198116, "time": "2017-03-31T18:37:44Z", "creator": "tallison@mitre.org", "creation_time": "2017-03-31T18:37:44Z", "is_private": false, "text": "*** Bug 60942 has been marked as a duplicate of this bug. ***"}, {"count": 9, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "text": "I figured out how to read the old font table which includes codepage info.  This doesn't solve all of our problems, but it helps.  Via testing with OpenOffice, I found that I can't have two different codepages in one document...that may be a feature of OpenOffice and not reality, but this hack/heuristic works with all files attached here, TIKA-2313 and files generated with OpenOffice.\n\nSo, the current temporary solution is to read through the font table and pick the codepage that isn't \"default\" or \"symbol.\"\n\nIdeally, we'd be able to map each run to a font table.  If anyone has recommendations, let me know.\n\n\nSide note:\nI also fixed a bug in PapInTable:\n\n-   if ( papx.getGrpprl() == null || papx.getGrpprl().length == 0 )\n+   if ( papx.getGrpprl() == null || papx.getGrpprl().length <= 2 )\n\nThe issue is that there were some grpprls with size 1 in the old docs, and this caused an array out of bounds exception when copying because we start at offset 2.\n\nCommit to come shortly.", "id": 198117, "time": "2017-03-31T18:44:14Z", "bug_id": 50955, "creation_time": "2017-03-31T18:44:14Z", "is_private": false}, {"count": 10, "tags": [], "text": "Gah.  Bug51944.doc shows that the charset can be UTF-16LE.  The text reads correctly when we decode the bytes with UTF-16LE, but this file makes clear that we are correct not to check for the isUnicode byte and then do the /= 2, etc.\n\nSolution will have to wait until next week...argh...", "attachment_id": null, "bug_id": 50955, "id": 198120, "time": "2017-03-31T19:51:34Z", "creator": "tallison@mitre.org", "creation_time": "2017-03-31T19:51:34Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 50955, "text": "Turns out that 51944.doc is not UTF-16LE.  It looks from this file and 2 other files from our common crawl corpus like this is actually Big5, but MS appears to zero-pad ascii characters.  \n\nHas anyone worked with this?  Do we have something in our codebase that deals with this already?\n\nIf not, we may need some extra code to imitate MS's big5 en/decoding...not within the scope of this ticket.\n\nIt looks from ~1300 Word 6.0 files in our corpus, that the proposed solution works.  Unfortunately, there are only a few handfuls of files that aren't encoded with WIN-1252.", "id": 198133, "time": "2017-04-03T16:19:01Z", "creator": "tallison@mitre.org", "creation_time": "2017-04-03T16:19:01Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 198141, "time": "2017-04-04T02:18:43Z", "creator": "tallison@mitre.org", "creation_time": "2017-04-04T02:18:43Z", "is_private": false, "text": "r1790061\n\nIf anyone has a chance to review this before the next release, that'd be great.\n\nThe current heuristic looks for a non-default/symbol codepage in the font table and then applies that. \n\nI was able to find only one file in ~1300 where this heuristic fails, and I'll open a follow up issue for that.\n\nThe other item that I worked towards fixing is that we need special handling for Big5. MS Word 6.0 stored e.g. 7C B7 in reverse order B7 7C, and it zero padded ascii characters.  Even if we flip the bytes, new String(byte[], \"Big5\") doesn't strip out the zero-padding in the ascii.\n\nThere remains the basic problem that TextPiece stores data in a StringBuilder, and the actual conversion of bytes to chars isn't straight forward.\n\nFor example, if we assume that Big5 requires 2x the number of bytes, all is well with storage, but then it contains the 0 padding, and our code assumes that the StringBuilder contains an actual strings, not this zero-padded stuff...so we'd have to strip those out.  From a storage perspective, and \"closer to MSWord\" perspective, this is probably better.  If we count the number of bytes read per # of chars, we get a mismatch.  There's no apparent easy solution to this.\n\nFinally, I couldn't find a way of linking runs or text pieces to fonts. In the few files I found with multiple non-default encodings, the font encoding offset for the FFn in the runs was always 0, even though the actual font used was not 0, if we go by the codepage info."}, {"count": 13, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 198143, "time": "2017-04-04T08:22:51Z", "creator": "apache@gagravarr.org", "creation_time": "2017-04-04T08:22:51Z", "is_private": false, "text": "I'd suggest raising a new bug for the Big5 stuff, and attach an example file there. Since we only need to support read (not write), I have some ideas on how we might solve it, but best tracked in another bug"}, {"count": 14, "tags": [], "bug_id": 50955, "text": "Thank you, Nick.  I'd greatly appreciate your help!\n\nSee Bug 60953.", "id": 198147, "time": "2017-04-04T12:20:33Z", "creator": "tallison@mitre.org", "creation_time": "2017-04-04T12:20:33Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "text": ">I was able to find only one file in ~1300 where this heuristic fails, and I'll open a follow up issue for that.\n\nSee Bug 60952", "attachment_id": null, "id": 198148, "creator": "tallison@mitre.org", "time": "2017-04-04T12:22:16Z", "bug_id": 50955, "creation_time": "2017-04-04T12:22:16Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 50955, "attachment_id": null, "id": 198639, "time": "2017-05-02T23:53:13Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-05-02T23:53:13Z", "is_private": false, "text": "After patching HPSF (see #61062 ) - the DocumentSummary heuristics don't work anymore, therefore I've reverted the changes to the codepage guessing with r1793601"}, {"count": 17, "attachment_id": null, "bug_id": 50955, "text": "*** Bug 60374 has been marked as a duplicate of this bug. ***", "id": 199121, "time": "2017-06-09T12:52:24Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-06-09T12:52:24Z", "tags": [], "is_private": false}]
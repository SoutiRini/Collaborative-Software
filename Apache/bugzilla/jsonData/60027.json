[{"count": 0, "tags": [], "bug_id": 60027, "is_private": false, "id": 193247, "attachment_id": null, "creator": "george.bateman16@gmail.com", "creation_time": "2016-08-21T12:25:10Z", "time": "2016-08-21T12:25:10Z", "text": "When using the exec task, it is possible to have to create very long (eg. 100 character) arguments if an executable requires that a single argument contains two paths or multiple commands (eg. the tar --transform and sh -c commands). This leads to unclear code.\n\nRewriting this in the form:\n<arg part1=\"--transform=s\"\n     part2=\"^build/linux/work/modes/java/reference\"\n     part3=\"build/linux/deb-raw/processing-doc/usr/share/doc/processing-doc/reference:\"\n     joiner=\":\" />\n\n(for tar) or \"sh -c\" with\n\n<arg part1=\"grep -r --longopt\"\n     part2=\"foo --bar\"\n     part3=\"find *.exe\"\n     joiner=\";\" />\n\nleads to much clearer code. (I suggest the joiner attribute since these very long arguments often seem to have their own internal delimiters.)"}, {"count": 1, "tags": [], "bug_id": 60027, "attachment_id": null, "id": 193249, "time": "2016-08-21T17:46:57Z", "creator": "jan@materne.de", "creation_time": "2016-08-21T17:46:57Z", "is_private": false, "text": "Lot easier is using properties:\n\n<property name=\"part1\" value=\"--transform=s\"/>\n<property name=\"part2\" value=\"^build/linux/work/modes/java/reference\"/>\n<property name=\"part3\" value=\"build/linux/deb-raw/processing-doc/usr/share/doc/processing-doc/reference:\"/>\n<exec ...>\n  <arg value=\"${part1}:${part2}:${part3}\"/>\n</exec>"}, {"count": 2, "attachment_id": null, "creator": "george.bateman16@gmail.com", "is_private": false, "id": 193262, "time": "2016-08-22T13:02:12Z", "bug_id": 60027, "creation_time": "2016-08-22T13:02:12Z", "tags": [], "text": "I didn't think that defining loads of properties solves the problem of messy code. It should be fairly easy to add support for this; I've seen a number of situations where it would be useful."}, {"count": 3, "tags": [], "bug_id": 60027, "is_private": false, "id": 193265, "creation_time": "2016-08-22T15:05:08Z", "time": "2016-08-22T15:05:08Z", "creator": "ddevienne@gmail.com", "text": "I agree with Jan, and disagree with George. Even more so since the proposal wants to  use \"open-ended\" (meta) attributes. That's a pattern that doesn't exist in Ant, and the use case is not compelling enough to introduce it. Using <property> is a good enough work-around IMHO.\n\nPS: Do we simply close \"enhancement\" requests like this, not even discussed on the mailing list?", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 60027, "attachment_id": null, "text": "Actually Ant does have the capacity to support this (DynamicAttribute, DynamicAttributeNS), which is not to say that I think this is the best approach here either. It would seem much more to the point to use the <arg> element's nested text as an alternative (and mutually exclusive) means to set the argument's value (probably normalizing series of whitespace to a single space).", "id": 193266, "time": "2016-08-22T15:34:49Z", "creator": "mbenson@apache.org", "creation_time": "2016-08-22T15:34:49Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 60027, "attachment_id": null, "id": 193269, "time": "2016-08-22T17:10:00Z", "creator": "ddevienne@gmail.com", "creation_time": "2016-08-22T17:10:00Z", "is_private": false, "text": "DynamicAttribute does exist, but do Ant tasks use it for actual attributes the task itself uses? I've used it for the precursor to https://ant.apache.org/manual/Tasks/echoxml.html, but beside that use-case, I don't think it's appropriate here.\n\nPS: I persist that I don't think using BugZilla for discussing an enhancement like this is the proper venue. This should be on the list instead. And if an agreement emerges, then an enhancement can be logged. Otherwise the bug DB is littered with everyone's ideas of how Ant should be, w/o any patches for it."}, {"count": 6, "tags": [], "text": "Re PS: https://ant.apache.org/bugs.html asks users to use Bugzilla for enhancement requests. (Section \u201cAsking for an Enhancement\u201d.) Otherwise I would  have used a mailing list in the normal way.\n\nMatt's suggestion of using nested text in the <arg> element to provide long values is a good one, but the issue of how to collapse whitespace is a hard one. How, for example, does the user specify argument values which contain newlines, and whitespace immediately before and after newlines?\n\nI still don't much like the idea of using properties as proposed by Jan; having defined variables part1, part2, part3 for the first long argument in a project, you then need partA1, partA2, partA3, for the next, and so on.\n\nIn any case, thank you for discussing the issue and suggesting the various solutions.", "is_private": false, "bug_id": 60027, "id": 193281, "time": "2016-08-23T12:05:00Z", "creator": "george.bateman16@gmail.com", "creation_time": "2016-08-23T12:05:00Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "jan@materne.de", "text": "An implementation idea I have is this:\n\n<arg part[N]=\"\" joiner=\"\"/>\n- joiner defaults to a simple blank\n- all attributes starting with \"part\" are stored in a Map (index=attribute-name, value=attribute-value)\n- setting could (maybe) be done via DynamicAttribute\n- a combination of part, value and line is not permitted\n- for joining these values we sort the entries alphabetically by index\n- the joined value is used as <arg value/>\n\n\nBut what is the usecase?\n\"Just\" splitting a long value into shorter ones?\nAre these values hard coded? If not, you could filesets or resourcecollections and use their values <arg value=\"${toString:idOfFileset}\"/>. Calculation via <pathconvert> would be possible to.", "id": 193295, "time": "2016-08-24T10:16:50Z", "bug_id": 60027, "creation_time": "2016-08-24T10:16:50Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 60027, "attachment_id": null, "id": 193312, "time": "2016-08-24T14:26:54Z", "creator": "george.bateman16@gmail.com", "creation_time": "2016-08-24T14:26:54Z", "is_private": false, "text": "That implementation looks ideal; one problem with the Map<String,String> though is the alphabetical sort on the parts. Sorting e.g. parts 1-10 will give the wrong order. Two alternatives are:\n\u2022 String array with size set to the number of partN attributes. For each attribute, run\n    partsArray[Integer.parseInt(N) - 1] = value;\n  and on catching an ArrayIndexOutOfBounds exception fail the task with the message \"part numbers not consecutive\" or \"part numbers start at 1\".\n\n\u2022 Just fill and sort a Map<Integer,String>. This would allow non-consecutive part numbers, if you want that.\n\nThe use case is when a single argument can be subdivided into many logical parts, and writing them all out joined together is too long to read clearly, as with complex sed commands, regexes acting on paths or other long texts, and the sh -c command. As you say, using <fileset>/<pathconvert> instead of hard-coded values would usually be better when that is appropriate."}, {"count": 9, "tags": [], "creator": "ddevienne@gmail.com", "text": "FWIW, I strongly dislike the <arg partN=\"...\"> route.\n\nThat's a \"can't have a schema\" approach that's just bad XML IMHO.\n<arg><part>...</part><part>...</part>...</arg> or simply <arg> [several lines] </arg> with a custom \"line joiner\" (e.g. ignore leading/trailing spaces and join them with ; in the OP's case) is the \"proper\" XML way IMHO.\n\nThe fact Ant has DynamicAttribute (for a different purpose IMHO) is not reason enough to abuse Ant's introspection mechanisms.\n\nIf you can't write an DTD or XSD for the XML, it's bad XML in my book.", "id": 193314, "time": "2016-08-24T14:56:32Z", "bug_id": 60027, "creation_time": "2016-08-24T14:56:32Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "george.bateman16@gmail.com", "text": "Okay, I wasn't aware of the niceties surrounding good XML. I understand that XSD contains an <xs:anyAttribute> tag but that might not be suitable. If you don't want the partN=\"\" method, then either of the nested text ideas you suggest sound fine.", "id": 193344, "time": "2016-08-26T11:14:23Z", "bug_id": 60027, "creation_time": "2016-08-26T11:14:23Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 60027, "attachment_id": null, "id": 198512, "creation_time": "2017-04-25T09:38:11Z", "time": "2017-04-25T09:38:11Z", "creator": "jan@materne.de", "text": "An idea was declined. No further discussion was done since 2016.", "is_private": false}]
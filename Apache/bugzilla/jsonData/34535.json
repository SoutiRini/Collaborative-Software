[{"count": 0, "attachment_id": null, "creator": "tyler@yi.org", "text": "The apache build process seems to assume that the files in the source tree are\nalways going to be writable.\n\n* It overwrites at least \"modules/ssl/ssl_expr_parse.c\" and\n\"modules/ssl/ssl_expr_parse.h\" during a build with SSL support.\n\n* It uses \"cp -p\" to move files into the apache installation directory more than\nonce, causing \"make install\" to fail with \"permission denied\" the second time\nthe copy is done.\n\nIf the two ssl files need to be in the tree (they appear to be generated from\nthe .y file), I would suggest that they be named differently and then copied\nover as part of the build process.\n\nTo solve the second problem, maybe use GNU install instead of \"cp\"?", "id": 73840, "time": "2005-04-19T23:09:45Z", "bug_id": 34535, "creation_time": "2005-04-19T23:09:45Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "text": "The timestamps are supposed to be set on the mod_ssl ssl_expr_* files to avoid\nmake regenerating them (see buildconf), and indeed, I haven't seen make do that\nin a long time.  Can you investigate further exactly why they are getting\nregenerated for you?\n\nPatches would be definitely welcome to adjust the install* targets to use\n$(INSTALL) rather than cp -p.", "id": 73846, "time": "2005-04-20T00:42:45Z", "bug_id": 34535, "creation_time": "2005-04-20T00:42:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "tyler@yi.org", "text": "(In reply to comment #1)\n> The timestamps are supposed to be set on the mod_ssl ssl_expr_* files to avoid\n> make regenerating them (see buildconf), and indeed, I haven't seen make do that\n> in a long time.  Can you investigate further exactly why they are getting\n> regenerated for you?\n\nThis is just a wild guess, but I think it's because .l and .y are both greater\nthan .c; when the files are checked out or copied, the .y file is copied last\nand therefore gets a timestamp garunteed to be equal to or greater than the\n.c/.h files.\n\nopenssl has the same problem, stemming from the fact that files are distributed\nthat are in fact generated by the distribution... it'd be cool if this behaviour\nwas eliminated entirely (with the exception of \"configure\", of course...),\neither by just building the files at build time, or if you're concerned about\npeople not having flex/yacc, maybe calling the files \".dist\" or something in the\ntarball and having the make rules just cp them over...\n", "id": 73924, "time": "2005-04-21T23:50:37Z", "bug_id": 34535, "creation_time": "2005-04-21T23:50:37Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 34535, "text": "buildconf avoids that problem by touching the files, as I said.  Check them in\nthe unpacked tarball:\n\ncd modules/ssl\ntouch ssl_expr_parse.y\nsleep 1\ntouch ssl_expr_parse.c ssl_expr_parse.h ssl_expr_scan.l\nsleep 1\ntouch ssl_expr_scan.c\ncd ../..\n\nso if you're seeing this problem there is some more subtle problem.", "id": 73926, "time": "2005-04-22T00:04:35Z", "creator": "jorton@redhat.com", "creation_time": "2005-04-22T00:04:35Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "ah yes, but buildconf has it's own bugs :) first off, it overwrites files in the\ndistribution, meaning that it falls into this same bug of not being able to\nhandle a read-only source tree, such as one checked into a revision control\nsystem. I wouldn't worry so much about that, since it's expected to rebuild\nconfigure files, etc...\n\nwhat do you think of this \"touch\" operation being moved into \"configure\" instead\nof \"buildconf\"?\n", "is_private": false, "id": 73927, "creator": "tyler@yi.org", "time": "2005-04-22T01:17:41Z", "bug_id": 34535, "creation_time": "2005-04-22T01:17:41Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "jorton@redhat.com", "is_private": false, "id": 73945, "time": "2005-04-22T10:01:04Z", "bug_id": 34535, "creation_time": "2005-04-22T10:01:04Z", "tags": [], "text": "Yes, buildconf does modify files, it would be rather useless if it didn't. \nDoing the \"touch\" operation in configure rather than buildconf would mean...\ndrumroll... modifying files in the source directory during a build, which was I\nbelieve what you are trying to avoid :)\n\nSince e.g. bug 27836 covers bad use of \"cp -p\" rather than $(INSTALL) in\ninstall-* targets, marking this INVALID, the ssl_expr* timestamps look correct here."}, {"count": 6, "tags": [], "bug_id": 34535, "attachment_id": null, "text": "Joe,\n\nThis is a bug about the build process, not the install process. I am glad that a\ndifferent bug already exists for the install process.\n\n> Doing the \"touch\" operation in configure rather than buildconf would mean...\n> drumroll... modifying files in the source directory during a build, which was \n> I believe what you are trying to avoid :)\n\nTrue, but attempting to modify the timestamp is less annoying than attempting to\nmodify the contents.\n\nThat said, could we please at the very least _least_ make these targets fail\ngracefully instead, just by sticking a '-' in front of the commands they\nexecute? This way, the build process will Do The Right Thing;\n\n     - if timestamps arent skewed, no problem\n\n     - if timestamps are skewed,\n       - if files are read-write, and you have flex/yacc, no problem\n       - if you don't have flex/yacc, the commands will obviously fail, but at\nleast you still have the old copies of these files\n       - if files are read-only, the commands will obviously fail, but at least\nyou still have the old copies of these files\n\n\nI'm also curious why the logic to build the .l/.y files is in this Makefile,\nsince rules.mk also includes it's own rules, and I don't see any other .y or .l\nfiles in the apache distribution. But I guess that's another story. :)", "id": 74020, "time": "2005-04-23T01:26:08Z", "creator": "tyler@yi.org", "creation_time": "2005-04-23T01:26:08Z", "is_private": false}, {"count": 7, "tags": [], "text": "No.  The make targets shouldn't trigger.  If they do trigger it will be because\n*someone has modified the yacc/lex sources*.  In which case the make command\nshould fail if it fails to generate new C files.", "is_private": false, "id": 74028, "creator": "jorton@redhat.com", "time": "2005-04-23T11:00:59Z", "bug_id": 34535, "creation_time": "2005-04-23T11:00:59Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Hi,\n\nI'm working on a reader and rriter for Excel files. The reader works fine. It \nshows the table correctly in my JTable. But after saving it under a new name \nand open this file, the last column is gone. However Excel shows all the \ncolumns, none is missing for the first time. When I repeat the procedure even \nin Excel the last column is missing. In the JTable is the column which was the \nprevious last one also gone (2 are missing now.. and so on). I thought it was a \nbug in my code. So I terminated the Java application after saving for the first \ntime, but after restarting the programm an open the saved file, the last column \nist still not there. Can anybody tell me if this is my mistake or a bug? (I \nattached my code.)\n\nthanks\n\n------------------------------------------------------------------\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport javax.swing.table.AbstractTableModel;\nimport javax.swing.table.TableModel;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\npublic class WorkbookReader\n{\n\tprivate\tArrayList tableName = new ArrayList();\n\tprivate\tArrayList sheet = new ArrayList();\n\tprivate TableSheet ts[];\n\n\n\tpublic WorkbookReader(String wbName) {\n\t\ttry {\n\t\t\tFile file = new File(wbName);\n\t\t\treadXls(file);\n\t\t} catch (IOException exc) {\n\t\t\tSystem.out.println(exc);\n\t\t}\n\n\t}\n\t\n\tpublic WorkbookReader(File wbName) {\n\t\ttry {\n\t\t\treadXls(wbName);\n\t\t} catch (IOException exc) {\n\t\t\tSystem.out.println(exc);\n\t\t}\n\n\t}\n\n\tprivate void readXls(File file) throws IOException{\n\t\tString s;\n\t\tHSSFSheet sh;\n\t\tHSSFRow rw;\n\t\tHSSFCell cell;\n\n\t\tshort lastCell;\n\t\tint rows;\n\n\t\tFileInputStream\tfis = new FileInputStream(file);\n\t\tPOIFSFileSystem fs = new POIFSFileSystem(fis);\n\t\tHSSFWorkbook wb = new HSSFWorkbook(fs);\n\n\n\t\tint sheets = wb.getNumberOfSheets();\n\t\tfor(int i = 0; i < sheets; i++) {\n\t\t\t//Name des Tabellenblattes\n\t\t\ts = wb.getSheetName(i);\n\t\t\t//Arbeitsblatt\n\t\t\tsh = wb.getSheetAt(i);\n\t\t\t//Anzahl der Spalten mit Werten\n\t\t\trows = sh.getPhysicalNumberOfRows();\n\t\t\t//Wenn das Arbeitsblatt Werte enth\u00e4lt\n\t\t\t//addiere es zu den ArrayListen\n\t\t\tif(rows > 0) {\n\t\t\t\ttableName.add(s);\n\t\t\t\tsheet.add(sh);\n\t\t\t}\n\t\t}\n\t\tfis.close();\n\n\t\t//Instanzen der Klasse TableSheet erzeugen\n\t\tsheets = sheet.size();\n\t\tts = new TableSheet[sheets];\n\n\t\t//ArrayListe f\u00fcr Arbeitbl\u00e4tter auslesen\n\t\tfor(int i = 0; i < sheets; i++) {\n\n\t\t\tArrayList cells = new ArrayList();\n\t\t\tsh = (HSSFSheet) sheet.get(i);\n\t\t\trows = sh.getPhysicalNumberOfRows();\n\n\t\t\tint maxCol = 0;\n\n\t\t\tfor(int j = 0; j < rows; j++) {\n\n\t\t\t\trw = sh.getRow(j);\n\t\t\t\tlastCell = rw.getLastCellNum();\n\t\t\t\tSystem.out.println(lastCell);\n\t\t\t\t//den gr\u00f6\u00dften Wert f\u00fcr die Anzahl der Spalten \nspeichern\n\t\t\t\tif(lastCell > maxCol) maxCol = lastCell;\n\n\t\t\t\tfor(int k = 0; k < lastCell; k++) {\n\t\t\t\t\tcell = rw.getCell((short) k);\n\t\t\t\t\tint cellType;\n\t\t\t\t\tif(cell == null) {\n\t\t\t\t\t\tcellType = 3;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcellType = cell.getCellType();\n\t\t\t\t\t}\n\t\t\t\t\t//Zellentyp ermitteln und Inhalt der \nZelle auslesen\n\t\t\t\t\tswitch(cellType)\n\t\t\t\t\t{\n\t\t\t\t\tcase HSSFCell.CELL_TYPE_NUMERIC:\n\t\t\t\t\t\tDouble bigDbl = new Double\n(cell.getNumericCellValue());\n\t\t\t\t\t\tcells.add(bigDbl);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HSSFCell.CELL_TYPE_BOOLEAN:\n\t\t\t\t\t\tBoolean bigBol = new Boolean\n(cell.getBooleanCellValue());\n\t\t\t\t\t\tcells.add(bigBol);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HSSFCell.CELL_TYPE_STRING:\n\t\t\t\t\t\tcells.add\n(cell.getStringCellValue());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HSSFCell.CELL_TYPE_FORMULA:\n\t\t\t\t\t\tcells.add\n(cell.getStringCellValue());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcells.add(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//die Spalten bekommen eine aufsteigende nummerische \n\u00dcberschrift\n\t\t\tObject colNames[] = new Object[maxCol];\n\t\t\tfor(int m = 0; m < maxCol; m++) {\n\t\t\t\tInteger bigInt = new Integer(m);\n\t\t\t\tcolNames[m] =  bigInt.toString();\n\t\t\t}\n\n\t\t\t//Tabellenname auslesen\n\t\t\tString tn = (String) tableName.get(i);\n\n\t\t\t//die Daten werden nun den Instanzen zugeordnet\n\t\t\tts[i] = new TableSheet(cells, colNames , tn);\n\t\t}\n\t}\n\n\tpublic TableSheet[] getTableSheets() {\n\t\treturn ts;\n\t}\n\n\tpublic TableSheet getTableSheet(int index) {\n\t\treturn ts[index];\n\t}\n\n\tpublic int getNumberOfTableSheets() {\n\t\treturn ts.length;\n\t}\n}\n\n--------------------------------------------------------------------------\nimport java.io.*;\nimport org.apache.poi.hssf.usermodel.*;\nimport org.apache.poi.poifs.filesystem.*;\n\npublic class WorkbookWriter{\n\n\tpublic WorkbookWriter(TableSheet ts[], String wbName){\n\t\ttry {\n\t\t\tFile file = new File(wbName);\n\t\t\twriteXls(ts, file);\n\t\t} catch (IOException exc) {\n\t\t\tSystem.out.println(exc);\n\t\t}\n\t}\n\n\tpublic WorkbookWriter(TableSheet ts[], File wbName){\n\t\ttry {\n\t\t\twriteXls(ts, wbName);\n\t\t} catch (IOException exc) {\n\t\t\tSystem.out.println(exc);\n\t\t}\n\t}\n\n\n\n\tprivate void writeXls(TableSheet ts[], File file) throws IOException{\n\t\tHSSFWorkbook wb = new HSSFWorkbook();\n\t\tHSSFSheet sheet[] = new HSSFSheet[ts.length];\n\n\t\t//erzeuge so viele Tabellen, wie das Array 'ts' lang ist\n\t\tfor(int i = 0; i < ts.length; i++){\n\t\t\tsheet[i] = wb.createSheet(ts[i].getTableName());\n\t\t\t//lese Objekte aus der Tabelle\n\t\t\tObject data[][] = ts[i].getRowDatas();\n\t\t\t//erzeuge Zeilen\n\t\t\tHSSFRow row[] = new HSSFRow[data.length];\n\t\t\tfor(int j = 0; j < data.length; j++) {\n\t\t\t\trow[j] = sheet[i].createRow((short)j);\n\t\t\t\t//erzeuge Zellen\n\t\t\t\tHSSFCell cell[] = new HSSFCell[data[j].length];\n\t\t\t\tfor(int k = 0; k < data[j].length; k++) {\n\t\t\t\t\tcell[k] = row[j].createCell((short)k);\n\t\t\t\t\t//ermitteln des ObjectTyps\n\t\t\t\t\tObject o = data[j][k];\n\t\t\t\t\tString s = getObjectType(o);\n\t\t\t\t\tif(s.endsWith(\"Double\")) {\n\t\t\t\t\t\tDouble d = (Double)o;\n\t\t\t\t\t\tcell[k].setCellValue\n(d.doubleValue());\n\t\t\t\t\t}\n\t\t\t\t\telse if(s.endsWith(\"Boolean\")) {\n\t\t\t\t\t\tBoolean b = (Boolean)o;\n\t\t\t\t\t\tcell[k].setCellValue\n(b.booleanValue());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcell[k].setCellValue(o.toString\n());\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\twb.write(fileOut);\n\t\tfileOut.close();\n\t}\n\n\tprivate String getObjectType(Object o) {\n\t\tClass c = o.getClass();\n\t\tString s = c.getName();\n\t\treturn s;\n\t}\n}\n\n---------------------------------------------------------------------\nimport java.util.*;\nimport javax.swing.table.*;\n\nclass TableSheet extends AbstractTableModel {\n\tprivate Object data[][];\n\tprivate Object colName[];\n\tprivate String tableName;\n\tprivate int cols;\n\tprivate int rows;\n\n\tpublic TableSheet() {\n\t}\n\n\tpublic TableSheet(Object data[][], Object columnNames[], String \ntableName) {\n\t\tsetData(data, columnNames, tableName);\n\t}\n\n\tpublic TableSheet(ArrayList dataList, Object columnNames[], String \ntableName) {\n\t\tsetData(dataList, columnNames, tableName);\n\t}\n\n\tpublic void setData(Object data[][], Object columnNames[], String \ntableName) {\n\t\tthis.data = data;\n\t\tcolName = columnNames;\n\t\tthis.tableName = tableName;\n\t}\n\n\tpublic void setData(ArrayList dataList, Object columnNames[], String \ntableName) {\n\t\tObject d[] = dataList.toArray();\n\t\tcolName = columnNames;\n\t\tthis.tableName = tableName;\n\t\treadDatas(d);\n\t}\n\n\n\tprivate void readDatas(Object d[]) {\n\t\tcols = colName.length;\n\t\trows = d.length/cols;\n\t\tdata = new Object[rows][cols];\n\n\t\tfor(int i = 0; i < data.length; i++) {\n\t\t\tfor(int j = 0; j < data[i].length; j++) {\n\t\t\t\tdata[i][j] = d[(cols*i)+j];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic Object[][] getRowDatas() {\n\t\treturn data;\n\t}\n\n\tpublic Object[] getColumnNames() {\n\t\treturn colName;\n\t}\n\n\tpublic String getColumnName(int columnIndex) {\n\t\tString s = (String) colName[columnIndex];\n\t\treturn s;\n\t}\n\n\tpublic int getRowCount() {\n\t\treturn data.length;\n\t}\n\n\tpublic int getColumnCount() {\n\t\treturn cols;\n\t}\n\n\tpublic Object getValueAt(int rowIndex, int colIndex) {\n\t\treturn data[rowIndex][colIndex];\n\t}\n\n\tpublic String getTableName() {\n\t\treturn tableName;\n\t}\n}\n\n--------------------------------------------------------------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.table.*;\n\npublic class WorkBookTest extends JFrame implements ActionListener{\n\tprivate WorkbookReader wbReader;\n\tprivate WorkbookWriter wbWriter;\n\tprivate JList list;\n\tprivate JTable table;\n\tprivate JButton load, save;\n\n\tprivate class MyMouseListener extends MouseAdapter {\n\n\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\tshowTableContents(e);\n\t\t}\n\n\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\tshowTableContents(e);\n\t\t}\n\t}\n\n\tpublic WorkBookTest() {\n\t\tsuper(\"Test Java-Excel\");\n\t\tsetResizable(false);\n\t\taddWindowListener(\n\t\t        new WindowAdapter() {\n\t\t\t        public void windowClosing(WindowEvent e) {\n\t\t\t\t        System.exit(0);\n\t\t\t        }\n\t\t        });\n\n\t\tContainer cp = getContentPane();\n\n\t\ttable = new JTable();\n\t\ttable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n\n\t\tlist = new JList();\n\t\tlist.addMouseListener(new MyMouseListener());\n\n\t\tload = new JButton(\"load XLS-File\");\n\t\tsave = new JButton(\"save XLS-File\");\n\t\tload.addActionListener(this);\n\t\tsave.addActionListener(this);\n\t\tsave.setEnabled(false);\n\n\t\tJScrollPane scroll_1 = new JScrollPane(list);\n\t\tJScrollPane scroll_2 = new JScrollPane(table);\n\n\t\tJPanel pan_1 = new JPanel(new BorderLayout());\n\t\tJPanel pan_2 = new JPanel(new FlowLayout());\n\n\t\tpan_2.add(load);\n\t\tpan_2.add(save);\n\n\t\tpan_1.add(\"Center\", scroll_1);\n\t\tpan_1.add(\"South\", pan_2);\n\n\t\tcp.add(\"West\", pan_1);\n\t\tcp.add(\"Center\", scroll_2);\n\n\t}\n\n\tprivate boolean showIoDialog(boolean showOpen) {\n\t\tboolean ok = false;\n\t\tJFileChooser chooser = new JFileChooser();\n\t\tFileFilter filter = new FileFilter();\n\t\tfilter.addType(\"xls\");\n\t\tfilter.setDescription(\"MS-Excel-Dateien (*.xls)\");\n\t\tchooser.setFileFilter(filter);\n\n\t\tif(showOpen) {\n\t\t\tint returnVal = chooser.showOpenDialog(this);\n\t\t\tif (returnVal == JFileChooser.APPROVE_OPTION) {\n\t\t\t\twbReader = new WorkbookReader\n(chooser.getSelectedFile());\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint returnVal = chooser.showSaveDialog(this);\n\t\t\tif (returnVal == JFileChooser.APPROVE_OPTION) {\n\t\t\t\twbWriter = new WorkbookWriter\n(wbReader.getTableSheets(), chooser.getSelectedFile());\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\t\treturn ok;\n\t}\n\n\tpublic void actionPerformed(ActionEvent e) {\n\t\tif(e.getSource() == load) {\n\t\t\tif(showIoDialog(true)) {\n\t\t\t\tObject listData[] = new Object\n[wbReader.getNumberOfTableSheets()];\n\n\t\t\t\tfor(int i = 0; i < listData.length; i++) {\n\t\t\t\t\tTableSheet ts = wbReader.getTableSheet\n(i);\n\t\t\t\t\tlistData[i] = ts.getTableName();\n\t\t\t\t}\n\n\t\t\t\tlist.setListData(listData);\n\t\t\t\tsave.setEnabled(true);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tshowIoDialog(false);\n\t}\n\n\n\n\tprivate void showTableContents(MouseEvent e) {\n\t\tif(!e.isPopupTrigger()) {\n\t\t\tint index = list.getSelectedIndex();\n\t\t\ttable.setModel(wbReader.getTableSheet(index));\n\t\t}\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tWorkBookTest wbt = new WorkBookTest();\n\t\twbt.pack();\n\t\twbt.show();\n\t}\n}", "attachment_id": null, "id": 27051, "creator": "ma_schroed@web.de", "time": "2002-11-27T12:01:10Z", "bug_id": 14890, "creation_time": "2002-11-27T12:01:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 14890, "text": "whoa...  Me thinks you should put the simplest piece of code that replicates teh\nproblem.  Without looking too carefully I suspect this is a bug in this code not\nPOI.", "id": 41298, "time": "2003-07-24T13:53:35Z", "creator": "poi-support@buni.org", "creation_time": "2003-07-24T13:53:35Z", "is_private": false, "attachment_id": null}]
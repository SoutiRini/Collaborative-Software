[{"count": 0, "tags": [], "bug_id": 52209, "attachment_id": null, "id": 151625, "time": "2011-11-18T15:20:42Z", "creator": "mike@consbio.org", "creation_time": "2011-11-18T15:20:42Z", "is_private": false, "text": "I'm hitting an issue with inserting multiple images (more than 10) to either a group or a slide. I've written the following test case that fails and shows the problem:\n\npublic void testCreateMultiplePictures() throws IOException {\n        XMLSlideShow ppt = new XMLSlideShow();\n        XSLFSlide slide = ppt.createSlide();\n        XSLFGroupShape group1 = slide.createGroup();\n        \n        for (int i = 0; i < 20; i++) {\n            byte[] data1 = new byte[]{1, 2, (byte)(i/8)};\n            int elementIndex = ppt.addPicture(data1, XSLFPictureData.PICTURE_TYPE_PNG);\n            XSLFPictureShape picture = group1.createPicture(elementIndex);\n            assertEquals(\"image\" + (elementIndex + 1) + \".png\", picture.getPictureData().getFileName());\n        }\n    }\n\nI can fix it, but I don't like the way I fixed it. What I'm finding is that in the OPCPackage.getPartsByName method, the resulting list comes back in alphabetically sorted name order (not index order). So, once you have an image called image10.png, it shows up in the resulting list at a different index and throws everything off. A hack that made things work was to modify the createPicture function in both XSLFGroupShape and XSLFSheet, to look like the following (this is from the XSLFGroupShape): \n\npublic XSLFPictureShape createPicture(int pictureIndex){\n\n        List<PackagePart>  pics = _sheet.getPackagePart().getPackage()\n                .getPartsByName(Pattern.compile(\"/ppt/media/image\" + (pictureIndex + 1) + \".*?\"));\n        \n        PackagePart pic = pics.get(0);\n        PackageRelationship rel = _sheet.getPackagePart().addRelationship(\n                pic.getPartName(), TargetMode.INTERNAL, XSLFRelation.IMAGES.getRelation());\n\n        XSLFPictureShape sh = getDrawing().createPicture(rel.getId());\n        sh.resize();\n        _shapes.add(sh);\n        return sh;\n    }\n\nI received the following message from Yegor Kozlov after posting my findings in the users forum:\n\nI confirmed the bug in trunk. Can you please create a new bug in Bugzilla so that we have a record of it.\n\nYour solution might be a good idea. We have a convention that the image number is a part of the image name and can rely on it.\n\nActually, this bug is a consequence of the API design. In HSLF we refer to images by index and this is how the .ppt format does it - images are stored globally and all objects refer to them by index. All the OOXML-based formats are different - picture is a part of the OPC package and you refer to it by its relationshipId which is a string, so a better version of XSLF would use string (relId) instead of an integer . The main reason we use an integer id is compatibility with HSLF. XSLF and HSLF will eventually converge into a common\nPresentation API and basic operations should have similar semantics.\n\nYegor"}, {"count": 1, "tags": [], "text": "Fixed in r1203969, junit added\n\nYegor", "is_private": false, "id": 151655, "creator": "yegor@dinom.ru", "time": "2011-11-19T12:30:44Z", "bug_id": 52209, "creation_time": "2011-11-19T12:30:44Z", "attachment_id": null}]
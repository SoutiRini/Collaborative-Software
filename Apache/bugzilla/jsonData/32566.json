[{"count": 0, "tags": [], "creator": "michael.gellner@finanzit.com", "attachment_id": null, "text": "Dear community,\n\nsorry, I guess I found some trouble on ant 1.6.2.\n\nI tried a replace operation (conversion from ASCII coded files to ANSI coded \nfiles, i.e. in our case converting only around a dozen symbols in a large \namount of small to middle sized files).\nThe replace built failed always, if files became accessed that were bigger \nthan 6.5 MByte. This could be reproduced. An OutOfMemory exception occured. I \nchecked this with certain files to exclude the case that certain symbols or \nsomething like that was responsible. It is definitely the filesize that causes \nthe crash.\n\nFurther on:\nI process directories file by file. If there is a number of files processed, \nthis crashing exception occurs even in files that are significantly smaller \nthan 6.5 MB (my smallest observation was a crash on a 4 MB file in a directory \nstructure with around 16 000 files that add to around 500 MB).\n\nAnd on:\nIf I combine the replace task with a copy task (first copy, than replace on \nthe backuped structure mentioned above) the built already crashes on the copy \ntask. Again with the java side OutOfMemory exception. I tried this with Java \nSDK 1.4.1 and SDK 1.4.2, as well as with Xmx2048 option. For that reason I am \nsure that the problem is not really the available memory.\n\nI hope someone is able to reproduce this findings and maybe to correct in some \nlater version.", "id": 68045, "time": "2004-12-07T16:09:28Z", "bug_id": 32566, "creation_time": "2004-12-07T16:09:28Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jkf@apache.org", "text": "Using String Buffers instead of strings over and over again and discarding the\nread buffer asap while relying on the replaceCount to detect changes instead of\ndoing a string compare (so that that string can be discarded early on) makes it\npossible to process twice as big files. The real problem is the processing of\nthe  file retaining the entire file in memory a few times.", "id": 68140, "attachment_id": null, "bug_id": 32566, "creation_time": "2004-12-08T23:46:26Z", "time": "2004-12-08T23:46:26Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 32566, "is_private": false, "text": "Created attachment 13690\nPatch on replace to use one StringBuffer instead of multiple Strings during processing. Also contains some other changes unifying the processing of tokens while keeping the order the same.", "id": 68145, "time": "2004-12-09T00:10:51Z", "creator": "jkf@apache.org", "creation_time": "2004-12-09T00:10:51Z", "attachment_id": 13690}, {"count": 3, "tags": [], "text": "It does not seem thread safe. What are the thread safity requirements in ANT?", "is_private": false, "bug_id": 32566, "id": 68146, "time": "2004-12-09T00:28:22Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-12-09T00:28:22Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32566, "is_private": false, "text": "Hi,\n\nTypically ant tasks are not thread safe. See also\nhttp://wiki.apache.org/ant/AntWeaknessesAndProblems\n\nIn particular a single instance of a task need not be thread safe as a task is\nexecuted in a single thread (unless the task itself spawns threads).\n\nThe thread that created the task at parse time (and hence also used all the\nsetters on the task) may be another one than the thread executing the task in\ncase the parallel task is used, these other threads however are guaranteed to be\ncreated after the parsing and creation of tasks has taken place (e.g. no\nsynchronized to aquire a lock / to make sure all data is re-read is needed on\nthe new thread, a new thread will always initially read the data from main\nmemory) it may be necessary though to previously release a lock to make sure all\ndata from the created tasks and properties upto the point where the parallel\ntask is started are available in main memory though.\n", "id": 68212, "time": "2004-12-09T23:05:45Z", "creator": "jkf@apache.org", "creation_time": "2004-12-09T23:05:45Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jkf@apache.org", "is_private": false, "count": 5, "id": 68313, "time": "2004-12-11T16:04:34Z", "bug_id": 32566, "creation_time": "2004-12-11T16:04:34Z", "text": "I was able to process significantly larger files after setting the environment\nvariable ANT_OPTS to -Xmx1024m\n(the m is important, as well as specifying it in ANT_OPTS instead of on the\ncommand line)"}, {"count": 6, "tags": [], "text": "The problem on the replace task has been reproduced and fixed on the current\ndevelopment version.\n\nI've not been able to reproduce the error on the copy tasks. Not even using 3\njdk's, 2 of wich contain the unpacked documentation. (19597 files according to\nthe copy task) The windows java executable size remained just under 24 MB.\n\n<?xml version=\"1.0\"?>\n\n<project name=\"copy-test\" basedir=\"c:\\\" default=\"test\">\n        <target name=\"test\">\n                <copy todir=\"jdk_copy\">\n                        <fileset dir=\".\">\n                                <include name=\"jdk*/**\"/>\n                        </fileset>\n                </copy>\n        </target>\n</project>\n\n\ntest:\n     [copy] Copying 19597 files to C:\\jdk_copy\n     [copy] Copied 1543 empty directories to 6 empty directories under C:\\jdk_co\npy\n\nBUILD SUCCESSFUL\nThis was 617 MB of data.\n\nHave you used a filter, input encoding or output encoding? (And have you used\nthe -Xmx2048m as ANT_OPTS?)", "is_private": false, "bug_id": 32566, "id": 68434, "time": "2004-12-13T22:08:49Z", "creator": "jkf@apache.org", "creation_time": "2004-12-13T22:08:49Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 32566, "is_private": false, "text": "Adding the mailing list as CC again (sorry)", "id": 68477, "time": "2004-12-14T11:20:35Z", "creator": "jkf@apache.org", "creation_time": "2004-12-14T11:20:35Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 32566, "text": "Replace is fixed, no reply has been received regarding the copy, so closing this\nbug. Please open a new bug if the copy goes OutOfMemory under \"normal\" conditions.", "id": 70952, "time": "2005-02-14T20:20:48Z", "creator": "jkf@apache.org", "creation_time": "2005-02-14T20:20:48Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 92208, "time": "2006-08-14T14:49:27Z", "bug_id": 32566, "creation_time": "2006-08-14T14:49:27Z", "text": "*** Bug 40250 has been marked as a duplicate of this bug. ***"}]
[{"count": 0, "attachment_id": null, "creator": "lars.ove.claesson@telenor.com", "text": "Set up is an Apache 2.2.13 running SSL with client certificate authentication. When running without a defined CRL, it works fine. The client is asked for his certificate in the browser and validation is working.\n\nWhen configuring a CRL for the domain, however, the client is asked for his certificate, and after a few seconds the connection is closed. According to the log file, the child process handling the connection core dumps. The contents of the CRL-file (generated by an external system) is validated with an openssl dump, and it looks fine. The file has been reencoded from DER to PEM using openssl, as the external system generates DER, only.", "id": 130233, "time": "2009-09-09T03:07:08Z", "bug_id": 47808, "creation_time": "2009-09-09T03:07:08Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "creator": "rpluem@apache.org", "is_private": false, "id": 130235, "time": "2009-09-09T04:01:06Z", "bug_id": 47808, "creation_time": "2009-09-09T04:01:06Z", "tags": [], "text": "Please provide a stacktrace of your core dump. See http://httpd.apache.org/dev/debugging.html."}, {"count": 2, "tags": [], "bug_id": 47808, "is_private": false, "id": 130245, "creation_time": "2009-09-09T06:58:33Z", "time": "2009-09-09T06:58:33Z", "creator": "lars.ove.claesson@telenor.com", "text": "Created attachment 24238\nStack trace of the core file\n\nPlease note that I have been permitted to supply the certificates and the rest of the configuration files from my security departement, as this is a test environment. Please let me know if this is necessary.", "attachment_id": 24238}, {"count": 3, "tags": [], "bug_id": 47808, "is_private": false, "id": 130246, "creation_time": "2009-09-09T07:01:39Z", "time": "2009-09-09T07:01:39Z", "creator": "lars.ove.claesson@telenor.com", "text": "This issue was also present in version 2.2.11.", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47808, "text": "Pasting the relevant bit of Lars' backtrace\n\n#0  0xfe74c124 in ASN1_UTCTIME_print () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n(gdb) where\n#0  0xfe74c124 in ASN1_UTCTIME_print () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n#1  0xfe861c60 in ssl_callback_SSLVerify_CRL (ok=1, ctx=0xffbff018, c=0x1a8ae0) at ssl_engine_kernel.c:1498\n#2  0xfe861fbc in ssl_callback_SSLVerify (ok=1, ctx=0xffbff018) at ssl_engine_kernel.c:1361\n#3  0xfe76386c in internal_verify () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n#4  0xfe7641e4 in X509_verify_cert () from /usr/local/ssl/lib/libcrypto.so.0.9.8", "id": 130247, "time": "2009-09-09T07:05:45Z", "creator": "wrowe@apache.org", "creation_time": "2009-09-09T07:05:45Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "rpluem@apache.org", "is_private": false, "id": 130248, "attachment_id": null, "bug_id": 47808, "creation_time": "2009-09-09T08:01:44Z", "time": "2009-09-09T08:01:44Z", "text": "When you have opened the core dump with gdb please issue the following commands:\n\nframe 1\nprint bio\nprint crl\nprint crl->crl\nprint crl->crl->lastUpdate\nprint crl->crl->nextUpdate\nprint *(crl->crl->lastUpdate)\nprint *(crl->crl->nextUpdate)\n\n\nFurthermore the crash will go away once you leave the debug log level."}, {"count": 6, "tags": [], "creator": "lars.ove.claesson@telenor.com", "is_private": false, "id": 130249, "attachment_id": 24239, "bug_id": 47808, "creation_time": "2009-09-09T08:22:14Z", "time": "2009-09-09T08:22:14Z", "text": "Created attachment 24239\nThe output of the requested commands."}, {"count": 7, "tags": [], "bug_id": 47808, "is_private": false, "id": 130251, "creation_time": "2009-09-09T08:23:18Z", "time": "2009-09-09T08:23:18Z", "creator": "lars.ove.claesson@telenor.com", "text": "Not quite sure if I understood you correctly. If I disable debug log level, which is defined inside the ssl virtual host section, it defaults back to the warn level, defined globally. But the core dump still occurs.", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 47808, "text": "(In reply to comment #7)\n> Not quite sure if I understood you correctly. If I disable debug log level,\n> which is defined inside the ssl virtual host section, it defaults back to the\n> warn level, defined globally. But the core dump still occurs.\n\nHm. I guess the crash happens now somewhat later in the code. Can you please crosscheck the stacktrace of the dumps that get created with debug turned off?\nNevertheless the following patch should fix the segfault you reported and give better output.\n\nIndex: modules/ssl/ssl_engine_kernel.c\n===================================================================\n--- modules/ssl/ssl_engine_kernel.c     (Revision 813083)\n+++ modules/ssl/ssl_engine_kernel.c     (Arbeitskopie)\n@@ -1457,10 +1457,20 @@\n             X509_NAME_print(bio, issuer, 0);\n\n             BIO_printf(bio, \", lastUpdate: \");\n-            ASN1_UTCTIME_print(bio, X509_CRL_get_lastUpdate(crl));\n+            if (X509_CRL_get_lastUpdate(crl)) {\n+                ASN1_UTCTIME_print(bio, X509_CRL_get_lastUpdate(crl));\n+            }\n+            else {\n+                BIO_printf(bio, \"NULL\");\n+            }\n\n             BIO_printf(bio, \", nextUpdate: \");\n-            ASN1_UTCTIME_print(bio, X509_CRL_get_nextUpdate(crl));\n+            if (X509_CRL_get_nextUpdate(crl)) {\n+                ASN1_UTCTIME_print(bio, X509_CRL_get_nextUpdate(crl));\n+            }\n+            else {\n+                BIO_printf(bio, \"NULL\");\n+            }\n\n             n = BIO_read(bio, buff, sizeof(buff) - 1);\n             buff[n] = '\\0';\n@@ -1492,9 +1502,9 @@\n         /*\n          * Check date of CRL to make sure it's not expired\n          */\n-        i = X509_cmp_current_time(X509_CRL_get_nextUpdate(crl));\n-\n-        if (i == 0) {\n+        if ((X509_CRL_get_nextUpdate(crl) == NULL)\n+            || ((i = X509_cmp_current_time(X509_CRL_get_nextUpdate(crl)))\n+                == 0)) {\n             ap_log_error(APLOG_MARK, APLOG_WARNING, 0, s,\n                          \"Found CRL has invalid nextUpdate field\");\n\n\n\nBut your debug outputs show that the nextUpdate field of your CRL is empty which is IMHO bad. So I guess your CRL needs fixing as well.", "id": 130259, "time": "2009-09-09T12:46:14Z", "creator": "rpluem@apache.org", "creation_time": "2009-09-09T12:46:14Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 47808, "is_private": false, "id": 130260, "creation_time": "2009-09-09T13:33:14Z", "time": "2009-09-09T13:33:14Z", "creator": "covener@gmail.com", "text": "> But your debug outputs show that the nextUpdate field of your CRL is empty\n> which is IMHO bad. So I guess your CRL needs fixing as well.\n\nThis is permitted by RFC3280 and openssl can generate the CRL without this field.\n\n   TBSCertList  ::=  SEQUENCE  {\n        version                 Version OPTIONAL,\n                                     -- if present, MUST be v2\n        signature               AlgorithmIdentifier,\n        issuer                  Name,\n        thisUpdate              Time,\n        nextUpdate              Time OPTIONAL,\n        revokedCertificates     SEQUENCE OF SEQUENCE  {", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 47808, "is_private": false, "text": "(In reply to comment #9)\n> > But your debug outputs show that the nextUpdate field of your CRL is empty\n> > which is IMHO bad. So I guess your CRL needs fixing as well.\n> \n> This is permitted by RFC3280 and openssl can generate the CRL without this\n> field.\n> \n>    TBSCertList  ::=  SEQUENCE  {\n>         version                 Version OPTIONAL,\n>                                      -- if present, MUST be v2\n>         signature               AlgorithmIdentifier,\n>         issuer                  Name,\n>         thisUpdate              Time,\n>         nextUpdate              Time OPTIONAL,\n>         revokedCertificates     SEQUENCE OF SEQUENCE  {\n\nThanks for the info, but how should mod_ssl behave in this case? My patch would cause it to error out. Should we treat the CRL as expired or valid or what?", "id": 130261, "time": "2009-09-09T14:05:57Z", "creator": "rpluem@apache.org", "creation_time": "2009-09-09T14:05:57Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 47808, "text": "(In reply to comment #10)\n> (In reply to comment #9)\n> > > But your debug outputs show that the nextUpdate field of your CRL is empty\n> > > which is IMHO bad. So I guess your CRL needs fixing as well.\n> > \n> > This is permitted by RFC3280 and openssl can generate the CRL without this\n> > field.\n> > \n> >    TBSCertList  ::=  SEQUENCE  {\n> >         version                 Version OPTIONAL,\n> >                                      -- if present, MUST be v2\n> >         signature               AlgorithmIdentifier,\n> >         issuer                  Name,\n> >         thisUpdate              Time,\n> >         nextUpdate              Time OPTIONAL,\n> >         revokedCertificates     SEQUENCE OF SEQUENCE  {\n> \n> Thanks for the info, but how should mod_ssl behave in this case? My patch would\n> cause it to error out. Should we treat the CRL as expired or valid or what?\n\n\nWhoops, it's more complicated, section 5.0:\n\nConforming CAs are not required to issue CRLs if other revocation or\n   certificate status mechanisms are provided.  When CRLs are issued,\n   the CRLs MUST be version 2 CRLs, include the date by which the next\n   CRL will be issued in the nextUpdate field (section 5.1.2.5), include\n   the CRL number extension (section 5.2.3), and include the authority\n   key identifier extension (section 5.2.1).\n\nlater:\n\nThis profile requires inclusion of nextUpdate in all CRLs issued by\n   conforming CRL issuers\n...\n The behavior of clients processing\n   CRLs which omit nextUpdate is not specified by this profile.\n\n\nIff there's no \"version\" extension in the CRL I suspect we should treat nextUpdate == NULL as valid, but version >1 and nextUpdate == NULL looks like it should be configurable", "id": 130263, "time": "2009-09-09T15:18:38Z", "creator": "covener@gmail.com", "creation_time": "2009-09-09T15:18:38Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 47808, "text": "> Thanks for the info, but how should mod_ssl behave in this case? My patch would\n> cause it to error out. Should we treat the CRL as expired or valid or what?\n\nPlease note that this CRL is read by another system today - a Cisco CSS. I'm\nworking on moving this part of the functionality to Apache. I will not\ninterfere with your discussion on the RFC as it is not my field, but I'm pretty\nsure that the CRL is being treated as valid - an \"open\" expiry date, so to\nspeak.\n\nRegarding the stack trace of the cores with the debug parameter off, I will\nperform them tomorrow, as I suddenly have no access to the system core dump\ndirectory. Can't seem to override where to dump the core in the Apache config\nfile (parameter has no effect).", "id": 130264, "time": "2009-09-09T15:23:20Z", "creator": "lars.ove.claesson@telenor.com", "creation_time": "2009-09-09T15:23:20Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": 24242, "creator": "lars.ove.claesson@telenor.com", "text": "Created attachment 24242\nThe contents of the CRL.\n\nThis file shows the contents of the CRL. Don't know if it shows anything you haven't already figured out.", "id": 130265, "time": "2009-09-09T15:31:04Z", "bug_id": 47808, "creation_time": "2009-09-09T15:31:04Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 47808, "is_private": false, "id": 130299, "creation_time": "2009-09-11T01:05:02Z", "time": "2009-09-11T01:05:02Z", "creator": "lars.ove.claesson@telenor.com", "text": "I finally got to run the stack trace on a warn log level.\n\nSeems the same (with a slight diff in line number on the last one):\n\n#0  0xfe762fc4 in X509_cmp_time () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n#1  0xfe861b80 in ssl_callback_SSLVerify_CRL (ok=1, ctx=0xffbfef48, c=0x19ae50) at ssl_engine_kernel.c:1530\n#2  0xfe861fbc in ssl_callback_SSLVerify (ok=1, ctx=0xffbfef48) at ssl_engine_kernel.c:1361\n#3  0xfe76386c in internal_verify () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n#4  0xfe7641e4 in X509_verify_cert () from /usr/local/ssl/lib/libcrypto.so.0.9.8", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 47808, "is_private": false, "id": 130322, "creation_time": "2009-09-11T13:39:21Z", "time": "2009-09-11T13:39:21Z", "creator": "rpluem@apache.org", "text": "(In reply to comment #14)\n> I finally got to run the stack trace on a warn log level.\n> \n> Seems the same (with a slight diff in line number on the last one):\n> \n> #0  0xfe762fc4 in X509_cmp_time () from /usr/local/ssl/lib/libcrypto.so.0.9.8\n> #1  0xfe861b80 in ssl_callback_SSLVerify_CRL (ok=1, ctx=0xffbfef48, c=0x19ae50)\n> at ssl_engine_kernel.c:1530\n\nThat is what I expected. Did you test the patch?\nAdmittedly it only removes the segfault but does not work with your CRL. See the comments from Eric regarding the discussion what should be the right thing to do in this case (empty next update field).\nThis still needs to be decided and worked out into code.", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 737, "attachment_id": null, "is_private": false, "id": 889, "time": "2001-02-27T11:41:11Z", "creator": "dberkman@memestreams.com", "creation_time": "2001-02-27T11:41:11Z", "text": "The jre/lib/ext directory is where downloaded extensions (those .jar files) go.\n\nPeople will download and place their extensions in that directory, so that when \nproducing code not actually destined for Tomcat, the JVM can find all the nice\nextensions automagically.\n\nThe Tomcat release include extensions which it sprinkles about its hierarchy,\nrather than placing them into the standard extensions directory.\n\nSome of the extensions that come with Tomcat duplicate those that might be\ndownloaded and placed into the proper extension directory.\n\nThe standard, properly placed extensions, will be available to the system class \nloader, which is the parent of the Tomcat class loader. The duplicate Tomcat \nextensions will be available to the Tomcat class loader only. Pain is emminent. \nTo the tune of SecurityException: protected package java.lang upon trying to \ncompile a Jsp.\n\nIf I remove all my properly placed extensions, this problem disappears. But I \nhave another solution. Please plave all extensions required by Tomcat placed \ninto a single folder in the build, and require those to be copied to the \nstandard extensions directory, or some other method which will cease the \nmadness. Please don't play dueling name spaces, and assume I need the \nextensions I've carefully downlaoded exactly where they are supposed to be.\n\nThank you."}, {"count": 1, "tags": [], "bug_id": 737, "attachment_id": null, "id": 1223, "time": "2001-03-12T13:39:54Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-03-12T13:39:54Z", "is_private": false, "text": "As a general policy, the system extensions directory (<JDK_HOME>/jre/lib/ext) is \n*not* an appropriate place for every single possible extension JAR.\n\nConsider, for example, the case of Tomcat reading the server.xml and web.xml \nfiles at startup time.  In both scenarios, additional objects (from local \nrepositories) are created on the fly by the SAX event handlers called from the \nparser.  If the parser itself was loaded as a system extension (because you put \njaxp.jar and crimson.jar there, for example), this will fail with a \nClassNotFoundException -- because Java provides no mechanism to look *down* a \nclass loader hierarchy.\n\nIf you have specific issues with specific JAR files, please report them (or \ndiscuss them on the TOMCAT-DEV list).  There is reasoning behind the placement \nof each individual JAR -- the usual scenario is to *prevent* unintended sharing, \nrather than to *allow* sharing, because the latter causes more problems than it \nsolves.\n\nCraig McClanahan\n"}]
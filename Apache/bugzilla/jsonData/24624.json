[{"count": 0, "tags": [], "bug_id": 24624, "attachment_id": null, "text": "I get this exception:\n\njava.lang.ClassCastException\n\tat org.apache.xml.security.encryption.XMLCipher.decryptElement(XMLCipher.java:958)\n\tat org.apache.xml.security.encryption.XMLCipher.doFinal(XMLCipher.java:625)\n\nwhen trying to decrypt a document whose root element is \"EncryptedData\":\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xenc:EncryptedData xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"\nType=\"http://www.w3.org/2001/04/xmlenc#Element\"><xenc:EncryptionMethod\nAlgorithm=\"http://www.w3.org/2001/04/xmlenc#tripledes-cbc\"\nxmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"/><xenc:CipherData\nxmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"><xenc:CipherValue\nxmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\">\n...\n</xenc:CipherValue></xenc:CipherData></xenc:EncryptedData>\n\nThis is with the latest Java CVS code. Looking into the code it's triggered by this:\n\n        Element sourceParent = (Element) element.getParentNode();\n\nwhich is assuming that the source element is a child element somewhere in the\ndocument. I think this:\n\n        Element sourceParent = (Element) element.getParentNode();\n        DocumentFragment decryptedFragment = \n\t\t\tserializer.deserialize(octets, sourceParent);\n\n\t// The de-serialiser returns a fragment whose children we need \n\t// to take on.\n\n\tsourceParent.replaceChild(decryptedFragment, element);\n\nneeds to be this; I tested it with my example that was failing and it fixed it:\n\n        Node parentNode = element.getParentNode();\n        if (parentNode instanceof Element) {\n            Element sourceParent = (Element) element.getParentNode();\n            DocumentFragment decryptedFragment =\n\t\t\t    serializer.deserialize(octets, sourceParent);\n\n\t\t    // The de-serialiser returns a fragment whose children we need to\n\t\t    // take on.\n\n\t\t    sourceParent.replaceChild(decryptedFragment, element);\n        } else {\n            DocumentFragment decryptedFragment = serializer.deserialize(octets,\nnull);\n            contextDocument.removeChild(contextDocument.getDocumentElement());\n            contextDocument.appendChild(decryptedFragment);\n        }\n        return (contextDocument);", "id": 47219, "time": "2003-11-11T21:07:09Z", "creator": "kdowney@amberarcher.com", "creation_time": "2003-11-11T21:07:09Z", "is_private": false}, {"count": 1, "tags": [], "creator": "berin@ozemail.com.au", "attachment_id": null, "id": 47243, "time": "2003-11-12T11:28:13Z", "bug_id": 24624, "creation_time": "2003-11-12T11:28:13Z", "is_private": false, "text": "Have added a very minor variation on your fix below, + added a test into the\nencryption unit tests (ant test_xenc) to cover this.\n\nIf you could have a look to verify the fix that would be fantastic.\n\nWith many thanks!"}, {"count": 2, "tags": [], "creator": "kdowney@amberarcher.com", "attachment_id": null, "text": "The fix works. Thanks! By the way, last night I put up documentation on how to\nuse XMLCipher with JAXP and my own XML short-term serialization package at\nhttp://support.amberarcher.com/ox/security.html. With this working, I'm able to\ntake any Java object, convert it to XML, encrypt it, decrypt it, and get back\nthe Java object. I'll amend the docs in the next build to say that it's already\nfixed. Thanks for the fast turnaround!", "id": 47263, "time": "2003-11-12T19:52:00Z", "bug_id": 24624, "creation_time": "2003-11-12T19:52:00Z", "is_private": false}]
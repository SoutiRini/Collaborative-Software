[{"count": 0, "tags": [], "text": "Created attachment 24726\nSVG document, having a grafic with color gradient in background for more realisitc appearance\n\nWe are using batik for displaying human bodies for locating their body parts. For realistic displaying we colorize the svg model with a graphic, which is embedded in svg document. The png-graphic is having a certain color gradient, for more realistic appearance. \n\nProblem:\nIf we are zoom in serveral times (shift-right mouse pressed and move up, -Xmx256M) with this svg document [see attachment], we do gain a java.lang.OutOfMemoryError.\n\nTestProgram:\npublic class JSVGCanvasDemo\n{\n    public static void main(String[] P_args)\n    {\n        JFrame F_f = new JFrame(\"Batik\");\n        JSVGCanvasDemo F_canvas = new JSVGCanvasDemo();\n\n        F_f.getContentPane().add(F_canvas.createSVGComponent());\n        F_f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        F_f.setSize(400, 400);\n        F_f.setVisible(true);\n    }\n\n    protected JSVGCanvas svgCanvas = new JSVGCanvas();\n\n    public JSVGCanvasDemo()\n    {\n        // noop\n    }\n\n    public JComponent createSVGComponent()\n    {\n        final JPanel F_panel = new JPanel(new BorderLayout());\n        F_panel.add(\"Center\", svgCanvas);\n        svgCanvas.setURI(\"file:/D:/male_front.svg\");\n        return F_panel;\n    }\n}\n\nStack:\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid1764.hprof ...\nHeap dump file created [19697489 bytes in 3.415 secs]\n-E-2009-12-17 15:45:46.887: java.lang.OutOfMemoryError: Java heap space\n\tat java.awt.image.DataBufferByte.<init>(DataBufferByte.java:42)\n\tat java.awt.image.Raster.createInterleavedRaster(Raster.java:253)\n\tat java.awt.image.Raster.createInterleavedRaster(Raster.java:194)\n\tat java.awt.image.ComponentColorModel.createCompatibleWritableRaster(ComponentColorModel.java:2808)\n\tat java.awt.image.BufferedImage.<init>(BufferedImage.java:409)\n\tat org.apache.batik.ext.awt.image.renderable.ClipRable8Bit.createRendering(ClipRable8Bit.java:158)\n\tat org.apache.batik.ext.awt.image.GraphicsUtil.drawImage(GraphicsUtil.java:448)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:549)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:509)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.CanvasGraphicsNode.primitivePaint(CanvasGraphicsNode.java:159)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:509)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRed8Bit.genRect(GraphicsNodeRed8Bit.java:140)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRed8Bit.copyData(GraphicsNodeRed8Bit.java:116)\n\tat org.apache.batik.ext.awt.image.rendered.TileCacheRed.genRect(TileCacheRed.java:63)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.drawBlockInPlace(AbstractTiledRed.java:629)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.drawBlock(AbstractTiledRed.java:544)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.copyToRasterByBlocks(AbstractTiledRed.java:430)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.copyData(AbstractTiledRed.java:297)\n\tat org.apache.batik.ext.awt.image.rendered.TranslateRed.copyData(TranslateRed.java:105)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(StaticRenderer.java:394)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(StaticRenderer.java:344)\n\tat org.apache.batik.swing.gvt.GVTTreeRenderer.run(GVTTreeRenderer.java:123)\n-E-2009-12-17 15:45:47.09: java.lang.OutOfMemoryError: Java heap space\n\tat java.awt.image.DataBufferByte.<init>(DataBufferByte.java:42)\n\tat java.awt.image.Raster.createInterleavedRaster(Raster.java:253)\n\tat java.awt.image.Raster.createInterleavedRaster(Raster.java:194)\n\tat java.awt.image.ComponentColorModel.createCompatibleWritableRaster(ComponentColorModel.java:2808)\n\tat java.awt.image.BufferedImage.<init>(BufferedImage.java:409)\n\tat org.apache.batik.ext.awt.image.renderable.ClipRable8Bit.createRendering(ClipRable8Bit.java:158)\n\tat org.apache.batik.ext.awt.image.GraphicsUtil.drawImage(GraphicsUtil.java:448)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:549)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:509)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.CanvasGraphicsNode.primitivePaint(CanvasGraphicsNode.java:159)\n\tat org.apache.batik.gvt.AbstractGraphicsNode.paint(AbstractGraphicsNode.java:509)\n\tat org.apache.batik.gvt.CompositeGraphicsNode.primitivePaint(CompositeGraphicsNode.java:165)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRed8Bit.genRect(GraphicsNodeRed8Bit.java:140)\n\tat org.apache.batik.gvt.filter.GraphicsNodeRed8Bit.copyData(GraphicsNodeRed8Bit.java:116)\n\tat org.apache.batik.ext.awt.image.rendered.TileCacheRed.genRect(TileCacheRed.java:63)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.drawBlockInPlace(AbstractTiledRed.java:629)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.drawBlock(AbstractTiledRed.java:544)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.copyToRasterByBlocks(AbstractTiledRed.java:430)\n\tat org.apache.batik.ext.awt.image.rendered.AbstractTiledRed.copyData(AbstractTiledRed.java:297)\n\tat org.apache.batik.ext.awt.image.rendered.TranslateRed.copyData(TranslateRed.java:105)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(StaticRenderer.java:394)\n\tat org.apache.batik.gvt.renderer.StaticRenderer.repaint(StaticRenderer.java:344)\n\tat org.apache.batik.swing.gvt.GVTTreeRenderer.run(GVTTreeRenderer.java:123)", "is_private": false, "id": 132904, "creator": "georg.abfalter@systema.info", "time": "2009-12-17T07:11:51Z", "bug_id": 48407, "creation_time": "2009-12-17T07:11:51Z", "attachment_id": 24726}, {"count": 1, "attachment_id": null, "creator": "helder.magalhaes@gmail.com", "is_private": false, "id": 132952, "time": "2009-12-19T12:05:50Z", "bug_id": 48407, "creation_time": "2009-12-19T12:05:50Z", "tags": [], "text": "(In reply to comment #0)\n> For realistic displaying we colorize the svg model with a graphic, which is\n> embedded in svg document. The png-graphic is having a certain color gradient,\n> for more realistic appearance. \n\nI just took a look at the document and the image format isn't PNG but JPEG. ;-)\n\n\nNevertheless, I recall a recent, tightly related commit (see revision 793536). Could you please download a nightly build [1] and try reproducing the issue again? (Although the latest nightly available, as of this writing, is already a bit outdated, it already includes the change which probably fixes the issue.)\n\nPlease report back! :-)\n\n\n[1] http://mcc.id.au/batik-nightly/"}, {"count": 2, "tags": [], "creator": "helder.magalhaes@gmail.com", "attachment_id": 24736, "id": 132953, "time": "2009-12-19T12:10:10Z", "bug_id": 48407, "creation_time": "2009-12-19T12:10:10Z", "is_private": false, "text": "Created attachment 24736\nImage embedded in SVG file\n\nI just used an online base64 converter [1] to extract the image; I'm attaching it for posterity, although I'm somehow convinced that this issue was already fixed a few months ago (see my previous comment).\n\n[1] http://www.opinionatedgeek.com/dotnet/tools/Base64Decode/"}, {"count": 3, "tags": [], "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > For realistic displaying we colorize the svg model with a graphic, which is\n> > embedded in svg document. The png-graphic is having a certain color gradient,\n> > for more realistic appearance. \n> \n> I just took a look at the document and the image format isn't PNG but JPEG. ;-)\n> \n> \n> Nevertheless, I recall a recent, tightly related commit (see revision 793536).\n> Could you please download a nightly build [1] and try reproducing the issue\n> again? (Although the latest nightly available, as of this writing, is already a\n> bit outdated, it already includes the change which probably fixes the issue.)\n> \n> Please report back! :-)\n> \n> \n> [1] http://mcc.id.au/batik-nightly/\n\ni have just retested the problem with the batik nightly build; i'm still gaining the OutOfMemmoryError :(", "is_private": false, "id": 133057, "creator": "georg.abfalter@systema.info", "time": "2009-12-22T05:41:42Z", "bug_id": 48407, "creation_time": "2009-12-22T05:41:42Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "christoph.bimminger@systema.info", "text": "The bug also occurs with up-to-date nightly build batik-src-10-05-21.\n\nI analyzed the bug, and tried to fix it with a local hack. In org.apache.batik.ext.awt.image.renderable.ClipRable8Bit an alpha mask is created, where the BufferedImage is used for. If I see right, the Alpha Mask - which supports BYTE_GRAY, only contains 100% white area in the shape region. \n\nFor my purpose, I removed the BufferedImage completely. The \"hacked\" createRendering method looks like posted below (see lines commented-out). I assume that there might occur rendering bugs when image shapes are not rectangular? But better such a rendering bug than the OutOfMemoryError.\n\nA task would, in my humble opinion, be to eliminate the BufferedImage here and use kind of \"ShapeImage\" that delegates to the shape for the alpha mask. The shape can be used to determine the alpha value of each pixel when multiplying the image with the alpha mask, without needing a large BufferedImage. But it will be tricky to find a structure to multiply image value and alpha intensity, on something different to a BufferedImage. Can a BufferedImage in original image dimension be used, and be scaled \"on the fly\" when rendering, without requireing large memory for a scaled BufferedImage?\n\npublic RenderedImage createRendering(RenderContext rc) {\n\n        AffineTransform usr2dev = rc.getTransform();\n\n        // Just copy over the rendering hints.\n        RenderingHints rh = rc.getRenderingHints();\n        if (rh == null)  rh = new RenderingHints(null);\n\n        Shape aoi = rc.getAreaOfInterest();\n        if (aoi == null) aoi = getBounds2D();\n\n        Rectangle2D rect     = getBounds2D();\n        Rectangle2D clipRect = clipPath.getBounds2D();\n        Rectangle2D aoiRect  = aoi.getBounds2D();\n\n        if ( ! rect.intersects(clipRect) )\n            return null;\n        Rectangle2D.intersect(rect, clipRect, rect);\n\n\n        if ( ! rect.intersects(aoiRect) )\n            return null;\n        Rectangle2D.intersect(rect, aoi.getBounds2D(), rect);\n\n        Rectangle devR = usr2dev.createTransformedShape(rect).getBounds();\n\n        if ((devR.width == 0) || (devR.height == 0) || false)\n            return null;\n\n//        BufferedImage bi = new BufferedImage(devR.width, devR.height,\n//                                             BufferedImage.TYPE_BYTE_GRAY);\n\n        Shape devShape = usr2dev.createTransformedShape(getClipPath());\n        Rectangle devAOIR;\n        devAOIR = usr2dev.createTransformedShape(aoi).getBounds();\n\n//        Graphics2D g2d = GraphicsUtil.createGraphics(bi, rh);\n\n        if (false) {\n            java.util.Set s = rh.keySet();\n            java.util.Iterator i = s.iterator();\n            while (i.hasNext()) {\n                Object o = i.next();\n                System.out.println(\"XXX: \" + o + \" -> \" + rh.get(o));\n            }\n        }\n//        g2d.translate(-devR.x, -devR.y);\n//        g2d.setPaint(Color.white);\n//        g2d.fill(devShape);\n//        g2d.dispose();\n\n        RenderedImage ri;\n        ri = getSource().createRendering(new RenderContext(usr2dev, rect, rh));\n\n        CachableRed cr, clipCr;\n        cr = RenderedImageCachableRed.wrap(ri);\n//        clipCr = new BufferedImageCachableRed(bi, devR.x, devR.y);\n        CachableRed ret = cr;\n//        CachableRed ret = new MultiplyAlphaRed(cr, clipCr);\n\n          // Pad back out to the proper size...\n        ret = new PadRed(ret, devAOIR, PadMode.ZERO_PAD, rh);\n\n        return ret;\n    }", "count": 4, "id": 137813, "time": "2010-06-22T07:36:51Z", "bug_id": 48407, "creation_time": "2010-06-22T07:36:51Z", "is_private": false}]
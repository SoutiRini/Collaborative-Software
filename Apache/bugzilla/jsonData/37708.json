[{"count": 0, "tags": [], "creator": "peter.hendry@capeclear.com", "text": "This is in version 1.3.0 (version has not been added to available version list\nin Bugzilla).\n\nBelow is a complete description of the problem and how to reproduce it. This is\nfrom an email I sent to the xml-security list and the followup to that email.\nAlso attached is a short program that demonstrates the different behaviors.\n\nI have made this P1 as, in toolkits like WSS4J that use xml-security, iterop is\na primary concern and this problem breaks signature interop completely.\n\n----------------\nFirst email:\n\nI have a WS-Security implementation based on xml-security and am testing\ninterop. When testing against WSS4J (which also uses xml-security) - both using\nversion 1.3.0 - I am having problems because of what appears to be different\nresults of Excl C14N depending on whether the input is a NodeSet or a root node.\nThe problem occurs when using InclusiveNamespaces.\n\nThe issue appears to be that when the input is a NodeSet, the\nInclusiveNamespaces value is ignored. What happens is the following sequence of\ncalls:\n\nTransformC14NExclusive.enginePerformTransform(inputWithNodeSet)\n -> Canonicalizer20010315Excl.engineCanonicalize(inputWithNodeSet, \"env ns0 xsi\nwsu\")\n   -> _inclusiveNSSet = \"env ns0 xsi wsu\"\n   -> CanonicalizerBase.engineCanonicalize(inputWithNodeSet)\n     -> Canonicalizer20010315Excl.engineCanonicalizeXPathNodeSet(xpathNodeSet)\n       -> Canonicalizer20010315Excl.engineCanonicalizeXPathNodeSet(xpathNodeSet, \"\")\n       -> _inclusiveNSSet = \"\"\n\nSo the inclusive namespaces passed in originally are forgotten to be replaced by\nan empty list.\n\nWhen passing a root node instead of a node set, the inclusive namespace list is\nused and so the result is different. In the XML below, the document element is\nenv:Envelope and env:Body is that target node for C14N. For the nodeset the\nresult on the SOAP body is (formatting added)\n\n<env:Body \n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" \n   \nxmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n\n    wsu:Id=\"body\">\n  <ns0:Ping \n      xmlns:ns0=\"http://xmlsoap.org/Ping\" \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xsi:type=\"ns0:ping\">\n    <ns0:text xsi:type=\"xsd:string\">hello</ns0:text>\n  </ns0:Ping>\n</env:Body>\n\nand for a root node (being the body element in this case)\n\n<env:Body \n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:ns0=\"http://xmlsoap.org/Ping\" \n   \nxmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    wsu:Id=\"body\">\n  <ns0:Ping xsi:type=\"ns0:ping\">\n    <ns0:text xsi:type=\"xsd:string\">hello</ns0:text>\n  </ns0:Ping>\n</env:Body>\n\nI attach a test program that compares the 2 ways of doing this on the same\ndocument and shows the results (the nodeset result differs from the one above as\nit does not include any namespace declarations).\n\nIs this a bug or am I not understanding the difference between processing based\non a nodeset and processing based on a root node?\n\n----------------\nResponse:\nraul.benito.garcia@gmail.com; on behalf of; Raul Benito [raul@apache.org]\n\nYou need to XMLUtils.circumventBug* before calling the c14n with nodesets...\n\n----------------\nMy followup with full description of the test cases that show the problem:\n\nThanks for the reply. However, the line in my demo\n\n    input.setNeedsToBeExpanded(true);\n\ncauses the following code in CanonicalizerBase to be called\n\n    if (input.isNeedsToBeExpanded()) {\n        XMLUtils.circumventBug2650(doc);\n    } \n\nwhich does call XMLUtils.circumventBug2650 (I traced it) on the nodeset. Still\nthe namespaces in PrefixList are not output in the root element.\n\nI have investigated some more and have managed to get the result I want but it\nhas made me more convinced there is a bug in xml-security's Excl C14N processing\n(or that I really don't understand it ;) ).\n\nThere are 3 test cases which each produce different output but which I suspect\nshould produce the same output. \n\n1) \n\nINPUT: \n  XMLSignatureInput with nodeSet and set \"needsToBeExpanded\" to true. \n\nDESCRIPTION: \n  In this case XMLUtils.circumventBug2650() is called in CanonicalizerBase\n  because \"needsToBeExpanded\" is set in the input.\n\nCODE:\n  input = new XMLSignatureInput(nodeSet);\n  input.setNeedsToBeExpanded(true);\n  bytes = c14n.engineCanonicalize(input, \"env ns0 xsi wsu\");\n\nOUTPUT (formatted):\n  <env:Body wsu:Id=\"body\">\n    <ns0:Ping xsi:type=\"ns0:ping\">\n      <ns0:text xsi:type=\"xsd:string\">hello</ns0:text>\n    </ns0:Ping>\n  </env:Body>\n\nCOMMENT: \n  missing namespace declarations on Body. The call to circumventBug2650\n  is done by the canonicalizer after the nodeset is created. Doing another\n  test, where the nodeset is created and then circumventBug2650 is called\n  explicitely before C14N, produces the same result.\n\n2)\n\nINPUT: \n  XMLSignatureInput with nodeSet on which circumventBug2650 was called before \n  the nodeSet was created from the document.\n\nDESCRIPTION: \n  the Document is created, circumventBug2650 called and then the nodeSet\n  is created. The input is again an XMLSignatureInput with a nodeSet but\n  this time \"needsToBeExpanded\" is not set to true because the circumvent\n  was already called.\n\nCODE:\n  XMLUtils.circumventBug2650(doc);\n  XMLUtils.getSet(doc.getDocumentElement().getFirstChild(), nodeSet, null, false);\n  input = new XMLSignatureInput(nodeSet);\n  bytes = c14n.engineCanonicalize(input, \"env ns0 xsi wsu\");\n\nOUTPUT:\n  <env:Body \n      xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" \n     \nxmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n\n      wsu:Id=\"body\">\n    <ns0:Ping xmlns:ns0=\"http://xmlsoap.org/Ping\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n        xsi:type=\"ns0:ping\">\n      <ns0:text xsi:type=\"xsd:string\">hello</ns0:text>\n    </ns0:Ping>\n  </env:Body>\n\nCOMMENT: \n  This is the output that would be expected if InclusiveNamespaces=\"\".\n  However, the value \"env ns0 xsi wsu\" is passed as the prefix list.\n  Tracing the code in the Canonicalizer shows that the prefix list is\n  lost.\n\n3)\n\nINPUT: \n  NodeSet with circumventBug2650 called on the document before the \n  nodeset is created. \n\nDESCRIPTION: \n  The method \"engineCanonicalizeXPathNodeSet() is called directly\n  here instead of indirectly as in the previous cases so the \n  InclusiveNamespaces value is assured to be passed correctly to \n  the method.\n\nCODE:\n  XMLUtils.circumventBug2650(doc);\n  XMLUtils.getSet(doc.getDocumentElement().getFirstChild(), nodeSet, null, false);\n  bytes = c14n.engineCanonicalizeXPathNodeSet(nodeSet, \"env ns0 xsi wsu\");\n\nOUTPUT:\n  <env:Body \n      xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\"\n      xmlns:ns0=\"http://xmlsoap.org/Ping\"\n     \nxmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\n\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      wsu:Id=\"body\">\n    <ns0:Ping xsi:type=\"ns0:ping\">\n      <ns0:text xsi:type=\"xsd:string\">hello</ns0:text>\n    </ns0:Ping>\n  </env:Body>\n\nCOMMENT: \n  this is the output I was expecting from all of the above cases. \n  The InclusiveNamespaces value means those namespace prefix \n  declarations should appear on the root node as they do here.\n\n4)\n\nINPUT: \n  root node\n\nDESCRIPTION:\n  circumventBug2650 may or may not be called and \"needsToBeExpanded\" \n  can be true or false. The same result is obtained in each case.\n\nCODE:\n  input = new XMLSignatureInput(doc.getDocumentElement().getFirstChild());\n  byte[] bytes = c14n.engineCanonicalize(input, \"env ns0 xsi wsu\");\n\nOUTPUT:\n  Same as case 3)\n\nCOMMENT: \n  the result using a root node is consistent no matter the settings. \n  Should this also be the case for using nodesets?\n\nCases 3 and 4 produce the same (correct I think) output. Cases 1 and 2 produce\ndifferent output from each other and from 3 and 4. Is this the expected\nbehaviour is cases 1 and 2 and, if so, why?\n\nOr if someone could tell me where my logic/expectations are in error that would\nalso be great.\n\nI have attached an updated class that demonstrates each of the above cases.\n\nPete", "id": 83003, "time": "2005-11-30T08:51:29Z", "bug_id": 37708, "creation_time": "2005-11-30T08:51:29Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 37708, "attachment_id": 17083, "text": "Created attachment 17083\nBrief test showing all described cases and their results\n\nThis is a small program showing the different ways of canonicalizing with\neither a NodeSet or RootNode. It shows the different output depending on the\nmethod uses. It shows that:\n\n1) the output differs between rootNode and nodeSet\n2) PrefixList is ignored when using nodeSet\n3) XMLSignatureInput.needsToBeExpanded(true) has no effect for nodeSet when\ncalled within the Canonicalizer (if not called before nodeSet is created)\n4) rootNode works correctly in all cases, nodeSet works correctly in only one\ncase and that is not the case used by the signature code in xml-security (or\nWSS4J)", "id": 83004, "time": "2005-11-30T08:55:48Z", "creator": "peter.hendry@capeclear.com", "creation_time": "2005-11-30T08:55:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "peter.hendry@capeclear.com", "text": "I just noticed that the latest wss4j SVN trunk has changed the\nEnvelopeIdResolver to use a root node instead of a nodeSet as it did before.\nPerhaps they already noticed this problem and found using the root node fixed it?", "id": 83005, "time": "2005-11-30T09:02:12Z", "bug_id": 37708, "creation_time": "2005-11-30T09:02:12Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 37708, "text": "I have a tentative fix for this, I am still testing it. The fix is trivial - \nCanonicalizer20010315Excl.java should not override \nengineCanonicalizeXPathNodeSet(Set xpathNodeSet). This fixes the problem *if*\nyou manually call XMLUtils.circumventBug2650 before the node-set is created, it\ndoes not work if you call it after the node-set is created (either directly, or\nby calling XMLSignatureInput.setNeedsToBeExpanded). I feel that this is an\nacceptable workaround and this bug should be marked as resolved if the rest\nof the testing goes ok. It may be the case that once the node-set has been\ncreated it is too late to call circumventBug2650 - maybe Raul can comment on\nthat.\n\nsvn diff Canonicalizer20010315Excl.java\nIndex: Canonicalizer20010315Excl.java\n===================================================================\n--- Canonicalizer20010315Excl.java      (revision 357070)\n+++ Canonicalizer20010315Excl.java      (working copy)\n@@ -209,10 +209,10 @@\n        }\n\n     /** @inheritDoc */\n-    public byte[] engineCanonicalizeXPathNodeSet(Set xpathNodeSet\n-            ) throws CanonicalizationException {\n-        return engineCanonicalizeXPathNodeSet(xpathNodeSet,\"\");\n-    }\n+//    public byte[] engineCanonicalizeXPathNodeSet(Set xpathNodeSet\n+//            ) throws CanonicalizationException {\n+//        return engineCanonicalizeXPathNodeSet(xpathNodeSet,\"\");\n+//    }\n\n        /**\n      * @inheritDoc\n@@ -317,4 +317,4 @@\n\n                return result.iterator();\n        }\n-}\n\\ No newline at end of file\n+}", "count": 3, "id": 83863, "time": "2005-12-20T20:02:01Z", "creator": "sean.mullan@oracle.com", "creation_time": "2005-12-20T20:02:01Z", "is_private": false}, {"count": 4, "tags": [], "creator": "raul-info@r-bg.com", "text": "Closing old bugs.", "id": 91963, "time": "2006-08-06T17:41:06Z", "bug_id": 37708, "creation_time": "2006-08-06T17:41:06Z", "is_private": false, "attachment_id": null}]
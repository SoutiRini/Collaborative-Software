[{"count": 0, "attachment_id": null, "bug_id": 47339, "text": "I'm working on a project to extract the content of XLS into useable text files. I'm trying to get an understanding of how data types can be used. I created an XLS document with a formula \"=a+B\". This is invalid. I wanted to see how POI would handle it. It didn't handle it very well. In Excel CSV output, it would produce \"#VALUE!\". POI generates an exception which is listed below.\n\norg.apache.poi.hssf.record.formula.Ptg, method createBasePtg, does not handle value 24 (0x18). While reviewing the source, I don't see it handle value 0x1b either.\n\nHowever, the code in createPtg method says \"if (id < 0x20) {\", then call createBasePtg.\n\nThe source in 3.5 is the same as 3.2.\n\nUnfortunately, I don't have a patch or a fix for this issue, as I don't fully understand the correct action that should be taken.\n\nException in thread \"main\" org.apache.poi.hssf.record.RecordFormatException: Unable to construct record instance\n\tat org.apache.poi.hssf.record.RecordFactory.createRecord(RecordFactory.java:186)\n\tat org.apache.poi.hssf.eventusermodel.HSSFRecordStream.getNextRecord(HSSFRecordStream.java:162)\n\tat org.apache.poi.hssf.eventusermodel.HSSFRecordStream.nextRecord(HSSFRecordStream.java:93)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:141)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:98)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processWorkbookEvents(HSSFEventFactory.java:63)\n...\nCaused by: java.lang.RuntimeException: Unexpected base token id (24)\n\tat org.apache.poi.hssf.record.formula.Ptg.createBasePtg(Ptg.java:161)\n\tat org.apache.poi.hssf.record.formula.Ptg.createPtg(Ptg.java:82)\n\tat org.apache.poi.hssf.record.formula.Ptg.readTokens(Ptg.java:54)\n\tat org.apache.poi.hssf.record.FormulaRecord.<init>(FormulaRecord.java:202)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecord(RecordFactory.java:184)\n\t... 7 more", "id": 127770, "time": "2009-06-09T13:14:11Z", "creator": "robert_kish@yahoo.com", "creation_time": "2009-06-09T13:14:11Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": 23782, "bug_id": 47339, "text": "Created attachment 23782\nCell 1, Row 1 contains error that causes the problem", "id": 127771, "time": "2009-06-09T13:14:44Z", "creator": "robert_kish@yahoo.com", "creation_time": "2009-06-09T13:14:44Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": 23788, "bug_id": 47339, "text": "Created attachment 23788\nFormula referencing range's label / name that also fails.\n\nThe formula on line 4 =SUM(Results) also causes the reported error. If I change the formula to =SUM(A2:A3), then all is good. But using the Label's name, it doesn't work.", "id": 127810, "time": "2009-06-10T11:36:07Z", "creator": "robert_kish@yahoo.com", "creation_time": "2009-06-10T11:36:07Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 47339, "attachment_id": null, "is_private": false, "id": 127852, "time": "2009-06-10T16:56:34Z", "creator": "josh@apache.org", "creation_time": "2009-06-10T16:56:34Z", "text": "It looks like you are using a deprecated feature of Excel ('Natural Language References').  From version 2007 onward this style of formula reference is not available (Excel now automatically converts old files to use simple cell references).\n\nReferencing cells/ranges with labels is fragile and vulnerable to ambiguity.  This is probably why MS has decided to steer away from it.  For example - What happens when the label cell is moved?  Is the actual cell below or to the right of the label cell? If the label refers to a range, how are the exact boundaries of the range determined?\n\nA better solution is to use proper defined names (AKA 'named ranges') which have been around for a while.\n\nI've closed this bug off for the moment (hoping that using defined names works for you).\n\n'Natural Language References' are probably not in high demand for POI functionality, so if you want to have this supported, you'll probably need to do a lot of the leg-work.  It might make sense to just have POI convert old tNlr (0x18) to equivalent tRef(0x24) or tArea(0x25) PTGs (like Excel 2007 does).  Unfortunately, tNlr is not well documented.  I found a bit of information in the OOO source code.   It seems like the tNlr field layout is variable and governed by the second byte (first byte is 0x18).  In the OOO source code the values of the second byte have constants called \"EXC_TOK_NLR_*\" (see below).  With some quick experimentation (on an old machine with  Excel 2003) I was able to produce tNlr tokens with second byte (0x06, 0x07 and 0x0A).  Perhaps these are all that POI would need to support. \n\n\nHere is a link to some documentation about xlformula.hxx:\nhttp://docs.go-oo.org/sc/html/xlformula_8hxx.html#f9f8e1003e4f4a0f06057ad5145250c8\n\n\nSome Hex Dumps of tNlr tokens\n18 07 04 00 00 80   // from the sample file - label 'a' is in A5\n18 06 06 00 09 80   // label in I7, value in J7\n18 0A 0D 00 03 80   25 0E 00 11 00 03 00 03 00  // range label in D14, values in D15:D18  - note tArea(D15:D18) seems to be correctly encoded here (starting at 0x25)."}]
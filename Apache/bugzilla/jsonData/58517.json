[{"count": 0, "text": "Apache just fill the memory with buffer and sessions when this php code get executed.\nI couldn't know whats exactly the reason, but when the code get executed by only one request, the apache just fill it self and the server go down.\nthe php POC:\n\"\"\"\"\"\"\"\"\"\"\n<?php\n\nfunction p404curl($url){\n\t$ch = curl_init();      \n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);\n        curl_setopt($ch, CURLOPT_USERAGENT, \"Chrome/36.0.1985.125\");\n        return curl_exec($ch);\n}\n\nif (strtolower(substr(PHP_OS,0,3))==\"win\")\n    $sys='win';\n else\n    $sys='unix';\n\n$me = basename(__FILE__ );\n$uul = $_SERVER['PHP_SELF'];\n$rew = md5(time());\n$uul = str_replace($_SERVER['REQUEST_URI'],$rew,$uul);\n$uul= 'http://'.$_SERVER['HTTP_HOST'].$uul;\n$uul1 = $_SERVER['REQUEST_URI'];\n$uul = str_replace($rew,$_SERVER['REQUEST_URI'],$uul);\n\n$d404 = 'e';\nif ($sys == 'win'){\n\tif (!isset($_SESSION['hidden']) || !file_exists('C:\\\\Users\\\\Default\\\\AppData\\\\Local\\\\Temp\\\\'.md5($uul1))){\n\t\t$p404 = p404curl($uul) or $d404;\n\t\tfile_put_contents(\"C:\\\\Users\\\\Default\\\\AppData\\\\Local\\\\Temp\\\\\".md5($uul1),$p404);\n\t\t$_SESSION['hidden'] = md5($uul1);\n\t}else{\n\t\t$p404 = file_get_contents('C:\\\\Users\\\\Default\\\\AppData\\\\Local\\\\Temp\\\\'.md5($uul1));\n\t}\n}else{\n\tif (!isset($_SESSION['hidden']) || !file_exists('/tmp/'.md5($uul1))){\n\t\t$p404 = p404curl($uul) or $d404;\n\t\tfile_put_contents('/tmp/'.md5($uul1),$p404);\n\t\t$_SESSION['hidden'] = md5($uul1);\n\t\t\n\t}else{\n\t\t$p404 = file_get_contents('/tmp/'.md5($uul1));\n\t\t\n\t}\n}\n\necho $p404;\n\tdie();\n\"\"\"\"\"\"\"\"\"\"", "bug_id": 58517, "attachment_id": null, "id": 185840, "time": "2015-10-22T06:27:41Z", "creator": "a.x.l@live.com", "creation_time": "2015-10-22T06:27:41Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 58517, "attachment_id": null, "text": "It's not really obvious this script does not provoke any loop since, as far as I understand it, it cURLs on the requested Host...\nIf the cURL request is itself handled by this php script, that's a loop (or more exactly an infinite recursion).\nDid you verify this point?", "id": 185848, "time": "2015-10-22T14:16:09Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-10-22T14:16:09Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58517, "attachment_id": null, "text": "will, I think your right about the \"infinite recursion\", but as I tested it, Apache dose not have any limits for its memory in this kind of attacks. because it try to respond to the first request by trying to respond for the request after it and keeps like that. So it dose n't fill all memory, but it fills apache process.", "id": 185851, "time": "2015-10-22T18:15:15Z", "creator": "a.x.l@live.com", "creation_time": "2015-10-22T18:15:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58517, "attachment_id": null, "text": "It really deppends on how you run PHP regarding the memory/processes footprints, inner process (mod_php) or via a proxy (mod_proxy_* to php-fpm), the latter being much less expensive...\n\nIn both cases though, the number settings (MaxRequestWorkers, ...) should be tuned to fit the hardware/system capabilities, so that httpd won't exhaust its resources before reaching these limits.\n\nAnyway, this is not a bug in httpd, so I'm closing this report.", "id": 185856, "time": "2015-10-22T20:07:16Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-10-22T20:07:16Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58517, "attachment_id": null, "text": "All right, Thanks and sorry for your time, have a good one.", "id": 185858, "time": "2015-10-22T20:41:08Z", "creator": "a.x.l@live.com", "creation_time": "2015-10-22T20:41:08Z", "is_private": false}]
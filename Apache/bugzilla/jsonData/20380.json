[{"count": 0, "attachment_id": null, "bug_id": 20380, "text": "AccessLogValve.java assumes that all timezones are exact multiples of an hour.\nThis doesn't work when you live in Adelaide (Australia) and other places around\nthe world.\n\nWhen configured in that timezone, the log message looks like:\n\n127.0.0.1 - - [31/May/2003:14:26:23 9050] \"GET /hello HTTP/1.1\" 404 683\n\n(Notice the 9050!)\n\nI found this when I was working on a MonthlyAccessLogValve, and fixed it there.\nThis will presumably be the same in other parts of the logging functionality.\n\nHere's some code that appears to correctly calculate the timezone for both\nhour based, and half-hour based timezones.\n\n    /**\n     * Creating a time zone that is formatted as \"+|-HHMM\" is not\n     * made easy by the Java classes. This provides a means of\n     * creating a suitable formatted timezone.\n     */\n    private String createTimeZoneFormat(TimeZone tz, Date now)\n    {\n        int raw = (tz.getRawOffset() / 60000);\n        if (tz.inDaylightTime(now))\n        {\n            raw += 60;\n        }\n        int hours = raw / 60;\n        int mins = raw - (hours*60);\n\n        StringBuffer sb = new StringBuffer();\n\n        if (hours >=0)\n        {\n            sb.append('+');\n        }\n        else\n        {\n            sb.append('-');\n            hours *= (-1);\n            mins *= (-1);\n        }\n        \n        if (hours < 10)\n        {\n            sb.append('0');\n        }\n        sb.append(hours);\n        \n        if (mins < 10)\n        {\n            sb.append('0');\n        }\n        sb.append(mins);\n        \n        return sb.toString();\n    }", "id": 38111, "time": "2003-05-31T05:15:50Z", "creator": "jon@eaves.org", "creation_time": "2003-05-31T05:15:50Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 20380, "attachment_id": null, "id": 38370, "time": "2003-06-04T17:01:40Z", "creator": "funkman@joedog.org", "creation_time": "2003-06-04T17:01:40Z", "is_private": false, "text": "Fixed in tomcat5. If ok - will eventually backport to 4.1"}, {"count": 2, "attachment_id": null, "bug_id": 20380, "text": "The offset still appears to be incorrect, though for a different reason that\nthat originally reported: the timezone offset output does not include daylight\nsaving. At the moment:\n\n   x.x.x.x - - [25/Mar/2004:10:17:07 +0930] \"GET / HTTP/1.1\" 304 -\n\nshould be reported as:\n\n   x.x.x.x - - [25/Mar/2004:10:17:07 +1030] \"GET / HTTP/1.1\" 304 -\n\nLooking at org.apache.catalina.valves.AccessLogValve (4.1.30), line 1128 is:\n   timeZone = calculateTimeZoneOffset(tz.getRawOffset());\n\nI think this should use the TimeZone.getOffset() method instead, which returns\nthe offset including DST. AFAICS from the CVS history the getRawOffset() method\nhas always been used.\n\nConsidering the length of time this has been in the source, either (a) I'm\nwrong, or (b) few people care.", "id": 54628, "time": "2004-03-25T01:07:33Z", "creator": "jt@essential.com.au", "creation_time": "2004-03-25T01:07:33Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 72933, "time": "2005-03-28T21:12:21Z", "bug_id": 20380, "creation_time": "2005-03-28T21:12:21Z", "is_private": false, "text": "This has now been fixed in TC4.1.x and TC5.5.x\n\nFor the record getOffset() can't be used (at least in TC4) as it is a JDK 1.4\nmethod and TC4 has to work with JDK 1.2"}]
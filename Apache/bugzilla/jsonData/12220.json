[{"count": 0, "tags": [], "text": "My version of JMeter is a CVS checkout at Fri Aug 23 01:33:17  2002  UTC/GMT.\n\nI am trying to parameterise my test plans as much as possible using the\nUser Variables that may be set for a Test Plan.\n\nI have a standard web context under which my web application can be installed.\nLet's say this is /app/ .\n\nI define a User Variable to capture this in my Test Plan:\n\nname: appCxt    value: /app/\n\nI can also install my web application to alternative contexts under the web \nserver.\n\nI define a User Variable to capture this in my Test Plan, and alter the above \nto do a second level expansion:\n\nname: appCxt    value: ${stdAppCxt}\n\nname: stdAppCxt value: /app/\n\nNow, in general this seems to work. ${appCxt} ultimately expands to /app/ . I \ncan define an HTTP Request with Path:\n\n${appCxt}morepath/servletOneName\n\nand when the Test Plan is run this expands to (all caps for generic terms \ninstead of literal values):\n\nhttp://IPADDR:PORT/app/morepath/servletOneName?PARAM=VALUE\n\nSidebar: I note that it is /app/morepath, not //app/morepath. This has minor \ninterest when we get to the actual fault description below.\n\n[[ In my actual Test Plan the only other thing worth mentioning is that VALUE \nis randomly selected from values in the preceding response. This is done using \nHTML Link Parser, and PARAM value of .* in the HTTP Request itself. I do not \nthink this has bearing on the bug report. ]]\n\nHowever things can get a bit more complex. Let's say I use __regexFunction to \ndecide what part of the Path should be for my NEXT HTTP Request in my Test \nPlan. Path is like this:\n\n${appCxt}${__regexFunction(ENCODED_ARGUMENTS)}\n\nand when the Test Plan is run this expands to (all caps for generic terms \ninstead of literal values):\n\nhttp://IPADDR:PORT/${stdAppCxt}pathfromregexsubst/servletNameFromRegexGroupOne?\nPARAM=VALUE\n\nSo, the INITIAL ${appCxt} has been expanded, and the ${__regexFunction()} has \nbeen executed and substituted, but the value of ${appCxt} has NOT been \nrecursively expanded.\n\nIs recursive expansions of ${} references in text fields intended in JMeter, or \nam I getting the recursive expansion in the simple case first stated by \naccident?  Is it recursive expansion or simply 2 passes at expansion?\n\nThis concludes the statement of the 'fault'.\nWhat follows is incidental supporting information and the minor sidebar \ndiscussion.\n\n[[ In my actual test plan the __regexFunction is something like this:\n${__regexFunction(name%3D%22%5Cw%2BItemPage%22%5Cs%2Baction%3D%22%28%5Cw%\n2BItemAction%29%22,SOMEPATH%2F%241%24,1,,OTHERPATH%2FSOMESERVLET,itemActionREF)}\nwhich I think decodes to:\n${__regexFunction(name=\"\\w+ItemPage\"\\s+action=\"(\\w+ItemAction)\",SOMEPATH/$1\n$,1,,OTHERPATH/SOMESERVLET,itemActionREF)} \n\nAlso, the PARAM value for this HTTP Request with the Path problem is also found \nand substituted using another regex, similar in style to the Path fragment \nregex:\n${__regexFunction(name%3D%22productId%22%5Cs%2Bvalue%3D%22%28%5Cw%2B%29%22,%241%\n24,1,,NOMATCH,productIdREF)}\nwhich I think decodes to:\n${__regexFunction(name=\"productId\"\\s+value=\"(\\w%+)\",$1\n$,1,,NOMATCH,productIdREF)} ]]\n\nMy workaround for the moment is to directly set appCxt to /app/, rather than \n${stdAppCxt}. This is the only way to not affect the body of my Test Plan and \nkeep the workaround isolated to one easy to find place.\n\nSidebar: since it is /${stdAppCxt}pathfromregexsubst, I assume that in the \nsimple case description above that /app/somepath occurs instead \nof //app/somepath due to smarts in JMeter for creating the URL from the various \nHTTP Request settings and fields. The leading '/' of Path value is dropped?", "is_private": false, "bug_id": 12220, "id": 22095, "time": "2002-09-02T02:03:38Z", "creator": "johnk@nstc.nec.com.au", "creation_time": "2002-09-02T02:03:38Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 12220, "text": "Oh, yeah, this problem has only been observed in Path of HTTP request, so I \nhave changed the Component from main to HTTP.\n\nHowever, I think this is a more general issue and can apply to other multiple \n${} expansions in fields that are not HTTP Request fields. I just do not have \nthe test case to show it.\n", "id": 22102, "time": "2002-09-02T02:41:12Z", "creator": "johnk@nstc.nec.com.au", "creation_time": "2002-09-02T02:41:12Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 12220, "is_private": false, "text": "It is entirely accidental that it works in one case and not the other.  It is\nnot intended to work this way at all.  JMeter allows functions to be written to\ncontain user-defined values, and thus sometimes 2 passes are made, but they are\nspecifically targetted at first resolving user-defined values, and then functions.  \n\nIf desired, I'll make this an enhancement request to do as many passes as\nrequired to resolve all values.", "id": 22117, "time": "2002-09-02T13:45:55Z", "creator": "mstover1@apache.org", "creation_time": "2002-09-02T13:45:55Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 12220, "is_private": false, "text": "The enhancement would be appreciated. Thanks for your explanation.\n", "id": 22141, "time": "2002-09-02T23:50:03Z", "creator": "johnk@nstc.nec.com.au", "creation_time": "2002-09-02T23:50:03Z", "attachment_id": null}]
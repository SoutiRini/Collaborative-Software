[{"count": 0, "tags": [], "creator": "alan@expertdecision.com", "attachment_id": null, "id": 10239, "time": "2002-02-02T20:20:27Z", "bug_id": 6197, "creation_time": "2002-02-02T20:20:27Z", "is_private": false, "text": "Using patterns in simple types does not work, ie, the parser does not detect \nviolations of the pattern in the xml."}, {"count": 1, "tags": [], "creator": "elena@apache.org", "attachment_id": null, "id": 10304, "time": "2002-02-04T16:15:17Z", "bug_id": 6197, "creation_time": "2002-02-04T16:15:17Z", "is_private": false, "text": "Would you mind picking up the latest Xerces release (Xerces2) and checking if \nthe error still exists?\nAlso, it would be very helpful if you gave specific examples why you think \npatterns don't work.\nThank you."}, {"count": 2, "attachment_id": null, "bug_id": 6197, "text": "Hi,\nWe were simply trying to constrain an ISBN value.  Even the following did not \nwork, and we did have the appropriate features set and were using SAX.\n\n\t<xsd:simpleType name=\"ISBNType\">\n\t\t<xsd:restriction base=\"xsd:string\">\n\t\t\t<xsd:pattern value=\"[0-9]{10}\"/>\n\t\t</xsd:restriction>\n\t</xsd:simpleType>\n\nWe tried all sorts of patterns and it doesn't seem to check violations of any \nof them.  Even a pattern of [A-Z} was passed, etc.\n\nHere is a sample xml in which all the isbn's passed:\n\t<storeName>Jon's Books</storeName>\n\t<bookList>\n\t\t<entry softCover=\"true\">\n\t\t\t<title>T1</title>\n\t\t\t<author>Jon Oliver</author>\n\t\t\t<publishInfo>\n\t\t\t\t<publisher>jack</publisher>\n\t\t\t\t<datePublished>2002-01-01</datePublished>\n\t\t\t</publishInfo>\n\t\t\t<cost>23</cost>\n\t\t\t<numPage>1233</numPage>\n\t\t\t<numStock>1</numStock>\n\t\t\t<ISBN>1-1-1-1-2222jasdlfjkljf/t22-1</ISBN>\n\t\t\t<comment>This one rocks</comment>\n\t\t\t<comment>A lot!</comment>\n\t\t</entry>\n\t\t<entry softCover=\"true\">\n\t\t\t<title>T2</title>\n\t\t\t<author>George</author>\n\t\t\t<publishInfo>\n\t\t\t\t<publisher>Jack Smith</publisher>\n\t\t\t\t<datePublished>2002-02-02</datePublished>\n\t\t\t</publishInfo>\n\t\t\t<cost>0</cost>\n\t\t\t<numPage>5</numPage>\n\t\t\t<numStock>10</numStock>\n\t\t\t<ISBN></ISBN>\n\t\t\t<comment></comment>\n\t\t</entry>\n\t\t<entry softCover=\"true\">\n\t\t\t<title>T3</title>\n\t\t\t<author>Jonathan</author>\n\t\t\t<author>Lisa</author>\n\t\t\t<author>Willow</author>\n\t\t\t<author>Jeremy</author>\n\t\t\t<publishInfo>\n\t\t\t\t<publisher>everyone</publisher>\n\t\t\t\t<datePublished>1202-11-11</datePublished>\n\t\t\t</publishInfo>\n\t\t\t<cost>10</cost>\n\t\t\t<numPage>1999</numPage>\n\t\t\t<numStock>1</numStock>\n\t\t\t<ISBN>1-5-124234244332434465454-6</ISBN>\n\t\t\t<comment>This one has a really long ISBN</comment>\n\t\t</entry>\n\nHere is the complete schema (without namespaces):\n\t<xsd:complexType name=\"publishType\">\n\t\t<xsd:sequence>\n\t\t\t<xsd:element name=\"publisher\" type=\"xsd:string\"/>\n\t\t\t<xsd:element name=\"datePublished\" type=\"xsd:date\" \n\t\t\t\tminOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\t\t</xsd:sequence>\n\t</xsd:complexType>\n\n\t<xsd:simpleType name=\"ISBNType\">\n\t\t<xsd:restriction base=\"xsd:string\">\n\t\t\t<xsd:pattern value=\"[A-Z]\"/>\n\t\t</xsd:restriction>\n\t</xsd:simpleType>\n\n\n\t<xsd:complexType name=\"entryType\">\n\t\t<xsd:sequence>\n\t\t\t<xsd:element name=\"title\" type=\"xsd:string\"/>\n\t\t\t<xsd:element name=\"author\" type=\"xsd:string\"\n\t\t\t\tmaxOccurs=\"unbounded\"/>\n\t\t\t<xsd:element name=\"publishInfo\" type=\"publishType\"/>\n\t\t\t<xsd:element name=\"cost\" type=\"xsd:decimal\"/>\n\t\t\t<xsd:element name=\"numPage\" \ntype=\"xsd:nonNegativeInteger\"\n\t\t\t\tminOccurs=\"0\"/>\n\t\t\t<xsd:element name=\"numStock\" type=\"xsd:integer\"/>\n\t\t\t<xsd:element name=\"ISBN\" type=\"ISBNType\"/>\n\t\t\t<xsd:element name=\"comment\" type=\"xsd:string\"\n\t\t\t\tminOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\t\t</xsd:sequence>\n\t\t<xsd:attribute name=\"softCover\" type=\"xsd:boolean\" \ndefault=\"true\"/>\n\t</xsd:complexType>\n\n\t<xsd:complexType name=\"bookListType\">\n\t\t<xsd:sequence>\n\t\t\t<xsd:element name=\"entry\" type=\"entryType\"\n\t\t\t\tmaxOccurs=\"unbounded\" minOccurs=\"0\"/>\n\t\t</xsd:sequence>\n\t</xsd:complexType>\n\n\t<xsd:element name=\"inventory\">\n\t\t<xsd:complexType>\n\t\t\t<xsd:sequence>\n\t\t\t\t<xsd:element name=\"storeName\" \ntype=\"xsd:string\"/>\n\t\t\t\t<xsd:element name=\"bookList\" \ntype=\"bookListType\" \n\t\t\t\t\tminOccurs=\"0\"/>\n\t\t\t</xsd:sequence>\n\t\t</xsd:complexType>\n\t</xsd:element>\n", "id": 10307, "time": "2002-02-04T17:04:10Z", "creator": "alan@expertdecision.com", "creation_time": "2002-02-04T17:04:10Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 6197, "text": "I tried to test a few patterns with Xerces2 FCS and latest CVS extract. Xerces\nbehaves correctly and throws appropriate errors for invalid patterns. I tried\nfor patterns:\n[A-Z} - gives Error: InvalidRegex: Pattern value '[A-Z}' is not a valid regular\nexpression: 'Unexpected end of the pattern in a character class.'\n[0-9]{10} - works fine.\n[A-Z] - works fine.\n\nI could not find any misbehaviour of xerces for patterns. Also, I believe you\nhave set an ErrorHandler. Still if you face problems, feel free to re-open this.", "id": 10355, "attachment_id": null, "creator": "rahul.srivastava@sun.com", "creation_time": "2002-02-05T10:32:42Z", "time": "2002-02-05T10:32:42Z", "is_private": false}]
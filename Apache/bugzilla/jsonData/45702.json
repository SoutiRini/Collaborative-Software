[{"count": 0, "tags": [], "bug_id": 45702, "attachment_id": null, "id": 120162, "time": "2008-08-28T00:36:08Z", "creator": "patrice.rosnet@free.fr", "creation_time": "2008-08-28T00:36:08Z", "is_private": false, "text": "Some ID cannot be resolved by fo:page-number-citation-last\n\nWith FOP-trunk_svn689406\nWARN: Page 1: Unresolved ID reference \"space-after\" found.\nWARN: Page 1: Unresolved ID reference \"margin-bottom\" found.\nWARN: Page 1: Unresolved ID reference \"margin\" found.\nWARN: Page 1: Unresolved ID reference \"padding\" found.\nWARN: Page 1: Unresolved ID reference \"padding-bottom\" found.\n\nWith FOP 0.95:\nWARN: Page 1: Unresolved id reference \"inline\" found."}, {"count": 1, "attachment_id": 22490, "bug_id": 45702, "is_private": false, "id": 120163, "time": "2008-08-28T00:40:38Z", "creator": "patrice.rosnet@free.fr", "creation_time": "2008-08-28T00:40:38Z", "tags": [], "text": "Created attachment 22490\nFor testing\n\nTesting file that generates those warning messages"}, {"count": 2, "tags": [], "creator": "patrice.rosnet@free.fr", "attachment_id": 22492, "text": "Created attachment 22492\nTest file with several pages for each ID\n\nThe preceding test has one page for each ID (PNC=PNCL)\nIn this test page breaks have been added in each element with ID, so PNCL is different from PNC\n\nThe result is NOT correct:\n\nWith FOP-trunk_svn689406\nNO ID is resolved\n\nWith FOP-0.95\nIDs are resolved but PNCL is wrong (equals to PNC)", "id": 120170, "time": "2008-08-28T05:26:07Z", "bug_id": 45702, "creation_time": "2008-08-28T05:26:07Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45702, "text": "\nThanks for the report and the testcases.\n\nStrange, I cannot immediately see the problem... Comparing to our existing testcases, the only notable difference is the presence of the forced breaks. I wonder whether that's somehow throwing the ID resolution off-track somewhere. It is definitely not because the IDs aren't registered, as I can see from the debug output. It's simply the resolution step that is skipped.\n\nEven stranger, in my local sandbox, there is one set of IDs correctly resolved: those of the page-sequences. All the others still remain unresolved. If that doesn't happen in your case, I guess I'll also have to look to add that change for page-sequences to FOP Trunk.\n\nAdding a second table of contents after the main page-sequence shows all the page-number-citation correctly resolved, but not the page-number-citation-last.\n\nUnder investigation...", "id": 120222, "time": "2008-08-29T14:20:28Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-29T14:20:28Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 45702, "text": "\nJust confirmed that it is definitely the presence of break-before and break-after that causes the ID resolution to be skipped (hence why I'm changing the bug summary description).\n\nIf you remove those from the example, and change the blocks to have some arbitrary content that causes implicit page-breaks, all IDs are resolved nicely. (see the added attachment)", "id": 120224, "time": "2008-08-30T01:58:16Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-30T01:58:16Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 45702, "text": "Created attachment 22501\nTest file showing that the removal of the forced breaks leads to normal resolution", "id": 120225, "time": "2008-08-30T01:59:43Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-30T01:59:43Z", "is_private": false, "attachment_id": 22501}, {"count": 6, "tags": [], "bug_id": 45702, "attachment_id": null, "id": 120226, "time": "2008-08-30T02:46:00Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-30T02:46:00Z", "is_private": false, "text": "\nSome additional info: using only break-before on the innermost blocks does not seem to disturb the id-resolution either. Notable other issue, though: forced breaks on the first block in the main page sequence (= blocks nested in the inline) do not seem to be processed correctly.\n\nThe following pattern does lead to correct id-resolution, and seems to lead to the same output:\n\n<block id=\"...\" break-after=\"page\">\n  <block>first page</block>\n  <block break-before=\"page\">continue</block>\n  <block break-before=\"page\">continue</block>\n</block>"}, {"count": 7, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "text": "\n... and some more: the following also works like a charm\n\n<block id=\"...\">\n  <block>first page</block>\n  <block break-before=\"page\">continue</block>\n  <block break-before=\"page\" break-after=\"page\">continue</block>\n  test dummy text\n</block>\n\nIt seems that there's no problem, except for the case where the last inner block has break-after, and no more content follows.", "id": 120227, "time": "2008-08-30T02:55:47Z", "bug_id": 45702, "creation_time": "2008-08-30T02:55:47Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 45702, "text": "In the meantime, I also studied the first example more closely, and there it's the space-after or margin/padding-bottom causing the resolution to be skipped.\n\nThe technical explanation is that, in FOP trunk, I made a change resulting notifyEndOfLayout() only being called if the last position is the last generated position by the LayoutManager. In case of forced breaks and/or space-after, additional positions are generated that are not visible anymore to the PositionIterator in addAreas(), hence why the isLast() condition returns false in those cases. notifyEndOfLayout() is never called for those blocks, so the page-number-citation-last never gets resolved.", "id": 120229, "time": "2008-08-30T07:44:16Z", "creator": "adelmelle@apache.org", "creation_time": "2008-08-30T07:44:16Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 120230, "time": "2008-08-30T09:47:07Z", "bug_id": 45702, "creation_time": "2008-08-30T09:47:07Z", "is_private": false, "text": "\nFor the break-after case, I got it working by not wrapping the Position corresponding to the BreakElement.\n\nsee the partial fix committed here: http://svn.apache.org/viewvc?rev=690532&view=rev\n\nLeaving the bug open, due to the remaining issue with space-after, margin-bottom and padding-bottom. A similar tactic could work there. Instead of wrapping the positions, simply add the elements to the returnList for the parentLM (?) In that case, the last position in the sequence addAreas() iterates over, will be the last position generated by the LM. Otherwise, that would be the SpaceElement or BorderOrPaddingElement that is passed upward from the child...\n"}, {"count": 10, "tags": [], "bug_id": 45702, "attachment_id": null, "id": 120251, "time": "2008-09-01T01:10:36Z", "creator": "patrice.rosnet@free.fr", "creation_time": "2008-09-01T01:10:36Z", "is_private": false, "text": "(In reply to comment #3)\n> Even stranger, in my local sandbox, there is one set of IDs correctly resolved:\n> those of the page-sequences. All the others still remain unresolved. If that\n> doesn't happen in your case, I guess I'll also have to look to add that change\n> for page-sequences to FOP Trunk.\n> \n\nNo problem with ID of page-sequences, IDs are correctly resolved\n"}, {"count": 11, "tags": [], "bug_id": 45702, "attachment_id": null, "id": 157606, "time": "2012-04-07T01:45:15Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:45:15Z", "is_private": false, "text": "resetting P2 open bugs to P3 pending further review"}, {"count": 12, "tags": [], "text": "change status from ASSIGNED to NEW for consistency", "is_private": false, "bug_id": 45702, "id": 157918, "time": "2012-04-11T06:17:58Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:17:58Z", "attachment_id": null}]
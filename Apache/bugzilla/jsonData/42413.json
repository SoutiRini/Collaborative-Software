[{"count": 0, "attachment_id": null, "creator": "matthewadams@yahoo.com", "is_private": false, "id": 103197, "time": "2007-05-14T11:39:25Z", "bug_id": 42413, "creation_time": "2007-05-14T11:39:25Z", "tags": [], "text": "Hi,\n\nI had some needs with respect to logging in JSPs, and have enhanced the Log\nTaglib project to accommodate my needs.  I'm contributing back to the project\nbecause they already saved me time.  Here's a quick list of the enhancements:\n\n* Added <log> tag, requiring \"level\" attribute for more flexible logging.\n* Added <trace> tag to support trace-level logging.\n* Genericized message attribute from String to Object to support custom log4j\nObjectRenderers.\n* Provided default implementations of formerly abstract methods as a result of\nrefactoring message from String to Object.\n* Added optional \"throwable\" attribute to all tags.\n\nSee \"TODO\" placeholders in xml/log.xml for release-related data -- I didn't know\nwhat you wanted me to put in there.\n\nFYI, patch is relative to trunks-proper/log."}, {"count": 1, "tags": [], "creator": "matthewadams@yahoo.com", "attachment_id": 20197, "is_private": false, "id": 103198, "time": "2007-05-14T11:39:53Z", "bug_id": 42413, "creation_time": "2007-05-14T11:39:53Z", "text": "Created attachment 20197\nPatch for this issue"}, {"count": 2, "tags": [], "bug_id": 42413, "text": "Looks good to me at first glance.\n\n* The <log> tag is good regardless; allowing for custom log levels.\n\n* The <trace> tag depends on what we decide to do with the Log taglib. Do we use\nc-logging, or do we make two taglibs that are very similar, one for log4j and\none for jdk-logging.\n\nOther parts look good.", "id": 103323, "time": "2007-05-17T18:02:24Z", "creator": "bayard@apache.org", "creation_time": "2007-05-17T18:02:24Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "matthewadams@yahoo.com", "text": "(In reply to comment #2)\n> * The <trace> tag depends on what we decide to do with the Log taglib.\n\nI see one of two options for the <trace> tag:\n* get rid of it & stick with lowest common demoninator\n* keep it and if the underlying logging framework doesn't support it, just \nredirect it to debug level.\n\nAny thought to making the underlying logging framework configurable between \nlog4j, commons-logging, & JDK 1.4 logging?  I haven't looked at it much, but \nthe thought occurred to me while writing this comment...", "id": 103337, "time": "2007-05-18T07:54:09Z", "bug_id": 42413, "creation_time": "2007-05-18T07:54:09Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "matthewadams@yahoo.com", "attachment_id": null, "is_private": false, "id": 103338, "time": "2007-05-18T08:25:08Z", "bug_id": 42413, "creation_time": "2007-05-18T08:25:08Z", "text": "(In reply to comment #2)\n> Looks good to me at first glance.\n[SNIP]\n> Other parts look good.\n\nAny idea when this could be released, then?  I'd rather have my apps depend on a\ngenuine Apache version of this than a one-off..."}, {"count": 5, "attachment_id": null, "creator": "bayard@apache.org", "text": "Making things configurable between log4j/commons-logging/jdk doesn't seem a good\ndirection; that's what commons-logging does. There are other libraries out there\nnow, but I think they're commons-logging replacements rather than real logging\nlibraries in their own right.\n\nSo my idea is to have one library, with abstract classes with much of the work\nin and concrete classes and tlds for log4j and the jdk. Effectively this\nreimplements some part of commons-logging, but just the easy part (I think). The\ntlds would allow map down to the relevant underlying library, so you wouldn't be\nable to hop between one and the other. ie) one would have <log:fine> and one\nwould have <log:trace>. You would be able to hop between (by changing the tld\nurl) if all you use are the ones that are in both. Maybe. It may be a\nhalf-cocked idea.\n\nI think it'll be a while before a release happens; the thread about moving this\nstuff into a single 'unstandard' release would determine whether we have a log\nrelease (depending on answer to the which logging apis question) or an\nunstandard release that contains the log taglib.", "id": 103428, "time": "2007-05-21T10:59:05Z", "bug_id": 42413, "creation_time": "2007-05-21T10:59:05Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 42413, "text": "> I think it'll be a while before a release happens; the thread about moving this\n> stuff into a single 'unstandard' release would determine whether we have a log\n> release (depending on answer to the which logging apis question) or an\n> unstandard release that contains the log taglib.\nI'd like to see at least the stuff contributed in this patch released in a\ntaglibs-log update release.  That way, our projects are not depending on an\norphaned version of taglibs-log (we're calling it version 1.0-f5).  Can you do\nthat?  What would the version of that release be?", "id": 103430, "time": "2007-05-21T11:58:26Z", "creator": "matthewadams@yahoo.com", "creation_time": "2007-05-21T11:58:26Z", "is_private": false, "attachment_id": null}]
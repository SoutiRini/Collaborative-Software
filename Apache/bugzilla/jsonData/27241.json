[{"count": 0, "tags": [], "bug_id": 27241, "attachment_id": null, "id": 52980, "time": "2004-02-26T04:12:24Z", "creator": "christopher@pobox.com", "creation_time": "2004-02-26T04:12:24Z", "is_private": false, "text": "Hi,\n\nVarious parts of your source code think that \"requests_this_child\" counts \nupwards from 0 until it reaches \"ap_max_requests_per_child\" - but other parts \nof your code are expecting \"requests_this_child\" to have been *initialized* to \nap_max_requests_per_child and they count downwards to <= 0.\n\nExample1 (counts up):-\n\n./server/mpm/prefork/prefork.c\"  line 615\n\n        if ((ap_max_requests_per_child > 0\n             && requests_this_child++ >= ap_max_requests_per_child)) {  // \ncnd - hmm. sus.\n            clean_child_exit(0);\n        }\n\nExample2 (counts down):-\n\n./server/mpm/worker/worker.c\" line 711\n\n        if (requests_this_child <= 0) {\n            check_infinite_requests();\n        }\n\nExample3 (discrepancies):-\n\n[httpd-2.0.46]# grep -r 'requests_this_child--' .\n./server/mpm/beos/beos.c:                requests_this_child--;\n./server/mpm/experimental/leader/leader.c:                requests_this_child--\n;\n./server/mpm/experimental/perchild/perchild.c:            requests_this_child--\n;\n./server/mpm/experimental/threadpool/threadpool.c:        requests_this_child--\n; /* FIXME: should be synchronized - aaron */\n./server/mpm/worker/worker.c:        requests_this_child--; /* FIXME: should \nbe synchronized - aaron */\n./server/mpm/worker/worker.c.guardarea:        requests_this_child--; /* \nFIXME: should be synchronized - aaron */\n\n[root@my httpd-2.0.46]# grep -r 'requests_this_child++' .  \n./server/mpm/netware/mpm_netware.c:            && requests_this_child++ >= \nap_max_requests_per_child)) {        // cnd - looks like a bug!\n./server/mpm/mpmt_os2/mpmt_os2_child.c:            requests_this_child++;\n./server/mpm/prefork/prefork.c:      && requests_this_child++ >= \nap_max_requests_per_child)) {  // cnd - hmm. sus.\n./server/mpm/prefork/prefork.c.graceful:             && requests_this_child++ \n>= ap_max_requests_per_child)) {\n./server/mpm/prefork/prefork.c.xfsz:         && requests_this_child++ >= \nap_max_requests_per_child)) {\n./server/mpm/prefork/prefork.c.can0254:      && requests_this_child++ >= \nap_max_requests_per_child)) {\n./server/mpm/winnt/child.c:            requests_this_child++;\n\n\nExample4 (various different ideas of how to initialize it):-\n[httpd-2.0.46]# grep -r 'int requests_this_child' .  \n\n./server/mpm/beos/beos.c:    int requests_this_child = \nap_max_requests_per_thread;\n\n./server/mpm/experimental/leader/leader.c:static int requests_this_child;\nif (ap_max_requests_per_child) {\n        requests_this_child = ap_max_requests_per_child;\n    }\n    else {\n        /* coding a value of zero means infinity */\n        requests_this_child = INT_MAX;\n    }\n\n./server/mpm/experimental/perchild/perchild.c:static int requests_this_child;\n    requests_this_child = ap_max_requests_per_child;\n\n./server/mpm/experimental/threadpool/threadpool.c:static int \nrequests_this_child;\n    requests_this_child = ap_max_requests_per_child;\n\n./server/mpm/netware/mpm_netware.c:    int requests_this_child = 0;\n./server/mpm/mpmt_os2/mpmt_os2_child.c:    int requests_this_child = 0;\n./server/mpm/prefork/prefork.c:static int requests_this_child;\n requests_this_child = 0;\n./server/mpm/prefork/prefork.c.graceful:static int requests_this_child;\n requests_this_child = 0;\n./server/mpm/prefork/prefork.c.xfsz:static int requests_this_child;\n requests_this_child = 0;\n./server/mpm/prefork/prefork.c.can0254:static int requests_this_child;\n requests_this_child = 0;\n./server/mpm/winnt/child.c:    static int requests_this_child = 0;\n./server/mpm/worker/worker.c:static int requests_this_child;\n   requests_this_child = ap_max_requests_per_child;\n\n./server/mpm/worker/worker.c.guardarea:static int requests_this_child;\n\n\nI reccomend \"requests_this_child\" should mean \"number of requests by this \nchild\" so it should count up, and never be initialized to \nap_max_requests_per_child (at least, not without renaming it \nto \"requests_remaining\" or some such thing).\n\n\nWhile on the subject - I find that when all my HTTP server processes \nreach \"ap_max_requests_per_child\" at the same time, it chokes my machine to \ndeath while they all restart at once.  It would be a good idea to add some \nsmall random amount at initialisation so that it is unlikley that all children \nwill simultaneously die.  This is what I was doing when I noticed this bug.  \nMy \"fix\" [which was:  + (int) (42.0*rand()/(RAND_MAX+1.0)); ] solved my \nproblem on several earlier apache releases, which is why I was adding it now."}, {"count": 1, "tags": [], "bug_id": 27241, "text": "Some MPMs count up, others count down.\n\n", "id": 62711, "time": "2004-08-30T05:15:49Z", "creator": "chip@force-elite.com", "creation_time": "2004-08-30T05:15:49Z", "is_private": false, "attachment_id": null}]
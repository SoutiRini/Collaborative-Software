[{"count": 0, "attachment_id": null, "creator": "deweese@apache.org", "is_private": false, "id": 81938, "time": "2005-10-30T21:55:46Z", "bug_id": 37305, "creation_time": "2005-10-30T21:55:46Z", "tags": [], "text": " "}, {"count": 1, "tags": [], "text": "Created attachment 16838\nPatch to add support for a 'deviceDPI' other than 72.\n\nThis patch manipulates the transforms in the\nPDFGraphics2D so that if people want to query\nthe 'device DPI' (as Batik does when rendering\nimages/filters/etc).  They can get a number other\nthan 72DPI (the default PDF DPI).\n\nIt works by adding a scaling transform to the\nPDFGraphics2D, and a reciprical 'hidden' transform \nto the PDFGraphicsState.  Thus if code asks the\nGraphics2D for it's Transform (which should be\nthe mapping to the 'device' coordinate system)\nthey will see the scaled coordinate system (likely\nmaking it appear that the device is say 150 or 300\nDPI).  But the 'hidden' transform will then map\neverything back to the PDF default 72DPI.\n\nThe only issue I am aware of is that currently the\nPDFGraphics2D doesn't call preparePainting in _every_\nmethod.  So in particular some methods like 'clip'\ncould take place before a page has been started.  I\nthink this is likely an oversite in the PDFGraphics2D \nimplementation.  However in the mean time I've\nadded a call to preparePainting in the PDFTranscoder\nafter all the configuration is done so that the\nneeded transforms are present immediately.", "attachment_id": 16838, "id": 81939, "creation_time": "2005-10-30T22:04:15Z", "time": "2005-10-30T22:04:15Z", "creator": "deweese@apache.org", "bug_id": 37305, "is_private": false}, {"count": 2, "tags": [], "text": "I've got a question on this one: How does the setDeviceDPI() relate to the\nresolution setting in the user agent? So far I was able to set a different\nresolution on the user agent to get PDFs with higher resolution on-the-fly\nimages. I'm not sure but it seems that this isn't working properly anymore.\nCan't tell when this went lost. And AFAICS setDeviceDPI() is not called by the\nTranscoder. Is that by design? I'm a bit lost.\n\nConcerning preparePainting(), we may need to add additional calls where\nnecessary. I've added this method to support multi-page PDFs from\nPDFDocumentGraphics2D. I'm using it in a JPS StreamPrintService where you don't\nknow beforehand if the next page will be produced or not. A call to nextPage()\nfinishes the current page and a new one can only be set up when painting begins.\nSo for single page SVGs from the Transcoder, your change is fine, but we may\nneed to add additional calls where needed. I'll have a look when I start moving\nthe transcoders as I will publish my JPS StreamPrintService at that time.", "is_private": false, "bug_id": 37305, "id": 82306, "time": "2005-11-09T16:09:01Z", "creator": "jeremias@apache.org", "creation_time": "2005-11-09T16:09:01Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> I've got a question on this one: How does the setDeviceDPI() relate to the\n> resolution setting in the user agent? So far I was able to set a different\n> resolution on the user agent to get PDFs with higher resolution on-the-fly\n> images. \n\n   This working depends heavily on the way the SVG is constructed, also \nit can have some very unexpected (read harmful) results.  The pixel per\nmm setting is used to map 'real world' units (like in, mm, pt, px -\nyes px is a \"real world\" unit in SVG because it's defined == to pt) to\nuser space units. So in the default case let's say we have the User\nAgent setup so 1pt == 1 user space unit (1in = 72 user space units),\nand you have a 'good' outermost SVG element:\n\n   <svg width=\"8in\" height=\"10in\" viewBox=\"0 0 576 720\n        xmlns=\"...\">\n\n   In this case your width and height establish a 'device' \nimage size of 8*72x10*72 (576x720) user space units.  Since\nthe viewBox is the same size there will be no scaling.\n\n   Now if you were to set the mapping to say 144 user space\nunits to the inch.  Then the device image size would be\n8*144x10*144 (1152x1440) user space units.  However the\nviewBox would scale this back down to 576x720.  The PDF\ntranscoder adds a 'hidden' scale from the PDF page size\nto the 1152x1440 page size (much as my code does).\n\n   So far everything looks good, but the problem is\nthat when someone says <text font-size=\"12pt\"/>\nthis gets mapped to 24 userspace units instead of 12\nuserspace units.\n\n> I'm not sure but it seems that this isn't working properly anymore.\n> Can't tell when this went lost. And AFAICS setDeviceDPI() is not called by the\n> Transcoder. Is that by design? I'm a bit lost.\n\n   You are right that it isn't currently called.  The problem is that\nit should really be exposed as a new rendering hint.  In my\npatch I didn't change the 'default' DPI but it should really be\nset to 150 or 300 dpi.\n\n> Concerning preparePainting(), we may need to add additional calls where\n> necessary. I've added this method to support multi-page PDFs from\n> PDFDocumentGraphics2D. I'm using it in a JPS StreamPrintService where \n> you don't know beforehand if the next page will be produced or not. \n> A call to nextPage() finishes the current page and a new one can \n> only be set up when painting begins.  So for single page SVGs from \n> the Transcoder, your change is fine, but we may need to add additional \n> calls where needed. I'll have a look when I start moving the \n> transcoders as I will publish my JPS StreamPrintService at that time.\n\n   I strongly suspected that the missing calls were an oversite, but\nbefore making such extensive changes I wanted to make sure.\n", "attachment_id": null, "bug_id": 37305, "id": 82327, "time": "2005-11-10T02:48:54Z", "creator": "deweese@apache.org", "creation_time": "2005-11-10T02:48:54Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "is_private": false, "id": 82351, "time": "2005-11-10T16:05:36Z", "bug_id": 37305, "creation_time": "2005-11-10T16:05:36Z", "text": "Thanks, Thomas, for explaining it to me. After some time playing around with\ndifferent settings (and fixing my buggy test code) I finally figured out how\nthis works. I agree that your approach is much better than my earlier one. I\nhope you agree with my default setting of 300dpi.\n\nThe patch is applied now: http://svn.apache.org/viewcvs?rev=332304&view=rev\n\nI'm now going to look at doing the same for our PDFSVGHandler. I'll leave the\nissue open for a short while as a reminder for myself."}, {"count": 5, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "resetting P2 open bugs to P3 pending further review", "id": 157339, "time": "2012-04-07T01:41:39Z", "bug_id": 37305, "creation_time": "2012-04-07T01:41:39Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "change status from ASSIGNED to NEW for consistency", "attachment_id": null, "id": 157912, "creation_time": "2012-04-11T06:17:43Z", "time": "2012-04-11T06:17:43Z", "creator": "gadams@apache.org", "bug_id": 37305, "is_private": false}]
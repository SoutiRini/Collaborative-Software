[{"count": 0, "tags": [], "creator": "pai_deepak@hotmail.com", "attachment_id": null, "id": 6844, "time": "2001-10-18T12:22:34Z", "bug_id": 4275, "creation_time": "2001-10-18T12:22:34Z", "is_private": false, "text": "// This problem happens only when i run a class with Tomcat \n// When i run my code with its own main - there are no problems. \n// I havent seen anyone else reporting anything like this before.\n// Please check since it might change my plans of using Tomcat as our web \nserver :( \n// Thank You so very much. \n\n\njava.lang.NullPointerException         at \norg.apache.xalan.serialize.SerializerToXML.writeAttrString(Serializer\nToXML.java:2001)\n        at org.apache.xalan.serialize.SerializerToXML.processAttribute(Serialize\nrToXML.java:957)\n        at org.apache.xalan.serialize.SerializerToXML.startElement(SerializerToX\nML.java:829)\n        at org.apache.xalan.transformer.TransformerIdentityImpl.startElement(Tra\nnsformerIdentityImpl.java:982)\n        at org.apache.xml.utils.TreeWalker.startNode(TreeWalker.java:284)\n        at org.apache.xml.utils.TreeWalker.traverse(TreeWalker.java:119)\n        at org.apache.xalan.transformer.TransformerIdentityImpl.transform(Transf\normerIdentityImpl.java:320)\n        at serRS.writetoString(serRS.java:237)\n        at _0002fsimplebean_0002ejspsimplebean_jsp_9._jspService(_0002fsimplebea\nn_0002ejspsimplebean_jsp_9.java:164)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:119)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.jasper.servlet.JspServlet$JspCountedServlet.service(JspSer\nvlet.java:130)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.jasper.servlet.JspServlet$JspServletWrapper.service(JspSer\nvlet.java:282)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:4\n29)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:500)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.tomcat.core.ServletWrapper.doService(ServletWrapper.java:4\n05)\n        at org.apache.tomcat.core.Handler.service(Handler.java:287)\n        at org.apache.tomcat.core.ServletWrapper.service(ServletWrapper.java:372\n)\n        at org.apache.tomcat.core.ContextManager.internalService(ContextManager.\njava:797)\n        at org.apache.tomcat.core.ContextManager.service(ContextManager.java:743\n)\n        at org.apache.tomcat.service.http.HttpConnectionHandler.processConnectio\nn(HttpConnectionHandler.java:213)\n        at org.apache.tomcat.service.TcpWorkerThread.runIt(PoolTcpEndpoint.java:\n416)\n        at org.apache.tomcat.util.ThreadPool$ControlRunnable.run(ThreadPool.java\n:501)\n        at java.lang.Thread.run(Thread.java:484)\n\n\n\n\n\n\n\n\n\n\n/***********************************************************/\n/***********************************************************/\n/***********************************************************/\n\n\n// jdbc api\nimport java.sql.*;\n//reflect api\nimport java.lang.reflect.*;\n//xml api\nimport org.w3c.dom.*;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NamedNodeMap;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport javax.xml.transform.*;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n//javax.xml.parsers.ParserConfigurationException\nimport javax.xml.parsers.*;\n\n\n//standard packages\nimport java.io.*;\n\n//exceptionz\nimport org.xml.sax.*;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\n\n/*\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<results>\n<result type=\"AllUsers\">\n<record number=\"1\">\n  <column name=\"username\" />\n  <column name=\"password\" />\n  <column name=\"address1\" />\n  <column name=\"address2\" />\n  <column name=\"city\" />\n  <column name=\"state\" />\n  <column name=\"zip\" />\n  <column name=\"country\" />\n</record>\n</result>\n</results>\n\n*/\n\npublic class serRS implements java.io.Serializable\n{\n\n\n\t/* Empty Constructor */\n\tpublic void serRS() {}\n\n\tpublic String writetoString (ResultSet rs, String typeid) {\n\n\t// return string\n\tString returnstr = new String();\n\n\t\ttry{\n\n\t\t\t//XML\n\t\t\tDocumentBuilderFactory factory = \nDocumentBuilderFactory.newInstance();\n\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument document = builder.newDocument();\n\n\t\t\t//<results/> Root element\n\t\t\tElement results = (Element) document.createElement\n(\"results\");\n\t\t\tdocument.appendChild(results);\n\n\t\t\t//<result/>\n\t\t\tElement result = (Element) document.createElement\n(\"result\");\n\t\t\tresults.appendChild(result);\n\n\t\t\t//<result type=\"AllUsers\"/>\n\t\t\tAttr type =(Attr) document.createAttribute(\"type\");\n\t\t\tNode attrtextnode = (Node) document.createTextNode\n(typeid);\n\t\t\ttype.appendChild(attrtextnode);\n\t\t\tresult.setAttributeNode(type);\n\n\t\t\tElement record;\n\t\t\tElement column;\n\t\t\tNode countnode ;\n\t\t\tAttr number;\n\t\t\tAttr name;\n\t\t\tAttr valuetype;\n\t\t\tAttr tablename;\n\t\t\tNode columnnametext;\n\t\t\tNode columnvaluetext;\n\t\t\tNode valuetypetext;\n\t\t\tNode tablenametext;\n\n\t\t\tint count = 1;\n\n\t\t\t// JDBC-ODBC Calls\n\t\t\tjava.sql.ResultSetMetaData md = rs.getMetaData();\n\n\t\t\t  while(rs.next()) {\n\t\t\t\t// <record>\n\n\t\t\t\trecord = (Element) document.createElement\n(\"record\");\n\t\t\t\tresult.appendChild(record);\n\n\t\t\t\t// <record number=\"i\">xxx</coulmn>\n\t\t\t\tnumber =(Attr) document.createAttribute\n(\"number\");\n\t\t\t\tcountnode = (Node) document.createTextNode\n(String.valueOf(count));\n\t\t\t\tcount ++ ;\n\t\t\t\tnumber.appendChild(countnode);\n\t\t\t\trecord.setAttributeNode(number);\n\n\n\t\t\t\tSystem.out.print(\"\\nTUPLE: | \");\n\t\t\t\t\tfor(int i=1; i<= md.getColumnCount(); \ni++) {\n\t\t\t\t\t\t// <column name=\"\">value</value>\n\t\t\t\t\t\tcolumn = (Element) \ndocument.createElement(\"column\");\n\t\t\t\t\t\trecord.appendChild(column);\n\n\t\t\t\t\t\tname =(Attr) \ndocument.createAttribute(\"name\");\n\t\t\t\t\t\t//columnnametext = (Node) \ndocument.createTextNode(md.getColumnLabel(i));\n\t\t\t\t\t\tcolumnnametext = (Node) \ndocument.createTextNode(md.getColumnName(i));\n\t\t\t\t\t\tname.appendChild\n(columnnametext);\n\t\t\t\t\t\tcolumn.setAttributeNode(name);\n\n\t\t\t\t\t\tvaluetype =(Attr) \ndocument.createAttribute(\"type\");\n\t\t\t\t\t\tvaluetypetext = (Node) \ndocument.createTextNode(md.getColumnTypeName(i));\n\t\t\t\t\t\tvaluetype.appendChild\n(valuetypetext);\n\t\t\t\t\t\tcolumn.setAttributeNode\n(valuetype);\n\n\t\t\t\t\t\ttablename =(Attr) \ndocument.createAttribute(\"table\");\n\t\t\t\t\t\ttablenametext = (Node) \ndocument.createTextNode(md.getCatalogName(i));\n\t\t\t\t\t\ttablename.appendChild\n(tablenametext);\n\t\t\t\t\t\tcolumn.setAttributeNode\n(tablename);\n\n\n/*\n\t\t\t\t\t\t  System.out.print\n(md.getColumnType(i) + \" | \");\n\t\t\t\t\t\t  System.out.print\n(md.getColumnTypeName(i) + \" | \");\n\t\t\t\t\t\t  System.out.print\n(md.getColumnLabel(i) + \" | \");\n\t\t\t\t\t\t  //System.out.print\n(rs.getString(i) + \" | \\n\");\n*/\n\n\t\t\t\t\t\t  try\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  Object o = \nrs.getObject(md.getColumnLabel(i));\n\t\t\t\t\t\t\t  if (!o.equals(null)){\n\t\t\t\t\t\t\t\tString s = \no.toString();\n\t\t\t\t\t\t\t\tSystem.out.print\n(s + \"\\n\");\n\t\t\t\t\t\t\t\tcolumnvaluetext \n= (Node) document.createTextNode(s);\n\t\t\t\t\t\t\t\n\tcolumn.appendChild(columnvaluetext);\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch (SQLException sqe ){\n\t\t\t\t\t\t\t\n\tsqe.printStackTrace();\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch (NullPointerException \nn ){\n\t\t\t\t\t\t\t  System.out.print\n(\"Null pointer hui gava!!!!!!\");\n\t\t\t\t\t\t\t\n\tn.printStackTrace();\n\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t  // new line\n\t\t\t\t\t\t  System.out.print(\"\\n\");\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n/*\n\t\t\tFile f = new File(\"local.xml\");\n\t\t\t//document = builder.parse(f);\n\t\t\t// Use a Transformer for output\n*/\n\n/*\n\t\t\tTransformerFactory tFactory = \nTransformerFactory.newInstance();\n\t\t\tTransformer transformer = tFactory.newTransformer();\n\n\t\t\tDOMSource source = new DOMSource(document);\n*/\n\n\t\t\t/*\n\t\t\t// write to the standard output\n\t\t\tStreamResult resultstdout = new StreamResult\n(System.out);\n\t\t\ttransformer.transform(source, resultstdout);\n\t\t\t*/\n\n/*\n\t\t\t// write to a file\n\t\t\tStreamResult resultfile = new StreamResult(f);\n\t\t\ttransformer.transform(source, resultfile);\n*/\n\n/*\n\t\t\t// write to a string\n\t\t\tjava.io.StringWriter sw = new StringWriter();\n\n\t\t\t// use the transformer object\n\t\t\tStreamResult resultsw = new StreamResult(sw);\n\t\t\ttransformer.transform(source, resultsw);\n\t\t\tresultsw.setWriter (sw);\n\n\t\t\t// create a new String variable (above)\n\t\t\t// convert the StringWriter object to String\n\t\t\treturnstr = sw.toString();\n*/\n\n\t\t\t/*\n\t\t\t// write to the standard output\n\t\t\tSystem.out.println(returnstr);\n\n\t\t\t// write to the standard output\n\t\t\tSystem.out.println(sw.toString());\n\t\t\t*/\n\n\t\t\t// Trial basis\n\t\t\tTransformerFactory tFactory = \nTransformerFactory.newInstance();\n\t\t\tTransformer transformer = tFactory.newTransformer();\n\t\t\tDOMSource source = new DOMSource(document);\n\t\t\tjava.io.StringWriter sw = new StringWriter();\n\n\t\t\ttry{\n\n\t\t\t// write to the standard output\n\t\t\t//StreamResult resultstdout = new StreamResult\n(System.out);\n\t\t\t//transformer.transform(source, resultstdout);\n\n\t\t\t// use the transformer object\n\t\t\tStreamResult resultsw = new StreamResult(sw);\n\n\t\t\tif(! (source.equals(null) || resultsw.equals(null)) )\n\t\t\t{\n\n\t\t\t\ttransformer.transform(source, resultsw);\n\t\t\t\tresultsw.setWriter (sw);\n\t\t\t}\n\t\t\telse{\n\n\t\t\t\tif (source.equals(null))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"********** \nsource**************\");\n\t\t\t\t}\n\t\t\t\tif (resultsw.equals(null))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"********** resultsw \n**************\");\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t}\n\t\t\tcatch (NullPointerException n ){\n\t\t\t  System.out.print(\"Null pointer hui gava again!!!!!!\");\n\t\t\t\tn.printStackTrace();\n\t\t\t  }\n\n\t\t\tcatch (Exception e ){\n\t\t\t  System.out.print(\"Null pointer hui gava again!!!!!!\");\n\t\t\t\te.printStackTrace();\n\t\t\t  }\n\n\n\n\n\t\t\t// create a new String variable (above)\n\t\t\t// convert the StringWriter object to String\n\n\t\t\t//returnstr = sw.toString();\n\n\n\n\n\t\t}\n\t\tcatch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\n\n\t\treturn returnstr;\n\n\t}// end method\n\n\t/** Test main method*/\n\tpublic static void main( String args[]) {\n\n\t\ttry {\n\n\t\t\tSystem.out.println(\"\\nHello World\\n\");\n\t\t\tserRS serrs = new serRS ();\n\n\t\t\tSQLtoRS sqltors = new SQLtoRS();\n\t\t\tsqltors.setsqlstr(\"select * from users\");\n\t\t\tResultSet rs = sqltors.getrs();\n\t\t\tSystem.out.println(serrs.writetoString(rs, \"AllUsers\"));\n\n\t\t}//end try\n\t\tcatch (Exception e)\n\t\t{\n\n\t\t}//end catch\n\n\t}// end main\n\n\n}//end class\n\n// jdbc api\nimport java.sql.*;\n//reflect api\nimport java.lang.reflect.*;\n//xml api\nimport org.w3c.dom.*;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NamedNodeMap;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport javax.xml.transform.*;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n//javax.xml.parsers.ParserConfigurationException\nimport javax.xml.parsers.*;\n\n\n//standard packages\nimport java.io.*;\n\n//exceptionz\nimport org.xml.sax.*;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\n\n/*\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<results>\n<result type=\"AllUsers\">\n<record number=\"1\">\n  <column name=\"username\" />\n  <column name=\"password\" />\n  <column name=\"address1\" />\n  <column name=\"address2\" />\n  <column name=\"city\" />\n  <column name=\"state\" />\n  <column name=\"zip\" />\n  <column name=\"country\" />\n</record>\n</result>\n</results>\n\n*/\n\npublic class serRS implements java.io.Serializable\n{\n\n\n\t/* Empty Constructor */\n\tpublic void serRS() {}\n\n\tpublic String writetoString (ResultSet rs, String typeid) {\n\n\t// return string\n\tString returnstr = new String();\n\n\t\ttry{\n\n\t\t\t//XML\n\t\t\tDocumentBuilderFactory factory = \nDocumentBuilderFactory.newInstance();\n\n\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\t\tDocument document = builder.newDocument();\n\n\t\t\t//<results/> Root element\n\t\t\tElement results = (Element) document.createElement\n(\"results\");\n\t\t\tdocument.appendChild(results);\n\n\t\t\t//<result/>\n\t\t\tElement result = (Element) document.createElement\n(\"result\");\n\t\t\tresults.appendChild(result);\n\n\t\t\t//<result type=\"AllUsers\"/>\n\t\t\tAttr type =(Attr) document.createAttribute(\"type\");\n\t\t\tNode attrtextnode = (Node) document.createTextNode\n(typeid);\n\t\t\ttype.appendChild(attrtextnode);\n\t\t\tresult.setAttributeNode(type);\n\n\t\t\tElement record;\n\t\t\tElement column;\n\t\t\tNode countnode ;\n\t\t\tAttr number;\n\t\t\tAttr name;\n\t\t\tAttr valuetype;\n\t\t\tAttr tablename;\n\t\t\tNode columnnametext;\n\t\t\tNode columnvaluetext;\n\t\t\tNode valuetypetext;\n\t\t\tNode tablenametext;\n\n\t\t\tint count = 1;\n\n\t\t\t// JDBC-ODBC Calls\n\t\t\tjava.sql.ResultSetMetaData md = rs.getMetaData();\n\n\t\t\t  while(rs.next()) {\n\t\t\t\t// <record>\n\n\t\t\t\trecord = (Element) document.createElement\n(\"record\");\n\t\t\t\tresult.appendChild(record);\n\n\t\t\t\t// <record number=\"i\">xxx</coulmn>\n\t\t\t\tnumber =(Attr) document.createAttribute\n(\"number\");\n\t\t\t\tcountnode = (Node) document.createTextNode\n(String.valueOf(count));\n\t\t\t\tcount ++ ;\n\t\t\t\tnumber.appendChild(countnode);\n\t\t\t\trecord.setAttributeNode(number);\n\n\n\t\t\t\tSystem.out.print(\"\\nTUPLE: | \");\n\t\t\t\t\tfor(int i=1; i<= md.getColumnCount(); \ni++) {\n\t\t\t\t\t\t// <column name=\"\">value</value>\n\t\t\t\t\t\tcolumn = (Element) \ndocument.createElement(\"column\");\n\t\t\t\t\t\trecord.appendChild(column);\n\n\t\t\t\t\t\tname =(Attr) \ndocument.createAttribute(\"name\");\n\t\t\t\t\t\t//columnnametext = (Node) \ndocument.createTextNode(md.getColumnLabel(i));\n\t\t\t\t\t\tcolumnnametext = (Node) \ndocument.createTextNode(md.getColumnName(i));\n\t\t\t\t\t\tname.appendChild\n(columnnametext);\n\t\t\t\t\t\tcolumn.setAttributeNode(name);\n\n\t\t\t\t\t\tvaluetype =(Attr) \ndocument.createAttribute(\"type\");\n\t\t\t\t\t\tvaluetypetext = (Node) \ndocument.createTextNode(md.getColumnTypeName(i));\n\t\t\t\t\t\tvaluetype.appendChild\n(valuetypetext);\n\t\t\t\t\t\tcolumn.setAttributeNode\n(valuetype);\n\n\t\t\t\t\t\ttablename =(Attr) \ndocument.createAttribute(\"table\");\n\t\t\t\t\t\ttablenametext = (Node) \ndocument.createTextNode(md.getCatalogName(i));\n\t\t\t\t\t\ttablename.appendChild\n(tablenametext);\n\t\t\t\t\t\tcolumn.setAttributeNode\n(tablename);\n\n\n/*\n\t\t\t\t\t\t  System.out.print\n(md.getColumnType(i) + \" | \");\n\t\t\t\t\t\t  System.out.print\n(md.getColumnTypeName(i) + \" | \");\n\t\t\t\t\t\t  System.out.print\n(md.getColumnLabel(i) + \" | \");\n\t\t\t\t\t\t  //System.out.print\n(rs.getString(i) + \" | \\n\");\n*/\n\n\t\t\t\t\t\t  try\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  Object o = \nrs.getObject(md.getColumnLabel(i));\n\t\t\t\t\t\t\t  if (!o.equals(null)){\n\t\t\t\t\t\t\t\tString s = \no.toString();\n\t\t\t\t\t\t\t\tSystem.out.print\n(s + \"\\n\");\n\t\t\t\t\t\t\t\tcolumnvaluetext \n= (Node) document.createTextNode(s);\n\t\t\t\t\t\t\t\n\tcolumn.appendChild(columnvaluetext);\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch (SQLException sqe ){\n\t\t\t\t\t\t\t\n\tsqe.printStackTrace();\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch (NullPointerException \nn ){\n\t\t\t\t\t\t\t  System.out.print\n(\"Null pointer hui gava!!!!!!\");\n\t\t\t\t\t\t\t\n\tn.printStackTrace();\n\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t  // new line\n\t\t\t\t\t\t  System.out.print(\"\\n\");\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n/*\n\t\t\tFile f = new File(\"local.xml\");\n\t\t\t//document = builder.parse(f);\n\t\t\t// Use a Transformer for output\n*/\n\n/*\n\t\t\tTransformerFactory tFactory = \nTransformerFactory.newInstance();\n\t\t\tTransformer transformer = tFactory.newTransformer();\n\n\t\t\tDOMSource source = new DOMSource(document);\n*/\n\n\t\t\t/*\n\t\t\t// write to the standard output\n\t\t\tStreamResult resultstdout = new StreamResult\n(System.out);\n\t\t\ttransformer.transform(source, resultstdout);\n\t\t\t*/\n\n/*\n\t\t\t// write to a file\n\t\t\tStreamResult resultfile = new StreamResult(f);\n\t\t\ttransformer.transform(source, resultfile);\n*/\n\n/*\n\t\t\t// write to a string\n\t\t\tjava.io.StringWriter sw = new StringWriter();\n\n\t\t\t// use the transformer object\n\t\t\tStreamResult resultsw = new StreamResult(sw);\n\t\t\ttransformer.transform(source, resultsw);\n\t\t\tresultsw.setWriter (sw);\n\n\t\t\t// create a new String variable (above)\n\t\t\t// convert the StringWriter object to String\n\t\t\treturnstr = sw.toString();\n*/\n\n\t\t\t/*\n\t\t\t// write to the standard output\n\t\t\tSystem.out.println(returnstr);\n\n\t\t\t// write to the standard output\n\t\t\tSystem.out.println(sw.toString());\n\t\t\t*/\n\n\t\t\t// Trial basis\n\t\t\tTransformerFactory tFactory = \nTransformerFactory.newInstance();\n\t\t\tTransformer transformer = tFactory.newTransformer();\n\t\t\tDOMSource source = new DOMSource(document);\n\t\t\tjava.io.StringWriter sw = new StringWriter();\n\n\t\t\ttry{\n\n\t\t\t// write to the standard output\n\t\t\t//StreamResult resultstdout = new StreamResult\n(System.out);\n\t\t\t//transformer.transform(source, resultstdout);\n\n\t\t\t// use the transformer object\n\t\t\tStreamResult resultsw = new StreamResult(sw);\n\n\t\t\tif(! (source.equals(null) || resultsw.equals(null)) )\n\t\t\t{\n\n\t\t\t\ttransformer.transform(source, resultsw);\n\t\t\t\tresultsw.setWriter (sw);\n\t\t\t}\n\t\t\telse{\n\n\t\t\t\tif (source.equals(null))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"********** \nsource**************\");\n\t\t\t\t}\n\t\t\t\tif (resultsw.equals(null))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"********** resultsw \n**************\");\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t}\n\t\t\tcatch (NullPointerException n ){\n\t\t\t  System.out.print(\"Null pointer hui gava again!!!!!!\");\n\t\t\t\tn.printStackTrace();\n\t\t\t  }\n\n\t\t\tcatch (Exception e ){\n\t\t\t  System.out.print(\"Null pointer hui gava again!!!!!!\");\n\t\t\t\te.printStackTrace();\n\t\t\t  }\n\n\n\n\n\t\t\t// create a new String variable (above)\n\t\t\t// convert the StringWriter object to String\n\n\t\t\t//returnstr = sw.toString();\n\n\n\n\n\t\t}\n\t\tcatch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\n\n\t\treturn returnstr;\n\n\t}// end method\n\n\t/** Test main method*/\n\tpublic static void main( String args[]) {\n\n\t\ttry {\n\n\t\t\tSystem.out.println(\"\\nHello World\\n\");\n\t\t\tserRS serrs = new serRS ();\n\n\t\t\tSQLtoRS sqltors = new SQLtoRS();\n\t\t\tsqltors.setsqlstr(\"select * from users\");\n\t\t\tResultSet rs = sqltors.getrs();\n\t\t\tSystem.out.println(serrs.writetoString(rs, \"AllUsers\"));\n\n\t\t}//end try\n\t\tcatch (Exception e)\n\t\t{\n\n\t\t}//end catch\n\n\t}// end main\n\n\n}//end class"}, {"count": 1, "tags": [], "bug_id": 4275, "attachment_id": null, "id": 6845, "time": "2001-10-18T12:25:46Z", "creator": "pai_deepak@hotmail.com", "creation_time": "2001-10-18T12:25:46Z", "is_private": false, "text": "//////////////////////////////////////////////////////////////////\n // for ease of reading i have removed all indenting :) \n//////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////\n\n// jdbc api\nimport java.sql.*;\n//reflect api\nimport java.lang.reflect.*;\n//xml api\nimport org.w3c.dom.*;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NamedNodeMap;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport javax.xml.transform.*;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n//javax.xml.parsers.ParserConfigurationException\nimport javax.xml.parsers.*;\n\n\n//standard packages\nimport java.io.*;\n\n//exceptionz\nimport org.xml.sax.*;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\n\n/*\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<results>\n<result type=\"AllUsers\">\n<record number=\"1\">\n<column name=\"username\" />\n<column name=\"password\" />\n<column name=\"address1\" />\n<column name=\"address2\" />\n<column name=\"city\" />\n<column name=\"state\" />\n<column name=\"zip\" />\n<column name=\"country\" />\n</record>\n</result>\n</results>\n\n*/\n\npublic class serRS implements java.io.Serializable\n{\n\n\n/* Empty Constructor */\npublic void serRS() {}\n\npublic String writetoString (ResultSet rs, String typeid) {\n\n// return string\nString returnstr = new String();\n\ntry{\n\n//XML\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument document = builder.newDocument();\n\n//<results/> Root element\nElement results = (Element) document.createElement(\"results\");\ndocument.appendChild(results);\n\n//<result/>\nElement result = (Element) document.createElement(\"result\");\nresults.appendChild(result);\n\n//<result type=\"AllUsers\"/>\nAttr type =(Attr) document.createAttribute(\"type\");\nNode attrtextnode = (Node) document.createTextNode(typeid);\ntype.appendChild(attrtextnode);\nresult.setAttributeNode(type);\n\nElement record;\nElement column;\nNode countnode ;\nAttr number;\nAttr name;\nAttr valuetype;\nAttr tablename;\nNode columnnametext;\nNode columnvaluetext;\nNode valuetypetext;\nNode tablenametext;\n\nint count = 1;\n\n// JDBC-ODBC Calls\njava.sql.ResultSetMetaData md = rs.getMetaData();\n\nwhile(rs.next()) {\n// <record>\n\nrecord = (Element) document.createElement(\"record\");\nresult.appendChild(record);\n\n// <record number=\"i\">xxx</coulmn>\nnumber =(Attr) document.createAttribute(\"number\");\ncountnode = (Node) document.createTextNode(String.valueOf(count));\ncount ++ ;\nnumber.appendChild(countnode);\nrecord.setAttributeNode(number);\n\n\nSystem.out.print(\"\\nTUPLE: | \");\nfor(int i=1; i<= md.getColumnCount(); i++) {\n// <column name=\"\">value</value>\ncolumn = (Element) document.createElement(\"column\");\nrecord.appendChild(column);\n\nname =(Attr) document.createAttribute(\"name\");\n//columnnametext = (Node) document.createTextNode(md.getColumnLabel(i));\ncolumnnametext = (Node) document.createTextNode(md.getColumnName(i));\nname.appendChild(columnnametext);\ncolumn.setAttributeNode(name);\n\nvaluetype =(Attr) document.createAttribute(\"type\");\nvaluetypetext = (Node) document.createTextNode(md.getColumnTypeName(i));\nvaluetype.appendChild(valuetypetext);\ncolumn.setAttributeNode(valuetype);\n\ntablename =(Attr) document.createAttribute(\"table\");\ntablenametext = (Node) document.createTextNode(md.getCatalogName(i));\ntablename.appendChild(tablenametext);\ncolumn.setAttributeNode(tablename);\n\n\n/*\nSystem.out.print(md.getColumnType(i) + \" | \");\nSystem.out.print(md.getColumnTypeName(i) + \" | \");\nSystem.out.print(md.getColumnLabel(i) + \" | \");\n//System.out.print(rs.getString(i) + \" | \\n\");\n*/\n\ntry\n{\nObject o = rs.getObject(md.getColumnLabel(i));\nif (!o.equals(null)){\nString s = o.toString();\nSystem.out.print(s + \"\\n\");\ncolumnvaluetext = (Node) document.createTextNode(s);\ncolumn.appendChild(columnvaluetext);\n}\n}\ncatch (SQLException sqe ){\nsqe.printStackTrace();\n}\ncatch (NullPointerException n ){\nSystem.out.print(\"Null pointer hui gava!!!!!!\");\nn.printStackTrace();\n}\n\n// new line\nSystem.out.print(\"\\n\");\n\n}\n}\n\n\n/*\nFile f = new File(\"local.xml\");\n//document = builder.parse(f);\n// Use a Transformer for output\n*/\n\n/*\nTransformerFactory tFactory = TransformerFactory.newInstance();\nTransformer transformer = tFactory.newTransformer();\n\nDOMSource source = new DOMSource(document);\n*/\n\n/*\n// write to the standard output\nStreamResult resultstdout = new StreamResult(System.out);\ntransformer.transform(source, resultstdout);\n*/\n\n/*\n// write to a file\nStreamResult resultfile = new StreamResult(f);\ntransformer.transform(source, resultfile);\n*/\n\n/*\n// write to a string\njava.io.StringWriter sw = new StringWriter();\n\n// use the transformer object\nStreamResult resultsw = new StreamResult(sw);\ntransformer.transform(source, resultsw);\nresultsw.setWriter (sw);\n\n// create a new String variable (above)\n// convert the StringWriter object to String\nreturnstr = sw.toString();\n*/\n\n/*\n// write to the standard output\nSystem.out.println(returnstr);\n\n// write to the standard output\nSystem.out.println(sw.toString());\n*/\n\n// Trial basis\nTransformerFactory tFactory = TransformerFactory.newInstance();\nTransformer transformer = tFactory.newTransformer();\nDOMSource source = new DOMSource(document);\njava.io.StringWriter sw = new StringWriter();\n\ntry{\n\n// write to the standard output\n//StreamResult resultstdout = new StreamResult(System.out);\n//transformer.transform(source, resultstdout);\n\n// use the transformer object\nStreamResult resultsw = new StreamResult(sw);\n\nif(! (source.equals(null) || resultsw.equals(null)) )\n{\n\ntransformer.transform(source, resultsw);\nresultsw.setWriter (sw);\n}\nelse{\n\nif (source.equals(null))\n{\nSystem.out.println(\"********** source**************\");\n}\nif (resultsw.equals(null))\n{\nSystem.out.println(\"********** resultsw **************\");\n}\n\n}\n\n\n}\ncatch (NullPointerException n ){\nSystem.out.print(\"Null pointer hui gava again!!!!!!\");\nn.printStackTrace();\n}\n\ncatch (Exception e ){\nSystem.out.print(\"Null pointer hui gava again!!!!!!\");\ne.printStackTrace();\n}\n\n\n\n\n// create a new String variable (above)\n// convert the StringWriter object to String\n\n//returnstr = sw.toString();\n\n\n\n\n}\ncatch (Exception e){\ne.printStackTrace();\n}\n\n\nreturn returnstr;\n\n}// end method\n\n/** Test main method*/\npublic static void main( String args[]) {\n\ntry {\n\nSystem.out.println(\"\\nHello World\\n\");\nserRS serrs = new serRS ();\n\nSQLtoRS sqltors = new SQLtoRS();\nsqltors.setsqlstr(\"select * from users\");\nResultSet rs = sqltors.getrs();\nSystem.out.println(serrs.writetoString(rs, \"AllUsers\"));\n\n}//end try\ncatch (Exception e)\n{\n\n}//end catch\n\n}// end main\n\n\n}//end class\n\n"}, {"count": 2, "attachment_id": null, "creator": "william.barker@wilshire.com", "is_private": false, "id": 6847, "time": "2001-10-18T12:34:18Z", "bug_id": 4275, "creation_time": "2001-10-18T12:34:18Z", "tags": [], "text": "*** Bug 4274 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "bug_id": 4275, "attachment_id": null, "id": 7014, "time": "2001-10-22T13:18:31Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-10-22T13:18:31Z", "is_private": false, "text": "This seems like a NPE in xalan, not in tomcat. What xalan version ? Can't guess. Does it also fail in 3.3 ? \nThe only possible problem tomcat can cause to xalan is the class loader, which is quite broken in 3.2.x. You must set Jdk12Interceptor manually in your \nserver.xml, and make sure you replace jaxp.jar, parser.jar in lib/ with  xalan,xerces, etc \n\n"}]
[{"count": 0, "tags": [], "creator": "frank.holler@gmx.de", "is_private": false, "id": 181954, "attachment_id": null, "bug_id": 57736, "creation_time": "2015-03-22T17:35:34Z", "time": "2015-03-22T17:35:34Z", "text": "Our webapp is using bouncycastle security provider, which was packed within the WEB-INF/lib folder.\nFurthermore our webapp run within a tomcat environment, which uses unpackWars=\"false\".\n\nThis woked fine with Tomcat6 and Tomcat7. After switching to Tomcat8 we got an exception:\nCaused by: java.lang.SecurityException: JCE cannot authenticate the provider BC\n\tat javax.crypto.Cipher.getInstance(Cipher.java:642)\n\tat javax.crypto.Cipher.getInstance(Cipher.java:580)\n\tat de.balvi.xmljobs.job.domain.JobParameterType$PasswordJobParameterType.createCipher(JobParameterType.java:200)\n\tat de.balvi.xmljobs.job.domain.JobParameterType$PasswordJobParameterType.toPersistent(JobParameterType.java:169)\n\t... 96 more\nCaused by: java.util.jar.JarException: jar:file:/D:/Java_Bin/BALVI_TOMCAT/webapps/ROOT.war!/WEB-INF/lib/bcprov-jdk15on-1.51.jar has unsigned entries - WEB-INF/css/bootstrap-responsive.min.css\n\tat javax.crypto.JarVerifier.verifySingleJar(JarVerifier.java:462)\n\tat javax.crypto.JarVerifier.verifyJars(JarVerifier.java:322)\n\tat javax.crypto.JarVerifier.verify(JarVerifier.java:250)\n\tat javax.crypto.JceSecurity.verifyProviderJar(JceSecurity.java:161)\n\tat javax.crypto.JceSecurity.getVerificationResult(JceSecurity.java:187)\n\tat javax.crypto.Cipher.getInstance(Cipher.java:638)\n\tat javax.crypto.Cipher.getInstance(Cipher.java:580)\n\tat de.balvi.xmljobs.job.domain.JobParameterType$PasswordJobParameterType.createCipher(JobParameterType.java:200)\n\nThe exception \"java.util.jar.JarException: jar:file:/D:/Java_Bin/BALVI_TOMCAT/webapps/ROOT.war!/WEB-INF/lib/bcprov-jdk15on-1.51.jar has unsigned entries - WEB-INF/css/bootstrap-responsive.min.css\"\nstates to an entry of the WAR itself instead of an entry of the bcprov-jdk150-1.51.jar.\n\nExtract from JobParameterType$PasswordJobParameterType.createCipher(JobParameterType.java:200)\nstates to\n \n       private Cipher createCipher(int encryptMode) throws NoSuchAlgorithmException, NoSuchProviderException,\n                NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n            // Register BouncyCastleProvider\n            Security.addProvider(new BouncyCastleProvider());\n            // Create the IV Key\n            AlgorithmParameterSpec IVspec = new IvParameterSpec(getIV128Key());\n\n            // Create the Cipher f\u00fcr Decrypting\n            Cipher encryptCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\", \"BC\");  // <== line 200\n            SecretKey keyValue = new SecretKeySpec(getAES128Key(), \"AES\");\n            encryptCipher.init(encryptMode, keyValue, IVspec);\n\n            return encryptCipher;\n        }\n\nAs workaround, i removed the bouncycastle provider from the WEB-INF/lib and put it to CATALINA_BASE/lib.\n\nA second problem occured, when a uri resource is loaded from a jar inside a unpacked war:\ncom.mycila.xmltool.XMLDocumentException: Validation failed: Illegal character in opaque part at index 55: jar:war:file:/D:/Java_Bin/BALVI_TOMCAT/webapps/ROOT.war^/WEB-INF/lib/xmljobs-1.1.1.jar!/xmljobs/groovy-flow-1.0.xsd\n\nThe RFC 2396 \"URI Generic Syntax\" says, the char ^ is an \"unwise\" uri char, which causes a java.net.URISyntaxException in our environment.\n\nAs workaround, we changed the resource loader to return a Stream instead of the uri string. \n \nBoth problems are reproducable with any java platform. (Tried Java 7/8 on Windows X86_64, Linux X86_64) with Tomcat 8. Tomcat 7 has no problem.\n\nPlease check the changes form 7 to 8."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 181961, "time": "2015-03-22T19:07:37Z", "bug_id": 57736, "creation_time": "2015-03-22T19:07:37Z", "is_private": false, "text": "Neither of these are issues with Tomcat.\n\nThe first is an invalid assumption in javax.crypto about the location of the provided classes and the second is overly strict URI validation in your environment.\n\nAnother workaround would be to run with unpackWARs. A further advantage will be a performance improvement in class loading.\n\nFor a fuller discussion of the performance impact of unpackWARs see Bug 57251."}, {"count": 2, "tags": [], "bug_id": 57736, "is_private": false, "text": "Hi again,\n\ni'm sorry to bother you again, but the slight difference between Tomcat 7 and Tomcat 8 causes many support trouble for me. To use unpackWars=\"true\" is a problem for us. As you suggested, unpackWars=\"true\" worked, but unpackWars=\"false\" seems to be broken with Tomcat 8.\n\nSo i digged a little deeper into the problem.\nI found out that Tomcat 7 and Tomcat 8 both extract classes and libs from WEB-INF to CATALINA_BASE/work/[app]/, even if unpackWars=\"false\" is set.\n\nThe difference seems to be that Tomcat 7 delives resource or class loader requests from the \"work\" direktory. So there is at least a file to open and all things worked fine.\nThe javax.crypto.JarVerifier.verifySingleJar is happy and bouncycastle provider gets registered.\n\nWith Tomcat 8 the things changed, so the classloader(?) returns an URI to the relativ path within the war instead of the jar in \"work\". This causes javax.crypto.JarVerifier.verifySingleJar to verify the WAR instead of the jar.\n\nThe same behavior seems to match for the resource loader, which delived a relative path for our xsd stored within a jar. \nAs Tomcat 7 worked fine i assume that many other webapps would have the same problem, if they running with unpackWars=\"false\" \n\nSo i beg you, please take a look at this behavior change from Tomcat 7 to Tomcat 8\n\nKind regards, \nFrank", "id": 181986, "time": "2015-03-23T08:51:02Z", "creator": "frank.holler@gmx.de", "creation_time": "2015-03-23T08:51:02Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "(In reply to Frank Holler from comment #2)\n> To use unpackWars=\"true\" is a problem for us.\n\nWhy?\n\n> So i digged a little deeper into the problem.\n> I found out that Tomcat 7 and Tomcat 8 both extract classes and libs from\n> WEB-INF to CATALINA_BASE/work/[app]/, even if unpackWars=\"false\" is set.\n\nThat is not correct. Tomcat 8 does not extract JARs or classes to the work directory under any circumstances.\n\nOne of the options considered to address the performance problems is to restore the extraction of the JARs to the work directory but that creates complexity in an area where we have been trying to reduce it. This is still an option of last resort but my preference - where possible - is to address the reasons why people can't use unpackWARs=\"true\".", "attachment_id": null, "id": 181987, "creation_time": "2015-03-23T09:08:47Z", "time": "2015-03-23T09:08:47Z", "creator": "markt@apache.org", "bug_id": 57736, "is_private": false}, {"count": 4, "tags": [], "bug_id": 57736, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #3)\n> (In reply to Frank Holler from comment #2)\n> > To use unpackWars=\"true\" is a problem for us.\n> \n> Why?\n> \n> > So i digged a little deeper into the problem.\n> > I found out that Tomcat 7 and Tomcat 8 both extract classes and libs from\n> > WEB-INF to CATALINA_BASE/work/[app]/, even if unpackWars=\"false\" is set.\n> \n> That is not correct. Tomcat 8 does not extract JARs or classes to the work\n> directory under any circumstances.\n> \n> One of the options considered to address the performance problems is to\n> restore the extraction of the JARs to the work directory but that creates\n> complexity in an area where we have been trying to reduce it. This is still\n> an option of last resort but my preference - where possible - is to address\n> the reasons why people can't use unpackWARs=\"true\".\n\nYou're rigt, my fault. i did not clean up the work directory after changing form unpackWars=\"true\" to \"false\". So the remaining files was leftover from the last restart.\n\nThe reason why we don't use unpackWars=\"true\" is, that the unpacked directory won't get updated, if the war changes. For security reasons we (and our customers) don't deploy the \"manager\" or any other webapp, only our war.\n\nSo the deployment process with unpackWars=\"false\" is:\n1.) drop the new war into webapps\n2.) restart tomcat\n\nWith unpackWars=\"true\" and without using \"manager\"-app the steps to update would be:\n1.) stop tomcat\n2.) delete the unpacked folder => otherwise it won't work!!!\n3.) drop the new war into webapps\n4.) start tomcat again\n\nTo check, if this behavior changed with tomcat 8 we did the following:\n\nOur webapp version 2.6.6 is deployed with unpackwars=\"true\", the unpacked folder exists. Afterwards we replaced the WAR with version 2.6.7 and restart tomcat.\nAs any version before, the unpacked directory wasn't updated, so the version 2.6.6 is started again, the new war with version 2.6.7 is ignored.\nAfter this problem occured often, we told our customers to set unpackWars=\"false\", so our customers (and our support of course) has less problems when delvierung updates of our app. \nSo perhaps you understand, why we won't like to tell our customers to change unpackWars back when updating to tomcat 8.\n\nI understand, that a revert of the changes isn't easy, but for my opinion, unpackWars=\"false\" isn't usable with tomcat 8 any more without refactoring many of our logic to bypass the new loader behavior. \nThe problem is, that we don't know, which of the used libs also have a problem (like com.mycila.xmltool), so we would be happy, if the behavior of tomcat 8 keeps compatible tomcat 7.\n\n\nKind regards, \nFrank", "id": 181991, "time": "2015-03-23T10:02:41Z", "creator": "frank.holler@gmx.de", "creation_time": "2015-03-23T10:02:41Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57736, "is_private": false, "text": "(In reply to Frank Holler from comment #4)\n> The reason why we don't use unpackWars=\"true\" is, that the unpacked\n> directory won't get updated, if the war changes. For security reasons we\n> (and our customers) don't deploy the \"manager\" or any other webapp, only our\n> war.\n> \n> So the deployment process with unpackWars=\"false\" is:\n> 1.) drop the new war into webapps\n> 2.) restart tomcat\n\nYou must have also set autoDeploy=\"false\" otherwise dropping an updated WAR into a running Tomcat instance would trigger a redploy.\n\n> With unpackWars=\"true\" and without using \"manager\"-app the steps to update\n> would be:\n> 1.) stop tomcat\n> 2.) delete the unpacked folder => otherwise it won't work!!!\n> 3.) drop the new war into webapps\n> 4.) start tomcat again\n\nNot the case as of Tomcat 8.0.21. On restart, Tomcat will now detect the updated WAR, delete the expanded directory and expand the updated WAR (assuming deployOnStartup=\"true\").\n\n> I understand, that a revert of the changes isn't easy, but for my opinion,\n> unpackWars=\"false\" isn't usable with tomcat 8 any more without refactoring\n> many of our logic to bypass the new loader behavior. \n> The problem is, that we don't know, which of the used libs also have a\n> problem (like com.mycila.xmltool), so we would be happy, if the behavior of\n> tomcat 8 keeps compatible tomcat 7.\n\nTomcat's general policy for adding workarounds for bugs in other projects is that we won't do it. Fixing the issue at the source means the fix is more widely available and we have more time to spend on Tomcat bugs and new feature requests. We do make occasional exceptions - usually when the bug is likely to affect a large proportion of the Tomcat user based and the 3rd party vendor has indicated that they have no intention of fixing the bug.\n\nThe new ability to detect an updated WAR while Tomcat has stopped looks to be sufficient to remove the need for your application to run with unpackWARs=\"false\".\n\nThe behaviour of javax.crypto with an unpacked WAR is a concern although we don't see as much bouncy castle usage as we used to.\n\nThe issue with com.mycila.xmltool falls into the category that we'd expect the vendor to fix.\n\nAs per the discussion on bug 57251 and as stated above, the preference remains to fix issues people have with unpackWARs=\"true\". I haven't seen anything in this issue that explains why - as of 8.0.21 - running with unpackWARs=\"true\" is not a viable option for you.", "id": 181992, "time": "2015-03-23T11:21:15Z", "creator": "markt@apache.org", "creation_time": "2015-03-23T11:21:15Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 57736, "is_private": false, "text": "Created attachment 32597\nexample war for getResource() from lib\n\nsee README.txt embedded within the zip", "id": 182033, "time": "2015-03-24T08:10:02Z", "creator": "frank.holler@gmx.de", "creation_time": "2015-03-24T08:10:02Z", "attachment_id": 32597}, {"text": "(In reply to Mark Thomas from comment #5)\n> (In reply to Frank Holler from comment #4)\n> The issue with com.mycila.xmltool falls into the category that we'd expect\n> the vendor to fix.\n\nI created a quiet simple test project to demonstrate the problem of\ngetClass().getResource(), which returns an URL.\n\nSo in my opinion, this is no \"vendor specific\" problem, because i only used Java Runtime imports, no additional imports are needed.\n\nKind regards,\nFrank", "tags": [], "bug_id": 57736, "is_private": false, "count": 7, "id": 182034, "time": "2015-03-24T08:14:00Z", "creator": "frank.holler@gmx.de", "creation_time": "2015-03-24T08:14:00Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 182038, "time": "2015-03-24T10:05:15Z", "bug_id": 57736, "creation_time": "2015-03-24T10:05:15Z", "is_private": false, "text": "(In reply to Frank Holler from comment #7)\n> So in my opinion, this is no \"vendor specific\" problem, because i only used\n> Java Runtime imports, no additional imports are needed.\n\nAccepted. The format we use for WAR URLs fails if toURI() is called on it. That needs to get fixed. I'll look at that today.\n\nYou still haven't responded to this: \"I haven't seen anything in this issue that explains why - as of 8.0.21 - running with unpackWARs=\"true\" is not a viable option for you.\""}, {"text": "From Tomcat 8.0.22 onwards (the 8.0.21 release is currently in progress so 8.0.22 should be within the next month) */ is used rather than ^/ which is valid as per RFC 2396. The old format is still supported if it is used but any URLs returned by Tomcat will use the new format. I've also added some test cases to validate these changes.\n\nBy my count that leaves the javax.crypto issue - which will looks like a JRE bug - that you should be able to work-around with unpackWARs=\"true\".", "tags": [], "bug_id": 57736, "is_private": false, "count": 9, "id": 182047, "time": "2015-03-24T11:10:44Z", "creator": "markt@apache.org", "creation_time": "2015-03-24T11:10:44Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "frank.holler@gmx.de", "attachment_id": null, "id": 182050, "time": "2015-03-24T12:13:10Z", "bug_id": 57736, "creation_time": "2015-03-24T12:13:10Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #9)\n> From Tomcat 8.0.22 onwards (the 8.0.21 release is currently in progress so\n> 8.0.22 should be within the next month) */ is used rather than ^/ which is\n> valid as per RFC 2396. The old format is still supported if it is used but\n> any URLs returned by Tomcat will use the new format. I've also added some\n> test cases to validate these changes.\n> \n> By my count that leaves the javax.crypto issue - which will looks like a JRE\n> bug - that you should be able to work-around with unpackWARs=\"true\".\n\nSounds good from me. We will set the pom dependy to \"provided\" an put the bouncy castle provider to CATALINA_BAS/lib. If our customers won't use unpackWars=\"true\", i'll expect that our app will work onTomcat 8 using 8.0.21 and abouve.\n\nThanks for the fast and qualified help.\n\nKind regards,\nFrank"}, {"count": 11, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 182130, "time": "2015-03-26T21:27:54Z", "bug_id": 57736, "creation_time": "2015-03-26T21:27:54Z", "is_private": false, "text": "Just to be clear, the URLs for WAR resources fix will be in 8.0.22 onwards."}, {"count": 12, "tags": [], "text": "Apologies for re-opening this case. I'm using the RSA crypto jars and have the same behavior with 8.0.30. I think the thread below misses the point of where the actual bug is.\n\nWhen not unpacking the war file, the jar signature check is seeing that the jar is signed (in my case the RSA jar, in the previous user's case, the BC jar), but is then checking the signature on the war file itself, instead of the jar. It seems that the functionality of leaving a war file packed, where the war file has a signed jar in its WEB-INF/lib, is simply broken. \n\nOf course there are workarounds - unpacking the war, or moving the signed jars into the tomcat/lib folder - but these are both workarounds for something that is broken. \n\nIf it is the intent of the tomcat community to no longer allow/support signed jars inside packed war files, then there is no choice but to use a workaround, and this limitation should be called out. But I suspect that this behavior is probably inadvertent and should be fixed, rather than insist that war files with signed jars must be unpacked in tomcat8 and beyond.\n\nWhat do you think?", "attachment_id": null, "id": 187617, "creation_time": "2016-01-13T16:05:21Z", "time": "2016-01-13T16:05:21Z", "creator": "rsand@idfconnect.com", "bug_id": 57736, "is_private": false}, {"count": 13, "tags": [], "text": "Let me be more specific - the jar verifier is complaining that the signed jar contains other unrelated resources (a JSP page), which are actually in the war, not the jar at all:\n\nCaused by: java.util.jar.JarException: jar:file:/D:/IDFC/SSORest/app/gateway-2.11.3-SNAPSHOT.war!/WEB-INF/lib/cryptoj-12.52.0.0.jar has unsigned entries - publicauth.jsp\n        at javax.crypto.JarVerifier.verifySingleJar(JarVerifier.java:464)\n        at javax.crypto.JarVerifier.verifyJars(JarVerifier.java:322)\n        at javax.crypto.JarVerifier.verify(JarVerifier.java:250)\n        at javax.crypto.JceSecurity.verifyProviderJar(JceSecurity.java:160)", "is_private": false, "bug_id": 57736, "id": 187618, "time": "2016-01-13T16:21:01Z", "creator": "rsand@idfconnect.com", "creation_time": "2016-01-13T16:21:01Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "I can't repeat the problem you are reporting.\n\nPlease provide a test case that reproduces this issue with one of:\n- 8.0.x trunk\n- 9.0.x trunk\n- latest 8.0.x release\n- latest 9.0.x release\n\nThe test case should be as simple as an index.jsp page to package with the Bouncy Castle provider JAR (I don't have easy access to Crypto-J but if this is the same issue it will be reproducible with BC) in a packed WAR that triggers the exception.\n\nThe test case I am currently using that loads the BC provider works without error.", "attachment_id": null, "id": 187627, "creation_time": "2016-01-13T19:56:25Z", "time": "2016-01-13T19:56:25Z", "creator": "markt@apache.org", "bug_id": 57736, "is_private": false}, {"count": 15, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 188601, "time": "2016-02-19T08:59:55Z", "bug_id": 57736, "creation_time": "2016-02-19T08:59:55Z", "text": "No further information provided.\n\nIf you still observe the problem described in comment #12 then please create a new issue and provide a test case that can be used to reproduce the problem."}]
[{"count": 0, "attachment_id": null, "bug_id": 50471, "is_private": false, "id": 142675, "time": "2010-12-14T09:13:25Z", "creator": "tvsudhir@rediffmail.com", "creation_time": "2010-12-14T09:13:25Z", "tags": [], "text": "We want to create a PDF using FOP. We used XSL and XML files to transform to create PDF. The xml file contains Greek Extended character and its decimal code is 8062 and its Hex code is 1F7E and its HTML representation is &#8062;.\nThe moment this character is discovered in the string then the transformer.transform method throws TransformerException which actually was caused due to ArrayIndexOutofBoundsException.\nThe exact Exception Stack trace is as per below. \nWe tried decoding the FOP code and we could not understand the array lineBreakProperties defined in LineBreakUtils. \n\nPlease help us in getting the way out of this exception.\n\nBase Exception in PDFGenerator.buildPdf() Error in Creating PDF\n      at PDFTest.buildPdf(PDFTest.java:140)\n      at PDFTest.main(PDFTest.java:50)\nCaused by: javax.xml.transform.TransformerException: java.lang.ArrayIndexOutOfBoundsException: -1\n      at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(Unknown Source)\n      at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(Unknown Source)\n      at PDFTest.buildPdf(PDFTest.java:118)\n      ... 1 more\nCaused by: java.lang.ArrayIndexOutOfBoundsException: -1\n      at org.apache.fop.text.linebreak.LineBreakUtils.getLineBreakPairProperty(LineBreakUtils.java:668)\n      at org.apache.fop.text.linebreak.LineBreakStatus.nextChar(LineBreakStatus.java:117)\n      at org.apache.fop.layoutmgr.inline.TextLayoutManager.getNextKnuthElements(TextLayoutManager.java:543)\n      at org.apache.fop.layoutmgr.inline.LineLayoutManager.collectInlineKnuthElements(LineLayoutManager.java:658)\n      at org.apache.fop.layoutmgr.inline.LineLayoutManager.getNextKnuthElements(LineLayoutManager.java:594)\n      at org.apache.fop.layoutmgr.BlockStackingLayoutManager.getNextKnuthElements(BlockStackingLayoutManager.java:294)\n      at org.apache.fop.layoutmgr.BlockLayoutManager.getNextKnuthElements(BlockLayoutManager.java:116)\n      at org.apache.fop.layoutmgr.table.TableCellLayoutManager.getNextKnuthElements(TableCellLayoutManager.java:170)\n      at org.apache.fop.layoutmgr.table.RowGroupLayoutManager.createElementsForRowGroup(RowGroupLayoutManager.java:120)\n      at org.apache.fop.layoutmgr.table.RowGroupLayoutManager.getNextKnuthElements(RowGroupLayoutManager.java:60)\n      at org.apache.fop.layoutmgr.table.TableContentLayoutManager.getKnuthElementsForRowIterator(TableContentLayoutManager.java:228)\n      at org.apache.fop.layoutmgr.table.TableContentLayoutManager.getNextKnuthElements(TableContentLayoutManager.java:172)\n      at org.apache.fop.layoutmgr.table.TableLayoutManager.getNextKnuthElements(TableLayoutManager.java:247)\n      at org.apache.fop.layoutmgr.BlockStackingLayoutManager.getNextKnuthElements(BlockStackingLayoutManager.java:294)\n      at org.apache.fop.layoutmgr.BlockLayoutManager.getNextKnuthElements(BlockLayoutManager.java:116)\n      at org.apache.fop.layoutmgr.BlockStackingLayoutManager.getNextKnuthElements(BlockStackingLayoutManager.java:294)\n      at org.apache.fop.layoutmgr.BlockLayoutManager.getNextKnuthElements(BlockLayoutManager.java:116)\n      at org.apache.fop.layoutmgr.FlowLayoutManager.getNextKnuthElements(FlowLayoutManager.java:107)\n      at org.apache.fop.layoutmgr.PageBreaker.getNextKnuthElements(PageBreaker.java:145)\n      at org.apache.fop.layoutmgr.AbstractBreaker.getNextBlockList(AbstractBreaker.java:552)\n      at org.apache.fop.layoutmgr.PageBreaker.getNextBlockList(PageBreaker.java:137)\n      at org.apache.fop.layoutmgr.AbstractBreaker.doLayout(AbstractBreaker.java:302)Stop...s\n\n      at org.apache.fop.layoutmgr.AbstractBreaker.doLayout(AbstractBreaker.java:264)\n      at org.apache.fop.layoutmgr.PageSequenceLayoutManager.activateLayout(PageSequenceLayoutManager.java:106)\n      at org.apache.fop.area.AreaTreeHandler.endPageSequence(AreaTreeHandler.java:234)\n      at org.apache.fop.fo.pagination.PageSequence.endOfNode(PageSequence.java:123)\n      at org.apache.fop.fo.FOTreeBuilder$MainFOHandler.endElement(FOTreeBuilder.java:340)\n      at org.apache.fop.fo.FOTreeBuilder.endElement(FOTreeBuilder.java:169)\n      at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.endElement(Unknown Source)\n      at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.endElement(Unknown Source)\n      at GregorSamsa.template$dot$0()\n      at GregorSamsa.applyTemplates()\n      at GregorSamsa.transform()\n      at com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.transform(Unknown Source)"}, {"count": 1, "attachment_id": null, "bug_id": 50471, "text": "\nThanks for reporting, and apologies for the late reply...\n\nAt first glance, this seems like a minor oversight in the implementation of Unicode linebreaking in FOP. This does not take into account the possibility that a given codepoint is not assigned a 'class' in linebreaking context. (= U+1F7E does not appear in the file http://www.unicode.org/Public/UNIDATA/LineBreak.txt, which is used as a basis to generate those arrays in LineBreakUtils.java)\n \nOn the other hand, one could obviously raise the question why you so desperately need to have an unassigned codepoint in your output. Are you absolutely sure you need this? If yes, then can you elaborate on the exact reason? (i.e. What exactly is this unassigned codepoint used for?)\n\nThe most straightforward 'fix' seems to be roughly as follows:\n\nIndex: src/java/org/apache/fop/text/linebreak/LineBreakStatus.java\n===================================================================\n--- src/java/org/apache/fop/text/linebreak/LineBreakStatus.java\t(revision 1054383)\n+++ src/java/org/apache/fop/text/linebreak/LineBreakStatus.java\t(working copy)\n@@ -87,6 +87,7 @@\n \n         /* Initial conversions */\n         switch (currentClass) {\n+            case 0: // Unassigned codepoint: consider as AL?\n             case LineBreakUtils.LINE_BREAK_PROPERTY_AI:\n             case LineBreakUtils.LINE_BREAK_PROPERTY_SG:\n             case LineBreakUtils.LINE_BREAK_PROPERTY_XX:\n\nWhat this does, is assign the class 'AL' or 'Alphabetic' to any codepoint that has not been assigned a class by Unicode. This means it will be treated as a regular letter.\nNow, the reason why I am asking the question whether you are sure you know what you're doing, is that this may turn out to be undesirable. Perhaps the character in question needs to be treated as a space rather than a letter. Unicode does not define U+1F7E other than as a 'reserved' character, so it makes sense that Unicode cannot say what should happen with this character in the context of linebreaking...\n\nThat said, it is also wrong of FOP to crash in this case, so the bug is definitely genuine.", "id": 143100, "time": "2011-01-05T13:31:26Z", "creator": "adelmelle@apache.org", "creation_time": "2011-01-05T13:31:26Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "bowditch_chris@hotmail.com", "text": "Indeed you raise a very good point Andreas. Even if you make the code change, I would expect # to appear in the output, because no font is likely to have a glyph for a reserved code point. So I am also interested to hear the business reason for using such a code point.", "id": 143117, "time": "2011-01-06T06:48:25Z", "bug_id": 50471, "creation_time": "2011-01-06T06:48:25Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "Andreas,\n\nThanks a lot for your response. \n\nActually we came across some special characters which are not intended to be present in our database. We can figure out the reasons for this corruption and correct but then I do expect FOP to display whatever content is available. Whatever may be the character, till it is a valid code-point (even though it is reserved and do not have any representation of its own) I do not expect FOP to crash due to it.\n\nAt least there should be some configuration available to the end user to tell FOP to use some default line break in such special cases it becomes specific to the customer who is using FOP. Just because of some special character the entire PDF generation should not be put in stake. Isn't it ? If given a choice to the customer to choose from set of options, to get rid of this situation then it is better, rather than crashing.\n\nFrankly speaking, we lost the hope of getting some response on this issue from Apache. We searched for this problem in google and we have seen many other guys complaining about similar issue (i.e. getting ArrayIndexOutofBoundsException). I believe they also might be having some reserved character in their text. We at least nailed down the cause of the problem. A proper resolution to this issue is of great help, not only to me but many others. \n\nThanks again for looking into it and discussing about it in the forum.", "bug_id": 50471, "attachment_id": null, "id": 143157, "time": "2011-01-06T23:36:48Z", "creator": "tvsudhir@rediffmail.com", "creation_time": "2011-01-06T23:36:48Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 143171, "time": "2011-01-07T07:31:03Z", "bug_id": 50471, "creation_time": "2011-01-07T07:31:03Z", "is_private": false, "text": "(In reply to comment #3)\n> At least there should be some configuration available to the end user to tell\n> FOP to use some default line break in such special cases it becomes specific to\n> the customer who is using FOP. Just because of some special character the\n> entire PDF generation should not be put in stake. Isn't it ? If given a choice\n> to the customer to choose from set of options, to get rid of this situation\n> then it is better, rather than crashing.\n\nVery right indeed. \nSo, if no one objects, I will apply the patch as proposed. FOP will no longer crash, but simply show a '#' for such unassigned codepoints in the output. Treating them as regular alphabetic characters seems to be safe enough for the time being.\nCustomization of and/or more refined configuration possibilities for the Unicode line-breaking algorithm is something that is still on the wish-list for the longer term."}, {"count": 5, "tags": [], "creator": "adelmelle@apache.org", "text": "\nFixed in Trunk. See: http://svn.apache.org/viewvc?rev=1056518&view=rev", "id": 143188, "time": "2011-01-07T16:28:06Z", "bug_id": 50471, "creation_time": "2011-01-07T16:28:06Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 155473, "time": "2012-04-01T06:18:03Z", "bug_id": 50471, "creation_time": "2012-04-01T06:18:03Z", "is_private": false, "text": "batch transition to closed; if someone wishes to restore one of these to resolved in order to perform a verification step, then feel free to do so"}]
[{"text": "Expressions using {0,n} match 0 to n+1 times instead of 0 to n times.\n\nExpression \"[a-z]{0,3}\" against \"123abcdefg123\" matches \"abcd\" not \"abc\".\n\nI fixed the problem in the compiler by changing the method void bracket()...\n\n    /**\n     * Match bracket {m,n} expression put results in bracket member variables\n     * @exception RESyntaxException Thrown if the regular expression has \ninvalid syntax.\n     */\n    void bracket() throws RESyntaxException\n    {\n        // Current character must be a '{'\n        if (idx >= len || pattern.charAt(idx++) != '{')\n        {\n            internalError();\n        }\n\n        // Next char must be a digit\n        if (idx >= len || !Character.isDigit(pattern.charAt(idx)))\n        {\n            syntaxError(\"Expected digit\");\n        }\n\n        // Get min ('m' of {m,n}) number\n        StringBuffer number = new StringBuffer();\n        while (idx < len && Character.isDigit(pattern.charAt(idx)))\n        {\n            number.append(pattern.charAt(idx++));\n        }\n        try\n        {\n            bracketMin[brackets] = Integer.parseInt(number.toString());\n        }\n        catch (NumberFormatException e)\n        {\n            syntaxError(\"Expected valid number\");\n        }\n\n        // If out of input, fail\n        if (idx >= len)\n        {\n            syntaxError(\"Expected comma or right bracket\");\n        }\n\n        // If end of expr, optional limit is 0\n        if (pattern.charAt(idx) == '}')\n        {\n            if (bracketMin[brackets] < 1)\n            {\n                syntaxError(\"Bad zero range\");\n            }\n\n            idx++;\n            bracketOpt[brackets] = 0;\n            return;\n        }\n\n        // Must have at least {m,} and maybe {m,n}.\n        if (idx >= len || pattern.charAt(idx++) != ',')\n        {\n            syntaxError(\"Expected comma\");\n        }\n\n        // If out of input, fail\n        if (idx >= len)\n        {\n            syntaxError(\"Expected comma or right bracket\");\n        }\n\n        // If {m,} max is unlimited\n        if (pattern.charAt(idx) == '}')\n        {\n            idx++;\n            bracketOpt[brackets] = bracketUnbounded;\n            return;\n        }\n\n        // Next char must be a digit\n        if (idx >= len || !Character.isDigit(pattern.charAt(idx)))\n        {\n            syntaxError(\"Expected digit\");\n        }\n\n        // Get max number\n        number.setLength(0);\n        while (idx < len && Character.isDigit(pattern.charAt(idx)))\n        {\n            number.append(pattern.charAt(idx++));\n        }\n        try\n        {\n            bracketOpt[brackets] = Integer.parseInt(number.toString()) - \nbracketMin[brackets];\n/**/\n            if (bracketMin[brackets] < 1)\n                bracketOpt[brackets]--;\n/**/\n        }\n        catch (NumberFormatException e)\n        {\n            syntaxError(\"Expected valid number\");\n        }\n\n        // Optional repetitions must be > 0\n/*\n        if (bracketOpt[brackets] <= 0)\n*/\n        if (bracketOpt[brackets] < 0)\n        {\n            syntaxError(\"Bad range\");\n        }\n\n        // Must have close brace\n        if (idx >= len || pattern.charAt(idx++) != '}')\n        {\n            syntaxError(\"Missing close brace\");\n        }\n    }", "tags": [], "bug_id": 3879, "is_private": false, "count": 0, "id": 6183, "time": "2001-09-28T15:50:36Z", "creator": "chriss@calweb.com", "creation_time": "2001-09-28T15:50:36Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 3879, "text": "patches applied and tested", "id": 27829, "time": "2002-12-13T18:42:32Z", "creator": "jon@latchkey.com", "creation_time": "2002-12-13T18:42:32Z", "is_private": false, "attachment_id": null}, {"text": "closed", "tags": [], "bug_id": 3879, "is_private": false, "count": 2, "id": 27830, "time": "2002-12-13T18:42:45Z", "creator": "jon@latchkey.com", "creation_time": "2002-12-13T18:42:45Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 3879, "attachment_id": null, "text": "I belive this is not correct solution; testcase #174 output must be '', and Perl\nagrees with me:\n\n#!/usr/bin/perl\nprint \"Matching '123abcdefg123' with regexp '([a-z]{0,3})':\\n\";\nif (\"123abcdefg123\" =~ /([a-z]{0,3})/) {\n    print \"Matches. Result: '$1'\\n\";\n}\n\nOutput:\nMatching '123abcdefg123' with regexp '([a-z]{0,3})':\nMatches. Result: ''\n\nPatch will follow...\n", "id": 36014, "time": "2003-04-24T19:29:30Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-04-24T19:29:30Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 3879, "text": "\n\n*** This bug has been marked as a duplicate of 19329 ***", "id": 36130, "time": "2003-04-25T17:55:52Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-04-25T17:55:52Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 3879, "text": "Fixed by Bug #19329", "id": 36480, "time": "2003-05-02T01:09:33Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-05-02T01:09:33Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Running latest 6.0.x,\n\nTo reproduce:\n1. Stop Tomcat\n2. Deploy the examples webapp\n3. Create /webapps/examples/foo.jsp file containing the following text:\n<jsp:include page=\"/jsp/jsp2/jspx/basic.jspx\"/>\n\n4. Make sure that the work folder of Tomcat is empty.\n5. Start Tomcat\n6. Go to http://localhost:8080/examples/foo.jsp\n7. Go to the Manager web application and stop the examples webapp.\n8. Press the \"Find leaks\" button there.\nACTUAL RESULT:\nIt is reported that \"/examples\" causes a leak.\nEXPECTED RESULT:\nNo leaks.\n\nThis issue is apparently caused by an instance of org.apache.jasper.compiler.JspDocumentParser$EnableDTDValidationException\nthat is being kept in a static final field.\n\nMore discussion of such leaks can be found in thread [1] on dev@.\n\n[1] http://tomcat.markmail.org/thread/v4xmg5v5t6oa4mrs\nhttp://marc.info/?l=tomcat-dev&m=129211856426188&w=2\n\nAdditional comments:\n1) This issue affects the first request that loads the JspDocumentParser class. Subsequent requests do not cause the issue. Thus only a single webapp is affected.\n2) The issue does not happen when there is no webapp code in the call stack. I.e., it does not happen if the JSPX page was requested directly.\nThat is why the reproduction recipe uses <jsp:include/>.\n\nPossible solutions:\n1) Preload the JspDocumentParser class when Tomcat starts.\n2) Do not cache the Exception. Create a new instance each time.\n3) Override the fillInStackTrace() method, like it was done in AbstractDOMParser$Abort in Apache Xerces [2]. I do not know, whether that helps or not.\n\n[2] http://svn.apache.org/viewvc/xerces/java/trunk/src/org/apache/xerces/parsers/AbstractDOMParser.java?annotate=782187#l162", "id": 142599, "attachment_id": null, "bug_id": 50460, "creation_time": "2010-12-11T21:33:47Z", "time": "2010-12-11T21:33:47Z", "is_private": false}, {"count": 1, "tags": [], "text": "Waw, that's a nice bug in the JVM !\n\nTo avoid it in tomcat, I vote for 2) Do not cache the Exception. Create a new instance each time.", "is_private": false, "id": 142606, "creation_time": "2010-12-12T16:31:14Z", "time": "2010-12-12T16:31:14Z", "creator": "slaurent@apache.org", "bug_id": 50460, "attachment_id": null}, {"count": 2, "tags": [], "text": "2 gets my vote", "attachment_id": null, "id": 142607, "creator": "markt@apache.org", "time": "2010-12-12T16:38:47Z", "bug_id": 50460, "creation_time": "2010-12-12T16:38:47Z", "is_private": false}, {"text": "I found another place where the same type of leak might occur : in ProxyDirContext (in tc7, I dod not check with tc6), there is \n\n    protected static final NameNotFoundException NOT_FOUND_EXCEPTION =\n        new ImmutableNameNotFoundException();\n\nIn this case the stack does not contain webapp code, so there's no leak of webapp classloader.\nBut there can be a leak of tomcat's classloader if it is embedded...", "tags": [], "bug_id": 50460, "attachment_id": null, "count": 3, "id": 142608, "time": "2010-12-12T16:55:34Z", "creator": "slaurent@apache.org", "creation_time": "2010-12-12T16:55:34Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50460, "is_private": false, "text": "Fixed in trunk in r1044987 and will be in 7.0.6.\nI will propose it for 6.0 and 5.5.\n\nI should note, that 3) fixes the issue in my environment.\n\nFor the JspDocumentParser$EnableDTDValidationException class I am using 2) as the fix and 3) for sake of performance.\n\nFor the ImmutableNameNotFoundException class I am using 3), as 2) would be too much of a change for me.\n\n(In reply to comment #3)\n> But there can be a leak of tomcat's classloader if it is embedded...\n\nProxyDirContext is loaded by the Tomcat's classloader as well, and thus it static field should be GC'able at the same time as the Tomcat classes that might appear in the stacktrace there. So I do not think that there will be an observable leak with ProxyDirContext.", "id": 142618, "time": "2010-12-12T20:20:49Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-12-12T20:20:49Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 50460, "attachment_id": null, "is_private": false, "id": 142686, "time": "2010-12-14T14:25:07Z", "creator": "chris@christopherschultz.net", "creation_time": "2010-12-14T14:25:07Z", "text": "FWIW, I still vote #2. I'm pretty sure that actually throwing the exception is more costly than creating the Exception object."}, {"count": 6, "tags": [], "creator": "markt@apache.org", "text": "Fixed in 6.0.x and will be included in 6.0.30 onwards.", "id": 143085, "attachment_id": null, "bug_id": 50460, "creation_time": "2011-01-05T09:00:07Z", "time": "2011-01-05T09:00:07Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 50460, "is_private": false, "id": 143510, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2011-01-20T12:21:53Z", "time": "2011-01-20T12:21:53Z", "text": "Fixed in 5.5.x and will be included in 5.5.32 onwards."}]
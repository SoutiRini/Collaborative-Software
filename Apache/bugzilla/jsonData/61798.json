[{"count": 0, "attachment_id": 35546, "creator": "marek.zaplata@gmail.com", "text": "Created attachment 35546\nCorrupted file generated by JUnit test attached\n\nFix introduced for bug 53611 is causing another bug which produce a corrupted Excel file.\n\nPOI will generate corrupted file if dimension end column will be the last possible column (number 16384 /column XFD/).\n\nDimension calculation algorithm introduced in revision:\nhttps://svn.apache.org/viewvc?view=revision&revision=1767096\nhas a bug, which sets dimention end cell value too big (+1 column).\n\nThis bug will lead to corrupted file when last cell will be in use.\n\nFollowing test:\nhttps://svn.apache.org/viewvc/poi/trunk/src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java?r1=1767096&r2=1767095&pathrev=1767096\nhas wrong assertion. Cell number 7 is H (not I) column.\n\nTest code to easy reproduce this bug (corrupted Excel file):\n\n@Test\npublic void test53611_bug() throws IOException {\n    Workbook wb = new XSSFWorkbook();\n    Sheet sheet = wb.createSheet(\"test\");\n    Row row = sheet.createRow(1);\n    Cell cell = row.createCell(1);\n    cell.setCellValue(\"blabla\");\n\n    row = sheet.createRow(4);\n\t// Allowable column range for EXCEL2007 is (0..16383) or ('A'..'XDF')\n    cell = row.createCell(16383);\n    cell.setCellValue(\"blabla\");\n\n    // we currently only populate the dimension during writing out\n    // to avoid having to iterate all rows/cells in each add/remove of a row or cell\n    //OutputStream str = new FileOutputStream(\"/tmp/53611_bug.xlsx\");\n    OutputStream str = new ByteArrayOutputStream();\n    try {\n        wb.write(str);\n    } finally {\n        str.close();\n    }\n\n\t// Expected :B2:XFD5\n\t// Actual   :B2:XFE5   <-- which is out of Excel range. This will produce corrupted Excel file\n    assertEquals(\"B2:XFD5\", ((XSSFSheet)sheet).getCTWorksheet().getDimension().getRef());\n\n    wb.close();\n}\n\nCorrupted file generated by this test also attached.", "id": 202338, "time": "2017-11-22T13:33:09Z", "bug_id": 61798, "creation_time": "2017-11-22T13:33:09Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 61798, "text": "Excuse my poor English.\n\nI am applying the patch of the following contents.\n\n\nin org.apache.xssf.usermodel.XSSFSheet\n\nprotected write(OutputStream out) throws IOException {\n   ...\n  \n   // then calculate min/max cell-numbers for the worksheet-dimension\n    if(row.getFirstCellNum() != -1) {\n//     maxCell = Math.min(maxCell, row.getLastCellNum());\n       maxCell = Math.min(maxCell, row.getLastCellNum()-1);\n    }\n\nRow.getLastCellNum() is return the index of the last cell contained in this row PLUS ONE. \n\nI would be pleased if it will be helpful.", "id": 202601, "time": "2017-12-06T12:39:37Z", "creator": "dolphin.in.the.sky.51@gmail.com", "creation_time": "2017-12-06T12:39:37Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 61798, "text": "I made a mistake in patch code.\n\nnot \"row.getFirstCellNum()\"\nCorrectly,\"row.getLastCellNum()\"\n\nSorry.", "id": 202603, "time": "2017-12-06T12:50:44Z", "creator": "dolphin.in.the.sky.51@gmail.com", "creation_time": "2017-12-06T12:50:44Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61798, "text": "Fixed with r1819404, now the dimension should be calculated correctly.", "id": 202939, "time": "2017-12-28T08:47:06Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-12-28T08:47:06Z", "is_private": false, "attachment_id": null}]
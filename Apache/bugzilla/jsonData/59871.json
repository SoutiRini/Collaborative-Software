[{"count": 0, "tags": [], "bug_id": 59871, "attachment_id": null, "id": 192426, "time": "2016-07-16T21:37:06Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-07-16T21:37:06Z", "is_private": false, "text": "The OneLineFormatter is a tremendous improvement to the formatter shipped with default Java, though one cannot change the datetime format nor does it have a sane, standardized, sortable format. I don't want to write a custom formatter or fork this one just to change this property.\n\nI would actually expect that the formatter would use wellknown ISO 8601 datetime for the default output: yyyy-MM-dd'T'HH:mm:ss.SSS. Alternatively, one can use String#format, though I do not know wether this will beat the benefit of the DateFormatCache."}, {"count": 1, "tags": [], "bug_id": 59871, "attachment_id": null, "id": 192487, "time": "2016-07-18T12:19:43Z", "creator": "remm@apache.org", "creation_time": "2016-07-18T12:19:43Z", "is_private": false, "text": "There is no provision to be able to set properties on the fomatters, so it is more difficult to add this support. Adding your own formatter is not very difficult and is the way to go here, so you're going to have to do that."}, {"count": 2, "tags": [], "bug_id": 59871, "attachment_id": null, "text": "(In reply to Remy Maucherat from comment #1)\n> There is no provision to be able to set properties on the fomatters, so it\n> is more difficult to add this support. Adding your own formatter is not very\n> difficult and is the way to go here, so you're going to have to do that.\n\nThat's a JULI shortcoming. Why not provision a standards format then?", "id": 192488, "time": "2016-07-18T12:43:49Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-07-18T12:43:49Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 59871, "text": "(In reply to Remy Maucherat from comment #1)\n> There is no provision to be able to set properties on the fomatters,\n\nThat is not true.\nIt is not documented, but formatters can be configured. It is the same as with other classes,  [<prefix>.]<classname>.<property>\n\nThe <prefix>. is either omitted (to be applied to all instances of a Formatter), or has to be the same as prefix of the Handler to which this formatter belongs.\n\nSee example in bug 55052\n\njava.util.logging.SimpleFormatter is a bad class / bad example, as it can be configured only once and caches its configuration in a static variable.", "id": 192490, "time": "2016-07-18T14:16:00Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2016-07-18T14:16:00Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 59871, "text": "Ok, I really don't understand how this works looking at the FileHandler code, but nice to know.", "id": 192491, "time": "2016-07-18T14:27:54Z", "creator": "remm@apache.org", "creation_time": "2016-07-18T14:27:54Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "This is now configurable in 9.0.x (for 9.0.0.M10 onwards) and 8.5.x (for 8.5.5) onwards.", "attachment_id": null, "bug_id": 59871, "id": 192838, "time": "2016-08-02T21:32:53Z", "creator": "markt@apache.org", "creation_time": "2016-08-02T21:32:53Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 59871, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #5)\n> This is now configurable in 9.0.x (for 9.0.0.M10 onwards) and 8.5.x (for\n> 8.5.5) onwards.\n\nThank for the fix. Though, there is absolutely no documentation. So people won't know about it at all :-(", "id": 192864, "time": "2016-08-03T16:55:18Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-08-03T16:55:18Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 59871, "attachment_id": null, "id": 198175, "time": "2017-04-06T08:10:42Z", "creator": "andreyzykov@gmail.com", "creation_time": "2017-04-06T08:10:42Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #5)\n> This is now configurable in 9.0.x (for 9.0.0.M10 onwards) and 8.5.x (for\n> 8.5.5) onwards.\n\nHello Mark! I'm trying to change timestamp for OneLineFormatter on my Tomcat 8.5.12 but get wrong format. Could you please check?\n\npart of my logging.properties file:\njava.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter\norg.apache.juli.OneLineFormatter.timeFormat = yyyy-MM-dd'T'HH:mm:ss.SSSZ\n\nBut in log I get:\n\n2017-04-06T10:02:23.###+0200.546 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.12\n\nAs you can see - there are ### instead of milliseconds, and milliseconds are at the end of timestamp.\n\nI've tried set TimeFormat to \"EEE, d MMM yyyy HH:mm:ss Z\" and get:\nThu, 6 Apr 2017 10:06:20 +0200.842\n\nAgain - milliseconds are at the end of timestamp."}, {"count": 8, "tags": [], "bug_id": 59871, "text": "(In reply to Andrey Zykov from comment #7)\n> (In reply to Mark Thomas from comment #5)\n> > This is now configurable in 9.0.x (for 9.0.0.M10 onwards) and 8.5.x (for\n> > 8.5.5) onwards.\n> \n> Hello Mark! I'm trying to change timestamp for OneLineFormatter on my Tomcat\n> 8.5.12 but get wrong format. Could you please check?\n> \n> part of my logging.properties file:\n> java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter\n> org.apache.juli.OneLineFormatter.timeFormat = yyyy-MM-dd'T'HH:mm:ss.SSSZ\n> \n> But in log I get:\n> \n> 2017-04-06T10:02:23.###+0200.546 INFO [main]\n> org.apache.catalina.core.StandardEngine.startInternal Starting Servlet\n> Engine: Apache Tomcat/8.5.12\n> \n> As you can see - there are ### instead of milliseconds, and milliseconds are\n> at the end of timestamp.\n> \n> I've tried set TimeFormat to \"EEE, d MMM yyyy HH:mm:ss Z\" and get:\n> Thu, 6 Apr 2017 10:06:20 +0200.842\n> \n> Again - milliseconds are at the end of timestamp.\n\nI had the same issue, read he Javadoc: SSS is not supported. You wan't \"yyyy-MM-dd'T'HH:mm:ss\". Btw, never go for Z but for ZZZ only. Try \"yyyy-MM-dd'T'HH:mm:ssZZZ\".", "id": 198177, "time": "2017-04-06T09:53:12Z", "creator": "1983-01-06@gmx.net", "creation_time": "2017-04-06T09:53:12Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "(In reply to Michael Osipov from comment #8)\n> \n> I had the same issue, read he Javadoc: SSS is not supported. You wan't\n> \"yyyy-MM-dd'T'HH:mm:ss\". Btw, never go for Z but for ZZZ only. Try\n> \"yyyy-MM-dd'T'HH:mm:ssZZZ\".\n\nIt still adds milliseconds at the end of timestamp:\n\n2017-04-06T12:17:55+0200.574", "attachment_id": null, "id": 198179, "creator": "andreyzykov@gmail.com", "time": "2017-04-06T10:20:41Z", "bug_id": 59871, "creation_time": "2017-04-06T10:20:41Z", "is_private": false}, {"count": 10, "tags": [], "creator": "1983-01-06@gmx.net", "attachment_id": null, "text": "(In reply to Andrey Zykov from comment #9)\n> (In reply to Michael Osipov from comment #8)\n> > \n> > I had the same issue, read he Javadoc: SSS is not supported. You wan't\n> > \"yyyy-MM-dd'T'HH:mm:ss\". Btw, never go for Z but for ZZZ only. Try\n> > \"yyyy-MM-dd'T'HH:mm:ssZZZ\".\n> \n> It still adds milliseconds at the end of timestamp:\n> \n> 2017-04-06T12:17:55+0200.574\n\nI got it now. Sorry, it has to be XXX instead of ZZZ for ISO-compliant offset. Anyway, the custom formatter assumes that nothing comes after the 'ss' as far as I can see and simply adds the fraction. You should file a separate issue for that.", "id": 198182, "time": "2017-04-06T11:38:01Z", "bug_id": 59871, "creation_time": "2017-04-06T11:38:01Z", "is_private": false}, {"count": 11, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "text": "(In reply to Andrey Zykov from comment #7)\n> java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter\n> org.apache.juli.OneLineFormatter.timeFormat = yyyy-MM-dd'T'HH:mm:ss.SSSZ\n> \n> But in log I get:\n> \n> 2017-04-06T10:02:23.###+0200.546 INFO [main]\n> org.apache.catalina.core.StandardEngine.startInternal Starting Servlet\n> Engine: Apache Tomcat/8.5.12\n> \n> As you can see - there are ### instead of milliseconds, and milliseconds are\n> at the end of timestamp.\n> \n> I've tried set TimeFormat to \"EEE, d MMM yyyy HH:mm:ss Z\" and get:\n> Thu, 6 Apr 2017 10:06:20 +0200.842\n> \n> Again - milliseconds are at the end of timestamp.\n\nThe OneLineFormatter uses a cache for formatted time stamps with seconds granularity. That means the value formatted in the cache replaces \"S\" in the original format with \"#\" such that we get some reuse for the formatted patterns.\n\nNow OneLineFormatter would need to replace the \"#\" characters in the results it gets from the cache with the sub seconds fraction of the current time. At the moment it does not do it and instead just appends them. If the format string does not contain any \"S\", no \"#\" will show up and you do not realize.\n\nWhat we could do is check whether and how many \"#\" chars are in the formatted time and replace with the milliseconds. If we see exactly three \"#\" chars, that would be easy to do.\n\nIf the format string only has fixed size items in front of the milliseconds, and uses \"SSS\" for the milliseconds, then one could do it relatively efficient, since we could precalculate the correct offsets.\n\nAll in all I doubt that it is worth the effort and the performance risk. Maybe we should just document the behavior, that we do not support \"S\" in the timestamp format and always append the milliseconds separated by a dot to the end of the formatted time stamp.", "id": 198188, "time": "2017-04-06T13:29:43Z", "bug_id": 59871, "creation_time": "2017-04-06T13:29:43Z", "is_private": false}]
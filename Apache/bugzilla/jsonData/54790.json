[{"count": 0, "tags": [], "bug_id": 54790, "is_private": false, "id": 166334, "attachment_id": null, "creator": "dma_k@mail.ru", "creation_time": "2013-04-02T18:41:47Z", "time": "2013-04-02T18:41:47Z", "text": "In my case I have 70MB Word document, which actually results 50MB plain text (after saved as...). When this document is loaded using POI the following error occurs:\n\nCaused by: java.lang.OutOfMemoryError: Java heap space\n\tat java.lang.StringCoding$StringDecoder.decode(StringCoding.java:133)\n\tat java.lang.StringCoding.decode(StringCoding.java:173)\n\tat java.lang.String.<init>(String.java:443)\n\tat java.lang.String.<init>(String.java:515)\n\tat org.apache.poi.hwpf.model.TextPiece.buildInitSB(TextPiece.java:89)\n\tat org.apache.poi.hwpf.model.TextPiece.<init>(TextPiece.java:66)\n\tat org.apache.poi.hwpf.model.TextPieceTable.<init>(TextPieceTable.java:111)\n\tat org.apache.poi.hwpf.model.ComplexFileTable.<init>(ComplexFileTable.java:70)\n\tat org.apache.poi.hwpf.HWPFDocument.<init>(HWPFDocument.java:267)\n\tat org.apache.poi.hwpf.HWPFDocument.<init>(HWPFDocument.java:186)\n\nAs to my observations 70MB document explodes to approx 900MB heap.\n\nAnalysis:\n\nAs I can see, class TextPieceTable creates thousands of TextPiece objects (and thus thousands of StringBuilder objects with small char[] buffers). Later HWPFDocument strategy is the following:\n\n- it collects all text pieces again in line 275:\n  _text = _tpt.getText();\n- if preserveTextTable=false, then new ComplexFileTable object is created holing one TextPieceTable, holding one SinglentonTextPiece in lines 314-318\n\nPerhaps this can be further improved. In particular when preserveTextTable=false then TextPieceTable should not make a copy of documentStream part:\n\nSystem.arraycopy( documentStream, start, buf, 0, textSizeBytes );\n\nand use another lightweight version of TextPiece without buffer. Later when all text pieces need to be collected, they can be taken directly from documentStream."}, {"count": 1, "tags": [], "bug_id": 54790, "attachment_id": null, "text": "Dmitry,\n\nHow much memory does you JVM have? Is it standard (JVM-default) 64/128 Mb setting, or is it some kind of mobile system?\n\nSomtimes to load the whole file into memory is the only way to process it. For example, you can't even break text into paragraphs without checking TextPiece content. And to use TextPiece just as some lightweigh proxy to DocumentStream going to be very ineffective (due to required character encoding-deconding process).\n\nAlso, disabling preserveTextTable means the whole text is reconstructed into single buffer (StringBuilder). And in most cases there is no single pointer to document stream. Is a reconstruction of pretty complex structure using data from ComplexFileTable. Perhaps is it possible to use \"lightweight\" \"TextPieceProxy\" when \"preserveTextTable=true\" if we need only to read text. But from my point of view, it is not a nice way.", "id": 166341, "time": "2013-04-02T20:20:39Z", "creator": "vlsergey@gmail.com", "creation_time": "2013-04-02T20:20:39Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 54790, "is_private": false, "count": 2, "id": 166442, "time": "2013-04-06T15:21:42Z", "creator": "dma_k@mail.ru", "creation_time": "2013-04-06T15:21:42Z", "text": "To be more precise:\n- Opening fails with -Xmx800MB\n- Opening succeeded with -Xmx900MB\n\nExpected:\n- Opening succeeds with -Xmx300MB\n\nI repeat: DOC file size is 70MB. Potentially I can cut or put it as is to fileshare.\n\n> And to use TextPiece just as some lightweigh proxy to DocumentStream going to be very ineffective (due to required character encoding-deconding process).\n\nDeferred encoding-deconding is not a problem: the only flag is \"unicode=true|false\". The problem is that DocumentStream is cut into millions of tiny char buffers.\n\n> Also, disabling preserveTextTable means the whole text is reconstructed into single buffer (StringBuilder).\n\nOOM happens before whole text is reconstructed. I would agree for x3 memory consumption, that is 70MB -> 210MB heap. But x10 is too much. And yes, \"preserveTextTable\" is disabled by default as far as I can see, unless it is enabled by system property."}, {"attachment_id": null, "tags": [], "bug_id": 54790, "text": "In order to take a look it would be interesting what content there is in the document, any chance of providing the sample document as attachment here?", "count": 3, "id": 192596, "time": "2016-07-24T10:37:48Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-07-24T10:37:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54790, "attachment_id": null, "is_private": false, "id": 192849, "time": "2016-08-03T08:59:04Z", "creator": "dma_k@mail.ru", "creation_time": "2016-08-03T08:59:04Z", "text": "The document can be downloaded from here:\nhttps://www.dropbox.com/s/h837yv1jrnjp9zq/poi_54790_test.7z?dl=1"}]
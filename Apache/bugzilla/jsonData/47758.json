[{"count": 0, "tags": [], "bug_id": 47758, "text": "Created attachment 24184\nbase64 Encoded file\n\nHi \n\nCan you please help to find the reason that why XMLSec lib is failing to\nvalidate the Signature, which can passes test successfully with JDK 6 inbuilt\nSignature verification.", "id": 130024, "time": "2009-08-28T06:06:30Z", "creator": "bhupinder.saini@gmail.com", "creation_time": "2009-08-28T06:06:30Z", "is_private": false, "attachment_id": 24184}, {"count": 1, "tags": [], "bug_id": 47758, "text": "Below is code used with JDK 6 testing \nDocument doc =\n                 dbf.newDocumentBuilder().parse(byteArrayInputStream);\n\n        NodeList nl =\n                 doc.getElementsByTagNameNS(XMLSignature.XMLNS,\n                                            \"Signature\");\n        if (nl.getLength() == 0) {\n            System.out.println(\"0\");\n            return;\n        }\n\n        String providerName = System.getProperty(\n                \"jsr105Provider\",\n                \"org.jcp.xml.dsig.internal.dom.XMLDSigRI\");\n        XMLSignatureFactory fac =\n                            XMLSignatureFactory.getInstance(\"DOM\",\n                                                            (Provider) Class.forName(providerName).newInstance());\n        DOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), nl.item(0));\n\n        XMLSignature signature =\n                     fac.unmarshalXMLSignature(valContext);\n        signature.getSignatureValue().validate(valContext);\n        boolean coreValidity = signature.validate(valContext);\n\n        if (coreValidity == false) {\n            System.err.println(\"Signature failed\");\n        } else {\n            System.out.println(\"Signature passed\");\n        }\n\n******************************************************************\n\nWhen I try to validate this signature with xmlsecurity jar I tried latest 1.4.3\nit give me error\n\n XMLSignature [WARN] Signature verification failed\n\ncode snippet used for this\n\nXMLSignature sig = null;\n\npublic void verify(Key k)\n            throws SAMLException {\n        if (!isSigned()) {\n            throw new InvalidCryptoException(\"SAMLSignedObject.verify() can't verify unsigned object\");\n        }\n\n        try {\n            // Validate the signature content by checking for specific Transforms.\n            boolean valid = false;\n            SignedInfo si = sig.getSignedInfo();\n            if (si.getLength() == 1) {\n                Reference ref = si.item(0);\n                if (ref.getURI() == null || ref.getURI().equals(\"\") || ref.getURI().equals(\"#\" + getId())) {\n                    Transforms trans = ref.getTransforms();\n                    for (int i = 0; i < trans.getLength(); i++) {\n                        if (trans.item(i).getURI().equals(Transforms.TRANSFORM_ENVELOPED_SIGNATURE)) {\n                            valid = true;\n                        } else if (!trans.item(i).getURI().equals(\n                                Transforms.TRANSFORM_C14N_EXCL_OMIT_COMMENTS)) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (!valid) {\n                throw new InvalidCryptoException(\n                        \"SAMLSignedObject.verify() detected an invalid signature profile\");\n            } else {\n                log.debug(\"\\n SAMLSignedObject is Valid for Id - \" + getId());\n            }\n            // If k is null, try and find a key inside the signature.\n            if (k == null) {\n                if (sig_from_parse) {\n                    k = sig.getKeyInfo().getPublicKey();\n                } else {\n                    // This is really, ugly, but when the signature hasn't been fully built from a DOM,\n                    // none of the interesting bits of keying material are reachable via the API.\n                    // We have to serialize out the KeyInfo piece, and reparse it.\n                    ByteArrayOutputStream out = new ByteArrayOutputStream();\n                    Canonicalizer c = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n                    out.write(c.canonicalizeSubtree(sig.getElement().getLastChild()));\n                    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n                    KeyInfo temp = new KeyInfo(XML.parserPool.parse(in).getDocumentElement(), \"\");\n                    k = temp.getPublicKey();\n                }\n            }\n     ---------------->       if (!sig.checkSignatureValue(k)) {\n                throw new InvalidCryptoException(\n                        \"SAMLSignedObject.verify() failed to validate signature value\");\n            }\n        } catch (XMLSecurityException e) {\n            throw new InvalidCryptoException(\"SAMLSignedObject.verify() detected an XML security exception: \" +\n                                             e.getMessage(), e);\n        } catch (java.io.IOException e) {\n            throw new InvalidCryptoException(\"SAMLSignedObject.verify() detected an I/O exception: \" +\n                                             e.getMessage(), e);\n        } catch (SAXException e) {\n            throw new InvalidCryptoException(\"SAMLSignedObject.verify() detected a XML parsing exception: \" +\n                                             e.getMessage(), e);\n        }\n    }\n\n\nverification fails here \n ---------------->       if (!sig.checkSignatureValue(k))", "id": 130025, "time": "2009-08-28T06:10:49Z", "creator": "bhupinder.saini@gmail.com", "creation_time": "2009-08-28T06:10:49Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 47758, "is_private": false, "text": "debug logs for XMLSec\n\n2009-08-28 12:58:27 XMLSignature [DEBUG] SignatureMethodURI = http://www.w3.org/2000/09/xmldsig#rsa-sha1\n2009-08-28 12:58:27 SignatureAlgorithm [DEBUG] Create URI \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" class \"class org.apache.xml.security.algorithms.implementations.SignatureBaseRSA$SignatureRSASHA1\"\n2009-08-28 12:58:27 JCEMapper [DEBUG] Request for URI http://www.w3.org/2000/09/xmldsig#rsa-sha1\n2009-08-28 12:58:27 SignatureBaseRSA [DEBUG] Created SignatureRSA using SHA1withRSA\n2009-08-28 12:58:27 XMLSignature [DEBUG] jceSigAlgorithm    = SHA1withRSA\n2009-08-28 12:58:27 XMLSignature [DEBUG] jceSigProvider     = SunRsaSign\n2009-08-28 12:58:27 XMLSignature [DEBUG] PublicKey = Sun RSA public key, 2048 bits\n  modulus: 25918416882175605177216009726174837316441550828262042204378729573762219256687210251207638298581492791783901925937674819569676189835913463082888950035087140493036515406315054017897863839176877251865992061599674312550362120395818500256745539648051487177355629956843315369742534134646813352152646639953693900612620621197131734341673384743806408779269116272369176371943198756046320523429088308460618442218611336570361829340741104996601445346137166853233642642880297617656502996279597254682668023118574695616838314939925813076224299383401792388720966918690719270245047899588505041531857897977050932365566174686817838760379\n  public exponent: 65537\n2009-08-28 12:58:27 SignerOutputStream [DEBUG] Canonicalized SignedInfo:\n2009-08-28 12:58:27 SignerOutputStream [DEBUG] <SignedInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\" xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"></CanonicalizationMethod><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></SignatureMethod><Reference URI=\"\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></Transform></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></DigestMethod><DigestValue>O2feqgh4rXIaLmVujT3ZJfSsIUg=</DigestValue></Reference></SignedInfo>\n2009-08-28 12:58:27 XMLSignature [WARN] Signature verification failed.", "id": 130026, "time": "2009-08-28T06:26:07Z", "creator": "bhupinder.saini@gmail.com", "creation_time": "2009-08-28T06:26:07Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "coheigea@apache.org", "text": "\nCan you attach a complete test-case for this?\n\nColm.", "id": 130060, "time": "2009-08-31T04:12:41Z", "bug_id": 47758, "creation_time": "2009-08-31T04:12:41Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47758, "is_private": false, "text": "(In reply to comment #3)\n> Can you attach a complete test-case for this?\n> \n> Colm.\n\n******************************************************************\nHi Colm\n\nThis SAML response is posted to my application which tries to validate the Digital Signature in the SAML. I am using Opensaml 1.1 toolkit which in turn uses \nxmlsec jar for validating the signatures.\n\nI am getting signature failure error in the logs.\nWhat when I take the same base64 encoded response and store it in file and use JDK 6 security / Signature verfication as per the above code it works just fine.\n\nCan you please let me know what exactly you are looking from test case ?\n\nthanks\nbhupinder", "id": 130094, "time": "2009-09-01T01:27:41Z", "creator": "bhupinder.saini@gmail.com", "creation_time": "2009-09-01T01:27:41Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 47758, "text": "\nI don't get it. You're using the basic JSR 105 API functionality via JDK 1.6 to validate the signature, but comparing this to doing some custom validation code built around XML Security? Why are you doing this? The following XML Security code works fine with your test-case:\n\n        org.w3c.dom.Document doc = this.db.parse(is);\n\n        Element nscontext = XMLUtils.createDSctx(doc, \"ds\",Constants.SignatureSpecNS);\n        Element sigElement = (Element) XPathAPI.selectSingleNode(doc,\"//ds:Signature[1]\", nscontext);\n        XMLSignature signature = new XMLSignature(sigElement, \"\");\n\n        signature.addResourceResolver(new XPointerResourceResolver(sigElement));\n\n        KeyInfo ki = signature.getKeyInfo();\n\n        java.security.PublicKey publicKey = ki.getPublicKey();\n        \n        assertTrue(signature.checkSignatureValue(publicKey));\n\nColm.", "id": 130115, "time": "2009-09-02T03:38:05Z", "creator": "coheigea@apache.org", "creation_time": "2009-09-02T03:38:05Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "coheigea@apache.org", "text": "\nMarking this as won't fix as per my comment.\n\nColm.", "id": 130969, "time": "2009-10-08T03:06:38Z", "bug_id": 47758, "creation_time": "2009-10-08T03:06:38Z", "is_private": false, "attachment_id": null}]
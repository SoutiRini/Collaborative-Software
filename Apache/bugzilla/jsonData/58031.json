[{"count": 0, "attachment_id": 32821, "bug_id": 58031, "text": "Created attachment 32821\nInitial draft of patch, created against trunk.\n\nWhen data exceeding the value of the \"maxPostSize\" configuration parameter is posted within a deployed application, the application sees an empty request parameter map and cannot access the posted data, yet Tomcat returns a 200 status, indicating to the client that everything was processed successfully (which likely will mislead the client).  The correct behavior is to return a status of 413 (\"Request Entity Too Large\") to indicate that the request could not be fully processed due to the size being too large.\n\nAttached is a patch that will set the response status to 413 when Tomcat discovers that the posted data exceeds maxPostSize.", "id": 183508, "time": "2015-06-13T07:42:06Z", "creator": "christopherleesimons@gmail.com", "creation_time": "2015-06-13T07:42:06Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I'm iffy on this patch because it's not configurable (I'd like to point out that the current behavior is also not configurable, and this definitely is an improvement). The application itself might want to check this situation and react differently, like it can when there are too many request parameters.\n\nYou should check out the FailedRequestFilter to see what happens in that case:\nhttp://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#Failed_Request_Filter\n\nIt does almost what you want, except that it returns a 400 response instead of 413, and only currently works for violations of maxParameterCount.\n\nLook into how Globals.PARAMETER_PARSE_FAILED_ATTR is used to communicate this situation to the application and see if you can come up with something that might work better than your current proposal.", "is_private": false, "id": 183567, "creator": "chris@christopherschultz.net", "time": "2015-06-16T19:53:39Z", "bug_id": 58031, "creation_time": "2015-06-16T19:53:39Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58031, "attachment_id": null, "text": "Agreed. The right response is definitely going to be application dependent. Most of the problem stems from getParameterXXX() methods not declaring any exceptions. We also run the risk of breaking lots of stuff if we start sending 413 responses where we currently send a 200 response.\n\nOn balance I think setting some a custom request attribute that an application can check if they want to (and if not the current behaviour continues) along the lines of Globals.PARAMETER_PARSE_FAILED_ATTR is going to be the way to go.", "id": 183572, "time": "2015-06-16T20:46:02Z", "creator": "markt@apache.org", "creation_time": "2015-06-16T20:46:02Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58031, "attachment_id": 32829, "text": "Created attachment 32829\nAdd FailedRequestFilter note to maxPostSize documentation.", "id": 183576, "time": "2015-06-16T21:31:00Z", "creator": "christopherleesimons@gmail.com", "creation_time": "2015-06-16T21:31:00Z", "is_private": false}, {"count": 4, "text": "(In reply to Christopher Schultz from comment #1)\n> Look into how Globals.PARAMETER_PARSE_FAILED_ATTR is used to communicate\n> this situation to the application and see if you can come up with something\n> that might work better than your current proposal.\n\nIt appears that both checks for maxPostSize do result in Globals.PARAMETER_PARSE_FAILED_ATTR being set: in Request#parseParts, an exception is thrown, and in the finally block of the try/catch/finally block parameters.setParseFailed(true) is set.  In Request#parseParameters, the try/catch/finally block is exited without setting 'success' to true, and the finally block calls parameters.setParseFailed(true) in this case.  So it appears the original concern about return 200 in this case is addressed.\n\nThe documentation for maxParameterCount notes that FailedRequestFilter can be used to reject requests that exceed this limit.  I've attached a patch to include the same note in the maxPostSize documentation after verifying 400 is returned in this case (as noted above).\n\n> It does almost what you want, except that it returns a 400 response instead\n> of 413\n\nUnconditionally sending a 400 from FailedRequestFilter upon failure seems incorrect as the HTTP spec states that 400 is to be used when the request failed \"due to malformed syntax,\"[1] which isn't the case for maxPostSize and maxParameterCount violations; in some parse failure cases 400 is correct, but for these violations 413 seems more appropriate.  I'd propose implementing a mechanism to indicate from the parsing code which status should be returned from FailedRequestParameter.  Thoughts?\n\n[1] HTTP/1.1: Status Code Definitions\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1", "creator": "christopherleesimons@gmail.com", "is_private": false, "id": 183577, "time": "2015-06-16T21:31:39Z", "bug_id": 58031, "creation_time": "2015-06-16T21:31:39Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58031, "attachment_id": null, "text": "I was thinking a using the existing attribute to trigger a 400 response and a new attribute to trigger a 413 response. That should cover all the current possibilities for parameter/part issues.\n\nNote RFC 2616 is obsolete.", "id": 183579, "time": "2015-06-16T22:00:17Z", "creator": "markt@apache.org", "creation_time": "2015-06-16T22:00:17Z", "is_private": false}, {"count": 6, "tags": [], "text": "(In reply to Christopher L. Simons from comment #4)\n> \n> Unconditionally sending a 400 from FailedRequestFilter upon failure seems\n> incorrect as the HTTP spec states that 400 is to be used when the request\n> failed \"due to malformed syntax,\"[1] \n> \n> [1] HTTP/1.1: Status Code Definitions\n> http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1\n\nIn my opinion, it would be nice to use 413, but it is not wrong to use 400. \"400\" is just the generic error code in 4xx series. It says \"it is client's fault\". Nothing more.\n\nLikewise \"500\" is the generic error code in 5xx series.\n\n\nNote that RFC2616 is obsolete.\nCurrent specification for HTTP/1.1 status codes is RFC 7231:\nhttp://tools.ietf.org/html/rfc7231#section-6.5.1\n\nHTTP RFCs are listed at\nhttps://wiki.apache.org/tomcat/Specifications#HTTP", "is_private": false, "id": 183580, "creator": "knst.kolinko@gmail.com", "time": "2015-06-16T22:06:30Z", "bug_id": 58031, "creation_time": "2015-06-16T22:06:30Z", "attachment_id": null}, {"count": 7, "text": "(In reply to Mark Thomas from comment #5)\n> I was thinking a using the existing attribute to trigger a 400 response and\n> a new attribute to trigger a 413 response. That should cover all the current\n> possibilities for parameter/part issues.\n\n-1.\n\nBy my '-1' vote I mean that when \"using a new attribute to trigger a 413 response\" I am against changing the meaning of the existing attribute. If something failed, the existing attribute should continue to indicate failure.\n\nIt can be\n1) Globals.PARAMETER_PARSE_FAILED_ATTR to signal presence of an error\n2) additional attribute to signal the kind of an error.\n\nOriginally when introducing PARAMETER_PARSE_FAILED_ATTR I have not defined what its value is. It was documented as \"absent = success\", \"any not-null value = failure\" with an intent to introduce different not-null values for different use cases. Nowadays javadoc for Globals.PARAMETER_PARSE_FAILED_ATTR explicitly mentions Boolean.TRUE as the value. Thus for compatibility it is better to go with a separate attribute to communicate the reason of the failure.\n\nTechnically, PARAMETER_PARSE_FAILED_ATTR is a facade that exposes the value of internal coyoteRequest.getParameters().isParseFailed() flag. For reference: r1200218\n\n\nHistorically this attribute and FailedRequestFilter were introduced as a review of CVE-2012-0022 fix that introduced \"maxParameterCount\" limit. The intent was to be able to perform a simple test that none parameters were lost.\n\nAlso I think that exceeding the \"maxParameterCount\" limit also would better result in response status 413.\n\n\nI wish there were a Servlet API way to communicate parameter processing errors.\n\nHttpServletRequest.getParts() and getPart() methods implement some way to indicate errors by throwing an exception, but an IllegalStateException thrown there is used to indicate both \"size limit exceeded\" and \"missing multipart-config\" conditions. [1]\n\nThere exist \"javax.servlet.error.exception\" and other standard Request attributes as defined in ch.10.9.1 of Servlet 3.1 specification, but IIRC they are used only when performing an error processing dispatch.\n\n[1] http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getParts%28%29", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 183581, "time": "2015-06-16T22:59:16Z", "bug_id": 58031, "creation_time": "2015-06-16T22:59:16Z", "tags": [], "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 58031, "text": "(In reply to Konstantin Kolinko from comment #7)\n> (In reply to Mark Thomas from comment #5)\n> > I was thinking a using the existing attribute to trigger a 400 response and\n> > a new attribute to trigger a 413 response. That should cover all the current\n> > possibilities for parameter/part issues.\n> \n> -1.\n\nFair enough. How about using a second attribute to set the response code? If set use the defined code. If not set, use 400.", "id": 183602, "time": "2015-06-17T13:06:13Z", "creator": "markt@apache.org", "creation_time": "2015-06-17T13:06:13Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 58031, "attachment_id": null, "text": "I'd prefer being able to set the response code using an init-param. If we want to keep the current behavior and add on to it, it seems we need a second attribute to indicate the second condition. In either case, I think it woul dbe nice for the user to be able to customize the HTTP response code.\n\n[I don't like returning 413 (Entity Too Large) for \"too many request parameters\" unless it's actually a POST with a request entity.]", "id": 183626, "time": "2015-06-18T15:38:08Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-06-18T15:38:08Z", "is_private": false}, {"count": 10, "tags": [], "creator": "markt@apache.org", "text": "I've patched trunk (9.0.x) to make the reason for the failure available as a request attribute that the FailedRequestFilter can then use to provide a better status code to the client.\n\nI'll give it a few days for folks to review and comment on the patch before back-porting it.", "id": 183733, "time": "2015-06-24T13:27:20Z", "bug_id": 58031, "creation_time": "2015-06-24T13:27:20Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 58031, "text": "No objections were raised so I have back-ported this to 8.0.x (for 8.0.25 onwards) and 7.0.x (for 7.0.64 onwards). I have also proposed it for 6.0.x.", "id": 184376, "time": "2015-08-06T10:06:13Z", "creator": "markt@apache.org", "creation_time": "2015-08-06T10:06:13Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "bug_id": 58031, "is_private": false, "id": 185823, "time": "2015-10-21T13:54:31Z", "creator": "christopherleesimons@gmail.com", "creation_time": "2015-10-21T13:54:31Z", "tags": [], "text": "Any objections to applying the attached documentation patch?  I think it would save many users from having to search and dig up this post to realize they can use FailedRequestFilter to adjust the behavior that occurs when @maxPostSize is exceeded."}, {"count": 13, "tags": [], "creator": "markt@apache.org", "text": "Fixed in 6.0.x for 6.0.45 onwards.", "id": 186223, "time": "2015-11-03T12:34:03Z", "bug_id": 58031, "creation_time": "2015-11-03T12:34:03Z", "is_private": false, "attachment_id": null}]
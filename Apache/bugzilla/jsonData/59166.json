[{"count": 0, "tags": [], "bug_id": 59166, "attachment_id": null, "is_private": false, "id": 189361, "time": "2016-03-11T16:32:52Z", "creator": "kong.shijun@gmail.com", "creation_time": "2016-03-11T16:32:52Z", "text": "Currently implementation will register not only temp directory, but also individual files to java.io.DeleteOnExitHook via java.io.File#deleteOnExit\n\nFor some long running applications which generate tons of files via POI, it will create huge garbage to the hook, even the actual temp files have already been deleted. \n\nToday, there is only one system property flag \"poi.keep.tmp.files\". If turn off, both temp directory and temp files won't be deleted on exit. Can we always ignore files, and only register temp directory?"}, {"count": 1, "tags": [], "bug_id": 59166, "text": "Would you be able to put together a patch together with some unit-tests that would address and verify this?", "id": 189390, "time": "2016-03-11T22:38:09Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-11T22:38:09Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59166, "text": "I am setting this to Enhancement for now as you can already implement your own TempFileCreationStrategy, which allows to do this differently if this is actually a problem for your application.", "id": 189403, "time": "2016-03-12T15:27:36Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-12T15:27:36Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "onealj@apache.org", "text": "None of the POI unit tests run long enough to experience the problems you're experiencing. While we could register just the directory for deletion on JVM exit, this strategy seems dangerous if the directory was not empty before starting or a separate application wrote data to the directory. Under these conditions, data loss could occur.\n\nAnother strategy for long-running processes is to keep a fixed-length queue of files and delete the files FIFO as the queue overflows.\nThis would mean not registering deleteOnExit with the JVM, so you would need to intercept a JVM exit message to delete the files remaining in the queue before the JVM shut down.\n\nYou could also implement a strategy that deletes all temp files that have been created. This is essentially the same as above using a variable-length set that never implicitly deletes files.\n\nI don't think any of these strategies are safe enough to implement without getting into trouble: either leaving temp files behind or accidentally deleting files that shouldn't have been deleted. If you have a better TempFileCreationStrategy that would appeal to many users, feel free to re-open this bug with the corresponding patch.", "id": 191738, "time": "2016-06-17T09:53:39Z", "bug_id": 59166, "creation_time": "2016-06-17T09:53:39Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "text": "With the changes from bug 59788, the strategy described in Comment 0 could be accomplished by:\n\nFile tempDir = DefaultTempFileCreationStrategy.createTempDirectory(\"registeredDirectory\");\nfor (String f : filesToAdd) {\n    createSomeFile(new File(tempDir, f));\n}\n\nI updated the documentation in r1751190 to make the purpose of DefaultTempFileCreationStrategy clearer and suggestions for other TempFileCreationStrategy's that may be useful outside of the POI project.", "id": 192086, "time": "2016-07-04T01:13:08Z", "bug_id": 59166, "creation_time": "2016-07-04T01:13:08Z", "is_private": false, "attachment_id": null}]
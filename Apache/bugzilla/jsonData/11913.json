[{"count": 0, "tags": [], "bug_id": 11913, "is_private": false, "text": "When trying to use the MS SOAP ISAPI DLL with Apache I encountered an issue \nwhere if the ISAPIFakeAsync flag was used the ISAPI handler could miss the \nsignal that the DLL was done and cause each of the worker threads in Apache to \nblock indefinately, which would eventually end up the winnt_accept() function \nin mpm_winnt.c in 2.0.39 or child.c in 2.0.40 spinning with a Sleep(0) when all \nthe worked threads ended up blocking.\n\nAfter looking into the issue on the 2.0.39 code base and double checking the \n2.0.40 code base but not the current code base to see if it was already fixed, \nit appears that the problem is that the ISAPI module was receiving the \nasynchronous completion notification through the ServerSupportFunction() before \nthe code that was handling the HSE_STATUS_PENDING return from the ISAPI dll in \nthe isapi_handler() function in mod_isapi.c was set up to handle receiving the \ncompletion.\n\nTo resolve this issue I added a new int didcomplete member variable to the \nisapi_cid structure and set that to 1 in the ServerSupportFunction() when it \nreceived HSE_REQ_DONE_WITH_SESSION.\n\n        cid->didcomplete = 1;\n        if (cid->completed) {\n            apr_thread_mutex_unlock(cid->completed);\n        }\n\nThen in the isapi_handler() function in the switch statement handling \nHSE_STATUS_PENDING after reserving the mutex I added a check to see if \ndidcomplete was 1, and if it was I continued out of the switch statement, \notherwise I waited on locking the mutex as was being done before to catch \nServerSupportFunction(HSE_REQ_DONE_WITH_SESSION).\n\n                rv = apr_thread_mutex_create(&cid->completed, \n                                             APR_THREAD_MUTEX_UNNESTED, \n                                             r->pool);\n                comp = cid->completed;\n                if (cid->completed && (rv == APR_SUCCESS)) {\n                    rv = apr_thread_mutex_lock(comp);\n                }\n                if (cid->didcomplete == 1) {\n                    /* The request must have completed in another thread before \nwe \n                     * got to this point so we don't need to wait\n                     */\n                } \n                else {\n                    /* The completion port is now locked.  When we regain the\n                     * lock, we may destroy the request.\n                     */\n                    if (cid->completed && (rv == APR_SUCCESS)) {\n                        rv = apr_thread_mutex_lock(comp);\n                    }\n                }\n\nA quick check to cid->didcomplete could probably be done first to see if it was \nalready set and if mutex even needed to be created, but the above code sample \nworks and demonstrates a possible solution.\n\nAdditionally it is probably worth while to change the Sleep(0) in the \nwinnt_accept() function in server\\mpm\\winnt\\child.c in 2.0.40 when \nmpm_get_completion_context() returns NULL to a Sleep(100) as is done if the \nsocket can not be initialized below the call to mpm_get_completion_context(). \nThis should give any lower priority threads that may be involved in a request \nthrough an ISAPI filter or otherwise more processor time to complete their task \nand free up the worker threads that winnt_accept() is waiting on.", "id": 21509, "time": "2002-08-21T23:29:48Z", "creator": "jdesetto@radiantsystems.com", "creation_time": "2002-08-21T23:29:48Z", "attachment_id": null}, {"text": "\n  Your idea was clever, but it introduces a subtle race condition if one server\n  is returning from HttpExtensionProc and another is calling DONE_WITH_SESSION\n  at the same time.\n\n  The final patch simply creates the completed lock for every request that is\n  configured with fake_async and suffers from no race conditions.  Please review\n  the module and provide feedback, if any.  Thanks for your report and proposed\n  solution!\n", "tags": [], "bug_id": 11913, "is_private": false, "count": 1, "id": 26013, "time": "2002-11-09T19:15:05Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-09T19:15:05Z", "attachment_id": null}]
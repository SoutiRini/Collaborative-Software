[{"count": 0, "tags": [], "bug_id": 51124, "text": "First of all, I know that there has been a bug regarding a similar problem before and that it was fixed. But currently this bugs occurs even with tomcat version 6.0.32.\n\nWe have a problem with the tomcat runnign with the parameter org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true.\n\nAfter the tomcat has just started, everything is fine but after one or two days a lot of ArrayIndexOutOfBoundsException occur on random pages of the application.\n\nTomcats started without this parameter don't seem to have that problem.\n\nUnfortunately we weren't able reproduce the bug locally, It appears only on our production system.\n\nCould there be a concurrency problem, that only shows if a lot it going on on the platform?\n\nI can provide two small stackstraces that can show the classes where the problem occurs:\n\n1.\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException\n        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)\n        at java.io.PrintWriter.write(PrintWriter.java:382)\n        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(Unknown Source)\n        at org.apache.jasper.runtime.PageContextImpl.release(Unknown Source)\n        at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(Unknown Source)\n        at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(Unknown Source)\n        at org.apache.jsp.members.lists.short_.incomingShortList_jsp._jspService(incomingShortList_jsp.java:796)\n        at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source)\n        at javax.servlet.http.HttpServlet.service(Unknown Source)\n\n2.\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException\n        at java.lang.String.getChars(String.java:854)\n        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)\n        at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source)\n        at org.apache.jasper.runtime.BodyContentImpl.print(Unknown Source)\n        at org.apache.taglibs.standard.tag.common.fmt.MessageSupport.doEndTag(MessageSupport.java:203)\n        at org.apache.jsp.members.profiles.profile_jsp._jspx_meth_fmt_005fmessage_005f2(profile_jsp.java:4897)\n        at org.apache.jsp.members.profiles.profile_jsp._jspService(profile_jsp.java:481)\n        at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source)\n        at javax.servlet.http.HttpServlet.service(Unknown Source)", "id": 146015, "time": "2011-04-27T06:31:47Z", "creator": "juergen.schmidt@gmail.com", "creation_time": "2011-04-27T06:31:47Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "ramiro@conductiva.com", "is_private": false, "text": "Created attachment 26956\npatch for BodyContentImpl class of trunk\n\nWe are reproducing this problem after getting an OutOfMemoryError on BodyContentImpl.reAllocBuff.\n\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.jasper.runtime.BodyContentImpl.reAllocBuff(BodyContentImpl.java:595)\n        at org.apache.jasper.runtime.BodyContentImpl.write(BodyContentImpl.java:109)\n        at java.io.PrintWriter.write(PrintWriter.java:382)\n\n\nWe are on version 6.0.29, but the cause is still in trunk.\n\nWhen the buffer needs to increase the size and an OOM error is thrown the bufferSize member variable is increased before the buffer is reallocated. But the BodyContentImpl is accessible for later requests (from the PageContext pool) with a bufferSize greater than the real buffer size, causing the ArrayIndexOutOfBoundsException to be thrown when trying to use the buffer space above the real size.\n\nTo solve the problem the bufferSize member variable should be updated only after the buffer array is properly created.\n\nThe patch fixes this issue.", "id": 146101, "time": "2011-05-04T09:39:28Z", "bug_id": 51124, "creation_time": "2011-05-04T09:39:28Z", "attachment_id": 26956}, {"count": 2, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Once the JVM issues an OutOfMemoryError (especially for heap), there are no more guarantees that anything works correctly. After such an OOME you must restart the JVM. Relying on things to work just because it seems to is dangerous.", "id": 146114, "time": "2011-05-04T13:04:15Z", "bug_id": 51124, "creation_time": "2011-05-04T13:04:15Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "In our case there was no Out-Of-Memory that forced this bug to show. The application still ran fine but the Array-Index out of bounds exception were thrown anyway.", "is_private": false, "id": 146116, "creator": "juergen.schmidt@gmail.com", "time": "2011-05-04T13:15:29Z", "bug_id": 51124, "creation_time": "2011-05-04T13:15:29Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Hmm. Looking at case 2 above, I don't see any way for that to happen unless bufferSize > cb.length. As far as I can see, these are always changed in sync. That leads me to think that there is an OOME that is being missed for some reason.\n\nWhile I agree 100% with Rainer that once an OOME occurs, all bets are off, I think that having this patch in 7.0.x will at least allow us to determine if the root cause is an OOME or something else.\n\nI have applied a variation of the patch suggested in comment 2 to Tomcat 7.0.x which will be included in 7.0.13 onwards. The patch won't get back-ported to 6.0.x until there is some evidence that it useful. Please test your application with 7.0.13 once released. and let us know how you get on.\n\nIf an upgrade to 7.0.13 is not possible, we could provide a binary patch for 6.0.32 *purely for testing purposes*. Let us know if you want to go that route.", "is_private": false, "id": 146127, "creator": "markt@apache.org", "time": "2011-05-04T19:53:39Z", "bug_id": 51124, "creation_time": "2011-05-04T19:53:39Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 51124, "text": "No plans for us to upgrade to 7.0 in the near future. We are already testing 6.0.32 with the patch in #2, so no binary patch needed for us, thanks. We will apply Mark patch in trunk to our build to test with the same code.\n\nAlthough with an OOME we almost always need to restart a JVM in some applications I think this is not always the case with Tomcat (or other server applications) if the lack of memory is due to a server traffic peak and servlets in the applications use many tags with big buffered content. Of course it depends on which point the OOME is thrown.\n\nWhen this happens the affected request is aborted and all local resources are freed, including huge buffers allocated by tags (which are the cause of the problem for us), so it is not strange that the server can recover in some cases without needing to restart the JVM. \n\nIf this happens (that JVM can free memory after the first OOME to handle following requests) Tomcat is still unusable because of BodyContentImpl instances with an invalid buffer are pooled in PageContext instances at JspFactoryImpl. \n\nAlthough the invalid BodyContentImpl instances should be recycled by PageContextImpl.release, in our experience the instances with the invalid buffer are used after the OOME.\n\nLast time we saw this problem, our server seemed to recover from the error after some time (several minutes) throwing the ArrayIndexOutOfBoundsException (AIOOBE) in certain requests very often. After some time working fine (more than 30 minutes) AIOOBE started again in some requests (without any other OOME), we supose because pooled PageContextImpl instances with invalid BodyContextImpl instances were used again needing a big buffer.\n\nSo, and always with our experience, we think that in certain circumstances Tomcat can recover from an OOME in BodyContentImp.reAllocBuff, but these pooled invalid BodyContentImpl instances will force to restart JVM to clean them.\n\nOf course, we would like the patch in trunk applied also to 6.0.x ;)", "id": 146134, "time": "2011-05-05T07:42:04Z", "creator": "ramiro@conductiva.com", "creation_time": "2011-05-05T07:42:04Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "We also used the code in the tomcat repository to patch our current tomcat 6.0.32 and will get back to you after it has been in production for some time. Thanks again for you help!", "is_private": false, "id": 146153, "creator": "juergen.schmidt@gmail.com", "time": "2011-05-06T06:44:44Z", "bug_id": 51124, "creation_time": "2011-05-06T06:44:44Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 51124, "attachment_id": null, "is_private": false, "id": 146530, "time": "2011-05-23T05:09:09Z", "creator": "juergen.schmidt@gmail.com", "creation_time": "2011-05-23T05:09:09Z", "text": "We have the modified code in production now for about one and half weeks, and the ArrayIndexOutOfBounds exceptions didn't occur anymore.\n\nIt seems like the fix works accordingly. We would be glad if this fix could be backported to tomcat 6.0.x\n\nPlease leave a comment here, to indicate whether this will be done or whether it won't.\n\nThank you again for your great help!"}, {"count": 8, "attachment_id": null, "bug_id": 51124, "text": "Thanks for the feedback. I have proposed the patch for 6.0.x.", "id": 146597, "time": "2011-05-24T17:18:55Z", "creator": "markt@apache.org", "creation_time": "2011-05-24T17:18:55Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 51124, "attachment_id": null, "is_private": false, "id": 147273, "time": "2011-06-20T13:27:07Z", "creator": "markt@apache.org", "creation_time": "2011-06-20T13:27:07Z", "text": "Fixed in 6.0.x and will be included in 6.0.33 onwards."}, {"count": 10, "tags": [], "creator": "vijay.ghadage.2408@gmail.com", "text": "167:                                             &nbsp;</td>\n168:                                         <td class=\"msgtext\" align=\"right\">&nbsp;\n169:                                             <html:select property=\"pageIndex\" styleClass=\"simpletext\" onchange=\"javascript:goToSelectedPage();\">\n170:                                                 <c:forEach var=\"pages\" items=\"${smsAdminReportForm.pageList}\">\n171:                                                     <html:option value=\"${pages.pageIndex}\">${pages.pagination}</html:option>\n172:                                                 </c:forEach>       \n173:                                             </html:select>\n\n\nStacktrace:] with root cause\njava.lang.OutOfMemoryError: Java heap space\n\tat org.apache.jasper.runtime.BodyContentImpl.reAllocBuff(BodyContentImpl.java:647)\n\tat org.apache.jasper.runtime.BodyContentImpl.write(BodyContentImpl.java:145)\n\tat org.apache.jasper.runtime.BodyContentImpl.write(BodyContentImpl.java:161)\n\tat org.apache.jsp.smsAdminReportDetails_jsp._jspx_meth_c_005fforEach_005f1(smsAdminReportDetails_jsp.java:1217)\n\tat org.apache.jsp.smsAdminReportDetails_jsp._jspx_meth_html_005fselect_005f0(smsAdminReportDetails_jsp.java:1179)\n\tat org.apache.jsp.smsAdminReportDetails_jsp._jspx_meth_c_005fotherwise_005f1(smsAdminReportDetails_jsp.java:1037)\n\tat org.apache.jsp.smsAdminReportDetails_jsp._jspx_meth_c_005fchoose_005f1(smsAdminReportDetails_jsp.java:931)\n\tat org.apache.jsp.smsAdminReportDetails_jsp._jspService(smsAdminReportDetails_jsp.java:361)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:432)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:749)\n\tat org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:487)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:412)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:339)\n\tat org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1062)\n\tat org.apache.struts.tiles.TilesRequestProcessor.doForward(TilesRequestProcessor.java:263)\n\tat org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:386)\n\tat org.apache.struts.tiles.TilesRequestProcessor.processForwardConfig(TilesRequestProcessor.java:318)\n\tat org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:229)\n\tat org.apache.struts.action.ActionServlet.process(ActionServlet.java:1196)\n\tat org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:432)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:647)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)", "id": 184441, "time": "2015-08-10T09:12:37Z", "bug_id": 51124, "creation_time": "2015-08-10T09:12:37Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 51124, "attachment_id": null, "is_private": false, "id": 184443, "time": "2015-08-10T09:36:25Z", "creator": "markt@apache.org", "creation_time": "2015-08-10T09:36:25Z", "text": "(In reply to Vijay Ghadage from comment #10)\n\nPlease use the users mailing list rather than re-opening a random bug and dumping your stack trace.\n\nRestoring the original parameters..."}]
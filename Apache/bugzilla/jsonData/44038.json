[{"count": 0, "tags": [], "bug_id": 44038, "text": "There is a bug in the Spring 2.5 MailSendException class where it throws an exception on calls to \ngetMessage and printStackTrace (see SPR-4138 in Spring's bug DB). This spring bug exposed what I \nconsider a problem with log4j.\n\nPartial stack trace:\n\nCaused by: java.lang.NullPointerException\n\tat org.springframework.mail.MailSendException.printStackTrace(MailSendException.java:149)\n\tat org.apache.log4j.spi.ThrowableInformation.getThrowableStrRep(ThrowableInformation.java:59)\n\nI would expect log4j to use try/catch blocks around any calls it makes to Exception classes so that a \nconsumer of the logging library can be confident that a call to a log(...) method will never throw an \nexception, even if a buggy exception reference is passed in. I'd rather get no message or stack trace in \nthe output than have log4j pass the exception to my application. If this isn't addressed in log4j then I'll \nhave to create a wrapper that around it that does trap any exceptions.", "id": 111539, "time": "2007-12-07T10:29:17Z", "creator": "davidj@mocapay.com", "creation_time": "2007-12-07T10:29:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 44038, "attachment_id": null, "id": 111928, "time": "2007-12-19T14:31:18Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2007-12-19T14:31:18Z", "is_private": false, "text": "Yes, this seems like a really bad idea.  I ran into this too.  The telnet\nappender has issues that can cause a null pointer (bug 44109) and those blow\nright back out into calling code too.  \n\nA call to \"log\" shouldn't ever throw an exception back - it should trap it and\nreport is somewhere, perhaps to the loggers that are working, or at a minimum to\nthe console.  "}, {"count": 2, "tags": [], "bug_id": 44038, "attachment_id": null, "text": "This sound like a good idea.\n\nJust to be certain that the bug report is understood correctly, can you create a small example which shows the behaviour?", "id": 118129, "time": "2008-06-30T13:09:56Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-06-30T13:09:56Z", "is_private": false}, {"attachment_id": 23185, "tags": [], "creator": "fapache@maxiq.ro", "is_private": false, "count": 3, "id": 124419, "time": "2009-01-28T01:43:08Z", "bug_id": 44038, "creation_time": "2009-01-28T01:43:08Z", "text": "Created attachment 23185\nExample to simply reproduce bug."}, {"count": 4, "tags": [], "bug_id": 44038, "attachment_id": null, "text": "I just bumped into the very same bug and since there was no recent activity I created an example myself.\nIt proves the bug against 1.2.15.\n\nYou will find the details in the attached file.\n\nI did not offer a patch because IMHO it's just a matter of try/catch in ThrowableInformation.getThrowableStrRep() and someone who knows log4j better might also know what smart thing may be appropriate after catching :)\n\nP.S. My real case was logging AxisFault through AsyncAppender. Somehow between logger.error(...) and effective buffer flush to disk the exception passed became invalid and caused the async appender to fail, producing later a global failure for the entire application.\n", "id": 124420, "time": "2009-01-28T01:51:27Z", "creator": "fapache@maxiq.ro", "creation_time": "2009-01-28T01:51:27Z", "is_private": false}, {"count": 5, "tags": [], "creator": "fapache@maxiq.ro", "attachment_id": null, "text": "Adding myself to cc.", "id": 124422, "time": "2009-01-28T02:11:26Z", "bug_id": 44038, "creation_time": "2009-01-28T02:11:26Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "carnold@apache.org", "is_private": false, "count": 6, "id": 124427, "time": "2009-01-28T05:57:06Z", "bug_id": 44038, "creation_time": "2009-01-28T05:57:06Z", "text": "Committed fix in rev738488"}]
[{"count": 0, "tags": [], "creator": "pmcmahon-apachebugzilla@perpetual.com", "attachment_id": null, "text": "Summary\n-------\n\nI am having some trouble using Mod_Jk to serve dynamically generated content\nthat is larger than 2GB. The file is sent successfully, but the Content-Length\nheader is not set properly, forcing chunked encoding. The client downloading\nthis file is then not given an indication of how long the transfer will take to\ncomplete. If I use Mod_Proxy to serve the file, or connect directly to Tomcat's\nHTTP1.1 connector, the Content-Length is set properly and the client can follow\nthe download progress to completion.\n\nIn my own testing, it seems the Content-Length header is wrapping beyond 2^31,\nand when Tomcat's AJP connector constructs the AJP packets, it sees a negative\nContent-Length header and drops this, setting the Content-Length to zero and\nforcing chunked encoding. I don't have enough Java knowledge to understand the\ncode in question, so hopefully some test cases and a sample webapp will provide\nenough of a starting point to resolve the issue.\n\n\nSoftware\n--------\nThis test was conducted on 64bit AMD boxes on both a regular RedHat Enterprise\nLinux 4 update 4 machine and a a Xen instance of the same software.\n\n~ # uname -a\nLinux sandbox 2.6.12.6-xenU #1 SMP Thu Jul 6 23:24:02 GMT 2006 x86_64 x86_64\nx86_64 GNU/Linux\n\n~ # uname -a\nLinux testbox 2.6.9-42.0.3.ELsmp #1 SMP Mon Sep 25 17:24:31 EDT 2006 x86_64\nx86_64 x86_64 GNU/Linux\n\n\nTomcat is the Core binary distribution of 5.5.23 running on the 64bit version of\nJava 1.5.0_10 (also tested with 32bit).\n\n~ # java -version\njava version \"1.5.0_10\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_10-b03)\nJava HotSpot(TM) 64-Bit Server VM (build 1.5.0_10-b03, mixed mode)\n\n\nTo test this through Apache, I've used RedHat's official version of Apache\n2.0.52-28.ent. The MPM has been overridden in /etc/sysconfig/httpd to use the\nworker MPM (although this issue occurs with the default prefork MPM).\n\n~ # httpd -V\nServer version: Apache/2.0.52\nServer built:   Aug  2 2006 05:21:18\nServer's Module Magic Number: 20020903:9\nArchitecture:   64-bit\nServer compiled with....\n -D APACHE_MPM_DIR=\"server/mpm/prefork\"\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D HTTPD_ROOT=\"/etc/httpd\"\n -D SUEXEC_BIN=\"/usr/sbin/suexec\"\n -D DEFAULT_PIDLOG=\"logs/httpd.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_LOCKFILE=\"logs/accept.lock\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"conf/mime.types\"\n -D SERVER_CONFIG_FILE=\"conf/httpd.conf\"\n\n\nRedHat's package includes Mod_Proxy. I built Mod_JK from source using the 1.2.23\nrelease. Mod_JK and Tomcat are not using JNI. Apache loads Mod_JK's DSO through\nthe /etc/httpd/conf.d/mod_jk.conf file, which itself is sourced by Apache's\nhttpd.conf.\n\n# Load the module\nLoadModule jk_module modules/mod_jk.so\n\n# Location of the workers.properties file\nJkWorkersFile conf/jk-workers.properties\n\n# Where to put jk shared memory\nJkShmFile logs/jk-runtime-status\n\n# Log file location\nJkLogFile logs/mod_jk.log\n\n# Log level: debug, error, info\nJkLogLevel debug\n\n# Log file timestamp format for JkLogFile\n#JkLogStampFormat \"[%a %b %d %H:%M:%S %Y] \"\n\n# Forwarding options\nJkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories\n\n# Environment variables passed into Tomcat from Apache\n#JkEnvVar SSL_CLIENT_V_START\n\n# Request log format\nJkRequestLogFormat \"%w %V %T\"\n\n\nThe jk-workers.properties file contains an example configuration for a load\nbalanced pair of Tomcat servers, but in this case only the first Tomcat server\nis added to the worker list.\n\n# This worker will be used by Apache\nworker.list=loadbalancer\n\n# Worker type is loadbalanced\nworker.loadbalancer.type=lb\n\n# Comma separated list of loadbalanced workers\n# By default, we only use the first worker\nworker.loadbalancer.balanced_workers=tomcat1\n\n# First Tomcat server worker\nworker.tomcat1.port=8009\nworker.tomcat1.host=localhost.localdomain\nworker.tomcat1.type=ajp13\nworker.tomcat1.lbfactor=1\nworker.tomcat1.cachesize=10\nworker.tomcat1.route=localhost\n\n# Second Tomcat server worker\n# To enable, add \"tomcat2\" to the balanced_workers directive above\nworker.tomcat2.port=8009\nworker.tomcat2.host=otherserver.localdomain\nworker.tomcat2.type=ajp13\nworker.tomcat2.lbfactor=1\nworker.tomcat2.cachesize=10\nworker.tomcat2.route=otherserver\n\n# Path separator\nps=/\n\n\nApache is configured to listen on port 81 and port 82 for these specific tests.\nPort 81 will be served via Mod_Proxy to Tomcat's HTTP1.1 connector, and port 82\nwill be served via Mod_JK to Tomcat's AJP connector. These configuration\ndirectives were added to /etc/httpd/conf/httpd.conf:\n\n# Test cases\n\n# Port 81 will be served via mod_proxy\nListen 81\nNameVirtualHost *:81\n<VirtualHost *:81>\n  ProxyRequests off\n  ProxyPreserveHost On\n  ProxyPass / http://localhost:8080/\n  ProxyPassReverse / http://localhost:8080/\n</Virtualhost>\n\n# Port 82 will be served via mod_jk\nListen 82\nNameVirtualHost *:82\n<VirtualHost *:82>\n  JkMount / loadbalancer\n  JkMount /* loadbalancer\n</VirtualHost>\n\n# Note that we'll also test with 8080\n# Which will be served directly by Tomcat\n\n\nTest Cases\n==========\nTest cases are done using a small webapp that generates a 3GB file filled with\n\"A\" characters. I will attach this webapp with source code. I believe a similar\ntest can be run with Tomcat serving a static 3GB file from it's document root. I\ndidn't test this as I will be serving files dynamically generated by a webapp\n(in a similar way that this webapp generates the 3GB file). Download (and\nheader) tests were performed via curl on a remote machine (Ubuntu Feisty Fawn\nx86_64). Packet captures were done using Ethereal/Wireshark.\n\n~ $ curl -V\ncurl 7.15.5 (x86_64-pc-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8c zlib/1.2.3\nlibidn/0.6.5\nProtocols: tftp ftp telnet dict ldap http file https ftps \nFeatures: GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz\n\n\nFirst, I verified the Content-Length is being properly when I connected directly\nto Tomcat's HTTP1.1 connector in port 8080. Note that the content itself is\ntruncated in these examples.\n\n~ $ curl -D headers -o bigfile http://sandbox:8080/WebLoad/webload\n\n\nThis shows the proper header length, and I'm given a time to completion:\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0 3192M    0 10.5M    0     0  10.8M      0  0:04:53 --:--:--  0:04:53 11.0M\n\n\nEthereal shows the following connection (by selecting Follow TCP Stream):\n\nGET /WebLoad/webload HTTP/1.1\nUser-Agent: curl/7.15.5 (x86_64-pc-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8c\nzlib/1.2.3 libidn/0.6.5\nHost: sandbox:8080\nAccept: */*\n\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: application/octet-stream\nContent-Length: 3347054592\nDate: Tue, 29 May 2007 18:56:29 GMT\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\n\nNext, I tested by using Mod_Proxy on port 81.\n\n~ $ curl -D headers -o bigfile http://sandbox:81/WebLoad/webload\n\nThis returns the Content-Length and the progress of the download is properly\nreported. Ethereal shows:\n\nGET /WebLoad/webload HTTP/1.1\n\nUser-Agent: curl/7.15.5 (x86_64-pc-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8c\nzlib/1.2.3 libidn/0.6.5\n\nHost: sandbox:81\n\nAccept: */*\n\n\n\nHTTP/1.1 200 OK\n\nDate: Wed, 30 May 2007 16:43:20 GMT\n\nServer: Apache-Coyote/1.1\n\nContent-Type: application/octet-stream\n\nContent-Length: 3347054592\n\nConnection: close\n\n\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\n\nFinally, I test the download through the AJP connector/Mod_JK.\n\n~ $ curl -D headers -o bigfile http://sandbox:82/WebLoad/webload\n\nGET /WebLoad/webload HTTP/1.1\n\nUser-Agent: curl/7.15.5 (x86_64-pc-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8c\nzlib/1.2.3 libidn/0.6.5\n\nHost: sandbox:82\n\nAccept: */*\n\n\n\nHTTP/1.1 200 OK\n\nDate: Tue, 29 May 2007 19:06:35 GMT\n\nServer: Apache/2.0.52 (Red Hat)\n\nConnection: close\n\nTransfer-Encoding: chunked\n\nContent-Type: application/octet-stream\n\n1ff8\n\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\n\nNote that there is no Content-Length header, and the connection is forced to use\nchunked encoding (with a chunk size prefixing the data). Apache is not getting a\nContent-Length header, as show in the entries from the Mod_JK debug log.\n\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_get_endpoint::jk_ajp_common.c (2343): acquired connection pool slot=0\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_marshal_into_msgb::jk_ajp_common.c (548): ajp marshaling done\n[Wed May 30 17:03:05 2007] [17422:6496] [debug] ajp_service::jk_ajp_common.c\n(1796): processing tomcat1 with 2 retries\n[Wed May 30 17:03:05 2007] [17422:6496] [debug] jk_open_socket::jk_connect.c\n(335): socket TCP_NODELAY set to On\n[Wed May 30 17:03:05 2007] [17422:6496] [debug] jk_open_socket::jk_connect.c\n(433): trying to connect socket 14 to 127.0.0.1:8009\n[Wed May 30 17:03:05 2007] [17422:6496] [debug] jk_open_socket::jk_connect.c\n(459): socket 14 connected to 127.0.0.1:8009\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connect_to_endpoint::jk_ajp_common.c (850): Connected socket 14 to\n(127.0.0.1:8009)\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): sending to ajp13 pos=4\nlen=201 max=8192\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0000    12 34 00 C5 02\n02 00 08 48 54 54 50 2F 31 2E 31  - .4......HTTP/1.1\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0010    00 00 10 2F 57\n65 62 4C 6F 61 64 2F 77 65 62 6C  - .../WebLoad/webl\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0020    6F 61 64 00 00\n0A 31 30 2E 38 2E 36 2E 31 33 36  - oad...10.8.6.136\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0030    00 FF FF 00 07\n73 61 6E 64 62 6F 78 00 00 52 00  - .....sandbox..R.\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0040    00 04 A0 0E 00\n57 63 75 72 6C 2F 37 2E 31 35 2E  - .....Wcurl/7.15.\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0050    35 20 28 78 38\n36 5F 36 34 2D 70 63 2D 6C 69 6E  - 5.(x86_64-pc-lin\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0060    75 78 2D 67 6E\n75 29 20 6C 69 62 63 75 72 6C 2F  - ux-gnu).libcurl/\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0070    37 2E 31 35 2E\n35 20 4F 70 65 6E 53 53 4C 2F 30  - 7.15.5.OpenSSL/0\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0080    2E 39 2E 38 63\n20 7A 6C 69 62 2F 31 2E 32 2E 33  - .9.8c.zlib/1.2.3\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 0090    20 6C 69 62 69\n64 6E 2F 30 2E 36 2E 35 00 A0 0B  - .libidn/0.6.5...\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 00a0    00 0A 73 61 6E\n64 62 6F 78 3A 38 32 00 A0 01 00  - ..sandbox:82....\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 00b0    03 2A 2F 2A 00\nA0 08 00 01 30 00 06 00 09 6C 6F  - .*/*.....0....lo\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_send_message::jk_ajp_common.c (896): 00c0    63 61 6C 68 6F\n73 74 00 FF 00 00 00 00 00 00 00  - calhost.........\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_send_request::jk_ajp_common.c (1287): (tomcat1) request body to send 0 -\nrequest body to resend 0\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): received from ajp13\npos=0 len=52 max=8192\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0000    04 00 C8 00 02\n4F 4B 00 00 01 00 0C 43 6F 6E 74  - .....OK.....Cont\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0010    65 6E 74 2D 54\n79 70 65 00 00 18 61 70 70 6C 69  - ent-Type...appli\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0020    63 61 74 69 6F\n6E 2F 6F 63 74 65 74 2D 73 74 72  - cation/octet-str\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0030    65 61 6D 00 00\n00 00 00 00 00 00 00 00 00 00 00  - eam.............\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_unmarshal_response::jk_ajp_common.c (603): status = 200\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_unmarshal_response::jk_ajp_common.c (610): Number of headers is = 1\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_unmarshal_response::jk_ajp_common.c (666): Header[0] [Content-Type] =\n[application/octet-stream]\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): received from ajp13\npos=0 len=8188 max=8192\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0000    03 1F F8 41 41\n41 41 41 41 41 41 41 41 41 41 41  - ...AAAAAAAAAAAAA\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0010    41 41 41 41 41\n41 41 41 41 41 41 41 41 41 41 41  - AAAAAAAAAAAAAAAA\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0020    41 41 41 41 41\n41 41 41 41 41 41 41 41 41 41 41  - AAAAAAAAAAAAAAAA\n[Wed May 30 17:03:05 2007] [17422:6496] [debug]\najp_connection_tcp_get_message::jk_ajp_common.c (1043): 0030    41 41 41 41 41\n41 41 41 41 41 41 41 41 41 41 41  - AAAAAAAAAAAAAAAA\n\n\nIf I run Ethereal on the Tomcat server itself and capture the AJP packets, I see\nthe same information. Here is the AJP packet from Apache:\n\n4......HTTP/1.1.../WebLoad/webload..\n10.8.6.136.....sandbox..R......Wcurl/7.15.5 (x86_64-pc-linux-gnu) libcurl/7.15.5\nOpenSSL/0.9.8c zlib/1.2.3 libidn/0.6.5....\nsandbox:82.....*/*.....0....localhost..\n\n\nAnd from Tomcat:\n\nAB.4.....OK.....Content-Type...application/octet-stream.AB.....AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\n\nAgain, no Content-Length is being set.\n\n\nNotes\n=====\nMod_Proxy will not work for the way I am using Tomcat to serve data, as\nMod_Proxy strips the end user's client IP when connecting to Tomcat. In this\nexample, all end users downloading these files would appear to be connecting\nfrom 127.0.0.1. Mod_JK solves this issue by including the end user's IP in the\nheaders, so webapps can access this and use it for managing security access, etc.\n\nI'm filing this bug under Platform:PC and OS:Linux because that's what I've\ntested, but I believe this bug may affect other platforms as well.", "id": 103819, "time": "2007-05-30T11:27:10Z", "bug_id": 42546, "creation_time": "2007-05-30T11:27:10Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42546, "attachment_id": 20289, "text": "Created attachment 20289\nIncluding the WebLoad.war file, which dynamically serves a 3GB file full of \"A\" characters.\n\nThis webapp requires log4j in Tomcat's common/lib directory. Download a 3GB\nfile by going hitting this URL on the Tomcat server:\n\n/WebLoad/webload", "id": 103821, "time": "2007-05-30T11:30:31Z", "creator": "pmcmahon-apachebugzilla@perpetual.com", "creation_time": "2007-05-30T11:30:31Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 20290\nIncluding WebLoad.war source code.\n\nI don't have build steps for this .war file as the engineer who wrote it did\nnot provide them.", "attachment_id": 20290, "id": 103822, "creator": "pmcmahon-apachebugzilla@perpetual.com", "time": "2007-05-30T11:31:33Z", "bug_id": 42546, "creation_time": "2007-05-30T11:31:33Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "rainer.jung@kippdata.de", "text": "Please check, if this is still a problem. A couple of problems with large file\ntransfers have been fixed during 2007 in Tomcat and in mod_jk. For details see\nBZ 42608.", "id": 112418, "time": "2008-01-01T18:04:49Z", "bug_id": 42546, "creation_time": "2008-01-01T18:04:49Z", "tags": [], "is_private": false}]
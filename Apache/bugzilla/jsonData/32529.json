[{"count": 0, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "is_private": false, "id": 67921, "time": "2004-12-04T05:31:08Z", "bug_id": 32529, "creation_time": "2004-12-04T05:31:08Z", "text": "The included patch is for openssl but its not 100% clear to me if the real bug\nis in apache or in openssl, fixing it in openssl was easiest.  I emailed the bug\nto the openssl folks also.\n\napache version:  2.0.48-146\nopenssl version: 0.9.7b-125\nOS:              SuSE 9.0 SMP/x86_64\nKernel:          2.4.21-260-smp\n\nThe problem I'm seeing is that apache will not perform a \"ProxyPass\" to another\nSSL host.  The openssl function ssl_verify_cert_chain() [ssl/ssl_cert.c] stores\nthe SSL* pointer in the X509_STORE_CTX context with the following code:\n\n  X509_STORE_CTX_set_ex_data(&ctx,SSL_get_ex_data_X509_STORE_CTX_idx(),s);\n\nthe apache callback function ssl_callback_SSLVerify()\n[modules/ssl/ssl_kernel_engine.c] then retrieves this value with the following code:\n\n  SSL *ssl = (SSL *)X509_STORE_CTX_get_app_data(ctx);\n\nwhich is just a macro to retrieve index 0 of the ex_data.  This fails on the\nabove system.  I don't have an exact match single processor 32-bit machine for\ncomparison testing but I tested on a close match and it works fine.  The\nfollowing patch fixes the problem on the above system:\n\n-----------------------\ndiff -Naur openssl-0.9.7b-orig/ssl/ssl_cert.c openssl-0.9.7b/ssl/ssl_cert.c\n--- openssl-0.9.7b-orig/ssl/ssl_cert.c    2004-12-03 18:35:40.000000000 -0800\n+++ openssl-0.9.7b/ssl/ssl_cert.c    2004-12-03 18:36:20.000000000 -0800\n@@ -467,6 +467,7 @@\n     if (SSL_get_verify_depth(s) >= 0)\n         X509_STORE_CTX_set_depth(&ctx, SSL_get_verify_depth(s));\n     X509_STORE_CTX_set_ex_data(&ctx,SSL_get_ex_data_X509_STORE_CTX_idx(),s);\n+    X509_STORE_CTX_set_app_data(&ctx,s);\n\n     /* We need to set the verify purpose. The purpose can be determined by\n      * the context: if its a server it will verify SSL client certificates\n-----------------------\n\nThe bug is that a callback function has no way of retrieving the value returned\nby SSL_get_ex_data_X509_STORE_CTX_idx(), in apache's case it uses 0 via the\nX509_STORE_CTX_get_app_data() macro.\n\nThis may not be the \"correct\" ultimate fix as I'm not sure if there's a reason\nwhy index 0 might not be available.  The \"ctx\" structure above is stack\nallocated and only used for the duration of the ssl_verify_cert_chain() call."}, {"count": 1, "text": "Could you:\n\n1) describe the failure you see\n2) reproduce this with the vanilla 2.0.52 release rather than the SuSE package\n", "bug_id": 32529, "is_private": false, "id": 67926, "time": "2004-12-04T10:17:23Z", "creator": "jorton@redhat.com", "creation_time": "2004-12-04T10:17:23Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "text": "The failure is that if I include a ProxyPass statement from one SSL enabled host\nto another SSL enabled, as soon as I try to access a page that should be proxied\nfrom the other host the child process in apache seg faults and I see nothing in\nmy browser.  Here's a trimmed generic configuration that will generate the problem:\n\nHost 1:\n-------\n    <VirtualHost 1.2.3.4:443>\n        ServerName      host1.domain.com\n\n        DocumentRoot    /srv/www/host1\n\n        SSLEngine                       on\n        SSLProxyEngine                  on\n        SSLCipherSuite                 \nALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL\n        SSLCertificateFile              /etc/apache2/ssl.crt/host1.domain.com.crt\n        SSLCertificateKeyFile           /etc/apache2/ssl.key/host1.domain.com.key\n\n        ProxyPass      /test.html       https://host2.domain.com.:444/test.html\n    </VirtualHost>\n    <Directory /srv/www/host1>\n        Order allow,deny\n        Allow from all\n        AllowOverride All\n    </Directory>\n\nHost 2:\n-------\n    Listen 444\n\n    <VirtualHost 1.2.3.5:444>\n        ServerName      host2.domain.com\n\n        DocumentRoot    /srv/www/host2\n\n        SSLEngine                       on\n        SSLCertificateKeyFile           /etc/apache2/ssl.key/host2.domain.com.key\n        SSLCertificateFile              /etc/apache2/ssl.crt/host2.domain.com.crt\n    </VirtualHost>\n\n    <Directory /srv/www/host2>\n        Order allow,deny\n        Allow from all\n        AllowOverride All\n   </Directory>\n\nIf you browse to https://host1.domain.com/test.html it should be reverse proxied\nfrom https://host2.domain.com/test.html but instead the apache process seg\nfaults.  I suspect that this is SMP related or perhaps related to the x86_64\narchitecture but that's only a suspicion.\n\n\nHere's a backtrace from a core dump:\n\n#0  0x0000002a97a72486 in CRYPTO_get_ex_data () from /usr/lib64/libcrypto.so.0.9.7\n#1  0x0000002a978d766a in SSL_get_ex_data () from /usr/lib64/libssl.so.0.9.7\n#2  0x0000002a977acd40 in ssl_callback_SSLVerify () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#3  0x0000002a97aa67c2 in X509_verify_cert () from /usr/lib64/libcrypto.so.0.9.7\n#4  0x0000002a978edd0c in ssl_verify_cert_chain () from /usr/lib64/libssl.so.0.9.7\n#5  0x0000002a978e32eb in ssl3_get_server_certificate () from\n/usr/lib64/libssl.so.0.9.7\n#6  0x0000002a978e23dc in ssl3_connect () from /usr/lib64/libssl.so.0.9.7\n#7  0x0000002a978ec245 in SSL_connect () from /usr/lib64/libssl.so.0.9.7\n#8  0x0000002a978e9f10 in ssl23_get_server_hello () from /usr/lib64/libssl.so.0.9.7\n#9  0x0000002a978e992c in ssl23_connect () from /usr/lib64/libssl.so.0.9.7\n#10 0x0000002a978ec245 in SSL_connect () from /usr/lib64/libssl.so.0.9.7\n#11 0x0000002a977aa8dc in ssl_io_filter_connect () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#12 0x0000002a977aaebe in ssl_io_filter_output () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#13 0x0000000000433b6a in ap_pass_brigade ()\n#14 0x0000002a9c255f3b in ap_proxy_http_request () from\n/usr/lib64/apache2-prefork/mod_proxy_http.so\n#15 0x0000002a9c25707f in ap_proxy_http_handler () from\n/usr/lib64/apache2-prefork/mod_proxy_http.so\n#16 0x0000002a9c14e3ab in proxy_run_scheme_handler () from\n/usr/lib64/apache2-prefork/mod_proxy.so\n#17 0x0000002a9c14cf9b in proxy_handler () from\n/usr/lib64/apache2-prefork/mod_proxy.so\n#18 0x0000000000427631 in ap_run_handler ()\n#19 0x0000000000427ca9 in ap_invoke_handler ()\n#20 0x0000000000424506 in ap_process_request ()\n#21 0x000000000041fad8 in ap_process_http_connection ()\n#22 0x00000000004316a1 in ap_run_process_connection ()\n#23 0x0000000000431a02 in ap_process_connection ()\n#24 0x0000000000425d22 in child_main ()\n#25 0x0000000000425ee8 in make_child ()\n#26 0x00000000004260b3 in perform_idle_server_maintenance ()\n#27 0x0000000000426621 in ap_mpm_run ()\n#28 0x000000000042cada in main ()\n\nIf I patch openssl as I stated in the original post it fixes the problem.\n\nI'll see if I can duplicate the problem with the stock 2.0.52.  I have to\nproceed with caution since this server is running a number of sites with a lot\nof traffic.", "attachment_id": null, "bug_id": 32529, "id": 67929, "time": "2004-12-04T17:37:01Z", "creator": "mitch@comwestcr.com", "creation_time": "2004-12-04T17:37:01Z", "is_private": false}, {"count": 3, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "is_private": false, "id": 67930, "time": "2004-12-04T17:37:34Z", "bug_id": 32529, "creation_time": "2004-12-04T17:37:34Z", "text": "The failure is that if I include a ProxyPass statement from one SSL enabled host\nto another SSL enabled, as soon as I try to access a page that should be proxied\nfrom the other host the child process in apache seg faults and I see nothing in\nmy browser.  Here's a trimmed generic configuration that will generate the problem:\n\nHost 1:\n-------\n    <VirtualHost 1.2.3.4:443>\n        ServerName      host1.domain.com\n\n        DocumentRoot    /srv/www/host1\n\n        SSLEngine                       on\n        SSLProxyEngine                  on\n        SSLCipherSuite                 \nALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL\n        SSLCertificateFile              /etc/apache2/ssl.crt/host1.domain.com.crt\n        SSLCertificateKeyFile           /etc/apache2/ssl.key/host1.domain.com.key\n\n        ProxyPass      /test.html       https://host2.domain.com.:444/test.html\n    </VirtualHost>\n    <Directory /srv/www/host1>\n        Order allow,deny\n        Allow from all\n        AllowOverride All\n    </Directory>\n\nHost 2:\n-------\n    Listen 444\n\n    <VirtualHost 1.2.3.5:444>\n        ServerName      host2.domain.com\n\n        DocumentRoot    /srv/www/host2\n\n        SSLEngine                       on\n        SSLCertificateKeyFile           /etc/apache2/ssl.key/host2.domain.com.key\n        SSLCertificateFile              /etc/apache2/ssl.crt/host2.domain.com.crt\n    </VirtualHost>\n\n    <Directory /srv/www/host2>\n        Order allow,deny\n        Allow from all\n        AllowOverride All\n   </Directory>\n\nIf you browse to https://host1.domain.com/test.html it should be reverse proxied\nfrom https://host2.domain.com/test.html but instead the apache process seg\nfaults.  I suspect that this is SMP related or perhaps related to the x86_64\narchitecture but that's only a suspicion.\n\n\nHere's a backtrace from a core dump:\n\n#0  0x0000002a97a72486 in CRYPTO_get_ex_data () from /usr/lib64/libcrypto.so.0.9.7\n#1  0x0000002a978d766a in SSL_get_ex_data () from /usr/lib64/libssl.so.0.9.7\n#2  0x0000002a977acd40 in ssl_callback_SSLVerify () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#3  0x0000002a97aa67c2 in X509_verify_cert () from /usr/lib64/libcrypto.so.0.9.7\n#4  0x0000002a978edd0c in ssl_verify_cert_chain () from /usr/lib64/libssl.so.0.9.7\n#5  0x0000002a978e32eb in ssl3_get_server_certificate () from\n/usr/lib64/libssl.so.0.9.7\n#6  0x0000002a978e23dc in ssl3_connect () from /usr/lib64/libssl.so.0.9.7\n#7  0x0000002a978ec245 in SSL_connect () from /usr/lib64/libssl.so.0.9.7\n#8  0x0000002a978e9f10 in ssl23_get_server_hello () from /usr/lib64/libssl.so.0.9.7\n#9  0x0000002a978e992c in ssl23_connect () from /usr/lib64/libssl.so.0.9.7\n#10 0x0000002a978ec245 in SSL_connect () from /usr/lib64/libssl.so.0.9.7\n#11 0x0000002a977aa8dc in ssl_io_filter_connect () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#12 0x0000002a977aaebe in ssl_io_filter_output () from\n/usr/lib64/apache2-prefork/mod_ssl.so\n#13 0x0000000000433b6a in ap_pass_brigade ()\n#14 0x0000002a9c255f3b in ap_proxy_http_request () from\n/usr/lib64/apache2-prefork/mod_proxy_http.so\n#15 0x0000002a9c25707f in ap_proxy_http_handler () from\n/usr/lib64/apache2-prefork/mod_proxy_http.so\n#16 0x0000002a9c14e3ab in proxy_run_scheme_handler () from\n/usr/lib64/apache2-prefork/mod_proxy.so\n#17 0x0000002a9c14cf9b in proxy_handler () from\n/usr/lib64/apache2-prefork/mod_proxy.so\n#18 0x0000000000427631 in ap_run_handler ()\n#19 0x0000000000427ca9 in ap_invoke_handler ()\n#20 0x0000000000424506 in ap_process_request ()\n#21 0x000000000041fad8 in ap_process_http_connection ()\n#22 0x00000000004316a1 in ap_run_process_connection ()\n#23 0x0000000000431a02 in ap_process_connection ()\n#24 0x0000000000425d22 in child_main ()\n#25 0x0000000000425ee8 in make_child ()\n#26 0x00000000004260b3 in perform_idle_server_maintenance ()\n#27 0x0000000000426621 in ap_mpm_run ()\n#28 0x000000000042cada in main ()\n\nIf I patch openssl as I stated in the original post it fixes the problem.\n\nI'll see if I can duplicate the problem with the stock 2.0.52.  I have to\nproceed with caution since this server is running a number of sites with a lot\nof traffic.\n\n"}, {"count": 4, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "is_private": false, "id": 67931, "time": "2004-12-04T17:41:15Z", "bug_id": 32529, "creation_time": "2004-12-04T17:41:15Z", "text": "(In reply to comment #2)\nThis is a duplicate of #3 below."}, {"count": 5, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "id": 67944, "time": "2004-12-05T01:16:11Z", "bug_id": 32529, "creation_time": "2004-12-05T01:16:11Z", "is_private": false, "text": "I am unable to reproduce this bug with a stock 2.0.52 apache on the same system\nwith more or less the same configuration (mainly just a change of port numbers).\n I also am unable to reproduce it with a stock 2.0.48 apache.\n\nFurthermore, even after applying all of the patches (to 2.0.48) that SuSE uses\nto build their RPM and using the same compiler options that they use and I still\ncan't reproduce it.  So either the run-time configuration changes somehow affect\nit or something happens when building the RPM which affects it.  Or maybe I'm\njust going crazy."}, {"count": 6, "tags": [], "bug_id": 32529, "is_private": false, "text": "To be clear, you were testing the vanilla 2.0.52 and 2.0.48 sources against the\n*unpatched* version of OpenSSL, not the one you have patched?\n\nCould you try changing the first line of ssl_callback_SSLVerify as follows, instead:\n\n-    SSL *ssl            = (SSL *)X509_STORE_CTX_get_app_data(ctx);\n+    SSL *ssl = X509_STORE_CTX_get_ex_data(ctx,\n+                                         SSL_get_ex_data_X509_STORE_CTX_idx());\n\nI can't really see why that segfault could happen in the first place, though.", "id": 67952, "time": "2004-12-05T21:57:09Z", "creator": "jorton@redhat.com", "creation_time": "2004-12-05T21:57:09Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "is_private": false, "id": 67960, "time": "2004-12-06T01:49:41Z", "bug_id": 32529, "creation_time": "2004-12-06T01:49:41Z", "text": "(In reply to comment #6)\n> To be clear, you were testing the vanilla 2.0.52 and 2.0.48 sources against the\n> *unpatched* version of OpenSSL, not the one you have patched?\nThat is correct, the unpatched OpenSSL.\n> \n> Could you try changing the first line of ssl_callback_SSLVerify as follows,\ninstead:\n> \n> -    SSL *ssl            = (SSL *)X509_STORE_CTX_get_app_data(ctx);\n> +    SSL *ssl = X509_STORE_CTX_get_ex_data(ctx,\n> +                                         SSL_get_ex_data_X509_STORE_CTX_idx());\nI'll try it, but see below because there may be bigger problems.\n\n> \n> I can't really see why that segfault could happen in the first place, though.\nThe reason that its happening is that in some cases the openssl code is storing\nthe SSL* pointer at an index of 1 rather than 0 (the \nX509_STORE_CTX_get_app_data() macro always uses 0).  I discovered this by\nputting a fprintf statement in the function X509_STORE_CTX_get_ex_new_index() to\nsee what values are being returned as indexes in the\nSSL_get_ex_data_X509_STORE_CTX_idx() function.  Again, this only happens on the\nlive apache server not the test one.\n\nBy looking at the function  SSL_get_ex_data_X509_STORE_CTX_idx() one would\npresume that this would be impossible.  For reference here's the function:\n\nint SSL_get_ex_data_X509_STORE_CTX_idx(void)\n\t{\n\tstatic volatile int ssl_x509_store_ctx_idx= -1;\n\n\tif (ssl_x509_store_ctx_idx < 0)\n\t\t{\n\t\t/* any write lock will do; usually this branch\n\t\t * will only be taken once anyway */\n\t\tCRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);\n\n\t\tif (ssl_x509_store_ctx_idx < 0)\n\t\t\t{\n\t\t\tssl_x509_store_ctx_idx=X509_STORE_CTX_get_ex_new_index(\n\t\t\t\t0,\"SSL for verify callback\",NULL,NULL,NULL);\n\t\t\t}\n\n\t\tCRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);\n\t\t}\n\treturn ssl_x509_store_ctx_idx;\n\t}\n\n\nAlso for reference, here is a dump of the assembler for this code:\n\nDump of assembler code for function SSL_get_ex_data_X509_STORE_CTX_idx:\n0x0000000000024710 <SSL_get_ex_data_X509_STORE_CTX_idx+0>:      sub    $0x8,%rsp\n0x0000000000024714 <SSL_get_ex_data_X509_STORE_CTX_idx+4>:      mov   \n1094190(%rip),%eax        # 0x12f948 <ssl_x509_store_ctx_idx.0>\n0x000000000002471a <SSL_get_ex_data_X509_STORE_CTX_idx+10>:     test   %eax,%eax\n0x000000000002471c <SSL_get_ex_data_X509_STORE_CTX_idx+12>:     js     0x24730\n<SSL_get_ex_data_X509_STORE_CTX_idx+32>\n0x000000000002471e <SSL_get_ex_data_X509_STORE_CTX_idx+14>:     mov   \n1094180(%rip),%eax        # 0x12f948 <ssl_x509_store_ctx_idx.0>\n0x0000000000024724 <SSL_get_ex_data_X509_STORE_CTX_idx+20>:     add    $0x8,%rsp\n0x0000000000024728 <SSL_get_ex_data_X509_STORE_CTX_idx+24>:     retq\n0x0000000000024729 <SSL_get_ex_data_X509_STORE_CTX_idx+25>:     data16\n0x000000000002472a <SSL_get_ex_data_X509_STORE_CTX_idx+26>:     data16\n0x000000000002472b <SSL_get_ex_data_X509_STORE_CTX_idx+27>:     data16\n0x000000000002472c <SSL_get_ex_data_X509_STORE_CTX_idx+28>:     nop\n0x000000000002472d <SSL_get_ex_data_X509_STORE_CTX_idx+29>:     data16\n0x000000000002472e <SSL_get_ex_data_X509_STORE_CTX_idx+30>:     data16\n0x000000000002472f <SSL_get_ex_data_X509_STORE_CTX_idx+31>:     nop\n0x0000000000024730 <SSL_get_ex_data_X509_STORE_CTX_idx+32>:     lea   \n20449(%rip),%rdx        # 0x29718 <empty.0+908>\n0x0000000000024737 <SSL_get_ex_data_X509_STORE_CTX_idx+39>:     mov    $0x8d,%ecx\n0x000000000002473c <SSL_get_ex_data_X509_STORE_CTX_idx+44>:     mov    $0xc,%esi\n0x0000000000024741 <SSL_get_ex_data_X509_STORE_CTX_idx+49>:     mov    $0x9,%edi\n0x0000000000024746 <SSL_get_ex_data_X509_STORE_CTX_idx+54>:     callq  0xc268\n0x000000000002474b <SSL_get_ex_data_X509_STORE_CTX_idx+59>:     mov   \n1094135(%rip),%eax        # 0x12f948 <ssl_x509_store_ctx_idx.0>\n0x0000000000024751 <SSL_get_ex_data_X509_STORE_CTX_idx+65>:     test   %eax,%eax\n0x0000000000024753 <SSL_get_ex_data_X509_STORE_CTX_idx+67>:     jns    0x24770\n<SSL_get_ex_data_X509_STORE_CTX_idx+96>\n0x0000000000024755 <SSL_get_ex_data_X509_STORE_CTX_idx+69>:     lea   \n20423(%rip),%rsi        # 0x29723 <empty.0+919>\n0x000000000002475c <SSL_get_ex_data_X509_STORE_CTX_idx+76>:     xor    %r8d,%r8d\n0x000000000002475f <SSL_get_ex_data_X509_STORE_CTX_idx+79>:     xor    %ecx,%ecx\n0x0000000000024761 <SSL_get_ex_data_X509_STORE_CTX_idx+81>:     xor    %edx,%edx\n0x0000000000024763 <SSL_get_ex_data_X509_STORE_CTX_idx+83>:     xor    %edi,%edi\n0x0000000000024765 <SSL_get_ex_data_X509_STORE_CTX_idx+85>:     callq  0xc8a8\n0x000000000002476a <SSL_get_ex_data_X509_STORE_CTX_idx+90>:     mov   \n%eax,1094104(%rip)        # 0x12f948 <ssl_x509_store_ctx_idx.0>\n0x0000000000024770 <SSL_get_ex_data_X509_STORE_CTX_idx+96>:     lea   \n20385(%rip),%rdx        # 0x29718 <empty.0+908>\n0x0000000000024777 <SSL_get_ex_data_X509_STORE_CTX_idx+103>:    mov    $0x95,%ecx\n0x000000000002477c <SSL_get_ex_data_X509_STORE_CTX_idx+108>:    mov    $0xc,%esi\n0x0000000000024781 <SSL_get_ex_data_X509_STORE_CTX_idx+113>:    mov    $0xa,%edi\n0x0000000000024786 <SSL_get_ex_data_X509_STORE_CTX_idx+118>:    callq  0xc268\n0x000000000002478b <SSL_get_ex_data_X509_STORE_CTX_idx+123>:    mov   \n1094071(%rip),%eax        # 0x12f948 <ssl_x509_store_ctx_idx.0>\n0x0000000000024791 <SSL_get_ex_data_X509_STORE_CTX_idx+129>:    add    $0x8,%rsp\n0x0000000000024795 <SSL_get_ex_data_X509_STORE_CTX_idx+133>:    retq\n\nThe call to CRYPTO_w_lock() should ensure that ssl_x509_store_ctx_idx can only\ntake on a value of zero.  The assembler looks correct to me.\n\nIt looks like a thread synchronization problem, but its hard to believe that\nthread synchronization is broken.  Remember that this is an SMP box.  I'm\nthinking that the reason I can't reproduce the problem is because the test\nserver is not as heavily loaded as the live server.\n\nAlso note that this is running the prefork mpm module.\n\n"}, {"count": 8, "tags": [], "creator": "mitch@comwestcr.com", "attachment_id": null, "is_private": false, "id": 67961, "time": "2004-12-06T02:07:42Z", "bug_id": 32529, "creation_time": "2004-12-06T02:07:42Z", "text": "(In reply to comment #7)\nI was just reading how the prefork module works and it doesn't even have threads\nso now I'm more confused."}, {"count": 9, "text": "(In reply to comment #7)\nAlso note that the only call to X509_STORE_CTX_get_ex_new_index() in apache and\nopenssl is from the function SSL_get_ex_data_X509_STORE_CTX_idx().\n", "bug_id": 32529, "is_private": false, "id": 67962, "time": "2004-12-06T02:32:47Z", "creator": "mitch@comwestcr.com", "creation_time": "2004-12-06T02:32:47Z", "tags": [], "attachment_id": null}, {"count": 10, "text": "(In reply to comment #6)\n> Could you try changing the first line of ssl_callback_SSLVerify as follows,\ninstead:\n> \n> -    SSL *ssl            = (SSL *)X509_STORE_CTX_get_app_data(ctx);\n> +    SSL *ssl = X509_STORE_CTX_get_ex_data(ctx,\n> +                                         SSL_get_ex_data_X509_STORE_CTX_idx());\n\nThis is what I was thinking should be the fix should be, which is what I was\ndriving at in my first post:\n\n>> The bug is that a callback function has no way of retrieving\n>> the value returned by SSL_get_ex_data_X509_STORE_CTX_idx(),\n>> in apache's case it uses 0 via the X509_STORE_CTX_get_app_data() macro.\n\nAlthough I was thinking that SSL_get_ex_data_X509_STORE_CTX_idx() wasn't\nexported from the library and therefore was not callable so I got started down\nother paths.\n\nAlthough I can't see where else X509_STORE_CTX_get_ex_new_index() is being\ncalled from, but maybe I'm not seeing the big picture.\n\nI'm attempting to rebuild the apache RPM now...\n", "bug_id": 32529, "is_private": false, "id": 67963, "time": "2004-12-06T03:17:19Z", "creator": "mitch@comwestcr.com", "creation_time": "2004-12-06T03:17:19Z", "tags": [], "attachment_id": null}, {"count": 11, "text": "Good analysis, thanks.\n\nThis could well be one of the insane cases which occurs where libssl.so gets\nloaded and unloaded during startup but libcrypto.so always stays mapped.  Global\nvariables in libcrypto.so hence don't get reset to their initialization state,\nbut those in libssl.so do: \n\nnote that X509_STORE_CTX_get_ex_new_index is probably just incrementing some\nglobal variable behind the scenes, no doubt (haven't verified that): so if \nssl_x509_store_ctx_idx gets reset to -1, but that global variable does not, then\nthe _idx variable will quite likely get set to \"1\" next time round.\n\nThat might also explain the crash.  You could try some fprintf debugging in both\nlibcrypto and libssl to try and verify this; or LD_DEBUG stuff to see when each\nis getting loaded and unloaded.\n", "bug_id": 32529, "is_private": false, "id": 67971, "time": "2004-12-06T09:09:28Z", "creator": "jorton@redhat.com", "creation_time": "2004-12-06T09:09:28Z", "tags": [], "attachment_id": null}, {"count": 12, "text": "(In reply to comment #11)\n> This could well be one of the insane cases which occurs where libssl.so gets\n> loaded and unloaded during startup but libcrypto.so always stays mapped.  Global\n> variables in libcrypto.so hence don't get reset to their initialization state,\n> but those in libssl.so do: \n> \nYep, you guessed it.  I put some printfs in libssl and libcrypto:\n\n 1  29336:\n 2    29336  644.580855: in crypto_init, ppid: 29335, count: 1\n 3    29336  644.580921: in ssl_init, ppid: 29335, count: 1\n 4    29336  645.198972: CRYPTO_get_ex_new_index, ix: 0, ppid: 29335, count2: 1\n 5    29336  645.198980: /usr/lib64/libcrypto.so.0.9.7(my_dumper+0x2e)\n[0x2a97aac149]\n 6    29336  645.198985:\n/usr/lib64/libcrypto.so.0.9.7(X509_STORE_CTX_get_ex_new_index+0x2b) [0x2a97aac25b]\n 7    29336  645.198989:\n/usr/lib64/libssl.so.0.9.7(SSL_get_ex_data_X509_STORE_CTX_idx+0x50) [0x2a978ee580]\n 8    29336  645.198993: /usr/lib64/libssl.so.0.9.7(SSL_CTX_new+0x1a) [0x2a978ed69a]\n 9    29336  645.198997: /usr/lib64/apache2-prefork/mod_ssl.so [0x2a977a80fd]\n10    29336  645.202025: in ssl_exit, ppid: 29335, count: 2\n11    29336  645.209564: in ssl_init, ppid: 29335, count: 1\n12    29336  645.608884: in ssl_exit, ppid: 29335, count: 2\n13    29336  645.609069: in crypto_exit, ppid: 29335, count: 2\n14  29337:\n15    29336  644.580855: in crypto_init, ppid: 29335, count: 1\n16    29336  645.198972: CRYPTO_get_ex_new_index, ix: 0, ppid: 29335, count2: 1\n17    29336  645.198980: /usr/lib64/libcrypto.so.0.9.7(my_dumper+0x2e)\n[0x2a97aac149]\n18    29336  645.198985:\n/usr/lib64/libcrypto.so.0.9.7(X509_STORE_CTX_get_ex_new_index+0x2b) [0x2a97aac25b]\n19    29336  645.198989:\n/usr/lib64/libssl.so.0.9.7(SSL_get_ex_data_X509_STORE_CTX_idx+0x50) [0x2a978ee580]\n20    29336  645.198993: /usr/lib64/libssl.so.0.9.7(SSL_CTX_new+0x1a) [0x2a978ed69a]\n21    29336  645.198997: /usr/lib64/apache2-prefork/mod_ssl.so [0x2a977a80fd]\n22    29336  645.209564: in ssl_init, ppid: 29335, count: 1\n23    29337  645.699132: CRYPTO_get_ex_new_index, ix: 1, ppid: 1, count2: 2\n24    29337  645.699147: /usr/lib64/libcrypto.so.0.9.7(my_dumper+0x2e)\n[0x2a97aac149]\n25    29337  645.699152:\n/usr/lib64/libcrypto.so.0.9.7(X509_STORE_CTX_get_ex_new_index+0x2b) [0x2a97aac25b]\n26    29337  645.699156:\n/usr/lib64/libssl.so.0.9.7(SSL_get_ex_data_X509_STORE_CTX_idx+0x50) [0x2a978ee580]\n27    29337  645.699161: /usr/lib64/libssl.so.0.9.7(SSL_CTX_new+0x1a) [0x2a978ed69a]\n28    29337  645.699164: /usr/lib64/apache2-prefork/mod_ssl.so [0x2a977a80fd]\n29    29337  656.534013: in ssl_exit, ppid: 1, count: 2\n30    29337  656.536308: in crypto_exit, ppid: 1, count: 2\n\nThe first column is line numbers, the second is process id, the third\nis time (fractional part is microseconds).\n\nLines 2-13 are from process id 29336:\nLine 2:      libcrypto.so gets loaded and initialized\n             (this output is coming from a __attribute__((constructor))\n             function that I added).\nLine 3:      libssl.so gets loaded and initialized\n             (output also from a __attribute__((constructor)) function)\nLine 4:      CRYPTO_get_new_index gets called and returns 0 (the ix value)\nLines 5-9:   traceback of the call into mod_ssl\nLine 10:     libssl.so gets unloaded\n             (output coming from a __attribute__((destructor)) function)\nLine 11:     libssl.so gets reloaded and reinitialized\nLine 12:     libssl.so gets unloaded\nLine 13:     libcrypto.so gets unloaded\n             (output coming from a __attribute__((destructor)) function)\n\nLines 15-30 are from process id 29337:\nLines 15-22: match lines 2-9 and line 11 in process 29336, so they\n             were forked from the same point after line 11 (22).\n             line 10 isn't matched in 29337 because line 10 was lost\n             when libssl.so was unloaded.\nLine 23:     CRYPTO_get_new_index gets called and returns 1 (the ix value)\n             rather than 0 because libcrypto.so was not unloaded and\n             reinitialized but libssl.so was.\nLine 24-30:  backtrace and libraries getting unloaded\n\nThe patch you suggested fixed the problem.  Here is the patch file:\n\n--------------------------------------------------------------\ndiff -r -u httpd-2.0.48-orig/modules/ssl/ssl_engine_kernel.c\nhttpd-2.0.48/modules/ssl/ssl_engine_kernel.c\n--- httpd-2.0.48-orig/modules/ssl/ssl_engine_kernel.c   2004-12-05\n17:54:42.000000000 -0800\n+++ httpd-2.0.48/modules/ssl/ssl_engine_kernel.c        2004-12-05\n17:58:36.000000000 -0800\n@@ -1205,7 +1205,8 @@\n int ssl_callback_SSLVerify(int ok, X509_STORE_CTX *ctx)\n {\n     /* Get Apache context back through OpenSSL context */\n-    SSL *ssl            = (SSL *)X509_STORE_CTX_get_app_data(ctx);\n+    SSL *ssl            = (SSL *)X509_STORE_CTX_get_ex_data(ctx,\n+                                     SSL_get_ex_data_X509_STORE_CTX_idx());\n     conn_rec *conn      = (conn_rec *)SSL_get_app_data(ssl);\n     server_rec *s       = conn->base_server;\n     request_rec *r      = (request_rec *)SSL_get_app_data2(ssl);\n--------------------------------------------------------------\n\n", "bug_id": 32529, "is_private": false, "id": 68087, "time": "2004-12-08T04:12:18Z", "creator": "mitch@comwestcr.com", "creation_time": "2004-12-08T04:12:18Z", "tags": [], "attachment_id": null}, {"count": 13, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 68095, "time": "2004-12-08T10:08:26Z", "bug_id": 32529, "creation_time": "2004-12-08T10:08:26Z", "is_private": false, "text": "Thanks a lot for your thorough investigation!\n\nI'll apply the patch.  But I'd not be surprised if there are more bugs like this\nlurking, abuse of global state is rife in OpenSSL.  The safest fix is to ensure\nthat httpd itself is always linked against both libssl and libcrypto, so neither\never gets unloaded at runtime.  That actually should be done in all 2.0.x\nreleases, it may be an artefact of the SuSE build process that this breaks.\n"}, {"count": 14, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 68097, "time": "2004-12-08T10:45:00Z", "bug_id": 32529, "creation_time": "2004-12-08T10:45:00Z", "text": "http://svn.apache.org/viewcvs?view=rev&rev=111241"}, {"count": 15, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 74697, "time": "2005-05-10T22:47:03Z", "bug_id": 32529, "creation_time": "2005-05-10T22:47:03Z", "is_private": false, "text": "*** Bug 34846 has been marked as a duplicate of this bug. ***"}]
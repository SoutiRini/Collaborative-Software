[{"count": 0, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "is_private": false, "id": 77234, "time": "2005-07-12T22:43:41Z", "bug_id": 35709, "creation_time": "2005-07-12T22:43:41Z", "text": "org.apache.catalina.connector.Request.doGetSession(boolean create) only will\ncreate a new session if there is no existing one.\n\nGoal:\n-----\nThis would be used in the following way to prevent a cross-site scripting attack\nif a user doesn't allow for cookies and thus uses URL-rewriting with the jsessionid.\n\nProblem description:\n--------------------\nOften web-apps deliver html files entered by one user to a receiving user via\nthe HttpServletResponse object.\nWhen the receiver then views the received file, the browser still has the\njsession ID in the referrer field. A script could use this to transfer that\njsessionid to another server to hijack that session before expiration.\nApparently the referring URL will be presented to a remote (attacking) server\nfor example when the receiver's browser loads images asked for by the html file\nfrom that remote server.\n\nSolution idea:\n--------------\n1) obtain a secondary session without invalidating the current one to which the\nreceiving user is logged in\n2) put the html file to be downloaded into that new session\nredirect the file-download to another (struts-) action with that temporary\nsession id\n3) deliver the html file to the receiving user with the response of the\nshort-lived secondary session\n4) upon closing the response's outputstream, immediately invalidate that\ntemporary session\n\nPreliminary assessment:\n----------------------\n===> i) by the time a remote server receives the temporary jsessionid, it is\nnormally already invalidated\n     ii) if the html-file is already rendered by the receiver's browser before\nfully being downloaded, a remote attacker might see the jsessionid before it is\ninvalidated. However, since there was no real login into that session, it will\nnot have any privileges and contents beyond the very html file the attacker\noriginally put into circulation"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 77235, "time": "2005-07-12T22:50:50Z", "bug_id": 35709, "creation_time": "2005-07-12T22:50:50Z", "text": "You seem to have a bit too much time on your hands. There are gaping holes in\nsession security (without SSL), it's not worth trying to patch the existing model."}, {"count": 2, "tags": [], "bug_id": 35709, "attachment_id": null, "text": "as usual, Remy, the most friendly inhabitant of this planet...  ;)\n\nYou are right, I would obviously use this only together with SSL and possibly\neven a 2-out-of-3 rule as described in Bug 22679, comm. 12 \n\nAlternatively, if you were to think that this still is a WONTFIX, how would you\nthen prevent cross-site scripting in presence of such \"gaping holes\"", "id": 77244, "time": "2005-07-13T07:09:16Z", "creator": "hauser@acm.org", "creation_time": "2005-07-13T07:09:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 35709, "attachment_id": null, "id": 77251, "time": "2005-07-13T11:09:33Z", "creator": "remm@apache.org", "creation_time": "2005-07-13T11:09:33Z", "is_private": false, "text": "You don't like me ? That's good, because I personally don't like people who,\nregardless of the guidelines published on the website\n(http://jakarta.apache.org/tomcat/bugreport.html), think it is cool to use BZ as\na discussion list and force one developer into commenting their stuff, while\ntheir \"bug\" clearly belongs to a tomcat-dev discussion.\n\nAs for your issue, did you notice 3rd party cookies are allowed by default in\nbrowsers ?\n"}, {"count": 4, "tags": [], "bug_id": 35709, "attachment_id": null, "id": 77380, "time": "2005-07-18T14:21:40Z", "creator": "hauser@acm.org", "creation_time": "2005-07-18T14:21:40Z", "is_private": false, "text": "cookies might not be a good answer because the adversarial script might be able\nto read them too in some browsers.\n\nIf one is bound to a scenario where url-rewriting with redirects is the way to\ngo, I guess a work-around is:\n1) when the user clicks on the action starting the html file-download,\ncommons-http-client gets a new session and retrieves the jsessionid\n2) in the application scope, a hash-table is stored where the html file to be\ndownloaded is stored under the jsessionid as key\n3) the browser is then redirected to the new session (thus no more a referrer\nwith the ongoing session id) - probably in 2 steps first on a landing page in\nthe new session that then triggers the download-action with yet another redirect\nitself.\n4) the browser retrieves the file with its temporary jsessionid and referrer\n5) once the download is finished, the file is removed from the app-scope\nhash-table and the session invalidated\n\nI guess the almost the same would work if the adversarial script were to exploit\nthe jsessionid's inside cookies. Anyway, being able to obtain a secondary\nsession Id still appears attractive to me instead of such a \"home-made\" work-around."}, {"count": 5, "tags": [], "text": "As I said, sorry, but I am not interested at all in this functionality, which\nwould interest very few people, and yet introduce inefficient mechanisms and\nlots of complexity. If you have special needs, that's ok, but you're on your own.", "attachment_id": null, "bug_id": 35709, "id": 77381, "time": "2005-07-18T14:30:02Z", "creator": "remm@apache.org", "creation_time": "2005-07-18T14:30:02Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bht@actrix.gen.nz", "attachment_id": null, "is_private": false, "id": 77388, "time": "2005-07-18T16:12:21Z", "bug_id": 35709, "creation_time": "2005-07-18T16:12:21Z", "text": "I am re-opening this because I guess there may be multiple misunderstandings and\nthat these misunderstandings may be part of the decision to invalidate this bug.\n\nRemy:\n\n1)\n\n\"As for your issue, did you notice 3rd party cookies are allowed by default in\nbrowsers ?\"\n\nThis is IMHO unrelated to this issue. 3rd party cookies do NOT represent a\nsecurity risk per se and cannot interfere with session logic. Nothing new. A\npage can have only one domain. a single script cannot be read cookies across\ndomains unless the browser is broken. Content in a web page from multiple\ndomains != cross site scripting vulnerability.\n\n2)\n\n\"You seem to have a bit too much time on your hands.\"\nThis comment suggests that resources play an important role in judging the\nvalidity of the request. I would suggest that the resource question is deferred\nuntil later i.e. considered when this is due after evaluation, i.e. in a\ncooperative fashion compatible with the structure of this project. Voting after\nevaluation comes to mind.\n\n3)\n\"There are gaping holes in session security (without SSL), it's not worth trying\nto patch the existing model.\"\na) If these holes are in Tomcat then they need to be fixed. Please supply bug\nnumbers in that case.\nb) If you refer to the insecurity of the general architecture of session\nmanagement with HTTP as it stands, then this would be even more a reason to have\ntomcat provide intrinsic security and give better support to struggling\nprogrammers. Tomcat is there to provide advanced frameworks that free\nprogrammers from hand coding these mechanisms.\n\n4)\n\n\"As I said, sorry, but I am not interested at all in this functionality, which\nwould interest very few people, and yet introduce inefficient mechanisms and\nlots of complexity. If you have special needs, that's ok, but you're on your own.\"\n\na) It is regarded unprofessional in a cooperative environment such as this to\nlet an overriding personal interest get in the way of making balanced decisions.\nThis behavior is sometimes called \"corrupt\" although I am not saying that you\nare necessarily corrupt.\n\nb) It is always considered worthwhile to plug a significant security hole in\nexchange for a minimal, sometimes major modification. \"inefficient mechanisms\nand lots of complexity\" - maybe - but likewise may be not in this case. One has\nto think it through first.\n\nc) \"special needs\". Ralf's needs are not special, they are quite generic. They\ncan be condensed into the ubiquitous requirement to have a strictly limited\nsingle file download session within a major browsing session. It is a high\npriority business requirement to ensure that such sessions are not re-used by\nthird parties.\n\nIn a summary, it appears that there is an overwhelming number of reasons to\nfinally start evaluating this request for enhancement. I would also suggest a\nless confrontational approach."}, {"count": 7, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 77390, "time": "2005-07-18T16:33:24Z", "bug_id": 35709, "creation_time": "2005-07-18T16:33:24Z", "text": "(In reply to comment #6)\n> I am re-opening this because I guess there may be multiple misunderstandings and\n> that these misunderstandings may be part of the decision to invalidate this bug.\n\nBZ is not a discussion forum for development. I am using this post to either:\na) make you go away and annoy other developers\nb) use the proper communication medium, aka tomcat-dev\n\n> Remy:\n> \n> 1)\n> \n> \"As for your issue, did you notice 3rd party cookies are allowed by default in\n> browsers ?\"\n> \n> This is IMHO unrelated to this issue. 3rd party cookies do NOT represent a\n> security risk per se and cannot interfere with session logic. Nothing new. A\n> page can have only one domain. a single script cannot be read cookies across\n> domains unless the browser is broken. Content in a web page from multiple\n> domains != cross site scripting vulnerability.\n\nI am talking about setting a session cookie for another domain, not reading cookies.\n\n> 2)\n> \n> \"You seem to have a bit too much time on your hands.\"\n> This comment suggests that resources play an important role in judging the\n> validity of the request. I would suggest that the resource question is deferred\n> until later i.e. considered when this is due after evaluation, i.e. in a\n> cooperative fashion compatible with the structure of this project. Voting after\n> evaluation comes to mind.\n\nWell, find another project to cooperate with, then ;)\n\n> 3)\n> \"There are gaping holes in session security (without SSL), it's not worth trying\n> to patch the existing model.\"\n> a) If these holes are in Tomcat then they need to be fixed. Please supply bug\n> numbers in that case.\n> b) If you refer to the insecurity of the general architecture of session\n> management with HTTP as it stands, then this would be even more a reason to have\n> tomcat provide intrinsic security and give better support to struggling\n> programmers. Tomcat is there to provide advanced frameworks that free\n> programmers from hand coding these mechanisms.\n\nObviously, only SSL can ever hope to be secure. If you need security, use SSL\nand you have a hope of being secure, everything else is just hacks.\n\n> 4)\n> \n> \"As I said, sorry, but I am not interested at all in this functionality, which\n> would interest very few people, and yet introduce inefficient mechanisms and\n> lots of complexity. If you have special needs, that's ok, but you're on your own.\"\n> \n> a) It is regarded unprofessional in a cooperative environment such as this to\n> let an overriding personal interest get in the way of making balanced decisions.\n\nAgain, feel free to go elsewhere :)\n\n> This behavior is sometimes called \"corrupt\" although I am not saying that you\n> are necessarily corrupt.\n\nCorrupt is fine by me, I've been called far worse.\n\n> b) It is always considered worthwhile to plug a significant security hole in\n> exchange for a minimal, sometimes major modification. \"inefficient mechanisms\n> and lots of complexity\" - maybe - but likewise may be not in this case. One has\n> to think it through first.\n\nThis is huge and very costly. Besides, it is useless security.\n\n> c) \"special needs\". Ralf's needs are not special, they are quite generic. They\n> can be condensed into the ubiquitous requirement to have a strictly limited\n> single file download session within a major browsing session. It is a high\n> priority business requirement to ensure that such sessions are not re-used by\n> third parties.\n> \n> In a summary, it appears that there is an overwhelming number of reasons to\n> finally start evaluating this request for enhancement. I would also suggest a\n> less confrontational approach.\n\nI think the session manager, as done in Tomcat and likely all other servers, is\na decent, balanced solution. If you have specific needs, you should be able to\ndevise your own custom solution.\n\nAs usual, I see a lot of willingness to shove down the throat of everyone your\nown little needs (and/or preferences), just to save some maintenance time on\nyour part.\n\nI will close this without further comments as WONTFIX if reopened. If you want\nto talk about this, please use tomcat-dev (although I will ignore the discussion\nthread, and block any proposed change to the default behavior)."}, {"count": 8, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "text": "in the same vein, a session.clone() would be very useful to keep a user logged\nin when returning e.g. from a paypal purchase\n(http://www.paypal.com/cgi-bin/webscr?cmd=p/xcl/rec/ipn-manual-outside and Bug\n34391). I.e. if the user returns with the same ssl-session id, the application\nthen could change the jsessionId without the user having to re-login.", "id": 77534, "time": "2005-07-22T06:57:49Z", "bug_id": 35709, "creation_time": "2005-07-22T06:57:49Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 35709, "attachment_id": null, "id": 81696, "time": "2005-10-25T12:30:08Z", "creator": "hauser@acm.org", "creation_time": "2005-10-25T12:30:08Z", "is_private": false, "text": "for those who want to \"harden\" their home-grown solutions to this, a first take\nat a test script for both url-rewriting/cookie based session management:\n<HTML>\n<HEAD>\n<TITLE>Test</TITLE>\n<SCRIPT>\nfunction getQueryString(){\n    var c=document.location.toString(),i=c.indexOf(\"?\");\n    return(i<0)?\"\":unescape((c.substring(i)).replace(/\\+/g,\" \")); }\n\nfunction init(){\n    alert(\"document.referrer = \" + document.referrer);\n    alert(\"Query string = \" + getQueryString());\n    alert(\"Query cookie value of jsessionid = \" + getCookieValue(\"jsessionid\")); }\n\nfunction getCookieValue(cookieName){\n    var a=cookieName+\"=\";\n    var i=0;\n    var c=document.cookie;\n    if(c!=null){\n        while(i<c.length){\n            var j=i+a.length;\n            if(c.substring(i,j)==a){\n                var e=c.indexOf(\";\",j);\n                if(e==-1)e=c.length;\n                return unescape(c.substring(j,e));\n            }\n            i=c.indexOf(\" \",i)+1;\n            if(i==0)break; \n        }\n    }\n    return null;\n}\n</SCRIPT>\n</HEAD>\n<BODY onLoad=init()>\n</BODY>\n</HTML>"}, {"count": 10, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "is_private": false, "id": 89520, "time": "2006-05-26T14:09:36Z", "bug_id": 35709, "creation_time": "2006-05-26T14:09:36Z", "text": "MSIE sometimes even ignores the mime-type we send it, but looks at the content.\nSo an attacker could hide a cross-site script in e.g. a jpg image.\n\nhttp://msdn.microsoft.com/library/default.asp?url=/workshop/networking/moniker/overview/appendix_a.asp"}]
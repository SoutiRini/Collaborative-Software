[{"count": 0, "tags": [], "bug_id": 50726, "text": "Our jsp pages are compiled at build time. If I turn on genStringAsCharArray optimization switch, in some cases there will be longer lines in the generated java code than the javac compiler can process. It provides the following error message:\n\n[javac] Compiling 1609 source files to d:\\...\\jspc\\classes\n[javac] d:\\...\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\..._005fAPP\\pages\\termsconditions\\TermsAndConditions_005fms_005fMY_jsp.java:96: constant string too long", "id": 144018, "time": "2011-02-07T08:14:03Z", "creator": "robert_istvan@epam.com", "creation_time": "2011-02-07T08:14:03Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 50726, "is_private": false, "id": 144033, "time": "2011-02-08T03:17:35Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-08T03:17:35Z", "tags": [], "text": "The genStringAsCharArray option affects the o.a.jasper.compiler.Generator.GenerateVisitor#visit(Node.TemplateText) method.\n\nIt generates char array fields in the JSP page class initialized as\nfield = \"string\".toCharArray();\n\nThe \"string\" constants have 64K limit on string length. It is not run-time limitation, but a limitation of the Java Class File format, see [1]. Apparently it is what is being hit here.\n\n[1] http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#88659"}, {"count": 2, "tags": [], "bug_id": 50726, "attachment_id": null, "text": "(In reply to comment #1)\n> The genStringAsCharArray option affects the\n> o.a.jasper.compiler.Generator.GenerateVisitor#visit(Node.TemplateText) method.\n> \n> It generates char array fields in the JSP page class initialized as\n> field = \"string\".toCharArray();\n> \n> The \"string\" constants have 64K limit on string length. It is not run-time\n> limitation, but a limitation of the Java Class File format, see [1]. Apparently\n> it is what is being hit here.\n> \n> [1]\n> http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#88659\n\nThank you, it's clear for me now. Is it be possible to provide an official workaround like this?\n field = (new String(\"longstring_part1\") + \n    new String(\"longstring_part2\") +\n    ...\n    new String(\"longstring_partn\")).toCharArray();", "id": 144034, "time": "2011-02-08T03:55:04Z", "creator": "robert_istvan@epam.com", "creation_time": "2011-02-08T03:55:04Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50726, "attachment_id": null, "id": 144036, "creation_time": "2011-02-08T04:15:35Z", "time": "2011-02-08T04:15:35Z", "creator": "knst.kolinko@gmail.com", "text": ">  field = (new String(\"longstring_part1\") + \n>     new String(\"longstring_part2\") +\n>     ...\n>     new String(\"longstring_partn\")).toCharArray();\n\nI think that wouldn't work. What will work is to generate several arrays and call out.write() with each one in turn.\n\nNote that the 64K limit is not the char count aka str.length(), but the count of bytes in UTF-8 encoding.  So, either that count should be calculated (better without String.toBytes() call) or the threshold should be like (64K / (max count of bytes in char in UTF-8)).\n\nI wonder also whether initializing the array as = {'s', 't', 'r', 'i', 'n', 'g'} performs worse or better than the existing code.\n\nAnyway, a test case is needed.\n\n\nBTW, using mappedFile=false will probably hit the same limit.\n(That is when the \"breakAtLF\" variable is false in that visit(Node.TemplateText) method).", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "text": "For info, it appears the the Eclipse compiler does not enforce this limit. Dynamic compilation works whereas pre-compilation fails.", "id": 144206, "time": "2011-02-11T13:03:45Z", "bug_id": 50726, "creation_time": "2011-02-11T13:03:45Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 144230, "time": "2011-02-12T14:37:44Z", "bug_id": 50726, "creation_time": "2011-02-12T14:37:44Z", "is_private": false, "text": "I have fixed this in 7.0.x and it will be included in 7.0.9 onwards.\n\nI have also proposed the fix for 6.0.x"}, {"count": 6, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 144258, "time": "2011-02-14T11:12:26Z", "bug_id": 50726, "creation_time": "2011-02-14T11:12:26Z", "is_private": false, "text": "(In reply to comment #4)\n> For info, it appears the the Eclipse compiler does not enforce this limit.\n> Dynamic compilation works whereas pre-compilation fails.\n\nThat would be strange. It is class format limitation: the text will be broken if the length counter overflows.\n\nThere is caveat with this setting: the init-param is named \"genStrAsCharArray\" (see comment in web.xml), not genStringAsCharArray as the property in the Options interface, or as said in the title of this bug report. The mapping between names is done inside the EmbeddedServletOptions class constructor."}, {"count": 7, "tags": [], "bug_id": 50726, "text": "Answering my own questions\n\n(In reply to comment #3)\n> I wonder also whether initializing the array as = {'s', 't', 'r', 'i', 'n',\n> 'g'} performs worse or better than the existing code.\n\nIt works, but generates a lot of code, like the following (for an array of 11 chars):\n   0:\tbipush\t11\n   2:\tnewarray char\n   4:\tdup\n   5:\ticonst_0\n   6:\tbipush\t72\n   8:\tcastore\n   9:\tdup\n   10:\ticonst_1\n   11:\tbipush\t101\n   13:\tcastore\n   14:\tdup\n(...)\n   59:\tbipush\t10\n   61:\tbipush\t100\n   63:\tcastore\n   64:\tputstatic\n   67:\treturn\n\nI have not measured whether it works considerably slow or not.\n\n> BTW, using mappedFile=false will probably hit the same limit.\n> (That is when the \"breakAtLF\" variable is false in that\n> visit(Node.TemplateText) method).\n\nThe mappedFile=false will not experience this issue under usual circumstances.\n \nThere is a constant JspUtil.CHUNKSIZE and thus strings longer than 1024 will be split at LF regardless of breakAtLF flag. If the JSP has lines of 64K bytes without any LF in them, this issue will be observed regardless of mappedFile setting. But such JSPs are very unlikely.", "id": 144576, "time": "2011-02-26T11:28:24Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-26T11:28:24Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 50726, "attachment_id": null, "id": 146829, "time": "2011-06-03T07:31:01Z", "creator": "markt@apache.org", "creation_time": "2011-06-03T07:31:01Z", "is_private": false, "text": "Fixed in 6.0.x and will be included in 6.0.33 onwards."}]
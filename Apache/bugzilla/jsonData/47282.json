[{"count": 0, "tags": [], "creator": "jimmy422@rediffmail.com", "attachment_id": 23726, "id": 127490, "time": "2009-05-28T21:23:52Z", "bug_id": 47282, "creation_time": "2009-05-28T21:23:52Z", "is_private": false, "text": "Created attachment 23726\nThis is a sample java program. Create a test.xls having a cell value with Accounting format\n\nHi,\n\nThe format string for the $ sign in Accounting format is incorrect.\n\nPlease compare the string format given in built-in formats at\nhttp://poi.apache.org/apidocs/index.html?org/apache/poi/hssf/usermodel/HSSFDataFormat.html with index 44 (0x2c)\n_($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\n\n\nIn Excel, you can check the format string as follows.\n> Format -> Cells\n> Select Accounting as Category with 2 decimal places and symbol as $ (which is default in Excel 2003)\n> Then select Custom and check the first format string given in Type.\n_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\n\nWe can notice that there is a space after the \"*\" literal. Due to this the parsing logic fails at my end which is well defined.\n\nPlease correct the format string in the API.\n\nI guess this is in the latest version as well since the documentation has not changed.\n\nAttaching a sample program for reading the format string.\n\n\nThanks,\nVijayendra"}, {"count": 1, "attachment_id": null, "bug_id": 47282, "text": "There clearly is a difference as you have pointed out.\n\nExcel displays:\n_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\n\nnew HSSFWorkbook().createDataFormat().getFormat((short)0x2c);\nreturns:\n_($*#,##0.00_);_($*(#,##0.00);_($*\"-\"??_);_(@_)\n\n\nHowever, it is not clear how this causes a problem.  My understanding was that the 'built-in' formats are referenced by their index (in this case 0x2c) and not by their textual representation.\n\nI took a look at Excel's internal representation of built-in format 0x2c and it is different again:\n_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)\n\nIt has the spaces after the asterisks, but it also has quotes around the currency and backslashes before some round brackets.\n\nI've compared the formats produced in a new file created by Excel, and one created by POI.  They are the same. You can see POI's code for creating format 0x2c on line 1269 of the following:\nhttp://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/hssf/model/Workbook.java?annotate=764203\n\nAs far as I can tell, this discrepancy won't cause POI to read or write xls files incorrectly.\n\nPerhaps you have a different use case which relies on the value returned by HSSFDataFormat.getFormat(short).  If so, can you please describe *that* in more detail? This will help write a junit that verifies the need for this code change.", "id": 127667, "time": "2009-06-04T17:44:33Z", "creator": "josh@apache.org", "creation_time": "2009-06-04T17:44:33Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 47282, "is_private": false, "id": 127678, "time": "2009-06-05T09:47:59Z", "creator": "mzalewsk@us.ibm.com", "creation_time": "2009-06-05T09:47:59Z", "tags": [], "text": "There is a difference, and I think POI is wrong.\n\nThe format string returned by POI is\n_($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\nwhich is wrong. Excel will not accept that string if you try to set that value as a custom format in Excel. This format string is syntactically incorrect.\n\nExcel displays\n_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\nwhich is the correct format. Note the space character after the asterisk. The asterisk means use the following character to pad the formatted value, and repeat the pad character enough times to fill the cell. That's why the format string from POI is wrong. The \"*#\" in the format string would mean use \"#\" to pad the formatted value of the cell, and format the number with \",##0.00\" (which is not defined).\n\nJosh reports seeing the value\n_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)\nThis is again different. The quotes around the $ sign mean that the cell value will always use \"$\" as the currency symbol. Without the quotes, Excel will use the currency symbol from the current Locale.\n\nI'm not sure how Josh saw this third value of the format string. I see the value of the format string by \n1) Format | Cells, choose Accounting, and leave the other choices at their default values. Click OK\n2) Format | Cells, change the selection from Accounting to Custom, and look at what shows in the field labelled Type."}, {"count": 3, "tags": [], "bug_id": 47282, "attachment_id": null, "id": 127679, "time": "2009-06-05T10:11:27Z", "creator": "dfisher@jmlafferty.com", "creation_time": "2009-06-05T10:11:27Z", "is_private": false, "text": "I think Micheal is correct. I googled \"excel record 0x2c\" and got a link to this page from Microsoft:\n\nhttp://support.microsoft.com/kb/147942\n\nIt includes their definition of the formats:\n\n0x00      General\n0x01      0\n0x02      0.00\n0x03      #,##0\n0x04      #,##0.00\n0x05      ($#,##0_);($#,##0)\n0x06      ($#,##0_);[Red]($#,##0)\n0x07      ($#,##0.00_);($#,##0.00)\n0x08      ($#,##0.00_);[Red]($#,##0.00)\n0x09      0%\n0x0a      0.00%\n0x0b      0.00E+00\n0x0c      # ?/?\n0x0d      # ??/??\n0x0e      m/d/yy\n0x0f      d-mmm-yy\n0x10      d-mmm\n0x11      mmm-yy\n0x12      h:mm AM/PM\n0x13      h:mm:ss AM/PM\n0x14      h:mm\n0x15      h:mm:ss\n0x16      m/d/yy h:mm\n0x25      (#,##0_);(#,##0)\n0x26      (#,##0_);[Red](#,##0)\n0x27      (#,##0.00_);(#,##0.00)\n0x28      (#,##0.00_);[Red](#,##0.00)\n0x29      _(* #,##0_);_(* (#,##0);_(* \"-\"_);_(@_)\n0x2a      _($* #,##0_);_($* (#,##0);_($* \"-\"_);_(@_)\n0x2b      _(* #,##0.00_);_(* (#,##0.00);_(* \"-\"??_);_(@_)\n0x2c      _($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\n0x2d      mm:ss\n0x2e      [h]:mm:ss\n0x2f      mm:ss.0\n0x30      ##0.0E+0\n0x31      @\n\nSeems authoritative to me. Josh?"}, {"count": 4, "tags": [], "bug_id": 47282, "text": "Sorry for the ambiguity in my earlier comment - I wasn't suggesting that POI was correct.  POI's external text representation of format 0x2c is missing some spaces, and this should be fixed.  However, I always like to accompany each fix with something (junit/comment) that says \"this is what will go wrong without the fix\".\n\n\nI have tried to write some code that will exploit this incorrect value returned by HSSFDataFormat.getFormat(short).  As far as I can tell, the only place in POI that uses this string value is HSSFDataFormat.getFormat(String).  That method just translates the offending format text back to 0x2c, which should be OK.\n\nI guess that Vijayendra's problem involves processing of these format string values *outside* of POI.\nVijayendra, do you have specific details of how POI's text value for data format 0x2c causes problems for you?", "id": 127743, "time": "2009-06-08T12:35:07Z", "creator": "josh@apache.org", "creation_time": "2009-06-08T12:35:07Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 47282, "attachment_id": null, "id": 127744, "time": "2009-06-08T12:48:40Z", "creator": "josh@apache.org", "creation_time": "2009-06-08T12:48:40Z", "is_private": false, "text": "(In reply to comment #2)\n> \n> The format string returned by POI is\n> _($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\n> which is wrong. Excel will not accept that string if you try to set that value\n> as a custom format in Excel. This format string is syntactically incorrect.\n\nIt's probably not critical to the resolution of this bug, but I have different observations.\n\nMy Excel(2007) accepts that string without complaint, and seems to interpret it OK too.  It's not likely that anyone would want this exact format, but there is no problem with the syntax.  The '*#' means 'right pad with #'.  The comma is then left without a preceding '0' or '#', so it is interpreted as a literal comma instead of a thousands separator."}, {"count": 6, "tags": [], "bug_id": 47282, "text": "I have noticed another (perhaps related problem) that POI doesn't have logic for *parsing* the text representations of data formats.\nFor example, there is currently nothing that relates line 1265 of Workbook (internal representation) to line 118 of BuiltinFormats (Excel GUI representation):\nhttp://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/hssf/model/Workbook.java?annotate=782398\nhttp://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java?annotate=782398\n...though these two strings logically refer to the same thing.\n\n\nIf someone tried to create their own custom format string (using the Excel GUI syntax), HSSFDataFormat.getFormat(String) won't convert it to the internal format that Excel seems to need.\n\nThe fix for this should be not too difficult.  This page provides a useful description:\nhttp://www.ozgrid.com/Excel/CustomFormats.htm\n\n\n\nBTW - the internal representation of data formats is also visible in the output of BiffViewer. For example:\nOffset=0x000004E7(1255) recno=51 sid=0x041E size=0x003F(63)\n[FORMAT]\n    .indexcode       = 0x002C\n    .isUnicode       = false\n    .formatstring    = _(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)\n[/FORMAT]", "id": 127745, "time": "2009-06-08T12:52:13Z", "creator": "josh@apache.org", "creation_time": "2009-06-08T12:52:13Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "jimmy422@rediffmail.com", "attachment_id": null, "id": 127781, "time": "2009-06-10T04:08:25Z", "bug_id": 47282, "creation_time": "2009-06-10T04:08:25Z", "is_private": false, "text": "Sorry for replying late ...\n\nThe parsing logic is written as per the Excel formats which has the space.\n\nAs Michael Zalewski (https://issues.apache.org/bugzilla/show_bug.cgi?id=47282#c2)\npointed correctly, after parsing as per current format string in POI,\nit gives the value as #0.00 at my end.\n\nIf the space is removed while debugging, it parses the currencies as perfectly.\n\nThe standard formats does have space after * and I think POI should follow the same."}, {"count": 8, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "id": 127806, "time": "2009-06-10T11:04:26Z", "bug_id": 47282, "creation_time": "2009-06-10T11:04:26Z", "is_private": false, "text": "(In reply to comment #7)\n> The parsing logic is written as per the Excel formats which has the space.\n\nWhich parsing logic?  Excel's? POI's? Have you written your own parsing logic?  If so, is it easy enough to share a small part of that code which exposes the bug?\n\n\n\n> As Michael Zalewski\n> (https://issues.apache.org/bugzilla/show_bug.cgi?id=47282#c2)\n> pointed correctly, after parsing as per current format string in POI,\n> it gives the value as #0.00 at my end.\n\n'it gives' - which app are you talking about?  Probably not Excel, because Excel would actually give a result of #,0.00.\n\n\n \n> If the space is removed while debugging, it parses the currencies as perfectly.\n\nI guess you mean 'If the space is *added* while debugging...'\n\n\n\n> The standard formats does have space after * and I think POI should follow the\n> same.\n\nPOI *will* be changed to match Excel.  That was never in question.  Instead, please help us understand the reasoning behind the change."}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n> (In reply to comment #7)\n> > The parsing logic is written as per the Excel formats which has the space.\n> \n> Which parsing logic?  Excel's? POI's? Have you written your own parsing logic? \n> If so, is it easy enough to share a small part of that code which exposes the\n> bug?\nVijayendra - The parsing logic is written externally. No Excel's or POI's parsing logic is used.\nI cannot disclose the code, since it is complex and huge.\n\n> \n> \n> \n> > As Michael Zalewski\n> > (https://issues.apache.org/bugzilla/show_bug.cgi?id=47282#c2)\n> > pointed correctly, after parsing as per current format string in POI,\n> > it gives the value as #0.00 at my end.\n> \n> 'it gives' - which app are you talking about?  Probably not Excel, because\n> Excel would actually give a result of #,0.00.\nVijayendra - The custom application\n> \n> \n> \n> > If the space is removed while debugging, it parses the currencies as perfectly.\n> \n> I guess you mean 'If the space is *added* while debugging...'\nVijayendra - Yeah. Sorry. If space *added*.\n> \n> \n> \n> > The standard formats does have space after * and I think POI should follow the\n> > same.\n> \n> POI *will* be changed to match Excel.  That was never in question.  Instead,\n> please help us understand the reasoning behind the change.\n\nTo summarize the logic, it parse the format string and tries to collect various formats (represented by custom java classes) in sequence, which later helps in formatting the value.\nThe logic is written as per the standard formats. So cannot change it for a single value. So while parsing the string, if the space is not found, it makes the formatting messy.", "attachment_id": null, "id": 127865, "creator": "jimmy422@rediffmail.com", "time": "2009-06-11T04:45:02Z", "bug_id": 47282, "creation_time": "2009-06-11T04:45:02Z", "is_private": false}, {"count": 10, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "id": 187186, "time": "2015-12-28T18:32:19Z", "bug_id": 47282, "creation_time": "2015-12-28T18:32:19Z", "is_private": false, "text": "The issue with missing blanks in the formats seems to have been fixed via bug 55730, I could not see what else is missing in this old issue. Therefore I am closing it for now, please report new bugs for any things that are still not solved here."}]
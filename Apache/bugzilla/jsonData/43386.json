[{"count": 0, "tags": [], "bug_id": 43386, "text": "There is a race condition in the default handler which results in the content \nbeing truncated, if the file is replaced during the request.\n\nAFAIU in default_handler the following code is executed (using simple IO for \ndemonstration):\n\nstat(path, &finfo);\nint fd = open(path, ...);\nread(fd, buf, finfo.size);\n\nIf the file is replaced between the stat and the open calls, then the default \nhandler uses the size of the old file as content length header and reads the \ncorresponding number of bytes from the new file.\n\nSo if the new file is larger, then the content is truncated.  If it is \nsmaller, then ???\n\nTo avoid this race condition, the file should be opened first and the open \nfile handle be passed to fstat().  Alternatively, use chunked encoding to \navoid having to calculate the content length in advance.", "id": 108154, "time": "2007-09-13T08:09:53Z", "creator": "anathaniel@apache.org", "creation_time": "2007-09-13T08:09:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "rahul.g.nair@gmail.com", "text": "This is easily reproducible, but is hard to fix, The reason below.\n\nThe finfo structure is populated in ap_directory_walk\n---------------------------\n    r->filename = entry_dir;\n\n    cache = prep_walk_cache(AP_NOTE_DIRECTORY_WALK, r);\n\n    /* If this is not a dirent subrequest with a preconstructed\n     * r->finfo value, then we can simply stat the filename to\n     * save burning mega-cycles with unneeded stats - if this is\n     * an exact file match.  We don't care about failure... we\n     * will stat by component failing this meager attempt.\n     *\n     * It would be nice to distinguish APR_ENOENT from other\n     * types of failure, such as APR_ENOTDIR.  We can do something\n     * with APR_ENOENT, knowing that the path is good.\n     */\n    if (!r->finfo.filetype || r->finfo.filetype == APR_LNK) {\n=>       rv = apr_stat(&r->finfo, r->filename, APR_FINFO_MIN, r->pool);\n---------------------------\n]where\n=>[1] ap_directory_walk(r = 0x2ba850), line 508 in \"request.c\"\n  [2] core_map_to_storage(r = 0x2ba850), line 3471 in \"core.c\"\n  [3] ap_run_map_to_storage(0x2ba850, 0x14, 0x0, 0xa, 0x0, 0x0), at 0x82cf0\n  [4] ap_process_request_internal(r = 0x2ba850), line 150 in \"request.c\"\n  [5] ap_process_async_request(r = 0x2ba850), line 242 in \"http_request.c\"\n  [6] ap_process_request(r = 0x2ba850), line 288 in \"http_request.c\"\n===========================================================\nWhile, we open the FD in core\n-------------------------\n        if (r->method_number != M_GET) {\n            core_request_config *req_cfg;\n\n            req_cfg = ap_get_module_config(r->request_config, &core_module);\n            if (!req_cfg->deliver_script) {\n                /* The flag hasn't been set for this request. Punt. */\n                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,\n                              \"This resource does not accept the %s method.\",\n                              r->method);\n                return HTTP_METHOD_NOT_ALLOWED;\n            }\n        }\n\n\n=>      if ((status = apr_file_open(&fd, r->filename, APR_READ | APR_BINARY\n#if APR_HAS_SENDFILE\n                            | ((d->enable_sendfile == ENABLE_SENDFILE_OFF)\n                                                ? 0 : APR_SENDFILE_ENABLED)\n#endif\n                                    , 0, r->pool)) != APR_SUCCESS) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, status, r,\n                          \"file permissions deny server access: %s\", r->filename);\n            return HTTP_FORBIDDEN;\n        }\n\n        ap_update_mtime(r, r->finfo.mtime);\n        ap_set_last_modified(r);\n        ap_set_etag(r);\n        apr_table_setn(r->headers_out, \"Accept-Ranges\", \"bytes\");\n        ap_set_content_length(r, r->finfo.size);\n---------------------------\n]where\n=>[1] default_handler(r = 0x2ba850), line 3600 in \"core.c\"\n  [2] ap_run_handler(0x2ba850, 0x3b3b3b3b, 0x6c000000, 0x80808080, 0xff00,\n0x80808080), at 0x8ba30\n  [3] ap_invoke_handler(r = 0x2ba850), line 378 in \"config.c\"\n  [4] ap_process_async_request(r = 0x2ba850), line 244 in \"http_request.c\"\n  [5] ap_process_request(r = 0x2ba850), line 288 in \"http_request.c\"\n\nWhile this is a bug, I think there might be other methods that rely on finfo\nthat get called in between, and some of them may lead to other request paths\nthat do not require the FD. With out significant patching, the best option may\nbe to redo the ap_(f)stat again once the fd is opened.\n", "id": 108259, "time": "2007-09-17T02:54:29Z", "bug_id": 43386, "creation_time": "2007-09-17T02:54:29Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "The order of the open/stat calls it not really relevant; there will always be a\nrace between when the file is stat'ed and when it is served.  The way around\nthis is to avoid modifying files in-place in your document root; ensure they are\nupdated only using atomic operations (\"write content to temporary file; rename\nfile into place\").", "id": 108260, "time": "2007-09-17T02:59:31Z", "bug_id": 43386, "creation_time": "2007-09-17T02:59:31Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43386, "text": "Created attachment 20832\nPatch to double check the content length\n\nThis patch checks the content length again after the FD has been opened using\nfile_info_get(fd). This is probably not the best way forward since it is a\ndouble\ncheck (as described in the comments), but it will solve the race condition.", "id": 108263, "time": "2007-09-17T03:35:25Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2007-09-17T03:35:25Z", "is_private": false, "attachment_id": 20832}, {"count": 4, "tags": [], "bug_id": 43386, "attachment_id": null, "id": 108266, "time": "2007-09-17T03:56:06Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2007-09-17T03:56:06Z", "is_private": false, "text": "(In reply to comment #2)\nIt is acutally relevant for this bug, since the race condition is reported\n'when replacing the file' not because the poster is modifying the file in\nbetween.\nThe atomic operations that you have described does not help in this case.\nie:\n-> apr_stat called on file\n.....\n<- rename/replace atomic [file replaced by file.new]\n-> apr_file_open file (opens fd.new instead of fd)\n"}, {"count": 5, "tags": [], "bug_id": 43386, "attachment_id": null, "id": 108269, "time": "2007-09-17T04:36:05Z", "creator": "wrowe@apache.org", "creation_time": "2007-09-17T04:36:05Z", "is_private": false, "text": "rahul, the httpd project has acknowledged the race for the past seven or more\nyears, but there is simply nothing to be done about it.\n\nWe are likely to move to, as you suggest, stat'ing the fd and not trusting\nthe resource-by-name in the next iteration of httpd (e.g. 2.4 or 3.0).  But\nthere will *still* be a race if the file is truncated during the send.\n\nAs Joe suggests, if you are modifying your content on the fly, you will\nencounter side effects (always).  The only issue are the specific side effects\nbased on how you are manipulating that content and how many extra steps httpd\nperforms to work around you."}, {"count": 6, "tags": [], "bug_id": 43386, "attachment_id": null, "text": "AFAICS rahuls patch is all that is needed.  It updates r->finfo that Content-\nLength, Last-Modified, and ETag headers will be consistent with the content. \nEven if the file is replaced concurrently, the request will either return the \nold file or the new file.\n\nFor me this atomicity is a vital property which for the last ten years I took \nfor granted to be implemented in httpd.  Sure, if the file is truncated, then \nall bets are off.  But if the content provider goes to the trouble to use an \natomic replace, then httpd should reflect that to the http client.\n\nI am astonished that this seems to be a wellknown long-term bug rather than a \nregression.", "id": 108362, "time": "2007-09-19T00:35:45Z", "creator": "anathaniel@apache.org", "creation_time": "2007-09-19T00:35:45Z", "is_private": false}, {"count": 7, "tags": [], "creator": "rob@framemedia.com", "text": "Our application has a file called \"current.jpg\" that is replaced every minute.      New data is written to a temp file, then rename(2) is called to rename it to \"current.jpg\".\n\nMy company is experiencing exactly the race condition detailed by rahul in comment #4.\n\nThis method of \"mv\" or \"rename()\" to update content is very common.   There is probably widespread assumption that Apache does the right thing in this case.\n\nAny chance of a patch in 2.2.10?\n\nWe're now faced with writing brand new files and adding file cleanup scripts, or having our own custom modified version of Apache.\n\n", "id": 118437, "attachment_id": null, "bug_id": 43386, "creation_time": "2008-07-09T19:00:57Z", "time": "2008-07-09T19:00:57Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 43386, "is_private": false, "text": "I was wrong before, back in comment 2.  There is literally no way to fix these races in the default handler.  open() fstat() sendfile() still has a race between fstat to determine the Content-Length, and the sendfile, during which the file could change.  \"Design a different web server\" is out of scope for bugzilla.", "id": 161483, "time": "2012-08-17T13:48:37Z", "creator": "jorton@redhat.com", "creation_time": "2012-08-17T13:48:37Z", "attachment_id": null}]
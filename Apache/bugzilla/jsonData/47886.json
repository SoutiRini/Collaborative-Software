[{"count": 0, "tags": [], "bug_id": 47886, "attachment_id": 24300, "id": 130573, "time": "2009-09-22T06:00:18Z", "creator": "cflichel@novator.com", "creation_time": "2009-09-22T06:00:18Z", "is_private": false, "text": "Created attachment 24300\nsample of the quick/dirty implementation i made of thread pool\n\nFor long running tests for 1000s perhaps 10s of 1000s of users,\ncreating/starting that many threads is unreasonable and an unnecessary use of\nresources when many of them sleep for extended periods of time.  Since java 1.5\nincorporated many of the basic thread pools, they can easily be used.  Attached\nis a sample of the quick hack that I did to use a scheduled thread pool.  It\nworks for my use, but may not work for all uses."}, {"count": 1, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "Thanks for the patch, though it seems to be made against JMeter 2.3.2 rather than the current SVN.\n\nAlso it disables graceful shutdown.\n\nI can see that it would help for a test that has a large total number of threads where only a few are active at any one time, i.e. where there is a long ramp-up delay compared with the time it takes to run the tests in a thread. [But there are better ways to structure a test like that].\n\nHowever, how does it help with a test where most/all of the threads are active concurrently? Does thread execution automatically switch between pool entries during a wait?\n\nIf so, there are quite a lot of samplers etc. that have been written assuming that a single instance will only be run by a single thread. I'm not sure how these will behave if they can be called from various different threads.", "id": 130576, "time": "2009-09-22T07:21:47Z", "bug_id": 47886, "creation_time": "2009-09-22T07:21:47Z", "is_private": false}, {"count": 2, "tags": [], "creator": "cflichel@novator.com", "attachment_id": null, "text": "The patch was just an example of what I hacked together to get our environment working.  In no way is it intended to be elegant, just a sample.  I am unfamiliar with the jmeter code base in its entirety and all the various samplers, but I think it is still reasonable to have something like this supported.  The thread pool i used doesn't fix the size at the configured amount, that's just how many are kept in the pool even when idle.  If the configured sampler had a high number of threads needing to execute simultaneously, the pool would create more.  It would still help my situation where i have 20K+ users executing over a 60 minute period resulting in only about 10-60 concurrent threads depending on response times.\n\nIn my sample, the state is maintained in the JMeterThread object, not the Thread, and the context still uses ThreadLocal since a given Thread from the thread pool is only used by one JMeterThread at a time.\n\nAlso, graceful shutdown could still be supported.", "id": 130580, "time": "2009-09-22T08:03:09Z", "bug_id": 47886, "creation_time": "2009-09-22T08:03:09Z", "is_private": false}, {"count": 3, "text": "One alternative in your case is to re-use a single JMeter thread for multiple users in succession. I.e. wrap the login, samples, logout sequence in a loop controller.\n\nYou then set the total number of threads to the maximum concurrent users.\n\nWhich could be even cheaper than using a thread pool.\n\nIt may still be worth considering using a thread pool, but it's not clear if this would break any existing tests.", "bug_id": 47886, "is_private": false, "id": 130582, "time": "2009-09-22T08:46:42Z", "creator": "sebb@apache.org", "creation_time": "2009-09-22T08:46:42Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47886, "attachment_id": null, "id": 130583, "time": "2009-09-22T08:53:39Z", "creator": "cflichel@novator.com", "creation_time": "2009-09-22T08:53:39Z", "is_private": false, "text": "Thanks for the suggestion, but it won't work in my case.  I need to simulate new sessions being created by Tomcat which is unrelated to login/logout.  It's related to a new user request, basically new context."}, {"count": 5, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "In which case, just clear the context instead.\n\nIf you want to pursue this, please continue on the JMeter user list.", "id": 130584, "time": "2009-09-22T08:59:13Z", "bug_id": 47886, "creation_time": "2009-09-22T08:59:13Z", "is_private": false}, {"count": 6, "tags": [], "creator": "cflichel@novator.com", "attachment_id": 24301, "is_private": false, "id": 130585, "time": "2009-09-22T11:12:56Z", "bug_id": 47886, "creation_time": "2009-09-22T11:12:56Z", "text": "Created attachment 24301\nhere is a patch for 2.3.4\n\nGraceful shutdown maintained, although not sure that it works completely."}, {"count": 7, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 130589, "time": "2009-09-22T16:20:55Z", "bug_id": 47886, "creation_time": "2009-09-22T16:20:55Z", "text": "Thanks for the replacement patch; it's easier to follow.\n\nThere are still some missing elements: for example, only the Scheduler delay is supported, the absolute start time is ignored, as are the end-time and duration. However these are easy to re-instate.\n\nWhat I don't understand is why StandardJMeterEngine calls jmeterThread.initRun() which creates and populates the context for the JMeterThread. This seems wrong, as the context uses ThreadLocal, i.e. it will return the context for the engine thread, not the execution thread."}, {"count": 8, "tags": [], "bug_id": 47886, "attachment_id": null, "text": "It calls initRun (that i changed) to create a Context object and populate it with the necessary values.  When the thread actually starts, it takes the member context variable and then places it on the ThreadLocal for use.  This is because the JMeterThread only becomes the execution Thread at the point in time that the thread pool starts it.", "id": 130622, "time": "2009-09-23T10:13:21Z", "creator": "cflichel@novator.com", "creation_time": "2009-09-23T10:13:21Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 47886, "attachment_id": null, "text": "\n\n*** This bug has been marked as a duplicate of bug 53418 ***", "id": 162453, "time": "2012-09-28T14:05:41Z", "creator": "sebb@apache.org", "creation_time": "2012-09-28T14:05:41Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "ashley@tomizone.com", "attachment_id": null, "id": 110413, "time": "2007-11-11T20:12:16Z", "bug_id": 43840, "creation_time": "2007-11-11T20:12:16Z", "is_private": false, "text": "The method 'getUserPrincipal()' in the GenericPrincipal class returns itself or\na provided Principal if possible. This is also the return value of the\nrequest.getUserPrincipal() method. This works fine in a non-clustered environment.\n\nHowever the behaviour of this method changes when the GenericPrincipal is\nserialized by the SerializablePrincipal class. In the initial node of a cluster\nthe request.getUserPrincipal() method behaves normally. However after the\nprincipal is serialized to another node it no longer contains the internal\nPrincipal object, so the same method call will now return a different object.\n\nI think a solution could be:\n\n1) If there exists an internal userPrincipal AND it is Serializable then\nserialize it along with the other properties of GenericPrincipal.\n\n2) Recreate it at the other end if it is available in the object stream.\n\nIn this manner users with custom Principal objects that implement\njava.io.Serializable will have predictable results from the\nrequest.getUserPrincipal method across nodes in a cluster.\n\nI'd appreciate your thoughts on this.\n\nThanks,\nAshley"}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 112301, "time": "2007-12-30T14:04:12Z", "bug_id": 43840, "creation_time": "2007-12-30T14:04:12Z", "text": "I have committed a fix to svn and proposed the fix for inclusion in 6.0.x\n\nhttp://svn.apache.org/viewvc?rev=607596&view=rev\nhttp://svn.apache.org/viewvc?rev=607597&view=rev"}, {"count": 2, "tags": [], "bug_id": 43840, "is_private": false, "text": "This has been fixed in svn and will be included in 6.0.16 onwards.", "id": 112745, "time": "2008-01-10T13:10:29Z", "creator": "markt@apache.org", "creation_time": "2008-01-10T13:10:29Z", "attachment_id": null}]
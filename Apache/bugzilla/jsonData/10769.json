[{"count": 0, "tags": [], "creator": "jan.grant@bristol.ac.uk", "attachment_id": null, "is_private": false, "id": 19467, "time": "2002-07-13T08:50:00Z", "bug_id": 10769, "creation_time": "2002-07-13T08:50:00Z", "text": "In a nutshell:\n<basename file=\"/a/b/c/foo.xml.xslt\" property=\"x\" suffix=\".xslt\"/>\ndoesn't do what you'd expect. Fix is a one-liner:\n\n*** Basename.java.orig  Sat Jul 13 09:43:04 2002\n--- Basename.java       Sat Jul 13 09:43:17 2002\n***************\n*** 127,133 ****\n        } else {\n          value = file.getName();\n          if (suffix != null && value.endsWith(suffix)) {\n!             int pos = value.indexOf('.');\n              value = value.substring(0, pos);\n          }\n          getProject().setNewProperty(property, value);\n--- 127,133 ----\n        } else {\n          value = file.getName();\n          if (suffix != null && value.endsWith(suffix)) {\n!             int pos = value.lastIndexOf('.');\n              value = value.substring(0, pos);\n          }\n          getProject().setNewProperty(property, value);\n\nShould do it."}, {"count": 1, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "id": 19468, "time": "2002-07-13T09:08:43Z", "bug_id": 10769, "creation_time": "2002-07-13T09:08:43Z", "is_private": false, "text": "I'm fixing it right now but it should normally be a little bit more complex \nthan that from what I understand from the docs as the '.' is not mandatory in \nthe suffix so it will crash if the suffix is not preceded by a '.'.\n\n"}, {"count": 2, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "id": 19469, "time": "2002-07-13T09:48:33Z", "bug_id": 10769, "creation_time": "2002-07-13T09:48:33Z", "is_private": false, "text": "I ended up with the following cryptic logic:\n\n----\n// if the suffix does not starts with a '.' and the\n// char preceding the suffix is a '.', we assume the user\n// wants to remove the '.' as well (see docs)\nint pos = value.length() - suffix.length();\nif (pos > 0 && suffix.charAt(0) != '.' \n    && value.charAt(pos - 1) == '.') {\n   pos--;\n}\n--\n\nI added more testcases to cvs head, but I'm not very positive about having a \nbasename doing some magic with '.'. If all this is good we'll need to backport \nit to 1.5 branch for 1.5.1 release.\n\ncc to Diane for information."}, {"count": 3, "tags": [], "bug_id": 10769, "is_private": false, "text": "Thanks, Stephane. This came up on ant-dev earlier, and I meant to fix it before \n1.5 went out -- just got distracted with other stuff, and it slipped my mind \n(drat!). See:\n  http://marc.theaimsgroup.com/?l=ant-dev&m=102519661703367&w=2\nfor my reply to it then.\n\nI suspect I really blew it when I hard-coded in the \".\"  Seemed like a good \nidea at the time, but in retrospect, it pretty much sucks :(  You really should \nbe able to lop off whatever you want from the end of the name (ie., you should \nbe able to turn foobarbaz into foobar), so I'm not sure at this point what we \nshould really do. I'm thinking maybe go ahead and add the optional 'delimiter' \nattribute -- if it's not specified, assume \".\", if it is specified, go with \nwhatever it's set to, including none when set to \"\". What do you think?", "id": 19472, "time": "2002-07-13T16:44:24Z", "creator": "holtdl@yahoo.com", "creation_time": "2002-07-13T16:44:24Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 10769, "is_private": false, "text": "Ah ! I was sure I had read something related to it somewhere :)\n\nMy opinion is that it should be the same behavior as the basename command... \notherwise this might be weird for some people. I would be +1 for fixing the \nbehavior in 1.5.1 and remove that '.' before too many people rely on that.\n\n", "id": 19473, "time": "2002-07-13T16:54:40Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-13T16:54:40Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 56518, "text": "Created attachment 31613\nthe sample webapp to reproduce the bug\n\nwe have encouter this bug in a real product webapp.\n\nI have tested this in linux x86, oracle jdk jdk1.7.0_55, tomcat 7.0.53 and tomcat 8.0.5.\n\nCONFIG:\nwe change HTTP Connector to NIO in \"server.xml\", \ne.g. protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n\nWEBAPP LOGIC:\nthe simplified situation:\n1. call \"req.startAsync()\" to start async serlvet, then execute the async logic in our user thread.\n2. sometimes the user thread be interrupted (by some timeout logic of our code).\n3. some user code call \"resp.flushBuffer()\" to send response to client\n\nPROBLEM:\nin the situation descibed above, the \"LimitLatch.countDown()\" is not called.\nwhen the connections limit latch count up to max ( default \"10000\" ),\ntomcat DO not accept any connection, all incoming client hangs.\n\nREPRODUCER:\n\nin a clean tomcat-7.0.53 installation:\n1. change the default \"server.xml\" Connector config.\n(1) change protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n(2) Optional, add maxConnections=\"100\" to reproduce the bug faster.\n2. copy the sample webapp in the attachment to \"webapps/ROOT.war\"\n3. start tomcat.\n4. make plenty request to \"/async.html\", \n\nfor (( i = 0; i < 15000; ++i )) ; do echo $i; curl localhost:8080/async.html; done\n\neach request is likely cause a limit latch leak.\nwhen the requests reaches maxConnections (100 as we set above) or some more,\nthe client ( curl ) hangs.\n\nTECHNIC-DETAILS:\nafter some debug, wo found these:\n\n1. when the thread was interrupted, when the user code call \"resp.flushBuffer()\",\nthe NioChannel was Closed by jdk NIO code, and a ClosedByInterruptException is thrown.\n\n2. when the channel closed, the SelectionKey was removed by Poller thread, \nstack trace:\nDaemon Thread [http-nio-8080-ClientPoller-0] (Suspended)\t\n\towns: Object  (id=3346)\t\n\towns: HashSet<E>  (id=3354)\t\n\towns: EPollSelectorImpl  (id=82)\t\n\towns: Collections$UnmodifiableSet<E>  (id=3355)\t\n\towns: Util$2  (id=3356)\t\n\tSocketChannelImpl(AbstractSelectableChannel).removeKey(SelectionKey) line: 114\t\n\tEPollSelectorImpl(AbstractSelector).deregister(AbstractSelectionKey) line: 168\t\n\tEPollSelectorImpl.implDereg(SelectionKeyImpl) line: 162\t\n\tEPollSelectorImpl(SelectorImpl).processDeregisterQueue() line: 131\t\n\tEPollSelectorImpl.doSelect(long) line: 69\t\n\tEPollSelectorImpl(SelectorImpl).lockAndDoSelect(long) line: 69\t\n\tEPollSelectorImpl(SelectorImpl).select(long) line: 80\t\n\tNioEndpoint$Poller.run() line: 1163\t\n\tThread.run() line: 662\t\n\n3. when we call \"ctx.complete()\", it run to \"org.apache.tomcat.util.net.NioEndpoint.processSocket(NioChannel, SocketStatus, boolean)\", code is below:\n\n    public boolean processSocket(NioChannel socket, SocketStatus status, boolean dispatch) {\n        try {\n            KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false);\n            if (attachment == null) {\n                return false;\n            }\n\nsince the SelectionKey was removed, the \"attachment\" returns null.\nthe logic is break, \"AbstractEndpoint.countDownConnection()\" is not called, a limit latch leak happens.\n\nWORK-AROUND:\nsome work-around:\n1. switch to the stable BIO connector.\n2. avoid call \"resp.flushBuffer()\" in the user thread.", "id": 175178, "time": "2014-05-13T10:47:48Z", "creator": "313982441@qq.com", "creation_time": "2014-05-13T10:47:48Z", "is_private": false, "attachment_id": 31613}, {"count": 1, "tags": [], "bug_id": 56518, "text": "Created attachment 31614\nsource code of the sample webapp", "id": 175179, "time": "2014-05-13T10:52:29Z", "creator": "313982441@qq.com", "creation_time": "2014-05-13T10:52:29Z", "is_private": false, "attachment_id": 31614}, {"count": 2, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 175188, "time": "2014-05-13T22:11:10Z", "bug_id": 56518, "creation_time": "2014-05-13T22:11:10Z", "tags": [], "text": "Thanks for the sample web application. I am able to reproduce this with NIO but not with NIO2 or APR/native so it appears that this issue is specific to NIO.\n\nI have started some refactoring that should make this simpler to fix (in 8.0.x at least) but it doesn't look like there is an easy fix for this."}, {"count": 3, "tags": [], "bug_id": 56518, "text": "As luck would have it, the next stage of clean-up / refactoring appears to have fixed this issue. The fix is applied to 8.0.x and the unit tests pass on OSX. I'm just waiting for the results for Linux and Windows before looking at back-porting the fix to 7.0.x.", "id": 175189, "time": "2014-05-13T23:30:19Z", "creator": "markt@apache.org", "creation_time": "2014-05-13T23:30:19Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 56518, "text": "The fix works on 8.0.x but back-porting the changes to 7.0.x doesn't appear to address the problem on that platform.\n\nFor reasons I don't yet fully understand, 8.0.x appears not to throw the ClosedByInterruptException.", "id": 175204, "time": "2014-05-14T13:59:03Z", "creator": "markt@apache.org", "creation_time": "2014-05-14T13:59:03Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "313982441@qq.com", "text": "Created attachment 31690\nsample webapp to reproduce the bug in tomcat 8.0.8", "id": 175656, "time": "2014-06-05T10:41:05Z", "bug_id": 56518, "creation_time": "2014-06-05T10:41:05Z", "is_private": false, "attachment_id": 31690}, {"count": 6, "tags": [], "bug_id": 56518, "text": "Created attachment 31691\nsource code of the sample webapp", "id": 175657, "time": "2014-06-05T10:43:43Z", "creator": "313982441@qq.com", "creation_time": "2014-06-05T10:43:43Z", "is_private": false, "attachment_id": 31691}, {"count": 7, "tags": [], "bug_id": 56518, "attachment_id": null, "text": "we are try to back-porting the fix in tomcat 8 to tomcat 7.\nAfter some debugging, It seems the bug does not fixed in tomcat 8, but make it more difficult to reproduce.\nThe root cause is that the SelectionKey is removed before the count down be executed. \n\nI fixed the sample webapp to set the sleep time a little more than the selectorTimeout, then I can reproduce the bug in tomcat 8.0.8.\n\nI'm use ubuntu 12.04 32bit, oracle jdk 1.7.0_55, tomcat 8.0.8.\n\nIn a tomcat 8.0.8 clean install,\n(1) edit \"server.xml\", in the Connector add maxConnections=\"10\" to reproduce this bug faster.\n(2) remove origin ROOT in webapps, 'rm -rf conf/ROOT', deploy the sample webapp to \"webapps/ROOT.war\".\n(3) start tomcat.\n(4) make plenty request to \"/async.html\", \n\nfor (( i = 0; i < 15000; ++i )) ; do echo $i; curl localhost:8080/async.html; done\n\nwait a minute, then the curl client hangs, the connection limit will count up to the max.", "id": 175658, "time": "2014-06-05T10:57:09Z", "creator": "313982441@qq.com", "creation_time": "2014-06-05T10:57:09Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56518, "attachment_id": null, "id": 175683, "time": "2014-06-05T15:33:17Z", "creator": "markt@apache.org", "creation_time": "2014-06-05T15:33:17Z", "is_private": false, "text": "(In reply to hanyong from comment #7)\n> It seems the bug does not fixed in tomcat 8, but make\n> it more difficult to reproduce.\n\nI wondered if that might be the case. I've spent quite a bit of time looking at this and don't see a simple solution at this point."}, {"count": 9, "tags": [], "bug_id": 56518, "text": "Created attachment 31698\nfix bug 56518 based on https://svn.apache.org/repos/asf/tomcat/trunk@1595293\n\nHere is my Quick and Dirty patch to fix this at tomcat 8.0.8 , hope it help for a regular solution.\nI also started a PR on github: https://github.com/apache/tomcat/pull/10\n\nIn NioEndpoint, save and retrieve SelectionKey in KeyAttachment.\nWhen the socket is closed by the interrupt,\nthe associated SelectionKey may be removed by the poller thread before async complete.\nThen socket.keyFor() returns null, the connection count would not be reduced.\nSave the key in the attachment could fix this.", "id": 175735, "attachment_id": 31698, "creator": "313982441@qq.com", "creation_time": "2014-06-09T04:43:14Z", "time": "2014-06-09T04:43:14Z", "is_private": false}, {"count": 10, "tags": [], "text": "Sorry, the patch DOES NOT work well.\n\nI found another problem.\n\nThe aysnc servlet timeout is triggered by the poller thead also, since the SelectionKey was deregistered when the socket be closed, the asyncTimeout will never triggered.\n\nIn this situation, If the user forgot to call \"AsyncContext.complete()\", the limit leak happens always.", "attachment_id": null, "id": 175737, "creator": "313982441@qq.com", "time": "2014-06-09T10:33:58Z", "bug_id": 56518, "creation_time": "2014-06-09T10:33:58Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 56518, "attachment_id": null, "text": "One way around that issue would be to move the Async timeout processing to a separate thread - like it is for the other endpoints.", "id": 175745, "time": "2014-06-09T17:05:19Z", "creator": "markt@apache.org", "creation_time": "2014-06-09T17:05:19Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 56518, "attachment_id": 31703, "text": "Created attachment 31703\nfix bug 56518 on TOMCAT_7_0_54\n\nClear thread interrupted status before write to NIO socket. i.e. Never interrupt NIO ops.\n\nIt's very rough, but It's the simplest way and works.", "id": 175754, "time": "2014-06-10T09:23:17Z", "creator": "313982441@qq.com", "creation_time": "2014-06-10T09:23:17Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 56518, "text": "Thanks for all your work on this. It is much appreciated.\n\nGiven that it is the application that is triggering the interrupt, shouldn't it be the application's responsibility to clear that interrupt before continuing and flushing the response buffer?\n\nI'm currently thinking of adding a test for the current Thread being interrupted to the NIO write methods along the lines of your proposed patch. I want to test the performance of this first. I'm also leaning towards logging a warning if the thread is interrupted on the basis that the app that generated the interrupt should have cleared it.", "id": 175759, "time": "2014-06-10T13:50:49Z", "creator": "markt@apache.org", "creation_time": "2014-06-10T13:50:49Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "text": "I've done some testing and it looks like the call to Thread.currentThread().isInterrupted() is nice and quick. I'm going to go ahead and make some changes here.\n\nI've been thinking about this some more and I am leaning towards closing the connection if Tomcat detects an interrupt since that is what would happen if the thread was allowed to continue. This adds weight to the view that the application should clear the interrupt.", "attachment_id": null, "id": 175763, "creator": "markt@apache.org", "time": "2014-06-11T10:11:30Z", "bug_id": 56518, "creation_time": "2014-06-11T10:11:30Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 56518, "attachment_id": null, "id": 175767, "time": "2014-06-11T10:42:58Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-06-11T10:42:58Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #14)\n> \n> I am leaning towards closing the\n> connection if Tomcat detects an interrupt since that is what would happen if\n> the thread was allowed to continue.\n\n+1.\n\nI have not followed this discussion, but I can add that starting with 8.0.9/7.0.55 an interruption may also be performed by o.a.c.valves.StuckThreadDetectionValve, if it is configured to do so. (r1595331 bug 56526)."}, {"count": 16, "tags": [], "creator": "markt@apache.org", "text": "I have implemented this for 8.0.x and it will be included in 8.0.9 onwards.\n\nI am now looking at back-porting the fix to 7.0.x.", "id": 175791, "time": "2014-06-12T15:12:44Z", "bug_id": 56518, "creation_time": "2014-06-12T15:12:44Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 56518, "text": "This has been fixed in 7.0.x for 7.0.55 onwards.", "id": 175831, "time": "2014-06-16T10:08:55Z", "creator": "markt@apache.org", "creation_time": "2014-06-16T10:08:55Z", "is_private": false, "attachment_id": null}]
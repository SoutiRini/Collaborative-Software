[{"attachment_id": null, "tags": [], "creator": "moog@sysdev.oucs.ox.ac.uk", "text": "Use mod_cache and mod_disk_cache.\nSuppose an object is in the cache, but expired, and the backend has a newer version of the object.\nRequest the object partially, using Range and If-Range, with an If-Range time equal to the timestamp of the object in the cache.\n\nSince the object has expired, mod_cache revalidates with the backend and retrieves the newer version, deleting the old version from the cache.\n\nAccording to the specification of If-Range in RFC2616, the server should deliver the whole of the new version of the object, but instead it delivers only the part of it specified in Range.\n\nIf the cached object is made current or deleted, If-Range requests are handled correctly, until the backend version is updated again.\n\nLooking towards the end of cache_save_filter in mod_cache.c:  \n\n        /* Restore the original request headers and see if we need to\n         * return anything else than the cached response (ie. the original\n         * request was conditional).\n         */\n        r->headers_in = cache->stale_headers;\n        status = ap_meets_conditions(r);\n        if (status != OK) {\n            r->status = status;\n\n            bkt = apr_bucket_flush_create(bb->bucket_alloc);\n            APR_BRIGADE_INSERT_TAIL(bb, bkt);\n        }\n        else {\n            cache->provider->recall_body(cache->handle, r->pool, bb);\n        }\n\nap_meets_conditions always returns OK for an If-Range request, so in the situation described above, the If-Range request gets treated like an unconditional request.", "count": 0, "id": 114489, "time": "2008-03-11T08:16:13Z", "bug_id": 44579, "creation_time": "2008-03-11T08:16:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44579, "text": "Can you please provide a request and the response headers of the corresponding response  to this request where you get only the specified range of the entity instead of the whole one?", "id": 114508, "time": "2008-03-11T13:54:36Z", "creator": "rpluem@apache.org", "creation_time": "2008-03-11T13:54:36Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44579, "text": "After ensuring doc.txt was in the cache and expired, I updated it with\n\"date >doc.txt\" then requested a range of it:\n\nGET /doc.txt HTTP/1.1\nHost: 127.0.0.1\nRange: bytes=10-20\nIf-Range: Tue, 11 Mar 2008 23:57:41 GMT\n\nHTTP/1.1 206 Partial Content\nDate: Wed, 12 Mar 2008 00:04:26 GMT\nServer: Apache/2.2.8 (Unix)\nLast-Modified: Wed, 12 Mar 2008 00:03:22 GMT\nETag: \"310314-1d-448322a4b8680\"\nAccept-Ranges: bytes\nContent-Length: 11\nContent-Range: bytes 10-20/29\nContent-Type: text/plain\n\n 00:03:22 G\n", "id": 114513, "time": "2008-03-11T17:16:47Z", "creator": "moog@sysdev.oucs.ox.ac.uk", "creation_time": "2008-03-11T17:16:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Does the following patch fix your problem?\n\nIndex: modules/cache/mod_cache.c\n===================================================================\n--- modules/cache/mod_cache.c   (revision 634179)\n+++ modules/cache/mod_cache.c   (working copy)\n@@ -613,6 +613,12 @@\n             cache->provider->remove_entity(cache->stale_handle);\n             /* Treat the request as if it wasn't conditional. */\n             cache->stale_handle = NULL;\n+            /*\n+             * Restore the original request headers as they may be needed\n+             * by further output filters like the byterange filter to make\n+             * the correct decisions.\n+             */\n+            r->headers_in = cache->stale_headers;\n         }\n     }\n", "attachment_id": null, "id": 114516, "creator": "rpluem@apache.org", "time": "2008-03-12T01:54:04Z", "bug_id": 44579, "creation_time": "2008-03-12T01:54:04Z", "is_private": false}, {"count": 4, "tags": [], "text": "Yes, your patch fixes the problem, thanks very much!", "attachment_id": null, "id": 114522, "creator": "moog@sysdev.oucs.ox.ac.uk", "time": "2008-03-12T03:45:22Z", "bug_id": 44579, "creation_time": "2008-03-12T03:45:22Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 44579, "text": "Committed to trunk as r636386 (http://svn.apache.org/viewvc?view=rev&revision=636386).", "id": 114532, "time": "2008-03-12T09:08:12Z", "creator": "rpluem@apache.org", "creation_time": "2008-03-12T09:08:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 44579, "text": "Sorry, spoke too soon... although your patch fixes the problem when the backend is the local disk, it has no effect when the backend is another server reverse-proxied with mod_proxy.\n\nGET /proxied/date.txt HTTP/1.1\nHost: 127.0.0.1\nRange: bytes=10-20\nIf-Range: Wed, 12 Mar 2008 18:48:57 GMT\n\ncauses Apache to make the following request to the backend:\n\nGET /store/date.txt HTTP/1.1\nHost: [backend]\nRange: bytes=10-20\nIf-None-Match: \"3e61762-1d-44841e3b1d840\"\nIf-Modified-Since: Wed, 12 Mar 2008 18:48:57 GMT\nX-Forwarded-For: 127.0.0.1\nX-Forwarded-Host: 127.0.0.1\nX-Forwarded-Server: box\nConnection: Keep-Alive\n\nand since the backend has updated content, it delivers the new content, but only part of it, because that's what it was asked for:\n\nHTTP/1.1 206 Partial Content\nDate: Wed, 12 Mar 2008 18:51:00 GMT\nServer: Apache/2.2.3 (Debian) mod_ssl/2.2.3 OpenSSL/0.9.8c WebAuth/3.5.3\nLast-Modified: Wed, 12 Mar 2008 18:49:59 GMT\nETag: \"3e61762-1d-44841e763e3c0\"\nAccept-Ranges: bytes\nContent-Length: 11\nContent-Range: bytes 10-20/29\nKeep-Alive: timeout=15, max=100\nConnection: Keep-Alive\nContent-Type: text/plain; charset=ISO-8859-1\n\n 18:49:59 G\n\nThen Apache delivers this partial content back to the client, not respecting the If-Range request:\n\nHTTP/1.1 206 Partial Content\nDate: Wed, 12 Mar 2008 18:51:00 GMT\nServer: Apache/2.2.3 (Debian) mod_ssl/2.2.3 OpenSSL/0.9.8c WebAuth/3.5.3\nLast-Modified: Wed, 12 Mar 2008 18:49:59 GMT\nETag: \"3e61762-1d-44841e763e3c0\"\nAccept-Ranges: bytes\nContent-Length: 11\nContent-Range: bytes 10-20/29\nContent-Type: text/plain; charset=ISO-8859-1\n\n 18:49:59 G\n\nPerhaps when a client makes an If-Range request, Apache too needs to make an If-Range request to the backend, rather than an If-Modified-Since, so that it will retrieve the full content when it's needed.", "id": 114537, "time": "2008-03-12T12:11:43Z", "creator": "moog@sysdev.oucs.ox.ac.uk", "creation_time": "2008-03-12T12:11:43Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "rpluem@apache.org", "text": "(In reply to comment #6)\n> Sorry, spoke too soon... although your patch fixes the problem when the backend\n> is the local disk, it has no effect when the backend is another server\n> reverse-proxied with mod_proxy.\n\nCan you please check if the following patch fixes your problem:\n\nIndex: modules/cache/cache_storage.c\n===================================================================\n--- modules/cache/cache_storage.c       (Revision 636503)\n+++ modules/cache/cache_storage.c       (Arbeitskopie)\n@@ -283,9 +283,18 @@\n                 apr_table_unset(r->headers_in, \"If-Match\");\n                 apr_table_unset(r->headers_in, \"If-Modified-Since\");\n                 apr_table_unset(r->headers_in, \"If-None-Match\");\n-                apr_table_unset(r->headers_in, \"If-Range\");\n                 apr_table_unset(r->headers_in, \"If-Unmodified-Since\");\n\n+                /*\n+                 * If we have an If-Range header in the original request, we\n+                 * also need to remove a possible Range header as otherwise\n+                 * we might get back a Range response where we shouldn't.\n+                 */\n+                if (apr_table_get(r->headers_in, \"If-Range\")) {\n+                    apr_table_unset(r->headers_in, \"Range\");\n+                }\n+                apr_table_unset(r->headers_in, \"If-Range\");\n+\n                 etag = apr_table_get(h->resp_hdrs, \"ETag\");\n                 lastmod = apr_table_get(h->resp_hdrs, \"Last-Modified\");\n\n\n\n", "count": 7, "id": 114542, "time": "2008-03-12T15:02:15Z", "bug_id": 44579, "creation_time": "2008-03-12T15:02:15Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "rpluem@apache.org", "text": "Better check the following patch:\n\nIndex: modules/cache/cache_storage.c\n===================================================================\n--- modules/cache/cache_storage.c       (Revision 636503)\n+++ modules/cache/cache_storage.c       (Arbeitskopie)\n@@ -286,6 +286,12 @@\n                 apr_table_unset(r->headers_in, \"If-Range\");\n                 apr_table_unset(r->headers_in, \"If-Unmodified-Since\");\n\n+                /* Do not do Range requests with our own conditionals: If\n+                 * we get 304 the Range does not matter and otherwise the\n+                 * entity changed and we want to have the complete entity\n+                 */\n+                apr_table_unset(r->headers_in, \"Range\");\n+\n                 etag = apr_table_get(h->resp_hdrs, \"ETag\");\n                 lastmod = apr_table_get(h->resp_hdrs, \"Last-Modified\");\n\n\nI made up my mind and in case we set our own conditionals for the request to the backend a Range request makes no sense for the reason stated in the comment.", "count": 8, "id": 114543, "time": "2008-03-12T15:13:13Z", "bug_id": 44579, "creation_time": "2008-03-12T15:13:13Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 44579, "text": "> /* Do not do Range requests with our own conditionals: If\n>  * we get 304 the Range does not matter and otherwise the\n>  * entity changed and we want to have the complete entity\n\nGood idea.  I've applied this third patch, and not the first two, and in all the cases mentioned earlier I now get the correct behaviour.  Thanks again.", "id": 114546, "time": "2008-03-12T17:25:13Z", "creator": "moog@sysdev.oucs.ox.ac.uk", "creation_time": "2008-03-12T17:25:13Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> > /* Do not do Range requests with our own conditionals: If\n> >  * we get 304 the Range does not matter and otherwise the\n> >  * entity changed and we want to have the complete entity\n> \n> Good idea.  I've applied this third patch, and not the first two, and in all\n> the cases mentioned earlier I now get the correct behaviour.  Thanks again.\n> \n\nThe first patch is nevertheless correct. I now applied the third one to trunk as well as r636653  (http://svn.apache.org/viewvc?view=rev&revision=636653). Thanks for testing.", "attachment_id": null, "id": 114555, "creator": "rpluem@apache.org", "time": "2008-03-13T00:28:03Z", "bug_id": 44579, "creation_time": "2008-03-13T00:28:03Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "moog@sysdev.oucs.ox.ac.uk", "text": "(In reply to comment #10)\n> The first patch is nevertheless correct. I now applied the third one to trunk\n\nI'm now using both the first and third patches (r636386 and r636653) and I'm getting the correct behaviour.  Thanks.", "count": 11, "id": 114574, "time": "2008-03-13T04:58:16Z", "bug_id": 44579, "creation_time": "2008-03-13T04:58:16Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 44579, "attachment_id": null, "id": 116979, "time": "2008-05-26T13:04:04Z", "creator": "rpluem@apache.org", "creation_time": "2008-05-26T13:04:04Z", "is_private": false, "text": "Proposed for backport to 2.2.x as r660284 (http://svn.apache.org/viewvc?rev=660284&view=rev)."}, {"count": 13, "tags": [], "bug_id": 44579, "attachment_id": null, "id": 130840, "time": "2009-10-03T07:59:31Z", "creator": "minfrin@sharp.fm", "creation_time": "2009-10-03T07:59:31Z", "is_private": false, "text": "Backported to v2.2 and released in v2.2.9."}]
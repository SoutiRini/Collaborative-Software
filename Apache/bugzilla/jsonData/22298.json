[{"count": 0, "attachment_id": null, "bug_id": 22298, "text": "<target name=\"testCopyFromDifferentDrives\"> \n    <touch file=\"D:/copytestfilelist1.tmp\"/>\n    <touch file=\"F:/copytestfilelist2.tmp\"/>\n    <copy todir=\".\" >\n      <filelist \n        files=\"D:/copytestfilelist1.tmp,F:/copytestfilelist2.tmp\"/>\n    </copy>\n  </target>\n\ncurrently doesn't work. I am submitting a patch based on 1.6alpha that enables\nthis. It affects taskdefs/Copy.java and types/FileList.java.\n\nOne of the reasons why this is useful: at deploy time, instead of listing all\nthe jar files in my build.xml, I can put the list in a build.properties and so I\ndon't have to edit my build.xml whenever I add a new jar dependency.\n\nI have written tests for the patch too. I can write more if anybody wants to\nsuggest them. \n\nIf this enhancement is taken on, I'd be willing to add the FileList\nfunctionality to other taskdefs that could accept it.\n\nThis enhancement could be related to \nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=20635", "id": 42536, "time": "2003-08-11T13:15:04Z", "creator": "adam.hardy@cyberspaceroad.com", "creation_time": "2003-08-11T13:15:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "text": "Created attachment 7746\npatch for Copy.java", "id": 42537, "time": "2003-08-11T13:17:30Z", "bug_id": 22298, "creation_time": "2003-08-11T13:17:30Z", "is_private": false, "attachment_id": 7746}, {"count": 2, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "attachment_id": 7747, "id": 42538, "time": "2003-08-11T13:18:00Z", "bug_id": 22298, "creation_time": "2003-08-11T13:18:00Z", "is_private": false, "text": "Created attachment 7747\npatch for FileList.java"}, {"count": 3, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "attachment_id": 7748, "id": 42539, "time": "2003-08-11T13:18:53Z", "bug_id": 22298, "creation_time": "2003-08-11T13:18:53Z", "is_private": false, "text": "Created attachment 7748\npatch for CopyTest.java"}, {"count": 4, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "attachment_id": 7749, "id": 42541, "time": "2003-08-11T13:21:17Z", "bug_id": 22298, "creation_time": "2003-08-11T13:21:17Z", "is_private": false, "text": "Created attachment 7749\npatch for FileListTest.java"}, {"count": 5, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "attachment_id": 7750, "id": 42542, "time": "2003-08-11T13:22:10Z", "bug_id": 22298, "creation_time": "2003-08-11T13:22:10Z", "is_private": false, "text": "Created attachment 7750\npatch for copy.xml test build file"}, {"count": 6, "tags": [], "bug_id": 22298, "attachment_id": null, "text": "Believe it or not, but <filelist> was 'designed' to only allow files from a \ncommon directory, instead of arbitrary files, and furthermore doesn't allow \nsetting each file individually in its own tag, making it impractical and ugly \nfor large number of files...\n\nAll this to say that your enhancement is unlikely to get committed I'm afraid. \nTo me, <filelist> is utterly broken, and poorly supported in Ant, because there \nis no abstract FileCollection type underneath <fileset>, <filelist>, <path>, \netc... --DD", "id": 42549, "time": "2003-08-11T15:04:45Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-08-11T15:04:45Z", "is_private": false}, {"count": 7, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "text": "Yes, it's clear that the implementation is not optimal but wouldn't it be lame\nif that meant that development of this sort of functionality had to stop?\n\nAre you implicitly favouring a major redesign along the lines of an underlying\nabstract FileCollection? ", "id": 42552, "time": "2003-08-11T15:29:54Z", "bug_id": 22298, "creation_time": "2003-08-11T15:29:54Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 22298, "attachment_id": null, "text": "I'm saying that the common-dir issue of <filelist> was raised at its inception, \nand was dismissed then, mostly but the committers still active. Actually, Diane \nwho added <filelist> originally didn't have that restriction at the time, but \nadded it so it was not -1'd, but my memory could be wrong...\n\nI'm just babling about FileCollection. I know it will never happen, partly \nbecause I don't have the courage to do it myself, partly because of backward \ncompat. Cheers, --DD", "id": 42553, "time": "2003-08-11T15:37:28Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-08-11T15:37:28Z", "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 22298, "text": "Would it be because of the Copy's mapper? You cannot use an identity mapper on\nsuch a FileList, but you could throw an exception on a check to stop this. There\nis a large validation method in Copy already. \n\nAs for the backwards-compatibility, I don't see what functionality a redesign\nwould be breaking. (I'm not suggesting you should do it if you don't want to\nthough!)", "id": 42554, "time": "2003-08-11T15:59:49Z", "creator": "adam.hardy@cyberspaceroad.com", "creation_time": "2003-08-11T15:59:49Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "DD, I think your memory is failing on you 8-)\n\nEven the very first version of FileList (written by Craeg Strong and committed\nby myself) had the required dir attribute.\n\nMaking FileList and FileSet drop those requirements when dealing with absolute\npaths is nothing that any committer would be opposed to AFAICT, the only point\nis that it has to keep working without breaking any tasks.\n\nFor <copy>, I'm with Peter here.  It would probably be better to make <copy>\nsupport nested <path>s.  In a sense <path> has become our FileCollection\nimplementation as it can be used as a container for <path>, <fileset>, <dirset>\nand <filelist>.", "id": 42602, "time": "2003-08-12T07:34:25Z", "bug_id": 22298, "creation_time": "2003-08-12T07:34:25Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 22298, "text": "I stand corrected then :)\n\nI differ with Peter and you then, as I see path as being abused this way. The \nFileList type clearly conveys the meaning of an arbitrary list of files which \nare all required to exists, whereas Path conveys an ordered list of files \n(often just directories, but extended to JAR/ZIP and URL in Java), that exist \nor not, used to look up stuff (executables, resources, etc...).\n\nThese are completely disjoint things, and Path should not be abused to take on \nthis new meaning IMHO.\n\nThanks, --DD", "id": 42625, "time": "2003-08-12T13:53:28Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-08-12T13:53:28Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "adam.hardy@cyberspaceroad.com", "is_private": false, "text": "Created attachment 7923\nimproved patch for Copy.java - see following comment", "id": 43198, "time": "2003-08-23T18:27:21Z", "bug_id": 22298, "creation_time": "2003-08-23T18:27:21Z", "attachment_id": 7923}, {"count": 13, "attachment_id": null, "bug_id": 22298, "text": "The patch above is just an update, for the record so to speak even if it looks\nas though it won't get implemented. \n\nI'll take a look at <path> and see what the implications are re Copy and the\nfunctionality under discussion here. Perhaps it's not too complex for me to\ncreate a patch myself to implement multi-drive file copying.\n", "id": 43199, "time": "2003-08-23T18:31:11Z", "creator": "adam.hardy@cyberspaceroad.com", "creation_time": "2003-08-23T18:31:11Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 87777, "time": "2006-04-11T19:54:02Z", "bug_id": 22298, "creation_time": "2006-04-11T19:54:02Z", "is_private": false, "text": "available in 1.7 (svn HEAD) w/ resourcecollections"}]
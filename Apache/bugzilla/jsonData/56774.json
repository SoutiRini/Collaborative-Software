[{"count": 0, "tags": [], "text": "Under XSSF there is no way of setting custom colors when using ConditionalFormatting. I believe in the HSSF side we can alter the pallet to replace an indexed color with a custom collor and then use that but on XSSF side this is not possible. \n\nWould it be possible to add the following funtion to XSSFPatternFormatting class. I tried this hack and seems to be working fine.\n\n    public void setFillBackgroundColor(java.awt.Color clr){\n        CTPatternFill ptrn = _fill.isSetPatternFill() ? _fill.getPatternFill() : _fill.addNewPatternFill();\n        CTColor bgColor = CTColor.Factory.newInstance();\n        bgColor.setRgb(new byte[]{(byte)clr.getRed(), (byte)clr.getGreen(), (byte)clr.getBlue()});\n        ptrn.setBgColor(bgColor);\n        \n    }\n\nWith this method, I can set a custom color as \n\n\t\tConditionalFormattingRule colorHigh = sheetCF.createConditionalFormattingRule(ComparisonOperator.GT, \"H$48\");\n\t\tXSSFPatternFormatting highFill = (XSSFPatternFormatting)colorHigh.createPatternFormatting();\n\t\thighFill.setFillBackgroundColor(new java.awt.Color(198, 239, 206));", "attachment_id": null, "bug_id": 56774, "id": 176708, "time": "2014-07-27T20:44:14Z", "creator": "bhamue@gmail.com", "creation_time": "2014-07-27T20:44:14Z", "is_private": false}, {"count": 1, "tags": [], "creator": "martin.fernau@fernausoft.de", "is_private": false, "text": "This still applies for the latest POI 3.12", "id": 183075, "time": "2015-05-22T14:45:26Z", "bug_id": 56774, "creation_time": "2015-05-22T14:45:26Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 184031, "time": "2015-07-14T21:27:03Z", "bug_id": 56774, "creation_time": "2015-07-14T21:27:03Z", "is_private": false, "text": "This has hopefully been solved with bug #58138, as XSSFPatternFormatting now additionally accepts XSSFColor objects for its colour setters\n\nWould you be able to check a nightly build / 3.13 beta 1 once released, and confirm that your use case is now covered?"}, {"count": 3, "tags": [], "creator": "bhamue@gmail.com", "attachment_id": null, "id": 184148, "time": "2015-07-23T14:42:36Z", "bug_id": 56774, "creation_time": "2015-07-23T14:42:36Z", "is_private": false, "text": "I am able to verify this works using build poi-bin-3.13-beta1-20150720. Test code I have used\n\nimport java.io.FileOutputStream;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.ConditionalFormattingRule;\nimport org.apache.poi.ss.usermodel.PatternFormatting;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.SheetConditionalFormatting;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.util.CellRangeAddress;\nimport org.apache.poi.xssf.usermodel.XSSFColor;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\npublic class TestColor {\n\n\tpublic static void main(String[] args) throws Exception{\n\t\tWorkbook wb = new XSSFWorkbook();\n\t\tSheet s = wb.createSheet(\"TestColor\");\n\t\ts.setColumnWidth(0, 20*256);\n\t\ts.setColumnWidth(1, 20*256);\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tRow r = s.createRow(i);\n\t\t\tCell c1 = r.createCell(0);\n\t\t\tc1.setCellValue(i);\n\t\t\tCell c2 = r.createCell(1);\n\t\t\tc2.setCellValue(i+1);\n\t\t}\n\t\tSheetConditionalFormatting sheetCF = s.getSheetConditionalFormatting();\n\t\tConditionalFormattingRule cfRule =  sheetCF.createConditionalFormattingRule(\"MOD(ROW(),2)=1\");\n\t\tPatternFormatting pfmt = cfRule.createPatternFormatting();\n\t\tpfmt.setFillBackgroundColor(new XSSFColor(new java.awt.Color(98, 239, 216)));\n\t\tCellRangeAddress[] region = {CellRangeAddress.valueOf(\"A1:B5\")};\n\t\tsheetCF.addConditionalFormatting(region, cfRule);\n\t\twb.write(new FileOutputStream(\"C:/poi-test/test.xlsx\"));\n\t\t\n\t\twb.close();\n\t}\n\n}"}]
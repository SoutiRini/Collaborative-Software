[{"count": 0, "tags": [], "creator": "lfurini@cs.unibo.it", "attachment_id": null, "text": "I have tried to solve the problem of the last line in a justified block, which \nsometimes is justified too, instead of being left-aligned.\n\nThis problem arises when the fo:block ends with spaces (the last TextLM's text \nends with spaces), or with a LF followed by spaces (the last TLM's text \ncontains only spaces), while if the block ends with a non-whitespace character \nit is handled right; the test fo file I'm going to attach shows these \ndifferent situations.\n\nSo, a possible solution could be avoiding these problematic situations to \nhappen: as the end of a block always implies a line break (or not?) the ending \nspaces can be removed.\nThis is what the proposed patch I'm going to attach does, slightly modifying \nthe Block.handleWhiteSpace() method:\n- define another RecursiveCharIterator, called spaceIter, initialized null\n- inside the while loop, it is updated (if it's null) cloning charIter before \nnextChar() is called, and set to null again if the current character is not a \nspace; so, if it is not null it points to the first element in a sequence of \nspaces\n- once the loop ends, if spaceIter is not null it is used to remove thr spaces \nat the end of the block\nWithout any other code change, this seem to solve the problem.\n\n\nAn alternative approach: why doesn't the LineLM change text alignment for the \nlast line?\nAlignment is changed\n  if (bTextAlignment == TextAlign.JUSTIFY\n      && (prevBP.isForcedBreak() || isFinished())) {\nand in the problematic cases isFinished() returns \"false\", so text alignment \nis not changed.\n\nThis is what happens during the LineLayoutManager.getNextBreakPoss():\n\n       BreakPoss a || BreakPoss b\n                   vv\n  |.... end of text. |\n\n- inside the while loop, bp = curLM.getNextBreakPoss() returns the break \npossibility \"a\", which could be used to end the line, and is saved in prevBP\n- at the next iteration inside the while loop, bp = curLM.getNextBreakPoss() \nreturns the break possibility \"b\", which is not good (bBreakOK == false)\n- the TLM has finished, so at the next iteration getChildLM() returns null, \nand the while loop ends\n- the LLM calls setFinished(), because there are no more child LM\n- now prevBP=a, bp=b, so prevBP != bp\n- oddly, prevCouldEndLine(prevBP) is false\n- so the reset() function is called, which calls AbstractLayoutManager.reset\n(Position), which has these lines:\n        if (isFinished()) {\n            setFinished(false);\n        }\n\n(in the other problematic situation it's a different TLM which returns \"b\", \nbut the LLM behaviour is quite the same)\n\nIt seems to me that the value returned by prevCouldEndLine(prevBP) is wrong, \nbut I didn't investigate any further as I was quite satisfied with the result \nobtained in the other way.\n\n    Luca", "id": 55562, "time": "2004-04-09T15:07:37Z", "bug_id": 28314, "creation_time": "2004-04-09T15:07:37Z", "is_private": false}, {"attachment_id": 11199, "tags": [], "bug_id": 28314, "text": "Created attachment 11199\ntest fo file", "count": 1, "id": 55563, "time": "2004-04-09T15:08:19Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-09T15:08:19Z", "is_private": false}, {"attachment_id": 11200, "tags": [], "bug_id": 28314, "text": "Created attachment 11200\nproposed patch", "count": 2, "id": 55564, "time": "2004-04-09T15:08:53Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-09T15:08:53Z", "is_private": false}, {"count": 3, "tags": [], "creator": "bowditch_chris@hotmail.com", "attachment_id": null, "text": "Hi Luca,\n\nI'm not certain that your first solution of changing Block.handleWhiteSpace() \nto ignore spaces in last TextLM text is bullet proof. I havent done any \ntesting, so it may be okay. Certainly for ordinary Blocks it may be fine, but \nfor other FOs, which inherit from Block, this may not be acceptable. For \nexample, table-cells, with auto-layout feature on, spaces at the end might be \nrelevant. I'm not rejecting your solution, but I would like to explore your \nsecond idea a bit further.\n\nAnother reason why it may not be good to change the logic in \nBlock.handleWhiteSpace() is that it currently follows the description for \nwhitespace handling in the spec fairly closely and putting other conditions \nin, will detract from this.", "id": 56017, "time": "2004-04-19T13:31:17Z", "bug_id": 28314, "creation_time": "2004-04-19T13:31:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 28314, "is_private": false, "count": 4, "id": 56303, "time": "2004-04-23T15:15:53Z", "creator": "lfurini@cs.unibo.it", "creation_time": "2004-04-23T15:15:53Z", "text": "Hi\n\nI have tried to follow the other idea, i.e. understand why reset() is called \nin these problematic situations, and maybe I have found an alternative patch \nwhich doesn't involve white-space-treatment changes.\n\nProblems in the justification of the last line arise when the \nTextLayoutManagers returns to the LineLM, in sequence:\n- a valid BreakPoss, stored in the ArrayList vecInlineBreaks and in the\n  variable prevBP\n- one or more invalid BreakPoss, for which isSuppressible() is true, stored\n  only in vecInlineBreaks\n- nothing else, as ther are no more child LM with something to layout\n\nAn important detail: if the spaces are at the end of the text of a TLM, prevBP \nhas the REST_ARE_SUPPRESS_AT_LB flag set; in the other case it hasn't.\nThe invalid bp have the ALL_ARE_SUPPRESS_AT_LB flag set.\n\nThe method reset() is called if\n  bp != prevBP                  (the last returned bp is invalid)\n  && !prevCouldEndLine(prevBP)  (we cannot ignore what is after prevBP)\nand I think in our problematic situations !prevCouldEndLine(prevBP) should be \nfalse, i.e. prevCouldEndLine(prevBP) should be true.\n\nSo, this is how I would calculate prevCouldEndLine(prev):\n1) first of all, check if isFinished() is true: if it's not, there are other \nchildLM and we cannot ignore any space\n2) starting from the last element in vecInlineBreaks and moving backward \n(stopping when prev is reached), check if bp are suppressible\n\nAt the moment, prevCouldEndLine calls bp.couldEndLine(), which checks the \nREST_ARE_SUPPRESS_AT_LB bit, which can be true only for a valid BreakPoss \nfollowed by suppressible spaces, and not for the invalid BreakPoss; with my \npatch, this method would be very similar to allAreSuppressible.\n\nThere is only another change to do in the getNextBreakPoss method: if \n(bpDim.min > availIPD.max) and !(bTextAlignment == TextAlign.JUSTIFY || prevBP \n== null) the bp should be added to vecInlineBreaks whether prevBP is null or \nnot, otherwise if the last line of a non-justified block contains only a word \nit is not shown.\nYou can see this using the sample fo file I attached before: the first block \nis left-aligned, and its third and last line is \"spaces.\"; without this last \nchange, the line disappears. In this case reset() should have been called, but \nprevBP is the last BreakPoss in vecInlineBreaks, so prevCouldEndLine(prevBP) \nreturns true.\n\nI'm going to attach this alternative proposed patch.\n\n    Luca"}, {"count": 5, "tags": [], "creator": "lfurini@cs.unibo.it", "is_private": false, "text": "Created attachment 11317\nAlternative patch", "id": 56304, "time": "2004-04-23T15:17:04Z", "bug_id": 28314, "creation_time": "2004-04-23T15:17:04Z", "attachment_id": 11317}, {"count": 6, "tags": [], "creator": "bowditch_chris@hotmail.com", "is_private": false, "text": "Alternative patch Applied,\n\nthanks very much\n\n", "id": 56410, "time": "2004-04-26T14:32:23Z", "bug_id": 28314, "creation_time": "2004-04-26T14:32:23Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 28314, "text": "Luca,\n\nThis is a good patch, and Chris has already applied it. I have a few\nremarks.\n\n1. The patch introduces a trailing space in some cases. This can be\n   seen in the area tree dump, in the second block in your test FO\n   file. This problem can be remedied by adding an else branch, which\n   removes all BPs after prevBP from vecInlineBreaks if we do not\n   reset.\n\n2. The disappearance of the word 'spaces' is due to the fact that in\n   this case bp has not yet been added to vecInlineBreaks, so that\n   prevCouldEndLine is applied on prevBP only, in which case it\n   returns true immediately. We want it to return false in this case\n   so that reset is called and bp is not silently dropped. The problem\n   can be remedied by testing against this condition before checking\n   for suppressibility. I prefer that above your adding bp to\n   vecInlineBreaks, of which the side effects in other cases are\n   unknown. prevCouldEndLine could then be written as:\n\n    private boolean prevCouldEndLine(BreakPoss prev) {\n        if (!isFinished()) {\n            return false;\n        }\n        if (vecInlineBreaks.get(vecInlineBreaks.size() - 1) == prev) {\n            return false;\n        }\n        return allAreSuppressible(prev);\n    }\n\nMy attached patch does the above. It also does away with\nprevCouldEndLine by inserting all the conditions directly in the code\nand reusing allAreSuppressible.\n\nSimon\n", "id": 56654, "time": "2004-04-29T19:01:41Z", "creator": "spepping@apache.org", "creation_time": "2004-04-29T19:01:41Z", "is_private": false, "attachment_id": null}, {"attachment_id": 11386, "tags": [], "bug_id": 28314, "text": "Created attachment 11386\nThe patch as described", "count": 8, "id": 56655, "time": "2004-04-29T19:02:52Z", "creator": "spepping@apache.org", "creation_time": "2004-04-29T19:02:52Z", "is_private": false}, {"count": 9, "tags": [], "text": "Simon, I have moved your patch to a new bug report because this one has been \nclosed. Also, it quickly becomes confusing as to what is going on when there \nare several patches attached to one bug report.\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=28706", "attachment_id": null, "id": 56681, "creator": "bowditch_chris@hotmail.com", "time": "2004-04-30T08:15:44Z", "bug_id": 28314, "creation_time": "2004-04-30T08:15:44Z", "is_private": false}, {"count": 10, "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "attachment_id": null, "id": 155812, "creator": "gadams@apache.org", "time": "2012-04-01T06:42:18Z", "bug_id": 28314, "creation_time": "2012-04-01T06:42:18Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "fluke@krneki.org", "attachment_id": null, "text": "A few of httpd childs hit 99% cpu load and they don't exit ever until I manually\nkill them (or run apachectl restart).\nBy comparing PIDs, server-status reports apache is sending reply, however tcp\nconnection with an IP (which requested url) is closed long ago.\n\nSrv\tPID\tAcc\t\tM\tCPU\tSS\tReq\tConn\tChild\tSlot\tHost\t\tVHost\t\tRequest\n11-14\t14140\t0/1082/5900\tW \t32.23\t1810\t0\t0.0\t4.67\t22.16 \t206.207.111.75\ndomain.com\tGET /images/pix.gif HTTP/1.0\n29-14\t22392\t0/22/4990\tW \t1.31\t4824\t0\t0.0\t0.07\t19.57 \t207.148.214.34\tdomain.com\nGET /search.php HTTP/1.0\n16-14\t30498\t0/11/11624\tW \t0.36\t41025\t0\t0.0\t0.04\t44.39 \t217.167.40.29\tdomain.com\nGET /css/demo.css HTTP/1.0\n\nThis is very annoying since httpd childs starts accumulating, and over a few\nhours/days period server hits very high load (40+).\n\nRight now I have \"apachectl restart\" in my crontab every few hours, but that's\nnot really the solution I want.\nPerhaps there's a way of forcefully killing a child after 30 minutes, or after\nit consumes certain amount of cpu time.\nI'm using apache 1.3.27 with php 4.3.1.\n\nI tested apache 2.0.45 (+php 4.3.1) and it seems it handles this kind of lockups\nsomewhat better, most high cpu childs die, but some still stay running.", "id": 36726, "time": "2003-05-05T22:55:11Z", "bug_id": 19687, "creation_time": "2003-05-05T22:55:11Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 19687, "attachment_id": null, "id": 36863, "time": "2003-05-07T19:57:51Z", "creator": "fluke@krneki.org", "creation_time": "2003-05-07T19:57:51Z", "is_private": false, "text": "hm... using gdb to trace the running processes I got this results from 3\ndifferent childs, 2 different machines:\n\n0x4014c9b4 in read () from /lib/libc.so.6\n\n0x4015444e in select () from /lib/libc.so.6\n\nLoaded symbols for /lib/libnss_dns.so.2\n0x4011e580 in chunk_free (ar_ptr=0x401d2300, p=0x82f9760) at malloc.c:3252\n3252    malloc.c: No such file or directory.\n        in malloc.c\n"}, {"count": 2, "tags": [], "creator": "kris-httpdbug@asn.net", "attachment_id": null, "id": 45554, "time": "2003-10-13T20:18:54Z", "bug_id": 19687, "creation_time": "2003-10-13T20:18:54Z", "is_private": false, "text": "I'm having the same (or similar) issue on my systems, although PHP is not installed.\n\nI'm seeing some httpd processes creep up and use all available CPU:\n\n 2092 www       51   0 56756K 49792K RUN      3:06 16.26% 16.26% httpd\n 2064 www       51   0 56912K 49956K RUN      4:35 16.21% 16.21% httpd\n 2049 www       51   0 56800K 49816K RUN      6:53 16.16% 16.16% httpd\n 2119 www       52   0 56212K 49220K RUN      2:38 16.16% 16.16% httpd\n\nIn that particular example, the first three PIDs are listed in \"apachectl fullstatus\", but they're listed \nas waiting for connection (an underscore).  The 4th PID is not listed in fullstatus at all.  This is \ntypical of what I've been seeing for the last 4 days on many servers.  I've never seen a freaked-out \nhttpd listed in anything but waiting status in the \"fullstatus\" output.\n\nI'm not seeing anything in my error logs.\n\nMy setup:\n\nApache 1.3.28\nmod_perl 1.28\nFreeBSD 4-STABLE last updated 9/16/03\nperl 5.6.1\nexpat 1.95.6\n\nApache, mod_perl, perl and expat were all installed from ports with default make options.\n\nShould this be a seperate ticket because my configuration is so different from the requestors?"}, {"count": 3, "tags": [], "bug_id": 19687, "attachment_id": null, "is_private": false, "id": 45668, "time": "2003-10-14T18:44:07Z", "creator": "kris-httpdbug@asn.net", "creation_time": "2003-10-14T18:44:07Z", "text": "As an update, I ran gdb on several of the spinning httpd processes, and noticed it was stuck in an \nImageMagick function, which was being loaded by mod_perl for a particular web application.\n\nAfter removing \"use Image::Magick\" from my mod_perl startup scripts, this problem was resolved.  \nThe interesting part was that the parts of the web application that made use of ImageMagick were \nno longer accessible.  This seems to just be an issue with loading the module, not with actually \nusing it.  It was also interesting because only a small percentage of httpd processes would spin as \ndescribed, and all processes would have to have loaded Image::Magick.\n\nEven though this was caused by Image::Magick, it seems to me like there's still possibly an \nunderlying apache bug...  I would have expected apache to have killed off a spinning child.  I would \nhave also expected these PIDs to be listed in /server-status.\n\nI'm not this bug's original requestor, so don't mark this bug resolved."}]
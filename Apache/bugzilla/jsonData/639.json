[{"count": 0, "attachment_id": null, "bug_id": 639, "is_private": false, "id": 766, "time": "2001-02-19T09:11:40Z", "creator": "dem@techapp.com", "creation_time": "2001-02-19T09:11:40Z", "tags": [], "text": "This exception handling code in JUnitTestRunner makes it difficult to track \ndown bugs in code that is being tested:\n            try {\n                Method suiteMethod= testClass.getMethod(\"suite\", new Class[0]);\n                suite = (Test)suiteMethod.invoke(null, new Class[0]);\n            } catch(NoSuchMethodException e) {\n            } catch(InvocationTargetException e) {\n            } catch(IllegalAccessException e) {\n            }\n\nA crude way to improve this would be:\n            try {\n                Method suiteMethod= testClass.getMethod(\"suite\", new Class[0]);\n                suite = (Test)suiteMethod.invoke(null, new Class[0]);\n            } catch(NoSuchMethodException e) {\n\t        e.printStackTrace( System.out );\n            } catch(InvocationTargetException e) {\n\t\te.printStackTrace( System.out );\n            } catch(IllegalAccessException e) {\n\t\te.printStackTrace( System.out );\n            }\n\nAs an example, I had a class loading problem that was obscured by this \nexception handling logic.\n\nThanks\n-David McNeil"}, {"count": 1, "attachment_id": null, "bug_id": 639, "text": "FWIW no-arg version of printStackTrace() is generally better because it uses\nSystem.err, which is unbuffered so you are not likely to get mingled exceptions\nfrom different threads.", "id": 768, "time": "2001-02-19T11:05:52Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2001-02-19T11:05:52Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "conor@apache.org", "text": "The code has been changed to behave like other JUnit test runners. Will be \nincluded in Ant 1.3 Beta 3", "id": 793, "time": "2001-02-21T04:13:40Z", "bug_id": 639, "creation_time": "2001-02-21T04:13:40Z", "is_private": false, "attachment_id": null}]
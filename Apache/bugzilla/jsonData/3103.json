[{"count": 0, "tags": [], "bug_id": 3103, "text": "Hi,\n   It seems that lot's of jsp application can't display chinese text properly \nin Tomcat. \n   I'm not sure but the results of some tests told me that the encode in tomcat \ncore is ALWAYS 8859_1 whether in double-byte OS or not. \n  When client input some chinese character ,the encoding of the returned string \nof request.getParameter() is 8859_1,so if you use System.out.println() to print \nit out onto console,it looks like \"??x?\". \n  But,If you added the contentType=\"text/html;charSet=gb2312\" tag into the \nbeginning of every jsp file,the chinese should be displayed correctly to \nbrowser, because tomcat know that the encoding in it's core is  8859_1,and it \nalso know that the locale of PrintWriter(it's out object in jsp) is gb2312,so \nthe PrintWriter must do some  8859_1-->gb2312 translation inside.\n  That's why we always adding contentType to resolve the chinese problem. Right?\n  Unfortunately,things are different while we fetching string from a database \nvia some jdbc driver.\nLook this pseudo code: \nstr=rec.getString(field); \nWould u pls tell me the encoding of String str here?  \n  The answer is: gb2312\n  (Like mysql jdbc driver,lot's of packages return encoded string according to \nthe platform,such as SimpleDateFormat and JavaMail.)\n  So,when you pass this string to PrintWrite,the PrintWriter will apply the \n8859_1-->gb2312 translation again. The poor client have no choice but see the \nugly ???? character.\n   My testing platform:\n   Winnt4.0(Simplified Chinese) + Sun JDK1.3 + Tomcat4.0-b7 + jive2.0.1 + \nmysql3.23.38 + org.gjt.mm.mysql.Driver-2.04", "id": 4521, "attachment_id": null, "creator": "cnkidshaw@mailcity.com", "creation_time": "2001-08-12T23:31:07Z", "time": "2001-08-12T23:31:07Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 3103, "text": "You are correct that the default character encoding for Tomcat 4 is ISO-8859-1. \nThis is required by the servlet specification.\n\nFor creating output pages in other character sets, you are doing the correct\nthing -- a contentType header at the top of the page that includes a \"charset\"\nmodifier.\n\nNote, however, the character set you use to create a page does not have anything\nto do with the character set used to read request parameters.  The character set\nused there is based on what the *browser* sends in, not on what the server wrote\nout.\n\nUnfortunately, most browsers do not set the character set when they do submits. \nTo give applications an opportunity to deal with this, a new method was added to\nthe Servlet 2.3 API:\n    ServletRequest.setCharacterEncoding()\nwhich you must call before calling getParameter() the first time.  There is an\nexample Filter in the Tomcat 4 download that you can customize and use in your\nown applications to do this for you.\n\nTomcat cannot do anything about characters read from a database.  That is\ntotally an issue for whoever provided your database and JDBC driver to resolve.\n\nGiven all of this, it is not clear to me that you are reporting a bug in Tomcat\nhere.  Is there a specific way in which you think Tomcat should be changed?\n", "id": 4567, "attachment_id": null, "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-08-14T12:56:40Z", "time": "2001-08-14T12:56:40Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 3103, "attachment_id": null, "id": 4606, "time": "2001-08-16T07:47:44Z", "creator": "cnkidshaw@mailcity.com", "creation_time": "2001-08-16T07:47:44Z", "is_private": false, "text": "Hi,\n  First of all,thanx a lot for replying my report.\n  Yup,I do apply the new filter in tomcat4-b7,but I still can not see the \ncorrect chinese character.\n   I'm running tomcat in a chinese OS,the locale is zh_CN.\n   Now I use request.getParameter() to fetch a CHINESE string that posted from \na form by using simplified chinese IE.\n   (1)Before applying the filter, System.out.println() print out ??x? to \nconsole,but out.println() will print out the correct chinese character.\n   (2)After applying the filter, System.out.println() print out the correct \nchinese character to console,but out.println() print out ?? (if i input 2 \nchinese character in IE,there will be 2 \"?\")\n   (3)Add contentType=\"text/html;charSet=.... will do nothing helping correct \nthe displaying.\n   So,my conclusion is: \n   the \"OUT\" object do something like this in my platform:\n     s=new String(s.getBytes(\"8859_1\"),\"gb2312\");\n   if the chinese String object \"s\" is 8859_1 encoding,such as before applying \nthe filter,the above encoding-translation is right,\n   but thing are totally different after applying the filter(or get date from \ndb via jdbc,or get formated data string from SimpleDateFormat). Because before \ntranslating,the \"s\" has been corrected encoded,so it's needn't do the above \ntranslation again. Right?\n   Sorry for my poor english,That's all what I can do to make you all read my \nmind. :)\n   Thanx again.\n   Shaw"}, {"count": 3, "tags": [], "bug_id": 3103, "attachment_id": null, "text": "I am tracing a problem that I encountered while using Tomcat related to \nURLEncoding.\nIf you pass the parameter in URL by performing java.net.URLEncoding(SOME-ZH_CN-\ncharacter set string ), Tom cat Failed to decode properly even if you pass the \ncontentType=\"text/html;charSet=gb2312\".\n\nIt seems to me the problem occured while encoding the URL parameters.\n1. Tomcat does the following in parsing the JSP pages:\n\n(RequestFacade:160)-return request.getParameter(name); \n   where name = \"jsp_precompile\"\n\ngetParameter ( String name ) performed \n(HTTPRequestBase:673- parseParameters();\nIn there all the URL parameter are decoded and stored/cached.\nAt this moment, RequestBase.getCharacterEncoding() always return null.\nNo encoding set, then default encoding are used. \n HTTPRequestBase:618 - encoding = \"ISO-8859-1\";\n\n2. The next step that TomCat does is to performed the following:\nsetContentType(String type); where type = \ntext/html;charset=gb2312\nThis will set the encoding to gb2312\n\n3. When JSP request the parameter by calling \n   request.getParameter(\"mygb2312string\");\nTomcat return the value from cache.\nThe result is unknown character : ???XX???\n\nSee my sample JSP to reproduce the problem at the end.\n\n-- Petrus Handoko\n\n============\nI think the problem exist regarless of JDBC\n>  But,If you added the contentType=\"text/html;charSet=gb2312\" tag into the \n>beginning of every jsp file,the chinese should be displayed correctly to \n>browser, because tomcat know that the encoding in it's core is  8859_1,and it \n>also know that the locale of PrintWriter(it's out object in jsp) is gb2312,so \n>the PrintWriter must do some  8859_1-->gb2312 translation inside.\n>  That's why we always adding contentType to resolve the chinese problem. \n>Right?\n>  Unfortunately,things are different while we fetching string from a database \n>via some jdbc driver.\n\n\n================Sample Test code=============================\n\n<%@ page session=\"false\" contentType=\"text/html;charset=gb2312\" %>\n<%@ page import=\"java.util.*\" %>\n<%@ page import=\"java.net.*\" %>\n<%@ page import=\"java.io.*\" %>\n<%@ page import=\"java.lang.*\" %>\n<html>\n<body>\n<BR><H2>URL encoded test </H2>\n<%\n\tString simplify_1\t= \"\u00d6\u00d0\u00b9\u00fa\u00d3\u00eb\u00c5\u00b7\u00c3\u00cb\u00d6\u00d8\u00bf\u00aa\u00ca\u00c0\u00c3\u00b3\u00cc\u00b8\u00c5\u00d0 \u00bd\u00b9\u00b5\u00e3\";\n\tString simplify_2\t= \"\u00c6\u00e4\u00cb\u00fb\u00d0\u00c2\u00ce\u00c5 \u00d1\u00c5\u00bb\u00a2\u00be\u00ab\u00d1\u00a1\";\n\tout.write(\" <BR>str 1 = \" + simplify_1 );\n\tout.write(\" <BR>str 2= \" + simplify_2 );\n\n\n\tEnumeration params = request.getParameterNames();\n\tif (params != null) {\n\t\tif ( params.hasMoreElements() )\n\t\t\tout.print(\"<BR><h3>Parameters found: </h3>\");\n\t\tfor ( ;  params.hasMoreElements();) {\n\t\t\tString name = params.nextElement().toString();\n\t\t\tString value = request.getParameter(name);\n\t\t\tout.write(\"<BR>\" + name + \" = \" + value + \"<BR>\");\n\t\t}\n\t}\n\tout.write(\"<BR><H3>Performed URL encoded on the strings using \njava.net.URLEncoded.encode()</h3>\" );\n\tString url1 = URLEncoder.encode(simplify_1);\n\tout.write(\"simplify_1 = \" + url1);\n\tString url2 = URLEncoder.encode(simplify_2);\n\tout.write(\"<BR>simplify_2 = \" + url2);\n%>\n<BR><BR>\n<A href=\"<%= request.getRequestURI() + \"?simplify_1=\" + url1 %>\"><%=simplify_1%>\n</A>\n<BR><A href=\"<%= request.getRequestURI() + \"?simplify_2=\" + url2 %>\"><%\n=simplify_2%>\n</A>\n<BR>\n</BODY>\n</HTML>\n===================Encode========================\n", "id": 4738, "time": "2001-08-22T11:33:51Z", "creator": "phandoko@broadvision.com", "creation_time": "2001-08-22T11:33:51Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 3103, "attachment_id": null, "text": "The contentType attribute in the <%@ page %> directive controls what character\nset will be used in the *response* of a JSP page (as well as the character set\nused to interpret Java literal Strings in scriptlets inside the page).  However,\nit does *not* affect the character set used to read request parameters.\n\nThe servlet and JSP specifications state that the default character encoding for\nrequest parameters is ISO_8859_1.  You can change this by calling\n\n  request.setCharacterEncoding(\"gb2312\");\n\nbefore calling request.getParameter() for the first time.\n\nWARNING:  Prior to Tomcat 4.0 nightly build 20010825, Jasper was incorrectly\ncalling request.getParameter() prior to executing your page, so that a call to\nsetCharacterEncoding() would have no effect.  This has been fixed.\n", "id": 4807, "time": "2001-08-24T17:13:49Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-08-24T17:13:49Z", "is_private": false}]
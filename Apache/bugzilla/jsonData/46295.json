[{"count": 0, "tags": [], "bug_id": 46295, "text": "Created attachment 22945\nExample Java program to test Java socket performance to a web server\n\nWhen using a program written in Java that uses Java sockets (java.io.Socket or java.nio.SocketChannel) the performance to Apache 2.2.x on a Windows server is very slow.\n\nRunning the web server on the same machine as the Java client and using 127.0.0.1 for the host connects very quickly, but downloading a large file of 31MB in size takes 5.9 seconds.\n\nUsing any web browser or wget (win32) on the same machine takes less than 1 second to download the file.  This would seem to indicate a bug in Java, but when I run the Java program from a Linux machine to the Windows server the same performance issue occurs.\n\nIf I run Apache 2.2.x on a Linux host then running the Java program from either Windows or on the same Linux machine takes under one second.\n\nIf I connect the Java program on the Windows machine to another non-Apache server on the same Windows machine it pulls data down in under 1 second.\n\nI believe there is some bug in the Windows code for Apache in regards to how it uses sockets.  This is not a DNS issue since the connection is established quickly.  The slowness comes during the actual data transfer.\n\n\nSteps to reproduce:\n\n1.  Windows XP SP3\n2.  Apache 2.2.10 for Win32 (default config from msi installer)\n3.  Create a 32MB file called LargeDownload.file in the root of your htdocs\n4.  Compile the attached Java program on the Windows machine using either Sun Java 5, Sun Java 6, or jrockit 1.5 (all 32-bit)\n5.  Run the Java program on the same Windows machine as where you have Apache running\n6.  Note that it takes ~5.9 seconds to download the file when it should take under one second.", "id": 122844, "time": "2008-11-25T09:18:59Z", "creator": "business2008@rodneybeede.com", "creation_time": "2008-11-25T09:18:59Z", "is_private": false, "attachment_id": 22945}, {"count": 1, "tags": [], "text": "Created attachment 22946\nModified to not send keep alive in HTTP request\n\nI've narrowed the issue down to the Windows build of Apache 2.2.x not closing the socket once it has transmitted all the contents.\n\nThe attached modified Java program leaves off the Keep-Alive and Connection: keepalive  request headers.  Apache should close the socket connection once it has transmitted all of the file, but it is not.\n\nIf I modify the request to an HTTP/1.0 request then Apache (win32) does close the socket once all of the data has been sent.\n\nHince the ~6 second delay is caused by Apache 2.2.x (win32) not closing the socket for a non-keepalive request.", "is_private": false, "id": 122845, "creator": "business2008@rodneybeede.com", "time": "2008-11-25T10:03:09Z", "bug_id": 46295, "creation_time": "2008-11-25T10:03:09Z", "attachment_id": 22946}, {"count": 2, "tags": [], "bug_id": 46295, "attachment_id": null, "is_private": false, "id": 122846, "time": "2008-11-25T10:07:47Z", "creator": "business2008@rodneybeede.com", "creation_time": "2008-11-25T10:07:47Z", "text": "I found the Connection: close  HTTP/1.1 header.\n\nIt runs out the Apache Jarakarta HTTPClient 3.1 library does not send this and is having performance issues due to how it is handling some headers.\n\nBy adding the \"Connection: close\" header to my example code the issue was fixed right away.\n\nThe one thing to note is that Apache 2.2.x on Linux seems to close the socket right away whereas on Windows it takes anywhere from 6-16 seconds."}]
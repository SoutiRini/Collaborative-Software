[{"count": 0, "tags": [], "bug_id": 53968, "is_private": false, "text": "When using org.apache.tomcat.jdbc.pool.DataSource and the no-arg constructor, the plaintext password of the connection is exposed via the JMX MBean via the dbProperties field.\n\nDataSource's superclass, org.apache.tomcat.jdbc.pool.DataSourceProxy, contains the following code which prevents the connection password from being exposed via JMX:\n\n    /**\n     * @return DOES NOT RETURN THE PASSWORD, IT WOULD SHOW UP IN JMX\n     */\n    @Override\n    public String getPassword() {\n        return \"Password not available as DataSource/JMX operation.\";\n    }\n\nHowever the implementation of setPassword() and getDbProperties() result in the password being exposed via JMX anyway:\n\n    @Override\n    public void setPassword(String password) {\n        this.poolProperties.setPassword(password);\n        this.poolProperties.getDbProperties().setProperty(\"password\",this.poolProperties.getPassword());\n    }\n\n    @Override\n    public Properties getDbProperties() {\n        return getPoolProperties().getDbProperties();\n    }\n\nWhen using the no-arg constructor of DataSource, the poolProperties field is set to an instance of PoolProperties, whose getDbProperties() returns the dbProperties (including the password) reference as-is. The ConnectionPool class however returns the dbProperties without the password field.\n\nThis seems inconsistent - steps are taken to prevent the password from being exposed in the getPassword() method but it is still exposed in the getDbProperties() method when using DataSource's no-arg constructor. \n\nIt seems like the password should be prevented from being exposed in both methods. Is there ever a use-case for exposing the password in the JMX MBean?", "id": 162574, "time": "2012-10-04T18:02:05Z", "creator": "matt.brown@citrixonline.com", "creation_time": "2012-10-04T18:02:05Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "text": "JMX is a tool for low-level administrative access, it has to be appropriate secured (like root on unixes). It exposes a lot, including passwords. They might be used by tools to write out configuration files for Tomcat.\n\n>   public String getPassword() {\n>       return \"Password not available as DataSource/JMX operation.\";\n>   }\n\nThe above implementation (introduced in r793732 ) is, in my opinion, wrong. It would be OK to expose the password there. I will leave the above method as is for now, as nobody asked for it to be implemented.\n\n(I'd be afraid of surprises such as a) some 3-rd party MBeans implementations that blindly enumerate and expose properties of an object, b) lazy toString() implementations, such as one fixed by bug 54599 ).\n\nClosing as WONTFIX.", "id": 166090, "time": "2013-03-22T10:07:42Z", "bug_id": 53968, "creation_time": "2013-03-22T10:07:42Z", "tags": [], "is_private": false}]
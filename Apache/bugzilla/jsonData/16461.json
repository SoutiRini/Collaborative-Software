[{"count": 0, "attachment_id": null, "bug_id": 16461, "is_private": false, "id": 30116, "time": "2003-01-27T16:53:55Z", "creator": "alexeys@inventigo.com", "creation_time": "2003-01-27T16:53:55Z", "tags": [], "text": "The problem was found in Jython by several programmers, but it looks like ORO's\nfault. I replaced Jython's ORO with ORO 2.0.7 - the result is the same.\n\n In the following test the first block matching\n([^\":]*?) contains quotas, but if expression is\n([^\":]*), it does not match at all. Greedy modifier\ncannot affect operation success.\n\nTest program:\n\nimport re\n\ns='\"file.name\" \"path/file\"'\ns2=re.sub(r'^\"([^\":]*)/([^\":/\\\\]*)\"', r'1 #\\1#\\n2#\\2#', s)\ns3=re.sub(r'^\"([^\":]*?)/([^\":/\\\\]*)\"', r'1 #\\1#\\n2#\\2#', s)\n\nprint\n\"s='\"+s+\"'\\n\\n============================\\ns2='\"+s2+\"'\\n\\n============================\\ns3='\"+s3+\"'\"\n\n\noutput (s2 is not changed - no match; s3's first block\ncontains quotas):\n\ns='\"file.name\" \"path/file\"'\n\n============================\ns2='\"file.name\" \"path/file\"'\n\n============================\ns3='1 #file.name\" \"path#\n2 #file#'"}, {"count": 1, "tags": [], "text": "Created attachment 4562\ntest case", "is_private": false, "id": 30117, "creator": "alexeys@inventigo.com", "time": "2003-01-27T16:54:40Z", "bug_id": 16461, "creation_time": "2003-01-27T16:54:40Z", "attachment_id": 4562}, {"count": 2, "attachment_id": null, "bug_id": 16461, "text": "I cannot reproduce the alleged problem.  If you think still think it's a bug\nin jakarta-oro, please submit sample Java code that reproduces the problem\nusing the org.apache.oro.text.regex package directly.  This is what I did to\ntry to reproduce the problem.  I used the following regular expression:\n\n^\"([^\":]*)/([^\":/\\\\]*)\"\n\nand the following input\n\n\"file.name\" \"path/file\"\n\nNever mind the substitution.  First we need to test if there is a\nmatch.  For example, using one of the example programs I tried:\n\njava matchResultExample '^\"([^\":]*)/([^\":/\\\\]*)\"' '\"file.name\" \"path/file\"'\n\nNo match was returned.  It is obvious why that is so.  The regular expression\ndoes not match any part of the input.  The reason it does not match any part\nof the input is because of the [^\"] rule and the \" at the end of file.name.\nNotice the results of the following two runs the first with different input\nand the second with the ^ removed:\n\njava matchResultExample '^\"([^\":]*)/([^\":/\\\\]*)\"' '\"file.name path/file\"'\n\nMatch: \"file.name path/file\"\nLength: 21\nGroups: 3\nBegin offset: 0\nEnd offset: 21\nGroups: \n1: file.name path\nBegin: 1\nEnd: 15\n2: file\nBegin: 16\nEnd: 20\n\njava matchResultExample '\"([^\":]*)/([^\":/\\\\]*)\"' '\"file.name\" \"path/file\"'\nMatch: \"path/file\"\nLength: 11\nGroups: 3\nBegin offset: 12\nEnd offset: 23\nGroups: \n1: path\nBegin: 1\nEnd: 5\n2: file\nBegin: 6\nEnd: 10\n\nConclusion: Either the regular expression used in the bug report was\nmisreported or the problem lies in a misconstructed regular expression.\nAgain, if you think still think it's a bug in jakarta-oro, please submit\nsample Java code that reproduces the problem using the\norg.apache.oro.text.regex package directly.  However, please discuss this\non the oro-dev mailing list first so we can verify that it is an issue\nbefore reporting it to bugzilla.  Otherwise we'll just be using bugzilla\nbug report comments as a substitute for the support mailing list.", "id": 30151, "time": "2003-01-28T04:38:02Z", "creator": "dfs@apache.org", "creation_time": "2003-01-28T04:38:02Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 16461, "is_private": false, "id": 32528, "time": "2003-03-06T03:47:30Z", "creator": "dfs@apache.org", "creation_time": "2003-03-06T03:47:30Z", "tags": [], "text": "Closing as issue was resolved over a month ago."}]
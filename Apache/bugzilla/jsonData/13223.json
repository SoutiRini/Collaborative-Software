[{"count": 0, "tags": [], "creator": "Joseph.Sinclair@Motorola.Com", "text": "When using the XML syntax for JSP pages, compile errors are thrown whenever an \nXML-syntax JSP tag is used to apply an attribute value as in this JSP page:\n____________________________________________________________________\nThis JSP fails:\n____________________________________________________________________\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\"\n          version=\"1.2\">\n<jsp:directive.page language=\"java\" import=\"java.text.*\" session=\"false\" \nisThreadSafe=\"true\" isErrorPage=\"false\"  />\n<jsp:scriptlet>\njava.text.Annotation recordDetails = new java.text.Annotation(\"This is a test \nvalue\");\npageContext.setAttribute(\"recordDetails\", recordDetails, \nPageContext.PAGE_SCOPE);\n</jsp:scriptlet>\n<html>\n<head>\n  <title><jsp:expression>System.getProperty(\"java.io.tmpdir\")\n</jsp:expression></title>\n</head>\n<body>\n  <table class=\"EntryFormContainer\" cols=\"6\" cellpadding=\"1\" cellspacing=\"1\" \nborder=\"0\">\n    <tr>\n      <td align=\"right\">Case ID:</td>\n      <td align=\"left\" colspan=\"7\"><input type=\"text\" name=\"caseID\" \nREADONLY=\"true\" value='<jsp:getProperty name=\"recordDetails\" \nproperty=\"value\" />' class=\"DisabledField\"/></td>\n    </tr>\n  </table>\n</body>\n</html>\n</jsp:root>\n\n\n____________________________________________________________________\nThis JSP works:\n____________________________________________________________________\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\"\n          version=\"1.2\">\n<jsp:directive.page language=\"java\" import=\"java.text.*\" session=\"false\" \nisThreadSafe=\"true\" isErrorPage=\"false\"  />\n<jsp:scriptlet>\njava.text.Annotation recordDetails = new java.text.Annotation(\"This is a test \nvalue\");\npageContext.setAttribute(\"recordDetails\", recordDetails, \nPageContext.PAGE_SCOPE);\n</jsp:scriptlet>\n<html>\n<head>\n  <title><jsp:expression>System.getProperty(\"java.io.tmpdir\")\n</jsp:expression></title>\n</head>\n<body>\n  <table class=\"EntryFormContainer\" cols=\"6\" cellpadding=\"1\" cellspacing=\"1\" \nborder=\"0\">\n    <tr>\n      <td align=\"right\">Case ID:</td>\n      <td align=\"left\" colspan=\"7\"><input type=\"text\" name=\"caseID\" \nREADONLY=\"true\" value=\"\" class=\"DisabledField\"/><jsp:getProperty \nname=\"recordDetails\" property=\"value\" /></td>\n    </tr>\n  </table>\n</body>\n</html>\n</jsp:root>\n\n____________________________________________________________________\nThis JSP also fails:\n____________________________________________________________________\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\"\n          version=\"1.2\">\n<jsp:directive.page language=\"java\" import=\"java.text.*\" session=\"false\" \nisThreadSafe=\"true\" isErrorPage=\"false\"  />\n<jsp:scriptlet>\njava.text.Annotation recordDetails = new java.text.Annotation(\"This is a test \nvalue\");\npageContext.setAttribute(\"recordDetails\", recordDetails, \nPageContext.PAGE_SCOPE);\n</jsp:scriptlet>\n<html>\n<head>\n  <title><jsp:expression>System.getProperty(\"java.io.tmpdir\")\n</jsp:expression></title>\n</head>\n<body>\n  <table class=\"EntryFormContainer\" cols=\"6\" cellpadding=\"1\" cellspacing=\"1\" \nborder=\"0\">\n    <tr>\n      <td align=\"right\">Case ID:</td>\n      <td align=\"left\" colspan=\"7\"><input type=\"text\" name=\"caseID\" \nREADONLY=\"true\" value='jsp:getProperty name=\"recordDetails\" property=\"value\"' \nclass=\"DisabledField\"/></td>\n    </tr>\n  </table>\n</body>\n</html>\n</jsp:root>\n\nSeveral additional variations on the above themes also fail.\nThe spec appears to support the first JSP example.  On the chance that I might \nhave misread the spec, I also tried it without the < and />, this variation \nalso fails.\nIt may be worth noting that this exact same example JSP works, as long as the \njsp:root tag is removed and the page, scriptlet, and expression tags are \nreplaced with their non-XML equivalents as follows:\n<%@page language=\"java\" import=\"java.text.*\" session=\"false\" \nisThreadSafe=\"true\" isErrorPage=\"false\" %>\n<%\njava.text.Annotation recordDetails = new java.text.Annotation(\"This is a test \nvalue\");\npageContext.setAttribute(\"recordDetails\", recordDetails, \nPageContext.PAGE_SCOPE);\n%>\n<html>\n<head>\n  <title><%=System.getProperty(\"java.io.tmpdir\")%></title>\n</head>\n<body>\n  <table class=\"EntryFormContainer\" cols=\"6\" cellpadding=\"1\" cellspacing=\"1\" \nborder=\"0\">\n    <tr>\n      <td align=\"right\">Case ID:</td>\n      <td align=\"left\" colspan=\"7\"><input type=\"text\" name=\"caseID\" \nREADONLY=\"true\" value='<jsp:getProperty name=\"recordDetails\" \nproperty=\"value\" />' class=\"DisabledField\"/></td>\n    </tr>\n  </table>\n</body>\n</html>\n\nIn summary, it appears that the XML syntax is not supported in attribute value \nassignment.\n\nThe exception thrown is as follows (Note the problem in property lookup, this \nmay be another, unrelated, bug).\n\ntype Exception report\n\nmessage \n\ndescription The server encountered an internal error () that prevented it from \nfulfilling this request.\n\nexception \n\norg.apache.jasper.JasperException: Unable to compile class for JSP\n\tat org.apache.jasper.JspCompilationContext.compile\n(JspCompilationContext.java:479)\n\tat org.apache.jasper.servlet.JspServletWrapper.service\n(JspServletWrapper.java:184)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile\n(JspServlet.java:289)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:240)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:260)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:191)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2396)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:172)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.coyote.tomcat4.CoyoteAdapter.service\n(CoyoteAdapter.java:223)\n\tat org.apache.coyote.http11.Http11Processor.process\n(Http11Processor.java:405)\n\tat \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:380)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:508)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:533)\n\tat java.lang.Thread.run(Thread.java:484)\n\n\nroot cause \n\njava.lang.NullPointerException\n\tat java.util.Hashtable.get(Hashtable.java:320)\n\tat java.util.PropertyResourceBundle.handleGetObject\n(PropertyResourceBundle.java:105)\n\tat java.util.ResourceBundle.getObject(ResourceBundle.java:376)\n\tat java.util.ResourceBundle.getString(ResourceBundle.java:354)\n\tat org.apache.jasper.compiler.ErrorDispatcher.getString\n(ErrorDispatcher.java:364)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch\n(ErrorDispatcher.java:398)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError\n(ErrorDispatcher.java:245)\n\tat org.apache.jasper.compiler.JspDocumentParser.parse\n(JspDocumentParser.java:167)\n\tat org.apache.jasper.compiler.ParserController.parse\n(ParserController.java:193)\n\tat org.apache.jasper.compiler.ParserController.parse\n(ParserController.java:153)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:219)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)\n\tat org.apache.jasper.JspCompilationContext.compile\n(JspCompilationContext.java:474)\n\tat org.apache.jasper.servlet.JspServletWrapper.service\n(JspServletWrapper.java:184)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile\n(JspServlet.java:289)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:240)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:260)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:191)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2396)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:172)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.coyote.tomcat4.CoyoteAdapter.service\n(CoyoteAdapter.java:223)\n\tat org.apache.coyote.http11.Http11Processor.process\n(Http11Processor.java:405)\n\tat \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:380)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:508)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:533)\n\tat java.lang.Thread.run(Thread.java:484)", "id": 23786, "time": "2002-10-02T21:25:42Z", "bug_id": 13223, "creation_time": "2002-10-02T21:25:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 13223, "is_private": false, "text": "This is a problem with the spec, not with Tomcat (see comments for bug 10683).\nThe exception you get seems indeed unrelated. Feel free to reopen the bug if you\nthink there's really a problem besides the known XML/attribute spec issue.\n(Note: I'm not a Tomcat developer, but I've spent quite some time fighting with\nthe XML syntax...)\n\n*** This bug has been marked as a duplicate of 10683 ***", "id": 23818, "time": "2002-10-03T10:18:57Z", "creator": "Andreas.Junghans@fh-karlsruhe.de", "creation_time": "2002-10-03T10:18:57Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 13223, "text": "  On reading the spec more closely, I do not agree with the comment that this \nis (entirely) a spec bug.  The spec, section 5.2.1 clearly states that the XML \nmodel supports a special attribute syntax for request-time expressions.  The \nspec in 5.3.11 clarifies what that syntax is.  The spec also clearly states, in \nsection 5.3.1 that only 2 transformations are performed to map a JSP page in \nXML syntax to the XML view of that page.  As far as the custom actions are \nconcerned, the fact that they work in the non-XML syntax, coupled with the \nSpec' expression that they are equally valid within the XML syntax, implies \nthat they should work in the same manner.\n  Granted, the spec is unclear as to how non-expression items should be handled \nin XML syntax for attribute values, and this should be brought to the \nspecification lead's attention, but it would seem reasonable to have Tomcat \neither document an expected manner of handling them (perhaps replacing the <> \nwith &lt; and &gt;) and permit this usage while the spec group works out how \nthis mechanism should be handled...\n\nIf Tomcat is to be fully compliant with JSP 1.2, at the very least the \nspecified XML expression syntax (attribute='%=item.getValue%') should be \nsupported; as it is even this path is closed(the page processor completely \nignores the expression and passes it through unprocessed).\n\nAs a maximally useful tool, Tomcat would be best with the mechanism for \nhandling standard actions within attribute values in the JSP syntax linked into \nthe processing path for the XML syntax until the 1.2 spec can be clarified (or \nthe issue is resolved in JSP 2.0).\n\nThe notes on the similar bug 10683 indicate that something was brought up to \nthe Spec group, but no response was heard. Since Tomcat is considered the \nreference implementation for the spec; would it perhaps be wise to keep a \nseparate low-priority bug open here to ensure that the specification issue is \ntracked to resolution(and the clarification implemented) and to help regularly \nremind the specification group of the problem?", "id": 23850, "time": "2002-10-03T18:15:40Z", "creator": "Joseph.Sinclair@Motorola.Com", "creation_time": "2002-10-03T18:15:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 13223, "is_private": false, "text": "Created attachment 3337\nHere's an additional test case for the expression syntax.", "id": 23851, "time": "2002-10-03T18:16:48Z", "creator": "Joseph.Sinclair@Motorola.Com", "creation_time": "2002-10-03T18:16:48Z", "attachment_id": 3337}, {"count": 4, "text": "1. The first test case is not a valid XML document.  XML disallows another tag\nin the value for an attribute.  For instance, this is illegal:\n\n\t<foo value='<bar/>' />\n\nTherefore you cannot use <jsp:getProperty> as the attribute to <td>\n\n2. Spec is clear about only supporting expressions in custom tags and standard\nactions, but not in other tags.  This 'hole' has been plugged in JSP2.0, which\nTomcat 5 implements.  You can now use\n\n\t<td >\n\t    <jsp:attribute name=\"value:>\n\t\t<jsp:expression>foo</jsp:expression>\n\t    </jsp:attribute>\n\t</td>\nto specify an expression as the attribute value.", "bug_id": 13223, "is_private": false, "id": 23854, "time": "2002-10-03T18:43:37Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-10-03T18:43:37Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "text": "Unfortunately, the hole is not plugged by JSP 2.0! From the spec (emphasis by me):\n\n\"The <jsp:attribute> standard action allows the page author to define the value\nof a ***tag handler*** attribute in the body of an XML element instead of in the\nvalue of an XML attribute. The action may only appear as a subelement of a\n***standard or custom action*** invocation.\"\n(Source: jsp-2_0-prd-spec.pdf, JSP.5.10, page 133)\n\nIf I'm not completely mistaken, <jsp:attribute> is just a way of avoiding \"%=\n... %\". The spec quote above clearly states that <jsp:attribute> cannot be used\nfor \"ordinary\" XML tags (i.e. body content in contrast to standard or custom\nactions). Thus, I think Kin-Man's example (dynamically setting the attribute of\na <td>-Tag) is invalid. Also, all examples for <jsp:attribute> in the spec refer\nto a custom action. If what you suggest really works in Tomcat 5, then Tomcat is\n(unfortunately) wrong.\n\nI sent a message about this to jsp-spec-comments@eng.sun.com some time ago, but\nnever got an answer. Maybe it would help if a Tomcat developer brought this up\nonce again (Kin-Man?)... This is a _very annoying, very ugly_ spec issue IMHO.\nEither you don't use the XML syntax, or you're forced to use strange and/or\nhard-to-implement workarounds. Oh well, I will stop ranting now ;-)", "is_private": false, "id": 23864, "creation_time": "2002-10-03T20:54:24Z", "time": "2002-10-03T20:54:24Z", "creator": "Andreas.Junghans@fh-karlsruhe.de", "bug_id": 13223, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 13223, "text": "Ah, but your are referring to a spec that's already out of date!  The latest\nversion, yet to be made public, allows <jsp:attribute> to be used for any\nattribute values; and this is implemented in Tomcat 5.\n\nUnfortunately, XML part in the spec is not quite complete, and Tomcat 5 is very\nbroken in this aspect also, so I don't know if <jsp:attribute> (in XML) works\nthe way it should.", "id": 23869, "time": "2002-10-03T22:49:10Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-10-03T22:49:10Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 13223, "text": "Sorry, I mispoke.  I checked with JSP spec lead and Andreas is right that\n<jsp:attribut> cannot be used in the way I described, per JSP.5.10.  However,\nthis can be used instead.\n\n        <jsp:element name=\"td\">\n            <jsp:attribute name=\"value:>\n                <jsp:expression>foo</jsp:expression>\n            </jsp:attribute>\n        </jsp:element>", "id": 24214, "time": "2002-10-09T16:57:19Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-10-09T16:57:19Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 13223, "attachment_id": null, "is_private": false, "id": 24303, "time": "2002-10-10T17:57:19Z", "creator": "Andreas.Junghans@fh-karlsruhe.de", "creation_time": "2002-10-10T17:57:19Z", "text": "I assume <jsp:element> is defined in a newer version of the spec than the\npublicly available 2.0 PFD? I couldn't find it anywhere. Although using\n<jsp:element> seems a bit cumbersome, it's definitely a great improvement over\nJSP 1.2!"}]
[{"attachment_id": 32426, "tags": [], "creator": "apache.org@tech.futurequest.net", "is_private": false, "count": 0, "id": 180709, "time": "2015-02-02T23:57:11Z", "bug_id": 57525, "creation_time": "2015-02-02T23:57:11Z", "text": "Created attachment 32426\nap_macros initialization patch\n\nUpon Apache 2.4.12 (or 2.4.10) termination, glibc reports a corrupted double-linked list.\n============\n*** Error in `/usr/sbin/httpd': corrupted double-linked list: 0x5674b738 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x76120)[0xf7b8d120]\n/lib/libc.so.6(+0x7ccb1)[0xf7b93cb1]\n/lib/libc.so.6(+0x7db6b)[0xf7b94b6b]\n/usr/lib/libapr-1.so.0(apr_allocator_destroy+0x130)[0xf7d51fa9]\n/usr/lib/libapr-1.so.0(apr_pool_destroy+0x140)[0xf7d52d84]\n/usr/lib/libapr-1.so.0(apr_pool_terminate+0x82)[0xf7d52867]\n/usr/lib/libapr-1.so.0(apr_terminate+0x3b)[0xf7d56099]\n/usr/sbin/httpd(+0x2cb90)[0x56581b90]\n/usr/sbin/httpd(main+0x1056)[0x56583792]\n/lib/libc.so.6(__libc_start_main+0xf4)[0xf7b34224]\n/usr/sbin/httpd(+0x2c691)[0x56581691]\n======= Memory map: ========\n56555000-5666a000 r-xp 00000000 fd:07 11482                              /usr/sbin/httpd\n5666a000-5666e000 r--p 00115000 fd:07 11482                              /usr/sbin/httpd\n5666e000-56671000 rw-p 00119000 fd:07 11482                              /usr/sbin/httpd\n56671000-567db000 rw-p 00000000 00:00 0                                  [heap]\n============\n\nApache 2.4.10 and 2.4.12 were both built from source on a Gentoo hardened system.\n\nI tracked it down to a use-after-clear (cmd->temp_pool) bug on (lazy initialization) of ap_macros.\n\nI have attached a patch that fixes the problem and have confirmed that the APR memory pool apr_global_pool->allocator->free[1] list is no longer corrupted.\n\n--\nTerra\nhttp://www.FutureQuest.net"}, {"count": 1, "tags": [], "bug_id": 57525, "attachment_id": null, "id": 180717, "time": "2015-02-03T10:43:37Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-03T10:43:37Z", "is_private": false, "text": "Thanks for the report and patch.\n\nA slightly different version was committed in r1656669."}, {"count": 2, "tags": [], "text": "Backport to 2.4.x proposed in r1656674.", "attachment_id": null, "bug_id": 57525, "id": 180719, "time": "2015-02-03T10:51:07Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-03T10:51:07Z", "is_private": false}, {"count": 3, "tags": [], "text": "Thank you Yann for your fast response as well as quickly pushing a resolution into the tree, it is much appreciated!  I look forward to seeing the backported patch for Apache 2.4.x.", "attachment_id": null, "bug_id": 57525, "id": 180738, "time": "2015-02-03T16:26:50Z", "creator": "apache.org@tech.futurequest.net", "creation_time": "2015-02-03T16:26:50Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57525, "is_private": false, "text": "Backported to upcoming 2.4.13.", "id": 181433, "time": "2015-03-02T11:24:01Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-03-02T11:24:01Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 57525, "is_private": false, "id": 200417, "time": "2017-08-22T15:10:40Z", "creator": "jose@w3.org", "creation_time": "2017-08-22T15:10:40Z", "tags": [], "text": "Before this patch was applied, it was possible to define macros in the main server configuration and reuse them inside .htaccess. After the patch, server returns a 500 whenever it finds such a macro definition.\n\nScenario: define a macro and store it under conf-enabled/macros.conf:\n<Macro foo>\n # just a comment, but could be any valid directive\n</Macro>\n\nIn a directory that has a resource you can normally access, add an .htaccess that refers to the macro:\n\n.htaccess:\n\nUse foo\n\nIf you browse that URL, the server now returns an HTTP 500.\n\nThis behavior comes from clearing the macros in macro_pre_config() commited in r1656669 :\n[[\nap_macros = NULL;\n]]\n\nThat function is probably being called each time .htaccess are evaluated and clearing the existing macro definitions.\n\nWhen I commented it in the source code and recompiled, the previous behavior was restored.\n\nThis error appeared when migrating from debian jessie to stretch. Although stretch is using 2.4.25, the code in mod_macros predates that so it's probable the same bug can be reproduced in the latest apache. The changelog doesn't report any related change since for that module.\n\nI'm marking this as a regression."}, {"count": 6, "tags": [], "bug_id": 57525, "is_private": false, "text": "I did some further tests under gdb.\n\nAs the code shows, the macro module commands are marked as EXEC_ON_READ. This means that they are processed even before the preconfig hook is run. As a result, the definition of the macros only exists for the main configuration. \n\n@Yann patch deletes the macros right after, when the preconfig hook is run.\n@Terra's patch does the same, when the temp_pool is deleted.\n\nIn both cases, the macro definition doesn't exist anymore when they are used in a .htaccess file. The error logs shows in this case. This is a regression compared to previous pre-patched behavior.\n\nThe behavior that @Terra first reported is triggered because we're using a macro_section() is initialization ap_macros using cmd->temp_pool, which is used after being freed. If these macros need to be keep alive throughout in order to be used in .htaccess files, why the code is not using cmd->pool instead? \n\nJust for curiosity, I tried to do this change with @Terra's patch and the regression went away.", "id": 200544, "time": "2017-08-31T15:50:14Z", "creator": "jose@w3.org", "creation_time": "2017-08-31T15:50:14Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "Created attachment 35472\nRevert pre_config hook and fix lazy initialization\n\nThanks Jos\u00e9 for the analysis, the pre_config hook indeed kills further use of macros (.htaccess), and lazy initialization must not use the temporary pool too.\n\nDoes this patch work for you?", "attachment_id": 35472, "id": 201734, "creator": "ylavic.dev@gmail.com", "time": "2017-10-27T15:08:30Z", "bug_id": 57525, "creation_time": "2017-10-27T15:08:30Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57525, "attachment_id": null, "is_private": false, "id": 201761, "time": "2017-10-28T16:12:16Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-10-28T16:12:16Z", "text": "Committed in r1813643 and proposed for backport to 2.4.x."}, {"text": "(In reply to Yann Ylavic from comment #7)\n> Created attachment 35472 [details]\n> Revert pre_config hook and fix lazy initialization\n> \n> Thanks Jos\u00e9 for the analysis, the pre_config hook indeed kills further use\n> of macros (.htaccess), and lazy initialization must not use the temporary\n> pool too.\n> \n> Does this patch work for you?\n\nHello Yann,\n\nThank you. The patch works as expected in my installation. Our testsuite didn't find any issue with it. I like the elegant ap in-built functions way you did it, without having to define a new function.\n\nOne question. Would doing the following ap_assert be overkill in the lazy initialization?\n\nelse {\n ap_assert(ap_macros != NULL)\n pool = apr_hash_pool_get(ap_macros);\n}", "tags": [], "creator": "jose@w3.org", "is_private": false, "count": 9, "id": 201791, "time": "2017-10-30T14:44:02Z", "bug_id": 57525, "creation_time": "2017-10-30T14:44:02Z", "attachment_id": null}]
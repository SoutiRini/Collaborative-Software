[{"count": 0, "tags": [], "bug_id": 40091, "attachment_id": null, "text": "I have a Swing program that tries to load several SVG documents\nusing several JSVGCanvases at the same time. These images all\nhave within them some <image> tags that import the same other\nexternal SVG documents.\n\nSample import:\n\n<image x=\"2214.0\" y=\"9.0\" transform=\"scale(0.5)\"\n  width=\"313.0\" xlink:href=\"../images/logo1.svg\"\n  height=\"163.0\" preserveAspectRatio=\"xMaxYMax meet\"/>\n\nWhen loading these documents at the same time, it appears there is\nsome sort of race condition that causes the exception below from\nall the images, and they all fail to load.\n\nNote that the <image>'s URL references an SVG file, so I'm not\nsure why Toolkit.createImage() is being used (as it appears) but\nI don't understand the inner workings.\n\n2006-07-11 19:31:56,991 [AWT-EventQueue-0] ERROR: BasicUserAgent Error:\norg.apache.batik.bridge.BridgeException:\nhttp://test1.example.com/maps/map1.svg.gz:-1\nThe URI \"http://test1.example.com/imgs/../test/logo1.svg\"\non element <image> can't be opened because:\nJDK URL is corrupt or unsupported variant\n        at\norg.apache.batik.swing.svg.JSVGComponent$BridgeUserAgent.getBrokenLinkDocument(Unknown\nSource)\n        at org.apache.batik.swing.svg.JSVGComponent$26Query.run(Unknown Source)\n        at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:199)\n        at java.awt.EventQueue.dispatchEvent(EventQueue.java:461)\n        at\njava.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:242)\n        at\njava.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:163)\n        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:157)\n        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:149)\n        at java.awt.EventDispatchThread.run(EventDispatchThread.java:110) \n\nNotes:\n\n- This only occurs when multiple JSVGCanvases are attempting to load and build\ntheir documents at the same time.\n- This only occurs when the imported file is SVG. When I rasterize it to PNG and\nimport that instead, the problem goes away.\n\nThis seems like it must be a bug in Batik's document caching subsystem.", "id": 91473, "time": "2006-07-21T20:22:50Z", "creator": "archie@dellroad.org", "creation_time": "2006-07-21T20:22:50Z", "is_private": false}, {"count": 1, "tags": [], "text": "Does this problem still occur?  If so, could you provide a small standalone\ntest?  The document caching code does synchronise on accesses to the cache, so\nit's not immediately obvious to me where the problem lies.", "attachment_id": null, "id": 108550, "creator": "cam@apache.org", "time": "2007-09-24T19:19:54Z", "bug_id": 40091, "creation_time": "2007-09-24T19:19:54Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 40091, "attachment_id": null, "text": "I haven't seen this happen lately; however, a very similar problem was just\nreported today on the batik-users mailing list... perhaps this could be another\nmanifestation of the same problem?\n\nNote this posting seems to imply a simple way to reproduce the bug:\n\nhttp://mail-archives.apache.org/mod_mbox/xmlgraphics-batik-users/200709.mbox/%3c759ff3b10709250407y6949716aq9397fe9bbff611bf@mail.gmail.com%3e", "id": 108575, "time": "2007-09-25T07:33:18Z", "creator": "archie@dellroad.org", "creation_time": "2007-09-25T07:33:18Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40091, "text": "I can confirm that this bug still occurs.  I get the 'URL is corrupt or unsupported variant' error when I have a transparent png between 7.32mb and 7.79mb.  Every png under 7.32mb worked.  Bumping the size up just a bit to 7.79mb caused batik to fail.  All of my tests seemed to show the issue was size related.", "id": 115469, "time": "2008-04-09T12:55:41Z", "creator": "beebe@big-images.com", "creation_time": "2008-04-09T12:55:41Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "My suspcion is that you are simply running out of memory.\nHow large (in pixels) is the PNG image?\nBy default Java only allows it's self to allocate ~64MB\nof memory.  This can be changed with the -Xmx command line\noption to java.", "creator": "deweese@apache.org", "attachment_id": null, "id": 115583, "time": "2008-04-14T05:22:40Z", "bug_id": 40091, "creation_time": "2008-04-14T05:22:40Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 40091, "text": "I have noticed that Batik takes ALOT of memory, so comment # 3 above occurred with batik having 1 GB of memory allocated to it.  The PNG was 5184px x 2592px. (In reply to comment #4)\n> My suspcion is that you are simply running out of memory.\n> How large (in pixels) is the PNG image?\n> By default Java only allows it's self to allocate ~64MB\n> of memory.  This can be changed with the -Xmx command line\n> option to java.\n> ", "id": 115591, "time": "2008-04-14T08:17:44Z", "creator": "beebe@big-images.com", "creation_time": "2008-04-14T08:17:44Z", "is_private": false, "attachment_id": null}]
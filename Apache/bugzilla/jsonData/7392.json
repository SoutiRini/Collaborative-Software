[{"count": 0, "tags": [], "bug_id": 7392, "is_private": false, "id": 12212, "attachment_id": null, "creator": "ddubinsky@salmonllc.com", "creation_time": "2002-03-23T17:09:21Z", "time": "2002-03-23T17:09:21Z", "text": "A Taglib body tag that doesn't have a body doesn't execute properly. The \ngenerated servlet treats it as an empty tag and doesn't call the doAfterBody \nmethod. \n\nFor example, lets say you have a tag that mimics the HTML input tag where \nsometimes the tag must be empty and sometimes it must have a body:\n\nex:\n\n<custom:input type=\"select\">\n <custom:options....>\n</custom:input>\n\nor \n\n<custom:input type=\"submit\" value=\"click me\"></custom:input>\n\nThe second example doesn't generate proper JSP code in the servlet. It only \ncalls the doStartTag method and not the doAfterBody method. A work around is to \ncode it like this:\n\n<custom:input type=\"submit\" value=\"click me\">&nbsp;</custom:input>\n\nor\n\n<custom:input type=\"submit\" value=\"click me\"/>\n\nThe first option would be kind of strange to explain to folks using the taglib. \nThe second option is nicer, but it doesn't work in other JSP environments where \na body tag must have a body and an empty tag must be empty (Bea Weblogic in \nparticular) and so the generated JSP stops being portable. Also, the syntax\n\n<custom:input type=\"submit\" value=\"click me\"></custom:input>\n\nworked fine in Tomcat 3. This is a major bug for me because I have a tool that \ngenerates JSP code that I will have to rework unless I can get a fix and my \nchoices for what I can generate are limited to the \"ugly\" option:\n\n<custom:input type=\"submit\" value=\"click me\">&nbsp;</custom:input>"}, {"count": 1, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "id": 12505, "time": "2002-03-29T21:23:40Z", "bug_id": 7392, "creation_time": "2002-03-29T21:23:40Z", "is_private": false, "text": "In a xml document, <tag ... /> and <tag ...></tag> both represent an empty\nelement and are syntatically equivalent (see\nhttp://www.w3.org/TR/REC-xml#NT-ETag).  I doubt that you can use the first form\nas a workaround to your problm, while the second form fails.  In both cases,\ndoAfterBody will not be invoked, for an empty tag.\n\nA easy workaround is to insert a space or '\\n' between the Stag and Etag:\n\n\t<custom:input type=\"submit\" value=\"click me\"> </custom:input>\nor\n\t<custom:input type=\"submit\" value=\"click me\">\n\t</custom:input>\n\nBTW, why can't you use doEnTag instead of doAfterBody for empty tags?"}, {"count": 2, "text": "Tools (Dreamweaver in particular) sometimes interprets the space or the line \nfeed as white space and removes it when you do a code format. This is how the \nproblem came up. Somebody did a code format and all their input fields \ndisappeared.\n\nAlso it's hard to explain to people using our tag library that\n<tag> </tag> will work and <tag></tag> won't.\n\nThis is a big problem for me. If I hack through the Jasper code and fix it \nmyself, would you consider incorporating the change into the official version.", "bug_id": 7392, "is_private": false, "id": 12507, "time": "2002-03-29T21:39:57Z", "creator": "ddubinsky@salmonllc.com", "creation_time": "2002-03-29T21:39:57Z", "tags": [], "attachment_id": null}, {"count": 3, "text": "JSP.10.1 says:\n\n\"   Empty and Non-Empty Actions\n    An empty action has no body; it may use one of the two syntaxes: either\n<foo/> or <foo></foo>.  Since empty actions have no body the methods related to\nbody manipulation are not invoked.\"\n\nIt is pretty clear that doAfterBody should not be invoked for empty tags. \nPeriod.\n\nYou should not be doing things in doAfterBody for tags that are empty, in the\nfirst place.  Like I suggested, try doing what you want in doEndTag instead.", "bug_id": 7392, "is_private": false, "id": 12512, "time": "2002-03-29T22:00:54Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-03-29T22:00:54Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 7392, "is_private": false, "text": "There is a possibility where the tag may not have a body. In that case the jsp \nhas been coded as a valid empty tag. But this Means that doAfter body will \nnever be called. And when the tag handler returns the content to be placed as \nbody, it will be never able to do so, inspite of the tag definition being the \nright xml.", "id": 28134, "time": "2002-12-20T21:22:20Z", "creator": "vsharan@hotmail.com", "creation_time": "2002-12-20T21:22:20Z", "attachment_id": null}, {"count": 5, "text": "All the tag handler lifecycle methods have been clarified in the\nupcoming JSP 2.0 spec.\n\nThe latest javax.servlet.jsp.tagext.BodyTag, available from\njakarta-servletapi-5/jsr152, has this:\n\n * <p>Note that which methods are invoked after the doStartTag() depends on \n * both the return value and on if the custom action element is empty\n * or not in the JSP page, not how it's declared in the TLD.\n *\n * <p>\n * If SKIP_BODY is returned the body is not evaluated, and doEndTag() is\n * invoked.\n *\n * <p>\n * If EVAL_BODY_INCLUDE is returned, and the custom action element is not\n * empty, setBodyContent() is not invoked,\n * doInitBody() is not invoked, the body is evaluated and\n * \"passed through\" to the current out, doAfterBody() is invoked\n * and then, after zero or more iterations, doEndTag() is invoked.\n * If the custom action element is empty, only doStart() and \n * doEndTag() are invoked.\n *\n * <p>\n * If EVAL_BODY_BUFFERED is returned, and the custom action element is not\n * empty, setBodyContent() is invoked,\n * doInitBody() is invoked, the body is evaluated, doAfterBody() is\n * invoked, and then, after zero or more iterations, doEndTag() is invoked.\n * If the custom action element is empty, only doStart() and doEndTag() \n * are invoked.\n\nThis means that if doStartTag() returns SKIP_BODY, or if it returns\nEVAL_BODY_INCLUDE or EVAL_BODY_BUFFERED and the custom action element\nis empty, doAfterBody() will *NOT* be invoked.\n\nPlease do not reopen this bug, as what you are requesting contradicts the JSP\nspec. Place your logic in doEndTag() instead.", "bug_id": 7392, "attachment_id": null, "id": 33885, "time": "2003-03-27T02:24:23Z", "creator": "jan.luehe@sun.com", "creation_time": "2003-03-27T02:24:23Z", "tags": [], "is_private": false}]
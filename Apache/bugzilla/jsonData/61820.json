[{"count": 0, "tags": [], "bug_id": 61820, "attachment_id": null, "text": "In http_filters:ap_http_header_filter, 304 responses get special treatment, in that they're sent with only a fixed set of headers (if present):\n\n1414\t    if (r->status == HTTP_NOT_MODIFIED) {\n1415\t        apr_table_do((int (*)(void *, const char *, const char *)) form_header_field,\n1416\t                     (void *) &h, r->headers_out,\n1417\t                     \"Connection\",\n1418\t                     \"Keep-Alive\",\n1419\t                     \"ETag\",\n1420\t                     \"Content-Location\",\n1421\t                     \"Expires\",\n1422\t                     \"Cache-Control\",\n1423\t                     \"Vary\",\n1424\t                     \"Warning\",\n1425\t                     \"WWW-Authenticate\",\n1426\t                     \"Proxy-Authenticate\",\n1427\t                     \"Set-Cookie\",\n1428\t                     \"Set-Cookie2\",\n1429\t                     NULL);\n1430\t    }\n\n<https://svn.apache.org/viewvc/httpd/httpd/trunk/modules/http/http_filters.c?revision=1777672&view=markup#l1414>\n\nThis means that any header value that a generator (whether CGI, an upstream origin via mod_proxy, etc.) updates in a 304 will be lost.\n\nRFC7234 specifies how headers on a 304 are supposed to be handled:\n  http://httpwg.org/specs/rfc7234.html#freshening.responses\n\nThis has caused interoperability problems in the wild, e.g.,:\n  https://github.com/hueniverse/hawk/issues/224", "id": 202421, "time": "2017-11-26T23:19:24Z", "creator": "mnot@mnot.net", "creation_time": "2017-11-26T23:19:24Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 61820, "attachment_id": null, "text": "Hi Mark, I think some of the lack of action on this is related to this text:\n\nhttps://tools.ietf.org/html/rfc7232#section-4.1\n\nThe server generating a 304 response MUST generate any of the\n   following header fields that would have been sent in a 200 (OK)\n   response to the same request: Cache-Control, Content-Location, Date,\n   ETag, Expires, and Vary.\n...\n\nSince the goal of a 304 response is to minimize information transfer\n   when the recipient already has one or more cached representations, a\n   sender SHOULD NOT generate representation metadata other than the\n   above listed fields unless said metadata exists for the purpose of\n   guiding cache updates (e.g., Last-Modified might be useful if the\n   response does not have an ETag field).\n\n\n7230 lists a few \"representation metadata\" but I'm not sure it's meant to be exhaustive, so it's difficult to whitelist or blacklist it.  Any advice on how we differentiate here?\n\n3.1.  Representation Metadata\n\n   Representation header fields provide metadata about the\n   representation.  When a message includes a payload body, the\n   representation header fields describe how to interpret the\n   representation data enclosed in the payload body.  In a response to a\n   HEAD request, the representation header fields describe the\n   representation data that would have been enclosed in the payload body\n   if the same request had been a GET.\n\n   The following header fields convey representation metadata:\n\n   +-------------------+-----------------+\n   | Header Field Name | Defined in...   |\n   +-------------------+-----------------+\n   | Content-Type      | Section 3.1.1.5 |\n   | Content-Encoding  | Section 3.1.2.2 |\n   | Content-Language  | Section 3.1.3.2 |\n   | Content-Location  | Section 3.1.4.2 |\n   +-------------------+-----------------+", "id": 202435, "time": "2017-11-28T03:35:57Z", "creator": "covener@gmail.com", "creation_time": "2017-11-28T03:35:57Z", "is_private": false}, {"count": 2, "tags": [], "creator": "mnot@mnot.net", "attachment_id": null, "id": 202440, "time": "2017-11-28T07:02:18Z", "bug_id": 61820, "creation_time": "2017-11-28T07:02:18Z", "is_private": false, "text": "The key word here is \"generate.\" The problem is that when the 304 is being generated elsewhere -- whether by a CGI handler or by an upstream server -- it has authority to decide what headers to include.\n\nI think this could be addressed by removing the code here and imposing this kind of filtering (if necessary) where Apache actually generates a 304 as part of handling a conditional request itself (e.g., from cache, from disk, but not from CGI, etc.)."}]
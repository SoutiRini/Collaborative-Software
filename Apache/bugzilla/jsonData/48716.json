[{"count": 0, "tags": [], "text": "When using Tomcat embedded in conjunction with default JDK logging, any removal of a StandardContext instance from the Host container will lead to a reset of all JDK logging configuration.\n\nThis is due to \n\nStandardContext.stop() \n\ncalling \n\nWebappLoader.stop() \n\ncalling \n\norg.apache.juli.logging.LogFactory.release(ClassLoader) \n\nwhich in turn calls \n\nLogManager.getLogManager().reset();\n\nand the fact that, when using JDK logging, LogManager.getLogManager returns the default log manager rather that JULI's log manager. \n\nSuggestion: Check whether the log manager is actually JULI's.", "attachment_id": null, "bug_id": 48716, "id": 134375, "time": "2010-02-09T14:29:26Z", "creator": "henning.blohm@gmail.com", "creation_time": "2010-02-09T14:29:26Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "text": "If you use the standard LogManager then you are going to get memory leaks. You need to be using JULI or another LogManager implementation that is class loader aware.\n\nIf this call is only used with JULI then other class loader aware LogManager implementations will have no opportunity to clean up.\n\nOn the basis that there may be some valid embedded use cases where you do need to disable the call to reset(), then a better approach is probably to make this configurable, with the default that the call takes place.", "id": 134389, "time": "2010-02-10T01:43:42Z", "bug_id": 48716, "creation_time": "2010-02-10T01:43:42Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48716, "is_private": false, "id": 134390, "creation_time": "2010-02-10T01:57:51Z", "time": "2010-02-10T01:57:51Z", "creator": "henning.blohm@gmail.com", "text": "Mark,\n\nif JULI would test for its implementation of LogManager, it would work as it does now by default and would not create further harm in cases where it does not own the LogManager.\n\nIf my web apps use JDK Logging as well (and say do not register handlers and your own levels or so), what memory leaks would I need to expect (except that logger names will not be released)? Can elaborate on that please?\n\nThanks, \n  Henning", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48716, "attachment_id": null, "text": "> if JULI would test for its implementation of LogManager, it would work as it\n> does now by default and would not create further harm in cases where it does\n> not own the LogManager.\n\nUsing the standard LogManager causes harm. Again, removing this call provides no opportunity for class loader aware LogManagers (including but not limited to JULI) to do the correct clean-up.\n\n> If my web apps use JDK Logging as well (and say do not register handlers and\n> your own levels or so), what memory leaks would I need to expect (except that\n> logger names will not be released)? Can elaborate on that please?\n\nThat is a question for the users mailing list, not Bugzilla.", "id": 134392, "time": "2010-02-10T02:08:45Z", "creator": "markt@apache.org", "creation_time": "2010-02-10T02:08:45Z", "is_private": false}, {"count": 4, "tags": [], "creator": "henning.blohm@gmail.com", "attachment_id": null, "id": 134393, "time": "2010-02-10T02:18:54Z", "bug_id": 48716, "creation_time": "2010-02-10T02:18:54Z", "is_private": false, "text": "(In reply to comment #3)\n> > if JULI would test for its implementation of LogManager, it would work as it\n> > does now by default and would not create further harm in cases where it does\n> > not own the LogManager.\n> \n> Using the standard LogManager causes harm. Again, removing this call provides\n> no opportunity for class loader aware LogManagers (including but not limited to\n> JULI) to do the correct clean-up.\n> \n\nI didn't say that the call should be removed. I suggested to make it smarter, so that it will not reset the default LogManager. As I am not a developer with JULI or Tomcat for that matter, I do not want to go beyond describing the problem though.\n\n> > If my web apps use JDK Logging as well (and say do not register handlers and\n> > your own levels or so), what memory leaks would I need to expect (except that\n> > logger names will not be released)? Can elaborate on that please?\n> \n> That is a question for the users mailing list, not Bugzilla.\n\nWell thanks. There is a POST on the mailing list regarding this issue."}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 134416, "time": "2010-02-10T23:39:32Z", "bug_id": 48716, "creation_time": "2010-02-10T23:39:32Z", "is_private": false, "text": "Fixed in trunk and proposed for 6.0.x. Given the potentially nasty side-effects in nearly all use cases, it is deliberately undocumented."}, {"count": 6, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 134431, "time": "2010-02-11T14:04:05Z", "bug_id": 48716, "creation_time": "2010-02-11T14:04:05Z", "is_private": false, "text": "For reference: the current users@ thread discussing this:\nhttp://marc.info/?t=126558517300003&r=1&w=2"}, {"count": 7, "tags": [], "bug_id": 48716, "attachment_id": null, "text": "This has been fixed in 6.0.x and will be included in 6.0.25 onwards.", "id": 134845, "time": "2010-02-23T23:47:48Z", "creator": "markt@apache.org", "creation_time": "2010-02-23T23:47:48Z", "is_private": false}, {"count": 8, "tags": [], "creator": "markt@apache.org", "text": "*** Bug 49792 has been marked as a duplicate of this bug. ***", "id": 139326, "time": "2010-08-22T09:34:08Z", "bug_id": 48716, "creation_time": "2010-08-22T09:34:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 139328, "time": "2010-08-22T09:34:36Z", "bug_id": 48716, "creation_time": "2010-08-22T09:34:36Z", "is_private": false, "text": "*** Bug 49791 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "bug_id": 48716, "is_private": false, "id": 139331, "creation_time": "2010-08-22T10:02:08Z", "time": "2010-08-22T10:02:08Z", "creator": "postmaster@alishomepage.com", "text": "This is not fixed: Tomcat 6.0.29 and 7.0.2 still removes all handlers of all Java loggers.\n\nHere is the code executed by Catalina:\n\n        // Clear the classloader reference in common-logging\n        if (clearReferencesLogFactoryRelease) {\n            org.apache.juli.logging.LogFactory.release(this);\n        }\n\n... which looks correct. But, JULI actually ignores the given ClassLoader and calls:\n\n        java.util.logging.LogManager.getLogManager().reset();\n\nWhich basically removes all handlers of all loggers of the Java util logger. Note that the comment on JULI says it should remvoe only things from JULI, that is UNTRUE.\n\nThe correct implementation would, I guess, look like that:\n\n    To clean up all of the current Web application's loggers:\n\n    get all loggers' names\n    for each logger\n        get all handlers\n        for each handler\n            if the handler's class can be loaded using the WebAppClassLoader\n               AND cannot be loaded using the WebAppClassLoader's parent\n            then\n              remove this handler\n            else don't touch\n              // that logger belongs to some other application\n              // or to Tomcat itself", "attachment_id": null}, {"count": 11, "tags": [], "creator": "markt@apache.org", "text": "Your analysis is incorrect. This is issue is resolved.\n\nYou need to look more carefully at the implementation of reset() and getLoggerNames()", "id": 139333, "time": "2010-08-22T10:33:39Z", "bug_id": 48716, "creation_time": "2010-08-22T10:33:39Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "text": "Hello\n\nWell, I'm currently analyzing the java.util.logging.LogManager.java (version: 1.55 09/05/17 | SUN PROPRIETARY/CONFIDENTIAL.)\n\nJULI calls:\n\n    java.util.logging.LogManager.getLogManager()\n\nthat, returns the following:\n\n    // The global LogManager object\n    private static LogManager manager;\n\nThe static \"manager\" variable is defined in java.util.logging.LogManager, which is in the Java SE classloader. It is therefore the same instance for all the JVM.\n\nThat (UNIQUE) instance has an attribute:\n\n    private Hashtable<String,Logger> loggers = new Hashtable<String,Logger>()\n\nFinally, getLoggerNames() returns:\n\n    public synchronized Enumeration<String> getLoggerNames() {\n\treturn loggers.keys();\n    }\n\nAs a result, I do not see how come java.util.logging.LogManager.getLogManager().reset() could reset anything else than the whole JVM's loggers, hence how this bug can be resolved fixed.", "attachment_id": null, "bug_id": 48716, "id": 139335, "time": "2010-08-22T11:06:38Z", "creator": "postmaster@alishomepage.com", "creation_time": "2010-08-22T11:06:38Z", "is_private": false}, {"count": 13, "tags": [], "creator": "richard.evans@datanomic.com", "text": "I agree with the analysis in the previous comment.  All the loggers in the VM are being reset.\n\nThere is a property clearReferencesLogFactoryRelease in the WebappClassLoader but I cannot find any way to set it in server.xml.  It is not recognized on the Context or Loader elements.", "id": 140554, "time": "2010-10-07T08:29:10Z", "bug_id": 48716, "creation_time": "2010-10-07T08:29:10Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 140555, "time": "2010-10-07T09:27:45Z", "bug_id": 48716, "creation_time": "2010-10-07T09:27:45Z", "is_private": false, "text": "The standard LogManager can't be used with Tomcat. If it is used, then a range of problems will occur including logger mix-ups and memory leaks. The expectation is that JULI's LogManager is used.\n\nThe assumption is that in the rare scenarios where it is safe to use the standard LogManager (and I suspect there are very, very few of these) they would be embedded scenarios where clearReferencesLogFactoryRelease could be set this directly on the class loader. In a standard Tomcat install setting this option will cause nothing but problems.\n\nThe property could be exposed on the Context but I'm reluctant to expose an option that has no upside. If there was a valid use case for setting this in a standard Tomcat install then an enhancement request to that effect would be considered but right now I don't see a valid use case."}, {"count": 15, "tags": [], "creator": "henning.blohm@gmail.com", "text": "(In reply to comment #14)\n> The standard LogManager can't be used with Tomcat. If it is used, then a range\n> of problems will occur including logger mix-ups and memory leaks. The\n> expectation is that JULI's LogManager is used.\n> \n> The assumption is that in the rare scenarios where it is safe to use the\n> standard LogManager (and I suspect there are very, very few of these) they\n> would be embedded scenarios where clearReferencesLogFactoryRelease could be set\n> this directly on the class loader. In a standard Tomcat install setting this\n> option will cause nothing but problems.\n> \n> The property could be exposed on the Context but I'm reluctant to expose an\n> option that has no upside. If there was a valid use case for setting this in a\n> standard Tomcat install then an enhancement request to that effect would be\n> considered but right now I don't see a valid use case.\n\nMark, \n\nyour comments on this issue are truely irritating. There are people that really want to use the standard log manager. I want to. Registering application level log handlers is the exception. Let people handle it.\n\nThe way it is handled now breaks the use of the standard LogManager - which is none of Tomcat's business. We will certainly not make JULI the underpinning of our infrastructure (that could - but as it stands will not - embed Tomcat) just because you don't like the standard LogManager.\n\nThose mixups and memory leaks are mostly insignifcant to the development scenario and much less so in production scenarios - supposing you hit the problem at all. Imposing JULI on the world just to be right is not reasonable.\n\nHenning", "id": 140564, "time": "2010-10-07T10:41:50Z", "bug_id": 48716, "creation_time": "2010-10-07T10:41:50Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "postmaster@alishomepage.com", "attachment_id": null, "id": 140568, "time": "2010-10-07T14:27:23Z", "bug_id": 48716, "creation_time": "2010-10-07T14:27:23Z", "is_private": false, "text": "(In reply to comment #15)\n> Imposing JULI on the world just to be right is not reasonable.\n\nI cannot agree more. Tomcat, as a Java application like any other, should NOT be imposing a logger but rather reuse the existing logger.\n\n(Bis repetita) The correct implementation for this memory leak avoiding mechanism would, I guess, look like that:\n\n    To clean up all of the current Web application's loggers:\n\n    get all loggers' names\n    for each logger\n        get all handlers\n        for each handler\n            if the handler's class can be loaded using the WebAppClassLoader\n               AND cannot be loaded using the WebAppClassLoader's parent\n            then\n              remove this handler\n            else don't touch\n              // that logger belongs to some other application\n              // or to Tomcat itself"}, {"count": 17, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 140571, "time": "2010-10-07T17:21:52Z", "bug_id": 48716, "creation_time": "2010-10-07T17:21:52Z", "is_private": false, "text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > Imposing JULI on the world just to be right is not reasonable.\n> \n> I cannot agree more. Tomcat, as a Java application like any other, should NOT\n> be imposing a logger but rather reuse the existing logger.\n\nThat simply isn't an option.\n\nThis isn't about being right, neither is it about not liking the standard LogManger, it is the result of long - and in some cases bitter - experience of committers, contributors and users of the issues (memory leaks, locked JARs, mixed up log messages) associated with log managers of all forms in the complex class loader environment that is a Servlet container.\n\nThis isn't limited to the default LogManager implementation, if you look back in the archives you'll find similar issues associated with commons logging and - if memory server me correctly - log4j as well.\n\nJULI was the Tomcat community's solution to these problems and it has worked very well. There are far less class loader / memory leak / logging type issues reported to the users list now than there were when I first got started on this project. Like any code, JULI has had some bugs along the way but is now very stable.\n\nLike any requirement, support for working with the standard LogManager is going be considered based on:\n- how invasive any change is\n- how many users are likely to use it\n- the likelihood of it causing problems for users that turn into questions on the users list.\n\nThis last point is a real concern in this case. Not using JULI would cause potentially hard to diagnose problems for many users. The user's mailing list doesn't need the extra questions.\n\nDespite the tone of the previous comments (please try and remember the committers are doing this because they enjoy it - people don't do things by choice that aren't fun and this bug is heading rapidly towards not being fun), I have been giving this some more thought.\n\nA previous suggestion was to only call reset() if JULI was the LogManager. My objection to that approach remains - it doesn't allow for alternative class loader aware LogManager implementations. However, a slight variation of that idea could work - call reset() unless the current LogManager is the standard java.util.logging.LogManager. The downside is that unless exactly that LogManager is used, reset() is still going to get called.\n\nWould a change to LogFactory.release() that checked for java.util.logging.LogManager and logged a warning rather than called reset() in that case meet your requirements?\n\n(Might have to skip logging a message - could get into circular dependency issues)"}, {"count": 18, "tags": [], "creator": "henning.blohm@gmail.com", "text": "Not calling \n\nLogManager.getLogManager().reset();\n\nwhen it is java.util.logging.LogManager would help.\n\nI suppose a mix of this with cleaning up what is JULI's looks promising (possibly like S. Ali suggested, or similarly - sorry, I didn't look into the code again and it's been a while).\n\nDevelopers that define (for whatever reason) application local handlers can either rely on JULI to clean up or register a context listener and clean up on their own (e.g. use commons logging ServletContextCleaner if applicable) - if they want to make sure.\n\nIn any case, usage of java.util.logging outside of the web container would not be harmed.\n\nSounds good to me.\n\nThanks,\n  Henning", "id": 140579, "time": "2010-10-08T04:50:46Z", "bug_id": 48716, "creation_time": "2010-10-08T04:50:46Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "text": "I've added the additional check before the reset() call to trunk and it will be in 7.0.4 onwards.\n\nFor users that want to use the default LogManager, as long as applications are not reloaded the worst that should happen is loggers being shared across multiple applications.\n\nIf application reload is required and memory leaks are not acceptable then the suggested approach in comment #10 / comment #16 should address any potential memory leak issues and could be implemented as a ServletContextListener. I don't propose adding this code to the Tomcat code-base.", "is_private": false, "id": 140587, "creation_time": "2010-10-08T08:31:47Z", "time": "2010-10-08T08:31:47Z", "creator": "markt@apache.org", "bug_id": 48716, "attachment_id": null}, {"count": 20, "tags": [], "creator": "postmaster@alishomepage.com", "attachment_id": null, "id": 140618, "time": "2010-10-09T09:26:24Z", "bug_id": 48716, "creation_time": "2010-10-09T09:26:24Z", "is_private": false, "text": "Hello Mark\n\n(In reply to comment #19)\n> I've added the additional check before the reset() call to trunk and it will be\n> in 7.0.4 onwards.\n\nI guess the patch is the one I see by inspecting the Tomcat source code using:\n\n    svn diff -r 1005801:1005802 http://svn.apache.org/repos/asf/tomcat/trunk/\n\nWhich has the following check before the call ro reset():\n\n    if(!LogManager.getLogManager().getClass().getName().equals(\"java.util.logging.LogManager\"))\n\nThe fix is good for me, thank you. Could you please also port it to Tomcat 6.0.x ?\n\nWhen trying to find the fix suggested in my comments, I've actually seen that the LogManager doesn't have a removeLogger method; which makes the actual patch pretty complex.\n\nCheers\n\nS. Ali Tokmen\nhttp://ali.tokmen.com/"}, {"count": 21, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 140760, "time": "2010-10-15T07:19:15Z", "bug_id": 48716, "creation_time": "2010-10-15T07:19:15Z", "is_private": false, "text": "I proposed r1005802 for backport to 6.0.\nThough maybe we can enhance that to print some warning when it happens, or maybe just one warning at startup time.\n\nBTW, I have a use case where the default LogManager is useful for us. That is not in production, but during development only.\n\nWe have several webapps where there is a WEB-INF/classes/logging.properties file that is configured to do not output anything to the console.  When we debug those applications it is helpful to use the default LogManager instead of JULI, so that those logging.properties are ignored and all debug output goes to the console."}, {"count": 22, "tags": [], "bug_id": 48716, "text": "Patch applied to 6.0.x and will be in 6.0.30 onwards", "id": 140828, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2010-10-19T12:45:51Z", "time": "2010-10-19T12:45:51Z", "is_private": false}]
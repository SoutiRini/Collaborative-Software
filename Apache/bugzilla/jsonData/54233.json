[{"count": 0, "text": "Created attachment 29666\nJava test to generate exception\n\nWhen attached testing example is executed against the attached document, it generates the exception:\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.poi.util.LittleEndian.getByteArray(LittleEndian.java:72)\n\tat org.apache.poi.hpsf.UnicodeString.<init>(UnicodeString.java:44)\n\tat org.apache.poi.hpsf.TypedPropertyValue.readValue(TypedPropertyValue.java:162)\n\tat org.apache.poi.hpsf.Vector.read(Vector.java:74)\n\tat org.apache.poi.hpsf.TypedPropertyValue.readValue(TypedPropertyValue.java:218)\n\tat org.apache.poi.hpsf.VariantSupport.read(VariantSupport.java:163)\n\tat org.apache.poi.hpsf.Property.<init>(Property.java:164)\n\tat org.apache.poi.hpsf.Section.<init>(Section.java:277)\n\tat org.apache.poi.hpsf.PropertySet.init(PropertySet.java:451)\n\tat org.apache.poi.hpsf.PropertySet.<init>(PropertySet.java:246)\n\tat org.alfresco.sample.TestPoi.main(TestPoi.java:46)\n\nInformation:\nTest document was generated usin APSOSE: http://www.aspose.com/\nAn anlisys of the document content and format can be found here: https://issues.alfresco.com/jira/browse/ALF-16896\n\nThe questions are?\n\"It appears that the length is little endian but in this file it always starts on a 4 byte boundary. I don't know if that is what should happen or if this is an error in the file. However as a result I have been able to work out a patch (UnicodeString.java.patch attached) which when applied to our POI works for both this file and existing files.\"", "bug_id": 54233, "attachment_id": 29666, "id": 163773, "time": "2012-12-03T09:49:10Z", "creator": "philippe.dubois@alfresco.com", "creation_time": "2012-12-03T09:49:10Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "philippe.dubois@alfresco.com", "text": "Created attachment 29667\nDocument used to generate the exception\n\nDocument used to generate the exception. Generate using ASPOSE", "id": 163775, "time": "2012-12-03T09:51:57Z", "bug_id": 54233, "creation_time": "2012-12-03T09:51:57Z", "is_private": false, "attachment_id": 29667}, {"count": 2, "tags": [], "bug_id": 54233, "attachment_id": 29668, "text": "Created attachment 29668\nProposed patch", "id": 163776, "time": "2012-12-03T09:58:06Z", "creator": "philippe.dubois@alfresco.com", "creation_time": "2012-12-03T09:58:06Z", "is_private": false}, {"count": 3, "tags": [], "creator": "alan.davis.apache@gmail.com", "text": "The attached UnicodeString.java.patch allows POI to recover from the type of error found in the file generated by http://www.aspose.com The file specifies an offset to a UnicodeString parameter, which is out by 2 bytes. The real offset starts on a 4 byte boundary.\n\nThe patch works by checking the offsets provided to make sure the UnicodeString appears valid. The original code checked the UnicodeString ends in a NULL character, AFTER it had copied the string into a new byte[]. The patch does this check BEFORE the copy avoiding the creation of a very large byte[] followed by an ArrayIndexOutOfBoundsException. As a result it is able to also check if changing the offset to a 4 byte boundary would solve the problem.", "id": 163777, "time": "2012-12-03T10:15:15Z", "bug_id": 54233, "creation_time": "2012-12-03T10:15:15Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 54233, "text": "It needs some work. At least one unit test started to fail after I applied your patch:\n\n\norg.apache.poi.hpsf.IllegalPropertySetDataException: UnicodeString started at offset #68 is not NULL-terminated\n\tat org.apache.poi.hpsf.UnicodeString.<init>(UnicodeString.java:48)\n\tat org.apache.poi.hpsf.TypedPropertyValue.readValue(TypedPropertyValue.java:162)\n\tat org.apache.poi.hpsf.VariantSupport.read(VariantSupport.java:166)\n\tat org.apache.poi.hpsf.Property.<init>(Property.java:164)\n\tat org.apache.poi.hpsf.Section.<init>(Section.java:277)\n\tat org.apache.poi.hpsf.PropertySet.init(PropertySet.java:451)\n\tat org.apache.poi.hpsf.PropertySet.<init>(PropertySet.java:246)\n\tat org.apache.poi.hpsf.PropertySetFactory.create(PropertySetFactory.java:59)\n\tat org.apache.poi.POIDocument.getPropertySet(POIDocument.java:165)\n\tat org.apache.poi.POIDocument.readProperties(POIDocument.java:126)\n\tat org.apache.poi.POIDocument.getSummaryInformation(POIDocument.java:93)\n\tat org.apache.poi.TestPOIDocumentMain.testCreateNewPropertiesOnExistingFile(TestPOIDocumentMain.java:161)\n\nPlease run the \"test\" ant target and ensure it completes OK.\n\nYegor", "id": 163795, "time": "2012-12-03T13:46:19Z", "creator": "yegor@dinom.ru", "creation_time": "2012-12-03T13:46:19Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 54233, "attachment_id": null, "text": "Alan and/or Philippe - any luck on a version of the patch that doesn't break the unit tests?", "id": 164253, "time": "2012-12-27T02:30:17Z", "creator": "apache@gagravarr.org", "creation_time": "2012-12-27T02:30:17Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 54233, "text": "I've had a go at fixing this in r1496675. All the POI tests pass with my fix, and the code is hopefully a little easier to follow than in the original patch. I've added a unit test based on the sample file supplied, which shows we can now read the metadata without error\n\nThis has just missed out on being in poi 3.10 beta 1 though, so I guess we're stuck with a patched copy of POI in Alfresco for a little bit longer :/ If it helps, I can raise a new Alfresco support ticket, and/or buy a round in the Bear...!", "id": 168058, "time": "2013-06-25T23:56:21Z", "creator": "apache@gagravarr.org", "creation_time": "2013-06-25T23:56:21Z", "tags": [], "is_private": false}]
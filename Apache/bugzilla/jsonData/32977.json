[{"count": 0, "tags": [], "bug_id": 32977, "is_private": false, "id": 69298, "attachment_id": null, "creator": "ips@apache.org", "creation_time": "2005-01-06T23:12:41Z", "time": "2005-01-06T23:12:41Z", "text": "The below build.xml:\n\n<project name=\"foo\" basedir=\"C:/\">\n   <property name=\"my.dir\" location=\"..\"/>\n   <echo>${my.dir}</echo>\n</project>\n\nresults in the following error:\nBUILD FAILED\nC:\\build.xml:5: The file or path you specified (..) is invalid relative to C:\\\n\nI don't think this is correct. On Windows or Unix, \"..\" always works, even \nrelative to a root dir, in which case it resolves to \".\".\n\nFor example, from Windows:\n\nC:\\>cd ..\n\nC:\\>cd ..\\..\\..\n\nC:\\>\n\nAnd the same goes for Java:\n\nFile file = new File( \"C:/\", \"..\" );\nSystem.out.println( file.getCanonicalPath() );\n\noutputs:\n\nC:\\\n\nI think Ant should be consistent to Windows, Unix, and most importantly, Java \nin its behavior."}, {"count": 1, "attachment_id": null, "bug_id": 32977, "is_private": false, "id": 69299, "time": "2005-01-06T23:22:46Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-06T23:22:46Z", "tags": [], "text": "Perhaps, for consistency's sake, but don't you agree nonetheless that failing \nin such a case is the right thing to do? If the logic of the build file expect \nsomething to be in .., if there is no such parent directory since already in \nthe root directory, something's wrong, and the current error message is very \nexplicit and tons better IMHO than silently equating . to .. because in the \nroot dir.\n\nI would be -0 and almost -1 on such a change. --DD"}, {"count": 2, "attachment_id": null, "bug_id": 32977, "is_private": false, "id": 69300, "time": "2005-01-06T23:23:06Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-01-06T23:23:06Z", "tags": [], "text": "Perhaps, for consistency's sake, but don't you agree nonetheless that failing \nin such a case is the right thing to do? If the logic of the build file expect \nsomething to be in .., if there is no such parent directory since already in \nthe root directory, something's wrong, and the current error message is very \nexplicit and tons better IMHO than silently equating . to .. because in the \nroot dir.\n\nI would be -0 and almost -1 on such a change. --DD"}, {"count": 3, "tags": [], "text": "I had an Ant script that contains:\n\n     <available file=\"../../../../webapps/wsrf\" type=\"dir\" \nproperty=\"dist.wsrf.webapp.dir\" value=\"../../webapps/wsrf\" />         \n     <condition property=\"wsrf.webapp.dir\" value=\"${dist.wsrf.webapp.dir}\">\n        <isset property=\"dist.wsrf.webapp.dir\"/>\n     </condition>     \n\nThis Ant script was designed to be able to be run from two possible locations, \none in which \"../../../../webapps/wsrf\" exists and one in which it does not \n(because \"../../../..\" ends up resolving to C:/). Unfortunately, this logic was \nnot possible, because the Ant available task aborts with the \"The file or path \nyou specified (..) is invalid relative to C:\\\" error. Whereas what I would have \nexpected it to do would be to simply not set the status property, since \nC:\\webapps\\wsrf does not exist. \n\nI'm sure there are many use cases like this, where trying to do file existence \nchecks in Ant the same way developers are used to in Unix, Windows, Java, C, \nPerl, etc. will backfire because of Ant's inconsistent way of handling \"..\".\n", "is_private": false, "id": 69305, "creator": "ips@apache.org", "time": "2005-01-07T00:08:03Z", "bug_id": 32977, "creation_time": "2005-01-07T00:08:03Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "ddevienne@lgc.com", "is_private": false, "text": "I see your point. Since you're merely testing for the existence of a file, \nthat's unfortunate. But then, if webapps/wsrf was in the same dir as the build \nfile, itself in the root dir, your proposed change would make the condition be \ntrue, when you expect it 3 directories down. Don't you also find this \ndisturbing, that you pick up something that your build file explicitly and \nstatically states should be 3 directories down (or up, depending...) and is in \nfact collocated?\n\nOne way to deal with this would be to compute the actual filename the way you \nwant prior to test it in the <condition>, using a small <script> or a smal \ncustom task. You'd bypass the usual filename resolution code in Ant and use \ndirectly new File(dir, path) which worked as you want.", "id": 69310, "time": "2005-01-07T00:24:24Z", "bug_id": 32977, "creation_time": "2005-01-07T00:24:24Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 32977, "is_private": false, "id": 69319, "attachment_id": null, "creator": "ips@apache.org", "creation_time": "2005-01-07T01:23:55Z", "time": "2005-01-07T01:23:55Z", "text": "I find it very mildly disturbing :-) The chance that there would be a directory \nby that name in the root directory is minute. \n\nI can appreciate the intention of the way Ant is behaving. However, I think \nit's overstepping its boundaries. It should be up to the script developer to \nmake sure \"..\"'s are being used as he/she intends them to be used. Perhaps a \ncompromise would be for Ant to print a warning message if it notices \nredundant \"..\"'s, e.g.:\n\nWarning, Line 11: Path \"../../../../webapps/wsrf\" contains redundant \"..\" \nelements.\n"}, {"count": 6, "tags": [], "creator": "stevel@apache.org", "is_private": false, "text": "Its an interesting problem. Your code is stepping backwards up the tree till it\nhits the root. What should the semantics be at that point? Unix says 'stay at\n/'; DOS, with its multiple roots is more convoluted. If Java and DOS behave the\nsame way, I'd go for copying it.\n\n\nIf we changed it, what would break?\n\nIncidentally Ian, why not do something like \n  <property file=\"build.properties\" />\n  <property name=\"root.dir\" location=\"../../\"  />\n  <property name=\"wsrf.dir\" location=\"webapps/wsrf\" />\n\nThis way you get to override everything in your build.properties file. \n\nth", "id": 69352, "time": "2005-01-07T14:25:22Z", "bug_id": 32977, "creation_time": "2005-01-07T14:25:22Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 32977, "text": "DOS/Windows says stay at the root of the current drive, or the root of an  \noptionally specified drive (i.e. \"cd C:\\..\" or \"cd C:..\\..\").\n\nbuild.properties is a possiblity, but the intention of the logic in the script \nwas to use a value from build.properties if one was set but otherwise to try to \nfigure it out by doing a series of available checks.\n\n", "id": 69362, "attachment_id": null, "creator": "ips@apache.org", "creation_time": "2005-01-07T16:07:23Z", "time": "2005-01-07T16:07:23Z", "is_private": false}, {"count": 8, "tags": [], "creator": "ddevienne@lgc.com", "is_private": false, "text": "I can live with a warning about trying to go below the root. This way one at \nleast has a hint something could be (and probably is IMHO) amiss. You get your \nconsistent behavior, and we keep a warning similar to the current error. \nPatches and tests welcome ;-) --DD", "id": 69390, "time": "2005-01-07T20:29:09Z", "bug_id": 32977, "creation_time": "2005-01-07T20:29:09Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 32977, "attachment_id": null, "is_private": false, "id": 93635, "time": "2006-09-15T15:28:27Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-15T15:28:27Z", "text": "I am not too sure when this was fixed, but in\nthe current ant 1.7 code the following works:\n<project name=\"foo\" >\n  <available file=\".emacs\" filepath=\"../../../../../..\"\n             property=\"found\"/>\n  <echo>found: ${found}</echo>\n</project>\n\n(c:\\.emacs exists).\n\nand \n<project name=\"foo\" basedir=\"C:/\">\n  <property name=\"my.dir\" location=\"..\"/>\n   <echo>${my.dir}</echo>\n</project>\n\nechos:\n     [echo] C:\\..\n\n\nNote:\nusing ../../../../../ is a long standing method,\nI used it recently in an ftp script, the ftp\nserver did not support an absolute path, one had\nto enter a relative path, - but the home directory\nof the login account varied from machine to machine\nsometimes '/' and sometimes '/home/account',\nused ../../../toplevel/file worked!\n\n<project name=\"foo\" "}]
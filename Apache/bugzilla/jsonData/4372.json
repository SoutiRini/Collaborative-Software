[{"count": 0, "attachment_id": null, "creator": "scottsh@attachmate.com", "text": "Ant's Javac task seems to always cause the optional -sourcepath switch to be \nused when calling the javac compiler.  Here's an example of the problem I'm \nhaving.  I want to compile D:\\project\\src\\com\\abc\\xxx\\ThisOne.java, which has \nthe following statement:  import com.abc.yyy.AnotherOne;\n\nThe following command works correctly:\njavac -d D:\\project\\output -classpath D:\\project\\src -g:none \nD:\\project\\src\\com\\abc\\xxx\\ThisOne.java\n\nbecause the compiler finds AnotherOne.java below the specified classpath.\n\nBUT the following command generated by Ant's Javac does not work:\njavac -d D:\\project\\output -classpath D:\\project\\src -g:none -sourcepath \nD:\\project\\src\\com\\abc\\xxx D:\\project\\src\\com\\abc\\xxx\\ThisOne.java\n\nbecause the compiler now can't find AnotherOne.java, since the -sourcepath \nswitch is now used to search for AnotherOne.java.\n\nI realize I could compile AnotherOne.java first and set the classpath to the \noutput path, but this could be difficult in more complex situations.\n\nIt seems to me that Ant should NOT generate the optional -sourcepath switch \nunless it is specifically needed, since it changes the behavior of the compile \nprocess.\n\nIncidentally, my build.xml looks like this:\n<target name=\"xxx\">\n\t<javac srcdir=\"D:\\project\\src\\com\\abc\\xxx\" destdir=\"D:\\project\\output\">\n\t\t<classpath>\n\t\t\t<pathelement location=\"D:\\project\\src\"/>\n\t\t</classpath>\n\t</javac>\n</target>", "id": 7060, "time": "2001-10-23T10:41:09Z", "bug_id": 4372, "creation_time": "2001-10-23T10:41:09Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Your misusing java ;)\n\nSee http://jakarta.apache.org/ant/faq.html#always-recompiles for a few hints.\n", "attachment_id": null, "bug_id": 4372, "id": 7091, "time": "2001-10-24T02:29:15Z", "creator": "donaldp@apache.org", "creation_time": "2001-10-24T02:29:15Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jwinshell@bearriver.com", "text": "Sorry, this is a bug.   I too ran into this after switching from jikes to standard javac.   Works properly with jikes, not with javac.  \n\nThe documentation for javac in the section for \"searching for types\" says ( http://java.sun.com/j2se/1.3/docs/tooldocs/solaris/javac.html )\n\"\nIf you use the -sourcepath option, the compiler searches the indicated path for source files; otherwise the compiler searches the user class path both for class files and source files. \n\"\n\nExample:\n\nSuppose I have:\n\nthatpackage/ThatClass.java\n\nand \nthispackage/ThisClass.java  which include an\nimport \"thatpackage.ThatClass\";\n...\nThatClass that = new ThatClass();\n\nThen invoking javac as \n\njavac -classpath \"thispackage:thatpackage\" thispackage/ThisClass.java\n\nwould implicitly look for the source thatpackage/ThatClass.java in the classpath during attempt to resolve the reference of ThatPackage.ThatClass from ThisPackage.ThatClass.java when it found that the thatPackage/ThatClass.class was missing.\n\nif invoked as the javac task does:\njavac -sourcepath \"thispackage\" -classpath \"thispackage:thatpackage\" thispackage/ThisClass.java\na compiler error results complaining about not being able to resolve uses of ThatPackage.ThatClass within ThisPackage.ThisClass.   This is because javac will NOT look for the source ThatClass.java anywhere but the specified sourcepath.     That the bug.\n\nJason Winshell, Principal Consulting Engineer     jwinshell@bearriver.com\nBear River Associates, Inc.                      http://www.bearriver.com\n", "id": 9054, "time": "2001-12-19T11:34:20Z", "bug_id": 4372, "creation_time": "2001-12-19T11:34:20Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "jwinshell@bearriver.com", "text": "Here is the fix:\n\nfile: src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java\naround line: 270\n\n            cmd.createArgument().setPath(classpath);\n/** jw: this is wrong!  Otherwise javac won't find sources for implicitly referenced classes that outside our specific\nset of source files\n            cmd.createArgument().setValue(\"-sourcepath\");\n            cmd.createArgument().setPath(src);\n*/\n", "id": 9056, "time": "2001-12-19T13:34:43Z", "bug_id": 4372, "creation_time": "2001-12-19T13:34:43Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 4372, "text": "Man, some people are stupid. Wonder if any one bothers to RTFM or is it just \nsome bozos?\n", "id": 9057, "time": "2001-12-19T14:17:41Z", "creator": "donaldp@apache.org", "creation_time": "2001-12-19T14:17:41Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "jwinshell@bearriver.com", "attachment_id": null, "id": 9063, "time": "2001-12-19T18:00:43Z", "bug_id": 4372, "creation_time": "2001-12-19T18:00:43Z", "is_private": false, "text": "Peter,\n\nI read the documentation.   Treating -sourcepath as synomous for the set of files given in the \nsourcedir attribute (or sub-element constrution) is technically wrong, regardless of my purpose \nfor doing it.  There may be sources for classes I want found in the classpath, that wouldn't be in \nthe path value invented for -sourcepath from the sourcedir attribute.   Switching between jikes \nand javac should break my compiles.  Can you please provide me a civil response to this bug \nreport.  If I'm misunderstanding something (and I've read all the documentation) please point it \nout.  Thanks."}, {"count": 6, "tags": [], "bug_id": 4372, "attachment_id": 925, "text": "Created attachment 925\nshows problem resulting from implicit generation of sourcepath arg to javac", "id": 9066, "time": "2001-12-19T19:12:21Z", "creator": "jwinshell@bearriver.com", "creation_time": "2001-12-19T19:12:21Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 4372, "attachment_id": null, "text": "And here's an example that proofs the point.   The implict generation of -sourcepath from the \nsourcedir atrribute (or constructed path) cuts off cabability of finding Java sources along the \nCLASSPATH.   I ran with 1.3 VM on OS X and Linux.  Same result.", "id": 9067, "time": "2001-12-19T19:16:05Z", "creator": "jwinshell@bearriver.com", "creation_time": "2001-12-19T19:16:05Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 4372, "attachment_id": null, "text": "Trying to change the tone. I think your problem is that you are misusing the \nsrcdir attribute. It should point to the directory containing the top of the \npackage dir structure. Otherwise, not only -sourcepath will be wrong but also \nthe ability to check if the file is already compiled. Please try this way:\n\n<target name=\"xxx\">\n\t<javac srcdir=\"D:\\project\\src\" destdir=\"D:\\project\\output\">\n\t\t<classpath>\n\t\t\t<pathelement location=\"D:\\project\\src\"/>\n\t\t</classpath>\n                <include name=\"com/abc/xxx/*\" />\n\t</javac>\n</target>\n\nThis should work as you expect.", "id": 9074, "time": "2001-12-20T00:13:37Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2001-12-20T00:13:37Z", "is_private": false}, {"count": 9, "tags": [], "creator": "holtdl@yahoo.com", "attachment_id": null, "id": 9093, "time": "2001-12-20T08:46:20Z", "bug_id": 4372, "creation_time": "2001-12-20T08:46:20Z", "is_private": false, "text": "The problem isn't whether someone's pointing the \"srcdir\" attribute to the \nright directory (I'm not saying that isn't A problem -- just saying it's not \nreally THIS problem). This problem is as described by Jason Winshell's first \nnotes: Now that \"srcdir\" is translated to be an arg for the -sourcepath flag, \nno directories listed in \"classpath\" (or nested <classpath>) that point to dirs \ncontaining .java files will be recognized by the compiler as a place to look \nfor source-files for class-files it can't find; before, you could put dirs that \npointed to directories containing .java files in the classpath, but you can't \ndo that if -sourcepath is always going to be on the command-line, because the \nway 'javac' works when -sourcepath is included is to ignore anything in the \nclasspath that's not already a compiled object. So to do that now (ie., \nincludes directories that contain .java files), you need to not \nspecify \"srcdir\" at all, but instead specify a nested <src>. Barking \"RTFM\" \ndoesn't address the problem, because the \"FM\" doesn't mention that. BTW: I know \nall this now, because of Judy Sowell's mail to ant-user, asking why her compile \nwas failing EVEN THOUGH she was including the classpath the directory that \nincluded the referenced .java files -- see:\n  http://marc.theaimsgroup.com/?l=ant-user&m=100800459902088&w=2\nI helped her fix her problem (off-list) by having her get rid of \"srcdir\" and \nusing a nested <src> instead -- but really, I don't think that's anything but a \nworkaround for this bug.\n\nThe quick fix is to have the manual explain that you need to do that -- but I \nagree with Jason that the real fix would be to ONLY include the -sourcepath \nflag when someone has specifically used the nested <src> element, and NOT do it \nif they've used \"srcdir\"."}, {"count": 10, "attachment_id": null, "creator": "jwinshell@bearriver.com", "text": "Jose/Diane,\n\nFirst, thank you for the civilized answers to this bug report and the agreement that this is in fact a bug.   I would go a little farther in saying the content of a -sourcepath parameter should not be implicitly derived from the source matches below either a srcdir attribute or <src> element.   This is because there still may be sources in the classpath you want implicitly complied.    I believe Jose's suggestion was that I make sure that srcdir includes all directories that contain sources that I might need to get through a compile is excessive, and not entirely correct under all circumstances.  I'll explain.\n\nSuppose I have two projects, A and B.    Project A depends on SOME of the classes of project B, but not all.   I don't want to encode specific knowledge of those dependencies into build.xml of A.   The references of B classes by A classes already encode the dependency.  And  SOME classes in B that are unused by A that depend on C.   If in order to compile the Java sources of A I were to put the ProjectA/src and ProjectB/src into a srcdir or <src> elements of a <javac>, then the compiler would try to compile ALL the classes of projectB/src whether classes of projectA/src referenced them or not.  Without specifying excludes for certain sources of projectB, we would not get through the compile of certain classes of B on C.   Assuming that <javac> generation of -sourcepath is gone, then simply having projectB/src in the classpath would do the trick.   If in the process of compiling a class of projectA a reference to a class of projectB is found it will be compiled implicitly.   Hopefully projectA correctly refers to only those classes of B that don't depend on C (development error).\n\nI suppose there are other ways of structuring inter-project dependencies, but the point is that the <javac> task should not treat with with equivalance the set of directories corresponding to explicit source directories (compile these files please) to those classpath directories which can be searched for implicitly located sources when a *.class is missing/out-of-date.   If the sun javac's behavior was to augment implicitly found sources in the classpath with those found in -sourcepath the generation of sourcepath would be appropriate.   But as it stands the use of sourcepath turns off the classpath search behavior.   Because of the this mutually exclusive behavior -sourcepath should never generated, even if <src> elements are used instead of srcdir.\n\nAs it stands, I've had to apply my own private patch to the ant 1.4 jar file.   Can we get this fixed soon ( NO MORE -sourcepath generation).", "id": 9095, "time": "2001-12-20T09:35:31Z", "bug_id": 4372, "creation_time": "2001-12-20T09:35:31Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "creator": "jwinshell@bearriver.com", "text": "Previous comment re-entered due to lack of line breaks?\n\nJose/Diane,\n\nFirst, thank you for the civilized answers to this bug report and the\nagreement that this is in fact a bug.   I would go a little farther in\nsaying the content of a -sourcepath parameter should not be implicitly\nderived from the source matches below either a srcdir attribute or\n<src> element.   This is because there still may be sources in the\nclasspath you want implicitly complied.    I believe Jose's suggestion\nwas that I make sure that srcdir includes all directories that contain\nsources that I might need to get through a compile is excessive, and\nnot entirely correct under all circumstances.  I'll explain.\n\nSuppose I have two projects, A and B.    Project A depends on SOME of\nthe classes of project B, but not all.   I don't want to encode\nspecific knowledge of those dependencies into build.xml of A.   The\nreferences of B classes by A classes already encode the dependency. \nAnd  SOME classes in B that are unused by A that depend on C.   If in\norder to compile the Java sources of A I were to put the ProjectA/src\nand ProjectB/src into a srcdir or <src> elements of a <javac>, then\nthe compiler would try to compile ALL the classes of projectB/src\nwhether classes of projectA/src referenced them or not.  Without\nspecifying excludes for certain sources of projectB, we would not get\nthrough the compile of certain classes of B on C.   Assuming that\n<javac> generation of -sourcepath is gone, then simply having\nprojectB/src in the classpath would do the trick.   If in the process\nof compiling a class of projectA a reference to a class of projectB is\nfound it will be compiled implicitly.   Hopefully projectA correctly\nrefers to only those classes of B that don't depend on C (development\nerror).\n\nI suppose there are other ways of structuring inter-project\ndependencies, but the point is that the <javac> task should not treat\nwith with equivalance the set of directories corresponding to explicit\nsource directories (compile these files please) to those classpath\ndirectories which can be searched for implicitly located sources when\na *.class is missing/out-of-date.   If the sun javac's behavior was to\naugment implicitly found sources in the classpath with those found in\n-sourcepath the generation of sourcepath would be appropriate.   But\nas it stands the use of sourcepath turns off the classpath search\nbehavior.   Because of the this mutually exclusive behavior\n-sourcepath should never generated, even if <src> elements are used\ninstead of srcdir.\n\nAs it stands, I've had to apply my own private patch to the ant 1.4\njar file.   Can we get this fixed soon ( NO MORE -sourcepath\ngeneration).", "id": 9096, "time": "2001-12-20T09:38:48Z", "bug_id": 4372, "creation_time": "2001-12-20T09:38:48Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 4372, "text": "With nightly build 2002-02-15 <javac> has a new sourcepath attribute, set this\nto \"\" and you supress the -sourcepath switch.\n\n*** This bug has been marked as a duplicate of 5268 ***", "id": 10768, "time": "2002-02-15T17:36:54Z", "creator": "bodewig@apache.org", "creation_time": "2002-02-15T17:36:54Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "herzbube@herzbube.ch", "attachment_id": null, "text": "On my machine I have two types of user databases\n* an LDAP directory\n* a global .htpasswd file\n\nFor both types of user databases I would like to specify the details (location, bind DN) only once, so that I don't have to repeat those details for every directory that I want to protect. For instance:\n\n<Directory />\n  <IfModule mod_authnz_ldap.c>\n    AuthLDAPUrl ldap://127.0.0.1:389/ou=users,dc=foo,dc=ch?uid?sub?(objectClass=*)\n    AuthLDAPBindDN cn=httpd,ou=users,dc=foo,dc=ch\n    AuthLDAPBindPassword secret\n  </IfModule>\n  <IfModule mod_authn_file.c>\n    AuthUserFile /etc/apache2/.htpasswd\n  </IfModule>\n</Directory>\n\n\nTo protect a certain directory using the .htpasswd file, I have this configuration:\n\n<Directory /bar/>\n  AuthName \"access to bar\"\n  AuthType Basic\n  AuthBasicProvider file\n  Require valid-user\n</Directory>\n\nNote that I have set \"AuthBasicProvider file\". If I wanted LDAP authentication, I would set \"AuthBasicProvider ldap\".\n\n\nNow to the problem:\n* I use my web browser to access http://<server>/bar/\n* My web browser asks me to enter a username/password\n* I enter a username/password that exists in the global .htpasswd file, but not in the LDAP directory\n\nExpected result:\n* I am being granted access to http://<server>/bar/\n\nActual result:\n* I get a \"401 Authorization Required\" page\n\n\nAdditional information:\n* Removing the AuthLDAPUrl directive fixes the problem, i.e. I am being granted access to http://<server>/bar/\n* Instead of removing AuthLDAPUrl: Adding the directive \"AuthzLDAPAuthoritative off\" also fixes the problem\n* Access is always granted if I enter a username/password that exists both in the global .htpasswd file and the LDAP directory\n\n\nConclusion:\n* if an AuthLDAPUrl directive is inherited by a directory further down the tree, AuthLDAPUrl seems to activate/trigger/invoke mod_authnz_ldap\n* I was living under the impression that mod_authnz_ldap is activated/triggered/invoked only when setting AuthBasicProvider to \"ldap\"\n* quoting from the documentation of mod_authnz_ldap (http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html): \"When using mod_auth_basic, this module is invoked via the AuthBasicProvider directive with the ldap value.\"\n\n\nSystem configuration\n* Debian testing\n* apache2 -v prints this:\n  Server version: Apache/2.2.9 (Debian)\n  Server built:   Jul 20 2008 08:23:41\n* Browsers that I have tried: Firefox 3.0.1, Safari 3.1.2", "id": 121185, "time": "2008-10-03T12:29:38Z", "bug_id": 45946, "creation_time": "2008-10-03T12:29:38Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45946, "attachment_id": null, "id": 121188, "time": "2008-10-04T07:24:52Z", "creator": "covener@gmail.com", "creation_time": "2008-10-04T07:24:52Z", "is_private": false, "text": "Can't tell for sure without your LogLevel debug errorlog for the failure, but it seems like mod_authnz_ldap is trying to perform authorization, not authentication.\n\nWhen mod_authnz_ldap is used for authorization, it does some extra processing if it wasn't also called for authentication -- namely mapping the username to a DN.\n\nWhen it fails to map a username to a DN, it returns as you describe -- but it should have been able to check that a require ldap-* was even going to be present (later on, it will use this in the same way it uses the authoritative flag).\n\nThis would affect 2.2.x and not trunk because of differences in the authentication.  My advice would be to set LDAP authorization as non-authoritative if you must configure an AuthLDAPUrl globally, as these are the two conditions LDAP authorization will use to step out of the way.\n"}, {"count": 2, "tags": [], "bug_id": 45946, "is_private": false, "id": 121276, "creation_time": "2008-10-07T08:42:08Z", "time": "2008-10-07T08:42:08Z", "creator": "herzbube@herzbube.ch", "text": "Created attachment 22678\nLogLevel debug error log\n\nI have attached an error log created with \"LogLevel debug\". It looks indeed as if mod_authnz_ldap tries to perform authorization when it shouldn't.\n\nMy current workaround, by the way, is to place AuthLDAPUrl et al. in a central file (e.g. /etc/apache2/ldap.conf) which I then include in each <Directory> block that requires authentication. At the moment this is good enough for me to avoid duplication.", "attachment_id": 22678}, {"count": 3, "tags": [], "creator": "bnicholes@apache.org", "attachment_id": null, "is_private": false, "id": 121316, "time": "2008-10-08T09:35:08Z", "bug_id": 45946, "creation_time": "2008-10-08T09:35:08Z", "text": "One of the down sides of having to include both authentication and authorization in the same modules, is that when the module is loaded, it tries to perform both operations. Due to the fact that there was a lot of ldap data that had to be shared between the authentication and authorization sides of auth_ldap, the result was that both sides were combined into one module.  Hence authnz_ldap rather than authn_ldap and authz_ldap like other modules.  \n\nSo the short answer to your problem is that you need to include AuthZLDAPAuthoritative off in your configuration block.  This will tell authnz_ldap to ignore the authorization directive and allow another authz module to handle it.  See the \"Authorization Phase\" topic in the documentation http://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html#operation"}, {"count": 4, "tags": [], "bug_id": 45946, "text": "This is fixed in 2.2.14 and later", "id": 137208, "time": "2010-05-29T20:29:47Z", "creator": "covener@gmail.com", "creation_time": "2010-05-29T20:29:47Z", "is_private": false, "attachment_id": null}]
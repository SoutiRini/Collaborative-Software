[{"count": 0, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "id": 174101, "time": "2014-03-26T12:38:17Z", "bug_id": 56318, "creation_time": "2014-03-26T12:38:17Z", "is_private": false, "text": "I've setup a datasource as\n\n<Resource auth=\"Container\"\n\nurl=\"jdbc:oracle:thin:@dgalimov7:1521:DAN2\"\n\t\tdriverClassName=\"oracle.jdbc.OracleDriver\" \n                factory=\"org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory\"\n\t\tname=\"jdbc/IpbDB\"\n\t\tusername=\"dgalimov_home_new\" password=\"dgalimov_home_new\"\n\t\ttype=\"javax.sql.DataSource\"\n\t\ttimeBetweenEvictionRunsMillis=\"10000\"\n\t\tmaxActive=\"25\" maxIdle=\"3\" minIdle=\"0\"\n\t\tmaxWait=\"30000\"\n                testOnBorrow=\"true\" testOnReturn=\"true\" validationQuery=\"SELECT 1 FROM DUAL\"\n     />\n\nHowever, if I change factory from org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory to org.apache.tomcat.jdbc.pool.DataSourceFactory, after a while I'm getting errors like ORA-01000: maximum open cursors exceeded (although I've set 1000 cursors limit).\n \nI'm using this query to  get the cursors count:\nselect max(a.value) as highest_open_cur, p.value as max_open_cur\n  from v$sesstat a, v$statname b, v$parameter p\n  where a.statistic# = b.statistic# \n  and b.name = 'opened cursors current'\n  and p.name= 'open_cursors'\n  group by p.value;\n\nI've tried adding defaultAutoCommit=\"true\" when using DataSourceFactory, but it didn't help."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 174102, "time": "2014-03-26T12:39:31Z", "bug_id": 56318, "creation_time": "2014-03-26T12:39:31Z", "is_private": false, "text": "Correct product"}, {"count": 2, "tags": [], "bug_id": 56318, "text": "Have you enabled \"abandoned\" logging? I believe tomcat-pool is less kind than DBCP when you have resource leaks in your application.", "id": 174109, "time": "2014-03-26T17:08:55Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-03-26T17:08:55Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "text": "No, could you please clarify how can I do that?", "id": 174118, "time": "2014-03-26T20:35:21Z", "bug_id": 56318, "creation_time": "2014-03-26T20:35:21Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 56318, "text": "Not sure this would be a bug. It is your responsibility to close statements in your application. However, you can configure the pool to do it for you\n\nhttps://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer\n\nin your config that would look like\n\njdbcInterceptors=\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;\n            org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer\"\n\n<Resource auth=\"Container\"\n\nurl=\"jdbc:oracle:thin:@dgalimov7:1521:DAN2\"\n\t\tdriverClassName=\"oracle.jdbc.OracleDriver\" \n                factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n\t\tname=\"jdbc/IpbDB\"\n\t\tusername=\"dgalimov_home_new\" password=\"dgalimov_home_new\"\n\t\ttype=\"javax.sql.DataSource\"\n\t\ttimeBetweenEvictionRunsMillis=\"10000\"\n\t\tmaxActive=\"25\" maxIdle=\"3\" minIdle=\"0\"\n\t\tmaxWait=\"30000\"\n                testOnBorrow=\"true\" testOnReturn=\"true\" validationQuery=\"SELECT 1 FROM DUAL\"\n                jdbcInterceptors=\"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer\"\n     />", "id": 174121, "attachment_id": null, "creator": "fhanik@apache.org", "creation_time": "2014-03-26T21:46:32Z", "time": "2014-03-26T21:46:32Z", "is_private": false}, {"count": 5, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "id": 174126, "time": "2014-03-27T10:10:31Z", "bug_id": 56318, "creation_time": "2014-03-27T10:10:31Z", "is_private": false, "text": "Yes, it helped. Thanks."}, {"count": 6, "tags": [], "bug_id": 56318, "text": "If the StatementFinalizer fixed your problem, then you should take some time to look into your application and correct those errors. Head over to the users' mailing list if you'd like some help with that.", "id": 174143, "time": "2014-03-27T19:55:48Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-03-27T19:55:48Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 56318, "attachment_id": null, "text": "Thank you :-)\n\nIdeally I would like to have something like stacktrace of statement opening, and stacktrace of connection close, so when connection is closed, all of the opened and not closed prepared statments, connections, result sets e.t.c will be printed with creation trace, so I will be able to check this.\n\nIs it possible to do with currently available jdbc interceptors (or maybe I need to setup something like proxy jdbc drivers) ?\n\nUnfortunately the project is very big and we're using a lot of libraries, so it's hard to get the exact place without logging.", "id": 174148, "time": "2014-03-27T20:44:12Z", "creator": "bgrh@mail.ru", "creation_time": "2014-03-27T20:44:12Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56318, "text": "(In reply to Danila Galimov from comment #7)\n> Thank you :-)\n> \n> Ideally I would like to have something like stacktrace of statement opening,\n> and stacktrace of connection close, so when connection is closed, all of the\n> opened and not closed prepared statments, connections, result sets e.t.c\n> will be printed with creation trace, so I will be able to check this.\n> \n> Is it possible to do with currently available jdbc interceptors (or maybe I\n> need to setup something like proxy jdbc drivers) ?\n> \n> Unfortunately the project is very big and we're using a lot of libraries, so\n> it's hard to get the exact place without logging.\n\nWriting your own is very simple, take a look at the code for the StatementFinalizer\n\nhttp://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java?view=markup\n\nAnd you can easily add in options to track stack traces.", "id": 174186, "time": "2014-03-31T16:30:58Z", "creator": "fhanik@apache.org", "creation_time": "2014-03-31T16:30:58Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 56318, "text": "Created attachment 31467\nStatementFinalizer patch", "id": 174219, "time": "2014-04-02T17:28:48Z", "creator": "bgrh@mail.ru", "creation_time": "2014-04-02T17:28:48Z", "is_private": false, "attachment_id": 31467}, {"count": 10, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "text": "I've created an patch for StatementFinalizer class. It allows to print the creation stack, if configured in a way like jdbcInterceptors=\"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer(logCreationStack=true)\". Otherwise, it works almost the same way as original version.\nI think it may be useful to detect unclosed statements in the code. Please integrate it.", "id": 174220, "time": "2014-04-02T17:30:18Z", "bug_id": 56318, "creation_time": "2014-04-02T17:30:18Z", "is_private": false}, {"count": 11, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "(In reply to Danila Galimov from comment #10)\n> I've created an patch for StatementFinalizer class. It allows to print the\n> creation stack, if configured in a way like\n> jdbcInterceptors=\"org.apache.tomcat.jdbc.pool.interceptor.\n> StatementFinalizer(logCreationStack=true)\". Otherwise, it works almost the\n> same way as original version.\n> I think it may be useful to detect unclosed statements in the code. Please\n> integrate it.\n\nHow is this different than setting logAbandoned=\"true\"?", "id": 174225, "time": "2014-04-02T19:55:51Z", "bug_id": 56318, "creation_time": "2014-04-02T19:55:51Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 56318, "attachment_id": null, "text": "When logAbandoned is set to true, when connection is closed, but any statements are left unclosed, you'll get this message in the catalina.log and/or console (depends on the logger configuration):\n\nWARNING: Statement created, but was not closed \njava.lang.Throwable\n\tat org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer$StatementEntry.<init>(StatementFinalizer.java:98)\n\tat org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer.createStatement(StatementFinalizer.java:46)\n\tat org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:69)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(ConnectionState.java:153)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.TrapException.invoke(TrapException.java:41)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.DisposableConnectionFacade.invoke(DisposableConnectionFacade.java:80)\n\tat com.sun.proxy.$Proxy14.prepareCall(Unknown Source)\n\tat com.exigen.cm.database.ConnectionProviderImpl.findDialect(ConnectionProviderImpl.java:258)\n\tat com.exigen.cm.database.ConnectionProviderImpl.configure(ConnectionProviderImpl.java:191)\n\tat com.exigen.cm.impl.RepositoryConfiguration.checkFillConfiguration(RepositoryConfiguration.java:375)\n\tat com.exigen.cm.impl.RepositoryConfiguration.getRepositoryConfiguration(RepositoryConfiguration.java:238)\n\tat com.exigen.cm.impl.RepositoryProviderImpl.getRepository(RepositoryProviderImpl.java:42)\n\tat com.exigen.cm.impl.spring.LocalExigenJcrRepositoryBean.getObject(LocalExigenJcrRepositoryBean.java:74)\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:142)\n\tat org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:102)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1442)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:305)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1136)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:400)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:390)\n\tat org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1158)\n\tat com.exigen.ipb.bam.DefaultActivityDefinitionsRegistry.init(DefaultActivityDefinitionsRegistry.java:47)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1522)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:352)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:153)\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:629)\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:148)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1035)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:939)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:569)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:913)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464)\n\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:385)\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:284)\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4973)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5467)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)\n\tat org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1229)\n\tat org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1875)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)\n\tat java.lang.Thread.run(Thread.java:662)", "id": 174229, "time": "2014-04-02T20:13:12Z", "creator": "bgrh@mail.ru", "creation_time": "2014-04-02T20:13:12Z", "is_private": false}, {"count": 13, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "(In reply to Danila Galimov from comment #12)\n> When logAbandoned is set to true, when connection is closed, but any\n> statements are left unclosed, you'll get this message in the catalina.log\n> and/or console (depends on the logger configuration):\n> \n> WARNING: Statement created, but was not closed \n\nThat's the general ideal, right? How does your patch do anything differently?", "id": 174232, "time": "2014-04-02T21:06:28Z", "bug_id": 56318, "creation_time": "2014-04-02T21:06:28Z", "is_private": false}, {"count": 14, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "text": "The other changes are:\n1) Removed catch of ClassCastException, since it shouldn't occur (And I was not able to get it actually in my tests)\n2) Statement is now closed only if Statement.isClosed() returns false. I think there is no sense of closing already closed statement. In my tests all of the cursors were closed with this settings", "id": 174240, "time": "2014-04-03T09:27:16Z", "bug_id": 56318, "creation_time": "2014-04-03T09:27:16Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 56318, "text": "Reopening since the patch is a new fix", "id": 174278, "time": "2014-04-04T14:02:21Z", "creator": "fhanik@apache.org", "creation_time": "2014-04-04T14:02:21Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "text": "Is it ok to apply it?", "id": 174666, "time": "2014-04-17T10:19:17Z", "bug_id": 56318, "creation_time": "2014-04-17T10:19:17Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 56318, "text": "Fixed in r161644", "id": 177005, "time": "2014-08-08T00:05:12Z", "creator": "fhanik@apache.org", "creation_time": "2014-08-08T00:05:12Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 56318, "text": "The revision links to Apache Directory", "id": 177007, "time": "2014-08-08T09:37:36Z", "creator": "1983-01-06@gmx.net", "creation_time": "2014-08-08T09:37:36Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "text": "(In reply to Michael Osipov from comment #18)\n> The revision links to Apache Directory\n\nr1616644", "id": 177028, "time": "2014-08-09T01:17:05Z", "bug_id": 56318, "creation_time": "2014-08-09T01:17:05Z", "is_private": false}, {"count": 20, "tags": [], "creator": "bgrh@mail.ru", "attachment_id": null, "id": 177030, "time": "2014-08-09T17:37:51Z", "bug_id": 56318, "creation_time": "2014-08-09T17:37:51Z", "is_private": false, "text": "Filip,\n\nYou changed the logic a bit.\n\nIn my original patch, only the statements, which are not closed, are logged.\n\nif (!st.isClosed()) {\n....\n  if (logCreationStack) {\n   log.warn(\"Statement created, but was not closed \", se.getAllocationStack());\n  }\n} \n\nHowever, in your core, http://svn.apache.org/viewvc?view=revision&revision=1616644, you always log the creation stack on closure, even if it was already closed. \n\nMy intention was to log only unclosed statements."}, {"count": 21, "tags": [], "bug_id": 56318, "attachment_id": null, "text": "Fixed in r1617042\nDanila, Thank You So Much for the review\n\nFilip", "id": 177035, "time": "2014-08-10T01:55:55Z", "creator": "fhanik@apache.org", "creation_time": "2014-08-10T01:55:55Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 28283, "text": "Platform = PowerPc\n\n\nI have been getting the following errors.   The Unable to locate tools.jar \nhasn't seemed to be a problem (I get it everytime) but the OutOfMemory error \nseems to be unpredictable-- very small changes in my script will cause it to \npop up, and more small changes make it go away.\n\nltiblx01:/mnt/ltias01/p4data/vriezenj5/MxEchoStreamFS/Mainline/ant # ant -Dbuild\n=131870 install\nUnable to locate tools.jar. Expected to find it in /usr/lib/SunJava2-1.3.1/lib/t\nools.jar\nBuildfile: build.xml\n\nBUILD FAILED\njava.lang.OutOfMemoryError\n        at java.lang.reflect.Method.copy(Method.java:278)\n        at java.lang.reflect.Method.getParameterTypes(Method.java:90)\n        at org.apache.tools.ant.IntrospectionHelper.<init>(IntrospectionHelper.j\nava:177)\n        at org.apache.tools.ant.IntrospectionHelper.getHelper(IntrospectionHelpe\nr.java:439)\n        at org.apache.tools.ant.UnknownElement.handleChildren(UnknownElement.jav\na:312)\n        at org.apache.tools.ant.UnknownElement.configure(UnknownElement.java:176\n)\n        at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.jav\na:152)\n        at org.apache.tools.ant.Task.perform(Task.java:363)\n        at org.apache.tools.ant.Target.execute(Target.java:301)\n        at org.apache.tools.ant.helper.ProjectHelper2.parse(ProjectHelper2.java:\n135)\n        at org.apache.tools.ant.ProjectHelper.configureProject(ProjectHelper.jav\na:89)\n        at org.apache.tools.ant.Main.runBuild(Main.java:617)\n        at org.apache.tools.ant.Main.startAnt(Main.java:183)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:197)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:56)\n\nTotal time: 8 seconds\njava.lang.OutOfMemoryError\n        at java.lang.reflect.Method.copy(Method.java:278)\n        at java.lang.reflect.Method.getParameterTypes(Method.java:90)\n        at org.apache.tools.ant.IntrospectionHelper.<init>(IntrospectionHelper.j\nava:177)\n        at org.apache.tools.ant.IntrospectionHelper.getHelper(IntrospectionHelpe\nr.java:439)\n        at org.apache.tools.ant.UnknownElement.handleChildren(UnknownElement.jav\na:312)\n        at org.apache.tools.ant.UnknownElement.configure(UnknownElement.java:176\n)\n        at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.jav\na:152)\n        at org.apache.tools.ant.Task.perform(Task.java:363)\n        at org.apache.tools.ant.Target.execute(Target.java:301)\n        at org.apache.tools.ant.helper.ProjectHelper2.parse(ProjectHelper2.java:\n135)\n        at org.apache.tools.ant.ProjectHelper.configureProject(ProjectHelper.jav\na:89)\n        at org.apache.tools.ant.Main.runBuild(Main.java:617)\n        at org.apache.tools.ant.Main.startAnt(Main.java:183)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:197)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:56)\nltiblx01:/mnt/ltias01/p4data/vriezenj5/MxEchoStreamFS/Mainline/ant #\nltiblx01:/mnt/ltias01/p4data/vriezenj5/MxEchoStreamFS/Mainline/ant # ant -\nversion\nUnable to locate tools.jar. Expected to find it in /usr/lib/SunJava2-\n1.3.1/lib/tools.jar\nApache Ant version 1.6.1 compiled on February 12 2004\nltiblx01:/mnt/ltias01/p4data/vriezenj5/MxEchoStreamFS/Mainline/ant #", "id": 55522, "time": "2004-04-08T14:26:36Z", "creator": "johnvriezen@mail.com", "creation_time": "2004-04-08T14:26:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28283, "attachment_id": 11185, "id": 55523, "time": "2004-04-08T14:28:10Z", "creator": "johnvriezen@mail.com", "creation_time": "2004-04-08T14:28:10Z", "is_private": false, "text": "Created attachment 11185\nAnt Build script"}, {"count": 2, "tags": [], "bug_id": 28283, "text": "I've now installed both 1.6.1 and 1.5.4.  I've noticed that in several cases \nwhere I get an OutOfMemory error under 1.6.1, the exact same script gives an \nreasonable error under 1.5.4 (i.e. referencing a non existing target name). \nWhen I fix the error, the problem goes away.  However, I have also seen the \nOutOfMemory problem occur with just a one token change of a path element (e.g. \nI had specified .../source/... instead of .../build/...   The script would run \nwith \"source\" but would get OutOfMemory with \"build\".  Unfortunately, I \nneeded \"build\".   I don't have those sources at this time-- I've moved on.", "id": 55524, "time": "2004-04-08T15:07:53Z", "creator": "johnvriezen@mail.com", "creation_time": "2004-04-08T15:07:53Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 28283, "attachment_id": null, "text": "I've now installed both 1.6.1 and 1.5.4.  I've noticed that in several cases \nwhere I get an OutOfMemory error under 1.6.1, the exact same script gives an \nreasonable error under 1.5.4 (i.e. referencing a non existing target name). \nWhen I fix the error, the problem goes away.  However, I have also seen the \nOutOfMemory problem occur with just a one token change of a path element (e.g. \nI had specified .../source/... instead of .../build/...   The script would run \nwith \"source\" but would get OutOfMemory with \"build\".  Unfortunately, I \nneeded \"build\".   I don't have those sources at this time-- I've moved on.\n", "id": 55525, "time": "2004-04-08T15:08:42Z", "creator": "johnvriezen@mail.com", "creation_time": "2004-04-08T15:08:42Z", "is_private": false}, {"count": 4, "tags": [], "creator": "debh@tdc.dk", "attachment_id": null, "id": 93497, "creation_time": "2006-09-13T07:44:52Z", "time": "2006-09-13T07:44:52Z", "bug_id": 28283, "text": "I'm working on a large project, that spans over several Ant build files (15 or\n16). Trying to minimize my job as a build manager, I've linked them all together\nin one build.xml, using ant and antcall targets, but that results in an\nOutOfMemoryException after a certain number of calls. I've done some testing\nwith the files, and it seems to be copy targets thats to blaime for the\nexception (we do a lot of copying, to refresh/setup the environment before our\nbuilds).", "is_private": false}, {"count": 5, "tags": [], "bug_id": 28283, "text": "Dennis:\n  I'm not sure whether your problem is related to the original report.  In any\nevent, we don't know of any <copy> bugs that would cause an OOME.  They might be\nthere, but examples that evoke the problem are helpful before we would know what\nto fix.  One thing that is certainly applicable to your situation is that <ant>\nand <antcall> EAT memory (also they are slower than other solutions).  Things\nyou can try:\n\nAlways, try the latest version of Ant (1.6.5, 1.7 beta).\nUse <import>s and <macrodef>s instead of <antcall>s where possible.  You can\nalso look into the various target-calling tasks from ant-contrib; in particular\nit has an alternative to <antcall> that does NOT create a new project.\nFinally, you can use ANT_OPTS to increase the memory allotted to Ant's JVM.\n\nFor more information on any of these topics, or to further discuss the issue\n(unless you have located what you are sure is a bug), please join Ant's user\nmailing list.\n\n-Matt", "id": 93512, "time": "2006-09-13T14:24:05Z", "creator": "mbenson@apache.org", "creation_time": "2006-09-13T14:24:05Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 28283, "text": "The copy task does use a lot of memory.\nIt keeps all the file names in memory, and for\neach file it has a list of target files.map(string->list)\n(This has changed from 1.5 to 1.6 files.map(string->string)).\n{or something similar}.\nThis does not scale for large number of files.\nTo handle large number of files, one needs a copy task\nthat is implemented like an iterator - does one input file\nat a time and moves to the next input file.\n", "id": 93517, "time": "2006-09-13T14:48:01Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-13T14:48:01Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 28283, "text": "(In reply to comment #6)\n> The copy task does use a lot of memory.\n> It keeps all the file names in memory, and for\n> each file it has a list of target files.map(string->list)\n> (This has changed from 1.5 to 1.6 files.map(string->string)).\n> {or something similar}.\n> This does not scale for large number of files.\n> To handle large number of files, one needs a copy task\n> that is implemented like an iterator - does one input file\n> at a time and moves to the next input file.\n> \n\nRight, I should have said that the implementation might be less than optimal. \nHowever, I wouldn't call it buggy.  In the case of <move> the mapping is IMO\ndefinitely necessary as it allows to determine whether the <move> applies to an\nentire directory tree so that the actual move process is much less complicated.\n For <copy> I can't think why we couldn't do 1 file at a time, but we would\nprobably need to cull duplicates first.  This might still be time and/or\nmemory-intensive... :|\n", "id": 93520, "time": "2006-09-13T14:56:59Z", "creator": "mbenson@apache.org", "creation_time": "2006-09-13T14:56:59Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 28283, "attachment_id": null, "text": "Matt:\nYou were right, I blamed the work task for my troubles. I did some more testing\non a simpler script, and found that it was a combination of antcall and\ntaskdef's for Ant-contrib. If the taskdef target was either beeing loadede in\nthe top of the build-file or in the target called by antcall, it more or less\naddede 1 MB of memory to the ant process per call.\n\n", "id": 93579, "time": "2006-09-14T13:25:29Z", "creator": "debh@tdc.dk", "creation_time": "2006-09-14T13:25:29Z", "is_private": false}, {"count": 9, "tags": [], "text": "Found the root cause of this.\nIH had a map of class->IH objects. The\nclass is the typedefed class and IH is the\nattributes, elements etc of that class.\nThis works fine, except that the class is kept\nuntil the build ends, this means that the classloader\nfor the class is also kept, a classloader contains\npointers to all the classes loaded by it - so a lot\nof memory can be blocked.\nWhen ant, or antcall is used and the called project\ntypedef the antcontrib, these will be new classloaders,\nhence the memory being used up.\n\nThe fix is to use the name of the class, check if the IH\nin the map is the same class, and if not replace that IH.", "attachment_id": null, "id": 94908, "creator": "peterreilly@apache.org", "time": "2006-10-17T14:56:01Z", "bug_id": 28283, "creation_time": "2006-10-17T14:56:01Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 28283, "text": "*** Bug 33061 has been marked as a duplicate of this bug. ***", "id": 94910, "time": "2006-10-17T14:59:25Z", "creator": "peterreilly@apache.org", "creation_time": "2006-10-17T14:59:25Z", "is_private": false, "attachment_id": null}]
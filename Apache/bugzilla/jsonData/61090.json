[{"count": 0, "tags": [], "bug_id": 61090, "is_private": false, "text": "I\u2019ve got an upstream application that sits behind mod_proxy. When a client POSTs a file upload via a form, that gets proxied to my application: mod_proxy appears to spool part of the file upload, then it starts sending..\n\nThe problem is that my application occasionally sends back a 307 or 308. My application, once it receives the headers and determines that it needs to redirect, sends the 307 response then close()s its side of the connection.\n\nFrom what I can see in the strace output between Apache and my application, though, Apache never poll()s to see if the upstream endpoint has sent a response. It just keeps sending the file upload, which eventually gives back ECONNRESET, in response to which I get errors in my Apache log, and the client gets a nasty 502 error.\n\nIt seems like Apache should be poll()ing for a read event on the upstream connection to detect whether it should stop proxying and instead forward on the response?", "id": 198772, "time": "2017-05-12T21:30:48Z", "creator": "felipe@felipegasper.com", "creation_time": "2017-05-12T21:30:48Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 61090, "text": "This actually happens on any early HTTP response, not just on 307s.", "id": 198788, "time": "2017-05-15T16:34:17Z", "creator": "felipe@felipegasper.com", "creation_time": "2017-05-15T16:34:17Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 61090, "attachment_id": null, "is_private": false, "id": 198789, "time": "2017-05-15T16:48:31Z", "creator": "felipe@felipegasper.com", "creation_time": "2017-05-15T16:48:31Z", "text": "Note that RFC 2616/8.2.4 specifies that clients SHOULD implement behavior such as this task describes:\n\n-------------\n If at any point an error status is received, the client\n\n      - SHOULD NOT continue and\n\n      - SHOULD close the connection if it has not completed sending the\n        request message."}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "text": "(In reply to felipe from comment #2)\n> Note that RFC 2616/8.2.4 specifies that clients SHOULD implement behavior\n> such as this task describes:\n> \n> -------------\n>  If at any point an error status is received, the client\n> \n>       - SHOULD NOT continue and\n> \n>       - SHOULD close the connection if it has not completed sending the\n>         request message.\n\nI think the PR is a useful requirement, but AFAICT this guidance above was not carried forward to httpbis (and even in 2616 there is no requirement to poll for a status code mid-request, so we cannot say it has been received).\n\nSee 7230 6.6 for expectations on how connections are safely torn down.", "id": 198790, "time": "2017-05-15T17:10:21Z", "bug_id": 61090, "creation_time": "2017-05-15T17:10:21Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 61090, "text": "Whether the upstream application does a \u201cstaged\u201d shutdown as 7230/6.6 envisions or does an abrupt close(), the change in mod_proxy would be the same, wouldn\u2019t it?\n\nMaybe mod_proxy wouldn\u2019t necessarily have to poll() for a read event unless ECONNRESET is received? I\u2019m not sure of the performance implications of poll()ing for 2 events regularly rather than just one, but I\u2019d think that would be the simplest way to handle the situation.", "id": 198791, "time": "2017-05-15T18:41:41Z", "creator": "felipe@felipegasper.com", "creation_time": "2017-05-15T18:41:41Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 61090, "text": "(In reply to felipe from comment #4)\n> Whether the upstream application does a \u201cstaged\u201d shutdown as 7230/6.6\n> envisions or does an abrupt close(), the change in mod_proxy would be the\n> same, wouldn\u2019t it?\n\nI don't think so, my assumption is that if the server had read the body, there would be no RST and the response would be read and returned as if it was a function of the body (as in a normal flow)\n\n> \n> Maybe mod_proxy wouldn\u2019t necessarily have to poll() for a read event unless\n> ECONNRESET is received? I\u2019m not sure of the performance implications of\n> poll()ing for 2 events regularly rather than just one, but I\u2019d think that\n> would be the simplest way to handle the situation.\n\nSeems like there is/was a risk in waiting for the write failure, the unread response might not still be given back to mod_proxy if the stack has seen the RST.", "id": 198792, "time": "2017-05-15T18:51:10Z", "creator": "covener@gmail.com", "creation_time": "2017-05-15T18:51:10Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "(In reply to Eric Covener from comment #5)\n> (In reply to felipe from comment #4)\n> > Whether the upstream application does a \u201cstaged\u201d shutdown as 7230/6.6\n> > envisions or does an abrupt close(), the change in mod_proxy would be the\n> > same, wouldn\u2019t it?\n> \n> I don't think so, my assumption is that if the server had read the body,\n> there would be no RST and the response would be read and returned as if it\n> was a function of the body (as in a normal flow)\n\nHaving the server read the (entire) POST body is wasteful, though: the client is \u201cwaiting for nothing\u201d.\n\n> \n> > \n> > Maybe mod_proxy wouldn\u2019t necessarily have to poll() for a read event unless\n> > ECONNRESET is received? I\u2019m not sure of the performance implications of\n> > poll()ing for 2 events regularly rather than just one, but I\u2019d think that\n> > would be the simplest way to handle the situation.\n> \n> Seems like there is/was a risk in waiting for the write failure, the unread\n> response might not still be given back to mod_proxy if the stack has seen\n> the RST.\n\nIt\u2019s definitely a less clean approach, true.", "is_private": false, "bug_id": 61090, "id": 198796, "time": "2017-05-15T21:12:54Z", "creator": "felipe@felipegasper.com", "creation_time": "2017-05-15T21:12:54Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 54838, "text": "I noticed the usage of StringBuffer in classes like ReadOnlySharedStringTable.java.\n\nSince POI isn't thread-safe, the StringBuffers could be replaced by StringBuilder which are faster, since they require no-locking. Same goes for possibly used Vectors etc.", "id": 166569, "time": "2013-04-13T10:01:34Z", "creator": "fabian.zeindl@gmail.com", "creation_time": "2013-04-13T10:01:34Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Any chance you could work up a patch for this, and some tests that show what the performance improvement works out as?", "attachment_id": null, "bug_id": 54838, "id": 166603, "time": "2013-04-14T17:59:26Z", "creator": "apache@gagravarr.org", "creation_time": "2013-04-14T17:59:26Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 54838, "text": "Not at the moment, sorry.\n\nMost of it could probably be done by simply replacing HashTable with HashMap, Vector with ArrayList and StringBuffer with StringBuilder, since I think they're all API-compatible.\n\nIf you are threading somewhere and make use of the thread-safety of these classes there, that would need special care. A quick search for the words \"synchronized\" and \"Thread\" gives some results, for example RecordContainer.java, HWPFOutputStream.java etc.\n\nIt's also possible that users use POI in a multi-threaded manner and it works for them because of the threadsafe Collections, or because they are lucky. This usage might be broken after changing that.\n\nRegards.", "id": 166608, "time": "2013-04-14T20:22:40Z", "creator": "fabian.zeindl@gmail.com", "creation_time": "2013-04-14T20:22:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "The general rule on POI and thread safety is that you should only ever have one thread working on a given file, but you should always be fine to have multiple threads each working on their own individual files.\n\nAs long as your patch (when you get a chance to write it!) keeps us within those rules, and makes it faster, it'll be much appreciated :)", "is_private": false, "bug_id": 54838, "id": 166609, "time": "2013-04-14T20:35:54Z", "creator": "apache@gagravarr.org", "creation_time": "2013-04-14T20:35:54Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": 30324, "id": 167416, "time": "2013-05-25T15:23:19Z", "bug_id": 54838, "creation_time": "2013-05-25T15:23:19Z", "is_private": false, "text": "Created attachment 30324\nList of places where StringBuffer or Vector are used currently\n\nI scanned the current source code for StringBuffer, Vector and HashTable. \n\nHashTable seems to be not used anywhere currently. \n\nFor StringBuffer and Vector I found 551 occurrences all over the place. \n\nI would not blindly start replacing all those, risking bugs or race-conditions being introduced underway, without some idea where in the code performance is important and should be improved. \n\nIs there a set of unit tests or enhanced tests which run a set of performance-sensitive operations which we can use to profile and analyze where performance improvements are best targeted at? Or are there certain things where you would like to gain performance which could benefit from using the non-thread-safe variants?"}, {"count": 5, "attachment_id": null, "bug_id": 54838, "is_private": false, "id": 176665, "time": "2014-07-24T16:43:26Z", "creator": "apache@gagravarr.org", "creation_time": "2014-07-24T16:43:26Z", "tags": [], "text": "In r1613186, I've updated the Vector uses that are clearly fine to ArrayList\n\nWhere a StringBuilder is used within a method, then toString'd at the end and discarded, I can't see why those can't be quickly and easily updated. Where the StringBuffer is persisted beyond one method in any way, or passed outside the method, then someone would need to think a little bit.\n\nDoes someone fancy updating the StringBuffer instances where are self contained (eg used in toString() methods)? We can then review what's left, which'll hopefully be a much smaller list"}, {"count": 6, "tags": [], "bug_id": 54838, "attachment_id": null, "id": 184582, "time": "2015-08-16T21:19:41Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-08-16T21:19:41Z", "is_private": false, "text": "I don't think it makes a lot of sense to start replacing those in all places and potentially introducing hard to find bugs in exchange for none or only minor performance improvements. We should rather find out cases where there is a performance penalty because of these and fix those cases one by one. \n\nFeel free to report bugs for any such place together with a simple unit-test which allows to see the effect of the change."}]
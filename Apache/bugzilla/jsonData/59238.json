[{"count": 0, "tags": [], "creator": "pporvatov@gmail.com", "text": "Upgraded from apache-tomcat-8.0.22 to apache-tomcat-8.0.33. Now websockets get messages (@OnMessage) even after the session is closed (by javax.websocket.Session#close(javax.websocket.CloseReason) method).\n\nThe following events occurred:\n1. invoke javax.websocket.Session#close(javax.websocket.CloseReason)\n\n2. invoked\n@OnClose\npublic void onClose(Session session, CloseReason closeReason) {\n\n3. after getting messages invoked\n@OnMessage\npublic void onMessage(Session session, ByteBuffer byteBuffer) {\n\nI'm expecting that the close method close the session and I shouldn't get messages anymore\n\nOS: Ubuntu 64 bits", "id": 189733, "time": "2016-03-27T08:04:46Z", "bug_id": 59238, "creation_time": "2016-03-27T08:04:46Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 59238, "text": "Hi,\n\nIs it possible to provide some sample application that shows the issue?\n\nThanks,\nVioleta", "id": 189734, "time": "2016-03-27T08:15:55Z", "creator": "violetagg@apache.org", "creation_time": "2016-03-27T08:15:55Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 59238, "attachment_id": null, "is_private": false, "id": 190155, "time": "2016-04-11T21:10:33Z", "creator": "markt@apache.org", "creation_time": "2016-04-11T21:10:33Z", "text": "I can see from code inspection how this could happen. I agree it looks odd on the face of it. I need to look carefully at the spec."}, {"count": 3, "tags": [], "bug_id": 59238, "attachment_id": null, "is_private": false, "id": 190158, "time": "2016-04-11T21:25:16Z", "creator": "markt@apache.org", "creation_time": "2016-04-11T21:25:16Z", "text": "Bizarre as it may seem, Tomcat's behaviour is consistent with the Java WebSocket specification.\n\n2.1.5 requires that onClose() is invoked as a result of calling session.close(). Before onClose() is invoked, the WebSocket close message is sent to the peer. However, it is not a requirement to wait for the peer to respond with a close message before invoking onClose().\n\nThe following sequence of events is therefore possible.\nApp calls session.onClose()\nClose msg sent to peer\nApp sees onClose() invoked\nPeer sends normal msg*\nPeer receives close msg\nPeer sends on close msg\nApp sees onMessage for msg*\n\nThere looks to be a case for separate local and remote onClose events. If you want to pursue that, you should open an issue against the WebSocket spec:\nhttps://java.net/jira/browse/WEBSOCKET_SPEC"}, {"count": 4, "tags": [], "bug_id": 59238, "attachment_id": null, "is_private": false, "id": 190502, "time": "2016-04-24T06:23:43Z", "creator": "pporvatov@gmail.com", "creation_time": "2016-04-24T06:23:43Z", "text": "Thanks for the response. I didn't find any comments about described situation in WebSocket spec, so the implementation can be selected by developers."}]
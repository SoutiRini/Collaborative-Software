[{"count": 0, "tags": [], "text": "Hi,\n\nI am using Ant version 1.7.1.\n\nNormally on a 64-bit machine, you can run both a 32-bit JVM and a 64-bit JVM. \nI have a class that loads a native library on a 64-bit architecture machine, and then uses it to do some processing. Hence, I want to load a 64-bit JVM.\n\nNow the class builds and runs using ANT. I am not able to load that native library using the ant command. Say I have a class TestLoader.java, which loads\nthe native library. I can compile and run it as:\n\njavac TestLoader.java\njava -d64 TestLoader -Djava.library.path=<my_path>\n\nPlease note that:\njava TestLoader        // This will load a 32-bit JVM.\n\n\nNow, when I compile and run this class through ANT, I am not able to do so.\n1. Ant does not recognize -d64 option; This is probably fine because you might\n   want me to pass VM args using ANT_OPTS variable. Unfortunately that does not \n  work, too.\n\n2. The ANT_OPTS variable also does not help in this case. \n   a) $> ant -DANT_OPTS=\"-d64\" run\n      This launches a 32 bit JVM. I used the \"sun.arch.data.model\" system \n      property to verify that. \n   b) On solaris:\n      $> setenv ANT_OPTS -d64; ant run\n         This also launches a 32 bit JVM. I explicitly printed the system \n         property to check that.\n   c) Surprisingly, on both of the above occasions, ant -diagnostics showed\n      the system property as 64, which I guess is wrong.\n\nCould you please take a look, and let me know if I am missing something. If there is a way to pass -d64 option to ANT, or if there is any other work-around which allows ANT to launch a 64-bit JVM underlying, I would be glad to know about it.\n\nRegards,\nHimanshu", "attachment_id": null, "id": 134172, "creator": "sharmah@deshaw.com", "time": "2010-02-03T03:16:34Z", "bug_id": 48664, "creation_time": "2010-02-03T03:16:34Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48664, "text": "you have to set ANT_OPTS as an environment variables before starting ant.\n\nso if you are on Windows, you would open a cmd box and do the following :\n\nSET ANT_OPTS=-d64\nant [arguments] ...\n\non Solaris, the way you are trying to start ant seems valid, so there might be a bug in the ant startup script.\n\nCould you start ant with the --execdebug flag ? this shows the full command line before actually starting ant.\n\nAttach the output to this bug report.\n\nRegards,\n\nAntoine", "id": 134181, "time": "2010-02-03T05:19:54Z", "creator": "antoine@apache.org", "creation_time": "2010-02-03T05:19:54Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48664, "attachment_id": null, "id": 134182, "time": "2010-02-03T05:37:19Z", "creator": "sharmah@deshaw.com", "creation_time": "2010-02-03T05:37:19Z", "is_private": false, "text": "Thanks for the reply Antoine. The output with a --execdebug flag shows that \n-d64 option is indeed added to the ANT command, but still the JVM launched\nis 32 bit. Where-as when I pass the same option directly to the \"java\" command\nit shows that the JVM launched is 64 bit.\n\nBest Regards,\nHimanshu\n\n--execdebug output: \nPlease note in this that the -d64 option is added properly, but the value of \"sun.arch.data.model\" property remains 32. But, this property expectedly changes to 64, when we use \"java -d64\"\n======\n$> ant --execdebug\n\nexec \"/usr/local/java/jdk/bin/java\" -d64 -classpath \"/prod/tools/infra/apache/ant-1.7.1/lib/ant-launcher.jar\" -Dant.home=\"/prod/tools/infra/apache/ant-1.7.1\" -Dant.library.dir=\"/prod/tools/infra/apache/ant-1.7.1/lib\" org.apache.tools.ant.launch.Launcher -cp \"\"\nBuildfile: build.xml\n\ncompile:\n\nrun:\n     [java] Value of sun.arch.data.model is 32               \n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n=======\n\n\nHere is an illustration of the original problem:\n========\n\n$> cat TestProperties.java                          \n// Sample java class to test the architecture of the launched JVM.\n\n\nimport java.util.Properties;\n\npublic class TestProperties\n{\n    public static void main(String[] args) {\n        String testProp = \"sun.arch.data.model\";\n        System.out.println(\"Value of \" + testProp + \" is \" +\n                           System.getProperty(testProp));\n    }\n}\n\n========\n// A sample ant build.xml file, so that we can compile/run \n// the above test class \n$> cat build.xml                                  \nusing ANT.\n<project default=\"run\">\n <target name=\"compile\">\n   <javac srcdir=\".\"/>\n </target>\n\n<target name=\"run\" depends=\"compile\">\n    <java classname=\"TestProperties\"\n          fork=\"true\">\n    </java>\n  </target>\n</project>\n\n========\n\n \n\nWhen I run the class directly using the java command it tells me whether it is running a 32bit JVM or a 64 bit JVM.\n\n \n\n$> javac TestProperties.java\n\n$> java TestProperties\nValue of sun.arch.data.model is 32                         // The launched JVM is 32-bit, which is the default behavior.\n$> java -d64 TestProperties\nValue of sun.arch.data.model is 64                         // The launched JVM is 64-bit.\n\n \n\n$> \\rm TestProperties.class                                // Remove that .class file that we compiled manually.\n\n \n\nNow using ANT, I am not able to reproduce the same:\n\nA) \n\n$> ant run\nBuildfile: build.xml\n\ncompile:\n\nrun:\n     [java] Value of sun.arch.data.model is 32                   // The launched VM is 32 bit, as expected\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n$>\n\nB) It does not directly accept the -d64 option.\n\nC) \n$> ant -DANT_OPTS=\"-d64\" run\n\n ant -DANT_OPTS=\"-d64\" run\nBuildfile: build.xml\n\ncompile:\n\nrun:\n     [java] Value of sun.arch.data.model is 32                      // The launched VM is still 32bit.\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nD)\n$> setenv ANT_OPTS \"-d64\"\n$> ant run\nBuildfile: build.xml\n\ncompile:\n\nrun:\n     [java] Value of sun.arch.data.model is 32                     // The launched VM is still 32bit.\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds"}, {"count": 3, "tags": [], "bug_id": 48664, "text": "OK, I have found the problem.\n\nIf you run a java program with fork=true from ant, this java program will not inherit VM args by default.\n\nChange your build file in this way :\n\n<!-- add a line to display the system properties known by ant -->\n<echoproperties/>\n<!-- add the clonevm attribute with the value true to clone VM parameters such as -d64 -->\n <java classname=\"TestProperties\"\n          fork=\"true\" clonevm=\"true\">\n    </java>\n\nSo there is no bug of ant.\n\n\nRegards,\n\nAntoine", "id": 134201, "time": "2010-02-03T12:26:14Z", "creator": "antoine@apache.org", "creation_time": "2010-02-03T12:26:14Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "The following issue is specific to MS Windows, where file system is case-insensitive, and it does not occur when the classes are inside a jar file (catalina.jar).\n\nI observed it in development environment, when trying to run Tomcat from its compiled sources without building a distributive.\n\nSteps to reproduce this issue with TC 6.0.20:\n----------------------------------------------\n1. Get and unpack apache-tomcat-6.0.20.zip\n2. In ${catalina.home}/lib folder unpack all classes from catalina.jar.\nRemove catalina.jar or rename it e.g. to catalina.ja_.\n\n3. In ${catalina.home}/conf/tomcat-users.xml add a user with role \"manager\"\n4. Launch Tomcat and login to the Manager application\n5. On the page that lists the web applications, click on the count of sessions for the manager webapp, i.e. access the following URL:\nhttp://localhost:8080/manager/html/sessions?path=/manager\n\n6. Expected result: Showing a list of sessions for the web app.\nActual result:\n---------\nFAIL - Encountered exception org.apache.jasper.JasperException: Unable to compile class for JSP: \n\nAn error occurred at line: 8 in the generated java file\nThe import org.apache.catalina.manager cannot be resolved\n---------\n\nThe issue is reproducible if the compiler is replaced with the latest one from eclipse-JDT-SDK-3.5RC3.zip of 200905282000.\n\nI cannot reproduce the issue independently when editing files in Eclipse IDE, so it is like it does not affect Eclipse users.\n\nI was looking in the code where Jasper calls the JDT compiler, and found the following, in method generateClass(String[]) of o.a.j.compiler.JDTCompiler:\n\n  final INameEnvironment env = new INameEnvironment() {\n    (..)\n                private boolean isPackage(String result) {\n                    if (result.equals(targetClassName)) {\n                        return false;\n                    }\n                    String resourceName = result.replace('.', '/') + \".class\";\n                    InputStream is = \n                        classLoader.getResourceAsStream(resourceName);\n                    return is == null;\n                }\n  }\n\nThe isPackage() method will provide false negative for \"o.a.c.manager\" package, because an attempt to read \"o.a.c.manager.class\" file will result in reading the \"Manager.class\" file and will be successful.\n\nI thought of proposing to rename either the class or the package, but it is not feasible, as there are a lot of other subpackages with similar name clashes in o.a.catalina: authenticator, realm, loader, session. :/\n\nThe workaround for this issue is to pack clashing classes into a jar file, or to use a different OS.", "id": 127703, "time": "2009-06-06T09:56:08Z", "bug_id": 47323, "creation_time": "2009-06-06T09:56:08Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 47323, "text": "*** Bug 39093 has been marked as a duplicate of this bug. ***", "count": 1, "id": 127705, "time": "2009-06-06T10:08:37Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2009-06-06T10:08:37Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 47323, "attachment_id": null, "text": "Can't see an easy way to fix this.", "id": 130332, "time": "2009-09-12T09:51:34Z", "creator": "markt@apache.org", "creation_time": "2009-09-12T09:51:34Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 47323, "text": "Correct the resolution - sorry for the noise.", "count": 3, "id": 130333, "time": "2009-09-12T09:51:59Z", "creator": "markt@apache.org", "creation_time": "2009-09-12T09:51:59Z", "is_private": false}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "*** Bug 56481 has been marked as a duplicate of this bug. ***", "id": 174984, "time": "2014-05-02T14:25:21Z", "bug_id": 47323, "creation_time": "2014-05-02T14:25:21Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 175026, "time": "2014-05-05T13:56:54Z", "bug_id": 47323, "creation_time": "2014-05-05T13:56:54Z", "is_private": false, "text": "Would it impact performance too much to request the resource as a URI and then examining the \"file\" in some way? Perhaps we could look for the possible package name as a directory first instead of looking only for a matching .class file.\n\nWe could also perform a list() to see if we get a zero-length resource list, but of course that takes longer."}, {"count": 6, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "> request the resource as a URI\n\nclassLoader.getResource(packageName)\n\nI suspect that it can break compilation for JARs that contain only files and do not have zip entries for directories. I mean, it will return null, a false negative. (It needs testing though whether my suspicion is true).\n\n\nBTW,\nthe strings arithmetics in org.apache.jasper.compiler.JDTCompiler$(new INameEnvironment).isPackage(char[][],char[]) is awful.\n\nIt uses += concatenating strings in a loop.", "id": 175047, "time": "2014-05-05T23:43:13Z", "bug_id": 47323, "creation_time": "2014-05-05T23:43:13Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 47323, "attachment_id": null, "text": "(In reply to Konstantin Kolinko from comment #6)\n> > request the resource as a URI\n> \n> classLoader.getResource(packageName)\n> \n> I suspect that it can break compilation for JARs that contain only files and\n> do not have zip entries for directories. I mean, it will return null, a\n> false negative. (It needs testing though whether my suspicion is true).\n\nAgreed. In the JARs we control, we could make sure that directories are included, but that won't help user code and 3rd-party libraries.\n\n> BTW,\n> the strings arithmetics in org.apache.jasper.compiler.JDTCompiler$(new\n> INameEnvironment).isPackage(char[][],char[]) is awful.\n> \n> It uses += concatenating strings in a loop.\n\nYikes. It's used all over the place in the \"new INameEnvironment\" construct. Also creating String objects out of char[] just to then concatenate with the ever-expanding String value.", "id": 175055, "time": "2014-05-06T17:13:35Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-05-06T17:13:35Z", "is_private": false}]
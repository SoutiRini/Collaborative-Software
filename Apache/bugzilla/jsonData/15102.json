[{"count": 0, "tags": [], "bug_id": 15102, "attachment_id": null, "text": "Subclasses of org.apache.poi.hssf.record.Record (NumberRecord, LSSTRecord, etc)\nreturn a short for getRow() and getColumn(). Excel (2002) can handle 65535 rows.\n\nD.", "id": 27457, "time": "2002-12-05T10:06:28Z", "creator": "dth@angry.com.au", "creation_time": "2002-12-05T10:06:28Z", "is_private": false}, {"count": 1, "tags": [], "creator": "poi-support@buni.org", "attachment_id": null, "id": 41304, "time": "2003-07-24T14:00:55Z", "bug_id": 15102, "creation_time": "2003-07-24T14:00:55Z", "is_private": false, "text": "wow...thats like....brief.  I totally don't understand it at all."}, {"count": 2, "tags": [], "text": "Ok, i'll try again.\n\nwhen dealing with large spreadsheets (> 32767 rows/columns) getRow() and \ngetColumn() stop being useful after row/column 32767 as they return a short (-\n2^15 -> 2^15-1), so the value wraps around. 32766, 32767, -32768, -32767, ...\n\nIt's an inconvenience having to check this and unsign the short manually.", "is_private": false, "id": 41474, "creator": "dth@angry.com.au", "time": "2003-07-25T01:59:47Z", "bug_id": 15102, "creation_time": "2003-07-25T01:59:47Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 15102, "text": "I agree this is a bug. It is not a good idea to use a short to represent an \nunsigned 16-bit value (which Java lacks). Explicit bounds checking should be \ndone to enforce a range of values instead. There is also no performance benefit \nto using anything smaller than an int--at the JVM level it is actually more \nexpensive to deal with shorts.\n", "id": 41724, "time": "2003-07-29T17:30:48Z", "creator": "chris@sixlegs.com", "creation_time": "2003-07-29T17:30:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jheight@apache.org", "attachment_id": null, "id": 65110, "time": "2004-10-14T03:40:31Z", "bug_id": 15102, "creation_time": "2004-10-14T03:40:31Z", "is_private": false, "text": "Fixed in HEAD."}]
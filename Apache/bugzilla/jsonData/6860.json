[{"count": 0, "attachment_id": null, "creator": "awidjaja@dwl.com", "text": "We have a problem with Log4J filtering in IBM Websphere 3.5.5. We filter our \nmessages based on the 5 categories (DEBUG, INFO, WARNING, ERROR, FATAL), so each \ntype of message goes to different files. We have no problem with this filtering \nusing IBM Websphere 3.5.4, but now using 3.5.5, it gives this error statement \nand it does not filter, all messages go to all 5 files. Could you please tell me \nwhere things go wrong? thanks\n\nlog4j:WARN Failed to set property filter to value\n\"org.apache.log4j.varia.PriorityMatchFilter\". No setter for property\n\nthis is our log.properties and a FileAppenderExt class look like\n\n# An example log4j configuration file that outputs both to System.out\n# and a file named 'test'.\n\n# For the general syntax of property based configuration files see the\n# documenation of org.apache.log4j.PropertyConfigurator.\n\n# WARNING: Location information can be useful but is very costly in\n# terms of computation.\n\n# The root category uses the appenders called A1 and A2. Since no\n# priority is set, the root category assumes the default which is\n# DEBUG.\n\n# sample - log4j.rootCategory=ERROR, A1, A2\nlog4j.rootCategory=DEBUG, A1, A2, A3, A4, A5\n\n# A is set to be FileAppender sending its output to System.out\nlog4j.appender.A1= com.dwl.base.logging.FileAppenderExt\nlog4j.appender.A2= com.dwl.base.logging.FileAppenderExt\nlog4j.appender.A3= com.dwl.base.logging.FileAppenderExt\nlog4j.appender.A4= com.dwl.base.logging.FileAppenderExt\nlog4j.appender.A5= com.dwl.base.logging.FileAppenderExt\n\n#\nlog4j.appender.A1.Filter=org.apache.log4j.varia.PriorityMatchFilter\nlog4j.appender.A1.PriorityToMatch=DEBUG\nlog4j.appender.A1.AcceptOnMatch=True\n\nlog4j.appender.A2.Filter=org.apache.log4j.varia.PriorityMatchFilter\nlog4j.appender.A2.PriorityToMatch=INFO\nlog4j.appender.A2.AcceptOnMatch=True\n\nlog4j.appender.A3.Filter=org.apache.log4j.varia.PriorityMatchFilter\nlog4j.appender.A3.PriorityToMatch=WARN\nlog4j.appender.A3.AcceptOnMatch=True\n\nlog4j.appender.A4.Filter=org.apache.log4j.varia.PriorityMatchFilter\nlog4j.appender.A4.PriorityToMatch=ERROR\nlog4j.appender.A4.AcceptOnMatch=True\n\nlog4j.appender.A5.Filter=org.apache.log4j.varia.PriorityMatchFilter\nlog4j.appender.A5.PriorityToMatch=FATAL\nlog4j.appender.A5.AcceptOnMatch=True\n\n# A1 uses PatternLayout.\nlog4j.appender.A1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A2.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A3.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A4.layout=org.apache.log4j.PatternLayout\nlog4j.appender.A5.layout=org.apache.log4j.PatternLayout\n\n\n# The conversion pattern consists of date in ISO8601 format, priority,\n# thread name, category name truncated to its rightmost two components\n# and left justified to 17 characters, location information consisting\n# of file name (padded to 13 characters) and line number, nested\n# diagnostic context, the and the application supplied message\n\nlog4j.appender.A1.layout.ConversionPattern=%d %-5p %3x - %m%n\nlog4j.appender.A2.layout.ConversionPattern=%d %-5p %3x - %m%n\nlog4j.appender.A3.layout.ConversionPattern=%d %-5p %3x - %m%n\nlog4j.appender.A4.layout.ConversionPattern=%d %-5p %3x - %m%n\nlog4j.appender.A5.layout.ConversionPattern=%d %-5p %3x - %m%n\n\n\nlog4j.appender.A1.File=/DWL/tcrm2/tcrm/logs/tcrm_debug.log\nlog4j.appender.A2.File=/DWL/tcrm2/tcrm/logs/tcrm_info.log\nlog4j.appender.A3.File=/DWL/tcrm2/tcrm/logs/tcrm_warn.log\nlog4j.appender.A4.File=/DWL/tcrm2/tcrm/logs/tcrm_error.log\nlog4j.appender.A5.File=/DWL/tcrm2/tcrm/logs/tcrm_fatal.log\n\npackage com.dwl.base.logging;\n\nimport org.apache.log4j.spi.Filter;\nimport org.apache.log4j.helpers.OptionConverter;\nimport org.apache.log4j.varia.PriorityMatchFilter;\n\n/**\n * An extendsion to FileAppender to be able to set filter\n * through property file\n *\n * Creation date: (9/17/01 11:21:41 AM)\n * @author: Wei Zheng VAJ353\n */\npublic class FileAppenderExt extends org.apache.log4j.FileAppender {\n\tprivate boolean acceptOnMatch;\n\tprivate String priority;\n\tprivate PriorityMatchFilter filter;\n/**\n * FileAppenderExt constructor comment.\n */\npublic FileAppenderExt() {\n\tsuper();\n}\n/**\n * FileAppenderExt constructor comment.\n * @param layout org.apache.log4j.Layout\n * @param os java.io.OutputStream\n */\npublic FileAppenderExt(org.apache.log4j.Layout layout, java.io.OutputStream os) \n{\n\tsuper(layout, os);\n}\n/**\n * FileAppenderExt constructor comment.\n * @param layout org.apache.log4j.Layout\n * @param writer java.io.Writer\n */\npublic FileAppenderExt(org.apache.log4j.Layout layout, java.io.Writer writer) {\n\tsuper(layout, writer);\n}\n/**\n * FileAppenderExt constructor comment.\n * @param layout org.apache.log4j.Layout\n * @param filename java.lang.String\n * @exception java.io.IOException The exception description.\n */\npublic FileAppenderExt(org.apache.log4j.Layout layout, String filename) throws \njava.io.IOException {\n\tsuper(layout, filename);\n}\n/**\n * FileAppenderExt constructor comment.\n * @param layout org.apache.log4j.Layout\n * @param filename java.lang.String\n * @param append boolean\n * @exception java.io.IOException The exception description.\n */\npublic FileAppenderExt(org.apache.log4j.Layout layout, String filename, boolean \nappend) throws java.io.IOException {\n\tsuper(layout, filename, append);\n}\n/**\n * Set the flag for filter for accept on match.<p>\n *\n * Creation date: (9/17/01 1:38:15 PM)<p>\n * @param acceptOnMatch boolean\n */\npublic void setAcceptOnMatch(boolean acceptOnMatch) {\n\tthis.acceptOnMatch = acceptOnMatch;\n\t\n\tif (filter != null) {\n        filter.setAcceptOnMatch(acceptOnMatch);\n\t}\n}\n/**\n * Create and set appender filter.<p>\n *\n * Creation date: (9/17/01 11:22:39 AM)<p>\n * @param filterType java.lang.String\n */\npublic void setFilter(String filterType) {\n    filter = (PriorityMatchFilter) OptionConverter.instantiateByClassName(\n\t\t\tfilterType,\n            org.apache.log4j.spi.Filter.class,\n            null);\n    \n    this.addFilter(filter);\n    \n    if (priority != null) {\n\t    filter.setAcceptOnMatch(acceptOnMatch);\n\t    filter.setPriorityToMatch(priority);\n    }\n}\n/**\n * Set priority to match on filter.<p>\n *\n * Creation date: (9/17/01 1:37:29 PM)<p>\n * @param priority java.lang.String\n */\npublic void setPriorityToMatch(String priority) {\n\tthis.priority = priority;\n\t\n    if (filter != null) {\n\t    filter.setPriorityToMatch(priority);\n    }\n}\n}", "id": 11451, "time": "2002-03-04T21:38:04Z", "bug_id": 6860, "creation_time": "2002-03-04T21:38:04Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "creator": "ceki@apache.org", "is_private": false, "id": 15669, "time": "2002-05-07T20:56:10Z", "bug_id": 6860, "creation_time": "2002-05-07T20:56:10Z", "tags": [], "text": "\nThis is not a bug report but a user support request. Next time, please redirect \nyour question to log4j-user. The problem stems from the fact that the \nPropertyConfigurator does not know to handle filters and also because our \nproperty introspection mechanism does not handle parameters of type Filter. Use \nthe DOMConfigurator instead. "}]
[{"count": 0, "tags": [], "bug_id": 27852, "attachment_id": null, "id": 54402, "creation_time": "2004-03-22T17:09:18Z", "time": "2004-03-22T17:09:18Z", "creator": "brice.copy@cern.ch", "text": "POI reports invalid HSSFName that are in fact VB functions. This somehow causes\nan EmptyStackException. There does not seem to be any workaround to this problem.\n\nVB functions can accept a Name as their parameter (=a VB object of type Range).\nYou can reference such a VB function in a formula, like any other built-in excel\nfunction.\n\nWhen POI opens a workbook containing cells that use a formula referencing a\nname, it reports a name for each formula referencing a name. Of course, the\nreported HSSFName object is invalid, as its field_13_name_definition member is\nan empty stack, while the field_13_raw_name_definition is null.\n\nFrom the HSSF usermodel package, there is no way to tell the difference between\na valid HSSFName (referencing a name defined in the excel workbook) and an\ninvalid one (referencing a function that uses a name as its argument).\n\nWhen trying to access an invalid HSSFName, the following exception occurs :\n\njava.util.EmptyStackException\n\n\tjava.lang.Object java.util.Stack.peek()\n\n\t\tStack.java:82\n\n\tjava.lang.String\norg.apache.poi.hssf.record.NameRecord.getAreaReference(org.apache.poi.hssf.model.Workbook)\n\n\t\tNameRecord.java:705\n\n\tjava.lang.String org.apache.poi.hssf.usermodel.HSSFName.getReference()\n\n\t\tHSSFName.java:126\n\n\nTO REPRODUCE THIS BUG :\n\n- Save the provided test case (an excel file defining two simple functions and\ntwo names)\n- Open the test case with the attached java test case.\n- If you debug, you will notice that POI reports four HSSFName objects (while\nonly two are defined in the excel file) \n- The test case should fail with an EmptyStackException - because POI does not\ncheck the validity of the HSSFName object before getting its reference)", "is_private": false}, {"count": 1, "attachment_id": 10908, "bug_id": 27852, "text": "Created attachment 10908\nThe excel file to reproduce the problem", "id": 54403, "time": "2004-03-22T17:09:56Z", "creator": "brice.copy@cern.ch", "creation_time": "2004-03-22T17:09:56Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 27852, "text": "Created attachment 10909\nJava test case to reproduce the problem", "id": 54404, "time": "2004-03-22T17:21:04Z", "creator": "brice.copy@cern.ch", "creation_time": "2004-03-22T17:21:04Z", "is_private": false, "attachment_id": 10909}, {"count": 3, "text": "Created attachment 12353\nHere's a patch to version 1.15 of NameRecord.java - in diff unified format", "bug_id": 27852, "attachment_id": 12353, "id": 61637, "time": "2004-08-06T15:55:24Z", "creator": "brice.copy@cern.ch", "creation_time": "2004-08-06T15:55:24Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 27852, "attachment_id": null, "id": 61671, "creation_time": "2004-08-08T22:07:47Z", "time": "2004-08-08T22:07:47Z", "creator": "jheight@apache.org", "text": "Avik,\n\nSince you're arround formulas, Care to have a look at this patch by Brice? There\nis also a testcase which should be translated into the unit tests.\n\nJason", "is_private": false}, {"count": 5, "tags": [], "creator": "avik@apache.org", "attachment_id": null, "id": 74232, "time": "2005-04-28T16:32:39Z", "bug_id": 27852, "creation_time": "2005-04-28T16:32:39Z", "is_private": false, "text": "Applied, thanks. But is this enuf? This patch applies some checks to prevent the\nexception, getReference now returns \"#REF!\" for these name records. Should there\nbe any other api to access some of this info, or does POI already provide\ncorrect info?"}]
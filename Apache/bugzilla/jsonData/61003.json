[{"count": 0, "tags": [], "bug_id": 61003, "is_private": false, "text": "Created attachment 34924\nThe stack trace\n\nWe encounter the following exception (full stack attached) instead of a proper exception, such as a time out:\n\njava.lang.IllegalStateException: Concurrent write operations are not permitted\n\tat org.apache.tomcat.websocket.AsyncChannelWrapperSecure.write(AsyncChannelWrapperSecure.java:116)\n\nAsyncChannelWrapperSecure javadoc interestingly states \"This needs a lot more testing before it can be considered robust.\", and indeed this class seems to be the cause of the issue. More details about what I suspect is going on:\n\n\nIf you take a closer look at WsRemoteEndpointImplBase.sendMessageBlock line 313, you will find this section:\n\n         for (MessagePart mp : messageParts) {\n            writeMessagePart(mp);\n            if (!bsh.getSendResult().isOK()) {\n                messagePartInProgress.release();\n                Throwable t = bsh.getSendResult().getException();\n // Bug alert!! Here we will write again, but may not have reset the writing flag of AsyncChannelWrapperSecure to false \n                wsSession.doClose(new CloseReason(CloseCodes.GOING_AWAY, t.getMessage()),\n                        new CloseReason(CloseCodes.CLOSED_ABNORMALLY, t.getMessage()));\n                throw new IOException (t);\n            }\n\nwhich is problematic: The writeMessagePart method will eventually call doWrite of WsRemoteEndpointImplClient, which will simply return in case of exceptions:\n\n  try {\n                channel.write(byteBuffer).get(timeout, TimeUnit.MILLISECONDS);\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                handler.onResult(new SendResult(e));\n                return;\n            }\n\nSo here, when the get fails, the  WriteTask of AsyncChannelWrapperSecure, will not have finished, and so will not have unset its write flag, meaning that the wsSession.doClose call done in WsRemoteEndpointImplBase.sendMessageBlock will fail to write. \nMoreover, the write flag of the WriteTask is not reset in the finally block, meaning that any other exception thrown by the write task will cause the completion of the future, but will not allow to write in the ws either, causing another failure.\n\nThis will mean that it will fail to throw the actual cause of the exception stored in the SendResult.\n\n\nSide Note: the ReadTask seems to suffer of the same disease, not sure if it is immune to it.", "id": 198338, "time": "2017-04-18T15:50:03Z", "creator": "adc@activeviam.com", "creation_time": "2017-04-18T15:50:03Z", "attachment_id": 34924}, {"count": 1, "tags": [], "creator": "markt@apache.org", "text": "If you add  writing.set(false); /  reading.set(false); to the catch blocks of the WriteTask and ReadTask respectively, does that improve things?", "id": 198384, "time": "2017-04-19T20:34:07Z", "bug_id": 61003, "creation_time": "2017-04-19T20:34:07Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "Without any feedback, I intend to go ahead and apply the proposed change from comment #1 and then resolve this issue.", "bug_id": 61003, "attachment_id": null, "id": 198629, "time": "2017-05-02T10:03:09Z", "creator": "markt@apache.org", "creation_time": "2017-05-02T10:03:09Z", "tags": [], "is_private": false}, {"count": 3, "text": "Hi,\n\nThanks for the report.\nThe fix was committed in:\n- trunk for 9.0.0.M21 onwards\n- 8.5.x for 8.5.15 onwards\n- 8.0.x for 8.0.44 onwards\n- 7.0.x for 7.0.78 onwards\n\nRegards,\nVioleta", "creator": "violetagg@apache.org", "attachment_id": null, "id": 198664, "time": "2017-05-04T11:34:09Z", "bug_id": 61003, "creation_time": "2017-05-04T11:34:09Z", "tags": [], "is_private": false}]
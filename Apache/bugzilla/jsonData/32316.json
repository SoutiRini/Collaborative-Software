[{"count": 0, "text": "Limiting new application sessions if load is to high.\n\nThis enhancement should prevent complex systems from being flooded if some\nbackend system gets stuck or answers too slowly for some time. Users already\nlogged into an application might still be able to work successfully, but new\nusers get a very fast static response to prevent the incoming channels\n(TCP-Connections, Threads, ...) from being flooded.\n\nImplementation suggestion\n\nUse a mod_jk-configurable start URL for the application (regexp based). If a\nrequest X matches this URL, then mod_jk checks the scoreboard how many apache\nrequests are being processed simultaneously at that moment. There is a\nconfigurable limit, and if that limit is reached, the request X will not be sent\nto tomcat, but instead be answered by some configurable  \"local\" static response\n(containing the info, that the load is to high and the user should try again\nlater). Alternatively one can configure X to be answered by some external redirect. \n\nAlthough the mechanism is for prevention of the application, counting tomcat\nrequests or counting all requests (inclusive static ones) does not really make a\ndifference according to our experiance. Static content usually serves in very\nwell under a second (depending mostly on internet speed). The idea here is to\ndetect a problem with the application getting slow, e.g. because of backend\nsystems not responding fast enough. In this situation we want to limit creation\nof new sessions.\n\nExample: During normal operation there are 5 static requests in work and\n10 dynamic ones (that take much longer to complete). When there is a\nproblem with backend systems we might have 15 static ones, but more than\n100 dynamic ones. So either counting or ommiting the static ones seems to\nmake no big difference.\n\nYou might want to take a look at the attached patch \"patch_overload.txt\"\nfor jk/native/apache1.3/mod_jk.c version 1.52. I don't have a patch for\nApache 2, but Mladen Turk has something similar for Apache 2. This patch here\nplaces every change inside \"#ifdef OVERLOAD\". Also there are some\nDEBUG-Log-Statements put inside \"#ifdef DEBUG\" which I\nassume can now be done more consistently with Mladen Turks TRACE features.\n\nOf course the \"best\" observable value would be the number of requests\nbelonging to the same webapp. So some possible enhancement would be to\ncount only requests with a fix URL prefix (that's not yet contained in the\npatch).", "bug_id": 32316, "attachment_id": null, "id": 67210, "time": "2004-11-19T13:36:20Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2004-11-19T13:36:20Z", "tags": [], "is_private": false}, {"count": 1, "text": "Created attachment 13500\nOverload limiter for mod_jk/apache1.3", "creator": "rainer.jung@kippdata.de", "is_private": false, "id": 67211, "time": "2004-11-19T13:39:13Z", "bug_id": 32316, "creation_time": "2004-11-19T13:39:13Z", "tags": [], "attachment_id": 13500}, {"count": 2, "tags": [], "bug_id": 32316, "is_private": false, "text": "This should be considered for the 1.3 branch of mod_jk,\nbecause it is too complex for the exiting implementation.", "id": 76945, "time": "2005-07-03T11:15:49Z", "creator": "mturk@apache.org", "creation_time": "2005-07-03T11:15:49Z", "attachment_id": null}, {"count": 3, "text": "This should be done using a separate module, like e.g. mod_qos or similar.", "creator": "rainer.jung@kippdata.de", "is_private": false, "id": 180103, "time": "2014-12-31T15:06:57Z", "bug_id": 32316, "creation_time": "2014-12-31T15:06:57Z", "tags": [], "attachment_id": null}]
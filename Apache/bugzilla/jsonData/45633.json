[{"attachment_id": 22447, "tags": [], "creator": "cvolozhin@pragmaticsoft.com", "is_private": false, "count": 0, "id": 119835, "time": "2008-08-14T06:56:29Z", "bug_id": 45633, "creation_time": "2008-08-14T06:56:29Z", "text": "Created attachment 22447\nPPT file\n\nWrong table cells position in slide. Relative to slide coorditates, not to table. POI code taken from SVN trunk a couple days ago.\n\nCode snippet here:\n\nimport java.io.*;\n\nimport org.apache.poi.hslf.model.*;\nimport org.apache.poi.hslf.usermodel.*;\n\n\npublic class JustPOI {\n\n    public static void main(String[] args) {\n\n\n        SlideShow ppt = null;\n        \n        try {\n            ppt = new SlideShow(new FileInputStream(\"PST.ppt\"));\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        \n        Slide slide = ppt.getSlides()[0];\n        Shape shape = slide.getShapes()[2];\n\n        // Create table data array\n        \n        String[] row1 = new String[3];\n        row1[0] = \"Project Name\";\n        row1[1] = \"ProjectID\";\n        row1[2] = \"Priority\";\n        \n        String[] row2 = new String[3];\n        row2[0] = \"Test Work\";\n        row2[1] = \"-\";\n        row2[2] = \"-\";\n\n        String[][] tableData = new String[2][3];\n        tableData[0] = row1;\n        tableData[1] = row2;\n        \n        Table pptTable = new Table(2, 3);\n        \n        for (int i = 0; i < pptTable.getNumberOfRows(); i++) {\n            String[] rowData = tableData[i];\n            for (int j = 0; j < pptTable.getNumberOfColumns(); j++) {\n                TableCell pptCell = pptTable.getCell(i, j);\n                    String cellData = rowData[j];\n                    if (cellData != null) {\n                        pptCell.setText(cellData);\n                        RichTextRun rt = pptCell.getTextRun().getRichTextRuns()[0];\n                        rt.setFontName(\"Arial\");\n                        rt.setFontSize(10);\n                    }\n            }\n        }\n        \n        pptTable.setAnchor(shape.getAnchor());\n        \n        slide.removeShape(shape);\n        slide.addShape(pptTable);\n        \n        try {\n            ppt.write(new FileOutputStream(\"PST_out.ppt\"));\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n\n        \n    }\n\n}"}, {"count": 1, "tags": [], "bug_id": 45633, "attachment_id": 22448, "is_private": false, "id": 119836, "time": "2008-08-14T07:01:32Z", "creator": "cvolozhin@pragmaticsoft.com", "creation_time": "2008-08-14T07:01:32Z", "text": "Created attachment 22448\nResult file screenshot\n\nin Microsoft Powerpoint 2002"}, {"count": 2, "tags": [], "bug_id": 45633, "is_private": false, "text": "I would say it's a feature of HSLF, not a bug.\nIn PowerPoint table is a special group of shapes that must be tightly packed and follow certain layout constraints. When you call Table.setAnchor then only the Table's anchor is updated. The anchors of child table cells remain the same and that is why PowerPoint displays it incorrectly.\n\nBelow is a workaround:\n\n    public static void main(String[] args) {\n\n\n        SlideShow ppt = null;\n\n        try {\n            ppt = new SlideShow(new FileInputStream(\"PST.ppt\"));\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n\n        Slide slide = ppt.getSlides()[0];\n        Shape shape = slide.getShapes()[2];\n        Rectangle anchor = shape.getAnchor();\n\n        // Create table data array\n\n        String[] row1 = new String[3];\n        row1[0] = \"Project Name\";\n        row1[1] = \"ProjectID\";\n        row1[2] = \"Priority\";\n\n        String[] row2 = new String[3];\n        row2[0] = \"Test Work\";\n        row2[1] = \"-\";\n        row2[2] = \"-\";\n\n        String[][] tableData = new String[2][3];\n        tableData[0] = row1;\n        tableData[1] = row2;\n\n        Table pptTable = new Table(2, 3);\n\n        for (int i = 0; i < pptTable.getNumberOfRows(); i++) {\n            String[] rowData = tableData[i];\n            for (int j = 0; j < pptTable.getNumberOfColumns(); j++) {\n                TableCell pptCell = pptTable.getCell(i, j);\n                String cellData = rowData[j];\n                if (cellData != null) {\n                    pptCell.setText(cellData);\n                    RichTextRun rt =\n                            pptCell.getTextRun().getRichTextRuns()[0];\n                    rt.setFontName(\"Arial\");\n                    rt.setFontSize(10);\n                }\n            }\n        }\n\n        slide.removeShape(shape);\n\n        pptTable.setAllBorders(new Line());\n\n        //HSLF \"feature\": resizing columns / rows works AFTER the table is added to the slide\n        slide.addShape(pptTable);\n\n        int rowHeight = anchor.height/pptTable.getNumberOfRows();\n        int colWidth = anchor.width/pptTable.getNumberOfColumns();\n\n        //evenly distribute columns and rows\n        for (int i = 0; i < pptTable.getNumberOfRows(); i++) {\n            pptTable.setRowHeight(i, rowHeight);\n            for (int j = 0; j < pptTable.getNumberOfColumns(); j++) {\n                pptTable.setColumnWidth(j, colWidth);\n            }\n        }\n\n        //set top-left corner of the table\n        pptTable.moveTo(anchor.x, anchor.y);\n\n        try {\n            ppt.write(new FileOutputStream(\"PST_out.ppt\"));\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n\n\n    }\n\nSummary: Set the table dimensions using Table.setRowHeight and Table.setColumnWidth and then set the Table's top-left corner. Don't use Table.setAnchor.\n\nYegor", "id": 119897, "time": "2008-08-18T11:24:23Z", "creator": "yegor@dinom.ru", "creation_time": "2008-08-18T11:24:23Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 22233, "is_private": false, "text": "MaxMemFree is ignored (without comment in the error log) by the winnt MPM.", "id": 42366, "time": "2003-08-08T00:35:03Z", "creator": "wrowe@apache.org", "creation_time": "2003-08-08T00:35:03Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 22233, "attachment_id": null, "is_private": false, "id": 42367, "time": "2003-08-08T00:46:01Z", "creator": "jwoolley@apache.org", "creation_time": "2003-08-08T00:46:01Z", "text": "http://httpd.apache.org/docs-2.0/mod/mpm_common.html#maxmemfree \n \nThe MaxMemFree directive is supplied by mpm_common.  It sets the value of a global \nvariable, ap_max_mem_free, which is supposed to be read by the mpm and passed \nto a call like: \n \napr_allocator_max_free_set(allocator, ap_max_mem_free); \n \nwhere allocator is an allocator that you just created with apr_allocator_create() and \nsubsequently pass to apr_pool_create_ex().  The problem is that the winnt mpm \ndoesn't use apr_allocator_create() or apr_pool_create_ex() at all; it just uses \napr_pool_create(), which takes the allocator from the pool's parent.  That allocator \nhas no maximum set on it. \n \nWhat needs to happen is that you need one allocator (no mutex) per transaction pool.  \nBut what with the various recycling that gets done in that mpm, i was unclear what all \nneeded to be modified to store the allocator and pass it around with its associated \ntransaction pool. \n \nOnce that's done, then we can create our bucket allocator with the upcoming \napr_bucket_alloc_create_ex(), which will take an allocator (that same one) rather than \na pool.  This makes everything Just Work(tm).  :) \n \n--Cliff \n \n wrowe-travels adds even a trivial comment toapr_allocator_max_free_set(allocator, \nap_max_mem_free); \n all such bugs to keep them on  \nhis 'interesting' query \n<wrowe-travels> I would like to get 2.1 SSL -> 2.0 ssl before .48 - it's a project for  \nthe weekend. \n<jwoolley> the value set by this directive is completely ignored by the winnt mpm \n<jwoolley> no PR# \n<jwoolley> it's been an outstanding issue for like a year now \n<wrowe-travels> Sander Temme and I have been spending the week running  \nSSL2.1 (within httpd-2.0) regressions and such \n<wrowe-travels> Hm... no pr, open issue  ..  Would seem to follow :) \n<jwoolley> ;) \n<wrowe-travels> Adding now \n<jwoolley> i didn't actually realize until circa .47 that it wasn't honored by  \nmpm/winnt.  but i've known that support for it wrt bucket brigades' allocators was  \nmissing from all mpms since about a year ago.  i got a little sidetracked you could  \nsay ;) \n<jwoolley> up until now it's only controlled the size of the freelists used by pools'  \nallocators, but that's not the way it ought to be. \n<jwoolley> so i fixed it.  in the mpm's that have support for it in the first place.  :) \n<wrowe-travels> :-) \n<jwoolley> there's a global var called (i think) ap_max_mem_free that you just  \nhave to pass to the appropriate apr_allocator_create_ex() call at the appropriate  \ntime. \n<wrowe-travels> Well I'd be happy to help hack with this. \n<wrowe-travels> Can you write up one para onto 22233? \n<wrowe-travels> http://nagoya.apache.org/bugzilla/show_bug.cgi?id=22233 \n<jwoolley> the problem is that i'm unclear about how the lifetimes work with all of  \nthe completion contexts and recycling and such. \n<wrowe-travels> that gives me a hint on the variables and cite a line of code in  \nworker or prefork mpm? \n<wrowe-travels> I don't mind dealing with those issues "}, {"count": 2, "attachment_id": null, "bug_id": 22233, "text": "FirstBill committed a fix for this to 2.1-dev yesterday.\n", "id": 47913, "time": "2003-11-22T02:24:43Z", "creator": "trawick@apache.org", "creation_time": "2003-11-22T02:24:43Z", "tags": [], "is_private": false}]
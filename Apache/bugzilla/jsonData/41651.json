[{"count": 0, "attachment_id": null, "creator": "m4341@abc.se", "is_private": false, "id": 99518, "time": "2007-02-17T06:14:16Z", "bug_id": 41651, "creation_time": "2007-02-17T06:14:16Z", "tags": [], "text": "SC_NOT_MODIFIED assumes that a cached instance of an object is present, but\ndocuments served over a secure connection shouldn't be cached. There are also\nother cases where the SC_NOT_MODIFIED status shouldn't be returned, but for\nsimplicity I leave these out for now:\n\nAssuming that a secure HTTP connection is used, and that the user is\nauthenticated by Basic authentication with read access (operations GET,\nPROPFIND, OPTIONS, LOCK and UNLOCK are permitted)\n\nA specific problem occurs when using Microsoft Word to access a WebDAV stored\ndocument over https as follows:\n1. Open the document from the server.\n2. Edit the document.\n3. Try to save the document, but the permissions doesn't allow saving so the\nsave fails with an error message in Word. (but Word writes the document to the\nweb cache, (fault 1))\n4. Close MS Word.\n5. Open the document from MS Word again. What happens now is that word first\nlooks into the local cache and discovers the document that was written there\nduring the attempted save and therefore does a request with the header field\n\"if-none-match\" over the secure connection. (fault 2) Then the server is\nvalidating that header field and returns a 304 (SC_NOT_MODIFIED) instead of\nignoring the \"if-none-match\" data (fault2) and send the file.\n\nThis is mostly a problem with MS WebDAV, but if the SC_NOT_MODIFIED isn't sent\nfor the following cases the problem should be reduced:\n\n1. No SC_NOT_MODIFIED for secure HTTP connections.\n2. If it's possible to verify that no caching shall occur the SC_NOT_MODIFIED\nshouldn't be sent either. (this case may be a real problem)\n\nOne way around that I have attempted at first was to implement a filter, but\nthere is no easy way (that I have found) to filter certain headers from a\nHttpServletRequest. If the headers could be manipulated in a filter that would\nactually be an easy way around the problem. i.e.\nsetHeader()/removeHeader()-methods for the HttpServletRequest (or superclass).\n\nThe problem with this condition is that it may be the cause for confusion since\ndocuments may appear different on one client compared to another client while\naccessing the same source. From my point of view it's mostly a Microsoft\nproblem, but this doesn't say that it can't occur with other applications as well."}, {"count": 1, "attachment_id": null, "bug_id": 41651, "is_private": false, "id": 99768, "time": "2007-02-25T19:46:50Z", "creator": "markt@apache.org", "creation_time": "2007-02-25T19:46:50Z", "tags": [], "text": "Reading through this report I see one potential Tomcat issue, making use of the\nif-none-match header and returning a 304 if the request is over HTTPS. However,\nI can't find any relevant specification that states Tomcat must (or even should)\nignore an if-none-match header when the request is over HTTPS. I am therefore\nresolving this report as INVALID.\n\nIf you are aware of part of a specification I have overlooked, please feel free\nto re-open this report and provide a reference to that specification."}]
[{"attachment_id": null, "tags": [], "bug_id": 48760, "text": "When serving a 1.8MB file, Tomcat 6.0.16->6.0.20 (all versions tested), will occasionally throw a BadFileNumber exception and only serve part of the file. The rate of occurrence is roughly a few times a day under high load, but we have stress tools which can reliably reproduce this issue, and multiple continuous wget connections can reproduce the issue, as well.\n\nWe are serving a large SWF application, although this may affect arbitrary binary data. To reproduce this issue, serve a large file (at least 1.8MB, in our case), and continuously request the file over a period of several hours to a few days; this issue happens intermittently, but it is reproducible.\n\nThis problem is especially critical to us, as we use apache as a cache in front of tomcat. For whatever reason, apache aggressively caches this bad data and never again requests the file, although this is probably another unrelated problem. In this configuration, however, after the file has gone bad, all users get served corrupt files, causing the application to break entirely. \n\nThis was reported in 2008 here, but the issue was dismissed:\nhttp://mail-archives.apache.org/mod_mbox/tomcat-dev/200808.mbox/%3Cbug-45601-78@https.issues.apache.org/bugzilla/%3E\n\nThe fix provided here works to resolve the issue, but our IT department cannot support a custom-rolled version of tomcat indefinitely. It's not a sustainable solution, and this issue should affect other users. We are not sure why the fix works, but it does resolve our completely reproducible scenario. Ideally, then, someone with more knowledge of tomcat could understand why this fix works and what, exactly, it's solving, and then integrate this into the main tomcat release line.\n\nHere is how the error appears in the logs:\nFeb 16, 2010 1:25:59 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet default threw exception\njava.io.IOException: Bad file number\n\tat java.io.FileInputStream.readBytes(Native Method)\n\tat java.io.FileInputStream.read(FileInputStream.java:199)\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:256)\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:317)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:90)\n\tat org.apache.catalina.servlets.DefaultServlet.copyRange(DefaultServlet.java:1968)\n\tat org.apache.catalina.servlets.DefaultServlet.copy(DefaultServlet.java:1714)\n\tat org.apache.catalina.servlets.DefaultServlet.serveResource(DefaultServlet.java:809)\n\tat org.apache.catalina.servlets.DefaultServlet.doGet(DefaultServlet.java:325)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:690)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n\tat org.apache.catalina.ha.session.JvmRouteBinderValve.invoke(JvmRouteBinderValve.java:209)\n\tat org.apache.catalina.ha.tcp.ReplicationValve.invoke(ReplicationValve.java:347)\n\tat org.terracotta.modules.tomcat.tomcat_5_5.SessionValve55.invoke(SessionValve55.java:57)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)\n\tat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n\tat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n\tat java.lang.Thread.run(Thread.java:619)", "count": 0, "id": 134614, "time": "2010-02-17T20:44:37Z", "creator": "arcanefang@gmail.com", "creation_time": "2010-02-17T20:44:37Z", "is_private": false}, {"count": 1, "tags": [], "creator": "remm@apache.org", "text": "An exact duplicate already exists, so no need to open a new bug. Mark's comments are also perfectly sensible, don't you agree ?\n\n*** This bug has been marked as a duplicate of bug 45601 ***", "id": 134616, "time": "2010-02-17T22:07:35Z", "bug_id": 48760, "creation_time": "2010-02-17T22:07:35Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "arcanefang@gmail.com", "text": "(In reply to comment #1)\n> An exact duplicate already exists, so no need to open a new bug. Mark's\n> comments are also perfectly sensible, don't you agree ?\n> \n> *** This bug has been marked as a duplicate of bug 45601 ***\n\nThat bug was resolved invalid, and none of the response comments are helpful or correct in any way. This IS an issue, and it's reproducible. The original poster did not give a reproducible scenario, and I believe I have. As such, I believe that the previous ticket should be reopened with this exact test scenario as proof of the bug (high load, large binary file), or this ticket should stay open as it stands.\n\nThis bug is critically damaging our successful deployment under Tomcat, and it's something that needs to be resolved, rather than closed because those involved don't understand the problem. A reproducible bug is a bug whether it is understandable or not.", "id": 134620, "time": "2010-02-17T23:04:19Z", "bug_id": 48760, "creation_time": "2010-02-17T23:04:19Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 134621, "time": "2010-02-17T23:17:09Z", "bug_id": 48760, "creation_time": "2010-02-17T23:17:09Z", "is_private": false, "text": "(In reply to comment #2)\n> This IS an issue, and it's reproducible.\n\nBeing reproducible is not sufficient, on its own, to make it a Tomcat bug. There are plenty of other possible causes. Please see https://issues.apache.org/bugzilla/show_bug.cgi?id=45601#c3 and follow the advice there."}, {"count": 4, "tags": [], "bug_id": 48760, "is_private": false, "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> > This IS an issue, and it's reproducible.\n> \n> Being reproducible is not sufficient, on its own, to make it a Tomcat bug.\n> There are plenty of other possible causes. Please see\n> https://issues.apache.org/bugzilla/show_bug.cgi?id=45601#c3 and follow the\n> advice there.\n\nThe only advice is this:\n\n\"A Google search suggests that a lack of OS resources could also be a cause of\nthis error. Given that the environment is highly threaded, and taking this to\nalso mean highly loaded, this looks more like a JVM/OS issue to me.\"\n\nResource usage is next to nothing on the servers I've run against. Furthermore, even if this is an OS/JVM issue, will you simply drop all claims of support for Solaris? I've tested against multiple JVM versions, and this does not seem to affect the performance of Tomcat. This may only be an issue with Solaris, but if the price of Solaris support is a \"a negligible performance impact\", then why not implement the fix, noting that it only corrects the Solaris environment? Not integrating a fix because it \"should work\" is absurd from a practical, 'my-business-application-really-needs-to-work-or-I'll-lose-money' mindset.\n\nYou claim that the fix would exacerbate the issue, which it did not. Clearly, the issue is not well-enough understood to make such sweeping statements. I do not have the time to spend the next month researching the internals of Tomcat and Solaris to understand why this specific test scenario fails repeatedly. As an pragmatic person, I fail to understand why a clear solution for a popular server operating system backed by Sun with a slow release cycle with minimal negative impact would be rejected.\n\nI claim that unless someone can prove that the fix is explicitly harmful, with actual test data, the fix should be implemented, as it has been proven explicitly helpful with actual test data.\n\nIs this not a rational argument?", "id": 134622, "time": "2010-02-17T23:33:50Z", "creator": "arcanefang@gmail.com", "creation_time": "2010-02-17T23:33:50Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 48760, "text": "What the patch will do is that it disables the content cache, which is used for small files. As a result, only big files will be accessed, and apparently your great/mature/stable OS does not like that usage pattern.", "id": 134624, "time": "2010-02-17T23:59:55Z", "creator": "remm@apache.org", "creation_time": "2010-02-17T23:59:55Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 134625, "time": "2010-02-18T00:01:04Z", "bug_id": 48760, "creation_time": "2010-02-18T00:01:04Z", "tags": [], "text": "https://issues.apache.org/bugzilla/show_bug.cgi?id=45601#c3 sets out the circumstances under which the patch would be applied and points to a resource to help figure out the necessary information. If you choose not to go down that route, that is your choice.\n\nWithout an understanding of why the problem occurs and how the patch addresses it there is no certainty that the root cause will be fixed or that other users won't see regressions.\n\nGiven the patch does address it for you, there are ways to reduce the burden of running a patched Tomcat version to no more than a couple of minutes of additional work per upgrade. Again, the users list can help with this."}, {"attachment_id": null, "tags": [], "bug_id": 48760, "is_private": false, "count": 7, "id": 134626, "time": "2010-02-18T00:03:42Z", "creator": "arcanefang@gmail.com", "creation_time": "2010-02-18T00:03:42Z", "text": "(In reply to comment #5)\n> What the patch will do is that it disables the content cache, which is used for\n> small files. As a result, only big files will be accessed, and apparently your\n> great/mature/stable OS does not like that usage pattern.\n\nI have no particular fondness for Solaris, but I'm not a fool. I understand that it's a major server OS, and for it to simply \"not-be-supported\" is completely unacceptable. If the benefits of the fix (removes complete breakage) outweighs the costs of implementing the fix (negligable performance loss, solvable with bigger hardware?), then I think the fix should be implemented.\n\nTell me how my argument is incorrect, please."}, {"count": 8, "tags": [], "creator": "arcanefang@gmail.com", "text": "(In reply to comment #6)\n> https://issues.apache.org/bugzilla/show_bug.cgi?id=45601#c3 sets out the\n> circumstances under which the patch would be applied and points to a resource\n> to help figure out the necessary information. If you choose not to go down that\n> route, that is your choice.\n> \n> Without an understanding of why the problem occurs and how the patch addresses\n> it there is no certainty that the root cause will be fixed or that other users\n> won't see regressions.\n> \n> Given the patch does address it for you, there are ways to reduce the burden of\n> running a patched Tomcat version to no more than a couple of minutes of\n> additional work per upgrade. Again, the users list can help with this.\n\nMark, I will address your concerns in turn.\n\n1.) This is clearly an issue *with Tomcat*. For every person that chooses to serve a large file through Tomcat, should they also lose months of productivity to obscure, hard to trace down bugs that have been documented and reproduced? As network connections and bandwidth continually improve, the chance that businesses choose to send down bigger, richer files is likely to increase (think larger images, swfs, etc.). As such, this is clearly an issue if Tomcat expects to continue being a viable Servlet container. Tomcat solves a number of problems for a number of people, but if it cannot support the growing trends in web development (more data, richer data), then surely it will fail. Failing to address this issue not only hurts the product as a whole, but it sets a dangerous precedent for all future bug finds.\n\n2.) Would you like performance metrics with a week of constant load, or real world usage data to confirm my claims? I can provide all of that, but as I am not a Tomcat developer, I cannot give you a mathematical proof as to why the fix works. The original posters ideas were discarded, so I cannot say why exactly the fix works. I do know, however, that for two built deployments of Tomcat 1.6.16->latest, one with the fix and one without, I can reliably reproduce the problem on the unpatched version with load generation tools (and wget), and I cannot reproduce the problem on the patched version (even with  unrealistically high load).\n\n3.) So then, you agree that there's a simple solution to the root cause of my problem, and it's a small change to the source base? As an application developer, I cannot suddenly become responsible for the entirety of the Tomcat code base. If you extend this scenario, any small problem *you* or *I* can not understand thoroughly should be self-maintained, correct? As problems increase, the reliability of the main Tomcat distribution would then become questionable. \n\nConclusion:\n\nI submit that unless the problem can be proven harmful (via whatever automated test systems currently exist, or real life usage data), then the patch should be implemented. If no such tests exist, or no one can prove the patch harmful to the stability of Tomcat, then why not implement? There is a strong business case to implement the patch, and there is a weak case against implementation. \n\nIf this does cause regressions for any party, then they can log an issue as I did. Remember that the optimization has not always existed, so at some point, the implementation of the optimization DID cause regressions, but you just didn't see it. This optimization removal would be an undoing of a -problem- introduced into the tomcat source in 5.5, rather than an out-of-nowhere fix that may cause issues. Regressions weren't a concern in 5.5, and they shouldn't be a concern now, when real data is involved to prove the fix viable and the previous optimization unstable.", "id": 134627, "time": "2010-02-18T00:21:18Z", "bug_id": 48760, "creation_time": "2010-02-18T00:21:18Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 48760, "attachment_id": null, "text": "Une cacheObjectMaxSize=\"0\" on the Context element and stop wasting your time posting nonsense ...", "id": 134629, "time": "2010-02-18T00:34:58Z", "creator": "remm@apache.org", "creation_time": "2010-02-18T00:34:58Z", "is_private": false}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> Une cacheObjectMaxSize=\"0\" on the Context element and stop wasting your time\n> posting nonsense ...\n\nRemy, your comment does not make sense.\n\nAs per the documentation, files over 512KB are not cached (default setting). My file is 1.8MB large; I stated this in my initial bugpost.\n\nDocs:\nhttp://tomcat.apache.org/tomcat-6.0-doc/config/context.html\n\nFurthermore, I even tried this supposed fix (although it made no sense given the documentation), and it did not work. The only fix for this issue, still, is to remove the \"optimization\" introduced in Tomcat 5-5.", "is_private": false, "bug_id": 48760, "id": 134664, "time": "2010-02-18T17:01:18Z", "creator": "arcanefang@gmail.com", "creation_time": "2010-02-18T17:01:18Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "arcanefang@gmail.com", "text": "gfuser9999@yahoo.co.uk has presented a reasoned explanation of what is happening below. Apparently, this is a problem that needs to be backported from Glassfish.\n\nI've copied the e-mail below:\n\nNow, really the REAL bug fix in Tomcat you need to port \nback from\n Glassfish is actually this \n\nhttp://fisheye5.cenqua.com/changelog/glassfish?cs=SJSAS91_FCS_BRANCH%3Asultal%3A20080904082511\n\nThis is the actual root cause for 45601 which is not\nupdated back to Tomcat bug entry in the late 2008 but \nthis is the RCA and is fixed in SUN Glassfish Application\nserver (where they share the same common TC code).\n\n--------------------------\nHere's the salient point:\n--------------------------\n0. You notice the issue happens in DefaultServlet copyRange\n   as all your submitters submit\n\n- The code all do something like this\n   InputStream resourceInputStream \n      = cacheEntry.resource.streamContent();\n\n1. So they all take a FileResource/Resource from\n   a cache entry  (which is looked up from some cache)\n\n2. Now We know that this is a FileResource (static resource)\n\n3. Finally most of the code will have this\n\n   reader = new\n InputStreamReader(resourceInputStream,\n                               fileEncoding);\n   copyRange(reader,....) <-- do something\n   reader.close();\n\n4.\n Now, you notice that reader.close() will CLOSE\n   the underlying FileInputStream when it is run.\n\n5. Hence, there is a SUBTLE race in FileResource.streamContent\n   where a TWO or more threads get the SAME InputStream.\n   This is due to the FACT that multiple requests can\n   get hold of the same cached entry and hence due to\n   the BAD way the FileResource streamContent stuff the\n   InputStream to a temp instance variable.. \n\n   Due to MT scheduling (it is possible to get a MT schedule\n   where two threads gets the some common InputStream.)\n   [Please see TC code to see why this can happen]\n\nTesting?\n------------\nIt is easy to ARTIFICIALLY reproduce & to confirm\nYou can slow things down in the\n FileResource.streamContent()\nby putting delays and etc (or also printing\nthe resulting InputStream in the copy while\ndoing two or more parallel wget for the same\nFileResource of filesize of some large MB to see.", "id": 134674, "time": "2010-02-18T20:02:19Z", "bug_id": 48760, "creation_time": "2010-02-18T20:02:19Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "markt@apache.org", "text": "Bingo. That looks like the sort of analysis that is needed to move this forward. Re-opening to take a look at this potential race condition.\n\nNote that we can't just copy the Glassfish patch without jumping through some legal licensing hoops that I'd prefer to avoid.", "id": 134675, "time": "2010-02-18T20:26:25Z", "bug_id": 48760, "creation_time": "2010-02-18T20:26:25Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "Based in the analysis in comment 11, I can see a couple of places where there is a problem. These have been fixed in trunk and the patch proposed for 6.0.x and 5.5.x (http://svn.apache.org/viewvc?rev=920858&view=rev)\n\nStefan: Are you able to confirm that using this patch rather than the one in bug 45601 still fixes the issue for you? I remain concerned that you may be seeing a different issue as I can't see a reason, apart from just altering the execution timing, why the bug 45601 patch should fix / work around the issue described in comment 11.", "attachment_id": null, "bug_id": 48760, "id": 135191, "time": "2010-03-09T13:40:52Z", "creator": "markt@apache.org", "creation_time": "2010-03-09T13:40:52Z", "is_private": false}, {"count": 14, "attachment_id": null, "creator": "arcanefang@gmail.com", "text": "(In reply to comment #13)\n> Based in the analysis in comment 11, I can see a couple of places where there\n> is a problem. These have been fixed in trunk and the patch proposed for 6.0.x\n> and 5.5.x (http://svn.apache.org/viewvc?rev=920858&view=rev)\n> \n> Stefan: Are you able to confirm that using this patch rather than the one in\n> bug 45601 still fixes the issue for you? I remain concerned that you may be\n> seeing a different issue as I can't see a reason, apart from just altering the\n> execution timing, why the bug 45601 patch should fix / work around the issue\n> described in comment 11.\n\nThe fix seemed to slow the issue, but further testing indicated that this problem was still caused with the patch in 45601. This may have been specific to the timing of our specific system; changing code willy-nilly would alter the frequency at which we would see issues. It's good to hear that a *true* fix has been proposed for 5.5.x/6.0.x .", "id": 135202, "time": "2010-03-09T15:12:46Z", "bug_id": 48760, "creation_time": "2010-03-09T15:12:46Z", "tags": [], "is_private": false}, {"id": 135203, "tags": [], "bug_id": 48760, "attachment_id": null, "count": 15, "text": "Thanks for that feedback on the patch in bug 45601. That does make it more likely the issue you are seeing is fixed by the patch in r920858 but you obviously need to test that yourself to be 100% sure.", "time": "2010-03-09T15:18:42Z", "creator": "markt@apache.org", "creation_time": "2010-03-09T15:18:42Z", "is_private": false}, {"count": 16, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 135256, "time": "2010-03-10T22:45:45Z", "bug_id": 48760, "creation_time": "2010-03-10T22:45:45Z", "is_private": false, "text": "The patch (r920858) was applied to Tomcat 5.5, will be in 5.5.29 onwards."}, {"count": 17, "attachment_id": null, "creator": "arcanefang@gmail.com", "text": "(In reply to comment #16)\n> The patch (r920858) was applied to Tomcat 5.5, will be in 5.5.29 onwards.\n\nr920858 definitively solves our problem. Is there an estimate for when this will be available in a stable release of 6.0.x?", "id": 135635, "time": "2010-03-25T18:01:03Z", "bug_id": 48760, "creation_time": "2010-03-25T18:01:03Z", "tags": [], "is_private": false}, {"count": 18, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 135637, "time": "2010-03-25T18:27:40Z", "bug_id": 48760, "creation_time": "2010-03-25T18:27:40Z", "tags": [], "text": "(In reply to comment #17)\nIt is already proposed for 6.0 (see the STATUS file in svn). All that is needed is 1) third vote from some committer so that it can be applied, 2) wait for the release to happen, 3) test the release to ensure that it is stable."}, {"attachment_id": null, "tags": [], "bug_id": 48760, "is_private": false, "count": 19, "id": 135638, "time": "2010-03-25T18:33:34Z", "creator": "arcanefang@gmail.com", "creation_time": "2010-03-25T18:33:34Z", "text": "(In reply to comment #18)\n> (In reply to comment #17)\n> It is already proposed for 6.0 (see the STATUS file in svn). All that is needed\n> is 1) third vote from some committer so that it can be applied, 2) wait for the\n> release to happen, 3) test the release to ensure that it is stable.\n\nGood to know. Thanks!"}, {"count": 20, "attachment_id": null, "bug_id": 48760, "text": "This has been fixed in 6.0.x and will be included in 6.0.27 onwards.", "id": 136004, "time": "2010-04-11T09:32:24Z", "creator": "markt@apache.org", "creation_time": "2010-04-11T09:32:24Z", "tags": [], "is_private": false}, {"count": 21, "tags": [], "text": "(In reply to comment #20)\n> This has been fixed in 6.0.x and will be included in 6.0.27 onwards.\n\nIs there an ETA on the release of 6.0.27?", "is_private": false, "bug_id": 48760, "id": 137287, "time": "2010-06-02T15:48:37Z", "creator": "mattmull82@gmail.com", "creation_time": "2010-06-02T15:48:37Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 47841, "is_private": false, "text": "Created attachment 24266\ncatalina.out - with errors\n\nI have the following configuration in server.xml to enable authentication\nagainst both the ldap servers and user realm. This works perfectly except for\nif both the ldap servers are unreachable, Tomcat doesn't fall back to the user\nrealm. When I start Tomcat up the requests just hang waiting for a connection\ntimeout. \n\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n\n             <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                       resourceName=\"UserDatabase\"/>\n\n             <Realm className=\"org.apache.catalina.realm.JNDIRealm\"\n                       connectionName=\"${jndi.connectionName}\"\n                       connectionPassword=\"${jndi.connectionPassword}\"\n\n                       connectionURL=\"${jndi.connectionURL}\"\n                       alternateURL=\"${jndi.alternateURL}\"\n\n                       userBase=\"${jndi.userBase}\"\n                       userSearch=\"${jndi.userSearch}\"\n                       userSubtree=\"${jndi.userSubtree}\"\n\n                       roleBase=\"${jndi.roleBase}\"\n                       roleName=\"${jndi.roleName}\"\n                       roleSearch=\"${jndi.roleSearch}\"\n                       roleSubtree=\"${jndi.roleSubtree}\"\n\n             />\n\n\n      </Realm>", "id": 130400, "time": "2009-09-15T02:01:07Z", "creator": "edward.quick@igindex.co.uk", "creation_time": "2009-09-15T02:01:07Z", "attachment_id": 24266}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 132216, "time": "2009-11-22T14:50:41Z", "bug_id": 47841, "creation_time": "2009-11-22T14:50:41Z", "tags": [], "text": "In the scenario you describe, with the configuration provided, Tomcat will try the UserdatabaseRealm first and then the JNDIRealm.\n\nIf the LDAP server isn't available, then Tomcat will wait for the connection to time out.\n\nThe timeout is not currently configurable. It is debatable how useful that would be since if the LDAP server was down, you system is likely to have real issues.\n\nIf you have a use case where configuring the timeout would be useful, please create an enhancement request. Enhancement requests with patches and a good justification usually get looked at faster."}, {"id": 132233, "tags": [], "bug_id": 47841, "attachment_id": null, "count": 2, "text": "\n\n(In reply to comment #1)\n> In the scenario you describe, with the configuration provided, Tomcat will try\n> the UserdatabaseRealm first and then the JNDIRealm.\n> \n> If the LDAP server isn't available, then Tomcat will wait for the connection to\n> time out.\n> \n> The timeout is not currently configurable. It is debatable how useful that\n> would be since if the LDAP server was down, you system is likely to have real\n> issues.\n> \n> If you have a use case where configuring the timeout would be useful, please\n> create an enhancement request. Enhancement requests with patches and a good\n> justification usually get looked at faster.\n\nMark,\n\nThanks for your reply. \n\nI tested this again, and what surprises me is that if LDAP were down (I simulated this by changing the ldap port number in jndi.connectionURL), then Tomcat won't serve anything. Surely non-protected content should be served regardless of what is going on with LDAP, but I can't even get to the tomcat home page.\n\nI can think of 2 reasons to add a configurable timeout for LDAP:\n\n1. To stop tcp requests stacking up on the server.\n2. To aid the user trying to log in, at least realise there's a problem on the server side (and not the client).\n\nRegards,\n\nEdward.", "time": "2009-11-23T01:53:21Z", "creator": "edward.quick@igindex.co.uk", "creation_time": "2009-11-23T01:53:21Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 3, "id": 132844, "time": "2009-12-15T15:31:01Z", "bug_id": 47841, "creation_time": "2009-12-15T15:31:01Z", "text": "Ah, I see what is going on here. If one of the nested realms fails to start, the combined realm fails to start. That doesn't seem like a good idea. I'll fix that so the combined realm logs an error but carries on. I'll also look at making the LDAP timeout configurable."}, {"text": "I have fixed the issue on realm start and also added a connection timeout attribute to the JNDIRealm. These changes have been applied to trunk and proposed for 6.0.x", "tags": [], "bug_id": 47841, "is_private": false, "count": 4, "id": 132855, "time": "2009-12-16T03:09:40Z", "creator": "markt@apache.org", "creation_time": "2009-12-16T03:09:40Z", "attachment_id": null}, {"id": 132932, "tags": [], "bug_id": 47841, "attachment_id": null, "count": 5, "text": "Hi Mark,\n\nJust to let you know I have tested out your fix for the combined realm and that works perfectly.\n This is the output I saw in catalina.out. Even though tomcat couldn't contact ldap, it carried on working as usual\n and I was able to log in with the UserDatabaseRealm instead.\n\nThanks for your help on this.\n\nEdward.\n\n\nINFO: Starting Servlet Engine: Apache Tomcat/7.0.0-dev\n18-Dec-2009 15:22:45 org.apache.catalina.realm.JNDIRealm open\nWARNING: Exception performing authentication\njavax.naming.CommunicationException: lmprdinf901.companyx.local:390 [Root exception is java.net.ConnectException: Connection refused: connect]\n        at com.sun.jndi.ldap.Connection.<init>(Connection.java:197)\n        at com.sun.jndi.ldap.LdapClient.<init>(LdapClient.java:118)\n        at com.sun.jndi.ldap.LdapClient.getInstance(LdapClient.java:1580)\n        at com.sun.jndi.ldap.LdapCtx.connect(LdapCtx.java:2652)\n        at com.sun.jndi.ldap.LdapCtx.<init>(LdapCtx.java:293)\n        at com.sun.jndi.ldap.LdapCtxFactory.getUsingURL(LdapCtxFactory.java:175)\n        at com.sun.jndi.ldap.LdapCtxFactory.getUsingURLs(LdapCtxFactory.java:193)\n        at com.sun.jndi.ldap.LdapCtxFactory.getLdapCtxInstance(LdapCtxFactory.java:136)\n        at com.sun.jndi.ldap.LdapCtxFactory.getInitialContext(LdapCtxFactory.java:66)\n        at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:667)\n        at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:288)\n        at javax.naming.InitialContext.init(InitialContext.java:223)\n        at javax.naming.InitialContext.<init>(InitialContext.java:197)\n        at javax.naming.directory.InitialDirContext.<init>(InitialDirContext.java:82)\n        at org.apache.catalina.realm.JNDIRealm.open(JNDIRealm.java:1951)\n        at org.apache.catalina.realm.JNDIRealm.start(JNDIRealm.java:2043)\n        at org.apache.catalina.realm.CombinedRealm.start(CombinedRealm.java:237)\n        at org.apache.catalina.realm.LockOutRealm.start(LockOutRealm.java:112)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1037)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:451)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:516)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:726)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\nCaused by: java.net.ConnectException: Connection refused: connect\n        at java.net.PlainSocketImpl.socketConnect(Native Method)\n        at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n        at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)\n        at java.net.Socket.connect(Socket.java:525)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at com.sun.jndi.ldap.Connection.createSocket(Connection.java:336)\n        at com.sun.jndi.ldap.Connection.<init>(Connection.java:184)\n        ... 28 more\n18-Dec-2009 15:22:46 org.apache.catalina.realm.CombinedRealm start\nSEVERE: Failed to start \"org.apache.catalina.realm.JNDIRealm/1.0\" realm\nLifecycleException:  Exception opening directory server connection:  javax.naming.CommunicationException: lmprdinf902.ig\ni.ig.local:390 [Root exception is java.net.ConnectException: Connection refused: connect]\n        at org.apache.catalina.realm.JNDIRealm.start(JNDIRealm.java:2045)\n        at org.apache.catalina.realm.CombinedRealm.start(CombinedRealm.java:237)\n        at org.apache.catalina.realm.LockOutRealm.start(LockOutRealm.java:112)\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1037)\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:451)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:516)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:726)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDescriptor\nINFO: Deploying configuration descriptor host-manager.xml\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDescriptor\nINFO: Deploying configuration descriptor manager.xml\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory docs\n18-Dec-2009 15:22:46 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory examples\n18-Dec-2009 15:22:47 org.apache.catalina.startup.HostConfig deployDirectory\nINFO: Deploying web application directory ROOT\n18-Dec-2009 15:22:47 org.apache.coyote.http11.Http11Protocol start\nINFO: Starting Coyote HTTP/1.1 on http-8080\n18-Dec-2009 15:22:47 org.apache.coyote.http11.Http11Protocol start\nINFO: Starting Coyote HTTP/1.1 on http-8443\n18-Dec-2009 15:22:47 org.apache.coyote.ajp.AjpProtocol start\nINFO: Starting Coyote AJP/1.3 on ajp-8009", "time": "2009-12-18T07:36:45Z", "creator": "edward.quick@igindex.co.uk", "creation_time": "2009-12-18T07:36:45Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 47841, "attachment_id": null, "id": 132933, "time": "2009-12-18T07:44:54Z", "creator": "markt@apache.org", "creation_time": "2009-12-18T07:44:54Z", "is_private": false, "text": "Glad it works. Just leaving this open until the fix is actually applied to 6.0.x"}, {"count": 7, "attachment_id": null, "creator": "markt@apache.org", "text": "Fix applied to 6.0.x and will be in 6.0.21 onwards.", "id": 132966, "time": "2009-12-19T18:33:04Z", "bug_id": 47841, "creation_time": "2009-12-19T18:33:04Z", "tags": [], "is_private": false}]
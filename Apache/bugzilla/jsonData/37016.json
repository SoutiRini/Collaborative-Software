[{"count": 0, "tags": [], "creator": "daniela.gradim@mobila-kontoret.se", "attachment_id": null, "is_private": false, "id": 80978, "time": "2005-10-11T08:11:00Z", "bug_id": 37016, "creation_time": "2005-10-11T08:11:00Z", "text": "Hi All\n\nSince last week I have this problem with authentication using ssl\nauthentication and Windows. The same configuration has worked for more\nthan 6 months. There is more than 10 companys under <directory>.\n\nThe problem is when I try to login from Firexfox Linux it makes\nrenegotitian many times and after 3 4 times it's possible to login but\nif I try from IE Windows I get the message \"Cannot Find the server\". The\nmessage error is list above\n\nFedora Core 3\napache 2.0.52\nmod_ssl-2.0.53-3.3\nhttpd-2.0.53-3.3\nopenssl-0.9.7a-42.1\n\n\"Does anyone know how to solve this problem? To me it seems like it\nbehaves like some old bug. Any ideas?\"\n\nBest Regards\n\nssl.conf\n#\n# This is the Apache server configuration file providing SSL support.\n# It contains the configuration directives to instruct the server how to\n# serve pages over an https connection. For detailing information about\nthese \n# directives see <URL:http://httpd.apache.org/docs-2.0/mod/mod_ssl.html>\n# \n# Do NOT simply read the instructions in here without understanding\n# what they do.  They're here only as hints or reminders.  If you are\nunsure\n# consult the online docs. You have been warned.  \n#\n\nLoadModule ssl_module modules/mod_ssl.so\n\n#   Until documentation is completed, please check\nhttp://www.modssl.org/\n#   for additional config examples and module docmentation.  Directives\n#   and features of mod_ssl are largely unchanged from the mod_ssl\nproject\n#   for Apache 1.3.\n\n#\n# When we also provide SSL we have to listen to the \n# standard HTTP port (see above) and to the HTTPS port\n#\nListen 443\n\n##\n##  SSL Global Context\n##\n##  All SSL configuration in this context applies both to\n##  the main server and all SSL-enabled virtual hosts.\n##\n\n#\n#   Some MIME-types for downloading Certificates and CRLs\n#\nAddType application/x-x509-ca-cert .crt\nAddType application/x-pkcs7-crl    .crl\n\n#   Pass Phrase Dialog:\n#   Configure the pass phrase gathering process.\n#   The filtering dialog program (`builtin' is a internal\n#   terminal dialog) has to provide the pass phrase on stdout.\nSSLPassPhraseDialog  builtin\n\n#   Inter-Process Session Cache:\n#   Configure the SSL Session Cache: First the mechanism \n#   to use and second the expiring timeout (in seconds).\n#SSLSessionCache        none\n#SSLSessionCache         dbm:/var/cache/mod_ssl/scache(512000)\n#SSLSessionCache        dc:UNIX/var/cache/mod_ssl/distcache\nSSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)\nSSLSessionCacheTimeout  500\n\n#   Semaphore:\n#   Configure the path to the mutual exclusion semaphore the\n#   SSL engine uses internally for inter-process synchronization. \nSSLMutex default\n\n#   Pseudo Random Number Generator (PRNG):\n#   Configure one or more sources to seed the PRNG of the \n#   SSL library. The seed data should be of good random quality.\n#   WARNING! On some platforms /dev/random blocks if not enough entropy\n#   is available. This means you then cannot use the /dev/random device\n#   because it would lead to very long connection times (as long as\n#   it requires to make more entropy available). But usually those\n#   platforms additionally provide a /dev/urandom device which doesn't\n#   block. So, if available, use this one instead. Read the mod_ssl User\n#   Manual for more details.\nSSLRandomSeed startup file:/dev/urandom  256\nSSLRandomSeed connect builtin\n#SSLRandomSeed startup file:/dev/random  512\n#SSLRandomSeed connect file:/dev/random  512\n#SSLRandomSeed connect file:/dev/urandom 512\n\n#\n# Use \"SSLCryptoDevice\" to enable any supported hardware\n# accelerators. Use \"openssl engine -v\" to list supported\n# engine names.  NOTE: If you enable an accelerator and the\n# server does not start, consult the error logs and ensure\n# your accelerator is functioning properly. \n#\nSSLCryptoDevice builtin\n#SSLCryptoDevice ubsec\n\n##\n## SSL Virtual Host Context\n##\n\n<VirtualHost _default_:443>\n\n# General setup for the virtual host, inherited from global\nconfiguration\n#DocumentRoot \"/var/www/html\"\nDocumentRoot /home/httpd/html\n\n#ServerName www.example.com:443\nServerName ulla\n\n# Use separate log files for the SSL virtual host; note that LogLevel\n# is not inherited from httpd.conf.\nErrorLog logs/ssl_error_log\nTransferLog logs/ssl_access_log\nLogLevel debug\n\n#   SSL Engine Switch:\n#   Enable/Disable SSL for this virtual host.\nSSLEngine on\n\n#   SSL Cipher Suite:\n#   List the ciphers that the client is permitted to negotiate.\n#   See the mod_ssl documentation for a complete list.\nSSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP\n\n#   Server Certificate:\n#   Point SSLCertificateFile at a PEM encoded certificate.  If\n#   the certificate is encrypted, then you will be prompted for a\n#   pass phrase.  Note that a kill -HUP will prompt again. A test\n#   certificate can be generated with `make certificate' under\n#   built time. Keep in mind that if you've both a RSA and a DSA\n#   certificate you can configure both in parallel (to also allow\n#   the use of DSA ciphers, etc.)\nSSLCertificateFile /etc/httpd/conf/ssl.csr/ulla.com.cer.pem\n#SSLCertificateFile /etc/httpd/conf/ssl.crt/server.crt\n#SSLCertificateFile /etc/httpd/conf/ssl.crt/server-dsa.crt\n\n#   Server Private Key:\n#   If the key is not combined with the certificate, use this\n#   directive to point at the key file.  Keep in mind that if\n#   you've both a RSA and a DSA private key you can configure\n#   both in parallel (to also allow the use of DSA ciphers, etc.)\nSSLCertificateKeyFile /etc/httpd/conf/ssl.key/ulla.com.key\n#SSLCertificateKeyFile /etc/httpd/conf/ssl.key/server.key\n#SSLCertificateKeyFile /etc/httpd/conf/ssl.key/server-dsa.key\n\n#   Server Certificate Chain:\n#   Point SSLCertificateChainFile at a file containing the\n#   concatenation of PEM encoded CA certificates which form the\n#   certificate chain for the server certificate. Alternatively\n#   the referenced file can be the same as SSLCertificateFile\n#   when the CA certificates are directly appended to the server\n#   certificate for convinience.\n#SSLCertificateChainFile /etc/httpd/conf/ssl.crt/ca.crt\n\n#   Certificate Authority (CA):\n#   Set the CA certificate verification path where to find CA\n#   certificates for client authentication or alternatively one\n#   huge file containing all of them (file must be PEM encoded)\n#   Note: Inside SSLCACertificatePath you need hash symlinks\n#         to point to the certificate files. Use the provided\n#         Makefile to update the hash symlinks after changes.\nSSLCACertificatePath /etc/httpd/conf/ssl.crt\nSSLCACertificateFile /etc/httpd/conf/ssl.crt/rootCA.cer.pem\n#SSLCACertificateFile /usr/share/ssl/certs/ca-bundle.crt\n\n#   Certificate Revocation Lists (CRL):\n#   Set the CA revocation path where to find CA CRLs for client\n#   authentication or alternatively one huge file containing all\n#   of them (file must be PEM encoded)\n#   Note: Inside SSLCARevocationPath you need hash symlinks\n#         to point to the certificate files. Use the provided\n#         Makefile to update the hash symlinks after changes.\nSSLCARevocationPath /etc/httpd/conf/ssl.crl\n#SSLCARevocationFile /etc/httpd/conf/ssl.crl/ca-bundle.crl\n\n#   Client Authentication (Type):\n#   Client certificate verification type and depth.  Types are\n#   none, optional, require and optional_no_ca.  Depth is a\n#   number which specifies how deeply to verify the certificate\n#   issuer chain before deciding the certificate is not valid.\nSSLVerifyClient optional\n#SSLVerifyDepth  10\n\n#   Access Control:\n#   With SSLRequire you can do per-directory access control based\n#   on arbitrary complex boolean expressions containing server\n#   variable checks and other lookup directives.  The syntax is a\n#   mixture between C and Perl.  See the mod_ssl documentation\n#   for more details.\n#<Location />\n#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \\\n#            and %{SSL_CLIENT_S_DN_O} eq \"Snake Oil, Ltd.\" \\\n#            and %{SSL_CLIENT_S_DN_OU} in {\"Staff\", \"CA\", \"Dev\"} \\\n#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \\\n#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \\\n#           or %{REMOTE_ADDR} =~ m/^192\\.76\\.162\\.[0-9]+$/\n#</Location>\n\n\n<Directory /home/httpd/html/eckb>\n  Options Indexes FollowSymLinks\n  AllowOverride None\n  Order allow,deny\n  Allow from all\n\n  SSLVerifyClient         require\n  SSLVerifyDepth          1\n  SSLCACertificateFile    conf/ssl.crt/rootCA.cer.pem\n  SSLCACertificatePath    conf/ssl.crt\n  SSLOptions              +FakeBasicAuth\n  SSLRequireSSL\n  SSLRequire     ((%{SSL_CLIENT_S_DN_O} eq \"company name\" and %\n{SSL_CLIENT_S_DN_Email} eq \"email\" ) or (%{SSL_CLIENT_S_DN_O} eq\n\"company name\" and %{SSL_CLIENT_S_DN_Email} eq \"email\" %{REMOTE_ADDR} =~\nm/^193\\.203\\.42\\.213$/))\n\n</Directory>\n\n\n#   SSL Engine Options:\n#   Set various options for the SSL engine.\n#   o FakeBasicAuth:\n#     Translate the client X.509 into a Basic Authorisation.  This means\nthat\n#     the standard Auth/DBMAuth methods can be used for access control.\nThe\n#     user name is the `one line' version of the client's X.509\ncertificate.\n#     Note that no password is obtained from the user. Every entry in\nthe user\n#     file needs this password: `xxj31ZMTZzkVA'.\n#   o ExportCertData:\n#     This exports two additional environment variables: SSL_CLIENT_CERT\nand\n#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the\n#     server (always existing) and the client (only existing when client\n#     authentication is used). This can be used to import the\ncertificates\n#     into CGI scripts.\n#   o StdEnvVars:\n#     This exports the standard SSL/TLS related `SSL_*' environment\nvariables.\n#     Per default this exportation is switched off for performance\nreasons,\n#     because the extraction step is an expensive operation and is\nusually\n#     useless for serving static content. So one usually enables the\n#     exportation for CGI and SSI requests only.\n#   o StrictRequire:\n#     This denies access when \"SSLRequireSSL\" or \"SSLRequire\" applied\neven\n#     under a \"Satisfy any\" situation, i.e. when it applies access is\ndenied\n#     and no other module can change it.\n#   o OptRenegotiate:\n#     This enables optimized SSL connection renegotiation handling when\nSSL\n#     directives are used in per-directory context. \n#SSLOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire\n<Files ~ \"\\.(cgi|shtml|phtml|php3?)$\">\n    SSLOptions +StdEnvVars\n</Files>\n<Directory \"/var/www/cgi-bin\">\n    SSLOptions +StdEnvVars\n</Directory>\n\n#   SSL Protocol Adjustments:\n#   The safe and default but still SSL/TLS standard compliant shutdown\n#   approach is that mod_ssl sends the close notify alert but doesn't\nwait for\n#   the close notify alert from client. When you need a different\nshutdown\n#   approach you can use one of the following variables:\n#   o ssl-unclean-shutdown:\n#     This forces an unclean shutdown when the connection is closed,\ni.e. no\n#     SSL close notify alert is send or allowed to received.  This\nviolates\n#     the SSL/TLS standard but is needed for some brain-dead browsers.\nUse\n#     this when you receive I/O errors because of the standard approach\nwhere\n#     mod_ssl sends the close notify alert.\n#   o ssl-accurate-shutdown:\n#     This forces an accurate shutdown when the connection is closed,\ni.e. a\n#     SSL close notify alert is send and mod_ssl waits for the close\nnotify\n#     alert of the client. This is 100% SSL/TLS standard compliant, but\nin\n#     practice often causes hanging connections with brain-dead\nbrowsers. Use\n#     this only for browsers where you know that their SSL\nimplementation\n#     works correctly. \n#   Notice: Most problems of broken clients are also related to the HTTP\n#   keep-alive facility, so you usually additionally want to disable\n#   keep-alive for those clients, too. Use variable \"nokeepalive\" for\nthis.\n#   Similarly, one has to force some clients to use HTTP/1.0 to\nworkaround\n#   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\"\nand\n#   \"force-response-1.0\" for this.\nSetEnvIf User-Agent \".*MSIE.*\" \\\n         nokeepalive ssl-unclean-shutdown \\\n         downgrade-1.0 force-response-1.0\n\n#   Per-Server Logging:\n#   The home of a custom SSL log file. Use this when you want a\n#   compact non-error SSL logfile on a virtual host basis.\nCustomLog logs/ssl_request_log \\\n          \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\"\n\n</VirtualHost>                                  \n\nSSL_ERROR_LOG\n\n[Mon Sep 26 01:18:48 2005] [info] Loading certificate & private key of\nSSL-aware server\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_pphrase.c(469):\nunencrypted RSA private key - pass phrase not required\n[Mon Sep 26 01:18:48 2005] [info] Configuring server for SSL protocol\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(405): Creating new\nSSL context (protocols: SSLv2, SSLv3, TLSv1)\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(530): Configuring\nclient authentication\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate: /CN=rootCA/O=Ulla AB/C=SE\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate: /CN=rootCA/O=Ulla AB/C=SE\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate:\n/C=--/ST=SomeState/L=SomeCity/O=SomeOrganization/OU=SomeOrganizationalUnit/CN=ulla.com/emailAddress=root@ulla.com\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(588): Configuring\npermitted SSL ciphers [ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:\n+SSLv2:+EXP]\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(613): Configuring\ncertificate revocation facility\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(716): Configuring\nRSA server certificate\n[Mon Sep 26 01:18:48 2005] [debug] ssl_engine_init.c(755): Configuring\nRSA server private key\n[Mon Sep 26 01:18:49 2005] [info] Loading certificate & private key of\nSSL-aware server\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_pphrase.c(469):\nunencrypted RSA private key - pass phrase not required\n[Mon Sep 26 01:18:49 2005] [info] Configuring server for SSL protocol\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(405): Creating new\nSSL context (protocols: SSLv2, SSLv3, TLSv1)\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(530): Configuring\nclient authentication\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate: /CN=rootCA/O=Ulla AB/C=SE\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate: /CN=rootCA/O=Ulla AB/C=SE\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(1095): CA\ncertificate:\n/C=--/ST=SomeState/L=SomeCity/O=SomeOrganization/OU=SomeOrganizationalUnit/CN=ulla.com/emailAddress=root@ulla.com\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(588): Configuring\npermitted SSL ciphers [ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:\n+SSLv2:+EXP]\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(613): Configuring\ncertificate revocation facility\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(716): Configuring\nRSA server certificate\n[Mon Sep 26 01:18:49 2005] [debug] ssl_engine_init.c(755): Configuring\nRSA server private key\n[Mon Sep 26 01:19:16 2005] [info] Connection to child 0 established\n(server ulla:443, client 213.89.66.70)\n[Mon Sep 26 01:19:16 2005] [info] Seeding PRNG with 136 bytes of entropy\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1765): OpenSSL:\nHandshake: start\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: before/accept initialization\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1513): OpenSSL: read\n11/11 bytes from BIO#9ce15b0 [mem: 9d0eb20] (BIO dump follows)\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1460):\n+-------------------------------------------------------------------------+\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0000: 80 4c\n01 03 00 00 33 00-00 00 10                 .L....3....      |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1491):\n+-------------------------------------------------------------------------+\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1513): OpenSSL: read\n67/67 bytes from BIO#9ce15b0 [mem: 9d0eb2b] (BIO dump follows)\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1460):\n+-------------------------------------------------------------------------+\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0000: 00 00\n04 00 00 05 00 00-0a 01 00 80 07 00 c0 03  ................ |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0010: 00 80\n00 00 09 06 00 40-00 00 64 00 00 62 00 00  .......@..d..b.. |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0020: 03 00\n00 06 02 00 80 04-00 80 00 00 13 00 00 12  ................ |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0030: 00 00\n63 c8 6e e4 bd 36-43 7c 48 f1 c4 70 ce 04  ..c.n..6C|H..p.. |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1485): | 0040: 46 b2\n08                                         F..              |\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1491):\n+-------------------------------------------------------------------------+\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: SSLv3 read client hello A\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: SSLv3 write server hello A\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: SSLv3 write certificate A\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: SSLv3 write certificate request A\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: SSLv3 flush data\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_io.c(1524): OpenSSL: I/O\nerror, 5 bytes expected to read on BIO#9ce15b0 [mem: 9d0eb20]\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1802): OpenSSL:\nExit: error in SSLv3 read client certificate A\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1802): OpenSSL:\nExit: error in SSLv3 read client certificate A\n[Mon Sep 26 01:19:16 2005] [info] (70014)End of file found: SSL\nhandshake interrupted by system [Hint: Stop button pressed in browser?!]\n[Mon Sep 26 01:19:16 2005] [info] Connection to child 0 closed with\nabortive shutdown(server ulla:443, client 213.89.66.70)\n[Mon Sep 26 01:19:19 2005] [info] Connection to child 1 established\n(server ulla:443, client 213.89.66.70)\n[Mon Sep 26 01:19:19 2005] [info] Seeding PRNG with 136 bytes of entropy\n[Mon Sep 26 01:19:19 2005] [debug] ssl_engine_kernel.c(1765): OpenSSL:\nHandshake: start\n[Mon Sep 26 01:19:19 2005] [debug] ssl_engine_kernel.c(1773): OpenSSL:\nLoop: before/accept initialization\n[Mon Sep 26 01:19:26 2005] [debug] ssl_engine_io.c(1524): OpenSSL: I/O\nerror, 11 bytes expected to read on BIO#9ce15b0 [mem: 9d0eb20]\n[Mon Sep 26 01:19:26 2005] [debug] ssl_engine_kernel.c(1802): OpenSSL:\nExit: error in SSLv2/v3 read client hello A\n[Mon Sep 26 01:19:26 2005] [info] (70014)End of file found: SSL\nhandshake interrupted by system [Hint: Stop button pressed in browser?!]\n[Mon Sep 26 01:19:26 2005] [info] Connection to child 1 closed with\nabortive shutdown(server ulla:443, client 213.89.66.70)"}, {"count": 1, "tags": [], "bug_id": 37016, "is_private": false, "id": 81233, "creation_time": "2005-10-17T09:40:22Z", "time": "2005-10-17T09:40:22Z", "creator": "daniela.gradim@mobila-kontoret.se", "text": "No ideas how to solve this problem ????\n\nThanks \n\nDaniela ", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "jorton@redhat.com", "is_private": false, "id": 81234, "time": "2005-10-17T10:34:14Z", "bug_id": 37016, "creation_time": "2005-10-17T10:34:14Z", "tags": [], "text": "The SSL handshake is failing when trying to read a client certificate from the\nbrowser.  Is the browser configured to send a client certificate?\n\n[Mon Sep 26 01:19:16 2005] [debug] ssl_engine_kernel.c(1802): OpenSSL:\nExit: error in SSLv3 read client certificate A"}, {"count": 3, "tags": [], "text": "FWLIW, I saw similar symptom recently (IE says it can't find server) with the\nweb server configured with client certs as optional.  Actually it can find the\nserver but fails during handshake.  This started after messing around in IE's\nclient certificate configuration, so I assumed that it was not a server issue\nand did not trace it further than some generic \"client I/O error occurred during\nhandshake\" problem.  Firefox works for me too.  The SSL implementation for the\nweb server I was using is completely different from Apache's.\n\nIs this problem occuring for multiple client boxes?  Does it fail for any IE\nwhich uses the same client certificate?\n", "attachment_id": null, "bug_id": 37016, "id": 81237, "time": "2005-10-17T13:30:10Z", "creator": "trawick@apache.org", "creation_time": "2005-10-17T13:30:10Z", "is_private": false}, {"count": 4, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 148454, "time": "2011-08-07T00:37:33Z", "bug_id": 37016, "creation_time": "2011-08-07T00:37:33Z", "is_private": false, "text": "presumed IE bug, no followup in many years."}]
[{"count": 0, "tags": [], "creator": "kdgregory@yahoo.com", "text": "Add the following method to the Task class, with no-op default behavior:\n\n    /**\n     *  Allows parent tasks to inject dependencies into their children.\n     *  This method is typically called by the parent in <code>addTask()\n     *  </code>. Children may accept or reject the dependency, and do\n     *  not have to notify the parent.\n     *\n     *  @param  parent  Identifies the parent task.\n     *  @param  data    Arbitrary dependency data. The child must know\n     *                  how to process this data. May be <code>null</code>.\n     */\n    public void injectDependency(Task parent, Object data)\n\nThe implementation on UnknownElement would queue all (parent,data) tuples, then\nplay those back to the actual child in configure()", "id": 94273, "time": "2006-09-29T16:16:45Z", "bug_id": 40643, "creation_time": "2006-09-29T16:16:45Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 94824, "time": "2006-10-13T12:55:26Z", "bug_id": 40643, "creation_time": "2006-10-13T12:55:26Z", "is_private": false, "text": "could be interesting, but personally I'd need more detail, maybe a use case and\nan example, to form a real opinion here."}, {"count": 2, "tags": [], "bug_id": 40643, "attachment_id": null, "text": "The current design of Ant assumes that child tasks are independent of their\nparent: Ant calls the task's no-arg constructor, then adds it to the parent. It\ndoes not tell the child about the parent (as best I can tell, looking closely at\nthe 1.6.5 codebase and skimming 1.7.0).\n\nThere are many situations where this knowledge would be useful, allowing the\nparent to set up a context in which the child operations. For example, we have a\nset of Ant tasks that interact with an app-server. They're contained within a\ntask that establishes the connection to the server, and provides context for the\nchildren.\n\nSimilarly, one could envision a deployment target that executes multiple SQL\nstatements against a server. While you could create the connection anew for each\nchild task, a better approach (in my opinion) would look like the following:\n\n<sqlConnect url=\"jdbc:...\" user=\"${db.username} pass=\"${db.password}>\n   <sqlUpdate sql=\"insert into ${db.schema}.MY_TABLE ...\">\n\nAt present, it is possible to do this, but there are limitations.\n\nOne approach is to use nested elements, and have the parent task provide a\nfactory method for its children. The primary limitation to that approach is that\nthe children will be configured at the same time as the parent, meaning that you\nhave to deal with all properties as strings, and perform all conversions\nyourself (because the properties may not have been set at the time of\nconfiguration, particularly if they're set by sibling tasks).\n\nAnother approach is to use the \"normal\" method of task creation, and have the\nparent reconfigure its children before executing them. This is somewhat of a\nhack, as the parent has to dig into the UnknownElement to find the real task. It\nalso didn't work prior to bugfix #40641, because the UnknownElement would ignore\nthe parent's actions, and reconfigure the task prior to execution.\n\nI am hoping to be able to free up the time to write a patch and some example\nscripts.", "id": 94875, "time": "2006-10-16T16:22:51Z", "creator": "kdgregory@yahoo.com", "creation_time": "2006-10-16T16:22:51Z", "is_private": false}]
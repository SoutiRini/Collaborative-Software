[{"count": 0, "tags": [], "bug_id": 42810, "is_private": false, "text": "This bug is consistent in Apache 2.2.4 (official tar-ball compiled in-place),\nThis wasn't an bug in Apache 1.3.6 (and older 1.3.x versions).\n\nHow to reproduce:\n\n1. Set up an Apache server and enable mod_proxy, mod_proxy_http, and \nmod_rewrite. \n\n2. In the configuration file, enable mod_rewrite logging:\n[[\n RewriteLog /var/log/apache2/rewrite_log\n # set to 0 to disable logging (no longer debugging)\n RewriteLogLevel 9\n]]\n\n3. Create a directory called red-test. Inside this directory, put an HTML\nfile named index.html (any content will do).\n\n4. In the same red-test directory, create an .htaccess file with the following\ncontent:\n[[\nRewriteEngine on\n\nRewriteBase /red-test/\nRewriteRule ^index$ http://www.inrialpes.fr/index.html [NE,QSA,P,L]\nRewriteRule ^index.html$ http://www.inrialpes.fr/index.html [NE,QSA,P,L]\n]]\n\nN.B., you could redirect it to any other page. www.inrialpes.fr/index.html\nwill display \"Hello, World\", regardless of the query string. You will get\nsomething else if the page was not found (but written in french).\n\n5. If you access the following URL (using curl or some other tool):\n\n    curl \"http://localhost/red-test/index.html?var1=32&var2=33\"\n\nApache doesn't do any content negotiation (that's normal). The rewrite\nlog shows that we sent the following proxy request:\n\n[perdir /home/kahan/httpd/red-test/] go-ahead with proxy request \n         proxy:http://www.inrialpes.fr/index.html?var1=32&var2=33 [OK]\n\nWith www.inrialpes.fr/index.html, we get our \"Hello, World\" page.\n\nThis is the expected result.\n\n6. If you access the following URL:\n    curl \"http://localhost/red-test/index?var1=32&var2=33\"\n\nApache's content-negotiation kicks in and selects index.html. The\nrewrite log shows that the query string separator has been escaped:\n\n[perdir /home/kahan/httpd/red-test/] pass through \n   proxy:http://www.inrialpes.fr/index.html%3Fvar1=32?var1=32\n\nAlso note, if significant, that the log message now says \"pass\nthrough\" instead of \"go-ahead\". In this case, and as expected,\nthe remote server won't recognize %3F as a query string separator\nand will try to find a different file. In the inrialpes.fr server,\nwe get a page not found\" message from the server. That's\nnormal as there's no file named index.html%3F...\n\nThis is the wrong result. We we're expecting to have \"Hello, World\" again,\nbut the query string separator was canonicalized.\n\n7. If you remove the file index.html from /red-test and try again, you\nget the same result as when not doing content-negotiation, regardless\nof accessing index.html or index. The rewrite rules are the only ones\ntaken into account. This is normal.\n\n[perdir /home/kahan/httpd/red-test/] go-ahead with proxy request \n         proxy:http://www.inrialpes.fr/index.html?var1=32&var2=33 [OK]\n\nAnd we always get the Hello, World page in the inrialpes server. This is\nthe expected result.\n\n--------------\nSome hints for a solution:\n\nthe problem may be around (or near)\nmod_proxy:proxy_fixup.  For the conneg case, this function is being\ncalled twice. The first pass we have:\n\n[[\n(gdb) p r->uri\n$24 = 0x81df5a0 \"/red-test/index.html\"\n(gdb) p r->filename\n$25 = 0x81df5c8 \"/home/kahan/httpd/red-test/index.html\"\n(gdb) p r->canonical_filename \n$26 = 0x81df550 \"/home/kahan/httpd/red-test/index.html\"\n]]\n\nIn the second pass we have (notice that the query string now appears\nin r->filename):\n\n[[\n(gdb) p r->uri\n$29 = 0x81df5a0 \"/red-test/index.html\"\n(gdb) p r->filename\n$30 = 0x81dff30 \"proxy:http://www.inrialpes.fr/index.html?var1=32&var2=33\"\n(gdb) p r->canonical_filename \n$31 = 0x81df550 \"/home/kahan/httpd/red-test/index.html\"\n(gdb) \n]]\n\nAnd, at the end of the function call, the query string was wrongly\ncanonicalized:\n\n[[\n(gdb) p r->uri\n$32 = 0x81df5a0 \"/red-test/index.html\"\n(gdb) p r->filename\n$33 = 0x81ebeb8 \"proxy:http://www.inrialpes.fr/\nindex.html%3Fvar1=32&var2=33?var1=32&var2=33\"\n(gdb) p r->canonical_filename \n$34 = 0x81df550 \"/home/kahan/httpd/red-test/index.html\"\n]]\n\nI'm not sure if a good solution to the problem would be\nin mod_proxy:proxy_http_canon() which has this apparently wrong\nassumption:\n\n[[\n    /* now parse path/search args, according to rfc1738 */\n    /* N.B. if this isn't a true proxy request, then the URL _path_\n     * has already been decoded.  True proxy requests have r->uri\n     * == r->unparsed_uri, and no others have that property.\n     */\n    if (r->uri == r->unparsed_uri) {\n        search = strchr(url, '?');\n        if (search != NULL)\n            *(search++) = '\\0';\n    }\n    else\n        search = r->args;\n\n]]\n\nwhich is not true in the broken case:\n\n[[\n(gdb) p r->uri\n$41 = 0x81e85c0 \"/red-test/index.html\"\n(gdb) p r->unparsed_uri\n$42 = 0x81df878 \"/red-test/index?var1=32&var2=33\"\n]]\n\nThanks for your help. We have this bug at W3C. I'm only using\nthe inrialpes.fr server to show how to reproduce it.", "id": 105071, "time": "2007-07-04T13:08:45Z", "creator": "jose@w3.org", "creation_time": "2007-07-04T13:08:45Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "This was a bug in request.c. This patch I made for bug 41960 fixed this one too.\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=41960", "attachment_id": null, "bug_id": 42810, "id": 106382, "time": "2007-08-06T07:32:45Z", "creator": "jose@w3.org", "creation_time": "2007-08-06T07:32:45Z", "is_private": false}]
[{"count": 0, "text": "The problem I am having relates to the Embedded class.\n\nIt centers around the problem that 'connectors' is a private variable\nin the class, and there is no overriding of 'findConnectors' (which\nis defined in StandardService).\n\nTherefore, findConnectors() on Embedded returns a value related to its\nsuperclass (StandardService) own (private) connectors[] variable, while\nthe class manages its own private list. \n\n-- \n\nA possible solution would be to:\n\n    - remove connectors private definition from Embedded\n    - make connectors in StandardService 'protected'\n\n-- \n\nI understand that one would not expect to query connectors when using\nEmbedded. However, in the context I am using, I have variants that may\nuse either Embedded, or Catalina (or a modification of Catalina/Bootstrap\nthat I have developed).", "bug_id": 29472, "attachment_id": null, "id": 58945, "time": "2004-06-09T16:40:03Z", "creator": "arieh.markel@sun.com", "creation_time": "2004-06-09T16:40:03Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "jan.luehe@sun.com", "attachment_id": null, "text": "getConnectorNames() was suffering from the same problem.\n\nFixed by:\n\n- changing \"initialized\", \"connectors\", and \"container\" from private to\n  protected in StandardService,\n- removing \"connectors\" from Embedded,\n- leveraging StandardService's addConnector() and removeConnector() from\n  Embedded, and\n- storing the most recently added Engine in Embedded's \"container\" (so that it\n  is used when calling connector.setContainer() in\n  Standardservice.addConnector())\n", "id": 58984, "time": "2004-06-10T01:06:23Z", "bug_id": 29472, "creation_time": "2004-06-10T01:06:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 29472, "is_private": false, "id": 59037, "attachment_id": null, "creator": "arieh.markel@sun.com", "creation_time": "2004-06-10T17:11:53Z", "time": "2004-06-10T17:11:53Z", "text": "Following Jan's comments and my inspection of the code of\nEmbedded and StandardService, it appears that there may still be several\nissues laying around that could be resolved by a refactoring of many\nof the methods.\n\nI believe that the Listener subscription logic is duplicated.\nIt should be possible for the subclasses (Embedded) not to override the\nvariables nor the code.\n\nThe debug (variable, setter, getter) appears to be duplicated as well.\nSo is the Lifecycle creation.\n\nAlso, the start() method on both appears to not share the same activities\nhappening. Worthwhile to consider Embedded to invoke appropriately\nsuper.start().\n\nSimilarly for stop()."}]
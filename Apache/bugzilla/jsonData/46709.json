[{"count": 0, "tags": [], "creator": "vargamere@gmail.com", "attachment_id": null, "id": 124826, "time": "2009-02-12T15:38:45Z", "bug_id": 46709, "creation_time": "2009-02-12T15:38:45Z", "is_private": false, "text": "Our environment uses a HTTP 1.1 mod_proxy server with 1.0 back-end webs. This is for various compatibility reasons, but in order to make this arrangement work in versions of Apache after 2.2.10 due to this change:\n*) mod_proxy_http: Do not forward requests with 'Expect: 100-continue' to\n     known HTTP/1.0 servers. Return 'Expectation failed' (417) instead.\n     [Ruediger Pluem]\n\nThis change breaks .NET web service clients that use Expect: 100-continue by default when initiating a session. To Replicate, attempt to connect to a proxy setup similar to the one mentioned above with any web service url hosted by a back-end web. The connection will fail due to the Expectation failed response. Regardless of what the RFC declares, this worked previous to the change. We have been patching manually just by applying the below simple patch:\n\n--- mod_proxy_http.c.orig       2009-02-12 18:35:55.000000000 -0500\n+++ mod_proxy_http.c    2009-02-12 18:35:26.000000000 -0500\n@@ -703,10 +703,11 @@\n          * According to RFC 2616 8.2.3 we are not allowed to forward an\n          * Expect: 100-continue to an HTTP/1.0 server. Instead we MUST return\n          * a HTTP_EXPECTATION_FAILED\n-         */\n+         * Disabled for .NET clients\n         if (r->expecting_100) {\n             return HTTP_EXPECTATION_FAILED;\n         }\n+         */\n         p_conn->close++;\n     } else {\n         buf = apr_pstrcat(p, r->method, \" \", url, \" HTTP/1.1\" CRLF, NULL);"}, {"count": 1, "tags": [], "bug_id": 46709, "attachment_id": null, "text": "If you need the 100-response, why do you tell it to talk HTTP/1.0 to the backend?\n\nThe behaviour you describe is not a bug, and the change you identify is a bug fix.  It may very well be that you have a legitimate need for different behaviour, but you should at least tell us why you can't just use HTTP/1.1.  The place for that would be the mailinglist, not bugzilla.\n\nI'll leave this open, in case you want to clarify the above and turn this into an enhancement request.", "id": 124827, "time": "2009-02-12T16:29:29Z", "creator": "nick@webthing.com", "creation_time": "2009-02-12T16:29:29Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 24500\nAdd support to completely ignore an \"Expect: 100-continue\" if env \"ignorecontinue\" is set\n\nWe had a very similar issue, also with .NET clients.\nAs we have only relatively few clients affected by the problem (more detailed description below), and those clients always come from the same IP, we were able to solve the problem by the attached patch and setting the new \"ignorecontinue\" environment variable for those clients.\n\nNow to the problem itself:\n\nIn our case, the relevant URL is protected by HTTP basic auth. .Net clients send the following header in our case:\n\n>>>> CLIENT ----\nPOST /url HTTP/1.1\nContent-Type: text/xml\nContent-Length: 1113\nExpect: 100-continue\nConnection: Keep-Alive\nHost: host.do.main\n\n<<<< CLIENT ----\n\nAt this point, apache httpd (2.2.3 with patches from RedHat 5.4, but I saw no relevant changes up to the current 2.2.14) reacts like requested by the client:\nIt responds immediately with an error code, in this case:\n\n>>>> SERVER  ----\nHTTP/1.1 401 Authorization Required\nDate: Wed, 04 Nov 2009 10:24:52 GMT\nServer: Apache\nWWW-Authenticate: Basic realm=\"Our Gateway\"\nLast-Modified: Thu, 17 Sep 2009 08:52:08 GMT\nETag: \"23-473c221659e00\"\nAccept-Ranges: bytes\nContent-Length: 35\nKeep-Alive: timeout=15, max=10\nConnection: Keep-Alive\nContent-Type: text/html\n\n<pre>\nThis is an error page\n</pre>\n<<<< SERVER ----\n\nProblem here is that .Net can't handle this the way it should, the .Net client actually keeps going by sending the body of the request, immediately followed by the authenticated copy of the first request\n\n>>>> CLIENT  ----\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Company_BXML...\nPOST /url HTTP/1.1\nContent-Type: text/xml\nAuthorization: Basic <zensiert>\nContent-Length: 1113\nExpect: 100-continue\nHost: host.do.main\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Company_BXML...\n<<<< CLIENT ----\n\nWhich httpd interprets as being a request of type:\n<?xml....>POST \nWhich is obviously not a valid request, so httpd returns code 400\n\nFor some clients, it seems to help to simply disable keepalive (setenv nokeepalive), but for some others, this only results in no authenticated request being sent at all.\n\nSo we tried several workarounds:\n1) Use any combination of the typical MSIE workaround settings, including\n   unclean ssl shutdown, downgrade-1.0, force-response-1.0. This resulted\n   in varying errors, mostly having just a single request come in, for which\n   code 401 was returned, then no other request following.\n2) Return 417 if we knew it was a problematic customer and the Expect header\n   was set. This also just resulted in no further request coming in (no matter\n   wether nokeepalive was set or not).\n\nFinally, I tried patching the httpd to allow to simply ignore the Expect header from the known-bad clients. The resulting patch is attached. Please note that I'm in no way an apache httpd expert, so the formating might be non-standard and - more importantly - the logging I added might be wrong (ap_log_rerror might be more correct than ap_log_error).\n\nAnyway, I think the patch might be off use for others as well, and I would be glad to see something similar in a future httpd release. \n\nI don't think anyone would thing copyright might apply to this simple patch, but just in case anyone is insane enough to do so, I hereby grant all rights related to this patch to the apache foundation. I also release the \"code\" under the apache license, the GNU (L)GPL (v2 or higher) or the BSD copyright (without the advertisement clause), at the recipients choice.", "attachment_id": 24500, "id": 131766, "creator": "sven-apache@incase.de", "time": "2009-11-06T05:45:21Z", "bug_id": 46709, "creation_time": "2009-11-06T05:45:21Z", "is_private": false}, {"count": 3, "tags": [], "text": "Comment 2 describes PR 47087.  Are you in a position to test-drive that patch?\n\n*** This bug has been marked as a duplicate of bug 47087 ***", "is_private": false, "id": 132652, "creator": "nick@webthing.com", "time": "2009-12-07T10:13:29Z", "bug_id": 46709, "creation_time": "2009-12-07T10:13:29Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46709, "attachment_id": null, "text": "I see the same (version 2.2.22)... having a HTTP 1.0 only backend with force-proxy-request-1.0 set.\n\nThe client sends an \"Expect: 100-continue\" Apache (correctly follows the RFC) and returns 417.\n\nI don't say that this is a bug in Apache, since AFAIU it does what the RFC says but rather from the clients...\n\nAnd even if one would unset force-proxy-request-1.0 it wouldn't really make things better, since while it would work then, the RFC would be more or less broken ... or at least the functionality of \"Expect: 100-continue\" wouldn't work.\n\n\nThe only solution right now seems to strip the header, which is IMHO not very nice though, as Expect may get further use (even if right now only 100-continue is defined).\n\n\nTherefore, can re-opening this with the question whether you can reconsider the patch from comment #2.\n\nIt would allow to only ignore 100-continue, and not any other future values for Expect: .", "id": 169381, "time": "2013-08-12T21:56:14Z", "creator": "calestyo@scientia.net", "creation_time": "2013-08-12T21:56:14Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 48272, "attachment_id": 24604, "id": 132274, "time": "2009-11-24T05:00:17Z", "creator": "ef-lists@email.de", "creation_time": "2009-11-24T05:00:17Z", "is_private": false, "text": "Created attachment 24604\nCrash Backtrace\n\nWhen mod_proxy_fcgi serves as a reverse proxy, it will crash the current\ninstance of apache with a segfault if it receives invalid headers\n(invalid in terms of the ap_scan_script_header_err_core function in\nserver/util_script.c).\n\nWhen mod_proxy_fcgi calls ap_scan_script_header_err_brigade with the\ncurrently read data and ap_scan_script_header_err_core detects an\ninvalid header, the latter function will try to soak up all data in the\nbrigade.\nAs the given brigade does not contain an EOS bucket (this is added in\nmod_proxy_fcgi only when the complete FCGI stream has been read from\nthe backend), getsfunc_BRIGADE will try to call the read function on a\nbrigade sentinel and crash.\n\nFind attached a backtrace of the crash. The line-numbers aren't\nunfortunately correct anymore, but finding the corresonding source\npieces should be straight forward.\n\nBesides that mod_proxy_fcgi (IMHO) with its pipelining approach (as\n opposed to soaking the complete script output into memory before\nforwarding it to the client) can't meet the preconditions to call\nap_scan_script_header_err_brigade, I'd suggest that getsfunc_BRIGADE\nshould be prepared in one way or another to see a brigade sentinel.\n\nFuthermore ap_scan_script_header_err_core doesn't respect the possible\n-1 return (TIMEOUT) from getsfunc_BRIGADE in the place where it soaks up\nthe invalid script output.\n\nIf the latter two suggestions will changed, I'd suggest this change also\nfor 2.2.x.\n\nI filed this bug as PC/Linux as this is my current platform, but it\nshould be reproducable on any hardware/OS as far as I've seen it in the\nsource.\n\nFor your reference, this is the configure line I built Apache with:\n./configure --with-mpm=worker --enable-so --enable-proxy\n--enable-proxy-fcgi\nwith having APR and APU in srclib in version 1.3.9 and tested against\nseveral trunk checkouts during the last month.\n\nPlatform is a Debian Lenny 64bit on an Intel QuadCore."}, {"count": 1, "tags": [], "bug_id": 48272, "attachment_id": 28557, "text": "Created attachment 28557\nGDB Backtrace", "id": 157644, "time": "2012-04-08T01:11:17Z", "creator": "gmblar@gmail.com", "creation_time": "2012-04-08T01:11:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 48272, "text": "Same here. When i send a header('foo') from PHP-FPM (5.4) Apache 2.4 segfault with:\n\nhttpd[28201]: [core:notice] [pid 28201:tid 46912521880096] AH00052: child pid 28396 exit signal Segmentation fault (11), referer:", "id": 157645, "time": "2012-04-08T01:14:12Z", "creator": "gmblar@gmail.com", "creation_time": "2012-04-08T01:14:12Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48272, "text": "Thanks for the detailed analysis, Edgar.\n\nThe crash because of the missing EOS bucket is fixed in trunk in r1311174. r1311172 fixes a related problem.\n\nBut I agree that mod_proxy_fcgi doesn't behave right and should read the complete headers before calling ap_scan_script_header_err_*", "id": 157724, "time": "2012-04-09T09:46:14Z", "creator": "sf@sfritsch.de", "creation_time": "2012-04-09T09:46:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "trawick@apache.org", "text": "Note (to self?) this issue was also fixed in r1311174, and backported back to the 2.2.x branch:\n\n\"Futhermore ap_scan_script_header_err_core doesn't respect the possible\n-1 return (TIMEOUT) from getsfunc_BRIGADE in the place where it soaks up\nthe invalid script output.\"", "id": 179571, "time": "2014-12-06T13:15:39Z", "bug_id": 48272, "creation_time": "2014-12-06T13:15:39Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "trawick@apache.org", "is_private": false, "count": 5, "id": 179572, "time": "2014-12-06T13:36:21Z", "bug_id": 48272, "creation_time": "2014-12-06T13:36:21Z", "text": "I don't see this issue in current or even fairly old levels of code:\n\n\"mod_proxy_fcgi doesn't behave right and should read the complete headers before calling ap_scan_script_header_err_*\"\n\nAFAICT mod_proxy_fcgi accumulates transient buckets of header until it detects the end, and only then does it call ap_scan_script_header_err_brigade_ex().\n\nIf anybody understands this differently, please open a separate bug; several issues have already been resolved under this one and are already released."}, {"count": 6, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "> But I agree that mod_proxy_fcgi doesn't behave right and should read the\n> complete headers before calling ap_scan_script_header_err_*\n\nIsn't that what is done with handle_headers()'s state machine?\n\nThis concern seems more appropriate for mod_cgi[d], but even there I don't see why ap_scan_script_header_err_brigade() could not read the headers by itself, it should stop on the first empty line anyway.\n\nBtw, regarding proxy_fcgi, I don't see any more issue mentioned in this PR.", "id": 179574, "attachment_id": null, "bug_id": 48272, "creation_time": "2014-12-06T14:17:59Z", "time": "2014-12-06T14:17:59Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 48272, "text": "Oh, It seems you beat me on this :)", "id": 179575, "time": "2014-12-06T14:19:00Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-12-06T14:19:00Z", "is_private": false, "attachment_id": null}]
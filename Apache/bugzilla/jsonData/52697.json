[{"count": 0, "tags": [], "creator": "rydenius@gmail.com", "attachment_id": null, "is_private": false, "id": 153878, "time": "2012-02-17T15:37:43Z", "bug_id": 52697, "creation_time": "2012-02-17T15:37:43Z", "text": "We recently had problem with requests/responses sometimes being mixed up in our Apache+Tomcat setup. It turned out that our 3rd party PDF generator software PD4ML, that we gave access to the HttpServletResponse.getOutputStream(), closed the stream from a finalize() method. This means that the JVM FinalizerThread unexpectedly called close() at some random later point in time. The org.apache.catalina.connector.CoyoteOutputStream is a thin wrapper for the org.apache.catalina.connector.OutputBuffer. By the time of the close() from the FinalizerThread, the OutputBuffer was recycled for another request. The consequence of the unexpected close() was sometimes request/response mixup from Apache, which caused our users to see each other's data.\n\nOf course it was wrong to close the ServletOutputStream from a finalizer and I know that the Response is not thread safe, no argue there. But when that accidently happened, I think that Tomcat could have handled the situation better by simple measures. After all, request/response mixup is about the worst thing that could happen to a web application.\n\nIn org.apache.catalina.connector.Response.recycle(), the outputStream.clear() method is only called if Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES. Why is that? Now that I looked into the source, I know how to ensure that outputStream.clear() is being called. But can't it always be called? The cost for creating a new CoyoteOutputStream next time response is used must be very very slim. Also in Response.recycle(), I think it is principally wrong that outputBuffer.recycle() is called before outputStream.clear(). Of course, the method not being synchronized, that may not make much difference. But logically, I think it would make more sense recycling the outputBuffer the last thing.\n\nAlso, I think it would make sense that CoyoteOutputStream.close() only calls ob.close() \"if (ob != null)\". That way closing an already cleared CoyoteOutputStream would not cause a NPE.\n\nThese two changes: Response.recycle() should always call outputStream.clear() and CoyoteOutputStream.close() should only call ob.close() if ob != null would have made a world of difference to to us.\n\nWe are running latest Tomcat 6, but it looks like the code is the same in Tomcat 7 if I'm not mistaken."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 153882, "creation_time": "2012-02-17T17:32:08Z", "time": "2012-02-17T17:32:08Z", "bug_id": 52697, "text": "(In reply to comment #0)\n> In org.apache.catalina.connector.Response.recycle(), the outputStream.clear()\n> method is only called if Globals.IS_SECURITY_ENABLED ||\n> Connector.RECYCLE_FACADES. Why is that?\n\nSpeed. Reduced GC.\n\n> Now that I looked into the source, I know how to ensure that outputStream.clear() is being called.\n\nExcellent. I wish more folks took advantage of the ability to read the source if they can't find what they need in the documentation.\n\n> But can't it always be called?\n\nNo.\n\n> But logically, I think it would make more sense recycling the outputBuffer the last thing.\n\nNo it doesn't.\n\n> Also, I think it would make sense that CoyoteOutputStream.close() only calls\n> ob.close() \"if (ob != null)\". That way closing an already cleared\n> CoyoteOutputStream would not cause a NPE.\n\nAgain no. We want the NPE in that case since it would indicate a bug in the connector code.\n\n> These two changes: Response.recycle() should always call outputStream.clear()\n> and CoyoteOutputStream.close() should only call ob.close() if ob != null would\n> have made a world of difference to to us.\n\nSo would not have using a buggy third-party library. As would using -Dorg.apache.catalina.connector.RECYCLE_FACADES=true\n\nTomcat, like most application servers, reuses objects to reduce GC and improve performance. That re-use does bring risks of misbehaviour with buggy applications and/or libraries. That is the price you pay for improved performance. Folks that prefer to take the performance penalty have an option that allows them to do so.\n\nFurther discussion of this topic belongs on the users list, not bugzilla.", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52697, "attachment_id": null, "is_private": false, "id": 153897, "time": "2012-02-17T23:45:01Z", "creator": "rydenius@gmail.com", "creation_time": "2012-02-17T23:45:01Z", "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > But logically, I think it would make more sense recycling the outputBuffer the last thing.\n> \n> No it doesn't.\n\nThank you very much Mark for your elaborate reply. I buy your reasoning in all cases but one: you say it does not make any sense to call outputBuffer.recycle() after outputStream.clear(). Clearing the output stream after recycling the outputBuffer opens a window where a misbehaving application can affect the already recycled outputBuffer. Clearing the outputStream first would on the other hand disconnect the outputBuffer from the application before recycling it, thus making it impossible for a misbehaving application to do something stupid with it. That would in my humble opinion be a robustness improvement."}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "(In reply to comment #0)\n> We recently had problem with requests/responses sometimes being mixed up in our\n> Apache+Tomcat setup. It turned out that our 3rd party PDF generator software\n> PD4ML, that we gave access to the HttpServletResponse.getOutputStream(), closed\n> the stream from a finalize() method. This means that the JVM FinalizerThread\n> unexpectedly called close() at some random later point in time.\n\nA buggy third party library...\n\nNote that Java ImageIO is known offender that has the same problem. It is on the FAQ pages in the wiki - see there [1]. You may add your library to that page.\n\n[1] http://wiki.apache.org/tomcat/FAQ/KnownIssues", "id": 153904, "time": "2012-02-18T01:19:28Z", "bug_id": 52697, "creation_time": "2012-02-18T01:19:28Z", "is_private": false}]
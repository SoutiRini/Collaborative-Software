[{"count": 0, "tags": [], "bug_id": 45067, "is_private": false, "id": 116916, "attachment_id": null, "creator": "treeck@yahoo.com", "creation_time": "2008-05-22T23:35:18Z", "time": "2008-05-22T23:35:18Z", "text": "Some URL-encoded text causes UDecoder to stack dump and not process a request parameter.\n\nI looked at the source code of UDecoder.java and it simply checks if a % character is followed by 2 hex digits. It doesn't handle cases like the degree symbol (e.g., 0-40\u00b0C) and the dagger (e.g., $199.99\u2020) when text pasted into a text field and submitted as part of a form. IE 7 URL encodeds the text like %u2020, and UDecoder fails the isHexDigit test on the \"u\" character. Java's URLdecode class also stack dumps on this...\n\nA work-around would be appreciated.\n\nThe stack dump follows:\nMay 22, 2008 11:23:41 PM org.apache.catalina.core.StandardWrapperValve invoke INFO: May 22, 2008 11:23:41 PM org.apache.tomcat.util.http.Parameters processParameters WARNING: Parameters: Character decoding failed. Parameter skipped. java.io.CharConversionException: isHexDigit at org.apache.tomcat.util.buf.UDecoder.convert(UDecoder.java:88) at org.apache.tomcat.util.buf.UDecoder.convert(UDecoder.java:49) at org.apache.tomcat.util.http.Parameters.urlDecode(Parameters.java:412) at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:394) at org.apache.tomcat.util.http.Parameters.processParameters(Parameters.java:346) at org.apache.catalina.connector.Request.parseParameters(Request.java:2491) at org.apache.catalina.connector.Request.getParameter(Request.java:1040) at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:355) at javarex.beans.servlet.util.HttpServlet.doPost(HttpServlet.java:386) at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at javarex.beans.servlet.ServletApplication.service(ServletApplication.java:141) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Unknown Source)"}, {"count": 1, "tags": [], "text": "%unnnn is not spec compliant.\n\nThe http spec (http://www.ietf.org/rfc/rfc2616.txt?number=2616) defers to the URI spec (http://www.ietf.org/rfc/rfc2396.txt) which only defines the \"%\" hex hex form of escaping non ASCII characters.\n\nI am surprised IE7 does this by default. Is there any client side code involved? There are various ways to work-around this. The users list is the place to get help.", "is_private": false, "bug_id": 45067, "id": 116966, "time": "2008-05-26T04:06:10Z", "creator": "markt@apache.org", "creation_time": "2008-05-26T04:06:10Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "treeck@yahoo.com", "attachment_id": null, "id": 117029, "time": "2008-05-27T09:45:53Z", "bug_id": 45067, "creation_time": "2008-05-27T09:45:53Z", "is_private": false, "text": "It was my screw up. I have been using some very old AJAX code (pre-javascript 1.5) that used Javascript's escape function, which doesn't handle unicode. I updated it to use the encodeURIcomponent function, and it worked properly -- sort of. Tomcat seems to be decoding to different characters, even when explicitly decoding with UTF-8. But, that's a different issue..."}]
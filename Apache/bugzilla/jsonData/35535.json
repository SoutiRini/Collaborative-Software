[{"text": "APACHE HTTPD 2.0 - APR_0_9_BRANCH  \nNeed to be fixed.  \nMichael Vergoz  \n  \nUnix mmap :  \n  \nsrclib/apr/mmap/unix/mmap.c +164 mm = mmap(NULL, size, native_flags,  \nMAP_SHARED, file->filedes, offset);  \n   \nYou can only set MAP_SHARED.   \nYou should be able to set MAP_ANON & MAP_PRIVATE.  \nThe MAP_SHARED behavior change in reallocation.  \nThe implementation of mmap() allow devel to do flexible linear memory  \nmanagement.  \nThe mremap() (or munmap + mmap) behavior is stricly different with MAP_SHARED  \n(opposed to MAP_PRIVATE) because the file projection (kernel may sync the file  \nthen the file must be \"paged\").  \nAn argument \"mode\" may be added into apr_mmap_create()  \n  \nThere isn't sync and remap possibilty.  \nThis should be implemented.  \n  \nUnix shm :  \nsrclib/apr/shmem/unix/shm.c +161  \n#elif APR_USE_SHMEM_MMAP_ANON  \n        new_m->base = mmap(NULL, new_m->realsize, PROT_READ|PROT_WRITE,  \n                           MAP_ANON|MAP_SHARED, -1, 0);  \n  \nIt's not logical to use MAP_ANON with MAP_SHARED.  \nMAP_ANON stop the projection of the file. It could be used with MAP_PRIVATE  \nwhen file descriptor isn't in use..  \nMAP_ANON | MAP_SHARED = MAP_ANON | MAP_PRIVATE  \nNote that is more difficult to do reallocation system with MAP_SHARED than  \nMAP_PRIVATE....  \nAlso note that there isn't reallocation possibility in current version.  \n  \nNote again that page size must be know dynamicaly because recent processor  \n(with EM64T or amd64) that bridge 64bit to 32bit...  \n  \n---------  \n  \nC symbol: apr_shm_create  \n  \n  File               Function                    Line  \n0 apr_shm.h          <global>                     67 APR_DECLARE(apr_status_t)  \napr_shm_create(apr_shm_t **m,  \n1 mod_auth_digest.c  initialize_tables           266 sts =  \napr_shm_create(&client_shm, shmem_size, tmpnam(NULL), ctx);  \n2 util_ldap_cache.c  util_ldap_cache_init        400 result =  \napr_shm_create(&st->cache_shm, st->cache_bytes, st->cache_file, st->pool);  \n3 ssl_scache_shmcb.c ssl_scache_shmcb_init       343 rv =  \napr_shm_create(&(mc->pSessionCacheDataMM),  \n4 ssl_scache_shmcb.c ssl_scache_shmcb_init       348 rv =  \napr_shm_create(&(mc->pSessionCacheDataMM),  \n5 ssl_scache_shmht.c ssl_scache_shmht_init        91 if ((rv =  \napr_shm_create(&(mc->pSessionCacheDataMM),  \n6 scoreboard.c       create_namebased_scoreboard 136 rv =  \napr_shm_create(&ap_scoreboard_shm, scoreboard_size, fname, pool);  \n7 scoreboard.c       open_scoreboard             182 rv =  \napr_shm_create(&ap_scoreboard_shm, scoreboard_size, NULL,  \n8 testrmm.c          test_rmm                     57 rv = apr_shm_create(&shm,  \nsize, NULL, pool);  \n9 shm.c              apr_shm_create               35 APR_DECLARE(apr_status_t)  \napr_shm_create(apr_shm_t **m,  \na shm.c              apr_shm_create               28 APR_DECLARE(apr_status_t)  \napr_shm_create(apr_shm_t **m,  \nb shm.c              apr_shm_create               91 APR_DECLARE(apr_status_t)  \napr_shm_create(apr_shm_t **m,  \nc shm.c              apr_shm_create               53 APR_DECLARE(apr_status_t)  \napr_shm_create(apr_shm_t **m,  \nd testglobalmutex.c  main                        142 apr_shm_create(&shm,  \nsizeof(int ), shmname, pool);  \ne testprocmutex.c    proc_mutex                  122 rv = apr_shm_create(&shm,  \nsizeof(int ), NULL, p);  \nf testprocmutex.c    proc_mutex                  125 rv = apr_shm_create(&shm,  \nsizeof(int ), shmname, p);  \ng testshm.c          test_anon                    84 rv = apr_shm_create(&shm,  \nSHARED_SIZE, NULL, pool);  \nh testshm.c          test_named                  165 rv = apr_shm_create(&shm,  \nSHARED_SIZE, SHARED_FILENAME, pool);  \n  \n--------  \n  \n\"modules/aaa/mod_auth_digest.c\" +266  \n#if APR_HAS_SHARED_MEMORY  \nstatic void initialize_tables(server_rec *s, apr_pool_t *ctx)  \n  \nAlso so note :  \n\"modules/aaa/mod_auth_digest.c\" +353  \n    /* Note: this stuff is currently fixed for the lifetime of the server,  \n     * i.e. even across restarts. This means that A) any shmem-size  \n     * configuration changes are ignored, and B) certain optimizations,  \n     * such as only allocating the smallest necessary entry for each  \n     * client, can't be done. However, the alternative is a nightmare:  \n     * we can't call apr_shm_destroy on a graceful restart because there  \n     * will be children using the tables, and we also don't know when the  \n     * last child dies. Therefore we can never clean up the old stuff,  \n     * creating a creeping memory leak.  \n     */  \n  \n\"modules/aaa/mod_auth_digest.c\" +79  \n/* Disable shmem until pools/init gets sorted out  \n * remove following two lines when fixed  \n */  \n#undef APR_HAS_SHARED_MEMORY  \n#define APR_HAS_SHARED_MEMORY 0  \n \n-- \n pages = (size + B_PAGE_SIZE -1) / B_PAGE_SIZE; \n \nB_PAGE_SIZE should be getpagesize() !! \n \n-- \nWell, i assume there is design error.  \nI have fix this problem on a personnal code.  \nI would do a design proposal.", "tags": [], "bug_id": 35535, "is_private": false, "count": 0, "id": 76791, "time": "2005-06-29T09:44:02Z", "creator": "descript@php.net", "creation_time": "2005-06-29T09:44:02Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "descript@php.net", "attachment_id": null, "id": 76792, "time": "2005-06-29T09:46:41Z", "bug_id": 35535, "creation_time": "2005-06-29T09:46:41Z", "is_private": false, "text": "Also SHM doesn't support reallocation. \nI will attach a proposal tonight. "}, {"count": 2, "tags": [], "bug_id": 35535, "attachment_id": 15561, "text": "Created attachment 15561\nFirst shoot for mmap(). (PoC)\n\ni will continue i a get right feedback from devels.", "id": 76815, "time": "2005-06-29T22:32:01Z", "creator": "descript@php.net", "creation_time": "2005-06-29T22:32:01Z", "is_private": false}, {"count": 3, "tags": [], "creator": "descript@php.net", "attachment_id": null, "id": 76878, "time": "2005-07-01T15:43:42Z", "bug_id": 35535, "creation_time": "2005-07-01T15:43:42Z", "is_private": false, "text": "Checkout http://www.badcode.be/~descript/.apache/couple/ \n \nFEATURES: \n- \"pager\" allow you to speficy a multiple of page that maybe used. It reduce  \nreallocation so it reduce kernel call. \n- Memory auto alignement \n- File map auto padding  \n- Auto remove on bad header \n- Auto create if file doesn't exist \n- Remap/reallocation possibility. \n- Auto padding (mem/file) when reallocating. \n- Kernel lock/unlock. \n \nCOMMING SOON : \n- File auto sync. (threaded) "}, {"count": 4, "tags": [], "bug_id": 35535, "text": "You need to firstly separate out the bugs from the new features.  Please file\nspecific bug reports on specific issues.  This broad \"here's a bunch of new\nstuff\" has no use in the bug tracker.\n\nSecondly, you need to gain consensus on dev@apr.apache.org regarding adding new\ninterfaces (e.g. determine whether they can be implemented on all platforms).\n\nAlso see: http://httpd.apache.org/dev/patches.html on submitting patches properly.", "id": 78153, "time": "2005-08-05T14:45:02Z", "creator": "jorton@redhat.com", "creation_time": "2005-08-05T14:45:02Z", "is_private": false, "attachment_id": null}]
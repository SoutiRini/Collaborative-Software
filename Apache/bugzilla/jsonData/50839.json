[{"count": 0, "tags": [], "text": "Configuration:\nWindows 2000 server SP4\nIIS 5\nTomcat 6.0.26\nJK connector 1.2.31.0\n\nAll components are on the same server.\n\nDuring research an issue why once in a while Tomcat on our servers starts rejecting connection on port for JK connector with error 61, we noticed that looks like it is starting with multiple 10054 errors recorded by JK connector during our regression testing. Last one could be easily reproduced on all our servers where it is installed. Error entry follows by spike in CPU utilization for 30 seconds during attempt to shutdown a socket (reporting large negative or positive number of lingering bytes read).\n\nHere the snapshot from JK connector logs during these events:\n\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [debug] isapi_write_client::jk_isapi_plugin.c (1204): Writing 2057 bytes of data to client\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [error] isapi_write_client::jk_isapi_plugin.c (1210): WriteClient failed with 10054 (0x00002746)\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [info] ajp_process_callback::jk_ajp_common.c (1885): Writing to client aborted or client network problems\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [info] ajp_service::jk_ajp_common.c (2543): (worker1) sending request to tomcat failed (unrecoverable), because of client write error (attempt=1)\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [info] HttpExtensionProc::jk_isapi_plugin.c (2217): service() failed because client aborted connection\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [debug] ajp_reset_endpoint::jk_ajp_common.c (757): (worker1) resetting endpoint with socket 2776 (socket shutdown)\n[Sat Feb 26 19:22:19.979 2011] [2856:1508] [debug] jk_shutdown_socket::jk_connect.c (726): About to shutdown socket 2776 [127.0.0.1:2755 -> 127.0.0.1:8109]\n[Sat Feb 26 19:22:49.010 2011] [2856:1508] [debug] jk_shutdown_socket::jk_connect.c (808): Shutdown socket 2776 [127.0.0.1:2755 -> 127.0.0.1:8109] and read 1402725467 lingering bytes in 30 sec.\n\nOther things noted: \n- download speed between webserver and client browser is about 60-80 Kb/sec when JK is used. Content served by IIS or Tomcat directly delivered with about 2Mb/sec. \n- changing packet size (connector and tomcat) from default to 32K didn't make a difference.\n- Configure JK2 connector instead of JK (same box, same everything) - no issues whatsoever (no CPU spikes, no download speed issues).\n\nAll values in server.xml and workers.properties are pretty much at default values, but below is our workers.properties, just in case:\n\n------------------------------------\nworker.list=worker1,worker2,worker3\nworker.worker1.host=localhost\nworker.worker1.port=8109 \nworker.worker1.type=ajp13\nworker.worker2.host=localhost\nworker.worker2.port=8209 \nworker.worker2.type=ajp13\nworker.worker3.host=localhost\nworker.worker3.port=8309 \nworker.worker3.type=ajp13\n------------------------------------\n\nand workers2.properties\n---------------------------------------------\n[shm:]\nfile=${serverRoot}\\work\\jk2.shm\nsize=1048576\n\n# add this section to test the proposition that it resolved the upload bug\n[logger]\nlevel=DEBUG\n\n[logger.file:0]\nfile=D:\\jk2logs\\jk2.log\ndebug=1\n\n# Define the communication channel \n[channel.socket:127.0.0.1:8109]\ninfo=Ajp13 forwarding over socket\ntomcatId=127.0.0.1:8109\n\n# Map the Tomcat examples webapp to the Web server uri space\n[uri:/*.jsp]\n[uri:/*.jsf]\n[uri:/*.faces]\n[uri:/*.class]\n[uri:/*download.pdf]\n[uri:/*testServ]\n[uri:/*TimerServlet]\n------------------------------------\n\nHere the section from server.xml regarding AJP:\n---------------------\n    <!-- Define an AJP 1.3 Connector on port 8109 -->\n    <Connector port=\"8109\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n---------------------\n\nPlease let me know if more information is needed.\n\nThanks,\nSerhiy", "attachment_id": null, "bug_id": 50839, "id": 144601, "time": "2011-02-27T12:47:01Z", "creator": "serhiy_holodnyak@adp.com", "creation_time": "2011-02-27T12:47:01Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 50839, "text": "Confirmed that this issue also exists when using the mod_jk 1.2.31 binary on Windows Server 2003 with httpd 2.2.14. I was unable to reproduce this problem on mod_jk 1.2.30. With only a single CPU available, this virtually disables the web server for about 30 seconds. While this problem is naturally triggered by end user behavior or unreliable client network connections, it could also easily be exploited for denial of service.", "id": 145011, "time": "2011-03-15T00:57:40Z", "creator": "jtacy@jtacy.com", "creation_time": "2011-03-15T00:57:40Z", "is_private": false, "attachment_id": null}, {"attachment_id": 26999, "tags": [], "bug_id": 50839, "text": "Created attachment 26999\nZip which contains the logfiles and source code of JSP", "count": 2, "id": 146332, "time": "2011-05-16T01:19:08Z", "creator": "kpreisser@apache.org", "creation_time": "2011-05-16T01:19:08Z", "is_private": false}, {"count": 3, "tags": [], "text": "Hi,\n\nI could also observe this issue using Windows Server 2008 SP2 (32 bit), IIS 7.0, ISAPI Redirector 1.2.31. It happened when a Servlet was producing lots of data, a client made a request to this servlet and canceled the download a few seconds later. This was leading to 100% CPU usage for about 30 seconds.\n\nI reported this issue on the users list [1] where Tim Whittington pointed me to this bug and asked me to attach a TRACE level log file.\n\nTo do this, I made a jsp (download3.jsp in the attachment) which produces about 32 MB of random data and writes it to the client. I also made a Downloader (SlowDownloader.java) which uses a URLConnection to make a request to the servlet and download it slowly, and abort the connection after 2400 bytes are read. The log of this Downloader is in SlowDownloader.log, the log of the JSP is in JSPLog.log.\n\nisapi_redirect.log contains the logfile of the ISAPI redirector with TRACE log level.\n\n\n\n[1] http://markmail.org/message/g7iztucoucze2wrw", "is_private": false, "id": 146333, "creator": "kpreisser@apache.org", "time": "2011-05-16T01:19:28Z", "bug_id": 50839, "creation_time": "2011-05-16T01:19:28Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 50839, "attachment_id": null, "id": 146334, "time": "2011-05-16T01:57:24Z", "creator": "kpreisser@apache.org", "creation_time": "2011-05-16T01:57:24Z", "is_private": false, "text": "Hi,\n\nI just discovered that writing a byte array of 32 bytes produces a bunch of lines in the isapi log each time. I changed the jsp to write an array of 32000 bytes instead of 32 each cycle. I hope the ISAPI log it is a bit better readable now (although the file is bigger)."}, {"count": 5, "tags": [], "bug_id": 50839, "text": "Created attachment 27000\nNew isapi logfile", "id": 146335, "time": "2011-05-16T01:58:02Z", "creator": "kpreisser@apache.org", "creation_time": "2011-05-16T01:58:02Z", "is_private": false, "attachment_id": 27000}, {"count": 6, "tags": [], "text": "The trace log from Konstantin shows that the ISAPI Redirector is spending all it's time in jk_shutdown_socket, calling jk_is_input_event - basically draining all the AJP response packets (which will all be SEND_BODY_CHUNK packets).\n\nThe Java side of the AJP connector also blindly continues writing out an entire chunk (across multiple SEND_BODY_CHUNK packets), and possibly across multiple writes (I can't quite get my head around how an AJP response stream would be terminated on a client abort on the HTTP side).\n\nI think this behaviour was introduced when the socket shutdown was tidied up to politely drain lingering bytes on the AJP connection before closing the socket - in extreme cases this seems to allow the Java side to continue writing data.\n\nI'm thinking at this point the simplest fix is to cap the amount of lingering bytes the AJP reset will handle on the Tomcat Connector end, and simply close the AJP connection if that is exceeded.", "is_private": false, "bug_id": 50839, "id": 146346, "time": "2011-05-16T08:25:44Z", "creator": "timw@apache.org", "creation_time": "2011-05-16T08:25:44Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 50839, "attachment_id": null, "id": 146347, "time": "2011-05-16T08:48:21Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2011-05-16T08:48:21Z", "is_private": false, "text": "+1 to such a solution. Limit by number of bytes plus the time we do the lingering. Break after say 32KB read or 2 seconds linger. Waiting longer or reading more is just wasting precious resources.\n\nRainer"}, {"attachment_id": null, "tags": [], "bug_id": 50839, "is_private": false, "count": 8, "id": 146437, "time": "2011-05-19T00:23:12Z", "creator": "timw@apache.org", "creation_time": "2011-05-19T00:23:12Z", "text": "I've changed the socket shutdown to limit the amount of lingering bytes (which in an AJP scenario == the remaining response body) to 32k and force a socket shutdown once that limit is reached.\nI've also shortened the initial poll timeout and reduced the total linger time to 2s to reduce use of web server resources during socket shutdown.\n\nChanges will be in 1.2.32"}, {"count": 9, "tags": [], "text": "*** Bug 51232 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 146463, "creator": "markt@apache.org", "time": "2011-05-19T12:06:20Z", "bug_id": 50839, "creation_time": "2011-05-19T12:06:20Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 50839, "attachment_id": null, "id": 146512, "time": "2011-05-21T09:29:41Z", "creator": "timw@apache.org", "creation_time": "2011-05-21T09:29:41Z", "is_private": false, "text": "After a hunt through the revisions between 1.2.30 and 1.2.31, it appears that [1] introduced this bug.\n\nThe counter of bytes read on each attempt to read lingering bytes was not reset in the loop after this change, resulting in the loop reading lingering bytes not exiting normally if there were >= 512 lingering bytes to start with.\nThis also explains the total lingering byte count wrapping into negative numbers.\n\nI had already fixed this at the same time as introducing the lingering byte limits.\n\n[1] https://svn.apache.org/viewvc?view=revision&sortby=date&revision=998108"}, {"count": 11, "tags": [], "text": "Tim,\n\nIssue was in the 1.2.31. You stated you've fixed that. Now I'm a little confused... Which version of the conector has fix?\n\nThanks,\nSerhiy", "attachment_id": null, "bug_id": 50839, "id": 146518, "time": "2011-05-21T18:53:12Z", "creator": "serhiy_holodnyak@adp.com", "creation_time": "2011-05-21T18:53:12Z", "is_private": false}, {"count": 12, "tags": [], "text": "The fix for this issue and the change to cap the lingering bytes/time, will both be in 1.2.32.", "attachment_id": null, "bug_id": 50839, "id": 146522, "time": "2011-05-21T22:48:42Z", "creator": "timw@apache.org", "creation_time": "2011-05-21T22:48:42Z", "is_private": false}]
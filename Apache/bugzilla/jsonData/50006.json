[{"count": 0, "tags": [], "creator": "genpfault@gmail.com", "is_private": false, "text": "Created attachment 26077\nPatch to only dump kerning table elements requested by the user\n\nttf2svg dumps the entirety of the kerning table instead of the subset in the low/high range given by the user.", "id": 140190, "time": "2010-09-26T23:08:10Z", "bug_id": 50006, "creation_time": "2010-09-26T23:08:10Z", "attachment_id": 26077}, {"count": 1, "attachment_id": null, "bug_id": 50006, "text": "(In reply to comment #0)\n> Created an attachment (id=26077) [details]\n> Patch to only dump kerning table elements requested by the user\n> \n> ttf2svg dumps the entirety of the kerning table instead of the subset in the\n> low/high range given by the user.\n\nSounds like a good idea - I'm an adept of optimizations. :-)\n\n\n(from the patch)\n> -                    ps.println(getKerningPairAsSVG(kst.getKerningPair(i), post));\n> +                \tint left = kst.getKerningPair(i).getLeft();\n> +                \tint right = kst.getKerningPair(i).getRight();\n> +                \tboolean left_in_range = (first <= left && left <= last);\n> +                \tboolean right_in_range = (first <= right && right <= last);\n> +                \tif (left_in_range && right_in_range) {\n> +                    \tps.println(getKerningPairAsSVG(kst.getKerningPair(i), post));\n> +                    }\n\n\nShould we optimize things a bit, maybe combining the comparison verbosity/additional variable creation into a comment? Something like:\n\n+                \tint left = kst.getKerningPair(i).getLeft();\n+                \tint right = kst.getKerningPair(i).getRight();\n+                       // check if left and right are both in range\n+                \tif ((first <= left && left <= last) && (first <= right && right <= last)) {\n\n\nAlso, the patch is using tabs for indentation. Please also replace with spaces to match Batik's code standards. Other than that, looks good. ;-)\n\n\nI've adjusted the bug's properties to reflect a patch being available, as well as other minor stuff.\n\n\nThomas, what do you thing?", "id": 140192, "time": "2010-09-27T01:38:56Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2010-09-27T01:38:56Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 50006, "text": "Created attachment 26082\nUpdated patch incorporating requested changes", "id": 140212, "time": "2010-09-27T08:57:32Z", "creator": "genpfault@gmail.com", "creation_time": "2010-09-27T08:57:32Z", "is_private": false, "attachment_id": 26082}, {"count": 3, "tags": [], "creator": "genpfault@gmail.com", "is_private": false, "text": "Created attachment 26087\nFixed glyph ID confusion\n\nHrm, looks like getLeft()/getRight() return a glyph ID(?) instead of the Unicode codepoint as I thought.\n\nThere's probably a better way to map the glyph ID back to the corresponding codepoint but I was unable to find it.", "id": 140235, "time": "2010-09-27T14:51:08Z", "bug_id": 50006, "creation_time": "2010-09-27T14:51:08Z", "attachment_id": 26087}, {"count": 4, "tags": [], "creator": "helder.magalhaes@gmail.com", "text": "(In reply to comment #3)\n> Hrm, looks like getLeft()/getRight() return a glyph ID(?) instead of the\n> Unicode codepoint as I thought.\n\nNice catch. :-)\n\n\n> There's probably a better way to map the glyph ID back to the corresponding\n> codepoint but I was unable to find it.\n\nThe code sounds fine, I'm just thinking a bit about performance. I've noticed you using TreeSet which, according to the documentation, isn't bad:\n\n\"This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains).\" [1]\n\nI'm thinking a bit about this in the sense that Unicode fonts may have a very large set of characters, where then performance can be a bit noticeable. I couldn't easily find a better suited replacement. Maybe Thomas/Cameron/DVHolten can shed some light in here?\n\n\nApart from that potential improvement (regarding set management), the code looks hood and ready to land IMO. ;-)\n\n\n[1] http://download.oracle.com/javase/6/docs/api/java/util/TreeSet.html", "id": 140253, "time": "2010-09-28T01:52:30Z", "bug_id": 50006, "creation_time": "2010-09-28T01:52:30Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "helder.magalhaes@gmail.com", "text": "Created attachment 26103\nPerformance improved\n\n(In reply to comment #4)\n> > There's probably a better way to map the glyph ID back to the corresponding\n> > codepoint but I was unable to find it.\n> \n> The code sounds fine, I'm just thinking a bit about performance.\n\nI had \"forgotten\" about hash set [1], which seems a better fit [1] [2]:\n\n\"This class offers constant time performance for the basic operations (add, remove, contains and size)[...]\" [1]\n\nI've also reworked the patch so it includes the full source path - otherwise, one needs to already know where the patch target is. ;-)\n\nIf there's nothing against, I'll make some tests (I don't have a test environment handy right now) and commit as-is within the next couple of days. :-)\n\n[1] http://download.oracle.com/javase/6/docs/api/java/util/HashSet.html\n[2] http://www.jusfortechies.com/core-java/inside-set.html", "id": 140315, "time": "2010-09-30T01:40:47Z", "bug_id": 50006, "creation_time": "2010-09-30T01:40:47Z", "is_private": false, "attachment_id": 26103}, {"count": 6, "tags": [], "bug_id": 50006, "attachment_id": null, "text": "(In reply to comment #5)\n> If there's nothing against, I'll make some tests (I don't have a test\n> environment handy right now) and commit as-is within the next couple of days.\n> :-)\n\nI've tested with DejaVuSans-Oblique (see bug 48182) and everything (expected behavior and performance) seems fine. :-)\n\nI've made a minor variable cleanup to the latest proposed patch and the whole was committed in revision 1003750.\n\nThanks, Charles! ;-)", "id": 140383, "time": "2010-10-02T03:42:24Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2010-10-02T03:42:24Z", "is_private": false}]
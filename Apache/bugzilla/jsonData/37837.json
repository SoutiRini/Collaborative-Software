[{"count": 0, "tags": [], "text": "JVM: Sun 1.3.1_09\nApache: 2.0.49\nmod_jk: 1.2.8?\nSolaris 8\n\nIn load testing our server we discovered a serious memory leak in Tomcat, which\nseemed to be related to the number of requests being processed.  Profiling with\nOptimizeIt showed several hundred thousand instances of\njavax.management.ObjectName, all held by a static Hashmap cache in the same class.  \n\nThis appears to be a bug in the ObjectName class in mx4j 1.1.1, which is used by\nTomcat.  The ObjectName class caches all instances it has created, to avoid\nparsing new object names if this has already been done once.  However, the\ncreation of ObjectNames in org.apache.jk.common.ChannelSocket.registerRequest()\ncreates a unique name for every request registered, so the cache grows endlessly.\n\nIn later versions of mx4j, this cache has been changed to use weak references,\nand additionally is only used when a special system property is set.  We have\nworked around the problem by hacking up a version of ObjectName which disables\nthe cache (email jdickson at dialectsolutions dot com for a copy).", "attachment_id": null, "id": 83412, "creator": "captsens@gmail.com", "time": "2005-12-08T12:53:48Z", "bug_id": 37837, "creation_time": "2005-12-08T12:53:48Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 37837, "attachment_id": null, "id": 83413, "time": "2005-12-08T13:09:01Z", "creator": "mturk@apache.org", "creation_time": "2005-12-08T13:09:01Z", "is_private": false, "text": "Please check if the same applies to the latest stable mod_jk 1.2.15"}, {"count": 2, "tags": [], "bug_id": 37837, "attachment_id": null, "is_private": false, "id": 83451, "time": "2005-12-08T20:00:45Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-12-08T20:00:45Z", "text": "Actually, this is a dup of bug #32141"}]
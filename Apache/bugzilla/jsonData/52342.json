[{"count": 0, "tags": [], "text": "Created attachment 28076\nmod_rewrite and mod_http patch to allow internal_redirect to retain filters and notes\n\nIn our setup, we have people using .htaccess files (still). We also have lots of proxying between various different service groups of the website.\n\nIn order to make the proxying consistent, we have a global main config ProxyPass rule, which points to the correct service group for that environment (eg. live, stage, test etc).\n\nSo, in main config:\nProxyPass /_proxy_/pal/ http://pal.<environment>.<site>/\n\nAnd then in .htaccess:\nRewriteRule mything /_proxy_/pal/myotherthing\n\nWhich, because it's in .htaccess gets internal-redirected and properly handled by the mod_proxy stage. All good.\n\nWe *also* use mod_include extensively on this platform, and we have an extension \"sssi\" to which we make sure we add an INCLUDES Output filter.\n\nWhat we end up with, however, is that if you have, in .htaccess:\nRewriteRule ^mything\\.sssi$ http://pal.<environment>.<site>/mysite/mything.sssi [P]\nthen the include gets parsed, as expected. If, on the other hand, you have:\nRewriteRule ^mything\\.sssi$ /_proxy_/pal/mysite/mything.sssi\nthen the includes filter gets stripped (described below) and the inclusion just gets injected into the page instead of being parsed as sssi.\n\nThis is basically due to the default behaviour of internal_internal_redirect() in modules/http/http_request.c, which strips output filters (except for the sub_req filter in the case that that's being used) and replaces a completely new r->notes table.\n\nThis is sensible behaviour when an internal redirect is being used to, say, generate an error page, or similar, but is less useful when you then get different behaviour in mod_rewrite depending on whether you put the RewriteRule in main config or .htaccess and where in main config it goes.\n\nThe attached patch adds a new ap_internal_redirect_filter() function in the httpd public API, which keeps the input and output filter chain and notes (while still replacing the environment) by changing the calling convention slightly for internal_internal_redirect() which isn't part of the public API, and adds a new RewriteOptions option to mod_rewrite which allows it to do the ap_internal_redirect_filter() when it redirects, rather than always doing the ap_internal_redirect() which will strip the filter.\n\n(the reason for the 1<<3 as the value rather than 1<<2 is that we're also currently applying 1<<2 as part of the bug in 48304 - which is now merged with httpd-2.4.x)", "attachment_id": 28076, "id": 152203, "creator": "matthew.byng-maddick@bbc.co.uk", "time": "2011-12-15T16:15:47Z", "bug_id": 52342, "creation_time": "2011-12-15T16:15:47Z", "is_private": false}, {"count": 1, "tags": [], "text": "I'm smelling a bug - if you're using AddOuputFilter, that's all processed within mod_mime.c in the type_checker hook, which in turn runs before fixups, and this in turn is triggered from ap_process_request_internal(), which is in turn triggered from ap_internal_redirect(), which is called by mod_rewrite in your case, so the output filters should be re-added when the request comes round again, the trick is finding out why this isn't happening.\n\nFurther digging finds two possible causes, and we might be suffering both:\n\n- Something inside mod_mime.c:find_ct is aborting early and isn't reaching the point where output_filters are added. Would it be possible to put a breakpoint here and see if we ever reach this code? We'll reach it at least once for the initial request, key though is that we should reach this again for the internal direct, if we don't, we'd need to see why it's bailing out early. Most specifically, do we reach this code:\n\n           if (exinfo->output_filters && r->proxyreq == PROXYREQ_NONE) {\n               const char *filter, *filters = exinfo->output_filters;\n               while (*filters\n                   && (filter = ap_getword(r->pool, &filters, ';'))) {\n                   ap_add_output_filter(filter, NULL, r, r->connection);\n               }\n               if (conf->multimatch & MULTIMATCH_FILTERS) {\n                   found = 1;\n               }\n           }\n\nI suspect we might be reaching this code, only to find we've detected it as a proxy request, and therefore aren't adding filters (In other words \"r->proxyreq == PROXYREQ_NONE\" is false).\n\nI can kinda-sorta see why we might want to not apply extensions to proxy requests, but then at the same time I also see cases like this one where we would want to - the URL ends with .sssi, whether it comes from a proxy or not, who cares, we want the INCLUDES filter.\n\nI suspect the fix might be to add a config directive that allows the end user to ignore the \"r->proxyreq == PROXYREQ_NONE\" bit, or to just take that away entirely (in 2.4).\n\nIn fact, this might be the cause of the inconsistency between using a ProxyPass and the mod_rewrite [P] flag - in the ProxyPass case, r->proxyreq == PROXYREQ_NONE is false and this code is bypassed. In the [P] flag case, r->proxyreq == PROXYREQ_NONE is true because the [P] flag hasn't been evaluated yet (I *think* that happens 1 phase later, in fixups), so we get our filters in this case.\n\nTry this patch in other words, does this make it work?\n\nIndex: modules/http/mod_mime.c\n===================================================================\n--- modules/http/mod_mime.c\t(revision 1214429)\n+++ modules/http/mod_mime.c\t(working copy)\n@@ -895,7 +895,7 @@\n             * setting redundant filters.    2, we insert these in the types\n             * config hook, which may be too early (dunno.)\n             */\n-            if (exinfo->input_filters && r->proxyreq == PROXYREQ_NONE) {\n+            if (exinfo->input_filters) {\n                const char *filter, *filters = exinfo->input_filters;\n                while (*filters\n                    && (filter = ap_getword(r->pool, &filters, ';'))) {\n@@ -905,7 +905,7 @@\n                    found = 1;\n                }\n            }\n-            if (exinfo->output_filters && r->proxyreq == PROXYREQ_NONE) {\n+            if (exinfo->output_filters) {\n                const char *filter, *filters = exinfo->output_filters;\n                while (*filters\n                    && (filter = ap_getword(r->pool, &filters, ';'))) {\n\n- AddOutputFilter doesn't actually mean \"add\" (and this is broken). Tracing the code, when we merge configs from one location/directory to another, we end up replacing the previous filter definition for that extension, instead of adding it. Or to put this another way, if you have this:\n\nAddOutputFilter FOO html\n<Location /baz>\n AddOutputFilter BAR html\n</Location>\n\nThe BAR filter ends up replacing the FOO filter completely for the html type, which is broken - add should mean just that, add, not replace.\n\nTo test this, put a breakpoint inside mod_mime:overlay_extension_mappings, and see if you reach this code:\n\n   if (overlay_info->output_filters) {\n       new_info->output_filters = overlay_info->output_filters;\n   }\n\nIn theory, you should reach this code twice. If this bug is present, you'll reach a point where new_info->output_filters evaluates to \"INCLUDES\" (or something containing INCLUDES), and overlay_info->output_filters evaluates to something else (like \"BUFFER\", or \"DEFLATE\", or...).", "is_private": false, "id": 152246, "creator": "minfrin@sharp.fm", "time": "2011-12-17T13:36:10Z", "bug_id": 52342, "creation_time": "2011-12-17T13:36:10Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 52342, "attachment_id": null, "id": 152827, "time": "2012-01-16T12:26:31Z", "creator": "matthew.byng-maddick@bbc.co.uk", "creation_time": "2012-01-16T12:26:31Z", "is_private": false, "text": "I've spent a lot more time thinking about this, and Graham (minfrin) and I have had some discussions about this in private email...\n\nThere's a definite issue in that a sub-request delegation, while it, obviously, creates a new request_rec doesn't actually scan through the filters and update f->r for each filter in the chain, if an internal_redirect happens, it creates the new request_rec, and does scan the filters and reset f->r to the redirected request_rec.\n\nWhile it's obvious that if you're not in a sub-request context this is the right behaviour for the internal_redirect, the inconsistency between a plain sub-request and a sub-request that you end up internal_redirecting seems wrong. My patch is definitely wrong in (a) keeping the filter chain - in fact, my initial claims were wrong - though I don't like them, because of the order of processing, and (b) adjusting the notes.\n\nNow, I suspect that we can't just change this unilaterally - because it is such a major change in behaviour - so the question is what should happen? Do we keep the separate \"don't update the f->r s\" function, and allow mod_rewrite to call that with a RewriteOption - this seems really ugly, as there are presumably other situations where the internal_redirect could happen in a sub-request and those won't necessarily call it? Do we have some flag set on any request_rec, but then you need to traverse the request_rec calling chain to find out what you're supposed to be doing? Other suggestions?\n\nI may patch our local copy of mod_rewrite to solve my immediate problems with something like the above, and apply minfrin's patch within this ticket to drop the r->proxyreq check off mod_mime.c, but it would be nice if there were a sensible way of solving this in a consistent way...\n\nCheers\n\nMBM"}, {"count": 3, "tags": [], "bug_id": 52342, "attachment_id": null, "is_private": false, "id": 152896, "time": "2012-01-18T16:46:48Z", "creator": "jorton@redhat.com", "creation_time": "2012-01-18T16:46:48Z", "text": "\"The BAR filter ends up replacing the FOO filter completely for the html type,\nwhich is broken - add should mean just that, add, not replace.\"\n\nThe AddBlah directives *all* work this way with mod_mime; I agree it is not particularly intuitive, but that it how they have always worked (and have been documented!).  If you are trying to set up the filter chain for a reverse proxy config surely SetOutputFilter is more appropriate?\n\nIs it possible to create a minimal self-contained test case which demonstrates the issue you're seeing here, using built-in modules?  I'm struggling to understand what exactly the issue is here."}, {"count": 4, "tags": [], "creator": "matthew.byng-maddick@bbc.co.uk", "is_private": false, "text": "Hi Joe,\n\nThe proxy thing is perhaps confusing the issue. Maybe this is more easily done by doing something like:\n\n<Proxy balancer://.../**/*.sssi>\n  SetOutputFilter INCLUDES\n</Proxy>\n\nOr there are possibly other ways of working around this.\n\nI'm actually more concerned, as I say above, by the difference in behaviour of the filters going:\nmain->sub_request, and main->(sub_request->internal_redirect), which I think is very broken.\n\nCheers\n\nMBM", "id": 152898, "time": "2012-01-18T16:54:25Z", "bug_id": 52342, "creation_time": "2012-01-18T16:54:25Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> Hi Joe,\n> \n> The proxy thing is perhaps confusing the issue. Maybe this is more easily done\n> by doing something like:\n> \n> <Proxy balancer://.../**/*.sssi>\n>   SetOutputFilter INCLUDES\n> </Proxy>\n\nLocationMatch would be the obvious choice to me.\n\n> I'm actually more concerned, as I say above, by the difference in behaviour of\n> the filters going:\n> main->sub_request, and main->(sub_request->internal_redirect), which I think is\n> very broken.\n\nI don't understand your explanation of what it is broken, I'm afraid.  You can try again, but a test case would be a way to communicate unambiguously.\n\nIn the case where, say:\n\n1. main is uri /X\n2. main requires a subreq for, say, SSI exec, so main->subreq is /X/Y\n3. filter FOO is configured to apply to ONLY /X/Y, and is added to r->output_filters\n4. main->subreq does an internal redirect to /X/Z\n5. main->subreq's handler is run\n\nat step (5), is your contention that FOO should still be in the filter chain for main->subreq's r->output_filters?  Or am I missing the point completely?", "is_private": false, "id": 152921, "creator": "jorton@redhat.com", "time": "2012-01-19T12:05:09Z", "bug_id": 52342, "creation_time": "2012-01-19T12:05:09Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "So, having dug a lot deeper, and with a lot more ap_log_rerror(APLOG_MARK, APLOG_DEBUG...) lines, I've finally found why this doesn't work, it's not actually to do with keeping the filters or not, though obviously keeping the existing filter, and the existing context in the internal-redirect case does help (but is wrong).\n\nIt's actually what happens in mod_include, basically, in handle_include() (which handles the <!--#include tag, we make the subrequest (as a file or uri), which creates a completely empty r->request_config, fine. Before we call ap_run_sub_req() on the new subrequest request_rec (which is actually called \"rr\" in that function) we do:\n        /* See the Kludge in includes_filter for why.\n         * Basically, it puts a bread crumb in here, then looks\n         * for the crumb later to see if its been here.\n         */\n        if (rr) {\n            ap_set_module_config(rr->request_config, &include_module, r);\n        }\n\nIn the actual filtering call (includes_filter()), we find:\n    if ((parent = ap_get_module_config(r->request_config, &include_module))) {\n        /* Kludge --- for nested includes, we want to keep the subprocess\n         * environment of the base document (for compatibility); that means\n         * torquing our own last_modified date as well so that the\n         * LAST_MODIFIED variable gets reset to the proper value if the\n         * nested document resets <!--#config timefmt -->.\n         */\n        r->subprocess_env = r->main->subprocess_env;\n        apr_pool_join(r->main->pool, r->pool);\n        r->finfo.mtime = r->main->finfo.mtime;\n    }\n    else {\n        /* we're not a nested include, so we create an initial\n         * environment */\n        ap_add_common_vars(r);\n        ap_add_cgi_vars(r);\n        add_include_vars(r);\n    }\n\nThis is obviously absolutely horrid, and explains why this doesn't work. I'm guessing that the actual handling should be something like:\n    initr=r;\n    while(initr->prev) {\n        initr = initr->prev;\n    }\n    if ((parent = ap_get_module_config(initr->request_config, &include_module))) {\n        r->subprocess_env = parent->subprocess_env;\n...\nusing parent (as the token stuck in) rather than r->main.\n\nWith that in place, it can still be perfectly possible to set filters based on existing stuff, without necessarily needing Graham's patches to mod_mime which I definitely have concerns about.\n\nThis seems like the right solution here, though because you don't have a proper r->request_config set up, I'm wondering if it can be done with a switch on mod_include, so as not to change existing functionality generically.\n\nCheers\n\nMBM", "is_private": false, "id": 153073, "creator": "matthew.byng-maddick@bbc.co.uk", "time": "2012-01-23T19:26:45Z", "bug_id": 52342, "creation_time": "2012-01-23T19:26:45Z", "attachment_id": null}, {"count": 7, "attachment_id": 28201, "creator": "matthew.byng-maddick@bbc.co.uk", "is_private": false, "id": 153119, "time": "2012-01-24T18:33:07Z", "bug_id": 52342, "creation_time": "2012-01-24T18:33:07Z", "tags": [], "text": "Created attachment 28201\nAllows SSI to consider following internal-redirects on its subrequests as valid\n\nThe above has the kind of properties we want - that we follow the internal-redirect chain back to its source, which means that we can see the original sub-request's tagging (or not), and hence act just like we would within that sub-request. This is, of course, a kludge on a kludge, and in many ways I don't like it.\n\nThere are other ways of making sure that the mod_include filter actually gets activated, of course, which mean that applying stuff by extension where you're using mod_proxy possibly isn't the right thing after all.\n\nThat the location that the hack acts on is the source location rather than the destination is a bit of an annoyance, but if you're using mod_rewrite and .htaccess (and probably SSI) the source is likely to be the one you have more control over...\n\nCheers\n\nMBM"}]
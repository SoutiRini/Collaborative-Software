[{"count": 0, "tags": [], "creator": "isurues@gmail.com", "attachment_id": null, "id": 104974, "time": "2007-07-02T00:23:55Z", "bug_id": 42789, "creation_time": "2007-07-02T00:23:55Z", "is_private": false, "text": "When a user shuts down Chainsaw, it doesn't remember the filter expressions\nspecified in the 'Refine focus on' combo box. So the user have to specify the\nexpressions whenever he restarts Chainsaw. This can be really inconvenient for a\nuser who use several filter expressions for different tabs with so many log\nevents coming in..."}, {"count": 1, "tags": [], "creator": "isurues@gmail.com", "attachment_id": 20425, "id": 104975, "time": "2007-07-02T00:28:48Z", "bug_id": 42789, "creation_time": "2007-07-02T00:28:48Z", "is_private": false, "text": "Created attachment 20425\nMaking chainsaw remember filter expressions between restarts\n\nIn this patch, I have made the required changes to the LogPanel class in order\nto make chainsaw remember filter expressions between restarts. I used the same\nXML file which is currently used to remember LogPanel configurations to save\nthe filter expressions. And I added a button to clear the selected expression\non the combo box such that the cleared expression is no longer remembered by\nChainsaw."}, {"count": 2, "tags": [], "bug_id": 42789, "attachment_id": null, "text": "Patch looks reasonable to me.  Possibly backward compatibility problem with the\nnew Vector being serialized.\n\nCan we check if the returned Vector is null?  What if existing saved settings\ndon't have this, my guess is the Vector will be either be null (and therefore\nthe user will get an NPE on startup), or it will error during the xstream read\noperation.\n\nIsuru are you able to confirm this behaviour by deleting existing preferences,\nuse the non-patched version, saved settings, then apply patch and open\napplication.  Just want to confirm we do not introduce a bug to our existing users.", "id": 105017, "time": "2007-07-02T20:06:47Z", "creator": "psmith@apache.org", "creation_time": "2007-07-02T20:06:47Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 42789, "text": "(In reply to comment #2)\n> Patch looks reasonable to me.  Possibly backward compatibility problem with the\n> new Vector being serialized.\n> \n> Can we check if the returned Vector is null?  What if existing saved settings\n> don't have this, my guess is the Vector will be either be null (and therefore\n> the user will get an NPE on startup), or it will error during the xstream read\n> operation.\n\nYes that's an issue. It returns an EOF exception when we try to load settings\nwhen the vector is not in the XML file. This EOF exception is not handled in the\ncurrent implementation. I searched the javadoc for ObjectInputStream and\ncouldn't find a method to check whether the stream is over.\n\n> \n> Isuru are you able to confirm this behaviour by deleting existing preferences,\n> use the non-patched version, saved settings, then apply patch and open\n> application.  Just want to confirm we do not introduce a bug to our existing\nusers.\n\nAs a solution for this issue,  we can save the vector before the last object\n(Dimention object) and when reading, we can check the last element whether it is\nan instance of Vector or Dimention. And read again only if it is a Vector\ninstance. This will avoid the possibility of occurring an EOF exception.\nWill this be OK??\n\n~Isuru\n\n", "count": 3, "id": 105029, "time": "2007-07-03T06:45:07Z", "creator": "isurues@gmail.com", "creation_time": "2007-07-03T06:45:07Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 42789, "attachment_id": null, "text": "We have 2 options here I think:\n\n1) Ignore the problem - if we do this, we should log the exception so that the\nloading of the preferences at least appears inside Chainsaws own log panel. \nCurrently there's a TODO to log it instead of printStackTrace().  \n\n2) Introduce a version number in the serialization file.  During the\nsaveSettingsEvent, at the end of the current set of objects being saved, write a\nversion #.  This number can be read back and used to determine whether the next\nobject is likely to have been serialzide.  You could do something like:\n\n\n..(previous deserializationstuff)\nVector v = null;\nint versionNumber=0\ntry{\n  int versionNumber = in.readInt();\n  \n}catch(Exception e){\n  // no versionNumber found, might want to be specific about the Exception\n  // caught here to make sure it's only End of Stream events.\n}\n\n// now we know where at a point that has introduced the versionNumber\nif(versionNumber>0){\n    v = in.readObject();\n} \nif (versionNumber>1){\n        // ... some other future serialized data structure\n}\n\n..etc\n\nIn the saveSettings event, we can start writing a version # at the end of the\ncurrent list, but before you add the Vector (and other objects if needed).\n\nDoes that make sense?", "id": 105127, "time": "2007-07-05T20:47:10Z", "creator": "psmith@apache.org", "creation_time": "2007-07-05T20:47:10Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 42789, "attachment_id": null, "text": "(In reply to comment #4)\n> We have 2 options here I think:\n> \n> 1) Ignore the problem - if we do this, we should log the exception so that the\n> loading of the preferences at least appears inside Chainsaws own log panel. \n> Currently there's a TODO to log it instead of printStackTrace().  \n> \n> 2) Introduce a version number in the serialization file.  During the\n> saveSettingsEvent, at the end of the current set of objects being saved, write a\n> version #.  This number can be read back and used to determine whether the next\n> object is likely to have been serialzide.  You could do something like:\n> \n> \n> ..(previous deserializationstuff)\n> Vector v = null;\n> int versionNumber=0\n> try{\n>   int versionNumber = in.readInt();\n>   \n> }catch(Exception e){\n>   // no versionNumber found, might want to be specific about the Exception\n>   // caught here to make sure it's only End of Stream events.\n> }\n> \n> // now we know where at a point that has introduced the versionNumber\n> if(versionNumber>0){\n>     v = in.readObject();\n> } \n> if (versionNumber>1){\n>         // ... some other future serialized data structure\n> }\n> \n> ..etc\n> \n> In the saveSettings event, we can start writing a version # at the end of the\n> current list, but before you add the Vector (and other objects if needed).\n> \n> Does that make sense?\n\nYes I think your second suggestion is a reasonable way of tackling the problem.\nIf needed we'll be able to change this in the future when new data structures\nwill needed to be saved. I have tested it and it works fine. I'll attach the new\npatch....", "id": 105233, "time": "2007-07-09T21:30:28Z", "creator": "isurues@gmail.com", "creation_time": "2007-07-09T21:30:28Z", "is_private": false}, {"count": 6, "tags": [], "creator": "isurues@gmail.com", "text": "Created attachment 20483\nPatch with a new way of remembering expressions\n\nThis attachment contains the implementation of a method to avoid a possible bug\nin the previous patch...", "id": 105234, "time": "2007-07-09T21:33:24Z", "bug_id": 42789, "creation_time": "2007-07-09T21:33:24Z", "is_private": false, "attachment_id": 20483}, {"count": 7, "tags": [], "creator": "psmith@apache.org", "attachment_id": null, "id": 105254, "time": "2007-07-10T15:18:58Z", "bug_id": 42789, "creation_time": "2007-07-10T15:18:58Z", "is_private": false, "text": "Patch applied in revision 555100.    I changed the version number literal to a\nconstant and added your name to the author tags for the file.\n\nThanks Isuru."}]
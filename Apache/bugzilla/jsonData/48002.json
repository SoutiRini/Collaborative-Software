[{"count": 0, "tags": [], "creator": "dev@cumiskey.com", "attachment_id": null, "is_private": false, "id": 131142, "time": "2009-10-15T09:33:27Z", "bug_id": 48002, "creation_time": "2009-10-15T09:33:27Z", "text": "Plot values for AFP page overlays are always calculated at a resolution of 240dpi regardless of configuration settings.  This calculation should be done at rendering time - not during configuration (See http://markmail.org/search/?q=fop-dev#query:fop-dev%20order%3Adate-backward+page:1+mid:6xesm7i7jkwiozjg+state:results) for details.\n\nAdrian."}, {"count": 1, "tags": [], "bug_id": 48002, "is_private": false, "text": "Created attachment 24395\nPage Overlay patch\n\nPlease some one review my patch...", "id": 131213, "time": "2009-10-19T06:57:44Z", "creator": "vanukuri.venkat@googlemail.com", "creation_time": "2009-10-19T06:57:44Z", "attachment_id": 24395}, {"attachment_id": null, "tags": [], "creator": "vanukuri.venkat@googlemail.com", "text": "Hi Venkat,\n\nI advise you to just pass the bare values in AFPPageOverlayElement from attlist.getValue(ATT_X) and attlist.getValue(ATT_Y) through to the AFPPageOverlay and remove the use of AFPPaintingState and AFPUnitConverter in there - this was never the correct place to do this.  You could look at calling upon AFPUnitConverter to carry out the correct plotting calculation on your AFPPaintingState instance member variable in DataStream.createIncludePageOverlay(String name, int x, int y).  This would mean regardless of whether FOP is using the AFPDocumentHandler or the AFPRenderer implementation, the calculation will still be done correctly and at the right time.  Hope this helps you with the fix.\n\nAdrian.\n\nVenkat Reddy wrote:\n> Hi Adrian,\n>\n> Thanks for your reply.\n>\n> Yes, You are absolutely right, I am trying to handle these conversions at the renderer level... I will soon come out with a patch to the bug you opened.\n>\n> Thanks once again for the source points,\n> Venkat.\n>\n> Adrian Cumiskey wrote:\n>> Hi Venkat,\n>>\n>> This approach is not a good idea.  It is possible that a runtime environment is configured to have multiple instances of Fop being instantiated by FopFactory with different rendering configurations (e.g. renderer resolution values).\n>>\n>> Its disappointing, but I've just noticed a bug in AFPPageOverlayElement, an AFPPaintingState shouldn't just be instantiated in there like that.  The processNode implementation will not accurately calculate and plot the page overlay position if the document resolution is different from the detault value of 240dpi.  This calculation should be carried out much later at rendering time, *not* in here at configuration time - its very hacky and you'll need to refactor this.  I seem to remember that Chris worked on this new feature so you may want to converse with him about its implementation.\n>>\n>> Adrian.\n>>\n>> Venkat Reddy wrote:\n>>> Hi,\n>>>\n>>> AFPPaintingState is being used in three different places altogether in FopTrunk source. The default constructor is being used in the following three classes...\n>>>\n>>> 1. AFPDocumentHandler.java\n>>> 2. AFPRenderer.java\n>>> 3. AFPPageOverlayElement.java\n>>>\n>>> There is a variable 'resolution' is being initialized for each instance, this resolution parameter can be set using the 'fop.xconf' for a particular render...\n>>>\n>>> Ex:- AFPRenderer configuration below\n>>>\n>>> <renderer mime=\"application/x-afp\">\n>>>      <!--\n>>>           The bit depth and type of images produced\n>>>           (this is the default setting)\n>>>      -->\n>>>      <images mode=\"b+w\" bits-per-pixel=\"8\"/>\n>>>      <renderer-resolution>1400</renderer-resolution>\n>>>\n>>>\n>>> The above <renderer-resolution> is being hardcoded as '240dpi' in AFPRendererConfigurator.java, which initiates the renderer resolution based on the configuration set in 'fop.xconf'. In order to resolve this problem, I will be changing the AFPPaintingState as singleton, so that all the above classes will get the instance using 'getInstance()' method instead of default constructor. This will resolve the <renderer-resolution> problem as well, by a simple change in AFPRendererConfigurator (instead of hardcoded value 240, assigning the value from the configuration object).\n>>>\n>>> Please review the above changes and tell me, if I am doing anything wrong here?\n>>>\n>>> Thanks,\n>>> Venkat.", "count": 2, "id": 131214, "time": "2009-10-19T07:00:32Z", "bug_id": 48002, "creation_time": "2009-10-19T07:00:32Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 48002, "attachment_id": null, "id": 131215, "time": "2009-10-19T07:07:48Z", "creator": "vanukuri.venkat@googlemail.com", "creation_time": "2009-10-19T07:07:48Z", "is_private": false, "text": "As per the Adrian comments above, I have prepared a patch for this bug with the changes to the following classes:\n\nAFPRendererConfigurator.java\n=======================================\n\ncustomizable.setResolution(rendererResolutionCfg.getValueAsInteger()); //previously 240 is hard coded here\n\nAFPPageOverlayElement.java\n==========================================\nRemoved the AFPPaintingState usage in this file(unit conversion from mpts to units)\n\nif (AFPElementMapping.INCLUDE_PAGE_OVERLAY.equals(elementName)) {\n            // convert user specific units to mpts and set the coordinates for the page overlay\n            pageOverlay.setX(UnitConv.convert(attlist.getValue(ATT_X)));\n            pageOverlay.setY(UnitConv.convert(attlist.getValue(ATT_Y)));\n        }\n\nAFPRenderer.java\n===============================================\nIncluded the conversion process in here, AFPPaintingState object is already availble here\n\nint x = (int)unitConv.mpt2units(ipo.getX());\n                                int y = (int)unitConv.mpt2units(ipo.getY());\n                                dataStream.createIncludePageOverlay(overlay, x, y);\n\nAFPDocumentHandler.java\n================================================\nSimilar chage to above...\n\nint x = (int)unitConv.mpt2units(ipo.getX());\n                                int y = (int)unitConv.mpt2units(ipo.getY());\n                                dataStream.createIncludePageOverlay(overlay, x, y);\n\nPlease someone review my patch attached to this bug...\n\n\nThanks,\nVenkat."}, {"attachment_id": null, "tags": [], "creator": "gadams@apache.org", "text": "resetting P2 open bugs to P3 pending further review", "count": 4, "id": 157309, "time": "2012-04-07T01:41:23Z", "bug_id": 48002, "creation_time": "2012-04-07T01:41:23Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 48002, "text": "increase priority for bugs with a patch", "id": 157838, "time": "2012-04-11T03:20:19Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:20:19Z", "is_private": false, "attachment_id": null}]
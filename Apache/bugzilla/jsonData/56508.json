[{"count": 0, "tags": [], "bug_id": 56508, "text": "I've set up my sites (https://www.mnot.net/ and https://redbot.org/) to require TLS SNI to be presented by clients; if they do not, I hard-fail.\n\nI believe this is the most secure configuration for a site that uses SNI to serve multiple origins, since it's the only way to assure that a client doesn't get content for one origin when they think it's for another.\n\nHowever, SSLStrictSNIVHostCheck is less than ideal for the task at hand.\n\n1) When a client doesn't present SNI, the response status code is 403 Forbidden. A more appropriate status code would be 400 Bad Request (as it's similar to a missing Host header), or perhaps a new status code (happy to help there).\n\n2) It doesn't appear possible to configure Apache to send back more than a simple string in the body of the 403 response due to missing SNI. I've configured like this:\n\n    SSLStrictSNIVHostCheck on\n    ErrorDocument 403 \"TLS SNI Required.\"\n\n    Listen 443\n    \n    <VirtualHost *:443>\n        ...\n        SSLStrictSNIVHostCheck on\n  \n      <Directory ...>\n        ErrorDocument 403 default\n        SSLRequireSSL\n        SSLOptions +StrictRequire\n      </Directory>\n    </VirtualHost>\n\nNote the re-defaulting of 403's ErrorDocument here. Configuring ErrorDocument 403 with a local file doesn't appear possible; if it is possible, the configuration is pretty convoluted (I tried a number of approaches).\n\nMuch more ops-friendly would be to have a separate SSLStrictSNIErrorDocument directive to allow people to present a page explaining to the end user that SNI is required to access this site.\n\n3) When multiple TLS hosts are served from the same IP:Port, SNI should be required by default; not requiring it is a security risk, as explained above.", "id": 175131, "time": "2014-05-09T08:03:16Z", "creator": "mnot@mnot.net", "creation_time": "2014-05-09T08:03:16Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": ">Much more ops-friendly would be to have a separate SSLStrictSNIErrorDocument >directive to allow people to present a page explaining to the end user that SNI >is required to access this site.\n\nOr have an optional parameter to SSLStrictSNIErrorDocument which has the same sort of string as ErrorDocument.\n\nI think that the ErrorDocument situation is worse than you mention, in that overriding the 403 (or whatever) document to handle SNI is more widely applicable than just lack of SNI since it can't be localized to a default vhost which is used just to catch lack of SNI.  Why not?  Suppose you have a default vhost to catch this error and a user with a backlevel client tries to visit your site.  Initially the default vhost is used, then the desired vhost is selected from the Host header, then mod_ssl fails the request due to SSLStrictSNIVHostCheck.  When the 403 response is generated, the vhost used for ErrorDocument is not the default vhost but instead the desired one.  So the ErrorDocument configuration in the default vhost is not consulted.\n\nMy current hack to work around this:\n\nIndex: modules/ssl/ssl_engine_kernel.c\n===================================================================\n--- modules/ssl/ssl_engine_kernel.c\t(revision 1608262)\n+++ modules/ssl/ssl_engine_kernel.c\t(working copy)\n@@ -213,6 +213,11 @@\n             ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server, APLOGNO(02033)\n                          \"No hostname was provided via SNI for a name based\"\n                          \" virtual host\");\n+            ap_custom_response(r, HTTP_FORBIDDEN,\n+                               \"<html><head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\"\n+                               \"</head><body><h1>Secure communication error</h1><p>Your browser does not support \"\n+                               \"secure communication with this web site.  Please use a modern browser such as \"\n+                               \"Chrome or Firefox.</p></body>\");\n             return HTTP_FORBIDDEN;\n         }\n     }\n\nWhen you tried\n\n  ErrorDocument 403 /some/path\n\ndid you check where it was looking with strace or similar?  That path should be taken relative to DocumentRoot OF THE VHOST SELECTED VIA HOST HEADER.\n\nIMO the best bet here is to not select a vhost from the host header if SNI was required and missing or mismatching, but I don't know if that is practical.\n\nBTW, there are too many separate issues here (getting an error document defined, concern about the use of 403, concern about security).  I'd at least raise the security concern on dev@httpd after looking at past discussions related to SSLStrictSNIVHostCheck.", "attachment_id": null, "id": 176251, "creator": "trawick@apache.org", "time": "2014-07-06T21:08:59Z", "bug_id": 56508, "creation_time": "2014-07-06T21:08:59Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56508, "attachment_id": null, "id": 176289, "time": "2014-07-08T11:13:34Z", "creator": "trawick@apache.org", "creation_time": "2014-07-08T11:13:34Z", "is_private": false, "text": "I had a thought on the response code issue you raised (403 vs. something else).\n\nThere's nothing at all wrong with the request from a back-level client, so 400 is not appropriate.  The request is rejected because of policy, so 403 seems appropriate.  If you have a response code in mind which you believe is more appropriate, bring it up on the dev@httpd list."}, {"count": 3, "tags": [], "bug_id": 56508, "attachment_id": null, "text": "(In reply to Jeff Trawick from comment #2)\n> There's nothing at all wrong with the request from a back-level client, so\n> 400 is not appropriate.  The request is rejected because of policy, so 403\n> seems appropriate.  If you have a response code in mind which you believe is\n> more appropriate, bring it up on the dev@httpd list.\n\nYeah, I was looking at this again yesterday and had much the same thought. \n\nIf I were to spec a new 4xx status code would Apache use it?", "id": 176304, "time": "2014-07-09T06:35:47Z", "creator": "mnot@mnot.net", "creation_time": "2014-07-09T06:35:47Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 56508, "attachment_id": null, "text": "Sounds like we would end up with an overengineered solution... mod_rewrite can already do much of this:\n\n  RewriteCond %{SSL:SSL_TLS_SNI} =\"\"\n  RewriteRule ^ /no_sni_error_page.html\n\n(and instead of a static page, you could also handle this with a script, setting whatever HTTP status you prefer)\n\n(In reply to Mark Nottingham from comment #0)\n> it's the only way to assure that a client\n> doesn't get content for one origin when they think it's for another.\n\nWell, the client has to verify the certificate in the first place, so you can configure some kind of dummy (\"snakeoil\") certificate for the first vhost.", "id": 176305, "time": "2014-07-09T08:09:12Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-07-09T08:09:12Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 56508, "attachment_id": null, "id": 176307, "time": "2014-07-09T10:44:02Z", "creator": "trawick@apache.org", "creation_time": "2014-07-09T10:44:02Z", "is_private": false, "text": ">If I were to spec a new 4xx status code would Apache use it?\n\nIMO no need/not appropriate to have a new 4xx status code."}, {"count": 6, "tags": [], "text": ">RewriteCond %{SSL:SSL_TLS_SNI} =\"\"\n>RewriteRule ^ /no_sni_error_page.html\n\nNice trick (thanks!) though error prone...  No more \"SSLStrictSNIVHostCheck On\", rules have to be active in every SSL-enabled vhost (since non-SNI client will likely still get to the right vhost even though they handshaked with the default vhost), rules have to be in proper order relative to existing rules for the vhost, error page still has to be active everywhere, potentially under the document root for each vhost.  (A global Alias directive didn't handle that for me; dunno if it is the ordering between mod_alias and mod_rewrite or some error that I need to debug.)\n\nIMO it is simply wrong to pick a vhost from the Host header if SNI clients aren't supposed to be supported (that leads to issues like needing to duplicate  directives related to no-SNI error handling in all the SSL-enabled vhosts).  But that has a migration impact in stable releases for those admins that already got this to work.\n\nA directive like SSLStrictSNIErrorDocument + SSLStrictSNIVHostCheck=On set in global scope is a nice pragmatic solution.", "attachment_id": null, "id": 176308, "creator": "trawick@apache.org", "time": "2014-07-09T10:58:36Z", "bug_id": 56508, "creation_time": "2014-07-09T10:58:36Z", "is_private": false}, {"count": 7, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "text": "(In reply to Jeff Trawick from comment #6)\n> No more \"SSLStrictSNIVHostCheck On\",\n\nYes, since I always considered this to be an unnecessary/misdesigned directive (see e.g. https://mail-archives.apache.org/mod_mbox/httpd-dev/200903.mbox/%3C49D0EFF7.8030902@velox.ch%3E). The primary purpose of SNI is allowing to present the proper certificate, not enforcing access control, IMO.\n\n> rules have to be active in every SSL-enabled vhost (since non-SNI\n> client will likely still get to the right vhost even though they handshaked\n> with the default vhost), rules have to be in proper order relative to\n> existing rules for the vhost,\n\nRelatively easy to achieve with \"RewriteOptions InheritBefore\" (or even \"RewriteOptions InheritdownBefore\" with 2.4.8 and later), I would say.\n\n> IMO it is simply wrong to pick a vhost from the Host header if SNI clients\n> aren't supposed to be supported\n\nDid you mean *non-*SNI clients? I can't follow you here otherwise.", "id": 176356, "time": "2014-07-12T06:23:10Z", "bug_id": 56508, "creation_time": "2014-07-12T06:23:10Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 56508, "attachment_id": null, "text": ">The primary purpose of SNI is allowing to present the proper certificate, not >enforcing access control, IMO.\n\nI think that's a perverse way of describe the desire to lock out non-SNI clients when relying on SNI to select the proper certificate.  (I mention only the certificate selection issue as I will trust for the moment all previous refutation of the security concerns about the satisfaction of all other security/access-related SSL configuration in the vhost when the client gets to the right vhost after first being handled by the wrong certificate/vhost.)\n\nAs an admin, I want clients for whom the proper certificate can't be selected to use a different browser, not to continue to use my site with a negative visual warning in the address bar.  Those users or unattended clients that do proceed after a certificate error should get a message indicating how to fix the problem, not proceed to use the site.\n\n>Relatively easy to achieve with \"RewriteOptions InheritBefore\" (or even >\"RewriteOptions InheritdownBefore\" with 2.4.8 and later), I would say.\n\nThanks!\n\nAside from general concerns about the mod_rewrite requirements (mod_rewrite is definitely error prone in general, has unexpected behavior between configuration scopes, and many people are wise to avoid it), I still had problems with the earlier recipe and avoiding having to put the error page under DocumentRoot of every vhost.  I'll have to play with this further to sort out any errors on my part vs. real limitations.\n\n>Did you mean *non-*SNI clients? I can't follow you here otherwise.\n\nYes, of course :)", "id": 176365, "time": "2014-07-12T13:46:47Z", "creator": "trawick@apache.org", "creation_time": "2014-07-12T13:46:47Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 56508, "attachment_id": null, "text": ">>The primary purpose of SNI is allowing to present the proper certificate, not >>enforcing access control, IMO.\n\n>I think that's a perverse way of describe the desire to lock out non-SNI clients >when relying on SNI to select the proper certificate.\n\nI just realized that I didn't understand the big picture from your perspective, which I think is:\n\nBecause there is no security-based reason to reject clients that don't support SNI even if you are relying on name (SNI)-based SSL virtual hosts, then having mod_ssl return FORBIDDEN (or any HTTP error) for this situation makes no sense, and any solution should be outside of mod_ssl to the extent possible.\n\nIs that correct?", "id": 176368, "time": "2014-07-12T15:36:11Z", "creator": "trawick@apache.org", "creation_time": "2014-07-12T15:36:11Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 56508, "attachment_id": null, "id": 176414, "time": "2014-07-16T05:44:43Z", "creator": "asfbugz@velox.ch", "creation_time": "2014-07-16T05:44:43Z", "is_private": false, "text": "(In reply to Jeff Trawick from comment #9)\n> I just realized that I didn't understand the big picture from your\n> perspective, which I think is:\n> \n> Because there is no security-based reason to reject clients that don't\n> support SNI even if you are relying on name (SNI)-based SSL virtual hosts,\n> then having mod_ssl return FORBIDDEN (or any HTTP error) for this situation\n> makes no sense,\n\nNot necessarily, but I think (only) relying on the presence of a suitable SNI extension in a ClientHello for deciding whether a client is allowed to \"reach\" a certain vhost is too coarse.\n\nThe assumption that configuring a more restrictive setting like SSLCipherSuite or SSLProtocol for a non-default vhost is automatically enforced when SNI is in place isn't really true, unfortunately. In ssl_callback_ServerNameIndication()/ssl_find_vhost(), we try to \"fix\" some things, but essentially, OpenSSL's SSL_set_SSL_CTX() implementation is too slim, IMO - see https://rt.openssl.org/Ticket/Display.html?user=guest&pass=guest&id=3183 (and https://issues.apache.org/bugzilla/show_bug.cgi?id=55707 for its implications on mod_ssl).\n\n> and any solution should be outside of mod_ssl to the extent possible.\n\nI think it's much more safe if SSL-related access restrictions are spelled out explicitly in the config, by means of \"Require\" directives (or \"SSLRequire\" in earlier httpd versions). E.g.:\n\n<RequireAll>\n  Require expr -n %{SSL_TLS_SNI}\n  Require expr %{SSL_PROTOCOL} in { \"TLSv1.1\", \"TLSv1.2\" }\n  Require expr %{SSL_CIPHER_USEKEYSIZE} ge 128\n</RequireAll>\n\n... rather than having a single \"SSLStrictSNIVHostCheck\" flag. Returning 403 is fine in this case, as is an appropriate ErrorDocument. But adding a per-module and per-feature error handling directive (\"SSLStrictSNIErrorDocument\") feels like the wrong approach to me."}]
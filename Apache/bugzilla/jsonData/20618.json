[{"count": 0, "attachment_id": null, "bug_id": 20618, "is_private": false, "id": 38600, "time": "2003-06-09T17:41:14Z", "creator": "james.treacy@c24.biz", "creation_time": "2003-06-09T17:41:14Z", "tags": [], "text": "The matches() method in this class uses the Pattern.find() method incorrectly, \nleading to pattern matching behaviour that differs wildly from the pattern \nmatching behaviour in JDK 1.4 which I assume it is meant to copy.  It should \nuse the Pattern.matches() method instead to get a more accurate result.  For \nexample: line 116 of Jdk14RegexpMatcher\n\n\npublic boolean matches(String input, int options)\n        throws BuildException {\n        try {\n            Pattern p = getCompiledPattern(options);\n            return p.matcher(input).find();\n        } catch (Exception e) {\n            throw new BuildException(e);\n        }\n    }\n\nthe current code will return true if I am looking for a match to the pattern [0-\n9] {0,2} and my search String is 6M whilst \"6M\".match(\"[0-9] {0,2}\") will \nreturn false.  Jdk14RegexpMatcher.matches() returns true because it uses the \nlooser find() method. I would be extremely grateful if a fix for this bug could \nbe implemented in the near future, which makes use of the tighter matches() \nmethod.\n\nkind regards"}, {"count": 1, "attachment_id": null, "bug_id": 20618, "is_private": false, "id": 38606, "time": "2003-06-09T18:06:15Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-06-09T18:06:15Z", "tags": [], "text": "I think that it is used in the correct fashion, abet\nwith an incorrect name.\n\nFor example with containsregex in CVS head, the\nfollowing:\n  <concat>\n     6M\n12\n     <filterchain><containregex pattern=\"[0-9]{0,2}\"/></filterchain>\n  </concat>\nthe 6M and the 12 line are found.\n\nand <concat>\n     6M\n12\n     <filterchain><containregex pattern=\"$[0-9]{0,2}$\"/></filterchain>\n  </concat>\n\nonly the 12 line is found"}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "text": "I've always been bad with names and Ant's sources tell a lot of stories about this\n(even Erik and Steve tell them in their book, thankfully without pointing fingers).\n\nI admit, I've been the one who called the method match and used a misleading\nname.  The behavior we have is more a partialMatch or something - and is the\nbehavior most of the applications of that method inside Ant need.\n\nSo yes, the name is wrong and we can't change for backwards compatibility.\n\nIf you need exact matching, anchoring your pattern with ^ and $ is the way to go.", "id": 44510, "attachment_id": null, "bug_id": 20618, "creation_time": "2003-09-23T15:16:53Z", "time": "2003-09-23T15:16:53Z", "is_private": false}]
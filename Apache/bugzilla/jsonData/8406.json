[{"count": 0, "tags": [], "bug_id": 8406, "text": "Hello\n\nCrimsons factory finder (javax.xml.transform.FactoryFinder) uses the current \nthreads context class loader to load extensions, instead of the class loader \nthat loaded the FactoryFinder class (does so only if JRE is prior 1.2).\n\nI don't know the reasoning behind this, but it would be nice if the factory \nfinders ClassLoader could be tried in case the context ClassLoader failed \nbefore giving up finding a resource alltogether.\n\nThe reason for that is when an application starts using additional class \nloaders and threads, it can become difficult to assert that each thread that \npotentially accesses the Crimson package has the correct context class loader \nassociated. The application could however make sure that the three jars of \nCrimson are loaded through the same ClassLoader instance.\n\nThanks,\nChristian.", "id": 14411, "time": "2002-04-23T08:45:35Z", "creator": "Christian.D.Schnell@t-online.de", "creation_time": "2002-04-23T08:45:35Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 8406, "attachment_id": null, "text": "The context ClassLoader is checked first so the code will run correctly in the case that it is \nbundled as part of J2SE, which it is in JDK 1.4.  In any case, if the context ClassLoader is not set, \nie. it is null, then the code does try to use the current ClassLoader.  Does this not work for you?", "id": 15206, "time": "2002-04-30T22:45:01Z", "creator": "edwingo@apache.org", "creation_time": "2002-04-30T22:45:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 8406, "attachment_id": null, "id": 15234, "time": "2002-05-01T11:48:56Z", "creator": "Christian.D.Schnell@t-online.de", "creation_time": "2002-05-01T11:48:56Z", "is_private": false, "text": "First, I need to correct myself: I actually meant \njavax.xml.parsers.FactoryFinder (as contained in crimson-1.1.3-src.zip) instead \nof javax.xml.transform.FactoryFinder (xalan-j_2_3_1-src.zip), but when looking \nat the sources, both take the same approach in this respect (also true for \nwhat's released with JDK1.4).\n\n> The context ClassLoader is checked first so the code will run\n> correctly in the case that it is bundled as part of J2SE,\n> which it is in JDK 1.4.  In any case, if the context\n> ClassLoader is not set, ie. it is null, then the code does\n> try to use the current ClassLoader.  Does this not work for\n> you?\n\nBy default, a threads context ClassLoader is non-null (see \njava.lang.Thread.getContextClassLoader()) -- that means for JRE >= 1.2, \nsetContextClassLoader() has to be called in the situation that I described, \nwhich is a little bit unhandy and unnecessary.\n\nBoth FactoryFinder implementations use Class.forName() in case the context \nClassLoader is null, which is fine as it is equivalent to using the calling \nclasses ClassLoader.\n\nSo I want to reformulate my suggestion to: In the newInstance() implementation, \ntry Class.forName() in case that the context ClassLoader couldn't load it \nbefore giving up, like it is done in case the context ClassLoader is null.\n\nThanks,\nChristian.\n"}, {"count": 3, "tags": [], "bug_id": 8406, "attachment_id": null, "id": 15260, "time": "2002-05-01T18:00:29Z", "creator": "edwingo@apache.org", "creation_time": "2002-05-01T18:00:29Z", "is_private": false, "text": "Could you explain the problem you are having w/ the code as it exists now?\nI would like to avoid new \nbugs in the code so I would like to know more\nabout your application and the problems you are \nhaving.\nIt might be easier to contact me directly via email at \"edwingo-nospam@apache.org\" but \nremove the \"-nospam\" suffix.\n\nI just happen to be updating the code to fix some other security \nrelated bugs and am also fixing other bugs as well.  I am in the PDT timezone so that might be a problem \nw/ real time info exchange."}]
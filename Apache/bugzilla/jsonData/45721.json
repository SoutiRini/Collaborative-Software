[{"count": 0, "tags": [], "bug_id": 45721, "text": "Users tend to get stack traces quite a lot and then they fire them off to some open source mailing list or forum asking for help. One of the first questions by support teams is often 'OK, what version are you using'.\n\nGiven that its possible to figure out the actual version being used of each class - either using the package information from the MANIFEST or by finding the jar the class came from, it seems logical to include the version information into a stack trace if it can be easily deduced.\n\nOne day the JVM might actually do this for us :) \n\nIn the meantime, here's a trivial patch which appends an optional String to stack traces printed with log4j which includes the jar file name if it can be deduced plus the Java Package version the line of code comes from.\n\nHere's an example...\n\norg.apache.log4j.config.PropertySetterException: Hello\n\tat org.apache.log4j.spi.ThrowableInformationTest.testStackTracePackageName(ThrowableInformationTest.java:306)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [1.5.0]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [1.5.0]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [1.5.0]\n\tat java.lang.reflect.Method.invoke(Method.java:585) [1.5.0]\n\tat junit.framework.TestCase.runTest(TestCase.java:154) [junit-3.8.1.jar]\n\tat junit.framework.TestCase.runBare(TestCase.java:127) [junit-3.8.1.jar]\n\tat junit.framework.TestResult$1.protect(TestResult.java:106) [junit-3.8.1.jar]\n\tat junit.framework.TestResult.runProtected(TestResult.java:124) [junit-3.8.1.jar]\n\tat junit.framework.TestResult.run(TestResult.java:109) [junit-3.8.1.jar]\n\tat junit.framework.TestCase.run(TestCase.java:118) [junit-3.8.1.jar]\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116) [junit-3.8.1.jar]\n\tat com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:94) [idea_rt.jar]\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109) [junit-3.8.1.jar]\n\tat com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:22) [idea_rt.jar]\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118) [idea_rt.jar]\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) [idea_rt.jar]\n\nSo you can see what version of junit is being used (despite there being no manifest information) along with the JDK implementation version. \n\ne.g.\n\n  at java.lang.reflect.Method.invoke(Method.java:585) [1.5.0]\n\nmeans we found the package number but couldn't find the jar file. Whereas \n\n  at junit.framework.TestCase.run(TestCase.java:118) [junit-3.8.1.jar]\n\nmeans we found the jar file but the jar file has no manifest version information.", "id": 120254, "time": "2008-09-01T04:31:11Z", "creator": "james.strachan@gmail.com", "creation_time": "2008-09-01T04:31:11Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "james.strachan@gmail.com", "attachment_id": 22506, "text": "Created attachment 22506\nhere's the patch", "id": 120255, "time": "2008-09-01T04:32:19Z", "bug_id": 45721, "creation_time": "2008-09-01T04:32:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45721, "attachment_id": null, "id": 120265, "time": "2008-09-01T17:03:29Z", "creator": "psmith@apache.org", "creation_time": "2008-09-01T17:03:29Z", "is_private": false, "text": "This is a pretty spiffy change I have to say. I'd love to make this a configuration option though rather than committing to it for every single exception.  Experience says that some people just won't want this extra detail.\n\nI can't believe no-ones thought of this one before, this is pretty useful information for triaging issues with remote customers.  Nice one."}, {"count": 3, "tags": [], "bug_id": 45721, "attachment_id": null, "id": 120269, "time": "2008-09-02T01:17:17Z", "creator": "james.strachan@gmail.com", "creation_time": "2008-09-02T01:17:17Z", "is_private": false, "text": "thanks Paul :) \n\nI did try to make it configurable; but that'd need a bigger refactor as there's no real way to access any context from the ThrowableInformation - unless we just make it a static property that can be initialised on startup via some system property?\n\nI figure lets enable it by default as its low noise (stack traces are already huge and its typically only gonna print a small version string most of the time - in the middle of the stack trace that few users actually look at anyway - they only read the first line which would have no version information in it anyway); then lets folks disable it explicitly via log4j.xml/properties if they really wish.\n\nBTW the ultimate end user might not think they want this - but when they hit an issue - the poor person on the open source list trying to figure out their issue will really want it! I'd hugely recommend that users have to go out of their way to disable this; as having it on by default will help loads of us open source hackers support our libraries/projects that get embedded in a zillion projects out there."}, {"count": 4, "tags": [], "bug_id": 45721, "attachment_id": 22514, "id": 120286, "time": "2008-09-02T07:01:50Z", "creator": "james.strachan@gmail.com", "creation_time": "2008-09-02T07:01:50Z", "is_private": false, "text": "Created attachment 22514\nhere's an updated patch that lets this feature be disabled via calling ThrowableInformation.setIncludeVersionInformation(false).set\n\nHere's an improved patch that lets folks disable this feature too. Its way too important and useful to all log4j using projects out there to have this disabled by default - but this allows folks to disable it if they want"}, {"count": 5, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "How do JVMs format stack traces for non-english locales?  Do they start with\n\"at\" as the implementation requires.\n\nI'd be surprised if this didn't break the unit tests, at least if the tests\nwere running against a log4j.jar.\n\nThe desired behavior could be configurable if it were moved into PatternLayout\nor better, EnhancedPatternLayout.  Currently both of those return true for\nignoreThrowable which delegates the stack trace formatting to the\nWriterAppender and ThrowableInformation.   When configured for the enhanced\nstack trace, the layout would return false and format the stack trace itself.  \nIf moved into EnhancedPatternLayout, the implementation could use the JDK 1.4\nThrowable.getStackTrace method and avoid attempting to parse the\nprintStackTrace output since extras requires JDK 1.4 or later.  Could add a\nstackTrace property to EnhancedPatternLayout with values: none, default and\nenhanced.\n\nAs for JVM implementation, you could bounce the idea off\ndev@geronimo.apache.org and see their thoughts.", "id": 120287, "time": "2008-09-02T08:05:09Z", "bug_id": 45721, "creation_time": "2008-09-02T08:05:09Z", "is_private": false}, {"count": 6, "tags": [], "creator": "psmith@apache.org", "text": "In regards to the non-English locales, how exactly does one configure the JVM to use non-English stack traces?  Looking at the Throwable.printStackTrace() there's a hard-coded 'at':\n\n    public void printStackTrace(PrintStream s) {\n        synchronized (s) {\n            s.println(this);\n            StackTraceElement[] trace = getOurStackTrace();\n            for (int i=0; i < trace.length; i++)\n                s.println(\"\\tat \" + trace[i]);\n....\n\n\nSo I don't think there's any locale issue to worry about here.  I tend to agree with James that having this as the default behaviour is a really good thing, but probably going to be controversial (50% love it, 50% will rant on the list that they hate it and demand to change the default behaviour - I think it's just one of those things).\n\nFor this reason I would tend to agree with Curt that leaving the default behaviour as it is is probably the safer option initially (log4j 2.0 however could be different ball game).  EnhancedPatternLayout maybe more flexible generally.  The other option to consider is having the option enabled/disable in the DOMConfiguration layer as 'log4j.debug' is tuned:\n\ne.g. in log4j.xml:\n\n<log4j:configuration debug=\"false\" threshold=\"debug\" enhancedStackTraces=\"true\" ...\n\nHaving both a general log4j configuration and EnhancedPatternLayout would cover all flexibilities (a general log4j environment switch, as well as per-layout options as needed).", "id": 120299, "time": "2008-09-02T14:57:28Z", "bug_id": 45721, "creation_time": "2008-09-02T14:57:28Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 45721, "text": "Created attachment 22519\nhere's a newer patch which implements Curts ideas\n\nBased on the feedback of this thread, I've refactored the patch.\n\n* there's a helper method on ThrowableInformation.getThrowableStrRep(true) to get an enhanced format (in case anyone wants it) but by default it remains unchanged\n\n* the PatternLayout now has a property ExtendedStackTrace which is off by default\n\nSo out of the box there are no changes to log4j's output and all the tests still pass.\n\nBut if you enable ExtendedStackTrace on the layout you get the extended stack trace. You can do this via XML or via the properties file...\n\ne.g. \n\nlog4j.appender.testAppender.layout=org.apache.log4j.MyPatternLayout\nlog4j.appender.testAppender.layout.ConversionPattern=%5p %-4# - %m%n\nlog4j.appender.testAppender.layout.ExtendedStackTrace=true\n\nor\n\n    <layout class=\"org.apache.log4j.PatternLayout\">\n      <param name=\"ExtendedStackTrace\" value=\"true\"/>\n    </layout>\n\nI'd really rather it be enabled by default but figured that might need to wait for a major version change", "id": 120308, "time": "2008-09-03T03:21:47Z", "creator": "james.strachan@gmail.com", "creation_time": "2008-09-03T03:21:47Z", "is_private": false, "attachment_id": 22519}, {"count": 8, "tags": [], "bug_id": 45721, "text": "This looks really good James!  My only question is with regards to the extra methods in ThrowableInformation that are marked as protected, is there a need to keep them protected rather than make them private?  I can't think of a reason to expose those methods in the public api, that's not to say  there isn't one, and certainly with only 1 coffee this morning I may just be blind.\n\nI think this is a really useful addition.", "id": 120325, "time": "2008-09-03T15:35:21Z", "creator": "psmith@apache.org", "creation_time": "2008-09-03T15:35:21Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 45721, "text": "The EnhancedPatternLayout in the extras (backported from log4j 1.3's PatternLayout) already has some support for configuration of stack traces by using the %throwable pattern specifier.  You can already use %throwable{full} and %throwable{short} to specify the JDK generated stack trace or just the throwable's message, respectively.  Adding support for {enhanced} and {none} (to suppress stack trace) would be fairly straight forward and could use JDK 1.4's getStackTrace().\n\nNot sure how difficult that approach would be to add to log4j 1.2's PatternLayout since its parser wasn't designed for longer pattern specifiers.", "id": 120329, "time": "2008-09-03T21:54:41Z", "creator": "carnold@apache.org", "creation_time": "2008-09-03T21:54:41Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 45721, "text": "Paul, feel free to make those methods private if you like; I don't have a strong opinion either way :)\n\nCurt - if you wanna add support in the EnhancedPatternLayout please be my guest too; it should be pretty trivial either to reuse the same code on ThrowableInformation, or use JDK\n1.4's getStackTrace() - as Paul said, the JDK has hard coded \"at \" so its no biggie either way really. \n\nI'm keen to ensure the core log4j package has support for this enhanced stack trace feature ASAP as its what most users seem to use. Until this thread, I'd never heard of or seen the apache-log4j-extras stuff :). But the more places that support this feature in the Java logging ecosystem, the better!", "id": 120334, "time": "2008-09-04T00:33:05Z", "creator": "james.strachan@gmail.com", "creation_time": "2008-09-04T00:33:05Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 45721, "text": "I've thought a little bit more of this on the drive back home and hope to look at the issue in detail in the next 24 hours.  PatternLayout or EnhancedPatternLayout probably isn't the appropriate place for the enhancement since it may be in a totally different environment that the original caller.  For example, if the LoggingEvent + ThrowableInfo has been serialized and sent to Chainsaw over a SocketAppender, you'd get the jar or version of the class in Chainsaw's environment.\n\nI'd leaning more toward trying to mimic the ObjectRenderer approach and allow you to either register a ThrowableRenderer class through a system property or configuration file.  Something like:\n\njava -Dlog4j.ThrowableRenderer=org.apache.log4j.EnhancedThrowableRenderer\n\nThe ObjectRenderer interface could be used for the ThrowableRenderer, but a new interface would likely be better.\n\nI'm guessing Paul was decompiling his JVM's implementation of Throwable.printStackTrace either explicitly or implicitly through a debugger.  Different versions of the class library implemented printStackTrace differently (we had some tests fail due to slight differences in JRockit's and GCJ's implementation of printStackTrace).  It is good to know that \"at\" appears to be fixed, but users could still override an exception's printStackTrace() and confuse the trace parsing.  Using getStackTrace would be more reliable, but would require JDK 1.4.  Specifying the throwable renderer as a class would allow the user to customize the behavior if they ran into that type of problem. ", "id": 120365, "time": "2008-09-04T10:15:50Z", "creator": "carnold@apache.org", "creation_time": "2008-09-04T10:15:50Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 45721, "text": "(In reply to comment #11)\n> I've thought a little bit more of this on the drive back home and hope to look\n> at the issue in detail in the next 24 hours.  PatternLayout or\n> EnhancedPatternLayout probably isn't the appropriate place for the enhancement\n> since it may be in a totally different environment that the original caller. \n> For example, if the LoggingEvent + ThrowableInfo has been serialized and sent\n> to Chainsaw over a SocketAppender, you'd get the jar or version of the class in\n> Chainsaw's environment.\n> \n\nThis is technically true.  The common case though is for the local appender to benefit from it.  If we added a property to PatternLayout as James has done, it can be documented with the fact that the rendered string is only relevant to local environments.\n\n> I'd leaning more toward trying to mimic the ObjectRenderer approach and allow\n> you to either register a ThrowableRenderer class through a system property or\n> configuration file.  Something like:\n> \n> java -Dlog4j.ThrowableRenderer=org.apache.log4j.EnhancedThrowableRenderer\n> \n> The ObjectRenderer interface could be used for the ThrowableRenderer, but a new\n> interface would likely be better.\n\nI'm not sure how this gets around your Chainsaw scenario at all, doesn't this suffer from the same problem?  Anyway, I think this sort of problem just needs to be documented.  Unless the serialized form of the ThrowableInformation can carry with it all the details of the classes at computation time so that it can be displayed on some remote end.  That would change the payload weight of that class significantly though.  I'm not sure that is going to be worth the cost/effort.\n\n> \n> I'm guessing Paul was decompiling his JVM's implementation of\n> Throwable.printStackTrace either explicitly or implicitly through a debugger. \n> Different versions of the class library implemented printStackTrace differently\n> (we had some tests fail due to slight differences in JRockit's and GCJ's\n> implementation of printStackTrace).  It is good to know that \"at\" appears to be\n> fixed, but users could still override an exception's printStackTrace() and\n> confuse the trace parsing.  Using getStackTrace would be more reliable, but\n> would require JDK 1.4.  Specifying the throwable renderer as a class would\n> allow the user to customize the behavior if they ran into that type of problem. \n \n\nI had always thought the Layout was responsible for emitting the Throwable string, but as I learnt yesterday working on Pinpoint that that's not actually correct.  That felt odd to me.  Really the Layout should be responsible for outputting the Throwable in it's presentation form (if needed), but obviously log4j's design, right or wrong, now prohibits that approach.\n\nHaving a ThrowableRenderer is actually probably the best of all worlds.  It would be nice to have the Configurators support this new property (ala log4j.debug), and even nicer if it didn't have to specify a full class name (log4j.useSpiffyExceptionFormat which uses a known default class).", "id": 120370, "time": "2008-09-04T15:32:48Z", "creator": "psmith@apache.org", "creation_time": "2008-09-04T15:32:48Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 45721, "attachment_id": null, "id": 120374, "time": "2008-09-04T21:08:26Z", "creator": "carnold@apache.org", "creation_time": "2008-09-04T21:08:26Z", "is_private": false, "text": "From comment #12\n\n>I'm not sure how this gets around your Chainsaw scenario at all, doesn't this\n>suffer from the same problem?  Anyway, I think this sort of problem just needs\n>to be documented.  Unless the serialized form of the ThrowableInformation can\n>carry with it all the details of the classes at computation time so that it can\n>be displayed on some remote end.  That would change the payload weight of that\n>class significantly though.  I'm not sure that is going to be worth the\n>cost/effort.\n\nAsyncAppender and the SocketAppenders call LoggingEvent.getThrowableStrRep() before queuing the logging event or sending it across the wire.  The serialized form of the ThrowableInfo only contains the resulting string representation of the throwable.  Any configured ThrowableRenderer would occur in this step which would be on the thread doing the logging and not in the dispatching thread or deserializing environment.\n\n>I had always thought the Layout was responsible for emitting the Throwable\n>string, but as I learnt yesterday working on Pinpoint that that's not actually\n>correct.  That felt odd to me.  Really the Layout should be responsible for\n>outputting the Throwable in it's presentation form (if needed), but obviously\n>log4j's design, right or wrong, now prohibits that approach.\n\nThe log4j 2.0 two pass approach of an extract phase during the call to extract value objects followed by a render phase, likely deferred, that only works on the extracted value objects should allow arbitrary formatting of the Throwable.  However, the log4j 1.2 design limits the layout to working with the output of ThrowableInfo.getThrowableStrRep. \n\n>Having a ThrowableRenderer is actually probably the best of all worlds.  It\n>would be nice to have the Configurators support this new property (ala\n>log4j.debug), and even nicer if it didn't have to specify a full class name\n>(log4j.useSpiffyExceptionFormat which uses a known default class).\n\nCould prepend \"org.apache.log4j.\" if Class.forName() can't find the class, so you could do either\n\nlog4j.ThrowableRenderer=org.apache.log4j.SpiffyExceptionRenderer\n\nor\n\nlog4j.ThrowableRenderer=SpiffyExceptionRenderer\n\nThe ObjectRenderer classes are in org.apache.log4j.or, I guess we could add \"org.apache.log4j.tr\".  However, abbreviations in package names aren't desirable and adding three more classes to org.apache.log4j doesn't seem like a big deal."}, {"count": 14, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 120403, "creation_time": "2008-09-05T08:55:42Z", "time": "2008-09-05T08:55:42Z", "bug_id": 45721, "text": "\nJames Strachan has kindly contributed his patch to the logback project as well. See http://jira.qos.ch/browse/LBGENERAL-23\n\nAfter spending several days working on this problem, I discovered that a one line change makes a big impact on performance.\n\nReplacing\n\n  URL resource = type.getClassLoader().getResource(  \\\n                  type.getName().replace('.', '/') + \".class\");\nwith\n    \n  URL resource = type.getProtectionDomain().getCodeSource().getLocation();\n\nMy tests show 12 fold improvement in performance. The time it takes to handle a stack trace goes down from 5 milliseconds to 400 microseconds. The same code without James' patch, that is without package version extraction, takes 100 microseconds. \n\nHTH,", "is_private": false}, {"count": 15, "text": "Committed an implementation in rev 697315.  Implementation supports ThrowableRenderer's in a fashion somewhat similar to ObjectRenderers.  Two ThrowableRenderer's are provided: org.apache.log4j.DefaultThrowableRenderer which implements the existing behavior and EnhancedThrowableRenderer which outputs code source location and version when running on JDK 1.4 or later or falls back to the existing behavior on JDK 1.3 and earlier.\n\nDOMConfigurator and PropertyConfigurator have been modified to support configuring ThrowableRenderer's.  Add\n\nlog4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer\n\nor\n\n<throwableRenderer class=\"org.apache.log4j.EnhancedThrowableRenderer\"/>\n\nto log4j.properties or log4j.xml respectively.\n\nEnhancedThrowableRenderer avoids writing and parsing the output of Throwable.printStackTrace which could potentially offset some of the performance hit of getting the source location and version.", "bug_id": 45721, "is_private": false, "id": 120816, "time": "2008-09-19T20:36:49Z", "creator": "carnold@apache.org", "creation_time": "2008-09-19T20:36:49Z", "tags": [], "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 45721, "text": "In addition to this information, it would be really nice for us to have the timestamp of the jarfile printed too.", "id": 121709, "time": "2008-10-21T01:06:34Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-10-21T01:06:34Z", "is_private": false, "attachment_id": null}]
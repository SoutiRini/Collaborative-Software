[{"attachment_id": 29789, "tags": [], "creator": "wp02855@gmail.com", "text": "Created attachment 29789\npatch file for above description\n\nHello All,\n\n\tIn reviewing code in directory 'httpd-2.4.3/server/mpm/winnt',\nfile 'mpm_winnt.c', function 'create_process()', I found two\ninstances where malloc() is called without a check for the return\nvalue of NULL, indicating failure.  Additionally, I found nowhere\nin the function where the memory allocated to 'arg' and 'arg[0]'\nis ever released by a call to free().  The patch below adds the\ntests in the case where malloc() fails:\n\n--- mpm_winnt.c.orig    2012-12-21 16:45:58.769855888 -0800\n+++ mpm_winnt.c 2012-12-22 07:04:44.133555336 -0800\n@@ -582,9 +582,21 @@\n         }\n \n         args = malloc((ap_server_conf->process->argc + 1) * sizeof (char*));\n+        if (args == NULL) {\n+            /* the fprintf below should be replaced with the equiv ap_log_error() call */\n+            fprintf(stderr, \"Unable to allocate memory for args in create_process()\\n\");\n+            apr_pool_destroy(ptemp);\n+            return -1;\n+        }\n         memcpy(args + 1, ap_server_conf->process->argv + 1,\n                (ap_server_conf->process->argc - 1) * sizeof (char*));\n         args[0] = malloc(strlen(cmd) + 1);\n+        if (args[0] == NULL) {\n+            /* the fprintf below should be replaced with the equiv ap_log_error() call */\n+            fprintf(stderr, \"Unable to allocate memory for args in create_process()\\n\");\n+            apr_pool_destroy(ptemp);\n+            return -1;\n+        }\n         strcpy(args[0], cmd);\n         args[ap_server_conf->process->argc] = NULL;\n     }\n@@ -700,6 +712,8 @@\n     *child_proc = new_child.hproc;\n     *child_pid = new_child.pid;\n \n+    free(args); /* release memory previously alloc'd */\n+\n     return 0;\n\t \nI was not sure what the correct call for 'ap_log_error()' is :(\n\nIn directory 'httpd-2.4.3/server/mpm/winnt', file 'service.c',\nfunction 'service_nt_main_fn()', I found an instance of malloc()\nbeing called without the return value check for NULL, indicating\nfailure.  In function 'mpm_merge_service_args()', I found an\ninstance of malloc() being called without the return value check\nfor NULL, indicating failure.  In function 'mpm_service_start()'\nI found an instance of malloc() being called without the return\nvalue check for NULL, indicating failure.\n\nThe patch file below adds the test for NULL being returned from\na call to malloc():\n\n--- service.c.orig      2012-12-21 16:51:42.112518239 -0800\n+++ service.c   2012-12-22 07:11:24.950522079 -0800\n@@ -331,6 +331,12 @@\n \n         mpm_new_argv->nalloc = mpm_new_argv->nelts + argc - 1;\n         cmb_data = malloc(mpm_new_argv->nalloc * sizeof(const char *));\n+        if (cmb_data == NULL) {\n+            /* the fprintf below should be replaced with the appropriate call to ap_log_error() */\n+\n+            fprintf(stderr, \"Unable to allocate memory for cmb_data in service_nt_main_fn()\\n\");\n+            return;\n+        }\n \n         /* mpm_new_argv remains first (of lower significance) */\n         memcpy (cmb_data, mpm_new_argv->elts,\n@@ -351,6 +357,8 @@\n     SetEvent(ctx->service_init);\n \n     WaitForSingleObject(ctx->service_term, INFINITE);\n+\n+    free(cmd_data); /* release memory previously allocated by malloc() */\n }\n \n \n@@ -454,6 +462,11 @@\n      */\n     args->nalloc = args->nelts + svc_args->nelts;\n     cmb_data = malloc(args->nalloc * sizeof(const char *));\n+    if (cmb_data == NULL) {\n+        /* the fprintf below should be replaced with the appropriate call to ap_log_error() */\n+        fprintf(stderr, \"Unable to allocate memory for cmb_data in mpm_merge_service_args()\\n\");\n+        return;\n+    }\n \n     /* First three args (argv[0], -f, path) remain first */\n     memcpy(cmb_data, args->elts, args->elt_size * fixed_args);\n@@ -470,6 +483,8 @@\n     args->elts = (char *)cmb_data;\n     args->nelts = args->nalloc;\n \n+    free(cmb_data); /* release memory previously allocated by malloc() */\n+\n     return APR_SUCCESS;\n }\n \n@@ -786,6 +801,11 @@\n     }\n \n     start_argv = malloc((argc + 1) * sizeof(const char **));\n+    if (start_argv == NULL) {\n+        /* the fprintf below should be replaced with the appropriate call to ap_log_error() */\n+        fprintf(stderr, \"Unable to allocate memory for start_argv in mpm_service_start()\\n\");\n+        return;\n+    }\n     memcpy(start_argv, argv, argc * sizeof(const char **));\n     start_argv[argc] = NULL;\n \n@@ -809,6 +829,8 @@\n                      \"%s: Failed to start the service process.\",\n                      mpm_display_name);\n \n+    free(start_argv);   /* release memory previously allocated by malloc() */\n+\n     return rv;\n }\n  \nAdditionally, in the functions above, I found no cases in which\na successful allocation of memory is ever released by free()\nprior to the function returning, which could potentially cause\na memory leak (could it not)?", "count": 0, "id": 164214, "time": "2012-12-22T18:33:49Z", "bug_id": 54343, "creation_time": "2012-12-22T18:33:49Z", "is_private": false}, {"attachment_id": 29790, "tags": [], "creator": "wp02855@gmail.com", "text": "Created attachment 29790\nadds sanity check for malloc() in service.c", "count": 1, "id": 164215, "time": "2012-12-22T18:34:35Z", "bug_id": 54343, "creation_time": "2012-12-22T18:34:35Z", "is_private": false}, {"count": 2, "tags": [], "creator": "sf@sfritsch.de", "attachment_id": null, "text": "In general, replacing malloc with ap_malloc should do the right thing. Do you have a Windows system and can test that?", "id": 164235, "time": "2012-12-25T21:35:28Z", "bug_id": 54343, "creation_time": "2012-12-25T21:35:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 54343, "attachment_id": null, "id": 182884, "time": "2015-05-07T21:14:07Z", "creator": "wp02855@gmail.com", "creation_time": "2015-05-07T21:14:07Z", "is_private": false, "text": "I'm in agreement here, ap_malloc() works even on my antiquated Windows XP system that I still have hanging around.  Would someone merge/incorporate the patch into the 2.4.12 source tree?"}]
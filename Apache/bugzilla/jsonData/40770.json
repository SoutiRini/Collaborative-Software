[{"text": "Methods on HttpServletRequest and HttpSession cannot be accessed by reflection\nwhen running under security mode.  (a permission error will result). This is a\nproblem when running applications serving pages with Velocity, as the Velocity\nsyntax\n\n\t$request.session.d\n\t\nuses reflection to call the methods getSession() and getId() and hence will fail\nwith the stack trace below [1].  To make this work successfully you need to put\nseveral permissions in catalina.policy [2]\n\nThis seems at odds with a philosophy that using the core servlet api should not\nrequire internal tomcat packages to be exposed to the webapp.\n\nAdditional references:\n\nVelocity JIRA issue\nhttp://issues.apache.org/jira/browse/VELTOOLS-66\n\nMailing list discussion with user\nhttp://www.mail-archive.com/velocity-user@jakarta.apache.org/msg17060.html \n\nTested with:\n\nTomcat 5.5.15\nJava build 1.5.0_06-b05\n\n\n[1]\njava.security.AccessControlException: access denied (java.lang.RuntimePermission\naccessClassInPackage.org.apache.catalina.connector)\n\tat java.security.AccessControlContext.checkPermission(Unknown Source)\n\tat java.security.AccessController.checkPermission(Unknown Source)\n\tat java.lang.SecurityManager.checkPermission(Unknown Source)\n\tat java.lang.SecurityManager.checkPackageAccess(Unknown Source)\n\tat java.lang.Class.checkMemberAccess(Unknown Source)\n\tat java.lang.Class.getMethods(Unknown Source)\n\tat\norg.apache.velocity.util.introspection.ClassMap.getAccessibleMethods(ClassMap.java:262)\n\tat\norg.apache.velocity.util.introspection.ClassMap.populateMethodCache(ClassMap.java:155)\n\tat org.apache.velocity.util.introspection.ClassMap.(ClassMap.java:66)\n\tat\norg.apache.velocity.util.introspection.IntrospectorBase.createClassMap(IntrospectorBase.java:132)\n\tat\norg.apache.velocity.util.introspection.IntrospectorBase.getMethod(IntrospectorBase.java:116)\n\tat\norg.apache.velocity.util.introspection.Introspector.getMethod(Introspector.java:108)\n\tat\norg.apache.velocity.runtime.parser.node.PropertyExecutor.discover(PropertyExecutor.java:96)\n\tat\norg.apache.velocity.runtime.parser.node.PropertyExecutor.(PropertyExecutor.java:54)\n\tat\norg.apache.velocity.util.introspection.UberspectImpl.getPropertyGet(UberspectImpl.java:192)\n\tat\norg.apache.velocity.runtime.parser.node.ASTIdentifier.execute(ASTIdentifier.java:140)\n\tat\norg.apache.velocity.runtime.parser.node.ASTReference.execute(ASTReference.java:203)\n\tat\norg.apache.velocity.runtime.parser.node.ASTReference.render(ASTReference.java:294)\n\tat org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:324)\n\tat org.apache.velocity.Template.merge(Template.java:259)\n\tat\norg.apache.velocity.tools.view.servlet.VelocityViewServlet.performMerge(Unknown\nSource)\n\tat\norg.apache.velocity.tools.view.servlet.VelocityViewServlet.mergeTemplate(Unknown\nSource)\n\tat org.apache.velocity.tools.view.servlet.VelocityViewServlet.doRequest(Unknown\nSource)\n\tat org.apache.velocity.tools.view.servlet.VelocityViewServlet.doGet(Unknown Source)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n\n[2]\ngrant codeBase \"file:${catalina.home}/webapps/simple/WEB-INF/lib/velocity-1.4.jar\" \n{ \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.connector\"; \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.session\"; \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.core\"; \n}; \n\n\ngrant codeBase\n\"file:${catalina.home}/webapps/simple/WEB-INF/lib/velocity-tools-view-1.2.jar\" \n{ \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.connector\"; \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.session\"; \npermission java.lang.RuntimePermission\n\"accessClassInPackage.org.apache.catalina.core\"; \n};", "tags": [], "creator": "wglass@forio.com", "attachment_id": null, "count": 0, "id": 94870, "time": "2006-10-16T11:50:32Z", "bug_id": 40770, "creation_time": "2006-10-16T11:50:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 40770, "attachment_id": null, "is_private": false, "id": 95712, "time": "2006-11-11T21:24:02Z", "creator": "markt@apache.org", "creation_time": "2006-11-11T21:24:02Z", "text": "I can't see a way of relaxing the security constraints to allow reflection on\nthe *Facade objects without opening access to the entire package. It might be\npossible to move all the facades to their own package and then allow access to\nthat package but I haven't investigated the implications of this. I also want to\ntry to reproduce this with a simple test case to see if I can find an\nalternative way of doing the reflection that doesn't generate the security\nexception."}, {"count": 2, "tags": [], "creator": "wglass@forio.com", "attachment_id": null, "id": 95729, "time": "2006-11-12T06:50:51Z", "bug_id": 40770, "creation_time": "2006-11-12T06:50:51Z", "is_private": false, "text": "Moving the facade objects to their own package seems the simplest approach to \nme.  Can't think of any downside -- since they are internal implementations \nthere shouldn't be any compatibility issues."}, {"count": 3, "tags": [], "bug_id": 40770, "attachment_id": null, "text": "Velocity should not try to use reflection on tomcats internal classes. If you \ndo the same on the correct interface classes, you get no security violation. \nUnfortunately mapping the objects to the corresponding interface classes \ndoesn't look very nice. Have a look at my comment in:\n\nhttps://issues.apache.org/jira/browse/VELTOOLS-66\n", "id": 95875, "time": "2006-11-15T11:24:58Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2006-11-15T11:24:58Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 40770, "attachment_id": null, "text": "Closing as INVALID based on Rainer's investigations.", "id": 95884, "time": "2006-11-15T17:01:31Z", "creator": "markt@apache.org", "creation_time": "2006-11-15T17:01:31Z", "is_private": false}]
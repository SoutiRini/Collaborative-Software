[{"count": 0, "tags": [], "text": "This patch series (three) is a first implementation of a netmask filtering, pretty much as Apache's \"allow from\" and \"deny from\" directives, but with some limitations.\n\nI submit these patches for review only for now. I have tested them with a main() and torturing the NetMask class with various corner cases and it survived all of it.\n\nThe issue I have right now is writing a unit test. I cannot figure out how to do it atm, pointers to example code would be welcome.", "is_private": false, "id": 150134, "creator": "fgaliegue@gmail.com", "time": "2011-10-04T18:05:55Z", "bug_id": 51953, "creation_time": "2011-10-04T18:05:55Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 27686\nNetmask class", "attachment_id": 27686, "bug_id": 51953, "id": 150135, "time": "2011-10-04T18:06:15Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-04T18:06:15Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 27687\nNetmask filter", "is_private": false, "id": 150136, "creator": "fgaliegue@gmail.com", "time": "2011-10-04T18:06:30Z", "bug_id": 51953, "creation_time": "2011-10-04T18:06:30Z", "attachment_id": 27687}, {"count": 3, "tags": [], "text": "Created attachment 27688\nNetmask valve", "attachment_id": 27688, "bug_id": 51953, "id": 150137, "time": "2011-10-04T18:07:25Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-04T18:07:25Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 27689\nWhole patch (git diff origin/trunk..)", "is_private": false, "id": 150139, "creator": "fgaliegue@gmail.com", "time": "2011-10-04T18:46:53Z", "bug_id": 51953, "creation_time": "2011-10-04T18:46:53Z", "attachment_id": 27689}, {"count": 5, "tags": [], "bug_id": 51953, "text": "I might make this filter/valve a bit more generic: there's no reason to go through all the trouble of doing an InetAddress lookup, creating a BigInteger, shifting it, and then comparing it if there is no CIDR spec in the IP specified by the configuration.\n\nYou could create a fairly generic IP-matching interface and then two implementations: one simple string-equals one and a more complicated netmask-matching one.", "id": 150148, "time": "2011-10-04T20:52:36Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-10-04T20:52:36Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 51953, "text": "(In reply to comment #5)\n> I might make this filter/valve a bit more generic: there's no reason to go\n> through all the trouble of doing an InetAddress lookup, creating a BigInteger,\n> shifting it, and then comparing it if there is no CIDR spec in the IP specified\n> by the configuration.\n> \n\nWell, the remote host is always an IP address in string form, so there is no lookup performed  at all. When supplied with an IP address in string form, InetAddress.getByName() only validates the validity of the IP address (whether it be IPv4 and IPv6).\n\nAlso, the current implementation also does simple IP matching, since if there is no CIDR the right shift is 0, thus an exact match is required.\n\nMore to the point, I don't see how I could make this generic? It would mean dispatching at some point, but how?", "id": 150151, "time": "2011-10-04T21:05:25Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-04T21:05:25Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "This code is executed unconditionally:\n\n\"\nfinal InetAddress addr = InetAddress.getByName(property);\n\nfor (final NetMask nm: deny)\n     if (nm.matches(addr))\n\"\n\nNetMask.matches does a new BigInteger().shiftRight (though the shift should be 0 bytes, and so should be pretty quick).\n\nRemember that this code may be executed for every request, include, and forward, so you'd better take every opportunity to reduce the amount of time required to run it.\n\nIn terms of making it more generic, what I meant was that you would be able to quickly match exact-matches (using a simple String.equals) and only do the extra work when there was a netmask to actually check.", "attachment_id": null, "bug_id": 51953, "id": 150152, "time": "2011-10-04T21:15:43Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-10-04T21:15:43Z", "is_private": false}, {"count": 8, "tags": [], "creator": "fgaliegue@gmail.com", "is_private": false, "text": "(In reply to comment #7)\n> This code is executed unconditionally:\n> \n> \"\n> final InetAddress addr = InetAddress.getByName(property);\n> \n> for (final NetMask nm: deny)\n>      if (nm.matches(addr))\n> \"\n> \n> NetMask.matches does a new BigInteger().shiftRight (though the shift should be\n> 0 bytes, and so should be pretty quick).\n> \n> Remember that this code may be executed for every request, include, and\n> forward, so you'd better take every opportunity to reduce the amount of time\n> required to run it.\n> \n\nGood point. I was tempted at first to do a byte[] manipulation but found BigInteger to be very practical, especially since it requires the byte array to be in network order -- which is what I wanted.\n\nI'll have that second implementation working and compare the results in speed.\n\n> In terms of making it more generic, what I meant was that you would be able to\n> quickly match exact-matches (using a simple String.equals) and only do the\n> extra work when there was a netmask to actually check.\n\nThat's true, but consider ::ffff:127.0.0.1: it actually is the same than 127.0.0.1. An .equals() won't work here. OK, that's going far, but still.", "id": 150153, "time": "2011-10-04T21:30:27Z", "bug_id": 51953, "creation_time": "2011-10-04T21:30:27Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "Created attachment 27691\nUnified patch for RemoteAddrNetmaskFilter\n\nTake a look at this implementation (Filter only, for now), which I believe is a bit simpler and also allows fast string-matching when there is no \"/\" in the allow/deny spec.", "is_private": false, "id": 150154, "creator": "chris@christopherschultz.net", "time": "2011-10-04T21:53:31Z", "bug_id": 51953, "creation_time": "2011-10-04T21:53:31Z", "attachment_id": 27691}, {"count": 10, "tags": [], "bug_id": 51953, "attachment_id": 27694, "text": "Created attachment 27694\nAlternative netmask class, using byte arrays\n\nHere is another implementation using byte arrays only.\n\nI believe it is even faster than a string compare on exact byte matching, _and_ it doesn't get fooled by ::ffff:* addresses.", "id": 150170, "time": "2011-10-05T09:22:33Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-05T09:22:33Z", "is_private": false}, {"count": 11, "tags": [], "text": "This crude test using the following code shows indeed that the byte array based implementation is indeed MUCH faster:\n\n----\n    private static final int COUNT = 50000;\n\n    public static void main(final String[] args) throws UnknownHostException\n    {\n        final NetMask nm = new NetMask(\"22.3.25.8/24\");\n        final NetMask2 nm2 = new NetMask2(\"22.3.25.8/24\");\n\n        final InetAddress in1 = InetAddress.getByName(\"22.3.25.10\"),\n            in2 = InetAddress.getByName(\"cf83::ef:13:1\"),\n            in3 = InetAddress.getByName(\"12.143.110.1\");\n\n        int i;\n        long start, end;\n\n        start = System.currentTimeMillis();\n        for (i = 0; i < COUNT; i++) {\n            nm.matches(in1);\n            nm.matches(in2);\n            nm.matches(in3);\n        }\n        end = System.currentTimeMillis();\n\n        System.out.println(\"impl1: \" + (end - start));\n\n        start = System.currentTimeMillis();\n        for (i = 0; i < COUNT; i++) {\n            nm2.matches(in1);\n            nm2.matches(in2);\n            nm2.matches(in3);\n        }\n        end = System.currentTimeMillis();\n\n        System.out.println(\"impl2: \" + (end - start));\n\n    }\n----\n\nResults:\n\n----\nimpl1: 147\nimpl2: 11\n----\n\nSo, it's definitely the byte-based class. I'll try and throw the string compare into the mix and see how it fares for good measure.", "attachment_id": null, "bug_id": 51953, "id": 150176, "time": "2011-10-05T12:51:19Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-05T12:51:19Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 51953, "attachment_id": null, "text": "I like this NetMask implementation *much* better. It took me a while to convince myself that it was correct, but it looks good to me, now. :)\n\nThere are only a few nits of coding style that I would change. I'll post an updated patch that includes this implementation.\n\nDid you get a chance to look at my patch?", "id": 150180, "time": "2011-10-05T14:21:03Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-10-05T14:21:03Z", "is_private": false}, {"count": 13, "tags": [], "text": "(In reply to comment #12)\n> I like this NetMask implementation *much* better. It took me a while to\n> convince myself that it was correct, but it looks good to me, now. :)\n> \n> There are only a few nits of coding style that I would change. I'll post an\n> updated patch that includes this implementation.\n> \n> Did you get a chance to look at my patch?\n\nYes I did. But I'm really not convinced that string matching is a good idea. It may be for IPv4, but for IPv6 it will be a mess.\n\nIf you remember, I've had the problem that ::1 wouldn't match because the address reported by request.getRemoteHost() (is it the name?) was actually 0:0:0:0:0:0:0:1, which means you have to write it all. Furthermore, it is quite easy to miss a :0  in the mix...\n\nI'll continue the work when I get time.", "attachment_id": null, "bug_id": 51953, "id": 150183, "time": "2011-10-05T14:38:27Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-05T14:38:27Z", "is_private": false}, {"count": 14, "tags": [], "creator": "chris@christopherschultz.net", "is_private": false, "text": "(In reply to comment #13)\n> But I'm really not convinced that string matching is a good idea. It\n> may be for IPv4, but for IPv6 it will be a mess.\n\nI think you're right. With your faster implementation of NetMask, it makes this more reasonable.", "id": 150193, "time": "2011-10-05T15:35:07Z", "bug_id": 51953, "creation_time": "2011-10-05T15:35:07Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 51953, "attachment_id": null, "id": 150246, "time": "2011-10-06T07:34:50Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-06T07:34:50Z", "is_private": false, "text": "OK, I need advice.\n\nHow should errors be handled and at which level? What should happen if one specified netmask is invalid? Should the Valve/Filter fail completely? What should be logged and how?"}, {"count": 16, "tags": [], "text": "Created attachment 27726\nTests for the NetMask class\n\nHere are the first tests for this class. Only errors at object initialization time for now.\n\nCan I have hints for error handling?", "is_private": false, "id": 150310, "creator": "fgaliegue@gmail.com", "time": "2011-10-07T13:53:05Z", "bug_id": 51953, "creation_time": "2011-10-07T13:53:05Z", "attachment_id": 27726}, {"count": 17, "tags": [], "text": "Still waiting for input...", "attachment_id": null, "bug_id": 51953, "id": 150378, "time": "2011-10-09T12:37:21Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-09T12:37:21Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 51953, "attachment_id": 27782, "is_private": false, "id": 150597, "time": "2011-10-14T23:03:25Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-14T23:03:25Z", "text": "Created attachment 27782\nVersion \"0.1\" of the patch\n\nFull patch over Apache's tomcat70 git repo (therefore over tomcat's trunk if I get it right).\n\nThis patch addresses the following remarks raised on the devel mailing list:\n\n* .get*() now return a suitable input for .set*();\n* as the process of filling lists for deny and allow is the same, for the filter and the valve, factorize it;\n* more comments in NetMask;\n* coding style issues;\n* javadoc;\n* throw IllegalArgumentException from the Valve and Filter if a wrongly formatted NetMask is passed in.\n\nNow, I have a problem which I cannot understand, wrt error handling...\n\nI use the base tar.gz as built by \"ant release\", in output/release/v8.0.0-dev/bin/apache-tomcat-8.0.0-dev.tar.gz. I unarchive in a directory, do startup.sh, it starts.\n\nI then edit the web.xml so as to apply the RemoteCIDRFilter: Tomcat reloads the webapp, the filter applies. Then I edit web.xml so as to apply an ILLEGAL netmask: even though the base NetMask tests work (constructor refuses the input), when reloading the webapp, it seems that nothing is even LOGGED (I do log errors about bad netmasks) and the previous filter stays in place :/\n\nWhat am I doing wrong? I have a list of TODOs but don't even want to mention that list before I understand what the problem is with the filter. Note: I have not debugged yet... I use IDEA, so if someone knows how to debug that I'd be happy."}, {"count": 19, "tags": [], "bug_id": 51953, "attachment_id": null, "is_private": false, "id": 150598, "time": "2011-10-14T23:16:06Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-14T23:16:06Z", "text": "Well, my filter is not the only one affected.\n\nI also added this to web.xml:\n\n----\n  <filter>\n    <filter-name>host</filter-name>\n    <filter-class>org.apache.catalina.filters.RemoteHostFilter</filter-class>\n    <init-param>\n      <param-name>deny</param-name>\n      <param-value>$127.0.0.1</param-value>\n    </init-param>\n  </filter>\n\n  <filter-mapping>\n    <filter-name>host</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n----\n\nOf course, the regex is invalid. BUT THE CONTEXT RELOADS!!"}, {"count": 20, "tags": [], "text": "(In reply to comment #19)\n>       <param-value>$127.0.0.1</param-value>\n> Of course, the regex is invalid. BUT THE CONTEXT RELOADS!!\n\nThe regex is valid. There is nothing syntactically wrong with it. It just does not match anything (because you expect some text after the end of string).\n\n<%= java.util.regex.Pattern.compile(\"$127.0.0.1\") %>\ncompiles successfully without any exceptions.", "is_private": false, "id": 150600, "creator": "knst.kolinko@gmail.com", "time": "2011-10-15T03:02:36Z", "bug_id": 51953, "creation_time": "2011-10-15T03:02:36Z", "attachment_id": null}, {"count": 21, "tags": [], "text": "OK, I don't understand what is happening at all.\n\nThe filter does work, exceptions are thrown, but nothing is logged with the default Tomcat log configuration, and a bad filter doesn't prevent the context from reloading!\n\nIs that expected?", "attachment_id": null, "bug_id": 51953, "id": 150607, "time": "2011-10-15T11:03:31Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-15T11:03:31Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 51953, "attachment_id": null, "id": 150631, "time": "2011-10-16T08:19:47Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-16T08:19:47Z", "is_private": false, "text": "Well, I can now confirm that both the filter and valve work, however the messages I log are NOT shown at all. As to exceptions, when running the valve, they are not raised AT ALL. Error messages are shown, ie:\n\n----\nSEVERE: 1127.0.0.1: invalid address specification\n----\n\nbut only for the Valve :(\n\nIs that the expected behavior? If so, then my patch is basically ready..."}, {"count": 23, "tags": [], "bug_id": 51953, "attachment_id": null, "id": 150789, "time": "2011-10-20T09:31:34Z", "creator": "fgaliegue@gmail.com", "creation_time": "2011-10-20T09:31:34Z", "is_private": false, "text": "Comments?"}]
[{"count": 0, "tags": [], "bug_id": 21252, "attachment_id": null, "text": "When running Tomcat 4.1.24 on Windows NT/2000/XP, JSP compilation will fail for \nwebapps that contains a large number of jars in \"WEB-INF/lib\".\n\nThe reason this happens is because the ANT javac task is being used with the \nfork option set to \"true\".  Windows NT/2000/XP places a 2048 character limit on \nthe size of a command line.  With Tomcat installed in the default location \n(\"C:\\Program Files\\Apache Group\\Tomcat 4.1\") the sum of the length of the full \npath of all the libraries can quickly reach the 2048 character limit.\n\nI'm not sure what the fix for this problem is, but a quick improvement would be \nto revert to the \"no fork\" option if the command line gets too long on \nWindows.  At the very least, Jasper could print a more helpful error.  As it \nstands, it fails with the very unintuitive error: \"javac: invalid flag: \nC:\\Program\".\n\nI spent literally 2 days trying to figure out why the combination of Batik, \nTorque, and Struts would cause JSP compilation to fail (which I thought was an \nodd side-effect).  All along I thought it was becuase each project requires you \nto use a mutually exclusive set of commons jars (which is another problem) and \nthat was somehow causing weird classloader issues.  I tried virtually every \npermutation of \"what if I remove this jar\" to see if the problem went away.  It \nseemed totally random -- Luckily, I got to a certain point where I could remove \nany jar and fix the problem.  That's when it finally dawned on me what the \nproblem is.\n\n\nBelow is a snippet of the error output:\n------------------------------------------------------\norg.apache.jasper.JasperException: Unable to compile class for JSP\n\nAn error occurred at line: -1 in the jsp file: null\n\nGenerated servlet error:\n    [javac] Since fork is true, ignoring compiler setting.\n    [javac] Compiling 1 source file\n    [javac] Since fork is true, ignoring compiler setting.\n    [javac] javac: invalid flag: C:\\Program\n    [javac] Usage: javac  \n    [javac] where possible options include:\n    [javac]   -g                        Generate all debugging info\n    [javac]   -g:none                   Generate no debugging info\n    [javac]   -g:{lines,vars,source}    Generate only some debugging info\n    [javac]   -nowarn                   Generate no warnings\n    [javac]   -verbose                  Output messages about what the compiler \nis doing\n    [javac]   -deprecation              Output source locations where \ndeprecated APIs are used\n    [javac]   -classpath          Specify where to find user class files\n    [javac]   -sourcepath         Specify where to find input source files\n    [javac]   -bootclasspath      Override location of bootstrap class files\n    [javac]   -extdirs            Override location of installed extensions\n    [javac]   -d             Specify where to place generated class files\n    [javac]   -encoding       Specify character encoding used by source files\n    [javac]   -source          Provide source compatibility with specified \nrelease\n    [javac]   -target          Generate class files for specific VM version\n    [javac]   -help                     Print a synopsis of standard options\n\n\n\n\n\tat org.apache.jasper.compiler.DefaultErrorHandler.javacError\n(DefaultErrorHandler.java:130)", "id": 39802, "time": "2003-07-01T23:37:17Z", "creator": "tinkler@plumbdesign.com", "creation_time": "2003-07-01T23:37:17Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 21252, "is_private": false, "text": "This has been fixed already.", "id": 39823, "time": "2003-07-02T06:56:23Z", "creator": "remm@apache.org", "creation_time": "2003-07-02T06:56:23Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 50860, "attachment_id": null, "text": "The code is (in PooledConnection.java#validate(int validateAction,String sql) )\n        Statement stmt = null;\n        try {\n            stmt = connection.createStatement();\n            stmt.execute(query);\n            stmt.close();\n            this.lastValidated = now;\n            return true;\n        } catch (Exception ignore) {\n            if (log.isDebugEnabled())\n                log.debug(\"Unable to validate object:\",ignore);\n            if (stmt!=null)\n                try { stmt.close();} catch (Exception ignore2){/*NOOP*/}\n        }\n        return false;\n\nSo in the case of null or invalid query (connection is always invalidated : seems normal :-) ).\nBut without any usefull message (except if you use debug : but seems complicated in a production env).\nSo IMHO adding a log.warning in case of null query could be usefull.", "id": 144698, "time": "2011-03-03T06:51:14Z", "creator": "olamy@apache.org", "creation_time": "2011-03-03T06:51:14Z", "is_private": false}, {"count": 1, "text": "Although it seems similar to Bug 50660, the case of a `null` query is really a misconfiguration error.\n\nI think it should be treated differently from \"invalid\" SQL case and in case of `null` query throw RuntimeException that tells the user about misconfiguration.\n\nI also think that obvious configuration validation (validationQuery is null or empty, when validation is enabled ) has to happen when the connection is initialized (or better yet in ConnectionPool.init), because in my test it would not happen before the validationInterval would have expired, and a one-off message in the middle of log stream does not call to much attention.", "creator": "alex-pub.apache-ant@reflexion.net", "attachment_id": null, "id": 150767, "time": "2011-10-19T16:57:10Z", "bug_id": 50860, "creation_time": "2011-10-19T16:57:10Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 50860, "is_private": false, "text": "\n> I also think that obvious configuration validation (validationQuery is null or\n> empty, when validation is enabled ) has to happen when the connection is\n\nthat would be a separate issue, feel free to open bugzilla issue\n\n\nThis has been fixed in by adding a configuration option called logValidationErrors=\"true|false\" in r1303031", "id": 155135, "time": "2012-03-20T17:33:53Z", "creator": "fhanik@apache.org", "creation_time": "2012-03-20T17:33:53Z", "attachment_id": null}]
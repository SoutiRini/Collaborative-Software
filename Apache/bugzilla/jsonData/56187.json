[{"count": 0, "tags": [], "bug_id": 56187, "text": "Hi,\n\nI tried to increase the text message buffer from default value of 8192 by adding context parameter in web.xml of my application as follows,\n\n<context-param>\n       <param-name>org.apache.tomcat.websocket.textBufferSize</param-name>\n       <param-value>32768</param-value>\n</context-param>\n\t\n<context-param>\n       <param-name>org.apache.tomcat.websocket.binaryBufferSize</param-name>\n       <param-value>32768</param-value>\n</context-param>\n\nbut even after that it does not change and payload of size greater than 8192 bytes is cut and sent in separate frame. \n\nI am using Atmosphere library 1.0.18 for server event push but because of the tomcat max. buffer size, it is not able to send large payload, causing to go away from websocket and use long polling.\n\n\nThanks,\nShailesh", "id": 173467, "time": "2014-02-25T13:17:26Z", "creator": "05.shailesh@gmail.com", "creation_time": "2014-02-25T13:17:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 56187, "text": "The issue is reproduceable  on Linux also.", "id": 173468, "time": "2014-02-25T13:19:11Z", "creator": "05.shailesh@gmail.com", "creation_time": "2014-02-25T13:19:11Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "There are 2 different web socket protocol implementations available in Tomcat 7:\n1) JSR-356 (a new one)\n2) legacy\n\nThe settings that you changed are used by the JSR-356 implementation only.\n\nI do not really know what websocket implementation Atmosphere 1.0.18 is using. It is up to you to find out. \n\nAs Bugzilla is not a support forum,\nask on the users mailing list for a help to debug your issue.\nhttp://tomcat.apache.org/bugreport.html#Bugzilla_is_not_a_support_forum", "id": 173469, "time": "2014-02-25T13:46:10Z", "bug_id": 56187, "creation_time": "2014-02-25T13:46:10Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 56187, "is_private": false, "id": 173484, "time": "2014-02-26T07:17:10Z", "creator": "05.shailesh@gmail.com", "creation_time": "2014-02-26T07:17:10Z", "tags": [], "text": "Atmosphere 1.0.18 uses legacy protocol. \n\nI tried to debug the issue reached to org.apache.catalina.websocket.WsOutbound. \n\npublic static final int DEFAULT_BUFFER_SIZE = 8192;\n\npublic WsOutbound(UpgradeOutbound upgradeOutbound,\n            StreamInbound streamInbound) {\n        this(upgradeOutbound, streamInbound, DEFAULT_BUFFER_SIZE,\n                DEFAULT_BUFFER_SIZE);\n    }\n\nThe CharBuffer created with the capacity of DEFAULT_BUFFER_SIZE which is 8192. \n\nThere is no way to change the buffer size. \n\nI think max. buffer size should be configurable so that it can be set as per the requirement."}, {"count": 4, "tags": [], "bug_id": 56187, "attachment_id": null, "id": 173511, "time": "2014-02-27T11:46:44Z", "creator": "markt@apache.org", "creation_time": "2014-02-27T11:46:44Z", "is_private": false, "text": "Applications using the old API (in this case Atmosphere) have an API available to change the buffer size if they wish.\n\nApplications have an API they can use to output binary messages that bypasses the buffer entirely.\n\nThe buffers are always used when writing text messages and may be used when writing binary messages.\n\nTomcat imposes no limits on the size of a message that is written. The buffer merely controls the frame size when writing large text messages.\n\nAs per the WebSocket specification, frames have no semantic meaning (ignoring extensions which complicate things slightly). Proxies may split frames or merge frames as they see fit. Therefore, I see no reason for Atmosphere to object to large text messages being split into multiple frames."}]
[{"count": 0, "text": "Using the following code:\n\npublic class JSR356AsyncSupport extends Servlet30CometSupport {\n    public JSR356AsyncSupport(AtmosphereConfig config) {\n        super(config);\n        Object serverContainer = config.getServletContext().getAttribute(\"javax.websocket.server.ServerContainer\");\n        if (serverContainer != null) {\n            try {\n                ServerContainer.class.cast(serverContainer).addEndpoint(JSR356ServerEndpointConfig.class);\n            } catch (DeploymentException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nThe attribute is always null when calling ServletContext during the Servlet.init() operation. From the javadoc:\n===\nThe ServerContainer is the specialized view of the WebSocketContainer available in server-side deployments. There is one ServerContainer instance per websocket application. The ServerContainer holds the methods to be able to register server endpoints during the initialization phase of the application.\nFor websocket enabled web containers, developers may obtain a reference to the ServerContainer instance by retrieving it as an attribute named javax.websocket.server.ServerContainer on the ServletContext. This way, the registration methods held on this interface may be called to register server endpoints from a ServletContextListener during the deployment of the WAR file containing the endpoint.\n===", "creator": "jfarcand@apache.org", "is_private": false, "id": 166412, "time": "2013-04-05T13:35:16Z", "bug_id": 54805, "creation_time": "2013-04-05T13:35:16Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 54805, "text": "This has been fixed in trunk.", "id": 166732, "time": "2013-04-19T20:28:41Z", "creator": "markt@apache.org", "creation_time": "2013-04-19T20:28:41Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "the current implementation provides a {resource-type:httpSchemaUri} that is\nsupposed to return a URL suitable for a browser to retrieve a schema.\nit only takes context into account, not proxy.\nthe quick fix is to use an OutgoingLinkRewriter.\n\nbut it might be more future-proof to do away with the differentiation between\nschemaUri and httpSchemaUri anyways and to define a standard location\nmodules/<resourceType>/schema.rng that all resource type modules have to provide.\nthat way, we can also get rid of the clunky custom fallback resolver in the module.", "attachment_id": null, "id": 110325, "creation_time": "2007-11-08T07:08:01Z", "time": "2007-11-08T07:08:01Z", "creator": "nettings@apache.org", "bug_id": 43813, "is_private": false}, {"count": 1, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "text": "a quick grep indicates that bxe is the only user of\n{resource-type:httpSchemaUri}, and that {resource-type:schemaUri} is not used at\nall.\nshould we just deprecate both and require all doctypes to provide a\n\"/modules/<resourceType>/schema.rng\" in their sitemaps?\n", "id": 110331, "time": "2007-11-08T08:47:50Z", "bug_id": 43813, "creation_time": "2007-11-08T08:47:50Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43813, "text": "The problem is that a module can contain more than one resource type. For\ninstance the forrest module will contain resource types for \"normal\", FAQ,\nchanges, ... documents.", "id": 110333, "time": "2007-11-08T08:57:31Z", "creator": "andreas@apache.org", "creation_time": "2007-11-08T08:57:31Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 43813, "attachment_id": null, "id": 110339, "time": "2007-11-08T12:09:05Z", "creator": "nettings@apache.org", "creation_time": "2007-11-08T12:09:05Z", "is_private": false, "text": "(In reply to comment #2)\n> The problem is that a module can contain more than one resource type. For\n> instance the forrest module will contain resource types for \"normal\", FAQ,\n> changes, ... documents.\n\nbut is that worth it? wouldn't it simplify things a lot if we mandate one\ndoctype == one module? afaik multiple doctypes per module are not widely used,\nand splitting them would be trivial.\nthen we could get rid of some code and replace another layer of configuration\nwith convention. the fallback resolver hack is really frightful, and totally\nunnecessary imho given that we could just as well handle the stuff in sitemaps,\nwhere all the glorious resolvers are available without limitations and hacks.\nwdot?\n\nthat said, i'd also like to re-discuss the formats post 2.0. do we really need\nformats as a configurable with a corresponding input module, or could we just\nuse matchers in the resource type module sitemaps and define these as an API?\nreduces overhead, gets rid of indirection, makes stuff more self-explanatory.\n"}, {"count": 4, "tags": [], "bug_id": 43813, "attachment_id": null, "id": 110497, "time": "2007-11-13T12:25:20Z", "creator": "nettings@apache.org", "creation_time": "2007-11-13T12:25:20Z", "is_private": false, "text": "for now, i have removed the context from the module. this implies you need to\nwrap it in a {proxy:} call. not very logical (httpSchemaUri sounds like it\ndelivers a complete http://.... uri), but works for now. i'm still thinking this\nshould go altogether.\n\nandreas, if you think multiple doctypes per module are important, let's implement\n/modules/<moduleName>/schemas/<resourceTypeName>.rng in every doctype module\nsitemap and get rid of the configuration and input module. wdyt?\n(i'm not fundamentally opposed to an input module in itself, i just think\nsecond-guessing the meaning of fallback:// is not a concern of such a module -\nif it can be avoided, i could live with it. although it's configuration instead\nof convention.)\n"}, {"count": 5, "tags": [], "bug_id": 43813, "text": "(In reply to comment #4)\n\n> andreas, if you think multiple doctypes per module are important, let's implement\n> /modules/<moduleName>/schemas/<resourceTypeName>.rng in every doctype module\n> sitemap and get rid of the configuration and input module. wdyt?\n\nThat would be very convenient, but the problem is that we don't know which\nmodule the resource type is provided by ... Maybe we could introduce a\nconvention for resource type names:\n\n  {module} if only one resource type is provided by the module\n  {module}.{resourceType} if multiple resource types are provided\n\nThe module name could be extracted by the resource type module:\n\n  {resource-type:module:{doc-info:....:resourceType}}\n\nBut then it's only a small step to the situation which we have now.", "id": 110716, "time": "2007-11-19T05:13:17Z", "creator": "andreas@apache.org", "creation_time": "2007-11-19T05:13:17Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 43813, "attachment_id": null, "id": 110718, "time": "2007-11-19T05:16:43Z", "creator": "andreas@apache.org", "creation_time": "2007-11-19T05:16:43Z", "is_private": false, "text": "But we could go one step further and require the following syntax for resource\ntype names:\n\n  {module}.{resourceTypeName}\n\nThis could be matched in the sitemap:\n\n  .../*.*/...\n\n<map:generate src=\"{proxy:/modules/{1}/schemas/{2}.rng}\"/>\n\nUnfortunately, all document meta data would have to be updated when the names of\nthe existing resource types change."}, {"count": 7, "tags": [], "text": "OTOH, this means that we would address the module using its short name, which\nultimately renders the module package useless.", "attachment_id": null, "id": 110719, "creation_time": "2007-11-19T05:18:19Z", "time": "2007-11-19T05:18:19Z", "creator": "andreas@apache.org", "bug_id": 43813, "is_private": false}, {"count": 8, "tags": [], "creator": "andreas@apache.org", "attachment_id": null, "text": "If we support both {resourceType} and {module}.{resourceType} we would have to\nprovide two pipelines:\n\n<map:match pattern=\".../*.*/...\">\n  <map:generate src=\"{proxy:/modules/{1}/schemas/{2}.rng}\"/>\n\n<map:match pattern=\".../*/...\">\n  <map:generate src=\"{proxy:/modules/{1}/schemas/{1}.rng}\"/>\n\nIMO this is acceptable.", "id": 110720, "time": "2007-11-19T05:23:13Z", "bug_id": 43813, "creation_time": "2007-11-19T05:23:13Z", "is_private": false}]
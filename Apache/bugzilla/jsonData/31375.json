[{"count": 0, "tags": [], "bug_id": 31375, "text": "The following will not work without the '^' character although it should work \neither way (with or without):\n\n<propertyset id=\"specific.filters\">\n  <propertyref regex=\"filter\\.${filterset}\\..*\"/>\n    <mapper type=\"regexp\"\n\tfrom=\"^filter\\.${filterset}\\.(.*)\" \n\tto=\"filter.\\1\"/>\n</propertyset>", "id": 64079, "time": "2004-09-23T00:38:48Z", "creator": "joel.regen@activant.com", "creation_time": "2004-09-23T00:38:48Z", "is_private": false, "attachment_id": null}, {"text": "Can you add a small build.xml that shows the problem?", "tags": [], "bug_id": 31375, "is_private": false, "count": 1, "id": 64089, "time": "2004-09-23T08:18:04Z", "creator": "peterreilly@apache.org", "creation_time": "2004-09-23T08:18:04Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "joel.regen@activant.com", "text": "Ok. this is a bit embarrassing...what I discovered is that, after much trial \nand error, the use of a mapper element within a propertyset is quite adversely \naffected by the lack of a preceding <propertyref> element of appropriate \nconstraint. So, when I finally stopped 'trying things' to make the propertyset \nwork (within an echoproperties element later), my conclusion was clouded by \nhaving 'tried' the inclusion of a ^ in the mapper's regex expression combined \n(most likely overlooked) with the inclusion of the preceding propertyref \nelement.\n\nHere's the shorter, simpler test case:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project default=\"dist\" name=\"test\" basedir=\".\">\n    <property name=\"filter.local.foo\"   value=\"1234\"/> \n    <property name=\"filter.dev.foo\"     value=\"4321\"/> \n    <property name=\"filter.generic.foo\" value=\"bar\"/>  \n    <property name=\"filterset\"          value=\"local\"/>         \n    \n    <target name=\"dist\">                               \n        <propertyset id=\"specific.filters\">            \n            <propertyref regex=\"filter\\.${filterset}\\..*\"/>\n            <mapper type=\"regexp\"                      \n                from=\"filter\\.${filterset}\\.(.*)\" \n                to=\"filter.\\1\"/>                   \n        </propertyset> \n        <echoproperties>\n    \t    <propertyset refid=\"specific.filters\"/>\n\t    </echoproperties>\n    </target>                                          \n</project> \n\nThis produces:\n[echoproperties] filter.foo=1234\n\nAnd, removing the <propertyref ...> from the propertyset (preceding the mapper \nsub-element) produces no output:\n\nLong story - short: I made a faulty assessment about the mapper functionality \nbased on working too many hours and being too tired to sort out my \nexperimental data.  The conclusion is that THIS IS NOT A BUG. \n\nThat said, I would recommend that, in the documentation on propertyset in the \nsection on using a mapper element, it be explicitly stated what the \nrelationship and interaction is between the mapper element and the preceding \npropertyref element.  Most importantly, that a mapper element won't work \nwithout that propertyref element.  This is not clear.\n", "id": 64111, "time": "2004-09-23T15:39:48Z", "bug_id": 31375, "creation_time": "2004-09-23T15:39:48Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 31375, "text": "I guess I'm a little confused too ;-) (disclaimer: I prototyped propertyset).\n\nWhy do you say the mapper won't work without the propertyref? A <propertyset> \nselects properties by name/prefix/regexp. When the propertyset is some context, \nfor example your <echoproperties>, the selected properties are optionally \nrenamed (in the used context) by the mapper element, if present.\n\nIn your case, if you remove your propertyref, the propertyset become empty and \nthus select no properties at all. The mapper has thus nothing to rename.\n\nIf you can think of a way to better express this in the doc, it'd be great if \nyou could provide a patch. Thanks, --DD", "id": 64120, "time": "2004-09-23T18:11:14Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-09-23T18:11:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "joel.regen@activant.com", "is_private": false, "text": "Ok. In hindsight, it becomes obvious that a mapper element can only work on \nproperties that are already in the propertyset.  However, upon first glance, \nit appeared to me that a mapper using regexp could perform both the selection \nand the mapping function since it has a 'from' attribute.\nSee?", "id": 64121, "time": "2004-09-23T18:37:33Z", "bug_id": 31375, "creation_time": "2004-09-23T18:37:33Z", "attachment_id": null}]
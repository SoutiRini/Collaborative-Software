[{"count": 0, "tags": [], "bug_id": 38524, "attachment_id": null, "id": 85449, "time": "2006-02-06T02:12:04Z", "creator": "mk-asf@gigacodes.de", "creation_time": "2006-02-06T02:12:04Z", "is_private": false, "text": "The headers of a proxied page do not contain a keep-alive or connection headers,\nbut the server acts according to its local keepalive timeout and max count, but\nthe client-browser needs to guess, wether the server supports keep-alive. \n\nSetup:\n./configure --enable-proxy --enable-proxy-http\n\nConfig:\nProxyPass /proxy/ http://httpd.apache.org/\n\nTestcase:\n#telnet localhost 80\nGET /proxy/robots.txt HTTP/1.1\nHost: httpd.apache.org\nConnection: keep-alive\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1;)\n\n\nThe response neither contains a Connection: nor a Keep-alive: header. However\nthe connection remains open for 5 seconds and is then \"closed by the foreign\nhost\". A \"GET / HTTP/1.1\" returns:\n\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\n\ntalking directly to the remote server also returns these values, they only get\nlost passing the proxy. (this also happens when configured as forward proxy)\n\nBTW: a \"connection: close\" request header makes its way through to the backend\nserver, which causes the connection between front and backend server to be\ndropped. When used to accelerate a backend server this prevents the connection\nfrom being reused for another client or the next request."}, {"count": 1, "attachment_id": 17619, "creator": "rpluem@apache.org", "is_private": false, "id": 85565, "time": "2006-02-07T21:30:12Z", "bug_id": 38524, "creation_time": "2006-02-07T21:30:12Z", "tags": [], "text": "Created attachment 17619\nPatch against trunk\n\nI had a look in this issue and have an idea why this happens. I still need some\ndiscussion for this patch on the dev list, but I would like to know if it fixes\nyour problem. So could you please try the attached patch and check if it solves\nthe problem?"}, {"count": 2, "tags": [], "text": "thanks for the quick patch, it works for me. However you also need to get rid of\nline 616 which already clears the connection header from the headers_in.", "is_private": false, "id": 85571, "creator": "mk-asf@gigacodes.de", "time": "2006-02-08T01:33:16Z", "bug_id": 38524, "creation_time": "2006-02-08T01:33:16Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 85608, "time": "2006-02-08T21:11:12Z", "bug_id": 38524, "creation_time": "2006-02-08T21:11:12Z", "is_private": false, "text": "(In reply to comment #2)\n> thanks for the quick patch, it works for me. However you also need to get rid of\n> line 616 which already clears the connection header from the headers_in.\n\nThanks for the quick test. I think you mean line 620, don't you?\nAlas! Stupid copy and paste error. Thanks for pointing it out.\nI will discuss the patch on the dev list and keep you in the loop.\n\n"}, {"count": 4, "tags": [], "bug_id": 38524, "attachment_id": null, "id": 85609, "time": "2006-02-08T21:12:40Z", "creator": "rpluem@apache.org", "creation_time": "2006-02-08T21:12:40Z", "is_private": false, "text": "Next stupid thing of mine: Of course its 616 in the patched version, but 620 in\nthe unpatched one :-)."}, {"count": 5, "tags": [], "text": "I really should RTFM of patch and diff, so line numbers and order of fileargs \nwouldn't be a problem ...\n\n2 things I'm wondering as code novice about: does the copied table get freed and\nwouldn't it be better to just save the removed headers ? (P.S: patch isnt't in\nproductive environment yet, so we don't know of possible side-effects)", "is_private": false, "id": 85616, "creation_time": "2006-02-09T00:18:05Z", "time": "2006-02-09T00:18:05Z", "creator": "mk-asf@gigacodes.de", "bug_id": 38524, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "rpluem@apache.org", "is_private": false, "id": 85632, "time": "2006-02-09T14:26:03Z", "bug_id": 38524, "creation_time": "2006-02-09T14:26:03Z", "tags": [], "text": "(In reply to comment #5)\n> I really should RTFM of patch and diff, so line numbers and order of fileargs \n> wouldn't be a problem ...\n\nI should have looked at the patched version :-).\n\n> \n> 2 things I'm wondering as code novice about: does the copied table get freed and\n\nYes, because the space is allocated from a memory pool and this pool is cleaned\nafter the end of the request.\n\n> wouldn't it be better to just save the removed headers ? (P.S: patch isnt't in\n> productive environment yet, so we don't know of possible side-effects)\n\nIn principle yes, especially if the other headers are large. I have to take a\nlook into it whether the extra effort of doing so is justified, because several\nheaders are removed by ap_proxy_clear_connection and it adds some work to save\nthem and merge them back in. The full copy approach has a simpler logic and if\npossible I like to keep things simple :-)"}, {"count": 7, "tags": [], "bug_id": 38524, "attachment_id": null, "text": "(In reply to comment #6)\n\n> \n> > wouldn't it be better to just save the removed headers ? (P.S: patch isnt't in\n> > productive environment yet, so we don't know of possible side-effects)\n\nMeanwhile I had a closer look into this and as apr_table_copy only copies the\npointers to the key / value pairs of the headers I guess we neither gain much\nspeed (actually I think we will loose speed for a small number of headers) nor\nsave a reasonable amount of memory (also guess that we waste memory for a low\nnumber of headers) by only saving the removed headers and merg\u00edng them back in\nlater on.\nI keep you updated.\n\n", "id": 85650, "time": "2006-02-09T23:42:29Z", "creator": "rpluem@apache.org", "creation_time": "2006-02-09T23:42:29Z", "is_private": false}, {"count": 8, "tags": [], "text": "I committed two patches to the trunk (r377053 and r377057,\nhttp://svn.apache.org/viewcvs.cgi?rev=377053&view=rev,\nhttp://svn.apache.org/viewcvs.cgi?rev=377057&view=rev). r377053 fixes the\nproblem with the missing keepalive headers in the response, wheras r377055\nprevents the closing of the backend connection if the client send Connection: close.", "is_private": false, "id": 85717, "creation_time": "2006-02-11T22:20:13Z", "time": "2006-02-11T22:20:13Z", "creator": "rpluem@apache.org", "bug_id": 38524, "attachment_id": null}, {"count": 9, "tags": [], "text": "http://svn.apache.org/viewcvs.cgi?rev=377053&view=rev introduced a pool memory\nproblem since I used the wrong pool for apr_table_copy.\nhttp://svn.apache.org/viewcvs.cgi?rev=377525&view=rev should fix this, but I am\nwaiting for confirmation by other developers. I keep you updated.\n\n", "is_private": false, "id": 85747, "creator": "rpluem@apache.org", "time": "2006-02-14T00:06:34Z", "bug_id": 38524, "creation_time": "2006-02-14T00:06:34Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "It has been confirmed that http://svn.apache.org/viewcvs.cgi?rev=377525&view=rev\nfixes the pool memory problem. So could you please test with both patches\napplied and let me know the results? Many thanks.", "is_private": false, "id": 85922, "creator": "rpluem@apache.org", "time": "2006-02-19T01:04:18Z", "bug_id": 38524, "creation_time": "2006-02-19T01:04:18Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 38524, "attachment_id": null, "id": 86176, "time": "2006-02-24T00:21:06Z", "creator": "mk-asf@gigacodes.de", "creation_time": "2006-02-24T00:21:06Z", "is_private": false, "text": "we are running the patches productive, keepalive headers are correctly exchanged\nbetween browser and frontend apache (mod_proxy). Backend Connections remain open\nas far as the backends keep alive settings permits it. No memory problems\nnoticed. Good work. Thanks."}, {"count": 12, "tags": [], "bug_id": 38524, "attachment_id": null, "is_private": false, "id": 89379, "time": "2006-05-23T09:40:56Z", "creator": "philip.brusten@cc.kuleuven.be", "creation_time": "2006-05-23T09:40:56Z", "text": "We were experiencing the same problem for our reverse proxy (v2.0) and therefore\nupdated to version 2.2.2 that included this patch.\nFor testing and debugging purposes we used HTTP connections to our backend (a\nwebdispatcher).\nClient <--https--> Apache2.2.2 as Reverse Proxy <--http--> Dispatcher <--http-->\nApp Server\n\nFor production we need a HTTPS connection to this webdispatcher.\nClient <--https--> Apache2.2.2 as Reverse Proxy <--httpS--> Dispatcher\n<--http--> App Server\n\nWhen using this setup (mod_proxy + mod_ssl), we're experiencing a lot more\nconnections in contrast to the setup without mod_ssl.\nSince I cannot sniff on these HTTPS connections, I cannot provide you with any logs.\n\nHas anyone experienced the same problem? Any suggestions? "}, {"count": 13, "tags": [], "text": "From mod_proxy_http.c Apache 2.2.2\n\n  /*\n     * TODO: Currently we cannot handle persistent SSL backend connections,\n     * because we recreate backend->connection for each request and thus\n     * try to initialize an already existing SSL connection. This does\n     * not work.\n     */\n    if (is_ssl)\n        backend->close_on_recycle = 1;\n\n(In reply to comment #12)\n> We were experiencing the same problem for our reverse proxy (v2.0) and therefore\n> updated to version 2.2.2 that included this patch.\n> For testing and debugging purposes we used HTTP connections to our backend (a\n> webdispatcher).\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--http--> Dispatcher <--http-->\n> App Server\n> \n> For production we need a HTTPS connection to this webdispatcher.\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--httpS--> Dispatcher\n> <--http--> App Server\n> \n> When using this setup (mod_proxy + mod_ssl), we're experiencing a lot more\n> connections in contrast to the setup without mod_ssl.\n> Since I cannot sniff on these HTTPS connections, I cannot provide you with any\nlogs.\n> \n> Has anyone experienced the same problem? Any suggestions? \n\n(In reply to comment #12)\n> We were experiencing the same problem for our reverse proxy (v2.0) and therefore\n> updated to version 2.2.2 that included this patch.\n> For testing and debugging purposes we used HTTP connections to our backend (a\n> webdispatcher).\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--http--> Dispatcher <--http-->\n> App Server\n> \n> For production we need a HTTPS connection to this webdispatcher.\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--httpS--> Dispatcher\n> <--http--> App Server\n> \n> When using this setup (mod_proxy + mod_ssl), we're experiencing a lot more\n> connections in contrast to the setup without mod_ssl.\n> Since I cannot sniff on these HTTPS connections, I cannot provide you with any\nlogs.\n> \n> Has anyone experienced the same problem? Any suggestions? \n\n(In reply to comment #12)\n> We were experiencing the same problem for our reverse proxy (v2.0) and therefore\n> updated to version 2.2.2 that included this patch.\n> For testing and debugging purposes we used HTTP connections to our backend (a\n> webdispatcher).\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--http--> Dispatcher <--http-->\n> App Server\n> \n> For production we need a HTTPS connection to this webdispatcher.\n> Client <--https--> Apache2.2.2 as Reverse Proxy <--httpS--> Dispatcher\n> <--http--> App Server\n> \n> When using this setup (mod_proxy + mod_ssl), we're experiencing a lot more\n> connections in contrast to the setup without mod_ssl.\n> Since I cannot sniff on these HTTPS connections, I cannot provide you with any\nlogs.\n> \n> Has anyone experienced the same problem? Any suggestions? \n\n", "attachment_id": null, "id": 89380, "creator": "james@arpstorm.net", "time": "2006-05-23T09:46:20Z", "bug_id": 38524, "creation_time": "2006-05-23T09:46:20Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Hi,\n\nI use Oracle XML-SQL Utility to generate DOM documents from a database. The \nutility uses the Oracle XML parser. I want the database results to be combined \nwith other valid data into one XML document. Therefore I use importNode method \nof DocumentImpl.\n\n        // resultDoc contains XML from database\n        NodeList nl = resultDoc.getElementsByTagName(\"ROW\");\n        int i = 0;\n        while (i < nl.getLength()) {\n            Element eltemp = (Element)nl.item(i);\n\n            // ResponseXML is document to include results in\n            Node newOneToMove = responseXML.importNode(eltemp, true;\n            data.appendChild(newOneToMove);\n            i++;\n        }\n\nThe statements above work fine, except for attributes within the resultDoc. \nAfter importing the attribute values have disappeared. See example underneath:\n\nBefore importnode (within resultDoc = OK)\n<ROW num=\"1\">\n  <test>test value</test>\n</ROW>\n\nAfter importNode (within responseXML = not OK)\n<ROW num=\" \">\n  <test>test value</test>\n</ROW>\n\nThe value of the num attribute disappeared. I took a look at the sources of \nXerces and found the following section which caused the error. The reason was \nthe Oracle XML Parser uses class XMLAttr for implementing the attributes in a \nDOM. Xerces uses AttrImpl...\n\nI temporarily made a change to solve the problem in this case, but probably a \nmuch better solution is possible. It's in the DocumentImpl.java within \nmethod \"private Node importNode(Node source, boolean deep, Hashtable \nreversedIdentifiers)\"\n\n                // if source is an AttrImpl from this very same implementation\n                // avoid creating the child nodes if possible\n\n                if (source instanceof AttrImpl) {\n\n                    AttrImpl attr = (AttrImpl) source;\n\n                    if (attr.hasStringValue()) {\n\n                        AttrImpl newattr = (AttrImpl) newnode;\n                        newattr.setValue(attr.getValue());\n                        deep = false;\n                    }\n                    else {\n\n                        deep = true;\n                    }\n                // Added to resolve problem in this case\n                } else if (source instanceof oracle.xml.parser.v2.XMLAttr) {\n\n                    System.out.println(\"Oracle_node!\");\n\n                    newnode.setNodeValue(source.getNodeValue());\n                    deep = false;\n                } else {\n                    // Kids carry value\n                    deep = true;\n                }\n\t\tbreak;\n\nHope one of you can take a look at this. Please contact me if you'd like to \nhave additional information!\n\nBest regards,\nIwan", "is_private": false, "bug_id": 1915, "id": 2667, "time": "2001-05-27T03:52:26Z", "creator": "ifaber@newsync.nl", "creation_time": "2001-05-27T03:52:26Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "I have had similar problems with cloneNode.\n\nBelow are my findings:\n\nI tried to use   \n  oldNode  = parse xml file\n  newNode= oldNode.cloneNode(true);\n  String attrVal= oldNode.getAttribute( ATTR_NAME);\n\n  attrVal in this case is \"\"\n\nif on the other hand the sequence is\n\n  oldNode  = parse xml file\n  String attrVal= oldNode.getAttribute( ATTR_NAME);\n  newNode= oldNode.cloneNode(true);\n  String attrValAfterClone = oldNode.getAttribute( ATTR_NAME);\n\n  both attrVal and attrValAfterCloen will have the correct value. So that's a \ntemporary workaround...\n\nSeems like the internal state of the Document (?) stabilizes after accessing an \nattribute ( you dont have access the relevant attribute to stabilize all the \nattributes).\nInteresting to note if you set an attribute explicitely:\n  oldNode.setAttribute(\"xmlns\", NAME_SPACE);\nthat attribute will not lose its value if the document (or parts thereof) are \nlost during clone (regardless of whether getAttribute was called before)\n\n\nHope this will be of help,\n\nIlan Zohar", "is_private": false, "id": 2750, "creator": "ilan_zohar@hp.com", "time": "2001-06-05T11:59:54Z", "bug_id": 1915, "creation_time": "2001-06-05T11:59:54Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 1915, "is_private": false, "count": 2, "id": 2815, "time": "2001-06-08T12:11:44Z", "creator": "lehors@apache.org", "creation_time": "2001-06-08T12:11:44Z", "text": "All right. First, I don't believe the two problems are related. Ilan, does your \nproblem involves Oracles XML parser at all? I bet not. I bet the problem you're \nfacing is an internal Xerces bug related to the Deferred DOM. It's been \nreported several times andI've been chasing it for a while and believe it is \nfixed in the latest version. However, I think I saw somebody reporting it was \nstill there. I must admit I don't know at this point.\nNow, regarding the problem Iwan reports. I believe the bug comes from the fact \nthat the Oracle DOM is not compliant. According to the DOM spec, an attribute \ncarries its value via its children list. In the simplest case, you should find \na Text node as the first and only child of the attribute node. Xerces, trying \nto conserve as much information as possible while importing an attribute, \nimports the attribute value by importing its child nodes as opposed to simply \ncopying over its text value. Unfortunately, if the source DOM is not compliant \nand doesn't expose the attribute value properly via its child nodes Xerces \nfails to find any value. I believe that's what you're seeing. You should be \nable to confirm that by simply testing the value of attr.getFirstChild(). I bet \nit's null!\nThe solution to this problem is to make Xerces import mechanism more robust and \ncopy the text value directly in case the attribute has no child nodes.\nThat's easy to do, I'll do it right away. Stay tuned.\n"}, {"count": 3, "attachment_id": null, "creator": "lehors@apache.org", "text": "Iwan,\nI just checked in the code. It's basically the same as what you suggested \nexcept that instead of testing for the Oracle's (broken ;-) class I simply \ncheck whether getFirstChild() returns null or not. That way it will work with \nother broken DOM implementations just the same...\nIlan,\nif you see the pb you're reporting with the latest version of Xerces, please, \nfile another bug or rather reopen the one we already have on this if it's not \nalready the case (please check first!).\nThanks.\n\n\n\n", "id": 2816, "time": "2001-06-08T12:27:15Z", "bug_id": 1915, "creation_time": "2001-06-08T12:27:15Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 1915, "is_private": false, "text": "Arnaud,\n\nThanks a lot for your input. I checked the changes just now and everything \nworked beautifully in version 1.4.1! \n\nBest regards,\nIwan", "id": 3338, "time": "2001-06-29T01:54:17Z", "creator": "ifaber@newsync.nl", "creation_time": "2001-06-29T01:54:17Z", "attachment_id": null}]
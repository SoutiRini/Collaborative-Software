[{"count": 0, "tags": [], "text": "when iam trying to read time data from xls file using poi excel reader i get the value something like \"31-dec-1899\".This is the problem what iam facing.Expecting reply soon.Thanks in advance.\n\nFrom\n\nRenjith.R", "attachment_id": null, "id": 143847, "creation_time": "2011-02-01T02:53:45Z", "time": "2011-02-01T02:53:45Z", "creator": "trainees@tecgemini.com", "bug_id": 50697, "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "Times and dates are stored the same, which is an offset from either 1900 or 1904. Either use time specific methods, or just fetch the number which is a floating point number of days", "id": 143850, "time": "2011-02-01T04:46:20Z", "bug_id": 50697, "creation_time": "2011-02-01T04:46:20Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 50697, "attachment_id": 26586, "id": 143852, "time": "2011-02-01T05:18:26Z", "creator": "trainees@tecgemini.com", "creation_time": "2011-02-01T05:18:26Z", "is_private": false, "text": "Created attachment 26586\nsample data\n\nThere is field named as Time .The datas of that field we are trying to read"}, {"count": 3, "tags": [], "bug_id": 50697, "attachment_id": 26587, "id": 143853, "time": "2011-02-01T05:20:33Z", "creator": "trainees@tecgemini.com", "creation_time": "2011-02-01T05:20:33Z", "is_private": false, "text": "Created attachment 26587\nExcel file which i am trying to read\n\nplease check the column titled 'time' in the attached file."}, {"count": 4, "attachment_id": null, "bug_id": 50697, "text": "This is the function i am using. When it reads the 'time' field in the attached excel, the data obtained is '31-Dec-1899' instead of actual data. How can we get the actual data?\n\n\npublic void displayFromExcel(String xlsPath, String sheetName) {\n        System.out.println(\"In POIExcelReader :: method ===========displayFromExcel\");\n        InputStream inputStream = null;\n\n        try {\n            inputStream = new FileInputStream(xlsPath);\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File not found in the specified path.\");\n            e.printStackTrace();\n        }\n\n        POIFSFileSystem fileSystem = null;\n\n        try {\n            fileSystem = new POIFSFileSystem(inputStream);\n\n             this.workBook = new HSSFWorkbook(fileSystem);\n             this. sheet = workBook.getSheetAt(0);\n            if (!sheetName.equals(\"\")) {\n                sheet = workBook.getSheet(sheetName);\n            }\n            if(sheet != null){\n           Iterator<Row> rows = sheet.rowIterator();\n//Iterator<HSSFRow> rows     = sheet.rowIterator ();\n            this.excelData = new ArrayList<ArrayList>();\n            this.excelRows = sheet.getPhysicalNumberOfRows();\n                  \n            ///\n\n//            System.out.println(\"the total number of rows are\" + rows);\n\n            int cols = 0; // No of columns\n            int tmp = 0;\n\n            // This trick ensures that we get the data properly even if it doesn't start from first few rows\n            for (int i = 0; i < 10 || i < this.excelRows; i++) {\n                Row erow = sheet.getRow(i);\n            //  System.out.println(\"get cell \"+erow.getCell(0));\n                if (erow != null) {\n                    tmp = sheet.getRow(i).getPhysicalNumberOfCells();\n                    //out.println(\"tmp value\"+tmp);\n                    if (tmp > cols) {\n                        cols = tmp;\n                    }\n\n                }\n            }\n            this.excelCols = cols;\n            this.excelColDataType = new ArrayList();\n            this.excelColDataSize = new ArrayList();\n\n            for (int c = 0; c < cols; c++) {\n                this.excelColDataType.add(\"Varchar\");\n                this.excelColDataSize.add(\"0\");\n            }\n            CommonFunctions commonFunctions = new CommonFunctions();\n            int testrow=0;\n            while (rows.hasNext()) {\n//HSSFRow row = rows.next ();\n                Row row = rows.next();\n                ArrayList rowData = new ArrayList(cols);\n             \n// display row number in the console.\n//                System.out.println(\"Row No.: \" + row.getRowNum());\n\n// once get a row its time to iterate through cells.\n//Iterator<HSSFCell> cells = row.cellIterator ();\n                Iterator<Cell> cells = row.cellIterator();\n                int c = 0;\n              \n                while (cells.hasNext()) {\n//HSSFCell cell = cells.next ();\n                    Cell cell = cells.next();\n\n                  // System.out.println(\"Cell No.: \" + cell.getColumnIndex());//.getCellNum ());\n\n                    if (cell != null && cell.toString() !=\"\")\n                    {\n                       if(cell.getCellType() ==Cell.CELL_TYPE_NUMERIC )//Lilu added on 2010 Dec 9\n                       {\n                        rowData.add(String.valueOf((long)cell.getNumericCellValue()));\n                        }\n                       else\n                       {\n                           rowData.add(cell.toString());\n                        }\n//                   \n                        switch (cell.getCellType()) {\n                            case Cell.CELL_TYPE_NUMERIC: {\n                                break;\n                            }\n\n                            case Cell.CELL_TYPE_STRING: {\n                             \n                                RichTextString richTextString = cell.getRichStringCellValue();\n//                                System.out.println(\"String value: \" + richTextString.getString());\n\n                                break;\n                            }\n\n                            default: {\n\n                                // types other than String and Numeric.\n                                System.out.println(\"Type not supported.\");\n\n                                break;\n                            }\n                        }\n                    } else {\n                        rowData.add(\"\");\n                    }\n                    c++;\n                }\n               // System.out.println(\"rowData \"+rowData);\n                this.excelData.add(rowData);\n              \n            }\n            }\n//            System.out.println(\"Excel Data Size read: \" + this.excelData.size() + \"~~~~\" + this.excelData);\n//            System.out.println(\"Excel Data Type size: \" + this.excelColDataType.size());\n//            System.out.println(\"Excel Data Type read: \" + this.excelColDataType);\n//            System.out.println(\"Excel Data Length read: \" + this.excelColDataSize);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"Error in POIExcelReader :: method ==============displayFromExcel=====>\"+e.getMessage()+e.getCause());\n        }\n    }", "id": 143854, "time": "2011-02-01T05:26:41Z", "creator": "trainees@tecgemini.com", "creation_time": "2011-02-01T05:26:41Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 50697, "text": "Just read the \"time\" cell as a number - it's fractions of a day so 12 hours is stored as 0.5\n\nOr, read it as a date, and just look at the time part", "id": 143855, "time": "2011-02-01T06:37:43Z", "creator": "apache@gagravarr.org", "creation_time": "2011-02-01T06:37:43Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50697, "text": "Additionally Bugzilla is NOT the place to have a discussion about using the API. The user list is the place.", "id": 143860, "time": "2011-02-01T10:29:57Z", "creator": "dfisher@jmlafferty.com", "creation_time": "2011-02-01T10:29:57Z", "is_private": false, "attachment_id": null}]
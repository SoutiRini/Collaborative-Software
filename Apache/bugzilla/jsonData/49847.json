[{"count": 0, "tags": [], "creator": "db.pub.mail@gmail.com", "text": "Created attachment 25962\na potential patch.\n\nHere is the existing code memory/unix/apr_pools.c from apr-1.4.2\nAPR_DECLARE(void *) apr_pcalloc(apr_pool_t *pool, apr_size_t size);\nAPR_DECLARE(void *) apr_pcalloc(apr_pool_t *pool, apr_size_t size)\n{\n    void *mem;\n\n    if ((mem = apr_palloc(pool, size)) != NULL) {\n        memset(mem, 0, size);\n    }\n\n    return mem;\n}\n\n\nI propose the that the method now asserts that this is the case, instead of checking if :)\n\nThis way users of the method will be guaranteed memory or an assertion error will be raised. (at least via the use of this particular method ;) ).", "id": 139569, "time": "2010-08-31T01:39:12Z", "bug_id": 49847, "creation_time": "2010-08-31T01:39:12Z", "is_private": false, "attachment_id": 25962}, {"count": 1, "tags": [], "bug_id": 49847, "attachment_id": null, "text": "%s/the that the/that the/", "id": 139570, "time": "2010-08-31T01:40:01Z", "creator": "db.pub.mail@gmail.com", "creation_time": "2010-08-31T01:40:01Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> %s/the that the/that the/\n\nI reported this here as a result of this issuing being closed as it is mostly an apache issue(it is used elsewhere):\nhttp://code.google.com/p/modwsgi/issues/detail?id=208\n\nThe idea is to prevent returning void *mem which could be NULL and not what the caller of this method expects. \n\nPlease do correct me if I am pointing out something that doesn't exist or is wrong :)", "attachment_id": null, "id": 139577, "creator": "db.pub.mail@gmail.com", "time": "2010-08-31T11:22:50Z", "bug_id": 49847, "creation_time": "2010-08-31T11:22:50Z", "is_private": false}, {"count": 3, "tags": [], "text": "Seems unwise to rob the caller from being able to respond to the condition (clearing this or other pools, freeing non-pool memory, crashing, asserting on their own)", "attachment_id": null, "id": 139578, "creator": "covener@gmail.com", "time": "2010-08-31T11:33:30Z", "bug_id": 49847, "creation_time": "2010-08-31T11:33:30Z", "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> Seems unwise to rob the caller from being able to respond to the condition\n> (clearing this or other pools, freeing non-pool memory, crashing, asserting on\n> their own)\n\nI agree. However, there is a large number of users of this method(and some of the others) in the wild who are not checking it is not null. \n\nIt seems possible in:\napr_palloc(...)\nto reach \n\n    node = active->next;\n    if (size <= node_free_space(node)) {\n        list_remove(node);\n    }\n    else {\n        if ((node = allocator_alloc(pool->allocator, size)) == NULL) {\n            if (pool->abort_fn)\n                pool->abort_fn(APR_ENOMEM); /* HERE */\n\n            return NULL; \n        }\n    }\n\nWhen you run the testdir (test). If you change the above to be:\n\n\n.....\n        if ((node = allocator_alloc(pool->allocator, size)) == NULL) {\n            if (!   pool->abort_fn) /* note the ! added */ \n                pool->abort_fn(APR_ENOMEM); \n\n            return NULL; /* you end up here */ \n        }\n    }\nand you will fail one of the tests. This to me suggests that this scenario is possible if the pool is like that one failed test *but* pool->abort_fn is not true :) \n\nYou notice I put the assert in the apr_pcalloc method right? and not the apr_palloc method. I don't think this changes the fact that there is a large number of mod_'s that are using these methods without checking it is null first. \n\nSo long as the caller is a child that can just be 're-born' I don't see this as an issue. (for use with apache).", "attachment_id": null, "id": 139581, "creator": "db.pub.mail@gmail.com", "time": "2010-08-31T13:37:56Z", "bug_id": 49847, "creation_time": "2010-08-31T13:37:56Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 49847, "attachment_id": null, "text": ">I don't think this changes the fact that there is a large\nnumber of mod_'s that are using these methods without checking it is null\nfirst.\n\nIf you're talking about mod_'s for Apache httpd, note that it doesn't check apr_palloc/pcalloc retcodes either before trying to use the pointers.\n\nI'm marking this INVALID.  APR's API doesn't allow this to blow up/assert/whatever unless the app uses the existing APR mechanism to handle palloc/pcalloc failures under the covers: the abort function.  That is a sufficient level of function AFAICT.\n\nYou'll have to lobby with your favorite apps to get them to figure out how to use the abort function in a way that handles failures much better than at present, without writing boatloads of code that almost never runs.", "id": 139582, "time": "2010-08-31T14:40:20Z", "creator": "trawick@apache.org", "creation_time": "2010-08-31T14:40:20Z", "is_private": false}, {"count": 6, "tags": [], "creator": "db.pub.mail@gmail.com", "attachment_id": null, "id": 139590, "time": "2010-08-31T23:22:53Z", "bug_id": 49847, "creation_time": "2010-08-31T23:22:53Z", "is_private": false, "text": "(In reply to comment #5)\n> >I don't think this changes the fact that there is a large\n> number of mod_'s that are using these methods without checking it is null\n> first.\n> \n> If you're talking about mod_'s for Apache httpd, note that it doesn't check\n> apr_palloc/pcalloc retcodes either before trying to use the pointers.\n\nYeah I know ... why is that? \n\n> I'm marking this INVALID.  APR's API doesn't allow this to blow\n> up/assert/whatever unless the app uses the existing APR mechanism to handle\n> palloc/pcalloc failures under the covers: the abort function.  That is a\n> sufficient level of function AFAICT.\n> \n> You'll have to lobby with your favorite apps to get them to figure out how to\n> use the abort function in a way that handles failures much better than at\n> present, without writing boatloads of code that almost never runs.\n\nFair enough. :)"}]
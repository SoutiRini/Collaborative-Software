[{"count": 0, "tags": [], "bug_id": 10264, "text": "The present implementation generates Servlets dependend on \norg.apache.jasper.runtime.* package. The new option should allows to generate \nconteiner independend Servlets those can be deployed not only on Tomkat and \nwithout including jasper-runtime.jar into target WAR. Generated Servlets should \nbe dependend only on common Java Servlets classes and on JSP classes \njavax.servlet.jsp.* and javax.servlet.jsp.tagext.*", "id": 18625, "time": "2002-06-27T00:56:10Z", "creator": "eu@uland.com", "creation_time": "2002-06-27T00:56:10Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "craig.mcclanahan@sun.com", "attachment_id": null, "text": "Note that doing this would bloat the size of every generated JSP page, because\nit would have to contain a copy of all the supporting code normally provided by\nthe runtime library.  That also does nasty things to your memory occupancy\nbecause there are multiple copies of what could have been a common runtime\nclass, if you were only willing to include a runtime library JAR with your webapp.\n\nThe code in jasper-runtime.jar is independent of Tomcat's servlet container, as\nwitnessed by the fact that several other containers use it as well.  And it was\ndeliberately segregated into a separate JAR for easy packaging.  Is it really\nsuch an imposition to require that you either (a) include jasper-runtime.jar in\nyour /WEB-INF/lib directory, or (b) install jasper-runtime.jar in a shared\nrepository supported by your non-Tomcat servlet container?\n", "id": 18628, "time": "2002-06-27T02:10:51Z", "bug_id": 10264, "creation_time": "2002-06-27T02:10:51Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 10264, "text": "Craig, I knew all of that. But in several cases it is important to do not have \n3rd party dependencies. For instance, target deployment paltform may use \ndifferent and incompatible version of jasper-runtime.jar installed (is that jar \ncompatible with both Tomkat's 3.x and 4.x?). \n\nI suggest to add an OPTION to generate completely generic Servlets. So, \ndeveloper can decide on what he needed - platform independence on cost of \nmemory, or save some memory on cost of possible incompatibility.", "id": 18630, "time": "2002-06-27T02:59:07Z", "creator": "eu@uland.com", "creation_time": "2002-06-27T02:59:07Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 10264, "text": "The code in jasper-runtime.jar (conforming to JSP 1.2) from a Tomcat 4.x system\ndepends on a Servlet 2.3 container, so it won't run on Tomcat 3.x (which\nsupports Servlet 2.2 and JSP 1.1).  Of course, that is also very likely to be\ntrue for \"pure servlets\" generated by a JSP 1.2 based page compiler -- they are\ngoing to depend on Servlet 2.3 features so they probably won't work either.\n\nI wouldn't hold out much hope that this particular desire is even technically\nfeasible.\n", "id": 18634, "time": "2002-06-27T05:35:34Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2002-06-27T05:35:34Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 10264, "text": "There is also few other 2.2 compliant containers that used widely. For instance \nIBM's WebSphere and BEA WebLogic 6. Not sure about Oracle app servers 8 and 9. \n\nSo, I suggest that another option for JSP 1.1 compliance is also very useful. \nFrom other hand, if jspc will generate 2.3 compliant code only if any features \nof JSP 1.2 was used, then we can keep the compliance under control of JSP \ndeveloper. Otherwise it is very complicated task, to create really platform \nindependend solution.", "id": 18681, "time": "2002-06-27T21:54:29Z", "creator": "eu@uland.com", "creation_time": "2002-06-27T21:54:29Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 10264, "text": "The codes that jasper generates assumes the existence of a runtime libaray. \nDoing it otherwise is technically not feasible.  I am sure other web container\nuse their own runtime libraries too.\n\nNote also that runtime libraries contain codes for privileged blocks can be only\nbe executed with privileage granted when the security manager is on.  The\ngranting of the privilege is done currently in TC by recognizing the runtime\npackage name.  This would be much more tedious (if not impossible) if those\ncodes were to be expanded in the generated codes.", "id": 35622, "time": "2003-04-19T00:12:57Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-04-19T00:12:57Z", "is_private": false, "attachment_id": null}]
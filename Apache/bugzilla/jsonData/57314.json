[{"count": 0, "attachment_id": null, "bug_id": 57314, "text": "TL;DR version:\n==============\n\nWhen processing async requests, Tomcat calls ServletRequestListener.requestInitialized() callback from a different thread than the corresponding ServletRequestListener.requestDestroyed() callback. This breaks a lot of frameworks and technologies that depend on ThreadLocals (for example CDI - Weld). All the other Servlet implementations I could get my hands on call these callbacks symmetrically from the same thread. Please fix this.\n\nLong version:\n=============\n\nThe Servlet specification is unfortunatelly quite vague when it comes to when and how ServletRequestListeners are called. \n\nFor a simple synchronous request this is not such a big deal as there are not many options. Both callbacks are called by a thread that processes the request. ServletRequestListener.requestInitialized() at the beginning and ServletRequestListener.requestDestroyed() at the end. So far so good.\n\nHowever, when it comes to asynchronous requests, this gets more complicated. \n\nSuppose we have a simple asynchronous servlet that:\n\nA1) Does initial processing of the request\nA2) Goes async (req.startAsync())\nA3) Spawns a new thread T that calculates something\nA4) The servlet exits\n\nB1) The spawn thread T calculates the value\nB2) Once the thread T finishes calculation, it dispatches back to Servlet container for rendering (ctx.dispatch(\"/asyncFinish?value=calculatedValue\"))\n\nC1) Servlet container creates response and completes the request\n\nA* steps are performed by a thread that initially handles the request. B* steps are performed by a thread spawned by a Servlet, C* steps are performed again by a Servlet container thread.\n\nNow the question arises: When and how should ServletRequestListener callbacks be invoked? Common requirements are:\n\n1) Symmetry - each time ServletRequestListener.requestInitialized() is called, there should be a corresponding ServletRequestListener.requestDestroyed() call\n\nThis I think is clear - if a listener starts something, it should get a chance to stop it.\n\n\n2) Symmetry with respect to calling thread - each time ServletRequestListener.requestInitialized() is called by thread T, there should be a corresponding ServletRequestListener.requestDestroyed() call by thread T\n\nThis is an extension of requirement (1) and is needed because frameworks often use ServletRequestListener.requestInitialized() as a hook to set a ThreadLocal for the duration of the request and then unset it in ServletRequestListener.requestDestroyed()\n\nOther Servlet containers\n========================\n\nAs we saw before, the fact that a request is processed in multiple threads may seem in conflict with this second requirement (Symmetry with respect to calling thread - each time). How do other Servlet implementations solve this? They typically do the following:\n\nThread A calls ServletRequestListener.requestInitialized()\nA1, A2, A3 and A4 are performed\nThread A calls ServletRequestListener.requestDestroyed()\n\nWhen the value is calculated by thread B and the request is dispatched to the Servlet container again:\n\nThread C calls ServletRequestListener.requestInitialized()\nC1 is performed\nThread C calls ServletRequestListener.requestDestroyed()\n\nThis ensures symmetry with respect to a given thread.\n\nTomcat\n======\n\nTomcat simply does:\n\n- Thread A calls ServletRequestListener.requestInitialized()\n- the entire request is processed in threads A, B and C\n- Thread C calls ServletRequestListener.requestDestroyed()\n\nwhich breaks the second requirement (Symmetry with respect to calling thread). I tested with Tomcat 7 and Tomcat 8\n\nI tested with the following Servlet containers:\n\n- Undertow\n- JBoss Web\n- Jetty\n- Grizzly\n\nand Tomcat is really the odd one out in not respecting the second requirement. Please fix this so that Tomcat matches the second requirement.", "id": 179538, "time": "2014-12-05T15:26:45Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T15:26:45Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 57314, "is_private": false, "id": 179542, "time": "2014-12-05T15:39:18Z", "creator": "markt@apache.org", "creation_time": "2014-12-05T15:39:18Z", "tags": [], "text": "*** Bug 57315 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "bug_id": 57314, "attachment_id": null, "text": "As with JBoss Web, you're not supposed to be using the request listener but the ThreadBindingListener that I added if you want container integration (although it is not used yet for upgrade mode, I'll do it someday). The request listener is a dead end for your use.", "id": 179543, "time": "2014-12-05T15:55:02Z", "creator": "remm@apache.org", "creation_time": "2014-12-05T15:55:02Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 57314, "is_private": false, "id": 179544, "time": "2014-12-05T15:58:50Z", "creator": "markt@apache.org", "creation_time": "2014-12-05T15:58:50Z", "tags": [], "text": "The Servlet Specification is not clear on the expected interaction between a ServletRequestListener and async requests.\n\nThe relevant references I could find were:\n<quote source=\"Table 11-3\">\nLifecycle | A servlet request has started being processed by Web components. |\njavax.servlet.ServletRequestListener\n</quote>\n<quote source=\"ServletRequestListener Javadoc\">\nInterface for receiving notification events about requests coming into and going out of scope of a web application.\n\nA ServletRequest is defined as coming into scope of a web application when it is about to enter the first servlet or filter of the web application, and as going out of scope as it exits the last servlet or the first filter in the chain.\n</quote>\n\nThat is all pretty clear prior to Servlet 3.0 async.\n\nWith async, I agree it gets murkier. As far as I am aware, downstream users of Tomcat have passed the TCK without any changes in this area so there is no clarification to be obtained from that source.\n\nTomcat's interpretation of the current language is that a request that is in async mode is still \"in the scope of the web application\" until the dispatch() or complete() call has been processed.\n\nI appreciate the issues this causes for the use of ThreadLocals but the current behaviour is not going to change without some clarification from the Servlet EG. It is usual that, when such clarification is made, the changes are back-ported to earlier versions so if this is clarified in Servlet 4.0, any changes should get back-ported to Tomcat 8 and Tomcat 7.\n\nObviously, one possible result of asking for clarification is that the EG confirms that Tomcat's behaviour is correct. There are use cases for the current behaviour so my personal view is that a new listener is required. Unfortunately, that would make back-porting much less likely (although we could back-port a Tomcat specific listener)."}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "I fully agree with the resolution, especially since a facility designed specifically for this use has been added in Tomcat 8.\n\nBut maybe the ThreadBinding listener should be backported to Tomcat 7 to cover the finer framework integration needs [which include like init, destroy, session expiration, clustering, upgrade, etc etc, which means dealing with lots of different listener types and praying all containers do the \"right\" thing] ?", "id": 179545, "time": "2014-12-05T16:09:49Z", "bug_id": 57314, "creation_time": "2014-12-05T16:09:49Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57314, "is_private": false, "text": "I am really disappointed by this resolution. \n\nFirst of all:\n\n\"Interface for receiving notification events about requests coming into and going out of scope of a web application.\"\n\nWhen a request goes async and the processing is moved somewhere else, it clearly is the case that the processing has gone out scope of a web application (the servlet container knows nothing about where the processing continues). Therefore, the destroyed callback should be called at this point. The request stays out of the scope of the web application until it is dispatched to the web application again.\n\nSecondly, ServletRequestListener seems to be the portable hook for integrating various frameworks that use ThreadLocals and it actually is portable across Servlet implementations except for Tomcat.\n\nLastly, nice to know that there is a proprietary hook for doing this. It however still makes integration much more painful compared to the portable one.\n\n\nWould it be possible to consider adding a mode or a configuration option that, when set, would change Tomcat's behavior to align with all the other Servlet implementations?", "id": 179546, "time": "2014-12-05T16:30:15Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T16:30:15Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "jozefhartinger@gmail.com", "attachment_id": null, "is_private": false, "id": 179547, "time": "2014-12-05T16:34:23Z", "bug_id": 57314, "creation_time": "2014-12-05T16:34:23Z", "text": "BTW, the documentation for http://tomcat.apache.org/tomcat-8.0-doc/api/org/apache/catalina/ThreadBindingListener.html is miserable. Is there an example somewhere of how this should be registered and when it is called with respect to ServletRequestListener?"}, {"count": 7, "text": "\"is miserable\": thanks for the feedback :)\n\n\"when it is called with respect to ServletRequestListener\": \"Callback for establishing naming association when entering the application scope. This corresponds to setting the context classloader.\" So you have it, it is called when calling setContextClassLoader.\n\n\"Is there an example somewhere of how this should be registered\": Same Context.setThreadBindingListener API as in JBoss Web, but you need the usual Tomcat server listener to add it to all contexts as needed.", "bug_id": 57314, "attachment_id": null, "id": 179548, "time": "2014-12-05T16:48:28Z", "creator": "remm@apache.org", "creation_time": "2014-12-05T16:48:28Z", "tags": [], "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 57314, "text": "Actually since ThreadBindingListener does not have access to the ServletRequest object (as ServletRequestListener does) it is not really usable for our purpose. \n\nThus, would it be possible to have the configuration option to switch Tomcat to provide aforementioned callback symmetrically with respect to the calling thread?", "id": 179549, "time": "2014-12-05T16:55:00Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T16:55:00Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "bug_id": 57314, "text": "Ah, so you need a request object ? How do you manage during servlet init / destroy then ?", "id": 179550, "time": "2014-12-05T17:04:17Z", "creator": "remm@apache.org", "creation_time": "2014-12-05T17:04:17Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 57314, "attachment_id": null, "id": 179551, "time": "2014-12-05T17:07:27Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T17:07:27Z", "is_private": false, "text": "Not sure if I fully understand your question. We do not need our stuff to be active during Servlet init/destroy. We need it active during request processing."}, {"count": 11, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 179552, "time": "2014-12-05T17:22:25Z", "bug_id": 57314, "creation_time": "2014-12-05T17:22:25Z", "text": "Well, it's not what I call EE integration then, which would be at the container level, not at the application level limited to Servlets. This is too limited, for example, it has no possibility to work with Websockets (note: in JBoss, it works by accident, and I actually had to back out a useful change because of your hack ...).\n\nAbout the behavior change for ServletRequestListener, it was just resolved as WONTFIX."}, {"count": 12, "attachment_id": null, "creator": "markt@apache.org", "text": "(In reply to Jozef Hartinger from comment #5)\n\n> Secondly, ServletRequestListener seems to be the portable hook for\n> integrating various frameworks that use ThreadLocals and it actually is\n> portable across Servlet implementations except for Tomcat.\n\nThat portability depends entirely on how different vendors interpret what is a very unclear specification. If you want to lobby for consistent behaviour then you need to lobby the Servlet EG.\n\n> Would it be possible to consider adding a mode or a configuration option\n> that, when set, would change Tomcat's behavior to align with all the other\n> Servlet implementations?\n\nI'd prefer to see this discussed by the Servlet EG before taking any action.", "id": 179553, "time": "2014-12-05T17:24:22Z", "bug_id": 57314, "creation_time": "2014-12-05T17:24:22Z", "tags": [], "is_private": false}, {"count": 13, "attachment_id": null, "bug_id": 57314, "text": "> Well, it's not what I call EE integration then, which would be at the container\n> level, not at the application level limited to Servlets. This is too limited, \n> for example, it has no possibility to work with Websockets \n\nSorry, this is just nonsense. We provide the exact type of integration that the EE specification requires - that is integration with Servlet requests. For different kinds of requests where integration is required, there are other hooks we use.\n\n> (note: in JBoss, it\n> works by accident, and I actually had to back out a useful change because of\n> your hack ...).\n\nStoring data in a ThreadLocal is a hack? It is the only way to implement functionality needed by many frameworks. Unfortunately, unlike other Servlet implementations, Tomcat provides no way of achieving this reliably.", "id": 179554, "time": "2014-12-05T17:33:28Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T17:33:28Z", "tags": [], "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 57314, "is_private": false, "id": 179556, "time": "2014-12-05T17:36:00Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-05T17:36:00Z", "tags": [], "text": "> I'd prefer to see this discussed by the Servlet EG before taking any action.\n\nFair enough, I'll try to bring this up."}, {"count": 15, "tags": [], "bug_id": 57314, "is_private": false, "text": "Thank you for posting this bug. This will help me to avoid lots of troubles.\n\nI am also disappointed by this resolution.\n\nI am in the same boat as you as feel that Tomcat should have implemented in a way which matches the implementation by other containers.\n\nIf I understand it correctly then adding tomcat specific hack will create a dependency on tomcat runtime which will make a framework (which has been coded against Servlet API to keep it portable) un portable.\n\nCurrent implementation makes some people happy while others (who use ThreadLocal (heavily) in a way you have described) unhappy. Implementing it in other way (as done by other containers) will make everyone happy. As Servlet specification does not say which of these two ways are correct, I see no harm in implementing it in other way.", "id": 179558, "time": "2014-12-05T18:16:46Z", "creator": "shailendra_01@outlook.com", "creation_time": "2014-12-05T18:16:46Z", "attachment_id": null}, {"count": 16, "attachment_id": null, "bug_id": 57314, "text": "If you are using ThreadLocals implementing a Filter is the usual and better approach.\n\n1) A Filter fulfills the same task of being executed when request enters application and when it leaves it.\n2) A filter can use try/finally and deal .\n3) A filter can be configured with what it is interested with\n<dispatcher>REQUEST</dispatcher>\n<dispatcher>FORWARD</dispatcher>\n<dispatcher>INCLUDE</dispatcher>\n<dispatcher>ERROR</dispatcher>\n<dispatcher>ASYNC</dispatcher>\n\nAre you trying to emulate a Filter using a \"listener\"?\nDoes ServletRequestListener serve its own purpose, or it re-implements a filter? Do you expect it to be called on all those dispatches, without being configured in what of them it is interested in?\n\n\nLooking at Tomcat issues in Bugzilla that mention ServletRequestListener\n\nBug 49991  -> login page called by Authenticator\nBug 51653  -> dealing with <dispatcher>ERROR</dispatcher>\nBug 50789  -> dealing with <dispatcher>ERROR</dispatcher> but it somehow went down to discussion of forwards and to a custom Context option\n\nAre we now to discuss <dispatcher>ASYNC</dispatcher>?\n\nBTW, The Filter chapter in Servlet Specification explicitly says about \"same thread\" (<quote>A Filter and the target servlet or resource at the end\nof the filter chain must execute in the same invocation thread.</quote> and several other phrases). Is there anything about listeners?\n\nDoes your proposal contradict with use case from bug 51653?", "id": 179567, "time": "2014-12-05T22:30:35Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-12-05T22:30:35Z", "tags": [], "is_private": false}, {"count": 17, "attachment_id": null, "bug_id": 57314, "is_private": false, "id": 179787, "time": "2014-12-16T08:48:38Z", "creator": "jozefhartinger@gmail.com", "creation_time": "2014-12-16T08:48:38Z", "tags": [], "text": "Filters are not usable for this purpose as I need to be able to have my code called before other listeners."}, {"count": 18, "attachment_id": null, "bug_id": 57314, "text": "FYI, we experienced similar symptoms as reported in BUG#57824, the problem may be related.", "id": 182436, "time": "2015-04-16T19:08:55Z", "creator": "michal.sevcenko@etnetera.cz", "creation_time": "2015-04-16T19:08:55Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "jo2847@sbc.com", "text": "Several methods called ensureCapacity exist in Xerces XML Parser packages.  All \nof these seem to use ArrayIndexOutOfBoundsExceptions and NullPointerExceptions \nas normal program flow control, presumably to simplify the code.  The example \nbelow comes from org.apache.xerces.util.StringPool.  This is a poor scheme, as \nit would be far more efficient to simply perform a few checks and resize the \narray if needed.  The increase in code complexity would be well worth the \ntradeoff.  \n\nAlso, this technique presents a problem when using Xerces in the IBM Visual Age \nfor Java environment, which allows Exceptions to be caught by the debugger at \nthe point which they are thrown.  A developer looking to uncover a legitimate \nbug must wade through the multitude of exceptions thrown by the ensureCapacity \nmethods before he or she finds the real source of the trouble.\n\nI hope you will consider refactoring this questionable implementation.\n\nThanks,\nJohn O'Malley\nSBC Communications\n314.235.3969\njo2847@sbc.com\n\n\tprivate boolean ensureCapacity(int chunk, int index) {\n\t\ttry {\n\t\t\treturn fOffset[chunk][index] == 0;\n\t\t} catch (ArrayIndexOutOfBoundsException ex) {\n\t\t\tif (index == 0) {\n\t\t\t\tString[][] newString = new String[chunk * 2][];\n\t\t\t\tSystem.arraycopy(fString, 0, newString, 0, \nchunk);\n\t\t\t\tfString = newString;\n\t\t\t\tStringPool.StringProducer[][] newProducer = new \nStringPool.StringProducer[chunk * 2][];\n\t\t\t\tSystem.arraycopy(fStringProducer, 0, \nnewProducer, 0, chunk);\n\t\t\t\tfStringProducer = newProducer;\n\t\t\t\tint[][] newInt = new int[chunk * 2][];\n\t\t\t\tSystem.arraycopy(fOffset, 0, newInt, 0, chunk);\n\t\t\t\tfOffset = newInt;\n\t\t\t\tnewInt = new int[chunk * 2][];\n\t\t\t\tSystem.arraycopy(fLength, 0, newInt, 0, chunk);\n\t\t\t\tfLength = newInt;\n\t\t\t\tnewInt = new int[chunk * 2][];\n\t\t\t\tSystem.arraycopy(fCharsOffset, 0, newInt, 0, \nchunk);\n\t\t\t\tfCharsOffset = newInt;\n\t\t\t} else {\n\t\t\t\tString[] newString = new String[index * 2];\n\t\t\t\tSystem.arraycopy(fString[chunk], 0, newString, \n0, index);\n\t\t\t\tfString[chunk] = newString;\n\t\t\t\tStringPool.StringProducer[] newProducer = new \nStringPool.StringProducer[index * 2];\n\t\t\t\tSystem.arraycopy(fStringProducer[chunk], 0, \nnewProducer, 0, index);\n\t\t\t\tfStringProducer[chunk] = newProducer;\n\t\t\t\tint[] newInt = new int[index * 2];\n\t\t\t\tSystem.arraycopy(fOffset[chunk], 0, newInt, 0, \nindex);\n\t\t\t\tfOffset[chunk] = newInt;\n\t\t\t\tnewInt = new int[index * 2];\n\t\t\t\tSystem.arraycopy(fLength[chunk], 0, newInt, 0, \nindex);\n\t\t\t\tfLength[chunk] = newInt;\n\t\t\t\tnewInt = new int[index * 2];\n\t\t\t\tSystem.arraycopy(fCharsOffset[chunk], 0, \nnewInt, 0, index);\n\t\t\t\tfCharsOffset[chunk] = newInt;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (NullPointerException ex) {\n\t\t}\n\t\tfString[chunk] = new String[INITIAL_CHUNK_SIZE];\n\t\tfStringProducer[chunk] = new StringPool.StringProducer\n[INITIAL_CHUNK_SIZE];\n\t\tfOffset[chunk] = new int[INITIAL_CHUNK_SIZE];\n\t\tfLength[chunk] = new int[INITIAL_CHUNK_SIZE];\n\t\tfCharsOffset[chunk] = new int[INITIAL_CHUNK_SIZE];\n\t\treturn true;\n\t}", "id": 883, "time": "2001-02-27T09:30:48Z", "bug_id": 730, "creation_time": "2001-02-27T09:30:48Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 730, "attachment_id": null, "text": "I spoke with a JIT compiler developer on IBM's JDK's.  He indicated that (at \nleast on IBM's JDK's), there were cases in which using try-catch could be more \nefficient than using the logically equivalent if-else, if exceptions didn't get \nthrown very often.\n\nI've changed some instances in which if-else should be superior; in some cases \nin which try-catch would be better, I've instead tried to reduce the number of \nexceptions actually thrown, without increasing memory usage by too much.\n\nThe changes aren't complete, so I won't mark the bug as \"FIXED\", but I hope what \nI've done thus far improves the situation.  These changes are available in the \nXerces-J 1.4.2.", "id": 4212, "time": "2001-08-01T06:48:25Z", "creator": "zongaro@ca.ibm.com", "creation_time": "2001-08-01T06:48:25Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 730, "text": ".", "count": 2, "id": 49788, "time": "2003-12-29T12:29:34Z", "creator": "jmpuig@cadegest.com", "creation_time": "2003-12-29T12:29:34Z", "is_private": false}]
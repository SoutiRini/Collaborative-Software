[{"count": 0, "tags": [], "bug_id": 50159, "attachment_id": null, "id": 141071, "time": "2010-10-26T15:46:50Z", "creator": "mark.watson.x@gmail.com", "creation_time": "2010-10-26T15:46:50Z", "is_private": false, "text": "Requesting a javax.sql.DataSource via JNDI results in a new instance each time.\n\nIn my particular case I have defined a c3p0 connection pool as follows:\n\n<Resource auth=\"Container\"\n   name=\"jdbc/mydb\"\n   description=\"My Database\"\n   factory=\"org.apache.naming.factory.BeanFactory\"\n   type=\"com.mchange.v2.c3p0.ComboPooledDataSource\"\n   driverClass=\"org.gjt.mm.mysql.Driver\"\n   jdbcUrl=\"jdbc:mysql://localhost:3306/mydb?autoReconnect=true\"\n   user=\"myUserName\"\n   password=\"myPassword\"\n   minPoolSize=\"5\"\n   maxPoolSize=\"50\"\n   acquireIncrement=\"1\"\n   idleConnectionTestPeriod=\"100\"\n   maxIdleTime=\"1800\"\n   preferredTestQuery=\"SELECT 1;\"\n/>\n\nI am using a 3rd party library to access the datasource.  Each time a request is made I can see a new connection pool being created.  With a simple test I was also able to see that the instance being returned was different each time.  Test code:\n\nContext initialContext = new InitialContext();\nreturn ((DataSource)initialContext.lookup(this.dataSource)).getConnection();\n\nWhen comparing the source code for org.apache.naming.NamingContext between 7.02 and 7.04 the following 4 lines of code were removed (line 808):\n\nif (obj != null) {\n   entry.value = obj;\n   entry.type = NamingEntry.ENTRY;\n}\n\nAdding this code back into the class fixes the issue."}, {"count": 1, "tags": [], "text": "I just came across the issue (49978) where this was explicitly made to behave this way.  I personally require the previous behavior.  I believe this is also how Tomcat 6 behaved, so I imagine this could cause some headaches for people upgrading.  I will need to find a way to get around this (which may mean I end up maintaining my own copy of org.apache.naming.NamingContext).\n\nAre there backwards compatibility concerns here?  I understand I can cache the DataSource instance returned to me, however I also use 3rd party libraries that request the DataSource (Hibernate, BIRT, etc).", "attachment_id": null, "bug_id": 50159, "id": 141072, "time": "2010-10-26T16:58:05Z", "creator": "mark.watson.x@gmail.com", "creation_time": "2010-10-26T16:58:05Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50159, "attachment_id": null, "id": 141073, "time": "2010-10-26T17:32:28Z", "creator": "mark.watson.x@gmail.com", "creation_time": "2010-10-26T17:32:28Z", "is_private": false, "text": "Sorry, I referenced the wrong issue.  The issue which prompted the change from 7.0.2 to 7.0.4 is 49994."}, {"attachment_id": null, "tags": [], "bug_id": 50159, "is_private": false, "count": 3, "id": 141074, "time": "2010-10-26T17:35:39Z", "creator": "markt@apache.org", "creation_time": "2010-10-26T17:35:39Z", "text": "I've done a bit more digging and I'm leaning towards the following:\n- shareable by default\n- look at the res-sharing-scope to determine shareable or non-shareable\n\nThat will return Tomcat 7 to the previous behaviour but provide a way for folks that want non-shareable resources to configure them. I need to do some more reading of the spec to see if such an approach is in alignment with the spec."}, {"count": 4, "tags": [], "creator": "djencks@apache.org", "attachment_id": null, "is_private": false, "id": 141076, "time": "2010-10-26T19:33:10Z", "bug_id": 50159, "creation_time": "2010-10-26T19:33:10Z", "text": "the aharable/non-sharable attribute refers to the connections, not the datasource/connection factory.  The spec is very clear that unless clearly indicated otherwise or unless the object is immutable, each jndi lookup should return a new object.  There are some tests for this for datasources in the ee tck.\n\nSharable refers to how many connection handles can be associated with a managed connection (in the same thread and same transaction).  Sharable means that if you get multiple connections (in the same thread and tx) they can all be backed by the same managed connection.  non-sharable means each connection needs its own managed connection.  Typically you'd use non-sharable connections if you got the connection with some unique data such as username/pw that is different for each connection.  Some resource adapters also don't support sharable connections.\n\nI have no problem relaxing this (IMO very silly) requirement but please don't misuse the sharable flag for it."}, {"attachment_id": null, "tags": [], "bug_id": 50159, "is_private": false, "count": 5, "id": 141087, "time": "2010-10-27T04:29:06Z", "creator": "markt@apache.org", "creation_time": "2010-10-27T04:29:06Z", "text": "David,\n\nThanks for the clarification. Reading that part of the spec and trying to figure out what it actually means always makes my head hurt.\n\nI'll leave the shareable flag alone (as far as I can tell, Tomcat doesn't do anything with it).\n\nBug 49994 indicates there are at least some users that want the spec mandated behaviour whilst it appears to be the expectation of most that the same object is returned from multiple look-ups. Configuring this per context would be easy but I think per resource configuration would be better. I'll see if there is a way to make that happen. If nothing simple jumps put at me, I'll likely go with per context configuration for now and we can look at extending it to per resource if there is any demand for that."}, {"count": 6, "tags": [], "bug_id": 50159, "attachment_id": null, "text": "(In reply to comment #5)\n> I'll likely go with per context configuration for now\n\nDo not forget about GlobalNamingResources resources that are in server.xml.", "id": 141102, "time": "2010-10-27T11:43:40Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-10-27T11:43:40Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 50159, "is_private": false, "count": 7, "id": 141422, "time": "2010-11-04T14:01:51Z", "creator": "markt@apache.org", "creation_time": "2010-11-04T14:01:51Z", "text": "Fixed in trunk with a new configuration option, singleton, for resource elements that defaults to the current 6.0.x behaviour."}]
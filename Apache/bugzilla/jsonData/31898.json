[{"count": 0, "tags": [], "creator": "jah@progress.com", "attachment_id": null, "text": "There seems to be a problem in the way util_ldap_cache_checkuserid handles\nchecking and adding the cache entries.\n\nIn the worst case this can lead to httpd crashing in strcmp() if the cache entry\ndoes not have password. (Note that normally the cache entries have passwords but\nI understand that a cache entry without a password is also valid.)\n\nOther possibility is that several cache entries are added for the same userid as\nutil_ald_cache_insert does not catch duplicates. I can't immediately think of an\nexample real world situation (maybe in case of password change) in which this\ncould happen with the current code but in theory it is possible.\n\nThe attached patch fixes both of the above issues. It is made against 2.0.52\nutil_ldap.c but should apply cleanly to current 2.1 code as well.", "id": 65754, "time": "2004-10-26T15:53:50Z", "bug_id": 31898, "creation_time": "2004-10-26T15:53:50Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jah@progress.com", "attachment_id": 13222, "text": "Created attachment 13222\nProposed patch", "id": 65755, "time": "2004-10-26T15:55:04Z", "bug_id": 31898, "creation_time": "2004-10-26T15:55:04Z", "is_private": false}, {"count": 2, "tags": [], "text": "As it stands, mod_auth_ldap (or mod_authnz_ldap) will not allow a NULL \npassword to be sent to util_ldap_cache_checkuserid(), but that doesn't mean \nthat a different auth_ldap module built on top of util_ldap won't allow it.  \nBut if I am reading the code correctly, the following patch should prevent a \nNULL password from ever getting into the cache.  Therefore requiring a lot of \nextra code to check for and remove entries with NULL passwords should be \nunnecessary.  \n\nIndex: modules/ldap/util_ldap.c\n===================================================================\nRCS file: /home/cvs/httpd-2.0/modules/ldap/util_ldap.c,v\nretrieving revision 1.17\ndiff -u -r1.17 util_ldap.c\n--- modules/ldap/util_ldap.c\t25 Oct 2004 18:32:58 -0000\t1.17\n+++ modules/ldap/util_ldap.c\t27 Oct 2004 17:20:32 -0000\n@@ -835,7 +835,7 @@\n      * able to authenticate with this module. I don't see this as a big\n      * problem.\n      */\n-    if (strlen(bindpw) <= 0) {\n+    if (!bindpw || (strlen(bindpw) <= 0)) {\n         ldap_msgfree(res);\n         ldc->reason = \"Empty password not allowed\";\n         return LDAP_INVALID_CREDENTIALS;\n", "attachment_id": null, "id": 65863, "creator": "bnicholes@apache.org", "time": "2004-10-27T22:32:14Z", "bug_id": 31898, "creation_time": "2004-10-27T22:32:14Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jah@progress.com", "attachment_id": null, "text": "You are right that it would prevent util_ldap_cache_checkuserid() from adding\nNULL passwords. But like you said, nothing stops other modules from adding them.\nThe real story behind this thing is that I have made some changes (See bug\n28253) to enable LDAP authorization when a user is authenticated with some other\nmodule and that code adds cache entries without password (in my case token\nauthentication, no passwords sent over the network).\n\nBut even without the NULL password issue, I think the duplicate checking at line\n945 of v2.0.52 util_ldap.c is flawed because if it finds a cache entry where the\ndn or password does not match the entry to be added, it will just add the new\nentry without removing the existing one.\n", "id": 65894, "time": "2004-10-28T12:49:26Z", "bug_id": 31898, "creation_time": "2004-10-28T12:49:26Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 31898, "text": "That's my point.  The only way for any ldap_auth module that is built on top \nof util_ldap to add a user ID/password to the cache is through the \nutil_ldap_cache_checkuserid() API.  By applying the above patch, adding a null \npassword to the cache for a user ID is no longer possible through \nutil_ldap_cache_checkuserid() and therefore not possible at all.\n\nThe duplicate search on line 945 is there to handle multi-threaded race \nconditions especially on MP boxes.  The only way that a userID/password entry \ncan be added to the cache is after passing through the following process.  \n\n1. Does the userID/password entry already exist in the cache? -> no\n2. Does the user object exist in the directory? -> yes\n3. Can we successfully bind to ldap using the userID/password? -> yes\n4. Does the userID/password entry exist *now* in the cache? -> no\n5. Add the userID/password entry to the cache.\n\nThe reason for step #4 is to make sure that some other thread following the \nsame procedure with the same userID/password entry, didn't hit step #5 while \nthe first thread was still in steps #2 or #3.  So the only way that the same \nuserID with 2 different passwords could successfully make it into the cache is \nif the user successfully logged into an auth_ldap protected page, then quickly \nchanged his ldap password and then successfully logged in again within the \nconfigurable expiration period.  Then for the remainder of the expiration \nperiod, the cache would be out of sync with the LDAP directory.  Once the \nexpiration period has passed for the invalid entry, that entry will be removed \nfrom the cache and the cache will be back in sync with the LDAP directory.  \n\nSo the key is, what is a reasonable userID/password expiration period. The \ndefault is 600 seconds (10 minutes) which could be enough time to allow the \ndescribed situation to occur.  So if that is something that appears to be a \nproblem, drop it to 60 or 30 seconds.  The purpose of the ldap cache is to \nincrease performance when displaying protected web pages that might require \nmultiple requests to complete.  Each request requiring a login.  The cache \nsimply avoids multiple unnecessary logins.  By dropping it to 30 seconds or \nless (most pages should load in 30 seconds or less, if they don't then ldap \nperformance doesn't matter anyway) a cached userID/password would basically be \ngood for a single page request.  Subsequent page requests would find an \nexpired entry, remove it and recache the new entry.", "id": 65907, "time": "2004-10-28T15:30:34Z", "creator": "bnicholes@apache.org", "creation_time": "2004-10-28T15:30:34Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Created attachment 13282\nutil_ldap_getuserdn() patch. combines patches 31898 and 28253", "attachment_id": 13282, "id": 66190, "creator": "bnicholes@apache.org", "time": "2004-10-31T02:28:34Z", "bug_id": 31898, "creation_time": "2004-10-31T02:28:34Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bnicholes@apache.org", "attachment_id": null, "text": "   The attached patch combines the patches from both bugs 28253 and 31898 to \nprovide the util_ldap_cache_getuserdn() API so that LDAP authorization can be \ncompletely split apart from LDAP authentication.  The main difference between \nthis patch and the patches submitted with the bugs is the logic in \nutil_ldap_cache_checkuserid() that determines when to insert, remove or update \na cached entry.  The original patch caused the entries to be removed and \nreinserted needlessly.  After playing with this for a while, I feel a lot more \ncomfortable using the same user search cache for both the \nutil_ldap_cache_getuserdn() and util_ldap_cache_checkuserid() API's.  If this \nlooks good, I will get it checked into CVS.  To get it into the 2.0 branch,  a \nsimilar patch will have to be created for that codebase and proposed for \nbackport.\n", "id": 66191, "time": "2004-10-31T02:29:02Z", "bug_id": 31898, "creation_time": "2004-10-31T02:29:02Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jah@progress.com", "attachment_id": null, "text": "The comment about password verifying on line 983 of the patched v2.1 util_ldap.c\nshould probably be removed. Otherwise your util_ldap_cache_getuserdn() looks\npretty much the same as my version of the same function for Apache 2.0.52.\n\nIn my version of mod_auth_ldap_auth_checker() I check that the request has a\nusername before starting to create the req structure. Not sure if this affects\nthe end result (failing authorization) but it should make troubleshooting easier:\n***************\n*** 529,534 ****\n--- 529,541 ----\n       * and populated with the userid and DN of the account in LDAP\n       */\n  \n+     /* Check that we have a userid to start with */\n+     if ((!r->user) || (strlen(r->user) == 0)) {\n+         ap_log_rerror(APLOG_MARK, APLOG_WARNING|APLOG_NOERRNO, 0, r,\n+             \"ldap authorize: Userid is blank, AuthType=%s\",\n+             r->ap_auth_type);\n+     }\n+ \n      if(!req) {\n          ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n              \"ldap authorize: Creating LDAP req structure\");\n\nOn line 912 of patched v2.1 util_ldap.c there is this code:\n        if ((search_nodep == NULL) ||\n            (strcmp(*binddn, search_nodep->dn) != 0)) {\n\n            /* Nothing in cache, insert new entry */\n            util_ald_cache_insert(curl->search_cache, &the_search_node);\n\nShouldn't the existing cache entry be removed before if the dn of the cache\nentry does not match dn of the ldap search result ? Otherwise this will insert a\nduplicate entry in the cache.\n", "id": 66241, "time": "2004-11-01T14:32:01Z", "bug_id": 31898, "creation_time": "2004-11-01T14:32:01Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jah@progress.com", "attachment_id": 13319, "text": "Created attachment 13319\nutil_ldap_cache_getuserdn() patch for Apache 2.0.52", "id": 66351, "time": "2004-11-03T15:27:28Z", "bug_id": 31898, "creation_time": "2004-11-03T15:27:28Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 31898, "text": "I attached a version of util_ldap_cache_getuserdn() for Apache 2.0.52 util_ldap.c.\n\nI made some more changes to the cache logic, continuing your idea of not\nremoving the cache entry unless we really need to. This should be more efficient\nin practice since we only need to remove existing cache entries if the LDAP\naccount changes between authentications. Note that util_ldap_cache_getuserdn()\nwill remove expired cache entries with passwords since it doesn't re-validate\nthe password.\n", "id": 66353, "time": "2004-11-03T15:30:56Z", "creator": "jah@progress.com", "creation_time": "2004-11-03T15:30:56Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 31898, "attachment_id": null, "id": 66354, "time": "2004-11-03T15:32:13Z", "creator": "jah@progress.com", "creation_time": "2004-11-03T15:32:13Z", "is_private": false, "text": "Changed summary to better reflect what is going on with this bug.\n"}, {"count": 11, "tags": [], "bug_id": 31898, "text": "Created attachment 13321\nNew util_ldap_cache_getuserdn() patch for Apache 2.0.52", "id": 66363, "time": "2004-11-03T16:57:40Z", "creator": "jah@progress.com", "creation_time": "2004-11-03T16:57:40Z", "is_private": false, "attachment_id": 13321}, {"count": 12, "tags": [], "text": "Created attachment 13322\nNew util_ldap_cache_getuserdn() patch for Apache 2.0.52", "attachment_id": 13322, "id": 66365, "creator": "jah@progress.com", "time": "2004-11-03T17:09:07Z", "bug_id": 31898, "creation_time": "2004-11-03T17:09:07Z", "is_private": false}, {"count": 13, "tags": [], "creator": "jah@progress.com", "attachment_id": null, "text": "This clearly isn't my day...\n\nJust realized that the cache logic in my previous patch was flawed and didn't\nexpire cache entries properly. This means that even if something else than DN or\npassword in the LDAP account would change, the cache entry would not.\n\nNew patch should solve this problem.\n", "id": 66366, "time": "2004-11-03T17:10:52Z", "bug_id": 31898, "creation_time": "2004-11-03T17:10:52Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 31898, "text": "The following patch has been proposed for backport to httpd 2.0", "id": 66489, "time": "2004-11-04T23:13:13Z", "creator": "bnicholes@apache.org", "creation_time": "2004-11-04T23:13:13Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 31898, "text": "Created attachment 13333\nProposed backport patch for the util_ldap_cache_getuserdn() API", "id": 66490, "time": "2004-11-04T23:14:34Z", "creator": "bnicholes@apache.org", "creation_time": "2004-11-04T23:14:34Z", "is_private": false, "attachment_id": 13333}, {"count": 16, "tags": [], "creator": "bnicholes@apache.org", "attachment_id": null, "text": "Patch backported to 2.0.53-dev", "id": 66677, "time": "2004-11-10T16:37:08Z", "bug_id": 31898, "creation_time": "2004-11-10T16:37:08Z", "is_private": false}]
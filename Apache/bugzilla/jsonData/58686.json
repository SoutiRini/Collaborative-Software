[{"count": 0, "tags": [], "bug_id": 58686, "attachment_id": null, "is_private": false, "id": 186764, "time": "2015-12-03T14:05:06Z", "creator": "bill@wolosek.com", "creation_time": "2015-12-03T14:05:06Z", "text": "We have recently updated the tech stack of a JAX-WS webservice running on JRE 1.7.0_17/Tomcat7.0.39 to JRE 1.8.0_66/Tomcat 8.0.28. The web app runs on Windows Server 2012. The web service uses a Metro implementation for JAX-WS. The clients run on various windows versions using JRE 7 and the JAX-WS client API built into the JRE. The webservice is used to upload files from the client machines to the webservice which saves them in a document management system. The implementation worked pretty much flawlessly under Java 7/Tomcat 7 but we have run into a problem with larger payloads (2MB or larger) running under Java 8/Tomcat 8 server side. The stack trace from the client is:\n\n12/02/2015 14:12:38.699 [AWT-EventQueue-0] ERROR  DocumentImporterMainWindow$SwingAction.importDocument: Unexpected Problem trying to call the CustomerOrderDMService\njavax.xml.ws.WebServiceException: java.io.IOException: Error writing to server\n    at com.sun.xml.internal.ws.transport.http.client.HttpClientTransport.readResponseCodeAndMessage(Unknown Source)\n    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.createResponsePacket(Unknown Source)\n    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.process(Unknown Source)\n    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.processRequest(Unknown Source)\n    at com.sun.xml.internal.ws.transport.DeferredTransportPipe.processRequest(Unknown Source)\n    at com.sun.xml.internal.ws.api.pipe.Fiber.__doRun(Unknown Source)\n    at com.sun.xml.internal.ws.api.pipe.Fiber._doRun(Unknown Source)\n    at com.sun.xml.internal.ws.api.pipe.Fiber.doRun(Unknown Source)\n    at com.sun.xml.internal.ws.api.pipe.Fiber.runSync(Unknown Source)\n    at com.sun.xml.internal.ws.client.Stub.process(Unknown Source)\n    at com.sun.xml.internal.ws.client.sei.SEIStub.doProcess(Unknown Source)\n    at com.sun.xml.internal.ws.client.sei.SyncMethodHandler.invoke(Unknown Source)\n    at com.sun.xml.internal.ws.client.sei.SyncMethodHandler.invoke(Unknown Source)\n    at com.sun.xml.internal.ws.client.sei.SEIStub.invoke(Unknown Source)\n    at com.sun.proxy.$Proxy30.importDocument(Unknown Source)\n    at com.mycompany.documentimporter.DocumentImporterMainWindow$SwingAction.importDocument(DocumentImporterMainWindow.java:681)\n    at com.mycompany.documentimporter.DocumentImporterMainWindow$SwingAction.actionPerformed(DocumentImporterMainWindow.java:612)\n    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)\n    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)\n    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)\n    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)\n    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)\n    at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source)\n    at java.awt.Component.processMouseEvent(Unknown Source)\n    at javax.swing.JComponent.processMouseEvent(Unknown Source)\n    at java.awt.Component.processEvent(Unknown Source)\n    at java.awt.Container.processEvent(Unknown Source)\n    at java.awt.Component.dispatchEventImpl(Unknown Source)\n    at java.awt.Container.dispatchEventImpl(Unknown Source)\n    at java.awt.Component.dispatchEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n    at java.awt.Container.dispatchEventImpl(Unknown Source)\n    at java.awt.Window.dispatchEventImpl(Unknown Source)\n    at java.awt.Component.dispatchEvent(Unknown Source)\n    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)\n    at java.awt.EventQueue.access$500(Unknown Source)\n    at java.awt.EventQueue$3.run(Unknown Source)\n    at java.awt.EventQueue$3.run(Unknown Source)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)\n    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)\n    at java.awt.EventQueue$4.run(Unknown Source)\n    at java.awt.EventQueue$4.run(Unknown Source)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)\n    at java.awt.EventQueue.dispatchEvent(Unknown Source)\n    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n    at java.awt.EventDispatchThread.run(Unknown Source)\nCaused by: java.io.IOException: Error writing to server\n    at sun.net.www.protocol.http.HttpURLConnection.writeRequests(Unknown Source)\n    at sun.net.www.protocol.http.HttpURLConnection.writeRequests(Unknown Source)\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(Unknown Source)\n    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(Unknown Source)\n    at java.net.HttpURLConnection.getResponseCode(Unknown Source)\n    ... 54 more\nUnfortunately nothing is logged server side in any of the tomcat logs. I have spent days searching for a solution to the problem without success. I have tried to debug the problem through various avenues such as logging the SOAP request/response client side and server side using the  -Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true (client) and  -Dcom.sun.xml.ws.transport.http.HttpAdapter.dump=true(server) java system properties but when the error occurs only the Client side request is being logged:\n\n---[HTTP request - http://localhost:8080/CustomerOrderDM/services/CustomerOrderDMService]---\nAccept: text/xml, multipart/related\nContent-Type: text/xml; charset=utf-8\nSOAPAction: \"http://www.mycompany.com/CustomerOrderDMService/ImportDocument\"\nUser-Agent: JAX-WS RI 2.2.9-b130926.1035 svn-revision#5f6196f2b90e9460065a4c2f4e30e065b245e51e\n<?xml version=\"1.0\" ?><S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"><S:Body><ns3:ImportDocumentRequestDTO xmlns:ns3=\"http://www.mycompany.com/CustomerOrderDMService/\" xmlns:ns2=\"http://www.mycompany.com/CustomerOrderDMService\"><ns2:QuoteNumber>A000049</ns2:QuoteNumber><ns2:SerialNumber>STOCK</ns2:SerialNumber><ns2:DocumentType>Email</ns2:DocumentType><ns2:Description></ns2:Description><ns2:DocumentContents> **some base64 encoded byte[] of the file contents being uploaded**\n\nMessage has been truncated\nuse com.sun.xml.internal.ws.transport.http.HttpAdapter.dumpTreshold property to increase the amount of printed part of the message\n--------------------\nSince only the client side request is being logged we anticipate the server is not completely processing the request and it is falling into some kind of exception block, but without anything logging to the server log files we are having difficulties trouble shooting the problem.\n\nWe have tried using proxies such as the Monitoring built into Eclipse, but once again I only see the request from the client and no response from the server (when the client sends the larger requests that fail, small requests log request/response on both client and server). Other suggestions for debugging would be greatly appreciated.\n\nWe have also tried different combinations of Java and Tomcat:\n\nTomcat 7/Java 7 = Works\nTomcat 7/Java 8 = Works\nTomcat 8/Java 7 = Doesn't Work\nTomcat 8/Java 8 = Doesn't Work\nThis leads us to think that the issue is with Tomcat 8. Either something was changed in Tomcat 8 and we now need to set some new timeout/payload settings or Tomcat 8 has a bug related to this specific problem.\n\nWe have tried setting some of the Tomcat connector settings like maxPostSize=\"-1\", connectionTimeout=\"-1\", disableUploadTimeout=\"true\", connectionUploadTimeout=\"-1\", keepAliveTimeout=\"-1\" but none of these worked and honestly feel like a shot in the dark without knowing what is going on server side.\n\nWe have tried updating the Metro jars server side to the most recent release (jaxws-ri-2.2.10) as well as running the client using Java 8. Unfortunately none of these worked. Any help would be greatly appreciated."}, {"count": 1, "tags": [], "bug_id": 58686, "text": "There is nothing in this report that demonstrates a bug in Apache Tomcat.\n\nBugzilla is not a support forum.\n\nPlease use the Apache Tomcat users' mailing list for support. If that discussion concludes that there is a bug then this can be re-opened and the relevant details added.", "id": 186766, "time": "2015-12-03T14:16:58Z", "creator": "markt@apache.org", "creation_time": "2015-12-03T14:16:58Z", "is_private": false, "attachment_id": null}]
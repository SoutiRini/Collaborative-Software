[{"count": 0, "tags": [], "bug_id": 44212, "text": "I have an issue when instantiating a MethodGen from an existing (non-static) method instance. I'm \ntrying to copy a (non-static) method from one class to another class using BCEL. Specifically, I do:\n\nMethodGen newMethodGen = new MethodGen(originalMethod.getBCELMethod(), \nnewClassGen.getClassName(), newClassGen.getConstantPool());\n\nThis works nicely except for one issue; the 'this' variable in the local variable table points to the entry in \nthe CP representing the type of the originating class, and not the type of the class in which it is inserted \nin. \n\nI traced a bit in the BCEL code, and found that to start with during the instantiation process of the \nMethodGen class (in the constructor), the 'this' variable in the local variable table indeed points to the \ncorrect entry in the CP representing the type of the new class .. \n\nHowever, it appears that after the initial instantiation, the attributes of the provided originating method \noverrides the local variable table. Specifically, in the constructor (the lines 213-229) the local variable \ntable is deleted, and instead the local variable table of the provided original method is copied over.\n\nFrom the documentation I cannot tell if this is by design, but it does appear to be a bit confusing; \nspecifically, one can put a method into one class, but the 'this' variable points to another class. If this is \nby design, I would propose some exception throwing if the provided name of the class differs from \nclass used in the local variable table.\n\nNow we're at it .. invoking setClassName() on a MethodGen instance does also not make any changes to \nthe local variable table -- again making it possible to have this inconsistency.", "id": 112769, "time": "2008-01-11T09:27:23Z", "creator": "jesper.spring@epfl.ch", "creation_time": "2008-01-11T09:27:23Z", "is_private": false, "attachment_id": null}]
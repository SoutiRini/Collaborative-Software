[{"count": 0, "tags": [], "text": "The jar task which contains a nested zipgroupfileset element, and does not \nspecify an external manifest file, will always rebuild the jar file, even if \nit is up to date.  Apparently an internal manifiest file is constructed, and \nits date checked against that of the jar file, which will always be out of \ndate.   The following snipped is one that always builds the jar file, but it\nstarts behaving normally when I add an manifest parameter.\n\n<jar destfile=\"${outdir}/CountServer.jar\">\n    <zipfileset dir=\"${classdir}\" includes=\"**/*.class\"/>\n    <zipgroupfileset refid=\"libraries\"/>\n</jar>", "attachment_id": null, "id": 59529, "creator": "ken.corbin@hp.com", "time": "2004-06-18T21:45:36Z", "bug_id": 29683, "creation_time": "2004-06-18T21:45:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 29683, "attachment_id": null, "text": "It's still a problem, but my understanding of what was causing the problem was \nincorrect.   The problem happens when the zipgroupfileset element includes two \ndifferent jar files that have the same file at the same directory.   \nMANIFEST.MMF just happens to be the file this happens to most.", "id": 60609, "time": "2004-07-14T20:49:32Z", "creator": "ken.corbin@hp.com", "creation_time": "2004-07-14T20:49:32Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 29683, "attachment_id": null, "id": 116048, "time": "2008-04-30T02:41:55Z", "creator": "grnch@gmx.net", "creation_time": "2008-04-30T02:41:55Z", "is_private": false, "text": "Just a gentle reminder, this almost 4-year old bug is still present in 1.7.0, and it's really annoying to have to create workarounds with <uptodate> each time you need to use <zipgroupfileset>. Are there any plans to fix it?\n\nI tried to fix it myself, thinking that the timestamp check was simply missing for zipgroupfilesets, but unfortunately it looks like it's a bit more subtle than that and I quickly got lost in the code.\n"}, {"count": 3, "tags": [], "text": "This is not specific to zipfileset, it also happens with filesets having similar directory structures.\n\nFor example, considering this simple project layout:\n\n/src/main/foo/Bar.java\n/src/test/foo/BarTest.java\n\nThe following build file will always build the jar file:\n\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project name=\"Bug 29683 testcase\" default=\"jar\" basedir=\".\">\n  <target name=\"jar\">\n    <jar jarfile=\"foo.jar\">\n      <fileset dir=\"src/main\"/>\n      <fileset dir=\"src/test\"/>\n    </jar>\n  </target>\n</project>\n\nThis was verified on Windows XP with Ant 1.7.1 and Java 5", "attachment_id": null, "id": 120868, "creator": "ebourg@apache.org", "time": "2008-09-23T03:35:17Z", "bug_id": 29683, "creation_time": "2008-09-23T03:35:17Z", "is_private": false}, {"count": 4, "tags": [], "text": "Here is the trace when Ant is run with the -v option:\n\n[jar] foo omitted as C:\\anttest\\foo.jar:foo/ is up to date.\n[jar] foo\\Bar.java omitted as C:\\anttest\\foo.jar:foo/Bar.java is up to date.\n[jar] foo added as foo/ is outdated.\n[jar] foo\\BarTest.java omitted as C:\\anttest\\foo.jar:foo/BarTest.java is up to date.\n[jar] Building jar: C:\\anttest\\foo.jar\n[jar] adding directory META-INF/\n[jar] adding entry META-INF/MANIFEST.MF\n[jar] adding directory foo/\n[jar] adding entry foo/Bar.java\n[jar] adding entry foo/BarTest.java\n[jar] No Implementation-Title set.No Implementation-Version set.No Implementation-Vendor set.\n[jar] Location: C:\\anttest\\build.xml:6:\n\n\nThe foo directory in src/test is more recent than foo in src/main, that may explain why the task thinks it has been updated and rebuilds the jar. If the two fileset are inverted the jar is no longer rebuild.", "attachment_id": null, "id": 120870, "creator": "ebourg@apache.org", "time": "2008-09-23T03:45:37Z", "bug_id": 29683, "creation_time": "2008-09-23T03:45:37Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 29683, "attachment_id": null, "is_private": false, "id": 120873, "time": "2008-09-23T04:23:23Z", "creator": "ebourg@apache.org", "creation_time": "2008-09-23T04:23:23Z", "text": "Another workaround is to set the filesonly attribute to 'true' on the jar task:\n\n    <jar jarfile=\"foo.jar\" filesonly=\"true\">\n      <fileset dir=\"src/main\"/>\n      <fileset dir=\"src/test\"/>\n    </jar>\n"}, {"count": 6, "tags": [], "bug_id": 29683, "attachment_id": null, "text": "I known bug 45902 is way newer, but that one is currently actively tracked while this one has long been forgotten.\n\n*** This bug has been marked as a duplicate of bug 45902 ***", "id": 124471, "time": "2009-01-29T07:03:22Z", "creator": "bodewig@apache.org", "creation_time": "2009-01-29T07:03:22Z", "is_private": false}]
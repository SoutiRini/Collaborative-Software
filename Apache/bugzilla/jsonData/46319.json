[{"count": 0, "tags": [], "bug_id": 46319, "attachment_id": null, "id": 122969, "time": "2008-12-01T14:40:03Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-01T14:40:03Z", "is_private": false, "text": "After upgrading from fop 0.20.5 to fop 0.95 our web application crashes after generating about 15000 small size pdfs (max. 1-12 pages) with the following exception: (number of bytes varies)\n\nException java.lang.OutOfMemoryError: requested 65536000 bytes for GrET* in /BUILD_AREA/jdk1.5.0_10/hotspot/src/share/vm/utilities/growableArray.cpp. Out of swap space?\n\nBefore crashing used heap and process memory are growing slowly but continously. (USER_MEM_ARGS=\"-Xmx3072m -XX:PermSize=128m\")\n\nWe already tried using newest xalan/xerces libraries (from 2.7.1 xalan distribution) and also applied bug fix from  http://svn.apache.org/viewvc?view=rev&revision=698322 to our fop o.95 library, but this made no difference. And also using a fop trunk version built end of october did not help.\n\nProfiling results regarding potential memory leaks are not yet available."}, {"count": 1, "tags": [], "text": "I'm not sure this is a FOP problem. The error message says:\n\n> Exception java.lang.OutOfMemoryError: requested 65536000 bytes for GrET* in\n> /BUILD_AREA/jdk1.5.0_10/hotspot/src/share/vm/utilities/growableArray.cpp. Out\n> of swap space?\n\nIf the VM says it's out of swap space, it doesn't get enough memory from the operating system. Are you on a 32bit or 64 bit Linux? At any rate, I'd limit the maximum memory to 2GB (or less) for the moment and check what happens. Why did you give the JVM so much memory to begin with? Documents with up to 12 pages are not likely to need that amount of memory except maybe if you're trying to process huge images.\n\nYou say FOP is working in a web application. In that case it can make sense to limit the number of concurrent processing runs to a manageable level (also as a DDoS measure).\n\nThat said, I've made extensive memory usage tests for FOP 0.95 and detected no memory leaks. I'm inclined to close this issue as invalid unless you have additional information indicating a problem in FOP.", "attachment_id": null, "bug_id": 46319, "id": 122980, "time": "2008-12-01T23:54:00Z", "creator": "jeremias@apache.org", "creation_time": "2008-12-01T23:54:00Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46319, "attachment_id": null, "id": 122982, "time": "2008-12-02T00:38:19Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2008-12-02T00:38:19Z", "is_private": false, "text": "Jeremias,\n\nwhat about the memory leak in the property cache which you fixed in Trunk since 0.95, as detailed below:\n\nhttp://xmlgraphics.apache.org/fop/changes.html"}, {"count": 3, "tags": [], "bug_id": 46319, "attachment_id": 22972, "id": 122983, "time": "2008-12-02T00:52:24Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-02T00:52:24Z", "is_private": false, "text": "Created attachment 22972\ngrowing allocation area"}, {"count": 4, "tags": [], "bug_id": 46319, "attachment_id": null, "text": "The webapplication runs on 64 bit linux. The 3GB memory are needed to run about 300 parallel sessions with about 1000 request per minute, where as 10% are pdf requests and the rest http.\n\nWe already limit the maximum number of parallel fop requests by using a pool of 3 pfdTransformer objects.\n\nWe blame fop 0.95 to be problem cause because the application runs without problems when turning of the pdf requests or when using old fop 0.20.5 for pdf generation. \n\nI just started some investigations with profiler - it looks like a few kb (~2kB) of memory get lost per pdf. I hope the attached screenshot helps to find the potential problem cause.", "id": 122984, "time": "2008-12-02T00:53:00Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-02T00:53:00Z", "is_private": false}, {"count": 5, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "(In reply to comment #2)\n> Jeremias,\n> \n> what about the memory leak in the property cache which you fixed in Trunk since\n> 0.95, as detailed below:\n> \n> http://xmlgraphics.apache.org/fop/changes.html\n> \n\nRight, forgot about that one. I'm just not sure after all the changes in PropertyCache when memory leaks were introduced and when they were fixed again (looking at the log for that file shows we had quite a few attempts to get that right).", "id": 122986, "time": "2008-12-02T01:08:48Z", "bug_id": 46319, "creation_time": "2008-12-02T01:08:48Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "(In reply to comment #4)\n> The webapplication runs on 64 bit linux. The 3GB memory are needed to run about\n> 300 parallel sessions with about 1000 request per minute, where as 10% are pdf\n> requests and the rest http.\n> \n> We already limit the maximum number of parallel fop requests by using a pool of\n> 3 pfdTransformer objects.\n> \n> We blame fop 0.95 to be problem cause because the application runs without\n> problems when turning of the pdf requests or when using old fop 0.20.5 for pdf\n> generation. \n> \n> I just started some investigations with profiler - it looks like a few kb\n> (~2kB) of memory get lost per pdf. I hope the attached screenshot helps to find\n> the potential problem cause.\n> \n\nI'm afraid, I can't read anything out of this screenshot. When we fixed the property cache problems, http://www.alphaworks.ibm.com/tech/heapanalyzer was very handy to analyze head dumps and find the leaks.\n\nAnyway, there's still that strange OutOfMemoryError which I've never seen myself before. Maybe you're seeing two different problems here. I would still check what happens if you lower the max heap setting (if the OutOfMemoryError changes, it's an indicator). And if the OutOfMemoryError persists it can make sense to see if the problem goes away if you use FOP Trunk instead. You can also try to backport the property cache fix to the 0.95 branch but that could be a bit of work.\n", "id": 122987, "time": "2008-12-02T01:19:29Z", "bug_id": 46319, "creation_time": "2008-12-02T01:19:29Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 46319, "is_private": false, "text": "Reducing heap size did not help - the application died just the same way but much earlier.\n\nTest with fop.jar from trunk is currently running - does not look very promising according to heap figures.\n\nI could not find a bug number with the property cache leak fix - is there another way than svn history browsing to find out what was changed for this fix?\n\nProfiling shows me a growing number of allocations of the following class:\norg.apache.fop.fo.flow.Marker$MarkerAttribute \nAlthough the instances seem to be referenced from java.util.WeakHashMap only they don't get garbage collected. What are these Marker classes used for and when should they be released again? Is there a way to force their release?", "id": 123015, "time": "2008-12-02T14:03:01Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-02T14:03:01Z", "attachment_id": null}, {"count": 8, "attachment_id": 22984, "bug_id": 46319, "text": "Created attachment 22984\nheap walker incoming references to marker attributes\n\nAllocation call tree is according to attachment 22972", "id": 123016, "time": "2008-12-02T14:14:03Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-02T14:14:03Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 46319, "attachment_id": null, "text": "(In reply to comment #7)\n> \n> Profiling shows me a growing number of allocations of the following class:\n> org.apache.fop.fo.flow.Marker$MarkerAttribute \n> Although the instances seem to be referenced from java.util.WeakHashMap only\n> they don't get garbage collected. \n\nOuch! Ugly one. Seems to be a classic mistake, again... Since the instances are used both as key and value, they are never released and the map keeps growing. \n\n> What are these Marker classes used for and when should they be released again?\n\nFor attributes of fo:markers. They should be released as soon as they are no longer referenced.\n\n> Is there a way to force their release? \n\nQuick fix would be to modify the code, at line 381 in Marker, and change it to:\n\nattributeCache.put(new java.lang.ref.WeakReference(newInstance), newInstance);", "id": 123017, "time": "2008-12-02T15:18:33Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-02T15:18:33Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 46319, "attachment_id": null, "id": 123018, "time": "2008-12-02T15:37:53Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-02T15:37:53Z", "is_private": false, "text": "(In reply to comment #9)\n> (In reply to comment #7)\n> > Is there a way to force their release? \n> \n> Quick fix would be to modify the code, at line 381 in Marker, and change it to:\n> \n> attributeCache.put(new java.lang.ref.WeakReference(newInstance), newInstance);\n> \n\nCome to think of it, since it was mentioned as a possible cause, the better solution may precisely be to use the PropertyCache here. If MarkerAttribute is made public, then PropertyCache can expose a specialized fetch() for it. In the end, internally, PropertyCache deals with Object, so can be used to serve any type. Given that MarkerAttribute can also be classified as a property-related class, it seems appropriate enough...\n"}, {"count": 11, "tags": [], "bug_id": 46319, "text": "\nSorry, just realized the proposed quick-fix is bogus :/\n\nOTOH, changing the MarkerAttributes to use the PropertyCache is relatively simple too... I'll try to attach a patch ASAP.\n", "id": 123019, "time": "2008-12-02T16:22:39Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-02T16:22:39Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 46319, "attachment_id": null, "text": "(In reply to comment #11)\n> Sorry, just realized the proposed quick-fix is bogus :/\n> OTOH, changing the MarkerAttributes to use the PropertyCache is relatively\n> simple too... I'll try to attach a patch ASAP.\n\nDue to having a project deadline of end of this week to revert back to fop 0.20.5, if problem is not solved til then, I'd very much appreciate to get a patch very fast. An estimate how many days ASAP may take would be very helpful. \n\n", "id": 123032, "time": "2008-12-03T02:54:58Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-03T02:54:58Z", "is_private": false}, {"count": 13, "tags": [], "text": "\nI already did most of it yesterday night, but it was a bit too late to be able to trust myself ;-)\nI'll run some tests, and if all goes well, I'll post it later tonight.\n\n", "attachment_id": null, "bug_id": 46319, "id": 123053, "time": "2008-12-03T10:47:46Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-03T10:47:46Z", "is_private": false}, {"count": 14, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "text": "(In reply to comment #13)\n> I already did most of it yesterday night, but it was a bit too late to be able\n> to trust myself ;-)\n> I'll run some tests, and if all goes well, I'll post it later tonight.\n> \n\n*sigh* seems like it would take slightly longer to confirm that nothing breaks, since I've contaminated my sandbox (working on inline-space-resolution...) Due to this unfinished work, the test-suite fails on my end.\n\nNormally, the patch following shortly should resolve your issue. I'd appreciate if you could confirm that it does.\n\n", "id": 123055, "time": "2008-12-03T11:32:21Z", "bug_id": 46319, "creation_time": "2008-12-03T11:32:21Z", "is_private": false}, {"count": 15, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": 22987, "text": "Created attachment 22987\nPatch that should fix the leaking of Marker$MarkerAttribute (not confirmed)", "id": 123056, "time": "2008-12-03T11:35:05Z", "bug_id": 46319, "creation_time": "2008-12-03T11:35:05Z", "is_private": false}, {"count": 16, "tags": [], "text": "Thanks a lot - the patch seems to work. At least I can't spot any leak anymore in the marker area.\n\nI don't like the idea of going live with a trunk fop version. Would there be a chance to apply this patch to 0.95 source and would this also require to take over the fix for property cache memory leak from jeremias according to comment #5?", "is_private": false, "bug_id": 46319, "id": 123078, "time": "2008-12-04T05:48:07Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-04T05:48:07Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 46319, "attachment_id": null, "text": "(In reply to comment #16)\n> Thanks a lot - the patch seems to work. At least I can't spot any leak anymore\n> in the marker area.\n> \n> I don't like the idea of going live with a trunk fop version. Would there be a\n> chance to apply this patch to 0.95 source and would this also require to take\n> over the fix for property cache memory leak from jeremias according to comment\n> #5?\n\nI think so, yes. You could apply those patches to 0.95 with the same effect (only the line-numbers will be slightly off, due to other changes in FOP Trunk)\nTo be entirely complete, you'll probably have to include some other commits as well. After the release of 0.95, caching has also been applied to some other property-related classes (org.apache.fop.fo.properties.CommonBorderPaddingBackground being the most notable).\n\nI'll look up the exact commit for the fix of the leak in PropertyCache, and will post it here when found.", "id": 123085, "time": "2008-12-04T09:54:30Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-04T09:54:30Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 46319, "text": "(In reply to comment #17)\n> \n> I'll look up the exact commit for the fix of the leak in PropertyCache, and\n> will post it here when found.\n> \n\nThat was easy. The last commit made to that class was three months ago, and contained the fix in question, see:\n\nhttp://svn.apache.org/viewvc/xmlgraphics/fop/trunk/src/java/org/apache/fop/fo/properties/PropertyCache.java?view=log\n\n", "id": 123086, "time": "2008-12-04T10:32:53Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-04T10:32:53Z", "is_private": false, "attachment_id": null}, {"count": 19, "attachment_id": null, "creator": "adrian.meyer@crealogix.com", "is_private": false, "id": 123121, "time": "2008-12-05T07:23:26Z", "bug_id": 46319, "creation_time": "2008-12-05T07:23:26Z", "tags": [], "text": "(In reply to comment #18)\n> (In reply to comment #17)\n> > \n> > I'll look up the exact commit for the fix of the leak in PropertyCache, and\n> > will post it here when found.\n> > \n> That was easy. The last commit made to that class was three months ago, and\n> contained the fix in question, see:\n> \nNo - it wasn't that easy due to 0.95 src having been branched already end of last year. So a few more revisions and files had to be taken into account.\n\ndiff with all the changes applied to 0.95 source will be added on Monday (if it proves to be working til then) "}, {"count": 20, "attachment_id": 23001, "creator": "adrian.meyer@crealogix.com", "is_private": false, "id": 123157, "time": "2008-12-08T02:11:45Z", "bug_id": 46319, "creation_time": "2008-12-08T02:11:45Z", "tags": [], "text": "Created attachment 23001\nTrunk patches applied to 0.95 source\n\nIncludes following bug fixes\n- patch from current issue\n- PropertyCache memory leak fix\n- Memory leak in XMLWhiteSpaceHandler (http://svn.apache.org/viewvc?view=rev&revision=698322)\n- (not memory leak) fix StackOverflow on TableColumn (issue 45862)"}, {"count": 21, "tags": [], "bug_id": 46319, "text": "test with patched 0.95 version run ok for more than 60 hours - no more leak detected.\n\nBest thanks once again for quickly solving this issue. ", "id": 123158, "time": "2008-12-08T02:19:47Z", "creator": "adrian.meyer@crealogix.com", "creation_time": "2008-12-08T02:19:47Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 46319, "text": "(In reply to comment #21)\n> test with patched 0.95 version run ok for more than 60 hours - no more leak\n> detected.\n> \n> Best thanks once again for quickly solving this issue. \n\nOK, thanks for the confirmation. \nRemaining patch, to fix the MarkerAttribute leak, applied to FOP Trunk with r724444.\n\nThanks also for providing the patch to the 0.95 branch. I'm not going to applying it myself, but it could prove of use to others.", "id": 123179, "time": "2008-12-08T10:59:51Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-08T10:59:51Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155611, "time": "2012-04-01T06:31:05Z", "bug_id": 46319, "creation_time": "2012-04-01T06:31:05Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "creator": "yegor@dinom.ru", "is_private": false, "id": 77183, "time": "2005-07-11T15:29:45Z", "bug_id": 35687, "creation_time": "2005-07-11T15:29:45Z", "tags": [], "text": " "}, {"count": 1, "tags": [], "bug_id": 35687, "attachment_id": 15646, "id": 77184, "time": "2005-07-11T15:30:22Z", "creator": "yegor@dinom.ru", "creation_time": "2005-07-11T15:30:22Z", "is_private": false, "text": "Created attachment 15646\nRecordFactory added to instanciate pp records"}, {"count": 2, "tags": [], "bug_id": 35687, "is_private": false, "text": "Created attachment 15647\ncvs diff for the previously attached jar\n\ncvs diff for the previously attached jar", "id": 77185, "time": "2005-07-11T15:52:16Z", "creator": "yegor@dinom.ru", "creation_time": "2005-07-11T15:52:16Z", "attachment_id": 15647}, {"count": 3, "tags": [], "text": "Is this an improvement on the new record instantiation code I committed on\nFriday? It looks like a slight step back to me, since it has two places\nrecording the types, RecordType+RecordFactory, while my new code only has the\none (RecordType)", "attachment_id": null, "bug_id": 35687, "id": 77256, "time": "2005-07-13T15:05:28Z", "creator": "apache@gagravarr.org", "creation_time": "2005-07-13T15:05:28Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "yegor@dinom.ru", "is_private": false, "id": 77258, "time": "2005-07-13T15:18:38Z", "bug_id": 35687, "creation_time": "2005-07-13T15:18:38Z", "tags": [], "text": "(In reply to comment #3)\n> Is this an improvement on the new record instantiation code I committed on\n> Friday? It looks like a slight step back to me, since it has two places\n> recording the types, RecordType+RecordFactory, while my new code only has the\n> one (RecordType)\n\nYes, it is an improvement. We shouldn't put all eggs in one basket. RecordTypes \nshould be simple. It's just a map of record ID and Name. RecordFactory is \nresponsible for the new record instantiation. Such design keeps things simple \nand more object oriented. It is not a step back at all.\n"}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "text": "I consider it a step back, because there's a lot of duplication in your design.\nRather than have on class hold the triplet of name+type+class, you end up\nduplicating information across two classes. It makes it harder to follow, and\nincreases the chances of mistakes/inconsistencies/confusion.\n\nPersonally, I find one long list in one place much simpler than two half\nduplicated lists in two places...\n\nIt might not be purest OO, but I find it a more pragmatic design!", "id": 77260, "time": "2005-07-13T15:36:43Z", "bug_id": 35687, "creation_time": "2005-07-13T15:36:43Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> I consider it a step back, because there's a lot of duplication in your \ndesign.\n> Rather than have on class hold the triplet of name+type+class, you end up\n> duplicating information across two classes. It makes it harder to follow, and\n> increases the chances of mistakes/inconsistencies/confusion.\n> Personally, I find one long list in one place much simpler than two half\n> duplicated lists in two places...\n> It might not be purest OO, but I find it a more pragmatic design!\n\nThere is no duplication. There are two objects and which of them is responsible \nfor the specific functionality. RecordTypes is needed only to map ID and Name. \nThat'all. Consider it as final class. It is not meant to be modified. \nRecordFactory is responsible for the instantiation. When you create a new class \nwhich extents Record you will have to register it there, not in RecordTypes! \n\nAlso  I think we should follow object oriented design. It's going to be a big \nproject and we must do it right. What seems pragmatic to you now can be a pain \nvery soon!. \n", "attachment_id": null, "id": 77261, "creator": "yegor@dinom.ru", "time": "2005-07-13T15:51:40Z", "bug_id": 35687, "creation_time": "2005-07-13T15:51:40Z", "is_private": false}, {"count": 7, "tags": [], "text": "It depends on if you consider things at just the java object level, or at the\noverall object level.\n\nThere is a record \"entity\". For every kind of powerpoint record, we have an\n\"entity\". This entity contains details of the type, the name, and the\nimplementing class. I don't want to duplicate any of that information, hence my\ndesire to put all the parts of that entity into one file.\n\nYour scheme puts one pair (type+name) from the entity into on file, and another\n(type+class) into another. There is duplication of \"type\" across two files, and\nduplication isn't great.\n\nI much prefere keeping the whole of the record's \"entity\" details in one class,\nor failing that in just one file. If we did go down the two class route, I think\nit would be via two auto-generated classes from one master meta-file, which\ncontained the tripplet of details for each record.", "attachment_id": null, "id": 77263, "creator": "apache@gagravarr.org", "time": "2005-07-13T16:45:20Z", "bug_id": 35687, "creation_time": "2005-07-13T16:45:20Z", "is_private": false}, {"count": 8, "tags": [], "text": "Fixed long time ago.", "attachment_id": null, "id": 147444, "creator": "yegor@dinom.ru", "time": "2011-06-24T10:01:57Z", "bug_id": 35687, "creation_time": "2011-06-24T10:01:57Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 22737, "text": "Similar if not the same as Bug 22701\n\nSimilar to http://www.mail-archive.com/tomcat-\nuser@jakarta.apache.org/msg101022.html\n\nNON-SSL works fine, http\n\nI have not found a workaround for this problem. When I use https://, tomcat \ncrashes at ramdom times, there are no patterns to the problem.  Do I need to \nset a paramenter in the config file to get SSL to work without that \nLogConfigurationException. Should I use a different version of Tomcat?\n\nAug 26, 2003 3:41:08 PM org.apache.coyote.http11.Http11Protocol$Http11Connection\nHandler processConnection\nSEVERE: Error reading request, ignored\norg.apache.commons.logging.LogConfigurationException: org.apache.commons.logging\n.LogConfigurationException: org.apache.commons.logging.LogConfigurationException\n: Class org.apache.commons.logging.impl.Jdk14Logger does not implement Log\n        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactory\nImpl.java:532)\n        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactory\nImpl.java:272)\n        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactory\nImpl.java:246)\n        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:395)\n        at org.apache.tomcat.util.net.jsse.JSSESupport.<init>(JSSESupport.java:8\n7)\n        at org.apache.tomcat.util.net.jsse.JSSE14Support.<init>(JSSE14Support.ja\nva:99)\n        at org.apache.tomcat.util.net.jsse.JSSE14Factory.getSSLSupport(JSSE14Fac\ntory.java:84)\n        at org.apache.tomcat.util.net.jsse.JSSEImplementation.getSSLSupport(JSSE\nImplementation.java:118)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.proce\nssConnection(Http11Protocol.java:385)\n        at org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java\n:565)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadP\nool.java:619)\n        at java.lang.Thread.run(Thread.java:536)\nCaused by: org.apache.commons.logging.LogConfigurationException: org.apache.comm\nons.logging.LogConfigurationException: Class org.apache.commons.logging.impl.Jdk\n14Logger does not implement Log\n        at org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor(LogF\nactoryImpl.java:416)\n        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactory\nImpl.java:525)\n        ... 11 more\nCaused by: org.apache.commons.logging.LogConfigurationException: Class org.apach\ne.commons.logging.impl.Jdk14Logger does not implement Log\n        at org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor(LogF\nactoryImpl.java:412)\n        ... 12 more\n\nConfig file:\n<!-- Example Server Configuration File -->\n<!-- Note that component elements are nested corresponding to their\n     parent-child relationships with each other -->\n\n<!-- A \"Server\" is a singleton element that represents the entire JVM,\n     which may contain one or more \"Service\" instances.  The Server\n     listens for a shutdown command on the indicated port.\n\n     Note:  A \"Server\" is not itself a \"Container\", so you may not\n     define subcomponents such as \"Valves\" or \"Loggers\" at this level.\n -->\n\n<Server port=\"8005\" shutdown=\"SHUTDOWN\" debug=\"0\">\n\n\n  <!-- Uncomment these entries to enable JMX MBeans support -->\n  <Listener className=\"org.apache.catalina.mbeans.ServerLifecycleListener\"\n            debug=\"0\"/>\n  <Listener \nclassName=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"\n            debug=\"0\"/>\n\n  <!-- Global JNDI resources -->\n  <GlobalNamingResources>\n\n    <!-- Test entry for demonstration purposes -->\n    <Environment name=\"simpleValue\" type=\"java.lang.Integer\" value=\"30\"/>\n\n    <!-- Editable user database that can also be used by\n         UserDatabaseRealm to authenticate users -->\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n       description=\"User database that can be updated and saved\">\n    </Resource>\n    <ResourceParams name=\"UserDatabase\">\n      <parameter>\n        <name>factory</name>\n        <value>org.apache.catalina.users.MemoryUserDatabaseFactory</value>\n      </parameter>\n      <parameter>\n        <name>pathname</name>\n        <value>conf/tomcat-users.xml</value>\n      </parameter>\n    </ResourceParams>\n\n  </GlobalNamingResources>\n\n  <!-- A \"Service\" is a collection of one or more \"Connectors\" that share\n       a single \"Container\" (and therefore the web applications visible\n       within that Container).  Normally, that Container is an \"Engine\",\n       but this is not required.\n\n       Note:  A \"Service\" is not itself a \"Container\", so you may not\n       define subcomponents such as \"Valves\" or \"Loggers\" at this level.\n   -->\n\n  <!-- Define the Tomcat Stand-Alone Service -->\n  <Service name=\"Tomcat-Standalone\">\n\n    <!-- A \"Connector\" represents an endpoint by which requests are received\n         and responses are returned.  Each Connector passes requests on to the\n         associated \"Container\" (normally an Engine) for processing.\n\n         By default, a non-SSL HTTP/1.1 Connector is established on port 8080.\n         You can also enable an SSL HTTP/1.1 Connector on port 8443 by\n         following the instructions below and uncommenting the second Connector\n         entry.  SSL support requires the following steps (see the SSL Config\n         HOWTO in the Tomcat 4.0 documentation bundle for more detailed\n         instructions):\n         * Download and install JSSE 1.0.2 or later, and put the JAR files\n           into \"$JAVA_HOME/jre/lib/ext\".\n         * Execute:\n             %JAVA_HOME%\\bin\\keytool -genkey -alias tomcat -keyalg RSA (Windows)\n             $JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA  (Unix)\n           with a password value of \"changeit\" for both the certificate and\n           the keystore itself.\n\n         By default, DNS lookups are enabled when a web application calls\n         request.getRemoteHost().  This can have an adverse impact on\n         performance, so you can disable it by setting the\n         \"enableLookups\" attribute to \"false\".  When DNS lookups are disabled,\n         request.getRemoteHost() will return the String version of the\n         IP address of the remote client.\n    -->\n\n    <!-- Define a non-SSL Coyote HTTP/1.1 Connector on port 8080 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\nport=\"8080\"               minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"443\"\n               acceptCount=\"100\" debug=\"0\" connectionTimeout=\"20000\"\n               useURIValidationHack=\"false\" disableUploadTimeout=\"true\" />\n    <!-- Note : To disable connection timeouts, set connectionTimeout value \n     to -1 -->\n\n    <!-- Define a SSL Coyote HTTP/1.1 Connector on port 443 -->\n   \n<Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"443\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\"\n\t       acceptCount=\"100\" debug=\"0\" scheme=\"https\" secure=\"true\"\n               useURIValidationHack=\"false\" disableUploadTimeout=\"true\">\n      <Factory className=\"org.apache.coyote.tomcat4.CoyoteServerSocketFactory\"\n               clientAuth=\"false\" protocol=\"TLS\" \nkeystoreFile=\"C:\\newreq\\osa.keystore\" \nkeystorePass=\"n/a\"/>\n    </Connector>\n\n    <!-- Define a Coyote/JK2 AJP 1.3 Connector on port 8009 -->\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"8443\"\n               acceptCount=\"10\" debug=\"0\" connectionTimeout=\"20000\"\n               useURIValidationHack=\"false\"\n               protocolHandlerClassName=\"org.apache.jk.server.JkCoyoteHandler\"/>\n\n    <!-- Define an AJP 1.3 Connector on port 8009 -->\n    <!--\n    <Connector className=\"org.apache.ajp.tomcat4.Ajp13Connector\"\n               port=\"8009\" minProcessors=\"5\" maxProcessors=\"75\"\n               acceptCount=\"10\" debug=\"0\"/>\n    -->\n\n    <!-- Define a Proxied HTTP/1.1 Connector on port 8082 -->\n    <!-- See proxy documentation for more information about using this. -->\n    <!--\n    <Connector className=\"org.apache.coyote.tomcat4.CoyoteConnector\"\n               port=\"8082\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" disableUploadTimeout=\"true\"\n               acceptCount=\"100\" debug=\"0\" connectionTimeout=\"20000\"\n               proxyPort=\"80\" useURIValidationHack=\"false\" />\n    -->\n\n    <!-- Define a non-SSL legacy HTTP/1.1 Test Connector on port 8083 -->\n    <!--\n    <Connector className=\"org.apache.catalina.connector.http.HttpConnector\"\n               port=\"8083\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"443\"\n               acceptCount=\"10\" debug=\"0\" />\n    -->\n\n    <!-- Define a non-SSL HTTP/1.0 Test Connector on port 8084 -->\n    <!--\n    <Connector className=\"org.apache.catalina.connector.http10.HttpConnector\"\n               port=\"8084\" minProcessors=\"5\" maxProcessors=\"75\"\n               enableLookups=\"true\" redirectPort=\"443\"\n               acceptCount=\"10\" debug=\"0\" />\n    -->\n\n    <!-- An Engine represents the entry point (within Catalina) that processes\n         every request.  The Engine implementation for Tomcat stand alone\n         analyzes the HTTP headers included with the request, and passes them\n         on to the appropriate Host (virtual host). -->\n\n    <!-- Define the top level container in our container hierarchy -->\n    <Engine name=\"Standalone\" defaultHost=\"localhost\" debug=\"0\">\n\n      <!-- The request dumper valve dumps useful debugging information about\n           the request headers and cookies that were received, and the response\n           headers and cookies that were sent, for all requests received by\n           this instance of Tomcat.  If you care only about requests to a\n           particular virtual host, or a particular application, nest this\n           element inside the corresponding <Host> or <Context> entry instead.\n\n           For a similar mechanism that is portable to all Servlet 2.3\n           containers, check out the \"RequestDumperFilter\" Filter in the\n           example application (the source for this filter may be found in\n           \"$CATALINA_HOME/webapps/examples/WEB-INF/classes/filters\").\n\n           Request dumping is disabled by default.  Uncomment the following\n           element to enable it. -->\n      <!--\n      <Valve className=\"org.apache.catalina.valves.RequestDumperValve\"/>\n      -->\n\n      <!-- Global logger unless overridden at lower levels -->\n      <Logger className=\"org.apache.catalina.logger.FileLogger\"\n              prefix=\"catalina_log.\" suffix=\".txt\"\n              timestamp=\"true\"/>\n\n      <!-- Because this Realm is here, an instance will be shared globally -->\n\n      <!-- This Realm uses the UserDatabase configured in the global JNDI\n           resources under the key \"UserDatabase\".  Any edits\n           that are performed against this UserDatabase are immediately\n           available for use by the Realm.  -->\n      <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                 debug=\"0\" resourceName=\"UserDatabase\"/>\n\n      <!-- Comment out the old realm but leave here for now in case we\n           need to go back quickly -->\n      <!--\n      <Realm className=\"org.apache.catalina.realm.MemoryRealm\" />\n      -->\n\n      <!-- Replace the above Realm with one of the following to get a Realm\n           stored in a database and accessed via JDBC -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"org.gjt.mm.mysql.Driver\"\n          connectionURL=\"jdbc:mysql://localhost/authority\"\n         connectionName=\"test\" connectionPassword=\"test\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"oracle.jdbc.driver.OracleDriver\"\n          connectionURL=\"jdbc:oracle:thin:@ntserver:1521:ORCL\"\n         connectionName=\"scott\" connectionPassword=\"tiger\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!--\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n             driverName=\"sun.jdbc.odbc.JdbcOdbcDriver\"\n          connectionURL=\"jdbc:odbc:CATALINA\"\n              userTable=\"users\" userNameCol=\"user_name\" userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" roleNameCol=\"role_name\" />\n      -->\n\n      <!-- Define the default virtual host -->\n      <Host name=\"localhost\" debug=\"0\" appBase=\"webapps\" \n       unpackWARs=\"true\" autoDeploy=\"true\">\n\n        <!-- Normally, users must authenticate themselves to each web app\n             individually.  Uncomment the following entry if you would like\n             a user to be authenticated the first time they encounter a\n             resource protected by a security constraint, and then have that\n             user identity maintained across *all* web applications contained\n             in this virtual host. -->\n        <!--\n        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\"\n                   debug=\"0\"/>\n        -->\n\n        <!-- Access log processes all requests for this virtual host.  By\n             default, log files are created in the \"logs\" directory relative to\n             $CATALINA_HOME.  If you wish, you can specify a different\n             directory with the \"directory\" attribute.  Specify either a \nrelative\n             (to $CATALINA_HOME) or absolute path to the desired directory.\n        -->\n        <!--\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\"\n                 directory=\"logs\"  prefix=\"localhost_access_log.\" suffix=\".txt\"\n                 pattern=\"common\" resolveHosts=\"false\"/>\n        -->\n\n        <!-- Logger shared by all Contexts related to this virtual host.  By\n             default (when using FileLogger), log files are created in \nthe \"logs\"\n             directory relative to $CATALINA_HOME.  If you wish, you can specify\n             a different directory with the \"directory\" attribute.  Specify \neither a\n             relative (to $CATALINA_HOME) or absolute path to the desired\n             directory.-->\n        <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                 directory=\"logs\"  prefix=\"localhost_log.\" suffix=\".txt\"\n\t        timestamp=\"true\"/>\n\n        <!-- Define properties for each web application.  This is only needed\n             if you want to set non-default properties, or have web application\n             document roots in places other than the virtual host's appBase\n             directory.  -->\n\n        <!-- Tomcat Root Context -->\n        <!--\n          <Context path=\"\" docBase=\"ROOT\" debug=\"0\"/>\n        -->\n\n        <!-- Tomcat Examples Context -->\n        <Context path=\"/examples\" docBase=\"examples\" debug=\"0\"\n                 reloadable=\"true\" crossContext=\"true\">\n          <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                     prefix=\"localhost_examples_log.\" suffix=\".txt\"\n        \t  timestamp=\"true\"/>\n          <Ejb   name=\"ejb/EmplRecord\" type=\"Entity\"\n                 home=\"com.wombat.empl.EmployeeRecordHome\"\n               remote=\"com.wombat.empl.EmployeeRecord\"/>\n\n          <!-- If you wanted the examples app to be able to edit the\n               user database, you would uncomment the following entry.\n               Of course, you would want to enable security on the\n               application as well, so this is not done by default!\n               The database object could be accessed like this:\n\n               Context initCtx = new InitialContext();\n               Context envCtx = (Context) initCtx.lookup(\"java:comp/env\");\n               UserDatabase database =\n                    (UserDatabase) envCtx.lookup(\"userDatabase\");\n          -->\n<!--\n          <ResourceLink name=\"userDatabase\" global=\"UserDatabase\"\n                        type=\"org.apache.catalina.UserDatabase\"/>\n-->\n\n\n          <!-- PersistentManager: Uncomment the section below to test \nPersistent \n\t\t       Sessions.\n                         \n               saveOnRestart: If true, all active sessions will be saved\n                 to the Store when Catalina is shutdown, regardless of\n                 other settings. All Sessions found in the Store will be \n                 loaded on startup. Sessions past their expiration are\n                 ignored in both cases.\n               maxActiveSessions: If 0 or greater, having too many active \n                 sessions will result in some being swapped out. minIdleSwap\n                 limits this. -1 means unlimited sessions are allowed.\n                 0 means sessions will almost always be swapped out after\n                 use - this will be noticeably slow for your users.\n               minIdleSwap: Sessions must be idle for at least this long\n                 (in seconds) before they will be swapped out due to \n               maxActiveSessions. This avoids thrashing when the site is \n                 highly active. -1 or 0 means there is no minimum - sessions\n                 can be swapped out at any time.\n               maxIdleSwap: Sessions will be swapped out if idle for this\n                 long (in seconds). If minIdleSwap is higher, then it will\n                 override this. This isn't exact: it is checked periodically.\n                 -1 means sessions won't be swapped out for this reason,\n                 although they may be swapped out for maxActiveSessions.\n                 If set to >= 0, guarantees that all sessions found in the\n                 Store will be loaded on startup.\n               maxIdleBackup: Sessions will be backed up (saved to the Store,\n                 but left in active memory) if idle for this long (in seconds), \n                 and all sessions found in the Store will be loaded on startup.\n                 If set to -1 sessions will not be backed up, 0 means they\n                 should be backed up shortly after being used.\n\n               To clear sessions from the Store, set maxActiveSessions, \nmaxIdleSwap,\n               and minIdleBackup all to -1, saveOnRestart to false, then \nrestart \n               Catalina.\n          -->\n\t\t  <!--\n          <Manager className=\"org.apache.catalina.session.PersistentManager\"\n              debug=\"0\"\n              saveOnRestart=\"true\"\n              maxActiveSessions=\"-1\"\n              minIdleSwap=\"-1\"\n              maxIdleSwap=\"-1\"\n              maxIdleBackup=\"-1\">\n                <Store className=\"org.apache.catalina.session.FileStore\"/>\n          </Manager>\n\t\t  -->\n          <Environment name=\"maxExemptions\" type=\"java.lang.Integer\"\n                      value=\"15\"/>\n          <Parameter name=\"context.param.name\" value=\"context.param.value\"\n                     override=\"false\"/>\n          <Resource name=\"jdbc/EmployeeAppDb\" auth=\"SERVLET\"\n                    type=\"javax.sql.DataSource\"/>\n          <ResourceParams name=\"jdbc/EmployeeAppDb\">\n            <parameter><name>user</name><value>sa</value></parameter>\n            <parameter><name>password</name><value></value></parameter>\n            <parameter><name>driverClassName</name>\n              <value>org.hsql.jdbcDriver</value></parameter>\n            <parameter><name>driverName</name>\n              <value>jdbc:HypersonicSQL:database</value></parameter>\n          </ResourceParams>\n          <Resource name=\"mail/Session\" auth=\"Container\"\n                    type=\"javax.mail.Session\"/>\n          <ResourceParams name=\"mail/Session\">\n            <parameter>\n              <name>mail.smtp.host</name>\n              <value>localhost</value>\n            </parameter>\n          </ResourceParams>\n          <ResourceLink name=\"linkToGlobalResource\" \n                    global=\"simpleValue\"\n                    type=\"java.lang.Integer\"/>\n        </Context>\n\n      </Host>\n\n    </Engine>\n\n  </Service>\n\n  <!-- The MOD_WEBAPP connector is used to connect Apache 1.3 with Tomcat 4.0\n       as its servlet container. Please read the README.txt file coming with\n       the WebApp Module distribution on how to build it.\n       (Or check out the \"jakarta-tomcat-connectors/webapp\" CVS repository)\n\n       To configure the Apache side, you must ensure that you have the\n       \"ServerName\" and \"Port\" directives defined in \"httpd.conf\".  Then,\n       lines like these to the bottom of your \"httpd.conf\" file:\n\n         LoadModule webapp_module libexec/mod_webapp.so\n         WebAppConnection warpConnection warp localhost:8008\n         WebAppDeploy examples warpConnection /examples/\n\n       The next time you restart Apache (after restarting Tomcat, if needed)\n       the connection will be established, and all applications you make\n       visible via \"WebAppDeploy\" directives can be accessed through Apache.\n  -->\n\n  <!-- Define an Apache-Connector Service -->\n<!--\n  <Service name=\"Tomcat-Apache\">\n\n    <Connector className=\"org.apache.catalina.connector.warp.WarpConnector\"\n     port=\"8008\" minProcessors=\"5\" maxProcessors=\"75\"\n     enableLookups=\"true\" appBase=\"webapps\"\n     acceptCount=\"10\" debug=\"0\"/>\n\n    <Engine className=\"org.apache.catalina.connector.warp.WarpEngine\"\n     name=\"Apache\" debug=\"0\">\n\n      <Logger className=\"org.apache.catalina.logger.FileLogger\"\n              prefix=\"apache_log.\" suffix=\".txt\"\n              timestamp=\"true\"/>\n\n      <Realm className=\"org.apache.catalina.realm.MemoryRealm\" />\n\n    </Engine>\n\n  </Service>\n-->\n\n</Server>", "id": 43341, "time": "2003-08-26T20:58:26Z", "creator": "salcedo@osa.sunysb.edu", "creation_time": "2003-08-26T20:58:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 22737, "text": "Also the same as bug 16189", "id": 43777, "time": "2003-09-05T22:56:17Z", "creator": "richardc@bifco.com", "creation_time": "2003-09-05T22:56:17Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "remm@apache.org", "text": "Please don't file duplicates, esp if you say it is a duplicate in the description.\n\n*** This bug has been marked as a duplicate of 22701 ***", "id": 43788, "time": "2003-09-06T08:13:41Z", "bug_id": 22737, "creation_time": "2003-09-06T08:13:41Z", "is_private": false, "attachment_id": null}]
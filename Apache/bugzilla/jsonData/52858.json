[{"count": 0, "tags": [], "bug_id": 52858, "attachment_id": null, "text": "How to reproduce:\nTomcat with the NIO connector, using HTTPS scheme, when a client requests for\nsome quite a big (~100K-200K) static file, and breaks the connection\nunexpectedly.\nHere is the python script to reproduce the problem:\n\n# The way to reproduce the bug in the Tomcat NIO connector.\n# Install python-iptables from https://github.com/ldx/python-iptables/downloads\n# Author: Dmitry Kukushkin (dmitry.kukushkin at external.telekom.de)\nfrom threading import Thread\nfrom threading import Lock\nfrom socket import *\nfrom select import *\nfrom time import *\nfrom traceback import *\nimport ssl\nimport sys\nimport iptc\n\nblockedPorts = dict()\n\ngetCssRequest = \"\"\"GET /<some big file> HTTP/1.1\\r\nHost: <host>:<port>\\r\nUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A406\\r\nAccept: text/css,*/*;q=0.1\\r\nAccept-Language: de-de\\r\nAccept-Encoding: gzip, deflate\\r\nConnection: keep-alive\\r\\n\n\\r\\n\n\"\"\"\n\nclass Client(Thread):\n    def __init__(self, tid, lock):\n        Thread.__init__(self)\n        self.lock = lock\n        self.tid = tid\n\n    def run(self):\n        print \"Starting thread %d\" % self.tid\n        try:\n            clientSocket = socket(AF_INET, SOCK_STREAM)\n            sslSocket = ssl.wrap_socket(clientSocket)\n            \n            remoteAddr = (<host>, <port>)\n            sslSocket.connect(remoteAddr)\n            localAddr, localPort =  sslSocket.getsockname()\n            print \"New socket created tid=%d, sfd=%d, sport=%d\" % ( self.tid, clientSocket.fileno(), localPort )\n            self.deleteFirewallRule(localPort, self.lock)\n            \n            sslSocket.send(getCssRequest)\n            data = sslSocket.recv(1024)\n            ''' Put the socket into half - closed state '''\n            clientSocket.shutdown(SHUT_WR)\n            clientSocket.close()\n            self.createFirewallRule(localPort, self.lock)\n        except Exception, e:\n           print \"Error: \", e\n           print_exc()\n\n    @staticmethod\n    def createFirewallRule(port, lock):\n        lock.acquire()\n        print \"Creating the iptables rule for port %d\" % port\n        rule = iptc.Rule()\n        rule.protocol = \"tcp\"\n        rule.target = iptc.Target(rule, \"REJECT\")\n\n        match = iptc.Match(rule, \"tcp\")\n        match.sport = \"%s\" % port\n        rule.add_match(match)\n            \n        chain = iptc.Chain(iptc.TABLE_FILTER, \"OUTPUT\")\n        chain.insert_rule(rule)\n        rule.target.reset()\n        blockedPorts[port] = rule\n        lock.release()\n    \n    @staticmethod\n    def deleteFirewallRule(port, lock):\n        lock.acquire()\n        if port in blockedPorts:\n            print \"Deleteng the iptables rule for port %d\" % port\n            rule = blockedPorts[port]\n            chain = iptc.Chain(iptc.TABLE_FILTER, \"OUTPUT\")\n            chain.delete_rule(rule)\n            chain.flush()\n            del blockedPorts[port]\n        lock.release()\n        \nif __name__ == \"__main__\":\n    \n    if len(sys.argv) == 1 :\n        print \"Problem.py <number of threads>\"\n        exit(0)\n    clients = []\n    lock = Lock()\n    for i in range( int(sys.argv[1]) ):\n        c = Client(i, lock)\n        clients.append(c)\n        c.start()\n        \n    print \"Joining\"\n    for i in clients:\n        i.join()\n\nThe client shutdowns the socket, thus making connection half-closed, and disappears (is blocked by firewall in case of this script). This results in a high CPU load:\nServers polls the socket descriptor for both reading and writing, and gets EPOLLIN event on this half-closed connection, then it is trying to write, failing with EAGAIN, polling sd for writing and reading events again, getting EPOLLIN, trying to write... and so on, as you can see from the attached strace snippet:\n...\n[pid 26206] epoll_ctl(50, EPOLL_CTL_DEL, 51, {0, {u32=51, u64=34359738419}}) = 0\n[pid 26206] gettimeofday({1331211762, 650946}, NULL) = 0\n[pid 26206] epoll_wait(50,  <unfinished ...>\n[pid 26199] <... epoll_wait resumed> {{EPOLLIN, {u32=40, u64=7266968735074746408}}}, 4096, 1000) = 1\n[pid 26199] read(40, \"\\1\", 128)         = 1\n[pid 26199] gettimeofday({1331211762, 652745}, NULL) = 0\n[pid 26199] epoll_wait(43,  <unfinished ...>\n[pid 26206] <... epoll_wait resumed> {{EPOLLIN, {u32=48, u64=6182845940760624}}}, 4096, 1000) = 1\n[pid 26206] read(48, \"\\1\", 128)         = 1\n[pid 26206] gettimeofday({1331211762, 675214}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 675294}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 675378}, NULL) = 0\n[pid 26206] epoll_ctl(50, EPOLL_CTL_ADD, 51, {EPOLLOUT, {u32=51, u64=51}}) = 0\n[pid 26206] epoll_ctl(50, EPOLL_CTL_MOD, 51, {EPOLLIN|EPOLLOUT, {u32=51, u64=7255244058472218675}}) = 0\n[pid 26206] gettimeofday({1331211762, 675570}, NULL) = 0\n[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1\n[pid 26206] gettimeofday({1331211762, 675699}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 675761}, NULL) = 0\n[pid 26206] write(51, \"\\272\\270\\301c\\226\\341\\272o-<\\233\\370|\\223\\313\\241\\177\\215*\\236\\201\\327YI5u\\210J*A\\371z\"..., 116) = -1 EAGAIN (Resource temporarily unavailable)\n[pid 26206] gettimeofday({1331211762, 675925}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 675979}, NULL) = 0\n[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1\n[pid 26206] gettimeofday({1331211762, 676082}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 676144}, NULL) = 0\n[pid 26206] write(51, \"\\272\\270\\301c\\226\\341\\272o-<\\233\\370|\\223\\313\\241\\177\\215*\\236\\201\\327YI5u\\210J*A\\371z\"..., 116) = -1 EAGAIN (Resource temporarily unavailable)\n[pid 26206] gettimeofday({1331211762, 676273}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 676327}, NULL) = 0\n[pid 26206] epoll_wait(50, {{EPOLLIN, {u32=51, u64=7255244058472218675}}}, 4096, 1000) = 1\n[pid 26206] gettimeofday({1331211762, 676429}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 676476}, NULL) = 0\n[pid 26206] write(51, \"\\272\\270\\301c\\226\\341\\272o-<\\233\\370|\\223\\313\\241\\177\\215*\\236\\201\\327YI5u\\210J*A\\371z\"..., 116) = -1 EAGAIN (Resource temporarily unavailable)\n[pid 26206] gettimeofday({1331211762, 676609}, NULL) = 0\n[pid 26206] gettimeofday({1331211762, 676671}, NULL) = 0\n...\n\nPossible solution:\nCheck if EPOLLOUT event has arrived before attempting to send the file:\n--- apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java\n+++ apache-tomcat-7.0.26-src/java/org/apache/tomcat/util/net/NioEndpoint.java\n@@ -1205,7 +1205,7 @@\n                     sk.attach(attachment);//cant remember why this is here\n                     NioChannel channel = attachment.getChannel();\n                     if (sk.isReadable() || sk.isWritable() ) {\n-                        if ( attachment.getSendfileData() != null ) {\n+                        if ( sk.isWritable() && attachment.getSendfileData() != null ) {\n                             processSendfile(sk,attachment,true, false);\n                         } else if ( attachment.getComet() ) {\n                             //check if thread is available", "id": 154697, "time": "2012-03-08T15:06:51Z", "creator": "dmitry.kukushkin@external.telekom.de", "creation_time": "2012-03-08T15:06:51Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52858, "attachment_id": null, "text": "Thanks for the test case. It made investigating this issue a whole lot easier.\n\nI fixed this with a slightly different patch that addresses the root cause - i.e. not unregistering the interest in OP_READ while the sendfile write is in progress.\n\nThis has been fixed in trunk and 7.0.x and will be included in 7.0.27 onwards.", "id": 154932, "time": "2012-03-15T12:12:23Z", "creator": "markt@apache.org", "creation_time": "2012-03-15T12:12:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 52858, "attachment_id": null, "text": "I think this fix is incorrect. Due to \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=53138", "id": 158887, "time": "2012-05-07T18:57:37Z", "creator": "fhanik@apache.org", "creation_time": "2012-05-07T18:57:37Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 52858, "attachment_id": null, "text": "Fixed in trunk in r1340215\nFixed in 7.0.x in r1340218\nWill be available in 7.0.28", "id": 159175, "time": "2012-05-18T19:30:41Z", "creator": "fhanik@apache.org", "creation_time": "2012-05-18T19:30:41Z", "is_private": false}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Fixed in 6.0 by r1372035 and will be in 6.0.36.", "id": 161276, "time": "2012-08-11T22:02:24Z", "bug_id": 52858, "creation_time": "2012-08-11T22:02:24Z", "is_private": false, "attachment_id": null}]
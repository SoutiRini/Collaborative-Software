[{"count": 0, "tags": [], "creator": "deweese@apache.org", "attachment_id": null, "text": "This is a bug to hold work on fixing the gradient and pattern\nsupport for PDF output from Batik.", "id": 81673, "time": "2005-10-25T00:19:28Z", "bug_id": 37236, "creation_time": "2005-10-25T00:19:28Z", "is_private": false}, {"count": 1, "attachment_id": 16799, "creator": "deweese@apache.org", "is_private": false, "id": 81674, "time": "2005-10-25T00:39:34Z", "bug_id": 37236, "creation_time": "2005-10-25T00:39:34Z", "tags": [], "text": "Created attachment 16799\nPatch for majority of transform issues with patterns/gradients\n\nThis patch fixes most of the problems with 'simple' gradients\nand patterns in PDF output.  However it does not cover\neverything there are three major outstanding issues:\n1) Gradients with an SVG setting of spreadMethod reflect or\n   repeat, are rendered with just 'pad'.  Fixing this requires\n   resorting to rasterizing the content (it might be possible to\n   get around this for linear gradients but certainly not with\n   radial).\n2) Patterns that contain gradients generate 'bad' PDF.\tI suspect\n   the problem is resource referencing.  Since I am fairly sure the\n   problem existed before my fidling I'm going to leave it as is.\n3) Patterns with 'overflow=\"visible\"' ignore overflow.\n\n   Number 3 is pretty simple to fix (just need to render the\ngn content multiple times to make the tile).  I suspect Number\n2 is not too hard if you understand PDF (which I don't really).\nNumber 1 would require adding support for rasterizing unknown\npaint's and using that as a pattern fill (just make the size \nof the pattern fill the same as shape being painted).\n\nA few notes on the patch.\n1) I simplified the PDFState.Data class, by removing the\n   the 'concatenations' List.  It doesn't seem to be used\n   by anything.\n2) I changed PDFState.getTransform it now just returns the\n   current transform as this already includes all the previous\n   transforms.\tPerhaps I misunderstood the code but things work\n   now and the transforms make sense where as they didn't before.\n3) I added the ability to provide a transform to \n   PDFFactory.makeGradient this is required to handle some of the\n   more complex cases of gradients with non-uniform scaling \n   transforms."}, {"count": 2, "tags": [], "bug_id": 37236, "attachment_id": 16800, "id": 81678, "time": "2005-10-25T03:47:34Z", "creator": "deweese@apache.org", "creation_time": "2005-10-25T03:47:34Z", "is_private": false, "text": "Created attachment 16800\nUpdate that support patterns with overflow=\"visible\"\n\nThis version of the patch supports overflow on patterns but it \nrequires the SVN version of Batik as I needed to add access to \nthe 'overflow' member of the PatternPaint class.  For this \nreason I didn't obsolete the previous patch."}, {"count": 3, "tags": [], "bug_id": 37236, "attachment_id": null, "text": "(In reply to comment #1)\n<snip/>\n> 2) Patterns that contain gradients generate 'bad' PDF.\tI suspect\n>    the problem is resource referencing.  Since I am fairly sure the\n>    problem existed before my fidling I'm going to leave it as is.\n\nDo you have a test case to reproduce this?\n\n> 3) Patterns with 'overflow=\"visible\"' ignore overflow.\n> \n>    Number 3 is pretty simple to fix (just need to render the\n> gn content multiple times to make the tile).  I suspect Number\n> 2 is not too hard if you understand PDF (which I don't really).\n> Number 1 would require adding support for rasterizing unknown\n> paint's and using that as a pattern fill (just make the size \n> of the pattern fill the same as shape being painted).\n> \n> A few notes on the patch.\n> 1) I simplified the PDFState.Data class, by removing the\n>    the 'concatenations' List.  It doesn't seem to be used\n>    by anything.\n\nYou're wrong. It is used by the PDF Renderer to handle \"fixed\" positioned\nblock-containers. This can't just be removed. The concatenate() method even has\na proper javadoc comment that explains the purpose.\n\n> 2) I changed PDFState.getTransform it now just returns the\n>    current transform as this already includes all the previous\n>    transforms.\tPerhaps I misunderstood the code but things work\n>    now and the transforms make sense where as they didn't before.\n\nAs you can see in my comment for 1) this can't be the solution. If you can give\nbe the test cases that are involved here I can try to help.\n\n> 3) I added the ability to provide a transform to \n>    PDFFactory.makeGradient this is required to handle some of the\n>    more complex cases of gradients with non-uniform scaling \n>    transforms.", "id": 81685, "time": "2005-10-25T09:02:02Z", "creator": "jeremias@apache.org", "creation_time": "2005-10-25T09:02:02Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 81686, "time": "2005-10-25T09:04:25Z", "bug_id": 37236, "creation_time": "2005-10-25T09:04:25Z", "is_private": false, "text": "(In reply to comment #2)\n> Created an attachment (id=16800) [edit]\n> Update that support patterns with overflow=\"visible\"\n> \n> This version of the patch supports overflow on patterns but it \n> requires the SVN version of Batik as I needed to add access to \n> the 'overflow' member of the PatternPaint class.  For this \n> reason I didn't obsolete the previous patch.\n\nOk, but that part might have to wait until after the first FOP release since we\nneed to be able to ship a Batik release. The other option is to do a bugfix\nrelease for Batik. I assume that would be a good idea anyway given the number of\nrecent changes.\n\n\n"}, {"count": 5, "tags": [], "bug_id": 37236, "attachment_id": null, "id": 81699, "time": "2005-10-25T13:17:50Z", "creator": "deweese@apache.org", "creation_time": "2005-10-25T13:17:50Z", "is_private": false, "text": "(In reply to comment #3)\n> (In reply to comment #1)\n> <snip/>\n> > 2) Patterns that contain gradients generate 'bad' PDF.\tI suspect\n> >    the problem is resource referencing.  Since I am fairly sure the\n> >    problem existed before my fidling I'm going to leave it as is.\n> \n> Do you have a test case to reproduce this?\n\n   Yes, sorry this was generated by:\nhttp://svn.apache.org/repos/asf/xmlgraphics/batik/trunk/samples/tests/spec/paints/patternRegions.svg\n\n   Most of the document converts correctly but the\nlast test seems to generate a PDF error.  I took a quick\nlook at it but it basically looked believable to me...\n\n> > A few notes on the patch.\n> > 1) I simplified the PDFState.Data class, by removing the\n> >    the 'concatenations' List.  It doesn't seem to be used\n> >    by anything.\n> \n> You're wrong. It is used by the PDF Renderer to handle \"fixed\" positioned\n> block-containers. This can't just be removed. The concatenate() method \n> even has a proper javadoc comment that explains the purpose.\n\n   Sorry about that.  It's a bit odd I thought was careful to delete \nall class files after this change to ensure that I hadn't missed anything, \nand everything still compiled (of course it doesn't now). Anyway\nif this is needed it can stay, the real problem code was the way that\n'PDFState.getTransform' was coded which was definately producing wrong \nresults (transforms applied twice, see below).\n\n> > 2) I changed PDFState.getTransform it now just returns the\n> >    current transform as this already includes all the previous\n> >    transforms. Perhaps I misunderstood the code but things work\n> >    now and the transforms make sense where as they didn't before.\n> \n> As you can see in my comment for 1) this can't be the solution.\n\n   This part of the change is essentially independent from the first \npoint.\n\n> If you can give be the test cases that are involved here I can try \n> to help.\n\n   You would hit this problem with any SVG file (try \nlinearGradientOrientation.svg in the same directory as above).\nThe way I detected it was by tracking what is handed to \n'PDFState.setTransform' and what is returned by \n'PDFState.getTransform'.  The value returned by getTransform\nhas the transform applied twice.  \n\n   The reason is pretty clear when you clone the Data object for a \npush you don't clear the transform of the new Data object (you did \nclear the concatenations list), thus you end up with two Data \nobjects both of which have what ever the transform was.  Then the \nold getTransform code would then concatenate both of these \nresulting in a double transform. I think only the gradient code \nuses the transform returned by this method, so for most content\nthe bug wouldn't show up.\n\n   There are two potential solutions, first clear the transform when\nyou clone the Data object, but leave the concatenation code in \ngetTransform. Second have getTransform just return the current\nData.transform (as I did, but leave the concatenations List stuff \nalone).\n\n   If you do the first I suspect the code in PDFRenderer could just \nuse the transform from the Data object to restore state, and the \nconcatenations list could go away, but I don't really know or \nunderstand the code in question - I'll just say that the current\nsystem appears way more complex then it needs to be, you should be \nable to accomplish everything with the existing push/pop on PDFState.\n\n   Finally, doesn't it bother you to have one class getting\nan iterator from a raw member of an inner class belonging to \nanother class?\n"}, {"count": 6, "text": "(In reply to comment #5)\n<snip/>\n> > > 2) Patterns that contain gradients generate 'bad' PDF.\tI suspect\n> > >    the problem is resource referencing.  Since I am fairly sure the\n> > >    problem existed before my fidling I'm going to leave it as is.\n> > \n> > Do you have a test case to reproduce this?\n> \n>    Yes, sorry this was generated by:\n>\nhttp://svn.apache.org/repos/asf/xmlgraphics/batik/trunk/samples/tests/spec/paints/patternRegions.svg\n> \n>    Most of the document converts correctly but the\n> last test seems to generate a PDF error.  I took a quick\n> look at it but it basically looked believable to me...\n\nThanks, I'll look into it ASAP.\n\n> > > A few notes on the patch.\n> > > 1) I simplified the PDFState.Data class, by removing the\n> > >    the 'concatenations' List.  It doesn't seem to be used\n> > >    by anything.\n> > \n> > You're wrong. It is used by the PDF Renderer to handle \"fixed\" positioned\n> > block-containers. This can't just be removed. The concatenate() method \n> > even has a proper javadoc comment that explains the purpose.\n> \n>    Sorry about that.  It's a bit odd I thought was careful to delete \n> all class files after this change to ensure that I hadn't missed anything, \n> and everything still compiled (of course it doesn't now). Anyway\n> if this is needed it can stay, the real problem code was the way that\n> 'PDFState.getTransform' was coded which was definately producing wrong \n> results (transforms applied twice, see below).\n\nI see. That sounds bad.\n\n> > > 2) I changed PDFState.getTransform it now just returns the\n> > >    current transform as this already includes all the previous\n> > >    transforms. Perhaps I misunderstood the code but things work\n> > >    now and the transforms make sense where as they didn't before.\n> > \n> > As you can see in my comment for 1) this can't be the solution.\n> \n>    This part of the change is essentially independent from the first \n> point.\n> \n> > If you can give be the test cases that are involved here I can try \n> > to help.\n> \n>    You would hit this problem with any SVG file (try \n> linearGradientOrientation.svg in the same directory as above).\n> The way I detected it was by tracking what is handed to \n> 'PDFState.setTransform' and what is returned by \n> 'PDFState.getTransform'.  The value returned by getTransform\n> has the transform applied twice.  \n> \n>    The reason is pretty clear when you clone the Data object for a \n> push you don't clear the transform of the new Data object (you did \n> clear the concatenations list), thus you end up with two Data \n> objects both of which have what ever the transform was.  Then the \n> old getTransform code would then concatenate both of these \n> resulting in a double transform. I think only the gradient code \n> uses the transform returned by this method, so for most content\n> the bug wouldn't show up.\n> \n>    There are two potential solutions, first clear the transform when\n> you clone the Data object, but leave the concatenation code in \n> getTransform. Second have getTransform just return the current\n> Data.transform (as I did, but leave the concatenations List stuff \n> alone).\n> \n>    If you do the first I suspect the code in PDFRenderer could just \n> use the transform from the Data object to restore state, and the \n> concatenations list could go away, but I don't really know or \n> understand the code in question - I'll just say that the current\n> system appears way more complex then it needs to be, you should be \n> able to accomplish everything with the existing push/pop on PDFState.\n> \n>    Finally, doesn't it bother you to have one class getting\n> an iterator from a raw member of an inner class belonging to \n> another class?\n\nWell, it bothers me to have public member variables in the first place. I simply\nhaven't enough of an itch to fix it, yet. That stuff evolved over time. When I\nrecently updated the PS renderer I took a cleaner approach to handle state\ninformation. Maybe that could be ported to the PDF case. Still, the\ntransformation list is still necessary to recreate the same state after a \"break\nout\" as needed when painting fixed block-containers. I haven't found a better\nway to handle this case, yet. Essentially, you're welcome to rework this stuff\nif you find a better way, as long as especially the testcase\n\"block-container_absolute-position_fixed.xml\" doesn't get broken.\n\nI'm going to look deeper into this ASAP. Right now I want to finish the\ndocumentation for FOP Trunk first to prepare for the initial release. Looks like\nwe will still not be able to release this month and next week I'm away. :-(\n\nThanks for explaining the problem. I understand much better now what's going on.\n", "bug_id": 37236, "is_private": false, "id": 81702, "time": "2005-10-25T13:59:05Z", "creator": "jeremias@apache.org", "creation_time": "2005-10-25T13:59:05Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "creator": "deweese@apache.org", "text": "Created attachment 16810\nUpdate to gradient transform fix, passes all junit tests.\n\nThis replaces the first patch (it has the imporant bits of the\nsecond patch commented out as well).\n\nThis eliminates the concatenations list, but resets the Data\ntransform after each push.  When the PDFRenderer want's to\nrebuild state it just uses the transforms from the individual\ndata elements (rather than all of the concatenations).\n\nThis appears to pass all of the JUnit tests but since this\nis the first time I've tried to run them it's a bit hard to\nknow what this really means (is the PDF output checked for \nexample? Is there PDF output?).", "id": 81735, "time": "2005-10-26T02:19:22Z", "bug_id": 37236, "creation_time": "2005-10-26T02:19:22Z", "is_private": false, "attachment_id": 16810}, {"count": 8, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 81788, "time": "2005-10-26T23:17:01Z", "bug_id": 37236, "creation_time": "2005-10-26T23:17:01Z", "is_private": false, "text": "(In reply to comment #7)\n> Created an attachment (id=16810) [edit]\n> Update to gradient transform fix, passes all junit tests.\n\nPatch applied. Thanks.\n\n> This replaces the first patch (it has the imporant bits of the\n> second patch commented out as well).\n> \n> This eliminates the concatenations list, but resets the Data\n> transform after each push.  When the PDFRenderer want's to\n> rebuild state it just uses the transforms from the individual\n> data elements (rather than all of the concatenations).\n\nLooks good to me.\n\n> This appears to pass all of the JUnit tests but since this\n> is the first time I've tried to run them it's a bit hard to\n> know what this really means (is the PDF output checked for \n> example? Is there PDF output?).\n\nThe JUnit test can currently only check the FO tree and the layout engine, not\nthe renderers. We have a special renderer, the area tree renderer, which writes\nout the area tree to an XML file and we use XPath statements to check against\nthis XML file. The area tree is the thing that the renderers convert to the\nfinal output format, so we're only checking the input for the renderers, not\ntheir output.\n\nI've written a small tool (BatchDiffer) which can create diff images from\nPDF/PS/Java2D output, but it's not integrated into JUnit, yet, and rather\ndesigned for manual visual checking. I've actually stolen a few lines of code\nfrom Batik for that. :-) The problem with checking PDF and PS is that you need\nan external tool like GhostScript to convert PDF/PS to PNG so we could do\nautomated diff testing. We used to do checksum testing on the PDF files but\nthat's not really useful. Some way to go, one step at a time....\n\nI'm leaving the issue open so we can look at the overflow thing ASAP."}, {"count": 9, "tags": [], "bug_id": 37236, "attachment_id": 16837, "id": 81937, "time": "2005-10-30T21:54:58Z", "creator": "deweese@apache.org", "creation_time": "2005-10-30T21:54:58Z", "is_private": false, "text": "Created attachment 16837\nAdds support for gradient repeat and transparency through rasterization\n\nThis patch adds the ability to rasterize 'unknown' paints\nor paints that can't be mapped natively to PDF.  This\nincludes gradients with repeats, and or transparent stops.\n\nThis patch covers fill and stroke, however it does not\nhandle text.  This is because currently it works by treating\nthe paint as an image which it clips with the path to be\nfilled (it strokes the path using the JDK and the just 'fills'\nit).  For text this would require turning the text into outlines.\n\nA better way to do this would be to turn the image into a tile\npattern (which would be expected to be used only once), but\nthe transforms to pull this off are non-trivial, also I'm not\nsure I know quite enough PDF to get this right."}, {"count": 10, "tags": [], "creator": "deweese@apache.org", "attachment_id": 16853, "text": "Created attachment 16853\nUpdate to gradient repeat, fixed createGraphics problem.\n\nThis patch is an update to 16837.  It indirects the\naccess to jpegCount so all the PDFGraphics2D share\na common count.  This prevents inadvertant reuse of\nthe wrong image.", "id": 82038, "time": "2005-11-02T12:56:49Z", "bug_id": 37236, "creation_time": "2005-11-02T12:56:49Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 37236, "is_private": false, "id": 82305, "time": "2005-11-09T15:51:44Z", "creator": "jeremias@apache.org", "creation_time": "2005-11-09T15:51:44Z", "tags": [], "text": "Patch #10 applied. Thanks.\nhttp://svn.apache.org/viewcvs?rev=332046&view=rev\n\nI'm looking forward to moving the Transcoders out after the FOP release. :-)\n\nIs there anything outstanding concerning this bug or can we close it? It starts\nto get confusing which patches are to be applied and so on. I assume you'll also\nhelp track the currently commented part that we'll have to uncomment as soon as\nwe can rely on a later Batik version."}, {"count": 12, "tags": [], "creator": "deweese@apache.org", "attachment_id": null, "text": "(In reply to comment #11)\n> Patch #10 applied. Thanks.\n\n> I'm looking forward to moving the Transcoders out after the FOP release. :-)\n\n   It will likely make this stuff easier to track.\n\n> Is there anything outstanding concerning this bug or can we close it? \n\n   As I see it there are two outstanding issues:\n      1) 'Complex' patterns on Text - While it is probably a 5% case it's \n         bad that things won't work.\n      2) The overflow for pattern case being commented out.\n\n   I would lean towards saying this is still broken enough to leave the\nbug open, but it's not my bug DB (so to speak).  Having it open makes\nit at least possible that someone will have an answer to their question.\n\n> It starts to get confusing which patches are to be applied and \n> so on. \n\n   Yes, I strongly considered going to a single PDFTranscoder patch instead\nof trying to track everything seperately.\n\n> I assume you'll also help track the currently commented part that \n> we'll have to uncomment as soon as we can rely on a later Batik version.\n\n   I'll try and make sure of it.  What do you think of a Batik 1.6.1\nrelease?  There are a number of small but significant improvements\nin Batik since 1.6.1.  The real hurdle would be straightening out\nthe XML lib lincensing (which really needs to be fixed anyways).\n", "id": 82454, "time": "2005-11-14T14:29:27Z", "bug_id": 37236, "creation_time": "2005-11-14T14:29:27Z", "is_private": false}, {"count": 13, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 82470, "creation_time": "2005-11-14T17:07:52Z", "time": "2005-11-14T17:07:52Z", "bug_id": 37236, "text": "(In reply to comment #12)\n<snip/>\n> > Is there anything outstanding concerning this bug or can we close it? \n> \n>    As I see it there are two outstanding issues:\n>       1) 'Complex' patterns on Text - While it is probably a 5% case it's \n>          bad that things won't work.\n>       2) The overflow for pattern case being commented out.\n> \n>    I would lean towards saying this is still broken enough to leave the\n> bug open, but it's not my bug DB (so to speak).  Having it open makes\n> it at least possible that someone will have an answer to their question.\n\nOk.\n\n<snip/>\n> > I assume you'll also help track the currently commented part that \n> > we'll have to uncomment as soon as we can rely on a later Batik version.\n> \n>    I'll try and make sure of it.  What do you think of a Batik 1.6.1\n> release?  There are a number of small but significant improvements\n> in Batik since 1.6.1.  The real hurdle would be straightening out\n> the XML lib lincensing (which really needs to be fixed anyways).\n\nIt's on my list to help you with the XML libs as soon as the FOP release is off\nmy desk. Anyway, I think a Batik 1.6.1 is a good idea. A lot of things have been\ndone since the last release.\n\n", "is_private": false}, {"count": 14, "text": "resetting P2 open bugs to P3 pending further review", "bug_id": 37236, "attachment_id": null, "id": 157425, "time": "2012-04-07T01:42:45Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:42:45Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 37236, "text": "increase priority for bugs with a patch", "id": 157856, "time": "2012-04-11T03:21:04Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:21:04Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 37236, "text": "change status from ASSIGNED to NEW for consistency", "id": 157890, "time": "2012-04-11T06:15:59Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:15:59Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Each client connection performed on our Tomcat server is in TIME_WAIT state on\nclient (even if the client is the Tomcat server itself). We have studied the\nnetwork capture and we found an abnormal behaviour :\n\nWhen the client send the FIN segment, Tomcat server reply with a FIN segment\ninstead of ACK. So the client send ACK and enter in TIME_WAIT state and it's a\nugly behaviour when the client server support a hudge traffic (during a stress\ncampaign we have reached 21000 TIME_WAIT connection !). In the TCP RFC, Closing\na TCP session is always a 4 way handshake (->FIN,ACK ->,FIN ->,->Ack).\n\nyou can easly reproduce : \nperform on the tomcat server : telnet localhost [tomcat_port]\nGET /toto \\n\\n\nperform : netstat -an |grep [tomcat_port]\nyou should see a connection in TIME_WAIT State.\n\nThanks for help, Rgds.", "attachment_id": null, "id": 89214, "creator": "lionel.agulhon@club-internet.fr", "time": "2006-05-17T15:43:56Z", "bug_id": 39600, "creation_time": "2006-05-17T15:43:56Z", "is_private": false}, {"count": 1, "tags": [], "text": "TIME_WAIT state isn't such a big problem on Linux anymore (in like last 4\nyears+).  The only memory overhead in the kernel is specialized timewait\nstructure not a full network socket.  cat /proc/slabinfo  | grep tw_sock\n\nSome would argue that if the shutdownInput()/shutdownOutput() cycles of the\nnetwork socket can be controlled to leave the client holding the TIME_WAIT that\nis better than leaving the server with it.  As under normal load you spread this\nfacet of TCP networking our across many hosts (when you give it the client).\n\nA TCP closing handshake does not have to be a 4 way event, this is just the\nideal theoretial the RFC states (imagine both ends closing at the same time and\nthe initial FINs crossing in flight).  In anycase this is a kernel level issue\nnot a TC issue, as it does not matter how badly any application configures a\nsocket, it is still the kernels job to produce correct TCP on the wire no matter\nwhat.\n\n\nMay I ask what configuration you are running with TC HTTP Server socket ?\n\n* Java Sockets (the default on 8080)\n* APJ1x Connector (the default on 8007)\n* ApachePortableRuntime (genrally requires a bit of setting up to get going)\n\n\nNow time to pin the tail on the donkey:\n\nIf you are using Java Sockets directly to clients, from SVN Revision: 407700 at\n./tomcat/connectors/trunk/http11/src/java/org/apache/coyote/http11/Http11BaseProtocol.java:707\n\n< try { if (socket != null) socket.close (); }\n\n> try { if (socket != null) { socket.shutdownOutput();\n>                                        socket.close (); } }\n\nMight alter that behaviour.\n\n\nIt is unclear to me where you think there is a problem.  Your test requests I\nuse localhost (127.0.0.1) to test, but this makes me both the client and the\nserver, so if any TIME_WAIT is going to happen my host is definatly going to get it.\n\nThe only cause for concern here would be if you are saying that when you compare\nApache-Httpd, Squid and Tomcat under high load characteristics you find that\nApache-Httpd and Squid have few/no TIME_WAIT sockets at either the client or\nserver ends of the HTTP connection but with Tomcat you are getting many (at the\nclient end you state) then that would be something to investigate.  As they\nshould perform the same and I would guess it is a socket shutdown issue at the\nroot of it.\n", "is_private": false, "id": 89278, "creator": "darryl@darrylmiles.org", "time": "2006-05-19T04:35:30Z", "bug_id": 39600, "creation_time": "2006-05-19T04:35:30Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "yoavs@computer.org", "text": "While we can add the shutdownOutput call right before socket.close, I largely\nagree with Darryl's analysis so I hesitate to muck with this low-level\nfunctionality that's been seriously tested over several years now, at least not\nwithout further tests / information from the original poster.\n\nOP: if your problem persists with 5.5.20, could you please try adding the\nshutdownOutput call to Http11BaseProtocol as Darryl suggests, building a custom\nTomcat, and re-running your tests?  I'd be very curious as to the results.  If\nyou do this, please reopen this Bugzilla issue and append your further\ninformation.  Thanks.", "id": 97271, "time": "2006-12-25T05:08:19Z", "bug_id": 39600, "creation_time": "2006-12-25T05:08:19Z", "is_private": false, "attachment_id": null}]
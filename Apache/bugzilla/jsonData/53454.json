[{"count": 0, "tags": [], "text": "Created attachment 28985\nSampe app with sources\n\nIf a client extends HttpServlet and desides to override doGet() method, resulting servlet can fail to correctly handle HEAD requests.\n\nThis will happen, if client chooses to set Content-Length manually (e.g., to allow content bigger than 2Gb):\n\n  resp.setHeader(\"Content-Length\", String.valueOf(12345678900L));\n\nand only writes actual content if it is a GET request (e.g., because it is costly operation).\n\nIn such conditions, GET request will have correct \"Content-Length\" header, but HEAD requset will have \"Content-Length\" header with value 0. \n\nSample project with sources is attached", "is_private": false, "bug_id": 53454, "id": 160182, "time": "2012-06-22T15:33:22Z", "creator": "n.s.skvortsov@gmail.com", "creation_time": "2012-06-22T15:33:22Z", "attachment_id": 28985}, {"count": 1, "tags": [], "bug_id": 53454, "attachment_id": null, "id": 160245, "time": "2012-06-25T17:12:23Z", "creator": "chris@christopherschultz.net", "creation_time": "2012-06-25T17:12:23Z", "is_private": false, "text": "This is actually caused by the servlet API classes which are not a part of Tomcat. Looking at servlet-api-2.5.jar, you can see this implementation of HttpServlet.doHead:\n\nprotected void doHead(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)   throws javax.servlet.ServletException, java.io.IOException;\n  Code:\n   0:   new     #11; //class javax/servlet/http/NoBodyResponse\n   3:   dup\n   4:   aload_2\n   5:   invokespecial   #12; //Method javax/servlet/http/NoBodyResponse.\"<init>\":(Ljavax/servlet/http/HttpServletResponse;)V\n   8:   astore_3\n   9:   aload_0\n   10:  aload_1\n   11:  aload_3\n   12:  invokevirtual   #13; //Method doGet:(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V\n   15:  aload_3\n   16:  invokevirtual   #14; //Method javax/servlet/http/NoBodyResponse.setContentLength:()V\n   19:  return\n\nThat's roughly this Java code:\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException\n    {\n        NoBodyResponse response = new NoBodyResponse(resp);\n        doGet(req, response);\n        response.setContentLength();\n    }\n\nThe NoBodyResponse class is a package-protected class whose setContentLength method looks like this:\n\nvoid setContentLength();\n  Code:\n   0:   aload_0\n   1:   getfield        #5; //Field didSetContentLength:Z\n   4:   ifne    18\n   7:   aload_0\n   8:   aload_0\n   9:   getfield        #4; //Field noBody:Ljavax/servlet/http/NoBodyOutputStream;\n   12:  invokevirtual   #6; //Method javax/servlet/http/NoBodyOutputStream.getContentLength:()I\n   15:  invokespecial   #7; //Method javax/servlet/http/HttpServletResponseWrapper.setContentLength:(I)V\n   18:  return\n\nThat's roughly this Java code:\n\n    void setContentLength()\n    {\n        if(!didSetContentLength)\n            super.setContentLength(noBody.getContentLength());\n    }\n\nThe field didSetContentLength is only set here:\n\npublic void setContentLength(int);\n  Code:\n   0:   aload_0\n   1:   iload_1\n   2:   invokespecial   #7; //Method javax/servlet/http/HttpServletResponseWrapp\ner.setContentLength:(I)V\n   5:   aload_0\n   6:   iconst_1\n   7:   putfield        #5; //Field didSetContentLength:Z\n   10:  return\n\nWhich is this:\n\n    public void setContentLength(int len)\n    {\n        super.setContentLength(len);\n        didSetContentLength = true;\n    }\n\nSo, since you are not calling setContentLength(int), your Content-Length header is being clobbered by the servlet API itself.\n\nTry this instead:\n\n    resp.setContentLength(0);\n    resp.setHeader(\"Content-Length\", String.valueOf(12345678900L));\n\nI think that will get you around this particular oversight in the API classes."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "text": "It is Tomcat's implementation of the Servlet API so this is a Tomcat bug.", "id": 160247, "time": "2012-06-25T17:56:38Z", "bug_id": 53454, "creation_time": "2012-06-25T17:56:38Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "n.s.skvortsov@gmail.com", "text": "Christopher,\n\nThank you for provided workaround. I will use it. Still, I agree with Mark, that it is Tomcat's implementation of API, and it violates API specification in part of doGet() override \n\nhttp://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "count": 3, "id": 160285, "time": "2012-06-27T08:52:20Z", "bug_id": 53454, "creation_time": "2012-06-27T08:52:20Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 53454, "attachment_id": null, "id": 160300, "time": "2012-06-27T17:38:19Z", "creator": "chris@christopherschultz.net", "creation_time": "2012-06-27T17:38:19Z", "is_private": false, "text": "(In reply to comment #2)\n> It is Tomcat's implementation of the Servlet API so this is a Tomcat bug.\n\nOh, I didn't realize that the servlet-api.jar that ships with Tomcat wasn't directly from Oracle. Obviously, Content-Length can be set in ways other than calling setContentLength (and, in fact, must be when the Content-Length exceeds 2^31-1)."}, {"count": 5, "tags": [], "bug_id": 53454, "attachment_id": null, "text": "Fixed in trunk and 7.0.x and will be included in 7.0.29 onwards.\n\nProposed for 6.0.x.", "id": 160316, "time": "2012-06-28T08:57:54Z", "creator": "markt@apache.org", "creation_time": "2012-06-28T08:57:54Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 53454, "attachment_id": null, "id": 160395, "time": "2012-07-02T11:16:40Z", "creator": "markt@apache.org", "creation_time": "2012-07-02T11:16:40Z", "is_private": false, "text": "Fixed in 6.0.x and will be included in 6.0.36 onwards."}]
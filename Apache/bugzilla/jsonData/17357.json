[{"count": 0, "tags": [], "bug_id": 17357, "is_private": false, "text": "I have a folder full of movie AVIs, which contains one file which is 2.2GB, the\nremainder are below 2GB.\n\nWhen using the automatically generated directory listing on Apache 2.0.44\n(compiled from source, all modules shared), any folder which has that file\ngenerates a incomplete list, yet once I move that file out of the directory, it\nonce again generates a complete directory list. \n\nMy file system can handle >2GB files (I can play the movie from the command\nline), and there's nothing in the error logs (the access log shows a successful\n200).\n\nApache 1.3.26 (compiled from source, all modules shared) works fine ... full\ndirectory is listed with or without that file.\n\nAll of this is on a 2 CPU Linux 2.4.20smp box, with ReiserFS on the filesystem\nin question.\n\nHope this helps ... I'm not sure if this happened in previous apache 2 builds -\nthis is the first one I've used.", "id": 31898, "time": "2003-02-25T04:45:38Z", "creator": "rick@knowleses.org", "creation_time": "2003-02-25T04:45:38Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Slight correction ... Apache 1.3.26 displays that file with a ? next to the\nsize, and doesn't appear to recognize the mime type of the file (ie no icon).", "is_private": false, "id": 31899, "creator": "rick@knowleses.org", "time": "2003-02-25T04:50:04Z", "bug_id": 17357, "creation_time": "2003-02-25T04:50:04Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Changed status to major, since:\n1) it seems that \"normal\" bugs get ignored ... please at least say \"wow, sounds\nbad\" or tell me to fix it myself after 3 days, and \n2) it is a bug that would prevent people from upgrading to Apache 2 from 1.3\n\nthanks,\n\nR", "is_private": false, "id": 32134, "creator": "rick@knowleses.org", "time": "2003-02-28T04:27:47Z", "bug_id": 17357, "creation_time": "2003-02-28T04:27:47Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 17357, "attachment_id": null, "id": 32138, "time": "2003-02-28T05:15:14Z", "creator": "jwoolley@apache.org", "creation_time": "2003-02-28T05:15:14Z", "is_private": false, "text": "Sounds like a bug in mod_autoindex... it's probably ignoring a return value from some APR call.  \nCan you give us a URL to look at that demonstrates the problem?  Thanks... "}, {"count": 4, "tags": [], "text": "Wonderful - thanks for the reply.\n\nIn the directoy listed at URL http://www.ponbiki.org/testApacheBug/ there are 6 \nfiles, numbered 1.tar, 2.tar, etc up to 6.tar. The file 3.tar is 2.2GB in size, \nand the remainder are between 59MB and 1.8GB.\n\nThere should also be 6 files listed by mod_autoindex, but instead there are \nonly 1.tar and 2.tar displayed.\n\nThis doesn't really help you much, I know ... if you need me to try any patches \netc I can.\n\nThanks - I appreciate the response.", "attachment_id": null, "id": 32139, "creator": "rick@knowleses.org", "time": "2003-02-28T05:47:28Z", "bug_id": 17357, "creation_time": "2003-02-28T05:47:28Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 17357, "attachment_id": null, "id": 32140, "time": "2003-02-28T06:57:43Z", "creator": "jwoolley@apache.org", "creation_time": "2003-02-28T06:57:43Z", "is_private": false, "text": "Hmmmm... so I see.  :-/  I'm able to reproduce this on linux but not on freebsd.  From the looks of \nthe code, I'm guessing the problem must be that apr_dir_read() is failing when it hits the large \nfile... but I'm not sure why yet.  Debugging. "}, {"count": 6, "tags": [], "text": "Okay, here's what I've found so far.  apr_dir_read() calls apr_lstat() on the next item in the \ndirectory.  the lstat() call fails with errno==75: Value too large for defined data type.  This causes \nthe apr_lstat to fail which causes apr_dir_read to fail which makes mod_autoindex think it's hit \nthe end of the directory. \n \nI'm going to say either \n(a) this is not a bug in mod_autoindex but rather a bug in APR \n(b) this is a bug in mod_autoindex since it should notice what the error was and just put a ? \n     in for the filesize like you say Apache 1.3 did. \n \nI'll have to discuss with the other developers. ", "attachment_id": null, "id": 32177, "creation_time": "2003-02-28T19:06:33Z", "time": "2003-02-28T19:06:33Z", "creator": "jwoolley@apache.org", "bug_id": 17357, "is_private": false}, {"count": 7, "tags": [], "bug_id": 17357, "attachment_id": null, "id": 32180, "time": "2003-02-28T19:39:45Z", "creator": "jwoolley@apache.org", "creation_time": "2003-02-28T19:39:45Z", "is_private": false, "text": "Okay, well, here's the answer. \n \nTo get any files larger than 32-bits worth to work on any program on a 32-bit machine, you have \nto compile that program with -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 .  I've \ndropped a query onto the dev list as to why we don't do that by default or at least provide an \neasier way for the user to know how to do it themselves.  For now, here's what you do. \n \nRecompile Apache like so: \n \nCFLAGS=\"-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\" ./configure <foo> \n \nwhere <foo> is the arguments you'd normally pass to configure.  Then it will all work beautifully.  \n:) \n \nI'm going to go ahead and close this PR out, but I'll make sure we come up with some easier way \nto do this in future releases (maybe a --enable-largefiles configure flag?). \n \nThanks for using Apache! \n--Cliff "}, {"count": 8, "attachment_id": null, "bug_id": 17357, "is_private": false, "id": 32213, "time": "2003-03-01T05:20:25Z", "creator": "rick@knowleses.org", "creation_time": "2003-03-01T05:20:25Z", "tags": [], "text": "Thanks so much ... unfortunately the compile failed with those options. If this\nis something wrong with my linux install, please just tell me and I'll try and\nfix it myself, but otherwise I'd really appreciate your help.\n\nThis is the configure line as I entered it (cut and pasted):\n\nCFLAGS=\"-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\" ./configure\n--prefix=/usr/local/apache2 --enable-mods-shared=all --enable-ssl=shared\n\nThe make went ok for about 100 lines and then failed with:\n\n/bin/sh /huge/public/software/apache/httpd-2.0.44/srclib/apr/libtool --silent\n--mode=compile gcc -pthread  -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\n-DHAVE_CONFIG_H -DLINUX=2 -D_REENTRANT -D_XOPEN_SOURCE=500 -D_BSD_SOURCE\n-D_SVID_SOURCE -D_GNU_SOURCE   -I../../include -I../../include/arch/unix\n-I../../include/arch/unix  -c sendrecv.c && touch sendrecv.lo\nIn file included from ../../include/arch/unix/apr_arch_networkio.h:112,\n                 from sendrecv.c:55:\n/usr/include/sys/sendfile.h:26:3: #error \"<sys/sendfile.h> cannot be used with\n_FILE_OFFSET_BITS=64\"\nmake[4]: *** [sendrecv.lo] Error 1\n\nand then exited it's way back to the original folder.\n\nThe file /usr/include/sys/sendfile.h has the following lines in it:\n\n#ifdef __USE_FILE_OFFSET64\n# error \"<sys/sendfile.h> cannot be used with _FILE_OFFSET_BITS=64\"\n#endif\n\nwhich throw the error above. Something makes me think maybe I need more compile\noptions, eg something that would tell it to use a different sendfile header ...\nor maybe there's an ifdef missing in the apr_arch_networkio.h file.\n\nAnyway, sorry to reopen it, but there's still one or two things to do.\n\nThanks,\n\nR"}, {"count": 9, "tags": [], "text": "I should also point out (since we are talking about ifdefs and includes and the \nlike) that I'm compiling with gcc 3.2.2 and glibc 2.2.5.", "attachment_id": null, "id": 32214, "creator": "rick@knowleses.org", "time": "2003-03-01T05:28:02Z", "bug_id": 17357, "creation_time": "2003-03-01T05:28:02Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 17357, "is_private": false, "text": "Yeah, some of the developers on the list have since mentioned that things like this have been \nknown to happen, which is apparently why it's not done by default.  Argh.  Well, anyway, not \nmuch else I can do about this right now.  :(  Sorry.  We'll leave this PR open for now and let \nsome more discussion take place on the dev list. ", "id": 32215, "time": "2003-03-01T05:42:41Z", "creator": "jwoolley@apache.org", "creation_time": "2003-03-01T05:42:41Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "I am experiencing the same problem with apache 2.0.44 (occured in all versions\nI've used since I can remember) on Windows XP.  I have one file that is about\n56MB, the next biggest is 29MB, 3 ~20MB files and the rest are under 10MB. \nThere are 638 files in the directory, and 2 subdirectories.  The .htaccess\ncontains only:\nOptions +Indexes\nRemoving the PHP module and restarting apache did not change the behavior.  I\ndownloaded a binary apache from one of the official mirrors.\n\nAlso, it doesn't always stop at the same file, and it doesn't usually print all\nthe info for the last file (sometimes stops after just the icon, part of the\nname, part of the date, etc).  Sometimes it does give the complete listing.\n\nAfter some testing:\nThe behavior did not seem to be present until I had ~490 files (~2.28GB) in the\ndirectory, and then it did not happen all the time.  I moved in large blocks so\nI can't be more specific as to when it started breaking.", "is_private": false, "id": 33398, "creator": "cst@andrew.cmu.edu", "time": "2003-03-19T06:24:52Z", "bug_id": 17357, "creation_time": "2003-03-19T06:24:52Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 17357, "is_private": false, "text": "The original bug reported here, that mod_autoindex directory listings are\ntruncated when a >2Gb file is found, is fixed in by this change:\n\nhttp://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/generators/mod_autoindex.c?r1=1.132&r2=1.133\n\n", "id": 55265, "time": "2004-04-04T18:02:19Z", "creator": "jorton@redhat.com", "creation_time": "2004-04-04T18:02:19Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "*** Bug 36099 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 78280, "creation_time": "2005-08-09T15:32:12Z", "time": "2005-08-09T15:32:12Z", "creator": "jorton@redhat.com", "bug_id": 17357, "is_private": false}]
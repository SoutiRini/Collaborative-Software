[{"count": 0, "tags": [], "creator": "krueger@signal7.de", "is_private": false, "id": 50805, "attachment_id": null, "bug_id": 26276, "creation_time": "2004-01-20T11:50:02Z", "time": "2004-01-20T11:50:02Z", "text": "It seems that the generated TLD is not updated for tagfiles after certain\nmodifications (e.g. changing attribute names of the tag) and therefore the\ngenerate source code is incorrect. Can easily be reproduced by changing an\nattribute's name of a tag in a tag file (the source code is regenerated after\nthe modification but does not contain the corresponding setter). This indicated\nthat the generated TLD is not updated to reflect the modification and therfore\nthe source code is generated on old metadata. See attached webapp for a test\ncase. Instructions for reproduction are on the startpage of the webapp."}, {"count": 1, "tags": [], "bug_id": 26276, "text": "Created attachment 10022\nzip file containing test webapp with instructions", "id": 50806, "time": "2004-01-20T11:51:34Z", "creator": "krueger@signal7.de", "creation_time": "2004-01-20T11:51:34Z", "is_private": false, "attachment_id": 10022}, {"count": 2, "tags": [], "text": "I did some more research. This is actually what happens: If both the jsp using\nthe tag and the tagfile have been modified, the tag class is generated but with\nan outdated TagInfo, thus the source code contains the old state (e.g. attributes).\n\nThis is because the old wrapper is not removed from the wrapperCache in\nJspRuntimeContext and the associated CompilationContext containing the outdated\nTagInfo is used for generating the tag's source code. After that it's a real\nmess because the timestamp of the tag of coures has changed and therefore jasper\nthinks the generated tag is up to date.\n\nTo fix this I put the following lines in the method Compiler.isOutDated(boolean)\n\n        targetLastModified = targetFile.lastModified();\n        if (targetLastModified < jspRealLastModified) {\n+            if(ctxt.isTagFile()){\n+               ctxt.getRuntimeContext().removeWrapper(ctxt.getJspFile());\n+            }\n            if (log.isDebugEnabled())\n                log.debug(\"Compiler: outdated: \" + targetFile + \" \" +\ntargetLastModified);\n            return true;\n        }\n\nI'm new to jasper and anything but sure that this is a valid solution or if it\nhas negative side effects but as far as I can see it seems to work. I'm not sure\nwhy removeWrapper is currently only called when a tag file is found to be\nmodified as part of the dependents list of a jsp (which is why it does not work\nnow if the jsp was modified as well because isOutDated returns before it gets to\nthat check).   \n\n ", "is_private": false, "bug_id": 26276, "id": 50878, "time": "2004-01-21T13:50:21Z", "creator": "krueger@signal7.de", "creation_time": "2004-01-21T13:50:21Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "text": "Fixed.\n\nYou proposed is not quite right, but thanks for reporting, and for taking time\nlooking for a fix.", "id": 51003, "time": "2004-01-22T19:38:14Z", "bug_id": 26276, "creation_time": "2004-01-22T19:38:14Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 60397, "is_private": false, "text": "When merging the cells for a SXSSFWorkbook the rendering speed is drastically reduced. This can be demonstrated by adapting the sample code to merge each of the cells.\n\n        SXSSFWorkbook wb = new SXSSFWorkbook(100); \n        Sheet sh = wb.createSheet();\n        for(int rownum = 0; rownum < 10000; rownum = rownum + 2){\n            Row row1 = sh.createRow(rownum);\n            Row row2 = sh.createRow(rownum + 1);\n            for(int cellnum = 0; cellnum < 10; cellnum++){\n                Cell cell1 = row1.createCell(cellnum);\n                String address = new CellReference(cell1).formatAsString();\n                cell1.setCellValue(address);\n\n                Cell cell2 = row2.createCell(cellnum);\n                cell2.setCellValue(\"\");\n\n                sh.addMergedRegion(new CellRangeAddress(\n                        rownum, \n                        rownum + 1, \n                        cellnum,\n                        cellnum  \n                ));\n            }\n        }", "id": 195096, "time": "2016-11-21T01:01:01Z", "creator": "marc@schregardus.com.au", "creation_time": "2016-11-21T01:01:01Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 195121, "time": "2016-11-21T17:36:57Z", "bug_id": 60397, "creation_time": "2016-11-21T17:36:57Z", "text": "Because merged regions cannot overlap without producing a corrupt document, POI may be checking the list of merged regions on a sheet for potential intersections before adding a merged region. This gives O(N) behavior for adding one region instead of the expected O(1).\n\nFor XSSF and SXSSF, we added addMergedRegionUnsafe [1] that skips these checks for speed, but may produce a corrupt document when opened in Excel. Have you tried addMergedRegionUnsafe?\n\n[1] https://poi.apache.org/apidocs/org/apache/poi/xssf/streaming/SXSSFSheet.html#addMergedRegionUnsafe(org.apache.poi.ss.util.CellRangeAddress)"}, {"attachment_id": null, "tags": [], "creator": "marc@schregardus.com.au", "is_private": false, "count": 2, "id": 195133, "time": "2016-11-21T23:48:58Z", "bug_id": 60397, "creation_time": "2016-11-21T23:48:58Z", "text": "Hi Javen,\n\nThanks for the info - the unsafe method is definitely faster (and I'll update all our code to use it, as there are tests in place to ensure the spreadsheets are rendered correctly - so corruption shouldn't be an issue). However, it's still a lot slower than not using any merged cells. I've run the following benchmark tests to demonstrate:\n\n2000 Rows\n\n- No merging -> 1 second\n- Unsafe merging -> 2 seconds\n- Safe merging -> 33 seconds\n\n10,000 Rows\n\n- No merging -> 2 seconds\n- Unsafe merging -> 39 seconds\n- Safe merging - > hadn't completed after 5 mins, so gave up :-)\n\nCheers,\n\nMarc"}, {"count": 3, "text": "Here's the implementation [1]. Looks fairly benign, though there could be performance problems in method calls.\n\nCan you test getNumberOfCells and formatAsString to see if either of these are the cause of the 39 second performance?\nfor (CellRangeAddress region : regionsToAdd) {\n    region.getNumberOfCells();\n    region.formatAsString();\n}\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFSheet.java?revision=1768589&view=markup#l347", "bug_id": 60397, "is_private": false, "id": 195135, "time": "2016-11-22T02:01:38Z", "creator": "onealj@apache.org", "creation_time": "2016-11-22T02:01:38Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 195868, "time": "2017-01-05T09:53:46Z", "bug_id": 60397, "creation_time": "2017-01-05T09:53:46Z", "is_private": false, "text": "It would probably be faster for us to read the merged regions into a java List and discard the CTMergedRegions, operate on the Java List, and then recreate the CTMergedRegions XML nodes when writing the workbook. Not sure whether this would improve the speed here, but I'm guessing worksheet.getMergeCells() and ctMergeCells.addNewMergeCell() are expensive calls since it's creating and linking XML nodes in a DOM. This work could be deferred to when the workbook is written out."}, {"count": 5, "text": "I have been watching this bug, and wanted to add some information that I have gathered since I didn't see any progress.  Here is my testcase.\n\nfor(int i=0; i < 20000; i++) {\n   for(int j=0; j < 30; j+=3) {\n      CellRangeAddress range = new CellRangeAddress(i,i,j,j+2);\n      sheet.addMergedRegionUnsafe(range);\n   }\n}\n\nThe results get quite a bit worse as the number of rows/merged region number increases.\n\n1000  rows -> 1.2 seconds\n10000 rows -> 100 seconds\n20000 rows -> Over 5 minutes.\n\nI dropped the above code and profiled it and turns out the time spent is in the return statement of addMergedRegion(), ctMergeCells.sizeOfMergeCellArray();\n\nI am not using the return value of this method, after creating a locally modified version of the XSSFSheet class, I created a method without the return statement and the testcase finishes in less then 1 second instead of over 5 minutes for 20,000 rows.\n\nHere is the stack from profiler which was 90% of time spent\nStack Trace\norg.apache.xmlbeans.impl.store.Locale.count(Xobj, QName, QNameSet)\norg.apache.xmlbeans.impl.store.Xobj.count_elements(QName)\t\norg.openxmlformats.schemas.spreadsheetml.x2006.main.impl.CTMergeCellsImpl.sizeOfMergeCellArray()\norg.apache.poi.xssf.usermodel.XSSFSheet.addMergedRegion(CellRangeAddress, boolean)\norg.apache.poi.xssf.usermodel.XSSFSheet.addMergedRegionUnsafe(CellRangeAddress)", "bug_id": 60397, "is_private": false, "id": 198748, "time": "2017-05-09T16:54:01Z", "creator": "stephen.webster@inetsoft.com", "creation_time": "2017-05-09T16:54:01Z", "tags": [], "attachment_id": null}, {"count": 6, "text": "That makes sense.  All XmlBeans methods are ridiculously expensive.  Javen's suggestion of using temporary POJOs to avoid multiple bean operations seems like a good one, as well as a new method with a void return for cases that don't need it, like yours.\n\nMany other places we've elected to track data outside of the bean structures for performance reasons, especially in things like the *Evaluator classes.  This sounds like another candidate.", "bug_id": 60397, "attachment_id": null, "id": 198749, "time": "2017-05-09T17:09:29Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-05-09T17:09:29Z", "tags": [], "is_private": false}]
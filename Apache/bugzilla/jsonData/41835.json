[{"count": 0, "tags": [], "creator": "abercrombiegdl@hotmail.com", "attachment_id": null, "is_private": false, "id": 100360, "time": "2007-03-13T15:52:25Z", "bug_id": 41835, "creation_time": "2007-03-13T15:52:25Z", "text": "The provider for smart filtering is not being called when the match matches \nthe value declared as dispatch for integer and unconditional arguments. ie, \nyou have next directives in httpd.conf ->\nSetEnv foo 99                                      \nFilterProvider include INCLUDES env=foo <100              \nFilterChain include\nAnd the document including the shtml file won't display it.\nFrom mod_filter.c in filter_lookup() some changes need to be done.\nSee below an excerpt from the code that i modified\n        if (!str) {\n            // if (provider->match_type == DEFINED && provider->match.string) \n{ /* THIS IS NOT ALWAYS TRUE SINCE match_type MAY BE A DIFFERENT TYPE */\n                match = 0;\n            //}\n        }\n        //else if (!provider->match.string) {\t/* IS BETTER TO VERIFY NOT \nNULLS BELOW FOR provider->match.string AND provider->match.regex ONLY */\n        //    match = 0;\n        //}\n        else {\n            /* Now we have no nulls, so we can do string and regexp matching */\n            switch (provider->match_type) {\n            case STRING_MATCH:\n                if (strcasecmp(str, provider->match.string)) {\n                    match = 0;\n                }\n                break;\n            case STRING_CONTAINS:\n                str1 = apr_pstrdup(r->pool, str);\n                ap_str_tolower(str1);\n                if (!strstr(str1, provider->match.string)) {\n                    match = 0;\n                }\n                break;\n            case REGEX_MATCH:\n                if (ap_regexec(provider->match.regex, str, 0, NULL, 0)\n                    == AP_REG_NOMATCH) {\n                match = 0;\n                }\n                break;\n            case INT_EQ:\n                if (atoi(str) != provider->match.number) {\n                    match = 0;\n                }\n                break;\n            case INT_LT:\n                if (atoi(str) >= provider->match.number) { /* IF YOU CONSIDER \nmatch IS SET TO 1 AND ONLY WILL BE SET TO ZERO FOR FAIL CASES THEN INCOMING */\n\t\t\t\t\t\t\t   /* INTEGER MUST BE \nGREATHER-THAN OR EQUAL TO SPECIFIED NUMBER. IT MAKES SENSE AS YOU SEE BELOW */\n\t\t\t\t\t\t\t   /* FOR INT_EQ WHERE \nTHE CONDITION IS != AND NOT == AND THIS APPLIES TO ALL NUMERIC COMPARISON. */\n                    match = 0;\n                }\n                break;\n            case INT_LE:\n                if (atoi(str) > provider->match.number) {  /* REVERSE \nCONDITION */\n                    match = 0;\n                }\n                break;\n            case INT_GT:\n                if (atoi(str) <= provider->match.number) {  /* REVERSE \nCONDITION */\n                    match = 0;\n                }\n                break;\n            case INT_GE:\n                if (atoi(str) < provider->match.number) {  /* REVERSE \nCONDITION */\n                    match = 0;\n                }\n                break;\n            case DEFINED:        /* we already handled this:-) */\n                break;\n            }\n        }"}, {"text": "This is a bug, but it's actually just some of the comparisons being reversed!\nIn a related bug, integer comparisons to 0 will fail.\n\nHacking a patch now.", "tags": [], "bug_id": 41835, "is_private": false, "count": 1, "id": 105962, "time": "2007-07-26T07:33:51Z", "creator": "nick@webthing.com", "creation_time": "2007-07-26T07:33:51Z", "attachment_id": null}]
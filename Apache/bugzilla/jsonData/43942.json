[{"count": 0, "text": "We wrote an authorisation module for integrating apache in our company's\nsecurity framework. This module is based on mod_authnz_ldap, and we can\nreproduce our problem with mod_authnz_ldap as well.\n\nThe problem occurs when a large list of attribute-values is loaded from ldap. In\nthis case, the account, that causes the crash, has an ldap attribute\n\"slResolvedPermissions\" with 3'500 values. These values are concatenated in\nmodules/ldap/util_ldap.c:uldap_cache_getuserdn() to a string of approx. 200k size.\n\nDuring this the process receives a SegFault and coredumps after concatenating\n2893 values and a string size of approx. 178'947 bytes.\n\nBacktrace:\n\n(gdb) bt\n#0  0x0000f050 in ?? ()\n#1  0xd21ceddc in apr_pstrcat (a=0x20239f20, __ellip=<incomplete type>) at\nstrings/apr_strings.c:165\n#2  0x200c734c in uldap_cache_getuserdn (r=0x20239f58, ldc=0x200dd1b8,\nurl=0x20242808\n\"ldap://sphinxps:392/ou=accounts,dc=swisslife,dc=ch?cn,slResolvedPermissions\",\n    basedn=0x20242868 \"ou=accounts,dc=swisslife,dc=ch\", scope=2,\nattrs=0x20242888, filter=0x2ff205f8 \"(&(objectclass=*)(cn=IXED))\",\nbinddn=0x2ff225f8, retvals=0x2ff225fc)\n    at util_ldap.c:1240\n#3  0x20075378 in authz_ldap_check_user_access (r=0x20239f58) at\nmod_authnz_ldap.c:590\n#4  0x1003bdec in ap_run_auth_checker (r=0x20239f58) at request.c:78\n#5  0x1003e2c0 in ap_process_request_internal (r=0x20239f58) at request.c:202\n#6  0x10043940 in ap_process_request (r=0x20239f58) at http_request.c:256\n#7  0x1004c32c in ap_process_http_connection (c=0x2022dfd0) at http_core.c:184\n#8  0x10035000 in ap_run_process_connection (c=0x2022dfd0) at connection.c:43\n#9  0x10035a34 in ap_process_connection (c=0x2022dfd0, csd=0x2022def8) at\nconnection.c:178\n#10 0x1000bda0 in child_main (child_num_arg=0) at prefork.c:640\n#11 0x1000b77c in make_child (s=0x20025780, slot=0) at prefork.c:680\n#12 0x1000c930 in ap_mpm_run (_pconf=0x200238e0, plog=0x20051a50, s=0x20025780)\nat prefork.c:956\n#13 0x10000e8c in main (argc=2, argv=0x2ff22b10) at main.c:730\n\nPlease not that line numbers in util_ldap.c are not accurate because of some\ndebug statements.\n\nFor reproducing this problem please set up an ldap server with an user as\ndescribed above; cn=username and a huge list of attributes slResolvedPermissions. \n\nConfigure a directory with the following .hraccess:\n\nAuthType basic\nAuthBasicProvider file\nAuthName \"Secret Stuff\"\nAuthUserFile /home/bele/apache/htdocs/spxtest/secret/htpasswd\n\nAuthLDAPURL\nldap://sphinxps:392/ou=accounts,dc=company,dc=com?cn,slResolvedPermissions\n\nAuthLDAPBindDN \"uid=Directory Reader,ou=Directory Users,dc=company,dc=com\"\nAuthLDAPBindPassword XXXXXX\n\nRequire ldap-attribute slResolvedPermissions=AV-K.BEST_AUSGABE.read\n\n\nI could not reproduce this problem on Solaris, so this is probably AIX specific.\nCompiler was xlc and alternatively gcc 4. Ldap library is openldap 2.3.39, httpd\nis 2.2.6.", "creator": "bernd.asf@emskeim.de", "attachment_id": null, "id": 110995, "time": "2007-11-22T09:49:08Z", "bug_id": 43942, "creation_time": "2007-11-22T09:49:08Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "bernd.asf@emskeim.de", "text": "With additional debugging I found something new: The problem is in apr_strings.c\nin function apr_pstrcat, when memory is requested from apr_palloc. The last call\nto apr_palloc before the coredump returns 0, so memcpy tries to copy to an\ninvalid destination.\n\napr_palloc returns NULL if and only if allocator_alloc return NULL in\napr_pools.c. This is teh case if malloc fails.\n\nSo the question is: What makes malloc fail on AIX?", "id": 111512, "time": "2007-12-06T09:09:45Z", "bug_id": 43942, "creation_time": "2007-12-06T09:09:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": ">What makes malloc fail on AIX?\n\n1) unavoidable address space limitations (I think the max heap is 2GB with 32-bit processes)\n\n2) ulimits\n\n3) starting Apache with httpd instead of apachectl, which skips the LDR_CNTRL setting in envvars, and \nyou're left with a default address space layout which doesn't allow much heap\n(LDR_CNTRL necessity applies only to 32-bit builds)\n\n4) out of paging space\n\n5) ???", "is_private": false, "bug_id": 43942, "id": 111514, "time": "2007-12-06T10:06:23Z", "creator": "trawick@apache.org", "creation_time": "2007-12-06T10:06:23Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "bernd.asf@emskeim.de", "text": "Created attachment 21240\nPatch - optimized string handling in util_ldap.c\n\nProblem was caused by a problematic algorithm in util_ldap.c, where for each\nattribue value apr_pstrcat was called. with each call new memory was allocated,\nso that in the end this operation caused an allocation of 260 mb for storing\n180 kb. This was optimized in uldap_cache_getuserdn.", "id": 111516, "time": "2007-12-06T10:44:42Z", "bug_id": 43942, "creation_time": "2007-12-06T10:44:42Z", "is_private": false, "attachment_id": 21240}, {"attachment_id": null, "tags": [], "bug_id": 43942, "text": "Can you please provide your patch as a unified diff?", "count": 4, "id": 111519, "time": "2007-12-06T11:56:03Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-06T11:56:03Z", "is_private": false}, {"count": 5, "tags": [], "creator": "bernd.asf@emskeim.de", "attachment_id": null, "id": 111529, "time": "2007-12-07T04:53:18Z", "bug_id": 43942, "creation_time": "2007-12-07T04:53:18Z", "is_private": false, "text": "Jeff,\n\nyour are right. We started httpd directly and so the data segment was limited to\n256 MB.\n\nSee\nhttp://publib.boulder.ibm.com/infocenter/tivihelp/v2r1/index.jsp?topic=/com.ibm.itame.doc/am60_perftune64.htm\n\nWith specifying the LDR_CNTRLs the process didn't crash anymore, but grew to a\nsize of 760 mb during retrieving the ldap attributes.\n\nThanks for this very helpful hint.\n\n\n"}, {"count": 6, "tags": [], "bug_id": 43942, "attachment_id": 21242, "id": 111530, "time": "2007-12-07T05:01:05Z", "creator": "bernd.asf@emskeim.de", "creation_time": "2007-12-07T05:01:05Z", "is_private": false, "text": "Created attachment 21242\nPatch - optimized attribute handling\n\nRegardless of the process doesn't crash anymore with correct LDR-CNTRLs I still\n think that this is bug in util_ldap.c\n\nIf you look at this piece of code:\n\n-\t     while (values && values[j]) {\n-\t\t str = str ? apr_pstrcat(r->pool, str, \"; \", values[j], NULL)\n-\t\t\t   : apr_pstrdup(r->pool, values[j]);\n\nSo with each iteration an new string is allocated with apr_pstrcat whereas the\nold string is not returned to the pool.\n\nIn my case I want to retrieve 3'500 attribute values. So this loop has 3'500\niterations and 3'500 strings are allocated, each a bit larger than the one\nbefore. This is exponential memory consumption.\n\nIn the end this loop consumes about 760 mb; in my patched version it takes only\nabout 800 kb. Still not optimal, but much better than before.\n\nPatch now in unified diff format as requested."}]
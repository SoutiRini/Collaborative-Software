[{"count": 0, "tags": [], "creator": "dfe@apple.com", "attachment_id": 29578, "id": 163334, "time": "2012-11-09T20:26:11Z", "bug_id": 54128, "creation_time": "2012-11-09T20:26:11Z", "is_private": false, "text": "Created attachment 29578\nRestores the exec task speed to ant 1.7 times\n\nChanges made between ant 1.7 and ant 1.8 slowed the exec task to a crawl.\n\nThe reason is that it changed blocking I/O to to polled I/O with a period of 100 ms.  In effect any task that completes inside of the 100 ms window will have to wait for the sleep(100) call to finish at which point the non-blocking read call realizes it has exhausted all data and actually exits.\n\nThe correct approach is to go back to blocking reads but upon detection of process termination follow a few simple steps:\n\n1. Use non-blocking available() call on the input ends of the subprocess's stdout,stderr streams and spin w/ 100 ms sleep until no bytes are available.  You can be certain this will exhaust all output because it runs after it is known that the subprocess has already exited.\n2. Call destroy() on the process object.  This closes the input streams which has the effect of unblocking the blocked read calls.\n3. Continue with the rest of the original code which is to stop the stream handler which joins the reading threads.  Because the read calls have been unblocked and exhausted all input the join will complete immediately in all cases.\n\nThis has been tested on OS X 10.8 Mountain Lion and it restores the exec task speed back to ant 1.7 series levels (i.e. 20 seconds to run our exec-heavy build task instead of 2-3 minutes).\n\nIt will obviously require testing on the Windows platform where the original Bug 5003 was reported to verify it didn't regress that bug fix."}, {"count": 1, "tags": [], "bug_id": 54128, "text": "I have an ANT build.xml that perform <exec> task for 400++ times.  The job use about 84 seconds in Ant 1.7.1.\n\nI perform the same task in Ant 1.8.4 and it use 227 seconds.\n\nI then patch my ANT 1.8.4 with your diff patch and now it takes 99 seconds to finish the job.  There is still a significant 17% increase of time in seconds to finish the job compare to ANT 1.7.1.  Is that possible to further optimize?\n\nThank you.", "id": 164998, "time": "2013-02-02T00:52:46Z", "creator": "cychau@gmail.com", "creation_time": "2013-02-02T00:52:46Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 54128, "attachment_id": null, "id": 165736, "time": "2013-03-11T04:33:47Z", "creator": "cychau@gmail.com", "creation_time": "2013-03-11T04:33:47Z", "is_private": false, "text": "This problem doesn't fix in version 1.9.0"}, {"count": 3, "text": "The patch doesn't seems to fix all the speed issue in ANT 1.8.\n\nAn exec task with redirector and outputfilterchain perform badly in ANT 1.8 even the patch has applied:\n\n<exec executable=\"${p.tdump.bat}\" failonerror=\"false\">\n  <redirector output=\"${p.file.bpl}\" append=\"true\">\n    <outputfilterchain>\n      <headfilter lines=\"-1\" skip=\"2\" />\n      <linecontainsregexp>\n        <regexp pattern=\"^IMPORT:\"/>\n      </linecontainsregexp>\n\n      <replacestring from=\"IMPORT:\" />\n      <tokenfilter delimoutput=\" \">\n        <StringTokenizer />\n      </tokenfilter>\n    </outputfilterchain>\n  </redirector>\n</exec>", "bug_id": 54128, "is_private": false, "id": 165828, "time": "2013-03-14T08:26:42Z", "creator": "cychau@gmail.com", "creation_time": "2013-03-14T08:26:42Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54128, "attachment_id": null, "is_private": false, "id": 169160, "time": "2013-08-06T02:45:32Z", "creator": "timw@apache.org", "creation_time": "2013-08-06T02:45:32Z", "text": "This also appears to affect the symlink task.\n\nI have builds using repeated symlink invocations to link reasonably sized (10s-100s) collections of files - with Ant 1.7 this is almost instantaneous, but with Ant 1.9.2 there is a large pause (~300 ms per invocation, which adds up quickly)."}, {"count": 5, "text": "Created attachment 30720\nAlternative patch to speed up exec\n\nI've attached an alternative fix, which addresses the core problem of the PumpStreamHandler blindly joining the StreamPumper thread for 200ms without signalling it to exit.\nStreamPumper is also changed to drain available output on finish, which is required when it is in 'use available' mode as fast executing tasks will most often exit before the output is read.\n\nA fixed tree is also available at https://github.com/orionhealth/ant/tree/features/fast-exec.", "creator": "timw@apache.org", "is_private": false, "id": 169346, "time": "2013-08-11T21:45:03Z", "bug_id": 54128, "creation_time": "2013-08-11T21:45:03Z", "tags": [], "attachment_id": 30720}, {"count": 6, "tags": [], "creator": "timw@apache.org", "attachment_id": 30721, "is_private": false, "id": 169357, "time": "2013-08-12T09:49:13Z", "bug_id": 54128, "creation_time": "2013-08-12T09:49:13Z", "text": "Created attachment 30721\nAlternative patch to speed up exec\n\nI've updated my fix to correct a problem with dropping data blocks if the stream pumper was stopped between reading and writing a block.\n\nAlso fixed a race condition observed in testing where the stream pumper is stopped before the thread running it enters the run() method, which can cause hanging/require interruption."}, {"count": 7, "tags": [], "bug_id": 54128, "is_private": false, "text": "Any chance that this patch is reviewed and merged? I tested it on some builds which use apply tasks a lot, and reduced build times from several minutes to several seconds...", "id": 171735, "time": "2013-12-13T20:18:42Z", "creator": "laurent.goujon@online.fr", "creation_time": "2013-12-13T20:18:42Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 54128, "is_private": false, "id": 171756, "creation_time": "2013-12-16T01:43:04Z", "time": "2013-12-16T01:43:04Z", "creator": "antoine@apache.org", "text": "this looks interesting.", "attachment_id": null}, {"count": 9, "text": "I have applied the patch supplied by Tim Whittington and yes, it has a dramatic effect. On my Mac I have been able to run 100 exec invocations of \"ls\" in 1 second with your patch as opposed to  41 seconds before. Well done ! The code is checked in in ant trunk and will be part of the release when someone creates Ant 1.9.3", "creator": "antoine@apache.org", "attachment_id": null, "id": 171758, "time": "2013-12-16T04:23:24Z", "bug_id": 54128, "creation_time": "2013-12-16T04:23:24Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "paltzern@hdpgmbh.de", "attachment_id": null, "id": 171763, "time": "2013-12-16T08:29:54Z", "bug_id": 54128, "creation_time": "2013-12-16T08:29:54Z", "is_private": false, "text": "Awesome! Thank you Tim and Antoine! I'm looking forward to be fast again! :-)"}, {"count": 11, "tags": [], "bug_id": 54128, "text": "*** Bug 50229 has been marked as a duplicate of this bug. ***", "id": 171867, "time": "2013-12-21T19:53:33Z", "creator": "bodewig@apache.org", "creation_time": "2013-12-21T19:53:33Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 171869, "time": "2013-12-21T19:53:38Z", "bug_id": 54128, "creation_time": "2013-12-21T19:53:38Z", "text": "*** Bug 51387 has been marked as a duplicate of this bug. ***"}, {"count": 13, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 171871, "time": "2013-12-21T19:53:47Z", "bug_id": 54128, "creation_time": "2013-12-21T19:53:47Z", "text": "*** Bug 48734 has been marked as a duplicate of this bug. ***"}, {"count": 14, "tags": [], "bug_id": 54128, "attachment_id": null, "text": "*** Bug 49384 has been marked as a duplicate of this bug. ***", "id": 171873, "time": "2013-12-21T19:53:56Z", "creator": "bodewig@apache.org", "creation_time": "2013-12-21T19:53:56Z", "is_private": false}, {"count": 15, "text": "I tested exec in the release 1.9.3 and unfortunately there is no speed up for me!\n\nI could reduce the problem to one single (sic!) exec-call that produces a lot of logging-output (about 10'000'000 chars in about 24'000 lines).\n\nThis exec-call takes 10 seconds with 1.7.1 and 210 seconds with 1.9.3.", "creator": "paltzern@hdpgmbh.de", "attachment_id": null, "id": 172206, "time": "2014-01-09T10:56:52Z", "bug_id": 54128, "creation_time": "2014-01-09T10:56:52Z", "tags": [], "is_private": false}, {"count": 16, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "id": 172250, "time": "2014-01-10T00:15:31Z", "bug_id": 54128, "creation_time": "2014-01-10T00:15:31Z", "is_private": false, "text": "On which operating system, and with which JDK are you observing that slow behavior ?"}, {"count": 17, "text": "Win 7 Prof SP 1 and JDK 1.7.0_40-b43.", "creator": "paltzern@hdpgmbh.de", "is_private": false, "id": 172259, "time": "2014-01-10T07:22:40Z", "bug_id": 54128, "creation_time": "2014-01-10T07:22:40Z", "tags": [], "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 54128, "attachment_id": null, "text": "I created this build file to test :\n<project name=\"doit\">\n<echo>ant.version=${ant.version}</echo>\n <script language=\"javascript\"> <![CDATA[\n\n      for (i=1; i<=1000; i++) {\n        exec = doit.createTask(\"exec\");\n        exec.setExecutable(\"attrib\");\n        exec.createArg().setValue(\"-r\");\n        exec.createArg().setValue(\"doit.xml\");\n        exec.perform();\n      }\n\n    ]]> </script>\n\n</project>\n\n---\nI ran the build file on Windows 7 with JDK 1.7 using this script :\nexport ANT_HOME=c:/opt/apache-ant-1.7.1\nant -f doit.xml\nexport ANT_HOME=c:/opt/apache-ant-1.9.2\nant -f doit.xml\nexport ANT_HOME=c:/opt/apache-ant-1.9.3\nant -f doit.xml\n----\nhere is the output :\n\n$ ./doit.sh\nBuildfile: doit.xml\n     [echo] ant.version=Apache Ant version 1.7.1 compiled on June 27 2008\n\nBUILD SUCCESSFUL\nTotal time: 8 minutes 6 seconds\nBuildfile: C:\\dev\\54128\\doit.xml\n     [echo] ant.version=Apache Ant(TM) version 1.9.2 compiled on July 8 2013\n\nBUILD SUCCESSFUL\nTotal time: 14 minutes 50 seconds\nBuildfile: C:\\dev\\54128\\doit.xml\n     [echo] ant.version=Apache Ant(TM) version 1.9.3 compiled on December 23 2013\n\nBUILD SUCCESSFUL\nTotal time: 8 minutes 5 seconds\n\nThe test build file as you can see runs 1000 times attrib on a single file.\nThe performance of Ant 1.7.1 and Ant 1.9.3 in this test are the same, Ant 1.9.2 is much slower.\n\nIs there something specific to the command that you are running which is such that it is slow under Ant 1.9.3 ? Did you set ANT_HOME to point to the installation of Ant 1.9.3 when you tested it ?", "id": 172291, "time": "2014-01-12T00:22:50Z", "creator": "antoine@apache.org", "creation_time": "2014-01-12T00:22:50Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 54128, "is_private": false, "text": "Thank you for looking into this again.\n\nI can confirm the results of your test.\n\nI modified it to the following:\n\n<project name=\"doit\" >\n  <echo>ant.version=${ant.version}</echo>\n\n  <exec executable=\"cmd\" dir=\"c:\\\">\n    <arg value=\"/c\" />\n    <arg value=\"test.bat\" />\n  </exec>\n</project>\n\ntest.bat just produces a lot of output (10'000 lines with 1'000 chars each) and containts the following:\n@for /L %%i IN (1 1 10000) do @echon\n\n\nThe results:\n\n     [echo] ant.version=Apache Ant version 1.7.1 compiled on June 27 2008\n[...]\nBUILD SUCCESSFUL\nTotal time: 1 second\n\n\n     [echo] ant.version=Apache Ant(TM) version 1.9.2 compiled on July 8 2013\n[...]\nBUILD SUCCESSFUL\nTotal time: 38 seconds\n\n\n     [echo] ant.version=Apache Ant(TM) version 1.9.3 compiled on December 23 2013\n[...]\nBUILD SUCCESSFUL\nTotal time: 37 seconds\n\n\nHere, the performance fo 1.9.2 and 1.9.3 are the same and 1.7.1 is much faster!", "id": 172323, "time": "2014-01-13T09:48:58Z", "creator": "paltzern@hdpgmbh.de", "creation_time": "2014-01-13T09:48:58Z", "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 54128, "attachment_id": null, "text": "See Bug 50229, which is the single exec with a lot of output use case.", "id": 172339, "time": "2014-01-13T17:25:44Z", "creator": "msunde@tillnow.com", "creation_time": "2014-01-13T17:25:44Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 54128, "attachment_id": null, "text": "I'm still stuck with Ant 1.7.1 because of this issue.\n\nSo should I reopen Bug 50229?", "id": 173618, "time": "2014-03-04T16:24:40Z", "creator": "paltzern@hdpgmbh.de", "creation_time": "2014-03-04T16:24:40Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 54128, "attachment_id": null, "is_private": false, "id": 173622, "time": "2014-03-04T21:11:47Z", "creator": "timw@apache.org", "creation_time": "2014-03-04T21:11:47Z", "text": "I've tested all 3 of the test projects on this issue and Bug 50229:\n1. 'doit' with repeated calls to attrib\n2. 'doit' calling a batch file that produces large amounts of output\n3. 'test' that uses cat to pipe a large (40MB) file from stdin to stdout\n\nAll 3 test projects were run on:\n- Mac OS X Mavericks with Java 1.7.0_51\n- Windows 7 Enterprise SP1 in a VMware Fusion VM with Java 1.7.0_51\n\n(There were obviously local adaptations for the execs).\n\nAll 3 test projects were run with the following versions of Ant:\n- 1.7.1\n- 1.9.2 with my patch applied\n- 1.9.3\n- 1.9.4beta (built from trunk)\n\nAll of the tested Ant versions had comparable (to within a second or two) execution times on all of the test projects."}, {"count": 23, "text": "(In reply to paltzern from comment #19)\n\n> \n> The results:\n> \n>      [echo] ant.version=Apache Ant version 1.7.1 compiled on June 27 2008\n> [...]\n> BUILD SUCCESSFUL\n> Total time: 1 second\n> \n> \n>      [echo] ant.version=Apache Ant(TM) version 1.9.2 compiled on July 8 2013\n> [...]\n> BUILD SUCCESSFUL\n> Total time: 38 seconds\n> \n> \n>      [echo] ant.version=Apache Ant(TM) version 1.9.3 compiled on December 23\n> 2013\n> [...]\n> BUILD SUCCESSFUL\n> Total time: 37 seconds\n> \n> \n> Here, the performance fo 1.9.2 and 1.9.3 are the same and 1.7.1 is much\n> faster!\n\n\nThe Ant 1.7.1 result here looks anomalous - in my OS X and Windows 7 environment this test takes about 20 seconds on 1.7.1 and 1.9.3.\n\nIf the result is piped to a file this goes down to about 3 seconds (limited mainly by I/O).\n\nWriting that output file to the console in Windows (type fu.txt) takes about as long as the execution with Ant, indicating that the execution time is dominated by console output time. \n\nIt seems implausible for the entire test to execute in 1 second, bettering the execution time of the 'type' command.", "bug_id": 54128, "attachment_id": null, "id": 173623, "time": "2014-03-04T21:19:56Z", "creator": "timw@apache.org", "creation_time": "2014-03-04T21:19:56Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "creator": "timw@apache.org", "attachment_id": null, "id": 173624, "creation_time": "2014-03-04T21:22:21Z", "time": "2014-03-04T21:22:21Z", "bug_id": 54128, "text": "(In reply to Antoine Levy-Lambert from comment #18)\n> here is the output :\n> \n> $ ./doit.sh\n> Buildfile: doit.xml\n>      [echo] ant.version=Apache Ant version 1.7.1 compiled on June 27 2008\n> \n> BUILD SUCCESSFUL\n> Total time: 8 minutes 6 seconds\n> Buildfile: C:\\dev\\54128\\doit.xml\n>      [echo] ant.version=Apache Ant(TM) version 1.9.2 compiled on July 8 2013\n> \n> BUILD SUCCESSFUL\n> Total time: 14 minutes 50 seconds\n> Buildfile: C:\\dev\\54128\\doit.xml\n>      [echo] ant.version=Apache Ant(TM) version 1.9.3 compiled on December 23\n> 2013\n> \n> BUILD SUCCESSFUL\n> Total time: 8 minutes 5 seconds\n\nAll of these times look anomalous - I get times of about 20 seconds on all versions in my Windows 7 environment, and these times indicate about 480ms per attrib execution on 1.7.1 which seems incredible.\n\nIs it possible the loop count of the script was much higher when these timings were taken?", "is_private": false}, {"count": 25, "text": "> It seems implausible for the entire test to execute in 1 second, bettering\n> the execution time of the 'type' command.\n\nHaving said that, I can get the execution time down to about 2 seconds with Ant 1.7.1 by piping the output to a file or the NUL device.\n\nWith that approach Ant 1.7.1 is clearly faster (about 2 seconds) than 1.9.3+ (about 4 seconds) which I imagine will be the 100ms pause penalty applied in StreamPumper.waitForInput(InputStream) each time there is 0 bytes available (which is often the case after reading a line from STDIN).\n\nSome experimentation reveals that reducing that pause time does speed up the 1.9.x execution, but if it's put too low the execution times ramp up a lot - it appears that there's a significant penalty to calling available() too much. The penalty isn't in calling available() (that takes about 10-20 microseconds on average), so it might some kind of contention.", "bug_id": 54128, "attachment_id": null, "id": 173625, "time": "2014-03-04T21:58:29Z", "creator": "timw@apache.org", "creation_time": "2014-03-04T21:58:29Z", "tags": [], "is_private": false}, {"count": 26, "tags": [], "bug_id": 54128, "attachment_id": null, "is_private": false, "id": 173628, "time": "2014-03-05T07:59:41Z", "creator": "paltzern@hdpgmbh.de", "creation_time": "2014-03-05T07:59:41Z", "text": "Hi Tim,\n\nthank you for doing more investigation on this issue!\n\nI figured that the difference seems to be whether you run the script via Eclipse or Windows console!\n\nI can observe the huge performance difference between ant 1.7.1 and the others only (sic!) when run with Eclipse (4.3.0).\n\nWith the Win7 console it takes as long as you state.\n\nAny idea what could cause this strange behaviour and how to fix it?"}, {"count": 27, "tags": [], "creator": "timw@apache.org", "is_private": false, "id": 173638, "creation_time": "2014-03-05T17:23:47Z", "time": "2014-03-05T17:23:47Z", "bug_id": 54128, "text": "(In reply to paltzern from comment #26)\n> \n> I can observe the huge performance difference between ant 1.7.1 and the\n> others only (sic!) when run with Eclipse (4.3.0).\n> \n> With the Win7 console it takes as long as you state.\n> \n> Any idea what could cause this strange behaviour and how to fix it?\n\nThe Eclipse console will slow down a lot if console output isn't limited and you try to output too much (which your test does).\n\nI wonder if this issue can be re-resolved now.", "attachment_id": null}, {"count": 28, "text": "In this case, the eclipse console speeds things up for 1.7.1!\n\nSorry, that my last comment didn't make that clear.\n\nHere are the times for my doit-example on my machine:\n\n        win console    eclipse console\n1.7.1    42 seconds          1 second\n1.9.2    43 seconds         38 seconds\n1.9.3    43 seconds         37 seconds\n\nAnd console output in eclipse is not limited!", "bug_id": 54128, "attachment_id": null, "id": 173652, "time": "2014-03-06T06:58:26Z", "creator": "paltzern@hdpgmbh.de", "creation_time": "2014-03-06T06:58:26Z", "tags": [], "is_private": false}, {"count": 29, "tags": [], "creator": "paltzern@hdpgmbh.de", "attachment_id": null, "id": 174979, "time": "2014-05-02T10:25:26Z", "bug_id": 54128, "creation_time": "2014-05-02T10:25:26Z", "is_private": false, "text": "Are there any new insights on this one?\n\nA possible workaround?\n\nAnything I can test to help you find the problem?"}, {"count": 30, "text": "Tim's fix is confirmed working here.\n\nIf I had to guess I'd say paltzern's outlier time for 1.7.1 outputting to the Eclipse console (1 second compared to around 40 for every other case) is due to the fact that Tim Whittington's patch also fixed the problem of output getting dropped in a race when the process on the other side of the pipe does not consume it fast enough.\n\nAs the originator of the bug I am marking it as resolved in ant 1.9.3. Paltzern can open up another bug if he believes there is another problem.", "creator": "dfe@apple.com", "is_private": false, "id": 174998, "time": "2014-05-02T20:44:29Z", "bug_id": 54128, "creation_time": "2014-05-02T20:44:29Z", "tags": [], "attachment_id": null}, {"count": 31, "text": "As suggested I filed the new Bug 56487.", "creator": "paltzern@hdpgmbh.de", "is_private": false, "id": 175020, "time": "2014-05-05T07:56:37Z", "bug_id": 54128, "creation_time": "2014-05-05T07:56:37Z", "tags": [], "attachment_id": null}]
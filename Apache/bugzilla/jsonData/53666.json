[{"count": 0, "tags": [], "bug_id": 53666, "is_private": false, "text": "While trying to configure some Sybase DB-backed redirections, I noticed, that ALL of my queries were failing, even when the reported keys were present in the queried table.\n\nDigging deep into the dbd/dbd_freetds, I noticed, that the specified query never makes it to the freetds-driver's code. For example, the driver's dbd_freetds_prepare() invoked by apr_dbd_prepare() sees the line, that was already \"munched\" by the caller.\n\nIn the below output from gdb, notice the difference between query in frame #1 and #2:\n\n#1  0x00002aaab11a866d in dbd_freetds_prepare (pool=0x2aaab32c3178, sql=0x2aaab32c1260, \n    query=0x2aaab32c32e0 \"SELECT seo_url FROM CT_SEO WHERE vgn_url = ''\", label=0x2aaaaae082f0 \"map_v2s\", nargs=1, nvals=1, types=0x2aaab32c3320, \n    statement=0x7fffffffe0f0) at dbd/apr_dbd_freetds.c:493\n        stmt = 0x2aaab32c3328\n#2  0x00002aaaab19a523 in apr_dbd_prepare (driver=0x2aaab13a97e0, pool=0x2aaab32c3178, handle=0x2aaab32c1260, \n    query=0x2aaaaae08304 \"SELECT seo_url FROM CT_SEO WHERE vgn_url = '%s'\", label=0x2aaaaae082f0 \"map_v2s\", statement=0x7fffffffe0f0)\n    at dbd/apr_dbd.c:476\n        qlen = 62\n        i = 1\n        nargs = 1\n        nvals = 1\n        p = 0x2aaab32c330d \"\"\n        pq = 0x2aaab32c32e0 \"SELECT seo_url FROM CT_SEO WHERE vgn_url = ''\"\n        q = 0x2aaaaae08333 \"\"\n        t = 0x2aaab32c3320\n\nPerhaps, the driver should not be counting the args (nargs) on its own, relying on the apr_dbd_prepare to provide the count?..\n\nWhatever it is, the current latest RELEASE of apr-util's dbd is broken in this regard :-(", "id": 161125, "time": "2012-08-06T20:23:51Z", "creator": "mi+apache@aldan.algebra.com", "creation_time": "2012-08-06T20:23:51Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mi+apache@aldan.algebra.com", "is_private": false, "text": "FWIW, the same problem persists in APR/APU's current trunk...", "id": 161127, "time": "2012-08-06T20:57:25Z", "bug_id": 53666, "creation_time": "2012-08-06T20:57:25Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "bojan@rexursive.com", "attachment_id": null, "text": "Possible fix (completely untested):\n\nIndex: apr_dbd_freetds.c\n===================================================================\n--- apr_dbd_freetds.c\t(revision 1370619)\n+++ apr_dbd_freetds.c\t(working copy)\n@@ -794,7 +794,7 @@\n     dbd_freetds_get_name,\n     dbd_freetds_transaction_mode_get,\n     dbd_freetds_transaction_mode_set,\n-    \"\",\n+    \"%%s\",\n     dbd_freetds_pvbquery,\n     dbd_freetds_pvbselect,\n     dbd_freetds_pbquery,", "id": 161165, "time": "2012-08-08T01:26:28Z", "bug_id": 53666, "creation_time": "2012-08-08T01:26:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53666, "text": "No, that is not sufficient. Even running the\n\ndbd/test freetds ....\n\ncrashes on \"prepared select\":\n\n======== prepared select ========\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000003501079b80 in strlen () from /lib64/libc.so.6\n(gdb) where\n#0  0x0000003501079b80 in strlen () from /lib64/libc.so.6\n#1  0x00002aaaab143a89 in dbd_statement (pool=0x608128, stmt=0x608780, nargs=1, args=0x6087f0) at dbd/apr_dbd_freetds.c:220\n#2  0x00002aaaab143c2f in dbd_freetds_pselect (pool=0x608128, sql=0x608200, results=0x7fffffffe500, statement=0x608780, seek=0, values=0x6087f0) at dbd/apr_dbd_freetds.c:248\n#3  0x00002aaaab143d68 in dbd_freetds_pvselect (pool=0x608128, sql=0x608200, results=0x7fffffffe500, statement=0x608780, seek=0, args=0x7fffffffe3d0) at dbd/apr_dbd_freetds.c:270\n#4  0x00002aaaaaac27c8 in apr_dbd_pvselect (driver=0x2aaaab345760, pool=0x608128, handle=0x608200, res=0x7fffffffe500, statement=0x608780, random=0) at dbd/apr_dbd.c:519\n#5  0x0000000000401a97 in test_pselect (pool=0x608128, handle=0x608200, driver=0x2aaaab345760) at dbd.c:287\n#6  0x000000000040232e in main (argc=3, argv=0x7fffffffe688) at dbd.c:395\n(gdb) up\n#1  0x00002aaaab143a89 in dbd_statement (pool=0x608128, stmt=0x608780, nargs=1, args=0x6087f0) at dbd/apr_dbd_freetds.c:220\n220         len  = strlen(stmt->fmt) +1;\n(gdb) p stmt->fmt\n$1 = 0x73000000006087a0 <Address 0x73000000006087a0 out of bounds>\n\nThe fmt is corrupted by earlier attempts at regexp-matching and string-moving (actual culprit is the memmove call in recurse_args()) -- neither are necessary at all...", "id": 161168, "time": "2012-08-08T14:31:17Z", "creator": "mi+apache@aldan.algebra.com", "creation_time": "2012-08-08T14:31:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "mi+apache@aldan.algebra.com", "attachment_id": 29204, "id": 161212, "time": "2012-08-09T21:16:52Z", "bug_id": 53666, "creation_time": "2012-08-09T21:16:52Z", "is_private": false, "text": "Created attachment 29204\nFix/improve the FreeTDS-driver\n\nThe patch contains the following fix/improvements:\n* Compiles against both FreeTDS and Sybase's own OpenClient headers\n* Fixes access of uninitialized memory, when parsing the driver's parameters  (The above two resolve the Bug 53676)\n* Removes remnants of the driver's own attempts to parse the statement relying  instead on the caller (apr_dbd_prepare()) to insert magical '\\1' characters into  the placeholders for us\n* Speeds-up creating actual statements from the pre-processed templates\n* Fixes extraction cells to work with both Sybase and FreeTDS libraries (use  dbdatlen() instead of dbcollen())\n* Records and makes available errors/messages\n* Removes the attempts to \"untaint\" the arguments -- this should, probably, be done by the callers and -- when the input data is untrusted -- mitigated by the database-permissions\n\nPotential problems:\n* New code may be mixing tabs and spaces not in accordance with APU's current coding style\n* The new error-handling code may be too cavalier in allocating strings from the pool(s). This should be infrequent, but, if the caller keeps submitting erroneous statements using the same handle, the handle's pool may grow too large -- help wanted.\n* On a few (rare) occasions the new code will use fprintf(stderr) -- in the belief, that outputting such messages somewhere is still better, than ignoring them completely (and leaving the user wonder, why a login does not work, for example)\n* Parsing of the statement template relies on the unprintable character '\\1' to be inserted into the placeholders for us by the apr_dbd_prepare(). I would much rather reimplement this using the proposal in Bug 53689 instead\n\nComfortable reassurance:\n* With these changes the module (tested against both FreeTDS and Sybase) passes most of the test/dbd.c (which needs to be modified as per Bug 53687) -- while remaining clean under valgrind:\n\n% valgrind --show-reachable=yes --leak-check=full --track-origins=yes test/dbd freetds server=v6_icstest_nj2x,host=s605202nj2sl267.uswhwk6.savvis.net,username=testV6icsuser,password=tV6icsuser,port=6200,charset=iso15,lang=us_english\n==27683== Memcheck, a memory error detector\n==27683== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.\n==27683== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info\n==27683== Command: test/dbd freetds server=v6_icstest_nj2x,host=s605202nj2sl267,username=XXXX,password=XXX,port=6200,charset=iso15,lang=us_english\n==27683== \nLoaded freetds driver OK.\nName too long for LOGINREC field\nv6_test_nj2x: Changed database context to 'v6content'.\n\nOpened freetds[server=v6_icstest_nj2x,host=s605202nj2sl267,username=XXXX,password=XXX,port=6200,charset=iso15,lang=us_english] OK\n======== create table ========\ncreate table test successful\n\n======== insert rows ========\ninsert rows test successful\n\n======== invalid op ========\ninvalid op returned 1 (should be nonzero).  Error msg follows\n'v6_test_nj2x: apr_dbd_test1 not found. Specify owner.objectname or use sp_help to check whether the object exists (sp_help may produce lots of output).\n Line 1\n208: General SQL Server error: Check messages from the SQL Server'\nvalid op returned 0 (should be zero; error shouldn't affect subsequent ops)\ninvalid op test successful\n\n======== select random ========\nget_row failed: NO_MORE_ROWS (DBBUFFER option must be on for dbgetrow() to work)\nError in select random: rc=-1\n\n======== select sequential ========\nROW 1:  asdfgh  bar     1\nROW 2:  bar     foo\nROW 3:  foo\nROW 4:  qwerty  foo     0\nROW 5:  wibble  nothing 5\nROW 6:  wibble  other   5\nselect sequential test successful\n\n======== transactions ========\nTransaction 1\n1 rows updated\nValid insert returned 0.  Should be nonzero (fail) because transaction is bad\nTransaction ended (should be rollback) - viewing table\nA column of \"failed\" indicates transaction failed (no rollback)\nROW 1:  asdfgh  failed  1\nROW 2:  bar     failed\nROW 3:  foo     failed\nROW 4:  qwerty  failed  0\nROW 5:  wibble  failed  5\nROW 6:  wibble  failed  5\nROW 7:  zzz     aaa     3\nTransaction 2\n1 rows updated\nValid insert returned 0.  Should be zero (OK)\nTransaction ended (should be commit) - viewing table\nROW 1:  aaa     zzz     3\nROW 2:  asdfgh  success 1\nROW 3:  bar     success\nROW 4:  foo     success\nROW 5:  qwerty  success 0\nROW 6:  wibble  success 5\nROW 7:  wibble  success 5\nROW 8:  zzz     success 3\ntransactions test successful\n\n======== prepared select ========\nSelecting rows where col3 <= 3 and bar row where it's unset.\nShould show four rows.\nROW 1:  qwerty  success 0\nROW 2:  asdfgh  success 1\nROW 3:  bar     success\nROW 4:  zzz     success 3\nROW 5:  aaa     zzz     3\nprepared select test successful\n\n======== prepared query ========\nShowing table (should now contain row \"prepared insert 2\")\nROW 1:  aaa     zzz     3\nROW 2:  asdfgh  success 1\nROW 3:  bar     success\nROW 4:  foo     success\nROW 5:  prepared        insert  2\nROW 6:  qwerty  success 0\nROW 7:  wibble  success 5\nROW 8:  wibble  success 5\nROW 9:  zzz     success 3\nprepared query test successful\n\n======== drop table ========\ndrop table test successful\n\n==27683== \n==27683== HEAP SUMMARY:\n==27683==     in use at exit: 320 bytes in 2 blocks\n==27683==   total heap usage: 514 allocs, 512 frees, 345,428 bytes allocated\n==27683== \n==27683== 32 bytes in 1 blocks are still reachable in loss record 1 of 2\n==27683==    at 0x4A05430: calloc (vg_replace_malloc.c:418)\n==27683==    by 0x350180156A: _dlerror_run (in /lib64/libdl-2.5.so)\n==27683==    by 0x3501800F10: dlopen@@GLIBC_2.2.5 (in /lib64/libdl-2.5.so)\n==27683==    by 0x4E65339: apr_dso_load (dso.c:139)\n==27683==    by 0x4C2C442: apu_dso_load (apu_dso.c:164)\n==27683==    by 0x4C1C97B: apr_dbd_get_driver (apr_dbd.c:195)\n==27683==    by 0x401E57: main (dbd.c:359)\n==27683== \n==27683== 288 bytes in 1 blocks are still reachable in loss record 2 of 2\n==27683==    at 0x4A0610C: malloc (vg_replace_malloc.c:195)\n==27683==    by 0x3500C10C4B: add_to_global (in /lib64/ld-2.5.so)\n==27683==    by 0x3500C110C8: dl_open_worker (in /lib64/ld-2.5.so)\n==27683==    by 0x3500C0D075: _dl_catch_error (in /lib64/ld-2.5.so)\n==27683==    by 0x3500C107EB: _dl_open (in /lib64/ld-2.5.so)\n==27683==    by 0x3501800F99: dlopen_doit (in /lib64/libdl-2.5.so)\n==27683==    by 0x3500C0D075: _dl_catch_error (in /lib64/ld-2.5.so)\n==27683==    by 0x350180150C: _dlerror_run (in /lib64/libdl-2.5.so)\n==27683==    by 0x3501800F10: dlopen@@GLIBC_2.2.5 (in /lib64/libdl-2.5.so)\n==27683==    by 0x4E65339: apr_dso_load (dso.c:139)\n==27683==    by 0x4C2C442: apu_dso_load (apu_dso.c:164)\n==27683==    by 0x4C1C97B: apr_dbd_get_driver (apr_dbd.c:195)\n==27683==\n==27683== LEAK SUMMARY:\n==27683==    definitely lost: 0 bytes in 0 blocks\n==27683==    indirectly lost: 0 bytes in 0 blocks\n==27683==      possibly lost: 0 bytes in 0 blocks\n==27683==    still reachable: 320 bytes in 2 blocks\n==27683==         suppressed: 0 bytes in 0 blocks\n==27683== \n==27683== For counts of detected and suppressed errors, rerun with: -v\n==27683== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 35 from 7)"}, {"count": 5, "tags": [], "bug_id": 53666, "attachment_id": null, "text": "*** Bug 53676 has been marked as a duplicate of this bug. ***", "id": 161240, "time": "2012-08-10T16:02:38Z", "creator": "mi+apache@aldan.algebra.com", "creation_time": "2012-08-10T16:02:38Z", "is_private": false}, {"count": 6, "tags": [], "creator": "mi+apache@aldan.algebra.com", "attachment_id": 29807, "id": 164326, "time": "2013-01-02T19:25:17Z", "bug_id": 53666, "creation_time": "2013-01-02T19:25:17Z", "is_private": false, "text": "Created attachment 29807\nFix/improve the FreeTDS-driver\n\nAdditional improvements/fixes for items discovered during ongoing use of the driver."}, {"count": 7, "tags": [], "bug_id": 53666, "is_private": false, "text": "I can believe that it's broken, especially in the parts marked as unimplemented.\n\nBut why does your patch remove all the untainting code?  Can you explain, for example, how a user of mod_authn_dbd executes the standard user lookup query without opening the server to all kinds of SQL injection attack?", "id": 164334, "time": "2013-01-02T21:35:07Z", "creator": "nick@webthing.com", "creation_time": "2013-01-02T21:35:07Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "mi+apache@aldan.algebra.com", "attachment_id": null, "id": 164337, "time": "2013-01-02T21:49:18Z", "bug_id": 53666, "creation_time": "2013-01-02T21:49:18Z", "is_private": false, "text": "(In reply to comment #7)\n> I can believe that it's broken, especially in the parts marked as\n> unimplemented.\n\nIt is broken beyond belief. The global/driver API has changed since this driver was written and it was never brought up to date. The changes made to it allowed it to compile, but not work.\n\nTry it, if you dare :-)\n\n> But why does your patch remove all the untainting code?\n\nNo other driver is doing it, is one reason. It is also expensive (applying a regexp for each query) -- and not necessary, see below. But most importantly, because it may reject valid (and useful code): depending on application -- apr_dbd stuff can be used for purposes other than a read-only lookup from inside httpd.\n\n> Can you explain, for example, how a user of mod_authn_dbd executes the\n> standard user lookup query without opening the server to all kinds of\n> SQL injection attack?\n\nBy setting up -- and using -- a special database account whose access-permissions only allow it to SELECT from certain tables or, better yet, to only EXEC certain stored procedures. This is the only method guaranteed to work anyway..."}, {"count": 9, "tags": [], "creator": "mi+apache@aldan.algebra.com", "attachment_id": null, "id": 164799, "time": "2013-01-22T18:55:40Z", "bug_id": 53666, "creation_time": "2013-01-22T18:55:40Z", "is_private": false, "text": "FYI: The patch is now part of the FreeBSD port devel/apr1\n\nMy own apr-dbd using application now works on FreeBSD in addition to Linux."}, {"count": 10, "tags": [], "bug_id": 53666, "attachment_id": 29992, "id": 165484, "time": "2013-02-26T02:59:46Z", "creator": "mi+apache@aldan.algebra.com", "creation_time": "2013-02-26T02:59:46Z", "is_private": false, "text": "Created attachment 29992\nThe same patch but against APR Util 1.5.1"}]
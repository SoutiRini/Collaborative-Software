[{"count": 0, "tags": [], "creator": "steven@void.org", "attachment_id": null, "id": 6657, "time": "2001-10-12T16:49:49Z", "bug_id": 4137, "creation_time": "2001-10-12T16:49:49Z", "is_private": false, "text": "The following code, which uses the regexp1.2 package, gets different results when running on windows NT and linux, both running the javasoft jdk 1.3.  The problem seems to be with the handling of \\n in multiline matches.\n\n\n\n\n\nSee the comment at the beginning of the class for some more detail.\n\n\n\n\n\n--- BadRE.java ---\n\n\n\n\n\nimport org.apache.regexp.*;\n\n\n\n\n\n// The following class defines a regular expression and attempts to\n\n\n//   match a text string with it.  The regular expression is trying to\n\n\n//   match the literal \"window.location.href=\" at the beginning of a\n\n\n//   line, following any number of space characters.\n\n\n//\n\n\n// The results are different on Windows NT and Linux.  On linux\n\n\n//   running sun jdk1.3, it matches.  On Windows NT Workstation running\n\n\n//   sun jdk1.3, it doesn't match.\n\n\n//\n\n\n// If the \\n is removed from the beginning of the input string then it\n\n\n//   matches on windows and linux.\n\n\n// If bol (beginning-of-line) is changed from \"^[ \\t]*\" to \"^[ \\t\\n]*\" then\n\n\n//   it matches on windows and linux.\n\n\n// If bol is changed to \"^\\n[ \\t]*\" then it matches on windows and linux.\n\n\n//\n\n\n\n\n\npublic class BadRE {\n\n\n    public static RE makeRE() throws RESyntaxException {\n\n\n\tString bol = \"^[ \\t]*\";\n\n\n\tString regexp = bol + \"window.location.href=\";\n\n\n        RE matchRE = new RE(regexp, RE.MATCH_MULTILINE | RE.MATCH_CASEINDEPENDENT);\n\n\n\treturn matchRE;\n\n\n    }\n\n\n\n\n\n    public static void test() throws RESyntaxException {\n\n\n\tString input = \"\\nwindow.location.href=\";\n\n\n\tRE re = makeRE();\n\n\n\tif (re.match(input)) {\n\n\n            System.out.println(\"match: \" + re.getParen(0));\n\n\n        }\n\n\n\telse {\n\n\n            System.out.println(\"no match\");\n\n\n        }\n\n\n    }\n\n\n\n\n\n    public static void main(String [] args) throws RESyntaxException {\n\n\n\ttest();\n\n\n    }\n\n\n}"}, {"count": 1, "tags": [], "bug_id": 4137, "attachment_id": null, "id": 27832, "time": "2002-12-13T18:43:36Z", "creator": "jon@latchkey.com", "creation_time": "2002-12-13T18:43:36Z", "is_private": false, "text": "*** Bug 4183 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "bug_id": 4137, "attachment_id": null, "text": "I think the problem is that on Linux/Unix line.separator==\"\\n\",\nbut on Windows it is \"\\r\\n\".  Thus on Linux we consider string which we match as to line text (and last line matches to regexp), but on Window this is one \nline text and this line diesn't match to regexp.\n\nTo correct test we should use\nString input = System.getProperty(\"line.separator\") + \"window.location.href=\";\n\nSo, I would say that the test is incorrect.\n", "id": 45335, "time": "2003-10-10T09:15:22Z", "creator": "son@sparc.spb.su", "creation_time": "2003-10-10T09:15:22Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 4137, "attachment_id": 9656, "id": 49511, "time": "2003-12-22T02:37:29Z", "creator": "son@sparc.spb.su", "creation_time": "2003-12-22T02:37:29Z", "is_private": false, "text": "Created attachment 9656\nSuggested fix for the bug"}, {"count": 4, "text": "Nice patch! I'll test it and apply as soon as I have a bit of time... (ps: your\npatches look different... do you/can you use \"diff -u\"?)", "creator": "vgritsenko@apache.org", "attachment_id": null, "id": 49512, "time": "2003-12-22T02:42:31Z", "bug_id": 4137, "creation_time": "2003-12-22T02:42:31Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 4137, "attachment_id": null, "id": 49518, "time": "2003-12-22T07:15:12Z", "creator": "steven@void.org", "creation_time": "2003-12-22T07:15:12Z", "is_private": false, "text": "> To correct test we should use\n> String input = System.getProperty(\"line.separator\") + \"window.location.href=\";\n\nThe input comes from a remote web server, so the newline sequence used in the\ndata is not related to the platform that the code is running on."}, {"count": 6, "tags": [], "bug_id": 4137, "attachment_id": 9746, "id": 49834, "time": "2003-12-30T02:28:46Z", "creator": "son@sparc.spb.su", "creation_time": "2003-12-30T02:28:46Z", "is_private": false, "text": "Created attachment 9746\nSuggested fix in unified format."}, {"count": 7, "tags": [], "creator": "nhb_web@nexgo.de", "attachment_id": 9872, "is_private": false, "id": 50312, "time": "2004-01-09T11:51:08Z", "bug_id": 4137, "creation_time": "2004-01-09T11:51:08Z", "text": "Created attachment 9872\nAdditional patch: OP_ANY (.) did only check for \\n but should use new method isNewline"}, {"count": 8, "tags": [], "bug_id": 4137, "attachment_id": null, "text": "Oleg,\n\nI'd added following testcase:\n\n        r = new RE(\"^a.*b$\", RE.MATCH_MULTILINE);\n        if (!r.match(\"a\\nb\")) {\n            fail(\"\\\"a\\\\nb\\\" doesn't match\");\n        }\n        if (!r.match(\"a\\rb\")) {\n            fail(\"\\\"a\\\\rb\\\" doesn't match\");\n        }\n        if (!r.match(\"a\\r\\nb\")) {\n            fail(\"\\\"a\\\\r\\\\nb\\\" doesn't match\");\n        }\n        if (!r.match(\"a\\u0085b\")) {\n            fail(\"\\\"a\\\\u0085b\\\" doesn't match\");\n        }\n        if (!r.match(\"a\\u2028b\")) {\n            fail(\"\\\"a\\\\u2028b\\\" doesn't match\");\n        }\n        if (!r.match(\"a\\u2029b\")) {\n            fail(\"\\\"a\\\\u2029b\\\" doesn't match\");\n        }\n\nAnd two of them fail:\n[java] \"a\\nb\" doesn't match\n[java] \"a\\r\\nb\" doesn't match\n\nDo you have a suggestion what's wrong here?\n\n\nHendrik,\n\nWith your patch and test above, several tests fail.\n\n\nVadim\n", "id": 51467, "time": "2004-01-30T14:28:38Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-01-30T14:28:38Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 4137, "attachment_id": null, "is_private": false, "id": 51468, "time": "2004-01-30T14:43:57Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-01-30T14:43:57Z", "text": "Oops, I got it wrong. '.' should not match new line in MULTILINE mode. Correct\ntest is:\n        // Test MATCH_MULTILINE. Test that '.' does not mathces new line.\n        r = new RE(\"^a.*b$\", RE.MATCH_MULTILINE);\n        if (r.match(\"a\\nb\")) {\n            fail(\"\\\"a\\\\nb\\\" matches \\\"^a.*b$\\\"\");\n        }\n        if (r.match(\"a\\rb\")) {\n            fail(\"\\\"a\\\\rb\\\" matches \\\"^a.*b$\\\"\");\n        }\n        if (r.match(\"a\\r\\nb\")) {\n            fail(\"\\\"a\\\\r\\\\nb\\\" matches \\\"^a.*b$\\\"\");\n        }\n        if (r.match(\"a\\u0085b\")) {\n            fail(\"\\\"a\\\\u0085b\\\" matches \\\"^a.*b$\\\"\");\n        }\n        if (r.match(\"a\\u2028b\")) {\n            fail(\"\\\"a\\\\u2028b\\\" matches \\\"^a.*b$\\\"\");\n        }\n        if (r.match(\"a\\u2029b\")) {\n            fail(\"\\\"a\\\\u2029b\\\" matches \\\"^a.*b$\\\"\");\n        }\n\nAnd Hendrik's patch is working ok.\n\nVadim"}, {"count": 10, "text": "Patches applied, thanks to everybody.\n\nVadim", "creator": "vgritsenko@apache.org", "is_private": false, "id": 51470, "time": "2004-01-30T14:47:45Z", "bug_id": 4137, "creation_time": "2004-01-30T14:47:45Z", "tags": [], "attachment_id": null}]
[{"attachment_id": null, "tags": [], "creator": "Diego.SantaCruz@spinetix.com", "is_private": false, "count": 0, "id": 153287, "time": "2012-01-30T11:24:35Z", "bug_id": 52559, "creation_time": "2012-01-30T11:24:35Z", "text": "With our product we stumbled across a segfault in mod_dav_fs / mod_dav, as follows.\n\nWhen a PROPPATCH attempts to remove a non-existent dead property on a resource for which there is no dead property in the same namespace httpd segfaults (e.g., attempt to remove a property 'foo' in namespace 'http://example.com/bar' on a new resource which has no other dead properties).\n\nFurthermore, if the resource had no dead properties, after this segfault httpd leaves the dead property DBM in a state which causes an httpd segfault on every PROPFIND (the .pag and .dir files are both zero length).\n\nFrom our analysis the problem boils down to three issues. A patch for each follows."}, {"count": 1, "tags": [], "bug_id": 52559, "attachment_id": 28228, "is_private": false, "id": 153288, "time": "2012-01-30T11:31:18Z", "creator": "Diego.SantaCruz@spinetix.com", "creation_time": "2012-01-30T11:31:18Z", "text": "Created attachment 28228\nFirst patch to fix PROPPATCH segfault\n\nThis patch fixes the described segfault in the PROPPATCH.\n\nIn the described case a rollback cannot be created when doing the dav_method_proppacth(), because dav_propdb_get_rollback() fails without returning a rollback object. Thus the call to dav_propdb_apply_rollback() segfaults because rollback is NULL. This patch just protects against that case considering it a success."}, {"count": 2, "tags": [], "bug_id": 52559, "text": "Created attachment 28229\nDo not fail PROPPATCH when prop namespace not known\n\nWith the patch in attachment 28228 the PROPPATCH described above no longer segfaults httpd, but fails with a 500 error.\n\nAs stated in RFC 4918 (WebDAV), section 14.23, removing a non-existing property is not an error.\n\nThe failure comes from dav_propdb_get_rollback(), which returns an error for the non-existent property. It turns out that if the property's namespace is not known (as can well be the case for a non-existent property) dav_build_key() returns a zeroed key, but doing a dav_dbm_fetch() on such a key returns an error. In fact, APR's apr_dbm_fetch() returns APR_EINVAL for such a key (at least the SDBM backend).\n\nThe patch modifies dav_dbm_fetch() so that is catches this case and treats it as a \"key not found\", which is the actual error as the namespace index is built from the DBM.\n\nWith this patch httpd succeds the test case described above (doing a PROPPATCH to remove a non-existing property on a resource which does not have any other property in the same namespace).", "id": 153291, "time": "2012-01-30T12:31:23Z", "creator": "Diego.SantaCruz@spinetix.com", "creation_time": "2012-01-30T12:31:23Z", "is_private": false, "attachment_id": 28229}, {"count": 3, "tags": [], "bug_id": 52559, "attachment_id": 28230, "is_private": false, "id": 153292, "time": "2012-01-30T12:43:07Z", "creator": "Diego.SantaCruz@spinetix.com", "creation_time": "2012-01-30T12:43:07Z", "text": "Created attachment 28230\nDo not segfault on PROPFIND with a zero length DBM\n\nAs described above, when httpd segfaults during the PROPPATCH it leaves a zero length DBM if no other dead properties existed for the resource. Doing a PROPFIND on the resource segfaults httpd.\n\nThe cause of the segfault is that dav_get_allprops() does not check the return value of the first_name() nor next_name() DB hooks for errors. When the DBM is of zero length (both the .dir and .pag files are zero length) first_name() returns an error and leaves its 'name' argument uninitialized. But then 'name.ns' is accessed just after the first_name() call, possibly causing a segfault or other errors as 'name' is stack allocated.\n\nThe attached patch changes this so that the return value of first_name() and next_name() is checked and the while loop on the properties be stopped in case of error.\n\nAs it seems that dav_get_allprops() cannot return an error I could not see another way to handle this situation and this is how errors on the output_value() hook call are treated within dav_get_allprops() anyhow."}, {"count": 4, "tags": [], "bug_id": 52559, "text": "Forgot to mention, but the tests have been done against httpd 2.2.21. The attached patches are against this version too.", "id": 153293, "time": "2012-01-30T12:44:37Z", "creator": "Diego.SantaCruz@spinetix.com", "creation_time": "2012-01-30T12:44:37Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 52559, "attachment_id": null, "id": 166681, "time": "2013-04-17T18:57:10Z", "creator": "wiml@omnigroup.com", "creation_time": "2013-04-17T18:57:10Z", "is_private": false, "text": "I can confirm this crash still occurs in Apache 2.4.4: the PROPFIND causes a segfault and leaves the zero-length DAV prop db behind. (However, the zero-length prop db no longer causes later operations to crash the server, so that's progress I guess.)\n\n\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000010\n0x0000000100602c53 in dav_propdb_apply_rollback ()\n(gdb) bt\n#0  0x0000000100602c53 in dav_propdb_apply_rollback ()\n#1  0x00000001000c8d2d in dav_prop_rollback ()\n#2  0x00000001000c1b0e in dav_process_ctx_list ()\n#3  0x00000001000c2074 in dav_method_proppatch ()\n#4  0x00000001000c7063 in dav_handler ()\n#5  0x00000001000015ef in ap_run_handler ()\n#6  0x0000000100001eaf in ap_invoke_handler ()\n#7  0x000000010005b7de in ap_process_async_request ()\n#8  0x000000010005b8b0 in ap_process_request ()\n#9  0x00000001000573fb in ap_process_http_sync_connection ()\n#10 0x00000001000574f6 in ap_process_http_connection ()\n#11 0x0000000100019906 in ap_run_process_connection ()\n#12 0x0000000100019dd7 in ap_process_connection ()\n#13 0x00000001000e24d8 in child_main ()\n#14 0x00000001000e25e4 in make_child ()\n#15 0x00000001000e2c5d in prefork_run ()\n#16 0x000000010001c47d in ap_run_mpm ()\n#17 0x000000010000d924 in main ()"}, {"count": 6, "tags": [], "creator": "wiml@omnigroup.com", "is_private": false, "text": "The crash also still occurs in trunk/2.5 r1470659, no apparent change from 2.4.4", "id": 166769, "time": "2013-04-22T22:22:43Z", "bug_id": 52559, "creation_time": "2013-04-22T22:22:43Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "minfrin@sharp.fm", "is_private": false, "id": 166889, "time": "2013-04-27T17:39:13Z", "bug_id": 52559, "creation_time": "2013-04-27T17:39:13Z", "tags": [], "text": "First patch applied to trunk in r1476642."}, {"count": 8, "tags": [], "bug_id": 52559, "text": "Second patch applied to trunk in r1476644.", "id": 166890, "time": "2013-04-27T17:51:15Z", "creator": "minfrin@sharp.fm", "creation_time": "2013-04-27T17:51:15Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "minfrin@sharp.fm", "is_private": false, "text": "Third patch applied to trunk in r1476645.", "id": 166891, "time": "2013-04-27T17:52:37Z", "bug_id": 52559, "creation_time": "2013-04-27T17:52:37Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 52559, "attachment_id": null, "id": 166894, "time": "2013-04-27T19:07:54Z", "creator": "minfrin@sharp.fm", "creation_time": "2013-04-27T19:07:54Z", "is_private": false, "text": "Can you test and verify this works for you?\n\nBackport proposed for v2.4."}, {"count": 11, "text": "Backported to v2.4.5.", "creator": "minfrin@sharp.fm", "is_private": false, "id": 167146, "time": "2013-05-12T10:30:31Z", "bug_id": 52559, "creation_time": "2013-05-12T10:30:31Z", "tags": [], "attachment_id": null}, {"count": 12, "text": "Proposed for backport to v2.2.", "creator": "minfrin@sharp.fm", "is_private": false, "id": 167379, "time": "2013-05-23T13:20:19Z", "bug_id": 52559, "creation_time": "2013-05-23T13:20:19Z", "tags": [], "attachment_id": null}, {"count": 13, "text": "Confirming I can no longer reproduce this in the 2.4.x series.", "bug_id": 52559, "is_private": false, "id": 181693, "time": "2015-03-11T23:52:16Z", "creator": "wiml@omnigroup.com", "creation_time": "2015-03-11T23:52:16Z", "tags": [], "attachment_id": null}]
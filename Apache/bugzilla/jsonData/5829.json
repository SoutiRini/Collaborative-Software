[{"count": 0, "tags": [], "bug_id": 5829, "text": "In StandardManager, where all sessions are written into the same file\n(SESSIONS.ser) during shutdown..\n\nIf an attribute claims to be serializable but yet throws an exception when you\nattempt to do so (for example a HashMap containing some non-serializable values)\nthen this messes things up.  The object output stream is then in a messed up\nstate for a read; eg. the attribute which is a HashMap will read beyond the end\nof the data that it wrote in attempting to repopulate its value.., this then\neffectively makes the file garbage for the following sessions that are written.\nie. if one session breaks it, the rest of the sessions will fail..\n\nFurthermore, if you try to reload some attribute for which an IOException\nis thrown during the reloading (eg. Externalizable attributes with\nprotected/private constructors) then the resulting exception also halts the\nreload of the remaining sessions in this context..\n\nThus, each session needs to store its state in a separate file, and the write\nand read of each session needs to be wrapped up in some better exception\ncatching.  \n\nI've a patch for this..", "id": 9592, "time": "2002-01-13T13:28:41Z", "creator": "dsl@ts.com", "creation_time": "2002-01-13T13:28:41Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": 999, "bug_id": 5829, "is_private": false, "id": 9593, "time": "2002-01-13T13:29:39Z", "creator": "dsl@ts.com", "creation_time": "2002-01-13T13:29:39Z", "tags": [], "text": "Created attachment 999\nproposed fix to StandardManager for session read/write"}, {"count": 2, "tags": [], "bug_id": 5829, "is_private": false, "text": "what's next for this bug?  Is anyone going to test my patch in 4.0.1 and (if\nsuccessful) commit?  I'm getting so used to bugs being fixed in less than a day\nthat it looks like this has been forgotten!", "id": 9682, "time": "2002-01-16T03:46:14Z", "creator": "dsl@ts.com", "creation_time": "2002-01-16T03:46:14Z", "attachment_id": null}, {"count": 3, "attachment_id": 1018, "bug_id": 5829, "is_private": false, "id": 9692, "time": "2002-01-16T15:06:21Z", "creator": "dsl@ts.com", "creation_time": "2002-01-16T15:06:21Z", "tags": [], "text": "Created attachment 1018\n(Better) Patch to fix this bug"}, {"count": 4, "tags": [], "bug_id": 5829, "attachment_id": null, "is_private": false, "id": 9693, "time": "2002-01-16T15:07:09Z", "creator": "dsl@ts.com", "creation_time": "2002-01-16T15:07:09Z", "text": "Patch contains a bug (lead to NPE first time a new context for a new webapp\ninstalled)\n\nAttached is a fix to check for this..\n\nAlso, downgraded priority as suggested by Remy"}, {"attachment_id": null, "tags": [], "creator": "dsl@ts.com", "text": "grrr.. bugzilla put those up in the wrong order..  To make that clear, \nthe attachment labelled id=1018 is the working patch which (AFAIK) works\nand should be used instead of patch with id=999..", "count": 5, "id": 9694, "time": "2002-01-16T15:10:56Z", "bug_id": 5829, "creation_time": "2002-01-16T15:10:56Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 5829, "is_private": false, "id": 11088, "creation_time": "2002-02-22T09:01:50Z", "time": "2002-02-22T09:01:50Z", "creator": "dsl@ts.com", "text": "can we have this patch applied in 4.0.3, pretty please?  We're running a\nproduction site and we keep applying this patch manually each time there's\na new tomcat..", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 5829, "is_private": false, "id": 17243, "time": "2002-06-05T23:57:58Z", "creator": "bob@jadn.com", "creation_time": "2002-06-05T23:57:58Z", "tags": [], "text": "tomcat saves sessions into a single file.  Changing this behavior to use one\nfile per session could create hundreds of files. A better idea might be to use\nthe JDBCStore which saves each session seperately. "}, {"count": 8, "tags": [], "bug_id": 5829, "text": "yes indeed it could create hundreds of files, it's also slower than a single\nobject output stream on account of having to reserialize stuff that is common\nacross multiple sessions - but it would at least work, it plugs a problem that\ncan occur unwittingly in a defaultly-configured webapp.  We've been using my\npatch here on a high volumne transaction site, and it's worked a treat.  JDBC is\nthe proper way of doing it, granted, and had things worked when I originally\ncame to our project I'd have used it.  JDBC needs a little more configuration\nthan the standard serialization method too.", "id": 17307, "time": "2002-06-06T10:49:59Z", "creator": "dsl@ts.com", "creation_time": "2002-06-06T10:49:59Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 5829, "is_private": false, "id": 17683, "creation_time": "2002-06-12T16:11:54Z", "time": "2002-06-12T16:11:54Z", "creator": "bob@jadn.com", "text": "\nI was wondering, why are things being placed into the session that\nare not serializable.  Doesnt it seem like that is a bad idea?\n\n", "attachment_id": null}, {"count": 10, "attachment_id": null, "bug_id": 5829, "is_private": false, "id": 18352, "time": "2002-06-21T18:21:04Z", "creator": "bob@jadn.com", "creation_time": "2002-06-21T18:21:04Z", "tags": [], "text": "Humm...  I gave this some more thought.  How about an extra layer of\nabstraction.  Namely each session is serialized in memory, then the \nbyte array is written to the object stream.  Thus unserializable sessions will\nnot be saved.  Also, when restoring sessions if a session cannot be\nde-serialized (missing clases or whatever), the next session in the stream can\nstill be read and restored.   What do you think? \n"}, {"count": 11, "tags": [], "bug_id": 5829, "text": "I don't know when it was added but all the current versions (5.5.x, 6.0.x, 7.0.x) surround each attribute write in a try/catch and should the write fail, the attribute is replaced with a warning message.", "id": 142656, "time": "2010-12-13T14:38:38Z", "creator": "markt@apache.org", "creation_time": "2010-12-13T14:38:38Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 5829, "is_private": false, "id": 142684, "creation_time": "2010-12-14T14:12:13Z", "time": "2010-12-14T14:12:13Z", "creator": "chris@christopherschultz.net", "text": "(In reply to comment #11)\n> I don't know when it was added but all the current versions (5.5.x, 6.0.x,\n> 7.0.x) surround each attribute write in a try/catch and should the write fail,\n> the attribute is replaced with a warning message.\n\nDoes that mean that an object of type MyClass might be replaced by a String? That would certainly confuse code that was expecting a MyClass object and does proper NULL checking.\n\nWould either replacing the value with NULL or ignoring the session entirely be a better solution?", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "text": "Take a look at the code...", "count": 13, "id": 142685, "time": "2010-12-14T14:21:54Z", "bug_id": 5829, "creation_time": "2010-12-14T14:21:54Z", "is_private": false}]
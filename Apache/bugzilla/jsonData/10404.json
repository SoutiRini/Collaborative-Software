[{"count": 0, "tags": [], "bug_id": 10404, "text": "I would like to do a very simple thing:\nTest network conditions (socket, http) and generate a report that tells me if \nevery network resource is up or not.\n\nI found that doing this can be very complicated because of some interrelating \nissues.\n- property values can be true, false or NOT SET, also a property can be set \nonly once and is then like a constant.\n- the waitfor/condition tasks set a property to true or leave it unset.\n\nNow, if I wanted to test whether a socket is active and report this, I would \nlike to do it like this:\n\n<target name=\"socketcheck\" depends=\"\">\n    <condition property=\"socket.server1.3302\">\n        <socket server=\"1.1.1.1\" port=\"3302\"/>\n    </condition>\n</target>\n<target name=\"all\" depends=\"socketcheck\">\n    <echo>\n        Port 3302 on Server 1 available : ${socket.server1.3302}\n    </echo>\n</target>\n\nHowever, the first issue is that within the <condition> task, it is\nnot possible to specify, how much time is allotted to the sub expressions to be \nevaluated. Instead, for this I have to take the <waitFor> task.\nFirst of all, there shouldn't be a waitfor tasks at all because instead, one \nshould rather include the timout capabilities into the condition task.\nSecond, the logik of the waitfor task is an inverted one: a property can be set \n(to true in the default case), if a timeout is reached. The notion of the \ncondition task is better: if the condition is true, the property will be set to \ntrue. If a timout occurs, then the logical notion to maintain, would be to set \nthe property value to false.\nThe second problem is, that properties set from any of these two tasks are \neither set to a value or they are not being set at all!! This is awkward in the \ncase of reporting, because the echo statement in the above example will either \noutput \"Port 3302 on Server 1 available : true\" or, \"Port 3302 on Server 1 \navailable : ${socket.server1.3302}\"\n\nTherefore, in order to achieve just a simple socket test, not waiting for hours \nfor its timeout in case if it should fail, AND at the same time achieving a \npretty output, I would have to write s.th. like this:\n\n<target name=\"socketcheck\" depends=\"\">\n\n<echo>w1</echo>\n\n<waitfor timeoutproperty=\"socket.unavail.3302\" maxwait=\"5000000\">\n<not><socket server=\"1.1.1.1\" port=\"3302\"/></not>\n</waitfor>\n\n<echo>w2</echo>\n\n</target>\n\n<target name=\"all\" depends=\"socketcheck\">\n<echo>\n\n</echo>\n</target>", "id": 18840, "time": "2002-07-02T12:37:42Z", "creator": "wtff@freenet.de", "creation_time": "2002-07-02T12:37:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 10404, "attachment_id": null, "text": "sorry, hit the commit button too early ;)\n\n... write s.th like this, which looks very overloaded and inverted too:\n\n<target name=\"socketcheck\" depends=\"\">\n    <waitfor timeoutproperty=\"socket.server1.3301\" maxwait=\"5\" \nmaxwaitunit=\"second\">\n        <not>\n            <socket server=\"1.1.1.1\" port=\"3301\"/>\n        </not>\n    </waitfor>\n    <condition property=\"socket.mscdev1.3301\" value=\"false\">\n        <not>\n            <isset property=\"socket.mscdev1.3301\" />\n        </not>\n    </condition>\n</target>\t\n<target name=\"all\" depends=\"socketcheck\">\n    <echo>\n        Port 3301 on server 1 available : ${socket.server1.3301}\n    </echo>\n</target>\n\n\nYou see that this is a little bit crooked. Now assume that I would like to test \na whole bunch of socket connections.\n\nIn addition, the waitfor/socket task doesn't seem to work properly in terms of \nthe timeout constraints, because if the ip address tested is not available, the \ntasks waits very long, but i posted this within a separate report.\n\nI'd propose to merge the waitfor and condition task into one single task and \nname it condition. (bug-report 10398)\n\nThen I would either make this task set a property in any case, to true/false by \ndefault or two two other values that might be specified within attributes of \nthe new condition task.\n\n", "id": 18842, "time": "2002-07-02T12:47:00Z", "creator": "wtff@freenet.de", "creation_time": "2002-07-02T12:47:00Z", "is_private": false}, {"count": 2, "tags": [], "creator": "stevel@apache.org", "text": "you have to turn immutability to your advantage. there is no need to use a\ncondition on the second assignment; a straight \n\n<property name=\"socket.mscdev1.3301\" value=\"false\"/>\n\nwill suffice. \n\n", "id": 18854, "time": "2002-07-02T16:14:12Z", "bug_id": 10404, "creation_time": "2002-07-02T16:14:12Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 10404, "attachment_id": null, "id": 19260, "time": "2002-07-10T15:59:15Z", "creator": "wtff@freenet.de", "creation_time": "2002-07-10T15:59:15Z", "is_private": false, "text": "Thanks for your answer. I had already tried that before and tested it again but \nthis doesn't seem to work.\n\nIf I initially set a property to a certain value, then the property will retain \nthis value forever. The condition task or the waitfor task do not overwrite \nthis initally given value, which I would say, is correct because of properties \nbeing immutable.\n\nWhat I try to do is to have some property that is set to \"true\" if a network \nconnection is up and to \"false\" otherwise.\n\n---\n\nBesides: I also do not yet understand why immutability is s.th. desireable. Is \nthere any obvious reason for this, or could you point me towards some \ndocumentation that helps me understand?\nIn xslt, variables are immutable because of technical reasons. Is that the case \nwith ant as well, or is it a deliberate choice of taste? I once read that when \ncoding in a functional style, variables are initialised once and should then \nremain immutable to prevent \"sideeffects\". However I cannot imagine, what these \nsideeffects may be..."}, {"count": 4, "text": ">What I try to do is to have some property that is set to \"true\" if a network \n>connection is up and to \"false\" otherwise.\n\n<condition> doesnt set a property if the condition is false; do the condition\nfirst, the other set *after*\n\nimmutablitity was settled on because it lets outside agencies -the user,\ncontinuous integration tools like Gump, other build files, control your build\nfile from the outside by setting properties. \n\neg. on the command line you could go \nant -Dsocket.server1.3302=false\n\nhave the condition be the following (the or shortcuts so if the property is set\nto true or false, the test is skipped)\n    <condition property=\"socket.server1.3302\">\n      <or>\n         <isset property=\"socket.server1.3302\"/>\n         <socket server=\"1.1.1.1\" port=\"3302\"/>\n      </or>\n    </condition>\n    <property name=\"socket.mscdev1.3301\" value=\"false\"/>\n\n", "bug_id": 10404, "attachment_id": null, "id": 19348, "time": "2002-07-11T19:14:36Z", "creator": "stevel@apache.org", "creation_time": "2002-07-11T19:14:36Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 10404, "attachment_id": null, "text": "<condition property=\"socket.server1.3302\">\n...                         ^^^^^^^^^^^^\n</condition>\n<property name=\"socket.mscdev1.3301\" value=\"false\"/>\n                       ^^^^^^^^^^^^\n\nExcept these should actually be the same (not being nit-picky -- just trying to \navoid any further confusion).\n\nIOW: The way to conditionally set a default value for a property is to let \n<condition> have a shot at setting it first, then have a <property> that sets \nit to the default value. If the property was in fact set by <condition>, the \n<property> that has the default value will be a no-op, since <property> won't \nset a property that's already set.", "id": 19352, "time": "2002-07-11T19:33:30Z", "creator": "holtdl@yahoo.com", "creation_time": "2002-07-11T19:33:30Z", "is_private": false}]
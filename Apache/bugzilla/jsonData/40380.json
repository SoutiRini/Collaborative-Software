[{"count": 0, "tags": [], "bug_id": 40380, "attachment_id": null, "text": "public void expire(boolean notify) {\n\n        // Mark this session as \"being expired\" if needed\n        if (expiring)\n            return;\n\n// No man's land here\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;", "id": 92812, "time": "2006-08-31T18:57:30Z", "creator": "cquezel@taleo.com", "creation_time": "2006-08-31T18:57:30Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 40380, "attachment_id": null, "id": 97283, "time": "2006-12-25T05:43:08Z", "creator": "yoavs@computer.org", "creation_time": "2006-12-25T05:43:08Z", "is_private": false, "text": "Have you run into any issues with this, or was it just a random code inspection?"}, {"count": 2, "tags": [], "bug_id": 40380, "attachment_id": null, "id": 97364, "time": "2006-12-27T01:42:26Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-12-27T01:42:26Z", "is_private": false, "text": "Just to butt in here.  \n\nThe easiest fix is to move or copy the if(expiring) inside the synchronized()\nsection.\n\nDoes such a large block have to be synchronized(this) {} ?  I can't see any\nother code using synchronized(this) in the class (or synchronized(session) in\nthe package), so I guess the only thing being protected is the\nif(expiring==false) { expiring=true; } test and set.\n\n\nAs things stand now is the StandardSession author sure there is no issue of\nneeding to make the JVM perform a memory write barrier ?  To ensure that\nexpiring=true is flushed for other threads see it immediately.  Otherwise the\nJVM maybe free to optimize (and defer) this write to memory (unless you start\ngetting into declaring 'expiring' volatile).\n\n\nSuggestion:\n\nif (expiring)\n    return;\n\nsynchronized (this) {\n    if (expiring)\n        return;\n    if (manager == null)\n        return;\n    expiring = true;\n}\n\n// From here is no need to keep the lock AFAIKS and by closing the\nsynchronized() we will ensure memory write barrier.\n\n// Towards the end of the function it sets expiring=false; I dont think the any\ncode in critical to seeing the expiring==false again, not once isValid==false in\nanycase."}, {"count": 3, "tags": [], "bug_id": 40380, "attachment_id": null, "text": "This has been fixed in trunk and proposed for 6.0.x and 5.5.x", "id": 128844, "time": "2009-07-14T10:36:52Z", "creator": "markt@apache.org", "creation_time": "2009-07-14T10:36:52Z", "is_private": false}, {"count": 4, "tags": [], "text": "This has been fixed in 6.0.x and 5.5.x and will be included in 6.0.21 and 5.5.28 onwards.", "attachment_id": null, "id": 128949, "creator": "markt@apache.org", "time": "2009-07-17T04:16:21Z", "bug_id": 40380, "creation_time": "2009-07-17T04:16:21Z", "is_private": false}]
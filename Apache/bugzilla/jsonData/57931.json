[{"count": 0, "tags": [], "text": "Created attachment 32738\nTest program to reproduce the issue\n\nIf tomcat is set to use TLS and clientAuth=\"want\" or clientAuth=\"true\", it appears the NIO connector closes the connection in response to an untrusted client certificate.  This behavior differs from the BIO connector, and violates RFC 5246, which states that a fatal alert must be provided if \"some aspect of the cert chain was unacceptable\".  By closing the connection, this causes OpenSSL to provide an obscure error \"Unexpected EOF\", which indicates the TLS protocol was violated.\n\nI have attached a Python test program which demonstrates this behavior.  Simply run this program against a tomcat server, configured with the given server.xml Connector shown below.  Removal of the protocol attribute will use the BIO connector, and inclusion of the protocol attribute will demonstrate the NIO connector.\n\n\nSteps to reproduce:\n1) Setup a tomcat server with the connector configuration shown below\n2) Install Python as well as pyOpenSSL\n3) (If necessary) Modify the test.py program to communicate with the appropriate server and port.\n4) Run the test.py program.\n(Alternatively, if Python is not available, you should be able to use \n\n\nDesired behavior:\nInstead of closing the connection, the NIO connector should provide a fatal error response to an invalid certificate, like the BIO connector.  \n\nI would strongly prefer if the response would match the response provided by Java through the BIO connector: \"alert certificate unknown\".  This would allow our program to use either connector without any changes.\n\n\nImpact:\nDue to this bug, when using the NIO connector, our program cannot differentiate between an unexpected network problem and a certificate issue during the handshake.  Because of this, the program is not able to flag and react to the possibility the certificate is invalid--it assumes an unexpected network error occurred.\n\n\n\nRFC 5246, 7.4.6.  Client Certificate:\nIf the client does not send any certificates, the\nserver MAY at its discretion either continue the handshake without\nclient authentication, or respond with a fatal handshake_failure\nalert.  Also, if some aspect of the certificate chain was\nunacceptable (e.g., it was not signed by a known, trusted CA), the\nserver MAY at its discretion either continue the handshake\n(considering the client unauthenticated) or send a fatal alert.\n\n\nNIO Connector (Incorrect behavior):\npython test.py\nConnecting...\nPerforming SSL handshake...\nTraceback (most recent call last):\n  File \"test.py\", line 18, in <module>\n    conn.do_handshake()\nOpenSSL.SSL.SysCallError: (-1, 'Unexpected EOF')\n\n\nBIO connector (Correct behavior):\npython test.py\nConnecting...\nPerforming SSL handshake...\nTraceback (most recent call last):\n  File \"test.py\", line 18, in <module>\n    conn.do_handshake()\n  File \"build/bdist.linux-x86_64/egg/OpenSSL/SSL.py\", line 1442, in do_handshake\n  File \"build/bdist.linux-x86_64/egg/OpenSSL/SSL.py\", line 1187, in _raise_ssl_error\n  File \"build/bdist.linux-x86_64/egg/OpenSSL/_util.py\", line 48, in exception_from_error_queue\nOpenSSL.SSL.Error: [('SSL routines', 'SSL3_READ_BYTES', 'sslv3 alert certificate unknown')]\n\n\n\n\nConnector Configuration:\n<Connector port=\"10443\" maxHttpHeaderSize=\"4096\"\n           maxThreads=\"75\" minSpareThreads=\"25\"\n           maxKeepAliveRequests=\"-1\"\n           keepAliveTimeout=\"180000\"\n           enableLookups=\"false\" disableUploadTimeout=\"true\"\n           acceptCount=\"10\" scheme=\"https\" secure=\"true\" SSLEnabled=\"true\"\n           clientAuth=\"want\" sslProtocol=\"TLS\" sslEnabledProtocols=\"TLSv1.2,TLSv1\"\n           connectionTimeout=\"10000\"\n           protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n           keystoreFile=\"example.keystore\"\n           keystorePass=\"example\" algorithm=\"SunX509\"\n           truststoreFile=\"example.keystore\"\n           truststorePass=\"example\"\n           truststoreType=\"JKS\"\n           keyAlias=\"tomcat\"\n           compression=\"on\"\n           compressionMinSize=\"2048\"\n           ciphers=\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"/>", "attachment_id": 32738, "bug_id": 57931, "id": 182998, "time": "2015-05-15T20:29:22Z", "creator": "Lothsahn@yahoo.com", "creation_time": "2015-05-15T20:29:22Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 183034, "time": "2015-05-19T11:45:10Z", "bug_id": 57931, "creation_time": "2015-05-19T11:45:10Z", "is_private": false, "text": "Thanks for the report. This also affects the NIO2 connector (in 8.0.x and trunk).\n\nThis has been fixed in trunk.\n\nThis has been fixed in 8.0.x for 8.0.23 onwards.\n\nThis has been fixed in 7.0.x for 7.0.63 onwards."}]
[{"count": 0, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": 27098, "is_private": false, "id": 146775, "time": "2011-05-31T19:21:27Z", "bug_id": 51304, "creation_time": "2011-05-31T19:21:27Z", "text": "Created attachment 27098\nsample FO demonstrating two sides of the same issue\n\nCreating this bug to track the status of a known issue, for which we already have a disabled test case. \nThe test comment says 'may overlap', as if it is the exception, but in multi-column documents containing a significant amount of footnotes, it appears to be the rule.\nThe effect is not always visible, and in some cases there just is no break possibility that leaves enough content for the overlap to be triggered, but for the remainder...\n\nFurther investigation reveals that the issue is that each column break is determined by only taking into account the height of the footnote content associated with _that_ particular column, which works fine for single-column pages only.\nIf there are footnotes in the first column, this will cause overlaps in all _but_ the first. If there are (also) footnotes in following columns, there will (also) be overlap in the first.\n\nThe first part, I believe, can be fixed by a very small change in PageBreakingAlgorithm.computeDifference(), at line 506 and following:\n\nif (footnotesPending) {\n    // compute the total length of the footnotes not yet inserted\n    int allFootnotes = totalFootnotesLength;\n\n    // if activeNode is not a page-break, the footnotes for preceding\n    // column(s) should be counted as well, otherwise we need to subtract\n    // the footnotes already inserted\n    if (pageProvider.endPage(activeNode.line - 1)) {\n        allFootnotes -= pageNode.totalFootnotes;\n    }\n...\n\nThis renders the first sample correctly (also for more than two columns), and gives no complaints from the test suite. However, the third case --overlaps in both columns-- leads to an infinite loop."}, {"count": 1, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "text": "\nThe second part will take a bit more effort to address. As soon as newFootnotes are detected, the algorithm should restart from the last page-break, and take into account the additional footnotes to revisit the previous column-breaks.", "id": 146776, "time": "2011-05-31T19:23:52Z", "bug_id": 51304, "creation_time": "2011-05-31T19:23:52Z", "is_private": false}, {"text": "\nStill in the process of figuring this out, but thought I'd already float some ideas. \n\nThe change as described in an earlier comment --fixing the overlaps in following columns if an earlier one had footnotes-- does not fix the behavior after checking closer. \nFor columns beyond the second, it yields impossible values for KnuthPageNode.totalFootnotes, which is set to PBA.insertedFootnotesLength, which in turn depends on that subtraction in case all footnotes fit. That alteration needs to be slightly more invasive.\n\nAs for fully avoiding overlaps in multi-column layout with footnotes, as far as I can see at the moment, it would require a new mode/type of restart.\nIn reality, a footnote can only be deferred to a following page (= the footnote area spans all columns), so the footnote deferral mechanism should definitely be revised in order to make this work.\n\nIn this particular context, we would have to keep track of the footnotes that were added before the restart, instead of just throwing them away, and redo the page, but using the full length of all footnotes. When we arrive at the next unavoidable page-break, it then needs to be checked whether the citation of the last footnote would still appear on the page. If that is not the case, the process can be repeated with slightly less footnote content.\n\nI am also looking into switching to one flat footnoteList, that would merge the footnote content. This in conjunction with a list of indices pointing to the boundaries. \nNot sure yet if that will simplify things, but it would offer the potential benefit of being able to better handle space-resolution between footnotes (which is currently not supported). At any rate, at this level, a list of lists with a separate listIndex and elementIndex just seems to add to the confusion. (Not even counting the potential bugs arising from those indices being even the slightest bit out of synch with the list... Infinite loops, AIOOBExceptions and the like)\n\nIntermediate patch containing some initial work/cleanups to follow soon.", "tags": [], "bug_id": 51304, "is_private": false, "count": 2, "id": 147024, "time": "2011-06-10T20:11:07Z", "creator": "adelmelle@apache.org", "creation_time": "2011-06-10T20:11:07Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": 27176, "text": "Created attachment 27176\nintermediate patch, containing partial fix\n\n\nIntermediate patch contains a more proper fix to address the overlaps in columns following one that had footnotes (test included). The node whose totalFootnotes is subtracted will now always be the last page break, so that following columns will still take into account the footnote height added by previous columns on the same page.\n\nAside from the fix, the patch also contains some general minor cleanups/restructuring. Most important is probably the gathering of all footnote-related variables/methods in PageBreakingAlgorithm.Footnotes. I find this makes the whole process much easier to debug (one watch to get all relevant info), and would facilitate potential further extraction/refactoring of this logic.", "id": 147258, "time": "2011-06-19T17:53:46Z", "bug_id": 51304, "creation_time": "2011-06-19T17:53:46Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 51304, "text": "\nJust summarizing again what I think would work (helps me get a clearer picture in my head if I force myself to write it down...):\n[starting from the situation after attached patch]\n\n1\u00b0 Footnotes.handleFootnotes()\n  - should get a helper list of boxes whose footnotes are present in the list\n    (will in fact only contain the boxes that are 'in scope' for the current page)\n  - should check this list, and if the boxes' footnotes were already added, just skip\n    (if yes, then we would be restarting due to a new-footnotes-before-last-column condition (see below)\n\n2\u00b0 Footnotes.getDifference() (still going to rename that one, as it is a bit confusing, I think... That was just a quick rename after extraction from PBA.computeDifference())\n  - if we are restarting due to footnotes before the last column, then just add the height for all \"current\" footnotes\n    (at that point, those will include the footnotes that were encountered later on the page the first time around)\n\n3\u00b0 PBA.restartFrom()\nIf there is a footnotes-before-last-column condition, then:\n  - do not reset the footnotes, but\n  - restart from the last break that started a page\n    (this should then trigger the special treatment under 1\u00b0 and 2\u00b0)\nIf there is no such condition, then the helper list in Footnotes should be cleared too, so that we get a 'proper' restart.\n\nStill left to figure out what needs to happen once the second pass is complete. Situations can arise where the anchor(s) of the last footnote(s) would be pushed off the page, due to the earlier breaks in the first columns, if we would include all footnotes. \nThis can probably be checked (at least approximately) right before restarting (i.e. at that point, we could already decide to defer a few footnote-lines to the next pass?)", "id": 147348, "time": "2011-06-21T19:22:53Z", "creator": "adelmelle@apache.org", "creation_time": "2011-06-21T19:22:53Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 51304, "text": "\nUpdate: there was still something lacking in the overall picture as sketched in the previous comment.\nThe additional step should actually take the form of a *forced* restart, at the point of the next unavoidable page-break.\n\nThe reason I misread it is that, at first, I overlooked that the algorithm behaves slightly differently if the available width is such that each break fits exactly (e.g. 72pt available, and all lines are 12pt --assuming no stretch/shrink).\nAs soon as the width is increased or decreased (say to 73, resp. 71pt), there is a restart on every unavoidable page/column-break. When a line is reached that would generate overflow, there is a break-plus-restart from the position after the last line that still fits. In such a scenario, it is conceivable to alter the mode of the restart, so it jumps back to the last page-break, and retries the complete page, with a different set of parameters.\n\nIf every unavoidable break is 'perfect', however, a restart is never triggered, and thus it would have to be forced somehow. Given that the cycle is just node-activation and -deactivation, it likely means overriding deactivateNode() in PageBreakingAlgorithm. Around every unavoidable break, there is a brief moment at which there are two active nodes, which then gets reduced to one, so the outer loop in findBreakingPoints() just continues with the next element.\nAt the point where a page-break node is being deactivated, there can be a rather simple check, going back to the first column-break and comparing that node's totalFootnotes with the footnotes for the node that is about to be deactivated. \nIf they are not equal, it means footnotes were added after the first column. The next node should then be deactivated as well, so that we end up with 0 active nodes, and a restart is forced higher up. Provided that we then also properly set the lastTooShort and/or lastDeactivated node(s), the rest of the solution as sketched earlier should suffice to handle the rest.\nI am even thinking that we can already infer at that point whether the last box with anchors --for the last (set of) footnote(s)-- can still fit with all footnote content, or whether part of the last footnote needs to be deferred. Updated patch likely to follow soon.", "id": 147775, "time": "2011-07-05T19:03:29Z", "creator": "adelmelle@apache.org", "creation_time": "2011-07-05T19:03:29Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "resetting severity from major to normal pending further review", "id": 157256, "time": "2012-04-07T01:37:02Z", "bug_id": 51304, "creation_time": "2012-04-07T01:37:02Z", "is_private": false}, {"count": 7, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "resetting P2 open bugs to P3 pending further review", "id": 157391, "time": "2012-04-07T01:42:17Z", "bug_id": 51304, "creation_time": "2012-04-07T01:42:17Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 51304, "attachment_id": null, "id": 157670, "time": "2012-04-08T05:18:52Z", "creator": "gadams@apache.org", "creation_time": "2012-04-08T05:18:52Z", "is_private": false, "text": "please provide output PDF file(s) that correspond to supplied input file that demonstrate problem"}, {"count": 9, "tags": [], "bug_id": 51304, "text": "(In reply to comment #8)\n> please provide output PDF file(s) that correspond to supplied input file that\n> demonstrate problem\n\nandreas?", "id": 158347, "time": "2012-04-24T05:43:17Z", "creator": "gadams@apache.org", "creation_time": "2012-04-24T05:43:17Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 51304, "is_private": false, "text": "Created attachment 28746\nThe requested PDF\n\nOutput of 27098. Not that it was very difficult to produce.", "id": 158914, "time": "2012-05-09T06:31:08Z", "creator": "olivier@gasser-media.ch", "creation_time": "2012-05-09T06:31:08Z", "attachment_id": 28746}, {"count": 11, "tags": [], "creator": "olivier@gasser-media.ch", "attachment_id": 28747, "text": "Created attachment 28747\nSample FO file demonstrating the two-column footnote problem", "id": 158915, "time": "2012-05-09T06:50:41Z", "bug_id": 51304, "creation_time": "2012-05-09T06:50:41Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 51304, "text": "Created attachment 28748\nPDF output demonstrating the two-column footnote problem", "id": 158916, "time": "2012-05-09T06:51:35Z", "creator": "olivier@gasser-media.ch", "creation_time": "2012-05-09T06:51:35Z", "is_private": false, "attachment_id": 28748}, {"count": 13, "tags": [], "text": "It\u2019s a pretty serious problem, as the two attachments I just uploaded (\u201cSample FO file demonstrating the two-column footnote problem\u201d and \u201cPDF output demonstrating the two-column footnote problem\u201d) demonstrate.\n\nBasically, if you use footnotes in a two-column layout, you\u2019re playing a lottery where Mr. Murphy has a pretty high chance to win, and none of the alternatives (reverting to one column or doing away with footnotes) is very viable.", "is_private": false, "bug_id": 51304, "id": 158917, "time": "2012-05-09T06:54:22Z", "creator": "olivier@gasser-media.ch", "creation_time": "2012-05-09T06:54:22Z", "attachment_id": null}, {"count": 14, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "(In reply to comment #10)\n> Created attachment 28746 [details]\n> The requested PDF\n> \n> Output of 27098. Not that it was very difficult to produce.\n\nthanks; i understand it isn't difficult to produce the PDF, and I could take the time to do so, but I'm trying to encourage (enforce) that submitters provide full and accurate data in maximally minimal form; otherwise, those of us processing these bugs end up spending a lot of time doing things that should have been done by the submitter in the first place", "id": 158918, "time": "2012-05-09T06:55:34Z", "bug_id": 51304, "creation_time": "2012-05-09T06:55:34Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 51304, "text": "OK, understood. :)\n\nThe files I just submitted are less minimal, but demonstrate the real-world situation where I first encountered the problem.", "id": 158920, "time": "2012-05-09T07:02:10Z", "creator": "olivier@gasser-media.ch", "creation_time": "2012-05-09T07:02:10Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "pere@hungry.com", "attachment_id": null, "text": "Could this be the same problem I encountered with xmlto and docbook-xsl and a single column body?  See <URL: http://bugs.debian.org/683197 > for the\nminimum docbook file I created to reproduce the problem, and the generated fo file\ntriggering the bug, and the PDF demonstrating the problem.\n\nIs this the same bug, or should I create a new bug report?", "id": 161469, "time": "2012-08-16T18:03:48Z", "bug_id": 51304, "creation_time": "2012-08-16T18:03:48Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 47668, "attachment_id": null, "text": "The 'POIXMLDocumentPart' and 'POIXMLDocument' parse an OOXML document by seeking the main part of the OOXML, represented by an instance of a subclass of 'POIXMLDocument', and then invoke the method \"read(POIXMLFactory factory)\" recursively on all relations to other PackageParts. \n\nThis works fine in Excel and Word files, as these seem to be trees to a far extent. In PowerPoint, the Slide, SlideLayout and SlideMaster form a graph. The Slides have a relationship to the SlideLayout. SlideLayout has a relationship to the SlideMaster. SlideMaster has a relationship to all SlideLayouts. And the presentation has relations to all Slides and SlideMaster classes. \n\nWhen using the existing classes in my current XSLF-Implementation, I end up in an endless loop. The only option to avoid this, is to pass a context object to the loading classes, where all loaded PackagePart and their corresponding XSLF-classes are chached. This allows to avoid any loops and every POIXML-instance can be linked with its related parts. \n\nStoring is analogue, although a Set is sufficient to prevent endless loops. When storing the document, a Set is passed as context. When invoking all related parts recursively, only those not yet referenced by the Set are stored. \n\nThe change in this behavior implies additional changes: Images used in multiple places refernce from several places to the same PackagePart. There is no 1:1 mapping from appearance in the document and existence of PackageParts. Currently, every relation ends up in a separate instance each time an image is referenced, but all images point to the same PackagePart. This may cause weired behavior when saving the document. \n\nExample: You have an Excel xlsx-file. This contains two sheets. On each sheet, you have the same JPG image inserted. If you look into the file, you will see that both sheet-object refer to the very same image-PackagePart. But in POI, these references end up in two instances of XSSFPicture. But these two instances refer to the same PackagePart and yet represent two different objects in Excel. In case one of the images is altered, depending on the store-sequence you may encounter an effect to the other image as well or your modification is not persisted at all. \n\nSee the patch attached to this bug to enable a 1:1 mapping between PackageParts and POIXMLDocumentPart-objects. I will try to come up with a test-case for the Excel example.", "id": 129587, "time": "2009-08-09T23:35:58Z", "creator": "stefan.stern@mind8.com", "creation_time": "2009-08-09T23:35:58Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 24120\nSuggested Patch on trunk revision 802651", "attachment_id": 24120, "bug_id": 47668, "id": 129589, "time": "2009-08-10T00:23:17Z", "creator": "stefan.stern@mind8.com", "creation_time": "2009-08-10T00:23:17Z", "is_private": false}, {"text": "Created attachment 24121\nEclipse project with a small testcase\n\nThis Project contains a testcase. As I was not able to find POI API to modify the XSSFPictureData, the testcases purpose is to show that there are several parts pointing to the same Picture, but  below is the very same PackagePart. Once there is API to modify the Package, the underlying code must be aware that manipulating the image might affect other parts.", "tags": [], "bug_id": 47668, "is_private": false, "count": 2, "id": 129590, "time": "2009-08-10T00:26:02Z", "creator": "stefan.stern@mind8.com", "creation_time": "2009-08-10T00:26:02Z", "attachment_id": 24121}, {"count": 3, "tags": [], "bug_id": 47668, "attachment_id": null, "text": "fixed in r803667 with some tweaks:\n\n - POIXMLDocument.load is protected and final. User should neither override it nor call via usermodel API, this method should only be called when constructing documents. I made XSSFWorkbook and XWPFDocument use it.\n - entries in the context are keyed by PackageRelationship, not by PackagePart. PackageRelationship is more appropriate as it overrides hashCode() and equals()\n - removed the old context-less onSave() and write()\n - added the unit test to TestXSSFWorkbook and also created org.apache.poi.TestPOIXMLDocument to test generic parsing / saving of OOXML packages\n\nRegards,\nYegor", "id": 129665, "time": "2009-08-12T12:03:00Z", "creator": "yegor@dinom.ru", "creation_time": "2009-08-12T12:03:00Z", "is_private": false}, {"count": 4, "tags": [], "creator": "stefan.stern@mind8.com", "attachment_id": null, "id": 129690, "time": "2009-08-14T06:31:44Z", "bug_id": 47668, "creation_time": "2009-08-14T06:31:44Z", "is_private": false, "text": ">  - entries in the context are keyed by PackageRelationship, not by PackagePart.\n> PackageRelationship is more appropriate as it overrides hashCode() and equals()\n\nPackageRelationship.hashCode method makes use of the ID of the relationship. This will most likely always result in different hashes for different PackageRelationship-objects, although these refer to the same PackagePart. \n\nIn the context-map and context-set for loading and writing, the hashcode is used when adding and checking whether element is already contained in list. \n\nResult is a very similiar behavior then before: each PackagePart has several instances in memory, means I can find more than one XSLFSlide object for the same PackagePart '/ppt/slide/slide1.xml', each one referenced by another part (notesPart, slideMasterPart, etc). \n\nThe only benefit now is, that each PackageRelationship-instance is added only once, so there is not an endless-loop any more. \n\nIs there a major benefit in using PackageRelationship instead of the PackagePart itself? Or is there a need to instantiate more than one XSLFSLide object for the very same Slide-PackagePart?"}, {"count": 5, "tags": [], "text": "I see.\nUse of PackageRelationship was a wrong decision, I changed it back to use PackagePart as keys. \n\nI also improved TestPOIXMLDocument to assert that same logical parts correspond to the same physical instances of POIXMLDocumentPart\n\nYegor", "attachment_id": null, "bug_id": 47668, "id": 129694, "time": "2009-08-14T10:31:55Z", "creator": "yegor@dinom.ru", "creation_time": "2009-08-14T10:31:55Z", "is_private": false}, {"count": 6, "attachment_id": null, "creator": "stefan.stern@mind8.com", "is_private": false, "id": 129737, "time": "2009-08-17T03:16:46Z", "bug_id": 47668, "creation_time": "2009-08-17T03:16:46Z", "tags": [], "text": "ok, works fine now :)"}]
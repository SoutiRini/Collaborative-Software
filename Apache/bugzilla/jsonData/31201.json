[{"count": 0, "tags": [], "text": "There is a bug in \"JSP include\" that DefaultServlet assigns default locale \nencoding \nfor included file using <jsp:include file=\"...\"> action, \nand the included file's encoding is not matched default locale.\n\nFor example;\n\nlocale=ja_JP.SJIS\n\nabc.html:\nwritten by Windows-31J\n\npage.jsp:\n---\n<%@ page contentType=\"text/html; charset=Windows-31J\" %>\npage include!!\n<HR>\n<jsp:include file=\"abc.html\" flush=\"true\" /> \n<HR>\n---\n\nHTML file's encoding should be fixed when Web Application is deploying.\nSo I tried to make a patch for this bug.\nI added \"fileEncoding\" parameter for DefaultServlet.\n\nPatch for this bug follows:\n===================================================================\n*** DefaultServlet.java\tSun Jan 25 22:23:42 2004\n--- DefaultServlet_patch.java\tMon Sep 13 22:13:39 2004\n***************\n*** 177,182 ****\n--- 177,187 ----\n  \n  \n      /**\n+      * Encoding for Reader\n+      */\n+     protected String fileEncoding;\n+     \n+     /**\n       * MD5 message digest provider.\n       */\n      protected static MessageDigest md5Helper;\n***************\n*** 306,311 ****\n--- 311,322 ----\n          } catch (Throwable t) {\n              ;\n          }\n+         try {\n+             value = getServletConfig().getInitParameter(\"fileEncoding\");\n+             fileEncoding = value;\n+         } catch (Throwable t) {\n+             ;\n+         }\n  \n          // Sanity check on the specified buffer sizes\n          if (input < 256)\n***************\n*** 1793,1799 ****\n  \n          InputStream resourceInputStream = resourceInfo.getStream();\n          // FIXME : i18n ?\n!         Reader reader = new InputStreamReader(resourceInputStream);\n  \n          // Copy the input stream to the output stream\n          exception = copyRange(reader, writer);\n--- 1804,1812 ----\n  \n          InputStream resourceInputStream = resourceInfo.getStream();\n          // FIXME : i18n ?\n!         Reader reader = (fileEncoding == null) ?\n!         \t\tnew InputStreamReader(resourceInputStream) :\n!        \t\t\tnew InputStreamReader(resourceInputStream, \nfileEncoding);\n  \n          // Copy the input stream to the output stream\n          exception = copyRange(reader, writer);\n***************\n*** 1864,1870 ****\n          IOException exception = null;\n  \n          InputStream resourceInputStream = resourceInfo.getStream();\n!         Reader reader = new InputStreamReader(resourceInputStream);\n          exception = copyRange(reader, writer, range.start, range.end);\n  \n          // Clean up the input stream\n--- 1877,1885 ----\n          IOException exception = null;\n  \n          InputStream resourceInputStream = resourceInfo.getStream();\n!         Reader reader = (fileEncoding == null) ?\n!         \t\tnew InputStreamReader(resourceInputStream) :\n!        \t\t\tnew InputStreamReader(resourceInputStream, \nfileEncoding);\n          exception = copyRange(reader, writer, range.start, range.end);\n  \n          // Clean up the input stream\n***************\n*** 1956,1962 ****\n          while ( (exception == null) && (ranges.hasMoreElements()) ) {\n  \n              InputStream resourceInputStream = resourceInfo.getStream();\n!             Reader reader = new InputStreamReader(resourceInputStream);\n  \n              Range currentRange = (Range) ranges.nextElement();\n  \n--- 1971,1979 ----\n          while ( (exception == null) && (ranges.hasMoreElements()) ) {\n  \n              InputStream resourceInputStream = resourceInfo.getStream();\n!             Reader reader = (fileEncoding == null) ?\n!             \t\tnew InputStreamReader(resourceInputStream) :\n!            \t\t\tnew InputStreamReader(resourceInputStream, \nfileEncoding);\n  \n              Range currentRange = (Range) ranges.nextElement();", "attachment_id": null, "id": 63477, "creator": "kanekotky@yahoo.co.jp", "time": "2004-09-13T16:21:48Z", "bug_id": 31201, "creation_time": "2004-09-13T16:21:48Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 31201, "text": "This is a problem at JSP spec(5.4 sec) not Tomcat. JSP spec doesn't show \nincluded pages encoding. As far as I read cuurent JSP spec, I think default \nencoding should be defined by pageEncoding attribute in JSP's page directive \nof included page. \n\nI proposes adding pageEncoding attribute for jsp:include directive (JSP spec \n5.4) to specify included page default encoding. If included page has \npageEncoding, this jsp:include's encoding should be ignored.\n\nHowever this patch seems valuable since JSP spec will be fixed. I think this \npatch should be applied for current tomcat.\n\nreagrds,\n\nTakashi Okamoto\n", "id": 64219, "time": "2004-09-26T01:56:42Z", "creator": "toraneko@kun.ne.jp", "creation_time": "2004-09-26T01:56:42Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 31201, "attachment_id": null, "is_private": false, "id": 64502, "time": "2004-10-02T14:33:24Z", "creator": "markt@apache.org", "creation_time": "2004-10-02T14:33:24Z", "text": "The default encoding for included pages is defined in \nhttp://www.jcp.org/aboutJava/communityprocess/maintenance/jsr053/errata_1_2_a_2\n0020321.html\nComments and suggestions for the JSP spec should be directed to the spec team \n(jsp-spec-comments@eng.sun.com) rather than this mailing list.\n"}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "The patch suggested above would be a Tomcat specific solution to a wider i18n \nproblem. Whilst it would work for Tomcat I would not wish to encourage an \napproach such as this as if you ever need to move to an alternative container, \nit will break again. Therefore, this patch will not be applied. (Hence the \nWONTFIX).\n\nThere are, however, a number of alternative approaches that are spec compliant \nand are hence container neutral.\n\nThe simplest approach is to convert the HTML to JSPs and specify the correct \npage encoding in the new JSPs using <%@ page pageEncoding=... %>.\n\nThere are other approaches and if the one suggested above isn't appropriate I \nsuggest that you post a question on the tomcat-user mailing list rather than \nthis bug report.", "id": 64503, "time": "2004-10-02T14:47:31Z", "bug_id": 31201, "creation_time": "2004-10-02T14:47:31Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 31201, "attachment_id": null, "is_private": false, "id": 64591, "time": "2004-10-05T06:27:43Z", "creator": "toraneko@kun.ne.jp", "creation_time": "2004-10-05T06:27:43Z", "text": "> There are, however, a number of alternative approaches that are spec  > compliant and are hence container neutral.  I knew. However these approaches could not include HTML direct. We should convert HTML to JSP or use escaped character for non iso-8859-1 characters. Some of the people want include HTML direct. Then, this becomes problem.   You said I feed back JCP. It's really right, but imagin, how long we wait to resolve the problem and does tomcat never have tomcat specific functions? Could you see the number of vote for this bug?  I'm disappointment for your i18n and l10n attitude. I posted i18n and l10n patch in the past but it took _6 month_ that tomcat commiter took my patch.   I recommend you to provide temporary solution since release Tomcat 6.0 again.  bye,  Takashi      "}, {"count": 5, "tags": [], "bug_id": 31201, "attachment_id": null, "id": 64624, "time": "2004-10-05T14:37:22Z", "creator": "kanekotky@yahoo.co.jp", "creation_time": "2004-10-05T14:37:22Z", "is_private": false, "text": "Although I think that correcting specification is the right approach,\nthere is no solution in the present JSP specification.\nTherefore the problem should be coped with by a container.\n\nWhen not applying this patch, Tomcat depends on default encoding of Java VM\nto include of a HTML file.\n\nSince Web application depends by environment strongly,\nit will be the worst situation if you consider the portability which you say. \n\nIf there are already many properties which are valuable and depend on\nthe container, I suggest this patch should be treated as one of them.\n"}, {"count": 6, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "I am still not happy with the portability implications of this. I still think \nit would be better for the 'fix' to be part of the application (and hence be \nportable) rather than part of the container (not portable and may require \nchanges to app between containers depending on how each handles this).\n\nThat being said, if all other options are inappropriate then I am prepared to \nconsider this patch. Therefore I'd would appreciate it you would consider the \nfollowing options.\n\n1. I understand that some developers want to include HTML directly. However, \ngiven that this has i18n problems and i18n is obviously important to you why \nnot tell your developers that they can't do this and should convert to JSPs? \nIt is a change to the file name, adding a encoding directive and changing \nreferences from xxx.html to xxx.jsp. This would be trivial to automate.\n\n2. How about using -Dfile.encoding=\"...\" at the JVM level?\n\n3. The patch (and option 2 above) assumes that every file has the same \nencoding. Is this always the case? Might different files in different apps \nhave different encodings? If so, you could specify a modified version of the \ndefault servlet in your web application to handle .html files. With this \noption you could even handle different static file encodings within the same \nweb app. This option would give you a lot of flexibility (which may or may not \nbe useful to you).", "id": 64789, "time": "2004-10-07T21:33:59Z", "bug_id": 31201, "creation_time": "2004-10-07T21:33:59Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 31201, "text": "1. Converting HTML files into JSPs has following problems.\n\n- Since the JSP compile is needed, a performance may become a problem.\n\n- HTML files must be included correctly in JSP spec.\n  I think requiring converting HTML into JSP means not fulfilling\n  specification.\n\n2.\"file.encoding\" option does not operate depending on the version\n  of JVM.\n\n  1.1 OK\n  1.2 NG\n  1.3 - 1.4.1 OK\n  1.4.2 NG\n\n  \"file.encoding\" is determined by default locale at the time of JVM execution.\n\n  I recommend you to see the following page.\n  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4163515\n\n3. The best solution for including HTML files of multiple encodings is\n   changing the JSP spec.\n\n   First of all, a browser cannot display if multiple encodings are contained\n   in 1 page. In this case, in a HTML file, you should use comprehensive\n   encodings, such as UTF8. \n   However, do you want to use UTF8 as default locale? This patch can separate\n   encodings of default locale and web app.\n\nThis patch extends options without any undesireble effects.\nOther options are still effective even if this patch is accepted.\n\nreagrds,\n\nTakayuki Kaneko", "id": 64862, "time": "2004-10-09T09:29:01Z", "creator": "kanekotky@yahoo.co.jp", "creation_time": "2004-10-09T09:29:01Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 31201, "text": "1. If performance is an issue, pre-compile your JSPs. If you can quote the \npart of the spec tomcat isn't following and the patch addresses this issue \nI'll commit it. However, having read the spec, and the errata, I believe \ntomcat is spec compliant.\n\n2. I wasn't aware of this. Thanks for pointing this out. This is clearly not \nan option.\n\n3. I think you mis-understood me. I was not trying to address one file with \nmultiple encodings. My point is that your patch assumes (as does the current \ntomcat code) that ALL static files for all webapps will have the same \nencoding. Is this sufficient to address your i18n issues? Is it not possible \nto have one webapp with html files using one encoding and one webapp with thml \nfiles using a different one?", "id": 64863, "time": "2004-10-09T11:19:13Z", "creator": "markt@apache.org", "creation_time": "2004-10-09T11:19:13Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "1.\"pre-compile\" is a good solution, but the sequence of replacing is\n  complicate without stopping the web app while Tomcat is running.\n\n  In a HTML file, I just need to replace it. It is much simple.\n\n  I think your saying is not compliant the spec.\n  If converting HTML into JSP is required, then HTML files can not be included.\n\n3.My point is that it will be not necessary to consider the different static\n  file encodings within the same web app. \n\n  As having stated above, the problem of displaying still remains,\n  there is no solution for a such web app in the present JSP specification. \n  And there is no solution for even one static file encoding under present\n  Tomcat.\n\nTakayuki Kaneko", "is_private": false, "id": 64867, "creator": "kanekotky@yahoo.co.jp", "time": "2004-10-09T16:43:11Z", "bug_id": 31201, "creation_time": "2004-10-09T16:43:11Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 31201, "attachment_id": null, "id": 64887, "time": "2004-10-10T21:02:09Z", "creator": "markt@apache.org", "creation_time": "2004-10-10T21:02:09Z", "is_private": false, "text": "1a. If you are worried about performance - precompile. If you want ease of \nreplacement - don't. You can't have it both ways.\n\n1b. Please state which section of the spec you believe tomcat is not compliant \nwith. Without this, I can't invetsigate further.\n\n3. What about different encodings across different webapps on the same server?\n\nThere are solutions for this issue with the current versions of tomact. My \nconcern about the proposed patch, that it encourages non-portable coding, \nremains.\n\nI am leaving this as REOPENED for now but I am leaning towards resolving it as \nWONTFIX."}, {"count": 11, "tags": [], "creator": "kanekotky@yahoo.co.jp", "attachment_id": null, "text": "1a.No I can't. So, I need this patch is committed.\n\n1b.Please see API spec of RequestDispatcher#include method.\n   (Because \"jsp:include action\" will be converted into this method.)\n\n   This method must be able to handle any resource(such as a servlet,\n   HTML file, or JSP file). But I feel like you said that because Tomcat\n   cannot handle HTML file correctly, you ask to convert HTML file into\n   JSP file. Isn't it right?\n\n3.It can be resolved by defining DefaultServlet on each web app.\n\n\nIf this patch is committed, we can separate web app from environment(locale)\nbefore fixing JSP spec.\n\nIf you don't set file.encoding property, Tomcat will handle it just like \nformer. So I believe there will be no demerit at all.\n\nIf you say that property of i18n depending on container is a problem, see \njavaEncoding property of JspServlet. This property is also depend on the\ncontainer, and assume that ALL JSP files for all webapps have the same \nencoding. Do you think that javaEncoding property is also a problem?\n\nDo you mean that it is not a problem, current Tomcat changes its handling by\nenvironments?\n\nI believe that this patch will be help for i18n problems, as other\nproperties.\n\nRegards,\n\nTakayuki Kaneko", "id": 64907, "time": "2004-10-11T02:46:21Z", "bug_id": 31201, "creation_time": "2004-10-11T02:46:21Z", "is_private": false}, {"count": 12, "tags": [], "text": "I have thought about this some more and decided that on balance the patch \nshould be committed.\n\nThe patch has been applied to TC4.1.x and ported to TC5.5.x\n", "is_private": false, "id": 68683, "creator": "markt@apache.org", "time": "2004-12-18T13:09:17Z", "bug_id": 31201, "creation_time": "2004-12-18T13:09:17Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "*** Bug 40440 has been marked as a duplicate of this bug. ***", "id": 93176, "time": "2006-09-07T23:25:29Z", "bug_id": 31201, "creation_time": "2006-09-07T23:25:29Z", "attachment_id": null}]
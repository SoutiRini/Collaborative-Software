[{"count": 0, "tags": [], "bug_id": 7125, "text": "We're developing a web application on AIX 4.3.3.0 \nwith ibm jre 1.3.1 and tomcat 4.0.1 final and Oracle\nthin jdbc driver for Oracle 8.1.7.2. We developed a \nprogramm in order to performance test our web \napplication. The performance program forks up a \ngreat number of parallel threads. \n\nOne of our classes retrieves a datasource like this:\n\n\tContext initCtx = new InitialContext();\n\tContext envCtx = (Context) initCtx.lookup(\"java:comp/env\");\n\tdataSource = (DataSource) envCtx.lookup(resourceName);\n\nThe program works ok, as long the concurrent threads\nreach the number of around 160. At this stage the\nlookup method will return the null object. Any\nidea how to overcome this problem. Thanks.", "id": 11801, "time": "2002-03-14T17:06:01Z", "creator": "joerg_brunsmann@yahoo.de", "creation_time": "2002-03-14T17:06:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 7125, "is_private": false, "id": 11803, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2002-03-14T17:27:51Z", "time": "2002-03-14T17:27:51Z", "text": "Maybe it did put too much strain on the resource factory, or something like that.\nIn 4.0.3, the result returned from the factory is rebound, so I don't think this\nwould happen anymore."}, {"count": 2, "tags": [], "bug_id": 7125, "is_private": false, "id": 14978, "attachment_id": null, "creator": "mkamp@gmx.de", "creation_time": "2002-04-29T07:55:39Z", "time": "2002-04-29T07:55:39Z", "text": "This is true. With 4.0.3 it is working for us now too. It can be closed."}]
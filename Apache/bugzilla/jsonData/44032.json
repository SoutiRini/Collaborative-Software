[{"count": 0, "tags": [], "bug_id": 44032, "attachment_id": null, "id": 111496, "time": "2007-12-06T05:47:05Z", "creator": "ulrich.voigt@gmx.de", "creation_time": "2007-12-06T05:47:05Z", "is_private": false, "text": "I've got the following NullPointerException:\n\njava.lang.NullPointerException\n\tat java.io.Writer.write(Writer.java:126)\n\tat org.apache.log4j.helpers.CountingQuietWriter.write(CountingQuietWriter.java:45)\n\tat org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:309)\n\tat org.apache.log4j.RollingFileAppender.subAppend(RollingFileAppender.java:263)\n\tat org.apache.log4j.WriterAppender.append(WriterAppender.java:160)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)\n\tat\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)\n\tat org.apache.log4j.Category.callAppenders(Category.java:206)\n\tat org.apache.log4j.Category.forcedLog(Category.java:391)\n\tat org.apache.log4j.Category.warn(Category.java:1060)\n\tat ..... my classes .....\n\nI guess that the message I wanted to log was != null and was logged correctly."}, {"count": 1, "tags": [], "creator": "ulrich.voigt@gmx.de", "attachment_id": null, "id": 111497, "time": "2007-12-06T06:04:25Z", "bug_id": 44032, "creation_time": "2007-12-06T06:04:25Z", "is_private": false, "text": "I forgot to mention that the problem occured with version 1.2.15."}, {"count": 2, "tags": [], "bug_id": 44032, "attachment_id": null, "text": "We had a similar problem.\n\nThe problem is that we use an AsynchAppender and a SocketAppender for logging.\nBecause of how AsynchAppender works, it is possible that \nThrowableInformation.getThrowableStrRep() runs on one LoggingEvent at the same time.\n\n  public\n  String[] getThrowableStrRep() {\n    if(rep != null) {\n      return (String[]) rep.clone();\n    } else {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw);\n      throwable.printStackTrace(pw);\n      pw.flush();\n      LineNumberReader reader = new LineNumberReader(\n              new StringReader(sw.toString()));\n      ArrayList lines = new ArrayList();\n      try {\n        String line = reader.readLine();\n        while(line != null) {\n          lines.add(line);\n          line = reader.readLine();\n        }\n      } catch(IOException ex) {\n          lines.add(ex.toString());\n      }\n      rep = new String[lines.size()];\n      lines.toArray(rep);\n    }\n    return rep;\n  }\n\nThe problem is with ThrowableInformation.rep. \nIf the first concurrent thread gets only to rep = new String[lines.size()];\nand then the next concurrent thread gets to if(rep != null),\nthen only rep.clone(); is returned with an empty array.\n\nThen later concurrent thread #1 will fill up the array but that's already late\nfor the another concurrent thread.\n\nI think in this case the solution would be either to \n\na) synchronize on ThrowableInformation.getThrowableStrRep() or \nb) modify\n      rep = new String[lines.size()];\n      lines.toArray(rep);\n\nin method with\n\n      String[] tempRep = new String[lines.size()];\n      lines.toArray(tempRep);\n      rep = tempRep;\n\n", "id": 112869, "time": "2008-01-15T07:03:57Z", "creator": "peter@baxter-it.com", "creation_time": "2008-01-15T07:03:57Z", "is_private": false}, {"count": 3, "tags": [], "creator": "ulrich.voigt@gmx.de", "attachment_id": null, "text": "The solution looks good to me. I prefer solution b) because I cannot estimate\nthe overall impacts of solution a).\n\nMy problem is that the bug occurs very rarely. I got only two cases in 2 months.\nSo I could not say for sure that the patch fixes the problem :-(\n\nAnyhow: Can someone please commit the patch?", "id": 112915, "time": "2008-01-16T09:44:27Z", "bug_id": 44032, "creation_time": "2008-01-16T09:44:27Z", "is_private": false}, {"count": 4, "tags": [], "text": "Changed summary of bug since bug is not specific to RollingFileAppender.  \n\nChanges committed in rev 612863.  \n\nIn addition to the synchronization issue, there was an isolation issue.  On every call except the first, the \ncached string representation was cloned before being returned.  However, if you got the first call, you \ncould \"rewrite\" the string representation by modifying the returned value.  \nThrowableInformationTest.testIsolation would fail with log4j 1.2.15.  Whatever it did, it should have been \nconsistent.  Either everyone should be able to rewrite or no one should be able to rewrite.", "attachment_id": null, "bug_id": 44032, "id": 112960, "time": "2008-01-17T08:57:37Z", "creator": "carnold@apache.org", "creation_time": "2008-01-17T08:57:37Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "ulrich.voigt@gmx.de", "text": "*** Bug 23019 has been marked as a duplicate of this bug. ***", "id": 116884, "time": "2008-05-21T08:00:37Z", "bug_id": 44032, "creation_time": "2008-05-21T08:00:37Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 44032, "attachment_id": null, "id": 120713, "time": "2008-09-17T09:12:17Z", "creator": "carnold@apache.org", "creation_time": "2008-09-17T09:12:17Z", "is_private": false, "text": "*** Bug 45825 has been marked as a duplicate of this bug. ***"}, {"count": 7, "tags": [], "text": "Is there any workaround to this and/or an ETA for 1.2.16 ?", "attachment_id": null, "bug_id": 44032, "id": 135435, "time": "2010-03-18T15:26:02Z", "creator": "greg.jos@gmail.com", "creation_time": "2010-03-18T15:26:02Z", "is_private": false}]
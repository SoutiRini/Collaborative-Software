[{"count": 0, "tags": [], "creator": "patrick@zync.at", "attachment_id": null, "text": "Hello,\n\nI apologize, if this functionality is already implemented and I just fail\nto see it.\n\nUsing the JSR 105 API I see no way to set a javax.xml.transform.URIResolver for\nresolving URIs when performing an XSLT Transform. This means, that the default \nURIResolver will be used, which is not always desirable.\n\nLooking at the source code, I can see 2 ways of implementing this\n(I assume you do not want to change the API of XMLCryptoContext):\n\n1) explicitly setting a URIResolver property in the XMLCryptoContext,\ne.g. XMLCryptoContext.setProperty(\"javax.xml.transform.URIResolver\", myURIResolver)\n\n2) implementing a URIResolver that internally uses the URIDereferencer\nfrom the XMLCryptoContext\n\nIn both cases, the resulting URIResolver would have to be passed down to the \norg.apache.xml.security.transforms.implementations.TransformXSLT that\nactually does the transform.\n\nIf you indicate which way you would prefer it, i would be willing to implement\nthis functionality and provide a patch.\n\nRegards,\nPatrick Peck", "id": 88265, "time": "2006-04-19T11:54:00Z", "bug_id": 39349, "creation_time": "2006-04-19T11:54:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 39349, "text": "(In reply to comment #0)\n> Hello,\n> \n> I apologize, if this functionality is already implemented and I just fail\n> to see it.\n> \n> Using the JSR 105 API I see no way to set a javax.xml.transform.URIResolver for\n> resolving URIs when performing an XSLT Transform. This means, that the default \n> URIResolver will be used, which is not always desirable.\n> \n> Looking at the source code, I can see 2 ways of implementing this\n> (I assume you do not want to change the API of XMLCryptoContext):\n> \n> 1) explicitly setting a URIResolver property in the XMLCryptoContext,\n> e.g. XMLCryptoContext.setProperty(\"javax.xml.transform.URIResolver\",\nmyURIResolver)\n> \n> 2) implementing a URIResolver that internally uses the URIDereferencer\n> from the XMLCryptoContext\n> \n> In both cases, the resulting URIResolver would have to be passed down to the \n> org.apache.xml.security.transforms.implementations.TransformXSLT that\n> actually does the transform.\n> \n> If you indicate which way you would prefer it, i would be willing to implement\n> this functionality and provide a patch.\n\nSolution 1 is technically an API change (since you propose defining a \nproperty starting with \"javax\"), so it would need to go through the Java\nCommunity Process and a maintenance revision of the specification would need \nto be released. Since we have only just recently finalized JSR 105 and don't\nhave any immediate plans for a maintenance revision, this \noption would take a while. Alternatively, you could define an\nimplementation-specific property starting with org.apache (but it would \nbe specific to the Apache implementation).\n\nSolution 2 is probably better. However, I should note for a tighter JSR\n105 integration, the Apache Transform implementations should be\nchanged to extend the JSR 105 javax.xml.crypto.dsig.TransformService class. \nThen the XMLCryptoContext would be passed to the \ntransform method (inherited from TransformService) of the TransformXSLT \nimpl, and from there you could get \nthe URIDereferencer from the XMLCryptoContext. But that may be more of\na long-term (XMLSec 2.0?) change since it would require some fairly significant \nrestructuring/modification of the classes.\n\n--Sean", "id": 88277, "time": "2006-04-19T15:30:22Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-04-19T15:30:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 39349, "text": "Sean,\n\nThank you for your informative reply. I understand, why (1) is not an option\nat the moment. But from looking at the code, maybe you could reconsider (2).\nI think there is a solution that does not require the kind of class \nrestructuring that you suggest.\n\nCurrently, the org.jcp.xml.dsig.internal.dom.ApacheTransform class acts as\nthe glue between the JSR105 and the Apache implementation. In the 'transformIt'\nmethod of this class, the respective Apache Transform is instantiated. It\nis in this method, where both the XMLCryptoContext and the Apache Transform\nImpl would be available at the same time. There it would be possible to set\na URIResolver (that is a wrapper over the URIDereferencer of the \nXMLCryptoContext) to the Apache Transform object - provided such a setter is \nadded to the class, which shouldn't be a problem because it doesn't break\ncompatibility. In the Apache TransformXSLT 'enginePerformTransform' method\nthe URIResolver would be accessible via _transformObject.getURIResolver().\n\nWhat do you think about that? \n\nregards,\nPatrick", "id": 88462, "time": "2006-04-25T09:04:00Z", "creator": "patrick@zync.at", "creation_time": "2006-04-25T09:04:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 39349, "is_private": false, "id": 88973, "creation_time": "2006-05-09T20:16:48Z", "time": "2006-05-09T20:16:48Z", "creator": "sean.mullan@oracle.com", "text": "Hi Patrick,\n\nSorry for not getting back to you earlier. I think your proposed solution is\nfine. Can you attach a patch (or code diffs) to this bug when you have it\nready? \n", "attachment_id": null}]
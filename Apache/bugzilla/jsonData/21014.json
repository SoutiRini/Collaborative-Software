[{"count": 0, "tags": [], "creator": "jonas.kilian@dresdner-bank.com", "is_private": false, "id": 39286, "attachment_id": null, "bug_id": 21014, "creation_time": "2003-06-23T15:22:49Z", "time": "2003-06-23T15:22:49Z", "text": "...it should handle seconds in the datetime parameter.\n\nMy use case:\n1. [Local Buildfile]  Builds distribution package\n2. [Local Buildfile]  Uploads distribution package to remote \n                      server including remote buildfile\n3. [Local Buildfile]  runs remote buildfile via telnet\n4. [Remote Buildfile] uses ECHO to write timestamp file if \n                      installation successful\n5. [Local Buildfile]  downloads timestamp file and reads timestamp \n                      property\n6. [Local Buildfile]  uses TOUCH with parameter datetime containing\n                      just read timestamp on some temporary file\n7. [Local Buildfile]  uses UPTODATE to verify that temporary file is \n                      NEWER than the archive built in 1.\n\nThis crashes from time to time, if rebuild is very fast:\ne.g. the archive is created at 02:02:10, the installation is complete at \n02:02:43, but the temporary touched file's date is set to 02:02:00\n\nNote above, that the touch is just a workaround because UPTODATE is only \nworking with files. But there might be other problem cases, too."}, {"count": 1, "tags": [], "bug_id": 21014, "attachment_id": null, "text": "Touch is a wrapper around the java.io.File.SetLastModified() method, which takes\na time in milliseconds, rounded down by whatever the filesystem can handle.\n\nIf you have an accuracy problem it is either\n-your file system: FAT only has a 2s accuracy (that other ant tasks take in to\naccount)\n-different clocks are set to different values or timezones.\n\nWith comments about 'network; in your bugrep, I suspect that your remote server\ndoes not have a clock in sync with your local system. Try using something like\nNTP to line all your clocks up.\n\n-steve", "id": 39294, "time": "2003-06-23T16:36:54Z", "creator": "stevel@apache.org", "creation_time": "2003-06-23T16:36:54Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jonas.kilian@dresdner-bank.com", "text": "Sorry, I made myself not very clear:\n\nThe problem is NOT the TOUCH itself which is correct including seconds on my \nsystem. The problem IS the datetime parameter, which does not take seconds as \ninput pattern. I think it fails because TOUCH uses internally \n\n  DateFormat df = DateFormat.getDateTimeInstance(\n    DateFormat.SHORT,\n    DateFormat.SHORT,\n    Locale.US\n  );\n\n  [..]\n\n  df.parse( <datetime-pattern> );\n\nand this DateFormat does not accept seconds because it's of type SHORT. After \nchanging it to MEDIUM, my modified TOUCH is able to parse the following pattern:\n\n<tstamp>\n     <format property=\"buildtime\" pattern=\"MM/dd/yyyy HH:mm:ss aa\"/>\n</tstamp>\n\nwhich it did not parse before, resulting in a java.text.ParseException.\n\n\n\n", "id": 39296, "attachment_id": null, "bug_id": 21014, "creation_time": "2003-06-23T16:50:08Z", "time": "2003-06-23T16:50:08Z", "is_private": false}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "text": "You are correct, but changing it the way you suggest would probably break existing\nbuild files.  If we changed the DateFormat it would fail to parse strings that are\nvalid in the SHORT format, at least I think so.\n\nI'll play around with it (maybe tryong to parse the MEDIUM format and fall back to\nSHORT on an exception or something like this).", "id": 39322, "time": "2003-06-24T09:57:17Z", "bug_id": 21014, "creation_time": "2003-06-24T09:57:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "fixed with nightly build 2003-06-25.", "is_private": false, "id": 39335, "creator": "bodewig@apache.org", "time": "2003-06-24T12:49:45Z", "bug_id": 21014, "creation_time": "2003-06-24T12:49:45Z", "attachment_id": null}]
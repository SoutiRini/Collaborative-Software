[{"count": 0, "tags": [], "text": "[REGRESSION] HPSF \n\nIt looks like we have a regression caused by recent changes in HPSF: an OLE2 file becomes unreadable after write if it contains a variant property of unsupported type. In my research the problematic variant types were 4126 and 4108. The log warninga are below:\n\nHPSF does not yet support the variant type 4126 (unknown variant type, 000000000000101E).  \nHPSF does not yet support the variant type 4108 (unknown variant type, 000000000000100C). \n\nI was working on some improvements in HSSF and noticed Excel coudn't open the output file. At first I thought it was my changes, but it turned out that even simple read-write results in unreadble output: \n\n\n  HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(inputFile));\n\n  FileOutputStream os = new FileOutputStream(outputFile);\n  wb.write(os);\n  os.close();\n\nTry the code above against the following files from our collection of test files and the output will be coruppted. \n  \n\n12843-1.xls        34775.xls              45365.xls    ContinueRecordProblem.xls         OddStyleRecord.xls\n13224.xls          37684-2.xls            45365-2.xls  ex42570-20305.xls                 RangePtg.xls\n14460.xls          41139.xls              46137.xls    ex44921-21902.xls                 testNames.xls\n24207.xls          42464-ExpPtg-bad.xls   47034.xls    ex45978-extraLinkTableSheets.xls  XRefCalc.xls\n27852.xls          42464-ExpPtg-ok.xls    47847.xls    ex46548-23133.xls                 XRefCalcData.xls\n29982.xls          42844.xls              48026.xls    IndexFunctionTestCaseData.xls\n30978-deleted.xls  44010-SingleChart.xls  49185.xls    IrrNpvTestCaseData.xls\n32822.xls          44010-TwoCharts.xls    50939.xls    MRExtraLines.xls\n\nExcel 2010 shows a warning when opening such files.  \n\nThe problem seems to be reelated to OLE properties and HPSF. If I comment the line 1218 in HSSFWorkbook then all is fine and Excel is happy to open the output files:\n\n        // Write out our HPFS properties, if we have them\n        writeProperties(fs, excepts);\n\nThis is a must for 3.8-final. \n\nYegor", "attachment_id": null, "id": 152398, "creator": "yegor@dinom.ru", "time": "2011-12-25T20:11:36Z", "bug_id": 52385, "creation_time": "2011-12-25T20:11:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52385, "attachment_id": null, "text": "I think this is related to (or rather, causes) bug #52337, as the returned structure should be of type VT_VECTOR | VT_VARIANT (0x100C). \n\nSo it seems to me that the problem is in the code that reads the property sets, rather than the writing. \n\nNik", "id": 152558, "time": "2012-01-03T21:47:30Z", "creator": "niklas.rehfeld@gmail.com", "creation_time": "2012-01-03T21:47:30Z", "is_private": false}, {"count": 2, "tags": [], "text": "I had a look around the code, the bug seems to be in \n\nTypedPropertyValue.read(byte[], int)\n\nin the fact that it automatically pads the result, i.e. returns a 'padded' offset. This is bad when reading the Heading Pairs vector (and possibly others) in the DocumentSummaryInformation stream, as they use *unpadded* strings of the type UnalignedLpstr (http://msdn.microsoft.com/en-us/library/dd950621%28v=office.12%29.aspx).\nI hope that this is the same bug, and not completely unrelated. \n\nNik", "attachment_id": null, "id": 152578, "creator": "niklas.rehfeld@gmail.com", "time": "2012-01-05T02:55:53Z", "bug_id": 52385, "creation_time": "2012-01-05T02:55:53Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 28134\nDiagram of the HeadingPair/DocParts TypedProperty structures\n\nJust thought this might be useful for this bug, it shows some of the structure of the docparts and headingpair properties, which as far as I have been able to find, are the only ones that use unaligned strings in property sets. \n\nAll the info comes straight from MS-OSHARED (and maybe a little bit from MS-OLEPS)\n\nIgnore the green stuff on the left, that was from a project that I'm working on. \n\nNik", "attachment_id": 28134, "id": 152669, "creator": "niklas.rehfeld@gmail.com", "time": "2012-01-11T01:39:30Z", "bug_id": 52385, "creation_time": "2012-01-11T01:39:30Z", "is_private": false}, {"count": 4, "tags": [], "text": "Your hypothesis seems to be correct. I changed TypedPropertyValue.read(byte[], int) to return the unpadded offset and it fixed the problem. \n\nThe fix has been committed in 1244388\n\nRegards,\nYegor\n\n(In reply to comment #2)\n> I had a look around the code, the bug seems to be in \n> \n> TypedPropertyValue.read(byte[], int)\n> \n> in the fact that it automatically pads the result, i.e. returns a 'padded'\n> offset. This is bad when reading the Heading Pairs vector (and possibly others)\n> in the DocumentSummaryInformation stream, as they use *unpadded* strings of the\n> type UnalignedLpstr\n> (http://msdn.microsoft.com/en-us/library/dd950621%28v=office.12%29.aspx).\n> I hope that this is the same bug, and not completely unrelated. \n> \n> Nik", "attachment_id": null, "id": 153798, "creator": "yegor@dinom.ru", "time": "2012-02-15T07:53:08Z", "bug_id": 52385, "creation_time": "2012-02-15T07:53:08Z", "is_private": false}]
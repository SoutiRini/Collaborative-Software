[{"count": 0, "text": "The current helper methods to create a PivotTable in XSSFSheet have quite a bit of useful logic, dealing with setting up the proper CT* objects and references to\nHowever, these only handle pivot tables based on AreaReferences.  Excel allows PivotTables based on defined names and tables.\n\nThese are stored in a different field than the area reference, in CTWorksheetSource.\n\nAreas go in the \"ref\" attribute, as \"A1:D10\" style values.\n\nNamed Ranges and Table names go instead in the \"name\" attribute.  As far as I can tell, they overload this field, and you have to check names and tables to find the match, similar to how tables and ranges are both listed in Excel in the Manage Names dialog.\n\nHow exactly to do this in POI is the question, and probably merits some discussion. I'm willing to do the work and submit a patch, of course, but the solution should have some level of agreement first to avoid unnecessary churn.\n\nWe could augment the current methods with similar ones that take a String name, or add new objects that represent a named range or table.\n\nThen we can refactor the XSSFSheet code a bit to isolate the CTWorksheetSource element creation and avoid duplicating the rest of the setup logic.\n\nAnother option could be to just expose XSSFSheet.createPivotTable(), which hooks up a new one to the sheet properly.  Callers would likely then want to call XSSFPivotTable.setDefaultPivotTableDefinition() themselves to avoid problems with incomplete definitions.\n\nI may find other gaps/improvements for XSSFPivotTable as I move into my next phase of investigation :)", "bug_id": 59853, "attachment_id": null, "id": 192353, "time": "2016-07-13T22:12:10Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-07-13T22:12:10Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "text": "I prefer methods that use higher level classes (AreaReference) over  lower level classes and primitives (String). There are already too many classes that (incorrectly) implement address/reference parsing when it's not the class's job.\n\nWhat method signatures are you proposing?", "id": 192371, "time": "2016-07-14T08:48:34Z", "bug_id": 59853, "creation_time": "2016-07-14T08:48:34Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Currently XSSFSheet has:\n\npublic XSSFPivotTable createPivotTable(AreaReference source, CellReference position, Sheet sourceSheet);\npublic XSSFPivotTable createPivotTable(AreaReference source, CellReference position);\n\nI think these would work as additional methods, with some refactoring of the private and protected stuff these call:\n\npublic XSSFPivotTable createPivotTable(Name source, CellReference position, Sheet sourceSheet);\npublic XSSFPivotTable createPivotTable(Name source, CellReference position);\npublic XSSFPivotTable createPivotTable(Table source, CellReference position, Sheet sourceSheet);\npublic XSSFPivotTable createPivotTable(Table source, CellReference position);\n\nThat keeps it using Objects instead of names, even if the underlying structure winds up just using the name.\n\nI think the supporting code can be rearranged to set the reference or name attribute independent of the other setup steps, so those can be common and only the final source association is distinct for the 3 flavors.", "is_private": false, "bug_id": 59853, "id": 192386, "time": "2016-07-14T19:16:17Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-07-14T19:16:17Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "onealj@apache.org", "text": "Your additional createPivotTable(Name, ...) sounds good to me. The fact that OOXML overloads the name field is an implementation detail that users of POI should not need to know.\n\n* Do Tables have an entry in the Name Manager or elsewhere?\n* Is there any way to reference a table without having the table object besides creating a new class (TableReference) or falling back to a String for the table name and the Workbook that contains a table with that name?\n\nIf not, having createPivotTable(Table, ...) is fine.", "id": 192434, "time": "2016-07-17T03:23:26Z", "bug_id": 59853, "creation_time": "2016-07-17T03:23:26Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "(In reply to Javen O'Neal from comment #3)\n> * Do Tables have an entry in the Name Manager or elsewhere?\n\nLooking for a Table the same way you look for a named range returns no matches, so I don't think they are referenced in any similar fashion in the OOXML or POI.  Excel appears to do its own thing combining them into the same Edit Names dialog - my guess it was an expedient hack to reuse existing UI code.\n\n> * Is there any way to reference a table without having the table object\n> besides creating a new class (TableReference) or falling back to a String\n> for the table name and the Workbook that contains a table with that name?\n\nNot that I can see.\n\n> If not, having createPivotTable(Table, ...) is fine.\n\nI'll work up a patch with the suggestions I made in this issue.  Been on vacation, have another one coming up, we'll see how much I get done this week on this front and others.", "is_private": false, "bug_id": 59853, "id": 192632, "time": "2016-07-25T17:33:14Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-07-25T17:33:14Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "greg.woolsey@gmail.com", "attachment_id": 34110, "id": 192951, "time": "2016-08-08T04:24:43Z", "bug_id": 59853, "creation_time": "2016-08-08T04:24:43Z", "is_private": false, "text": "Created attachment 34110\nAdditional pivot table base data options - Named Range and Table\n\nAfter more vacations than I thought we could pull off in one summer, I finally got this ready.  There were some interesting wrinkles down in the weeds, but nothing that affected a broad area of the API.\n\nI've refactored the TestXSSFPivotTable class into an abstract base class with the tests, and two concrete subclasses with the setup.  Each class sets up the pivot tables differently, one with area references as before, and one with names (named ranges).  Both pass with no changes, as they should.\n\nI'm open to refactoring ideas for XSSFPivotTable.createSourceReferences() - it now has two mutually exclusive parameters, not my favorite pattern.  However, it's protected, and called from exactly one place, which is also overloaded that way, a private method, XSSFSheet.createPivotTable(...). \n\nSince those are internal, I was OK with it."}, {"count": 6, "tags": [], "bug_id": 59853, "text": "(In reply to Greg Woolsey from comment #5)\n> Created attachment 34110 [details]\n> Additional pivot table base data options - Named Range and Table\n> \nAnyone have time yet to look over this patch and apply it if it looks good, or let me know what I missed?", "id": 193091, "time": "2016-08-14T21:07:07Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-08-14T21:07:07Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 193100, "time": "2016-08-14T22:04:42Z", "bug_id": 59853, "creation_time": "2016-08-14T22:04:42Z", "text": "We're in a code freeze for 3.15 beta 3 release right now, but I'll take a look once the release is out."}, {"attachment_id": null, "tags": [], "bug_id": 59853, "text": "> +++ src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotCacheDefinition.java\n> table.getName().equals(name)\nAre table names case insensitive or could table.getName() ever have different capitalizaion than wsSource.getName() (such as a sheet rename after the cache is built up?) Would equalsIgnoreCase be better here?\nReview each String.equals(String) usage to see if it should actually be String.equalsIgnoreCase(String), such as in createPivotTable where sheet names are compared.\n\nI agree with you that a method with mutually exclusive parameters is clunky. Can \n> protected void createSourceReferences(AreaReference sourceRef, String sourceName, CellReference position, Sheet sourceSheet)\nbe broken into 2 functions? Can sourceName be an XSSFName instead of a String?\n\nAlso, could you upgrade the unit tests to junit3 instead of junit4 (example: https://svn.apache.org/viewvc/poi/trunk/src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFTable.java?view=markup)? If not, I will upgrade them when I commit them.\n\nOtherwise, looks pretty good.", "count": 8, "id": 193101, "time": "2016-08-14T23:15:22Z", "creator": "onealj@apache.org", "creation_time": "2016-08-14T23:15:22Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 59853, "attachment_id": null, "text": "(In reply to Javen O'Neal from comment #8)\n> > +++ src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotCacheDefinition.java\n> > table.getName().equals(name)\n> Are table names case insensitive\n\nOops, yes, names are insensitive, like range names.  I'll find those and fix them.\n\n> \n> I agree with you that a method with mutually exclusive parameters is clunky.\n> Can \n> > protected void createSourceReferences(AreaReference sourceRef, String sourceName, CellReference position, Sheet sourceSheet)\n> be broken into 2 functions? Can sourceName be an XSSFName instead of a\n> String?\n\nIt would have to be 3 functions, like the createPivotTable methods in XSSFSheet, with duplicated code.  The XML overloads the same \"name\" attribute to reference an XSSFName and an XSSFTable.  We could do the 3 object variants, and a functional interface to configure the CTWorksheetSource as needed, passing inline anonymous classes to do that bit of the logic. \n\nThat would maintain Java6 compatibility and let createSourceReferences not care whether it referenced a name or area.\n \n> Also, could you upgrade the unit tests to junit3 instead of junit4 (example:\n> https://svn.apache.org/viewvc/poi/trunk/src/ooxml/testcases/org/apache/poi/\n> xssf/usermodel/TestXSSFTable.java?view=markup)? If not, I will upgrade them\n> when I commit them.\n\nI kept the test the same as it was when I refactored, but I could convert to the older format if that's the preferred standard.", "id": 193103, "time": "2016-08-15T00:12:17Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-08-15T00:12:17Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 59853, "text": "(In reply to Greg Woolsey from comment #9)\n> It would have to be 3 functions, like the createPivotTable methods in\n> XSSFSheet, with duplicated code.  The XML overloads the same \"name\"\n> attribute to reference an XSSFName and an XSSFTable.  We could do the 3\n> object variants, and a functional interface to configure the\n> CTWorksheetSource as needed, passing inline anonymous classes to do that bit\n> of the logic. \nWhat subclasses XSSFPivotTable that would require this method to be overridden or use anonymous classes? I haven't looked that closely at the code yet. Leave it alone for now if you can't find a more complicated solution. As you said, it doesn't matter as much being a protected method.\n \n> > Also, could you upgrade the unit tests to junit3 instead of junit4\nI mis-typed. We would like to upgrade from junit3 (junit.*, \"extends TestCase\") to junit4 (org.junit.*, \"@Test\"). On second thought, I'll take care of the upgrade myself. It'll keep your diff smaller and easier to review.", "id": 193104, "time": "2016-08-15T00:42:56Z", "creator": "onealj@apache.org", "creation_time": "2016-08-15T00:42:56Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "Created attachment 34153\nUpdated patch for table/named range based pivot tables\n\nHere is an updated patch for your review.  I refactored some more to get rid of the ugly method signatures with mutually exclusive parameters.  I used a simple functional interface, but with Java 6 compatible anonymous class implementations, not Java 8 Lambda syntax.  Should be easy to read and simplifies things.\n\nI didn't touch the unit tests, per your preference.", "is_private": false, "bug_id": 59853, "id": 193126, "time": "2016-08-15T19:34:41Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-08-15T19:34:41Z", "attachment_id": 34153}, {"count": 12, "tags": [], "creator": "onealj@apache.org", "text": "Applied in r1761537. Will be included in POI 3.16 beta 1. Thanks for the patch!\n\nI left a couple comments in the code which need clarification:\nIn XSSFPivotCacheDefinition:\nIs the pivot table name case sensitive?\nhttp://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFPivotCacheDefinition.java?annotate=1761537&pathrev=1761537#l148\n\nIn XSSFSheet:\nCan we further simplify this to AreaReference.formatAsString() to avoid duplicating cell reference formatting and parsing code?\nhttp://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFSheet.java?annotate=1761537&pathrev=1761537#l4180", "id": 193828, "time": "2016-09-20T08:03:02Z", "bug_id": 59853, "creation_time": "2016-09-20T08:03:02Z", "is_private": false, "attachment_id": null}]
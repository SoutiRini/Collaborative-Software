[{"count": 0, "tags": [], "bug_id": 41685, "is_private": false, "text": "It would be possible to implement optional HTTP Authentication (something that\npeople seem to want often enough; see links below) without violating any RFCs.  \n\nOptional Auth Process\n---------------------\nThe idea is that (if the feature were turned on) the process would work as follows:\n1. A request comes in from a web browser for a page marked with optional\nauthentication\n2. Seeing no authentication, Apache passes this on to the CGI/mod_perl that will\nprocess it\n3. The CGI/mod_perl sends back a response with a 401/WWW-Authenticate\n4. Apache, seeing authentication in the response this time, processes the\nauthentication.  Either way, it passes control back to the CGI/mod_perl, but if\nthe authentication failed, it will not populate the variables containing the\nusername and the like.  It is up to the CGI/mod_perl how to respond to this.\n\nChanges required\n----------------\nThe change required in Apache to achieve this is fairly simple: if optional auth\nis specified (eg. in a .htaccess), pass control to the CGI/mod_perl even if the\nauth fails; don't respond with a 401 or a WWW-Authenticate.\n\nSuggested config syntax:\nAuthOptional On\n\nPresumably, this should also be part of AllowOverride AuthConfig\n\nAdditional Information\n----------------------\nI'm not 100% sure this belongs in the core, but I was unsure where it did belong\n\nFor reference, the complaints that people have about using HTTP Auth are\nsummarised in the following articles:\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=155252\nhttp://fishbowl.pastiche.org/2003/12/30/saving_http_authentication\n\nSome of their solutions involve changing RFCs.  Mine only involves adding a\nconfiguration option which doesn't violate RFCs", "id": 99716, "time": "2007-02-22T17:33:41Z", "creator": "wayland@wayland.id.au", "creation_time": "2007-02-22T17:33:41Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41685, "text": "An alternative solution to this can be implemented with this tiny patch:\n\nbrock% cat files/require-auth.patch \n--- httpd-2.2.16/server/request.c.orig\t2011-03-08 12:36:08.701398059 +0000\n+++ httpd-2.2.16/server/request.c\t2011-03-08 12:47:46.159477808 +0000\n@@ -1631,6 +1631,11 @@\n     require_line *reqs;\n     int i;\n \n+    const char* auth_header = apr_table_get(r->headers_in, \"Authorization\");\n+    if (auth_header && strlen(auth_header)) {\n+    \treturn 1;\n+    }\n+\n     if (!reqs_arr) {\n         return 0;\n     }\nbrock% \n\nThis changes the requires_auth function to return true if the browser happens to have sent authentication credentials.  The assumption here is that whatever resource is being protected will detect the authentication and apply whatever authorization is needed.", "id": 144827, "time": "2011-03-08T09:18:50Z", "creator": "alec-keyword-apache.d8a97a@setfilepointer.com", "creation_time": "2011-03-08T09:18:50Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41685, "is_private": false, "text": "I haven't read the code, but the description makes it sound like this would work.  Is there any chance it can be included in Apache?", "id": 144887, "time": "2011-03-09T16:12:25Z", "creator": "wayland@wayland.id.au", "creation_time": "2011-03-09T16:12:25Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "text": "Slightly confused.  What standard are you referencing here?", "count": 3, "id": 144891, "time": "2011-03-09T17:15:25Z", "bug_id": 41685, "creation_time": "2011-03-09T17:15:25Z", "is_private": false}, {"count": 4, "tags": [], "creator": "alec-keyword-apache.d8a97a@setfilepointer.com", "attachment_id": null, "text": "(In reply to comment #3)\n> Slightly confused.  What standard are you referencing here?\n\nI think rfc2617 is most relevant, although this really isn't a standards issue, it's an issue with the way apache configures and handles authentication.  Currently, apache will only process an Authorization: header if there is a require directive on the request.  My change above changes it so apache will always process an Authorization header.  This allows a module or CGI program (or .asis file) to send a WWW-Authenticate challenge back to a client, but then have Apache handle the resulting Authorization header.  Without this, the module/CGI program would have to re-implement the authentication code that is already in apache.  For HTTP basic, this is a trivial effort, but Digest or Negotiate are both hard enough that it is attractive to use the existing code in Apache rather than re-implementing it.  I have a program that sends a WWW-Authenticate header, and then I use this config:\n\n    <Location /semiprivate>\n        AuthType Kerberos\n        #require valid-user\n        Krb5Keytab /path/to/keytab\n        KrbMethodK5Passwd off\n        KrbAuthoritative off\n    </Location>\n\nwhich, with the above patch, allows anonymous access until the program sends a WWW-Authenticate header, at which point browsers will send an Authorization header, and then Apache will authenticate them.  Prior to the time the program sends the WWW-Authenticate header, the user can access resources in /semiprivate anonymously.", "id": 144895, "time": "2011-03-09T17:41:18Z", "bug_id": 41685, "creation_time": "2011-03-09T17:41:18Z", "is_private": false}, {"count": 5, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "What you describe isn't a standards-issue, but the description of the issue (\"Implement optional HTTP Authentication in a standards-compliant fashion\") indicates that it is.  Who is at cross-purposes here?", "id": 144898, "time": "2011-03-10T02:40:05Z", "bug_id": 41685, "creation_time": "2011-03-10T02:40:05Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 41685, "text": "Sorry, that's my fault.  The links provided in my first post suggest altering the standards.  My point is that is possible to fix one of the problems that they list in their articles without altering the standards, and that's what I'm suggesting here.  So what I'm saying is, \"People have always thought that fixing the problem requires altering the standards, but I've found a way to do it without altering the standards\".  My apologies for any miscommunication.", "id": 144900, "time": "2011-03-10T04:43:08Z", "creator": "wayland@wayland.id.au", "creation_time": "2011-03-10T04:43:08Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 55384, "attachment_id": 30713, "is_private": false, "id": 169275, "time": "2013-08-07T20:58:14Z", "creator": "akokskis@gmail.com", "creation_time": "2013-08-07T20:58:14Z", "text": "Created attachment 30713\nThe generated spreadsheet showing the missing information in cell B11\n\nTrying to set a precalculated String value on a formula cell fails totally, leaving absolutely no information in that cell in the generated spreadsheet.  This is counter to what is written in the API for SXSSFCell (and for that matter, the Cell interface as well), which states: \"Note, this method only sets the formula string and does not calculate the formula value. To set the precalculated value use setCellValue(double) or setCellValue(String)\"\n\n\n\nHere is a snippet of code that demonstrates this incorrect behavior.  This code will generate a spreadsheet with 11 rows, the last one (row #11) being sums of their respective columns.  In column A (cell A11), no precalculated value is set.  In column B (cell B11), a precalculated value is set as a String and here is where we see the failure, with absolutely no information existing in the generated spreadsheet.  In column C (cell C11), a precalculated value is set as an integer, and that performs as expected.\nI've also attached a copy of the generated spreadsheet to this report.\n\n\n  SXSSFWorkbook wb = new SXSSFWorkbook(100);\n  Sheet sh = wb.createSheet();\n  for(int rownum = 0; rownum < 10; rownum++){\n    org.apache.poi.ss.usermodel.Row row = sh.createRow(rownum);\n    for(int cellnum = 0; cellnum < 3; cellnum++){\n      Cell cell = row.createCell(cellnum);\n      cell.setCellValue(rownum + cellnum);\n    }\n  }\n  org.apache.poi.ss.usermodel.Row row = sh.createRow(10);\n  // setting no precalculated value works just fine.\n  Cell cell1 = row.createCell(0);\n  cell1.setCellFormula(\"SUM(A1:A10)\");\n  \n  // but setting a precalculated STRING value fails totally\n  Cell cell2 = row.createCell(1);\n  cell2.setCellFormula(\"SUM(B1:B10)\");\n  cell2.setCellValue(\"55\");\n  \n  // setting a precalculated int value works as expected\n  Cell cell3 = row.createCell(2);\n  cell3.setCellFormula(\"SUM(C1:C10)\");\n  cell3.setCellValue(65);\n\n  FileOutputStream out = new   FileOutputStream(\"/temp/sxssf.xlsx\");\n  wb.write(out);\n  out.close();\n\n\nPlease also note that I have not had a chance to test this outside of the SXSSF component, so I'm unsure as to whether or not this bug is isolated to SXSSF or exists in the general case.\n\nThanks!"}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Any chance you could re-write this as a general unit test across all implementations? Probably something starting with\n\nfor (Workbook wb : new Workbook[] { new HSSFWorkbook(), new XSSFWorkbook, new SXSSFWorkbook() }) {\n  ....\n\nYou'd need to use one hssf/xssf to read back afterwards to check, but otherwise it ought to be possible to make a generic test to check how it behaves across all versions", "id": 169314, "time": "2013-08-08T15:27:10Z", "bug_id": 55384, "creation_time": "2013-08-08T15:27:10Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55384, "attachment_id": null, "id": 169315, "creation_time": "2013-08-08T15:34:18Z", "time": "2013-08-08T15:34:18Z", "creator": "akokskis@gmail.com", "text": ">Any chance you could re-write this as a general unit test across all implementations?\n\n\n\nSure, I'll do that sometime within the next few days.  We'll see just how slow work is ;)", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55384, "attachment_id": null, "is_private": false, "id": 169462, "time": "2013-08-15T15:43:35Z", "creator": "akokskis@gmail.com", "creation_time": "2013-08-15T15:43:35Z", "text": "Ok, so I finally got around to writing this as a general unit test and it looks like this bug is limited to SXSSF.\n\nHere's a snippet of code that demonstrates the failure in SXSSF, while showing that XSSF and HSSF work as one would expect.  I'm not too familiar with using JUnit assertions, etc, so please excuse my code if it's blatantly wrong.\n\nI've also attached the three spreadsheets that this code will generate.\n\n\n  Workbook [] wbs = new Workbook[] { new HSSFWorkbook(), new XSSFWorkbook(), new SXSSFWorkbook() };\n  String fileBase = \"/temp/\";\n  for (Workbook wb : wbs) {\n  \n    Sheet sh = wb.createSheet();\n    for(int rownum = 0; rownum < 10; rownum++){\n      org.apache.poi.ss.usermodel.Row row = sh.createRow(rownum);\n      for(int cellnum = 0; cellnum < 3; cellnum++){\n        Cell cell = row.createCell(cellnum);\n        cell.setCellValue(rownum + cellnum);\n      }\n    }\n    Row row = sh.createRow(10);\n    // setting no precalculated value works just fine.\n    Cell cell1 = row.createCell(0);\n    cell1.setCellFormula(\"SUM(A1:A10)\");\n    \n    // but setting a precalculated STRING value fails totally in SXSSF\n    Cell cell2 = row.createCell(1);\n    cell2.setCellFormula(\"SUM(B1:B10)\");\n    cell2.setCellValue(\"55\");\n    \n    // setting a precalculated int value works as expected\n    Cell cell3 = row.createCell(2);\n    cell3.setCellFormula(\"SUM(C1:C10)\");\n    cell3.setCellValue(65);\n    \n    String name = wb.getClass().getCanonicalName();\n    String ext = (wb instanceof HSSFWorkbook) ? \".xls\" : \".xlsx\";\n    try {\n      FileOutputStream output = new  FileOutputStream(fileBase + name + ext);\n      wb.write(output);\n      output.close();\n    } catch (Exception ignored) {}\n  }\n  \n  for (Workbook wb : wbs) {\n    String name = wb.getClass().getCanonicalName();\n    String ext = (wb instanceof HSSFWorkbook) ? \".xls\" : \".xlsx\";\n    FileInputStream fis = null;\n    int cellIdx = 0;\n    try {\n      fis = new FileInputStream(fileBase + name + ext);\n    \n      Workbook readFile = WorkbookFactory.create(fis);\n      Sheet sheet = readFile.getSheetAt(0);\n      Row row = sheet.getRow(sheet.getLastRowNum());\n      \n      for (Cell cell : row) {\n        cellIdx++;\n        String cellValue = null;\n        switch (cell.getCellType()) {\n          case Cell.CELL_TYPE_STRING:\n            cellValue = cell.getRichStringCellValue().getString();\n            break;\n          case Cell.CELL_TYPE_FORMULA:\n            cellValue = cell.getCellFormula();\n            break;\n        }\n        cellValue = cellValue.isEmpty() ? null : cellValue;\n        Assert.assertNotNull(cellValue);\n      }\n    } catch (AssertionFailedError e) {\n      System.out.println(\"!!!!!!!!\");\n      System.out.println(\"Assertion Error on %s at cellIdx %d\", name, cellIdx);\n    } catch (Exception ignored) {\n      // log exe\n    } finally {\n      if (fis != null)\n        fis.close();\n    }\n  }"}, {"count": 4, "attachment_id": 30732, "creator": "akokskis@gmail.com", "is_private": false, "id": 169463, "time": "2013-08-15T15:45:37Z", "bug_id": 55384, "creation_time": "2013-08-15T15:45:37Z", "tags": [], "text": "Created attachment 30732\nHSSF spreadsheet generated using new code; shows NO bug"}, {"count": 5, "attachment_id": 30733, "creator": "akokskis@gmail.com", "is_private": false, "id": 169464, "time": "2013-08-15T15:45:54Z", "bug_id": 55384, "creation_time": "2013-08-15T15:45:54Z", "tags": [], "text": "Created attachment 30733\nXSSF spreadsheet generated using new code; shows NO bug"}, {"count": 6, "tags": [], "bug_id": 55384, "attachment_id": 30734, "id": 169465, "time": "2013-08-15T15:46:16Z", "creator": "akokskis@gmail.com", "creation_time": "2013-08-15T15:46:16Z", "is_private": false, "text": "Created attachment 30734\nSXSSF spreadsheet generated using new code; SHOWS BUG"}, {"count": 7, "tags": [], "bug_id": 55384, "attachment_id": null, "id": 184621, "creation_time": "2015-08-18T14:57:13Z", "time": "2015-08-18T14:57:13Z", "creator": "dtn-asfbugs@corefiling.co.uk", "text": "I've come across this too; it looks like not all of the setCellValue methods on SXSSFCell are taking appropriate care to avoid wiping any previously set formula. Will try and progress this via a test.", "is_private": false}, {"count": 8, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "is_private": false, "id": 192675, "time": "2016-07-27T18:17:32Z", "bug_id": 55384, "creation_time": "2016-07-27T18:17:32Z", "text": "I have applied a fix for this via r1754328 by copying over the formula value when a new formula-cell-type is set."}]
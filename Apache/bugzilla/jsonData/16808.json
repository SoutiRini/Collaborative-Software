[{"count": 0, "tags": [], "bug_id": 16808, "text": "The JSP 1.2 specification, in section JSP.10.1, titled \"Simple Tag Handlers\", in\na subsection titled \"Properties\", has the following statement:\n\nOnce properly set, all properties are expected to be persistent, so that if the\nJSP container ascertains that a property has already been set on a given tag\nhandler instance, it needs not set it again. User code can access property\ninformation and access and modify tag handler internal state starting with the\nfirst action method (doStartTag) up until the last action method (doEndTag or\ndoFinally for tag handlers implementing TryCatchFinally).\n\nI've discoverered Tomcat is not taking advantage of the fact that it doesn't\nneed to call the setter method again on the reused tag handler.\n\nFollowing this is a simple excerpt from my test case, using Struts and\nStruts-EL.  I find that the \"setValue()\" method is called on the first\niteration, which is expected, but it is also called on the second iteration,\nwhich is not necessary.\n\n      <logic-el:iterate collection=\"${testbean.stringArray}\" id=\"foo\"\n                        indexId=\"ctr\">\n       <td>\n        <html-el:text name=\"testbean\" property=\"stringIndexed\" value=\"${foo}\"\n                      indexed=\"true\"/>\n       </td>\n      </logic-el:iterate>\n\nThis might be considered just an optimization issue, but the lack of this\noptimization led me down an unfortunate road, due to a mistake I made.\n\nI wrote all of the tag classes in the Struts-EL library under the mistaken\nassumption that I could safely modify attribute values.  Making this assumption\nmade it very convenient, as I could subclass from the Struts tag classes, and\njust use the getter/setter methods for the attributes in the base class, without\nhaving to add redundant attributes to the derived class.  After the container\ncalls the setter on the attribute (say with a value of \"${foo}\"), in the\n\"doStartTag()\" of the Struts-EL tags, I use the JSTL EL engine to evaluate the\nattribute value and send it back to the setter method of the attribute.\n\nThis works fine in Tomcat, which made me confident that I had followed all the\nrules, as I know that Tomcat is the reference implementation of the specification.\n\nUnfortunately, the Resin web container takes advantage of this optimization, so\nthat reused tag handlers won't get the setter methods called, so the attribute\nvalues will be the same as what I got from running the EL engine on the initial\ninstance, making the page and tag library quite broken.\n\nI know how to fix this in my tag library, but it will require a lot of\nstraightforward coding.\n\nFrom one point of view, this should only be considered an enhancement, but I\nthink this is a little different from other optimization opportunities.", "id": 30764, "time": "2003-02-05T17:22:01Z", "creator": "dmkarr@earthlink.net", "creation_time": "2003-02-05T17:22:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 16808, "text": "I cannot understand why you think setValue only needs to be invoked on the first\niteration, and not the subsequent iterations.  Isn't ${foo} changes from one\niteration to the next?\n\nIn any case, your program behavior should not rely on any performance\noptimizations the container may or may not do.  Also the section of the spec you\nquoted are talking about persistent properties in the same tag handler instance\n(from doStarg to doEndTag), not from one tag instance to another, so it does not\napply to your case.", "id": 36336, "time": "2003-04-29T22:17:51Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-04-29T22:17:51Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 16808, "is_private": false, "id": 36356, "time": "2003-04-30T02:18:54Z", "creator": "dmkarr@earthlink.net", "creation_time": "2003-04-30T02:18:54Z", "tags": [], "text": "Of course \"${foo}\" doesn't change from iteration to iteration, because as far as\nthe container can see, this is just a static string.  The specification makes it\nrelatively clear (perhaps by implication) that if two instances of a tag use the\nsame attribute values (as they would be for the same occurrence in a loop), then\nthe handler instance can be reused.\n\nIn any case, I long ago changed my tag library (Struts-EL, in the Struts\ndistribution) to no longer assume this, but the fact remains that Tomcat doesn't\ntake advantage of this optimization, and Resin does.  This subject was discussed\nmuch on the struts-dev list (and others, perhaps) about the time I wrote this\nreport.\n\nAnd this certainly does apply to my case.  A similar test case in Resin\ndemonstrated that the tag handler instance was reused, but not in Tomcat.\n\nObviously, I wouldn't consider this a bug, but I think it's still valid to mark\nthis as an enhancement."}, {"count": 3, "tags": [], "bug_id": 16808, "text": "Well, I don't agree with that Resin optimization either, which is not spec\ncompliant IMO (while the set of setters remain identical, allowing you to reuse,\nthe values are allowed to be different).\nThis is not an enhancement, as this would break the specification.", "id": 36359, "time": "2003-04-30T06:24:22Z", "creator": "remm@apache.org", "creation_time": "2003-04-30T06:24:22Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 5599, "attachment_id": null, "text": "When doing a forward from a servlet with a url-pattern of \"*\" or \"/*\" catalina \ngoes into an infinite loop. A url-pattern of \"*.go\" works fine.\n\n<servlet-mapping>\n  <servlet-name>myservlet</servlet-name>\n  <url-pattern>/*</url-pattern>\n</servlet-mapping>\n\nString nextpage = \"/test.jsp\";\ntry{\n  ServletContext context = getServletContext();\n  RequestDispatcher rd = context.getRequestDispatcher(nextpage);\n  if(response.isCommitted())\n    rd.include(request,response);\n  else\n    rd.forward(request,response);\n  }catch(Exception e){}\n\njavax.servlet.ServletException: Servlet execution threw an exception\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:269)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:243)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:201)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2344)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:164)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.AccessLogValve.invoke\n(AccessLogValve.java:462)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:163)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1011)\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1106)\n\tat java.lang.Thread.run(Thread.java:484)\n\n\nroot cause \n\njava.lang.StackOverflowError\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n....\n(ApplicationHttpRequest.java:233)\n        at org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationHttpRequest.removeAttribute\n(ApplicationHttpRequest.java:233)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke\n(ApplicationDispatcher.java:672)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward\n(ApplicationDispatcher.java:431)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward\n(ApplicationDispatcher.java:355)\n\tat com.workzen.servlet.controller.TestController.goForward\n(TestController.java:283)\n\tat com.workzen.servlet.controller.TestController.doGet\n(TestController.java:150)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke\n(ApplicationDispatcher.java:679)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward\n(ApplicationDispatcher.java:431)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward\n(ApplicationDispatcher.java:355)\n\tat com.workzen.servlet.controller.TestController.goForward\n(TestController.java:283)\n\tat com.workzen.servlet.controller.TestController.doGet\n(TestController.java:150)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n....", "id": 9181, "time": "2001-12-27T21:48:54Z", "creator": "bmatlack@workzen.userworld.com", "creation_time": "2001-12-27T21:48:54Z", "is_private": false}, {"count": 1, "tags": [], "text": "The code submitted with the original bug report has been tested successfully on \nJRun 3.0. In other words, the <url-pattern>*</url-pattern> does not cause an \nerror with JRun when trying to use RequestDispatcher to forward(\"/test.jsp\"); ", "is_private": false, "id": 9201, "creator": "bmatlack@workzen.userworld.com", "time": "2001-12-28T23:44:09Z", "bug_id": 5599, "creation_time": "2001-12-28T23:44:09Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 5599, "text": "After further research, the <url-pattern>/*</url-pattern> while valid is not \nrecommended. All requests, including images and style sheets, will be \nredirected to the servlet with this mapping. Instead a <url-pattern>/go/*</url-\npattern> will provide the desired results.", "id": 9214, "time": "2001-12-29T16:04:42Z", "creator": "bmatlack@workzen.userworld.com", "creation_time": "2001-12-29T16:04:42Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 5599, "text": "Tomcat also goes into an infinite loop using RequestDispatcher.forward(page) \nwhen: <url-pattern>/site/*</url-pattern> matches a subdirctory named /site.\n\nNormally one can protect the contents of the webapps/appname/site directory by \nusing a servlet to intercept all requests using a mapping that matches the \ndirectory name.", "id": 9277, "time": "2002-01-02T08:44:15Z", "creator": "bmatlack@workzen.userworld.com", "creation_time": "2002-01-02T08:44:15Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 5599, "attachment_id": null, "id": 9305, "time": "2002-01-02T17:19:34Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2002-01-02T17:19:34Z", "is_private": false, "text": "This is a user error, and Tomcat cannot do anything to stop it.\n\nWhen you use a URL mapping of \"/*\", that means you want this servlet to be \nresponsible for ALL requests for the web application (even JSP pages).  So, the \nRequestDispatcher you create will therefore cause the same servlet to be invoked \nagain, which will do the same thing again, and so on.\n\nIf you want to \"protect the contents of a directory\", you should use a *Filter* \nmapped to \"/*\" rather than a *Servlet*.  This doesn't interfere with the actual \nprocessing performed by your servlets and JSP pages, but does give you the \nopportunity to intercept things.\n\n"}]
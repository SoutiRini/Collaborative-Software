[{"count": 0, "tags": [], "creator": "martijn@ciphermail.com", "text": "POI uses InflaterInputStream in multiple places for decompression of images etc. The InflaterInputStream is used without any limit on the number of bytes written after deflating. This makes POI vulnerable to a 'zip' bomb which is a very large file (possible multiple GBs) with only zero bytes. Because the file only contains zero's the compressed file is very small.\n\nTo protect against a 'zip' bomb, the output from the InflaterInputStream should be wrapped in a stream that only accepts a certain amount of bytes. \n\nMy suggestion would be to allow POI users to register a global output buffer factory (or something like that) that allows the POI user to modify how a buffer is used globally. A POI user can then decide whether the buffer should stream to disk and or set a limit on the number of bytes accepted.", "id": 140732, "time": "2010-10-13T15:24:37Z", "bug_id": 50090, "creation_time": "2010-10-13T15:24:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50090, "attachment_id": null, "is_private": false, "id": 140733, "time": "2010-10-13T16:53:11Z", "creator": "dfisher@jmlafferty.com", "creation_time": "2010-10-13T16:53:11Z", "text": "Another idea would be to implement a system parameter that limits the expansion. The default would set rather large. Say if the compressed size is 100 bytes and the \"maxinflatorfactor\" is set to 2000 then the maximum size of the expanded item is limited to 200,000 bytes.\n\nI'll leave it to others to estimate the number of places this should be done. There really are more than a few."}, {"attachment_id": null, "tags": [], "creator": "martijn@ciphermail.com", "text": "Yes using an expansion limit is another solution. However personally I prefer that you can specify an upper limit. A solution which allows the POI user from implementing his/her own method of checking whether the output reaches some limit is therefore the most flexible I think.", "count": 2, "id": 140734, "time": "2010-10-13T16:57:03Z", "bug_id": 50090, "creation_time": "2010-10-13T16:57:03Z", "is_private": false}, {"attachment_id": 32839, "tags": [], "bug_id": 50090, "is_private": false, "count": 3, "id": 183663, "time": "2015-06-20T15:39:26Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-06-20T15:39:26Z", "text": "Created attachment 32839\n[Patch] Zip bomb patch\n\nHere is my zip bomb patch.\nI had to reflect into the ZipFile class to get to the raw bits,\nwhich might be a problem with Java 9.\nFurthermore there might be a slight decrease in OOXML processing performance,\nwhich I haven't profiled.\n\nShould there be an option to bypass the new handling?\n\nIf nobody complaints, I'll apply the patch on 24.06.2015 and check the jenkins results for other runtimes."}, {"attachment_id": null, "tags": [], "bug_id": 50090, "is_private": false, "count": 4, "id": 183722, "time": "2015-06-23T23:39:38Z", "creator": "kiwiwings@apache.org", "creation_time": "2015-06-23T23:39:38Z", "text": "Fixed with r1687148"}]
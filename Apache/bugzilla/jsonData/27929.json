[{"count": 0, "tags": [], "bug_id": 27929, "text": "Using POI version 2.5 final.\n\nWhen given an XLS file with a drop-down list, the constructor call to \nHSSFWorkbook throws the following exception:\n\njava.lang.reflect.InvocationTargetException: \njava.lang.ArrayIndexOutOfBoundsException\n        at java.lang.System.arraycopy(Native Method)\n        at org.apache.poi.hssf.record.UnknownRecord.<init>\n(UnknownRecord.java:62)\n        at org.apache.poi.hssf.record.SubRecord.createSubRecord\n(SubRecord.java:57)\n        at org.apache.poi.hssf.record.ObjRecord.fillFields(ObjRecord.java:99)\n        at org.apache.poi.hssf.record.Record.fillFields(Record.java:90)\n        at org.apache.poi.hssf.record.Record.<init>(Record.java:55)\n        at org.apache.poi.hssf.record.ObjRecord.<init>(ObjRecord.java:61)\n        at java.lang.reflect.Constructor.newInstance(Native Method)\n        at org.apache.poi.hssf.record.RecordFactory.createRecord\n(RecordFactory.java:224)\n        at org.apache.poi.hssf.record.RecordFactory.createRecords\n(RecordFactory.java:160)\n        at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>\n(HSSFWorkbook.java:165)\n        at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>\n(HSSFWorkbook.java:132)\n        at nas.components.nruf.poi25test.main(poi25test.java:14)\nException in thread \"main\" org.apache.poi.hssf.record.RecordFormatException: \nUnable to construct record instance, the fo\nllowing exception occured: null\n        at org.apache.poi.hssf.record.RecordFactory.createRecord\n(RecordFactory.java:237)\n        at org.apache.poi.hssf.record.RecordFactory.createRecords\n(RecordFactory.java:160)\n        at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>\n(HSSFWorkbook.java:165)\n        at org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>\n(HSSFWorkbook.java:132)\n        at nas.components.nruf.poi25test.main(poi25test.java:14)\n\nI will attach the simple Java program used and an offending XLS file.", "id": 54625, "time": "2004-03-25T00:55:54Z", "creator": "asehbai@yahoo.com", "creation_time": "2004-03-25T00:55:54Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "asehbai@yahoo.com", "attachment_id": 10968, "id": 54626, "creation_time": "2004-03-25T01:02:54Z", "time": "2004-03-25T01:02:54Z", "bug_id": 27929, "text": "Created attachment 10968\nJava program that reproduces the bug", "is_private": false}, {"count": 2, "tags": [], "creator": "asehbai@yahoo.com", "attachment_id": 10969, "id": 54627, "time": "2004-03-25T01:06:05Z", "bug_id": 27929, "creation_time": "2004-03-25T01:06:05Z", "is_private": false, "text": "Created attachment 10969\nXLS file (with drop down) that causes bug"}, {"count": 3, "tags": [], "bug_id": 27929, "attachment_id": null, "id": 56613, "creation_time": "2004-04-29T09:34:12Z", "time": "2004-04-29T09:34:12Z", "creator": "roland.geier@gmx.de", "text": "I was able to track down this bug even for an 'empty' workbook (that is, nothing\nis visible there). The error occurs if in a call to static method\n\nSubRecord.createSubRecord(\n  short subRecordSid, short size, byte[] data, int offset \n)\n\nthe 'size' parameters exceeds the available space in the 'data' buffer. As a\nconsequence.\n\nI implemented a workaround that works for me by doing some checks in method\nObjRecord::fillFields() before the thread of control proceeds to\nSubRecord.createSubRecords() there. I'm well aware this patch might be\ndangerous. Find the diff of file ObjRecord.java below, the entire new file is\nplaced into a separate attachment (that still contains some useful trace messages).\n\n99c99,107\n<  Record subRecord = SubRecord.createSubRecord(subRecordSid, subRecordSize,\ndata, pos + 4);\n---\n>  Record subRecord = null;\n>  if (size - (pos+4) < subRecordSize)\n>  {\n>    subRecord = SubRecord.createSubRecord(subRecordSid,size-(pos+4)), data, pos+4);\n>  }\n>  else\n>  {\n>    subRecord = SubRecord.createSubRecord(subRecordSid, subRecordSize, data,\npos+4);\n>  }\n103d110\n<\n", "is_private": false}, {"count": 4, "tags": [], "bug_id": 27929, "attachment_id": 11371, "text": "Created attachment 11371\nObjRecord-patch27929.java, workaround for bug 27929", "id": 56614, "time": "2004-04-29T09:38:27Z", "creator": "roland.geier@gmx.de", "creation_time": "2004-04-29T09:38:27Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 27929, "text": "I can reproduce this bug with 2.5 FINAL.", "count": 5, "id": 57283, "time": "2004-05-12T14:54:06Z", "creator": "Rahul.Karnik@bms.com", "creation_time": "2004-05-12T14:54:06Z", "is_private": false}, {"text": "Here is an alternate patch, with JUnit Testcases.\n\nI came up with almost the same solution as Roland except\n\n1) I adjusted the size in the static method SubRecord.createSubRecord(). I\n    also set the sub record size to 0 if it is ever negative.\n2) I adjusted the size of the subrecord to 4 less than the total size of the\n    OBJ record. The last 4 bytes of an OBJ record should always be an ftEnd\n    subrecord, and this appears to be the case with Autofilters and dropdown\n    boxes inserted via the Forms toolbar.\n3) I adjusted Obj.java to advance the offset by SubRecord.getRecordSize()\n    (instead of 4 + subRecordSize). The value of subRecordSize may not be\n    reliable.\n\nThe patch includes new JUnit Testcases for the modified SubRecord.java and \nObjRecord.java. These tests fail with the 2.5 as pulled yesterday, but work \nwith the changes in the patch file.", "tags": [], "bug_id": 27929, "attachment_id": null, "count": 6, "id": 58593, "time": "2004-06-03T05:29:28Z", "creator": "zalewski@optonline.net", "creation_time": "2004-06-03T05:29:28Z", "is_private": false}, {"count": 7, "tags": [], "creator": "zalewski@optonline.net", "attachment_id": 11735, "id": 58594, "time": "2004-06-03T05:33:49Z", "bug_id": 27929, "creation_time": "2004-06-03T05:33:49Z", "is_private": false, "text": "Created attachment 11735\nCVS DIFF and new TestCase classes"}, {"count": 8, "tags": [], "creator": "dmui@apache.org", "text": "Hi Michael, can you provide a unified diff?  I'd rather merge the diff once for\neither Release 2 or HEAD.\n\nThanks.", "id": 59531, "time": "2004-06-18T23:06:17Z", "bug_id": 27929, "creation_time": "2004-06-18T23:06:17Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "zalewski@optonline.net", "text": "Created attachment 11954\ndiff -u against HEAD", "id": 59914, "time": "2004-06-26T02:12:42Z", "bug_id": 27929, "creation_time": "2004-06-26T02:12:42Z", "is_private": false, "attachment_id": 11954}, {"count": 10, "tags": [], "bug_id": 27929, "attachment_id": null, "text": "Michael, I'm just trying to understand your test case.  \n\nThe following test case is failing:\n\n    public void testParseEnd()\n    {\n        Record r = SubRecord.createSubRecord( (short) 0x0015, (short) 0x0012,\ndataAutoFilter, 0x0000 );\n        assertEquals( \"ftCmo is 22 bytes\", 22, r.getRecordSize() );\n        assertEquals( \"ftEnd is a EndSubRecord\"\n                , \"org.apache.poi.hssf.record.EndSubRecord\"\n                , r.getClass().getName() );\n    }\n\n\nThe sid you're passing in is for the CommonObjectDataSubRecord record yet your\ntest is expecting it to be a EndSubRecord.  Why is this the case?\n\n", "id": 59939, "time": "2004-06-27T11:49:02Z", "creator": "glens@apache.org", "creation_time": "2004-06-27T11:49:02Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 27929, "text": "Looks like I goofed. That last testcase should be\n\npublic void testParseEnd() {\n  Record r = SubRecord.createSubRecord(\n      (short)0x0000, (short)0x0000, dataAutoFilter, 0x0046\n  );\n  assertEquals( \"ftEnd is 4 bytes\", 4, r.getRecordSize());\n  assertEquals( \n      \"ftEnd is a EndSubRecord\"\n    , \"org.apache.poi.hssf.record.EndSubRecord\"\n    , r.getClass().getName()\n  );\n}\n\nNothing fancy about this testcase. It merely takes the actual bytes from an OBJ \nrecord that describes a dropdown, which was causing a problem in this report. \nSince I needed to change that method (SubRecord.createSubRecord), and verifies \nthat the subrecords are all parsed and created properly.", "id": 59948, "time": "2004-06-27T15:21:53Z", "creator": "zalewski@optonline.net", "creation_time": "2004-06-27T15:21:53Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 27929, "attachment_id": 11963, "id": 59949, "creation_time": "2004-06-27T15:27:15Z", "time": "2004-06-27T15:27:15Z", "creator": "zalewski@optonline.net", "text": "Created attachment 11963\nRevised TestSubRecord.java JUnit Testcase", "is_private": false}, {"count": 13, "attachment_id": null, "bug_id": 27929, "text": "Tried the new patch but get the following error now:\n\njava.lang.ArrayIndexOutOfBoundsException\n\tat java.lang.System.arraycopy(Native Method)\n\tat org.apache.poi.hssf.record.UnknownRecord.<init>(UnknownRecord.java:62)\n\tat org.apache.poi.hssf.record.SubRecord.createSubRecord(SubRecord.java:57)\n\tat\norg.apache.poi.hssf.record.TestSubRecord.testParseAutoFilterLbsData(TestSubRecord.java:82)\n\n", "id": 59960, "time": "2004-06-27T23:25:50Z", "creator": "glens@apache.org", "creation_time": "2004-06-27T23:25:50Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 27929, "attachment_id": null, "text": "I'm guessing you did not apply the changes to SubRecord.java and ObjRecord.java\n\nhttp://issues.apache.org/bugzilla/showattachment.cgi?attach_id=11954\n\nThe ArrayIndexOutOfBounds is exactly what is happening inside the \nInvocationTargetException, whenever there is a dropdown list on the spreadsheet\n\nThere is also a JUnit testcase TestSubRecord.java\n\nhttp://issues.apache.org/bugzilla/showattachment.cgi?attach_id=11963\n\nBTW, there is also another JUnit testcase TestObjRecord.java, inside the zip \nfile at\n\nhttp://issues.apache.org/bugzilla/showattachment.cgi?attach_id=11735\n\nLet me see if I can put all this together in a single ZIP file\n\nRevised ObjRecord.java\nRevised SubRecord.java\nNew TestObjRecord.java\nNew TestSubRecord.java", "id": 59961, "time": "2004-06-28T03:57:54Z", "creator": "zalewski@optonline.net", "creation_time": "2004-06-28T03:57:54Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 27929, "attachment_id": null, "text": "as a sidenote, Eclipse's [Team - Create Patch] patch creation includes new files\nin one single patch.  A lot easier to submit to bugzilla.", "id": 60067, "time": "2004-06-30T15:32:38Z", "creator": "dmui@apache.org", "creation_time": "2004-06-30T15:32:38Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 27929, "text": "I applied them as far as I can tell.  Here's a diff with the changes applied to\nyou can compare for yourself.\n\nIndex: java/org/apache/poi/hssf/record/ObjRecord.java\n===================================================================\nRCS file: /home/cvs/jakarta-poi/src/java/org/apache/poi/hssf/record/ObjRecord.java,v\nretrieving revision 1.1.2.2\ndiff -u -r1.1.2.2 ObjRecord.java\n--- java/org/apache/poi/hssf/record/ObjRecord.java\t22 Feb 2004 11:54:47 -0000\n1.1.2.2\n+++ java/org/apache/poi/hssf/record/ObjRecord.java\t3 Jul 2004 11:47:12 -0000\n@@ -98,7 +98,7 @@\n             short subRecordSize = LittleEndian.getShort(data, pos + 2);\n             Record subRecord = SubRecord.createSubRecord(subRecordSid,\nsubRecordSize, data, pos + 4);\n             subrecords.add(subRecord);\n-            pos += 4 + subRecordSize;\n+            pos += subRecord.getRecordSize();\n         }\n \n     }\nIndex: java/org/apache/poi/hssf/record/SubRecord.java\n===================================================================\nRCS file: /home/cvs/jakarta-poi/src/java/org/apache/poi/hssf/record/SubRecord.java,v\nretrieving revision 1.1.2.2\ndiff -u -r1.1.2.2 SubRecord.java\n--- java/org/apache/poi/hssf/record/SubRecord.java\t22 Feb 2004 11:54:47 -0000\n1.1.2.2\n+++ java/org/apache/poi/hssf/record/SubRecord.java\t3 Jul 2004 11:47:12 -0000\n@@ -42,19 +42,28 @@\n     {\n         Record r = null;\n \n+        short adjustedSize = size;\n+        if( size < 0) {\n+           adjustedSize = 0;\n+        } else if( offset + size > data.length) {\n+           adjustedSize = (short) (data.length - offset);\n+           if( adjustedSize > 4) {\n+              adjustedSize -= 4;\n+           }\n+        }\n         switch ( subRecordSid )\n         {\n             case CommonObjectDataSubRecord.sid:\n-                r = new CommonObjectDataSubRecord( subRecordSid, size, data,\noffset );\n+                r = new CommonObjectDataSubRecord( subRecordSid, adjustedSize,\ndata, offset );\n                 break;\n             case GroupMarkerSubRecord.sid:\n-                r = new GroupMarkerSubRecord( subRecordSid, size, data, offset );\n+                r = new GroupMarkerSubRecord( subRecordSid, adjustedSize, data,\noffset );\n                 break;\n             case EndSubRecord.sid:\n-                r = new EndSubRecord( subRecordSid, size, data, offset );\n+                r = new EndSubRecord( subRecordSid, adjustedSize, data, offset );\n                 break;\n             default:\n-                r = new UnknownRecord( subRecordSid, size, data, offset );\n+                r = new UnknownRecord( subRecordSid, adjustedSize, data, offset );\n         }\n \n         return r;\nIndex: testcases/org/apache/poi/hssf/record/TestObjRecord.java\n===================================================================\nRCS file: testcases/org/apache/poi/hssf/record/TestObjRecord.java\ndiff -N testcases/org/apache/poi/hssf/record/TestObjRecord.java\n--- /dev/null\t1 Jan 1970 00:00:00 -0000\n+++ testcases/org/apache/poi/hssf/record/TestObjRecord.java\t3 Jul 2004 11:47:18\n-0000\n@@ -0,0 +1,94 @@\n+/* ====================================================================\n+   Copyright 2002-2004   Apache Software Foundation\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+==================================================================== */\n+\n+package org.apache.poi.hssf.record;\n+\n+import junit.framework.*;\n+\n+import java.util.List;\n+\n+/**\n+ * Tests for OBJ record.  Test data taken directly\n+ * from a real Excel file.\n+ *\n+ * @author Michael Zalewski (zalewski at optonline.net)\n+ */\n+public class TestObjRecord extends TestCase\n+{\n+\n+    public TestObjRecord(String name)\n+    {\n+        super(name);\n+    }\n+\n+\n+/*\n+   The following is a dump of the OBJ record corresponding to an auto-filter\n+   drop-down list. The 3rd subrecord beginning at offset 0x002e (type=0x0013)\n+   does not conform to the documentation, because the length field is 0x1fee,\n+   which is longer than the entire OBJ record.\n+\n+   00000000 15 00 12 00 14 00 01 00 01 21 00 00 00 00 3C 13 .........!....<. \nType=0x15 Len=0x0012 ftCmo\n+   00000010 F4 03 00 00 00 00\n+                              0C 00 14 00 00 00 00 00 00 00 ................ \nType=0x0c Len=0x0014 ftSbs\n+   00000020 00 00 00 00 01 00 08 00 00 00 10 00 00 00\n+                                                      13 00 ................ \nType=0x13 Len=0x1FEE ftLbsData\n+   00000030 EE 1F 00 00 08 00 08 00 01 03 00 00 0A 00 14 00 ................\n+   00000040 6C 00\n+                  00 00 00 00                               l.....           \nType=0x00 Len=0x0000 ftEnd\n+*/\n+\n+    byte[] dataAutoFilter = new byte[] {\n+         // ftCmo\n+  \t    \n(byte)0x15,(byte)0x00,(byte)0x12,(byte)0x00,(byte)0x14,(byte)0x00,(byte)0x01,(byte)0x00\n+       \n,(byte)0x01,(byte)0x00,(byte)0x01,(byte)0x21,(byte)0x00,(byte)0x00,(byte)0x3c,(byte)0x13\n+        ,(byte)0xf4,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00\n+\n+         // ftSbs (currently UnknownSubrecord)\n+                                                                            \n,(byte)0x0c,(byte)0x00\n+       \n,(byte)0x14,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00\n+       \n,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x00,(byte)0x08,(byte)0x00\n+        ,(byte)0x00,(byte)0x00,(byte)0x10,(byte)0x00,(byte)0x00,(byte)0x00\n+\n+         // ftLbsData (currently UnknownSubrecord)\n+                                                                            \n,(byte)0x13,(byte)0x00\n+       \n,(byte)0xee,(byte)0x1f,(byte)0x00,(byte)0x00,(byte)0x08,(byte)0x00,(byte)0x08,(byte)0x00\n+       \n,(byte)0x01,(byte)0x03,(byte)0x00,(byte)0x00,(byte)0x0a,(byte)0x00,(byte)0x14,(byte)0x00\n+        ,(byte)0x6c,(byte)0x00\n+\n+         // ftEnd\n+                               ,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00\n+    };\n+\n+    public void testAutoFilter() {\n+       ObjRecord or = new ObjRecord( ObjRecord.sid, (short)\ndataAutoFilter.length, dataAutoFilter);\n+       assertEquals( \"Obj record size\", 74, or.getRecordSize());\n+       List lstSubRecords = or.getSubRecords();\n+       assertEquals( \"Subrecord count\", 4, lstSubRecords.size());\n+       Object oSubRecord = lstSubRecords.get( 0);\n+       assertEquals(\n+             \"First subrecord class\"\n+           , \"org.apache.poi.hssf.record.CommonObjectDataSubRecord\"\n+           , oSubRecord.getClass().getName()\n+       );\n+       oSubRecord = lstSubRecords.get( 3);\n+       assertEquals(\n+             \"Last subrecord class\"\n+           , \"org.apache.poi.hssf.record.EndSubRecord\"\n+           , oSubRecord.getClass().getName()\n+       );\n+    }\n+}\n\\ No newline at end of file\nIndex: testcases/org/apache/poi/hssf/record/TestSubRecord.java\n===================================================================\nRCS file: testcases/org/apache/poi/hssf/record/TestSubRecord.java\ndiff -N testcases/org/apache/poi/hssf/record/TestSubRecord.java\n--- /dev/null\t1 Jan 1970 00:00:00 -0000\n+++ testcases/org/apache/poi/hssf/record/TestSubRecord.java\t3 Jul 2004 11:47:19\n-0000\n@@ -0,0 +1,95 @@\n+/* ====================================================================\n+   Copyright 2002-2004   Apache Software Foundation\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+==================================================================== */\n+\n+package org.apache.poi.hssf.record;\n+\n+import junit.framework.*;\n+\n+/**\n+ * Tests Subrecord components of an OBJ record.  Test data taken directly\n+ * from a real Excel file.\n+ *\n+ * @author Michael Zalewski (zalewski at optonline.net)\n+ */\n+public class TestSubRecord extends TestCase\n+{\n+    /*\n+       The following is a dump of the OBJ record corresponding to an auto-filter\n+       drop-down list. The 3rd subrecord beginning at offset 0x002e (type=0x0013)\n+       does not conform to the documentation, because the length field is 0x1fee,\n+       which is longer than the entire OBJ record.\n+\n+       00000000 15 00 12 00 14 00 01 00 01 21 00 00 00 00 3C 13\n.........!....<.  Type=0x15 Len=0x0012 ftCmo\n+       00000010 F4 03 00 00 00 00\n+                                  0C 00 14 00 00 00 00 00 00 00\n................  Type=0x0c Len=0x0014 ftSbs\n+       00000020 00 00 00 00 01 00 08 00 00 00 10 00 00 00\n+                                                          13 00\n................  Type=0x13 Len=0x1FEE ftLbsData\n+       00000030 EE 1F 00 00 08 00 08 00 01 03 00 00 0A 00 14 00 ................\n+       00000040 6C 00\n+                      00 00 00 00                               l.....        \n   Type=0x00 Len=0x0000 ftEnd\n+    */\n+\n+    byte[] dataAutoFilter = new byte[]{\n+        // ftCmo\n+        (byte) 0x15, (byte) 0x00, (byte) 0x12, (byte) 0x00, (byte) 0x14, (byte)\n0x00, (byte) 0x01, (byte) 0x00\n+        , (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x21, (byte) 0x00,\n(byte) 0x00, (byte) 0x3c, (byte) 0x13\n+        , (byte) 0xf4, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n(byte) 0x00\n+\n+        // ftSbs (currently UnknownSubrecord)\n+        , (byte) 0x0c, (byte) 0x00\n+        , (byte) 0x14, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n(byte) 0x00, (byte) 0x00, (byte) 0x00\n+        , (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,\n(byte) 0x00, (byte) 0x08, (byte) 0x00\n+        , (byte) 0x00, (byte) 0x00, (byte) 0x10, (byte) 0x00, (byte) 0x00,\n(byte) 0x00\n+\n+        // ftLbsData (currently UnknownSubrecord)\n+        , (byte) 0x13, (byte) 0x00\n+        , (byte) 0xee, (byte) 0x1f, (byte) 0x00, (byte) 0x00, (byte) 0x08,\n(byte) 0x00, (byte) 0x08, (byte) 0x00\n+        , (byte) 0x01, (byte) 0x03, (byte) 0x00, (byte) 0x00, (byte) 0x0a,\n(byte) 0x00, (byte) 0x14, (byte) 0x00\n+        , (byte) 0x6c, (byte) 0x00\n+\n+        // ftEnd\n+        , (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00\n+    };\n+\n+    public TestSubRecord( String name )\n+    {\n+        super( name );\n+    }\n+\n+    public void testParseCmo()\n+    {\n+        Record r = SubRecord.createSubRecord( (short) 0x0015, (short) 0x0012,\ndataAutoFilter, 0x0000 );\n+        assertEquals( \"ftCmo is 22 bytes\", 22, r.getRecordSize() );\n+        assertEquals( \"ftCmo is a CommonObjectDataSubRecord\"\n+                , \"org.apache.poi.hssf.record.CommonObjectDataSubRecord\"\n+                , r.getClass().getName() );\n+    }\n+\n+    public void testParseAutoFilterLbsData()\n+    {\n+        Record r = SubRecord.createSubRecord( (short) 0x0013, (short) 0x1fee,\ndataAutoFilter, 0x0032 );\n+        assertEquals( \"ftLbsData is 20 bytes\", 20, r.getRecordSize() );\n+    }\n+\n+    public void testParseEnd()\n+    {\n+        Record r = SubRecord.createSubRecord( (short) 0x0000, (short) 0x0000,\ndataAutoFilter, 0x0046 );\n+        assertEquals( \"ftEnd is 4 bytes\", 4, r.getRecordSize() );\n+        assertEquals( \"ftEnd is a EndSubRecord\"\n+                , \"org.apache.poi.hssf.record.EndSubRecord\"\n+                , r.getClass().getName() );\n+    }\n+}\n\\ No newline at end of file\n", "id": 60110, "time": "2004-07-03T11:50:40Z", "creator": "glens@apache.org", "creation_time": "2004-07-03T11:50:40Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "creator": "marcus.sundman@iki.fi", "text": "Stuff like this is extremely ugly on more than one level (copy'n'paste from org.\napache.poi.hssf.record.RecordFactory.createRecord):\n--------8<---------------------------------------------------\n   catch (Exception introspectionException)\n   {\n      introspectionException.printStackTrace();\n      throw new RecordFormatException(\"...\");\n   }\n-------->8---------------------------------------------------\n\nInstead you should do it like this:\n--------8<---------------------------------------------------\n   catch (Exception introspectionException)\n   {\n      RecordFormatException rfe = new RecordFormatException(\"...\");\n      rfe.initCause(introspectionException);\n      throw rfe;\n   }\n-------->8---------------------------------------------------\n\nOr even better, make a new constructor in RecordFormatException:\n--------8<---------------------------------------------------\n   public RecordFormatException(String message, Throwable cause)\n   {\n      super(exception, cause);\n   }\n\n[and then]\n\n   catch (Exception introspectionException)\n   {\n      throw new RecordFormatException(\"...\", introspectionException);\n   }\n-------->8---------------------------------------------------\n\n", "id": 60317, "time": "2004-07-08T19:27:30Z", "bug_id": 27929, "creation_time": "2004-07-08T19:27:30Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 27929, "attachment_id": null, "id": 61763, "creation_time": "2004-08-10T17:41:10Z", "time": "2004-08-10T17:41:10Z", "creator": "ryu@dragon-air.com", "text": "I was going to report that using the Data > Filter > Autofilter feature causes the worksheet to fail to \nload, but it appears to be just one facet of this bug, and a major headache. Is there any way to get \naround this?", "is_private": false}, {"count": 19, "tags": [], "creator": "ryu@dragon-air.com", "attachment_id": null, "id": 61827, "time": "2004-08-11T14:26:31Z", "bug_id": 27929, "creation_time": "2004-08-11T14:26:31Z", "is_private": false, "text": "OK, maybe that was a stupid question. What I meant was \"Is there any way to work around this without \nhaving to actually edit the source, learn how to use Ant, etc.\" Meantime I managed to edit the source, \nlearn how to use Ant, and get it fixed. Works great, MacOS X, Java 1.4.2, Hooray. Still, I think there are \nenough people out there who aren't going to get much farther than the limitations page. Maybe this \nbug (and a workaround, if there is one) should be addressed there?\n\nPOI rocks. Jakarta rocks. Java rocks."}, {"count": 20, "tags": [], "creator": "peter.lobacz@daimlerchrysler.com", "text": "Using POI 2.5.1 final\n\nThe error occurs when reading an xls file with a pivot table. I suppose it \nhappens because of the drop down in the pivot table.\n\nThe ObjRecord-patch27929.java works well for me!!!", "id": 62959, "time": "2004-09-02T14:21:44Z", "bug_id": 27929, "creation_time": "2004-09-02T14:21:44Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 27929, "attachment_id": null, "id": 63794, "creation_time": "2004-09-19T02:29:23Z", "time": "2004-09-19T02:29:23Z", "creator": "glens@apache.org", "text": "Okay... finally applied this one to HEAD.  Sorry to be such a slow bastard.", "is_private": false}, {"count": 22, "tags": [], "bug_id": 27929, "attachment_id": null, "text": "The patch file produces errors if an attempt is made to write to the same excel \nfile as the solution in the patch adds null sub records. A work around is \npossible by putting null checks toString and serialize methods. The methods are \ngiven bellow.\n\n    public String toString()\n    {\n        StringBuffer buffer = new StringBuffer();\n\n        buffer.append(\"[OBJ]\\n\");\n        for ( Iterator iterator = subrecords.iterator(); iterator.hasNext(); )\n        {\n            Record record = (Record) iterator.next();\n\t\tif(record != null) {\n\t            buffer.append(\"SUBRECORD: \" + record.toString());\n\t\t}\n        }\n        buffer.append(\"[/OBJ]\\n\");\n        return buffer.toString();\n    }\n\n\n    public int serialize(int offset, byte[] data)\n    {\n        int pos = 0;\n\n        LittleEndian.putShort(data, 0 + offset, sid);\n        LittleEndian.putShort(data, 2 + offset, (short)(getRecordSize() - 4));\n\n        pos = offset + 4;\n        for ( Iterator iterator = subrecords.iterator(); iterator.hasNext(); )\n        {\n            Record record = (Record) iterator.next();\n\t\tif(record != null) {\n\t            pos += record.serialize(pos, data);\n\t\t}\n        }\n\n        return getRecordSize();\n    }", "id": 70613, "time": "2005-02-08T11:18:59Z", "creator": "vimalathithen@yahoo.com", "creation_time": "2005-02-08T11:18:59Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "the.webmaestro@gmail.com", "attachment_id": null, "id": 30675, "time": "2003-02-04T18:50:37Z", "bug_id": 16772, "creation_time": "2003-02-04T18:50:37Z", "is_private": false, "text": "[This bug affects fop-0.20.4 & 0.20.5rc]\n\nJava 1.3.1_04 requires more space for region-before & region-after than Java\n1.4.1_01. If I use the 1.4.1 extents/margin(s) with 1.3.1, I get a \"Some static\ntext did not fit\" error, which prints on the next page (if there is one--FOPpers\nknow the drill :-). If I use the 1.3.1 extents/margin(s) with 1.4.1, I end up\nwith incorrect region-before/after, leaving 1-2cm of white-space around region-body.\n\nMy problem is that I have clients who use wide-ranging JREs using my templates.\n\nExcerpts from Java 1.3.1 & 1.4.1 versions of my .fo files for testing:\n\n** Java 1.3.1 **\n<fo:layout-master-set>\n  <fo:simple-page-master master-name=\"repeating\" page-height=\"28cm\"\npage-width=\"22cm\" margin-top=\"1cm\" margin-bottom=\"1.3cm\" margin-left=\"1cm\"\nmargin-right=\"1cm\">\n    <fo:region-body margin-bottom=\"7.1cm\" margin-top=\"8.3cm\"/>\n    <fo:region-before extent=\"8.3cm\"/>\n    <fo:region-after extent=\"7.1cm\"/>\n  </fo:simple-page-master>\n  <fo:page-sequence-master master-name=\"repeating_pm\">\n    <fo:repeatable-page-master-reference master-name=\"repeating\"/>\n  </fo:page-sequence-master>\n</fo:layout-master-set>\n\n** Java 1.4.1 **\n<fo:layout-master-set>\n  <fo:simple-page-master master-name=\"repeating\" page-height=\"28cm\"\npage-width=\"22cm\" margin-top=\"1cm\" margin-bottom=\"1.3cm\" margin-left=\"1cm\"\nmargin-right=\"1cm\">\n    <fo:region-body margin-bottom=\"6.6cm\" margin-top=\"7.4cm\"/>\n    <fo:region-before extent=\"7.4cm\"/>\n    <fo:region-after extent=\"6.6cm\"/>\n  </fo:simple-page-master>\n  <fo:page-sequence-master master-name=\"repeating_pm\">\n    <fo:repeatable-page-master-reference master-name=\"repeating\"/>\n  </fo:page-sequence-master>\n</fo:layout-master-set>"}, {"count": 1, "tags": [], "text": "Changed following items (previous values in parentheses):\n- Component: general (awt renderer)\n- Platform: All (PC)\n- OS: All (Windows XP)\n- Priority: Medium (Other)", "attachment_id": null, "id": 30824, "creator": "the.webmaestro@gmail.com", "time": "2003-02-06T16:46:03Z", "bug_id": 16772, "creation_time": "2003-02-06T16:46:03Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 16772, "attachment_id": null, "text": "May it be concerned with the following bug, fixed in Java 1.3.1_07?\n\n4263927  FontMetrics.stringWidth() in PrintGraphics was incorrect.\n\nSee:\nhttp://java.sun.com/j2se/1.3/ReleaseNotes.html\nhttp://developer.java.sun.com/developer/bugParade/bugs/4263927.html", "id": 31049, "time": "2003-02-11T08:43:27Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2003-02-11T08:43:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 16772, "attachment_id": null, "id": 31245, "time": "2003-02-13T16:31:12Z", "creator": "jeremias@apache.org", "creation_time": "2003-02-13T16:31:12Z", "is_private": false, "text": "Konstatin is on the right track. The problem is that the AWT Renderer gets \nfont metrics from AWT and depeding on the JRE version FOP might get different \nvalues for the same input. We've got other problems with the AWT renderer \nwhich are also caused be JRE-differences. I suggest you either try to get the \nJRE standardized or use another renderer if possible. We can't do very much \nI'm afraid."}, {"count": 4, "tags": [], "creator": "gadams@apache.org", "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156574, "time": "2012-04-01T13:50:01Z", "bug_id": 16772, "creation_time": "2012-04-01T13:50:01Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rbri@rbri.de", "attachment_id": 34481, "text": "Created attachment 34481\nthe input file\n\nI have some code that tries to reproduce the visible values of a spreadsheet. So i made a small test sheet with cells using different formats.\nWorks fine so far.\n\nBut starting with version 3.14 i got strange results for one cell.\n\nThe cell is formatted as 'Buchhaltung' (see screenshot).\nThe (visible) value of the cell is '4,33 \u20ac' in excel and '0,004,,33.00 \u20ac' when using poi.\n\nMy code is this / the locale used is Locale.GERMAN:\n\n  /**\n   * Reads the content of an excel cell and converts it into the string\n   * visible in the excel sheet.\n   *\n   * @param aRow the row\n   * @param aColumnsNo the column\n   * @param aFormulaEvaluator the formula Evaluator\n   * @param aLocale used for parsing and formating\n   * @return the display string\n   */\n  public static String readCellContentAsString(final Row aRow, final int aColumnsNo,\n      final FormulaEvaluator aFormulaEvaluator, final Locale aLocale) {\n    final Cell tmpCell = aRow.getCell(aColumnsNo);\n    if (null == tmpCell) {\n      return null;\n    }\n\n    final DataFormatter tmpDataFormatter = new DataFormatter(aLocale);\n    try {\n      final String tmpResult = tmpDataFormatter.formatCellValue(tmpCell, aFormulaEvaluator);\n      return tmpResult;\n    } catch (final NotImplementedException e) {\n      final StringBuilder tmpMsg = new StringBuilder(e.getMessage());\n      if (null != e.getCause()) {\n        tmpMsg.append(\" (\");\n        tmpMsg.append(e.getCause().toString());\n        tmpMsg.append(')');\n      }\n      LOG.error(tmpMsg.toString());\n      final String tmpResult = tmpDataFormatter.formatCellValue(tmpCell, null);\n      return tmpResult;\n    }\n  }", "id": 195235, "time": "2016-11-27T09:57:26Z", "bug_id": 60422, "creation_time": "2016-11-27T09:57:26Z", "is_private": false}, {"count": 1, "tags": [], "creator": "rbri@rbri.de", "attachment_id": 34482, "text": "Created attachment 34482\nScreenshot of the format dialog", "id": 195236, "time": "2016-11-27T09:58:19Z", "bug_id": 60422, "creation_time": "2016-11-27T09:58:19Z", "is_private": false}, {"count": 2, "tags": [], "creator": "wi_wtf@yopmail.com", "attachment_id": null, "text": "C'mon guys, this library is useless if it only works for US/English. 8 months passed and not a SINGLE response? Is this project dead and we should look for alternatives?", "id": 199331, "time": "2017-06-22T12:06:43Z", "bug_id": 60422, "creation_time": "2017-06-22T12:06:43Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60422, "is_private": false, "text": "(In reply to WI from comment #2)\n> C'mon guys, this library is useless if it only works for US/English. 8\n> months passed and not a SINGLE response? Is this project dead and we should\n> look for alternatives?\n\nI'm sorry, I don't know German, so it is difficult for me to help you. \n\nThis project is certainly not dead. The devs here all have jobs other than POI, and work on this in their free time, or provide patches that pertain directly to their jobs. So our priorities may not be the same as yours. However, we are happy to review patches submitted from the community. \n\nIf you decide to contribute to the project, be sure to read the contribution guidelines here https://poi.apache.org/guidelines.html, and include unit tests, examples, and updates to the 'How To' document with your patch.", "id": 199333, "time": "2017-06-22T12:45:03Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2017-06-22T12:45:03Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 60422, "attachment_id": null, "id": 199335, "time": "2017-06-22T17:04:09Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-06-22T17:04:09Z", "is_private": false, "text": "I added a test case and potential fix in https://github.com/apache/poi/pull/60"}, {"count": 5, "tags": [], "bug_id": 60422, "text": "> I'm sorry, I don't know German, so it is difficult for me to help you.\nMaybe yes but that was the reason why i spend some time to make a reproducible case for you. I have attached the spreadsheet, have added the complete source code for reproducing the problem and switching the default locale of the JVM is no rocket science.\nI think for open source software we have to take special care of different user locales - that is part of the story.\nAnd maybe this is a hint for your ci test suite also; maybe it is a good idea to do the regression test with different locales.\nAnd yes i know that your (we - because i spend also a lot of time doing open source software development) are short of time. But maybe a little hint or response will be great or even better that you have tried to reproduce my case. \n\nThanks for working on the this great project - it is a real help.", "id": 199336, "time": "2017-06-22T17:35:00Z", "creator": "rbri@rbri.de", "creation_time": "2017-06-22T17:35:00Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "text": "Although I understand German ... I don't understand the potential fix :)\n\nHow about not using Locale.US directly, but setting it via LocaleUtil.setUserLocale() before calling the formatter.\n\n ... so it looks like, the format strings are always parsed in a Locale.US-manner?\n\nBtw. it's ok to remind us, if a bug entry is important to you ... but we are simply too few people to catch up with the 488 bugs.", "id": 199341, "time": "2017-06-22T21:19:53Z", "bug_id": 60422, "creation_time": "2017-06-22T21:19:53Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "Andreas - it seems like the existing code works if the user sets the POI UserLocale to US.\n\nimport org.apache.poi.util.LocaleUtil;\nLocaleUtil.setUserLocale(Locale.US);\n\nGoing forward, I think we should not require the user to make this LocaleUtil call.\n\nWould it make sense to have LocaleUtil user locale default to Locale.US?", "id": 199344, "time": "2017-06-22T22:08:13Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-06-22T22:08:13Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "First of all, I know that DataFormatter is not trivial and we also had some discussions about it [1]\n\nWhen using an unspecific default locale, we usually use Locale.ROOT - but I'm not sure, if using .ROOT or .US as the default for LocaleUtil.getUserLocale() (instead of Locale.getDefault()) would be less pain, especially since there a quite a few LocaleUtil invocations.\n\nSo how to proceed from here? ...\n- check if Locale.US is working for other localized excel formats\n- or what's wrong with the \"Buchhaltung\" format \"_-* #.##0,00 \"\u20ac\"_-;-* #.##0,00 \"\u20ac\"_-;_-* \"-\"?? \"\u20ac\"_-;_-@_-\" ... it looks like custom formats need to be processed with the Locale of the file - where is it defined? (HPSF has sometimes a Locale entry)\n\n\n\n[1] http://apache-poi.1045710.n5.nabble.com/DataFormatter-vs-org-apache-poi-ss-format-classes-td5721100.html", "id": 199349, "time": "2017-06-22T23:19:50Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-06-22T23:19:50Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "The changes in https://github.com/apache/poi/pull/60 look fine to me. Should we continue the discussion til after the 3.17 beta 1 release?", "id": 199350, "time": "2017-06-23T02:13:30Z", "creator": "onealj@apache.org", "creation_time": "2017-06-23T02:13:30Z", "is_private": false}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "is_private": false, "id": 199351, "time": "2017-06-23T02:22:26Z", "bug_id": 60422, "creation_time": "2017-06-23T02:22:26Z", "text": "Calling LocaleUtil.setUserLocale inside the CellNumberFormatter.formatValue means that the function has a side effect, which may be surprising to a user.\nIf we restore the UserLocale at the exit of formatValue, then there are still side effects from parallel execution.\n\nRather than picking between ROOT and US as the default Locale, we could alias the \"Microsoft Excel default locale\", using that locale throughout our code, which would mean the only place we'd have to change it is where that alias is assigned. We could also let the user change that alias if that's needed for any reason.\nsetUserLocale and setDefaultLocale..."}, {"count": 11, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "Calling LocaleUtil.setUserLocale inside the CellNumberFormatter.formatValue means that the function has a side effect, which may be surprising to a user.\nIf we restore the UserLocale at the exit of formatValue, then there are still side effects from parallel execution.\n\nAre there parts of the Microsoft Office file format spec that use the user's OS language and locale, some that use language and locale that are set in Microsoft Office by the user or by the installation medium, and some that are hard-coded to a particular value?\n\nIf these are distinct concepts, perhaps we should have different getters and setters in LocaleUtil, and we can use the appropriate kind of locale (user, os, hard-coded) throughout POI according to how Microsoft Office interprets the files.\n\nRather than picking between ROOT and US as the default Locale, we could alias the \"Microsoft Excel default locale\", using that locale throughout our code, which would mean the only place we'd have to change it is where that alias is assigned. We could also let the user change that alias if that's needed for any reason.\nsetUserLocale and setDefaultLocale...", "id": 199352, "time": "2017-06-23T02:36:46Z", "creator": "onealj@apache.org", "creation_time": "2017-06-23T02:36:46Z", "is_private": false}, {"count": 12, "tags": [], "creator": "rbri@rbri.de", "attachment_id": null, "text": ">- check if Locale.US is working for other localized excel formats\nI think that is the base line of this problem. We have to understand if the format description is locale dependent or not. If you need someone to provide more german excel files you can count on me.\n\nAnd regarding the locale. My program processes the excel file on a machine different from the one in was created on (i guess this is the usual use case for POI). This implies from my point of view, that i have to know the locale setting of the creating machine if i like to reproduce the same presentations of the cell values. That is the reason, for the locale i hand over to the method and in the end to the DataFormatter constructor. From the user point of view this is all i can do and all i like to do.", "id": 199354, "time": "2017-06-23T05:41:19Z", "bug_id": 60422, "creation_time": "2017-06-23T05:41:19Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "I like Javen's idea of adding something like a LocaleUtil set/getDefaultLocale.\n\nI'm wondering if it would be useful to add extra tests like this sample I just produced:\n\n    @Test\n    public void testDateFormattingWithLocales() {\n        // 2017-12-01 09:54:33 which is 42747.412892397523 as double\n        DataFormatter dfDE = new DataFormatter(Locale.GERMANY);\n        DataFormatter dfZH = new DataFormatter(Locale.PRC);\n        DataFormatter dfIE = new DataFormatter(new Locale(\"GA\", \"IE\"));\n        double date = 42747.412892397523;\n        String format = \"dd MMMM yyyy HH:mm:ss\";\n        assertEquals(\"12 Januar 2017 09:54:33\", dfDE.formatRawCellContents(date, -1, format));\n        assertEquals(\"12 \\u4E00\\u6708 2017 09:54:33\", dfZH.formatRawCellContents(date, -1, format));\n        assertEquals(\"12 Ean\\u00E1ir 2017 09:54:33\", dfIE.formatRawCellContents(date, -1, format));\n    }", "id": 199374, "time": "2017-06-24T00:29:55Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-06-24T00:29:55Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 60422, "is_private": false, "text": "I've been doing a bit more experimentation.\nIt seems that simpler formats are handled correctly, locale wise.\nI think some of the main issues are:\n* DataFormatter should set the LocaleUtils user locale to match the DataFormatter locale if set (and if LocaleUtils does not have an explicit locale set already)\n* org.apache.poi.ss.format.CellNumberFormatter has a lot of hardcoding about commas for grouping separators and dots for decimal separators - should use DecimalFormatSymbols class\n* org.apache.poi.ss.format.CellNumberFormatter also applies the separator from the format string but my understanding is that \"#,##0.00\" means to apply locale specific separators, that the '.' is assumed to mean apply locale specific decimal separator as oppposed to specifically apply '.' as the decimal separator.\n* need to check if org.apache.poi.ss.format.CellNumberFormatter assumes 3 digits in each group - in India, they have lakhs and write 1 million (10 lakh) as 10,00,000", "id": 199463, "time": "2017-06-28T12:03:36Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-06-28T12:03:36Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "Actally, it seems that I'm wrong about the '.' in the format string - it does seem that this should be a '.' in the result and that if you want ',' in the output then your format must be something like '#.##0,00'.\nI've changed my Mac's locale to Germany and the Accounting/Buchhaltung format does appear to be '#.##0,00'. I'll need to double check the parsing code that I used to extract the formatString from attached xls file because that seems to give me a US locale formatString instead of the Germany equivalent.", "id": 199464, "time": "2017-06-28T12:25:26Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-06-28T12:25:26Z", "is_private": false}, {"count": 16, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "is_private": false, "id": 199470, "time": "2017-06-28T18:24:21Z", "bug_id": 60422, "creation_time": "2017-06-28T18:24:21Z", "text": "Looking at wet_test.xls, the 4.33 cell has this format.\n\n CELL_RECORD_TYPE\n    .formatindex     = aa\n\nThis cell format is added as a custom format in FormatTrackingHSSFListener.\nThe Format String is:\n_-* #,##0.00\\ \"\u20ac\"_-;\\-* #,##0.00\\ \"\u20ac\"_-;_-* \"-\"??\\ \"\u20ac\"_-;_-@_-\n\nThis is not what Excel run in Germany locale on My Mac shows - it shows this for Accounting/Buchhaltung:\n_-* #.##0,00 \u20ac_-;-* #.##0,00 \u20ac_-;_-* \"-\"?? \u20ac_-;_-@_-\n\nNote that the decimal and grouping separators do match up.\n\nI don't know much about xls data format so I saved the file as an xlsx and checked the xl/styles.xml and the format string seems to match up to the #,##0.00 format as opposed to #.##0,00.\n\nDoes anyone have any insight on this?"}, {"count": 17, "tags": [], "creator": "rbri@rbri.de", "attachment_id": null, "is_private": false, "id": 199510, "time": "2017-06-30T16:57:42Z", "bug_id": 60422, "creation_time": "2017-06-30T16:57:42Z", "text": "In general Excel respects the locale settings (at least on Win it is possible to configure this independently from the locale to whatever you like). But i have not seen any problems when exchanging documents between different settings. So my good-feeling is:\nThe format string stored inside the file uses chars with a fixed semantic (means there are some special chars like -,#,0, the dot, the comma and so on).\n\nI would expect that the format string parser has a list of constants (chars) acting as tokens for the parser.\n\n> This cell format is added as a custom format in FormatTrackingHSSFListener.\n> The Format String is:\n> _-* #,##0.00\\ \"\u20ac\"_-;\\-* #,##0.00\\ \"\u20ac\"_-;_-* \"-\"??\\ \"\u20ac\"_-;_-@_-\n\nThe next step is the display. MS seems to have made the decision to always use a localized display. If this is clever or not (at least when showing the format string might be a different story).\n\n> This is not what Excel run in Germany locale on My Mac shows - it shows this for > Accounting/Buchhaltung:\n> _-* #.##0,00 \u20ac_-;-* #.##0,00 \u20ac_-;_-* \"-\"?? \u20ac_-;_-@_-\n\nSo i can confirm the effect here. If you like to proof this you can change the decimal delimiter to e.g. 'y' and the display of the number in excel itself and the display of the format string changes in my case it looks like this\n_-* #.##0y00 \u20ac_-;-* #.##0y00 \u20ac_-;_-* \"-\"?? \u20ac_-;_-@_-\n\nFrom the POI API point of view i like to see this behavior:\n   final DataFormatter tmpDataFormatter = new DataFormatter(aLocale);\nThe locale provided here represents the windows system settings, if i change eg.g the decimal separator here the following call of \n    final String tmpResult = tmpDataFormatter.formatCellValue(tmpCell, aFormulaEvaluator);\nshould respect my separator."}, {"count": 18, "tags": [], "bug_id": 60422, "is_private": false, "text": "I've published a new attempt at fixing this at https://github.com/apache/poi/pull/62", "id": 199521, "time": "2017-07-01T10:33:58Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-07-01T10:33:58Z", "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 60422, "text": "Made a first patch for adding tests for german locale to the test. Please give me a sign, if you like more of this.\n\nLooks like the expectations for testPaddingSpaces() for us are also not correct.", "id": 199522, "time": "2017-07-01T12:28:42Z", "creator": "rbri@rbri.de", "creation_time": "2017-07-01T12:28:42Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 60422, "text": "Created attachment 35092\npatch adding tests for german locale to TestDataFormatter\n\npatch adding tests for german locale to TestDataFormatter", "id": 199523, "time": "2017-07-01T12:30:36Z", "creator": "rbri@rbri.de", "creation_time": "2017-07-01T12:30:36Z", "is_private": false, "attachment_id": 35092}, {"count": 21, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "is_private": false, "id": 199524, "time": "2017-07-01T19:02:48Z", "bug_id": 60422, "creation_time": "2017-07-01T19:02:48Z", "text": "RBRi - would you be able to try the proposed fix that I have posted to https://github.com/apache/poi/pull/62 ?"}, {"count": 22, "tags": [], "bug_id": 60422, "attachment_id": null, "text": "(In reply to PJ Fanning from comment #21)\n> RBRi - would you be able to try the proposed fix that I have posted to\n> https://github.com/apache/poi/pull/62 ?\n\nLooks good, the new test passing.", "id": 199525, "time": "2017-07-02T07:57:02Z", "creator": "rbri@rbri.de", "creation_time": "2017-07-02T07:57:02Z", "is_private": false}, {"count": 23, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "text": "https://svn.apache.org/viewvc?view=revision&revision=1800713\n\nI will follow up with new issues to cover extra cases, eg Indian locale number formatting, trying to get some of the commented out test cases to work in TestDataFormatter and taking a look at reducing the amount the formatting code.", "id": 199538, "time": "2017-07-03T21:53:56Z", "bug_id": 60422, "creation_time": "2017-07-03T21:53:56Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 60422, "text": "FWIW:I think this bug/issue was introduced with the below commit \n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=58326 (Commit 1701688 in the SVN)\n\nIndex: CellNumberFormatter.java\n===================================================================\n--- CellNumberFormatter.java\t(revision 1701687)\n+++ CellNumberFormatter.java\t(revision 1701688)\n@@ -17,6 +17,7 @@\n package org.apache.poi.ss.format;\n \n import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n import java.text.FieldPosition;\n import java.util.BitSet;\n import java.util.Collections;\n@@ -30,6 +31,7 @@\n import java.util.regex.Matcher;\n \n import org.apache.poi.ss.format.CellFormatPart.PartHandler;\n+import org.apache.poi.util.LocaleUtil;\n \n /**\n  * This class implements printing out a value using a number format.\n@@ -182,8 +184,8 @@\n         private char insertSignForExponent;\n \n         public String handlePart(Matcher m, String part, CellFormatType type,\n-                StringBuffer desc) {\n-            int pos = desc.length();\n+                StringBuffer descBuf) {\n+            int pos = descBuf.length();\n             char firstCh = part.charAt(0);\n             switch (firstCh) {\n             case 'e':\n@@ -203,7 +205,7 @@\n             case '#':\n                 if (insertSignForExponent != '\\0') {\n                     specials.add(new Special(insertSignForExponent, pos));\n-                    desc.append(insertSignForExponent);\n+                    descBuf.append(insertSignForExponent);\n                     insertSignForExponent = '\\0';\n                     pos++;\n                 }\n@@ -354,7 +356,8 @@\n             fmtBuf.append('E');\n             placeZeros(fmtBuf, exponentSpecials.subList(2,\n                     exponentSpecials.size()));\n-            decimalFmt = new DecimalFormat(fmtBuf.toString());\n+            DecimalFormatSymbols dfs = DecimalFormatSymbols.getInstance(LocaleUtil.getUserLocale());\n+            decimalFmt = new DecimalFormat(fmtBuf.toString(), dfs);\n         }\n \n         if (exponent != null)\n@@ -594,7 +597,7 @@\n             writeFraction(value, null, fractional, output, mods);\n         } else {\n             StringBuffer result = new StringBuffer();\n-            Formatter f = new Formatter(result);\n+            Formatter f = new Formatter(result, LOCALE);\n             try {\n                 f.format(LOCALE, printfFmt, value);\n             } finally {\n@@ -767,6 +770,7 @@\n         writeInteger(exponentNum, output, exponentDigitSpecials, mods, false);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private void writeFraction(double value, StringBuffer result,\n             double fractional, StringBuffer output, Set<StringMod> mods) {\n \n@@ -869,7 +873,7 @@\n             List<Special> numSpecials, Set<StringMod> mods) {\n \n         StringBuffer sb = new StringBuffer();\n-        Formatter formatter = new Formatter(sb);\n+        Formatter formatter = new Formatter(sb, LOCALE);\n         try {\n             formatter.format(LOCALE, fmt, num);\n         } finally {\n\n\nWhich change the way the locale is obtained. This I think brought the \"123.456,00\" into the format, which then has brings new issues in CellNumberFormatter.java inside the \"writeInteger\" method, because the \".\" and \",\" are hardcoded there. \n\nAs far as I get it, this method removes leading and trailing zeros from format (i.e. 0000123,567.00\" and adds/removes as well as replace the \",\" and \".\" with locale specific symbols", "id": 199713, "time": "2017-07-11T11:12:36Z", "creator": "wi_wtf@yopmail.com", "creation_time": "2017-07-11T11:12:36Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 60422, "is_private": false, "text": "And in writeFractional as well.", "id": 199714, "time": "2017-07-11T11:15:19Z", "creator": "wi_wtf@yopmail.com", "creation_time": "2017-07-11T11:15:19Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "greno@yahoo.com", "text": "Would like to be able to use construction like:\n\n  <target name=\"foo\">\n   <ant dir=\"subdir\" target=\"${ant.target.name}\"/>\n  </target>\n\nThis would pass the current target name down to the next called build.xml\nin subdir.  I can reference ant.project.name but not ant.target.name.\nI would like this capability added or some other mechanism that allows for\nthe referencing of the current target.", "id": 13564, "time": "2002-04-15T03:56:49Z", "bug_id": 8084, "creation_time": "2002-04-15T03:56:49Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 8084, "text": "Additional comments from reporter:\n\nTo maybe further clarify:\n  Would like to be able to have targets match lists of patterns:\n    <install*, deploy*> or <*> to match all\n  I thought I saw that someone else had already requested this\n  list of patterns matching as an enhancement so did not mention it here.\n\n  Ultimately would like to use this plus my enhancement to do constructions\n  like:\n\n  <target name=\"*\">\n   <ant dir=\"subdir\" target=\"${ant.target.name}\"/>\n  </target>\nor\n  <target name=\"install*, deploy*\">\n   <ant dir=\"subdir\" target=\"${ant.target.name}\"/>\n  </target>\n\n  and have the current target passed onto the next sublevel ant build.\n\ngreno@yahoo.com\n", "count": 1, "id": 13625, "time": "2002-04-15T13:38:49Z", "creator": "greno@yahoo.com", "creation_time": "2002-04-15T13:38:49Z", "is_private": false}, {"count": 2, "tags": [], "creator": "steve_l@iseran.com", "text": "I see what you are getting at, and dont think it will go in.\n\n1. The notion of a magic property which has the current name in it has been \nproposed and rejected in the past, primarily because it lets you do wild \nscripting things\n\n2. your idea of wildcarded implementation of target names is interesting, but \nalso not on the cards. Without a target name property it isnt going to be much \nuse anyway.\n\nIt looks like you are trying to pass targets down to a sub project, true?\n\n1. have a target for each build file which calls that sub project with a \ntarget set as a parameter\n\n2. set the dependencies of these 'proxy' targets up to match build file \ndependencies\n\n3. have entry point targets 'release' 'deploy' which call the final proxy \ntarget, probably with an <antcall>\n\n\n\n", "id": 13659, "time": "2002-04-15T17:25:42Z", "bug_id": 8084, "creation_time": "2002-04-15T17:25:42Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 8084, "is_private": false, "id": 13712, "attachment_id": null, "creator": "greno@yahoo.com", "creation_time": "2002-04-16T01:25:02Z", "time": "2002-04-16T01:25:02Z", "text": "from reporter:\n\nSteve,\n   I can easily do the type of things that I'm requesting for ant with make.  I \nwould at least expect as much flexibility with ant.  Your last suggestion is \nexactly what I'm doing now and it's far too messy.  If you add a target to a \nsub build then you have to move up the heirarchy and place it in the higher \nlevel build file also.  I also need to be able to have all targets go through a \ncatchall type target.  We need to be able to do this list/pattern matching \nthing.  In make I can use things like '$$@' to reference the current target.  I \nshould be able to do a similar thing with ant.  I can also wildcard match \ntargets.  I can also have targets go through multiple target stanzas.  I don't \nbuy the 'wild scripting things' argument.  We've been doing this type of thing \nwith make for eons without any problem.\n   I ask that you reconsider this request.  \n"}, {"count": 4, "tags": [], "text": "Make has a very different notion of targets; they are all files...in ant they \nare build stages and we build a full dependency graph before executing them. \nWildcards are too wild to even contemplate. \n\nI acknowledge that we do need to address multi-build files better; ant2.0 has \nthis as a requirement. But we wont do it this way. \n\nWhy not post some of your build file(s) so we can see if there are cleaner \nsolutions.", "attachment_id": null, "bug_id": 8084, "id": 13823, "time": "2002-04-17T04:35:46Z", "creator": "steve_l@iseran.com", "creation_time": "2002-04-17T04:35:46Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 8084, "text": "*** Bug 6414 has been marked as a duplicate of this bug. ***", "id": 15979, "time": "2002-05-13T05:43:43Z", "creator": "steve_l@iseran.com", "creation_time": "2002-05-13T05:43:43Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 8084, "attachment_id": null, "id": 15980, "time": "2002-05-13T05:46:21Z", "creator": "steve_l@iseran.com", "creation_time": "2002-05-13T05:46:21Z", "is_private": false, "text": "stillwontfix\n\nI think handoff to sub builds *is* an interesting problem, but dont think wild \ncard tricks are the solution. We are not reimplementing make in XML.\n\n"}, {"attachment_id": null, "tags": [], "bug_id": 8084, "text": "Here is a way to do it with Javascript:\n\n   <target name=\"myself\" description=\"Just to test javascript\" depends=\"\">\n      <script language=\"javascript\">project.setProperty(\"target\",\nself.getOwningTarget().getName());</script>\n      <script language=\"javascript\">project.setProperty(\"target.description\",\nself.getOwningTarget().getDescription());</script>\n      <echo message=\"target=${target}  description=${target.description}\"/>\n   </target>\n\nregards\nMarcel\n", "count": 7, "id": 86465, "time": "2006-03-03T19:24:57Z", "creator": "mr@marcelruff.info", "creation_time": "2006-03-03T19:24:57Z", "is_private": false}]
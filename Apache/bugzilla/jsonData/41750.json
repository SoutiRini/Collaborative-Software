[{"count": 0, "tags": [], "bug_id": 41750, "is_private": false, "text": "Issue:\nIf one attempts to create a org.apache.webdav.lib.WebdavResource object for a \nresource that does not exist, the WebdavResource constructor will throw an \nexception and hence one can never even call exists().  So if one can even \nsuccessfully call exists() it implies the resource DOES exist making the method \nof limited use.\n\nWhy it is occuring:\nWhat's happening is that WebdavResource is using PROPFIND to get properties for \na resource that does not exist which--according to the Webdav spec--is an \nerror.  Hence a correct WebDAV server must return a 404 (Not Found) response. \nThe code in propFindMethod (see snippet below) checks the response status and \nthrows an exception if it doesn't recieve an XML multistatus response or an \nHTTP 200 (OK) response.\n\n        if (status != HttpStatus.SC_MULTI_STATUS\n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n\n///////////////////////////////////////\n        \nSolution idea:\nHere is one I thought of.  We simply add the following to this conditional:\n\n        if (status != HttpStatus.SC_MULTI_STATUS\n            && status != HttpStatus.SC_OK\n            \n            && status != HttpStatus.SC_NOT_FOUND // <---\n            \n            ) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n\nWhat this essentially says is \"if the property does not exist, we simply won't \nadd it to the Enumeration of properties, but we won't throw an exception unless \nthere is a server error\".  So if the user loops through the Enumeration without \nfinding the requested property, the client must assume it doesn't exist.\n\n\n///////////////////////////////////////\n FIX BELOW (3 methods)\n///////////////////////////////////////\n\nThe three methods of org.apache.webdav.lib.WebdavResource where this change \nneeds to be made are:\n\n\tpropfindMethod(String, int)\n\tpropfindMethod(String, int, Vector)\n\tpropfindMethod(String, Vector)\n\nThe code with the updates is below.  For what its worth, my Slide-client based \ncode is working without a hitch with the changes.  Also, once I re-code \nsections of my app to take advantage of the now-working exists() function, my \ncode should also run faster (since I can determine whether a file exists or not \nwithout possibly incurring exception throw/catch overhead).\n\n//---------------\n\n\n    /**\n     * Execute PROPFIND method with allprop for the given path.\n     * Get list of all WebDAV properties on the given resource.\n     *\n     * <p>Once used this method, the the status code in the 207\n     * reponse is need to be set for the method of WebdavResource.\n     *\n     * <p>The values of DepthSupport.DEPTH_0, DepthSupport.DEPTH_1,\n     * DepthSupport.DEPTH_INFINITY is possbile for the depth.\n     *\n     * @param path the server relative path of the resource to request\n     * @param depth\n     * @return an enumeration of <code>ResponseEntity</code>\n     * @exception HttpException\n     * @exception IOException\n     */\n    public Enumeration propfindMethod(String path, int depth)\n        throws HttpException, IOException {\n\n        setClient();\n        // Change the depth for allprop\n        PropFindMethod method = new PropFindMethod(URIUtil.encodePath(path),\n                                                   depth);\n\n        method.setDebug(debug);\n\n        // Default depth=infinity, type=allprop\n        generateTransactionHeader(method);\n        int status = client.executeMethod(method);\n\n        // Set status code for this resource.\n        if (thisResource == true) {\n            setStatusCode(status);\n        }\n        // Also accept OK sent by buggy servers.\n        \n        /**\n         * OLD CODE\n        if (status != HttpStatus.SC_MULTI_STATUS\n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n        */\n\n        // FIX\n        if (status != HttpStatus.SC_MULTI_STATUS\n            \n            && status != HttpStatus.SC_NOT_FOUND    // <---\n            \n            && status != HttpStatus.SC_OK\n            ) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }        \n       // END FIX\n        \n        thisResource = false;\n\n        return method.getResponses();\n    }\n    \n    \n//---------------    \n\n    \n    public Enumeration propfindMethod(String path, int depth,\n                                      Vector properties)\n        throws HttpException, IOException {\n\n        setClient();\n        // Change the depth for prop\n        PropFindMethod method = new PropFindMethod(URIUtil.encodePath(path),\n                                                   depth,\n                                                   properties.elements());\n\n        method.setDebug(debug);\n        method.setFollowRedirects(this.followRedirects);\n        generateTransactionHeader(method);\n        int status = client.executeMethod(method);\n\n        // Set status code for this resource.\n        if (thisResource == true) {\n            // Set the status code.\n            setStatusCode(method.getStatusLine().getStatusCode());\n        }\n        // Also accept OK sent by buggy servers.\n        \n        /*\n         * OLD CODE\n         *\n        if (status != HttpStatus.SC_MULTI_STATUS\n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n        */\n        \n        // FIX\n        if (status != HttpStatus.SC_MULTI_STATUS\n            \n            && status != HttpStatus.SC_NOT_FOUND // <---\n            \n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n        // END FIX\n        \n\n        thisResource = false;\n\n        return method.getResponses();\n    }\n    \n    \n//---------------    \n    \n    \n    /**\n     * Execute PROPFIND method for the given path and properties.\n     * Get list of given WebDAV properties on the given resource.\n     *\n     * @param path the server relative path of the resource to request\n     * @param properties the WebDAV properties to find.\n     * @return Enumeration list of WebDAV properties on a resource.\n     * @exception HttpException\n     * @exception IOException\n     */\n    public Enumeration propfindMethod(String path, Vector properties)\n        throws HttpException, IOException {\n\n        setClient();\n        // Default depth=0, type=by_name\n        PropFindMethod method = new PropFindMethod(URIUtil.encodePath(path),\n                                                   DepthSupport.DEPTH_0,\n                                                   properties.elements());\n        method.setDebug(debug);\n        method.setFollowRedirects(this.followRedirects);\n        generateTransactionHeader(method);\n        int status = client.executeMethod(method);\n\n        // Also accept OK sent by buggy servers.\n        /*\n         * OLD CODE\n         *        \n        if (status != HttpStatus.SC_MULTI_STATUS\n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n        */\n        \n        // FIX\n        if (status != HttpStatus.SC_MULTI_STATUS\n            \n            && status != HttpStatus.SC_NOT_FOUND\t// <---\n            \n            && status != HttpStatus.SC_OK) {\n            HttpException ex = new HttpException();\n            ex.setReasonCode(status);\n            throw ex;\n        }\n        // END FIX\n        \n\n        // It contains the results.\n        Vector results = new Vector();\n\n        Enumeration responses = method.getResponses();\n        if (responses.hasMoreElements()) {\n            ResponseEntity response =\n                (ResponseEntity) responses.nextElement();\n            String href = response.getHref();\n\n            // Set status code for this resource.\n            if ((thisResource == true) && (response.getStatusCode() > 0))\n                setStatusCode(response.getStatusCode());\n            thisResource = false;\n\n            Enumeration responseProperties =\n                method.getResponseProperties(href);\n            while (responseProperties.hasMoreElements()) {\n                Property property =\n                    (Property) responseProperties.nextElement();\n                results.addElement(property.getPropertyAsString());\n            }\n        }\n\n        return results.elements();\n    }    \n\n///////////////////////////////////////\n///////////////////////////////////////\n\n\nFor more detailed information on this issue, please the following message in \nthe Slide client dev mailing list archive.\n\nPossible solutions to WebdavResource.exists() method\nhttp://mail-archives.apache.org/mod_mbox/jakarta-slide-dev/200702.mbox/%\n3c2FCCD448BA412B4FB9039AF8DDC103BC052B3FAB@camhems-1.camh.ca%3e\n\nPossible side-effects of proposed fix\nhttp://mail-archives.apache.org/mod_mbox/jakarta-slide-dev/200702.mbox/%\n3c2FCCD448BA412B4FB9039AF8DDC103BC052B3FE3@camhems-1.camh.ca%3e\n\n\n\n\nCheers!\n\n\n\nMichael N. Christoff\ndmx_dawg@hotmail.com\n\n\n\n///////////////////////////////////////\n\n\nMichael N. Christoff\nSite Administrator\nContinuing Professional Education Online\nCentre for Addiction and Mental Health\n33 Russell Street\nToronto, Ontario M5S 2S1", "id": 99983, "time": "2007-03-02T13:49:05Z", "creator": "dmx_dawg@hotmail.com", "creation_time": "2007-03-02T13:49:05Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "antoine@apache.org", "text": "\n\n*** This bug has been marked as a duplicate of 16642 ***", "id": 101243, "time": "2007-03-30T11:21:28Z", "bug_id": 41750, "creation_time": "2007-03-30T11:21:28Z", "is_private": false, "attachment_id": null}]
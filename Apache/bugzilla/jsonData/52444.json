[{"count": 0, "tags": [], "creator": "cbeams@gmail.com", "attachment_id": null, "text": "See 52326 for background, noting particularly the following:\n\n\"As long as SCI processing involves expensive classloading, larger applications will suffer from long startup times and thus be encouraged to \"shut off\" this functionality via metadata-complete='true'.\"\n\nThis issue, then, is intended to address classloading-based approach to @HandlesTypes processing by replacing it with something faster and generally less problematic.  ASM would be one way to get it done.", "id": 152641, "time": "2012-01-09T17:11:12Z", "bug_id": 52444, "creation_time": "2012-01-09T17:11:12Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52444, "attachment_id": null, "id": 152645, "time": "2012-01-09T19:01:55Z", "creator": "markt@apache.org", "creation_time": "2012-01-09T19:01:55Z", "is_private": false, "text": "No functional bug here, moving to enhancement."}, {"count": 2, "attachment_id": null, "creator": "markt@apache.org", "text": "*** Bug 52549 has been marked as a duplicate of this bug. ***", "id": 153249, "time": "2012-01-29T12:15:57Z", "bug_id": 52444, "creation_time": "2012-01-29T12:15:57Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "text": "Bringing across the list of suggestions from the duplicate...\n\n> a. if the class is an annotation, skip it\nFixed in trunk and 7.0.x and will be included in 7.0.26 onwards.\n\n> b. if the class doesn't extend/implement any interface skip it\nInteresting. Thinking about this some more, the current isAssignableFrom() test is actually broader than it needs to be since it will return true for X.class.isAssignableFrom(X.class) and there is no need to add X to the initializerClassMap in this case. Apart from that however, isAssignableFrom() is the right test and that makes things a little more complicated to implement solely using byte code due to how the code currently iterates over the JARs (traversing the class hierarchy is the tricky part). Should be doable but likely to require a fair amount of re-factoring.\n\n> c. Look at the class hierarchy - this is actually quite easy (since\n> there's only one parent) and don't load it unless it implements\n> ServletContextListener\nThis is not correct. HandlesType specify any class or interface.\n\n> d. if there are no Servlet initializers, don't load any classes\nThe code already does this.\n\n> e. if the class needs to be loaded use a throwaway classloader\nIf the class must be loaded to examine it yes, but hopefully it will be possible to avoid doing this.\n\nIn summary, b) is the only remaining problem to solve. The solution looks like requiring caching all the javaClass instances and then doing the HandlesTypes processing (and then throwing away the cache).", "id": 153257, "time": "2012-01-29T17:36:02Z", "bug_id": 52444, "creation_time": "2012-01-29T17:36:02Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 52444, "text": "Thanks for looking at this Mark. The more classes can be eliminated from loading, the better.\n\nCheers!", "id": 153267, "time": "2012-01-29T21:37:58Z", "creator": "costin.leau@gmail.com", "creation_time": "2012-01-29T21:37:58Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "bugzilla@pidster.com", "attachment_id": null, "text": "> In summary, b) is the only remaining problem to solve. The solution looks like\n> requiring caching all the javaClass instances and then doing the HandlesTypes\n> processing (and then throwing away the cache).\n\nI was looking at using the bcel.util.SyntheticRepository when you fixed the\nannotations...", "id": 153269, "time": "2012-01-29T21:51:17Z", "bug_id": 52444, "creation_time": "2012-01-29T21:51:17Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 52444, "text": "(In reply to comment #5)\n> I was looking at using the bcel.util.SyntheticRepository when you fixed the\n> annotations...\n\nThat would work but you'd need an additional cache to save you parsing the interface hierarchy every time. I'm currently working on a custom cache. Should have something for tomorrow.", "id": 153270, "time": "2012-01-29T22:05:05Z", "creator": "markt@apache.org", "creation_time": "2012-01-29T22:05:05Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 52444, "attachment_id": null, "id": 153271, "time": "2012-01-29T23:23:15Z", "creator": "markt@apache.org", "creation_time": "2012-01-29T23:23:15Z", "is_private": false, "text": "I think I have a patch for this. The unit tests pass but I want to run the TCK as well before I commit anything. That'll be tomorrow at the earliest now."}, {"count": 8, "tags": [], "bug_id": 52444, "attachment_id": null, "id": 153289, "time": "2012-01-30T11:34:58Z", "creator": "markt@apache.org", "creation_time": "2012-01-30T11:34:58Z", "is_private": false, "text": "Unit tests and Servlet TCK pass so the fix has been committed to trunk and 7.0.x. It will be in 7.0.26 onwards."}, {"count": 9, "tags": [], "bug_id": 52444, "text": "Thanks, Mark.  I've updated https://jira.springsource.org/browse/SPR-8894 and https://jira.springsource.org/browse/SPR-8945 to let affected users know that 7.0.26 should take care of this issue.", "id": 153290, "time": "2012-01-30T11:46:54Z", "creator": "cbeams@gmail.com", "creation_time": "2012-01-30T11:46:54Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 52444, "attachment_id": null, "id": 153327, "time": "2012-01-31T23:05:41Z", "creator": "guillaume.smet@gmail.com", "creation_time": "2012-01-31T23:05:41Z", "is_private": false, "text": "Hi Mark,\n\nAs we also had this problem with our application, we have built a Tomcat from svn tip and when starting the application, we had the following stacktrace:\nCaused by: java.lang.NullPointerException\n\tat org.apache.tomcat.util.bcel.classfile.ClassParser.<init>(ClassParser.java:72)\n\tat org.apache.catalina.startup.ContextConfig.populateJavaClassCache(ContextConfig.java:2132)\n\tat org.apache.catalina.startup.ContextConfig.populateJavaClassCache(ContextConfig.java:2123)\n\tat org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2058)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:2015)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1904)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1872)\n\tat org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1858)\n\nThis is due to the fact that classes present in the jar files may implement interfaces not present in the classpath (in our case, it's the optional commonj support in Spring's scheduling classes which rises this problem).\n\nWe solved this problem by checking that the inputStream \"is\" is different from null in populateJavaClassCache(String className).\n\nWith this fix, our application starts and the initialization is faster than with 7.0.25.\n\nHTH.\n\n-- \nGuillaume"}, {"count": 11, "attachment_id": null, "creator": "bugzilla@pidster.com", "text": "Can you add a patch as an attachment (in diff -u format) for your change?", "id": 153329, "time": "2012-01-31T23:57:21Z", "bug_id": 52444, "creation_time": "2012-01-31T23:57:21Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "guillaume.smet@gmail.com", "attachment_id": 28245, "text": "Created attachment 28245\nFixes a NPE on startup if classes reference class or interface which aren't in the classpath\n\nAs requested, here is the trivial patch we applied to fix the NPE we had on startup.", "id": 153332, "time": "2012-02-01T00:18:32Z", "bug_id": 52444, "creation_time": "2012-02-01T00:18:32Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 52444, "attachment_id": null, "id": 153337, "time": "2012-02-01T09:45:55Z", "creator": "markt@apache.org", "creation_time": "2012-02-01T09:45:55Z", "is_private": false, "text": "Looking at the stack trace I reached the same conclusion as to the fix but implemented it sightly differently.\n\nThis has been fixed in trunk and 7.0.x/trunk and will be included in 7.0.26 onwards."}]
[{"count": 0, "tags": [], "bug_id": 58740, "attachment_id": 33352, "text": "Created attachment 33352\nPatch that fixes the behavior described\n\nWhen generating XSLX files for a spreadsheet that contains a large number of cell styles, there is extreme slowness caused by the use of ArrayList.indexOf() which is O(n) time, leading to overall O(n^2) behavior.\n\nThis is easily fixed by keeping a reverse mapping from list entry to list index. Since the list of styles is only appended to, this is easy.\n\nThe attached patch reduced the time to generate my XSLX output from several minutes to under 10 seconds.", "id": 186969, "time": "2015-12-16T04:08:13Z", "creator": "archie@dellroad.org", "creation_time": "2015-12-16T04:08:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58740, "attachment_id": null, "text": "Out of curiosity, how many styles are you creating that cause the reported several minutes/10 seconds times? Are any of the styles identical? I ask because most workbooks I create use under 100 styles. Unless your workbook is a styles demo that shows every permutation of font, data format, border, background and foreground color, it seems difficult to get a style count high enough in most applications where there wouldn't be duplicates.\n\nI've rolled my own code to manage styles so I can avoid creating millions of styles. Usually I want to change the data format of an existing cell without affecting other cells that use the same style. Rather than cloning the cell's style (that's how you get millions of styles), I temporarily change the cell style's data format, search the style table if there's another style that matches, and if so change the cell's style reference to the match, otherwise I clone the style. Finally, I revert my dataformat change to the original style. Because I apply style changes to thousands of cells, I have some extra data structures to make the style lookup process faster than linearly searching the style table.\n\nI mention this because it may solve your problem if you don't really need 1 million styles.\n\nPOI could benefit from a way to consolidate duplicate styles, either when the workbook is written to disk, or through an explicit call.\n\nGlancing at your patch, it looks like your change adds some data structures. The consequence is:\n1) higher memory consumption\n2) extra processing power updating multiple data structures\n3) potential for the data structures to get out of sync, especially considering projects that subclass POI.\n\nMy recommendation is use a single data structure that is a container for cell styles, that combines the features that you need that will give fast by-index and by-style lookup. If such a data structure isn't available off-the-shelf, you may want to write your own. Most trivially, this is just a class that contains an ArrayList and a HashMap for inverted array lookups, and any call to the hybrid data structure would update both underlying data structures. Encapsulating the complexity is the key to solving my 3rd concern, and makes solving #2 and #1 easier to solve down the road.\n\nAlternatively, if you can read the styles from the array into a hashmap, clear the array, and only maintain a hashmap throughout the life of the style table, and then recreate the array when you need to save the style table, you've saved yourself the memory and performance overhead, and also avoided the potential for out-of-sync data structures so long as you clearly mark the array as unmaintained (maybe clear it or set it to null, or don't make it an instance variable, plus comments).", "id": 186975, "time": "2015-12-16T08:57:25Z", "creator": "onealj@apache.org", "creation_time": "2015-12-16T08:57:25Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58740, "text": "(In reply to Javen O'Neal from comment #1)\n> Out of curiosity, how many styles are you creating that cause the reported\n> several minutes/10 seconds times?\n\nI have one column where the background color is set according to the\ndata value as a visual aid. Lots of values lead to lots of colors and\ntherefore styles. Even limiting to couple thousand colors leads to this\nproblem. \n\n> 1) higher memory consumption\n\nYes but insignificantly. A small constant number of bytes per style.\n\n> 2) extra processing power updating multiple data structures\n\nHuh?!? You're missing the whole point.\n\nIf you have non-trivial number of styles, there will be MUCH less\nprocessing power utilized because we eliminate the stupid O(n^2) behavior.\n\nFor a trivial number of styles, the overhead is minimal - linear time in\nthe number of styles, which by definition, is small.\n\n> 3) potential for the data structures to get out of sync, especially\n> considering projects that subclass POI.\n\nWrong - the fields are all private. It's not possible for a subclass\nto get things out of sync.\n\n> My recommendation is use a single data structure that is a container for\n> cell styles, that combines the features that you need that will give fast\n> by-index and by-style lookup. If such a data structure isn't available\n> off-the-shelf, you may want to write your own. Most trivially, this is just\n> a class that contains an ArrayList and a HashMap for inverted array lookups,\n\nThat's a possible refinement and I considered it. My goal was to address\nthe immediate problem.\n\nYou are letting the perfect be the enemy of the good. I've provided a\nreasonable patch to address what is truly stupid behavior. My recommendation\nis to use this patch to \"put out the fire\" so to speak, and we can refine it\nlater at a lower priority.", "id": 186978, "time": "2015-12-16T14:15:18Z", "creator": "archie@dellroad.org", "creation_time": "2015-12-16T14:15:18Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58740, "text": "In terms of the style optimisation, we do have a style optimiser for HSSF, but nothing for XSSF. Some of the logic could be re-used, but a fair bit would need writing", "id": 186979, "time": "2015-12-16T16:00:07Z", "creator": "apache@gagravarr.org", "creation_time": "2015-12-16T16:00:07Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "(In reply to Archie Cobbs from comment #2)\n> I have one column where the background color is set according to the\n> data value as a visual aid. Lots of values lead to lots of colors and\n> therefore styles. Even limiting to couple thousand colors leads to this\n> problem. \n\nOkay. Sounds like you really do need that many styles if the style is dependent on the value. This isn't by any chance related to Excel's Conditional Formatting Color Scales [1]? This would still probably require as many styles as there are values, but would be easier to work with.\n\n\nI'll take a look at your patch in context with the code later this week to see if we can get away with maintaining just a single data structure.\n\nThank you for the patch!\n\n[1] https://support.office.com/en-us/article/Highlight-patterns-and-trends-with-conditional-formatting-eea152f5-2a7d-4c1a-a2da-c5f893adb621", "bug_id": 58740, "attachment_id": null, "id": 186981, "time": "2015-12-16T16:46:47Z", "creator": "onealj@apache.org", "creation_time": "2015-12-16T16:46:47Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 58740, "attachment_id": null, "text": "(In reply to Javen O'Neal from comment #4)\n> Okay. Sounds like you really do need that many styles if the style is\n> dependent on the value. This isn't by any chance related to Excel's\n> Conditional Formatting Color Scales [1]?\n\nNo - I'm not familiar with that. Sounds like a neater solution though.\n\nDoes OOXML and/or the POI API have support for that?\n\n> I'll take a look at your patch in context with the code later this week to\n> see if we can get away with maintaining just a single data structure.\n\nGreat, thanks!", "id": 186986, "time": "2015-12-16T19:21:03Z", "creator": "archie@dellroad.org", "creation_time": "2015-12-16T19:21:03Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58740, "attachment_id": null, "text": "(In reply to Archie Cobbs from comment #5)\n> Does OOXML and/or the POI API have support for that?\n\nYes! Take a look at the colourScales method of the ConditionalFormats example program to get started, then the related unit tests if you need more\n\n(Note that if you write a colour scale into a .xls or .xlsx file, it will only render properly if you open in a new enough copy of Excel. Older versions will skip over the records/xml without rendering anything)", "id": 186990, "time": "2015-12-16T21:17:19Z", "creator": "apache@gagravarr.org", "creation_time": "2015-12-16T21:17:19Z", "is_private": false}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "attachment_id": 33382, "id": 187181, "time": "2015-12-28T16:31:48Z", "bug_id": 58740, "creation_time": "2015-12-28T16:31:48Z", "is_private": false, "text": "Created attachment 33382\nRebased attachment 33352 to r1721943.\n\nI committed the trivial changes from attachment 33352. I've rebased the patch to r1721943.\n\nThis patch should use a Bidirectional Map or other data structure so that the StylesTable doesn't become too difficult to read. I've posted a question to the dev mailing list for feedback.\n\nThis test also fails the current unit test suite. Looks to be some issues with ArrayIndexOutOfBounds."}, {"count": 8, "tags": [], "bug_id": 58740, "attachment_id": 34235, "text": "Created attachment 34235\npatch showing mixed based indices\n\nSome of the methods return list.size() before adding an item and other methods return list.size() after adding an item. The effect is whether a 0-based list index or 1-based list index is returned. Without better javadocs or comments saying which should be which, I'm inclined to believe that there are some bugs hiding in the attached code.", "id": 193638, "time": "2016-09-12T06:26:39Z", "creator": "onealj@apache.org", "creation_time": "2016-09-12T06:26:39Z", "is_private": false}, {"count": 9, "tags": [], "creator": "onealj@apache.org", "attachment_id": 34239, "id": 193650, "time": "2016-09-12T14:58:40Z", "bug_id": 58740, "creation_time": "2016-09-12T14:58:40Z", "is_private": false, "text": "Created attachment 34239\nMappedList data structure that combines a List and a TreeSetValuedHashMap to improve list reverse lookup speed\n\nI wrote a general-purpose class using commons-collections4.1 (this patch was generated off the commons collections trunk, not POI). The indexOf and contains methods were significantly faster, but insertion and removal were pitifully slow (it's slow to shift all the elements in an array by 1 for an ArrayList implementation, but this class is even slower because it has to shift the values of a map--from my trials, it's faster to rebuild the entire map when an insertion or deletion happens that isn't at the end of the list.\n\nSome sample timing:\nEach list was initialized with 10,000 elements and 10,000 operations of each type were performed in succession. Timing is relative and seems to be influenced by JIT. Repeatability is around +/-10%, so I have rounded to 2 significant figures. Low numbers are better.\n>                        add; toArray; iterator; insert; get; indexOf; contains; remove\n>             ArrayList = 2;   1200;       68;    100;    9;    310;      220;      81;\n>            LinkedList = 3;   1800;     1500;    350;  420;   1000;     1000;     400;\n> NodeCachingLinkedList = 4;   2600;     1900;    250;  350;    860;      830;     370;\n>              TreeList = 4;   1300;     3400;     68;   10;   1500;     1500;      55;\n>            MappedList = 52;  1600;     1900;  20000;    0;     64;        6;   21000;\n> Elapsed time: 1m8s"}, {"count": 10, "tags": [], "bug_id": 58740, "attachment_id": 34241, "text": "Created attachment 34241\na non-working MapUniqueList class that mimicks an associative SetUniqueList\n\nIf we can remove the scenario where duplicate entries may exist in the lists then we could write a MapUniqueList (see org.apache.commons.collections4.list.SetUniqueList), which may be more performant.\n\nLooking at the usage of these lists, we only use List.add(E), List.indexOf(E), and List.size(), so we may not run into the performance bottlenecks when elements in the array are shifted (and this makes sense--we wouldn't want to change the style index as there are other data structures that only reference the index, not the object itself.", "id": 193654, "time": "2016-09-12T17:11:10Z", "creator": "onealj@apache.org", "creation_time": "2016-09-12T17:11:10Z", "is_private": false}, {"count": 11, "tags": [], "creator": "archie@dellroad.org", "attachment_id": 34275, "id": 193821, "time": "2016-09-19T21:25:57Z", "bug_id": 58740, "creation_time": "2016-09-19T21:25:57Z", "is_private": false, "text": "Created attachment 34275\nVersion of original patch using Guava's BiHashMap class\n\nJust for what it's worth, I'm attaching a patch against 3.14 that uses Guava's BiHashMap, which is a bidirectional Map.\n\nThis makes the logic much simpler."}, {"count": 12, "tags": [], "bug_id": 58740, "attachment_id": null, "text": "Apache Commons collections4 is available to us, but a BiDiMap does not work because values (and therefore keys in the inverted map) may not be unique.", "id": 193822, "time": "2016-09-20T00:29:36Z", "creator": "onealj@apache.org", "creation_time": "2016-09-20T00:29:36Z", "is_private": false}]
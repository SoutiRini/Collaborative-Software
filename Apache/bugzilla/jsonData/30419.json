[{"count": 0, "tags": [], "bug_id": 30419, "text": "Hi,\n\nI found some weird behaviour in mod_cache which I believe to be a bug. First\nof all my environment:\n\nI. Environment\n\nApache: 2.0.50\nOS: Linux\n\nExcerpt from my Apache configuration:\n\n<VirtualHost 192.168.2.4:80>\nServerName www.something.de\nServerAdmin admin@www.something.de\nDocumentRoot \"/var/httpd/test/www.something.de/docs\"\nErrorLog \"|/opt/apache-2.0.50/bin/rotatelogs /var/httpd/test/www.something.de/lo\ngs/error_log 86400\"\nCustomLog \"|/opt/apache-2.0.50/bin/rotatelogs /var/httpd/test/www.something.de/l\nogs/access_log 86400\" combined\n\n\n<Directory /var/httpd/test/www.something.de/docs>\n   Options None\n   AllowOverride None\n</Directory>\n\nJkMount /* worker_ajp13\n\nCacheRoot /var/httpd/test/cache\nCacheSize 256\nCacheEnable disk /test\nCacheDirLevels 5\nCacheDirLength 3\n\nCacheMaxExpire 60\nCacheIgnoreNoLastMod On\nCacheIgnoreCacheControl On\nCacheDefaultExpire 60\n\n</VirtualHost>\n\nII. Problem description\n\nI try to use mod_cache to cache pages generated by Tomcat and delivered via\nApache / mod_jk.\n\nOn the Tomcat / mod_jk side I use:\n\nmod_jk: 1.2.5\nTomcat: 5.0.18\n\nAt first glance the configuration above does exactly what I want by caching\nthe Tomcat generated response, but I noticed the following two weird behaviours:\n\n1. If a cached document is outdated because it is expired, it will be requested\n   again from Tomcat, which is completely correct. But this response contains\n   two Set-Cookie headers, one from the cached headers (cross checked by a look\n   to the .headers file) and one generated by the actual Tomcat request. The\n   following excerpt from Mozilla's livehttpheaders shows this:\n\nhttp://192.168.2.4/test/test.jsp\n\nGET /test/test.jsp HTTP/1.1\nHost: 192.168.2.4\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7) Gecko/20040616\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plai\nn;q=0.8,image/png,*/*;q=0.5\nAccept-Language: de,en;q=0.8,de-de;q=0.5,en-gb;q=0.3\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nConnection: keep-alive\n\nHTTP/1.x 200 OK\nDate: Fri, 30 Jul 2004 07:25:52 GMT\nServer: Apache/2.0.50 (Unix) mod_ssl/2.0.50 OpenSSL/0.9.6g DAV/2 mod_jk/1.2.5\nSet-Cookie: JSESSIONID=39F12D5B8854DB7ED167B66506D2345A; Path=/test\nSet-Cookie: JSESSIONID=CA4640A1745F53FC27A07F3EA6362286; Path=/test\nContent-Length: 74\nContent-Type: text/html; charset=ISO-8859-1\nKeep-Alive: timeout=15, max=99\nConnection: Keep-Alive\n\nIt is worth to note that the first Set-Cookie header is the one from the\npreviously cached headers and that the second Set-Cookie header is the one\ngenerated by the actual Tomcat request. It can be found\nalone in the updated .headers file after the request has been completed.\n\n2. If the next request after 1. to the same URL is a request that would\n   allow mod_cache to retrieve the cached document because\n\n   - It contains no Cache-Control header\n   - and the request is placed shortly after 1. such that the document is\n     not expired already\n\n   mod_cache decides that the cached version of the document is not fresh\n   and has to be retrived again from Tomcat. Only the next request to this\n   URL works correctly and delivers the cached version of this document.\n\nIII. Problem analysis\n\nSo I set the Loglevel to debug and added the following temporary patch to\ncache_util.c to get a better picture of what is going on:\n\n--- httpd-2.0.50/modules/experimental/cache_util.c.orig 2004-02-09 21:53:16.0000\n00000 +0100\n+++ httpd-2.0.50/modules/experimental/cache_util.c      2004-07-30 12:27:39.0000\n00000 +0200\n@@ -242,6 +242,18 @@\n                                        \"proxy-revalidate\", NULL)))) {\n         maxstale = 0;\n     }\n+    {\n+\n+     apr_int64_t zw,zw1;\n+\n+     zw = apr_time_sec(info->expire - info->date);\n+     zw1 = apr_time_sec(info->response_time - info->request_time);\n+\n+ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,\n+                     \"cache_util: age %lli, maxstale %lli, minfresh %lli, expir\ne %lli, date %lli, maxage %lli, zw %lli, smaxage %lli, response %lli, request %l\nli, zw1 %lli\",\n+                     age,maxstale,minfresh,info->expire,info->date,maxage,zw,sm\naxage,info->response_time,info->request_time,zw1);\n+    }\n+\n\n     /* handle expiration */\n     if (((smaxage != -1) && (age < (smaxage - minfresh))) ||\n\n\nThis produced the following logging output:\n\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(121): incoming request is asking for\na uncached version of /test/test.jsp, but we know better and are ignoring it\n[Fri Jul 30 12:38:34 2004] [info] disk_cache: Serving Cached URL 192.168.2.4/tes\nt/test.jsp?\n[Fri Jul 30 12:38:34 2004] [info] disk_cache: Served headers for URL 192.168.2.4\n/test/test.jsp?\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/cache_util.c(252): cache_util: age 111, maxstale\n0, minfresh 0, expire 1091183863743217, date 1091183803743217, maxage -1, zw 60,\n smaxage -1, response 1091183803743217, request 1091183803740783, zw1 0\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(218): cache: stale cache - test condi\ntional\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(265): cache: nonconditional - no cach\ned etag/lastmods - add cache_in and DECLINE\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(406): cache: running CACHE_IN filter\n[Fri Jul 30 12:38:34 2004] [info] disk_cache: Caching URL 192.168.2.4/test/test.\njsp?\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(663): cache: Caching url: /test/test.\njsp\n[Fri Jul 30 12:38:34 2004] [info] disk_cache: Caching headers for URL 192.168.2.\n4/test/test.jsp?\n[Fri Jul 30 12:38:34 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(406): cache: running CACHE_IN filter\n[Fri Jul 30 12:38:34 2004] [info] disk_cache: Cached body for URL 192.168.2.4/te\nst/test.jsp?\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(121): incoming request is asking for\na uncached version of /test/test.jsp, but we know better and are ignoring it\n[Fri Jul 30 12:44:07 2004] [info] disk_cache: Serving Cached URL 192.168.2.4/tes\nt/test.jsp?\n[Fri Jul 30 12:44:07 2004] [info] disk_cache: Served headers for URL 192.168.2.4\n/test/test.jsp?\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/cache_util.c(252): cache_util: age 444, maxstale\n0, minfresh 0, expire 1091183863000000, date 1091183803000000, maxage -1, zw 60,\n smaxage -1, response 1091183914921396, request 1091183914918844, zw1 0\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(218): cache: stale cache - test condi\ntional\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(265): cache: nonconditional - no cach\ned etag/lastmods - add cache_in and DECLINE\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(406): cache: running CACHE_IN filter\n[Fri Jul 30 12:44:07 2004] [info] disk_cache: Caching URL 192.168.2.4/test/test.\njsp?\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(663): cache: Caching url: /test/test.\njsp\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(705): cache: Added date header\n[Fri Jul 30 12:44:07 2004] [info] disk_cache: Caching headers for URL 192.168.2.\n4/test/test.jsp?\n[Fri Jul 30 12:44:07 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(406): cache: running CACHE_IN filter\n[Fri Jul 30 12:44:07 2004] [info] disk_cache: Cached body for URL 192.168.2.4/te\nst/test.jsp?\n[Fri Jul 30 12:44:10 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(121): incoming request is asking for\na uncached version of /test/test.jsp, but we know better and are ignoring it\n[Fri Jul 30 12:44:10 2004] [info] disk_cache: Serving Cached URL 192.168.2.4/tes\nt/test.jsp?\n[Fri Jul 30 12:44:10 2004] [info] disk_cache: Served headers for URL 192.168.2.4\n/test/test.jsp?\n[Fri Jul 30 12:44:10 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/cache_util.c(252): cache_util: age 3, maxstale 0,\n minfresh 0, expire 1091184307843266, date 1091184247843266, maxage -1, zw 60, s\nmaxage -1, response 1091184247843266, request 1091184247840880, zw1 0\n[Fri Jul 30 12:44:10 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(186): cache: fresh cache - add cache_\nout filter and handle request\n[Fri Jul 30 12:44:10 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(323): cache: running CACHE_OUT filter\n[Fri Jul 30 12:44:10 2004] [debug] /usr/src/packages/BUILD/apache_aol-2.0.50/htt\npd-2.0.50/modules/experimental/mod_cache.c(332): cache: serving /test/test.jsp\n\nIt is notable that the values for expire / date of the 12:44:07 request are\nthe values of the 12:38:34 request with their microseconds part striped off.\nThis is wrong as the 12:38:34 request should have updated expire / date in\nthe .headers file with the values actual during the 12:38:34 request and\nnot set the values to the striped values of the cache entry expired at\n12:38:34. One may also notice that the 12:44:07 request reports\ncache: Added date header whereas the 12:38:34 request does nothing of this\nkind.\nIt is also notable that the .headers file does not contain a Date: header after\nthe 12:38:34 request, but it does after the 12:44:07 request.\n\nIV. Conclusion\n\nTo cut a long story short: I believe that 1. and 2. are caused by the same\nproblem:\n\nThe function cache_select_url called in line 152 of mod_cache.c already fills\nr->err_headers_out with the cached headers. If ap_cache_check_freshness called\nin line 167 detects that the cache object has expired this data is kept in\nr->err_headers_out during the further processing. This leads to the reusing\nof the old date in line 681 of mod_cache.c and explains the removal of the\nmicroseconds part which is done in line 689.\nDuring the further processing of the CACHE_IN filter at least mod_disk_cache\nonly stores r->headers_out in the .headers file which explains why the Date\nheader is missing in the .headers file after the 12:38:34 request.\nFurthermore r->err_headers_out and r->headers_out get merged later on where\nr->err_headers_out distributes the old (previously cached) Set-Cookie header\nand r->headers_out distributes the new Tomcat generated Set-Cookie header\nto the reponse.\n\nV. Solution proposal\n\nFrom my limited view into Apache I cannot see a reason why the data in\nr->err_headers_out / r->headers_out should be used any longer if\nap_cache_check_freshness detected that the cache object has expired. So I\npropose the following patch to mod_cache.c which clears the tables\nr->err_headers_out / r->headers_out:\n\n--- httpd-2.0.50/modules/experimental/mod_cache.c.orig  2004-02-09 21:53:16.0000\n00000 +0100\n+++ httpd-2.0.50/modules/experimental/mod_cache.c       2004-07-30 13:16:26.0000\n00000 +0200\n@@ -207,9 +207,13 @@\n             return OK;\n         }\n         else {\n+            apr_table_clear(r->headers_out);\n             if (!r->err_headers_out) {\n                 r->err_headers_out = apr_table_make(r->pool, 3);\n             }\n+            else {\n+                 apr_table_clear(r->err_headers_out);\n+            }\n             /* stale data available */\n             if (lookup) {\n                 return DECLINED;\n\nApplying this patch worked for me. Of course I do not know if it breaks\nsomething else as I did only limited testing. If it turns out that it is\nincorrect to clear the tables r->err_headers_out / r->headers_out then at\nleast all \"irrelevant data\" (however this gets defined) that got added by\ncache_select_url must be removed after ap_cache_check_freshness detected\nthat the cache object has expired. From my experience this should be at least\nthe Set-Cookie and the Date headers. Depending on how \"irrelevant data\" gets\ndefined this makes a solution and thus a patch more complex.\n\n\nRegards\n\nR\u00fcdiger Pl\u00fcm", "id": 61409, "attachment_id": null, "creator": "ruediger.pluem@vodafone.com", "creation_time": "2004-07-30T22:30:30Z", "time": "2004-07-30T22:30:30Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 30419, "attachment_id": 12285, "text": "Created attachment 12285\nSolution proposal", "id": 61410, "time": "2004-07-30T22:31:20Z", "creator": "ruediger.pluem@vodafone.com", "creation_time": "2004-07-30T22:31:20Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 30419, "text": "Created attachment 12878\nPatch against 2.0.51", "id": 64304, "attachment_id": 12878, "creator": "ruediger.pluem@vodafone.com", "creation_time": "2004-09-28T12:25:12Z", "time": "2004-09-28T12:25:12Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jerenkrantz@apache.org", "is_private": false, "text": "This was already fixed in HEAD (in a completely different manner) and is already\nbackported to the 2.0.53 branch.\n\nThanks!", "id": 64336, "time": "2004-09-28T17:44:25Z", "bug_id": 30419, "creation_time": "2004-09-28T17:44:25Z", "attachment_id": null}]
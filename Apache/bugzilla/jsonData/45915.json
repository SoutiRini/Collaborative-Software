[{"count": 0, "tags": [], "text": "Unfortunately, our system which uses log4j 1.2.15. encountered the same bug that was reported in Bug#: 38137 Comment #16. \nThis bug seems not to be discussed for the final fix for several months\u2026 Is this bug going to fix in near future?\n\nHere is the thread dump:\n\nFound one Java-level deadlock:\n=============================\n\"Thread-1\":\n  waiting to lock monitor 6000000000587e40 (object 9fffffffcb409a68, a java.util.ArrayList),\n  which is held by \"pool-1-thread-41460\"\n\"pool-1-thread-41460\":\n  waiting to lock monitor 6000000000588230 (object 9fffffffcb4d9b28, a org.apache.log4j.spi.RootLogger),\n  which is held by \"Thread-1\"\n\nJava stack information for the threads listed above:\n===================================================\n\"Thread-1\":\n\tat org.apache.log4j.AsyncAppender.append(AsyncAppender.java:163)\n\t- waiting to lock <9fffffffcb409a68> (a java.util.ArrayList)\n\tat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)\n\t- locked <9fffffffcb409ac0> (a org.apache.log4j.AsyncAppender)\n\tat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)\n\tat org.apache.log4j.Category.callAppenders(Category.java:206)\n\t- locked <9fffffffcb4d9b28> (a org.apache.log4j.spi.RootLogger)\n\tat org.apache.log4j.Category.forcedLog(Category.java:391)\n\tat org.apache.log4j.Category.log(Category.java:856)\n\tat kid.bs.common.log.KidLogger.log(KidLogger.java:429)\n\tat kid.bs.common.log.KidLogger.log(KidLogger.java:351)\n\tat kid.bs.job.KidExecuter.run(KidExecuter.java:1128)\n\tat java.lang.Thread.run(Thread.java:595)\n\"pool-1-thread-41460\":\n\tat org.apache.log4j.Category.callAppenders(Category.java:204)\n\t- waiting to lock <9fffffffcb4d9b28> (a org.apache.log4j.spi.RootLogger)\n\tat org.apache.log4j.Category.forcedLog(Category.java:391)\n\tat org.apache.log4j.Category.log(Category.java:856)\n\tat kid.bs.common.log.KidLogger.info(KidLogger.java:142)\n\tat kid.sr.batch.LoadingDaily.action(LoadingDaily.java:2111)\n\t- locked <9fffffffcbee6e28> (a java.lang.String)\n\tat kid.bs.job.thread.KidActionThread.newActionClass(KidActionThread.java:429)\n\tat kid.bs.job.thread.KidActionThread.jobExecute(KidActionThread.java:149)\n\tat kid.bs.job.thread.KidActionThread.run(KidActionThread.java:83)\n\tat edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:665)\n\tat edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:690)\n\tat java.lang.Thread.run(Thread.java:595)\n\nFound 1 deadlock.", "attachment_id": null, "id": 121077, "creator": "keiichi.fujito@hp.com", "time": "2008-09-30T02:31:24Z", "bug_id": 45915, "creation_time": "2008-09-30T02:31:24Z", "is_private": false}, {"count": 1, "tags": [], "creator": "roger.wang@intel.com", "attachment_id": null, "text": "I ran into a similar problem, but in the last I found that I was logging inside the async appender's dispatch thread. May this is helpful for you.", "id": 122586, "time": "2008-11-17T21:41:51Z", "bug_id": 45915, "creation_time": "2008-11-17T21:41:51Z", "is_private": false}, {"count": 2, "tags": [], "text": "It seems that a recursive call is made in KidLogger.log :\n\n        at kid.bs.common.log.KidLogger.log(KidLogger.java:429)\n        at kid.bs.common.log.KidLogger.log(KidLogger.java:351)\n\nIs it on purpose ? A bit dangerous in a logging method.", "attachment_id": null, "bug_id": 45915, "id": 122587, "time": "2008-11-18T00:07:03Z", "creator": "qualitychecker@free.fr", "creation_time": "2008-11-18T00:07:03Z", "is_private": false}, {"count": 3, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "Logging requests within appenders, layouts, etc are not supported.  Supporting it is a design requirement for log4j 2 (https://issues.apache.org/jira/browse/LOG4J2-8).  Marking this as WONTFIX.", "id": 124005, "time": "2009-01-13T12:34:31Z", "bug_id": 45915, "creation_time": "2009-01-13T12:34:31Z", "is_private": false}]
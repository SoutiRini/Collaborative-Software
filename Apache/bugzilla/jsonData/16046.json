[{"count": 0, "tags": [], "bug_id": 16046, "attachment_id": null, "id": 29322, "time": "2003-01-14T01:20:28Z", "creator": "dd@cron.ru", "creation_time": "2003-01-14T01:20:28Z", "is_private": false, "text": "Memory leak ~ 8k occurs every time I run PROPFIND webdav method when \nmod_deflate is activated, e.g. if client issued Accept-Encode: gzip header.\nPROPFIND was used against a quite big directory (~400files) and the responce \nstream was ~ 400kB (after de-compression).\nProblem does not appear if either mod_deflate is not loaded or if \"Accept-\nEncode: gzip\" is not used.\n\nFollowing configuration directives are in my httpd.conf:\n\n#stripped off common top\nLoadModule deflate_module modules/mod_deflate.so\nNameVirtualHost localhost:80\nNameVirtualHost localhost:801\n<VirtualHost localhost:80>\n</VirtualHost>\n<VirtualHost localhost:801>\n\nDAVLockDB logs/DavLock\n<Directory \"D:/apa2_0_43/htdocs\">\n    SetInputFilter DEFLATE\n    SetOutputFilter DEFLATE\n    DAV On\n    <Limit PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK>\n        AuthName             \"Fx\"\n        AuthType             Basic\n        AuthUserFile         logs/passw\n        Require user dmitri\n    </Limit>\n</Directory>\n</VirtualHost>"}, {"count": 1, "tags": [], "bug_id": 16046, "attachment_id": null, "id": 29411, "time": "2003-01-15T16:54:31Z", "creator": "trawick@apache.org", "creation_time": "2003-01-15T16:54:31Z", "is_private": false, "text": "A memory leak was fixed after 2.0.43.  Please download the latest mod_deflate\n(from http://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/filters/mod_deflate.c)\nor wait for 2.0.44, then report back.\n\nThanks!\n"}, {"count": 2, "tags": [], "text": "I've checked.\nYes indeed the bug went away.\n\nBut please don't close it immediately. By learning sources I see that there \nare some conditions when some additional leaks may occur again.\nmod_deflate does not always make a paired call to inflateEnd() after \ninflateInit2() was called. It make a big concern that the leak can be \nreproduced with for example a trimmed compressed part.\nRemember that after inflateInit2() was called zlib may allocate up to \n256kb of memory and releases all in inflateEnd() only.\n", "attachment_id": null, "id": 29453, "creator": "dd@cron.ru", "time": "2003-01-15T20:00:45Z", "bug_id": 16046, "creation_time": "2003-01-15T20:00:45Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 16046, "attachment_id": null, "is_private": false, "id": 29469, "time": "2003-01-15T20:55:02Z", "creator": "dd@cron.ru", "creation_time": "2003-01-15T20:55:02Z", "text": "I checked with a \"trimmed\" (e.g. wrong) compressed request.\nAs expected Apache gets HTTP/1.1 400. But as predicted a memory leak occurs \ntoo. Approx. 48kB for a request.\n\nConditions: mod_deflate mod_dav mod_dav_fs installed.\nPROPFIND request made with Content-encoding: gzip and content is too short \n(trimmed) for example just 11 bytes. Gzipped content can never be less than 18 \nbytes:\n\n#####Headers:\n\nPROPFIND / HTTP/1.1\nContent-Encoding: gzip\nContent-Type: text/xml; charset=\"utf-8\"\nContent-Length: 11\nHost: localhost:801\nAccept: text/html, */*\nAccept-Encoding: gzip\nUser-Agent: Mozilla/3.0 (compatible; DD Library)\nDepth: 1\n\n#####Content - gzipped but trimmed, hex dump\n0x1F 0x8B 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x0B 0xB3 \n\n\nMy investigation showed that a call to inflateEnd() is missed. Occurs when \nconditions above are met.\n"}, {"count": 4, "tags": [], "bug_id": 16046, "attachment_id": null, "id": 31402, "time": "2003-02-17T04:49:04Z", "creator": "jerenkrantz@apache.org", "creation_time": "2003-02-17T04:49:04Z", "is_private": false, "text": "Should be fixed in modules/filters/mod_deflate.c r1.30\n\nThanks for using Apache HTTP Server!"}]
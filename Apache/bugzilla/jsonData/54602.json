[{"count": 0, "tags": [], "bug_id": 54602, "text": "If a request contains a uri that ends in a multi byte character which is missing a byte the extra bytes are left in a buffer which is reused by a future request.\n\nThe problem comes from two different things:\n1) If B2CConverter tries to convert a ByteChunk which ends in a character underflow it does not convert that last character and it is left in a buffer in B2CConver.\n\n2) The B2CConverter in org.apache.catalina.connector.Request is not recycled with the rest of the objects. It looks like this is done intentionally based on the comment above it's declaration.\n\nThe issue with B2CConverter can be demonstrated with the code below, which is a simplification of what is done inside of CoyoteAdapter.convertURI():\n\n<code>\nB2CConverter conv = new B2CConverter(\"UTF-8\");\nByteChunk bc = new ByteChunk();\nCharChunk cc = new CharChunk();\nbyte[] bytes = { 0x61, 0x62, 0x63, 0x64, -8, -69, -73, -77 };\n\nbc.append(bytes, 0, bytes.length);\ncc.allocate(bc.getLength(), -1);\nconv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());\nSystem.out.println(cc);\n\ncc.recycle();\nbc.recycle();\n\nbc.append(bytes, 0, bytes.length);\ncc.allocate(bc.getLength(), -1);\nconv.convert(bc, cc, cc.getBuffer().length - cc.getEnd());\nSystem.out.println(cc);\n</code>\n\nIf the B2CConverter was recycled with everything else in Request this would prevent a previous request from corrupting the next request but it doesn't fix the issue that a character is dropped from the initial decode.\n\nI tried playing with B2CConverter and the only way I could get the convert to get everything was by ignoring the limit argument and reading to the end of the stream. It looks like tomcat8 is moving in this direction with the move to NIO, however I tried playing with the latest B2CConverter and was still seeing issues with the given byte sequence.", "id": 165448, "time": "2013-02-22T20:06:36Z", "creator": "apache@neworld.us", "creation_time": "2013-02-22T20:06:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 54602, "is_private": false, "text": "I do see code that is meant to recycle the converter. Do you have a test case / can you write a Tomcat unit test that demonstrates that the converter isn't being recycled?\n\nIncomplete byte sequences should result in a 400 response. I'll take a look at why this isn't happening.", "id": 165524, "time": "2013-02-28T01:17:25Z", "creator": "markt@apache.org", "creation_time": "2013-02-28T01:17:25Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 54602, "is_private": false, "text": "Part of the problem here is that the UTF-8 decoder should reject bytes 5-8 as an invalid sequence but doesn't. That is a JVM bug that needs to be reported to Oracle.\n\nGiven the widespread use of UTF-8 I suspect we'll need to look at using the stricter UTF-8 decoder we use in WebSocket more widely.\n\nA second issue (that doesn't affect this report) is that the leftover byte array is not big enough for the decoders available in the JRE.", "id": 165551, "time": "2013-02-28T17:17:10Z", "creator": "markt@apache.org", "creation_time": "2013-02-28T17:17:10Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 54602, "text": "InputStreamReader defaults to replacement characters so it won't reject those characters just replace them with the replacement.\n\nThe underlying InputStreamReader holds on to those remaining bytes because it is waiting for the last byte or end of stream but because B2CCoverter doesn't try to read any more it never sees the the end of stream.\n\nIf B2CConver was changed to just read until ReadConvertor returned -1 then the bytes wouldn't be left behind and the those last 4 bytes would be replaced with the replacement character.\n\nIf you want invalid UTF-8 to be rejected you would have to update the constructor of ReadConvertor to call super which takes a CharsetDecoder which uses CodingErrorAction.REPORT, but that is a much bigger change.\n\nI'll work on the test at some point, but I don't have the time currently to get that working.", "count": 3, "id": 165552, "time": "2013-02-28T17:40:06Z", "creator": "apache@neworld.us", "creation_time": "2013-02-28T17:40:06Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 165557, "time": "2013-02-28T23:36:04Z", "bug_id": 54602, "creation_time": "2013-02-28T23:36:04Z", "is_private": false, "text": "The original report was about URI processing. Now you are talking about request bodies.\n\nThere are multiple issues here. So far I have found / suspect:\na) Invalid sequences are not rejected quickly enough\nb) Partial sequences are not rejected\nc) There is no mechanism for a client of the API to indicate input is complete\nd) The storage for bytes left over between calls is not bug enough for all charsets\ne) Leftover bytes may remain between requests\n\na) is a JVM bug that we can work-around\nb) is a consequence of c)\nc) is now fixed in trunk but the callers of the API need to be reviewed\nd) is fixed in trunk\ne) needs further investigation\n\nAlso, the handling of incomplete/partial data may need to be different for URIs and request bodies. There is an argument for request bodies to be more tolerant."}, {"attachment_id": null, "tags": [], "bug_id": 54602, "text": "Where do you think I started talking about request bodies?\n\norg.apache.catalina.connector.Request uses a B2CConverter for URIDecoding the variable is called URIConverter. B2CConverter uses ReadConverter, which is a very thin wrapper around InputStreamReader, to do its conversions.InputStreamReader when constructed with just a Charset, like ReadConverter does, calls StreamDecoder.forInputStreamReader() to construct a StreamDecoder. StreamDecoder when not constructed with a CharsetDecoder uses CodingErrorAction.REPLACE for both malformed input and unmappable characters.", "count": 5, "id": 165558, "time": "2013-03-01T00:37:47Z", "creator": "apache@neworld.us", "creation_time": "2013-03-01T00:37:47Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 54602, "text": "Yes, this is confusing to you probably. Your problem with URI processing and trunk was that I forgot to port a call to recycle, which likely caused a problem there [and you can ignore the rest, it doesn't concern you]. As for non trunk, the code is really a bit hopeless IMO.\n\nMark doesn't know the new bit of code in trunk, so that's what he's looking into, and he's apparently busy trying to convince himself it needs tons of improvements. Actually, only d) looks real (and nobody complained so far about it, not enough creative encoding use I guess). I found trying to deal with end of input, for example, does not add any value. That's why there's a isUnderflow flag, it will do the same thing in a more generic way.", "count": 6, "id": 165564, "time": "2013-03-01T09:54:54Z", "creator": "remm@apache.org", "creation_time": "2013-03-01T09:54:54Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 54602, "attachment_id": null, "text": "(In reply to comment #5)\n> Where do you think I started talking about request bodies?\n\nSorry about the confusion. You were looking at 7.0.x and I was looking at trunk. When you mentioned an InputStream I started thinking request body as trunk doesn't use a Writer to do the conversion.\n\nTo Remy's point, I think there are a handful of bugs, inconsistences and potential improvements in both trunk and 7.0.x and there are likely to be differences between the two branches. Exactly what is a bug and what is an improvement is somewhat academic as I intend to address all of them.\n\nMy plan is to write some more test cases for trunk, get them to pass in trunk, back-port the tests to 7.0.x and then get the tests passing in 7.0.x.", "id": 165572, "time": "2013-03-01T16:37:08Z", "creator": "markt@apache.org", "creation_time": "2013-03-01T16:37:08Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 54602, "attachment_id": null, "text": "Thanks again for this bug report. It promoted me to take a much closer look at UTF-8 decoding and I found a number of edge cases in both URI processing and request body processing.\n\ntrunk is now using the Apache Harmony based UTF-8 decoder for all UTF-8 bytes to chars conversion including URIs and request bodies. The test cases have also been expanded considerably.\n\nThe next step is to copy the test cases to 7.0.x and then review. I suspect the fix will involve porting Remy's new B2CConverter to 7.0.x.", "id": 165645, "time": "2013-03-05T10:23:59Z", "creator": "markt@apache.org", "creation_time": "2013-03-05T10:23:59Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 54602, "attachment_id": null, "text": "I have ported Remy's improved converter to 7.0.x and have also switched to the new UTF-8 decoder. The test cases have also been ported and all pass.", "id": 165651, "time": "2013-03-05T14:05:47Z", "creator": "markt@apache.org", "creation_time": "2013-03-05T14:05:47Z", "is_private": false}]
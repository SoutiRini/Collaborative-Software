[{"count": 0, "tags": [], "creator": "oliver.henning@aloba.ch", "attachment_id": null, "is_private": false, "id": 82865, "time": "2005-11-25T13:40:31Z", "bug_id": 37637, "creation_time": "2005-11-25T13:40:31Z", "text": "org/apache/poi/hssf/dev/HSSF.java\norg/apache/poi/hssf/record/TickRecord.java\n------------------------------------------\nThere is a typo. Original code has the following semantic:\n\tthis.filename = filename\n\tthis.field_12_zero5 = field_12_zero5 //resp.\n\nwhich is (in these methods) equal to:\n\tthis.filename = this.filename\n\tthis.field_12_zero5 = this.field_12_zero5 //resp.\n\t\nThis makes no sense\n\n\n\norg/apache/poi/hssf/model/Sheet.java\n------------------------------------\n1. The often called method 'addValueRecord' creates a lot of garbage\n   int[] Objects. They are needed just for debug-Tracing. I surrounded\n   it with a standard 'if(Logger.isDebugEnabled...)'\n   \n2. The columns.getIterator() is expensive, as it always generates a\n   Garbage-Object (the Iterator itself). A small refactoring to an\n   Array-Loop with index speeds up POI.\n   \n\n\norg/apache/poi/hssf/record/aggregates/ColumnInfoRecordsAggregate.java\n---------------------------------------------------------------------\nsee description for 'org/apache/poi/hssf/model/Sheet.java', point 2.\n\n\n\norg/apache/poi/hssf/record/RowRecord.java\norg/apache/poi/hssf/record/UnicodeString.java\n---------------------------------------------\nAll the BitField-Helper-Objects can be static, as they are invariant.\nThe idea to reduce garbage with the BitFieldFactory.getInstance(...)\nis good, but there also be an Garbage-Object: An java.lang.Integer\nto lookup the cache-Map.\n\n\n\norg/apache/poi/hssf/record/aggregates/ValueRecordsAggregate.java\n----------------------------------------------------------------\nI changed the 'backing collection' from TreeMap to a 2-dimensional\nArray of CellValueRecordInterface.\n\nThe TreeMap is pretty expensive, as every entry needs a TreeMap.Entry\nObject. We produce much less Garbage-Objects with this implementation.\n\n\norg/apache/poi/hssf/usermodel/DummyGraphics2d.java\n--------------------------------------------------\nEclipse means that there should be an explicit call of 'toString'\nfor arrays. Was not really a bug.\n\norg/apache/poi/hssf/usermodel/HSSFCell.java\n-------------------------------------------\nThe idea of this change is to not have redundant Values in the\nHSSFCell-Object an the corresponding CellValueRecord. Especially\nthe following Attributes in HSSFCell have been removed:\n cellNum \t(=column-Number)\n cellStyle\t(=Style-Index)\n cellValue\t(=value if Cell is Numeric)\n booleanValue\t(=dito if Cell is Boolean)\n errorValue\t(=dito if....)\n rot\t\t(=row Number)\n \nAccess to these values is now delegated to the underlying\nCellValueRecord.\n\n\nAll together we gain speed and save heap. An Example where 50*1000\nCells (25'000 Strings + 25'000 Numerics) were generated and then written\nvia a byte[] to a file:\n\nBefore: 1000ms, over 600'000 Objects (mostly Garbage), 22MB Heap-usage\nAfter :  370ms,      210'000 Objects (70'000 Garbage), 12MB Heap-usage\n\nI hope that you can use some of these optimizations.\nGreetings,\nOliver Henning\naloba ag\nSwitzerland"}, {"count": 1, "tags": [], "bug_id": 37637, "attachment_id": 17042, "text": "Created attachment 17042\nPatch-file", "id": 82866, "time": "2005-11-25T13:41:38Z", "creator": "oliver.henning@aloba.ch", "creation_time": "2005-11-25T13:41:38Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 37637, "text": "Oliver,\n\nWow this all looks really good, and something that i have been wanting to look\nat getting arround to.\n\nOne idea that i had also was that the HSSFRow, HSSFCell objects are kept but for\nmost applications we basically create a row, some cells and then move onto the\nnext row and repeat. All of the HSSFRow & HSSFCell objects from the previous row\ncould therefore be garbage collected if they could be re-created from the\nlow-level objects as required. Ok this results in alot of garbage, but in a\nserver environment this would lower the overall memory consumption with a bit of\nprocessor gc increase. If there was a switch to determine whether the user model\nobjects could be created on-demand then that woudl be grand.\n\nMaybe someone will look at this before i have the chance. hint hint!\n\nIn the mean time ill look at commiting the patch.\n\nJason", "id": 83691, "time": "2005-12-15T11:33:00Z", "creator": "jheight@apache.org", "creation_time": "2005-12-15T11:33:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 37637, "is_private": false, "text": "Sal\u00fc Jason\n\nGood Idea, but quite a big thing to implement, hm?\n\nBut there is still potential in the existing model:\n1) HSSFRichTextString in HSSFCell is still a 'duplicate' of the low-level-record.\n   This Class is new (compared to poi-2.5.1-final-20040804) and pretty\n   heavy-weight compared to the 'good old string' in POI-2.5.1. Perhaps there\n   could be both models and the user decides whether he can use the one (fast\n   string) or the other (rich text)\n\n2) The method HSSFRow.createCell(short column, int type) is deprecated (but I\n   don't know why). You should always use the 'simpler' method\n   HSSFRow.createCell(short column) which constructs a 'blank-record'. This\n   record normally becomes garbage with the next call to cell.setCellValue(...).\n   It is much more efficient if you say directly at 'createCell' which\n   type of cell you need. So why not remove the '@deprecated'?\n   \n3) It could be possible to remove the attribute \"int cellType\" from HSSFCell.\n   This is redundant, as you can identify the type also with\n   \"record instanceof XXX\"\n   \nAnd finally, for short: we like POI ;-)\n\nGreetings, Oli\n", "id": 83739, "time": "2005-12-16T10:12:57Z", "creator": "oliver.henning@aloba.ch", "creation_time": "2005-12-16T10:12:57Z", "attachment_id": null}, {"id": 84144, "tags": [], "bug_id": 37637, "is_private": false, "count": 4, "text": "Patch applied to SVN. Needed modifications so that the unit tests would pass.\n\nOliver looking forward to more Performance patches ;-)\n\nJason", "time": "2006-01-03T08:27:12Z", "creator": "jheight@apache.org", "creation_time": "2006-01-03T08:27:12Z", "attachment_id": null}]
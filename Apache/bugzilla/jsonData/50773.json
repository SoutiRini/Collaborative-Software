[{"count": 0, "tags": [], "bug_id": 50773, "is_private": false, "text": "Created attachment 26653\nPatch for httpd 2.2.17\n\nI have a database corruption (with error 500) if I do the following :\n   - lock a collection with DEPTH Infinity and a Timeout (exemple 20 seconds) (the collection must have sub collections) : exemple : LOCK /myCollection/\n   - Put a file in an existing sub collection of the locked collection (using a If header) : exemple : PUT /myCollection/mySubCollection/file.txt\n   - Wait until the lock timeout is elapsed\n   - lock again the collection : exemple LOCK /myCollection/\n       => there we get an error 500\n\n\nIt's seem that the bug is comming from method dav_fs_get_locks in file modules/dav/fs/lock.c. When the lock is applicated to the new file (inherited from parent), the timeout is setted to 0 (because of partial request). Then when trying to lock again, the indirect lock of the file seem to be valid (no timeout) but the direct lock related is not.\n\nI looked for a correction in httpd 2.2.17 (just by reading the sources) and I didn't found any.\n\nWhen I change the sources like the patch in attachement, I have no error 500 any more.", "id": 144262, "time": "2011-02-14T12:10:20Z", "creator": "samuel.gallacier@innes.fr", "creation_time": "2011-02-14T12:10:20Z", "attachment_id": 26653}, {"count": 1, "tags": [], "text": "I can confirm that the corruption is easily reproducible when using apache dav along with a git repository. The issue easily appears when doing large commits witch take larger than usual amounts of time to process.", "is_private": false, "id": 146005, "creator": "time_spanned_soul@yahoo.com", "time": "2011-04-26T08:56:53Z", "bug_id": 50773, "creation_time": "2011-04-26T08:56:53Z", "attachment_id": null}, {"count": 2, "text": "Created attachment 30204\nperl script that demonstrates the bug", "bug_id": 50773, "attachment_id": 30204, "id": 166669, "time": "2013-04-17T01:57:58Z", "creator": "wiml@omnigroup.com", "creation_time": "2013-04-17T01:57:58Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 50773, "attachment_id": null, "is_private": false, "id": 166670, "time": "2013-04-17T02:00:27Z", "creator": "wiml@omnigroup.com", "creation_time": "2013-04-17T02:00:27Z", "text": "I can confirm that 2.4.4 still has this bug (I was hitting it fairly often in 2.2.2x as well). The following messages show up in the error log:\n\n[Tue Apr 16 18:51:16.453337 2013] [dav:error] [pid 7513] [client 10.4.3.72:53942] Could not LOCK /wiml/bugzilla50773/dirA/ due to a failed precondition (e.g. other locks).  [500, #0]\n[Tue Apr 16 18:51:16.453347 2013] [dav:error] [pid 7513] [client 10.4.3.72:53942] The locks could not be queried for verification against a possible \"If:\" header.  [500, #0]\n[Tue Apr 16 18:51:16.453353 2013] [dav:error] [pid 7513] [client 10.4.3.72:53942] The lock database was found to be corrupt. An indirect lock's direct lock could not be found.  [500, #402]\n\nI've attached a simple perl script that causes the bug (it just follows the steps outlined in samuel.gallacier's comment)."}, {"attachment_id": null, "tags": [], "bug_id": 50773, "text": "Apache trunk/2.5 r1470659 also still has this bug (the lock database is corrupted, although Apache does not necessarily crash any more)", "count": 4, "id": 166768, "time": "2013-04-22T22:16:31Z", "creator": "wiml@omnigroup.com", "creation_time": "2013-04-22T22:16:31Z", "is_private": false}, {"count": 5, "text": "I have modified the patch so that it applies to trunk as follows, can you verify this fixes it for you?\n\nIndex: modules/dav/lock/locks.c\n===================================================================\n--- modules/dav/lock/locks.c\t(revision 1476625)\n+++ modules/dav/lock/locks.c\t(working copy)\n@@ -646,7 +646,8 @@\n             ip->key.dptr = apr_pmemdup(p, val.dptr + offset, ip->key.dsize);\n             offset += ip->key.dsize;\n \n-            if (!dav_generic_lock_expired(ip->timeout)) {\n+            if (!dav_generic_lock_expired(ip->timeout)\n+                    && dav_dbm_exists(lockdb->info->db, ip->key)) {\n                 ip->next = *indirect;\n                 *indirect = ip;\n             }\n@@ -847,6 +848,7 @@\n         else {\n             /* DAV_GETLOCKS_PARTIAL */\n             newlock->rectype = DAV_LOCKREC_INDIRECT_PARTIAL;\n+            newlock->timeout = ip->timeout;\n         }\n \n         /* hook into the result list */", "bug_id": 50773, "is_private": false, "id": 166888, "time": "2013-04-27T17:20:58Z", "creator": "minfrin@sharp.fm", "creation_time": "2013-04-27T17:20:58Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 50773, "is_private": false, "count": 6, "id": 166958, "time": "2013-04-30T12:17:49Z", "creator": "minfrin@sharp.fm", "creation_time": "2013-04-30T12:17:49Z", "text": "Would it be possible to port the existing bugfix to httpd-trunk?\n\nAll bugfixes must be made to trunk before being considered for backport to v2.4 or 2.2."}, {"count": 7, "tags": [], "bug_id": 50773, "attachment_id": 32557, "id": 181659, "time": "2015-03-11T01:30:56Z", "creator": "wiml@omnigroup.com", "creation_time": "2015-03-11T01:30:56Z", "is_private": false, "text": "Created attachment 32557\nPatch for httpd 2.5.x-dev r1665752\n\n(In reply to Graham Leggett from comment #5)\n> I have modified the patch so that it applies to trunk as follows, can you\n> verify this fixes it for you?\n\nThis change works if I apply it to the implementation in modules/dav/fs/lock.c instead of (or in addition to) modules/dav/lock/locks.c --- there seem to be two nearly-identical copies of that code.\n\nOn the assumption that both copies have the equivalent bug, I've attached a patch against trunk based on yours / Samuel Gallacier's. This fixes the bug, at least as far as the perl-script testcase can tell."}]
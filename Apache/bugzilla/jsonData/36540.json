[{"count": 0, "tags": [], "creator": "bachhube@fmi.uni-passau.de", "text": "If I understand it correctly, the pooled replication should ensure the\navailability of the session on all cluster nodes as soon as the request is\nfinished. It doesn't seem to do that with the following test-case:\n\nThe attached simple webapp (clustertest.war) just prints the content of the\nsession entry \"host\" and then stores its hostname in that entry. \n\nThis webapp is installed on 2 tomcat 5.5.11's, tomcat1 and tomcat2, and mod_jk\nis used as a load balancer, sticky sessions are disabled. (Config files are\nattached).\n\nA JMeter 2.1 Test Plan is used to make requests. It repeatedly makes requests to\nthe webapp, waiting 20ms between the requests.\n\nExpected behaviour:\nThe first request yields null, and subsequent ones return tomcat1, then tomcat2,\ntomcat1, tomcat2 and so on. \n\nActual behaviour:\nSeveral requests return null, and the rest is not exactly alternating. \n\nIn this test case, it stabilized when waiting like 50ms between the requests,\nbut on other webapps with larger sessions, it needed a lot more time. This is\nquite serious since correctness is not ensured when not using sticky sessions.", "id": 79508, "time": "2005-09-07T12:40:44Z", "bug_id": 36540, "creation_time": "2005-09-07T12:40:44Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": 16329, "bug_id": 36540, "is_private": false, "id": 79509, "time": "2005-09-07T12:42:15Z", "creator": "bachhube@fmi.uni-passau.de", "creation_time": "2005-09-07T12:42:15Z", "tags": [], "text": "Created attachment 16329\nthe test case and config files"}, {"count": 2, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 79511, "creation_time": "2005-09-07T12:48:54Z", "time": "2005-09-07T12:48:54Z", "bug_id": 36540, "text": "How about not filing a bug ? It should be evident sticky sessions are mandatory,\nor you're going to run into problems.", "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "is_private": false, "id": 79515, "creation_time": "2005-09-07T13:21:42Z", "time": "2005-09-07T13:21:42Z", "bug_id": 36540, "text": "*** Bug 36542 has been marked as a duplicate of this bug. ***", "attachment_id": null}, {"count": 4, "tags": [], "creator": "bachhube@fmi.uni-passau.de", "text": "I did some further testing, and my test case works as expected with tomcat 5.5.9\nwithout the cluster fix pack (Bug 34389) So you have a regression there, which\nshould be fixed. Anyway, this bug isn't INVALID, it's either a bug, or a\nWONTFIX, so I reopen it. But you should really fix that, since many load\nbalancers don't support tomcat's sticky sessions.", "id": 79712, "time": "2005-09-09T10:48:34Z", "bug_id": 36540, "creation_time": "2005-09-09T10:48:34Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "pr@objektpark.de", "text": "As Remy tell you, sticky session is mandatory that\ntomcat clustering works. Clustering is a fallback mechanism.\n\nPeter", "id": 80087, "time": "2005-09-18T10:36:37Z", "bug_id": 36540, "creation_time": "2005-09-18T10:36:37Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 36540, "text": "I don't agree with that at all, sticky sessions is a great benefit, but pooled\nsynchronized cluster should be working.\n\nat least it was in the good ol' days :)\n\nPeter, do you know what changed in the \"cluster fix pack\" that made the synch\nnot work properly anymore?\n\nFilip", "id": 80144, "time": "2005-09-19T23:57:48Z", "creator": "fhanik@apache.org", "creation_time": "2005-09-19T23:57:48Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "(In reply to comment #6)\n> I don't agree with that at all, sticky sessions is a great benefit, but pooled\n> synchronized cluster should be working.\n> \n> at least it was in the good ol' days :)\n\nNo, it never was: the request might be complete from a HTTP standpoint while the\nservlet is still running (= the client might send the next request, while the\nreplication hasn't been done yet). Besides, the spec requires that all\nconcurrent requests which belong to the same session be processed by the same host.\n\nNon sticky sessions is broken for many cases, period. I'll let you close this as\nINVALID again.", "id": 80146, "time": "2005-09-20T00:11:37Z", "bug_id": 36540, "creation_time": "2005-09-20T00:11:37Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 36540, "is_private": false, "id": 80147, "time": "2005-09-20T00:26:05Z", "creator": "fhanik@apache.org", "creation_time": "2005-09-20T00:26:05Z", "tags": [], "text": ">No, it never was: the request might be complete from a HTTP standpoint while the\n>servlet is still running (= the client might send the next request, while the\n>replication hasn't been done yet).\n\nyes, this scenario has never been supported. that is correct.\nBut single thread client synchronization has always worked.\n\nChristoph, if the scenario that you have is a single client thread per session,\nthen let us know, otherwise we will close this bug.\n"}, {"count": 9, "attachment_id": null, "bug_id": 36540, "text": "(In reply to comment #8)\n> yes, this scenario has never been supported. that is correct.\n> But single thread client synchronization has always worked.\n\nYes, many webapps would work very well with this mode, while some others would not.\n\nFor this situation, taking several ms to replicate doesn't seem particularly\nbroken to me, although I suppose the 5.5.10 changelog is quite long.\n", "id": 80148, "time": "2005-09-20T00:35:42Z", "creator": "remm@apache.org", "creation_time": "2005-09-20T00:35:42Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "bachhube@fmi.uni-passau.de", "text": "(In reply to comment #9)\n> Christoph, if the scenario that you have is a single client thread per session,\n> then let us know, otherwise we will close this bug.\n\nMy Test Case above is actually quite simple. A single JMeter thread runs\nsubsequent requests on a cluster of 2 Tomcat servers. A jk load balancer without\nsticky sessions (for testing only) does the distribution. The jsp page just\nstores the hostname of the tomcat server in the session. No fancy\nmulti-threading or anything. TC 5.5.9 handles the situation correctly and\nreplicates the session before finishing the http request. 5.5.11 does not. So\npooled replication in definitely broken.\n\nPlease either fix it or document that it's broken. If you should choose not to\nfix it, pooled, synchronous and asynchronous replication modes are basically\nuseless and should be removed. \n\nThanks for pointing out that the servlet specs (SRV.7.7.2) state that \"Within an\napplication marked as distributable, all requests that are part of a session\nmust be handled by one Java Virtual Machine1 ( JVM ) at a time.\"  But in my\nopinion that means that when the requests are finished, the session state should\nalready be replicated on all other cluster members. A Session with a single 7\nchar String object seems to need about 20 ms to replicate in my setup. Busy\nservers with large Sessions may get into some hundreds of ms and this is a\nproblem for me.\n\nBye,\nChristoph", "id": 80203, "time": "2005-09-20T19:36:47Z", "bug_id": 36540, "creation_time": "2005-09-20T19:36:47Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 36540, "text": "Its been a while since I ran my test cases, but I will do it again", "id": 80265, "attachment_id": null, "creator": "fhanik@apache.org", "creation_time": "2005-09-21T13:42:21Z", "time": "2005-09-21T13:42:21Z", "is_private": false}, {"count": 12, "tags": [], "creator": "pr@objektpark.de", "is_private": false, "text": "The differenc between 5.5.9 and 5.5.11 is that waitForAck is on default false\nfor all sender modes. \nCan you check with this config:\n            <Sender\n                className=\"org.apache.catalina.cluster.tcp.ReplicationTransmitter\"\n                replicationMode=\"pooled\"\n                waitForAck=\"true\"\n                doTransmitterProcessingStats=\"true\"\n                doProcessingStats=\"true\"\n                doWaitAckStats=\"true\"\n                ackTimeout=\"15000\"/>\n\nthanks\nPeter", "id": 80386, "time": "2005-09-23T17:37:40Z", "bug_id": 36540, "creation_time": "2005-09-23T17:37:40Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "fhanik@apache.org", "text": "I would argue the ackTimeout=15000 should be an indicator that wait for ack =true,\ndo you really need two flags to say the same thing?\nTo simplify the implementation, I would use the following logic, and remove the\n\"waitForAck\" flag all together.\n\nackTimeout > 0 - wait for ack true, and time out set\nackTimeout = 0 - wait for ack false\nackTimeout = -1 - wait for ack true, no timeout", "id": 80656, "time": "2005-09-30T23:56:45Z", "bug_id": 36540, "creation_time": "2005-09-30T23:56:45Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "creator": "bachhube@fmi.uni-passau.de", "text": "(In reply to comment #12)\n> The differenc between 5.5.9 and 5.5.11 is that waitForAck is on default false\n> for all sender modes. \n> Can you check with this config:\n<snip>\n\nThe waitForAck was my problem indeed. Thanks you very much for pointing out. \n\nBut now I'm a bit confused about the difference between pooled and\nfastasyncqueue cluster replication really is. The docs state \"synchronous\nreplication guarantees the session to be replicated before the request returns.\"\nBut obviousely waitForAck is the controlling setting. Isn't it best to just\nignore the waitForAck setting and have it set false for fastasyncqueue and true\nfor pooled? \n\nThe docs also state that \"Asynchronous replication, should be used if you have\nsticky sessions until fail over\", which implies that pooled should be used else.\nBut as this bug report turned out, sticky sessions are mandatory for correct\nclustering. Maybe you should change the docs accordingly (This should go into\nanother bug report imo, but my bug 36542 was resolved as duplicate)\n\nThanks, \nChristoph\n\n", "id": 80736, "time": "2005-10-04T14:13:33Z", "bug_id": 36540, "creation_time": "2005-10-04T14:13:33Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "id": 80757, "creation_time": "2005-10-04T21:01:50Z", "time": "2005-10-04T21:01:50Z", "bug_id": 36540, "text": "synchronous: send each session change to other cluster members before returning\nresponse to client.\n\nasychronous: same as synchronous, but use mutiple sender connections (use any\none, that is not currently busy).\n\nfastasync: put session change message into local queue and then return response\nto client. A seperate thread waits for messages coming into the queue and then\nsend the messages to the other cluster members.\n\nwaitforack: when ending the message, wait for an ACK type answering message from\nthe other cluster members before proceeding (make sending the messages more\nreliable).\n\nIf one needs exact synchronization: synchronous are pooled mode with waitforack.\nApplication gets into trouble, when replication gets stuck.\n\nIf one can live with some latency between changes on the primary node and their\nreplication to the other nodes and on the other hand the cluster should\ninfluence application performance and stability only very little: use session\nstickyness in load balancers combined with fastasync and no waitforack.\n\nsynchronous/pooled without waitforack: lower latency for replication, although\nsynchronization is not exact.\n\nfastasync with waitforack: decoupling replication from request/response but\nensuring that replication is checked for success.\n\nYou are right, we should make the docs more precise. The features are yet very\nnew and as usual documentation takes a while.", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 36540, "text": "Please (anyone involved in this issue) submit the doc enhancements you'd like to\nsee.  I'll be glad to quickly look at them and commit them for the next release.", "count": 16, "id": 83149, "time": "2005-12-02T16:55:50Z", "creator": "yoavs@computer.org", "creation_time": "2005-12-02T16:55:50Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 36540, "is_private": false, "count": 17, "id": 94560, "time": "2006-10-05T14:56:21Z", "creator": "markt@apache.org", "creation_time": "2006-10-05T14:56:21Z", "text": "Just marking as an enhancement."}, {"count": 18, "attachment_id": null, "bug_id": 36540, "text": "Discussion show it is a user list question not a bug.\n", "id": 106731, "time": "2007-08-14T01:23:52Z", "creator": "pr@objektpark.de", "creation_time": "2007-08-14T01:23:52Z", "tags": [], "is_private": false}]
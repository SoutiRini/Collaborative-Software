[{"attachment_id": null, "tags": [], "creator": "Nagendra.Raja@sun.com", "is_private": false, "count": 0, "id": 61520, "time": "2004-08-04T07:18:28Z", "bug_id": 30459, "creation_time": "2004-08-04T07:18:28Z", "text": "Not sure if I am trying to bring in Generic Language features in ant. Just \npassing on my thoughts to forum to decide if this makes sense.\n\nThis idea came to me while I was trying to compile huge number of c files, \nwhose compilation is very similar except for few arguments. For compiling the \nfiles \nI used the following code to compile the files\n\n<exec executable=\"${cc}\" dir=\"${storage.src}/\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} xyz.c -o ${cc.obj.dir}/../xyz.o\"/>\n</exec>\n<exec executable=\"${cc}\" dir=\"${storage.src}\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} -KPIC xyz.c -o \n${cc.obj.dir}/xyz.o\"/>\n\t</exec>\n\nThe first exec complies xyz.c file and places in one directory and the 2nd once \nalso compiles the same xyz.c with different compiler options and places it in a \ndifferent directory, which is one level up as the top one.\n\nIt would be very clumsy to write similar staments for all the c files which \nexist in multiple directories of the project, unless we have a way out define \nfunction like syntax in ant.  \n\n<FunctionCall name=\"compileC\">\n<arg name=\"cfile\" value=\"xyz\">\n<arg name=\"directory\" value=\"/opt/objs\"\n</FunctionCall>\n\n<Function name=\"compileC\" parms=\"cFile, directory\">\n<exec executable=\"${cc}\" dir=\"${directory}/\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} cfile.c -o \n${cc.obj.dir}/../cfile.o\"/>\n</exec>\n<exec executable=\"${cc}\" dir=\"${directory}\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} -KPIC file.c -o \n${cc.obj.dir}/cfile.o\"/>\n\t</exec>\n</Function>\n\nThis could be futher simiplified if in case for loop kind of syntax in place \n\nThe workaround for this to write a custom tag which does internally call the \nBuiltin tasks. But this is less portable and flexible.\n\nNot sure if this makes sense."}, {"count": 1, "tags": [], "text": "You should have a look at the new 1.6 tasks\n- presetdef\n- macrodef\n- scriptdef", "is_private": false, "id": 61521, "creation_time": "2004-08-04T07:32:29Z", "time": "2004-08-04T07:32:29Z", "creator": "jan@materne.de", "bug_id": 30459, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 30459, "attachment_id": null, "id": 61531, "creation_time": "2004-08-04T09:41:19Z", "time": "2004-08-04T09:41:19Z", "creator": "stevel@apache.org", "text": "More to the point, if I wanted to compile c++ code, I'd go use the <cc> task on\nant-contrib.sf.net \n\nIt does dependencies and the like, and is very, very powerful.", "is_private": false}, {"count": 3, "tags": [], "creator": "Nagendra.Raja@sun.com", "attachment_id": null, "id": 62060, "time": "2004-08-17T07:16:53Z", "bug_id": 30459, "creation_time": "2004-08-17T07:16:53Z", "is_private": false, "text": "The close match to this is presetdef. But even here how do I pass some of the \nparams such as ${cc.arg.line.prefix} as shown in the example, rather than using \nthe <proprty> tag and calling this defination.  ${cc.arg.line.prefix} is \n<b>part<b> of line value. \n\n"}, {"count": 4, "tags": [], "creator": "Nagendra.Raja@sun.com", "attachment_id": null, "is_private": false, "id": 62061, "time": "2004-08-17T07:27:10Z", "bug_id": 30459, "creation_time": "2004-08-17T07:27:10Z", "text": "On some more digging on this, I found that there is only one nessted element is \nsupported. \n\n <presetdef name=\"abc.cc\">\n\t<exec executable=\"${cc}\" dir=\"${dir.src}\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} -KPIC ${fileName}.c -o \n${cc.obj.dir}/${fileName}.o\"/>\n\t</exec>\n\n\t<exec executable=\"${cc}\" dir=\"${dir.src}\" failonerror=\"true\">\n\t    <arg line=\"${cc.arg.line.prefix} ${fileName}.c -o ${cc.obj.dir}/../\n${fileName}.o\"/>\n\t</exec>\n    </presetdef> "}, {"attachment_id": null, "tags": [], "creator": "Nagendra.Raja@sun.com", "is_private": false, "count": 5, "id": 62062, "time": "2004-08-17T07:50:33Z", "bug_id": 30459, "creation_time": "2004-08-17T07:50:33Z", "text": "I could successfully use macrodef for the said requirment. Thanks \njan@materne.de for pointing out."}]
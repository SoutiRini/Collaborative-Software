[{"count": 0, "tags": [], "bug_id": 54571, "text": "Created attachment 29958\nA werid http stream which has no http header in response\n\nOS: Linux hostname 2.6.32-279.11.1.el6.x86_64 #1 SMP Sat Sep 22 07:10:26 EDT 2012 x86_64 x86_64 x86_64 GNU/Linux\n\nI have a servlet which post the comet event to other thread for further handling, there is no synchronize mechanism between this handling thread the servlet.\nAnd I have a simple python script as a client for testing, it act as a client:\n1. make a connection to the servlet\n2. send http request and check the response\n3. close the connection\nAfter  some long sequence of test above, I got a bizarre response with header Transfer-Encoding: chunked.\n\nThe demo code is as following\n[code][filename]TestServlet.java[/filename]\nimport javax.servlet.ServletException;\nimport java.io.PrintWriter;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport org.apache.catalina.CometEvent;\nimport org.apache.catalina.CometEvent.EventSubType;\nimport org.apache.catalina.CometProcessor;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class TestServlet extends HttpServlet implements CometProcessor {\n\tstatic String response1=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n\tstatic String response2=\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";\n\t\n\tprotected ThreadModule fRunner=null;\n\tpublic void init() throws ServletException {\n\t\tfRunner=new ThreadModule();\n\t\tThread runningThread=new Thread(fRunner,\"test\");\n\t\trunningThread.setDaemon(true);\n\t\trunningThread.start();\n\t}\n\tpublic void event(CometEvent event)   throws IOException, ServletException {\n    HttpServletRequest request = event.getHttpServletRequest();\n    HttpServletResponse response = event.getHttpServletResponse();\n    if (event.getEventType() == CometEvent.EventType.BEGIN) {\n        //log(\"Begin for session: \" + request.getSession(true).getId());\n        if (request.getContentLength() <= 0){\n        \tString uri = request.getRequestURI();\n        \tif (uri.contains(\"HELLO\")) {\n        \t\tfRunner.PostMessage(new ThreadMessage(1,response));\n        \t}\n        \telse if (uri.contains(\"WORLD\")){\n        \t\tfRunner.PostMessage(new ThreadMessage(2,response));\n        \t}\n        \telse if (uri.contains(\"SAD\")){\n        \t\tfRunner.PostMessage(new ThreadMessage(3,response));\n        \t}\n        \telse{\n        \t\tfRunner.PostMessage(new ThreadMessage(4,response));\n        \t}\n        }\n    } else if (event.getEventType() == CometEvent.EventType.ERROR) {\n        //log(\"Error for session: \" + request.getSession(true).getId());\n        event.close();\n    } else if (event.getEventType() == CometEvent.EventType.END) {\n        //log(\"End for session: \" + request.getSession(true).getId());\n        event.close();\n    } else if (event.getEventType() == CometEvent.EventType.READ) {\n        \n    }\n  }\n  public class ThreadMessage {\n\t  public int resType;\n\t  public HttpServletResponse response;\n\t  public ThreadMessage(int inresType, HttpServletResponse inresponse){\n\t\t  this.resType=inresType;\n\t\t  this.response=inresponse;\n\t  }\n  }\n  public class ThreadModule implements Runnable {\n\t  protected LinkedBlockingQueue<ThreadMessage> queue = new LinkedBlockingQueue<ThreadMessage>();\n\t  protected Object waitObject = new Object();\n\t  public ThreadModule(){\n\t\t  \n\t  }\n\t  public void PostMessage(ThreadMessage inMessage){\n\t\t  queue.offer(inMessage);\n          synchronized (waitObject) {\n          \twaitObject.notify();\n          }\n\t  }\n\t  public void HandleMessage(ThreadMessage inMessage){\n\t\t  try{\n\t\t  if (inMessage.resType == 1){\n\t\t\tinMessage.response.setStatus(200);\n      \t\tPrintWriter writer = inMessage.response.getWriter();\n      \t\twriter.write(response1);\n      \t\twriter.close();\n\t\t  }\n\t\t  else if (inMessage.resType == 2){\n\t\t\tinMessage.response.setStatus(404);\n      \t\tPrintWriter writer = inMessage.response.getWriter();\n      \t\twriter.write(\"\");\n      \t\twriter.close();  \n\t\t  }\n\t\t  else if (inMessage.resType == 3){\n\t\t\t\tinMessage.response.setStatus(307);\n\t      \t\tPrintWriter writer = inMessage.response.getWriter();\n\t      \t\twriter.write(response2);\n\t      \t\twriter.close();\n\t\t  }\n\t\t  else{\n\t\t\t  inMessage.response.setStatus(500);\n\t      \t\tPrintWriter writer = inMessage.response.getWriter();\n\t      \t\twriter.write(\"\");\n\t      \t\twriter.close();  \n\t\t  }\n\t\t  }\n\t\t  catch (Exception e) {\n\t\t\t  \n\t\t  }\n\t  }\n\t  public void run(){\n\t\t  while (true) {\n\t\t\t  try{\n\t\t\t  ThreadMessage tempmessage=null;\n\t\t\t  if (queue.isEmpty()) {\n\t\t\t\t  synchronized (waitObject) {\n\t\t\t\t\t\tif (queue.isEmpty()){\n\t\t\t\t\t\t\twaitObject.wait();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t  }\n\t\t\t  if (!queue.isEmpty()){\n\t\t\t\t  tempmessage = queue.poll();\n\t\t\t  }\n\t\t\t  if (tempmessage != null){\n\t\t\t\t  //sleep,if no sleep here, seems we got a race condition\n\t\t\t\t  //Thread.sleep(5);\n\t\t\t\t  HandleMessage(tempmessage);\n\t\t\t  }\n\t\t\t  }\n\t\t\t  catch (Exception e) {\n\t\t\t\t  \n\t\t\t  }\n\t\t  }\n\t  }\n  }\n}\n[/code]\nThe client testing code\n[code][filename]tempclient.py[/filename/\nimport httplib\nimport time\n\n\ncommonheaders = {\"Connection\":\"close\"}\n\ndef GetContent(addr, requesturl, expectcode, expectbody=None, notexpect=None):\n    data=None\n    try:\n        conn = httplib.HTTPConnection(addr)\n        conn.request(\"GET\", requesturl,'',commonheaders)\n        r1 = conn.getresponse()\n        rescode=r1.status\n        data=r1.read()\n        conn.close()\n    except Exception as exp_obj:\n        print \"connection fail, try again\"\n        print exp_obj\n        data=None\n\n    if data==None:\n        conn = httplib.HTTPConnection(addr)\n        conn.request(\"GET\", requesturl,'',commonheaders)\n        r1 = conn.getresponse()\n        rescode=r1.status\n        #print rescode\n        data=r1.read()\n        conn.close()\n\n    if rescode != expectcode:\n        raise Exception(\"Fail to get expectcode:\"+str(expectcode)+\",with:--\"+data)\n    if expectbody!=None and data.find(expectbody)== -1:\n        raise Exception(\"Fail to find:\"+expectbody+\",with:--\"+data)\n    if notexpect!=None and data.find(notexpect)!=-1:\n        raise Exception(\"Fail to not find:\"+notexpect+\",with:--\"+data)\n\n\nif __name__ == \"__main__\":\n    testhost=\"10.90.10.119:8080\"\n    starttime=time.time()\n    count=0\n    try:\n        for index in range(0,150000):\n            count=count+1\n            GetContent(testhost,\"/david/HelloWorld/HELLO\",200, \"aaaaaaaa\",'b')\n            GetContent(testhost,\"/david/HelloWorld/WORLD\",404, )\n            GetContent(testhost,\"/david/HelloWorld/SAD\",307,\"bbbbbbb\",'a')\n    finally:\n        endtime=time.time()\n        totaltime=int(endtime-starttime)\n        print \"count:\",count\n        print \"Time:\",totaltime\n\n\n[/code]\n\nI got lots of weird http streams, one of which is attached  \n\n\nI think that there is some race condition between the processing thread and the servlet/comet thread, because if I add some delay, e.g. Thread.sleep(5);, in the precessing thread, (which is commented in the code) no weird response found.\nAnd if the function for sending response is called direct in servlet thread,(totally remove the second thread) also no werid response found.", "id": 165288, "time": "2013-02-17T04:36:30Z", "creator": "david.f.wang@alcatel-lucent.com", "creation_time": "2013-02-17T04:36:30Z", "is_private": false, "attachment_id": 29958}, {"count": 1, "tags": [], "bug_id": 54571, "attachment_id": null, "id": 165289, "time": "2013-02-17T04:41:31Z", "creator": "david.f.wang@alcatel-lucent.com", "creation_time": "2013-02-17T04:41:31Z", "is_private": false, "text": "After  some long sequence of test above, I got a bizarre response with header Transfer-Encoding: chunked.\n===============\nSometimes the response has header, but the chunked body has size 0 indicating the end of the response\n\nAnd others times I got the weird response without any header as I atached"}, {"count": 2, "tags": [], "bug_id": 54571, "text": "This looks like an application problem.\n\nAs the Comet docs state, the Response object is not thread safe.\n\nBy using a separate thread to write to the response you have multiple threads (the original request processing thread and your processing thread) using the object at the same time. It is not surprising that strange behaviour is observed.", "id": 165359, "time": "2013-02-19T12:00:59Z", "creator": "markt@apache.org", "creation_time": "2013-02-19T12:00:59Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 54571, "text": "(In reply to comment #2)\n> This looks like an application problem.\n> \n> As the Comet docs state, the Response object is not thread safe.\n> \n> By using a separate thread to write to the response you have multiple\n> threads (the original request processing thread and your processing thread)\n> using the object at the same time. It is not surprising that strange\n> behaviour is observed.\n\nBut the demo code for comet on tomcat webpage has similar logic\nhttp://tomcat.apache.org/tomcat-6.0-doc/aio.html\n\nServelet thread:\n-----------------\nif (event.getEventType() == CometEvent.EventType.BEGIN) {\n            log(\"Begin for session: \" + request.getSession(true).getId());\n            PrintWriter writer = response.getWriter();\n            writer.println(\"<!doctype html public \\\"-//w3c//dtd html 4.0 transitional//en\\\">\");\n            writer.println(\"<head><title>JSP Chat</title></head><body bgcolor=\\\"#FFFFFF\\\">\");\n            writer.flush();\n            synchronized(connections) {\n                connections.add(response);\n            }\n\nOther thread:\n----------------\nfor (int i = 0; i < connections.size(); i++) {\n                        try {\n                            PrintWriter writer = connections.get(i).getWriter();\n                            for (int j = 0; j < pendingMessages.length; j++) {\n                                writer.println(pendingMessages[j] + \"<br>\");\n                            }\n                            writer.flush();\n                        } catch (IOException e) {\n                            log(\"IOExeption sending message\", e);\n                        }\n                    }", "id": 165360, "time": "2013-02-19T12:09:40Z", "creator": "david.f.wang@alcatel-lucent.com", "creation_time": "2013-02-19T12:09:40Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54571, "attachment_id": null, "id": 165368, "creation_time": "2013-02-19T14:02:27Z", "time": "2013-02-19T14:02:27Z", "creator": "markt@apache.org", "text": "Similar, but significantly different. The demo code uses flush() and does not close the writer on a different thread in the BEGIN event.\n\nSomething you might like to try is making the closed field in org.apache.catalina.connector.OutputBuffer volatile. If that fixes the issue we can look at including that change.", "is_private": false}, {"count": 5, "tags": [], "bug_id": 54571, "attachment_id": null, "id": 165397, "time": "2013-02-20T08:53:53Z", "creator": "david.f.wang@alcatel-lucent.com", "creation_time": "2013-02-20T08:53:53Z", "is_private": false, "text": "(In reply to comment #4)\n> Similar, but significantly different. The demo code uses flush() and does\n> not close the writer on a different thread in the BEGIN event.\n> \n> Something you might like to try is making the closed field in\n> org.apache.catalina.connector.OutputBuffer volatile. If that fixes the issue\n> we can look at including that change.\n\nThank you for your great support~!\n\nBut I have tried the solution above, it dose not work...."}]
[{"count": 0, "attachment_id": null, "bug_id": 46149, "text": "Currently the xslt task only allows writing to an outputstream. It should be more flexible to allow writing to a character-based output (writers). This is helpful especially when emulating a servlet program that calls the method transform and passes in a printwriter instead of an outputstream. Right now, using the same source xml and stylesheet, the xslt task generated html output is different from that of the generated output from a servlet program - the latter uses a printwriter.\n\nThe catch though is that the source xml contains some nordic(latin?) characters (\u00f8\u00e6\u00e5). In the generated html, within the script tag, the characters, were transformed into numeric characters entities when using the printwriter (servlet program). Using xslt task, the characters were rendered correctly because the outputstream is always used.", "id": 122200, "time": "2008-11-05T01:06:20Z", "creator": "shaunramos@gmail.com", "creation_time": "2008-11-05T01:06:20Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 46149, "text": "it really has to be an output stream because the transformer may decide to use an encoding different from the one used by your writer (this is what you see).\n\nI don't think the Ant task is well suited as a way to do general XSLT transformations, I'd use TraX directly, which isn't really more difficult than using the Ant API.\n\nI don't really see how you currently use the Ant API at all since it doesn't expose a method to write to a stream, but only to files - or am I missing something?\n\nHonestly, I think this is a WONTFIX case since it sounds as if you were trying to force Ant into doing things that it doesn't need to do - and your live would be much simpler of you chose a different approach.", "id": 123072, "time": "2008-12-04T01:44:37Z", "creator": "bodewig@apache.org", "creation_time": "2008-12-04T01:44:37Z", "is_private": false, "attachment_id": null}]
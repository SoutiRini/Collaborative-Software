[{"count": 0, "tags": [], "creator": "david.anderson@calixo.net", "text": "when used with a <Location> block, mod_dav extracts the argument to Location and\npasses it to inside handlers (namely, mod_dav_svn). This works well for Location\nblocks.\n\nHowever, if a LocationMatch is given with a complex regular expression, the\npassed path (the raw regexp) is not practically usable, and causes failures when\nhandlers expect this path to be valid.\n\nFor example, the following configuration causes Subversion to fail in\nmod_dav_svn because it doesn't strip the root_path handed down by mod_dav, due\nto it being a regular expression instead of the real matched path:\n\n<LocationMatch /svn(?=/[a-z]+)>\n  DAV svn\n  SvnParentPath /var/lib/svn\n</LocationMatch>\n\nmod_dav should do one of two things:\n - retrieve correct path information at runtime, if this is possible (ie.\ngetting the actual match LocationMatch found, instead of the expression)\n - offer a configuration directive to override this path with a static value.", "id": 75400, "time": "2005-05-26T06:56:41Z", "bug_id": 35077, "creation_time": "2005-05-26T06:56:41Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 35077, "attachment_id": null, "id": 75864, "creation_time": "2005-06-03T01:07:56Z", "time": "2005-06-03T01:07:56Z", "creator": "chip@force-elite.com", "text": "Is this really a bug in mod_dav, or just mod_dav_svn's handling of it?", "is_private": false}, {"count": 2, "tags": [], "bug_id": 35077, "is_private": false, "text": "As far as I can see, mod_dav_svn retrieves a root_dir parameter passed down by\nmod_dav, which is the Location root directory. Then it does no extra processing\nof this root_dir, and uses it to strip off the irrelevant parts of URIs,\nspecifically to work out what the repository name is, and what part of the URI\nis an intra-repository path.\n\nWhen the LocationMatch regexp is simple (ie. not actually a regexp at all, just\na plain pattern with no extra regexp markup, like <LocationMatch /svn>),\nmod_dav_svn successfully works out the repository name and everything goes well.\n\nHowever, if the regexp contains regexp markup, mod_dav_svn fails with an error\nindicating that it didn't strip the root path off the URIs: trying to open a\nrepository which has the name of the Location block directory, ie. 'svn' for\n/svn/reposname and <LocationMatch /svn(?=/[a-z]+)>. Given the code mod_dav_svn\nuses to strip the path, if the root_dir isn't a prefix in the full path, nothing\nis stripped at all. The full, raw regexp isn't a prefix in the actual URI, so\nnothing gets stripped and mod_dav_svn chokes trying to open the wrong repository\nname.\n\nIn the case I gave above, if mod_dav_svn had been given the string actually\nmatched by the regexp, rather than the full raw regexp, it would have resolved\nto root_dir being /svn (the lookahead assertion doesn't add text to the match),\nand the processing would have gone through as with <LocationMatch /svn>.\n\nThat is my rationale for pointing the finger at mod_dav rather than mod_dav_svn:\nas mod_dav is the one initially receiving the request through the handler, it\nshould imho clean up the information it passes to submodules, especially in\ncases where there isn't much to gain from passing raw, untreated data.\n\nOn the other hand, if it is considered interesting to pass a raw URI to\nmod_dav_svn, with the reasoning that it should then process it itself to remove\nthe excess information (does mod_dav_svn know the request is passed to it\nthrough a LocationMatch? I mean, would it have a way of knowing when to apply\nregex logic?), then there is implementation work needed in mod_dav_svn. Off the\ntop of my head though, I can't think of a good use of passing down regexps to\nsubmodules and leave processing of LocationMatch config to them.\n\nNow, I haven't looked into this much more than working out quickly where the\nproblem is likely to be by looking through the source code of mod_dav_svn. It\nmay be a problem with the information apache returns to mod_dav (I don't know\nhow this is handled in apache yet, so I'm more or less blind here), or maybe it\nis mod_dav_svn's task to strip out the excess info mod_dav provides. But\nhopefully this extra comment will somewhat explain the reasoning of my reporting\nthe bug to be with mod_dav.", "id": 75886, "time": "2005-06-03T01:53:14Z", "creator": "david.anderson@calixo.net", "creation_time": "2005-06-03T01:53:14Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 35077, "attachment_id": null, "id": 108429, "time": "2007-09-19T22:18:53Z", "creator": "colbykd@purdue.edu", "creation_time": "2007-09-19T22:18:53Z", "is_private": false, "text": "This issue perplexed me for quite some time trying to reconfigure our SVN\nrepositories before I realized the problem was simply the use of actual regex in\nLocationMatch.  In spite of this having been reported years ago, it took a lot\nof googling before I ran into this bug report.  It seems from reading this and\none other report of the same phenomenon I found\n(http://svn.haxx.se/users/archive-2004-07/0653.shtml), also from years ago, that\nthe nature of the problem is known.  Has this issue just been forgotten, or is\nit held up because changing this would cause other problems for other\nDAV-related modules or something?  This really seems a problem for SVN setup. \nWithout even basic regex markup like ^ and $, I'm not sure it's possible to\nallow SVN listing of the repository roots and/or avoid ambiguity in the\nLocationMatch patterns for multiple repository stanzas.\n\nJust wondering where this was or if anyone remembered it.  Thanks!"}, {"count": 4, "tags": [], "creator": "kevin.richter@uni-hildesheim.de", "attachment_id": null, "id": 138775, "time": "2010-07-30T14:41:19Z", "bug_id": 35077, "creation_time": "2010-07-30T14:41:19Z", "is_private": false, "text": "I have this bug, too.\nMy config: Apache 2.2.16, Subversion 1.6.12\n\n<LocationMatch \"^/\">\n  DAV svn\n  ...\n</LocationMatch>\n\nThe Apache log says then:\nInvalid URI in request PROPFIND %5E/NameOfRepository/!svn/vcc/somefile HTTP/1.1\nThe %5E is the \"^\" char in the LocationMatch.\n\nI found a posting with some detailed analysis:\nhttp://www.issociate.de/board/index.php?t=msg&th=141306&rid=0\nI hope it helps you to fix the problem."}, {"count": 5, "tags": [], "bug_id": 35077, "attachment_id": null, "text": "Confirm\n\n<LocationMatch \"^/(?!external)\">\n  DAV svn\n  SVNParentPath /data/subversion\n</LocationMatch>\n\n<Location /external/ad>\n  DAV svn\n  SVNPath /data/subversion/ad\n  AuthType Basic\n  ...\n</Location>\n\nResult:\nIn some cases we see the regexp symbols in log.\n192.168.9.127 - - [14/Oct/2010:09:24:57 +0000] \"OPTIONS /ad HTTP/1.1\" 200 204 \"-\" \"SVN/1.6.13 (r1002816) neon/0.29.3\"\n192.168.9.127 - - [14/Oct/2010:09:24:57 +0000] \"PROPFIND /ad HTTP/1.1\" 207 661 \"-\" \"SVN/1.6.13 (r1002816) neon/0.29.3\"\n192.168.9.127 - - [14/Oct/2010:09:24:57 +0000] \"PROPFIND %5E/(%3F!external)/ad/!svn/vcc/default HTTP/1.1\" 400 298 \"-\" \"SVN/1.6.13 (r1002816) neon/0.29.3\"", "id": 140741, "time": "2010-10-14T05:44:49Z", "creator": "andrey@niakhaichyk.org", "creation_time": "2010-10-14T05:44:49Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 35077, "is_private": false, "id": 142941, "creation_time": "2010-12-24T11:22:53Z", "time": "2010-12-24T11:22:53Z", "creator": "timur@FreeBSD.org", "text": "Still the same problem with mod_dav, mod_dav_svn and LocationMatch.\n\n<LocationMatch ^/(?:cliq|ops)/>\n        DAV svn\n        SVNParentPath /opt/svn\n        SVNPathAuthz On\n        ....\n</LocationMatch>\n\nThis setup works with browsing of the SVN repositories via HTTP browser, but fails \nwith the mentioned above errors about PROPFIND when trying to use Eclipse or any other client, that requires properties from the SVN repository.\n\nPlease, fix it! Shouldn't be so hard for 5 y.o. bug :)", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 35077, "attachment_id": null, "is_private": false, "id": 142962, "time": "2010-12-28T08:04:30Z", "creator": "sf@sfritsch.de", "creation_time": "2010-12-28T08:04:30Z", "text": "Trying to guess where the repository part should start will lead to ambiguities with more complex regular expression. I think the only general solution is to add a DAVBaseURL directive which allows the user to specify what he actually meant."}, {"count": 8, "tags": [], "bug_id": 35077, "attachment_id": null, "id": 142967, "time": "2010-12-28T10:19:23Z", "creator": "timur@FreeBSD.org", "creation_time": "2010-12-28T10:19:23Z", "is_private": false, "text": "(In reply to comment #7)\n> Trying to guess where the repository part should start will lead to ambiguities\n> with more complex regular expression. I think the only general solution is to\n> add a DAVBaseURL directive which allows the user to specify what he actually\n> meant.\n\nI don't see, how it is related. There is nothing to do with the repository path in that particular case. We have a combination of LocationMatch, mod_dav and mod_dav_svn.\n\nThe first one is responsible to match the location, which was requested from the server with the given configuration block. And the result of it is binary - either 'yes' or 'no'. and if it is 'yes' - we have very exact path(local part of the URI) that did match it! If it matched something, that wasn't aimed to - well, blame the writer of the regex.\n\nBut, in any case, as soon as the block matched - we should have exact URI which should be passed to the mod_dav instead of cryptic regular expression. I'm not sure how easy is to implement it, but at least, that what I'd expect, comparing with the behavior in case of Location.\n\nThere is absolutely nothing that makes this situation specific to the mod_dav_svn. It just consumes what mod_dav passed to it, and in this situation mod_dav passes garbage."}, {"count": 9, "tags": [], "bug_id": 35077, "is_private": false, "id": 142970, "creation_time": "2010-12-28T12:18:22Z", "time": "2010-12-28T12:18:22Z", "creator": "sf@sfritsch.de", "text": "(In reply to comment #8)\n> The first one is responsible to match the location, which was requested from\n> the server with the given configuration block. And the result of it is binary -\n> either 'yes' or 'no'. and if it is 'yes' - we have very exact path(local part\n> of the URI) that did match it! If it matched something, that wasn't aimed to -\n> well, blame the writer of the regex.\n\nWell, given a few posibilities, like\n\n^/svn/(?:projecta|projectb)/\n^/svn/(?=projecta|projectb)/\n^/svn/(?=projecta/|projectb/)\n\nI doubt that many people know pcre well enough to know that they need the third option. And there are other containers which would confuse mod_dav even more, like <FilesMatch> and <If> (in 2.3/2.4).\n\nAnother problem is that result of the regex match is not available to mod_dav. Mod_dav would probably have to re-do the regexp match to find out which part matched.\n\n> There is absolutely nothing that makes this situation specific to the\n> mod_dav_svn.\n\nThat is true.", "attachment_id": null}]
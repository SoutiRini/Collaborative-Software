[{"attachment_id": 23092, "tags": [], "creator": "bowditch_chris@hotmail.com", "text": "Created attachment 23092\nSample FO to reproduce bug\n\nFO has been checked for obvious causes why blank page is added at the end of the document, i.e. not caused by space-after, break-* properties or force-page-count. Removing the fo:repeatable-page-master-alternatives element in favour of a single repeating page master avoids the blank page. Sample FO that reproduces the problem in trunk has been attached.", "count": 0, "id": 123829, "time": "2009-01-07T05:38:05Z", "bug_id": 46489, "creation_time": "2009-01-07T05:38:05Z", "is_private": false}, {"count": 1, "tags": [], "text": "\nSome initial observations:\nThe issue is again with the last page-master. Commenting out only that one, also produces the expected result. This time, it's the combination with the last break-before in the document. Another way to avoid the issue for the moment, is by moving that as a break-after to the last preceding block.", "is_private": false, "bug_id": 46489, "id": 125675, "time": "2009-03-22T02:20:45Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T02:20:45Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46489, "text": "Created attachment 23396\nmodified sample; demonstrating the influence of tables\n\n\nIf we remove tables from the picture, the issue disappears as well.", "id": 125676, "time": "2009-03-22T02:57:24Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T02:57:24Z", "is_private": false, "attachment_id": 23396}, {"count": 3, "tags": [], "bug_id": 46489, "attachment_id": null, "text": "\nUpon checking closer: the difference between the scenario with and without tables is that, without tables the break-before has already triggered addAreas() for the preceding parts. With tables, the forced break is included in the complete list, but is preceded by another penalty which seems to confuse things... The restartPoint is set to the point *between* the two penalties, so when we restart the algorithm for the last page, it will encounter the forced break too, as a first element, and produces two pages instead of only one.\n\nI managed to hack the issue away locally by a adding a small check for this in PageBreaker.doPhase3WithLastPage():\n\n...\n            newStartPos = pbp.getLeafPos();\n            /* hack to avoid producing an extra page after the last */\n            if (((KnuthElement)effectiveList.get(newStartPos)).isForcedBreak()) {\n                newStartPos++;\n            }\n...", "id": 125680, "time": "2009-03-22T04:16:03Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T04:16:03Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 46489, "text": "\nIn the meantime, I tracked the origin of the superfluous penalty to BlockStackingLM.getNextKnuthElements() (line 350). Avoiding its creation and insertion into the result list does not solve the matter, although we might fare better in general if we only call addInBetweenBreak() in case the returnedList, whose elements will be appended after that call, does not itself already start with a forced break. (A similar thing happens in FlowLM, by the way...)\n\nThe real issue is that the restarting point is set to the index of the penalty representing the last page-break. Better put: the restarting point is always set to right *before* the last page-break, instead of the immediately *after*. \nNo problem for a regular break-possibility, but this generates the side-effect of the extra page if the break was forced. \nTherefore, I'm thinking that the newStartPos variable in PageBreaker.doPhase3WithLastPage() should unconditionally be set to (pb.getLeafPos() + 1).", "id": 125687, "time": "2009-03-22T11:52:36Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T11:52:36Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 46489, "text": "(In reply to comment #4)\n> Therefore, I'm thinking that the newStartPos variable in\n> PageBreaker.doPhase3WithLastPage() should unconditionally be set to\n> (pb.getLeafPos() + 1).\n\nThis has been committed with r757239.\n\nThanks for reporting!", "id": 125688, "time": "2009-03-22T12:22:55Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T12:22:55Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "gadams@apache.org", "is_private": false, "count": 6, "id": 155687, "time": "2012-04-01T06:35:49Z", "bug_id": 46489, "creation_time": "2012-04-01T06:35:49Z", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
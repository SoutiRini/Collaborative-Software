[{"count": 0, "tags": [], "text": "Hi\n\nI've got a Java 1.5 Application to generate RSS Files. For each date I open an existing RSS file and add a new entry to that file, afterwards I save and close the file. That means when I have 100 dates to process, the RSS file will be opened and saved 100 times.\n\nThe application is running without any problems under different users (root, meier) when I start it from the console with \"java myApp\".\nWhen I now start the application within mit servlet that is running on a Tomcat 5.0 Server, it is running without any problems but after date number 80 the application is getting blocked. So after opening and writing the RSS file 80 times the application cannot open the RSS file anymore. \nThe process is still running but the application is not able to open the RSS file anymore. I also don't get any exception or error in my application log, inside java or in the catalina.out log file. \n\nSo I think it may be a problem with the tomcat user who is not allowed to read and write the RSS file so many times. Is there any restriction for the tomcat user for opening and writing files?\n\nThanks a lot in advance.\n\nRegards\nChristoph", "is_private": false, "id": 118895, "creator": "chrigoli@tripod.de", "time": "2008-07-22T01:44:11Z", "bug_id": 45452, "creation_time": "2008-07-22T01:44:11Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 45452, "text": "Wild guess: doublecheck that you're actually closing the files (if you don't call close on the FileInputStream, the file will stay open in the operating system, and OS limits will apply).\n", "count": 1, "id": 118916, "time": "2008-07-22T13:29:48Z", "creator": "julian.reschke@gmx.de", "creation_time": "2008-07-22T13:29:48Z", "is_private": false}, {"count": 2, "tags": [], "creator": "chrigoli@tripod.de", "attachment_id": null, "text": "All FileInputStreams are correctly closed. When I check the files the process has opened (ls /proc/#no/fd), the RSS file is only once (or nonce) opened. So there is not a problem that the file stays open.\nOS Limits are set to 1024, so that won't also not be the problem.\n\nI also tried to run the java application directly with the tomcat user from a console with java myapp, that run was successful. \n\nSo there must be a restriction inside the tomcat environment.\nIn my web application I start the java app as follows:\nRuntime rt = Runtime.getRuntime();\nProcess proc = rt.exec(\"java myapp\");\n\nThanks for your help.", "id": 118930, "time": "2008-07-23T03:34:33Z", "bug_id": 45452, "creation_time": "2008-07-23T03:34:33Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 45452, "is_private": false, "id": 118939, "time": "2008-07-23T08:56:29Z", "creator": "jleech@virtela.net", "creation_time": "2008-07-23T08:56:29Z", "tags": [], "text": "This is obviously not a Tomcat bug. You are not running the application the same way when running from within Tomcat and standalone. The culprit here is Sun Microsystems and their impossible to understand interface for rt.exec(). Every single developer on the planet makes the same mistake you did and doesn't properly capture the output of the process. You've got a buffer, likely your System.out or System.err, that fills up. Your app is blocked trying to write to the buffer. There are tutorials / examples all over the web on how to properly exec a process from Java."}]
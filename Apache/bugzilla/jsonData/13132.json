[{"count": 0, "tags": [], "bug_id": 13132, "text": "Consider the following JSP-code:\n\n<% if (condition) { %>\n<i18n:message key=\"some.key\" \nid=\"myID\"/>\n<% } else { %>\n<i18n:message key=\"some.other.key\" id=\"myID\"/>\n<% } \n%>\n\nThis used to work fine in 4.1.8, but stopped working in 4.1.10.\nIn 4.1.8 this code would be \ncompiled to this:\npublic void _jspService(HttpServletRequest request, \nHttpServletResponse response) {\n\n[snip some declarations]\n\njava.lang.String myID = \nnull;\n\n if (request.getParameter(\"test\") == null) {\n      /* ----  i18n:message ---- */\n      {\n        [snip some \ncustom-tag stuff]\n        if (_jspx_th_i18n_message_0.doEndTag() == \njavax.servlet.jsp.tagext.Tag.SKIP_PAGE)\n          return;\n        myID = (java.lang.String) \npageContext.findAttribute(\"myID\");\n } else { \n       [snip pretty much the same code again]\n \n}\n\nbut as of 4.1.10, the declaration of the variable myID was put near the custom-tag call, so the \ncompiled code looks like this:\npublic void _jspService(HttpServletRequest request, \nHttpServletResponse response) {\n  [snip declarations]\n\ntry {\n if \n(request.getParameter(\"test\") == null) {\n      /* ----  i18n:message ---- */\n      [snip custom-tag stuff]\n      if \n(_jspx_th_i18n_message_0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE)\n        \nreturn;\n!!>>>   java.lang.String myID = null;     <<<!!\n      myID = (java.lang.String) \npageContext.findAttribute(\"myID\");\n} else {\n      /* ----  i18n:message ---- */\n      [snip custom-tag \nstuff]\n      if (_jspx_th_i18n_message_1.doEndTag() == \njavax.servlet.jsp.tagext.Tag.SKIP_PAGE)\n        return;\n!!>>> no declaration of myID here     \n<<<!!\n      myID = (java.lang.String) pageContext.findAttribute(\"myID\");\n}\n\nand so Jasper \ncorrectly complains \"cannot resolve symbol myID\" in the else-clause, because myID is only \ndeclared once - in the if-clause. (!!)\n\nI assume the fault is on the tomcat-compiler, but it might \nof course well be that the <i18n:message>-tag just relied on the behaviour of tomcat and that the \nhandling of that kind of variables isn't even standardized.\n\nPS: If the snippets I put in here \nare not enough context, please email me (wosc@wosc.de) so I can provide more information.", "id": 23637, "time": "2002-09-30T09:52:18Z", "creator": "wosc@wosc.de", "creation_time": "2002-09-30T09:52:18Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 13132, "text": "Not a bug.\n\nThe goal of the current Jasper is to implement scoping of scripting\nvariables in the most spec-compliant way.\n\nThis means that AT_END variables (which the <i18n:message> tag in your\nJSP code fragment exposes) are declared only after the call to the\nhandler's doEndTag() method, when they are synchronized, and not any\nearlier than that.\n\nThe benefit of this approach is best explained with an example.\n\nAssume this JSP code fragment:\n\n  <mytags:X>\n    <mytags:Y/>\n  </mytags:X>\n\nwith this TLD:\n\n  <tag>\n    <name>X</name>\n    <tag-class>mytags.MyTagSupport</tag-class>\n    <variable>\n      <name-given>someEnd</name-given>\n      <variable-class>java.lang.Integer</variable-class>\n      <scope>AT_END</scope>\n    </variable>\n  </tag>\n\n  <tag>\n    <name>Y</name>\n    <tag-class>mytags.MyTagSupport</tag-class>\n    <variable>\n      <name-given>someEnd</name-given>\n      <variable-class>java.util.Vector</variable-class>\n      <scope>AT_END</scope>\n    </variable>\n  </tag>\n\nthat is, both X and Y tags declare an AT_END variable of the same name\n(\"someEnd\"), but with different types.\n\nWith Jasper's current strategy of declaring AT_END variables right\nafter the call to doEndTag(), the page generated from the above JSP fragment\nwill compile just fine: The nested <mytags:Y> will declare a variable named\n\"someEnd\" of type java.util.Vector, whereas the enclosing <mytags:X> will\ndeclare a variable with the same name but of different type (java.lang.Integer).\n\nHowever, if Jasper declared AT_END variables at the beginning of the\ntag or method (as it used to), the above won't work. Of course, the\nabove example won't compile if AT_END were replaced with AT_BEGIN, but\nthat would be expected.\n\nAs a workaround to your problem, specify a different value for the\n'id' attribute in your second invocation of <i18n:message>.\n\n", "id": 23675, "time": "2002-09-30T23:07:20Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-09-30T23:07:20Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 13132, "attachment_id": null, "text": "*** Bug 13081 has been marked as a duplicate of this bug. ***", "id": 23845, "time": "2002-10-03T16:18:04Z", "creator": "jan.luehe@sun.com", "creation_time": "2002-10-03T16:18:04Z", "is_private": false}]
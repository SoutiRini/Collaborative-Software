[{"count": 0, "tags": [], "bug_id": 57919, "attachment_id": null, "id": 182942, "time": "2015-05-11T19:07:47Z", "creator": "apache@gagravarr.org", "creation_time": "2015-05-11T19:07:47Z", "is_private": false, "text": "Because the older POIFSFileSytem only ever supported read or write, and only read from an InputStream, all the POIDocument classes only supported writing out to a new stream. When the OOXML support was added, this followed the same pattern\n\nWith most things using NPOIFSFileSystem, which supports in-place write when using a File, we can revisit this. It should be possible to have POIDocument / POIXMLDocument classes write in-place if opened from a File, avoiding the need to do the write-as-new + close + rename shuffle on Windows, amongst other benefits\n\nThe existing write(OutputStream) would remain, both for compatibility and for those needing to load from streams rather than files, but it should be possible to add a write() method as well for file-based in-place write. Just needs some work!"}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Initial HSSFWorkbook in-place write support added in r1753103. If we're happy with how this looks and works, should be quite quick to generalise for the other OLE2 (POIDocument) classes which support write", "id": 192459, "time": "2016-07-17T19:04:00Z", "bug_id": 57919, "creation_time": "2016-07-17T19:04:00Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 57919, "text": "Nick said in r1753103\n> This will fail (with an {@link IllegalStateException} if the\n> Workbook was opened read-only, opened from an {@link InputStream}\n> instead of a File, or if this is not the root document. For those cases, \n> you must use {@link #write(OutputStream)} to write to a brand new stream.\n\nWe urge users to read spreadsheets from a File rather than an InputStream to reduce memory consumption. Is there any we we could also reduce memory consumption by writing a File instead of an OutputStream?\n\nI noticed a significant performance improvement when writing to a BufferedOutputStream(FileOutputStream) on a network drive (Windows share). We should be cognizant of that, either in the code or as a disclaimer in the JavaDocs.", "id": 192460, "time": "2016-07-17T19:38:38Z", "creator": "onealj@apache.org", "creation_time": "2016-07-17T19:38:38Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57919, "attachment_id": null, "text": "Added performance note about using BufferedOutputStreams in r1753112, since it wasn't mentioned there yet.", "id": 192462, "time": "2016-07-17T20:26:05Z", "creator": "onealj@apache.org", "creation_time": "2016-07-17T20:26:05Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57919, "text": "Currently (N)POIFS doesn't support opening an empty file, so you'd (for now) need to create a new empty POIFS, save it to a file (would be ~2kb), open that, then save the document into it. I guess we might want a static create method on POIFSFileSystem that hides all that, which could later be replaced with logic to create the new file from scratch\n\nAs for if it would help... Any chance you could, on your somewhat shonky filesystem, open a HSSFWorkbook from a POIFS loaded r/w from a file, make some changes, do an in-place write, and see how quick it saves back vs OutputStream vs BufferedOutputStream?", "id": 192480, "time": "2016-07-18T09:57:36Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-18T09:57:36Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57919, "text": "Created attachment 34054\ntiming saving an HSSFWorkbook on local/network drive and buffered/unbuffered\n\nHere's the timing results:\n\n> ncalls  tottime     cumtime    function\n> 30      62.083488   62.083488  save_network_unbuffered\n> 30      6.488765    6.488765   save_network_buffered\n> 30      1.807957    1.807957   save_local_unbuffered\n> 30      1.397861    1.397861   save_local_buffered", "id": 192508, "time": "2016-07-19T02:57:47Z", "creator": "onealj@apache.org", "creation_time": "2016-07-19T02:57:47Z", "is_private": false, "attachment_id": 34054}, {"count": 6, "tags": [], "bug_id": 57919, "attachment_id": null, "text": "I used https://svn.apache.org/viewvc/poi/trunk/test-data/spreadsheet/53446.xls?view=log  from r1614697, which was one of the larger spreadsheets.", "id": 192509, "time": "2016-07-19T02:59:42Z", "creator": "onealj@apache.org", "creation_time": "2016-07-19T02:59:42Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 57919, "text": "Created attachment 34055\nread from NPOIFSFileSystem and write in place or buffered/unbuffered outputstream", "id": 192513, "time": "2016-07-19T06:23:12Z", "creator": "onealj@apache.org", "creation_time": "2016-07-19T06:23:12Z", "is_private": false, "attachment_id": 34055}, {"count": 8, "tags": [], "bug_id": 57919, "attachment_id": 34056, "text": "Created attachment 34056\ntiming spreadsheet\n\nAveraged over 40 runs.\n\n> Method               Open     Modify   Write    Close\n> unbuffered local     0.214    0.004    0.137    0.035\n> unbuffered network   0.321    0.005    0.219    0.035\n> buffered local       0.189    0.002    0.141    0.038\n> buffered network     0.326    0.002    0.215    0.035\n> inplace local        0.178    0.002    0.097    0.040\n> inplace network      0.278    0.003    0.131    0.069", "id": 192514, "time": "2016-07-19T06:35:01Z", "creator": "onealj@apache.org", "creation_time": "2016-07-19T06:35:01Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 57919, "text": "Looks like the in-place write stuff is faster than buffered streams over the network, and locally. Am I reading that right?\n\nIf so, I can look to add a write(File) method to HSSFWorkbook which would create a new file and write into that. Oh, and do write() + write(File) on the other write-supporting H??F classes.", "id": 192531, "time": "2016-07-19T14:10:35Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-19T14:10:35Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "text": "I think the data from comment 8 is inconclusive because the same open_workbook function was called for each test but has results varying by a factor of two. The order that the tests ran affected the results. What we're seeing here is disk cache performance. I'm going to run fewer trials spaced over more time during peak business hours when the network drive is busiest. I expected to see the order of magnitude difference between local ad network unbuffered.", "id": 192533, "time": "2016-07-19T16:20:44Z", "bug_id": 57919, "creation_time": "2016-07-19T16:20:44Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 57919, "attachment_id": null, "id": 192540, "time": "2016-07-20T02:31:21Z", "creator": "onealj@apache.org", "creation_time": "2016-07-20T02:31:21Z", "is_private": false, "text": "I've been trying to get meaningful data that excludes the effect of JVM JIT (which I've noticed in the form of \"modify\" running much slower on the first test than subsequent tests and disk caching.\n\nSo far it looks like in-place writing is faster than writing to a different location, and in-place writing to network is only slightly slower than in-place writing to local.\n\nI think the utility and simplicity of writing in-place is worth it regardless of the timing results, so I'd say go ahead and continue adding in-placing writing. Is it easy to make in-place writing work for WorkbookFactory.create(File) and HSSFWorkbook(File)?"}, {"count": 12, "tags": [], "bug_id": 57919, "attachment_id": null, "id": 192549, "time": "2016-07-20T11:15:31Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-20T11:15:31Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #11)\n> Is it easy to make in-place writing work for\n> WorkbookFactory.create(File) and HSSFWorkbook(File)?\n\nin-place write works for both of those as long as you set read-only to false when opening\n\n> I think the utility and simplicity of writing in-place is worth it\n> regardless of the timing results, so I'd say go ahead and continue adding\n> in-placing writing.\n\nOK, I've had a go at adding HSSFWorkbook.write(File). Will need to fix a POIFS bug later before it works... Does HSSFWorkbook now look how you'd expect / like all the document classes to look for write methods?"}, {"count": 13, "tags": [], "bug_id": 57919, "attachment_id": null, "id": 192567, "time": "2016-07-21T23:29:56Z", "creator": "apache@gagravarr.org", "creation_time": "2016-07-21T23:29:56Z", "is_private": false, "text": "In-place-write and write-to-new-File now done for HSSF, HSLF and HPSF\n\nWe could probably use some feedback on it before making more major changes to HWPF to add the support there, and before delving into OPC / X??F (for which we've at least one other bug around close vs revert vs write!)"}, {"count": 14, "tags": [], "bug_id": 57919, "attachment_id": null, "text": "r1799308 might come in handy for handling nested try...finally statements with closeable resources. It should also make it easier to write unit tests that don't leak resources without indenting the code with try...finally statements.", "id": 199289, "time": "2017-06-20T07:29:56Z", "creator": "onealj@apache.org", "creation_time": "2017-06-20T07:29:56Z", "is_private": false}]
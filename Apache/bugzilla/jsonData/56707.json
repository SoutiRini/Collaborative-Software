[{"id": 176318, "tags": [], "bug_id": 56707, "attachment_id": null, "count": 0, "text": "When relaying a websocket response through Apache 2.4.9, it injects invalid (in the context of websocket) Transfer-encoding: chunked header.\n\nI've searched and found that Tomcat7 had similar problem but fixed (Bug#54067).\n\nHere are the response headers before we relay them through Apache:\n\n    0000: 48 54 54 50 2F 31 2E 31 20 31 30 31 20 53 77 69  HTTP/1.1 101 Swi\n    0010: 74 63 68 69 6E 67 20 50 72 6F 74 6F 63 6F 6C 73  tching Protocols\n    0020: 0D 0A 55 70 67 72 61 64 65 3A 20 57 65 62 73 6F  ..Upgrade: Webso\n    0030: 63 6B 65 74 0D 0A 53 65 72 76 65 72 3A 20 4D 69  cket..Server: Mi\n    0040: 63 72 6F 73 6F 66 74 2D 49 49 53 2F 38 2E 30 0D  crosoft-IIS/8.0.\n    0050: 0A 53 65 63 2D 57 65 62 53 6F 63 6B 65 74 2D 41  .Sec-WebSocket-A\n    0060: 63 63 65 70 74 3A 20 73 4F 79 70 36 53 78 73 33  ccept: sOyp6Sxs3\n    0070: 5A 52 51 66 79 6D 66 2F 76 33 57 62 43 6F 58 41  ZRQfymf/v3WbCoXA\n    0080: 5A 63 3D 0D 0A 43 6F 6E 6E 65 63 74 69 6F 6E 3A  Zc=..Connection:\n    0090: 20 55 70 67 72 61 64 65 0D 0A 44 61 74 65 3A 20   Upgrade..Date: \n    00a0: 57 65 64 2C 20 30 39 20 4A 75 6C 20 32 30 31 34  Wed, 09 Jul 2014\n    00b0: 20 32 31 3A 34 37 3A 35 37 20 47 4D 54 0D 0A 0D   21:47:57 GMT...\n    00c0: 0A                                               .               \n\nHere are the response headers after Apache has written them to the client, note the EXTRA transfer-encoding: chunked header which is invalid in the context of a websocket response:\n\n[Wed Jul 09 17:47:51.121491 2014] [dumpio:trace7] [pid 17506:tid 3074771856] mod_dumpio.c(103): [client xxxxx:53506] mod_dumpio:  dumpio_out (data-HEAP): HTTP/1.1 101 Switching Protocols\\r\\nDate: Wed, 09 Jul 2014 21:47:51 GMT\\r\\nServer: Apache/2.4.9 (Unix) OpenSSL/0.9.8b\\r\\nSet-Cookie: ias-rs-sessionid=\"S0\";\\r\\nUpgrade: Websocket\\r\\nSec-WebSocket-Accept: sOyp6Sxs3ZRQfymf/v3WbCoXAZc=\\r\\nConnection: Upgrade\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n  <<=============== invalid!\n\nI've debugged this issue quiet a bit and found the chunked flag is getting set in an \"if\" condition (that the documenter called \"ungly side-effect\") in http_protocol.c:246.\n\nBelow is a snippet of the (long) \"if\" condition where chunked is set and also its documentation. In addition, the stacktrace from GDB is also provided.\n\nAP_DECLARE(int) ap_set_keepalive(request_rec *r)\n{\n    int ka_sent = 0;\n    int left = r->server->keep_alive_max - r->connection->keepalives;\n    int wimpy = ap_find_token(r->pool,\n                              apr_table_get(r->headers_out, \"Connection\"),\n                              \"close\");\n    const char *conn = apr_table_get(r->headers_in, \"Connection\");\n\n    /* The following convoluted conditional determines whether or not\n     * the current connection should remain persistent after this response\n     * (a.k.a. HTTP Keep-Alive) and whether or not the output message\n     * body should use the HTTP/1.1 chunked transfer-coding.  In English,\n     *\n     *   IF  we have not marked this connection as errored;\n     *   and the client isn't expecting 100-continue (PR47087 - more\n     *       input here could be the client continuing when we're\n     *       closing the request).\n     *   and the response body has a defined length due to the status code\n     *       being 304 or 204, the request method being HEAD, already\n     *       having defined Content-Length or Transfer-Encoding: chunked, or\n     *       the request version being HTTP/1.1 and thus capable of being set\n     *       as chunked [we know the (r->chunked = 1) side-effect is ugly];\n     *   and the server configuration enables keep-alive;\n     *   and the server configuration has a reasonable inter-request timeout;\n     *   and there is no maximum # requests or the max hasn't been reached;\n     *   and the response status does not require a close;\n     *   and the response generator has not already indicated close;\n     *   and the client did not request non-persistence (Connection: close);\n     *   and    we haven't been configured to ignore the buggy twit\n     *       or they're a buggy twit coming through a HTTP/1.1 proxy\n     *   and    the client is requesting an HTTP/1.0-style keep-alive\n     *       or the client claims to be HTTP/1.1 compliant (perhaps a proxy);\n     *   and this MPM process is not already exiting\n     *   THEN we can be persistent, which requires more headers be output.\n     *\n     * Note that the condition evaluation order is extremely important.\n     */\n    if ((r->connection->keepalive != AP_CONN_CLOSE)\n        && !r->expecting_100\n        && ((r->status == HTTP_NOT_MODIFIED)\n            || (r->status == HTTP_NO_CONTENT)\n            || r->header_only\n            || apr_table_get(r->headers_out, \"Content-Length\")\n            || ap_find_last_token(r->pool,\n                                  apr_table_get(r->headers_out,\n                                                \"Transfer-Encoding\"),\n                                 \"chunked\")\n            || ((r->proto_num >= HTTP_VERSION(1,1))\n                && (r->chunked = 1))) /* THIS CODE IS CORRECT, see above. */ <<========= Here is where chunked is set! \n        && r->server->keep_alive\n        && (r->server->keep_alive_timeout > 0)\n        && ((r->server->keep_alive_max == 0)\n            || (left > 0))\n        && !ap_status_drops_connection(r->status)\n        && !wimpy\n        && !ap_find_token(r->pool, conn, \"close\")\n        && (!apr_table_get(r->subprocess_env, \"nokeepalive\")\n            || apr_table_get(r->headers_in, \"Via\"))\n        && ((ka_sent = ap_find_token(r->pool, conn, \"keep-alive\"))\n            || (r->proto_num >= HTTP_VERSION(1,1)))\n        && is_mpm_running()) {\n\n        r->connection->keepalive = AP_CONN_KEEPALIVE;\n        r->connection->keepalives++;\n...\n\n\nGDB Stacktrace:\n---------------\n\n(gdb) p _r->chunked\n$4 = 0\n(gdb) p &(_r->chunked)\n$5 = (int *) 0x9ad4f50\n(gdb) watch *((int*)0x9ad4f50)\nHardware watchpoint 2: *(int *) 162352976\n(gdb) c\nContinuing.\nHardware watchpoint 2: *(int *) 162352976\n\nOld value = 0\nNew value = 1\nap_set_keepalive (r=0x9ad4ed0) at http_protocol.c:247\n247             && r->server->keep_alive\nCurrent language:  auto; currently c\n(gdb) where\n#0  ap_set_keepalive (r=0x9ad4ed0) at http_protocol.c:247\n#1  0x080aa84b in ap_http_header_filter (f=0x9ad5ad8, b=0x9ad67d0) at http_filters.c:1262\n#2  0x0807374f in ap_pass_brigade (next=0x9ad5ad8, bb=0x9ad67d0) at util_filter.c:590\n#3  0x08078132 in ap_content_length_filter (f=0x9ad5ac0, b=0x9ad67d0) at protocol.c:1421\n#4  0x0807374f in ap_pass_brigade (next=0x9ad5ac0, bb=0x9ad67d0) at util_filter.c:590\n#5  0x080ac963 in ap_byterange_filter (f=0x9ad5aa8, bb=0x9ad67d0) at byterange_filter.c:483\n#6  0x0807374f in ap_pass_brigade (next=0x9ad5aa8, bb=0x9ad67d0) at util_filter.c:590\n#7  0x08078368 in ap_old_write_filter (f=0x9ad67f0, bb=0x9ad67d0) at protocol.c:1490\n#8  0x0807374f in ap_pass_brigade (next=0x9ad67f0, bb=0x9ad67d0) at util_filter.c:590\n#9  0x08078873 in ap_rflush (r=0x9ad4ed0) at protocol.c:1699\n...\n#19 0x0808ddfe in ap_run_handler (r=0x9ad4ed0) at config.c:170\n#20 0x0808e651 in ap_invoke_handler (r=0x9ad4ed0) at config.c:439\n#21 0x080a7042 in ap_process_async_request (r=0x9ad4ed0) at http_request.c:317\n#22 0x080a3556 in ap_process_http_async_connection (c=0x9ad10b0) at http_core.c:143\n#23 0x080a3726 in ap_process_http_connection (c=0x9ad10b0) at http_core.c:228\n#24 0x0809990f in ap_run_process_connection (c=0x9ad10b0) at connection.c:41\n#25 0x080ae81e in process_socket (thd=0x9a40958, p=0x9ad0e80, sock=0x9ad0ec0, cs=0x9ad1068,\n    my_child_num=1, my_thread_num=0) at event.c:970\n#26 0x080b096b in worker_thread (thd=0x9a40958, dummy=0x9a976d0) at event.c:1815\n#27 0x006d0f7b in dummy_worker (opaque=0x9a40958) at threadproc/unix/thread.c:142\n#28 0x00ad345b in start_thread () from /lib/libpthread.so.0\n#29 0x00a2b24e in clone () from /lib/libc.so.6\n(gdb)", "time": "2014-07-09T22:16:33Z", "creator": "eabouzou@yahoo.com", "creation_time": "2014-07-09T22:16:33Z", "is_private": false}, {"text": "This probably has been fixed in the upcoming 2.4.10 with r1609239.\n\nThe related part of this commit is:\n+    /* This handler should take care of the entire connection; make it so that\n+     * nothing else is attempted on the connection after returning. */\n+    c->keepalive = AP_CONN_CLOSE;\n\nCan you try if backporting r1609239 fixes your issue?", "tags": [], "creator": "ylavic.dev@gmail.com", "is_private": false, "count": 1, "id": 176319, "time": "2014-07-09T23:04:24Z", "bug_id": 56707, "creation_time": "2014-07-09T23:04:24Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 56707, "is_private": false, "text": "(In reply to Yann Ylavic from comment #1)\n> This probably has been fixed in the upcoming 2.4.10 with r1609239.\n> [...]\n> Can you try if backporting r1609239 fixes your issue?\n\nOups, I meant r1588495 above.", "id": 176320, "time": "2014-07-09T23:06:01Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-07-09T23:06:01Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 56707, "attachment_id": null, "id": 176321, "time": "2014-07-09T23:21:47Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-07-09T23:21:47Z", "is_private": false, "text": "Here is the patch on mod_proxy_wstunnel.c only: http://svn.apache.org/viewvc/httpd/httpd/branches/2.4.x/modules/proxy/mod_proxy_wstunnel.c?r1=1588495&r2=1588494&pathrev=1588495&view=patch"}, {"count": 4, "tags": [], "creator": "eabouzou@yahoo.com", "attachment_id": null, "is_private": false, "id": 176333, "time": "2014-07-10T15:34:54Z", "bug_id": 56707, "creation_time": "2014-07-10T15:34:54Z", "text": "(In reply to Yann Ylavic from comment #3)\n> Here is the patch on mod_proxy_wstunnel.c only:\n> http://svn.apache.org/viewvc/httpd/httpd/branches/2.4.x/modules/proxy/\n> mod_proxy_wstunnel.c?r1=1588495&r2=1588494&pathrev=1588495&view=patch\n\nHi Yann,\n\nJust want to clarify things: \n\n1- I'm NOT using mod_proxy_wstunnel. We are using our own module that sets these response headers.\n\n2- The problem is happening because r->chunked gets set. Here is the exact line (line http_protocol.c:246 in the long \"if\" condition) that sets it (in particular r->chunked = 1):\n\n|| ((r->proto_num >= HTTP_VERSION(1,1))\n                && (r->chunked = 1))) /* THIS CODE IS CORRECT, see above. */\n\nThe debugger stops at line 247 (the line AFTER it happens) where it shows r->server-keepalive. I hope this didn't cause a confusion.\n\n3- The fix ideally would be in that \"if\" statement to guard setting r->chunked if the protocol in the response status was 101 (websocket upgrade).\n\nSo to simplify the statement of the problem:\nIf my module sets these response headers and used a simple ap_rwrite() api to write these headers, Apache would INJECT a Transfer-encoding: chunked header which breaks a websocket client."}, {"count": 5, "tags": [], "bug_id": 56707, "attachment_id": null, "id": 176351, "time": "2014-07-11T15:25:46Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-07-11T15:25:46Z", "is_private": false, "text": "(In reply to Ahab. A. from comment #4)\n> So to simplify the statement of the problem:\n> If my module sets these response headers and used a simple ap_rwrite() api\n> to write these headers, Apache would INJECT a Transfer-encoding: chunked\n> header which breaks a websocket client.\n\nI think your module shoudn't use ap_rwrite() for that purpose since you are not writting the response body but the header.\n\nYou probably want to use ap_send_interim_response(r, 1) instead, after you set r->status and fill r->headers_out accordingly."}, {"count": 6, "tags": [], "bug_id": 56707, "attachment_id": null, "text": "(In reply to Yann Ylavic from comment #5)\n> You probably want to use ap_send_interim_response(r, 1) instead, after you\n> set r->status and fill r->headers_out accordingly.\n\nAfter you *have* set r->status and fill r->headers_out, these are used by ap_send_interim_response().", "id": 176352, "time": "2014-07-11T15:35:46Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-07-11T15:35:46Z", "is_private": false}, {"count": 7, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "is_private": false, "id": 176353, "time": "2014-07-11T15:46:09Z", "bug_id": 56707, "creation_time": "2014-07-11T15:46:09Z", "text": "The other solution is to use ap_fwrite(r->connection->output_filters, ...) so that HTTP output filters won't mangle the response (which is pretty much what ap_send_interim_response() will do)."}, {"count": 8, "attachment_id": null, "bug_id": 56707, "text": "(In reply to Yann Ylavic from comment #7)\n> The other solution is to use ap_fwrite(r->connection->output_filters, ...)\n> so that HTTP output filters won't mangle the response (which is pretty much\n> what ap_send_interim_response() will do).\n\nHi Yann,\n\nI tried your work-arounds and unfortunately I was unsuccessful as normal (non-websocket) HTTP seems to break (not all content gets flushed out). Also ap_send_interim_response() seems to ignore sending the HTTP status CODE, I had to work around that by prepending the status code to the status line to get the status response in proper HTTP form.\n\nIn any event, I think the real problem is that Apache's HTTP processing in general (http module, filters..etc) are not AWARE of the \"new\" websocket protocol all together! For example, it doesn't know/aware of HTTP code 101 \"Switching Protocol\" nor is it aware of \"Connection: upgrade\" and \"Upgrade: websocket\" headers.\n\nIf you look at Apache's HTTP protocol code, for example, http_protocol.c, http_filters.c..etc, you'll clearly see it only assume EITHER chunked encoding or content length (for payload processing). Also, it only assumes the \"Connection\" header can have either \"close or keepalive\" values, it's not aware of \"upgrade\" value. You can go on and on with examples like that.", "id": 176932, "time": "2014-08-05T18:30:54Z", "creator": "eabouzou@yahoo.com", "creation_time": "2014-08-05T18:30:54Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 177295, "time": "2014-08-21T13:20:09Z", "bug_id": 56707, "creation_time": "2014-08-21T13:20:09Z", "is_private": false, "text": "(In reply to Ahab. A. from comment #8)\n> I tried your work-arounds and unfortunately I was unsuccessful as normal\n> (non-websocket) HTTP seems to break (not all content gets flushed out). Also\n> ap_send_interim_response() seems to ignore sending the HTTP status CODE, I\n> had to work around that by prepending the status code to the status line to\n> get the status response in proper HTTP form.\n\nYes, my bad, both r->status *and* r->status_line (which means status code + reason in httpd) need to be set before calling ap_send_interim_response().\n\nWhat do you mean by \"not all content gets flushed out\"? The 101 response (which is a header only) isn't flushed to the client or does it relate to upcoming (websocket) data?\n\n>\n> In any event, I think the real problem is that Apache's HTTP processing in\n> general (http module, filters..etc) are not AWARE of the \"new\" websocket\n> protocol all together! For example, it doesn't know/aware of HTTP code 101\n> \"Switching Protocol\" nor is it aware of \"Connection: upgrade\" and \"Upgrade:\n> websocket\" headers.\n\nmod_proxy_wstunnel is aware of all that, and does the right thing (ie. not using HTTP level filters/functions to handle websocket specifics).\n\n>\n> If you look at Apache's HTTP protocol code, for example, http_protocol.c,\n> http_filters.c..etc, you'll clearly see it only assume EITHER chunked\n> encoding or content length (for payload processing).\n\nThese are the only payload delimiters defined by the HTTP RFC.\n\n> Also, it only assumes\n> the \"Connection\" header can have either \"close or keepalive\" values, it's\n> not aware of \"upgrade\" value. You can go on and on with examples like that.\n\nAgain, these are the only Connection header values httpd has to be aware of, the other values are specific and have to be handled by a dedicated module (like mod_proxy_wstunnel does for websockets, you should probably look at the way this is handled there).\n\n\nAnyway, since this is about your module's handling of websockets (unless mod_proxy_wstunnel or ap_send_interim_response() do not work as expected), this should be discussed on the modules-dev@httpd.apache.org list, this report db is for httpd bugs only.\n\nI'm closing this PR for now, please reopen only if httpd is\nmisbehaving (in its scope, eg. mod_proxy_wstunnel or ap_send_interim_response)."}]
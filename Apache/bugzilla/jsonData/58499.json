[{"count": 0, "tags": [], "bug_id": 58499, "is_private": false, "id": 185762, "attachment_id": null, "creator": "M.Hankus@netpr.pl", "creation_time": "2015-10-16T12:06:23Z", "time": "2015-10-16T12:06:23Z", "text": "When using 3.13 SXSSFWorkbook fails with exception\n\njava.io.IOException: Zip bomb detected! The file would exceed certain limits which usually indicate that the file is used to inflate memory usage and thus could pose a security risk. You can adjust these limits via setMinInflateRatio() and setMaxEntrySize() if you need to work with files which exceed these limits. Counter: 408576, cis.counter: 4080, ratio: 0.009985902255639098Limits: MIN_INFLATE_RATIO: 0.01, MAX_ENTRY_SIZE: 4294967295\n\n\n\nProblem is that SXSSFWorkbook.write creates template file. \n\nFile tmplFile = TempFile.createTempFile(\"poi-sxssf-template\", \".xlsx\")\n\n\nin my case it looks like \n\n-rw-r--r--. 1 root root     7095 10-16 14:00 poi-sxssf-template5548165903088413476.xlsx\n\nwhen uncompressed this file produces 1085244 bytes of content, so compresscion ratio is 0.0065377002 - exception is thrown with MIN_INFLATE_RATIO: 0.01, so this template file cannot be read by POI (which later inject data into this file). \n\nI'm marking this bug with severity major, because 3.13 is not able to produce SXSSF workbooks."}, {"attachment_id": null, "tags": [], "creator": "kiwiwings@apache.org", "text": "The content of your sxssf seems to be a lot of repeating content.\nWhy don't you want to change the min inflation ratio?\n\nBtw. I haven't understood why you use SXSSF first and then load it again via XSSF and inject data ...\n\nAndi.", "count": 1, "id": 185765, "time": "2015-10-16T15:14:46Z", "bug_id": 58499, "creation_time": "2015-10-16T15:14:46Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58499, "is_private": false, "id": 185766, "attachment_id": null, "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-16T15:50:34Z", "time": "2015-10-16T15:50:34Z", "text": "Also can you provide some sample code which reproduces the problem?\n\nAnd as Andi suggested, something like a ZipSecureFile.setMinInflationRatio(0.00000001) may make it work."}, {"count": 3, "tags": [], "bug_id": 58499, "text": "Sorry - I was mistaken with root cause. My problem can be reproduced with such test\n\n\ntry (OutputStream os = new NullOutputStream()) {\n            SXSSFWorkbook workbook = new SXSSFWorkbook();\n            Sheet sheet = workbook.createSheet();\n            for (int i = 0; i < 900; i++) {\n                Row r = sheet.createRow(i);\n                Cell c = r.createCell(0);\n                CellStyle cs = workbook.createCellStyle();\n                c.setCellStyle(cs);\n                c.setCellValue(\"AAA\");                \n            }\n            workbook.write(os);\n            workbook.dispose();\n}\n\n\nThis code will throw zip bomb exception.  Adding ZipSecureFile.setMinInflationRatio(0) eliminates this problem. You can close this issue.", "id": 185770, "time": "2015-10-16T17:42:26Z", "creator": "M.Hankus@netpr.pl", "creation_time": "2015-10-16T17:42:26Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "I have added some improvements on this in r1709180, we now do not run these \"zip-bomb\" checks for rather small files now to avoid such false-positives, this should make this very simple case work now. Unit-tests have been added to verify that it stays fixed. Also the error message should indicate slightly better how to work around the error message.", "is_private": false, "id": 185785, "creator": "dominik.stadler@gmx.at", "time": "2015-10-17T14:45:07Z", "bug_id": 58499, "creation_time": "2015-10-17T14:45:07Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I think the check should only be done when reading a workbook but never when writing. Since in the example code no workbook is read, the problem seems to be that the streaming API writes to a temp file and reads that back in again.\n\nI just got hot by this problem, and the suggested fix to adjust the limit by calling ZipSecureFile.setMinInflateRation() does not seem appropriate since it is a global setting and thus would make applications that both read and write workbooks less secure.\n\nI have not checked the POI code yet, but I'd suggest better not using ZipSecureFile when *writing* workbooks (or in this case: reading back the temporary files created when writing an instance of SXSSFWorkbook).\n\nWould such a patch be accepted?", "attachment_id": null, "id": 191829, "creator": "axel@dua3.com", "time": "2016-06-20T09:49:50Z", "bug_id": 58499, "creation_time": "2016-06-20T09:49:50Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58499, "attachment_id": null, "is_private": false, "id": 191830, "time": "2016-06-20T10:15:40Z", "creator": "onealj@apache.org", "creation_time": "2016-06-20T10:15:40Z", "text": "The main purpose of the zip bomb detection is to safely handle untrusted input. Since a workbook that has already been fully read into memory has passed the safety test, I suppose you could consider it quasi-safe with regard to writing it back out.\n\nIf you can't think of a way that a latent zip bomb could unwrap itself while writing the workbook that wasn't a result of poor (trusted) code, then I would agree with removing this limit when writing.\n\nNot being a security expert, the safer option is to set different read and write limits.\n\nLet's continue the discussion on the POI dev mailing dev@poi.apache.org."}]
[{"attachment_id": null, "tags": [], "bug_id": 28236, "is_private": false, "count": 0, "id": 55415, "time": "2004-04-06T16:54:34Z", "creator": "levadura@mail.ru", "creation_time": "2004-04-06T16:54:34Z", "text": "Well actually in reAllocBuff() method the policy is to incriment it by a \nconstant (512 bytes). In my case with a BIG <select> tag 99% of CPU is \nused just to increment the buffer. \n\nThe suggestion is to use\n\n***************\nlen = Math.max(Constants.DEFAULT_TAG_BUFFER_SIZE, cb.length);\n***************\ninstead of\n***************\n        if (len < Constants.DEFAULT_TAG_BUFFER_SIZE) {\n            len = Constants.DEFAULT_TAG_BUFFER_SIZE;\n        }\n***************\n\nIn my case (I'm using JSF RI 1.0) the change is from ~26 min to 2 sec.\n\nSincerely,\n\nunknown"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "text": "Anyway, why don't you suggest len = 2 * cb.length ?", "id": 55427, "time": "2004-04-06T22:05:37Z", "bug_id": 28236, "creation_time": "2004-04-06T22:05:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "levadura@mail.ru", "text": "well actually changes above has a bug if:\n\nMath.max(Constants.DEFAULT_TAG_BUFFER_SIZE, cb.length) < len\n\nI just  pointed the problem, but I'm not sure about the strategy to use in \nbuffer increment...", "id": 55438, "time": "2004-04-07T08:41:25Z", "bug_id": 28236, "creation_time": "2004-04-07T08:41:25Z", "is_private": false, "attachment_id": null}]
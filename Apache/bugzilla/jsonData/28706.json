[{"count": 0, "tags": [], "bug_id": 28706, "is_private": false, "text": "Simon Pepping comments copied from bug 28314:\n\n1. The patch introduces a trailing space in some cases. This can be\n   seen in the area tree dump, in the second block in your test FO\n   file. This problem can be remedied by adding an else branch, which\n   removes all BPs after prevBP from vecInlineBreaks if we do not\n   reset.\n\n2. The disappearance of the word 'spaces' is due to the fact that in\n   this case bp has not yet been added to vecInlineBreaks, so that\n   prevCouldEndLine is applied on prevBP only, in which case it\n   returns true immediately. We want it to return false in this case\n   so that reset is called and bp is not silently dropped. The problem\n   can be remedied by testing against this condition before checking\n   for suppressibility. I prefer that above your adding bp to\n   vecInlineBreaks, of which the side effects in other cases are\n   unknown. prevCouldEndLine could then be written as:\n\n    private boolean prevCouldEndLine(BreakPoss prev) {\n        if (!isFinished()) {\n            return false;\n        }\n        if (vecInlineBreaks.get(vecInlineBreaks.size() - 1) == prev) {\n            return false;\n        }\n        return allAreSuppressible(prev);\n    }\n\nMy attached patch does the above. It also does away with\nprevCouldEndLine by inserting all the conditions directly in the code\nand reusing allAreSuppressible.\n\nSimon", "id": 56680, "time": "2004-04-30T08:11:51Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-04-30T08:11:51Z", "attachment_id": null}, {"count": 1, "attachment_id": 11392, "bug_id": 28706, "is_private": false, "id": 56682, "time": "2004-04-30T08:16:59Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-04-30T08:16:59Z", "tags": [], "text": "Created attachment 11392\nSimon's patch"}, {"count": 2, "attachment_id": null, "bug_id": 28706, "is_private": false, "id": 57192, "time": "2004-05-11T11:01:09Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-05-11T11:01:09Z", "tags": [], "text": "Hi Simon,\n\nI can see the trailing space in the second paragraph as you describe. However, \nboth occurences of the word 'spaces' exists both in PDF output and the Area \nTree.\n\nI am wondering if adding the else branch as you suggested to fix (1) actually \ncauses issue (2). If this is the case, I may be inclined to reject this patch, \nbecause I'm not sure if (1) is genuinely a bug or not. I may be wrong here, as \nI am not up on all the details of the spec, but if you add spaces at the end \nof some text which is then dealt with by whitespace handling rules, in this \ncase, multiple spaces collapsed into 1, then wouldnt you expect these to \nappear in the output? Perhaps the real bug here is the spaces collapsed in the \nthird paragraph do not generate a single trailing space?\n\n\n\nChris"}, {"count": 3, "tags": [], "bug_id": 28706, "attachment_id": null, "id": 57450, "time": "2004-05-14T21:37:31Z", "creator": "spepping@apache.org", "creation_time": "2004-05-14T21:37:31Z", "is_private": false, "text": "Chris,\n\nA trailing space at the end of the last line of a paragraph is\ncertainly a problem; it simply should not be there. While it does not\ncause much harm, it is better to avoid it. It does point to a slight\nproblem in the logic of the code. The addition of the else branch\nremedies that problem.\n\nThe word 'spaces' is there allright without the patch. The addition of\nthe else branch has nothing to do with it. The argument refers back to\npatch 28314, where the word 'spaces' disappeared unless a change was\napplied which added bp to vecInlineBreaks. I argue that I am not\ncompletely happy with this change, and prefer to review the return\nvalue of prevCouldEndLine, such that it returns false if prev is the\nlast item in vecInlineBreaks:\n\nif (vecInlineBreaks.get(vecInlineBreaks.size() - 1) == prev) {\n    return false;\n}\n\nWith this addition to prevCouldEndLine, instead of adding bp to\nvecInlineBreaks, the disappearance of the word 'spaces' is avoided as\nwell.\n\nSimon\n\n"}, {"count": 4, "tags": [], "bug_id": 28706, "attachment_id": null, "id": 57531, "time": "2004-05-17T07:42:36Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-05-17T07:42:36Z", "is_private": false, "text": "Hi Simon,\n\nthanks for your additional comments.\n\nOn your first point regarding trailing spaces, just to be clear, are you \nsaying there shouldnt be trailing spaces according to the XSL-FO \nspecification, or is this your opinion? Either way, you may be right, I just \nwant to understand this problem from a specification point of view. After all \nthere is a lot of talk about whitespace handling in the spec, and my \nunderstanding was that this is all dealt with in Block.handleWhiteSpace and so \nany whitespace left after that is intentional by the user, and by preserving \nit FOP is conforming with the spec.\n\nOn your second point, I'm afraid I still dont follow completely. You are \nanalysing the problem from a code perspective and seeing a possible flaw in \nthe logic. I understand that, and your reasoning looks good. However, I am \ntaking a step back and saying I do not see the word \"spaces\" disappearing. \nDont forget that patch 28314 is applied to CVS, so if that patch is the cause \nof the word disappearing I'm a little puzzled why it doesnt disappear when I \nrun the test. If you have a different test case, then please attach it. Is \nanyone else observing this anomaly?\n\nChris"}, {"count": 5, "tags": [], "creator": "spepping@apache.org", "attachment_id": null, "is_private": false, "id": 57662, "time": "2004-05-19T18:39:32Z", "bug_id": 28706, "creation_time": "2004-05-19T18:39:32Z", "text": "1. See XSL-PR/slice7.html#suppress-at-line-break, whose default value\n   is 'auto'. Block.handleWhiteSpace cannot handle this because it\n   runs at the refinement stage.\n\n2. This point is about code level. When you take a step back, you\n   cannot see the point.\n\n"}, {"count": 6, "tags": [], "bug_id": 28706, "text": "Thanks for the link Simon.\n\nAlthough this patch may be redundant now with Luca's proposal on the way.", "id": 57685, "time": "2004-05-20T08:25:23Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2004-05-20T08:25:23Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 28706, "text": "Applied the patch in a rewritten form.\n", "id": 58365, "time": "2004-05-29T09:09:39Z", "creator": "spepping@apache.org", "creation_time": "2004-05-29T09:09:39Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 28706, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155513, "time": "2012-04-01T06:25:32Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:25:32Z", "tags": [], "is_private": false}]
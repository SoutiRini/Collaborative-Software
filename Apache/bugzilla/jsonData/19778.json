[{"count": 0, "tags": [], "bug_id": 19778, "text": "An UTF-8-encoded source gets mangled if I use the xml-flavour of Jasper tags.\n\n\nThis works:\n\n\n<%@page contentType=\"text/html; charset=UTF-8\" %>\n<%@page pageEncoding=\"UTF-8\" %>\n\n  <html>\n    <head>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    </head>\n    <body>\n      <h1>Libert\u00e9</h1> <!-- this is an e with accent (&#xe9;) -->\n    </body>\n  </html>\n\n<!-- Local Variables: -->\n<!-- coding:utf-8 -->\n<!-- End: -->\n\n\nThis does not work:\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\n<jsp:root xmlns=\"http://java.sun.com/JSP/Page\" version=\"1.2\">\n\n<jsp:directive.page pageEncoding=\"UTF-8\" />\n<jsp:directive.page contentType=\"text/html; charset=UTF-8\" />\n\n  <html>\n    <head>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    </head>\n    <body>\n      <h1>Libert\u00e9</h1> <!-- this one gets mangled -->\n    </body>\n  </html>\n\n</jsp:root>\n\n<!-- Local Variables: -->\n<!-- coding:utf-8 -->\n<!-- End: -->", "id": 36929, "time": "2003-05-08T20:16:38Z", "creator": "marcello@perathoner.de", "creation_time": "2003-05-08T20:16:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "ParserController.java:245\n\n    // Figure out the encoding of the page\n    // FIXME: We assume xml parser will take care of\n    // encoding for page in XML syntax. Correct?\n\nWrong. The xml parser gets called with an InputStreamReader as \nInputSource. From the SAX docs we get:\n\nhttp://xml.apache.org/xerces2-j/javadocs/api/org/xml/sax/InputSource.html\n\n    The SAX parser will use the InputSource object to determine how to\n    read XML input. If there is a character stream available, the\n    parser will read that stream directly, disregarding any text\n    encoding declaration found in that stream. If there is no\n    character stream, but there is a byte stream, the parser will use\n    that byte stream, using the encoding specified in the InputSource\n    or else (if no encoding is specified) autodetecting the character\n    encoding using an algorithm such as the one in the XML\n    specification. If neither a character stream nor a byte stream is\n    available, the parser will attempt to open a URI connection to the\n    resource identified by the system identifier.\n\nInputStreamReader provides a character stream. So the xml parser will \ndo no encoding whatsoever. \n\nThis patch works for me:\n\n--- ParserController-original.java\tWed Mar 19 10:20:58 2003\n+++ ParserController.java\tFri May  9 17:17:29 2003\n@@ -188,11 +188,16 @@\n \n             // dispatch to the proper parser\n \t    \n-            reader = getReader(absFileName, encoding);\n             if (isXml) {\n+\t\tInputStream in;\n+\t\tin = ctxt.getResourceAsStream(absFileName);\n+\t\tif (in == null) {\n+\t\t    throw new FileNotFoundException(absFileName);\n+\t\t}\n                 parsedPage = JspDocumentParser.parse(this, absFileName,\n-\t\t\t\t\t\t     reader, parent);\n+\t\t\t\t\t\t     in, parent);\n             } else {\n+\t\treader = getReader(absFileName, encoding);\n \t\tJspReader r = new JspReader(ctxt, absFileName, encoding,\n \t\t\t\t\t    reader,\n \t\t\t\t\t    compiler.getErrorDispatcher());\n--- JspDocumentParser.java\tFri May  9 17:17:44 2003\n+++ JspDocumentParser-original.java\tWed Mar 19 10:20:58 2003\n@@ -120,13 +120,13 @@\n      */\n     public JspDocumentParser(ParserController pc,\n \t\t\t     String path,\n-\t\t\t     InputStream in) {\n+\t\t\t     InputStreamReader reader) {\n \tthis.parserController = pc;\n \tthis.ctxt = pc.getJspCompilationContext();\n \tthis.taglibs = pc.getCompiler().getPageInfo().getTagLibraries();\n \tthis.err = pc.getCompiler().getErrorDispatcher();\n \tthis.path = path;\n-\tthis.inputSource = new InputSource(in);\n+\tthis.inputSource = new InputSource(reader);\n     }\n \n     /*\n@@ -136,9 +136,9 @@\n      */\n     public static Node.Nodes parse(ParserController pc,\n \t\t\t\t   String path,\n-\t\t\t\t   InputStream in,\n+\t\t\t\t   InputStreamReader reader,\n \t\t\t\t   Node parent) throws JasperException {\n-\tJspDocumentParser handler = new JspDocumentParser(pc, path, in);\n+\tJspDocumentParser handler = new JspDocumentParser(pc, path, reader);\n \thandler.current = parent;\n \tNode.Nodes pageNodes = null;\n ", "attachment_id": null, "bug_id": 19778, "id": 36985, "time": "2003-05-09T15:34:35Z", "creator": "marcello@perathoner.de", "creation_time": "2003-05-09T15:34:35Z", "is_private": false}, {"id": 44642, "tags": [], "bug_id": 19778, "is_private": false, "count": 2, "text": "Yes. You are right!\nBut have some errors in your patch. You wrote:\n\n--- JspDocumentParser.javaFri May  9 17:17:44 2003\n+++ JspDocumentParser-original.javaWed Mar 19 10:20:58 2003\n@@ -136,9 +136,9 @@\n      */\n     public static Node.Nodes parse(ParserController pc,\n    String path,\n-   InputStream in,\n+   InputStreamReader reader,\n    Node parent) throws JasperException {\n-JspDocumentParser handler = new JspDocumentParser(pc, path, in);\n+JspDocumentParser handler = new JspDocumentParser(pc, path, reader);\n handler.current = parent;\n Node.Nodes pageNodes = null;\n\nbut it mast be like this:\n\n--- JspDocumentParser.javaFri May  9 17:17:44 2003\n+++ JspDocumentParser-original.javaWed Mar 19 10:20:58 2003\n@@ -136,9 +136,9 @@\n      */\n     public static Node.Nodes parse(ParserController pc,\n    String path,\n-   InputStreamReader reader,\n+   InputStream in,\n    Node parent) throws JasperException {\n-JspDocumentParser handler = new JspDocumentParser(pc, path, reader);\n+JspDocumentParser handler = new JspDocumentParser(pc, path, in);\n handler.current = parent;\n Node.Nodes pageNodes = null;\n", "time": "2003-09-25T07:39:55Z", "creator": "maverick_grey@mail.ru", "creation_time": "2003-09-25T07:39:55Z", "attachment_id": null}, {"id": 44644, "tags": [], "bug_id": 19778, "attachment_id": null, "count": 3, "text": "*** Bug 23388 has been marked as a duplicate of this bug. ***", "time": "2003-09-25T07:41:40Z", "creator": "maverick_grey@mail.ru", "creation_time": "2003-09-25T07:41:40Z", "is_private": false}, {"count": 4, "tags": [], "text": "In JSP 2.0 the I18N approach was revisited and the encoding algorithm for XML\nsyntax redefined.  This part of Jasper in Tomcat 5 was rewritten.  Can you guys\nverify if Tomcat 5 works correctly here?", "is_private": false, "bug_id": 19778, "id": 44706, "time": "2003-09-25T17:41:51Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-09-25T17:41:51Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 19778, "text": "*** Bug 22502 has been marked as a duplicate of this bug. ***", "id": 64072, "time": "2004-09-22T21:49:59Z", "creator": "markt@apache.org", "creation_time": "2004-09-22T21:49:59Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 19778, "text": "Note duplicate contains an alternative patch. I haven't evaluated either.", "id": 64073, "time": "2004-09-22T21:50:33Z", "creator": "markt@apache.org", "creation_time": "2004-09-22T21:50:33Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 19778, "text": "This has been fixed in CVS for TC4. Note that TC5 handles this correctly.", "id": 64580, "time": "2004-10-04T20:12:40Z", "creator": "markt@apache.org", "creation_time": "2004-10-04T20:12:40Z", "is_private": false, "attachment_id": null}]
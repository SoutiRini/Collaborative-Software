[{"count": 0, "tags": [], "text": "Created attachment 24016\ntestcase mentioned in the bug report\n\nJust as the title says, sometimes when rasterising an SVG file at small sizes, the bottom row of the raster image appears completely transparent.\n\nLet's take for example the following file:\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"10\" width=\"19\">\n<rect width=\"19\" height=\"10\" fill=\"lime\"/>\n</svg>\n\nObviously, this image is fully green (ff0000), and so should be any rasterisation of this image. However, when rasterising it with Batik at a width of 22px (rasterizer -w 22 -m image/png file.svg), all pizels on the bottom row of the resulting PNG file are completely transparent.\nNeedless to say, this behaviour makes it difficult to align images properly or put a border around one, as MediaWiki does.", "is_private": false, "id": 129024, "creator": "fibonacci.prower@gmail.com", "time": "2009-07-21T14:17:33Z", "bug_id": 47555, "creation_time": "2009-07-21T14:17:33Z", "attachment_id": 24016}, {"count": 1, "attachment_id": null, "bug_id": 47555, "is_private": false, "id": 129025, "time": "2009-07-21T15:54:19Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-07-21T15:54:19Z", "tags": [], "text": "(In reply to comment #0)\n> Let's take for example the following file:\n> \n> <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"10\" width=\"19\">\n> <rect width=\"19\" height=\"10\" fill=\"lime\"/>\n> </svg>\n> \n> Obviously, this image is fully green (ff0000)\n\nYes, I agree with this part.\n\n\n> and so should be any\n> rasterisation of this image.\n\nNo, I don't agree with this. I guess there might be some confusion here between the source image and the target canvas where the image is to be \"displayed\" (an image buffer written in a file, in this particular case).\n\nFor example, the following (based in the attached sample) will fit the canvas (using the a combination of \"width\" and \"height\" set to \"100%\" and the \"viewBox\" [1] set coherently): \n\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\" height=\"100%\" viewBox=\"0 0 19 10\">\n  <rect width=\"19\" height=\"10\" fill=\"lime\"/>\n</svg>\n\nNote that the image is increased until the width *or* height touches the canvas border. And the following will cause the image to stretch (possibly with distortion) until the canvas is completely filled (note the \"preserveAspectRatio\" [2] set to \"none\"):\n\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100%\" height=\"100%\" viewBox=\"0 0 19 10\" preserveAspectRatio=\"none\">\n  <rect width=\"19\" height=\"10\" fill=\"lime\"/>\n</svg>\n\n\n> Needless to say, this behaviour makes it difficult to align images properly\n> or put a border around one, as MediaWiki does.\n\nI understand the use case here but am not sure what is the problem here: Batik's behavior is, as far as I know, compliant to the specification regarding this. I'd say that wisely choosing rasterization hints and/or slightly rework (probably a copy of) the original SVG source before rasterizing may help assuring that the image fits the target (rasterization) canvas.\n\n\nPlease detail a bit on the problem (marking as need info in order to try obtaining it), as currently this issue seems to be invalid in my opinion (and please mark it so if you end up agreeing with the above). ;-)\n\n\n[1] http://www.w3.org/TR/SVG11/coords.html#ViewBoxAttribute\n[2] http://www.w3.org/TR/SVG11/coords.html#PreserveAspectRatioAttribute"}, {"count": 2, "tags": [], "text": "In the two test cases you proposed, I get a 22\u00d7400px image when rasterising it. I don't know where does the program get the 400px information from, but I sure didn't specify it - not in the command line, and certainly not in the SVG file!\n\nAnyway, let's suppose for a moment Batik is rendering the SVG image in the specified canvas - which was never fully specified by the way, only its width was.\nLet's further suppose that Batik stretches the image until its width touches the canvas border (not its height - remember, the height of the canvas was never fully specified!)\nIn this particular test case (19px wide image rasterised as 22px wide) the height of the SVG rasterisation should be 220/19px, or approximately 11.58 pixels. For some reason, the program chose to approximate that as 12px for the height of the canvas, but 11px for the height of the rectangle (the bottom line is fully 100% transparent - #00000000 pixels - not even a bit green).\nThe problem isn't, then, that Batik leaves a transparent line for no reason, but that it chooses the size of the canvas badly for no apparent reason, which is not invalid.\n\nHow do I ensure that the image fits the canvas, then?", "is_private": false, "bug_id": 47555, "id": 129026, "time": "2009-07-21T16:31:42Z", "creator": "fibonacci.prower@gmail.com", "creation_time": "2009-07-21T16:31:42Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 47555, "is_private": false, "id": 129027, "time": "2009-07-21T18:11:43Z", "creator": "deweese@apache.org", "creation_time": "2009-07-21T18:11:43Z", "tags": [], "text": "The 'fully' transparent bottom pixels is caused by the implicit\nclip path of the root SVG element (try adding 'overflow=\"visible\"').\n\nClip path's in SVG are generally 'hard edged' so the clip either\nneeds to be at '11' or at '12'.  The G2D rasterizer decides on 11,\nthe rasterizer rounds to the nearest pixel.\n\nAt the same time the ImageTranscoder rounds the width and height to\nthe nearest integer (12).\n\nThe issue here is that if one were to change the ImageTranscoder\nto always round down, then someone would complain that we cut off\ntheir 1 pixel high stroke around the image because it only\ncovered .99 of the bottom pixel, etc.\n\nA perhaps better solution would be to integerize the width and\nheight before applying the viewing transform then you could \nallow for the slightly non-uniform scaling needed to perfectly\nalign your viewbox with the pixel grid with the preserveAspectRatio\nattribute:\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"10\" width=\"19\"\n     viewBox=\"0 0 19 10\" preserveAspectRatio=\"none\">\n<rect width=\"19\" height=\"10\" fill=\"lime\"/>\n</svg>\n\nIndex: sources/org/apache/batik/transcoder/image/ImageTranscoder.java\n===================================================================\n--- sources/org/apache/batik/transcoder/image/ImageTranscoder.java      (revision 796594)\n+++ sources/org/apache/batik/transcoder/image/ImageTranscoder.java      (working copy)\n@@ -75,6 +75,13 @@\n     protected ImageTranscoder() {\n     }\n \n+    protected void setImageSize(float docWidth, float docHeight) {\n+        super.setImageSize(docWidth, docHeight);\n+\n+        width  = (int)(width + 0.5f);\n+        height = (int)(height + 0.5f);\n+    }\n+\n\n------------------\n\n   That said I think you are just asking for trouble trying to rasterize\ncontent that doesn't match your desired pixel grid if you require pixle\nperfect rendering."}, {"count": 4, "tags": [], "text": "Well, I'm not asking for pixel-perfect rendering, just for consistent behaviour so my rasterised files align nicely.\nPerhaps ImageTranscoder shouldn't always round down for the reason you say (I can imagine that being a problem), but both that AND the G2D rasteriser should round to the nearest integer - the important thing being that they both round in the same way.\nI don't know enough about the Batik source code (or even Java) to see if that's what your patch does.", "is_private": false, "id": 129035, "creator": "fibonacci.prower@gmail.com", "time": "2009-07-22T02:04:39Z", "bug_id": 47555, "creation_time": "2009-07-22T02:04:39Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> Well, I'm not asking for pixel-perfect rendering, just for consistent behaviour\n> so my rasterised files align nicely.\n\n   You are asking for pixel-perfect rendering.  The Batik renderinging\nis effectively \"off\" by .57 of a pixel.  I understand the desire for your\nrasterized files to align nicely but you should understand that what you\nare asking for is not as simple as you seem to think.\n\n   What I don't understand is why you would describe content as\nbeing 19x10 and then be surprise when the rendered version doesn't\nexactly match the pixel grid at 22x12.  Why don't you simply write\nyour content to be 22x12 if that is what you want it rendered at?\n\n> Perhaps ImageTranscoder shouldn't always round down for the reason you say (I\n> can imagine that being a problem), but both that AND the G2D rasteriser should\n> round to the nearest integer - \n\n   I don't control the G2D (it's from the JDK java.awt.Graphics2D), if you \nwant to file a bug with Sun/Oracle that would be fine with me ;)\n\n> the important thing being that they both round in the same way.\n\n   It is a fools errand to try to make these match in all cases.\nUnless the clip and the rasterized image bounds are the same \n(and there are reasons in the SVG standard why they aren't) \nthere will essentially always be some cases around .5 where they\ngo in different directions.\n\n> I don't know enough about the Batik source code (or even Java) to see \n> if that's what your patch does.\n\n    It is not what my patch does.  My patch makes it easier for you\nto stretch your 19x10 content to a 22x12 rectangle which requires\nscaling horizontally by 22/19 = 1.158 and vertically by 12/10 = 1.2", "is_private": false, "id": 129037, "creator": "deweese@apache.org", "time": "2009-07-22T02:42:04Z", "bug_id": 47555, "creation_time": "2009-07-22T02:42:04Z", "attachment_id": null}]
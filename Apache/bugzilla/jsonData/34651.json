[{"count": 0, "tags": [], "bug_id": 34651, "is_private": false, "text": "The files are rolling, but it often lack a header/footer to make it usable in\nmany software.\n\nExample, a csv pattern would be defined, but the column names header would need\nto be written on top of each file upon creation.\n\nActually, the full feature is more like addind header and footer to the log file.\n\nTo support multiline headers, the log4j property file should merely accept \\n\nand/or \\r (which I think java.util.Properties already supports).", "id": 74184, "time": "2005-04-27T19:57:43Z", "creator": "quartz12h@yahoo.com", "creation_time": "2005-04-27T19:57:43Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "carnold@apache.org", "text": "*** Bug 40350 has been marked as a duplicate of this bug. ***", "id": 119767, "time": "2008-08-12T15:19:52Z", "bug_id": 34651, "creation_time": "2008-08-12T15:19:52Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "carnold@apache.org", "text": "*** Bug 40349 has been marked as a duplicate of this bug. ***", "id": 119769, "time": "2008-08-12T15:22:48Z", "bug_id": 34651, "creation_time": "2008-08-12T15:22:48Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "Just a warning for developers, there seems to be a set header and set footer on some appenders, but although these methods exist, they do not perform the required task.\n\nMeanwhile, it is not always a matter of writing the header when the appender opens, and the footer when the appender closes.\n\nIt is sometimes a matter of producing a file that has only 1 header and/or only 1 footer. This means the appender must open and read the file before being ready for appending it.\n\nOverall, there is the following desired features:\n-inject a header when appender is opening\n-inject a header when file is opening\n-inject a footer when appender is closing\n-inject a footer when file is closing (with the garanty that there wouldn't be any further appending)\n\nTherefore I suggest the following distinct attribute:\na) file header\nb) session header\nc) session footer\nd) file footer\n\nImplementation of b) and c) are trivial.\n\nFor the implementation of a), it is not really time consuming to read the beginning of the file to detect the existence of the file header. It could be only to test if file is of length>0, unless you can find any reason not to implement it this way first. After all the appender could be using a tight binary format, with a header of 1 byte!\n\nFor the implementation of d), it is possibly a performance tax to read the file to discover if a footer exists (not to mention the difficulty to prove the end of the file is a footer and not data), in order to remove it and append over there. The behavior in presence of an existing footer could be left to the implementor of the header/footer-able-appender subclass:\n\n-never append an existing file and always roll to another file\n-test for perfect equality between intended footer and existing tail part of file\n-etc...\n\n", "bug_id": 34651, "is_private": false, "id": 119772, "time": "2008-08-12T19:02:11Z", "creator": "quartz12h@yahoo.com", "creation_time": "2008-08-12T19:02:11Z", "tags": [], "attachment_id": null}]
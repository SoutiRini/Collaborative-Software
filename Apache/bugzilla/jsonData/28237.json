[{"count": 0, "tags": [], "creator": "spepping@apache.org", "is_private": false, "id": 55418, "attachment_id": null, "bug_id": 28237, "creation_time": "2004-04-06T17:35:31Z", "time": "2004-04-06T17:35:31Z", "text": "Use the commons logging LogFactory also in Fop.java. Do not\nset the log level, but let that be set by the log implementation's own\nconfiguration.\n\nFor backwards compatibility retain the command line options -d and\n--full-error-dump, -q and --quiet. These options create a hard-coded\nSimpleLog instance with the appropriate log level set. For the -x\ncommand line option, if debug logging is not enabled, create a\nhard-coded SimpleLog instance with log level set to debug.\n\nWith this change the command line logger is also configured according\nto the commons logging user preferences, and according to the user\npreferences for the chosen log implementation, like many other loggers\nin the system. This should be reflected in the instructions. The\ncommand line logger is also used by the LM system."}, {"count": 1, "tags": [], "bug_id": 28237, "attachment_id": 11157, "text": "Created attachment 11157\nThe patch as described", "id": 55419, "time": "2004-04-06T17:36:19Z", "creator": "spepping@apache.org", "creation_time": "2004-04-06T17:36:19Z", "is_private": false}, {"count": 2, "tags": [], "creator": "glenmazza@yahoo.com", "attachment_id": null, "id": 55426, "time": "2004-04-06T21:48:47Z", "bug_id": 28237, "creation_time": "2004-04-06T21:48:47Z", "is_private": false, "text": "Simon, if I understand you correctly (and pardon me, I'm not a logging expert):\n\n1.) With our current process of setting the logger in FOP.java directly, we end \nup overriding whatever the command-line user may have specified on their \nmachine?  (Remember, FOP embedded users set Logging via the Driver class \nanyway.)\n\n2.) Will FOP still quietly default to SimpleLog if the user doesn't enter \nanything explicitly?  I would guess 95%* of our **command-line** user base \neither doesn't care about logging, or if they did care they want the command-\nline output (i.e., SimpleLog) anyway--does your change reflect this?  We don't \nwant users practicing with the command line to have to distract themselves with \nthe logger.\n\n3.)  As another option for the command-line user, given only a small minority \nwant to log to a file, would it be better to provide a -logfile option, that \nonce specified, logs to that file, and absent the setting of that option, will \ngo quietly go to the SimpleLog?\n\nThanks,\nGlen\n"}, {"count": 3, "tags": [], "bug_id": 28237, "attachment_id": null, "id": 55496, "time": "2004-04-07T20:37:40Z", "creator": "spepping@apache.org", "creation_time": "2004-04-07T20:37:40Z", "is_private": false, "text": "Glen,\n\n            SimpleLog log = new SimpleLog(\"FOP\");\n            log.setLevel(SimpleLog.LOG_LEVEL_INFO);\n            driver.setLogger(log);\n            \n            driver.getLogger().info(version);\n            options = new CommandLineOptions(args);\n\nThis code in Fop.java has three problems:\n\n1. SimpleLog is configured by Java system properties. The second line\n   above overrules that, against reasonable expectations of users. If\n   a user does nothing, SimpleLog selects a reasonable default: info.\n\n2. The command line options -d and -e are used to configure the Log\n   object of the options object. This log is not passed on to driver,\n   and thus gets lost.\n\n3. Commons logging is also configured by Java system properties. A\n   user may configure it to use a certain logging implementation,\n   e.g. Log4J. Hard coding a SimpleLog instance goes against\n   reasonable expectations of users when we advertise that we use\n   commons logging. If a user does nothing he gets the JDK 1.4 logging\n   if he runs that version, and SimpleLog otherwise.\n\nI believe that my patch makes Fop's logging behaviour consistent with\nthe claim that we use commons logging, and with the documented\nconfiguration options of commons logging. And it makes it consistent\ninternally. Note that Jeremias changed the code of many classes to use\ncommons logging.\n \nSimpleLog logs to stderr; only redirection sends it to a file (and\nthat is impossible under MSWindows command and cmd shells). For\ncommand-line users that seems appropriate; other users should select\nand configure a log implementation that suits them. With commons\nlogging configuring logging via command line options is not really\nappropriate.\n\nThis is all I discovered. I went into this because I was hit by the\ninconsistencies in the current logging. For example, currently\ngetlogger().debug(xxx) in FOText.java will not give you anything for\nthe reasons I described under 1 and 2 above.\n\nRegards, Simon\n"}, {"count": 4, "tags": [], "bug_id": 28237, "attachment_id": null, "text": "Thanks for the explanation, Simon.  I understand a lot more now and have\ncommitted most of your patch, but with a few changes.  Please take a look at the\nnew version and let me know what you think.\n\nChanges I didn't commit were a couple of minor issues I had some question\non--namely, your wrapping and creating of new logs based on -d and -q options in\nCLO.parseOptions(): \n\n(a) why place within isDebugEnabled() and isWarnEnabled() conditionals, why does\nthis matter?\n\n(b) one conditional is !isDebugEnabled() with a negative but the other is the \npositive isWarnEnabled()--was this a bug?  \n\n(c) Finally, did you actually mean isErrorEnabled() for the latter?\n\nBTW, please always use { } for the conditionals instead of single-lines [1]:\nif (a > b) {\n    c = d;\n}\n\nhttp://xml.apache.org/fop/dev/conventions.html\n\nThanks again,\nGlen", "id": 55553, "time": "2004-04-09T03:18:43Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-04-09T03:18:43Z", "is_private": false}, {"count": 5, "tags": [], "creator": "spepping@apache.org", "is_private": false, "id": 55558, "attachment_id": null, "bug_id": 28237, "creation_time": "2004-04-09T10:09:37Z", "time": "2004-04-09T10:09:37Z", "text": "Glen,\n\n> (a) why place within isDebugEnabled() and isWarnEnabled()\n> conditionals, why does this matter?\n\nTo be as reticent as possible. If a user uses -d but his configuration\nalso sets the log level to debug, he already has what he wants; skip\nthe command line option silently. Similarly with -q.\n \n> (b) one conditional is !isDebugEnabled() with a negative but the other\n> is the positive isWarnEnabled()--was this a bug?\n\n-d and !isDebugEnabled() means that the user does not yet have debug\nlog level but requests it, so we have to do something. -q and\nisWarnEnabled() means that the user still has warning level or a more\nverbose level on but requests quiet mode (error level), so we have to\ndo something.\n \n> (c) Finally, did you actually mean isErrorEnabled() for the latter?\n\nNo, isErrorEnabled() means error level enabled and perhaps more\nverbose. We need to ensure that we are not more verbose than error\nlevel, that is, !isWarnEnabled().\n\nFor the dumpConfiguration method of CommandLineOptions, if the user\nrequests -x but does not set debug log level, he sees no configuration\ndump. That does not serve the user well. My patch checked that and\nused a debug enabled SimpleLog in that case. Alternatively, it might\nbe a good idea to show the configuration at info log level; after all,\nthis is information that the user explicitly requested.\n\nRegards, Simon\n"}, {"count": 6, "text": "Created attachment 11267\nanother logging solution", "bug_id": 28237, "attachment_id": 11267, "id": 55939, "time": "2004-04-17T08:21:21Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-04-17T08:21:21Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 28237, "attachment_id": null, "id": 55940, "time": "2004-04-17T08:36:12Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-04-17T08:36:12Z", "is_private": false, "text": "Simon (and others),\n\nFor the remaining three issues remaining, please take a look at the patch I just\nadded.\n\n1.)  I removed the -debug and -quiet options, because they just cover over the\ncommons-logging settings.  Also I'm leery of switching to SimpleLog as a\ndefault, seeing the Commons Logging will normally use JDK1.4 logging.\n\nRather than use an API that covers up Commons-Logging functionality (i.e., -d\nand -q), I would rather have us make it very simple for the user to use/learn\nthe exact commons-logging method, which brings up:\n\n2.)  In fop.bat and fop.sh, (I only tested the former, I'll need someone to\ncheck the latter), I created commented-out lines that will allow the user to\nchoose a different logger from the default JDK1.4 and the logging level (the\nlatter, iff they're using SimpleLog).\n\n3.)  Per your last comment below, on using .info() instead of .debug() in the\ndumpConfiguration() nee debug() method--I agree, that should be the message\nlevel instead because that is what the user is specifically requesting.  My\npatch does this, but without switching to a SimpleLog() to guarantee output. \nThe drawback is that if the user specifically chooses \"error\" or \"fatal\", etc.,\nas a level, that will take precedence over setting this field, and as a\nconsequence this information won't be shown.  OTOH, the logger that the user\nspecifically chose externally won't be overridden.  I suspected the latter was\nthe lesser of two evils, and so went with that.  Your thoughts?\n\nThanks,\nGlen"}, {"count": 8, "tags": [], "bug_id": 28237, "attachment_id": null, "id": 55970, "creation_time": "2004-04-18T03:27:09Z", "time": "2004-04-18T03:27:09Z", "creator": "pbwest@powerup.com.au", "text": "Glen, Simon, et al.\n\nI have a problem with commons-logging.  It deliberately leaves the configuration\nto the user and the underlying logging system.  One example of this is in the\ndynamic setting of log levels.  FOP allows a command line (or user\nconfiguration) override of the logging level.  This code has been the focus of\nsome discussion here.  To my way of thinking, such an override is not a\nconfiguration issue per se, but extends to be a run-time issue.  Consider the\nsituation in which we wish to allow the logging level to be changed during the\nlifetime of a single FOP instance; to allow, e.g., an administrator to get more\ninformation about a misbehaving instance.\n\nSimpleLog provides this facility, and it is (was?) used in the -d switch\nprocessing.  I can't do that if I am using Jdk14Logger, Jdk13LumberjackLogger or\nLog4JLogger.  I don't know whether Log4JLogger supports log level changes, and\nit doesn't partucularly matter.  Jdk14Logger and presumably\nJdk13LumberjackLogger do, and it's a very useful facility, even if only to\nsupport command line settings.\n\nI've taken the issue up on the (overcrowded) jakarta-commons dev list, and been\ntold that it's a configuration issue, and that SimpleLog has the facility\nbecause there is no underlying logger.  I don't see it, but it's not worth\narguing about there, especially as it was suggested that I subclass the relevant\ninterfaces and classes if I wanted the facility.  That seems to be the way to go.\n\nThe alternative is to drop back to the native logger whenever a change of level\nis required, which seems to me to rather defeat the purpose.\n\nSimon's original point I think ran counter to this proposal (\"create a\nhard-coded SimpleLog instance with the appropriate log level set\").  Note,\nthough, that the behaviour of the default common-logging LogFactory is to create\na single log instance *of any given name*.  If we create a log named \"FOP\" (or\n\"org.apache.fop\" if we are following the 1.4 recommendations), it is not going\nto interfere with the logging of any other applications, but the user will\nexpect to see changes to the level reflected in the Fop log (but see\nconfiguration details below).\n\nIf users have set up debugging in the user configuration file, we ought to give\nthem debug logging.  If there is a conflict with some other setting, it is the\nuser's responsibility.  If there is a command line switch for debugging, the\nrequirement is even more definite.\n\nThe default logging selection behaviour is quite complex:\nFind a LogFactory\n  a system property named org.apache.commons.logging.LogFactory\n  JDK 1.3 JAR Services Discovery - a resource named\n       META-INF/services/org.apache.commons.logging.LogFactory\n  properties file commons-logging.properties:\n       property org.apache.commons.logging.LogFactory\n  else default LogFactory\n\nThe default LogFactory looks for:\n  configuration attribute org.apache.commons.logging.Log\n  else system property org.apache.commons.logging.Log\n  else if Log4J available, Log4JLogger\n  else if 1.4, Jdk14Logger\n  else SimpleLog\n\nI suspect that Jdk13LumberjackLogger might be in there between Jdk14Logger and\nSimpleLog.\n\nWhether the LogFactory that is in use is well behaved or not will depend on\nconfiguration details which are deliberately beyond our control, but the JDK and\ndefault LogFactory both guarantee a single instance of a Log of a given name. \nThis seems to satisfy one of Simon's difficulties.\n\"2. The command line options -d and -e are used to configure the Log\n   object of the options object. This log is not passed on to driver,\n   and thus gets lost.\"\n\nIf users are specifying a logging implementation which does *not* behave in this\nway, and in obeying their instructions about, say, debugging, we go over the top\nof their entire server logging, they need to fix their instructions to Fop or\nuse another logger.\n\nI agree with Simon that, in the absence of any specifics, we make no changes to\nthe inherited logging environment.\n\n\"3. Commons logging is also configured by Java system properties. A\n   user may configure it to use a certain logging implementation,\n   e.g. Log4J. Hard coding a SimpleLog instance goes against\n   reasonable expectations of users when we advertise that we use\n   commons logging. If a user does nothing he gets the JDK 1.4 logging\n   if he runs that version, and SimpleLog otherwise.\"\nAgree.\n\n\"SimpleLog logs to stderr; only redirection sends it to a file (and\nthat is impossible under MSWindows command and cmd shells).\"\nI didn't realise there was no redirection facility for cmd shells.\n\n\"For\ncommand-line users that seems appropriate; other users should select\nand configure a log implementation that suits them. With commons\nlogging configuring logging via command line options is not really\nappropriate.\"\nIt remains a possibility at the user's discretion, and I think we need to\nsupport it.\n\n\"... isErrorEnabled() means error level enabled and perhaps more\nverbose.\"\n\n The six logging levels used by Log are (in order):\n   1. trace (the least serious)\n   2. debug\n   3. info\n   4. warn\n   5. error\n   6. fatal (the most serious)\n\nI.e., warn is a superset of error.\n\nTo repeat, I think we should subclass commons-logging to provide setLevel and\ngetLevel, which can be no-ops if the underlying implementation does not support\nthem.", "is_private": false}, {"count": 9, "tags": [], "bug_id": 28237, "is_private": false, "text": "------- Additional Comments From pbwest@powerup.com.au 2004-04-18 03:27 -------\n\n>Glen, Simon, et al.\n>\n>I have a problem with commons-logging.  It deliberately leaves the configuration\n>to the user and the underlying logging system.  One example of this is in the\n>dynamic setting of log levels.  FOP allows a command line (or user\n>configuration) override of the logging level.  This code has been the focus of\n>some discussion here.  \n>\n\n>To my way of thinking, such an override is not a\n>configuration issue per se, but extends to be a run-time issue.  \n>\n\nPerhaps, but not many others appear to be thinking this way.  A considerable\nstatement, given all the apps--Tomcat, Axis, Struts, POI, Tapestry, Turbine,\netc., etc.--currently using commons-logging as-is.\n\nThe logging level *is* the prerogative of the user--they decide whether or not\nthey want to see \"info\" or \"debug\" statements.  We don't adjust the log level of\nthe logger, instead we declare the desired level of the message to be displayed.\n People choose debug level, or info level, and the app stays with that level.  \n\nWhen there *are* misbehaving instances, those error messages should be given\n\"warn\", \"error\", or \"fatal\" levels--which guarantees that they will show up in\nany logger with a \"debug\" or an \"info\" setting.  (i.e., Loggers *will* print out\nthe messages of more severe errors than that of what they are assigned for.  It\nis just that they will not display less severe errors.)\n\n>Consider the\n>situation in which we wish to allow the logging level to be changed during the\n>lifetime of a single FOP instance; to allow, e.g., an administrator to get more\n>information about a misbehaving instance.\n>\n\nActually, maybe we don't really need to consider it.  After all, you think the\nfolks at Tomcat, Turbine, et. al. have never considered that situation--have\nnever needed to?  All of them came to same conclusion--even under presumably\nmuch more demanding circumstances that FOP would have:  the logging level is to\nbe set by the user.   Craig McClanahan of Sun is probably the lead developer on\nTomcat, Struts, and Commons-Logging, and has been on all three for several years\nnow.  If programs not being able to set the logging level was an actual problem,\nit probably would have been long identified and fixed by now.  I believe the C-L\nteam came to the conclusion that would cause more headaches than it solves.\n\nI see two logical problems with the argument that the logging requirements of\nFOP go beyond what might be needed by a servlet container, J2EE server, or Web\nframework environment--i.e., the motivation for subclassing: \n\n(1)  FOP primarily runs *on* servlet containers, J2EE servers, and in Web\nframework.  But these servers don't need the ability to set the log\nlevel--they're not asking for it--so why do we? \n\n(2) Our programmatic cousins--Xalan and Batik--don't even use logging to begin\nwith.  (Sometimes I'm unsure if we even need it ourselves!)  If it is indeed\ntrue that it would be unworkable if FOP cannot set the logging level, would it\nnot follow that Xalan and Batik are immediately DOA because they don't even have\nloggers?\n\nWhat *is* important for us, however, is that the error messages printed out for\nthe \"misbehaving instance\" be detailed enough so the situation can be reproduced.\n\n>SimpleLog provides this facility, and it is (was?) used in the -d switch\n>processing.  \n>\n\nNo, that's not a runtime option--that's a command-line option that is fixed for\nthe life of the report generation.  This option was removed in my last patch,\nbecause it was quietly overriding what they have set up in C-L locally, and it\nwas only there for reasons of backward compatibility, which can't be deemed much\nof an issue anyway given that we've switched the logger.\n\n\n>I can't do that if I am using Jdk14Logger, Jdk13LumberjackLogger or\n>Log4JLogger.  I don't know whether Log4JLogger supports log level changes, and\n>it doesn't partucularly matter.  Jdk14Logger and presumably\n>Jdk13LumberjackLogger do, and it's a very useful facility, even if only to\n>support command line settings.\n>\n\nI moved the settings into the fop.bat and fop.sh files in my last (attached)\npatch.  I'm currently unsure how sufficient that is.  You do raise a valid point\nhere, however, CL will not allow us to use command line settings to change the\nlogging level.  The user needs to read up on the logger that they have chosen,\nand configure it according to that logger's directions.  Logging is truly a\n\"configuration\" item in the Java world.\n\n\n>\n>I've taken the issue up on the (overcrowded) jakarta-commons dev list, and been\n>told that it's a configuration issue, and that SimpleLog has the facility\n>because there is no underlying logger.  I don't see it, but it's not worth\n>arguing about there, especially as it was suggested that I subclass the relevant\n>interfaces and classes if I wanted the facility.  That seems to be the way to go.\n>\n\nActually, I think it *is* worth arguing about over there--the committers there\nhave studied logging for some time, they get all the debates and issues day in\nand day out.  What they (and Sun, with its 1.4 logger) are telling you--logging\nis a configuration and not a runtime issue--should carry some weight with you. \n\n\n\n>Note,\n>though, that the behaviour of the default common-logging LogFactory is to create\n>a single log instance *of any given name*.  If we create a log named \"FOP\" (or\n>\"org.apache.fop\" if we are following the 1.4 recommendations), it is not going\n>to interfere with the logging of any other applications, but the user will\n>expect to see changes to the level reflected in the Fop log (but see\n>configuration details below).\n>\n\nYes, and for the JDK1.4 logger in particular, you just need to edit the logging\nfile to specify that logger the designated for class \"X\" is to have \"Y\" level of\nlogging capability.  The user can already override it to his heart's content. \nSimpleLog can't do that (NoOpLog is also pretty constrained ;)--so if the user\nwishes this type of overriding they should switch to a different logger. \n(JDK1.4 logging is what 1.4 users will get by default anyway.)\n\n>\n>If users have set up debugging in the user configuration file, we ought to give\n>them debug logging.  If there is a conflict with some other setting, it is the\n>user's responsibility.  If there is a command line switch for debugging, the\n>requirement is even more definite.\n>\n\nWhich in my last patch, I removed, so there will be no confusing conflicts to\ncontend with.   Commons-Logging means commons-logging.  If users have problems\nwith its functionality, C-L is the place for them to take their concerns, to\nmake sure they are met in the next release.  It would be detrimental for\neveryone IMO to have each app using C-L override it (e.g., with command line\nsettings) with something different.\n\n\n>This seems to satisfy one of Simon's difficulties.\n>\"2. The command line options -d and -e are used to configure the Log\n>   object of the options object. This log is not passed on to driver,\n>   and thus gets lost.\"\n>\n\n\nActually, this would be only a difficulty if we wanted to retain this behavior\nof overwriting what they set up for C-L.  I disagreed with setting up extra\nloggers on top of what the users have already configured--in this case, losing\nbackwards compatibility is the lesser of two evils IMO--and so removed these\noptions from my latest patch.\n\n\n>To repeat, I think we should subclass commons-logging to provide setLevel and\n>getLevel, which can be no-ops if the underlying implementation does not support\n>them.\n>\n\nI don't think so--currently, the best solution appears to be for you to put an\nenhancement request to commons-logging for them to provide that functionality. \nLet's see what others say--users, CL developers.  But if the other apps aren't\nrequesting this functionality, and they are mostly of one voice that programs\nshould not be adjusting the user's choice of logging levels, then that would\nappear to be the way to go for us.  To a large extent, what you're telling us is\nthat the users of Commons-Logging, along with the C-L developers themselves, are\n in error.  Obviously, you have a tough case to make, and I think we need more\nconvincing examples.\n\nWhat is so special about FOP that it needs to make runtime switches of the\nlogging level, something that none of the (many) other C-L using apps need?\n\nThanks,\nGlen", "id": 55986, "time": "2004-04-18T18:05:37Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-04-18T18:05:37Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "spepping@apache.org", "is_private": false, "id": 55987, "attachment_id": null, "bug_id": 28237, "creation_time": "2004-04-18T19:28:58Z", "time": "2004-04-18T19:28:58Z", "text": "Glen,\n\nOn Sat, Apr 17, 2004 at 08:36:13AM -0000, bugzilla@apache.org wrote:\n> ------- Additional Comments From glenmazza@yahoo.com  2004-04-17 08:36 -------\n> Simon (and others),\n> \n> For the remaining three issues remaining, please take a look at the patch I just\n> added.\n> \n> 1.)  I removed the -debug and -quiet options, because they just cover over the\n> commons-logging settings.  Also I'm leery of switching to SimpleLog as a\n> default, seeing the Commons Logging will normally use JDK1.4 logging.\n> \n> Rather than use an API that covers up Commons-Logging functionality (i.e., -d\n> and -q), I would rather have us make it very simple for the user to use/learn\n> the exact commons-logging method, which brings up:\n\nI thought that we should retain backward compatibility, but if that is\nnot (yet) the case for the development branch, I am most happy to see\nthese options be dropped.\n \n> 2.)  In fop.bat and fop.sh, (I only tested the former, I'll need someone to\n> check the latter), I created commented-out lines that will allow the user to\n> choose a different logger from the default JDK1.4 and the logging level (the\n> latter, iff they're using SimpleLog).\n\nThat is very helpful. Frankly I think that users who are not satisfied\nwith the defaults really should study log configuration. But giving\nthem a headstart does not hurt us.\n \n> 3.)  Per your last comment below, on using .info() instead of .debug() in the\n> dumpConfiguration() nee debug() method--I agree, that should be the message\n> level instead because that is what the user is specifically requesting.  My\n> patch does this, but without switching to a SimpleLog() to guarantee output. \n> The drawback is that if the user specifically chooses \"error\" or \"fatal\", etc.,\n> as a level, that will take precedence over setting this field, and as a\n> consequence this information won't be shown.  OTOH, the logger that the user\n> specifically chose externally won't be overridden.  I suspected the latter was\n> the lesser of two evils, and so went with that.  Your thoughts?\n\nWith the info level, it is OK not to check whether the user has info\nlevel enabled; it is the default.\n\nI am quite happy with your patch.\n\nPeter,\n\nI generally agree with Glen's point of view. With this solution we\nhave chosen a good and well-respected logging solution, which has the\ngood sense to act as a middle man who gives the user a choice of\nlogging implementation. Answering queries about logging behaviour and\nfeatures is no longer on our shoulders.\n\nRegards, Simon\n"}, {"count": 11, "tags": [], "bug_id": 28237, "is_private": false, "id": 55991, "creation_time": "2004-04-18T22:41:29Z", "time": "2004-04-18T22:41:29Z", "creator": "glenmazza@yahoo.com", "text": "Patch applied.  I'm closing Simon's issue here, but Peter's concerns can still\nbe discussed on this bug page or on the FOP-DEV list directly.\n\nGlen", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 28237, "is_private": false, "id": 55992, "attachment_id": null, "creator": "pbwest@powerup.com.au", "creation_time": "2004-04-18T23:19:55Z", "time": "2004-04-18T23:19:55Z", "text": "Two related questions:\n\nIf logging levels are supposed to be set through configuration files, then\n\n1) why did the Sun guys put setLevel() in the API for java.util.logging?\n2) why did the commons-logging guys put setLevel() in SimpleLog?\n\n\"You're all individuals\" Brian\n\"Yes! We're all individuals\" Crowd\n\"You're all different\" Brian\n\"Yes! We are all different\" Crowd\n\"I'm not\" Dissenter\nMonty Python's Life of Brian "}, {"count": 13, "text": "1) why did the Sun guys put setLevel() in the API for java.util.logging?\n2) why did the commons-logging guys put setLevel() in SimpleLog?\n\nYou caught me on the first question--I noticed I was in error when I wrote:\n\n\" What they (and Sun, with its 1.4 logger) are telling you--logging\nis a configuration and not a runtime issue--should carry some weight with you. \"\n\nSun is *not* telling us this, precisely because they do have a setLevel().  (But\nthat does not necessarily mean they advocate calling programs from switching\nit--the user could be setting it for his own embedded program.)    \n\nIn the meantime, it may be helpful for you to look at C-L's team's thoughts on\nhaving a setLevel() below, and in the last link, a potential workaround as well\nas Craig McClanahan's concerns with modifying the underlying implementation from\nC-L:\n\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=102571996601634&w=2\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=101096333702331&w=2\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=101097934025726&w=2\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=101068848405397&w=2\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=101061362702721&w=2 (point 2)\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=14155 (sample workaround, also\nCraig's four problems with a setLevel())\n\nAlso, to give you a better idea of the usage of C-L, here's a list of the 88\nprojects currently linking with it:\n http://lsd.student.utwente.nl/gump/jakarta-commons/commons-logging/index.html#Project+Dependees\n\nGlen", "bug_id": 28237, "attachment_id": null, "id": 55994, "time": "2004-04-19T03:42:47Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-04-19T03:42:47Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 28237, "is_private": false, "text": "Glen,\n\nOne more...\n\n3) setLevel() has been part of the Log4J API since before Logger was born; i.e.\nwhen Logger was Category.\n\n\nWhat Sun is up to is summed up neatly in the java.util.logging description:\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/package-summary.html#package_description\n\nThe Log4J documentation also mentions the critical importance of logging for\ndebugging, quoting Kernighan and Pike on the superiority of judicious logging\nover interactive debuggers.  (Yes!)\n\nI discovered the limitations because I started the process of converting the\nrecently introduced 1.4 logging in alt-design to use commons-logging.  At some\nstage I will probably subclass commons-logging and apply that, so that at least\nthe logging invocations will look the same.\n\nThanks, Glen, for taking the trouble to look up the details of the usage of\ncommons-logging.  Unfortunately, Craig doesn't address the issue.  Currently,\ncommons-logging *forces* us to use the kind of \"work-around\" he describes.  But\nthat work-around is only necessary because of the absence of setLevel().  Not\nincluding it is an ideological decision which cripples the logging.\n\nIn the absence of commons-logging, users of 1.4, Log4J and Lumberjack can all\nsetLevel dynamically.  Craig might have decided that that is a Very Bad Thing,\nand that we must be protected from ourselves.  But the four points have no\nbearing on whether to provide setLevel(); they are all about getting the native\nlogger, which users are forced to do by the refusal to include setLevel in the\ninterface.  If it were included, there would be no need to get the native\nlogger.  The real workaround is to modify the interface and the implementations.\n\nAll any of us have to do is understand the arguments.  If they persuade us, it\ndoesn't matter how many or how few have adopted it.  Likewise if they fail to\npersuade.", "id": 56011, "time": "2004-04-19T11:30:43Z", "creator": "pbwest@powerup.com.au", "creation_time": "2004-04-19T11:30:43Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 28237, "is_private": false, "id": 156001, "creation_time": "2012-04-01T06:52:19Z", "time": "2012-04-01T06:52:19Z", "creator": "gadams@apache.org", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "attachment_id": null}]
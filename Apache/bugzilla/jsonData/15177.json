[{"count": 0, "tags": [], "creator": "r.daykin@pindar.com", "attachment_id": null, "text": "using log4J 1.2.6 on Windows NT4 jdk 1.2.2.  I suspect this bug may apply \ngenerally, but without testing, I'll not commit to that.\n\nWhen using an ExternallyRolledFileAppender, the appender opens a socket.  When \nthe config file is updated, the following exception is thrown repeatedly:\n\njava.net.BindException: Address in use: bind\n\tat java.net.ServerSocket.<init>(ServerSocket.java:181)\n\tat java.net.ServerSocket.<init>(ServerSocket.java:86)\n\tat org.apache.log4j.varia.HUP.run(ExternallyRolledFileAppender.java:110)\n\nI suspect that the PropertyWatchDog class needs to call resetConfiguration \nbefore loading the new config, though I wouldn't swear to it.\n\nto test use something like the following:\nLog.Properties:\n# Set root logger level to DEBUG and its only appender to A1.\nlog4j.rootLogger=DEBUG, CONSOLE, file\n\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%-5p [%d{dd/MM/yyyy HH:mm:ss \nz} - %t] %n%m%n\n\nlog4j.appender.file=org.apache.log4j.varia.ExternallyRolledFileAppender\nlog4j.appender.file.File=FooFile.log\nlog4j.appender.file.port=2025\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%-5p [%d{dd/MM/yyyy HH:mm:ss z} - %\nt] %n%m%n\nlog4j.appender.file.append=true\n\nFoo.java:\nimport org.apache.log4j.*;\nimport org.apache.log4j.varia.*;\n\npublic class Foo extends Object {\n\tprivate static Logger log;\n\t\n\tpublic Foo(String configFile) throws Exception {\n\t\tlog = Logger.getLogger(\"FooLog\");\n\t\tPropertyConfigurator.configureAndWatch(configFile);\n\t\tlog.debug( \"starting log\");\n\t}\n\n\t/**\n    */\n\tpublic static void main( String args[] ) throws Exception {\n\t\t// Incorrect number of args or is the arg is a request for \nusage help?\n\t\tif ((args.length != 1) || (args[0].compareTo(\"-h\") == 0)) {\n\t\t\tSystem.err.println( \"Usage: java \ncom.pindartech.CCCS.PrintServiceMain <CONFIGFILE>\" );\n\t\t\treturn;\n\t\t}\n\n\t\tFoo foo = new Foo(args[0]);\n\t\tlog.info( \"Foo created, running...\" );\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tlog.info(\"still here\");\n\t\t\t} catch (Exception e) {\n\t\t\t} finally {\n\t\t\t\tLogManager.shutdown();\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}", "id": 27547, "time": "2002-12-09T13:38:11Z", "bug_id": 15177, "creation_time": "2002-12-09T13:38:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "text": "ExternallyRolledFileAppender is not a part of log4j, so this is invalid to \nstart with.  But more importantly, log4j 1.3 has a new approach to rolling \nwhich prevents this type of issue.", "id": 68279, "time": "2004-12-10T19:37:07Z", "bug_id": 15177, "creation_time": "2004-12-10T19:37:07Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 15177, "text": "ExternallyRolledFileAppender was dropped from log4j 1.3 without a deprecation cycle.  A new version that \nlayers on top of the new o.a.l.rolling.RollingFileAppender framework has been prepared which is expected \nto address the issue mentioned here.  Please comment on Bug 30407 if this problem is observed with the \nnew implementation.", "id": 74743, "time": "2005-05-11T21:56:52Z", "creator": "carnold@apache.org", "creation_time": "2005-05-11T21:56:52Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "carnold@apache.org", "text": "\n\n*** This bug has been marked as a duplicate of 30407 ***", "id": 74744, "time": "2005-05-11T21:57:40Z", "bug_id": 15177, "creation_time": "2005-05-11T21:57:40Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "dfields326@netscape.net", "text": "mod_jk.so will not compile under AIX 4.3.3 without modifications\n\nusing mod_jk sources \nfound in \njakarta-tomcat-connectors-4.0.2-01-src.tar.gz\nor tomcat 3.3a or tomcat 3.3.1 \nsources will not compile without modifications\n\nUsing Apache 1.3.23  modfications that need \nto be made are the following\nin the jk/native/common/jk_jni_worker.c\nAIX xlC compiler \nrequires explicit casts\n\nputting these typedefs at the top of the file\n/*\n// \n  AIX \nREQUIRED EXPLLICT FUNCTION PTR CASTS\n*/\ntypedef jint ( JNICALL \n*Tpfnjni_get_default_java_vm_init_args)(void *);\ntypedef jint ( JNICALL \n*Tpfnjni_create_java_vm)(JavaVM **, JNIEnv **, void *);\ntypedef jint ( JNICALL \n*Tpfnjni_get_created_java_vms)(JavaVM **, int, int *);\n\n\nAnd using these function \npointer types in function load_jvm_dll()\n Tpfnjni_get_default_java_vm_init_args\n \nTpfnjni_create_java_vm\n Tpfnjni_get_created_java_vms\n\neg) code snip\nstatic int \nload_jvm_dll(jni_worker_t *p,\n                        jk_logger_t *l)\n{\n#ifdef WIN32\n    HINSTANCE hInst = \nLoadLibrary(p->jvm_dll_path);\n    if(hInst) {\n        (FARPROC)jni_create_java_vm =\n            \nGetProcAddress(hInst, \"JNI_CreateJavaVM\");\n\n        (FARPROC)jni_get_created_java_vms =\n            \nGetProcAddress(hInst, \"JNI_GetCreatedJavaVMs\");\n\n        \n(FARPROC)jni_get_default_java_vm_init_args =\n            GetProcAddress(hInst, \n\"JNI_GetDefaultJavaVMInitArgs\");\n\n        jk_log(l, JK_LOG_DEBUG,\n               \"Loaded all JNI \nprocs\\n\");\n\n        if(jni_create_java_vm && jni_get_default_java_vm_init_args && \njni_get_created_java_vms) {\n            return JK_TRUE;\n        }\n\n        FreeLibrary(hInst);\n    }\n#elif \ndefined(NETWARE)\n    int javaNlmHandle = FindNLMHandle(\"JVM\");\n    if (0 == javaNlmHandle) {\n        \n/* if we didn't get a handle, try to load java and retry getting the */\n        /* handle */\n        \nspawnlp(P_NOWAIT, \"JVM.NLM\", NULL);\n        ThreadSwitchWithDelay();\n        javaNlmHandle = \nFindNLMHandle(\"JVM\");\n        if (0 == javaNlmHandle)\n            printf(\"Error loading Java.\");\n\n    }\n    if \n(0 != javaNlmHandle) {\n        jni_create_java_vm = ImportSymbol(GetNLMHandle(), \n\"JNI_CreateJavaVM\");\n        jni_get_created_java_vms = ImportSymbol(GetNLMHandle(), \n\"JNI_GetCreatedJavaVMs\");\n        jni_get_default_java_vm_init_args = \nImportSymbol(GetNLMHandle(), \"JNI_GetDefaultJavaVMInitArgs\");\n    }\n    \nif(jni_create_java_vm && jni_get_default_java_vm_init_args && \njni_get_created_java_vms) {\n        return JK_TRUE;\n    }\n#else\n    void *handle;\n    jk_log(l, \nJK_LOG_DEBUG,\n           \"Into load_jvm_dll, load %s\\n\", p->jvm_dll_path);\n\n    handle = dlopen(p-\n>jvm_dll_path, RTLD_NOW | RTLD_GLOBAL);\n\n    if(!handle) {\n        jk_log(l, JK_LOG_EMERG,\n               \n\"Can't load native library %s : %s\\n\", p->jvm_dll_path,\n               dlerror());\n    } else {\n         /* AIX \nREQUIRED EXPLLICT FUNCTION PTR CASTS */\n        jni_create_java_vm = \n(Tpfnjni_create_java_vm)dlsym(handle, \"JNI_CreateJavaVM\");\n        \njni_get_default_java_vm_init_args = \n(Tpfnjni_get_default_java_vm_init_args)dlsym(handle, \n\"JNI_GetDefaultJavaVMInitArgs\");\n        jni_get_created_java_vms =  \n(Tpfnjni_get_created_java_vms)dlsym(handle, \"JNI_GetCreatedJavaVMs\");\n\n        \nif(jni_create_java_vm && jni_get_default_java_vm_init_args &&\n           \njni_get_created_java_vms) {\n          jk_log(l, JK_LOG_DEBUG,\n                   \"In load_jvm_dll, symbols \nresolved, done\\n\");\n            return JK_TRUE;\n        }\n       jk_log(l, JK_LOG_EMERG,\n               \"Can't resolve \nJNI_CreateJavaVM or JNI_GetDefaultJavaVMInitArgs\\n\");\n        dlclose(handle);\n    }\n#endif\n    \nreturn JK_FALSE;\n}\n\n\n\nAlso the apache13/bin/apxs script needed to be modified to link \nmod_jk.so\nchanging CFG_LDFLAGS_SHLIB\n\n#modifed for AIX\nmy $CFG_LDFLAGS_SHLIB = q( -\nbexpall -bM:SRE -bnoentry -bI:/services/apache/libexec/httpd.exp -lc -ldl); # substituted via \nMakefile.tmpl\n#my $CFG_LDFLAGS_SHLIB = q(-H512 -T512 -bhalt:4 -bM:SRE -bnoentry -\nbI:/services/apache/libexec/httpd.exp -lc); # substituted via Makefile.tmpl\n\nafter this \nchange mod_jk.so seems to work for Apache 1.3 --> Tomcat 4.0.2\n\nI am trying Apache 2.0.36 now and \nfind that the only way I can get modules to load is to use the IBM xlc_r compiler and mod_jk.so in the \njk/native/apache-2.0\ndoes not link. \nAny body have a simular issues under AIX? \nSolutions?\n\nbuild-unix.sh failes to link giving the following output \n:\n\n/services/apache2/build/libtool --silent --mode=link xlc_r -o mod_jk.so -rpath \n/\nservices/apache2/modules -module -avoid-version -I../common -\nI/services/apache2/\ninclude/apr-util -I/usr/java130/include -\nI/usr/java130/include/linux   mod_jk.lo\n jk_worker.lo jk_util.lo jk_uri_worker_map.lo \njk_sockbuf.lo jk_pool.lo jk_nwmain\n.lo jk_msg_buff.lo jk_md5.lo jk_map.lo \njk_lb_worker.lo jk_jni_worker.lo jk_conte\nxt.lo jk_connect.lo jk_ajp_common.lo \njk_ajp14_worker.lo jk_ajp14.lo jk_ajp13_wor\nker.lo jk_ajp13.lo \njk_ajp12_worker.lo\nld: 0711-317 ERROR: Undefined symbol: .main\nld: 0711-345 Use the -\nbloadmap or -bnoquiet option to obtain more information.\napxs:Error: Command failed with \nrc=524288", "id": 17010, "attachment_id": null, "bug_id": 9548, "creation_time": "2002-05-31T18:11:32Z", "time": "2002-05-31T18:11:32Z", "is_private": false}, {"count": 1, "tags": [], "creator": "hgomez@slib.fr", "attachment_id": null, "text": "I didn't understand why we should add typedef as they\nshould be present in jni.h (which is probably not or badly\nincluded).\n\nTake a look at configure and use --with-java-home and \n--with-java-platform to meet your needs", "id": 17975, "time": "2002-06-18T10:10:32Z", "bug_id": 9548, "creation_time": "2002-06-18T10:10:32Z", "is_private": false}]
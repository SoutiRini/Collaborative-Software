[{"count": 0, "tags": [], "bug_id": 7082, "is_private": false, "id": 11727, "creation_time": "2002-03-13T11:53:09Z", "time": "2002-03-13T11:53:09Z", "creator": "Dave@JungleMoss.com", "text": "Using jdk 1.4.0 and TC4.0.4b1 (haven't tried another jdk yet, but it works \nfine using TC3.3 and this jdk) and calling an RMI server produces the \nfollowing stack trace:\n\njava.rmi.ServerException: RemoteException occurred in server thread; nested \nexception is: \n\tjava.rmi.UnmarshalException: error unmarshalling arguments; nested \nexception is: \n\tjava.net.MalformedURLException: no protocol: Files/Apache\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:292)\n\tat sun.rmi.transport.Transport$1.run(Transport.java:148)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.rmi.transport.Transport.serviceCall(Transport.java:144)\n\tat sun.rmi.transport.tcp.TCPTransport.handleMessages\n(TCPTransport.java:460)\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run\n(TCPTransport.java:701)\n\tat java.lang.Thread.run(Thread.java:536)\n\tat sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer\n(StreamRemoteCall.java:247)\n\tat sun.rmi.transport.StreamRemoteCall.executeCall\n(StreamRemoteCall.java:223)\n\tat sun.rmi.server.UnicastRef.invoke(UnicastRef.java:133)\n\tat com.staffplanner.utils.rmi.StaffplannerRemoteImpl_Stub.executeTask\n(Unknown Source)\n\tat com.staffplanner.utils.rmi.RemoteController.execute\n(RemoteController.java:76)\n\tat com.staffplanner.utils.rmi.RemoteServer.callRemote\n(RemoteServer.java:56)\n\tat com.staffplanner.batchjobs.CrystalProcessServer.runCrystalReport\n(CrystalProcessServer.java:15)\n\tat \ncom.staffplanner.pages.tradingweeks.TradingWeekScrollPage.processCustomRequests\n(TradingWeekScrollPage.java:316)\n\tat com.staffplanner.pages.base.ScrollPage.processFormSubmit\n(ScrollPage.java:181)\n\tat com.staffplanner.pages.base.ScrollPage.processPost\n(ScrollPage.java:129)\n\tat com.staffplanner.pages.base.StaffPlannerPage.doPost\n(StaffPlannerPage.java:453)\n\tat com.staffplanner.pages.base.ScrollPage.doPost(ScrollPage.java:118)\n\tat com.staffplanner.servlets.StaffPlannerServlet.processRequest\n(StaffPlannerServlet.java:227)\n\tat com.staffplanner.base.ServletBase.doPost(ServletBase.java:74)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:760)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.access$0\n(ApplicationFilterChain.java:197)\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run\n(ApplicationFilterChain.java:176)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:172)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:243)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:190)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.CertificatesValve.invoke\n(CertificatesValve.java:246)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2347)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.AccessLogValve.invoke\n(AccessLogValve.java:468)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke\n(ContainerBase.java:943)\n\tat org.apache.ajp.tomcat4.Ajp13Processor.process\n(Ajp13Processor.java:458)\n\tat org.apache.ajp.tomcat4.Ajp13Processor.run(Ajp13Processor.java:551)\n\tat java.lang.Thread.run(Thread.java:536)\nCaused by: java.rmi.UnmarshalException: error unmarshalling arguments; nested \nexception is: \n\tjava.net.MalformedURLException: no protocol: Files/Apache\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:249)\n\tat sun.rmi.transport.Transport$1.run(Transport.java:148)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.rmi.transport.Transport.serviceCall(Transport.java:144)\n\tat sun.rmi.transport.tcp.TCPTransport.handleMessages\n(TCPTransport.java:460)\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run\n(TCPTransport.java:701)\n\t... 1 more\nCaused by: java.net.MalformedURLException: no protocol: Files/Apache\n\tat java.net.URL.<init>(URL.java:579)\n\tat java.net.URL.<init>(URL.java:476)\n\tat java.net.URL.<init>(URL.java:425)\n\tat sun.rmi.server.LoaderHandler.pathToURLs(LoaderHandler.java:743)\n\tat sun.rmi.server.LoaderHandler.loadClass(LoaderHandler.java:159)\n\tat java.rmi.server.RMIClassLoader$2.loadClass(RMIClassLoader.java:629)\n\tat java.rmi.server.RMIClassLoader.loadClass(RMIClassLoader.java:257)\n\tat sun.rmi.server.MarshalInputStream.resolveClass\n(MarshalInputStream.java:200)\n\tat java.io.ObjectInputStream.readNonProxyDesc\n(ObjectInputStream.java:1503)\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1425)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1616)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1264)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:322)\n\tat sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:297)\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:246)\n\t... 6 more", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 7082, "text": "Well, the error strongly hints at the Sun RMI classes incorrectly dealing with \nspaces in the path. This should have an obvious workaround (install Tomcat in a \npath without spaces, as you would do on Unix). Fixing the bug could be complex. \nIf you're really interested in having this fixed quickly, you should try to \ndebug it further.", "id": 11739, "time": "2002-03-13T17:16:21Z", "creator": "remm@apache.org", "creation_time": "2002-03-13T17:16:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "Dave@Staffplanner.co.uk", "text": "I thought it was a bug in the JDK, but I tried it in TC3.3 with a space in the \npath and it worked.", "id": 11744, "time": "2002-03-13T17:39:13Z", "bug_id": 7082, "creation_time": "2002-03-13T17:39:13Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "Dave@Staffplanner.co.uk", "text": "Created attachment 1434\nThe test case to reproduce this bug", "id": 12383, "time": "2002-03-27T13:31:23Z", "bug_id": 7082, "creation_time": "2002-03-27T13:31:23Z", "is_private": false, "attachment_id": 1434}, {"count": 4, "tags": [], "bug_id": 7082, "text": "During the production of this test case another problem was found. If the \nclass to be downloaded is in a jar file in the WEB-INF/lib directory then \neverything works, but if the class is in the WEB-INF/classes directory then \nthe ClassNotFoundException is thrown.\nClasses in lib should not be available to an RMI server, this is a security \nproblem.\n", "id": 12384, "time": "2002-03-27T13:32:42Z", "creator": "Dave@Staffplanner.co.uk", "creation_time": "2002-03-27T13:32:42Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "Dave@Staffplanner.co.uk", "text": "Forgot to mention:\n\nThere is a problem with the JDK and spaces in the path, but if TC4 is \ninstalled in a directory without spaces then it still doesn't work.\nThe test case shows this problem.\nBasically the difference between TC3.3 and TC4 is that the rmi server scans \nthe Tomcat classpath for TC4 but scans the java.rmi.codebase path for TC3.3.", "id": 12385, "time": "2002-03-27T13:44:25Z", "bug_id": 7082, "creation_time": "2002-03-27T13:44:25Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 7082, "is_private": false, "text": "Comments posted to the tomcat-user mailing list by Greg Trasuk \n[stratuscom@on.aibn.com]:\n\tI'm in the same boat trying to use RMI and/or Jini from Tomcat.  This \nisn't a complete answer to your question, as I'm still investigating the \nissue, but I'm posting what I know so far in the hope that it might help in \nyour own solution, and also generate discussion that will guide my \nexploration. When all is said and done, if there's interest, I can post \na \"Catalina-RMI HOWTO\" sort of document.\n\n\tAlthough I didn't try to run the test case that you attached to your \nbug report, I did take a look at it, and I think I know what's going on.  \nHere's what I know so far (most of which you probably know already, but I'm \nsummarizing for other folks on the list):\n\n\tWhen you pass an instance of some Serializable class as an argument to \nan RMI call (e.g. passing a command object, as in your test case), the RMI \nsubsystem will serialize the object with an additional annotation indicating \nthe locations from which the class's bytecode can be downloaded.  When you \npass an exported object (e.g. a server object or an object that will receive \ncallbacks from remote objects), the RMI subsystem creates and serializes a \nproxy object (otherwise known as the RMI stub object) in place of the actual \nobject.  In either case, the remote RMI subsystem has to load the class that \nis called out in the serialized instance.  It does this by calling the \nRMIClassLoader.\n\n\tThe RMIClassLoader object first tries to find the class locally (i.e. \nin the default classloader).  If it can't find it locally, it searches in the \nlist of locations contained in the annotation mentioned above.  If the \nrequired class is available locally, no further headaches are caused, which \nmay be why some people have had no problems using RMI under Tomcat - they \nprobably had the serialized classes and/or proxy classes in the standard \nclasspath/classloader setup.\n\n\tAnd there we find our problem.  (At this point you might want to have \na look at the JSP snippet below) The annotation is determined by \nRMIClassLoader. According to the \"RMI and Object Serialization FAQ\" in the \nJDK1.31 API docs,\n\n  \"If the _Stub class was loaded by an RMIClassLoader, then RMI already knows \nwhich codebase to use for its annotation. If the _Stub class was loaded from \nthe CLASSPATH, then there is no obvious codebase, and RMI consults the \njava.rmi.server.codebase system property to find the codebase. If the system \nproperty is not set, then the stub is marshalled with a null codebase, which \nmeans that it cannot be used unless the client has a matching copy of the \n_Stub classfile in the client's CLASSPATH. \"\n\n\tIf we're running a standalone application (and I believe also in \nTomcat 3.x), we're using the system class loader, which has \"no obvious \ncodebase\", so the java.rmi.server.codebase property gets used.  But what's the \nclass loader used in Tomcat 4.x?  I looked at the source code for Tomcat 4.0.1 \n(happens to be what I have on hand), and o.a.c.loader.WebAppClassLoader \nextends from o.a.c.loader.StandardClassLoader, which extends from \njava.net.URLClassLoader, which has a method called getURLs().  The\nWebAppClassLoader.getURLs() method returns a list of all the repositories it \nwill search when trying to load a class on behalf of the web app.  This list \ncalls out all the jar's in WEB-INF/lib, common/lib, etc.\n\n\tHaving not seen the source for RMIClassLoader, I suspect that the\ngetClassAnnotation(..) method checks to see if the classloader for the \nsupplied class is a URLClassLoader, and if so, uses the results of the\ngetURLs() method call as \"an obvious codebase\".  This suspicion is supported \nby the last part of the JSP, where I create a classloader that extends from \nURLClassLoader but overrides getURLs() to return a phony url.  The phony url \nshows up as the class's annotation.\n\n\tSo the exact error you quoted in the bug report shows something about \na \"protocol missing\" MalformedURL exception, which is caused by the fact that \nthe urls to the repositories contain spaces, since the RMI annotation is \nsupposed to be a \"space-separated list of URL's\".  Thus the annotation\ndoesn't get parsed properly.   This may be a bug in Catalina's class loader\n(i.e. should the returned urls have the spaces encoded to '%20'?) or possibly \nin the way RMIClassLoader uses the results of getURLs().  But it's not the \nproblem.\n\n\tThe problem is how to get our codebase into the annotation.  Clearly \nthe java.rmi.server.codebase property is not used, since the class loader has \na codebase.  But setting a system property doesn't feel right to me anyway, \nsince in a webapp scenario, we're in a shared JVM, and we shouldn't be allowed \nto set system properties that will affect other webapps.  (Aside- we similarly \ncan't follow the normal practise of setting our own RMISecurityManager, again \nsince it doesn't play nice with the other webapps. When I tried it, it seemed \nto screw-up Tomcat's internals, as well.  We need to run Tomcat with security \nenabled, and set the appropriate permissions).\n\n\tOptions as I see them:\n\t(1)-Use an object factory approach to create instances of classes.  If \nwe get the factory object from the RMI server, it and all the instances it \ncreates will have the server's codebase property already set, which skirts the \nwhole issue.  It won't allow us to use locally-defined inner classes, however, \nso it's not great for callback objects (although I suspect we could have the \ncreated object call back to a local object)\n\n\t(2)-Load our local classes explicitly through a classloader that \nreturns our codebase.  This is what I did in the last part of the test case.  \nIt seems like a pain in the butt, and also caused ClassCastExceptions, which \nis why the reference is to an Object.\n\n\t(3)-Replace the context's classloader with a class loader that adds a \nwebapp-specific codebase to the repositories it lists.  I'm thinking of having \na property defined in the application context to specify the codebase.  \nThere's already provision in server.xml to specify an alternate webapp \nclassloader. Downside is that the application is then Tomcat-specific (not \nthat anyone would want to use any other container...).\n\n\tI suspect that using RMI purely as a client (i.e. with no local objects\nexported) and passing only instances of classes on the local classpath of both \nclient and server (e.g. java.* classes) would work just fine, with no codebase \nissues at all, but I've yet to try it out.\n\n\tIdeas and comments, anyone?\n\n\n\nGreg Trasuk, President\nStratusCom Manufacturing Systems Inc. - We use information technology to solve \nbusiness problems on your plant floor. http://stratuscom.ca\n\n\n<test-case apology=\"I know it's ugly code\">\n\n<%@page import=\"ca.stratuscom.TestWebapp.SampleClass\" %> <%@page \nimport=\"java.rmi.server.RMIClassLoader\" %> <%@page import=\"java.util.Date\" %> \n<%@page import=\"java.rmi.RMISecurityManager\" %> <%@page import=\"java.net.URL\" %\n> <%@page import=\"java.net.URLClassLoader\" %>\n\n<%!\nprivate class MyLoader extends URLClassLoader {\n  public URL[] getURLs() {\n    URL retval=null;\n    try { retval=new URL(\"http://bob/fred.jar\"); }\n    catch (Exception e) {}\n    return new URL[] {\n      retval\n      };\n  }\n\n  MyLoader(URL urls[]) { super(urls); }\n}\n%>\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html>\n  <head>\n    <title></title>\n  </head>\n\n  <body>\n    <h1>Show Annotation for locally created class</h1>\n\t<%\n    /* System.setSecurityManager(new RMISecurityManager()); */\n\n    String codebase=\"http://localhost:8080/TestWebapp/TestWebapp.jar\";\n\tDate dt=new Date();\n    /*System.setProperty(\"java.rmi.server.codebase\",codebase);*/\n\tString annotation=RMIClassLoader.getClassAnnotation(dt.getClass());\n\tSampleClass sample=new SampleClass();\n\tString sampleAnnotation=\n              RMIClassLoader.getClassAnnotation(sample.getClass());\n\t%>\n\tAnnotation for a Date instance is <%=annotation%>.\n<br>\n\tAnnotation for a SampleClass instance is <%=sampleAnnotation%>.\n    <hr>\n    <%\n    Class sampCls=RMIClassLoader.loadClass\n(codebase,\"ca.stratuscom.TestWebapp.SampleCl\nass\");\n    SampleClass rmiSamp=(SampleClass) sampCls.newInstance();\n    String localSampAnnotation=\n              RMIClassLoader.getClassAnnotation(rmiSamp.getClass());\n    %>\n    <br>\n    Annotation for localSamp loaded through RMIClassLoader is\n    <%=localSampAnnotation%>\n    <hr>\n\n    <%\n    URL codebaseURL=new URL(codebase);\n    URL loaderURLs[]=new URL[] {codebaseURL};\n    URLClassLoader urlLoader=new URLClassLoader(loaderURLs);\n\n    Class urlCls=urlLoader.loadClass(\"ca.stratuscom.TestWebapp.SampleClass\");\n    Object urlSamp= urlCls.newInstance();\n    String urlSampAnnotation=\n              RMIClassLoader.getClassAnnotation(urlSamp.getClass());\n    %>\n    <br>\n    Annotation for localSamp loaded through URLClassLoader is\n    <%=urlSampAnnotation%>\n    <hr>\n\n    <%\n    MyLoader myLoader=new MyLoader(loaderURLs);\n\n    Class myCls=myLoader.loadClass(\"ca.stratuscom.TestWebapp.SampleClass\");\n    Object mySamp= myCls.newInstance();\n    String mySampAnnotation=\n              RMIClassLoader.getClassAnnotation(mySamp.getClass());\n    %>\n    <br>\n    Annotation for localSamp loaded through MyLoader is\n    <%=mySampAnnotation%>\n    <hr>\n\n    <address><a href=\"mailto:trasukg@THINKPAD\"></a></address>\n<!-- Created: Wed Jul 31 09:17:33 Eastern Daylight Time 2002 -->\n<!-- hhmts start -->\nLast modified: Fri Aug 09 01:01:14 Eastern Daylight Time 2002\n<!-- hhmts end -->\n  </body>\n</html>\n\n-- In SampleClass.java\npackage ca.stratuscom.TestWebapp;\n\npublic class SampleClass {}\n</test-case>\n", "id": 21261, "time": "2002-08-19T09:47:12Z", "creator": "Dave@Staffplanner.co.uk", "creation_time": "2002-08-19T09:47:12Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "Bug in WebappClassLoader where external repositories is now fixed (4.1.10) and \nallows RMI with remote objects to work. This is actually better than \nsetting 'java.rmi.server.codebase', because it will only affect the one \nwebapp. The following code should be used to set up the remote repository:\n\n// This stuff is for Tomcat 4.1.10 and above.\nMethod m = null;\ntry {\n    ClassLoader cl = StaffPlannerServer.class.getClassLoader();\n    Class clc = cl.getClass();\n    if (clc.getName().equals(\"org.apache.catalina.loader.WebappClassLoader\")) {\n        Class[] classes = new Class[1];\n        Object[] parms = new Object[1];\n        classes[0] = String.class;\n        parms[0] = codebase_url;\n\n        m = clc.getMethod(\"addRepository\", classes);\n        m.invoke(cl, parms);\n    }\n}\ncatch (Exception e) {}\n\n// And if we're running Tomcat 3.x or a different AppServer completely. Do it \nthe old way.\nif (m == null) {\n    Properties p = System.getProperties();\n    p.put(\"java.rmi.server.codebase\", codebase_url);\n    System.setProperties(p);\n}\n", "is_private": false, "id": 21886, "creator": "Dave@Staffplanner.co.uk", "time": "2002-08-28T12:29:32Z", "bug_id": 7082, "creation_time": "2002-08-28T12:29:32Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 46705, "attachment_id": 23250, "text": "Created attachment 23250\nPDF accessibility\n\nSee attached html file and patch", "id": 124800, "time": "2009-02-12T02:36:31Z", "creator": "jost.klopfstein@gmail.com", "creation_time": "2009-02-12T02:36:31Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jost.klopfstein@gmail.com", "attachment_id": 23251, "id": 124801, "time": "2009-02-12T02:45:47Z", "bug_id": 46705, "creation_time": "2009-02-12T02:45:47Z", "is_private": false, "text": "Created attachment 23251\nDocumentation - will be merged into trunk by Jeremias"}, {"count": 2, "tags": [], "bug_id": 46705, "text": "Note: the patch is against the new IF branch: http://svn.apache.org/repos/asf/xmlgraphics/fop/branches/Temp_AreaTreeNewDesign.\n\nRelated Wiki pages:\nhttp://wiki.apache.org/xmlgraphics-fop/PDF_Accessibility\nhttp://wiki.apache.org/xmlgraphics-fop/LogicalStructure", "id": 124802, "time": "2009-02-12T02:54:04Z", "creator": "jeremias@apache.org", "creation_time": "2009-02-12T02:54:04Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Hi Jost,\n\nI've just been trying out your patch. I applied the patch to a fresh check out of the new IF branch, compiled it okay. But when I tried to generate a PDF from the command line I got the following NPE:\n\nINFO: Accessibility is enabled\n16-Feb-2009 10:25:44 org.apache.fop.cli.Main startFOP\nSEVERE: Exception\njava.lang.NullPointerException\n        at org.apache.fop.apps.Fop.getDefaultHandler(Fop.java:138)\n        at org.apache.fop.cli.InputHandler.renderTo(InputHandler.java:126)\n        at org.apache.fop.cli.Main.startFOP(Main.java:174)\n        at org.apache.fop.cli.Main.main(Main.java:205)\n\nThanks,\n\nChris", "is_private": false, "id": 124867, "creator": "bowditch_chris@hotmail.com", "time": "2009-02-16T02:52:44Z", "bug_id": 46705, "creation_time": "2009-02-16T02:52:44Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "jeremias@apache.org", "text": "Generally, the patch looks pretty good to me, besides the NPE which I know Jost is already working on a fix for. That particular bug occurs because the stylesheets get loaded via java.io.File instead of Class.getResource(AsStream).\n\nI've got a few nits which I'll gladly address myself after we've applied to patch to a temporary branch:\n\n- FOUserAgent: set/getResult are not very speaking names for what they do. It might also be better to just save a DOM instead of a byte array.\n- area/inline/Image: ptr is normally set as a trait in the area tree but not for the Image area. That can be homogenized.\n- I'd rename fox:alt to a more speaking fox:alt-text.\n- Some classes have just non-semantic changes (like commented code that is never used or unnecessary \"final\" modifiers which look like they have come from \"Save Actions\" in Eclipse). I'll remove those while processing the patch to reduce the noise.\n- There are some backwards-incompatible changes in the Renderer implementations which are avoidable.\n- I'd like to avoid adding the \"ptr\" attribute to the IFPainter methods since most implementations don't support that anyway. I'd rather do it via the IFContext like I've done for the foreign attributes.\n- Static code analysis indicates a bug in PDFImageHandlerSVG concerning the save/restore pairs.\n- I'd move the FO -> PDF Struct Type mapping (in PDFStructElem) out of the PDF library into the render/pdf package (separation of concerns and opening an option for a later implementation of a custom role map).\n\nPlease speak up if anyone objects to any of these proposed changes.", "id": 124868, "time": "2009-02-16T05:54:06Z", "bug_id": 46705, "creation_time": "2009-02-16T05:54:06Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "jost.klopfstein@gmail.com", "text": "Created attachment 23261\nFixed NPE when used from command line", "id": 124872, "time": "2009-02-16T12:44:31Z", "bug_id": 46705, "creation_time": "2009-02-16T12:44:31Z", "is_private": false, "attachment_id": 23261}, {"count": 6, "tags": [], "bug_id": 46705, "attachment_id": 23262, "text": "Created attachment 23262\nRemoved unused code in area/inline/Image & related\n\n[Jeremias:]area/inline/Image: ptr is normally set as a trait in the area tree but not", "id": 124874, "time": "2009-02-16T13:06:21Z", "creator": "jost.klopfstein@gmail.com", "creation_time": "2009-02-16T13:06:21Z", "is_private": false}, {"count": 7, "tags": [], "creator": "vhennebert@gmail.com", "text": "That's great new functionality. I've only had time to look at a part of the patch so far, so I'm posting my few comments below. More later if I have time.\n\nIn the o.a.f.accessibility package:\n- why are there two classes? Only the sub-class seems to be externally used, so it may as well be merged with the super-class. If some more general functionality turns out to be necessary, the extraction of a common super-class can always be done later.\n- Likewise, only one constructor seems to be used ATM. If other constructors are needed, they can also be added later on.\n- AFAIU mTranHandler is set in all of the constructors. Why systematically test it for null in the methods then?\n\nThere is an encapsulation problem in o.a.f.apps.Fop.getDefaultHandler(): the lines of code dealing with accessibility should be moved to the accessibility package.\n\nIn FOUserAgent:\n- the \"accessibility\" string should be defined only once in a public final static field (ideally somewhere inside the accessibility package)\n- there's no need to explicitly put false for the accessibility option in the constructor, as the value is tested for null in the accessibilityEnabled method\n\nIn FopFactoryConfigurator.configure():\n- any reason why the accessibility option is not handled like the other options? (using getValueAsBoolean)\n\nAnd a nit about coding style: you seem to be using Hungarian notation to name fields ('mTheClassField'). I don't have anything against this notation, but it's not used inside the rest of FOP's codebase. For consistency we may want to agree upon a notation. FWIW I tend to think that, thanks to modern development environments that now highlight class members, this notation is no longer so useful.\n\nThanks,\nVincent", "id": 124888, "time": "2009-02-17T03:00:27Z", "bug_id": 46705, "creation_time": "2009-02-17T03:00:27Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 46705, "attachment_id": null, "id": 124903, "time": "2009-02-17T12:51:03Z", "creator": "adelmelle@apache.org", "creation_time": "2009-02-17T12:51:03Z", "is_private": false, "text": "\nInteresting stuff! I've also read some of the Wiki, and one thought that popped in my head:\nDo we really need the extension 'ptr'? Could this be simplified by using the standard 'id' property perhaps? \n\nIIUC, I definitely think so, but that would mean introducing:\na) auto-generated and assigned initial value for the 'id' property (mandated by the Rec, BTW: \"the initial value ... is a random and unique identifier...\" --XSL-FO 7.30.8 \"id\")\nb) a way for the FONodes to echo themselves back into SAX events, so they can be sent through reduceFOTree.xsl (maybe that reduction could even be hardcoded into FOP)\n\na) would be relatively easy to implement. I've already been playing with that in the past. It may have a noticeable impact on performance for large documents, if we're not careful, since the set of ids to check becomes entirely dependent on the number of FO nodes, whereas currently, that set is limited to the ids that have been specified.\n\nb) would require more effort. Something we have never needed so far, but may be a worthwhile addition, if you think about it. The emitted FO will not correspond exactly (1-1) with the source, since shorthands will be expanded, relative specs may have been resolved and such, but still...\n\nThat said, maybe to emulate that effect with the current proposal of a pre-processing stylesheet (minimal effort), we could already do something like:\n\n[in addPtr.xsl -> addId.xsl]\n\n<xsl:template name=\"addId\">\n  <xsl:element name=\"{name()}\" namespace=\"{namespace-uri()}\">\n    <xsl:apply-templates select=\"@*\"/>\n    <xsl:if test=\"not(@id)\">\n      <xsl:attribute name=\"id\">\n        <xsl:value-of select=\"generate-id()\" />\n      </xsl:attribute>\n    <xsl:apply-templates />\n  </xsl:element>\n</xsl:template>\n\nMay have unwanted side-effects only in case the author happens to have an explicit id that is identical to the value returned by generate-id() (but that's a bit of a stretch ;-))\n\n[in reduceFOTree.xsl]\n\n<xsl:template match=\"*\">\n  <xsl:element name=\"{name()}\">\n    <xsl:copy-of select=\"@id\" />\n  </xsl:element>\n</xsl:template>\n\nIf that could make it even simpler (one less extension attribute necessary), I'm all for it... \nI'm not sure I'm comfortable with introducing a native extension, scattered in so many classes, while we already have the standard 'id' property conveniently available in FObj, which seems to serve the purpose nicely.\n\nAnother small detail: why exactly do we need the explicit value of the xml:lang shorthand in Block.java? IIC, Block should already have the implied language and country available (via getCommonHyphenation()). Just asking, since if you look closely, you will notice that none of the shorthands are stored on the FObjs (only the expanded, native FO properties), so making this exception should have a good reason."}, {"count": 9, "tags": [], "bug_id": 46705, "attachment_id": null, "text": "Hi Andreas,\n\nThe approach with the @id seems a bit risky. The @ptr replacement has to have unique values. What happens if a user has a few empty @id in his FO or multiple times the same value for @id?\n\nCheers, Jost", "id": 124915, "time": "2009-02-17T22:10:25Z", "creator": "jost.klopfstein@gmail.com", "creation_time": "2009-02-17T22:10:25Z", "is_private": false}, {"count": 10, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 124916, "time": "2009-02-17T22:21:47Z", "bug_id": 46705, "creation_time": "2009-02-17T22:21:47Z", "is_private": false, "text": "(In reply to comment #9)\n\n> The approach with the @id seems a bit risky. The @ptr replacement has to have\n> unique values. What happens if a user has a few empty @id in his FO or multiple\n> times the same value for @id?\n\nCould be, and I'm definitely not blocking the proposal on this count. Just an idea.\nHaving multiple times the same value for an id will cause an error, since @id has to be unique for every element. If it is not specified, then it could be added using a stylesheet, initializing it with generate-id(), just like you propose for @ptr.\n\nThe only thing FOP currently does not do is generate and assign ids automatically, but the uniqueness constraint is already checked for."}, {"count": 11, "tags": [], "creator": "jeremias@apache.org", "text": "Jost asked me off-list about my opinion on Vincent's feedback. I'll put it here. Generally good input. The merging of TransformerNode and TransformerNodeEndProcessing is probably a matter of taste. I personally prefer keeping the general functionality seperate from the concrete functionality of the subclass. As mentioned before, I'd like to put this new code into a branch before putting it in Trunk. So we can also address these points in a second step. I assume we all agree that this is great new functionality and if it's applied now (in a separate branch) we can all help improve the whole thing rather than off-loading so many little things on Jost. He can of course continue to send follow-up patches.\n\nOn Andreas' comments: I didn't realize that the spec says to initialize the \"id\" property to an initial value. Of course, it would make sense to use that instead of the foi:ptr. I am, however, concerned about the performance implications for a collision detection which I don't think should be ignored. Also, the area tree and AT XML will increase in size of all elements have IDs. BTW, Andreas' proposal for adding the IDs is not entirely correct. Not all FO element take an \"id\" property. Maybe this should be done inside the FO tree instead of the addPtr.xsl.", "id": 124919, "time": "2009-02-18T01:20:59Z", "bug_id": 46705, "creation_time": "2009-02-18T01:20:59Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "text": "(In reply to comment #11)\n> \n> On Andreas' comments: I didn't realize that the spec says to initialize the\n> \"id\" property to an initial value. Of course, it would make sense to use that\n> instead of the foi:ptr. I am, however, concerned about the performance\n> implications for a collision detection which I don't think should be ignored.\n\nWell, what I'm personally a bit concerned about is the case where you have:\n1) auto-generated ids by the 'main' stylesheet\n2) additional auto-generated ids by the 'pre-processing' stylesheet\n\nSince we have two passes, are we still 100% certain that the XSLT processor will always return unique values that are used nowhere as an id elsewhere in the document? \nFor explicit ids, this problem would also exist, but AFAIK, no one specifies explicit ids like \"N897654\", which is a format returned by some generate-id() implementations.\n\nIf the answer to my above question is yes, then there is no real overhead (on the FOP-side) involved for collision-detection, since the XSLT processor will take care of that (or even the XML parser: Is 'id' not a standard XML attribute? Or does it have nothing to do with the standard 'id()' XPath function? I'd have to check in the respective specifications to be sure...)\n\n> Also, the area tree and AT XML will increase in size of all elements have IDs.\n\nTrue, but then again, doesn't the foi:ptr also have to be carried through to the area tree or IF?\nMaybe to address this concern, we could limit the case where the ids are actually auto-generated to this one: when accessibility is enabled. IOW, if and when it is needed (not default behavior).\n\n> BTW, Andreas' proposal for adding the IDs is not entirely correct. Not all FO\n> element take an \"id\" property. \n\nAgain, very true, but we do implement getId() in FObj. That currently means that, although the property may not apply to a given element, like fo:declarations, as long as the Java object extends FObj, the id property will be bound and available if it is specified. \nChecking closer, Declarations.java overrides bind() rather than relying on the superclass implementation. Removing that empty implementation would be enough to make it work.\n\nNot 100% compliant, but it seems like this actually may have added value here.\n\n> Maybe this should be done inside the FO tree instead of the addPtr.xsl.\n\nWhat I was thinking indeed. Something like a dedicated IDPropertyMaker that extends StringProperty.Maker, and would offer an implementation for make(FObj, PropertyList) that returns a 'proper' initial value. I once implemented it as such (and committed it, but it was a bit too quick and caused other issues, so it was reverted almost immediately)\n\nDownside is that, if we implement it like that in the FO tree, it would also be necessary to implement the b) part in my earlier response, as the ids will never be available in the raw FO source, so reduceFOTree.xsl would not yet 'see' them (unless they would be added by a pre-processing stylesheet, like Jost proposes)", "is_private": false, "id": 124943, "creator": "adelmelle@apache.org", "time": "2009-02-18T11:28:58Z", "bug_id": 46705, "creation_time": "2009-02-18T11:28:58Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jeremias@apache.org", "is_private": false, "count": 13, "id": 124946, "time": "2009-02-18T11:50:41Z", "bug_id": 46705, "creation_time": "2009-02-18T11:50:41Z", "text": "(In reply to comment #12)\n<snip/>\n> Since we have two passes, are we still 100% certain that the XSLT processor\n> will always return unique values that are used nowhere as an id elsewhere in\n> the document? \n\nI would assume: no.\n\n<snip/>\n> True, but then again, doesn't the foi:ptr also have to be carried through to\n> the area tree or IF?\n> Maybe to address this concern, we could limit the case where the ids are\n> actually auto-generated to this one: when accessibility is enabled. IOW, if and\n> when it is needed (not default behavior).\n\nAgreed.\n\n<snip/>\n\nGiven all these observations, I think it would make sense to take the XSLT approach first (add an XSLT-generated ID if non exists) and then gather experience with this approach. This is easy to implement and can be extended later if we see the need.\n\nAs I've heard no objections to my proposal from Monday, yet, I'll process Jost's patch (as is) tomorrow morning (my local time) into a branch off the IF branch. From there, we can take it further and incorporate all the feedback. That also makes it easier to track what is changed."}, {"count": 14, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #13)\n> (In reply to comment #12)\n> \n> I would assume: no.\n\nFWIW, just checked the XML and XPath specifications, and that one question regarding 'id' is answered. If one specifies an 'xml:id', that would be a different matter entirely. Since, in XSL-FO, the attribute is in the default namespace (think 'fo:id'), they have nothing to do with each other.\n\nI agree with your assumption. There seems to be absolutely no guarantee that generate-id() returns unique values across the two passes. Even worse, if the processor would implement generate-id() as a deterministic function (for example: if the id value is solely based on an index which is incremented with every element), then in both passes, generate-id() would always return something like \"N0\" for the root node, and the risk of collisions could become significant...\n\nPlacing the stress on the XSLT processor could offer a way out:\n\n[in addPtr.xsl]\n<!-- key for the explicit ids -->\n<xsl:key name=\"idKey\" match=\"fo:*\" use=\"@id\" />\n...\n<xsl:template name=\"addId\">\n  <xsl:param name=\"checkId\" select=\"generate-id()\" />\n  <xsl:choose>\n    <xsl:when test=\"key('idKey',$checkId)\">\n       <xsl:call-template name=\"addId\">\n         <xsl:with-param name=\"checkId\" select=\"generate-id(key('idKey',$checkId))\" />\n       </xsl:template>\n    </xsl:when>\n    <xsl:otherwise>\n      <xsl:value-of select=\"$checkId\" />\n    </xsl:otherwise>\n  </xsl:choose>\n</xsl:template>\n...\n<xsl:attribute name=\"id\">\n  <xsl:call-template name=\"addId\" />\n</xsl:attribute>\n...\n\nUntested for performance. The mere addition of the key could be problematic, as the first call to key('idKey',...) cannot be evaluated unless the entire source document is scanned.\nI keep looking at that recursive call, and wonder whether that could lead to problems. Strictly speaking, if the id starting the recursion will always be unique (by definition so), then the recursion should always stop at some point, and the path should always run over different nodes.\nThe depth will, in the most extreme case, be equal to the maximum number of collisions, which is the same as the number of nodes that already have an explicit id, or the size of the xsl:key map.\n\nAssuming that the explicit ids added in the first pass adhere to the uniqueness constraint:\nIf, for any given node, the recursion would go through all possible collisions, then that would mean that the collision-values all refer to each other. That is, every value returned by generate-id() for a node in the key-map, is already specified as an id on another node in that same map. That can happen at most N times for N nodes with explicit ids, and it already happened once, for a node not in that map, to trigger the recursion. So, there will then be one of those N nodes for which the generated id is not yet occupied. Moreover, this most extreme case can present itself at most for one node in the document. The more collisions with nodes not in the map, the less deep the recursions will go.\n\n> <snip/>\n> \n> Given all these observations, I think it would make sense to take the XSLT\n> approach first (add an XSLT-generated ID if non exists) and then gather\n> experience with this approach. This is easy to implement and can be extended\n> later if we see the need.\n\nAgreed.\n\n", "id": 124956, "time": "2009-02-18T15:22:09Z", "bug_id": 46705, "creation_time": "2009-02-18T15:22:09Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 46705, "attachment_id": 23278, "id": 124962, "time": "2009-02-19T02:23:01Z", "creator": "jost.klopfstein@gmail.com", "creation_time": "2009-02-19T02:23:01Z", "is_private": false, "text": "Created attachment 23278\nadded compiled stylesheets for improved performance in server environments (suggested by Jeremias)"}, {"count": 16, "tags": [], "text": "I've applied the patch (2009-02-19 02:23 PST) to a new branch as discussed (with modifications). The code is now under:\nhttps://svn.apache.org/repos/asf/xmlgraphics/fop/branches/Temp_Accessibility\nhttp://svn.apache.org/viewvc?rev=745949&view=rev\n\nI'll continue working on the code when my batteries are filled again.\n\nJost, thanks a lot for your work here. This is great new functionality. It will still take a bit to polish a few areas. I hope to see you become a regular contributor now that the hardest part is over. Please don't hesitate to publish follow-up patches against the branch (or trunk if you have other ideas). I'll keep the issue here open until we've adressed all the feedback, after which we'll see to merging this into trunk.", "attachment_id": null, "bug_id": 46705, "id": 124992, "time": "2009-02-19T11:58:34Z", "creator": "jeremias@apache.org", "creation_time": "2009-02-19T11:58:34Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 46705, "attachment_id": null, "text": "Most of the feedback has now been incorporated into the development branch. One notable exception is the discussion around replacing foi:ptr with the \"id\" property but I'm running out of time to work on this. Another point that I'm not entirely happy with is the fact that the enriched FO is fully buffered in a byte array before FOP starts processing. An idea here would be to build a reduced structure tree per page-sequence and attach it as such to the area tree instead of passing it to PDFDocumentHandler through the user agent. Anyway, when accessibility is disabled (the default), FOP does not suffer any performance drawbacks. So, IMO, the development branch could be merged with the Trunk. At any rate, the end-user documentation is now also in place. I've added a hopefully comprehensive list of limitations in addition to what Jost has written up.", "id": 126328, "time": "2009-04-17T07:42:17Z", "creator": "jeremias@apache.org", "creation_time": "2009-04-17T07:42:17Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 46705, "attachment_id": null, "id": 127684, "time": "2009-06-05T12:02:37Z", "creator": "adelmelle@apache.org", "creation_time": "2009-06-05T12:02:37Z", "is_private": false, "text": "*** Bug 47130 has been marked as a duplicate of this bug. ***"}, {"count": 19, "tags": [], "bug_id": 46705, "attachment_id": null, "id": 128309, "time": "2009-06-26T03:48:13Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-06-26T03:48:13Z", "is_private": false, "text": "I've been (slowly) reviewing the patch and I noticed that classes in the layoutmgr package are affected by the changes. There's no reason why it should be the case, layout has little to do with accessibility.\nIn fact the layout managers just pass the ptr trait over to the area tree. This calls for a more generic way of doing this. Indeed there are other properties that don't affect layout but only areas (color, z-index among others).\n\nI'll try to see how this can be handled. Just thought I'd made a note for later.\n\nVincent"}, {"attachment_id": null, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "count": 20, "id": 130487, "time": "2009-09-17T09:07:20Z", "bug_id": 46705, "creation_time": "2009-09-17T09:07:20Z", "text": "Note: I've been asked to look at integrating this patch into Trunk, but also to implement tagged PDF in the legacy PDFRenderer. More later.\n\nVincent"}, {"count": 21, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "id": 130572, "time": "2009-09-22T04:59:24Z", "bug_id": 46705, "creation_time": "2009-09-22T04:59:24Z", "is_private": false, "text": "I've just noticed that the structure tree stored in the IF XML is not re-parsed. Running FOP with the IF as input (-afin) and the -a switch even leads to a NPE. So tagged PDF is currently not supported when processing the FO document in two steps, first to the intermediate format then to PDF."}, {"attachment_id": null, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "count": 22, "id": 130765, "time": "2009-10-01T04:02:45Z", "bug_id": 46705, "creation_time": "2009-10-01T04:02:45Z", "text": "(In reply to comment #21)\n> I've just noticed that the structure tree stored in the IF XML is not\n> re-parsed. Running FOP with the IF as input (-afin) and the -a switch even\n> leads to a NPE. So tagged PDF is currently not supported when processing the FO\n> document in two steps, first to the intermediate format then to PDF.\n\nThis has now been addressed:\nhttp://svn.apache.org/viewvc?rev=819585&view=rev"}, {"count": 23, "tags": [], "creator": "vhennebert@gmail.com", "text": "The number tree corresponding to the ParentTree entry in the StructTreeRoot object is invalid, as the values are directly stored in the array instead of being reference. See discussion on fop-dev:\nhttp://markmail.org/thread/oijggvxzfgjyewwk", "id": 130766, "time": "2009-10-01T04:05:43Z", "bug_id": 46705, "creation_time": "2009-10-01T04:05:43Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "id": 130767, "time": "2009-10-01T04:10:58Z", "bug_id": 46705, "creation_time": "2009-10-01T04:10:58Z", "is_private": false, "text": "Are images supposed to work? I've tested a simple document that contains an fo:external-graphic referring to a PNG image. The alt-text isn't read aloud by Acrobat, and the image doesn't appear in the list of tags, nor the Order tab."}, {"count": 25, "tags": [], "creator": "benoit.wiart@gmail.com", "attachment_id": null, "id": 130773, "time": "2009-10-01T08:19:20Z", "bug_id": 46705, "creation_time": "2009-10-01T08:19:20Z", "is_private": false, "text": "table-and-caption and table-caption are not supported by FOP but they do not crash the engine\nOn the Accessibility branch, a file with a table-and-caption / table-caption will generate a stacktrace (NPE) because foi:ptr is missing on those elements."}, {"count": 26, "tags": [], "bug_id": 46705, "attachment_id": null, "text": "the NPE is at the line\nstructElemType.put(ptr, structElem.get(\"S\").toString());\n\nstructElem.get(\"S\") returns null\n\nit seems to be caused by FOToPDFRoleMap.mapFormattingObject(s, parent) : \nthe STANDARD_MAPPINGS map does not know table-and-caption and table-caption", "id": 130775, "time": "2009-10-01T09:03:41Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2009-10-01T09:03:41Z", "is_private": false}, {"count": 27, "tags": [], "text": "(In reply to comment #24)\n> Are images supposed to work? I've tested a simple document that contains an\n> fo:external-graphic referring to a PNG image. The alt-text isn't read aloud by\n> Acrobat, and the image doesn't appear in the list of tags, nor the Order tab.\n\nYes, they are supposed to work. One of my accessibility test cases I've just run through cause the alt-text for the images to be read out loud. I'm running off a current and clean checkout. If you want to send me some PDF for analysis, I'm happy to take a look.", "is_private": false, "id": 130777, "creation_time": "2009-10-01T09:13:20Z", "time": "2009-10-01T09:13:20Z", "creator": "jeremias@apache.org", "bug_id": 46705, "attachment_id": null}, {"count": 28, "tags": [], "bug_id": 46705, "attachment_id": null, "id": 130778, "time": "2009-10-01T09:34:41Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-10-01T09:34:41Z", "is_private": false, "text": "(In reply to comment #27)\n> (In reply to comment #24)\n> > Are images supposed to work? I've tested a simple document that contains an\n> > fo:external-graphic referring to a PNG image. The alt-text isn't read aloud by\n> > Acrobat, and the image doesn't appear in the list of tags, nor the Order tab.\n> \n> Yes, they are supposed to work. One of my accessibility test cases I've just\n> run through cause the alt-text for the images to be read out loud. I'm running\n> off a current and clean checkout. If you want to send me some PDF for analysis,\n> I'm happy to take a look.\n\nMust be my local changes then. My local copy is getting a bit messy. I'll have another look with a fresh checkout.\n\nBut why are images handled like text, using marked-content sequences? IIUC they should be handled as PDF Objects (see \"PDF Object as Content Items\" in section 9.6.3 of the PDF Reference, Third Edition).\n\nThanks,\nVincent"}, {"count": 29, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 130800, "time": "2009-10-02T00:49:27Z", "bug_id": 46705, "creation_time": "2009-10-02T00:49:27Z", "is_private": false, "text": "(In reply to comment #28)\n> But why are images handled like text, using marked-content sequences? IIUC they\n> should be handled as PDF Objects (see \"PDF Object as Content Items\" in section\n> 9.6.3 of the PDF Reference, Third Edition).\n\nIdeally maybe, but not necessarily so IMO. See the note on page 599 of PDF 1.4: \"If it is important to distinguish between multiple renditions of the same XObject on the same page, they should be accessed via marked content sequences enclosing particular invocations of the Do operator, rather than via object references.\" So the pattern is not illegal. FOP can reuse the same XObject multiple times on the same or on different pages."}, {"count": 30, "tags": [], "text": "Jost or Jeremias,\n\nIn the PDFPainter.prepareImageMCID method, there is a \"fix for Acro Checker\" comment. Do you have a sample FO file triggering that bug in Acrobat? I haven't been able to reproduce it.\n\nThanks,\nVincent", "is_private": false, "id": 131026, "creator": "vhennebert@gmail.com", "time": "2009-10-09T02:29:20Z", "bug_id": 46705, "creation_time": "2009-10-09T02:29:20Z", "attachment_id": null}, {"count": 31, "tags": [], "creator": "vhennebert@gmail.com", "text": "Hi Beno\u00eet,\n\n(In reply to comment #25)\n> table-and-caption and table-caption are not supported by FOP but they do not\n> crash the engine\n> On the Accessibility branch, a file with a table-and-caption / table-caption\n> will generate a stacktrace (NPE) because foi:ptr is missing on those elements.\n\nThis has been fixed in revision 824845:\nhttp://svn.apache.org/viewvc?rev=824845&view=rev\n\nThanks for reporting the bug,\nVincent", "id": 131110, "time": "2009-10-13T10:15:35Z", "bug_id": 46705, "creation_time": "2009-10-13T10:15:35Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "vhennebert@gmail.com", "text": "Separate bug (48518) has been opened about the ID discussion. Closing this one.", "count": 32, "id": 133506, "time": "2010-01-11T08:21:23Z", "bug_id": 46705, "creation_time": "2010-01-11T08:21:23Z", "is_private": false}, {"count": 33, "attachment_id": null, "bug_id": 46705, "is_private": false, "id": 155529, "time": "2012-04-01T06:26:21Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:26:21Z", "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
[{"count": 0, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 201587, "time": "2017-10-23T09:42:47Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-10-23T09:42:47Z", "is_private": false, "text": "Hi,\n\nWe moved from ANT 1.9.7 to ANT 1.9.9 on Z/OS.\nANT is installed as expected.\n\nProblem:\nWhen we try to install our application on Z/OS with Java 8 and webSphere 8.5.5.11, ANT 1.9.9, the installation fails because Ant doesnt recognize the wasadmin.extra.args.\nThe same configuration with Ant 1.9.7 is working fine.\n\nThe command that we use normally is:\n\nbuild installapp -Dserver.name=$WAS_SERVER -Dapplication.name=App -Dear.file=/home/xxx/yyy/ear/WAS/App.ear -Dwsadmin.extra.args=\\\"-javaoption -Xmx1024m -appendtrace true\\\"\n\nthe different result are the following \n\nFailure with Ant 1.9.9:\n\nUnknown argument: -Xmx1024m\nant [options] [target [target2 [target3] ...]]\nOptions:\n  -help, -h              print this message and exit\n  -projecthelp, -p       print project help information and exit\n...\n}}}\n\nWorks with Ant 1.9.7:\n\nBuildfile: /home/xxx/yyy/build.xml\n\nruntime.init:\n     [echo] Using properties file '/home/xxx/yyy/project/properties/AppServer.properties'.\n...\n}}}\n\nThe target involved is \n\n<target name=\"was.wsadmin\">\n\n    <!-- On windows, call 'wsadmin.bat' -->\n    <condition property=\"script.suffix\" value=\".bat\" >\n      <os family=\"windows\" />\n    </condition>\n    <!-- Unix platforms use wsadmin.sh -->\n    <property name=\"script.suffix\" value=\".sh\"/>\n    <property name=\"wsadmin.extra.args\" value=\"\"/>\n    <exec executable=\"cmd.exe\"\n          failonerror=\"${error.failure}\" osfamily=\"windows\">\n      <arg line=\"/c call ${was.home}/profiles/${profile.name}/bin/wsadmin${script.suffix} -user ${username} -password ${password} -profileName ${profile.name} -lang jython ${wsadmin.extra.args} -c &quot;${line}&quot; \"/>\n    </exec>\n    <exec executable=\"${was.home}/profiles/${profile.name}/bin/wsadmin${script.suffix}\"\n          failonerror=\"${error.failure}\" osfamily=\"unix\">\n      <arg line=\"-user ${username} -password ${password} -profileName ${profile.name} -lang jython ${wsadmin.extra.args} -c &quot;${line}&quot; \"/>\n    </exec>\n  </target>\n\n\nWe are using it on z/OS to increase the wsadmin jython JVM heap, \n\nWe are wondering:\n\nHas something changed in this area in the ANT 1.9.9  implementation which is different to that of 1.9.7 which would cause this different behavior?\n\n\nThanks"}, {"count": 1, "tags": [], "bug_id": 61649, "text": "I dont know Z/OS and havent any access to such a system, so sorry for not being able to help that much.\nHow do you start Ant (which launcher file are you using)?\nThen I could have a look if there were changes since the 1.9.7 release.\n\nFor the meanwhile you could try using the 1.9.7-files (backup the /bin folder and copy the ant-1.9.6/bin folder to ant-1.9.9/ ).", "id": 201597, "time": "2017-10-23T16:12:36Z", "creator": "jan@materne.de", "creation_time": "2017-10-23T16:12:36Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 201611, "creation_time": "2017-10-24T04:42:37Z", "time": "2017-10-24T04:42:37Z", "creator": "bodewig@apache.org", "text": "The best guess is that the changed parsing of command line arguments in order to preserve backticks and wildcars and so on is not working on z/OS. See bug 60150.\n\nWe'll need help from somebody familiar whth shell programming in z/OS and - probably even more important - access to z/OS in order to fix it.", "is_private": false}, {"count": 3, "tags": [], "bug_id": 61649, "text": "Hi,\n\nThanks for your answers,\n\nI tried this on one of our RHEL servers and had the same issue.", "id": 201614, "time": "2017-10-24T08:07:08Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-10-24T08:07:08Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 201615, "creation_time": "2017-10-24T08:08:26Z", "time": "2017-10-24T08:08:26Z", "creator": "cpisapia@ie.ibm.com", "text": "Hi,\n\nThanks for your answers,\n\nI tried this on one of our RHEL servers and had the same issue.", "is_private": false}, {"count": 5, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 201622, "creation_time": "2017-10-24T09:35:25Z", "time": "2017-10-24T09:35:25Z", "creator": "jan@materne.de", "text": "I found https://www-356.ibm.com/partnerworld/wps/servlet/ContentHandler/isv_com_tsp_iic_resources_systemz_remote_offerings\n\nHave to try that out ...", "is_private": false}, {"count": 6, "tags": [], "bug_id": 61649, "attachment_id": null, "text": "Hi,\n\nJan, Z/os and System Z are two different products.\n\nOur command line is working on windows, so I suppose that the problem is related to the changed parsing of command line as suggest Sthephan. There is something changed in ant 199 that is not working as expected in Linux and Z/OS. \n\nIn order to use our command line someone could be able to provide the new Syntax or a official documentation where is showed these new changes?\n\nthanks", "id": 201623, "time": "2017-10-24T09:49:05Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-10-24T09:49:05Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 61649, "attachment_id": 35452, "id": 201630, "time": "2017-10-24T11:13:33Z", "creator": "bodewig@apache.org", "creation_time": "2017-10-24T11:13:33Z", "is_private": false, "text": "Created attachment 35452\ndiff of wrapper script between 1.9.6 and 1.9.9\n\nOh, there is no new syntax, the wrapper script has been improved to handle embedded newlines and a bunch of shell meta characters that are part of command line arguments properly.\n\nThe new argument parsing code is quite convoluted and relies (among other things) on sed and sh being close to POSIX. This most likely sin't true for z/OS' versions.\n\nTo see the full amount of changes you really need to diff the ant script between the rel/1.9.6 and rel/1.9.9 tags (see attachment).\n\nYou could try replacing the wrapper script with that of Ant 1.9.6 in order to verify it really is the change that is affecting you: https://github.com/apache/ant/blob/rel/1.9.6/src/script/ant\n\nwe have added special code to deal with Solaris 10 and could do so for z/OS if we knew what to do exactly (short of falling back to the old parsing code). The main change was https://github.com/apache/ant/pull/25 and it contains a zio with ugly command line test cases that were all expected to work."}, {"count": 8, "tags": [], "bug_id": 61649, "text": "Hi,\n\nWe copied the Ant 1.9.6 ant script from that GitHub link and tried it on z/OS and it worked.\n\nA couple of additional clarifications:\n* I've run a few more tests (have run many of these over the last while and it gets confusing) and for me to get this to work with Ant 1.9.6 or Ant 1.9.7 on z/OS I have to use the -Dwsadmin.extra.args value with escaped quotes; e.g.: -Dwsadmin.extra.args=\\\"-javaoption -Xmx1024m -appendtrace true\\\"  The significance of this is that I'm pretty sure I didn't always have to escape the double quotes on the command line; however, I retested with Ant 1.9.9 to confirm that even escaping the double quotes doesn't fix it.\n*  I reported I saw the same issue on RHEL with Ant 1.9.9 using -Dwsadmin.extra.args. I retested this on RHEL with the Ant 1.9.6 script (and 1.9.7) and it works if I escape the double quotes and fails if I do not.  It fails in either case with 1.9.9.  the issue seems to be with outliers and Red Hat seems fairly mainstream.\nI don't know when/why this changed.\n\nThanks", "id": 201660, "time": "2017-10-25T08:36:21Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-10-25T08:36:21Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 61649, "attachment_id": null, "text": "When you said it worked for you Windows then you've used the ant.bat wrapper which hasn't changed (at least not in the same way) between versions.\n\nYou are obviously using a custom wrapper around the ant wrapper script called build - we'll need to figure out what this passes down to the ant wrapper script. I.e. what the actual invocation of the an script looks like.", "id": 201661, "time": "2017-10-25T08:42:48Z", "creator": "bodewig@apache.org", "creation_time": "2017-10-25T08:42:48Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 61649, "text": "The value of $script is \"build\", which is a symbolic to build.sh, which invokes Ant (ant -f ./build.xml), passing whatever additional arguments we pass in, which in this case is:\ninstallapp -Dserver.name=$WAS_SERVER -Dapplication.name=$application -Dear.file=$earfile -Dwsadmin.extra.args=\\\"-javaoption -Xmx1024m -appendtrace true\\\"", "id": 201667, "time": "2017-10-25T13:30:43Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-10-25T13:30:43Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "cpisapia@ie.ibm.com", "attachment_id": null, "id": 201941, "time": "2017-11-06T10:27:47Z", "bug_id": 61649, "creation_time": "2017-11-06T10:27:47Z", "is_private": false, "text": "Hi,\n\nAbout this ticket, I found the problem for Z/OS and RHEL.\n\nthe problem is in rel 1.9.9, this line\n\nesc_arg=\"`printf '%s\\n' \"$esc_arg\" | sed -e 's@\\([$\\\"\\`\\\\]\\)@\\\\\\\\\\\\1@g' `\"\n\nif I comment this line our command line goes well in both, Z/OS and RHEL and this statement: \n-Dwsadmin.extra.args=\\\"-javaoption -Xmx1024m -appendtrace true\\\" working fine.\n\nIs possible to edit rel in such a way that it adapts to Z/OS and RHEL for this case?\n\nthanks"}, {"count": 12, "tags": [], "bug_id": 61649, "attachment_id": null, "text": "Hi,\n\nSomeone had chance to take a look on this?\n\nThanks", "id": 202098, "time": "2017-11-13T15:45:29Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-11-13T15:45:29Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202099, "creation_time": "2017-11-13T16:34:22Z", "time": "2017-11-13T16:34:22Z", "creator": "bodewig@apache.org", "text": "You are probably doing some escaping in your command line args that used to be necessary in 1.9.6 that is now no longer necessary on 1.9.9. Does it work with 1.9.9 if you remove the backslashed in -Dwsadmin.extra.args?", "is_private": false}, {"count": 14, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202108, "time": "2017-11-14T07:32:41Z", "creator": "bodewig@apache.org", "creation_time": "2017-11-14T07:32:41Z", "is_private": false, "text": "Could you please add --execdebug to the command line when running your script on RHEL?"}, {"count": 15, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202110, "time": "2017-11-14T10:24:17Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-11-14T10:24:17Z", "is_private": false, "text": "Hi,\n\nif we leave the rel line uncomment, when we try our command line ( with or without backslashed) \n\nFor these commands\n../build.sh installapp -Dwsadmin.extra.args=\"-javaoption -Xmx1024m -appendtrace true\" --execdebug\n../build.sh installapp -Dwsadmin.extra.args=\\\"-javaoption -Xmx1024m -appendtrace true\\\" --execdebug\n\n\nthe build fails right away and it shows this:\n\n\nTEST - Invoking /build.sh\nexec \"$JAVACMD\" -Xmx1400m -Dcmp.maxmemory=1400m -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\" -Dant.library.dir=\"$ANT_LIB\"  org.apache.tools.ant.launch.Launcher  -cp \"$CLASSPATH\"  \"-f\" \"./build.xml\" \"-Dprp.noninternedstrings=true\" \"installapp\" \"-Dwsadmin.extra.args=-javaoption\" \"-Xmx1024m\" \"-appendtrace\" \"true\"\nUnknown argument: -Xmx1024m\nant [options] [target [target2 [target3] ...]]\nOptions: \n  -help, -h              print this message and exit\n  -projecthelp, -p       print project help information and exit\n  -version               print the version information and exit\n  -diagnostics           print information that might be helpful to\n                         diagnose or report problems and exit\n  -quiet, -q             be extra quiet\n  -silent, -S            print nothing but task outputs and build failures\n  -verbose, -v           be extra verbose\n  -debug, -d             print debugging information\n  -emacs, -e             produce logging information without adornments\n  -lib <path>            specifies a path to search for jars and classes\n  -logfile <file>        use given file for log\n    -l     <file>                ''\n  -logger <classname>    the class which is to perform logging\n  -listener <classname>  add an instance of class as a project listener\n  -noinput               do not allow interactive input\n  -buildfile <file>      use given buildfile\n    -file    <file>              ''\n    -f       <file>              ''\n  -D<property>=<value>   use value for given property\n  -keep-going, -k        execute all targets that do not depend\n                         on failed target(s)\n  -propertyfile <name>   load all properties from file with -D\n                         properties taking precedence\n  -inputhandler <class>  the class which will handle input requests\n  -find <file>           (s)earch for buildfile towards the root of\n    -s  <file>           the filesystem and use it\n  -nice  number          A niceness value for the main thread:                         1 (lowest) to 10 (highest); 5 is the default\n  -nouserlib             Run ant without using the jar files from                         ${user.home}/.ant/lib\n  -noclasspath           Run ant without using CLASSPATH\n  -autoproxy             Java1.5+: use the OS proxy settings\n  -main <class>          override Ant's normal entry point"}, {"count": 16, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202422, "creation_time": "2017-11-27T09:02:14Z", "time": "2017-11-27T09:02:14Z", "creator": "bodewig@apache.org", "text": "I'm sorry for the delay, have been too busy elsewhere. But now I should be able to really deal with the issue.\n\nLooking at\n\nexec \"$JAVACMD\" -Xmx1400m -Dcmp.maxmemory=1400m -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\" -Dant.library.dir=\"$ANT_LIB\"  org.apache.tools.ant.launch.Launcher  -cp \"$CLASSPATH\"  \"-f\" \"./build.xml\" \"-Dprp.noninternedstrings=true\" \"installapp\" \"-Dwsadmin.extra.args=-javaoption\" \"-Xmx1024m\" \"-appendtrace\" \"true\"\nUnknown argument: -Xmx1024m\n\nshows something has split wsadmin.extra.args into multiple args, but unfortunately I cannot see what I really wanted to see (Ant's argument parsing) because of the way the script works. For me you'd have to make --execdebug the very fisr argument so we can see what Ant does to your arguments.\n\nHere is a trivial example\n\n$ cat build.xml\n<project>\n  <echo>Hello, world!</echo>\n</project>\n$ ant --execdebug -Dfoo=\"bar -Xmx1024m baz\" \narg       : -Dfoo=bar -Xmx1024m baz\nquoted_arg: \"-Dfoo=bar -Xmx1024m baz\"\nexec \"$JAVACMD\"  -classpath \"$LOCALCLASSPATH\" -Dant.home=\"$ANT_HOME\" -Dant.library.dir=\"$ANT_LIB\"  org.apache.tools.ant.launch.Launcher  -cp \"$CLASSPATH\"  \"-Dfoo=bar -Xmx1024m baz\"\nBuildfile: /tmp/build.xml\n     [echo] Hello, world!\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nas you can see Ant keeps the foo arg intact without me having to use any backslashes.\n\nI'd really like to see what your ./build.sh turns your quoted argument to.", "is_private": false}, {"count": 17, "tags": [], "bug_id": 61649, "attachment_id": 35562, "text": "Created attachment 35562\n--execdebugLogs\n\nHi,\n\nIn attached you will find the two attempts with --execdebug as first argument, \nlet me know if it is what you are looking for\n\nthanks", "id": 202444, "time": "2017-11-28T09:59:33Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-11-28T09:59:33Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202449, "time": "2017-11-28T16:02:33Z", "creator": "bodewig@apache.org", "creation_time": "2017-11-28T16:02:33Z", "is_private": false, "text": "many thanks\n\nYour output contains\n\n++ ant -f ./build.xml -Dprp.noninternedstrings=true --execdebug installapp '-Dwsadmin.extra.args=\"-javaoption' -Xmx1024m -appendtrace 'true\"'\n\nwhich is how your build.sh invokes the ant wrapper script. As you can see it seems to cut the wsadmin.extra.args parameter into four different pieces (two of which contain an embedded double-quote).\n\nI'm not exactly sure how the wrapper script managed to deal with an invocation like this before :-)\n\nTo me this looks as if your build.sh script contained a bug that the older wrapper script managed to handle gracefully while the newer one has become more strict and fails now. I don't see how we would make things work for you again without reverting to a state that was broken.\n\nIn this case build.sh tells Ant to use four arguments and the old behavior of ignoring build.sh's wish is wrong."}, {"count": 19, "tags": [], "bug_id": 61649, "attachment_id": null, "id": 202504, "time": "2017-12-01T11:06:45Z", "creator": "cpisapia@ie.ibm.com", "creation_time": "2017-12-01T11:06:45Z", "is_private": false, "text": "hi\nthanks for the update,\n\nfurther information\n\nA use case is wanting to be able to pass a property value as a string; e.g. a string containing an argument and value to be passed to a UNIX shell script: -Dsome.property=\"--arg value\", in the past we could place ${some.property} in the invocation of that UNIX shell script, sometimes invoking it as above, or with -Dsome.property=\"--just-arg\", or with -Dsome.property=\"--three-value-arg 1 2 3\" But, now seems that Ant ignores our desire to treat a property value as a string; the ability to separate the semantics of what we pass in versus how Ant handles that in between the command line and what we ask Ant to invoke for us.\n\nDoes Ant support passing a string as a property value?  \n\nDo you have any suggestion how we have to write this command line in order to follow the new guideline?\n\nthanks"}, {"count": 20, "tags": [], "bug_id": 61649, "attachment_id": null, "text": "Yes, it does. It really is your \"build.sh\" script that breaks the arguments.\n\nHere is an example\n\n$ cat > /tmp/test.xml\n<project>\n  <echo>$${foo}'s value is \"${foo}\"</echo>\n</project>\n^D\n$ ant -f /tmp/test.xml \nBuildfile: /tmp/test.xml\n     [echo] ${foo}'s value is \"${foo}\"\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n$ ant -f /tmp/test.xml -Dfoo=bar\nBuildfile: /tmp/test.xml\n     [echo] ${foo}'s value is \"bar\"\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n$ ant -f /tmp/test.xml -Dfoo=\"bar baz\"\nBuildfile: /tmp/test.xml\n     [echo] ${foo}'s value is \"bar baz\"\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nEven\n\n$ ant -f /tmp/test.xml -Dfoo=\"bar -Xmx1024m baz 'and something \\\"strangely\\\" quoted'\"\nBuildfile: /tmp/test.xml\n     [echo] ${foo}'s value is \"bar -Xmx1024m baz 'and something \"strangely\" quoted'\"\n\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nIt is build.sh that turns the single property into three separate command line args. The old script seems to have combined them correctly back into a single argument by accident. Now that we've fixed the ant wrapper script you must ensure build.sh works correctly for your quited arguments as well.", "id": 202513, "time": "2017-12-01T13:44:34Z", "creator": "bodewig@apache.org", "creation_time": "2017-12-01T13:44:34Z", "is_private": false}]
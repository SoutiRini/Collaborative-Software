[{"count": 0, "tags": [], "creator": "jariniskala@gmail.com", "attachment_id": null, "id": 123270, "time": "2008-12-13T11:31:20Z", "bug_id": 46391, "creation_time": "2008-12-13T11:31:20Z", "is_private": false, "text": "I have customer file (included as attachment) that causes an java.io.IOException: Cannot remove block[ 11024 ]; out of range[ 0 - 9406 ] when trying to create a POIFSFileSystem for it. E.g. POIFSFileSystem fs = new POIFSFileSystem(is); \n\nThis problem is seen with poi-3.2-FINAL-20081019 as well as with the latest poi-3.5-beta4-20081128.jar.\n\nLooks like the issue is that the file is 4,816,896 bytes which is 9408 512 byte big blocks. However, when the POIFS is reading the small blocks it follows the entries links it is expecting to be able to access entries greater than 11000, with what looks to be 11036 as the limit. The entries does look valid as it has an end of chain (-2) coming right after the invalid index. So most likely this means that not all of the blocks are 512 bytes\u2026 \n\nI attempted to just ignore the error and this results in some missing information. However, the information that is found is correct.\n\nI\u2019m completely new to this code so if anyone could help me with this it would be greatly appreciated.\n\nHere\u2019s also the stack trace:\n\nBlockAllocationTableReader.fetchBlocks(int, BlockList) line: 192 \nRawDataBlockList(BlockListImpl).fetchBlocks(int) line: 130          \nSmallBlockTableReader.getSmallDocumentBlocks(RawDataBlockList, RootProperty, int) line: 59 \nPOIFSFileSystem.<init>(InputStream) line: 177    \n\nThis file is a 2007 MS Project file and MS Project opens this file successfully. Also re-saving within MS Project does not clear this problem so it appears to be a persistent condition."}, {"count": 1, "tags": [], "creator": "jariniskala@gmail.com", "attachment_id": null, "id": 123271, "time": "2008-12-13T11:36:00Z", "bug_id": 46391, "creation_time": "2008-12-13T11:36:00Z", "is_private": false, "text": "Looks like the file is too large (4.7MB). Just let me know if you are looking into this and I will get the file to you."}, {"count": 2, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "is_private": false, "id": 124496, "time": "2009-01-29T11:51:10Z", "bug_id": 46391, "creation_time": "2009-01-29T11:51:10Z", "text": "This looks similar to bug 44898, but that has been fixed since before version 3.2-FINAL.  I guess we'll need to look at your file.  I'm not sure what the exact limit is, but it may be around 1BM.  Perhaps your file will zip or bzip2 to an acceptable size, otherwise you can just e-mail it to me directly."}, {"count": 3, "tags": [], "bug_id": 46391, "is_private": false, "text": "Created attachment 23263\nOriginal mpp file with the problem.", "id": 124876, "time": "2009-02-16T15:08:13Z", "creator": "jariniskala@gmail.com", "creation_time": "2009-02-16T15:08:13Z", "attachment_id": 23263}, {"count": 4, "tags": [], "creator": "jariniskala@gmail.com", "attachment_id": 23264, "id": 124877, "time": "2009-02-16T15:09:29Z", "bug_id": 46391, "creation_time": "2009-02-16T15:09:29Z", "is_private": false, "text": "Created attachment 23264\nAnother file with similar issue."}, {"count": 5, "tags": [], "creator": "jariniskala@gmail.com", "attachment_id": null, "id": 124878, "time": "2009-02-16T15:12:46Z", "bug_id": 46391, "creation_time": "2009-02-16T15:12:46Z", "is_private": false, "text": "Hi Josh,\n\nShoot, somehow I missed your comments! I've attached the files and I was able to even attach the original file after zipping it. Amazingly it compressed to 1/10th original size. (I can't believe I didn't try that earlier!)\n\nThank you so much for looking at this! You can also reach me directly at jariniskala@gmail.com if you have any questions/comments.\n\nBtw, I also attached another file that I received today with similar issue. MS Project is also able to open this other file although it does complain about some information missing.\n\n-Jari"}, {"count": 6, "tags": [], "bug_id": 46391, "is_private": false, "text": "There is a unsupported chain terminator (entry = -3) right after the block with index=11024. It can be seen if you put a debug statement in BlockAllocationTableReader.setEntries at line 292:\n\n                if (entry == POIFSConstants.UNUSED_BLOCK)\n                {\n                    raw_blocks.zap(_entries.size());\n                }\n                System.out.println(offset + \" \" + entry + \" \" + block_index);\n\nThis method only handles unused blocks (entry = -1) and treats -3 as regular blocks. I very much suspect it is the reason. \n\nHere is what the docs say about chain terminators:\n\n\"Special values are reserved for chain terminators (ENDOFCHAIN = 0xFFFFFFFE), free sectors (FREESECT = 0xFFFFFFFF), and sectors that contain storage for Fat Sectors (FATSECT = 0xFFFFFFFD) or DIF Sectors (DIFSECT = 0xFFFFFFC), which are not chained in the same way as the others.\nThe locations of Fat Sectors are read from the DIF (Double-indirect Fat), which is described below. The Fat is represented in itself, but not by a chain \u2013 a special reserved SECT value (FATSECT = 0xFFFFFFFD) is used to mark sectors allocated to the Fat. A SECT can be converted into a byte offset into the file by using the following formula: SECT << ssheader._uSectorShift + sizeof(ssheader). This implies that sector 0 of the file begins at byte offset 512, not at 0.\"\n\nYegor\n", "id": 124884, "time": "2009-02-17T01:11:35Z", "creator": "yegor@dinom.ru", "creation_time": "2009-02-17T01:11:35Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "is_private": false, "id": 124885, "time": "2009-02-17T01:17:42Z", "bug_id": 46391, "creation_time": "2009-02-17T01:17:42Z", "text": "Interestingly, although both files throw the same exception, the stack trace is different. \n\nSan Fillipo Schedule 12-08-08.mpp\njava.io.IOException: Cannot remove block[ 11024 ]; out of range[ 0 - 9406 ]\n    at org.apache.poi.poifs.storage.BlockListImpl.remove(BlockListImpl.java:106)\n    at org.apache.poi.poifs.storage.BlockAllocationTableReader.fetchBlocks(BlockAllocationTableReader.java:196)\n    at org.apache.poi.poifs.storage.BlockListImpl.fetchBlocks(BlockListImpl.java:132)\n    at org.apache.poi.poifs.storage.SmallBlockTableReader.getSmallDocumentBlocks(SmallBlockTableReader.java:57)\n    at org.apache.poi.poifs.filesystem.POIFSFileSystem.<init>(POIFSFileSystem.java:176)\n    at org.apache.poi.ole.Test46391.main(Test46391.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)\n\n\nWBS_ElectromechSysProj.mpp\njava.io.IOException: Cannot remove block[ 1148 ]; out of range[ 0 - 694 ]\n    at org.apache.poi.poifs.storage.BlockListImpl.remove(BlockListImpl.java:106)\n    at org.apache.poi.poifs.storage.BlockAllocationTableReader.<init>(BlockAllocationTableReader.java:92)\n    at org.apache.poi.poifs.filesystem.POIFSFileSystem.<init>(POIFSFileSystem.java:164)\n    at org.apache.poi.ole.Test46391.main(Test46391.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)\n\n\nYegor\n"}, {"count": 8, "tags": [], "creator": "sagar.lonkar@zeonsolutions.com", "attachment_id": null, "id": 136088, "time": "2010-04-13T08:44:55Z", "bug_id": 46391, "creation_time": "2010-04-13T08:44:55Z", "is_private": false, "text": "I am also getting same error when excel file size is big. I am using FTPClient (Apache Commons Net API) to get input stream of Excel file by calling ,\n\nInputStream oInputStream = ftpClient.retrieveFileStream(\"data.xls\");\nPOIFSFileSystem oPOIFSFileSystem = new POIFSFileSystem(oInputStream);\nHSSFWorkbook oHSSFWorkbook = new HSSFWorkbook(oPOIFSFileSystem);\n \nAnd I am getting same error. I am using latest version of POI (poi-3.6-20091214.jar). \n\nPlease look into the issue."}, {"count": 9, "tags": [], "bug_id": 46391, "is_private": false, "text": "Your file really is corrupt - there's nothing sensible that POI can do with it\n\nIn the header of the file, it contains a list of the sectors that will contain the FAT blocks. The header claims that one of those FAT blocks can be found in sector #11024. However, you file doesn't have that many sectors!\n\nThe spec is quite clear that the pointer to the FAT sectors must either be the offset to the sector, or 0xFFFFFFFF (FREE) - it's not allowed to point off the end of the file.", "id": 136091, "time": "2010-04-13T11:08:48Z", "creator": "apache@gagravarr.org", "creation_time": "2010-04-13T11:08:48Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "sagar.lonkar@zeonsolutions.com", "attachment_id": 25301, "is_private": false, "id": 136182, "time": "2010-04-15T07:03:04Z", "bug_id": 46391, "creation_time": "2010-04-15T07:03:04Z", "text": "Created attachment 25301\nThis is the by which I am getting same exception"}]
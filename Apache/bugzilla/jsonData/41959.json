[{"count": 0, "tags": [], "bug_id": 41959, "attachment_id": null, "id": 101031, "creation_time": "2007-03-27T06:19:32Z", "time": "2007-03-27T06:19:32Z", "creator": "hald@icandy.de", "text": "If pdf encryption is turned on links to external resources are scrambled. The\nlink destination varies with every conversion, so it looks like the decryption\nor encryption of the link is not working properly.\n\nSteps to recreate this bug:\n\n1. Create a fop document with a link like this:\n<fo:basic-link external-destination=\"url(http://www.apache.org)\">\n\n2. Convert this document to pdf with turned on encryption:\njava -jar fop.jar in.fo out.pdf -u secret\n\nTested with fop 0.92 and 0.93 with Adobe Reader 7.0 and 8.0 under WindowsXP.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41959, "attachment_id": null, "text": "\nConfirmed. Running examples/fo/basic/newlinktest.fo even crashed my Adobe Reader just now... :/\n\nNo immediate idea on the cause or fix, though.", "id": 101127, "time": "2007-03-28T12:15:40Z", "creator": "adelmelle@apache.org", "creation_time": "2007-03-28T12:15:40Z", "is_private": false}, {"count": 2, "tags": [], "creator": "adelmelle@apache.org", "text": "Still present in FOP Trunk", "id": 122925, "time": "2008-11-29T05:37:02Z", "bug_id": 41959, "creation_time": "2008-11-29T05:37:02Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 41959, "attachment_id": null, "text": "\nRecently reported again on fop-users@ by Peter Coppens, who made progress towards a fix:\n\n---\nI have something that seems to be working, but I am not sure it is always\ncorrect and I doubt it's the most optimal approach.\n\nHere are the changes I did\n\n1. PDFLink#toPDFString\nAdded\n\n       this.action.setParent(this);\n\n(would be better to do this when creating the PDFUri object )\n\n2. PDFUri#getAction\n\n   public String getAction() {\n       return \"<< /URI (\" + uri + \")\\n/S /URI >>\";\n\n   }\n\n\n-->\n\n   public String getAction() {\n         String uriString=new String(this.encodeText2(uri));\n\n         return \"<< /URI \" + uriString + \"\\n /S /URI >>\";\n\n       }\n\n\n3. Added PDFObject#encodeText2\n\n\n   protected byte[] encodeText2(String text)  {\n       if (getDocumentSafely().isEncryptionActive()) {\n           final byte[] buf = PDFText.encode(text);\n           byte[] enc = getDocument().getEncryption().encrypt(buf, this);\n           return PDFText.toHex(enc,true).getBytes();\n\n        } else {\n           return encode(PDFText.escapeText(text, false));\n\n        }\n\n   }\n\n\nPerhaps this can be used as something to start from for a patch for bug\n41959 ?\n\nThanks,\n\nPeter\n---", "id": 122935, "time": "2008-11-30T03:44:59Z", "creator": "adelmelle@apache.org", "creation_time": "2008-11-30T03:44:59Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 41959, "attachment_id": null, "id": 122936, "creation_time": "2008-11-30T03:47:49Z", "time": "2008-11-30T03:47:49Z", "creator": "adelmelle@apache.org", "text": "\nAdding my response to Peter's suggestions here too:\n\n---\n> Here are the changes I did\n>\n> 1. PDFLink#toPDFString\n> Added\n>\n>      this.action.setParent(this);\n>\n> (would be better to do this when creating the PDFUri object )\n\nOr maybe, we should do this in PDFLink#setAction() ?\n\nThat seems to be the point where the PDFAction (PDFUri) is associated with the PDFLink.\n\nI already checked whether this had unwanted side-effects when the same URI is used in multiple links, but that does not seem to be the case. The parent link is only used to get to the ancestor document, which is obviously the same for all links.\n\n> 2. PDFUri#getAction\n> <snip />\n> 3. Added PDFObject#encodeText2\n\nI'm wondering to what extent this new, separate method could be merged with the original encodeText(), maybe by changing the signature, and adding a second parameter to distinguish this case from the one covered by the original method.\n---", "is_private": false}, {"count": 5, "tags": [], "bug_id": 41959, "attachment_id": null, "text": "\nI started playing with it myself, and I had the idea of registering the URI as a separate object, to be referenced by the links.\n\nNot sure, but it seems a cleaner and more comprehensive approach for cases where an identical URI is referenced by many links. \nOTOH, it could have drawbacks, in case a large number of different URIs is referenced by only one link at a time (?)\n\nChanges made in a nutshell:\n\n1. PDFDocument \n  -> added List of uris + accompanying findUriAction() method\n2. PDFFactory \n  -> added getUriAction() method, which depends on 1. \n  -> changed getExternalAction() accordingly: replace instantiations to go through getUriAction()\n3. PDFUri \n  -> change getAction() implementation to return the PDF object reference (like PDFGoTo does)\n  -> change toPDFString() to contain the code contained in Peter's suggested PDFObject.encodeText2()\n\nI'll try to post a patch shortly, but it seems I've made a rather large number of other unrelated changes (mostly minor cleanups) to the code, which would only confuse people...", "id": 122941, "time": "2008-11-30T14:12:01Z", "creator": "adelmelle@apache.org", "creation_time": "2008-11-30T14:12:01Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 41959, "attachment_id": null, "text": "I'm sorry that I'm a little late here but I fear the approach you both have taken is probably not the best one. Some background: When I write the PDF-in-PDF extension I needed generic PDF structures (arrays, dictionaries etc.) to I could easily transform the PDFBox model into something that can be processed by FOP's PDF library. That's when I introduced PDFArray, PDFDictionary & Co. The thing is: I've only converted some of the existing PDF classes to use the generic structures, yet. Now, fixing the encryption problem only for this special case seems like a bad idea. You may remember we had a similar problem with the PDF outlines (fo:bookmark) in the past. So we're essentially fixing the same bug in different places. A better idea would be to convert the existing PDF classes to use the generic structures when they need to be touched.\n\nYesterday, I've had some train time (a rare resource lately) and I've converted all the classes related to Actions to use PDFDictionary. That reduces the number of lines of code quite a bit and made the code more readable. I have one remaining problem before my changes are in a state to be committed: I noticed (a little late) that there are two different string types: strings and text strings. String objects are currently treated as if they are \"text strings\", i.e. allow Unicode. But \"strings\" (as used by the \"URI\" dict entry) cannot use Unicode. So I probably have to introduce a \"PDFString\" class that simply carries a \"string\" object and handles the encoding (especially in the encryption case) correctly.\n\nBTW, Andreas, the reuse of URI actions may not always be a good idea since the URI alone may not uniquely identify a URI action. There's also a dictionary entry \"IsMap\" which offers additional functionality. I'm also not entirely sure if this should be a functionality PDFDocument has to offer. This can easily be done outside the PDF library. I'm not saying this is wrong but I wonder if we don't bloat the whole PDF library too much with stuff like this. OTOH, even in PDF 1.7 the URI action doesn't support more than the \"URI\" and \"IsMap\" entries, so if your look-up method includes both the parameters, it should be safe.", "id": 122951, "time": "2008-12-01T01:05:13Z", "creator": "jeremias@apache.org", "creation_time": "2008-12-01T01:05:13Z", "is_private": false}, {"count": 7, "tags": [], "creator": "pc.subscriptions@gmail.com", "text": "I kind of already wondered whether there would not be other cases where this issue would be present (which seems to come from 'forgetting' to invoke an encoding/encryption method before writing out the PDF). I guess that is confirmed now and obviously architectural improvements where it is just no longer possible to create this bug are to be preferred compared to an adhoc fix. That is why I said (..I doubt it's the most optimal approach...).\n\nBut for now I am all set (having a local fix on 0.95) and I guess the next release will have the issue fixed (in a better way).\n\nThanks for moving this forward (and helping me out).\n", "id": 122953, "time": "2008-12-01T01:28:52Z", "bug_id": 41959, "creation_time": "2008-12-01T01:28:52Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "jeremias@apache.org", "text": "Created attachment 22969\nProposed way to approach this problem.\n\nI've attached a patch that shows how I would approach the problem. I've done some testing but not enough to simply commit the changes. For example, I haven't checked FileSpecs which I changed, too, as they are also using \"string\" objects (they would have the same problem when encrypted). I assume Andreas could combine this with his changes. Anyway, a second pair of eyes would be good here. Let me know I should commit the changes.\n\nA more critical part could be the equals() methods that I removed from many classes I converted. I added an equals()/hashcode() pair to PDFDictionary to compensate but I'm not sure if any of this is needed and if it still works as before.", "id": 122955, "time": "2008-12-01T02:24:21Z", "bug_id": 41959, "creation_time": "2008-12-01T02:24:21Z", "is_private": false, "attachment_id": 22969}, {"count": 9, "tags": [], "bug_id": 41959, "attachment_id": null, "id": 123060, "time": "2008-12-03T13:39:11Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-03T13:39:11Z", "is_private": false, "text": "(In reply to comment #8)\n> Created an attachment (id=22969) [details]\n> Proposed way to approach this problem.\n\nNice! Some time ago, when considering the extension to allow injecting custom PDF dictionaries into the output, I already felt a PDFString object to be absent. \n\n<snip />\n> I assume Andreas could combine this with his changes. \n\nYes, seems to be no problem.\n\n> Anyway, a second pair of eyes would be\n> good here. Let me know I should commit the changes.\n> \n> A more critical part could be the equals() methods that I removed from many\n> classes I converted. I added an equals()/hashcode() pair to PDFDictionary to\n> compensate but I'm not sure if any of this is needed and if it still works as\n> before.\n> \n\nSeems more than OK at the very first glance. Certainly beneficial that the equals()/hashCode() pair is centralized in PDFDictionary. \n\nFor a code-compression competition, maybe equals could be:\n\npublic boolean equals(Object o) {\n  return this == o\n    || (o != null\n      && this.getClass() == o.getClass()\n      && (this.entries == ((PDFDictionary)o).entries\n          || (this.entries != null \n              && this.entries.equals(((PDFDictionary)o).entries))));\n}\n\n... but this is more a personal favorite. I'm not sure whether such logical short-circuits actually have any benefit after compilation. I just find them to be clear and concise code-wise... :-)\n\nOne thing that could lead to issues, would be when a PDFDictionary can contain PDFObjects that fall back on the default Object.equals(). Not sure if this is a serious issue, but if so, fixing that for the object types in question shouldn't be too difficult. Quickly redeclaring equals() abstract in PDFObject revealed some 19 types that don't provide an override (hence equals() will only return true in case of identity). \nA few of those will be taken care of by your patch. For the others, we should probably first determine if changing them too would make sense (if they can be used in dictionaries)\nOne type that concerned me, for example, is PDFName, which could act as key in the dictionary. Then I noticed that this is implemented with Java Strings, rather than PDFName objects, so nothing to worry about there. If a PDFName would be used as a value, however, I think we could end up with two dictionaries that have equal-yet-non-identical entries, so entries.equals() would return false because one of the value pairs are of a type that invokes Object.equals().\n"}, {"count": 10, "tags": [], "bug_id": 41959, "attachment_id": 23053, "id": 123563, "time": "2008-12-28T04:32:38Z", "creator": "adelmelle@apache.org", "creation_time": "2008-12-28T04:32:38Z", "is_private": false, "text": "Created attachment 23053\nupdated patch\n\n\nBasically the same as Jeremias' patch-proposal, but with additional hashCode/equals pairs for some other types that are used as values in the dictionaries but are not PDFDictionary subclasses themselves (PDFName, PDFNumber, PDFReference, PDFArray...) .\n\nStill not sure if I got them all. PDFArray can contain any type of Object it seems, so it could well be that I'm still missing some..."}, {"count": 11, "tags": [], "bug_id": 41959, "attachment_id": 23054, "id": 123566, "creation_time": "2008-12-28T13:24:27Z", "time": "2008-12-28T13:24:27Z", "creator": "adelmelle@apache.org", "text": "Created attachment 23054\nanother update\n\nSame as the previous, only with the addition of creating only one URI action for each distinct URI. Those are referenced by the links through their PDF object number. A benefit for cases where separate links with the same URI occur in a lot of places in the document. \nOnly small thing to add is support for the isMap entry.", "is_private": false}, {"count": 12, "tags": [], "creator": "marc.haesen@oneaccess-net.com", "text": "(In reply to comment #11)\n> Created an attachment (id=23054) [details]\n> another update\n> Same as the previous, only with the addition of creating only one URI action\n> for each distinct URI. Those are referenced by the links through their PDF\n> object number. A benefit for cases where separate links with the same URI occur\n> in a lot of places in the document. \n> Only small thing to add is support for the isMap entry.\n\nI had the same problem and I tried this patch. It solved the link to an external web-site problem but a lot of internal links were not working anymore.\n\nI have also tried the patch suggested in Comment #3, and this seems to solve the external link problem without breaking the internal links.\n", "id": 124823, "time": "2009-02-12T09:02:59Z", "bug_id": 41959, "creation_time": "2009-02-12T09:02:59Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #12)\n\nApologies for the rather late response...\n\n> \n> I had the same problem and I tried this patch. It solved the link to an\n> external web-site problem but a lot of internal links were not working anymore.\n\nAnything particular about the internal links? I assume that by 'a lot of' you mean 'not all'. I just tried a small sample, and could not reproduce this immediately (latest FOP Trunk with the patch applied). Can you provide a small sample document, perhaps?\n\n> I have also tried the patch suggested in Comment #3, and this seems to solve\n> the external link problem without breaking the internal links.\n\nThat is expected, since Peter's quick fix only touches the code related to external links (PDF URI Actions). The attached patch proposal is a refactoring of all PDF Actions, including internal links, bookmarks etc.", "id": 125071, "time": "2009-02-22T13:04:28Z", "bug_id": 41959, "creation_time": "2009-02-22T13:04:28Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 41959, "attachment_id": null, "text": "What is the current status of this bug / patch?\nAny thoughts on applying Peter's code from comment 3?\nI'm still running 0.95 and I haven't found any mention of this being looked at or fixed in 1.0. I'm thinking if I do try Peter's suggestion I should at least move to 1.0 beforehand. I just hate putting a self-code patch in and then worry that any new release might contain a modification that would break is. \nDuck", "id": 146037, "time": "2011-04-29T15:12:20Z", "creator": "jkauczka@chubb.com", "creation_time": "2011-04-29T15:12:20Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 41959, "attachment_id": null, "id": 157321, "creation_time": "2012-04-07T01:41:29Z", "time": "2012-04-07T01:41:29Z", "creator": "gadams@apache.org", "text": "resetting P2 open bugs to P3 pending further review", "is_private": false}, {"count": 16, "attachment_id": null, "bug_id": 41959, "text": "change status from ASSIGNED to NEW for consistency", "id": 157901, "time": "2012-04-11T06:17:10Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:17:10Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "dabek@gmx.de", "attachment_id": null, "id": 176809, "time": "2014-07-31T15:55:58Z", "bug_id": 56797, "creation_time": "2014-07-31T15:55:58Z", "is_private": false, "text": "Util.findWrapper(..) returns with a MethodNotFoundException (util.method.ambiguous) under the following conditions:\n- A method is overriden and the return type in the overriden method is inherited from the original method's return type\n- The method is called with a parameter whose type is inherited from the declared type (assignable)\n\nApparently, this leads to a situation with multiple matches.\nIf only one of those conditions is true, the error does not occur.\n\nExample:\n--------\n\t\nTesterBeanA.java:\n\n    public CharSequence getCharSequence(CharSequence cs) {\n        return cs;\n    }\n\t\nTesterBeanAA.java\n\n    @Override\n    public String getCharSequence(CharSequence cs) {\n        return cs.toString();\n    }\n\nTest Case:\n----------\n\nTestMethodExpressionImpl.java:\n\n    @Test\n    public void testInvokeOverridenParamAndReturnType() {\n        MethodExpression me = factory.createMethodExpression(context,\n                \"${beanAA.getCharSequence('test')}\", null ,\n                new Class<?>[] { TesterBeanB.class });\n        assertEquals(\"test\", me.invoke(context, null));\n    }\n\nNote 1: The error also occurs if getCharSequence(..) in TesterBeanA is abstract.\nI suggest adding a check for isAbstract() upon reading method modifiers and drop abstract method right away.\n\nNote 2: This worked in Tomcat 7.0.40."}, {"attachment_id": null, "tags": [], "bug_id": 56797, "text": "That's because the method is ambiguous. Even Java can't figure it out.\n\nSomething is wrong with your sample code: it won't compile.\n\npublic class AmbiguousTest\n{\n    public static class TesterBeanA {\n        public CharSequence getCharSequence(CharSequence cs) {\n          return cs;\n        }\n    }\n\n    public static class TesterBeanAA {\n\n        @Override\n        public String getCharSequence(CharSequence cs) {\n            return cs.toString();\n        }\n    }\n    public static void main(String[] args) {\n        new TesterBeanAA().getCharSequence(\"test\");\n    }\n}\n\nThe code above will not compile under Java 8:\n$ javac AmbiguousTest.java \nAmbiguousTest.java:11: error: method does not override or implement a method from a supertype\n        @Override\n        ^\n1 error\n\nYou may have to come up with a better test case.", "count": 1, "id": 176815, "time": "2014-07-31T17:54:59Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-07-31T17:54:59Z", "is_private": false}, {"count": 2, "tags": [], "creator": "dabek@gmx.de", "text": "The test-code is fine. Of course, it won't compile if you don't extend TesterBeanAA from TesterBeanA.\nJust add the code to the test-classes of the same name in the tomcat7 trunk.\n\nAnd of course an overriden method can't be ambiguous. That's the essence of polymorphism.", "id": 176816, "time": "2014-07-31T19:27:16Z", "bug_id": 56797, "creation_time": "2014-07-31T19:27:16Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 56797, "is_private": false, "id": 176851, "time": "2014-08-03T13:16:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-08-03T13:16:32Z", "tags": [], "text": "Aw, crap. I missed that, obviously. It's always easier to run a unit test when it comes in a self-contained example. ;)"}, {"count": 4, "tags": [], "creator": "markt@apache.org", "text": "Thanks for the report. This has been fixed in 8.0.x for 8.0.11 onwards and in 7.0.x for 7.0.56 onwards.", "id": 176916, "time": "2014-08-05T11:24:38Z", "bug_id": 56797, "creation_time": "2014-08-05T11:24:38Z", "is_private": false, "attachment_id": null}]
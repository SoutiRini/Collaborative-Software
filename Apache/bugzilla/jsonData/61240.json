[{"count": 0, "tags": [], "creator": "hlein-apbz@korelogic.com", "attachment_id": 35090, "is_private": false, "id": 199490, "time": "2017-06-29T18:02:39Z", "bug_id": 61240, "creation_time": "2017-06-29T18:02:39Z", "text": "Created attachment 35090\nRevert the change in behavior of apr_file_transfer_contents which breaks htpasswd files.\n\nA recent apr commit changed apr_file_transfer_contents to always set the destination file to match the permissions of the source file, even if the destination file already exists with different permissions.  This breaks htpasswd(1) in common configurations.\n\nThe one-line change was committed here:\nhttps://svn.apache.org/viewvc?view=revision&revision=1791029\n\n...after being briefly discussed on the apr-dev mailing list, starting here: https://marc.info/?l=apr-dev&m=149088210914254&w=2\n\nThis change had an unintended consequence that causes htpasswd(1) to break htpasswd files' permissions.\n\nThe htpasswd file needs to be readable by Apache's non-root user, so it is common for it to be root:apache mode 640 or so.  When using htpasswd(1) to update it, a tempfile is created mode 600, and then apr_file_copy (which calls apr_file_transfer_contents) is used to copy tempfile contents to the real htpasswd file.  Since the above change landed in apr 1.62, the permissions of the real htpasswd file are clobbered, explicitly chmod'ed to 600 to match that of the tempfile.  All access to content protected by htpasswd will now fail, because Apache cannot read the file.\n\nProbably this means htpasswd(1) is using apr_file_copy incorrectly, but its use has not changed for over a decade.  It could easily be that other tools depend on the longstanding behavior.  Recommend this change be reverted until/unless all users of apr_file_transfer_contents can be checked for the ramifications."}, {"count": 1, "tags": [], "creator": "hlein-apbz@korelogic.com", "attachment_id": null, "text": "s/1\\.62/1.6.2/g", "id": 199492, "time": "2017-06-29T18:17:45Z", "bug_id": 61240, "creation_time": "2017-06-29T18:17:45Z", "is_private": false}, {"count": 2, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "is_private": false, "id": 199501, "time": "2017-06-29T22:59:07Z", "bug_id": 61240, "creation_time": "2017-06-29T22:59:07Z", "text": "The change sets file perms to those of the source file if and only if the to_perms argument tells it to.  So if there's a bug, it's in the arguments with which apr_file_transfer_contents is called.\n\nI just tried running htpasswd under gdb with a breakpoint on apr_file_transfer_contents, but it never reached the breakpoint.  Can you supply a test case that demonstrates your problem?"}, {"count": 3, "tags": [], "creator": "hlein-apbz@korelogic.com", "attachment_id": null, "is_private": false, "id": 199503, "time": "2017-06-30T03:25:37Z", "bug_id": 61240, "creation_time": "2017-06-30T03:25:37Z", "text": "(In reply to Nick Kew from comment #2)\n> The change sets file perms to those of the source file if and only if the\n> to_perms argument tells it to.  So if there's a bug, it's in the arguments\n> with which apr_file_transfer_contents is called.\n\nYeah, probably htpasswd(1) is calling apr_file_copy incorrectly, but it has been doing so forever:\n\napache-git/httpd $ git blame support/htpasswd.c | egrep apr_file_copy\n9229359a77b (Thom May           2004-03-13 22:18:19 +0000 506)     if (apr_file_copy(dirname, pwfilename, APR_FILE_SOURCE_PERMS, pool) !=\n\nIt does seem like APR_FILE_SOURCE_PERMS is the wrong value to pass here, and it has worked all along only because of the actual behavior of apr_file_copy.  Fixing apr_file_copy broke this longstanding wrong use - and perhaps other callers of it also have baked-in assumptions of its wrong behavior.\n\nI only see two callers of apr_file_copy in httpd.git, htpasswd.c and htdigest.c; the latter is very similar especially in its file-handling code.\n\nI have no idea what other Apache projects link to libapr and might also (mis)use it and whose bugs this change will now trigger.\n\n> I just tried running htpasswd under gdb with a breakpoint on\n> apr_file_transfer_contents, but it never reached the breakpoint.  Can you\n> supply a test case that demonstrates your problem?\n\nHm, strange.  It is 100% reproducible here.  Using strace since I am garbage with gdb, and batch mode (-b) to simplify the example (has no impact on the bad behavior by htpasswd):\n\n# ldd `which htpasswd` | egrep apr-\n        libapr-1.so.0 => /usr/lib64/libapr-1.so.0 (0x000003072eec4000)\n\n# ls -l /usr/lib64/libapr-1.so.0\nlrwxrwxrwx 1 root root 17 Jun 29 12:41 /usr/lib64/libapr-1.so.0 -> libapr-1.so.0.6.2\n\n# umask\n0022\n\n# ls -l test_htpasswd\n-rw-r----- 1 root apache 47 Jun 29 23:06 test_htpasswd\n\n# strace htpasswd -b -m test_htpasswd testuser testpass 2>&1 | egrep -2 'chmod|O_CREAT'\nread(3, \"\\26\\341$D\", 4)                 = 4\nclose(3)                                = 0\nopen(\"/tmp/apr-tmp.xwEPYS\", O_RDWR|O_CREAT|O_EXCL, 0600) = 3\nfcntl(3, F_GETFD)                       = 0\nfcntl(3, F_SETFD, FD_CLOEXEC)           = 0\n--\nclose(3)                                = 0\nunlink(\"/tmp/apr-tmp.xwEPYS\")           = 0\nopen(\"/tmp/htpasswd.tmp.4fZ6Oj\", O_RDWR|O_CREAT|O_EXCL, 0600) = 3\nfcntl(3, F_GETFD)                       = 0\nfcntl(3, F_SETFD, FD_CLOEXEC)           = 0\n--\nopen(\"/tmp/htpasswd.tmp.4fZ6Oj\", O_RDONLY|O_CLOEXEC) = 4\nfstat(4, {st_mode=S_IFREG|0600, st_size=47, ...}) = 0\nchmod(\"test_htpasswd\", 0600)            = 0\nopen(\"test_htpasswd\", O_WRONLY|O_CREAT|O_TRUNC|O_CLOEXEC, 0600) = 5\nread(4, \"testuser:$apr1$qXiIfnVS$aGBhoQeU\"..., 8192) = 47\nwrite(5, \"testuser:$apr1$qXiIfnVS$aGBhoQeU\"..., 47) = 47\n\n\n# ls -l test_htpasswd\n-rw------- 1 root apache 47 Jun 29 23:08 test_htpasswd\n\nFirst a tempfile is created mode 0600 (good, sane).  Then a second, also mode 0600.  Then that second is fstat'ed, and the existing htpasswd file is chmod'ed with the specific perms from that second tempfile.\n\nTested using htpasswd(1) from both Apache 2.2.mumble and 2.4.26; the relevant part of support/htpasswd.c is unchanged, as shown above.\n\nPlease let me know if this is not enough to reproduce.\n\nThanks!"}, {"count": 4, "tags": [], "bug_id": 61240, "text": "IMHO APR code is now correct and this is a bug in  htpasswd. Does the following patch to htpasswd fix the issue for you?\n\nIndex: htpasswd.c\n===================================================================\n--- htpasswd.c  (revision 1800082)\n+++ htpasswd.c  (working copy)\n@@ -498,7 +498,7 @@\n\n     /* The temporary file has all the data, just copy it to the new location.\n      */\n-    if (apr_file_copy(dirname, pwfilename, APR_FILE_SOURCE_PERMS, pool) !=\n+    if (apr_file_copy(dirname, pwfilename, APR_OS_DEFAULT, pool) !=\n         APR_SUCCESS) {\n         apr_file_printf(errfile, \"%s: unable to update file %s\" NL,\n                         argv[0], pwfilename);", "id": 199504, "time": "2017-06-30T06:03:41Z", "creator": "rpluem@apache.org", "creation_time": "2017-06-30T06:03:41Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "hlein-apbz@korelogic.com", "attachment_id": null, "text": "(In reply to Ruediger Pluem from comment #4)\n> IMHO APR code is now correct and this is a bug in  htpasswd.\n\nYes, I agree that htpasswd.c is using apr_file_copy incorrectly.  And has been doing so forever.\n\n> Does the\n> following patch to htpasswd fix the issue for you?\n> \n> Index: htpasswd.c\n> ===================================================================\n> --- htpasswd.c  (revision 1800082)\n> +++ htpasswd.c  (working copy)\n> @@ -498,7 +498,7 @@\n> \n>      /* The temporary file has all the data, just copy it to the new\n> location.\n>       */\n> -    if (apr_file_copy(dirname, pwfilename, APR_FILE_SOURCE_PERMS, pool) !=\n> +    if (apr_file_copy(dirname, pwfilename, APR_OS_DEFAULT, pool) !=\n>          APR_SUCCESS) {\n>          apr_file_printf(errfile, \"%s: unable to update file %s\" NL,\n>                          argv[0], pwfilename);\n\nIndeed, that does seem to do the right thing.\n\nSo every caller of apr_file_copy or apr_file_transfer_contents ought to be reviewed to make sure they are not using APR_FILE_SOURCE_PERMS flag (or equivalent APR_FPROT_FILE_SOURCE_PERMS) when they do not mean it.\n\nBut in the meantime shouldn't the fix to apr_file_transfer_contents be reverted, and instead announced as upcoming so projects that use libapr can check?  Unless you can easily tell who all users of apr_file_copy / apr_file_transfer_contents are, and can confirm that none of them will have this problem leading to surprise failures.  That sounds a) not easy and b) not the job of apr-developers?\n\nThanks!", "id": 199514, "time": "2017-06-30T21:04:54Z", "bug_id": 61240, "creation_time": "2017-06-30T21:04:54Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 61240, "text": "(In reply to Hank Leininger from comment #5)\n> (In reply to Ruediger Pluem from comment #4)\n> > IMHO APR code is now correct and this is a bug in  htpasswd.\n> \n> Yes, I agree that htpasswd.c is using apr_file_copy incorrectly.  And has\n> been doing so forever.\n> \n> > Does the\n> > following patch to htpasswd fix the issue for you?\n> > \n> > Index: htpasswd.c\n> > ===================================================================\n> > --- htpasswd.c  (revision 1800082)\n> > +++ htpasswd.c  (working copy)\n> > @@ -498,7 +498,7 @@\n> > \n> >      /* The temporary file has all the data, just copy it to the new\n> > location.\n> >       */\n> > -    if (apr_file_copy(dirname, pwfilename, APR_FILE_SOURCE_PERMS, pool) !=\n> > +    if (apr_file_copy(dirname, pwfilename, APR_OS_DEFAULT, pool) !=\n> >          APR_SUCCESS) {\n> >          apr_file_printf(errfile, \"%s: unable to update file %s\" NL,\n> >                          argv[0], pwfilename);\n> \n> Indeed, that does seem to do the right thing.\n\nComitted to httpd-trunk as r1800594.\n\n> \n> So every caller of apr_file_copy or apr_file_transfer_contents ought to be\n> reviewed to make sure they are not using APR_FILE_SOURCE_PERMS flag (or\n> equivalent APR_FPROT_FILE_SOURCE_PERMS) when they do not mean it.\n> \n> But in the meantime shouldn't the fix to apr_file_transfer_contents be\n> reverted, and instead announced as upcoming so projects that use libapr can\n> check?  Unless you can easily tell who all users of apr_file_copy /\n> apr_file_transfer_contents are, and can confirm that none of them will have\n> this problem leading to surprise failures.  That sounds a) not easy and b)\n> not the job of apr-developers?\n\nNo, we do not remove a fix for a bug in APR. The documentation here was clear and it is a clear bug of the caller if it uses APR_FILE_SOURCE_PERMS / APR_FPROT_FILE_SOURCE_PERMS and if does not want that to happen.", "id": 199527, "time": "2017-07-03T06:40:53Z", "creator": "rpluem@apache.org", "creation_time": "2017-07-03T06:40:53Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "Backported to 2.4.x as r1800775. Will be part of 2.4.27.", "id": 199565, "time": "2017-07-05T06:12:20Z", "bug_id": 61240, "creation_time": "2017-07-05T06:12:20Z", "is_private": false}]
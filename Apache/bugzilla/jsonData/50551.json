[{"count": 0, "tags": [], "text": "In the solution for bug #43371 a patch was provided to enable setting of smax=0.\n\nSetting smax=0 ttl=30 doesn't seem to lead to dropping of the last connection, though.\n\nMy expectation would be, that if I set smax to 0 then each connection should be dropped after ttl expires.\n\nWays to reproduce:\n\n1. Define a ProxyPass, e.g. like this:\nNameVirtualHost 192.168.100.10:443\n<VirtualHost 192.168.100.10:443>\n    SSLEngine ON\n    SSLProxyEngine ON\n    ProxyPass / https://backend.mydomain.com:8080/ disablereuse=On\n    ProxyPassReverse / https://backend.mydomain.com:8080/\n</VirtualHost>\n\n2. After making some requests to the proxy, change the ip-address of the server backend.mydomain.com\n\n3. When you now make a new request, the new ip-address of the backend will be used.\n\n4. Change the configuration to:\nNameVirtualHost 192.168.100.10:443\n<VirtualHost 192.168.100.10:443>\n    SSLEngine ON\n    SSLProxyEngine ON\n    ProxyPass / https://backend.mydomain.com:8080/ smax=0 ttl=30\n    ProxyPassReverse / https://backend.mydomain.com:8080/\n</VirtualHost>\n\n5. After making some requests change the ip-address of the server backend.mydomain.com and wait for a time much bigger than ttl.\n\n6. When you now make new requests, some of the requests, but not all(!) still try to connect to the old ip-address of the backend.\n\nApparently not all connection have beed dropped after ttl expiry.", "attachment_id": null, "id": 143123, "creator": "s.janotta@aviope.de", "time": "2011-01-06T10:26:37Z", "bug_id": 50551, "creation_time": "2011-01-06T10:26:37Z", "is_private": false}, {"count": 1, "tags": [], "text": "Hello, gents,\n\n\nApache 2.2.17 on Solaris 10 seems to ignore ttl.\nConfiguration file :\nProxyPass / http://prnsdv.appsrv:65245/ smax=0 ttl=5\nA network capture shows that the back-end connection is closed by the remote server (prnsdv.appsrv) after 20 seconds (Tomcat ConnectionTimeout).\n\nDid anybody ever succeed to configure this ttl?\n\nTIA,\n\n\nOlivier", "is_private": false, "id": 143304, "creator": "olivier.boel@europarl.europa.eu", "time": "2011-01-12T09:57:28Z", "bug_id": 50551, "creation_time": "2011-01-12T09:57:28Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 50551, "text": "My mistake : I was expecting Apache to close automatically the connection after 5 seconds, but, looking at apr_reslist.h, I read :\n * @param ttl If non-zero, sets the maximum amount of time in microseconds an\n *            unused resource is valid.  Any resource which has exceeded this\n *            time will be destroyed, either when encountered by\n *            apr_reslist_acquire() or during reslist maintenance.\nIndeed, I observed that :\n1. if 2 requests are received in less than ttl seconds, Apache re-uses the existing connection\n2. if there are more than ttl seconds between 2 requests, Apache closes the established connection and creates a new one\n\nSo, ttl works as expected.\n\nGreat!", "id": 143306, "time": "2011-01-12T10:15:47Z", "creator": "olivier.boel@europarl.europa.eu", "creation_time": "2011-01-12T10:15:47Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 50551, "attachment_id": null, "is_private": false, "id": 143307, "time": "2011-01-12T10:37:23Z", "creator": "trawick@apache.org", "creation_time": "2011-01-12T10:37:23Z", "text": "FYI...  The proxy ttl parameter documentation was updated as follows in trunk r1058192.\n\nIndex: mod/mod_proxy.xml\n===================================================================\n--- mod/mod_proxy.xml\t(revision 1058185)\n+++ mod/mod_proxy.xml\t(working copy)\n@@ -994,8 +994,9 @@\n     <tr><td>ttl</td>\n         <td>-</td>\n         <td>Time to live for inactive connections and associated connection\n-        pool entries, in seconds.  Those which are unused for at least\n-        <code>ttl</code> seconds will be destroyed.\n+        pool entries, in seconds.  Once reaching this limit, a\n+        connection will not be used again; it will be closed at some\n+        later time.\n     </td></tr>\n \n     </table>"}, {"count": 4, "attachment_id": null, "bug_id": 50551, "text": "Hi,\nI am still having problems with the smax setting.\nWhile the setting of ttl works for most of the connections, I have the feeling that probably the last one isn't taken out of the pool and isn't put into the \"destroy later\" group.\nCan anyone try to reproduce my settings and confirm/disconfirm my finding?", "id": 144985, "time": "2011-03-14T05:17:21Z", "creator": "s.janotta@aviope.de", "creation_time": "2011-03-14T05:17:21Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 50551, "is_private": false, "id": 145469, "time": "2011-04-01T10:00:19Z", "creator": "s.janotta@aviope.de", "creation_time": "2011-04-01T10:00:19Z", "tags": [], "text": "Hi everybody,\nI have now been able to track down the reason for the bug.\nThe problem is that we are using the prefork model Apache.\nIf I use the worker model, the problem is gone.\n\nI have analyzed the source of the mod_proxy module and found this inside mod_proxy.h:\n\n/* Connection pool */\nstruct proxy_conn_pool {\n    apr_pool_t     *pool;   /* The pool used in constructor and destructor calls */\n    apr_sockaddr_t *addr;   /* Preparsed remote address info */\n#if APR_HAS_THREADS\n    apr_reslist_t  *res;    /* Connection resource list */\n#endif\n    proxy_conn_rec *conn;   /* Single connection for prefork mpm's */\n};\n\nApparently, when using the prefork model, the ttl and smax setting are not applied to the *conn entry.\n\nI don't know if this is possible at all, but is there a reason that this connection doesn't expire?\n\nIn fact, what we really need is not an option for expiry of the connections after idle timeout. We would rather very like to have an option to refresh the IP-address of the connections in case the DNS resolver delivers a different address.\n\nThere is such an option in the mod_weblogic module for Weblogic. It's named WLDNSRefreshInterval and would be very useful in the mod_proxy module, too."}, {"count": 6, "tags": [], "creator": "slawomir.janotta@postfinance.ch", "attachment_id": 27034, "id": 146458, "time": "2011-05-19T11:28:09Z", "bug_id": 50551, "creation_time": "2011-05-19T11:28:09Z", "is_private": false, "text": "Created attachment 27034\nDNS recheck patch\n\nPlease find attached a patch which addresses the DNS chaching issue.\n\nThis is a description of the approach used:\n1. As I didn't find any place where I could put an arbitrarily executed timer, I decided to go with a Boolean option to enable/disable the DNS address issue resolving. I have kept the option by now to be a timer however, to be able to change it if someone tells me how to implement it.\n2. I have put the handling code into the function ap_proxy_release_connection() of module proxy_util.c\n3. The code makes a call to apr_sockaddr_info_get() to check if the destination address has changed. If it has changed, the change is propagated to all places I thought to be relevant and then the connection in question is marked as being due to be closed.\n\nThere are several issues with the patch however, since I am by no means experienced enough with the Apache code to make sure it is the best solution.\nThe main issues I can think of (And you will for sure find others) are:\nA. Is this the right place to put such a check?\nB. Is it possible to have a timer to do this check instead?\nC. Is the pool handling correct or does it lead to a memory leak?\nD. Is the method to clean up and close the connections with obsolete ip addresses (the last four lines of the code above the call to connection_cleanup(conn, s)) the right approach?"}]
[{"count": 0, "tags": [], "text": "Created attachment 28291\nSource code for the repro case\n\nThere is a potential segfault in the tomcat native wrappers around apr_file_info_get() (which themselves probably wrap the fstat() and stat() syscalls).\n\nI've attached a simple java file that reproduces this 100% of the time on my OS X 10.7 system with tomcat-native-1.1.22. I'm not sure if infoGet() is actually used in the tomcat server codebase, I stumbled upon the bug in my own project that uses the tomcat native library's JNI wrappers around Apache Portable Runtime.\n\nRepro instructions:\n\n1) Download and build tomcat-native (I think I got the source from https://github.com/apache/tomcat-native and followed the instructions). You may need to install libapr (apache portable runtime) through apt-get or port or whatever package manager you use.\n\n2) Download the TomcatNativeCrash.java attachment\n3) Copy tomcat-native-*-dev.jar to the same directory as the attachment.\n4) Copy the libtcnative library files for your architecture to the same directory as the attachment (they get built into tomcat-native/jni/native/.libs)\n3) Build the repro case with:\n\njavac -classpath ./tomcat-native*.jar:. TomcatNativeCrash.java\n\n4) Run the repro case with:\n\njava -Djava.library.path=. -classpath ./tomcat-native*.jar:. ./TomcatNativeCrash.java\n\nThe repro just opens a file descriptor to the file named by the first argument (its own source in the example), creates a FileInfo structure, and tries to fstat it via org.apache.tomcat.jni.File.infoGet() 100,000 times. This segfaults for me every single time.\n\nI've coded up a fix and submitted it as a pull request on github: https://github.com/apache/tomcat-native/pull/1", "is_private": false, "id": 153612, "creator": "ivmaykov@gmail.com", "time": "2012-02-08T22:21:15Z", "bug_id": 52627, "creation_time": "2012-02-08T22:21:15Z", "attachment_id": 28291}, {"count": 1, "tags": [], "bug_id": 52627, "text": "For the record, Tomcat doesn't use that method.", "id": 153613, "time": "2012-02-08T22:28:22Z", "creator": "markt@apache.org", "creation_time": "2012-02-08T22:28:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 52627, "text": "Right. But the tomcat-native library is open-source so it's possible to use it in any Java (Scala, Clojure, Groovy, ...) project that's license-compatible with the Apache license, which is how I found the bug. I'm ok with keeping my own fork and using it in our project, but just figured I would report the bug and contribute my bugfix back to you guys :)", "id": 153614, "time": "2012-02-08T22:36:42Z", "creator": "ivmaykov@gmail.com", "creation_time": "2012-02-08T22:36:42Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52627, "text": "Created attachment 28292\nProposed patch\n\nHere is my proposed bugfix, which uses memset() to zero-out the stack-allocated apr_finfo_t structure before using it. This patch makes the repro case (attached earlier) stop crashing.", "id": 153615, "time": "2012-02-08T22:46:04Z", "creator": "ivmaykov@gmail.com", "creation_time": "2012-02-08T22:46:04Z", "is_private": false, "attachment_id": 28292}, {"count": 4, "tags": [], "bug_id": 52627, "attachment_id": null, "id": 167408, "time": "2013-05-24T20:56:49Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-05-24T20:56:49Z", "is_private": false, "text": "Can you give some more information about the crash? For example, build tcnative with debugging symbols and then post the JVM crash dump?\n\nI don't see why zeroing-out a apr_finfo_t structure before calling apr_file_info_get would fix anything, since that structure is only used to deposit information, not to read information.\n\nI think the real problem is that the (tcnative) fill_finfo function isn't sensitive to which fields in the apr_finfo_t structure are actually valid, so it does stupid things like trying to create UTF strings out of potentially invalid (char *) values."}, {"attachment_id": null, "tags": [], "bug_id": 52627, "is_private": false, "count": 5, "id": 167411, "time": "2013-05-25T02:23:53Z", "creator": "ivmaykov@gmail.com", "creation_time": "2013-05-25T02:23:53Z", "text": "It's been a while since I reported this bug and I've had my work machine upgraded since then, so I probably don't have the necessary environment to reproduce this quickly. But from what I remember, yes the bug was in some native function trying interpret garbage values in the stack-allocated apr_finfo_t struct as char* pointers ... I think ... like I said it's been a while."}, {"count": 6, "tags": [], "bug_id": 52627, "attachment_id": null, "id": 196614, "time": "2017-01-31T19:58:01Z", "creator": "markt@apache.org", "creation_time": "2017-01-31T19:58:01Z", "is_private": false, "text": "I couldn't repeat this on a current OSX but I've applied a variation of the patch for 1.2.11. I also turned the repro case into a JUnit test case."}]
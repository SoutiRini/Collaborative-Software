[{"count": 0, "tags": [], "creator": "alexander.schwartz@gmx.net", "text": "As described in the javadoc of DeltaRequest.java this class is not thread save.\nBut if you use one DeltaRequest per session, you still have the problem with two\n(or more) concurrent requests per session and therefor you need to be thread\nsave. Otherwise you will get exceptions like these:\n\njava.util.NoSuchElementException\n\tjava.util.LinkedList.remove(LinkedList.java:579)\n\tjava.util.LinkedList.removeFirst(LinkedList.java:131)\n\torg.apache.catalina.cluster.session.DeltaRequest.addAction(DeltaRequest.java:102)\n\nTherefore this class should be at least synchronized to avoid this. \n\nBut I am not sure if this is enough to solve all possible error scenarios: there\nare some public methods that should be called in one synchronized block from \n\"outside\" an instance, like:\n\nsynchronize (deltaRequest) {\n  deltaRequest.writeExternal(out);\n  // nobody should be able to use addAction before reset() is called\n  deltaRequest.reset();\n}\n\nMaybe reset() should be declared private and called in writerExternal().\n\nAs a workaround I switched back to SimpleTcpReplicationManager.\n\nPlease comment. Thanks.", "id": 63947, "time": "2004-09-21T07:37:53Z", "bug_id": 31328, "creation_time": "2004-09-21T07:37:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Yes, you are right. We have a cluster in production and every now and then a\nuser doesn't wait for a request to complete and instead sends the same request\nagain. Once a day it happens, that these two identical requests end only a few\nmilliseconds away from each other. Then we get the following exception on the\nreceiving side of replication, which indicates, that the replication packet is\ncorrupt. \n\nFilip: I know that your opinion is to not support parallel access to a session.\nOn the other hand it happens very quickly in reality, so at least we should make\nsure, that we don't break the session. I didn't go deeper into the code, so I'm\nnot sure, how much work synchronization would be.\n\nERROR [org.apache.catalina.cluster.tcp.TcpReplicationThread[1]]\n(DeltaManager.java:912) - Unable to receive message through TCP channel\njava.io.EOFException\n\tat java.io.DataInputStream.readInt(DataInputStream.java:448)\n\tat\njava.io.ObjectInputStream$BlockDataInputStream.readInt(ObjectInputStream.java:2657)\n\tat java.io.ObjectInputStream.readInt(ObjectInputStream.java:900)\n\tat\norg.apache.catalina.cluster.session.DeltaRequest$AttributeInfo.readExternal(DeltaRequest.java:285)\n\tat\norg.apache.catalina.cluster.session.DeltaRequest.readExternal(DeltaRequest.java:200)\n\tat\norg.apache.catalina.cluster.session.DeltaManager.loadDeltaRequest(DeltaManager.java:385)\n\tat\norg.apache.catalina.cluster.session.DeltaManager.messageReceived(DeltaManager.java:898)\n\tat\norg.apache.catalina.cluster.session.DeltaManager.messageDataReceived(DeltaManager.java:762)\n\tat\norg.apache.catalina.cluster.tcp.SimpleTcpCluster.messageDataReceived(SimpleTcpCluster.java:576)\n\tat org.apache.catalina.cluster.io.ObjectReader.execute(ObjectReader.java:70)\n\tat\norg.apache.catalina.cluster.tcp.TcpReplicationThread.drainChannel(TcpReplicationThread.java:129)\n\tat\norg.apache.catalina.cluster.tcp.TcpReplicationThread.run(TcpReplicationThread.java:67)", "id": 63999, "time": "2004-09-21T18:33:58Z", "bug_id": 31328, "creation_time": "2004-09-21T18:33:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": 13003, "bug_id": 31328, "text": "Created attachment 13003\nFirst improvement of DeltaRequest.java (not thread safe yet, but without exceptions)", "id": 64865, "time": "2004-10-09T15:26:06Z", "creator": "alexander.schwartz@gmx.net", "creation_time": "2004-10-09T15:26:06Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 31328, "is_private": false, "id": 64866, "time": "2004-10-09T15:31:24Z", "creator": "alexander.schwartz@gmx.net", "creation_time": "2004-10-09T15:31:24Z", "tags": [], "text": "I've just added an attachment of DeltaRequest.java I now use for my production\ntomcat 5.0.27. The synchronized-statements avoid Exceptions on the sending side\n(like the NoSuchElementException I described) and on the receiving side (like\nEOFException that Rainer described). \n\nBut it is not yet thread safe to solve the other problem with the\nwriteExternal() / reset() that should be atomic. So it's still work in progress,\nbut feel free to comment."}, {"count": 4, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "For me this patch looks good. We are going to use it. Recommended for TC 5.0.30.", "id": 65698, "time": "2004-10-26T06:50:57Z", "bug_id": 31328, "creation_time": "2004-10-26T06:50:57Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "fhanik@apache.org", "text": "As mentioned a long long long time ago :)\nIf you have two threads per session, consider the following scenario:\nThread A goes to server S1 and Thread B goes to server S2, your session \nreplication will now be faulty since there is no distributed locking.\n\nAdding in synchronization here, would mean that we are letting the user think \nthat concurrent access is ok, which it isn't.\n\nWhat I do agree with is that the readExternal/writeExternal methods could be \nsynchronized, to avoid corrupted methods. You must still realize, that you \nhave two concurrent requests, there is nothing that guarantees the order of \nthem. Hence synchronizing the entire class does not resolve anything really. \nYour fundamental problem is still that you have more than one thread modifying \nthe session.\n\nI am marking the bug invalid, cause we are not supporting distributed locking \nhence could never put in a complete fix. A synchronized workaround \n\nFilip\n\n\n\n", "id": 65733, "time": "2004-10-26T14:57:25Z", "bug_id": 31328, "creation_time": "2004-10-26T14:57:25Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "Filip,\n\nI agree that distributed locking is out of reach. But please consider the following:\n\ncarefully designed clusters will use sticky session routing via mod_jk. So as\nlong as the primary node ist available there will be no parallel usage of\nsessions via different nodes.\n\nBut even then and even without frames etc. we see every now and then\nunintentional parallel usage by people e.g. using Return and afterwards the\nmouse button to send a form to the server. This will result in double sending of\nthe form and this should not technically corrupt the session objects. Of course\nthere is no guarantee, that all session data still makes sense for the application.\n\nSo at least we should not corrupt the LinkedLists in the DeltaRequest.\n", "id": 65765, "time": "2004-10-26T18:54:19Z", "bug_id": 31328, "creation_time": "2004-10-26T18:54:19Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 31328, "attachment_id": null, "is_private": false, "id": 66084, "time": "2004-10-29T15:33:11Z", "creator": "fhanik@apache.org", "creation_time": "2004-10-29T15:33:11Z", "text": "I put in synchronization of read/write on the tomcat 5.5 branch, this bug \ndidn't contain a patch, rather a complete file, so I won't do anything with \nthat.\n\n"}, {"count": 8, "tags": [], "creator": "fhanik@apache.org", "text": "put in code to check for this, should be in 5.0.30", "id": 67266, "time": "2004-11-19T21:25:02Z", "bug_id": 31328, "creation_time": "2004-11-19T21:25:02Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "alexander.schwartz@gmx.net", "text": "Created attachment 13542\nCode Cleanup; make getSize() synchronized\n\nHi Filip,\n\nThanks for putting the \"synchronized\" in the code in all relevant spots, it\nshould work now. Sorry for not providing a proper patch. \n\nFor some paranoia reasons I'd like to see a synchronized with the getSize() --\nit accessed the actions variable, all other accesses have been synchronized, to\nthis one should be synchronized as well.\n\nAs far as I can see the code will not produce exceptions any more if there are\nparallel request in a session on one tomcat. THANK YOU VERY MUCH, FILIP!\n\nJust some possible optimizations if someone cares: After introducing the\n\"synchronized\" the some of the Exceptions (\"Unable to remove element\") can no\nlonger happen, it is safe to remove them.\n\nAlso I think that the \"synchronized\" in the inner class AttributeInfo is not\nnecessary as it is already called by synchronized methods of DeltaRequest. And\nI also removed one NoSuchElementException that can not be thrown by a simple\nremove(). A patch is included.\n\nI do not reopen this bug, but maybe you find time to test and apply this patch.\nA version like this is running in my production enviro", "id": 67470, "time": "2004-11-25T23:25:48Z", "bug_id": 31328, "creation_time": "2004-11-25T23:25:48Z", "is_private": false, "attachment_id": 13542}]
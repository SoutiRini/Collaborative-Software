[{"count": 0, "tags": [], "creator": "apache@allegory.demon.co.uk", "is_private": false, "text": "I'm just starting with POI and wrote a simple program to read a spreadsheet.\nThe attached program displays incorrect values for HSSFRow.getLastCellNum().\nIt is too large by 1.  The problem appears to be in RowRecord where \nfield_3_last_col has a \"// +1\" comment by it but that is too deep for me.\n\nThe spreadsheet came from US gov statistics and can be supplied upon request, \nhowever it is several megabytes.\n\n(BTW, you don't have NetBSD as OS in bugzilla)\n\nBob\n\nimport java.io.*;\n\nimport org.apache.poi.hssf.usermodel.*;\n\npublic class EG {\n\n    public static void main(String[] args)\n                            throws IOException {\n        FileInputStream fis = new FileInputStream(args[0]);\n\n        HSSFWorkbook wb = new HSSFWorkbook(fis);\n\n        System.out.println(\"#sheets = \" + wb.getNumberOfSheets());\n\n        HSSFSheet sheet = wb.getSheetAt(1);\n\n        System.out.println(\"#rows = \" + (1+sheet.getLastRowNum()));\n\n        HSSFRow row = sheet.getRow(9);\n        short firstCellNum = row.getFirstCellNum();\n        short lastCellNum = row.getLastCellNum();\n\n        System.out.println(\"first col = \" + firstCellNum);\n        System.out.println(\"last col  = \" + lastCellNum);\n\n        System.out.println();\n\n        for (short j=firstCellNum; j < lastCellNum; j++) {\n            HSSFCell cell = row.getCell(j);\n            String str = null;\n\n            switch (cell.getCellType()) {\n\n                case HSSFCell.CELL_TYPE_STRING:\n                    str = cell.getStringCellValue().trim();\n                    break;\n\n                case HSSFCell.CELL_TYPE_NUMERIC:\n                    str = String.valueOf(cell.getNumericCellValue());\n                    break;\n\n            }\n\n            System.out.println(\"cell[\" + j + \"] = \" + str);\n        }\n\n    }\n}", "id": 61919, "time": "2004-08-12T20:44:32Z", "bug_id": 30635, "creation_time": "2004-08-12T20:44:32Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "apache@allegory.demon.co.uk", "is_private": false, "id": 62070, "time": "2004-08-17T12:10:04Z", "bug_id": 30635, "creation_time": "2004-08-17T12:10:04Z", "tags": [], "text": "Never report a bug when you're tired :-)\nSorry."}, {"count": 2, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 62114, "time": "2004-08-18T11:13:37Z", "creator": "apache@allegory.demon.co.uk", "creation_time": "2004-08-18T11:13:37Z", "is_private": false, "text": "Nor should one cancel a bug report when tired.\nChanging the line\n\n        for (short j=firstCellNum; j < lastCellNum; j++) {\n\ninto\n\n        for (short j=firstCellNum; j <= lastCellNum; j++) {\n\ncauses a NullPointerException on the last iteration at line 33, ie \n\n        switch (cell.getCellType()) {\n\nThe final value printed out (on the penultimate iteration)\nis actually the final value in the row.\n\nThus HSSFRow.getLastCellNum() returns a value that is out by one.\n\nBob\n"}, {"count": 3, "tags": [], "bug_id": 30635, "is_private": false, "text": "This bug was set to invalid twice. Can anybody please explain why? I have \ncurrently the same problems and would like to know how I should handle this.\n\nCalling row.getCell(row.getLastRowNum()) returns null. And my test sheet has \nonly one row with three columns. But the method returns 3 instead of the \nexpected 2 (as the javadoc says that getLastRowNum() is 0-based).", "id": 63844, "time": "2004-09-20T08:16:42Z", "creator": "kainberger@beit.at", "creation_time": "2004-09-20T08:16:42Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 63848, "time": "2004-09-20T09:17:24Z", "creator": "apache@allegory.demon.co.uk", "creation_time": "2004-09-20T09:17:24Z", "is_private": false, "text": "The day after submitting the report, I looked at it again and thought I had been \nwrong.  Later, when I started using the POI code again, it became clear that the \nbug was real and so I reopened it and added further explanation to show how to \ndefinitively prove the bug's existence.\n\nSorry for the confusion this caused.  Tired at the terminal :-)"}, {"count": 5, "tags": [], "creator": "a.schild@aarboard.ch", "attachment_id": 13742, "id": 68350, "time": "2004-12-13T16:10:41Z", "bug_id": 30635, "creation_time": "2004-12-13T16:10:41Z", "is_private": false, "text": "Created attachment 13742\nExample of a XLS file who returns not enough rows"}, {"count": 6, "tags": [], "creator": "a.schild@aarboard.ch", "is_private": false, "text": "We too see this behaviour on SOME xls files. We have attached such a problematic\nxls file.", "id": 68351, "time": "2004-12-13T16:11:15Z", "bug_id": 30635, "creation_time": "2004-12-13T16:11:15Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 30635, "is_private": false, "id": 68352, "time": "2004-12-13T16:11:59Z", "creator": "a.schild@aarboard.ch", "creation_time": "2004-12-13T16:11:59Z", "tags": [], "text": "http://sourceforge.net/tracker/index.php?func=detail&aid=1028478&group_id=50004&atid=458266"}, {"count": 8, "attachment_id": null, "bug_id": 30635, "is_private": false, "id": 90152, "time": "2006-06-13T16:35:47Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-06-13T16:35:47Z", "tags": [], "text": "I can confirm this issue- just experienced myself. Is there any progress on this?"}, {"count": 9, "attachment_id": null, "creator": "sanjay.madhavan@gmail.com", "is_private": false, "id": 91605, "time": "2006-07-26T12:06:01Z", "bug_id": 30635, "creation_time": "2006-07-26T12:06:01Z", "tags": [], "text": "We are seeing the same problem with getLastCellNum() being off by one when the\nfile is created by POI. If we open and save the file in excel the count is then\ncorrect.\n\n/sanjay"}, {"count": 10, "attachment_id": null, "bug_id": 30635, "is_private": false, "id": 93031, "time": "2006-09-05T13:08:02Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:08:02Z", "tags": [], "text": "The issue has been open for more than two years now and still present in latest\n3.0 prereleases. Is there any hope for an answer/ fix?"}, {"count": 11, "tags": [], "bug_id": 30635, "attachment_id": null, "is_private": false, "id": 93032, "time": "2006-09-05T13:10:20Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:10:20Z", "text": "I believe bugs 30671 and 23954 may be duplicates of this."}, {"count": 12, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 93037, "time": "2006-09-05T13:15:36Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:15:36Z", "is_private": false, "text": "*** Bug 30671 has been marked as a duplicate of this bug. ***"}, {"count": 13, "tags": [], "bug_id": 30635, "attachment_id": null, "is_private": false, "id": 93039, "time": "2006-09-05T13:17:14Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-05T13:17:14Z", "text": "As workaround, you could use the row iterator to loop over the rows in a\nspreadsheet. The iterator does not seem to experience the issue."}, {"count": 14, "tags": [], "creator": "cpuidle@gmx.de", "is_private": false, "text": "*** Bug 39921 has been marked as a duplicate of this bug. ***", "id": 93043, "time": "2006-09-05T13:26:50Z", "bug_id": 30635, "creation_time": "2006-09-05T13:26:50Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 30635, "is_private": false, "text": "This is/was a documentation bug. The return from getLastCellNum actually returns\nthe last cell number + 1. Basically this is returning exactly what is in the\ninternal excel record structure.\n\nI have corrected SVN to include a more appropriate javadoc comment.\n\nFeel free to repoen if i have missed something.\n\nJason ", "id": 93338, "time": "2006-09-11T11:31:30Z", "creator": "jheight@apache.org", "creation_time": "2006-09-11T11:31:30Z", "attachment_id": null}, {"count": 16, "attachment_id": null, "bug_id": 30635, "is_private": false, "id": 93341, "time": "2006-09-11T13:16:48Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-11T13:16:48Z", "tags": [], "text": "Jason,\n\nI think there is indeed more. We're seeing to different kinds of files. Please\ncheck bug 39921, too.\n\nIf just the XLS record structure is returned, the error may be in creating the\nfiles. I remember reading in one of the other bugs that POI-created files\nindicate wrong max row/cell numbers.\n\nMaybe this is the issue we're seing here?"}, {"count": 17, "attachment_id": null, "creator": "jheight@apache.org", "is_private": false, "id": 93366, "time": "2006-09-11T21:42:42Z", "bug_id": 30635, "creation_time": "2006-09-11T21:42:42Z", "tags": [], "text": "quite possibly poi has been writing them incorrectly. Ill look into it. Do you\nknow the bug id where the last row/col numbers were written incorrectly.\n\nJason"}, {"count": 18, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 93377, "time": "2006-09-12T07:01:17Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-09-12T07:01:17Z", "is_private": false, "text": "I had previously marked that as duplicate- it's Bug 30671.\n\nPlease let me/us know,\nAndi"}, {"count": 19, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 94463, "time": "2006-10-04T01:48:45Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-10-04T01:48:45Z", "is_private": false, "text": "I wrote a small test program to analyze the issue (see attachment) and found \nthe following (unexpected) result:\n0) when XLS file has 0 lines, both getFirst- and getLastRowNum return 0. This \nwould seem to indicate that for reading them you'd need to loop from \nfrist..last-1.\n1) when XLS file has 1 lines, both getFirst- and getLastRowNum still return 0. \nThis is confusing- as it would seem to indicate that for reading them you'd \nneed to loop from frist..last instead of last-1.\n2) when XLS file has 2 lines, both getFirstRowNum still returns 0 while \ngetLastRowNum return 1. This is consistent with the finding in 1).\n\nThese results are the same when test is executed against files produced by poi \nor Excel 2003 either. I did not validate the bahaviour for columns but suspect \nthey might be the same.\n\nThe only sensible conclusion I can draw is that getLastRowNum on XLS files is \nnot a reliable indicator if the last row really exists. Applications need to \nread up to getLastRowNum and verify if row!=null to handle the case of zero \ntotal rows.\nIf this is true, then hte bug- if any- might be in the documentation of the \ngetLastRowNum function's behaviour?"}, {"count": 20, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 94960, "time": "2006-10-19T02:16:52Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-10-19T02:16:52Z", "is_private": false, "text": "Jason, any idea?\n\nThanks,\nAndi"}, {"count": 21, "tags": [], "bug_id": 30635, "attachment_id": null, "is_private": false, "id": 96661, "time": "2006-12-08T08:00:16Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-12-08T08:00:16Z", "text": "Any chance to look at this? Thanks!"}, {"count": 22, "tags": [], "bug_id": 30635, "attachment_id": null, "is_private": false, "id": 96686, "time": "2006-12-09T01:57:49Z", "creator": "poi-support@buni.org", "creation_time": "2006-12-09T01:57:49Z", "text": "this has actually been explained many many times.  The +1 behavior is from the\nfile format itself.  It is SUPPOSED to be +1."}, {"count": 23, "tags": [], "bug_id": 30635, "is_private": false, "text": "Andy,\nI know the explanation, thank you. What I don't understand how, in this case, it\nis possible to distinguish between a file with 0 and with 1 line filled. In both\ncases the function will return 0?\nAs for being persistent on this, I was referring to comment 17.", "id": 96687, "time": "2006-12-09T02:49:32Z", "creator": "cpuidle@gmx.de", "creation_time": "2006-12-09T02:49:32Z", "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 30635, "is_private": false, "text": "New POI user here.  I'm hitting the same problem: I get one result when the file\nwas last written by POI, and another result if the file was last written by\nExcel.  Reading the comments below it looks like the workaround is to not use\nthe getLastCellNum method, in which case a reasonable fix would involve at the\nvery least mentioning the problem in the javadocs, and perhaps deprecating it\nuntil the problem is fixed.", "id": 108812, "time": "2007-09-29T11:16:52Z", "creator": "ajacoby@gmail.com", "creation_time": "2007-09-29T11:16:52Z", "attachment_id": null}, {"count": 25, "attachment_id": null, "creator": "cpuidle@gmx.de", "is_private": false, "id": 108817, "time": "2007-09-29T13:25:07Z", "bug_id": 30635, "creation_time": "2007-09-29T13:25:07Z", "tags": [], "text": "I agree. Unfortunately nobody is supporting the non-POI-intern users to really\nunderstand the \"correct way of doing things\"..."}, {"count": 26, "tags": [], "bug_id": 30635, "attachment_id": null, "id": 117736, "time": "2008-06-16T12:24:44Z", "creator": "cpuidle@gmx.de", "creation_time": "2008-06-16T12:24:44Z", "is_private": false, "text": "Regarding commment 22- if you read comment 19 carefully you'll realize that the behaviour is inconsistent, regardless if the behaviour of getLastRomNum() is +1 or +0. \n"}, {"count": 27, "attachment_id": null, "bug_id": 30635, "is_private": false, "id": 118511, "time": "2008-07-10T15:40:04Z", "creator": "apache@gagravarr.org", "creation_time": "2008-07-10T15:40:04Z", "tags": [], "text": "There appears to be two things here that people are debating:\n\nHSSFRow.getLastCellNum()\n\nHSSFSheet.getLastRowNum()\n\nFor those confused about HSSFSheet.getLastRowNum(), the trick when you get zero back is to also check getPhysicalNumberOfRows. If this is zero, you have no rows on the sheet. If this is one, you have a single row at position zero.\n\nI have updated the javadocs to make this clearer"}, {"count": 28, "tags": [], "bug_id": 30635, "attachment_id": null, "is_private": false, "id": 118512, "time": "2008-07-10T15:45:13Z", "creator": "apache@gagravarr.org", "creation_time": "2008-07-10T15:45:13Z", "text": "For those asking about HSSFRow.getLastCellNum(), this is also working just as described in the javadocs. I have added a new test to svn trunk, hssf.usermodel.TestBugs#test30635() . This runs through adding rows, checking row numbers, adding cells, checking cell numbers. In all cases, the answers returned by POI exactly match what the javadocs say you will get. So, everything seems to be working correctly with POI"}, {"count": 29, "tags": [], "creator": "cpuidle@gmx.de", "is_private": false, "text": "Thank you Nick- getPhysicalNumberOfRows was the missing piece of the puzzle. I really appreciate your explanation!\n\nWouldn't it be nice to have a getLogicalNumerOfRows that has the logic you've descibed. Or we'll need to start using row iterators which work in all cases.", "id": 118535, "time": "2008-07-10T23:38:36Z", "bug_id": 30635, "creation_time": "2008-07-10T23:38:36Z", "attachment_id": null}]
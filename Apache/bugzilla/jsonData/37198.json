[{"count": 0, "tags": [], "bug_id": 37198, "text": "Using constant timers and HTTP requests within a thread group to generate a load\non a webserver simulating a real user's progress through a use case produces\nresults which do not abide by Little's Law. 300-600 threads in total used.", "id": 81518, "time": "2005-10-21T15:53:55Z", "creator": "mpainter@sapient.com", "creation_time": "2005-10-21T15:53:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "woolfel@yahoo.com", "attachment_id": null, "text": "the docs state the constant throughput timer tries to simulate a constant rate,\nbut it's a very simple implementation. I'm not familiar with Little's law, but\nit's rather hard to simulate an exact rate.\n\nstress testing is inherently indeterminant, so the best anyone can do is send x\nrequests and then wait until the next interval. Is there some other technique\nthat  works better for all cases?\n\npeter", "id": 81520, "time": "2005-10-21T16:02:09Z", "bug_id": 37198, "creation_time": "2005-10-21T16:02:09Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 37198, "attachment_id": null, "id": 81521, "time": "2005-10-21T16:27:26Z", "creator": "woolfel@yahoo.com", "creation_time": "2005-10-21T16:27:26Z", "is_private": false, "text": "Are you using the \"constant timer\" or \"constant throughput timer\"?\n\nhttp://jakarta.apache.org/jmeter/usermanual/component_reference.html#Constant_Timer\nhttp://jakarta.apache.org/jmeter/usermanual/component_reference.html#Constant_Throughput_Timer\n\nif you know what the think time for your use case, then use constant timer. If\nthe think time between requests isn't known, then use constant throughput timer.\nmore information is needed.\n\nthanks\n\npeter lin"}, {"count": 3, "tags": [], "creator": "mpainter@sapient.com", "attachment_id": null, "text": "I am not talking about Constant Throughput Timers. I am talking about using\nConstant Timers within a Thread Group's sequence along with HTTP requests to\nsimulate the load created by a user going through a web site page flow.\n\nLittle's law implies that in this context:\n\nTime taken = ( Samples x Time Taken per Sample ) \n                   / No. of Threads\n\nThis doesn't hold, by up to a factor of 10.\n\nI hope this helps :o)", "id": 81522, "time": "2005-10-21T16:37:22Z", "bug_id": 37198, "creation_time": "2005-10-21T16:37:22Z", "is_private": false}, {"count": 4, "tags": [], "text": "Little's Law states:\nn = x*(z+r)\nwhere: \nn = number of users (threads in our case)\nx = throughput (requests/second)\nz = think time (ie the constant timer)\nr = average response time\n\nTherefore, solving for z, as you seem to want to do gives:\nz = n/x - r\n\nWhich I have trouble relating to your equation.", "attachment_id": null, "bug_id": 37198, "id": 81525, "time": "2005-10-21T16:51:58Z", "creator": "mstover1@apache.org", "creation_time": "2005-10-21T16:51:58Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 37198, "text": "I'm not sure I understand the problem.  the way the constant time works is this.\n\n1. send request\n2. wait x millisecond\n3. repeat 1 and 2 until done\n\nBy Time taken, are you referring to the total time it takes to run an entire\ntest. If that is the case, there are no web stress testing tools that make that\ngaurantee. That goes for commercial and open source tools.\n\nOr do you mean time taken as in \"the time it takes for a user to go through x\nrequests\"? If this is the case, there's still no gaurantee.  The equation\ndoesn't make sense to me.\n\nTime taken = ( Samples x Time Taken per Sample ) / No. of Threads\n\nSamples is a constant defined by the thread group.\ntime taken varies from request to request, so it doesn't make sense to me to\nmultiple (samples x time taken per sample).  since multiplying the two numbers\ntogether doesn't make sense to me, I don't understand dividing the result by\nnumber of threads.\n\nI'm totally lost as to what you mean.\n\npeter", "id": 81526, "time": "2005-10-21T16:54:48Z", "creator": "woolfel@yahoo.com", "creation_time": "2005-10-21T16:54:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "mpainter@sapient.com", "attachment_id": null, "text": "Let me elaborate. My expectation was that you have a sequence of requests in a\nthread group, e.g.\n\nRequest page 1 -> wait 10s -> req page 2 -> wait 30s ( -> restart)\n\nSo, generalising, if you have, for a thread group, a series of steps as above\nsuch that:\n\nn(i) is the number of times that the ith step is completed\nt(i) is the average time that step i takes\n\nand there are N threads, and the total time taken is T:\n\nT = ( {Sum over i}[n(i).t(i)] ) / N\n\nLooking at the code suggests that what actually happens for this:\n\nRequest page 1 -> wait 10s -> req page 2 -> wait 30s ( -> restart)\n\nis this:\n\nRequest page 1 -> wait 40s -> req page 2 -> wait 40s ( -> restart)\n\nSo the timers seem to be added together. (See the run and delay methods in the\nJMeterThread class.)\n\nAm I misunderstanding how this works? Any direction as to how I should carry out\nsuch tests greatly appreciated. Thanks for your prompt replies :o)", "id": 81527, "time": "2005-10-21T17:09:18Z", "bug_id": 37198, "creation_time": "2005-10-21T17:09:18Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 37198, "text": "Yes, timers are added together.  See <a\nhref=\"http://jakarta.apache.org/jmeter/usermanual/test_plan.html#timers\">About\nTimers</a> and <a\nhref=\"http://jakarta.apache.org/jmeter/usermanual/build-test-plan.html#scoping_rules\">About\nScoping</a> and for further questions, please ask on the mailing list.", "id": 81528, "time": "2005-10-21T17:26:51Z", "creator": "mstover1@apache.org", "creation_time": "2005-10-21T17:26:51Z", "is_private": false, "attachment_id": null}]
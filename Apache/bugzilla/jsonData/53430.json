[{"count": 0, "tags": [], "text": "For each Tomcat release there exists minimum version of Tomcat-Native library with which it can work.\n\nTomcat 7.0.28 requires Tomcat-Native 1.1.24 or later.\n\nIf you try to start it with an older version of the library + it is explicitly configured it to use the \"Apr\" variant of a connector,\nthen it crashes the JVM at startup.\n\nActual result:\nTomcat will not start and will crash the JVM.\nA crash report file is created by JVM (hs_err_pidNNNN.log)\n\nStack trace from the crash report file:\n[[[\nStack: [0x008c0000,0x00910000],  sp=0x0090f634,  free space=317k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nC  [tcnative-1.dll+0xf762]\nC  [tcnative-1.dll+0x6ddd]  Java_org_apache_tomcat_jni_Pool_create+0x1d\nj  org.apache.tomcat.jni.Pool.create(J)J+0\nj  org.apache.tomcat.util.net.AprEndpoint.bind()V+2\nj  org.apache.tomcat.util.net.AbstractEndpoint.init()V+8\nj  org.apache.coyote.AbstractProtocol.init()V+274\nj  org.apache.catalina.connector.Connector.initInternal()V+49\nj  org.apache.catalina.util.LifecycleBase.init()V+29\nj  org.apache.catalina.core.StandardService.initInternal()V+105\nj  org.apache.catalina.util.LifecycleBase.init()V+29\nj  org.apache.catalina.core.StandardServer.initInternal()V+212\nj  org.apache.catalina.util.LifecycleBase.init()V+29\nj  org.apache.catalina.startup.Catalina.load()V+573\nj  org.apache.catalina.startup.Catalina.load([Ljava/lang/String;)V+9\n]]]\n\nExpected result:\n1. Log an error and do not initialize the connector. Do not initialize the endpoint.\n\nIf org.apache.catalina.startup.EXIT_ON_INIT_FAILURE=true system property is configured [1], then exit Tomcat.\nIf the property is not defined or is false (its current default value), then continue with startup sequence, without that connector.\n\n\n[1] http://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html\n\n---------------------\nSteps to reproduce: (on Windows)\n1. Place an older version of tcnative-1.dll (e.g. the one from Tomcat 7.0.27) into the bin directory.\n2. Configure connector with one of these:\nprotocol=\"org.apache.coyote.http11.Http11AprProtocol\"\nprotocol=\"org.apache.coyote.ajp.AjpAprProtocol\"\n3. Start Tomcat\nActual result: JVM crashes, as described above.\n\n---------------------\nNotes on the code:\n1. The issue is that AprLifecycleListener.isAprAvailable() flag is only tested by Connector#setProtocol(String) and influences autoselection of protocols.\n\nIf an Apr protocol implementation is configured explicitly, it does not prevent it from starting.\n\n2. The code is essentially the same in 6.0 and 5.5. So it is an old issue.\n\nThis issue happens when running the testsuite because the testsuite explicitly selects the Apr connector.\n\n3. If tc-native version is below required one, AprLifecycleListener shuts down the library by calling terminateAPR().\n\nThat is why an old library crashes early.\n\n4. AprEndpoint is not supposed to call AprLifecycleListener.isAprAvailable() directly, because they belong to different subsystems (coyote, tomcat.util.net vs. catalina.core).  Do we care?\n\nWe can do the isAprAvailable() check in Connector class, but it would mean that Connector class should know which ProtocolHandler implementations require the library. It could guess it from ProtocolHandler class name (contains(\"Apr\")), but it is not pretty.\n\n---------------------\nThread on dev@:\n\"tcnative version check broken for test suite of TC 7\" (2012-06-16)\nhttp://tomcat.markmail.org/thread/izbqzmfgs7jdgnnq", "is_private": false, "bug_id": 53430, "id": 160067, "time": "2012-06-17T10:16:07Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-06-17T10:16:07Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 53430, "attachment_id": null, "text": "Fixed in trunk and 7.0.x and will be included in 7.0.29 onwards.", "id": 160233, "time": "2012-06-25T13:05:17Z", "creator": "markt@apache.org", "creation_time": "2012-06-25T13:05:17Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 56713, "is_private": false, "id": 176369, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-12T15:52:04Z", "time": "2014-07-12T15:52:04Z", "text": "(Originally raised in bug 56710)\n\nThere is an old feature that when web application is being reloaded, any incoming requests for that application are paused until reload completes.\n\nThis feature dates back to Tomcat 4.1.x or earlier. See also bug 53024 for fixing (reimplementing) this feature in Tomcat 7.\n\nThe waiting loop is implemented in CoyoteAdapter.postParseRequest().\n\nWhile this feature is useful, the wait time shall not be infinite.\n\nQuestions:\n(1) How long is the allowed wait time?\n(2) What to do if wait time expires?\n(3) What to do if Connector state changes, e.g Tomcat shuts down?\n\n\nRegarding (1):\n---------------\na) I thought that maybe \"connectionTimeout\" of a Connector is the good time to wait.\nb) Make it configurable on Host?\nc) Make it configurable on Context?\nd) Hard-code something?\n\nThere are caveats for a):\n- There may be several Connectors in the same Service with different value for this attribute.\n- For an AJP connector this attribute is \"-1\" by default.\n\n\nRegarding (2):\n---------------\nI think the best would be to unregister that context in the Mapper and let whatever other (ROOT) application there to handle the request. The ROOT application may respond with 503, 404, 302 or whatever is suitable.\n\n(Rejecting the request in CoyoteAdapter would be unfriendly, as it happens at a lower level and there is no ErrorReportValve to render an error page. The en-user will see an empty page).\n\nI think this needs update to the Mapper API.\nThere will be race condition between this forced de-registration of context, and its re-registration after successful startup. To avoid it,\n\na) MapperListener shall notify Mapper that the context has been paused. The Mapper shall remember the \"paused\" state.\nb) The forced de-registration shall be a separate method in the Mapper and it shall check the \"paused\" state of a context before removing it."}, {"count": 1, "tags": [], "bug_id": 56713, "is_private": false, "id": 176381, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-13T14:58:58Z", "time": "2014-07-13T14:58:58Z", "text": "(In reply to Konstantin Kolinko from comment #0)\n> a) MapperListener shall notify Mapper that the context has been paused. The\n> Mapper shall remember the \"paused\" state.\n\nThat part of API was implemented r1610220, as it was needed to fix bug 56710."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 176384, "time": "2014-07-14T07:04:40Z", "bug_id": 56713, "creation_time": "2014-07-14T07:04:40Z", "is_private": false, "text": "Remy highlighted the potential problems of pausing requests during reload (large numbers of threads blocking waiting for the reload) and I agree that this could be a problem. However, the only user complaints we have had about this feature is that it wasn't working or that it could work better. No-one has complained about large numbers of threads blocking. Givent that no-one has complained about large numbers of blocked threads on reloads, I am wondering if there is really a problem here that needs fixing.\n\nRegarding the questions on proposed solution:\n\nHow is this going to work if it is the ROOT context that is being reloaded?\n\n(1) a) and d) have obvious issues. I'd suggest configuration on the host with the ability to override it on the context if desired\n\n(2) There might not be a ROOT application (there should be but there might not). How is the Context going to be re-registered once it has started? I don't think any user is not going to want the context to be available eventually.\n\n(3) Presumably the Context eventually starts and then is shutdown.\n\n\nI was about to say that there are lots of complexities here - just like automatic deployment that led to producing this page:\nhttp://tomcat.apache.org/tomcat-8.0-doc/config/automatic-deployment.html\n\nReading that it occurred to me that really what we are talking about here is the difference between reloading and redeploying. Would it not be simpler to leave this in the hands of the system administrator? They can choose whether to redploy or reload (if reload is an option for the change they want to make).\n\nOne thing we could do is add some logging to notify the system admin that threads have been blocked and that they can use redeploy to avoid this. I was thinking along the lines of one log message the first time a thread was blocked and then further messages every TBD (15?, background thread?) seconds giving the current number of waiting threads until the context is reloaded."}, {"count": 3, "tags": [], "bug_id": 56713, "attachment_id": 31814, "is_private": false, "id": 176403, "time": "2014-07-15T13:29:57Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-07-15T13:29:57Z", "text": "Created attachment 31814\n2014-07-15_tc8_56713_v1.patch\n\nAn idea of a patch to illustrate the proposal.\nThe wait time is hard-coded to be 2 minutes.\nThis one is for the current trunk (at 1610400)"}, {"count": 4, "tags": [], "text": "Reload is a development oriented feature, and the wait feature in that case is a convinience (basically, you can hit the browser's reload button without having to check the reload is finished). I doubt this feature is in meaninglful use in any other situation.", "attachment_id": null, "id": 176404, "creator": "remm@apache.org", "time": "2014-07-15T13:32:42Z", "bug_id": 56713, "creation_time": "2014-07-15T13:32:42Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "When I tried to breakout the external jar filenames from the a classpath \n<path> specification into a separate fileset, I ran into a huge performance \nproblem.\n\nIn my build.xml, the BASE_ENG_DIR is a root directory, e.g. /engs51, of\na project release. There are a huge number of subdirectories (1000s) underneath\nthis directory. It appears the fileset is scanning all these subdirectories \nbecause the performance goes to hell.  The worst is if you try setting dir \nto \"/\".\n\nWhat I would prefer to do is to not even specify a dir tag, and just\nlist the files with absolute pathnames, and avoid any filtering/scanning.\nAlternativel, if fileset could be optimized so that it doesn't scan directories\nif no regexp filters are included.\n\nAnt doesn't seem to have an easy and efficient way to add a list of files that \nare in different directories to a FileList/FileSet..\n\nBTW the main reason I was converting the external jar filelist to a FileSet \nwas so that I could use the Copy task to copy them to a different package \ndirectory.  The Copy task doesn't take a <path> only <fileset>.  \n\nThere should be a way to convert between <fileset> and <path> type. <fileset> \nshould be more flexible in allowing absolute path names. Only relative \npathnames should be considered relative to dir. <fileset> should allow dir tag \nto be optional, in which case it defaults to ${basedir} or is just null and \nenfoces all filename/patternet/selectors underneath it use absolute pathnames.\n\n        <--! horrible performance when BASE_ENG_DIR = /engs51 -->\n        <fileset id=\"PN.external.jars\" dir=${BASE_ENG_DIR}>\n            <filename name=\"${JAVA_DIR}/jre/lib/rt.jar\"/>\n            <!-- LOG4J_JAR -->\n            <filename name=\"${APPS3RDPARTY}/log4j1.1.3/log4j.jar\"/>\n            <!-- JSDK_LIB -->\n            <filename name=\"${JSDK_DIR}/lib/jsdk.jar\"/>\n            <!-- POP3_JAR -->\n            <filename name=\"${APPS3RDPARTY}/pop3/pop3.jar\"/>\n            <!-- JSSE_LIB -->\n            <filename name=\"${JSSE_DIR}/lib/jcert.jar\"/>\n            <filename name=\"${JSSE_DIR}/lib/jnet.jar\"/>\n            <filename name=\"${JSSE_DIR}/lib/jsse.jar\"/>\n            <!-- ORM_JAR -->\n            <filename name=\"${APPS3RDPARTY}/orm/OROMatcher.jar\"/>\n            <!-- JCE_LIB -->\n            <filename name=\"${JCE_DIR}/lib/jce.jar\"/>\n            <!-- ICE_LIB -->\n            <filename name=\"${ICE_DIR}/ice.jar\"/>\n            <!-- APACHE_JSERV_LIB -->\n            <filename name=\"${APACHE_DIR}/libexec/ApacheJServ.jar\"/>\n            <!-- XML_APIS -->\n            <filename name=\"${APPS3RDPARTY}/xalan/xml-apis.jar\"/>\n            <!-- XERCES_LIB -->\n            <filename name=\"${XERCES_DIR}/xercesImpl.jar\"/>\n            <filename name=\"${XERCES_DIR}/xmlParserAPIs.jar\"/>\n            <filename name=\"${XERCES_DIR}/xercesSamples.jar\"/>\n            <!-- COLT_LIB -->\n            <filename name=\"${COLT_DIR}/colt.jar\"/>\n            <!-- JNDI_JAR -->\n            <filename name=\"${APPS3RDPARTY}/jndi/jndi.jar\"/>\n            <!-- JMS_JAR -->\n            <filename name=\"${STATIC_DIR}/javax/jms.jar\"/>\n            <!-- JORAM_JAR -->\n            <filename name=\"${STATIC_DIR}/joram2_1_1/joram.jar\"/>\n            <!-- JORAM_JNDI_JAR -->\n            <filename name=\"${STATIC_DIR}/joram2_1_1/a3jndi.jar\"/>\n            <!-- SITRAKA_JAR -->\n            <filename name=\"${APPS3RDPARTY}/graphing/sitraka/jcschart.jar\"/>\n            <!-- JAVAMAIL_JAR -->\n            <filename name=\"${JAVAMAIL_DIR}/activation.jar\"/>\n            <filename name=\"${JAVAMAIL_DIR}/mail.jar\"/>\n            <!-- ELEGANT_JAR -->\n            <filename name=\"${ELEGANT_DIR}/common.jar\"/>\n            <filename name=\"${ELEGANT_DIR}/dialgauge.jar\"/>\n            <!-- KUNSTSTOFF_JAR -->\n            <filename name=\"${APPS3RDPARTY}/kunststoff/kunststoff.jar\"/>\n   </fileset>\n   <path id=\"PN.class.path\">\n        <pathelement path=\"${CLASS_DIR}\"/>\n        <selector refid=\"PN.external.jars\"/>\n   </path>", "is_private": false, "bug_id": 20103, "id": 37530, "time": "2003-05-21T08:46:03Z", "creator": "y3x1-wwm9@spamex.com", "creation_time": "2003-05-21T08:46:03Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "y3x1-wwm9@spamex.com", "attachment_id": null, "text": "That last part should \"<fileset\" rather than \"<selector\". I was doing some experiments with other types.\n\n<path id=\"PN.class.path\">\n        <pathelement path=\"${CLASS_DIR}\"/>\n        <fileset refid=\"PN.external.jars\"/>\n</path>\n\nI timed how long it takes. It is taking 30 seconds to initialize the fileset.\n\n[echo]\n[echo] Creating fileset 05/20/2003 10:03:31 PM\n[echo]\n[echo] Creating classpath 05/20/2003 10:04:02 PM\n\n", "id": 37556, "time": "2003-05-21T17:04:41Z", "bug_id": 20103, "creation_time": "2003-05-21T17:04:41Z", "is_private": false}, {"count": 2, "tags": [], "text": "I changed the <fileset>  to a <filelist> and now it takes 1 second.\n\n[echo]\n[echo] Creating filelist 05/20/2003 10:27:50 PM\n[echo]\n[echo] Creating classpath 05/20/2003 10:27:51 PM\n\nThere shouldn't be that much of disparity in the performance between <fileset> and <filelist> with the same arguments..\n\n", "is_private": false, "bug_id": 20103, "id": 37558, "time": "2003-05-21T17:30:31Z", "creator": "y3x1-wwm9@spamex.com", "creation_time": "2003-05-21T17:30:31Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 20103, "is_private": false, "text": "Now that I am using <filelist> as a workaround to <fileset>, I have run into another problem.\n\nI want to copy the <filelist> to another directory, but the <copy> task doesn't take a <filelist> type.\n\n<target name=\"cachejars\">\n  <copy todir=${CACHE_BASE_ENG_DIR}\">\n    <filelist refid=\"jarlist\"/>\n  </copy>\n</target>\n\nbuild.xml:91: The <copy> task doesn't support the nested \"filelist\" element.\n\nI have found it confusing that there is a <filelist> and <fileset>. I think <fileset> should be modified to encompass <filelist>, i.e. <fileset> should be able to specify an explicitly named list of files either as absolute paths (dir=null) or relative to dir.\n\n<fileset> already lets you specify explicit files relative to <dir>, but the\nperformance is horrible.\n\nOnce <fileset> is enhanced, you should be able to deprecate <filelist>, which would make ant simpler to understand for new users. I know I was confused over when to use <fileset> and when to use <filelist>", "id": 37560, "time": "2003-05-21T18:00:46Z", "creator": "y3x1-wwm9@spamex.com", "creation_time": "2003-05-21T18:00:46Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "y3x1-wwm9@spamex.com", "text": "\nI am just guessing, but it looks like <fileset> is scanning all the \ndirectories under \"dir\".\n\nIt would be more efficient if it took a lazy-loading approach to scanning.\nOnly scan the subdirs needed to match regexp patterns,e.g.\n\nIn the case of a simple exaple\n\n\"**/*.java\"\n\nit would still have to scan all the directories. But if only a few \nsubdirectories are in the fileset:\n\n\"subdir1/subsub1/*.java\"\n\"subdir2/susub2/I*.java\"\n\nThen only the subdirectoires should be scanned.\n\nIf only explicit files are specified, then no scanning should be done:\n\n\"subdir1/subsub1/File1.java\"\n\"subdir2/subsub2/File2.java\"\n", "id": 37563, "time": "2003-05-21T20:05:15Z", "bug_id": 20103, "creation_time": "2003-05-21T20:05:15Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 20103, "text": "This may be related to\nbug 15310 jar task very slow for large input lists", "id": 38201, "time": "2003-06-02T18:38:12Z", "creator": "y3x1-wwm9@spamex.com", "creation_time": "2003-06-02T18:38:12Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "robert@windermere.com", "attachment_id": null, "is_private": false, "id": 38271, "time": "2003-06-03T15:41:47Z", "bug_id": 20103, "creation_time": "2003-06-03T15:41:47Z", "text": "I seem to be running up against the same performance issue with <fileset/>.  \n\nI have created a <fileset/> that describes a set of files to be downloaded from\nan ftp server using the <ftp/> task.  I wish to download every file specified in\na list.  Currently, this list is provided in a file, using the includesfile\nattribute of <fileset/>.  Each line of that file defines a file to \ndownload.  Each file in the list is described as an absolute path from \nthe ftp server root.  Each file in the list could potentially be located in a\nunique subdirectory on the ftp server.  No wildcards are utilized, no pattern\nmatching required.\n\nThe buildtime increases substantially as the size of the includesfile increases.  \nI believe that the majority of the buildtime is not spent in actually\ntransferring the images, but instead in scanning the directories for pattern\nmatches.  In my case, this is seriously crippling, because those directory scans\nare remote against an ftp server.\n\nA list of 10 files takes approx. 5 minutes.  A list of 35 files takes \napprox 10 minutes.  A list of 100 files takes approx 30 minutes.  My\nincludesfile could contain approx. 2000 files.  The ftp server times out prior\nto transferring any files, when there are a large number represented.\n\nIn all cases, success or otherwise, the task seems to hang for the \nmajority of the processing time, prior to transferring any images.  It seems\nthat remote directory scanning is taking place at this point.  The \nlogged message is shown below:\n\n      [ftp] getting files\n\nIf the process makes it past this sticky point, then it rather quickly \ndownloads the requested files with the following example logged messages:\n\n      [ftp] transferring webphoto/bigphoto/96/23010396_04.jpg to \n/home/robert/dvl/collector/build/images/Northwest/webphoto/bigphoto/96/23010396_\n04.jpg\n      [ftp] transferring webphoto/bigphoto/96/23010396_05.jpg to \n/home/robert/dvl/collector/build/images/Northwest/webphoto/bigphoto/96/23010396_\n05.jpg\n\nI would concur with the previous suggestions as they pertain to <fileset/>. \n<fileset/> should only scan directories if required to satisfy some pattern\nmatch.  In the case of fully qualified filenames, <fileset/> should take a less\n\"heavy-handed\" approach, and simply include those files with no directory scanning."}, {"count": 7, "attachment_id": null, "creator": "levylambert@tiscali-dsl.de", "is_private": false, "id": 38351, "time": "2003-06-04T14:04:07Z", "bug_id": 20103, "creation_time": "2003-06-04T14:04:07Z", "tags": [], "text": "True, when a fileset is used by a task to perform an action such as ftp or copy, \nthe fileset is \"scanned\" through a class called DirectoryScanner.\nDirectoryScanner is looking at all files below the root directory of the \nfileset.\n\n2 possible courses of action :\n\n1) add support for FileList in tasks accepting FileSet\nthis is a lot of work. In principle it is not a risky approach, but all tasks \nhaving to do with <fileset> would be impacted.\n\n2)\nFileSets are explored by tasks such as <copy/> or <ftp/> through a utility class \ncalled DirectoryScanner.\nThis one can be changed, so that if no wildcards are present in the include \npatterns, and the FileSet does not contain selectors, instead of recursively \nlisting the root directory to match each file or directory against includes, \nexcludes and selectors, the included files would be simply checked against \nexclude patterns if any. In the case that an included file is actually a \ndirectory, this one would be scanned.\n\nPlease comment my suggestions.\nAntoine"}, {"count": 8, "tags": [], "creator": "levylambert@tiscali-dsl.de", "attachment_id": null, "is_private": false, "id": 38353, "time": "2003-06-04T14:21:50Z", "bug_id": 20103, "creation_time": "2003-06-04T14:21:50Z", "text": "Concerning ftp get, the scanning is actually done by an inner class of FTP \ncalled FTP.FTPDirectoryScanner. This one would have to be fixed too."}, {"count": 9, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "is_private": false, "id": 38358, "time": "2003-06-04T15:02:49Z", "bug_id": 20103, "creation_time": "2003-06-04T15:02:49Z", "text": "Here's my take on FileSet optimization that meshes with the problem we are \npersonnally seing here.\n\nProblem: We have a large source base (5000+ files) which is scanned repeatedly \nto extract just a subset of these files, which are usally one or more subtrees \nof the fileset:\n\nin somepath/src, we select:\n  com/acme/foo/**\n  com/acme/bar/**\n\nThe fileset must be declared with dir=\"somepath/src\" to keep the proper \nrelative filename (corresponding to the package name for a javac task), but \nobviously only somepath/src/com/acme/foo and somepath/src/com/acme/bar need to \nbe scanned, and not the full somepath/src.\n\nThese repeated full scans of somepath/src to extract a subset of the sources \nare adding up to minutes...\n\nSolution: I can think of two. I simple one, and a more difficult one.\n\nSimple Solution: add a <searchroot name=\"com/acme/foo\" /> subelement (which can \nbe specified more than once) which explicitly tell the FileSet which directory \nit should scan rather than the one specified in the fileset's dir attribute.\n\nHarder Solution: Infer the searchroots from the patterns themselves... Not \nimpossible, but difficult.\n\nThe advantage of the simple solution is that is works with the use of \nselectors, since its explicit, so the build file writer knows that the selector \ns/he uses do not affect the searchroots.\n\nThis of course doesn't solve the other performance problem of FileSet, when \nused with a long list of explicit filenames without patterns.\n\nThanks for reading, --DD"}, {"count": 10, "attachment_id": null, "creator": "y3x1-wwm9@spamex.com", "is_private": false, "id": 38366, "time": "2003-06-04T15:26:30Z", "bug_id": 20103, "creation_time": "2003-06-04T15:26:30Z", "tags": [], "text": "> 1) add support for FileList in tasks accepting FileSet\n> this is a lot of work. In principle it is not a risky approach, but all tasks \n> having to do with <fileset> would be impacted.\n\nIf the performance problem was fixed, you could always use FileSets instead of\nFilelists. It is very confusing that you have both of those concepts IMO.\n\n> This one can be changed, so that if no wildcards are present in the include \n> patterns, and the FileSet does not contain selectors, instead of recursively \n> listing the root directory to match each file or directory against includes, \n> excludes and selectors, the included files would be simply checked against \n> exclude patterns if any.\n\nYou should be able to scan the FileSet and produce a the set of directories\nthat need to be scanned.\n\nI thought that you could just take a lazy-load approach where you load\nthe directories on demand.  You would look at the base directories of each\nselector and then only load the directories necessary.\n\n**         => scan all subdirectories of the fileset dir\nsubdir/**  => scan all subdirectories of subdir\nsubdir     => scan only subdir\nfilename   => no directory scanning\n\nAs the FileSet selectors are processed, the directories are scanned as\nnecessary. The results would be cached so that if other selectors require\nthose directories, they don't need to be rescanned.\n\nI'm not familiar with the exclude selectors. Is it possible to exclude using\na wildcard pattern? That might require directories to be scanned also."}, {"count": 11, "tags": [], "bug_id": 20103, "is_private": false, "text": "I agree with the thoughts presented on revising the way that the various\nDirectoryScanner implementations do their business.  Scan only the directories\nrequired to satisfy the wildcard patterns.  Include files directly that have no\nwildcard patterns ( unless they have been excluded ).\n\nI created a quick and dirty override of the <ftp/> task that provides a\nremoteScan switch, allowing one to turn off remote scanning completely.  Instead\nof using FTPDirectoryScanner, in this case, it uses DirectoryNoScanner.  It is\nnot very smart, really creating the totally opposite situation that we currently\nhave.  But, since I know the domain of my <fileset/> ( no patterns ), it is a\ndecent performance test.\n\nWith the remoteScan attribute set to the default of \"yes\", I have the following\nbehavior:\n\nA list of 10 files takes approx. 5 minutes.  A list of 35 files takes \napprox 10 minutes.  A list of 100 files takes approx 30 minutes.  If the\n<fileset/> gets much larger than this, the server times out ( during the\nscanning ) prior to downloading any files.\n\nWith the remoteScan attribute set to \"no\", I have the following behavior:\n\nA list of 1000 files takes approx. 40 minuets.  A list of 2500 takes approx 100\nminutes.  Downloading of files begins almost immediately, once the <ftp/> task\nconnects to the server.\n\nThese performance stats are really quite tied to my connection speed, the ftp\nserver response, and approx. file size ( approx. 25KB each ).  But, it does give\na good indication of potential performance increases.  \n\n", "id": 38367, "time": "2003-06-04T16:10:04Z", "creator": "robert@windermere.com", "creation_time": "2003-06-04T16:10:04Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "y3x1-wwm9@spamex.com", "attachment_id": null, "is_private": false, "id": 38395, "time": "2003-06-04T22:34:33Z", "bug_id": 20103, "creation_time": "2003-06-04T22:34:33Z", "text": "> Concerning ftp get, the scanning is actually done by an inner class of FTP \n> called FTP.FTPDirectoryScanner. This one would have to be fixed too.\n\nAre there other Ant CORE or optional Tasks which implement their own \nDirectoryScanner?\n\n\nThis bug could equally apply to the <dirset>\n\n<dirset dir=\"${build.dir}\">\n  <patternset id=\"non.test.classes\">\n    <include name=\"apps/**/classes\"/>\n    <exclude name=\"apps/**/*Test*\"/>\n  </patternset>\n</dirset>\n\nI haven't tested to be sure, but I would suspect <dirset> will scan all\nsubdirectories of ${build.dir} and not just subdirectories of ${build.dir}/apps\n\nIt looks like an efficient directory scanner would give a large performance \nboost on many Ant core tasks, esp. when people are working on large projects.\n\n\n\n"}, {"count": 13, "attachment_id": null, "creator": "levylambert@tiscali-dsl.de", "text": "I have had again a look at this bug report and at a possible solution concerning \ndirectory scanner.\nFor the original problem of AlexL, a high performance improvement without change \nof code is to be expected if, instead of using the <filename> selector, \n<include/> patterns are used.\n", "id": 38883, "time": "2003-06-15T22:14:34Z", "bug_id": 20103, "creation_time": "2003-06-15T22:14:34Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 20103, "text": "Created attachment 6897\nfixes DirectoryScanner and add 2 functions to SelectorUtils", "id": 39117, "time": "2003-06-19T20:55:08Z", "creator": "levylambert@tiscali-dsl.de", "creation_time": "2003-06-19T20:55:08Z", "is_private": false, "attachment_id": 6897}, {"count": 15, "tags": [], "creator": "levylambert@tiscali-dsl.de", "attachment_id": null, "text": "I have attached a patch which might improve the performance of DirectoryScanner \nwhen processing a large number of include patterns pointing to specific files or \ndirectories, rather than **/*.html for instance.\nIt would be good if people in the ant community have a look at this patch and \nsuggest further improvements. Also cast a critical eye on it for side effects.\n\nOther remark : the DirectoryScanner already today does not scan everything under \nits basedir if one is using include patterns which do not start with **. \n\nConcerning the scanner used in the ftp task, I need to have a look at it and see \nif I can do a similar work like the one I have done for local files.", "id": 39118, "time": "2003-06-19T21:00:52Z", "bug_id": 20103, "creation_time": "2003-06-19T21:00:52Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 20103, "is_private": false, "text": "changed email address/login in bugzilla", "id": 39600, "time": "2003-06-29T17:07:11Z", "creator": "antoine@apache.org", "creation_time": "2003-06-29T17:07:11Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "Created attachment 7243\nspeeds up directory scanner", "is_private": false, "bug_id": 20103, "id": 40461, "time": "2003-07-11T13:05:27Z", "creator": "antoine@apache.org", "creation_time": "2003-07-11T13:05:27Z", "attachment_id": 7243}, {"count": 18, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "text": "I have just submitted a change to DirectoryScanner and to SelectorUtils which \nspeeds up DirectoryScanner when one uses include patterns and that these \npatterns do not start with wildcards.\nI need to have a look at the ftp task and its scanner to see if this \noptimization can also get done there and how exactly.\nI will only close the bug report when I will have covered the ftp task too.\nCheers,\nAntoine", "id": 40667, "time": "2003-07-14T20:30:29Z", "bug_id": 20103, "creation_time": "2003-07-14T20:30:29Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 20103, "is_private": false, "text": "Created attachment 7897\npatch for FTP.java and FTPTest.java", "id": 43040, "time": "2003-08-20T11:05:36Z", "creator": "antoine@apache.org", "creation_time": "2003-08-20T11:05:36Z", "attachment_id": 7897}, {"count": 20, "tags": [], "bug_id": 20103, "text": "I have prepared a fix (attached) for the FTP task or more precisely for the \nFTPDirectoryScanner.\n\nThis fix passes the current FTP test suite.\n\nConcerning speed, the patch brings an improvement when include patterns point to \nspecific files or directories and that the remote system is case sensitive.\nI will send more details on the development list.", "id": 43043, "time": "2003-08-20T11:24:24Z", "creator": "antoine@apache.org", "creation_time": "2003-08-20T11:24:24Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 20103, "text": "Created attachment 7899\npatch improved for performance", "id": 43046, "time": "2003-08-20T12:30:30Z", "creator": "antoine@apache.org", "creation_time": "2003-08-20T12:30:30Z", "is_private": false, "attachment_id": 7899}, {"count": 22, "attachment_id": 7912, "creator": "antoine@apache.org", "is_private": false, "id": 43088, "time": "2003-08-21T11:14:53Z", "bug_id": 20103, "creation_time": "2003-08-21T11:14:53Z", "tags": [], "text": "Created attachment 7912\nadded a new accessor method in DirectoryScanner"}, {"count": 23, "tags": [], "creator": "antoine@apache.org", "attachment_id": null, "is_private": false, "id": 43089, "time": "2003-08-21T11:15:47Z", "bug_id": 20103, "creation_time": "2003-08-21T11:15:47Z", "text": "The last attachment (7912) replaces the 2 previous ones, I have found out that I \nneed a new accessor method in DirectoryScanner to compile under jdk 1.2"}, {"count": 24, "tags": [], "bug_id": 20103, "text": "changes to the FTP task are committed. They will be available in the next \nnightly build (2003-08-22).", "id": 43107, "time": "2003-08-21T17:00:14Z", "creator": "antoine@apache.org", "creation_time": "2003-08-21T17:00:14Z", "is_private": false, "attachment_id": null}]
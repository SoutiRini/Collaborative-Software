[{"attachment_id": null, "tags": [], "creator": "junk@jorgenpersson.se", "is_private": false, "count": 0, "id": 178667, "time": "2014-10-22T06:39:35Z", "bug_id": 57129, "creation_time": "2014-10-22T06:39:35Z", "text": "When the classpath are created for the webapp classloader, the ordering of the jar files are not the same in Tomcat7 vs Tomcat8. \n\nThis is due to that in Tomcat7, the FileDirContext.list(File) method sorts the jar files in the WEB-ING/lib folder alpabetically:\n...\n        Arrays.sort(names);             // Sort alphabetically\n        NamingEntry entry = null;\n\n        for (int i = 0; i < names.length; i++) {\n...\n\nThe new design in Tomcat8 does not do this. I've identified two places where WEB-INF/lib is read:\nStandardRoot.list(String, boolean)\nand\nDirResourceSet.listWebAppPaths(String)\n\nEven though it is not a requirement that the entries are ordered alphabetically, it would be nice if they were. And there is no harm in doing it for web applications that does not depend on classpath ordering.\n\nI've attached a patch file, tomcat8.patch, based on tomcat8 trunk (@ rev. 1633538)."}, {"count": 1, "attachment_id": 32134, "creator": "junk@jorgenpersson.se", "text": "Created attachment 32134\nAdds Arrays.sort(...) in the two identified methods", "id": 178668, "time": "2014-10-22T06:42:19Z", "bug_id": 57129, "creation_time": "2014-10-22T06:42:19Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "creator": "junk@jorgenpersson.se", "is_private": false, "id": 178669, "time": "2014-10-22T07:31:39Z", "bug_id": 57129, "creation_time": "2014-10-22T07:31:39Z", "tags": [], "text": "I found the problem running Linux Mint 17.\nOn Windows 7 64 bit, the files seems to be ordered alphabetically."}, {"count": 3, "tags": [], "text": "Applications that depend on JARs being searched for classes in a particular order are broken and should be fixed.\n\nI am -1 on adding this unncessary bloat to the new resources implementation in Tomcat 8.\n\nBroken web applications that need a JAR to be searched for classes before all other JARs can force this via configuration in the context.xml file. Something along the lines of the following should work:\n\n<Resources>\n  <!-- Trick to force this JAR to be searched for classes before all others\n       to work around a Jira bug -->\n  <PreResources className=\"org.apache.catalina.webresources.FileResourceSet\"\n                base=\"${catalina.base}/webapps/jira/WEB-INF/lib/jira-api-6.2.jar\"\n                webAppMount=\"/WEB-INF/lib/jira-api-6.2.jar\" />\n</Resources>", "is_private": false, "bug_id": 57129, "id": 178670, "time": "2014-10-22T07:32:10Z", "creator": "markt@apache.org", "creation_time": "2014-10-22T07:32:10Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "text": "(In reply to J\u00f6rgen Persson from comment #2)\n> I found the problem running Linux Mint 17.\n> On Windows 7 64 bit, the files seems to be ordered alphabetically.\n\nThis has to do with the order in which the directory entries are returned by the underlying file system. Neither NTFS nor extXfs, etc. guarantee in which order directory entries are returned from a readdir. What you are observing on Windows versus Linux is entirely coincidental.", "id": 178677, "time": "2014-10-22T13:59:31Z", "bug_id": 57129, "creation_time": "2014-10-22T13:59:31Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 57129, "text": "Hi Mark,\n\n(In reply to Mark Thomas from comment #3)\n> Applications that depend on JARs being searched for classes in a particular\n> order are broken and should be fixed.\n> \n> I am -1 on adding this unncessary bloat to the new resources implementation\n> in Tomcat 8.\n\nAny chance this could be revisited? I see 2 reasons why having a predictible order is necessary:\n- you might consider an application which depends on the order of the jars broken but the issue here is that, if the order is inconsistent depending on the OS/filesystem, you have a good chance to have your application failing when you deploy it on another OS/FS or even from a deploy to another.\n- I'm pretty sure a lot of people used this feature to override classes of other jars in a easily maintanable way (eg having 000-hibernate-override-1.0.0.jar for instance).\n\n> Broken web applications that need a JAR to be searched for classes before\n> all other JARs can force this via configuration in the context.xml file.\n> Something along the lines of the following should work:\n> \n> <Resources>\n>   <!-- Trick to force this JAR to be searched for classes before all others\n>        to work around a Jira bug -->\n>   <PreResources className=\"org.apache.catalina.webresources.FileResourceSet\"\n>                \n> base=\"${catalina.base}/webapps/jira/WEB-INF/lib/jira-api-6.2.jar\"\n>                 webAppMount=\"/WEB-INF/lib/jira-api-6.2.jar\" />\n> </Resources>\n\nIt's not something maintanable in a continuous deployment/Maven/gradle world. We update the jar versions very often and it's really not something we can do.\n\nI really think guaranteeing a predictible order is following the POLA and adding a sort is really worth it.\n\nThanks for your feedback!\n\n-- \nGuillaume", "id": 182994, "time": "2015-05-15T12:55:44Z", "creator": "guillaume.smet@gmail.com", "creation_time": "2015-05-15T12:55:44Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "markt@apache.org", "text": "My position - and reasons for that position - remain unchanged.", "id": 182995, "time": "2015-05-15T13:14:28Z", "bug_id": 57129, "creation_time": "2015-05-15T13:14:28Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Just one more comment about this.  We've recently upgrade to Tomcat 8 and encountered this.  The net effect is that Tomcat is now non-deterministic.  We have the same war file running on the version of Tomcat on two different machines.  One works, and one doesn't because of this.  I'll agree our .WAR file is faulty, but now I can do all the testing in the world of my .WAR file, and not even know if it's broken -- until some machine starts flaking out because the operating system returned the .JARs in a different order.", "is_private": false, "bug_id": 57129, "id": 183746, "time": "2015-06-25T10:46:17Z", "creator": "dcorbin@ieee.org", "creation_time": "2015-06-25T10:46:17Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 57129, "text": "You can easily detect if the potential for problems exists. Look for classes duplicated in multiple JARs.", "id": 183747, "time": "2015-06-25T10:58:12Z", "creator": "markt@apache.org", "creation_time": "2015-06-25T10:58:12Z", "is_private": false, "attachment_id": null}, {"count": 9, "attachment_id": null, "creator": "zhouyanming@gmail.com", "text": "I have the same problem, my application need to override resources of third-party libs, for example config files and templates even classes, It works fine with tomcat7 and other application servers. I hope tomcat8 could fix this problem for robustness and compatibility", "id": 183924, "time": "2015-07-07T06:48:08Z", "bug_id": 57129, "creation_time": "2015-07-07T06:48:08Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "remm@apache.org", "text": "Please look at the previous answers. You can add to the discussion if you like, but please do not reopen the report yourself.", "id": 183925, "time": "2015-07-07T07:21:32Z", "bug_id": 57129, "creation_time": "2015-07-07T07:21:32Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "chris@christopherschultz.net", "text": "(In reply to quaff from comment #9)\n> I have the same problem, my application need to override resources of\n> third-party libs, for example config files and templates even classes, It\n> works fine with tomcat7 and other application servers. I hope tomcat8 could\n> fix this problem for robustness and compatibility\n\nYou can always write your own ClassLoader that mostly delegates to the superclass (WebappClassLoader) but prioritizes whatever libraries you want.", "id": 183949, "time": "2015-07-08T01:24:08Z", "bug_id": 57129, "creation_time": "2015-07-08T01:24:08Z", "tags": [], "is_private": false}, {"count": 12, "attachment_id": null, "creator": "zhouyanming@gmail.com", "text": "(In reply to Christopher Schultz from comment #11)\n> (In reply to quaff from comment #9)\n> > I have the same problem, my application need to override resources of\n> > third-party libs, for example config files and templates even classes, It\n> > works fine with tomcat7 and other application servers. I hope tomcat8 could\n> > fix this problem for robustness and compatibility\n> \n> You can always write your own ClassLoader that mostly delegates to the\n> superclass (WebappClassLoader) but prioritizes whatever libraries you want.\n\n I think it is a regression bug, tomcat8 should fix it, maybe we should abandon tomcat8, stay with tomcat7 or switch to other servers.", "id": 183950, "time": "2015-07-08T07:02:13Z", "bug_id": 57129, "creation_time": "2015-07-08T07:02:13Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "creator": "jeconom@gmail.com", "text": "I understand the argument that an application that depends on Tomcat reading its jar files alphabetically is broken, however we are talking about a behavior that has persisted since at least Tomcat 5. It may have been unintentional or just plain wrong, but there are a lot of projects out there that have come to depend on it. Moreover it's awfully hard to debug, since most people probably don't understand that they use that behavior.\n\nI believe that the core problem is that some apps will fail depended on the underlying file system. If the target is to discourage people having the same classes in different jars, a warning could be added during classloading notifying users about that. Still, as Guillaume Smet has already mentioned, keeping track of them in large projects is not practical.\n\nEven though I am on the fence about matching the behavior of earlier versions, at the very least it should be mentioned in the migration guide, with the PreResources workaround.", "id": 185676, "time": "2015-10-07T08:36:18Z", "bug_id": 57129, "creation_time": "2015-10-07T08:36:18Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "text": "Hi Joachim,\n\nThe issue with PreResources is that you need to use an absolute path which is quite impractical.\n\nMoreover, it doesn't solve the issue of having something predictable for class loading order.\n\nIt's far from being perfect but I created https://github.com/openwide-java/tomcat-classloader-ordered to work around this issue.\n\nThat being said, I still think it should be fixed directly in Tomcat.\n\nHTH\n\n-- \nGuillaume", "is_private": false, "bug_id": 57129, "id": 185686, "time": "2015-10-07T11:43:11Z", "creator": "guillaume.smet@gmail.com", "creation_time": "2015-10-07T11:43:11Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 57129, "is_private": false, "text": "(In reply to Guillaume Smet from comment #14)\n> The issue with PreResources is that you need to use an absolute path which\n> is quite impractical.\n\nWhile absolute paths are required, they still can be parameterized. See Mark's example in comment #3 for how to make a JAR relative to where Tomcat is running.", "id": 185690, "time": "2015-10-07T15:37:00Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-10-07T15:37:00Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "We just begun converting your tomcat 6 and tomcat 7 Webfarm to Tomcat 8, and honestly, this is a show stopper for us.\n\nWe cannot, in a cluster setup, start Tomcat and have each instance have a different class loading behaviour.  This is especially important when serialization come into play with session sharing inside the cluster, where a class mismatch can lead to Serialization Exception.\n\nOr with logging libraries, such as logback, which override existing libraries with their own to offer a logging facade. \n\nIn an ideal world, yes, we would have a nice war with no overriding classes, with no dependencies pulling deep libraries. In an ideal world, we would use absolute path for a PreResources.\n\nBut this is not ideal. Maven-generated war with SNAPSHOT dependencies will have variables suffixes. Unless PreResources can support wildcards or prefixes in order to support versioning, this solution is not viable for most of us.\n\nThere was a similar use case back in Tomcat 7, when the support for War outside the webapp support was dropped, but added back later with a flag.\n\n\nThere exist applications that need a deterministic class loading. Heck, Java itself at it's core, is deterministic. That's the whole notion of classpath that is being ignored. If you do not want to make the jar sorting as the default behaviour, fine. But at the very least, offer it as an option for people to decide if they need it.\n\nie\n<context jarloading=\"name|none|lastmodified\" />\n\n\nThanks", "is_private": false, "bug_id": 57129, "id": 185859, "time": "2015-10-22T20:43:17Z", "creator": "pbusque@mediagrif.com", "creation_time": "2015-10-22T20:43:17Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "We have upgraded from Tomcat 6 / Java 6 to Tomcat 8 / Java 7.\nEverything was deployed and working successfully in tests environments and 3 prod servers. However, the deployment was failing in the two prod servers. The error faced is \u201cjava.lang.NoSuchMethodError\u201d.\n\nAfter reading this thread mentioning that Tomcat 8 loads the libraries in same folder depends on File System and not in alphabetical order. As a workaround, we decided explicitly just to rename the library facing the issue by putting \u201ca-\u201c at the front of the name to see if the issue with the alphabetical ordering will persist. This resolved the issue. We tried also by putting \u201cz-\u201c and it worked too. As soon as we re-named it to its original, the issue was evident again.\n\nThe behavior is confirmed when we display the libraries loaded in debug mode. We clearly see that the order of libraries loaded is different from an environment to the other.", "is_private": false, "bug_id": 57129, "id": 188807, "time": "2016-02-25T20:44:00Z", "creator": "chahid.benamar@gmail.com", "creation_time": "2016-02-25T20:44:00Z", "attachment_id": null}, {"count": 18, "tags": [], "creator": "wargre@gmail.com", "text": "Hello,\n\nGive back a deterministic, reproducible classloader!!! \n\n P.Busque ask at least an option to do that  \n<context jarloading=\"name|none|lastmodified\" />\nI vote +1000000 on that!\n\n\nI manage ~100 of web application on an old application server that has non deterministic classloader. I got regulary issue with \n- duplicate class (easy to fix)\n- random XML parser / transformer /... (service based thing) \n- random bug when parsing XML to java class ( can be linked to xml parser, can be linked to different schema with different version because application need to manage this...)\n\nDevelopers really like to say it runs on their computer and testing so production is not their problem but yours...   Violence is not the answer... they said...", "id": 189524, "attachment_id": null, "bug_id": 57129, "creation_time": "2016-03-17T09:59:50Z", "time": "2016-03-17T09:59:50Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 57129, "is_private": false, "text": "Hi everybody,\n\nWe also have some problems due to random jar loading order after we moved from Tomcat 7 to Tomcat 8.  Application is not starting and displays error 'signer information does not match signer information of other classes in the same package'.\nThis is because we use birt report runtime library which contains some classes of 'commons.io' package.  Under Tomcat 7, 'commons.io' Jar is loaded first, but on Tomcat 8, birt Jar is loaded first, and Tomcat 8 raises an error when it loads 'commons.io' Jar Later.\n\nWe are talking about two lines of code to add a 'sort', compared to hundred of teams that will lose days and money to debug their applications. That's just unfair. So, please, add the 'sort' to load jars in predictable order.\n\nOur application is huge and deployed on more than 20 Prod instances. We cannot use Tomcat 8 because every instance would have some different random errors due to random jar loading order.\n\nWhat is more painful than a random behavior, especialy when the application is running in production, with thousand of users connected ?\n\nWe are forced to stay on Tomcat 7 :-(", "id": 198880, "time": "2017-05-25T12:55:12Z", "creator": "fchristol@gmail.com", "creation_time": "2017-05-25T12:55:12Z", "attachment_id": null}, {"count": 20, "tags": [], "text": "(In reply to Mark Thomas from comment #8)\n> You can easily detect if the potential for problems exists. Look for classes\n> duplicated in multiple JARs.\n\nEven if we can detect duplicated classes, we have no way to fix the problem because these classes are in dependencies JARs. So, For now, we cannot move to Tomcat 8.", "is_private": false, "bug_id": 57129, "id": 198881, "time": "2017-05-25T13:01:54Z", "creator": "fchristol@gmail.com", "creation_time": "2017-05-25T13:01:54Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "fchristol@gmail.com", "is_private": false, "count": 21, "id": 198889, "time": "2017-05-25T17:33:26Z", "bug_id": 57129, "creation_time": "2017-05-25T17:33:26Z", "text": "Hello,\nPlease reconsider this bug, this is a show stopper for us.  Our application has unpredictible behavior under Tomcat 8. This is really a pain.  We cannot move to Tomcat 8.  Ordering Jars will not hurt anybody, but help a lot of persons.  Please, compare the time to fix the bug (add a call to sort) to the days maybe weeks lost because of bugs due to the random behavior.\nThanks."}, {"count": 22, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 198898, "time": "2017-05-26T07:22:22Z", "bug_id": 57129, "creation_time": "2017-05-26T07:22:22Z", "tags": [], "text": "See comment #3"}, {"count": 23, "attachment_id": null, "creator": "SebTardif@ncf.ca", "text": "It seems this issue is about fundamentalist versus pragmatism. Even if the order is deterministic, some application will still fail because not the order they are used to, but at least always fail. \n\nI hate when things are random and I try to compare logs file, it's a pain. Just for that reason I would have fixed this.\n\nI can tell you that my organization spent so far at least $3000 USD in lost of time due to this.\n\nI learned in 3rd grade high school that probability of success get lower fast if you have many tiny problem that doesn't seem useful to fix by themselves.\n\nMy app is like 10 years old, with many millions line of code, coded by 100+ developers.", "id": 203460, "time": "2018-01-24T16:09:24Z", "bug_id": 57129, "creation_time": "2018-01-24T16:09:24Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "bug_id": 57129, "is_private": false, "text": "(In reply to Sebastien Tardif from comment #23)\n> It seems this issue is about fundamentalist versus pragmatism. Even if the\n> order is deterministic, some application will still fail because not the\n> order they are used to, but at least always fail. \n> \n> I hate when things are random and I try to compare logs file, it's a pain.\n> Just for that reason I would have fixed this.\n> \n> I can tell you that my organization spent so far at least $3000 USD in lost\n> of time due to this.\n> \n> I learned in 3rd grade high school that probability of success get lower\n> fast if you have many tiny problem that doesn't seem useful to fix by\n> themselves.\n> \n> My app is like 10 years old, with many millions line of code, coded by 100+\n> developers.\n\nWhile I did not perform an exhaustive search, I know of no servlet container which explicitly guarantees JAR-file load-ordering within a particular directory. Yes, WEB-INF/classes will be loaded before WEB-INF/lib/*.jar but there is no explicit guarantee of the ordering among the JAR files. The servlet spec also does not mandate any JAR-load-ordering.\n\nI actually support the idea of alphabetical JAR-load-ordering if for no other reason than it allows you to patch a server by dropping a new JAR file into WEB-INF/lib and starting the context. If that option is not available, you need to use container-specific features such a Tomcat's <PreResources>, etc.", "id": 203473, "time": "2018-01-24T21:54:27Z", "creator": "chris@christopherschultz.net", "creation_time": "2018-01-24T21:54:27Z", "attachment_id": null}]
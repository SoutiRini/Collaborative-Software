[{"count": 0, "tags": [], "bug_id": 44636, "attachment_id": 21689, "is_private": false, "id": 114761, "time": "2008-03-19T10:22:08Z", "creator": "jkeller@oberonassociates.com", "creation_time": "2008-03-19T10:22:08Z", "text": "Created attachment 21689\nInput spreadsheet (created in Excel)\n\nUsing the sample \"recalculate all\" code from this page:\n   http://poi.apache.org/hssf/eval.html\ndoes recalculate the cells, but does not seem to correctly handle the formulas in all cases.\n\nIf you call cell.setCellForumla after evaluating the cell, it seems to work fine.\n\nHere's a simple test case.\n\n1) Run the code below. It will open the attached simple.xls, change one cell, and save it as changed.xls.\n2) Open changed.xls in Excel.\n3) Change the same cell (C1, which should now contain 25).\n4) Note how the calculated cell (D1) does not recalc.\n\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.util.Iterator;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\n\npublic class Recalc\n{\n   public static void main (String[] args)\n   {\n      try\n      {\n         File ssFile = new File (\"simple.xls\");\n         FileInputStream ssIn = new FileInputStream (ssFile);\n         HSSFWorkbook wb = new HSSFWorkbook (ssIn);\n         HSSFSheet sheet = wb.getSheetAt (0);\n         HSSFRow row = sheet.getRow (0);\n         HSSFCell cell = row.getCell ((short) 2);\n         cell.setCellValue (25);\n         \n         // recalc\n         HSSFFormulaEvaluator evaluator = new HSSFFormulaEvaluator(sheet, wb);\n         \n         for (Iterator rit = sheet.rowIterator(); rit.hasNext();)\n         {\n            HSSFRow r = (HSSFRow)rit.next();\n            evaluator.setCurrentRow(r);\n            \n            for (Iterator cit = r.cellIterator(); cit.hasNext();)\n            {\n               HSSFCell c = (HSSFCell)cit.next();\n               if (c.getCellType() == HSSFCell.CELL_TYPE_FORMULA)\n                  evaluator.evaluateFormulaCell (c);\n            }\n         }      \n         \n         FileOutputStream ssOut = new FileOutputStream (\"changed.xls\");\n         wb.write (ssOut);\n         ssOut.close();\n      }\n      catch (Exception x)\n      {\n         System.err.println (x);\n      }\n   }\n}"}, {"count": 1, "tags": [], "bug_id": 44636, "is_private": false, "text": "I tried your test code on the latest svn trunk, and got a different error. All formulas (in D1:D6) displayed as '#VALUE!' (my excel is 2007).  I found one difference which was that POI currently writes tRef PTGs involved in a shared formula back as tRefV PTGs.  There is a one line change to RefVPtg that will fix that problem, after which all D1:D6 display ok:\n\n$ svn diff src/java/org/apache/poi/hssf/record/formula/RefVPtg.java\nIndex: src/java/org/apache/poi/hssf/record/formula/RefVPtg.java\n===================================================================\n--- src/java/org/apache/poi/hssf/record/formula/RefVPtg.java    (revision 638958)\n+++ src/java/org/apache/poi/hssf/record/formula/RefVPtg.java    (working copy)\n@@ -32,6 +32,7 @@\n\n   public RefVPtg(int row, int column, boolean isRowRelative, boolean isColumnRelative) {\n     super(row, column, isRowRelative, isColumnRelative);\n+    setClass(CLASS_VALUE);\n   }\n\n\nThere have been a lot of changes in POI formula evaluation since v3.0, so I'm not sure if the same patch will fully solve the problem in that version.  Furthermore, I know I haven't fully isolated this '#VALUE!' problem that I observed in the latest POI trunk, because a simple test case would not reproduce it (i.e. writing a spreadsheet formula just with tRefV PTGs instead of tRef PTGs did not upset excel). There must be some other detail (in combination with the wrong PTGs) that causes '#VALUE!' to appear.\n\nIf you attempt to apply this patch directly to v3.0, please post back if if doesn't fix your problem.  \n\nThe patch so far is tiny, but there are a few issues that need much more investigation:\n\n1 - Up until now, I had not seen any evidence of why POI bothers with PTG token classes at all.  All junit tests continue to run when that code (setClass/getPtgClass) is disabled.  The attached spreadsheet and test code seems to be the first concrete example of why it might be necessary.  \n\n2 - It does not make sense to have ptg-class based java sub-classes of Ptg in the presence of a method \"setClass(byte)\" which can change the ptg-lass.\n\n3 - POI unpacks shared formula records, but doesn't seem to re-pack them together when the spreadsheet is re-written.\n\n\n", "id": 114765, "time": "2008-03-19T11:59:22Z", "creator": "josh@apache.org", "creation_time": "2008-03-19T11:59:22Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "I'm actually using version 3.0.2-FINAL.  (3.0 was the closest in the drop-down.)\n\nDo I still need the patch?", "attachment_id": null, "bug_id": 44636, "id": 114771, "time": "2008-03-19T13:25:35Z", "creator": "jkeller@oberonassociates.com", "creation_time": "2008-03-19T13:25:35Z", "is_private": false}, {"count": 3, "tags": [], "text": "I should also point out that the problem is a bit tricky.  I started with a very large, complex spreadsheet - and kept removing data until the problem went away. The attached xls is the simplest version in which I could reproduce it.\n\nIf you simplify that spreadsheet at all - remove a row or column for example - the code works fine.\n", "attachment_id": null, "bug_id": 44636, "id": 114772, "time": "2008-03-19T13:32:21Z", "creator": "jkeller@oberonassociates.com", "creation_time": "2008-03-19T13:32:21Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 44636, "text": "(In reply to comment #2)\nI just tried the patch in 3.0.2-FINAL.  Both the before and after behaviour was as noted above.  I.E. it should work for you.\n\nPerhaps the observation of '#VALUE!' in the formula cells is due to my version of Excel.  Which version are you using?  Just for reference, can you describe more clearly what your Excel does with 'changed.xls'?  My observation of Excel 2007 is:\n - The formulas all appear as '#VALUE!'.\n - The correct formula text is still visible in the formulas.\n - Pressing the <enter> key after selecting the formula causes it to evaluate properly.  This action seems to translate the tRef PTGs into tRefV PTGs (observable after re-saving).\n\n\n(In reply to comment #3)\n> I should also point out that the problem is a bit tricky...\n> If you simplify that spreadsheet at all - remove a row or column for example -\n> the code works fine.\n\n\nThat makes sense. The specific bug that this one-line-fix addresses is the loss of the ptg-class when translating a 'shared formula'.  From what I remember on previous bugs (bug 44449), excel has a minimum number of rows before it will use a shared.  I noticed a threshold of 6 but I'm not sure if that's universal.  POI does not erroneously disturb the ptg-class when reading/writing non-shared formulas.\n\n", "id": 114775, "time": "2008-03-19T14:05:35Z", "creator": "josh@apache.org", "creation_time": "2008-03-19T14:05:35Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 44636, "attachment_id": null, "is_private": false, "id": 114806, "time": "2008-03-20T03:14:39Z", "creator": "apache@gagravarr.org", "creation_time": "2008-03-20T03:14:39Z", "text": "I started looking at this last night, but didn't finish before Josh also took a look...\n\nI've added a unit test to svn -\nsrc/scratchpad/testcases/org/apache/poi/hssf/usermodel/TestFormulaEvaluatorBugs.java \n\nLike Josh, if I start with your file, excel gives #VALUE if I change things. If I start with an empty file, it seems fine.\n\nInterestingly, gnumeric and openoffice have no such problems with the files.\n\nWith Josh's one line fix applied, the file from my unit test works fine in excel. So, I've committed Josh's fix to svn"}, {"count": 6, "tags": [], "bug_id": 44636, "is_private": false, "text": "My Excel behaves exactly the same as yours.  I have version 2003 (11.8206.8202).\n\nI'll try the patch (I don't have the POI source yet; I had just downloaded the jars.  Thanks.\n", "id": 114808, "time": "2008-03-20T06:24:22Z", "creator": "jkeller@oberonassociates.com", "creation_time": "2008-03-20T06:24:22Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 45288, "attachment_id": null, "is_private": false, "id": 118009, "time": "2008-06-26T08:03:15Z", "creator": "anne.chanthabouasy@sun.com", "creation_time": "2008-06-26T08:03:15Z", "text": "One of our customers encountered an issue with our Sun Policy Agent, installed on apache 2.0.63 for Windows Server 2003. After a deep investigation, our technical experts show that the issue is in libapr.dll :\ndebug diagnostic tool output \n------------------------------------------------\nlibapr.dll is responsible for 797,18 MBytes worth of outstanding \nallocations. The following are the top 2 memory consuming functions:\n\nlibapr!apr_palloc+14a: 741,34 MBytes worth of outstanding allocations.\n\nlibapr!apr_pool_create_ex+de: 34,12 MBytes worth of outstanding \nallocations. If this is unexpected, please contact the vendor of this \nmodule, Apache Software Foundation, for further assistance with this \nissue.   Warning WARNING - DebugDiag was not able to locate debug \nsymbols for mswsock.dll, so the reported function name(s) may not be \naccurate\n\nmswsock.dll is responsible for 2,08 MBytes worth of outstanding \nallocations. The following are the top 2 memory consuming functions:\n\nmswsock+6fb0: 2,00 MBytes worth of outstanding allocations.\n\nmswsock+47c0: 79,53 KBytes worth of outstanding allocations. If this is \nunexpected, please contact the vendor of this module, Microsoft \nCorporation, for further assistance with this issue.   Warning Detected \nsymptoms of high fragmentation in the following heaps in \nApache.exe__PID__14624__Date__04_28_2008__Time_03_04_01PM__748__Manual \nDump.dmp\n\n\n0x00250000 (msvcrt!adjust_fdiv+860 - 96,55% Fragmented) Heap \nfragmentation is often caused by one of the following two reasons\n\n1. Small heap memory blocks that are leaked (allocated but never freed) \nover time\n\n2. Mixing long lived small allocations with short lived long allocations\n\nBoth of these reasons can prevent the NT heap manager from using free \nmemory effeciently since they are spread as small fragments that cannot \nbe used as a single large allocation\n\n----------\nto be sure, some tests have been made with and without our Agent.It seems like the freeing of the memory allocated through ap_calloc (or the destruction of the mem pool) is not implemented properly in Apache ( as it clearly indicated leaks without agent ). \n\n-------------------Without Agent-------------------\n\nlibapr.dll is responsible for 199,80 MBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nlibapr!apr_palloc+14a: 189,43 MBytes worth of outstanding allocations.\nlibapr!apr_allocator_alloc+11d: 10,14 MBytes worth of outstanding allocations. If this is unexpected, please contact the vendor of this module, Apache Software Foundation, for further assistance with this issue.\nlibeay32.dll is responsible for 2,14 KBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nlibeay32!OpenSSLDie+3b: 2,14 KBytes worth of outstanding allocations. If this is unexpected, please contact the vendor of this module for further assistance with this issue.\n\n  Warning Detected symptoms of high fragmentation in the following heaps in Apache.exe__PID__12412__Date__04_25_2008__Time_02_08_26PM__994__Manual Dump.dmp\n0x00250000 (msvcrt!adjust_fdiv+860 - 87,30% Fragmented)\n0x27090000 (LeakTrack!g_hLTHeap - 93,28% Fragmented) Heap fragmentation is often caused by one of the following two reasons\n\n1. Small heap memory blocks that are leaked (allocated but never freed) over time\n2. Mixing long lived small allocations with short lived long allocations\n\nBoth of these reasons can prevent the NT heap manager from using free memory effeciently since they are spread as small fragments that cannot be used as a single large allocation\n-------------without agent ------------------------------\n\n\n**************************** with Agent ***************************\n\nlibapr.dll is responsible for 614,28 MBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nlibapr!apr_palloc+14a: 566,31 MBytes worth of outstanding allocations.\nlibapr!apr_pool_create_ex+de: 33,59 MBytes worth of outstanding allocations. If this is unexpected, please contact the vendor of this module, Apache Software Foundation, for further assistance with this issue.\n\nmswsock.dll is responsible for 2,09 MBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nmswsock+6fb0: 2,02 MBytes worth of outstanding allocations.\nmswsock+47c0: 70,31 KBytes worth of outstanding allocations. If this is unexpected, please contact the vendor of this module, Microsoft Corporation, for further assistance with this issue.   Information DebugDiag did not detect any known native heap(unmanaged) problems in Apache.exe__PID__11600__Date__04_24_2008__Time_04_20_24PM__49__Manual Dump.dmp using the current set of scripts.\n\n**************************** with Agent *************************** \n\nAt least, There is the analysis from our Access Manager Sustaining who worked on this issue :\n----------------------------- email thread regarding this issue -------------------------\n\nAfter looking at the docs and doing some tests, here is what I found:\n\n\"The agent is not creating any pool. It is only using the Apache pools, and it cannot clean them. The only thing I found that could be tried is to use the apr_allocator_max_free_set() function to specify an upper limit on the pool. I run a test by limiting the size to 32 (value recommended in the doc) for the request pool, but didn't see any noticeable difference. There was a difference of about 500 K in the memory usage, but this is too small to be significant. The memory was not released after I stopped the users.\n\nThe memory report shows that it is the libapr.dll library that is leaking,. therefore the amsdk is not responsible for the leak. And in the apache agent all the memory allocation is done in the request pool managed by Apache. As a conclusion I don't think that there is anything that can be done at the agent level to fix this problem. Apache is doing a lot of allocation on its own as it is shown in the test without the agent, so even if the agent is not allocating memory in the pool anymore, there will still be a memory increase. \""}, {"count": 1, "tags": [], "bug_id": 45288, "attachment_id": null, "is_private": false, "id": 118012, "time": "2008-06-26T08:18:32Z", "creator": "covener@gmail.com", "creation_time": "2008-06-26T08:18:32Z", "text": "Try MaxMemFree in the HTTP Server config.\n\nIf this resolves the memory usage, but you want to avoid MaxMemFree, identify the greedy allocations in the sun module (memory use tripled) and manage pools directly.\n\nIf it doesn't help:\n\nThe sun module may be using longer-lived pools then necessary, possibly by saving references to them during configuration-time and using them during request processing."}, {"text": "3 years in NEEDINFO, no windows leaks reported in other modules that use the request pool.", "tags": [], "creator": "covener@gmail.com", "is_private": false, "count": 2, "id": 149427, "time": "2011-09-17T20:00:32Z", "bug_id": 45288, "creation_time": "2011-09-17T20:00:32Z", "attachment_id": null}]
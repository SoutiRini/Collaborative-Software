[{"count": 0, "text": "Datasources defined in context.xml are never released. This means that if the \nwebapp is repeteadly deployed/undeployed, the DB connections present in the pool \nat the time of the undeploy are leaked. This can be fixed by calling \nSimpleDataSource.close() when the context is stopped. \n\nMy fix might not be placed in the ideal location, but that's how I got it to \nwork, somebody more familiar with the code can put it in the right place.", "bug_id": 37262, "attachment_id": null, "id": 81798, "time": "2005-10-27T06:29:11Z", "creator": "bc4all@gmail.com", "creation_time": "2005-10-27T06:29:11Z", "tags": [], "is_private": false}, {"count": 1, "text": "Created attachment 16814\nNamingContextListener.java patch", "bug_id": 37262, "attachment_id": 16814, "id": 81799, "time": "2005-10-27T06:30:17Z", "creator": "bc4all@gmail.com", "creation_time": "2005-10-27T06:30:17Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 37262, "text": "Created attachment 16815\nLocalStrings.java patch", "id": 81800, "time": "2005-10-27T06:30:42Z", "creator": "bc4all@gmail.com", "creation_time": "2005-10-27T06:30:42Z", "is_private": false, "attachment_id": 16815}, {"count": 3, "tags": [], "bug_id": 37262, "text": "No, we will not add proprietary code to release any resource provider resources\n(obviously, almost every resource provider will need something ...), but rather\nit is up to it to have its cleanup code. DBCP can do this by closing inactive\nconnections, and everything should eventually be GCed.\n\nObviously, feel free to use your own custom code as needed.", "id": 81807, "time": "2005-10-27T10:01:14Z", "creator": "remm@apache.org", "creation_time": "2005-10-27T10:01:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 37262, "text": "While it might not seem elegant to introduce DBCP specific code, it is the\nresponsibility of the container to close its MANAGED resources. DBCP has no way\nof knowing that the tomcat context is  stopped and the pooled connections must\nbe closed.\n\nAn elegant solution would be (as JBoss does) to wrap the resources in a tomcat\nclass that listens to lifecycle events of the context and calls DBCP to close\nthe pooled connections when the context is stopped.\n\nI've reopened the bug just so that others can see my comment. Feel free to close\nit again, but I think DB connections leaks are a pretty serious.", "id": 81820, "attachment_id": null, "creator": "bc4all@gmail.com", "creation_time": "2005-10-27T15:47:15Z", "time": "2005-10-27T15:47:15Z", "is_private": false}, {"count": 5, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 81821, "time": "2005-10-27T15:50:30Z", "bug_id": 37262, "creation_time": "2005-10-27T15:50:30Z", "is_private": false, "text": "You don't have to reopen and waste my time for others to see your comment."}, {"count": 6, "tags": [], "bug_id": 37262, "text": "(In reply to comment #3)\n> No, we will not add proprietary code to release any resource provider resources\n> (obviously, almost every resource provider will need something ...), but rather\n> it is up to it to have its cleanup code. DBCP can do this by closing inactive\n> connections, and everything should eventually be GCed.\n> \n> Obviously, feel free to use your own custom code as needed.\n\nRemy, \n\nI would agree that there would be a big can of worms here if Tomcat needed to\nimport:\n+import com.mycompany.MyResource;\n+import com.acme.MyBasicDataSource;\n\netc., etc., non-integrated resources, just to keep manually closing each\nresource--there would be no end to it.\n\nBut looking at the import statement needed for this patch:\n+import org.apache.--->tomcat<---.dbcp.dbcp.BasicDataSource;\n\nIt seems that DBCP has already been specifically integrated within\nTomcat[1]--i.e., the proprietary code is already there--and for that reason,\nTomcat should perhaps take care of DBCP cleanup needs.\n\nOTOH, is there a bug with the implementation of DBCP that is not causing these\nconnections to close on its own--i.e., insufficient timeouts or other\nenhancements that DBCP can (rightfully?) provide that will not require any\nchanges to Tomcat?  Maybe a patch should be submitted to DBCP instead.\n\nAlso, slightly different topic, needing to modify and rebuild Tomcat in order to\nclose proprietary resource providers seems nonideal.  Is there a cleaner way\nwithin the servlet specification that this can be done without needing to recode\n& rebuild Tomcat?  Just asking as a newbie here--I'm hardly a Tomcat/servlet expert.\n\nThanks,\nGlen\n\n[1] http://tinyurl.com/7ebqn\n", "id": 81829, "time": "2005-10-27T16:42:55Z", "creator": "glenmazza@yahoo.com", "creation_time": "2005-10-27T16:42:55Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "bc4all@gmail.com", "attachment_id": null, "id": 81831, "time": "2005-10-27T17:35:46Z", "bug_id": 37262, "creation_time": "2005-10-27T17:35:46Z", "is_private": false, "text": "If the Tomcat team decides that DBCP is a \"proprietary\" external library that\ndoes not deserve proper integration and furthermore connections leaks are\nsomething totally acceptable, than the documentation at\nhttp://tomcat.apache.org/tomcat-5.5-doc/jndi-datasource-examples-howto.html\nshould be updated to reflect this position. Funny enough, the doc guides the\nusers how not to leak connections, but when tomcat does it, it's OK :-("}, {"count": 8, "tags": [], "bug_id": 37262, "text": "(In reply to comment #7)\n> If the Tomcat team decides that DBCP is a \"proprietary\" external library that\n> does not deserve proper integration and furthermore connections leaks are\n> something totally acceptable, than the documentation at\n> http://tomcat.apache.org/tomcat-5.5-doc/jndi-datasource-examples-howto.html\n> should be updated to reflect this position. Funny enough, the doc guides the\n> users how not to leak connections, but when tomcat does it, it's OK :-(\n\nHmmm...is the responsibility of Tomcat to just release DBCP when it is no longer\nneeded (by any webapp it is hosting), or DBCP's connections as well when just\none webapp no longer needs it?  Interesting question--the latter may be too\ngranular for it.\n\nAt any rate, please check the Servlet 2.4 Specification, the very small section\nSRV.10.2.2 -- for the example given, it appears to indicate that the Developer\n(that's you ;) should create a servlet context listener class in order to close\ndatabase connection(s).  If so, the only issue appears to be then, does Tomcat\ngive you access to the DBCP object(s) necessary to do such connection closing?\n\nGlen\n", "id": 81833, "time": "2005-10-27T17:54:11Z", "creator": "glenmazza@yahoo.com", "creation_time": "2005-10-27T17:54:11Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 37262, "attachment_id": null, "text": "Glen, of course I close my connections. But the datasource uses a connection\npool and the underlying JDBC connection in not really closed but just returned\nto the pool. It is the responsibility of the container who manages the\ndatasource to call close() (on the datasource, not the connection) when the\ncontext is stopped.\n\nPart of the problem is that javax.sql.DataSource does not provide a close()\nmethod, only the DBCP DataSource does. But this makes sense to me, because\njavax.sql.DataSource is an interface for the users, and the appserver should use\nits own means to cleanup the datasource. The users should not be able to close a\ndatasource, because it is meant to be managed by the appserver.\n\nHere is a quote from the JDBC 3.0 spec the mentions that an appserver\nimplementation closes a datasource.\n\n\"A connection pool manager shuts down a physical connection by calling the\nmethod PooledConnection.close. This method is typically called only in\ncertain circumstances: when the application server is undergoing an orderly\nshutdown, when the connection cache is being reinitialized, or when the\napplication server receives an event indicating that an unrecoverable error has\noccurred on the connection.\" \n\nThe connection manager is DBCP but it has no way of knowing that the tomcat\ncontext is stopped. That's why, for a proper integration there needs to be some\nglueing code that listens to tomcat lifecycle events and notifies DBCP. It\ndoesn't strictly belong to Tomcat, it doesn't strictly belong to DBCP, so that's\nwhy it does not exist.", "id": 81841, "time": "2005-10-27T18:28:20Z", "creator": "bc4all@gmail.com", "creation_time": "2005-10-27T18:28:20Z", "is_private": false}, {"count": 10, "text": "(In reply to comment #9)\n> Glen, of course I close my connections. But the datasource uses a connection\n> pool and the underlying JDBC connection in not really closed but just returned\n> to the pool. \n\nI know -- SRV10.2.2 was just a \"for example\" -- it implies the types of things\nthe Developer can/should do, such as create a listener to close the DBCP when\nthe webapp is shut down.\n\nHowever, I can't see how this would be doable within Tomcat, given that the\nobject is created within server.xml.  The Developer does not have access to the\nJava object external to the Tomcat source code; they have to recode Tomcat as\nyou've done here.\n\n> It is the responsibility of the container who manages the\n> datasource to call close() (on the datasource, not the connection) when the\n> context is stopped.\n\nWell, this seems to be too specific--the Servlet 2.4 spec doesn't mention data\nsources and close() methods specifically.  So I'm not so certain how much of a\ncontainer requirement this is.\n\n\n> \n> Part of the problem is that javax.sql.DataSource does not provide a close()\n> method, only the DBCP DataSource does. But this makes sense to me, because\n> javax.sql.DataSource is an interface for the users, and the appserver should use\n> its own means to cleanup the datasource. \n\nIf that were the case, I think there would have to be a standard definition for\na data source, as well as a \"close()\" method that it must implement within the\nServlet spec.\n\n> The users should not be able to close a\n> datasource, because it is meant to be managed by the appserver.\n\nOK--but what if a datasource is shared by multiple applications/instances of\nTomcat, etc.?  (possible?) Then we wouldn't want it to be closed automatically\nwhenever a webapp is shut down.\n\n\n> \n> Here is a quote from the JDBC 3.0 spec the mentions that an appserver\n> implementation closes a datasource.\n> \n> \"A connection pool manager shuts down a physical connection by calling the\n> method PooledConnection.close. This method is typically called only in\n> certain circumstances: when the application server is undergoing an orderly\n> shutdown, when the connection cache is being reinitialized, or when the\n> application server receives an event indicating that an unrecoverable error has\n> occurred on the connection.\" \n> \n\nBut this doesn't seem to rule out that the developer won't be creating an\napplication event listener that is activated to specifically shut down the data\nsource (data source API's vary, so I don't see how the app server can do this in\na common manner for all data sources.)  But again, I don't see how this is\ndoable within Tomcat in an server.xml-created connection pool.\n\n> The connection manager is DBCP but it has no way of knowing that the tomcat\n> context is stopped. That's why, for a proper integration there needs to be some\n> glueing code that listens to tomcat lifecycle events and notifies DBCP. It\n> doesn't strictly belong to Tomcat, it doesn't strictly belong to DBCP, so that's\n> why it does not exist.\n\nI think there are two problems here (again, newbie speaking here):\n1.)  The application developer does not have programmatic access to the\nconnection pool created in server.xml, so he/she cannot call close() on it from\na developer-created application event listener even if he/she wanted to.  (Your\nopinion is that this should not need to be done anyway, it should be automatic.)\n\n2.)  Tomcat integrates DBCP enough to allow for creation of a connection pool\nfrom server.xml, but is not calling close() on those connection pools after the\nwebapp is shut down.  \n\nI don't have an opinion either way on this; I'm just trying to understand the\nissue, although I wonder if other users have complained about this as well, and\nif not, why not.\n\nGlen\n", "bug_id": 37262, "attachment_id": null, "id": 81874, "time": "2005-10-27T23:51:15Z", "creator": "glenmazza@yahoo.com", "creation_time": "2005-10-27T23:51:15Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 37262, "text": "I'm not talking about resources from server.xml but rather context.xml which are\nnot shared with other webapps.", "id": 81875, "time": "2005-10-28T00:16:47Z", "creator": "bc4all@gmail.com", "creation_time": "2005-10-28T00:16:47Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 91754, "time": "2006-08-01T02:16:09Z", "bug_id": 37262, "creation_time": "2006-08-01T02:16:09Z", "is_private": false, "text": "*** Bug 29497 has been marked as a duplicate of this bug. ***"}]
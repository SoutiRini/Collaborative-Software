[{"count": 0, "tags": [], "bug_id": 16001, "is_private": false, "text": "I have a simple jsp page with a customer tag. During jsp execution, the release \nmethod of the tag did not get invoked, which conflicts with J2EE spec.", "id": 29204, "time": "2003-01-12T06:43:02Z", "creator": "chunsheng.chen@verizon.com", "creation_time": "2003-01-12T06:43:02Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "william.barker@wilshire.com", "text": "The JSP spec requires that the release method is called before the tag is \nallowed to pass to GC.  With the default settings to enable tag-pooling, the \ntag is returned to the pool, so the release method can't be called. \n\nTo get the behavior that you want, disable tag-pooling in \n$CATALINA_HOME/conf/web.xml.  ", "id": 29205, "time": "2003-01-12T07:37:36Z", "bug_id": 16001, "creation_time": "2003-01-12T07:37:36Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "william.barker@wilshire.com", "attachment_id": null, "text": "*** Bug 16031 has been marked as a duplicate of this bug. ***", "id": 29290, "time": "2003-01-13T18:40:34Z", "bug_id": 16001, "creation_time": "2003-01-13T18:40:34Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 16001, "is_private": false, "text": "The following is regarding bug 16031:\n\nI assume you are referring to the tag handler's release() method when you talk\nabout resetting its state?\n\nNote that according to the spec, the release() method is guaranteed to\nbe called on any tag handler, \"but there may be multiple invocations\non doStartTag() and doEndTag() in between.\"\n\nTherefore, your tag handler should not rely on its release() method to\nreset any private invocation-specific state. This state is best\ninitialized in doStartTag(). This means that in your specific example, you\nshould clear your \"key\" and \"value\" objects in your tag handler's doStartTag()\nmethod.\n\nSee important tips for tag-handler lifecycle management at\n\n http://jakarta.apache.org/taglibs/guidelines.html\n\n\n", "id": 29291, "time": "2003-01-13T18:52:53Z", "creator": "jan.luehe@sun.com", "creation_time": "2003-01-13T18:52:53Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "According to the spec, the release() method is guaranteed to be called on any \ntag handler, this is to say, even when the tag handler instance is pooled, it \nstill should invoke release() to release any state the tag handler may posess.\n\nIn my case, I have a tag handler super class that needs to get a state value \nfrom session and set it for the child class to construct business view object. \nI agree that it is feasible to clean it up in doStartTag() since my tag is not \nan iteration tag. But still it would be ideal to use release() to clean up \nprivate invocation-specific state.", "is_private": false, "bug_id": 16001, "id": 29296, "time": "2003-01-13T19:42:40Z", "creator": "chunsheng.chen@verizon.com", "creation_time": "2003-01-13T19:42:40Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "*** Bug 16071 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 16001, "id": 29361, "time": "2003-01-14T18:08:18Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-01-14T18:08:18Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "fabamb@computer.org", "attachment_id": 4464, "id": 29543, "time": "2003-01-16T16:13:59Z", "bug_id": 16001, "creation_time": "2003-01-16T16:13:59Z", "is_private": false, "text": "Created attachment 4464\nA war containing an example of the scenario in which the bug is exposed"}, {"count": 7, "tags": [], "bug_id": 16001, "is_private": false, "text": "I think that Tag.release is not invoked between two uses of the same tag, now\nthat it is extracted from the pool.\n\nIf the tag store a value in an internal variable, depending on a required\nattribute, you'll find the previuos value in the next use even if you set it to\nnull in release.\n\nI don't know if the life-cycle model of custom tags is changed in last\nspecifications, but I expect to have a clean instance of the object every time I\nuse it, especially if I've implemented release.\n\nI've posted an attachment containing a small war with a simple tag and a page of\nexample. Try it. \n", "id": 29547, "time": "2003-01-16T16:25:16Z", "creator": "fabamb@computer.org", "creation_time": "2003-01-16T16:25:16Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "iblesa@tissat.es", "attachment_id": null, "text": "You cannot put it to null. You have to make a call to removeValue(). Really you\nSHOULD NOT do this, because we think that has to be done automatically :P", "id": 29548, "time": "2003-01-16T16:42:36Z", "bug_id": 16001, "creation_time": "2003-01-16T16:42:36Z", "is_private": false}, {"count": 9, "tags": [], "text": "\nLets see if I can get through to you guys, Jan Luehe's fine post was \napparently not enough.\n\nFrom the Tag.release() javadoc:\n\"...there may be multiple invocations on doStartTag and doEndTag in between.\"\n\nThis is plain english and means that on the same page the tag can be taken out \nof the pool, and then used several times _WITHOUT_ .release() being called in \nbetween AND THIS IS NOT A BUG. Ergo, Tag.release can NOT be used for resetting \nstates between uses of tags.\n\nIf you need to reset your internal values that SHOULD be done in doEndTag for \ninstance.\n", "is_private": false, "bug_id": 16001, "id": 29550, "time": "2003-01-16T16:55:19Z", "creator": "puckman@taglab.com", "creation_time": "2003-01-16T16:55:19Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "I think that from a progammers view :\n\nThe programmers should not care about how internal things are done. That is, if\ntomcat uses pools of objects for performance improvements or any other approach,\nprogrammer should not care about it, it should only use a tag and if later it is\nreused, asume a initial state.\n\n\n\nShould not be this the right approach as done on other servers ?", "is_private": false, "bug_id": 16001, "id": 29553, "time": "2003-01-16T17:23:10Z", "creator": "iblesa@tissat.es", "creation_time": "2003-01-16T17:23:10Z", "attachment_id": null}, {"text": "\nAs with any API, the programmer is supposed to understand how it works. I \ndidn't write the spec, but it is pretty obvious to me that it is working as \nintended.", "tags": [], "bug_id": 16001, "is_private": false, "count": 11, "id": 29557, "time": "2003-01-16T17:41:12Z", "creator": "puckman@taglab.com", "creation_time": "2003-01-16T17:41:12Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "william.barker@wilshire.com", "text": "*** Bug 16171 has been marked as a duplicate of this bug. ***", "id": 29562, "time": "2003-01-16T18:21:32Z", "bug_id": 16001, "creation_time": "2003-01-16T18:21:32Z", "is_private": false, "attachment_id": null}, {"count": 13, "attachment_id": null, "creator": "iblesa@tissat.es", "text": "As I understand the api, it does not talk about custom tag pools, it only speaks\nabout tags, if you use a pool, it should be transparent.\n\nAnd in other servers it works as we think it should work.", "id": 29591, "time": "2003-01-17T08:13:31Z", "bug_id": 16001, "creation_time": "2003-01-17T08:13:31Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "Your tag does not comply with the JSP specification, and, as a result it may or\nmay not work. This issue WILL NOT be fixed in Tomcat.\nThanks, and DO NOT REOPEN THIS BUG.", "id": 29600, "time": "2003-01-17T14:19:03Z", "bug_id": 16001, "creation_time": "2003-01-17T14:19:03Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 16001, "is_private": false, "text": "Ismael,\n\nPlease take a look at section 10.5 in the 1.2 spec and section 12.4 in the 2.0\nspec :\n\n\"Below is a somewhat complete example of the way one JSP container could\nchoose to do some tag handler management. There are many other strategies that\ncould be followed, with different pay offs.\nThe example is as below. In this example, we are assuming that x:iterate is an\niterative tag, while x:doit and x:foobar are simple tag. We will also assume that\nx:iterate and x:foobar implement the TryCatchFinally interface, while x:doit does\nnot.\n<x:iterate src=\u201cfoo\u201d>\n<x:doit att1=\u201cone\u201d att2=\u201c<%= 1 + 1 %>\u201d />\n<x:foobar />\n<x:doit att1=\u201cone\u201d att2=\u201c<%= 2 + 2 %>\u201d />\n</x:iterate>\n<x:doit att1=\u201cone\u201d att2=\u201c<%= 3 + 3 %>\u201d />\nThe particular code shown below assumes there is some pool of tag handlers\nthat are managed (details not described, although pool managing is simpler when\nthere are no optional attributes), and attemps to reuse tag handlers if\npossible. The\ncode also \u201choists\u201d setting of properties to reduce the cost when appropriate, e.g.\ninside an iteration.\"\n\nAs you can see pooling IS Mentioned. If you take a look at the example code that\nfollows this section you will see that release() is NOT called between tag\ninvocations. \n\nThe only thing that the spec says has to happen is that release() is called\nbefore the tag is gc'd. This could potentialy only occur when an webcontainer is\nshutdown. \n\nI would suggest you take a look at a custom tag library like struts that\ndemontrates how custom tags should cleanup when used in a pooled environment. ", "id": 29602, "time": "2003-01-17T14:37:46Z", "creator": "backhous@us.ibm.com", "creation_time": "2003-01-17T14:37:46Z", "attachment_id": null}, {"count": 16, "tags": [], "creator": "puckman@taglab.com", "text": "\nConsider reading the rest of the spec as well...\nYes tags are meant to be pooled. However .release() is NOT intended to be \ncalled between reuses of a tag... as the javadoc clearly states.\n\nEven the name \"release\" tells us that this is not a \"reinit\".", "id": 29607, "time": "2003-01-17T15:29:06Z", "bug_id": 16001, "creation_time": "2003-01-17T15:29:06Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "creator": "fabamb@computer.org", "attachment_id": null, "text": "Ok guys. You're right.\n\nI found the book (about JSP 1.1) in which a flow-chart of the life-cycle of a\ntag has driven me in error.\n\nMore, there are some JSP engine (such as Weblogic that has implemented the pool\nbefore Tomcat) where release is invoke just after the return of doEndTag, even\nif specification says different.\n\nBut specs rule!\n\n", "id": 29619, "time": "2003-01-17T16:39:44Z", "bug_id": 16001, "creation_time": "2003-01-17T16:39:44Z", "is_private": false}, {"text": "A note from Hans Bergsten, for reference.\n\nI'm in the EG and we had a long discussion about this again for JSP 2.0.\nThe end result is that the current behavior (do _not_ call release()\nbetween invocations) will stay. A confusing arrow from the \"released\"\nstate to the \"initialized\" state in the state diagram will be removed,\nhowever. This state transition came with lots and lots of restrictions,\nbut it seems like some vendor (and developers) saw it as a requirement\nto call release() between invocations, even though the text clearly\nstate that that's not the case.\n\nThis is being discussed pretty much everywhere these days and I hope\npeople eventually will get it. I wrote about it in an article just\nafter JSP 1.2 was released. Feel free to point people to it if you\nget tired of rehashing the same arguments over and over ;-)\n\n  <http://www.onjava.com/pub/a/onjava/2001/11/07/jsp12.html>\n  Page 2, the \"Tag handler life cycle and instance reuse\" section\n", "tags": [], "bug_id": 16001, "is_private": false, "count": 18, "id": 29630, "time": "2003-01-17T19:43:01Z", "creator": "mvdb@apache.org", "creation_time": "2003-01-17T19:43:01Z", "attachment_id": null}, {"count": 19, "tags": [], "creator": "iblesa@tissat.es", "attachment_id": null, "text": "Ok, thank you for your responses, I misinterpretted the specification. But I was\nconfused because on previous version of tomcat (4.1.12 I think) it seemed to\nwork as I thought it should work. I also tested on another servers and I got the\nsame behaviour. \n\nSorry, next time I will reread the specification before posting :)", "id": 29695, "time": "2003-01-20T08:35:05Z", "bug_id": 16001, "creation_time": "2003-01-20T08:35:05Z", "is_private": false}, {"count": 20, "tags": [], "creator": "jakarta@trollingers.com", "attachment_id": null, "id": 31458, "time": "2003-02-17T15:55:28Z", "bug_id": 16001, "creation_time": "2003-02-17T15:55:28Z", "is_private": false, "text": "*** Bug 17130 has been marked as a duplicate of this bug. ***"}, {"count": 21, "tags": [], "bug_id": 16001, "is_private": false, "text": "OK guys, release() method is NOT guaranteed to be called on any tag handler, so\n..there may be multiple invocations on doStartTag and doEndTag in between.\n\nBut programmers needs a method to initialize the tag between uses. Initializing\nit at doStartTag method is not OK because setters are called before doStartTag\nso programmer could clear the setted variables.\n\nWe need a method to initialize the tag before it's called, Maybe changing the\nget method get() at TagHandlerPool.java\n\nIf not, please great gurus, how can we use tag pooling without this\ninitialization issues. JSP spec is not clear about this!\n\n    public synchronized Tag get(Class handlerClass) throws JspException {\n        Tag handler = null;\n    \n        if (current >= 0) {\n            handler = handlers[current--];\n     \n// If handler is already in the cache release it\n// It cannot be done at startTag not at EndTag because closed tags can\n// return a java object\n            handler.release();\n        } else {\n            try {\n                return (Tag) handlerClass.newInstance();\n            } catch (Exception e) {\n                throw new JspException(e.getMessage(), e);\n            }\n        }\n\n        return handler;\n    }", "id": 31476, "time": "2003-02-17T20:23:00Z", "creator": "vicentesalvador@netscape.net", "creation_time": "2003-02-17T20:23:00Z", "attachment_id": null}, {"count": 22, "tags": [], "text": "*** Bug 18349 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 16001, "id": 33802, "time": "2003-03-25T23:33:24Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-03-25T23:33:24Z", "attachment_id": null}, {"text": "I agree that initializing variables in doStartTag() doesn't make sense, since \nthe property sets are already called BEFORE doStartTag() according to the \nspec.  So, where does this leave the programmers a place to re-initialize the \nveriables (most importantly the optional custom tag variables).  I figure that \ndoAfterBody() is no good because it is called multiple times for BodyTag \nhandlers.  So, the only place left is to override setPageContext() and have it \ncall super.setPageContext() AND release().  \n\nThis is obviously a hack and doesn't seem like a good answer, but I don't see \nany other choice.  Is there one?\n\n", "tags": [], "bug_id": 16001, "is_private": false, "count": 23, "id": 33840, "time": "2003-03-26T18:03:00Z", "creator": "webmaster@swstrings.com", "creation_time": "2003-03-26T18:03:00Z", "attachment_id": null}, {"count": 24, "tags": [], "creator": "hans@gefionsoftware.com", "attachment_id": null, "id": 33843, "time": "2003-03-26T18:33:39Z", "bug_id": 16001, "creation_time": "2003-03-26T18:33:39Z", "is_private": false, "text": "If you look through the comments for this \"bug\", the solution is defined by the\nJSP spec: a tag handler instance can _not_ be reused for occurances of the\ncorresponding custom action that specify different optional attributes. Hence,\nthere's no risk that a tag handler that has been used with an optional attribute\nis   later used without that optional attribute. See this article for details:\n\n <http://www.onjava.com/pub/a/onjava/2001/11/07/jsp12.html>\n  Page 2, the \"Tag handler life cycle and instance reuse\" section"}, {"count": 25, "tags": [], "text": "Chris,\n#  doFinally() *is* always called for tag handlers that implement\nTryCatchFinally, so this method should be used if any invocation- specific\nresources need to be released\n\nYou could try using this to clear variables.", "is_private": false, "bug_id": 16001, "id": 37545, "time": "2003-05-21T13:32:38Z", "creator": "masque@inetsolve.com", "creation_time": "2003-05-21T13:32:38Z", "attachment_id": null}, {"count": 26, "tags": [], "creator": "pawelz@documentum.com", "attachment_id": null, "id": 42960, "time": "2003-08-19T02:16:34Z", "bug_id": 16001, "creation_time": "2003-08-19T02:16:34Z", "is_private": false, "text": "According to the JSP 1.1 Errata published on 5/31/00\n(http://java.sun.com/products/jsp/errata_1_1_a_042800.html see under \"Issue 14\")\nthe behavior exhibited by Jasper (regarding tag pooling) is not in accordance\nwith the specification for JSP 1.1. The errata recognizes the shortcoming of the\noriginal spec, which did not provide any mechanism for clearing the tag\nhandler\u2019s state between uses, and it states that tag instances cannot be reused\nif they don't correspond to actions with the same attributes, unless release()\nis called between uses. \n\nSo, the same instance of the handler can be used for\n<x:foo att1=\"one\" att2=\"two\"/>\n<x:foo att1=\"HELLO\" att2=\"BYE\"/>\nbut for \n<x:foo att1=\"one\" att2=\"two\"/>\n<x:foo att1=\"HELLO\"/>\nyou either have to use different instances, or you have to call release() before\nsecond use.\n\nI would assume the same applies for JSP 1.2, unless the specification explicitly\nstates otherwise.\n\nThe errata is there for everyone to see right along side of the original final\nspecification \nhttp://java.sun.com/products/jsp/download.html#specs"}, {"count": 27, "tags": [], "bug_id": 16001, "is_private": false, "text": "It's true that the 1.1 errata was included in the 1.2 Spec.  However, it's not \nrelevent to this report.  Jasper will use seperate instances of the \"foo\" tag \nhandler, which you've already agreed is valid.", "id": 42963, "time": "2003-08-19T04:42:44Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-08-19T04:42:44Z", "attachment_id": null}, {"text": "Yep, you are right. I guess we're left with turning tag pooling off. \nMany thanks!", "tags": [], "bug_id": 16001, "is_private": false, "count": 28, "id": 43002, "time": "2003-08-19T17:25:10Z", "creator": "pawelz@documentum.com", "creation_time": "2003-08-19T17:25:10Z", "attachment_id": null}, {"count": 29, "tags": [], "creator": "funkman@joedog.org", "text": "*** Bug 26527 has been marked as a duplicate of this bug. ***", "id": 51414, "time": "2004-01-29T16:53:30Z", "bug_id": 16001, "creation_time": "2004-01-29T16:53:30Z", "is_private": false, "attachment_id": null}, {"count": 30, "attachment_id": null, "creator": "funkman@joedog.org", "text": "*** Bug 32957 has been marked as a duplicate of this bug. ***", "id": 69253, "time": "2005-01-06T00:39:56Z", "bug_id": 16001, "creation_time": "2005-01-06T00:39:56Z", "tags": [], "is_private": false}, {"count": 31, "tags": [], "creator": "mwe.tech@spree.de", "attachment_id": null, "id": 75216, "time": "2005-05-23T12:34:06Z", "bug_id": 16001, "creation_time": "2005-05-23T12:34:06Z", "is_private": false, "text": "*** Bug 34986 has been marked as a duplicate of this bug. ***"}]
[{"attachment_id": null, "tags": [], "creator": "ferdaws_tounsia@yahoo.fr", "is_private": false, "count": 0, "id": 179207, "time": "2014-11-20T16:27:05Z", "bug_id": 57241, "creation_time": "2014-11-20T16:27:05Z", "text": "Today I have performance issues after importing/exporting xlsm templates in my java web application ( apache,tomcat 6,POI 3.9,java 6,Oracle database).Uploading an xlsm file is taking 400 MB of memory and the memory is not totally released.\n\nIn total 65 % of the massive JVM memory is being retained by the POI APIs , Traditionally POI always known to have a higher memory footprint , it uses a lot of memory when dealing with large spreadsheets. \n\nApart from POI, the framework Document Manager class was also retaining  28 % of the heap memory. I think here the documents which are being imported by the application are being stored in memory however references for those are being retained even after import finishes. That's the reason why probably JVM Garbage Collector is not being able to clean those objects from memory. \n\nDo you have a clue to free this memory?\n\nthank you"}, {"count": 1, "attachment_id": null, "creator": "apache@gagravarr.org", "text": "Try upgrading to 3.11 beta 3, then make sure you're explicitly closing Workbooks you open + setting the references to null", "id": 179208, "time": "2014-11-20T16:31:08Z", "bug_id": 57241, "creation_time": "2014-11-20T16:31:08Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "No update for some time, therefore setting this to WORKSFORME for now, please reopen this if it is still a problem for you together with some sample-code that shows memory being kept after the Workbooks are close()ed and references to the Workbook are cleared.", "id": 185209, "time": "2015-09-13T20:57:08Z", "bug_id": 57241, "creation_time": "2015-09-13T20:57:08Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rahul.herwadkar@gmail.com", "attachment_id": null, "text": "The following code example works fine with poi-3.13-20150929.jar on Google App Engine environment:\n\n      Workbook oWorkbook = new HSSFWorkbook();\n      Sheet oSheet = oWorkbook.createSheet(\"Analysis\");\n      ...\n      <code to init sRowIndex, oItemList etc.>\n      ...\n      oSheet.addMergedRegion(new CellRangeAddress(sRowIndex, sRowIndex, 3,\n          oItemList.size() + 2));\n\nThe same code throws java.lang.NoClassDefFoundError error with latest poi-3.14-20160307.jar:\n\n      java.lang.NoClassDefFoundError: java.awt.geom.RectangularShape is a restricted class. Please see the Google App Engine developer's guide for more details.\n\tat com.google.apphosting.runtime.security.shared.stub.java.awt.geom.RectangularShape.<clinit>(RectangularShape.java)\n\tat org.apache.poi.ss.util.CellRangeAddressBase.getRectangle(CellRangeAddressBase.java:164)\n\tat org.apache.poi.ss.util.CellRangeAddressBase.intersects(CellRangeAddressBase.java:140)\n\tat org.apache.poi.hssf.usermodel.HSSFSheet.validateMergedRegions(HSSFSheet.java:722)\n\tat org.apache.poi.hssf.usermodel.HSSFSheet.addMergedRegion(HSSFSheet.java:684)\n        ...\n        <application code similar to example code snippet goes here>\n\nThis is a regression between poi-3.13-20150929.jar and 3.14-20160307.jar.\n\nThe implementation for getRectangle() method in CellRangeAddressBase.java has a TODO comment indicating a temporary workaround in rel 3.14:\n\n\t// TODO: Replace with an intersection code that doesn't rely on java.awt\n\t// Don't let this temporary implementation detail leak outside of this class\n\tprivate final Rectangle getRectangle() {\n\t\tint firstRow, firstCol, lastRow, lastCol;\n\t\t\n\t\tif (!isFullColumnRange()) {\n\t\t\tfirstRow = Math.min(_firstRow, _lastRow);\n\t\t\tlastRow = Math.max(_firstRow,  _lastRow);\n\t\t}\n\t\telse {\n\t\t\tfirstRow = 0;\n\t\t\tlastRow = Integer.MAX_VALUE;\n\t\t}\n\t\tif (!isFullRowRange()) {\n\t\t\tfirstCol = Math.min(_firstCol, _lastCol);\n\t\t\tlastCol = Math.max(_firstCol, _lastCol);\n\t\t}\n\t\telse {\n\t\t\tfirstCol = 0;\n\t\t\tlastCol = Integer.MAX_VALUE;\n\t\t}\n\t\treturn new Rectangle(firstRow, firstCol, lastRow-firstRow+1, lastCol-firstCol+1);\n\t}\n\nMy use case is to create an MS Excel spreadsheet. As mentioned before, this use case is working in rel 3.13 but breaks in 3.14 in the Google App Engine environment.", "id": 189550, "time": "2016-03-17T20:04:22Z", "bug_id": 59194, "creation_time": "2016-03-17T20:04:22Z", "is_private": false}, {"count": 1, "tags": [], "text": "Any chance you could work up a GAE-friendly replacement for the logic?", "is_private": false, "bug_id": 59194, "id": 189551, "time": "2016-03-17T22:03:45Z", "creator": "apache@gagravarr.org", "creation_time": "2016-03-17T22:03:45Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59194, "is_private": false, "text": "In r1711586 from bug 58443, I added java.awt.Rectangle.intersects to check if two merged cell regions intersect. [1]\n\nI could have duplicated the logic used by java.awt.Rectangle.intersects in POI, but (falsely) assumed that all applications using POI would have access to java.awt.Rectangle. Apparently this isn't the case for Google App Engine, which off-limits this class. I'd like to avoid duplicating the intersects logic into POI in fear of an incorrect implementation.\n\nCould you also investigate if your Google App Engine setup is to blame? Others solved this problem by removing older Jetty jars [2,3,4]\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/util/CellRangeAddressBase.java?r1=1711586&r2=1711585&pathrev=1711586\n\n[2] https://code.google.com/p/googleappengine/issues/detail?id=2324#c3\n[3] http://stackoverflow.com/questions/15673942/urlstreamhandler-is-a-restricted-class\n[4] http://stackoverflow.com/questions/11672559/java-awt-geom-rectangularshape-support-on-gae", "id": 189552, "time": "2016-03-17T22:50:30Z", "creator": "onealj@apache.org", "creation_time": "2016-03-17T22:50:30Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 59194, "is_private": false, "text": "There are no Jetty jars in my GAE setup. Outside of the default GAE jars, this is what I package into my app:\n\ncommons-codec-1.10.jar\ncommons-lang3-3.4.jar\ncommons-logging-1.2.jar\ncommons-math3-3.6.jar\ngson-2.6.2.jar\n\nCurrently, the only workaround I trust is to revert to poi v3.13. What are my other options? Do you know of a GAE friendly/certified replacement for java.awt?", "id": 189553, "time": "2016-03-17T23:00:09Z", "creator": "rahul.herwadkar@gmail.com", "creation_time": "2016-03-17T23:00:09Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "This isn't the first time that GAE has had problems with POI [1]. A similar error occurred in POI 3.6. Unfortunately, the Google Code URL in the answer no longer works, so here's an archive [2].\n\n> Apache POI\n> Version(s)\t?\n> Status\tINCOMPATIBLE\n> Apache POI relies on several classes not in the JRE class whitelist including java.awt.Color. A bug has been filed at https://issues.apache.org/bugzilla/show_bug.cgi?id=47497.\n\nI imagine you would have got the same restricted class error in POI 3.13 had your code tried to use a class that relied on a method or object from java.awt.\n\nIn order to get GAE compatibility, we'd need to replace nearly every usage of java.awt in POI [3]. It might also be worth trying to get (portions of) java.awt.* whitelisted on Google App Engine. Did Google exclude java.awt because it poses a security risk?\n\n[1] https://groups.google.com/forum/#!topic/google-appengine-java/ARDWKSLtXz0\n[2] https://web.archive.org/web/20120115214324/http://code.google.com/p/googleappengine/wiki/WillItPlayInJava\n[3] https://web.archive.org/web/20120119065142/http://code.google.com/appengine/docs/java/jrewhitelist.html", "id": 189554, "time": "2016-03-17T23:10:54Z", "bug_id": 59194, "creation_time": "2016-03-17T23:10:54Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 33683\nExcel file generated from POI APIs", "is_private": false, "bug_id": 59194, "id": 189555, "time": "2016-03-17T23:35:03Z", "creator": "rahul.herwadkar@gmail.com", "creation_time": "2016-03-17T23:35:03Z", "attachment_id": 33683}, {"count": 6, "tags": [], "bug_id": 59194, "is_private": false, "text": "The above attachment is an example of the excel file generated from my app.\n\nI don't do anything out of the ordinary with the POI APIs. The only special things I do are:\n\n1) Merge cells for the table column headers.\n\n2) Link a cell to another cell in same or different sheet.\n\nI have no idea why GAE would restrict usage of java.awt. I tried to google the error but did not come across any meaningful result.", "id": 189556, "time": "2016-03-17T23:39:58Z", "creator": "rahul.herwadkar@gmail.com", "creation_time": "2016-03-17T23:39:58Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 59194, "attachment_id": null, "id": 189557, "time": "2016-03-18T00:46:44Z", "creator": "onealj@apache.org", "creation_time": "2016-03-18T00:46:44Z", "is_private": false, "text": "(In reply to rahul.herwadkar from comment #6)\n> 1) Merge cells for the table column headers.\n\nThis is why you're getting the error. I discovered that I could create a corrupt workbook by adding a merged region B2:C3 when a workbook already contained a merged region A1:B2, since the two merged regions intersect.\n\nIf you want to skip this intersection check, use XSSFSheet.addMergedRegionUnsafe. I will add HSSFSheet.addMergedRegionUnsafe in a nightly build, which should get you around this problem."}, {"count": 8, "tags": [], "creator": "rahul.herwadkar@gmail.com", "attachment_id": null, "is_private": false, "id": 189558, "time": "2016-03-18T02:03:48Z", "bug_id": 59194, "creation_time": "2016-03-18T02:03:48Z", "text": "So the merged cells in my spreadsheet happen to overlap? That's interesting... Thanks for the quick followup. I'll check and fix my code logic as well."}, {"count": 9, "tags": [], "bug_id": 59194, "is_private": false, "text": "https://poi.apache.org/changes.html\n> fix 58443 - Prohibit adding merged regions that would overlap with existing merged regions\n\nIn POI 3.14, addMergedRegion was modified to check for overlapping merged regions. The merged region validation calls java.awt.Rectangle.intersects, regardless of whether there are overlapping merged regions or not.", "id": 189559, "time": "2016-03-18T02:34:36Z", "creator": "onealj@apache.org", "creation_time": "2016-03-18T02:34:36Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "Refer to bug 56835\nUnit test which demonstrates that adding a comment in the same cell twice is not allowed (since it would produce a corrupt workbook):\nhttp://svn.apache.org/viewvc/poi/trunk/src/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFDrawing.java?r1=1633397&r2=1633396&pathrev=1633397", "id": 189561, "time": "2016-03-18T03:56:36Z", "bug_id": 59194, "creation_time": "2016-03-18T03:56:36Z", "is_private": false}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "> regardless of whether there are overlapping merged regions [in the workbook] or not", "id": 189563, "time": "2016-03-18T03:59:46Z", "bug_id": 59194, "creation_time": "2016-03-18T03:59:46Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 59194, "text": "Disregard comment 10", "id": 189564, "time": "2016-03-18T04:00:50Z", "creator": "onealj@apache.org", "creation_time": "2016-03-18T04:00:50Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 59194, "attachment_id": null, "id": 189642, "time": "2016-03-22T09:15:08Z", "creator": "onealj@apache.org", "creation_time": "2016-03-22T09:15:08Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #7)\n> If you want to skip this intersection check, use\n> XSSFSheet.addMergedRegionUnsafe. I will add HSSFSheet.addMergedRegionUnsafe\n> in a nightly build, which should get you around this problem.\n\nImplemented this workaround in r1736155 (bug 59212). Use any nightly or POI 3.15 beta 1 (when it's released) to avoid this java.awt dependency."}, {"count": 14, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "is_private": false, "id": 189731, "time": "2016-03-26T12:42:26Z", "bug_id": 59194, "creation_time": "2016-03-26T12:42:26Z", "text": "I think the regression from 3.13 should work now if using the new unsafe-method. I don't think we plan to get rid of all of java.awt as it is used in a number of  places, especially Powerpoint support. Specific things that fail on GAE can be reported as separate bugs so we can decide on a case-by-case basis."}, {"count": 15, "tags": [], "text": "CellRangeAddressBase#intersect implementation replaced with a java.awt.Rectangle-free implementation in r1749226 as part of bug 56958.\n\nYou should now be able to use the validating version of addMergedRegion on Google App Engines for POI 3.15 beta 2 and beyond.", "is_private": false, "bug_id": 59194, "id": 191809, "time": "2016-06-20T02:31:22Z", "creator": "onealj@apache.org", "creation_time": "2016-06-20T02:31:22Z", "attachment_id": null}]
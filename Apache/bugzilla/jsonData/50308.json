[{"count": 0, "tags": [], "creator": "juriy.bura@gmail.com", "text": "When dispatch() method is called inside the onTimeout() function of the AsyncListener, the exception is thrown:\n\nSEVERE: An exception or error occurred in the container during the request processing\njava.lang.IllegalStateException: Calling [dispatchAsync()] is not valid for a request with Async state [TIMING_OUT]\n\tat org.apache.coyote.AsyncStateMachine.asyncDispatch(AsyncStateMachine.java:220)\n\tat org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:672)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:937)\n\tat org.apache.coyote.Request.action(Request.java:348)\n\tat org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:173)\n\tat org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:135)\n\tat org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:130)\n\tat com.juriy.snowball.SnowServlet$1.onTimeout(SnowServlet.java:23)\n\tat org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:45)\n\tat org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:109)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:270)\n\tat org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:232)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:305)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1526)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:619)\n\n\nThe sample code is below:\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tAsyncContext context = request.startAsync();\n\t\tcontext.setTimeout(3000);\n\t\tcontext.addListener(new AsyncListener() {\n\n\t\t\tpublic void onComplete(AsyncEvent asyncEvent) throws IOException {}\n\n\t\t\tpublic void onTimeout(AsyncEvent asyncEvent) throws IOException {\n\t\t\t\tSystem.out.println(\"HITTING TIMEOUT\");\n\t\t\t\tasyncEvent.getAsyncContext().dispatch();\n\t\t\t}\n\n\t\t\tpublic void onError(AsyncEvent asyncEvent) throws IOException {}\n\n\t\t\tpublic void onStartAsync(AsyncEvent asyncEvent) throws IOException {}\n\t\t});\n}\n\n\nIt looks like the Servlet 3.0 specification allows to do such call, here's the quotation that explicitly states the flow of the timeouted async contexts (page 18):\n\n\"In the event that an asynchronous operation times out, the container must run\nthrough the following steps:\n\u25a0 Invoke the AsyncListener.onTimeout method on all the AsyncListener\ninstances registered with the ServletRequest on which the asynchronous\noperation was initiated.\n\u25a0 If none of the listeners called AsyncContext.complete() or any of the\nAsyncContext.dispatch methods, perform an error dispatch with a status\ncode equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR.\n\u25a0 If no matching error page was found, or the error page did not call\nAsyncContext.complete() or any of the AsyncContext.dispatch\nmethods, the container MUST call AsyncContext.complete()\"\n\nSecond step assumes that the call to dispatch in onTimeout() is allowed.", "id": 141867, "time": "2010-11-20T11:00:06Z", "bug_id": 50308, "creation_time": "2010-11-20T11:00:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 50308, "is_private": false, "id": 141921, "time": "2010-11-22T09:37:26Z", "creator": "markt@apache.org", "creation_time": "2010-11-22T09:37:26Z", "tags": [], "text": "Thanks for the report. This has been fixed in 7.0.x and will be included in 7.0.5 onwards."}]
[{"count": 0, "tags": [], "bug_id": 54636, "attachment_id": 30017, "id": 165639, "time": "2013-03-05T03:33:37Z", "creator": "yujunliang@hotmail.com", "creation_time": "2013-03-05T03:33:37Z", "is_private": false, "text": "Created attachment 30017\nFile to illustrate the bug, please read it with POI and debug the Cell.\n\nPlease see attached spreadsheet, \n\nHere is the content of the spreadsheet,\n\n\n\tA\t\n1\t97.916%\t\n2\t97.916%\t\n\n\nCell A1 was generated by earlier version of jasper library, A2 was typed in by myself,\n \n\nwhen reading it using POI-3.8 3.9, here are the values returned,\n\n \nCell A1 : 0.97915999999999\n\nCell A2 : 0.97916\n\n \nAny idea?"}, {"count": 1, "tags": [], "text": "I could be wrong but do doubt that this is a bug with the API because it is the format applied to the cells that determines what the user sees when viewing the workbook using Excel. Please take a look at the HSSFDataFormatter class as it contains methods that will allow you to use POI to format the cells contents appropriately.", "attachment_id": null, "id": 165644, "creation_time": "2013-03-05T09:39:36Z", "time": "2013-03-05T09:39:36Z", "creator": "markbrdsly@tiscali.co.uk", "bug_id": 54636, "is_private": false}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 165646, "time": "2013-03-05T12:25:54Z", "bug_id": 54636, "creation_time": "2013-03-05T12:25:54Z", "is_private": false, "text": "This is to be expected. Excel stores the values in the file as floating point numbers, and applies formatting rules to control how they look to the end user. You should either use something like DataFormatter to get strings based on the format rules, or specify the number of significant digits when comparing the numbers."}, {"count": 3, "tags": [], "creator": "yujunliang@hotmail.com", "attachment_id": null, "id": 165648, "time": "2013-03-05T12:38:51Z", "bug_id": 54636, "creation_time": "2013-03-05T12:38:51Z", "is_private": false, "text": "Can you explain so I understand why it returns different result?"}, {"count": 4, "tags": [], "bug_id": 54636, "attachment_id": null, "id": 165649, "time": "2013-03-05T12:42:46Z", "creator": "apache@gagravarr.org", "creation_time": "2013-03-05T12:42:46Z", "is_private": false, "text": "I'd strongly suggest you go and read the wikipedia page on floating point numbers and binary representations, and possibly review some tutorials / CS101 talks on the same topic. Come back if after all that you still have queries on how it works!"}, {"count": 5, "tags": [], "bug_id": 54636, "attachment_id": null, "id": 165650, "time": "2013-03-05T12:51:02Z", "creator": "yujunliang@hotmail.com", "creation_time": "2013-03-05T12:51:02Z", "is_private": false, "text": "I understand floating point and I understand it return the first value as 0.97915999999999, what puzzled me was why it doesn't do it for cell A2 which is exactly the same number? Can you explain that part? Have you opened the attachment?"}, {"count": 6, "tags": [], "creator": "yujunliang@hotmail.com", "attachment_id": 30020, "id": 165660, "time": "2013-03-05T19:14:17Z", "bug_id": 54636, "creation_time": "2013-03-05T19:14:17Z", "is_private": false, "text": "Created attachment 30020\nModified file.\n\nI added one more cell A3, value = 97.9162345%, format = \"#,##0.000%\"\n\nSo the file contents becomes,\n\n           A             Display value with focus   Reading with POI\n1     97.916%             97.916%                   0.97915999999999   \n2     97.916%             97.916%                   0.97916 \n3     97.916%             97.9162345%               0.979162345\n\nAny idea why cell A2 is not 0.97915999999999 by POI?"}, {"count": 7, "tags": [], "bug_id": 54636, "attachment_id": null, "is_private": false, "id": 165678, "time": "2013-03-06T15:28:14Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-03-06T15:28:14Z", "text": "Now I understand the question completely - I thought you were asking why POI returned a numeric value for one of these cells rather than a nicely formatted sting similar to the one the user sees when viewing the workbook using Excel. Nick's response should, I think, be accorded greater weight. To my mind, this problem is caused by the difficulties encountered representing a floating point number and I will explain why I do think this.\nThe older binary file format is quite hard to interrogate without using a tool like POI. As a result, I used Excel to convert your test file into OOXML and saved it with the extension.xlsx. These are simply zipped archives of various xml files and it is quite trivial to look at their contents directly.\nOpening the OOXML based Excel archive and drilling down to the xml markup for the first sheet reveals this fragment;\n<sheetData>\n   <row r=\"1\" spans=\"1:3\">\n      <c r=\"A1\" s=\"1\"><v>0.97915999999999992</v></c>\n      <c r=\"B1\" t=\"s\"><v>0</v></c>\n      <c r=\"C1\" s=\"2\"/>\n   </row>\n   <row r=\"2\" spans=\"1:3\">\n      <c r=\"A2\" s=\"2\"><v>0.97916000000000003</v></c>\n      <c r=\"B2\" t=\"s\"><v>1</v></c>\n      <c r=\"C2\" s=\"2\"/>\n   </row>\n      <row r=\"3\" spans=\"1:3\">\n      <c r=\"A3\" s=\"2\"><v>0.97916234499999999</v></c>\n      <c r=\"B3\" t=\"s\"><v>2</v></c>\n   </row>\n</sheetData>\n\nAs you can no dobt intuit, this fragment contains the data for the sheet arranged into rows. Each row contains child elements that define the markup for the cells on the row and the key here are the numerical values contained within the v - value - elements. As you can see, these are all flaoting point values with a significant number of digits following the decimal point but all display, when the sheet is viewed using Excel, exactly as you originally described (I will attach the converted .xlsx workbook for you to see for yourself).\nThis suggests - to me at least - that you are seeing some sort of interaction between the way Excel itself stores floating point values and the way they are handled/represented internally. Consequently, I do not regard this as being a bug within POI as it is simply reporting the values it finds within the workbook files. All in my opinion of course and I could be wrong."}, {"count": 8, "tags": [], "bug_id": 54636, "attachment_id": 30022, "id": 165680, "time": "2013-03-06T15:29:15Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-03-06T15:29:15Z", "is_private": false, "text": "Created attachment 30022\nTest file converted into OOXML format."}, {"count": 9, "tags": [], "bug_id": 54636, "attachment_id": null, "id": 165686, "time": "2013-03-06T16:42:56Z", "creator": "yujunliang@hotmail.com", "creation_time": "2013-03-06T16:42:56Z", "is_private": false, "text": "(In reply to comment #8)\n> Created attachment 30022 [details]\n> Test file converted into OOXML format.\n\nThank you Mark. You did answer my question, as well as taught me to save as xlsx format to examine the older spreadsheet. If I had known that before I wouldn't have created this bug report. \n\nI agree this is not a POI bug. jxl uses native api so it can handle this situation, I understand POI can't do that.\n\nI am new to POI so I didn't understand the subtle difference in the storage, your example well illustrates it for me. Thanks.\n\nI wrote some POI wrapper so it allows me to do this,\n\nworkbook.sheet(0).cell(\"A1\")\nworkbook.sheet(\"sheet1\").cell(\"A2\")\nworkbook.sheet(\"sheet1\").column(\"AT\")\nworkbook.sheet(\"sheet1\").row(\"1\") // row(\"1\") is getRow(0)\n\nand workbook1.equals(workbook2) will compare sheet by sheet, cell by cell. That's how I found out the spreadsheet generated by older jasper library is not same as the one generated by the later jasper which using newer POI. \n\nDo you want to incorporate this API into POI library?"}, {"count": 10, "tags": [], "text": "Using Excel to convert the file from Binary to OOXML is not of course infallible but I do find it useful as it makes it so simple to examine the files contents. Also, I think that the data will be preserved quite well, problems and all, as the process relies entirely upon Excel itself.\n\nOn a similar note, will you have to support both file formats - binary and OOXML? If so, it is possible to accomplish this using a single codebase as there is a common parent class for both the HSSF and XSSF streams. It is becoming more common for developers to write code that uses the classes in the ss.usermodel package - Workbook, Sheet, Row, Cell, etc - safe in the knowledge that it will handle either file format successfully.\n\nFinally, I cannot really comment on including your code into the API. The better place to ask this question would be the dev list.", "is_private": false, "bug_id": 54636, "id": 165708, "time": "2013-03-07T07:27:36Z", "creator": "markbrdsly@tiscali.co.uk", "creation_time": "2013-03-07T07:27:36Z", "attachment_id": null}]
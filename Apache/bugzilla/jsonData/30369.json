[{"count": 0, "tags": [], "creator": "bugzilla.10.rz1911@spamgourmet.com", "text": "Hi, \n\nIf i'am using an URL like \n\nhttp://<server>/<context>/<servlet>/%3Btest\n\nthe request.getPathInfo returns only \"/\" and not \"/;test\" as expected.\nI Think the decoding of %3B to ; causes that the remaning part of the\npathInfo is interpreted as path parameters.\n\nRalf", "id": 61243, "time": "2004-07-28T15:17:15Z", "bug_id": 30369, "creation_time": "2004-07-28T15:17:15Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 30369, "attachment_id": null, "text": "I'm not sure that's wrong.  The HTTP RFC (2616), section 5.1.2 (Request URI), \nstates that \"If the Request-URI is encoded using the \"% HEX HEX\" encoding\n   [42], the origin server MUST decode the Request-URI in order to\n   properly interpret the request.\"\n\nSo the server MUST decode it, we don't have a choice.  Then the Servlet Spec \nsays things after ; are not part of the path info.  You may wish to use \ngetPathTranslated, which the Spec says the container does not decode.", "id": 61279, "time": "2004-07-28T22:00:54Z", "creator": "yoavs@computer.org", "creation_time": "2004-07-28T22:00:54Z", "is_private": false}, {"count": 2, "tags": [], "creator": "Jochen.Schwarze@cit.de", "attachment_id": null, "id": 61480, "time": "2004-08-03T07:41:06Z", "bug_id": 30369, "creation_time": "2004-08-03T07:41:06Z", "is_private": false, "text": "tricky question. rfc 1738, section says:\n\n   Many URL schemes reserve certain characters for a special meaning:\n   their appearance in the scheme-specific part of the URL has a\n   designated semantics. If the character corresponding to an octet is\n   reserved in a scheme, the octet must be encoded.  The characters \";\",\n   \"/\", \"?\", \":\", \"@\", \"=\" and \"&\" are the characters which may be\n   reserved for special meaning within a scheme. No other characters may\n   be reserved within a scheme.\n\nmy interpretation is that the server must surely decode the request-uri (rfc\n2616) but it must do so component by component. ie, first separate the uri\ncomponents at the *un*encoded separator characters like ';' '?' '#' etc., then\ndecode each component by its own: \n\nhttp://server/PATH;jessionid=9999?QUERY#FRAG\n\nPATH, QUERY and FRAG may each contain one or more of the reserved characters ';'\n'?' and '#' in encoded form. (otherwise, there would be no point in encoding\nreserved characters at all.) especially, these characters should be able to\nappear in PATH, because these are all valid characters in unix filenames."}, {"count": 3, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 61481, "time": "2004-08-03T08:36:48Z", "bug_id": 30369, "creation_time": "2004-08-03T08:36:48Z", "is_private": false, "text": "Well, sorry, I do not agree with this (it would likely lead to bad mapping), so\nthis is a WONTFIX."}]
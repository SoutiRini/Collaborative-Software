[{"count": 0, "tags": [], "creator": "simon@newphoric.com", "text": "It would be nice to be able to catch Interrupt / Temrinate signals in the java \ntask and forward them to the launched executable. This would *really* nice if \nit was a parameter on the task. \n\nFor example (this is a hack tho') :\n\nin the org.apache.tools.ant.taskdefs.Java class I changed the execute line to \nbe :\n\nexecute = new Execute(new LogStreamHandler(this, 2, 1), new \nGracefulShutdownWatchdog(1));\n\nwhere the GracefulShutdownWatchdog is as follows:\n\npublic class GracefulShutdownWatchdog extends ExecuteWatchdog {\n    public GracefulShutdownWatchdog(int timeout) {\n      super(timeout);\n    }\n\n    public void start(java.lang.Process process) {\n      final Process p= process;\n      Signal.handle(new Signal(\"INT\"), new SignalHandler () {\n          public void handle(Signal sig) {\n            p.destroy();\n            System.err.println(\"Child process INTERRUPT request recieved\"); \n            try {\n              p.waitFor();\n            }\n            catch(InterruptedException exc) {\n              System.err.println(\"Interrupted whilst waiting for Running \nprocess to die gracefully\");\n            }\n          }\n        });\n    }\n\n    public void stop() {\n      myWatching= false;\n      myKilled= true;\n    }\n\n    public void run() {\n    }\n\n    public boolean isWatching() {\n      return myWatching;\n    }\n    \n    public boolean killedProcess() {\n      return myKilled;\n    }\n\n    private boolean myWatching= false;\n    private boolean myKilled= false;\n    private Process myProcess;\n  }\n\nThis is only an example of what I was trying to achieve - not a recommendation \nfro the actual implementation. Part of the problem is that you cannot subclass \nthe Java task to override the implementation of run(String[]) and you cannot \nget to the CommandLineJava memeber of the Java class to override the call in \nexecuteJava. A lot of the problem stems from the fact that it seems (to me \nanyway) virtually impossible to subclass org.apache.tools.ant.taskdefs.Java and \nget hold of the java.lang.Process created in the run(String[]) method. This \nmakes it very difficult to pass on the signals to the forked JVM. My method \nabove is to illustrate what I am trying to do, obviously there are better ways! \n(Apologies for abuse of the Watchdog :)", "id": 15622, "time": "2002-05-07T12:53:23Z", "bug_id": 8866, "creation_time": "2002-05-07T12:53:23Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "rodney.cheater@dsto.defence.gov.au", "text": "I don't understand why the basedir is taken relative to the location of the \nbuild script. Who cares where the build script is?\n\nThe work around, of course, is to set a property ${base} to ${user.dir} and \nprefix all directory references with ${base}/ but it kinda defeats the purpose \nof basedir.", "id": 46695, "time": "2003-11-03T21:55:52Z", "bug_id": 24366, "creation_time": "2003-11-03T21:55:52Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 24366, "attachment_id": null, "id": 46697, "time": "2003-11-03T22:11:10Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-11-03T22:11:10Z", "is_private": false, "text": "Most projects using Ant put the build file at the top of the project, and refer \nrelatively to basedir for find project-related things, like the src directory. \nThis makes the build free of any absolute path, and thus location independent.\n\nIf you want to use ${user.dir}, then prefix all your properties with it.\n\nbasedir will always point to the directory the build script is in, because it's \nvery convenient, and because it's what all Ant users expect. --DD"}, {"count": 2, "tags": [], "bug_id": 24366, "attachment_id": null, "text": "On the contrary, this behaviour makes the build script location *dependent*, as \nyou cannot use -buildfile to choose an arbitary location for the build script. \nThe build script location must always be in the same location relative to the \nproject (e.g. the project root). In using shell commands, it is customary to \nspecify everything relative to the user's current working directory, but ant \nmakes up its own rules in this regard.", "id": 46700, "time": "2003-11-03T22:28:34Z", "creator": "rodney.cheater@dsto.defence.gov.au", "creation_time": "2003-11-03T22:28:34Z", "is_private": false}, {"count": 3, "tags": [], "creator": "ddevienne@lgc.com", "attachment_id": null, "id": 46701, "time": "2003-11-03T22:33:32Z", "bug_id": 24366, "creation_time": "2003-11-03T22:33:32Z", "is_private": false, "text": "Sounds like you have this all figured out, and the Ant community at large has \nbeen wrong all along then... Oh well, I can live with that ;-)\n\nArbitrary location for a build file??? Hmmm, do you work with source control? \nOnce under source control, files are not in an arbitrary location.\n\nAnyways, that's the way Ant works, and it's likely that will stay this way. We \nshould all accept the fact, and move on. --DD"}, {"count": 4, "tags": [], "bug_id": 24366, "attachment_id": null, "text": "I think I see what you are trying to do -make a reusable build file that you can\ninvoke from anywhere. If that is what you want, you are going to have to prefix\nall your paths, or look at (2) below.\n\nNow, here is why the current policy generally makes sense.\n\n1. using <ant> to invoke an existing project in a subdir; you dont want it to\nwork on the parent dir, but on its sub directory -without editing the build file\nat all.\n\n2. using <ant> for reusable code, just set the dir attr on the task and you can\ndirect it anywhere. \n\n3. ant -f  will find a build file up the tree. This is useful if you are deep in\nthe source tree; ant -f build.xml will find the containing build file and exec\nit from its base dir.\n\n4. IDE invocation - the current dir is often where the IDE started, not where\nthe project.\n\nMarking as Wontfix as (a) I dont believe the arguments make sense apart from one\nspecialised case, and (b) I dont want to break every single build file on the\nplanet. \n\nOn the issue of ant being incompatible with shell scripts, well, ant is not a\nscripting language. It is a means of declaring what needs to be done to build a\nsoftware project. The more you stray from its core functionality, the more its\ndesign decisions make less sense. But by and large, they have some rationality\nbehind them, apart from the odd exception.\n\nOne thing that may make sense would be a new way of invoking build files, one\nthat sets the base dir to the current dir. That would just be another command\nline option and would break nothing. Please, feel free to implement this if you\nthink your needs are broad enough to merit it. ", "id": 46706, "time": "2003-11-03T23:49:07Z", "creator": "stevel@apache.org", "creation_time": "2003-11-03T23:49:07Z", "is_private": false}]
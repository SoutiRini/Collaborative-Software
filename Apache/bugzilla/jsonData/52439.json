[{"count": 0, "attachment_id": null, "bug_id": 52439, "text": "Any syntax error in httpd.conf is treated as fatal, causing httpd to refuse to startup and print an error message to help the sysop identify the error.\n\nErrors in a .htaccess file are treated as fatal to the request, causing a 500 error.  This is less useful, and in some cases it may be more appropriate to ignore .htaccess syntax errors and merely log a warning.  This alternative is particularly useful where a sysop wants to support users dropping in .htaccess files packaged with some-application, which might cause unnecessary errors due to conflict with AllowOverride settings, or more rarely a directive from a module that's not included.\n\nIt should be possible for a sysop to configure httpd to treat errors in .htaccess as non-fatal warnings, and simply ignore (but log) the offending directives.", "id": 152630, "time": "2012-01-09T02:50:46Z", "creator": "nick@webthing.com", "creation_time": "2012-01-09T02:50:46Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "nd@perlig.de", "text": "That can lead to security related problems (e.g. if the .htaccess contains some authentication or otherwise restrictive directives). Since we cannot know that - 500 is the safe fallback then.", "id": 152633, "time": "2012-01-09T15:09:06Z", "bug_id": 52439, "creation_time": "2012-01-09T15:09:06Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "nick@webthing.com", "is_private": false, "id": 152634, "time": "2012-01-09T15:24:10Z", "bug_id": 52439, "creation_time": "2012-01-09T15:24:10Z", "tags": [], "text": "That's for the server admin to determine.  The current situation can also lead to security issues where AllowOverride.\n\nPosting an explanation from someone who runs hosting and is concerned about Options:\n\n- We currently disallow FollowSymLinks due to security reasons\n- We do allow SymLinksIfOwnerMatch which is enough for most CMS and other systems used on our platform to work\n- Many systems ship with .htaccess files containing \"Options +FollowSymLinks\" or \"Options None\" causing errors"}, {"count": 3, "attachment_id": null, "bug_id": 52439, "is_private": false, "id": 152635, "time": "2012-01-09T15:35:50Z", "creator": "nick@webthing.com", "creation_time": "2012-01-09T15:35:50Z", "tags": [], "text": "I also committed a trunk patch for this in r1229021 ."}, {"count": 4, "tags": [], "bug_id": 52439, "attachment_id": null, "id": 152647, "creation_time": "2012-01-09T19:27:15Z", "time": "2012-01-09T19:27:15Z", "creator": "nd@perlig.de", "text": "Yes, I know, I was bitten by such an admin failure already (as someone who used .htaccess), hence my statement. You've just opened another vector for that.\n\nGiven your explanation - I'm not sure what problem the patch is actually going to solve. The user now won't even get an error [1] and is wondering why it doesn't work.\n\n(Oh there are even docs somewhere suggesting to write garbage into the .htaccess file in order to check if the files are read at all).\n\n[1] Yes, especially in bigger hosting environments, the user doesn't have access to the error log.\n\nWell, *shrug*.", "is_private": false}, {"count": 5, "tags": [], "bug_id": 52439, "attachment_id": null, "is_private": false, "id": 154397, "time": "2012-03-01T09:34:43Z", "creator": "jark@10g.pl", "creation_time": "2012-03-01T09:34:43Z", "text": "Hello Kew,\n\nWe've just upgraded to 2.4.1 to test your patch.\n\nYour patch doesn't resolve issue given by you (from someone who runs hosting).\nI run hosting too. I've such config in users' virtualhosts:\n\n<Directory /home/someone/public_html>\nAllowOverride Nonfatal=All AuthConfig FileInfo Indexes Limit Options=Indexes\nOptions -Includes -Indexes +ExecCGI +SymLinksIfOwnerMatch\n</Directory>\n\n\nAnd now just try to give some samples to /home/someone/public_html/.htaccess\n\n\nOptionz +FollowSymlinks or sth like that doesn't show any error (good, patch is working)\n\n\nOptions +FollowSymlinks still gives me internal server error 500 \n\n\nSo IMHO patch is useless in the situation you quoted or I use it in the wrong way."}, {"count": 6, "attachment_id": 30775, "creator": "apache-b6e@deemzed.uk", "is_private": false, "id": 169765, "time": "2013-08-28T12:43:13Z", "bug_id": 52439, "creation_time": "2013-08-28T12:43:13Z", "tags": [], "text": "Created attachment 30775\nHonour nonfatal overrides in Options\n\nset_options needs to honour the nonfatal flags - suggest something like this, which would satisfy the use case given."}, {"count": 7, "tags": [], "bug_id": 52439, "attachment_id": null, "id": 185804, "creation_time": "2015-10-19T22:36:47Z", "time": "2015-10-19T22:36:47Z", "creator": "jarrod@makin.co", "text": "Tried the patch today, confirmed it works, far better than having websites serve Internal Server Errors due to clashing options.\n\nAlso, since documentation states that this IS the way the server behaves, the server should behave this way, or the documentation should be altered.", "is_private": false}, {"text": "We have also been testing the patch in our environment and I can confirm it working.\nIs there an update on this getting merged into the stable release?", "tags": [], "bug_id": 52439, "attachment_id": null, "count": 8, "id": 190643, "time": "2016-04-29T14:12:00Z", "creator": "apache.tracker@hosting.de", "creation_time": "2016-04-29T14:12:00Z", "is_private": false}, {"count": 9, "attachment_id": 34093, "bug_id": 52439, "text": "Created attachment 34093\nHonour nonfatal on Options All specific case", "id": 192806, "time": "2016-08-02T12:24:19Z", "creator": "almamu@almamu.com", "creation_time": "2016-08-02T12:24:19Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "almamu@almamu.com", "attachment_id": null, "id": 192807, "time": "2016-08-02T12:28:57Z", "bug_id": 52439, "creation_time": "2016-08-02T12:28:57Z", "is_private": false, "text": "There's an edge case with the Dave's patch involving Options All and SymLinksIfOwnerMatch\n\nIf you add Options All to the .htaccess and have any rewrite rule and/or symbolic links on the filesystem apache will stop serving those files and send status 500 (and remove every option already enabled in server configuration).\n\nThis does look like a bug, but there is no specific documentation on how the server should behave in such situations, so the patch I've attached enables everything that is not disabled by a prior AllowOverride.\n\nP.S: Sorry for the double post, didn't notice the file was being added without any comment at all."}, {"count": 11, "attachment_id": 34093, "creator": "almamu@almamu.com", "is_private": false, "id": 192856, "time": "2016-08-03T11:07:14Z", "bug_id": 52439, "creation_time": "2016-08-03T11:07:14Z", "tags": [], "text": "Comment on attachment 34093\nHonour nonfatal on Options All specific case\n\n--- httpd/server/core.c\t2016-06-14 01:08:08.000000000 +0200\n+++ httpd/server/core.c\t2016-08-03 13:00:56.472620572 +0200\n@@ -1971,13 +1971,38 @@\n             all_none = 1;\n         }\n         else {\n-            return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n+            if (cmd->override & NONFATAL_UNKNOWN) {\n+                opt = 0;\n+                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, \"Unknown Option %s in line %d of %s.\",\n+                    w, cmd->directive->line_num, cmd->directive->filename);\n+            } else {\n+                return apr_pstrcat(cmd->pool, \"Illegal option \", w, NULL);\n+            }\n         }\n \n         if ( (cmd->override_opts & opt) != opt ) {\n-            return apr_pstrcat(cmd->pool, \"Option \", w, \" not allowed here\", NULL);\n+            if (cmd->override & NONFATAL_OVERRIDE) {\n+                ap_log_error(APLOG_MARK, APLOG_WARNING, 0, cmd->server, \"Option %s not allowed in line %d of %s.\",\n+                    w, cmd->directive->line_num, cmd->directive->filename);\n+\n+                /* special case for Options All, we might want to enable every possible (and allowed) parameter */\n+                if (opt != OPT_ALL) {\n+                    first = 0;\n+                    continue;\n+                } else {\n+                    /*\n+                     * OPT_ALL doesnt include OPT_SYM_OWNER but its important to enable that one too\n+                     * also take in mind that Options All does not have + or - so it'll be added to the already enabled options\n+                     * this means it'll enable everything that is allowed to be overriden\n+                     */\n+                    opt = (OPT_ALL | OPT_SYM_OWNER) & cmd->override_opts;\n+                }\n+            } else {\n+                return apr_pstrcat(cmd->pool, \"Option \", w, \" not allowed here\", NULL);\n+            }\n         }\n-        else if (action == '-') {\n+\n+        if (action == '-') {\n             /* we ensure the invariant (d->opts_add & d->opts_remove) == 0 */\n             d->opts_remove |= opt;\n             d->opts_add &= ~opt;"}, {"count": 12, "attachment_id": 34099, "creator": "almamu@almamu.com", "is_private": false, "id": 192857, "time": "2016-08-03T11:15:42Z", "bug_id": 52439, "creation_time": "2016-08-03T11:15:42Z", "tags": [], "text": "Created attachment 34099\nHonour nonfatal unknown for options all\n\nIf an option is not correct it does nothing. Also fixes a small mistake in attachment 34093 which, although it was working, wasn't correct at all."}]
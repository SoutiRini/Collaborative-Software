[{"count": 0, "tags": [], "bug_id": 6973, "attachment_id": null, "text": "One of the servlets uses a custom class loader that occasionally receives class \nload requests which it forwards to the parent object using the super.loadClass\n(name,resolve) method.\n\nThis loader fails to load classes using super.loadClass(name,resolve) on 4.0.3 \nwhen the class to be loaded resides in a Jar that is under the /lib directory \nfor the servlet. The code works fine in Tomcat 3.2.2!", "id": 11560, "time": "2002-03-08T05:47:03Z", "creator": "mpetres@netcom.ca", "creation_time": "2002-03-08T05:47:03Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 6973, "attachment_id": null, "is_private": false, "id": 11561, "time": "2002-03-08T05:59:49Z", "creator": "remm@apache.org", "creation_time": "2002-03-08T05:59:49Z", "text": "I doubt this is the case, as Jasper works like that (it creates a classloader \nto load the compiled servlets, and its parent is the webapp classloader). There \nmust be some obvious problem which causes this to fail here. Is the right \nclassloader set as the parent (it should be an instance of the \nWebappClassLoader class)."}, {"count": 2, "tags": [], "bug_id": 6973, "text": "A skeptic ... that's good, it never fails to make you feel good to report \nproblems only to be told that well they are imaginary... but seriously...\n\nThere are no changes to the classes. All we did was to upgrade to Tomcat 4.0.3. \nThe same code base runs without problems on the other server which is still on \nTomcat 2.3.3.\n\nRe WebappClassLoader as the parent of custom class loaders... This is not a \nfeasable proposition. Consider that the servlet may be using third party \nlibraries already packaged into JARs which in their turn may define custom \nclass loaders. Since one has no access to the code... no way to ensure that all \ncustom class loaders use WebappClassLoader as their parent! The servlet \ncontainer should support java class loaders without adding on specific \nrequirements!!!", "id": 11588, "time": "2002-03-08T17:43:44Z", "creator": "mpetres@netcom.ca", "creation_time": "2002-03-08T17:43:44Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 6973, "text": "Two points:\n- Creating CL and/or forking threads both violate the J2EE model, so doing\neither of these can create problems. So no, the container doesn't have to\n\"support java class loaders without adding on specific requirements\".\n- The WebappClassLoader is the context class loader for the thread which invokes\nyour servlet. If it's not the parent of your new CL, it won't work, because the\nJARs of your webapp are only present in this CL repositories.\n\nSo overall, I would say this \"WORKSFORME\" if the CL creation is done properly\n(please attach some sample code if you think something is broken, becasue\notherwise, it's hard to speculate on what your code is doing).", "id": 11590, "time": "2002-03-08T18:04:33Z", "creator": "remm@apache.org", "creation_time": "2002-03-08T18:04:33Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "craig.mcclanahan@sun.com", "text": "Three more points:\n\n- You might also be suffering from a recently fixed bug that happens\n  when JAR files are missing the intervening directory levels.  To see\n  if this is happening to you, try a simple servlet that loads the class\n  directly.  This bug is fixed in 4.0.4-b1.\n\n- Third party code that creates its own class loaders also need to\n  set the parent class loader when they do so.  If they set the parent\n  to the webapp class loader, then the /WEB-INF/classes and /WEB-INF/lib\n  classes will be visible.  If they don't then they won't -- and that\n  means that your class library is broken.  The fact that it worked in\n  Tomcat 3.2.2 means that you probably had the classes on the system\n  classpath instead of (or in addition to) the webapp, and/or you just\n  got lucky with a non-specified feature of Tomcat 3.2.2 that just happened\n  to be changed.in Tomcat 4.  Relying on such behaviors is always dangerous.\n  Diagnosing why you are getting class not found exceptions (unless it's\n  caused by the bug referenced in the previous point) is not possible without\n  a reproducible test case.\n\n- In Servlet 2.3, the webapp class loader is required to be made visible\n  as the Thread context class loader (to the thread running the request).\n  This is for precisely the purpose of making the webapp's own classes\n  available to third party code.  If you start your own threads, though,\n  it's your responsibility to maintain a reference to that class loader\n  if you need it -- the container only does this for its own threads.", "count": 4, "id": 11591, "time": "2002-03-08T18:19:45Z", "bug_id": 6973, "creation_time": "2002-03-08T18:19:45Z", "is_private": false}, {"count": 5, "text": "Will pass on the tips to the library developer...\n\nThanx for the quick response...", "bug_id": 6973, "is_private": false, "id": 11593, "time": "2002-03-08T20:55:41Z", "creator": "mpetres@netcom.ca", "creation_time": "2002-03-08T20:55:41Z", "tags": [], "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 36814, "text": "There is a problem to convert the incoming request of a POST request to the\nright character encoding. Mostly the browsers do not send the correct request\nheader so Tomcat falls back to the default encoding which is ISO-8859-1. But in\na multi language environment (e.g. mixture of english, european, chinese, etc.\nlanguages) ISO-8859-1 is not sufficient and UTF-8 is more recommended.\n\nTo tell Tomcat to use e.g. UTF-8 as the default encoding I suggest to change the\nsource code of Request.java in the package org.apache.catalina.connector so that\nthe encoding is read from a context parameter:\n\n/**\n * Return the character encoding for this Request.\n */\npublic String getCharacterEncoding() {\n  String enc = coyoteRequest.getCharacterEncoding();\n  if (enc == null) {\n    return getDefaultPostEncoding();\n  }\n  return enc;\n}\n\n/**\n * Get the default encoding for parameters of requests with post method.\n */\nprivate String getDefaultPostEncoding() {\n  return context.getServletContext().getInitParameter(\"defaultPostEncoding\");\n}\n\n\nTo use this with UTF-8 encoding you have to add this to the <Context> of your\nwebapp:\n\n<Parameter name=\"defaultPostEncoding\" value=\"UTF-8\"\n           override=\"false\"/>\n\n\nWhat do you think? Is this a good enhancement for Tomcat? It would be great if\nyou could add this to the base code of Tomcat. Probably many Tomcat users would\nbe glad to have it, wouldn't they?\n\nWith regards\n\nUdo Walker", "id": 80478, "time": "2005-09-26T15:18:07Z", "creator": "Udo.Walker@abas.de", "creation_time": "2005-09-26T15:18:07Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 36814, "attachment_id": null, "text": "The spec declares the default to be ISO-8859-1. Overriding is as easy as using\nServletRequest.setCharacterEncoding() with a  servlet filter. (Or similar)\n\nI'm not convinced of the value of adding another attribute to the connector.\n", "id": 80479, "time": "2005-09-26T15:25:15Z", "creator": "funkman@joedog.org", "creation_time": "2005-09-26T15:25:15Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 36814, "text": "it always comes down to what the servlet specification says a container \nimplementation should do, what developers expect container implementations to \ndo and how they should behave, and what developers often get confused about.\n\ncharacter encoding seems to be one of those things that many developers are \ngetting confused about, and this issue in particular seems to come about quite \noften. i suppose as far as a developer is concerned whatever data they send to \nthe server should be maintained in that way. so if arabic is sent via a post \nrunning on tomcat, is it acceptable for the developer to have to understand \nthat tomcat runs in a charset that is not universal and to have to seek a \nfilter or write their own filter to change this?\n\npersonally, i believe encoding falls into the same kind of category as other \nconfiguration elements like databases, jndi environment vars.\n\nimo the container should help out the developer with this type of \nfunctionality, if not by configuration, then by providing default configurable \nfilters across web applications. \n\njust my opinion.", "id": 80503, "time": "2005-09-27T13:32:02Z", "creator": "allistair.crossley@qas.com", "creation_time": "2005-09-27T13:32:02Z", "is_private": false, "attachment_id": null}, {"text": "Maybe I am too silly to do it, but for my test case it does not work setting the\nencoding with a filter. I did this:\n\nin the web.xml as the first filter in the list:\n\n <filter>\n    <filter-name>Set Character Encoding</filter-name>\n    <filter-class>package.SetCharacterEncodingFilter</filter-class>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n  </filter>\n\nThis is the filter which is packaged as example with Tomcat.\n\nIf I do now a post with UTF-8 characters all submitted UTF-8 characters are\ncorrupted. \n\nWhat am I doing wrong?\n\n\nThere is also a problem with valves. If you read a parameter from the request\ninside a valve then the character encoding is automatically set to the default\n(spec) value which is ISO-8859-1. Later you can not change this in a filter anymore.\n\n(If I use my patch instead, everything is fine, no matter where I try to read\nparameters from the request.)\n\nWith regards,\nUdo", "tags": [], "bug_id": 36814, "attachment_id": null, "count": 3, "id": 80506, "time": "2005-09-27T15:21:09Z", "creator": "Udo.Walker@abas.de", "creation_time": "2005-09-27T15:21:09Z", "is_private": false}, {"count": 4, "tags": [], "creator": "allistair.crossley@qas.com", "attachment_id": null, "text": "don't forget to add a filter mapping, this is ours, you may need a URL pattern \nmatch.\n\n\t<filter-mapping>\n\t \t<filter-name>requestCharacterEncodingFilter</filter-name>\n\t \t<servlet-name>springFrontController</servlet-name>\n\t</filter-mapping>\n\n", "id": 80507, "time": "2005-09-27T15:25:52Z", "bug_id": 36814, "creation_time": "2005-09-27T15:25:52Z", "is_private": false}, {"text": "I also have the filter mapping like this:\n\n <filter-mapping>\n    <filter-name>Set Character Encoding</filter-name>\n    <servlet-name>action</servlet-name>\n  </filter-mapping>\n\nbut it does not work.\n\nIn the config file in the <Context> I have this valve included:\n\n    <Valve className=\"org.apache.catalina.valves.AccessLogValve\"\n           directory=\"logs\"  prefix=\"localhost_access_ewi_log.\" suffix=\".txt\"\n           resolveHost=\"false\" pattern=\"common\"/>\n\nIn the comment it says, that all request accesses are logged. Maybe this one\nsets the character encoding already to the wrong value? I mean not directly the\nvalve but Tomcat when the request is accessed.\n\n\n", "tags": [], "bug_id": 36814, "attachment_id": null, "count": 5, "id": 80509, "time": "2005-09-27T15:45:36Z", "creator": "Udo.Walker@abas.de", "creation_time": "2005-09-27T15:45:36Z", "is_private": false}]
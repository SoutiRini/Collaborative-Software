[{"count": 0, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "is_private": false, "id": 171822, "time": "2013-12-18T21:56:07Z", "bug_id": 55907, "creation_time": "2013-12-18T21:56:07Z", "text": "The loop happens during poller thread startup. The following shutdown hangs due to waiting for a native lock that the poller holds. The looping is not reproducible, it was observed during one of many runs of TestAsyncContextImpl. \n\ntcnative version used was 1.1.29 plus apr 1.4.8, platform Solaris 10 Sparc, JDK 1.7.0_45 32 Bits.\n\nI add the data to this issue primarily such that we can come back here if the problem gets observed in the wild.\n\nIn the logs the incomplete poller startup results in the message\n\n[junit] 18-Dec-2013 20:50:28.194 SEVERE [http-apr-127.0.0.1-auto-27-Poller] org.apache.tomcat.util.net.AprEndpoint$Poller.run Poller failed with error [9] : [Bad file number]\n\nabout a second after the loop starts.\n\nThe looping thread is:\n\n\"http-apr-127.0.0.1-auto-27-Poller\" daemon prio=3 tid=0x007c9400 nid=0x134 runnable [0xb407f000]\n   java.lang.Thread.State: RUNNABLE\n  apr_palloc (38a540, 28, 58a258, 28000, 42c8a0, 42c8a0) + 29c\n  impl_pollset_create (44c918, 2000, 58a258, 44c950, 20000, 44c918) + b8\n  apr_pollset_create_ex (b407f78c, 2000, 58a258, 2, 3, b51d4ec4) + c8\n  Java_org_apache_tomcat_jni_Poll_create (7c9530, b407f78c, 2000, 2, 58a258, 0) + 38\n        at org.apache.tomcat.jni.Poll.create(Native Method)\n        at org.apache.tomcat.util.net.AprEndpoint.allocatePoller(AprEndpoint.java:804)\n        at org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1969)\n        at java.lang.Thread.run(Thread.java:744)\n\n\nThe main thread later blocks during shutdown:\n\n\n\"main\" prio=3 tid=0x00029800 nid=0x2 runnable [0xfdf7e000]\n   java.lang.Thread.State: RUNNABLE\n  lwp_park (0, 0, 0)\n  apr_pool_destroy (75c680, fdf7e958, 0, 75c680, fdf7e9d4, 372d08) + c4\n        at org.apache.tomcat.jni.Pool.destroy(Native Method)\n        at org.apache.tomcat.util.net.AprEndpoint$Sendfile.destroy(AprEndpoint.java:2098)\n        at org.apache.tomcat.util.net.AprEndpoint.stopInternal(AprEndpoint.java:704)\n        at org.apache.tomcat.util.net.AbstractEndpoint.stop(AbstractEndpoint.java:740)\n        at org.apache.coyote.AbstractProtocol.stop(AbstractProtocol.java:515)\n        at org.apache.catalina.connector.Connector.stopInternal(Connector.java:1014)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n        - locked <0xe69c1760> (a org.apache.catalina.connector.Connector)\n        at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:516)\n        - locked <0xe69ca618> (a java.lang.Object)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n        - locked <0xe69ca570> (a org.apache.catalina.core.StandardService)\n        at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:766)\n        at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n        - locked <0xe69c9ec8> (a org.apache.catalina.core.StandardServer)\n        at org.apache.catalina.startup.Tomcat.stop(Tomcat.java:350)\n        at org.apache.catalina.startup.TomcatBaseTest.tearDown(TomcatBaseTest.java:163)\n        at sun.reflect.GeneratedMethodAccessor35.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)\n        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n        at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:523)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1063)\n        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:914)\n\n\nDebugger says:\n\n#0  allocator_alloc (in_size=163840, allocator=0x38a540) at memory/unix/apr_pools.c:315\n        node = 0x42c8a0\n        ref = 0x42c8a0\n        max_index = <optimized out>\n        i = <optimized out>\n        size = 167936\n        index = 40\n#1  apr_palloc (pool=pool@entry=0x58a258, in_size=in_size@entry=163840) at memory/unix/apr_pools.c:696\n        active = 0x42c8a0\n        node = <optimized out>\n        mem = <optimized out>\n        size = 163840\n        free_index = <optimized out>\n#2  0xb51bccc4 in impl_pollset_create (pollset=0x44c918, size=8192, p=0x58a258, flags=<optimized out>) at poll/unix/port.c:199\nNo locals.\n#3  0xb51bc5a0 in apr_pollset_create_ex (ret_pollset=0xb407f78c, size=8192, p=0x58a258, flags=2, method=APR_POLLSET_PORT) at poll/unix/pollset.c:251\n        rv = <optimized out>\n        pollset = 0x44c918\n        provider = 0xb51d4ec4\n#4  0xb53e1330 in Java_org_apache_tomcat_jni_Poll_create (e=0x7c9530, o=<optimized out>, size=8192, pool=<optimized out>, flags=<optimized out>, default_timeout=-1000)\n    at src/poll.c:126\n        R = 8192\n        p = 0x58a258\n        pollset = <optimized out>\n        tps = 0x0\n        f = 2\n\n\nThe loop happens in memory/unix/apr_pools.c:315\n\n        while ((node = *ref) != NULL && index > node->index)\n            ref = &node->next;\n\nbecause node->next is the same as node:\n\n(gdb) print node\n$4 = (apr_memnode_t *) 0x42c8a0\n(gdb) print *node\n$3 = {next = 0x42c8a0, ref = 0x42c8a0, index = 32, free_index = 0, first_avail = 0x44c8b8 \"\", endp = 0x44d8a0 \"\"}\n\nThe root cause will have happened earlier.\n\nSome additional data:\n\n(gdb) print *allocator\n$5 = {max_index = 1, max_free_index = 0, current_free_index = 0, mutex = 0x372d08, owner = 0x372cc8, free = {0x49c8f8, 0x58a240, 0x0 <repeats 18 times>}}\n\nThe associated pool hierarchy:\n\n(gdb) print pool\n$15 = (apr_pool_t *) 0x58a258\n\n(gdb) print *pool\n$6 = {parent = 0x179920, child = 0x0, sibling = 0x0, ref = 0x75c688, cleanups = 0x0, free_cleanups = 0x0, allocator = 0x38a540, subprocesses = 0x0, abort_fn = 0,\n  user_data = 0x0, tag = 0x0, active = 0x42c8a0, self = 0x58a240, self_first_avail = 0x58a298 \"\", pre_cleanups = 0x0}\n\n(gdb) print *pool->parent\n$7 = {parent = 0x790028, child = 0x75c680, sibling = 0x0, ref = 0x180250, cleanups = 0x0, free_cleanups = 0x0, allocator = 0x38a540, subprocesses = 0x0, abort_fn = 0,\n  user_data = 0x0, tag = 0x0, active = 0x179908, self = 0x179908, self_first_avail = 0x179960 \"\", pre_cleanups = 0x0}\n\n(gdb) print *pool->parent->parent\n$8 = {parent = 0x409898, child = 0x180248, sibling = 0x0, ref = 0x40989c, cleanups = 0x0, free_cleanups = 0x0, allocator = 0x38a540, subprocesses = 0x0, abort_fn = 0,\n  user_data = 0x0, tag = 0x0, active = 0x790010, self = 0x790010, self_first_avail = 0x790068 \"\", pre_cleanups = 0x0}\n\n(gdb) print *pool->parent->parent->parent\n$9 = {parent = 0x372cc8, child = 0x790028, sibling = 0x7eac40, ref = 0x372ccc, cleanups = 0x40a150, free_cleanups = 0x0, allocator = 0x38a540, subprocesses = 0x0,\n  abort_fn = 0, user_data = 0x0, tag = 0x0, active = 0x409880, self = 0x409880, self_first_avail = 0x4098d8 \"/dev/urandom\", pre_cleanups = 0x0}\n\n(gdb) print *pool->parent->parent->parent->parent\n$10 = {parent = 0x0, child = 0x409898, sibling = 0x0, ref = 0x0, cleanups = 0x372d28, free_cleanups = 0x0, allocator = 0x38a540, subprocesses = 0x0, abort_fn = 0,\n  user_data = 0x0, tag = 0xb51c2808 \"apr_global_pool\", active = 0x372cb0, self = 0x372cb0, self_first_avail = 0x372d08 \"\", pre_cleanups = 0x0}\n\n\nThe blocked main thread tries to acquire the lock of the allocator that the other thread loops in (and has the lock acquired)."}]
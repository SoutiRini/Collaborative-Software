[{"count": 0, "tags": [], "creator": "nicolas.gregoire@agarri.fr", "attachment_id": 29114, "text": "Created attachment 29114\nMalicious SVG file\n\nDuring visualization with Squiggle or rasterization via the CLI tool, XML external entities defined in the DTD are dereferenced and the content of the target file is included in the output.\n\nThe impact of this vulnerability range form denial of service to file disclosure. Under Windows, it can also be used to steal LM/NTLM hashes.\n\nFor some additional information about XXE attacks, please refer to http://cwe.mitre.org/data/definitions/827.html\n\nHow to reproduce: \n$> rasterizer xxe.svg -d xxe.png", "id": 160905, "time": "2012-07-25T16:32:36Z", "bug_id": 53603, "creation_time": "2012-07-25T16:32:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53603, "is_private": false, "text": "Created attachment 29115\nResult of the rasterization of xxe.svg", "id": 160906, "time": "2012-07-25T16:33:09Z", "creator": "nicolas.gregoire@agarri.fr", "creation_time": "2012-07-25T16:33:09Z", "attachment_id": 29115}, {"count": 2, "tags": [], "creator": "deweese@apache.org", "attachment_id": null, "is_private": false, "id": 160930, "time": "2012-07-27T00:17:28Z", "bug_id": 53603, "creation_time": "2012-07-27T00:17:28Z", "text": "I don't want to dismiss this out of hand but I'm not sure I agree that a vulnerability really exists.\n\nGiven that Batik is more a toolkit than a finished product a lot more of the responsibility for avoiding these issues falls on the users rather than the library.  This more or less required given that it's impossible for us to know ahead of time what parts of the system the batik libraries should be allowed to access or not.\n\nPlease note that xxe.svg will fail if you use squiggle _and_ you fetch 'xxe.svg' from a server (I even tried variants like replacing etc/passwd with file:///etc/passwd).\n\nPeople using the rasterizer to rasterize random content from the web should be more careful.  They can use Java's build in support for policy files to restrict access to the file system.  I don't think it would be appropriate for the toolkit to restrict this ahead of time since many legitimate uses may need fairly wide access to the filesystem.  I checked and browsers seem to block all access to the file system when loading a file from the disk even if it's co-located.  That may make sense for a browser but I think would block many legitimate uses of Batik."}, {"count": 3, "tags": [], "bug_id": 53603, "text": "I agree with Thomas. In a short experiment, I was able to use XInclude (implemented by Apache Xerces-J) to force the same effect. Batik does not even know about XInclude since it's a parser-level feature.\n\nHowever, it might be a good idea to write some documentation about it so users are reminded to secure their applications.", "id": 160932, "time": "2012-07-27T10:15:10Z", "creator": "jeremias@apache.org", "creation_time": "2012-07-27T10:15:10Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "helder.magalhaes@gmail.com", "attachment_id": null, "text": "(In reply to comment #3)\n> I agree with Thomas.\n\nI agree with Thomas and Jeremias as well.\n\n\n> However, it might be a good idea to write some documentation about it so\n> users are reminded to secure their applications.\n\nDecreasing severity and moving this to the \"Web Site\" component, more in the sense of \"Documentation\" (which doesn't exist); \"javadoc\" alone doesn't feel right as well: I'd say that these sort of reminders belong to a higher level than Javadoc, although probably something might be done in code documentation as well.\n\n\n(In reply to comment #0)\n> During visualization with Squiggle or rasterization via the CLI tool, XML\n> external entities defined in the DTD are dereferenced and the content of the\n> target file is included in the output.\n> \n> The impact of this vulnerability range form denial of service to file\n> disclosure. Under Windows, it can also be used to steal LM/NTLM hashes.\n\nFirst of all, thanks for the report!\n\nThomas has provided a good insight about this potential issue in comment #2. Based in the feedback and in a few performed tests, I'd say the example provided is roughly equivalent to an ECMAScript getURL fetching the \"/etc/passwd\" (using the \"file\" protocol).\n\nIf you still believe this can be considered a security issue then please adjust the priority accordingly. In any case, elaborating a bit longer would help - for further understanding what can be involved or (simply) to serve as base for the documentation improvements.", "id": 160975, "time": "2012-07-29T01:09:55Z", "bug_id": 53603, "creation_time": "2012-07-29T01:09:55Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 53603, "attachment_id": null, "id": 160998, "time": "2012-07-30T09:39:12Z", "creator": "nicolas.gregoire@agarri.fr", "creation_time": "2012-07-30T09:39:12Z", "is_private": false, "text": "I understand your position but I think that these risks should then be much more visible to casual users of the framework (i.e. documentation improvement).\n\nNowadays, it's trivial to find some applications using Batik in a insecure way (allowing the disclosure of local files). Examples:\n- Apache FOP: vulnerable. Repro: FOP document including a malicious SVG image\n- HighCharts JS: vulnerable. Repro: submit a malicious SVG to the on-line export feature of this graph library\n\nMediaWiki seems impacted too:\nhttp://www.mediawiki.org/wiki/Manual:$wgSVGConverters\n\nRegarding XInclude: it is a feature of the XML parser and could be disabled there in security-conscious deployments\nRegarding ECMAScript: it can disabled using command-line options. The main differences with the XXE attack are that this one is scriptless and can't be inhibited using options"}]
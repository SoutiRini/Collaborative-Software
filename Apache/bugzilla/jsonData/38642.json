[{"count": 0, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "Testcase:\n-> RewriteRules in per-dir context, /.htaccess (root)\n-> used RewriteRules:\n\nRewriteEngine on\nRewriteCond %{REQUEST_URI} !^/(test|robots\\.txt)\nRewriteRule ^(.*) test/$1 [C]\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^test/(.*)$ /test/index.php?q=$1 [L,QSA]\n\nDescription: Eyery Request should go to /test/... and furthermore if the file\ndoes not exist in /test/..., it should go to /test/index.php?q=...\n\n-> Request: /CSS/style.css\n-> expected result: /test/index.php?q=CSS/style.css (all cond. are true)\n-> real result: /test/index.php?q=CSS/style.css/style.css\n\nProblem: see attached Rewritelog\n\nThe 1st RewriteRule rewrites the request to the filepath test/CSS/style.css\nwhile the 2nd RewriteRule matches now against test/CSS/style.css/style.css and\nnot against the expected filepath test/CSS/style.css, because the\n\"/style.css\"-part is handled as path info, which is added again to the new filepath.\n\nI would expect once a substitution occurs, path info from the original request\nisn't added anymore in this round of processing.", "id": 85764, "time": "2006-02-14T15:17:04Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2006-02-14T15:17:04Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bobsiegen@googlemail.com", "attachment_id": 17689, "text": "Created attachment 17689\nRewritelog", "id": 85765, "time": "2006-02-14T15:18:11Z", "bug_id": 38642, "creation_time": "2006-02-14T15:18:11Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 38642, "attachment_id": null, "id": 89395, "time": "2006-05-23T16:43:54Z", "creator": "ian@ianbrandt.com", "creation_time": "2006-05-23T16:43:54Z", "is_private": false, "text": "A possible second example for verification purposes:\n\nIn per-directory .htaccess:\n\nRewriteRule ^(.*)/index\\.html$ $1/\n\nThe RewriteLog I see (stripped down and paraphrased for clarity):\n\n(3) add path info postfix: /document/root/foo ->\n/document/root/foo/index.html\n(3) strip per-dir prefix: /document/root/foo/index.html -> foo/index.html\n(3) applying pattern '^(.*)/index\\.html$' to uri 'foo/index.html'\n(2) rewrite foo/index.html -> foo/\n(3) add per-dir prefix: foo/ -> /document/root/foo/\n(3) add path info postfix: /document/root/foo/ ->\n/document/root/foo//index.html\n[...]\n\nThe expected behavior is that 'foo/index.html' would be rewritten to 'foo/',\nhowever the \"add path info postfix\" step just adds it right back on."}, {"count": 3, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "*** Bug 33022 has been marked as a duplicate of this bug. ***", "id": 94076, "time": "2006-09-25T10:41:11Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2006-09-25T10:41:11Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 38642, "attachment_id": 18910, "text": "Created attachment 18910\nRush patch used some time ago against 2.0.55\n\nI didn't port it into trunk since I hope that there's another method instead of\nusing r->notes.", "id": 94079, "time": "2006-09-25T10:52:12Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2006-09-25T10:52:12Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "*** Bug 41423 has been marked as a duplicate of this bug. ***", "id": 98305, "time": "2007-01-20T07:29:45Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2007-01-20T07:29:45Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 38642, "text": "This looks very similar to the old bug http://archive.apache.org/gnats/7879.", "id": 99717, "time": "2007-02-22T19:09:50Z", "creator": "gormanjz@hotmail.com", "creation_time": "2007-02-22T19:09:50Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "I'm still experiencing this bug in 2.2.6.", "id": 111898, "time": "2007-12-19T03:27:30Z", "creator": "nakedddrfreak@gmail.com", "creation_time": "2007-12-19T03:27:30Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "*** Bug 44922 has been marked as a duplicate of this bug. ***", "id": 119823, "time": "2008-08-14T02:42:02Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2008-08-14T02:42:02Z", "is_private": false}, {"count": 9, "tags": [], "text": "I just wasted a good amount of time re-discovering and working around this bug (seven years after it was initially reported?!), as apparently many others continue to do (since it keeps popping up as a new bug) and I felt I should add my voice to the call to fix it, lest it continue to be neglected.\n\nWhy hasn't the mod_rewrite team fixed such a simple bug after so long? Why hasn't anyone even taken ownership of this bug (still has status NEW after 2.5 years on bugzilla?) Is there anyone currently working on mod_rewrite, anyone at all?\n\nI don't think the masses of Apache users such as myself should have to apply a patch that's been out for more than two years - I'm not familiar enough with the code to immediately see the non-idealities of the patch, but if the patch is \"good enough\", please just roll it out and worry about perfecting it later. Your users will thank you.", "attachment_id": null, "id": 122411, "creator": "seth.purcell@unlabeled.com", "time": "2008-11-12T07:31:34Z", "bug_id": 38642, "creation_time": "2008-11-12T07:31:34Z", "is_private": false}, {"count": 10, "tags": [], "creator": "budzynowski@gmail.com", "attachment_id": null, "text": "While I agree totally with Seth in that this bug should have been fixed long ago, we cannot simply rush a patch through. This needs to be done properly.\n\nBecause if there are any problems with the patch, who knows how long *they* will take to be addressed?\n\nFor the purpose of helping anyone who might fix this bug, I will supply some of the details that I provided when I reported the bug.\n\n\nThe problem:\n\nIf multiple RewriteRules within a .htaccess file match, unwanted copies of PATH_INFO may accumulate at the end of the URI.\n\nIn more depth:\n\nWhen you make a request for a file in a directory that doesn't exist, Apache divides the URI into the \"real\" part (r->filename) and the \"virtual\" part (r->path_info). This has happened by the time per-directory (.htaccess) RewriteRules are ready to be processed, which means mod_rewrite has to put them back together to reconstruct the original URI.\n\nThis is what happens. r->path_info is appended to ctx->uri prior to *each* RewriteRule. If a RewriteRule (including its RewriteConds) does not match, ctx->uri is discarded and nothing bad happens. If a RewriteRule does match, however, the entire substitution is incorporated into r->filename.\n\nBut r->path_info is not changed! This means that subsequent rules will get an extra copy of PATH_INFO. If more rules match then this can get worse.\n\nNote that PATH_INFO *should* be appended before the first matching RewriteRule, because it forms part of the URI. However, afterwards it should not be appended again.\n\n\nExample:\n\nThis comes from a .htaccess file placed in DocumentRoot. It is supposed to replace all underscores in a URI with hyphens.\n\nRewriteEngine On\nRewriteBase /\nRewriteRule ^(.*)_(.*)$ $1-$2 [N]\n\nMake a request for \"/_f_o_o_\" and it will be correctly rewritten to \"/-f-o-o-\". (That's because PATH_INFO is empty.)\n\nMake a request for \"/_f_o_o_/bar\" and it will be rewritten to \"/-f-o-o-/bar/bar/bar/bar\". (That is, unless you happen to have a _f_o_o_ directory, in which case PATH_INFO will be empty and the rewriting will work as desired.)\n\nNote that there are four underscores but only three erroneous copies of  PATH_INFO - this is because the first time the rule matches, appending PATH_INFO is correct behaviour.\n\nMake a request for \"/foo/b_ar\" and an infinite loop will ensue, since every time an underscore is replaced, a new one will be appended prior to the next rule.\n\n(See my bug report at https://issues.apache.org/bugzilla/show_bug.cgi?id=44922 for a RewriteLog.)\n\n\nThe current patch:\n\nLooks pretty good to me. It basically uses a flag to indicate whether a substitution has been made yet, and clears this flag when it ought to get \"reset\".\n\nI would however check perdir *before* making each calls to apr_table_xxx, as these calls are relatively slow.\n\nThe flag is stored in r->notes - I can't see where better to put it. It can't go in the ctx struct because the scope of that struct is a single rewrite list. (This is bad because multiple .htaccess files can match a single request.) Although for performance, a \"cache\" of the flag could be stored in the ctx struct, and saved to r->notes in between rewrite lists.", "id": 122746, "time": "2008-11-22T18:06:05Z", "bug_id": 38642, "creation_time": "2008-11-22T18:06:05Z", "is_private": false}, {"count": 11, "tags": [], "creator": "covener@gmail.com", "text": "> The flag is stored in r->notes - I can't see where better to put it. It can't\n> go in the ctx struct because the scope of that struct is a single rewrite list.\n> (This is bad because multiple .htaccess files can match a single request.)\n> Although for performance, a \"cache\" of the flag could be stored in the ctx\n> struct, and saved to r->notes in between rewrite lists.\n\nI am leaning towards whacking r->path_info as soon as we know we've effectively made it useless by replacing r->filename in per-directory context, rather then thinking harder about when we should spill r->path_info into ctx->uri by saving info away in some previous step.\n\n@@ -3981,6 +3986,11 @@\n     /* Now adjust API's knowledge about r->filename and r->args */\n     r->filename = newuri;\n+\n+    if (ctx->perdir && r->path_info && !(p->flags & RULEFLAG_KEEPPATHINFO)) {\n+        r->path_info = '\\0';\n+    }\n\nBut I don't pretend to understand how someone might be relying on this path_info from the original request floating around, so the meaning of the flag might have to be inverted so that the current behavior is default.\n\nWho knows how many .htaccess files are carefully working around this behavior by  e.g. not propogating pieces of the URL that look like the existing %{PATH_INFO} over in the substitution", "id": 122747, "time": "2008-11-22T18:40:14Z", "bug_id": 38642, "creation_time": "2008-11-22T18:40:14Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "budzynowski@gmail.com", "attachment_id": null, "text": ">> I am leaning towards whacking r->path_info as soon as we know we've effectively made it useless by replacing r->filename in per-directory context, rather then thinking harder about when we should spill r->path_info into ctx->uri by saving info away in some previous step.\n\nThat's exactly what I thought at first. But then I found this: http://213.11.80.10/manual/cgi_path.html\n\nAnd I quote: \"Apache 1.2 and later now determine SCRIPT_NAME and PATH_INFO by looking directly at the URL\"\n\nSo maybe it's not such a good idea.", "id": 122753, "time": "2008-11-23T14:01:51Z", "bug_id": 38642, "creation_time": "2008-11-23T14:01:51Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "(In reply to comment #12)\n> >> I am leaning towards whacking r->path_info as soon as we know we've effectively made it useless by replacing r->filename in per-directory context, rather then thinking harder about when we should spill r->path_info into ctx->uri by saving info away in some previous step.\n> \n> That's exactly what I thought at first. But then I found this:\n> http://213.11.80.10/manual/cgi_path.html\n> \n> And I quote: \"Apache 1.2 and later now determine SCRIPT_NAME and PATH_INFO by\n> looking directly at the URL\"\n> \n> So maybe it's not such a good idea.\n> \n\nI thought that since this is per-directory, PT-like behavior is implied so whenever we change the filename and re-inject into apache, so PATH_INFO is very soon to be \"fixed\" by the core.\n\nThe only time it lasts longer is when we have another rule or two to look at before re-injecting.", "id": 122754, "time": "2008-11-23T14:12:55Z", "creator": "covener@gmail.com", "creation_time": "2008-11-23T14:12:55Z", "is_private": false}, {"count": 14, "tags": [], "text": "I'm encouraged by the recent activity on this bug, but with all the discussion about possible approaches and their potential ramifications, and the link to the reference describing version 1.2 and later behavior, I'm left wondering: isn't there a set of unit test cases for this function to unequivocally define its requirements, and indicate when an acceptable solution has been found? This seems like a project that would have a large, if not exhaustive, stable of test cases built up by now.", "attachment_id": null, "id": 122757, "creator": "seth.purcell@unlabeled.com", "time": "2008-11-23T20:25:44Z", "bug_id": 38642, "creation_time": "2008-11-23T20:25:44Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 38642, "attachment_id": null, "id": 122771, "time": "2008-11-24T04:46:03Z", "creator": "covener@gmail.com", "creation_time": "2008-11-24T04:46:03Z", "is_private": false, "text": "(In reply to comment #14)\n> isn't there a set of unit test cases for this function to unequivocally define\n> its requirements, and indicate when an acceptable solution has been found? \n\nNothing that can be relied upon for this purpose. Any current functional regression tests pass today, and we wouldn't pretend to define the requirements for something that could be relied on by any number of .htaccess files for such a long span of time.  There is also the issue of interaction with what third-party modules or CGI might expect.\n\n"}, {"count": 16, "tags": [], "creator": "budzynowski@gmail.com", "text": "(In reply to comment #13)\n> I thought that since this is per-directory, PT-like behavior is implied so\n> whenever we change the filename and re-inject into apache, so PATH_INFO is very\n> soon to be \"fixed\" by the core.\n> \n> The only time it lasts longer is when we have another rule or two to look at\n> before re-injecting.\n \nI could be wrong, but the way I understand it, PATH_INFO is just derived from the original URL - before any rewriting occurs. And is never \"fixed\".", "id": 122806, "time": "2008-11-24T15:10:45Z", "bug_id": 38642, "creation_time": "2008-11-24T15:10:45Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "creator": "bobsiegen@googlemail.com", "text": "(In reply to comment #16)\n> (In reply to comment #13)\n> > I thought that since this is per-directory, PT-like behavior is implied so\n> > whenever we change the filename and re-inject into apache, so PATH_INFO is very\n> > soon to be \"fixed\" by the core.\n> > \n> > The only time it lasts longer is when we have another rule or two to look at\n> > before re-injecting.\n> \n> I could be wrong, but the way I understand it, PATH_INFO is just derived from\n> the original URL - before any rewriting occurs. And is never \"fixed\".\n\nYes, derived from the physical filename after the request has been mapped to the file system. I think Eric meant that it is fixed in the redirect processing (new file system mapping, new path info for the internal redirect processing).\n\nI think erasing path_info is not a good idea. Even if it seems to be useless (since you can check the URL-path), someone (either content handlers or e.g. RewriteConditions) may relay on that ENV. That's why I've chosen to leave it untouched but prevent further appending if a substitution occurred.\n\nI cannot imagine a case where \"not appending path_info after a subst. was applied but leaving r->path_info untouched\" can break any case \u2013 either at server/rewrite rule side nor at script side. No one uses a construct of rewrite rules, which expects continuing appending of path_info \u2013 and I've seen a lot of rules in a german discussion forum about mod_rewrite. It's the opposite. There were questions \"what went wrong\" when it comes to the behavior described in this PR.\n\n(In reply to comment #10)\n> I would however check perdir *before* making each calls to apr_table_xxx, as\n> these calls are relatively slow.\n\nAs I wrote \u2013 rush.  :-) I think most calls were made in sections which are touched by the fix-up hook (i.e. directory context) only. May be a check for path_info != NULL would be better.", "id": 122851, "time": "2008-11-25T12:49:56Z", "bug_id": 38642, "creation_time": "2008-11-25T12:49:56Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "creator": "budzynowski@gmail.com", "text": "> for something that could be relied on by any number of .htaccess files for such\n> a long span of time.\n\nI doubt many .htaccess rely on [that is, work-around] current behaviour, because:\n-The behaviour differs from httpd.conf behaviour,\n-is undocumented, and\n-when I posted about this to the (English) Apache users mailing list, nobody knew about the issue.\n\n> As I wrote \u2013 rush.  :-) I think most calls were made in sections which are\n> touched by the fix-up hook (i.e. directory context) only. May be a check for\n> path_info != NULL would be better.\n\nHmm, you're right for the most part. I was thinking you should have done:\n\nif (perdir != NULL && apr_table_get(r->notes,\"substapplied\") &&\n\ninstead of\nif (apr_table_get(r->notes,\"substapplied\") && perdir != NULL &&\n\nexcept the latest code is structured a bit differently (the whole block already has a perdir check) so this is irrelevant.", "id": 122853, "time": "2008-11-25T14:04:41Z", "bug_id": 38642, "creation_time": "2008-11-25T14:04:41Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 38642, "attachment_id": null, "id": 123287, "time": "2008-12-14T06:15:20Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2008-12-14T06:15:20Z", "is_private": false, "text": "*** Bug 46165 has been marked as a duplicate of this bug. ***"}, {"count": 20, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "I committed an explicit flag to discard PATH_INFO during per-directory processing:\n\nhttp://svn.apache.org/viewvc?rev=728015&view=rev\n\nI'm a bit too concerned about breaking convoluted rulesets by changing the default behavior. I did consider changing the default in trunk/2.3.x and having an opt _out_ flag but then the 2.2.x/2.3.x differences would be a pain.\n\nI would appreciate review of the doc in the commit (in viewsvn or URL when it's available) because it's difficult to find the right level of detail:\n\nhttp://httpd.apache.org/docs/2.3/mod/mod_rewrite.html#rewriteflags\n", "id": 123420, "time": "2008-12-19T05:08:01Z", "creator": "covener@gmail.com", "creation_time": "2008-12-19T05:08:01Z", "is_private": false}, {"count": 21, "attachment_id": null, "creator": "bobsiegen@googlemail.com", "text": "Another flag (to fix just a bug) makes mod_rewrite yet more complex (which is IMHO a problem). It is good that there is a way to avoid the bug, but as you can see from the last duplicate of this bug, I think many people trapping into this bug are not aware about what causes the problem or what path-info is at all. Further more, many don't have access to the server config and can't get a Rewritelog.\n\nI still consider this as a bug and not as a feature, which means that a bug shouldn't need options to keep it.\n\nThere's a small typo: \"or the resulf\".\n\nIf it should be kept that way, consider adding a note to the N-flag about the new flag as well, because this bug is deadly in combination with the N-flag.", "id": 123432, "time": "2008-12-19T13:22:40Z", "bug_id": 38642, "creation_time": "2008-12-19T13:22:40Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "*** Bug 40598 has been marked as a duplicate of this bug. ***", "id": 123434, "time": "2008-12-19T13:23:34Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2008-12-19T13:23:34Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 38642, "attachment_id": null, "id": 123438, "time": "2008-12-19T17:29:18Z", "creator": "budzynowski@gmail.com", "creation_time": "2008-12-19T17:29:18Z", "is_private": false, "text": "In regards to clobbering PATH_INFO:\n\nFrom my experiments, it would seem that PATH_INFO is in fact \"regenerated\" after a mod_rewrite ruleset has been processed. I'm not quite sure at what stage this occurs, but this would mean that, at least, CGI scripts will not be affected by the change.\n\nThe only place I can think of that will be affected is RewriteRules and RewriteConds that use %{PATH_INFO} themselves. But I would say they are relying on undocumented behaviour - in any ruleset that allows more than one substitution to occur, the URL goes through a \"partial\" state and what PATH_INFO should contain at that point isn't really stated anywhere.\n\nSo I say forget the flag and change default behaviour - documenting it clearly, of course.\n\nIf someone really wants to preserve PATH_INFO, they can use the env= flag to store it in another variable before making any substitutions.\n\n\nIn terms of the code itself:\n\n>   r->path_info = \"\\0\";\n\nApache will automatically clean up the old string when the request is done, right? (Just sanity checking here.)\n\nAlso, why not just use\n    r->path_info = NULL;\n? All the rest of the mod_rewrite code supports this. If you have a good reason not to use NULL, then you could just use this:\n    r->path_info = \"\";\n\n"}, {"count": 24, "tags": [], "bug_id": 38642, "text": "(In reply to comment #23)\n> In regards to clobbering PATH_INFO:\n> \n> From my experiments, it would seem that PATH_INFO is in fact \"regenerated\"\n> after a mod_rewrite ruleset has been processed. I'm not quite sure at what\n> stage this occurs, but this would mean that, at least, CGI scripts will not be\n> affected by the change.\n\nThis is the core directory walk processing that happens shortly after the rewritten URL is reinserted.\n\n> \n> So I say forget the flag and change default behaviour - documenting it clearly,\n> of course.\n\nI think that definitely doesn't fly for 2.2 because I think it's quite easy to end up with a ruleset that works under\n\nChanging the behavior between releases has complications too because you have to then know where your htaccess is running.\n\nUltimately I'm just more comfortable A) not regressing anyone with a legacy ruleset lurking out in htaccess and B) making the choice explicit in the rule after consulting the doc.\n\n\n> Apache will automatically clean up the old string when the request is done,\n> right? (Just sanity checking here.)\n\nyes, everything in the request_rec is allocated out of a short lived (lifetime of a request) APR pool.\n\n> \n> Also, why not just use\n\nthanks, corrected.", "id": 123439, "time": "2008-12-19T18:04:54Z", "creator": "covener@gmail.com", "creation_time": "2008-12-19T18:04:54Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 38642, "attachment_id": null, "id": 123443, "time": "2008-12-19T20:46:28Z", "creator": "budzynowski@gmail.com", "creation_time": "2008-12-19T20:46:28Z", "is_private": false, "text": "> Ultimately I'm just more comfortable A) not regressing anyone with a legacy\n> ruleset lurking out in htaccess and B) making the choice explicit in the rule\n> after consulting the doc.\n\nI can see where you're coming from, but in my opinion, placing extra burden on users for backwards-compatibility reasons should be avoided as much as possible.\n\nI've had an idea: rather than using r->path_info, we add a path_info member to rewrite_ctx, and refer to that within mod_rewrite. It would be initialised to r->path_info, but could be set to NULL when a substitution is made. This way the request's PATH_INFO information is not actually modified by mod_rewrite.\n\nAny comments?\n\n\nEarlier I said\n> The flag is stored in r->notes - I can't see where better to put it. It can't\n> go in the ctx struct because the scope of that struct is a single rewrite list.\n\nI no longer think this is true. r->path_info is regenerated at the end of a rewrite list (providing at least one rule matched) so we can start afresh for each rewrite list."}, {"count": 26, "tags": [], "bug_id": 38642, "attachment_id": null, "text": "How I can to use this path on windows version of apache 2.2?\nWhen this bug will be fixed in binaries?", "id": 130178, "time": "2009-09-07T02:33:37Z", "creator": "reg@argi.ru", "creation_time": "2009-09-07T02:33:37Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 38642, "text": "Sorry. Needs use DPI flag to fix this like.", "id": 130179, "time": "2009-09-07T03:20:13Z", "creator": "reg@argi.ru", "creation_time": "2009-09-07T03:20:13Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "marking fixed, Release in 2.2.12", "id": 130180, "time": "2009-09-07T06:42:14Z", "bug_id": 38642, "creation_time": "2009-09-07T06:42:14Z", "is_private": false}]
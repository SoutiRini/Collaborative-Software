[{"count": 0, "tags": [], "bug_id": 2953, "is_private": false, "id": 4219, "attachment_id": null, "creator": "gknight@digital-impact.com", "creation_time": "2001-08-01T12:37:10Z", "time": "2001-08-01T12:37:10Z", "text": "We are using the RollingFileAppender. Problems seem to occur if we have a log \nfile open for review (via the \"tail -f\" command of using a text editor) and \nLog4J attempts to roll the file over due to the current log file reaching its \nsize limit. The fact that one of the log files is open seems to cause a problem \nfor the rolling process.\n\nWe think the problem is compounded due to the rolling process renaming all the \npast log files. We believe it would be better to use a higher number when \nrolling a log file. This way all the old log files would have to be renamed.\n\nAssume we have full log files debug.log.1 to debug.log.9. The current open file \nwould be debug.log. When debug.log reaches its size limit Log4J renames each \nclosed log file from debug.log.n to debug.log.n+1. It then renames debug.log to \ndebug.log.1 and opens a new log file named debug.log. Why does it do this? Why \ncan't it just rename debug.log to debug.log.10. That way it would not have to \nrename debug.log.1 through debug.log.9."}, {"count": 1, "tags": [], "bug_id": 2953, "attachment_id": null, "id": 15787, "time": "2002-05-09T11:40:41Z", "creator": "ceki@apache.org", "creation_time": "2002-05-09T11:40:41Z", "is_private": false, "text": "\nThis is indeed a vulnerability of the RollingFileAppender. In log4j 1.2\nyou will able to specify the rollover strategy."}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "is_private": false, "text": "\nSorry, that's log4j 1.3 not 1.2", "id": 15788, "time": "2002-05-09T11:41:23Z", "bug_id": 2953, "creation_time": "2002-05-09T11:41:23Z", "attachment_id": null}]
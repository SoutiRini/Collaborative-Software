[{"count": 0, "tags": [], "creator": "costin.leau@gmail.com", "attachment_id": null, "id": 153245, "time": "2012-01-29T11:21:47Z", "bug_id": 52549, "creation_time": "2012-01-29T11:21:47Z", "is_private": false, "text": "I've ran into, what I would consider a bug, in Tomcat 7 when the web.xml\nis 3.0 (or higher).\nI assume based on the Servlet 3.0 spec, the WEB-INF/classes need to be\nscanned but rather than doing bytecode parsing, Tomcat 7 does actual\nclass loading during the webapp initialization. \nThis change in semantics breaks applications that rely on bytecode enhancements or processing (such as Spring's LoadTimeWeaver). Also any statics that are in place get initialized way too early even if class itself might not get used.\n\nWebapps that work on Tomcat 5.x-7.x (with web.xml 2.5) suddenly break on Tomcat 7 web.xml 3.0 due to the eager class loading.\n\nI'd assume every app that does instrumentation (such as JPA providers) will face\nthe same issue unless the whole VM is being instrumented which is quite unfortunate and avoidable.\n\nI'm using Tomcat 7.0.25.\nThe culprit seems to be ContextConfg#checkHandlesTypes(JavaClass) which could postpone class loading:\n\n// No choice but to load the class\nString className = javaClass.getClassName();\n...\nclazz = context.getLoader().getClassLoader().loadClass(className);\n...\n// CL: no need to load the class for this\nif (clazz.isAnnotation()) {\n    // Skip\n    return;\n}\n\nfor (Map.Entry<Class<?>, Set<ServletContainerInitializer>> entry ...\n\n\nThere are a number of improvements to be applied here all just by looking at\nthe bytecode such as:\n\na. if the class is an annotation, skip it\nb. if the class doesn't extend/implement any interface skip it\nc. Look at the class hierarchy - this is actually quite easy (since\nthere's only one parent) and don't load it unless it implements\nServletContextListener\nd. if there are no Servlet initializers, don't load any classes\ne. if the class needs to be loaded use a throwaway classloader - that is\na clone CL of the real one which you can discard after scanning. Thus\nyou can do all the checks against a class but you can get rid of it at\nthe end. If the class is a match you can load it using the \"proper\"\nclass loader.\nThe problem with e) is that it's not really efficient especially in\nterms of memory.\n\nLoading all the classes (which can be quite a lot (10K+) in several\napplications) to find one or two initializers seems like a bad trade-off\nwhich unfortunately, also breaks compatibility.\nI realize that the solutions above (especially e) seem complicated but\nthey aren't. I see you guys have used BCEL - if you were using ASM I\nwould have offered help.\n\nBasically what I'm suggesting is to be a lot more careful in doing\nloading and enforcing some basic rules which can go a long way. Also using a\ncache (reusing data) for the entire scanning should speed things up\npretty well. Further more since you are already loading the bytecode,\ndoing additional checks will actually speed things up as it will avoid\nclass loading.\nCase in point is traversing the class hierarchy: if the parent is in the\nclasspath, it will be scanned anyway and checking the interfaces\nimplemented is trivial. If this result is cached, all direct children\nwill be skipped right away.\n\nThanks,"}, {"count": 1, "tags": [], "creator": "costin.leau@gmail.com", "attachment_id": null, "id": 153247, "time": "2012-01-29T11:40:18Z", "bug_id": 52549, "creation_time": "2012-01-29T11:40:18Z", "is_private": false, "text": "Example bug report caused by the side effect of eager classloading in Tomcat 7:\nhttps://jira.springsource.org/browse/SPR-7440\n\nBug 52326 and bug 52444 touch on the same issue as well.\n\nP.S. I'm aware that metadata-complete=\"true\" fixes the issue but it's actually a work-around not a fix. First it is false by default and not many users know about it, and second, it disables the use of annotations which means one can't use annotated ServletContainerInitializer."}, {"count": 2, "tags": [], "bug_id": 52549, "attachment_id": null, "text": "\n\n*** This bug has been marked as a duplicate of bug 52444 ***", "id": 153248, "time": "2012-01-29T12:15:57Z", "creator": "markt@apache.org", "creation_time": "2012-01-29T12:15:57Z", "is_private": false}, {"count": 3, "tags": [], "creator": "costin.leau@gmail.com", "text": "I'm not sure why this issue has been marked as a duplicate. This is not about long startup times or memory consumption, but rather unneeded class loading that simply breaks existing apps.\nThus it's not about performance but semantics.", "id": 153251, "time": "2012-01-29T14:26:45Z", "bug_id": 52549, "creation_time": "2012-01-29T14:26:45Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 52549, "text": "Just for the record, you appear to have missed the point of this code.\n\nThe list of ServletContainerInitializer is obtained from META-INF/services/javax.servlet.ServletContainerInitializer within each JAR, not from scanning the classes and looking for classes that implement it.\n\nThe scanning is only done if there is at least one ServletContainerInitializer that defines HandlesTypes and the scanning is looking for classes that extend or implement the classes/interfaces defined by HandlesTypes. Loading the class was a quick and dirty solution (that has survived longer than I thought it might) to determining if the class meets the extends or implements test.\n\nSee the duplicate for my comments on your suggestions. Short version this is doable with some refactoring and next on my todo list.\n\nFeel free to change the duplicate to a bug if you wish. I'm not that bothered since it is getting fixed anyway.", "count": 4, "id": 153260, "time": "2012-01-29T17:45:17Z", "creator": "markt@apache.org", "creation_time": "2012-01-29T17:45:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 52549, "text": "You're right, I mixed the various types that trigger/are part of the scanning process but hopefully my suggestions (to try to eliminate loading by looking at the class content/dependencies inferred from the configuration) were understood.", "count": 5, "id": 153268, "time": "2012-01-29T21:47:04Z", "creator": "costin.leau@gmail.com", "creation_time": "2012-01-29T21:47:04Z", "is_private": false}]
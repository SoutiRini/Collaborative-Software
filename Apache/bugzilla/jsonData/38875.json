[{"count": 0, "tags": [], "bug_id": 38875, "attachment_id": null, "text": "We recently rebuilt APR during an OS reinstall. After this, Tomcat failed to\nload the tcnative libraries:\n\nINFO: The Apache Tomcat Native library which allows optimal performance in\nproduction environments was not found on the java.library.path:\n/x1/opt/tomcat-5.5/tomcat/bin/tomcat-native-1.1.2/jni/native/.libs\n\nHowever the libraries were definitely present there.\n\nEventually I poked around in AprLifecycleListener.java, and found that the code\ninitializing the APR library:\n\ntry {\n      String methodName = \"initialize\";\n      Class paramTypes[] = new Class[1];\n      paramTypes[0] = String.class;\n      Object paramValues[] = new Object[1];\n      paramValues[0] = null;\n      Class clazz = Class.forName(\"org.apache.tomcat.jni.Library\");\n      Method method = clazz.getMethod(methodName, paramTypes);\n      method.invoke(null, paramValues);\n      major = clazz.getField(\"TCN_MAJOR_VERSION\").getInt(null);\n      minor = clazz.getField(\"TCN_MINOR_VERSION\").getInt(null);\n      patch = clazz.getField(\"TCN_PATCH_VERSION\").getInt(null);\n  } catch (Throwable t) {\n      if (!log.isDebugEnabled()) {\n          log.info(sm.getString(\"aprListener.aprInit\",\n                  System.getProperty(\"java.library.path\")));\n       ...\n\nYou see it catches a Throwable, and *assumes* it means the library isn't\npresent. In my case this was not so. When I added a log.error() to print the\nThrowable, I got:\n\n\nSEVERE: java.lang.reflect.InvocationTargetException\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at\norg.apache.catalina.core.AprLifecycleListener.lifecycleEvent(AprLifecycleListener.java:80)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.StandardServer.initialize(StandardServer.java:766)\n        at org.apache.catalina.startup.Catalina.load(Catalina.java:503)\n        at org.apache.catalina.startup.Catalina.load(Catalina.java:523)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:247)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:412)\nCaused by: java.lang.UnsatisfiedLinkError:\n/x1/opt/tomcat-5.5/apache-tomcat-5.5.15/bin/tomcat-native-1.1.2/jni/native/.libs/libtcnative-1.so.0.2.2:\n/usr/local/apr-install/1.2.2/lib/libapr-1.so.0: undefined symbol: sock_is_ipv6,\nno libtcnative-1 in\njava.library.path(/x1/opt/tomcat-5.5/tomcat/bin/tomcat-native-1.1.2/jni/native/.libs)\n        at org.apache.tomcat.jni.Library.<init>(Library.java:55)\n        at org.apache.tomcat.jni.Library.initialize(Library.java:156)\n        ... 15 more\n\n\nFor the record, this is apparently a bug in APR 1.2.2 triggered when it is\ncompiled with --disable-ipv6.\n\nIt would be good if Tomcat could catch the specific exception thrown when the\nfile is not found, and print all others, like this.", "id": 86558, "time": "2006-03-07T09:42:29Z", "creator": "jefft@apache.org", "creation_time": "2006-03-07T09:42:29Z", "is_private": false}, {"count": 1, "text": "Both openssl and APR must be in the LD_LIBRARY_PATH.\nThe easiest way is to use the:\nldd libtcnative-1.so.0.2.2\n\nMake sure LD_LIBRARY_PATH includes all tcnative dependencies.", "creator": "mturk@apache.org", "attachment_id": null, "id": 86561, "time": "2006-03-07T11:01:23Z", "bug_id": 38875, "creation_time": "2006-03-07T11:01:23Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 38875, "attachment_id": null, "text": "The bug I'm reporting is that Tomcat does not report the correct error. Tomcat\nsaid that the library was not *found*, whereas in reality it could not be\n*loaded*. I had to recompile Tomcat to get a decent stacktrace and diagnose the\nactual problem, which shouldn't be necessary.", "id": 86584, "time": "2006-03-07T21:59:23Z", "creator": "jefft@apache.org", "creation_time": "2006-03-07T21:59:23Z", "is_private": false}, {"count": 3, "tags": [], "creator": "hgomez@apache.org", "is_private": false, "text": "I also got a similar problem on a Suse SLES 9 PPC and i386 which use an Apache\n2.0.49 + APR 0.9.5.\n\nThe build was fine with ./configure --with-apr=/usr/bin/apr-config \n\nTo check it more carefully I used a simple java class from\norg.apache.tomcat.jni.Library class \n\nalaska:~/tomcat-native-1.1.2/jni/native # java Library\nException in thread \"main\" java.lang.UnsatisfiedLinkError:\n/usr/lib/libtcnative-1.so.0.9.5: /usr/lib/libtcnative-1.so.0.9.5: cannot open\nshared object file: No such file or directory, Can't find library libtcnative-1\n (liblibtcnative-1.so) in sun.boot.library.path or java.library.path\nsun.boot.library.path=/usr/lib/java/bin/../jre/bin\njava.library.path=/usr/lib/java/bin/../jre/bin:/usr/lib/java/jre/bin/classic:/usr/lib/java/jre/bin:/usr/lib(/usr/lib/java/bin/../jre/bin:/usr/lib/java/jre/bin/classic:/usr/lib/java/jre/bin:/usr/lib)\n        at Library.<init>(Library.java:53)\n        at Library.initialize(Library.java:154)\n        at Library.main(Library.java:210)\n\nAnd all stuff is in /usr/lib :\n\nalaska:~/tomcat-native-1.1.2/jni/native # ldd /usr/lib/libtcnative-1.so.0.9.5\n        libapr-0.so.0 => /usr/lib/libapr-0.so.0 (0x6ff99000)\n        librt.so.1 => /lib/tls/librt.so.1 (0x6ff72000)\n        libm.so.6 => /lib/tls/libm.so.6 (0x6fedd000)\n        libcrypt.so.1 => /lib/libcrypt.so.1 (0x6fe8c000)\n        libnsl.so.1 => /lib/libnsl.so.1 (0x6fe56000)\n        libpthread.so.0 => /lib/tls/libpthread.so.0 (0x6fe33000)\n        libdl.so.2 => /lib/libdl.so.2 (0x6fe10000)\n        libssl.so.0.9.7 => /usr/lib/libssl.so.0.9.7 (0x6fdbf000)\n        libcrypto.so.0.9.7 => /usr/lib/libcrypto.so.0.9.7 (0x6fc88000)\n        libc.so.6 => /lib/tls/libc.so.6 (0x6fb3a000)\n        /lib/ld.so.1 (0x08000000)", "id": 86597, "time": "2006-03-08T09:41:00Z", "bug_id": 38875, "creation_time": "2006-03-08T09:41:00Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 38875, "attachment_id": null, "id": 86602, "time": "2006-03-08T13:29:17Z", "creator": "remm@apache.org", "creation_time": "2006-03-08T13:29:17Z", "is_private": false, "text": "In nearly all cases, this error will indicate that the library isn't present. I\nwill not accept displaying a stack trace by default here, since most users will\nnot have APR installed.\n\nTo get more details, there's no need to recompile Tomcat. You should simply\nenable debug logging for this class, which is very easy to do (although you\ndon't seem to know how to do it: go in conf/logging.properties, if you use the\ndefault configuration, and add\norg.apache.catalina.core.AprLifecycleListener.level=FINE)."}, {"count": 5, "tags": [], "bug_id": 38875, "attachment_id": null, "text": "Well even with this 'FINE' logging the message could be unusable :\n\nalaska:~/apache-tomcat-5.5.16/bin # ./catalina.sh run\nUsing CATALINA_BASE:   /root/apache-tomcat-5.5.16\nUsing CATALINA_HOME:   /root/apache-tomcat-5.5.16\nUsing CATALINA_TMPDIR: /root/apache-tomcat-5.5.16/temp\nUsing JRE_HOME:       /opt/IBMJava2-cxppc32142ifx-20060209/jre/\nCreated MBeanServer with ID: 7b6d9cca:109da30a15d:-8000:alaska:1\nMar 8, 2006 3:09:18 PM org.apache.catalina.core.AprLifecycleListener lifecycleEvent\nFINE: The Apache Tomcat Native library which allows optimal performance in\nproduction environments was not found on the java.library.path:\n/opt/IBMJava2-cxppc32142ifx-20060209/jre/bin:/opt/IBMJava2-cxppc32142ifx-20060209/jre/bin/classic:/opt/IBMJava2-cxppc32142ifx-20060209/jre/bin:/usr/lib\njava.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled\nCode))\n        at java.lang.reflect.Method.invoke(Method.java(Compiled Code))\n        at\norg.apache.catalina.core.AprLifecycleListener.lifecycleEvent(AprLifecycleListener.java:80)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.StandardServer.initialize(StandardServer.java:766)\n        at org.apache.catalina.startup.Catalina.load(Catalina.java:503)\n        at org.apache.catalina.startup.Catalina.load(Catalina.java:523)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)\n        at java.lang.reflect.Method.invoke(Method.java:391)\n        at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:247)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:412)\nCaused by: java.lang.UnsatisfiedLinkError: initialize\n        at org.apache.tomcat.jni.Library.initialize(Library.java:205)\n        ... 17 more\nMar 8, 2006 3:09:19 PM org.apache.coyote.http11.Http11BaseProtocol init\n\nIn this case, the libtcnative is compiled (fine) against openssl 0.9.7 and apr\n0.9.5 but it didn't show....\n", "id": 86603, "time": "2006-03-08T14:11:13Z", "creator": "hgomez@apache.org", "creation_time": "2006-03-08T14:11:13Z", "is_private": false}, {"count": 6, "tags": [], "creator": "remm@apache.org", "is_private": false, "text": "The code is simply logging the exception that is coming back, whatever it is,\nand I can't do more:\n                    log.debug(sm.getString(\"aprListener.aprInit\", \n                            System.getProperty(\"java.library.path\")), t);\n", "id": 86604, "time": "2006-03-08T14:22:27Z", "bug_id": 38875, "creation_time": "2006-03-08T14:22:27Z", "attachment_id": null}]
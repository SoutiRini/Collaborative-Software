[{"count": 0, "tags": [], "bug_id": 60947, "attachment_id": null, "id": 198097, "time": "2017-03-31T01:51:08Z", "creator": "jchampion@apache.org", "creation_time": "2017-03-31T01:51:08Z", "is_private": false, "text": "mod_ssl's use of CRYPTO_THREADID_set_callback() is unfortunately bugged if another module has loaded OpenSSL, either via the apr_crypto routines or some other pathway.\n\nWhen mod_ssl loads, it calls CRYPTO_THREADID_set_callback() as part of setting up the thread-safety routines in OpenSSL. On unload, it attempts to unset this callback by calling the registration function with a NULL argument. This always fails, and the function returns zero, because unfortunately this API is write-once.\n\n*If* mod_ssl is the only OpenSSL consumer, then libcrypto will be unloaded and reloaded and the OpenSSL static initialization will reset the callback, masking any issue. But if something else has loaded OpenSSL as well (say, by using the apr_crypto_* API), that threadid callback will now be pointing at junk.\n\nEven after this, there's still a way to \"succeed\" -- *if* mod_ssl is reloaded into exactly the same position, everything will proceed as normal. But if not, we'll segfault the next time we call into OpenSSL. Currently, our Ubuntu autotest machine is running into this crash.\n\nThings we might consider:\n- don't set any callback at all, and rely on OpenSSL's default threadid callback\n- for platforms on which the default threadid callback is unsafe/nonfunctional, revert to the deprecated CRYPTO_set_id_callback(), which is not write-once\n- talk to OpenSSL upstream to figure out the \"right way\" to deal with multiple (possibly competing) OpenSSL consumers in the same address space\n\nSee also:\n- bug 54357, which similarly discusses an inability to reset a static callback in OpenSSL\n- postgresql dev conversation on this: https://postgrespro.com/list/id/87zj6ht6ef.fsf@wulczer.org"}, {"count": 1, "tags": [], "bug_id": 60947, "attachment_id": null, "is_private": false, "id": 198122, "time": "2017-03-31T22:06:17Z", "creator": "jchampion@apache.org", "creation_time": "2017-03-31T22:06:17Z", "text": "More research:\n\n1) OpenSSL 1.1.0 no longer requires the use of CRYPTO_THREADID_set_callback() at all, and in fact the CRYPTO_THREADID_* stuff is now a no-op. See rsalz's post at https://www.openssl.org/blog/blog/2017/02/21/threads/ .\n\n2) OpenSSL 1.0.2 (and possibly prior, but I haven't verified) contains default implementations for Windows and BeOS. For all other platforms, its fallback implementation uses the address of errno to tell threads apart.\n\n3) Our current implementation of the threadid callback is possibly incorrect on some platforms, since we're using CRYPTO_THREADID_set_numeric() and truncating an apr_os_thread_t into the space of an unsigned long. This opens up the possibility of collisions. As a concrete example: this makes our implementation objectively worse than the default implementation on Windows, because we truncate a HANDLE into a long, whereas the default uses GetCurrentThreadId() directly.\n\nThere is a CRYPTO_THREADID_set_pointer() that allows us to pass in a void*, and if it turns out we have to set a threadid callback, I think we should prefer the set_pointer() flavor if the native thread identifier is bigger than a long.\n\nThis is all making me feel like we should try to dump the callback entirely on as many platforms as possible (i.e. those with an addressable, per-thread errno), and decide what to do with the remaining platforms (if any) on a case-by-case basis."}, {"count": 2, "tags": [], "bug_id": 60947, "attachment_id": null, "is_private": false, "id": 198229, "time": "2017-04-10T21:21:37Z", "creator": "paul.spangler@ni.com", "creation_time": "2017-04-10T21:21:37Z", "text": "This comment isn't related to the particular issue you've described with the callback, but is related to the title of the bug. We've also seen a rare segfault when mixing mod_ssl with APR-crypto, but in SSL_load_error_strings (which is supposedly fixed in 1.1.0, see https://rt.openssl.org/Ticket/Display.html?user=guest&pass=guest&id=2325):\n\n1. SSL_load_error_strings sets up a static hash table in libeay containing error strings, some of which point to memory in ssleay.\n2. libapr loads apr_crypto_openssl, which bumps the refcount on libeay.\n3. Server executes normally... until say the child process crashes or a graceful restart.\n4. All modules are unloaded, but APR drivers are not (i.e. apr_crypto_openssl remains loaded).\n5. During unload, ssleay gets unloaded but libeay remains loaded due to step 2.\n6. Modules are loaded again.\n7. ssleay may load into a different location than it was in step 1.\n8. The hash table from step 1 still exists (in libeay), but now if it tries to check one of the SSL error strings, it points to a now-invalid place in memory, crashing.\n\nOur research led to this (somewhat old) mailing list thread: http://mailing.openssl.dev.narkive.com/syUDbGxq/memory-corruption-after-libssl-is-unloaded-from-memory where one of the devs is \"not sure it has ever been a feasible goal to make OpenSSL DSO/DLLs\nable to be unloaded (with the aim of subsequently loading).\"\n\nIn the end, we decided it was safest to pin ssleay and libeay in memory for the lifetime of the server via a module that preloads them and never unloads them. That \"solution\" wouldn't fix this particular callback issue since it's related to mod_ssl moving in memory, but I figured this might be worth sharing anyway. Feel free to ignore if it's irrelevant :)\n\nMaybe the \"fix\" here would also be to pin whatever the callback points to in memory (if that would even be feasible) so it survives a mod_ssl reload?"}, {"count": 3, "tags": [], "bug_id": 60947, "attachment_id": null, "id": 198230, "time": "2017-04-10T21:37:00Z", "creator": "jchampion@apache.org", "creation_time": "2017-04-10T21:37:00Z", "is_private": false, "text": "(In reply to Paul Spangler from comment #2)\n> This comment isn't related to the particular issue you've described with the\n> callback, but is related to the title of the bug. We've also seen a rare\n> segfault when mixing mod_ssl with APR-crypto, but in SSL_load_error_strings\n> (which is supposedly fixed in 1.1.0, see\n> https://rt.openssl.org/Ticket/Display.html?user=guest&pass=guest&id=2325):\nNice, thanks for the link! More evidence that perhaps the long-term fix for these sorts of problems is just to move to 1.1.0, where they've done away with a lot of the static global initialization stuff...\n\n> Maybe the \"fix\" here would also be to pin whatever the callback points to in\n> memory (if that would even be feasible) so it survives a mod_ssl reload?\nInteresting idea. I suppose we could have the callback(s) live in a completely separate DSO that never gets unloaded. Feels like the bang-for-buck might not be there, if this is a problem that's just going to go away after everyone finally updates to 1.1.0-or-later.\n\n*If* we have to keep supporting stuff like 0.9.8 forever, though, it might be worth a shot. Keep an eye on my recent dev thread [1]; maybe someone will have some input on that front.\n\n[1] https://lists.apache.org/thread.html/15c735e7c513f150a534bc0be69c101106b4d64d076f2c22e2a0ad52@%3Cdev.httpd.apache.org%3E"}, {"count": 4, "tags": [], "text": "Probably not really helpful, but this problem somewhat reminds me of the older\n\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=54357", "attachment_id": null, "id": 198231, "creator": "rainer.jung@kippdata.de", "time": "2017-04-10T22:34:33Z", "bug_id": 60947, "creation_time": "2017-04-10T22:34:33Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 60947, "attachment_id": null, "id": 198232, "time": "2017-04-10T23:06:21Z", "creator": "jchampion@apache.org", "creation_time": "2017-04-10T23:06:21Z", "is_private": false, "text": "(In reply to Rainer Jung from comment #4)\n> Probably not really helpful, but this problem somewhat reminds me of the\n> older\n> \n> https://bz.apache.org/bugzilla/show_bug.cgi?id=54357\nYep, and just like with that bug, there's no way to unregister the callback once it's been set. The only winning move is not to play..."}, {"count": 6, "tags": [], "creator": "jchampion@apache.org", "attachment_id": null, "text": "First attempt at a fix checked into trunk at r1791849.", "id": 198341, "time": "2017-04-19T02:56:24Z", "bug_id": 60947, "creation_time": "2017-04-19T02:56:24Z", "is_private": false}]
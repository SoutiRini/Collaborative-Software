[{"count": 0, "tags": [], "creator": "wan_jm@126.com", "text": "one HTTP request use POST method, but in tomcat it calls doGet() what is really strage.\n\nas I only tested in 7.0.23, and 7.0.32. in 7.0.32, 7.0.32 is more reproduceable than 7.0.23.\n\nI know it must be a very strange issue, as tomcat has so many release. I can't believe it if I didn't see it with my own eyes.\n\nso I attache the image.", "id": 163565, "attachment_id": null, "bug_id": 54178, "creation_time": "2012-11-21T08:22:00Z", "time": "2012-11-21T08:22:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54178, "text": "Created attachment 29615\npicture of the wrong stack catched by wireshark.", "id": 163566, "attachment_id": 29615, "creator": "wan_jm@126.com", "creation_time": "2012-11-21T08:23:46Z", "time": "2012-11-21T08:23:46Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 54178, "text": "Filters are perfectly capable of changing the request method. This is an application issue, not a Tomcat issue and the users list is the place to seek help.\n\nAlso, if you are going to obscure an IP address, do it properly.", "id": 163572, "time": "2012-11-21T10:46:40Z", "creator": "markt@apache.org", "creation_time": "2012-11-21T10:46:40Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "wan_jm@126.com", "text": "thanks for your comments, but most of the time it works properly, just occasionally, it calls the wrong function.\n\nas you said filter may change this. \nI checked the code of the two filter, \n\none set the characterEncodeing to UTF-8;\n\nanother checcked the cookied whethere there is login information.\n\nno one changed the request method;", "id": 163590, "attachment_id": null, "bug_id": 54178, "creation_time": "2012-11-22T01:46:32Z", "time": "2012-11-22T01:46:32Z", "is_private": false}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 163593, "time": "2012-11-22T09:43:11Z", "bug_id": 54178, "creation_time": "2012-11-22T09:43:11Z", "text": "Valves can change a method even easily than filters. E.g. during the FORM authentication (it is not your case, but as example).\n\n1. What is in access log?\n2. What is the actual full stacktrace of the error?\n3. I think it would be better to discuss on the users@ list, until some way to reproduce the issue is found. Can you reproduce this issue in a simpler configuration?\n4. What Connector protocol implementation are you using?"}, {"count": 5, "tags": [], "bug_id": 54178, "text": "I catched the stack from log file, and there is no record in localhost_access*.log; \n\nfollowing is the stack;\nMar 18, 2013 2:52:48 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet [org.apache.vysper.xmpp.extension.xep0124.BoshServlet] in context with path [/LiveVideoServer] threw exception\njava.lang.IllegalStateException: Cannot call sendError() after the response has been committed\n        at org.apache.catalina.connector.ResponseFacade.sendError(ResponseFacade.java:451)\n        at org.apache.vysper.xmpp.extension.xep0124.BoshServlet.doGet(BoshServlet.java:143)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at com.vtc.livemedia.filter.AutoLoginFilter.doFilter(AutoLoginFilter.java:153)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at com.vtc.livemedia.filter.CharactorFilter.doFilter(CharactorFilter.java:48)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:928)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:539)\n        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:300)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n        at java.lang.Thread.run(Thread.java:722)", "id": 165947, "time": "2013-03-18T07:01:54Z", "creator": "wan_jm@126.com", "creation_time": "2013-03-18T07:01:54Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "wan_jm@126.com", "attachment_id": null, "is_private": false, "id": 165948, "time": "2013-03-18T07:22:01Z", "bug_id": 54178, "creation_time": "2013-03-18T07:22:01Z", "text": "two things I found strange here!\n1. it is the post request, but come to doGet.\n2. in the doGet function, we didn't do commit, but the error shows that response has been commited.  in fact there are only two addHeader bofore it.\n\ncode is paste here.\n\n  /*line 129*/  @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.addDateHeader(\"Date\", System.currentTimeMillis());\n        resp.addHeader(\"Server\", SERVER_IDENTIFICATION);\n        if (FLASH_CROSS_DOMAIN_POLICY_URI.equals(req.getRequestURI())){\n            if(accessControlAllowOrigin != null) {\n                resp.setContentType(XML_CONTENT_TYPE);\n                byte[] flashCrossDomainPolicy = createFlashCrossDomainPolicy();\n                resp.setContentLength(flashCrossDomainPolicy.length);\n                resp.getOutputStream().write(flashCrossDomainPolicy);\n            } else {\n                resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            }\n        } else {\n      /*line 143*/      resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, INFO_GET);\n        }\n        resp.flushBuffer();\n    }"}, {"count": 7, "tags": [], "creator": "wan_jm@126.com", "attachment_id": 30063, "is_private": false, "id": 165949, "time": "2013-03-18T07:28:54Z", "bug_id": 54178, "creation_time": "2013-03-18T07:28:54Z", "text": "Created attachment 30063\ntomcat give 500 error when access a static file.\n\ntomcat give 500 internal errors when browser try to download a static file.\nbut it should give 404 error if the file really not exist;\n\nso I think it has some relationship with another problem I come accross in this thread;\n\nalso:\nthe context is configured in server.xml using follow sentence.\n\n<Context crossContext=\"true\" cachingAllowed=\"false\" docBase=\"/home/tomcat/userdata/LiveVideoServer/streams\" path=\"/LiveVideoServer/streams\" reloadable=\"true\"> </Context>"}, {"count": 8, "tags": [], "bug_id": 54178, "attachment_id": null, "is_private": false, "id": 165950, "time": "2013-03-18T07:32:10Z", "creator": "wan_jm@126.com", "creation_time": "2013-03-18T07:32:10Z", "text": "here is the Connector configure.\n\n\n<Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"7200000\"\n               keepAliveTimeout=\"7200000\"\n               maxKeepAliveRequests=\"-1\"\n               acceptCount=\"100\"\n               enableLookups=\"false\"\n               disableUploadTimeout=\"true\"\n               maxHttpHeaderSize=\"8192\"\n               redirectPort=\"8443\" URIEncoding=\"UTF-8\" />"}, {"count": 9, "tags": [], "bug_id": 54178, "attachment_id": null, "is_private": false, "id": 165983, "time": "2013-03-19T09:04:59Z", "creator": "markt@apache.org", "creation_time": "2013-03-19T09:04:59Z", "text": "Again, this is an application issue not a Tomcat bug. Use the users list."}, {"count": 10, "tags": [], "bug_id": 54178, "text": "hi Sir, it is reproducible now. after I debug with tomcat source code and my application. first, I will give my analysis; second I will give the opinion that it is a bug, hope I am right; third my question;\n\nfirst: analysis\n  I found that if there is a run-time exception(exclude IOException) in the implication of onComplete, then this exception will be catched in AbstractProtocol$AbstractConnectionHandler.process() in line AbstractProtocol.java:581, and processor is release in line 598 of the same file. \n\nbut the code assume onComplete successfully returned and released org.apache.catalina.connector.Request in function asyncDispatch; So in this scenario Request is not recycled.\n\nwhen the processor is reused again, the browser request will be the processed by the Request that is not recycled, as there is servlet in it. then the request is handled by the wrong servlet.\n\n\nsecond: reason;\n  you may tell me that it is the bug of the application; but in fact if this happens in tomcat, request to another application in the same tomcat will got error result it the client request meets the processor which contains the Request that is not recycled;\n\n  I think tomcat should make sure that one application deployed in it should not be interrupt by others? do you think so?\n\nthird:\n I want to know why AsyncContextImpl.fireOnComplete catches only IOException instead of Throwable; then maybe the above is fixed;\n\n\nSorry for my interrupt.\n\nthanks;", "id": 166316, "attachment_id": null, "creator": "wan_jm@126.com", "creation_time": "2013-04-02T09:10:49Z", "time": "2013-04-02T09:10:49Z", "is_private": false}, {"count": 11, "text": "I've run into this also. Test case attached -- watch for log messages like\n\nWARNING: Value of test-attribute: test-value\n\nwhen you browse to /badlyBehaved. I believe that test attribute should never be anything other than null here.", "bug_id": 54178, "is_private": false, "id": 166778, "time": "2013-04-23T08:29:14Z", "creator": "leighjames@queer.geek.nz", "creation_time": "2013-04-23T08:29:14Z", "tags": [], "attachment_id": null}, {"count": 12, "tags": [], "creator": "leighjames@queer.geek.nz", "text": "Created attachment 30221\nTest case.\n\nDemonstrates that state from the previous request is available in subsequent requests after exception in an AsyncListener.", "id": 166779, "attachment_id": 30221, "bug_id": 54178, "creation_time": "2013-04-23T08:30:57Z", "time": "2013-04-23T08:30:57Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 54178, "attachment_id": null, "is_private": false, "id": 166811, "time": "2013-04-24T11:43:35Z", "creator": "markt@apache.org", "creation_time": "2013-04-24T11:43:35Z", "text": "(In reply to comment #10)\n> hi Sir, it is reproducible now. after I debug with tomcat source code and my\n> application. first, I will give my analysis; second I will give the opinion\n> that it is a bug, hope I am right; third my question;\n\nThanks for the additional work to get to the bottom of this.\n\n> first: analysis\n\nThe analysis skips over a few stages but is correct. A RuntimeException in a AsyncListener leads to the problems observed because the Request object is not recycled.\n\n> second: reason;\n\nApplications should not be throwing RuntimeExceptions in an AsyncListener but equally it makes sense for Tomcat to protect against that happening in case they do.\n\n> third:\n>  I want to know why AsyncContextImpl.fireOnComplete catches only IOException\n> instead of Throwable; then maybe the above is fixed;\n\nOnly IOException were caught as they were the only ones that should have been thrown. I agree the fix is to catch Throwable (well almost - there are some Throwables that should never be caught but Tomcat has utility code to handle that).\n\nThe fix has been applied to trunk and 7.0.x and will be included in 7.0.40 onwards."}, {"count": 14, "tags": [], "bug_id": 54178, "attachment_id": null, "is_private": false, "id": 167131, "time": "2013-05-10T08:37:26Z", "creator": "markt@apache.org", "creation_time": "2013-05-10T08:37:26Z", "text": "The Tomcat security team has determined that this bug has security implications. It has been assigned CVE-2013-2071. The fix was included in the 7.0.40 release."}]
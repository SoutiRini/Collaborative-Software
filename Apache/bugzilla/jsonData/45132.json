[{"count": 0, "tags": [], "bug_id": 45132, "attachment_id": 22075, "id": 117351, "time": "2008-06-04T19:43:36Z", "creator": "javalai@gmail.com", "creation_time": "2008-06-04T19:43:36Z", "is_private": false, "text": "Created attachment 22075\nMain program to demostrate the difference between url-decoders.\n\nGiven a unicode character (codepoint: \\u5A77) and its double-byte representation 0xB4 0x40 in Cp950/Big5, the microsoft internet explorer 7.0 in asian versions of windows will encode this character to a url-encoded string \"%B4@\". This result is correct according to RFC-1738 since the @ (at) is a reserved character.\n\nHowever, using java.net.URLDecoder of IBM Java 5.0 SDK to decode \"%B4@\" with Cp950 encoding will result in a single character \"@\" which means the precedent \"%B4\" is truncated after the decoding. Using the Sun Java 5.0/6.0 SDK version results in a strange \\ufffd\\u0040. Fortunately using Apache Commons URLCodec will decode \"%B4@\" with Cp950 encoding to the original unicode character(codepoint: \\u5A77). Obviously Apache Commons URLCodec gives better compatibility than java.net.URLDecoder.\n\nI first found this problem in the constructor of org.apache.jmeter.protocol.http.util.HTTPArgument. But I think this problem will apply to every DBCS characters whose low-byte is smaller than 0x7F(127). As a result the ues of java.net.URLDecoder in JMeter codebase should be reconsidered.\n\nI will attach a simple main program to demostrate the difference.\n\nRegards,"}, {"count": 1, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "http://en.wikipedia.org/wiki/Code_page_950\n\"The code page is not registered with IANA[1], and hence, is not a standard to communicate information over the internet\"\n\nFrom URLDecoder#decode:\nThe World Wide Web Consortium Recommendation</a> states that UTF-8 should be used. Not doing so may introduce incompatibilites.\nhttp://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\n\n\nAlso see this:\nhttps://issues.apache.org/jira/browse/BEEHIVE-128%3Bjsessionid=005A8EF479B71980C1C5025BC26AD299?actionOrder=desc\n\nShould we implement the fix by replacing java.net.URLDecoder by commons-codec implementation (60 places in JMeter code)?", "id": 151223, "time": "2011-11-05T13:43:21Z", "bug_id": 45132, "creation_time": "2011-11-05T13:43:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45132, "attachment_id": null, "id": 151429, "time": "2011-11-12T11:46:37Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-11-12T11:46:37Z", "is_private": false, "text": "*** Bug 38115 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "creator": "takatsuru.tetsuya@nttcom.co.jp", "text": "Indeed, W3C recommends to use UTF-8 in HTTP arguments, but does not require. In fact, Non UTF-8 encoding can be used in the most browsers (including IE, Firefox, etc...).\n\nReasonable number of Japanese web services use SHIFT-JIS (or CP932), and is faced with this problem. Default charset of Windows is SHIFT-JIS, so web services running on Windows often use SHIFT-JIS. Websites for cell-phone use SHIFT-JIS, because it is standard by Japanese wireless carriers.\n(I don't know the situation in other languages such as Chinese, Korean.)\n\nThere is an workaround that we can send correct request by turning off the \"Encode?\" checkbox in the HTTPSampler's Argument table, and writing encoded strings manually. However, the task consume much time, in particular, a lot of samplers in a test plan.\n\nSo I think this fix is useful enough.", "id": 151461, "time": "2011-11-14T06:34:51Z", "bug_id": 45132, "creation_time": "2011-11-14T06:34:51Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 45132, "attachment_id": null, "id": 159833, "time": "2012-06-08T16:34:15Z", "creator": "sebb@apache.org", "creation_time": "2012-06-08T16:34:15Z", "is_private": false, "text": "(In reply to comment #0)\n> \n> Given a unicode character (codepoint: \\u5A77) and its double-byte\n> representation 0xB4 0x40 in Cp950/Big5, the microsoft internet explorer 7.0\n> in asian versions of windows will encode this character to a url-encoded\n> string \"%B4@\". This result is correct according to RFC-1738 since the @ (at)\n> is a reserved character.\n\nRFC-1738 section 2.2 (towards the end) says:\n\n   Thus, only alphanumerics, the special characters \"$-_.+!*'(),\", and\n   reserved characters used for their reserved purposes may be used\n   unencoded within a URL.\n\nIn this case, the \"@\" is not being used for its reserved purpose, and therefore must be encoded - if it is being used in a URL.\n\nRFC-1738 only addresses URLs, so neither allows nor denies the use of \"%B4@\" rather than \"%B4%40\" elsewhere in an HTTP request, for example in a POST body."}, {"count": 5, "tags": [], "creator": "sebb@apache.org", "text": "Seems to me that encoding the double byte character 0xB4 0x40 as %B4@ is just plain wrong; it should be encoded as %B4%40 always.\n\nDo other versions of IE behave the same? Other browsers?\n\nHaving said that, if this is a common occurrence, it might be worth updating JMeter to provide a work-round.\n\nNote that URLEncoder/URLDecoder are badly named, as they are really only intended for application/x-www-form-urlencoded data, e.g. for POST data or the query part of a URL. In particular, in encodes space as '+' whereas space in URLs needs to be encoded as %20.", "id": 160317, "time": "2012-06-28T10:50:15Z", "bug_id": 45132, "creation_time": "2012-06-28T10:50:15Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 45132, "attachment_id": null, "text": "(In reply to comment #3)\n> Indeed, W3C recommends to use UTF-8 in HTTP arguments, but does not require.\n> In fact, Non UTF-8 encoding can be used in the most browsers (including IE,\n> Firefox, etc...).\n\nYes, but they must create the correctly encoded URLs.\nFor example browsers allow spaces in URLs, but they convert them to %20.\n\n> Reasonable number of Japanese web services use SHIFT-JIS (or CP932), and is\n> faced with this problem. Default charset of Windows is SHIFT-JIS, so web\n> services running on Windows often use SHIFT-JIS. Websites for cell-phone use\n> SHIFT-JIS, because it is standard by Japanese wireless carriers.\n> (I don't know the situation in other languages such as Chinese, Korean.)\n> \n> There is an workaround that we can send correct request by turning off the\n> \"Encode?\" checkbox in the HTTPSampler's Argument table, and writing encoded\n> strings manually. However, the task consume much time, in particular, a lot\n> of samplers in a test plan.\n> \n> So I think this fix is useful enough.\n\nIt would be very useful to have a JMX test plan with two samplers.\nOne with the original Japanese characters, and the other with the equivalent encoding.\n\nCould someone with a Japanese PC provide one please?", "id": 160318, "time": "2012-06-28T10:56:13Z", "creator": "sebb@apache.org", "creation_time": "2012-06-28T10:56:13Z", "is_private": false}, {"count": 7, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "I am closing issue as call for examples didn't get any response so we are not able to reproduce.\nIf somebody is kind enough to give a test pla showing issue against a public site or some test data then we will reopen.", "id": 162273, "time": "2012-09-19T06:24:56Z", "bug_id": 45132, "creation_time": "2012-09-19T06:24:56Z", "is_private": false}]
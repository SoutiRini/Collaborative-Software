[{"count": 0, "tags": [], "bug_id": 41940, "is_private": false, "text": "This simplified subclass of BuildFileTest fails:\n\n  public class MyAntTestClass extends BuildFileTest {\n    public void testBaseline() {\n  \t  Assert.assertEqual(new String(\"foo\"),\"foo\",\"foo\");\n    }\n  }\n\nbecause the new BuildFileTest 'tearDown' assumes \n'getTargets()' returns non-null. \n\nWith Ant 1.7 BuildFileTest will die for simple internal test cases \nwhere no build file is involved but the larger testsuite includes\nbuild-file dependent tests (hence the subclassing).", "id": 100856, "time": "2007-03-24T10:51:15Z", "creator": "wascallywabbit@earthling.net", "creation_time": "2007-03-24T10:51:15Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41940, "text": "I had a look and modified BFT (rev 532247):\n\n    protected void tearDown() throws Exception {\n        if (project == null) {\n            /*\n             * Maybe the BuildFileTest was subclassed and there is\n             * no initialized project. So we could avoid getting a\n             * NPE.\n             * If there is an initialized project getTargets() does\n             * not return null as it is initialized by an empty\n             * HashSet.\n             */\n            return;\n        }\n        final String tearDown = \"tearDown\";\n        if (project.getTargets().containsKey(tearDown)) {\n            project.executeTarget(tearDown);\n        }\n    }\n\n\nI modified your example\n\npublic class MyAntTestClass extends org.apache.tools.ant.BuildFileTest {\n    public void testBaseline() {\n  \t  junit.framework.Assert.assertTrue(true);\n    }\n    \n    public static void main(String[] args) {\n        junit.textui.TestRunner.run(MyAntTestClass.class);\n    }\n}\n\n<project default=\"junit\">\n\n    <path id=\"cp\">\n        <fileset dir=\"c:/seu/junit3.8.2/junit3.8.2\" includes=\"*.jar\" />\n        <fileset dir=\"${ant.home}/lib\" includes=\"*.jar\" />\n        <pathelement path=\".\" />\n    </path>\n\n    <javac srcdir=\".\" destdir=\".\" classpathref=\"cp\" />\n\n    <target name=\"junit\">\n        <junit>\n            <test name=\"MyAntTestClass\" />\n            <classpath refid=\"cp\" />\n        </junit>\n    </target>\n\n    <target name=\"run\">\n        <java classname=\"MyAntTestClass\">\n            <classpath refid=\"cp\" />\n        </java>\n    </target>\n\n</project>\n\nWhen using \"run\" (the JUnit Text-TestRunner) that works. When using \"junit\"\n(Ant's JUnitTestRunner) the test fails ...\n\n\nCould you have a look?", "id": 102279, "time": "2007-04-25T01:15:41Z", "creator": "jan@materne.de", "creation_time": "2007-04-25T01:15:41Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 41940, "is_private": false, "text": "No veto, so change to fixed.", "id": 103405, "time": "2007-05-21T01:52:54Z", "creator": "jan@materne.de", "creation_time": "2007-05-21T01:52:54Z", "attachment_id": null}]
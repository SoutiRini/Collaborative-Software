[{"count": 0, "tags": [], "bug_id": 49114, "attachment_id": null, "is_private": false, "id": 136105, "time": "2010-04-13T20:45:49Z", "creator": "ng@fennek.dk", "creation_time": "2010-04-13T20:45:49Z", "text": "If a directory made available through Apache WEB DAV module, contains folders / directories made / linked with NTFS junction, these folders are not shown in a directory listing.\n\nI have really tried to figure out why, and as far I can tell it is because the function building the directory tree don't accept NTFS junctions as directories or any other kind of file for that matter.\n\nLooking in the source code I found this some code in repos.c that might be responsible for building the directory tree.\n\nelse if (fsctx->info1.finfo.filetype == APR_DIR) {\n            apr_size_t save_path_len = fsctx->path1.cur_len;\n            apr_size_t save_uri_len = fsctx->uri_buf.cur_len;\n            apr_size_t save_path2_len = fsctx->path2.cur_len;\n...\n\n== APR_DIR tells me that somewhere in the code APR_DIR is valid for normal folders but not for NTFS junctions... can that be changed or will it be possible to say something like this.\n\nelse if (fsctx->info1.finfo.filetype == APR_DIR || APR_NTFS_JUNCTION)..\n\nOh when activating the INDEXES option in a site config, the function generating the HTML to show the folder / file structure is able to show the directories made with NTFS junction. But I couldn't find that code, to see how it recognized directories made with NTFS junctions."}, {"count": 1, "tags": [], "text": "Presuming there is no flaw, NTFS junctions are handled exactly as unix symlinks.\nOf course a symlink may be to a file or directory, while NTFS junctions may\nonly resolve to a directory.\n\nSo if the information is gathered from an apr_file_stat, it should show as the\ntarget of the junction, and if its gathered as an lstat, it would be a symlink.", "attachment_id": null, "id": 136106, "creator": "wrowe@apache.org", "time": "2010-04-13T20:51:11Z", "bug_id": 49114, "creation_time": "2010-04-13T20:51:11Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> Presuming there is no flaw, NTFS junctions are handled exactly as unix\n> symlinks.\n> Of course a symlink may be to a file or directory, while NTFS junctions may\n> only resolve to a directory.\n> \n> So if the information is gathered from an apr_file_stat, it should show as the\n> target of the junction, and if its gathered as an lstat, it would be a symlink.\n\nThat comment riddle me a bit, if I have understood it correctly you are saying, that as the code is now, it should be able to return a NTFS junction as a directory. It is more a matter of me setting up Apache or NTFS junction correctly.\n\nI have only read some of the source code for mod_dav, I haven't set up a prober build environment as I lack the skills to do so. I'll wish I could test and see how the code handles the NTFS junctions directories, when making a directory listing but having no previous experience in building Apache or writing C code I find that a bit hard. \n\nWhat I can tell you is that even though mod_dav doesn't accept my NTFS junction as directory when making a listing of the directory where the junction folder is. (long sentence sorry), I'm able to browse/copy/upload the contents of the junction folder, when writing the complete path in my web_dav client.", "attachment_id": null, "id": 136180, "creator": "ng@fennek.dk", "time": "2010-04-15T02:04:37Z", "bug_id": 49114, "creation_time": "2010-04-15T02:04:37Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 49114, "text": "Are there any suggestion on how I can solve this problem??\n\nIf it is a change in Apcache config or the way I make NTFS junctions, are there anyone who would like to come with suggestions on how I go about that???", "id": 136288, "time": "2010-04-21T05:04:18Z", "creator": "ng@fennek.dk", "creation_time": "2010-04-21T05:04:18Z", "is_private": false, "attachment_id": null}]
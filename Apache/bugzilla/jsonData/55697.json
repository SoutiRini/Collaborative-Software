[{"attachment_id": null, "tags": [], "bug_id": 55697, "is_private": false, "count": 0, "id": 170789, "time": "2013-10-23T23:36:59Z", "creator": "gbriggs@amazon.com", "creation_time": "2013-10-23T23:36:59Z", "text": "The ability to report skipped tests was recently added to the Ant JUnit reporting (in March 2013 / bug 54670). When the \"haltonerror\" or \"haltonfailure\" directives are used in the junit task, and the build does halt before running all the tests, then the resulting skipped tests should be reported via this mechanism as well. (Whether you consider this a bug or a feature, it would still be good.)\n\nSoftware versions used to repro:\n Apache Ant(TM) from SVN, version 1.9.3alpha retrieved and compiled on October 21 2013\n Apache Ant(TM) version 1.9.2 also has this issue\n JUnit 4.11 (with Hamcrest-core 1.3)\n Java version 1.7.0\n\nHow to reproduce:\n Create the following files and then run \"ant\" in the directory. Note that the test \"TestFail.test3\" was skipped, but there is no XML report of this getting skipped. The build directory should contain a report stating that a test was skipped.\n\n== build.xml ==\n<project name=\"Repro\" default=\"tests\" basedir=\".\">\n\n  <target name=\"compile\">\n     <mkdir dir=\"build\"/>\n     <javac srcdir=\"src\" destdir=\"build\">\n        <classpath><path path=\"../hamcrest-core-1.3.jar:../junit-4.11.jar\"/></classpath>\n     </javac>\n     <jar jarfile=\"Repro.jar\" basedir=\"build\"/>\n  </target>\n  \n  <target name=\"tests\" depends=\"compile\">\n     <junit \n        haltonerror=\"true\" haltonfailure=\"true\"\n        outputtoformatters=\"true\" showoutput=\"true\">\n        <formatter type=\"xml\" usefile=\"true\"/>\n        <test name=\"com.amazon.TestFailFail\" todir=\"build\"/>\n        <test name=\"com.amazon.TestFail\" todir=\"build\"/>\n        <classpath><path path=\"../hamcrest-core-1.3.jar:../junit-4.11.jar:Repro.jar\"/></classpath>\n     </junit>\n  </target>\n\n  <target name=\"clean\">\n     <delete dir=\"build\"/>\n     <delete file=\"Repro.jar\"/>\n  </target>\n\n</project>\n\n== src/com/amazon/TestFailFail.java ==\npackage com.amazon;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n\npublic class TestFailFail\n{\n    @Test public void test1()\n    { fail(\"I am test1 fail.\"); }\n\n    @Test public void test2()\n    { fail(\"I am test2 fail.\"); }\n}\n\n== src/com/amazon/TestFail.java ==\npackage com.amazon;\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n\npublic class TestFail\n{\n    @Test public void test3()\n    { fail(\"I am test3 fail.\"); }\n}"}, {"count": 1, "tags": [], "creator": "mclarke@apache.org", "text": "I'm not sure there is a suitable fix for this.\n\nIf one of the classes that hasn't been executed was to return a suite (therefore providing more tests to be run), be invoked by a runner that identifies methods differently (different annotations or by alternative naming conventions), use parameterised tests, or anything else that alters the number of tests beyond what can be counted statically with the @Test annotation then we're going to fail to count these tests properly.\n\nWe can count methods annotated with @Test (JUnit 4) or named test* (JUnit 3) in un-executed classes, but this may lead to an inconsistent count when compared to a successfully run suite. The ignored count was developed for tests that the user had specifically ignored whilst tests were being executed, not that Ant hadn't tried to execute, and I think trying to change it is just going to cause further issues.\n\nI therefore propose closing this as with a \"won't fix\" status.", "id": 171516, "time": "2013-12-01T10:58:35Z", "bug_id": 55697, "creation_time": "2013-12-01T10:58:35Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 55697, "is_private": false, "id": 171539, "time": "2013-12-03T05:19:37Z", "creator": "bodewig@apache.org", "creation_time": "2013-12-03T05:19:37Z", "tags": [], "text": "The alternative is to document the count is a \"best guess\"."}, {"count": 3, "tags": [], "bug_id": 55697, "is_private": false, "text": "I would propose that the existing JUnit functionality be used to enumerate the tests. We should not be duplicating logic about test case discovery in Ant. The JUnit 4 Runner interface includes a method \"testCount()\" which returns the number of tests to be run. Ant could instantiate the Runners to see how many test cases exist, and simply not call run() as it usually would have. This covers the Parameterized test use case as well.", "id": 171540, "time": "2013-12-03T05:55:57Z", "creator": "gbriggs@amazon.com", "creation_time": "2013-12-03T05:55:57Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 22170, "attachment_id": null, "id": 42242, "time": "2003-08-06T11:02:11Z", "creator": "tommy@tommysvensson.net", "creation_time": "2003-08-06T11:02:11Z", "is_private": false, "text": "I was running version 1.5 when I found this problem. I then got version 1.5.3 to\nse if the problem still existed, and it did!\n\nThe problem is that when executing an external task defined by a taskdef it\nfails with a ClassNotFoundException on a class that is part of the classpath\nspecified in the taskdef. The funny thing is that most of the code it executes\nup to the exception resides in the same classpath as the class it does not find.\nThe class does exists and is compiled. \n\nThe next interesting thing is that if I setup exactly the same classpath in a\nshell before running ant it works fine!! \n\nMy taskdef has the following structure:\n<taskdef ...>\n  <classpath>\n    <pathelement .../>\n    ...\n    <pathelement .../>\n  </classpath>\n</taskdef>\n\nI tried the reverseLoader=\"true\" without success. Not that I really understand\nwhat that argument is supposed to do. \n\nI also tried to arrange the taskdef classpath in exactly the same order as I had\nit in the shell where it worked. This didn't help either. I have double checked,\ntripple checked, quadripple checked the classpath in the taskdef. It is 100%\ncorrect, no misspelling, typos, etc.All jar files exists in the place\nreferenced.  And as I said above, it does find and runs other classes in the\nsame classpath as the class it does not find exists in. \n\nI can also add that the specific classpath that it fails to find the class in is\nnot a jar file, but a path on disk, the applications source tree. The class it\nfails to find is an interface. The task uses this interface with the\njava.lang.reflect.Proxy class if that could cause some conflict with the\nAntClassLoader ? The problem first occured after the task started using the\nProxy class. \n\nHere is a stacktrace:\nCaused by: java.lang.ClassNotFoundException: Path\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:199)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:267)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n        at\norg.apache.tools.ant.AntClassLoader.findBaseClass(AntClassLoader.java:1104)\n        at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:938)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:141)\n        at xobint.XMLObjectProxy.childElementGetter(XMLObjectProxy.java:226)\n        at xobint.XMLObjectProxy.getter(XMLObjectProxy.java:174)\n        at xobint.XMLObjectProxy.invoke(XMLObjectProxy.java:126)\nThe XMLObjectProxy class is the one using the java.lang.reflect.Proxy class.\nThen again, the Proxy class is not part of the stacktrace chain! But there is a\nClass.forName() which is where the class is requsted. Requesting interfaces with\n Class.forName() is also new since the problem started. \n\nI can also point out that xobint.XMLObjectProxy which calls the Class.forName()\nresides in a jar file and the Path class it tries to find resides in another\nclasspath (the application source tree). Both are specified as classpaths in the\ntaskdef. The Path interface is the first interface loaded with Class.forName(),\nso there is none of these cases that actually do work.\n\nCould it be the AntClassLoader that fails? When the classpath is setup in the\nshell before running ant the classes are probably already loaded by the system\nclassloader and the AntClassLoader is not used. When Class.forName() is used to\nget a class it only looks in the same classpath as the class that made the call?\nI'm just speculating here!\n\nThis problem is annoying since it requires a platform dependend wrapper script\nfor ant that sets up the classpath before calling ant. \n\n/Tommy"}, {"count": 1, "tags": [], "bug_id": 22170, "attachment_id": null, "id": 42243, "time": "2003-08-06T11:13:31Z", "creator": "bodewig@apache.org", "creation_time": "2003-08-06T11:13:31Z", "is_private": false, "text": "Most likely you have part of the classes your task needs on the system classpath\nand a different part is not there.\n\n\n\n*** This bug has been marked as a duplicate of 6606 ***"}, {"count": 2, "tags": [], "text": "perhaps a cleanly defined classpathref as per Bug 31555 helps here", "attachment_id": null, "id": 72965, "creator": "hauser@acm.org", "time": "2005-03-29T14:10:00Z", "bug_id": 22170, "creation_time": "2005-03-29T14:10:00Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "bug_id": 59805, "text": "org.apache.poi.util.LocaleUtil (introduced in 3.13) causes memory leak.\n\nThe following error messages are logged when redeploying an application which uses POI 3.14:\n\n06-Jul-2016 11:05:48.760 SEVERE [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [ROOT] created a ThreadLocal with key of type [org.apache.poi.util.LocaleUtil$2] (value [org.apache.poi.util.LocaleUtil$2@198b08c]) and a value of type [java.util.Locale] (value [ja_JP]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time totry and avoid a probable memory leak.\n\n06-Jul-2016 11:05:48.769 SEVERE [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web application [ROOT] created a ThreadLocal with key of type [org.apache.poi.util.LocaleUtil$1] (value [org.apache.poi.util.LocaleUtil$1@14dfba9]) and a value of type [sun.util.calendar.ZoneInfo] (value [sun.util.calendar.ZoneInfo[id=\"Asia/Tokyo\",offset=32400000,dstSavings=0,useDaylight=false,transitions=10,lastRule=null]]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.", "count": 0, "id": 192159, "time": "2016-07-06T03:18:46Z", "creator": "apptaro@gmail.com", "creation_time": "2016-07-06T03:18:46Z", "is_private": false}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "text": "Thanks for the report.\n\nI think Catalina is reporting a false positive here.\n\nLooking over the short LocaleUtil class [1], there are two ThreadLocal constants, but the thread local wrapping is necessary for the purpose of this class: to globally set the locale and timezone.\n\nThe constants are static final, so the memory consumption doesn't increase with time or usage.\n\nThe only change I would make to this class is making the class final.\n\nI am closing this as invalid, unless someone provides a solution that I'm not seeing. There should be no need to destroy and recreate threads due to LocaleUtil.\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/util/LocaleUtil.java?view=markup", "id": 192160, "time": "2016-07-06T04:16:11Z", "bug_id": 59805, "creation_time": "2016-07-06T04:16:11Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 59805, "text": "(In reply to Javen O'Neal from comment #1)\n> I think Catalina is reporting a false positive here.\n\nI take that back. This may cause a PermGen memory leak since every thread holds onto a reference to the ThreadLocal subclass.ly.\n\nSearching for ThreadLocal memory leak, I got this result:\nhttps://stackoverflow.com/questions/17968803/threadlocal-memory-leak\n\nLog4j had a similar problem on their ThreadLocalMap.\nThis memory leak was fixed here: https://svn.apache.org/viewvc/logging/log4j/trunk/src/main/java/org/apache/log4j/MDC.java?annotate=1231361&diff_format=f&pathrev=1231361#l177\n\nThe solution is to call ThreadLocal.remove somewhere...", "count": 2, "id": 192161, "time": "2016-07-06T04:53:35Z", "creator": "onealj@apache.org", "creation_time": "2016-07-06T04:53:35Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 59805, "text": "Thank you for the quick response.\n\nMaybe you could add LocaleUtil.resetUserTimeZone and LocaleUtil.resetUserLocale methods and call ThreadLocal.remove in them. Then it will be user's responsibility to avoid memory leaks.\n\nThere are other ways to address the issue, such as:\n- call ThreadLocal.remove for each request using a servlet filter (Filter.doFilter)\n- clear all references to the ThreadLocal when a servlet context is destroyed (ServletContextListener.contextDestroyed)\nBut it seems those solutions are too much.", "count": 3, "id": 192162, "time": "2016-07-06T05:37:49Z", "creator": "apptaro@gmail.com", "creation_time": "2016-07-06T05:37:49Z", "is_private": false}, {"count": 4, "tags": [], "creator": "kiwiwings@apache.org", "text": "Looking at the second response in stackoverflow - what would happen if we store Strings in the ThreadLocal and lookup the Timezone/Locale via those Strings?\n\nAs Locale and TimeZone are classes from the root classloader, are they connected to the web application classloader? So would it be any different than storing Strings?\n\nWhat confuses me is the term \"created a ThreadLocal with key of type [org.apache.poi.util.LocaleUtil$1]\" ... so does this mean, even when storing Strings there's always a reference to the webapp classloader? (... or is this a week reference and doesn't count?)", "id": 192166, "time": "2016-07-06T08:27:06Z", "bug_id": 59805, "creation_time": "2016-07-06T08:27:06Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Made LocaleUtil a static class in r1751601\nAdded unit tests for LocaleUtil in r1751620 and r1751629\nAdded LocaleUtil#resetUserLocale and #resetUserTimeZone in r1751641", "id": 192167, "time": "2016-07-06T09:25:43Z", "bug_id": 59805, "creation_time": "2016-07-06T09:25:43Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "apptaro@gmail.com", "is_private": false, "text": "Thank you for your quick response.\n\nLooking at the code, and I think it's better to remove initialValue from ThreadLocal, and make getUserTimeZone/getUserLocal return default when nothing has been set, like this:\n\npublic static TimeZone getUserTimeZone() {\n    TimeZone timeZone = userTimeZone.get();\n    return (timeZone != null) ? timeZone : TimeZone.getDefault();\n}\n\nOtherwise, users need to call resetUserTimeZone/resetUserLocale to avoid memory leaks even when they have not called setUserTimeZone/setUserLocale.", "id": 192187, "time": "2016-07-07T00:44:24Z", "bug_id": 59805, "creation_time": "2016-07-07T00:44:24Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "text": "Are there any issues with two subsequent calls to LocaleUtil.getUserTimeZone returning different values?\n\nI guess this is consistent with two calls to TimeZone.getDefault()...", "id": 192188, "time": "2016-07-07T00:56:26Z", "bug_id": 59805, "creation_time": "2016-07-07T00:56:26Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 59805, "text": "(In reply to apptaro from comment #6)\n> public static TimeZone getUserTimeZone() {\n>     TimeZone timeZone = userTimeZone.get();\n>     return (timeZone != null) ? timeZone : TimeZone.getDefault();\n> }\n\nApplied in r1751739.", "count": 8, "id": 192189, "time": "2016-07-07T01:10:56Z", "creator": "onealj@apache.org", "creation_time": "2016-07-07T01:10:56Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 59805, "attachment_id": null, "is_private": false, "id": 192190, "time": "2016-07-07T01:22:39Z", "creator": "apptaro@gmail.com", "creation_time": "2016-07-07T01:22:39Z", "text": "Looks good. Thank you very much."}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "text": "Updated changelog in r1751740.", "id": 192191, "time": "2016-07-07T02:01:37Z", "bug_id": 59805, "creation_time": "2016-07-07T02:01:37Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "text": "Updated unit test to reset LocaleUtil ThreadLocals in r1751741.", "id": 192192, "time": "2016-07-07T02:10:07Z", "bug_id": 59805, "creation_time": "2016-07-07T02:10:07Z", "is_private": false, "attachment_id": null}]
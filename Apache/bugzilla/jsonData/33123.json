[{"count": 0, "tags": [], "text": "Hello,\n\nat the moment, its very easy to keep small/medium webservers unavailable to the \nworld by just running hundreds of processes on a single machine, which each keep \none connection to the webserver alive. These processes just have to open a tcp-\nsocket to the server and try to read rom it...so wait for nothing. Wehn the \nserver says Timeout after (default) 300 seconds, the concerned process closes \nthe socket and opens a new one.\nRunning enough of these processes to even use many (200+) of the apaches \nconnection queue-places (ListenBackLog) prevents any other client from issuing \nhis HTTP request and getting an answer bevor Apache timeout or user to loose his \npatience. Settin up a higher ListenBackLog so makes no sense. Setting op mor \nMaxClients does, but it does also consume more RAM...\nThe above described \"attack\" consumes a bandwith between 1 and 3 KByte/sec.\n\nI found things about SYN-Flood, but I think this is something very different.\nOk, if you know howto, you can prevent this single attacker machine by IPTABLE \netc. but tahts no real solution. With DynIP (like in Germany), you just \nreconnect your internet and get a new Address.\n\nMaybe a Directive for limiting the amount of connections for each ClientIP could \nhelp?\n\ngreets,\n\nHolger", "attachment_id": null, "bug_id": 33123, "id": 69743, "time": "2005-01-16T18:03:13Z", "creator": "spam.only@muenster.de", "creation_time": "2005-01-16T18:03:13Z", "is_private": false}, {"count": 1, "tags": [], "creator": "nd@perlig.de", "is_private": false, "id": 69744, "attachment_id": null, "bug_id": 33123, "creation_time": "2005-01-16T18:13:12Z", "time": "2005-01-16T18:13:12Z", "text": "You might want to have a look at mod_security (<http://www.modsecurity.org/>)."}]
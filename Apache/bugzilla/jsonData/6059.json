[{"count": 0, "tags": [], "creator": "cyrille_list@ingenosya.com", "text": "Element to deploy EJB on JOnAS... \n\n- JonasDeploymentTool.java is a new file\njakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java\n- EjbJar.patch is a patch for\njakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java\n- ejb.html.patch is a patch for the documentation\njakarta-ant/docs/manual/OptionalTasks/ejb.html\n\nYou can find the files on the ant-dev mailing list or enclosed :\n\nIndex: jakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java,v\nretrieving revision 1.26\ndiff -u -r1.26 EjbJar.java\n--- jakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java\t10 Jan 2002 13:59:35 -0000\t1.26\n+++ jakarta-ant/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java\t24 Jan 2002 20:58:38 -0000\n@@ -275,6 +275,21 @@\n     }\n \n     /**\n+     * Create a jonas nested element used to configure a\n+     * deployment tool for JOnAS server.\n+     *\n+     * @return the deployment tool instance to be configured.\n+     */\n+    public JonasDeploymentTool createJonas() {\n+        log(\"JOnAS deployment tools\",  Project.MSG_VERBOSE);\n+        \n+        JonasDeploymentTool tool = new JonasDeploymentTool();\n+        tool.setTask(this);\n+        deploymentTools.add(tool);\n+        return tool;\n+    }    \n+    \n+    /**\n      * Create a nested element for weblogic when using the Toplink\n      * Object- Relational mapping.\n      *\n\n======================================================\n\nIndex: jakarta-ant/docs/manual/OptionalTasks/ejb.html\n===================================================================\nRCS file: /home/cvspublic/jakarta-ant/docs/manual/OptionalTasks/ejb.html,v\nretrieving revision 1.12\ndiff -u -r1.12 ejb.html\n--- jakarta-ant/docs/manual/OptionalTasks/ejb.html\t10 Jan 2002 08:48:31 -0000\t1.12\n+++ jakarta-ant/docs/manual/OptionalTasks/ejb.html\t24 Jan 2002 21:00:01 -0000\n@@ -16,11 +16,12 @@\n   <li>Tim Fennell (<a href=\"mailto:tfenne@rcn.com\">tfenne@rcn.com</a>)</li>\n   <li>Martin Gee (<a\nhref=\"mailto:martin.gee@icsynergy.com\">martin.gee@icsynergy.com</a>)</li>\n   <li>Conor MacNeill (<a\nhref=\"mailto:conor@cortexebusiness.com.au\">conor@cortexebusiness.com.au</a>)</li>\n+  <li>Cyrille Morvan (<a\nhref=\"mailto:cmorvan@ingenosya.com\">cmorvan@ingenosya.com</a>)</li>\n   <li>Greg Nelson (<a href=\"mailto:greg@netscape.com\">greg@netscape.com</a>)</li>\n </ul>\n \n <p>Version @VERSION@<br>\n-$Id: ejb.html,v 1.12 2002/01/10 08:48:31 bodewig Exp $\n+$Id: ejb.html,v 1.2 2002/01/24 21:00:01 cyrille Exp $\n </p>\n <hr>\n <h2>Table of Contents</h2>\n@@ -47,15 +48,11 @@\n   jboss 2.1</a> and above EJB servers</li>\n   <li><a href=\"http://www.bea.com\" target=\"_top\">Weblogic</a>\n    4.5.1, 5.1, and 6.0 EJB servers</li>\n+  <li><a href=\"http://www.objectweb.com/jonas/\" target=\"_top\">JOnAS</a>\n+   2.4 Open Source EJB server</li>   \n </ul>\n   Over time we expect further optional tasks  to support additional EJB Servers.\n \n-<p>Ant provides a number of optional tasks for developing \n-<a href=\"http://java.sun.com/products/ejb\" target=\"_top\">Enterprise Java Beans\n(EJBs)</a>. \n-In general these tasks are specific to the particular vendor's EJB Server. At\npresent the tasks support\n-<a href=\"http://www.bea.com\" target=\"_top\">Weblogic</a> 4.5.1 and 5.1 EJB\nservers. Over time we expect further optional tasks \n-to support additional EJB Servers. \n-</p>\n <hr>\n <h2><a name=\"ejbtasks\">EJB Tasks</a></h2>\n <table border=\"1\" cellpadding=\"5\">\n@@ -64,11 +61,12 @@\n  <tr><td><a href=\"#ddcreator\">ddcreator</a></td><td colspan=\"2\">Weblogic\n4.5.1</td></tr>\n  <tr><td><a href=\"#ejbc\">ejbc</a></td><td colspan=\"2\">Weblogic 4.5.1</td></tr>\n  <tr><td><a href=\"#iplanet-ejbc\">iplanet-ejbc</a></td><td colspan=\"2\">iPlanet\nApplication Server 6.0</td></tr>\n- <tr><td rowspan=\"5\"><a href=\"#ejbjar\">ejbjar</a></td><td colspan=\"2\"\nalign=\"center\"><b>Nested Elements</b></td></tr>\n+ <tr><td rowspan=\"6\"><a href=\"#ejbjar\">ejbjar</a></td><td colspan=\"2\"\nalign=\"center\"><b>Nested Elements</b></td></tr>\n  <tr><td><a href=\"BorlandEJBTasks.html\">borland</a></td><td>Borland Application\nServer 4.5</td></tr>\n  <tr><td><a href=\"#ejbjar_jboss\">jBoss</a></td><td>jBoss</td></tr>\n  <tr><td><a href=\"#ejbjar_iplanet\">iPlanet</a></td><td>iPlanet Application\nServer 6.0</td></tr>\n  <tr><td><a href=\"#ejbjar_weblogic\">weblogic</a></td><td>Weblogic 5.1 &amp;\n6.0</td></tr>\n+ <tr><td><a href=\"#ejbjar_jonas\">jonas</a></td><td>JOnAS 2.4</td></tr>\n  <tr><td><a href=\"#wlrun\">wlrun</a></td><td colspan=\"2\">Weblogic 4.5.1, 5.1\n&amp; 6.0</td></tr>\n  <tr><td><a href=\"#wlstop\">wlstop</a></td><td colspan=\"2\">Weblogic 4.5.1, 5.1\n&amp; 6.0</td></tr>\n \n@@ -531,6 +529,7 @@\n   <li>Jboss 2.1 and above</li>\n   <li>Weblogic 5.1/6.0 session/entity beans using the weblogic.ejbc tool</li>\n   <li>TOPLink for WebLogic 2.5.1-enabled entity beans</li>\n+  <li><a href=\"http://www.objectweb.org/jonas/\">JOnAS</a> 2.4 Open Source EJB\nserver</li>\n </ul>\n \n \n@@ -1282,12 +1281,224 @@\n             &lt;dtd publicId=\"-//Sun Microsystems, Inc.//DTD iAS Enterprise\nJavaBeans 1.0//EN\"\n                  location=\"${ias.home}/APPS/IASEjb_jar_1_0.dtd\"/>\n     &lt;/ejbjar></pre>\n+<h3><a name=\"ejbjar_jonas\">\n+<h3>JOnAS (Java Open Application Server) element</h3>\n+</a>\n+</h3>\n+<p>The &lt;jonas&gt; nested element is used to build JOnAS-specific stubs \n+and skeletons thanks to the GenIC specific tool, and construct a JAR file \n+which may be deployed to the JOnAS Application Server. The build process \n+will always determine if the EJB stubs/skeletons and the EJB-JAR file are \n+up to date, and it will do the minimum amount of work required. </p>\n+\n+<p>Like the WebLogic element, a naming convention for the EJB descriptors\n+ is most commonly used to specify the name for the completed JAR file.  For\n+ example, if the EJB descriptor ejb/Account.xml (or ejb/Account-ejb-jar.xml ) \n+ is found in the descriptor directory, the jonas element will search for a\n+ JOnAS-specific EJB descriptor file named ejb/Account-jonas-ejb-jar.xml \n+ (if it isn't found, the task will fail) and a JAR file named ejb/Account.jar \n+ will be written in the destination directory. Note that when the EJB \n+ descriptors are added to the JAR file, they are automatically  renamed \n+ META-INF/ejb-jar.xml and META-INF/jonas-ejb-jar.xml.<br><br>\n+ But if you prefer, you can use JOnAS convention naming and keep your \n+ XML file name : ejb/Account.xml and ejb/jonas-Account.xml, a JAR file named \n+ ejb/Account.jar will be written in the destination directory. \n+  \n+ </p>\n+<p>Of course, this naming behavior can be modified by specifying attributes\n+ in the ejbjar task (for example, basejarname, basenameterminator, and flatdestdir)\n+ as well as the iplanet element (for example, suffix).  Refer to the appropriate\n+ documentation for more details.</p>\n+<h3> Parameters:</h3>\n+<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n+  <tbody>\n+    <tr>\n+      <td valign=\"Top\"><b>Attribute</b></td>\n+      <td valign=\"Top\"><b>Description</b></td>\n+      <td align=\"Center\" valign=\"Top\"><b>Required</b></td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">destdir</td>\n+      <td valign=\"Top\">The base directory into which the generated JAR files\n+ will be written. Each JAR file is written in directories which correspond\n+ to their location within the \"descriptordir\" namespace.</td>\n+      <td align=\"Center\" valign=\"Top\">Yes</td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">jonasroot<br>\n+      </td>\n+      <td valign=\"Top\">The root directory for JOnAS. <br>\n+      </td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">Yes<br>\n+      </div>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">workdir<br>\n+      </td>\n+      <td valign=\"Top\">The work directory to use. Specify where to place\n+the generated files, before to add to the jar. The directory should be empty.\n+If omitted, it defaults to a temporary directory.<br>\n+      </td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">No<br>\n+      </div>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">cleanworkdir<br>\n+      </td>\n+      <td valign=\"Top\">Clean the working directory after work.\n+         If omitted, it defaults to false, but your jar will contain\n+         wrong files if you don't clean the workdir yourself.<br>\n+         Temporary working directory is always cleaned.<br>\n+      </td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">No<br>\n+      </div>\n+      </td>\n+    </tr>    \n+    <tr>\n+      <td valign=\"Top\">classpath</td>\n+      <td valign=\"Top\">The classpath used when generating EJB stubs and skeletons. \n+      If omitted, the classpath specified in the \"ejbjar\" parent task will \n+      be used. If specified, the classpath elements will be prepended to the \n+      classpath specified in the parent \"ejbjar\" task (see also the ORB \n+      attribute documentation below). Note that nested \"classpath\" elements \n+      may also be used.</td>\n+      <td align=\"Center\" valign=\"Top\">No</td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">keepgenerated</td>\n+      <td valign=\"Top\">Indicates whether or not the Java source files which\n+ are generated by GenIC will be saved or automatically deleted. If \"yes\", the\n+source files will be retained.  If omitted, it defaults to \"no\". </td>\n+      <td align=\"Center\" valign=\"Top\">No</td>\n+    </tr>\n+  <tr>\n+    <td valign=\"top\">keepgeneric</td>\n+    <td valign=\"top\">This controls whether the generic file used as input to\n+                     GenIC is retained.</td>\n+    <td valign=\"top\" align=\"center\">No, defaults to false</td>\n+  </tr>\n+  <tr>\n+    <td valign=\"top\">secpropag</td>\n+    <td valign=\"top\">Modify the RMI Skel. and Stub. to implement the \n+                     implicit propagation of the security context (note that \n+                     the transactionnal context is always provided).\n+                     </td>\n+    <td valign=\"top\" align=\"center\">No, defaults to false.</td>\n+  </tr>\n+    <tr>\n+      <td valign=\"Top\">orb<br>\n+      </td>\n+      <td>Choose your ORB : RMI, JEREMIE, DAVID, ... If omitted, it defaults\n+to the one present in classpath. If specified, the corresponding JOnAS JAR is\n+automatically added to the classpath. <br>\n+      </td>\n+      <td align=\"Center\" valign=\"Top\">No</td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">noGENIC<br>\n+      </td>\n+      <td valign=\"Top\">If this attribute is set to true, JOnAS's GenIC will\n+ not be run on the EJB jar. Use this if you prefer to\n+ run GenIC at deployment time.</td>\n+      <td>\n+      <div align=\"Center\">No</div>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">suffix</td>\n+      <td>String value appended to the JAR filename when creating each JAR.\n+  If omitted, it defaults to \".jar\". </td>\n+      <td align=\"Center\" valign=\"Top\">No</td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">verbose<br>\n+      </td>\n+      <td valign=\"Top\">Indicates whether or not to use -verbose switch. If\n+omitted, it defaults to \"no\".</td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">No<br>\n+      </div>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">compiler<br>\n+      </td>\n+      <td valign=\"Top\">This allows for the selection of a different compiler\n+                      to be used for the compilation of the generated Java\n+                      files. This could be set, for example, to Jikes to\n+                     compile with the Jikes compiler. If this is not set\n+                    and the <code>build.compiler</code> property is set\n+                    to jikes, the Jikes compiler will be used. If this\n+                   is not desired, the value \"<code>default</code>\"\n+                 may be given to use the default compiler<br>\n+      </td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">No<br>\n+      </div>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td valign=\"Top\">args<br>\n+      </td>\n+      <td valign=\"Top\">Add additional args to GenIC.<br>\n+      </td>\n+      <td valign=\"Top\">\n+      <div align=\"Center\">No<br>\n+      </div>\n+      </td>\n+    </tr>\n+  </tbody>\n+</table>\n+<p>As noted above, the jonas element supports additional &lt;classpath&gt;\n+ nested elements. </p>\n+<h3>Examples</h3>\n+<p>This example shows ejbjar being used to generate deployment jars using\n+ a  JOnAS EJB container. This example requires the naming standard to be\n+ used for  the deployment descriptors. Using this format will create a ejb\n+ jar file for each variation of &nbsp;'*-jar.xml' that is found in the\n+deployment  descriptor  directory.&nbsp;</p>\n+<pre>\n+      &lt;ejbjar srcdir=\"${build.classes}\"\n+              descriptordir=\"${descriptor.dir}\"&gt;\n+        &lt;jonas destdir=\"${deploymentjars.dir}\"\n+             jonasroot=\"${jonas.root}\"\n+             orb=\"RMI\" /&gt;\n+        &lt;include name=\"**/*.xml\"/&gt;\n+        &lt;exclude name=\"**/jonas-*.xml\"/&gt;\n+        &lt;support dir=\"${build.classes}\"&gt;\n+             &lt;include name=\"**/*.class\"/&gt;\n+        &lt;/support&gt;\n+      &lt;/ejbjar&gt;\n+</pre>\n+<p></p>\n+<p>This example shows ejbjar being used to generate a single deployment jar\n+  using a JOnAS EJB container. This example does require the deployment\n+  descriptors to use the naming standard. This will create only one ejb jar\n+ file - 'TheEJBJar.jar'.</p>\n+<pre>\n+      &lt;ejbjar srcdir=\"${build.classes}\"\n+              descriptordir=\"${descriptor.dir}\"\n+              basejarname=\"TheEJBJar\"&gt;\n+        &lt;jonas destdir=\"${deploymentjars.dir}\" \n+                  jonasroot=\"${jonas.root}\"\n+                  suffix=\".jar\"\n+                  classpath=\"${descriptorbuild.classpath}\" /&gt;\n+        &lt;include name=\"**/ejb-jar.xml\"/&gt;\n+        &lt;exclude name=\"**/jonas-ejb-jar.xml\"/&gt;\n+      &lt;/ejbjar&gt;\n+</pre>\n \n <hr>\n <p align=\"center\">Copyright &copy; 2001 Apache Software Foundation. All rights\n Reserved.</p>\n+\n+\n </body>\n \n </html>\n-\n \n======================================================\n\n\n/*\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution, if\n *    any, must include the following acknowlegement:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowlegement may appear in the software itself,\n *    if and wherever such third-party acknowlegements normally appear.\n *\n * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written\n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\"\n *    nor may \"Apache\" appear in their names without prior written\n *    permission of the Apache Group.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\npackage org.apache.tools.ant.taskdefs.optional.ejb;\n\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.types.Path;\nimport org.apache.tools.ant.taskdefs.Java;\nimport org.apache.tools.ant.util.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Hashtable;\n\n\n/**\n * The deployment tool to add the jonas specific deployment descriptors to \n * the ejb jar file. JONAS only requires one additional file jonas-ejb-jar.xml.\n *\n * @author <a href=\"cmorvan@ingenosya.com\">Cyrille Morvan</a>,\n *       <a href=\"http://www.ingenosya.com\">Ingenosya France</a>\n * @version 1.0\n * @see EjbJar#createJonas\n */\npublic class JonasDeploymentTool extends GenericDeploymentTool {\n\n    protected static final String JONAS_DD = \"jonas-ejb-jar.xml\";\n\n    protected static final String GENIC_CLASS =\n               \"org.objectweb.jonas_ejb.tools.GenWholeIC\";\n\n    protected static final String OLD_GENIC_CLASS =\n               \"org.objectweb.jonas_ejb.tools.GenIC\";\n\n    protected static final String DEFAULT_ORB = \"RMI\";\n\n    /** Instance variable that stores the suffix for the jonas jarfile. */\n    private String jarSuffix = \".jar\";\n\n    /**\n     * Instance variable that stores the fully qualified classname\n     * of the JOnAS GenIC compiler.\n     **/\n    private String genicClass;\n\n    private String additionalArgs = \"\";\n\n    /** Instance variable that determines do not delete intermediate generated\nsource files */\n    private boolean keepgenerated = false;\n    \n    /** as websphere and WebLogic taskes */\n    private boolean keepGeneric = false;    \n    \n    /** Instance variable that determines the JOnAS Root directory */\n    private File jonasroot;\n\n    /** Instance variable that determines if we could -secpropag */\n    private boolean secpropag = false;\n    \n    /** Instance variable that determines the ouput directory */\n    private File ouputdirectory;\n\n    /** Instance variable that determines the path to the compiler to use */\n    private String compiler;\n\n    /** Instance variable that determines if GenIC is verbose */\n    private boolean verbose;\n\n    /** Instance variable that determines the ORB to use (RMI, JEREMIE, DAVID)*/\n    private String orb;\n\n    /** clean the working directory after work **/\n    private boolean cleanWorkDir = false;\n\n    private boolean noGENIC = false;\n\n    /**\n     * set the name of the GenIC compiler class.\n     **/\n    public void setGenicClass(final String inGenicClass) {\n       genicClass = inGenicClass;\n    }\n\n\n    /**\n     * Set the ORB to construct classpath.\n     * @param inValue RMI, JEREMIE, DAVID,...\n     **/\n    public void setOrb(final String inValue) {\n       orb = inValue;\n    }\n\n    /**\n     * The compiler (switch <code>-javac</code>) to use.\n     **/\n    public void setCompiler(final String inCompiler) {\n        compiler = inCompiler;\n    }  \n    \n    /**\n     * Setter used to store the value of keepGeneric\n     * @param inValue a string, either 'true' or 'false'.\n     */\n    public void setKeepgeneric(boolean inValue) {\n        this.keepGeneric = inValue;\n    }\n    \n    /**\n     * GenIC verbose or not\n     * @param inValue either 'true' or 'false'\n     **/\n    public void setVerbose(final boolean inValue) {\n        verbose = inValue;\n    }\n\n    /**\n     * GenIC run or not.\n     * @param inValue run or not\n     **/\n    public void setNoGENIC(final boolean inValue) {\n        noGENIC = inValue;\n    }\n\n    /**\n     * Sets whether -keepgenerated is passed to GenIC (that is,\n     * the .java source files are kept).\n     * @param inValue either 'true' or 'false'\n     **/\n    public void setKeepgenerated(final boolean inValue) {\n        keepgenerated = inValue;\n    }\n\n    /**\n     * set the jonas root directory (-Dinstall.root=).\n     * \n     * @throws BuildException if the file doesn't exist.\n     **/\n    public void setJonasroot(final File inValue) {\n      jonasroot = inValue;\n    }\n\n    /**\n     * Modify the RMI Skel. and Stub. to implement\n     * the implicit propagation of the transactionnal\n     * context and security context.\n     * For JOnAS 2.4 and next.\n     */\n    public void setSecpropag(final boolean inValue) {\n      secpropag = inValue;\n    }\n    \n    /**\n     * set the output directory (-d ...).\n     * <br>\n     *  \n     * It's the GenIC working directory. It's not the\n     * DestDir, which is the 'jar' destination directory. \n     * \n     * @param inValue a file \n     **/\n    public void setOuputdir(final File inValue) {\n        ouputdirectory = inValue;\n    }\n    \n    \n    /**\n     * set the output directory (-d ...).\n     * Same as setOuputdir().\n     * <br>\n     * But do not override setDestDir()\n     **/\n    public void setWorkdir(final File inValue) {\n        setOuputdir(inValue);\n    }\n\n    /**\n     * Clean the specified Work dir after work.\n     * @param inValue true : clean ; false : not clean\n     **/\n    public void setCleanworkdir(final boolean inValue) {\n        cleanWorkDir = inValue;\n    }\n    \n    /**\n     * Setter used to store the suffix for the generated JOnAS jar file.\n     * @param inString the string to use as the suffix.\n     **/\n    public void setSuffix(String inString) {\n        this.jarSuffix = inString;\n    }\n\n    /**\n     * sets some additional args to send to GenIC.\n     **/\n    public void setArgs(final String inArgs) {\n        additionalArgs = inArgs;\n    }\n\n    /**\n     * Add any vendor specific files which should be included in the\n     * EJB Jar.\n     * @param aDdPrefix MyDirectories/MyEjb- or MyDirectories/ \n     **/\n    protected void addVendorFiles(final Hashtable someEjbFiles,final String\naDdPrefix) {\n        // Use Ant Naming convention\n        File aJonasDD = new File(getConfig().descriptorDir,aDdPrefix + JONAS_DD);\n        if ( aJonasDD.exists() ) {\n            someEjbFiles.put(META_DIR + JONAS_DD, aJonasDD);\n        } else {\n            // try with JOnAS Naming convention\n            if( ! addJonasVendorFiles(someEjbFiles,aDdPrefix) ) {            \n               log(\"Unable to locate JOnAS deployment descriptor. It was\nexpected to be in \"\n                  + aJonasDD.getPath() + \". Or please use JOnAS naming convention.\",\n                  Project.MSG_WARN);\n            }\n        }\n    }\n\n    /**\n     * try to add JOnAS specific file, using JOnAS naming convention.\n     * For example : jonas-Account.xml or jonas-ejb-jar.xml\n     * @param aDdPrefix MyDirectories/MyEjb- or MyDirectories/ \n     * @return true if Ok\n     */\n    private boolean addJonasVendorFiles(final Hashtable someEjbFiles,final\nString aDdPrefix) {\n      // replace \\ by /, remove the last letter ( a dash - )\n      final String aCanonicalDD = aDdPrefix.replace('\\\\',\n'/').substring(0,aDdPrefix.length()-1);\n      final int index = aCanonicalDD.lastIndexOf('/') + 1;\n      String anEjbJarName = aCanonicalDD.substring(index);\n      if( \"ejb\".equals( anEjbJarName ) ) {\n         anEjbJarName = \"ejb-jar\";\n      } \n      final String aNewDdPrefix = \n            aDdPrefix.substring(0,index) + \"jonas-\" + anEjbJarName + \".xml\";\n      File aConventionNamingJonasDD = new\nFile(getConfig().descriptorDir,aNewDdPrefix);\n      \n      log(\"look for jonas specific file using jonas naming convention \" +\naConventionNamingJonasDD,\n                           Project.MSG_VERBOSE);\n\n      if( aConventionNamingJonasDD.exists() ) {\n         someEjbFiles.put(META_DIR + JONAS_DD,aConventionNamingJonasDD);\n         return true;\n      } else {\n         return false;\n      }\n    }\n    \n    // include javadoc\n    // Determine the JAR filename (without filename extension)\n    protected String getJarBaseName(String aDescriptorFileName) {\n      String aBaseName = null;\n      EjbJar.Config aConfig = super.getConfig();\n      if (aConfig.namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR)) {\n         // try to find JOnAS specific convention name\n         // ??/MyEJB.xml ( I will find later the ??/jonas-MyEJB.xml file )\n         if( aDescriptorFileName.indexOf(aConfig.baseNameTerminator) == -1 ) {\n            String aCanonicalDescriptor = aDescriptorFileName.replace('\\\\','/');\n            int lastSeparatorIndex = aCanonicalDescriptor.lastIndexOf('/');\n            int endBaseName;\n            if (lastSeparatorIndex != -1) {\n                endBaseName = aDescriptorFileName.indexOf(\".xml\",\nlastSeparatorIndex);\n            } else {\n                endBaseName = aDescriptorFileName.indexOf(\".xml\");\n            }\n\n            if (endBaseName != -1) {\n                aBaseName = aDescriptorFileName.substring(0, endBaseName);\n            }\n         }\n      }\n\n      if( aBaseName == null ) {\n         // else get standard BaseName\n         aBaseName = super.getJarBaseName(aDescriptorFileName);\n      }\n      return aBaseName;\n    }\n\n    /**\n     * Method used to encapsulate the writing of the JAR file. Iterates over the\n     * filenames/java.io.Files in the Hashtable stored on the instance variable\n     * ejbFiles.\n     **/\n    protected void writeJar(String baseName, File jarFile, Hashtable files,\n                            String publicId) throws BuildException {\n        // need to create a generic jar first.\n        File genericJarFile = super.getVendorOutputJarFile(baseName);\n        super.writeJar(baseName, genericJarFile, files, publicId);\n\n        // todo ? if (alwaysRebuild || isRebuildRequired(genericJarFile, jarFile))\n        buildJOnASJar(baseName,genericJarFile, jarFile,files,publicId);\n        \n        if (!keepGeneric) {\n             log(\"deleting generic jar \" + genericJarFile.toString(),\n                           Project.MSG_VERBOSE);\n             genericJarFile.delete();\n        }\n    }\n\n    /**\n     * Helper method invoked by execute() for each JOnAS jar to be built.\n     * Encapsulates the logic of constructing a java task for calling\n     * GenIC and executing it.\n     * @param inBaseName the base name of the jar\n     * @param inSourceJar java.io.File representing the source (EJB1.1) jarfile.\n     * @param someFiles list of files in the jar. Add all the new genererated\n     *   files.\n     * @param inPublicId the link to DTD (to rewrite JAR).\n     **/\n    private void buildJOnASJar(final String inBaseName,\n                               final File inSourceJar,final File inDestJar,\n                               final Hashtable someFiles,String inPublicId) {\n      org.apache.tools.ant.taskdefs.Java aJavaTask = null;\n      String aGenIcClassName = genicClass;\n      boolean isOldGenIC = false;\n      boolean isTempDirectory = false;\n      File anOutputDirectoryFile = null;\n\n      // do not call GenIC\n      // only copy file\n      if (noGENIC) {\n         try {\n            FileUtils.newFileUtils().copyFile(inSourceJar, inDestJar);\n            return;\n         } catch (IOException anIOException) {\n            throw new BuildException(\"Unable to write EJB jar\", anIOException);\n         }\n      }\n         \n      // call GenIC\n      try {\n         aJavaTask = (Java) getTask().getProject().createTask(\"java\");\n         aJavaTask.setTaskName(\"genic\");\n         if(aGenIcClassName == null) {\n            aGenIcClassName = GENIC_CLASS;\n         } else if( OLD_GENIC_CLASS.equals(aGenIcClassName) ){\n            isOldGenIC = true;\n         }\n         // ClassName\n         aJavaTask.setClassname(aGenIcClassName);\n\n         // JVM Args\n         if( jonasroot == null ) {\n            throw new BuildException(\"Error : set the jonasroot parameter\");\n         } else if ( ! jonasroot.isDirectory() ) {\n            log(\"jonasroot attribut '\" + jonasroot + \"' is not a valid directory\",\n                     Project.MSG_ERR);\n         }\n         aJavaTask.createJvmarg().setValue(\"-Dinstall.root=\" + jonasroot);\n         File aJavaPolicyFile = new File(jonasroot,\"config/java.policy\");\n         if( aJavaPolicyFile.exists() ) {\n            aJavaTask.createJvmarg().setValue(\"-Djava.security.policy=\" \n                                        + aJavaPolicyFile.toString() );\n         }\n\n         // Find output directory\n         if( ouputdirectory == null ) {\n            anOutputDirectoryFile = createTempDir();\n            isTempDirectory = true;\n            log(\"Use temporary output directory : \" +\n                  anOutputDirectoryFile, Project.MSG_VERBOSE);\n         } else {\n            anOutputDirectoryFile = ouputdirectory;\n            log(\"Use temporary specific output directory : \" + \n                  anOutputDirectoryFile, Project.MSG_VERBOSE);\n         }\n         aJavaTask.createArg().setValue(\"-d\");\n         aJavaTask.createArg().setFile(anOutputDirectoryFile);\n\n         // Additionnal args\n         aJavaTask.createArg().setLine(additionalArgs);\n         // KeepGenerated\n         if (keepgenerated) {\n             aJavaTask.createArg().setValue(\"-keepgenerated\");\n         }\n\n         // Verbose\n         if( verbose ) {\n            aJavaTask.createArg().setValue(\"-verbose\");\n         }\n         \n         // -secpropag\n         if( secpropag ) {\n            aJavaTask.createArg().setValue(\"-secpropag\");            \n         }\n         \n         // The compiler\n         if (compiler == null) {\n             // try to use the compiler specified by build.compiler. Right now\nwe are just going\n             // to allow Jikes\n             String aBuildCompiler =\ngetTask().getProject().getProperty(\"build.compiler\");\n             if (\"jikes\".equals(aBuildCompiler) ) {\n                 aJavaTask.createArg().setValue(\"-javac\");\n                 aJavaTask.createArg().setValue(\"jikes\");\n             }\n         } else {\n            if( ! \"default\".equals( compiler ) ) {\n               aJavaTask.createArg().setValue(\"-javac\");\n               aJavaTask.createArg().setLine(compiler);\n            }\n         }\n\n         if( ! isOldGenIC ) {\n            // the add in jar features is buggy...\n            aJavaTask.createArg().setValue(\"-noaddinjar\");\n         }\n\n         aJavaTask.createArg().setValue(inSourceJar.getPath());\n\n         // try to create the classpath for the correct ORB\n         Path aClasspath = getCombinedClasspath();\n         if( aClasspath == null ) {\n            aClasspath = new Path(getTask().getProject());\n         }\n         if( orb != null ) {\n            String aOrbJar = new File(jonasroot,\"lib/\" + orb +\n\"_jonas.jar\").toString();\n            String aConfigDir = new File(jonasroot,\"config/\").toString();\n            Path aJOnASOrbPath = new Path(aClasspath.getProject(),\n                                       aOrbJar + File.pathSeparator + aConfigDir );\n            aClasspath.append( aJOnASOrbPath );\n         } else {\n            log(\"No ORB propertie setup (RMI, JEREMIE, DAVID).\", Project.MSG_WARN);\n         }\n\n         // append the output directory\n         aClasspath.append( new Path(aClasspath.getProject(),\nanOutputDirectoryFile.getPath()));\n         aJavaTask.setClasspath(aClasspath);\n\n\n         aJavaTask.setFork(true);\n\n         log(\"Calling \" + aGenIcClassName + \" for \" + inSourceJar.toString(),\n                       Project.MSG_VERBOSE);\n\n         if (aJavaTask.executeJava() != 0) {\n             throw new BuildException(\"GenIC reported an error\");\n         }\n         // Update the list of files.\n         addAllFiles(anOutputDirectoryFile,\"\",someFiles);\n\n         // rewrite the jar with the new files\n         super.writeJar(inBaseName, inDestJar, someFiles, inPublicId);\n     } catch(BuildException aBuildException) {\n         throw aBuildException;\n     } catch (Exception e) {\n         // Have to catch this because of the semantics of calling main()\n         String msg = \"Exception while calling \" + aGenIcClassName + \". Details:\n\" + e.toString();\n         throw new BuildException(msg, e);\n     } finally {\n        if( isTempDirectory && anOutputDirectoryFile != null) {\n           dellAllFiles(anOutputDirectoryFile);\n        } else if( cleanWorkDir && anOutputDirectoryFile != null) {\n           dellAllFilesInside(anOutputDirectoryFile);\n        }\n     }\n   }\n\n    /**\n     * Get the vendor specific name of the Jar that will be output. The\n     * modification date of this jar will be checked against the dependent\n     * bean classes.\n     **/\n    File getVendorOutputJarFile(final String aBaseName) {\n        return new File(getDestDir(), aBaseName + jarSuffix);\n    }\n\n   /**\n    * Create a free tempory directory for GenIC output.\n    * @return directory file\n    * @throws BuildException if impossible to find a tempory directory\n    **/\n   private File createTempDir() {\n      String theTempDir = System.getProperty(\"java.io.tmpdir\");\n      int anIndice = 0;\n      File aFile = null;\n      // try 50 times to find a free tempory directory\n      while( anIndice < 50 && aFile == null) {\n         aFile = new File(theTempDir,\"GenicTemp\" + anIndice);\n         if(aFile.exists()) {\n            anIndice++;\n            aFile = null;\n         }\n      }\n\n      if( aFile == null ) {\n         // problem in temp directory\n         throw new BuildException(\"Impossible to find a free temp directory for\noutput.\");\n      } else {\n         aFile.mkdirs();\n         return(aFile);\n      }\n   }\n\n\n   /**\n    * add all files in anOutputDir + ' / ' + aRootDir to the HashTable someFiles.\n    *\n    * @param anOutputDir - start directory\n    * @param aCurrentDirOrFile - a sub-directory to scan or a file to add.\n    * @param someFiles - where to add the files\n    **/\n   private void addAllFiles(final File anOutputDir, String aCurrentDirOrFile,\nHashtable someFiles) {\n      File aFile = new File(anOutputDir,aCurrentDirOrFile);\n      if( aFile.isDirectory() ) {\n         String aCurrentDir = \"\";\n         if( aCurrentDirOrFile.length() > 0 ) {\n            aCurrentDir = aCurrentDirOrFile + '/';\n         }\n         File theFiles[] = aFile.listFiles();\n         for(int i=0;i<theFiles.length;i++) {\n            addAllFiles(anOutputDir,aCurrentDir + theFiles[i].getName(),someFiles);\n         }\n      } else {\n         // is a file\n         someFiles.put(aCurrentDirOrFile,aFile);\n      }\n   }\n\n   /**\n    * Delete all the files in a directory\n    * @param aFile file to delete recursivly\n    **/\n   private void dellAllFiles(File aFile) {\n     if(aFile.isDirectory()) {\n       File someFiles[] = aFile.listFiles();\n       for(int i=0;i<someFiles.length;i++) {\n          dellAllFiles(someFiles[i]);\n       }\n     }\n     aFile.delete();\n   }\n   \n   /**\n    * Delete all the files in a directory, but don't delete\n    * the directory\n    * @param aFile file to delete recursivly\n    **/   \n   private void dellAllFilesInside(File aFile) {\n     if(aFile.isDirectory()) {\n       File someFiles[] = aFile.listFiles();\n       for(int i=0;i<someFiles.length;i++) {\n          dellAllFiles(someFiles[i]);\n       }\n     }      \n   }\n   \n}\n// eof./*\n * The Apache Software License, Version 1.1\n *\n * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights\n * reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. The end-user documentation included with the redistribution, if\n *    any, must include the following acknowlegement:\n *       \"This product includes software developed by the\n *        Apache Software Foundation (http://www.apache.org/).\"\n *    Alternately, this acknowlegement may appear in the software itself,\n *    if and wherever such third-party acknowlegements normally appear.\n *\n * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n *    Foundation\" must not be used to endorse or promote products derived\n *    from this software without prior written permission. For written\n *    permission, please contact apache@apache.org.\n *\n * 5. Products derived from this software may not be called \"Apache\"\n *    nor may \"Apache\" appear in their names without prior written\n *    permission of the Apache Group.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n */\npackage org.apache.tools.ant.taskdefs.optional.ejb;\n\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.types.Path;\nimport org.apache.tools.ant.taskdefs.Java;\nimport org.apache.tools.ant.util.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Hashtable;\n\n\n/**\n * The deployment tool to add the jonas specific deployment descriptors to \n * the ejb jar file. JONAS only requires one additional file jonas-ejb-jar.xml.\n *\n * @author <a href=\"cmorvan@ingenosya.com\">Cyrille Morvan</a>,\n *       <a href=\"http://www.ingenosya.com\">Ingenosya France</a>\n * @version 1.0\n * @see EjbJar#createJonas\n */\npublic class JonasDeploymentTool extends GenericDeploymentTool {\n\n    protected static final String JONAS_DD = \"jonas-ejb-jar.xml\";\n\n    protected static final String GENIC_CLASS =\n               \"org.objectweb.jonas_ejb.tools.GenWholeIC\";\n\n    protected static final String OLD_GENIC_CLASS =\n               \"org.objectweb.jonas_ejb.tools.GenIC\";\n\n    protected static final String DEFAULT_ORB = \"RMI\";\n\n    /** Instance variable that stores the suffix for the jonas jarfile. */\n    private String jarSuffix = \".jar\";\n\n    /**\n     * Instance variable that stores the fully qualified classname\n     * of the JOnAS GenIC compiler.\n     **/\n    private String genicClass;\n\n    private String additionalArgs = \"\";\n\n    /** Instance variable that determines do not delete intermediate generated\nsource files */\n    private boolean keepgenerated = false;\n    \n    /** as websphere and WebLogic taskes */\n    private boolean keepGeneric = false;    \n    \n    /** Instance variable that determines the JOnAS Root directory */\n    private File jonasroot;\n\n    /** Instance variable that determines if we could -secpropag */\n    private boolean secpropag = false;\n    \n    /** Instance variable that determines the ouput directory */\n    private File ouputdirectory;\n\n    /** Instance variable that determines the path to the compiler to use */\n    private String compiler;\n\n    /** Instance variable that determines if GenIC is verbose */\n    private boolean verbose;\n\n    /** Instance variable that determines the ORB to use (RMI, JEREMIE, DAVID)*/\n    private String orb;\n\n    /** clean the working directory after work **/\n    private boolean cleanWorkDir = false;\n\n    private boolean noGENIC = false;\n\n    /**\n     * set the name of the GenIC compiler class.\n     **/\n    public void setGenicClass(final String inGenicClass) {\n       genicClass = inGenicClass;\n    }\n\n\n    /**\n     * Set the ORB to construct classpath.\n     * @param inValue RMI, JEREMIE, DAVID,...\n     **/\n    public void setOrb(final String inValue) {\n       orb = inValue;\n    }\n\n    /**\n     * The compiler (switch <code>-javac</code>) to use.\n     **/\n    public void setCompiler(final String inCompiler) {\n        compiler = inCompiler;\n    }  \n    \n    /**\n     * Setter used to store the value of keepGeneric\n     * @param inValue a string, either 'true' or 'false'.\n     */\n    public void setKeepgeneric(boolean inValue) {\n        this.keepGeneric = inValue;\n    }\n    \n    /**\n     * GenIC verbose or not\n     * @param inValue either 'true' or 'false'\n     **/\n    public void setVerbose(final boolean inValue) {\n        verbose = inValue;\n    }\n\n    /**\n     * GenIC run or not.\n     * @param inValue run or not\n     **/\n    public void setNoGENIC(final boolean inValue) {\n        noGENIC = inValue;\n    }\n\n    /**\n     * Sets whether -keepgenerated is passed to GenIC (that is,\n     * the .java source files are kept).\n     * @param inValue either 'true' or 'false'\n     **/\n    public void setKeepgenerated(final boolean inValue) {\n        keepgenerated = inValue;\n    }\n\n    /**\n     * set the jonas root directory (-Dinstall.root=).\n     * \n     * @throws BuildException if the file doesn't exist.\n     **/\n    public void setJonasroot(final File inValue) {\n      jonasroot = inValue;\n    }\n\n    /**\n     * Modify the RMI Skel. and Stub. to implement\n     * the implicit propagation of the transactionnal\n     * context and security context.\n     * For JOnAS 2.4 and next.\n     */\n    public void setSecpropag(final boolean inValue) {\n      secpropag = inValue;\n    }\n    \n    /**\n     * set the output directory (-d ...).\n     * <br>\n     *  \n     * It's the GenIC working directory. It's not the\n     * DestDir, which is the 'jar' destination directory. \n     * \n     * @param inValue a file \n     **/\n    public void setOuputdir(final File inValue) {\n        ouputdirectory = inValue;\n    }\n    \n    \n    /**\n     * set the output directory (-d ...).\n     * Same as setOuputdir().\n     * <br>\n     * But do not override setDestDir()\n     **/\n    public void setWorkdir(final File inValue) {\n        setOuputdir(inValue);\n    }\n\n    /**\n     * Clean the specified Work dir after work.\n     * @param inValue true : clean ; false : not clean\n     **/\n    public void setCleanworkdir(final boolean inValue) {\n        cleanWorkDir = inValue;\n    }\n    \n    /**\n     * Setter used to store the suffix for the generated JOnAS jar file.\n     * @param inString the string to use as the suffix.\n     **/\n    public void setSuffix(String inString) {\n        this.jarSuffix = inString;\n    }\n\n    /**\n     * sets some additional args to send to GenIC.\n     **/\n    public void setArgs(final String inArgs) {\n        additionalArgs = inArgs;\n    }\n\n    /**\n     * Add any vendor specific files which should be included in the\n     * EJB Jar.\n     * @param aDdPrefix MyDirectories/MyEjb- or MyDirectories/ \n     **/\n    protected void addVendorFiles(final Hashtable someEjbFiles,final String\naDdPrefix) {\n        // Use Ant Naming convention\n        File aJonasDD = new File(getConfig().descriptorDir,aDdPrefix + JONAS_DD);\n        if ( aJonasDD.exists() ) {\n            someEjbFiles.put(META_DIR + JONAS_DD, aJonasDD);\n        } else {\n            // try with JOnAS Naming convention\n            if( ! addJonasVendorFiles(someEjbFiles,aDdPrefix) ) {            \n               log(\"Unable to locate JOnAS deployment descriptor. It was\nexpected to be in \"\n                  + aJonasDD.getPath() + \". Or please use JOnAS naming convention.\",\n                  Project.MSG_WARN);\n            }\n        }\n    }\n\n    /**\n     * try to add JOnAS specific file, using JOnAS naming convention.\n     * For example : jonas-Account.xml or jonas-ejb-jar.xml\n     * @param aDdPrefix MyDirectories/MyEjb- or MyDirectories/ \n     * @return true if Ok\n     */\n    private boolean addJonasVendorFiles(final Hashtable someEjbFiles,final\nString aDdPrefix) {\n      // replace \\ by /, remove the last letter ( a dash - )\n      final String aCanonicalDD = aDdPrefix.replace('\\\\',\n'/').substring(0,aDdPrefix.length()-1);\n      final int index = aCanonicalDD.lastIndexOf('/') + 1;\n      String anEjbJarName = aCanonicalDD.substring(index);\n      if( \"ejb\".equals( anEjbJarName ) ) {\n         anEjbJarName = \"ejb-jar\";\n      } \n      final String aNewDdPrefix = \n            aDdPrefix.substring(0,index) + \"jonas-\" + anEjbJarName + \".xml\";\n      File aConventionNamingJonasDD = new\nFile(getConfig().descriptorDir,aNewDdPrefix);\n      \n      log(\"look for jonas specific file using jonas naming convention \" +\naConventionNamingJonasDD,\n                           Project.MSG_VERBOSE);\n\n      if( aConventionNamingJonasDD.exists() ) {\n         someEjbFiles.put(META_DIR + JONAS_DD,aConventionNamingJonasDD);\n         return true;\n      } else {\n         return false;\n      }\n    }\n    \n    // include javadoc\n    // Determine the JAR filename (without filename extension)\n    protected String getJarBaseName(String aDescriptorFileName) {\n      String aBaseName = null;\n      EjbJar.Config aConfig = super.getConfig();\n      if (aConfig.namingScheme.getValue().equals(EjbJar.NamingScheme.DESCRIPTOR)) {\n         // try to find JOnAS specific convention name\n         // ??/MyEJB.xml ( I will find later the ??/jonas-MyEJB.xml file )\n         if( aDescriptorFileName.indexOf(aConfig.baseNameTerminator) == -1 ) {\n            String aCanonicalDescriptor = aDescriptorFileName.replace('\\\\','/');\n            int lastSeparatorIndex = aCanonicalDescriptor.lastIndexOf('/');\n            int endBaseName;\n            if (lastSeparatorIndex != -1) {\n                endBaseName = aDescriptorFileName.indexOf(\".xml\",\nlastSeparatorIndex);\n            } else {\n                endBaseName = aDescriptorFileName.indexOf(\".xml\");\n            }\n\n            if (endBaseName != -1) {\n                aBaseName = aDescriptorFileName.substring(0, endBaseName);\n            }\n         }\n      }\n\n      if( aBaseName == null ) {\n         // else get standard BaseName\n         aBaseName = super.getJarBaseName(aDescriptorFileName);\n      }\n      return aBaseName;\n    }\n\n    /**\n     * Method used to encapsulate the writing of the JAR file. Iterates over the\n     * filenames/java.io.Files in the Hashtable stored on the instance variable\n     * ejbFiles.\n     **/\n    protected void writeJar(String baseName, File jarFile, Hashtable files,\n                            String publicId) throws BuildException {\n        // need to create a generic jar first.\n        File genericJarFile = super.getVendorOutputJarFile(baseName);\n        super.writeJar(baseName, genericJarFile, files, publicId);\n\n        // todo ? if (alwaysRebuild || isRebuildRequired(genericJarFile, jarFile))\n        buildJOnASJar(baseName,genericJarFile, jarFile,files,publicId);\n        \n        if (!keepGeneric) {\n             log(\"deleting generic jar \" + genericJarFile.toString(),\n                           Project.MSG_VERBOSE);\n             genericJarFile.delete();\n        }\n    }\n\n    /**\n     * Helper method invoked by execute() for each JOnAS jar to be built.\n     * Encapsulates the logic of constructing a java task for calling\n     * GenIC and executing it.\n     * @param inBaseName the base name of the jar\n     * @param inSourceJar java.io.File representing the source (EJB1.1) jarfile.\n     * @param someFiles list of files in the jar. Add all the new genererated\n     *   files.\n     * @param inPublicId the link to DTD (to rewrite JAR).\n     **/\n    private void buildJOnASJar(final String inBaseName,\n                               final File inSourceJar,final File inDestJar,\n                               final Hashtable someFiles,String inPublicId) {\n      org.apache.tools.ant.taskdefs.Java aJavaTask = null;\n      String aGenIcClassName = genicClass;\n      boolean isOldGenIC = false;\n      boolean isTempDirectory = false;\n      File anOutputDirectoryFile = null;\n\n      // do not call GenIC\n      // only copy file\n      if (noGENIC) {\n         try {\n            FileUtils.newFileUtils().copyFile(inSourceJar, inDestJar);\n            return;\n         } catch (IOException anIOException) {\n            throw new BuildException(\"Unable to write EJB jar\", anIOException);\n         }\n      }\n         \n      // call GenIC\n      try {\n         aJavaTask = (Java) getTask().getProject().createTask(\"java\");\n         aJavaTask.setTaskName(\"genic\");\n         if(aGenIcClassName == null) {\n            aGenIcClassName = GENIC_CLASS;\n         } else if( OLD_GENIC_CLASS.equals(aGenIcClassName) ){\n            isOldGenIC = true;\n         }\n         // ClassName\n         aJavaTask.setClassname(aGenIcClassName);\n\n         // JVM Args\n         if( jonasroot == null ) {\n            throw new BuildException(\"Error : set the jonasroot parameter\");\n         } else if ( ! jonasroot.isDirectory() ) {\n            log(\"jonasroot attribut '\" + jonasroot + \"' is not a valid directory\",\n                     Project.MSG_ERR);\n         }\n         aJavaTask.createJvmarg().setValue(\"-Dinstall.root=\" + jonasroot);\n         File aJavaPolicyFile = new File(jonasroot,\"config/java.policy\");\n         if( aJavaPolicyFile.exists() ) {\n            aJavaTask.createJvmarg().setValue(\"-Djava.security.policy=\" \n                                        + aJavaPolicyFile.toString() );\n         }\n\n         // Find output directory\n         if( ouputdirectory == null ) {\n            anOutputDirectoryFile = createTempDir();\n            isTempDirectory = true;\n            log(\"Use temporary output directory : \" +\n                  anOutputDirectoryFile, Project.MSG_VERBOSE);\n         } else {\n            anOutputDirectoryFile = ouputdirectory;\n            log(\"Use temporary specific output directory : \" + \n                  anOutputDirectoryFile, Project.MSG_VERBOSE);\n         }\n         aJavaTask.createArg().setValue(\"-d\");\n         aJavaTask.createArg().setFile(anOutputDirectoryFile);\n\n         // Additionnal args\n         aJavaTask.createArg().setLine(additionalArgs);\n         // KeepGenerated\n         if (keepgenerated) {\n             aJavaTask.createArg().setValue(\"-keepgenerated\");\n         }\n\n         // Verbose\n         if( verbose ) {\n            aJavaTask.createArg().setValue(\"-verbose\");\n         }\n         \n         // -secpropag\n         if( secpropag ) {\n            aJavaTask.createArg().setValue(\"-secpropag\");            \n         }\n         \n         // The compiler\n         if (compiler == null) {\n             // try to use the compiler specified by build.compiler. Right now\nwe are just going\n             // to allow Jikes\n             String aBuildCompiler =\ngetTask().getProject().getProperty(\"build.compiler\");\n             if (\"jikes\".equals(aBuildCompiler) ) {\n                 aJavaTask.createArg().setValue(\"-javac\");\n                 aJavaTask.createArg().setValue(\"jikes\");\n             }\n         } else {\n            if( ! \"default\".equals( compiler ) ) {\n               aJavaTask.createArg().setValue(\"-javac\");\n               aJavaTask.createArg().setLine(compiler);\n            }\n         }\n\n         if( ! isOldGenIC ) {\n            // the add in jar features is buggy...\n            aJavaTask.createArg().setValue(\"-noaddinjar\");\n         }\n\n         aJavaTask.createArg().setValue(inSourceJar.getPath());\n\n         // try to create the classpath for the correct ORB\n         Path aClasspath = getCombinedClasspath();\n         if( aClasspath == null ) {\n            aClasspath = new Path(getTask().getProject());\n         }\n         if( orb != null ) {\n            String aOrbJar = new File(jonasroot,\"lib/\" + orb +\n\"_jonas.jar\").toString();\n            String aConfigDir = new File(jonasroot,\"config/\").toString();\n            Path aJOnASOrbPath = new Path(aClasspath.getProject(),\n                                       aOrbJar + File.pathSeparator + aConfigDir );\n            aClasspath.append( aJOnASOrbPath );\n         } else {\n            log(\"No ORB propertie setup (RMI, JEREMIE, DAVID).\", Project.MSG_WARN);\n         }\n\n         // append the output directory\n         aClasspath.append( new Path(aClasspath.getProject(),\nanOutputDirectoryFile.getPath()));\n         aJavaTask.setClasspath(aClasspath);\n\n\n         aJavaTask.setFork(true);\n\n         log(\"Calling \" + aGenIcClassName + \" for \" + inSourceJar.toString(),\n                       Project.MSG_VERBOSE);\n\n         if (aJavaTask.executeJava() != 0) {\n             throw new BuildException(\"GenIC reported an error\");\n         }\n         // Update the list of files.\n         addAllFiles(anOutputDirectoryFile,\"\",someFiles);\n\n         // rewrite the jar with the new files\n         super.writeJar(inBaseName, inDestJar, someFiles, inPublicId);\n     } catch(BuildException aBuildException) {\n         throw aBuildException;\n     } catch (Exception e) {\n         // Have to catch this because of the semantics of calling main()\n         String msg = \"Exception while calling \" + aGenIcClassName + \". Details:\n\" + e.toString();\n         throw new BuildException(msg, e);\n     } finally {\n        if( isTempDirectory && anOutputDirectoryFile != null) {\n           dellAllFiles(anOutputDirectoryFile);\n        } else if( cleanWorkDir && anOutputDirectoryFile != null) {\n           dellAllFilesInside(anOutputDirectoryFile);\n        }\n     }\n   }\n\n    /**\n     * Get the vendor specific name of the Jar that will be output. The\n     * modification date of this jar will be checked against the dependent\n     * bean classes.\n     **/\n    File getVendorOutputJarFile(final String aBaseName) {\n        return new File(getDestDir(), aBaseName + jarSuffix);\n    }\n\n   /**\n    * Create a free tempory directory for GenIC output.\n    * @return directory file\n    * @throws BuildException if impossible to find a tempory directory\n    **/\n   private File createTempDir() {\n      String theTempDir = System.getProperty(\"java.io.tmpdir\");\n      int anIndice = 0;\n      File aFile = null;\n      // try 50 times to find a free tempory directory\n      while( anIndice < 50 && aFile == null) {\n         aFile = new File(theTempDir,\"GenicTemp\" + anIndice);\n         if(aFile.exists()) {\n            anIndice++;\n            aFile = null;\n         }\n      }\n\n      if( aFile == null ) {\n         // problem in temp directory\n         throw new BuildException(\"Impossible to find a free temp directory for\noutput.\");\n      } else {\n         aFile.mkdirs();\n         return(aFile);\n      }\n   }\n\n\n   /**\n    * add all files in anOutputDir + ' / ' + aRootDir to the HashTable someFiles.\n    *\n    * @param anOutputDir - start directory\n    * @param aCurrentDirOrFile - a sub-directory to scan or a file to add.\n    * @param someFiles - where to add the files\n    **/\n   private void addAllFiles(final File anOutputDir, String aCurrentDirOrFile,\nHashtable someFiles) {\n      File aFile = new File(anOutputDir,aCurrentDirOrFile);\n      if( aFile.isDirectory() ) {\n         String aCurrentDir = \"\";\n         if( aCurrentDirOrFile.length() > 0 ) {\n            aCurrentDir = aCurrentDirOrFile + '/';\n         }\n         File theFiles[] = aFile.listFiles();\n         for(int i=0;i<theFiles.length;i++) {\n            addAllFiles(anOutputDir,aCurrentDir + theFiles[i].getName(),someFiles);\n         }\n      } else {\n         // is a file\n         someFiles.put(aCurrentDirOrFile,aFile);\n      }\n   }\n\n   /**\n    * Delete all the files in a directory\n    * @param aFile file to delete recursivly\n    **/\n   private void dellAllFiles(File aFile) {\n     if(aFile.isDirectory()) {\n       File someFiles[] = aFile.listFiles();\n       for(int i=0;i<someFiles.length;i++) {\n          dellAllFiles(someFiles[i]);\n       }\n     }\n     aFile.delete();\n   }\n   \n   /**\n    * Delete all the files in a directory, but don't delete\n    * the directory\n    * @param aFile file to delete recursivly\n    **/   \n   private void dellAllFilesInside(File aFile) {\n     if(aFile.isDirectory()) {\n       File someFiles[] = aFile.listFiles();\n       for(int i=0;i<someFiles.length;i++) {\n          dellAllFiles(someFiles[i]);\n       }\n     }      \n   }\n   \n}\n// eof.", "id": 9963, "time": "2002-01-27T20:49:53Z", "bug_id": 6059, "creation_time": "2002-01-27T20:49:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 6059, "text": "Created attachment 1079\nEJBJar HTML Documentation", "id": 9964, "attachment_id": 1079, "creator": "cyrille_list@ingenosya.com", "creation_time": "2002-01-27T21:00:58Z", "time": "2002-01-27T21:00:58Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 1080\nEJBJar.java task patch", "is_private": false, "id": 9965, "creator": "cyrille_list@ingenosya.com", "time": "2002-01-27T21:02:10Z", "bug_id": 6059, "creation_time": "2002-01-27T21:02:10Z", "attachment_id": 1080}, {"count": 3, "tags": [], "bug_id": 6059, "attachment_id": 1081, "is_private": false, "id": 9966, "time": "2002-01-27T21:02:48Z", "creator": "cyrille_list@ingenosya.com", "creation_time": "2002-01-27T21:02:48Z", "text": "Created attachment 1081\nJonasDeploymentTool.java file"}, {"count": 4, "tags": [], "creator": "conor@apache.org", "text": "Committed - thanks\n", "id": 10216, "time": "2002-02-02T11:06:10Z", "bug_id": 6059, "creation_time": "2002-02-02T11:06:10Z", "is_private": false, "attachment_id": null}]
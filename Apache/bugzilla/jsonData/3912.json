[{"count": 0, "text": "Recently we found a bug in Suns native\nsun.awt.image.codec.JPEGImageEncoderImpl.writeJPEGStream(), causing the VM to\ncrash when streams where images are being encoded to are somehow disconnected\n(e.g., user pressed stop button, connection reset by peer, ...) before the\nencoding has ended. Sun has confirmed this to be a new bug under Bug Id 4502892,\nwhich can be seen under\nhttp://developer.java.sun.com/developer/bugParade/bugs/4502892.html (you may\nhave to register with Suns Java Developer Connection, but this is free). As far\nas we were able to test it, Suns JDK 1.3.1, JDK 1.4 beta and IBMs JDK 1.3.0 are\naffected under both Windows 2000 and Linux. We have not found an unaffected\nplattform so far.\n\nAttached please find the Test.java, allowing you to test whether your plattform\nis affected by this bug, and a slightly modified\norg.apache.batik.transcoder.image.JPEGEncoder.java which works around the issue\nby buffering the encoded image and thereby isolating the faulty native method\nfrom problematic stream exceptions. To test whether your plattform is affected,\nhave a look at Test.java and test your plattform with the attached Java class by\ntyping \"javac Test.java\", followed by \"java Test\". When this application is\nbeing run, it silently loops printing dots every 500 ms, having one thread\nencode a JPEG image and another one read only some of it and then closing the\nconnection. We rarely saw more than 5-6 dots being printed without the VM crashing.\n\nAn unpatched Batik running on an affected JVM cannot reliably being used in\nproduction systems for server-side image generation; we were running a Win2K\nserver with Tomcat 4 and Cocoon 2 using Batik for dynamic image generation, and\nonly after patching Batik, the system got stable.\n\n--- cut here for Test.java ---\nimport com.sun.image.codec.jpeg.JPEGCodec;\nimport com.sun.image.codec.jpeg.JPEGEncodeParam;\nimport com.sun.image.codec.jpeg.JPEGImageEncoder;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.OutputStream;\n\nclass WriterThread implements Runnable\n{\n\tThread thread;\n\tPipedOutputStream out;\n\n\tpublic WriterThread(PipedOutputStream postream)\n\t{\n\t\tout = postream;\n\t}\n\n\tpublic void start()\n\t{\n\t\tif (thread == null)\n\t\t{\n\t\t\tthread = new Thread(this, \"WriterThread\");\n\t\t\tthread.start();\n\t\t}\n\t}\n\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Do the stuff and write it.\n\t\t\tBufferedImage image = new BufferedImage(512, 512, BufferedImage.TYPE_INT_RGB);\n\t\t\tJPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(out);\n\t\t\tJPEGEncodeParam params = JPEGCodec.getDefaultJPEGEncodeParam(image);\n\t\t\tparams.setQuality(1f, true);\n\t\t\tjpegEncoder.encode(image, params);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\t// e.printStackTrace();\n\t\t}\n\t}\n}\n\nclass ReaderThread implements Runnable\n{\n\tThread thread;\n\tPipedInputStream in;\n\n\tpublic ReaderThread(PipedInputStream pistream)\n\t{\n\t\tin = pistream;\n\t}\n\n\tpublic void start()\n\t{\n\t\tif (thread == null)\n\t\t{\n\t\t\tthread = new Thread(this, \"ReaderThread\");\n\t\t\tthread.start();\n\t\t}\n\t}\n\n\tpublic void run()\n\t{\n\t\tbyte[] buffer = new byte[128];\n\n\t\ttry\n\t\t{\n\t\t\t// Read 1 byte and close the connection.\n\t\t\t// Watch the VM go *bang*\n\t\t\tin.read();\n\t\t\tin.close();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\t// e.printStackTrace();\n\t\t}\n\t}\n}\n\npublic class Test\n{\n\tpublic static void main(String[] args)\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tPipedInputStream pistream = new PipedInputStream();\n\t\t\t\tPipedOutputStream postream = new PipedOutputStream(pistream);\n\n\t\t\t\tWriterThread writer = new WriterThread(postream);\n\t\t\t\tReaderThread reader = new ReaderThread(pistream);\n\n\t\t\t\twriter.start();\n\t\t\t\treader.start();\n\t\t\t} catch (IOException e)\n\t\t\t{\n\t\t\t\t// e.printStackTrace();\n\t\t\t}\n\n\t\t\tSystem.out.print(\".\");\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tThread.currentThread().sleep(500);\n\t\t\t} catch (Exception e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}\n--- cut here for Test.java ---\n--- cut here for JPEGTranscoder.java ---\n/*****************************************************************************\n * Copyright (C) The Apache Software Foundation. All rights reserved.        *\n * ------------------------------------------------------------------------- *\n * This software is published under the terms of the Apache Software License *\n * version 1.1, a copy of which has been included with this distribution in  *\n * the LICENSE file.                                                         *\n *****************************************************************************/\n\npackage org.apache.batik.transcoder.image;\n\nimport com.sun.image.codec.jpeg.JPEGCodec;\nimport com.sun.image.codec.jpeg.JPEGEncodeParam;\nimport com.sun.image.codec.jpeg.JPEGImageEncoder;\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport org.apache.batik.transcoder.TranscoderException;\nimport org.apache.batik.transcoder.TranscoderOutput;\nimport org.apache.batik.transcoder.TranscodingHints;\nimport org.apache.batik.transcoder.image.resources.Messages;\n\n/**\n * This class is an <tt>ImageTranscoder</tt> that produces a JPEG image.\n *\n * @author <a href=\"mailto:Thierry.Kormann@sophia.inria.fr\">Thierry Kormann</a>\n* @version $Id: JPEGTranscoder.java,v 1.4 2001/03/28 06:51:24 tkormann Exp $\n */\npublic class JPEGTranscoder extends ImageTranscoder {\n\n    /**\n     * Constructs a new transcoder that produces jpeg images.\n     */\n    public JPEGTranscoder() {\n        hints.put(ImageTranscoder.KEY_BACKGROUND_COLOR, Color.white);\n    }\n\n    /**\n     * Creates a new ARGB image with the specified dimension.\n     * @param width the image width in pixels\n     * @param height the image height in pixels\n     */\n    public BufferedImage createImage(int width, int height) {\n        return new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n    }\n\n    /**\n     * Writes the specified image to the specified output.\n     * @param img the image to write\n     * @param output the output where to store the image\n     * @param TranscoderException if an error occured while storing the image\n     */\n    public void writeImage(BufferedImage img, TranscoderOutput output)\n            throws TranscoderException {\n        OutputStream ostream = output.getOutputStream();\n        ByteArrayOutputStream bstream = new ByteArrayOutputStream();\n        if (ostream == null) {\n            throw new TranscoderException(\n                Messages.formatMessage(\"jpeg.badoutput\", null));\n        }\n        float quality;\n        if (hints.containsKey(KEY_QUALITY)) {\n            quality = ((Float)hints.get(KEY_QUALITY)).floatValue();\n        } else {\n            handler.error(new TranscoderException(\n                Messages.formatMessage(\"jpeg.unspecifiedQuality\", null)));\n            quality = 1f;\n        }\n        try {\n            JPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(bstream);\n            JPEGEncodeParam params = JPEGCodec.getDefaultJPEGEncodeParam(img);\n            params.setQuality(quality, true);\n            jpegEncoder.encode(img, params);\n\t\tostream.write(bstream.toByteArray());\n        } catch (IOException ex) {\n            throw new TranscoderException(ex);\n        }\n    }\n\n    // --------------------------------------------------------------------\n    // Keys definition\n    // --------------------------------------------------------------------\n\n    /**\n     * The encoder quality factor key.\n     * <TABLE BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"1\">\n* <TR>\n* <TH VALIGN=\"TOP\" ALIGN=\"RIGHT\"><P ALIGN=\"RIGHT\">Key: </TH>\n* <TD VALIGN=\"TOP\">KEY_QUALITY</TD></TR>\n* <TR>\n* <TH VALIGN=\"TOP\" ALIGN=\"RIGHT\"><P ALIGN=\"RIGHT\">Value: </TH>\n* <TD VALIGN=\"TOP\">Float (between 0 and 1)</TD></TR>\n* <TR>\n* <TH VALIGN=\"TOP\" ALIGN=\"RIGHT\"><P ALIGN=\"RIGHT\">Default: </TH>\n* <TD VALIGN=\"TOP\">1 (no lossy)</TD></TR>\n* <TR>\n* <TH VALIGN=\"TOP\" ALIGN=\"RIGHT\"><P ALIGN=\"RIGHT\">Required: </TH>\n* <TD VALIGN=\"TOP\">Recommended</TD></TR>\n* <TR>\n* <TH VALIGN=\"TOP\" ALIGN=\"RIGHT\"><P ALIGN=\"RIGHT\">Description: </TH>\n* <TD VALIGN=\"TOP\">Specify the JPEG image encoding quality.</TD></TR>\n* </TABLE>\n*/\n    public static final TranscodingHints.Key KEY_QUALITY\n        = new QualityKey();\n\n    /**\n     * A transcoding Key represented the JPEG image quality.\n     */\n    private static class QualityKey extends TranscodingHints.Key {\n        public boolean isCompatibleValue(Object v) {\n            if (v instanceof Float) {\n                float q = ((Float)v).floatValue();\n                return (q > 0 && q <= 1f);\n            } else {\n                return false;\n            }\n        }\n    }\n}\n--- cut here for JPEGTranscoder.java ---", "bug_id": 3912, "is_private": false, "id": 6255, "time": "2001-10-01T16:08:07Z", "creator": "mhartle@hartle-klug.com", "creation_time": "2001-10-01T16:08:07Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "creator": "mhartle@hartle-klug.com", "attachment_id": null, "text": "In addition to the workaround patch for Batik that already exists, Sun now has\nreported this bug as fixed against the merlin-rc1 release of the JDK.\n\nMichael Hartle", "id": 7770, "time": "2001-11-12T02:41:33Z", "bug_id": 3912, "creation_time": "2001-11-12T02:41:33Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 3912, "text": "Fixed, I wrote a stream wrapper that eats the troublesome exceptions\nrather than using a bytearray output stream, as I believe this should \nbe faster and require less memory in general.  I tested this with the\nincluded test app and it fixed the problem there as well. Enjoy!\n", "id": 7776, "time": "2001-11-12T07:52:04Z", "creator": "deweese@apache.org", "creation_time": "2001-11-12T07:52:04Z", "is_private": false, "attachment_id": null}]
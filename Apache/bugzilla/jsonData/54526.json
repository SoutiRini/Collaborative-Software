[{"count": 0, "tags": [], "bug_id": 54526, "attachment_id": null, "text": "Hi,\nour application is affected by \"Double Execution of onload and onreadystatechange Events for Script Elements\" bug in IE9. See\nhttp://msdn.microsoft.com/en-us/library/ie/hh180173(v=vs.85).aspx\n\nIt means when IE9 loads one HTML page twice. First hit is aborted when the second occures.\nThere are CSS, JS and images on that page. Sometimes they started being served as part of first hit but the request is aborted almost immediatelly.\n\nOur application is behind reverse proxy. All traffic is thru HTTPS.\n\nThe problem is that sometimes the reverse proxy keeps established connection to backend until the backend times out.\n\nLog from reverse proxy:\n123.123.123.123 - - [01/Feb/2013:14:01:15 +0000] \"GET /main.css HTTP/1.1\" 200 -\n123.123.123.123 - - [01/Feb/2013:14:01:15 +0000] \"GET /main.css HTTP/1.1\" 200 9376\n\nLog from application:\n123.123.123.123 - - [01/Feb/2013:14:01:15 +0000] \"GET /main.css HTTP/1.1\" 200 9376 300100937\n123.123.123.123 - - [01/Feb/2013:14:01:15 +0000] \"GET /main.css HTTP/1.1\" 200 9376 12003\nThe last number is %D - The time taken to serve the request, in microseconds.\n\nI was trying to reproduce this behavior but the time window to trigger the bug is too small.\n\nWe have enabled mod_deflate recently and the log has changed.\nNow it reports it sent 26 bytes to client during such aborted request. The problem with established connection to backend persist.\n\nI can see code in mod_proxy_http like:\nif (ap_pass_brigade(r->output_filters, bb) || c->aborted)\nbut I'm not sure where in the code the \"aborted\" field is supposed to be set.\n\nIn similar code in mod_proxy_connect is the c->aborted check before ap_pass_brigade.\nThat would mean that right code is:\nif (c->aborted || ap_pass_brigade(r->output_filters, bb))\n\nMy main concern is that somebody who knows exact timing to trigger the bug can DoS us.\n\nAny hints?", "id": 165080, "time": "2013-02-05T14:37:31Z", "creator": "pavel@verotel.cz", "creation_time": "2013-02-05T14:37:31Z", "is_private": false}, {"count": 1, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "mod_proxy won't check the client's connection while it is waiting for the backend's response, and in any case won't abort the latter based on the former being (half-)closed (the connection can't be read anymore, but still can be written to).\n\nWhy is the backend timeout-ing on the first request, it does not respond at all?\nHow does it know the client has aborted, based on a second request being received?\n\nI don't see how mod_proxy could handle this, it is responsible for forwarding anything it gets in the configured time...", "id": 172332, "attachment_id": null, "bug_id": 54526, "creation_time": "2014-01-13T15:02:28Z", "time": "2014-01-13T15:02:28Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "pavel@verotel.cz", "is_private": false, "count": 2, "id": 173328, "time": "2014-02-18T13:48:40Z", "bug_id": 54526, "creation_time": "2014-02-18T13:48:40Z", "text": "Hi.\nIt's year back and we don't have such setup anymore.\n\nBut my impression was that things usually happened like:\nclient connects to reverse proxy, reverse proxy opens connection to backend, client sends request, proxy passes request to backend, backend responds, proxy passes response to client and client closes connection.\n\nWhat sometimes happened was probably:\nclient connects to reverse proxy, reverse proxy opens connection to backend, client sends request and closes connection, proxy passes request to backend, backend starts to send response, proxy is trying to pass response to client's closed connection, backend closes connection to proxy due to timeout.\n\nBut I'm not sure. I saw such things in production logs only and I was unable to replicate them in test environment."}]
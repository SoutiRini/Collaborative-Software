[{"count": 0, "tags": [], "bug_id": 46987, "attachment_id": null, "is_private": false, "id": 126058, "time": "2009-04-07T17:14:54Z", "creator": "trejkaz@trypticon.org", "creation_time": "2009-04-07T17:14:54Z", "text": "I get the following exception loading a workbook:\n\njava.lang.RuntimeException: Buffer underrun - requested 512 bytes but 192 was available\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.checkAvaliable(DocumentInputStream.java:202)\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.readFully(DocumentInputStream.java:224)\n\tat org.apache.poi.hssf.record.RecordInputStream.readFully(RecordInputStream.java:251)\n\tat org.apache.poi.hssf.record.RecordInputStream.readFully(RecordInputStream.java:246)\n\tat org.apache.poi.hssf.record.RecordInputStream.readRemainder(RecordInputStream.java:341)\n\tat org.apache.poi.hssf.record.UnknownRecord.<init>(UnknownRecord.java:73)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:251)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:373)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:277)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:202)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:184)\n\nWhereas it is true that document streams should be multiples of 512 bytes, other parts of POI work around this in order to tolerate files written by flakier past versions of Excel.\n\nThis was not a problem in POI 3.1."}, {"count": 1, "tags": [], "text": "DocumentInputStream can contain any length of data.  If you put a breakpoint at \nDocumentInputStream.<init>(DocumentEntry.java:73) and run the unit tests, you will see that very few of the POI test case examples have an exact multiple of 512 bytes.\n\nThe stack-trace indicates that at 196 bytes before the ends of stream, an unknown record sid was read, followed by an apparent size of 512.  Excel document streams should end with EOFRecord.  One possibility is that the originating application has written EOFRecord correctly, but padded with (non-zero) garbage.  Alternatively there could be a mis-alignment problem a little bit before this location.\n\nCould you please attach the offending spreadsheet.  This will help diagnose the problem better.", "is_private": false, "id": 126091, "creator": "josh@apache.org", "time": "2009-04-08T09:03:17Z", "bug_id": 46987, "creation_time": "2009-04-08T09:03:17Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46987, "attachment_id": null, "id": 126206, "time": "2009-04-13T22:18:41Z", "creator": "trejkaz@trypticon.org", "creation_time": "2009-04-13T22:18:41Z", "is_private": false, "text": "I can't give you the document because it contains company information, but I put a breakpoint in RecordFactory to confirm that it is doing this:\n\nrecord = [SELECTION]\n    .pane            = 0x03\n    .activecellrow   = 0x0000\n    .activecellcol   = 0x0000\n    .activecellref   = 0x0000\n    .numrefs         = 0x0001\n[/SELECTION]\n\nrecord = [EOF]\n[/EOF]\n\n\njava.lang.RuntimeException: Buffer underrun - requested 512 bytes but 192 was available\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.checkAvaliable(DocumentInputStream.java:202)\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.readFully(DocumentInputStream.java:224)\n\tat org.apache.poi.hssf.record.RecordInputStream.readFully(RecordInputStream.java:251)\n\tat org.apache.poi.hssf.record.RecordInputStream.readFully(RecordInputStream.java:246)\n\tat org.apache.poi.hssf.record.RecordInputStream.readRemainder(RecordInputStream.java:341)\n\tat org.apache.poi.hssf.record.UnknownRecord.<init>(UnknownRecord.java:73)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:251)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:373)\n\n\nSo the old version was (correctly?) stopping at EOF, and the new version for whatever reason keeps reading despite hitting the EOF marker."}, {"count": 3, "tags": [], "bug_id": 46987, "attachment_id": 23483, "id": 126207, "time": "2009-04-13T23:20:11Z", "creator": "trejkaz@trypticon.org", "creation_time": "2009-04-13T23:20:11Z", "is_private": false, "text": "Created attachment 23483\ntest file\n\nOK, I have spent some time manually x'ing over the names and emails throughout the file.  Getting rid of the phone numbers was particularly hard (RK records... yuck.)\n\nThis should allow you to reproduce the problem locally."}, {"count": 4, "tags": [], "bug_id": 46987, "text": "Thanks for supplying the sample file.  Excel opens it without complaint, but when re-saving, the problem is corrected.  POI should do the same.\n\nFixed in svn r765866\n\njunit added", "id": 126318, "time": "2009-04-17T00:01:30Z", "creator": "josh@apache.org", "creation_time": "2009-04-17T00:01:30Z", "is_private": false, "attachment_id": null}]
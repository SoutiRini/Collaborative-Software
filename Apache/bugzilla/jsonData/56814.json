[{"count": 0, "tags": [], "creator": "apache@gagravarr.org", "text": "When the OPC code was first added, it only required Java 1.4, so needed external XML jars in the form of stax-api and dom4j. Now that we're on Java 1.6, we've already been able to drop the stax-api jar. It may also be possible to drop the dom4j one too, with some minor package name changes. If so, that'd save us one dependency, and let us solve some generics warnings (dom4j 1.6.x is Java 1.4 compatible so no generics)\n\nDepending on exactly how major a change this turns out to be, it might be possible to do in 3.11, or might be better left for a 3.12 change", "id": 176888, "time": "2014-08-04T21:09:18Z", "bug_id": 56814, "creation_time": "2014-08-04T21:09:18Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 56814, "attachment_id": 31890, "text": "Created attachment 31890\nRequired changes to replace dom4j with JAXP", "id": 177034, "time": "2014-08-10T00:39:43Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-10T00:39:43Z", "is_private": false}, {"count": 2, "tags": [], "creator": "uwe@thetaphi.de", "text": "+1 !\n\nWhy do we need the ThreadLocal for the DocumentBuilder? Can we not configure the DocumentBuilderFactory and return a *new* DocumentBuilder each time? Thread locals have some side effects and should be avoided if not really needed.", "id": 177042, "time": "2014-08-10T10:06:14Z", "bug_id": 56814, "creation_time": "2014-08-10T10:06:14Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 56814, "text": "It's a precaution as neither DocumentBuilderFactory nor DocumentBuilder are guaranteed to be thread-safe, plus it duals as a cache.\nBut I agree that this needs to be more carefully examined, and perhaps starting with a static DocumentBuilderFactory spawning new DocumentBuilder objects on each call is the way to go.\nPerformance wise, I do believe we have more pressing issues than creation of DocumentBuilders and their factories...", "count": 3, "id": 177045, "time": "2014-08-10T10:34:38Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-10T10:34:38Z", "is_private": false}, {"attachment_id": 31893, "tags": [], "bug_id": 56814, "text": "Created attachment 31893\nRequired changes to replace dom4j with JAXP - without ThreadLocal", "count": 4, "id": 177049, "time": "2014-08-10T13:20:54Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-10T13:20:54Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 56814, "text": "Eventually I did some testing and as long as it is not changed from different threads, a DocumentBuilderFactory can produce new DocumentBuilder objects from different threads without a problem.\nRegarding DocumentBuilder, for the purpose of parsing I created a new one for each invocation of SAXHelper.readSAXDocument, but for DocumentHelper.newDocument I used a static DocumentBuilder, as it does change its state, and only used for that purpose.", "count": 5, "id": 177050, "time": "2014-08-10T13:25:00Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-10T13:25:00Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 56814, "attachment_id": null, "text": "Thanks!\n\nLooks fine. The problem with DocumentBuilderFactory is more that it is not thread safe if you change properties. But if you have a correctly conbfigured factory and just call newDocumentBuilder() it should be thread safe.\n\nBTW: The warnings about missing thread safety were removed from Javadocs after Java 1.5. So I assume that newDocumentBuilder are thread safe. If you canr, wrap the newDocumentBuilder with a static synchronized block, that would be most safe: \"static synchronized getDocumentBuilder()\" (in both SAXHelper and the other factory class). Since Java 1.6 the synchronized does not matter at all if there is no real concurrency involved (optimized away by Hotspot).", "id": 177051, "time": "2014-08-10T13:29:44Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-10T13:29:44Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 56814, "attachment_id": 31894, "is_private": false, "id": 177053, "time": "2014-08-10T14:38:20Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-10T14:38:20Z", "text": "Created attachment 31894\nRequired changes to replace dom4j with JAXP - without ThreadLocal, including a test\n\nAdded a test to check for concurrency issues - at least for SAXHelper, if I change the implementation to return a static DocumentBuilder, it fails with org.xml.sax.SAXException: FWK005 parse may not be called while parsing.\n\nI could not manage to fail DocumentHelper.createDocument() :-)"}, {"attachment_id": null, "tags": [], "bug_id": 56814, "text": "I would still make it synchronized, then we are safe!", "count": 8, "id": 177054, "time": "2014-08-10T14:43:41Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-10T14:43:41Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 56814, "attachment_id": null, "is_private": false, "id": 177056, "time": "2014-08-10T18:07:23Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-10T18:07:23Z", "text": "Hi,\nI think we should put this into 3.11, too. I will apply the patch locally and do my tests with it. If all goes fine, I would be very happy to get rid of dom4j. This makes using of POI complicated, because it may conflict with other uses of dom4j. Also, dom4j is more or less inactive, because it has no features that are not available in the official W3C DOM APIs. The only nice thing with dom4j is the more \"Java-like\" API, but this is no longer true, because it lacks generics support."}, {"attachment_id": 31895, "tags": [], "bug_id": 56814, "is_private": false, "count": 10, "id": 177058, "time": "2014-08-10T21:23:02Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-10T21:23:02Z", "text": "Created attachment 31895\n56814.patch\n\nHi,\nI reviewed the patch and made some changes:\n\n- In StreamHelper, I set OutputKeys in the identity transformer, to prettyprint (as done by dom4j) and also ste standalone attribute (as required by openxml).\n- In StreamHelper I prevented the transformer from closing the outputstream (using a CloseShieldOutputStream like in TIKA, unfortunately it was not available to POI). The problem: some transformers close the outputstream (from StreamResult), which would break ZIPOutputStream.\n- I removed stax.Namespace from the properties parser, useless there, as namespace prefixes are not used while parsing\n- I moved the methods to add xmlns attributes from POI to openxml, because this would have added a wrong relationship. It is now in DocumentHelper\n- I fixed a incorrect namespaceprefix in the coreProperties. openxml document should use \"cp\" prefix. \n- I removed the thread safety test again, because I made the methods that use the factories synchronized. This has no overhead in Java 6, if not used from many threads."}, {"count": 11, "tags": [], "creator": "uwe@thetaphi.de", "text": "Created attachment 31898\n56814.patch\n\nNew patch, because the previous one had Line-feed issues (unfortunately POI does not have svn:eol-style:native on all text files.", "id": 177064, "time": "2014-08-11T08:21:35Z", "bug_id": 56814, "creation_time": "2014-08-11T08:21:35Z", "is_private": false, "attachment_id": 31898}, {"count": 12, "tags": [], "creator": "yaniv@kundas.net", "text": "I intentionally left the coreProperties prefix in PackagePropertiesMarshaller empty because I've noticed it is used as the default namespace when writing - I'm not sure if that matters.", "id": 177066, "time": "2014-08-11T11:16:06Z", "bug_id": 56814, "creation_time": "2014-08-11T11:16:06Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "text": "Hi,\nI checked this. This was an error. In official openxml documents as created e.g. by Word 2010, the coreproperties prefix is marked as \"cp:\". There is no default namespace.\nUwe", "is_private": false, "bug_id": 56814, "id": 177067, "time": "2014-08-11T11:38:40Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-11T11:38:40Z", "attachment_id": null}, {"count": 14, "tags": [], "text": "Is there anything against committing this for now? Nick already mentioned, that we should get this in BETA2, too.\nTo me the patch looks fine, we can improve later. Locally, I just changed some *-imports to be explicit, otherwise its the same as attached patch and ready to commit.", "is_private": false, "bug_id": 56814, "id": 177068, "time": "2014-08-11T11:41:42Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-11T11:41:42Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 56814, "is_private": false, "count": 15, "id": 177078, "time": "2014-08-11T16:45:33Z", "creator": "yaniv@kundas.net", "creation_time": "2014-08-11T16:45:33Z", "text": "+1 on the synchronization - my test was good for verifying the JRE running it was safe, not for every user's JRE."}, {"attachment_id": null, "tags": [], "bug_id": 56814, "is_private": false, "count": 16, "id": 177095, "time": "2014-08-12T07:21:30Z", "creator": "uwe@thetaphi.de", "creation_time": "2014-08-12T07:21:30Z", "text": "I committed the current state."}]
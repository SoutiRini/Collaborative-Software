[{"count": 0, "tags": [], "bug_id": 36275, "attachment_id": null, "is_private": false, "id": 78711, "time": "2005-08-19T16:48:39Z", "creator": "darryl@darrylmiles.org", "creation_time": "2005-08-19T16:48:39Z", "text": "Originally posted to tomcat-users to question is this is my understanding of a BUG.\n\n\nThe following example JSP page seems to be interpreted incorrectly by the time\nthe attribute values are passed into a setDynamicAttribute() API call.\n\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<%@ taglib prefix=\"g\" uri=\"http://domain.com/taglibs/generic-0.1\" %>\n<html>\n<head>\n<title>TAG GENERIC PAGE</title>\n</head>\n<body>\n<g:generic attrOne=\"1\" attrTwo=\"2\" attrThree=\"&lt;&amp;&quot;&gt;\"\nattrFour=\"<&&quot;>\"/>&lt; &lt;Tag Here<br/>\n</body>\n</html>\n\nlogged calls to setDynamicAttribute() showing the 3 arguments passed.\n\nDEBUG 10:22:40,279 (GenericTag.java:setDynamicAttribute:47)  -null attrOne 1\nDEBUG 10:22:40,285 (GenericTag.java:setDynamicAttribute:47)  -null attrTwo 2\nDEBUG 10:22:40,287 (GenericTag.java:setDynamicAttribute:47)  -null attrThree\n&lt;&amp;\"&gt;\nDEBUG 10:22:40,298 (GenericTag.java:setDynamicAttribute:47)  -null attrFour <&\">\n\nIt seems the &quot; is correctly converted into \" but other character entities\nare not.  It is my understanding that all markup file parsing should follow\nthrough the order of:\n\n* characterize file from its encoding type (UTF-8, etc...)\n* tokenize character stream looking for character entities and substitute what\nthey represent (no matter where they are in the file), any substituted character\nmay not be used as tokens that delimit markup elements in the next step\n* now parse the markup in the resulting file\n\nFor performance reasons it probably doesn't happen exactly like that.  I am\nexpecting output like:\n\nnull attrThree <&\">\nnull attrFour <&\">\n\n\nI also notice that it seems common place to use JSP tags like this:\n\n<img height=\"10\" src=\"<foo:tag name=\"value\"/>\" width=\"10\"/>\n\nIs the above recursivly reliable like this:  <x:outer attr=\"<x:middle\nattr=\"<x:inner attr=\"foo\"/>\"/>\"/>\n\nA pureist representation of the same that would be recursivly reliable may look\nsomething like this:\n\n<merge:img>\n<merge:attr height=\"10\"/>\n<merge:attr-body name=\"src\"><foo:tag name=\"value\"/></merge:attr-body>\n<merge:attr width=\"10\"/>\n</merge:img>\n\nI appreciate the former maybe done as lazy short hand, but it appears to break\nsomething else which is a stronger binding standard.  There must be many\npossible alternative approaches in JSP to this problem that won't conflict with\nother elements of all the standards that come info play.\n\nIs it possible to force a purist approach to this problem and switch off this\nmode to get back a reliable behaviour (even if it does seem like I have to take\nthe long way around) call this idealized behaviour if you will.\n\nUltimatly our JSP authoring tools will be powerful enough to automatically hide\ncomplex tag constructs like this and allow us to see at a glance the\nrepresentation we most like to see but really whats saved in the raw file maybe\nthe unrolled purist version.\n\n-- \nDarryl L. Miles"}, {"count": 1, "tags": [], "bug_id": 36275, "attachment_id": null, "text": "Section 1.6 of the JSP spec states that only &quot; (and &apos;) are \nrecognized as escapes in Tag attribute values when using the JSP syntax.\n\nIt sounds like what you really want is to use JSP Documents (aka XML syntax).  \nThis will solve your problem of unparsed entities, as well as faulting using \nthe output of Tags as HTML attribute values.  You can specify this in the <jsp-\nproperty-group> element in your web.xml file.", "id": 78718, "time": "2005-08-19T19:51:00Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-08-19T19:51:00Z", "is_private": false}, {"count": 2, "tags": [], "creator": "darryl@darrylmiles.org", "text": "Thats done the trick, thanks.\n", "id": 78867, "time": "2005-08-23T05:19:05Z", "bug_id": 36275, "creation_time": "2005-08-23T05:19:05Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "I am using log4j in my testng project in a multithreaded environment.\nI understand that log4j returns singleton instance of logger. However, in multithreaded environment there is a need for multiple logger instances.\n\nHere is the scenario\n\nI have a following test class\n\nclass Test {\n\n@BeforeMethod\npublic void writeToFile() {\n\n//Set the appender\n//Open a file abc.txt\nlog.info(\"Some message\");\n\n}\n\n@AfterMethod\npublic void writeToFileAgain() {\n\n//Open a file abc.txt\nlog.info(\"Some message again\");\n}\n}\n\nNow if the above test is run in multiple threads, the log messages get mixed up in the file from different threads. The reason for this is the logger instance is static and even if we have different file appenders the log files get mixed up.\nThis is the reason why there is a need for multiple logger instances per thread.", "is_private": false, "id": 161690, "creator": "rlolage@mobileiron.com", "time": "2012-08-25T00:20:09Z", "bug_id": 53781, "creation_time": "2012-08-25T00:20:09Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 161702, "time": "2012-08-25T20:57:53Z", "bug_id": 53781, "creation_time": "2012-08-25T20:57:53Z", "is_private": false, "text": "I consider this is an invalid/incomplete bug report and as such I am marking it as RESOLVED/INVALID."}, {"count": 2, "tags": [], "bug_id": 53781, "attachment_id": null, "is_private": false, "id": 161716, "time": "2012-08-26T23:12:11Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2012-08-26T23:12:11Z", "text": "While I agree with closing this as Invalid, stating why would be helpful.\n\nLog4j is being used in countless locations in multi-threaded usages. There is no need for multiple logger instances for this to work correctly.  It is quite uncommon to want to route messages to a file per thread however. Before recommending an approach to deal with that it would be best to understand why you want that first.\n\nI would suggest you ask questions on the user's list before creating a bug report. But even if you want to create a bug report, it should state what the problem you need solved is (i.e. separating log messages to multiple files) not a hypothetical solution."}, {"count": 3, "tags": [], "bug_id": 53781, "attachment_id": null, "is_private": false, "id": 161721, "time": "2012-08-27T02:46:45Z", "creator": "pbenedict@apache.org", "creation_time": "2012-08-27T02:46:45Z", "text": "I once wrote a logger that logged to a distinct file per JMS message (thus per thread) in a high-throughput environment. I needed to support at least 40 messages per second, and the processing was so complex it could dump hundreds of lines out in TRACE mode per message. NDC just wasn't good enough -- it was near impossible to sift out the threads from each other. It's been years now, but IIRC, I created a special subclass of DailyRollingFileAppender that would return a new log file per message."}, {"count": 4, "tags": [], "bug_id": 53781, "attachment_id": null, "id": 161738, "time": "2012-08-27T17:29:56Z", "creator": "rlolage@mobileiron.com", "creation_time": "2012-08-27T17:29:56Z", "is_private": false, "text": "This is a pretty unique scenario.\n\nI use a RollingFileAppender to route the log messages to a file. Following is the code in the BeforeMethod. The appender \"FILE\" is configured in the log4j.xml\n\n\t@BeforeMethod (alwaysRun = true)\n\tpublic void beforeCreateSeparateLogFile(Method method) \n\t{\n\n\t\tString fileName = method.getName(); \n\t\tString fileSep = System.getProperty(\"file.separator\");\n\t\tRollingFileAppender rfa = (RollingFileAppender) Logger.getRootLogger().getAppender(\"FILE\");\n\t\trfa.setFile(\"TestOutput\" + fileSep + fileName + \".log\");\n\t\trfa.activateOptions();\n\t\t\n\t\tlog.info(\"STARTING TESTCASE : \" + method.getName());\n\t\tlog.info(\"\");\n\t\t\n\t}\n\n\nBy doing this, I can get the log messages per test case in its own log file. I do this because of specific test framework related reasons and easier troubleshooting when a test case fails.\n\nNow, imagine the above code getting executed in a multithreaded way. Since there is only one logger instance, some other thread can change the route of the messages. That way the messages get mixed up and end up in a wrong file.\nThe reason why I suggested having multiple instances is because every instance can be in its own thread without affecting each  other.\n\n\nI hope that helps understanding the problem that I am facing."}, {"count": 5, "tags": [], "bug_id": 53781, "attachment_id": null, "id": 161739, "time": "2012-08-27T17:57:27Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2012-08-27T17:57:27Z", "is_private": false, "text": "I understand your use case, but the logger is not the problem.  For a potential way of dealing with this see http://logging.apache.org/log4j/2.x/manual/appenders.html#RoutingAppender.  Now this is for Log4j 2, not Log4j 1.x, but you could manually create an Appender that does something similar for Log4j 1.x without needing to do anything special with Loggers."}, {"count": 6, "tags": [], "creator": "rlolage@mobileiron.com", "attachment_id": null, "text": "This probably is a limitation of log4j. I digged in hard and finally found a solution which lets me handle this specific scenario. I used slf4j instead of log4j and used MDC to log per thread to separate file.\nJust thought would let you guys know.\nThanks for the support :)", "id": 161797, "time": "2012-08-29T00:13:55Z", "bug_id": 53781, "creation_time": "2012-08-29T00:13:55Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jessh@ptc.com", "is_private": false, "text": "slf4j may have a built-in appender that meets your particular needs.  In that case, good for you.\n\nThat said, there's no issue with having a single logger for all threads.  The issue is in which appender you select -- or write yourself barring an existing one that does what you want.", "id": 161799, "time": "2012-08-29T00:27:21Z", "bug_id": 53781, "creation_time": "2012-08-29T00:27:21Z", "attachment_id": null}]
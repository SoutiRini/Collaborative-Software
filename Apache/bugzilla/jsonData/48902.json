[{"count": 0, "attachment_id": null, "bug_id": 48902, "is_private": false, "id": 135308, "time": "2010-03-12T17:48:20Z", "creator": "cleclerc@apache.org", "creation_time": "2010-03-12T17:48:20Z", "tags": [], "text": "Here is a proposal to add an intermediate way to emit throwables in the logs. It is between '%throwable{short}' that only add the class name and message of the given throwable and standard '%throwable' that emits the full stacktrace.\n\nThis proposed '%throwable{compact}' concatenates the class name and message of the given throwable and its causes on the same line as the .\n\nSAMPLES\n======\n\nNONE\n-----\n\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} %5p [%t] %c - %m %throwable{none} %n\n\n2010/03/12 18:39:00,083 ERROR [main] my-category - An exception occured  \n\nSHORT\n-----\n\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} %5p [%t] %c - %m %throwable{short} %n\n\n2010/03/12 18:37:34,580 ERROR [main] my-category - An exception occured java.io.IOException: Exception invoking http://example.com/\n\n\nCOMPACT\n--------\n\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} %5p [%t] %c - %m %throwable{compact} %n\n\n2010/03/12 18:35:34,934 ERROR [main] my-category - An exception occured  - java.io.IOException: Exception invoking http://example.com/ java.net.SocketTimeoutException: Read timed out \n\nSTANDARD\n---------\n\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss,SSS} %5p [%t] %c - %m %throwable %n\n\n2010/03/12 18:40:01,930 ERROR [main] my-category - An exception occured java.io.IOException: Exception invoking http://example.com/\n\tat ExceptionTest.main(ExceptionTest.java:11)\nCaused by: java.net.SocketTimeoutException: Read timed out\n\t... 1 more"}, {"count": 1, "tags": [], "bug_id": 48902, "attachment_id": 25121, "text": "Created attachment 25121\nproposed implementation of the enhancement\n\nPatch description : \n* ThrowableInformationPatternConverter : update 'format' method to support %throwable{compact}\n* EnhancedPatternLayout : javadoc", "id": 135309, "time": "2010-03-12T17:51:17Z", "creator": "cleclerc@apache.org", "creation_time": "2010-03-12T17:51:17Z", "is_private": false}, {"count": 2, "tags": [], "creator": "carnold@apache.org", "is_private": false, "text": "Bug 45721 introduced configurable ThrowableRenderer's and may be a more general solution to the issue instead of attempting to do it at layout time.   The throwable in the ThrowableInformation is not serialized which comes into play if the converter was used on a logging event that had been deserialized by a receiver in Chainsaw.  The SocketAppender and similar classes force a call to getThrowableStringRep() which results in the string representation being generated before the instance is serialized.  When it deserialized, the ThrowableInformation has the string representation, but not the Throwable.\n\nFrom looking at the code, it would seem that %throwable{compact} would in that case result in less output than %throwable{short} where normally it is the other way around.\n\nWith the Chainsaw serialization issue, I'd like to avoid introducing anything into ThrowableInfoPatternConverter that depends on the presence of the throwable.  Also, I'd like to avoid anything that attempts to parse a stack trace to find causes, etc.\n\nIf you'd always like \"compact\" rendering in the current SVN HEAD, you can specify an alternative ThrowableRenderer either in configuration or programmatically.  I think it is cleaner doing this at that phase, but it requires writing a ThrowableRenderer and not just  configuration.  If we had a CompactThrowableRenderer in either extras.jar or log4j.jar, then it would be back to just a configuration issue.\n\nIf you'd like different renderings on different appenders, then we are back at adding some enhancement to %throwable{}, but I'd be more inclined to support %throwable{n} to do the first n lines or %throwable{regexp} to output only those lines that match a regular expression.", "id": 135457, "time": "2010-03-19T03:59:14Z", "bug_id": 48902, "creation_time": "2010-03-19T03:59:14Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48902, "text": "Would the log4j project be interested in a contribution to limit the number of stacktrace lines emitted in the logs ?\n\nIf so, I would be very happy to help.", "id": 135533, "time": "2010-03-22T15:13:03Z", "creator": "cleclerc@apache.org", "creation_time": "2010-03-22T15:13:03Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "I thought about it.  The existing options could easily be represented as an integer number of lines to emit.", "is_private": false, "id": 135556, "creator": "carnold@apache.org", "time": "2010-03-23T13:08:20Z", "bug_id": 48902, "creation_time": "2010-03-23T13:08:20Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I also thought that negative values could be used to indicate the number of lines from the bottom to truncate.", "is_private": false, "id": 135562, "creator": "carnold@apache.org", "time": "2010-03-23T14:18:27Z", "bug_id": 48902, "creation_time": "2010-03-23T14:18:27Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 48902, "text": "Committed support for %throwable{n} in rev 928324.  A positive n will print up to n lines of stack trace, a negative n will drop the last n lines from the trace and 0 will suppress the stack trace.", "id": 135715, "time": "2010-03-28T03:35:52Z", "creator": "carnold@apache.org", "creation_time": "2010-03-28T03:35:52Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 48902, "attachment_id": null, "text": "Hi, here is an implementation of this as a custom ThrowableRenderer:\nhttps://github.com/nicoulaj/log4j-extras/blob/trunk/src/main/java/org/apache/log4j/spi/CompactThrowableRenderer.java", "id": 141661, "time": "2010-11-12T09:02:39Z", "creator": "julien.nicoulaud@gmail.com", "creation_time": "2010-11-12T09:02:39Z", "is_private": false}, {"count": 8, "tags": [], "text": "Hello Julien,\n\nThis CompactThrowableRenderer.java seems to be fragile to infinite hierarchies of throwables (e.g. A.cause=B, B.cause=C and C.cause=A): it would cause a StackOverFlowError.\n\nThe \"getThrowableList(Throwable throwable)\" method I used in my proposed patch prevents it. Commons-lang's ExceptionUtils.getThrowableList(Throwable) is a more sophisticated approach.\n\nCyrille", "is_private": false, "id": 141662, "creator": "cleclerc@apache.org", "time": "2010-11-12T09:30:21Z", "bug_id": 48902, "creation_time": "2010-11-12T09:30:21Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "julien.nicoulaud@gmail.com", "is_private": false, "text": "You are right, thank you ! Besides, I must say my implementation suits my need but is not very efficient and probably easily breakable. Just posting it in case it could be useful to someone.", "id": 141671, "time": "2010-11-12T10:47:54Z", "bug_id": 48902, "creation_time": "2010-11-12T10:47:54Z", "attachment_id": null}]
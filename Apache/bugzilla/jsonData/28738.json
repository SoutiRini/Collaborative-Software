[{"count": 0, "tags": [], "creator": "myaneel@hotmail.com", "attachment_id": null, "id": 56746, "time": "2004-05-03T12:05:53Z", "bug_id": 28738, "creation_time": "2004-05-03T12:05:53Z", "is_private": false, "text": "so fine that little ANT holds up the burden.I was thinking how about giving \nanother trouble to it.\nDebugging with ant !\nwould some one there thinks it is good enough to include this concept in ant's \nlater versions.\nconsider this:\nin a typical program say HelloWorld\n\npublic class HelloWorld{\n\npublic static void main(String arg[]){\n\n//@debug start\nSystem.out.println(\"debug:let say this is a debug code or logging\");\n//@debug end\n\n\nSystem.out.println(\"HELLO WORLD\");\n}\n}\n\nI was thinking that what about a plugin or task or what ever in ANT in ant to \nelliminate those codes enclosed between two //@debug  comments at time of \nbuilding or deployment."}, {"count": 1, "tags": [], "text": "For simple logging use a logging framework, e.g. Log4J. The code remains in \nproduction code but logging is switched of by configuration file.\n\nMore complex things should be done with XDoclet or an preprocessor. See the \nexternal page [1] for resources (search for \"preprocessor\").\n\nI won\u00b4t close this, because there could be other opinions, but I think that \nshould not be done by a build tool...\n\n[1] http://ant.apache.org/external.html", "attachment_id": null, "id": 56748, "creator": "jan@materne.de", "time": "2004-05-03T12:11:46Z", "bug_id": 28738, "creation_time": "2004-05-03T12:11:46Z", "is_private": false}, {"count": 2, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 56754, "time": "2004-05-03T14:32:30Z", "bug_id": 28738, "creation_time": "2004-05-03T14:32:30Z", "is_private": false, "text": "Also it may be possible to use a <replaceregex> tokenfilter to achieve the \noriginal desired result... it would take someone far more skilled with REs than \nI, however..."}, {"count": 3, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 56762, "time": "2004-05-03T15:16:13Z", "bug_id": 28738, "creation_time": "2004-05-03T15:16:13Z", "is_private": false, "text": "Nice idea. I played a little bit:\n\n\n\nbuild.xml\n---------\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<project>\n    <echo> ************* Debug Mode ************* </echo>\n    <delete dir=\"classes\"/>\n    <mkdir dir=\"classes\"/>\n    <javac srcdir=\"src\" destdir=\"classes\"/>\n    <java classname=\"HelloWorld\" classpath=\"classes\"/>\n\n    <echo> ************* LIVE Mode ************* </echo>\n    <delete dir=\"classes\"/>\n    <delete dir=\"src-live\"/>\n    <mkdir dir=\"classes\"/>\n    <copy todir=\"src-live\">\n        <fileset dir=\"src\"/>\n    </copy>\n\n    <!-- important is the .*? because .* matches too much -->\n    <replaceregexp match=\"//@debug start.*?//@debug end\" replace=\"\" flags=\"gs\">\n        <fileset dir=\"src-live\"/>\n    </replaceregexp>\n\n    <javac srcdir=\"src-live\" destdir=\"classes\"/>\n    <java classname=\"HelloWorld\" classpath=\"classes\"/>\n\n</project>\n\n\n\nsrc/HelloWorld.java\n-------------------\n// see http://issues.apache.org/bugzilla/show_bug.cgi?id=28738\npublic class HelloWorld {\n\n    public static void main(String arg[]){\n        //@debug start\n        log(\"debug:let say this is a debug code or logging\");\n        //@debug end\n\n        System.out.println(\"HELLO WORLD\");\n    }\n\n    //@debug start\n    private static void log(String msg) {\n        System.out.println(\"LOG: \" + msg);\n    }\n    //@debug end\n}\n\n\nsrc-live/HelloWorld.java\n------------------------\n// see http://issues.apache.org/bugzilla/show_bug.cgi?id=28738\npublic class HelloWorld {\n\n    public static void main(String arg[]){\n        \n\n        System.out.println(\"HELLO WORLD\");\n    }\n\n    \n}\n\n\n\nBuild-Output:\n-------------\nBuildfile: build.xml\n     [echo]  ************* Debug Mode *************\n   [delete] Deleting directory C:\\tmp\\anttests\\preprocessor\\classes\n    [mkdir] Created dir: C:\\tmp\\anttests\\preprocessor\\classes\n    [javac] Compiling 1 source file to C:\\tmp\\anttests\\preprocessor\\classes\n     [java] LOG: debug:let say this is a debug code or logging\n     [java] HELLO WORLD\n     [echo]  ************* LIVE Mode *************\n   [delete] Deleting directory C:\\tmp\\anttests\\preprocessor\\classes\n   [delete] Deleting directory C:\\tmp\\anttests\\preprocessor\\src-live\n    [mkdir] Created dir: C:\\tmp\\anttests\\preprocessor\\classes\n     [copy] Copying 1 file to C:\\tmp\\anttests\\preprocessor\\src-live\n    [javac] Compiling 1 source file to C:\\tmp\\anttests\\preprocessor\\classes\n     [java] HELLO WORLD\n\nBUILD SUCCESSFUL\nTotal time: 3 seconds\n\n\n\nI suggest you close this bug if this is ok for you."}, {"count": 4, "tags": [], "creator": "jakarta@ehatchersolutions.com", "attachment_id": null, "text": "Here are a couple of other options:\n\nUse aspects (AspectJ, for example) to aspect in/out your debugging code.\n\nOn a slightly less intense way, check out VPP - Velocity PreProcessor - http://vpp.sourceforge.net/\n", "id": 56763, "time": "2004-05-03T15:24:35Z", "bug_id": 28738, "creation_time": "2004-05-03T15:24:35Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 28738, "text": "I\u00b4ve described the <replaceregexp> way in the wiki [1].\nBut I would prefer a real preprocessor...\n\n[1] http://wiki.apache.org/ant/AntOddities \"Implementing a PreProcessor\".", "id": 56764, "time": "2004-05-03T15:34:27Z", "creator": "jan@materne.de", "creation_time": "2004-05-03T15:34:27Z", "is_private": false, "attachment_id": null}]
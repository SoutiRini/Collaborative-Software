[{"count": 0, "tags": [], "bug_id": 40394, "attachment_id": null, "text": "The org.apache.batik.swing.svg provides Swing components that show SVG images.\nHowever, there is no bundled support for the Icon interface. Since the\nJGVTComponent extends the JComponent, it can't be used as a replacement for\nexisting Icon implementations. It doesn't have to be as \"clever\" as the\nJGVTComponent and its extensions, but having painting / rendering transformation\nsupport is a must.", "id": 92907, "time": "2006-09-01T16:57:44Z", "creator": "kirillcool@yahoo.com", "creation_time": "2006-09-01T16:57:44Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 40394, "is_private": false, "id": 92933, "time": "2006-09-03T07:00:54Z", "creator": "cam@apache.org", "creation_time": "2006-09-03T07:00:54Z", "tags": [], "text": "I agree, it probably would be handy to have such a class included in the\ndistribution.  Here is one I wrote a while ago (which isn't very clever), in\ncase you have a need for one: http://mcc.id.au/2005/04/SVGIcon.java"}, {"count": 2, "tags": [], "bug_id": 40394, "text": "Thanks for the implementation you have provided. Is it possible to augment this\nwith resizability (as with the rendering transformation on the JGVTComponent)?", "id": 92936, "time": "2006-09-03T07:16:23Z", "creator": "kirillcool@yahoo.com", "creation_time": "2006-09-03T07:16:23Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 40394, "attachment_id": null, "id": 92939, "time": "2006-09-03T07:33:02Z", "creator": "cam@apache.org", "creation_time": "2006-09-03T07:33:02Z", "is_private": false, "text": "No doubt it is possible.  For simple scaling, you can just pass in a different\nwidth/height to the constructor.  For more complex transformations you could\nperhaps clone the document to add in a transform attribute on the root, or\nsubclass the transcoder classes to do the same thing as the rendering transform\non a JGVTComponent.\n\nContributions are welcome. :)"}, {"count": 4, "text": "I was thinking about simple scaling, but not wanting to create a different icon\nevery time. SVG Salamander's implementation of SVGIcon has the\nsetPreferredSize() method that scales the internal representation to the correct\nsize. By the way, is the attached code synchronous or asynchronous (like\nJGVTComponent)?", "bug_id": 40394, "is_private": false, "id": 92958, "time": "2006-09-03T18:26:57Z", "creator": "kirillcool@yahoo.com", "creation_time": "2006-09-03T18:26:57Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 40394, "attachment_id": null, "id": 92962, "time": "2006-09-03T22:19:42Z", "creator": "cam@apache.org", "creation_time": "2006-09-03T22:19:42Z", "is_private": false, "text": "It is synchronous.  It just uses the transcoder to generate a BufferedImage the\nfirst time it needs to draw the icon, then uses that in subsequent draws."}, {"count": 6, "tags": [], "text": "Created attachment 18815\nExtension for the Batik icon with resizability and asynchronous load\n\nThe attached class contains the implementation of Icon interface with\nasynchronous load (copied and modified from JGVTComponent) and resizability\nsupport (in setPreferredSize())", "attachment_id": 18815, "bug_id": 40394, "id": 92966, "time": "2006-09-03T23:44:57Z", "creator": "kirillcool@yahoo.com", "creation_time": "2006-09-03T23:44:57Z", "is_private": false}, {"count": 7, "tags": [], "creator": "kirillcool@yahoo.com", "attachment_id": null, "text": "I just attached the extended version of the class that you gave earlier. It\ndraws heavily from the asynchronous implementation of JGVTComponent (perhaps\nthis code can be extracted into a common layer) + resizability support in\nsetPreferredSize that schedules the rendering.\n\nIn my application i've extended this icon class with another one that registers\nanother GVT tree renderer listener and on completion calls a method on the\ncontaining component asking it to redraw the icon. This way, the icon is loaded\nasynchronously and the containing component is notified when it should redraw\nthe icon.\n\nThe only thing missing here for me - a static thread pool to dispatch the load\nrequests on a limited number of threads to prevent out of memory exceptions.", "id": 92967, "time": "2006-09-03T23:48:08Z", "bug_id": 40394, "creation_time": "2006-09-03T23:48:08Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 40394, "is_private": false, "text": "Hi Kirill,\n\n   Thanks for the contribution!\n\n   It is useful as a patch in Bugzilla but it would\nbe ideal if you could complete an Apache Individual\nContributor License Agreement (ICLA) which would \nallow us to make this part of Batik.\n\n   From a short review of the code, A couple of other \nthings would need to be done for us to add it to the \nBatik code base:\n\n  1) It would have to be made compilable under JDK 1.3\n     (the current target for Batik).  I see that it is\n     using generics. I didn't see any really deep \n     dependencies.\n\n  2) Something a little more elegant would need to be\n     done with the rendering cache.  I think it will be\n     problematic to have the cache grow without bound.\n\n  3) Also a minor nit, remove the use of '*' in import\n     statements.\n", "id": 92998, "time": "2006-09-04T23:38:03Z", "creator": "deweese@apache.org", "creation_time": "2006-09-04T23:38:03Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "kirillcool@yahoo.com", "attachment_id": null, "is_private": false, "id": 93000, "time": "2006-09-04T23:47:00Z", "bug_id": 40394, "creation_time": "2006-09-04T23:47:00Z", "text": "Cameron,\n\nWhere do i find that agreement to sign ICLA (hope it's OK and will not clash\nwith my employer contract)? You're right about generics - i've wrote it in a 5.0\nproject, but the only thing there is for the image cache. I agree that it should\nbe bound (LinkedHashMap would be soooo great here). I need to find / write some\ncode to make the proper renderer thread pool. Hope it's not too complicated for 1.3.\n\nLast thing - about those * in imports. This is how i prefer them. I just *hate*\ntwo-three page-long import sections :) But that's just me. Feel free to hack at\nthat code in the meantime until i find a reasonable and robust thread pool\nimplementation. With any luck some other Apache project already has it..."}, {"count": 10, "tags": [], "bug_id": 40394, "text": "Hi Kirill,\n\n(In reply to comment #9)\n> Where do i find that agreement to sign ICLA \n\n  Sorry I ment to include the link:\n     http://www.apache.org/licenses/\n\n> (hope it's OK and will not clash with my employer contract)? \n\n   This is exactly what the ICLA is ment to clarify, if you\ncan actually contribute code to an Apache Project.\n\n> Last thing - about those * in imports. This is how i prefer them. \n> I just *hate* two-three page-long import sections :) But that's \n> just me. \n\n   I just hate having no clue what a file is really depending on ;)\n", "id": 93004, "time": "2006-09-05T00:24:21Z", "creator": "deweese@apache.org", "creation_time": "2006-09-05T00:24:21Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 40394, "attachment_id": 18819, "is_private": false, "id": 93010, "time": "2006-09-05T05:47:59Z", "creator": "kirillcool@yahoo.com", "creation_time": "2006-09-05T05:47:59Z", "text": "Created attachment 18819\nNew implementation with support for thread pool"}, {"count": 12, "tags": [], "creator": "kirillcool@yahoo.com", "attachment_id": null, "text": "I just attached a new implementation that has support for thread pool. I've read\nthrough the linked license and it's too much pain for me to understand / consult\nat work / ... In addition, the thread pool implementation uses the new\nconcurrent stuff from 5.0 (Executors and ExecutorService) - i just can't justify\n(for myself) to reinvent the wheel when my own project runs on 5.0. See comments\non 40393 about a possibility to depend on Apache Excalibur and their thread pool\n- this is your decision if you want to provide support for this out of the box.\n\nIt's just too much hassle for me to do something that already exists in two\nlines of code in JDK 5.0 by either implementing it myself / searching the web\nfor ASF-compliant implementation / copy-pasting stuff from Excalibur. \n\nThe current implementation (attached) just extends your own code with stuff from\nJGVTComponent + very simple support for resizing. Feel free to use it or any\nother approach if you decide to implement it in the next Batik version. I just\ndon't feel very comfortable will that licensing / signing / lawyer-oriented\nlanguage. Sorry.", "id": 93011, "time": "2006-09-05T05:53:15Z", "bug_id": 40394, "creation_time": "2006-09-05T05:53:15Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 40394, "attachment_id": null, "text": "(In reply to comment #12)\n> at work / ... In addition, the thread pool implementation uses the new\n> concurrent stuff from 5.0 (Executors and ExecutorService) - i just can't justify\n> (for myself) to reinvent the wheel when my own project runs on 5.0.\n\nSounds reasonable (at least, to me). Marking as dependent on dropping Java 1.4 support (bug 46434) in order for this to be able to land without much more work in the future - whenever the project leaders decide Java 1.5 is the minimum version. Of course that, as already suggested, this can probably be reworked to support Java 1.4 (minimum version in trunk, currently)...\n\n\n> I just don't feel very comfortable will that\n> licensing / signing / lawyer-oriented language. Sorry.\n\nSo this is it? A potentially great contribution getting lost in the bug tracker due to lack of a license agreement? I'd be pretty sad if this wasn't reverted. :-|\n\nNote that, in order for contributions to get integrated into the framework, the ICLA signing step [1] is necessary. This is basically only to assure no legal disputes will occur and that you really contribute things without anything in exchange (please correct me if I'm wrong!). Plain text [2] and PDF [3] versions are available. Marking the issue as \"need info\" to call for a follow up.\n\nPlease re-consider contributing! :-)\n\n\n[1] http://www.apache.org/licenses/#clas\n[2] http://www.apache.org/licenses/icla.txt\n[3] http://www.apache.org/licenses/icla.pdf", "id": 123923, "time": "2009-01-10T06:35:13Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-01-10T06:35:13Z", "is_private": false}, {"count": 14, "text": "(In reply to comment #13)\n> This is basically only to assure no legal\n> disputes will occur and that you really contribute things without anything in\n> exchange.\n\nI did try to find (but wasn't able to) a human-readable/simplified version of the Apache License - Creative Commons [1], for example, have such simplified summaries - just choose a license to see what I mean (at the bottom of each license there's a footnote pointing to the legal version). If someone is in possess of such link and/or knowledge, it would be great to share in order to, possibly, add a link and/or text portion to the license page [2] to make the legal understanding process smoother. :-)\n\n[1] http://creativecommons.org/licenses/\n[2] http://xmlgraphics.apache.org/batik/license.html", "bug_id": 40394, "is_private": false, "id": 123931, "time": "2009-01-11T02:33:43Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-01-11T02:33:43Z", "tags": [], "attachment_id": null}, {"count": 15, "text": "(In reply to comment #14)\n> I did try to find (but wasn't able to) a human-readable/simplified version of\n> the Apache License\n\nWell, recently I stumbled across a human-readable summary [1] of the full license text which, although pretty introductory, should help. ;-)\n\n\n[1] http://www.codeproject.com/info/Licenses.aspx#ctl00_MC_LR_ctl08_N", "bug_id": 40394, "is_private": false, "id": 131443, "time": "2009-10-27T16:56:53Z", "creator": "helder.magalhaes@gmail.com", "creation_time": "2009-10-27T16:56:53Z", "tags": [], "attachment_id": null}]
[{"count": 0, "attachment_id": null, "creator": "awmaximus@gmail.com", "text": "Error:\n\norg.xml.sax.SAXParseException: White space is required after \"<!ENTITY\" in the entity declaration.\n\tat org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)\n\tat org.apache.xalan.transformer.TransformerIdentityImpl.transform(TransformerIdentityImpl.java:484)\n\tat witec30.XHTML2PDF.convertFO2PDF(XHTML2PDF.java:85)\n\tat witec30.XHTML2PDF.execute(XHTML2PDF.java:141)\n\tat br.com.itx.integration.AbstractConnector.execute(AbstractConnector.java:45)\n\tat br.com.itx.engine.CoreConnector.execute(CoreConnector.java:67)\n\tat br.com.itx.component.taglib.ExecuteCore.doStartTag(ExecuteCore.java:97)\n\tat org.apache.jsp.rat.pdf_005fdownload_005fpre_jsp._jspx_meth_w_executeCore_8(pdf_005fdownload_005fpre_jsp.java:915)\n\tat org.apache.jsp.rat.pdf_005fdownload_005fpre_jsp._jspService(pdf_005fdownload_005fpre_jsp.java:245)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:97)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:334)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)\n\tat org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:574)\n\tat org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:499)\n\tat br.com.itx.engine.Execute.doJsp(Execute.java:465)\n\tat br.com.itx.engine.Execute.doPost(Execute.java:416)\n\tat br.com.itx.engine.Execute.doGet(Execute.java:96)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n\tat org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n\tat org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n\tat org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n\tat java.lang.Thread.run(Thread.java:619)\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nJava code:\n\n    public String convertFO2PDF(WIMap wiMap, String fo, String pdf) throws IOException, FOPException {\n        \n        OutputStream out = null;\n        String status = \"true\";\n        try {\n            FopFactory fopFactory = FopFactory.newInstance();\n            FOUserAgent foUserAgent = fopFactory.newFOUserAgent();\n            // configure foUserAgent as desired\n            \n            if (!wiMap.get(\"tmp.baseurl_pdf\").equals(\"\")) foUserAgent.setBaseURL(wiMap.get(\"tmp.baseurl_pdf\"));\n            if (!wiMap.get(\"tmp.creator_pdf\").equals(\"\")) foUserAgent.setCreator(wiMap.get(\"tmp.creator_pdf\"));\n            if (!wiMap.get(\"tmp.producer_pdf\").equals(\"\")) foUserAgent.setProducer(wiMap.get(\"tmp.producer_pdf\"));\n            if (!wiMap.get(\"tmp.author_pdf\").equals(\"\")) foUserAgent.setAuthor(wiMap.get(\"tmp.author_pdf\"));\n            if (!wiMap.get(\"tmp.title_pdf\").equals(\"\")) foUserAgent.setTitle(wiMap.get(\"tmp.title_pdf\"));\n            if (!wiMap.get(\"tmp.keywords_pdf\").equals(\"\")) foUserAgent.setKeywords(wiMap.get(\"tmp.keywords_pdf\"));\n            if (!wiMap.get(\"tmp.resolution_pdf\").equals(\"\")) foUserAgent.setTargetResolution(Integer.parseInt(wiMap.get(\"tmp.resolution_pdf\"))); // =300dpi (dots/pixels per Inch)\n            foUserAgent.setCreationDate(new Date());\n            foUserAgent.getRendererOptions().put(\"encryption-params\", this.param);\n            \n            // Setup output stream.  Note: Using BufferedOutputStream\n            // for performance reasons (helpful with FileOutputStreams).\n            out = new FileOutputStream(new File(pdf));\n            out = new BufferedOutputStream(out);\n            \n            // Construct fop with desired output format\n            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, out);\n            \n            // Setup JAXP using identity transformer\n            TransformerFactory factory = TransformerFactory.newInstance();\n            Transformer transformer = factory.newTransformer(); // identity transformer\n            \n            // Setup input stream\n            Source src = new StreamSource(new File(fo));\n            \n            // Resulting SAX events (the generated FO) must be piped through to FOP\n            Result res = new SAXResult(fop.getDefaultHandler());\n            \n            // Start XSLT transformation and FOP processing\n            transformer.transform(src, res);\n            \n            // Result processing\n            FormattingResults foResults = fop.getResults();\n            java.util.List pageSequences = foResults.getPageSequences();\n            for (java.util.Iterator it = pageSequences.iterator(); it.hasNext();) {\n                PageSequenceResults pageSequenceResults = (PageSequenceResults)it.next();\n                wiMap.put(\"tmp.xhtml2pdf.convertFO2PDF.message\", \"PageSequence \"\n                        + (String.valueOf(pageSequenceResults.getID()).length() > 0\n                        ? pageSequenceResults.getID() : \"<no id>\")\n                        + \" generated \" + pageSequenceResults.getPageCount() + \" pages.\");\n            }\n            wiMap.put(\"tmp.xhtml2pdf.qtdpages\", foResults.getPageCount());\n            \n        } catch (Exception e) {\n            status = \"false\";\n            wiMap.put(\"tmp.xhtml2pdf.convertFO2PDF.err\", e.getMessage());\n            e.printStackTrace(System.out);\n        } finally {\n            out.close();\n            return status;\n        }\n    }", "id": 123162, "time": "2008-12-08T04:33:17Z", "bug_id": 46364, "creation_time": "2008-12-08T04:33:17Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 46364, "text": "This has nothing to do with FOP. It's the XML parser that's complaining about your input XML.\n\nBTW, you might want to reuse the FopFactory instance instead of recreating it each time if you want to profit from image caching and such.", "id": 123164, "time": "2008-12-08T05:19:17Z", "creator": "jeremias@apache.org", "creation_time": "2008-12-08T05:19:17Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 46364, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "count": 2, "id": 156800, "time": "2012-04-01T13:53:04Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:53:04Z", "is_private": false}]
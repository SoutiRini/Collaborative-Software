[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "text": "Release candidate of 7.0.83\n- Java 8u152\n- NIO connector\n- Compression enabled\n- Running with Security Manager \n    <Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\"\n               useSendfile=\"false\" compression=\"force\" compressionMinSize=\"1\"\n    />\n\nI noted the following error in catalina.2017-12-11.log while running the async examples (for sake of smoke-testing):\n\nThere are two log messages.\nThe first INFO one is OK (though why we are logging it at all?), the second one is WARNING and is unexpected.\n\n[[[\n\u0434\u0435\u043a 11, 2017 1:38:44 PM org.apache.coyote.AbstractProcessor setErrorState\nINFO: An error occurred in processing while on a non-container thread. The connection will be closed immediately\njava.io.IOException: \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u0445\u043e\u0441\u0442-\u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0440\u0430\u0437\u043e\u0440\u0432\u0430\u043b\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n(English Translation: \"The program on your host computer has broken the established connection\")\n\n\tat sun.nio.ch.SocketDispatcher.write0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n\tat sun.nio.ch.IOUtil.write(IOUtil.java:65)\n\tat sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)\n\tat org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:125)\n\tat org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)\n\tat org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:174)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:164)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:243)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:95)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:828)\n\tat org.apache.coyote.Response.action(Response.java:171)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:366)\n\tat org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:334)\n\tat org.apache.catalina.connector.CoyoteWriter.flush(CoyoteWriter.java:98)\n\tat async.AsyncStockServlet.writeStock(AsyncStockServlet.java:102)\n\tat async.AsyncStockServlet.tick(AsyncStockServlet.java:82)\n\tat async.Stockticker.run(Stockticker.java:84)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\u0434\u0435\u043a 11, 2017 1:38:44 PM org.apache.catalina.core.AsyncContextImpl setErrorState\nWARNING: onError() failed for listener of type [org.apache.catalina.core.AsyncListenerWrapper]\njava.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [MUST_COMPLETE]\n\tat org.apache.coyote.AsyncStateMachine.doComplete(AsyncStateMachine.java:291)\n\tat org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:275)\n\tat org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:516)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:946)\n\tat org.apache.coyote.Request.action(Request.java:345)\n\tat org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:103)\n\tat async.AsyncStockServlet.onError(AsyncStockServlet.java:118)\n\tat org.apache.catalina.core.AsyncListenerWrapper.fireOnError(AsyncListenerWrapper.java:54)\n\tat org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:455)\n\tat org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:298)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1713)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:616)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1775)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1734)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n]]]", "id": 202695, "time": "2017-12-11T10:52:54Z", "bug_id": 61886, "creation_time": "2017-12-11T10:52:54Z", "is_private": false}, {"count": 1, "tags": [], "text": "1) The second exception happens in error handling in example\n\nasync.AsyncStockServlet.onError(AsyncStockServlet.java:118)\n\nThis is implemented as\n\n    @Override\n    public void onError(AsyncEvent event) throws IOException {\n        event.getAsyncContext().complete();\n    }\n\n\n\n2) Javadoc in AsyncStateMachine\n\n * MUST_COMPLETE    - ServletRequest.startAsync() followed by complete() have\n *                    been called during a single Servlet.service() method. The\n *                    complete() will be processed as soon as the request\n *                    finishes.\n\nIt says that both startAsync() and complete() have been called by Servlet.service() method.\n\nHow is it? There is no such code in AsyncStockServlet.\n\n\n3) Can we ignore duplicate complete() calls?", "is_private": false, "bug_id": 61886, "id": 202702, "time": "2017-12-11T12:06:33Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-12-11T12:06:33Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61886, "text": "I can repeat this. I'm looking into why it happens.\n\nThe spec is clear about when it is legal to call this method, but unclear as to what to do if it is called illegally. Generally that means the container can handle it however it pleases. I'd lean towards an error of some kind because the API is being used incorrectly.\n\nI'm not sure at this point how long it will take to figure out what is going on. From experience it will either be a few minutes or a few days.", "id": 202718, "time": "2017-12-11T16:48:18Z", "creator": "markt@apache.org", "creation_time": "2017-12-11T16:48:18Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "When I started to investigate this I was getting unexpected 500 responses if I accessed the example directly. The root cause of that was an AccessControlException retying to load an anonymous inner class generated by the compiler when enums are used with switch. Fixing that appears to have fixed this bug too. With the necessary classes pre-loaded, I can't recreate this.\n\nIt is speculation but I suspect what was happening was that the AccessControlException was causing errors in the error handling and Tomcat's attempts to clean up after this were causing the ISE.", "id": 202721, "time": "2017-12-11T17:53:16Z", "bug_id": 61886, "creation_time": "2017-12-11T17:53:16Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61886, "is_private": false, "text": "> Fixing that appears to have fixed this bug too.\n\nConfirmed. I cannot reproduce the WARNING message now. Good.\n\n\nThe first message (INFO) is easy to reproduce:\n1. go to http://localhost:8080/examples/async/stockticker\n2. press F5, ESC repeatedly\n\nI think it should be controlled via UserDataHelper, or reduced to DEBUG.", "id": 202729, "time": "2017-12-12T10:43:09Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2017-12-12T10:43:09Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 202786, "time": "2017-12-14T16:28:11Z", "bug_id": 61886, "creation_time": "2017-12-14T16:28:11Z", "text": "(In reply to Konstantin Kolinko from comment #4)\n> > Fixing that appears to have fixed this bug too.\n> \n> Confirmed. I cannot reproduce the WARNING message now. Good.\n\nI added some debug/logging code to AsyncStockServlet and can reproduce this WARNING easily.  This does happen without a SecurityManager.\n\nTwo conclusions here:\n1. AsyncStockServlet.onError() is:\n\n    public void onError(AsyncEvent event) throws IOException {\n        event.getAsyncContext().complete();\n    }\n\nThis WARNING happens because the complete() call here fails with an IllegalStateException.\n\nIf the call above were wrapped with try/catch, no warning would be printed.\n\n\n2. There is a typo in AsyncContextImpl.setErrorState()\n\n>                    listener.fireOnError(errorEvent);\n>                } catch (Throwable t2) {\n>                    ExceptionUtils.handleThrowable(t);\n>                    log.warn(\"onError() failed for listener of type [\" +\n>                            listener.getClass().getName() + \"]\", t2);\n\nIt should be handleThrowable(t2) instead of (t) above.\n\nLogging a warning here looks excessive."}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "The ISE was triggered by a bug in the async stock servlet. Multiple threads were trying to complete the AsyncContext. This has been fixed.\n\nLogging errors in non-container threads at INFO has been dropped to debug. The application in notified of the error via the standard async error handling so debug is sufficient here.\n\nThe typo in AsyncContextImpl.setErrorState() has been fixed.\n\nLogging failed listener methods at WARN is consistent with listener handling elsewhere in Tomcat. There are examples of it being logged at ERROR.\n\nI believe all the remaining issues in this report have been resolved.\n\nFixed in:\n- trunk for 9.0.3 onwards\n- 8.5.x for 8.5.25 onwards\n- 8.0.x for 8.0.49 onwards\n- 7.0.x for 7.0.84 onwards", "id": 203086, "time": "2018-01-04T20:30:49Z", "bug_id": 61886, "creation_time": "2018-01-04T20:30:49Z", "is_private": false}, {"count": 7, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 35659, "text": "Created attachment 35659\ncatalina.2018-01-08.log.txt\n\nTesting current Tomcat 9.0-dev @r1820558.\n\nGenerally - OK.\nA NullPointerException when stopping Tomcat,\nin AsyncContextImpl.fireOnComplete(AsyncContextImpl.java:116)\n\nI am attaching the log file here.", "id": 203152, "time": "2018-01-08T13:43:25Z", "bug_id": 61886, "creation_time": "2018-01-08T13:43:25Z", "is_private": false}, {"count": 8, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "Testing current Tomcat 8.5-dev @r1820546\n\nA ConcurrentModificationException is printed on the console, but not in the logs.\n\nNothing interesting in the logs. Not attaching them here.\n\n\n08-Jan-2018 17:08:49.566 INFO [http-nio-8080-exec-1] async.AsyncStockServlet.<init> AsyncStockServlet created\njava.util.ConcurrentModificationException\n        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)\n        at java.util.ArrayList$Itr.next(ArrayList.java:831)\n        at async.Stockticker.run(Stockticker.java:83)\n        at java.lang.Thread.run(Thread.java:745)\njava.util.ConcurrentModificationException\n        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)\n        at java.util.ArrayList$Itr.next(ArrayList.java:831)\n        at async.Stockticker.run(Stockticker.java:83)\n        at java.lang.Thread.run(Thread.java:745)\njava.util.ConcurrentModificationException\n        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)\n        at java.util.ArrayList$Itr.next(ArrayList.java:831)\n        at async.Stockticker.run(Stockticker.java:83)\n        at java.lang.Thread.run(Thread.java:745)", "id": 203153, "attachment_id": null, "bug_id": 61886, "creation_time": "2018-01-08T14:12:27Z", "time": "2018-01-08T14:12:27Z", "is_private": false}, {"count": 9, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "is_private": false, "id": 203154, "time": "2018-01-08T14:42:00Z", "bug_id": 61886, "creation_time": "2018-01-08T14:42:00Z", "text": "(In reply to Konstantin Kolinko from comment #8)\n> Testing current Tomcat 8.5-dev @r1820546\n\nThat ConcurrentModificationException was when running with Java 7u80.\n\nWith Java 8u152 it also occurs. Line numbers are a bit different,\njava.util.ConcurrentModificationException\n        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)\n        at java.util.ArrayList$Itr.next(ArrayList.java:859)\n        at async.Stockticker.run(Stockticker.java:83)\n        at java.lang.Thread.run(Thread.java:748)"}, {"count": 10, "tags": [], "bug_id": 61886, "is_private": false, "text": "I believe I've fixed the ConcurrentModificationException. Still investigating the NPE.", "id": 203171, "time": "2018-01-09T21:11:06Z", "creator": "markt@apache.org", "creation_time": "2018-01-09T21:11:06Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "NPE on Tomcat (actually just webapp) stop should be fixed now too.", "is_private": false, "bug_id": 61886, "id": 203173, "time": "2018-01-09T22:00:25Z", "creator": "markt@apache.org", "creation_time": "2018-01-09T22:00:25Z", "attachment_id": null}]
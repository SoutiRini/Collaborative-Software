[{"count": 0, "attachment_id": 28390, "creator": "marco@tols.org", "text": "Created attachment 28390\ncrude fix for the segfaults - doesn't consider whether it opens memleaks\n\nHi there,\n\nI mailed this to the users@httpd.apache.org mailing list with subject \"mod_lua segfault in httpd-2.4.1\" last friday, but this is probably a better place to report it.\n\nAlso, I checked whether the fix for bug 49044 also fixes this issue, but it doesn't.  Also the memset(0) that is used in the fix for that bug is now solved by using apr_pcalloc instead of apr_palloc in the code from the 2.4.1 tarball, so doesn't apply anymore.\n\nWhat I mailed is this:\n------\nGoodday,\n\nI have tried to make a setup using mod_lua using version 2.4.1 of the\napache httpd server and noticed that requests involving lua render a\nsegfault message in the error log like this one:\n\n---\n[Fri Feb 24 11:42:41.410706 2012] [core:notice] [pid 64609:tid 34397516800] AH00052: child pid 64612 exit signal Segmentation fault (11)\n---\n\nThis is very easy to replicate by following these steps:\n- download the httpd-2.4.1.tar.gz from\n  http://httpd.apache.org/download.cgi#apache24\n- create a directory, in my case I created /apache24 and changed\n  ownership to myself\n- extract the tarball\n- execute:\n  ./configure --prefix /apache24 --enable-lua\n- run 'make' and 'make install'\n- modify /apache24/conf/httpd.conf and make the following changes:\n  Listen 8080 # (Instead of 80)\n  LoadModule lua_module modules/mod_lua.so\n  LuaHookAccessChecker /apache24/lua/luatest.lua access_hook\n- Create /apache24/lua/luatest.lua with the following contents  (Other\n  contents render a segfault as well)\n  -----\n  require 'apache2'\n\n  function access_hook(r)\n    r:puts(\"---- access_hook\\n\")\n    return apache2.DECLINE\n  end\n  -----\n- start the server using a simple '/apache24/bin/httpd'\n- Keep a tail open on the error log\n- Do something like: curl -D - -s 'http://localhost:8080/'\n- You will see expected output, i.e. \"---- access_hook\" and the \"It\n  works!\" text.\n- The error log will log a segfault from the child that handled the\n  request, like the one I paste above.\n\nThis can be fixed by the attached patch, which is really crude and\ndoesn't consider whether it opens up a memory leak or not.\n\nIs there something I'm doing wrong, or is this a bug in the 2.4.1\nmod_lua?\n\nThis happens both on FreeBSD 9.0-RELEASE as well as\nlinux 2.6.27.59 and 3.0.20.\n\nThanks in advance,\n\nMarco van Tol\n------", "id": 154280, "time": "2012-02-27T12:12:32Z", "bug_id": 52779, "creation_time": "2012-02-27T12:12:32Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I just replicated this bug.\nThe segfault is caused by cleanup_lua getting passed a NULL pointer;\nthis NULL pointer is passed to lua_close(NULL), which tries to dereference\nis which cases a segfault.\n\nSo how can cleanup_lua be passed a NULL pointer? Here is where it gets weird:\nThe NULL pointer stems from ap_lua_get_lua_state where apr_pool_userdata_set\nis called with L==NULL.\n\nNow the weird thing is that L appears to be filled in slightly later.\nI added some debug code to print the value of L returned by vm_construct\n      if(L==NULL) {\n        ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, lifecycle_pool, APLOGNO(01483)\n                      \"creating lua_State with file %s\", spec->file);\n        /* not available, so create */\n\n        if(vm_construct((void **)&L, spec, lifecycle_pool) == APR_SUCCESS) {\n                ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, lifecycle_pool,\n                        APLOGNO(01483)\n                      \"call apr_pool_userdata_set with %x\", (unsigned int) L);\n                ap_log_perror(APLOG_MARK, APLOG_DEBUG, 0, lifecycle_pool,\n                        APLOGNO(01483)\n                      \"call apr_pool_userdata_set with %x\", (unsigned int) L);\n\n          apr_pool_userdata_set(L,\n                                spec->file,\n                                cleanup_lua,\n                                lifecycle_pool);\n        }\n\nnote that both ap_log_perror calls are identical, however the output isn't\nidentical:\n\n[Tue Jun 12 22:00:10.169038 2012] [lua:debug] [pid 25340:tid 1136863568] lua_vmprep.c(415): AH01483: creating lua_State with file /home/beheer/dick/apache/lua/luatest.lua\n[Tue Jun 12 22:00:10.169696 2012] [lua:debug] [pid 25340:tid 1136863568] lua_vmprep.c(365): AH01481: loading lua file /home/beheer/dick/apache/lua/luatest.lua\n[Tue Jun 12 22:00:10.169905 2012] [lua:debug] [pid 25340:tid 1136863568] lua_vmprep.c(420): AH01483: call apr_pool_userdata_set with 0\n[Tue Jun 12 22:00:10.169924 2012] [lua:debug] [pid 25340:tid 1136863568] lua_vmprep.c(423): AH01483: call apr_pool_userdata_set with 2224bc0\n\nI assume that without the debug code the first (NULL) value is passed\nto apr_pool_userdata_set, causing havoc.\n\nAs to why L==NULL at the firs reference but not on subsequent references I have no idea. A bad compiler optimization perhaps?\nThat might explain why not everybody can replicate this bug.", "is_private": false, "id": 159929, "creation_time": "2012-06-12T20:13:14Z", "time": "2012-06-12T20:13:14Z", "creator": "Dick.Snippe@tech.omroep.nl", "bug_id": 52779, "attachment_id": null}, {"count": 2, "tags": [], "creator": "Dick.Snippe@tech.omroep.nl", "attachment_id": null, "id": 159934, "time": "2012-06-12T21:54:00Z", "bug_id": 52779, "creation_time": "2012-06-12T21:54:00Z", "is_private": false, "text": "Because\n static apr_status_t vm_construct(void **vm, void *params, apr_pool_t *lifecycle_pool)\ndoes a *vm = L and thereby dereferences a void pointer. When I change it to\nstatic apr_status_t vm_construct(lua_State **vm, void *params, apr_pool_t *lifecycle_pool)\nthe function acts as expected and the problem appers to be solved"}, {"count": 3, "tags": [], "creator": "Dick.Snippe@tech.omroep.nl", "text": "Created attachment 28926\nchange void** to lua_State ** to wokr around compiler(?) issue\n\nThis simple patch changes the type of the first argument in vm_construct from void ** to lua_State **, this fixes our issue on 64bit linux, gcc 4.1.2.\n\nthe issue does not happen on 32bit linux.", "id": 159944, "time": "2012-06-13T12:43:31Z", "bug_id": 52779, "creation_time": "2012-06-13T12:43:31Z", "is_private": false, "attachment_id": 28926}, {"count": 4, "tags": [], "bug_id": 52779, "attachment_id": null, "id": 160047, "time": "2012-06-16T22:43:15Z", "creator": "sf@sfritsch.de", "creation_time": "2012-06-16T22:43:15Z", "is_private": false, "text": "committed to trunk as r1351012\n\nMarco, can you verify if that fixes the problem for you, too?"}, {"count": 5, "tags": [], "creator": "marco@tols.org", "attachment_id": null, "id": 160328, "time": "2012-06-28T21:26:13Z", "bug_id": 52779, "creation_time": "2012-06-28T21:26:13Z", "is_private": false, "text": "Hm, I had replied a couple of days ago, but that somehow didn't make it into this system.  What I wrote was this, which is still valid:\n\n-----\nAs far as I'm concerned Dick Snippe became authoritative for this bug.\n\nWithout going into much out-of-scope detail, he continued where I left off. :-)\n\nThank you,\n-----"}, {"count": 6, "tags": [], "bug_id": 52779, "is_private": false, "text": "Allied to 2.4 as part of r1369494.\nReleased with 2.4.3.", "id": 161578, "time": "2012-08-21T16:00:13Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2012-08-21T16:00:13Z", "attachment_id": null}]
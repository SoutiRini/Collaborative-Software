[{"count": 0, "tags": [], "bug_id": 5507, "attachment_id": null, "id": 9040, "time": "2001-12-19T03:58:30Z", "creator": "tapik@buchtovi.cz", "creation_time": "2001-12-19T03:58:30Z", "is_private": false, "text": "If I use Manager configured for FileStore like\n <Context path=\"/dialogus\" docBase=\"dialogus\" debug=\"0\"\n                 reloadable=\"true\">\n          <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                     prefix=\"dialogus.\" suffix=\".log\"\n                  timestamp=\"true\"/>\n         <Manager className=\"org.apache.catalina.session.PersistentManager\"\n              debug=\"0\"\n              saveOnRestart=\"true\"\n              maxActiveSessions=\"1000\"\n              minIdleSwap=\"-1\"\n              maxIdleSwap=\"-1\"\n              maxIdleBackup=\"1800\">\n                <Store className=\"org.apache.catalina.session.FileStore\"/>\n          </Manager>\n        </Context>\n\nIt causes many problems:\n- There are two threads which expires sessions running concurently. First in store and second in \npersistent manager.\n- The threads load each stored session, test if the one has to expire and (if yes) expire it. The \nproblem of the mechanism is the harmless method StandardSession.setID(), which also stores \nthe session to the manager. Why it is implemented so badly I don't know. The deserialization \nloads the session and uses the method setId() so during the tests for expiration the old stored \nsession replaces the current, active session and all new values are lost and it is a big shame :-((((\n\nI've posted the three patches to the tomcat-dev list. If it is incorrect, please rewrite the managing \nmechanism according these problems"}, {"count": 1, "tags": [], "bug_id": 5507, "attachment_id": null, "id": 9228, "time": "2001-12-31T06:31:14Z", "creator": "tapik@buchtovi.cz", "creation_time": "2001-12-31T06:31:14Z", "is_private": false, "text": "Huh? Is the assigner of this bug alive? I don't think so.\n"}, {"count": 2, "tags": [], "bug_id": 5507, "attachment_id": null, "is_private": false, "id": 9649, "time": "2002-01-15T04:10:24Z", "creator": "tapik@buchtovi.cz", "creation_time": "2002-01-15T04:10:24Z", "text": "*** Bug 5799 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "text": "\nA session that is in \"the store\" is offically in limbo.  It shouldn't\ntalk to the manager (as a newer copy of itself may exist in the manager.)\nWhen session.expire() was called by the store, a newer version of this \nsession could be wiped from memory.  BAD, um kay.\n\n\nIndex: StoreBase.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/session/StoreBase.java,v\nretrieving revision 1.5\ndiff -u -r1.5 StoreBase.java\n--- StoreBase.java\t9 Jun 2002 02:19:43 -0000\t1.5\n+++ StoreBase.java\t24 Jun 2002 20:40:58 -0000\n@@ -305,6 +305,7 @@\n         for (int i = 0; i < keys.length; i++) {\n             try {\n                 StandardSession session = (StandardSession) load(keys[i]);\n+                session.setManager(null);\n                 if (!session.isValid())\n                     continue;\n                 int maxInactiveInterval = session.getMaxInactiveInterval();\n", "attachment_id": null, "id": 18498, "creator": "bob@jadn.com", "time": "2002-06-24T20:46:08Z", "bug_id": 5507, "creation_time": "2002-06-24T20:46:08Z", "is_private": false}, {"count": 4, "tags": [], "text": "\nErr...  That patch is not a happy patch.   I am still winding my way through \nthe PersistentManager/Store/FileStore/StandardSession contracts.  The\nPersistentManager sometimes backs up sessions (which means it just wants copies\naround incase they are needed), and sometimes swaps out sessions because too\nmany are in memory.  So if a 'Stored' session is expired, do we fire off the\nmanagers Session Destruction listeners?  Depends if the backup is just expiring\nthen no, if it is a swapped out session - then yes.  Not sure yet how to determine\nwhich sessions are which from the perserved state.  The problem is who OWNS\nthe session, does the Store own it, or does the Manager own it?  For swapouts\nownership is clear, for backups ownership is muddy.\n\nAnyway, I am still looking into this.\n\n\n", "is_private": false, "id": 18506, "creator": "bob@jadn.com", "time": "2002-06-24T21:26:50Z", "bug_id": 5507, "creation_time": "2002-06-24T21:26:50Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 5507, "is_private": false, "id": 18744, "creation_time": "2002-06-28T20:13:31Z", "time": "2002-06-28T20:13:31Z", "creator": "bob@jadn.com", "text": "\nok, FileStore.load() is used to fetch Sessions off disk.  It creates\na session using manager.createSession(), then reads the file stream\nto populate the Session.   \n\nThe probelm is \"manager.createSession()\" creates a brand new spanking session\n(including generating a new ID) and adds it into its list of active sessions. \nThe FileStore is immediately writting over all the sessions data, thus\nthe sesssion manager has a key (newly generated) that points to a session\n(populated with data from a file) and the two dont relate correctly.\n\nThis simple patch seems to fix it.\n\n\nIndex: FileStore.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/session/FileStore.java,v\nretrieving revision 1.7\ndiff -u -r1.7 FileStore.java\n--- FileStore.java\t18 Mar 2002 18:56:21 -0000\t1.7\n+++ FileStore.java\t28 Jun 2002 20:08:38 -0000\n@@ -330,6 +330,7 @@\n         try {\n             StandardSession session =\n                 (StandardSession) manager.createSession();\n+            manager.remove(session);\n             session.readObjectData(ois);\n             session.setManager(manager);\n             return (session);\n", "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 5507, "is_private": false, "id": 19113, "time": "2002-07-08T13:01:31Z", "creator": "bob@jadn.com", "creation_time": "2002-07-08T13:01:31Z", "tags": [], "text": "\nCurrently when backup's of sessions expire they take out the session in RAM\nalong with them.  This patch fixes this problem.\n\nSome details...  There are 2 types of sessions in the Store.\n\n   1. Backed up Sessions (copies of sessions currently in RAM)\n\n   2. Swapped out Sessions (not in RAM)\n\nWhen backed up sessions expire, they should go away quietly.  When\nswapped out sessions go away, they should do so like ones in RAM. (events\nfire, etc...)     Additionally, a backed up session expireing should not\neffect a copy of that session currently in RAM (RAM holds a more recent\ncopy - when a RAM version is expired, its backup is always removed) So\nsessions in the store, but not in RAM are swap outs.  Sessions in RAM\nand in the store are backups.\n\nThis code \"expires\" swap outs, and \"recycles\" backups when they run out\nof time.\n\nCheers,\n-bob\n\n\nIndex: PersistentManagerBase.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/session/PersistentManagerBase.java,v\nretrieving revision 1.8\ndiff -u -r1.8 PersistentManagerBase.java\n--- PersistentManagerBase.java\t9 Jun 2002 02:19:43 -0000\t1.8\n+++ PersistentManagerBase.java\t8 Jul 2002 12:53:04 -0000\n@@ -551,6 +551,26 @@\n \n \n     /**\n+     * Return true, if the session id is loaded in memory\n+     * otherwise false is returned\n+     *\n+     * @param id The session id for the session to be searched for\n+     *\n+     * @exception IOException if an input/output error occurs while\n+     *  processing this request\n+     */\n+    public boolean isLoaded( String id ){\n+        try {\n+            if ( super.findSession(id) != null )\n+                return true;\n+        } catch (IOException e) {\n+            log(\"checking isLoaded for id, \" + id + \", \"+e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+\n+    /**\n      * Return the active Session, associated with this Manager, with the\n      * specified session id (if any); otherwise return <code>null</code>.\n      * This method checks the persistence store if persistence is enabled,\nIndex: StoreBase.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/session/StoreBase.java,v\nretrieving revision 1.5\ndiff -u -r1.5 StoreBase.java\n--- StoreBase.java\t9 Jun 2002 02:19:43 -0000\t1.5\n+++ StoreBase.java\t8 Jul 2002 12:53:04 -0000\n@@ -313,7 +313,13 @@\n                 int timeIdle = // Truncate, do not round up\n                     (int) ((timeNow - session.getLastAccessedTime()) / 1000L);\n                 if (timeIdle >= maxInactiveInterval) {\n-                    session.expire();\n+                    if ( ( (PersistentManagerBase) manager).isLoaded( keys[i] )) {\n+                        // recycle old backup session\n+                        session.recycle();\n+                    } else {\n+                        // expire swapped out session\n+                        session.expire();\n+                    }\n                     remove(session.getId());\n                 }\n             } catch (IOException e) {\n"}, {"count": 7, "tags": [], "bug_id": 5507, "attachment_id": null, "id": 21832, "creation_time": "2002-08-27T19:13:06Z", "time": "2002-08-27T19:13:06Z", "creator": "bob@jadn.com", "text": "I applied this fix to Tomcat 5 today.  Aug 27 2002\n\n", "is_private": false}, {"count": 8, "tags": [], "text": "Also applied to TC4.", "attachment_id": null, "id": 21908, "creator": "bob@jadn.com", "time": "2002-08-28T17:10:15Z", "bug_id": 5507, "creation_time": "2002-08-28T17:10:15Z", "is_private": false}]
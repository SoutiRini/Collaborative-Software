[{"count": 0, "tags": [], "bug_id": 55904, "is_private": false, "text": "When a cell containing hyperlink is drag copied the hyperlink cell reference is stored in range, for example, ref=\"B3:B10\" and so the equals fails in the below getHyperLink code of XSSFSheet\n\n\npublic XSSFHyperlink getHyperlink(int row, int column) {\n        String ref = new CellReference(row, column).formatAsString();\n        for(XSSFHyperlink hyperlink : hyperlinks) {\n            if(hyperlink.getCellRef().equals(ref)) {\n                return hyperlink;\n            }\n        }\n        return null;\n    }\n\n\nMy solution,\n\npublic XSSFHyperlink getHyperlink(int row, int column) {\n\tString ref = new CellReference(row, column).formatAsString();\n\tfor (XSSFHyperlink hyperlink : hyperlinks) {\n\t\tif (hyperlink.getCellRef().contains(\":\")){\n\t\t\tif(checkWithInRange(hyperlink.getCellRef(), ref)) {\n\t\t\t\treturn hyperlink;\n\t\t\t}\n\t\t} else if (hyperlink.getCellRef().equals(ref)) {\n\t\t\treturn hyperlink;\n\t\t}\n\t}\n\treturn null;\n}\n\npublic static final String RANGE_PATTERN = \"(.+)(\\\\d)+:(.+)(\\\\d)+\";\npublic static final String INPUT_PATTERN = \"(.+)(\\\\d)+\";\npublic static final Pattern P1 = Pattern.compile(RANGE_PATTERN);\npublic static final Pattern P2 = Pattern.compile(INPUT_PATTERN);\n\n/*\n* range - eg, \"B3:B8\"\n* input - B4\n*/\npublic static boolean checkWithInRange(String range, String input) {\n\tMatcher m1 = P1.matcher(range);\n\tMatcher m2 = P2.matcher(input);\n\tif (m1.find() && m2.find()) {\n\t\tString prefix1 = m1.group(1);\n\t\tString num1 = m1.group(2);\n\t\tString prefix2 = m1.group(3);\n\t\tString num2 = m1.group(4);\n\n\t\tString inputPrefix = m2.group(1);\n\t\tString inputNum = m2.group(2);\n\n\t\tif (prefix1 != null && prefix2 != null && inputPrefix != null\t\t\t&& prefix1.equalsIgnoreCase(prefix2) && prefix2.equalsIgnoreCase(inputPrefix)\t\t&& num1 != null && num2 != null && inputNum != null) {\n\t\t\tint n1 = Integer.parseInt(num1);\n\t\t\tint n2 = Integer.parseInt(num2);\n\t\t\tint n3 = Integer.parseInt(inputNum);\n\t\t\tif (n3 >= n1 && n3 <= n2) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "id": 171811, "time": "2013-12-18T12:46:17Z", "creator": "macpraveen@gmail.com", "creation_time": "2013-12-18T12:46:17Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "macpraveen@gmail.com", "attachment_id": null, "text": "My updated solution code\n\npublic static final String RANGE_PATTERN = \"(\\\\D+)(\\\\d+):(\\\\D+)(\\\\d+)\";\n\tpublic static final String INPUT_PATTERN = \"(\\\\D+)(\\\\d+)\";\n\tpublic static final Pattern P1 = Pattern.compile(RANGE_PATTERN);\n\tpublic static final Pattern P2 = Pattern.compile(INPUT_PATTERN);\n\t\n\n\tpublic static boolean checkWithInRange(String range, String input) {\n\t\tMatcher m1 = P1.matcher(range);\n\t\tMatcher m2 = P2.matcher(input);\n\t\tif (m1.find() && m2.find()) {\n\t\t\tString prefix1 = m1.group(1);\n\t\t\tString num1 = m1.group(2);\n\t\t\tString prefix2 = m1.group(3);\n\t\t\tString num2 = m1.group(4);\n\t\t\tString inputPrefix = m2.group(1);\n\t\t\tString inputNum = m2.group(2);\n\n\t\t\tif (prefix1.equalsIgnoreCase(prefix2) && prefix2.equalsIgnoreCase(inputPrefix)) {\n\t\t\t\tint n1 = Integer.parseInt(num1);\n\t\t\t\tint n2 = Integer.parseInt(num2);\n\t\t\t\tint n3 = Integer.parseInt(inputNum);\n\t\t\t\tif (n3 >= n1 && n3 <= n2) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "id": 171812, "time": "2013-12-18T13:02:20Z", "bug_id": 55904, "creation_time": "2013-12-18T13:02:20Z", "is_private": false}, {"count": 2, "tags": [], "creator": "guarale@hotmail.com", "attachment_id": 31623, "text": "Created attachment 31623\nDifferent solution not using Regex\n\nHere is a different solution that uses CellRangeAddress instead of pattern matching.", "id": 175236, "time": "2014-05-15T07:52:44Z", "bug_id": 55904, "creation_time": "2014-05-15T07:52:44Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55904, "attachment_id": null, "is_private": false, "id": 181789, "time": "2015-03-15T21:50:39Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-03-15T21:50:39Z", "text": "Can you provide a small sample file which contains such a hyperlink?"}, {"count": 4, "tags": [], "bug_id": 55904, "is_private": false, "text": "Created attachment 33479\ntwo test cases\n\nHi all,\nYou can find enclosed a small Eclipse project containing two tests that highlight the problem.\nOne of them creates programmatically a multi-cell hyperlink, while the other uses a pre-created Excel file.\n\nI am a colleague of Alessandro (the guy who proposed the second patch, the one not using Regex).\nWith the patch suggested by Alessandro the two tests succeed, while they fail also with the current (trunk) version of the POI.\n\nPlease let me know if there is anything that is not clear.", "id": 187913, "time": "2016-01-22T17:36:12Z", "creator": "lucamartini@tagetik.com", "creation_time": "2016-01-22T17:36:12Z", "attachment_id": 33479}, {"count": 5, "tags": [], "bug_id": 55904, "attachment_id": null, "is_private": false, "id": 187914, "time": "2016-01-22T17:37:12Z", "creator": "lucamartini@tagetik.com", "creation_time": "2016-01-22T17:37:12Z", "text": "I change the status of the ticket, because additional information has been provided."}, {"count": 6, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "is_private": false, "id": 189420, "time": "2016-03-12T21:11:51Z", "bug_id": 55904, "creation_time": "2016-03-12T21:11:51Z", "text": "I get failures when I try to run the unit-tests with the patch applied, can you take a look?\n\n\njava.lang.NumberFormatException: For input string: \"3:D4\"\n\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:580)\n\tat java.lang.Integer.parseInt(Integer.java:615)\n\tat org.apache.poi.ss.util.CellReference.<init>(CellReference.java:123)\n\tat org.apache.poi.xssf.usermodel.XSSFHyperlink.buildCellReference(XSSFHyperlink.java:266)\n\tat org.apache.poi.xssf.usermodel.XSSFHyperlink.getFirstRow(XSSFHyperlink.java:298)\n\tat org.apache.poi.xssf.usermodel.TestXSSFHyperlink.testGetHyperlink(TestXSSFHyperlink.java:329)\n\nAnd \n\norg.junit.ComparisonFailure: \nExpected :B3:D4\nActual   :B3\n\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.poi.xssf.usermodel.TestXSSFHyperlink.doChecks(TestXSSFHyperlink.java:441)\n\tat org.apache.poi.xssf.usermodel.TestXSSFHyperlink.testCreateMuliCellHyperlink4(TestXSSFHyperlink.java:429)\n\n\nand\n\njava.lang.AssertionError: Atteso hyperlink in (2,1)\n\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertNotNull(Assert.java:712)\n\tat org.apache.poi.xssf.usermodel.TestXSSFHyperlink.doChecks(TestXSSFHyperlink.java:439)\n\tat org.apache.poi.xssf.usermodel.TestXSSFHyperlink.testCreateMuliCellHyperlink1(TestXSSFHyperlink.java:399)"}, {"count": 7, "tags": [], "creator": "lucamartini@tagetik.com", "attachment_id": 33669, "text": "Created attachment 33669\nCumulative patch for Hyperlinks issues\n\nCumulative patch for fixing 52903, 55904 56527, 46742", "id": 189453, "time": "2016-03-14T10:46:51Z", "bug_id": 55904, "creation_time": "2016-03-14T10:46:51Z", "is_private": false}, {"count": 8, "tags": [], "creator": "lucamartini@tagetik.com", "attachment_id": null, "text": "(In reply to Dominik Stadler from comment #6)\n> I get failures when I try to run the unit-tests with the patch applied, can\n> you take a look?\n> \n\nDominik, you are right. The tests I attached to this bug additionally depend on some other modifications we did in our branch to deal with a number of issue regarding Hyperlinks:\n\n- Bug 56527\n- Bug 46742\n\nPlease note that Bug 56527 is marked as resolved, but the correction erroneusly assume that an hyperlink is only related to a single cell.\n\nI attached the cumulative patch to this bug.\nBest regards,\n    Luca", "id": 189454, "time": "2016-03-14T10:54:44Z", "bug_id": 55904, "creation_time": "2016-03-14T10:54:44Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 55904, "attachment_id": 34232, "text": "Created attachment 34232\nrebased attachment 33669: search for multi-cell hyperlinks\n\nI rebased attachment 33669 to the latest trunk (circa 3.15 beta 3).\n\nThis needs to be merged with the unit tests TestCreateMultiCellHyperlink.java and TestMultiCellHyperlink.java using TestMultiCellHyperlink.xlsx from attachment 33479.", "id": 193630, "time": "2016-09-11T04:54:20Z", "creator": "onealj@apache.org", "creation_time": "2016-09-11T04:54:20Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 55904, "is_private": false, "text": "Created attachment 34233\nenable multi-cell XSSFHyperlinks, find multi-cell hyperlinks\n\nMerge unit tests from attachment 33479 with XSSFSheet changes from attachment 34232.\n\nThe XSSFHyperlink class assumes that hyperlinks belong to a single cell.\n * XSSFHyperlink.setFirstRow and setLastRow do the same thing, same as setFirst/LastColumn.\n * XSSFHyperlink.setCellAddress(String ref) breaks if ref is an area reference.\n\nThis patch fixes the above problems. I need to verify that XSSFHyperlinks are really objects within an XSSFSheet rather than an XSSFCell (only one hyperlink object exists for a multi-cell hyperlink), and then I will commit these changes.\nNote that this patch breaks backwards compatibility: before it was sufficient to set first row and column on a hyperlink and it would move the single-cell hyperlink. With the attached code, both the first and last cell will need to be set to avoid expanding a single-cell hyperlink to an area spanned by the upper left and lower right cells. Additionally, it is inefficient to set these cells individually, both in terms of CPU instructions and lines of code. Additional work will need to be done on the Hyperlink class to allow multi-cell hyperlinks.", "id": 193631, "time": "2016-09-11T06:51:53Z", "creator": "onealj@apache.org", "creation_time": "2016-09-11T06:51:53Z", "attachment_id": 34233}, {"count": 11, "tags": [], "bug_id": 55904, "attachment_id": 34234, "is_private": false, "id": 193632, "time": "2016-09-11T06:54:10Z", "creator": "onealj@apache.org", "creation_time": "2016-09-11T06:54:10Z", "text": "Created attachment 34234\nMultiCellHyperlink.xlsx\n\nThis excel file was extracted from attachment 33479, submitted by Luca Martini."}]
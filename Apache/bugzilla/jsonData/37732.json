[{"count": 0, "tags": [], "text": "Locks on resources are lost when you restart the WebDAV server if you dont store\nuser info in the database. \n\nThe lock table is not being written to by when using LDAP for user information.\nThis is because the insert command in the StandardRBDMSAdapter checks for users\nin the slide database. \n\nWhen you are using an external source for users and roles (i.e. LDAP) there is\nnothing stored in the database except for what is defined in the Domain.xml.\n\nThis problem may effect other parts of the system including LINKS, LABELs and\npotentially ACLs.\n\nTo reproduce the problem:\n\n    * Log into WebDAV as a user in LDAP store.\n    * Use a WebDAV client to lock a resource.\n    * Restart WebDAV server.\n    * Refresh the view, the resource will be unlocked. \n\nTo fix the problem:\n\n    * Insert /users/support into the WebDAV URI table.\n    * Log into WebDAV.\n    * Use a WebDAV client to lock a resource.\n    * Restart WebDAV server.\n    * Refresh the view, the resource will be locked. \n\nHere is the solution in code. You can change the StandardRDBMSAdapter like so:\n\npublic void putLock(Connection connection, Uri uri, NodeLock lock) throws\nServiceAccessException {\n        PreparedStatement statement = null;\n        try {\n            int inheritable = lock.isInheritable() ? 1 : 0;\n            int exclusive = lock.isExclusive() ? 1 : 0;\n            long lockid = assureUriId(connection, lock.getLockId());\n\n            populateUriTableWithUserUri(connection, lock);\n\n            statement = connection.prepareStatement(\n                    \"insert into LOCKS\n(LOCK_ID,OBJECT_ID,SUBJECT_ID,TYPE_ID,EXPIRATION_DATE,IS_INHERITABLE,IS_EXCLUSIVE,OWNER)\n\" +\n                    \"select ?, object.URI_ID, subject.URI_ID, type.URI_ID, ?, ?,\n?, ? \" +\n                    \"from URI object, URI subject, URI type WHERE\nobject.URI_STRING=? and subject.URI_STRING=? and type.URI_STRING=?\");\n            statement.setLong(1, lockid);\n            statement.setLong(2, lock.getExpirationDate().getTime());\n            statement.setInt(3, inheritable);\n            statement.setInt(4, exclusive);\n            statement.setString(5, lock.getOwnerInfo());\n            statement.setString(6, lock.getObjectUri());\n            statement.setString(7, lock.getSubjectUri());\n            statement.setString(8, lock.getTypeUri());\n\n            statement.execute();\n            if (statement.getUpdateCount() == 0) {\n                throw new ServiceAccessException(service, \"Insert of the lock\nfailed as the user could not be found in the URI table.\");\n            }\n        } catch (SQLException e) {\n            throw createException(e, uri.toString());\n        } finally {\n            close(statement);\n        }\n    }\n\n    private void populateUriTableWithUserUri(Connection connection, NodeLock\nlock) throws SQLException {\n        PreparedStatement statement = connection.prepareStatement(\"select URI_ID\nfrom URI where URI_STRING = ?\");\n        statement.setString(1, lock.getSubjectUri());\n        statement.execute();\n        ResultSet results = statement.getResultSet();\n        boolean hasNextRow = results.next();\n        if (hasNextRow == false) {\n            insertUri(connection, lock.getSubjectUri());\n        }\n    }\n\n    private void insertUri(Connection connection, String subjectUri) throws\nSQLException {\n        PreparedStatement statement = connection.prepareStatement(\"Insert into\nURI (URI_STRING) values (?)\");\n        statement.setString(1, subjectUri);\n        statement.execute();\n    }\n\nEND OF DOCUMENTATION", "attachment_id": null, "id": 83064, "creator": "damien.bastin@gmail.com", "time": "2005-12-01T08:20:04Z", "bug_id": 37732, "creation_time": "2005-12-01T08:20:04Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 37732, "text": "Created attachment 17100\nInserts URI into DB when putLock() called\n\nNote that this attachment also contains the fix to bug id: 37583", "id": 83065, "time": "2005-12-01T08:24:07Z", "creator": "damien.bastin@gmail.com", "creation_time": "2005-12-01T08:24:07Z", "is_private": false, "attachment_id": 17100}]
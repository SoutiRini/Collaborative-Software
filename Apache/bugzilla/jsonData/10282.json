[{"count": 0, "tags": [], "bug_id": 10282, "text": "When running <replace> task on really big files (>10M) - the ant fails with \nOutOfMemory errors. Increasing -Xmx1024M helps for file sizes < 20M.\nIt looks like this task should have an option to do its dute slower but with\nless memory.\nPlease help", "id": 18656, "attachment_id": null, "creator": "miha@softhome.net", "creation_time": "2002-06-27T14:19:21Z", "time": "2002-06-27T14:19:21Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 10282, "attachment_id": null, "id": 21107, "time": "2002-08-15T20:39:35Z", "creator": "sbailliez@apache.org", "creation_time": "2002-08-15T20:39:35Z", "is_private": false, "text": "IMHO there is not that much to do here. You can sure optimize a little bit, \nbut due to the undeterministic nature of the GC and the fact that string are \nimmutable that does not leave much room for improvement without load of codes.\nString and StringBuffer are a huge performance burden and the fact that there \nis no helper method to work on char array does not help. CharSequence in JDK \n1.4 is not even satisfactory at some points.\n\nThe only alternative I see is to change everything and manipulate a unique \nbuffer and manipulate it. That should be non negligible code with a lot of \nduplication and endless maintenance burden since this is normally not \nparticulary enjoyable to work with offsets.\n\nI'm setting this as wontfix since I do not think it is worth the work, but any \nsubmission will be happily considered (assuming also that I do not miss a \nsimple optimization in this code)"}]
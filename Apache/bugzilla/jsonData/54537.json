[{"count": 0, "tags": [], "bug_id": 54537, "attachment_id": null, "is_private": false, "id": 165119, "time": "2013-02-07T12:36:48Z", "creator": "kristo.kuuskull@nortal.com", "creation_time": "2013-02-07T12:36:48Z", "text": "We had a transaction with 6 million statements. In the end of transaction org.apache.tomcat.jdbc.pool.interceptor.closeInvoked was called and it ran for couple of hours before we terminated it.\n\nThe problem is that code below is basically O(n^2) and takes too much time with large amount of statements.\n\nSolution: use more suitable Collection type for statements or change the cycle logic (for i=...).\n\nwhile (this.statements.size() > 0) {\n      WeakReference ws = (WeakReference)this.statements.remove(0)"}, {"count": 1, "tags": [], "bug_id": 54537, "attachment_id": null, "id": 176719, "time": "2014-07-28T18:28:19Z", "creator": "fhanik@apache.org", "creation_time": "2014-07-28T18:28:19Z", "is_private": false, "text": "Ok, so if we used a linked list, it should be O(n)"}, {"count": 2, "tags": [], "bug_id": 54537, "attachment_id": null, "is_private": false, "id": 176998, "time": "2014-08-07T21:47:27Z", "creator": "fhanik@apache.org", "creation_time": "2014-08-07T21:47:27Z", "text": "Fixed in r1616602"}, {"count": 3, "tags": [], "creator": "rahul.s.rathour@gmail.com", "attachment_id": null, "id": 183713, "time": "2015-06-23T18:16:10Z", "bug_id": 54537, "creation_time": "2015-06-23T18:16:10Z", "is_private": false, "text": "Can't we get keep ArrayList as it and instead of removing the object from the list (first line of StatementFinalizer.closeInvoked() method), just get that Statement reference and close that.\n\nAt the end of loop when all Statements have been closed, we can just call clear() on the list. It will nullify all the references and those will GCed latter.\n\nFinding a particular entry in a linked list having millions of objects may also have some cost.\n\nWith this code method closeInvoked() should look like\npublic void closeInvoked()\n  {\n    for (WeakReference ws : this.statements) {\n      Statement st = (Statement)ws.get();\n      if (st == null) continue;\n      try {\n        st.close();\n      } catch (Exception ignore) {\n        if (log.isDebugEnabled())\n          log.debug(\"Unable to closed statement upon connection close.\", ignore);\n      }\n    }\n   this.statements.clear();\n  }\n\nHope I am correct!!!"}, {"count": 4, "tags": [], "bug_id": 54537, "attachment_id": null, "id": 183716, "time": "2015-06-23T18:37:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-06-23T18:37:41Z", "is_private": false, "text": "(In reply to Rahul Singh from comment #3)\n> Can't we get keep ArrayList as it and instead of removing the object from\n> the list (first line of StatementFinalizer.closeInvoked() method), just get\n> that Statement reference and close that.\n\nWhy do you specifically want to use an ArrayList? Why are you commenting on a bug that was closed almost one year ago?\n\n> At the end of loop when all Statements have been closed, we can just call\n> clear() on the list. It will nullify all the references and those will GCed\n> latter.\n> \n> Finding a particular entry in a linked list having millions of objects may\n> also have some cost.\n\nWhen do you need to index into the middle of the list?"}, {"count": 5, "tags": [], "creator": "rahul.s.rathour@gmail.com", "attachment_id": null, "id": 183717, "time": "2015-06-23T18:48:30Z", "bug_id": 54537, "creation_time": "2015-06-23T18:48:30Z", "is_private": false, "text": "Have no love with ArrayList. Now noticed that it will always remove 0th index so that will not have any cost. I guessed this fix has not been released yet..sorry for commenting on FIXED thread."}, {"count": 6, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "This fix was released long ago.\n\nIt also has the advantage of being able to partially-process a list and remove those items processed. With ArrayList.clear, it's all or nothing.", "id": 183718, "time": "2015-06-23T19:04:10Z", "bug_id": 54537, "creation_time": "2015-06-23T19:04:10Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 54444, "attachment_id": null, "is_private": false, "id": 164703, "time": "2013-01-17T16:23:50Z", "creator": "sferich888@gmail.com", "creation_time": "2013-01-17T16:23:50Z", "text": "Description of problem:\n\ncatalina.org.apache.juli.FileHandler.limit = 10000 \n\nSeems to be ignored when a setting is applied to it.\nAs a result your logs grow our of control and do not roll over.\n\n.limit .count do not seem to work for JULI org.apache.juli.FileHandler.limit & .count are not mentioned on the Tomcat docs \n\n[0] http://tomcat.apache.org/tomcat-6.0-doc/api/org/apache/juli/FileHandler.html\n\nDocumentation shows it can be configured to rotate once a day, but not using limit or count as you would with Java Util's FileHandler.\n\n[1] http://docs.oracle.com/javase/6/docs/api/java/util/logging/FileHandler.html\n\nIsn't Juli supposed to be an extension of the Java Util FileHandler to expand on its capabilities. \n\nWAR used to reproduce:\n    https://github.com/kylape/support-examples/tree/master/fillMyLogsPlease.war\n\nCommand used to reproduce: \n    for x in {1..20}; \\\n        do curl --head http://localhost:8080/fillMyLogsPlease/logging; \\            \n        sleep 1; \\\n    done\n\nTo see the issue simply \n    watch ls -lah logs             << watch the size go to 14M > 10M setting.\n\nShould there be a documentation note made on [0] and/or [1] to denote that .limit and .count can not be used with JULI or should JULI truly extend this functionality of Java Util."}, {"count": 1, "tags": [], "text": "Nowhere (to my knowledge) does org.apache.juli.FileHandler claim to have any relationship (apart from a common interface) to java.util.logging.FileHandler\n\nThe Javadocs for org.apache.juli.FileHandler and the docs list the available options.", "is_private": false, "id": 164704, "creator": "markt@apache.org", "time": "2013-01-17T16:29:04Z", "bug_id": 54444, "creation_time": "2013-01-17T16:29:04Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 54444, "is_private": false, "count": 2, "id": 164705, "time": "2013-01-17T16:37:01Z", "creator": "sferich888@gmail.com", "creation_time": "2013-01-17T16:37:01Z", "text": "(In reply to comment #1)\n> Nowhere (to my knowledge) does org.apache.juli.FileHandler claim to have any\n> relationship (apart from a common interface) to java.util.logging.FileHandler\n> \n> The Javadocs for org.apache.juli.FileHandler and the docs list the available\n> options.\n\ncalling manager.getIntProperty passing java.util.logging.FileHandler.limit and default to value of 0\n\n\tlimit = manager.getIntProperty(cname + \".limit\", 0);\n\n\n    private void configure() {\n        LogManager manager = LogManager.getLogManager();\n\n\tString cname = getClass().getName();\n\n\tpattern = manager.getStringProperty(cname + \".pattern\", \"%h/java%u.log\");\n\tlimit = manager.getIntProperty(cname + \".limit\", 0);\n\tif (limit < 0) {\n\t    limit = 0;\n\t}\n        count = manager.getIntProperty(cname + \".count\", 1);\n\tif (count <= 0) {\n\t    count = 1;\n\t}\n        append = manager.getBooleanProperty(cname + \".append\", false);\n\tsetLevel(manager.getLevelProperty(cname + \".level\", Level.ALL));\n\tsetFilter(manager.getFilterProperty(cname + \".filter\", null));\n\nlimit in JUL FileHandler is set by configure() which is a private method.  limit is private variable, and since JULI FileHandler isn't calling super() in its constructor, there is no way for limit & count to be read.\n\nSo I'm not seeing that you can use JUL limit/count in a JULI FileHandler. Is this probably a feature request, or again not something that was ever supposed to be implemented (as stated)."}]
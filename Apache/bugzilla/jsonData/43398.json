[{"count": 0, "tags": [], "bug_id": 43398, "attachment_id": null, "is_private": false, "id": 108202, "time": "2007-09-14T08:33:52Z", "creator": "jglick@apache.org", "creation_time": "2007-09-14T08:33:52Z", "text": "This bug is so old I always thought it was \"as designed\", irritating as it was.\nBut no, it seems to be an accident.\n\n---%<---\n$ cat /tmp/x.ant; /space/ant165/bin/ant -f /tmp/x.ant\n<project default=\"x\">\n    <target name=\"x\">\n        <echo file=\"X.java\">\n            public class X extends org.apache.tools.ant.Task {\n                public void execute() {\n                    throw new NullPointerException(\"huh?!\");\n                }\n            }\n        </echo>\n        <javac srcdir=\".\" destdir=\".\" includes=\"X.java\" debug=\"true\"/>\n        <taskdef classpath=\".\" classname=\"X\" name=\"x\"/>\n        <x/>\n    </target>\n</project>Buildfile: /tmp/x.ant\n\nx:\n    [javac] Compiling 1 source file to /tmp\n\nBUILD FAILED\n/tmp/x.ant:12: java.lang.NullPointerException: huh?!\n\nTotal time: 1 second\n---%<---\n\n(Similar in 1.7.0; 1.6.5 was the oldest version I had lying around to test.)\n\nNote the lack of a stack trace which would give you any clue where the NPE was\nthrown or why. Of course you can run with -v to get the stack trace, but\n\n1. This also sends lots of other output which you may not have needed.\n\n2. That is no comfort if the problem happened unreproducibly on a continuous\nbuilder.\n\nGenerally a BuildException thrown from a task is a \"normal\" error in script\nconfiguration, with some kind of explanation, but any other exception is\nprobably a bug in the task and a stack trace would be useful.\n\nDefaultLogger has this code which looks like it should work:\n\n            if (Project.MSG_VERBOSE <= msgOutputLevel\n                || !(error instanceof BuildException)) {\n                message.append(StringUtils.getStackTrace(error));\n\nIn fact it doesn't; DispatchUtils.execute catches the NPE (or whatever) and\nwraps it in a BuildException! So the second part of the test is _never_ true.\n\nOne possible patch would be to change DU.execute to rethrow all\nRuntimeException's (not just BuildException) unwrapped. This may work but I\nsomewhat prefer the attached patch as it should be more resilient to other code\nwrapping things in uninformative BuildException's. This will show a stack trace:\n\ntry { ... }\ncatch (Exception x) {\n  throw new BuildException(x);\n}\n\nThis will not show a stack trace without -v (assumes the task's message is\nenough diagnosis):\n\n  ...throw new BuildException(\"Problem opening \" + file, x);"}, {"count": 1, "tags": [], "bug_id": 43398, "attachment_id": 20826, "id": 108203, "time": "2007-09-14T08:35:41Z", "creator": "jglick@apache.org", "creation_time": "2007-09-14T08:35:41Z", "is_private": false, "text": "Created attachment 20826\nProposed patch\n\nUnwraps any uninformative BuildException's and enables nested exceptions to be\nprinted as full stack traces."}, {"text": "Comments requested. In particular: can I use Throwable.getCause() directly, or\ndo I still need to use reflection to make this compile on JDK 1.3?", "tags": [], "bug_id": 43398, "attachment_id": null, "count": 2, "id": 108204, "time": "2007-09-14T08:37:08Z", "creator": "jglick@apache.org", "creation_time": "2007-09-14T08:37:08Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 108205, "time": "2007-09-14T08:41:43Z", "creator": "peterreilly@apache.org", "creation_time": "2007-09-14T08:41:43Z", "is_private": false, "text": "Only problem with patch is that Throwable.getCause() was added in Java1.4.\n"}, {"count": 4, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 108218, "time": "2007-09-14T19:03:52Z", "creator": "varavamu@yahoo.com", "creation_time": "2007-09-14T19:03:52Z", "is_private": false, "text": "What about if you use Throwable.fillInStackTrace()? Would that work?"}, {"count": 5, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "text": "Throwable.fillInStackTrace() generally does nothing, as the Throwable\nconstructors already call it, and calling it twice is a no-op. (Its only purpose\nthat I can see is that exception classes which are used for intentional control\nflow - e.g. \"stop this SAX parser right now, please\" - can override fIST to do\nnothing, which makes throwing the exception a bit cheaper.)", "id": 108230, "time": "2007-09-15T11:07:03Z", "bug_id": 43398, "creation_time": "2007-09-15T11:07:03Z", "is_private": false}, {"text": "Comment on attachment 20826\nProposed patch\n\nSorry, maybe I am just stupid but why not:\n\n\t    while (error instanceof BuildException) {\n\t\tBuildException be = (BuildException) error;\n\t\tThrowable cause = be.getCause();\n\t\tif (cause != null &&\ncause.toString().equals(error.getMessage())) {\n\t\t    error = cause;\n\t\t} else {\n\t\t    break;\n\t\t}\n\t    }\n\nBuildException.getCause() is already part of BuildException", "tags": [], "bug_id": 43398, "attachment_id": 20826, "count": 6, "id": 108239, "time": "2007-09-16T05:22:32Z", "creator": "jkf@apache.org", "creation_time": "2007-09-16T05:22:32Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 108252, "time": "2007-09-16T20:45:42Z", "creator": "jglick@apache.org", "creation_time": "2007-09-16T20:45:42Z", "is_private": false, "text": "(In reply to comment #6)\n> Sorry, maybe I am just stupid but why not:\n> [...]\n> BuildException.getCause() is already part of BuildException\n\nGood catch, I will use that."}, {"count": 8, "tags": [], "text": "There's nothing to stop us using introspection to get the stack trace on those\nthings where getCause() works. There's also getStackTrace(), which I've used in\nsmartfrog to take a complete chained stack trace and turn it into a serializable\nchain with stack trace information still retained. Very powerful, but not\nsomething I'd want to use via introspection\n\n", "is_private": false, "bug_id": 43398, "id": 108265, "time": "2007-09-17T03:49:43Z", "creator": "stevel@apache.org", "creation_time": "2007-09-17T03:49:43Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 43398, "attachment_id": null, "is_private": false, "id": 108267, "time": "2007-09-17T03:59:50Z", "creator": "peterreilly@apache.org", "creation_time": "2007-09-17T03:59:50Z", "text": "In reply to number #6, yes this is the way to\nfix the problem.\n"}, {"count": 10, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 108311, "time": "2007-09-18T01:22:16Z", "creator": "stevel@apache.org", "creation_time": "2007-09-18T01:22:16Z", "is_private": false, "text": "*** Bug 42928 has been marked as a duplicate of this bug. ***"}, {"count": 11, "tags": [], "text": "rev 581076 in trunk", "is_private": false, "id": 108867, "creator": "jglick@apache.org", "time": "2007-10-01T14:36:14Z", "bug_id": 43398, "creation_time": "2007-10-01T14:36:14Z", "attachment_id": null}, {"text": "rev 581091 in branch", "tags": [], "bug_id": 43398, "attachment_id": null, "count": 12, "id": 108869, "time": "2007-10-01T15:02:07Z", "creator": "jglick@apache.org", "creation_time": "2007-10-01T15:02:07Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 129666, "time": "2009-08-12T13:30:07Z", "creator": "jglick@apache.org", "creation_time": "2009-08-12T13:30:07Z", "is_private": false, "text": "Unfortunately it is not fixed when the exception is thrown from a task inside <ant> or <antcall>, which is the normal case in a large project:\n\n<project default=\"run\">\n    <target name=\"run\">\n        <antcall target=\"dorun1\"/>\n    </target>\n    <target name=\"dorun1\">\n        <antcall target=\"dorun2\"/>\n    </target>\n    <target name=\"dorun2\">\n        <echo file=\"X.java\">\npublic class X extends org.apache.tools.ant.Task {\n    public void execute() {\n        NullPointerException e = new NullPointerException();\n        e.initCause(new ClassNotFoundException(\"root cause\"));\n        throw e;\n    }\n}\n        </echo>\n        <javac srcdir=\".\" destdir=\".\" source=\"1.5\" includes=\"X.java\"/>\n        <taskdef name=\"x\" classname=\"X\" classpath=\".\"/>\n        <x/>\n    </target>\n</project>\n\nI am playing with possible fixes, but without success so far (starting in trunk 803701)."}, {"count": 14, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 129668, "time": "2009-08-12T13:35:50Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2009-08-12T13:35:50Z", "is_private": false, "text": "*** Bug 47683 has been marked as a duplicate of this bug. ***"}, {"count": 15, "tags": [], "bug_id": 43398, "attachment_id": null, "id": 129671, "time": "2009-08-12T16:17:12Z", "creator": "jglick@apache.org", "creation_time": "2009-08-12T16:17:12Z", "is_private": false, "text": "I think fixed better in revision 803739. It's hard to be sure there aren't unhandled corner cases somewhere."}]
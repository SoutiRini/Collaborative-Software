[{"count": 0, "tags": [], "bug_id": 61267, "attachment_id": 35106, "id": 199652, "creation_time": "2017-07-09T10:54:28Z", "time": "2017-07-09T10:54:28Z", "creator": "gaurav.chd3@gmail.com", "text": "Created attachment 35106\nMeta data of attached word file gets parsed. However, content of file is not parsed and is blank\n\nMeta data of attached word file gets parsed. However, content of file is not parsed and is blank", "is_private": false}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 199674, "time": "2017-07-10T01:52:50Z", "bug_id": 61267, "creation_time": "2017-07-10T01:52:50Z", "is_private": false, "text": "The file begins with the following bytes:\n> 00000000  db a5 2d 00 31 40 09 04  00 00 00 00 2d 00 00 00  |..-.1@......-...|\n\nAnd has quite a bit of ASCII embedded in it. This doesn't look like a OLE2 BIFF8 Microsoft Word .doc file nor an OOXML Word .docx file. This looks more like a Microsoft Write .wri file, though has a different magic number.\n\n> 00000180  09 4d 65 6d 62 65 72 20  6f 66 20 33 47 50 50 20  |.Member of 3GPP |\n> 00000190  28 41 52 49 42 29 0d 0a  4d 72 2e 20 42 65 6e 6e  |(ARIB)..Mr. Benn|\n\nFurthermore, I cannot open this file with Google Docs.\n\nAre you sure this is a Microsoft Word file?\nI wasn't able to find any common uses of this magic number."}, {"count": 2, "attachment_id": null, "bug_id": 61267, "is_private": false, "id": 199675, "time": "2017-07-10T01:56:16Z", "creator": "onealj@apache.org", "creation_time": "2017-07-10T01:56:16Z", "tags": [], "text": "Nevermind. Looks like this claims to be a Word 2.0 file.\n\nhttp://www.filesignatures.net/index.php?page=search&search=DBA52D00&mode=SIG\n> DB A5 2D 00   Word 2.0 file, ASCII"}, {"count": 3, "tags": [], "bug_id": 61267, "attachment_id": null, "text": "There are several entry points into POI. We should figure out what class should be responsible for checking the first few bytes (magic number) of a file to figure out what file format it is (Tika style).\n\nWe could continue adding known magic numbers to o.a.p.poifs.HeaderBlock, but we may want to reuse that code elsewhere, such as WorkbookFactory/DocumentFactory/SlideshowFactory, the Extractor classes for Tika, etc.", "id": 199676, "time": "2017-07-10T02:12:43Z", "creator": "onealj@apache.org", "creation_time": "2017-07-10T02:12:43Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "is_private": false, "count": 4, "id": 199687, "time": "2017-07-10T10:27:30Z", "bug_id": 61267, "creation_time": "2017-07-10T10:27:30Z", "text": "Tip for next time - run the Tika App jar in --detect mode to see if the file magic is known. In this case, Tika knows it's application/msword2\n\npre-OLE2 word2 has 2 magics, word5 has 1 (at least that Tika knows about), do people think it's worth adding helpful exceptions in POI for those too?"}]
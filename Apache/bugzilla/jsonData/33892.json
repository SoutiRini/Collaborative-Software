[{"count": 0, "attachment_id": null, "bug_id": 33892, "text": "SCRIPT_URL=/~rjf/stuff/testversion.shtml\nSCRIPT_URI=http://www.cs.rice.edu/~rjf/stuff/testversion.shtml\nHTTP_HOST=www.cs.rice.edu HTTP_USER_AGENT=Mozilla/5.0 (X11; U; Linux i686;\nen-US; rv:1.7.5) Gecko/20041107 Firefox/1.0\nHTTP_ACCEPT=text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\nHTTP_ACCEPT_LANGUAGE=en-us,en;q=0.5 HTTP_ACCEPT_ENCODING=gzip,deflate\nHTTP_ACCEPT_CHARSET=ISO-8859-1,utf-8;q=0.7,*;q=0.7 HTTP_KEEP_ALIVE=300\nHTTP_CONNECTION=keep-alive PATH=/bin:/sbin:/usr/bin:/usr/sbin\nSERVER_SIGNATURE=<address>Apache/2.0.52 (Unix) DAV/2 Server at www.cs.rice.edu\nPort 80</address> SERVER_SOFTWARE=Apache/2.0.52 (Unix) DAV/2 \nFor 5 years, stuff like:\n\n<!--#if expr=\"$pg_path = /[^/]+\\/[^/]+\\/[^/]+/\" -->\n   <!--#set var=\"backleader\" value=\"../../..\" -->\n\n\"just worked\".\n\nOur webserver recently got replaced with a Mac OS X server running\napache 2.0.52.  The regexp above becomes an \"Invalid expression\" because \nall the \\'s get automagically escaped (doubled) themselves, leaving an \ninvalid expression.  Futzing with single quotes, etc has produced no joy.\n\nLocal administrators are baffled.", "id": 71947, "time": "2005-03-08T08:33:03Z", "creator": "rjf@cs.rice.edu", "creation_time": "2005-03-08T08:33:03Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 33892, "text": "How do you know that? I guess, it's _logged_ with doubled quotes, which is a\ndifference.\nI think, the problem is, that there are unsecaped backslashes in your regexp.\n\nWhat happens, if you use\n\n<!--#if expr=\"$pg_path = /[^\\/]+\\/[^\\/]+\\/[^\\/]+/\" -->\n\n?", "id": 72002, "time": "2005-03-08T20:40:29Z", "creator": "nd@perlig.de", "creation_time": "2005-03-08T20:40:29Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 33892, "is_private": false, "id": 72004, "time": "2005-03-08T20:48:23Z", "creator": "nd@perlig.de", "creation_time": "2005-03-08T20:48:23Z", "tags": [], "text": "unescaped slashes, I mean ... :)"}, {"count": 3, "tags": [], "text": "Regarding unescaped slashes --  The std. says that in a character set, \ne.g. [abc/def], escapes are not needed.    Anyway, in response to the\nsuggestion, I changed the offending expression (clipped from the \nsource file this time) as shown here.\n\n<!--#if expr=\" $pg_contents_path = /[^\\/]+\\/[^\\/]+\\/[^\\/]+/[^\\/]+/ \" -->\n   <!--#set var=\"content_backleader\" value=\"../../../..\" -->\n(This continues with #elseifs for shorter versions of the pattern.)\nThis is the error message clipped from the error_log: \n\n[Tue Mar 08 14:39:57 2005] [error] [client 128.42.7.112] Invalid expression \"\n$pg_contents_path = /[^\\\\/]+\\\\/[^\\\\/]+\\\\/[^\\\\/]+/[^\\\\/]+/ \" in file <path omitted>\n\nAs I said, something in the new release \ndecided it's a good idea to escape the escapes.", "is_private": false, "id": 72007, "creator": "rjf@cs.rice.edu", "time": "2005-03-08T21:52:07Z", "bug_id": 33892, "creation_time": "2005-03-08T21:52:07Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "nd@perlig.de", "text": "Which std. are you referring to? ;)\nThe / must be escaped, because the / is the regex delimiter.\n\nHowever, the duped slashes come from the error logger, don't care about them.\nAnd in your regex is still an unescaped slash... :-)", "id": 72009, "time": "2005-03-08T22:02:20Z", "bug_id": 33892, "creation_time": "2005-03-08T22:02:20Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "There was one additional unescaped slash in my previous comment.\nI fixed that and made the changes to all the other places\nwhere this occured.  I'm back in business.\n\nRegarding the need to escape /'s when they're inside a character\nclass such as [^/] --  In the past, it wasn't necessary to escape\nthis specifically because the / is hidden in the character class.\nbut this requires actually parsing the guts of the r.e. rather than\njust a quick scan for unescaped /'s.  As I initially\nsaid, this worked for 5 years until we moved to the new environment.\n\nIs this standard behavior?  Don't know, but there's lots of documentation\nlike \"man perlrequick\" out there that say things like:\n\n  Character classes also have ordinary and special characters, but the sets\n  of ordinary and special characters inside a character class are different\n  than those outside a character class.  The special characters for a char-\n  acter class are \"-]\\^$\" and are matched using an escape:\n\nOr from the PCRE documentation:\n\n     Part of a pattern that is in square brackets  is  called  a  \"character\n       class\". In a character class the only metacharacters are:\n\n         \\      general escape character\n         ^      negate the class, but only if the first character\n         -      indicates character range\n         [      POSIX character class (only if followed by POSIX\n                  syntax)\n         ]      terminates the character class\n\nTaking the \"only\" in the above literally always worked in the past.\nI've never seen a description that contradicted this.\n", "is_private": false, "id": 72011, "creator": "rjf@cs.rice.edu", "time": "2005-03-08T22:35:31Z", "bug_id": 33892, "creation_time": "2005-03-08T22:35:31Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "nd@perlig.de", "text": "Nah, seems a misunderstanding here.\n\nFor the *regex engine* you don't need to escape the slash at all. It's the\ncontext, which insists on it (like in perl). The delimiter of the regex is a\nslash (ehm, two slashes, one left, one right).\n\nThe problem, you've experienced is, that the httpd 1.3 parser actually doesn't\ncare about the right slash (it just drops it, if it exists) -- I've glanced over\nthe relevant code snippet in 1.3 ;-). The 2.x parser is way more consistent\n(like the perl one) and looks for the next unescaped slash. Thatswhy all slashes\nwhich are not meant as delimiters must be escaped - regardless of their meaning\nfor the regex engine.", "id": 72012, "time": "2005-03-08T22:52:01Z", "bug_id": 33892, "creation_time": "2005-03-08T22:52:01Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 33892, "is_private": false, "id": 72014, "time": "2005-03-08T23:24:19Z", "creator": "rjf@cs.rice.edu", "creation_time": "2005-03-08T23:24:19Z", "tags": [], "text": "OK.  It's a feature.  The mod_include.html page\nought to have a \"All slashes which are not meant as delimiters must \nbe escaped - regardless of their meaning for the regex engine.\"\nstatement in the \"Flow control elements\" section.  There might\nbe other places in the documentation that need this reminder.\n\nThe doubled backslashes in the error_log are a red herring\nthat diverted my attention from the actual issue.\n\nIs this issue closed?"}, {"count": 8, "tags": [], "creator": "nd@perlig.de", "text": "I'm turning this into a docs bug, good point :-)\n\nThanks.", "id": 72041, "time": "2005-03-09T07:10:50Z", "bug_id": 33892, "creation_time": "2005-03-09T07:10:50Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 33892, "attachment_id": null, "text": "This is currently marked as a Mac bug, but it affects Linux/x86 as well.  (Maybe\nthe re-assignment as a docs bug makes that irrelevant?)\n\nFor example if you have test.shtml, and you visit it as test.shtml?5, and it\ncontains this (HTML comment brackets stripped):\n\n#if expr=\"$REQUEST_URI = /test.shtml\\?5/\"\n\n...then the match fails, even though you can echo $REQUEST_URI to see that it\ndoes contain the ?5 on the end.  But if you add the extra slash:\n\n#if expr=\"$REQUEST_URI = /test.shtml\\\\?5/\"\n\n...then it matches.  Maddening!\n", "id": 91294, "time": "2006-07-14T01:26:40Z", "creator": "theant@nodivisions.com", "creation_time": "2006-07-14T01:26:40Z", "is_private": false}, {"count": 10, "attachment_id": null, "bug_id": 33892, "is_private": false, "id": 91295, "time": "2006-07-14T01:29:30Z", "creator": "theant@nodivisions.com", "creation_time": "2006-07-14T01:29:30Z", "tags": [], "text": "This is currently marked as a Mac bug, but it affects Linux/x86 as well.  (Maybe\nthe re-assignment as a docs bug makes that irrelevant?)\n\nFor example if you have test.shtml, and you visit it as test.shtml?5, and it\ncontains this (HTML comment brackets stripped):\n\n#if expr=\"$REQUEST_URI = /test.shtml\\?5/\"\n\n...then the match fails, even though you can echo $REQUEST_URI to see that it\ndoes contain the ?5 on the end.  But if you add the extra slash:\n\n#if expr=\"$REQUEST_URI = /test.shtml\\\\?5/\"\n\n...then it matches.  Maddening!\n"}, {"count": 11, "tags": [], "text": "Rob,\n\nApologies for the ever so slight delay in fixing this.  \nThe change has been committed to:\n\ndocs/trunk -> http://svn.apache.org/viewvc?rev=619736&view=rev\ndocs/2.2 -> http://svn.apache.org/viewvc?rev=619737&view=rev\ndocs/2.0 -> http://svn.apache.org/viewvc?rev=619738&view=rev\n\nThese changes should be visible within the next 6 hours.\n\nCheers,\nTony\n", "is_private": false, "id": 113555, "creator": "tony@pc-tony.com", "time": "2008-02-07T18:09:39Z", "bug_id": 33892, "creation_time": "2008-02-07T18:09:39Z", "attachment_id": null}]
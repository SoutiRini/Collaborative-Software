[{"count": 0, "tags": [], "creator": "buczek@molgen.mpg.de", "text": "During the forwarding of POST/PUT request bodies (eg file upload),\nthe pipe between the server and the cgi-script might\nbecome filled.\n \nThis situation - which is sure to happen when the data exceeds a\ncertain size - is not handled correctly.\n\nThe pipe is set to O_NONBLOCK. mod_cgi uses apr_file_write_full()\nto write to it. The file write routines from the apr library\nfollow the usual routine: call write() - if EAGAIN, use\nselect() to wait for the file to become writeable, then\nretry the  write(). They expect, that the write()s may\ncomplete partially.\n\nWhile this logic works for sockets, it doesn't work\nfor pipes! write()s to pipes are not generally allowed to succeed\npartially. \"requests for PIPE_BUF or fewer bytes either succeed\ncompletely and return nbytes, or return -1 and set errno to [EAGAIN]\".\n\nIt is rather undefined, under what circumstances select() will\ncall a pipe ready-for-write. On some implementation select()\nwaits for the pipe to be completly empty. On others, which\nhas room for just a single byte is called ready-for-write by\nselect() and friends.\n\nIn any case, a 'ready for write' pipe can only accept a\ncertain number of bytes and never any number of bytes.\n\nSo the second write() to the pipe is likely to signal\nEAGAIN again. This error is returned by the apr_ routines\nand mod_cgi stops forwarding the data (child_stopped_reading = 1)\n\nAfter upgrade to Apache 2.0 one of our applications, which\nutilizes file uploads, stopped working because of this.\n\nThe quickfix for me was to set the pipe to blocking, thereby\nsacrificing the timeout feature.\n\n==================================================\n--- ./modules/generators/mod_cgi.c      2002/08/21 13:08:23\n***************\n*** 496,503 ****\n                  *script_out = procnew->in;\n                  if (!*script_out)\n                      return APR_EBADF;\n-                 apr_file_pipe_timeout_set(*script_out, r->server->timeout);\n  \n                  *script_err = procnew->err;\n                  if (!*script_err)\n                      return APR_EBADF;\n--- 496,506 ----\n                  *script_out = procnew->in;\n                  if (!*script_out)\n                      return APR_EBADF;\n  \n+                 /* EAGAIN on write() to pipe even after select() said\nwritable... set to blocking for now */\n+                 /* apr_file_pipe_timeout_set(*script_out, r->server->timeout);\n*/\n+                 apr_file_pipe_timeout_set(*script_out,-1);\n+ \n                  *script_err = procnew->err;\n                  if (!*script_err)\n                      return APR_EBADF;\n==================================================\n\nI don't have a idea for a good solution. A\ngood solution should include the case, that the\nsgi-script starts writing output before it finished\nreading input. The apache server process should\nhandle both directions at the same time.\n\nCiao\n  Donald", "id": 21784, "time": "2002-08-27T08:51:38Z", "bug_id": 12068, "creation_time": "2002-08-27T08:51:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 12068, "is_private": false, "id": 24742, "time": "2002-10-17T02:35:22Z", "creator": "slive@apache.org", "creation_time": "2002-10-17T02:35:22Z", "tags": [], "text": "[This is a mass bug update.]\nThis bug reports a problem in an older version of Apache 2.\nCould you please update to the most recent version and see\nif you can reproduce this problem.  If the bug still exists,\nplease update the bug with the latest version number.  If \nthe bug no longer exists, please close the bug report.\n\nSorry for this impersonal response, but we get many more bug\nreports than our volunteers can keep up with.\nThanks for using Apache!"}, {"count": 2, "tags": [], "bug_id": 12068, "is_private": false, "text": "[This is a mass bug update.] [Resolve-20021102]\nNo response from submitter; assuming issue is resolved.\nIf the problem still exists in the lastest version,\nplease reopen this report and update appropriately.", "id": 25561, "time": "2002-11-02T20:18:51Z", "creator": "slive@apache.org", "creation_time": "2002-11-02T20:18:51Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 12068, "text": "(In reply to comment #2)\n\nThis is still a problem. I couldn't find this one, so I filed 39342. The problem\nstill exists.", "id": 88482, "time": "2006-04-25T22:11:34Z", "creator": "dougapache@claar.org", "creation_time": "2006-04-25T22:11:34Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 12068, "is_private": false, "text": "That's a completely different issue.\n\nFWIW w.r.t the original report, POSIX does specify exactly that writes must\nsucceed partially for pipes so APR behaviour should correct there.", "id": 88496, "time": "2006-04-26T12:59:34Z", "creator": "jorton@redhat.com", "creation_time": "2006-04-26T12:59:34Z", "attachment_id": null}]
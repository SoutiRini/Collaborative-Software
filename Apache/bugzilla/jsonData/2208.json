[{"count": 0, "tags": [], "bug_id": 2208, "attachment_id": null, "is_private": false, "id": 3031, "time": "2001-06-18T01:24:45Z", "creator": "bdz010@motorola.com", "creation_time": "2001-06-18T01:24:45Z", "text": "In our Web Client application we used ObjectOutputStream to send serializable \nobject (Hashtable in our case) as request \nparameter to the Servlet running under Tomcat Servlet Engine at the Server side.\n\nOur code of Servlet's doPost() method was as follows:\n   public void doPost(HttpServletRequest request, HttpServletResponse response)\n                      throws ServletException, IOException{\n         ...\n\tInputStream is  =  request.getInputStream();\n\tObjectInputStream ois  = new ObjectInputStream(is);\n\tHashtable args = (Hashtable)ois.readObject();\n         ...\n   }\n\nWhile working with Tomcat in direct mode (through port 8080) we had not any \nproblem.\n\nWhen we configured Apache HTTP Server to resend Servlet requests to the Tomcat\nusing mod_jk module and Ajp13 protocol we accepted in Servlet's doPost() method\nthe StreamCorruptedException thrown by constructor of ObjectInputStream class.\n\nOur following investigations brought us to the conclusion that the source of\nthe problem is the invalid code of method doRead() in \norg.apache.tomcat.service.connector.Ajp13ConnectorRequest class.\n\nThe scenario is as follows:\n- method request.getInputStream() returns always the instance of \n\torg.apache.tomcat.core.BufferedServletInputStream class \n- this class extends java.io.InputStream and it's method read() always   \n  delegates call to doRead() method of org.apache.tomcat.core.RequestImpl \n  internal reference, that is the instance of \n       org.apache.tomcat.service.connector.Ajp13ConnectorRequest \n  when Ajp13 protocol used for Apache-Tomcat connection.\n\n- the method doRead() of Ajp13ConnectorRequest class should return the value\n  of next byte in the stream. As stated in java.io.InputStream.read() method \n  description the returned value should be between 0 and 255 or -1 if the \n  stream is not available.\n\n- Actually, method doRead() of Ajp13ConnectorRequest class casts byte to int \n  producing signed value between -128 and 127 instead of unsigned one \n  between 0 and 255.\n\n- then java.io.ObjectOutputStream class defines a protocol for serialized\n  object to have a header bytes 0xac and 0xed. When the constructor reads the\n  first byte value it actually accepts -84 instead of 172(=0xac) and fails to \n  continue the object deserialization.\n\nSo, we came to the conclusion  that in current situation no serialized object \n=============================================================================\ncould be transferred to servlet using Apache - mod_jk - Ajp13 connection. So\n==============================================================================\nas any other POST data containing byte values between 128 and 255.\n==================================================================\n\nMoreover, we found the same bug in source code of following versions of Tomcat \nengine:\n - jakarta-tomcat-3.2.2\n      The same bug in Ajp13ConnectorRequest.doRead()\n-  jakarta-tomcat-4.0-m5\n      The  same bug in org.apache.catalina.connector.RequestStream.read()\n\nPOSSIBLE BUG FIXING\n===================\n\nThe returning value of method \norg.apache.tomcat.service.connector.Ajp13ConnectorRequest.doRead()should be \nmasked as \n                        return <byte_value> & 0xff;\ninstead of automatic value casting to int.\n\nThis solution we tried by ourselves and got successful result."}, {"count": 1, "text": "Fixed in Tomcat 3.3", "bug_id": 2208, "attachment_id": null, "id": 4819, "time": "2001-08-24T18:22:16Z", "creator": "nacho@apache.org", "creation_time": "2001-08-24T18:22:16Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 1673 ***", "attachment_id": null, "bug_id": 2208, "id": 4820, "time": "2001-08-24T18:23:56Z", "creator": "nacho@apache.org", "creation_time": "2001-08-24T18:23:56Z", "is_private": false}]
[{"count": 0, "text": "Created attachment 35687\nJava error log file\n\nTomcat 8.5.23 with Oracle jdk 1.8.0_152 with tomcat native library 1.2.16, openssl 1.0.2l running on RHEL7.3\n\nAny attempt to define a value for SSLProtocol causes crash on startup.\n\n\nUsing CATALINA_BASE:   /home/tomcat\nUsing CATALINA_HOME:   /home/tomcat\nUsing CATALINA_TMPDIR: /home/tomcat/temp\nUsing JRE_HOME:        /usr/java/latest\nUsing CLASSPATH:       /home/tomcat/bin/bootstrap.jar:/home/tomcat/bin/tomcat-juli.jar\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007f164d78977a, pid=16600, tid=0x00007f166c39c700\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_152-b16) (build 1.8.0_152-b16)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.152-b16 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  [libtcnative-1.so.0.2.16+0x1d77a]  Java_org_apache_tomcat_jni_SSLContext_free+0xa\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n#\n# An error report file with more information is saved as:\n# /home/apache-tomcat-8.5.23/conf/hs_err_pid16600.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://bugreport.java.com/bugreport/crash.jsp\n# The crash happened outside the Java Virtual Machine in native code.\n# See problematic frame for where to report the bug.\n#\n/home/tomcat/conf/../bin/catalina.sh: line 572: 16600 Aborted                 (core dumped) \"/usr/java/latest/bin/java\" -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -classpath \"/home/tomcat/bin/bootstrap.jar:/home/tomcat/bin/tomcat-juli.jar\" -Dcatalina.base=\"/home/tomcat\" -Dcatalina.home=\"/home/tomcat\" -Djava.io.tmpdir=\"/home/tomcat/temp\" org.apache.catalina.startup.Bootstrap configtest\n\n\nConfig file stanza reads thus:\n\n  <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                maxThreads=\"150\"\n                scheme=\"https\"\n                secure=\"true\"\n                SSLEnabled=\"true\"\n                SSLProtocol=\"+TLSv1\"\n                >\n\nAny variation of the SSLProtocol definition produces the same result. Remove it and the instance starts without issue.\n\nSort of reminiscent of 52714. hs_err output file attached.", "bug_id": 62023, "is_private": false, "id": 203364, "time": "2018-01-19T13:20:36Z", "creator": "joe.fletcher@sscinc.com", "creation_time": "2018-01-19T13:20:36Z", "tags": [], "attachment_id": 35687}, {"attachment_id": null, "tags": [], "bug_id": 62023, "is_private": false, "count": 1, "id": 203365, "time": "2018-01-19T13:35:54Z", "creator": "remm@apache.org", "creation_time": "2018-01-19T13:35:54Z", "text": "I have no idea why it crashes, so maybe this can stay open for now, but:\n- Please read the documentation on SSL config\n- The SSLProtocol attribute is a JSSE attribute and it doesn't do what you think it does"}, {"count": 2, "tags": [], "bug_id": 62023, "attachment_id": null, "text": "Tested with latest 8.5.x.\n\nThat config snippet doesn't crash for me. Tomcat won't even start until the closing '>' is changed to '/>'. Then I get the expected warning about missing SSLCertificateFile\n\nIf you can reproduce this with the latest 8.5.x code please feel free to re-open. You'll need to provide the exact steps to reproduce this from a clean install.", "id": 203366, "time": "2018-01-19T13:43:09Z", "creator": "markt@apache.org", "creation_time": "2018-01-19T13:43:09Z", "is_private": false}, {"count": 3, "tags": [], "creator": "joe.fletcher@sscinc.com", "attachment_id": null, "id": 203367, "time": "2018-01-19T14:04:43Z", "bug_id": 62023, "creation_time": "2018-01-19T14:04:43Z", "is_private": false, "text": "The  full connector config block is thus:\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n                maxThreads=\"150\"\n                scheme=\"https\"\n                secure=\"true\"\n                SSLEnabled=\"true\"\n                protocols=\"+TLSv1\"\n                >\n        <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" />\n        <SSLHostConfig>\n            <Certificate certificateKeyFile=\"/home/tomcat/conf/certs2/wild.wherever.com.key\"\n                         certificateFile=\"/home/tomcat/conf/certs2/wild.wherever.com.crt\"\n                         certificateChainFile=\"/home/tomcat/conf/certs2/intermediate.crt\"\n                         type=\"RSA\" />\n        </SSLHostConfig>\n    </Connector>\n\n\nNote that in this instance I've tried the \"protocols\" attribute since apparently SSLProtocol isn't correct for this style of connector."}, {"attachment_id": null, "tags": [], "bug_id": 62023, "is_private": false, "count": 4, "id": 203369, "time": "2018-01-19T14:28:46Z", "creator": "joe.fletcher@sscinc.com", "creation_time": "2018-01-19T14:28:46Z", "text": "@Remy/Mark:\n\nPerhaps this is a documentation issue.\n\nhttps://tomcat.apache.org/tomcat-8.0-doc/config/http.html#SSL_Support\nhttps://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html\n\nThe ssl-howto doc gives this example.\n\nThe APR connector uses different attributes for many SSL settings, particularly keys and certificates. An example of an APR configuration is:\n\n<!-- Define a SSL Coyote HTTP/1.1 Connector on port 8443 -->\n<Connector\n           protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n           port=\"8443\" maxThreads=\"200\"\n           scheme=\"https\" secure=\"true\" SSLEnabled=\"true\"\n           SSLCertificateFile=\"/usr/local/ssl/server.crt\"\n           SSLCertificateKeyFile=\"/usr/local/ssl/server.pem\"\n           SSLVerifyClient=\"optional\" SSLProtocol=\"TLSv1+TLSv1.1+TLSv1.2\"/>\n\nAs stated, the config works fine provided I remove the SSLProtocol option."}, {"count": 5, "tags": [], "creator": "remm@apache.org", "text": "Please do not reopen the report, this works for me too. About the doc, it is correct, I made a mistake about \"The SSLProtocol attribute is a JSSE attribute and it doesn't do what you think it does\", it's actually the \"sslProtocol\" attribute that is JSSE only, not \"SSLProtocol\" and it's confusing (and deprecated).", "id": 203371, "time": "2018-01-19T14:59:19Z", "bug_id": 62023, "creation_time": "2018-01-19T14:59:19Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 62023, "is_private": false, "count": 6, "id": 203374, "time": "2018-01-19T17:20:59Z", "creator": "markt@apache.org", "creation_time": "2018-01-19T17:20:59Z", "text": "Re-opening because I can reproduce this locally now the full configuration has been provided. The configuration may be invalid but we really should be displaying a useful error message rather than crashing. I might not get to this until next week."}, {"count": 7, "tags": [], "creator": "csutherl@apache.org", "text": "I can reproduce this by adding any SSLHostConfig attribute to the Connector (namely `SSLVerifyClient=\"optional\"`). The problem here is that when using APR and specifying Connector configuration which creates two '_default_' SSLHostConfig objects, tomcat-native crashes without providing any indication of what happened. That is not a great user experience :( This happens because org.apache.tomcat.util.net.AprEndpoint.releaseSSLContext() tries to release a zero context that tomcat-native asserts is non-zero (see tomcat-native native/src/sslcontext.c:363). After doing some tracing, it looks like AprEndpoint's releaseSSLContext method calls sslHostConfig.getOpenSslContext() and sslHostConfig.getOpenSslConfContext() which always seem to return 0. Is that correct behavior? It seems a bit buggy to me.\n\nI was able to correct this behavior by adding two zero checks to the releaseSSLContext method in AprEndpoint:\n\n 629     @Override\n 630     protected void releaseSSLContext(SSLHostConfig sslHostConfig) {\n 631         Long ctx = sslHostConfig.getOpenSslContext();\n 632         if (ctx != null && ctx != 0) {\n 633             SSLContext.free(ctx.longValue());\n 634             sslHostConfig.setOpenSslContext(null);\n 635         }\n 636         Long cctx = sslHostConfig.getOpenSslConfContext();\n 637         if (cctx != null && cctx != 0) {\n 638             SSLConf.free(cctx.longValue());\n 639             sslHostConfig.setOpenSslConfContext(null);\n 640         }\n 641     }\n\nThis causes the correct behavior to occur (at least it does the same thing as NioEndpoint and prints the endpoint.duplicateSslHostName message). I was going to push this, but given that I'm not sure how this OpenSSLContext stuff is supposed to work and the lack of javadocs in the new classes, I thought it best to get someone's opinion first.", "id": 203398, "time": "2018-01-22T15:10:03Z", "bug_id": 62023, "creation_time": "2018-01-22T15:10:03Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "remm@apache.org", "text": "Yes, something is wrong as there are null checks, yet, the sslHostConfig.getOpenSslContext() (same for the conf) return value cannot be null (the default is Long 0). Hummm, I would standardize on null as the new default value, so that if there's a problem it'll likely cause a NPE rather than a crash.", "id": 203399, "time": "2018-01-22T15:18:47Z", "bug_id": 62023, "creation_time": "2018-01-22T15:18:47Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "rainer.jung@kippdata.de", "text": "(In reply to Coty Sutherland from comment #7)\n> I can reproduce this by adding any SSLHostConfig attribute to the Connector\n> (namely `SSLVerifyClient=\"optional\"`). The problem here is that when using\n> APR and specifying Connector configuration which creates two '_default_'\n> SSLHostConfig objects, tomcat-native crashes without providing any\n> indication of what happened. That is not a great user experience :( This\n> happens because org.apache.tomcat.util.net.AprEndpoint.releaseSSLContext()\n> tries to release a zero context that tomcat-native asserts is non-zero (see\n> tomcat-native native/src/sslcontext.c:363). After doing some tracing, it\n> looks like AprEndpoint's releaseSSLContext method calls\n> sslHostConfig.getOpenSslContext() and sslHostConfig.getOpenSslConfContext()\n> which always seem to return 0. Is that correct behavior? It seems a bit\n> buggy to me.\n> \n> I was able to correct this behavior by adding two zero checks to the\n> releaseSSLContext method in AprEndpoint:\n> \n>  629     @Override\n>  630     protected void releaseSSLContext(SSLHostConfig sslHostConfig) {\n>  631         Long ctx = sslHostConfig.getOpenSslContext();\n>  632         if (ctx != null && ctx != 0) {\n>  633             SSLContext.free(ctx.longValue());\n>  634             sslHostConfig.setOpenSslContext(null);\n>  635         }\n>  636         Long cctx = sslHostConfig.getOpenSslConfContext();\n>  637         if (cctx != null && cctx != 0) {\n>  638             SSLConf.free(cctx.longValue());\n>  639             sslHostConfig.setOpenSslConfContext(null);\n>  640         }\n>  641     }\n> \n> This causes the correct behavior to occur (at least it does the same thing\n> as NioEndpoint and prints the endpoint.duplicateSslHostName message). I was\n> going to push this, but given that I'm not sure how this OpenSSLContext\n> stuff is supposed to work and the lack of javadocs in the new classes, I\n> thought it best to get someone's opinion first.\n\nYes, the aded check against 0 instead of only checking against null looks OK. The native pointer here is wrapper by a Long and the native null pointer would be a (Long)0.\n\nRegards,\n\nRainer", "id": 203401, "time": "2018-01-22T15:39:40Z", "bug_id": 62023, "creation_time": "2018-01-22T15:39:40Z", "is_private": false, "attachment_id": null}, {"count": 10, "text": "Might this be in any way related to problems creating a JSSE configuration?\nI ran into what looked like https://bz.apache.org/bugzilla/show_bug.cgi?id=59910 when attempting to use a keystore based on a CA wildcard certificate.\nIt seems to insist on using an alias of \"tomcat\" but even with a single entry in the keystore with that alias it complains there is no valid certificate.", "bug_id": 62023, "is_private": false, "id": 203402, "time": "2018-01-22T15:46:34Z", "creator": "joe.fletcher@sscinc.com", "creation_time": "2018-01-22T15:46:34Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 62023, "text": "Fixed in:\n- trunk for 9.0.5 onwards\n- 8.5.x for 8.5.28 onwards\n\nThanks for the report!", "count": 11, "id": 203419, "time": "2018-01-23T13:22:09Z", "creator": "csutherl@apache.org", "creation_time": "2018-01-23T13:22:09Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "michael.gellner@finanzit.com", "attachment_id": null, "id": 68099, "time": "2004-12-08T11:38:40Z", "bug_id": 32582, "creation_time": "2004-12-08T11:38:40Z", "is_private": false, "text": "Dear community,\n\nas far as I can see it is really hard to convert filenames from lower case to \nupper case (and also in the other direction).\nWe get from an old host machine only upper case named files (e.g. THESOURCE) \nand need something like \"thesource.c\". Otherwise we cannot use this on PC oder \nUNIX-like systems. The conversion should be done with ant, since we need this \non differnet platforms. So ant would ideal for that task. Shell skripts, \nbatches, tr's and other are mostly platform dependant. \n\nDidn't I overlook something or isn't this really impossible on filenames \n(expect I try to catch the 26 upper case letters manually - but even this \nseems to fail).\n\nAny ideas?\n\nThanks,\nMichael"}, {"count": 1, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "id": 68103, "time": "2004-12-08T12:35:48Z", "bug_id": 32582, "creation_time": "2004-12-08T12:35:48Z", "is_private": false, "text": "Converting just the name is easy as I had shown on the user list [1].\n\nBut where you need the names? Usually you use <fileset>s or <path>s which\nwill catch all files. E.g. compiling with AntContribs <cc> task [2] would be \ndone via nested filesets.\n\nIf that is all, I would close the bug.\n\n\n[1] http://marc.theaimsgroup.com/?l=ant-user&m=104486168926737&w=2\n[2] http://ant-contrib.sourceforge.net/cc.html"}, {"count": 2, "text": "I did not understand the reply.\nThere are filesystems that differ between upper and lower case characters, \nsome that show them but ignore the case and others that offer only one variant.\nI want to construct a build but my ftp only delivers things like\n\nc:\\temp\\downplace\\FILEONE\nc:\\temp\\downplace\\FILETWO\nc:\\temp\\downplace\\FILEANY\n...\n\nI cannot compile this, I need:\n\nc:\\temp\\downplace\\fileone.java\nc:\\temp\\downplace\\filetwo.java\nc:\\temp\\downplace\\fileany.java\n...\n\nThis depends from the contents in the source files. On the platform where that \nstuff comes from the upper case filenames are not any problem, but if the \nexisiting code shall be mirgrated trouble comes up. The known PC compilers and \nIDEs cannot handle this. \n\nIf there is a way (and maybe with substituting 26 upper case letters with \nlower case letters via regular expressions or else but even this seems to be \nimpossible) please give a sketch.\n\nMy approaches with globmapper and rexexpmapper did not lead to any success.\n\nIMHO it is a really strong limitation if a build tool is not able to convert \nfilenames, near to a bug. *I* would have expected that a broad used build tool \nis able to such a thing. Even if regular expressions are implemented. But \nsomething like [A-Z] -> [a-z] does not work. I cannot find any option to \nmodify the placeholders (\\1 \\2 ...) output.\nSo I tend to a bug if ant cannot do this. You see that I \nselected \"enhancement\" since it is not the case that something available does \nnot work (it is some unavailable functionality).\n\nConsider I need the filenames to a compile, distribute, deploy or some similar \nprocessing. Did I understand right, that *this* question would be a criterion \nto legitimate a bug?", "bug_id": 32582, "attachment_id": null, "id": 68105, "time": "2004-12-08T13:35:23Z", "creator": "michael.gellner@finanzit.com", "creation_time": "2004-12-08T13:35:23Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "id": 68107, "time": "2004-12-08T14:55:33Z", "bug_id": 32582, "creation_time": "2004-12-08T14:55:33Z", "is_private": false, "text": "You could use a custom mapper, for example:\n    <ae:scripttypedef name=\"custom.mapper\" language=\"beanshell\">\n      import org.apache.tools.ant.types.DataType;\n      import org.apache.tools.ant.util.FileNameMapper;\n      import java.io.File;\n      public class CustomMapper extends DataType implements FileNameMapper {\n         public void setFrom(String from) {\n             // DoNothing\n         }\n         public void setTo(String to) {\n             // DoNothing\n         }\n         public String[] mapFileName(String sourceFileName) {\n            String[] ret = new String[1];\n            ret[0] = sourceFileName.toLowerCase() + \".java\";\n            return ret;\n         }\n      }\n    </ae:scripttypedef>\n    <pathconvert targetos=\"unix\" property=\"converted\">\n      <path path=\"ABC:DEF:GHI\"/>\n      <mapper>\n        <chainedmapper>\n          <flattenmapper/>\n          <custom.mapper/>\n        </chainedmapper>\n      </mapper>\n    </pathconvert>\n    <echo>${converted}</echo>\n"}, {"count": 4, "tags": [], "creator": "kevin.jackson@it.fts-vn.com", "attachment_id": null, "id": 70272, "time": "2005-01-31T12:31:22Z", "bug_id": 32582, "creation_time": "2005-01-31T12:31:22Z", "is_private": false, "text": "(In reply to comment #3)\n> You could use a custom mapper, for example:\n>     <ae:scripttypedef name=\"custom.mapper\" language=\"beanshell\">\n>       import org.apache.tools.ant.types.DataType;\n>       import org.apache.tools.ant.util.FileNameMapper;\n>       import java.io.File;\n>       public class CustomMapper extends DataType implements FileNameMapper {\n>          public void setFrom(String from) {\n>              // DoNothing\n>          }\n>          public void setTo(String to) {\n>              // DoNothing\n>          }\n>          public String[] mapFileName(String sourceFileName) {\n>             String[] ret = new String[1];\n>             ret[0] = sourceFileName.toLowerCase() + \".java\";\n>             return ret;\n>          }\n>       }\n>     </ae:scripttypedef>\n>     <pathconvert targetos=\"unix\" property=\"converted\">\n>       <path path=\"ABC:DEF:GHI\"/>\n>       <mapper>\n>         <chainedmapper>\n>           <flattenmapper/>\n>           <custom.mapper/>\n>         </chainedmapper>\n>       </mapper>\n>     </pathconvert>\n>     <echo>${converted}</echo>\n> \n\nIf you just change from UPPER.JAVA to upper.java, when the class name is Upper,\nthen it will also fail.  Perhaps a better solution would be to look inside the\nsource file and extract the Classname from the source text - \nlook for something like \"^public class [A-Z][a-z] | ^class [A-Z][a-z]\" not sure\n if this would deal with inner classes, but the first \"class\" should be the one\nthat the file is called."}, {"count": 5, "tags": [], "bug_id": 32582, "attachment_id": null, "id": 70277, "creation_time": "2005-01-31T16:08:22Z", "time": "2005-01-31T16:08:22Z", "creator": "carej@us.ibm.com", "text": "I think that this would be useful for more than just file names...I personally\nhave a need for this when loading properties. I've been experimenting with\nloadfile & filterchains but there does not seem to be anything to convert upper\nto lower (or the other way around).\n\nJava regexps appear to lack the Perl \\U or \\l modifier, so that route doesn't\nwork either.", "is_private": false}, {"count": 6, "tags": [], "bug_id": 32582, "attachment_id": null, "text": "Okay, if you use jakarta-ORO, you CAN get the \\L \\U functionality, but you have\nto  backslash-escape the backslashes.  There is code in Ant--attempting to unify\nthe treatment of regexp engines--that translates \\([^0-9]) to $1, as it were. \nSo \\U gets passed as U .  FWIW, \\([0-9]) gets translated to \\$$1 e.g. \\1 to\n\"$1\".  Anyway, the loophole is then that \\\\U gets translated to \\U.  I don't\nknow that this is not a bug but I don't know whether it's changeable due to BC\nlimitations, but the workaround exists anyway.\n\nHTH,\nMatt", "id": 70279, "time": "2005-01-31T17:14:55Z", "creator": "mbenson@apache.org", "creation_time": "2005-01-31T17:14:55Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "is_private": false, "id": 96515, "time": "2006-12-04T08:17:16Z", "bug_id": 32582, "creation_time": "2006-12-04T08:17:16Z", "text": "Are your needs solved with these information?"}, {"count": 8, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "is_private": false, "id": 96857, "time": "2006-12-12T23:38:02Z", "bug_id": 32582, "creation_time": "2006-12-12T23:38:02Z", "text": "no further work as there are possibilities provided"}]
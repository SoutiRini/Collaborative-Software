[{"count": 0, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": null, "id": 18748, "time": "2002-06-28T22:52:49Z", "bug_id": 10345, "creation_time": "2002-06-28T22:52:49Z", "is_private": false, "text": "The Execute task has a bug in:\n\n    protected void waitFor(Process process) {\n        try {\n            process.waitFor();\n            setExitValue(process.exitValue());\n        } catch (InterruptedException e) {}\n    }\n\nIf the Execute task is interrupted, what happens is that in execute(),\nbecause the InterruptedException is ignored, the process is assumed to\nhave completed normally, and is removed from the ProcessDestroyer.  This\nmeans the processes are still hanging around and no shutdown thread is\ngoing to kill them\n\nOne way to handle it is to throw the interrupted exception from\nwaitFor() and handle it correctly in execute.  By correctly handling it\nI mean that if the thread is interrupted, process.destroy() must be\ncalled - i.e. the process shouldn't be hanging around waiting for the\nshutdown hook to kill it.\n\nIn general, other handling of InterruptedException should be examined for \nsimilar problems."}, {"count": 1, "tags": [], "text": "Just curious. Do you have a testcase that demonstrate this.\nIf yes. Using which JDK ?", "is_private": false, "bug_id": 10345, "id": 19599, "time": "2002-07-16T14:01:52Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-16T14:01:52Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": 2365, "id": 19613, "time": "2002-07-16T15:01:13Z", "bug_id": 10345, "creation_time": "2002-07-16T15:01:13Z", "is_private": false, "text": "Created attachment 2365\nNew Parallel Task"}, {"count": 3, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": null, "id": 19614, "time": "2002-07-16T15:10:45Z", "bug_id": 10345, "creation_time": "2002-07-16T15:10:45Z", "is_private": false, "text": "Use the attachement, Parallel.java, as the replacement for the standard \nParallel task for Ant.  Then do the following:\n\n<parallel>\n    <sequential>\n        <java fork=\"true\" ... >  #execute something like tomcat,\n                                 #which will never exit, unless told to\n    </sequential>\n    <sequential>\n        <waitfor maxwait=\"1\"\n                 maxwaitunit=\"minute\"\n                 checkevery=\"1\"\n                 checkeveryunit=\"minute\">\n            <isset property=\"short_regress_done\" />\n        </waitfor>\n        <fail unless=\"short_regress_done\" \n              message=\"Short_regress test timed out!\" />\n    </sequential>\n</parallel>\n\nNote that it doesn't matter what's in the first sequential task, as long as it \nis a Java process (or any executable for that matter) which just goes away and \nnever comes back - like Tomcat, or any application server.\n\nWhen the condition fails and the build exits, you'll see that the executable \nis still running.\n\nClearly, the catching of the InterruptedException with no action whatsoever \nwill cause the process to live forever, as the logic of the task shows that \nthe Process is assumed to have been exited by returning from the waitFor() \nmethod.\n\n"}, {"count": 4, "tags": [], "text": "Did you try it out with the patch you suggest ?", "attachment_id": null, "id": 19615, "creation_time": "2002-07-16T15:13:59Z", "time": "2002-07-16T15:13:59Z", "creator": "sbailliez@apache.org", "bug_id": 10345, "is_private": false}, {"count": 5, "tags": [], "bug_id": 10345, "is_private": false, "text": "This is the way I run this all the time.  We have replaced the Parallel task \nwith the supplied attachement, and we run with variations of this pattern - \ni.e. several parallel threads, any one of which may have an error or timeout \n(if a condition) and then we wish the whole Parallel task to end - not just \nhang waiting for a thread which will never end.  Our short regression -which \nis where we're using this - is run all the time by numerous developers.  \nWithout this patch to Execute, the processes hang around forever.  With it, \nthey die a normal death when the Parallel task exits.\n\nIf you like, I'll include a complete, tested little build file with a Java \nprogram which just spins forever.  But you'll still need the modified Parallel \ntask to get the InterruptedException to be thrown during the waitFor().", "id": 19617, "time": "2002-07-16T15:18:24Z", "creator": "Hal.Hildebrand@hellblazer.com", "creation_time": "2002-07-16T15:18:24Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "is_private": false, "id": 19619, "time": "2002-07-16T15:22:42Z", "bug_id": 10345, "creation_time": "2002-07-16T15:22:42Z", "text": "I'm trying to determine if there is a relation between #5003 and #8510 as well."}, {"count": 7, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": null, "id": 19625, "time": "2002-07-16T15:52:50Z", "bug_id": 10345, "creation_time": "2002-07-16T15:52:50Z", "is_private": false, "text": "5003 seems like it could be related, but I've always viewed this specific \nproblem as a black hole of hell and wanted to stay as far away from the even \nhorizon as I could.\n\n8510 looks like it could be solved by this patch, however.\n\n"}, {"count": 8, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "is_private": false, "id": 19638, "time": "2002-07-16T18:54:00Z", "bug_id": 10345, "creation_time": "2002-07-16T18:54:00Z", "text": "You sent a reworked Parallel task, but what did you do exactly in Execute ?"}, {"count": 9, "tags": [], "bug_id": 10345, "is_private": false, "text": "Changed waitFor(Process) to:\n\n    protected void waitFor(Process process) {\n        try {\n            process.waitFor();\n            setExitValue(process.exitValue());\n        } catch (InterruptedException e) {\n            process.destroy();\n        }\n    }\n\n", "id": 19639, "time": "2002-07-16T19:08:28Z", "creator": "Hal.Hildebrand@hellblazer.com", "creation_time": "2002-07-16T19:08:28Z", "attachment_id": null}, {"count": 10, "text": "mm.. amazing because that's what I tried this morning when playing with the \nother bug and doing a ctrl+c seems to not fire an interrupted exception.", "bug_id": 10345, "attachment_id": null, "id": 19640, "time": "2002-07-16T19:12:33Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-16T19:12:33Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": null, "is_private": false, "id": 19641, "time": "2002-07-16T19:18:58Z", "bug_id": 10345, "creation_time": "2002-07-16T19:18:58Z", "text": "^c won't fire the InterruptedException, rather it will just trigger the \nregistered shutdown handlers.\n\nDon'tcha just love Java threads :)"}, {"count": 12, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "is_private": false, "id": 19642, "time": "2002-07-16T19:34:36Z", "bug_id": 10345, "creation_time": "2002-07-16T19:34:36Z", "text": "Ouch, right. Was still in the SIGINT case of the other bug with that damn \nshutdown hook. Let's go one thing after another.\n\nLooks like we have 3 distincts one here and that they are not related."}, {"count": 13, "tags": [], "creator": "Hal.Hildebrand@hellblazer.com", "attachment_id": null, "is_private": false, "id": 19643, "time": "2002-07-16T19:48:52Z", "bug_id": 10345, "creation_time": "2002-07-16T19:48:52Z", "text": "You have to make sure that they aren't using the \"-rs\" switch when invoking \nJava.  If the \"-rs\" switch is used, SIGINT (or the windows equivalent) is not \nsent to the Java app, and the shutdown hook doesn't run at all..."}, {"count": 14, "tags": [], "text": "Fixed in CVS (head and 1.5 branch).\nI have to take a look at your parallel task to see the differences (please \nnext time do a cvs diff -u, otherwise it's painful) but you should open \nanother bug for parallel if there is one. Thanks.", "attachment_id": null, "id": 20079, "creation_time": "2002-07-23T19:54:50Z", "time": "2002-07-23T19:54:50Z", "creator": "sbailliez@apache.org", "bug_id": 10345, "is_private": false}]
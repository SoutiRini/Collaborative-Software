[{"count": 0, "tags": [], "bug_id": 35405, "attachment_id": null, "id": 76509, "time": "2005-06-18T01:30:36Z", "creator": "v_ssk@fareastone.com.tw", "creation_time": "2005-06-18T01:30:36Z", "is_private": false, "text": "We are using bcel library for code generation. And for some particualr scenarios\nour method size is exceeding the method size limit defined by java (65535 bytes)\nand we get the following error,\n\norg.apache.bcel.generic.ClassGenException: Branch target offset too large for short\n\tat org.apache.bcel.generic.BranchInstruction.dump(BranchInstruction.java:100)\n\tat org.apache.bcel.generic.InstructionList.getByteCode(InstructionList.java:980)\n\tat org.apache.bcel.generic.MethodGen.getMethod(MethodGen.java:616)\nWhen the method size limit is defined in java as 65535, why does the BCEL gives\nan error for 32767, in\norg.apache.bcel.generic.BranchInstruction.dump(DataOutputStream out) the check\nis for,\n\nif(Math.abs(index) >= 32767) // too large for short\n      throw new ClassGenException(\"Branch target offset too large for short\");\n\nwhy not instead have the if(Math.abs(index) >= 65535)\n\nI tried this and then my application works fine, I want to be sure if thats the\nright approach."}, {"count": 1, "tags": [], "bug_id": 35405, "attachment_id": null, "id": 77361, "time": "2005-07-17T03:13:30Z", "creator": "dbrosius@mebigfatguy.com", "creation_time": "2005-07-17T03:13:30Z", "is_private": false, "text": "From Java class specification for \n\nif_icmp<cond>\n\n\nIf the comparison succeeds, the unsigned branchbyte1 and branchbyte2 are used \nto construct a signed 16-bit offset, where the offset is calculated to be \n(branchbyte1 << 8) | branchbyte2\n"}]
[{"count": 0, "tags": [], "creator": "gianni.cicchelli@bbl.be", "attachment_id": null, "text": "hi,\ni am using log4j in my application with DailyRollingFileAppender (change the \nlog file name every day).\nI have multi application logging in the same file (each application has their \nown log4j properties files,they all use the same DailyRollingFileAppender ).\nI know in case of multi application logging in the same file ,we can use the \nsocketAppender,but i have tried to don't use the socketappender.\nthis is the matter ,i have found :\nwhen a start all the application ,all the log from all the application are \nlogged in the good log file.But when the rolling happen,just one application \ncontinue to log in the good file (the one who created the backup files) and for \nthe others applications ,they continue to write log in the backup file ,either \nthe log message are lost.", "id": 31596, "time": "2003-02-19T14:17:00Z", "bug_id": 17201, "creation_time": "2003-02-19T14:17:00Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "srevilak@f7.net", "is_private": false, "id": 57096, "time": "2004-05-10T15:02:27Z", "bug_id": 17201, "creation_time": "2004-05-10T15:02:27Z", "tags": [], "text": "I too have found problems with DailyRollingFileAppender where\nmultiple processes are writing to the same logfile, across the time\nboundary of a rotation period.  The ultimate result is data loss, and\nit is easily reproducible.\n\nAccompanying this writeup are four file attachments: the first three\ncomprise a test case to demonstrate this behavior; the fourth file is\na patch to DailyRollingFileAppender that prevents this data loss.\n\nTest case files:\n\n  1) log4j.properties -\n     Configures log4j with a DailyRollingFileAppender, whose rotation\n     period is one minute, writing to a file named \"test.log\".\n\n  2) LogLoop.java -\n     A command line java program.  LogLoop takes arguments of M and\n     N.  It logs M info lines, spaces at N-second intervals, followed\n     by \"done\".\n\n  3) runtest.sh - \n     Bourne shell script that runs the test case.\n\n\nruntest.sh invokes three concurrent LogLoop instances\n\n  * instance #1 logs 300 lines, at 1 second intervals + \"done\"\n  * instance #2 logs 150 lines, at 2 second intervals + \"done\"\n  * instance #3 logs 100 lines, at 3 second intervals + \"done\"\n\nPrior to the first rotation, test.log looks something like the\nfollowing:\n\n   20040510.100541 INFO  [main] LogLoop - log: 0 of 300 (interval=1)\n   20040510.100541 INFO  [main] LogLoop - log: 0 of 100 (interval=3)\n   20040510.100541 INFO  [main] LogLoop - log: 0 of 150 (interval=2)\n   20040510.100542 INFO  [main] LogLoop - log: 1 of 300 (interval=1)\n   20040510.100543 INFO  [main] LogLoop - log: 2 of 300 (interval=1)\n   20040510.100543 INFO  [main] LogLoop - log: 1 of 150 (interval=2)\n   20040510.100544 INFO  [main] LogLoop - log: 3 of 300 (interval=1)\n   20040510.100544 INFO  [main] LogLoop - log: 1 of 100 (interval=3)\n\n\nThe entries from the three processes are intermixed in the same file\n- just what one would expect.\n\n\nAfter the 5 minute test, one can aggregate the \"interval=\" entries\nacross all of the test.log.* files.  Below is the aggregation from one\nsample run:\n\n  # of interval=1: 0\n  # of interval=2: 141\n  # of interval=3: 14\n\n\nWe would expect a total of 553 entries (300 + 150 + 100 + 1 + 1 + 1).\nAbove, there are only 155.  In other words, roughly two-thirds of the\ndata has been lost.  These results will vary non-deterministically\namong different runs, but any single run will produce data loss -- one\nprocess wins, while the other two lose.\n\nAdmittedly, unsynchronized writes by independant processes are not\nideal.  However, for cases where this is seen as acceptable (eg - one\nrecognizes the possibility of the occassionally corrupt log entry), I\nwould maintain that a logging system should make reasonable attempts\nto prevent the loss of large portions of data.\n\n\nThe attachment \"DailyRollingFileAppender.java.patch\" contains a patch\nwith changes to rollover().  With this patch applied, the aggregation\nof logs from runtest.sh is as follows:\n\n  # of interval=1: 301\n  # of interval=2: 151\n  # of interval=3: 101\n\nAll 553 entries present.\n\nI hope that you'll consider incorporating these changes into the next\nrelease of log4j.\n\n\n--\nSteve Revilak\n"}, {"count": 2, "attachment_id": 11492, "creator": "srevilak@f7.net", "text": "Created attachment 11492\nlog4j.properties for test case", "id": 57097, "time": "2004-05-10T15:03:49Z", "bug_id": 17201, "creation_time": "2004-05-10T15:03:49Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 17201, "is_private": false, "text": "Created attachment 11493\nLogLoop.java - Command-line java program portion of test case", "id": 57098, "time": "2004-05-10T15:07:35Z", "creator": "srevilak@f7.net", "creation_time": "2004-05-10T15:07:35Z", "attachment_id": 11493}, {"count": 4, "tags": [], "text": "Created attachment 11494\nruntest.sh - shell script portion of test case", "is_private": false, "bug_id": 17201, "id": 57099, "time": "2004-05-10T15:08:27Z", "creator": "srevilak@f7.net", "creation_time": "2004-05-10T15:08:27Z", "attachment_id": 11494}, {"count": 5, "attachment_id": 11495, "creator": "srevilak@f7.net", "is_private": false, "id": 57100, "time": "2004-05-10T15:09:14Z", "bug_id": 17201, "creation_time": "2004-05-10T15:09:14Z", "tags": [], "text": "Created attachment 11495\nDailyRollingFileAppender patch"}, {"count": 6, "tags": [], "bug_id": 17201, "text": "It looks like a line of binary junk got tagged to the head of http://nagoya.apache.org/bugzilla/\nshowattachment.cgi?attach_id=11495 when I submitted the patch attachment.  Please ignore the first \nline. ", "id": 57105, "time": "2004-05-10T15:30:08Z", "creator": "srevilak@f7.net", "creation_time": "2004-05-10T15:30:08Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "text": "*** Bug 26518 has been marked as a duplicate of this bug. ***", "id": 58309, "time": "2004-05-28T12:17:56Z", "bug_id": 17201, "creation_time": "2004-05-28T12:17:56Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 17201, "text": "*** Bug 31736 has been marked as a duplicate of this bug. ***", "id": 65301, "time": "2004-10-19T04:22:39Z", "creator": "michaely007@yahoo.ca", "creation_time": "2004-10-19T04:22:39Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 17201, "text": "Besides the comments already voices on the mailing list that this is bad design \n(multiple processes writing to the same resource concurrently) and it's outside \nlog4j's scope to start with, the patches are no longer relevant as this whole \narea has been refactored in log4j 1.3.  There are now separate RollingPolicies \nwhich should do a better job of concurrency handling, and are easier to \ncustomize to MAYBE help with this use-case.  Feel free to try those out and \ncomment on them in the log4j-user mailing list (not here in Bugzilla, please).  \nThank you.", "id": 68381, "time": "2004-12-13T17:34:39Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-13T17:34:39Z", "is_private": false, "attachment_id": null}]
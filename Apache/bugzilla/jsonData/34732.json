[{"count": 0, "tags": [], "creator": "bobd@sendmail.com", "attachment_id": null, "id": 74414, "creation_time": "2005-05-04T01:18:56Z", "time": "2005-05-04T01:18:56Z", "bug_id": 34732, "text": "Word documents generated by FrameMaker 6/7  throw ClassCastException\n\nUnexpected Exception.\njava.lang.ClassCastException\n at org.apache.poi.poifs.property.PropertyTable.<init>\n    (PropertyTable.java:81)\n at org.apache.poi.poifs.filesystem.POIFSFileSystem.<init>\n    (POIFSFileSystem.java:97)\n\nOur immediate fix was to patch the constructor for\njava.org.apache.poi.poifs.property.PropertyTable to throw an IOException instead\nof the cce (so at least our app would handle it and not let the unchecked cce\nkill us).  We did:\n\n    if ((_properties.size() == 0) ||\n        (!(_properties.get(0) instanceof DirectoryProperty)))\n    {\n        throw new IOException(\"No root directory property\");\n    }\n\nBut we still can't actually read the document.  It looks like FrameMaker creates\na structured storage with no root and no directory, but just the single stream\nthat contains the Word doc data.  Note that Word and OpenOffice can open these\ndocuments without any problems.", "is_private": false}, {"count": 1, "tags": [], "bug_id": 34732, "is_private": false, "id": 74415, "creation_time": "2005-05-04T01:19:56Z", "time": "2005-05-04T01:19:56Z", "creator": "bobd@sendmail.com", "text": "Created attachment 14922\nWord 6.0/95 document created by FrameMaker", "attachment_id": 14922}, {"count": 2, "attachment_id": null, "creator": "zalewski@optonline.net", "is_private": false, "id": 74476, "time": "2005-05-05T14:24:02Z", "bug_id": 34732, "creation_time": "2005-05-05T14:24:02Z", "tags": [], "text": "It's a Word95 format document. I think HWPF only handles Word97.\n\nThere *is* a root property and there is a WordDocument stream. But there is no \n1Table or 0Table stream. I have no clue why your patch to PropertyTable works, \nbut it seems like HWPFDocument() must check if 0Table/1Table exists."}, {"count": 3, "tags": [], "bug_id": 34732, "is_private": false, "text": "Yeah, this bug isn't against HWPF, it's against POIFS.  We have our own Word doc\nparser that does support Word 6.0 / 95 and we don't use HWPF.\n\nI guess \"fix\" was not a good description of what our patch did.  All it does is\nthrow the checked IOException instead of the unchecked (and altogether\nunexpected) ClassCastException that it used to throw (which killed our app).\n\nSo if this storage is so evil that you don't think POIFS should be able to read\nit, or if you are only maintaining POIFS as required to support your own\ndocument libraries, then at least failing in a cleaner way would be good.", "id": 74496, "time": "2005-05-05T19:01:59Z", "creator": "bobd@sendmail.com", "creation_time": "2005-05-05T19:01:59Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 34732, "attachment_id": null, "id": 74508, "creation_time": "2005-05-06T03:00:37Z", "time": "2005-05-06T03:00:37Z", "creator": "zalewski@optonline.net", "text": "Ahhh.... I did some closer checking and found out something very interesting.\n\nThe 'RootEntry' on this file is actually marked as a 'Storage' type, not \nas 'Root'. The mark of node type is in the directory record at offset 0x042. \nOffice documents should always have 0x05 in this byte, but the file you posted \nhas 0x02. So POIFS interprets this as a 'Storage' (usually a folder element \nthat contains other streams).\n\nThis is why there is a ClassCastException. the PropertyTable object holds all \nthe directory nodes, and the first one in the table should be the 'RootEntry'. \nThat much is true for the file you posted.\n\nThat node should be marked as the directory root, by having the byte at offset \n0x042 set to 0x05. But the file you have posted has a value of 0x02. In POIFS, \nthis causes PropertyFactory to create a DirectoryProperty object instead of a \nRootProperty. The first element of the PropertyTable list is therefore a \nDirectoryProperty, but the constructor tries to cast this element as a \nRootProperty.\n\nA better fix would be to make a change in PropertyFactory\n\n  int    offset         = 0;\n\n  for (int k = 0; k < property_count; k++)\n  {\n\n+   int propertyType = data[ offset + PropertyConstants.PROPERTY_TYPE_OFFSET ];\n+   if( k == 0) propertyType = PropertyConstants.ROOT_TYPE;\n+   switch( propertyType)\n-   switch (data[ offset + PropertyConstants.PROPERTY_TYPE_OFFSET ])\n    {\n\n      case PropertyConstants.DIRECTORY_TYPE :\n\n\nIf you can grok that change, you might give it a try and report back if it \nworks.", "is_private": false}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 176828, "time": "2014-08-01T13:49:43Z", "bug_id": 34732, "creation_time": "2014-08-01T13:49:43Z", "is_private": false, "text": "Problem remains on trunk, even with NPOIFS\n\njava.lang.ClassCastException: org.apache.poi.poifs.property.DocumentProperty cannot be cast to org.apache.poi.poifs.property.DirectoryProperty\n\tat org.apache.poi.poifs.property.PropertyTableBase.<init>(PropertyTableBase.java:63)\n\tat org.apache.poi.poifs.property.NPropertyTable.<init>(NPropertyTable.java:66)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.readCoreContents(NPOIFSFileSystem.java:384)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:201)\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:183)"}]
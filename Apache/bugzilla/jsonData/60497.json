[{"count": 0, "tags": [], "bug_id": 60497, "attachment_id": null, "id": 195553, "creation_time": "2016-12-19T03:54:33Z", "time": "2016-12-19T03:54:33Z", "creator": "wklo@destinysolutions.com", "text": "As a result of the modification made in the change set \"1754112 Improve the error handling for custom tags to ensure that the tag is returned to the pool or released and destroyed once used\", Tomcat server version 8.5.5 (or higher up to 8.5.9) will return a JSP custom tag instance back to the tag pool for reuse, even after the execution of the tag's doStartTag method throws an exception.  This violates the JSP specification that specifies that JSP tags should never be reused in case of an exception.\n\nWe ran into a problem when running a Struts 1 application that makes use of the Struts Nested tag library under Tomcat 8.5.5. (We have similar problems for the DisplayTag as well.) Here is a simplified example to illustrate the problem. Consider the following three simple Java classes, namely, Form.java, Parent.java, and Child.java:\n\npublic class Form {\n\n    private List<Parent> parents;\n\n    public List<Parent> getParents() {\n        return parents;\n    }\n\n    public void setParents(List<Parent> parents) {\n        this.parents = parents;\n    }\n}\n\n\npublic class Parent {\n    private String name;\n    private List<Child> children;\n\n    public Parent(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<Child> getChildren() {\n        return children;\n    }\n\n    public void setChildren(List<Child> children) {\n        this.children = children;\n    }\n}\n\n\n\npublic class Child {\n    private String name;\n    private Parent parent;\n\n    public Child(String name){\n        this.name = name;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Parent getParent() {\n        return parent;\n    }\n\n    public void setParent(Parent parent) {\n        this.parent = parent;\n    }\n}\n\n\nSuppose we have two JSPs, say page1.jsp and page2.jsp, such that page1.jsp includes page2.jsp and that both page1.jsp and page2.jsp include a nested:iterate tag for rendering information contained in a Form instance.\n\npage1.jsp\n---------\n<nested:iterate id=\"parent\" name=\"form\" property=\"parents\" indexId=\"id\">\n   <jsp:include page=\"/page2.jsp\"/>\n</nested:iterate>\n\n\npage2.jsp\n---------\n<nested:iterate id=\"child\" property=\"children\" indexId=\"id\">\n   ... code that makes use of child ....\n</nested:iterate>\n\nBased on the current tag pool implementation, Tomcat will maintain two distinct tag pools for the nested:iterate tag, one for page1.jsp and the other for page2.jsp.\nUnder normal execution, i.e., without exception, the object referenced by the nested:iterate tag defined on page2.jsp from which the \"children\" property will be retrieved is a Parent instance, which is initialized by the nested:iterate tag defined on page1.jsp. However, if the execution of the nested:iterate tag's body defined on page2.jsp throws an exception, the name property of the tag instance will be incorrectly and permanently set to be \"form\", after the tag instance is returned back to the pool (associated with page2.jsp) to be reused.  As a result, all subsequent executions of page2.jsp that make use of the corrupted nested:iterate tag instance will throw an exception, since the Form.java class does not contain a property named \"children\".", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60497, "attachment_id": null, "id": 195555, "time": "2016-12-19T09:29:12Z", "creator": "remm@apache.org", "creation_time": "2016-12-19T09:29:12Z", "is_private": false, "text": "(In reply to Wai-Kau Lo from comment #0)\n> This violates the JSP specification that specifies\n> that JSP tags should never be reused in case of an exception.\n\nCan you provide the spec language which states this ?"}, {"count": 2, "text": "Created attachment 34534\nJSP Tag Lifecycle Diagram", "bug_id": 60497, "attachment_id": 34534, "id": 195560, "time": "2016-12-19T12:38:38Z", "creator": "wklo@destinysolutions.com", "creation_time": "2016-12-19T12:38:38Z", "tags": [], "is_private": false}, {"count": 3, "text": "Page 2-54 of the JavaServer Pages Specification version 2.0 describes the lifecycle of a JSP tag instance using a state transition diagram, which I have uploaded to this bug as an attachment (named JSP Tag Lifecycle Diagram) for ease of reference.  The state transitions are described as follows:\n\n\u2022[1] This transition is intended to be for releasing long-term data. no guarantees are assumed on whether any properties have been retained or not.\n\n\u2022[2] This transition happens if and only if the tag ends normally without raising\nan exception\n\n\u2022[3] Some setters may be called again before a tag handler is reused. For\ninstance, setParent() is called if it\u2019s reused within the same page but at a different level, setPageContext() is called if it\u2019s used in another page, and\nattribute setters are called if the values differ or are expressed as request-time attribute values.\n\nLabel [2] corresponds to the state transition caused by the execution of the doEndTag method, after the doStartTag method is execution. This implies that the doEndTag method should not be executed if the doStartTag method execution raises an exception.  Since the doEndTag method is not executed, the tag instance will not be in a proper state for the next execution of the doStartTag, implying that we should never reuse the tag instance if the doStartTag method raises an exception during its execution.", "bug_id": 60497, "attachment_id": null, "id": 195561, "time": "2016-12-19T12:55:11Z", "creator": "wklo@destinysolutions.com", "creation_time": "2016-12-19T12:55:11Z", "tags": [], "is_private": false}, {"count": 4, "text": "I didn't find anything that was very clear either, which is why I asked. I'd recommend you disable tag pooling for now, it's probably not that useful anymore.", "bug_id": 60497, "attachment_id": null, "id": 195562, "time": "2016-12-19T13:16:51Z", "creator": "remm@apache.org", "creation_time": "2016-12-19T13:16:51Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 60497, "attachment_id": null, "id": 195563, "time": "2016-12-19T13:37:06Z", "creator": "wklo@destinysolutions.com", "creation_time": "2016-12-19T13:37:06Z", "is_private": false, "text": "I think the JSP spec clearly states that we should not reuse a JSP tag instance if its doStartTag method execution raises an exception, as I explained in my previous comment.\n\nAlso, this is clearly a regression issue introduced by changset set 1754112 in Tomcat 8.5.5, which fortunately has not been ported back to the Tomcat 9.0 release branch.  I am hoping we can roll back this changeset in the Tomcat 8.5 release branch.\n\nFinally, JSP Custom Tag Pooling has been highlighted in the \"Jasper 2 JSP Engine How To\" section as a significant performance booster.\n\nJSP Custom Tag Pooling - The java objects instantiated for JSP Custom Tags can now be pooled and reused. This significantly boosts the performance of JSP pages which use custom tags.\n\nSince our application depends heavily on custom tags, I am just hesitant to simply turn off tag pooling with conducting some performance tests first. \nIn the meantime, I guess the only recourse is to compile my own Jasper engine."}, {"count": 6, "tags": [], "bug_id": 60497, "attachment_id": 34540, "id": 195576, "time": "2016-12-20T16:42:48Z", "creator": "remm@apache.org", "creation_time": "2016-12-20T16:42:48Z", "is_private": false, "text": "Created attachment 34540\nChange reuse logic\n\nI'm not convinced by the explanation. Adding some more complexity to the generated code if the issue is found to be legitimate. And for review too."}, {"count": 7, "tags": [], "creator": "wklo@destinysolutions.com", "attachment_id": 34543, "is_private": false, "id": 195586, "time": "2016-12-21T14:34:02Z", "bug_id": 60497, "creation_time": "2016-12-21T14:34:02Z", "text": "Created attachment 34543\nTest web application\n\nAttached is a self-contained web application that can be used to replicate the issue.\n\nAfter deploying the test.war file on a Tomcat Server of version 8.5.5 (or higher up to 8.5.9), access the following two URLs in sequence:\n\n1) http://localhost:8080/test/test/page1.jsp\nYou will receive a NullPointerException from page2.jsp as expected.\njava.lang.NullPointerException\n\torg.apache.jsp.test.page2_jsp._jspService(page2_jsp.java:151)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        ........................\n        \n\n2) http://localhost:8080/test/test/page1.jsp?childName=name\nInstead of the expected response shown below\n\nParent Name: Parent1 \nChild Name: name contains 4 characters\n\nyou will receive the following JspException:\njavax.servlet.jsp.JspException: No getter method for property: \"children\" of bean: \"form\"\n\torg.apache.struts.taglib.TagUtils.lookup(TagUtils.java:987)\n\torg.apache.struts.taglib.logic.IterateTag.doStartTag(IterateTag.java:232)\n\torg.apache.struts.taglib.nested.logic.NestedIterateTag.doStartTag(NestedIterateTag.java:73)\n\torg.apache.jsp.test.page2_jsp._jspService(page2_jsp.java:135)\n\torg.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        ..............\n\nThis is caused by the \"corrupted\" nested:iterate tag instance cached in the tag pool after processing the first URL."}, {"count": 8, "text": "Created attachment 34544\nReuse exclusion and try/finally for simple tags", "bug_id": 60497, "attachment_id": 34544, "id": 195592, "time": "2016-12-21T16:26:05Z", "creator": "remm@apache.org", "creation_time": "2016-12-21T16:26:05Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 60497, "attachment_id": null, "id": 195610, "time": "2016-12-22T13:22:15Z", "creator": "remm@apache.org", "creation_time": "2016-12-22T13:22:15Z", "is_private": false, "text": "I applied the patch and it will be included in 9M16, 8.5.10, 8.0.40, 7.0.74 and 6.0.49. It is possible the new behavior gets reintroduced in 8.5 and 9 after it is reviewed."}, {"count": 10, "tags": [], "bug_id": 60497, "attachment_id": null, "id": 199566, "time": "2017-07-05T07:44:40Z", "creator": "manmedia@gmail.com", "creation_time": "2017-07-05T07:44:40Z", "is_private": false, "text": "Hello,\n\nWe would like to go for TC 8.5.14 or 8.5.15. Will this patch be available there?"}]
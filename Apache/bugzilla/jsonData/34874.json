[{"count": 0, "tags": [], "bug_id": 34874, "is_private": false, "id": 74748, "attachment_id": null, "creator": "carnold@apache.org", "creation_time": "2005-05-11T22:30:51Z", "time": "2005-05-11T22:30:51Z", "text": "XMLLayout and HTMLLayout assume that the encoding of any associated writer is either UTF-8 or \nUTF-16.  If an encoding is not explicitly specified in the appender, the default platform encoding will be \nused which is highly unlikely to be UTF-8 or UTF-16 on Windows.  A mismatch in encoding will result in \nnon-wellformed XML documents if a non-US-ASCII character is emitted in the log.\n\nThe proposed resolution is to add a new interface\n\ninterface EncodingSensitiveLayout {\n    /*  @return encoding selected by layout  */ \n    String setEncoding(final String proposedEncoding);\n}\n\nto be implemented by XMLLayout and HTMLLayout.  In  the WriterAppender.activateOptions, if the \nlayout supported EncodingSensitiveLayout, it would be passed the proposed encoding and would have a \nchance to either modify its behavior to be consistent with that encoding or to override the choice of \nencoding."}, {"count": 1, "tags": [], "text": "Added a notice to the javadoc for XMLLayout and HTMLLayout to use UTF-8 or UTF-16 encoding or risk \ncorrupted documents (for log4j 1.2).  Will not fix in log4j 1.3.  log4j 2.0 will have a distinct support for \nbyte (as opposed to character) layouts, so should not be a problem for it.  The proposed solution was an \nattempt to work-around the lack of a direct byte layout mechanism. ", "is_private": false, "bug_id": 34874, "id": 106617, "time": "2007-08-10T15:19:50Z", "creator": "carnold@apache.org", "creation_time": "2007-08-10T15:19:50Z", "attachment_id": null}]
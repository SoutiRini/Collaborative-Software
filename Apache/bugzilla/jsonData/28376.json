[{"count": 0, "attachment_id": null, "creator": "turutani@scphys.kyoto-u.ac.jp", "text": "When apache server (2.0.49 on FreeBSD 4.9-STABLE) received the request \nof too-long-uri, the log file contains some extra characters after request.\nI cannot examine about all the cases with this kind of request, but fairly \na lot percentage of requests left this additonal characters.\n\nExample of access.log in combined format:\n211.187.40.249 - - [05/Apr/2004:10:58:00 +0900] \"SEARCH /\\x90\\x02\\xb1\\x02\\xb1\\x0\n2\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x02\\xb1\\x0\n(snip)\n0\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x9\n0\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x9\n0\\x90\\x90\\x90\\x90\\x90\\x90y-lang.org/\\\">Ruby</a> version 1.6.8</p>\\n</body>\\n</ht\n(rest abbrev.)\n                         ^^ <--after this might be wrong log !? \n\nI think, when a long request reaches ap_rgetline_core() in server/protocol.c, \nAPR_ENOSPC is returned, but no terminating by NUL nor other character is done \nin the case, while in other cases careful termination are done in this function.\n\nI tried by myself by sending ill request to my server, and found the same \nresult. It showed that, the request was recorded, but not the entire request, \nand instead, some extra characters which is not contained in the request sent \nwas recorded.", "id": 55750, "time": "2004-04-14T09:54:39Z", "bug_id": 28376, "creation_time": "2004-04-14T09:54:39Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "is_private": false, "id": 56594, "time": "2004-04-28T23:37:38Z", "bug_id": 28376, "creation_time": "2004-04-28T23:37:38Z", "text": "A fix is in apache 2.1-dev and proposed for merge into stable branch.  See\nhttp://cvs.apache.org/viewcvs.cgi/httpd-2.0/server/protocol.c?r1=1.147&r2=1.148\n"}, {"count": 2, "tags": [], "text": "Thank you for your fix.\nBut I think another fixs are necessary.\n\n--- protocol.c.orig     Fri May  7 15:37:03 2004\n+++ protocol.c  Fri May  7 15:37:47 2004\n@@ -249,7 +249,7 @@\n             }\n\n             /* Would this overrun our buffer?  If so, we'll die. */\n-            if (n < bytes_handled + len) {\n+            if (n <= bytes_handled + len) {\n                 *read = bytes_handled;\n                 if (*s) {\n                     /* ensure this string is terminated */\n@@ -387,7 +387,7 @@\n             if (c == APR_ASCII_BLANK || c == APR_ASCII_TAB) {\n                 /* Do we have enough space? We may be full now. */\n                 if (bytes_handled >= n) {\n-                    *read = n;\n+                    *read = n-1;\n                     /* ensure this string is terminated */\n                     (*s)[n-1] = '\\0';\n                     return APR_ENOSPC;\n--(end of diffs)--\nAbout previous patch, I think that in the first section the \"if-else\" section\nis not necessary if \"len\" is not negative.\n\nAnd I think, while additional string of \"HTTP/1.0\" is attatched to tail of the \nrequest field in the logfile if uri is too long and is truncated for logging,  \nit is not natural that there are no space between original request recoreded in \nlogfile and additional \"HTTP/1.0\". I propose to change \"HTTP/1.0\" to \" \nHTTP/1.0\" in line 604 of httpd-2.0/server/protocol.c rev1.148 (I do not know \nabout the side-effects by this change).", "is_private": false, "id": 56975, "creation_time": "2004-05-07T07:02:47Z", "time": "2004-05-07T07:02:47Z", "creator": "turutani@scphys.kyoto-u.ac.jp", "bug_id": 28376, "attachment_id": null}, {"count": 3, "tags": [], "text": "*** Bug 29425 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 28376, "id": 58844, "time": "2004-06-07T15:58:46Z", "creator": "jorton@redhat.com", "creation_time": "2004-06-07T15:58:46Z", "is_private": false}, {"count": 4, "tags": [], "text": "I'm running Apache 2.0.52 and I've been getting this problem quite a lot. It \nlooks more like random attempts to cause buffer overflows to me, as the \nrequests are coming from unexpected sources (not that many people know about my \nwebserver and I know when the ones that do connect). However I am using No-\nIP.com for dynamic DNS redirection.\n\nFrom what I could read in the bug activity it looks like this was meant to be \nfixed to stop a buffer overflow exploit, however I don't think it has been \nfixed.\nI am running Apache on Windows XP SP1 behind an ADSL router and I am also \nrunning a firewall, but I can't stop attacks like these. I am looking at moving \nmy server to a FreeBSD box, but I don't know if that will fix the problem.", "attachment_id": null, "bug_id": 28376, "id": 70676, "time": "2005-02-09T01:40:07Z", "creator": "Kublermdk@gmail.com", "creation_time": "2005-02-09T01:40:07Z", "is_private": false}, {"count": 5, "tags": [], "text": "This might be a good moment to mention bug 29449 once again. It provides a simple mechanism for \nadministrators to limit the log pollution resulting from long requests.", "attachment_id": null, "id": 70782, "creation_time": "2005-02-10T20:13:07Z", "time": "2005-02-10T20:13:07Z", "creator": "rici@ricilake.net", "bug_id": 28376, "is_private": false}, {"text": "The original bug was caused by forgetten NULL termination of the string,\nand the too-long-request was not essential.\nRestriction of request is a good idea, I think, but is a different problem.", "tags": [], "bug_id": 28376, "is_private": false, "count": 6, "id": 70815, "time": "2005-02-11T06:22:38Z", "creator": "turutani@scphys.kyoto-u.ac.jp", "creation_time": "2005-02-11T06:22:38Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "As per comments above this is fixed in current releases.\n\nI don't agree with either of the changes in comment 2:\n\n-            if (n < bytes_handled + len) {\n+            if (n <= bytes_handled + len) {\n\nthis means that exactly N bytes cannot be stored in the buffer, only N - 1; why\nis that necessary?\n\n-                    *read = n;\n+                    *read = n-1;\n                     /* ensure this string is terminated */\n                     (*s)[n-1] = '\\0';\n\nsince *read is suppoed to be set to the total length of the string *including*\nthe NUL terminator, that isn't correct either.\n\nI'm going to mark this closed and suggest opening new a new issue for a new bug.", "attachment_id": null, "bug_id": 28376, "id": 71484, "time": "2005-02-24T18:46:06Z", "creator": "jorton@redhat.com", "creation_time": "2005-02-24T18:46:06Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 45708, "attachment_id": null, "text": "I'm actually trying to setup a SSL reverse-proxy based on Apache 2.x / mod_ssl and it seems there's a bug in the verification of the CRL.\n\nIf a CA changes its keys before expiration, the CRL is now signed by the new key and include certificates issued by both the new and old keys. However, mod_ssl will refuse to work if the AKID (authority key identifier) of the proposed client certificate doesn't match the issuer of the CRL.\n\nBrowsing Apache archives, I found that somebody posted a patch covering this need (http://marc.info/?l=apache-httpd-dev&m=120350484626015), but the code haven't been merged. I tested it and it works perfectly well.\n\nDoes this patch seems OK to you ? If yes, is it possible to include it ?", "id": 120192, "time": "2008-08-28T15:11:03Z", "creator": "apache-bugs@nicob.net", "creation_time": "2008-08-28T15:11:03Z", "is_private": false}, {"count": 1, "tags": [], "text": "Confirm + additional info:\n- Bug bites as whenever there are 2 or more CRLs to check with the same subject hash (as given by openssl crl -in file.crl -noout -hash), independent of lifetime, keyid etc.\n- Bug depends on order of CRLs checked. If a client certificate is checked against a CRL that apache determined applicable for it (most likely by using the above hash mechanism and looking up accordingly-named files in SSLCARevocationPath), and if there are more such files, there are two possibilities:\na) The first file checked is by chance the one signed by the CA key that also signed the client cert: all OK, verification succeeds\nb) The first file checked is by chance signed by another key of the same CA (\"same CA\" meaning \"same subject hash\"): mod_ssl seems to compare the issuing key identifier (AKID) of client certificate and CRL, and if they don't match, reports the following errors:\n[warn] Invalid signature on CRL\n[error] Certificate Verification: Error (8): CRL signature failure.\n\nThis behaviour seems broken. Apparently, mod_ssl relies on the hash value only for determining which CRL file to use. This is not enough. In addition, it should compare the AKID of the client cert and the CRL and only use the CRL if they match. Thus, it could skip the \"wrong\" ones until the \"correct\" one (ie.: correct hash AND correkt AKID) is found. In case the information is not present in either one, mod_ssl should probably try to calculate the hash of the signing certificate's public key.\n\nThe \"first match wins\" algorithm is breaking a lot of CRL checking schemes at the moment, since nobody is able to check CRLs for CAs in process of renewing (rekeying) their CAs, which is a process to be expected about every 5 years in the case of average issuing CAs. With a list of (currently) around 120 CAs in the NSS CA store, this will lead to one of them being rolled over every 2 weeks approximately (24 per year for 5 years), creating a failure situation. The only remedy at the moment is to disable CRL checking for those CAs altogether - which is most likely not what is inteded.\nActually, I'm pretty confident that next to nobody is able to use CRL checking coherently because of this.\n\nPlease consider changing the CRL matching algorithm in mod_ssl.", "attachment_id": null, "id": 122551, "creation_time": "2008-11-17T04:38:45Z", "time": "2008-11-17T04:38:45Z", "creator": "public@wernig.net", "bug_id": 45708, "is_private": false}, {"count": 2, "tags": [], "bug_id": 45708, "is_private": false, "text": "*** Bug 45683 has been marked as a duplicate of this bug. ***", "id": 122553, "time": "2008-11-17T04:49:53Z", "creator": "public@wernig.net", "creation_time": "2008-11-17T04:49:53Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "Pavel@Janik.cz", "attachment_id": null, "id": 124304, "time": "2009-01-22T14:09:36Z", "bug_id": 45708, "creation_time": "2009-01-22T14:09:36Z", "is_private": false, "text": "raising priority.\n\n"}, {"count": 4, "tags": [], "creator": "fr.leroy@gmail.com", "attachment_id": null, "text": "UP\nnot yet solved ? \nCA rekeying fails with mod_ssl, should use AKI instead of Subjects...", "id": 133502, "time": "2010-01-11T08:00:10Z", "bug_id": 45708, "creation_time": "2010-01-11T08:00:10Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 45708, "text": "UP.\n\nIt's not possible to have two CRL with the same hash.\n\nThank's", "id": 133626, "time": "2010-01-15T06:17:48Z", "creator": "pierregeek@yahoo.fr", "creation_time": "2010-01-15T06:17:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "A patch was already proposed 2 years ago :\nhttp://marc.info/?l=apache-httpd-dev&m=120350484626015&w=2", "attachment_id": null, "id": 134004, "creation_time": "2010-01-28T15:18:39Z", "time": "2010-01-28T15:18:39Z", "creator": "apache@nicob.net", "bug_id": 45708, "is_private": false}, {"count": 7, "tags": [], "creator": "erwann.abalea@keynectis.com", "attachment_id": null, "id": 138227, "time": "2010-07-06T14:02:08Z", "bug_id": 45708, "creation_time": "2010-07-06T14:02:08Z", "is_private": false, "text": "(In reply to comment #4)\n> UP\n> not yet solved ? \n> CA rekeying fails with mod_ssl, should use AKI instead of Subjects...\n\nNo. AKI is not the good way to go.\nA certificate signed by an CA (with KeyID K1) will be revoked by the renewed CA, with a changed key (with KeyID K2). In that case, AKIs will be different. The only thing in common will be the IssuerName of both the user certificate and CRL. They must match in order to be considered issued by the same CA (for X.509, a CA is only a name, not a key).\n\nThe patch I provided 2 years ago solves this, and also some specific case where a CA has one key to sign certificates, and another one to sign CRLs. In that case, AKIs will also be different."}, {"count": 8, "tags": [], "text": "(In reply to comment #2)\n> *** Bug 45683 has been marked as a duplicate of this bug. ***\n\nThis is technically not really a duplicate of this bug. In this bug (#45863), the described situation doesn't conform to the X.509 standard if the 2 CRLs cover the whole set of certificates (i.e. if they're not partitioned, which actual mod_ssl code doesn't deal with).\n\nThe proposed patch will solve their error, by masking it, which is sub-optimal. It's OK if the 2 CRLs are \"full ones\" (not partitioned), and if they contain the same revocation information (i.e. the exact same list of revoked certificates).\nIf this is not the case, then this CA doesn't do its job correctly, which is not Apache/mod_ssl's fault.", "is_private": false, "bug_id": 45708, "id": 138228, "time": "2010-07-06T14:10:32Z", "creator": "erwann.abalea@keynectis.com", "creation_time": "2010-07-06T14:10:32Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "ettoreelio.caprella@telecomitalia.it", "attachment_id": 27749, "text": "Created attachment 27749\npatch for mod_ssl in order to support more than one crl issued by different CAs with the same subject", "id": 150399, "time": "2011-10-10T08:02:55Z", "bug_id": 45708, "creation_time": "2011-10-10T08:02:55Z", "is_private": false}, {"count": 10, "tags": [], "text": "Comment on attachment 27749\npatch for mod_ssl in order to support more than one crl issued by different CAs with the same subject\n\nIn my company we have a root certification authority with a subCA.\nThe PKI is based on Microsoft infrastructure (Certificate Service,\nActive Directory, etc).\nLast month, we have renewed (with new key pair) the subCA since in\n6 months it will expire and now  we have to manage two different\nCRLs: the first one is issued by the old subCA and the second is\nissued by the new subCA. Of course, the subject of the subCA is not\nchanged.\nWhen we revoke a certificate issued by the old subCA the first CRL is\nupdated and when we revoke a certificate issued by the new subCA the\nrelated CRL is updated.\nI don\u2019t know if it is the right behavior but it sounds reasonable,\nhowever it is the only behavior possible for the Microsoft services.\n\nWe have a lot of certificates issued with a high turnover (many\nrevocations) so it is important for us to check both the CRLs.\nFor this reason we have developed a patch starting from the patch\nprovided by Erwann that unfortunately does not fit with our scenario.\n\nFor that I described before, the usage of authority key identifier and\nsubject key identifier, during the CRL verification process, can be\nhelpful.\n\nSo, the idea behind the patch is this:\n1. Get authority key identifier (akid) from the current certificate\n2. Get subject key identifier (skid) from the current certificate\n3. For the CRL verification (first step), look for the CRL with the\n   CRL issuer equal to certificate subject and CRL akid equal to\n   certificate skid\n4. For the revocation check (second step), look for the CRL with the\n   CRL issuer equal to certificate issuer and CRL akid equal to\n   certificate akid", "attachment_id": 27749, "id": 150400, "creation_time": "2011-10-10T08:05:35Z", "time": "2011-10-10T08:05:35Z", "creator": "ettoreelio.caprella@telecomitalia.it", "bug_id": 45708, "is_private": false}, {"count": 11, "tags": [], "text": "(In reply to comment #10)\n> Comment on attachment 27749 [details]\n> patch for mod_ssl in order to support more than one crl issued by different CAs\n> with the same subject\n\nIf the subject is the same, then it's the same CA. A CA can have several certificates, separated by roles, or generation (renewed), but together they form only one CA, not several.\n\nPlease read X.509 (which can be freely downloaded). A CA is not a certificate, or a key, it's a *name*.\n\n> In my company we have a root certification authority with a subCA.\n> The PKI is based on Microsoft infrastructure (Certificate Service,\n> Active Directory, etc).\n> Last month, we have renewed (with new key pair) the subCA since in\n> 6 months it will expire and now  we have to manage two different\n> CRLs: the first one is issued by the old subCA and the second is\n> issued by the new subCA. Of course, the subject of the subCA is not\n> changed.\n> When we revoke a certificate issued by the old subCA the first CRL is\n> updated and when we revoke a certificate issued by the new subCA the\n> related CRL is updated.\n> I don\u2019t know if it is the right behavior but it sounds reasonable,\n> however it is the only behavior possible for the Microsoft services.\n\nThis is not conformant to X.509. The fact that this is the only possible behaviour from the Microsoft PKI doesn't make it valid.\nIn the absence of any critical extension in a CRL stating that this CRL is a partitioned one (the wording used in X.509 is \"full scope\" CRL), then this CRL provides a revocation status for *all the certificates signed by the issuer*. The AKI extension in the CRL is only a helper to find the correct key to validate the CRL' signature, it's *not* a CRL differenciator.\n\n[...]\n> For that I described before, the usage of authority key identifier and\n> subject key identifier, during the CRL verification process, can be\n> helpful.\n> \n> So, the idea behind the patch is this:\n> 1. Get authority key identifier (akid) from the current certificate\n> 2. Get subject key identifier (skid) from the current certificate\n\nSo SKID is the key identifier of the end-user certificate, right?\n\n> 3. For the CRL verification (first step), look for the CRL with the\n>    CRL issuer equal to certificate subject and CRL akid equal to\n>    certificate skid\n\nSo you're trying to find a CRL emitted by the issuer, but signed by the end-user key? That's wrong.\n\n> 4. For the revocation check (second step), look for the CRL with the\n>    CRL issuer equal to certificate issuer and CRL akid equal to\n>    certificate akid\n\nThis algorithm won't validate X.509 compliant PKIs, with renewed CAs (read  rekeyed if you want).", "attachment_id": null, "id": 150401, "creation_time": "2011-10-10T09:10:35Z", "time": "2011-10-10T09:10:35Z", "creator": "erwann.abalea@keynectis.com", "bug_id": 45708, "is_private": false}, {"count": 12, "tags": [], "text": "(In reply to comment #11)\n> [...]\n> \n> This is not conformant to X.509. The fact that this is the only possible\n> behaviour from the Microsoft PKI doesn't make it valid.\n> In the absence of any critical extension in a CRL stating that this CRL is a\n> partitioned one (the wording used in X.509 is \"full scope\" CRL), then this CRL\n> provides a revocation status for *all the certificates signed by the issuer*.\n> The AKI extension in the CRL is only a helper to find the correct key to\n> validate the CRL' signature, it's *not* a CRL differenciator.\n>\n\nOk, let's say the scope of the old CRL is \"all the certificates issued before xxx\" and the scope of the new CRL is \"all the certificates issued after xxx\".\n \n> [...]\n> > For that I described before, the usage of authority key identifier and\n> > subject key identifier, during the CRL verification process, can be\n> > helpful.\n> > \n> > So, the idea behind the patch is this:\n> > 1. Get authority key identifier (akid) from the current certificate\n> > 2. Get subject key identifier (skid) from the current certificate\n> \n> So SKID is the key identifier of the end-user certificate, right?\n\nNo, SKID is the key identifier of the current certificate during the loop of the chain verification, so it can be a CA or a subCA or an end-user certificate.\n\n> \n> > 3. For the CRL verification (first step), look for the CRL with the\n> >    CRL issuer equal to certificate subject and CRL akid equal to\n> >    certificate skid\n> \n> So you're trying to find a CRL emitted by the issuer, but signed by the\n> end-user key? That's wrong.\n> \n\nNo, the CRL verification process in mod_ssl is described in the ssl_callback_SSLVerify_CRL function.\nWe try to check the signature of a CRL in each step when we find a CRL\nthrough the _subject_ name of the current certificate and the skid (we use also the skid because we can have more than one CRL).\n\n\n> > 4. For the revocation check (second step), look for the CRL with the\n> >    CRL issuer equal to certificate issuer and CRL akid equal to\n> >    certificate akid\n> \n> This algorithm won't validate X.509 compliant PKIs, with renewed CAs (read \n> rekeyed if you want).\n\nI think the specification regarding CRL is too generic: to implement a general CRL verification system is rather difficult.\nFor example, my patch solves the problem for scoped CRL based on the time, your patch solves the problem for \"full scope\" CRL, but a lot of cases remain uncovered.", "attachment_id": null, "bug_id": 45708, "id": 150403, "time": "2011-10-10T10:26:31Z", "creator": "ettoreelio.caprella@telecomitalia.it", "creation_time": "2011-10-10T10:26:31Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 45708, "attachment_id": null, "text": "(In reply to comment #12)\n> (In reply to comment #11)\n> > [...]\n> > \n> > This is not conformant to X.509. The fact that this is the only possible\n> > behaviour from the Microsoft PKI doesn't make it valid.\n> > In the absence of any critical extension in a CRL stating that this CRL is a\n> > partitioned one (the wording used in X.509 is \"full scope\" CRL), then this CRL\n> > provides a revocation status for *all the certificates signed by the issuer*.\n> > The AKI extension in the CRL is only a helper to find the correct key to\n> > validate the CRL' signature, it's *not* a CRL differenciator.\n> \n> Ok, let's say the scope of the old CRL is \"all the certificates issued before\n> xxx\" and the scope of the new CRL is \"all the certificates issued after xxx\".\n\nI understand what you want. But you need to express it with a critical extension. Please read X.509 recommendation, chapter 8.5.2.5 (CRL scope extension). The need here is to avoid a CRL substitution attack.\n\n> > [...]\n> > > For that I described before, the usage of authority key identifier and\n> > > subject key identifier, during the CRL verification process, can be\n> > > helpful.\n> > > \n> > > So, the idea behind the patch is this:\n> > > 1. Get authority key identifier (akid) from the current certificate\n> > > 2. Get subject key identifier (skid) from the current certificate\n> > \n> > So SKID is the key identifier of the end-user certificate, right?\n> \n> No, SKID is the key identifier of the current certificate during the loop of\n> the chain verification, so it can be a CA or a subCA or an end-user\n> certificate.\n\nOk. I worked on it some time ago, and forgot about the 2 steps method.\n\n> > > 3. For the CRL verification (first step), look for the CRL with the\n> > >    CRL issuer equal to certificate subject and CRL akid equal to\n> > >    certificate skid\n> > \n> > So you're trying to find a CRL emitted by the issuer, but signed by the\n> > end-user key? That's wrong.\n> \n> No, the CRL verification process in mod_ssl is described in the\n> ssl_callback_SSLVerify_CRL function.\n> We try to check the signature of a CRL in each step when we find a CRL\n> through the _subject_ name of the current certificate and the skid (we use also\n> the skid because we can have more than one CRL).\n\nThe original process is already flawed, as it permits a CA to revoke itself. This is not permitted as per X.509.\nYour modification requires the CA to use the same key to sign the CRL as the one used to sign the certificate, which is not the case with roles separation: 1 certificate to sign certificates, 1 certificate to sign CRLs.\n\n> > > 4. For the revocation check (second step), look for the CRL with the\n> > >    CRL issuer equal to certificate issuer and CRL akid equal to\n> > >    certificate akid\n> > \n> > This algorithm won't validate X.509 compliant PKIs, with renewed CAs (read \n> > rekeyed if you want).\n> \n> I think the specification regarding CRL is too generic: to implement a general\n> CRL verification system is rather difficult.\n\nThe algorithm is well described in the X.509 recommendation, and is normative. mod_ssl already deviates from this algorithm. Your modification enhances this distance.\n\nIf your Microsoft PKI really does it like you described, then file a bug to them, they're clearly doing it wrong.\n\nIn the meantime, mod_ssl CRL verification needs to be radically changed, it doesn't check critical extensions, it doesn't follow the normative algorithm, it can't pass the NIST's PKITS. What should be done is to use internal OpenSSL CRL validation mechanism, which is correct.", "id": 150412, "time": "2011-10-10T12:59:22Z", "creator": "erwann.abalea@keynectis.com", "creation_time": "2011-10-10T12:59:22Z", "is_private": false}, {"count": 14, "tags": [], "text": "(In reply to comment #13)\n> In the meantime, mod_ssl CRL verification needs to be radically changed, it\n> doesn't check critical extensions, it doesn't follow the normative algorithm,\n> it can't pass the NIST's PKITS. What should be done is to use internal OpenSSL\n> CRL validation mechanism, which is correct.\n\nThat's what has been done in r1165056 recently, so I'm tempted to add the FixedInTrunk keyword to this bug.\n\nIt will first appear in 2.3.15-beta (to be released later this month, hopefully); tests with a current checkout of trunk are very welcome, of course. For best results, mod_ssl should be compiled against OpenSSL 1.0.0e or later, since a considerable number of CRL processing enhancements are only available in 1.0.0.\n\n(In reply to comment #0)\n> Browsing Apache archives, I found that somebody posted a patch covering this\n> need (http://marc.info/?l=apache-httpd-dev&m=120350484626015), but the code\n> haven't been merged. I tested it and it works perfectly well.\n\nFor the records: in Apache's own list archive, it's\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200802.mbox/%3C20080220105329.GE24122@keynectis.com%3E", "attachment_id": null, "id": 150452, "creation_time": "2011-10-11T05:12:31Z", "time": "2011-10-11T05:12:31Z", "creator": "asfbugz@velox.ch", "bug_id": 45708, "is_private": false}, {"count": 15, "tags": [], "bug_id": 45708, "text": "(In reply to comment #14)\n> (In reply to comment #13)\n> > In the meantime, mod_ssl CRL verification needs to be radically changed, it\n> > doesn't check critical extensions, it doesn't follow the normative algorithm,\n> > it can't pass the NIST's PKITS. What should be done is to use internal OpenSSL\n> > CRL validation mechanism, which is correct.\n> \n> That's what has been done in r1165056 recently, so I'm tempted to add the\n> FixedInTrunk keyword to this bug.\n\nNice information. I'm browsing the SVN tree to look at the changes. I'm glad someone took the time for this.\n\n> It will first appear in 2.3.15-beta (to be released later this month,\n> hopefully); tests with a current checkout of trunk are very welcome, of course.\n\nI'll do some tests, with role separated CAs, and rekeyed CAs.\n\n> (In reply to comment #0)\n> > Browsing Apache archives, I found that somebody posted a patch covering this\n> > need (http://marc.info/?l=apache-httpd-dev&m=120350484626015), but the code\n> > haven't been merged. I tested it and it works perfectly well.\n> \n> For the records: in Apache's own list archive, it's\n> http://mail-archives.apache.org/mod_mbox/httpd-dev/200802.mbox/%3C20080220105329.GE24122@keynectis.com%3E\n\nI did receive some useful comments on this patch, but I don't remember who wrote them (cold got me). Basically, it was about using OpenSSL's own CRL validation code instead of mod_ssl legacy one, which does a really bad job.", "id": 150460, "time": "2011-10-11T10:37:38Z", "creator": "erwann.abalea@keynectis.com", "creation_time": "2011-10-11T10:37:38Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "ettoreelio.caprella@telecomitalia.it", "attachment_id": null, "id": 150667, "time": "2011-10-17T15:51:08Z", "bug_id": 45708, "creation_time": "2011-10-17T15:51:08Z", "is_private": false, "text": "I tested the trunk version against my scenario:\n- 1 CA with two different key pairs due the renewal,\n- 2 CRLs issued by the same CA but signed with the two different keys,\n- no critical extensions in the CRLs in order to define the scope,\n- certificates issued by CA and signed with the CA old key are revoked using the CRL signed by the CA old key,\n- certificates issued by CA and signed with the CA new key are revoked using the CRL signed by the CA new key.\n\nEverything works fine:\n- valid certificates issued by the CA using CA old key pass the validation\n- valid certificates issued by the CA using CA new key pass the validation\n- revoked certificates issued by the CA using CA old key and listed in the relative CRL do not pass the validation\n- revoked certificates issued by the CA using CA new key and listed in the relative CRL do not pass the validation\n\nWorks for me."}, {"count": 17, "tags": [], "bug_id": 45708, "attachment_id": null, "text": "Thanks for your testing. Adding the FixedInTrunk keyword, therefore.\n\nNote that 2.3.15-beta has been released in the meantime (http://httpd.apache.org/download.cgi#apache23), so for those who want to do additional tests, there's no longer a need to check out things from svn.", "id": 151663, "time": "2011-11-20T10:53:58Z", "creator": "asfbugz@velox.ch", "creation_time": "2011-11-20T10:53:58Z", "is_private": false}, {"count": 18, "tags": [], "creator": "sf@sfritsch.de", "attachment_id": null, "id": 154206, "time": "2012-02-26T16:49:10Z", "bug_id": 45708, "creation_time": "2012-02-26T16:49:10Z", "is_private": false, "text": "2.4.1 is released, closing"}]
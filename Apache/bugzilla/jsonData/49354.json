[{"attachment_id": null, "tags": [], "bug_id": 49354, "is_private": false, "count": 0, "id": 137187, "time": "2010-05-28T10:33:59Z", "creator": "myles.bunbury@alcatel-lucent.com", "creation_time": "2010-05-28T10:33:59Z", "text": "XMLLayout does not appear to escape or scrub the log message to deal with illegal characters. This can result in invalid XML output by log4j, which in turn can cause XML parsers downstream to blow up.\n\nA corner case we encountered while using log4j v1.2.15 produced the attached XML output. The message, which usually has normal text, ended up having some illegal XML characters in it. Stylus Studio reports the error on line 2, column 119 as follows:\n  FATAL ERROR: Invalid character (Unicode: 0x15)\n\nThis character is indeed illegal in XML, as per:\nhttp://www.xml.com/axml/target.html#sec-cdata-sect\n\nA nice summary can be found here:\nhttp://www.coderanch.com/t/124970/XML/Invalid-Character-inside-CDATA\n\nXMLLayout should ensure that what it write is legal XML, either by escaping illegal characters, removing them, or replacing them."}, {"count": 1, "tags": [], "bug_id": 49354, "attachment_id": 25492, "is_private": false, "id": 137188, "time": "2010-05-28T10:37:29Z", "creator": "myles.bunbury@alcatel-lucent.com", "creation_time": "2010-05-28T10:37:29Z", "text": "Created attachment 25492\nLog4j XML output containing illegal characters"}, {"count": 2, "tags": [], "text": "(In reply to comment #0)\n> XMLLayout should ensure that what it write is legal XML, either by escaping\n> illegal characters, removing them, or replacing them.\n\nSince many applications probably know in advance that their logging output is XML safe, perhaps creating a 'SafeXMLLayout' subclass would be a good solution such that people can choose safety or performance based on their requirements.", "attachment_id": null, "id": 138276, "creator": "myles.bunbury@alcatel-lucent.com", "time": "2010-07-08T11:17:48Z", "bug_id": 49354, "creation_time": "2010-07-08T11:17:48Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 49354, "is_private": false, "count": 3, "id": 138296, "time": "2010-07-08T22:45:18Z", "creator": "carnold@apache.org", "creation_time": "2010-07-08T22:45:18Z", "text": "The XSLTLayout in the extras companion should be immune to these types of problems since it uses the serializer in the JDK's XSLT processor.  Unless a transform is provided, it will just output the \"raw\" form that should be compatible with XMLLayout.  I have not done any performance benchmarking around it to compare it with XMLLayout."}, {"attachment_id": null, "tags": [], "bug_id": 49354, "is_private": false, "count": 4, "id": 170580, "time": "2013-10-11T23:58:59Z", "creator": "mat.gessel@gmail.com", "creation_time": "2013-10-11T23:58:59Z", "text": "I have run into this a few times logging errors that occur authenticating via JNDI against an ActiveDirectory server. Either JNDI or AD returns an error message that is terminated with a NUL (0x00) character. The NUL char is illegal in a CDATA section (or anywhere in an XML document for that matter). \n\nI have represented the NUL char as <<NUL>> below. \n\n<log4j:event logger=\"com.co.authn.LDAPAuthenticator\" timestamp=\"1349723665747\" level=\"INFO\" thread=\"http-8443-57\">\n<log4j:message>\n<![CDATA[authenticate(user: bob, domain: foo.com): failed with javax.naming.AuthenticationException message [LDAP: error code 49 - 80090308: LdapErr: DSID-0C0903AA, comment: AcceptSecurityContext error, data 525, v1772<<NUL>>]]]>\n</log4j:message>\n</log4j:event>\n\nLooks like the place to do the escaping is org.apache.log4j.helpers.Transform.appendEscapingCDATA()."}]
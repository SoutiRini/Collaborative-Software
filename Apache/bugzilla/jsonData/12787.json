[{"count": 0, "attachment_id": null, "bug_id": 12787, "is_private": false, "id": 23065, "time": "2002-09-18T20:35:21Z", "creator": "craigl@begeek.com", "creation_time": "2002-09-18T20:35:21Z", "tags": [], "text": "if a tag that implements BodyTagSupport retuns EVAL_PAGE_INCLUDE from its\ndoStartTag() method, and then it contains a tag that performs a\npageContext.include() call that invokes a servlet, most of the calls to the\nrequest object methods produce bogus results.  for eg. getRequestURI() will\nreturn what looks like a fragment of the webpage being processed.  subsequent\ncalls to import (either via a custom tag doing pageRequest.include() or jstl\ntags like c:import) will also fail.  if, however, EVAL_BODY_TAG (deprecated) or\nEVAL_BODY_BUFFERED are returned from doStartTag(), everything works as expected."}, {"count": 1, "tags": [], "creator": "craigl@begeek.com", "text": "Created attachment 3123\ntest case for this bug, this only uses custom tags and should be able to run without anything else.", "id": 23066, "time": "2002-09-18T20:39:21Z", "bug_id": 12787, "creation_time": "2002-09-18T20:39:21Z", "is_private": false, "attachment_id": 3123}, {"count": 2, "tags": [], "creator": "tmoore@blackboard.com", "text": "I believe I have found the cause of this bug.  It is related to the MsgAjp \nclass in the JK server.  So this bug probably only appears when using an AJP \nconnection to Tomcat.\n\nFirst of all, it does not only occur when using tag extensions.  Any time the \npage is flushed before request.getRequestURI is called, you will see this bug.  \nI am attaching a very minimal JSP that demonstrates this problem.  Call it \nnormally, and the request URI is fine.  Call it with a \"flush\" request \nparameter, and the request URI has been changed to a fragment of the filler \ntext at the top of the file.\n\nIf you pop open the source for org.apache.jk.common.HandlerRequest (I'm working \nwith Tomcat 4.1.12) and go to line 433, you can see where the request URI is \ninitially set, using the msg.getBytes method.  On MsgAjp, however, the getBytes\n(MessageBytes) method does NOT clone it's buffer, it simply gives the \nMessageBytes object a reference to the buffer.  That buffer is then reused when \nflushing the output stream, causing this problem.", "id": 27094, "time": "2002-11-27T23:19:55Z", "bug_id": 12787, "creation_time": "2002-11-27T23:19:55Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 12787, "attachment_id": 3977, "text": "Created attachment 3977\nA JSP that demonstrates this bug", "id": 27095, "time": "2002-11-27T23:21:42Z", "creator": "tmoore@blackboard.com", "creation_time": "2002-11-27T23:21:42Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 12787, "text": "Fixed in 4.1.14+", "id": 27275, "attachment_id": null, "creator": "william.barker@wilshire.com", "creation_time": "2002-12-02T19:44:10Z", "time": "2002-12-02T19:44:10Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 53080, "is_private": false, "text": "http://httpd.apache.org/docs/trunk/en/rewrite/intro.html#rewriterule contains:\n\nThe Pattern is always a regular expression matched against the URL-Path of the incoming request (the part after the hostname but before any question mark indicating the beginning of a query string) or, in per-directory context, against the request's path relative to the directory for which the rule is defined.\n\nThis is correct for the first RewriteRule, but not necessarily for the following rules. As explained in http://httpd.apache.org/docs/trunk/en/mod/mod_rewrite.html#rewriterule :\nOn the first RewriteRule, it is matched against the (%-decoded) URL-path (or file-path, depending on the context) of the request. Subsequent patterns are matched against the output of the last matching RewriteRule.\n\nI suggest this formulation instead:\n\nPattern is a regular expression. It is initially (for the first rewrite rule) matched against the URL-path of the incoming request (the part after the hostname but before any question mark indicating the beginning of a query string) or, in per-directory context, against the request's path relative to the directory for which the rule is defined.\n\nThis doesn't specify what happens after the first rewrite rule, so it's incomplete, but it's just an introduction, so I think it's fine as long as it's not misleading.", "id": 158040, "time": "2012-04-13T17:06:12Z", "creator": "chealer@gmail.com", "creation_time": "2012-04-13T17:06:12Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "humbedooh@apache.org", "attachment_id": null, "id": 158699, "time": "2012-05-01T09:45:56Z", "bug_id": 53080, "creation_time": "2012-05-01T09:45:56Z", "is_private": false, "text": "I have applied your suggestion and added a note that the URL-path of the incoming request is matched in the first rewriterule or until a substitution takes place, and that rules that follow are matched against the substituted value instead.\n\nDo give it a read-through and tell me what you think of this new wording."}, {"count": 2, "tags": [], "bug_id": 53080, "is_private": false, "id": 158793, "creation_time": "2012-05-03T18:56:30Z", "time": "2012-05-03T18:56:30Z", "creator": "chealer@gmail.com", "text": "Thank you Daniel. The paragraph now contains:\n\nfor the first rewrite rule or until a substitution occurs\n\nIt would be slightly clearer to have:\n\nfor the first rewrite rule and until a substitution occurs\n\nAlso, in \"Once a substitution has occured, the rules that follow are matched against the substituted value.\", \"the substituted value\" is confusing since there can be several. Replacing \"substituted value\" with \"last substitution\" would clarify.", "attachment_id": null}, {"count": 3, "tags": [], "creator": "kyanha@kyanha.net", "is_private": false, "text": "So, basically, what I'm reading is that RewriteRule is most like Perl's $_ scalar.\n\n\"Once a substitution has occured, the rules that follow are matched against the substituted value.\"\n\nI propose:\n\nOnce a substitution has occurred in the value, the rules that follow are matched against the value as it exists after the substitution has taken place.", "id": 158795, "time": "2012-05-03T21:02:17Z", "bug_id": 53080, "creation_time": "2012-05-03T21:02:17Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 53080, "is_private": false, "id": 158796, "creation_time": "2012-05-03T21:05:48Z", "time": "2012-05-03T21:05:48Z", "creator": "covener@gmail.com", "text": "(In reply to comment #3)\n> So, basically, what I'm reading is that RewriteRule is most like Perl's $_\n> scalar.\n> \n> \"Once a substitution has occured, the rules that follow are matched against\n> the substituted value.\"\n> \n> I propose:\n> \n> Once a substitution has occurred in the value, the rules that follow are\n> matched against the value as it exists after the substitution has taken\n> place.\n\nI think this is a step backwards", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "kyanha@kyanha.net", "text": "(In reply to comment #4)\n> (In reply to comment #3)\n> > So, basically, what I'm reading is that RewriteRule is most like Perl's $_\n> > scalar.\n> > \n> > \"Once a substitution has occured, the rules that follow are matched against\n> > the substituted value.\"\n> > \n> > I propose:\n> > \n> > Once a substitution has occurred in the value, the rules that follow are\n> > matched against the value as it exists after the substitution has taken\n> > place.\n> \n> I think this is a step backwards\n\nWhy?\n\nHow about:\n\nAll mod_rewrite rules match against and destructively transform a single value.  The value after a given transformation is the value seen and matched against by the next rule in the chain.", "count": 5, "id": 158798, "time": "2012-05-04T00:18:01Z", "bug_id": 53080, "creation_time": "2012-05-04T00:18:01Z", "is_private": false}, {"count": 6, "attachment_id": null, "creator": "chealer@gmail.com", "text": "Hi Kyle,\nI can't speak for Eric, but I find this part unclear:\n\nthe value as it exists after the substitution has taken place\n\nA reader may wonder \"The value of what?\".\n\nAs for your second suggestion, I'm not sure what you're proposing exactly (how that sentence would integrate in the rest of the section), but I have no idea of what \"destructively transform\" would mean.", "id": 158801, "time": "2012-05-04T02:29:37Z", "bug_id": 53080, "creation_time": "2012-05-04T02:29:37Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 53080, "attachment_id": null, "id": 158814, "time": "2012-05-04T11:19:42Z", "creator": "rbowen@apache.org", "creation_time": "2012-05-04T11:19:42Z", "is_private": false, "text": "Are we trying to say something like\n\nEach rule encountered modifies the value of the required uri as you go along. So each rule gets the modified value from any previous rule.\n\nIt appears that as we try to get more technically accurate we become less clear. doesn't feel like progress to me."}, {"count": 8, "tags": [], "bug_id": 53080, "attachment_id": null, "id": 158833, "time": "2012-05-04T20:10:33Z", "creator": "kyanha@kyanha.net", "creation_time": "2012-05-04T20:10:33Z", "is_private": false, "text": "(In reply to comment #7)\n> Are we trying to say something like\n> \n> Each rule encountered modifies the value of the required uri as you go\n> along. So each rule gets the modified value from any previous rule.\n> \n> It appears that as we try to get more technically accurate we become less\n> clear. doesn't feel like progress to me.\n\nIn each rule, there is a pattern, a substitution, and optionally a set of flags.\n\nThe first rule's input is the URI requested by the client.  For each rule, when the pattern does not match, that rule's output is its unaltered input.  When it matches, the substitution/flags are applied and the substituted string is the rule's output.  The output of the prior rule is the input to the next.  When the rule is the final rule in the chain, its output is the final rewritten URI or URL that httpd processes.  There are flags which can tell httpd not to process any rules following the flagged rule."}, {"count": 9, "tags": [], "bug_id": 53080, "text": "Guys, this ticket is marked as closed. If it's closed, please move on. If it's not fixed yet, please either reopen it, or, preferably, open a new one with a clearer statement of what problem it is that we're trying to solve. It is no longer at all clear what problem we're chasing.\n\nThanks.", "id": 158834, "time": "2012-05-04T20:20:45Z", "creator": "rbowen@apache.org", "creation_time": "2012-05-04T20:20:45Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 53080, "is_private": false, "id": 158848, "creation_time": "2012-05-05T15:20:12Z", "time": "2012-05-05T15:20:12Z", "creator": "chealer@gmail.com", "text": "Regarding \"The output of the prior rule is the input to the next.\", there may be several prior rules. And the \"output\" of any prior rule does not necessarily exist, if no prior rule ran.", "attachment_id": null}]
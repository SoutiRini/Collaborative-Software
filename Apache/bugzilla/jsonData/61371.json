[{"count": 0, "tags": [], "text": "Created attachment 35196\nFile which causes heap memory out\n\nAn .xlsx file has only one cell filled but all other cells are hidden. When tried to read the file using \" workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook(in);\" this throws an Heap memory full exception.", "is_private": false, "bug_id": 61371, "id": 200144, "time": "2017-08-02T11:08:05Z", "creator": "lakshminathanlaky@gmail.com", "creation_time": "2017-08-02T11:08:05Z", "attachment_id": 35196}, {"count": 1, "tags": [], "text": "How big a heap did you give to Apache POI? Most JVM default heaps are way way too small these days", "attachment_id": null, "bug_id": 61371, "id": 200145, "time": "2017-08-02T11:24:45Z", "creator": "apache@gagravarr.org", "creation_time": "2017-08-02T11:24:45Z", "is_private": false}, {"count": 2, "tags": [], "creator": "lakshminathanlaky@gmail.com", "attachment_id": null, "text": "The file size as you can see from the attachment is just 9Kb . It has only one cell with data. But since there are 2^20 hidden cells Apache POI allocates more heap space causing heap space full exception. I think this can be handled only by Apache POI because file size is the only information we get even before reading the file.", "id": 200146, "time": "2017-08-02T11:33:09Z", "bug_id": 61371, "creation_time": "2017-08-02T11:33:09Z", "is_private": false}, {"count": 3, "tags": [], "creator": "fanningpj@yahoo.com", "attachment_id": null, "is_private": false, "id": 200155, "time": "2017-08-02T18:42:40Z", "bug_id": 61371, "creation_time": "2017-08-02T18:42:40Z", "text": "The XSSF model loads all the data in the xlsx file, even if it is hidden, The XSSF cell interface will let you know which cells are hidden and which are not.\nIn theory, the XSSF workbook code where we load the xlsx data could have an option to ignore hidden cells or hidden sheets. This would be an enhancement and I'm not sure how useful this feature is.\nYou could also try the XSSFReader which let's you read the xlsx file in a streaming way."}, {"count": 4, "tags": [], "creator": "gwoolsey@apache.org", "text": "To clarify:\n\n1. even empty hidden cells are still cells, and as such require object allocations when read using the XSSFWorkbook API.  no space is allocated if they are truly missing from the workbook - not even defined in the OOXML file.\n\n2. OOXML files are ZIP packages containing mostly XML files.  Cells defined but empty compress extremely well, so a 9k file can actually unzip to hundreds of megabytes.  Unzip your sample file and see just how big it really is.  This will give you a good rough start for estimating the heap space required to read it using the XSSFWorkbook API.  I'd say double the unzipped size as a good first guess.\n\nIf the result turns out to be too big for the available heap, try using the streaming API as mentioned by PJ Fanning in comment 3.", "id": 200158, "attachment_id": null, "bug_id": 61371, "creation_time": "2017-08-02T18:59:39Z", "time": "2017-08-02T18:59:39Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 61371, "text": "The attached workbook, attachment 35196, is actually quite small uncompressed and doesn't describe many cells.\n\nxl/worksheets/sheet1.xml:\n<cols>\n  <col min=\"1\" max=\"1\" width=\"9.140625\" customWidth=\"1\"/>\n  <col min=\"2\" max=\"16384\" width=\"9.140625\" hidden=\"1\"/>\n</cols>\n<sheetData>\n  <row r=\"1\" spans=\"1:1\" x14ac:dyDescent=\"0.25\">\n    <c r=\"A1\" t=\"s\">\n      <v>0</v>\n    </c>\n  </row>\n</sheetData>\n\nsheet2 and 3 are even smaller.\n\nThe entire file expands to 28 KB on disk, and I didn't see anything suspicious in sharedStrings or elsewhere that would cause this workbook to misbehave.\n\nLakshminathan, please verify whether you're able to read https://svn.apache.org/repos/asf/poi/trunk/test-data/spreadsheet/SampleSS.xlsx in your application.\n\nWhich JVM are you using and what is your max heap size?\nWhat version of POI are you using?\nIs there anything else in your application that could be consuming a substantial part of the heap?", "id": 200170, "time": "2017-08-03T09:09:29Z", "creator": "onealj@apache.org", "creation_time": "2017-08-03T09:09:29Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "lakshminathanlaky@gmail.com", "attachment_id": null, "is_private": false, "id": 200174, "time": "2017-08-03T19:41:32Z", "bug_id": 61371, "creation_time": "2017-08-03T19:41:32Z", "text": "@Team, Thank you for the response. Please find below the requested information\n\nhttps://docs.google.com/document/d/1Lf1FEeQDillIrT4fTz-u9nKiUp7s9_60RwTrEApZ4jk/edit?usp=sharing"}, {"count": 7, "tags": [], "bug_id": 61371, "text": "(In reply to Javen O'Neal from comment #5)\n> Lakshminathan, please verify whether you're able to read\n> https://svn.apache.org/repos/asf/poi/trunk/test-data/spreadsheet/SampleSS.\n> xlsx in your application.\n> \n> Which JVM are you using and what is your max heap size?\n> What version of POI are you using?\n> Is there anything else in your application that could be consuming a\n> substantial part of the heap?", "id": 200179, "time": "2017-08-03T20:14:47Z", "creator": "onealj@apache.org", "creation_time": "2017-08-03T20:14:47Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "onealj@apache.org", "is_private": false, "id": 200180, "attachment_id": null, "bug_id": 61371, "creation_time": "2017-08-03T20:17:44Z", "time": "2017-08-03T20:17:44Z", "text": "Please add supporting information as a comment or an attachment. External dependencies may break or be inaccessible to some users."}, {"count": 9, "tags": [], "bug_id": 61371, "text": "Created attachment 35199\nInformation about the bug\n\n> Lakshminathan, please verify whether you're able to read\n> https://svn.apache.org/repos/asf/poi/trunk/test-data/spreadsheet/SampleSS.\n> xlsx in your application. - yes,its working\n> \n> Which JVM are you using and what is your max heap size? details attached\n> What version of POI are you using?3.16\n> Is there anything else in your application that could be consuming a\n> substantial part of the heap? No\n\nFurther details attached.", "id": 200182, "time": "2017-08-03T20:25:34Z", "creator": "lakshminathanlaky@gmail.com", "creation_time": "2017-08-03T20:25:34Z", "is_private": false, "attachment_id": 35199}, {"count": 10, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "attachment 35199 references a different file that was uploaded to Google Sheets which is 2.75 MB instead of 8 KB in size.\nUnzipping the 2.75 MB file expands to 27.9 MB (90% compression ratio is typical for workbooks that do not contain embedded objects).\nxl/worksheets/sheet1.xml is 27.9 MB (leaving a few KB for the rest of the extracted files).\n\nInspecting the XML, I see that the workbook defines 1 cell at A1 and 1 million rows:\n<sheetFormatPr defaultColWidth=\"0\" defaultRowHeight=\"15\" zeroHeight=\"1\"/>\n<cols>\n  <col min=\"1\" max=\"1\" width=\"9.140625\" customWidth=\"1\"/>\n  <col min=\"2\" max=\"16384\" width=\"9.140625\" hidden=\"1\"/>\n</cols>\n<sheetData>\n  <row r=\"1\" spans=\"1:1\">\n    <c r=\"A1\" t=\"s\"><v>0</v></c>\n  </row>\n  <row r=\"2\" spans=\"1:1\" hidden=\"1\"/>\n  <row r=\"3\" spans=\"1:1\" hidden=\"1\"/>\n  ...\n  <row r=\"16\" spans=\"1:1\" hidden=\"1\"/>\n  <row r=\"17\" hidden=\"1\"/>\n  ...\n  <row r=\"1048556\" hidden=\"1\"/>\n  <row r=\"1048557\" hidden=\"1\"/>\n</sheetData>\n\nPOI uses a TreeMap<int rowNumber, XSSFRow row> to store these rows for fast random and sequential access, at the cost of some memory. Oracle Java 8 docs state that it implements TreeMap using a self-balancing pointer-based red-black tree. This should be fine.\n\nTo test that your JVM can handle 1 million items in a TreeMap, do something like the following:\nprivate static final Random rand = new Random();\n\nprivate Object createFakeRow(int nbytes) {\n    byte[] row = new byte[nbytes];\n    rand.nextBytes(row);\n    return row;\n}\n\nSortedMap<Integer, Object> rows = new TreeMap<>();\nfor (int r=1; r<=1048557; r++) {\n    // create an object that consumes 10 KB of RAM in place of a real XSSFRow\n    rows.put(i, createFakeRow(10*1024));\n}\n\nIf that works without issue, then the next focus is on what XMLBeans is doing as it's reading Sheet1.xml.\nYou could look at how POI unzips the file into memory and reads each XML file into an XML DOM using XMLBeans and how much extra memory is consumed by the CT classes.\nBefore we blame XMLBeans, we'd have to fairly compare it with JAXB.\n  \nHere's a Google Drive link to this file since the file exceeds the file size limit of bugzilla: https://drive.google.com/file/d/0B2v9cndcBwIWeURpNXVrSjJYbDg/view\n\nBased on your reported 9 GB of RAM, the amortized size of each XSSFRow would be roughly 10 KB.\n\nTo make sure this really isn't a bug in POI's handling of hidden rows or columns, we'd need to test for OOM on a workbook with the same number of rows defined but all of them visible.\n\nI think you have enough ideas here to try to figure out where the problem is, which is needed before a potential fix can be written.", "id": 200187, "time": "2017-08-04T08:31:52Z", "bug_id": 61371, "creation_time": "2017-08-04T08:31:52Z", "is_private": false}, {"count": 11, "tags": [], "creator": "dominik.stadler@gmx.at", "attachment_id": null, "is_private": false, "id": 202990, "time": "2018-01-01T08:50:30Z", "bug_id": 61371, "creation_time": "2018-01-01T08:50:30Z", "text": "There was no indication of an actual \"bug\" in Apache POI, memory usage for a file with 1 million rows is expected to be considerable, so unless there is more evidence of too much memory usage, we are resolving this issue, please reopen with more information if you still think there is something wrong in Apache POI itself."}]
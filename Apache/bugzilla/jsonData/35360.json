[{"count": 0, "attachment_id": null, "creator": "joerg@domaschka.org", "is_private": false, "id": 76397, "time": "2005-06-14T14:47:50Z", "bug_id": 35360, "creation_time": "2005-06-14T14:47:50Z", "tags": [], "text": "when having a new project\n<project name=\"xy\" basedir=\".\">...</project>\nthe basedir representation does not take care of spaces in the current \ndirectory. this may become critical, if basedir is a parameter to a task \n(includepath for a preprocessor in my case). Instead of taking the entire \nbasedir the called task takes the first part of basedir as the parameter. What \nhappens to the second part (after the blank) is task dependent.\n\non sun solaris the situation is the same; thus I thik this behaviour is Java \ndependent. Ant uses java.io.File to change basedir to a string. File doesn't \nseem to take care of blanks in the name.\n\nSo perhaps it would make sense to extend java.io.File by a file implementation \nhas it's own toString or whatever method"}, {"count": 1, "tags": [], "bug_id": 35360, "is_private": false, "text": "You need to provide an example that realizes the danger you have proposed.", "id": 76401, "time": "2005-06-14T15:53:12Z", "creator": "mbenson@apache.org", "creation_time": "2005-06-14T15:53:12Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 35360, "is_private": false, "id": 78481, "time": "2005-08-14T13:37:09Z", "creator": "joerg@domaschka.org", "creation_time": "2005-08-14T13:37:09Z", "tags": [], "text": "OK, here's an example:\no 1) create a directory, that contains spaces: mkdir \"my dir\"\no 2) create a simple java-file (and compile it):\npackage test;\n\npublic class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < args.length; i++) System.out.println(args[i]);\n    }\n}\n\no 3) create the build.xml file in this directory. let the file look this way:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project basedir=\".\" default=\"all\">\n<property name=\"args\" value=\"${basedir}/foofile ${basedir}/barfile\" />\n<target name=\"all\">\n<java fork=\"yes\" classname=\"test.Main\" classpath=\".\">\n\t<arg line=\"${args}\"/>\n\t<arg value=\"${args}\"/>\n</java>\n</target>\n</project>\n\no 4) run ant\no 5) assume the java program to do something reasonable with the input; neither \nof both ways of passing the arguments produces the expected (and needed) output."}, {"count": 3, "attachment_id": null, "bug_id": 35360, "is_private": false, "id": 78484, "time": "2005-08-14T20:20:33Z", "creator": "phil.weighill-smith@volantis.com", "creation_time": "2005-08-14T20:20:33Z", "tags": [], "text": "(In reply to comment #2)\n> <property name=\"args\" value=\"${basedir}/foofile ${basedir}/barfile\" />\n> <java fork=\"yes\" classname=\"test.Main\" classpath=\".\">\n> \t<arg line=\"${args}\"/>\n> \t<arg value=\"${args}\"/>\n> </java>\n\nWhat you actually need to do is:\n\n<property name=\"first-arg\" value=\"${basedir}/foofile\"/>\n<property name=\"second-arg\" value=\"${basedir}/barfile\"/>\n<java fork=\"yes\" classname=\"test.Main\" classpath=\".\">\n    <arg value=\"${first-arg}\"/>\n    <arg value=\"${second-arg}\"/>\n</java>\n\nI believe that this is pretty well documented in \nhttp://ant.apache.org/manual/using.html#arg."}, {"count": 4, "tags": [], "bug_id": 35360, "is_private": false, "text": "o what, if the combination occures not only once? (assume they are semantically \nlinked )\nchanging each entry is more time-cosuming than changing one single; \nnevertheless it is more error prone\n\no furthermore you should never have to wonder if your argument is split up or \nkept as it is when you're using something like ${basedir} or other file names. \nit is not in the nature of filenames to split them - at least not at the \npositions containing blanks...\n", "id": 78494, "time": "2005-08-15T09:40:40Z", "creator": "joerg@domaschka.org", "creation_time": "2005-08-15T09:40:40Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "stevel@apache.org", "text": "I am really confused. Do you expect basedir to be automatically quoted or some\nother tranform like %20 or underscores inserted where there are spaces?\n\nThere is no way to do anything like this without breaking everything.\n\nfurthermore, all properties in Ant are treated the same, be they basedir or\nanything else you set in the build file. They are just strings, with string\nconcatenation operations, etc, etc.\n\nIf you want to pass a directory/filename with spaces to a program, either quote\nit by hand or use the <arg value> stuff *which is designed to support your\nspecific need*. Every value in the <arg value> list is passed as a separate\nargument to the program; no need for quoting. \n", "id": 78495, "time": "2005-08-15T11:07:48Z", "bug_id": 35360, "creation_time": "2005-08-15T11:07:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 35360, "is_private": false, "id": 78527, "creation_time": "2005-08-15T22:08:42Z", "time": "2005-08-15T22:08:42Z", "creator": "mbenson@apache.org", "text": "I agree; the example is a misuse of the arg element.  From the manual:\n\nIt is highly recommended to avoid the line version when possible. Ant will try \nto split the command line in a way similar to what a (Unix) shell would do, but \nmay create something that is very different from what you expect under some \ncircumstances.\n\nuse <arg file> or <arg value> as suggested by Steve.\n\n", "attachment_id": null}]
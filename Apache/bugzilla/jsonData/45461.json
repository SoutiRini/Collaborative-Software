[{"count": 0, "attachment_id": null, "creator": "eric.sirianni@gmail.com", "is_private": false, "id": 118910, "time": "2008-07-22T10:50:32Z", "bug_id": 45461, "creation_time": "2008-07-22T10:50:32Z", "tags": [], "text": "import org.apache.oro.text.GlobCompiler;\nimport org.apache.oro.text.regex.MalformedPatternException;\nimport org.apache.oro.text.regex.Pattern;\nimport org.apache.oro.text.regex.Perl5Matcher;\n\npublic class Main {\n\n    public static void main(String[] args) throws MalformedPatternException {\n        GlobCompiler globCompiler = new GlobCompiler();\n        Pattern pattern = globCompiler.compile(\"*.c\");\n        Perl5Matcher perl5Matcher = new Perl5Matcher();\n        \n        System.out.println(perl5Matcher.matches(\"foo.c\", pattern));\n        System.out.println(perl5Matcher.matches(\"subdir/bar.c\", pattern));\n    }\n    \n}\n\n$ java -cp ... Main\ntrue\ntrue\n\nExpected behavior is:\ntrue\nfalse\n\nThe glob man page states:\nPathnames\nGlobbing is applied on each of the components of a pathname separately. A '/' in a pathname cannot be matched by a '?' or '*' wildcard, or by a range like '[.-0]'. A range cannot contain an explicit '/' character; this would lead to a syntax error.\n\nIf a filename starts with a '.', this character must be matched explicitly. (Thus, 'rm *' will not remove .profile, and 'tar c *' will not archive all your files; 'tar c .' is better.) \n\nWriting a simple C program that uses glob confirms this:\n$ cat testglob.c \n#include <glob.h>\n\nmain(int argc, char *argv[]) {\n\n  glob_t globbuf;\n\n  globbuf.gl_offs = 2;\n  glob(\"*.c\", GLOB_DOOFFS, 0, &globbuf);\n  globbuf.gl_pathv[0] = \"ls\";\n  globbuf.gl_pathv[1] = \"-l\";\n  execvp(\"ls\", &globbuf.gl_pathv[0]);\n\n}\n\n$ find\n.\n./subdir\n./subdir/bar.c\n./testglob.c\n./a.out\n\n$ ./a.out \n-rw-rw-r--  1 sirianni engr 236 2008-07-22 13:36 testglob.c"}, {"count": 1, "attachment_id": null, "creator": "dfs@apache.org", "is_private": false, "id": 118914, "time": "2008-07-22T12:39:48Z", "bug_id": 45461, "creation_time": "2008-07-22T12:39:48Z", "tags": [], "text": "This is not a bug and is the intended behavior.  GlobCompiler is not meant to be an implementation of glob(3).  The API docs explain the intended behavior\n(http://jakarta.apache.org/oro/api/org/apache/oro/text/GlobCompiler.html):\n  * - Matches zero or more instances of any character. If the\n  STAR_CANNOT_MATCH_NULL_MASK option is used, * matches one or more\n  instances of any character.\n\nglob(3) concerns itself with matching file system path names within the context of shell filename expansion.  Many applications use glob-style expressions outside of the file system path name context and expect * to match any character.  Even a file system-oriented program such as find (at least the GNU implementation) does not conform to glob(3)/glob(7).  For example, find -path \"*\" will match all intervening slashes.\n\nIf you intend to use GlobCompiler and require the ability to not match slashes, we can add a STAR_CANNOT_MATCH_SLASH_MASK option.  However, it would be more efficient to discuss this on the mailing list.  In general, it is more effective to raise and discuss questions on the mailing list first and open issues only after it's been confirmed that there is indeed an issue that requires opening.  If it is agreed that STAR_CANNOT_MATCH_SLASH_MASK is the way to go, then an improvement/new feature issue can be opened.\n"}]
[{"count": 0, "tags": [], "bug_id": 57136, "is_private": false, "text": "In the EL 3.0 spec it says...\n    Alternatively, the escape characters \\$ and \\# can be used to escape what would\notherwise be treated as an eval-expression. Given the literal-expressions:\n        \\${exprA}\n        \\#{exprB}\n    The resulting values would again be the strings ${exprA} and #{exprB}.\n\nI believe that means it should not escape lets say \"Price: \\\\$500.00\" it should instead output \"Price: \\$500.00\"(it currently would output \"Price: $500.00\") but should instead escape \"Price: \\\\${500.00}\" and the output of that would be \"Price: ${500.00}\".\n\nNormally this wouldn't be run into, but I happened to run into this issue passing javascript code through the EL processor, that happens to have some escaped dollar signs inside some regex strings.\n\nIt maybe a little more acceptable to use \\${ and \\#{ as the escapes, as that is a better indication that there is about to be an expression", "id": 178713, "time": "2014-10-24T05:16:19Z", "creator": "artfiedler@gmail.com", "creation_time": "2014-10-24T05:16:19Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "count": 1, "id": 178715, "time": "2014-10-24T07:12:06Z", "bug_id": 57136, "creation_time": "2014-10-24T07:12:06Z", "text": "1. Sample code to reproduce the issue = ?\n(Are you using the API directly, a JSP page, or what?)\n\n2. Is it observable with the current 8.0.14? What is your version of Tomcat?"}, {"count": 2, "tags": [], "bug_id": 57136, "is_private": false, "text": "The spec says that \\$ is the escape, not \\${.\n\nThere are multiple sets of escaping rules at play in a JSP page and things can get complex quickly.\n\nIf you have a test case that demonstrates non-compliance with the spec then please feel free to re-open this issue with that test case attached and we'll take a look.", "id": 178716, "time": "2014-10-24T07:20:05Z", "creator": "markt@apache.org", "creation_time": "2014-10-24T07:20:05Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "artfiedler@gmail.com", "attachment_id": null, "is_private": false, "id": 178717, "time": "2014-10-24T07:26:02Z", "bug_id": 57136, "creation_time": "2014-10-24T07:26:02Z", "text": "Here is an example, and yes the current version of tomcat 8 trunk (downloaded after 8.0.14)\n\n    public static void main(String[] args) {\n\n        ELProcessor elp = new ELProcessor();\n        ELContext elContext = elp.getELManager().getELContext();\n        ValueExpression ve = ELManager.getExpressionFactory().createValueExpression(elContext, \"Pri\\\\ce: \\\\$500.00 \\\\${true ? 'test':''} ${true ? 'test2':''}\", String.class);\n        Object ret = ve.getValue(elContext);\n        System.out.println(ret);\n    }\n\nI use the code similar to this. If you guys deem this in-fact a bug then it would be in generated parser definition"}, {"count": 4, "tags": [], "creator": "artfiedler@gmail.com", "attachment_id": null, "is_private": false, "id": 178718, "time": "2014-10-24T07:34:06Z", "bug_id": 57136, "creation_time": "2014-10-24T07:34:06Z", "text": "Mark,\nThe language in the spec is confusing at best, as I read it as saying the escape characters \\$ would be used if it was otherwise to be an expression, $500 would not be an expression, but ${...} would. \n\nI do agree though this is a trivial matter, I just wanted to post it in case. I had already provided a workaround by automating my input translation adding an extra \\\\ before an escaped $ or # when { does not follow. The specific method I'm running into this is not using JSP, its direct similar to the example provided"}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 178719, "time": "2014-10-24T08:03:45Z", "bug_id": 57136, "creation_time": "2014-10-24T08:03:45Z", "is_private": false, "text": "Test cases that avoid JSPs and go directly to the ELProcessor are good since they avoid a lot of the complexities. The only catch is that you still have to use Java escaping for the String (which you have in your example above).\n\nI've re-read that section of the EL spec and I see what you mean. That language actually seems pretty clear although it would be better if it said the escape was \"\\$}\" or \"\\#{\". In this type of case, I usually look at section 1.24 for clarity/confirmation. Unfortunately that doesn't help. It is clear that \"\\$500\" is a literal expression but it offers to guidance as to whether it evaluates to \"$500\" or \"\\$500\".\n\nI took a look at the previous EL spec and there is some helpful language there.\n\n<quote>\nLiteralExpression::= (LiteralComponent)* ([$#])?\n\ni.e. a string of any characters that doesn't include ${ or #{ unless escaped by \\${ or \\#{\n</quote>\n\nThe 2.2 spec also include the language about using \\$ or \\# as the escape.\n\nGiven all of this, I think you are right and \"\\$500\" should be evaluated as \"\\$500\" not \"$500\".\n\nI've converted your example to a test case and I'll tae a look at a fix."}, {"count": 6, "tags": [], "bug_id": 57136, "is_private": false, "text": "Sounds good! Thanks for taking the extra time to investigate further", "id": 178720, "time": "2014-10-24T08:21:39Z", "creator": "artfiedler@gmail.com", "creation_time": "2014-10-24T08:21:39Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 178725, "time": "2014-10-24T16:30:25Z", "bug_id": 57136, "creation_time": "2014-10-24T16:30:25Z", "text": "Yuk. That wasn't fun. We really need some API changes in the EL spec to allow us to reduce the number of times we have to parse EL expressions.\n\nThis is fixed in 8.0.x and will be included in 8.0.15 onwards.\n\nAssuming there are no regressions reported, I'll back port this to 7.0.x as well."}, {"count": 8, "tags": [], "text": "Mark, I happened to check the svn source to see what changed and I noticed it said you modified AstLiteralExpression.java on Mon Apr 28 23:08:14 2014 UTC, both 8.0.x and 7.0.x, changing \\${ escape to \\$, I'm not sure what prompted that original change, but just wanted to remind you in case there was something being overlooked here.", "attachment_id": null, "bug_id": 57136, "id": 178734, "time": "2014-10-24T20:18:54Z", "creator": "artfiedler@gmail.com", "creation_time": "2014-10-24T20:18:54Z", "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 178736, "time": "2014-10-24T20:51:33Z", "bug_id": 57136, "creation_time": "2014-10-24T20:51:33Z", "is_private": false, "text": "(In reply to Arthur Fiedler from comment #8)\n> Mark, I happened to check the svn source to see what changed and I noticed\n> it said you modified AstLiteralExpression.java on Mon Apr 28 23:08:14 2014\n> UTC, both 8.0.x and 7.0.x, changing \\${ escape to \\$, I'm not sure what\n> prompted that original change, but just wanted to remind you in case there\n> was something being overlooked here.\n\nThe driver for that change was consistency between the various bits of code that parse EL while I was working on another EL issue."}, {"count": 10, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 180863, "time": "2015-02-09T10:31:00Z", "bug_id": 57136, "creation_time": "2015-02-09T10:31:00Z", "text": "No reports of regressions. Fixed in 7.0.x for 7.0.60 onwards."}, {"count": 11, "tags": [], "bug_id": 57136, "is_private": false, "text": "Hi,\n\nI think we are experiencing a regression on this.\n\nWe are using regular expression pattern with angularJs in our JSPs.\nAs doc says:\n\"Only when the EL is enabled for a page (see Section JSP.3.3.2, \u201cDeactivating\nEL Evaluation\u201d), a literal $ can be quoted by \\$, and a literal # can be quoted\nby \\#. This is not required but is useful for quoting EL expressions.\n\nSo we are using following source code:\nng-pattern=\"/^([1-9]+)\\$/\"\n\nthis should be replaced by JSP parser with:\nng-pattern=\"/^([1-9]+)$/\"\n\nBut, this your fix, the code stay as this client side:\nng-pattern=\"/^([1-9]+)\\$/\"\n\nSo, according to spec, this seems to be a regression.", "id": 184871, "time": "2015-08-31T10:55:31Z", "creator": "chatellier@codelutin.com", "creation_time": "2015-08-31T10:55:31Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 184954, "time": "2015-09-03T20:50:51Z", "bug_id": 57136, "creation_time": "2015-09-03T20:50:51Z", "is_private": false, "text": "The problem here is that both the EL and the JSP specs apply and they say different things.\n\nThe JSP specs says (assuming EL is enabled) '\\$' is an escape for a literal '$'.\nThe EL spec says '\\${' is an escape for a literal '${'.\n\nThe JSP spec has been in maintenance mode for 2.2 onwards whereas the EL spec has been in active development - hence why more wieght was given the EL view rather than the JSP one.\n\nHaving re-read both specs again, I'm no clearer in my own mind what the right behaviour is. Either the JSP style escaping or the EL style could be viewed as correct. It may even be possible (I need to think it through some more) to have EL use '\\${' as an escape for '${' while JSP uses '\\$' as an escape for '$'.\n\nI'm reluctant to change this again without clarification from the JSP maintenance lead and the EL spec expert group. I'll leave this open in the NEEDINFO state and raised a bug over in the EL EG."}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 13, "id": 184956, "time": "2015-09-03T21:05:36Z", "bug_id": 57136, "creation_time": "2015-09-03T21:05:36Z", "text": "https://java.net/jira/browse/UEL-42"}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 14, "id": 184967, "time": "2015-09-04T15:48:45Z", "bug_id": 57136, "creation_time": "2015-09-04T15:48:45Z", "text": "I've been mulling this over some more and I think - regardless of the feedback from the EG - we are going to have to make the escaping for JSP configurable. The EG feedback is just going to determine what the default is.\n\nI'm concerned about the complexity making this configurable will create but the more I think about this the more I think we need to simply so we don't inconvenience one group of users over another."}, {"count": 15, "tags": [], "bug_id": 57136, "is_private": false, "text": "I've been thinking about this also, and me personally I think the JSP spec should be corrected to use escape \\${ as the standard, this does not effect me but I keep thinking about javascript like jquery being output via jsp (not the best place but maybe its a dynamic library) and every time the user would need to double escape a $ in a regex expression, or \\$(...) jquery... \n\nSeems like a lot of work to make it configurable and then users that need to be aware of that configuration may or may not even find it. It's a tough call", "id": 185029, "time": "2015-09-08T05:57:00Z", "creator": "artfiedler@gmail.com", "creation_time": "2015-09-08T05:57:00Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 57136, "is_private": false, "text": "Every time I research this bug some more I seem to be changing my position slightly. I'm currently leaning towards the view that there was a regression in this fix and that '\\$' should have remained an escape for '$\" within a JSP page. Only when processing standalone EL is '\\${' an escape for '${'. Note that this means that within an EL expression in a JSP apge '\\$' would be treated as a literal \\$.\n\nA careful reading of the JSP spec makes clear that the JSP spec is responsible for parsing the outer '${' and '}' of an EL expression within a JSP page and the EL spec is responsible for parsing what appears between them. (See the production for ELExpressionBody).\n\nI plan to look at a patch for trunk to address this. Once I have that we'll see what the dev list thinks of it and back-porting it.", "id": 185042, "time": "2015-09-08T19:02:31Z", "creator": "markt@apache.org", "creation_time": "2015-09-08T19:02:31Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "I think I have found another, related, problem in attribute values.\n\nThe problem I described in comment #16 (where I was thinking about template text) also applies to attribute values. Specifically, consider the following:\n<tags:echo echo=\"16-${'\\\\$'}\" />\n\nCurrently, Tomcat applied attribute value escaping to the whole value. This is not correct. The production in the JSP spec for QuotedChar (which is used in attribute values) means that attribute escaping only applies outside the EL. Inside the EL is handled by ELEXpressionBody which delegates to the EL spec.\n\nI am currently extending the EL test cases to take all of this into account before looking at what fixes are required.", "attachment_id": null, "bug_id": 57136, "id": 185051, "time": "2015-09-09T09:28:45Z", "creator": "markt@apache.org", "creation_time": "2015-09-09T09:28:45Z", "is_private": false}, {"count": 18, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 185073, "time": "2015-09-10T13:18:45Z", "bug_id": 57136, "creation_time": "2015-09-10T13:18:45Z", "is_private": false, "text": "I've committed a fix for this to trunk. I'll give it a few days for folks to review it before back-porting."}, {"count": 19, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 185418, "time": "2015-09-22T08:57:40Z", "bug_id": 57136, "creation_time": "2015-09-22T08:57:40Z", "is_private": false, "text": "Fix for the regression applied to 8.0.x for 8.0.27 onwards."}, {"count": 20, "tags": [], "bug_id": 57136, "is_private": false, "text": "Back-ported the fix to 7.0.x for 7.0.65 onwards.\n\nI've also back-ported a fix to EL parsing to 8.0.x and 7.0.x.", "id": 185425, "time": "2015-09-22T11:25:17Z", "creator": "markt@apache.org", "creation_time": "2015-09-22T11:25:17Z", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 57136, "is_private": false, "text": "Reviewing r1704572 and r1704576 (the fix for 7.0.x)\n\n(In reply to Mark Thomas from comment #17)\n> I think I have found another, related, problem in attribute values.\n> \n> The problem I described in comment #16 (where I was thinking about template\n> text) also applies to attribute values. Specifically, consider the following:\n> <tags:echo echo=\"16-${'\\\\$'}\" />\n> \n> Currently, Tomcat applied attribute value escaping to the whole value. This\n> is not correct. The production in the JSP spec for QuotedChar (which is used\n> in attribute values) means that attribute escaping only applies outside the\n> EL. Inside the EL is handled by ELEXpressionBody which delegates to the EL\n> spec.\n> \n\nI agree with this assessment. I was reading the current as well as older versions of JSP and EL specifications - back to JSP 2.0/Tomcat 5.5.\n\nThe chapter \"JSP.1.6 Quoting and Escape Conventions\" has explicit section on \"Quoting in EL Expressions\" and it does not say that any additional quoting rules from surrounding context are applied to it. So I agree that when parsing an attribute, \"Quoting in Attributes\" rules are applied until a ${, then \"Quoting in EL Expressions\" rules are applied until a } is read.\n\nHistorically, EL expressions were introduced in JSTL 1.0 (JSR-052). At that time the expressions were evaluated by tags themselves. So an attribute of JSP tag was escaped as a whole, and unescaping it gives an EL expression.\n\nEffectively if EL expression uses quoting (e.g. ${'\\\\'}) including it as attribute value requires double quoting <c10:out value=\"${'\\\\\\\\'}\" />  This works when using JSTL 1.0 (xmlns:c10=\"http://java.sun.com/jstl/core\") and EL evaluation in JSPs is disabled. So the EL is evaluated by the tag library.\n\nIf using JSTL 1.1 (xmlns:c=\"http://java.sun.com/jsp/jstl/core\") and EL is enabled, it becomes <c:out value=\"${'\\\\'}\" />\n\nI see no mention of quoting changes, but for backwards compatibility there is an explicit option, <%@page isELIgnored=\"true\">.\n\n\n\nMy concern is that the behaviour where double escaping in attributes was required has been there for many years.\nE.g. Eclipse IDE cannot parse /tomcat-7.0.x/test/webapp-3.0/el-method.jsp file and flags errors on the following line,\n\n    <tags:echo echo=\"00-${testBeanA[\"bean\"].sayHello('JUnit')}\" />\n\nI think there would better be a flag in Jasper to enable old behaviour of attribute parsing. In the old behaviour mode the attribute will be parsed and unescaped as a whole.\n\nI think related change in r1704572 is in o.a.jasper.compiler.AttributeParser.\n\nI am REOPENING to discuss introduction of such configuration option. (Though may be better to reorganize into a separate BZ issue).", "id": 185788, "time": "2015-10-18T22:57:25Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-10-18T22:57:25Z", "attachment_id": null}, {"count": 22, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "id": 186184, "time": "2015-11-02T12:55:32Z", "bug_id": 57136, "creation_time": "2015-11-02T12:55:32Z", "is_private": false, "text": "*** Bug 58567 has been marked as a duplicate of this bug. ***"}, {"count": 23, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 186187, "time": "2015-11-02T13:03:27Z", "bug_id": 57136, "creation_time": "2015-11-02T13:03:27Z", "is_private": false, "text": "*** Bug 58567 has been marked as a duplicate of this bug. ***"}, {"count": 24, "tags": [], "creator": "amir.yoni@gmail.com", "attachment_id": null, "is_private": false, "id": 186193, "time": "2015-11-02T13:44:23Z", "bug_id": 57136, "creation_time": "2015-11-02T13:44:23Z", "text": "Hello,\nI opened bug 58567, and Mark resolved it as a duplicate of this bug.\nI'd like to add to this discussion that I am suffering from the regression introduced in 8.0.27 and I didn't even try to escape the $ sign. I have quotes in the expression, something like this:\n\n<c:if test=\"${(myAccountEmail != null) && (myAccountEmail != \\\"\\\")}\">\n\nI think that considering this issue as minor and just waiting for an enhancement is a bit weak, and will hurt users.\nThanks,\nYoni"}, {"count": 25, "tags": [], "bug_id": 57136, "is_private": false, "text": "Also see this thread on the dev list:\nhttp://tomcat.markmail.org/thread/uzo65gf572s636ly", "id": 186266, "time": "2015-11-05T08:46:13Z", "creator": "markt@apache.org", "creation_time": "2015-11-05T08:46:13Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 57136, "is_private": false, "text": "A configuration option has been added to the JSP Servlet.", "id": 186274, "time": "2015-11-05T20:02:47Z", "creator": "markt@apache.org", "creation_time": "2015-11-05T20:02:47Z", "attachment_id": null}, {"count": 27, "tags": [], "text": "Thank you for providing a configuration option for this. Any chance to elaborate what the option name is, and where (and if) it will be documented?\nI apologize if these are trivial questions, I am not sure where to find this information.\nThanks,\nYoni", "attachment_id": null, "bug_id": 57136, "id": 186276, "time": "2015-11-05T21:43:21Z", "creator": "amir.yoni@gmail.com", "creation_time": "2015-11-05T21:43:21Z", "is_private": false}, {"count": 28, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "is_private": false, "id": 186282, "time": "2015-11-06T07:53:01Z", "bug_id": 57136, "creation_time": "2015-11-06T07:53:01Z", "text": "(In reply to Yoni Amir from comment #27)\n> Thank you for providing a configuration option for this. Any chance to\n> elaborate what the option name is, and where (and if) it will be documented?\n> I apologize if these are trivial questions, I am not sure where to find this\n> information.\n> Thanks,\n> Yoni\n\nHere it is\nhttps://ci.apache.org/projects/tomcat/tomcat9/docs/jasper-howto.html\nstrictQuoteEscaping"}, {"count": 29, "tags": [], "text": "That isn't the option you want. You want this one:\nquoteAttributeEL\n\nThanks for the reminder, I'd forgotten to document it.", "attachment_id": null, "bug_id": 57136, "id": 186283, "time": "2015-11-06T08:15:46Z", "creator": "markt@apache.org", "creation_time": "2015-11-06T08:15:46Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "amir.yoni@gmail.com", "is_private": false, "count": 30, "id": 186339, "time": "2015-11-09T13:33:29Z", "bug_id": 57136, "creation_time": "2015-11-09T13:33:29Z", "text": "Hi,\nDo you know if this configuration option, quoteAttributeEL, will be available only in tomcat 8.0.29, or also in Tomcat 7.0.66 (or maybe a later 7.0.xx)?\nThanks,\nYoni"}, {"count": 31, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 33282, "is_private": false, "id": 186442, "time": "2015-11-19T09:58:43Z", "bug_id": 57136, "creation_time": "2015-11-19T09:58:43Z", "text": "Created attachment 33282\ntest.war - Sample web application demonstrating two variants of EL escaping in attributes of custom tags\n\nSample web application to demonstrate two variants of EL escaping in attributes of a custom tag.\n\nOne of them is expected to work, other is expected to fail (with a compilation failure). This is used to test what is the actual behaviour.\n\nIt uses EL expression from Comment 24."}, {"attachment_id": null, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "count": 32, "id": 186576, "time": "2015-11-26T12:26:03Z", "bug_id": 57136, "creation_time": "2015-11-26T12:26:03Z", "text": "(In reply to Mark Thomas from comment #25)\n> Also see this thread on the dev list:\n> http://tomcat.markmail.org/thread/uzo65gf572s636ly\n> (\"On escaping of EL in attributes (BZ 57136)\" thread on dev@)\n\nAs result of the above,\n\n1. The quoteAttributeEL option has been backported to Tomcat 7 as well\n2. Its default value was changed to be \"true\", restoring old behaviour.\n\nThis will be in Tomcat 7.0.66, 8.0.30, 9.0.0.M2 onwards."}, {"count": 33, "tags": [], "text": "*** Bug 58706 has been marked as a duplicate of this bug. ***", "attachment_id": null, "bug_id": 57136, "id": 186857, "time": "2015-12-09T10:53:44Z", "creator": "markt@apache.org", "creation_time": "2015-12-09T10:53:44Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "is_private": false, "count": 34, "id": 186861, "time": "2015-12-09T11:30:37Z", "bug_id": 57136, "creation_time": "2015-12-09T11:30:37Z", "text": "*** Bug 58706 has been marked as a duplicate of this bug. ***"}]
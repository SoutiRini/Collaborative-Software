[{"count": 0, "tags": [], "text": "Created attachment 35593\npatch switching back to JAXP\n\nI am currently evaluating whether the Xalan dependency can be dropped from taglibs and replaced with javax.xml.*. \n\nthis is the code that is blowing up for me:\nReader xsl = new InputStreamReader(filepath.openStream());\nTransformerFactory transformerfactory = TransformerFactory.newInstance();\nStreamSource ssXsl = new StreamSource(xsl);\nssXsl.setSystemId(filepath.toExternalForm());\nTemplates templates = transformerfactory.newTemplates(ssXsl);\nTransformer transformer = templates.newTransformer();\n\nlast line causes:\njava.lang.ClassCastException: org.apache.xml.dtm.ref.DTMManagerDefault cannot be cast to org.apache.xml.dtm.DTMManager\n    at org.apache.xml.dtm.DTMManager.newInstance(DTMManager.java:137)\n    at org.apache.xpath.XPathContext.<init>(XPathContext.java:102)\n    at org.apache.xpath.XPathContext.<init>(XPathContext.java:349)\n    at org.apache.xpath.XPathContext.<init>(XPathContext.java:337)\n    at org.apache.xalan.transformer.TransformerImpl.<init>(TransformerImpl.java:397)\n    at org.apache.xalan.templates.StylesheetRoot.newTransformer(StylesheetRoot.java:200)", "attachment_id": 35593, "id": 202641, "creator": "nbmlaw@gmail.com", "time": "2017-12-08T16:07:13Z", "bug_id": 61875, "creation_time": "2017-12-08T16:07:13Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 61875, "attachment_id": null, "is_private": false, "id": 202642, "time": "2017-12-08T16:49:25Z", "creator": "jboynes@apache.org", "creation_time": "2017-12-08T16:49:25Z", "text": "Original thread on taglibs-user:\nhttp://mail-archives.apache.org/mod_mbox/tomcat-taglibs-user/201711.mbox/%3C66442bd7-e0db-31ec-00d3-76dd2f660b48%40nbmlaw.co.uk%3E\n\nThis problem has been seen on TomEE which does not include the Xalan dependency needed by the XML tags.\n\nPrevious attempts to replace Xalan with JAXP did not solve the performance issue reported in #27717. There were also problems with XML types that were returned. See that issue for details."}, {"count": 2, "tags": [], "bug_id": 61875, "attachment_id": null, "id": 202660, "time": "2017-12-09T00:07:48Z", "creator": "jboynes@apache.org", "creation_time": "2017-12-09T00:07:48Z", "is_private": false, "text": "I applied the patch and made the ForEachTag tests work and am seeing the same performance problem we had before.\n\nWith the current implementation the testIterationPerformance test completes 200K iterations in 1250ms. \n\nWith the patched version, this test did not complete within a reasonable time. When I lower the iteration count from 200K to 20K it completed in 46000ms. This looks like the same n^2 behaviour we saw before the fix for 27717.\n\nThis is the test I ran with the modifications to work with JAXP:\n\n    @Ignore\n    @Test\n    public void testIterationPerformance() throws Exception {\n        // create a large document\n        test = newBenchmarkDocument(20000);\n\n        XPathExpression dot = XPathFactory.newInstance().newXPath().compile(\".\");\n        expect(pageContext.findAttribute(\"doc\")).andStubReturn(test);\n        tag.setSelect(\"$doc/root/a\");\n        replay(pageContext);\n        long time = -System.nanoTime();\n        String result = null;\n        if (tag.doStartTag() == IterationTag.EVAL_BODY_INCLUDE) {\n            do {\n                result = dot.evaluate(tag.getCurrent());\n            } while (tag.doAfterBody() == IterationTag.EVAL_BODY_AGAIN);\n            tag.doFinally();\n        }\n        time += System.nanoTime();\n        System.err.println(\"time = \" + time / 1000000 + \"ms.\");\n        assertEquals(\"199999\", result);\n    }\n\ntime = 46673ms."}, {"count": 3, "text": "i tried running that test and i got \njavax.servlet.jsp.JspTagException: javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Unable to evaluate expression using this context\n\tat org.apache.taglibs.standard.xpath.jaxp.JAXPXPathExpression.evaluate(JAXPXPathExpression.java:67)\n\tat org.apache.taglibs.standard.xpath.jaxp.JAXPXPathExpression.iterate(JAXPXPathExpression.java:56)\n\tat org.apache.taglibs.standard.tag.common.xml.ForEachTag.prepare(ForEachTag.java:57)\n\tat javax.servlet.jsp.jstl.core.LoopTagSupport.doStartTag(LoopTagSupport.java:241)\n\tat org.apache.taglibs.standard.tag.common.xml.ForEachTagTest.testIterationPerformance(ForEachTagTest.java:261)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:539)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:761)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:461)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:207)\nCaused by: javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Unable to evaluate expression using this context\n\tat com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:204)\n\tat org.apache.taglibs.standard.xpath.jaxp.JAXPXPathExpression.evaluate(JAXPXPathExpression.java:65)\n\t... 28 more\nCaused by: javax.xml.transform.TransformerException: Unable to evaluate expression using this context\n\tat com.sun.org.apache.xpath.internal.XPath.execute(XPath.java:368)\n\tat com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:133)\n\tat com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:109)\n\tat com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:191)\n\t... 29 more\nCaused by: java.lang.RuntimeException: Unable to evaluate expression using this context\n\tat com.sun.org.apache.xpath.internal.axes.NodeSequence.setRoot(NodeSequence.java:266)\n\tat com.sun.org.apache.xpath.internal.axes.LocPathIterator.execute(LocPathIterator.java:214)\n\tat com.sun.org.apache.xpath.internal.XPath.execute(XPath.java:339)\n\t... 32 more\ncan you share your ForEachTagTest?", "creator": "nbmlaw@gmail.com", "is_private": false, "id": 202665, "time": "2017-12-09T10:07:54Z", "bug_id": 61875, "creation_time": "2017-12-09T10:07:54Z", "tags": [], "attachment_id": null}, {"count": 4, "text": "JSTLXPathContext needs to be set in ForEachTagTest.setup() somehow?", "creator": "nbmlaw@gmail.com", "attachment_id": null, "id": 202666, "time": "2017-12-09T10:21:28Z", "bug_id": 61875, "creation_time": "2017-12-09T10:21:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 61875, "attachment_id": 35598, "id": 202686, "time": "2017-12-10T21:42:05Z", "creator": "jboynes@apache.org", "creation_time": "2017-12-10T21:42:05Z", "is_private": false, "text": "Created attachment 35598\nJAXP with perf test\n\n$ mvn -Dtest=ForEachTagTest#testIterationPerformance -DfailIfNoTests=false test\n...\n\nRunning org.apache.taglibs.standard.tag.common.xml.ForEachTagTest\ntime = 39511ms.\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 39.729 sec"}, {"count": 6, "tags": [], "bug_id": 61875, "attachment_id": null, "id": 202690, "time": "2017-12-11T07:29:28Z", "creator": "rmannibucau@gmail.com", "creation_time": "2017-12-11T07:29:28Z", "is_private": false, "text": "A compromise can surely be to make xalan optional with a static check if it is here to select the impl. Also copying the needed classes should be doable if it doesnt import the whole xalan."}, {"count": 7, "tags": [], "bug_id": 61875, "text": "i stepped through ForEachTagTest.java\n\nline 140 if (tag.doStartTag() == IterationTag.EVAL_BODY_INCLUDE) {\nseems to take a long time\n\nline 142 result = dot.evaluate(tag.getCurrent());\ntakes virtually no time but the iterations seem to add up to a lot of time in total\n\ni don't really understand the ins and outs but it seems like every element has been split up and stored separately instead of being stored as an xml structure.  so the xml search tools don't work very well it is like loading a separate document for each search.\n\nis there any way to access the low level dtm stuff through the javax.xml.*?", "id": 202696, "attachment_id": null, "creator": "nbmlaw@gmail.com", "creation_time": "2017-12-11T10:57:04Z", "time": "2017-12-11T10:57:04Z", "is_private": false}, {"count": 8, "tags": [], "creator": "jboynes@apache.org", "attachment_id": null, "text": "(In reply to Matthew Broadhead from comment #7)\n> i stepped through ForEachTagTest.java\n> \n> line 140 if (tag.doStartTag() == IterationTag.EVAL_BODY_INCLUDE) {\n> seems to take a long time\n> \n> line 142 result = dot.evaluate(tag.getCurrent());\n> takes virtually no time but the iterations seem to add up to a lot of time\n> in total\n> \n> i don't really understand the ins and outs but it seems like every element\n> has been split up and stored separately instead of being stored as an xml\n> structure.  so the xml search tools don't work very well it is like loading\n> a separate document for each search.\n> \n> is there any way to access the low level dtm stuff through the javax.xml.*?\n\nThe xpath engine in Xalan was designed to allow repeated fast evaluation of xpath expressions during XSLT processing. It does that by taking an upfront hit to build a DTM model of the document being processed, a model that is then reused each time an xpath expression needs to be evaluated.\n\nThe current implementation mirrors that in the context of JSTL. It constructs the model once in ForEachTag#doStartTag then reuses it when evaluating the xpath expressions inside the loop just like the XSLT engine does. It takes advantage of a portion of the JSTL spec that allows other implementations of XML context than a DOM.\n\nWhen using JAXP it is limited by the standard API to using DOM objects as context. That means every time an XPath expression is evaluated, the engine has to recreate the DTM model before it can evaluate the expression. It does that starting from the root had has to work over the N-1 preceding nodes, hence the O(N^2) behaviour.\n\nIn theory, the JAXP XPath API allows different \"object models\" to be selected. See\n  https://docs.oracle.com/javase/1.5.0/docs/api/javax/xml/xpath/XPathFactory.html#newInstance(java.lang.String)\nso there may be a way to use DTM with the default JAXP implementation (which in Oracle's and OpenJDK is a shaded version of Xalan which would support DTM). The downside of this would be if there were other JDKs that did not support DTM.\n\nI think Glassfish ended up simply shading Xalan and bundling it with their implementation. We could do that as well, perhaps adding a \"bundle\" jar that includes all the tags along with a shaded version of Xalan that was intended to used by containers rather than applications.\n\nSo perhaps multiple packagings:\n- pure JAXP, smaller but with a known performance issue with XML processing\n- Xalan bundled, larger but with no performance issue\n- unbundled, so application users can choose what tags and dependencies they include", "id": 202745, "time": "2017-12-12T20:34:19Z", "bug_id": 61875, "creation_time": "2017-12-12T20:34:19Z", "is_private": false}, {"count": 9, "tags": [], "text": "https://stackoverflow.com/questions/6340802/java-xpath-apache-jaxp-implementation-performance", "is_private": false, "id": 202863, "creator": "nbmlaw@gmail.com", "time": "2017-12-20T14:13:24Z", "bug_id": 61875, "creation_time": "2017-12-20T14:13:24Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "https://blogs.sap.com/2009/12/04/performance-improvements-in-nw-java-applications-with-xml-processing/", "is_private": false, "id": 202864, "creator": "nbmlaw@gmail.com", "time": "2017-12-20T14:18:01Z", "bug_id": 61875, "creation_time": "2017-12-20T14:18:01Z", "attachment_id": null}]
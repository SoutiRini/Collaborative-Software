[{"count": 0, "tags": [], "text": "We have found severe problems in our application due to data being crossed from\none session to another.\n\nThis was reported while an user was attempting to log out and another user was\nattempting to log in.\n\nWe store user credentials and other application information in the session\ncontext and have a session manager class implementing the\nHttpSessionBindingListener interface also stored in the session context. When\nthe session is invalidated during voluntary user log out or by session timeout,\nour session manager gets notified and takes care of some duties like logging a\nlog out transaction to the database.\n\nWe have found that when the access to the database take some time (which makes\nthe processing in the valueUnbound method to take some time), a new user logging\nin will be assigned a new session id but apparently a recycled HttpSession\nobject belonging to the user logging out and still containing attribute that\nhave not been removed.\n\nWe have been able to reproduce and verify this problem very easily, by bounding\nan object from a class that implements this code in the valueUnbound method:\n\npublic void valueUnbound( HttpSessionBindingEvent event )\n{\n  // trace 1\n  System.out.println( \"Session Manager Thread sleeping for session \" +\nevent.getSession().getId() );\n            \n  try\n  {\n    Thread.sleep( 120000 );\n  }\n  catch ( InterruptedException ex ) {}\n\n  // trace 2\n  System.out.println( \"Session Manager Thread resuming for session \" +\nevent.getSession().getId() + \" ...\" );\n   }\n\nWhen the session is invalidated and this attribute object gets notified, it will\nprint out the session id (trace 1) and sleep for 2 minutes. In the meantime,\nanother session being requested which will be assigned a new session id but\nrecycling the HttpSession object. When the thread wakes up, it will print the new  \nsession id (trace 2) which has been rewritten in the object.\n\nWe have tested exactly the same testing code and our application in Tomcat 4.1.18\nand everything works fine. Tomcat 3.3.1 final and 3.3.1a present the same problem.\n\nWe think, that the recycling mechanism is invalidating the session, and adding\nthe session object to some recycling pool before all the attributes(listeners)\nimplementing the HttpSessionBindingListener interface has been notified not\ngiving them a chance to finish the proper session cleaning.\n\nAny help with this problem will be greatly appreciated.\n\nBest Regards,", "is_private": false, "bug_id": 18044, "id": 33270, "time": "2003-03-16T20:44:53Z", "creator": "jhernand@flexstornet.com", "creation_time": "2003-03-16T20:44:53Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 15894 ***", "is_private": false, "bug_id": 18044, "id": 33271, "time": "2003-03-16T20:58:05Z", "creator": "william.barker@wilshire.com", "creation_time": "2003-03-16T20:58:05Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 18044, "text": "I have obtained the sources from cvs tomcat_331_final branch and the fix for\nthis (or bug 15894) does not seems to be part of it.\n\nIt seems to have been applied to the head only, since I found it resolved \nin the release notes for 3.3.2.\n\nThis problem should be considered a major issue and it would be nice to have\na patch for 3.3.1/3.3.1a if the 3.3.2 release date is still to be determined.\n\nAny comment and help would be appreciated.", "id": 33383, "time": "2003-03-18T22:49:00Z", "creator": "jhernand@flexstornet.com", "creation_time": "2003-03-18T22:49:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 18044, "text": "This is fixed in the upcoming 3.3.2 release", "id": 53607, "time": "2004-03-07T18:27:43Z", "creator": "william.barker@wilshire.com", "creation_time": "2004-03-07T18:27:43Z", "tags": [], "is_private": false}]
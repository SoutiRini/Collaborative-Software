[{"count": 0, "tags": [], "bug_id": 47098, "attachment_id": null, "id": 126524, "time": "2009-04-26T14:08:42Z", "creator": "johanp@aditus.nu", "creation_time": "2009-04-26T14:08:42Z", "is_private": false, "text": "Trying to run fop-0.95 on a open suse 11.1 installation always causes\n\njava.lang.IllegalArgumentException: Error creating InputHandler object\n\nEven running fop without any arguments (which only causes the help screen to be shown throws this error. So the easiest step to reproduce is just to call\n\n$>fop\n... help text removed ...\nApr 26, 2009 18:44:07 PM org.apache.fop.cli.Main startFOP\nSEVERE: Exception\njava.lang.IllegalArgumentException: Error creating InputHandler object.\n        at org.apache.fop.cli.CommandLineOptions.createInputHandler(CommandLineOptions.java:849)\n        at\norg.apache.fop.cli.CommandLineOptions.parse(CommandLineOptions.java:167)\n        at org.apache.fop.cli.Main.startFOP(Main.java:154)\n        at org.apache.fop.cli.Main.main(Main.java:197)\n\n\nA similar problem for Solaris was discussed on the mailing list in 2007 concerning 0.94 and there were some ideas floating that it was caused by erroneous handling of space in the wrapper shell script. However, the mentioned workaround in that thread (to add a space in the IFS definition) does not make any difference. As I can read from the thread and some of the committ notes in 0.95 some changes should have been made to fix this but apparently its not quite working."}, {"count": 1, "tags": [], "creator": "johanp@aditus.nu", "attachment_id": null, "id": 126525, "time": "2009-04-26T14:11:55Z", "bug_id": 47098, "creation_time": "2009-04-26T14:11:55Z", "is_private": false, "text": "This has also been reported to the Novell SuSE bugzilla as bug 498327"}, {"count": 2, "tags": [], "creator": "johanp@aditus.nu", "attachment_id": null, "id": 126526, "time": "2009-04-26T15:09:11Z", "bug_id": 47098, "creation_time": "2009-04-26T15:09:11Z", "is_private": false, "text": "Looking some more at this and running fop with --execdebug reveals that the final exec that sets up the classpath and runs Java is something like\n\nexec \"/usr/lib/jvm/java/bin/java\" -classpath \"...\" org.apache.fop.cli.Main -Xmx512m \"mm.fo\" \"-pdf\" \"mm.pdf\"\n\nwhere I have omitted the long classpath. It seems like the problem is caused by having the Java maximum heap argument (-Xmx the wrong place - as an argument to the fop client. If the exec call instead would be\n\nexec \"/usr/lib/jvm/java/bin/java\" -Xmx512m -classpath \"...\" org.apache.fop.cli.Main  \"mm.fo\" \"-pdf\" \"mm.pdf\"\n\nThen things start working the way the should."}, {"count": 3, "tags": [], "bug_id": 47098, "is_private": false, "text": "It turns out that I had messed up. When I was configuring FOP I mistakenly caused my own problem by setting the Java max heap argument.", "id": 126527, "time": "2009-04-26T15:33:26Z", "creator": "johanp@aditus.nu", "creation_time": "2009-04-26T15:33:26Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "id": 156962, "time": "2012-04-01T13:55:32Z", "bug_id": 47098, "creation_time": "2012-04-01T13:55:32Z", "is_private": false, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs"}]
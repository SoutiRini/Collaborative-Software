[{"count": 0, "tags": [], "bug_id": 46085, "attachment_id": null, "text": "We have identified a bug where sessions are expired even though they are still valid.  \n\nThe source of the problem is concurrent threads reading and writing thisAccessTime in \"org.apache.catalina.session.StandardSession\" in a way that is not thread safe. \n\nThe good news is that we have a simple solution, for Tomcat 6.  The fix is to mark the class level variables - thisAccessedTime and lastAccessedTime - as volatile.\n\n\n\nDetailed explanation of the bug:\n\nWe found that StandardSession's isValid() function was making a call to expire() on the following block of code:\n\n        if (maxInactiveInterval >= 0) { \n            long timeNow = System.currentTimeMillis();\n            int timeIdle = (int) ((timeNow - thisAccessedTime) / 1000L);\n            if (timeIdle >= maxInactiveInterval) {\n                expire(true);\n            }\n        }\n\nDebugging showed that thisAccessedTime was in the past (1983!) and therefore timeIdle is large enough for expiry to happen.\n\nIn another thread running in parallel, the access() function runs this line of code:\n\n    this.thisAccessedTime = System.currentTimeMillis();\n\nThat single line of code might be atomic, i.e. is composed of multiple instructions, which means it is possible for another thread reading thisAccessedTime to read a value that is effectively corrupt.  Marking thisAccessedTime as volatile ensures that writes are completely finished before reading is allowed. \n\nNote that the volatile solution only works for Java 1.5 or higher as the meaning of volatile changed then. That means it cannot be used for older Tomcat's if they have a similar problem. Another solution would have been to synchronize reads and writes to that variable.\n\n\n\nReproducing the bug:\n\nThis is quite hard within Tomcat as is very dependant on timings, the JVM's optimisations, and any changes to code may affect optimisations. We are only able to reproduce the bug on multiprocessor systems running an IBM JVM.\n\nSpecifically, we are running:\n  SLES 10.3 Linux on an Intel platform.\n  Two or more Intel CPU's\n  Tomcat 6.0.18\n  JVM package: java-1_5_0-ibm-1.5.0_sr8a-1.1\n\nInitially, we thought that System.currentTimeMillis() was returning an incorrect value and created a test program which demo'd the problem to IBM.  We were wrong but they did give us the volatile solution.  See here: http://www.ibm.com/developerworks/forums/thread.jspa?threadID=230478", "id": 121860, "time": "2008-10-24T12:53:09Z", "creator": "pms52@cam.ac.uk", "creation_time": "2008-10-24T12:53:09Z", "is_private": false}, {"count": 1, "tags": [], "text": "This has been fixed in trunk and proposed for 6.0.x", "is_private": false, "id": 121920, "creator": "markt@apache.org", "time": "2008-10-27T11:33:49Z", "bug_id": 46085, "creation_time": "2008-10-27T11:33:49Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 46085, "text": "This has been fixed in 6.0.x and will be included 6.0.19 onwards.", "count": 2, "id": 122209, "time": "2008-11-05T07:41:18Z", "creator": "markt@apache.org", "creation_time": "2008-11-05T07:41:18Z", "is_private": false}, {"count": 3, "tags": [], "creator": "daniel.beier.bugs@gmail.com", "text": "(In reply to comment #2)\n> This has been fixed in 6.0.x and will be included 6.0.19 onwards.\n\nWe encountered random session timeouts with Tomcat 6.0.16 and IBM JVM 1.5.  I tested Tomcat 6.0.20 and still got random session timeouts.  I downloaded the Tomcat source code, declared StandardSession.isValid and StandardSession.access  synchronized, rebuild and used the updated catalina.jar in my Tomcat installation.  I ran a lot of tests and so far haven't seen random session timeouts.  Should this bug be reopened?", "id": 128567, "time": "2009-07-06T15:04:28Z", "bug_id": 46085, "creation_time": "2009-07-06T15:04:28Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 128569, "time": "2009-07-06T15:15:42Z", "bug_id": 46085, "creation_time": "2009-07-06T15:15:42Z", "is_private": false, "text": "Looking at the code, I can't see why syncs shouldn't be necessary. Does this still happen with a Sun JVM?\n\nAdditionally, if you are worried about correct session expiration you should use ACTIVITY_CHECK or STRICT_SERVLET_COMPLIANCE (see http://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html)"}, {"count": 5, "tags": [], "bug_id": 46085, "attachment_id": null, "is_private": false, "id": 128597, "time": "2009-07-07T10:26:26Z", "creator": "daniel.beier.bugs@gmail.com", "creation_time": "2009-07-07T10:26:26Z", "text": "Hi Mark.  Thanks for the link!  I set ACTIVITY_CHECK to true and still got random session timeouts with the IBM JVM.  Setting STRICT_SERVLET_COMPLIANCE to true didn't change this either.  I have not seen these random session timeouts with the Sun JVM.  My company uses the IBM JVM and the only way I got it to work reliably was adding the synchronized keyword to StandardSession.isValid and StandardSession.access.  Here is the JVM version info:\n\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pwi32devifx-20071025 (SR6b))\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP x86-32 j9vmwi3223-20071007 (JIT enabled)\nJ9VM - 20071004_14218_lHdSMR\nJIT  - 20070820_1846ifx1_r8\nGC   - 200708_10)\nJCL  - 20071025"}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 128598, "time": "2009-07-07T11:12:44Z", "bug_id": 46085, "creation_time": "2009-07-07T11:12:44Z", "is_private": false, "text": "Then that looks like a bug in the IBM implementation of atomics. Maybe try testing with a newer IBM JDK? As an aside, this looks like it belongs on the users list rather than bugzilla."}]
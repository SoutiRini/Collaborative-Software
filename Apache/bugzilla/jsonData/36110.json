[{"attachment_id": null, "tags": [], "bug_id": 36110, "is_private": false, "count": 0, "id": 78318, "time": "2005-08-10T07:17:02Z", "creator": "kk@kohsuke.org", "creation_time": "2005-08-10T07:17:02Z", "text": "I'm one of the developers working on the Jakarta commons sandbox javaflow project.\n\nThis problem is observed in the trunk (as of 2005/08/09), and it's causing some\ntest failures in the gump build of the said javaflow project.\n\nHere's what I found while tracing through the code.\n\nWhen LocalVariableGen is created by using the following constructor:\n\n\n>  public LocalVariableGen(int index, String name, Type type,\n>                          InstructionHandle start, InstructionHandle end) {\n>    if((index < 0) || (index > Constants.MAX_SHORT))\n>      throw new ClassGenException(\"Invalid index index: \" + index);\n>    \n>    this.name  = name;\n>    this.type  = type;\n>    this.index  = index;\n>    setStart(start);\n>    setEnd(end);\n>  }\n\n\nDuring the setStart method, it registers this newly created LocalVariableGen as\na targeter to the InstructionHandle given by the 'start' parameter.\nInstructionHandle.targeters is a HashSet. So adding a LocalVariableGen as a\ntargter means inserting a LocalVariableGen into a HashSet. This involves in\ncomputing the hashCode.\n\nSo from within the setStart method, LocalVariableGen.hashCode() is invoked,\nsince the end instruction isn't set yet, this returns a hashCode based on just\nindex and start, ignoring the end field.\n\nThen immediately after the setStart method returns, the above constructor now\nsets the end instruction. As a result of this, hash code of the LocalVariableGen\nchanges. This makes it impossible to update the start of LocalVariableGen\ncorrectly, because LocalVariableGen can no longer remove itself from the\ntargeter set of the previous 'start' instruction.\n\nIn other words, the problem is that the LocalVariableGen class computes its hash\ncode based on mutable fields, yet at the same time it is used in a HashSet,\nwhere objects are not allowed to change its hash code. To the eyes of a new\ncomer like me, this seems like a rather fundamental design flaw in the current\nBCEL library.\n\n\n\nSUGGESTED FIX\n=============\nimplement the hashCode method to return a constant value would fix the problem\nat the expense of the performance:\n\n  public int hashCode() { \n    return 42;\n  }\n\nAlternatively, instead of using HashSet, use a custom implementation of a Set\nwhere the identity hash code is used instead of Object.hashCode. Although I\nhaven't tested this approach, I believe this also fixes the problem.\n\nThere may be other ways to fix the problem."}, {"attachment_id": null, "tags": [], "bug_id": 36110, "text": "agreed.. nice detective work. I've added this, which i believe should be valid,\nand solve the problem, if icky.\n\n  public LocalVariableGen(int index, String name, Type type,\n\t\t\t  InstructionHandle start, InstructionHandle end) {\n    if((index < 0) || (index > Constants.MAX_SHORT))\n      throw new ClassGenException(\"Invalid index index: \" + index);\n    \n    this.name  = name;\n    this.type  = type;\n    this.index  = index;\n    // setStart and setEnd add 'this' to a HashSet, causing the hash to compute.\n    // The hash uses start and end, so set them before calling setStart/setEnd.\n    // Otherwise, the remove will fail because the hash is different than the add.\n    // Icky, but should be ok. See Bug: 36110  -- dbrosius\n    this.start = start;\n    this.end = end;\n    setStart(start);\n    setEnd(end);\n  }\n\nplease let us know if there are still problems.", "count": 1, "id": 78395, "time": "2005-08-11T05:38:17Z", "creator": "dbrosius@mebigfatguy.com", "creation_time": "2005-08-11T05:38:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "kk@kohsuke.org", "is_private": false, "count": 2, "id": 78398, "time": "2005-08-11T07:06:59Z", "bug_id": 36110, "creation_time": "2005-08-11T07:06:59Z", "text": "Sorry, that didn't fix the problem. Now it causes an NPE like this:\n\n1. the LocalVariableGen constructor sets start and end to non-null\n2. then it calls the setStart method.\n3. the setStart method calls the notifyTarget method to remove itself\n   from the old handle, and add itself to the new handle.\n4. in this case, since the start field is already set, the old handle\n   is non-null.\n5. the notifyTarget method calls the removeTargeter method to remove\n   the LocalVariableGen from the old InstructionHandle.\n6. But since this 'old' InsturctionHandle doesn't actually have any\n   targeter yet, the following method causes NPE.\n\n>  public void removeTargeter(InstructionTargeter t) {\n>    targeters.remove(t);\n>  }\n\n\nBesides, I think we really need a proper fix to this problem.\nThe suggested fix doesn't work if I attempt to move the\nstart/end more than once."}, {"count": 3, "text": "rolled back", "bug_id": 36110, "attachment_id": null, "id": 78427, "time": "2005-08-12T00:23:33Z", "creator": "dbrosius@mebigfatguy.com", "creation_time": "2005-08-12T00:23:33Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 36110, "attachment_id": null, "is_private": false, "id": 78428, "time": "2005-08-12T00:27:55Z", "creator": "dbrosius@mebigfatguy.com", "creation_time": "2005-08-12T00:27:55Z", "text": "perhaps we can just remove start and end from the hashcode calc, and perhaps \ninstead base it on index, name and type."}, {"count": 5, "tags": [], "creator": "kk@kohsuke.org", "text": "That would work for the current tests we have for javaflow. So I appreciate if\nyou could make those changes, as GUMP error messages\nare killing me now :-)\n\nBut I still hope the BCEL project will address this problem more\nfundamentally in a near future. In BCEL, I'm allowed to change\nany of index, name, and type. It will still break if someone tries\nto rename the local variable, then move its start/end range.", "id": 78429, "time": "2005-08-12T00:36:43Z", "bug_id": 36110, "creation_time": "2005-08-12T00:36:43Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 36110, "text": "this is fixed now, isnt it?", "count": 6, "id": 86378, "time": "2006-03-02T04:55:18Z", "creator": "tcurdt@apache.org", "creation_time": "2006-03-02T04:55:18Z", "is_private": false}, {"count": 7, "tags": [], "creator": "dbrosius@apache.org", "text": "(In reply to comment #6)\n> this is fixed now, isnt it?\n\nIt is patched.. The exact bug report is fixed. The problem still remains that \nif the user changes name and/or type (which is less likely) it will still \noccur.", "id": 86591, "time": "2006-03-08T06:38:21Z", "bug_id": 36110, "creation_time": "2006-03-08T06:38:21Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 36110, "is_private": false, "count": 8, "id": 86677, "time": "2006-03-10T13:16:12Z", "creator": "tcurdt@apache.org", "creation_time": "2006-03-10T13:16:12Z", "text": "Then let's close it for now ...until someone has the need to fix that case as well."}]
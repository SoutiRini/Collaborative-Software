[{"count": 0, "tags": [], "text": "We have a bug with the decoding of %2F in PATH_INFO.\nWe set \"AllowEncodedSlashes On\". \nWe have the url: \"http://172.16.0.91/VAR1=XXXX%2fVAR2=YYYY\"\nThe Apache 2.0.47 Version makes it correct and the PATH_INFO is \"VAR1=XXXX%\n2fVAR2=YYYY\".\nThe newer Version (testet 2.0.52 and 2.0.54) creates the \nPATH_INFO \"VAR1=XXXX/VAR2=YYYY\".", "attachment_id": null, "id": 76135, "creator": "daniel.koke@iconparc.de", "time": "2005-06-07T17:33:49Z", "bug_id": 35256, "creation_time": "2005-06-07T17:33:49Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 35256, "attachment_id": null, "is_private": false, "id": 77284, "time": "2005-07-14T12:59:15Z", "creator": "thomas.stein@knowledgetools.de", "creation_time": "2005-07-14T12:59:15Z", "text": "Hello. \n \nExactly the same problem here.Any progress on this issue? \n \nregards \nthomas \n \n "}, {"text": "Created attachment 15682\nAllowEncodedSlashes without decoding\n\nHello. \n \nAfter some investigations i was able to solve this issue. To be a little more \nspecific, this problem only occured with a ProxyPass Directive in httpd.conf. \nAfter applying the attached patch the problem disappeared. \n \nbest regards \nThomas", "tags": [], "bug_id": 35256, "is_private": false, "count": 2, "id": 77338, "time": "2005-07-15T16:30:28Z", "creator": "thomas.stein@knowledgetools.de", "creation_time": "2005-07-15T16:30:28Z", "attachment_id": 15682}, {"text": "I also had this problem.  However, the new line of code specified in Thomas'\ncode did not fix the problem for me.  What I ended up doing is taking that line\nof code and moved it a few lines higher, so that it is the first line inside the\nfor loop of proxy_trans(), which is line 149.  That did the trick for me.", "tags": [], "bug_id": 35256, "attachment_id": null, "count": 3, "id": 90031, "time": "2006-06-09T21:45:24Z", "creator": "hmak@iii.com", "creation_time": "2006-06-09T21:45:24Z", "is_private": false}, {"count": 4, "tags": [], "text": "I am also experiencing this problem but without any proxy stuff.", "is_private": false, "id": 91208, "creator": "issues.apache.org@l4w.info", "time": "2006-07-12T14:03:49Z", "bug_id": 35256, "creation_time": "2006-07-12T14:03:49Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 35256, "is_private": false, "text": "Reproducible on Trunk. (2.3-HEAD)\nProxyPass does not have any effect on this issue.\nIt can be reproduced on default apache install, and having\n \"AllowEncodedSlashes On\"\n\n1) Using '\\' -> %5c\n|(echo \"GET /cgi-bin/printenv/my%5cparam HTTP/1.0\\n\\n\" ;sleep 1) | telnet \nagneyam 8080\nTrying 129.158.224.203...\nConnected to agneyam.india.sun.com.\nEscape character is '^]'.\nHTTP/1.1 200 OK\nDate: Wed, 12 Sep 2007 10:42:09 GMT\nServer: Apache/2.3.0-dev (Unix)\nConnection: close\nContent-Type: text/plain; charset=iso-8859-1\n\nDOCUMENT_ROOT=\"/space/store/httpd/htdocs\"\nGATEWAY_INTERFACE=\"CGI/1.1\"\nPATH=\"/bin:/usr/bin\"\nPATH_INFO=\"/my\\param\"\nPATH_TRANSLATED=\"/space/store/httpd/htdocs/my\\param\"\nQUERY_STRING=\"\"\nREMOTE_ADDR=\"129.158.224.78\"\nREMOTE_PORT=\"50617\"\nREQUEST_METHOD=\"GET\"\nREQUEST_URI=\"/cgi-bin/printenv/my%5cparam\"\nSCRIPT_FILENAME=\"/space/store/httpd/cgi-bin/printenv\"\nSCRIPT_NAME=\"/cgi-bin/printenv\"\nSERVER_ADDR=\"129.158.224.203\"\nSERVER_ADMIN=\"you@example.com\"\nSERVER_NAME=\"agneyam\"\nSERVER_PORT=\"80\"\nSERVER_PROTOCOL=\"HTTP/1.0\"\nSERVER_SIGNATURE=\"\"\nSERVER_SOFTWARE=\"Apache/2.3.0-dev (Unix)\"\nTZ=\"Asia/Calcutta\"\n\n2) Using '/' -> %2f\n|(echo \"GET /cgi-bin/printenv/my%2fparam HTTP/1.0\\n\\n\" ;sleep 1) | telnet \nagneyam 8080 \nTrying 129.158.224.203...\nConnected to agneyam.india.sun.com.\nEscape character is '^]'.\nHTTP/1.1 200 OK\nDate: Wed, 12 Sep 2007 10:43:38 GMT\nServer: Apache/2.3.0-dev (Unix)\nConnection: close\nContent-Type: text/plain; charset=iso-8859-1\n\nDOCUMENT_ROOT=\"/space/store/httpd/htdocs\"\nGATEWAY_INTERFACE=\"CGI/1.1\"\nPATH=\"/bin:/usr/bin\"\nPATH_INFO=\"/my/param\"\nPATH_TRANSLATED=\"/space/store/httpd/htdocs/my/param\"\nQUERY_STRING=\"\"\nREMOTE_ADDR=\"129.158.224.78\"\nREMOTE_PORT=\"59458\"\nREQUEST_METHOD=\"GET\"\nREQUEST_URI=\"/cgi-bin/printenv/my%2fparam\"\nSCRIPT_FILENAME=\"/space/store/httpd/cgi-bin/printenv\"\nSCRIPT_NAME=\"/cgi-bin/printenv\"\nSERVER_ADDR=\"129.158.224.203\"\nSERVER_ADMIN=\"you@example.com\"\nSERVER_NAME=\"agneyam\"\nSERVER_PORT=\"80\"\nSERVER_PROTOCOL=\"HTTP/1.0\"\nSERVER_SIGNATURE=\"\"\nSERVER_SOFTWARE=\"Apache/2.3.0-dev (Unix)\"\nTZ=\"Asia/Calcutta\"\n", "id": 108061, "time": "2007-09-12T03:53:42Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2007-09-12T03:53:42Z", "attachment_id": null}, {"text": "Created attachment 20796\nPatch allows letting %2f and %2c to pass unmolested in urldecode.\n\nThe docs state that:\nThe AllowEncodedSlashes directive allows URLs which contain encoded path\nseparators (%2F for /  and additionally %5C for \\ on according systems) to be\nused. Normally such URLs are refused with a 404 (Not found) error.\n\nTurning AllowEncodedSlashes On is mostly useful when used in conjunction with\nPATH_INFO.\n\nAllowing encoded slashes does not imply decoding. Occurrences of %2F or %5C\n(only on according systems) will be left as such in the otherwise decoded URL\nstring.\n\nBut the unpatched ap_unescape_url_keep2f does not behave that way. It goes\nahead and decrypts all the encoded chars found.\n\nThe patch attached checks for both %2f and %2c, and if either of the above,\nlets them pass unchanged. Note that I did not use IS_SLASH to check as I do not\nunderstand why this needs to be system dependent. Especially since the apache\nmay be acting as a reverse proxy whose origin server might be on a system with\na different separator.", "tags": [], "bug_id": 35256, "attachment_id": 20796, "count": 6, "id": 108066, "time": "2007-09-12T06:12:47Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2007-09-12T06:12:47Z", "is_private": false}, {"count": 7, "tags": [], "text": "*** Bug 43192 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 108140, "creator": "nick@webthing.com", "time": "2007-09-13T06:54:11Z", "bug_id": 35256, "creation_time": "2007-09-13T06:54:11Z", "is_private": false}, {"count": 8, "tags": [], "text": "Created attachment 20856\nPatch to allow AllowEncodedChars\n\nPatch to add AllowEncodedChars.\nThe AllowEncodedChars accepts multiple chars that are allowed to pass through\nhttpd with out being decoded. If the specified chars do not contain '/' and the\n\nURL contains '/' encoded as %2f, then NOT_FOUND is returned. The same behavior\nis\ntrue for '\\'.\n\n(First Cut, The patch is largish, and some what ugly,\nDo let me know how this can be improved.)", "is_private": false, "id": 108431, "creator": "rahul.g.nair@gmail.com", "time": "2007-09-20T01:00:02Z", "bug_id": 35256, "creation_time": "2007-09-20T01:00:02Z", "attachment_id": 20856}, {"text": "Voting early/voting often since I will not have a chance to look at this, \nthis week.  strong veto (-1)...\n\nI've watched jk try to do the same thing and I'm getting slightly tweaked\nabout patches like this.  Each hole you \"close\" is another hole you open up.\nEach encoded character has a meaning, skip a encode/decode ***or just as bad***\ndouble an encode/decode and you pass things through to another application\nwhich can be equally harmful.\n\nI believe there are two sane ways to handle this, and it's never in urldecode.\n\nOne is to represent, in an extended character set, the symbolic '/' and '\\'\nas special-characters, while the textual (encoded) '/' and '\\' become their\ntext representations, exactly those symbols.  Alternately, a series of '/'\nelements can be represented as path_elts segment by segment, with the textual\n'/' members in those patterns.\n\nThe other is to provide remappings but NEVER on a global scale; it must be\ndealt with in a application by application basis.  So I would consider, for\nexample, a patch to handle this cleverly for PATH_INFO variables, but not a\npatch which affected all modules without thought.\n\nRather than 'Don't decode \"/\"' I'd much rather see a patch 'map \"/\" as \"%2F\"',\nwhere the escape could be to \"\\x2F\" instead, reducing the likelyhood of opening\nup new security holes where none existed before.  That map could either address\nthe issue of a \"/\" symbol or the encoded \"/\" text.  Only ambiguous symbols could\nbe allowed processing this way.\n", "tags": [], "bug_id": 35256, "attachment_id": null, "count": 9, "id": 108432, "time": "2007-09-20T01:31:47Z", "creator": "wrowe@apache.org", "creation_time": "2007-09-20T01:31:47Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 35256, "attachment_id": null, "is_private": false, "id": 111731, "time": "2007-12-12T22:11:42Z", "creator": "barry.kaplan@gmail.com", "creation_time": "2007-12-12T22:11:42Z", "text": "this bug exists in 2.2.6 as well"}, {"count": 11, "tags": [], "bug_id": 35256, "is_private": false, "text": "I'm hoping I can resurrect this bug. It is still an issue in 2.2.8 (and it appears beyond) and is a real problem when creating APIs that use PATH_INFO for identifying resources. It's basically nigh on impossible to have a resource with a name of 'foo/bar' even when you're good and escape with 'foo%2Fbar'.\n\nIf you try a PUT to /something/foo%2Fbar the handler for that PUT (say mod_wsgi or CGI) gets /something/foo/bar which is _not_ the same thing.", "id": 126497, "time": "2009-04-24T11:15:31Z", "creator": "chris.dent@gmail.com", "creation_time": "2009-04-24T11:15:31Z", "attachment_id": null}, {"count": 12, "tags": [], "text": "*If* this patch is to be considered...\n\nUnadorned '%' symbols would not be permitted.  It would be necessary to\nretain to the %25 translation of all occurrences.  This would prevent users\nfrom patterns such as %25%32%4F from tripping past the parsers and being \nrendered valid, in spite of URL rules prohibiting them.", "attachment_id": null, "id": 130694, "creator": "wrowe@apache.org", "time": "2009-09-26T09:21:21Z", "bug_id": 35256, "creation_time": "2009-09-26T09:21:21Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 35256, "attachment_id": null, "id": 135212, "time": "2010-03-09T20:37:30Z", "creator": "wrowe@apache.org", "creation_time": "2010-03-09T20:37:30Z", "is_private": false, "text": "My question is; what is adding the string %2f to the token?\n\nIf the string needs to be the Literal Text, e.g. a file names foo%2fbar, that\nURL is only valid if the '%' is escaped by the client.\n\nE.g. to retrieve /foo%2fbar - the string /foo%252fbar must be passed as the\nrequest URI.  It isn't a question of accepting '%2F' but a question of passing\nthe percent as an encoded literal; refer to http://tools.ietf.org/html/rfc2396\nsection 2.4.2;\n\n   Because the percent \"%\" character always has the reserved purpose of\n   being the escape indicator, it must be escaped as \"%25\" in order to\n   be used as data within a URI.  Implementers should be careful not to\n   escape or unescape the same string more than once, since unescaping\n   an already unescaped string might lead to misinterpreting a percent\n   data character as another escaped character, or vice versa in the\n   case of escaping an already escaped string.\n\nThe reason %2f or %5C are decrypted goes to this statement;\n\n   In some cases, data that could be represented by an unreserved\n   character may appear escaped; for example, some of the unreserved\n   \"mark\" characters are automatically escaped by some systems.  If the\n   given URI scheme defines a canonicalization algorithm, then\n   unreserved characters may be unescaped according to that algorithm.\n   For example, \"%7e\" is sometimes used instead of \"~\" in an http URL\n   path, but the two are equivalent for an http URL.\n\nThe keyword here is 'equivalent'.  httpd cannot preserve the %2F text while\nallowing safe reencoding/redecoding.\n\nIf the client is failing to escape '%' that is a client flaw; please mention\nwhat the origin of this filename pattern is.  A form submission?\n\nWe concur the documentation is entirely broken and needs to be revisited."}, {"count": 14, "tags": [], "text": "I understand your hint to the rfc2396 but with the AllowEncodedSlashes-directive i can change that behaviour:\n\"Allowing encoded slashes does not imply decoding. Occurrences of %2F or %5C (only on according systems) will be left as such in the otherwise decoded URL string\"\n(http://httpd.apache.org/docs/2.2/en/mod/core.html#allowencodedslashes) \n\ne.g.\nwww.myurl.de/test/test.html\n\nNow i want to add a path variable:\nwww.myurl.de/test/var=variable_content/test.html\n-> url www.myurl.de/test/test.html is called\n\nThe variable_content will be encoded by the system. If the variable_content contains a path e.g. \"foo/bar\" it will be encoded to \"foo%2fbar\" and added to the url:\nwww.myurl.de/test/var=foo%2fbar/test.html\n-> url www.myurl.de/test/bar/test.html is called !!!!\n\nI interpret the directive AllowEncodedSlashes to force my wanted behaviour. The %2f should not be decoded (like the docu says) and the called url should be www.myurl.de/test/test.html\n\n\n(In reply to comment #13)\n> My question is; what is adding the string %2f to the token?\n> If the string needs to be the Literal Text, e.g. a file names foo%2fbar, that\n> URL is only valid if the '%' is escaped by the client.\n> E.g. to retrieve /foo%2fbar - the string /foo%252fbar must be passed as the\n> request URI.  It isn't a question of accepting '%2F' but a question of passing\n> the percent as an encoded literal; refer to http://tools.ietf.org/html/rfc2396\n> section 2.4.2;\n>    Because the percent \"%\" character always has the reserved purpose of\n>    being the escape indicator, it must be escaped as \"%25\" in order to\n>    be used as data within a URI.  Implementers should be careful not to\n>    escape or unescape the same string more than once, since unescaping\n>    an already unescaped string might lead to misinterpreting a percent\n>    data character as another escaped character, or vice versa in the\n>    case of escaping an already escaped string.\n> The reason %2f or %5C are decrypted goes to this statement;\n>    In some cases, data that could be represented by an unreserved\n>    character may appear escaped; for example, some of the unreserved\n>    \"mark\" characters are automatically escaped by some systems.  If the\n>    given URI scheme defines a canonicalization algorithm, then\n>    unreserved characters may be unescaped according to that algorithm.\n>    For example, \"%7e\" is sometimes used instead of \"~\" in an http URL\n>    path, but the two are equivalent for an http URL.\n> The keyword here is 'equivalent'.  httpd cannot preserve the %2F text while\n> allowing safe reencoding/redecoding.\n> If the client is failing to escape '%' that is a client flaw; please mention\n> what the origin of this filename pattern is.  A form submission?\n> We concur the documentation is entirely broken and needs to be revisited.", "attachment_id": null, "id": 135227, "creator": "daniel.koke@iconparc.de", "time": "2010-03-10T08:42:20Z", "bug_id": 35256, "creation_time": "2010-03-10T08:42:20Z", "is_private": false}, {"count": 15, "tags": [], "text": "My company has also run into several issues with AllowEncodedSlashes already. These issues mostly come up in cases where PATH_INFO is being used either in a resource name for a REST API or for an asset name for a video, document, news article, etc. that contains a slash in it's name. This makes us very invested in this issue. Quite honestly the current implementation is wrong and violates RFC.\n\nCheck out Example 2 from the REDUCED OR INCREASED SAFE CHARACTER SETS section of RFC 1630:\n\n   Example 2\n\n   The URIs\n\n                http://info.cern.ch/albert/bertram/marie-claude\n\n   and\n\n                http://info.cern.ch/albert/bertram%2Fmarie-claude\n\n   are NOT identical, as in the second case the encoded slash does not\n   have hierarchical significance.\n\n\nTim specifically called out this example in RFC 1630 and it is of great importance to us for two reasons:\n\n1. It shows concretely that having a %2F in the URL is valid. By having the default behavior of httpd to reject this request with a 404 error makes it non RFC 1630 compliant out-of-box.\n\n2. Even it we turn on AllowEncodedSlashes, httpd interpolates the %2F as a path separator, violating RFC 1630 because it makes the two URLs in Example 2 above equivalent. ex. If \"albert\" is the name of the script or handler, then the PATH_INFO for both URLs will be \"/bertram/marie-claude\" -- which is indistinguishable from one one another, therefore making them identical.\n\nOf note is that RFC 1630 has not been updated by or obsoleted by any other RFC and is still the basis for URLs in WWW -- something core to httpd. \n\nWhile Section 2.4.2 of RFC 2396 (section 2.4 in RFC 3986 that obsoletes RFC 2396) mentions that a tilde (~) and a %7E can be used interchanably in a URL, it is not pertenient to this issue since a tilde is not a \"reserved character\" (specifically called out as an \"unreserved character\"), yet a slash (/) is reserved.\n\nFrom Section 2.2 of RFC 3986:\n\n     reserved    = gen-delims / sub-delims\n\n      gen-delims  = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\n\n      sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                  / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n   The purpose of reserved characters is to provide a set of delimiting\n   characters that are distinguishable from other data within a URI.\n   URIs that differ in the replacement of a reserved character with its\n   corresponding percent-encoded octet are not equivalent.  PERCENT-\n   ENCODING A RESERVED CHARACTER, OR DECODING A PERCENT-ENCODED OCTET\n   THAT CORRESPONDS TO A RESERVED CHARACTER, WILL CHANGE HOW THE URI IS\n   INTERPRETED BY MOST APPLICATIONS.  THUS, CHARACTERS IN THE RESERVED\n   SET ARE PROTECTED FROM NORMALIZATION AND ARE THEREFORE SAFE TO BE\n   USED BY SCHEME-SPECIFIC AND PRODUCER-SPECIFIC ALGORITHMS FOR\n   DELIMITING DATA SUBCOMPONENTS WITHIN A URI.\n\nI realize that it does say \"most applications\", however, it does go on in the next statement to say that \"characters in the reserved set are protected from normalization\".\n\nTherefore the correct solution here is to change httpd to NEVER decode any of the reserved characters from the ABNF. This would follow RFC 1630 & RFC 3986 and would also make the note in the documenation for the AllowEncodedSlashes directive (http://httpd.apache.org/docs/2.2/en/mod/core.html#allowencodedslashes) correct once again in that slashes will not be decoded.\n\nTwo additional notes:\n\n1. AllowEncodedSlashes should really be \"on\" by default and probably even deprecated. From what I can tell the only thing it protects against is poor application writers and does it in a less-than-graceful way by slapping up a 404. It also seems a very small percentage of people even know about the AllowEncodedSlashes and those that do end up turning it on because they found out about it because they spent a few hours scratching their head, modifying configurations and rewrite rules trying to figure out why a valid URL was being rejected.\n\n2. Nowhere the RFCs is a backslash (\\) listed as a reserved character. Therefore a %5C *should* always be decoded the same as %7E is converted to a tilde (~).", "is_private": false, "id": 142972, "creator": "apache.org-2@timothyace.com", "time": "2010-12-28T15:33:41Z", "bug_id": 35256, "creation_time": "2010-12-28T15:33:41Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "Changed in trunk and next 2.2 release, hopefully in a way that will satisfy most users.  \n\nAllowEncodedSlashes On still decodes slashes, but new option AllowEncodedSlashes NoDecode will allow the slashes and not decode them.  Doc has been updated.\n\ntrunk r1082196\n2.2.x r1082630", "attachment_id": null, "id": 145068, "creator": "poirier@pobox.com", "time": "2011-03-17T14:47:39Z", "bug_id": 35256, "creation_time": "2011-03-17T14:47:39Z", "is_private": false}, {"count": 17, "tags": [], "text": "This is a good solution that maintains backwards compatibility. Thank you.", "attachment_id": null, "id": 145071, "creator": "apache.org-2@timothyace.com", "time": "2011-03-17T14:55:20Z", "bug_id": 35256, "creation_time": "2011-03-17T14:55:20Z", "is_private": false}, {"count": 18, "attachment_id": null, "bug_id": 35256, "is_private": false, "id": 145079, "time": "2011-03-18T03:10:27Z", "creator": "daniel.koke@iconparc.de", "creation_time": "2011-03-18T03:10:27Z", "tags": [], "text": "Thank you"}, {"count": 19, "tags": [], "creator": "armhold@cs.rutgers.edu", "attachment_id": null, "id": 147232, "time": "2011-06-17T18:10:38Z", "bug_id": 35256, "creation_time": "2011-06-17T18:10:38Z", "is_private": false, "text": "I just tried \"AllowEncodedSlashes NoDecode\", and found that both 2.2.19 and 2.3.12-beta seem to *doubly* encode the slashes with this option enabled.\n\nSo if my URI is entered as \"/search/-/%2Fcats/all/1-10\", my httpd-fronted appserver (Glassfish 3.1) is seeing this as \"/search/-/%252Fcat/all/1-10\".\n\nAnd BTW Glassfish has a similar issue- it needs to be told to allow encoded slashes: http://www.java.net/node/695173.  I have this enabled, and it works fine when I use Glassfish directly without Apache in front of it.\n\nThanks for your attention."}, {"text": "(In reply to comment #19)\n> I just tried \"AllowEncodedSlashes NoDecode\", and found that both 2.2.19 and\n> 2.3.12-beta seem to *doubly* encode the slashes with this option enabled.\n\nThis is likely mod_proxy canonicalizing the request before sending it off -- can you confirm with nocanon?", "tags": [], "bug_id": 35256, "is_private": false, "count": 20, "id": 147233, "time": "2011-06-17T18:15:53Z", "creator": "covener@gmail.com", "creation_time": "2011-06-17T18:15:53Z", "attachment_id": null}, {"count": 21, "attachment_id": null, "bug_id": 35256, "is_private": false, "id": 147234, "time": "2011-06-17T18:52:11Z", "creator": "armhold@cs.rutgers.edu", "creation_time": "2011-06-17T18:52:11Z", "tags": [], "text": "Ah, it does indeed work with \"nocanon\".  Still a bug? I'm out of my depth now, and unqualified to say whether that's correct or not.  Thanks."}, {"count": 22, "tags": [], "bug_id": 35256, "is_private": false, "text": "This directive doesn't influence what other modules do with URL's, re-closing.", "id": 148443, "time": "2011-08-06T23:28:46Z", "creator": "covener@gmail.com", "creation_time": "2011-08-06T23:28:46Z", "attachment_id": null}]
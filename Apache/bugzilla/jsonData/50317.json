[{"count": 0, "tags": [], "text": "Created attachment 26333\nProposed fix\n\nHello.\n\nI configured apache (2.2.17) as written in\nhttp://httpd.apache.org/docs/current/mod/mod_cache.html#thunderingherd\nNevertheless, more than one request hit the backend. The Backend sends neither\na ETag nor Last-Modified header but it sends an Expires header. I took a look\ninto mod_cache and made the attached patch.\n\nThe problem was in cache_storage.c:\n                    irv = cache->provider->remove_url(h, r->pool);\nBecause of this line, there is no stale content left to serve, while getting a\nnewer version from the backend. There is no use in deleting this entry anyway,\nbecause at this point, there is still interest in this url and the cache entry\nwill be regenerated very soon.\n\nWhile investigating this, I found:\n                rv = ap_cache_try_lock(conf, r, NULL);\nin mod_cache.c. This seems useless, because the lockfile is already created \nin cache_util.c ap_cache_check_freshness(). Because of the NULL, it uses\nthe same lockfile for different URLs. I am unsure about the intention of\nthis second lock. \n\nWith kind regards,\n\nJulius Gehr", "attachment_id": 26333, "id": 141935, "creator": "jules@neofonie.de", "time": "2010-11-22T15:09:42Z", "bug_id": 50317, "creation_time": "2010-11-22T15:09:42Z", "is_private": false}, {"count": 1, "tags": [], "creator": "rein@basefarm.no", "attachment_id": null, "id": 149904, "time": "2011-09-28T11:50:51Z", "bug_id": 50317, "creation_time": "2011-09-28T11:50:51Z", "is_private": false, "text": "The problem reported here appear to be fixed in cache_storage.c revision 1023398, which is in trunk and 2.3.  It should imo be backported to 2.2, as thundering herd protection now effectively requires either Last-Modified or ETag headers in the cached response.  Headers which are seldom present in dynamically generated content, which happen to be exactly the type of content I find it useful to cache :-(  I found this report while investigating why the thundering herd protection didn't work as expected.\n\nThe comment about the cache lock in the bug report appear to be bogus.  The second call to ap_cache_try_lock is for the case when there are no cached content.  The lock is only acquired by ap_cache_check_freshness when it finds stale content in the cache. ap_cache_try_lock will generate the cache key based on the requested URL when its third argument is NULL, and it will notice that the lock is already held if called for a second time for the same request.\n\n--\nRein Tollevik\nBasefarm AS"}, {"count": 2, "tags": [], "creator": "piotrglow@gmail.com", "attachment_id": null, "id": 172574, "time": "2014-01-20T21:45:10Z", "bug_id": 50317, "creation_time": "2014-01-20T21:45:10Z", "is_private": false, "text": "Hi, \n\nI am using apache 2.2.26 and I can see that thundering herd protection does not work at all. I encountered the same sympthoms as described by Julius.\n\nIt seems that fix is only present in trunk and was not merged to 2.2.x branch.\n\nAre there any plans to fix thundering herd effect in 2.2.x by merging the fix?\n\nBr,\nPiotr G"}, {"count": 3, "tags": [], "bug_id": 50317, "attachment_id": null, "id": 173581, "time": "2014-03-03T12:12:52Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-03-03T12:12:52Z", "is_private": false, "text": "Hello,\n\nIs there any chance to fix this error?\n\nBest regards\nMaciej Bogucki"}, {"count": 4, "tags": [], "text": "restore version so it doesn't look like a 2.0 bug.", "attachment_id": null, "id": 173583, "creator": "covener@gmail.com", "time": "2014-03-03T12:32:18Z", "bug_id": 50317, "creation_time": "2014-03-03T12:32:18Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "Changed to 2.2.26 bug.", "id": 173584, "time": "2014-03-03T13:06:55Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-03-03T13:06:55Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50317, "attachment_id": 31503, "text": "Created attachment 31503\n2.2 thundering herd fix\n\nThe attached patched was discussed and looked at by myself, covener, and mrumph today at ApacheCon. This fixes the thundering herd problem in 2.2. It also addresses r572626 (https://issues.apache.org/bugzilla/show_bug.cgi?id=30370) that created this regression. So, this patch fixes both the original problem in 30370 as well as this issue. It applies only to 2.2; >= 2.3 was fixed in r1023398.\n\nTo summarize: without this patch, 2.2 has NO protection from the thundering herd, as the stale content is removed before being refreshed. Thus, all subsequent herd requests have no stale content to serve and flow through to the backend.\n\nShould the documentation be updated also to alert users to this? That is that \"2.2.x before 2.2.__ is not protected from the thundering herd\"?", "id": 174428, "time": "2014-04-09T21:55:43Z", "creator": "jim@riggs.me", "creation_time": "2014-04-09T21:55:43Z", "is_private": false}, {"count": 7, "tags": [], "creator": "jim@riggs.me", "attachment_id": 31504, "id": 174429, "time": "2014-04-09T22:03:59Z", "bug_id": 50317, "creation_time": "2014-04-09T22:03:59Z", "is_private": false, "text": "Created attachment 31504\nCovener's patch\n\nThis is the covener's patch posted to dev@ that is only slightly different from mine, but closer to trunk/2.4."}, {"count": 8, "tags": [], "bug_id": 50317, "text": "Thank You very much for the patch but it doesn't works. When I'm doing ab (/usr/bin/ab -k -c 5 -n 10 http://host/url) test the application get more than one request\n\n1.1.1.1 - - [14/Apr/2014:14:01:58 +0200] \"GET /url HTTP/1.0\" 200 42398 9A68DBA96CED90DC517F7D6302F5A748.gpi-app1 1163 1163\n1.1.1.1 - - [14/Apr/2014:14:02:05 +0200] \"GET /url HTTP/1.0\" 200 42398 D378685BBD4FB87C63A3A867ABFAFB3E.gpi-app1 2931 2930\n1.1.1.1 - - [14/Apr/2014:14:02:05 +0200] \"GET /url HTTP/1.0\" 200 42398 8B77A0C68FC6F16E0BA3A89C7A614E1A.gpi-app1 2992 2991\n1.1.1.1 - - [14/Apr/2014:14:02:05 +0200] \"GET /url HTTP/1.0\" 200 42398 57A48B49FB6C52E28F1FA97DDFCDC0C8.gpi-app1 3007 3006\n1.1.1.1 - - [14/Apr/2014:14:02:05 +0200] \"GET /url HTTP/1.0\" 200 42398 71573080388181B3C55E88CB4BFAB890.gpi-app1 3051 3051\n1.1.1.1 - - [14/Apr/2014:14:02:06 +0200] \"GET /url HTTP/1.0\" 200 42398 38DA8533D4F9B4046A2F607071652E94.gpi-app1 1412 1412\n\n\nHere are more information how to reproduce it.\n\nCompilation\n\ncd /tmp\nsvn co http://svn.apache.org/repos/asf/httpd/httpd/branches/2.2.x\ncd 2.2.x/\nsvn co http://svn.apache.org/repos/asf/apr/apr/branches/1.4.x srclib/apr\nsvn co http://svn.apache.org/repos/asf/apr/apr-util/branches/1.4.x srclib/apr-util\n./buildconf\n./configure --prefix=/etc/httpd --exec-prefix=/usr --bindir=/usr/bin \n--sbindir=/usr/sbin --mandir=/usr/share/man --libdir=/usr/lib64 \n--sysconfdir=/etc/httpd/conf --includedir=/usr/include/httpd \n--libexecdir=/usr/lib64/httpd/modules --datadir=/var/www \n--with-installbuilddir=/usr/lib64/httpd/build --with-mpm=prefork \n--with-apr=/usr --with-apr-util=/usr --enable-suexec --with-suexec \n--with-suexec-caller=apache --with-suexec-docroot=/var/www \n--with-suexec-logfile=/var/log/httpd/suexec.log \n--with-suexec-bin=/usr/sbin/suexec --with-suexec-uidmin=500 \n--with-suexec-gidmin=100 --enable-pie --with-pcre \n--enable-mods-shared=all --enable-ssl --with-ssl --enable-proxy \n--enable-cache --enable-disk-cache --enable-ldap --enable-authnz-ldap \n--enable-cgid --enable-authn-anon --enable-authn-alias \n--disable-imagemap\npatch -p0 < /root/rpmbuild/SOURCES/httpd-2.2.x-thunder.patch\nmake\nmake install\n\nConfiguration\n\n<VirtualHost host:80>\n    ...\n    ...\n    ## Cache\n    CacheRoot /tmp/cache\n    CacheEnable disk /\n    CacheDisable /static/\n    CacheMinFileSize 0\n    CacheMaxFileSize 1048576\n    CacheDirLevels 2\n    CacheDirLength 2\n    CacheLock on\n    CacheLockPath /tmp/mod_cache-lock\n    CacheLockMaxAge 5\n    CacheIgnoreHeaders ETag Set-Cookie\n    Header unset Expires\n    Header unset Cache-Control\n    Header always set Cache-Control \"max-age=30,stale-while-revalidate=15\"\n</VirtualHost>", "id": 174551, "time": "2014-04-14T12:46:29Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-04-14T12:46:29Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 50317, "attachment_id": null, "id": 174552, "time": "2014-04-14T12:51:56Z", "creator": "covener@gmail.com", "creation_time": "2014-04-14T12:51:56Z", "is_private": false, "text": "(In reply to macbogucki from comment #8)\n> Thank You very much for the patch but it doesn't works. When I'm doing ab\n> (/usr/bin/ab -k -c 5 -n 10 http://host/url) test the application get more\n> than one request\n> \n\nhard to review without Age headers and LogLevel debug output (* before/after)"}, {"count": 10, "tags": [], "text": "Is this test with a primed cache? The first time through (when there is nothing in the cache), the thundering herd always goes through, so you SHOULD see multiple requests on the backend. (There is nothing stale to serve.)\n\nOnce the cache has content, though, stale content will get served while a refresh/revalidate request is processing.", "attachment_id": null, "id": 174553, "creator": "jim@riggs.me", "time": "2014-04-14T12:56:28Z", "bug_id": 50317, "creation_time": "2014-04-14T12:56:28Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 50317, "text": "Created attachment 31522\naccess_log", "id": 174573, "time": "2014-04-15T05:49:55Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-04-15T05:49:55Z", "is_private": false, "attachment_id": 31522}, {"count": 12, "tags": [], "creator": "macbogucki@gmail.com", "attachment_id": 31523, "id": 174574, "time": "2014-04-15T05:50:13Z", "bug_id": 50317, "creation_time": "2014-04-15T05:50:13Z", "is_private": false, "text": "Created attachment 31523\nerror_log"}, {"count": 13, "tags": [], "text": "Created attachment 31524\ntomcat_log", "attachment_id": 31524, "id": 174575, "creator": "macbogucki@gmail.com", "time": "2014-04-15T05:50:25Z", "bug_id": 50317, "creation_time": "2014-04-15T05:50:25Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 50317, "text": "I have just attached 3 files\n* access_log \n* error_log\n* tomcat_log (application server log)\n\n\n* At 07:31:40 I ran the command '/usr/bin/GET -des http://apache-app1/url'\n** There is nothing in the cache so the response was inserted in the cache\n\n* At 07:32:25 I ran the command '/usr/bin/ab -k -c 2 -n 4 http://apache-app1/url'\n** All the responses was served from the cache\n\n* At  07:32:37 I ran the command '/usr/bin/ab -k -c 2 -n 4 http://apache-app1/url'\n** 3 responses was served from the cache but 3 was serverd from the application server. \n\nI don't understand why only 3 responses were served from the cache in the third case.", "id": 174576, "time": "2014-04-15T06:02:51Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-04-15T06:02:51Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "text": "(In reply to macbogucki from comment #14)\n> I have just attached 3 files\n> * access_log \n> * error_log\n> * tomcat_log (application server log)\n> \n> \n> * At 07:31:40 I ran the command '/usr/bin/GET -des http://apache-app1/url'\n> ** There is nothing in the cache so the response was inserted in the cache\n> \n> * At 07:32:25 I ran the command '/usr/bin/ab -k -c 2 -n 4\n> http://apache-app1/url'\n> ** All the responses was served from the cache\n> \n> * At  07:32:37 I ran the command '/usr/bin/ab -k -c 2 -n 4\n> http://apache-app1/url'\n> ** 3 responses was served from the cache but 3 was serverd from the\n> application server. \n> \n> I don't understand why only 3 responses were served from the cache in the\n> third case.\n\nI don't understand why you are seeing different results. I just ran a test with your configuration (except I set max-age=10). I then ran `ab -k -c 2 -t 30' (30-second test), and only 3 requests went to the backend as expected.\n\nCovener - What are you seeing?", "attachment_id": null, "id": 174592, "creator": "jim@riggs.me", "time": "2014-04-15T13:10:10Z", "bug_id": 50317, "creation_time": "2014-04-15T13:10:10Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 50317, "text": "(In reply to Jim Riggs from comment #15)\n> I don't understand why you are seeing different results. I just ran a test\n> with your configuration (except I set max-age=10). I then ran `ab -k -c 2 -t\n> 30' (30-second test), and only 3 requests went to the backend as expected.\n\nAnd that was 50,000 requests. 3 went to the backend.\n\nI do notice, however, that when we serve stale content we are not setting an Age header. It seems that RFC2616[1][2] requires this for 1.1: \"An HTTP/1.1 server that includes a cache MUST include an Age header field in every response generated from its own cache.\" So should we setting an Age header \"in every response\", even when we are serving stale cache? If so, what value do we use for the age? The real (now expired) age? Does anyone know what real-world affect that would have downstream?\n\n\n[1] http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.6\n[2] http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.2.3", "id": 174594, "time": "2014-04-15T13:30:15Z", "creator": "jim@riggs.me", "creation_time": "2014-04-15T13:30:15Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "> Covener - What are you seeing?\n\nI can't get it to misbehave, i trigger a slow refresh and hammer it with ab. I do see the Age: quirk where it seems to set the Age relative to the refresh time rather than the real age.", "id": 174608, "time": "2014-04-16T00:20:12Z", "creator": "covener@gmail.com", "creation_time": "2014-04-16T00:20:12Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 50317, "text": "Created attachment 31532\nhttpd.conf-bad - use this to reproduce", "id": 174615, "time": "2014-04-16T09:55:00Z", "creator": "macbogucki@gmail.com", "creation_time": "2014-04-16T09:55:00Z", "is_private": false, "attachment_id": 31532}, {"count": 19, "attachment_id": 31533, "creator": "macbogucki@gmail.com", "is_private": false, "id": 174616, "time": "2014-04-16T09:55:30Z", "bug_id": 50317, "creation_time": "2014-04-16T09:55:30Z", "tags": [], "text": "Created attachment 31533\nhttpd.conf-notworkaround"}, {"count": 20, "tags": [], "creator": "macbogucki@gmail.com", "attachment_id": 31534, "id": 174617, "time": "2014-04-16T09:55:48Z", "bug_id": 50317, "creation_time": "2014-04-16T09:55:48Z", "is_private": false, "text": "Created attachment 31534\nhttpd.conf-workaround"}, {"count": 21, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "Couldn't this be that confs from comment #18 and comment #19 hit the \"-gzip\" ETag issue of bug 39727, whereas conf from comment #20 does not?\n\nCan you still reproduce without DEFLATE or by applying r1586542 and using the suitable DeflateAlterETag value (NoChange/Suppress)?", "id": 174620, "time": "2014-04-16T11:14:46Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-04-16T11:14:46Z", "is_private": false}, {"count": 22, "tags": [], "creator": "macbogucki@gmail.com", "attachment_id": null, "id": 174626, "time": "2014-04-16T11:29:15Z", "bug_id": 50317, "creation_time": "2014-04-16T11:29:15Z", "is_private": false, "text": "I have just attached 3 files\n* httpd.conf-bad - use this file to reproduce the problem\n* httpd.conf-notworkaround - 2 vhosts (there is a problem with such a configuration)\n** first with mod_cache and proxy to the second\n** second with deflate and proxy to the app server\n* httpd.conf-workaround - 2 vhosts (it a workaround for my problem)\n** first with deflate and proxy to the second\n** second with mod_cache and proxy to the app server\n\nThe problem is when I combine mod_proxy, mod_deflate, mod_cache\n* When I disable mod_deflate it works\n* When I serve the content from local apache then it works (there is no mod_proxy in such a case)\n\nI have also tried to use http proxy instead of ajp but without success."}, {"count": 23, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "(In reply to macbogucki from comment #22)\n> The problem is when I combine mod_proxy, mod_deflate, mod_cache\n> * When I disable mod_deflate it works\n\nDoes it work when you let mod_deflate enabled but use \"DeflateAlterETag NoChange\" from r1586542?\n\nJust to know whether the Thundering Herd fix is misbehaving or the \"-gzip\" appended ETag is the issue.", "id": 174627, "time": "2014-04-16T11:38:39Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-04-16T11:38:39Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "(In reply to Yann Ylavic from comment #23)\n> Can you still reproduce without DEFLATE or by applying r1586542 and using\n> the suitable DeflateAlterETag value (NoChange/Suppress)?\n\nBug 45023 is where this commit is proposed.", "id": 174628, "time": "2014-04-16T11:46:40Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-04-16T11:46:40Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "(In reply to Yann Ylavic from comment #23)\n> Just to know whether the Thundering Herd fix is misbehaving or the \"-gzip\"\n> appended ETag is the issue.\n\nSorry my bad, mod_deflate does not append \"-gzip\" to ETag since 2.2.12, please forget my comments.", "id": 174629, "time": "2014-04-16T12:08:57Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-04-16T12:08:57Z", "is_private": false}, {"count": 26, "tags": [], "text": "Here is the bug in the Red Hat Bugzilla - https://bugzilla.redhat.com/show_bug.cgi?id=1094990", "attachment_id": null, "id": 175072, "creator": "macbogucki@gmail.com", "time": "2014-05-07T07:06:39Z", "bug_id": 50317, "creation_time": "2014-05-07T07:06:39Z", "is_private": false}, {"count": 27, "tags": [], "text": "I was able to reproduce this bug using config from Comment 18 and the patch from Comment 7 fixed the issue for me. Is that what others see too?", "is_private": false, "id": 175339, "creator": "jkaluza@redhat.com", "time": "2014-05-20T07:42:20Z", "bug_id": 50317, "creation_time": "2014-05-20T07:42:20Z", "attachment_id": null}, {"count": 28, "tags": [], "text": "OK, probably Murphy's law, but I've reproduced it right when I sent the previous comment. I will dig deeper to find out what's causing this.", "attachment_id": null, "id": 175340, "creator": "jkaluza@redhat.com", "time": "2014-05-20T07:44:29Z", "bug_id": 50317, "creation_time": "2014-05-20T07:44:29Z", "is_private": false}, {"count": 29, "tags": [], "text": "Ok, when reproducing it, I see following in tomcat log:\n\n::1 - - [21/May/2014:03:06:05 -0400] \"GET /examples/jsp/jsp2/el/basic-arithmetic.jsp HTTP/1.0\" 200 2152\n::1 - - [21/May/2014:03:06:05 -0400] \"GET /examples/jsp/jsp2/el/basic-arithmetic.jsp HTTP/1.0\" 200 2152\n\nand following is relevant part of httpd error_log with patch from Comment 7:\n\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(596): Cache lock obtained for stale cached URL, revalidating entry: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_storage.c(272): Cached response for /examples/jsp/jsp2/el/basic-arithmetic.jsp isn't fresh.  Adding/replacing conditional request headers.\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(604): Cache already locked for stale cached URL, pretend it is fresh: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(767): cache: Caching url: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(990): cache: proactively removing the lock #2\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(310): Cache lock removed for stale cached URL, /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(404): cache: proactively removing the lock #1\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(767): cache: Caching url: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(990): cache: proactively removing the lock #2\n[Wed May 21 03:06:05 2014] [debug] cache_util.c(310): Cache lock removed for stale cached URL, /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Wed May 21 03:06:05 2014] [debug] mod_cache.c(404): cache: proactively removing the lock #1", "attachment_id": null, "id": 175361, "creator": "jkaluza@redhat.com", "time": "2014-05-21T07:16:02Z", "bug_id": 50317, "creation_time": "2014-05-21T07:16:02Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 50317, "text": "Created attachment 31643\nerror_log2 with more debugging\n\nThis error log shows one second when running \"ab\" and tomcat with patched httpd. It shows that two requests have been stored into the cache in the same second. Note that this is not \"Initial caching of an entry\" phase.\n\nLogging has been enhanced to log ap_cache_remove_lock calls and special calls of these two methods commented with \"proactively remove the lock as soon as we see the eos bucket\" in the mod_cache.c", "id": 175362, "time": "2014-05-21T07:23:57Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-21T07:23:57Z", "is_private": false, "attachment_id": 31643}, {"count": 31, "attachment_id": null, "creator": "jkaluza@redhat.com", "is_private": false, "id": 175366, "time": "2014-05-21T11:06:09Z", "bug_id": 50317, "creation_time": "2014-05-21T11:06:09Z", "tags": [], "text": "After more digging, it looks like problem is with key generated for locking in ap_cache_try_lock():\n\nSome requests come with key=\"http://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\"\n\nWhile another come with key=\"accept-encodinghttp://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\"\n\nAny ideas where that \"accept-encoding\" comes from?"}, {"count": 32, "tags": [], "creator": "jkaluza@redhat.com", "attachment_id": null, "id": 175368, "time": "2014-05-21T12:14:02Z", "bug_id": 50317, "creation_time": "2014-05-21T12:14:02Z", "is_private": false, "text": "Following change fixes the issue completely for me, but it's not the fix for the root of this problem. However, it could give idea to someone with better knowledge to find out what's going on:\n\ndiff --git a/modules/cache/cache_util.c b/modules/cache/cache_util.c\nindex cb3d565..84edcd2 100644\n--- a/modules/cache/cache_util.c\n+++ b/modules/cache/cache_util.c\n@@ -585,7 +598,7 @@ CACHE_DECLARE(int) ap_cache_check_freshness(cache_handle_t *h,\n      * A lock that exceeds a maximum age will be deleted, and another\n      * request gets to make a new lock and try again.\n      */\n-    status = ap_cache_try_lock(conf, r, (char *)h->cache_obj->key);\n+    status = ap_cache_try_lock(conf, r, NULL);\n     if (APR_SUCCESS == status) {\n         /* we obtained a lock, follow the stale path */\n         ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,\n\n\n\nh->cache_obj->key is \"accept-encodinghttp://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\" while newly generated key is \"http://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\"."}, {"count": 33, "tags": [], "bug_id": 50317, "text": "(In reply to jkaluza from comment #31)\n> After more digging, it looks like problem is with key generated for locking\n> in ap_cache_try_lock():\n> \n> Some requests come with\n> key=\"http://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\"\n> \n> While another come with\n> key=\"accept-encodinghttp://localhost:80/examples/jsp/jsp2/el/basic-\n> arithmetic.jsp?\"\n> \n> Any ideas where that \"accept-encoding\" comes from?\n\nThis is because the cache entry varies on the accept-encoding header and the original key gets regenerated by regen_key in mod_disk_cache.", "id": 175375, "time": "2014-05-21T18:31:24Z", "creator": "rpluem@apache.org", "creation_time": "2014-05-21T18:31:24Z", "is_private": false, "attachment_id": null}, {"count": 34, "tags": [], "bug_id": 50317, "attachment_id": null, "id": 175376, "time": "2014-05-22T06:49:54Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-22T06:49:54Z", "is_private": false, "text": "OK, any idea what to do about it or do you think it's OK? This leads to two requests being passed to the backend server instead of one caused by multiple (in this case two) keys used for locking.\n\nIf the key used in cache providers differs from the original one, shouldn't we generate the fresh key everytime when creating the lock to have consistent key across all ap_cache_try_lock(...) calls (basically what my change does)?\n\nOr do you think this is OK, because we get most likely (at least that's how I understand it) just maximally 2 requests to the backend server (one with original key and one with the key from cache-provider)?"}, {"count": 35, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 175378, "time": "2014-05-22T08:18:12Z", "bug_id": 50317, "creation_time": "2014-05-22T08:18:12Z", "is_private": false, "text": "(In reply to jkaluza from comment #34)\n> OK, any idea what to do about it or do you think it's OK? This leads to two\n> requests being passed to the backend server instead of one caused by\n> multiple (in this case two) keys used for locking.\n> \n> If the key used in cache providers differs from the original one, shouldn't\n> we generate the fresh key everytime when creating the lock to have\n> consistent key across all ap_cache_try_lock(...) calls (basically what my\n> change does)?\n> \n> Or do you think this is OK, because we get most likely (at least that's how\n> I understand it) just maximally 2 requests to the backend server (one with\n> original key and one with the key from cache-provider)?\n\nI think 2 requests would be ok, but possibly we find out why we have two different keys anyway, because after opening the cache entity we should only have the one from the cache provider. How does this behave on trunk / 2.4.x?\nCurrently no time to dig further."}, {"count": 36, "tags": [], "text": "The problem is that key is generated without opening cached entity in this place:\n\nhttp://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/modules/cache/mod_cache.c?revision=1497099&view=markup#l124\n\nSo in this case \"accept-encoding\" is not in URL, but in the following case, cached entity is opened and accept-encoding is present:\n\nsvn.apache.org/viewvc/httpd/httpd/branches/2.2.x/modules/cache/cache_util.c?revision=1053600&view=markup#l648\n\n\nIn httpd-2.4, the code has been changed a bit in svn.apache.org/r1004220, but as far as I understand it, the logic remains the same (so the problem could exist in 2.4.x too). I will try to reproduce it in 2.4.x to be 100% sure.", "is_private": false, "id": 175379, "creator": "jkaluza@redhat.com", "time": "2014-05-22T08:37:24Z", "bug_id": 50317, "creation_time": "2014-05-22T08:37:24Z", "attachment_id": null}, {"text": "Does the patch below fix the two keys issue?\n\nIndex: mod_cache.c\n===================================================================\n--- mod_cache.c (revision 1595827)\n+++ mod_cache.c (working copy)\n@@ -113,7 +113,19 @@\n     if (rv != OK) {\n         if (rv == DECLINED) {\n             if (!lookup) {\n+                char *key;\n\n+                /*\n+                 * Try to use the key of a possible open but stall cache\n+                 * entry if we have one.\n+                 */\n+                if ((cache->handle != NULL) &&\n+                    (cache->handle->cache_obj != NULL)) {\n+                    key = cache->handle->cache_obj->key;\n+                }\n+                else {\n+                    key = NULL;\n+                }\n                 /* try to obtain a cache lock at this point. if we succeed,\n                  * we are the first to try and cache this url. if we fail,\n                  * it means someone else is already trying to cache this\n@@ -121,7 +133,7 @@\n                  * backend without any attempt to cache. this stops\n                  * duplicated simultaneous attempts to cache an entity.\n                  */\n-                rv = ap_cache_try_lock(conf, r, NULL);\n+                rv = ap_cache_try_lock(conf, r, key);\n                 if (APR_SUCCESS == rv) {\n\n                     /*", "tags": [], "bug_id": 50317, "attachment_id": null, "count": 37, "id": 175382, "time": "2014-05-22T11:36:02Z", "creator": "rpluem@apache.org", "creation_time": "2014-05-22T11:36:02Z", "is_private": false}, {"count": 38, "tags": [], "text": "No, it doesn't. \"key\" is still NULL even when \"accept-encodingURL\" is locked, so ap_cache_try_lock(...) generates new key without \"accept-encoding\" leading to second lock and second request to backend.", "attachment_id": null, "id": 175384, "creator": "jkaluza@redhat.com", "time": "2014-05-22T11:56:21Z", "bug_id": 50317, "creation_time": "2014-05-22T11:56:21Z", "is_private": false}, {"count": 39, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "Relevant part from log after your patch + debug log to log \"key\" before ap_cache_try_lock(...):\n\n[Thu May 22 07:50:47 2014] [debug] obtained key: accept-encodinghttp://localhost:80/examples/jsp/jsp2/el/basic-arithmetic.jsp?\n[Thu May 22 07:50:47 2014] [debug] cache_util.c(604): Cache lock obtained for stale cached URL, revalidating entry: /examples/jsp/jsp2/el/basic-arithmetic.jsp\n[Thu May 22 07:50:47 2014] [debug] cache_storage.c(272): Cached response for /examples/jsp/jsp2/el/basic-arithmetic.jsp isn't fresh.  Adding/replacing conditional request headers.\n[Thu May 22 07:50:47 2014] [debug] cache: cache_url_handler uses key '(null)'\n[Thu May 22 07:50:47 2014] [debug] mod_cache.c(156): Adding CACHE_SAVE filter for /examples/jsp/jsp2/el/basic-arithmetic.jsp\n\nFrom first line you see that lock is obtained with key with \"accept-encoding, then the code you've patched is executed and NULL is used as a next key. Second lock is obtained and CACHE_SAVE filter added.", "id": 175385, "time": "2014-05-22T11:59:45Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-22T11:59:45Z", "is_private": false}, {"count": 40, "tags": [], "text": "It's strange that ap_cache_check_freshness() returned 0 in this case right after the cached file update. Can't it be some sort of race condition between locking and cached file being written on disk?", "is_private": false, "id": 175387, "creator": "jkaluza@redhat.com", "time": "2014-05-22T12:26:20Z", "bug_id": 50317, "creation_time": "2014-05-22T12:26:20Z", "attachment_id": null}, {"count": 41, "tags": [], "text": "(In reply to jkaluza from comment #38)\n> No, it doesn't. \"key\" is still NULL even when \"accept-encodingURL\" is\n> locked, so ap_cache_try_lock(...) generates new key without\n> \"accept-encoding\" leading to second lock and second request to backend.\n\nCan you please try the following patch instead?\n\nIndex: modules/cache/mod_cache.c\n===================================================================\n--- modules/cache/mod_cache.c   (revision 1595827)\n+++ modules/cache/mod_cache.c   (working copy)\n@@ -113,7 +113,27 @@\n     if (rv != OK) {\n         if (rv == DECLINED) {\n             if (!lookup) {\n+                char *key;\n+                cache_handle_t *h;\n\n+                /*\n+                 * Try to use the key of a possible open but stall cache\n+                 * entry if we have one.\n+                 */\n+                if (cache->handle != NULL) {\n+                    h = cache->handle;\n+                }\n+                else {\n+                    h = cache->stale_handle;\n+                }\n+                if ((h != NULL) &&\n+                    (h->cache_obj != NULL) &&\n+                    (h->cache_obj->key != NULL)) {\n+                    key = apr_pstrdup(r->pool, h->cache_obj->key);\n+                }\n+                else {\n+                    key = NULL;\n+                }\n                 /* try to obtain a cache lock at this point. if we succeed,\n                  * we are the first to try and cache this url. if we fail,\n                  * it means someone else is already trying to cache this\n@@ -121,7 +141,7 @@\n                  * backend without any attempt to cache. this stops\n                  * duplicated simultaneous attempts to cache an entity.\n                  */\n-                rv = ap_cache_try_lock(conf, r, NULL);\n+                rv = ap_cache_try_lock(conf, r, key);\n                 if (APR_SUCCESS == rv) {\n\n                     /*", "attachment_id": null, "id": 175392, "creator": "rpluem@apache.org", "time": "2014-05-22T15:28:41Z", "bug_id": 50317, "creation_time": "2014-05-22T15:28:41Z", "is_private": false}, {"count": 42, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "With this patch it generates proper key in most situations, but when the problem happens, I still see \"NULL\" key in cache_url_handler(). I will attach log from that.", "id": 175406, "time": "2014-05-23T06:30:53Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-23T06:30:53Z", "is_private": false}, {"text": "Created attachment 31652\nSecond request not found in stale cache right after being cached\n\nCheck \"cache: cache_url_handler uses key\" error log lines. The first one (line 9) shows proper key, the second one (line 68) is NULL.", "tags": [], "bug_id": 50317, "attachment_id": 31652, "count": 43, "id": 175407, "time": "2014-05-23T06:39:32Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-23T06:39:32Z", "is_private": false}, {"count": 44, "tags": [], "text": "From what we see I think this happens:\n\n1. Request is updating in a cache and therefore it's not returned by mod_disk_cache. Lock with proper name (the one with accept-encoding is used to guard that state).\n2. New request arrives, it is not found in a cache and therefore the proper key name (with accept-encoding) can't be obtained. Key without \"accept-encoding\" is used and second request is sent to backend.\n\nIf this really happens, I don't see a way how to get the proper key name without:\n\na) getting the regen_key output in cache_url_handler (which is not easy or maybe even possible)\nb) or locking with the default key (without accept-encoding) in cache_util.c", "is_private": false, "id": 175408, "creator": "jkaluza@redhat.com", "time": "2014-05-23T06:53:30Z", "bug_id": 50317, "creation_time": "2014-05-23T06:53:30Z", "attachment_id": null}, {"count": 45, "tags": [], "bug_id": 50317, "attachment_id": null, "id": 175411, "time": "2014-05-23T08:38:19Z", "creator": "rpluem@apache.org", "creation_time": "2014-05-23T08:38:19Z", "is_private": false, "text": "(In reply to jkaluza from comment #44)\n> From what we see I think this happens:\n> \n> 1. Request is updating in a cache and therefore it's not returned by\n> mod_disk_cache. Lock with proper name (the one with accept-encoding is used\n> to guard that state).\n> 2. New request arrives, it is not found in a cache and therefore the proper\n\nThe question IMHO is: Why is it not found in the cache? It should be. I guess this needs some further digging."}, {"count": 46, "tags": [], "creator": "jkaluza@redhat.com", "attachment_id": null, "id": 175414, "time": "2014-05-23T10:51:19Z", "bug_id": 50317, "creation_time": "2014-05-23T10:51:19Z", "is_private": false, "text": "I have good results with following patch (on top of the patch in Comment 41):\n\ndiff --git a/modules/cache/mod_disk_cache.c b/modules/cache/mod_disk_cache.c\nindex 13d6c8b..305fa6b 100644\n--- a/modules/cache/mod_disk_cache.c\n+++ b/modules/cache/mod_disk_cache.c\n@@ -962,15 +962,6 @@ static apr_status_t store_headers(cache_handle_t *h, request_rec *r, cache_info\n \n     apr_file_close(dobj->hfd); /* flush and close */\n \n-    /* Remove old file with the same name. If remove fails, then\n-     * perhaps we need to create the directory tree where we are\n-     * about to write the new headers file.\n-     */\n-    rv = apr_file_remove(dobj->hdrsfile, r->pool);\n-    if (rv != APR_SUCCESS) {\n-        mkdir_structure(conf, dobj->hdrsfile, r->pool);\n-    }\n-\n     rv = safe_file_rename(conf, dobj->tempfile, dobj->hdrsfile, r->pool);\n     if (rv != APR_SUCCESS) {\n         ap_log_error(APLOG_MARK, APLOG_WARNING, rv, r->server,\n\nI think the race condition exists between this apr_file_remove and safe_file_rename. There is no cached file between these two calls. safe_file_rename should overwrite any existing file with the same name, so there's no need for apr_file_remove imho."}, {"count": 47, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 175418, "time": "2014-05-23T12:44:15Z", "bug_id": 50317, "creation_time": "2014-05-23T12:44:15Z", "is_private": false, "text": "(In reply to jkaluza from comment #46)\n> I have good results with following patch (on top of the patch in Comment 41):\n> \n> diff --git a/modules/cache/mod_disk_cache.c b/modules/cache/mod_disk_cache.c\n> index 13d6c8b..305fa6b 100644\n> --- a/modules/cache/mod_disk_cache.c\n> +++ b/modules/cache/mod_disk_cache.c\n> @@ -962,15 +962,6 @@ static apr_status_t store_headers(cache_handle_t *h,\n> request_rec *r, cache_info\n>  \n>      apr_file_close(dobj->hfd); /* flush and close */\n>  \n> -    /* Remove old file with the same name. If remove fails, then\n> -     * perhaps we need to create the directory tree where we are\n> -     * about to write the new headers file.\n> -     */\n> -    rv = apr_file_remove(dobj->hdrsfile, r->pool);\n> -    if (rv != APR_SUCCESS) {\n> -        mkdir_structure(conf, dobj->hdrsfile, r->pool);\n> -    }\n> -\n>      rv = safe_file_rename(conf, dobj->tempfile, dobj->hdrsfile, r->pool);\n>      if (rv != APR_SUCCESS) {\n>          ap_log_error(APLOG_MARK, APLOG_WARNING, rv, r->server,\n> \n> I think the race condition exists between this apr_file_remove and\n> safe_file_rename. There is no cached file between these two calls.\n> safe_file_rename should overwrite any existing file with the same name, so\n> there's no need for apr_file_remove imho.\n\nAgree for Linux (possibly all UNIX systems). Looking at the APR Windows code I think that this should work as well (having an atomic operation if the target file already exists and causing it to be replaced by the source file).\nCan someone of the Windows guys please crosscheck?"}, {"count": 48, "tags": [], "bug_id": 50317, "attachment_id": null, "text": "apr/include.apr_file_io.h :\n/**\n * Rename the specified file.\n * [...]\n * @warning If a file exists at the new location, then it will be\n * overwritten. [...]\n */\nAPR_DECLARE(apr_status_t) apr_file_rename(const char *from_path, \n                                          const char *to_path,\n                                          apr_pool_t *pool);\n\nThe warning is not platform specific, so it should work for all.", "id": 175419, "time": "2014-05-23T12:57:47Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-05-23T12:57:47Z", "is_private": false}, {"count": 49, "tags": [], "bug_id": 50317, "text": "(In reply to Yann Ylavic from comment #48)\n> apr/include.apr_file_io.h :\n> /**\n>  * Rename the specified file.\n>  * [...]\n>  * @warning If a file exists at the new location, then it will be\n>  * overwritten. [...]\n>  */\n> APR_DECLARE(apr_status_t) apr_file_rename(const char *from_path, \n>                                           const char *to_path,\n>                                           apr_pool_t *pool);\n> \n> The warning is not platform specific, so it should work for all.\n\nSounds good.\n@Jan: Care to create a merged patch (my part and your part) and commit to trunk? I guess further tuning can happen there. Or do we face this problem only in 2.2.x?\nIn this case a merged backport proposal patch would be great :-)", "id": 175436, "time": "2014-05-24T21:08:35Z", "creator": "rpluem@apache.org", "creation_time": "2014-05-24T21:08:35Z", "is_private": false, "attachment_id": null}, {"text": "In trunk, only patch from Comment 41 is needed. I've committed it in r1597533.\n\nFor 2.2.x, I will create proposal for merged \"Covener's patch\" from this bug + the one from Comment 41 + my one. Does it sound OK?", "tags": [], "bug_id": 50317, "attachment_id": null, "count": 50, "id": 175458, "time": "2014-05-26T09:21:02Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-26T09:21:02Z", "is_private": false}, {"text": "(In reply to jkaluza from comment #50)\n> In trunk, only patch from Comment 41 is needed. I've committed it in\n> r1597533.\n\nI guess this one is not needed on trunk since key management does not seem to use the keys generated by the providers any longer. So I would tend to revert it. Let it sit for 1 or 2 days and see if we get comments from other people who know the cache code well (especially Graham) to see what is the correct thing to do.\n\n> \n> For 2.2.x, I will create proposal for merged \"Covener's patch\" from this bug\n> + the one from Comment 41 + my one. Does it sound OK?\n\nSounds great.", "tags": [], "bug_id": 50317, "attachment_id": null, "count": 51, "id": 175462, "time": "2014-05-26T10:50:55Z", "creator": "rpluem@apache.org", "creation_time": "2014-05-26T10:50:55Z", "is_private": false}, {"count": 52, "tags": [], "creator": "jkaluza@redhat.com", "attachment_id": null, "id": 175492, "time": "2014-05-27T09:50:40Z", "bug_id": 50317, "creation_time": "2014-05-27T09:50:40Z", "is_private": false, "text": "Proposed for 2.2.x in r1597706, please vote :)."}, {"count": 53, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 175496, "time": "2014-05-27T12:58:27Z", "bug_id": 50317, "creation_time": "2014-05-27T12:58:27Z", "is_private": false, "text": "(In reply to jkaluza from comment #52)\n> Proposed for 2.2.x in r1597706, please vote :).\n\nGot my vote, but not yours ;)\n(same for your commit r1572092 in 2.4.x/STATUS)\n\nBTW, thanks all for this fix, nice team work!"}, {"count": 54, "tags": [], "bug_id": 50317, "attachment_id": null, "id": 175515, "time": "2014-05-28T06:40:45Z", "creator": "jkaluza@redhat.com", "creation_time": "2014-05-28T06:40:45Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #53)\n> (In reply to jkaluza from comment #52)\n> > Proposed for 2.2.x in r1597706, please vote :).\n> \n> Got my vote, but not yours ;)\n> (same for your commit r1572092 in 2.4.x/STATUS)\n> \n> BTW, thanks all for this fix, nice team work!\n\nHm, I didn't know I can vote for my own patches..."}]
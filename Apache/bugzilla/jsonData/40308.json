[{"count": 0, "tags": [], "bug_id": 40308, "is_private": false, "id": 92487, "attachment_id": null, "creator": "hussein@xmlmind.com", "creation_time": "2006-08-24T11:02:09Z", "time": "2006-08-24T11:02:09Z", "text": "FOP 0.92beta throws a ValidationException if it finds that several XSL-FOs      \n  have the same ID and this, even when parameter \"strict-validation\" has been\n  set to \"false\".\n\n  Modular documents built using XInclude often contain duplicate IDs. For\n  example, a modular document may contain three instances of the same table\n  found at three different places in the document. There is no error that\n  could be fixed in the source XML in such case.\n\n  In all cases, IMHO, it does not make sense for a XSL-FO formatter such as\n  FOP to completely stop working when it finds a validity error as benign as a\n  duplicate ID.\n\nChanges made in FOP 0.92beta's src/java/org/apache/fop/fo/FObj.java: \nadded test \"if (getUserAgent().validateStrictly())\".\n\n===============================================================\n    protected void checkId(String id) throws ValidationException {\n        if (!id.equals(\"\")) {\n            Set idrefs = getFOEventHandler().getIDReferences();\n            if (!idrefs.contains(id)) {\n                idrefs.add(id);\n            } else {\n                if (getUserAgent().validateStrictly()) {\n                    throw new ValidationException(\n                        \"Property id \\\"\" + id \n                        + \"\\\" previously used; id values must be unique\"\n                        + \" in document.\", locator);\n                }\n            }\n        }\n    }\n==============================================================="}, {"count": 1, "tags": [], "text": "If there are duplicate IDs in the XML and/or XSL then FOP doesnt care, but if \nthey make it through to the generated XSL-FO then the XSL-FO is illegal \nbecause FOP will have no way of evaluating things like:\n\n1) Basic Links that reference specific IDs\n2) Page Citations that reference specific IDs.\n\nSo this is not a benign error as you suggest.", "attachment_id": null, "id": 92488, "creator": "bowditch_chris@hotmail.com", "time": "2006-08-24T11:19:00Z", "bug_id": 40308, "creation_time": "2006-08-24T11:19:00Z", "is_private": false}, {"count": 2, "tags": [], "creator": "hussein@xmlmind.com", "attachment_id": null, "id": 92491, "time": "2006-08-24T12:04:26Z", "bug_id": 40308, "creation_time": "2006-08-24T12:04:26Z", "is_private": false, "text": "(In reply to comment #1)\n> If there are duplicate IDs in the XML and/or XSL then FOP doesnt care, but if \n> they make it through to the generated XSL-FO then the XSL-FO is illegal \n> because FOP will have no way of evaluating things like:\n> \n> 1) Basic Links that reference specific IDs\n> 2) Page Citations that reference specific IDs.\n> \n> So this is not a benign error as you suggest.\n\nI'm sorry but I don't agree.\n\nI've tested that with my trivial patch. Instead of stopping its work abruptly,\nFOP works as expected by the user: it does its best efforts to output a usable PDF.\n1) Basic Link points to the first occurrence of the multiply defined ID.\n2) Page Citation contains the page number of the first occurrence of the\nmultiply defined ID.\n\nI hate to say this to a developer because it generally upsets her/him, but the\nother XSL-FO formatters that I know do not stop doing their job simply because\nthey have found multiply defined IDs in the XSL-FO document.\n\nI understand that you find my request terribly unclean, but please believe me,\nformatting modern, modular, perfectly sane, XML documents will often mean having\nto cope with illegal XSL-FOs due to multiply defined IDs.\n\nIn all cases, thank you very much for your fine work on FOP 0.92beta. What a\ndifference in quality with its previous incarnation (0.20.5)!"}, {"count": 3, "tags": [], "bug_id": 40308, "is_private": false, "id": 92502, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2006-08-24T19:10:03Z", "time": "2006-08-24T19:10:03Z", "text": "I always thought that uniqueness of ids is a constraint enforced by the XML Specification. XSL-FO being \nsubject to the constraints defined in the XML Rec., it should report this as an error...?\n\nNo, wait: the type of the id property should be <id>, which means, if you look at the Rec (5.11 Property \nDatatypes), that it should be an NCName that is unique... within the _stylesheet_?\n\nOther opinions?"}, {"count": 4, "tags": [], "bug_id": 40308, "is_private": false, "id": 92503, "attachment_id": null, "creator": "spepping@apache.org", "creation_time": "2006-08-24T19:30:54Z", "time": "2006-08-24T19:30:54Z", "text": "I agree with Chris and Andreas. The XSL-FO spec is very clear about the\nrequirement of uniqueness of the values of the id attribute. You could obtain a\nvalid FO file by not propagating id attributes from your XML file to the FO\nfile. OTOH, I agree that it is a feature that we may choose to suppress under\nlax validation, because the FO file is still quite renderable, apart from\nlinking to internal destinations. I definitely do not agree with the idea that\none should cope with illegal XSL-FOs due to multiply defined IDs. But if users\nchoose to do so, they should be given that freedom, I guess.\n"}, {"count": 5, "tags": [], "bug_id": 40308, "is_private": false, "id": 92509, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2006-08-24T20:35:11Z", "time": "2006-08-24T20:35:11Z", "text": "OK. I added this to the codebase. If strict validation is turned off, FOP will issue a warning to the logger \nand continue processing.\n\nincluded in http://svn.apache.org/viewvc?rev=434513&view=rev"}]
[{"count": 0, "attachment_id": null, "creator": "vmware.tester42@gmail.com", "is_private": false, "id": 178774, "time": "2014-10-27T17:08:08Z", "bug_id": 57153, "creation_time": "2014-10-27T17:08:08Z", "tags": [], "text": "The StandardJarScanner.scan(JarScanType, ServletContext, JarScannerCallback) method only searches the WEB-INF/lib and WEB-INF/classes directories for JARs in the webapp's classloader.  It then moves on to the parent classloaders and searches their full classpaths.\n\nHowever, there are situations where the classpath may be configured directly on the classloader rather than by putting JARs into the WEB-INF/lib and in these situations we actually want to search the full classpath of the webapp classloader.\n\nFor example:\n* When pre-compiling JSPs (using JSPC) within a source tree.  JARs containing TLDs can be specified as dependencies and passed in the classpath to JSPC before the WAR (and hence the WEB-INF/lib directory) has been assembled.\n* When running a webapp from within Eclipse using the Tomcat plug-in (which uses its own classloader, DevLoader, to set-up the classpath rather than relying on JARs being in the WEB-INF/lib directory).\n\nSuggest that if WEB-INF/lib is empty then StandardJarScanner should scan JARs configured in the webapp's class loader first, before moving up the class loader hierarchy.\n\nNot sure about Tomcat 7, but this is certainly a change from Tomcat 6 where this was all possible."}, {"count": 1, "tags": [], "bug_id": 57153, "attachment_id": null, "id": 178828, "time": "2014-10-29T14:42:14Z", "creator": "markt@apache.org", "creation_time": "2014-10-29T14:42:14Z", "is_private": false, "text": "Fixed in 8.0.x and will be included in 8.0.15 onwards."}]
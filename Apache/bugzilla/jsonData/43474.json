[{"count": 0, "tags": [], "creator": "wolfgang@cyberflohrs.de", "text": "Running the following FO example with version 0.93 and 0.94 will produce a PDF\ndocument containing a table with some text. The text will not break as expected\nand violates the table boundary.\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\">\n\t<fo:layout-master-set>\n\t\t<fo:simple-page-master page-width=\"21cm\" page-height=\"29.7cm\" master-name=\"spm0\">\n\t\t\t<fo:region-body region-name=\"region-body\" margin-bottom=\"1cm\"\nmargin-top=\"1.5cm\"/>\n\t\t\t<fo:region-before region-name=\"header\" precedence=\"false\" extent=\"4cm\"/>\n\t\t\t<fo:region-after region-name=\"footer\" extent=\"1cm\"/>\n\t\t</fo:simple-page-master>\n\t</fo:layout-master-set>\n\t<fo:page-sequence master-reference=\"spm0\">\n\t\t<fo:flow flow-name=\"region-body\">\n\t\t\t<fo:block wrap-option=\"wrap\"\n\t\t\t\tpadding-end=\"50pt\"\n\t\t\t\tpadding-start=\"2pt\"\n\t\t\t\tspace-before=\"6.0pt\"\n\t\t\t\tmargin-right=\"60pt\"\n\t\t\t\tmargin-left=\"28.35pt\"\n\t\t\t\tfont-size=\"10.0pt\"\n\t\t\t\tfont-family=\"Courier New, Courier\"\n\t\t\t\tcolor=\"black\"\n\t\t\t\tborder-top-width=\"0.75pt\"\n\t\t\t\tborder-top-style=\"double\"\n\t\t\t\tborder-top-color=\"#D3D3D3\"\n\t\t\t\tborder-right-width=\"0.75pt\"\n\t\t\t\tborder-right-style=\"double\"\n\t\t\t\tborder-right-color=\"#D3D3D3\"\n\t\t\t\tborder-left-width=\"0.75pt\"\n\t\t\t\tborder-left-style=\"double\"\n\t\t\t\tborder-left-color=\"#D3D3D3\"\n\t\t\t\tborder-bottom-width=\"0.75pt\"\n\t\t\t\tborder-bottom-style=\"double\"\n\t\t\t\tborder-bottom-color=\"#D3D3D3\"\n\t\t\t\tbackground-color=\"#D5DEE3\">&lt;object\nclassid=\"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93\" width=\"1\" height=\"1\"\nalign=\"baseline\"\ncodebase=\"http://java.sun.comproductsplugin13textToMakeTheLineEvenBiggerThanItWasBeforejinstall13win32cab#Version=1,3,0,0\"\nname=\"xformsApplet\"&gt;\n\t\t\t</fo:block>\n\t\t</fo:flow>\n\t</fo:page-sequence>\n</fo:root>", "id": 108585, "time": "2007-09-25T11:59:06Z", "bug_id": 43474, "creation_time": "2007-09-25T11:59:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": 20878, "bug_id": 43474, "text": "Created attachment 20878\nwrap-option testcase", "id": 108586, "time": "2007-09-25T12:00:55Z", "creator": "wolfgang@cyberflohrs.de", "creation_time": "2007-09-25T12:00:55Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 43474, "text": "FWIW: I've been looking closer at this one, and it seems to be related to the support for Unicode-linebreaking.\n\nThe problem is that this algorithm, implemented in TextLayoutManager.getNextKnuthElements(), does not find a feasible break-possibility for the word-fragment in question. By itself, this is not an error. However, there is no form of correction in case the total word-fragment IPD exceeds the LayoutContext's reference-IPD, and so the entire fragment is presented to the LineLayoutManager as a monolithic box.\n", "id": 116148, "time": "2008-05-02T09:38:21Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-02T09:38:21Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 43474, "is_private": false, "text": "Created attachment 21910\nPatch correcting the behavior (?)\n\nFirst try: If keep-together is inactive, and wrap-option is \"wrap\", 'prohibited by Unicode' should not be considered binding.\nThis results in the effect that, if Unicode line-breaking does not find a feasible break for a part of text that exceeds the available line-width, the LineLayoutManager can still break anywhere it sees fit, thus creating a wrapping effect.\nWarning: \n* as the initial value of wrap-option is \"wrap\", this small patch currently breaks quite a few testcases. \n* also (probably suboptimal) the behavior is not really restricted to the longer word-fragments, which could generate quite some overhead, IIC...", "id": 116198, "time": "2008-05-03T05:34:01Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-03T05:34:01Z", "attachment_id": 21910}, {"count": 4, "attachment_id": 21911, "bug_id": 43474, "text": "Created attachment 21911\nUpdated testcase showing the difference between wrap and no-wrap\n\nThis test-file adds two additional block-containers to the original to show the difference between the two values for wrap-option.", "id": 116199, "time": "2008-05-03T05:37:16Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-03T05:37:16Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 43474, "text": "Created attachment 21912\nCorrected testcase; avoid indent-inheritance...", "id": 116200, "time": "2008-05-03T05:39:59Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-03T05:39:59Z", "is_private": false, "attachment_id": 21912}, {"count": 6, "tags": [], "bug_id": 43474, "text": "Created attachment 21913\nPDF result after applying the patch", "id": 116201, "time": "2008-05-03T05:41:02Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-03T05:41:02Z", "is_private": false, "attachment_id": 21913}, {"attachment_id": null, "tags": [], "bug_id": 43474, "is_private": false, "count": 7, "id": 116202, "time": "2008-05-03T05:53:45Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-03T05:53:45Z", "text": "(In reply to comment #3)\n> Warning: \n> * as the initial value of wrap-option is \"wrap\", this small patch currently\n> breaks quite a few testcases. \n> * also (probably suboptimal) the behavior is not really restricted to the\n> longer word-fragments, which could generate quite some overhead, IIC...\n> \n\nThis also shows in the fact that the PDF contains suboptimal breaks in the first block.\nThe words that do fit on one line should be kept together as much as possible."}, {"count": 8, "tags": [], "bug_id": 43474, "text": "Created attachment 21917\nMore extensive patch\n\nThe updated patch takes a different approach: first let the default text-breaking loop do its work, check if the gathered word-fragment exceeds the available IPD, and if wrapping should be forced, process each character as a separate word-fragment to let the LineLayoutManager sort it out.\n\nThis effectively limits the effects only to those 'words' that would not fit in the line as a whole. For those words that do fit in the line, only one box is generated as before.", "id": 116218, "time": "2008-05-04T06:50:26Z", "creator": "adelmelle@apache.org", "creation_time": "2008-05-04T06:50:26Z", "is_private": false, "attachment_id": 21917}, {"count": 9, "tags": [], "creator": "adelmelle@apache.org", "text": "Created attachment 21918\nUpdated PDF result\n\n\nThe PDF result after applying the second patch shows the effects: the resulting layout will keep words together if they fit, and for the other words, the characters are distributed nicely over as few lines as possible.", "id": 116219, "time": "2008-05-04T06:53:47Z", "bug_id": 43474, "creation_time": "2008-05-04T06:53:47Z", "is_private": false, "attachment_id": 21918}, {"count": 10, "tags": [], "creator": "adelmelle@apache.org", "is_private": false, "text": "\nDid some more testing with the last patch, and there are still some issues to sort out. Before the change, when a word would exceed the available line-width, the soft-hyphen would always be the last part of a word-fragment, preceded by other characters.\nAfter the change we get a separate word-fragment for the soft-hyphens, which is incorrect, and leads to trailing explicit soft-hyphens (last character in a block of text) not being suppressed.\n\nAn interesting side-effect, is that after the change, we would have a nice feature.\nThis will render all characters below each other (already works with the modifications in the patch):\n\n<fo:block-container inline-progression-dimension=\"0em\">\n  <fo:block>This</fo:block>\n  <fo:block space-before=\"1em\">text</fo:block>\n  <fo:block space-before=\"1em\">will</fo:block>\n  <fo:block space-before=\"1em\">be</fo:block>\n  <fo:block space-before=\"1em\">wrapped</fo:block>\n</fo:block-container>\n\nTBC", "id": 116372, "time": "2008-05-08T02:33:54Z", "bug_id": 43474, "creation_time": "2008-05-08T02:33:54Z", "attachment_id": null}, {"attachment_id": 22938, "tags": [], "bug_id": 43474, "is_private": false, "count": 11, "id": 122830, "time": "2008-11-25T05:04:01Z", "creator": "maximilian.aster@boc-eu.com", "creation_time": "2008-11-25T05:04:01Z", "text": "Created attachment 22938\nPatch proposal\n\nI created a patch working with the latest trunk version. It's similar to the last patch. But there were some further problems which are fixed, list-item-labels were always wrapped, and the algorithm for choosing the correct break position was not correct inside tables. I think this functionality is very important for a lot of users as there is even a faq entry."}, {"count": 12, "tags": [], "bug_id": 43474, "text": "Created attachment 22939\nAnother test fo", "id": 122831, "time": "2008-11-25T05:05:00Z", "creator": "maximilian.aster@boc-eu.com", "creation_time": "2008-11-25T05:05:00Z", "is_private": false, "attachment_id": 22939}, {"count": 13, "tags": [], "creator": "maximilian.aster@boc-eu.com", "is_private": false, "text": "Created attachment 22940\nResult for the last fo", "id": 122832, "time": "2008-11-25T05:05:53Z", "bug_id": 43474, "creation_time": "2008-11-25T05:05:53Z", "attachment_id": 22940}, {"count": 14, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #11)\n> I created a patch working with the latest trunk version. It's similar to the\n> last patch. But there were some further problems which are fixed,\n> list-item-labels were always wrapped, and the algorithm for choosing the\n> correct break position was not correct inside tables. I think this\n> functionality is very important for a lot of users as there is even a faq\n> entry.\n> \n\nGood to see this being picked up.\n \nI'm in the process of reviewing the patch, and already have some questions/considerations:\nI'm not sure I like the additional reference to ListItemLabel in TextLayoutManager. The TextLM should deal with text (FOText), and if necessary, the ancestor ListItemContentLM should pass the necessary info (a flag in the LayoutContext?) down to prevent the label from being broken. \nRight now, a dev would have to look at the TextLM to find out why a list-item-label is never broken...? I'd rather see an accompanying change to the list-related LMs to account for this. I'll see if I can come up with a polished alternative, to show what I mean.\nAs to the cause for the fact that the label is always broken: this is probably because the area gets its inline-progression-dimension from the content, so when the element-list is first constructed, the reference-ipd (line-width) will still be zero... I agree that not breaking would be the preferred behavior. If a user really needs this effect, he/she can always resort to a two-column table.\n\nThe changes to LineLM: Are they necessary due to the changes to TextLM, or is that a separate issue? Just asking, since the javadoc for the first added private method seems to indicate that the original expression could return a wrong result regardless of the value of wrap-option (?)\n\nThe same style issues as Chris mentioned in #42374 put aside, your patch has given me some ideas, which I'll start trying out real soon. \n\nThanks for your input so far!", "id": 122848, "time": "2008-11-25T10:56:12Z", "bug_id": 43474, "creation_time": "2008-11-25T10:56:12Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 43474, "is_private": false, "text": "Hi,\n\nI'm sorry to chime in so late but I don't think there is anything to do on FOP's side WRT this issue. If there is no opportunity to break inside the word then there's nothing FOP can do. The wrap-option property is meant to trigger the line-breaking mechanism in its usual accepted meaning; that is, break between words or at hyphenation points inside them, not at every letter if available space is abnormally low, or the word abnormally big. At least, that's my understanding of this property.\n\nIn my opinion, this issue must be handled upstream. That is, zero-width space characters (U+200B) must be introduced at applicable places inside the word to provide FOP with more break opportunities. But I don't think this is FOP's responsibility to do that. See also the following FAQ entry:\nhttp://xmlgraphics.apache.org/fop/faq.html#cells-overflow\n\nVincent\n\n\n(In reply to comment #14)\n> (In reply to comment #11)\n> > I created a patch working with the latest trunk version. It's similar to the\n> > last patch. But there were some further problems which are fixed,\n> > list-item-labels were always wrapped, and the algorithm for choosing the\n> > correct break position was not correct inside tables. I think this\n> > functionality is very important for a lot of users as there is even a faq\n> > entry.\n> > \n> \n> Good to see this being picked up.\n> \n> I'm in the process of reviewing the patch, and already have some\n> questions/considerations:\n> I'm not sure I like the additional reference to ListItemLabel in\n> TextLayoutManager. The TextLM should deal with text (FOText), and if necessary,\n> the ancestor ListItemContentLM should pass the necessary info (a flag in the\n> LayoutContext?) down to prevent the label from being broken. \n> Right now, a dev would have to look at the TextLM to find out why a\n> list-item-label is never broken...? I'd rather see an accompanying change to\n> the list-related LMs to account for this. I'll see if I can come up with a\n> polished alternative, to show what I mean.\n> As to the cause for the fact that the label is always broken: this is probably\n> because the area gets its inline-progression-dimension from the content, so\n> when the element-list is first constructed, the reference-ipd (line-width) will\n> still be zero... I agree that not breaking would be the preferred behavior. If\n> a user really needs this effect, he/she can always resort to a two-column\n> table.\n> \n> The changes to LineLM: Are they necessary due to the changes to TextLM, or is\n> that a separate issue? Just asking, since the javadoc for the first added\n> private method seems to indicate that the original expression could return a\n> wrong result regardless of the value of wrap-option (?)\n> \n> The same style issues as Chris mentioned in #42374 put aside, your patch has\n> given me some ideas, which I'll start trying out real soon. \n> \n> Thanks for your input so far!\n> \n\n", "id": 122864, "time": "2008-11-26T03:59:32Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-11-26T03:59:32Z", "attachment_id": null}, {"count": 16, "attachment_id": null, "bug_id": 43474, "is_private": false, "id": 122879, "time": "2008-11-26T11:30:42Z", "creator": "adelmelle@apache.org", "creation_time": "2008-11-26T11:30:42Z", "tags": [], "text": "(In reply to comment #15)\n> I'm sorry to chime in so late but I don't think there is anything to do on\n> FOP's side WRT this issue. \n\nOn the one hand, I agree. I have mentioned this already in the past: wrap-option=\"wrap\" does not include an /obligation/ to perform line-wrapping.\n\n> If there is no opportunity to break inside the word\n> then there's nothing FOP can do. \n\nWrong. At least, slightly unfortunate choice of words: FOP /can/ definitely do /something/ in this case.\n\n> The wrap-option property is meant to trigger\n> the line-breaking mechanism in its usual accepted meaning; that is, break\n> between words or at hyphenation points inside them, not at every letter if\n> available space is abnormally low, or the word abnormally big. At least, that's\n> my understanding of this property.\n\nIIC, there's a subtle difference between line-WRAPPING and line-BREAKING. \nLine-wrapping being the more 'blind' of the two, if you will (simply wrap to fit the text into the available space). The Recommendation remains vague in this respect (and purposely so, I think). It does not prescribe /how/ the text should be wrapped or broken. We have decided to follow Unicode, but ultimately, we always have the last word. That is: if we choose to provide an additional fallback mechanism, there is no relevant specification that makes this wrong.\n\n> In my opinion, this issue must be handled upstream. That is, zero-width space\n> characters (U+200B) must be introduced at applicable places inside the word to\n> provide FOP with more break opportunities. \n\nA legitimate option, but not always as easily done as it said. To get the effect of real dynamic content-wrapping (fit as many characters on the line as you can), you would force the user to insert a ZWSP in between every two characters (either that or they should make a choice of every so-many characters).\n\n> But I don't think this is FOP's responsibility to do that. See also the following FAQ entry:\n> http://xmlgraphics.apache.org/fop/faq.html#cells-overflow\n\nMaybe not, but it would mean a big relief for many users, I think, if FOP would take this responsibility, even if it is not mandated..."}, {"count": 17, "tags": [], "creator": "vhennebert@gmail.com", "text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > I'm sorry to chime in so late but I don't think there is anything to do on\n> > FOP's side WRT this issue. \n> \n> On the one hand, I agree. I have mentioned this already in the past:\n> wrap-option=\"wrap\" does not include an /obligation/ to perform line-wrapping.\n> \n> > If there is no opportunity to break inside the word\n> > then there's nothing FOP can do. \n> \n> Wrong. At least, slightly unfortunate choice of words: FOP /can/ definitely do\n> /something/ in this case.\n> \n> > The wrap-option property is meant to trigger\n> > the line-breaking mechanism in its usual accepted meaning; that is, break\n> > between words or at hyphenation points inside them, not at every letter if\n> > available space is abnormally low, or the word abnormally big. At least, that's\n> > my understanding of this property.\n> \n> IIC, there's a subtle difference between line-WRAPPING and line-BREAKING. \n> Line-wrapping being the more 'blind' of the two, if you will (simply wrap to\n> fit the text into the available space). The Recommendation remains vague in\n> this respect (and purposely so, I think).\n\nI don't think so. Section 4.7.2, \u201cLine-building\u201d, states that \u201cThe partitioning [must occur] at legal line-breaks. [...] the rules of the language, script and hyphenation constraints in effect must permit a line-break between [two areas].\u201d\nhttp://www.w3.org/TR/xsl11/#area-linebuild\n\nIt /might/ be acceptable to relax the line-breaking algorithm somehow when the 'script' property is set to 'none', but frankly I'm not too keen on implementing a special treatment just to cope with pathological cases. The code is already complicated enough.\n\n\n> It does not prescribe /how/ the text\n> should be wrapped or broken. We have decided to follow Unicode, but ultimately,\n> we always have the last word. That is: if we choose to provide an additional\n> fallback mechanism, there is no relevant specification that makes this wrong.\n> \n> > In my opinion, this issue must be handled upstream. That is, zero-width space\n> > characters (U+200B) must be introduced at applicable places inside the word to\n> > provide FOP with more break opportunities. \n> \n> A legitimate option, but not always as easily done as it said. To get the\n> effect of real dynamic content-wrapping (fit as many characters on the line as\n> you can), you would force the user to insert a ZWSP in between every two\n> characters (either that or they should make a choice of every so-many\n> characters).\n\nExactly. And I bet it's less complicated to implement some XSLT function or pre-processing step to do that than a dedicated extension in FOP's layout engine.\n\n\n> > But I don't think this is FOP's responsibility to do that. See also the following FAQ entry:\n> > http://xmlgraphics.apache.org/fop/faq.html#cells-overflow\n> \n> Maybe not, but it would mean a big relief for many users, I think, if FOP would\n> take this responsibility, even if it is not mandated...\n\nYes, but if we reason like this FOP would soon become like those Swiss knives with ridiculous numbers of blades ;-) (Note that I have nothing against Swiss knives, I've been owning one myself for years and it serves me very well! But it has only 6 functions.)\n\nMore seriously, you could take it the other way around, and find users who wouldn't be happy at all to see FOP suddenly break their texts at arbitrary places, and would rather be warned when such situations are occuring, so that they can re-work their contents.\n\n\nVincent\n", "id": 122893, "time": "2008-11-27T03:33:03Z", "bug_id": 43474, "creation_time": "2008-11-27T03:33:03Z", "is_private": false, "attachment_id": null}, {"count": 18, "attachment_id": null, "bug_id": 43474, "text": "(In reply to comment #17)\n\nwrap-option is cited 3 times in REC 1.1:\n[1] Section 1.2.1 Paging and Scrolling\n[2] Section 4.7.2 Line-building\n[3] Section 7.16.13 wrap-option\n\nIMHO, there is inconsistency in recommendation, especially between [2] and [3]:\n\nin [3], when wrap-option=\"wrap\", REC says \"line-breaking will occur if the line overflows the available block width\"\n\nbut in [2], there is no tool to do what is required in [3], as Vincent said.\n\nSo, I wonder whether FOP should not enforce a break if there is no break opportunity other than between 2 normal chars, regarding the wrap-option.\n\n[1] http://www.w3.org/TR/xsl11/#d0e297\n[2] http://www.w3.org/TR/xsl11/#area-linebuild\n[3] http://www.w3.org/TR/xsl11/#wrap-option\n\nPascal", "id": 122894, "time": "2008-11-27T05:06:36Z", "creator": "pascal.sancho@takoma.fr", "creation_time": "2008-11-27T05:06:36Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "creator": "bowditch_chris@hotmail.com", "is_private": false, "text": "Hi Vincent,\n\n(In reply to comment #17)\n> (In reply to comment #16)\n> > (In reply to comment #15)\n> > IIC, there's a subtle difference between line-WRAPPING and line-BREAKING. \n> > Line-wrapping being the more 'blind' of the two, if you will (simply wrap to\n> > fit the text into the available space). The Recommendation remains vague in\n> > this respect (and purposely so, I think).\n> I don't think so. Section 4.7.2, \u201cLine-building\u201d, states that \u201cThe\n> partitioning [must occur] at legal line-breaks. [...] the rules of the\n> language, script and hyphenation constraints in effect must permit a line-break\n> between [two areas].\u201d\n> http://www.w3.org/TR/xsl11/#area-linebuild\n> It /might/ be acceptable to relax the line-breaking algorithm somehow when the\n> 'script' property is set to 'none', but frankly I'm not too keen on\n> implementing a special treatment just to cope with pathological cases. The code\n> is already complicated enough.\n\nAgreed that the code is complex, but I don't believe we are dealing with extreme or pathological cases here. Most users run into the problem of content overflowing a table cell at some point and this is shown by the number of questions on the subject that occuir on fop-user. Far too many for my liking. \n\nAs already indicated by Pascal there are some inconsistencies in the spec in this area.\n\n> > A legitimate option, but not always as easily done as it said. To get the\n> > effect of real dynamic content-wrapping (fit as many characters on the line as\n> > you can), you would force the user to insert a ZWSP in between every two\n> > characters (either that or they should make a choice of every so-many\n> > characters).\n> Exactly. And I bet it's less complicated to implement some XSLT function or\n> pre-processing step to do that than a dedicated extension in FOP's layout\n> engine.\n> > > But I don't think this is FOP's responsibility to do that. See also the following FAQ entry:\n> > > http://xmlgraphics.apache.org/fop/faq.html#cells-overflow\n> > \n> > Maybe not, but it would mean a big relief for many users, I think, if FOP would\n> > take this responsibility, even if it is not mandated...\n> Yes, but if we reason like this FOP would soon become like those Swiss knives\n> with ridiculous numbers of blades ;-) (Note that I have nothing against Swiss\n> knives, I've been owning one myself for years and it serves me very well! But\n> it has only 6 functions.)\n> More seriously, you could take it the other way around, and find users who\n> wouldn't be happy at all to see FOP suddenly break their texts at arbitrary\n> places, and would rather be warned when such situations are occuring, so that\n> they can re-work their contents.\n\nWell I agree that FOP shouldn't agree to a code change for every possible use-case, but we should try to adjust the code to assist the most common use cases. I do believe that text with few break possibilities in narrow table columns is a common use case.\n\nThe other thing to bear in mind is that no one is saying this feature has to be implemented right now, but I don't think it should be dismissed either.\n\n> Vincent\n\nThanks,\n\nChris", "id": 122902, "time": "2008-11-28T01:07:46Z", "bug_id": 43474, "creation_time": "2008-11-28T01:07:46Z", "attachment_id": null}, {"count": 20, "tags": [], "creator": "vhennebert@gmail.com", "is_private": false, "text": "Hi Chris,\n\n(In reply to comment #19)\n> Hi Vincent,\n> \n> (In reply to comment #17)\n> > (In reply to comment #16)\n> > > (In reply to comment #15)\n> > > IIC, there's a subtle difference between line-WRAPPING and line-BREAKING. \n> > > Line-wrapping being the more 'blind' of the two, if you will (simply wrap to\n> > > fit the text into the available space). The Recommendation remains vague in\n> > > this respect (and purposely so, I think).\n> > I don't think so. Section 4.7.2, \u201cLine-building\u201d, states that \u201cThe\n> > partitioning [must occur] at legal line-breaks. [...] the rules of the\n> > language, script and hyphenation constraints in effect must permit a line-break\n> > between [two areas].\u201d\n> > http://www.w3.org/TR/xsl11/#area-linebuild\n> > It /might/ be acceptable to relax the line-breaking algorithm somehow when the\n> > 'script' property is set to 'none', but frankly I'm not too keen on\n> > implementing a special treatment just to cope with pathological cases. The code\n> > is already complicated enough.\n> \n> Agreed that the code is complex, but I don't believe we are dealing with\n> extreme or pathological cases here. Most users run into the problem of content\n> overflowing a table cell at some point and this is shown by the number of\n> questions on the subject that occuir on fop-user. Far too many for my liking. \n\nWell, in most cases this was because they were using the keep-together shorthand, that from version 0.95 on started to be applied to lines as well. Usually they were happy with the result once they switched to keep-together.within-column.\n\n\n> As already indicated by Pascal there are some inconsistencies in the spec in\n> this area.\n\nI guess the best way to have a definitive answer is to ask for clarification on xsl-editors@\n\n\n> > > A legitimate option, but not always as easily done as it said. To get the\n> > > effect of real dynamic content-wrapping (fit as many characters on the line as\n> > > you can), you would force the user to insert a ZWSP in between every two\n> > > characters (either that or they should make a choice of every so-many\n> > > characters).\n> > Exactly. And I bet it's less complicated to implement some XSLT function or\n> > pre-processing step to do that than a dedicated extension in FOP's layout\n> > engine.\n> > > > But I don't think this is FOP's responsibility to do that. See also the following FAQ entry:\n> > > > http://xmlgraphics.apache.org/fop/faq.html#cells-overflow\n> > > \n> > > Maybe not, but it would mean a big relief for many users, I think, if FOP would\n> > > take this responsibility, even if it is not mandated...\n> > Yes, but if we reason like this FOP would soon become like those Swiss knives\n> > with ridiculous numbers of blades ;-) (Note that I have nothing against Swiss\n> > knives, I've been owning one myself for years and it serves me very well! But\n> > it has only 6 functions.)\n> > More seriously, you could take it the other way around, and find users who\n> > wouldn't be happy at all to see FOP suddenly break their texts at arbitrary\n> > places, and would rather be warned when such situations are occuring, so that\n> > they can re-work their contents.\n> \n> Well I agree that FOP shouldn't agree to a code change for every possible\n> use-case, but we should try to adjust the code to assist the most common use\n> cases. I do believe that text with few break possibilities in narrow table\n> columns is a common use case.\n> \n> The other thing to bear in mind is that no one is saying this feature has to be\n> implemented right now, but I don't think it should be dismissed either.\n\nSure ;-) I guess something could be done when the 'script' property is implemented, but I keep thinking that the issue is better solved upstream.\n\n\n> Thanks,\n> \n> Chris\n\nVincent\n", "id": 122904, "time": "2008-11-28T02:37:30Z", "bug_id": 43474, "creation_time": "2008-11-28T02:37:30Z", "attachment_id": null}, {"count": 21, "attachment_id": null, "bug_id": 43474, "text": "The inconvenience of overflowing lines in table-cells when there is no break opportunity instead of generally breaking/wrapping a word to next line (as done by version 0.20.5 !) is the reason why we don't use version 0.95 and 1.0\n\nOverwriting information in the next column is so critical in our eyes, that we will never use a tool doing so.", "id": 140706, "time": "2010-10-13T06:20:39Z", "creator": "stefan.hundhammer@cassidian.com", "creation_time": "2010-10-13T06:20:39Z", "tags": [], "is_private": false}, {"count": 22, "attachment_id": null, "bug_id": 43474, "is_private": false, "id": 148220, "time": "2011-07-27T15:50:16Z", "creator": "vlsergey@gmail.com", "creation_time": "2011-07-27T15:50:16Z", "tags": [], "text": "Andreas,\n\nIs there an updated patch for 1.0 version? I would like to use it, if possible.\n\nSergey"}, {"count": 23, "tags": [], "creator": "adelmelle@apache.org", "text": "(In reply to comment #22)\n> Is there an updated patch for 1.0 version? I would like to use it, if possible.\n\nUnfortunately not, and I do not immediately have any time available to dedicate to porting it. Not that it would take _that_ much time, but still it's not a matter of minutes...\n\nThat said, I do recall one peculiar effect that I think is not yet mentioned in this report: \nif you would have a mixture of words that do fit within the line with words that don't, then the wrapping effect would only be applied to the latter. That is, for the remainder you will get usual line-breaks, only those words that do not fit on the line in their entirety would ultimately get in-word breaks. That might lead to unexpected output, like:\n\nshort short ver\nyveryverylong\nshort short\nshort\n\nwhere one might expect something like (true wrapping):\n\nshort short ver\nyveryverylong s\nhort short shor\nt", "id": 148277, "time": "2011-07-29T16:22:39Z", "bug_id": 43474, "creation_time": "2011-07-29T16:22:39Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 43474, "text": "resetting P2 open bugs to P3 pending further review", "id": 157608, "time": "2012-04-07T01:45:17Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:45:17Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 43474, "attachment_id": null, "is_private": false, "id": 157886, "time": "2012-04-11T03:22:33Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:22:33Z", "text": "increase priority for bugs with a patch"}, {"count": 26, "tags": [], "bug_id": 43474, "is_private": false, "text": "change status from ASSIGNED to NEW for consistency", "id": 157921, "time": "2012-04-11T06:18:05Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T06:18:05Z", "attachment_id": null}]
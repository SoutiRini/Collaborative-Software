[{"attachment_id": null, "tags": [], "creator": "sitic@pts.se", "is_private": false, "count": 0, "id": 63019, "time": "2004-09-03T11:27:01Z", "bug_id": 31036, "creation_time": "2004-09-03T11:27:01Z", "text": "(Initially reported as SITIC Vulnerability Advisory SA04-003, redefined as bug \nafter discussion with ASF security team)\n\nApache's mod_rewrite module can be made to write one zero byte in an arbitrary\nmemory position outside of a char array, causing DoS or possibly buffer\noverflows.\n\nThe function lookup_map_dbmfile() in modules/mappers/mod_rewrite.c copies data\nfrom a DBM file to the char array buf in a _secure_ manner, but it\nzero-terminates the array afterwards in an _insecure_ manner. If the key that\nis looked up has an n bytes long value, a zero byte will be written in the\nmemory position n bytes from the start of the char array buf, causing a crash.\n\nHTTP requests that exploit this problem are not shown in the access log. The\nerror log will show Segmentation faults, though.\n\nMitigating factors:\n\nExploitation requires someone manually configuring the system to use a DBM\nfile and then someone (else) storing malicious data in that DBM file.\n\nThis bug was discovered by Ulf Harnhammar for SITIC, Swedish IT \nIncident Centre.\n\nThe included patch \"issue3.patch\" is our attempt at correcting this issue:\n\n--- modules/mappers/mod_rewrite.c\t2004-06-11 23:05:22.000000000 +0200\n+++ modules/mappers/mod_rewrite.c.ulf\t2004-07-22 13:58:17.000000000 +0200\n@@ -3160,6 +3160,7 @@\n     char *value = NULL;\n     char buf[MAX_STRING_LEN];\n     apr_status_t rv;\n+    unsigned int copylen;\n \n     dbmkey.dptr  = key;\n     dbmkey.dsize = strlen(key);\n@@ -3168,10 +3169,10 @@\n                               r->pool)) == APR_SUCCESS) {\n         rv = apr_dbm_fetch(dbmfp, dbmkey, &dbmval);\n         if (rv == APR_SUCCESS && dbmval.dptr) {\n-            memcpy(buf, dbmval.dptr,\n-                   dbmval.dsize < sizeof(buf)-1 ?\n-                   dbmval.dsize : sizeof(buf)-1  );\n-            buf[dbmval.dsize] = '\\0';\n+            copylen = dbmval.dsize < sizeof(buf)-1 ?\n+                      dbmval.dsize : sizeof(buf)-1;\n+            memcpy(buf, dbmval.dptr, copylen);\n+            buf[copylen] = '\\0';\n             value = apr_pstrdup(r->pool, buf);\n         }\n         apr_dbm_close(dbmfp);"}, {"count": 1, "tags": [], "bug_id": 31036, "text": "This also affects Apache 1.3.x.\n\n// Ulf Harnhammar\n", "id": 63046, "time": "2004-09-03T16:01:42Z", "creator": "Ulf.Harnhammar.9485@student.uu.se", "creation_time": "2004-09-03T16:01:42Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "nd@perlig.de", "text": "Thanks Folks.\n\nWe've created other patches based on the 2.1 code, which don't cut the value\nstring. It would be nice, if you could review/test them.\n\nI've uploaded the diffs here:\n\nhttp://www.apache.org/~nd/dbmmap_1.3.patch\nhttp://www.apache.org/~nd/dbmmap_2.0.patch", "id": 63074, "time": "2004-09-03T20:54:43Z", "bug_id": 31036, "creation_time": "2004-09-03T20:54:43Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "I have reviewed and tested your patches, and I didn't find any problems with \nthem.\n\n// Ulf Harnhammar (SITIC)\n", "bug_id": 31036, "is_private": false, "id": 63129, "time": "2004-09-06T15:08:25Z", "creator": "Ulf.Harnhammar.9485@student.uu.se", "creation_time": "2004-09-06T15:08:25Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 31036, "is_private": false, "text": "If this code is supposed to be robust against arbitrary values of dbmval.dsize\nthe this:\n\n  apr_pstrmemdup(r->pool, dbmval.dptr, dbmval.dsize);\n\nstill doesn't seem like a good idea.  But I don't know how much validation the\nparticular apr_dbm implementations will give you on .dsize.", "id": 63452, "time": "2004-09-13T09:21:14Z", "creator": "jorton@redhat.com", "creation_time": "2004-09-13T09:21:14Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 31036, "text": "Hmm, I don't understand ... why?", "count": 5, "id": 63453, "time": "2004-09-13T09:36:35Z", "creator": "nd@perlig.de", "creation_time": "2004-09-13T09:36:35Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 31036, "text": "See how the pstrmemdup implementation behaves if passed in n=ULONG_MAX.  But\nregardless.\n", "id": 63454, "time": "2004-09-13T09:48:14Z", "creator": "jorton@redhat.com", "creation_time": "2004-09-13T09:48:14Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "is_private": false, "id": 63455, "time": "2004-09-13T10:08:42Z", "bug_id": 31036, "creation_time": "2004-09-13T10:08:42Z", "text": "only if apr_size_t == ulong.\nGood question... I think, much of our code relies on apr_size_t being big enough."}, {"count": 8, "tags": [], "bug_id": 31036, "text": "The fix at http://www.apache.org/~nd/dbmmap_2.0.patch got 4 votes for backport\nto v2.0.53, and the backport has been committed.\n\nHas this fix been applied to v2.1?\n", "id": 65079, "time": "2004-10-13T16:55:01Z", "creator": "minfrin@apache.org", "creation_time": "2004-10-13T16:55:01Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "is_private": false, "id": 65081, "time": "2004-10-13T17:23:47Z", "bug_id": 31036, "creation_time": "2004-10-13T17:23:47Z", "text": "It's *taken* from 2.1 ;-)"}, {"count": 10, "tags": [], "bug_id": 31036, "text": "Cool :) Didn't see a link in STATUS to the commit though, only an external link\nto the patch - just making sure :)\n", "id": 65082, "time": "2004-10-13T17:43:12Z", "creator": "minfrin@apache.org", "creation_time": "2004-10-13T17:43:12Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 31036, "is_private": false, "text": "Patch already applied to v1.3. Closing and marking as fixed.\n", "id": 65083, "time": "2004-10-13T18:26:24Z", "creator": "minfrin@apache.org", "creation_time": "2004-10-13T18:26:24Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 7065, "text": "This may be a failing of my understanding of XML, but I've always been a strong \nbeliever that if a framework can generate a document, it should be able to \nparse it as well.  The following code generates an XML document that cannot be \nparsed by xerces.  The code and output follow:\n\nCode:\n    public static void main(String[] args) throws Exception {\n        byte []bytes = { 28 };\n\n        //Create the document\n        Document document = new DocumentImpl();\n        Element root = document.createElement(\"TEST\");\n        Node child = document.createTextNode(new String(bytes));\n        root.appendChild(child);\n        document.appendChild(root);\n\n        //Serialize document to String\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n        OutputFormat format = new OutputFormat(document);\n        XMLSerializer serial = new XMLSerializer(outStream, format);\n        serial.asDOMSerializer();\n        serial.serialize(document.getDocumentElement());\n        outStream.flush();\n        String xml = outStream.toString();\n\n        //Print out text interpretaion of xml document\n        System.out.println(xml);\n\n        //reparse text into xml\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(xml.getBytes\n());\n        DOMParser parser = new DOMParser();\n        InputSource inputSource = new InputSource(inputStream);\n        parser.parse(inputSource);\n        document = parser.getDocument();\n    }\n\nOutput:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TEST>&#x1c;</TEST>\n\n[Fatal Error] :2:13: Character reference \"&#1c\" is an invalid XML character.\n\norg.xml.sax.SAXParseException: Character reference \"&#1c\" is an invalid XML \ncharacter.\n\n\tat org.apache.xerces.parsers.DOMParser.parse(DOMParser.java:235)\n\n\tat testclassloader.TestXerces.main(TestXerces.java:53)\n\nException in thread \"main\" \n\n\nThis particular test was run with xerces 2.0.1, but I've had similar results \nwith 1.4.4 though the outputted escaped character is different.\n\nWhile I realize that character 28 does not fit within the XML spec as a valid \ncharacter, I am curious why xerces will generate text node or serialize a \ndocument with an invalid character.\n\nAlso, is there any way to properly encode this document or do I need to \nmanually escape my node text before encoding?\n\nThanks for your time and for working on a fantastic open-source project.", "id": 11712, "time": "2002-03-12T22:57:17Z", "creator": "ericm@newsstand.com", "creation_time": "2002-03-12T22:57:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "keshlam@us.ibm.com", "attachment_id": null, "text": "The DOM APIs are able to represent documents which can not be encoded as \nwell-formed XML, for reasons largely having to do with performance. \n\nIt's up to the XML serializer to decide whether to write them out as damaged XML \nwhile generating a warning message somewhere, to attempt to repair them, or to \nrefuse to write the document out and report the error. There are risks and \nbenefits to all three options, on performance grounds as well as flexibility and \ndiagnosability.\n", "id": 11733, "time": "2002-03-13T14:14:06Z", "bug_id": 7065, "creation_time": "2002-03-13T14:14:06Z", "is_private": false}]
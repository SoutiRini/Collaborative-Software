[{"count": 0, "tags": [], "creator": "dmikusa@gopivotal.com", "attachment_id": null, "is_private": false, "id": 165810, "time": "2013-03-13T20:04:20Z", "bug_id": 54693, "creation_time": "2013-03-13T20:04:20Z", "text": "While it's possible to set the query timeout using the QueryTimeoutInterceptor, this will set the same timeout for all queries.  It would be nice to be able to set an independent timeout for the validation query.\n\nIn addition, DBCP supports this feature [1], so it would be nice to have this feature for compatibility / migration purposes.\n\n[1] - https://issues.apache.org/jira/browse/DBCP-226\n\nThanks"}, {"count": 1, "tags": [], "bug_id": 54693, "attachment_id": 30045, "id": 165811, "time": "2013-03-13T20:11:10Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2013-03-13T20:11:10Z", "is_private": false, "text": "Created attachment 30045\nFirst attempt at a patch.\n\nAttaching my first attempt at a patch.  This adds a \"validationQueryTimeout\" property, which calls \"setQueryTimeout\" on the validation query's statement.  Includes unittest and documentation update."}, {"count": 2, "tags": [], "bug_id": 54693, "attachment_id": null, "id": 165868, "time": "2013-03-15T18:59:18Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-03-15T18:59:18Z", "is_private": false, "text": "Only one comment: since a value of \"0\" disabled query timeout (it will wait forever), why not make the default 0 instead of -1?\n\nAlso, you mention that QueryTimeoutInterceptor will modify the query timeouts of all queries... how does it interact with this patch? Will QueryTimeoutInterceptor set the query timeout and then your code re-sets the query timeout (presumably to a different value)? If that's the case, what happens when validationQueryTimeout=0 and you are using the QueryTimeoutInterceptor? A reasonable user might expect that the validation query would /never/ time out, but the QueryTimeoutInterceptor would affect it."}, {"count": 3, "tags": [], "bug_id": 54693, "is_private": false, "text": "Comments inline below...\n\n>Only one comment: since a value of \"0\" disabled query timeout (it will wait forever), why not make the default 0 instead of -1?\n\nI implemented it the same way as DBCP to try and make it as compatible as possible.  \n\nIn my implementation (same as DBCP), the value must be greater than 0 or the connection pool code won't call \"setQueryTimeout\", which means that by default the connection pool won't call \"setQueryTimeout\".  \n\nI like this approach because it won't change anything by default.  In other words, the query timeout value would default to what is specified by the JDBC driver or perhaps by a driver specific setting.\n\nI'm open to other suggestions though.\n\n\n>Also, you mention that QueryTimeoutInterceptor will modify the query timeouts of all queries... how does it interact with this patch?\n\nSorry, I was under the impression based on some comments I read on a previous bug that the QueryTimeoutInterceptor would set the query timeout for a validation query.  I tested this a bit and it turns out to not be true.  In my tests, I saw that the validation query is executed against the underlying Connection, not the ProxyConnection.  Because it runs against the underlying Connection, this means that the interceptors are not executed against it.\n\n\n>Will QueryTimeoutInterceptor set the query timeout and then your code re-sets the query timeout (presumably to a different value)? If that's the case, what happens when validationQueryTimeout=0 and you are using the QueryTimeoutInterceptor? A reasonable user might expect that the validation query would /never/ time out, but the QueryTimeoutInterceptor would affect it.\n\nAs I mentioned above, the QueryTimeoutInterceptor and validationQueryTimeout should not affect each other.  Just to be sure, I added a test case to check this.  Attaching new patch with that test case added.\n\nDan", "id": 166051, "time": "2013-03-20T19:33:48Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2013-03-20T19:33:48Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54693, "attachment_id": 30086, "is_private": false, "id": 166052, "time": "2013-03-20T19:40:42Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2013-03-20T19:40:42Z", "text": "Created attachment 30086\nSecond patch\n\nAdded patch with additional testcase."}, {"count": 5, "tags": [], "creator": "dmikusa@gopivotal.com", "attachment_id": null, "text": "Sorry, found an issue with my second patch.  Getting an NPE with testOnConnect set to true.  Need to revisit and see what is happening.", "id": 166054, "time": "2013-03-20T20:55:39Z", "bug_id": 54693, "creation_time": "2013-03-20T20:55:39Z", "is_private": false}, {"text": "Created attachment 30094\nThird patch\n\nOk, so there was an issue with my second patch.  When \"testOnConnect\" was enabled, the validation query specified times out and a connection was requested, an NPE would be thrown from \"setupConnection\", where \"con.getHandler()\" is called.\n\n    protected Connection setupConnection(PooledConnection con) throws SQLException {\n        //fetch previously cached interceptor proxy - one per connection\n        JdbcInterceptor handler = con.getHandler();\n        if (handler==null) {\n\nThis was because \"borrowConnection\", at the point below, returns null.\n\n    public Connection getConnection() throws SQLException {\n        //check out a connection\n        PooledConnection con = borrowConnection(-1,null,null);\n        return setupConnection(con);\n    }\n\nIt returned null because of the following conditions...\n\n  - there are no available connections\n  - \"borrowConnection(..)\" tries to create one by calling \"createConnection(..)\"\n  - because \"testOnConnect\" is true, \"createConnection(..)\" will call \"con.validate(..)\" and the validation query will run\n  - because we use a slow query and set a low validation query timeout, the validation query is interrupted\n  - \"con.validate(..)\" returns false\n  - this causes \"createConnection(..)\" to clean up and return null\n  - \"borrowConnection(..)\" returns what was returned by \"createConnection(..)\", which is null\n  - the null then slips through to \"setupConnection(con)\" and causes the NPE.\n\nI fixed this by throwing an SQLException in \"createConnection(..)\" when \"con.validate(..)\" returns false.  This causes \"createConnection(..)\" to clean up and then re-throw the SQLException.  This exception bubbles up to the user's code alerting them that the pool cannot create any new connections because the validation query fails.\n\nA very similar situation happens if the validation query is invalid, such as \"SELECT\".  This fixes both conditions.  Unit tests included in the latest patch.", "tags": [], "bug_id": 54693, "attachment_id": 30094, "count": 6, "id": 166088, "time": "2013-03-22T02:02:03Z", "creator": "dmikusa@gopivotal.com", "creation_time": "2013-03-22T02:02:03Z", "is_private": false}, {"count": 7, "tags": [], "creator": "robd@tnsi.com", "text": "Any idea when this will be released ?\n\nThanks\nRob", "id": 168010, "time": "2013-06-25T05:26:57Z", "bug_id": 54693, "creation_time": "2013-06-25T05:26:57Z", "is_private": false, "attachment_id": null}, {"text": "Any idea when this will be released ?\n\nThanks\nRob", "tags": [], "creator": "robd@tnsi.com", "is_private": false, "count": 8, "id": 168015, "time": "2013-06-25T06:23:22Z", "bug_id": 54693, "creation_time": "2013-06-25T06:23:22Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "(In reply to Rob Dunn from comment #8)\n> Any idea when this will be released ?\n\nNot likely until it's fixed.", "id": 168028, "time": "2013-06-25T12:12:01Z", "bug_id": 54693, "creation_time": "2013-06-25T12:12:01Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 54693, "attachment_id": null, "text": "Thanks for the report.\nFixed in trunk and 7.0.x and will be included in 7.0.43 onwards.", "id": 169980, "time": "2013-09-09T10:21:48Z", "creator": "kfujino@apache.org", "creation_time": "2013-09-09T10:21:48Z", "is_private": false}]
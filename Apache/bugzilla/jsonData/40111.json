[{"count": 0, "tags": [], "text": "I noticed a difference in behaviour between Tomcat 4.1 and Tomcat 5.5.17, of the\ngetLastAccessedTime() method of HttpSession.\nIn Tomcat 5.5.17, this method returns the time of the last request (before the\ncurrent one) that actually accesses the session.\nIn Tomcat 4.1, it returns the time of the last request that was part of the session.\n\nThis means, that if you create a session in servlet A, the user then calls a\nservlet B that does not call the getSession method, and then goes to a servlet C\nto check getLastAccessedTime()'s value, it will get the time of the request to\nservlet A in Tomcat 5.5.17, and B in Tomcat 4.1.\n\n<Servlet spec (2.3 and 2.4) quote>\nThe getLastAccessedTime method of the HttpSession interface allows a servlet to\ndetermine the last time the session was accessed before the current request. The\nsession is considered to be accessed when a request that is part of the session\nis first handled by the servlet container.\n</quote>\n\nBased on the first sentence I'd expect to get the access time of servlet A, but\nwith the definition of \"to be accessed\" in the second sentence I'd expect to get\nthe access time of servlet B.\n\nEither way, if I use the response.encodeURL method in servlet B, Tomcat 5.5.17\nwill give me the same result as Tomcat 4.1. Therefore I think this is a bug and\nnot a change of interpretation of the spec.\n#encodeURL leads to an update of the lastAccessed field:\n\tStandardSession.access() line: 608\t\n\tRequest.doGetSession(boolean) line: 2203\t\n\tRequest.getSessionInternal(boolean) line: 2169\t\n\tResponse.isEncodeable(String) line: 1362\t\n\tResponse.encodeURL(String) line: 1092\t\n\tResponseFacade.encodeURL(String) line: 363\t\n\tMySession.doGet(HttpServletRequest, HttpServletResponse) line: 35\t\n\nI will try to attach my test application, which also includes a png image of a\nsequence diagram in which I try to explain what I am doing.", "attachment_id": null, "bug_id": 40111, "id": 91589, "time": "2006-07-26T06:46:42Z", "creator": "dies@jp.fujitsu.com", "creation_time": "2006-07-26T06:46:42Z", "is_private": false}, {"count": 1, "tags": [], "creator": "dies@jp.fujitsu.com", "attachment_id": null, "id": 93006, "time": "2006-09-05T02:19:56Z", "bug_id": 40111, "creation_time": "2006-09-05T02:19:56Z", "is_private": false, "text": "I was not able to attach my WAR file, and don't have my own website to link to.\n\nHowever, in the Tomcat-dev I got a reply from Jan Luehe who confirmed with the\nServlet spec Expert Group that Tomcat 4.1's behaviour was correct:\nsession.getLastAccessedTime() method should return the time of the last request\nthat the container received that had this session's session ID with it (no\nmatter whether that last request accessed the session object or not).\n\nThe example used to explain its purpose was:\n===\nThe getLastAccessedTime() method is used in session \"Max Inactive Interval\"\ncalculations to decide if it's time to expire the session.  If we haven't heard\nfrom the client within the max interval, we can give up on their session.\n\nPicture a shopping cart site.  You don't need to fetch the session object on\neach page to want to keep the cart alive.\n==="}, {"count": 2, "tags": [], "text": "Yes, unfortunately, this is not what we will implement. There will be (some day)\na setting to enable this behavior, though.", "attachment_id": null, "id": 93021, "creator": "remm@apache.org", "time": "2006-09-05T10:02:00Z", "bug_id": 40111, "creation_time": "2006-09-05T10:02:00Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40111, "is_private": false, "text": "(In reply to comment #2)\nApart from that you probably have more important bugs and functions to work on,\nwhy not?\nMaybe I am just misinterpreting your comment, but are you planning to implement\nsome other similar functionality?\nI read the commit log where I think you took this behaviour out, but I did not\nunderstand it. Why is it improved now? What was wrong with the old behaviour?", "id": 93022, "time": "2006-09-05T10:23:34Z", "creator": "dies@jp.fujitsu.com", "creation_time": "2006-09-05T10:23:34Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 40111, "attachment_id": null, "text": "It is a bit worrying you need to ask: accessing the session is not a trivial\noperation (although it's not the end of the world either), so for requests which\nwould otherwise not need the session, it's best not to do it. It's also obvious\nthis stuff is useless: in almost all sites, trivial requests (like static files,\nsince that's what you mention as the super useful use case) are going to either\nbe served or cached by a front end server. So your little session activity\ntricks are not going to work, and you should instead use a sensible session timeout.\n\nYou have a wide variety of easy workarounds (a valve, a filter, etc).\n", "id": 93025, "time": "2006-09-05T12:03:22Z", "creator": "remm@apache.org", "creation_time": "2006-09-05T12:03:22Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 40111, "text": "I don't think I mentioned static files as a use case. I'm thinking of\ndynamically generated pages containing product info pertaining to the client\nrequest. As in the example I quoted, the shopping cart info is stored in the\nsession object, and in the meantime I search the catalog for more products.\n\nI am not familiar with Tomcat's internals so I cannot imagine why it is not\ntrivial to access the session object (isn't it just in some hashtable with the\nsession ID being the key? :)), but could you elaborate a bit more on why it is\nbest not to do it?\nIf I add a simple req.getSession() in a filter as work-around, Tomcat will do\nthe same operation. Is there something particular that I need to worry about/pay\nattention to?\n\n> You have a wide variety of easy workarounds (a valve, a filter, etc).\n\nA filter should be easy to implement. But I would still like to look into that\nsetting to enable the Tomcat 4 behaviour you mentioned. Then we would be able to\nhelp all our customers who might run into the same issue in the future without\nhaving to modify their applications, with all the hassle that brings..", "id": 93215, "time": "2006-09-08T11:34:53Z", "creator": "dies@jp.fujitsu.com", "creation_time": "2006-09-08T11:34:53Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "According to the Servlet specification v2.4 (which Tomcat 5.5 implements) method\n HttpSession.getLastAccessedTime() should NOT throw any exceptions (even if\naccessed on invalidated session).\nHere is snapshot of the method description from the Servlet v2.4 API:\n--------------------------------------------------\npublic long getLastAccessedTime()\n\n    Returns the last time the client sent a request associated with this\nsession, as the number of milliseconds since midnight January 1, 1970 GMT, and\nmarked by the time the container received the request.\n\n    Actions that your application takes, such as getting or setting a value\nassociated with the session, do not affect the access time.\n\n    Returns:\n        a long representing the last time the client sent a request associated\nwith this session, expressed in milliseconds since 1/1/1970 GMT\n------------------------------------------------------\n\nAs you can see there is no 'Throws' section for the method description (like it\nis for the HttpSession.getCreationTime() )\n\n\nRESOLUTION:\nThis bug is caused by the\norg.apache.catalina.session.StandardSession.getLastAccessedTime() method which\nfor version 5.5.23 currently throws IllegalStateException (but it should not):\n-------------------------------------------------\n/**\n     * Return the last time the client sent a request associated with this\n     * session, as the number of milliseconds since midnight, January 1, 1970\n     * GMT.  Actions that your application takes, such as getting or setting\n     * a value associated with the session, do not affect the access time.\n     */\n    public long getLastAccessedTime() {\n\n        if ( !isValid() ) {\n            throw new IllegalStateException\n            (sm.getString(\"standardSession.getLastAccessedTime.ise\"));\n        }\n\n        return (this.lastAccessedTime);\n    }\n-----------------------------------------------------\n\nSo I think Tomcat developers should FOLLOW the specification and FIX this bug.\n\n\n\nAlso for me it is strange why the getLastAccessedTime() method in the Servlet\nv2.5 API (Tomcat 6.0.x) was changed to the throw IllegalStateException:\n--------------------------------------------------------\n\nlong getLastAccessedTime()\n\n    Returns the last time the client sent a request associated with this\nsession, as the number of milliseconds since midnight January 1, 1970 GMT, and\nmarked by the time the container received the request.\n\n    Actions that your application takes, such as getting or setting a value\nassociated with the session, do not affect the access time.\n\n    Returns:\n        a long representing the last time the client sent a request associated\nwith this session, expressed in milliseconds since 1/1/1970 GMT \n    Throws:\n        IllegalStateException - if this method is called on an invalidated session\n------------------------------------------------------\n\nAPI Spec Group have broken the way to determine if session is valid.\nFor example if my application contains the following code that calculates if the\nsession is valid:\n----------\nif (System.currentTimeMillis - sess.getLastAccessedTime() >\nsess.getMaxInactiveInterval() * 1000) {\n  ...\n}\n---------\nit should correctly work in the containers that implement v2.3 and v2.4 Servlet\nAPI. After migrating to v2.5 container the app will fail as it does not catches\nthe IllegalStateException.\nAnd after all throwing exception is much expensive opration then math\ncalculation. Isn't it?\n", "is_private": false, "bug_id": 40111, "id": 102253, "time": "2007-04-24T09:34:02Z", "creator": "bbobylak@hotmail.com", "creation_time": "2007-04-24T09:34:02Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 40111, "text": "This is not going to be fixed. This got clarified by the Servlet EG: the old\njavadocs were simply wrong (it's obvious there's no reason that this method is\nthe only one which doesn't throw ISE). As for the rest, you should upgrade to\nTomcat 6.0, and use the strict compliance flag. Please do not reopen the report.", "id": 102270, "time": "2007-04-24T16:14:30Z", "creator": "remm@apache.org", "creation_time": "2007-04-24T16:14:30Z", "is_private": false, "attachment_id": null}]
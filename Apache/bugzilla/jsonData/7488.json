[{"count": 0, "tags": [], "bug_id": 7488, "attachment_id": null, "is_private": false, "id": 12347, "time": "2002-03-26T17:01:32Z", "creator": "alain.coetmeur@caissedesdepots.fr", "creation_time": "2002-03-26T17:01:32Z", "text": "(bug with patch!)\n\nWhen I tried to generate JSP-Servlets with \n  JspC -webapp dir\nthe generated code could not be compiled because\nthe package was \"org.apache.jsp.\" with a surious dot at the end.\n\nthe reason is in CommandLineContext.getServletPackageName()\nwhich produce this wrong package name, because of the DOS \nfilename in the jspfilename, and the double \"\\\" used...\n\nthis code is first not adapted to NT/DOS filename because\nit uses \"/\" and not File.separatorChar (which is \\ on NT).\n\nmoreover I've found that invalid package name could be \ngenerated if a subdirectory is named as a java reserved keyword like\n'if' or 'int', contains \"-\" or similar character invalid in java identifiers...\n\n\nI've patched the whole function so it resolve these problems.\nI've tested on NT, but not on Unix, however it should work the same.\n\nnote that I use a pair of \"$\" character as escape characters in package name\n(eg a=b\\if\\earn_much_$_quickly\\foo.jsp ->  package \na$3d$b.$if$.earn_much_$$_quickly;)\nthis may conflict with CVS keys, and you may prefer to use '_' as\nescape character. however, underscore is a frequent separator\nin file name which users may like to be kept the same as a package name...\n\nanyway this is not essential, since\n- JSP servlets are seldom put into CVS\n- JSP servlets package name are seldom used by humans\n\nhere is the modified function\n\n\n/*\n * $Header: /home/cvs/jakarta-tomcat-\n4.0/jasper/src/share/org/apache/jasper/CommandLineContext.java,v 1.6.2.1 \n2002/02/01 22:20:37 kinman Exp $\n * $Revision: 1.6.2.1 $\n * $Date: 2002/02/01 22:20:37 $\n...\n*/\npackage org.apache.jasper;\n\n...\n\n/**\n * Holds data used on a per-page compilation context that would otherwise spill\n * over to other pages being compiled.  Things like the taglib classloaders\n * and directives.\n *\n * @author Danno Ferrin\n * @author Pierre Delisle\n */\npublic class CommandLineContext implements JspCompilationContext {\n\n\n    /**\n     * The package name for the generated class.\n     * mangle the package name so there is no conflit with keywords\n     * or special character, or with spurious dots\n     * also works on DOS/Windows names\n     * NB: usage of '/' is not good... rather use File.separatorChar... \n     * check in the rest of the code!\n     * @author modified by Alain Coetmeur\n     */\n    public String getServletPackageName() {\n        //get the path to the jsp file\n        //System.out.println(getClass().getName()+\".getServletPackageName(): \nfile=\"+getJspFile());\n        //System.out.println(getClass().getName()+\".getServletPackageName(): \nuriBase=\"+uriBase);\n        //System.out.println(getClass().getName()+\".getServletPackageName(): \nuriRoot=\"+uriRoot);\n        \n        //int indexOfSlash = getJspFile().lastIndexOf(File.separatorChar);\n        String pathName=(new File(getJspFile())).getParent();\n        \n        if(pathName==null) {\n            pathName = File.separator;\n        }\n        \n        //Assemble the package name from the base package name specified on\n        //the command line and the package name derived from the path to\n        //the jsp file\n        String packageName = \"\";\n        if (servletPackageName != null && !servletPackageName.equals(\"\")) {\n            packageName = servletPackageName;\n        }\n        packageName += pathName.replace(File.separatorChar, '.');/* unix/nt */\n        \n        // escapes characted illegal in java identifiers as $hexvalue$, \n        //  and non ascii (problem sometime, often between iso8859/utf8)\n        // escapes $ as $$ to ensure unicity (paranoid!)\n        // escapes reserved keyword as $keyword$\n        // remove double dots (if file path contains double slash by error)\n        // remove leading dots (if absolute path on unix)\n        // remove trailing dots (if double slash at end)\n        \n        //System.out.println(getClass().getName()+\".getServletPackageName(): \npack0=\"+packageName);\n        for(int pos=0;pos<packageName.length();pos++) {\n          char cur=packageName.charAt(pos);\n          if(cur=='.') {\n            if( pos==0 /* remove leading dots */\n              || pos>=packageName.length()-1 /* remove trailing dots */\n              || packageName.charAt(pos+1)=='.' /* remove double dots */\n              ) {\n          \t  packageName=packageName.substring(0,pos)+packageName.substring\n(pos+1,packageName.length());\n          \t  pos--;\n            }\n            continue;\n          }\n          boolean atStart=(pos==0 || packageName.charAt(pos-1)=='.');\n          boolean foundKeyword=false;\n          if(atStart) {\n            for(int i=0;i<CommandLineCompiler.keywords.length;i++) {\n            \tString kw=CommandLineCompiler.keywords[i];\n            \tif( packageName.startsWith(kw, pos) && \n            \t  ( (kw.length()==packageName.length()-pos) ||\n            \t    (kw.length()<packageName.length()-pos && packageName.charAt\n(pos+kw.length())=='.')\n            \t  ) ) {\n            \t    packageName=packageName.substring(0,pos)\n+\"$\"+kw+\"$\"+packageName.substring(pos+kw.length(),packageName.length());\n            \t    pos+=kw.length()+1;\n            \t    foundKeyword=true;\n            \t    break;\n            \t}\n            }\n            if(foundKeyword) \n              {continue;}\n          }\n          if(cur!='$' && (int)cur >32 && (int)cur<128 && ( \n                 ( atStart && Character.isJavaIdentifierStart(cur) )\n              || ( !atStart && Character.isJavaIdentifierPart(cur) ) \n             ) ) {\n                continue;\n          }\n          String escaped=(cur=='$')?\"$$\":(\"$\"+Integer.toHexString((int)cur)\n+\"$\");\n          packageName=packageName.substring(0,pos)+escaped+packageName.substring\n(pos+1,packageName.length());\n          pos+=escaped.length()-1;\n        }\n        //System.out.println(getClass().getName()+\".getServletPackageName(): \npack=\"+packageName);\n        return packageName;\n    }"}, {"count": 1, "tags": [], "creator": "kin-man.chung@sun.com", "text": "*** Bug 6793 has been marked as a duplicate of this bug. ***", "id": 12518, "time": "2002-03-29T23:52:40Z", "bug_id": 7488, "creation_time": "2002-03-29T23:52:40Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "*** Bug 6939 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 12524, "creator": "kin-man.chung@sun.com", "time": "2002-03-30T01:19:23Z", "bug_id": 7488, "creation_time": "2002-03-30T01:19:23Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 7488, "attachment_id": null, "text": "*** Bug 7130 has been marked as a duplicate of this bug. ***", "id": 12526, "time": "2002-03-30T01:22:02Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-03-30T01:22:02Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 7488, "is_private": false, "text": "Note that JSPC can also generate illegal class names (same problem as package \nnames) if the JSP filename is a reserved Java keyword \n(e.g., \"protected\", \"private\", etc.).", "id": 12539, "time": "2002-03-30T08:12:49Z", "creator": "ruvinsky@yahoo.com", "creation_time": "2002-03-30T08:12:49Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "kin-man.chung@sun.com", "text": "Fixed.\n\nBTW, class names are already properly mangled.  If you can a test case that\nshows otherwise, reopen the bug.", "id": 12718, "time": "2002-04-02T23:53:10Z", "bug_id": 7488, "creation_time": "2002-04-02T23:53:10Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "creator": "mariopasquini@libero.it", "is_private": false, "id": 16501, "time": "2002-05-21T19:35:47Z", "bug_id": 7488, "creation_time": "2002-05-21T19:35:47Z", "tags": [], "text": "Im am using jasper with option -uriroot <WebRoot> and -p <PackageName> under \nwindows. The java generated file contains a wrong package name ( it is \nterminated by a '.' (dot) character ) and cannot be compiled."}, {"count": 7, "tags": [], "bug_id": 7488, "attachment_id": null, "is_private": false, "id": 35037, "time": "2003-04-11T23:24:40Z", "creator": "kin-man.chung@sun.com", "creation_time": "2003-04-11T23:24:40Z", "text": "This should have been fixed in TC4.1.x and TC5"}]
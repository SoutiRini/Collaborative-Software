[{"count": 0, "attachment_id": null, "creator": "daniel_atallah@yahoo.com", "is_private": false, "id": 175285, "time": "2014-05-16T19:13:53Z", "bug_id": 56537, "creation_time": "2014-05-16T19:13:53Z", "tags": [], "text": "According to the API docs for XSSFWorkbook ( http://poi.apache.org/apidocs/org/apache/poi/xssf/usermodel/XSSFWorkbook.html#XSSFWorkbook%28java.lang.String%29 ), \"OPCPackage.close()\" needs to be called when interaction with the Workbook is complete.\n\nIt's not possible to do that when using org.apache.poi.ss.usermodel.WorkbookFactory.create(File), so it presumably leaks in the same way that the deprecated XSSFWorkbook(String) constructor does.\n\nIt looks like same issue exists in the HSSFWorkbook() implementation for that method too - leaking the file handle in NPOIFSFileSystem."}, {"text": "WorkbookFactory.create(File) is only about 5 lines of code. If your use case means you need to close the resources explicitly, your best bet is to pull out the key 4 lines, and use them directly, along with adding hooks into your application's own resource tidy-up system.\n\nGiven the current simple method signature, it's not possible to return both the Workbook and the Closeable resource", "tags": [], "bug_id": 56537, "attachment_id": null, "count": 1, "id": 175634, "time": "2014-06-04T15:46:20Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-04T15:46:20Z", "is_private": false}, {"count": 2, "tags": [], "creator": "daniel_atallah@yahoo.com", "attachment_id": null, "id": 175637, "time": "2014-06-04T16:27:24Z", "bug_id": 56537, "creation_time": "2014-06-04T16:27:24Z", "is_private": false, "text": "Yes, I agree there's a relatively simple workaround (and that's exactly what we've done).  My concern is mainly that it isn't obvious that you'll run into a file handle leak if you use that functionality.  It seems to me that the documentation should be updated and the method should be deprecated since there doesn't appear to be a clean way to fix it."}, {"count": 3, "attachment_id": null, "creator": "apache@gagravarr.org", "is_private": false, "id": 175638, "time": "2014-06-04T16:36:15Z", "bug_id": 56537, "creation_time": "2014-06-04T16:36:15Z", "tags": [], "text": "I don't think we want to deprecate the method without a replacement - for most people it's by far the best way, as it's much lower memory\n\nIn r1600326 I've added a note to the javadoc"}, {"count": 4, "tags": [], "bug_id": 56537, "attachment_id": null, "id": 175639, "time": "2014-06-04T17:08:28Z", "creator": "daniel_atallah@yahoo.com", "creation_time": "2014-06-04T17:08:28Z", "is_private": false, "text": "No disagreement at all that it's preferable to use the lower memory functionality, and I'm very grateful to have that capability. :)\n\nMy concern continues to be that it's still not obvious that this isn't an appropriate API method to use in e.g. a long running application.  You just find out when you run out of available file handles :)\n\nIf the method were deprecated and the documentation had more details about why and how to avoid the problem, it would (should?) be more obvious that there's a \"caveat emptor\" situation."}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "is_private": false, "text": "I believe that the file handles should get returned when the references get garbage collected, so it shouldn't be the end of the world unless you're handling large numbers of small files\n\nIf we can come up with a simple API for WorkbookFactory that allows for opening with a File, and allows for explicit closing, then I'm happy to deprecate the existing one. Suggestions needed though!", "id": 175641, "time": "2014-06-04T21:11:20Z", "bug_id": 56537, "creation_time": "2014-06-04T21:11:20Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 56537, "attachment_id": null, "is_private": false, "id": 175749, "time": "2014-06-09T22:01:17Z", "creator": "daniel_atallah@yahoo.com", "creation_time": "2014-06-09T22:01:17Z", "text": "I'm not sure what kinds of changes would be acceptable to make at this point, but I guess that if Workbook was made Closeable, that could be one way to resolve this.\n\nThe Workbook could take ownership of the OPCPackage (and whatever is the corresponding thing for other constructors) and when it's closed, it can clean up.\n\nI suppose that you're right - GC will likely clean up the file handles since ZipFile calls close() in its finalize() method, but it's generally not a good practice to count on GC for such things."}, {"count": 7, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 175771, "time": "2014-06-11T13:49:07Z", "bug_id": 56537, "creation_time": "2014-06-11T13:49:07Z", "is_private": false, "text": "I've had a go at implementing this in r1601901.\n\nAny chance you could give that a whirl, and report back if that does what you were expecting?\n\nIf so, we can update the javadocs for WorkbookFactory and XSSFWorkbook.open(String), along with knocking up a quick unit test"}, {"count": 8, "tags": [], "bug_id": 56537, "attachment_id": null, "id": 175792, "time": "2014-06-12T19:06:43Z", "creator": "daniel_atallah@yahoo.com", "creation_time": "2014-06-12T19:06:43Z", "is_private": false, "text": "(In reply to Nick Burch from comment #7)\n> I've had a go at implementing this in r1601901.\n> \n> Any chance you could give that a whirl, and report back if that does what\n> you were expecting?\n> \n> If so, we can update the javadocs for WorkbookFactory and\n> XSSFWorkbook.open(String), along with knocking up a quick unit test\n\nThanks.  I looked at the commit and it made sense to me.\n\nThe only caveat that I can think of is if there's a use-case where someone would want to re-use the OPCPackage and now wouldn't be able to.\nIs it even possible to reuse the OPCPackage currently?\n\nI haven't built poi from source before, so there's a bit of a learning curve for me to do that."}, {"count": 9, "tags": [], "text": "There's nothing stopping you opening one NPOIFSFileSystem or OPCPackage from a file, then re-using that to open multiple Workbook instances that you then change + save elsewhere.\n\nThat said, in that case you'd probably be creating the low level object first, then passing that to the Workbook, so you would presumably be handling the close explicitly yourself", "is_private": false, "id": 175793, "creator": "apache@gagravarr.org", "time": "2014-06-12T19:11:47Z", "bug_id": 56537, "creation_time": "2014-06-12T19:11:47Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 56537, "attachment_id": null, "is_private": false, "id": 175794, "time": "2014-06-12T19:18:55Z", "creator": "daniel_atallah@yahoo.com", "creation_time": "2014-06-12T19:18:55Z", "text": "(In reply to Nick Burch from comment #9)\n> There's nothing stopping you opening one NPOIFSFileSystem or OPCPackage from\n> a file, then re-using that to open multiple Workbook instances that you then\n> change + save elsewhere.\n> \n> That said, in that case you'd probably be creating the low level object\n> first, then passing that to the Workbook, so you would presumably be\n> handling the close explicitly yourself\n\nAha, that makes sense.  Now that you mention it, the javadoc changes to XSSFWorkbook make it clear that you can do that."}, {"count": 11, "tags": [], "bug_id": 56537, "attachment_id": null, "id": 175818, "time": "2014-06-15T15:26:40Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-15T15:26:40Z", "is_private": false, "text": "*** Bug 56625 has been marked as a duplicate of this bug. ***"}, {"count": 12, "tags": [], "bug_id": 56537, "attachment_id": null, "is_private": false, "id": 176160, "time": "2014-07-02T15:03:02Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-07-02T15:03:02Z", "text": "*** Bug 56609 has been marked as a duplicate of this bug. ***"}, {"count": 13, "tags": [], "creator": "dominik.stadler@gmx.at", "is_private": false, "text": "I have updated the javadoc to reflect the Closeable Workbook, I think this is done now, please reopen if there is still work pending here.", "id": 176162, "time": "2014-07-02T15:07:13Z", "bug_id": 56537, "creation_time": "2014-07-02T15:07:13Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 56537, "attachment_id": null, "id": 176179, "time": "2014-07-03T05:47:32Z", "creator": "apache@gagravarr.org", "creation_time": "2014-07-03T05:47:32Z", "is_private": false, "text": "Thanks Dominik!\n\nTwo final little bits I've just spotted (+done):\n\nThe changelog needs updating to reflect the change, which I've done in r1607537.\n\nThe older path based constructor no longer needs to be deprecated, as you can now close the resources explicitly, updated with new javadoc text in r1607536."}]
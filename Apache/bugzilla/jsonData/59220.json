[{"count": 0, "tags": [], "creator": "niscomar@googlemail.com", "attachment_id": null, "text": "If an async dispatch cycle is started and a timeout occurs before the response\nbuffer is flushed using response#flushBuffer(), then the AsyncListener#onTimeout()\nmethod followed by the AsyncListener#onComplete() are correctly called.\n\nHowever, if the buffer is flushed before the timeout occurs, the \nAsyncListener#onTimeout() method will be called, but the \nAsyncListener#onComplete() will not be.\n\nA sample servlet demonstrating the problem, AsyncDebugListener, is provided \nat the following location:\n\nhttps://github.com/msnicklous/AsyncDebug\n\nBuild the AsyncDebugListener module using 'mvn install' and deploy it on Tomcat.\n\nThe service method and each of the AsyncListener methods logs output to the\nAsyncListener.log file. You can follow execution by looking at the logs.\n\nAssuming Tomcat is installed locally, you can use the following URLs:\n\n1) No timeout - works correctly:\n\nhttp://localhost:8080/AsyncDebugListener/ltest?reps=3\n\n2) Timeout, no flush - works correctly:\n\nhttp://localhost:8080/AsyncDebugListener/ltest?reps=3&timeout\n\n3) Flush before timeout - error case:\n\nhttp://localhost:8080/AsyncDebugListener/ltest?reps=3&timeout&flush\n\nFrom the logs, you will see that AsyncListener#onTimeout() was called, but  \nAsyncListener#onComplete() was not.\n\nThanks for having a look at this!", "id": 189668, "time": "2016-03-23T13:17:59Z", "bug_id": 59220, "creation_time": "2016-03-23T13:17:59Z", "is_private": false}, {"count": 1, "tags": [], "text": "Hi,\n\nBased on the example that you've provided I can say that you are in so called \"error dispatch\" situation i.e. \n\n\n\"2.3.3.3 Asynchronous processing\n- If none of the listeners called AsyncContext.complete or any of the\nAsyncContext.dispatch methods, then perform an error dispatch with a\nstatus code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR\nand make the Throwable available as the value of the\nRequestDispatcher.ERROR_EXCEPTION request attribute.\n- If no matching error page is found, or the error page does not call\nAsyncContext.complete() or any of the AsyncContext.dispatch methods,\nthen the container MUST call AsyncContext.complete.\"\n\n\nSo when you do not perform flush the response is not committed and org.apache.catalina.valves.ErrorReportValve.invoke(...) handles the situation correctly and onComplete is called, but when you perform flush, ErrorReportValve will mark the connection to be closed as the response is committed and onComplete will not be invoked.\n\nI'm thinking about whether we should delay this, but I would like to hear the other committers' opinion.\n\n\nFor your use case my recommendation is to call AsyncContext.complete in your listener and not to wait the container to call it for you.\n\nRegards,\nVioleta", "attachment_id": null, "bug_id": 59220, "id": 189751, "time": "2016-03-28T10:30:36Z", "creator": "violetagg@apache.org", "creation_time": "2016-03-28T10:30:36Z", "is_private": false}, {"count": 2, "tags": [], "text": "That sounds like a logical explanation and 59219 sounds a bit similar. This is all edge cases though and I doubt everything is well defined in the specification. So it is best to not try it :)", "attachment_id": null, "bug_id": 59220, "id": 189757, "time": "2016-03-28T13:37:23Z", "creator": "remm@apache.org", "creation_time": "2016-03-28T13:37:23Z", "is_private": false}, {"count": 3, "tags": [], "creator": "niscomar@googlemail.com", "text": "Hi Violeta and Remy,\n\nthank you very much for having a look at this so quickly (and thank you, Remy for fixing 59213 so promptly!).  The example servlets I provided were for the purpose of reproducing the problem rather than for illustrating the use case. I would like to explain my use case more clearly.\n\nI'm working on the Apache Pluto project, which is the reference implementation for JSR 286 Portlet Specification 2.0, and which will be the reference implementation for JSR 362 Portlet Specification 3.0. Pluto is a minimal portal server that implements the required API for portlet applications. \n\nFor version 3.0, we want to provide async support for portlet applications. The portlet specification can make recommendations about how portlet applications should do error handling, but can't really guarantee that the portlet apps will follow the recommendations.\n\nThe Pluto server has to allocate resources to support the portlet applications during async processing and needs a reliable way to release those resources even if a timeout or error condition occurs. It seems to me that the natural way to do that would be for the Pluto server to register an AsyncListener on behalf of the portlet application in order to release the resources when onComplete() is called.\n\nHowever, this bug along with 59219 means that in these edge cases, Pluto will not be able to release the resources, which could potentially result in a memory leak. \n\nThat said, I understand that these really are edge cases, and I can't really say how high the priority should be in the grand scheme of things. But it would be very nice if they could be fixed at some point as time & priority allows. :-)\n\nthanks again,\nScott", "id": 189790, "time": "2016-03-29T16:00:38Z", "bug_id": 59220, "creation_time": "2016-03-29T16:00:38Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 189796, "time": "2016-03-29T17:28:29Z", "bug_id": 59220, "creation_time": "2016-03-29T17:28:29Z", "is_private": false, "text": "The question is really about the cases where complete should be called for the application (which didn't call it although it should have)."}, {"count": 5, "tags": [], "bug_id": 59220, "is_private": false, "text": "I know what you mean and agree with you. \n\nFrom Tomcat's point of view, the Pluto portal is an application. However, Pluto itself hosts portlet applications that may come from various sources. The question is how can Pluto release its resources allocated to a portlet async request if the portlet application misbehaves or has an exception and does not call complete()? \n\nMy idea was that Pluto could register an AsyncListener of its own (in addition to any AsyncListeners possibly registered by the portlet applications) to release its resources during the onComplete call. But that only works if the underlying container (Tomcat, in this case) assures that onComplete is called under all circumstances.", "id": 189808, "time": "2016-03-29T20:01:46Z", "creator": "niscomar@googlemail.com", "creation_time": "2016-03-29T20:01:46Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "text": "(In reply to Scott Nicklous from comment #5)\n> I know what you mean and agree with you. \n> \n> From Tomcat's point of view, the Pluto portal is an application. However,\n> Pluto itself hosts portlet applications that may come from various sources.\n> The question is how can Pluto release its resources allocated to a portlet\n> async request if the portlet application misbehaves or has an exception and\n> does not call complete()? \n> \n> My idea was that Pluto could register an AsyncListener of its own (in\n> addition to any AsyncListeners possibly registered by the portlet\n> applications) to release its resources during the onComplete call. But that\n> only works if the underlying container (Tomcat, in this case) assures that\n> onComplete is called under all circumstances.\n\nThe idea here is that you should call AsyncContext.complete() in onTimeout event that your listener will receive instead of waiting for container to call AsyncContext.complete() and then onComplete().\n\nIn your example if I add AsyncContext.complete() in basic.servlet.TestedListener.onTimeout(AsyncEvent) then the third use case is working.\n\nDo you think this will work for your scenario?\n\nRegards,\nVioleta", "id": 189810, "time": "2016-03-29T20:19:00Z", "bug_id": 59220, "creation_time": "2016-03-29T20:19:00Z", "is_private": false}, {"count": 7, "tags": [], "text": "Hi Violeta,\nThat would be a potential workaround for the timeout case. I would have to ensure that the Pluto listener runs after all AsyncListeners registered by the portlet applications. \n\nIt would be a little bit difficult to implement, since the servlet spec requires that the listeners be called in the order in which they are registered, and that's the way Tomcat works, too. So Pluto would not be able to simply call startAsync, add its listener to the AsyncContext, and pass the AsyncContext to the portlet application. I would probably have to wrap the AsyncContext object in order to make sure that the Pluto listener is always the last one added.\n\nBut it would be possible.", "attachment_id": null, "bug_id": 59220, "id": 189815, "time": "2016-03-30T07:17:46Z", "creator": "niscomar@googlemail.com", "creation_time": "2016-03-30T07:17:46Z", "is_private": false}, {"count": 8, "tags": [], "text": "If you wait for Tomcat to invoke a complete(), then this will be an error situation and as it is per spec Tomcat will set the response code to 500. Isn't that a problem from application point of view?", "is_private": false, "id": 189816, "creation_time": "2016-03-30T07:22:57Z", "time": "2016-03-30T07:22:57Z", "creator": "violetagg@apache.org", "bug_id": 59220, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "niscomar@googlemail.com", "is_private": false, "count": 9, "id": 189820, "time": "2016-03-30T09:04:12Z", "bug_id": 59220, "creation_time": "2016-03-30T09:04:12Z", "text": "In the specific case addressed by this bug report, both onTimeout() and onComplete() are correctly called as long as the buffer is not flushed. \n\nThe problem occurs only when the buffer was flushed at least once before the timeout occurs. If the buffer was flushed, onTimeout() is called, but onComplete() is not.\n\nIf the buffer was  flushed, I don't think Tomcat can set the status code or do an error dispatch anymore. But it would be nice if onComplete() would be called after the onTimeout() anyway."}, {"count": 10, "tags": [], "creator": "violetagg@apache.org", "attachment_id": null, "text": "(In reply to Scott Nicklous from comment #9)\n> In the specific case addressed by this bug report, both onTimeout() and\n> onComplete() are correctly called as long as the buffer is not flushed. \n> \n> The problem occurs only when the buffer was flushed at least once before the\n> timeout occurs. If the buffer was flushed, onTimeout() is called, but\n> onComplete() is not.\n> \n> If the buffer was  flushed, I don't think Tomcat can set the status code or\n> do an error dispatch anymore. But it would be nice if onComplete() would be\n> called after the onTimeout() anyway.\n\nActually it will as it is required by the spec\n\n\"\n- Invoke the AsyncListener.onTimeout method on all the AsyncListener\ninstances registered with the ServletRequest on which the asynchronous\noperation was initiated.\n- If none of the listeners called AsyncContext.complete() or any of the\nAsyncContext.dispatch methods, perform an error dispatch with a status\ncode equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR.\"\n\n\"GET /AsyncDebugListener/ltest?reps=3&timeout&flush HTTP/1.1\" 500 642\n\"GET /AsyncDebugListener/ltest?reps=3&timeout HTTP/1.1\" 500 624\n\nThis is what I will receive in the http access code with your example.\n\nRegards,\nVioleta", "id": 189822, "time": "2016-03-30T09:22:01Z", "bug_id": 59220, "creation_time": "2016-03-30T09:22:01Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 59220, "attachment_id": null, "text": "It is worth taking a look to see if we can get consistent behaviour with and without flush. The client won't see the same result but hopefully the app will be able to see a consistent set of events.", "id": 189824, "time": "2016-03-30T09:29:18Z", "creator": "markt@apache.org", "creation_time": "2016-03-30T09:29:18Z", "is_private": false}, {"count": 12, "tags": [], "creator": "niscomar@googlemail.com", "attachment_id": null, "text": "I would not see a problem in handling the SC=500 as long as onComplete() is called. It would seem to me to be the specified behavior. \n\nIn the case of Pluto, the SC=500 along with any Tomcat-generated error text would be passed to the client, which would give the portlet application developers a nice clue that they need to fix their bug. :-)", "id": 189828, "time": "2016-03-30T10:04:18Z", "bug_id": 59220, "creation_time": "2016-03-30T10:04:18Z", "is_private": false}, {"count": 13, "tags": [], "creator": "markt@apache.org", "text": "Fixed in:\n- 9.0.x for 9.0.0.M5 onwards\n- 8.5.x for 8.5.1 onwards\n- 8.0.x for 8.0.34 onwards\n- 7.0.x for 7.0.70 onwards", "id": 190390, "time": "2016-04-19T18:53:18Z", "bug_id": 59220, "creation_time": "2016-04-19T18:53:18Z", "is_private": false, "attachment_id": null}]
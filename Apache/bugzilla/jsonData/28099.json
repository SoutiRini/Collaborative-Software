[{"count": 0, "attachment_id": null, "creator": "jacarpenter@ercot.com", "is_private": false, "id": 54980, "time": "2004-03-31T17:21:16Z", "bug_id": 28099, "creation_time": "2004-03-31T17:21:16Z", "tags": [], "text": "The junit task appears to have a problem whenever the %PATH% variable contains \nan element enclosed in quotes.  ex: \nPATH=C:\\somedir\\someutility;\"C:\\someother\\path\";C:\\yet\\another\\path\nThe java command line calls formed by the junit task appear to mess up the \nvalue of the java.library.path system property.  The problem appears to be \nclose to where the value of the dir attribute of the junit task is inserted \ninto the java.library.path value.  (Not sure about the last part, the problem \nhas rolled out of my screen buffer and I'm short on time.)\n\nThe relevant snipts from my build file are below.  I believe one could emulate \nthe problem in the following situation:\n1) junit nested batchtest forks\n2) junit dir attribute is set\n3) java.library.path system property is set\n4) PATH environment variable contains something in quotes.\n\nI doubt all of this is necessary to duplicate the bug.  Unfortuantely, I don't \nhave the time to debug this and submit a patch.  For now I just made sure I \ndidn't have any quoted elements in my PATH.\n\n\n=====\nBuild file snipts:\n=====\n<property name=\"javalib.including.dlls.path\" value=\"${java.library.path}\"/>\n\n<junit haltonfailure=\"no\"\n       failureproperty=\"tests.failed\"\n       dir=\"${basedir}\"\n       printsummary=\"yes\">\n\n       <sysproperty key=\"java.library.path\"\n          path=\"${javalib.including.dlls.path}\"/>\n        <classpath refid=\"test.classpath.ref\"/>\n        <formatter type=\"plain\" usefile=\"no\"/>\n        <batchtest fork=\"yes\"\n            todir=\"${simpletest.reports}\">\n\n            <fileset dir=\"${testsrc.home}\">\n               <patternset refid=\"test.simple.patternset\"/>\n             </fileset>\n        </batchtest>\n</junit>"}, {"count": 1, "tags": [], "bug_id": 28099, "attachment_id": null, "id": 54998, "time": "2004-03-31T21:33:48Z", "creator": "jacarpenter@ercot.com", "creation_time": "2004-03-31T21:33:48Z", "is_private": false, "text": "It looks like this is a much more fundamental bug than I first realized.\nThe <sysproperty key=\"java.library.path\" \npath=\"${javalib.including.dlls.path}\"/> element nested in the junit task is \nresponsible for the call to the \"public void addConfiguredSysproperty\n(Environment.Variable sysp)\" method at line 403 of the \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTask class.  When I run the \nbuild in the debugger and look at the contents of the Environment.Variable \ninstance passed into the addConfiguredSysproperty method the problem has \nalready surfaced.\n\nWithin my debugger I am setting the java.library.path system property of the \njvm running the org.apache.tools.ant.Main class \nto 'C:\\Perl\\bin;\"C:\\junk\";C:\\devtools\\vim\\vim62;C:\\Python23'\n(i.e. -\nDjava.library.path='C:\\Perl\\bin;\"C:\\junk\";C:\\devtools\\vim\\vim62;C:\\Python23')\n\nSetting a breakpoint within the addConfiguredSysproperty(Environment.Variable) \nmethod I find that the Environment.Variable instance has a key of \njava.library.path (as expected) and a String value \nof \"C:\\\\workarea\\\\javaapps\\\\examplewebcomponent\\\\'C;C:\\\\Perl\\\\bin;C:\\\\junk;C:\\\\d\nevtools\\\\vim\\\\vim62;C:\\\\Python23'\"\nThe C:\\\\workarea\\javaapps\\examplewebcomponent\\\\ directory corresponds to the \nvalue of the directory in which java was executed (my ${basedir}).  The \ntroublesome portion is the extra \\'C; found before C:\\\\Perl\\\\bin....\n\nAs the snipt originally provided shows the value of the path attribute of the \nnested sysproperty element is comming from ${javalib.including.dlls.path}.  \nConsequently, I decided to take a look at the value of the \njavalib.including.dlls.path and java.library.path ant variables while sitting \nat my breakpoint inside of the addConfiguredSysproperty(Environment.Variable) \nmethod.  Using my evaluation window I find:\nthis.getProject().getProperty(\"java.library.path\") \n= \"'C:\\\\Perl\\\\bin;C:\\\\junk;C:\\\\devtools\\\\vim\\\\vim62;C:\\\\Python23'\"\nand\nthis.getProject().getProperty(\"javalib.including.dlls.path\") \n= \"'C:\\\\Perl\\\\bin;C:\\\\junk;C:\\\\devtools\\\\vim\\\\vim62;C:\\\\Python23'\"\n\nSo the ant properties are fine but somewhere deep within ant's dynamic XML to \njava code mapping it has prepended the base directory to the value of the \nEnvironment.Variable instance.  I took a look at the Environment.Variable class \nand it's way too simple to have been responsible for prepending a base \ndirectory.\n\nAt this stage I recognize I am way too deep in the Ant jungle.  Obviously \nEnvironment.Variable classes get some special treatment I don't know about that \nisn't listed in the \"Conversions Ant will perform for attributes\" section of \nthe ant manual.  For now I will run away screaming, warn my teammates of the \nproblem, and promise not ever have double quotes in my PATH environment \nvariable.  Solving the problem myself means learning much more of the nitty \ngritty ant internals than I have time for.  Hopefully the kings of the Ant \njungle will look into this problem and solve it for all of us in some future \nrelease.\n"}, {"count": 2, "tags": [], "bug_id": 28099, "attachment_id": null, "id": 55003, "time": "2004-03-31T22:14:03Z", "creator": "stevel@apache.org", "creation_time": "2004-03-31T22:14:03Z", "is_private": false, "text": "putting quotes in PATH or classpath is trouble, not just for Ant, but anything\njava-ish. We quote lots of our stuff and extra quotes is bad news as the OS can\nsplit things up before handing it off to ant. \n\nMore to the point, inner quotes are is needed. We quote the env variables in our\nscripts, and any half decent java launcher script should do the same. \n\nLeaving the bug open, hoping someone brave will take it on."}, {"count": 3, "tags": [], "bug_id": 28099, "attachment_id": null, "id": 55005, "time": "2004-03-31T22:27:54Z", "creator": "jacarpenter@ercot.com", "creation_time": "2004-03-31T22:27:54Z", "is_private": false, "text": "I would be ok with nothing other than a very useful warning message that \nissolates the cause of the problem.  When I first encountered the problem it \nseemed to be an issue with the junit task.  It was several hours later before I \nhad my finger on the problem.  (It didn't help that I found the problem working \non a team member's workstation.  I didn't reproduce the problem in the debugger \nuntil I got back to my own workstation.)"}, {"count": 4, "text": "On windows at least, this also occurs with the cvs task; CVS cannot be found\n(error 2) when quotes are used on its portion of the path.\n\nA similar problem occurs with the exec task.  PATH elements with quotes in are\nnot (successfully) used to find programs.\n\nIt also occurs with the copy task.  When the destination path has a portion\nenclosed in quotes (e.g. dest=\"c:\\blah\"\\blah) it treats it as a relative path\nrather than an absolute one.\n\nThis is quite a fundamental bug with Ant, at least on Windows.\n\nI've retitled this to reflect the fact it's not just a problem with junit.", "bug_id": 28099, "attachment_id": null, "id": 74272, "time": "2005-04-29T12:04:23Z", "creator": "asfbugs1@alistairphipps.com", "creation_time": "2005-04-29T12:04:23Z", "tags": [], "is_private": false}]
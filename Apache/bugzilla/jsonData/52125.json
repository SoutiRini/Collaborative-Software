[{"count": 0, "tags": [], "bug_id": 52125, "attachment_id": null, "text": "When joining two StatCalucators (where a key in the TreeMap has value > 1) I got incorrect values of the final dataset (count, sum, deviation ..) \n\nProblematic functions are addAll(StatCalculator<T> calc) and addValue(T val, int sampleCount)\n\nSee example showing the behavior and proposed fix of the functions.\n\n==========================================================================\nEXAMPLE\nLet\u2019s have two StatCalculator sc1 and sc2. \nsc1 has values: 1, 2, 3\nsc2 has values: 2, 2, 2\n\nSTAT.VALUES OF sc1 \ncount: 3\nsum: 6.0\ndeviation: 0.8164965809277263\nTreeMap: \n\u2022 key: 1 value: 1\n\u2022 key: 2 value: 1\n\u2022 key: 3 value: 1\n\nSTAT.VALUES OF sc2 \ncount: 3\nsum: 6.0\ndeviation: 0.0\nTreeMap: \n\u2022 value: 2 count: 3\n\nSTAT.VALUES OF sc1+sc2  (sc1.addAll(sc2))\ncount: 4   WRONG (should be 6)\nsum: 8.0   WRONG (should be 12)\ndeviation: 0.707106711865476 WRONG (should be 0.5773502691896255)\nTreeMap: \n\u2022 key: 1 value: 1\n\u2022 key: 2 value: 2 WRONG(samples with response=2ms occurs 4times!)                  \n\u2022 key: 3 value: 1\n\n==========================================================================\nORIGINAL FUNCTIONS:\n\npublic void addAll(StatCalculator<T> calc) {\n        for (T val : calc.valuesMap.keySet()) {\n            addValue(val);\n        }\n    }\n\npublic void addValue(T val, int sampleCount) {\n        count += sampleCount;\n        double currentVal = val.doubleValue();\n        sum += currentVal;\n        T actualValue = val;\n        if (sampleCount > 1){\n            // For n values in an aggregate sample the average value = (val/n)\n            // So need to add n * (val/n) * (val/n) = val * val / n\n            sumOfSquares += currentVal * currentVal / sampleCount;\n            actualValue = divide(val, sampleCount);\n        } else {\n            sumOfSquares += currentVal * currentVal;\n            actualValue = val;\n        }\n        updateValueCount(actualValue, sampleCount);\n        mean = sum / count;\n        deviation = Math.sqrt((sumOfSquares / count) - (mean * mean));\n        if (actualValue.compareTo(max) > 0){\n            max=actualValue;\n        }\n        if (actualValue.compareTo(min) < 0){\n            min=actualValue;\n        }\n    }\n====================================================================\nFIXED FUNCTIONS:\n\npublic void addAll(StatCalculator<T> calc) {\n        for (T val : calc.valuesMap.keySet()) {\n        \taddValue(val , calc.valuesMap.get(val).intValue());\n        }\n    }\n\n\npublic void addValue(T val, int sampleCount) {\n        count += sampleCount;\n        double currentVal = val.doubleValue();   \n        sum += currentVal * sampleCount; \n        // For n same values in sum of square is equal to n*val^2\n        sumOfSquares += currentVal * currentVal * sampleCount; \n        updateValueCount(val, sampleCount);       \n        mean = sum / count;\n        deviation = Math.sqrt((sumOfSquares / count) - (mean * mean));\n        if (val.compareTo(max) > 0){\n            max=val;\n        }\n        if (val.compareTo(min) < 0){\n            min=val;\n        }\n    }", "id": 151134, "time": "2011-11-02T15:51:37Z", "creator": "briskarova@post.sk", "creation_time": "2011-11-02T15:51:37Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52125, "attachment_id": null, "text": "Thanks! Good examples and fix.\nIdeally patches should be provided as unified diffs as these are easier to review and apply, but in this case it was easy to see the changes.\n\nApplied with one minor change: used entrySet for the iterator as now need the value as well as the key.\n\nURL: http://svn.apache.org/viewvc?rev=1197376&view=rev\nLog:\nBug 52125 - StatCalculator.addAll(StatCalculator calc) joins incorrect if there are more samples with the same response time in one of the TreeMap\n\nModified:\n   jmeter/trunk/src/jorphan/org/apache/jorphan/math/StatCalculator.java\n   jmeter/trunk/test/src/org/apache/jorphan/math/TestStatCalculator.java\n   jmeter/trunk/xdocs/changes.xml", "id": 151173, "time": "2011-11-04T00:59:30Z", "creator": "sebb@apache.org", "creation_time": "2011-11-04T00:59:30Z", "is_private": false}, {"count": 2, "tags": [], "text": "The fix broke processing of StatisticalSampleResults.\n\nThe problem is that the StatisticalSampleResults class accumulates the elapsed time for each sample, whereas the StatCalculator classes count samples with the same values. In the first case, there is no need to multiply by the number of samples, but in the second the value needs to be adjusted before use.\n\nAlso need to add some tests for the StatisticalSampleResults class.", "is_private": false, "bug_id": 52125, "id": 152254, "time": "2011-12-17T19:20:46Z", "creator": "sebb@apache.org", "creation_time": "2011-12-17T19:20:46Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52125, "text": "URL: http://svn.apache.org/viewvc?rev=1221486&view=rev\nLog:\nBug 52339 - JMeter Statistical mode in distributed testing shows wrong response time<\n\nModified:\n   jmeter/trunk/src/jorphan/org/apache/jorphan/math/StatCalculator.java\n   jmeter/trunk/src/jorphan/org/apache/jorphan/math/StatCalculatorInteger.java\n   jmeter/trunk/src/jorphan/org/apache/jorphan/math/StatCalculatorLong.java\n   jmeter/trunk/test/src/org/apache/jorphan/math/TestStatCalculator.java\n   jmeter/trunk/xdocs/changes.xml", "id": 152342, "time": "2011-12-20T20:51:46Z", "creator": "sebb@apache.org", "creation_time": "2011-12-20T20:51:46Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "attachment_id": null, "bug_id": 50991, "is_private": false, "id": 145372, "time": "2011-03-29T08:13:54Z", "creator": "mark.shifman@yale.edu", "creation_time": "2011-03-29T08:13:54Z", "tags": [], "text": "In my ServletContextListener contextDestroyed method I do a database update to clean up a table.  In tomcat 7.0.11, I get the error (see below) when I shutdown tomcat.\nMar 28, 2011 10:47:57 AM org.apache.catalina.core.ApplicationContext log\n> INFO: ContextListener: contextDestroyed()\n> Mar 28, 2011 10:47:57 AM org.apache.catalina.core.StandardContext listenerStop\n> SEVERE: Exception sending context destroyed event to listener instance of class org.ycmi.listeners.contextListener\n> java.lang.RuntimeException: java.sql.SQLException: Data source is closed\n>         at org.ycmi.prot.ypresults.db.dbUtils.update(dbUtils.java:495)\n>         at org.ycmi.listeners.contextListener.contextDestroyed(contextListener.java:58)\n\nThis looks like the DataSource is being closed before contextDestroyed is run so I can't do the clean up. This wasn't a problem in tomcat 6.\n\nAs noted by Mark Thomas, this may be related to\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=25060"}, {"count": 1, "tags": [], "text": "When working on this, it is worth taking a look at Filip's suggestion:\nhttp://markmail.org/message/av4if6mstsh6qw4n", "attachment_id": null, "id": 145374, "creator": "markt@apache.org", "time": "2011-03-29T11:26:13Z", "bug_id": 50991, "creation_time": "2011-03-29T11:26:13Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50991, "attachment_id": null, "id": 145403, "time": "2011-03-30T08:27:22Z", "creator": "markt@apache.org", "creation_time": "2011-03-30T08:27:22Z", "is_private": false, "text": "Thanks for the report. This has been fixed in 7.0.x and will be included in 7.0.12 onwards. I'll be looking at Filip's suggestion next."}, {"count": 3, "attachment_id": null, "bug_id": 50991, "is_private": false, "id": 145404, "time": "2011-03-30T09:35:36Z", "creator": "markt@apache.org", "creation_time": "2011-03-30T09:35:36Z", "tags": [], "text": "Filip's suggested enhancement will also be in 7.0.12"}, {"count": 4, "tags": [], "text": "Regarding r1086950 two comments:\n\n1. The following is printed in the logs now:\n\n31.03.2011 0:01:57 org.apache.catalina.users.MemoryUserDatabase save\nSEVERE: User database has been configured to be read only. Changes cannot be saved\n\nThat is because MemoryUserDatabase#close() method does exist and calls save() unconditionally.\n\n2. In NamingResources#cleanUp():\n> resource = ctxt.lookup(name);\n\nIf it is the first lookup for a ContextResource, or this resource is not a \"singleton\", this will create an instance of it. -> see (1) below\n\nFor \"javax.sql.DataSource\" resources it does not happen, because a lookup() is called elsewhere just after binding them, to register them with JMX -> see (2)\nbut for any others this might be a slight concern.\n\nUnrelated note, looking at (2): registering DataSource with JMX makes sense only if it is a singleton. Otherwise we would not be managing the actual object. It is good that it is singleton by default.\n\n\nIt would be nice to perform cleanup only for the resources that have been already created (entry.type == NamingEntry.ENTRY), but I do not see how that can be implemented.   The NamingEntry class is something internal to org.apache.naming.\n\n\nMy proposal is the following:\n1. Assume the default value of \"close\" only for the resources of type \"javax.sql.DataSource\".\n\nThat is, for any other resource types assume that the value is unset by default and do not perform lookup of the resource.\n\n2. Regarding (2): add a comment to the singleton attribute that singleton=true is necessary for JMX management of connection pools.\n\n3. Do not call save() in MemoryUserDatabase.close() if it is readonly.\n\n------------------------------------------------\n(1): In the sources:\nContextResource is represented by ResourceRef object (in NamingContextListener#addResource(ContextResource))\n\nResourceRef is represented by NamingEntry.REFERENCE (in NamingContext#bind(Name, Object, boolean)\nNamingContext.bind() creates\n\nLookup is implemented in NamingContext.lookup(Name, boolean) and\n(entry.type == NamingEntry.REFERENCE) branch is called.\n------------------------------------------------\n(2):  In the sources:\nIn NamingContextListener#addResource(ContextResource):\nif (\"javax.sql.DataSource\".equals(ref.getClassName())) {\n -> lookup\n------------------------------------------------", "is_private": false, "id": 145425, "creation_time": "2011-03-30T19:21:20Z", "time": "2011-03-30T19:21:20Z", "creator": "knst.kolinko@gmail.com", "bug_id": 50991, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 50991, "attachment_id": null, "text": "(In reply to comment #4)\n\n> \n> My proposal is the following:\n> 1. Assume the default value of \"close\" only for the resources of type\n> \"javax.sql.DataSource\".\n\nSimplest would be that if closeMethod is not set, don't call close.\nThat way you're backwards compatible, and provide the functionality a user needs.\nclose is not a method on the javax.sql.DataSource interface\n\nFilip", "id": 145427, "time": "2011-03-30T19:29:49Z", "creator": "fhanik@apache.org", "creation_time": "2011-03-30T19:29:49Z", "is_private": false}, {"count": 6, "tags": [], "text": "Thanks for the review and feedback.\n\nI have made the following changes for 7.0.12:\n- disable by default be changing the default for closeMethod to null (r1087286)\n- don't try and close non-singleton resources as it is pointless (r1087291)\n- only register DataSources with JMX if they are singletons (r1087292)", "is_private": false, "id": 145435, "creator": "markt@apache.org", "time": "2011-03-31T09:25:03Z", "bug_id": 50991, "creation_time": "2011-03-31T09:25:03Z", "attachment_id": null}]
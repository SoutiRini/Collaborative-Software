[{"count": 0, "tags": [], "bug_id": 59747, "attachment_id": null, "is_private": false, "id": 191911, "time": "2016-06-23T13:01:41Z", "creator": "dominik.maehl@ecclesia.de", "creation_time": "2016-06-23T13:01:41Z", "text": "Hi,\n\nI'm creating this bug due to a problem we've encountered with POI generated xlsx files.\n\nApparently the order of zip entries in xlsx files is important for tools which determine the file type be matching a byte pattern. See for example Apache Tika (without deeper OOXML support library) and linux's file command.\n\nThe OOXML spec and Excel have no problem with POI files but tools relying on a certain pattern have.\n\nHere the output of unzip -l on a POI xlsx file:\n\nArchive:  poi.xlsx\n  Length     Date   Time    Name\n --------    ----   ----    ----\n      591  02.06.16 12:40   _rels/.rels\n     1063  02.06.16 12:40   [Content_Types].xml\n      183  02.06.16 12:40   docProps/app.xml\n      437  02.06.16 12:40   docProps/core.xml\n      137  02.06.16 12:40   xl/sharedStrings.xml\n      818  02.06.16 12:40   xl/styles.xml\n      349  02.06.16 12:40   xl/workbook.xml\n      569  02.06.16 12:40   xl/_rels/workbook.xml.rels\n      670  02.06.16 12:40   xl/worksheets/sheet1.xml\n --------                   -------\n     4817                   9 files\n\nAnd for a native file:\n\nArchive:  excel.xlsx\n  Length     Date   Time    Name\n --------    ----   ----    ----\n     1032  01.01.80 00:00   [Content_Types].xml\n      588  01.01.80 00:00   _rels/.rels\n      557  01.01.80 00:00   xl/_rels/workbook.xml.rels\n      906  01.01.80 00:00   xl/workbook.xml\n     1542  01.01.80 00:00   xl/styles.xml\n     6790  01.01.80 00:00   xl/theme/theme1.xml\n     1306  01.01.80 00:00   xl/worksheets/sheet1.xml\n      593  01.01.80 00:00   docProps/core.xml\n      816  01.01.80 00:00   docProps/app.xml\n --------                   -------\n    14130                   9 files\n\nAccording to linux file and Tika they seem to expect [Content_Types].xml as the first entry, skip the second and look for a \"xl/\" in the third entry.\n\nWould it be possible to fix the order of the entries?\n\nWe've written a simple post processing tool which rewrites the zip file but would be happy to have this in POI proper.\n\nThanks and contact me if I can help."}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "Apart from a handful of formats (eg those which require a mimetypes file that's uncompressed as the first entry in the zip), reliably detecting container formats can only be done by opening up the container itself\n\nApache Tika ships with a special detector for zip-based container formats for this very reason!\n\n(Tika also, on trunk, correctly detects POI-generated OOXML files as OOXML from mime magic only)", "id": 191912, "time": "2016-06-23T13:27:50Z", "bug_id": 59747, "creation_time": "2016-06-23T13:27:50Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 59747, "attachment_id": null, "text": "Seems to me, those tools that rely on a specific file order within an archive have a design flaw, that is, they rely on a specific file order within the archive. Apparently Tika does not have that issue, but anything that does will have an issue if Excel ever changes the order in which it writes files to the xlsx archive. It apparently doesn't care what the order is, so there is no guarantee the order will remain the same in future versions of the product.", "id": 191913, "time": "2016-06-23T13:46:24Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-06-23T13:46:24Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 59747, "is_private": false, "text": "I agree with both of you. But I'm also convinced that Excel will be (and is) seen as the reference implementation for ooxml. I can give you the name of at least one commercial content filtering product which ships with the mentioned bit patterns.\n\nAlso the change for tika was committed just yesterday :-)\n\n(https://github.com/apache/tika/commit/52ea9ba7c2e3c99e7a2d4fb38875caa996438857)\n\nTo be clear. I know that this approach is flawed but it seems to me that it is a standard practice and maybe it is easier to \"fix\" in POI than in every tool out there.\n\nIf someone would point me to how to do it I would happily create a patch or pull request or whatever. It's just that by looking at the POI code I could not find an easy way to do it.", "id": 191931, "time": "2016-06-24T06:15:54Z", "creator": "dominik.maehl@ecclesia.de", "creation_time": "2016-06-24T06:15:54Z", "attachment_id": null}, {"count": 4, "text": "Here's a start:\n$ grep --recursive --files-with-matches --exclude-dir=\".svn\" -E \"CONTENT_TYPES_PART_NAME|Content_Types|_rels|\\.rels|RELATIONSHIP_PART\" --include=*.java src/ooxml/java/org/apache/poi/openxml4j/opc\n\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/PackageRelationship.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/PackagePartName.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/OPCPackage.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/ZipPackage.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/internal/ContentTypeManager.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/internal/ZipHelper.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/internal/ZipContentTypeManager.java\nsrc/ooxml/java/org/apache/poi/openxml4j/opc/PackagingURIHelper.java\n\nI did a quick glance over and ZipPackage#getPartsImpl and the TreeMap partList looked potentially relevant, but couldn't figure it out if this is where the order is being set. Also, it's possible that the content manager needs to be created before the rels, which may make it difficult to simply rearrange the code to get the _rels directory to be created first. Seems more logical to me for files in higher directories to be created before files in lower directories.", "creator": "onealj@apache.org", "attachment_id": null, "id": 192261, "time": "2016-07-09T09:31:35Z", "bug_id": 59747, "creation_time": "2016-07-09T09:31:35Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 59747, "attachment_id": null, "is_private": false, "id": 201095, "time": "2017-09-22T21:21:44Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-09-22T21:21:44Z", "text": "A fix for this was actually quite easy, just exchanging the order of writing the two files in ZipPackage.saveImpl(). \n\nI have done this in r1809357. If it causes issues we may need to revert this, though!"}]
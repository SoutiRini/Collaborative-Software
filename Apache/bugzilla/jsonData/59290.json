[{"count": 0, "tags": [], "bug_id": 59290, "attachment_id": null, "text": "No matter how I try to get the picture data (byte array) it is always MUCH smaller then what is actual image embedded in the excel file for EMF images. I know this is fact because I took an Excel file (say X.xlsx)  made a copy of this file and renamed it it to X.zip.  Open the archive and went to the \\xl\\media\\ folder and the embedded original image files are listed in their full original size and resolutions.  For example one emf image had a size of 804,036 bytes.  If I call the getData on the picture programmatically using the below code the byteArray is a much smaller, for that same image for example it was 129KB instead of 804KB.  The image is a valid image just much lower quality to the point that I really can't use it.  Is there some hidden scaling down of EMI images? If so can I control this?  \n\n\nInputStream inp = new FileInputStream(xlsxFilename);\nWorkbook wb = WorkbookFactory.create(inp);\nXSSFSheet sheet = (XSSFSheet) wb.getSheetAt(0);\n\nfor (XSSFShape shape : sheet.getDrawingPatriarch().getShapes()) {\n       XSSFPicture picture = (XSSFPicture) shape;\n       byte[] imageBytes = picture.getPictureData().getData();\n.....\n       }", "id": 190076, "time": "2016-04-08T18:55:36Z", "creator": "jbjhschiff@msn.com", "creation_time": "2016-04-08T18:55:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 59290, "attachment_id": null, "id": 190081, "time": "2016-04-08T21:16:42Z", "creator": "jbjhschiff@msn.com", "creation_time": "2016-04-08T21:16:42Z", "is_private": false, "text": "By the way it was using Office 2016"}, {"count": 2, "attachment_id": 33745, "bug_id": 59290, "is_private": false, "id": 190118, "time": "2016-04-10T21:33:47Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-04-10T21:33:47Z", "tags": [], "text": "Created attachment 33745\nexample file with emf picture"}, {"count": 3, "tags": [], "text": "It's always a pity when a bug entry is not accompanied by an example file.\n\nSo I've made up one myself (via Office 20169 ... and it works ... with the following code\n\n\n@Test\npublic void emftest() throws IOException {\n    InputStream inp = new FileInputStream(\"emftest.xlsx\");\n    XSSFWorkbook wb = new XSSFWorkbook(inp);\n    XSSFSheet sheet = wb.getSheetAt(0);\n    for (XSSFShape shape : sheet.getDrawingPatriarch().getShapes()) {\n        XSSFPicture picture = (XSSFPicture) shape;\n        byte[] imageBytes = picture.getPictureData().getData();\n        FileOutputStream fos = new FileOutputStream(\"bla.emf\");\n        fos.write(imageBytes);\n        fos.close();\n    }\n    wb.close();\n    inp.close();\n}", "attachment_id": null, "id": 190119, "creator": "kiwiwings@apache.org", "time": "2016-04-10T21:36:49Z", "bug_id": 59290, "creation_time": "2016-04-10T21:36:49Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 59290, "attachment_id": null, "text": "I did not say it did not work. i said the returned file is not the full size/resolution as the original and the quality is often un-usable. Are you saying the this does not happen with you>", "id": 190120, "time": "2016-04-10T23:23:11Z", "creator": "jbjhschiff@msn.com", "creation_time": "2016-04-10T23:23:11Z", "is_private": false}, {"count": 5, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "id": 190121, "time": "2016-04-10T23:36:21Z", "bug_id": 59290, "creation_time": "2016-04-10T23:36:21Z", "is_private": false, "text": "yes ... the files extracted by POI vs. opening the .xlsx as .zip have the same size. If unsure, add another example .xlsx!"}]
[{"count": 0, "tags": [], "bug_id": 16449, "text": "There is a race condition when compiling jsp pages, the cause of this race \ncondition is the use of the Double-Checked idiom.\n\nFor more information on why the Double-Checked idiom does NOT work\nplease read the following\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\nThanks,\n\nJohn Trollinger", "id": 30095, "time": "2003-01-27T12:07:25Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-27T12:07:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 16449, "text": "Created attachment 4561\npatch for o.a.j.servlet.JspServletWrapper.java", "id": 30096, "time": "2003-01-27T12:09:09Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-27T12:09:09Z", "is_private": false, "attachment_id": 4561}, {"count": 2, "tags": [], "text": "The idea is that you do not care about those issues. I knew when I wrote the\ncode that it was not perfectly thread safe (it would if the check was on a\nboolean, but unfortunately the boolean belongs to another object). I doubt you\ncan reproduce this bug in the real world, and if you can, it has very little\nconsequences, so it is not worth the performance impact.\n\nI'm -1 for this patch.", "attachment_id": null, "id": 30124, "creator": "remm@apache.org", "time": "2003-01-27T18:08:01Z", "bug_id": 16449, "creation_time": "2003-01-27T18:08:01Z", "is_private": false}, {"count": 3, "tags": [], "text": "\nThe sad thing is, I can reproduce this in the real world (well atleast in our \nweb app) and considering the that that sync is only called when a jsp page is \nbeing recompiled I don't see how it is a performance consern (although I could \nbe wrong about when it is called)\n\nSo if I am write about the only on a compile / recompile thing I think it \nshould be fixed as it will fix 2 bugs with my web app (1. being some weird fast \nclick / javascript combo thing, the other the same jsp page being included on \nthe same page more than once)\n\nplease think about it.\n\nthanks,\n\njohn", "attachment_id": null, "bug_id": 16449, "id": 30127, "time": "2003-01-27T18:36:20Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-27T18:36:20Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 30133, "time": "2003-01-27T19:43:41Z", "creator": "dball@rhoworld.com", "creation_time": "2003-01-27T19:43:41Z", "is_private": false, "text": "Please apply the patch. I, for one, favor correctness over speed."}, {"count": 5, "tags": [], "bug_id": 16449, "text": "\nBecause other people seem to want this patch as well as me, I would like to \nreopen the bug, or atleast get a vote from some of the other commiters.\n\nRemy -- if you want to close it again that is fine, I will not reopen it, I \njust want more people to take a look at it and see if the preformance decrease \nis realy there and weight that with a code base that works %100 of the time vs. \none that works in \"most\" cases.", "id": 30175, "time": "2003-01-28T15:24:58Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-01-28T15:24:58Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 30913, "time": "2003-02-07T19:39:20Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-07T19:39:20Z", "is_private": false, "text": "\nI noticed this bug had a few votes now and was wondering if there was any \nchance that the patch would be applied.  If not, please close the bug so I know \nnot to wait for the patch in the next release.\n\nthanks,\n\nJohn"}, {"count": 7, "tags": [], "bug_id": 16449, "text": "The locking mechanism was switched between the JspCompilationContext\nand the servlet/JspServletWrapper so that the JspServletWrapper can\nnow check a boolean.  The JspCompilationContext now calls jsw.setReload()\nto reset the reload flag, but that only happens within synchronized code.\n\nThis should resolve the Double-Checked thread locking idiom without\ncreating a thread synchronization bottleneck.", "id": 31015, "time": "2003-02-10T16:32:59Z", "creator": "glenn@apache.org", "creation_time": "2003-02-10T16:32:59Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 31035, "time": "2003-02-10T19:54:34Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-10T19:54:34Z", "is_private": false, "text": "\nGlenn,\n\nThe race condition still exists.  It still seams that on thread can be waiting \nat the snyc block a second request can get in before the reload is set to \nfalse.  Applying my patch still fixes this problem.\n\nJohn"}, {"count": 9, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 31040, "time": "2003-02-10T21:21:39Z", "creator": "glenn@apache.org", "creation_time": "2003-02-10T21:21:39Z", "is_private": false, "text": "Can your reproduce this bug with the latest code?  Or are you\nbasing your comments on reviewing the changes I made?\n\nAccording to the reference you gave for double checked locking, \ndouble checked locking does work if you use a primitive such as a boolean.\n\nI agree with Remy that your patch is not acceptable from a\nperformance standpoint.\n\nI have closed the bug, please do no reopen the bug unless you can provide \nan example web application and test conditions which reproduce it.\n\n"}, {"count": 10, "tags": [], "bug_id": 16449, "text": "\nGlen, \n\nHere is the problem I have, and why I think it is a race condition still.  (I \nam sorry but I can not create this in an application simple enough to send you)\n\nWhen navigation quickly on the site I get a JasperException.  I added a new \ncatch to JspServletWrapper.java at line 254 (before the catch (Exception ex)) \ncatch(NullPointerException e) and added a System.out.println(servlet); at line \n210 right before the theServlet.service() call.  The system.out print \"null\" \nand a null pointer exception is thrown.  \n\nIf you have any ideas on what else could cause this behavior please let me know \nand I will look into it, but so far the only solution I can come up with is \nremove the double check.  I will continue to try and find a way to reproduce \nthis for you.\n\nthanks for your help,\n\nJohn", "id": 31066, "time": "2003-02-11T13:19:04Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-11T13:19:04Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 31067, "time": "2003-02-11T13:23:58Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-11T13:23:58Z", "is_private": false, "text": "\nforgot to mention, this is on your latest code changes from cvs.\n\nand here is the stacktrace I get\n\n2003-02-11 08:11:28 ApplicationDispatcher[] Servlet.service() for servlet jsp \nthrew exception\norg.apache.jasper.JasperException: The \nservlet /_common/lvl5/schedules/schedule_results.jsp is null\n\tat org.apache.jasper.servlet.JspServletWrapper.service\n(JspServletWrapper.java:255)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile\n(JspServlet.java:295)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke\n(ApplicationDispatcher.java:684)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward\n(ApplicationDispatcher.java:432)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward\n(ApplicationDispatcher.java:356)\n\tat com.controlj.green.web.servlets.NavigationMapperServlet.doGet\n(NavigationMapperServlet.java:225)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:260)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:191)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2415)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:172)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1040)\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1151)\n\tat java.lang.Thread.run(Thread.java:536)\n----- Root Cause -----\njava.lang.NullPointerException\n\tat org.apache.jasper.servlet.JspServletWrapper.service\n(JspServletWrapper.java:211)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile\n(JspServlet.java:295)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationDispatcher.invoke\n(ApplicationDispatcher.java:684)\n\tat org.apache.catalina.core.ApplicationDispatcher.doForward\n(ApplicationDispatcher.java:432)\n\tat org.apache.catalina.core.ApplicationDispatcher.forward\n(ApplicationDispatcher.java:356)\n\tat com.controlj.green.web.servlets.NavigationMapperServlet.doGet\n(NavigationMapperServlet.java:225)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:260)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:191)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2415)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:172)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:641)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n\tat \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.java:643)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1040)\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1151)\n\tat java.lang.Thread.run(Thread.java:536)"}, {"count": 12, "tags": [], "bug_id": 16449, "attachment_id": null, "text": "And of course, there's no line 211 in the latest version of the class.\nNo amount of \"navigating fast\" got me that error *ever* with Jasper. If you\nreally have that kind of problems, you should:\n- precompile your webapp\n- use webapp reloading\nThat's for a *delpoyment* server.\nI do not understand how you could possibly get into a situation where you could\nget this problem with a development server.", "id": 31069, "time": "2003-02-11T13:33:18Z", "creator": "remm@apache.org", "creation_time": "2003-02-11T13:33:18Z", "is_private": false}, {"count": 13, "tags": [], "creator": "jakarta@trollingers.com", "text": "\nRemy,\n\nIf I need to attach the code I will.. I am using Revision: 1.6.2.3, sorry it \nwas line 210 because of the System.out I put in.. \n\ntheServlet.service(request, response);\n\nthat is the line.. if you read my whole message instead of just discounting \nwhat I said automaticly you would have seen that call mentioned.  \n\nAs for precompiling everything, that is not posible in the nature of our \napplication because we generate jsp pages on the fly and can not force our \ncustomers to allways precompile.  I am happy to hear you never get the problem, \nbut I am sure there are many other bugs YOU never get, non the less they still \nexist.\n\nalso if you cant be respectfull towards me, please just filter things I send to \nthe group and ingore me rather than being rude.", "id": 31072, "time": "2003-02-11T13:58:55Z", "bug_id": 16449, "creation_time": "2003-02-11T13:58:55Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 16449, "text": "John,\n\nAs Remy mentioned the stack trace you posted does not match the code\nwhich is currently in CVS.  To convince me that there is still a bug\nyou will need to use the exact same code which is in CVS and provide\nas simple an example as possible which reproduces it.  The example\nshould include information about your Tomcat/Jasper configuration, an\nexample web application, and perhaps even a JMeter jmx config file that\nwill reproduce it.\n\nI will not apply your patch (or some other better patch) without being\nable to reproduce the problem and identify the exact cause.\nYour patch fixes the symptom at a cost which is not acceptable.\n\nGlenn", "id": 31074, "time": "2003-02-11T14:26:36Z", "creator": "glenn@apache.org", "creation_time": "2003-02-11T14:26:36Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 16449, "text": "\nWould it be acceptable if I could get you a test case that could reproduce it \nif you added a Thread.sleep() in the getServlet() method to help give time for \nthe race condition to occur.  I would save me a lot of time in building a test \ncase and this is common practice in finding race conditions.\n\nJohn", "id": 31079, "time": "2003-02-11T17:02:57Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-11T17:02:57Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 16449, "attachment_id": null, "text": "\nHere you go, very easy way to reproduce the bug.\n\nhere is a patch for JspWrapperServlet.java, all it does is a Thread.sleep() to \nmake the condition easy to reproduce.\n\n--- /old/JspServletWrapper.java\t2003-02-10 11:29:52.000000000 -0500\n+++ /new/JspServletWrapper.java\t2003-02-12 08:02:39.000000000 -0500\n@@ -148,11 +148,14 @@\n                     \n                     try {\n                         servletClass = ctxt.load();\n+                        Thread.sleep(5000);\n                         theServlet = (Servlet) servletClass.newInstance();\n                     } catch( IllegalAccessException ex1 ) {\n                         throw new JasperException( ex1 );\n                     } catch( InstantiationException ex ) {\n                         throw new JasperException( ex );\n+                    } catch ( InterruptedException e ) {\n+                       e.printStackTrace();\n                     }\n                     \n                     theServlet.init(config);\n\n\nnow if you run the admin webapp without the jsp pages being precompiled and \nrapidly click between two or three items in the tree as the pages are compiling \nyou will see the stacktrace for the null pointer exception.\n\nThe cause of this is still the sam, there is NO way around the flaws of the \ndouble check in java, let me repeat there is NO way around it.  Any place you \nuse the double check in java you will have a race condition.\n\nIf you don't care to fix the bug that is your choice, but I feel the bug should \nbe in a open or wontfix state, not a fixed state as the bug still does exist.\n\nthanks,\n\njohn", "id": 31113, "time": "2003-02-12T13:09:15Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-12T13:09:15Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 31148, "time": "2003-02-12T16:14:30Z", "creator": "glenn@apache.org", "creation_time": "2003-02-12T16:14:30Z", "is_private": false, "text": "What is your configuration for jasper, the default?"}, {"count": 18, "tags": [], "bug_id": 16449, "text": "<servlet>\n        <servlet-name>jsp</servlet-name>\n        <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>\n        <init-param>\n            <param-name>logVerbosityLevel</param-name>\n            <param-value>WARNING</param-value>\n        </init-param>\n        <init-param>\n            <param-name>keepgenerated</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <load-on-startup>3</load-on-startup>\n    </servlet>", "id": 31149, "time": "2003-02-12T16:18:05Z", "creator": "jakarta@trollingers.com", "creation_time": "2003-02-12T16:18:05Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 16449, "attachment_id": null, "id": 31151, "time": "2003-02-12T16:33:24Z", "creator": "glenn@apache.org", "creation_time": "2003-02-12T16:33:24Z", "is_private": false, "text": "I think I have now found the bug.\n\nThe reload flag was getting set to false by ctxt.load() but\ntheServlet had not yet been instantiated.  Deferring the \nsetting of the reload flag to false until after theServlet\nhas been instantiated should fix the bug.  Without your\npatch which forces a synchronize for every request. :-)\n\nI will be making the commits shortly."}, {"count": 20, "tags": [], "text": "The logic in Jasper is just too complex :-(", "attachment_id": null, "id": 31153, "creator": "remm@apache.org", "time": "2003-02-12T16:38:43Z", "bug_id": 16449, "creation_time": "2003-02-12T16:38:43Z", "is_private": false}, {"count": 21, "attachment_id": null, "creator": "jakarta@trollingers.com", "text": "\nYeah, I noticed that right before lunch, but was waiting untill I got back..\n\nI tested changing the reload = false after the newInstance() and all apeared to \nwork ok, but I thought that the newInstance() happened in a seperate thread so \nthe the instance might not be finished initializing at the time it was \nreturned, which could still cause a race condition.\n\nnot sure about this though..", "id": 31158, "time": "2003-02-12T17:33:26Z", "bug_id": 16449, "creation_time": "2003-02-12T17:33:26Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 16449, "text": "*** Bug 13606 has been marked as a duplicate of this bug. ***", "id": 71804, "time": "2005-03-03T23:47:21Z", "creator": "markt@apache.org", "creation_time": "2005-03-03T23:47:21Z", "is_private": false, "attachment_id": null}]
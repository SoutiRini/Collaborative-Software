[{"count": 0, "tags": [], "bug_id": 57929, "attachment_id": null, "text": "Hi:\n    I have a question, Why HSSFWorkbook.removePrintArea(index) invalid?  I use poi version 3.12.\n\nCode:\n\n public static void main( String[] args )\n    {\n\n        try {\n            String targetFile = \"C:\\\\Users\\\\syf\\\\Desktop\\\\test_1_oo.xls\";\n            Workbook wb = null;\n            FileInputStream fis = new FileInputStream(targetFile);\n            wb = new HSSFWorkbook(fis);\n            System.out.println(wb.getPrintArea(0));\n            System.out.println(wb.getPrintArea(1));\n\n            wb.removePrintArea(0);\n            wb.setPrintArea(1, 0, 0, 0, 0);\n\n            System.out.println(\"-------------------\");\n            System.out.println(wb.getPrintArea(0));\n            System.out.println(wb.getPrintArea(1));\n            fis.close();\n            FileOutputStream fileOut = new FileOutputStream(targetFile);\n            wb.write(fileOut);\n            fileOut.flush();\n            fileOut.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\nFirst Run Result:\n    Sheet1!$A$1:$C$6  // this value is my setting\n    Sheet2!$B$1:$C$5  // this value is my setting\n    -------------------\n    null                           // after remove print area , the value is this\n    Sheet2!$A$1:$A$1  // after remove print area , the value is this\n\nSecond Run Result:\n    Sheet1!$A$1:$C$6  // this value should 'null' but ...\n    Sheet2!$A$1:$A$1  \n    -------------------\n    null\n    Sheet2!$A$1:$A$1\n\n                                                                                                                       Thanks a lot !", "id": 182990, "time": "2015-05-15T04:45:31Z", "creator": "nova.woo@icloud.com", "creation_time": "2015-05-15T04:45:31Z", "is_private": false}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191821, "time": "2016-06-20T08:06:01Z", "bug_id": 57929, "creation_time": "2016-06-20T08:06:01Z", "is_private": false, "text": "Thanks for the simple test case. I added this to our test suite in r\n\nI have verified the behavior your observed using an HSSFWorkbook. This problem does not occur on XSSFWorkbooks or SXSSFWorkbooks.\n\nIf this bug is still relevant to you, you could try to dive through the code in HSSFWorkbook/InternalWorkbook to figure out what's going on. It is possible that the Excel 97-2003 format doesn't allow null print areas, instead using some default print area.\n\nHere's what I tried:\n\nHSSFWorkbook:\n>  public void removePrintArea(int sheetIndex) {\n>+     // Clear out the formula tokens (equivalent to making this reference null)\n>+     NameRecord name = workbook.getSpecificBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);\n>+     name.setNameDefinition(new Ptg[] {});\n>+     \n>      getWorkbook().removeBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);\n>  }\ngot:\n> ptgs must not be null\n> java.lang.IllegalArgumentException: ptgs must not be null\n> \tat org.apache.poi.ss.formula.FormulaRenderer.toFormulaString(FormulaRenderer.java:48)\n> \tat org.apache.poi.hssf.model.HSSFFormulaParser.toFormulaString(HSSFFormulaParser.java:81)\n> \tat org.apache.poi.hssf.usermodel.HSSFWorkbook.getPrintArea(HSSFWorkbook.java:1547)\n> \tat org.apache.poi.ss.usermodel.BaseTestBugzillaIssues.test57929(BaseTestBugzillaIssues.java:1605)\n\nHSSFWorkbook:\n> ...\n>+     name.setNameDefinition(HSSFFormulaParser.parse(\"\", this, FormulaType.NAMEDRANGE, sheetIndex));\n> ...\ngot:\n> Parse error near char 0 '' in specified formula ''. Expected cell ref or constant literal\n> org.apache.poi.ss.formula.FormulaParseException: Parse error near char 0 '' in specified formula ''. Expected cell ref or constant literal\n\nHSSFWorkbook:\n> ...\n>+     name.setNameDefinition(HSSFFormulaParser.parse(\"'\"+getSheetName(0)+\"'!$A$1:$A$1\", this, FormulaType.NAMEDRANGE, sheetIndex));\n> ...\ngot:\n> Sheet0 after write expected null, but was:<Sheet0!$A$1:$A$1>\n> junit.framework.AssertionFailedError: Sheet0 after write expected null, but was:<Sheet0!$A$1:$A$1>\n> \tat org.apache.poi.ss.usermodel.BaseTestBugzillaIssues.test57929(BaseTestBugzillaIssues.java:1605\n\nHSSFWorkbook\n> ...\n>+     name.setNameDefinition(new Ptg[] { new Area3DPtg(-1, -1, -1, -1, false, false, false, false, sheetIndex) });\n> ...\ngot:\n> Sheet0 after write expected null, but was:<Sheet0!$XFD$65536:$XFD$65536>\n> junit.framework.AssertionFailedError: Sheet0 after write expected null, but was:<Sheet0!$XFD$65536:$XFD$65536>\n\nTo fix this, someone needs to figure out how Excel stores records in the binary format to indicate no print area has been set, if it falls back to something like A1:lastCol/lastRow), or picks a print area based on the current page size and the width of the columns/height of the rows."}]
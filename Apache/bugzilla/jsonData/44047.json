[{"count": 0, "tags": [], "bug_id": 44047, "attachment_id": null, "id": 111607, "time": "2007-12-10T08:09:20Z", "creator": "chris+apache@aptivate.org", "creation_time": "2007-12-10T08:09:20Z", "is_private": false, "text": "We have a site which performs fairly heavy processing in Tomcat\n(http://www.loband.org). In order to avoid overloading the machine, we restrict\nthe number of processing threads to 10 or so.\n\nHowever, when it's busy, Tomcat always waits (apparently forever?) for a new\nprocessor to become free, rather than giving up and returning an error message\nto the client.\n\nI'd like to have:\n\n1. a mechanism to return an error page (e.g. Server Too Busy) after a\nconfigurable timeout waiting for a processor thread to become available.\n\n2. a way to plugin code into Tomcat to decide dynamically whether to create a\nnew processor or not, based on e.g. system load or network load."}, {"count": 1, "tags": [], "bug_id": 44047, "is_private": false, "text": "The simplest way to do this would be too configure a much larger number of processors and then limit the number of concurrent requests using a Filter or a Valve. See the SemaphoreValve for an example.\n\nGiven that the Valve approach provides all the features requested, I do not believe the requested enhancements should be added to Tomcat.", "id": 145734, "time": "2011-04-12T18:07:57Z", "creator": "markt@apache.org", "creation_time": "2011-04-12T18:07:57Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "apernoud@sopragroup.com", "attachment_id": null, "id": 70262, "time": "2005-01-31T10:08:58Z", "bug_id": 33310, "creation_time": "2005-01-31T10:08:58Z", "is_private": false, "text": "I have a batch running ant and zipping large files (dumps from DB).\nWhen dumps exceed 2GBytes (2^31 bytes), the zip task makes this exception in \noriginal ZipEntry class : \"invalid entry size\".\nLooking the source code, it's ZipOutputStream closeEntry() method that passes a \nint to a long required method (ZipEntry.setSize can take long) :\n            entry.setSize(def.getTotalIn());\n\nSo when you just break the 2^31 limit of int, def.getTotalIn() is negative, and \nZipEntry doesn't accept it.\nHere def is the deflater, and only has getter that gives int :(\n\nI have no idea of how to resolve the issue since there do not seem to have a \nlong getter on deflater, but there may be a way to get the real size directly \ninstead of using the deflater ?"}, {"count": 1, "tags": [], "text": "Created attachment 14139\nOverrides ZipEntry.setSize() to check value of input\n\nWhen the value is negative, assumes that the call to deflator has wrapped round\n(32bit precision error) and converts the value into a meaningful long.", "attachment_id": 14139, "bug_id": 33310, "id": 70264, "time": "2005-01-31T11:00:40Z", "creator": "kevin.jackson@it.fts-vn.com", "creation_time": "2005-01-31T11:00:40Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 33310, "attachment_id": null, "is_private": false, "id": 70265, "time": "2005-01-31T11:08:49Z", "creator": "apernoud@sopragroup.com", "creation_time": "2005-01-31T11:08:49Z", "text": "Well i thought of the same patch, but then you'll have the same bug for files \nlarger then 4GB :(\nThe size won't be negative, but won't be the good neither, no ?"}, {"count": 3, "tags": [], "creator": "kevin.jackson@it.fts-vn.com", "is_private": false, "id": 70266, "creation_time": "2005-01-31T11:22:41Z", "time": "2005-01-31T11:22:41Z", "bug_id": 33310, "text": "(In reply to comment #2)\n> Well i thought of the same patch, but then you'll have the same bug for files \n> larger then 4GB :(\n> The size won't be negative, but won't be the good neither, no ?\n\nHmm, I suppose so.\nJust reading the docs...\n\nsetSize\n\npublic void setSize(long size)\n\n    Sets the uncompressed size of the entry data.\n\n    Parameters:\n        size - the uncompressed size in bytes \n    Throws:\n        IllegalArgumentException - if the specified size is less than 0 or\ngreater than 0xFFFFFFFF bytes\n    See Also:\n        getSize()\n\nThe ZipEntry class doesn't support sizes larger than 4Gb (FFFFFFFF -> Dec), so\nthe patch will provide support for files upto this limit imposed by the API, but\nnot larger files.\n\n", "attachment_id": null}, {"count": 4, "tags": [], "text": "\n> The ZipEntry class doesn't support sizes larger than 4Gb (FFFFFFFF -> Dec), so\n> the patch will provide support for files upto this limit imposed by the API, \nbut\n> not larger files.\n\nNice catch, so the patch is ok for current API ! Sorry, didn't go far enough in \nthe docs...\n\n", "is_private": false, "bug_id": 33310, "id": 70267, "time": "2005-01-31T11:29:36Z", "creator": "apernoud@sopragroup.com", "creation_time": "2005-01-31T11:29:36Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 71169, "time": "2005-02-18T13:37:28Z", "bug_id": 33310, "creation_time": "2005-02-18T13:37:28Z", "is_private": false, "text": "The field inside of a ZIP local or central file header is four bytes long, so the\nZIP format can't store files larger than 4GB itself.\n"}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 71175, "time": "2005-02-18T14:16:49Z", "bug_id": 33310, "creation_time": "2005-02-18T14:16:49Z", "is_private": false, "text": "Should be fixed now, please verify with a nightly build of 2005-02-19 or later.\n\nKev, your patch would miss files with a compressed size > 2GB.\n\n"}]
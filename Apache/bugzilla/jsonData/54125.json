[{"count": 0, "tags": [], "bug_id": 54125, "attachment_id": null, "text": "I'm building an excel workbook that contains some formulas provided by Bloomberg Excel Add-in. Specifically =BDP(security, field)\nIn order to set the cell formula I have to define a Name:\n\nworkbook = new XSSFWorkbook();\nName name = workbook.createName();\nname.setNameName(\"BDP\");\nname.setFunction(true);\n\nFurther in the code some cell values are set as follows:\n\nexcelCell.setCellFormula(cellValue); // here cellValue is a formula string built elsewhere in the code, e.g. =BDP(\"GOOG Equity\",\"CHG_PCT_YTD\")/100\n\nThe problem appears appears when opening the generated Excel file. First a message appears \"Excel found unreadable content in 'filename.xlsx'. Do you want to recover the contents of this workbook. If you trust the source of this workbook, click Yes\"\nClicking YES opens the excel successfully, and a message is displayed \"Removed Records: Named range from /xl/workbook.xml part (Workbook)\". The cells with bloomberg formulas work OK.\n\nIt seems that the only way to bypass the message during the file opening is to call name.setRefersToFormula(String) - but I cannot do this, since the name is not really a reference, it's simply an external formula.\nNot setting the name on a workbook doesn't work either, since excelCell.setCellFormula throws an exception \"org.apache.poi.ss.formula.FormulaParseException: Name 'BDP' is completely unknown in the current workbook\"\n\nI think Cell.setCellFormula should contain some parameter that would allow setting an external formula in it without throwing an exception.", "id": 163314, "time": "2012-11-09T14:37:44Z", "creator": "aurimas.sabalys@outlook.com", "creation_time": "2012-11-09T14:37:44Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54125, "attachment_id": null, "text": "You are doing it wrong, you need to register external functions in a toolpack instead of using a named range:\n\n\n        Workbook wb = new XSSFWorkbook();\n\n        String[] functionNames = {\"BDP\"};\n        FreeRefFunction[] functionImpls = {new FreeRefFunction() {\n            public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\n              // don't care about the returned result. we are not going to evaluate BDP  \n              return ErrorEval.NA;\n            }\n        }};\n\n        UDFFinder udfToolpack = new DefaultUDFFinder(functionNames, functionImpls);\n\n        // register the user-defined function in the workbook\n        wb.addToolPack(udfToolpack);\n\n        Sheet sheet = wb.createSheet();\n        Cell cell = sheet.createRow(0).createCell(0);\n        cell.setCellFormula(\"BDP(\\\"GOOG Equity\\\",\\\"CHG_PCT_YTD\\\")/100\");\n\nthis way it should work.\n\nYegor", "id": 163318, "time": "2012-11-09T17:06:01Z", "creator": "yegor@dinom.ru", "creation_time": "2012-11-09T17:06:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 54125, "attachment_id": null, "text": "Thanks a lot! It worked as you said\n\n(In reply to comment #1)\n> You are doing it wrong, you need to register external functions in a\n> toolpack instead of using a named range:\n> \n> \n>         Workbook wb = new XSSFWorkbook();\n> \n>         String[] functionNames = {\"BDP\"};\n>         FreeRefFunction[] functionImpls = {new FreeRefFunction() {\n>             public ValueEval evaluate(ValueEval[] args,\n> OperationEvaluationContext ec) {\n>               // don't care about the returned result. we are not going to\n> evaluate BDP  \n>               return ErrorEval.NA;\n>             }\n>         }};\n> \n>         UDFFinder udfToolpack = new DefaultUDFFinder(functionNames,\n> functionImpls);\n> \n>         // register the user-defined function in the workbook\n>         wb.addToolPack(udfToolpack);\n> \n>         Sheet sheet = wb.createSheet();\n>         Cell cell = sheet.createRow(0).createCell(0);\n>         cell.setCellFormula(\"BDP(\\\"GOOG Equity\\\",\\\"CHG_PCT_YTD\\\")/100\");\n> \n> this way it should work.\n> \n> Yegor", "id": 163370, "time": "2012-11-12T08:08:20Z", "creator": "aurimas.sabalys@outlook.com", "creation_time": "2012-11-12T08:08:20Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 54125, "attachment_id": null, "text": "I added an example in svn:\n\nhttps://svn.apache.org/repos/asf/poi/trunk/src/examples/src/org/apache/poi/ss/examples/formula/SettingExternalFunction.java\n\n\n(In reply to comment #2)\n> Thanks a lot! It worked as you said\n> \n> (In reply to comment #1)\n> > You are doing it wrong, you need to register external functions in a\n> > toolpack instead of using a named range:\n> > \n> > \n> >         Workbook wb = new XSSFWorkbook();\n> > \n> >         String[] functionNames = {\"BDP\"};\n> >         FreeRefFunction[] functionImpls = {new FreeRefFunction() {\n> >             public ValueEval evaluate(ValueEval[] args,\n> > OperationEvaluationContext ec) {\n> >               // don't care about the returned result. we are not going to\n> > evaluate BDP  \n> >               return ErrorEval.NA;\n> >             }\n> >         }};\n> > \n> >         UDFFinder udfToolpack = new DefaultUDFFinder(functionNames,\n> > functionImpls);\n> > \n> >         // register the user-defined function in the workbook\n> >         wb.addToolPack(udfToolpack);\n> > \n> >         Sheet sheet = wb.createSheet();\n> >         Cell cell = sheet.createRow(0).createCell(0);\n> >         cell.setCellFormula(\"BDP(\\\"GOOG Equity\\\",\\\"CHG_PCT_YTD\\\")/100\");\n> > \n> > this way it should work.\n> > \n> > Yegor", "id": 163373, "time": "2012-11-12T09:21:27Z", "creator": "yegor@dinom.ru", "creation_time": "2012-11-12T09:21:27Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54125, "attachment_id": null, "text": "The workaround is handy however I don't think the issue was invalid. In Excel it is possible to set an invalid function name to a cell so why it should not be possible in POI? For example if one wants to make an exact copy of a cell which contained an invalid function token. Is there another function to do that or an attribute to suppress this validation at the time of setting the formula value?", "id": 177427, "time": "2014-08-28T14:04:57Z", "creator": "jakub.vojtisek@gmail.com", "creation_time": "2014-08-28T14:04:57Z", "is_private": false}]
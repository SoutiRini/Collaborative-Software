[{"count": 0, "tags": [], "text": "To reproduce bug please do the following:\nUse:\n<fo:region-body region-name=\"PageBody\" column-count=\"2\" />\n\nFill the region-body with content like :\n<fo:block span=\"none\" > ...(content is table with header) ..\n<fo:block span=\"all\"> ... (one line (summary)) ..\n\nIf the content is made of normal blocks the columns are balanced before the span=\"all\" summary line.\nlike:\n123456    456789\n234567    567890\n345678    678901\nSummary: 1234567890\n\nIf the content is a table without headers the columns are balanced correct. \nlike:\n123456    456789\n234567    567890\n345678    678901\nSummary: 1234567890\n\nIf the content is a table with header the columns are not balanced correct. (the right one is shorter.)\nHeader    Header\n123456    567890\n234567    678901\n345678    \n456789\nSummary: 1234567890\n\nThe \"computeDemerits()\" algorithm is wrong in class \"BalancingColumnBreakingAlgorithm\".\nThe \"fullLen\" value is to short. Exactly the replicated header width is missing. In the \"par\" list the header is contained only once although the header is displayed in every column. (in the example twice)\n\nSolution could be to place the header as many times in the \"par\" list as many columns exist, or to count the existing one header as many times as needed.", "attachment_id": null, "bug_id": 49801, "id": 139358, "time": "2010-08-23T05:56:02Z", "creator": "a.kovacs@i-docs.com", "creation_time": "2010-08-23T05:56:02Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 25928\ntest file", "attachment_id": 25928, "bug_id": 49801, "id": 139360, "time": "2010-08-23T06:05:19Z", "creator": "a.kovacs@i-docs.com", "creation_time": "2010-08-23T06:05:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 49801, "attachment_id": null, "id": 139561, "time": "2010-08-30T09:52:53Z", "creator": "jeremias@apache.org", "creation_time": "2010-08-30T09:52:53Z", "is_private": false, "text": "The algorithm does indeed not take the penalty width at the break point into account. I've experimented for about an hour but still haven't found a solution. That class is a hack by itself right now. I have never found a really good algorithm for calculating the demerits for column balancing. I guess this needs another serious review."}, {"count": 3, "tags": [], "text": "I've been asked to look closer into this, and after about 10 hours spent brooding over it and consulting the \"Digital Typography\" book I'm no closer to solving it. I've been able to calculate the demerits which I expected to result in the right break decision (for one case), but the algorithm still chose another breaking point for reasons I just don't understand. The BalancingColumnBreakingAlgorithm class was some kind of hack to begin with which I knew had some short-comings. That is now pretty obvious, and I don't know how to proceed. I have to give up for now since this is simply a bit too high for me. I'll copy my local changes away so if anyone wants to give it a shot, I can provide them. But I'm not sure if they would really help.\n\nIf anyone can help Adam, please get in touch with him.", "is_private": false, "id": 139718, "creator": "jeremias@apache.org", "time": "2010-09-06T09:46:13Z", "bug_id": 49801, "creation_time": "2010-09-06T09:46:13Z", "attachment_id": null}, {"count": 4, "attachment_id": 26606, "bug_id": 49801, "is_private": false, "id": 143990, "time": "2011-02-04T13:18:28Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-04T13:18:28Z", "tags": [], "text": "Created attachment 26606\naltered test case\n\nThe fullLen in computeDemerits() is indeed off, because ElementListUtils.calcContentLength() naively sums box and glue lengths. It just counts the header box once, and does not contain any logic to take into account possible special behavior of the penalties. Adding the header box multiple times to the list will not immediately solve the issue.\nQuestion that needs to be answered in order to do that: how many times would it need to be duplicated? Answer: the number of times the table is broken plus 1. But we don't know that number, at that point... That is precisely the reason the table-layout code only adds the box once.\n\nSee also the attached altered test case for a slightly more complicated example. The first and last table's headers only need to be counted once, while the header and footer of the second table need to be counted --how many times? The algorithm currently only breaks once.\n\nSeems like the chicken and the egg... :-/"}, {"count": 5, "tags": [], "text": "\nAdditionally, it's not only fullLen which is off, but obviously also partLen and restLen, for the same reason (calcContentLength()). There will be cases where the header will have to be taken into account for partLen, but not for restLen or vice versa, and cases where it will need to be counted for both.\n\nCurrently, the algorithm operates as if the header and footer only count for the part where the table happens to end.", "attachment_id": null, "bug_id": 49801, "id": 143991, "time": "2011-02-04T13:27:07Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-04T13:27:07Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 49801, "attachment_id": null, "id": 144060, "time": "2011-02-08T15:19:45Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-08T15:19:45Z", "is_private": false, "text": "\nJust thought of similar potential issues, due to the limitations of ElementListUtils.calcContentLength(), but unrelated to column-balancing per se, that are to be expected in list-items and table-cells.\nMore precisely those that have a table with header and/or footer as a descendant, and are divided over more than one column/page.\nFor lists, problems may arise in ListItemLayoutManager.getCombinedKnuthElementsForListItem(), I think, where the calculated lengths could prove to be wrong (due to the content eventually being broken at least once).\nFor table-cells, similarly, the totalLength in the ActiveCell constructor might be too low if the cell contains a long nested table that causes multiple breaks..."}, {"count": 7, "tags": [], "bug_id": 49801, "attachment_id": null, "is_private": false, "id": 145179, "time": "2011-03-21T15:27:29Z", "creator": "adelmelle@apache.org", "creation_time": "2011-03-21T15:27:29Z", "text": "\nThinking more about a possible fix, I am suddenly asking myself why we would even fiddle with the demerits at all to balance columns. Playing with the demerits alone is not enough to make a break more/less favorable. Ultimately, the adjustment ratio is a deciding factor too, and that is based on the difference between available width and the width of the line.\n\nSince the algorithm works with the full bpd of the page as line-width, this is bound to cause the algorithm to 'ignore' the better demerits at some points.\n\nIn a way, that feels like we could handle column-balancing better by (also) forcing the available line-width down to the minimal width needed by the content (i.e. taking into account pieces that must be kept together within the same column)."}, {"count": 8, "tags": [], "bug_id": 49801, "attachment_id": null, "id": 157287, "time": "2012-04-07T01:37:32Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:37:32Z", "is_private": false, "text": "resetting severity from major to normal pending further review"}, {"count": 9, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "is_private": false, "id": 157387, "creator": "gadams@apache.org", "time": "2012-04-07T01:42:15Z", "bug_id": 49801, "creation_time": "2012-04-07T01:42:15Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "lowering priority and changing to enhancement since (1) a fix is likely to require a fairly significant design change and (2) column balancing is a (potential) XSL-FO 2.0 feature [1], not an XSL-FO 1.X feature;\n\n[1] http://www.w3.org/TR/xslfo20-req/#N66487", "is_private": false, "id": 158247, "creator": "gadams@apache.org", "time": "2012-04-21T05:33:07Z", "bug_id": 49801, "creation_time": "2012-04-21T05:33:07Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "Even though this is not explicitly specified in XSL-FO 1.X, columns are expected to be balanced. For our documents, unbalanced columns, are not an acceptable output. Unfortunately, we were not able to find a solution. I can only attach a small patch of a dirty hack that gives the desired result for the initially attached test file, has been working well for us for the last 2 years and (of course) passes all the unit tests.", "is_private": false, "id": 158322, "creator": "alex.giotis@gmail.com", "time": "2012-04-23T22:49:00Z", "bug_id": 49801, "creation_time": "2012-04-23T22:49:00Z", "attachment_id": null}, {"count": 12, "tags": [], "text": "Created attachment 28662\nDirty hack", "attachment_id": 28662, "bug_id": 49801, "id": 158323, "time": "2012-04-23T22:51:58Z", "creator": "alex.giotis@gmail.com", "creation_time": "2012-04-23T22:51:58Z", "is_private": false}, {"count": 13, "tags": [], "creator": "alex.giotis@gmail.com", "attachment_id": 28663, "text": "Created attachment 28663\nCurrent output PDF", "id": 158324, "time": "2012-04-23T22:53:48Z", "bug_id": 49801, "creation_time": "2012-04-23T22:53:48Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 49801, "attachment_id": 28664, "text": "Created attachment 28664\nExpected output PDF (after patch)", "id": 158325, "time": "2012-04-23T22:54:46Z", "creator": "alex.giotis@gmail.com", "creation_time": "2012-04-23T22:54:46Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 49801, "attachment_id": null, "id": 158326, "time": "2012-04-23T23:00:30Z", "creator": "alex.giotis@gmail.com", "creation_time": "2012-04-23T23:00:30Z", "is_private": false, "text": "The patch is against revision 1329104 of trunk."}, {"count": 16, "tags": [], "creator": "rmeyer@hotmail.co.uk", "attachment_id": 29653, "text": "Created attachment 29653\nNew column balancing algorithm implementation\n\nThis patch is a re-write of the coloumn balancing algorithm to fix the issues that existed within the old code. We have been working on this for the last couple of weeks and has been a team effort by me, Luis Bernado and Vincent Hennebert.\n\nIt passes all unit tests and renders not only the tests above correctly but also many others we have thrown at it. I will post another zip attachment containing sample balancing fo's for you to try should you wish.", "id": 163725, "time": "2012-11-29T10:02:39Z", "bug_id": 49801, "creation_time": "2012-11-29T10:02:39Z", "is_private": false}, {"count": 17, "tags": [], "creator": "rmeyer@hotmail.co.uk", "attachment_id": 29655, "text": "Created attachment 29655\nSample list of test column balancing fo files\n\nA zip containing a list of sample column balancing FO files", "id": 163727, "time": "2012-11-29T10:05:55Z", "bug_id": 49801, "creation_time": "2012-11-29T10:05:55Z", "is_private": false}, {"count": 18, "tags": [], "creator": "alex.giotis@gmail.com", "attachment_id": null, "text": "Great work !!\n\nI tested it with a multi-page complex layout and it is working very well. Luckily for us, I see the same output as with the hack I had attached. Next week, a colleague will execute more tests on other documents with complex layout and will check some corner cases. I will add a comment if something comes up.", "id": 163740, "time": "2012-11-30T11:11:44Z", "bug_id": 49801, "creation_time": "2012-11-30T11:11:44Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 38795, "text": "org.apache.catalina.core.StandardContext.stop() method changes the current\nthead's context classloader but does not always reset it if an exception is thrown.\n\nIt resets the classloader in the finally clause of a try statement, but the try\nstatement begins too late. If an exception is thrown before the try statament is\nreached, the contextClassLoader is not reset to its original value.\n\nHere's the code fragment:\n\n        // Binding thread\n        ClassLoader oldCCL = bindThread();\n\n        // Stop our filters\n        filterStop();\n\n        // Stop our application listeners\n        listenerStop();\n\n        // Stop ContainerBackgroundProcessor thread\n        super.threadStop();\n\n        if ((manager != null) && (manager instanceof Lifecycle)) {\n            ((Lifecycle) manager).stop();\n        }\n\n        // Finalize our character set mapper\n        setCharsetMapper(null);\n\n        // Normal container shutdown processing\n        if (log.isDebugEnabled())\n            log.debug(\"Processing standard container shutdown\");\n        // Notify our interested LifecycleListeners\n        lifecycle.fireLifecycleEvent(STOP_EVENT, null);\n        started = false;\n\n        try {\n...\n\n        } finally {\n\n            // Unbinding thread\n            unbindThread(oldCCL);\n\n        }\n\n\nAn exception is sometimes thrown in this statement (which is before the try\nstatement):\n\n        if ((manager != null) && (manager instanceof Lifecycle)) {\n            ((Lifecycle) manager).stop();\n        }\n\ndue to bug 30489 (java.lang.IllegalStateException: removeAttribute: Session\nalready invalidated)\n\n\nLeaving the substituted classLoader severely disrupts the JBoss deployment\nscanner causing it to throw an exception and fail in each loop. Restarting JBoss\nis required to recover from this problem.", "id": 86257, "time": "2006-02-27T17:52:03Z", "creator": "mihbor@wp.pl", "creation_time": "2006-02-27T17:52:03Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38795, "attachment_id": null, "id": 86336, "time": "2006-03-01T14:23:33Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-03-01T14:23:33Z", "is_private": false, "text": "I read with interest your report and wonder if some other infrequenct problems\nthat I've experienced in the past maybe related to this section of code.\n\n\nWould it make sense to use code like:\n\ntry { filterStop(); } catch(Exception e) { e.printSomething(); }\n\ntry { listenerStop(); } catch(Exception e) { e.printSomething(); }\n\netc... the idea being that each invokation to web-application code (from TC\ninternal code) should not be able to upset TCs shutdown mechanism and should try\na best effort to do everything properly.  Then at the end of it all just cut\naway the web-app and cleanup.\n\nMy suggestion above is making a huge presumption that filterStop() invokes all \nthe active javax.servlet.Filter#destroy() filters under the context to shut them\ndown.  Looking briefly through that particular path I can't see any trapping of\nweb-app exceptions.\n\nStandardContext#filterStop()\n ApplicationFilterConfig#release()\n  javax.servlet.Filter#destroy()\n\nIn the absense of any mandated behaviour (from JSRs) I would think the\nexceptions are best caught in ApplicationFilterConfig#release() so that other\nfilters within the same context get called (call it \"best effort\").  I dont\nunderstand the org.apache.catalina.SecurityUtil stuff in the same place, maybe\nthere is other ways to invoke javax.servlet.Filter#destroy() that need the same\ntreatment.\n\n\nIts very important that TCs internal accounting state can never be disrupted no\nmatter how badly a web-app behaves.  An audit of this code to wrap the whole\nsection with a suitable finally clause to ensure TCs internal state retains its\nintegrity makes perfect sense to me.  The two things together can only increase\nrobustness with minimal cost.\n\n\nPossibily related bug reports discussing web-app generated Exceptions during\ncontext shutdown:\n\nBug #37498\n\nBug #36250 => Comment #14\n(http://issues.apache.org/bugzilla/show_bug.cgi?id=36250#c14)\n"}, {"count": 2, "tags": [], "bug_id": 38795, "attachment_id": 17909, "id": 86890, "time": "2006-03-16T04:38:41Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-03-16T04:38:41Z", "is_private": false, "text": "Created attachment 17909\nDefensive coding patch for all bind/unbind usage NEEDS PEER REVIEW\n\nThis is a patch base on a code walk (rather than a full understanding of the\ncode) and some re-work to eliminate potential problem that seem possible from\nthe perspective of that code walk.\n\nNamely protection from Exception generation at the wrong moment between\nbind/unbind calls.\n\n\nThere are two minor changes in behaviour with this patch, which I think are\nmore correct than the original (but then I didn't take the time the fully\nunderstand the code so please excuse me).\n\n#start() around line 4063 if ok==false we don't call bindThread() now.\tSince\nthe only way we get to call unbind is in the finally block within the if(ok)\ncondition.  The means the code around line 4155 to 4166 may or may not be in\nbound state, depending upon ok==true|false, was this originally intended ?\n\n#start() around line if unbindThread(oldCC) were to throw an exception, before\nwe would call unbindThread(oldCC) again, twice in a row, maybe this is safe\nanyway but now we only call it the once.\n\n#stop() as the bug report suggests wrapping all the calls within the try block\nmake defensive sense to me.\n\n\nOther than that for the normal code path execution should be the same as\nbefore, but nows its very easy to see from the code that flipping between bind\nand unbind is better protected from exceptions."}, {"count": 3, "tags": [], "bug_id": 38795, "text": "(In reply to comment #2)\n> Created an attachment (id=17909) [edit]\n> Defensive coding patch for all bind/unbind usage NEEDS PEER REVIEW\n\nIt doesn't look like a good patch.\n\n> Its very important that TCs internal accounting state can never\n> be disrupted no matter how badly a web-app behaves\n\nIt's very funny. Let's see:\n- ways to guarantee thread release: none\n- ways to guarantee memory release: none\n- ways to guarantee classloading is clean (ex: log4j): none\n\nPlease write a letter to Sun for me :)\n", "id": 86908, "time": "2006-03-16T09:42:51Z", "creator": "remm@apache.org", "creation_time": "2006-03-16T09:42:51Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 38795, "text": "I have improved the try/finally, especially in stop.", "id": 86918, "time": "2006-03-16T14:45:18Z", "creator": "remm@apache.org", "creation_time": "2006-03-16T14:45:18Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 38795, "text": "Thats really great, thanks very much.\n", "id": 86939, "time": "2006-03-16T23:14:53Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-03-16T23:14:53Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 38795, "attachment_id": 17923, "id": 87017, "time": "2006-03-20T09:28:49Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-03-20T09:28:49Z", "is_private": false, "text": "Created attachment 17923\nDefensive coding patch for 5.0.xx\n\nThis is based on Remy's SVN commit, I think it would benifit 5.0.x users."}, {"count": 7, "tags": [], "bug_id": 38795, "text": "Created attachment 17924\nDefensive coding patch for 4.1.xx\n\nI'm sorry there are too many hoops in the BUILDING.txt for me to even test\ncompile   this for 4.1.xx.  Again shoud be based on Remy's SVN commit.", "id": 87018, "time": "2006-03-20T10:34:38Z", "creator": "darryl@darrylmiles.org", "creation_time": "2006-03-20T10:34:38Z", "is_private": false, "attachment_id": 17924}, {"count": 8, "tags": [], "creator": "darryl@darrylmiles.org", "attachment_id": null, "text": "Reopened for additional patch review.", "id": 87019, "time": "2006-03-20T10:40:47Z", "bug_id": 38795, "creation_time": "2006-03-20T10:40:47Z", "is_private": false}, {"count": 9, "attachment_id": null, "creator": "yoavs@computer.org", "is_private": false, "id": 88094, "time": "2006-04-14T19:04:56Z", "bug_id": 38795, "creation_time": "2006-04-14T19:04:56Z", "tags": [], "text": "Changing version to 5.0.30, as this was taken care of by Remy for the 5.5\nbranch, so 5.0.30 is the latest relevant version.  Also downgrading priority\nfrom critical to normal."}, {"count": 10, "tags": [], "bug_id": 38795, "attachment_id": null, "id": 90064, "time": "2006-06-11T17:59:47Z", "creator": "markt@apache.org", "creation_time": "2006-06-11T17:59:47Z", "is_private": false, "text": "Done for 4.1.x"}, {"count": 11, "tags": [], "bug_id": 38795, "attachment_id": null, "id": 109575, "time": "2007-10-22T17:47:31Z", "creator": "markt@apache.org", "creation_time": "2007-10-22T17:47:31Z", "is_private": false, "text": "This will nto be fixed in 5.0.x since that branch is no longer supported."}]
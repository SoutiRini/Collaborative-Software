[{"count": 0, "tags": [], "creator": "literakl@centrum.cz", "attachment_id": null, "text": "I have build.xml with <filter filtersfile=\"conf_deploy.properties\"/>\nThen I have a file proxool.xml with filters: \n<driver-url>jdbc:mysql://localhost/@DB_SCHEMA@?useUnicode=true</driver-url>\n\nI call ant to deploy this configuration file. Later I realize that there was\nsome typo in the filter, so I update the file conf_deploy.properties. Then I\ncall ant again, but nothing happens, no file is copied. The reason is that\nsource file proxool.xml was not changed. But it references filters defined in\nmodified file, so it must be changed. The workaround is to remove the target\nfile and then call ant.\n\nI understand, that it would slow ant a hell, if you would scan all files to\ndetect, if it contains some property defined in modified properties file. But\ncurrent behaviour is not consistent and it is very confusing. So I propose to\nredeploy all files having filtering attribute set on:\n\n<copy todir=\"${DEPLOY_ABCLINUXU}/WEB-INF\" filtering=\"true\">", "id": 85454, "time": "2006-02-06T10:42:33Z", "bug_id": 38527, "creation_time": "2006-02-06T10:42:33Z", "is_private": false}, {"count": 1, "tags": [], "creator": "stevel@apache.org", "text": "I see your point, and it isnt going to be fixed. \n1. backwards compatibility, as always\n2. there are other places where dependency logic fails, even things like <javac>\nSometimes a clean build is the best thing to do.\n\nYou can use <uptodate> or the ant-contrib extensions to declare that a\ntarget/sequence of tasks depends on certain files being up to date, and so write\na target that explicitly depends upon your source files.", "id": 85458, "time": "2006-02-06T12:19:45Z", "bug_id": 38527, "creation_time": "2006-02-06T12:19:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38527, "attachment_id": null, "id": 85514, "time": "2006-02-07T11:25:00Z", "creator": "stevel@apache.org", "creation_time": "2006-02-07T11:25:00Z", "is_private": false, "text": "Leos,\nThere is one other workaround to this problem, one that is easier to code.\n\n1. copy things to an intermediate dir. Do not use the global filter if you can;\nits a lot safer to use a nested filterset.\n\n<copy todir=\"build/intermediate\" overwrite=\"true\">\n <filterset refid=\"myFilterSet\"/>\n <fileset ... />\n</copy>\n\n2. then copy from there to a dest, any files that are different\n <copy todir=\"${DEPLOY_ABCLINUXU}/WEB-INF\" >\n  <fileset dir=\"build/intermediate\">\n   <different targetdir=\"${DEPLOY_ABCLINUXU}/WEB-INF\" />\n  </fileset>\n <copy>\n\nyour copy+filter will run every time, but the second copy will strip out\nanything that hasnt changed.\n  <fileset>\n\n </copy>\n"}]
[{"count": 0, "tags": [], "bug_id": 42845, "attachment_id": null, "text": "When we print pdf files made by fop 0.20.5 we sometimes get it printet wrong.\nAll characters get replaced by the character ascii value +1.\nExample:\n156 is printet as 267\nAFL is printet as BGM", "id": 105239, "time": "2007-07-10T05:05:24Z", "creator": "richardtrans@sol.dk", "creation_time": "2007-07-10T05:05:24Z", "is_private": false}, {"count": 1, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 105246, "time": "2007-07-10T09:34:05Z", "bug_id": 42845, "creation_time": "2007-07-10T09:34:05Z", "is_private": false, "text": "\nApologies, but bugs in FOP 0.20.5 will no longer be fixed. \nPlease try FOP 0.93 or the Trunk, and see if the problem persists there."}, {"count": 2, "tags": [], "bug_id": 42845, "attachment_id": null, "text": "I have clients that are using PDF's I write programmatically in my application. \n\nNow I acknowledge that this could be a problem with the third party API i use, \nbut though I would see if anyone here has had this problem. \n\nbasically they will get PDF's of orders created in a system. \n\nThese orders will arrive one by one as email attachements. \n\nThe administrators, in this case, will print all the orders that come in at a \ntime. \n\nIn each run 25-30% of them will print incorrectly. They appear on the screen \nexactly as they should. \n\nWhen they print the incorrect ones print with a character shift. b for a, c for \nb \n\nso 'Your Order' will print as 'Zpvs%Psefs'. The formatting of the text, and \nlayout on the page is all as it should be. \n\nNow if you printed any of these documents again, they would print as they \nshould. This meaning the same document, from the same email, printed again. \n\n\nNotes : \n- the problem is quite hard to reproduce : if you re-open the same file and \nprint it again, or relaunch the same editing process, \n  there is no problem ! \n\n- the bug occurs when using PCL laser printers (mostly HP printers) \n  and Inkjet printers. \n  When using PostScript driver, it's ok. \n  (but we don't want to use PS drivers, it's slower and increase memory usage \non the printer) \n\n- in the previous version of our application, \n  the silent printing system used AWT instead of Acrobat Reader, \n  at that time, there was no problem. \n\n- our pdf documents do not use embedded fonts.\n\n- the problem is reproducable on old Acrobat RReader versions as well as on the \nlatest.", "id": 112727, "time": "2008-01-10T03:32:22Z", "creator": "ulrich.scheper@basler.co.at", "creation_time": "2008-01-10T03:32:22Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 42845, "text": "Problem still exitsts within current version 0.94.\n\nSee some more hints to the problem...\n\nThis is a mis-feature of (some?) Windows print drivers. They: \n1) send font sub-sets to the printer, but, rather than sending the characters \nwith their proper encoding, use a custom encoding that allocates codes in order \nof appearence - not sending the proper codes is a bug and will break the \ndocument for use on the Palm. \n\n2) if there is a font substitution available for the printer, they may then \nfail to actually use (or even send?) the font subset and try and use the \nsubstituted font in its proper encoding for the bogus encoding created in \nproducing the subset", "id": 112728, "time": "2008-01-10T03:36:16Z", "creator": "ulrich.scheper@basler.co.at", "creation_time": "2008-01-10T03:36:16Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Unless you take the necessary steps to rule out the third-party APIs for being\nresponsible for this and you supply concrete examples (or a guide) to reproduce\nthe problem, there's really nothing we can do. There are most probably a lot of\nvariables in here that we don't know of.\n\nYou say it works with some printer drivers and not with others. That's an\nindication that FOP is not at fault. Furthermore: so many people are printing\nFOP-generated PDFs with Acrobat and don't have problems. You'd have to look more\ntowards the end of the processing chain, i.e. between Acrobat and the operating\nsystem, where we can't help you. Unfortunately, Adobe usually leaves you in the\nrain when you run into problems and printer drivers are often the source of\nproblems in that area.", "creator": "jeremias@apache.org", "attachment_id": null, "id": 112730, "time": "2008-01-10T04:43:22Z", "bug_id": 42845, "creation_time": "2008-01-10T04:43:22Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 42845, "attachment_id": null, "text": "Hi!\nWell, due to the fact that the problem occurs only very arbitrary the problem \nmight affect a bigger number of people than you think. But nevertheless the \nproblem is discussed in sseveral other groups. To give you an idea here some \nlinks\n\nhttp://www.adobeforums.com/webx/.3bbeb93b -> this content has been extracted by \nmyself\nhttp://www.adobeforums.com/webx/.3bc3a663\nhttp://www.adobeforums.com/webx/.3bc2f70f\n\nhttp://www.hostingforum.ca/156897-garbled-output-character-shift-adobe-pdfs-via-\ncitrix.html\n\nOf course it is not possible for me to rule out third party issues. All I can \nsay is that the problem occurs only with documents generated by FOP. And I \naggree as long as there is no way of reproducing the problem, it is quite hart \n(or maybe impossible) to track down the problem. Nevertheless in my opinion you \nshould not ignore this error. Maybe there is a problem with the font \nidentification mechanism inside the generated PDF documents.\n\n(In reply to comment #4)\n> Unless you take the necessary steps to rule out the third-party APIs for being\n> responsible for this and you supply concrete examples (or a guide) to \nreproduce\n> the problem, there's really nothing we can do. There are most probably a lot \nof\n> variables in here that we don't know of.\n> You say it works with some printer drivers and not with others. That's an\n> indication that FOP is not at fault. Furthermore: so many people are printing\n> FOP-generated PDFs with Acrobat and don't have problems. You'd have to look \nmore\n> towards the end of the processing chain, i.e. between Acrobat and the \noperating\n> system, where we can't help you. Unfortunately, Adobe usually leaves you in \nthe\n> rain when you run into problems and printer drivers are often the source of\n> problems in that area.\n\n", "id": 112814, "time": "2008-01-14T07:29:00Z", "creator": "ulrich.scheper@basler.co.at", "creation_time": "2008-01-14T07:29:00Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 42845, "attachment_id": null, "text": "Ulrich, the links you provided clearly indicate that the problem must be in\nAcrobat Reader (or maybe in the Acrobat Reader/Printer Driver interaction). If a\nPDF file displays correctly on screen but prints wrong, how can FOP be the cause\nof that? Furthermore, people report that opening the same file again usually\nmakes the problem go away. The only thing we can potentially do in FOP is add an\nFAQ entry giving pointers about the problem. But otherwise, it's completely up\nto Adobe (or you switching to a different PDF viewer).\nMaybe something in FOP causes this bug in Acrobat to appear but without Adobe\nmaking a statement what exactly that is (if there is something in the first\nplace), there's nothing we can do.\n\nBTW, are you in a Citrix environment? I've seen all sorts of weird behaviour\naround printing on Citrix clients in my career.\n\nSorry, but I have no idea how I could help here. Let's leave this open for the\nmoment. If we get more information from Adobe, maybe we can do something in\nterms of documentation.", "id": 112820, "time": "2008-01-14T08:38:41Z", "creator": "jeremias@apache.org", "creation_time": "2008-01-14T08:38:41Z", "is_private": false}, {"count": 7, "tags": [], "creator": "ulrich.scheper@basler.co.at", "attachment_id": null, "text": "The system I use is native (no VM-Ware) Windows (2000, XP, Vista) and the \nproblem occurs on all three of them.\n\nThanks for your help.\n\n(In reply to comment #6)\n> Ulrich, the links you provided clearly indicate that the problem must be in\n> Acrobat Reader (or maybe in the Acrobat Reader/Printer Driver interaction). \nIf a\n> PDF file displays correctly on screen but prints wrong, how can FOP be the \ncause\n> of that? Furthermore, people report that opening the same file again usually\n> makes the problem go away. The only thing we can potentially do in FOP is add \nan\n> FAQ entry giving pointers about the problem. But otherwise, it's completely up\n> to Adobe (or you switching to a different PDF viewer).\n> Maybe something in FOP causes this bug in Acrobat to appear but without Adobe\n> making a statement what exactly that is (if there is something in the first\n> place), there's nothing we can do.\n> BTW, are you in a Citrix environment? I've seen all sorts of weird behaviour\n> around printing on Citrix clients in my career.\n> Sorry, but I have no idea how I could help here. Let's leave this open for the\n> moment. If we get more information from Adobe, maybe we can do something in\n> terms of documentation.\n\n", "id": 112852, "time": "2008-01-14T23:53:31Z", "bug_id": 42845, "creation_time": "2008-01-14T23:53:31Z", "is_private": false}, {"count": 8, "tags": [], "creator": "ulrich.scheper@basler.co.at", "attachment_id": null, "id": 112898, "time": "2008-01-16T00:03:05Z", "bug_id": 42845, "creation_time": "2008-01-16T00:03:05Z", "is_private": false, "text": "I got some mor information today. It seems as if the problem mainly occurs \nunder the following circumstances:\n1) XML is generated\n2) XML is transformed using XSL-FO and FOP called via JavaScript\n3) immediately after the transformation the PDF is shown using a JavaScript-Call\n4) if you print now the error may occur\n\nIs it possible that on a slow machine, the pdf file is not completely written \n(buffer not completely emptied) while the FOP process signals the system it is \nready and now acrobat opens a file where e.g. some crucial font information at \nthe end of the file is not available, yet? When you open the file a second time \nthe file is complete and therefore one can print it...\n\nI know the description above sounds quite unlikely but if one takes into \naccount that the problem occurs quite rarely and is not reproducable with the \nsame generated document, maybe its possible.\n\nThe source for step two and three is attached below.\n\n\nThe source for step 2 and 3:\n// create an ActiveXObject and declare some general stuff\nvar aShell = new ActiveXObject(\"WScript.Shell\");\n\nvar sPathRoot  = window.top.BTMDB.RootURL + \"pdf\";\nvar sPathFOP   = sPathRoot + \"\\\\fop\";\nvar sPathJava  = window.top.BTMDB.RootURL  + \"\\\\jre\\\\jre1.6.0_03\\\\bin\\\\java\";\nvar sPathBuild = sPathFOP  + \"\\\\build\";\nvar sPathLib   = sPathFOP  + \"\\\\lib\";\n\n// transform file to PDF\nvar arg = \"\\\"\" + sPathJava + \"\\\" \";\narg    += \"-cp \\\"\";\narg    += sPathBuild + \"\\\\fop.jar;\";\narg    += sPathLib + \"\\\\xml-apis.jar;\";\narg    += sPathLib + \"\\\\xercesImpl.jar;\";\narg    += sPathLib + \"\\\\xalan.jar;\";\narg    += sPathLib + \"\\\\serializer.jar;\";\narg    += sPathLib + \"\\\\batik-all.jar;\";\narg    += sPathLib + \"\\\\xmlgraphics-commons.jar;\";\narg    += sPathLib + \"\\\\avalon-framework.jar;\";\narg    += sPathLib + \"\\\\commons-io.jar;\";\narg    += sPathLib + \"\\\\commons-logging.jar;\\\" \";\narg    += \"org.apache.fop.cli.Main \";\narg    += \"-xml \" + sXmlUrl + \" \";\narg    += \"-xsl \" + sXslUrl + \" \";\narg    += \"-pdf \" + sPdfUrl + \" \";\narg    += \"-nocopy \" + \" \";\narg    += \"-noedit \" + \" \";\narg    += \"-noannotations\";\n\n// run (<application & params>, <[0|1] - process in background|foreground>, \n// <[true|false] wait till finished>\nvar nEcode = aShell.Run (arg, 0, true);\n\nif (nEcode != 0)\n{\n  alert (\"[ErrPDF-01]\\nError while transforming. Send file:\\n-> \" + sXmlUrl \n+ \"\")\n  window.top.TransferToCCA9 (sXmlUrl);\n  return;\n}\n\n// show result\nif (bShowPdf)\n{\n  var arg = \"cmd /c \\\"\" + sPdfUrl;\n\n  // run (<application & params>, <[0|1] - process in background|foreground>, \n  // <[true|false] wait till finished>\n  aShell.Run (arg, 0, false);\n}\n"}, {"count": 9, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "(In reply to comment #8)\n<snip/>\n> Is it possible that on a slow machine, the pdf file is not completely written \n> (buffer not completely emptied) while the FOP process signals the system it is \n> ready and now acrobat opens a file where e.g. some crucial font information at \n> the end of the file is not available, yet? When you open the file a second time \n> the file is complete and therefore one can print it...\n<snip/> \n\nThat would mean that the aShell.Run command returns before the Java process has\ncompletely finished. At any rate, the output file is properly finalized and\nclosed by FOP (I've checked). So, no, I can't imagine that there are still any\nopen buffers or something like that around (except in a faulty operating system\nwhich would be a catastrophe and not affect only one program). Furthermore,\nAcrobat usually notifies me if I want to open a PDF that is incomplete/corrupt.\nI still believe in a bug in Acrobat but I could be wrong. Have you tried a\ndifferent PDF viewer? I know using Acrobat could be company policy but just in\norder to narrow down the problem such an experiment could be worthwhile.", "id": 112899, "time": "2008-01-16T00:24:58Z", "bug_id": 42845, "creation_time": "2008-01-16T00:24:58Z", "is_private": false}, {"count": 10, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "resolved invalid due to lack of information (FO input file, PDF output file, etc)", "id": 156997, "time": "2012-04-01T15:07:59Z", "bug_id": 42845, "creation_time": "2012-04-01T15:07:59Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 42845, "attachment_id": null, "text": "batch transition resolved+invalid to closed+invalid", "id": 158519, "time": "2012-04-30T00:11:17Z", "creator": "gadams@apache.org", "creation_time": "2012-04-30T00:11:17Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 42305, "text": "Rework the win32 CV code to signal the condition only if one or more threads\nare blocked on the condition variable. If no threads are waiting on the\ncondition variable, nothing happens.\n\nThis patch also eliminates the thundering-herd problem of the manual-reset\nevent, which (theoretically) wakes up all threads waiting on.\n\nNow the behavior of the CV's should be the same on Unix and win32 platforms.", "id": 102691, "attachment_id": null, "creator": "davi@apache.org", "creation_time": "2007-04-30T13:28:39Z", "time": "2007-04-30T13:28:39Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42305, "text": "Created attachment 20078\nreworked win32 condition variable", "id": 102692, "attachment_id": 20078, "creator": "davi@apache.org", "creation_time": "2007-04-30T13:29:08Z", "time": "2007-04-30T13:29:08Z", "is_private": false}, {"count": 2, "tags": [], "creator": "davi@apache.org", "is_private": false, "text": "Created attachment 20079\nupdate documentation accordingly", "id": 102693, "time": "2007-04-30T13:29:49Z", "bug_id": 42305, "creation_time": "2007-04-30T13:29:49Z", "attachment_id": 20079}, {"count": 3, "tags": [], "bug_id": 42305, "attachment_id": 20080, "text": "Created attachment 20080\ncondition variable test code", "id": 102694, "time": "2007-04-30T13:30:15Z", "creator": "davi@apache.org", "creation_time": "2007-04-30T13:30:15Z", "is_private": false}, {"count": 4, "tags": [], "creator": "davi@apache.org", "text": "Reference:\n\nhttp://www.cs.wustl.edu/~schmidt/win32-cv-1.html\nhttp://www.cs.wustl.edu/~schmidt/win32-cv-2.html", "id": 104048, "time": "2007-06-04T12:58:45Z", "bug_id": 42305, "creation_time": "2007-06-04T12:58:45Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "From a quick read this patch looks good to me. I'm a little concerned about the issue of fairness, since it \nseems that signals won't be distributed evenly to the blocked threads, which is the same problem you run \ninto when using simple mutexes for thread synchronization, since one thread can dominate the lock and \nstarve the other threads for access to the critical section. I don't know enough about low-level Win32 \nlocking/condvar primitives to know if this was a problem before.", "is_private": false, "id": 104215, "creator": "aaron@apache.org", "time": "2007-06-08T09:57:04Z", "bug_id": 42305, "creation_time": "2007-06-08T09:57:04Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 42305, "is_private": false, "count": 6, "id": 104219, "time": "2007-06-08T10:46:17Z", "creator": "davi@apache.org", "creation_time": "2007-06-08T10:46:17Z", "text": "I think that the semaphore wakeups are task priority and FIFO ordered. The\ncritical section contention is minimal because most of the time only one\nthread is waked up. Even for broadcast case (wake up all threds) it won't\nhurt much since the \"critical\" code is fairly fast (very few instructions).\nAlso, most high-performance mutex implementations spin (briefly) the lock\nbecause going to kernel is way more costly, which is true for the broadcast case.\n\nBesides this, there isnt much that can be done about fairness without kernel\nhelp, that's probably why Vista ships a whole new CV primitive (WakeConditionVariable).\nLinux fixed this issue by allowing waiters of condition variables (futex) to be\nrequeued to a mutex (FUTEX_CMP_REQUEUE)."}, {"attachment_id": null, "tags": [], "bug_id": 42305, "is_private": false, "count": 7, "id": 104481, "time": "2007-06-17T22:22:24Z", "creator": "wrowe@apache.org", "creation_time": "2007-06-17T22:22:24Z", "text": "I'm satisfied this is ready to commit, given that anything would be an improvement\nover the existing code.\n\nAaron's and Davi's dialog above is interesting - is it worthwhile to actually\nwrite a condvar test for fairness of the OS, to indicate the health and usability\nof the API?"}, {"count": 8, "tags": [], "creator": "davi@apache.org", "is_private": false, "text": "(In reply to comment #7)\n> Aaron's and Davi's dialog above is interesting - is it worthwhile to actually\n> write a condvar test for fairness of the OS, to indicate the health and\n> usability of the API?\n\nYes. Currently there is only one (rather naive) fairness check in the test code. \nOnce I get back to it, i'll try to add more fairness tests.", "id": 104495, "time": "2007-06-18T05:26:15Z", "bug_id": 42305, "creation_time": "2007-06-18T05:26:15Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "davi@apache.org", "is_private": false, "text": "Expanding my previous comment: the naive fairnesse check is a pipe\nproducer/consumer code that checks if at least one entry is consumed\nper thread (pipe_consumer function).\n\nAs commented on the reference pages, there is a way to ensure fairness\nby queueing the threads in user space (a singly-linked list in FIFO order),\nbut this scheme would require a event handle per thread. I don't think\nit's really worth effort, few applications (if none) require strict\nfairness.", "id": 104496, "time": "2007-06-18T05:59:35Z", "bug_id": 42305, "creation_time": "2007-06-18T05:59:35Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "Committed to trunk, revisions: 551965, 551966 and 551967.\n\nhttp://svn.apache.org/viewvc?view=rev&revision=551965\nhttp://svn.apache.org/viewvc?view=rev&revision=551966\nhttp://svn.apache.org/viewvc?view=rev&revision=551967\n", "is_private": false, "id": 104920, "creator": "davi@apache.org", "time": "2007-06-29T10:26:08Z", "bug_id": 42305, "creation_time": "2007-06-29T10:26:08Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "I'd like to stick with version 1 since my needs are very simple, but random\nbreakage makes life more difficult.\n\nI've inserted the following document 4 times under /db/rss/java:\n\n<item xmlns:progeny=\"http://www.progeny.com/internal-rss\" progeny:inserted=\"1059\n621377\"><title>Teaching OO:  Putting the Object back into OOD</title><link>http:\n//www.artima.com/weblogs/viewpost.jsp?thread=6771</link><description>\nAlmost everyone who teaches object orientation uses\nthe class as a fundamental building block.\nSuch an approach misses the central point of object\norientation:  the objects themselves, and what they\nportend for flexibility and effective design.\nThis weblog is a case study in teaching object orientation. (From James O. Copli\nen's Weblog)\n    </description></item>\n\nWhen executing an XPath query, I sometimes get exceptions, sometimes not:\n\n> xindice xpath -c /db/rss/java -q /item/title\nDEBUG> \njava.lang.NullPointerException\n        at\norg.apache.xindice.core.DocumentCache$CacheKey.equals(DocumentCache.java:171)\n        at java.util.WeakHashMap.eq(WeakHashMap.java:248)\n        at java.util.WeakHashMap.get(WeakHashMap.java:340)\n        at org.apache.xindice.core.DocumentCache.getDocument(DocumentCache.java:79)\n        at org.apache.xindice.core.Collection.getDocument(Collection.java:711)\n        at\norg.apache.xindice.core.query.XPathQueryResolver$ResultSet.prepareNextNode(XPathQueryResolver.java:1003)\n        at\norg.apache.xindice.core.query.XPathQueryResolver$ResultSet.getNextNode(XPathQueryResolver.java:1042)\n        at\norg.apache.xindice.client.corba.CollectionServant.queryWrapper(CollectionServant.java:385)\n        at\norg.apache.xindice.client.corba.CollectionServant.queryCollection(CollectionServant.java:425)\n        at\norg.apache.xindice.client.corba.db.CollectionPOA._invoke(CollectionPOA.java:332)\n        at org.openorb.adapter.poa.POA.dispatch(POA.java:975)\n        at\norg.openorb.net.AbstractServerRequest.dispatch(AbstractServerRequest.java:750)\n        at\norg.openorb.net.ServerManagerImpl.serve_request(ServerManagerImpl.java:1467)\n        at\norg.openorb.net.ServerManagerImpl.thread_pool_main(ServerManagerImpl.java:1410)\n        at org.openorb.net.ServerManagerImpl.access$200(ServerManagerImpl.java:77)\n        at\norg.openorb.net.ServerManagerImpl$PoolThread.run(ServerManagerImpl.java:1557)\n\nI get 0 or 1 such exceptions per result, so the number of results returned by my\nquery varies from 0 to 4.\n\nI am using JDK 1.4.1 (actually a beta release) under Debian, so it is possible\nthe JDK is at fault, or at least triggering faulty behavior.  Rather than risk\nlosing this bug report while attempting to install a new JDK version, I'll\nsubmit it and follow up if I get different results under 1.3.0.", "attachment_id": null, "bug_id": 22012, "id": 41821, "time": "2003-07-31T03:45:25Z", "creator": "john@geekhavoc.com", "creation_time": "2003-07-31T03:45:25Z", "is_private": false}, {"count": 1, "tags": [], "text": "Thank you for the report.\n\nthis has been fixed on the CVS Head, or 1.1b2.  Use at your own risk, or try to \npatch the 1.0 code.  1.0 code is very different, and we are not persuing fixes \nfor that codebase.  But FYI- you may be able to simply patch the CachKey class \nwith the one from the CVS Head.", "is_private": false, "bug_id": 22012, "id": 41860, "time": "2003-07-31T15:00:32Z", "creator": "Kevin.Ross@iVerticalLeap.com", "creation_time": "2003-07-31T15:00:32Z", "attachment_id": null}]
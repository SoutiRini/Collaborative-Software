[{"count": 0, "tags": [], "bug_id": 46828, "attachment_id": null, "id": 125462, "time": "2009-03-10T07:24:43Z", "creator": "laerad@ima.it", "creation_time": "2009-03-10T07:24:43Z", "is_private": false, "text": "The attached patch fix some bugs in area tree caching and allow to enable caching from FOUserAgent. We use it in production without problems and would be nice to see it included in the next stable release.\nI know that few users would benefit from this patch, but at the same time it seems harmless to me.\n\nPatch details:\n* CachedRenderPagesModel.java: page.toString() was producing a bad file name, in particular all objects were written in the same .ser file and Fop wasn't able to read back those objects when there was too much pages\n* InlineArea.java: need to be serializable\n* AbstractLayoutManager.java, TableCellLayoutManager.java: just free references to the objects serialized"}, {"count": 1, "tags": [], "creator": "laerad@ima.it", "attachment_id": 23366, "text": "Created attachment 23366\nBug fixes and FOUserAgent facility", "id": 125463, "time": "2009-03-10T07:26:17Z", "bug_id": 46828, "creation_time": "2009-03-10T07:26:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46828, "text": "\nThanks for the patch. I'm going to apply it, with just one change.\n\nNot sure if anyone else agrees, but the modification to AbstractLayoutManager seems to belong in BlockStackingLayoutManager...? \nIt seems cleaner to override notifyEndOfLayout() in BlockStackingLM, and depend on the runtime type-checking to trigger the correct implementation, instead of forcing the explicit instanceof check on all concrete subclasses.\n\nIn BlockStackingLM:\n\n    /** {@inheritDoc} */\n    protected void notifyEndOfLayout() {\n        super.notifyEndOfLayout();\n        // Free memory of the area tree\n        this.parentArea = null;\n    }\n\nShould have the exact same effect, but the change is then made only to the affected class source.\n\n(I'm not too happy with the explicit references to FlowLM and PageSequenceLM a bit further down --I put them there myself, though :-S At any rate, references to concrete subclasses in an abstract superclass just always smell a bit strange...)\n\nBTW: if using caching is beneficial, we may want to consider defaulting to 'true'. Opinions?", "id": 125473, "time": "2009-03-10T14:53:00Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-10T14:53:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Thanks for the patch, Dario. I agree with Andreas that the code in AbstractLayoutManager should really be in BlockStackingLayoutManager. I can faintly remember that I've once investigated the right time to release memory in a layout manager. I think that was for page-number-citation-last. I'm not sure that we already always know exactly when a layout manager is really finished. Anyway, we've got a good test suite so any bugs in that area should quickly be found.\n\n@Andreas: what does \"beneficial\" mean? Beneficial in terms of memory consumption or of speed? I think that can be mutually exclusive. Before we decide to enable this by default I would want to have some numbers (performance & memory usage) to base the decision upon.\n\nAnother comment to the patch: I'm not particularly happy about calling the temporary area tree unloading to disk simply \"the cache\". We have a font cache, an image cache and others. I'm not even sure if this is really a classic \"cache\" as such. We need a better name for this IMO. How about FOUserAgent.setTemporaryAreaTreeSerializationEnabled(boolean)? Or FOUserAgent.setDiskBasedRenderPagesModel(boolean)? A bit lengthy but at least more speaking. Or FOUserAgent.setConserveMemoryPolicy(boolean) which would be a less specific approach that other code parts also could use as hint?", "attachment_id": null, "id": 125479, "creator": "jeremias@apache.org", "time": "2009-03-11T00:19:35Z", "bug_id": 46828, "creation_time": "2009-03-11T00:19:35Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 46828, "attachment_id": null, "id": 125483, "time": "2009-03-11T02:13:35Z", "creator": "laerad@ima.it", "creation_time": "2009-03-11T02:13:35Z", "is_private": false, "text": "(In reply to comment #3)\n> Thanks for the patch, Dario. I agree with Andreas that the code in\n> AbstractLayoutManager should really be in BlockStackingLayoutManager. I can\n> faintly remember that I've once investigated the right time to release memory\n> in a layout manager. I think that was for page-number-citation-last. I'm not\n> sure that we already always know exactly when a layout manager is really\n> finished. Anyway, we've got a good test suite so any bugs in that area should\n> quickly be found.\n\nI was working on this patch in October, I remember that the automated test on the area generated was failing because the check was based on the freed area... Anyway I've never encountered problems in my typical usage, fop just prints this warning when updating the area:\n\n11-mar-2009 9.24.58 org.apache.fop.area.inline.UnresolvedPageNumber resolveIDRef\nAVVERTENZA: Cannot update the IPD of an unresolved page number. No font information available.\n\nBut the final result is fine.\n\n> \n> @Andreas: what does \"beneficial\" mean? Beneficial in terms of memory\n> consumption or of speed? I think that can be mutually exclusive. Before we\n> decide to enable this by default I would want to have some numbers (performance\n> & memory usage) to base the decision upon.\n\nI think that area caching shouldn't be the default option: it provides a significant memory improvement for some cases (large documents with many page-seq plus page citation) but in most cases it would just slowdown the process (disk access for read/write) without any benefit.\nIt is useful in my scenario where I produce 50000 pages document, that means 400-500 MB of RAM and 4 GB of disk cache (that otherwise should reside in memory...).\nFor completeness, if I just want the total page number I can achieve better memory results by using the hack of the two pass indicated in http://xmlgraphics.apache.org/fop/fo.html#fo-total-pages, but it is slower. Theoretically it should be twice slower, but in practice the update process plus the disk access reduces the time gap.\nAnyway I think that the two pass method can't work if you have many cross reference between page-seqs and not only the total page number.\n\n\n> \n> Another comment to the patch: I'm not particularly happy about calling the\n> temporary area tree unloading to disk simply \"the cache\". We have a font cache,\n> an image cache and others. I'm not even sure if this is really a classic\n> \"cache\" as such. We need a better name for this IMO. How about\n> FOUserAgent.setTemporaryAreaTreeSerializationEnabled(boolean)? Or\n> FOUserAgent.setDiskBasedRenderPagesModel(boolean)? A bit lengthy but at least\n> more speaking. Or FOUserAgent.setConserveMemoryPolicy(boolean) which would be a\n> less specific approach that other code parts also could use as hint?\n\nI agree, \"cache\" is inappropriate, \"setConserveMemoryPolicy\" is nice and blink the eye to non fop-dev that just want to embed fop."}, {"count": 5, "tags": [], "bug_id": 46828, "attachment_id": null, "id": 125489, "time": "2009-03-11T10:46:08Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-11T10:46:08Z", "is_private": false, "text": "\nHaving read the feedback, I agree with initially setting it to false. I completely overlooked the fact that we get increased disk I/O as a result.\n\nWith respect to LM-cleanup (maybe interesting to know): \nI did make some changes (months ago) which release the FO subtree when an LM has finished adding its areas. It does not work yet in all cases, only for straightforward blocks and inlines. Most notably: it does not work for table-elements, and there are some cases with nested blocks and border-after or space-after where it doesn't work either.\nReason is that the approach relies on the isLast() method. Sometimes it returns false for the parent BlockLM, because the checked Position actually belongs to the childLM, and the real last position for the parent LM is not available in the PositionIterator that is passed to addAreas()."}, {"count": 6, "tags": [], "bug_id": 46828, "text": "Created attachment 23375\nRevised patch proposal\n\nOK, I'm about ready to commit. \nOne thing I'm slightly unsure of: current FOP Trunk has the call to notifyEndOfLayout() for the TableCellLM at the end of the getNextKnuthElements() method. For virtually all other LMs, this call is triggered at the end of addAreas(). Does anyone know if moving that call to addAreas() could cause trouble? It breaks no tests, but I'm wondering if it was intentional or something that was forgotten and nobody ever noticed.\n\nApart from that, is everyone OK with using:\nmember: conserveMemoryPolicy\ngetter: isConserveMemoryPolicyEnabled()\nsetter: setConserveMemoryPolicy(boolean)\n\n-> via the command-line: -conserve? or something more cryptic, like -cmp? ;-)", "id": 125523, "time": "2009-03-12T12:52:32Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-12T12:52:32Z", "is_private": false, "attachment_id": 23375}, {"count": 7, "tags": [], "bug_id": 46828, "text": "\nJust noticed: the patch also contains some minor cleanup in BlockStackingLM (removals of redundant casts and simplification of conditionals). Hope this raises no objection...", "id": 125524, "time": "2009-03-12T12:54:51Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-12T12:54:51Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "(In reply to comment #6)\n> Created an attachment (id=23375) [details]\n> Revised patch proposal\n> \n> OK, I'm about ready to commit. \n\nSmall omission: the \"-cache\" in CommandLineOptions needs to be deleted. Otherwise, this looks ok, but I haven't done any tests myself.\n\n> One thing I'm slightly unsure of: current FOP Trunk has the call to\n> notifyEndOfLayout() for the TableCellLM at the end of the\n> getNextKnuthElements() method. For virtually all other LMs, this call is\n> triggered at the end of addAreas(). Does anyone know if moving that call to\n> addAreas() could cause trouble? It breaks no tests, but I'm wondering if it was\n> intentional or something that was forgotten and nobody ever noticed.\n\nnotifyEndOfLayout() in getNextKnuthElements() would be the mistake, not the move. If the tests run through ok, you should be fine. Otherwise, we are missing a test. ;-)\n\n> Apart from that, is everyone OK with using:\n> member: conserveMemoryPolicy\n> getter: isConserveMemoryPolicyEnabled()\n> setter: setConserveMemoryPolicy(boolean)\n\n/me nods\n\n> -> via the command-line: -conserve? or something more cryptic, like -cmp? ;-)\n\n-conserve is fine IMO.", "id": 125535, "time": "2009-03-13T02:26:28Z", "bug_id": 46828, "creation_time": "2009-03-13T02:26:28Z", "is_private": false}, {"count": 9, "tags": [], "creator": "laerad@ima.it", "attachment_id": null, "text": "(In reply to comment #8)\n> > One thing I'm slightly unsure of: current FOP Trunk has the call to\n> > notifyEndOfLayout() for the TableCellLM at the end of the\n> > getNextKnuthElements() method. For virtually all other LMs, this call is\n> > triggered at the end of addAreas(). Does anyone know if moving that call to\n> > addAreas() could cause trouble? It breaks no tests, but I'm wondering if it was\n> > intentional or something that was forgotten and nobody ever noticed.\n> \n> notifyEndOfLayout() in getNextKnuthElements() would be the mistake, not the\n> move. If the tests run through ok, you should be fine. Otherwise, we are\n> missing a test. ;-)\n\nAlas, I'm no more able to comment this kind of details, I lost some of my knowledge in few months :(\n\nI agree about other comments", "id": 125536, "time": "2009-03-13T03:19:28Z", "bug_id": 46828, "creation_time": "2009-03-13T03:19:28Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 46828, "text": "\nChanges committed with r753327.\n\nThanks for submitting the patch, Daerio!", "id": 125553, "time": "2009-03-13T10:53:08Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-13T10:53:08Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "attachment_id": null, "id": 156221, "creator": "gadams@apache.org", "time": "2012-04-01T07:05:29Z", "bug_id": 46828, "creation_time": "2012-04-01T07:05:29Z", "is_private": false}]
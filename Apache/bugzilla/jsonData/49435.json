[{"count": 0, "tags": [], "creator": "dvergnaud@yahoo.com", "attachment_id": null, "id": 137621, "time": "2010-06-14T10:51:25Z", "bug_id": 49435, "creation_time": "2010-06-14T10:51:25Z", "is_private": false, "text": "I'm using function POITextExtractor.getMetadataTextExtractor() on a docx document to extract its metadata. If the main POITextExtractor has been created using a \"normal\" java.io.File, then extracting the metadata seems to work alright. When using a ByteArrayInputStream instead (for exactly the same content, read using a simple FileInputStream on the same File object), then information is changed or missing. \n\nExample: using the following code: \n\nPOITextExtractor te = ExtractorFactory.createExtractor( new java.io.File( \"X:/projects/termDB/Frederick - Terminology database.docx\" ) );\nPOITextExtractor te2 = te.getMetadataTextExtractor();\nString t2 = te2.getText();\nSystem.out.println( t2 );\n\nI get the following output: \nCategory = null\nContentStatus = null\nContentType = null\nCreated = Mon Apr 26 07:01:00 CEST 2010\nCreatedString = 2010-04-26T07:01:00Z\nCreator = David Vergnaud\nDescription = null\nIdentifier = null\nKeywords = null\nLanguage = null\nLastModifiedBy = David Vergnaud\nLastPrinted = null\nLastPrintedString = 2010-04-26T07:01:00Z\nModified = Fri Apr 30 10:06:00 CEST 2010\nModifiedString = 2010-04-30T10:06:00Z\nRevision = 31\nSubject = null\nTitle = null\nVersion = null\nApplication = Microsoft Macintosh Word\nAppVersion = 12.0000\nCharacters = 48573\nCharactersWithSpaces = 59651\nCompany = Finnova AG Bankware\nHyperlinkBase = null\nHyperlinksChanged = false\nLines = 404\nLinksUpToDate = false\nManager = null\nPages = 19\nParagraphs = 97\nPresentationFormat = null\nTemplate = Normal.dotm\nTotalTime = 835\n\nWhen using that code instead:\njava.io.File file = new java.io.File( \"X:/projects/termDB/Frederick - Terminology database.docx\" );\nbyte[] content = new byte[ (int)( file.length() ) ];\njava.io.FileInputStream fis = new java.io.FileInputStream( file );\nfis.read( content );\nPOITextExtractor te = ExtractorFactory.createExtractor( new ByteArrayInputStream( content ) );\nPOITextExtractor te2 = te.getMetadataTextExtractor();\nString t2 = te2.getText();\nSystem.out.println( t2 );\n\nI get the following output: \nCategory = null\nContentStatus = null\nContentType = null\nCreated = Mon Jun 14 16:39:13 CEST 2010\nCreatedString = 2010-06-14T16:39:13Z\nCreator = David Vergnaud\nDescription = null\nIdentifier = null\nKeywords = null\nLanguage = null\nLastModifiedBy = null\nLastPrinted = null\nLastPrintedString = 2010-06-14T16:39:13Z\nModified = null\nModifiedString = 2010-06-14T16:39:18Z\nRevision = 31\nSubject = null\nTitle = null\nVersion = null\nApplication = Microsoft Macintosh Word\nAppVersion = 12.0000\nCharacters = 48573\nCharactersWithSpaces = 59651\nCompany = Finnova AG Bankware\nHyperlinkBase = null\nHyperlinksChanged = false\nLines = 404\nLinksUpToDate = false\nManager = null\nPages = 19\nParagraphs = 97\nPresentationFormat = null\nTemplate = Normal.dotm\nTotalTime = 835\n\nSome pieces of information (Created, LastPrintedString, ModifiedString) have changed, and some pieces are simply not available in the ByteArray version. \n\nInterestingly, all dates shown in the ByteArray version are actually the date when the program was executed (today, about 5 minutes ago). \n\nIncidentally, the first LastModified (in the \"File\" version) doesn't match the date as shown by my various operating systems -- all agree on the 3rd of May. However, I guess that's a difference between Word's internally stored modification date and the date of the last physical modification of the file itself at the OS level."}, {"attachment_id": null, "tags": [], "creator": "apache@gagravarr.org", "is_private": false, "count": 1, "id": 137622, "time": "2010-06-14T10:55:53Z", "bug_id": 49435, "creation_time": "2010-06-14T10:55:53Z", "text": "There shouldn't be any differences\n\nCould you please create a simple unit test which loads the file the two different ways, and detects that they don't agree? We can then use that when trying to fix the bug, and to ensure it stays fixed\n\nIt might also be worth you digging down into the properties themselves, rather than just the extractor level text, and see if you can spot there where the problem is introduced"}, {"count": 2, "tags": [], "bug_id": 49435, "is_private": false, "id": 137642, "creation_time": "2010-06-15T02:49:10Z", "time": "2010-06-15T02:49:10Z", "creator": "dvergnaud@yahoo.com", "text": "OK, I'll do that as soon as I can find some time -- might take 1-2 weeks though. \n\nCan you just tell me how the test program should behave? Simply return 0 on success (same values on both sides) and -1 otherwise?", "attachment_id": null}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 137661, "time": "2010-06-15T09:45:36Z", "bug_id": 49435, "creation_time": "2010-06-15T09:45:36Z", "is_private": false, "text": "The class should extend junit.framework.TestCase\n\nI would suggest you have open the file the two ways, then loop over the two objects doing assertEquals, assertNotNull etc. In theory, we'd expect one to pass and one to fail as they differ"}, {"count": 4, "tags": [], "text": "No update for a long time, thus I am closing this for now, please reopen with more information if this is still a problem for you.", "attachment_id": null, "bug_id": 49435, "id": 188409, "time": "2016-02-14T08:29:36Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-02-14T08:29:36Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Using RMI with Tomcat 4+ (all 4 versions of Tomcat, 5 too) causes problems. It \nworks, but performance is very bad. We have reproduced this problem and \npinpointed it down to the WebappClassLoader in Tomcat 4. If a serialized class \nis sent back from an RMI server, the RMI classes from Sun call \ngetClassAnnotation() of the classloader. If the java code is included in a JAR \nfile in the WEB-INF/lib too, this classloader is the \norg.apache.catalina.loader.WebappClassloader class.\n\nIn our test cases, over 50% of the time was spent in method getURLs() of this \nloader in the following stack trace:\n\nsun.rmi.server.MarshalOutputStream.annotateClass()\n  java.rmi.server.RMIClassLoader.getClassAnnotation()\n    sun.rmi.server.LoaderHandler.getClassAnnotation()\n      org.apache.catalina.loader.WebappClassLoader.getURLs()\n        org.apache.catalina.loader.WebappClassLoader.getURL()\n\nThe getURL() was called for EVERY time a class is deserialized, for ALL JAR \nfiles in the web-app (in our case 27). This is caused by the fact that in\n\nsun.rmi.server.LoaderHandler.getClassAnnotation() a check is made if the \nClassLoader of the class received in known in the \"codebase\" cache.\n\nThis can easily be fixed by adding a call to\nsun.rmi.server.LoaderHandler.registerCodebaseLoader(this);\n\nin both constructors of the WebappClassLoader. We have created an overridden \nclassloader that does this and registered it in server.xml with\n\n<Loader loaderClass=\"org.apache.catalina.loader.CustomClassLoader\"/>\n\n(that's a custom class inherited from WebappClassloader that simply calls the \nregistration in 2 constructors)\n\nThis caused performance increase of some pages with factor of 30 or more! The \nproblem gets bigger if more RMI calls are made and more JAR files are added to \nthe web-app.\n\nIt seems to me that this RMI registration is simply forgotten and should be \nadded to the Tomcat 4 (and 5) code.\n\nI think this is also the resolution of Bugzilla #7359.\n\nProbably a better way of calling this method too. You should be careful what \nhappens if a non-Sun java is used. Furthermore; what happens with the Thread-\nspecific class loaders?", "attachment_id": null, "id": 49122, "creator": "anne@veling.nl", "time": "2003-12-15T09:59:55Z", "bug_id": 25528, "creation_time": "2003-12-15T09:59:55Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 25528, "attachment_id": 9574, "id": 49123, "time": "2003-12-15T10:01:18Z", "creator": "anne@veling.nl", "creation_time": "2003-12-15T10:01:18Z", "is_private": false, "text": "Created attachment 9574\noverridden classloader that fixes the problem"}, {"count": 2, "tags": [], "bug_id": 25528, "text": "The problem is already fixed in the Tomcat 5 CVS: it is very easy to optimize\nthe getURLs method. The idea is that I didn't know this method was used often.", "id": 49139, "time": "2003-12-15T18:16:29Z", "creator": "remm@apache.org", "creation_time": "2003-12-15T18:16:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 25528, "attachment_id": null, "id": 49185, "time": "2003-12-16T08:51:41Z", "creator": "anne@veling.nl", "creation_time": "2003-12-16T08:51:41Z", "is_private": false, "text": "The getURLs() method is called too often in tomcat 4. The \nsun.rmi.server.LoaderHandler class has a piece of code like this:\n\n        ClassLoader classloader = class1.getClassLoader();\n        if(classloader == null || codebaseLoaders.containsKey(classloader))\n            return codebase;\n        String s1 = null;\n        if(classloader instanceof Loader)\n            s1 = ((Loader)classloader).getClassAnnotation();\n        else\n        if(classloader instanceof URLClassLoader)\n            try\n            {\n                URL aurl[] = ((URLClassLoader)classloader).getURLs();\n(...)\n\nYou see; it checks to see if the classloader is 'known', if so this method \ngetClassAnnotation returns the codebase directly. If not, it calls the getURLs\n() method for EVERY class deserialization! That is because the codeBaseLoaders \ncache does not contain the WebappClassLoader for Tomcat 4.\n\nI still think it's a bug that should be fixed in version 4; or at least made \nknown to people because it has high performance impact for all use or RMI with \ntomcat 4 (see usenet for a lot of people with the same problems)"}, {"count": 4, "tags": [], "creator": "anne@veling.nl", "attachment_id": null, "text": "we tested this on tomcat 5 too and the problem persists. I just checked the \n5.0.16 source of tomcat catalina; cannot find the fix that you refer to. Where \nexactly should this be?", "id": 49186, "time": "2003-12-16T09:12:29Z", "bug_id": 25528, "creation_time": "2003-12-16T09:12:29Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 25528, "text": "Ah I see the fix now in Revision 1.28 of WebappClassLoader, just a week ago.\n\nIt does not solve the superfluous number of calls to getURLs() though, just \nmakes it faster.\n\nWhat should we do with our clients that use tomcat 4 and face this problem? Use \nour custom classloader patch?", "id": 49187, "time": "2003-12-16T09:37:48Z", "creator": "anne@veling.nl", "creation_time": "2003-12-16T09:37:48Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 25528, "text": "Porting the getURLs patch from TC 5 is very easy. I recommend you do that, and I\nalso expect the patch will be ported to 4.1.x.\n\nBTW, making the amount of calls zero is not useful: the overhead will now be on\nthe serialization.", "id": 49195, "time": "2003-12-16T18:56:02Z", "creator": "remm@apache.org", "creation_time": "2003-12-16T18:56:02Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 25528, "text": "OK thanx will do. I will keep an eye on tomcat 4.1 patch and recommend our \nclients to upgrade to that version. Until then, we will use current patch.\n\nthanx for the quick response (no support for bugs in tomcat, that's what i keep \nhearing. try to get this addressed to the right people for weblogic ;-)", "id": 49229, "time": "2003-12-17T09:06:51Z", "creator": "anne@veling.nl", "creation_time": "2003-12-17T09:06:51Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 25528, "text": "Invalid bug?\n\nI think that this bug is invalid as it suggests that the WebappClassLoader \nshould \u201cregister with the RMI codebase cache\u201d. However, registering every \nWebappClassLoader as a codebase loader will simply cause the getClassAnnitation\n(Class) method in sun.rmi.server.LoaderHandler to return the default codebase, \nwhich is the value of the \u201cjava.rmi.server.codebase\u201d system property. This will \ndisable the RMI server to dynamically load classes from the web application if \nneeded, which might be OK in some situations where the server already has \naccess to required classes but should not be considered a valid solution for a \nmulti-purpose Container. Moreover, what will happen if running on a JVM not \nprovided by Sun? \n\nI would really appreciate if one of the TC developers (or someone with deeper \nRMI knowledge than me) could comment this.\n\nThanks,\nDaniel\n\nPS: I too have been experiencing performance problems when calling remote \nobjects using RMI from within a web application, however, the patch that was \ncommitted by Remy last week solved my problems (Thanks a lot! :D ). I\u2019d really \nappreciate if this patch was applied for TC4.1 as well (i.e., available in the \nnext release).", "id": 49312, "time": "2003-12-18T10:08:42Z", "creator": "daniel_andefors@hotmail.com", "creation_time": "2003-12-18T10:08:42Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "anne@veling.nl", "attachment_id": null, "text": "Yes I agree with you Daniel. The caching of getURLs() as done by Remy in TC5 is \na good enough fix that does not mess with the delicate communication between \ntomcat classloaders and RMI.\n\nHowever, the fix by Remy in 5 simply caches the urls array. Remy, what if \nsomeone calls addJar etc. after the cache has been initialized? Several methods \nwill add/remove jars from the list and should be updated in the cache?\n\nWho will post the fix to tomcat 4.1? My company needs a new official version \nwith a cached url list to recommend to upgrade to.", "id": 49418, "time": "2003-12-19T09:21:09Z", "bug_id": 25528, "creation_time": "2003-12-19T09:21:09Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 25528, "text": "Some further modifications were made by Remy before the 5.0.17 release that \nshould address your cache validity concerns in TC5.\n\nI have ported the fix to the TC4 source but there are currently no plans a TC4 \nrelease.", "id": 60025, "time": "2004-06-28T22:26:40Z", "creator": "markt@apache.org", "creation_time": "2004-06-28T22:26:40Z", "is_private": false, "attachment_id": null}, {"count": 11, "text": "Great; thanks. A new tomcat 4.1 release would then be greatly appreciated. I \nwill keep an eye on it. I agree with the new fixes made and that they are \nbetter than directly registering the classloader with RMI.", "creator": "anne@veling.nl", "attachment_id": null, "id": 60055, "time": "2004-06-30T08:29:21Z", "bug_id": 25528, "creation_time": "2004-06-30T08:29:21Z", "tags": [], "is_private": false}]
[{"attachment_id": 21856, "tags": [], "bug_id": 44876, "is_private": false, "count": 0, "id": 115893, "time": "2008-04-25T13:00:34Z", "creator": "talper@coverity.com", "creation_time": "2008-04-25T13:00:34Z", "text": "Created attachment 21856\nProposed patch\n\nBCEL throws the ArrayIndexOutOfBoundsException when trying to construct a new org.apache.bcel.generic.MethodGen on a method containing the bytes compiled from the following code:\n\nswitch (i) {\n  case Integer.MAX_VALUE:\n    break;\n  default:\n    b = true;\n}\n\nThe method that does not handle this corner case correctly is org.apache.bcel.generic.TABLESWITCH.initFromFile(ByteSequence, boolean)."}, {"count": 1, "tags": [], "bug_id": 44876, "is_private": false, "id": 115959, "creation_time": "2008-04-28T06:46:04Z", "time": "2008-04-28T06:46:04Z", "creator": "tcurdt@apache.org", "text": "Could you please provide the exception or describe the corner case.\nIt's not exactly obvious why your patch fixes this problem.", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "talper@coverity.com", "is_private": false, "count": 2, "id": 115967, "time": "2008-04-28T08:54:16Z", "bug_id": 44876, "creation_time": "2008-04-28T08:54:16Z", "text": "Sorry about that, I was in a bit of a rush.\n\nThe corner case is if the low and high values (signed ints) are the same and their value is 0x7fffffff (Integer.MAX_VALUE). This occurs only if there is one case (aside from the default) in the switch and it happens to be MAX_VALUE.\n\nHere's the code in BCEL that causes the problem:\n\nfor (int i = low; i <= high; i++) {\n  match[i - low] = i; //ArrayIndexOutOfBoundsException thrown here\n}\n\nThe loop boundaries are the problem. 'i' is initialized to MAX_VALUE, then match[0] is set correctly to MAX_VALUE, i is incremented causing overflow, since i is still <= MAX_VALUE the loop continues. Then on the next time through the loop (i - low) == (0x80000000 - 0x7fffffff) == 1, but match[1] is invalid because it was initialized to have only 1 element by \"match_length = high - low + 1\" and \"match = new int[match_length]\".\n\n\nAs you can see, my patch resolves this corner case and has the added benefit of eliminating an extra for loop.\n\n\nBy the way, the actual exception that finally bubbles up isn't too helpful because the ArrayIndexOutOfBoundsException gets converted into a ClassGenException without having the whole ArrayIndexOutOfBoundsException wrapped. Anyway, for the sake of being complete, it looks like this:\norg.apache.bcel.generic.ClassGenException:\njava.lang.ArrayIndexOutOfBoundsException: 1\n        at org.apache.bcel.generic.Instruction.readInstruction(Instruction.java:177)\n        at\norg.apache.bcel.generic.InstructionList.<init>(InstructionList.java:167)\n        at org.apache.bcel.generic.MethodGen.<init>(MethodGen.java:164)\n        at ...\n"}, {"count": 3, "tags": [], "bug_id": 44876, "attachment_id": null, "id": 133496, "time": "2010-01-10T13:27:51Z", "creator": "tcurdt@apache.org", "creation_time": "2010-01-10T13:27:51Z", "is_private": false, "text": "Fixed. Thx."}]
[{"count": 0, "tags": [], "text": "We run embedded tomcat on version 8, and for some reason are consistently seeing extreme slowness across all Tomcat endpoints at very consistent intervals of three hours. Once a site gets into the slow state, it is never able to recover, and stays unresponsive (requests take tens of minutes to hours) until the service is manually restarted.\n\nThere are no resource issues that I've been able to detect (heap seems fine, no apparent memory leaks, cpu is fine, network/db connections aren't exhausted, etc). Tomcat does seem to receive the requests, but for some reason does not seem to be processing them.\n\nThere is an exception that occurs right around the time the service goes into a bad state, which is the reason I believe this to be a Tomcat issue. The stack trace is as follows:\n\nException in thread \"mc-26\" java.lang.IllegalMonitorStateException\n\n    at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(Unknown Source)\n\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(Unknown Source)\n\n    at java.util.concurrent.locks.ReentrantLock.unlock(Unknown Source)\n\n    at java.util.concurrent.LinkedBlockingQueue.take(Unknown Source)\n\n    at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103)\n\n    at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31)\n\n    at java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)\n\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\n    at java.lang.Thread.run(Unknown Source)\n\nHaving done some additional testing, I can elaborate on the state of things when this exception occurs:\n * The ReentrantLock that is throwing the exception is meant to throw the IllegalMonitorStateException when a thread other than the thread that created the lock tries to release it. Interestingly, when tryRelease() is called, the owning thread is actually null, which means that the lock isn't currently taken or owned by anyone.\n\n * The lock's state is 0, which is consistent with the lock's owning thread being null.\n\n * The tryRelease funtion takes an int argument \"releases\", which is 1 (you'd find that in the stacktrace anyway, since it's passed in as a constant further up, but mentioning it might save some time).\n\nI realize that the LinkedBlockingQueue and ReentrantLock are java core concurrency libraries, but it seems like Tomcat is getting into a bad state once the error occurs, and is unable to exit the bad state. The executing thread that gets this exception dies, and almost all other threads end up staying almost all the time in an unsafe parked state. The IllegalMonitorStateException also generally occurs in several threads after it's shown up for the first time.\n\nI'm not sure how to describe how to reproduce this issue, other than saying that everyone at my company with our service installed experiences it very reliably every three hours. We've been thus far unable to determine what causes it, however. My personal theory is that somehow the TaskQueue is getting into a state where it can only rarely give tasks to the executor threads, but I don't know what causes things to enter that state. From what we can tell, it does seem to be related to our Jersey endpoints.\n\nIf you need any additional information, just let me know and I'll be happy to provide anything that might be useful. I've been getting most of my information from thread/heap dumps as well as modifying local versions of Tomcat to provide additional logging. \n\nMost of our services are running Tomcat 8.0.32, but seem to still exhibit the problem on versions at least as early as 8.0.15 and as late as 8.0.34.", "is_private": false, "id": 191847, "creator": "rcraiglynch@gmail.com", "time": "2016-06-20T18:17:02Z", "bug_id": 59737, "creation_time": "2016-06-20T18:17:02Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 59737, "is_private": false, "text": "There is nothing here that indicates a Tomcat bug. You get a better response if you post this to the users' mailing list.", "id": 191848, "time": "2016-06-20T18:19:57Z", "creator": "markt@apache.org", "creation_time": "2016-06-20T18:19:57Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "rcraiglynch@gmail.com", "attachment_id": null, "id": 191853, "time": "2016-06-20T19:39:28Z", "bug_id": 59737, "creation_time": "2016-06-20T19:39:28Z", "is_private": false, "text": "Could you please elaborate? The only items in the stacktrace are either in Tomcat or java concurrency code. What appears to be happening ins Tomcat is trying to release a lock that's already been released. It seems unlikely that there's a configuration I could be setting that would cause Tomcat to try to do that.\n\nI've actually been working on this problem for well over a month now, and I do have more information that points towards Tomcat -- the TaskQueue builds up large lists of runnables when the sites are in the bad state, and I'm able to reproduce very similar issues by making the queue behave badly in different ways.\n\nAs I mentioned, I'm happy to provide additional information, I'm just not sure what's useful to the project."}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 191854, "time": "2016-06-20T19:47:40Z", "bug_id": 59737, "creation_time": "2016-06-20T19:47:40Z", "is_private": false, "text": "Again, please use the users' mailing list."}]
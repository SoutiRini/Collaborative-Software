[{"count": 0, "tags": [], "bug_id": 45679, "is_private": false, "id": 120046, "creation_time": "2008-08-23T06:12:27Z", "time": "2008-08-23T06:12:27Z", "creator": "bnoordhuis@gmail.com", "text": "Created attachment 22477\nTeeny weeny patch\n\nThe summary says it all really, but for posterity's sake:\n\nhtpasswd -s -c /path/to/htpasswd bnoordhuis\nNew password: {SHA}foo\nRe-type new password: {SHA}foo\n\nDue to erroneous code in apr_sha1_base64() the generated password hash will never match the original password. And because the pointer to the plain-text password is bumped but the length variable isn't, a buffer overrun of several bytes happens when generating the hash. I doubt it is exploitable (the stack layout doesn't seem to favor a potential attacker) but I'm no expert on the matter.", "attachment_id": 22477}, {"count": 1, "tags": [], "bug_id": 45679, "is_private": false, "id": 120056, "creation_time": "2008-08-25T01:25:21Z", "time": "2008-08-25T01:25:21Z", "creator": "bojan@rexursive.com", "text": "I don't think this patch is correct. I think we should actually do this (note that there is a tab in the first patched line, hence the diff):\n\nIndex: crypto/apr_sha1.c\n===================================================================\n--- crypto/apr_sha1.c\t(revision 685796)\n+++ crypto/apr_sha1.c\t(working copy)\n@@ -352,7 +352,8 @@\n     apr_byte_t digest[APR_SHA1_DIGESTSIZE];\n \n     if (strncmp(clear, APR_SHA1PW_ID, APR_SHA1PW_IDLEN) == 0) {\n-\tclear += APR_SHA1PW_IDLEN;\n+        clear += APR_SHA1PW_IDLEN;\n+        len -= APR_SHA1PW_IDLEN;\n     }\n \n     apr_sha1_init(&context);\n\nDoes the above work for you?", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45679, "text": "> Does the above work for you?\n\nYes and no. It fixes the out-of-bounds reads but passwords starting with '{SHA}' still don't work. I do believe the pointer bump needs to go - it is not the .htpasswd hash you are chopping bits off, it is the plain-text password the user entered.", "id": 120062, "time": "2008-08-25T02:54:31Z", "creator": "bnoordhuis@gmail.com", "creation_time": "2008-08-25T02:54:31Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "bojan@rexursive.com", "text": "Isn't the point here that \"{SHA}\" prefix isn't actually part of the password?\n\nThe way I'm reading the code is that \"clear\" can be either {SHA}password or just password and base64 encoded value \"out\" should be the same. No?\n\nMaybe you have hashes of {SHA}password stored in your .htpasswd file (instead of just password), so the patch gives different values of the hash, because it ignores the \"{SHA}\" prefix? In other words, if you regenerate .htpasswd from scratch, does it work?", "id": 120064, "time": "2008-08-25T04:04:07Z", "bug_id": 45679, "creation_time": "2008-08-25T04:04:07Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 45679, "is_private": false, "id": 120065, "time": "2008-08-25T04:20:54Z", "creator": "bojan@rexursive.com", "creation_time": "2008-08-25T04:20:54Z", "tags": [], "text": "But I also do see your point about \"{SHA}\" prefix actually being part of the final hash, not the clear password passed in (this is how OpenLDAP works, for instance). To be honest, I don't know why the exception to ignore \"{SHA}\" prefix in clear password would be made...\n\nMaybe long, long time ago someone wanted to identify SHA1 password hashing by passing that prefix in front of clear passwords or something. No idea..."}, {"count": 5, "tags": [], "bug_id": 45679, "attachment_id": null, "is_private": false, "id": 120066, "time": "2008-08-25T05:28:16Z", "creator": "bojan@rexursive.com", "creation_time": "2008-08-25T05:28:16Z", "text": "BTW, this code appears to be all the way from Apache 1.3.x."}, {"count": 6, "attachment_id": null, "creator": "bnoordhuis@gmail.com", "text": "> Maybe long, long time ago someone wanted to\n> identify SHA1 password hashing by passing that\n> prefix in front of clear passwords or something.\n> No idea...\n\nThat thought struck me as well but. grepping through the source, I don't find anything that would require - let alone justify - stripping the prefix (see below). So what do we do now? I still think those three lines have to go.\n\n$ find . -name '*.c' | xargs egrep '(apr_sha1_base64|ap_hack_apr_sha1_base64)'\n./support/htpasswd.c:        apr_sha1_base64(pw,strlen(pw),cpw);\n./support/htdbm.c:            apr_sha1_base64(htdbm->userpass,strlen(htdbm->userpass),cpw);\n./srclib/apr-util/crypto/apr_md5.c: * crypt() (if available) or apr_md5_encode() or apr_sha1_base64(), depending\n./srclib/apr-util/crypto/apr_md5.c:        apr_sha1_base64(passwd, (int)strlen(passwd), sample);\n./srclib/apr-util/crypto/apr_sha1.c: *   apr_sha1_base64(const char *clear, int len, char *out);\n./srclib/apr-util/crypto/apr_sha1.c:APU_DECLARE(void) apr_sha1_base64(const char *clear, int len, char *out)\n./srclib/apr-util/exports.c:const void *ap_hack_apr_sha1_base64 = (const void *)apr_sha1_base64;\n./srclib/apr-util/test/testpass.c:    apr_sha1_base64(pass, (int)strlen(pass), hash);\n./server/exports.c:const void *ap_hack_apr_sha1_base64 = (const void *)apr_sha1_base64;", "id": 120091, "time": "2008-08-26T00:15:58Z", "bug_id": 45679, "creation_time": "2008-08-26T00:15:58Z", "tags": [], "is_private": false}, {"count": 7, "attachment_id": null, "creator": "bojan@rexursive.com", "text": "That's easy. Just send an e-mail to APR devel list, describe the problem and point out that you're not sure if the prefix stripping needs to be kept for some historical reason or not. I honestly don't know - I haven't been involved with APR that long - but there are people on the list that are bound to know.\n\nBTW, the code of Apache 1.3.x also needs to be fixed.", "id": 120092, "time": "2008-08-26T00:27:17Z", "bug_id": 45679, "creation_time": "2008-08-26T00:27:17Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "bojan@rexursive.com", "attachment_id": null, "text": "Nobody objected to this, so it's now committed to the trunk, 1.3.x and 1.4.x.\n\nThanks for the patch!", "id": 123756, "time": "2009-01-04T18:21:02Z", "bug_id": 45679, "creation_time": "2009-01-04T18:21:02Z", "is_private": false}]
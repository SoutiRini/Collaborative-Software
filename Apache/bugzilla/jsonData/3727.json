[{"count": 0, "tags": [], "creator": "tom.sprenger@adnovum.com", "attachment_id": null, "text": "When a servlet is called using a RequestDispatcher - the dispatcher is received\nby calling getRequestDispatcher() of ServletRequest and servlet to call is\naddressed by its class name - it mixes up its path information stored in the\nrequet's attribute fields.\n\nThe servlet is basically called by\n\ndisp = req.getRequestDispatcher(\"/servlet/appsvtest.server.AppSvTestServlet\");\ndisp.forward(req, resp);\n\nThe attribute fields of the called servlet contain the following values after\nthe forward call.\n\n-------------------------------------------------------------------------------\nAttribute: javax.servlet.include.path_info\nValue:     /servlet/ch.nevis.appsvtest.server.AppSvTestServlet\n-------------------------------------------------------------------------------\nAttribute: javax.servlet.include.servlet_path\nValue:     [empty string]\n-------------------------------------------------------------------------------\n\nBy my understanding the servlet path should instead point to the servlet class\nand the path info should contain an empty string, because there is no additional\ninformation after the name of the servlet class.", "id": 5778, "time": "2001-09-19T11:38:55Z", "bug_id": 3727, "creation_time": "2001-09-19T11:38:55Z", "is_private": false}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "attachment_id": null, "text": "AFAIK forward() doesn't change any attributes. The only possible bug is that \nwe set path_info attribute - but I can't reproduce that. Please include code\nto reproduce it ( are you forwarding from an included servlet ? ) ", "id": 5790, "time": "2001-09-19T16:32:07Z", "bug_id": 3727, "creation_time": "2001-09-19T16:32:07Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 3727, "text": "My fault! What the forward() call concerns you're right. It does not modify any\nattributes. I actually meant an include() call (a bad copy paste error in my\nprevious description, sorry). I rechecked the behavior with a very simple\nservlet that recursively includes itself exactely once. The code looks like:\n\nimport java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic final class SnoopIncluderServlet extends HttpServlet {\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, java.io.IOException {\n\n        if(req.getAttribute(\"hop\") == null) {\n            req.setAttribute(\"hop\", \"true\");\n\n            RequestDispatcher disp = null;\n            disp = getServletContext().getRequestDispatcher(\"/servlet/\" +\ngetClass().getName());\n            resp.setContentType(\"text/plain\");\n            disp.include(req, resp);\n        }\n        else {\n            PrintWriter out = resp.getWriter();\n            out.println(\"request attributes\");\n            java.util.Enumeration attrs = req.getAttributeNames();\n            while (attrs.hasMoreElements()) {\n                String attr = (String) attrs.nextElement();\n                out.println(attr + \" = \" + req.getAttribute(attr));\n            }\n        }\n    }\n}\n\nThe corrsponding web.xml file is:\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n<!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application\n2.2//EN\" \"http://java.sun.com/j2ee/dtds/web-app_2.2.dtd\">\n\n<web-app>\n    <servlet>\n      <servlet-name>\n         SnoopIncluder\n      </servlet-name>\n      <servlet-class>\n         SnoopIncluderServlet\n      </servlet-class>\n      <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>\n           SnoopIncluder\n        </servlet-name>\n        <url-pattern>\n            /\n        </url-pattern>\n    </servlet-mapping>\n    <servlet-mapping>\n        <servlet-name>\n           SnoopIncluder\n        </servlet-name>\n        <url-pattern>\n            /*\n        </url-pattern>\n    </servlet-mapping>\n</web-app>\n\nThe result I get after setting up the context in Tomcat's config files:\n\njavax.servlet.include.path_info = /servlet/SnoopIncluderServlet\njavax.servlet.include.servlet_path =\njavax.servlet.include.context_path = /appsvtest\njavax.servlet.include.request_uri = /appsvtest/servlet/SnoopIncluderServlet\nhop = true\n\nAs you can see the Tomcat in fact switches the values of the path info and the\nservlet path.\n\nParadoxically this behavior dispears by adding another (dummy) url mapping to\nthe web.xml file, e.g.:\n\n    <servlet-mapping>\n        <servlet-name>\n           SnoopIncluder\n        </servlet-name>\n        <url-pattern>\n            /foobar/*\n        </url-pattern>\n    </servlet-mapping>\n\nWe now get the following output from Tomcat:\n\njavax.servlet.include.servlet_path = /servlet/SnoopIncluderServlet\njavax.servlet.include.context_path = /appsvtest\njavax.servlet.include.request_uri = /appsvtest/servlet/SnoopIncluderServlet\nhop = true\n\n\nAs further tests have shown Tomcat 3.2.3 behaves very similar.\n", "id": 5855, "time": "2001-09-20T15:14:08Z", "creator": "tom.sprenger@adnovum.com", "creation_time": "2001-09-20T15:14:08Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 3727, "text": "Since you have a servlet-mapping for /*, Tomcat's values are exactly what you \nwould expect them to be.", "id": 5862, "time": "2001-09-20T17:53:29Z", "creator": "william.barker@wilshire.com", "creation_time": "2001-09-20T17:53:29Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "tom.sprenger@adnovum.com", "is_private": false, "id": 5881, "attachment_id": null, "bug_id": 3727, "creation_time": "2001-09-21T09:23:12Z", "time": "2001-09-21T09:23:12Z", "text": "But then, why do the values change, when we ADD a dummy url mapping (e.g.\n'/foobar/*') in the test-application's web.xml file? Adding, another url mapping\nshouldn't change the behavior of the servlet engine in this concrete case!\nDid you run the sample code from above?"}, {"count": 5, "tags": [], "text": "All of your tests work for me.  That is that the servlet_path is empty and \neverything is in the path_info just like it should be.  The only way that I \ndidn't get it was when I put a typo in the web.xml file by mistake, and Tomcat \nadded the context anyway but without mappings.  While that might be considered \na bug, the servlet_path and path_info were correct for the context \nconfiguration.", "is_private": false, "bug_id": 3727, "id": 5889, "time": "2001-09-21T11:41:59Z", "creator": "william.barker@wilshire.com", "creation_time": "2001-09-21T11:41:59Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "tom.sprenger@adnovum.com", "text": "Your remarks are corrct for the path_info and servet_path fields read from the\nServletContext object of a running servlet. In the case where the url mapping\n'/*' matches, the servlet-path will be empty and the path_info will contain the\npart after the context path up to the request parameters.\n\nHowever, the problem I have reported concerns the path_info and servet_path\nfields stored as request attributes after a servlet has been invoked by calling\nthe include method of a RequestDispatcher. The servlet is addressed by its class\nname, thus the url mappings specified in the web.xml file are not involved in\nthis case. According to the specification of servlet api 2.2 / Section 8.3.1,\nthe request attribut fields of an included servlet contain the path by which it\nwas invoked and not the original request paths! Thus, for the example given\nearlier the path_info should be 'null' and the servlet_path should hold the\nvalue '/servlet/SnoopIncluderServlet'.\n\nCould you please comment the second problem I have remarked: If you look at the\noutput of the given example code, why do the outputed values change, when a\ndummy entry is ADDED to the current web.xml config?", "id": 5898, "time": "2001-09-21T14:13:25Z", "bug_id": 3727, "creation_time": "2001-09-21T14:13:25Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 3727, "is_private": false, "text": "I still thing the bug is invalid - /servlet/* is not part of the spec, is just a tomcat-specific thing ( well, all containers support that - but it's still outside of the spec). The attributes are set during mapping - and it works fine for all 'normal' mapps. \n\nI can probably fix this ( by changing Invoker to adjust the paths ), but it's low priority, and you shouldn't use /servlet mappings anyway ( they're only for backward compatibility with a feature that was never specified AFAIK )", "id": 5904, "time": "2001-09-21T16:15:35Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-09-21T16:15:35Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Sorry to be so insistent, but for the area of servlet-based framework\ndevelopment neither the given mapping nor the use of the include mechanism\nare 'abnormal'. Any framework containing a central contoller servlet, which\nhandles all requests sent to the corresponding application context, has its url\nmapping set to '/' and '/*'.\n\nTo push the problem back into the scope of the servlet API specification I have\nmodified the test code to call the servlet using its name. Thus, the call looks\nlike:\n\nRequestDispatcher disp = null;\ndisp = getServletContext().getRequestDispatcher(\"/SnoopIncluder\");\n\nAnd, still, we get different results depending on the set of url mappings\npresent in the web.xml file. Having only '/' and '/*' defined the output\ncontains:\n\njavax.servlet.include.path_info = /SnoopIncluder\njavax.servlet.include.servlet_path = \njavax.servlet.include.context_path = /appsvtest\njavax.servlet.include.request_uri = /appsvtest/SnoopIncluder\n\nAdding a dummy url mapping, the values are set as it might be expected:  \n\njavax.servlet.include.servlet_path = /SnoopIncluder\njavax.servlet.include.context_path = /appsvtest\njavax.servlet.include.request_uri = /appsvtest/SnoopIncluder\n\nThe example shows, that the problem has nothing to to with the \"Invoker\". For me\nthis rather looks like a pattern matching problem for a given set of url\nmappings and a request URI.\n\n\n\n\n\n\n", "is_private": false, "bug_id": 3727, "id": 5907, "time": "2001-09-21T17:17:00Z", "creator": "tom.sprenger@adnovum.com", "creation_time": "2001-09-21T17:17:00Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 3727, "text": "*** Bug 3760 has been marked as a duplicate of this bug. ***", "id": 5937, "time": "2001-09-23T11:11:32Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-09-23T11:11:32Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 3727, "text": "My tests confirm what Bill Barker has said. If you have a mapping for \"/*\",\nrequests that don't otherwise match some other mapping will have the\nservlet_path empty and path_info non-empty.  See section 4.4 in the Servlet 2.3\nspec (this behavior didn't change from 2.2 and the Servlet 2.3 spec has some\ntypo's fixed that are present in the Servlet 2.2 spec). If you take either\nthe \"/lawn/*\" or \"/garden/*\" examples and replace the \"/lawn\" or \"/garden\"\nwith \"\", you will see that the servlet_path becomes blank.  Thus your statement\nin the last reopen is incorrect.  The servlet_path and path_info are not \nswitched.\n\nMore to come...", "id": 6075, "time": "2001-09-26T17:28:56Z", "creator": "Larry.Isaacs@sas.com", "creation_time": "2001-09-26T17:28:56Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "bug_id": 3727, "is_private": false, "id": 6076, "time": "2001-09-26T17:29:57Z", "creator": "Larry.Isaacs@sas.com", "creation_time": "2001-09-26T17:29:57Z", "tags": [], "text": "I tried adding the \"/foobar/*\" dummy mapping and behavior did not change as it\nshouldn't.  If you are still able to get altered behavior when adding a dummy\nmapping, please specify the dummy mapping and the URL you are using to invoke\nit. I'm assuming the \"/*\" mapping is still present along with the dummy mapping.\n\nAs Costin is indicating by marking 3760 as a duplicate, perhaps it was the\nrestarting of Tomcat, not the dummy mapping itself, that is responsible for\nthe changing behavior in your test case.  I don't see the changing behavior,\nbut I may not be duplicating your test case exactly. As a result, we would need\nto know your test case in exact detail.  Thanks.\n"}, {"count": 12, "attachment_id": null, "bug_id": 3727, "is_private": false, "id": 6098, "time": "2001-09-27T04:32:56Z", "creator": "sebastian.kanthak@muehlheim.de", "creation_time": "2001-09-27T04:32:56Z", "tags": [], "text": "Hi, as you requested, here's a short description of my test setup:\n\n1) When you don't have any mapping at all in your web.xml, but use the\n/servlet/classname syntax, path_info gets lost on the first forwarding request,\nbecause InvokerInterceptor hasn't set up the mapping yet.\n\n2) When you have a /foo/bar mapping (without \"*\"), path_info gets lost after\nforwarding on every request.\n\nI confirmed this with Tomcat 3.2.3. I don't know, if it is fixed in 3.3b2. In my\noriginal bug report, there is a detailed description of the bug and a possible fix.\n\nciao Sebastian\n"}, {"count": 13, "tags": [], "text": "In the second case - you shouldn't see any pathinfo at all, and the mapping should fail - since /a/b doesnt match /a/b/c.\n\nIn the first - it may be a bug in Invoker, I'll try to look into it. Invoker is not specified in any spec, and you should use web.xml mapping for anything but experiments. I'll try to fix this part for 3.3 or 3.3.1. \n\n2 again - I need a web.xml and servlet and what output you get, without this I can't start.", "is_private": false, "bug_id": 3727, "id": 6203, "time": "2001-09-29T07:49:36Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-09-29T07:49:36Z", "attachment_id": null}, {"text": "Reopening to change resolution", "tags": [], "bug_id": 3727, "is_private": false, "count": 14, "id": 9720, "time": "2002-01-17T20:46:18Z", "creator": "Larry.Isaacs@sas.com", "creation_time": "2002-01-17T20:46:18Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "Larry.Isaacs@sas.com", "attachment_id": null, "is_private": false, "id": 9721, "time": "2002-01-17T20:50:32Z", "bug_id": 3727, "creation_time": "2002-01-17T20:50:32Z", "text": "I have run my tests again and I can't find any unexpected behavior in\nthe current Tomcat 3.3.1-dev.  Assuming there was a bug at some point, I'll\nmark it as FIXED.\n\nIf a problem still exists in the current Tomcat 3.3.x, please log a new bug\nand supply a test webapp and *exact* steps to reproduce.  If there is a bug,\nI can't tell what I should be doing differently to reproduce it.\n"}]
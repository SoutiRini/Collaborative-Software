[{"count": 0, "text": "After 2 days I've finally managed to get Tomcat 5.0.19/mod_jk2/JNI working with\nApache 2.0.48. This threw up a number of issues.\n\nFirstly, the connector documentation ought to be clearly linked off the main\nTomcat page. It's currently hidden under documentation and linked from a couple\nof other obscure places - since it's shipped as a separate module, and the\nconfiguration is rather specific, it ought to be easier to find the main JK page\nat http://jakarta.apache.org/tomcat/tomcat-4.1-doc/jk2/index.html. (And it would\nbe nice if that page was updated to reflect some of the new information in this\nreport.) Even once I'd found that page, getting back to it is too involved.\n\nSecond, although using the socket channel works fine in general, I couldn't get\nthe standalone mod_jk2 2.0.4 to work in JNI mode at all. I'm currently running a\nmod_jk2 compiled from the Tomcat 5.0.19 source archive, and have got that to\nwork, but switching to the precompiled jk2 fails with exactly the same\nconfiguration.\n\nThird, often error messages are put to the Apache log of the form \"[error]\nlb.service() worker failed 120000 for ajp13:jni\" or \"[error] mod_jk.handler()\nError connecting to tomcat 120000\". 120000 is the error value available at the\npoint in the code where those messages are logged. It is the value JK_ERR, which\nis defined as APR_OS_START_USEERR. (My apr_errno.h says this symbol is\ndeprecated and ought to be APR_OS_START_USERERR instead.) This seems to be the\nonly error code produced internally, so is totally useless for figuring out what\nwent wrong. It would be much better if at each point in the code where JK_ERR\nwas introduced, a clear statement of *why* was logged out. I had to do much\nchasing through the source to figure this out. Often the result is propagated\nthrough several layers and by the time a log statement is encountered the error\ncould have come from anywhere for any reason.\n\nFourth, the jk2 documentation is under the Tomcat 4.1 docs and hasn't been\nupdated for the 5.0 world. It recommends the following worker.jni config:\n\n# Define the parameters for the Java Virtual Machine\n[vm:]\nOPT=-Djava.class.path=${TOMCAT_HOME}/lib/tomcat-jni.jar;${TOMCAT_HOME}/lib/tomcat.jar\n...\n# JNI worker startup handler\n[worker.jni:onStartup]\nclass=org/apache/jk/apr/TomcatStarter\nARG=start\nstdout=${serverRoot}/logs/stdout.log\nstderr=${serverRoot}/logs/stderr.log\n\n# JNI worker shutdown handler\n[worker.jni:onShutdown]\nclass=org/apache/jk/apr/TomcatStarter\nARG=stop\n\nThis no longer works with 5.0.19: the jar files have moved/changed, and start\nand stop appear to be used to run a standalone Tomcat/Catalina instance, which\ncontinues until terminated. However the JNI channel expects the start request to\nreturn and marks itself \"starting\" until it does so. It only gets marked \"done\"\nthrough AprImpl.jkSetAttribute() on succesful return from the Catalina startup\nfunction, which never happens. As a result any requests fail with \"lb.service()\nworker failed 120000 for ajp13:jni\". In fact the ARG parameters should now read\n\"startd\" and \"stopd\" to run Catalina in the background.\n\nFifth, the whole option setting system is a little strange. The placement of\ncolons or dots in the option name seems haphazard, and I was often uncertain\nwhether I'd managed to direct a value to the right component, even if no error\nhad been produced. This was compounded by mod_jk2 logging JK_LOG_DEBUG_LEVEL\nmessages at APLOG_DEBUG to Apache. Meaning I can ramp up my JK logging level as\nmuch as I like but won't see anything unless I also increase my Apache log\nlevel. I think it would be better to log at APLOG_NOTICE, or make the output\nlevel configurable, so there is only one point of control. Regardless, this\nshould be clearly documented. It's quite disheartening to be making changes and\nhaving them apparently ignored with no indication why. I'm also currently using\nJkSet to configure \"TOMCAT_HOME\" and \"CATALINA_HOME\", which appears to work (and\nthe values I specify get used as replacements for ${TOMCAT_HOME} in the\nremaining config) but spews an initial error out. There must be a way to do this\ncleanly without error.\n\nMy final working config is (all in httpd.conf, workers.properties is empty):\n\n<IfModule mod_jk2.c>\n\n  JkSet shm.info \"Scoreboard. Requried for reconfiguration and status with\nmultiprocess servers.\"\n  JkSet shm.file \"D:/Program Files/Apache Group/Apache2/logs/jk2.shm\"\n  JkSet shm.size 1048576\n  \n  JkSet lb:lb.info \"a load balancer named lb\"\n\n  JkSet TOMCAT_HOME \"D:\\PROGRA~1\\APACHE~1\\TOMCAT~1.0\"\n  JkSet CATALINA_HOME \"D:\\PROGRA~1\\APACHE~1\\TOMCAT~1.0\"\n\n  JkSet channel.jni:jni.info \"The jni channel, used if tomcat is started inprocess\"\n    \n  JkSet vm:.info \"Parameters used to load a JVM in the server process\"\n  JkSet vm:.JVM \"D:/Program Files/Sun/AppServer/jdk/jre/bin/client/jvm.dll\"\n  JkSet vm:.OPT \"-Djava.endorsed.dirs=${TOMCAT_HOME}\\common\\endorsed\"\n  JkSet vm:.OPT \"-Xmx128M\"\n  JkSet vm:.OPT \"-Xrs\"\n  JkSet vm:.OPT\n\"-Djava.class.path=${TOMCAT_HOME};${TOMCAT_HOME}\\server\\lib\\tomcat-jni.jar;${TOMCAT_HOME}\\common\\lib\\jmx.jar;${TOMCAT_HOME}\\server\\lib\\commons-modeler.jar;${TOMCAT_HOME}\\bin\\bootstrap.jar\"\n  JkSet vm:.OPT \"-Dtomcat.home=${TOMCAT_HOME}\"\n  JkSet vm:.OPT \"-Dcatalina.home=${TOMCAT_HOME}\"\n  \n  JkSet worker.jni:onStartup.info \"Command to be executed by the VM on startup.\nThis one will start tomcat.\"\n  JkSet worker.jni:onStartup.class org/apache/jk/apr/TomcatStarter\n  JkSet worker.jni:onStartup.ARG startd\n  JkSet worker.jni:onStartup.stdout \"${serverRoot}/logs/stdout.log\"\n  JkSet worker.jni:onStartup.stderr \"${serverRoot}/logs/stderr.log\"\n  \n  JkSet worker.jni:onShutdown.info \"Command to be executed by the VM on\nshutdown. This one will stop tomcat.\"\n  JkSet worker.jni:onShutdown.class org/apache/jk/apr/TomcatStarter\n  JkSet worker.jni:onShutdown.ARG stopd\n  \n  JkSet status:.info \"Status worker, displays runtime information\"\n  \n  <Location /jkstatus>\n    JkUriSet group status:\n  </Location>\n\n  <Location /jsp-examples>\n    JkUriSet group lb:lb\n  </Location>\n  <Location /servlets-examples>\n    JkUriSet group lb:lb\n  </Location>\n</IfModule>\n\nOther points in the above:\n\n1) The classpath starts with an inital component which is never used. It seems\nthat the first component is interpreted as ${serverRoot}/<path>, causing the\nfirst jar file to be ignored as an invalid path. Later components are\ninterpreted correctly, hence the dummy component to protect the later ones.\n\n2) All the path values above are Win32 short filenames if the real component\ncontains a space. java.exe accepts paths containing spaces, as quoted strings,\non the command line, but apparently this doesn't work with mod_jk2 calling\njvm.dll. Using non-quoted short names (to eliminate spaces) does work though.\nEven quoting the short names breaks. Under Windows, paths can contain spaces -\nthis is a fact of the platform, and being told (as various HOWTOs have done) to\nrearrange you file system to appease software that can't deal with this is\nreally not appropriate. The software should be able to deal with it (java.exe\ncan, on the command-line, so I suspect the fault lies in mod_jk2 somewhere.) I'd\nalso point out that UNIX path names can contain spaces too - these need quoting\nor escaping, but they can and do exist. Software that can't deal is therefore\nbroken cross-platform, not just failing to implement a Win32 oddity.\n\n3) The OPT parameter is multi-valued, but when you look at the config under\n/jkstatus/, only the last value is shown. Concatenating them all onto one line\n\"-D... -D... -X... -X... -D...\" breaks mod_jk2 too. They ought to all be visible\n(again, it's confusing. It made me think for a while that it was just ignoring\nthe earlier values completely.) Multiple, space separated values in the same OPT\nvalue should also be supported.\n\n4) The jar files listed are the minimal set required to get the Bootstrap class\nloaded. Once that starts up it reconfigures the classpath to find all the rest\nof the stuff needed. Until that point you need to pass at least that set of jar\nfiles or you get NoClassDefFoundErrors. None of which are visible under mod_jk2\nuntil the system has started up sufficiently to replace System.out and\nSystem.err (I found them by running TomcatStarter under java.exe.) It might be\nnice to find a way of getting tomcat-jni to do a similar thing to Bootstrap so\nthat only that one jar file need be specified. At least I didn't have to specify\nevery single jar file in Tomcat, which would have made the config just horrible.\n\n5) I have 3 JREs installed. The default is a normal JRE. I want it to use the\nJDK, hence the JVM paramater. Sun's latest J2EE JDK apparently doesn't register\nitself in the same way as the JRE, but you still need a compiler to run JSP\npages, don't you?", "bug_id": 28003, "is_private": false, "id": 54787, "time": "2004-03-28T17:43:20Z", "creator": "jsapbz@kanargh.force9.co.uk", "creation_time": "2004-03-28T17:43:20Z", "tags": [], "attachment_id": null}, {"count": 1, "text": "Oh, and 6) /examples/ no longer exists. The two URIs /jsp-examples/ and\n/servlets-examples/ have replaced it.", "bug_id": 28003, "is_private": false, "id": 54788, "time": "2004-03-28T17:44:53Z", "creator": "jsapbz@kanargh.force9.co.uk", "creation_time": "2004-03-28T17:44:53Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 28003, "attachment_id": null, "is_private": false, "id": 54789, "time": "2004-03-28T17:57:26Z", "creator": "mturk@apache.org", "creation_time": "2004-03-28T17:57:26Z", "text": "\nJust a quick reply...\nYou are right, the JNI in 2.0.4 is quite unusable thought, and we didn't touch \nit for this release.\nSome of the reasons are like you said classname changes,\ndifferent dependencies, and the fact that it theroreticaly works on the single \nchild server, and those are only win and netware.\nIn general IMO the only place where JNI would be useful is in the\nembeded TC.\n\n\n"}, {"count": 3, "tags": [], "creator": "pr@webapp.de", "attachment_id": null, "is_private": false, "id": 54792, "time": "2004-03-28T19:23:17Z", "bug_id": 28003, "creation_time": "2004-03-28T19:23:17Z", "text": "Hello,\n\nyou must add your tools.jar to your classpath to compile jsp's\nOPT=-Djava.class.path=D:/java/j2sdk1.4.2_03/lib/tools.jar;C:/tomcat5/jakarta-tomcat-5/build/server/lib/tomcat-jni.jar;C:/tomcat5/jakarta-tomcat-5/bin/jmx.jar;C:/tomcat5/jakarta-tomcat-5/build/bin/bootstrap.jar\n\ns. working worker2.properties for Jk2.0.4 Tomcat 5.0.20 (CVS Head 10.3.2004)\nat\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=27167\n\nRegards\nPeter\n\nPS: why we can't really configure which JDK we w\u00e1n't use for JNI ?"}]
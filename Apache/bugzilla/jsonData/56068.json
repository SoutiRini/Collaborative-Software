[{"count": 0, "tags": [], "bug_id": 56068, "attachment_id": null, "id": 172710, "time": "2014-01-27T12:40:20Z", "creator": "marwan@gedeon.org", "creation_time": "2014-01-27T12:40:20Z", "is_private": false, "text": "I struggled for couple hours with this issue, here's how to replicate\non a server with hostname: dev.myserver.com, create 2 VirtualHost entries:\n\n<VirtualHost *:80 *:443>\n  ServerName dev.myserver.com\n  ServerAlias dev2.myserver.com\n</VirtualHost>\n\n<VirtualHost *:80 *:443>\n  ServerName dev3.myserver.com\n</VirtualHost>\n\nall 3 hosts dev.myserver.com dev2.myserver.com dev3.myserver.com map to same IP address.\nA wildcard certificate with CN=*.myserver.com is installed on the server.\n\nInside httpd.conf main section, the ServerName entry is commented and UseCanonicalName is Off\n\nIf you try to hit the server over HTTP, using http://dev.myserver.com or http://dev2.myserver.com or http://dev3.myserver.com , it goes into the correct VirtualHost.\nHowever\nIf you try to hit the server over HTTPS, using https://dev.myserver.com or https://dev2.myserver.com or https://dev3.myserver.com, only https://dev2.myserver.om and https://dev3.myserver.com will enter inside the VirtualHost, the first will match against the main entry in httpd.conf and try to retrieve content from the default directory, not from the VirtualHost entry.\n\nso the problem is that over HTTP, the VirtualHost entry with ServerName being the same as the hostname is honored however over HTTPS, the VirtualHost entry with ServerName same as the hostname is ignored.\n\nRunning SSL with LogLevel=debug, we can see effectively that even without the VirtualHost entry with ServerName equal to host name, the call to https://dev.myserver.com will show that it matches against VirtualHost, although it only matched again the main section of httpd.conf"}, {"count": 1, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "(In reply to Marwan Gedeon from comment #0)\n> I struggled for couple hours with this issue, here's how to replicate\n> on a server with hostname: dev.myserver.com, create 2 VirtualHost entries:\n> \n> <VirtualHost *:80 *:443>\n>   ServerName dev.myserver.com\n>   ServerAlias dev2.myserver.com\n> </VirtualHost>\n> \n> <VirtualHost *:80 *:443>\n>   ServerName dev3.myserver.com\n> </VirtualHost>\n\nSeems like there must be more to your config, like SSL directives in another *:443 virtualhost.", "id": 172711, "time": "2014-01-27T13:38:41Z", "bug_id": 56068, "creation_time": "2014-01-27T13:38:41Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56068, "text": "There are 2 locations with uncommented <VirtualHost> tags. The entries in httpd.conf are by default commented\n\nvhosts.conf:\n\nNameVirtualHost *:80\nNameVirtualHost  *:443\n\n<VirtualHost *:80 *:443>\n  ServerName dev.myserver.com\n  ServerAlias dev2.myserver.com\n  DocumentRoot /var/www/docs/dev2.sakkera.com\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript text/css\n  RewriteEngine On\n  RewriteCond %{HTTPS} off\n  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}\n\n  <Directory \"/var/www/docs/dev.myserver.com\">\n    AuthType Basic\n    AuthName \"Password Required\"\n    AuthUserFile /etc/httpd/passwords/mypass\n    Require valid-user\n    AllowOverride All\n  </Directory>\n  ErrorLog /var/log/httpd/dev.myserver.com-error_log\n  CustomLog /var/log/httpd/dev.myserver.com-access_log combined\n</VirtualHost>\n\n<VirtualHost *:80 *:443>\n  ServerName dev2.sakkera.com\n  DocumentRoot /var/www/docs/dev3.sakkera.com\n  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript text/css\n  RewriteEngine On\n  RewriteCond %{HTTPS} off\n  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}\n\n  <Directory \"/var/www/docs/dev3.sakkera.com\">\n    AuthType Basic\n    AuthName \"Password Required\"\n    AuthUserFile /etc/httpd/passwords/mypass\n    Require valid-user\n    AllowOverride All\n  </Directory>\n  ErrorLog /var/log/httpd/dev3.sakkera.com-error_log\n  CustomLog /var/log/httpd/dev3.sakkera.com-access_log combined\n</VirtualHost>\n\n\n\nssl.conf:\n\n#\n# This is the Apache server configuration file providing SSL support.\n# It contains the configuration directives to instruct the server how to\n# serve pages over an https connection. For detailing information about these\n# directives see <URL:http://httpd.apache.org/docs/2.2/mod/mod_ssl.html>\n#\n# Do NOT simply read the instructions in here without understanding\n# what they do.  They're here only as hints or reminders.  If you are unsure\n# consult the online docs. You have been warned.\n#\n\nLoadModule ssl_module modules/mod_ssl.so\n\n#\n# When we also provide SSL we have to listen to the\n# the HTTPS port in addition.\n#\nListen 443\n\n##\n##  SSL Global Context\n##\n##  All SSL configuration in this context applies both to\n##  the main server and all SSL-enabled virtual hosts.\n##\n\n#   Pass Phrase Dialog:\n#   Configure the pass phrase gathering process.\n#   The filtering dialog program (`builtin' is a internal\n#   terminal dialog) has to provide the pass phrase on stdout.\nSSLPassPhraseDialog  builtin\n\n#   Inter-Process Session Cache:\n#   Configure the SSL Session Cache: First the mechanism\n#   to use and second the expiring timeout (in seconds).\nSSLSessionCache         shmcb:/var/cache/mod_ssl/scache(512000)\nSSLSessionCacheTimeout  300\n\n#   Semaphore:\n#   Configure the path to the mutual exclusion semaphore the\n#   SSL engine uses internally for inter-process synchronization.\nSSLMutex default\n\n#   Pseudo Random Number Generator (PRNG):\n#   Configure one or more sources to seed the PRNG of the\n#   SSL library. The seed data should be of good random quality.\n#   WARNING! On some platforms /dev/random blocks if not enough entropy\n#   is available. This means you then cannot use the /dev/random device\n#   because it would lead to very long connection times (as long as\n#   it requires to make more entropy available). But usually those\n#   platforms additionally provide a /dev/urandom device which doesn't\n#   block. So, if available, use this one instead. Read the mod_ssl User\n#   Manual for more details.\nSSLRandomSeed startup file:/dev/urandom  256\nSSLRandomSeed connect builtin\n#SSLRandomSeed startup file:/dev/random  512\n#SSLRandomSeed connect file:/dev/random  512\n#SSLRandomSeed connect file:/dev/urandom 512\n\n#\n# Use \"SSLCryptoDevice\" to enable any supported hardware\n# accelerators. Use \"openssl engine -v\" to list supported\n# engine names.  NOTE: If you enable an accelerator and the\n# server does not start, consult the error logs and ensure\n# your accelerator is functioning properly.\n#\nSSLCryptoDevice builtin\n#SSLCryptoDevice ubsec\n\n##\n## SSL Virtual Host Context\n##\n\n<VirtualHost _default_:443>\n\n# General setup for the virtual host, inherited from global configuration\n#DocumentRoot \"/var/www/html\"\n#ServerName www.example.com:443\n\n# Use separate log files for the SSL virtual host; note that LogLevel\n# is not inherited from httpd.conf.\nErrorLog logs/ssl_error_log\nTransferLog logs/ssl_access_log\nLogLevel warn\n\n#   SSL Engine Switch:\n#   Enable/Disable SSL for this virtual host.\nSSLEngine on\n\n#   SSL Protocol support:\n# List the enable protocol levels with which clients will be able to\n# connect.  Disable SSLv2 access by default:\nSSLProtocol all -SSLv2\n\n#   SSL Cipher Suite:\n# List the ciphers that the client is permitted to negotiate.\n# See the mod_ssl documentation for a complete list.\nSSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW\n\n#   Server Certificate:\n# Point SSLCertificateFile at a PEM encoded certificate.  If\n# the certificate is encrypted, then you will be prompted for a\n# pass phrase.  Note that a kill -HUP will prompt again.  A new\n# certificate can be generated using the genkey(1) command.\nSSLCertificateFile /etc/httpd/ssl/STAR_myserver_com.crt\n\n#   Server Private Key:\n#   If the key is not combined with the certificate, use this\n#   directive to point at the key file.  Keep in mind that if\n#   you've both a RSA and a DSA private key you can configure\n#   both in parallel (to also allow the use of DSA ciphers, etc.)\nSSLCertificateKeyFile /etc/httpd/ssl/STAR_myserver_com.key\n\n#   Server Certificate Chain:\n#   Point SSLCertificateChainFile at a file containing the\n#   concatenation of PEM encoded CA certificates which form the\n#   certificate chain for the server certificate. Alternatively\n#   the referenced file can be the same as SSLCertificateFile\n#   when the CA certificates are directly appended to the server\n#   certificate for convinience.\nSSLCertificateChainFile /etc/httpd/ssl/mycachain.crt\n\n#   Certificate Authority (CA):\n#   Set the CA certificate verification path where to find CA\n#   certificates for client authentication or alternatively one\n#   huge file containing all of them (file must be PEM encoded)\n#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt\n\n#   Client Authentication (Type):\n#   Client certificate verification type and depth.  Types are\n#   none, optional, require and optional_no_ca.  Depth is a\n#   number which specifies how deeply to verify the certificate\n#   issuer chain before deciding the certificate is not valid.\n#SSLVerifyClient require\n#SSLVerifyDepth  10\n\n#   Access Control:\n#   With SSLRequire you can do per-directory access control based\n#   on arbitrary complex boolean expressions containing server\n#   variable checks and other lookup directives.  The syntax is a\n#   mixture between C and Perl.  See the mod_ssl documentation\n#   for more details.\n#<Location />\n#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \\\n#            and %{SSL_CLIENT_S_DN_O} eq \"Snake Oil, Ltd.\" \\\n#            and %{SSL_CLIENT_S_DN_OU} in {\"Staff\", \"CA\", \"Dev\"} \\\n#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \\\n#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \\\n#           or %{REMOTE_ADDR} =~ m/^192\\.76\\.162\\.[0-9]+$/\n#</Location>\n\n#   SSL Engine Options:\n#   Set various options for the SSL engine.\n#   o FakeBasicAuth:\n#     Translate the client X.509 into a Basic Authorisation.  This means that\n#     the standard Auth/DBMAuth methods can be used for access control.  The\n#     user name is the `one line' version of the client's X.509 certificate.\n#     Note that no password is obtained from the user. Every entry in the user\n#     file needs this password: `xxj31ZMTZzkVA'.\n#   o ExportCertData:\n#     This exports two additional environment variables: SSL_CLIENT_CERT and\n#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the\n#     server (always existing) and the client (only existing when client\n#     authentication is used). This can be used to import the certificates\n#     into CGI scripts.\n#   o StdEnvVars:\n#     This exports the standard SSL/TLS related `SSL_*' environment variables.\n#     Per default this exportation is switched off for performance reasons,\n#     because the extraction step is an expensive operation and is usually\n#     useless for serving static content. So one usually enables the\n#     exportation for CGI and SSI requests only.\n#   o StrictRequire:\n#     This denies access when \"SSLRequireSSL\" or \"SSLRequire\" applied even\n#     under a \"Satisfy any\" situation, i.e. when it applies access is denied\n#     and no other module can change it.\n#   o OptRenegotiate:\n#     This enables optimized SSL connection renegotiation handling when SSL\n#     directives are used in per-directory context.\n#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire\n<Files ~ \"\\.(cgi|shtml|phtml|php3?)$\">\n    SSLOptions +StdEnvVars\n</Files>\n<Directory \"/var/www/cgi-bin\">\n    SSLOptions +StdEnvVars\n</Directory>\n\n#   SSL Protocol Adjustments:\n#   The safe and default but still SSL/TLS standard compliant shutdown\n#   approach is that mod_ssl sends the close notify alert but doesn't wait for\n#   the close notify alert from client. When you need a different shutdown\n#   approach you can use one of the following variables:\n#   o ssl-unclean-shutdown:\n#     This forces an unclean shutdown when the connection is closed, i.e. no\n#     SSL close notify alert is send or allowed to received.  This violates\n#     the SSL/TLS standard but is needed for some brain-dead browsers. Use\n#     this when you receive I/O errors because of the standard approach where\n#     mod_ssl sends the close notify alert.\n#   o ssl-accurate-shutdown:\n#     This forces an accurate shutdown when the connection is closed, i.e. a\n#     SSL close notify alert is send and mod_ssl waits for the close notify\n#     alert of the client. This is 100% SSL/TLS standard compliant, but in\n#     practice often causes hanging connections with brain-dead browsers. Use\n#     this only for browsers where you know that their SSL implementation\n#     works correctly.\n#   Notice: Most problems of broken clients are also related to the HTTP\n#   keep-alive facility, so you usually additionally want to disable\n#   keep-alive for those clients, too. Use variable \"nokeepalive\" for this.\n#   Similarly, one has to force some clients to use HTTP/1.0 to workaround\n#   their broken HTTP/1.1 implementation. Use variables \"downgrade-1.0\" and\n#   \"force-response-1.0\" for this.\nSetEnvIf User-Agent \".*MSIE.*\" \\\n         nokeepalive ssl-unclean-shutdown \\\n         downgrade-1.0 force-response-1.0\n\n#   Per-Server Logging:\n#   The home of a custom SSL log file. Use this when you want a\n#   compact non-error SSL logfile on a virtual host basis.\nCustomLog logs/ssl_request_log \\\n          \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\"\n\n</VirtualHost>", "id": 172717, "attachment_id": null, "creator": "marwan@gedeon.org", "creation_time": "2014-01-28T00:15:32Z", "time": "2014-01-28T00:15:32Z", "is_private": false}, {"count": 3, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "text": "Your failing URL from the first post does not match the servername in any of your virtual hosts, so it's handled by the default virtual host (first defined for the set of NVH'es) which does not define a separate DocumentRoot.", "id": 172718, "time": "2014-01-28T00:26:45Z", "bug_id": 56068, "creation_time": "2014-01-28T00:26:45Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 56068, "attachment_id": null, "id": 172719, "time": "2014-01-28T00:58:05Z", "creator": "marwan@gedeon.org", "creation_time": "2014-01-28T00:58:05Z", "is_private": false, "text": "Sorry, I'm manually renaming the NameServer values for confidentiality reasons, while posting the bug, It seems I haven't renamed them all together accordingly, that's why you're not seeing a match.\n\nLet me build up my sample again in few words:\n\nvhosts.conf:\n\nNameVirtualHost *:80\nNameVirtualHost  *:443\n\n<VirtualHost *:80 *:443>\n  ServerName dev.myserver.com\n  ServerAlias dev2.myserver.com\n</VirtualHost>\n\n<VirtualHost *:80 *:443>\n  ServerName dev3.myserver.com\n</VirtualHost>\n\nssl.conf:\n\n<VirtualHost _default_:443>\n#commented ServerName entry\n</VirtualHost>\n\nhttpd.conf:\n#commented VirtualHost entry\n\nMy assumption was the _default_ host in ssl.conf is only used for IP based virtual hosting, and I was expecting 'dev.myserver.com' to match within the VirtualHost tag indicated above, however it matched in the main section of httpd.conf. I would have to stress that the actual system hostname is 'dev.myserver.com'."}, {"count": 5, "attachment_id": null, "creator": "covener@gmail.com", "text": "> however it matched in the main section of\n> httpd.conf.\n\nHow can you tell it matched the base config rather than the port 443 vhost in\"ssl.conf\" that is probably loaded before \"vhosts.conf\" and has not overridden the document root?\n\nCan you show -S output and maybe demonstrate your symptom with 4 error log directives?", "id": 172720, "time": "2014-01-28T01:05:31Z", "bug_id": 56068, "creation_time": "2014-01-28T01:05:31Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 56068, "attachment_id": null, "id": 172724, "time": "2014-01-28T08:52:07Z", "creator": "marwan@gedeon.org", "creation_time": "2014-01-28T08:52:07Z", "is_private": false, "text": "You are right, it matched the entry in ssl.conf which took priority over vhosts.conf, but why? isn't _default_ which is present by default inside ssl.conf supposed to be used for default values that are not set in a specific <VirtualHost> ? I tried to replace  _default_ with * and same result:\n\n\nVirtualHost configuration:\nwildcard NameVirtualHosts and _default_ servers:\n*:443                  is a NameVirtualHost\n         default server dev.myserver.com (/etc/httpd/conf.d/ssl.conf:74)\n         port 443 namevhost dev.myserver.com (/etc/httpd/conf.d/ssl.conf:74)\n         port 443 namevhost dev.myserver.com (/etc/httpd/conf.d/vhosts.conf:8)\n         port 443 namevhost dev2.myserver.com (/etc/httpd/conf.d/vhosts.conf:28)\n         port 443 namevhost qa.myserver.com (/etc/httpd/conf.d/vhosts.conf:47)\n*:80                   is a NameVirtualHost\n         default server dev.myserver.com (/etc/httpd/conf.d/vhosts.conf:8)\n         port 80 namevhost dev.myserver.com (/etc/httpd/conf.d/vhosts.conf:8)\n         port 80 namevhost dev2.myserver.com (/etc/httpd/conf.d/vhosts.conf:28)\n         port 80 namevhost qa.myserver.com (/etc/httpd/conf.d/vhosts.conf:47)\nSyntax OK\n\nYou said 'ssl.conf' loaded before 'vhosts.conf' which could explain the problem, but shouldn't the behavior be that matching happens with the closest match?  \n\nHere's something which makes me uncertain about the behavior of _default_: Currently I only have one <VirtualHost _default_:443> Entry in ssl.conf which includes the SSL specific configuration (certificate location, etc.) If this entry was not used by all <VirtualHost dev?.myserver.com:443> entries inside vhosts.conf, then how come SSL is working correctly for all of them? This made me think that the <VirtualHost _default_:443> will be used to provide default values that are not defined in the other <VirtualHost> entries, and it's the desirable effect, to avoid having to put the same details in each <VirtualHost>, a little bit like the main configuration which is used to provide default values when not set in the specific <VirtualHost> entry for HTTP."}, {"count": 7, "tags": [], "bug_id": 56068, "text": "1) _default_ and * are the same at runtime.\n2) vhost resolution works like this:\n\n* When the connection arrives, the best match for ip:host is selected. If that best match occurs in multiple vhosts, the first one listed is used\n* Connection level stuff like SSL occurs, and the server context is that ip-based vhosts.\n* When the host header is ready, if the best match was listed in a NameVirtualHost, apache switches to the best name-based match.\n\nIOW, IP and NVH are not peers of eachother. IP-based resolution happens first, and name-based resolution happens after that first selection.\n\nThat's what allows you to have 80+443 in one virtual host, since another VH is used for the handshake.", "id": 172731, "attachment_id": null, "creator": "covener@gmail.com", "creation_time": "2014-01-28T12:15:08Z", "time": "2014-01-28T12:15:08Z", "is_private": false}]
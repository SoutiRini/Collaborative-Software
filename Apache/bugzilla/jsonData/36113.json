[{"count": 0, "tags": [], "text": "When there is a primitive data type (like int or boolean) contained in an \nobject which is stored in a session, a persistence will fail when reading back \nthe session data.\nThis is caused by a bug in org.apache.catalina.util.CustomObjectInputStream, \nwhich does not care for primitive types, as ObjectInputstream is doing since \nJDK1.4\nThe following code is copied from the SUN Java sources and works correctly:\n    /** table mapping primitive type names to corresponding class objects */\n    private static final HashMap primClasses = new HashMap(8, 1.0F);\n    static {\n            primClasses.put(\"boolean\", boolean.class);\n            primClasses.put(\"byte\", byte.class);\n            primClasses.put(\"char\", char.class);\n            primClasses.put(\"short\", short.class);\n            primClasses.put(\"int\", int.class);\n            primClasses.put(\"long\", long.class);\n            primClasses.put(\"float\", float.class);\n            primClasses.put(\"double\", double.class);\n            primClasses.put(\"void\", void.class);\n    } \n\n    public Class resolveClass(ObjectStreamClass classDesc)\n        throws ClassNotFoundException, IOException {\n        try {\n          return Class.forName(classDesc.getName(), false, classLoader);\n        }\n        catch (ClassNotFoundException ex) {\n          Class cl = (Class) primClasses.get(classDesc.getName ());\n          if (cl != null) {\n             return cl;\n          } else {\n             throw ex;\n          }\n        }\n    } \n\nThis leads to the ability to store any primitive type (like a castor object) \ninside a persisted session. Maybe somebody can commit this to the tomcat trunk.\n\nThanks, Marcus", "is_private": false, "id": 78330, "creator": "marcus.haarmann@midoco.de", "time": "2005-08-10T10:51:52Z", "bug_id": 36113, "creation_time": "2005-08-10T10:51:52Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "This works very well for me. Please provide a ready to test WAR file.", "is_private": false, "id": 78626, "creator": "remm@apache.org", "time": "2005-08-18T15:11:02Z", "bug_id": 36113, "creation_time": "2005-08-18T15:11:02Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 36113, "text": "I already tried that code, patching a copy of tomcat myself and this works.\nSo this can be treated as solved.\nJust one remark:\nThe same bug is in the cluster package, class ReplicationStream. Whenever a \nprimitive type is in the session (such as a castor object), an exception is \ngenerated. Maybe you should fix this inside that class also.", "id": 78630, "time": "2005-08-18T15:21:00Z", "creator": "marcus.haarmann@midoco.de", "creation_time": "2005-08-18T15:21:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 36113, "is_private": false, "id": 78632, "time": "2005-08-18T15:27:53Z", "creator": "remm@apache.org", "creation_time": "2005-08-18T15:27:53Z", "tags": [], "text": "I asked for a test case, not further comments, so please don't reopen the report\nwithout a test WAR. This works for me without any changes."}, {"count": 4, "tags": [], "bug_id": 36113, "text": "Hi, I tried to reproduce the problem using a simple program but I did fail \n(boolean seems to get converted to java.lang.Boolean in any case I tried).\nThe problem is occurring using a third party library and I am not sure what \nthese guys are doing to contain primitive types in the session. This \napplication does not work without a very big environment, so it is not possible \nfor me to provide a war to test the behaviour.\n\nThe proble also occurs in Replication, where the same bug exists.\n\nSee the stack trace (from 5.5.9, builtin in JBoss):\n08.09.2005 09:46:59.724 titan ERROR - ClassNotFoundException while loading \npersisted sessions: java.lang.ClassNotFoundException: boolean\njava.lang.ClassNotFoundException: boolean\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1332)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass\n(WebappClassLoader.java:1181)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:242)\n\tat org.apache.catalina.util.CustomObjectInputStream.resolveClass\n(CustomObjectInputStream.java:73)\n\tat java.io.ObjectInputStream.readNonProxyDesc\n(ObjectInputStream.java:1538)\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1460)\n\tat java.io.ObjectInputStream.readClass(ObjectInputStream.java:1427)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1282)\n\tat java.io.ObjectInputStream.defaultReadFields\n(ObjectInputStream.java:1912)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1836)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:339)\n\tat java.util.LinkedList.readObject(LinkedList.java:776)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat java.io.ObjectStreamClass.invokeReadObject\n(ObjectStreamClass.java:919)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1813)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.defaultReadFields\n(ObjectInputStream.java:1912)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1836)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:339)\n\tat java.util.ArrayList.readObject(ArrayList.java:587)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat java.io.ObjectStreamClass.invokeReadObject\n(ObjectStreamClass.java:919)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1813)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.defaultReadFields\n(ObjectInputStream.java:1912)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1836)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:339)\n\tat java.util.ArrayList.readObject(ArrayList.java:587)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat java.io.ObjectStreamClass.invokeReadObject\n(ObjectStreamClass.java:919)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1813)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.defaultReadFields\n(ObjectInputStream.java:1912)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1836)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.defaultReadFields\n(ObjectInputStream.java:1912)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1836)\n\tat java.io.ObjectInputStream.readOrdinaryObject\n(ObjectInputStream.java:1713)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:339)\n\tat java.util.ArrayList.readObject(ArrayList.java:587)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25) ", "id": 79627, "time": "2005-09-08T10:32:27Z", "creator": "marcus.haarmann@midoco.de", "creation_time": "2005-09-08T10:32:27Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 36113, "text": "(In reply to comment #4)\n> Hi, I tried to reproduce the problem using a simple program but I did fail \n> (boolean seems to get converted to java.lang.Boolean in any case I tried).\n> The problem is occurring using a third party library and I am not sure what \n> these guys are doing to contain primitive types in the session. This \n> application does not work without a very big environment, so it is not possible \n> for me to provide a war to test the behaviour.\n> \n> The proble also occurs in Replication, where the same bug exists.\n\nOk, I understand (to some extent: it's weird). One of the issues is that I don't\nfeel confident cut & pasting Sun's code.\n\nCan you test to see if this change works fine with your webapp:\n\n    public Class resolveClass(ObjectStreamClass classDesc)\n        throws ClassNotFoundException, IOException {\n        try {\n         return Class.forName(classDesc.getName(), false, classLoader);\n        } catch (ClassNotFoundException e) {\n         return super.resolveClass(classDesc);\n        }\n    }\n\n?\n", "id": 79638, "time": "2005-09-08T13:27:09Z", "creator": "remm@apache.org", "creation_time": "2005-09-08T13:27:09Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "marcus.haarmann@midoco.de", "is_private": false, "text": "Hi, I tried your code and it works correctly for session persistence in my case.\nAlthough my approch would be faster (because only one exception is caught until \nthe result is returned in case of a primitive type), I agree to better not cut \nand paste code (this is object orientated programming, isn't it ?).\nKeep in mind to also change the ReplicationStream class in clustering.\nSomething like:\npublic Class resolveClass(ObjectStreamClass classDesc)\n        throws ClassNotFoundException, IOException {\n        String name = classDesc.getName();\n        boolean tryRepFirst = name.startsWith(\"org.apache.catalina.cluster\");\n        try {\n          try\n          {\n            if ( tryRepFirst ) return findReplicationClass(name);\n            else return findWebappClass(name);\n          }\n          catch ( Exception x )\n          {\n            if ( tryRepFirst ) return findWebappClass(name);\n            else return findReplicationClass(name);\n          }\n        }\n        catch (ClassNotFoundException e)\n        {\n          return super.resolveClass (classDesc);\n        }\n    }\n     \nThanks, Marcus", "id": 79651, "time": "2005-09-08T15:30:27Z", "bug_id": 36113, "creation_time": "2005-09-08T15:30:27Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 36113, "text": "I have applied the proposed patch.", "id": 79666, "time": "2005-09-08T17:41:53Z", "creator": "remm@apache.org", "creation_time": "2005-09-08T17:41:53Z", "is_private": false, "attachment_id": null}]
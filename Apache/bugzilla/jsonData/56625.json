[{"count": 0, "attachment_id": null, "bug_id": 56625, "text": "The constructor for org.apache.poi.hssf.usermodel.HSSFWorkbook\n\npublic HSSFWorkbook(DirectoryNode directory, boolean preserveNodes) throws IOException \n\ncreates a DocumentInputStream instance, but never gets around to closing it.\n\nSo even though the input stream is garbage collected, the resource allocated by the OS to the JVM remains. This causes a \"Too many open files\" error eventually, after the ulimit for the user has been reached.\n\n<b>Environment Details :</b>\n\nJVM -> \njavac 1.6.0_31\n\nJRE ->\njava version \"1.6.0_31\"\nOpenJDK Runtime Environment (IcedTea6 1.13.3) (6b31-1.13.3-1ubuntu1~0.12.04.2)\nOpenJDK 64-Bit Server VM (build 23.25-b01, mixed mode)\n\n\n<b>Steps to reproduce :</b>\n\n1) Do an lsof -p <jvm process id> before reading the xls file\n\n2) Use code below : \n\nWorkbook workbook = WorkbookFactory.create(file);\n\nto get a workbook.\n\n3) Finish reading the xls file. Do a few operations on the workbook and then leave it to be garbage collected.\n\n4) Try and run a System.gc() to collect the input stream. Can monitor this using JProfiler.\n\n5) Do lsof -p <jvm process id>. The file is still visible in lsof :(\n\n\n\n<b>Possible fixes :</b>\n\nEmulate the behavior for \"java.io.FileInputStream\" by overriding finalize() method  in \"org.apache.poi.poifs.filesystem.DocumentInputStream\" .", "id": 175815, "time": "2014-06-15T13:19:01Z", "creator": "arbitdude007@gmail.com", "creation_time": "2014-06-15T13:19:01Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of bug 56537 ***", "is_private": false, "bug_id": 56625, "id": 175817, "time": "2014-06-15T15:26:40Z", "creator": "apache@gagravarr.org", "creation_time": "2014-06-15T15:26:40Z", "attachment_id": null}]
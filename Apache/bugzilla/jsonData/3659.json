[{"count": 0, "tags": [], "creator": "jacques.theodas@enron.com", "attachment_id": null, "text": "Whenever I try to parse an xml file with the code below, I get a \nSAXParseException. The exception is included below as well.\nI tried parsing many xml files that were verified to be well formed and the \nsame error always occurs. Therefore, I think it could be a bug.\nTo be sure, I used the SAXParser in the JAXP API and had no problems parsing \nthe same files.\n\n##############################################################################\nimport java.io.*;\nimport java.util.*;\n\nimport java.net.*;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.xerces.parsers.SAXParser;\n\npublic class TestParse {\n\tpublic TestParse() {\n\t}\n\n\tpublic static void main(String args[]){\n\t\tStringBuffer debugText =  new StringBuffer();\n\t\tString line = null;\n\t\tInputStream input = null;\n\t\ttry {\n\t\t\tSAXParser saxParser = new SAXParser();\n\t\t\tsaxParser.setContentHandler(new TestContentHandler());\n\t\t\tinput = ClassLoader.getSystemClassLoader\n().getResourceAsStream(\"myxmlfile.xml\");\n\t\t\tInputStreamReader inputReader = new InputStreamReader\n(input);\n\t\t\tBufferedReader buffReader = new BufferedReader\n(inputReader);\n\t\t\tline = buffReader.readLine();\n\t\t\tdo {\n\t\t\t\tSystem.out.println(line);\n\t\t\t\tline = buffReader.readLine();\n\t\t\t} while (line != null);\n\t\t\tInputSource source = new InputSource(input);\n\t\t\tsaxParser.parse(source);\n\t\t} catch (SAXException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tinput.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n##############################################################################\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.*;\n\npublic class TestContentHandler extends DefaultHandler {\n\n\tpublic TestContentHandler() {\n\n\t}\n\n    //===========================================================\n    // SAX DocumentHandler methods\n    //===========================================================\n\n\tpublic void startDocument() throws SAXException {\n\t\tSystem.out.println(\"startDocument()\");\n\t}\n\n\tpublic void endDocument() throws SAXException {\n\t\tSystem.out.println(\"endDocument()\");\n\t}\n\n\tpublic void startElement(String namespaceURI,\n                             String lName, // local name\n                             String qName, // qualified name\n                             Attributes attrs) throws SAXException {\n\t\tSystem.out.println(\"startElement()\");\n\t}\n\n\tpublic void endElement(String namespaceURI,\n                           String sName, // simple name\n                           String qName  // qualified name\n                          ) throws SAXException {\n\t  System.out.println(\"endElement\");\n\t}\n\n\tpublic void characters(char buf[], int offset, int len) throws \nSAXException {\n\t\tString s = new String(buf, offset, len);\n\t\tSystem.out.println(\"characters\");\n\t}\n\n\tpublic void ignorableWhitespace(char buf[], int offset, int len) throws \nSAXException {\n\t\tString s = new String(buf, offset, len);\n\t\tSystem.out.println(\"ignorableWhitespace\");\n\t}\n}\n##############################################################################\norg.xml.sax.SAXParseException: The root element is required in a well-formed \ndocument.\n        at org.apache.xerces.framework.XMLParser.reportError\n(XMLParser.java:1196)\n        at org.apache.xerces.framework.XMLDocumentScanner.reportFatalXMLError\n(XMLDocumentScanner.java:570)\n        at \norg.apache.xerces.framework.XMLDocumentScanner$XMLDeclDispatcher.endOfInput\n(XMLDocumentScanner.java:790)\n        at org.apache.xerces.framework.XMLDocumentScanner.endOfInput\n(XMLDocumentScanner.java:418)\n        at \norg.apache.xerces.validators.common.XMLValidator.sendEndOfInputNotifications\n(XMLValidator.java:694)\n        at org.apache.xerces.readers.DefaultEntityHandler.changeReaders\n(DefaultEntityHandler.java:1026)\n        at org.apache.xerces.readers.XMLEntityReader.changeReaders\n(XMLEntityReader.java:168)\n        at org.apache.xerces.readers.UTF8Reader.changeReaders\n(UTF8Reader.java:182)\n        at org.apache.xerces.readers.UTF8Reader.lookingAtChar\n(UTF8Reader.java:197)\n        at \norg.apache.xerces.framework.XMLDocumentScanner$XMLDeclDispatcher.dispatch\n(XMLDocumentScanner.java:686)\n        at org.apache.xerces.framework.XMLDocumentScanner.parseSome\n(XMLDocumentScanner.java:381)\n        at org.apache.xerces.framework.XMLParser.parse(XMLParser.java:1081)\n        at TestParse.main(TestParse.java:30)", "id": 5681, "time": "2001-09-17T12:09:43Z", "bug_id": 3659, "creation_time": "2001-09-17T12:09:43Z", "is_private": false}, {"count": 1, "tags": [], "text": "Hi Jacques.  The problem lies in your code.  The trouble is that, after you use \nthe BufferedReader to print out your xml file, there's nothing more to read; so \nthe parser gets input which looks to it like a file containing only \nwhitespace.  That's why it reports the error.  \n\nTo get around this, you can either remove your debugging code, or use a \nmark/reset operation on your InputStream object.  \n\nHope that helps,\nNeil", "is_private": false, "bug_id": 3659, "id": 6004, "time": "2001-09-25T09:27:02Z", "creator": "neilg@ca.ibm.com", "creation_time": "2001-09-25T09:27:02Z", "attachment_id": null}]
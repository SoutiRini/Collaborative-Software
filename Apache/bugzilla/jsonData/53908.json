[{"count": 0, "tags": [], "creator": "mamfelt@gmail.com", "text": "make check (after patching Makefile - see https://issues.apache.org/bugzilla/show_bug.cgi?id=53907\n\nmake check of apr-util-1.5.x returns:\n...\ntestdate            : SUCCESS\ntestmemcache        : SUCCESS\ntestxml             : SUCCESS\ntestxlate           : |/bin/sh[17]: 10879096 Segmentation fault(coredump)\nPrograms failed: testall\nmake[1]: *** [check] Error 139\n\nroot@x104:[/data/prj/apr/apr-util-1.5.x/test]dbx testall core\nType 'help' for help.\n[using memory image in core]\nreading symbolic information ...\n\nSegmentation fault in . at 0xd21c1110 ($t1)\n0xd21c1110 (???) 901e0000         stw   r0,0x0(r30)\n(dbx) where\n_iconv_from_utf8(??, ??, ??, ??, ??) at 0xd21c1110\niconv(??, ??, ??, ??, ??) at 0xd054aff8\napr_xlate_conv_buffer() at 0xd18f6084\ntest_conversion() at 0x10008d7c\none_test() at 0x10008c8c\ntest_transformation() at 0x100089dc\nabts_run_test() at 0x10001484\ntestxlate() at 0x10008e28\nmain() at 0x100004f8\n(dbx)\n\nWould appreciate assistence with a iconv test from command-line that (comes close to) emulateing this test to determine if there is a syntax, or other problem with IBM-iconv\n\nthanks!\n\nSystem: AIX 6.1, TL6\n\nroot@x104:[/data/prj/apr/apr-1.4.x/test]oslevel -s\n6100-06-06-1140\nroot@x104:[/data/prj/apr/apr-1.4.x/test]lslpp -L | grep iconv\n  bos.iconv.com             6.1.6.15    C     F    Common Language to Language\n  bos.iconv.ucs.com         6.1.6.16    C     F    Unicode Base Converters for\n  bos.rte.iconv             6.1.6.16    C     F    Language Converters\n\n====\nSame error with apr-util-1.4.x:\ntestdate            : SUCCESS\ntestmemcache        : SUCCESS\ntestxml             : SUCCESS\ntestxlate           : |/bin/sh[17]: 5767418 Segmentation fault(coredump)\nPrograms failed: testall\nmake[1]: *** [check] Error 139\nmake[1]: Leaving directory `/data/prj/apr/apr-util-1.4.x/test'\nmake: *** [check] Error 2\nroot@x104:[/data/prj/apr/apr-util-1.4.x]", "id": 162297, "time": "2012-09-19T22:25:17Z", "bug_id": 53908, "creation_time": "2012-09-19T22:25:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 53908, "attachment_id": null, "text": "FYI: ./testall -x testxlate\nAll other tests report SUCCESS", "id": 162308, "time": "2012-09-20T19:41:59Z", "creator": "mamfelt@gmail.com", "creation_time": "2012-09-20T19:41:59Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 53908, "is_private": false, "id": 162376, "time": "2012-09-24T14:23:16Z", "creator": "mamfelt@gmail.com", "creation_time": "2012-09-24T14:23:16Z", "tags": [], "text": "added some fprintf statements to debug what is going on in testxlate.c\n\nSeems the segmentation fault occurs during the second call to apr_xlate_conv_buffer when the \"input paramters\" are both NULL.\n\nI also added a test in xlate.c and determine that on my system the block behind\nAPU_HAVE_ICONV is being executed.\n\nNote: if I place the second call between /* and */\nthe result is:\n\nrv == SUCCESS\ncalling apr_xlate_conv_buffer with NULL input arguments!\n-apr_xlate_close() SUCCESS\n|apr_xlate_open -f UTF-8 -t UTF-7 -->/Line 93: expected <0>, but saw <22>\nFAIL\napr_xlate_open -f UTF-7 -t UTF-8 -->-FAIL\nFAILED 1 of 1\nFailed Tests            Total   Fail    Failed %\n===================================================\ntestxlate                   1      1    100.00%\n\n============\nWith second call intact:\nroot@x104:[/data/prj/apr/apr-util-1.5.1/test]./testall -v testxlate        \ntestxlate           : -one_test:/* 1. Identity transformation: UTF-8 -> UTF-8 */\napr_xlate_open -f UTF-8 -t UTF-8 -->|SUCCESS\ncall test_conversion(convset)\nEdelwei\u00c3 \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xc3 \\x9f \nin test_conversion(): inbytes 9, outbytes 1023, inbuf Edelwei\u00c3 expect Edelwei\u00c3\n======\nAPU_HAVE_ICONV: 9\n1st conversion == >>>Edelwei\u00c3<<<\n outbytes 1014 inbytes 0\n\\==============\nEdelwei\u00c3 \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xc3 \\x9f \nEdelwei\u00c3 \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xc3 \\x9f \n==============\nrv == SUCCESS\ncalling apr_xlate_conv_buffer with NULL input arguments!\nAPU_HAVE_ICONV: 0\n2nd conversion == Edelwei\u00c3\n outbytes 1014 inbytes 0\n|apr_xlate_close() SUCCESS\n/one_test:/* 1. Identity transformation: UTF-8 -> ISO-8859-1 */\napr_xlate_open -f UTF-8 -t ISO-8859-1 -->-SUCCESS\ncall test_conversion(convset)\nEdelwei\u00c3 \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xc3 \\x9f \nin test_conversion(): inbytes 9, outbytes 1023, inbuf Edelwei\u00c3 expect Edelwei\u00df\n======\nAPU_HAVE_ICONV: 9\n1st conversion == >>>Edelwei\u00df<<<\n outbytes 1015 inbytes 0\n|==============\nEdelwei\u00df \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xdf \\x9f \nEdelwei\u00df \\x45 \\x64 \\x65 \\x6c \\x77 \\x65 \\x69 \\xdf \n==============\nrv == SUCCESS\ncalling apr_xlate_conv_buffer with NULL input arguments!\nAPU_HAVE_ICONV: 0 ** fprintf in xlate.c -- this is where it dies!\nSegmentation fault(coredump)\n==========\n\nIn xlate.c I added - for debugging purposes just this:\n=====\n--- xlate.c     (revision 1387708)\n+++ xlate.c     (working copy)\n@@ -289,6 +289,7 @@\n     apr_status_t status = APR_SUCCESS;\n \n #if APU_HAVE_APR_ICONV\n+fprintf(stderr,\"%s: %s\\n\",\"APU_HAVE_APR_ICONV\", inbuf);\n     if (convset->ich != (apr_iconv_t)-1) {\n         const char *inbufptr = inbuf;\n         apr_size_t translated;\n@@ -336,6 +337,7 @@\n     else\n \n #elif APU_HAVE_ICONV\n+fprintf(stderr,\"%s: %d\\n\",\"APU_HAVE_ICONV\", strlen(inbuf));\n     if (convset->ich != (iconv_t)-1) {\n         const char *inbufptr = inbuf;\n         char *outbufptr = outbuf;\n=========\nand for testxlate.c (bit messy), but who cares!\n===================================================================\n--- testxlate.c (revision 1387708)\n+++ testxlate.c (working copy)\n@@ -37,14 +37,29 @@\n     apr_size_t outbytes_left = sizeof(buf) - 1;\n     apr_status_t rv;\n \n+fprintf(stderr,\"in test_conversion(): inbytes %d, outbytes %d, inbuf %s expect %s\\n======\\n\",\n+       inbytes_left, outbytes_left, inbuf, expected);\n+\n     rv = apr_xlate_conv_buffer(convset, inbuf, &inbytes_left, buf, &outbytes_left);\n+       fprintf(stderr, \"1st conversion == >>>%s<<<\\n outbytes %d inbytes %d\\n\", buf, outbytes_left, inbytes_left);\n+\n     ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n+fprintf(stderr,\"==============\\n\");\n+prstring(buf);\n+prstring(expected);\n+fprintf(stderr,\"==============\\n\");\n \n+fprintf(stderr, \"rv == %s\\n\", rv==APR_SUCCESS ? \"SUCCESS\" : \"FAILED\");\n     if (rv != APR_SUCCESS)\n         return;\n \n-    rv = apr_xlate_conv_buffer(convset, NULL, NULL, buf + sizeof(buf) -\n+fprintf(stderr, \"calling apr_xlate_conv_buffer with NULL input arguments!\\n\");\n+\n+     rv = apr_xlate_conv_buffer(convset, NULL, NULL, buf + sizeof(buf) -\n                                outbytes_left - 1, &outbytes_left);\n+\n+       fprintf(stderr, \"2nd conversion == %s\\n outbytes %d inbytes %d\\n\", buf, outbytes_left, inbytes_left);\n+\n     ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n \n     buf[sizeof(buf) - outbytes_left - 1] = '\\0';\n@@ -52,22 +67,41 @@\n     ABTS_STR_EQUAL(tc, expected, buf);\n }\n \n-static void one_test(abts_case *tc, const char *cs1, const char *cs2,\n-                     const char *str1, const char *str2,\n+static int prstring(const char *str)\n+{\n+       char *cpt = str;\n+               fprintf(stderr,\"%s \", str);\n+       while (*cpt) {\n+               fprintf(stderr,\"\\\\x%02x \", (unsigned) *cpt);\n+               cpt++;\n+       }\n+       fprintf(stderr,\"\\n\");\n+return(0);\n+}\n+\n+static void one_test(abts_case *tc,\n+                       const char *cs1, const char *cs2, /* from to character sets ?? */\n+                     const char *str1, const char *str2, /* convert_from and compare_to strings */\n                      apr_pool_t *pool)\n {\n     apr_status_t rv;\n     apr_xlate_t *convset;\n \n+       fprintf(stderr, \"%s -f %s -t %s --> \", \"apr_xlate_open\", cs1, cs2);\n     rv = apr_xlate_open(&convset, cs2, cs1, pool);\n     ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n+       fprintf(stderr, \"%s\\n\", rv != APR_SUCCESS ? \"FAIL\" : \"SUCCESS\");\n \n     if (rv != APR_SUCCESS)\n         return;\n \n+       fprintf(stderr, \"call test_conversion(convset)\\n\");\n+       prstring(str1);\n+       fflush(stderr);\n     test_conversion(tc, convset, str1, str2);\n \n     rv = apr_xlate_close(convset);\n+       fprintf(stderr, \"apr_xlate_close() %s\\n\", rv != APR_SUCCESS ? \"FAIL\" : \"SUCCESS\");\n     ABTS_INT_EQUAL(tc, APR_SUCCESS, rv);\n }\n \n@@ -101,9 +135,11 @@\n static void test_transformation(abts_case *tc, void *data)\n {\n     /* 1. Identity transformation: UTF-8 -> UTF-8 */\n+fprintf(stderr,\"one_test:%s\\n\", \"/* 1. Identity transformation: UTF-8 -> UTF-8 */\");\n     one_test(tc, \"UTF-8\", \"UTF-8\", test_utf8, test_utf8, p);\n \n     /* 2. UTF-8 <-> ISO-8859-1 */\n+fprintf(stderr,\"one_test:%s\\n\", \"/* 1. Identity transformation: UTF-8 -> ISO-8859-1 */\");\n     one_test(tc, \"UTF-8\", \"ISO-8859-1\", test_utf8, test_latin1, p);\n     one_test(tc, \"ISO-8859-1\", \"UTF-8\", test_latin1, test_utf8, p);\n \nmichael@x054:[/data/prj/apr/apr-util-1.5.x/test]\n==========\nIn short, seems to be an issue when apr_xlate_conv_buffer(convset, NULL, NULL, ...) is called"}]
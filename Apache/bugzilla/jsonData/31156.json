[{"count": 0, "tags": [], "text": "When a lock on a null resource is acquired, everything seems fine, but if the \nlock expires after the given timeout, the resource is still there, it's \nunlocked so an unlock method is useless, and cannot be deleted.\n\nThe RFC states that :\nIf the resource is unlocked, for any reason, without a PUT, MKCOL, or similar \nmethod having been successfully executed upon it then the resource MUST return \nto the null state. \n\nI belive that \"for any reason\" means also timeout.\n\nP.S. This was tested on 2.1 M1, not on b1 or head.", "attachment_id": null, "id": 63326, "creator": "s.gianni@thebug.it", "time": "2004-09-10T02:02:57Z", "bug_id": 31156, "creation_time": "2004-09-10T02:02:57Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 31156, "is_private": false, "count": 1, "id": 63741, "time": "2004-09-17T15:59:02Z", "creator": "luetzkendorf@apache.org", "creation_time": "2004-09-17T15:59:02Z", "text": "I agree that expired lock null resources must disappear after timeout.\n\nI think I have fixed this issure. The problem was at first, that \nAbstractWebdavMethod checks each resource for expired locks and removes\nnull locks .... but the executeRequest method exits with an WebdavException \n(as expected - Not Found) and so the changes regarding the expired locks\nare not commited. Thats why they are lost and the removed null resource\nreappears.\n\nThe second point was: the formerly described check for expired locks only\nhappens for the requested resource not for its descendants. So propfind lists\nexpired locks as member.\n\nFor both problems I added a testcases which now are passing successfully and \nthe other still too(:-). So I think I can close this.\n\nStefan\n\nFor the test cases see\n  functional/lock/null-resources/lockNullFile_Timeout.xml\n  functional/lock/null-resources/lockNullFile_Timeout2.xml\n\n"}]
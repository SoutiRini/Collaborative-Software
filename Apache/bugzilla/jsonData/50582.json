[{"count": 0, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 143331, "time": "2011-01-14T02:16:41Z", "bug_id": 50582, "creation_time": "2011-01-14T02:16:41Z", "tags": [], "text": "Reported in the following thread on users@:\nhttp://markmail.org/thread/awcu5ler2m77jjok\n\nSteps to reproduce:\n1. Create the following JSP page, simple.jsp:\n<%= \"hello!\" %>\n\n2. Send the following request:\nGET /simple.jsp HTTP/1.1\nHost: localhost\nKeep-Alive: 115\nConnection: keep-alive\n\n3. Expected response: (Tomcat 7.0.4)\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=0AFC2875C06A962DF8A02DE6A780F721; Path=/; HttpOnly\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 6\nDate: Thu, 13 Jan 2011 21:16:23 GMT\n\nhello!\n\n4. Actual response: (Tomcat 7.0.6)\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=2C176DBAC054D5BBF3D99FBE5C026915; Path=/; HttpOnly\nContent-Type: text/html;charset=ISO-8859-1\nTransfer-Encoding: chunked\nDate: Thu, 13 Jan 2011 21:23:19 GMT\n\n6\nhello!\n0\n\n===============================================\nInvestigation.\nIf I place a breakpoint in AbstractHttp11Processor#prepareResponse() I see the following line\n long contentLength = response.getContentLengthLong();\nreturns -1 and the call stack is:\n\nDaemon Thread [\"http-bio-8080\"-exec-1] (Suspended)\t\n\tResponse.getContentLengthLong() line: 523\t\n\tHttp11Processor(AbstractHttp11Processor).prepareResponse() line: 887\t\n\tHttp11Processor(AbstractHttp11Processor).action(ActionCode, Object) line: 739\t\n\tResponse.action(ActionCode, Object) line: 170\t\n\tResponse.sendHeaders() line: 350\t\n\tOutputBuffer.doFlush(boolean) line: 308\t\n\tOutputBuffer.flush() line: 291\t\n\tResponse.getBytesWritten(boolean) line: 327\t\n\tAccessLogValve$ByteSentElement.addElement(StringBuilder, Date, Request, Response, long) line: 1052\t\n\tAccessLogValve.log(Request, Response, long) line: 579\t\n\tAccessLogValve.invoke(Request, Response) line: 562\t\n\tStandardEngineValve.invoke(Request, Response) line: 118\t\n\tCoyoteAdapter.service(Request, Response) line: 380\t\n\tHttp11Processor.process(SocketWrapper<Socket>) line: 243\t\n\tHttp11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>, SocketStatus) line: 188\t\n\tHttp11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>) line: 166\t\n\tJIoEndpoint$SocketProcessor.run() line: 288\t\n\tThreadPoolExecutor$Worker.runTask(Runnable) line: 886\t\n\tThreadPoolExecutor$Worker.run() line: 908\t\n\tTaskThread(Thread).run() line: 662\t\n\nNote OutputBuffer.flush() call above.\n\n\nIf I remove AccessLogValve from configuration, the response.getContentLengthLong();\ncall returns \"8\" as expected and call stack is:\n\nDaemon Thread [\"http-bio-8080\"-exec-1] (Suspended)\t\n\tHttp11Processor(AbstractHttp11Processor).prepareResponse() line: 888\t\n\tHttp11Processor(AbstractHttp11Processor).action(ActionCode, Object) line: 739\t\n\tResponse.action(ActionCode, Object) line: 170\t\n\tResponse.sendHeaders() line: 350\t\n\tOutputBuffer.doFlush(boolean) line: 308\t\n\tOutputBuffer.close() line: 275\t\n\tResponse.finishResponse() line: 501\t\n\tCoyoteAdapter.service(Request, Response) line: 406\t\n\tHttp11Processor.process(SocketWrapper<Socket>) line: 243\t\n\tHttp11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>, SocketStatus) line: 188\t\n\tHttp11Protocol$Http11ConnectionHandler.process(SocketWrapper<Socket>) line: 166\t\n\tJIoEndpoint$SocketProcessor.run() line: 288\t\n\tThreadPoolExecutor$Worker.runTask(Runnable) line: 886\t\n\tThreadPoolExecutor$Worker.run() line: 908\t\n\tTaskThread(Thread).run() line: 662\t\n\n===============================================\nThe value returned by response.getContentLengthLong() should be set explicitly (e.g. with content-length header). The second stack trace includes OutputBuffer.close() call and it sets the length value to the response:\n\n>   coyoteResponse.setContentLength(bb.getLength());\n\n\nThis regression is triggered by flushing when AccessLogValve asks for the count of bytes written and was introduced when implementing #50496."}, {"count": 1, "tags": [], "bug_id": 50582, "attachment_id": null, "text": "What exactly is the issue here? That is HTTP spec compliant behaviour.", "id": 143332, "time": "2011-01-14T03:13:19Z", "creator": "markt@apache.org", "creation_time": "2011-01-14T03:13:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50582, "attachment_id": null, "text": "The issue is that Content-Length header is no more sent in the response for JSP pages that produce less than 8k of output. (HTTP/1.0 responses will just omit that header, HTTP/1.1 response will use chunked encoding).\n\nI would agree that the response is valid, so we are not violating protocols here.\n\nIt is just a feature/enhancement that worked before, (and is also working if AccessLogValve is removed).\n\nIs it possible to implement #50496 without breaking this one? E.g. call Response.finishResponse() instead of just flushing? Sounds risky, though.", "id": 143333, "time": "2011-01-14T03:45:28Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-01-14T03:45:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50582, "text": "*** Bug 50583 has been marked as a duplicate of this bug. ***", "id": 143362, "time": "2011-01-15T14:35:18Z", "creator": "markt@apache.org", "creation_time": "2011-01-15T14:35:18Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "The access logging has been refactored to change the point when logging is triggered to after the point when the response has been written so a flush (which was what was forcing the use of chunked encoding)  is not required to obtain an accurate count of bytes written.\n\nThe fix is in 7.0.x and will be included in 7.0.7 onwards.", "id": 143373, "time": "2011-01-16T07:55:00Z", "bug_id": 50582, "creation_time": "2011-01-16T07:55:00Z", "attachment_id": null}]
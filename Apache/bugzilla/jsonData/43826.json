[{"count": 0, "tags": [], "text": "Apparently (http://wiki.apache.org/cocoon/ControllingModCache), a POST request\nto a given URL should invalidate the cache.\n\nThis does not seem to be the case with mod_disk_cache and Apache 2.2.6 (gentoo).", "attachment_id": null, "id": 110362, "creator": "jergendutch@gmail.com", "time": "2007-11-09T07:03:19Z", "bug_id": 43826, "creation_time": "2007-11-09T07:03:19Z", "is_private": false}, {"count": 1, "tags": [], "text": "A POST request doesn't invalidate the cache, its just not cachable.", "attachment_id": null, "id": 110387, "creator": "chip@force-elite.com", "time": "2007-11-10T22:46:08Z", "bug_id": 43826, "creation_time": "2007-11-10T22:46:08Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43826, "is_private": false, "id": 110388, "creation_time": "2007-11-11T03:17:15Z", "time": "2007-11-11T03:17:15Z", "creator": "rpluem@apache.org", "text": "It is a BUG. You are correct POST request cannot be cached, but according to\nRFC2616 13.1: \n\n \"Some HTTP methods MUST cause a cache to invalidate an entity. This is\n  either the entity referred to by the Request-URI, or by the Location\n  or Content-Location headers (if present). These methods are:\n\n      - PUT\n      - DELETE\n      - POST\n\n  In order to prevent denial of service attacks, an invalidation based\n  on the URI in a Location or Content-Location header MUST only be\n  performed if the host part is the same as in the Request-URI.\"", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 43826, "is_private": false, "id": 112626, "creation_time": "2008-01-08T05:03:35Z", "time": "2008-01-08T05:03:35Z", "creator": "jergendutch@gmail.com", "text": "The reason why I reported this is that it would make it *trivial* for users of\nApache reverse proxied cache setups to invalidate items in their cache.\n\nRather than relying on a low ttl for every document and linked pages being\npurged from the cache at different times, fixing Apache to meet the\nstandards-mandated behaviour would give it quite an advantage: everything could\nhave a high ttl and only those documents which were updated would need to be\npurged - and when the purge happened, it would be instant. Marvellous :)\n\n(Writing the code to fit it in with your cms would be a doddle too)", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 43826, "attachment_id": null, "id": 112638, "time": "2008-01-08T09:30:36Z", "creator": "slive@apache.org", "creation_time": "2008-01-08T09:30:36Z", "is_private": false, "text": "Can't you do the same purge with a\nGET ...\nCache-control: max-age=0\n\n(Not that this changes the status of this bug.)"}, {"count": 5, "tags": [], "bug_id": 43826, "attachment_id": null, "id": 112670, "time": "2008-01-09T00:20:17Z", "creator": "jergendutch@gmail.com", "creation_time": "2008-01-09T00:20:17Z", "is_private": false, "text": "Seems to yes - thanks for that :)"}, {"count": 6, "tags": [], "creator": "rahul.g.nair@gmail.com", "attachment_id": 22459, "text": "Created attachment 22459\nlet PUT POST DELETE invalidate the cache\n\nCheck for PUT|POST|DELETE and if we have a cache entry matching the request, remove that entry.", "id": 119932, "time": "2008-08-20T05:06:36Z", "bug_id": 43826, "creation_time": "2008-08-20T05:06:36Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43826, "attachment_id": null, "id": 119959, "time": "2008-08-20T13:16:29Z", "creator": "rpluem@apache.org", "creation_time": "2008-08-20T13:16:29Z", "is_private": false, "text": "(In reply to comment #6)\n> Created an attachment (id=22459) [details]\n> let PUT POST DELETE invalidate the cache\n> \n> Check for PUT|POST|DELETE and if we have a cache entry matching the request,\n> remove that entry.\n> \n\nI think the patch misses some cases that will be caught by the patch I will add in a minute.\n\n1. Even if cache_select returns DECLINED we can have a caches version of this\n   resource. It is possible that this cached version looks stale at the *first*\n   glance. A conditional request on the backend will show if this is true or\n   not. So we must remove the cache entry regardless of the result of \n   cache_select.\n\n2. It is perfectly valid that a POST, DELETE or PUT request on a resource requires\n   authorization whereas a GET request does not. So must avoid the shortcut that\n   every request with an Authorization header present in the request gets\n   declined.\n"}, {"count": 8, "tags": [], "text": "Created attachment 22463\nPatch against trunk", "is_private": false, "id": 119960, "creator": "rpluem@apache.org", "time": "2008-08-20T13:17:18Z", "bug_id": 43826, "creation_time": "2008-08-20T13:17:18Z", "attachment_id": 22463}, {"count": 9, "tags": [], "bug_id": 43826, "attachment_id": 22467, "id": 119976, "time": "2008-08-21T05:10:07Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-08-21T05:10:07Z", "is_private": false, "text": "Created attachment 22467\nmove cache_remove_url to output filter\n\nTwo parts to the patch, The first part is same as your logic,\nbut I thought this was a little more clearer, and moves auth check before\ninitialization of context.\n\nThe second part (I am not sure this is right since it is not stated in RFC) is\nthat we check if the PUT/POST/DELETE request was valid before removing the\ncache entry. The reason that if a method was disallowed in the current URL, then\nit is probably not nice to let it have any effect on the cache of that entity.\n\nBoth parts are not really necessary, and your patch works fine,\n(I have verified it, and could find no fault with its logic)\nbut I thought it might be nicer this way."}, {"count": 10, "tags": [], "bug_id": 43826, "attachment_id": null, "id": 144271, "time": "2011-02-14T15:09:16Z", "creator": "ogi@tower.3.bg", "creation_time": "2011-02-14T15:09:16Z", "is_private": false, "text": "I filed bug 50774 for enhancements in cache invalidation.\n\n*** This bug has been marked as a duplicate of bug 15868 ***"}]
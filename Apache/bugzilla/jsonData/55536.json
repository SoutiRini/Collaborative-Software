[{"count": 0, "tags": [], "bug_id": 55536, "attachment_id": null, "id": 169964, "time": "2013-09-08T20:30:24Z", "creator": "hauser@acm.org", "creation_time": "2013-09-08T20:30:24Z", "is_private": false, "text": "The Apache/2.2.24 (FreeBSD) mod_ssl/2.2.24 OpenSSL/1.0.1e of https://www.ssllabs.com/ssltest/analyze.html?d=issues.apache.org doesn't allow\nSecure Client-Initiated Renegotiation\n\nIt is considered dangerous for DoS attacks:\nhttps://community.qualys.com/blogs/securitylabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks \n\nHow could this be done with tomcat7?\n\nhttp://www.oracle.com/technetwork/java/javase/documentation/tlsreadme-141115.html \n\nmaybe the approach of bug 48236 could be used for this purpose again?\n\n // after creation, immediately disable all ciphers, avoiding any subsequent handshake \n            ((SSLSocket)sock).setEnabledCipherSuites(new String[0]);"}, {"count": 1, "tags": [], "text": "http://tomcat.markmail.org/thread/xkxhfdrp6tslwkao\n\nI've yet to see anyone argue that adding rate limiting to SSL renegotiations for BIO and NIO is a worthwhile exercise. I'm not against it if there is a use case and I have a few ideas on how it might be done. But, at the moment, I simply don't see the point.", "is_private": false, "id": 169977, "creator": "markt@apache.org", "time": "2013-09-09T09:36:09Z", "bug_id": 55536, "creation_time": "2013-09-09T09:36:09Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "This RFE is not about APR, but the Java side of SSL/TLS.\nBut even then, I am not going to argue with you about renegotiation rate limit meaningfulness - I leave the to qualsys and their ssllabs.\n\nAt least in Tomcat v>=7, it appears this might be relatively easily doable with\noverwriting JSSEImplementation\npublic SSLSupport getSSLSupport(Socket s) {\n}\nand doing the setEnabledCipherSuites(new String[0]) .\nThen put your new class into \"sslImplementationName\" as per \nhttp://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support\n\nDoes this sound right?", "is_private": false, "id": 169979, "creator": "hauser@acm.org", "time": "2013-09-09T10:04:55Z", "bug_id": 55536, "creation_time": "2013-09-09T10:04:55Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 55536, "text": "(In reply to Ralf Hauser from comment #2)\n> This RFE is not about APR, but the Java side of SSL/TLS.\n\nI'm aware of that. APR is an optional solution.\n\n> But even then, I am not going to argue with you about renegotiation rate\n> limit meaningfulness - I leave the to qualsys and their ssllabs.\n\nIt is a view, just not one I agree with. There does not appear to be a consensus on this. My testing with Tomcat is consistent with others that have tested OpenSSL that the difference between one connection and lots of renegotiations and lots of connections each with an initial handshake is minimal.\n\n> At least in Tomcat v>=7, it appears this might be relatively easily doable\n> with\n> overwriting JSSEImplementation\n> public SSLSupport getSSLSupport(Socket s) {\n> }\n> and doing the setEnabledCipherSuites(new String[0]) .\n> Then put your new class into \"sslImplementationName\" as per \n> http://tomcat.apache.org/tomcat-7.0-doc/config/http.html#SSL%20Support\n> \n> Does this sound right?\n\nI haven't tested it but that is the right sort of thing to be doing.\n\nMark", "id": 169981, "time": "2013-09-09T11:02:25Z", "creator": "markt@apache.org", "creation_time": "2013-09-09T11:02:25Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "id": 180616, "time": "2015-01-28T10:34:07Z", "bug_id": 55536, "creation_time": "2015-01-28T10:34:07Z", "is_private": false, "text": "with java8, a per Ivan Ristic's excellent article http://blog.ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html, \nadding somewhere even in your application code\n\nSystem.setProperty(\"jdk.tls.rejectClientInitiatedRenegotiation\", \"true\");\n\nappears to have the same effect, albeit not thread-safe, but on a jvm-wide level."}, {"count": 5, "text": "For now, I find two solutions for this problem to share:\n1 improve the jdk to java8 and set the system property as Ralf Hauser said:\nSystem.setProperty(\"jdk.tls.rejectClientInitiatedRenegotiation\", \"true\");\n\n2 use NIO to replace BIO protocol\n<!-- Define a HTTP/1.1 Connector on port 8443, JSSE NIO implementation -->\n<Connector protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n           port=\"8443\" .../>\nthis solution is finded from \nhttp://stackoverflow.com/questions/12359288/disabling-ssl-tls-renegotiation-in-tomcat", "bug_id": 55536, "is_private": false, "id": 182544, "time": "2015-04-22T03:30:53Z", "creator": "changtianyu@hotmail.com", "creation_time": "2015-04-22T03:30:53Z", "tags": [], "attachment_id": null}]
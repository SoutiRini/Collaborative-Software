[{"count": 0, "tags": [], "text": "This problem started happening only when I switched from Ant 1.6.1 to 1.7.0.\n\nI am using the <junit> Ant task to invoke a suite of tests for code that runs as\na J2EE application within WAS.  It successfully runs every test, but right after\nit runs the last test of the suite, it exits abnormally as follows (partial\ndebug output shown here and it has been edited to remove confidential info):\n\n    [junit] 'crashfile=C:\\automation\\scripts\\junitvmwatcher935641274.properties'\n    [junit] 'propsfile=C:\\automation\\scripts\\junit370603936.properties'\n    [junit]\n    [junit] The ' characters around the executable and arguments are\n    [junit] not part of the command.\n    [junit] Running TestCase: com.ibm.<ourstuff>.<ourstuff>Tests\n    [junit]     Running Test: testMethod1\n    [junit]     Running Test: testMethod2\n    [junit]     Running Test: testMethod3\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Incomplete: 0, Time elapsed: 6\n.941 sec\n    [junit] java.io.FileNotFoundException: C:\\automation\\scripts\\junitvmwatcher9\n35641274.properties (The system cannot find the file specified)\n    [junit]     at java.io.FileInputStream.open(Native Method)\n    [junit]     at java.io.FileInputStream.<init>(FileInputStream.java:129)\n    [junit]     at java.io.FileReader.<init>(FileReader.java:76)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execut\neAsForked(JUnitTask.java:1028)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execut\ne(JUnitTask.java:817)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execut\neOrQueue(JUnitTask.java:1657)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execut\ne(JUnitTask.java:764)\n    [junit]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:288)\n    [junit]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMet\nhodAccessorImpl.java:62)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:391)\n    [junit]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchU\ntils.java:105)\n    [junit]     at org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit]     at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.j\nava:62)\n    [junit]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:288)\n    [junit]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMet\nhodAccessorImpl.java:62)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:391)\n    [junit]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchU\ntils.java:105)\n    [junit]     at org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit]     at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInst\nance.java:391)\n    [junit]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja\nva:288)\n    [junit]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMet\nhodAccessorImpl.java:62)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:391)\n    [junit]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchU\ntils.java:105)\n    [junit]     at org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit]     at org.apache.tools.ant.Target.execute(Target.java:357)\n    [junit]     at org.apache.tools.ant.Target.performTasks(Target.java:385)\n    [junit]     at org.apache.tools.ant.Project.executeSortedTargets(Project.jav\na:1329)\n    [junit]     at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n\n    [junit]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(De\nfaultExecutor.java:41)\n    [junit]     at org.apache.tools.ant.Project.executeTargets(Project.java:1181\n)\n    [junit]     at org.apache.tools.ant.Main.runBuild(Main.java:698)\n    [junit]     at org.apache.tools.ant.Main.startAnt(Main.java:199)\n    [junit]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n    [junit]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\n\nAfter it exits, any results it has collected from the successful test method\nruns has been eliminated from the XML and TXT files I had it generate, and\ninstead it just contains this (instead of the test results):\n\nTestsuite: com.ibm.<ourstuff>.<ourstuff>Tests\nTests run: 1, Failures: 0, Errors: 1, Time elapsed: 0 sec\n\nTestcase: unknown took 0 sec\n\tCaused an ERROR\nForked Java VM exited abnormally. Please note the time in the report does not\nreflect the time until the VM exit.\njunit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please\nnote the time in the report does not reflect the time until the VM exit.\n\n\nNow, I have no idea what this \"junitvmwatcher\" file is or why it wants to delete\nit.  During the test run, I watch the CWD where I started the run from (which is\nc:\\automation\\scripts), and I see a junit*.properties file created but NOT a\njunitvmwatcher*.properties file.  At the end of the test run, the\njunit*.properties file is automatically deleted and the above error is generated\nsince it can't delete the junitvmwatcher file that does not exist.\n\nI have no idea why it generates either of these properties file. According to\nthe -debug flag, this file is called a \"crashfile\", in case that helps figure\nthis out.\n\nOddly, the only suite of tests that fail are those that are running the J2EE\napplication's tests.  Other suites that do more conventional Java library tests\ndon't exhibit this problem.  \n\nObserve in the output that the 3 tests I run all succeed and a summary line is\nprinted saying so, but then the exception happens anyway.  So, there may be many\nthings wrong here: 1) I don't know about this junitvmwatcher file, don't care\nabout it, and don't want Ant to bother me about it, 2) perhaps it failed to\ncreate this file in the first place so that it was unable to delete it, 3) if it\nnever created it, it shouldn't try to delete it, 4) if it tries to delete it\nanyway but fails, it really should just be quiet about it, 5) If its going to\nfail catastrophically like this anyway, I still want to see the output that I\ngot in the TXT and XML output files -- the tests otherwise run just fine so it\nshouldn't toss the results just because of a crash afterwards.\n\nThis is a blocker; I have no choice but to use Ant 1.6.1 until this is fixed or\na workaround is determined.  However, there are new Ant 1.7 features that we\nreally need to use.", "is_private": false, "bug_id": 41511, "id": 98843, "time": "2007-01-31T10:59:30Z", "creator": "chwells@us.ibm.com", "creation_time": "2007-01-31T10:59:30Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "chwells@us.ibm.com", "attachment_id": null, "is_private": false, "id": 98844, "time": "2007-01-31T11:06:05Z", "bug_id": 41511, "creation_time": "2007-01-31T11:06:05Z", "text": "One more thing, I see that the release notes for Ant 1.7.0 have this line in the\n\"Fixed bugs\" section:\n\n- <junittask/> created junitvmwatcher*.properties files but did not close and\ndelete them.\n\nI'm going to guess that this \"fix\" caused my problem.  \n\n"}, {"count": 2, "tags": [], "bug_id": 41511, "text": "You are probally running with a mixture of ant jars\n(probally from the WAS env), this means that the unit\ntests are run by a ant junit runner from an older\nrelease of ant (probally ant 1.6.5), this version\ndoes not create the file checked by the junit code.\n\nThe latest SVN version of ant has a fix for this\nand has a diagonstic check to see if the situation\nhappens\nsee http://issues.apache.org/bugzilla/show_bug.cgi?id=41104\n\nmarking this as a duplicate\n\n*** This bug has been marked as a duplicate of 41104 ***", "id": 98846, "time": "2007-01-31T11:44:49Z", "creator": "peterreilly@apache.org", "creation_time": "2007-01-31T11:44:49Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "chwells@us.ibm.com", "attachment_id": null, "is_private": false, "id": 98876, "time": "2007-02-01T10:30:37Z", "bug_id": 41511, "creation_time": "2007-02-01T10:30:37Z", "text": "Thanks for getting back to me so quickly.  That's exactly the problem, \nalthough it took me a while to figure out what about the WAS runtime had the \nconflicting version of Ant in it.  Nowhere did I see an actual classpath \npulling in any ant jars, so WAS must be doing something else to load them in.  \nAfter some reverse engineering and experiments, I found that the runtime has \ntwo files named \"ant.jar\" and \"optional.jar\"; if both of these are removed (or \nrenamed out of the way), then the problem stops happening.  Leave either jar \nthere, and the problem still happens.  My tests use the WAS runtime but have \nno use for the Ant components, so this solution is sufficient for now.  (NOTE: \nThis is WAS 6.0.1.)\n"}]
[{"count": 0, "tags": [], "bug_id": 48310, "attachment_id": null, "id": 132485, "time": "2009-11-30T15:48:04Z", "creator": "valentino@miazzo.net", "creation_time": "2009-11-30T15:48:04Z", "is_private": false, "text": "This was originally bug 48299 but was lost in issues.a.o data loss on 2009-11-26/27 and re-created from the archives.\n\nI have a build system where sometime a ConcurrentModificationException is\nthrown.\n\nThe system is quite complex and I'm not able to produce a recipe for the bug.\nAnyway, I looked at the ANT source code and found the (possible) causes.\n\nMethod void Project.addReference(String,Object) modifies Hashtable\nProjet.references .\nMethod Hashtable Project.getReferences() returns references.\nThis implementation exposes to ConcurrentModificationException when Thread A\ncalls addReference() and Thread B iterates over getReferences().\nEven if dictionary.keySet().iterator()\n\nThis actually happens to me when using <parallel> and <scriptcondition> tasks.\nIn this case, when scripcondition task is executed, the method void\nScriptRunnerBase.bindToComponent(ProjectComponent) invokes\nProject.getReferences(), then obtains a iterator with Map.keySet().iterator()\nto fill script beans.\nIn another thread some task modifies calls Project.addReference() and therefore\na ConcurrentModificationException is threw.\n\nAnother problematic scenario is this.\nMethod void Project.addOrReplaceTarget(String,Target) modifies Hashtable\nProjet.target .\nMethod Hashtable Project.getTargets() returns targets.\nThis implementation exposes to race conditions when Thread A calls\naddOrReplaceTarget() and Thread B calls getTargets().\n\nI think a copy of those collection should be returned instead of the live ones.\n\nI tried to produce a patch but I'm not sure off all the implication of those\nchanges (Javadocs state that these methods return live collections), so I leave\nthis to the maintainers."}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "If we modified Project to return copies we'd change the current contract (as you've already noted).\n\nWhat we could do was to add new methods that return copies and use them inside of ScriptRunnerBase - and likely other places in Ant's code base.", "id": 132526, "time": "2009-11-30T21:28:39Z", "bug_id": 48310, "creation_time": "2009-11-30T21:28:39Z", "is_private": false}, {"count": 2, "tags": [], "creator": "valentino@miazzo.net", "is_private": false, "text": "About Comment 1: seems OK.\n\nMaybe the inverse:\n getReferences() returns a copy\n getReferencesLive() returns the live copy\n getTargets() returns a copy\n getTargetsLive() returns the live copy\n\nAFAIK is less common to return live collection because violates encapsulation.\nPlus get*sLive binds the contract to the method name.\n\nJust my 2c", "id": 132535, "time": "2009-12-01T00:56:31Z", "bug_id": 48310, "creation_time": "2009-12-01T00:56:31Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "text": "The main concern would be backwards compatibility.  Anybody using the old method signatures will still expect them to return live collections.\n\nI agree your proposed naming scheme would be better, but we can't follow it.", "id": 132631, "time": "2009-12-06T21:17:54Z", "bug_id": 48310, "creation_time": "2009-12-06T21:17:54Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "getCopyOf... methods introduced and used in ScriptRunnerBase as well as\nAntStructure with svn revision 908035", "id": 134361, "time": "2010-02-09T05:58:39Z", "bug_id": 48310, "creation_time": "2010-02-09T05:58:39Z", "is_private": false}]
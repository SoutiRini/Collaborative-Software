[{"count": 0, "tags": [], "creator": "mburke@ea.com", "attachment_id": null, "id": 194626, "time": "2016-10-21T18:32:23Z", "bug_id": 60296, "creation_time": "2016-10-21T18:32:23Z", "is_private": false, "text": "(I originally filed this with Debian's apache team because when I searched for related information on this issue I turned up something in their bug tracker. Here is the link for more context: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=814980)\n\nThe anylock structure provided by mod_ldap was set to the type apr_anylock_none, which resulted in multiple threads mutating the shared RMM state at the same time without any concurrency guards. The issue I was seeing was that all the threads on the server were stuck inside the RMM internal function find_block_of_size every 2 or 3 days, requiring the server processes to be killed and restarted. \n\nWe are using Apache on Windows.\n\nI made the following patch which passes in a lock to the RMM pool created in mod_ldap when APR_HAS_THREADS is defined. Since doing so we have not encountered any hangs:\n\ndiff -Naur httpd-2.4.16\\include\\util_ldap.h httpd-2.4.16-ea\\include\\util_ldap.h\n--- httpd-2.4.16\\include\\util_ldap.h\tMon Jul 14 05:07:55 2014\n+++ httpd-2.4.16-ea\\include\\util_ldap.h\tMon Aug 29 10:20:08 2016\n@@ -169,6 +169,10 @@\n #if APR_HAS_SHARED_MEMORY\n     apr_shm_t *cache_shm;\n     apr_rmm_t *cache_rmm;\n+#if APR_HAS_THREADS\n+    apr_thread_mutex_t *lock;\n+    apr_anylock_t cache_rmm_anylock;\n+#endif\n #endif\n \n     /* cache ald */\ndiff -Naur httpd-2.4.16\\modules\\ldap\\util_ldap_cache.c httpd-2.4.16-ea\\modules\\ldap\\util_ldap_cache.c\n--- httpd-2.4.16\\modules\\ldap\\util_ldap_cache.c\tMon Aug 19 04:45:19 2013\n+++ httpd-2.4.16-ea\\modules\\ldap\\util_ldap_cache.c\tMon Aug 29 10:23:04 2016\n@@ -410,6 +410,14 @@\n         st->cache_shm = NULL;\n         return result;\n     }\n+\n+#if APR_HAS_THREADS\n+    apr_thread_mutex_destroy(st->lock);\n+    st->lock = NULL;\n+    st->cache_rmm_anylock.type = apr_anylock_none;\n+    st->cache_rmm_anylock.lock.pm = NULL;\n+#endif\n+\n #endif\n     return APR_SUCCESS;\n }\n@@ -436,8 +444,18 @@\n         /* Determine the usable size of the shm segment. */\n         size = apr_shm_size_get(st->cache_shm);\n \n+#if APR_HAS_THREADS\n+        apr_thread_mutex_create(&st->lock, APR_THREAD_MUTEX_DEFAULT, st->pool);\n+        st->cache_rmm_anylock.type = apr_anylock_threadmutex;\n+        st->cache_rmm_anylock.lock.tm = st->lock;\n+#else\n+        st->lock = NULL;\n+        st->cache_rmm_anylock.type = apr_anylock_none;\n+        st->cache_rmm_anylock.lock.pm = NULL;\n+#endif\n+\n         /* This will create a rmm \"handler\" to get into the shared memory area */\n-        result = apr_rmm_init(&st->cache_rmm, NULL,\n+        result = apr_rmm_init(&st->cache_rmm, &st->cache_rmm_anylock,\n                               apr_shm_baseaddr_get(st->cache_shm), size,\n                               st->pool);\n         if (result != APR_SUCCESS) {\n\n\nThanks!"}, {"count": 1, "tags": [], "bug_id": 60296, "attachment_id": null, "text": "Hi Max, it appears to me that mod_ldap is trying to manage a global (cross process  + cross thread) lock outside of rmm, which is why it tells RMM to not use a lock.\n\nWindows is a special case where there is only 1 process and N threads.  But passing in a thread mutex only is probably wrong outside of windows.\n\nNot having looked too closely, it seems likely that an LDAP_CACHE_LOCK() is missing somewhere where we call into rmm.\n\nHave you been able to verify on a later release?", "id": 194629, "time": "2016-10-21T19:29:23Z", "creator": "covener@gmail.com", "creation_time": "2016-10-21T19:29:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 60296, "attachment_id": null, "is_private": false, "id": 194630, "time": "2016-10-21T19:47:49Z", "creator": "mburke@ea.com", "creation_time": "2016-10-21T19:47:49Z", "text": "I have not tried a later release in production, no, only because we have been soaking the change to see if it improved reliability.\n\nI am looking at the mod_ldap changes between our current version (2.4.16) and the latest (2.4.23) and see that the only changes are whitespace, either adding/remove spaces or adding newlines before braces, so I would expect that 2.4.23 is similarly affected.\n\nThe LDAP_CACHE_LOCK construct is defined only to the util_ldap.c translation unit, it does not seem to be available, at present, to util_ldap_cache_mgr.c where the RMM blocks are allocated and freed."}, {"count": 3, "tags": [], "bug_id": 60296, "attachment_id": null, "id": 194632, "time": "2016-10-22T01:25:19Z", "creator": "covener@gmail.com", "creation_time": "2016-10-22T01:25:19Z", "is_private": false, "text": "(In reply to Max Burke from comment #2)\n> I have not tried a later release in production, no, only because we have\n> been soaking the change to see if it improved reliability.\n> \n> I am looking at the mod_ldap changes between our current version (2.4.16)\n> and the latest (2.4.23) and see that the only changes are whitespace, either\n> adding/remove spaces or adding newlines before braces, so I would expect\n> that 2.4.23 is similarly affected.\n> \n> The LDAP_CACHE_LOCK construct is defined only to the util_ldap.c translation\n> unit, it does not seem to be available, at present, to util_ldap_cache_mgr.c\n> where the RMM blocks are allocated and freed.\n\nIt's not directly available, but that lock is meant to be held by anyone who would ultimately get into the code that does the allocations. That is usually (AFAICT) via util_ald_cache_insert().\n\nWhat kind of Require ldap-* do you use? I noticed the debian OP didn't list that bit."}, {"count": 4, "tags": [], "bug_id": 60296, "is_private": false, "text": "(In reply to Eric Covener from comment #3)\n> What kind of Require ldap-* do you use? I noticed the debian OP didn't list\n> that bit.\n\nI'm unfamiliar with what you mean by \"Require ldap-*\", but here are the snippets from our httpd.conf for the ldap settings:\n\nLoadModule authnz_ldap_module modules/mod_authnz_ldap.so\nLoadModule ldap_module modules/mod_ldap.so\n\nLDAPTrustedMode SSL\nLDAPVerifyServerCert off\nLDAPSharedCacheSize 20000000\n\n<AuthnProviderAlias ldap eac>\n\tAuthLDAPURL \"[... snip ... ]\"\n\tAuthLDAPBindDN  \"[ ... snip ... ]\"\n\t\n\t# including ldap password from a separate file\n\t# AuthLDAPBindPassword secret\n\tInclude conf/ldap_bind_pwd.conf\n</AuthnProviderAlias>", "id": 194681, "time": "2016-10-26T21:52:37Z", "creator": "mburke@ea.com", "creation_time": "2016-10-26T21:52:37Z", "attachment_id": null}, {"id": 198014, "tags": [], "bug_id": 60296, "attachment_id": null, "count": 5, "text": "Fixed status - sorry wrong bug.", "time": "2017-03-27T16:03:36Z", "creator": "guido.wischrop@mgm-tp.com", "creation_time": "2017-03-27T16:03:36Z", "is_private": false}]
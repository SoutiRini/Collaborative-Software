[{"count": 0, "text": "This problem has been discussed on the regexp mailinglist\n(June 8, 2001, Subject \"Regexp broken\").\n\nI made an JSP page in which I test some RE's.\n\nI have a string \"{regexp-1.2}\" and I want an RE which\nmatches everything between the brackets (thus \"regexp-1.2\").\n\nLet's try some regular expressions:\n\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9]+)\" match: \"regexp\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9-]+)\" match: \"{regexp-1.2}\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9.]+)\" match: \"regexp\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9.-]+)\" match: \"{regexp\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9\\-]+)\" match: \"regexp-1\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9\\.]+)\" match: \"regexp\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9\\.\\-]+)\" match: \"regexp-1\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9.\\-]+)\" match: \"regexp-1\"\nInput string \"{regexp-1.2}\" and RE \"([a-z0-9\\.-]+)\" match: \"{regexp\"\n\nSome strange results and none of them gives \"regexp-1.2\"!\n\nThis is the JSP-code, so you can try it yourself:\n\n<%@ page import=\"org.apache.regexp.*\" %>\n\n<%!\nJspWriter JspOut;\n\npublic void reTest( String in, String re ) throws java.io.IOException, \norg.apache.regexp.RESyntaxException {\n        JspOut.print( \"Input string \\\"\"+in+\"\\\" and RE \\\"\"+re+\"\\\" match: \");\n        RE testRe = new RE(re);\n        if ( testRe.match( in ) )\n                JspOut.print( \"\\\"\"+testRe.getParen(1)+\"\\\"\" );\n        else\n                JspOut.print( \"no match\" );\n        JspOut.print(\"<br>\");\n}\n%>\n\n<%\nJspOut = out;\nString s = \"{regexp-1.2}\";\n\nreTest( s, \"([a-z0-9]+)\" );\nreTest( s, \"([a-z0-9-]+)\" );\nreTest( s, \"([a-z0-9.]+)\" );\nreTest( s, \"([a-z0-9.-]+)\" );\nreTest( s, \"([a-z0-9\\\\-]+)\" );\nreTest( s, \"([a-z0-9\\\\.]+)\" );\nreTest( s, \"([a-z0-9\\\\.\\\\-]+)\" );\nreTest( s, \"([a-z0-9.\\\\-]+)\" );\nreTest( s, \"([a-z0-9\\\\.-]+)\" );\n%>", "creator": "edwin@bitstorm.nl", "is_private": false, "id": 2866, "time": "2001-06-11T12:26:14Z", "bug_id": 2121, "creation_time": "2001-06-11T12:26:14Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 2121, "attachment_id": null, "id": 3177, "time": "2001-06-21T14:29:54Z", "creator": "edwin@bitstorm.nl", "creation_time": "2001-06-21T14:29:54Z", "is_private": false, "text": "Here's an contribution to general@jakarta.apache.org,\nsubject \"What are we doing in regards to JDK 1.4?\".\n\nIt contains untested fixes.\n\nAt 09:42 21-6-2001 -0700, Jon wrote:\nEdwin,\n\non 6/21/01 7:16 AM, \"Edwin Martin\" <edwin@bitstorm.nl> wrote:\n\n- > org.apache.regexp 1.2 is pretty much broken. It has some\n- > major flaws since 1.0 and they are still not addressed.\n- > \n- > See http://nagoya.betaversion.org/bugzilla/buglist.cgi?product=Regexp\n- > for a list of bugs (BTW none of them is assigned).\n- \n- Sending in bug reports doesn't get the problems fixed. This is a community\n- of VOLUNTEERS. You can't just magically put in a bug report and then someone\n- is going to jump up and fix it...you have to submit patches or try to nicely\n- motivate people to fix it for you.\n- \n- <http://jakarta.apache.org/site/understandingopensource.html>\n-\n- \"With the opensource system, if you find any deficiency in the project, the\n- onus is on you to redress that deficiency.\"\n\nI thought submitting bug reports is also an important\nway to support Open Source.\n\nWell, I looked at the regexp-code and saw one of the bugs:\n\nRECompiler.java, line 664:\n\n                   // Premature end of range. define up to Character.MAX_VALUE\n                    if ((idx + 1) < len && pattern.charAt(++idx) == ']')\n                    {\n                        simpleChar = Character.MAX_VALUE;\n                        break;\n                    }\n\nThe code makes any minus a range.\n\nThe RE \"[a-]\" becomes \"the character a and anything after it\".\n\nA minus at the beginning or the end should be just a minus.\n\nThe code should be something like this:\n\n                    // Premature end of range. define up to Character.MAX_VALUE\n                    if ((idx + 1) < len && pattern.charAt(++idx) == ']')\n                    {\n                        definingRange = false;\n                        break;\n                    }\n\nFuthermore, RECompiler.java, line 697:\n\n                if ((idx + 1) >= len || pattern.charAt(idx + 1) != '-')\n\nShould become something like:\n\n                if ((idx + 1) >= len || !(pattern.charAt(idx + 1) == '-' &&\n!((idx + 2) <= len && pattern.charAt(idx + 2) == ']')))\n\nWhich means: Do not include a char when followed by a minus, but DO include the\nchar when the minus is followed by a ']'.\n\nThe code still does not address the possibility of a charclass which starts with a\nminus, like \"[-a]\" or \"[^-a]\", but that shouldn't be too difficult to implement.\n\nIt isn't really that hard to fix these bugs, I just wonder if there's anybody\nresponsible for the regexp package.\n\nAnd by the way, you don't have to shout.\n\nBye,\nEdwin Martin."}, {"count": 2, "tags": [], "text": "Cheers for the notes Edwin I see about getting them implemented.\nI have been too busy with working and moving and no one else is volunteering.\n\nIt will get done.", "attachment_id": null, "id": 5246, "creator": "gholam@xtra.co.nz", "time": "2001-09-08T15:48:43Z", "bug_id": 2121, "creation_time": "2001-09-08T15:48:43Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 2121, "text": "*** Bug 2122 has been marked as a duplicate of this bug. ***", "id": 5248, "time": "2001-09-08T15:50:06Z", "creator": "gholam@xtra.co.nz", "creation_time": "2001-09-08T15:50:06Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "*** Bug 810 has been marked as a duplicate of this bug. ***", "creator": "gholam@xtra.co.nz", "is_private": false, "id": 5255, "time": "2001-09-08T16:00:59Z", "bug_id": 2121, "creation_time": "2001-09-08T16:00:59Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 2121, "attachment_id": null, "id": 36133, "time": "2003-04-25T17:58:22Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-04-25T17:58:22Z", "is_private": false, "text": "This is partially fixed by patch attached to bug #19329. Following REs work\nproperly:\n\nreTest( s, \"([a-z0-9]+)\" );\nreTest( s, \"([a-z0-9\\\\-]+)\" );\nreTest( s, \"([a-z0-9\\\\.]+)\" );\nreTest( s, \"([a-z0-9\\\\.\\\\-]+)\" );\n"}, {"count": 6, "tags": [], "text": "In current version (1.4-dev) only three regexps from list provided in this bug\nproduce results unexpected by submitter:\n([a-z0-9-]+) matches \"regexp\" instead of \"regexp-1\"\n([a-z0-9.-]+) - \"{regexp\" instead of \"regexp-1.2\"\n([a-z0-9\\\\.-]+) - \"{regexp\" instead of \"regexp-1.2\"\nThe cause of this problem is that jakarta-regexp consider [-] as interval from\n0 upto Character.MAX_VALUE.  And [a-] as interval from a upto \nCharacter.MAX_VALUE.\n\nSo, we can say that this is a feature and do not fix this.\nOr say that this is a bug, but on this way we will have to change behavior of '-\n'\nwhen it is first/last character in [].\nThe advantage of latter approach is that jakarta-regexp will be more compatible\nwith Perl, gnu-regexp and Sun's regexp implementation (I think ORO too, but I \ndon't have it to check).", "is_private": false, "id": 46282, "creator": "son@sparc.spb.su", "time": "2003-10-25T19:40:04Z", "bug_id": 2121, "creation_time": "2003-10-25T19:40:04Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 2121, "text": "I think it is possible to add new MATCH modifier, something like:\n\nIndex: src/java/org/apache/regexp/RE.java\n===================================================================\nRCS file: /home/cvs/jakarta-regexp/src/java/org/apache/regexp/RE.java,v\nretrieving revision 1.14\ndiff -u -r1.14 RE.java\n--- src/java/org/apache/regexp/RE.java\t6 Sep 2003 01:45:51 -0000\t1.14\n+++ src/java/org/apache/regexp/RE.java\t19 Dec 2003 03:16:44 -0000\n@@ -389,6 +389,12 @@\n      */\n     public static final int MATCH_SINGLELINE      = 0x0004;\n \n+    /**\n+     * Changes behavior of '-' in character classes where one or both\n+     * of the range limits are missing.\n+     */\n+    public static final int MATCH_POSIX           = 0x0008;\n+\n     /************************************************\n      *                                              *\n      * The format of a node in a program is:        *\n\n\nAnd change behavior of RECompiler depending on value of this match modifier.\n", "id": 49476, "time": "2003-12-20T18:03:02Z", "creator": "vgritsenko@apache.org", "creation_time": "2003-12-20T18:03:02Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "vgritsenko@apache.org", "attachment_id": null, "text": "Oops. Meant not MATCH_POSIX, but something more descriptive, say MATCH_POSIXRANGE.", "id": 49477, "time": "2003-12-20T18:03:53Z", "bug_id": 2121, "creation_time": "2003-12-20T18:03:53Z", "is_private": false}, {"count": 9, "tags": [], "creator": "son@sparc.spb.su", "attachment_id": null, "text": "The problem with MATCH_POSIX flag is that it's not a pure \"matching time\" flag\nas all other ones.  We need to make a decision on how interpret '-' during\n\"compile time\" (when we create program), because program for \"[-]\" and\n\"[\\u0000-\\uFFFF]\" will be the same.  I, personally, think that we shouldn't\nenhance program structure to catch this particular case IMHO this is overkill.\n\nI'd say that regexp package should just make a decision on how it handles \nincomplete ranges and does so without any flags.", "id": 52407, "time": "2004-02-17T06:42:34Z", "bug_id": 2121, "creation_time": "2004-02-17T06:42:34Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 2121, "text": "Well, then, I'm biased towards declaring this a \"feature\" of regexp - especially\ntaking into account all those years this behavior was in regexp.", "id": 52413, "time": "2004-02-17T11:27:55Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-02-17T11:27:55Z", "is_private": false, "attachment_id": null}, {"count": 11, "text": "I think we should write some javadoc about this feature and close this bug :)", "creator": "son@sparc.spb.su", "is_private": false, "id": 52450, "time": "2004-02-17T18:19:43Z", "bug_id": 2121, "creation_time": "2004-02-17T18:19:43Z", "tags": [], "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 2121, "attachment_id": null, "is_private": false, "id": 52660, "time": "2004-02-20T13:44:32Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-02-20T13:44:32Z", "text": "Yes! Do you want to wordsmith a javadoc patch? ;-)"}, {"count": 13, "tags": [], "creator": "son@sparc.spb.su", "attachment_id": null, "text": "I'm not an expert in javadoc writing, but here is my suggestion:\n\nIndex: src/java/org/apache/regexp/RE.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-regexp/src/java/org/apache/regexp/RE.java,v\nretrieving revision 1.19\ndiff -u -r1.19 RE.java\n--- src/java/org/apache/regexp/RE.java  17 Feb 2004 13:37:54 -0000      1.19\n+++ src/java/org/apache/regexp/RE.java  25 Feb 2004 04:05:22 -0000\n@@ -128,6 +128,12 @@\n  *    [a-zA-Z]             Character class with ranges\n  *    [^abc]               Negated character class\n  *\n+ * </pre>\n+ * <b>Note</b> that incomplete range will be interpreted as &quot;starts\n+ * from zero&quot; or &quot;ends with last character&quot;. <br> I.e. [-a] is\n+ * the same as [\\\\u0000-a], [a-] - [a-\\\\uFFFF] and [-] means\n+ * &quot;all characters&quot;\n+ * <pre>\n  * <br>\n  *\n  *  <b><font face=times roman>Standard POSIX Character Classes</font></b>\n", "id": 52911, "time": "2004-02-25T04:07:18Z", "bug_id": 2121, "creation_time": "2004-02-25T04:07:18Z", "is_private": false}, {"count": 14, "attachment_id": null, "bug_id": 2121, "text": "I'd applied your patch, and made few changes on top of it. Thanks :-)", "id": 53076, "time": "2004-02-27T02:16:44Z", "creator": "vgritsenko@apache.org", "creation_time": "2004-02-27T02:16:44Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 59869, "attachment_id": null, "is_private": false, "id": 192422, "time": "2016-07-16T17:40:09Z", "creator": "n.akhnin@ftc.ru", "creation_time": "2016-07-16T17:40:09Z", "text": "Configuration:\n<Proxy \"balancer://cluster\">\n  BalancerMember \"http://localhost:17293/webapp\" route=node1 retry=10 ping=1 connectiontimeout=1\n  BalancerMember \"http://localhost:17294/webapp\" route=node2 retry=10 ping=1 connectiontimeout=1\n</Proxy>\n\nProxyPass / \"balancer://cluster/\" stickysession=JSESSIONID|jsessionid failonstatus=502,503\n\nFor 2.4.16 and later versions, when backend node returns 503, Apache forces it into error state.\nSince 2.4.17 till 2.4.23, when 503 returned, nothing happens, node status is OK and Apache keep on proxying requests on this node\n\nThis behavior is reproduced both on Sparc machine and x86 VirtualBox VM"}, {"count": 1, "tags": [], "creator": "rpluem@apache.org", "text": "Created attachment 34050\nPatch against trunk\n\nDoes the attached patch against trunk (applies to 2.4.x with offset) fix your problem?\n\nIndex: modules/proxy/mod_proxy.c\n===================================================================\n--- modules/proxy/mod_proxy.c   (revision 1753164)\n+++ modules/proxy/mod_proxy.c   (working copy)\n@@ -1273,17 +1273,25 @@\n      * the error page on the proxy or if the error was not generated by the\n      * backend itself but by the proxy e.g. a bad gateway) in order to give\n      * ap_proxy_post_request a chance to act correctly on the status code.\n+     * But only do the above if access_status is not OK or DONE, because\n+     * in this case r->status might contain the true status and overwriting\n+     * it with OK or DONE would be wrong.\n      */\n-    saved_status = r->status;\n-    r->status = access_status;\n-    ap_proxy_post_request(worker, balancer, r, conf);\n-    /*\n-     * Only restore r->status if it has not been changed by\n-     * ap_proxy_post_request as we assume that this change was intentional.\n-     */\n-    if (r->status == access_status) {\n-        r->status = saved_status;\n+    if ((access_status != OK) || (access_status != DONE)) {\n+        saved_status = r->status;\n+        r->status = access_status;\n+        ap_proxy_post_request(worker, balancer, r, conf);\n+        /*\n+         * Only restore r->status if it has not been changed by\n+         * ap_proxy_post_request as we assume that this change was intentional.\n+         */\n+        if (r->status == access_status) {\n+            r->status = saved_status;\n+        }\n     }\n+    else {\n+        ap_proxy_post_request(worker, balancer, r, conf);\n+    }\n\n     proxy_run_request_status(&access_status, r);\n     AP_PROXY_RUN_FINISHED(r, attempts, access_status);", "id": 192472, "attachment_id": 34050, "bug_id": 59869, "creation_time": "2016-07-18T07:51:45Z", "time": "2016-07-18T07:51:45Z", "is_private": false}, {"count": 2, "text": "Created attachment 34051\nPatch against trunk\n\nFix logical error in if confdition:\n\nIndex: modules/proxy/mod_proxy.c\n===================================================================\n--- modules/proxy/mod_proxy.c   (revision 1753164)\n+++ modules/proxy/mod_proxy.c   (working copy)\n@@ -1273,17 +1273,25 @@\n      * the error page on the proxy or if the error was not generated by the\n      * backend itself but by the proxy e.g. a bad gateway) in order to give\n      * ap_proxy_post_request a chance to act correctly on the status code.\n+     * But only do the above if access_status is not OK and not DONE, because\n+     * in this case r->status might contain the true status and overwriting\n+     * it with OK or DONE would be wrong.\n      */\n-    saved_status = r->status;\n-    r->status = access_status;\n-    ap_proxy_post_request(worker, balancer, r, conf);\n-    /*\n-     * Only restore r->status if it has not been changed by\n-     * ap_proxy_post_request as we assume that this change was intentional.\n-     */\n-    if (r->status == access_status) {\n-        r->status = saved_status;\n+    if ((access_status != OK) && (access_status != DONE)) {\n+        saved_status = r->status;\n+        r->status = access_status;\n+        ap_proxy_post_request(worker, balancer, r, conf);\n+        /*\n+         * Only restore r->status if it has not been changed by\n+         * ap_proxy_post_request as we assume that this change was intentional.\n+         */\n+        if (r->status == access_status) {\n+            r->status = saved_status;\n+        }\n     }\n+    else {\n+        ap_proxy_post_request(worker, balancer, r, conf);\n+    }\n\n     proxy_run_request_status(&access_status, r);\n     AP_PROXY_RUN_FINISHED(r, attempts, access_status);", "bug_id": 59869, "is_private": false, "id": 192473, "time": "2016-07-18T07:55:34Z", "creator": "rpluem@apache.org", "creation_time": "2016-07-18T07:55:34Z", "tags": [], "attachment_id": 34051}, {"count": 3, "tags": [], "bug_id": 59869, "attachment_id": null, "is_private": false, "id": 192484, "time": "2016-07-18T10:28:03Z", "creator": "n.akhnin@ftc.ru", "creation_time": "2016-07-18T10:28:03Z", "text": "Yes, the problem is fixed.\n\nCan I expect that this patch will be included in the next release?"}, {"text": "Committed to trunk as r1753592. Backport proposal for 2.4.x will follow in a few days.", "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "count": 4, "id": 192553, "time": "2016-07-20T18:26:32Z", "bug_id": 59869, "creation_time": "2016-07-20T18:26:32Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59869, "attachment_id": null, "is_private": false, "id": 192646, "time": "2016-07-26T09:59:26Z", "creator": "rpluem@apache.org", "creation_time": "2016-07-26T09:59:26Z", "text": "Proposed for backport to 2.4.x as r1754075."}, {"text": "Backported to 2.4.24 in r1756562.", "tags": [], "creator": "ylavic.dev@gmail.com", "is_private": false, "count": 6, "id": 194969, "time": "2016-11-14T12:21:13Z", "bug_id": 59869, "creation_time": "2016-11-14T12:21:13Z", "attachment_id": null}]
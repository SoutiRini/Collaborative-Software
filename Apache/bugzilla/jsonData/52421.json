[{"count": 0, "tags": [], "bug_id": 52421, "is_private": false, "id": 152570, "creation_time": "2012-01-04T15:33:33Z", "time": "2012-01-04T15:33:33Z", "creator": "R.van.Harrevelt@cpb.nl", "text": "Created attachment 28119\nProgram that shows that autoSizeColumn produces too wide columns for large numbers.\n\nHello,\n\nThe method autoSizeColumn of class org.apache.poi.ss.usermodel.Sheet produces columns that are far too wide when the column contains large numbers such as 1e32. \n\nAttached is a simple Java program that demonstrates the problem for the HSSF format.  \n\nI have tried poi-3.7 and poi-3.8-beta5, with identical results for xls files. \nFor poi-3.8-beta5 the problem also occurs for the XSSF format.\n\nThanks,\n\nRob van Harrevelt", "attachment_id": 28119}, {"count": 1, "tags": [], "text": "This is expected behavior.\n\nPOI delegates formatting of numbers to java.text.DecimalFormat and this class does not support automatic switching to scientific notation. \n\nExplicitly set a exponential format and you will be good:\n\n\n\n         Workbook wb = new HSSFWorkbook();\n\n         //  create a cell style that formats numbers in scientific notation\n         CellStyle style = workbook.createCellStyle();\n         int idx = workbook.getCreationHelper().createDataFormat().getFormat(\"##0.0E+0\");\n         style.setDataFormat((short)idx);\n\n         double[] values = {1,  1e12, 1e32, 1e64};\n\n         Sheet sheet = wb.createSheet();\n         Row row = sheet.createRow(0);\n         for (int c = 0; c < values.length; c++) {\n             Cell cell = row.createCell(c);\n             cell.setCellValue(values[c]);\n             cell.setCellStyle(style);\n             sheet.autoSizeColumn(c);\n             System.out.println(\"column width /256 = \"\n                     + sheet.getColumnWidth(c) / 256);\n         }\n\nYegor", "is_private": false, "bug_id": 52421, "id": 152784, "time": "2012-01-14T17:46:15Z", "creator": "yegor@dinom.ru", "creation_time": "2012-01-14T17:46:15Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 46811, "attachment_id": null, "text": "To reproduce, succesively add, start and remove many many animation elements in a document programatically. The result is a memory leak caused by elements accumulating in two hash maps called animations and targets in the class AnimationEngine. \n\nPossible solution: removing elements from these two maps when an animation is removed, last two lines in the method. \n\n    /**\n     * Removes an animation from the document.\n     */\n    public void removeAnimation(AbstractAnimation anim) {\n        // org.apache.batik.anim.timing.Trace.enter(this, \"removeAnimation\", new Object[] { anim } ); try {\n        timedDocumentRoot.removeChild(anim.getTimedElement());\n        AbstractAnimation nextHigher = anim.higherAnimation;\n        if (nextHigher != null) {\n            nextHigher.markDirty();\n        }\n        moveToBottom(anim);\n        if (anim.higherAnimation != null) {\n            anim.higherAnimation.lowerAnimation = null;\n        }\n        AnimationInfo animInfo = getAnimationInfo(anim);\n        Sandwich sandwich = getSandwich(animInfo.target, animInfo.type,\n                                        animInfo.attributeNamespaceURI,\n                                        animInfo.attributeLocalName);\n        if (sandwich.animation == anim) {\n            sandwich.animation = null;\n            sandwich.lowestAnimation = null;\n            sandwich.shouldUpdate = true;\n        }\n        animations.remove(anim);\n        targets.remove(animInfo.target);\n        // } finally { org.apache.batik.anim.timing.Trace.exit(); }\n    }\n\nThis might not be the best solution.\n\nI use latest version of batik sources from svn trunk repository. Version from trunk: xml-batik 746059", "id": 125372, "time": "2009-03-06T00:21:52Z", "creator": "cristi.mim@gmail.com", "creation_time": "2009-03-06T00:21:52Z", "is_private": false}, {"count": 1, "tags": [], "creator": "helder.magalhaes@gmail.com", "text": "Created attachment 23346\nPatch from proposed changes\n\n(In reply to comment #0)\n> To reproduce, succesively add, start and remove many many animation elements\n> in a document programatically.\n\nCould you please attach a test case? I haven't investigated this properly, but being able to reproduce usually helps a lot. ;-)\n\n\n> Possible solution: removing elements from these two maps when an animation is\n> removed, last two lines in the method. \n\nStating which file was modified would avoid a find in files... :-P\nThe changes refer to sources/org/apache/batik/anim/AnimationEngine.java. I've created a patch to ease this. :-)\n\nBug 46155 and bug 46124 may also be related with this -- may this be a regression from those changes?...\n\n\nHope this helps,\n Helder Magalh\u00e3es", "id": 125374, "time": "2009-03-06T02:25:39Z", "bug_id": 46811, "creation_time": "2009-03-06T02:25:39Z", "is_private": false, "attachment_id": 23346}, {"count": 2, "tags": [], "bug_id": 46811, "text": "\n> Could you please attach a test case? I haven't investigated this properly, but\n> being able to reproduce usually helps a lot. ;-)\n\nA possible test case would look like this:\n\nElement[] animatedElements = new Element[100];\nwhile(true){\t\n\t//start 100 animations\n\tfor(int i=0;i<100;i++){\n\t\t//create the element to be animated\n\t\tElement animatedElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\t\n\t\tanimatedElement.setAttributeNS(null, \"x\", \"0\");\n\t\tanimatedElement.setAttributeNS(null, \"y\", \"0\");\t\t\n\t\tanimatedElement.setAttributeNS(null, \"width\", \"100\");\n\t\tanimatedElement.setAttributeNS(null, \"height\", \"100\");\n\t\tanimatedElement.setAttributeNS(null, \"style\", \"fill:red\");\n\t\n\t\t// add animation to the animatedElement\n\t\tElement animation = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateMotion\");\t\n\t\tanimation.setAttributeNS(null, \"begin\", \"indefinite\");\n\t\tanimation.setAttributeNS(null, \"dur\", \"1s\");\n\t\tanimation.setAttributeNS(null, \"fill\", \"freeze\");\n\t\tanimation.setAttributeNS(null, \"path\", \"M 0 0 L 100 100\");\n\t\t\t\t\t\t\t\t\t\n\t\t// add animation to animatedElement\n\t\tanimatedElement.appendChild(animation);\n\t\t// add the animated element to the document\n\t\t((SVGDocument) document).getRootElement().appendChild(animatedElement);\t\t\t\t\n\t\t// start the animation now\n\t\t((ElementTimeControl) animation).beginElement();\n\t\t//remember the animated element so that we can later remove it\n\t\tanimatedElements[i]=animatedElement;\n\t}\n\tThread.sleep(10);\n\t//remove the above created 100 animated elements\n\tfor(int i=0;i<100;i++){\t\t\t\n\t\t//remove animated element, this also removes the animation\n\t\tanimatedElements[i].getParentNode().removeChild(animatedElements[i]);\t\n\t}\n}\n\n> Stating which file was modified would avoid a find in files... :-P\nI did mention the name of the class AnimationEngine, sorry I didn't put it so that it's easier to see, it's the first time I submit a bug, ever as far as I can remember.\n\n> Bug 46155 and bug 46124 may also be related with this -- may this be a\n> regression from those changes?...\n\nI really don't know the details of batik developement or how things work in this complex library, I just profiled and found the place the memory leak happened and fixed the sources, I don't know if it's a good solution. Just needed a quick fix four our application, and tought to help you out a little to improve the libs.\n\nBest regards,\nCristi.", "id": 125381, "time": "2009-03-06T04:18:08Z", "creator": "cristi.mim@gmail.com", "creation_time": "2009-03-06T04:18:08Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "helder.magalhaes@gmail.com", "attachment_id": null, "text": "(In reply to comment #2)\n> > Stating which file was modified would avoid a find in files... :-P\n> I did mention the name of the class AnimationEngine, sorry I didn't put it so\n> that it's easier to see, it's the first time I submit a bug, ever as far as I\n> can remember.\n\nSorry, I didn't notice the class name. Of course that was sufficient. ;-)\nThanks for the report! :-)\n\n\n@Batik developers:\nPatch seems simple and safe to apply. Nevertheless, the proposed fix may be simply obfuscating something deeper... I'm also still not certain if this wasn't caused by any of the mentioned fixes (see comment 1).\n\nAlso, do you believe it's worth to wrap up a stand-alone SVG test case (based on the one in comment 2)? Maybe even try to integrate it into regard's memory leak tests...?", "id": 126274, "time": "2009-04-15T22:52:06Z", "bug_id": 46811, "creation_time": "2009-04-15T22:52:06Z", "is_private": false}]
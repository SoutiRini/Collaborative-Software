[{"count": 0, "tags": [], "bug_id": 21649, "text": "Apache 2 will start up just fine but fails when you issue a restart\nwith the error message \"httpd: bad user name nobody\".\n\nThis is on a Sun E450, dual CPU, running Solaris 7.\nApache 2.0.46, worker MPM, compiled with Sun CC Workshop 5.0.\n\nWe are only seeing this problem for a server which has ~200\nnamed/ip based virtual hosts.", "id": 40816, "time": "2003-07-16T12:51:26Z", "creator": "glenn@apache.org", "creation_time": "2003-07-16T12:51:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "a truss of the server during the restart processing might be helpful\n\nwild guess: Solaris user name lookup routines use stdio (which on Solaris has\nthe infamous 256-descriptor limitation), and at some intermittent point during\nrestart processing there are too many file descriptors open already, stdio gets\na descriptor > 255, and stdio fails to handle /etc/passwd properly\n", "id": 40821, "time": "2003-07-16T12:59:47Z", "bug_id": 21649, "creation_time": "2003-07-16T12:59:47Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 21649, "text": "I trussed the apache restart as you suggested and the fd for opening\n/etc/passwd was > 256.\n\n8603:1311/1:            open(\"/etc/passwd\", O_RDONLY)                   = 649\n\nShortly after this the truss ends as apache exits due to getpwnam failing.\n\nPerhaps the following workaround for this Solaris bug would work?\n\nLooking at worker_hooks() in worker.c (this would probably apply\nto all unix based workers), add another hook could be  to\nperform the User/Group config directive getpwnam/getgrnam resolution\nprior to triggering ap_hook_open_logs() ?\n", "id": 40883, "time": "2003-07-17T05:39:56Z", "creator": "glenn@apache.org", "creation_time": "2003-07-17T05:39:56Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "glenn@apache.org", "attachment_id": null, "text": "I have found a workaround for this Solaris bug.\n\n1.  Apply the patch I will attach later for os/unix/unixd.c.\n2.  Define DEFAULT_USER and DEFAULT_GROUP when building apache\n    to the user and group names you want apache child processes to\n    run as.\n3.  Remove the User and Group configuration lines from httpd.conf.\n\nWith these changes the getpwnam() and getgrnam() lookups for the\nDEFAULT_USER and DEFAULT_GROUP only happen when apache is first started.\nSubsequent reloads of apache will not trigger lookups of these defaults.\n\n\n", "id": 40935, "time": "2003-07-18T13:12:47Z", "bug_id": 21649, "creation_time": "2003-07-18T13:12:47Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 7371\nOnly resolve default user and group names once, when apache is started", "is_private": false, "bug_id": 21649, "id": 40936, "time": "2003-07-18T13:15:42Z", "creator": "glenn@apache.org", "creation_time": "2003-07-18T13:15:42Z", "attachment_id": 7371}, {"count": 5, "tags": [], "bug_id": 21649, "text": "FYI...  There is another Apache function broken by this limitation of the Solaris library \nroutines -- run-time lookup of home directories via mod_userdir.  There is an existing PR \nfor this (I'll try to find later) claiming that there is a thread-safety issue.  The problem really \nis that when the server is more heavily loaded more file descriptors can be in use for \nthose other active threads, and getpwnam() and friends can be more likely to fail.\n\nI think what is needed is something at a lower-level to make the APR code more resiliant.  \nThe best compromise I can think of is reading the darn /etc/passwd ourselves with APR \nbuffered I/O, which doesn't have the limitations of Solaris stdio w.r.t. file descriptor \nnumbers.  We'd first have to verify that the system is using /etc/passwd (instead of NIS or \nLDAP or whatever), and use the normal API if not using /etc/passwd.  Butt ugly, but doing \nthe fd slack stuff like Apache 1.3 is butt ugly too (trying to leave low-numbered fds \navailable by duping descriptors from open() or accept() to a higher fd then closing the \noriginal one we got from open() or accept()); it has some thread issues to work out too.\n", "id": 41651, "time": "2003-07-28T13:32:13Z", "creator": "trawick@apache.org", "creation_time": "2003-07-28T13:32:13Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "glenn@apache.org", "text": "I have found a third place where Solaris fd bug seems to be biting us.\nOn the server with ~200 virtual hosts I had to split out the SSL hosts\ninto a separate instance of apache.  Looks like mod_ssl/OpenSSL triggers\nthis bug when trying to read certs.\n\nParsing /etc/passwd directly is not a very portable solution.\nWe have Solaris systems where /etc/passwd entries are in NIS+,\nand other systems where we use a custom /etc/passwd module configured\nin nsswitch.conf which uses mysql for /etc/passwd data.  \n\nHmm, I wonder if a work around might be to setup the nobody account/group\nin NIS+.  That could bypass the fd problem.  Of course that might be\ndependent upon the search order in nsswitch.conf for /etc/passwd lookups.\n\n\n", "id": 41773, "time": "2003-07-30T13:46:43Z", "bug_id": 21649, "creation_time": "2003-07-30T13:46:43Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "I took NIS into account in my previous comments, but I forgot about the combined\nuse of NIS, /etc/passwd, LDAP in different orders, which is not something we can\nreliably get our hands in :)\n\nBacking up a bit...\n\nI can't reproduce the problem on Solaris 8, as it uses door calls:\n\n/1:       -> libc:__posix_getpwuid_r(0x3ea, 0xffbef8fc, 0xffbef6fc,\n0x200)open64(\"/etc/.name_service_door\", O_RDONLY)     = 3\nfcntl(3, F_SETFD, 0x00000001)                   = 0\ndoor_info(3, 0xFF142730)                        = 0\ndoor_call(3, 0xFFBEF168)\n...\n\n(In a different run I modified srclib/apr/testall.c to open 256 files, then\nverified that the testuser testcases still worked.)\n\nSo this is a nasty problem for Apache and other APR apps, Solaris 8 has\napparently resolved it, and there probably aren't any wonderful solutions that\nAPR can implement :(\n\nAny chance that Sun has a patch for Solaris 7 which resolves this?", "id": 41785, "time": "2003-07-30T15:05:47Z", "bug_id": 21649, "creation_time": "2003-07-30T15:05:47Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 21649, "text": "I can't see that it's feasible or at least worth doing anything about this in\nAPR or httpd.  It's solved merely by not using old versions of Solaris.", "id": 79557, "time": "2005-09-07T17:37:59Z", "creator": "jorton@redhat.com", "creation_time": "2005-09-07T17:37:59Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 57132, "attachment_id": null, "text": "I noted this issue when reviewing ImportHandler code after r1633440. I have test case that demonstrates it, but I do not have a fix yet.\n\njavax.el.ImportHandler.resolveClass(String name) should throw an ELException if the same class can be ambiguously found in several packages.\n\nTo do so, it relies on calling findClass(className, true) and on \"clazzes\" field that is a cache of classes keyed by their \"simple class names\". A simple class name is the name without its package.\n\nIf resolveClass(\"foo\") finds class foo in several packages then the first call to findClass() updates the clazzes cache and the second call finds the duplicate when trying to update the cache with a different class.\n\nIf resolveClass(\"foo\") call is repeated, expected result is to report the error again. The actual result is that the first thing it does is to look into the cache. It finds the first class there and returns it without any errors.", "id": 178688, "time": "2014-10-22T21:56:39Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-10-22T21:56:39Z", "is_private": false}, {"count": 1, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 32139, "text": "Created attachment 32139\n2014-10-22_tc8_57132_testcases.patch\n\nUpdated testcases for TestImportHandler to test that duplicate calls still report an error.\n\nA comment in ImportHandler class shows my first idea on fixing this. If I remove first duplicate from the cache it fixes duplicate check in resolveClass() but breaks duplicate check in importClass().\n\nI think that if I move duplicate removal from the cache into resolveClass() method itself, it will be fixed. But maybe there is a more clean solution.\n\n\nBTW, there is no control that the class name argument in resolveClass() is actually a simple name without a package. JavaEE javadoc says that it should be simple name, but there is no control of that fact. JavaEE does not say whether it is ELException or IAE to be thrown if such a check were added. I think it is an ELException. [1]\n\n[1] http://docs.oracle.com/javaee/7/api/javax/el/ImportHandler.html", "id": 178689, "time": "2014-10-22T22:10:21Z", "bug_id": 57132, "creation_time": "2014-10-22T22:10:21Z", "is_private": false}, {"count": 2, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 178696, "time": "2014-10-23T08:48:26Z", "bug_id": 57132, "creation_time": "2014-10-23T08:48:26Z", "is_private": false, "text": "The first (main) reported issue fixed by r1633769 and will be in Tomcat 8.0.15.\n\n> \n> BTW, there is no control that the class name argument in resolveClass() is\n> actually a simple name without a package. JavaEE javadoc says that it should\n> be simple name, but there is no control of that fact. JavaEE does not say\n> whether it is ELException or IAE to be thrown if such a check were added. I\n> think it is an ELException. [1]\n> \n> [1] http://docs.oracle.com/javaee/7/api/javax/el/ImportHandler.html\n\nThe above second issue is still pending. BTW, it can simply return \"null\" without reporting any errors.\n\nAlso noted the third issue:\n\nImportHandler.importClass() does not allow to import the exactly same class twice.\n\nI think that such imports shall be silently swallowed. It boils down to adding a check whether conflicting Class instances are the same, (conflict == clazz)."}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 178706, "time": "2014-10-23T13:45:12Z", "bug_id": 57132, "creation_time": "2014-10-23T13:45:12Z", "is_private": false, "text": "Reading the Javadoc for the second issue, I think returning null is a better response here. I've committed a couple of test cases and a fix for this.\n\nLooking at the third issue now..."}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Third issue fixed in 8.0.x for 8.0.15 onwards.", "id": 178707, "time": "2014-10-23T13:50:35Z", "bug_id": 57132, "creation_time": "2014-10-23T13:50:35Z", "is_private": false}, {"count": 5, "text": "(In reply to Konstantin Kolinko from comment #2)\n> Also noted the third issue:\n> \n> ImportHandler.importClass() does not allow to import the exactly same class\n> twice.\n> \n> I think that such imports shall be silently swallowed. It boils down to\n> adding a check whether conflicting Class instances are the same, (conflict\n> == clazz).\n\nI haven't read through the code to see how class object references are maintained, but I have been bitten in the past when Foo.class.getMethod(\"bar\").getName() == Foo.class.getMethod(\"bar\").getName() yields false.\n\nPerhaps clazz.equals(conflict) would be better than == in this case?", "creator": "chris@christopherschultz.net", "is_private": false, "id": 178710, "time": "2014-10-23T21:45:59Z", "bug_id": 57132, "creation_time": "2014-10-23T21:45:59Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 57132, "text": "(In reply to Christopher Schultz from comment #5)\n> \n> I haven't read through the code to see how class object references are\n> maintained, but I have been bitten in the past when\n> Foo.class.getMethod(\"bar\").getName() == Foo.class.getMethod(\"bar\").getName()\n> yields false.\n> \n> Perhaps clazz.equals(conflict) would be better than == in this case?\n\nMark's fix in r1633810 used conflict.equals(clazz), so it is OK.\n\n\nThe JVM specification (Java 8 edition) in chapter 5.3 Creation and Loading\nand Java Language Specification (Java 8 edition) in chapter 12.2 Loading of Classes and Interfaces both contain the same phrase:\n\n\"Given the same name, a good class loader should always return the same Class object.\"", "id": 178749, "time": "2014-10-25T16:23:41Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2014-10-25T16:23:41Z", "is_private": false, "attachment_id": null}]
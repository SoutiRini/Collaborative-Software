[{"count": 0, "tags": [], "creator": "burgoyne@keenuh.com", "text": "In working with a client experiencing performance issues, I came across the \nfollowing issue. They use Apache to front end a large number of back end web \nappliactions such as CGI's, Websphere, Domino, Cold Fusion, Dynamo, Oracle, \nWebspeed, etc.\n\nWhen the back end servers would stop answering, or even worse would accept the \ntcp connection but never reply back, the main Apache web server would hold the \nconnection for the full server timeout period which was set (for good reason) \nat 5 minutes. Their fierwall, however, would terminate a connection after 40 \nseconds if no data was transferred. Users would get firewall errors, hit reload \nand effectively open lock up a number of Apache processes for up to 5 minutes. \nThe machine would hits its limit of apaches and the site would be inaccessible.\n\nThe obvious answer is to fix the back end systems. Unfortunately one was a \nDomino bug and they had to wait for IBM. I proposed a new architecture with a \nfront end machine capable of handling their transaction load. In the short \nterm, however, something had to be done (the client is a government adgency, \nand they never seem to move things fast enough through the buraceracy).\n\nI therefore made some modifications in mod_proxy by identifying the sticking \npoints, and created a new timeout value not based upon the server config that I \ncould configure within the conf file so they could adjust it whatever firewall \nchanges came down. This was an overwhelming success for the client and dropped \ntheir downtime on the main web server by over 95%.\n\nThis seemed to me to be a good idea to pass back into Apache.\n\nFollowing is the source changes for 1.3.26 I had to make into the core, namely \nhttp_main.c. This is all new code.\n\n1571,1575d1570\n< static void proxy_timeout(int sig) \n< {                     \n<     cancel_proxy((request_rec *) timeout_req);\n<     timeout(sig);\n< }\n1578,1581d1572\n< \n< \n< \n< \n1747,1756d1737\n< }\n< \n< API_EXPORT(void) ap_config_timeout(int timeout_period, char *name, \nrequest_rec *r) \n< {  \n< #ifdef NETWARE  \n<     get_tsd  \n< #endif  \n<     timeout_req = r;  \n<     timeout_name = name;  \n<     ap_set_callback_and_alarm(proxy_timeout, timeout_period);\n\n\n\n\nThe only issue I had with the patch is that it actually has proxy stuff within \nthe main file. I believe the right way around this would be to pass a callback \nfunction to ap_config_timeout and store it in a global. I also do not like the \nfunction name ap_config_timeout. Should it be ap_variable_timeout? Any hints \nappreciated and I'll put the changes into my installation and test them.", "id": 59431, "time": "2004-06-17T17:17:38Z", "bug_id": 29648, "creation_time": "2004-06-17T17:17:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "slive@apache.org", "attachment_id": null, "text": "Just a tiny meta-comment: you are better off using \"diff -u\" format patches, and\nplease use the Attachment feature of bugzilla if there is a chance that there\nwill be line-wrapping problems (as there are below).", "id": 59434, "time": "2004-06-17T17:58:53Z", "bug_id": 29648, "creation_time": "2004-06-17T17:58:53Z", "is_private": false}]
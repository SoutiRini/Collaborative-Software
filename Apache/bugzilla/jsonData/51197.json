[{"count": 0, "tags": [], "creator": "dcheckoway@gmail.com", "is_private": false, "id": 146309, "attachment_id": null, "bug_id": 51197, "creation_time": "2011-05-13T12:50:26Z", "time": "2011-05-13T12:50:26Z", "text": "For some reason, response.sendRedirect and response.sendError are not producing expected behavior when using an AsyncContext.  On the server side, the async request completes normally, and everything looks hunky dory, but the client never gets ANY response from the server.  It appears that Tomcat simply times out after the default 10 seconds and closes the connection.  No headers are returned, no content, nothing.  I've confirmed with thread dumps that the server isn't stuck.\n\nYet...if you use response.setStatus and response.setHeader instead, it works absolutely fine.  The client gets the response every time.\n\nI put together a very simple test that isolates the issue reliably:\n\nhttps://github.com/dcheckoway/async-test\n\nSee the README in there for details.\n\nNOTE: the behavior for sendError changed slightly from 7.0.12 to 7.0.14.  As of 7.0.14, sendError seems to close the connection immediately, but the client still never gets any response of any kind."}, {"count": 1, "tags": [], "bug_id": 51197, "attachment_id": null, "id": 146310, "time": "2011-05-13T12:52:10Z", "creator": "dcheckoway@gmail.com", "creation_time": "2011-05-13T12:52:10Z", "is_private": false, "text": "Forgot to mention, I use the NIO connector:\n\n    <Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\" \n               connectionTimeout=\"20000\" \n               redirectPort=\"8443\" />"}, {"count": 2, "tags": [], "bug_id": 51197, "attachment_id": null, "text": "Thanks for the report. This has been fixed in 7.0.x and will be included in 7.0.15 onwards.", "id": 146427, "time": "2011-05-18T17:25:38Z", "creator": "markt@apache.org", "creation_time": "2011-05-18T17:25:38Z", "is_private": false}, {"count": 3, "tags": [], "creator": "zradick+asf@conducivetech.com", "is_private": false, "id": 153890, "attachment_id": null, "bug_id": 51197, "creation_time": "2012-02-17T18:34:07Z", "time": "2012-02-17T18:34:07Z", "text": "I am seeing the same behavior with Tomcat 7.0.25.  Within an asynchronous context this does not work as expected (the client does not receive any output):\n\nHttpServletResponse response = (HttpServletResponse)asyncContext.getResponse();\nresponse.sendError( responseCode, error );\n\nHowever, this does (the client receives the error output with an appropriate status code):\n\nHttpServletResponse response = (HttpServletResponse)asyncContext.getResponse();\nresponse.setStatus( responseCode );\nresponse.getOutputStream().write( error.getBytes() );\nresponse.getOutputStream().flush();\n\nIn both cases the underlying ServletResponse has the appropriate status set, but the results sent to the client differ.  I am using the default HTTP1.1 connector.\n\nThe behavior is reproducible in 7.0.16 as well (7.0.15 is no longer in the archives it seems).  I also tried using the Writer (as opposed to the OutputStream) to ensure that nothing had previously been written to the Stream, but it exhibited the same behavior."}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> I am seeing the same behavior with Tomcat 7.0.25.\n\nThe report is lacking in specifics of how to reproduce the problem. There is a unit test already for this issue that passes. I expanded it to cover calling sendError in a new thread and the same thread (this is one of the specifics the report is lacking) and both tests pass with BIO.\n\n> (7.0.15 is no longer in the archives it seems)\n\n7.0.15 was never in the archives since it was never released.\n\nBefore re-opening this issue, please ensure you have a complete minimal test case (i.e. a single servlet in source form) that can be used to demonstrate the issue on a clean Tomcat 7.0.x install using the latest available  version (7.0.25 at the time of writing this).\n\nYou may wish to explore this issue on the users mailing list first to confirm that there is indeed a bug here.", "attachment_id": null, "id": 153919, "creator": "markt@apache.org", "time": "2012-02-18T21:17:11Z", "bug_id": 51197, "creation_time": "2012-02-18T21:17:11Z", "is_private": false}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 153936, "attachment_id": null, "bug_id": 51197, "creation_time": "2012-02-20T01:00:26Z", "time": "2012-02-20T01:00:26Z", "text": "(In reply to comment #4)\n> There is a unit test already for this issue that passes. I expanded it\n> to cover calling\n> sendError in a new thread and the same thread (this is one of the specifics the\n> report is lacking) and both tests pass with BIO.\n\nFor reference,\nthe test is TestAsyncContextImpl - search for \"51197\" and see r1124342 and r1290875\n\nThe test does not check what response text is sent to the client. It just checks response status and the access log.\n\nIt might be that client is responded with correct HTTP status line, but HTTP response content is empty.\n\n\n1. I tried to update the doTestBug51197(..) test in TestAsyncContextImpl to test for error message, but it is not trivial.\nAs of now it is not possible to use the ByteChunk passed to getUrl() call. The URLConnection used to implement getUrl() cannot read content if response code is >= 400.  If I remove status code check in TomcatBaseTest#getUrl() to always read response text regardless of status code, it just fails with an IOException:\n\n[[[\nTestcase: testBug51197b took 4,188 sec\n\tCaused an ERROR\nServer returned HTTP response code: 400 for URL: http://localhost:3596/asyncErrorServlet\njava.io.IOException: Server returned HTTP response code: 400 for URL: http://localhost:3596/asyncErrorServlet\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n\tat sun.net.www.protocol.http.HttpURLConnection$6.run(HttpURLConnection.java:1491)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1485)\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1139)\n\tat org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:239)\n\tat org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:206)\n\tat org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:200)\n\tat org.apache.catalina.core.TestAsyncContextImpl.doTestBug51197(TestAsyncContextImpl.java:1207)\n\tat org.apache.catalina.core.TestAsyncContextImpl.testBug51197b(TestAsyncContextImpl.java:1177)\n\nCaused by: java.io.IOException: Server returned HTTP response code: 400 for URL: http://localhost:3596/asyncErrorServlet\n\tat sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1436)\n\tat java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)\n\tat org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:232)\n]]]\n\n\n2. I enabled access log in the test, by adding the following line to build.properties:\n\ntest.accesslog=true\n\nThe access log shows as if error message was sent to the client - see bytes count in the last column:\n[[[\n127.0.0.1 - - [20/Feb/2012:04:14:50 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-bio-127.0.0.1-auto-32-exec-2 3985\n127.0.0.1 - - [20/Feb/2012:04:14:56 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-bio-127.0.0.1-auto-33-exec-3 4000\n\n127.0.0.1 - - [20/Feb/2012:04:15:50 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-nio-127.0.0.1-auto-32-exec-2 4000\n127.0.0.1 - - [20/Feb/2012:04:15:56 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-nio-127.0.0.1-auto-33-exec-3 4000\n\n127.0.0.1 - - [20/Feb/2012:04:16:57 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-apr-127.0.0.1-auto-32-exec-3 4000\n127.0.0.1 - - [20/Feb/2012:04:17:02 +0400] \"GET /asyncErrorServlet HTTP/1.1\" 400 5 http-apr-127.0.0.1-auto-33-exec-4 4000\n]]]\n\n\n3. Finally I was able to reproduce the issue.\nI extracted AsyncErrorServlet as a standalone class, configured a simple web application and tried to access it directly. It reproduces the issue! The response is empty. Moreover access log shows that only 5 bytes were sent to the client.\n\n[[[\n127.0.0.1 - - [20/Feb/2012:04:39:53 +0400] \"GET /test/asyncErrorServlet?status=404&treaded=true HTTP/1.1\" 404 5\n127.0.0.1 - - [20/Feb/2012:04:40:03 +0400] \"GET /test/asyncErrorServlet?status=404&treaded=false HTTP/1.1\" 404 5\n127.0.0.1 - - [20/Feb/2012:04:40:42 +0400] \"GET /test/asyncErrorServlet HTTP/1.1\" 500 1472\n]]]\n\nI converted the constructor arguments to request parameters. If I call the servlet without arguments it fails on parseInt call, and see above - it responds with proper error 500 message of 1472 bytes.\n\nI will attach the war below.\n\n\n4. sendError() call as used in Comment 3 interacts with error handling.\nI have not tested how it behaves when there is a custom error page configured.\n\n5. BTW, r1290875 has not been merged into 7.0.x yet."}, {"count": 6, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 153938, "attachment_id": 28356, "bug_id": 51197, "creation_time": "2012-02-20T01:21:48Z", "time": "2012-02-20T01:21:48Z", "text": "Created attachment 28356\ntest.war - Reproducer for issue in Comment 3\n\nWAR that reproduces the issue.\n\n\n[[[\n127.0.0.1 - - [20/Feb/2012:04:39:53 +0400] \"GET\n/test/asyncErrorServlet?status=404&treaded=true HTTP/1.1\" 404 5\n]]]\n\nI made a typo while testing it, it should have been s/treaded/threaded/. An odd thing is that I do not see any difference whether \"threaded\" is true or false. The request takes ~3 seconds to execute regardless of that parameter.\n\n\n[[[\n127.0.0.1 - - [20/Feb/2012:04:16:57 +0400] \"GET /asyncErrorServlet HTTP/1.1\"\n400 5 http-apr-127.0.0.1-auto-32-exec-3 4000\n127.0.0.1 - - [20/Feb/2012:04:17:02 +0400] \"GET /asyncErrorServlet HTTP/1.1\"\n400 5 http-apr-127.0.0.1-auto-33-exec-4 4000\n]]]\n\nApparently \"5\" above was the size. The 4000 is the timing. Why it is 4000 and not 3000 (TIMEOUT)?"}, {"count": 7, "tags": [], "bug_id": 51197, "attachment_id": null, "text": "Konstantin,\n\n(In reply to comment #5)\n> The\n> URLConnection used to implement getUrl() cannot read content if response code\n> is >= 400.If I remove status code check in TomcatBaseTest#getUrl() to always\n> read response text regardless of status code, it just fails with an\n> IOException:\n\nYou have to use URLConnection.getErrorStream if the response code is \"problematic\". I have this code in a class that fetches data from an HTTP server:\n\n        int responseCode = conn.getResponseCode();\n\n        boolean error = 5 == responseCode / 100\n            || 4 == responseCode / 100;\n\n        if(error)\n            in = new BufferedInputStream(conn.getErrorStream());\n        else\n            in = new BufferedInputStream(conn.getInputStream());\n\nThen I just use \"in\" as I please.\n\n> Caused by: java.io.IOException: Server returned HTTP response code: 400 for\n> URL: http://localhost:3596/asyncErrorServlet\n>     at\n> sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1436)\n>     at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)\n>     at\n> org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:232)\n> ]]]\n\nWeird that it's throwing an exception from getResponseCode. What JRE are you using?", "id": 153999, "time": "2012-02-21T16:48:05Z", "creator": "chris@christopherschultz.net", "creation_time": "2012-02-21T16:48:05Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 51197, "attachment_id": null, "text": "(In reply to comment #7)\n> You have to use URLConnection.getErrorStream if the response code is\n> \"problematic\". I have this code in a class that fetches data from an HTTP\n> server:\n> \n>         int responseCode = conn.getResponseCode();\n> \n>         boolean error = 5 == responseCode / 100\n>             || 4 == responseCode / 100;\n> \n>         if(error)\n>             in = new BufferedInputStream(conn.getErrorStream());\n>         else\n>             in = new BufferedInputStream(conn.getInputStream());\n> \n> Then I just use \"in\" as I please.\n> \n\nThank you! Good advise.\n\n> > Caused by: java.io.IOException: Server returned HTTP response code: 400 for\n> > URL: http://localhost:3596/asyncErrorServlet\n> >     at\n> > sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1436)\n> >     at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)\n> >     at\n> > org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:232)\n> > ]]]\n> \n> Weird that it's throwing an exception from getResponseCode. What JRE are you\n> using?\n\n6u31.\ngetResponseCode() call cashes the exception but does not return it. Then subsequent call to getInputStream() wraps this original exception as the cause.", "id": 154000, "time": "2012-02-21T17:17:06Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-02-21T17:17:06Z", "is_private": false}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n> getResponseCode() call [caches] the exception but does not return it. Then\n> subsequent call to getInputStream() wraps this original exception as the cause.\n\nThat's ... confusing behavior. Thanks for identifying that. I was hoping that my code wouldn't still fail because of the exception's stack trace (indicating that the exception was thrown from getResponseCode). Looks like it's *initialized* in getResponseCode but not actually thrown until later. Weird.", "attachment_id": null, "id": 154004, "creator": "chris@christopherschultz.net", "time": "2012-02-21T19:53:33Z", "bug_id": 51197, "creation_time": "2012-02-21T19:53:33Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 51197, "text": "The base test case has been updated to return a response body for error responses.\n\nThe ErrorReportValve has been updated to write a response body if sendError() is called during an async request if it is being handled on a container thread. As per SRV 10.9.2, if an error occurs during an async request on an application thread, writing the response body - if any - is entirely an application responsibility.", "id": 154539, "time": "2012-03-05T12:25:29Z", "creator": "markt@apache.org", "creation_time": "2012-03-05T12:25:29Z", "is_private": false, "attachment_id": null}]
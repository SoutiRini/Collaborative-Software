[{"count": 0, "tags": [], "creator": "michael.cepek@spanlink.com", "attachment_id": null, "text": "Summary:  a new task is needed to allow a set of Ant scripts to merely configure\nsome settings and then delegate the actual execution of targets to one central,\ncommon Ant script for the project.\n\nThe Problem:  Consider creating one \"Master\" Ant script for a project which\nencapsulates the features, dependencies, and functionality for the most common\ntargets (such as compile, build, javadoc, clean, and their project-wide\nequivalents like build-all, clean-all, etc).  For example, one target in this\nMaster script might be:\n\n    <target name=\"compile-pkg\">\n        <pathconvert refid=\"dependencies\" property=\"has_deps\"\n                dirsep=\"${file.separator}\" setOnEmpty=\"false\"/>\n        <antcall target=\"compile-dependencies\" inheritRefs=\"true\"/>\n        <mkdir dir=\"${CLASS_DIR}\"/>\n        <property name=\"excludes\" value=\"\"/> <!-- no-op if already set -->\n        <javac srcdir=\"${SRC_JAVA_DIR}\"\n                includes=\"${PKG_PATH}/**/*.java\"\n                classpathref=\"compile_classpath\"\n                destdir=\"${CLASS_DIR}\"\n                excludes=\"${excludes}\"\n                deprecation=\"on\" debug=\"on\"/>\n    </target>\n\nIt is wonderful to encapsulate all the logic for this target in one place. \nHowever, to make use of it, every (subordinate) script which calls this target\nin this Master script has to use code like:\n\n    <target name=\"compile\" depends=\"init\"\n                description=\"compiles sources in this package\">\n        <ant antfile=\"${MASTER}\" target=\"compile-pkg\" inheritrefs=\"true\">\n                <reference refid=\"my_dependencies\" toRefid=\"dependencies\"/>\n        </ant>\n    </target>\n\nFurther, every subordinate script must be edited to accomodate most changes made\nto improve the master script, or to add or change functionality.  This\ncopy-n-paste replication is brittle and difficult to maintain.\n\nThe Solution:  A new <delegate> task which specifies an Ant script which should\n\"take over\" the completion of the current script, including all (unfinished?)\ntargets.\n\nThe current <ant>, <antcall> and <subant> tasks are specific to a single target.\n This new <delegate> task would transfer control for ALL remaining targets.\n\nProperty and reference inheritance is particularly important.  The example above\nillustrates how the master script \"compile-pkg\" target uses its\n\"compile-dependencies\" target to compile all dependent items.  Those\ndependencies are passed in from the subordinate script to the Master script\nusing the <reference toRefId=\"...\"> task.  Note that the Master will likely call\nother subordinate scripts for those dependent compiles.\n\nThe following three lines could replace ALL the subordinate script tasks like\ncompile, compile-all, build, build-all, javadoc, javadoc-all, javadoc-pub, etc:\n\n    <delegate antfile=\"${MASTER}\" inheritrefs=\"true\">\n        <reference refid=\"my_dependencies\" toRefid=\"dependencies\"/>\n    </delegate>\n\nIn otherwords, these three lines would replace scores of replicated lines in\nevery subordinate script.\n\nThe Ant command-line argument -find doesn't quite cut it either, since each\nsubordinate script will have customized elements (like defining the\n\"my_dependencies\" path reference in the examples here).\n\nAs far as the subordinate script is concerned, all the targets in the Master\nscript are available.  Thus, -projecthelp and IDE integration should list the\ntargets in delegates as well as any in the subordinate task itself.  Note that\nadding a target to the Master would then automatically \"include\" that as a new\ntarget in every subordinate script.\n\nMany simplifying assumptions could be made to reduce the scope of a task like\nthis and make implementation more feasible, including:\n - <delegate> is only allowed outside of a <target>\n - any <target>s after a <delegate> are ignored\n - arguments to <delegate> match those in <ant> (except that target=\"\" is not\nallowed)", "id": 74677, "time": "2005-05-10T18:04:08Z", "bug_id": 34845, "creation_time": "2005-05-10T18:04:08Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 34845, "text": "How does the import task not accomplish what you are asking for?", "id": 74678, "time": "2005-05-10T18:14:32Z", "creator": "mbenson@apache.org", "creation_time": "2005-05-10T18:14:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "michael.cepek@spanlink.com", "text": "Ah, import.  Yes.  I missed that the first dozen times I read through the docs\n(honestly, I did!).  I'm currently working on refactoring my scripts to use that\nto accomplish my goals.  I'm cancelling this RFE, and will note any further\ncomments here.  My apologies for not RTFM well enough, spamming the list with\nthis, etc.  Thank you.", "id": 74685, "attachment_id": null, "bug_id": 34845, "creation_time": "2005-05-10T20:14:48Z", "time": "2005-05-10T20:14:48Z", "is_private": false}]
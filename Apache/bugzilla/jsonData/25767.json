[{"count": 0, "tags": [], "creator": "jglick@apache.org", "text": "Comments on when JAXPUtils creates new factory / parser / document builder\nobjects and when it caches them.\n\n1. Correctness:\n\nprivate static SAXParserFactory parserFactory = null;\npublic static synchronized SAXParserFactory getParserFactory() {\n    if (parserFactory == null) {\n        parserFactory = newParserFactory();\n    }\n    return parserFactory;\n}\n\n(and similar methods) is likely not correct. An instance of SAXParserFactory is\nnot thread-safe and might not be reentrant, according to its Javadoc. If more\nthan one thread in the JVM is calling this method and using the same parser,\nrandom corruption might result - this might happen to someone using <parallel>,\nfor example; or someone running several builds at once using an IDE integration.\nOr if this method is called in the middle of a parse for some reason - to parse\nsome referenced file? - there might be corruption; at least SAX1's Parser says\nit is not reentrant.\n\n2. Performance: casual examination of the performance of running a tiny build\nscript w/ several antlib.xml's over and over using a profiler shows some 20-30%\nof the CPU time being spent in JAXPUtils.getNamespaceXMLReader(), specifically\ncalling Xerces' SAXParserImpl.<init>(). Not an especially cheap call since it\nsets up a lot of objects of various kinds; you are supposed to cache the result\nfrom call to call if you want good performance and might be parsing a lot of\nfiles. (E.g. a lot of small antlib.xml's, or many little build.xml's with\n<subant>, etc.) Note that this time is not spent actually parsing the XML or\neven opening the input stream to it - just getting a parser object.\n\nSuggested fix to both problems:\n\n1. Rework the helper methods in JAXPUtils to cache not just the factory objects\nbut the parsers & document builders themselves. I don't know how expensive\ngetting the factory is - JAXPUtils already caches them, and my profiling only\ntook place on a \"warmed-up\" JVM - but invoking the factories' new*() methods is\ntoo expensive to do every time an XML file is parsed.\n\n2. Leave uncached impls as e.g. SAXParser createSAXParser() and so on - these\nwould always create new ones. Or for compatibility, keep the current method\nnames, but deprecate them in favor of properly cached versions (see #3).\n\n3. For cached usage, use e.g. SAXParser obtainSAXParser() and void\nreleaseSAXParser(SAXParser) methods. These should use java.lang.ThreadLocal:\n\nprivate static final ThreadLocal/*<SAXParser>*/ saxParser = new ThreadLocal();\npublic static SAXParser obtainSAXParser() {\n    SAXParser p = (SAXParser)saxParser.get();\n    if (p != null) {\n        saxParser.set(null);\n    } else {\n        p = createSAXParser();\n    }\n    return p;\n}\npublic static void releaseSAXParser(SAXParser p) {\n    saxParser.set(p);\n}\n\n// Usage:\nSAXParser p = obtainSAXParser();\ntry {\n   // parse...\n} finally {\n    releaseSAXParser(p);\n}\n\nForgetting to release a parser is not a big deal, it will just need to be\nrecreated on the next obtain*() call. Using ThreadLocal ensures that different\nthreads never share the same object. Setting the ref to null in obtain*()\nensures that reentrant calls (i.e. calling obtain*() while the last-obtained\nparser is still in use) will be safe.\n\nOne issue is that several utility methods do not return the original cacheable\nobject, but rather something derived from it, e.g.\n\nreturn newSAXParser(getNSParserFactory()).getXMLReader();\n\nFor this usage you should probably have obtainNamespaceXMLReader +\nreleaseNamespaceXMLReader, etc. - i.e. keep a separate cache for each kind of\nobject - since you can't get back to the SAXParser from the XMLReader.\n\nCould try to provide a patch if there is interest - at least modifications to\nJAXPUtils, and usage of the new methods in e.g. ProjectHelper2.parse().", "id": 49721, "time": "2003-12-26T17:51:06Z", "bug_id": 25767, "creation_time": "2003-12-26T17:51:06Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 25767, "is_private": false, "count": 1, "id": 49724, "time": "2003-12-27T03:05:03Z", "creator": "jglick@apache.org", "creation_time": "2003-12-27T03:05:03Z", "text": "Correction from the JAXP 1.2 spec - for factories it is only the configuration\nmethods which are not thread-safe; the new*() constructor methods are\nthread-safe. So there is probably no correctness error in this regard in\nJAXPUtils since the only cached objects are factories. Performance note still holds."}]
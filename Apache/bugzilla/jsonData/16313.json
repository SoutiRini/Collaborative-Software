[{"count": 0, "tags": [], "bug_id": 16313, "attachment_id": null, "is_private": false, "id": 29831, "time": "2003-01-22T03:13:45Z", "creator": "drew@damnimp.com", "creation_time": "2003-01-22T03:13:45Z", "text": "Specifying more than one file with the MMapFile configuration command causes \nhttpd to core dump with a Segmentation fault.  Problem did not happen in 2.0.43.\n\nSome debug of the code with gdb shows that mmap_cleanup (mmap.c) is called with \na *themap with it's next and prev pointers set to NULL, causing APR_RING_REMOVE \nto fail.\n\nTested with MMapFile commands:\nMMapFile /usr/local/apache/htdocs/apache_pb2.gif\nMMapFile /usr/local/apache/htdocs/apache_pb2.png\n(also segfaults if both files specified with one MMapFile command)\n\nHere is the gdb dump:\n\n(gdb) r -DONE_PROCESS\nStarting program: /usr/local/apache/bin/httpd -DONE_PROCESS\n[New Thread 1024 (LWP 19351)]\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 1024 (LWP 19351)]\n0x400fca8d in mmap_cleanup (themmap=0x80e6340) at mmap.c:90\n90          APR_RING_REMOVE(mm,link);\n(gdb) where\n#0  0x400fca8d in mmap_cleanup (themmap=0x80e6340) at mmap.c:90\n#1  0x400fe986 in apr_pool_cleanup_run (p=0x80a8ef0, data=0x80e6340, \ncleanup_fn=0x400fca58 <mmap_cleanup>) at apr_pools.c:1967\n#2  0x400fccee in apr_mmap_delete (mm=0x80e6340) at mmap.c:195\n#3  0x402ce2a2 in cleanup_file_cache (sconfv=0x80d7870) at mod_file_cache.c:177\n#4  0x400fe9c7 in run_cleanups (cref=0x80a8f00) at apr_pools.c:1976\n#5  0x400fde3f in apr_pool_clear (pool=0x80a8ef0) at apr_pools.c:718\n#6  0x08071d08 in main (argc=2, argv=0xbffffb04) at main.c:608\n#7  0x401a0657 in __libc_start_main (main=0x80715fc <main>, argc=2, \nubp_av=0xbffffb04, init=0x80609c4 <_init>, \n    fini=0x80917a0 <_fini>, rtld_fini=0x4000dcd4 <_dl_fini>, \nstack_end=0xbffffafc) at ../sysdeps/generic/libc-start.c:129"}, {"count": 1, "tags": [], "creator": "jwoolley@apache.org", "text": " aawwwww mannnnnnnnnn.  :(  That would be my fault.  Sheesh.  I'll look into  it.  Thanks for the report and the backtrace! ", "id": 29832, "time": "2003-01-22T04:19:24Z", "bug_id": 16313, "creation_time": "2003-01-22T04:19:24Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "Try the patch given in  \nhttp://marc.theaimsgroup.com/?l=apache-httpd-dev&m=104321419500550&w=2 and see \nif that fixes it for you.  Assuming it stops crashing, try some server restarts \nand make sure you don't get any memory or file descriptor leaks. \n \nThanks, \nCliff ", "bug_id": 16313, "is_private": false, "id": 29838, "time": "2003-01-22T05:50:23Z", "creator": "jwoolley@apache.org", "creation_time": "2003-01-22T05:50:23Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 16313, "attachment_id": null, "text": "Tried the patch...it works just fine.\nOut of interest though, instead of (or also with) deleting the section of code \nthat calls the APR_RING_REMOVE define, why not just add error-checking into the \nAPR_RING_UNSPLICE define with a couple of 'if' statements in apr_ring.h?\nExample:\n\n#define APR_RING_UNSPLICE(ep1, epN, link) do {                          \\\n        if (APR_RING_PREV((ep1), link))                                 \\\n                APR_RING_NEXT(APR_RING_PREV((ep1), link), link) =       \\\n                        APR_RING_NEXT((epN), link);                     \\\n        if (APR_RING_NEXT((epN), link))                                 \\\n                APR_RING_PREV(APR_RING_NEXT((epN), link), link) =       \\\n                        APR_RING_PREV((ep1), link);                     \\\n   } while (0)\n\nI tested this modification with the original mod_file_cache.c and it seems to \nwork as well.  Although, truth be told, I'm not entirely sure how to find out \nif it has memory or fd leaks (I program mainly on win32...unix still mystifies \nme at times!)  The only reason I'd suggest this is to keep this same problem \nhappening in potential future modules that register a cleanup call for a \nsimular list.\n\nThanks-\nDrew\n", "id": 29907, "time": "2003-01-22T23:23:09Z", "creator": "drew@damnimp.com", "creation_time": "2003-01-22T23:23:09Z", "is_private": false}, {"count": 4, "text": "It's a design decision we made through all of APR: we don't test for NULL.  If it's NULL, that's a bug, and it will cause a segfault.  If it segfaults, that's good, because it lets us find the bug very easily.  Another concern is that code with no bugs will never have those pointers be NULL, so non-buggy code would be paying a performance penalty just to accommodate buggy code.  Thanks for testing the patch.  I'll look for leaks myself.  --Cliff ", "creator": "jwoolley@apache.org", "attachment_id": null, "id": 29908, "time": "2003-01-22T23:51:51Z", "bug_id": 16313, "creation_time": "2003-01-22T23:51:51Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 16313, "attachment_id": null, "id": 29909, "time": "2003-01-23T00:40:10Z", "creator": "drew@damnimp.com", "creation_time": "2003-01-23T00:40:10Z", "is_private": false, "text": "Heh..makes sense!  Thanks for quick fix on this.\nLooking forward to the next release!\n-Drew"}]
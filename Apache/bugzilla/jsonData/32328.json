[{"count": 0, "tags": [], "bug_id": 32328, "text": "This patch will add ampersand escaping to apache2 as  \nrecently posted to the dev@httpd list. \n \nexample use (from URL above): \nRewriteMap ampescape int:ampescape \nRewriteRule ^/(.*)$ /index.php?title=${ampescape:$1} [L,QSA] \n \nregards, \nChristian Parpart.", "id": 67272, "time": "2004-11-19T22:44:18Z", "creator": "trapni@gentoo.org", "creation_time": "2004-11-19T22:44:18Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 32328, "text": "Created attachment 13507\nadds the ampescape function\n\nand here the patch", "id": 67273, "time": "2004-11-19T22:47:47Z", "creator": "trapni@gentoo.org", "creation_time": "2004-11-19T22:47:47Z", "is_private": false, "attachment_id": 13507}, {"attachment_id": 13508, "tags": [], "creator": "trapni@gentoo.org", "text": "Created attachment 13508\nadds the ampescape function\n\n* adapted patch to ASF's coding style\n* the old patch was against 2.0.52, this patch is against HEAD", "count": 2, "id": 67275, "time": "2004-11-19T23:06:22Z", "bug_id": 32328, "creation_time": "2004-11-19T23:06:22Z", "is_private": false}, {"count": 3, "tags": [], "text": "Looks good here, and this has been added as a default patch in Gentoo.", "attachment_id": null, "id": 73363, "creator": "chip@force-elite.com", "time": "2005-04-06T23:06:49Z", "bug_id": 32328, "creation_time": "2005-04-06T23:06:49Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 32328, "text": "too special, as discussed on dev (long time ago).\nSo I'm still -1 on it.", "id": 73375, "time": "2005-04-07T05:33:59Z", "creator": "nd@perlig.de", "creation_time": "2005-04-07T05:33:59Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 32328, "text": "Andr\u00e9 Malo, maybe you have the time for writing the proposed more-generic \nextension? Because I (in my case) actually don't have it :( ", "id": 73376, "attachment_id": null, "creator": "trapni@gentoo.org", "creation_time": "2005-04-07T05:37:12Z", "time": "2005-04-07T05:37:12Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 32328, "attachment_id": null, "id": 73378, "time": "2005-04-07T08:11:15Z", "creator": "mads@apache.org", "creation_time": "2005-04-07T08:11:15Z", "is_private": false, "text": "I have to agree with Andr\u00e9s -1 - we could be adding a bunch of these to handle\nall sorts of special cases and that hardly makes sense.\nIf anything, we need a way to do something like the unix tr, not a special case\n\"hack\"."}, {"count": 7, "tags": [], "bug_id": 32328, "attachment_id": null, "id": 77457, "time": "2005-07-20T08:34:58Z", "creator": "nd@perlig.de", "creation_time": "2005-07-20T08:34:58Z", "is_private": false, "text": "Could someone tell me, what the problem (?) described on that url has to do with\nthe patch? The \"obvious\" rewriterule there is just plain wrong:\n\nRewriteRule ^/(.*)\\?(.*)$ /index.php?title=$1&$2 [L]\n\nRewriteRules don't match the querystring. Period. There's no known issue about\nit. The obvious rule would be:\n\nRewriteRule ^/(.*) /index.php?title=$1 [L,QSA]\n\nWhat am I missing?"}, {"count": 8, "tags": [], "creator": "lowzl@hotmail.com", "text": "The problem with rewriting /(.*) to /index.php?title=$1 is that $1 containing &\nwould not escaped correctly, even if the user's URL had escaped & to %26.\n\nFor example, /AT%26T would be rewritten to /index.php?title=AT&T instead of\n/index.php?title=AT%26T - causing title to only contain 'AT' instead of the\nexpected 'AT&T'. \n\nI think this patch is important even though it is too special because & is a\nimportant character in query strings - just as / is a very important character\nin path strings - it is quite possible that this case would more often with\nother web applications if people made more use of mod_rewrite.", "id": 79224, "time": "2005-08-31T11:46:08Z", "bug_id": 32328, "creation_time": "2005-08-31T11:46:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 32328, "text": "From the latest patch:\nunsigned char *copy = (char *)apr_palloc(r->pool, 3 * strlen(key) + 3);\n\nshouldn't that be \nchar *copy = (char *)apr_palloc(r->pool, 3 * strlen(key) + 3);\nsince your doing a cast to (char *) instead to (unsigned char *) _and_ since the\nfunction returns char * instead of unsigned char * as per its definition?", "id": 80086, "time": "2005-09-18T03:35:58Z", "creator": "stadli@gmx.de", "creation_time": "2005-09-18T03:35:58Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 32328, "attachment_id": null, "id": 80093, "time": "2005-09-18T22:46:36Z", "creator": "trapni@gentoo.org", "creation_time": "2005-09-18T22:46:36Z", "is_private": false, "text": "yeah, makes sense in any way, however, there are more \"unsigned\" that might be \neliminated then. \n \nSome (longer) time ago, httpd-dev mailinglist members recommented in writing a \nMORE GENERIC variant of this patch, I can't remember exactly, however, it \nshould be done anyway in order to get something like this functionality in.  \n \n(I'm still not that familar with this kinda apache API anyway :( "}, {"count": 11, "tags": [], "bug_id": 32328, "attachment_id": null, "id": 90437, "time": "2006-06-21T13:01:06Z", "creator": "steven@acko.net", "creation_time": "2006-06-21T13:01:06Z", "is_private": false, "text": "The same problem occurs with # (%23) and is even more destructive there:\n\nRewriteRule ^/(.*) /index.php?title=$1&something=else\n\n/Foo%#23Bar\nwill get rewritten to:\n/index.php?title=Foo#Bar&something=else\n\nThe 'Bar&something=else' is interpreted as a fragment identifier (i.e. page anchor) and ignored on the \nserver side. The proposed patch is pretty short-sighted because it only treats one symptom, not the \ncause.\n\nWhy does mod rewrite need to unescape these characters in the first place? Special characters like & \nand # do not mean the same as %26 and %23 within in the context of an URL. By unescaping, this \ninformation is being lost...\n\nAt the very least, this unescaping should be optional.\n\nI think you can fix most issues by just using the 'escape' RewriteMap on the substitute, but this is far \nfrom practical as it needs to be set globally for the entire server. This rules it out for hosted \nenvironments where usually the most you get is .htaccess. Is there any reason why the built-in map \nfunctions (toupper, tolower, escape, unescape) still need a very redundant RewriteMap directive?\n\nSo I guess the optimal solution would either:\n- Allow you to turn off this automatic unescaping with a rewriterule flag (or similar) in htaccess\n- or Allow you to use the built-in map functions directly without requiring those redundant RewriteMap \ndirectives"}, {"count": 12, "tags": [], "creator": "bobsiegen@googlemail.com", "attachment_id": null, "id": 98539, "time": "2007-01-25T19:01:41Z", "bug_id": 32328, "creation_time": "2007-01-25T19:01:41Z", "is_private": false, "text": "(In reply to comment #11)\n> Why does mod rewrite need to unescape these characters in the first place?\nSpecial characters like & \n> and # do not mean the same as %26 and %23 within in the context of an URL. By\nunescaping, this \n> information is being lost...\n\nAt the early beginning, when the internal request processing starts, apache\nunescapes the URL-path once. This is not done by mod_rewrite, this happens\nbefore mod_rewrite is involved and I think this is also a part of the security\nconcept. \n\nIf you are using your rewrite rules in directory context, you have a filename (a\nphysical path, e.g. /var/www/abc) while the per-dir prefix is stripped (so\nyou're matching only against the local path 'abc' if your rules are stored in\n/var/www/). How would you map some unescaped URL-path to the file system?\nThere's no way to make the unescaping process optional for a physical path in\ndirectory context.\n\nURL-path and QueryString have different rules for encoding. The QueryString is\nleft untouched (by browser [except spaces] and server) while reserved and\nspecial chars in the URL-path must be requested hex-encoded by the client.\nApache unescapes URL-path in order to process the request.\n\nA way to soften this problem would be a map function which encodes all\nnon-[a-zA-Z0-9/,._-] characters into their %FF hex representation as discussed\nabove.\n\nIf you need the unescaped uri with all its consequences, use the ENV\nTHE_REQUEST, which contains the full untouched request string like\nGET /foo%20bar?foo=bar HTTP/1.1\n\nBTW: You can also analyze $_SERVER['REQUEST_URI'] within your php script and set\nthe variable 'title' there. That would be another workaround for scripts (typo3\nis using this method)."}, {"count": 13, "tags": [], "bug_id": 32328, "attachment_id": null, "id": 98542, "time": "2007-01-25T19:03:10Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2007-01-25T19:03:10Z", "is_private": false, "text": "*** Bug 39739 has been marked as a duplicate of this bug. ***"}, {"count": 14, "tags": [], "creator": "postmaster@raasu.org", "attachment_id": null, "text": "\n\n*** This bug has been marked as a duplicate of 23295 ***", "id": 100194, "time": "2007-03-08T13:11:29Z", "bug_id": 32328, "creation_time": "2007-03-08T13:11:29Z", "is_private": false}, {"count": 15, "tags": [], "text": "This PR is an enhancement request to implement a new internal map function which\nstill needs to be written more-generic.", "attachment_id": null, "id": 100225, "creator": "bobsiegen@googlemail.com", "time": "2007-03-09T10:06:06Z", "bug_id": 32328, "creation_time": "2007-03-09T10:06:06Z", "is_private": false}]
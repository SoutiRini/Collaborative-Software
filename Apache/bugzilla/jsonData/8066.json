[{"count": 0, "tags": [], "bug_id": 8066, "attachment_id": null, "text": "There has been some talk of extracting the EL implementation from JSTL\nand putting it into \"commons\".  Whether that happens or not, it would\nstill be a good idea to prepare for it by separating the EL\nimplementation into a part that is generic, and a part that interfaces\nit to the JSTL-specific environment.  The following areas would have\nto be \"genericized\":\n\n  * variable lookups, including implicit objects\n  * the variable lookup context (currently PageContext)\n  * throw something more generic than JspException \n  * API should require \"expression string\", not attribute name/value\n  * ditto for error messages\n  * remove other JSP-specific objects (Tag) from generic implementation", "id": 13487, "time": "2002-04-14T14:12:36Z", "creator": "arista@atg.com", "creation_time": "2002-04-14T14:12:36Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 8066, "text": "The EL has been separated into a generic part and a JSTL-specific\npart.  The JSTL-specific part is still called Evaluator, but it\ndelegates to the generic implementation called ELEvaluator.  The\nfollowing other changes were made:\n\n  * variable lookups have been abstracted into a VariableResolver\n    interface, which is passed to the constructor of the ELEvaluator.\n    The JSTLVariableResolver is the JSTL-specific implementation of\n    the variable resolver, which looks up variables in PageContext,\n    and also handles the implicit objects.  The VariableResolver has\n    to be passed to all the expressions during evaluation, which is\n    why so many classes had to be changed.\n\n  * The context passed to ELEvaluator.evaluate() is just an Object,\n    not a PageContext.  That context is eventually passed to the\n    VariableResolver, which is responsible for casing the context to\n    whatever class it expects.\n\n  * The notion of implicit objects has been removed from the parser -\n    the parser just parses variable references, and lets the\n    VariableResolver take care of implicit objects.  This means that\n    there will be a slight difference in error messages - instead of\n    listing the implicit objects among the expected tokens, it will\n    just say <IDENTIFIER>\n\n  * The ELEvaluator has substituted all notions of \"attribute value\"\n    with \"expression string\".  The attribute name is not passed to the\n    ELEvaluator.\n\n  * ELEvaluator now throws ELException, which is no longer a subclass\n    of JspException.  The Evaluator, when it delegates to ELEvaluator,\n    will catch the ELException and convert it to a JspException.  It\n    will also wrap the error message with the attribute name and\n    value.\n\nIf there comes a time to separate the generic and JSTL-specific parts\ninto different packages, the following classes should be moved into\nthe JSTL-specific package:\n\n  JSTLVariableResolver\n  Evaluator\n  ImplicitObjects\n  EnumeratedMap (this is generic, but it's only used by ImplicitObjects)\n\nThese are the only classes that still contain references to servlet or\nJSP api's.  There are also couple of error messages in\nResources.properties/Constants.java that should be moved - in\nparticular:\n\n  ATTRIBUTE_EVALUATION_EXCEPTION\n  ATTRIBUTE_PARSE_EXCEPTION\n\n", "id": 13488, "time": "2002-04-14T14:32:59Z", "creator": "arista@atg.com", "creation_time": "2002-04-14T14:32:59Z", "is_private": false, "attachment_id": null}]
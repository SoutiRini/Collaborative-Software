[{"count": 0, "tags": [], "text": "We currently have two hardcoded \"variables\" that we substitute in catalina.properties, ${catalina.base} and ${catalina.home}.  Is there value in expanding this functionality?  Here is my scenario:\n\nI have several apps, app1, app2, etc.  I have a shared lib directory of jars that the apps share.  In addition, the apps may have several instances running in different \"environments\" (prod, QA, dev, etc.), and each environment has a corresponding version of the lib directory.  The Tomcat configs for the apps (catalina.base) are version-controlled.\n\nNow, I want each instance of these apps (catalina.base) to be as portable as possible without having to make a bunch of changes for each environment.  So, I want to be able to copy the app1-prod catalina.base to app1-qa and not have to make a lot of local modifications to catalina.properties and friends to make it work.  My init script knows that app1-qa is a QA instance and needs to point to the lib-qa shared directory.  So, I set a system property in the init script via CATALINA_OPTS: -Dshared.lib.dir=/path/to/lib-qa for QA and -Dshared.lib.dir=/path/to/lib-prod for production.  What I would like to do is use this system property via ${property.name} in my common.loader in catalina.properties.  The result is that the catalina.base files are the exact same from a configuration perspective without a bunch of local modifications.\n\nI have created two proposed patches for this functionality.  Both work well, but each one has the potential for some slightly different behavior, so I would like to hear the thoughts of the developers on each.\n\n--\n\nProposal A (currently in production use for my environment):\n\nThe variable substitution takes place upon retrieval in CatalinaProperties.getProperty(), pulling in the current value of the system property.  This allows other properties defined in catalina.properties to be substituted.  The (potential) downside or risk is that the value of a catalina.property value may change over time if the system properties referenced in its value are changed by the code during the JVM's lifecycle.\n\n--\n\nProposal B:\n\nThe variable substitution takes place in the class initializer, loadProperties().  This means that every call to CatalinaProperties.getProperty() will return the same result, with system property variables replaced with their value at the time the class was loaded.  The downside of this is that properties set in catalina.properties cannot be used in other properties defined in that file, because they may not yet be set based on the order they are returned by the Enumeration.  This could be worked around, but it would probably take another iteration over the properties (not really a big deal).", "is_private": false, "id": 143742, "creator": "jim@riggs.me", "time": "2011-01-27T20:54:57Z", "bug_id": 50677, "creation_time": "2011-01-27T20:54:57Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "jim@riggs.me", "attachment_id": 26568, "id": 143743, "time": "2011-01-27T20:56:03Z", "bug_id": 50677, "creation_time": "2011-01-27T20:56:03Z", "is_private": false, "text": "Created attachment 26568\nProposal A\n\nSubstitute on retrieval."}, {"count": 2, "tags": [], "creator": "jim@riggs.me", "attachment_id": 26569, "id": 143744, "time": "2011-01-27T20:56:37Z", "bug_id": 50677, "creation_time": "2011-01-27T20:56:37Z", "is_private": false, "text": "Created attachment 26569\nProposal B\n\nSubstitute on initialization."}, {"count": 3, "tags": [], "bug_id": 50677, "attachment_id": null, "text": "I'd prefer B and I agree some care is needed with the substitution algorithm.", "id": 143752, "time": "2011-01-28T08:32:57Z", "creator": "markt@apache.org", "creation_time": "2011-01-28T08:32:57Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50677, "attachment_id": null, "id": 147139, "time": "2011-06-15T13:28:20Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-06-15T13:28:20Z", "is_private": false, "text": "One more discussion at users@:\nhttp://tomcat.markmail.org/thread/4hjo26xeqcuixyw4\n\"tomcat 7: common.loader property in catalina.properties does not take ANT style variable\""}, {"count": 5, "tags": [], "bug_id": 50677, "text": "I implemented the substitution in r1136043 and it will be in 7.0.17.\n\nI used a different approach to the one proposed above:\nI implement substitution for the *.loader properties only. This is the use case that was discussed here and on users@.", "id": 147141, "time": "2011-06-15T14:00:38Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-06-15T14:00:38Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 50677, "attachment_id": null, "id": 172216, "time": "2014-01-09T15:25:05Z", "creator": "1983-01-06@gmx.net", "creation_time": "2014-01-09T15:25:05Z", "is_private": false, "text": "Can we have this in 6.0.x too?\n\nI have a similar usecase. I need to add some JARs from the Oracle client installation. I have defined -Doracle.home=.. in my setenv.sh and then common.loader=${oracle.home}/jlib/oraclepki.jar,..."}, {"count": 7, "tags": [], "bug_id": 50677, "attachment_id": null, "text": "My usecase is the same as Yongqin Xu's from the mailing list.", "id": 172218, "time": "2014-01-09T15:25:52Z", "creator": "1983-01-06@gmx.net", "creation_time": "2014-01-09T15:25:52Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 50677, "attachment_id": null, "text": "Re-opening for consideration for back-port to Tomcat 6.", "id": 172219, "time": "2014-01-09T15:33:04Z", "creator": "markt@apache.org", "creation_time": "2014-01-09T15:33:04Z", "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 197586, "time": "2017-03-10T14:25:51Z", "bug_id": 50677, "creation_time": "2017-03-10T14:25:51Z", "is_private": false, "text": "6.0.x reached end of life without this feature being back-ported."}]
[{"count": 0, "tags": [], "creator": "samsontesfay@tagetik.com", "attachment_id": 34861, "is_private": false, "id": 197878, "time": "2017-03-21T18:18:04Z", "bug_id": 60898, "creation_time": "2017-03-21T18:18:04Z", "text": "Created attachment 34861\nwrong_color.xlsx\n\nIf a workbook has a custom indexed colors defined instead of the fixed color array (see the styles.xml file attached), the XSSFColor's getARGB() mehtod calls the 'getRGBOrARGB()' defined in 'ExtendedColor.java'. This mehtod simply referrs to a constant color array. \nBut if a workbook has custom(modified) indexed colors (i.e. if an <indexedColors> element is defined inside the styles.xml part of the workbook), the indexed colors should refer to the color array defined in the styles.xml file.\n\nI have attached a sample .xlsx file here, and added a test to TestXSSFColor.java to show the problem(patch attached).\n\nPossible solutions.\n\nThis problem could be solved by overriding the getRGBOrARGB() in XSSFColor.java in a way that custom indexed colors (if any) are looked up from the CTcolors.\nUnfortunately, the XSSFColor dosen't have an access to the CTcolors, so either a CTcolors field should be added to XSSFColor (hence also a new constructor will be added) or the indexed color can be obtained from the Dom Elelement.\n\nSolution 1 (Probably this is not a clean solution and more error prone): \n\tGet the Dom element from the 'ctColor' field, get the styleSheet element, and then get the indexed color. (see the attached XSSFColor.java.patch):\n\nSolution 2:\n\tadd a CTcolors field to XSSFColor, and a constructor that takes bothe CTcolors and CTcolor. Consequently, change (probably all or most of) the calls to the \"XSSFColor(CTcolor)\" constructor with a call to \"XSSFColor(CTcolor, CTcolors)\". (see attached XSSFColor1.java.patch)"}, {"count": 1, "tags": [], "creator": "samsontesfay@tagetik.com", "attachment_id": 34862, "id": 197879, "time": "2017-03-21T18:19:54Z", "bug_id": 60898, "creation_time": "2017-03-21T18:19:54Z", "is_private": false, "text": "Created attachment 34862\nstyles.xml of the workbook"}, {"count": 2, "tags": [], "creator": "samsontesfay@tagetik.com", "attachment_id": 34863, "is_private": false, "id": 197881, "time": "2017-03-21T18:21:25Z", "bug_id": 60898, "creation_time": "2017-03-21T18:21:25Z", "text": "Created attachment 34863\nA failing unit test (added to TestXSSFColor.jaca)"}, {"count": 3, "tags": [], "bug_id": 60898, "is_private": false, "text": "Created attachment 34864\npossible solution1", "id": 197882, "time": "2017-03-21T18:22:53Z", "creator": "samsontesfay@tagetik.com", "creation_time": "2017-03-21T18:22:53Z", "attachment_id": 34864}, {"count": 4, "tags": [], "bug_id": 60898, "attachment_id": 34865, "id": 197883, "time": "2017-03-21T18:23:51Z", "creator": "samsontesfay@tagetik.com", "creation_time": "2017-03-21T18:23:51Z", "is_private": false, "text": "Created attachment 34865\nsolution 2 (partial)"}, {"count": 5, "tags": [], "creator": "samsontesfay@tagetik.com", "attachment_id": 34865, "is_private": false, "id": 197910, "time": "2017-03-22T17:08:28Z", "bug_id": 60898, "creation_time": "2017-03-22T17:08:28Z", "text": "Comment on attachment 34865\nsolution 2 (partial)\n\nIndex: XSSFColor.java\n===================================================================\n--- XSSFColor.java\t(revision 293556)\n+++ XSSFColor.java\t(working copy)\n@@ -23,6 +23,9 @@\n import org.apache.poi.ss.usermodel.IndexedColors;\n import org.apache.poi.util.Internal;\n import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColor;\n+import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTColors;\n+import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTRgbColor;\n+import org.w3c.dom.DOMException;\n \n /**\n  * Represents a color in SpreadsheetML\n@@ -29,6 +32,7 @@\n  */\n public class XSSFColor extends ExtendedColor {\n     private final CTColor ctColor;\n+    private CTColors indexedColors;\n \n     /**\n      * Create an instance of XSSFColor from the supplied XML bean\n@@ -36,6 +40,11 @@\n     public XSSFColor(CTColor color) {\n         this.ctColor = color;\n     }\n+    \n+    public XSSFColor(CTColors indexedColors, CTColor color){\n+    \tthis.indexedColors = indexedColors;\n+    \tthis.ctColor = color;\n+    }\n \n     /**\n      * Create an new instance of XSSFColor\n@@ -179,6 +188,38 @@\n          return rgb;\n       }\n    }\n+   \n+   @Override\n+   protected byte[] getRGBOrARGB() throws DOMException{\n+\t   if(isIndexed() && hasCustomIndexedColors()){\n+\t\t   CTRgbColor ctRgbColor = indexedColors.getIndexedColors().\n+\t\t\t\t   getRgbColorList().get(getIndexed());\n+\t\t   String hexString = ctRgbColor.getDomNode().getAttributes().getNamedItem(\"rgb\").getNodeValue();\n+\t\t   return hexStringToByteArray(hexString);\n+\t   }\n+\t   return super.getRGBOrARGB();\n+   }\n+   \n+   private boolean hasCustomIndexedColors(){\n+      \n+       if (indexedColors == null) {\n+           return false;\n+       }\n+       if (indexedColors.getIndexedColors() == null) {\n+           return false;\n+       }\n+       return true;\n+   }\n+   \n+   private byte[] hexStringToByteArray(String s) {\n+\t    byte[] b = new byte[s.length() / 2];\n+\t    for (int i = 0; i < b.length; i++) {\n+\t      int index = i * 2;\n+\t      int v = Integer.parseInt(s.substring(index, index + 2), 16);\n+\t      b[i] = (byte) v;\n+\t    }\n+\t    return b;\n+\t  }\n \n    @Override\n    protected byte[] getStoredRBG() {"}, {"count": 6, "tags": [], "creator": "gwoolsey@apache.org", "attachment_id": null, "id": 198897, "time": "2017-05-25T21:32:51Z", "bug_id": 60898, "creation_time": "2017-05-25T21:32:51Z", "is_private": false, "text": "Solution 2 sounds worse than it looks, to my initial take.  Constructor calls of all sorts are almost entirely from contexts that would have access to the workbook styles, and could pass in what is needed.  The remaining paths can be documented as lacking custom color index support.\n\nXSSFColor itself can defensively check as needed and fall back on the current behavior when the custom index info is missing.\n\nFurther, we can add some more support to StylesTable to avoid repeated calls into the CT* classes, as that is always expensive, and color lookups can be done thousands of times (or a few more orders of magnitude) in processing formatting for a single workbook.\n\nI'll see if I have some time to dig in."}, {"count": 7, "text": "Fixed in r1796359.\n\nThanks for the unit test!\n\nEverything creating XSSFColor instances that subsequently may be used to generate an RGB value now have the opportunity to pass any document custom index mappings.\n\nThe result should be proper color mappings without the need for extra code for the consumer, unless the application uses custom built XSSFColor instances directly.\n\nStylesTable now has a method to return the current document index color mapping, getIndexedColors(), which defaults to the built-in values but knows about custom document colors if they are defined.", "bug_id": 60898, "attachment_id": null, "id": 198907, "time": "2017-05-26T23:19:41Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-05-26T23:19:41Z", "tags": [], "is_private": false}]
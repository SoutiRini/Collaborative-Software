[{"count": 0, "tags": [], "bug_id": 46588, "attachment_id": 23161, "text": "Created attachment 23161\nProposed fixes\n\nThe attached patch (against APR-util 1.3.4) includes proposed fixes to three related problems in apr_memcache_multgetp.\n\n1. When testing apr_memcache_multgetp under high loads, we noticed a bizarre problem where epoll_wait in apr_pollset_poll randomly failed with EBADF. This was traced back to subtle memory corruption in apr_memcache_multgetp caused by the following sequence of actions:\n\n  a. a pollset is created from temp_pool using apr_pollset_create\n  b. temp_pool is cleared with apr_pool_clear\n  c. apr_pollset_destroy is called for the now invalid pollset pointer\n\nThis doesn't result in a segfault, because the memory is still allocated in the pool. However, it starts causing problems after a sufficient number of iterations. The patch solves the problem simply by calling apr_pollset_destroy before the temp_pool is cleared.\n\n2. If apr_pollset_poll fails for any reason in apr_memcache_multgetp, the function releases connections to the reslist without cleaning them up first. As requests have already been sent to servers at this point, when the next user of the connection reads from the socket, it receives the response to the previous abandoned request instead. Since apr_pollset_poll failures should be rare, the patch opts to solve the problem simply by invalidating the affected connections in mget_conn_result in case of a failure (rv != APR_SUCCESS at the end of apr_memcache_multgetp).\n\n3. Similarly, if apr_pollset_create fails for any reason, apr_memcache_multgetp returns immediately without releasing connections. The patch solves the problem by calling mget_conn_result for each acquired connection if apr_pollset_create fails.", "id": 124284, "time": "2009-01-22T05:13:25Z", "creator": "sami.tolvanen@mywot.com", "creation_time": "2009-01-22T05:13:25Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 23164\nProposed fixes v2\n\nI updated the patch to take care of one more problem we discovered.\n\n4. If one of the requested values has length 0, which is perfectly legitimate, apr_memcache_multgetp doesn't read the empty line following the VALUE response from the server. This causes the next get_server_line call to read the empty line and because the command isn't recognized, all further data from the socket is discarded. As queries_sent isn't decreased in this case, the poll loop won't exit until apr_pollset_poll eventually times out.\n\nThe patch solves the problem by reading the server response even for 0-length values.", "is_private": false, "id": 124309, "creator": "sami.tolvanen@mywot.com", "time": "2009-01-23T00:38:33Z", "bug_id": 46588, "creation_time": "2009-01-23T00:38:33Z", "attachment_id": 23164}, {"text": "I don't use memcache, so I cannot really comment much on this. Did you ask on the list if people agree with this patch?\n\nPS. I'm pretty sure that the reordering of apr_pollset_destroy and pool cleanup is good, but not familiar with the rest at all.", "tags": [], "bug_id": 46588, "attachment_id": null, "count": 2, "id": 125004, "time": "2009-02-19T18:38:40Z", "creator": "bojan@rexursive.com", "creation_time": "2009-02-19T18:38:40Z", "is_private": false}, {"count": 3, "tags": [], "creator": "sami.tolvanen@mywot.com", "text": "(In reply to comment #2)\n> I don't use memcache, so I cannot really comment much on this. Did you ask on\n> the list if people agree with this patch?\n\nI didn't. You were the only one who commented on the previous patch, so I figured there wasn't all that much interest in the memcache code and that I might just as well leave a bug report for this one.\n\n> PS. I'm pretty sure that the reordering of apr_pollset_destroy and pool cleanup\n> is good, but not familiar with the rest at all.\n\nThat was the first problem we saw, the two error handling bugs were triggered only after apr_pollset_* started failing, which is probably why nobody had noticed them before. The fourth problem with 0-length values is pretty trivial, I suppose the other users of this code never had empty values in their cache.\n\nAnyway, if it makes any difference, we've been using this patch in production for a month now without any problems (1-2k requests per second 24/7). The current code in APR-util 1.3.4 started failing after a couple of seconds under this load.", "id": 125014, "time": "2009-02-20T02:24:50Z", "bug_id": 46588, "creation_time": "2009-02-20T02:24:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46588, "attachment_id": null, "text": "Committed now to trunk, 1.4.x and 1.3.x. Thanks for the patch.", "id": 125039, "time": "2009-02-21T13:41:18Z", "creator": "bojan@rexursive.com", "creation_time": "2009-02-21T13:41:18Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "Enums used for getErrorStyle() are 1,2,3, while the list allowed for setErrorStyle() is built up on values 0,1,2. If you want to retrieve the error style of a data validation and apply it to another data validation a \"-1\" is necessary to apply it correctly.\n\ni.e :\n\nnewDataValidation.setErrorStyle(anotherDataValidation.getErrorStyle() - 1);", "attachment_id": null, "id": 197391, "creator": "gstrada@imolinfo.it", "time": "2017-03-02T14:29:38Z", "bug_id": 60803, "creation_time": "2017-03-02T14:29:38Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 60803, "attachment_id": null, "is_private": false, "id": 197396, "time": "2017-03-02T18:39:50Z", "creator": "onealj@apache.org", "creation_time": "2017-03-02T18:39:50Z", "text": "Looks like we're using int constants rather than true enums here. This should be a pretty trivial fix:\n1. Fix off-by-one getter or setter\n2. Add DataValidationErrorStyle enum (or something similar)\n3. Add enum versions of the accessors:\n> DataValidationErrorStyle getErrorStyleEnum()\n> void setErrorStyle(DataValidationErrorStyle errorStyle)\n\nAre you interested in tackling this and submitting a patch or pull request?\n\nhttps://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/DataValidation.html"}, {"count": 2, "tags": [], "bug_id": 60803, "attachment_id": null, "id": 197429, "time": "2017-03-03T15:41:48Z", "creator": "gstrada@imolinfo.it", "creation_time": "2017-03-03T15:41:48Z", "is_private": false, "text": "where can i read the correct behavior to provide you a patch ?"}, {"count": 3, "tags": [], "text": "Principle of least surprise. Look through the JavaDocs and maybe the HSSFDataValidation class to see if there's a preference for 0-based indexing or 1-based indexing for getting and setting error styles. If there's no preference, pick the one that you think will break fewer users' code (maybe we're 50/50 on this one, I don't know).\n\nWhat error_style numbers are saved in the XML files of an XLSX file? What numbers are used for the HSSF binary record?\n\nIf all else is equal, the enum to int code will be simplest if we use 0-based indexing.", "attachment_id": null, "bug_id": 60803, "id": 197430, "time": "2017-03-03T15:50:59Z", "creator": "onealj@apache.org", "creation_time": "2017-03-03T15:50:59Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 60803, "attachment_id": null, "id": 197433, "time": "2017-03-03T15:59:40Z", "creator": "gwoolsey@apache.org", "creation_time": "2017-03-03T15:59:40Z", "is_private": false, "text": "POI patching guidelines:\n\nhttp://poi.apache.org/guidelines.html#SubmittingPatches\n\nI've used the OOXML specs from here:\n\nhttp://standards.iso.org/ittf/PubliclyAvailableStandards/index.html\n\n(search the page for \"open document\")\n\n+1 for using zero-based systems if possible."}, {"count": 5, "tags": [], "text": "hi everyone, thank s for your replies. After a walkaround inside the librery, i ve found out that the Interface \"DataValidation\" works with enum type in a range of 0-2.\n\npublic interface DataValidation {\n\t/**\n\t * Error style constants for error box\n\t */\n\tpublic static final class ErrorStyle {\n    \t/** STOP style */\n    \tpublic static final int STOP    = 0x00;\n    \t/** WARNING style */\n    \tpublic static final int WARNING = 0x01;\n    \t/** INFO style */\n    \tpublic static final int INFO    = 0x02;\n\t}    \n     ...\n\nI think the right way to improve a solution is to get fit to this scenario. To do it i've dug more inside and i ve found out that the XSSFDataValidation getErrorStyle depends on STDataValidationErrorStyle. \n\npublic interface STDataValidationErrorStyle extends XmlString {\n \n    int INT_STOP = 1;\n    int INT_WARNING = 2;\n    int INT_INFORMATION = 3;\n    ...\n\nThis class is inside the external dependency ooxml-schemas-1.3-sources.jar, so in order to provide a patch i need the privilege to edit the source file. If you havge more suggestions i'll be pleased to hear them", "is_private": false, "id": 197484, "creator": "gstrada@imolinfo.it", "time": "2017-03-06T16:28:07Z", "bug_id": 60803, "creation_time": "2017-03-06T16:28:07Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "STDataValidationErrorStyle is generated code, generated from the OOXML schema.\n\nThe DataValidationErrorStyle cannot reference the ST* enum if it's also used by HSSF, since we don't require users to have the poi-ooxml.jar or poi-ooxml-schemas.jar files in their classpath if they're using the binary formats.\n\nI was thinking about using a true enums rather than an interface or class to contain the constants. It'd then be up to XSSFDataValidation to convert between DataValidationErrorStyle and STDataValidationErrorStyle. Likewise, HSSFDataValidation would have to provide its own translation from enum to bytes.", "id": 197486, "time": "2017-03-06T17:07:07Z", "bug_id": 60803, "creation_time": "2017-03-06T17:07:07Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "text": "(In reply to Javen O'Neal from comment #6)\n> STDataValidationErrorStyle is generated code, generated from the OOXML\n> schema.\n\nIn case I wasn't clear here, we're using the official OOXML xsd schemas released by Microsoft, do we don't want to edit the schemas.\n\nAlso, take a look at bug 59836 and its \"depends on\" bugs, which tracks the enum conversion initiative that has been going on for the last few releases.", "id": 197487, "time": "2017-03-06T17:12:54Z", "bug_id": 60803, "creation_time": "2017-03-06T17:12:54Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "patch proposal added ( task 60870 )", "attachment_id": null, "bug_id": 60803, "id": 197689, "time": "2017-03-15T16:32:10Z", "creator": "gstrada@imolinfo.it", "creation_time": "2017-03-15T16:32:10Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 60803, "is_private": false, "count": 9, "id": 197793, "time": "2017-03-18T19:07:59Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-18T19:07:59Z", "text": "Bug 60870 handles the same thing now and has a patch, we should not keep two issues open here.\n\n*** This bug has been marked as a duplicate of bug 60870 ***"}]
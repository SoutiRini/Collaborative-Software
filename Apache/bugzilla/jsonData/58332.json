[{"count": 0, "tags": [], "bug_id": 58332, "attachment_id": 33064, "id": 184984, "time": "2015-09-06T02:05:44Z", "creator": "onealj@apache.org", "creation_time": "2015-09-06T02:05:44Z", "is_private": false, "text": "Created attachment 33064\nPatch to keep test from failing if memory consumption is lower than max available memory\n\nWhen running the junit test in Eclipse, I get a few errors on tests that pass when running the tests via command line with \"ant test\".\n\nThe MemoryUsage tests may exceed the maximum number of rows allowed in a workbook (only 65k in EXCEL97 workbooks) before an OutOfMemory error can be reached.\n\nThis fails only on HSSFWorkbooks because HSSFRow.setRowNum checks the valid range via SpreadsheetVersion.EXCEL97.getLastRowIndex(). XSSFWorkbooks allow worksheets to have more than 10^20 rows. This will be filed under a separate bug.\n\nError seen on src/ooxml/testcases/org.apache.poi.xssf.util.MemoryUsage\njava.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535)\n\tat org.apache.poi.hssf.usermodel.HSSFRow.setRowNum(HSSFRow.java:239)\n\tat org.apache.poi.hssf.usermodel.HSSFRow.<init>(HSSFRow.java:85)\n\tat org.apache.poi.hssf.usermodel.HSSFRow.<init>(HSSFRow.java:69)\n\tat org.apache.poi.hssf.usermodel.HSSFSheet.createRow(HSSFSheet.java:248)\n\tat org.apache.poi.hssf.usermodel.HSSFSheet.createRow(HSSFSheet.java:1)\n\tat org.apache.poi.xssf.util.MemoryUsage.numberSpreadsheet(MemoryUsage.java:98)\n\tat org.apache.poi.xssf.util.MemoryUsage.testNumberHSSF(MemoryUsage.java:210)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:252)\n\tat junit.framework.TestSuite.run(TestSuite.java:247)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n\nSince the purpose of this test is to test memory requirements for each test case, there isn't a clear pass/fail criteria, but it certainly doesn't make sense for this test to fail by something that should be caught by a Workbook/Sheet/Row/Cell unit test.\n\nThe attached patch allows the test to pass when memory cannot be exhausted before some other limit is reached."}, {"count": 1, "tags": [], "bug_id": 58332, "attachment_id": null, "text": "Thanks for the suggestion, this is now applied via r1704182.", "id": 185366, "time": "2015-09-20T20:10:07Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-09-20T20:10:07Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58332, "attachment_id": null, "text": "(In reply to Javen ONeal from comment #0)\n> XSSFWorkbooks allow worksheets to have more than 10^20 rows.\n> This will be filed under a separate bug.\n\nFiled as bug 58333.", "id": 185368, "time": "2015-09-20T20:48:07Z", "creator": "onealj@apache.org", "creation_time": "2015-09-20T20:48:07Z", "is_private": false}]
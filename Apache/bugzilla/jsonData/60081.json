[{"count": 0, "tags": [], "bug_id": 60081, "text": "Each thread simultaneously takes the same through each loop of an Interleave Controler.  This results in a spike-like pattern of execution for each child instead of an even cadence and a truly interleaved blend.\n\nI'll try to explain further.  Consider a test plan with two alternating transaction controllers:\n\nThread Group (LOOPS=5)\n\u2514\u2500\u2500 Interleave Controller\n    \u251c\u2500\u2500 pathA\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 A1\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 A2\n    \u2514\u2500\u2500 pathB\n        \u2514\u2500\u2500 B1\n\nWith a single thread, this behaves as anyone could generally expect:\n\nLoop  thread\n1     pathA\n2     pathB\n3     pathA\n4     pathB\n5     pathA\n\nBut when you have three threads it looks like this:\n\nLoop  thread1  thread2  thread3\n1     pathA    pathA    pathA\n2     pathB    pathB    pathB\n3     pathA    pathA    pathA\n4     pathB    pathB    pathB\n5     pathA    pathA    pathA\n\nNotice how thread2 and thread3 also take pathA; this generalises to any number of threads.\n\nFrom a user standpoint, the expected result (in terms of both the execution dispatch timing and the execution count) is more like this:\n\nLoop  thread1  thread2  thread3\n1     pathA    pathB    pathA\n2     pathB    pathA    pathB\n3     pathA    pathB    pathA\n4     pathB    pathA    pathB\n5     pathA    pathB    pathA", "id": 193471, "time": "2016-09-02T20:04:34Z", "creator": "jepp@cas.org", "creation_time": "2016-09-02T20:04:34Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 60081, "is_private": false, "id": 193594, "creation_time": "2016-09-10T08:24:08Z", "time": "2016-09-10T08:24:08Z", "creator": "h.rsh89@gmail.com", "text": "Hi,\n\nAccording to java doc, Interleave controller \"Alternate among each of the children controllers or samplers for each loop iteration\".\n\nAlso in component reference \n\"If you add Generative or Logic Controllers to an Interleave Controller, JMeter will alternate among each of the other controllers for each loop iteration.\"\n\nSo in this case behaviour is proper. as for each loop, it will interleave the samplers.", "attachment_id": null}, {"count": 2, "tags": [], "creator": "jepp@cas.org", "is_private": false, "id": 193644, "attachment_id": null, "bug_id": 60081, "creation_time": "2016-09-12T11:36:49Z", "time": "2016-09-12T11:36:49Z", "text": "(In reply to harsh from comment #1)\n> Hi,\n> \n> According to java doc, Interleave controller \"Alternate among each of the\n> children controllers or samplers for each loop iteration\".\n\nThat's not at issue here.  In fact, I was quite pleased that it honours the contract of tree semantics when it encounters controllers.\n\nThe issue is when there are multiple threads, they all interleave the _SAME_ subcontrollers and samplers at the _SAME_ time.  They're effectively in lockstep.\n\nThis makes it unusable to generate a mixed load of multiple scenarios."}, {"count": 3, "attachment_id": null, "bug_id": 60081, "text": "Hi,\nCan I ask why you don't use RandomController in this case ?\n\nAnother alternative is to use a Counter shared accross threads that varies between 1 and the number of children of the controller and use a Switch Controller.\n\nThe spike-like pattern has less chances to occur if using Random timers and if the Controller has samplers before and after it , so I am not sure it's a problem.\nAFAIU, this Interleave Controller has always worked like this and  I am afraid many users expect it to work like it does.\n\nI personnaly never used it so I cannot tell if it suits me or not :-)\n\nthoughts ?\nThx", "id": 194096, "time": "2016-09-29T20:20:08Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-09-29T20:20:08Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 60081, "text": "(In reply to Philippe Mouawad from comment #3)\n> Hi,\n> Can I ask why you don't use RandomController in this case ?\n\nLack of determinism is an issue (it's something that was stressed repeatedly by the project lead).  But the reason we discovered this in the first place was by fixing the Weighted Switch Controller plugin to respect controllers by deriving from InterleaveControl.\n\nIt's a good idea, and I'll experiment with deriving from RandomController instead (making it a Weighted Random Controller instead, I guess), but I still think this is an issue in its own right.\n \n> Another alternative is to use a Counter shared accross threads that varies\n> between 1 and the number of children of the controller and use a Switch\n> Controller.\n\nI guess this could work, but it's a rather ugly hack and I'm not fond of the idea.  This sort of circumlocution makes the controller abstraction feel very leaky to me.\n\n> The spike-like pattern has less chances to occur if using Random timers and\n> if the Controller has samplers before and after it , so I am not sure it's a\n> problem.\n\nUsing random timers is the sort of hack that's going to seriously play havoc with the consistency of transaction throughput, so it'll never fly with people above me.  But even if they were fine with it, I don't think it's enough to work at every scale we need because the smoothing this introduces is a function of thread count and delay range.\n\n> AFAIU, this Interleave Controller has always worked like this and  I am\n> afraid many users expect it to work like it does.\n\nI think it probably HAS always worked this way. I disagree that these specific semantics are what any user might reasonably expect, though.  (You can sort of figure it out with a close read of the manual but I wouldn't call it clear or obvious.) If anything, the way it works now has probably driven people away from it (and is, I suspect, probably why the Weighted Switch Controller inherited from GenericController instead of InterleaveControl in the first place).\n\nI've been thinking about it a lot, but I haven't yet been able to come up with any compelling reasons a user might want this pattern of interleaving or wouldn't want evenly interleaved requests.  I'm just one person, though; maybe this is something that needs to be brought to more eyes?\n\nThanks,\nWyatt", "id": 194097, "time": "2016-09-29T22:25:03Z", "creator": "jepp@cas.org", "creation_time": "2016-09-29T22:25:03Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "is_private": false, "count": 5, "id": 194106, "time": "2016-10-01T12:25:23Z", "bug_id": 60081, "creation_time": "2016-10-01T12:25:23Z", "text": "(In reply to Wyatt Epp from comment #4)\n> (In reply to Philippe Mouawad from comment #3)\n> > Hi,\n> > Can I ask why you don't use RandomController in this case ?\n> \n> Lack of determinism is an issue (it's something that was stressed repeatedly\n> by the project lead).  But the reason we discovered this in the first place\n> was by fixing the Weighted Switch Controller plugin to respect controllers\n> by deriving from InterleaveControl.\n> \n> It's a good idea, and I'll experiment with deriving from RandomController\n> instead (making it a Weighted Random Controller instead, I guess), but I\n> still think this is an issue in its own right.\n\nI am not sure. \nIf you look at your initial request for Interleave accross threads, you take the hypothesis that threads run nearly sequentially while you have no guarantee on order , and as a consequence Interleave would end up generating the equivalent of RandomController.\nUnless I am missing something in your report or use case.\n\n\n\n>  \n> > Another alternative is to use a Counter shared accross threads that varies\n> > between 1 and the number of children of the controller and use a Switch\n> > Controller.\n> \n> I guess this could work, but it's a rather ugly hack and I'm not fond of the\n> idea.  This sort of circumlocution makes the controller abstraction feel\n> very leaky to me.\n\nI don't think it's ugly, SwitchController is done for that. I think it will show you that the interleave you expect is not respected;\n\n> \n> > The spike-like pattern has less chances to occur if using Random timers and\n> > if the Controller has samplers before and after it , so I am not sure it's a\n> > problem.\n> \n> Using random timers is the sort of hack that's going to seriously play havoc\n> with the consistency of transaction throughput, so it'll never fly with\n> people above me.  \n\nIt depend on your use case.\nWhen I simulate Real User behaviour, I use random timers, not using them seems to me a mistake.\nIf you're more in a server to server call then ok. \n\n\n>But even if they were fine with it, I don't think it's\n> enough to work at every scale we need because the smoothing this introduces\n> is a function of thread count and delay range.\n> \n> > AFAIU, this Interleave Controller has always worked like this and  I am\n> > afraid many users expect it to work like it does.\n> \n> I think it probably HAS always worked this way. I disagree that these\n> specific semantics are what any user might reasonably expect, though.  (You\n> can sort of figure it out with a close read of the manual but I wouldn't\n> call it clear or obvious.) If anything, the way it works now has probably\n> driven people away from it (and is, I suspect, probably why the Weighted\n> Switch Controller inherited from GenericController instead of\n> InterleaveControl in the first place).\n\nIt is hard to know usage of Controllers among community.\n\n\n> \n> I've been thinking about it a lot, but I haven't yet been able to come up\n> with any compelling reasons a user might want this pattern of interleaving\n> or wouldn't want evenly interleaved requests.  I'm just one person, though;\n> maybe this is something that needs to be brought to more eyes?\n> \n> Thanks,\n> Wyatt\n\n\nAnyway I attached a patch, can you test it and see if that's what you expect ?\nThanks"}, {"count": 6, "tags": [], "bug_id": 60081, "is_private": false, "text": "Created attachment 34316\nPatch implementing interleave accross threads", "id": 194107, "time": "2016-10-01T12:25:56Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-10-01T12:25:56Z", "attachment_id": 34316}, {"count": 7, "tags": [], "text": "Created attachment 34320\nPatch implementing feature in a simpler way as per Felix proposal", "is_private": false, "id": 194113, "creation_time": "2016-10-02T15:51:57Z", "time": "2016-10-02T15:51:57Z", "creator": "p.mouawad@ubik-ingenierie.com", "bug_id": 60081, "attachment_id": 34320}, {"attachment_id": 34320, "tags": [], "creator": "felix.schumacher@internetallee.de", "text": "Comment on attachment 34320\nPatch implementing feature in a simpler way as per Felix proposal\n\nLooks a lot cleaner.\n\nI think the res strings are missing and I would prefer the modulo operator be separated with spaces from its operands.", "count": 8, "id": 194114, "time": "2016-10-02T16:19:10Z", "bug_id": 60081, "creation_time": "2016-10-02T16:19:10Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 60081, "text": "Author: pmouawad\nDate: Sun Oct  2 17:14:45 2016\nNew Revision: 1763086\n\nURL: http://svn.apache.org/viewvc?rev=1763086&view=rev\nLog:\nBug 60081 Interleave Controller : Add an option to alternate across threads\nBugzilla Id: 60081\n\nModified:\n    jmeter/trunk/src/components/org/apache/jmeter/control/InterleaveControl.java\n    jmeter/trunk/src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java\n    jmeter/trunk/src/core/org/apache/jmeter/resources/messages.properties\n    jmeter/trunk/src/core/org/apache/jmeter/resources/messages_fr.properties\n    jmeter/trunk/xdocs/changes.xml\n    jmeter/trunk/xdocs/usermanual/component_reference.xml", "id": 194116, "time": "2016-10-02T17:15:08Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-10-02T17:15:08Z", "is_private": false, "attachment_id": null}]
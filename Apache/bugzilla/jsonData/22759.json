[{"count": 0, "text": "A brief search didn't turn up any bugs with \"infinite\" and \"loop\" that seemed to\nrelate to antcall... I havn't looked into the code to see why this happens, but\nit seems that antcall is calling the entire buildfile again, to look for the\ntarget named foo. In doing so I suspect it is required to process all top level\ninformation, including itself creating the loop. \n\nThis file: \n\n<project name=\"test\">\n  <antcall target=\"foo\"/>\n  <target name=\"foo\">\n    <echo>Foo called</echo>\n  </target>\n</project>\n\nCauses this infinite loop:\n\ngus@draco projects]$ ant -v -f test.xml\nApache Ant version 1.6alpha compiled on August 11 2003\nBuildfile: test.xml\nDetected Java version: 1.4 in: /usr/java/j2sdk1.4.2/jre\nDetected OS: Linux\nparsing buildfile /home/gus/projects/test.xml with URI =\nfile:///home/gus/projects/test.xml\nProject base dir set to: /home/gus/projects\nProject base dir set to: /home/gus/projects\n  [antcall] calling target foo in build file /home/gus/projects/test.xml\nparsing buildfile /home/gus/projects/test.xml with URI =\nfile:///home/gus/projects/test.xml\nProject base dir set to: /home/gus/projects\nProject base dir set to: /home/gus/projects\n  [antcall] calling target foo in build file /home/gus/projects/test.xml\nparsing buildfile /home/gus/projects/test.xml with URI =\nfile:///home/gus/projects/test.xml\nProject base dir set to: /home/gus/projects\nProject base dir set to: /home/gus/projects\n  [antcall] calling target foo in build file /home/gus/projects/test.xml\nparsing buildfile /home/gus/projects/test.xml with URI =\nfile:///home/gus/projects/test.xml\n\n(repeats infinitely)\n\nI am a little supprised this hasn't poped up before, but I ran into it when I\ntried to devise a build that checked to see if libs were in the right place and\nif not, attempt to get them from likely locations before proceeding. I was\nantcalling a target that had an unless\"foolib.exists\" (set or not set by\navailable).  I think one can workaround this by putting all the toplevel stuff\nin an explicit init target, but if all tasks are to work on the top level, it\nwould seem that antcall needs to be fixed.", "bug_id": 22759, "is_private": false, "id": 43385, "time": "2003-08-27T15:22:07Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-08-27T15:22:07Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 22759, "is_private": false, "id": 43390, "creation_time": "2003-08-27T15:55:47Z", "time": "2003-08-27T15:55:47Z", "creator": "ddevienne@lgc.com", "text": "This just shows that top-level tasks are just not such a great idea, isn't it?\n\nThe ability to define single 'init' and 'final' targets, by setting attributes \non <project> would seem better than top-level tasks. Oh well. --DD", "attachment_id": null}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 43614, "time": "2003-09-02T15:47:00Z", "bug_id": 22759, "creation_time": "2003-09-02T15:47:00Z", "is_private": false, "text": "It hasn't popped up for two reasons:\n\n(1) <antcall> cannot live at the top level in any released version, so it hasn't\n    been used that way by too many people yet.\n\n(2) it used to cause a build failure instead of an inifite loop for the first\n    few months it was allowed there.\n\nThe is code in Ant.java that tries to detect this, but since top-level tasks get\nexecuted at parser time now (they didn't in the initial version that allowed\ntop-level tasks), the test kicks in too late.\n\nThis is not a unique issue of having antcall at the top level, of course.\n\n<target name=\"foo\">\n  <antcall target=\"bar\"/>\n</target>\n\n<target name=\"bar\" depends=\"foo\"/>\n\nwill have the same problem - and we've decided to not fix it as doing so would\nrequire too much logic that could be defeated by more complex builds anyway.\n\nWe can and should test wether <ant> or <antcall> try to call the target they are\ndefined in.  And for tasks at the top level we must not allow calling the same\nbuild file at all."}, {"count": 3, "tags": [], "creator": "gus.heck@olin.edu", "attachment_id": null, "id": 43622, "time": "2003-09-02T17:31:26Z", "bug_id": 22759, "creation_time": "2003-09-02T17:31:26Z", "is_private": false, "text": "That makes sense. However antcall needs to call the same file in all cases so it\nsounds like you are banning antcall from the top level? Perhaps there is a way\nto scan ahead for the target and grab it? A quick pass over the top level of the\nbuild file to collect the targets first would give us a list of targets to\ninvoke rather than calling the whole file over (if it is not already done that way).\n\nIt should not be too supprising to the user if top level properties defined\nafter the antcall are not expanded when the target is invoked. (and similar\nissues with other things that happen at the top level after the antcall).\n\nWhat I can't seem to figure out myself is would such a strategy force us to\nchange the behavior of antcall in a non-backwards compatable manner."}, {"count": 4, "tags": [], "bug_id": 22759, "is_private": false, "id": 43659, "creation_time": "2003-09-03T08:17:08Z", "time": "2003-09-03T08:17:08Z", "creator": "bodewig@apache.org", "text": "Given the way <ancall> works, we will simply have to effectively disallow it\nat the top level.  Same applies to <ant> and <subant> if they invoke a target\nin the current build file.\n\nI'll fix it rather soon (I hope) to throw a BuildException instead of looping\nforever and add a caution to the manual as well.", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 22759, "attachment_id": null, "text": "I really do not see the issue here. It is the programmers responsability not \nto write infinite loops. I think the effort of writing code to check for this \nsituation is wasted time since I doubt it can be tight enough as to prevent \nany infinite loop. I think it is a bad presedent to make users believe they \ncan write rubish code and ANT is suppose to defend itself from it.\n\nIn any case, any attempt to solve this problem should not be specific for \n<antcall> and <subant> but instead should dealt with <ant> which is actually \nthe root of the problem. That would make the fix applicable to any task core \nor not that fires a subproject as part of its code.\n\nOne easy way to fence for these looping problems is to just define a limit on \nhow many levels of subproject one can execute (if you pic a number reasonably \nhigh and configurable for the odd case out) so when you reach the limit, you \njust bomb. A number like 50 or 100 (or a close power of 2 -1) should do.", "id": 43660, "time": "2003-09-03T09:51:05Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2003-09-03T09:51:05Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 43662, "time": "2003-09-03T10:07:25Z", "bug_id": 22759, "creation_time": "2003-09-03T10:07:25Z", "is_private": false, "text": "Starting with nightly build 2003-09-04 it will cause a failure instead of\nan infinite loop."}]
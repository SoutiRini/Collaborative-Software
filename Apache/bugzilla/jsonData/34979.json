[{"count": 0, "tags": [], "text": "This bug will be used to track refactorings and other changes to the org.apache.log4j.rolling classes \nsuggested during the port of those classes to log4cxx.  Any significant issue will be discussed on \nlog4j-dev or have a separate bug report filed.\n\nThe existing test case o.a.l.r.FileNamePatternTestCase is not run by tests/build.xml and would fail if it \nwas run.  The first changes under this bug will add that test to the CoreTestSuite, reorganize the test \ninto distinct assertions and change the expectations of the tests that are failing to reflect the current \nimplementation.\n\nThe failing tests expected a malformed date format specification like \"%d{yyyy\" to be output as a literal \nwhere the implementation treated it as \"%d{yyyy-MM-dd}{yyyy\".", "is_private": false, "id": 75098, "creator": "carnold@apache.org", "time": "2005-05-20T05:39:40Z", "bug_id": 34979, "creation_time": "2005-05-20T05:39:40Z", "attachment_id": null}, {"count": 1, "text": "o.a.l.rolling.FileNamePattern and associated classes substantially duplicated the pattern parsing and \ndate formatting code already in o.a.l.pattern.  The changes committed on 22 May 2005 modify the \no.a.l.pattern implementation to eliminate their limitation to just formatting LoggingEvent and to \neliminate the redundant o.a.l.rolling.helper classes.\n\nThe o.a.l.pattern.PatternParser behavior was modified for these cases:\n\n\"%bogus\" used to output \"%b\", now \"%bogus\"\n\n\"%moo\" used to output \"%moo\", now msg + \"oo\"\n\n\"%d{yyyy-MM-dd\" used to cause an endless loop.\n\nMost o.a.l.pattern.PatternConverters are now invariant and thread-safe.  All now operate on a string \nbuffer parameter and no longer need to maintain their own string buffer. ", "creator": "carnold@apache.org", "is_private": false, "id": 75192, "time": "2005-05-22T09:55:11Z", "bug_id": 34979, "creation_time": "2005-05-22T09:55:11Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 34979, "attachment_id": null, "is_private": false, "id": 75251, "time": "2005-05-24T01:56:50Z", "creator": "carnold@apache.org", "creation_time": "2005-05-24T01:56:50Z", "text": "One benefit of the previous changes was the ability to specify a time zone specifer in the file pattern so \nyou could have daily rolling files on GMT time for example.\n\nThe 23-May-2005 changes break rolling actions into ones performed before committing for the rollover \nand closing the active log file, changes take immediately after closing the log file and before returning \nfrom the rollover call and asynchronous actions that can be performed after returning.  In this case, \ncompress tasks can be performed without blocking.  The changes also make it less likely to start a rollover \nwithout being able to complete it."}, {"count": 3, "tags": [], "bug_id": 34979, "attachment_id": null, "is_private": false, "id": 75390, "time": "2005-05-25T23:48:51Z", "creator": "carnold@apache.org", "creation_time": "2005-05-25T23:48:51Z", "text": "RollingPolicyBase.activeFileName overlapped conceptually with FileAppender.file.  The current code \nshould work with an explicit active file name specified using either method, but the RPB.activeFileName \nshould be removed after next cycle (currently marked deprecated).\n\nFixedWindowRollingPolicy had required a value for RPB.activeFileName unlike TimeBasedRollingPolicy \nwhich would use FileNamePattern if no explicit filename was specified.  FWRP has been modified so that \nif no explicit active file is specified (using either RPB.activeFileName or FileAppender.file), the \nFileNamePattern will be evaluted to determine an active file name.  A pattern of \"MyLog.%i\" would \ntypically result in \"MyLog.0\" being the active log file and on rollover it would be come \"MyLog.1\", etc.\n\nThe renaming loop in FWRP has been changed to prevent a rapid series of rollover failures (perhaps due \nto a locked file) from quickly deleting all files above the locked file.  If for example, MyLog.2 existed \nand MyLog.1 was locked, each logged message after a size threshold was reached would result in \nMyLog.2 being incremented until it reached the maxIndex when it would be deleted.  The current code \ncollects file names from walking up from minIndex until there is a gap in the sequence.  So if MyLog.1 \nand MyLog.3 existed and MyLog.2 was missing (likely state after a rollover failure due to MyLog.1 being \nlocked), MyLog.1 would be renamed as MyLog.2 but higher logs would be unchanged.  In addition, this \nshould reduce the number of File.exists calls when the chain of log files is not full.\n\nThe only additional things I can think of now:\n\nA heartbeat (or equivalent) to RFA to specify an interval on which rollover would be evaluated (to \naddress the case of a TimeBasedRollingPolicy skipping days when the log can be quiet for a lengthy \nperiod).\n\nA maxAge on TimeBasedRollingPolicy that would indicate a number of periods (milliseconds?) after \nwhich a old log file would be deleted or a maxSize that would delete log files with the earliest \ntimestamps after the cumulative size had been exceeded.  However, I think both approaches would be \nnon-trivial."}, {"count": 4, "tags": [], "bug_id": 34979, "is_private": false, "id": 84909, "attachment_id": null, "creator": "carnold@apache.org", "creation_time": "2006-01-23T21:26:56Z", "time": "2006-01-23T21:26:56Z", "text": "Think this one is fixed."}]
[{"count": 0, "tags": [], "bug_id": 53958, "text": "I've defined a custom error page, /error.jspx. When I access it directly in Tomcat, the page serves, but I see this in the logs:\n\nSEVERE: Exception Processing ErrorPage[errorCode=404, location=/error.jspx]\njava.lang.NullPointerException\n\tat org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:456)\n\tat org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:327)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:193)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:680)\n\nBecause the page serves (it just says \"Error!\"), I believe that part is fine, including its declaration as a JSPX file and such.\n\nThis error page is mapped to common error codes and exceptions too. I am using Tomcat as an embedded server, so, proceeding like:\n\n      ErrorPage errorPage = new ErrorPage();\n      errorPage.setErrorCode(404);\n      errorPage.setLocation(\"/error.jspx\");\n      context.addErrorPage(errorPage);\n\nI also get the exception above when generating a 404 error on purpose. In this case, the error page does not show; I see a default Tomcat error page.\n\nIt seems like the RequestDispatcher for the error page is null in this situation. I am not sure why. I know it's null if the page is outside the web app context, but it isn't here. I think. I am configuring the one and only context for the web app thusly..\n\n    Context context = tomcat.addContext(\"/\", contextPath.getAbsolutePath());\n\nIs this my error? a bug?", "id": 162538, "time": "2012-10-03T09:48:57Z", "creator": "srowen@gmail.com", "creation_time": "2012-10-03T09:48:57Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "You should provide exact steps and source code to reproduce this issue.\n\nWith embedded Tomcat, a lot depends on details of how exactly you initialize it and your application. So you need to provide the actual code.\n\n\nNote that among Tomcat tests, there are several ones that use custom error pages. Searching for \".addErrorPage\" through the files, those are\no.a.c.core.TestStandardContextValve\no.a.c.core.TestStandardHostValve\n\nYou may use their code as a starting point.", "attachment_id": null, "id": 162539, "creator": "knst.kolinko@gmail.com", "time": "2012-10-03T10:15:53Z", "bug_id": 53958, "creation_time": "2012-10-03T10:15:53Z", "is_private": false}, {"count": 2, "tags": [], "text": "Will do -- I will try to reduce this to a minimal test case. I already caught that maybe the context needs to be \"\" instead of \"/\", but that didn't change behavior.", "attachment_id": null, "id": 162540, "creator": "srowen@gmail.com", "time": "2012-10-03T10:42:18Z", "bug_id": 53958, "creation_time": "2012-10-03T10:42:18Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53958, "text": "Created attachment 29441\nTest program showing NPE error\n\nThis is a (pretty) minimal example that reproduces the issue describe here. (You will need the generated JSP source code, attached here too.)", "id": 162544, "time": "2012-10-03T15:39:29Z", "creator": "srowen@gmail.com", "creation_time": "2012-10-03T15:39:29Z", "is_private": false, "attachment_id": 29441}, {"count": 4, "tags": [], "bug_id": 53958, "attachment_id": 29442, "id": 162545, "time": "2012-10-03T15:40:01Z", "creator": "srowen@gmail.com", "creation_time": "2012-10-03T15:40:01Z", "is_private": false, "text": "Created attachment 29442\nAccompanying error jspx"}, {"count": 5, "attachment_id": null, "creator": "srowen@gmail.com", "text": "Try running Test.java, then browse to \"http://localhost:8080/foo\" and see the NullPointerException.\n\nI've looked at the examples in test/, and looked at this code, and don't see anything being done wrongly in comparison. It's not exactly the same setup but seems simple and straightforward enough.", "id": 162546, "time": "2012-10-03T15:41:20Z", "bug_id": 53958, "creation_time": "2012-10-03T15:41:20Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 53958, "attachment_id": null, "id": 162667, "time": "2012-10-10T14:50:54Z", "creator": "markt@apache.org", "creation_time": "2012-10-10T14:50:54Z", "is_private": false, "text": "If you want to use generated JSPs you need to initialise Jasper before you instantiate the Servlets. Your sample code adds the JasperListener but it isn't called until after you have tried to create your servlet. That is what leads to the NPE.\n\nIf you replace:\nserver.addLifecycleListener(new JasperListener());\n\nwith:\n(new JasperListener()).lifecycleEvent(new LifecycleEvent(server, Lifecycle.BEFORE_INIT_EVENT, null));\n\nyou'll get the result you want.\n\nMark"}, {"count": 7, "tags": [], "text": "Thank you, though with that change it still shows the same behavior. The error page itself is fine, and serves if you access it directly. This exception occurs if you trigger a 404 by navigating to a non-existent URL.", "attachment_id": null, "id": 162672, "creator": "srowen@gmail.com", "time": "2012-10-10T16:10:27Z", "bug_id": 53958, "creation_time": "2012-10-10T16:10:27Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 53958, "text": "PS I don't know if any of the rest of this is useful, or rings a bell, but:\n\nI updated to 7.0.32 just to make sure that wasn't the issue. Same thing.\n\nThe issue is that a RequestDispatcher to \"/error.jspx\" is null. Ultimately that comes from this bit of ApplicationContext.getRequestDispatcher(String):\n\n            context.getMapper().map(uriMB, mappingData);\n            if (mappingData.wrapper == null) {\n                return (null);\n            }\n\nWhen it goes to find /error.jspx, in map(), it doesn't seem to find it where maybe it is intended to? In Mapper...\n\n        // Rule 1 -- Exact Match\n        Wrapper[] exactWrappers = contextVersion.exactWrappers;\n        internalMapExactWrapper(exactWrappers, path, mappingData);\n\n... doesn't find it. But it should match on the exact path /error.jspx.\n\nI'm not sure whether it still just incorrect use of embedded Tomcat. Anything at all that causes it to work is fine by me -- different ordering of calls or whatever.", "id": 162675, "time": "2012-10-10T17:47:16Z", "creator": "srowen@gmail.com", "creation_time": "2012-10-10T17:47:16Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 53958, "text": "(In reply to comment #7)\n> Thank you, though with that change it still shows the same behavior. The\n> error page itself is fine, and serves if you access it directly. This\n> exception occurs if you trigger a 404 by navigating to a non-existent URL.\n\nI was using your provided test case and you code works correctly (the custom error page is shown when requesting a non-existent page).\n\nIf you see further errors then a) the test case you have provided isn't what you are testing and b) the likely cause is a further bug in your code.\n\nThe Tomcat users list is the place to seek help once you have a test case that fails as you describe.", "id": 162676, "time": "2012-10-10T18:25:34Z", "creator": "markt@apache.org", "creation_time": "2012-10-10T18:25:34Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "srowen@gmail.com", "attachment_id": null, "text": "It is the exact code I'm testing, of course. I even copied it back from the attachment. I don't know what could be different between the two setups.\n\nThe change you suggested was actually already implemented in my 'real' code (loading the JSPX context), where the problem also manifests. I don't think that's the issue.\n\nI don't think it's a dumb config issue that users@ can help with, which is why I'm here with a test case, but indeed who knows.\n\nIf the source of the null/NPE I cited above doesn't suggest what may be going on, not much that can be done.", "id": 162677, "time": "2012-10-10T18:37:27Z", "bug_id": 53958, "creation_time": "2012-10-10T18:37:27Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 53958, "attachment_id": null, "id": 162683, "time": "2012-10-11T08:15:26Z", "creator": "srowen@gmail.com", "creation_time": "2012-10-11T08:15:26Z", "is_private": false, "text": "One last post with good news -- this *does* work:\n\n    Tomcat.addServlet(context, \"error_jspx\", new error_jspx());\n    context.addServletMapping(\"/error.jspx\", \"error_jspx\");\n\nThis doesn't, which was my original code:\n\n    Wrapper w = Tomcat.addServlet(context, \"error_jspx\", new error_jspx());\n    w.addMapping(\"/error.jspx\");\n\nThe reason being that this call won't pass on the mapping to its parent Context unless the container is started.\n\nI have no idea whether it's supposed to work, or not, or what; the NPE down the road is surprising.\n\nThank you for your help. As a long time Apache committer I don't like to bother devs."}]
[{"count": 0, "tags": [], "creator": "rsc@admadic.com", "attachment_id": 23013, "id": 123278, "time": "2008-12-13T14:45:06Z", "bug_id": 46392, "creation_time": "2008-12-13T14:45:06Z", "is_private": false, "text": "Created attachment 23013\nsource file for reading the ole10native data\n\nFinally I found the time to submit some code for reading Ole10Native structures. (For instance for extracting ZIP files embedded in Word files)\n\nAs I am not sure to which package it should belong, I put it in the default package.\n\nThe test file is a DOCX. The test case therefore depends on openxml4j. If necessary, this certainly can be resolved by extracting the files in the \"/word/embeddings\" location and working directly on them.\n\nBest wishes,\nRainer"}, {"count": 1, "text": "Created attachment 23014\nsource code for tests", "bug_id": 46392, "is_private": false, "id": 123279, "time": "2008-12-13T14:46:09Z", "creator": "rsc@admadic.com", "creation_time": "2008-12-13T14:46:09Z", "tags": [], "attachment_id": 23014}, {"count": 2, "tags": [], "creator": "rsc@admadic.com", "is_private": false, "text": "Created attachment 23015\ntest data file", "id": 123280, "time": "2008-12-13T14:46:51Z", "bug_id": 46392, "creation_time": "2008-12-13T14:46:51Z", "attachment_id": 23015}, {"count": 3, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": 23413, "id": 125774, "time": "2009-03-24T17:10:08Z", "bug_id": 46392, "creation_time": "2009-03-24T17:10:08Z", "is_private": false, "text": "Created attachment 23413\nSome Package files which don't work :)\n\nHere are some package files from our own test data suite which don't comply with the format in this parser.\n\nThe \\u0001Ole10Native stream has just 4 bytes length and the data.  However, there are also 3 additional OLE2 entries which may or may not contain the data missing from the \\u0001Ole10Native.\n\nCreator in this case was Microsoft Word 8.0 (Word 97.)\n\nI'd like to say it's a different format, but the items have the same CLSID as other items which do have the full structure you have submitted code for, and they are handled by the same DLL (packager.dll).  So I suspect MS consider them to be two versions of the same format."}, {"count": 4, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": null, "id": 125775, "time": "2009-03-24T17:17:56Z", "bug_id": 46392, "creation_time": "2009-03-24T17:17:56Z", "is_private": false, "text": "I will also add what I have discovered so far.  All the new files I can create using WordPad or Word 2003 have 6 bytes in \\u0003ObjInfo, whereas these old ones have 4.  But I only have these 6 old files and don't have a sufficiently old version of Windows and/or Office to get a copy of any more of them..."}, {"count": 5, "tags": [], "bug_id": 46392, "attachment_id": 23414, "text": "Created attachment 23414\nAnother one which doesn't work\n\nHere's one I created by dropping a .txt file into a Word 2003 document.  It doesn't work because the code which reads the 8 bytes between the first two strings and the third string apparently makes a false assumption about the meaning of the third byte.\n\nDisassembled stream:\n\n@0x0: 36 01 00 00\n  Length of remaining data.\n\n@0x4: 02 00\n  Our original theory was that this is TYMED_FILE, but TYMED are normally 4 bytes.\n  My new theory is that this is actually a header for the string array to follow,\n  as there happen to be two strings.\n\n@0x6: 50 61 63 6b 61 67 65 64 20 66 69 6c 65 00\n  \"Packaged file\" + NUL\n\n@0x14: 44 3a 5c 70 61 63 6b 61 67 65 64 2e 74 78 74 00\n  \"D:\\packaged.txt\" + NUL\n\n@0x24: 00 00\n  Unknown.  Possibly terminates the string array, assuming that theory was correct.\n\n@0x26: 03 00\n  Unknown.\n  Matches the value in \\u0003ObjInfo but this may just be coincidence.\n  Also matches the number of strings which follow the data but this may be coincidence too.\n\n@0x28: 30 00 00 00\n  Unknown.  Matches the length of the following string, possibly a coincidence.\n\n@0x2c: 43 3a 5c 55 73 65 72 73 5c 64 61 6e 69 65 6c 5c 41 70 70 44 61 74 61 5c\n       4c 6f 63 61 6c 5c 54 65 6d 70 5c 70 61 63 6b 61 67 65 64 2e 74 78 74 00\n  \"C:\\Users\\daniel\\AppData\\Local\\Temp\\packaged.txt\" + NUL\n\n@0x5c: 38 00 00 00\n  Length of actual data following.\n\n@0x98: 2f 00 00 00\n  Number of UTF-16LE chars following.\n\n@0xfa: 0d 00 00 00\n  Number of UTF-16LE chars following.\n\n@0x118: 0f 00 00 00\n  Number of UTF-16LE chars following.", "id": 125776, "time": "2009-03-24T18:16:36Z", "creator": "trejkaz@trypticon.org", "creation_time": "2009-03-24T18:16:36Z", "is_private": false}, {"count": 6, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": null, "id": 125777, "time": "2009-03-24T19:18:41Z", "bug_id": 46392, "creation_time": "2009-03-24T19:18:41Z", "is_private": false, "text": "The value @0x26 which was \"03 00\" is \"01 00\" and \"00 00\" throughout the existing test data in this issue.  I'm starting to think it's a format number of some kind.\n\n00 00 , followed by:\n  00 00 00 00 (and then EOF)\n\n01 00 , followed by:\n  00 00\n  ASCIIZ command line\n  00 00\n\n03 00 , followed by:\n  4 bytes - length of command line\n  ASCIIZ command line (we know the length already though)\n  4 bytes - attachment length\n  attachment data itself\n\n  Optionally in here, some multiple (normally 3 it seems) of this:\n    4 bytes - length of Unicode string\n    Unicode string value (no null termination on these)\n\n  00 00\n\nWhat worries me is the missing 02 00.  I doubt there will be any values newer than 04 00 yet if Office 2007 on Vista is still generating 03 00, but I haven't yet seen a file with 02 00 which suggests a big gap in my knowledge.  So far the above is consistent for all files I have actually seen."}, {"attachment_id": null, "tags": [], "bug_id": 46392, "text": "Added in r995415 with some changes. Thank you", "count": 7, "id": 139787, "time": "2010-09-09T09:19:07Z", "creator": "max.valjanski@gmail.com", "creation_time": "2010-09-09T09:19:07Z", "is_private": false}]
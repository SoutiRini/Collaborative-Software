[{"count": 0, "attachment_id": null, "creator": "alexr@leftfield.org", "is_private": false, "id": 108998, "time": "2007-10-04T14:47:33Z", "bug_id": 43558, "creation_time": "2007-10-04T14:47:33Z", "tags": [], "text": "Info-zip and WinZip both set and obey this bit to indicate that a file is a text file and should have line \nending translation from the host platform to the local platform where the unzip is happening."}, {"count": 1, "attachment_id": null, "bug_id": 43558, "text": "???? How can this be done ??????\n\n", "id": 108999, "time": "2007-10-04T15:07:52Z", "creator": "peterreilly@apache.org", "creation_time": "2007-10-04T15:07:52Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "If I'm following the code correctly, Info-zip's trees.c looks at the compressed code histograms to decide if \nthe file being compressed is binary or text and then sets this bit accordingly. The decompressor looks at \nthe platform that did the compression and this flag to decide what line endings to change from/to.", "is_private": false, "bug_id": 43558, "id": 109004, "time": "2007-10-04T17:10:21Z", "creator": "alexr@leftfield.org", "creation_time": "2007-10-04T17:10:21Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "text": "We aren't going to try and be clever and work it out for the end user. There's a\ngood reason for that; the algorithms always get it wrong. Try, for example, to\ndistinguish UTF8 from iso-8859-1 or ANSI. \n\n1. We could do is add a textfiles attribute to zipfileset that tells zip to set\nthe bit \n\n<zipfileset dir=\"doc\" includes=\"**/*.txt\" textfiles=\"true\" />\n\n2. we'd need to do the same on unzip.\n\n3. and write tests.\n\nThe normal best practise here is to use <fixcrlf> to force in the line endings\nyou want; DOS for BAT files and windows text, unix for .sh scripts, and\neverything else can be left alone.\n", "count": 3, "id": 109016, "time": "2007-10-05T02:24:33Z", "bug_id": 43558, "creation_time": "2007-10-05T02:24:33Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 43558, "text": "(In reply to comment #3)\n> We aren't going to try and be clever and work it out for the end user. There's a\n> good reason for that; the algorithms always get it wrong. Try, for example, to\n> distinguish UTF8 from iso-8859-1 or ANSI. \n\nThe existing implementations only handle ASCII.\n\n> 1. We could do is add a textfiles attribute to zipfileset that tells zip to set\n> the bit \n> \n> <zipfileset dir=\"doc\" includes=\"**/*.txt\" textfiles=\"true\" />\n> \n> 2. we'd need to do the same on unzip.\n> \n> 3. and write tests.\n\nThis would work.\n\n> The normal best practise here is to use <fixcrlf> to force in the line endings\n> you want; DOS for BAT files and windows text, unix for .sh scripts, and\n> everything else can be left alone.\n\nThis doesn't work. Unzip on both Linux and Windows and you're not getting the local line endings.", "id": 109022, "time": "2007-10-05T08:28:07Z", "creator": "alexr@leftfield.org", "creation_time": "2007-10-05T08:28:07Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "this is one piece of the first improvement asked in bug 44816\n\n*** This bug has been marked as a duplicate of bug 44816 ***", "is_private": false, "id": 141048, "creator": "bodewig@apache.org", "time": "2010-10-26T06:49:10Z", "bug_id": 43558, "creation_time": "2010-10-26T06:49:10Z", "attachment_id": null}]
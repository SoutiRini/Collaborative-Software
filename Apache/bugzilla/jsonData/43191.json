[{"count": 0, "tags": [], "bug_id": 43191, "is_private": false, "text": "I have set compression=\"on\" and compressableMimeType=\"text/html\" in server.xml.\nIt appears that the value of compressableMimeType is being ignored. My XML\nresponses are all coming back gzipped. If I switch to compression=\"off\" the\nresponses are not gzipped, but as soon as I turn it on, regardless of the value\nof compressableMimeType, the XML responses are coming back gzipped.\n\nA full Connector tag follows. Note that this is just an example -- I have tried\nmany values for compressableMimeType (that do NOT include text/xml) and the\nresponses are still compressed.\n\n      <Connector port=\"7630\" address=\"${jboss.bind.address}\"\n         maxThreads=\"20\" minSpareThreads=\"4\" maxSpareThreads=\"10\" strategy=\"ms\"\nmaxHttpHeaderSize=\"8192\"\n         emptySessionPath=\"true\" enableLookups=\"false\" redirectPort=\"7643\"\nacceptCount=\"16\"\n         connectionTimeout=\"20000\" disableUploadTimeout=\"true\"\n         compression=\"off\"\n        \ncompressableMimeType=\"text/html,text/javascript,application/x-javascript,application/javascript\"\n/>", "id": 107064, "time": "2007-08-22T15:02:44Z", "creator": "dave.wood@quest.com", "creation_time": "2007-08-22T15:02:44Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 43191, "is_private": false, "id": 107229, "time": "2007-08-24T08:13:19Z", "creator": "len.popp@gmail.com", "creation_time": "2007-08-24T08:13:19Z", "tags": [], "text": "The compressableMimeType isn't exactly ignored. It lets you add new MIME types\nfor compression, but there doesn't seem to be any way to remove the default set\nof types.\n\nThat is, if you specify compressableMimeType=\"text/html\" you effectively end up\nwith compressableMimeType=\"text/html,text/xml,text/plain,text/html\".\n\nI have verified the problem in 5.5.23 and 6.0.trunk. It looks easy to fix, I'll\ngive it a try."}, {"count": 2, "attachment_id": 20702, "bug_id": 43191, "is_private": false, "id": 107235, "time": "2007-08-24T11:05:29Z", "creator": "len.popp@gmail.com", "creation_time": "2007-08-24T11:05:29Z", "tags": [], "text": "Created attachment 20702\npatch vs. tc6.0.x/trunk\n\nPatch for 6.0.trunk. Connector attribute compressableMimeType is the complete\nlist of compressable MIME types, instead of being added to the default list."}, {"count": 3, "tags": [], "text": "Created attachment 20713\npatch for 5.5\n\nHere's the same patch for 5.5, since that's what the bug was reported against.", "is_private": false, "id": 107286, "creator": "len.popp@gmail.com", "time": "2007-08-27T06:39:56Z", "bug_id": 43191, "creation_time": "2007-08-27T06:39:56Z", "attachment_id": 20713}, {"count": 4, "tags": [], "text": "If seems that this is a good idea, but can be a regression with older tomcat versions :-(\n\nPeter", "attachment_id": null, "id": 107341, "creator": "pr@objektpark.de", "time": "2007-08-28T06:10:38Z", "bug_id": 43191, "creation_time": "2007-08-28T06:10:38Z", "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 107381, "time": "2007-08-29T04:48:14Z", "bug_id": 43191, "creation_time": "2007-08-29T04:48:14Z", "is_private": false, "text": "*** Bug 37834 has been marked as a duplicate of this bug. ***"}, {"count": 6, "tags": [], "bug_id": 43191, "attachment_id": null, "id": 107545, "time": "2007-08-31T06:37:53Z", "creator": "len.popp@gmail.com", "creation_time": "2007-08-31T06:37:53Z", "is_private": false, "text": "(In reply to comment #4)\n\nAs it is, there is no way to turn off gzip compression for one file type while\nkeeping it for others. That seems more serious than the possible regression,\nwhich is easy to fix by setting compressableMimeType correctly. (And are there\nreally a lot of users that are using it incorrectly? The documentation is quite\nclear.)\n\nAlternatively, I guess you could add a new attribute that does what\ncompressableMimeType was supposed to do...\n"}, {"count": 7, "tags": [], "text": "I have applied your patch to trunk (expanded to include the other connectors) and proposed it for 6.0.x and 5.5.x", "attachment_id": null, "id": 116196, "creator": "markt@apache.org", "time": "2008-05-03T03:26:17Z", "bug_id": 43191, "creation_time": "2008-05-03T03:26:17Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 43191, "is_private": false, "text": "This has been applied to 6.0.x and will be included in 6.0.17 onwards.", "id": 116675, "time": "2008-05-15T12:35:20Z", "creator": "markt@apache.org", "creation_time": "2008-05-15T12:35:20Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 43191, "attachment_id": null, "text": "Opps - this is still open for 5.5.x", "id": 116712, "time": "2008-05-16T10:56:35Z", "creator": "markt@apache.org", "creation_time": "2008-05-16T10:56:35Z", "is_private": false}, {"count": 10, "tags": [], "text": "I would like to share an alternative approach for this problem I just implemented which avoids having to update Tomcat (or patch it).\n\nGrab CompressionFilter.java, CompressionResponseStream.java and CompressionServletResponseWrapper.java from the Tomcat source code distribution (I did this with the 5.5.25 source).\n\nOpen up CompressionServletResponseWrapper.java and modify the writetoGZip() method. On line 305, replace...\n\n    response.addHeader(\"Content-Encoding\", \"gzip\");\n    gzipstream = new GZIPOutputStream(output);\n\n...with...\n\n    if ((response.getContentType()!=null) &&\n         (response.getContentType().equals(\"application/pdf\")) {\n\n        // I want to compress this content type\n        response.addHeader(\"Content-Encoding\", \"gzip\");\n        gzipstream = new GZIPOutputStream(output);\n    } else {\n        // Don't want to compress this content type\n        gzipstream = output;\n    }\n\nCompile all three Java classes, then add the filter into your web.xml file:\n\n    <filter>\n        <filter-name>Compressing Filter</filter-name>\n        <filter-class>compressionFilters.CompressionFilter</filter-class>\n        <init-param>\n            <param-name>compressionThreshold</param-name>\n            <param-value>1</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>Compressing Filter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n\nThis is very handy if you don't want to upgrade Tomcat, or for Tomcat 5.5.x users for who there isn't an upgrade with the patch available yet. Also useful if you don't want to compress server-wide for all of your web applications.\n\nEnjoy!", "is_private": false, "id": 117717, "creator": "richard.mundell@trgrp.com", "time": "2008-06-16T05:44:43Z", "bug_id": 43191, "creation_time": "2008-06-16T05:44:43Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "For such a simple concept, every compression filter I have ever seen has serious problems. Mostly the problems are not addressed, and instead all kinds of finely grained mechanisms are created to more selectively apply compression. For example, if a response sets the content-length header, I have seen compression filters break. The browser either hangs waiting for the rest of the response, or the response is truncated to the length set. I don't remember if Tomcat's compression filter is guilty of this behavior or not, but I suspect the latter due to the existence of the compressionThreshold setting. \n\nI have created my own GZIPFilter which addresses all the problems I have seen in various other compression filter implementations. I am posting it as an attachment to this bug, feel free to use it, or not. Its advantages are captured in the comments, in summary, it streams rather than makes a copy, it handles content-length correctly, it detects client support of gzip compression, and it doesn't double compress. It is not problem-free, the known problems and limitations are also captured in the comments.\n\nMy theory on filter mapping is to keep it simple. So my filter doesn't care about mime-types, or any other qualification other compression filters use to decide whether to compress or not. As I stated before, it is my experience that these features exist to \"fix\" other problems in the filters.\n\nThe original poster can use my GZIPFilter in one of a few ways:\n1) Use filter-mapping to selectively compress content.\n2) Extend GZIPFilter, look at the mime-type header, and compress or not by calling super.doFilter().\n3) Modify my GZIPFilter to look at mime-types.\n", "is_private": false, "id": 118154, "creator": "jleech@virtela.net", "time": "2008-07-01T10:11:24Z", "bug_id": 43191, "creation_time": "2008-07-01T10:11:24Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 43191, "attachment_id": 22203, "text": "Created attachment 22203\nGZIP compression filter", "id": 118155, "time": "2008-07-01T10:12:26Z", "creator": "jleech@virtela.net", "creation_time": "2008-07-01T10:12:26Z", "is_private": false}, {"count": 13, "attachment_id": null, "bug_id": 43191, "is_private": false, "id": 119144, "time": "2008-07-30T13:24:26Z", "creator": "markt@apache.org", "creation_time": "2008-07-30T13:24:26Z", "tags": [], "text": "This is fixed for 5.5.x and will be included in 5.5.27 onwards."}]
[{"count": 0, "tags": [], "creator": "qiujiayu@myce.net.cn", "text": "bug description:\nthe first logfile name does not format with datePattern ;\nexample:\nif my log4j.properties is:\nlog4j.appender.LOGFILE=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.LOGFILE.File=./logs/hhhh.log\nlog4j.appender.LOGFILE.DatePattern='_'yyyyMMdd'.log'\n...\nthen the logger filename are :\nfirst day is :hhhh.log\nsecond day is : hhhh.log.20070322.log\n....\nso i think the first day logger filename mush \"hhhh.log.20070321.log\"\n\ni think code as below is right;\nthese codes are i append or edit at:\nline 193;\nactivateOptions() function;\nrollOver() function;\n\ncode:\n\n1\t/*\n2\t* Copyright 1999-2005 The Apache Software Foundation.\n3\t*\n4\t* Licensed under the Apache License, Version 2.0 (the License);\n5\t* you may not use this file except in compliance with the License.\n6\t* You may obtain a copy of the License at\n7\t*\n8\t*      http://www.apache.org/licenses/LICENSE-2.0\n9\t*\n10\t* Unless required by applicable law or agreed to in writing, software\n11\t* distributed under the License is distributed on an AS IS BASIS,\n12\t* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or \nimplied.\n13\t* See the License for the specific language governing permissions and\n14\t* limitations under the License.\n15\t*/\n16\tpackage org.apache.log4j;\n17\timport java.io.IOException;\n18\timport java.io.File;\n19\timport java.text.SimpleDateFormat;\n20\timport java.util.Date;\n21\timport java.util.GregorianCalendar;\n22\timport java.util.Calendar;\n23\timport java.util.TimeZone;\n24\timport java.util.Locale;\n25\timport org.apache.log4j.helpers.LogLog;\n26\timport org.apache.log4j.spi.LoggingEvent;\n27\t/**\n28\t* DailyRollingFileAppender extends {@link FileAppender} so that the \nunderlying\n29\t* file is rolled over at a user chosen frequency.\n30\t*\n31\t* <p>\n32\t* The rolling schedule is specified by the <b>DatePattern</b> option. \nThis\n33\t* pattern should follow the {@link SimpleDateFormat} conventions. In\n\t\t\n34\t* particular, you <em>must</em> escape literal text within a pair of \nsingle\t\t\n35\t* quotes. A formatted version of the date pattern is used as the \nsuffix for the\t\t\n36\t* rolled file name.\t\t\n37\t*\t\t\n38\t* <p>\t\t\n39\t* For example, if the <b>File</b> option is set to \n<code>/foo/bar.log</code>\t\t\n40\t* and the <b>DatePattern</b> set to <code>'.'yyyy-MM-dd</code>, on\n\t\t\n41\t* 2001-02-16 at midnight, the logging file <code>/foo/bar.log</code> \nwill be\t\t\n42\t* copied to <code>/foo/bar.log.2001-02-16</code> and logging for 2001-\n02-17\t\t\n43\t* will continue in <code>/foo/bar.log</code> until it rolls over the \nnext\t\t\n44\t* day.\t\t\n45\t*\t\t\n46\t* <p>\t\t\n47\t* Is is possible to specify monthly, weekly, half-daily, daily, \nhourly, or\t\t\n48\t* minutely rollover schedules.\t\t\n49\t*\n50\t* <p>\n51\t* <table border=\"1\" cellpadding=\"2\">\n52\t* <tr>\n53\t* <th>DatePattern</th>\n54\t* <th>Rollover schedule</th>\n55\t* <th>Example</th>\n56\t*\n57\t* <tr>\n58\t* <td><code>'.'yyyy-MM</code>\n59\t* <td>Rollover at the beginning of each month</td>\n60\t*\n61\t* <td>At midnight of May 31st, 2002 <code>/foo/bar.log</code> will be \ncopied\n62\t* to <code>/foo/bar.log.2002-05</code>. Logging for the month of June \nwill\n63\t* be output to <code>/foo/bar.log</code> until it is also rolled over \nthe\n64\t* next month.\n65\t*\n66\t* <tr>\n67\t* <td><code>'.'yyyy-ww</code>\n68\t*\n69\t* <td>Rollover at the first day of each week. The first day of the week\n70\t* depends on the locale.</td>\n71\t*\n72\t* <td>Assuming the first day of the week is Sunday, on Saturday \nmidnight, June\n73\t* 9th 2002, the file <i>/foo/bar.log</i> will be copied to\n74\t* <i>/foo/bar.log.2002-23</i>. Logging for the 24th week of 2002 will \nbe\n75\t* output to <code>/foo/bar.log</code> until it is rolled over the next \nweek.\n76\t*\n77\t* <tr>\n78\t* <td><code>'.'yyyy-MM-dd</code>\n79\t*\n80\t* <td>Rollover at midnight each day.</td>\n81\t*\n82\t* <td>At midnight, on March 8th, 2002, <code>/foo/bar.log</code> will \nbe\n83\t* copied to <code>/foo/bar.log.2002-03-08</code>. Logging for the 9th \nday of\n84\t* March will be output to <code>/foo/bar.log</code> until it is rolled \nover\n85\t* the next day.\n86\t*\n87\t* <tr>\n88\t* <td><code>'.'yyyy-MM-dd-a</code>\n89\t*\n90\t* <td>Rollover at midnight and midday of each day.</td>\n91\t*\n92\t* <td>At noon, on March 9th, 2002, <code>/foo/bar.log</code> will be \ncopied\n93\t* to <code>/foo/bar.log.2002-03-09-AM</code>. Logging for the \nafternoon of\n94\t* the 9th will be output to <code>/foo/bar.log</code> until it is \nrolled over\n95\t* at midnight.\n96\t*\n97\t* <tr>\n98\t* <td><code>'.'yyyy-MM-dd-HH</code>\n99\t*\n100\t* <td>Rollover at the top of every hour.</td>\n101\t*\n102\t* <td>At approximately 11:00.000 o'clock on March 9th, 2002,\n103\t* <code>/foo/bar.log</code> will be copied to\n104\t* <code>/foo/bar.log.2002-03-09-10</code>. Logging for the 11th hour \nof the\n105\t* 9th of March will be output to <code>/foo/bar.log</code> until it is \nrolled\n106\t* over at the beginning of the next hour.\n107\t*\n108\t*\n109\t* <tr>\n110\t* <td><code>'.'yyyy-MM-dd-HH-mm</code>\n111\t*\n112\t* <td>Rollover at the beginning of every minute.</td>\n113\t*\n114\t* <td>At approximately 11:23,000, on March 9th, 2001,\n115\t* <code>/foo/bar.log</code> will be copied to\n116\t* <code>/foo/bar.log.2001-03-09-10-22</code>. Logging for the minute of\n117\t* 11:23 (9th of March) will be output to <code>/foo/bar.log</code> \nuntil it\n118\t* is rolled over the next minute.\n119\t*\n120\t* </table>\n121\t*\n122\t* <p>\n123\t* Do not use the colon \":\" character in anywhere in the \n<b>DatePattern</b>\n124\t* option. The text before the colon is interpeted as the protocol \nspecificaion\n125\t* of a URL which is probably not what you want.\n126\t*\n127\t*\n128\t* @author Eirik Lygre\n129\t* @author Ceki G&uuml;lc&uuml;\n130\t*/\n131\tpublic class DailyRollingFileAppender extends FileAppender {\n132\t\t// The code assumes that the following constants are in a \nincreasing\n133\t\t// sequence.\n134\t\tstatic final int TOP_OF_TROUBLE = -1;\n135\t\tstatic final int TOP_OF_MINUTE = 0;\n136\t\tstatic final int TOP_OF_HOUR = 1;\n137\t\tstatic final int HALF_DAY = 2;\n138\t\tstatic final int TOP_OF_DAY = 3;\n139\t\tstatic final int TOP_OF_WEEK = 4;\n140\t\tstatic final int TOP_OF_MONTH = 5;\n141\t\t/**\n142\t\t * The date pattern. By default, the pattern is set \nto \"'.'yyyy-MM-dd\"\n143\t\t * meaning daily rollover.\n144\t\t */\n145\t\tprivate String datePattern = '.'yyyy-MM-dd;\n146\t\t/**\n147\t\t * The log file will be renamed to the value of the \nscheduledFilename\n148\t\t * variable when the next interval is entered. For example, if \nthe rollover\n149\t\t * period is one hour, the log file will be renamed to the \nvalue of\n150\t\t * scheduledFilename at the beginning of the next hour.\n151\t\t *\n152\t\t * The precise time when a rollover occurs depends on logging \nactivity.\n153\t\t */\n154\t\tprivate String scheduledFilename;\n155\t\t/**\n156\t\t * The next time we estimate a rollover should occur.\n157\t\t */\n158\t\tprivate long nextCheck = System.currentTimeMillis() - 1;\n159\t\tDate now = new Date();\n160\t\tSimpleDateFormat sdf;\n161\t\tRollingCalendar rc = new RollingCalendar();\n162\t\tint checkPeriod = TOP_OF_TROUBLE;\n163\t\t// The gmtTimeZone is used only in computeCheckPeriod() method.\n164\t\tstatic final TimeZone gmtTimeZone = TimeZone.getTimeZone\n(\"GMT\");\n165\t\t/**\n166\t\t * The default constructor does nothing.\n167\t\t */\n168\t\tpublic DailyRollingFileAppender() {\n169\t\t}\n170\t\t/**\n171\t\t * Instantiate a <code>DailyRollingFileAppender</code> and \nopen the file\n172\t\t * designated by <code>filename</code>. The opened filename \nwill become\n173\t\t * the ouput destination for this appender.\n174\t\t *\n175\t\t */\n176\t\tpublic DailyRollingFileAppender(Layout layout, String filename,\n177\t\t\t\tString datePattern) throws IOException {\n178\t\t\tsuper(layout, filename, true);\n179\t\t\tthis.datePattern = datePattern;\n180\t\t\tactivateOptions();\n181\t\t}\n182\t\t/**\n183\t\t * The <b>DatePattern</b> takes a string in the same format as \nexpected by\n184\t\t * {@link SimpleDateFormat}. This options determines the \nrollover schedule.\n185\t\t */\n186\t\tpublic void setDatePattern(String pattern) {\n187\t\t\tdatePattern = pattern;\n188\t\t}\n189\t\t/** Returns the value of the <b>DatePattern</b> option. */\n190\t\tpublic String getDatePattern() {\n191\t\t\treturn datePattern;\n192\t\t}\n193\t\tprivate String tempFileName=null;//\u00d5\u00e2\u00ca\u00c7\u00ce\u00d2\u00cc\u00ed\u00bc\u00d3\u00d2\u00bb\u00b8\u00f6\u00b1\u00e4\u00c1\u00bf\u00a3\u00ac\u00d3\u00c3\u00c0\u00b4\u00bc\u00c7\n\u00d2\u00e4\u00a1\u00b0log4j.appender.LOGFILE.File=./logs/logfile.log\u00a1\u00b1\n194\t\tpublic void activateOptions() {\t\t\n195\t\t\tif (datePattern != null && fileName != null) {\n196\t\t\t\ttempFileName=fileName;//\u00b0\u00d1\u00a1\u00b0./logs/logfile.log\u00a1\u00b1\u00b8\u00bd\n\u00b8\u00f8tempFileName\n197\t\t\t\tnow.setTime(System.currentTimeMillis());\n198\t\t\t\tsdf = new SimpleDateFormat(datePattern);\n199\t\t\t\tint type = computeCheckPeriod();\n200\t\t\t\tprintPeriodicity(type);\n201\t\t\t\trc.setType(type);\n202\t\t\t\tFile file = new File(fileName);\n203\t\t\t\t//--------------\u00ce\u00d2\u00b8\u00c4\u00b6\u00af\u00b5\u00c4\u00b5\u00d8\u00b7\u00bd---------------------\n---\n204\t\t\t\tDate d=new Date();\n205\t\t\t\tif(file.exists())\n206\t\t\t\t{\n207\t\t\t\t\td=new Date(file.lastModified());\n208\t\t\t\t}\n209\t\t\t\tscheduledFilename = fileName\n210\t\t\t\t\t\t+ sdf.format(d);//\u00b8\u00f1\u00ca\u00bd\u00bb\u00af\u00ce\u00c4\u00bc\u00fe\u00c3\u00fb\n211\t\t\t\tsetFile(scheduledFilename);//\u00b0\u00d1\u00b8\u00f1\u00ca\u00bd\u00bb\u00af\u00ba\u00c3\u00b5\u00c4\u00ce\u00c4\u00bc\u00fe\u00c3\u00fb\u00a3\u00ac\n\u00c9\u00e8\u00d6\u00c3\u00ce\u00aa\u00c8\u00d5\u00d6\u00be\u00ce\u00c4\u00bc\u00fe\u00c3\u00fb\n212\t\t\t\tnow.setTime(System.currentTimeMillis());//\u00c9\u00e8\u00d6\u00c3\u00b5\u00b1\n\u00c7\u00b0\u00c8\u00d5\u00c6\u00da\n213\t\t\t\tnextCheck = rc.getNextCheckMillis(now);//\u00bb\u00f1\u00c8\u00a1\u00cf\u00c2\n\u00b4\u00ce\u00b8\u00fc\u00d0\u00c2\u00ce\u00c4\u00bc\u00fe\u00c3\u00fb\u00b5\u00c4\u00c8\u00d5\u00c6\u00da\n214\t\t\t\t//---------------------------------------------\n-------\n215\t\t\t} else {\n216\t\t\t\tLogLog\n217\t\t\t\t\t\t.error(\"Either File or \nDatePattern options are not set for appender [\"\n218\t\t\t\t\t\t\t\t+ name + \"].\");\n219\t\t\t}\n220\t\t\tsuper.activateOptions();//\u00d5\u00e2\u00b8\u00f6\u00b1\u00d8\u00d0\u00eb\u00b7\u00c5\u00b5\u00bd\u00d5\u00e2\u00d7\u00ee\u00ba\u00f3\u00a3\u00ac\u00d2\u00f2\u00ce\u00aa\u00cb\u00fc\u00c0\u00ef\u00c3\u00e6\u00bb\u00e1\u00b5\u00f7\n\u00d3\u00c3\u00b7\u00bd\u00b7\u00a8\u00a1\u00b0this.setFile(datedFilename, false, this.bufferedIO, this.bufferSize);\u00a1\u00b1\n221\t\t}\n222\t\tvoid printPeriodicity(int type) {\n223\t\t\tswitch (type) {\n224\t\t\tcase TOP_OF_MINUTE:\n225\t\t\t\tLogLog.debug(\"Appender [\" + name + \"] to be \nrolled every minute.\");\n226\t\t\t\tbreak;\n227\t\t\tcase TOP_OF_HOUR:\n228\t\t\t\tLogLog.debug(\"Appender [\" + name\n229\t\t\t\t\t\t+ \"] to be rolled on top of \nevery hour.\");\n230\t\t\t\tbreak;\n231\t\t\tcase HALF_DAY:\n232\t\t\t\tLogLog.debug(\"Appender [\" + name\n233\t\t\t\t\t\t+ \"] to be rolled at midday \nand midnight.\");\n234\t\t\t\tbreak;\n235\t\t\tcase TOP_OF_DAY:\n236\t\t\t\tLogLog.debug(\"Appender [\" + name + \"] to be \nrolled at midnight.\");\n237\t\t\t\tbreak;\n238\t\t\tcase TOP_OF_WEEK:\n239\t\t\t\tLogLog.debug(\"Appender [\" + name\n240\t\t\t\t\t\t+ \"] to be rolled at start of \nweek.\");\n241\t\t\t\tbreak;\n242\t\t\tcase TOP_OF_MONTH:\n243\t\t\t\tLogLog.debug(\"Appender [\" + name\n244\t\t\t\t\t\t+ \"] to be rolled at start of \nevery month.\");\n245\t\t\t\tbreak;\n246\t\t\tdefault:\n247\t\t\t\tLogLog.warn(\"Unknown periodicity for appender \n[\" + name + \"].\");\n248\t\t\t}\n249\t\t}\n250\t\t// This method computes the roll over period by looping over \nthe\n251\t\t// periods, starting with the shortest, and stopping when the \nr0 is\n252\t\t// different from from r1, where r0 is the epoch formatted \naccording\n253\t\t// the datePattern (supplied by the user) and r1 is the\n254\t\t// epoch+nextMillis(i) formatted according to datePattern. All \ndate\n255\t\t// formatting is done in GMT and not local format because the \ntest\n256\t\t// logic is based on comparisons relative to 1970-01-01 \n00:00:00\n257\t\t// GMT (the epoch).\n258\t\tint computeCheckPeriod() {\n259\t\t\tRollingCalendar rollingCalendar = new RollingCalendar\n(gmtTimeZone,\n260\t\t\t\t\tLocale.ENGLISH);\n261\t\t\t// set sate to 1970-01-01 00:00:00 GMT\n262\t\t\tDate epoch = new Date(0);\n263\t\t\tif (datePattern != null) {\n264\t\t\t\tfor (int i = TOP_OF_MINUTE; i <= TOP_OF_MONTH; \ni++) {\n265\t\t\t\t\tSimpleDateFormat simpleDateFormat = \nnew SimpleDateFormat(\n266\t\t\t\t\t\t\tdatePattern);\n267\t\t\t\t\tsimpleDateFormat.setTimeZone\n(gmtTimeZone); // do all date\n268\t\t\t\t\t// formatting in GMT\n269\t\t\t\t\tString r0 = simpleDateFormat.format\n(epoch);\n270\t\t\t\t\trollingCalendar.setType(i);\n271\t\t\t\t\tDate next = new Date\n(rollingCalendar.getNextCheckMillis(epoch));\n272\t\t\t\t\tString r1 = simpleDateFormat.format\n(next);\n273\t\t\t\t\t// System.out.println(\"Type = \"+i+\", \nr0 = \"+r0+\", r1 = \"+r1);\n274\t\t\t\t\tif (r0 != null && r1 != null && !\nr0.equals(r1)) {\n275\t\t\t\t\t\treturn i;\n276\t\t\t\t\t}\n277\t\t\t\t}\n278\t\t\t}\n279\t\t\treturn TOP_OF_TROUBLE; // Deliberately head for \ntrouble...\n280\t\t}\n281\t\t/**\n282\t\t * Rollover the current file to a new file.\n283\t\t */\n284\t\tvoid rollOver() throws IOException {\n285\t\t\t/* Compute filename, but only if datePattern is \nspecified */\n286\t\t\tif (datePattern == null) {\n287\t\t\t\terrorHandler.error(\"Missing DatePattern option \nin rollOver().\");\n288\t\t\t\treturn;\n289\t\t\t}\n290\t\t\tString datedFilename =tempFileName+sdf.format(now);//\u00b5\u00b1\n\u00c7\u00b0\u00b5\u00c4\u00ce\u00c4\u00bc\u00fe\u00c3\u00fb\n291\t\t\t// It is too early to roll over because we are still \nwithin the\n292\t\t\t// bounds of the current interval. Rollover will occur \nonce the\n293\t\t\t// next interval is reached.\n294\t\t\tif (scheduledFilename.equals(datedFilename)) {\n295\t\t\t\treturn;\n296\t\t\t}\n297\t\t\t// close current file, and rename it to datedFilename\n298\t\t\tthis.closeFile();\n299\t\t\tFile target = new File(datedFilename);\n300\t\t\tif (target.exists()) {\n301\t\t\t\ttarget.delete();\n302\t\t\t}\n303\t\t\t//------------------------\u00b2\u00bb\u00d0\u00e8\u00d2\u00aa\u00d5\u00e2\u00b6\u00ce\u00b4\u00fa\u00c2\u00eb-----------\n304\t//\t\tFile file = new File(fileName);\n305\t//\t\tboolean result = file.renameTo(target);\n306\t//\t\tif (result) {\n307\t//\t\t\tLogLog.debug(fileName + \" -> \" + \nscheduledFilename);\n308\t//\t\t} else {\n309\t//\t\t\tLogLog.error(\"Failed to rename [\" + fileName \n+ \"] to [\"\n310\t//\t\t\t\t\t+ scheduledFilename + \"].\");\n311\t//\t\t}\n312\t\t\t//------------------------------------------------\n313\t\t\ttry {\n314\t\t\t\t// This will also close the file. This is OK \nsince multiple\n315\t\t\t\t// close operations are safe.\n316\t\t\t\tthis.setFile(datedFilename, false, \nthis.bufferedIO, this.bufferSize);\n317\t\t\t} catch (IOException e) {\n318\t\t\t\terrorHandler.error(\"setFile(\" + fileName + \", \nfalse) call failed.\");\n319\t\t\t}\n320\t\t\tscheduledFilename = datedFilename;\n321\t\t}\n322\t\t/**\n323\t\t * This method differentiates DailyRollingFileAppender from \nits super class.\n324\t\t *\n325\t\t * <p>\n326\t\t * Before actually logging, this method will check whether it \nis time to do\n327\t\t * a rollover. If it is, it will schedule the next rollover \ntime and then\n328\t\t * rollover.\n329\t\t */\n330\t\tprotected void subAppend(LoggingEvent event) {\n331\t\t\tlong n = System.currentTimeMillis();\n332\t\t\tif (n >= nextCheck) {\n333\t\t\t\tnow.setTime(n);\n334\t\t\t\tnextCheck = rc.getNextCheckMillis(now);\n335\t\t\t\ttry {\n336\t\t\t\t\trollOver();\n337\t\t\t\t} catch (IOException ioe) {\n338\t\t\t\t\tLogLog.error(\"rollOver() failed.\", \nioe);\n339\t\t\t\t}\n340\t\t\t}\n341\t\t\tsuper.subAppend(event);\n342\t\t}\n343\t}\n344\t/**\n345\t* RollingCalendar is a helper class to DailyRollingFileAppender. Given \na\n346\t* periodicity type and the current time, it computes the start of the \nnext\n347\t* interval.\n348\t*/\n349\tclass RollingCalendar extends GregorianCalendar {\n350\t\tint type = DailyRollingFileAppender.TOP_OF_TROUBLE;\n351\t\tRollingCalendar() {\n352\t\t\tsuper();\n353\t\t}\n354\t\tRollingCalendar(TimeZone tz, Locale locale) {\n355\t\t\tsuper(tz, locale);\n356\t\t}\n357\t\tvoid setType(int type) {\n358\t\t\tthis.type = type;\n359\t\t}\n360\t\tpublic long getNextCheckMillis(Date now) {\n361\t\t\treturn getNextCheckDate(now).getTime();\n362\t\t}\n363\t\tpublic Date getNextCheckDate(Date now) {\n364\t\t\tthis.setTime(now);\n365\t\t\tswitch (type) {\n366\t\t\tcase DailyRollingFileAppender.TOP_OF_MINUTE:\n367\t\t\t\tthis.set(Calendar.SECOND, 0);\n368\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n369\t\t\t\tthis.add(Calendar.MINUTE, 1);\n370\t\t\t\tbreak;\n371\t\t\tcase DailyRollingFileAppender.TOP_OF_HOUR:\n372\t\t\t\tthis.set(Calendar.MINUTE, 0);\n373\t\t\t\tthis.set(Calendar.SECOND, 0);\n374\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n375\t\t\t\tthis.add(Calendar.HOUR_OF_DAY, 1);\n376\t\t\t\tbreak;\n377\t\t\tcase DailyRollingFileAppender.HALF_DAY:\n378\t\t\t\tthis.set(Calendar.MINUTE, 0);\n379\t\t\t\tthis.set(Calendar.SECOND, 0);\n380\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n381\t\t\t\tint hour = get(Calendar.HOUR_OF_DAY);\n382\t\t\t\tif (hour < 12) {\n383\t\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 12);\n384\t\t\t\t} else {\n385\t\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n386\t\t\t\t\tthis.add(Calendar.DAY_OF_MONTH, 1);\n387\t\t\t\t}\n388\t\t\t\tbreak;\n389\t\t\tcase DailyRollingFileAppender.TOP_OF_DAY:\n390\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n391\t\t\t\tthis.set(Calendar.MINUTE, 0);\n392\t\t\t\tthis.set(Calendar.SECOND, 0);\n393\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n394\t\t\t\tthis.add(Calendar.DATE, 1);\n395\t\t\t\tbreak;\n396\t\t\tcase DailyRollingFileAppender.TOP_OF_WEEK:\n397\t\t\t\tthis.set(Calendar.DAY_OF_WEEK, \ngetFirstDayOfWeek());\n398\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n399\t\t\t\tthis.set(Calendar.MINUTE, 0);\n400\t\t\t\tthis.set(Calendar.SECOND, 0);\n401\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n402\t\t\t\tthis.add(Calendar.WEEK_OF_YEAR, 1);\n403\t\t\t\tbreak;\n404\t\t\tcase DailyRollingFileAppender.TOP_OF_MONTH:\n405\t\t\t\tthis.set(Calendar.DATE, 1);\n406\t\t\t\tthis.set(Calendar.HOUR_OF_DAY, 0);\n407\t\t\t\tthis.set(Calendar.MINUTE, 0);\n408\t\t\t\tthis.set(Calendar.SECOND, 0);\n409\t\t\t\tthis.set(Calendar.MILLISECOND, 0);\n410\t\t\t\tthis.add(Calendar.MONTH, 1);\n411\t\t\t\tbreak;\n412\t\t\tdefault:\n413\t\t\t\tthrow new IllegalStateException(\"Unknown \nperiodicity type.\");\n414\t\t\t}\n415\t\t\treturn getTime();\n416\t\t}\n417\t}", "id": 100945, "time": "2007-03-25T19:52:37Z", "bug_id": 41945, "creation_time": "2007-03-25T19:52:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41945, "text": "As far as I can understand your message, I believe the behavior that you observed in established and \ndocumented and can not be changed since it would change behavior that others have come to depend \nupon.  The DRFA.File option is a literal file name (not a SimpleDateFormat pattern) that log messages are \ninitially written to and is the basis for the name to which the file is renamed when the rollover occurs.\n\nIf you still have questions, please ask on log4j-user.\n\nNext time that you submit a bug, you should use a title that describes the particular problem encountered \nand attach any code changes as an attachment to the bug (ideally as a diff between the current code and \nthe desired code).  (The option to attach a file appears after the bug is initially submitted).\n", "id": 100967, "time": "2007-03-26T11:02:25Z", "creator": "carnold@apache.org", "creation_time": "2007-03-26T11:02:25Z", "is_private": false, "attachment_id": null}]
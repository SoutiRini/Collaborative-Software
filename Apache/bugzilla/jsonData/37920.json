[{"count": 0, "tags": [], "bug_id": 37920, "attachment_id": null, "id": 83700, "time": "2005-12-15T17:41:57Z", "creator": "m.vezzelli@e-works.it", "creation_time": "2005-12-15T17:41:57Z", "is_private": false, "text": "When apache receives POST data from a client and mod_proxy is enabled, apache \nshould pass data to mod_proxy without buffering and mod_proxy should pass data \nto backend server without buffering.\nThis issue was already discussed in 19954 and 33029 concerning GET requests and \ntunnels.\nGET requests are working: if backend server responds 1 byte, this byte arrives \nto the client.\nHow to reproduce:\na client must make a POST request with a large content-size but a single byte \nis sent for the body. This byte will never reach backend server.\nWindows binary client that reproduces the problem is available under request."}, {"count": 1, "tags": [], "bug_id": 37920, "attachment_id": null, "id": 83740, "time": "2005-12-16T12:31:27Z", "creator": "m.vezzelli@e-works.it", "creation_time": "2005-12-16T12:31:27Z", "is_private": false, "text": "I can't get POST data even with nph-cgi.... could it be an apache core issue?\n"}, {"count": 2, "tags": [], "bug_id": 37920, "is_private": false, "text": "The behavior is due to the following logic in mod_proxy_http.c\nWe read the data using ap_get_bridade, \nNow ap_get_brigade will return an EOS only if the remaining data \n( as calculated as content-length - current read in \nhttp_filters.c:ap_http_filter: [ lenp = apr_table_get(f->r->headers_in, \n\"Content-Length\");] )\nis '0'\n\nSince our condition for exiting the while loop is APR_BUCKET_IS_EOS, we do not \nexit before reading the entire data as specified in content length. Since we do \nnot write the data to the client side any where in this loop, the client never \ngets any data.\n\nThe way to fix this would be to move up the part where we send the \nstream_reqbody_cl, and change it to keep sending the data to client side during \nthe loop. \n\n\n--846 - 898\n    /* Prefetch MAX_MEM_SPOOL bytes\n     *\n     * This helps us avoid any election of C-L v.s. T-E\n     * request bodies, since we are willing to keep in\n     * memory this much data, in any case.  This gives\n     * us an instant C-L election if the body is of some\n     * reasonable size.\n     */\n    temp_brigade = apr_brigade_create(p, bucket_alloc);\n    do {\n        status = ap_get_brigade(r->input_filters, temp_brigade,\n                                AP_MODE_READBYTES, APR_BLOCK_READ,\n                                MAX_MEM_SPOOL - bytes_read);\n        if (status != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, status, r->server,\n                         \"proxy: prefetch request body failed to %pI (%s)\"\n                         \" from %s (%s)\",\n                         p_conn->addr, p_conn->hostname ? p_conn->hostname: \"\",\n                         c->remote_ip, c->remote_host ? c->remote_host: \"\");\n            return status;\n        }\n\n        apr_brigade_length(temp_brigade, 1, &bytes);\n        bytes_read += bytes;\n\n        /*\n         * Save temp_brigade in input_brigade. (At least) in the SSL case\n         * temp_brigade contains transient buckets whose data would get\n         * overwritten during the next call of ap_get_brigade in the loop.\n         * ap_save_brigade ensures these buckets to be set aside.\n         * Calling ap_save_brigade with NULL as filter is OK, because\n         * input_brigade already has been created and does not need to get\n         * created by ap_save_brigade.\n         */\n        status = ap_save_brigade(NULL, &input_brigade, &temp_brigade, p);\n        if (status != APR_SUCCESS) {\n            ap_log_error(APLOG_MARK, APLOG_ERR, status, r->server,\n                         \"proxy: processing prefetched request body failed\"\n                         \" to %pI (%s) from %s (%s)\",\n                         p_conn->addr, p_conn->hostname ? p_conn->hostname: \"\",\n                         c->remote_ip, c->remote_host ? c->remote_host: \"\");\n            return status;\n        }\n\n    /* Ensure we don't hit a wall where we have a buffer too small\n     * for ap_get_brigade's filters to fetch us another bucket,\n     * surrender once we hit 80 bytes less than MAX_MEM_SPOOL\n     * (an arbitrary value.)\n     */\n    } while ((bytes_read < MAX_MEM_SPOOL - 80)\n              && !APR_BUCKET_IS_EOS(APR_BRIGADE_LAST(input_brigade)));\n\n    /* Use chunked request body encoding or send a content-length body?\n", "id": 99180, "time": "2007-02-09T08:11:09Z", "creator": "rahul.g.nair@gmail.com", "creation_time": "2007-02-09T08:11:09Z", "attachment_id": null}, {"count": 3, "text": "As far as I can remember the whole request body needs to be buffered to avoid\nHTTP Request Smuggling (see\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2088). So if I remember\ncorrectly this cannot be changed to a \"non-buffering\" behaviour.", "creator": "rpluem@apache.org", "attachment_id": null, "id": 99196, "time": "2007-02-09T13:39:21Z", "bug_id": 37920, "creation_time": "2007-02-09T13:39:21Z", "tags": [], "is_private": false}, {"count": 4, "text": "The buffering is just an optimisation to  avoid the cases where the proxy\ndecides it is a good idea to send chunked request bodies, there is no security\nrequirement to do so.\n", "creator": "jorton@redhat.com", "attachment_id": null, "id": 99859, "time": "2007-02-27T09:25:44Z", "bug_id": 37920, "creation_time": "2007-02-27T09:25:44Z", "tags": [], "is_private": false}, {"count": 5, "text": "Hello,\n\ncurrently we are running into some problems with this behaviour, because  we have long response times, within the first request by transmitting audio data.\n\nTo get more in detail, we are trying to send small voice packages over the apache to a backend system where we want to analyse the audio data (audio recognition). In this case we are sending audio data as transfer-encoding chunked, ~3,6KBps HTTP requests, based on normally 1024bytes sized packages.\n\nWhich leads to an delay of 4-5 seconds until the request gets proxied to the backend.\n\nFrom my point of view it would be good to have an parameter, which we would be able to configure the size of the data, which will be pooled/buffered so that we would be able to resize it.\n\nIn my suggestion that could be an overall server parameter or something bind on the balancermember or proxypass directive e.g. maxmempoolssize=bytes; \n\nBest regards,\nAndr\u00e9", "creator": "andre.wendel@bmw.de", "attachment_id": null, "id": 175631, "time": "2014-06-04T14:01:45Z", "bug_id": 37920, "creation_time": "2014-06-04T14:01:45Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "text": "Andre, can you try the patches (trunk/2.4.x/2.2.x) available in Bug 56541?\nBy using \"SetEnv proxy-flushall\", you can bypass the request body prefetch.", "is_private": false, "bug_id": 37920, "id": 175693, "time": "2014-06-06T06:39:51Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-06-06T06:39:51Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 37920, "attachment_id": null, "id": 179217, "creation_time": "2014-11-21T09:26:28Z", "time": "2014-11-21T09:26:28Z", "creator": "andre.wendel@bmw.de", "text": "Hello Yann,\n\nSorry for the late response, i just recognized last week that already somebody anwsered with a patch.\n\nI tried the patches you attached and they seem to work for me, if i set the flag the requests will be directly proxied to the backend and so I have less delay for the data.\n\nIs there any ability to bring that patch into the standard branch so that I'm able to upgrade easily in future? \n\nBest regards,\nAndr\u00e9", "is_private": false}, {"count": 8, "tags": [], "bug_id": 37920, "text": "Missed that i tried the patch only for 2.4.10, because we are currently using the latest release in this use case.\n\nCheers,\nAndr\u00e9", "id": 179218, "time": "2014-11-21T09:27:27Z", "creator": "andre.wendel@bmw.de", "creation_time": "2014-11-21T09:27:27Z", "is_private": false, "attachment_id": null}, {"count": 9, "text": "Patch from bug 56541 committed in r1656259 (trunk).", "bug_id": 37920, "attachment_id": null, "id": 180680, "time": "2015-02-01T00:51:57Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-01T00:51:57Z", "tags": [], "is_private": false}]
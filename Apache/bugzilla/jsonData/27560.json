[{"count": 0, "tags": [], "bug_id": 27560, "attachment_id": null, "text": "I have a group node whose URI is +/users/contacts/owner-TsruUBmJzc/Tv6JVtT2Z3-0.\nWhen Namespace.getUri() creates a new Uri(), it uses ScopeTokenizer to tokenize\nthe string.  The resulting URI becomes\n/+/users/contacts/owner-TsruUBmJzc/Tv6JVtT2Z3-0.", "id": 53789, "time": "2004-03-10T07:35:19Z", "creator": "willievu@yahoo.com", "creation_time": "2004-03-10T07:35:19Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 27560, "attachment_id": null, "is_private": false, "id": 53850, "time": "2004-03-11T03:12:51Z", "creator": "willievu@yahoo.com", "creation_time": "2004-03-11T03:12:51Z", "text": "In Slide 1.0.16, a group node is indicated by a leading \"+\" sign.  In 2.0 b1, \nSecurityImpl.matchPrincipal() can't retrieve this kind of group nodes.  In rev \n1.44.2.3, line 1206, the matchSubject.getUri() is +/users/contacts/owner-\nTsruUBmJzc/Tv6JVtT2Z3-0.  What namespace.getUri() returns is a \nUri /+/users/contacts/owner-TsruUBmJzc/Tv6JVtT2Z3-0.  So, when \ngroupUri.getStore().retrieveRevisionDescriptor() is called, it causes \nRevisionDescriptorNotFoundException exception.\n\nThe reason lies in ScopeTokenizer.  When it parses the URI, it prepends a \nleading \"/\"."}, {"count": 2, "tags": [], "bug_id": 27560, "attachment_id": null, "text": "I understand the problem. If you attached a patch for it, I would apply it...", "id": 54552, "time": "2004-03-24T10:02:47Z", "creator": "ozeigermann@c1-fse.de", "creation_time": "2004-03-24T10:02:47Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "David.Holscher@nav-international.com", "attachment_id": null, "id": 19175, "time": "2002-07-09T15:33:13Z", "bug_id": 10595, "creation_time": "2002-07-09T15:33:13Z", "is_private": false, "text": "According to section 12.8 of the Servlet 2.3 spec \"The container matches URL \npatterns defined in security constraints using the same algorithm described in \nthis specification for matching client requests to servlets and static \nresources as described in SRV.11.1.\" This does not appear to be the case for \nTomcat. Using the following two constraints in the order given produces correct \nbehavour for MyPage.jsp (correct behavour is to match the first constraint \nwhich applies no security):\n\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Unsecured Stuff</web-resource-name>\n      <url-pattern>/MyPage.jsp</url-pattern>\n    </web-resource-collection>\n  </security-constraint>\n  <security-constraint>\n    <web-resource-collection>\n      <web-resource-name>Entire Application</web-resource-name>\n      <url-pattern>/*</url-pattern>\n    </web-resource-collection>\n    <auth-constraint>\n       <role-name>*</role-name>\n    </auth-constraint>\n  </security-constraint>\n\nReversing the order shouldn't change the behavour because the MyPage.jsp \npattern is an extact match (see rule 1 section 11.1). It should be matched \nfirst regardless of the order of the constraints. However if you reverse the \ntwo constraints and request MyPage.jsp the /* pattern is matched and the \nsecurity is applied."}, {"count": 1, "tags": [], "bug_id": 10595, "text": "According to section 12.8 of the Servlet 2.3 spec \"All request that contain a \nrequest path that matches a URL pattern described in the web resource \ncollection is subject to the contraint\" there have all security-contraints to \nbe processed. The following example works correct in that given order, but not \nin that reverse, which should according to the spec:\n\n    <security-constraint>\n      <web-resource-collection>\n         <web-resource-name>Privater RM Bereich</web-resource-name>\n         <url-pattern>/rmonly/talentbank/*</url-pattern>\n      </web-resource-collection>\n      <auth-constraint>\n         <role-name>UWGL.PrivateArea.TB</role-name>\n      </auth-constraint>\n    </security-constraint>\n\n    <security-constraint>\n      <web-resource-collection>\n         <web-resource-name>Privater RM Bereich</web-resource-name>\n         <url-pattern>/rmonly/*</url-pattern>\n      </web-resource-collection>\n      <auth-constraint>\n         <role-name>UWGL.PrivateArea</role-name>\n      </auth-constraint>\n    </security-constraint>\n\nComment:\nIt looks like the container is checking only the first contraint matching the \nURL and granting access, if that contraint is passed. Changing the order of the \nsecurity-contraints shouldn't have an effect.\nIf someone has the role \"UWGL.PrivateArea\" but not \"UWGL.PrivateArea.TB\" he \nshouldn't be able to access the resources for \"UWGL.PrivateArea.TB\". If you \nchange the order of the constraints in the example above, Tomcat will grant \naccess to that resources.\n\nThis is a critical security bug, I think.\n", "id": 27485, "time": "2002-12-06T09:40:40Z", "creator": "guido.bartels@gerling.de", "creation_time": "2002-12-06T09:40:40Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "craig.mcclanahan@sun.com", "text": "There has been substantial discussion in the servlet spec expert group, and in\nthe JACC expert group (JSR-115) about the precise semantics of security\nconstraint matching.  The current interpretation is that the container should\npick the first constraint that has a matching URL pattern and apply it --\ntherefore, the order of your security constraints *is* significant.\n\nTomcat implements this interpretation; therefore I'm going to mark this bug as\nINVALID (we can't change the implementation unless the specified behavior is\nchanged).  However, there are others that feel as you do about what the matching\npolicy should be.\n\nI suggest you download the latest draft of the Servlet 2.4 Specification (it's\nin Proposed Final Draft state now, but that doesn't mean it is cast in concrete\nnecessarily) and review the spec language that is planned for the next servlet\nversion, which will be supported by Tomcat 5.  You can find a link to this at:\n\n  http://java.sun.com/products/servlet/\n\nFeedback should be directed to the JSR-154 Expert Group, by mailing comments to:\n\n  servletapi-feedback@eng.sun.com\n", "id": 27499, "time": "2002-12-06T17:59:18Z", "bug_id": 10595, "creation_time": "2002-12-06T17:59:18Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 10595, "text": "I think the problem is that the spec would have to define what to do when\nconstraints return conflicting results (some grants, some denies, plus other not\nrelevant). This is a complex problem to solve, and I support the idea to try to\ndo a shortcut.\n\nSome other projects, like Slide and JSR 170, are attempting to solve this by\nhaving more complex ACL systems.", "id": 27500, "time": "2002-12-06T18:13:27Z", "creator": "remm@apache.org", "creation_time": "2002-12-06T18:13:27Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "guido.bartels@gerling.de", "text": "I have reed the specs 2.4 about this and compared it with the specs for 2.3. \nThere are no real differences about this topic. But I found the problem in \nignoring the Use of URL Paths. \n\nTherfore I have to reopen this BUG:\n\n\"The Spec state in SRV 11.1 Use of URL Paths\n...\n2. The container will recursively try to match the longest path-prefix: This is \ndone\nby stepping down the path tree a directory at a time, using the \u2019/\u2019 character as\na path separator. The longest match determines the servlet selected.\n...\"\n\nTOMCAT 4 is NOT doing this to resolve the URL of a security constraint. If \nTOMCAT 4 would do, than the order of the security constraints wouldn't make any \ndifference (in my example). But as I said in my comment, TOMCAT is using the \nfirst match from the descriptor, even if there are more with LONGER path-prefix.\n\nIf this would be fixed, then it will work the way one expects it (according to \nthe specs).\n\nI was willed to send comments to the jsr expert group. But the problem is not \nthe specs.\n\n", "id": 27539, "time": "2002-12-09T09:24:16Z", "bug_id": 10595, "creation_time": "2002-12-09T09:24:16Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 10595, "is_private": false, "text": "Based on the comments, this is a \"spec problem\"/\"interpretation of the spec\".\nClosing based on Craig's comments since he very closey related to the spec team.", "id": 51877, "time": "2004-02-07T15:01:27Z", "creator": "funkman@joedog.org", "creation_time": "2004-02-07T15:01:27Z", "attachment_id": null}]
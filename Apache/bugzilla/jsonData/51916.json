[{"count": 0, "tags": [], "bug_id": 51916, "is_private": false, "id": 149942, "attachment_id": null, "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-29T13:12:03Z", "time": "2011-09-29T13:12:03Z", "text": "Hi, I'm trying to run a fairly simple test plan in distributed mode and\nexperiencing some interesting memory consumption issues which I hope someone\ncan shed some light on..\n\nThe problem is regardless of how many threads I use, each of the slave\nservers sees growing memory usage until they eventually run out of memory\nand the jmeter-server process dies with this error:\njava.lang.OutOfMemoryError: Java heap space\n\nI am very confused by this behaviour as my understanding of the slave mode\njmeter-server is that it should be passing all data back to the master and\nthe JVM GCs should be taking care of the memory, sadly this is not the case.\n\nRegardless of how many threads I use, with or without a constant timer etc..\nthe memory usage of the java process on each of the slaves ramps up...\n\nConfig:\n1 x Master Server - Linux, GUI mode (CentOS x64)\n3 x Slave Server - Linux (CentOS x64)\n\nTest plan:\n- 10,000 loops @ 5 threads\n- One thread group\n- Constant Timer (500ms)\n- 15 HTTP Requests (using HTTP client, non ssl.)\n- One listener (Aggregate report)\n\nAny ideas?\n\nThings I've tried:\n- Simple test plans.\n- Upping heap size on master + slaves to 1024\n- Batch mode processing for results\n- Removing all listeners\n\n\n\n- No other test elements in use other than what I listed in the OP.\n- Jmeter version: 2.5\n\nI've tried removing all the listeners and running from NON-GUI mode with -l\nfrom the master, this is the command I used: ./jmeter -n -r -t cli-test.jmx\n-l example-log\n\nSadly this has made no difference and the slaves still escalate memory usage\nuntil they eventually run out and jmeter-server OOM kills itself with\njava.lang.OutOfMemoryError: Java heap space\n\nThere's something not right here, I suspect either a memory leak or failing\nGC, any ideas?\n\nnb. I am using the latest version of Java on CentOS:\njava version \"1.6.0_27\"\nJava(TM) SE Runtime Environment (build 1.6.0_27-b07)\nJava HotSpot(TM) Server VM (build 20.2-b06, mixed mode)"}, {"count": 1, "tags": [], "bug_id": 51916, "is_private": false, "id": 149971, "attachment_id": null, "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-30T10:52:03Z", "time": "2011-09-30T10:52:03Z", "text": "Issue was due to a bug in HC4 implementation fixed in:\n- 51863\n- Fix HttpClient 4 sampler so it reuses HttpClient instances and connections where possible\n\nMessage from Poox:\nI can confirm that RC3 fixes my problem and I now have stable memory usage\nhaving run the same .jmx overnight for confirmation.\n\nSee:\nhttp://jmeter.512774.n5.nabble.com/Distributed-testing-Memory-usage-td4849000.html#a4856496\n\n\nWorkaround in 2.5 is to use HttpClient 3\nFix is in 2.5.1\n\nRegards\nPhilippe Mouawad"}]
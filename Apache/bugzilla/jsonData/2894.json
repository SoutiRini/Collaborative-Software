[{"count": 0, "tags": [], "text": "The <sql:setColumn> tag when used with a prepared statement calls \nPreparedStatement.setString when this refers to a column that is not a String \nthe following exception occurs\n\njavax.servlet.jsp.JspTagException: com.sybase.jdbc2.jdbc.SybSQLException: \nImplicit conversion from datatype 'CHAR' to 'INT' is not allowed. Use the \nCONVERT function to run this query. \n\nThis bug with probably also occur with Microsoft SQL Server.", "attachment_id": null, "id": 4136, "creator": "Neil_P_Goodgame@sbphrd.com", "time": "2001-07-30T08:15:01Z", "bug_id": 2894, "creation_time": "2001-07-30T08:15:01Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "mdelagra@eb.com", "is_private": false, "id": 4142, "time": "2001-07-30T09:21:43Z", "bug_id": 2894, "creation_time": "2001-07-30T09:21:43Z", "tags": [], "text": "Didn't mean to close this one.  I'm not sure what is causing it; it would be \ngreat if someone with Sybase would debug this.  My only suggestion would be to \ntry other JDBC drivers."}, {"count": 2, "tags": [], "text": "This does not seem a Sybase bug to me. It will happen with all databases\nmake a difference between setting an integer or string parameter.\n\nDetails:\n\nIf you make a prepared query like\n 'select * from orders where orderno = ?',\n\ninternally a java object of type java.sql.PreparedStatement will be\ngenerated. Before executing this statement and creating a resultset,\nall parameters must be set. But this has to be done according to their\ntypes. In this case, something like\n\n st.setInt(1,nameOfIntegerVariable);\n\nhas to be done. There are a lot of methods for other types, see\ndocumentation of java.sql.PreparedStatement for details.\n\nThe taglib implementation has just one variant. It can be found in\nmethod doEndTag() of class\norg.apache.taglibs.dbtags.preparedstatement.SetColumnTag:\n\npublic class SetColumnTag extends BaseSetterBodyTag {\n\n  public int doEndTag() throws JspTagException {\n\n    PreparedStatement statement = getPreparedStatement();\n\n    try {\n      String string = null;\n\n      if (_attributeName == null) {\n        string = getBodyContent().getString();\n      } else {\n        string = (String) getAttribute(_attributeName);\n      }\n\n      statement.setString(_position,string);    // <--- here it is!\n\n    } catch (SQLException e) {\n      throw new JspTagException(e.toString());\n    }\n    return EVAL_PAGE;\n  }\n\n}\n\nSo the taglib will always try to do a setString() method call and you will\nget an error from the database system, which expects another type.\n\nSo what to do? The taglib cannot automatically determine which method to\ncall. So isn't the best to extend the library with several tags for several\ntypes?\n\n<sql:setIntColumn>\n   (doing a\n      statement.setString(_position,Integer.parseInt(string));\n   )\n\n<sql:setFloatColumn>\n<sql:setStringColumn>\n  (same as current <sql:setColumn>, which should still be supported for\n   backwards compatibility)\n...\n\n\nBtw. I would like names like setIntParam, setFloatParam etc. more.\n\nHope this helps a bit.", "attachment_id": null, "id": 10296, "creator": "kraemer@rz.uni-kiel.de", "time": "2002-02-04T14:02:05Z", "bug_id": 2894, "creation_time": "2002-02-04T14:02:05Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 2894, "attachment_id": null, "id": 10299, "time": "2002-02-04T15:15:44Z", "creator": "kraemer@rz.uni-kiel.de", "creation_time": "2002-02-04T15:15:44Z", "is_private": false, "text": "Hmmm, after thinking a bit about my first suggestion, I think another\nmodification would be better.\n\nWhat about adding an attribute 'paramType' containing the type of\nthe parameter? Usage would be like this:\n\n  <sql:setColumn position=\"1\" paramType=\"integer\"> 22 </sql:setColumn>\n\nIf the attribute is not required and String is default paramType, it would\nbe totally backwards compatible. This way we do not blow up the \nlibrary with dozens of new tags. \n\nWhat has to be done in detail?\n\n1) Add an attribute 'paramType' to tag setColumn:\n\n   <tag>\n    <name>setColumn</name>\n    \n<tagclass>org.apache.taglibs.dbtags.preparedstatement.SetColumnTag</tagclass>\n...\n<!-- next 4 lines new -->   \n    <attribute>\n      <name>paramType</name>\n      <required>no</required>\n      <rtexprvalue>no</rtexprvalue>\n    </attribute>\n<!-- end of changes -->\n...\n  </tag>\n\n2) Insert into class BaseSetterBodyTag new Attribute paramType\n   with setter method:\n\n  public class BaseSetterBodyTag extends BodyTagSupport {\n  ...\n  protected  String _paramType = null;\n  ...\n  public void release() {\n    ...\n    _paramType = null;\n  }\n  ...\n  public void setParamType(String paramType) {\n      this._paramType = paramType;\n  }\n}\n\n3) Modify SetColumnTag to examine this attribute. Be aware of \n   possible new Exceptions: \n\n  public int doEndTag() throws JspTagException {\n\n    PreparedStatement statement = getPreparedStatement();\n\n    try {\n      String string = null;\n\n      if (_attributeName == null) {\n        string = getBodyContent().getString();\n      } else {\n        string = (String) getAttribute(_attributeName);\n      }\n\n      if (\"INTEGER\".equalsIgnoreCase(_paramType)) {\n          statement.setInt(_position,Integer.parseInt(string));\n      } else if (\"FLOAT\".equalsIgnoreCase(_paramType)) {\n          statement.setFloat(_position,Float.parseFloat(string));\n\n                  // more types can and should be easily added\n      } else {\n          statement.setString(_position,string);   // default\n      }\n\n    } catch (SQLException e) {\n      throw new JspTagException(e.toString());\n    } catch (NumberFormatException e) {\n       throw new JspTagException(e.toString());\n    }\n    return EVAL_PAGE;\n  }\n\nWhat do you think?\n"}, {"count": 4, "tags": [], "creator": "mdelagra@eb.com", "attachment_id": null, "id": 13555, "time": "2002-04-15T02:51:00Z", "bug_id": 2894, "creation_time": "2002-04-15T02:51:00Z", "is_private": false, "text": "Many database drivers will automatically convert to the correct datatype when \nsetString is called.  It appears that some drivers do not fit this pattern.  In \norder to work around this, we would have to obtain meta data about the columns \nin the insert (perhaps one of the MetaData objects).  This would be a good bug \nfix candidate for an upcoming point release."}, {"count": 5, "tags": [], "bug_id": 2894, "is_private": false, "text": "It will not be possible to find a general way to select the \n'correct' setXXX() method by looking at the database meta data\nlike column types, because the parameters might also occur in\nexpressions. I will give you an example of a query with different\nresults depending on the chosen setXXX() method:\n\n...\nConnection con = DriverManager.getConnection(jdbcURL, username, password);\n\n// create testtab with one column and three rows:\n\nStatement st= con.createStatement();\nst.executeUpdate(\"create table tttt (col1 integer)\");\nst.executeUpdate(\"insert into tttt values (4)\");\nst.executeUpdate(\"insert into tttt values (8)\");\nst.executeUpdate(\"insert into tttt values (16)\");\n\n// prepare statement with parameters:\n\nPreparedStatement prSt = con.prepareStatement(\n     \"select * from tttt where col1 > float4( char( ? + ? )) \");\n\n// bind using setString() and retrieve results:\n\nprSt.setString(1,\"1\");\nprSt.setString(2,\"2\");\nResultSet rs1 = prSt.executeQuery();\nwhile (rs1.next()) {\n System.out.println(\"Result using setString(): \" +    rs1.getInt(1));\n}\nrs1.close();\n\n// bind using setInt() and retrieve results:\nprSt.setInt(1,1);\nprSt.setInt(2,2);\nrs1 = prSt.executeQuery();\nwhile (rs1.next()) {\n  System.out.println(\"Result using setInt(): \" +    rs1.getInt(1));\n}\nrs1.close();\n\nst.executeUpdate(\"drop table tttt\");\n\nThe Result of this program is:\n\nResult using setString(): 16\nResult using setInt(): 4\nResult using setInt(): 8\nResult using setInt(): 16\n\nbecause\n - float4( char( \"1\" + \"2\" )) = 12\n - float4( char( 1 + 2 )) = 3\n\nSo I would leave it up to the programmer or page designer\nto specify the column type and would still suggest using\na new attribute. \n\n", "id": 13608, "time": "2002-04-15T10:11:47Z", "creator": "kraemer@rz.uni-kiel.de", "creation_time": "2002-04-15T10:11:47Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "DBTags is officially a legacy/deprecated taglib, so we won't fix this bug.", "attachment_id": null, "id": 53989, "creator": "nagoya@felipeal.net", "time": "2004-03-15T04:51:35Z", "bug_id": 2894, "creation_time": "2004-03-15T04:51:35Z", "is_private": false}]
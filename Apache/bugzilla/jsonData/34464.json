[{"count": 0, "tags": [], "creator": "b0b0b0b@gmail.com", "text": "the telnet task has a performance problem if waitforstring has\nto wade through more and more accumulating input. \n\nthe stringbuffer grows unbounded.  Realistically it only needs to remember the \nlast n chars, where n is the length of the string you are waiting for.", "id": 73672, "time": "2005-04-15T03:42:56Z", "bug_id": 34464, "creation_time": "2005-04-15T03:42:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 34464, "attachment_id": 18328, "is_private": false, "id": 89351, "time": "2006-05-22T19:27:17Z", "creator": "blinks@acm.org", "creation_time": "2006-05-22T19:27:17Z", "text": "Created attachment 18328\nPatch to keep track of the possible match window.\n\nWhile something like the Raita or Boyer-Moore algorithm might be a better\nchoice in the long run, this patch just keeps track of the newest substring\nthat might be a match.\n\nAdvantages: Doesn't do string matching if the buffer is smaller than the\npattern.  Only performs indexOf on a minimal substring.\n\nDisadvantages: Extra test and increment in the while loop's test.  Extra\nvariable initialization."}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "text": "I've used !.equals(s) instead of indexOf(s) == -1 and applied the patch to RExec as well.  I think it should work as expected, but lack any test environment myself.\n\nsvn revision 677887", "id": 118809, "time": "2008-07-18T05:37:49Z", "bug_id": 34464, "creation_time": "2008-07-18T05:37:49Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "starfish.hu@gmail.com", "attachment_id": 29468, "text": "Created attachment 29468\nThe patch for JMeter 2.7-rc3, fix the shared PreparedStatement bug.\n\nThe implementation of AbstractJDBCTestElement uses a map to cache the PreparedStatement for each Connection, and shares that cache between multi-threads, which is the cause of the bug.\n\nAccording to the section 13.1.4 of JDBC 4.0 specification (http://jcp.org/aboutJava/communityprocess/final/jsr221/index.html), \n\n> 13.1.4 Closing Statement Objects\n> An application calls the method Statement.close to indicate that it \n> has finished processing a statement. All Statement objects will be closed\n> when the con- nection that created them is closed. However, it is good coding\n> practice for applications to close statements as soon as they have finished \n> processing them. This allows any external resources that the statement is \n> using to be released immediately.\n> Closing a Statement object will close and invalidate any instances of \n> ResultSet produced by that Statement object. The resources held by the\n> ResultSet object may not be released until garbage collection runs again, \n> so it is a good practice to explicitly close ResultSet objects when they \n> are no longer needed.\n> Once a Statement has been closed, any attempt to access any of its methods \n> with the exception of the isClosed or close methods will result in a\n> SQLException being thrown.\n> These comments about closing Statement objects apply to PreparedStatement \n> and CallableStatement objects as well.\n\nIt's clear that closing a PreparedStatement object will automatically close all the ResultSet objects opened by it. Therefore, if a PreparedStatement is shared between thread A and thread B, and the thread A is closing the PreparedStatement object while thread B is still in use of a ResultSet object opened by that PreparedStatement object, the ResultSet object will be closed indirectly by thread A without notifying thread B. This situation could happen, since the cache of PreparedStatement has a capacity limit and it will automatically close an old cached PreparedStatement object while adding a new PreparedStatement to the cache reaching the capacity limit.\n\nIt's also easy to reproduce the bug: create a JDBC testing plan using a prepread statement, with 300 threads and 2000 loops; then run the test, the bug *may* occur. If the bug does not occur, try to increase the number of threads and the number of loops. The log of the JDBC driver shows that it is caused by using a closed ResultSet object.\n\nThe attachment is the patch for Apache JMeter v2.7-rc3.\n\nThe patch does the following works:\n\n1. change the cache of PreparedStatement in AbstractJDBCTestElement to a thread local cache;\n2. add some logging statements in order to help locating the bug;\n3. fix the location of \"jcharts\" component in the \"build.properties\" configuration file, since the \"www.mvnsearch.org\" was moved.", "id": 162706, "time": "2012-10-12T07:56:30Z", "bug_id": 53995, "creation_time": "2012-10-12T07:56:30Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53995, "attachment_id": null, "is_private": false, "id": 162750, "time": "2012-10-14T16:22:36Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-10-14T16:22:36Z", "text": "I am not sure your analysis is correct.\nThere are 2 modes for JDBC Connection Configuration.\n\nIf max pool is set to 0, there will be one pool for each thread, connections will never be shared, so this one is OK\n\nNow, if max pool is set, it can happen at one time that 2 threads will use the same connection, but in my understanding, it will never happen at the same time as pool will return an idle connection (so different from the one in use) or it will wait if no one is available.\n\nSo the case you describe cannot happen.\n\nIt is true that the pool shares PreparedStatement but they are always associated to the same connection. So I don't think there is an issue as connection will never be shared by two threads at the same time, but I may be wrong.\n\nCould you submit a Test Plan showing the issue and the exact error ? or one of the 2 issues ?\n\nThank you."}, {"count": 2, "tags": [], "bug_id": 53995, "is_private": false, "text": "Ok I saw issue, the issue is that one thread A can reach limit of perConnCache generating a closeAllStatements() which can impact thread B using this cache.", "id": 162751, "time": "2012-10-14T16:28:34Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-10-14T16:28:34Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 53995, "text": "Created attachment 29476\nTest Plan showing issue\n\nTo provoke bug, set:\njdbcsampler.cachesize=1", "id": 162752, "attachment_id": 29476, "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-10-14T16:38:26Z", "time": "2012-10-14T16:38:26Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 53995, "attachment_id": null, "text": "Thank you for the reporting, the analysis and the patch.\nThe proposed patch has the impact of creating one Cache per Thread and connection which increases memory usage during test.\n\nI implemented another fix which removes the MRU cache as it is the source of issue, since the put of a connection or PreparedStatement Map could result into the putter thread provoking a cleanup (and close) of PreparedStatement of other thread.\n\nThis should not impact very much memory as size of first map is the size of number of threads.\nSize of second map is the size of different SQL queries of the test.", "id": 162985, "time": "2012-10-27T14:53:09Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-10-27T14:53:09Z", "is_private": false}, {"count": 5, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "Date: Sat Oct 27 14:50:28 2012\nNew Revision: 1402802\n\nURL: http://svn.apache.org/viewvc?rev=1402802&view=rev\nLog:\nBug 53995 - AbstractJDBCTestElement shares PreparedStatement between multi-threads\nBugzilla Id: 53995\n\nModified:\n    jmeter/trunk/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java\n    jmeter/trunk/xdocs/changes.xml", "id": 162986, "time": "2012-10-27T14:53:45Z", "bug_id": 53995, "creation_time": "2012-10-27T14:53:45Z", "is_private": false, "attachment_id": null}]
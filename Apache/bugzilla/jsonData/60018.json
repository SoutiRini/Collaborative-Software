[{"count": 0, "tags": [], "bug_id": 60018, "text": "This bug is related partly to Bug 58943\nSometimes you have to adapt the timers values to be half or double what they are currently.\n\nWhen you have configured timers at every place this can be cumbersome as you have to touch tens of Test Elements.\n\nIt would be nice to be able to say: Take current computed pauses and multiply them by a factor.\n\nAny other idea is welcome\n\nIf you agree to this idea, we can submit a patch.\n\nRegards\n@ubikloadpack", "id": 193183, "time": "2016-08-18T16:12:38Z", "creator": "support@ubikloadpack.com", "creation_time": "2016-08-18T16:12:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "I'm not sure that I see a genuine use case for this. Why would every single pause have to be doubled? That does not seem like something a genuine user would do.\n\nMost (all?) the timers can take variables, so it's possible to implement this anyway.", "attachment_id": null, "id": 193194, "creator": "sebb@apache.org", "time": "2016-08-18T20:58:03Z", "bug_id": 60018, "creation_time": "2016-08-18T20:58:03Z", "is_private": false}, {"count": 2, "tags": [], "creator": "support@ubikloadpack.com", "attachment_id": null, "text": "The use case is testing different throughputs easily.\n\nThis frequently happens at the beginning of a campaign when you're trying to find the good think times to reach some load and you don't want to increase threads.\nFrankly I believe it's a very frequent use case.\n\n\nYes it can be done by using __BeanShell or __groovy to use a property containing factor but whenever you have different think times between the samplers (We use TestAction with pause time at 0 and its child is a Timer) in a realistic test plan, it becomes a lot of work and makes test plan harder to maintain.\n\nIt's not a big piece of code (1 line in JMeterThread#delay ) and it's only a matter of adding a property:\n- thinktime_factor (for example)\n\n\nRegards", "id": 193195, "time": "2016-08-18T21:07:11Z", "bug_id": 60018, "creation_time": "2016-08-18T21:07:11Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 60018, "text": "As a \"genuine\" user that's something I frequently do.\n\nI also think timers should be moved out of the sampler and become \"first level\" elements.", "id": 193196, "time": "2016-08-18T21:12:39Z", "creator": "benoit.wiart@gmail.com", "creation_time": "2016-08-18T21:12:39Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to UbikLoadPack support from comment #2)\n> The use case is testing different throughputs easily.\n> \n> This frequently happens at the beginning of a campaign when you're trying to\n> find the good think times to reach some load and you don't want to increase\n> threads.\n> Frankly I believe it's a very frequent use case.\n> \n> \n> Yes it can be done by using __BeanShell or __groovy to use a property\n> containing factor but whenever you have different think times between the\n> samplers (We use TestAction with pause time at 0 and its child is a Timer)\n> in a realistic test plan, it becomes a lot of work and makes test plan\n> harder to maintain.\n> \n> It's not a big piece of code (1 line in JMeterThread#delay ) and it's only a\n> matter of adding a property:\n> - thinktime_factor (for example)\n\nAlso documentation, testing.\n\nEvery additional function increases user support costs somewhat.\n\n\n> \n> Regards", "attachment_id": null, "id": 193197, "creator": "sebb@apache.org", "time": "2016-08-18T21:17:15Z", "bug_id": 60018, "creation_time": "2016-08-18T21:17:15Z", "is_private": false}, {"count": 5, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "(In reply to Sebb from comment #4)\n> (In reply to UbikLoadPack support from comment #2)\n> > The use case is testing different throughputs easily.\n> > \n> > This frequently happens at the beginning of a campaign when you're trying to\n> > find the good think times to reach some load and you don't want to increase\n> > threads.\n> > Frankly I believe it's a very frequent use case.\n> > \n> > \n> > Yes it can be done by using __BeanShell or __groovy to use a property\n> > containing factor but whenever you have different think times between the\n> > samplers (We use TestAction with pause time at 0 and its child is a Timer)\n> > in a realistic test plan, it becomes a lot of work and makes test plan\n> > harder to maintain.\n> > \n> > It's not a big piece of code (1 line in JMeterThread#delay ) and it's only a\n> > matter of adding a property:\n> > - thinktime_factor (for example)\n> \n> Also documentation, testing.\n> \n> Every additional function increases user support costs somewhat.\n\nIf this contributor contributes the full feature that they find useful, why would be refuse it ?\n\nI don't share the reasoning regarding additional function.\nIf we follow it then we would stop any development on JMeter ?\n\n\n\n\n\n\n> \n> \n> > \n> > Regards", "id": 193198, "time": "2016-08-18T21:25:52Z", "bug_id": 60018, "creation_time": "2016-08-18T21:25:52Z", "is_private": false}, {"count": 6, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "(In reply to Philippe Mouawad from comment #5)\n> (In reply to Sebb from comment #4)\n> > (In reply to UbikLoadPack support from comment #2)\n> > > It's not a big piece of code (1 line in JMeterThread#delay ) and it's only a\n> > > matter of adding a property:\n> > > - thinktime_factor (for example)\n> > \n> > Also documentation, testing.\n> > \n> > Every additional function increases user support costs somewhat.\n> \n\n> I don't share the reasoning regarding additional function.\n\nI was just pointing out that the amount of work involved is more than you wrote.\n\nWhen deciding whether to implement a new feature, it's important to do a cost-benefit analysis. Ignoring some of the cost invalidates the analysis.\n\n> If we follow it then we would stop any development on JMeter ?\n\nThat does not follow from what I wrote.", "id": 193219, "time": "2016-08-19T08:26:18Z", "bug_id": 60018, "creation_time": "2016-08-19T08:26:18Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 60018, "text": "ULP> This frequently happens at the beginning of a campaign when you're trying to find the good think times to reach some load and you don't want to increase threads.\nULP> Frankly I believe it's a very frequent use case.\n\nI think the following approach should be used:\n1) Use \"Constant Throughput Timer\" or alike to achieve the target load (number of iterations per hour)\n2) Set \"number of threads\" == \"number of callcenter operators\" (or other kind of persons working with the system).\n3) For open system (that is the case like \"anybody from the internet can access the system\" where the number of users is virtually unlimited), set \"number of threads\" == \"expected maximal number of concurrent requests\".\n\nULP>reach some load and you don't want to increase threads.\n\nSuppose we are dealing with callcenter of 20 operators. We specify 20 threads.\nIf that is not enough to reach the target load, that just means \"application is not responsive enough for _real_ users to reach the desired load\".\nIt is just a valid finding: \"not enough _operators_ to drive the load\".\nIt is not something to be \"cured\" by \"artificially decreasing think times\".\n\nDoes it make sense?", "id": 193226, "time": "2016-08-19T17:33:58Z", "creator": "sitnikov.vladimir@gmail.com", "creation_time": "2016-08-19T17:33:58Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 60018, "text": "(In reply to Vladimir Sitnikov from comment #7)\n> ULP> This frequently happens at the beginning of a campaign when you're\n> trying to find the good think times to reach some load and you don't want to\n> increase threads.\n> ULP> Frankly I believe it's a very frequent use case.\n> \n> I think the following approach should be used:\n> 1) Use \"Constant Throughput Timer\" or alike to achieve the target load\n> (number of iterations per hour)\n\nIf you read http://jmeter.apache.org/usermanual/component_reference.html#Constant_Throughput_Timer, \n\nOf course the throughput will be lower if the server is not capable of handling it, or if >>>>other timers<<<< or time-consuming test elements prevent it.\n\n\n\n> 2) Set \"number of threads\" == \"number of callcenter operators\" (or other\n> kind of persons working with the system).\n> 3) For open system (that is the case like \"anybody from the internet can\n> access the system\" where the number of users is virtually unlimited), set\n> \"number of threads\" == \"expected maximal number of concurrent requests\".\n> \n> ULP>reach some load and you don't want to increase threads.\n> \n> Suppose we are dealing with callcenter of 20 operators. We specify 20\n> threads.\n> If that is not enough to reach the target load, that just means \"application\n> is not responsive enough for _real_ users to reach the desired load\".\n> It is just a valid finding: \"not enough _operators_ to drive the load\".\n> It is not something to be \"cured\" by \"artificially decreasing think times\".\n> \n> Does it make sense?\n\nYes.\nBut if may be not enough because for example in an E-Commerce load test, you can use an approach where you model the average visit.\nYou are given pause times , you configure them, you compute a target number of Threads.\nYou make a first run and see that you don't reach the number of visits expected in an hour, that might be due to response times, but that can also be due to wrong Pauses.\n\nIsn't it interesting to be able to validate the hypothesis by multiplying all pause times (except CTP (read below proposition)) by a double (not int) factor and test again ? instead of having to do that in scripting.\n\n\nWe could implement it this way:\n- Either we introduce a TimerConfig element or just a property\n- We add a method in Timer interface canBeMultiplied (a better name is to be found) , if it returns true, we can apply the factor, if not we use timer delay as is.\n- CTT would implement the method by returning false\n- Other timers would implement the method by returning true\n\n\nAlso, as noted by Antonio Gomes Rodrigues in mailing list, this feature exists in alternative products in the same field, so it must be useful no ?\nAt least in our experience it would be.\n\n\nRegards", "id": 193367, "time": "2016-08-27T23:31:23Z", "creator": "support@ubikloadpack.com", "creation_time": "2016-08-27T23:31:23Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 60018, "attachment_id": 34195, "id": 193475, "time": "2016-09-02T21:15:35Z", "creator": "support@ubikloadpack.com", "creation_time": "2016-09-02T21:15:35Z", "is_private": false, "text": "Created attachment 34195\nPatch implementing first part of the feature\n\nHello,\nFind attached a patch implementing the following:\n- Add a method on Timer interface that allows it to tell wether a ratio can be applied on it\n- Implement it in subclasses\n- Add a new property timer.factor \n- Apply factor in JMeterThread\n\nThe patch is already usable like this and it was very useful during a load testing campaign this week to adjust timer and reach a behaviour similar to production.\n\nNext step can be:\n- Add a new Timer Config element that controls timer.factor\n- Add a checkbox on all Timer GUIs to enable them to refuse adjustment\n\nRegards\nUbikLoadPack Team"}, {"count": 10, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Author: pmouawad\nDate: Tue Sep 20 12:28:37 2016\nNew Revision: 1761563\n\nURL: http://svn.apache.org/viewvc?rev=1761563&view=rev\nLog:\nBug 60018 - Timer : Add a factor to apply on pauses\nBugzilla Id: 60018\n\nAdded:\n    jmeter/trunk/src/core/org/apache/jmeter/timers/ModifiableTimer.java   (with props)\nModified:\n    jmeter/trunk/bin/jmeter.properties\n    jmeter/trunk/src/components/org/apache/jmeter/timers/RandomTimer.java\n    jmeter/trunk/src/core/org/apache/jmeter/threads/JMeterThread.java\n    jmeter/trunk/src/core/org/apache/jmeter/util/JMeterUtils.java\n    jmeter/trunk/xdocs/changes.xml\n    jmeter/trunk/xdocs/usermanual/component_reference.xml\n\nAuthor: pmouawad\nDate: Tue Sep 20 12:30:19 2016\nNew Revision: 1761564\n\nURL: http://svn.apache.org/viewvc?rev=1761564&view=rev\nLog:\nBug 60018 - Timer : Add a factor to apply on pauses\neol\nBugzilla Id: 60018\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/timers/ModifiableTimer.java   (props changed)", "id": 193838, "time": "2016-09-20T12:31:25Z", "bug_id": 60018, "creation_time": "2016-09-20T12:31:25Z", "is_private": false}, {"count": 11, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Author: pmouawad\nDate: Sun Sep 25 16:28:59 2016\nNew Revision: 1762223\n\nURL: http://svn.apache.org/viewvc?rev=1762223&view=rev\nLog:\nBug 60018 - Timer : Add a factor to apply on pauses\nDocument property\nBugzilla Id: 60018\n\nModified:\n    jmeter/trunk/xdocs/usermanual/properties_reference.xml", "id": 193983, "time": "2016-09-25T16:35:19Z", "bug_id": 60018, "creation_time": "2016-09-25T16:35:19Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 60018, "text": "Author: pmouawad\nDate: Fri Dec 23 21:45:29 2016\nNew Revision: 1775911\n\nURL: http://svn.apache.org/viewvc?rev=1775911&view=rev\nLog:\nSonar : Fix errors, code smells and false-positive\nAlso use Timer.isModifiable() introduced within Bug 60018\nBugzilla Id: 60018\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/threads/JMeterThread.java\n    \n    \nAuthor: pmouawad\nDate: Fri Dec 23 21:32:13 2016\nNew Revision: 1775901\n\nURL: http://svn.apache.org/viewvc?rev=1775901&view=rev\nLog:\nBug 60018 - Timer : Add a factor to apply on pauses\nUse Java8 default method\nBugzilla Id: 60018\n\nModified:\n    jmeter/trunk/src/components/org/apache/jmeter/timers/RandomTimer.java\n    jmeter/trunk/src/core/org/apache/jmeter/timers/ModifiableTimer.java\n    jmeter/trunk/src/core/org/apache/jmeter/timers/Timer.java", "id": 195648, "time": "2016-12-23T22:01:45Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2016-12-23T22:01:45Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "odoma04@ca.com", "attachment_id": 33473, "id": 187865, "time": "2016-01-21T05:34:54Z", "bug_id": 58901, "creation_time": "2016-01-21T05:34:54Z", "is_private": false, "text": "Created attachment 33473\ntest script files, one to download 20x 9m file, one to download smaller file\n\nA misconfiguration has revealed problem with SSL_write not handling EINTR .\n\nProblem found in 2.4.4 but code is the same in 2.4.18 so expect the issue still occurs there as well. \n\nThe problem occurs when large files over https://  and when the httpd process gets a signal in our case SIGUSR1. The large SSL download is aborted. \n\nA possible precondition is that the large download hits threshold and then results in synchronous write call - dont know just from some of the doco I read : \n\n[Tue Jan 19 05:04:59.742393 2016] [core:trace6] [pid 1402:tid 4115659632] core_filters.c(525): [client 10.134.120.119:59922] core_output_filter: flushing because of THRESHOLD_MAX_BUFFER\n[Tue Jan 19 05:04:59.955371 2016] [core:trace6] [pid 1402:tid 4115659632] core_filters.c(525): [client 10.134.120.119:59922] core_output_filter: flushing because of THRESHOLD_MAX_BUFFER\n\nThen with getting the SIGUSR1 and the download failure we see the following entry in the apache error_log : \n\n[Tue Jan 19 05:04:59.997093 2016] [ssl:info] [pid 1402:tid 4115659632] (4)Interrupted system call: [client 10.134.120.119:59922] AH01993: SSL output filter write failed.\n\n\nThe code link for 2.4.4 is here : \n\nhttps://svn.apache.org/viewvc/httpd/httpd/tags/2.4.4/modules/ssl/ssl_engine_io.c?view=markup#l761\n\n760    outctx = (bio_filter_out_ctx_t *)filter_ctx->pbioWrite->ptr;\n761\t    res = SSL_write(filter_ctx->pssl, (unsigned char *)data, len);\n...\n...\n778\t        else if (ssl_err == SSL_ERROR_SYSCALL) {\n779\t            ap_log_cerror(APLOG_MARK, APLOG_INFO, outctx->rc, c, APLOGNO(01993)\n780\t                          \"SSL output filter write failed.\");\n781\t        }\n\n\nSo we can see SSL_ERROR_SYSCALL was the cause. \n\nChecking SSL_write, looks like on write fail it needs to test if can retry.  \n\nhttp://stackoverflow.com/questions/24188013/openssl-and-signals\n\nint result = SSL_write(ssl, buff, length);\nif ((result < 0) && BIO_should_retry(SSL_get_wbio(ssl)))\n    // need to retry\n\n\nHere is sample retry code from OpenSSL\n\nhttps://github.com/openssl/openssl/blob/919ba009429b3617e975933f37a23be996a33b8d/demos/bio/sconnect.c#L88\n\n    for (;;) {\n        i = BIO_write(out, &(p[off]), len);\n        if (i <= 0) {\n            if (BIO_should_retry(out)) {\n                fprintf(stderr, \"write DELAY\\n\");\n                sleep(1);\n                continue;\n            } else {\n                goto err;\n            }\n        }\n\n\nThere are also other samples within mod_ssl itself for checking EINTR for retry, as per this code around SSL_read, where we can see handling for EINTR that will resume : \n\nhttps://svn.apache.org/viewvc/httpd/httpd/tags/2.4.4/modules/ssl/ssl_engine_io.c?view=markup#l653\n\n\n591\t        rc = SSL_read(inctx->filter_ctx->pssl, buf + bytes, wanted - bytes);\n...\n...\n653            else if (ssl_err == SSL_ERROR_SYSCALL) {\n654\t                if (APR_STATUS_IS_EAGAIN(inctx->rc)\n655\t                        || APR_STATUS_IS_EINTR(inctx->rc)) {\n656\t                    /* Already read something, return APR_SUCCESS instead. */\n657\t                    if (*len > 0) {\n658\t                        inctx->rc = APR_SUCCESS;\n659\t                        break;\n660\t                    }\n661\t                    if (inctx->block == APR_NONBLOCK_READ) {\n662\t                        break;\n663\t                    }\n664\t                    continue;  /* Blocking and nothing yet?  Try again. */\n665\t                }\n666\t                else {\n667\t                    ap_log_cerror(APLOG_MARK, APLOG_INFO, inctx->rc, c, APLOGNO(01991)\n668\t                                  \"SSL input filter read failed.\");\n669\t                }\n\n\n\nFor completeness this was from strace \n\nstrace -v -o /tmp/strace.log -f -tt -s 16384 httpd/bin/apachectl -k start -D SSL\n\n\n13817 23:11:00.530835 <... futex resumed> ) = 0\n13817 23:11:00.530889 munmap(0xf5720000, 10489856) = 0\n13817 23:11:00.530968 tgkill(13817, 13821, SIGUSR1 <unfinished ...>\n\n\n13821 23:11:00.531027 <... poll resumed> ) = ? ERESTART_RESTARTBLOCK (To be rest\narted)\n13817 23:11:00.531047 <... tgkill resumed> ) = 0\n13821 23:11:00.531061 --- SIGUSR1 (User defined signal 1) @ 0 (0) ---\n13821 23:11:00.531138 sigreturn( <unfinished ...>\n13817 23:11:00.531158 futex(0xf41fdbd8, FUTEX_WAIT, 13821, NULL <unfinished ...>\n13821 23:11:00.531175 <... sigreturn resumed> ) = -1 EINTR (Interrupted system c\nall)\n13821 23:11:00.531210 gettimeofday({1453263060, 531221}, NULL) = 0\n13821 23:11:00.531274 write(2, \"[Tue Jan 19 23:11:00.531221 2016] [ssl:info] [pi\nd 13817:tid 4095728496] (4)Interrupted system call: [client 10.132.160.35:59069]\n AH01993: SSL output filter write failed.\\n\", 170) = 170\n13821 23:11:00.531333 time(NULL)        = 1453263060\n13821 23:11:00.531365 shutdown(14, 1 /* send */) = 0\n13821 23:11:00.531664 poll([{fd=14, events=POLLIN}], 1, 500) = 1 ([{fd=14, reven\nts=POLLIN}])\n\n\nReproduction steps : \n\nThe misconfiguration that made this problem visible was adding MaxRequestsPerChild = 1. to httpd-mpm.conf  : \n\n<IfModule mpm_worker_module>\n    ...\n    MaxRequestsPerChild      1\n</IfModule>\n\n\nThe byproduct of that was that when one request was completed it then sent SIGUSR1 to the process, interrupting any working threads (which included our long running download). \n\nHere is the complete, MPM settings for worker, we also kept number of httpd proceses down, so we were more likely to get multiple requests goign to the same httpd process. \n\n<IfModule mpm_worker_module>\n    StartServers             1\n    MinSpareThreads         5\n    MaxSpareThreads        25\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n# tuneing - as per client\n    ThreadLimit             128\n    MaxClients             800\n    ServerLimit            800\n    MaxRequestsPerChild      1\n</IfModule>\n\n\nThen we run two scripts \n1) A script that downloads a large file (9) over SSL, 20 times. \n2) A script that repeatedly downloads a small .png file. \n\n(I will attach them)  \n\nWe find we can regularly interrupt the SSL download, so that none of the large downloads succeed. \n\nObviously the problem is resolved by commenting out the parameter : \n    MaxRequestsPerChild      1\nWhich results in signal being sent after the small request is complete (since excceded maxrequests), and while the long download is still proceeding. \n\nAnd reduced signals will mean much less likely hood of the problem in SSL_write occuring. \n\nBut I am sure there are legitemate times in operation when this condition will occur, and will result in aborted SSL download. \n\n\nNotes:\n\na) Problem does not occur over HTTP , only over HTTPS \nb) Problem happens with much smaller files too (300k), larger files just give more\n   chance for the problem to occur."}, {"count": 1, "tags": [], "bug_id": 58901, "attachment_id": null, "is_private": false, "id": 187866, "time": "2016-01-21T06:19:00Z", "creator": "odoma04@ca.com", "creation_time": "2016-01-21T06:19:00Z", "text": "large file size was 9meg - reviewing I see that was not clear - Mark"}]
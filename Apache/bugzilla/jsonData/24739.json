[{"count": 0, "attachment_id": null, "bug_id": 24739, "text": "Because the secure flag is always set to yes when a session is created through \nan https connection, these session are lost when a user visits a non-secured \npage.  The reverse is NOT true -- if the first page is a non-secure page, the \ncookie will work on both secured and un-secured connections.\n\nDevelopers should have explicit control over whether the secure flag is set to \nyes.", "id": 47469, "time": "2003-11-17T05:44:00Z", "creator": "andrew@site9.net", "creation_time": "2003-11-17T05:44:00Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 24739, "is_private": false, "id": 48061, "time": "2003-11-25T00:41:11Z", "creator": "medthomas@ntlworld.com", "creation_time": "2003-11-25T00:41:11Z", "tags": [], "text": "Tomcat 4 (and 5) work this way to protect sessions created in SSL from being \nat risk of session hijacking if transferred back to http. That being said, \nthere have been a number of requests for this type of functionality on tomcat-\nuser.\n\nAs this is not strictly a bug, I am setting it to an enhancement request. \nUntil such time as a patch is written, using something similar to the \nfollowing in your jsp will provide a work-around.\n\n<A HREF=\"http://localhost:8080/bug24739/display.jsp;jsessionid=<%=session.getId\n()%>\">display session cookie(http)</A>\n\nObviously, you will need to \nreplace \"http://localhost:8080/bug24739/display.jsp\" with something \nappropriate to your environment."}, {"count": 2, "tags": [], "bug_id": 24739, "text": "*** Bug 28780 has been marked as a duplicate of this bug. ***", "id": 129706, "time": "2009-08-15T11:28:06Z", "creator": "markt@apache.org", "creation_time": "2009-08-15T11:28:06Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 144463, "time": "2011-02-21T19:13:23Z", "bug_id": 24739, "creation_time": "2011-02-21T19:13:23Z", "tags": [], "text": "On further reflection, I am closing this as WONTFIX. I can't see a valid, secure use case for creating a session of https and then exposing the session ID over http."}, {"count": 4, "tags": [], "bug_id": 24739, "is_private": false, "text": "How can you say there are no valid use cases?  Virtually EVERY ecommerce site on the internet supports this behavior.  Amazon.com, Apple.com, Dell.com.  Basically - whether a session sticks after secure access is based solely on the whim of your first access method?  Just give developers control.  It can still default to secure - make it programatic to explicitly use insecure.  Right now, hundreds of sites have to do a redirect to an insecure page to establish the session.", "id": 144476, "time": "2011-02-22T11:58:55Z", "creator": "andrew@site9.net", "creation_time": "2011-02-22T11:58:55Z", "attachment_id": null}, {"count": 5, "attachment_id": null, "creator": "andrew@site9.net", "text": "How can you say there are no valid use cases?  Virtually EVERY ecommerce site on the internet supports this behavior.  Amazon.com, Apple.com, Dell.com.  Basically - whether a session sticks after secure access is based solely on the whim of your first access method?  Just give developers control.  It can still default to secure - make it programatic to explicitly use insecure.  Right now, hundreds of sites have to do a redirect to an insecure page to establish the session.", "id": 144477, "time": "2011-02-22T11:59:24Z", "bug_id": 24739, "creation_time": "2011-02-22T11:59:24Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 24739, "is_private": false, "text": "(In reply to comment #5)\n> How can you say there are no valid use cases?  Virtually EVERY ecommerce site\n> on the internet supports this behavior.\n\nNo they don't. At least the securely written ones don't. I thoroughly recommend taking a detailed look at how Amazon does this - or at least as much as can be deduced from looking at the HTTP headers from the client side. There is more to it than a single session. Amazon has multiple cookies. I see 5 for that don't have the secure flag set and one that does.\n\nThe non-secure cookies are what allows Amazon to determine who you are when you connect over http but you can't access any security sensitive information (past orders, addresses, credit card details etc). For that you have to use https and that requires authentication or the presence of a valid secure cookie.\n\nThe Amazon application is using a far more sophisticated model than the single session with a single cookie model provided by the Servlet specification. If you want that sort of model as used by Amazon and others then you'll need to either code it yourself or use a framework that provides it.\n\nWith respect to this particular bug the primary concern of the Tomcat committers is security. If a session is created over https then it must remain over https in order to remain secure.\n\nAs I have said previously, if a valid use case for creating a non-secure session cookie over https that does not compromise security is presented then this will be re-considered but until such time it remains WONTFIX.", "id": 144478, "time": "2011-02-22T12:46:02Z", "creator": "markt@apache.org", "creation_time": "2011-02-22T12:46:02Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 24739, "is_private": false, "text": "You actually made my point SOME of the cookies are not secure.  My point is not that you should never have secure session cookies.  It's that sometimes you don't want them secure.   So - if it is appropriate for the session cookie to NOT be secure ( i.e. - I'm identified but don't have any special privileges ), then I have to make sure that they hit a non-secure page first, instead of a secure log-in page.  Look at facebook.  \n\nYou actually make the security issue worse because the security level of the cookie is seemingly arbitrary and undocumented:  i.e. -- if you hit a secure page first its secure.  If you hit a non-secure page first its not secure.  Why not just make it an explicit setting -- Session Cookie secure or not secure.  Then the developer decides explictly.  As it is now, it is confusing and arbirtary, and requires that you control every access to the site -- which has a greater likelihood - that someone allows sessions to accidentally be created on a non-secure page, or that someone sets a value EXPLICITLY to non-secure when they really meant that it be secure.\n\nIt's been 8 years - I don't really care about this to the extent that there are workarounds, but the proper solution IMHO is to make the security of the session cookie explicit.  This improves both cases - Its MORE secure, and I can allow insecure session cookies from a secured first page log-in.", "id": 144480, "time": "2011-02-22T13:04:11Z", "creator": "andrew@site9.net", "creation_time": "2011-02-22T13:04:11Z", "attachment_id": null}]
[{"count": 0, "attachment_id": null, "bug_id": 46879, "text": "There seems to be a discrepancy in philosophy regarding the level of support for multiple source folders.  For example, in a project that has the following organization:\n\nsrc-io/code/.../Main.java\nsrc-io/test/.../MainTest.java\nsrc-api/code/.../API.java\nsrc-api/test/.../APITest.java\n...etc...\n\nThe <javac> task supports this multiple-source model by allowing the use of\n<src refid=\"src.code.dirs\"/>, where \"src.code.dirs\" is defined as:\n\n<path id=\"src.code.dirs\">\n   <dirset dir=\"${basedir}\" includes=\"src-*/code\"/>\n</path>\n\nsimilarly, one can define a \"src.test.dirs\" to include all the unit test code.\n\nIt would make sense to be able to take the same approach when defining <batchtest> tests.\n\nFor example, I would've expected to be able to:\n\n<batchtest>\n  <fileset refid=\"src.test.dirs\" includes=\"**/*Test.java\" />\n</batchtest>\n\nIn any event - there seems to be no way to include multiple source folders in a batchtest, short of creating individual <fileset>s and including them in the <batchtest> node.\n\nIt would be nice to have a way to define that tests can come from multiple source folders.", "id": 125632, "time": "2009-03-19T10:22:57Z", "creator": "borice@hotmail.com", "creation_time": "2009-03-19T10:22:57Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 46879, "attachment_id": null, "text": "Since Ant 1.7 any resource collection, including path, should be an acceptable child of batchtest.  Please post any error you receive when trying to run such a setup.", "id": 125633, "time": "2009-03-19T10:34:26Z", "creator": "mbenson@apache.org", "creation_time": "2009-03-19T10:34:26Z", "is_private": false}, {"count": 2, "tags": [], "creator": "borice@hotmail.com", "text": "Thanks for the fast reply.\n\nI guess I'm not sure if what I'm trying to do is even supported.\n(I think what I need is to be able to specify a resource collection comprised of specific files across multiple folders... see details below)\n\nGiven the project organization described previously, I tried the following:\n\nTEST 1:\n-------\n\n<batchtest>\n  <fileset dir=${basedir}\" includes=\"src-*/test/**/*Test.java\"/>\n</batchtest>\n\nResult: this works in the sense that it does find all the proper files, but the package names are wrong given that \"dir\" is set to \"${basedir}\".  So instead of running  org.example.MainTest class, it tries to run  src-io.test.org.example.MainTest\n\nIf there would've been a way to apply a <regexpmapper> to the results of the fileset, I could've done something like\n\n<regexpmapper from=\"^src-.+/test/(.+)$\" to=\"\\1\"/>\n\nto \"strip out\" the src-io/test from the files defined in the <fileset>\n\n\nTEST 2:\n-------\n\n<path id=\"src.test.dirs\">\n   <dirset dir=\"${basedir}\" includes=\"src-*/test\" />\n</path>\n \n<batchtest>\n   <path refid=\"src.test.dirs\"/>\n</batchtest>\n\nResult: no error messages, but tests do not run -- also, don't have a way to include only certain \"*Test.java\"-like patterns\n\nTEST 3:\n-------\n\n<path id=\"src.test.dirs\">\n   <dirset dir=\"${basedir}\" includes=\"src-*/test\" />\n</path>\n \n<batchtest>\n   <fileset refid=\"src.test.dirs\" includes=\"**/*Test.java\" />\n</batchtest>\n\nResult: errors - twofold: \n  1. It complains that: \"You must not specify more than one attribute when using refid\"\n  2. If I remove the \"includes=...\" attribute, it still complains that src.test.dirs is not a fileset\n\n\nIn conclusion, I'm not sure if what I'm trying to do is even possible.\nOf course I could define a number of <fileset>s inside the <batchtest> to reference each individual src-*/test location, but that means that whenever more source folders are created, the build.xml file would need to be updated.\n\nAny ideas?", "id": 125635, "time": "2009-03-19T12:10:13Z", "bug_id": 46879, "creation_time": "2009-03-19T12:10:13Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "mbenson@apache.org", "text": "Have you tried\n<fileset dir=\"${basedir}\" includes=\"src-*/test/**/*Test.java\" />\n\n?\n\nThis may or may not work due to relative path stuff, but it's a start...", "id": 125636, "time": "2009-03-19T12:43:46Z", "bug_id": 46879, "creation_time": "2009-03-19T12:43:46Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 46879, "is_private": false, "id": 125637, "time": "2009-03-19T13:59:50Z", "creator": "borice@hotmail.com", "creation_time": "2009-03-19T13:59:50Z", "tags": [], "text": "Matt, that was one of the first things I tried.\nIf you look in the \"TEST 1\" section from my second post, you will see the details.\n\nThanks again for your help!"}, {"count": 5, "tags": [], "bug_id": 46879, "attachment_id": null, "is_private": false, "id": 125638, "time": "2009-03-19T14:33:10Z", "creator": "mbenson@apache.org", "creation_time": "2009-03-19T14:33:10Z", "text": "If you want to try some trunk code, a MappedResourceCollection has actually been added.  Maybe it would do the trick."}, {"count": 6, "attachment_id": null, "creator": "borice@hotmail.com", "text": "Matt, thanks a lot!  This works great!\n\n<batchtest todir=\"${test.dir}/xml\">\n   <mappedresources>\n      <fileset dir=\"${basedir}\" includes=\"src-*/test/**/*Test.java\"/>\n      <regexpmapper from=\"^src-.+/test/(.+)$\" to=\"\\1\"/>\n   </mappedresources>\n</batchtest>\n\n\n--Boris", "id": 125655, "time": "2009-03-20T09:04:33Z", "bug_id": 46879, "creation_time": "2009-03-20T09:04:33Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "I discovered that since I'm compiling all test cases into the same destination folder, I can forego using the <mappedresources> and do the following:\n\n<batchtest>\n   <fileset dir=\"${build.test.dir}\" includes=\"**/*Test.class\"/>\n</batchtest>\n\n\nwhere build.test.dir is populated as follows:\n\n       <javac destdir=\"${build.test.dir}\" debug=\"on\">\n            <src refid=\"src.test.dirs\"/>\n            <classpath>\n                <path refid=\"meandre.core.classpath\"/>\n                <path refid=\"test.classpath\"/>\n                <pathelement location=\"${build.src.dir}\"/>\n            </classpath>\n        </javac>\n\nThis is as simple as it can get, and works in the current Ant releases.\n\nI didn't know that <batchtest> uses the enclosed resource collection (in my case the <fileset>) only to determine the class names of the unit tests it needs to run (and these class names are derived from the file names returned by the fileset).   I thought that the fileset needed to reference the actual java source code of the unit tests, but it doesn't.  \n\nThanks again for all your help.  The <mappedresources> is still something I can find a lot of uses for - so I can't wait for Ant 1.8 :-)", "attachment_id": null, "bug_id": 46879, "id": 125657, "time": "2009-03-20T09:29:13Z", "creator": "borice@hotmail.com", "creation_time": "2009-03-20T09:29:13Z", "is_private": false}]
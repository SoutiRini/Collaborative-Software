[{"count": 0, "tags": [], "bug_id": 48170, "text": "I have a soak test at constant load that is initially stable.  Within the hour, an ever increasing number of blocked threads develops.  The vast majority of threads are in JSP rendering, blocked on JspFactory.getDefaultFactory().\n\nThe server eventually crashes.\n\nWe are running Java 6.\n\nUpon code inspection, there appears to be no real reason for synchronizing the getDefaultFactory() and setDefaultFactory() as the setter is called only once upon startup when the sub-class loads.\n\nPatching the jar, I tried three other experiments:\n1) Removing the synchronized keyword entirely.\n2) Locking on an inner static class instead of the JspFactory.class.\n3) Using volatile for the static member variable.\n\nBoth experiments #1 and #3 showed vastly better stability.  I was able to double the throughput of the server without seeing increasing number of blocked threads.\n\nExperiment #2 yielded the same behavior as the original code.  Thus, no other code\nis synchronizing on JspFactory.class.  Rather, there seem to be some sort of contention in the java.lang.Class monitor.\n\nUsing volatile would preserve the multi-threading semantics while avoiding contributing to the instability issue.", "id": 131858, "time": "2009-11-10T18:04:01Z", "creator": "earl.nolan@nfl.com", "creation_time": "2009-11-10T18:04:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "sebb@apache.org", "text": "(In reply to comment #0)\n> I have a soak test at constant load that is initially stable.  Within the hour,\n> an ever increasing number of blocked threads develops.  The vast majority of\n> threads are in JSP rendering, blocked on JspFactory.getDefaultFactory().\n> \n> The server eventually crashes.\n> \n> We are running Java 6.\n> \n> Upon code inspection, there appears to be no real reason for synchronizing the\n> getDefaultFactory() and setDefaultFactory() as the setter is called only once\n> upon startup when the sub-class loads.\n\nIn which case, the setter should be package-protected?\n\n> Patching the jar, I tried three other experiments:\n> 1) Removing the synchronized keyword entirely.\n> 2) Locking on an inner static class instead of the JspFactory.class.\n> 3) Using volatile for the static member variable.\n> \n> Both experiments #1 and #3 showed vastly better stability.  I was able to\n> double the throughput of the server without seeing increasing number of blocked\n> threads.\n> \n> Experiment #2 yielded the same behavior as the original code.  Thus, no other\n> code\n> is synchronizing on JspFactory.class.  Rather, there seem to be some sort of\n> contention in the java.lang.Class monitor.\n> \n> Using volatile would preserve the multi-threading semantics while avoiding\n> contributing to the instability issue.\n\nMight be worth trying synch. on a private static lock Object instead of an inner class?\n\nIf the JspFactory class can be loaded after the JspRuntimeContext class, then JspRuntimeContext could store the factory as a static final field which could be accessed by JspFactory on startup.\n\nOr indeed, do away with setDefaultFactory() and have getDefaultFactory() return the static final value from JspRuntimeContext?", "id": 131866, "time": "2009-11-11T03:09:43Z", "bug_id": 48170, "creation_time": "2009-11-11T03:09:43Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 48170, "attachment_id": null, "is_private": false, "id": 131867, "time": "2009-11-11T03:13:35Z", "creator": "sebb@apache.org", "creation_time": "2009-11-11T03:13:35Z", "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > I have a soak test at constant load that is initially stable.  Within the hour,\n> > an ever increasing number of blocked threads develops.  The vast majority of\n> > threads are in JSP rendering, blocked on JspFactory.getDefaultFactory().\n> > \n> > The server eventually crashes.\n> > \n> > We are running Java 6.\n> > \n> > Upon code inspection, there appears to be no real reason for synchronizing the\n> > getDefaultFactory() and setDefaultFactory() as the setter is called only once\n> > upon startup when the sub-class loads.\n> \n> In which case, the setter should be package-protected?\n\nSorry, that's nonsense - different packages.\n\n> > Patching the jar, I tried three other experiments:\n> > 1) Removing the synchronized keyword entirely.\n> > 2) Locking on an inner static class instead of the JspFactory.class.\n> > 3) Using volatile for the static member variable.\n> > \n> > Both experiments #1 and #3 showed vastly better stability.  I was able to\n> > double the throughput of the server without seeing increasing number of blocked\n> > threads.\n> > \n> > Experiment #2 yielded the same behavior as the original code.  Thus, no other\n> > code\n> > is synchronizing on JspFactory.class.  Rather, there seem to be some sort of\n> > contention in the java.lang.Class monitor.\n> > \n> > Using volatile would preserve the multi-threading semantics while avoiding\n> > contributing to the instability issue.\n> \n> Might be worth trying synch. on a private static lock Object instead of an\n> inner class?\n\nThat might perhaps help.\n\n> If the JspFactory class can be loaded after the JspRuntimeContext class, then\n> JspRuntimeContext could store the factory as a static final field which could\n> be accessed by JspFactory on startup.\n> \n> Or indeed, do away with setDefaultFactory() and have getDefaultFactory() return\n> the static final value from JspRuntimeContext?\n\nThat's nonsense too."}, {"count": 3, "tags": [], "bug_id": 48170, "attachment_id": null, "text": "The simplest approach is to change the static member variable declaration:\n\nprivate static volatile JspFactory deflt = null;\n\nand then remove the synchronized keyword on the getter/setter.\n\nThis preserves the existing multi-threaded guarantees while not incurring the monitor overhead.  If effect, exchanging a monitor for a memory latch.", "id": 131884, "time": "2009-11-11T09:27:26Z", "creator": "earl.nolan@nfl.com", "creation_time": "2009-11-11T09:27:26Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Fixed in trunk and proposed for 6.0.x\n\nNote as a part of the JSP API, the changes permitted are limited.", "id": 134344, "time": "2010-02-08T14:24:41Z", "bug_id": 48170, "creation_time": "2010-02-08T14:24:41Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 48170, "attachment_id": null, "is_private": false, "id": 134646, "time": "2010-02-18T12:13:33Z", "creator": "markt@apache.org", "creation_time": "2010-02-18T12:13:33Z", "text": "This has been fixed in 6.0.x and will be included in 6.0.25 onwards."}]
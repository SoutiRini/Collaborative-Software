[{"count": 0, "tags": [], "bug_id": 45499, "is_private": false, "id": 119108, "creation_time": "2008-07-29T19:04:24Z", "time": "2008-07-29T19:04:24Z", "creator": "Tim.Whittington@orionhealth.com", "text": "Created attachment 22327\nPatch to DirectoryScanner to prevent recursion on symlinks to ancestor dirs\n\nI'm using Ant 1.7.1 on Mac OS X 10.5.4 with Java SE 6 (1.6.0_05).\n\nWhen compiling some fairly basic Java source using the javac task I get consistent OutOfMemoryErrors. Some debugging reveals that this is due to an infinite recursion of directories in DirectoryScanner.\n\nThe Java framework installed on the Mac has a Home directory that emulates the layout of a JRE on *nix/Windows, so apps (like Ant) that like to base things off $JAVA_HOME can find things.\n\nIn Java 6, this Home directory has two symlinks to parent directories, namely:\nbundle -> ../\nshared_bundle -> ../../../\n(This is a default install of the latest Java update for OS X 10.5 - I haven't modified it in any way, so this issue will probably be an issue for all OS X users).\n\nDuring the javac execution, DirectoryScanner seems to scan the $JAVA_HOME directory (I haven't tried to ascertain why), resulting in an infinite recursion on bundle -> Home -> bundle -> Home etc. etc., eventually ending in an OOME.\n\nI'm attaching a patch that resolves listed child directories to canonical paths and checks if they're leaders of the currrent director, which fixes this issue.", "attachment_id": 22327}, {"count": 1, "tags": [], "bug_id": 45499, "attachment_id": null, "id": 120314, "creation_time": "2008-09-03T07:50:04Z", "time": "2008-09-03T07:50:04Z", "creator": "bodewig@apache.org", "text": "I'm not convinced that ignoring the symlink completely is the right thing to do, we probably should follow it but make sure we don't scan directories we've already seen again.", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45499, "attachment_id": null, "id": 120315, "creation_time": "2008-09-03T07:52:36Z", "time": "2008-09-03T07:52:36Z", "creator": "mbenson@apache.org", "text": "Generally a lot of the internals of DirectoryScanner are private, so we can likely change signatures to pass around an e.g. Stack if needed.", "is_private": false}, {"count": 3, "text": "looks like that won't work after all (protected scandir), but DS is written in a stateful way, so something could be done.", "bug_id": 45499, "is_private": false, "id": 120318, "time": "2008-09-03T08:28:39Z", "creator": "mbenson@apache.org", "creation_time": "2008-09-03T08:28:39Z", "tags": [], "attachment_id": null}, {"count": 4, "text": "(In reply to comment #1)\n> I'm not convinced that ignoring the symlink completely is the right thing to\n> do, we probably should follow it but make sure we don't scan directories we've\n> already seen again.\n> \n\nIt looks like DirectoryScanner already avoids scanning directories it's already encountered (via hasBeenScanned(String)). I haven't verified this actually works as intended though, and it only seems to fire on fast scans.\n\nI'd struggle to imagine a real use case for a symlink to a parent directory that I'd actually want to recurse through, but it'd be sensible if you're looking for a bullet-proof general solution.\n", "bug_id": 45499, "attachment_id": null, "id": 120326, "time": "2008-09-03T19:04:48Z", "creator": "Tim.Whittington@orionhealth.com", "creation_time": "2008-09-03T19:04:48Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 45499, "attachment_id": null, "is_private": false, "id": 120336, "time": "2008-09-04T00:50:38Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-04T00:50:38Z", "text": "Matt: yes, I think it is doable, even without too many or too big changes, but we need to think through some scenarios first to decide what to do.  I'll take that to the dev list later (after coding up some AntUnit tests as use cases).\n\nTim: hasBeenScanned only receives the relative path which will be different each time the directory is encountered again.\n\nI was thinking about a case where we have a structure like this\n\nA/\n|---> B/\n      |-----> C.txt\n      D/\n      |-----> E (symlink pointing to A)\n\nLet's say we set basedir to D and scan with an include pattern of E/B/C.txt - should it match the file or should we skip going upwards (we wouldn't rescan D since it isn't matched by an include pattern)?  I haven't checked, but we may even get the file in fast mode and an infinite loop in slow mode (when the client asks for the not-included files/dirs).\n\nThe good thing is that we don't need to think about backwards compatibility for the cases where Ant could run into an infinite loop 8-)\n\nLike I said, I'll move the discussion over to the dev list.\n"}, {"count": 6, "tags": [], "bug_id": 45499, "attachment_id": null, "id": 120360, "creation_time": "2008-09-04T07:30:05Z", "time": "2008-09-04T07:30:05Z", "creator": "bodewig@apache.org", "text": "dev thread started http://marc.info/?l=ant-dev&m=122053158307830&w=2", "is_private": false}, {"count": 7, "tags": [], "bug_id": 45499, "attachment_id": null, "is_private": false, "id": 120519, "time": "2008-09-10T08:44:32Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-10T08:44:32Z", "text": "the infinite loop should be gone with svn revision 693870.\n\n<fileset> now has a new attribute currently named maxLevelsOfsymlinks that currently defaults to 1.  It controls how often a given symlink will be followed.\n\nNot yet documented (that's why I don't close the report) since attribute name\nand default value are up for discussion."}, {"count": 8, "text": "Tim, would it be possible for you to download the latest source snapshot from http://svn.apache.org/snapshots/ant/ , build it and verify that it works for you?", "bug_id": 45499, "attachment_id": null, "id": 120656, "time": "2008-09-16T01:41:56Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-16T01:41:56Z", "tags": [], "is_private": false}, {"count": 9, "text": "I downloaded and built the ant_20080922041906.tar.gz snapshot, and ran it against my build, and the compile now appears to complete successfully.\n\nI'd really like not to be spammed as much for my one offending symlink though (there's a bit of exponential explosion going on with the potential paths it gets to skip)\n\nIn a probably unrelated issue, my build is now failing with the new snapshot (it appears to have broken a fairly innocuous looking AntX foreach, complaining the loop property isn't set).\n\nLog excerpt follows.\n\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Home -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.1/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.1/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.1/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.2/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.2/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.4.2/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5.0/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5.0/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.5.0/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.6/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.6/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.6.0/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/1.6.0/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/CurrentJDK/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bundle/Home/shared_bundle/Versions/CurrentJDK/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Home -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.1/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.1/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.1/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.2/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.2/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.4.2/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5.0/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5.0/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.5.0/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6.0/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6.0/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/1.6.0/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/CurrentJDK/Home/bundle/Home/bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/CurrentJDK/Home/bundle/Home/shared_bundle -- too many levels of symbolic links.\n    [javac] skipping symbolic link /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/shared_bundle/Versions/CurrentJDK/Home/shared_bundle -- too many levels of symbolic links.\n[antx:callforeach] antx:callforeach unable to run all steps; step [copy.inline.resources] threw failure.\n[antx:callforeach] Unable to complete steps when loop cursor at [/Users/archie/Projects/OrionPlatform/Tools/com.orchestral.common.hibernate3/src/main/java].\n", "bug_id": 45499, "is_private": false, "id": 120846, "time": "2008-09-22T03:17:53Z", "creator": "Tim.Whittington@orionhealth.com", "creation_time": "2008-09-22T03:17:53Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 45499, "is_private": false, "id": 120982, "creation_time": "2008-09-25T05:55:46Z", "time": "2008-09-25T05:55:46Z", "creator": "bodewig@apache.org", "text": "more recent versions will allow the same symlink to be traversed more often (to reduce the performance and memory impact of the tests), so your build will consume a bit more memory.\n\nWe might lower the log priority, by writing the message to System.out, but it would probably remain visible anyway.  I'm afraid there isn't much we can do.", "attachment_id": null}, {"count": 11, "text": "I have checkout the trunk from SVN (october 14) compile it and tried to compile a project and the problem is present yet. I have the same logs as in the  Comment #9, with the same previous results, the heap space error after several logs about thetoo many levels of symbolic links.\n\nThis could be because the DWR2(directwebremoting.org) project (the project I am trying to compile) uses two different JDKs for its compilation process, please can you check this?. ", "bug_id": 45499, "attachment_id": null, "id": 121545, "time": "2008-10-15T08:14:08Z", "creator": "isoujiro@gmail.com", "creation_time": "2008-10-15T08:14:08Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 121581, "time": "2008-10-16T03:29:02Z", "bug_id": 45499, "creation_time": "2008-10-16T03:29:02Z", "text": "Detecting whether a certain filesystem object is a symbolic link is surprisingly wasteful in Java (both in terms of time as well as memory required), so the code tries to avoid these checks unless it suspects it is caught in an infinite loop.\n\nTo make DirectoryScanner suspect it is in such a loop it has to see the same directory name (only the name without parents) more often than a configurable number of times.\n\nBetween the point in time where Tim confirmed his build no longer failed and the current svn version I've increased the default value of how often the same name of a directory is acceptable from one to five, see http://svn.eu.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/DirectoryScanner.java?r1=697073&r2=697692\n\nMost likely you now hit the out-of-memory exception because Ant doesn't break out of the traversal early enough.  Could you play with the value of DirectoryScanner#MAX_LEVELS_OF_SYMLINKS to see whether a value hopefully bigger than one works for you?\n\nTuning this really is something we need to do before we release the code."}, {"count": 13, "tags": [], "creator": "isoujiro@gmail.com", "attachment_id": 22748, "is_private": false, "id": 121645, "time": "2008-10-16T13:47:40Z", "bug_id": 45499, "creation_time": "2008-10-16T13:47:40Z", "text": "Created attachment 22748\nlogs from compile task\n\nThe logs I get from compile (run compile task of the DWR2 project) with the max symlinks variable set to 3."}, {"count": 14, "text": "I have checkout and compile today ant-core trunk from SVN. \n\nChanging MAX_LEVELS_OF_SYMLINKS=3, after 10 mins of dwr2 compile task execution\nand after the --too many levels..... logs, I get this:\nBUILD FAILED\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.tools.ant.util.VectorSet.doAdd(VectorSet.java:64)\n        at org.apache.tools.ant.util.VectorSet.addElement(VectorSet.java:75)\n        at\norg.apache.tools.ant.DirectoryScanner.scandir(DirectoryScanner.java:1217)\n        at\norg.apache.tools.ant.DirectoryScanner.scandir(DirectoryScanner.java:1239)\n        ......\n\n\n\nChanging MAX_LEVELS_OF_SYMLINKS=1, after some seconds of dwr2 compile task\nexecution and after the --too many levels..... logs, I get this:\n\n[javac] skipping symbolic link\n/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/shared_bundle/Versions/CurrentJDK/Home/shared_bundle\n-- too many levels of symbolic links.\n    [javac] \n    [javac] \n    [javac] The system is out of resources.\n    [javac] Consult the following stack trace for details.\n    [javac] java.lang.OutOfMemoryError: Java heap space\n    [javac]     at java.util.zip.ZipEntry.initFields(Native Method)\n    [javac]     at java.util.zip.ZipEntry.<init>(ZipEntry.java:100)\n    [javac]     at java.util.zip.ZipFile$3.nextElement(ZipFile.java:437)\n    [javac]     at java.util.zip.ZipFile$3.nextElement(ZipFile.java:415)\n    [javac]     at\ncom.sun.tools.javac.jvm.ClassReader.openArchive(ClassReader.java:1447)\n    [javac]     at\ncom.sun.tools.javac.jvm.ClassReader.list(ClassReader.java:1742)\n    [javac]     at\ncom.sun.tools.javac.jvm.ClassReader.listAll(ClassReader.java:1882)\n    [javac]     at\ncom.sun.tools.javac.jvm.ClassReader.fillIn(ClassReader.java:1901)\n    [javac]     at\ncom.sun.tools.javac.jvm.ClassReader.complete(ClassReader.java:1538)\n    [javac]     at com.sun.tools.javac.code.Symbol.complete(Symbol.java:355)\n    [javac]     at com.sun.tools.javac.comp.Enter.visitTopLevel(Enter.java:256)\n    [javac]     at com.sun.tools.javac.tree.Tree$TopLevel.accept(Tree.java:382)\n    [javac]     at com.sun.tools.javac.comp.Enter.classEnter(Enter.java:221)\n    [javac]     at com.sun.tools.javac.comp.Enter.classEnter(Enter.java:235)\n    [javac]     at com.sun.tools.javac.comp.Enter.complete(Enter.java:460)\n    [javac]     at com.sun.tools.javac.comp.Enter.main(Enter.java:445)\n    [javac]     at\ncom.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:404)\n    [javac]     at com.sun.tools.javac.main.Main.compile(Main.java:592)\n    [javac]     at com.sun.tools.javac.main.Main.compile(Main.java:544)\n    [javac]     at com.sun.tools.javac.Main.compile(Main.java:67)\n    [javac]     at com.sun.tools.javac.Main.main(Main.java:52)\n\n\nI have an observation, I get this logs\n[javac] skipping symbolic link\n/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/bundle/Home/bundle/Home/bundle/Home/shared_bundle/Home/bundle/Home/bundle/Home/bundle/Home/shared_bundle/Versions/1.5.0/Home/shared_bundle/Versions/CurrentJDK/Home/bundle\n-- too many levels of symbolic links.\n...\n[javac] skipping symbolic link\n/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/bundle/Home/bundle/Home/bundle/Home/shared_bundle/Home/bundle/Home/bundle/Home/bundle/Home/shared_bundle/Versions/1.6.0/Home/bundle/Home/bundle/Home/shared_bundle/Versions/1.4.2/Home/shared_bundle\n-- too many levels of symbolic links.\n\nIn the previous logs I can see references to another JDKs (1.5.0, 1.6.0) and\nthis type of logs are generated for all the JDKs I have installed (from 1.4 to\n1.6 because the OSX updates), so why the DirectoryScanner travel all the JDKs?\n(I have attached my logs file)", "bug_id": 45499, "is_private": false, "id": 121646, "time": "2008-10-16T13:49:52Z", "creator": "isoujiro@gmail.com", "creation_time": "2008-10-16T13:49:52Z", "tags": [], "attachment_id": null}, {"count": 15, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 121655, "time": "2008-10-17T07:24:23Z", "bug_id": 45499, "creation_time": "2008-10-17T07:24:23Z", "is_private": false, "text": "you see the different JDKs because one of your symlinks is pointing to a parent directory of all your JDKs, namely the one that holds the Versions directory which again makes Ant traverse into all your JDKs.\n\nI guess it is not so much a problem of an infinite loop but more one of getting a <path> that is incredibly big in the end and eating all your memory.\n\nCould you perform a run with MAX_LEVELS set to 1 and run it with -debug so I stand a chance of seeing which DirectoryScanner is going into that path and why?\n\nThe defintion of the <javac> task of your buildfile would help as well."}, {"count": 16, "tags": [], "bug_id": 45499, "attachment_id": 22751, "id": 121671, "time": "2008-10-17T15:05:01Z", "creator": "isoujiro@gmail.com", "creation_time": "2008-10-17T15:05:01Z", "is_private": false, "text": "Created attachment 22751\nDWR2 build logs\n\nHere I attach the logs of the compile process using debug logs (-d) and MAX_LEVELS=1."}, {"count": 17, "tags": [], "bug_id": 45499, "attachment_id": 22752, "text": "Created attachment 22752\nbuild.properties and build.xml compressed\n\nHere I attach the build.properties and build.xml compressed in a zip file.", "id": 121672, "time": "2008-10-17T15:07:35Z", "creator": "isoujiro@gmail.com", "creation_time": "2008-10-17T15:07:35Z", "is_private": false}, {"count": 18, "text": "Hi Stefan:\nI have attached the project compile task log (DWR2 build logs) and the build.properties and build.xml in a compressed zip file  (build.properties and build.xml compressed).\n\nI think that can be more productive (and easy) if you can download the DWR2 project and try yourself, (only a comment) ;) , help you is my pleasure.", "bug_id": 45499, "attachment_id": null, "id": 121673, "time": "2008-10-17T15:11:01Z", "creator": "isoujiro@gmail.com", "creation_time": "2008-10-17T15:11:01Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 121732, "time": "2008-10-21T08:26:20Z", "bug_id": 45499, "creation_time": "2008-10-21T08:26:20Z", "text": "I have no idea what the DWR2 project might be.\n\nEven if my iBook's display hadn't decided to break down a few months ago (making me an ex-Mac owner since a dell Notebook running Ubuntu was a less expensive choice), it would have been too old to run Apple's Java6 (a G3 machine).\n\nI'm afraid without Apple's, errm, interesting *symlink* structure in JAVA_HOME I won't be able to see the same results as you.\n\nThanks for the logs."}, {"count": 20, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 121946, "time": "2008-10-28T04:55:54Z", "bug_id": 45499, "creation_time": "2008-10-28T04:55:54Z", "text": "Alvaro,\n\nin your case it is the sheer number of symbolic links together with a strange decision made by Apple about their symlinks.\n\nIf I read the logs correctly then\n/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Home/shared_bundle\nis a symbolic link pointing to\n/System/Library/Frameworks/JavaVM.framework/\n(this is consistent with Tim's description).\n\nSo even if Ant follows that symlink only once, it will end up scanning all your installed JVMs for jars (and each of them has a different symlink pointing to the same place).  No symlink loop detection code is going to save you from the OOM you see if there are seven VMs (1.4, 1.4.1, 1.4.2, 1.5, 1.5.0, 1.6 and 1.6.0) to recurse into.\n\nEven with maxlevelsofsymlinks=\"1\", the bootclasspath built-up in your compile target is huge.\n\nI'd suggest to change your build file to read\n\n      <bootclasspath>\n        <fileset dir=\"${java.13.home}\" includes=\"**/*.jar\"\n                 excludes=\"**/shared_bundle/**/>\n      </bootclasspath>\n\ninstead of\n\n      <bootclasspath>\n        <fileset dir=\"${java.13.home}\" includes=\"**/*.jar\"/>\n      </bootclasspath>\n\nand do the same to the 1.5 javac task.\n\nI don't think there is anything the Ant team can do, sorry.\n\nI'm not closing this right away since I found a few places where Ant creates internal filesets where we should better restrict the number of symlinks followed, but these are unrelated to your case."}, {"count": 21, "tags": [], "bug_id": 45499, "is_private": false, "id": 121949, "creation_time": "2008-10-28T05:01:01Z", "time": "2008-10-28T05:01:01Z", "creator": "bodewig@apache.org", "text": "There are no places to fix since all Filesets we create internally (in Path, for example) are not recursive (have explicit include patterns without **).\n\nClosing again.", "attachment_id": null}]
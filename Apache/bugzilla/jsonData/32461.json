[{"count": 0, "tags": [], "text": "The Xslt/Style task has a \"style\" attribute that specifies the name of the\nstylesheet to use.\n\nIt would be nice if xslt could be specified inline instead of a pointer to a file.\n\nFor example:\n\n<xslt in=\"doc.xml\" out=\"build/doc/output.xml\">\n  <inline-xslt>\n    ...\n  </inline-xslt>\n</xslt>", "attachment_id": null, "id": 67666, "creator": "Jason.M.Fox@jpl.nasa.gov", "time": "2004-12-01T01:05:56Z", "bug_id": 32461, "creation_time": "2004-12-01T01:05:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 67681, "time": "2004-12-01T04:59:45Z", "creator": "jglick@apache.org", "creation_time": "2004-12-01T04:59:45Z", "is_private": false, "text": "Seems like this is hardly necessary:\n\n<tempfile property=\"xslt.file\"/>\n<echo file=\"${xslt.file}\"><![CDATA[\n...your XSLT here...\n]]></echo>\n<xslt in=\"...\" out=\"...\" style=\"${xslt.file}\"/>"}, {"count": 2, "tags": [], "bug_id": 32461, "is_private": false, "text": "Jesse,\n\nThanks for the tip.\n\nI also agree that if one uses the <tempfile> task there should be no need for\ninlining in the <xslt> task.\n", "id": 67711, "time": "2004-12-01T17:16:43Z", "creator": "Jason.M.Fox@jpl.nasa.gov", "creation_time": "2004-12-01T17:16:43Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 67725, "time": "2004-12-01T19:29:56Z", "creator": "mbenson@apache.org", "creation_time": "2004-12-01T19:29:56Z", "is_private": false, "text": "While I do not use this task, I have an instinctive distaste for temp files,\nvariables, anything, really... so I feel that this request has merit."}, {"count": 4, "tags": [], "text": "On looking at the code, however, it appears that a non-invasive implementation\nwould employ... guess what... a temp file!  Still, I might play around with this\nif nobody else wants to.", "attachment_id": null, "id": 67727, "creator": "mbenson@apache.org", "time": "2004-12-01T20:01:07Z", "bug_id": 32461, "creation_time": "2004-12-01T20:01:07Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 67736, "time": "2004-12-01T22:20:46Z", "creator": "stevel@apache.org", "creation_time": "2004-12-01T22:20:46Z", "is_private": false, "text": "A temp file, but one we can remember to clean up for the user. The other problem\nis that to do with nested XML; really you'd want to inline xsl without\ncdata[]-ing it, as that always sucks.\n\nalso, we could enhance <tempfile> to set the File.deleteOnExit() if a\ndeleteOnExit attribute is set. It isnt foolproof, but it would make cleanup on\nfailed builds more likely."}, {"count": 6, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 67738, "time": "2004-12-01T22:45:11Z", "creator": "mbenson@apache.org", "creation_time": "2004-12-01T22:45:11Z", "is_private": false, "text": "Steve, I was thinking to add public void addStyle(XMLFragment style) to the\ntask.  Then the problem becomes that the internals of XSLTProcess are\nFile-centric.  Looks like the XSLTLiaison interface has already been extended\nonce.  I thought of extending it again to add setStylesheet(InputStream is),\nthen modifying the internals of the implementations we control... should work,\nthough it's fairly involved given my lack of familiarity with the task (and\ncurrent workload).  ;)\n\n\nDid I mention I hate tempfiles?"}, {"count": 7, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 67805, "time": "2004-12-02T18:54:29Z", "creator": "emmanouil.batsis@eurodyn.com", "creation_time": "2004-12-02T18:54:29Z", "is_private": false, "text": "Since this is about the stylesheet to use, i thought i might pop in. Can this\ntask use the stylsheet referenced by the XML file to transform (in it's\nxml-stylesheet PI)? This would be real usefull when dealing with XML files that\nuse different XSLT stylsheets. I have implemented such a task so if you'd like i\ncould work out a patch to integrate this functionality where it belongs IMHO.\n"}, {"count": 8, "tags": [], "bug_id": 32461, "attachment_id": null, "id": 122792, "time": "2008-11-24T08:41:45Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-24T08:41:45Z", "is_private": false, "text": "the stylesheet ca be a resource since Ant 1.7.0 but still requires a file-system resource - otherwise a <string>-resource would do.\n"}, {"count": 9, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 122793, "time": "2008-11-24T08:45:23Z", "bug_id": 32461, "creation_time": "2008-11-24T08:45:23Z", "text": "misread the code, it can be an arbitrary resource if the liaison implements XSLTLiaison3 - will add a test."}, {"count": 10, "tags": [], "text": "OK.  xslt supports a nested <style> element which supports any resoucre as nested element.  This doesn't seem to be documented in the online version of the manual, but has been the case for Ant 1.7.0 (from looking at the tagged code).\n\nSo inline stylesheets are possible using\n\n<xslt ...>\n  <style>\n    <string><![CDATA[...]]></string>\n  </style>\n</xslt>\n\nsvn revision 720481 contains a testcase for this.\n\n", "is_private": false, "bug_id": 32461, "id": 122828, "time": "2008-11-25T04:36:11Z", "creator": "bodewig@apache.org", "creation_time": "2008-11-25T04:36:11Z", "attachment_id": null}]
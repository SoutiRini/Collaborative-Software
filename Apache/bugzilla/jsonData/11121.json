[{"count": 0, "tags": [], "bug_id": 11121, "attachment_id": null, "id": 20116, "time": "2002-07-24T08:49:54Z", "creator": "kisst2@freemail.hu", "creation_time": "2002-07-24T08:49:54Z", "is_private": false, "text": "The manifest task wraps lines longer than 72 characters, which also stated in \nthe javadoc for this task:\n\"If an application can not handle the continuation mechanism, it is a defect in \nthe application, not this task.\"\n\nHowever, the Jar spec dictates, that manifest attributes like Class-Path should \nalways be a single line. (even if it is longer than 72 chars.)\n\nCurrently, specifying a long Class-Path attribute breaks ClassLoaders.\n\nQuick and dirty solution would be to set the MAX_LINE_LENGTH attribute to \nInteger.MAX in org.apache.tools.ant.taskdefs.Manifest.java.\n\nBetter one would be to rewrite the writeValue method, not to wrap."}, {"count": 1, "tags": [], "bug_id": 11121, "attachment_id": null, "id": 20217, "time": "2002-07-26T00:32:34Z", "creator": "conor@apache.org", "creation_time": "2002-07-26T00:32:34Z", "is_private": false, "text": "You say \n\"However, the Jar spec dictates, that manifest attributes like Class-Path should \nalways be a single line.\" \n\nI could not find any such indication in the 1.4 version of the specification.\nCan you provide a URL where this is stated. Thanks"}, {"count": 2, "tags": [], "bug_id": 11121, "attachment_id": null, "is_private": false, "id": 20219, "time": "2002-07-26T00:37:37Z", "creator": "alexeys@inventigo.com", "creation_time": "2002-07-26T00:37:37Z", "text": "Even if <jar> works fine according to the spec, it breaks at least oracle 9i\napplication server. So maybe it better to add a setting to perform wrapping or not."}, {"count": 3, "attachment_id": null, "creator": "kisst2@freemail.hu", "is_private": false, "id": 20253, "time": "2002-07-26T13:08:54Z", "bug_id": 11121, "creation_time": "2002-07-26T13:08:54Z", "tags": [], "text": "http://java.sun.com/j2se/1.4.1/docs/guide/jar/jar.html\n\n<quote>\nClass-Path : \nThe value of this attribute specifies the relative URLs of the extensions or \nlibraries that this application or extension needs. URLs are separated by one \nor more spaces. The application or extension class loader uses the value of \nthis attribute to construct its internal search path. \n</quote>\n\n\"..separated by one or more spaces...\" \nnot\n\"...separated by one or more spaces or [line.separator]-s...\"\n\nAnd, please refer to:\nhttp://www.theserverside.com/resources/articles/J2EE-Deployment/chapter.html\n"}, {"count": 4, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "id": 20254, "time": "2002-07-26T14:03:13Z", "bug_id": 11121, "creation_time": "2002-07-26T14:03:13Z", "is_private": false, "text": "Settings as invalid.\n\n\n    Manifest mf = new Manifest();\n    Manifest.Attribute attr = new Manifest.Attribute(\"Class-Path\"\n    , \"a.jar b.jar c.jar d.jar e.jar f.jar g.jar h.jar i.jar j.jar k.jar l.jar \nm.jar n.jar o.jar\"\n    );\n    mf.addConfiguredAttribute(attr);\n    PrintWriter wri = new PrintWriter( new FileWriter(\"1.mf\") );\n    mf.write( wri );\n    wri.close();\n\n    java.util.jar.Manifest mf2 = new java.util.jar.Manifest(new FileInputStream\n(\"1.mf\"));\n    System.out.println(\"Class-Path: \" + mf2.getMainAttributes().getValue(\"Class-\nPath\") );\n    mf2.write( new FileOutputStream(\"2.mf\") );\n\nIn both case (Ant and JDK) it writes:\n\nClass-Path: a.jar b.jar c.jar d.jar e.jar f.jar g.jar h.jar i.jar j.ja\n r k.jar l.jar m.jar n.jar o.jar\n\nAnd the Class-Path line is read perfectly so the error is not here but in your \napp server. If it can satisfy you, you're not alone as Weblogic will crash if \nthere is a jar in the classpath entry that do not exist.\n\n"}, {"count": 5, "tags": [], "creator": "kisst2@freemail.hu", "attachment_id": null, "is_private": false, "id": 20255, "time": "2002-07-26T14:07:46Z", "bug_id": 11121, "creation_time": "2002-07-26T14:07:46Z", "text": "Well...if I have the manifest generated by ant with a Class-Path line, which is \nover 72 chars long, I will get line-breaks.\nThis breaks WL.\nIf I edit it manually, afterwards, to have it in a single line, it works."}, {"count": 6, "attachment_id": null, "creator": "ddevienne@lgc.com", "is_private": false, "id": 20256, "time": "2002-07-26T14:11:43Z", "bug_id": 11121, "creation_time": "2002-07-26T14:11:43Z", "tags": [], "text": "Well, the jar spec still says that lines in the Manifest are limited to 72 \ncharacters, so the Class-Path: entry shown should wrap on a second line, which \nmust start with a space (indicating line continuation). Wrapping can happen in \nthe middle of words, and things work fine.\n\nThe approach I use is to define the Manifest by hand with\n\nClass-Path: %CLASSPATH%\n\nAnd perform the substitution are at build time. After substitution, one jar \nappears per line:\n\nClass-Path:\n ./lib/jar1\n ./lib/jar2\n\nAnd after being precessed by Ant/jar.exe, it appears as,\n\nClass-Path: ./lib/jar1 ./lib/jar2 ...\n\nwith proper wrapping in the middle of words if the Class-Path: line exceeds 72 \ncharacters (continues on next line starting with a space).\n\nThe only problem I see is if one classpath entry exceeds 71 characters (before \nbeing processed by Ant/jar.exe), but this should rarely happen, since the path \nare relative to the jar that contains the manifest defining the Class-Path.\n\nI hope this sheds a little light on the subject. --DD\n"}, {"count": 7, "tags": [], "bug_id": 11121, "attachment_id": null, "id": 20257, "time": "2002-07-26T14:17:12Z", "creator": "sbailliez@apache.org", "creation_time": "2002-07-26T14:17:12Z", "is_private": false, "text": "Tibor. If you Generate it via the JDK class and you will have the same thing.\nSo the specs are followed and your app server does not follow them.\n\nSreport this bug to your app. server vendor rather than asking us to add \nsomething that violates the specs. I think it's fair.\n\nBug invalid and closed I don't want 10 unecessary follow up."}, {"count": 8, "tags": [], "bug_id": 11121, "attachment_id": null, "id": 20263, "time": "2002-07-26T15:31:10Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2002-07-26T15:31:10Z", "is_private": false, "text": "I have to say that this issue of the 72 chars has been around for quite some \ntime. We have kept the hardline of (we do what the spec says and if you do not \nlike it, use someting else). I wonder if we should reconsider our stand on \nthis.\n\nIt is not only certain appServers, it is also any library that creates its own \nClassLoaders and missed this particular issue. Notice that the bae classes in \nJava do nothing on your behalf, so there is really quite of room outthere to \nhit this problem. Is it too much to ask to have an attribute:\n\n  useOutofSpecClasspathLongerThan72chars=true\n\nNotice that the Class-Path thing did not show until 1.2, with no real support \nfrom the JVM itself.\n"}]
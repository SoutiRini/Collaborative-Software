[{"attachment_id": null, "tags": [], "bug_id": 1082, "text": "o  Tomcat version 3.1.1\no  Redhat 7.0 with up2date on everything within a week or so.\no  Windows 2000 SP1\no  JDK 1.3\n\n1) I created a set of Java classes in a package, let's call it com.foo.bar.\nThere are the main classes, some exception classes, and a ListResourceBundle\nclass, FooListResourceBundle, for holding error messages used when an\nexception is thrown. All live in the same package, all class files in the same \ndirectory.\n\n2) The main classes in com.foo.bar load the resource bundle in a static\ninitializer as follows:\n\n/**\n*** Initialize error messages.\n**/\nstatic\n{\n  try\n  {\n    msgs =\n      java.util.ResourceBundle.getBundle(\"com.foo.bar.FooListResourceBundle\");\n  }\n  catch (Throwable t)\n  {\n    // Note that we can't throw our own exception here\n    // (not allowed in static initializers).\n    // See initializer() for where we DO throw the exception\n    // if this didn't load correctly.\n  }\n}\n\nAs per the comments, the initializer method, called by all constructors,\nsimply checks the msgs field for null, and throws an exception if it is so.\nThis is how we know the problem exists later on.\n\n3) Tested the library code using unit tests at the command line. Everything\nworks great. In other words, the resource bundle is loaded successfully (so it \nis NOT a package naming/spelling error), exceptions thrown get messages from \nthe resource bundle, etc. Command line tests work on both Windows 2000 and \nLinux.\n\n4) Published code to colleague who is doing actual servlet writing.\nColleague is developing under Windows 2000, running Tomcat there. He\ninstalled my code (more on that in a bit), wrote his servlets to call it,\ntested it. Everything worked great.\n\n5) Colleague published his code, along with mine, to QA. QA is running\nTomcat under Linux (the final product distribution will be released on\nLinux). Right away, we get the first error, which is the exception from my\nmain class that is thrown in the initializer method when it detects the\nresource bundle wasn't successfully loaded.\n\n6) Started poking around. I delivered the code to my colleague in both jar\nand class file forms, he has decided to install it for his servlet as\nclasses under WEB-INF/classes/com/foo/bar. The class loader is obviously\nfinding the main class from there (since that class is throwing a custom\nexception because it can't find the resource bundle), so why can't it load\nthe resource bundle class file, which is in the same package, from the same\nlocation?\n\n7) After much hacking and poking around, I figure out that I can get past\nthis if I create a properties file that has the appropriate contents in it,\nand place it under $TOMCAT_HOME/classes/com/foo/bar. Placing the resource \nbundle *class* file there doesn't work. Only the properties file works (as far \nas loading is concerned, but read on). See java.util.ResourceBundle JDK docs if \nyou don't know about being able to back a bundle with a properties file.\n\n8) So, I think \"that's weird\", but am happy - kind of. Because (a) I still\ndon't know WHY the class loader choked, and (b) the lack of problems lasts\nfor about a day. Then I get a new bug from QA. This one occurs when my main\nclass tries to throw an exception and tries to look up an error message from\nthe resource bundle (which is now backed by the properties file, remember).\nIn this case, the message is:\n\nError: 500 Location: /you/go Internal Servlet Error:\njava.lang.ClassFormatError: com/foo/bar/FooListResourceBundle (Illegal\nconstant pool index)\n\nArg!\n\n9) I do some more hacking around. Finally figure out that everything will\nwork great if I use the jar file, Foo.jar, and place it in WEB-INF/lib. I\nalso have to remove the existing class files from\nWEB-INF/classes/com/foo/bar, or otherwise the main class gets loaded from\nthere first, and we are back to the symptoms in #5.\n\nWhat were we doing wrong? Why can't the class loader load a resource bundle \nclass file, in the *same package*, from the *same location* from which it's \n*just loaded* the main class that is using the bundle? Why did it *work* in the \nfirst place on Tomcat under Windows 2000, and *not* under Linux, for the same \nrelease of Tomcat?\n\nI am confused, and would appreciate ANY pointers to documentation that says,\n\"Look, dummy, you're doing it wrong\", so that I might adopt my best Colonel\nFoghorn Leghorn voice and mutter, \"I see that I was mistaken.\" Otherwise,\ncan someone confirm that verily, this does seem to be a bug? We will be\nupgrading to a later release of Tomcat soon (release timeframe pressures\nkeep us from destabilizing the environment and doing so now), and if it is a\nbug, was it already known and has it been fixed?", "count": 0, "id": 1557, "time": "2001-03-22T15:20:53Z", "creator": "dullroar@home.com", "creation_time": "2001-03-22T15:20:53Z", "is_private": false}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "text": "Please update to at least 3.2.1 ( 3.3 is even better ). I don't think we'll\nfix 3.1.1, and this looks also like a JVM-specific problem.\nAre you sure you're not using kaffe ( it has a similar problem ) ? \n3.3 is using the standard URLClassLoader, it shouldn't have any problem.", "id": 1665, "time": "2001-03-31T14:02:19Z", "bug_id": 1082, "creation_time": "2001-03-31T14:02:19Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "dullroar@home.com", "is_private": false, "text": "Positive I am not using Kaffe - even have the startup script printing the \nversion out to the console (which is redirected to a log). I am using Sun's JDK \n1.3.", "id": 1689, "time": "2001-04-02T12:49:38Z", "bug_id": 1082, "creation_time": "2001-04-02T12:49:38Z", "attachment_id": null}]
[{"attachment_id": null, "tags": [], "creator": "sebb@apache.org", "is_private": false, "count": 0, "id": 126056, "time": "2009-04-07T16:36:50Z", "bug_id": 46985, "creation_time": "2009-04-07T16:36:50Z", "text": "coyote.http11.Http11Processor.process(Socket socket)\n...\n\n        int soTimeout = socket.getSoTimeout();\n        int oldSoTimeout = soTimeout;\n\n        int threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n                / endpoint.getMaxThreads();\n        if (threadRatio > 75) {\n            keepAliveLeft = 1;\n        }\n        \n        if (soTimeout != oldSoTimeout) {\n\nThe above condition will never be true. It looks like the code is trying to reset the timeout if it has not changed, but it will never do so.\n\nBoth the method and the class have a variable called \"socket\" which may be part of the problem - is the method trying to set the instance socket to have the same timeout as the parameter socket, or vice versa?\n\nThe socket parameter should be renamed.\n\nNote that the Javadoc appears to be completely wrong as well."}, {"count": 1, "tags": [], "bug_id": 46985, "text": "Thanks for the reminder. Cleaning up this was on my todo list post fixing bug 46666.\n\nI have fixed trunk and proposed the fix for 6.0.x", "id": 126088, "time": "2009-04-08T08:00:59Z", "creator": "markt@apache.org", "creation_time": "2009-04-08T08:00:59Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "For reference: Mark's fix in trunk is r763262\n\n(In reply to comment #0)\n> coyote.http11.Http11Processor.process(Socket socket)\n> ...\n> \n>         int soTimeout = socket.getSoTimeout();\n>         int oldSoTimeout = soTimeout;\n> \n>         int threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n>                 / endpoint.getMaxThreads();\n>         if (threadRatio > 75) {\n>             keepAliveLeft = 1;\n>         }\n> \n>         if (soTimeout != oldSoTimeout) {\n> \n> The above condition will never be true. It looks like the code is trying to\n> reset the timeout if it has not changed, but it will never do so.\n> \n\nThat \"if (soTimeout != oldSoTimeout) { .. }\" works in TC 5.5, because of some block of code that precedes it, but is dead in TC 6.0 because that preceding block is removed. \n\nYou can look at TC 5.5 sources, but as I was studying it through svn log, I will give a reference to annotated source of it at revision 398045:\n\nhttp://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/coyote/http11/Http11Processor.java?annotate=398045&limit_changes=0&pathrev=423920\n\nThe code was the following:\n\n751 : \t  \t  \t int soTimeout = socket.getSoTimeout(); \n752 : \t  \t  \t int oldSoTimeout = soTimeout;\n753 : \t  \t  \t\n754 : \tremm \t396579 \tint threadRatio = (endpoint.getCurrentThreadsBusy() * 100)\n755 : \tremm \t389146 \t/ endpoint.getMaxThreads();\n756 : \t  \t  \tif ((threadRatio > 33) && (threadRatio <= 66)) {\n757 : \t  \t  \tsoTimeout = soTimeout / 2;\n758 : \t  \t  \t} else if ((threadRatio > 66) && (threadRatio <= 90)) {\n759 : \t  \t  \tsoTimeout = soTimeout / 3;\n760 : \t  \t  \tkeepAliveLeft = 1;\n761 : \t  \t  \t} else if (threadRatio > 90) {\n762 : \t  \t  \tsoTimeout = soTimeout / 20;\n763 : \t  \t  \tkeepAliveLeft = 1;\n764 : \t  \t  \t}\n765 : \t  \t  \t\n766 : \t  \t  \tif (soTimeout != oldSoTimeout) {\n\nI will propose removal of the dead code in TC 6.0.\n\n> Both the method and the class have a variable called \"socket\" which may be part\n> of the problem - is the method trying to set the instance socket to have the\n> same timeout as the parameter socket, or vice versa?\n> \n> The socket parameter should be renamed.\n> \n\nNo error there, no need to rename.\n\nBoth are pointing to the same object. Also, you may note, that\nthis.socket is set back to null at the end of the method.\n\n> Note that the Javadoc appears to be completely wrong as well.\n\nOh, it says about input and output streams. Those are provided by the socket.", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 127128, "time": "2009-05-18T15:10:29Z", "bug_id": 46985, "creation_time": "2009-05-18T15:10:29Z", "tags": [], "attachment_id": null}, {"count": 3, "text": "Created attachment 23684\nPatch to correct Javadoc and remove dead code. It is for tc6.0.x.\n\nI will propose the patch for TC 6.0.\nFor record: this issue does not exist in 5.5.", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 127130, "time": "2009-05-18T15:25:19Z", "bug_id": 46985, "creation_time": "2009-05-18T15:25:19Z", "tags": [], "attachment_id": 23684}, {"attachment_id": null, "tags": [], "creator": "sebb@apache.org", "is_private": false, "count": 4, "id": 127132, "time": "2009-05-18T17:07:32Z", "bug_id": 46985, "creation_time": "2009-05-18T17:07:32Z", "text": "(In reply to comment #2)\n> That \"if (soTimeout != oldSoTimeout) { .. }\" works in TC 5.5, because of some\n> block of code that precedes it, but is dead in TC 6.0 because that preceding\n> block is removed. \n\nOK, I see - the condition did once mean something.\n \n> > Both the method and the class have a variable called \"socket\" which may be part\n> > of the problem - is the method trying to set the instance socket to have the\n> > same timeout as the parameter socket, or vice versa?\n> > \n> > The socket parameter should be renamed.\n> > \n> \n> No error there, no need to rename.\n\nNot an error, but it's very confusing to use the same name for a parameter and an instance variable.\n\nUsing the same name is just about OK in short ctors or one-line set() methods, but elsewhere it's not helpful.\n\n> Both are pointing to the same object. Also, you may note, that\n> this.socket is set back to null at the end of the method.\n\nHuh? The socket parameter may or may not be the same as the instance variable.\n\nI don't see either being set to null.\n\n> \n> > Note that the Javadoc appears to be completely wrong as well.\n> \n> Oh, it says about input and output streams. Those are provided by the socket.\n\nIndeed"}, {"count": 5, "text": "(In reply to comment #4)\n> \n> I don't see either being set to null.\n> \n\n    public void process(Socket socket)\n        throws IOException {\n(..)\n        // Setting up the I/O\n        this.socket = socket;\n        inputBuffer.setInputStream(socket.getInputStream());\n        outputBuffer.setOutputStream(socket.getOutputStream());\n\n(.....)\n\n        // Recycle\n        inputBuffer.recycle();\n        outputBuffer.recycle();\n        this.socket = null;\n        // Recycle ssl info\n        sslSupport = null;\n    }\n\nI slightly wonder why there is no try/finally...", "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 127133, "time": "2009-05-18T17:26:26Z", "bug_id": 46985, "creation_time": "2009-05-18T17:26:26Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 46985, "text": "This is fixed in 6.0.x and will be included in 6.0.21 onwards.", "id": 127426, "time": "2009-05-26T14:39:21Z", "creator": "markt@apache.org", "creation_time": "2009-05-26T14:39:21Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 1346, "text": "I am trying to find email addresses and substitute them with a link to an email\ncompose page.  However, when I try the substitution I get odd results- the\nsubstitute method accurately finds the email addresses but I don't have access\nto $1....  Oddly enough when I use the same code for making URL's links to a\npopup window containing the url content everything works ok.  I think the\nproblem may be in the ORO code.\n\n_______________________________________________________________________________\ncode and regexes\n_______________________________________________________________________________\ncode:\n*******************************************************************************\n\n    public static String PerlSubstituteTool(String reg_ex, int reg_ex_Flags,\n        String substitution, int interpolations, String input)\n        {\n        //fail safe -- if a regex doesn't work it might be set to\n        //empty string... test for that and if we don't have a regex skip\n        //alternately a flag could have an alpha character in it (causing\n        //a number format exception (before this is called) but that is\n        //kludgy\n        if(null == reg_ex || reg_ex.equals(\"\"))\n            {\n            //do nothing -- we'll just send back the input\n            }\n        else\n            {\n            try\n                {\n                String temp = null;\n                Perl5Compiler compiler = new Perl5Compiler();\n                Perl5Substitution sub = new Perl5Substitution(substitution);\n                Pattern pat = compiler.compile(reg_ex, reg_ex_Flags);\n                temp = Util.substitute(new Perl5Matcher(), pat, sub, input,\ninterpolations);\n                input = temp;\n                }\n            catch (MalformedPatternException mpe)\n                {\n                System.out.println(\"in catch MalformedPatternException\");\n                System.out.println(\"Exception is \"+mpe.getMessage());\n                }\n            }\n        return input;\n        }\n*******************************************************************************\nNote: these regexes are pulled in from LDAP so the String that is generated\n(by the time it gets pulled in by the Java code) is properly escaped\n\na regex that works (for URLS):\n*******************************************************************************\n\\b((ftp|http|gopher|mailto|news|nntp|telnet|wais|file|prospero|z39.50s|z39.50r|cid|mid|vemmi|service|imap|nfs|acap|rstp|tip|pop|data|dav|opaquelocktoken|sip|tel|fax|modem|ldap|afs|tn3270|mailserver):[\\w/#~:.?+=&@!\\-.:?\\-;!>]\n+? ) (?= [.:?\\-;!>]* [^\\w/#~:.?+=&@!\\-.:?\\-;!>] | $ )\n\n*******************************************************************************\na regex that properly finds its target but does not give me access to $1... once\nit is done (it is from the OReilly book \"Mastering Regular Expressions\"\n*******************************************************************************\n[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?: (?: [^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\x80-\\xff\\n\\015\"]* (?:\n\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )* \")[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?: \\.[\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?: [^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\x80-\\xff\\n\\015\"]* (?:\n\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )* \")[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*)* \\@[\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:[^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?:[^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*)*|(?: [^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\x80-\\xff\\n\\015\"]* (?:\n\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )*\n\")[^()<>\\@,;:\".\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]* (?: (?:\\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]*\n)*\\)|\"[^\\x80-\\xff\\n\\015\"]* (?: \\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )*\n\")[^()<>\\@,;:\".\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]* )*< [\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:\\@[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?:[^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?:[^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*)*(?: , [\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*\\@[\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:[^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?:[^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*)*)* :[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*)?(?: [^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\x80-\\xff\\n\\015\"]* (?:\n\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )* \")[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?: \\.[\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?: [^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\x80-\\xff\\n\\015\"]* (?:\n\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015\"]* )* \")[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*)* \\@[\\040\\t]* (?:\n\\([^\\x80-\\xff\\n\\015()]* (?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:[^ (\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]* (?:\n(?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]* (?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]*\n)*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]* )*(?:[^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff]+(?![^\n(\\040)<>\\@,;:\".\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:\n[^\\x80-\\xff\\n\\015\\[\\]]|\\[^\\x80-\\xff])* \\])[\\040\\t]* (?: \\([^\\x80-\\xff\\n\\015()]*\n(?: (?:\\[^\\x80-\\xff]|\\([^\\x80-\\xff\\n\\015()]*\n(?:\\[^\\x80-\\xff][^\\x80-\\xff\\n\\015()]* )*\\))[^\\x80-\\xff\\n\\015()]* )*\\)[\\040\\t]*\n)*)*>)", "id": 1875, "time": "2001-04-16T12:26:52Z", "creator": "dshriver@sharemedia.com", "creation_time": "2001-04-16T12:26:52Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 1346, "attachment_id": null, "id": 1904, "time": "2001-04-18T14:25:16Z", "creator": "dfs@apache.org", "creation_time": "2001-04-18T14:25:16Z", "is_private": false, "text": "This bug doesn't appear to be valid.  It looks like all of the parentheses in\nthe expression in question are non-capturing parentheses (e.g., (?: )), which\nwould explain why the matched groups are not accessible.  However, it is\nimportant to note that Perl 5.003 and the current Perl5Matcher implementation\nsave the last match of a parenthesized group even if the match is empty and\nthe previous match for that group was non-empty. For example (.)* would\nresult in $1 containing the empty string.  Later version of Perl changed this\nbehavior and returned the last non-empty match.  Eventually this newer\nbehavior will make it's way into jakarta-oro.\n\nThis bug should be kept open until the original reporter confirms that the\nnon-capturing parentheses were indeed the cause of the problem, rather than\nan actual bug.\n"}, {"attachment_id": null, "tags": [], "creator": "dfs@apache.org", "text": "Original reporter of bug has verified that the resolution was accurate.  There\nwere no capturing parentheses in the regular expression, which kept $1 from\nresolving in the substitution.", "count": 2, "id": 2150, "time": "2001-04-27T14:27:48Z", "bug_id": 1346, "creation_time": "2001-04-27T14:27:48Z", "is_private": false}]
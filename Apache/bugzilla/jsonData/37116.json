[{"count": 0, "tags": [], "creator": "andrea.gariboldi@e-force.org", "attachment_id": null, "is_private": false, "id": 81240, "time": "2005-10-17T14:41:05Z", "bug_id": 37116, "creation_time": "2005-10-17T14:41:05Z", "text": "Hi all,\n   i would like to submit this ugly but functional implementation of a renderer\nfor ESCPOS printers. With correct scale factor it can render against any ESCPOS \nprinter directly (output stream to the device):\n\n        ...\n        \n        Driver driver = new Driver();\n        OutputStream out= new FileOutputStream(\"/dev/usb/usbtm0\"); // the \nprinter device\n        OutputStream debug= new FileOutputStream(\"/tmp/escpos.txt\");\n        driver.setRenderer(new EscPosRenderer(284,new PrintWriter(debug)));\n        driver.setOutputStream(out);\n        driver.render(...);\n        out.close();\n\n        ...\n\nPlease let me know if you need more docs or info.\n\nAndrea.\n\n\n\n---------------Renderer Code----------------------\npackage eforce.fop.renderer;\n/**\n * @Author Andrea A. A. Gariboldi\n * */\nimport java.awt.image.Raster;\n\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport org.apache.fop.render.awt.AWTRenderer;\n\n/**\n * EscPosRenderer converts AWTRenderer output\n * to an escpos raster bit image command.\n */\npublic class EscPosRenderer extends AWTRenderer\n{\n  /**\n   * Very usefull debug of 0 1 bit maps for \n   * human beings. Expecially if you put in in\n   * a file and look at without wrap.\n   */\n  private PrintWriter debug;\n\n  public EscPosRenderer()\n  {\n    super(null);\n    this.debug= null;\n  }\n  \n  /**\n   * You will need scale factor to meet your printer\n   * resolution, example:\n   * \n   * EPSON TM-L90 (scaleFactor 284):\n   *  max printable horizontal line = 71mm = 568 dots\n   *  so make a FO document to print a table with solid\n   *  borthers 71mm wide, and find that your scale factor\n   *  is 284. Is not so simple to explain why, you better test\n   *  it, playing with scaleFactor and trying to have your\n   *  table printed as 71mm wide, or better looking at\n   *  debug file, have your table printed as 568 dots wide.\n   *  \n   */\n  public EscPosRenderer(double scaleFactor)\n  {\n    super(null);\n    this.setScaleFactor(scaleFactor);\n    this.debug= null;\n  }\n\n  public EscPosRenderer(double scaleFactor, PrintWriter debug)\n  {\n    super(null);\n    this.setScaleFactor(scaleFactor);\n    this.debug= debug;\n  }\n\n  public void stopRenderer(OutputStream out)\n  throws IOException\n  {\n    super.stopRenderer(out);\n    \n    Raster r= getLastRenderedPage().getData();\n    double maxY= r.getBounds().getMaxY();\n    double maxX= r.getBounds().getMaxX();\n    int h= new Double(r.getBounds().getHeight()).intValue();\n    int w= new Double(r.getBounds().getWidth()).intValue();\n    \n    /* convert to black & white image (very ugly) */  \n    char[][] imagePixels= new char[h][w];\n     \n    for (int y=(int)Math.round(r.getBounds().getMinY());y<maxY;y++)\n    {\n      for (int x=(int)Math.round(r.getBounds().getMinX());x<maxX;x++)\n      {\n         /* rgb values to 0 1 */\n         if (r.getSample(x,y,0)==255&&r.getSample(x,y,1)==255&&r.getSample\n(x,y,2)==255)\n           imagePixels[y][x]= '0';\n         else\n           imagePixels[y][x]= '1';\n         \n         d(imagePixels[y][x]);\n      }\n      dln();\n    }\n     \n    dln(\"----------------------\");\n\n    /* Escpos raster bit image is formed like this x=n*byte(8 bit) y=n*dots \n     * so we need to convert w from dots to bytes, each byte represents 8 \nhorizontal\n     * dots, next we fill the end of the line whit nulls (xcorrection).\n     * The result is an array on bytes to send to the printer.\n     * */\n    int paperw= new Double(Math.ceil(new Double(w).doubleValue()/8.0)).intValue\n();\n    int xcorrection= (paperw*8)-w;\n    byte[] image= new byte[paperw*h];\n    int cnt= 0,idx=0;\n    StringBuffer sb= new StringBuffer(8);\n\n    // so ugly     \n    for (int y=0;y<h;y++)\n    {\n       for (int x=0;x<w;x++)\n       {\n         if (++cnt==8)\n         {\n           sb.append(imagePixels[y][x]);\n           String strb= sb.toString();\n           d(strb);\n           int intb= Integer.parseInt(strb,2);\n           image[idx++]= (byte)chr(intb); //binary string to byte\n           sb.delete(0,8);\n           cnt=0;\n         }\n         else  \n           sb.append(imagePixels[y][x]);      \n       }\n       d(\"|\");\n       for (int c=0;c<xcorrection;c++) \n         if (++cnt==8)\n         {\n           sb.append('0');\n           String strb= sb.toString();\n           d(strb);\n           int intb= Integer.parseInt(strb,2);\n           image[idx++]= (byte)chr(intb); //binary string to byte\n           sb.delete(0,8);\n           cnt=0;\n         }\n         else  \n           sb.append('0'); //fill end of line with nulls\n\n       dln();\n    }\n     \n    printImage(0, paperw, h, image, out);\n     \n    if (debug!=null) {  debug.flush(); } \n  }\n  \n  /**\n   * Adpter for escpos raster bit image printing\n   */\n  private static void printImage(int m, int w, int h, byte[] data, OutputStream \nout)\n  throws IOException\n  {\n    int s=w*h,xH=1,xL=0,yH=1,yL=0,fix=255;\n    \n    if (data.length!=s) // if something strange stream!!\n      throw new RuntimeException(\"wrong data count: data.length-\n> \"+data.length+\" w*h: \"+s);\n     \n    if (w > fix)\n    {\n      xH= new Double(Math.floor((double)w/(double)fix)).intValue();\n      if (xH==0) xH=1;\n      xL= w-(xH*fix);\n    }\n    else\n    if (w < fix)\n    {\n      xH= 0;\n      xL= w;\n    }\n\n    if (h > fix)\n    {\n      yH= new Double(Math.floor((double)h/(double)fix)).intValue();\n      if (yH==0) yH=1;\n      yL= h-yH*fix;\n    }\n    else\n    if (h < fix)\n    {\n      yH= 0;\n      yL= new Double(Math.ceil(h)).intValue();\n    }\n     \n    int H= yL + yH * (fix+1),W= xL + xH * (fix+1),S= W*H;\n    \n    out.write(new byte[]{'\\35','v','0',(byte)chr(m)}); //cmd1\n    out.flush();\n    out.write(new byte[]{(byte)chr(xL),(byte)chr(xH),(byte)chr(yL),(byte)chr\n(yH)}); //cmd2\n    out.flush();\n    out.write(data); //data\n    out.flush();\n\n    byte[] surplus= new byte[S-data.length]; // data from strange escpos \nconversion functions\n                                             // actually useless\n    for (int i=0;i<surplus.length;i++) surplus[i]= (byte)chr(0);\n    \n    out.write(surplus); // actually useless data, that printer want!\n    out.flush();\n  }\n  \n  /**\n   * Stupid function to meet escpos samples,\n   * and to try make code more readable\n   */\n  private static char chr(int i) \n  {\n    return (char)i;\n  }\n  \n  private void d(char c)\n  {\n    if (debug!=null) debug.print(c);\n  }\n\n  private void d(String s)\n  {\n    if (debug!=null) debug.print(s);\n  }\n\n  private void dln()\n  {\n    if (debug!=null) debug.println();\n  }\n\n  private void dln(String s)\n  {\n    if (debug!=null) debug.println(s);\n  }\n\n}\n----------------------------------------------------------------"}, {"count": 1, "tags": [], "text": "Created attachment 16716\nJava code Esc Pos renderer", "is_private": false, "id": 81241, "creator": "andrea.gariboldi@e-force.org", "time": "2005-10-17T14:42:43Z", "bug_id": 37116, "creation_time": "2005-10-17T14:42:43Z", "attachment_id": 16716}, {"count": 2, "tags": [], "bug_id": 37116, "is_private": false, "text": "Andrea, thank you for this. I think support for these POS printers is\ninteresting, though I'm not sure this is the best approach to implement this. I\nthink you could create a much more universally usable thing if you took the\nbitmap conversion out of the renderer and into a separate package where you\nsimply take bitmap images that you convert for the POS printers. That way it\ncould easily be used for FOP Trunk, too. After all, we won't be able to include\nyour renderer in FOP as is, (1) because it's apparently written for FOP 0.20.5\nwhose development line has been frozen and (2) your code would need some\ntouch-up before we would include it (code style, package name must be\norg.apache.fop.*, no apache license header etc.).\n\nIf I were you, separate this code out into a universally usable component that\ncan convert bitmaps to output for POS printers and post that somewhere on the\nnet, for example as SourceForge project. We could then link to it from the FOP\nwebsite. WDYT?", "id": 81368, "time": "2005-10-19T10:19:53Z", "creator": "jeremias@apache.org", "creation_time": "2005-10-19T10:19:53Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 37116, "is_private": false, "count": 3, "id": 81610, "time": "2005-10-24T15:01:41Z", "creator": "andrea.gariboldi@e-force.org", "creation_time": "2005-10-24T15:01:41Z", "text": "uups.. 283 instead of 284 for TM-L90..."}, {"count": 4, "tags": [], "text": "Off course Jeremias, i'll doit as soon as i can. ", "attachment_id": null, "id": 81612, "creator": "andrea.gariboldi@e-force.org", "time": "2005-10-24T15:06:54Z", "bug_id": 37116, "creation_time": "2005-10-24T15:06:54Z", "is_private": false}, {"attachment_id": 16788, "tags": [], "bug_id": 37116, "is_private": false, "count": 5, "id": 81631, "time": "2005-10-24T16:25:58Z", "creator": "andrea.gariboldi@e-force.org", "creation_time": "2005-10-24T16:25:58Z", "text": "Created attachment 16788\nescposrenderer with apache header and package\n\n1) modified package\n2) added apache header\n\ni'll clean it for newer fop versions.."}, {"count": 6, "tags": [], "bug_id": 37116, "attachment_id": null, "id": 81635, "time": "2005-10-24T16:53:52Z", "creator": "andrea.gariboldi@e-force.org", "creation_time": "2005-10-24T16:53:52Z", "is_private": false, "text": "(In reply to comment #2)\n> Andrea, thank you for this. I think support for these POS printers is\n> interesting, though I'm not sure this is the best approach to implement this. I\n> think you could create a much more universally usable thing if you took the\n> bitmap conversion out of the renderer and into a separate package where you\n> simply take bitmap images that you convert for the POS printers. That way it\n> could easily be used for FOP Trunk, too. \n\nYes, but is really useless without FOP. Those printers are almost used to print\nreceipts and invoices, with near to 0 support for advanced imaging, so this will\nbe used almost to line up text on preprinted forms, and i think it is a very\neasy way to do it. \n\n> After all, we won't be able to include\n> your renderer in FOP as is, (1) because it's apparently written for FOP 0.20.5\n> whose development line has been frozen and (2) your code would need some\n> touch-up before we would include it (code style, package name must be\n> org.apache.fop.*, no apache license header etc.).\n\nI posted it with package and header, but is there a doc with coding style infos\nthat i can use to touch-up the code? Which branch i should use?\n\n> \n> If I were you, separate this code out into a universally usable component that\n> can convert bitmaps to output for POS printers and post that somewhere on the\n> net, for example as SourceForge project. We could then link to it from the FOP\n> website. WDYT?\n\nAs i say i think it is really useless alone.\n\nThanks\nAndrea"}, {"count": 7, "tags": [], "bug_id": 37116, "attachment_id": null, "id": 81665, "time": "2005-10-24T22:01:11Z", "creator": "jeremias@apache.org", "creation_time": "2005-10-24T22:01:11Z", "is_private": false, "text": "(In reply to comment #6)\n> (In reply to comment #2)\n> > Andrea, thank you for this. I think support for these POS printers is\n> > interesting, though I'm not sure this is the best approach to implement this. I\n> > think you could create a much more universally usable thing if you took the\n> > bitmap conversion out of the renderer and into a separate package where you\n> > simply take bitmap images that you convert for the POS printers. That way it\n> > could easily be used for FOP Trunk, too. \n> \n> Yes, but is really useless without FOP. Those printers are almost used to print\n> receipts and invoices, with near to 0 support for advanced imaging, so this will\n> be used almost to line up text on preprinted forms, and i think it is a very\n> easy way to do it. \n\nIt may be useless without FOP in your case, but some people might actually want\nto create the receipts with SVG/Batik instead of XSL-FO/FOP. I simply think you\nrestrict your code too quickly to a certain use case while it could actually be\nused in a much wider area.\n\n> > After all, we won't be able to include\n> > your renderer in FOP as is, (1) because it's apparently written for FOP 0.20.5\n> > whose development line has been frozen and (2) your code would need some\n> > touch-up before we would include it (code style, package name must be\n> > org.apache.fop.*, no apache license header etc.).\n> \n> I posted it with package and header, but is there a doc with coding style infos\n> that i can use to touch-up the code? \n\nOur code conventions: http://xmlgraphics.apache.org/fop/dev/conventions.html\nAnd you can take the existing code as an example.\n\n> Which branch i should use?\n\nNo branch. Use the trunk: http://svn.apache.org/repos/asf/xmlgraphics/fop/trunk/\n\nBTW, the license header needs to be the one from the Apache License v2.0, not 1.1.\n\n> > \n> > If I were you, separate this code out into a universally usable component that\n> > can convert bitmaps to output for POS printers and post that somewhere on the\n> > net, for example as SourceForge project. We could then link to it from the FOP\n> > website. WDYT?\n> \n> As i say i think it is really useless alone.\n\nAnd I disagree. :-)"}, {"count": 8, "tags": [], "text": "Created attachment 16808\ncoding style touced-up", "is_private": false, "id": 81714, "creator": "andrea.gariboldi@e-force.org", "time": "2005-10-25T16:05:16Z", "bug_id": 37116, "creation_time": "2005-10-25T16:05:16Z", "attachment_id": 16808}, {"attachment_id": null, "tags": [], "bug_id": 37116, "is_private": false, "count": 9, "id": 81717, "time": "2005-10-25T16:35:38Z", "creator": "andrea.gariboldi@e-force.org", "creation_time": "2005-10-25T16:35:38Z", "text": "Probably you are right, there may be someone somewhere that wants to print\ninvoices with Vectorial Graphics or whatever, but writing a good java library to\nsupport escpos printers needs time, writing a FOP Renderer to easly print a page\nis a starting point...\n\nI've tyde up the code, and recoded for the trunk you posted me out.\n\nAndrea\n\n(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #2)\n> > > Andrea, thank you for this. I think support for these POS printers is\n> > > interesting, though I'm not sure this is the best approach to implement\nthis. I\n> > > think you could create a much more universally usable thing if you took the\n> > > bitmap conversion out of the renderer and into a separate package where you\n> > > simply take bitmap images that you convert for the POS printers. That way it\n> > > could easily be used for FOP Trunk, too. \n> > \n> > Yes, but is really useless without FOP. Those printers are almost used to print\n> > receipts and invoices, with near to 0 support for advanced imaging, so this will\n> > be used almost to line up text on preprinted forms, and i think it is a very\n> > easy way to do it. \n> \n> It may be useless without FOP in your case, but some people might actually want\n> to create the receipts with SVG/Batik instead of XSL-FO/FOP. I simply think you\n> restrict your code too quickly to a certain use case while it could actually be\n> used in a much wider area.\n> \n> > > After all, we won't be able to include\n> > > your renderer in FOP as is, (1) because it's apparently written for FOP 0.20.5\n> > > whose development line has been frozen and (2) your code would need some\n> > > touch-up before we would include it (code style, package name must be\n> > > org.apache.fop.*, no apache license header etc.).\n> > \n> > I posted it with package and header, but is there a doc with coding style infos\n> > that i can use to touch-up the code? \n> \n> Our code conventions: http://xmlgraphics.apache.org/fop/dev/conventions.html\n> And you can take the existing code as an example.\n> \n> > Which branch i should use?\n> \n> No branch. Use the trunk: http://svn.apache.org/repos/asf/xmlgraphics/fop/trunk/\n> \n> BTW, the license header needs to be the one from the Apache License v2.0, not 1.1.\n> \n> > > \n> > > If I were you, separate this code out into a universally usable component that\n> > > can convert bitmaps to output for POS printers and post that somewhere on the\n> > > net, for example as SourceForge project. We could then link to it from the FOP\n> > > website. WDYT?\n> > \n> > As i say i think it is really useless alone.\n> \n> And I disagree. :-)\n\n"}, {"count": 10, "tags": [], "text": "I'd like additional opinions from the FOP committers on this one.", "is_private": false, "id": 82274, "creator": "jeremias@apache.org", "time": "2005-11-09T10:36:44Z", "bug_id": 37116, "creation_time": "2005-11-09T10:36:44Z", "attachment_id": null}, {"count": 11, "tags": [], "text": "Well if the code follows the Project style conventions has the Apache header, \nand works for Trunk then the only Pro/cons I see to commiting this to the code \nbase are:\n\n+ An additional renderer which may be useful for some users - although I think \nits a very tiny set of users. XSL-FO is not the best tecnology for working \nwith ESCPOS Printers, but then XSL-FO is not the best technology for \ngenerating Text output either.\n- Support problems; users on the mailing list asking what it does, or \nreporting that it doesn't do X or Y.\n\nGiven the above it's a hard decision to make :)", "is_private": false, "id": 82282, "creator": "bowditch_chris@hotmail.com", "time": "2005-11-09T12:45:34Z", "bug_id": 37116, "creation_time": "2005-11-09T12:45:34Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 37116, "is_private": false, "count": 12, "id": 82291, "time": "2005-11-09T13:44:48Z", "creator": "manuel@apache.org", "creation_time": "2005-11-09T13:44:48Z", "text": "I have similar concerns as Chris.\n\nMaybe once we have the pluggable renderers this can be more easily solved by\n\na) People who develop non \"mainstream\" renderers can provide them as separate \njars and house them on SourceForge or similar environments\n\nb) The FOP project itself could have an area called \"unsupported\" for this type \nof additions to FOP\n\nc) XMLGraphics could provide an \"incubator\" type environment for it\n\nIt seems what I am saying is that we should encourage and support expansion / \nextension of FOP by possibly providing some infrastructure for it but not \nnecessarily by adding everything into the core code base."}, {"count": 13, "tags": [], "text": "May i suggest (In reply to comment #11)\n> Well if the code follows the Project style conventions has the Apache header, \n> and works for Trunk then the only Pro/cons I see to commiting this to the code \n> base are:\n> \n> + An additional renderer which may be useful for some users - although I think \n> its a very tiny set of users. XSL-FO is not the best tecnology for working \n> with ESCPOS Printers, but then XSL-FO is not the best technology for \n> generating Text output either.\n\nIts true. But what if your printer supports only two fonts? This renderer \nrender \"eye visible text\" but it is really an image with gliphs for characters\nfrom any fop supported font, and XSL-FO lets you align things on a preprinted\nform simply with a ruler, millimeter by millimeter an not with \\n \\r \\something.\n\n> - Support problems; users on the mailing list asking what it does, or \n> reporting that it doesn't do X or Y.\n> \n> Given the above it's a hard decision to make :)\n\nJust trying to explain.\n\nAndrea\n", "attachment_id": null, "id": 82303, "creator": "andrea.gariboldi@e-force.org", "time": "2005-11-09T15:07:46Z", "bug_id": 37116, "creation_time": "2005-11-09T15:07:46Z", "is_private": false}, {"count": 14, "attachment_id": null, "creator": "gadams@apache.org", "is_private": false, "id": 157121, "time": "2012-04-03T21:02:28Z", "bug_id": 37116, "creation_time": "2012-04-03T21:02:28Z", "tags": [], "text": "lack of consensus to patch"}, {"count": 15, "tags": [], "bug_id": 37116, "is_private": false, "text": "batch transition resolved+wontfix to closed+wontfix", "id": 158550, "time": "2012-04-30T00:14:39Z", "creator": "gadams@apache.org", "creation_time": "2012-04-30T00:14:39Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "batch transition resolved+wontfix to closed+wontfix; if you believe this remains a bug and can demonstrate it with appropriate input FO file and output PDF file (as applicable), then you may reopen", "attachment_id": null, "id": 158595, "creation_time": "2012-04-30T00:17:08Z", "time": "2012-04-30T00:17:08Z", "creator": "gadams@apache.org", "bug_id": 37116, "is_private": false}]
[{"text": "Hi\n \n ...I've tried to modify AccessInterceptor in order to use FORM\n authentication WITHOUT enabling cookies.\n The appended code stays between //HERE IS THE DIFFERENCE & // SOFTWIN: THE\n DIFFERENCE ENDS HERE. Unfortunately, I didn't succeed in copiling it. Could\n you take a look and  eventually send me back a \"fixed\" Tomcat?\n \n  ...\n // SOFTWIN: HERE IS THE DIFFERENCE\n  boolean noCookies=false;\n \n  public void setNoCookies(boolean noCookies) {\n         this.noCookies = noCookies;\n  }\n // SOFTWIN: THE DIFFERENCE ENDS HERE\n  ...\n  class FormAuthHandler extends ServletWrapper {\n\n     FormAuthHandler() {\n         initialized=true;\n         internal=true;\n         name=\"tomcat.formAuthHandler\";\n     }\n \n     public void doService(Request req, Response res)\n         throws Exception\n     {\n         Context ctx=req.getContext();\n \n         HttpSession session=req.getSession( false );\n         if( session == null ) {\n         }\n \n         String page=ctx.getFormLoginPage();\n         String errorPage=ctx.getFormErrorPage();\n         // assert errorPage!=null ( AccessInterceptor will check\n         // that and enable form login only if everything is ok\n \n         session=req.getSession( true );\n         String username=(String)session.getAttribute( \"j_username\" );\n \n         if( debug>0) log( \"Username = \" + username);\n         if( username != null ) {\n             // 401 with existing j_username - that means wrong credentials.\n             // Next time we'll have a fresh start\n             session.removeAttribute( \"j_username\");\n             session.removeAttribute( \"j_password\");\n             req.setAttribute(\"javax.servlet.error.message\",\n                              errorPage );\n             contextM.handleStatus( req, res, 302 ); // redirect\n             return;\n         }\n \n     String originalLocation = req.getRequestURI();\n \n // SOFTWIN: HERE IS THE DIFFERENCE\n         if (noCookies)\n         {\n                 originalLocation+=\"jsessionid=\"+session.getId();\n         }\n // SOFTWIN: THE DIFFERENCE ENDS HERE\n \n         if (req.getQueryString() != null)\n             originalLocation += \"?\" + req.getQueryString();\n \n         session.setAttribute( \"tomcat.auth.originalLocation\",\n                               originalLocation);\n         if( debug > 0 )\n             log(\"Redirect1: \" + page  + \" originalUri=\" + req.getRequestURI());\n \n         req.setAttribute(\"javax.servlet.error.message\",\n                          page );\n         contextM.handleStatus( req, res, 302 ); // redirect\n         return;\n     }\n }\nHi\n \n ...I've tried to modify AccessInterceptor in order to use FORM\n authentication WITHOUT enabling cookies.\n The appended code stays between //HERE IS THE DIFFERENCE & // SOFTWIN: THE\n DIFFERENCE ENDS HERE. Unfortunately, I didn't succeed in copiling it. Could\n you take a look and  eventually send me back a \"fixed\" Tomcat?\n \n  ...\n // SOFTWIN: HERE IS THE DIFFERENCE\n  boolean noCookies=false;\n \n  public void setNoCookies(boolean noCookies) {\n         this.noCookies = noCookies;\n  }\n // SOFTWIN: THE DIFFERENCE ENDS HERE\n  ...\n  class FormAuthHandler extends ServletWrapper {\n\n     FormAuthHandler() {\n         initialized=true;\n         internal=true;\n         name=\"tomcat.formAuthHandler\";\n     }\n \n     public void doService(Request req, Response res)\n         throws Exception\n     {\n         Context ctx=req.getContext();\n \n         HttpSession session=req.getSession( false );\n         if( session == null ) {\n         }\n \n         String page=ctx.getFormLoginPage();\n         String errorPage=ctx.getFormErrorPage();\n         // assert errorPage!=null ( AccessInterceptor will check\n         // that and enable form login only if everything is ok\n \n         session=req.getSession( true );\n         String username=(String)session.getAttribute( \"j_username\" );\n \n         if( debug>0) log( \"Username = \" + username);\n         if( username != null ) {\n             // 401 with existing j_username - that means wrong credentials.\n             // Next time we'll have a fresh start\n             session.removeAttribute( \"j_username\");\n             session.removeAttribute( \"j_password\");\n             req.setAttribute(\"javax.servlet.error.message\",\n                              errorPage );\n             contextM.handleStatus( req, res, 302 ); // redirect\n             return;\n         }\n \n     String originalLocation = req.getRequestURI();\n \n // SOFTWIN: HERE IS THE DIFFERENCE\n         if (noCookies)\n         {\n                 originalLocation+=\"jsessionid=\"+session.getId();\n         }\n // SOFTWIN: THE DIFFERENCE ENDS HERE\n \n         if (req.getQueryString() != null)\n             originalLocation += \"?\" + req.getQueryString();\n \n         session.setAttribute( \"tomcat.auth.originalLocation\",\n                               originalLocation);\n         if( debug > 0 )\n             log(\"Redirect1: \" + page  + \" originalUri=\" + req.getRequestURI());\n \n         req.setAttribute(\"javax.servlet.error.message\",\n                          page );\n         contextM.handleStatus( req, res, 302 ); // redirect\n         return;\n     }\n }", "tags": [], "bug_id": 539, "attachment_id": null, "count": 0, "id": 601, "time": "2001-02-07T00:53:42Z", "creator": "dcernahoschi@softwin.ro", "creation_time": "2001-02-07T00:53:42Z", "is_private": false}, {"count": 1, "tags": [], "creator": "nacho@apache.org", "attachment_id": null, "is_private": false, "id": 1134, "time": "2001-03-09T14:58:03Z", "bug_id": 539, "creation_time": "2001-03-09T14:58:03Z", "text": "Fixed on Tomcat 3.3 "}]
[{"count": 0, "tags": [], "creator": "tallison@mitre.org", "attachment_id": 34955, "text": "Created attachment 34955\ntriggering doc from govdocs1\n\nIn our regression corpus, we have a few handfuls of cases of this stack trace:\norg.apache.poi.hssf.record.RecordFormatException: Expected to find a ContinueRecord in order to read remaining 1 of 51 chars\n    at org.apache.poi.hssf.record.RecordInputStream.readStringCommon(RecordInputStream.java:404)\n    at org.apache.poi.hssf.record.RecordInputStream.readCompressedUnicode(RecordInputStream.java:363)\n    at org.apache.poi.hssf.record.FormatRecord.<init>(FormatRecord.java:57)\n    at sun.reflect.GeneratedConstructorAccessor4.newInstance(Unknown Source)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.apache.poi.hssf.record.RecordFactory$ReflectionConstructorRecordCreator.create(RecordFactory.java:84)\n    at org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:345)\n    at org.apache.poi.hssf.record.RecordFactoryInputStream.readNextRecord(RecordFactoryInputStream.java:307)\n    at org.apache.poi.hssf.record.RecordFactoryInputStream.nextRecord(RecordFactoryInputStream.java:273)\n    at org.apache.poi.hssf.eventusermodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:175)\n    at org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:136)\n\nIn the file I examined, it looked like the record length is correct, but that the XLUnicodeString's length is off by one, and there is actually no continue record.\n\nExcel is able to open this file without complaint.\n\nI'm attaching a triggering file from govdocs1.", "id": 198553, "time": "2017-04-26T20:21:24Z", "bug_id": 61045, "creation_time": "2017-04-26T20:21:24Z", "is_private": false}, {"count": 1, "tags": [], "creator": "tallison@mitre.org", "attachment_id": null, "text": "Offending 50 (not 51!) characters:\n_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)\n\nThis is the same as the built-in (without escapes?):\n_($* #,##0_);_($* (#,##0);_($* \"-\"_);_(@_)\n\n\nThe longest built-in custom format in my Excel is:\n_($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\n\nwhich coincidentally has 50 characters.\n\nI wonder if we're hitting a built in limitation on format size?\n\nWhen I re-save the file, I get the proper 50 character length for the string:\n2a 00 32 00 00\n\ninstead of the earlier 2a 00 33 00 00", "id": 198554, "time": "2017-04-26T20:44:53Z", "bug_id": 61045, "creation_time": "2017-04-26T20:44:53Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61045, "attachment_id": null, "id": 198561, "time": "2017-04-26T21:58:38Z", "creator": "apache@gagravarr.org", "creation_time": "2017-04-26T21:58:38Z", "is_private": false, "text": "An easy way to make the format string longer is to add colours, eg add [Red] to part of them. (Example at https://support.office.com/en-us/article/Format-negative-percentages-to-make-them-easy-to-find-d86b3d58-1cb4-40b3-a43b-8e1dae822112 ). Maybe try adding something like that to + / - / 0 rules to push the size out, and see if there's really a 50 limit or not?"}, {"count": 3, "tags": [], "bug_id": 61045, "attachment_id": null, "id": 198568, "time": "2017-04-27T15:21:02Z", "creator": "tallison@mitre.org", "creation_time": "2017-04-27T15:21:02Z", "is_private": false, "text": "Thank you, Nick.  It turns out that there isn't a hard limit of 50.  Adding [Red] can make for a format string > 50.\n\nIn our regression corpus, there are 13 examples of requested 51, there are only 50 bytes available; and there's one example from TIKA-2154 that shows some even greater, um, flexibility in RecordFormat.\n\nIf we add a custom readStringCommon to RecordFormat, all works[1]\n\n\n    private String readStringCommon(RecordInputStream ris, int requestedLength, boolean pIsCompressedEncoding) {\n        // Sanity check to detect garbage string lengths\n        if (requestedLength < 0 || requestedLength > 0x100000) { // 16 million chars?\n            throw new IllegalArgumentException(\"Bad requested string length (\" + requestedLength + \")\");\n        }\n        char[] buf = null;\n        boolean isCompressedEncoding = pIsCompressedEncoding;\n        int availableChars = isCompressedEncoding ? ris.remaining() : ris.remaining() / LittleEndianConsts.SHORT_SIZE;\n        //everything worked out.  Great!\n        int remaining = ris.remaining();\n        if (requestedLength == availableChars) {\n            buf = new char[requestedLength];\n        } else {\n            //sometimes in older Excel 97 .xls files,\n            //the requested length is wrong.\n            //Read all available characters.\n            buf = new char[availableChars];\n        }\n        for (int i = 0; i < buf.length; i++) {\n            char ch;\n            if (isCompressedEncoding) {\n                ch = (char) ris.readUByte();\n            } else {\n                ch = (char) ris.readShort();\n            }\n            buf[i] = ch;\n        }\n\n        //TIKA-2154's file shows that even in a unicode string\n        //there can be a remaining byte (without proper final '00')\n        //that should be read as a byte\n        if (ris.available() == 1) {\n            char[] tmp = new char[buf.length+1];\n            System.arraycopy(buf, 0, tmp, 0, buf.length);\n            tmp[buf.length] = (char)ris.readUByte();\n            buf = tmp;\n        }\n        String ret = new String(buf);\n\n        //swallow what's left\n        while (ris.available() > 0) {\n            ris.readByte();\n        }\n        return new String(buf);\n    }\n\n[1]  Well, not quite all, turns out that a DimensionsRecord can have an extra short in these files, too...argh..."}, {"count": 4, "tags": [], "creator": "tallison@mitre.org", "text": "If I added logging to warn that things have gone wonky in FormatRecord, are we willing to add this special handling code to deal with these non-standard files that Excel is able to read without complaint?", "id": 198569, "time": "2017-04-27T15:22:52Z", "bug_id": 61045, "creation_time": "2017-04-27T15:22:52Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 61045, "attachment_id": null, "id": 199298, "time": "2017-06-20T18:12:57Z", "creator": "tallison@mitre.org", "creation_time": "2017-06-20T18:12:57Z", "is_private": false, "text": "No objections were raised, I fixed this in r1799360"}]
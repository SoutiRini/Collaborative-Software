[{"count": 0, "tags": [], "text": "There is a specific warning that I was expecting after a flawed SQL statement \nwas executed but Ant executes the statement and reports \"1 of 1 SQL statements \nexecuted successfully\".   \n\nA java stub that tests the same query gets:\nSQL Warning:\nColumn 'col1' in group statement is ambiguous\nANSI-92 SQL State: 23000\nVendor Error Code: 1052\n\nThis is with MySQL Server 5.0.22, with MySQL Connector/J v5.0.5.\n\n$ msyql -uroot -p\n\nmysql> create schema test;\nmysql> create table test.x (id int);\nmysql> create table test.y (id int, col1 varchar(10));\nmysql> quit;\n\n# Do not forget to set classpath to include mysql-connector jar \n# \n\n$ javac JDBCTestErr1052.java\n$ java JDBCTestErr1052\n\nquery:select 'test' as col1 from test.x inner join test.y on (y.id = 1) group \nby col1\n\nSQL Warning:\nColumn 'col1' in group statement is ambiguous\nANSI-92 SQL State: 23000\nVendor Error Code: 1052\n\n$ cat JDBCTestErr1052.java\nimport java.sql.*;\n\npublic class JDBCTestErr1052 {\n    private static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";\n    private static final String JDBC_URL    = \"jdbc:mysql://localhost/\";\n    private static final String JDBC_USER   = \"root\";\n    private static final String JDBC_PASS   = \"blah\";\n\n    private static final String query =\n     \"select 'test' as col1 from test.x inner join test.y on (y.id = 1) group \nby col1\";\n\n    public static void printWarnings(SQLWarning warn) {\n      while (warn != null) {\n        System.out.println(\"\\nSQL Warning:\");\n        System.out.println(warn.getMessage(  ));\n        System.out.println(\"ANSI-92 SQL State: \" + warn.getSQLState(  ));\n        System.out.println(\"Vendor Error Code: \" + warn.getErrorCode(  ));\n        warn = warn.getNextWarning(  );\n      }\n    }\n\n    public static void main(String[] args) throws Throwable {\n        System.out.println(\"query:\"+query);\n\n        Class.forName(JDBC_DRIVER).newInstance();\n        Connection conn = \nDriverManager.getConnection(JDBC_URL,JDBC_USER,JDBC_PASS);\n\n        try {\n            Statement st = conn.createStatement();\n            ResultSet rs = st.executeQuery(query);\n\n            printWarnings(st.getWarnings());\n            printWarnings(rs.getWarnings());\n\n            rs.close();\n            st.close();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}", "is_private": false, "bug_id": 41836, "id": 100361, "time": "2007-03-13T16:16:55Z", "creator": "apache@digicoast.com", "creation_time": "2007-03-13T16:16:55Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "I think the problem here is that <sql> on cares about errors; it doesnt look for\nand print warnings. We could correct this in two ways\n\n1. log the warnings at INFO or WARN\n2. add a failOnWarning attribute to trigger behaviour on warnings\n\nWould this work?\n\nAs an aside, we have zero unit tests against mysql, but as I've been automating\ndeployment of mysql at work, I may know how we could do this, though the test\nsetup would be tricky indeed. We'd need JMX, the (GPL) Mysql JMX connector, and\nSmartFrog, plus the configuration info for the target test system(s), and we'd\nneed to get smartfrog to run an antunit build file. Much, much easier to test\nagainst HSQLDB instead.", "attachment_id": null, "bug_id": 41836, "id": 100377, "time": "2007-03-14T04:16:25Z", "creator": "stevel@apache.org", "creation_time": "2007-03-14T04:16:25Z", "is_private": false}, {"count": 2, "tags": [], "creator": "apache@digicoast.com", "attachment_id": null, "is_private": false, "id": 100398, "time": "2007-03-14T15:22:20Z", "bug_id": 41836, "creation_time": "2007-03-14T15:22:20Z", "text": "> it doesnt look for and print warnings.\n\nI see.   Since Ant was displaying data truncate warnings as errors I was \nassuming it was already behaving as if there was a \"failOnWarning\".  But what \nappears to actually be happening is that MySQL jdbc Connector/J already \nescalates these types of MySQL warnings into JDBC errors.\n\nWhen I add jdbcCompliantTruncation=false to the jdbc connection string (e.g., \n\"jdbc:mysql://localhost/?jdbcCompliantTruncation=false)\" and issue a statement \nthat causes a MySQL Warning, I now get a warning in Java (versus an exception \nwhen jdbcCompliantTruncation=true), but Ant does not show the warning at all -- \nwhich is the behavior you described.\n\n> 1. log the warnings at INFO or WARN\n> 2. add a failOnWarning attribute to trigger behaviour on warnings\n> Would this work?\n\nYes, those would solve the problem for me."}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "showWarnings attribute was added with svn revision 675692", "count": 3, "id": 118563, "time": "2008-07-11T07:26:49Z", "bug_id": 41836, "creation_time": "2008-07-11T07:26:49Z", "is_private": false}, {"count": 4, "tags": [], "text": "treatWarningsAsErrors is in svn revision 675968.\n\nThis allows one to fine tune the results by additionally using onerror.", "is_private": false, "bug_id": 41836, "id": 118564, "time": "2008-07-11T07:41:56Z", "creator": "bodewig@apache.org", "creation_time": "2008-07-11T07:41:56Z", "attachment_id": null}]
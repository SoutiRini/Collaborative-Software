[{"count": 0, "tags": [], "text": "apache-2.0.39 hangs after some hours of running. When that happens, accessing a \nweb page takes forever but the httpd processes seem to be still running on the \nmachine and the command \"top\" showes no problem in the system performance.\n\nTwo machines are running apache2. One has the problem but one doesn't. The \ndifference between the two machines are:\n1. The machine that has the problem has about 75 virtual hosts and is a live \nsystem where the other one has only two virtual hosts and has almost no users \nbecause the machine is a test machine.\n\n2. On the machine which has the problem, I have to increase the number of file \ndescriptors by issuing \"ulimit -n 256\" in order to start the service even when \nI only have about 75 virtual hosts.\n\nThe MPM configuration is:\n<IfModule prefork.c>\nStartServers         20\nMinSpareServers      10\nMaxSpareServers      60\nMaxClients           150\nMaxRequestsPerChild  5\n</IfModule>", "is_private": false, "bug_id": 10266, "id": 18626, "time": "2002-06-27T01:56:42Z", "creator": "ping.xiao@mq.edu.au", "creation_time": "2002-06-27T01:56:42Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 10266, "attachment_id": null, "is_private": false, "id": 19207, "time": "2002-07-09T21:57:11Z", "creator": "dcook@cookware.com", "creation_time": "2002-07-09T21:57:11Z", "text": "I too am seeing this error. We are running latest apache (2.0.39) on SUN running Solaris \n8.  APACHE runs fine for about 24 to 48 hours and then seems to hang. No load is visible  \n(e.g., there is not a high load situation) and everything appears normal. Connections to \nport 80 are accepted but any request itself simply hangs (e.g., telnet to port 80 and \nissuing a GET /  simply hangs).\n\nKilling and restarting apache solves the problem for about 24 to 48 hours."}, {"text": "We've had some other vague reports of this kind of behavior, but none of us \nhave seen it that I know of.  Can you please take one of the misbehaving child \nprocesses and attach to it with gdb and give us a backtrace?  An strace might \nbe helpful as well.  See http://httpd.apache.org/dev/debugging.html \n \nThanks! ", "tags": [], "bug_id": 10266, "is_private": false, "count": 2, "id": 19209, "time": "2002-07-09T22:06:12Z", "creator": "jwoolley@apache.org", "creation_time": "2002-07-09T22:06:12Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "dcook@cookware.com", "attachment_id": null, "text": "You just sent me email asking for a gdb of a misbehaving child.  I will attemt to do that the \nnext time we see one hang (probably 48 hours from now or so)... though it may be \ndifficult.  Here are a couple of other observations that might help:\n\nWe launch 3 apaches (two dedicated to particular clients, and one dedicated to many \nclients).  Of the 3, we ONLY see ONE of them consistantly hanging... that is, the one \ndedicated to many clients.  The other interesting thing about that particular apache is that \nit also handles our secure server - and since the rest never hang, it may be related to \nthat. In fact, when the one hangs, the other two are fine and keep responding (which is to \nbe expected).\n\nHowever, I will attempt to do a dump of a misbehaving child next time I see the problem.", "id": 19213, "time": "2002-07-09T22:40:28Z", "bug_id": 10266, "creation_time": "2002-07-09T22:40:28Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 10266, "attachment_id": null, "is_private": false, "id": 19476, "time": "2002-07-13T17:51:43Z", "creator": "aaron@apache.org", "creation_time": "2002-07-13T17:51:43Z", "text": "For those of you who are seeing this: what other non-standard configuration\ndirectives do you have? Anything with Proxy?\n\nAfter looking at the trace of a hung server, I see it's making a call to\napr_connect() from inside idle_server_maintenance. The server does\nthis to knock a child process out of a call to poll() so that it'll notice that\nit'd been signaled to die. I bet the frequency at which this occurs will most\nlikely be tied directly to that maintenance period.\n"}, {"count": 5, "tags": [], "text": "1 more question for you guys..\nare you using IP based virtual hosting or name based virtual hosting?\n\nalso .. can you try increasing the MaxRequestsPerChild.\nthis should probably be in the range of 100-1000 or 0 for prefork.\n\nMaxRequestsPerchild says 'serve X requests' and then die. serving only 5\nrequests and then killing itself is really a bad thing IMHO\n\n--ian\n(we have this set to zero with the worker MPM on production on a heavily loaded\nsite running a older version of apache 2 with none of these problems)", "attachment_id": null, "bug_id": 10266, "id": 19491, "time": "2002-07-14T02:55:22Z", "creator": "ianh@apache.org", "creation_time": "2002-07-14T02:55:22Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 10266, "attachment_id": null, "is_private": false, "id": 19645, "time": "2002-07-16T20:29:52Z", "creator": "dcook@cookware.com", "creation_time": "2002-07-16T20:29:52Z", "text": "I have sent my config file, concerning this bug, to a number of people who directly \nresponded to me from apache.org. However, I will also post the following comments to \nkeep this bug site up to date:\n\n1) I was wrong about it happening every 24 to 48 hours. The other day, to be preemptive \nsince I was leaving the office for a few hours (and didn't want it to hang), I killed and \nrestarted the servers. Within about 5 minutes or so, one of the three apaches hung (I \nsubmitted a ptrace to apache.org with the results).  So this is not a 24 to 48 hour thing, \ninstead, it appears that it can happen at any time.\n\n2) As per the comment about MaxRequestsPerChild... our config is, and always has \nbeen, set at 1000 for this. So I don't think that is involved.\n\n3) We have seen situations where it hangs, and then after sever hundred seconds, \nrecovers on it's own.\n\n4) It is hanging, not on the socket open, but on the fetch.  For example, when the server is \nin a hung state, I can telnet to port 80 on the server and it statis that I am connected and \nallows me to type. However, entering \"GET /\" followed by a return simply hangs. So this \nappears to be a hang on the read.\n\n5) Of the 3 apaches we run (on a single server) this only happens to one where we have \na lot of virtual hosts, and also have SSL running (don't know if there's a connection). The \nother two have never hung.\n\n6) For all those suggesting config file changes... please note that between the last \napache version and this, we have made no changes to the config (except for the SSL \nlogging directives which we merely commented out in the new config).  Thus, I feel that \nthis relates to a change in the apache code layer as opposed to something wrong in the \nconfig itself (not saying that a config change won't fix it, but something *broke* between \nthe last apache and this apache since our config didn't change).\n\nAloha!"}, {"count": 7, "tags": [], "bug_id": 10266, "attachment_id": null, "text": "What is your ulimit -a when apahe is started, and approx. how many vhosts\ndo you have?\n\nFWIW, Ian was refering to the original reporter's configuration, where\nMaxRequestsPerChild was set to \"5\" which means that a child process\nwill be shut down and a new respawned after only 5 requests to that child.\n(5 is way too low a value for this setting, something on the order of 1000\nis recommended, and set it to 0 for unlimited)", "id": 19690, "time": "2002-07-17T16:21:06Z", "creator": "aaron@apache.org", "creation_time": "2002-07-17T16:21:06Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 10266, "attachment_id": null, "id": 19692, "time": "2002-07-17T16:28:32Z", "creator": "dcook@cookware.com", "creation_time": "2002-07-17T16:28:32Z", "is_private": false, "text": "<i>Additional Comments From aaron -------\nWhat is your ulimit -a when apahe is started, and approx. how many vhosts\ndo you have?</i><p>\n\nAaron... my ulimit is:    ulimit -n 1024<p>\nThere are 105 virtual host records.\n"}, {"count": 9, "tags": [], "creator": "dcook@cookware.com", "attachment_id": null, "text": "**UPDATE**<p>\n\nThis last weekend (Saturday morning) I changed our apache configuration on the web \nserver that is hanging.  We removed the SSL servering and put it up on it's own httpd (so \nnow we are running a total of 4 httpd's on this machine).<p>\n\nThis morning we had another hang... it was in the same httpd as before - so we now \nknow that this is NOT related to SSL - since it was separated from the pack and did not \nhang when the other hung. So now, on a single hardware server, with four httpd's \nrunning (independent), we are still seeing the one with the most virtual hosts hanging, \nthe others with either SSL or minimal virtual host have never hung.<p>\n\nI may, over the next week, attempt to split the hanging httpd.conf down the middle \n(dividing in half what each is handling) and see if we can further isolate it.<p>\n\nWish you guys could reproduce this so we could fix it ;))<p>\n", "id": 20009, "time": "2002-07-22T20:42:51Z", "bug_id": 10266, "creation_time": "2002-07-22T20:42:51Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 10266, "attachment_id": null, "text": "I'll mention this, in case it is significant...\n\nWe have a program that remotely monitors to see if our servers are up. The program also \nmonitors apache.  It senses the apache hanging, but no matter what I do to the code, \nsetting a SIGNAL and an ALARM in all of my socket code (open, read/write and close all \nhave alarms around them) it MOSTLY will not catch it.  In other words, the call to read \nfrom the socket reads and an ALARM does not break it out of the read.\n\nAdditionally, in support of this, I also noted that a HUP to the parent process (apache) \ndoes not free it up.  Additionally, if I TELNET to port 80 of the hung process IP address, I \nget a connection from apache, but issuing a \"GET /\" causes a hang (as I previously \nreported)... HOWEVER, trying to break that hang with a CONTROL-C or other signal, \nOTHER than a kill, also refuses to free the hang.\n\nSo, it seems to me that other than a kill signal, when these are hanging other signals are \nalso refused (e.g., alarm, control-c (int)).", "id": 20097, "time": "2002-07-24T02:27:25Z", "creator": "dcook@cookware.com", "creation_time": "2002-07-24T02:27:25Z", "is_private": false}, {"count": 11, "tags": [], "text": "Ok...  The good news? We've fixed the problem on our end. The bad news? We have no \nidea what the problem actually is.\n\nMy last report to you stated that we separated SSL out of our config and put it in it's own \nseparate apache config (that meant we were running 4 total apaches). \n\nLast thursday we took the apache config that was still hanging and split it right down the \nmiddle, putting half the clients into a new (identical) configuration.  We also noted that a \ncouple of the configurations were sharing the same error/hit log files - which probably \nisn't the coolest thing - so we fixed that by making sure each config was writing to \ndifferent log files.\n\nSo this means we have 5 apaches.  2 that are specific to two clients., a 3rd which is SSL \nonly, and the remaining two which splits our remaining hundred-and-so virtuals down the \nmiddle.\n\nSince thursday we have seen no hanging situations whatsoever.  Since we were seeing \na hang ALWAYS within 48 hours, we suspect the problem is solved (for us at least).\n\nThe solution thus EITHER has to do with the fact that multiple configs were using some of \nthe same log files (unlikely) or that the one config had soooo many virtual hosts in it \n(likely).  Keeping in mind that we USED to run with just one config with all of them in it, \nunder a previous version of Apache, this thus seems to me to be something different in \nthe code base that changed when I split the remaining config down the middle (both \nconfig files are IDENTICAL in all respects exept the name of the log files and the actual \nvirtual hosts involved).\n\nFYI, the old config (prior to the split down the middle) had 119 virtual host statements in it. \nThe new split configs have 55 in one and 64 in the other.  With 119, we had the hang... \nwith 55 / 64 we do not experience the hang.\n\nThe ball is now in your court ;)\n\nAloha", "attachment_id": null, "bug_id": 10266, "id": 20428, "time": "2002-07-30T15:14:41Z", "creator": "dcook@cookware.com", "creation_time": "2002-07-30T15:14:41Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 10266, "attachment_id": null, "id": 20919, "time": "2002-08-12T15:40:31Z", "creator": "dcook@cookware.com", "creation_time": "2002-08-12T15:40:31Z", "is_private": false, "text": "Ok... now, we have been running the final split of apache that I discussed in my last \nposting for 2 weeks, no hang. However, two days ago it DID again hang (just one of the 5 \napaches we are running).  After restarting, they ran fine for 3 days and then another \nhang.\n\nSo... so far we are still experiencing it... and it still appears to be highly random as to\nwhen/why it occurs.\n"}, {"text": "Another clue to the problem:\n\nAfter I split the system into 5 apaches running, we have had no hangs for 2 weeks. Then, \nsaturday (as I previously reported) we had a single hang of one of the servers.  No \nproblems the rest of the weekend, then this last monday morning all he** broke loose.\n\nMonday Morning saw the system hang, and then go nuts basically. We would kill and \nrestart, and it would hang within 15 seconds, 15 minutes or about 1 hour - depending on \nthe restart (e.g., throughout the day it would hang, the longest it wouldn't hang was 1 \nhour).  Not only would the apache we had suspected of hanging hang, but also the other \nthat we split, that had not hung for 2 weeks.\n\nBy Monday night (10:30 PM Hawaii time, so pretty late) it was back to not hanging.\n\nSo what happened monday?  I posted a URL to slashdot.org column and we got a lot of \nhits because of it. I suspect GREATLY that the number of hits contributed to the hang. \nThe INTRESTING thing is that of the two apaches that were hanging, one had the \ndomain being slashdotted in it, the other didnt (btw, the server was able to server up the \npages with no problem... it was just a lot of hits but no major load or anything).\n\nSo... this leads me to believe that the problem is related to traffic.  It is possible that it is \nrelated to the restarting of a child after a maximum number of hits.\n\nI also discovered that my earlier reports were untrue... in this regard:\n\n1)  I reported earlier that HUPing the hung server did no good. This is not true. HUPping \nit appears to work. It takes up to a minute to free up - and sometimes requires a second \nHUP before it frees up. ONLY OCCASSIONALLY after two hup attempts would it not free \nup and we had to kill/restart.\n\n2) I reported eariler that my remote alarms that try to sense it would also hang on the \nopen and not recover. While this is true, it was due to me using SIGNAL() instead of \nSIGACTION() (signal() automatically sets the restart flag to tell the socket commands to \nretry the operation after the signal... thus it *appeared* to be always stuck).  So... I am \nable to sense it (we've since written a program to sense it on the server and automatically \nrehup or restart the server depending on what it sees).\n\n\nSo... all of this leads me to believe it's the rollover (restart) of the children.  Note that if one \nhangs, all other virtuals on the same server also hang (e.g., no virtual assigned to the \nstuck server will respond until we rehup it).\n\nThe only other possibility, I think, is some type of exploit that hangs apache in this way... \nbut I think that is remote.\n\nOne last thing...  when we were having the problems on Monday, I tried to roll back \napache to version httpd-2.0.36  -- but the same problem occured, so I brought the version \nback to httpd-2.0.40.  (So this problem appears to be in all versions SINCE and \nINCLUDING 2.0.36).", "tags": [], "bug_id": 10266, "is_private": false, "count": 13, "id": 21093, "time": "2002-08-15T15:13:32Z", "creator": "dcook@cookware.com", "creation_time": "2002-08-15T15:13:32Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 10266, "attachment_id": null, "text": "[This is a mass bug update.]\nThis bug reports a problem in an older version of Apache 2.\nCould you please update to the most recent version and see\nif you can reproduce this problem.  If the bug still exists,\nplease update the bug with the latest version number.  If \nthe bug no longer exists, please close the bug report.\n\nSorry for this impersonal response, but we get many more bug\nreports than our volunteers can keep up with.\nThanks for using Apache!", "id": 24698, "time": "2002-10-17T02:34:19Z", "creator": "slive@apache.org", "creation_time": "2002-10-17T02:34:19Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 10266, "attachment_id": null, "text": "[This is a mass bug update.] [Resolve-20021102]\nNo response from submitter; assuming issue is resolved.\nIf the problem still exists in the lastest version,\nplease reopen this report and update appropriately.", "id": 25527, "time": "2002-11-02T20:18:05Z", "creator": "slive@apache.org", "creation_time": "2002-11-02T20:18:05Z", "is_private": false}, {"count": 16, "tags": [], "creator": "dcook@cookware.com", "attachment_id": null, "text": "I am reopening this bug report. It was closed because I could not confirm it on \nthe latest Apache 2.0.43 because we have been unable to do the upgrade.\n\nThis week we installed a brand spanking new SUN V100 Server. We placed 2.0.43 \napache on it and we turned on two virtuals. Pretty much same configuration file \nas used on our other servers.\n\nWe began seeing the hang problem within the first 24 hours of running. Note \nthat there was practically no hits to the system.\n\nSince this bug report was unresolved and was causing our systems to hang... we \nwrote a monitor program a few months ago that senses for the hang and sends a \nHUP to the process.  If the process does not recover it will shut down ALL the \napache processes and do a restart.  This monitor pings apache about once every \n15 seconds and so can detect and fix the problem almost immediatly.  \n\nWe have noted interesting things - specifically, the watchdog has never had to \nkill apache - the HUP always works.  The problem might not occur for days, and \nthen might occur many times in a day. Very unpredictable.\n\nWe have also noted that apache can apparently also *fix* the problem. That is, \nthe process hangs for maybe 30 minutes or so, and then unhangs and everything \nis ok (we know this becuase we were not watching one apache process thinking it \nwas immune, and then discovered it was doing this).  This MIGHT be one reason \nthis is hard to track down, because apache does apparently resolve it \neventually.\n\nJust as an interest, here is the restart info from our watchdog program - note \nthe times, etc:\n\n11/23/2002 18:59:12 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/23/2002 22:20:30 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/23/2002 23:34:14 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/23/2002 23:40:00 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/23/2002 23:40:50 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, trying again:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/23/2002 23:55:45 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/24/2002 01:13:32 -> Trouble #1 for 192.207.247.2\n                       192.207.247.2 not responding, HUPing with:\n                       kill -USR1 `cat /cookware/web/apache/logs/httpd.pid`\n11/24/2002 05:24:50 -> Trouble #1 for 192.207.247.2\n\netc....  \n\nSo apparently it can appear in clusters, and then not appear for hours or days.\n\nI also feel your bug #12598 is also related to this problem - probably \ndescribing the same situation.", "id": 26903, "time": "2002-11-24T18:14:51Z", "bug_id": 10266, "creation_time": "2002-11-24T18:14:51Z", "is_private": false}, {"count": 17, "tags": [], "text": "Here is some info that would be helpful.  I realize that you have sent\nsome of this to particular individuals in the past, but I don't see it\nin the PR.\n\nAt the time of the hang:\n\n  how many child processes and what are they doing? (run pstack against\n  each one to see what is going on; presumably most of the children will\n  have the same backtrace, so no sense sending in duplicate backtraces)\n\n  what is the parent doing?  run truss against it for a while (15 seconds)\n  if it doesn't appear to be doing anything, run pstack against it to\n  get a backtrace\n\n  is it possible that all available children are handling connections?\n  look at netstat output for ports served by Apache to see if there are\n  enough hung connections to represent each available child\n\nwild and crazy idea:\n\n  try a different accept mutex mechanism (e.g., \"AcceptMutex fcntl\" in\n  httpd.conf)\n\n", "is_private": false, "bug_id": 10266, "id": 26905, "time": "2002-11-24T19:50:53Z", "creator": "trawick@apache.org", "creation_time": "2002-11-24T19:50:53Z", "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 10266, "attachment_id": null, "text": "no response in 3 months on request for doc on what has hung\n\nfeel free to reopen when you can gather the requested materials\n", "id": 31855, "time": "2003-02-24T13:28:24Z", "creator": "trawick@apache.org", "creation_time": "2003-02-24T13:28:24Z", "is_private": false}, {"count": 19, "tags": [], "text": "Under 2.0.44 we are still experiencing this problem.  We have noted that of the three \nservers running it occus on all three... and it occurs with more frequency on the busier \nservers.\n\nWe currently have special software running to detect the hung process and REHUP (kill -\nUSR1) it. REHUPPING apache fixes it in 99.9% of the cases (after 3 rehups fail in \nsequence our software automatically kills and restarts apache).\n\nWe have also noted that in most cases apache itself will catch the hung child eventually \n(many minutes - which is why we wrote the software to detect it in 15 seconds or less).\n\nAs a new clue to help you trace this down we have notice the following error messages \nin the error logs AFTER a HUP (kill -USR1) is done:\n\n[Mon Mar 31 18:49:28 2003] [notice] Graceful restart requested, doing restart\n[Mon Mar 31 18:49:33 2003] [notice] Apache/2.0.44 (Unix) mod_ssl/2.0.44 OpenSSL/\n0.9.6g configured -- resuming normal operations\n[Mon Mar 31 18:49:33 2003] [warn] long lost child came home! (pid 11039)\n[Mon Mar 31 18:49:33 2003] [warn] long lost child came home! (pid 11040)\n\n(that was in the log immediatly following our REHUP).", "is_private": false, "bug_id": 10266, "id": 34211, "time": "2003-03-31T23:58:20Z", "creator": "dcook@cookware.com", "creation_time": "2003-03-31T23:58:20Z", "attachment_id": null}, {"count": 20, "tags": [], "text": "\n  I am going to hazard a guess that you are having serious mutex problems.\n\n  You should try an alternative AcceptMutex mechanism.  You should also\n  choose another SSLMutex mechanism, which were introduced in Apache 2.0.45.\n\n  Presuming it's the mutexes that are biting you (probable if the cpu load\n  doesn't ramp significantly) there were several bug fixes over the past few\n  releases.  Please retest with 2.0.45 and report back if you still lock up\n  after trying at least two different mutex mechansims for both SSLMutex and\n  AcceptMutex.\n\n  If you would document which mutex causes you to fail and your exact kernel,\n  we may be able to do some autoconf magic to choose an alternate default.\n", "attachment_id": null, "bug_id": 10266, "id": 34466, "time": "2003-04-03T19:41:41Z", "creator": "wrowe@apache.org", "creation_time": "2003-04-03T19:41:41Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 10266, "attachment_id": null, "id": 34648, "time": "2003-04-07T21:59:44Z", "creator": "dcook@cookware.com", "creation_time": "2003-04-07T21:59:44Z", "is_private": false, "text": "I was sent an email the other day telling me to upgrade to .45 and to try all the MUTEX methods. We have since upgraded to version .45 and we have confirmed that children process hang with ALL mutex types.  Our platform allowed us to try the following MUTEX:AcceptMutex fcntlAcceptMutex posixsemAcceptMutex sysvsemAcceptMutex pthread Our platform defaults to pthread... but interestingly enough when I switched to 'fcntl' and restarted apache (from a cold start) apache IMMEDIATLY hung some children.  I killed and restarted it again and it was fine for a few hours but then hung some children.Same for sysvsem... it hung a few minutes ago and our automated software did a complete kill of apache and then a restart - and the restart hung immediatly.As I've said repeatedly, this is a very random thing. Sometimes it will run for 2 or 3 days with no problem, sometimes it will hang once an hour for 4 or 5 hours (our software catches the hang and fixes it in 15 seconds of the hang by issuing a -USR1 signal).I would really really really like to figure this out since it makes our servers much more problematic to maintain - not to mention all the specialized software we have had to write to identify hung servers so we're not woken up at 3:00 AM to system alarms.We are running SUN V100 boxes, but have seen this on our ULTRA boxes that we replaced (with the V100's) as well.So anyway, MUTEX does not seem to change it... the problem occurs in ALL MUTEX that we can test under.We also do not feel that this is in any way related to SSL.  We run a separate apache just for SSL, so the apaches in question, while having SSL compiled into them, are not receiving SSL hits.Also, this does not appear to be related to hits except for the fact that of the 3 apaches we run, the one that runs the most virtual sites hangs much more frequently than the others."}, {"count": 22, "tags": [], "bug_id": 10266, "attachment_id": null, "id": 34844, "time": "2003-04-09T23:35:19Z", "creator": "dcook@cookware.com", "creation_time": "2003-04-09T23:35:19Z", "is_private": false, "text": "A couple of additional observatoins since my last report concerning this problem and version 2.0.45.<p>\n\nFirst... since changing to 2.0.45 (and trying all the MUTEX which all produced the same failure) we have reverted back to the default of 'pthread'.  We are seeing much more hung sessions with 2.0.45 than we saw with 2.0.44.  In 2.0.44 we might get one or two hung sessions a day... and some days none.  With 2.0.45 we are seeing between 6 and 11 hung sessions a day.  We are also seeing that starting apache cold (none running) will INSTANTLY hang a child in about 1 out of 4 restarts... which rarely happened before.<p>\n\nI would also like to point out that this does not appear to be related to the ACCEPTANCE of a connection, but to the RESPONSE to the request... for example:  If an apache is hung and I telnet to port 80 of that server I instantlly get connected.  If I then type in  GET /   with or without the expanded header request... it allows me to type but upon hitting RETURN it hangs and does not come back.  Though I'm certainly not an expert... I would think that this would not be indicitive of a mutex problem - though regardless, all mutex allowed by our server exhibit the same problems."}, {"text": "If Apache is hung, one set of doc that is often helpful is backtraces of the\nchild processes.  On Solaris you can do that for a particular child process\nusing the pstack command.\n\nPresumably many of the pstacks show the same backtrace (many child processes\nwaiting for some particular mutex).  You only need to submit that backtrace once\n(but tell how many children had that backtrace).  Some backtrace(s) should be\ndifferent and would indicate a process that is holding a critical mutex but for\nsome reason is not finishing its work and releasing it.\n", "tags": [], "bug_id": 10266, "is_private": false, "count": 23, "id": 35055, "time": "2003-04-12T12:38:42Z", "creator": "trawick@apache.org", "creation_time": "2003-04-12T12:38:42Z", "attachment_id": null}, {"count": 24, "tags": [], "text": "Please reopen the problem when you are able to submit the requested\ndoc (backtraces from the child processes at the time of the hang\ncondition).\n", "is_private": false, "bug_id": 10266, "id": 38428, "time": "2003-06-05T14:14:14Z", "creator": "trawick@apache.org", "creation_time": "2003-06-05T14:14:14Z", "attachment_id": null}, {"count": 25, "tags": [], "text": "I have confirmed that as of release 2.0.47 we are no longer seeing this situation occur. Two of the \nfixes in 2.0.47 sound like they could be the problem that as happening (CAN-2003-0253 or \nperhaps mod_cgid: Eliminate a double-close of a socket.).\n\nOur software that automatically detects the non-responding server has not detected a hung server \nfor over 48 hours now (we were getting hangs at a frequency of 5 to 10 a day with prior versions).\n\n", "attachment_id": null, "bug_id": 10266, "id": 41256, "time": "2003-07-23T18:36:26Z", "creator": "dcook@cookware.com", "creation_time": "2003-07-23T18:36:26Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 3822, "attachment_id": null, "is_private": false, "id": 6014, "time": "2001-09-25T12:14:37Z", "creator": "cgreco@cisco.com", "creation_time": "2001-09-25T12:14:37Z", "text": "Got the following error on Win2K but not on Linux.  It appears that the Jasper \ncompiler misinterprets the driver letter (e.g., \"D\") for the line number of an \nerror message.  Line 314 of org.apache.jasper.compiler.Compiler tries to \nidentify a drive letter on Windows platforms by the existence of two colons in \nthe error message, but there's no conditional to compensate for the extra colon \nwhen present.\n\n\n----- Root Cause -----\njava.lang.NumberFormatException:  D\n        at java.lang.Integer.parseInt(Integer.java:405)\n        at java.lang.Integer.parseInt(Integer.java:454)\n        at org.apache.jasper.compiler.Compiler.getJspLineErrors(Unknown Source)\n        at org.apache.jasper.compiler.Compiler.compile(Unknown Source)\n        at org.apache.jasper.servlet.JspServlet.loadJSP(Unknown Source)\n        at org.apache.jasper.servlet.JspServlet$JspServletWrapper.loadIfNecessar\ny(Unknown Source)\n        at org.apache.jasper.servlet.JspServlet$JspServletWrapper.service(Unknow\nn Source)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(Unknown Source)\n        at org.apache.jasper.servlet.JspServlet.service(Unknown Source)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(Unknown Source)\n        at org.apache.catalina.core.ApplicationDispatcher.doInclude(Unknown Sour\nce)\n        at org.apache.catalina.core.ApplicationDispatcher.include(Unknown Source\n)\n        at org.apache.jasper.runtime.JspRuntimeLibrary.include(Unknown Source)\n        at org.apache.jsp.login$jsp._jspService(login$jsp.java:70)\n        at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.jasper.servlet.JspServlet$JspServletWrapper.service(Unknow\nn Source)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(Unknown Source)\n        at org.apache.jasper.servlet.JspServlet.service(Unknown Source)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.catalina.core.ApplicationDispatcher.invoke(Unknown Source)\n        at org.apache.catalina.core.ApplicationDispatcher.doForward(Unknown Sour\nce)\n        at org.apache.catalina.core.ApplicationDispatcher.forward(Unknown Source\n)\n        at LoginServlet.doGet(LoginServlet.java:31)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Unkn\nown Source)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(Unknown Sour\nce)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invoke(Unknown Source)\n        at org.apache.catalina.core.ContainerBase.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardContextValve.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(Unknown So\nurce)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invoke(Unknown Source)\n        at org.apache.catalina.core.ContainerBase.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardContext.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardHostValve.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.valves.AccessLogValve.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invoke(Unknown Source)\n        at org.apache.catalina.core.ContainerBase.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardEngineValve.invoke(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invokeNext(Unknown Source)\n        at org.apache.catalina.core.StandardPipeline.invoke(Unknown Source)\n        at org.apache.catalina.core.ContainerBase.invoke(Unknown Source)\n        at org.apache.catalina.connector.http.HttpProcessor.process(Unknown Sour\nce)\n        at org.apache.catalina.connector.http.HttpProcessor.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:484)"}, {"count": 1, "attachment_id": null, "creator": "kin-man.chung@sun.com", "text": "Can you attach a test case that causes this problem?  I am not quite sure what\nyou meant by \"the extra colon\".  Are you referring to the colon after the drive\n(such as D:)?  That was being taken care of.  All my tests ran as expected.", "id": 6345, "time": "2001-10-03T18:16:47Z", "bug_id": 3822, "creation_time": "2001-10-03T18:16:47Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 3822, "is_private": false, "id": 6355, "creation_time": "2001-10-04T07:23:59Z", "time": "2001-10-04T07:23:59Z", "creator": "cgreco@cisco.com", "text": "Here's a stripped-down JSP that exhibits the problem.  I will admit that the \ncause of the problem must be very specific because the NumberFormatException \ndoes not occur if you remove the <table> element and its contents from this \nexample.\n\n\n<%@page session=\"true\" %>\n<jsp:useBean id=\"foo\" class=\"Foo\" scope=\"session\"><% foo = new Foo(\"Unknown\"); %\n></jsp:useBean>\n\n<table>\n<%\n   Boolean loggedIn = (Boolean)session.getValue(\"loggedIn\");\n   if(loggedIn == null) {\n      loggedIn = new Boolean(false);\n   }\n\n   if(loggedIn.booleanValue()) {\n\tout.println(\"<tr><td><a class=\\\"nav\\\" href=\\\"A\\\">A</a></td></tr>\");\n\n\tif(foo != null && !foo.isOut()) \n\t\tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"B\\\">B</a></td></tr>\");\n\tout.println(\"<tr><td><a class=\\\"nav\\\" href=\\\"c.jsp\\\">C</a></td></tr>\");\n\tout.println(\"<tr><td><a class=\\\"nav\\\" href=\\\"d.jsp\\\">D</a></td></tr>\");\n   } else {\n\tout.println(\"<tr><td><a class=\\\"nav\\\" href=\\\"E\\\">E</a></td></tr>\");\n\tout.println(\"<tr><td><a class=\\\"nav\\\" href=\\\"f.jsp\\\">F</a></td></tr>\");\n   }\n%>\n</table>\n\n", "attachment_id": null}, {"count": 3, "tags": [], "text": "Thanks for the test case.  However, due to the added line break, I am not sure I\ngot what you have.  I guess the <jsp:useBean ... >..</jsp:useBean> is one line,\nnot two.  How about the lines\n\n                out.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"B\\\">B</a></td></tr>\");\n\nIf there is a line break after the first line, then this would cause a\ncompilation error.  Is this the cause of your NumberFormatException?\n\nI tried it with and without the line break, and didn't get\nNumberFormatException.\n\nCan you go to tomcat/work/localhost area and locate the .java generated by\njasper, and post that here.  I look at the .java I got, and didn't see any extra\ncolons that may cause NumberFormatException.\n\nHowever, I do notice a couple of problems with Jasper.  The first is of course\nif there is a colon (maybe in a string literal) in the program, then you'll get\nthe NumberFormatException like you said.  I'll try to catch it locally.\n\nThe second is if the string contains tags, they should be escape'd so that they\nwon't be interpreted by the browser.", "attachment_id": null, "bug_id": 3822, "id": 6375, "time": "2001-10-04T10:32:25Z", "creator": "kin-man.chung@sun.com", "creation_time": "2001-10-04T10:32:25Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 3822, "is_private": false, "count": 4, "id": 6377, "time": "2001-10-04T10:53:46Z", "creator": "cgreco@cisco.com", "creation_time": "2001-10-04T10:53:46Z", "text": "Here's the generated code for the example JSP I sent earlier.  To be clear, I \ndon't think there's a colon in the generated code that's causing the problem, \nbut rather it's the parsing of the compiler error message when running on \nWindows.  And also, there are no extraneous line breaks in the JSP or generated \ncode.   Those line breaks are a side effect of pasting into the Bugzilla form.\n\n\npackage org.apache.jsp;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.jsp.*;\nimport org.apache.jasper.runtime.*;\n\n\npublic class navigator$jsp extends HttpJspBase {\n\n    // begin [file=\"/navigator.jsp\";from=(1,0);to=(1,50)]\n    // end\n\n    static {\n    }\n    public navigator$jsp( ) {\n    }\n\n    private static boolean _jspx_inited = false;\n\n    public final void _jspx_init() throws \norg.apache.jasper.runtime.JspException {\n    }\n\n    public void _jspService(HttpServletRequest request, HttpServletResponse  \nresponse)\n        throws java.io.IOException, ServletException {\n\n        JspFactory _jspxFactory = null;\n        PageContext pageContext = null;\n        HttpSession session = null;\n        ServletContext application = null;\n        ServletConfig config = null;\n        JspWriter out = null;\n        Object page = this;\n        String  _value = null;\n        try {\n\n            if (_jspx_inited == false) {\n                synchronized (this) {\n                    if (_jspx_inited == false) {\n                        _jspx_init();\n                        _jspx_inited = true;\n                    }\n                }\n            }\n            _jspxFactory = JspFactory.getDefaultFactory();\n            response.setContentType(\"text/html;charset=ISO-8859-1\");\n            pageContext = _jspxFactory.getPageContext(this, request, response,\n\t\t\t\"\", true, 8192, true);\n\n            application = pageContext.getServletContext();\n            config = pageContext.getServletConfig();\n            session = pageContext.getSession();\n            out = pageContext.getOut();\n\n            // HTML // begin [file=\"/navigator.jsp\";from=(0,25);to=(1,0)]\n                out.write(\"\\r\\n\");\n\n            // end\n            // begin [file=\"/navigator.jsp\";from=(1,0);to=(1,50)]\n                Foo foo = null;\n                boolean _jspx_specialfoo  = false;\n                 synchronized (session) {\n                    foo= (Foo)\n                    pageContext.getAttribute(\"foo\",PageContext.SESSION_SCOPE);\n                    if ( foo == null ) {\n                        _jspx_specialfoo = true;\n                        try {\n                            foo = (Foo) java.beans.Beans.instantiate\n(this.getClass().getClassLoader(), \"Foo\");\n                        } catch (Exception exc) {\n                             throw new ServletException (\" Cannot create bean \nof class \"+\"Foo\", exc);\n                        }\n                        pageContext.setAttribute(\"foo\", foo, \nPageContext.SESSION_SCOPE);\n                    }\n                 } \n                if(_jspx_specialfoo == true) {\n            // end\n            // begin [file=\"/navigator.jsp\";from=(1,52);to=(1,79)]\n                 foo = new Foo(\"Unknown\"); \n            // end\n            // begin [file=\"/navigator.jsp\";from=(1,0);to=(1,50)]\n                }\n            // end\n            // HTML // begin [file=\"/navigator.jsp\";from=(1,95);to=(4,0)]\n                out.write(\"\\r\\n\\r\\n<table>\\r\\n\");\n\n            // end\n            // begin [file=\"/navigator.jsp\";from=(4,2);to=(21,0)]\n                \n                   Boolean loggedIn = (Boolean)session.getValue(\"loggedIn\");\n                   if(loggedIn == null) {\n                      loggedIn = new Boolean(false);\n                   }\n                \n                   if(loggedIn.booleanValue()) {\n                \tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"A\\\">A</a></td></tr>\");\n                \n                \tif(foo != null && !foo.isOut()) \n                \t\tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"B\\\">B</a></td></tr>\");\n                \tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"c.jsp\\\">C</a></td></tr>\");\n                \tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"d.jsp\\\">D</a></td></tr>\");\n                   } else {\n                \tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"E\\\">E</a></td></tr>\");\n                \tout.println(\"<tr><td><a class=\\\"nav\\\" \nhref=\\\"f.jsp\\\">F</a></td></tr>\");\n                   }\n            // end\n            // HTML // begin [file=\"/navigator.jsp\";from=(21,2);to=(24,0)]\n                out.write(\"\\r\\n</table>\\r\\n\\r\\n\");\n\n            // end\n\n        } catch (Throwable t) {\n            if (out != null && out.getBufferSize() != 0)\n                out.clearBuffer();\n            if (pageContext != null) pageContext.handlePageException(t);\n        } finally {\n            if (_jspxFactory != null) _jspxFactory.releasePageContext\n(pageContext);\n        }\n    }\n}\n"}, {"count": 5, "tags": [], "bug_id": 3822, "attachment_id": null, "text": "If I remove the line break, then the messages I got are related to Foo not being\ndefined etc, and that works on NT.  Also I didn't see anything unusual with your\n.java file.\n\nAnyway I fixed Jasper so that it catches the NumberFormatException and display\nthe error line without mapping back to the jsp file.\n\nI am closing this bug as fixed.  Please try running the test again with the new\nfix.  If you still have problems, you can reopen the bug.  thanks.", "id": 6386, "time": "2001-10-04T12:33:03Z", "creator": "kin-man.chung@sun.com", "creation_time": "2001-10-04T12:33:03Z", "is_private": false}]
[{"count": 0, "tags": [], "text": "mod_include allows for regexp pattern matching if the right operand of the = or\n!= operator is a /pattern/. Extended regexp's (which are used by mod_include)\nallow for match of sub-expressions in parentheses. It would be useful (and\nactually a quite simple modification) to be able to use the sub-expressions\nlater in the document. For example:\n\n        <!--#if expr=\"$REQUEST_URI = '/(blue|yellow).*(keen|nervous)/'\" -->\n        we are <!--#echo var=\"1\" --> and mood is <!--#echo var=\"2\" --> today\n        <!--#else -->\n        no special color or mood today\n        <!--#endif -->\n\nAnother example: I am using this feature to dynamically customize a navigation\nbar depending on *where* in the navigation tree I am currently. This allows me\nto #include a general header file in the HTML documents that \"knows\" at which\nposition in the navigation tree we are. It just examines REQUEST_URI and for\ninstance doesn't emit an HTML anchor for the current document but just for the\nothers.\n\nThe modification is quite simple and straightforward. A patch (relative to\n1.3.26's mod_include.c) follows:\n\n@@ -1202,15 +1206,27 @@\n static int re_check(request_rec *r, char *string, char *rexp)\n {\n     regex_t *compiled;\n+    regmatch_t *regmatch;\n     int regex_error;\n \n-    compiled = ap_pregcomp(r->pool, rexp, REG_EXTENDED | REG_NOSUB);\n+    compiled = ap_pregcomp(r->pool, rexp, REG_EXTENDED);\n     if (compiled == NULL) {\n         ap_log_rerror(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, r,\n                     \"unable to compile pattern \\\"%s\\\"\", rexp);\n         return -1;\n     }\n-    regex_error = ap_regexec(compiled, string, 0, (regmatch_t *) NULL, 0);\n+    regmatch = (regmatch_t *) ap_palloc(r->pool, (compiled->re_nsub+1) *\nsizeof(regmatch_t));\n+    regex_error = ap_regexec(compiled, string, compiled->re_nsub+1, regmatch,\n0);\n+    if (!regex_error) {\n+       int i;\n+       for (i = 1; i <= compiled->re_nsub; ++i) {\n+           char *mark = ap_psprintf(r->pool, \"$%d\", i);\n+           char *result = ap_palloc(r->pool, regmatch[i].rm_eo -\nregmatch[i].rm_so + 1);\n+           memcpy(result, string + regmatch[i].rm_so, regmatch[i].rm_eo -\nregmatch[i].rm_so);\n+           result[regmatch[i].rm_eo - regmatch[i].rm_so] = '\\0';\n+           ap_table_setn(r->subprocess_env, &mark[1], result);\n+       }\n+    }\n     ap_pregfree(r->pool, compiled);\n     return (!regex_error);\n }\n\u0018", "is_private": false, "id": 19934, "creator": "apache-include@oldach.net", "time": "2002-07-21T18:14:28Z", "bug_id": 11018, "creation_time": "2002-07-21T18:14:28Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 11018, "attachment_id": null, "id": 31719, "time": "2003-02-21T00:17:48Z", "creator": "nd@perlig.de", "creation_time": "2003-02-21T00:17:48Z", "is_private": false, "text": "This is a \"new feature\" of version 2.x. httpd-1.3 is in maintenance mode, so\nfeatures are more or less freezed there (unless there are very good reasons to\nbuild them in, of course). Sorry.\n\nBut you may consider to upgrade ;-)\n\nThanks for using Apache!"}]
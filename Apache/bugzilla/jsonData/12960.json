[{"count": 0, "tags": [], "bug_id": 12960, "text": "Is it possible to have PropertyFile functionality for the XMLProperty task.\n\nThe ability to write to as well as read from a property file in XML format.", "id": 23306, "time": "2002-09-24T15:12:59Z", "creator": "dan.gardner@emap.com", "creation_time": "2002-09-24T15:12:59Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 12960, "text": "Of course.  Are you volunteering to develop and submit it? :)\n\nBut what would the details of such a task do?  You want a generic task to create\nXML files somehow?  Can you provide some details on what you're after?  There\nsome possibilities such as using a tokenized template file and using a filtered\ncopy, as well as other methods for doing this (even using <echo>).", "id": 23308, "time": "2002-09-24T15:25:08Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-09-24T15:25:08Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 12960, "attachment_id": null, "text": "I have not yet worked this out in my head.  I was thinking of a very simple, \nalmost flat XML structure.  Feel free to can this if you have already been down \nthis root, and it gets nasty.\n\nThe driving force behind this sugestion was as follows:\n\nI maintain a PropertyFile of patches and order to apply:\n\npatch1.name:p20020813_r2_v2_p1\npatch1.description:bla bla bla bla bla\npatch2.name:p20020924_r2_v2_p1\npatch2.description:bla bla bla bla bla\npatch3.name:p20020924_r2_v2_p2\npatch3.description:bla bla bla bla bla\n\netc.\n\nWe use this to apply patches to a paticular release\n\n1 pull from CVS where tag = r2\n2 pull from CVS where tag = p20020813_r2_v2_p1\n3 pull from CVS where tag = p20020924_r2_v2_p1\n4 pull from CVS where tag = p20020924_r2_v2_p2\n5 apply patches to release in corect order.\n\nThe build file currently has lots of repeated targets for a predefined number \nof patches.  I am looking at applying an XSLT to the build file in order to \ndynamically generate the targets based on how many patches need to be applied.  \nThis removes the number-of-patches ceiling on my current build file.\n\nIf I could maintain the patch list in an XML format, then I could apply an XSLT \nto it (dynamically building the nessasary targets for each patch), and import \nthe result into my build file.\n\nThis would give a task structure something like:\n\n<XMLPropertyFile file=\"${config.dir}/patches_todeploy_${destination}.xml\">\n  <XMLtag tagname=\"patch\">\n    <XMLattribute name=\"patch.number\" value=\"${new.patch.number}\" />\n    <XMLattribute name=\"patch.name\" value=\"${new.patch.name}\" />\n    <XMLattribute name=\"patch.description\" value=\"${new.patch.description}\" />\n  </XMLtag>\n  <XMLtag tagname=\"patches\">\n    <XMLattribute name=\"quantity\" type=\"int\" operation=\"+\" default=\"1\" />\n  </XMLtag>\n</XMLPropertyFile>\n\ngiving the following XML (ignoring headers for now :)):\n\n<patch patch.number=\"1\" patch.name=\"p20020813_r2_v2_p1\" patch.description=\"bla \nbla bla bla bla\" />\n<patch patch.number=\"2\" patch.name=\"p20020924_r2_v2_p1\" patch.description=\"bla \nbla bla bla bla\" />\n<patch patch.number=\"3\" patch.name=\"p20020924_r2_v2_p2\" patch.description=\"bla \nbla bla bla bla\" />\n<patches quantity=\"3\" />\n", "id": 23310, "time": "2002-09-24T15:56:40Z", "creator": "dan.gardner@emap.com", "creation_time": "2002-09-24T15:56:40Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 12960, "attachment_id": null, "id": 23340, "time": "2002-09-25T03:00:45Z", "creator": "jefft@apache.org", "creation_time": "2002-09-25T03:00:45Z", "is_private": false, "text": "You could just use XmlTask, listed on the external tasks page\n(http://jakarta.apache.org/ant/external.html). Or to modify an existing XML\nfile, why not just use <style>?\n\n--Jeff"}, {"count": 4, "tags": [], "bug_id": 12960, "attachment_id": null, "id": 37184, "time": "2003-05-14T13:25:19Z", "creator": "bodewig@apache.org", "creation_time": "2003-05-14T13:25:19Z", "is_private": false, "text": "<echoproperties format=\"xml\"/> seems to be what you want.\nHas been available in nightly builds for some time now."}, {"count": 5, "tags": [], "bug_id": 12960, "attachment_id": null, "id": 37185, "time": "2003-05-14T13:32:14Z", "creator": "dan.gardner@emap.com", "creation_time": "2003-05-14T13:32:14Z", "is_private": false, "text": "I should have updated this sooner, the XMLTask works great for me.\n\nApart from its formating that is - never got that working :( - not important"}]
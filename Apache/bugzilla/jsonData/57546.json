[{"attachment_id": 32440, "tags": [], "bug_id": 57546, "is_private": false, "count": 0, "id": 180845, "time": "2015-02-06T22:44:04Z", "creator": "paul.gaylie@gmail.com", "creation_time": "2015-02-06T22:44:04Z", "text": "Created attachment 32440\nToo many instances in  hashmap\n\nWe are connecting mobile devices via websocket to Tomcat 8.0.18 server. The physical mobile connection can die at random times. When the connection goes down the instance of org.apache.coyote.http11.upgrade.NioProcessor is not removed from the connections HashMap in class org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler. There are 4,181 entries in the connections HashMap. However, there are in fact 1,400 real socket connections. See DumpHprof1.jpg. This displays a drill-down into one of the HashMap entries. The instance of SafeCommConnection is my ServerEndpoint POJO. When onClose is called in my ServerEndpoint I set a flag called isClosing to true. You can see on the right side that it is set to true so I have removed it from my app but the instance remains in memory held by the NioProtocol's connections HashMap. It seems that http11NioProtocol.release method is not getting called. Also, here is a stack trace in the stderr log file. It gets hundreds of these:\n\n06-Feb-2015 14:12:05.255 INFO [http-nio-443-exec-385] org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doClose Failed to close the ServletOutputStream connection cleanly\n java.io.IOException: An existing connection was forcibly closed by the remote host\n\tat sun.nio.ch.SocketDispatcher.write0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.write(Unknown Source)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(Unknown Source)\n\tat sun.nio.ch.IOUtil.write(Unknown Source)\n\tat sun.nio.ch.SocketChannelImpl.write(Unknown Source)\n\tat org.apache.tomcat.util.net.SecureNioChannel.flush(SecureNioChannel.java:134)\n\tat org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:370)\n\tat org.apache.tomcat.util.net.SecureNioChannel.close(SecureNioChannel.java:398)\n\tat org.apache.coyote.http11.upgrade.NioServletOutputStream.doClose(NioServletOutputStream.java:138)\n\tat org.apache.coyote.http11.upgrade.AbstractServletOutputStream.close(AbstractServletOutputStream.java:137)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doClose(WsRemoteEndpointImplServer.java:143)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.close(WsRemoteEndpointImplBase.java:638)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:118)\n\tat org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:81)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:450)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:338)\n\tat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:270)\n\tat org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:563)\n\tat org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:503)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:183)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:48)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:214)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:194)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:96)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:654)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Unknown Source)"}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 180884, "time": "2015-02-10T00:20:02Z", "bug_id": 57546, "creation_time": "2015-02-10T00:20:02Z", "text": "release() isn't expected to be called for an HTTP upgrade connection so that method getting called is not part of the problem.\n\nI've tried to reproduce this with 8.0.x trunk but I can't. I've been trying the various WebSocket example applications with and without https and killing the browser to simulate dropping the connection.\n\nA simple test case that demonstrates this issue would be a big help.\n\nI do wonder if some of the connector fixes made since 8.0.18 may have fixed this. Are you able to build the latest 8.0.x code from svn and test that? Alternatively I could provide you with a test build."}, {"count": 2, "tags": [], "text": "Mark,\n\nUnfortunately, killing a browser is not a good simulation because the browser is smart enough to properly close the websocket when it gets killed.\n\nHere is what to do: connect using a mobile browser on your phone (like Chrome on Android) and then shutoff the mobile data connection on your phone. Then you should see the doClose() operation happening on the server side.\n\nThanks for looking into this.", "is_private": false, "bug_id": 57546, "id": 180886, "time": "2015-02-10T01:28:48Z", "creator": "paul.gaylie@gmail.com", "creation_time": "2015-02-10T01:28:48Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "(In reply to Paul Gaylie from comment #2)\n> Mark,\n> \n> Unfortunately, killing a browser is not a good simulation because the\n> browser is smart enough to properly close the websocket when it gets killed.\n\nWith kill -9 the browser nver gets the chance. The close isn't clean - a bunch of IOExceptions are triggered.\n\n> Here is what to do: connect using a mobile browser on your phone (like\n> Chrome on Android) and then shutoff the mobile data connection on your\n> phone. Then you should see the doClose() operation happening on the server\n> side.\n\nI'll try but right now my money is on this already being fixed in the post 8.0.18 changes.", "is_private": false, "bug_id": 57546, "id": 180887, "time": "2015-02-10T08:47:53Z", "creator": "markt@apache.org", "creation_time": "2015-02-10T08:47:53Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 180901, "time": "2015-02-10T14:59:55Z", "bug_id": 57546, "creation_time": "2015-02-10T14:59:55Z", "text": "Interesting. I tried testing with a separate machine so I could pull out the network cable. That has triggered a problem that looks like the one described here. I'm looking into this at the moment.\n\nMusing on why I didn't see this when I kill -9'd the browser, I suspect that the client OS was doing some clean-up since it was still connected."}, {"count": 5, "tags": [], "bug_id": 57546, "attachment_id": null, "id": 180904, "time": "2015-02-10T15:54:42Z", "creator": "markt@apache.org", "creation_time": "2015-02-10T15:54:42Z", "is_private": false, "text": "Thanks for the report and the pointers to reproduce this.\n\nI have fixed the problem in trunk, 8.0.x (for 8.0.19 onwards) and 7.0.x (for 7.0.60 onwards)."}, {"count": 6, "tags": [], "text": "Only the first part of the fix was applied to Tomcat 7 (r1658738).\n\nThe second part was applied to Tomcat 8 (r1658794), but has not been ported to Tomcat 7 yet. Thus I am REOPENing this issue, so that it is not forgotten.\n\n\nThe issues in the first part:\n- as noted by Remy (in \"Re: r1658734\"):\n\n> Good find, but what happens if onDataAvailable or onWritePossible throw a\nruntime exception (like a NPE), since this is user code. It could also leak\nthen ? Shouldn't the code catch everything, also call onError on the\nlistener and close ?\n\n- as noted by Chris (in \"Re: r1658737\"):\n\n> Is it worth predicating the log call with if(getLog().isDebugEnabled)?", "is_private": false, "bug_id": 57546, "id": 180928, "time": "2015-02-10T22:49:50Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-02-10T22:49:50Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 57546, "is_private": false, "count": 7, "id": 180931, "time": "2015-02-10T23:05:04Z", "creator": "markt@apache.org", "creation_time": "2015-02-10T23:05:04Z", "text": "This wasn't forgotten it deliberately wasn't back-ported because this isn't user code in Tomcat 7. It is a Tomcat internal API only used by WebSockets and we know exactly which exceptions are thrown. Therefore the additional protection added in trunk and 8.0.x is not necessary in 7.0.x.\n\nRegarding the debug, the look-up in the StringManager is likely to be much faster than the throwing of the Exception that triggers this look-up. Performance is pretty much a lost cause once an Exception has been thrown."}, {"count": 8, "tags": [], "text": "Hi Mark,\n\nGreat that you found the bug.\n\nExactly what code needed to be updated? Just curious where the proper fix needed to be applied - was driving me nuts.", "attachment_id": null, "id": 180936, "creator": "paul.gaylie@gmail.com", "time": "2015-02-11T02:29:51Z", "bug_id": 57546, "creation_time": "2015-02-11T02:29:51Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 57546, "is_private": false, "count": 9, "id": 180944, "time": "2015-02-11T09:23:05Z", "creator": "markt@apache.org", "creation_time": "2015-02-11T09:23:05Z", "text": "See r1658734 and r1658790."}, {"count": 10, "tags": [], "bug_id": 57546, "attachment_id": null, "id": 182075, "time": "2015-03-24T22:27:32Z", "creator": "markt@apache.org", "creation_time": "2015-03-24T22:27:32Z", "is_private": false, "text": "*** Bug 57750 has been marked as a duplicate of this bug. ***"}, {"count": 11, "tags": [], "text": "Mark,\n\nIt looks like you fixed this is version 8.0.19 but this version is not released. Any time frame when this fix will be available?\n\nThanks, Paul", "is_private": false, "bug_id": 57546, "id": 182986, "time": "2015-05-14T20:32:21Z", "creator": "paul.gaylie@gmail.com", "creation_time": "2015-05-14T20:32:21Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 57546, "attachment_id": null, "text": "(In reply to Paul Gaylie from comment #11)\n> It looks like you fixed this is version 8.0.19 but this version is not\n> released. Any time frame when this fix will be available?\n\nIt's available now - download the current 8.0.22 version.  Changes are cumulative, so the fix has been in all releases beyond 8.0.19.", "id": 182987, "time": "2015-05-14T20:49:03Z", "creator": "chuck.caldarale@unisys.com", "creation_time": "2015-05-14T20:49:03Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 57546, "attachment_id": 32854, "text": "Created attachment 32854\nScreen Shot from hprof\n\nGuys,\n\nI installed Tomcat 8.0.22 on our production server. Unfortunately, the memory leak is still there. If you look at the attachment TomcatLeak2.jpg you will see 2,968 items in the connections HashMap. There should be 1,718. I am not sure what to suggest other than re-running the connection crash test. I can send you the hprof file but it is over 1 GB.", "id": 183738, "time": "2015-06-24T17:49:24Z", "creator": "paul.gaylie@gmail.com", "creation_time": "2015-06-24T17:49:24Z", "is_private": false}, {"count": 14, "tags": [], "text": "(In reply to Paul Gaylie from comment #13)\n> Created attachment 32854 [details]\n> Screen Shot from hprof\n> \n> Guys,\n\nPlease consider using a more gender neutral form of address when addressing the Tomcat committers.\n\n> I installed Tomcat 8.0.22 on our production server. Unfortunately, the\n> memory leak is still there. If you look at the attachment TomcatLeak2.jpg\n> you will see 2,968 items in the connections HashMap. There should be 1,718.\n> I am not sure what to suggest other than re-running the connection crash\n> test. I can send you the hprof file but it is over 1 GB.\n\nIt looks like there are multiple issues. Please open a new bug. As with any bug, you'll need to provide the steps to reproduce the issue on a clean install of the latest stable release of the version (8.0.x in this case) where you see the issue.", "attachment_id": null, "id": 183739, "creator": "markt@apache.org", "time": "2015-06-24T18:37:03Z", "bug_id": 57546, "creation_time": "2015-06-24T18:37:03Z", "is_private": false}, {"count": 15, "tags": [], "text": "Hi,\n\nI'm afraid we're facing the same problem with Tomcat 7.0.67 and 8.0.32. Paul, can you confirm that this bug is fixed now?", "is_private": false, "bug_id": 57546, "id": 188970, "time": "2016-02-29T15:23:03Z", "creator": "Jan.Tarnowski@comarch.com", "creation_time": "2016-02-29T15:23:03Z", "attachment_id": null}, {"count": 16, "tags": [], "text": "Hello, i am facing a similar problem ...\nTomcat 8.0.23 and 8.0.33\nLinux\n\nUsing jconsole i can see how memory grows till virtual machine crashes, i have to restart tomcat every 5 or 6 days\n\nI am usng a tool called Memory ANalyzer for eclipse http://www.eclipse.org/mat/ and, after a memory dump, it says the following\n\nOne instance of \"org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler\" loaded by \"java.net.URLClassLoader @ 0xe5613ed8\" occupies 101,526,264 (48.71%) bytes. The memory is accumulated in one instance of \"java.util.concurrent.ConcurrentHashMap$Node[]\" loaded by \"<system class loader>\".\n\nKeywords\njava.util.concurrent.ConcurrentHashMap$Node[]\norg.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler\njava.net.URLClassLoader @ 0xe5613ed8\n\n\nin a few days it is going to occupy 99.99% of the memory.\n\nDo you need more info ? ... i don't know how to reproduce it ...\nI was using tomcat 8.0.12 a few month ago, i don't remember if it was also happening ... i am going to try it out next restart ...\n\nCheers", "is_private": false, "id": 189919, "creator": "administrator@ajedrezweb.net", "time": "2016-04-03T15:53:00Z", "bug_id": 57546, "creation_time": "2016-04-03T15:53:00Z", "attachment_id": null}, {"count": 17, "tags": [], "text": "(In reply to chinanzio from comment #16)\n\nThis bug has been fixed.\n\nThere is nothing in comment #16 that suggests that you are seeing the same bug. To repeat earlier advice:\n\nPlease open a new bug. As with any bug, you'll need to provide the steps to reproduce the issue on a clean install of the latest stable release of the version (8.0.x in this case) where you see the issue.", "attachment_id": null, "id": 189920, "creator": "markt@apache.org", "time": "2016-04-03T18:37:23Z", "bug_id": 57546, "creation_time": "2016-04-03T18:37:23Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "marek.les@seznam.cz", "text": "After upgrading to Apache 2.0 I encountered a strange thing - in high traffic,\nsome lines in the access log get out of order. The maximum differences I've\nencountered is about 10 seconds. This is a cosmethical problem but there are\nproblems with log analyzers such as Webalizer...\n\nThe configuration line is:\n\nCustomLog      log/httpd_access_log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\"\n\\\"%{User-Agent}i\\\"\"", "id": 40448, "time": "2003-07-11T12:05:48Z", "bug_id": 21500, "creation_time": "2003-07-11T12:05:48Z", "is_private": false, "attachment_id": null}, {"count": 1, "text": "It is too expensive to have access log entries sorted strictly by time when\nwritten by Apache.  All entries written by any thread in the whole server would\nhave to be channelled through one single thread that kept them sorted.  There\nare a couple of reasons for this:\n\n1) request time is not calculated right at the time of logging, so other delays\nin the processing of that request could hold it up and allow later requests to\nbe logged first\n2) even if the request time is calculated right at the time of logging, the\nthread just about to call the kernel to append the entry to the file could lose\nthe CPU to another thread which generates its later timestamp and successfully\nappends to the file\n\nHere is some code from mod_log_config.c you can tweak to reduce but not\neliminate out-of-order entries, at the cost of slowing down the server a bit. \nYou can stick \"#define I_INSIST_ON_EXTRA_CYCLES_FOR_CLF_COMPLIANCE\"  at the top\nof mod_log_config.c and recompile to enable the code that grabs the time closer\nto the time of writing to the file.\n\nstatic const char *log_request_time(request_rec *r, char *a)\n{\n    apr_time_exp_t xt;\n\n    /* ###  I think getting the time again at the end of the request\n     * just for logging is dumb.  i know it's \"required\" for CLF.\n     * folks writing log parsing tools don't realise that out of order\n     * times have always been possible (consider what happens if one\n     * process calculates the time to log, but then there's a context\n     * switch before it writes and before that process is run again the\n     * log rotation occurs) and they should just fix their tools rather\n     * than force the server to pay extra cpu cycles.  if you've got\n     * a problem with this, you can set the define.  -djg\n     */\n    if (a && *a) {              /* Custom format */\n        /* The custom time formatting uses a very large temp buffer\n         * on the stack.  To avoid using so much stack space in the\n         * common case where we're not using a custom format, the code\n         * for the custom format in a separate function.  (That's why\n         * log_request_time_custom is not inlined right here.)\n         */\n#ifdef I_INSIST_ON_EXTRA_CYCLES_FOR_CLF_COMPLIANCE\n        ap_explode_recent_localtime(&xt, apr_time_now());\n#else\n        ap_explode_recent_localtime(&xt, r->request_time);\n#endif\n        return log_request_time_custom(r, a, &xt);\n    }\n\nA custom piped logger might be the best way to deal with this.  It can hold onto\nentries for some time (up to 10 secs in your case) to catch out of order\nentries, then write them out sorted.\n", "bug_id": 21500, "attachment_id": null, "id": 40543, "time": "2003-07-12T11:08:34Z", "creator": "trawick@apache.org", "creation_time": "2003-07-12T11:08:34Z", "tags": [], "is_private": false}, {"count": 2, "text": "If post-processing is possible, there's a really cool and fast tool at\n<http://mergelog.sourceforge.net/>, which sorts logfile entries by time as well.\n\nWe use it here with success in conclusion with webalizer.", "bug_id": 21500, "is_private": false, "id": 40545, "time": "2003-07-12T12:05:05Z", "creator": "nd@perlig.de", "creation_time": "2003-07-12T12:05:05Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 21500, "is_private": false, "text": "This bug is essentially the same as bug 10062.  In a reply to that bug, the \nexplanation was that the timestamp from when the request processing was \n*begun* is being used instead of the timestamp when it ended.  THAT is the \nroot of the problem.\n\nIf the access log is using the beginning timestamp instead of the ending \ntimestamp, this behavior is different from that of Apache 1.3 and is contrary \nto what Apache's own documentation states for both 1.3 and 2.0 regarding the \ntimestamp in the access log:\n\nhttp://httpd.apache.org/docs-2.0/logs.html#accesslog\n\nIt is important that the *ending* timestamp be used to keep logs in reasonably \nchronological order.  It makes a huge difference when the request being served \nis for a file that is hundreds of megabytes and takes 7+ hours to serve over a \nslow link.\n\nIt is also important to be able to match an error log message with the request \nthat caused it.  If the timestamps are very different, it makes it much more \ndifficult to match request with error.\n\nSo, using the beginning timestamp for the access log is definitely a bug, IMO.\n\nIf you *absolutely insist* on changing this functionality, then please provide \nan option for backwards compatibility.\n", "id": 47470, "time": "2003-11-17T05:52:48Z", "creator": "jve@3dgamers.com", "creation_time": "2003-11-17T05:52:48Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "id": 47480, "time": "2003-11-17T07:55:51Z", "bug_id": 21500, "creation_time": "2003-11-17T07:55:51Z", "is_private": false, "text": "The bug is closed wontfix and probably will stay so.\nIf you want the logging time to be logged, compile mod_log_config with the\n-DI_INSIST_ON_EXTRA_CYCLES_FOR_CLF_COMPLIANCE option. The behaviour is the same\nas in 1.3, just perhaps better documented."}]
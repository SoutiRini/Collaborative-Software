[{"attachment_id": null, "tags": [], "bug_id": 48981, "text": "I am using Apache/2.2.15 (Unix) with mpm worker and mod_fcgid 2.3.5, server keeps spawning new php processes though FcgidMaxProcesses is set to 2.\n\nRelevant config entries:\n\n# MPM:\nMaxClients 400\nServerLimit 16\nStartServers 2\nMinSpareThreads 25\nMaxSpareThreads 75\nThreadsPerChild 25\nMaxRequestsPerChild  10000\n\n# FCGID:\nLoadModule fcgid_module modules/mod_fcgid.so\n\nFcgidBusyScanInterval 60\nFcgidBusyTimeout 300\nFcgidMaxRequestsPerProcess 10000\nFcgidFixPathinfo 1\nAddHandler fcgid-script .php\nFcgidIdleTimeout 300\nFcgidProcessLifetime 3600\nFcgidInitialEnv PHP_FCGI_MAX_REQUESTS 10000\nFcgidInitialEnv PHP_FCGI_CHILDREN 0\nFcgidWrapper \"/usr/local/phpw3/bin/php-cgi -c /usr/local/apache/conf/php.ini\" .php\nFcgidMaxProcesses 2\nFcgidMaxProcessesPerClass 2\nFcgidPassHeader Authorization\n\n\n# ps aux|grep php|grep w3|wc -l\n17\n\nAnd it is increasing every time when the client request a .php page.\n\nI have only 4 running httpd processes, which means even if FcgidMaxProcesses is a per Apache process setting (I assume it is), it should limit the number of spawned php processes to 8.", "count": 0, "id": 135603, "time": "2010-03-24T21:57:19Z", "creator": "erno.kovacs@freemail.hu", "creation_time": "2010-03-24T21:57:19Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48981, "attachment_id": null, "is_private": false, "id": 135613, "time": "2010-03-25T09:02:02Z", "creator": "erno.kovacs@freemail.hu", "creation_time": "2010-03-25T09:02:02Z", "text": "As I suspected, it has something to do with MPM worker.\nUsing the config above with these tweaks:\n#MinSpareThreads 25\n#MaxSpareThreads 75\n#ThreadsPerChild 25\nMinSpareThreads 1\nMaxSpareThreads 1\nThreadsPerChild 1\n\nI have 3 running httpd processes and it wont spawn more than 6 PHP processes, just like expected.\n\nThis behaviour is wrong anyway.\n1. It means static int g_total_process is a per thread variable.\n2. Even if it was a per process variable, FcgidMaxProcesses is unusable as I cant control the maximum number of fcgi applications. Just imagine, you have a busy server with lots of preforked processes, this way mod_fcgid would just keep spawning new processes which makes it nothing better than a simple cgi.\n\nSome shared memory solution would be needed."}, {"count": 2, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 135615, "time": "2010-03-25T10:40:55Z", "bug_id": 48981, "creation_time": "2010-03-25T10:40:55Z", "is_private": false, "text": "g_total_process is only referenced from the process manager.  (The process manager is a single-threaded process.)  Thus, it doesn't need to be in shared memory.\n\nSomething you could check is how many of the FastCGI processes you find are in error state (visible in the mod_fcgid section within the mod_status report) and how many are zombies (visible in ps output).\n\n(Or decrease FcgidErrorScanInterval and FcgidZombieScanInterval to 1 so that processes don't stay in that state more than 1 second.)"}, {"attachment_id": null, "tags": [], "creator": "erno.kovacs@freemail.hu", "is_private": false, "count": 3, "id": 135616, "time": "2010-03-25T10:51:43Z", "bug_id": 48981, "creation_time": "2010-03-25T10:51:43Z", "text": "> Something you could check is how many of the FastCGI processes you find are in\n> error state (visible in the mod_fcgid section within the mod_status report) and\n> how many are zombies (visible in ps output).\n\nI can see only php-cgi processes with state S (sleeping I guess) in ps aux output.\nIn mod_fcgid of server-status there is \n\nmod_fcgid status:\nTotal FastCGI processes: 35 \nStates of all of them are ready, accesses is mostly 1 (there are a few 2)."}, {"count": 4, "tags": [], "bug_id": 48981, "is_private": false, "id": 135658, "creation_time": "2010-03-26T08:11:19Z", "time": "2010-03-26T08:11:19Z", "creator": "rkosolapov@gmail.com", "text": "I just discovered the same problem on Fedora 11 (mod_fcgid 2.2).  The following patch solves the concrete problem, but it should not be considered as proposed one.  It works for me, so it may be used as temporary solution.\n\nIn the patch I just move check of amount of run processes into beginning of is_spawn_allowed function.\n\nMy guess is there is some race condition (the situation that I see in logs leads me to that).  I've seen in logs the lines like \"mod_fcgid: XXXXX total process count 195 >= 20, skip the spawn request\" where \"195\" can be \"25\", \"201\", \"345\" etc (I have 600 VirtualHosts and MaxProcessCount set to 20), i.e. sometimes Apache permit spawn of new process, sometimes - not.  The probability of permitting is low if amount of http queries (on different VritualHosts) is high.\n\nI've looked on fcgid_proctbl_unix.c and found line \"g_proc_array = _global_memory->procnode_array;\" (g_proc_array used in is_spawn_allowed via g_stat_list_header), if _global_memory not set before this line, it may cause the issue I see.\n\nSorry if I completely wrong with my guesses, I just want to share my experience with this problem.  I have no experience with system programming at all (an I have no C knowledge), so please don't trust me ;)\n\n\n\nPS: the patch:\n$ diff -u fcgid_spawn_ctl.c.orig fcgid_spawn_ctl.c\n--- fcgid_spawn_ctl.c.orig\t2010-03-26 13:33:36.000000000 +0600\n+++ fcgid_spawn_ctl.c\t2010-03-26 13:34:13.000000000 +0600\n@@ -146,6 +146,14 @@\n \tif (!command || !g_stat_pool)\n \t\treturn 1;\n \n+        /* Total process count higher than up limit? */\n+        if (g_total_process >= g_max_process) {\n+          ap_log_error(APLOG_MARK, APLOG_NOTICE, 0, main_server,\n+                       \"mod_fcgid: %s total process count %d >= %d, skip the spawn request\",\n+                       command->cgipath, g_total_process, g_max_process);\n+          return 0;\n+        }\n+\n \t/* Can I find the node base on inode, device id and share group id? */\n \tfor (current_node = g_stat_list_header;\n \t\t current_node != NULL; current_node = current_node->next) {\n@@ -180,14 +188,6 @@\n \t\t\treturn 0;\n \t\t}\n \n-\t\t/* Total process count higher than up limit? */\n-\t\tif (g_total_process >= g_max_process) {\n-\t\t\tap_log_error(APLOG_MARK, APLOG_NOTICE, 0, main_server,\n-\t\t\t\t\t\t \"mod_fcgid: %s total process count %d >= %d, skip the spawn request\",\n-\t\t\t\t\t\t command->cgipath, g_total_process, g_max_process);\n-\t\t\treturn 0;\n-\t\t}\n-\n \t\t/*\n \t\t   Process count of this class higher than up limit?\n \t\t */", "attachment_id": null}, {"count": 5, "tags": [], "text": "Oh, just a comment about php-cgi processes state - in my case there is no one Error or Zombie php-cgi process.", "is_private": false, "id": 135659, "creation_time": "2010-03-26T08:12:48Z", "time": "2010-03-26T08:12:48Z", "creator": "rkosolapov@gmail.com", "bug_id": 48981, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "erno.kovacs@freemail.hu", "text": "Same problem exists using mpm prefork, so its NOT a worker related problem.", "count": 6, "id": 135733, "time": "2010-03-28T21:10:04Z", "bug_id": 48981, "creation_time": "2010-03-28T21:10:04Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 48981, "is_private": false, "text": "I added some extra debug lines to fcgid_spawn_ctl.c's is_spawn_allowed function, the function returns 1 at:\n\n    if (!current_node)\n        return 1;", "id": 135734, "time": "2010-03-28T21:15:07Z", "creator": "erno.kovacs@freemail.hu", "creation_time": "2010-03-28T21:15:07Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 48981, "attachment_id": null, "text": "I think I got the bug. I am using mass vhost (mod_vhost_cd, but it prolly doesnt really matter), no <Virtualhost> stuff.\n\nI added some more debug lines to is_spawn_allowed:\n\n\n       ap_log_error(APLOG_MARK, APLOG_WARNING, 0, main_server,\n                 \"COMMAND: inode %d, deviceid %d share_grp_id %d virtualhost %s uid %d gid %d\",\n          (int) command->inode,\n          (int) command->deviceid,\n          (int) command->share_grp_id,\n          command->virtualhost,\n          (int) command->uid,\n          (int) command->gid\n       );\n\n    /* Can I find the node base on inode, device id and share group id? */\n    for (current_node = g_stat_list_header;\n         current_node != NULL; current_node = current_node->next) {\n\n       ap_log_error(APLOG_MARK, APLOG_WARNING, 0, main_server,\n                 \"NODE: inode %d, deviceid %d share_grp_id %d virtualhost %s uid %d gid %d\",\n          (int) current_node->inode,\n          (int) current_node->deviceid,\n          (int) current_node->share_grp_id,\n          current_node->virtualhost,\n          (int) current_node->uid,\n          (int) current_node->gid\n       );\n\n        if (current_node->inode == command->inode\n            && current_node->deviceid == command->deviceid\n            && current_node->share_grp_id == command->share_grp_id\n            && current_node->virtualhost == command->virtualhost\n            && current_node->uid == command->uid\n            && current_node->gid == command->gid)\n        {\n           ap_log_error(APLOG_MARK, APLOG_WARNING, 0, main_server,\n                 \"NODE FOUND!\" );\n            break;\n        }\n    }\n\n    if (!current_node)\n    {\n       ap_log_error(APLOG_MARK, APLOG_WARNING, 0, main_server,\n                 \"SPAWNING ALLOWED: !current_node\");\n       return 1;\n    }\n    else {\n...\n\n\n\n\nat first php request:\n\n[Sun Mar 28 23:44:26 2010] [warn] COMMAND: inode 26113935, deviceid 2309 share_grp_id 1 virtualhost  uid 65534 gid 65534\n[Sun Mar 28 23:44:26 2010] [warn] SPAWNING ALLOWED: !current_node\n\nat second request:\n\n[Sun Mar 28 23:41:59 2010] [warn] COMMAND: inode 26113935, deviceid 2309 share_grp_id 1 virtualhost  uid 65534 gid 65534\n[Sun Mar 28 23:41:59 2010] [warn] NODE: inode 26113935, deviceid 2309 share_grp_id 1 virtualhost  uid 65534 gid 65534\n[Sun Mar 28 23:41:59 2010] [warn] SPAWNING ALLOWED: !current_node\n\n\nAs you can see there was no NODE FOUND tho all integer based entries are the same. This means virtualhost is the same string but not on the same memory address.\n\nAfter commenting out the line\n && current_node->virtualhost == command->virtualhost\n\nat second request we got:\n[Sun Mar 28 23:52:50 2010] [warn] COMMAND: inode 26113935, deviceid 2309 share_grp_id 1 virtualhost  uid 65534 gid 65534\n[Sun Mar 28 23:52:50 2010] [warn] NODE: inode 26113935, deviceid 2309 share_grp_id 1 virtualhost  uid 65534 gid 65534\n[Sun Mar 28 23:52:50 2010] [warn] NODE FOUND!", "id": 135736, "time": "2010-03-28T21:54:26Z", "creator": "erno.kovacs@freemail.hu", "creation_time": "2010-03-28T21:54:26Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 48981, "is_private": false, "text": "Ok, I recommend some FcgidNoVhostCheckInProcMgr option with default value off.\nOpinions?", "id": 135787, "time": "2010-03-30T11:00:36Z", "creator": "erno.kovacs@freemail.hu", "creation_time": "2010-03-30T11:00:36Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "Dont want to fix this issue?", "is_private": false, "id": 136239, "creation_time": "2010-04-19T08:08:52Z", "time": "2010-04-19T08:08:52Z", "creator": "erno.kovacs@freemail.hu", "bug_id": 48981, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "trawick@apache.org", "text": ">Dont want to fix this issue?\n\nI haven't had time yet to sort through the related issues; I guess noone else has either.  Here's another perspective that ends up in the same code:\n\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/201004.mbox/%3Cq2l81403a941004131831lce28460bqfc9fa53c2058e79b@mail.gmail.com%3E", "count": 11, "id": 136240, "time": "2010-04-19T08:29:22Z", "bug_id": 48981, "creation_time": "2010-04-19T08:29:22Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 48981, "text": "(In reply to comment #4)\n> I just discovered the same problem on Fedora 11 (mod_fcgid 2.2).  The following\n> patch solves the concrete problem, but it should not be considered as proposed\n> one.  It works for me, so it may be used as temporary solution.\n> \n> In the patch I just move check of amount of run processes into beginning of\n> is_spawn_allowed function.\n\nYour patch looks correct to me.  I expect to commit shortly.\n> \n> My guess is there is some race condition (the situation that I see in logs\n> leads me to that).\n\nThe oddity (not a race condition in the normal sense) is that the limit will be ignored when no instance of the process we're trying to start is currently active.", "count": 12, "id": 136538, "time": "2010-04-29T16:36:06Z", "creator": "trawick@apache.org", "creation_time": "2010-04-29T16:36:06Z", "is_private": false}, {"count": 13, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "text": "The patch in this PR was updated to work with the current source and is now committed with revision 939478.", "id": 136539, "time": "2010-04-29T16:44:38Z", "bug_id": 48981, "creation_time": "2010-04-29T16:44:38Z", "is_private": false}]
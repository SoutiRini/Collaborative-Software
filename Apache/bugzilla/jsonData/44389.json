[{"count": 0, "tags": [], "bug_id": 44389, "attachment_id": null, "id": 113604, "time": "2008-02-11T02:03:09Z", "creator": "drodriguez@altiria.com", "creation_time": "2008-02-11T02:03:09Z", "is_private": false, "text": "Hi,\n\n   I am memory profiling a webapp for my company because we suspect it has\nmemory leaks when redeploying. This webapp has to be redeployed several times a\nweek for security reasons (most of the time it is undeployed) and the memory\nleaks forced us to shutdown tomcat once a week to avoid OOM exception.\n\n   I'm using jvm1.5 and tomcat 6.0.13 (also tried with 6.0.14 and today with\n6.0.16), and Yourkit as the profiling tool. I have made the test in both linux\nand windows.\n\n   I have created a JMeter test to deploy the app using the manager, make some\nrequest to the app and then undeploy it using again the manager app in a loop.\nAfter some redeployments, I got my OutOfMemoryException. Then I checked with my\nprofiling tool and found that my own classes were correctly destroyed, and the\nclasses retaining more memory were these ones (listed as a heirarchy):\n\n   org.apache.catalina.core.ApplicationContext$DispatchData\n   org.apache.catalina.core.ApplicationContext\nmapper of  org.apache.catalina.core.StandardContext\ncontext of  org.apache.tomcat.util.http.mapper.Mapper\nresources of  org.apache.tomcat.util.http.mapper.Mapper$Context  cache of \norg.apache.naming.resources.ProxyDirContext  cache of \norg.apache.naming.resources.ResourceCache\norg.apache.naming.resources.CacheEntry[]\n\n   The number of objects of each class were exactly the number of times I had\nredeployed the webapp. I have checked the contents of CacheEntry inside\nCacheEntry[] and it has an attribute \"name\" and the contents are the jsps and\ntld files of my app. There are as many CacheEntry with the same jsp attribute as\ntimes the webapp has been reloaded, so I guess there is no cleaning of\nCacheEntry resources at context shutdown.\n\n   To reproduce this, a simple webapp with 2 jsp and a taglibrary can be used.\nDeploy and undeploy it many times so you can see how the count of these objects\ngrows in memory."}, {"count": 1, "tags": [], "text": "Caused by non-static inner class DispatchData in org.apache.cataline.core.ApplicationContext being held in a (non-static) ThreadLocal.\n\nWhile seemingly dispatchData is GC'able, Sun JVM Thread class holds reference to the ThreadLocal object through Thread class. Example path (from jhat):\n\n--> java.lang.ThreadGroup@0x2aa4b85608 (67 bytes)  (field threads:)\n--> [Ljava.lang.Thread;@0x2aa674dda0 (272 bytes) (Element 21 of [Ljava.lang.Thread;@0x2aa674dda0:)\n--> java.lang.Thread@0x2aa6f4b418 (164 bytes) (field threadLocals:)\n--> java.lang.ThreadLocal$ThreadLocalMap@0x2aa6f86d18 (32 bytes) (field table:)\n--> [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;@0x2aa6f86d38 (528 bytes) (Element 16 of [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;@0x2aa6f86d38:)\n--> java.lang.ThreadLocal$ThreadLocalMap$Entry@0x2aa6f87408 (56 bytes) (field value:)\n--> org.apache.catalina.core.ApplicationContext$DispatchData@0x2aa6f87440 (40 bytes) (field this$0:)\n--> org.apache.catalina.core.ApplicationContext@0x2aa6f87b88 (72 bytes)\n\n\nBecause dispatchData field is non-static, what ever it contains is leaked when a particular ApplicationContext is discarded: a new ThreadLocal object is created for each ApplicationContext instance in each Thread, and when the instance is discarded, an unaccessible but still not GC'able reference stays in the JVM's Thread instances that used it.\n\nBecause DispatchData inner class is not static, it also causes a reference to the ApplicationContext instance itself, which leads to catastrophic results, if the ClassLoader of the web app is referencable throught the ApplicationContext.", "attachment_id": null, "id": 114246, "creator": "arto.huusko@logica.com", "time": "2008-03-04T05:26:16Z", "bug_id": 44389, "creation_time": "2008-03-04T05:26:16Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 44389, "text": "Testing with YourKit confirms that making the nested class static fixed the leak.\n\nThanks for the analysis.\n\nThe fix has been applied to trunk and proposed for 6.0.x.", "id": 115563, "time": "2008-04-11T15:36:54Z", "creator": "markt@apache.org", "creation_time": "2008-04-11T15:36:54Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This has been fixed in svn for 6.0.x and will be included in 6.0.17 onwards.", "id": 115652, "time": "2008-04-16T14:56:37Z", "bug_id": 44389, "creation_time": "2008-04-16T14:56:37Z", "is_private": false}]
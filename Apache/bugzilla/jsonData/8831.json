[{"count": 0, "tags": [], "text": "We have run into a few problems in ErrorValve.java which are causing very subtle\ndata corruption in client applications.\n\n1.  First the minor problem:  ErrorReportValve.report() has some inconsistent\nshort-circuit logic.  It will do nothing if:\n    - response is already committed\n    - response code is 1xx Continue\n    - one of two specific 2xx response codes: 200, 204\n    - content not modified response code 304\n\nIf the response code is 2xx, then it is not an error, and ErrorReportValve\nshould return.  Why only 200 and 204?  [In our case, we are doing WebDav, and a\nsuccessful return code is 207 Multi-status.  ErrorReportValve incorrectly\ninterprets this as an error, which leads to the next problem...]\n\n2.  ErrorReportValve modifies headers, tries to write its own HTML error and\nfails, leaves modified headers with original body content.\n\nThis one is really bad.  If ErrorReportValve thinks there is an error, it does\nthe following:\n   - modifies the Content-type of the response to text/html  \n   - generates a big HTML message in a StringBuffer\n   - then it tries to grab a Writer\n\nIf the application has already obtained an OutputStream, then ErrorReportValve's\nattempt will fail with an exception, which is what happened in our case.  To\ncompound the problem, nothing is logged in the catch block of the exception!  \n\nIn our case, this causes our text/xml body to have a Content-type header of\ntext/html, which causes all kinds of trouble - and there is no indication in any\nlogs that there was a problem.\n\nProposed solution:\n------------------\nIt would be safest for ErrorReportValve to either grab the Writer first, before\nany changes are made to the HttpServletResponse.  If that fails, then you could\ncatch the IllegalStateException, and grab an OutputStream and wrap your own\nWriter around it.\n\n*Only after it has a known good Writer* should ErrorReportValve change the\ncontent-type of the response.  That way, there is something visible to the\napplication that is more clear that Catalina considers something to be wrong and\nthe corruption to the response that ErrorReportValve has introduced is\nintentional, obvious, and thus rapidly fixable, rather than subtle and nearly\nundetectable.", "is_private": false, "bug_id": 8831, "id": 15558, "time": "2002-05-06T18:08:01Z", "creator": "sjm@teamon.com", "creation_time": "2002-05-06T18:08:01Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 15561, "time": "2002-05-06T19:54:22Z", "bug_id": 8831, "creation_time": "2002-05-06T19:54:22Z", "text": "Yes, I agree. This is how the code behaves now in 4.0.4 and 4.1.x.\n\nThe current logic is:\n\n            Writer writer = response.getReporter();\n\n            if (writer != null) {\n\n                try {\n                    hres.setContentType(\"text/html\");\n                } catch (Throwable t) {\n                    if (debug >= 1)\n                        log(\"status.setContentType\", t);\n                }\n\n                // If writer is null, it's an indication that the response has\n                // been hard committed already, which should never happen\n                writer.write(sb.toString());\n                writer.flush();\n\n            }"}, {"count": 2, "text": "What about a successful WebDAV return code of 207 being considered an error?", "bug_id": 8831, "attachment_id": null, "id": 15562, "time": "2002-05-06T20:17:04Z", "creator": "sjm@teamon.com", "creation_time": "2002-05-06T20:17:04Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "You have to base your decision on something. The valve won't append any report\nin that case anyway. What the valve actually is is that it generates status\nreports AND error reports. For the statuses <400, when the response is not an\nerror and the exception is null, it is a status report (a convinience feature).", "attachment_id": null, "id": 15564, "creation_time": "2002-05-06T21:07:05Z", "time": "2002-05-06T21:07:05Z", "creator": "remm@apache.org", "bug_id": 8831, "is_private": false}, {"count": 4, "tags": [], "creator": "sjm@teamon.com", "attachment_id": null, "is_private": false, "id": 15577, "time": "2002-05-06T22:44:19Z", "bug_id": 8831, "creation_time": "2002-05-06T22:44:19Z", "text": "Looking at revision 1.9 of ErrorReportValve.java, which is the most recent in\nViewCVS, I see the following in report() method:\n\n        // Do nothing on a 1xx status\n        if (statusCode < 200)\n            return;\n        // Do nothing on an OK status\n        if (statusCode == HttpServletResponse.SC_OK)\n            return;\n        // Do nothing on a NOT MODIFIED status\n        if (statusCode == HttpServletResponse.SC_NOT_MODIFIED)\n            return;\n        // Do nothing on a NO CONTENT status\n        if (statusCode == HttpServletResponse.SC_NO_CONTENT)\n            return;\n\nI don't see anything to confirm the statement, \"For the statuses <400, when the\nresponse is not an error and the exception is null, it is a status report (a\nconvinience feature).\"  The only response codes that are passed along unharmed\nare 200, 204, and 304.\n\nThere appears to be an intention to see if the response code is an \"error\" in\nthe call to hresponse.isError(), but that is commented out.\n\nPlease confirm the following:\n1. If my servlet returns a 207, ErrorReportValve will still consider this to be\nan error, and continue down the code path to generate an HTML response\n(regardless whether it is error report or status report).\n\n2. The only reason that my output will not be changed is due to the following\nsequence of events occur in the right order:\n  - my servlet calls HttpServletResponse.getOutputStream()\n  - therefore later calls to getWriter() fail\n  - as a result response.getReporter() either returns null or throws exception\n  - this blasts us around the block (i.e. dodge a bullet)\n\nStated another way, the possibility of data corruption still exists:\n\nIf my servlet had instead called getWriter() instead of getOutputStream(), then\nresponse.getReporter() would not have returned null, and so the content-type\nwould be forcibly changed, and the generated HTML would be written to the client.\n\nIt seems to be very counter intuitive to have the container behave one way if\nyou just so happen to call getWriter() than if you call getOutputStream(), no? \nPlease show where I am wrong."}, {"count": 5, "tags": [], "bug_id": 8831, "is_private": false, "text": "As I said, this valve is also used to generate status reports, for all the\nstatus codes for which the spec actually allows a body. This is allowed by the\nspecificication, and desirable.\nFor a legitimate use case, the possibiltiy of data corruption does not exist.\n\nJust in case, getReporter does not return the same thing as getWriter.", "id": 15578, "time": "2002-05-06T22:56:26Z", "creator": "remm@apache.org", "creation_time": "2002-05-06T22:56:26Z", "attachment_id": null}, {"count": 6, "text": "Is WebDav not a legitamite use case?  I think there is a very large community\nthat would not agree with your statement!  I didn't see a smiley face, so you\nmust be serious...\n\nRFC 2616 for HTTP/1.1 defines the following valid response codes:\n   1. 200 OK ... 10.2.1\n   2. 201 Created ... 10.2.2\n   3. 202 Accepted ... 10.2.3\n   4. 203 Non-Authoritative Information ... 10.2.4\n   5. 204 No Content ... 10.2.5\n   6. 205 Reset Content ... 10.2.6\n   7. 206 Partial Content ... 10.2.7\n\nIt also says that any response code below 400 is not an error.\n\nRFC 2518 WebDAV defines 207 Multi-status and some others.\n\nWhich spec do you refer to?\n\nHow about this: if you insist on generating either error or report for \"all\nstatus codes for which the spec actually allows a body\", how about only limiting\nit to the status codes defined by the RFC 2616, and leaving the others unchanged?\n\nI think that would meet your intended behavior, but still not make changes to\nstatus codes defined in HTTP extensions such as WebDAV.\n\n(Not reopening bug this go-around...  :-)", "bug_id": 8831, "attachment_id": null, "id": 15586, "time": "2002-05-06T23:21:14Z", "creator": "sjm@teamon.com", "creation_time": "2002-05-06T23:21:14Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "Looks like my comments don't get sent unless I reopen, so reopening.  \n\nRemy, please address my questions above.", "is_private": false, "id": 15645, "creation_time": "2002-05-07T16:29:34Z", "time": "2002-05-07T16:29:34Z", "creator": "sjm@teamon.com", "bug_id": 8831, "attachment_id": null}, {"count": 8, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 15660, "time": "2002-05-07T19:59:53Z", "bug_id": 8831, "creation_time": "2002-05-07T19:59:53Z", "is_private": false, "text": "If you want to discuss possible issues (which are non-issues here), do not use\nbugzilla, but either tomcat-dev or tomcat-user.\nThis \"bug\" is not a bug, it is normal behavior, and will not be addressed.\n\nNote 1: Before you accuse me of not caring about WebDAV, you should read the\n\"whoweare\" page. Thanks.\nNote 2: If you still don't like the error report valve, you can disable it.\nNote 3: I'll ignore this bug report from now on."}]
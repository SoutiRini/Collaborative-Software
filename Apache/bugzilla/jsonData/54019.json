[{"count": 0, "tags": [], "bug_id": 54019, "attachment_id": null, "is_private": false, "id": 162792, "time": "2012-10-17T10:41:30Z", "creator": "frederic.arnoud@gmail.com", "creation_time": "2012-10-17T10:41:30Z", "text": "Note: I'll use coyoteRequest (resp. coyoteResponse) where in code it's req (resp. res), it just to help because there's also the connectorRequest (resp. connectorResponse).\n\nCoyoteAdapter checks coyoteRequest (resp. coyoteResponse) notes content in CoyoteAdapter method service(coyoreRequest, coyoteResponse):\n        Request request = (Request) req.getNote(ADAPTER_NOTES);\n        Response response = (Response) res.getNote(ADAPTER_NOTES);\n\nIf they exist, it will not create a new one and set it as note in coyoteRequest (resp. coyoteResponse):\n        if (request == null) {\n            ...\n            // Set as notes\n            req.setNote(ADAPTER_NOTES, request);\n            res.setNote(ADAPTER_NOTES, response);\n            ...\n        }\n\nThere's no change later on theses notes, so recycle must work for them!\n\nBut (here the but): coyoteRequest (resp. coyoteResponse) will not recycle theses notes.\n\nSide effect of bug: in some cases (in my case it's for IOException while using Comet API):\n1) I can get the request attributes of previous request\n2) My output buffer in response is corrupted, on first access like setBufferSize I got an IllegalStateException buffer already commited (today I'm not sure if it's the root cause, but now I can't reproduce it with my fix).\n3) Side effect also on traditional servlet (and JSP for sure!).\n\n\n\nFix (for me, below a general fix):\n==================================\nI added this in org.apache.coyote.Request at end of recycle() method:\n        for(Object note : notes) {\n            if (note instanceof org.apache.catalina.connector.Request) {\n                ((org.apache.catalina.connector.Request) note).recycle();\n            }\n        }\n\nAnd this in org.apache.coyote.Response at end of recycle() method:\n        for(Object note : notes) {\n            if (note instanceof org.apache.catalina.connector.Response) {\n                ((org.apache.catalina.connector.Response) note).recycle();\n            }\n        }\n\n\n\nFinal fix need a solution like (since notes will not use only connector Request and Response):\n1) Create a new Recyclable interface like:\npublic interface Recyclable {\n        void recycle();\n}\n\n2) Change some object that could be used in notes (but maybe all recyclable objects) to implements this interface:\n        package org.apache.coyote;\n        ...\n        public final class Response implements Recyclable {\n        ...\n        }\nand:\n        package org.apache.coyote;\n        ...\n        public final class Request implements Recyclable {\n        ...\n        }\n\n3) Do this in recycle method for org.apache.coyote.Request and Response:\n        for(Object note : notes) {\n            if (note instanceof Recyclable) {\n                ((Recyclable) note).recycle();\n            }\n        }\n\n\n\nIMPORTANT: THIS HAPPENS ALSO ON TOMCAT 6!\n\n\n\nbest regards\nf.arnoud"}, {"count": 1, "text": "Recycling via the notes is not the answer.\n\nThe request and response objects should be correctly recycled between requests in all circumstances. If you provide details of how to reproduce the issue you saw with an IOException with Comet then this issue can be investigated and and missing recycle calls added.", "bug_id": 54019, "attachment_id": null, "id": 162814, "time": "2012-10-18T13:52:56Z", "creator": "markt@apache.org", "creation_time": "2012-10-18T13:52:56Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 54019, "attachment_id": null, "is_private": false, "id": 162928, "time": "2012-10-25T12:22:08Z", "creator": "markt@apache.org", "creation_time": "2012-10-25T12:22:08Z", "text": "Without a reproducible test case, this will eventually get resolved as invalid on the assumption that the root cause is an application bug (there are plenty of ways to trigger this sort of issue by retaining references across requests).\n\nBased on the lack of response to my previous request for information, I am reducing the severity to normal. If this really was critical then I'd expect a faster response than 1 week+."}, {"count": 3, "tags": [], "bug_id": 54019, "attachment_id": null, "id": 162930, "time": "2012-10-25T12:38:42Z", "creator": "frederic.arnoud@gmail.com", "creation_time": "2012-10-25T12:38:42Z", "is_private": false, "text": "I tried to extract the scheme of main application in a shorter test case.\nBut I cannot reproduce it.\n\n1) For the buffer violation:\nI can reproduce it but only if I don't respect the contract (using the buffer after END/ERROR or after an IOException, it's a bug in the web application).\n\n2) For the request attribute:\nI cannot reproduce it, but in the customer application this attribute is set only while processing the BEGIN event. And sometimes, this attribute contains a previous setted value!\n\nFor case 1 or 2, even if it's a web application error, maybe Tomcat must protect his buffer and attribute while it recycles object. I don't know the philosophy, but IMHO something could be wrong here.\n\nA solution, as an option, could be to wrap the servlet request and response and disconnect it totally from background elements since application could use it later. I talk about an option because this need to create new wrappers.\n\nBut without such wrapper, there's a problem with the recycling in a shared server. I thought it was critical to be able to do this.\n\nPersonnaly I fixed this in my application with wrapper, anywhere an error occurs I can completely separate running thread from the real tomcat objects.\nIn this application we have a lot of connections, some could be closed while/before processing the begin event!\n\nregards,\nfred"}, {"count": 4, "tags": [], "bug_id": 54019, "attachment_id": null, "id": 162943, "time": "2012-10-25T19:13:37Z", "creator": "markt@apache.org", "creation_time": "2012-10-25T19:13:37Z", "is_private": false, "text": "The option already exists. Try with starting Tomcat with -Dorg.apache.catalina.connector.RECYCLE_FACADES=true\n\nSee http://tomcat.apache.org/tomcat-7.0-doc/config/systemprops.html#Security\n\nGiven that the issue went away with a wrapper, that strongly suggests an application error so I am closing this as invalid. If you find evidence that points to a Tomcat bug feel free to re-open this."}]
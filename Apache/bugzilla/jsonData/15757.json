[{"count": 0, "tags": [], "creator": "j-devenish@users.sourceforge.net", "attachment_id": null, "id": 28815, "time": "2003-01-02T07:25:58Z", "bug_id": 15757, "creation_time": "2003-01-02T07:25:58Z", "is_private": false, "text": "ints are being cast to/from void*s. I don't use the DAV module (well, I tried a\nlong time ago but it crashed, perhaps for different reasons) so I don't know\nthe practical impact of this. However, it's the sort of thing that can be\nexpected to cripple software by causing memory corruption.\n\nmain/liveprop.c:\n\n83 gstein   1.5  value = (int)apr_hash_get...\n90 gstein   1.5  apr_hash_set(...\n91               ...(void *)++dav_liveprop_count);\n96 gstein   1.5  return (int)apr_hash_get...\n110              void *val;\n115 trawick 1.10 s = apr_psprintf(p, \" xmlns:lp%d=\\\"%s\\\"\", (int)val...\n\nfs/dbm.c:\n\n345 gstein  1.19 int ns_id = (int)apr_hash_get...\n499 gstein  1.19 (void *)ns);\n609 gstein  1.19 int ns_id = (int)apr_hash_get(db->uri_index, uri, uri_len);\n619 gstein  1.19 (void *)(db->ns_count + 1));\n\nfs/repos.c:\n\n2000 gstein  1.1 *context = (void *)(value == 'T');\n2042 gstein  1.1 *rollback_ctx = (dav_liveprop_rollback *)old_value;"}, {"text": "It is fine to store an int in a pointer, whether or not they are the same size.\n Unfortunately this results in compiler warnings with some compilers in 64-bit\nmode, even with proper casts.  This is not the only place in Apache with this\nissue IIRC.\n\nIf you find us trying to store a pointer in an int, please let us know!\n\nThanks for using Apache!\n ", "tags": [], "bug_id": 15757, "attachment_id": null, "count": 1, "id": 47799, "time": "2003-11-21T17:12:36Z", "creator": "trawick@apache.org", "creation_time": "2003-11-21T17:12:36Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 15757, "attachment_id": null, "text": "Hrm. Not really. The behaviour is implementation defined. Integers may be\ninvalid bit patterns in a pointer and cause a bus error (worst case, sure).\n\nIn fact, I'm also not happy with the (void *)1 things used as configuration\nflags ...\n\nWe should avoid such patterns wherever possible.", "id": 47822, "time": "2003-11-21T17:56:04Z", "creator": "nd@perlig.de", "creation_time": "2003-11-21T17:56:04Z", "is_private": false}, {"count": 3, "tags": [], "creator": "trawick@apache.org", "text": ">Integers may be invalid bit patterns in a pointer and cause a bus error \n>(worst case, sure).\n\nYou mean that something like this can cause a bus error?\n\nvoid *x;  x = (void *)1;\n", "id": 47825, "time": "2003-11-21T18:03:09Z", "bug_id": 15757, "creation_time": "2003-11-21T18:03:09Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "nd@perlig.de", "text": "Yep. At least according to the folks in comp.lang.c :-) In reality it currently\n(!) doesn't occur.\n\nIt seems also logical to me. Think about 1 not being a valid address on a\nparticular system.", "id": 47864, "time": "2003-11-21T20:00:10Z", "bug_id": 15757, "creation_time": "2003-11-21T20:00:10Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 47867, "time": "2003-11-21T20:12:34Z", "bug_id": 15757, "creation_time": "2003-11-21T20:12:34Z", "is_private": false, "text": ">It seems also logical to me. Think about 1 not being a valid \n>address on a particular system.\n\nbut no code ever uses that 1 as a pointer...  the hash table code treats the 1\n(or a valid pointer, or whatever is stored) as a value\n"}, {"count": 6, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "id": 47886, "time": "2003-11-21T22:21:42Z", "bug_id": 15757, "creation_time": "2003-11-21T22:21:42Z", "is_private": false, "text": "Hmm. What happens if a system loads that (possibly) invalid value into a cpu\naddress register? Undefined behaviour IMHO.\n\nHowever, if we see bus errors on 64 bit systems they *may* come from such code... :)"}, {"count": 7, "tags": [], "bug_id": 15757, "attachment_id": null, "id": 47909, "creation_time": "2003-11-22T01:58:23Z", "time": "2003-11-22T01:58:23Z", "creator": "j-devenish@users.sourceforge.net", "text": "Perhaps the summary of this bug should be changed, since it may be a\ntechnical problem even when sizeof(void*) == sizeof(int). My original\nsummary was probably naive.\n\n> It is fine to store an int in a pointer, \n> whether or not they are the same size.\n\nNope, pointers are scalars but they are not arithmetic scalars. Storing\nan int in pointer storage is not guaranteed like sorting an int in long\nstorage presumably is. In particular, I think, the semantics of storing\nan int in pointer storage are undefined in C. (I suspect that the null\npointer is a special case.) The WebDAV code assumes the int values will\nbe aligned 'correctly' within the pointer storage and that the bytes\nwill be in the 'right' order. I think that if x is (void*), and y is\n(int) and (y == 2) is true, then (x = (void*)y) does not necessarily\nlead to (((int)x) == 2) being true, even though it *often* would. (I\ndon't know why anyone would have an architecture for which this was not\ntrue.) Nevertheless, it would be legal for the semantics to vary between\ndifferent compilers (and ABIs?) on different platforms. Other projects\nhave got their knickers in a knot over things like this, because it is\neasily abused. For example, their developers have begun using\nexpressions like (*(int*)x), where x is (void*). This is unlikely to be\nportable (e.g. even if you ignore the 'semantics of poking an int into a\npointer are undefined' problem, you might just consider endianism\nissues). Other projects have actually introduced crashes by being loose\nwith things like this (though, as has been pointed out, assignment\nitself is not likely to produce crashes, unless there is some sort of\nruntime bounds check in operation).\n\n> This is not the only place in Apache with this issue IIRC.\n\nWithout meaning to sound rude or arrogant, it sounds like the problem is\ngetting worse, then.\n\n", "is_private": false}, {"count": 8, "tags": [], "creator": "davi@apache.org", "text": "Committed to trunk as r239422 and r239423.\n\nhttp://svn.apache.org/viewvc?view=rev&revision=239422\nhttp://svn.apache.org/viewvc?view=rev&revision=239423", "id": 104230, "time": "2007-06-08T12:54:02Z", "bug_id": 15757, "creation_time": "2007-06-08T12:54:02Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "text": "I have written a simple compression filter that provides a response wrapper as \na stand-in for the 'real' response object, using HttpServletResponseWrapper as \nits superclass.  I gzip the response data before it is sent to the client.\n\nThis response wrapper is being used for all requests to the web-app EXCEPT \nthose which trigger a 404 -- I have mapped an error-page to 404.  In that case, \norg.apache.coyote.tomcat4.CoyoteResponseFacade is being used instead of the \nresonse wrapper object.  The log file shows an IllegalStateException: \ngetOutputStream() has already been called for this response -- this is \ngenerated by /jsp/404.jsp's implementation servlet.\n\nNOTE that pointing browser directly at /jsp/404.jsp results in correct \nbehavior, i.e., the response wrapper is being used.\n\nweb.xml:\nfilter-mapping set to /*\nerror-page error-code is 404\nerror-page location is /jsp/404.jsp", "bug_id": 22141, "attachment_id": null, "id": 42177, "time": "2003-08-05T16:50:29Z", "creator": "jrostosk@learningpatterns.com", "creation_time": "2003-08-05T16:50:29Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 22141, "attachment_id": null, "text": "Error page processing works like this:\n- Request gets processed\n- Then once the processing is done, the response is forwarded to the error page\n(the JSP)\n\nYour filter can't intercept forwards, so it is not invoked.\nAs for the ISE, I think it means just what it means (getOutputStream was already\nused previously, so Jasper doesn't work; I assume that if you had your filter\ninvoked, it would work).\nIn Tomcat 5, you can map a filter to the request dispatcher forward and include,\nwhich would allow you to make it work. I do think, however, that compression\nbelongs to the lower level (the HTTP connector).", "id": 42178, "time": "2003-08-05T17:06:20Z", "creator": "remm@apache.org", "creation_time": "2003-08-05T17:06:20Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 22141, "attachment_id": null, "text": "I am experiencing the exact same behavior in 4.1.29.  My compression filter modifies the response \nobject & calls getOutputStream in order to do that.  I can confirm that my filter is being invoked, as I \nhave logging throughout the doFilter method & can verify that the getOutputStream method is called \nprior to going to an error-page.  Since I have the filter listening on /*, it gets invoked  whether the \nresource exists or not.  If I have an error-page configured for 404 for example, the error-\npage is throwing the IllegalStateException when I request a non-existant resource.\n\nThe only workaround I can find is to either not use the filter or not use the error-page handler.  Neither \nis particularly useful.\n\nI think the key issue here is that the filter we are using is processing not just the request, but also the \nresponse object.  It appears that the request handling process order is filter before error-page handler.  \nSince a filter may alter both a request and a response object, by the time it reaches the error-page \nhandler, the response may have had getOutputStream called in order to do it's work.  The error-page \nhandler needs to support this situation, otherwise filters that modify responses can't be used in \nconjuction with the error-page directive.", "id": 72459, "time": "2005-03-15T21:17:52Z", "creator": "niels_meersschaert@businessweek.com", "creation_time": "2005-03-15T21:17:52Z", "is_private": false}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 72738, "time": "2005-03-21T01:38:13Z", "bug_id": 22141, "creation_time": "2005-03-21T01:38:13Z", "tags": [], "text": "This has changed in the 2.4 spec, I suspect for this very reason. As Remy\nindicated, one option is to use 5.0.x or 5.5.x \n\nI don't see an easy way for Tomcat 4.1.x to handle this. Both the filter that\ncalls getOutputStream() and the subsequent error page that calls getWriter()\n(using a JSP will always result in a call to getWriter()) are both part of the\nwebapp. My instinct is, therefore, that the solution should also be part of the\nwebapp. That being said, if you would like to propose a patch for 4.1.x then\nplease do so - patches are always welcome.\n\nOne approach that is open to you is to use a servlet for your custom error page\nand use getOutputStream().\n\nI am setting the status on this back to INVALID on the basis that the spec, not\ntomcat, is the underlying issue."}]
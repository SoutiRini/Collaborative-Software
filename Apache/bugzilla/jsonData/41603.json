[{"count": 0, "attachment_id": null, "creator": "josborne@exstream.com", "is_private": false, "id": 99340, "time": "2007-02-13T14:25:35Z", "bug_id": 41603, "creation_time": "2007-02-13T14:25:35Z", "tags": [], "text": "file threadtest.py:\nclass threadtester:\n  def __init__( self, list=[] ):\n    self.list = list\n\n\nfile threadtest.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project basedir=\".\" default=\"unix-build-all\" name=\"comp-all\">\n\n  <target name=\"unix-build-all\">\n    <parallel failonany='false'>\n      <antcall target=\"testtarget\">\n        <param name=\"sleep\" value=\"1\" />\n      </antcall>\n      <antcall target=\"testtarget\">\n        <param name=\"sleep\" value=\"2\" />\n      </antcall>\n      <antcall target=\"testtarget\">\n        <param name=\"sleep\" value=\"3\" />\n      </antcall>\n      <antcall target=\"testtarget\">\n        <param name=\"sleep\" value=\"4\" />\n      </antcall>\n      <antcall target=\"testtarget\">\n        <param name=\"sleep\" value=\"5\" />\n      </antcall>\n    </parallel>\n  </target>\n\n  <target name=\"testtarget\">\n    <sleep seconds=\"${sleep}\"/>\n    <threadtest></threadtest>\n  </target>\n\n  <scriptdef name=\"threadtest\" language=\"jython\">\n       <attribute name=\"key\"/>\n<![CDATA[\nfrom threadtest import *\n\ntest = threadtester()\ntest.list.append(\"test\")\nproject.log(\"Beginning thread test...\")\nfor i in test.list:\n  project.log(i)\nproject.log(\"Ending thread test.\\n\\n\")\n\n]]>\n  </scriptdef>\n\n</project>"}, {"count": 1, "tags": [], "bug_id": 41603, "text": "First of all, why would the ant development team be responsible for the thread\nsafety of external jython classes?\n\nWhen running your example i get the following output (reproducible)\n\nBuildfile: build2.xml\n\nmain2:\n\ntesttarget:\n\ntesttarget:\n\ntesttarget:\n\ntesttarget:\n\ntesttarget:\nBeginning thread test...\ntest\nEnding thread test.\n\n\nBeginning thread test...\ntest\ntest\nEnding thread test.\n\n\nBeginning thread test...\ntest\ntest\ntest\nEnding thread test.\n\n\nBeginning thread test...\ntest\ntest\ntest\ntest\nEnding thread test.\n\n\nBeginning thread test...\ntest\ntest\ntest\ntest\ntest\nEnding thread test.\n\n\n\nBUILD SUCCESSFUL\nTotal time: 5 seconds\n\nWhich seems ok from the provided scripts, when comparing to the following scripts:\ntest = threadtester()\ntest.list.append(\"test\")\ntest = threadtester()\ntest.list.append(\"test\")\ntest = threadtester()\ntest.list.append(\"test\")\ntest = threadtester()\ntest.list.append(\"test\")\ntest = threadtester()\ntest.list.append(\"test\")\nfor i in test.list:\n  project.log(i)\n\nwhich also prints the line \"test\" 5 times\n\nwhen creating test = threadtester([]) test is only printed once each time, so\nthis really seems (to the innocent bystander at least) to be the normal\nbehaviour for the language, and not dependent on threading or not.\n\n", "id": 99347, "time": "2007-02-13T15:30:58Z", "creator": "jkf@apache.org", "creation_time": "2007-02-13T15:30:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "text": "I was not sure if this was an ant issue or a jython issue so I am reporting the \nbug to both teams.   The interesting thing is that if the threadtester class is \nincluded directly in threadtest.xml then test is only printed once for each \nrun.  Calling threadtest([]) does indeed remedy the problem, but I have run \ninto several issues now where threads are overwriting one another's memory \nwithin scriptdef tasks and this definitely seems to be a problem.\n\nI suppose the question is whether jython is to blame or the jvm implementation?", "bug_id": 41603, "attachment_id": null, "id": 99376, "time": "2007-02-14T06:25:26Z", "creator": "josborne@exstream.com", "creation_time": "2007-02-14T06:25:26Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 41603, "text": "also consider the following script.  It prints a seemingly random number of \n'test' lines each time and occasionally errors out altogether:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project basedir=\".\" default=\"unix-build-all\" name=\"comp-all\">\n\n  <target name=\"unix-build-all\">\n    <parallel failonany='false'>\n      <threadtest></threadtest>\n      <threadtest></threadtest>\n      <threadtest></threadtest>\n      <threadtest></threadtest>\n    </parallel>\n  </target>\n\n  <scriptdef name=\"threadtest\" language=\"jython\">\n       <attribute name=\"key\"/>\n<![CDATA[\nfrom threadtest import *\n\ntest = threadtester()\ntest.list.append(\"test\")\nproject.log(\"Beginning thread test...\")\nfor i in test.list:\n  project.log(i)\nproject.log(\"Ending thread test.\\n\\n\")\n\n]]>\n  </scriptdef>\n\n</project>\n", "id": 99378, "time": "2007-02-14T06:28:03Z", "creator": "josborne@exstream.com", "creation_time": "2007-02-14T06:28:03Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "I dont know what we will do about this. I believe we could (a) link it to the\nother bug about script thread safety and (b) check how other script langauges\nbehave.\n\nWhat I will do right now is highlight that parallel is an exceedingly dangerous\nthing to do. the only 95% safe activity you can do in it is run external stuff\nusing <parallel> or <exec>. It is not meant to be a way to speed up ant.\n\nthere is a small hint of this in the docs, but I have added a big warning to the\nfront that states more clearly, \"play games with parallel and you get to debug\nthe thread safety of the classes you use\"\n\n<p><b>Warning:</b> While the Ant core is believed to be thread safe, no such \n    guarantees are made about tasks, which are not tested for thread safety during\n    ant's test process. \n    Third party tasks may or may not be thread safe, and some of Ant's core\ntasks, such as\n    &lt;javac&gt; are definitely not re-entrant. This is because they use\nlibraries that\n    are not designed to be used in a multithreaded environment.\n</p>\n<p>\n    The primary use case for &lt;parallel&gt; is to run external programs\n    such as an application server, and the JUnit or TestNG test suites at the\n    same time. Anyone trying to run large Ant task sequences in parallel, such\n    as javadoc and javac at the same time, is implicitly taking on the task\n    of identifying and fixing all concurrency bugs in Ant and its tasks.\n</p>", "bug_id": 41603, "attachment_id": null, "id": 99382, "time": "2007-02-14T07:14:11Z", "creator": "stevel@apache.org", "creation_time": "2007-02-14T07:14:11Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 41603, "text": "Marking as \"WONTFIX\", it probally should be \"INVALID\"\nbased on the comments.", "id": 100374, "time": "2007-03-14T03:32:24Z", "creator": "peterreilly@apache.org", "creation_time": "2007-03-14T03:32:24Z", "tags": [], "is_private": false}]
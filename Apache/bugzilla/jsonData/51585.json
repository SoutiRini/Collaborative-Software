[{"count": 0, "tags": [], "creator": "jxz164@hotmail.com", "attachment_id": 27331, "id": 148276, "time": "2011-07-29T15:59:09Z", "bug_id": 51585, "creation_time": "2011-07-29T15:59:09Z", "is_private": false, "text": "Created attachment 27331\nExample xlsx file to reproduce the hang\n\nFor a particular xlsx file, the WorkbookFactory.create() call hangs. I have waited an hour and the call still did not return. Please see the code below and attached xlsx file. I am not sure where the hang comes from or why it is so slow. \n\npackage org.apache.poi.ss.examples;\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.*;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\n\npublic class TestWorkbookFactoryCreate {\n\n    public static void main(String[] args) throws IOException, Exception {\n        FileInputStream fileIn = null;\n\n        try\n            {\n                fileIn = new FileInputStream(\"C:/workspace/TestHang.xlsx\");\n                Workbook wb = WorkbookFactory.create(fileIn);\n                System.out.println(\"Workbook created\");                \n            } finally {\n                if (fileIn != null)\n                    fileIn.close();\n            }\n    }\n    \n}"}, {"count": 1, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 151162, "creation_time": "2011-11-03T19:39:28Z", "time": "2011-11-03T19:39:28Z", "creator": "manish.jindal@accenture.com", "text": "getting the same error for similar code...", "is_private": false}, {"count": 2, "tags": [], "text": "The problem is not in POI. It is JDK that can't read the file. The hang can be reproduced with the following code:\n\n  ZipFile zip =  new ZipFile(\"TestHang.xlsx\");\n\nSo, something is wrong with the underlying zip archive.  We rely on JDK to open OOXML files and I don't see a problem on the  POI side.\n\nDo you know any details how the problematic file was produced? Version of Excel, OS, etc. Was the file unzipped / modified and zipped back ? \n\nPS. I'm testing on Windows 7 and JDK 1.6.26. \n\nYegor", "is_private": false, "bug_id": 51585, "id": 151176, "time": "2011-11-04T09:37:33Z", "creator": "yegor@dinom.ru", "creation_time": "2011-11-04T09:37:33Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 162530, "creation_time": "2012-10-03T04:51:46Z", "time": "2012-10-03T04:51:46Z", "creator": "val235@gmail.com", "text": "I have the same problem as described. WorkbookFactory.create() hangs with a file I have localy and the sample file provided in this bug report.\n\nI am able to parse the underlying zip files and read their contents without any issue, so the problem is NOT related to ZIP corruption.\n\ntry {\n\tZipFile zip =  new ZipFile(\"C:\\\\TestHang.xlsx\");\n\tList<ZipEntry> entries = (List<ZipEntry>) Collections.list(zip.entries());\n\t\t\t  \n\tfor ( ZipEntry ze:entries){\n\t\tSystem.out.println(\"-------> \"+ze.getName());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getComment());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getCompressedSize());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getCrc());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getMethod());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getSize());\n\t\tSystem.out.println(\"\\t -------> \"+ze.getTime());\n\t\t\t\t\n\t\tInputStream is = zip.getInputStream(ze);\n\t\t\n\t\tStringWriter writer = new StringWriter(); \n\t\tIOUtils.copy(is, writer);  \n\n\t\tSystem.out.println(writer.toString());\n\t\t\t\t\n\t}\n\t\t\n} catch (IOException e) {\n\te.printStackTrace();\n}", "is_private": false}, {"count": 4, "tags": [], "creator": "val235@gmail.com", "attachment_id": null, "id": 162548, "time": "2012-10-03T18:49:51Z", "bug_id": 51585, "creation_time": "2012-10-03T18:49:51Z", "is_private": false, "text": "Ok after some debugging, I can see that the code hangs on some very inffecient looping code centered at ColumnHelper.cleanColumns() and ColumnHelper.addCleanColIntoCols(CTCols, CTCol)\n\nThe attached example xlsx for example has some 10000 column definitons in its xml structure. The ridiculous looping code, starts to loop over 10000 records, and then calls some inner loop(s) which have the potential to loop 10000 times themselves, and as well as for every iteration of the loop, it also tries to sort that same list of columns which can have upto 10000 entries. \n\nThere is no infinite loops or anything of the sort. Just some poorly designed iteration code. The call would eventually finish, but who knows how long it will take. The complexity and size of the list being iterated grows exponentially, and after about the first 1100 columns it slow to a crawl, Im guessing the complexity of this looping process is something like n^3\n\nI have worked out some changes to ColumnHelper coupled with Proxy classes for CTCol and CTCols and was able to complete workbook creation in seconds. Will post sample code later. Probably needs a patch in the codebase."}, {"count": 5, "tags": [], "bug_id": 51585, "attachment_id": 29462, "text": "Created attachment 29462\nAltered ColumnHelper, that uses the CTCol and CTCols proxies\n\n-slight modification to the ColumnHelper class, so that it uses proxies for classes CTCol and CTCols (also attached) significantly speeding up the looping code that tries to handle column overlaps", "id": 162628, "time": "2012-10-08T18:46:49Z", "creator": "val235@gmail.com", "creation_time": "2012-10-08T18:46:49Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 51585, "text": "Created attachment 29463\nproxy for CTCols that maintains max and min values\n\n-original CTCols just maintains a list of CTCol objects, so if u everytime u need to tell the min col and max col ranges, you needed to iterate over all the columns, this is what was so time consuming. This CTColsProxy maintains min and max which is expected to be updated everytime a setMax or setMin is called on the container columns", "id": 162629, "time": "2012-10-08T18:49:13Z", "creator": "val235@gmail.com", "creation_time": "2012-10-08T18:49:13Z", "is_private": false, "attachment_id": 29463}, {"count": 7, "tags": [], "creator": "val235@gmail.com", "text": "Created attachment 29464\n- proxy for CTCol that maintain a reference to the CTCols its contained in and updates min and max\n\nOriginal CTCol had no knowledge of the CTCols object its mainted in, ie one directional relationship. This proxy adds a CTColsProxy property which is expected to be the parent CTCols object. Whenever a setMin or setMax is called on the CTCol[Proxy] the CTCols[Proxy] min/max value is also maintained", "id": 162630, "time": "2012-10-08T18:52:13Z", "bug_id": 51585, "creation_time": "2012-10-08T18:52:13Z", "is_private": false, "attachment_id": 29464}, {"count": 8, "tags": [], "bug_id": 51585, "text": "Attached 3 classes, that significantly sped up my processing, example xlsx as well my problematics files now all parse in about a second.\n\nColumnHelper is a modified version of org.apache.poi.xssf.usermodel.helpers.ColumnHelper while the other two classes, CTColProxy and CTColsProxy are brand new.", "id": 162631, "attachment_id": null, "creator": "val235@gmail.com", "creation_time": "2012-10-08T18:54:06Z", "time": "2012-10-08T18:54:06Z", "is_private": false}, {"count": 9, "tags": [], "creator": "yegor@dinom.ru", "text": "Thanks for the patch. I added it to my punch list.\n\nYegor\n\n(In reply to comment #8)\n> Attached 3 classes, that significantly sped up my processing, example xlsx\n> as well my problematics files now all parse in about a second.\n> \n> ColumnHelper is a modified version of\n> org.apache.poi.xssf.usermodel.helpers.ColumnHelper while the other two\n> classes, CTColProxy and CTColsProxy are brand new.", "id": 162690, "time": "2012-10-11T11:31:41Z", "bug_id": 51585, "creation_time": "2012-10-11T11:31:41Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 51585, "text": "The patch needs some work.\n\n3 tests failed:\n\norg.apache.poi.xssf.usermodel.TestXSSFSheet.testGroupUngroupColumn\norg.apache.poi.xssf.usermodel.TestXSSFSheet.testSetColumnGroupCollapsed\norg.apache.poi.xssf.usermodel.helpers.TestColumnHelper.testAddCleanColIntoCols\n\nPlease re-visit your code and ensure that all tests pass or give sensible explanation why the new logic produces different results.\n\nYegor\n\n\n(In reply to comment #8)\n> Attached 3 classes, that significantly sped up my processing, example xlsx\n> as well my problematics files now all parse in about a second.\n> \n> ColumnHelper is a modified version of\n> org.apache.poi.xssf.usermodel.helpers.ColumnHelper while the other two\n> classes, CTColProxy and CTColsProxy are brand new.", "id": 162711, "time": "2012-10-12T10:40:24Z", "creator": "yegor@dinom.ru", "creation_time": "2012-10-12T10:40:24Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 51585, "text": "*** Bug 53250 has been marked as a duplicate of this bug. ***", "id": 162718, "time": "2012-10-12T13:15:39Z", "creator": "yegor@dinom.ru", "creation_time": "2012-10-12T13:15:39Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 51585, "text": "Created attachment 30866\nModified ColumnHelper with efficient algorithm\n\nModified the algorithm that adds new columns and that cleans the columns. The existing code is absolutely atrocious in terms of algorithmic design, has at least n^4 algorithmic complexity where n is the number of columns, which means that for about 1000 columns the code will execute for over an hour. Changed the algorithm to one that uses sweeping, should drop it to about n log n.", "id": 170185, "time": "2013-09-20T07:47:52Z", "creator": "piotr.wilkin@syndatis.com", "creation_time": "2013-09-20T07:47:52Z", "is_private": false, "attachment_id": 30866}, {"count": 13, "tags": [], "bug_id": 51585, "attachment_id": 30867, "id": 170186, "time": "2013-09-20T07:51:50Z", "creator": "piotr.wilkin@syndatis.com", "creation_time": "2013-09-20T07:51:50Z", "is_private": false, "text": "Created attachment 30867\nModified test for column grouping\n\nModified the tests for column grouping that relied on old faulty behavior (line 491: collapsing column 10 should not automagically collapse column 9 which is not grouped with it)."}, {"count": 14, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 171308, "time": "2013-11-19T09:15:20Z", "creator": "samir.ferchiou80@gmail.com", "creation_time": "2013-11-19T09:15:20Z", "is_private": false, "text": "Hello,\n\nI'm lost... I want to know exactly what I have to do to solve this problem. Should I add the two attachments (attachment 30866 and attachment 30867) and rebuild a new jar? This problem is not resolved in the latest version of POI?\n\nPlease help!\n\nThank you in advance."}, {"count": 15, "tags": [], "bug_id": 51585, "text": "(In reply to sam fercios from comment #14)\n> Should I add the two attachments (attachment 30866 [details] and attachment\n> 30867 [details]) and rebuild a new jar? \n\nYes, exactly. You have to replace the respective files in the POI source. \n\n> This problem is not resolved in the latest version of POI?\n\nNo, apparently fixing a gross inefficiency that happens during every load of an XLS file is not high on the list of priorities.", "id": 171310, "time": "2013-11-19T10:22:14Z", "creator": "piotr.wilkin@syndatis.com", "creation_time": "2013-11-19T10:22:14Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 51585, "text": "Thank you very much Wilkin. I made amendments and it works now. So I have to change the status of the bug to \"resolved\".\n\nHope I can help you one day on any subject :)", "id": 171313, "time": "2013-11-19T16:14:36Z", "creator": "samir.ferchiou80@gmail.com", "creation_time": "2013-11-19T16:14:36Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 171314, "creation_time": "2013-11-19T16:27:32Z", "time": "2013-11-19T16:27:32Z", "creator": "apache@gagravarr.org", "text": "Please don't close bugs where the code hasn't yet been committed to SVN", "is_private": false}, {"count": 18, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 171315, "time": "2013-11-19T16:29:53Z", "creator": "apache@gagravarr.org", "creation_time": "2013-11-19T16:29:53Z", "is_private": false, "text": "A patch was originally proposed for this bug, but it had issues and couldn't be applied. Since then, another patch has been proposed, but without explicitly answering some of the queries raised against the original bug, and with a status which continued to be \"NeedInfo\"\n\nIt would be great if someone could confirm if the new patch does fix all the problems flagged against the original, and also if someone could try applying the patch(es) and confirm if all the unit tests still pass, behaviour is correct etc. Those two would greatly speed up the review/accept cycle for getting this applied!"}, {"count": 19, "tags": [], "bug_id": 51585, "attachment_id": null, "text": "ouups,so sorry... I was wrong.", "id": 171316, "time": "2013-11-19T18:29:59Z", "creator": "samir.ferchiou80@gmail.com", "creation_time": "2013-11-19T18:29:59Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 51585, "attachment_id": null, "id": 171317, "time": "2013-11-19T18:38:20Z", "creator": "samir.ferchiou80@gmail.com", "creation_time": "2013-11-19T18:38:20Z", "is_private": false, "text": "The problem must be fixed urgently and attached to new POI versions, otherwise if I will migrate from version 3.9 to 3.10, I will have certainly some troubles that can be very dangerous for my future releases."}, {"attachment_id": null, "tags": [], "bug_id": 51585, "text": "(In reply to Nick Burch from comment #18)\n> It would be great if someone could confirm if the new patch does fix all the\n> problems flagged against the original, and also if someone could try\n> applying the patch(es) and confirm if all the unit tests still pass,\n> behaviour is correct etc. Those two would greatly speed up the review/accept\n> cycle for getting this applied!\n\nLet me clarify: \n\nThe original bug report dealt with the WorkbookFactory.create() call hanging on files with many columns. This was later determined to be simply a complexity issue with slow code in the ColumnHelper.\n\nI made a fix that redoes the ColumnHelper with an efficient algorithm (based on sweeping, see http://en.wikipedia.org/wiki/Sweep_line_algorithm) while still preserving the functionality of the original. I also made sure that the new algorithm passes all unit tests. In the one case where the original tests were not passed, I debugged it on a case-by-case basis to make sure the new behavior was correct. Seeing as the relevant testing code has a comment by the lines of \"I'm not really sure how this is supposed to work\", I do believe that the new behavior is actually the correct one. \n\nI don't think I have the necessary access level needed to push this onto SVN, which is I left the patch on the NEEDINFO status. Hopefully, if some developer verifies this and pushes this to SVN, it can be changed to RESOLVED.", "count": 21, "id": 171341, "time": "2013-11-20T09:22:11Z", "creator": "piotr.wilkin@syndatis.com", "creation_time": "2013-11-20T09:22:11Z", "is_private": false}, {"count": 22, "tags": [], "text": "Sounds like the patch is ready for review, and hopefully applying. I'm tagging as such, so that all POI committers can see it's ready, and hopefully someone will have a chance to look at it shortly!", "attachment_id": null, "bug_id": 51585, "id": 171345, "time": "2013-11-20T11:25:35Z", "creator": "apache@gagravarr.org", "creation_time": "2013-11-20T11:25:35Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 51585, "text": "i am reviewing the patch now, checking code and that all tests passes", "id": 171401, "time": "2013-11-22T18:34:58Z", "creator": "cedric.walter@gmail.com", "creation_time": "2013-11-22T18:34:58Z", "is_private": false, "attachment_id": null}, {"count": 24, "tags": [], "bug_id": 51585, "text": "Thank you for the patch.\nApplied with r1561435\n... and because of problems with JDK 1.5, it needed another fix - r1561511", "id": 172698, "time": "2014-01-26T17:00:31Z", "creator": "kiwiwings@apache.org", "creation_time": "2014-01-26T17:00:31Z", "is_private": false, "attachment_id": null}]
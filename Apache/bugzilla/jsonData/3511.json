[{"count": 0, "text": "I tried sending a really long query string line to Tomcat 4 (I'm using cvs \nafter b8 was released). I'm using T4 in standalone mode.\n\nI got a HTTP Status 400 - Bad Request in response (somewhat \nexpected). \n\nHowever, the problem is that when I tried to make another request with a \nshorter url (that should have worked), I kept getting the same exception. \n\nIt wouldn't clear up until I restarted the container.\n\nAlso, what is the line length maximum?\n\n\n2001-09-09 17:22:04 HttpProcessor[8080][2] process.parse\njava.io.IOException: Line too long\n        at \norg.apache.catalina.connector.http.SocketInputStream.readHeader(Socke\ntInputStream.java:466)\n        at \norg.apache.catalina.connector.http.HttpProcessor.parseHeaders(HttpPro\ncessor.java:569)\n        at \norg.apache.catalina.connector.http.HttpProcessor.process(HttpProcesso\nr.java:953)\n        at \norg.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.ja\nva:1093)\n        at java.lang.Thread.run(Thread.java:496)\n\n2001-09-09 17:24:21 HttpProcessor[8080][2] process.parse\njava.io.IOException: Line too long\n        at \norg.apache.catalina.connector.http.SocketInputStream.readHeader(Socke\ntInputStream.java:466)\n        at \norg.apache.catalina.connector.http.HttpProcessor.parseHeaders(HttpPro\ncessor.java:569)\n        at \norg.apache.catalina.connector.http.HttpProcessor.process(HttpProcesso\nr.java:953)\n        at \norg.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.ja\nva:1093)\n        at java.lang.Thread.run(Thread.java:496)\n\n2001-09-09 17:24:23 HttpProcessor[8080][2] process.parse\njava.io.IOException: Line too long\n        at \norg.apache.catalina.connector.http.SocketInputStream.readHeader(Socke\ntInputStream.java:466)\n        at \norg.apache.catalina.connector.http.HttpProcessor.parseHeaders(HttpPro\ncessor.java:569)\n        at \norg.apache.catalina.connector.http.HttpProcessor.process(HttpProcesso\nr.java:953)\n        at \norg.apache.catalina.connector.http.HttpProcessor.run(HttpProcessor.ja\nva:1093)\n        at java.lang.Thread.run(Thread.java:496)", "bug_id": 3511, "attachment_id": null, "id": 5264, "time": "2001-09-09T17:29:47Z", "creator": "jon@latchkey.com", "creation_time": "2001-09-09T17:29:47Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 3511, "is_private": false, "count": 1, "id": 5265, "time": "2001-09-09T17:40:41Z", "creator": "remm@apache.org", "creation_time": "2001-09-09T17:40:41Z", "text": "4 kbytes meximum for the header value.\n\nApparently, it's a problem parsing the value of one of the header of the \nrequest (it's not with the URL).\nCould you send more information on the request being made ?\n\nYou can set the debug on the connector to see the list of the headers being \nparsed. That could help locate where the problem is."}, {"count": 2, "tags": [], "text": "Essentially, i had a *really* long set of name=value pairs within a URI's \nquery data. it was definitely longer than 4kbytes. i believe that the HTTP \nspec does not make any hard requirements as to the length of query data.\n\ni can't really duplicate the problem because i ended up just splitting the \n<form> into two sections (with the second (longer) section sending POST \ninstead of get) in order to make for smaller data.\n\nthe real problem was that after the exception was thrown, it seemed to \nleave tomcat in a bad state and unable to respond to further requests.", "attachment_id": null, "bug_id": 3511, "id": 5267, "time": "2001-09-09T18:07:29Z", "creator": "jon@latchkey.com", "creation_time": "2001-09-09T18:07:29Z", "is_private": false}, {"count": 3, "tags": [], "creator": "remm@apache.org", "text": "Yes indeed.\n\nHowever, here, the bug is not with the length of the uri or the query string, \nbut with one of the headers (as indicated by the stack trace).\nSo if you can send me the request which would trigger the bug, let me know ... \nOther than that, I can't do much, as there's nothing which looks too suspicious \nin the parsing algorithm. I'll try some tests to see if I can get something bad \nto happen.", "id": 5268, "time": "2001-09-09T18:17:22Z", "bug_id": 3511, "creation_time": "2001-09-09T18:17:22Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jon@latchkey.com", "attachment_id": null, "id": 5270, "time": "2001-09-09T18:40:33Z", "bug_id": 3511, "creation_time": "2001-09-09T18:40:33Z", "is_private": false, "text": "It was something like this...but much much much longer...each \nname=value pair is in {}\n\nhttp://www.foo.com/scarab/servlet/scarab/foo/bar?[crap below as \nname=value& pairs]\n\n-jon\n\n {roo0:3order=3} {atto4name=reopened} \n{eventsubmit_doaddormodifyattributeoptions=Save} {atto4del=false} \n{action=admin.GlobalAttributes} {roo0:5order=5} {roo0:7order=7} \n{atto2parentid=} {template=admin,GlobalAttributeEdit.vm} {roo:order=8} \n{atto5del_vifa_=false} {atto7name=closed} {atto2del=false} \n{atto7parentid=} {atto7del=false} {atto3name=assigned} \n{atto1del_vifa_=false} {atto5parentid=} {atto6del_vifa_=false} \n{atto5del=false} {atto2weight=2} {atto1weight=1} {atto4weight=4} \n{att_0id=3} {atto3weight=3} {atto6name=verified} {atto6weight=6} \n{atto5weight=5} {roo0:2order=2} {atto7weight=7} {roo0:4order=4} \n{atto3parentid=} {atto2del_vifa_=false} {roo0:6order=6} {atto2name=new} \n{atto7del_vifa_=false} {atto3del=false} {atto1parentid=} {attonewname=} \n{curmodule=5} {attoweight=8} {atto5name=resolved} \n{atto3del_vifa_=false} {atto6parentid=} {atto1del=false} \n{nexttemplate=admin,GlobalAttributeEdit.vm} {atto1name=unconfirmedd} \n{atto6del=false} {attoparentid=} {atto4parentid=} {roo0:1order=1} \n{atto4del_vifa_=false}\n"}, {"count": 5, "tags": [], "creator": "remm@apache.org", "text": "I've tested with really long URIs already. They should be limited to 32kbytes.\n\nI still think the problem is with one of the request headers (maybe a cookie), \nnot with the URI and the request params.\nIf the same request works with a POST, but fails with a GET, then I suppose it \ncould indicate a problem with the URI, but if problem there is, the bug itself \nhappens during the header parsing.\n\nIt's even stranger that the whole connector would hang after that, since that \nsame exception was triggered when using JavaMail 1.2 (which uses multiline \nheader, and there was a bug in the parsing code), and it didn't hang the whole \nthing (but the request failed).\n\nIf somehow you can come up with the full original HTTP request (not just the \nrequest line), send it along.\n\nI'll try different things using the SnoopServlet and see what happens ...", "id": 5271, "time": "2001-09-09T19:01:33Z", "bug_id": 3511, "creation_time": "2001-09-09T19:01:33Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 5272, "time": "2001-09-09T19:04:09Z", "bug_id": 3511, "creation_time": "2001-09-09T19:04:09Z", "is_private": false, "text": "Change the bug to P1 (since there is a possibility it may be used to DoS - if \nthe bug is confirmed, and of course, we find a way to reproduce it)."}, {"count": 7, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 5273, "time": "2001-09-09T19:35:04Z", "bug_id": 3511, "creation_time": "2001-09-09T19:35:04Z", "is_private": false, "text": "More testing (just to make sure there wasn't a regression). A really long URI \n(> 32k) would correctly produce an exception on line 271 of SIS. The connector \nwas still useable after that.\n\nOf course, POST should be used to send some significant amount of data, and \nit's legal (and recommended) for a server to limit the URI / headers length.\n\nI'll attach the kind of request I tried."}, {"attachment_id": 512, "tags": [], "bug_id": 3511, "is_private": false, "count": 8, "id": 5274, "time": "2001-09-09T19:36:03Z", "creator": "remm@apache.org", "creation_time": "2001-09-09T19:36:03Z", "text": "Created attachment 512\nGET request with multiline headers and long URI"}, {"count": 9, "attachment_id": null, "bug_id": 3511, "text": "Resolving with WORKSFORME based on Remy's testing.  Can be reopened later if a\nreproducible failure case can be identified.\n", "id": 5667, "time": "2001-09-17T10:20:13Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-09-17T10:20:13Z", "tags": [], "is_private": false}]
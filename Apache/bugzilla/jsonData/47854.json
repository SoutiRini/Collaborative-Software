[{"count": 0, "tags": [], "bug_id": 47854, "attachment_id": null, "is_private": false, "id": 130466, "time": "2009-09-16T14:46:02Z", "creator": "bugzilla@byrden.com", "creation_time": "2009-09-16T14:46:02Z", "text": "My current shell is XMLSH, a Java program that loads Ant into its own VM. But I had to modify 2 classes to make this work. Ant 1.7.1 is an ill-behaved guest in the VM Because:\n\n[1] It calls System.exit() which kills the entire VM. \n[2] It makes an unwarranted assumption about its ClassLoaders\n\nRe [1] : there are calls to System.exit() in both the Launcher class and the Main class. I can extend Main to change this, but not Launcher.\n\nIn my opinion (I have Java programmer certification) no Java program should need to kill the VM unless something is wrong. \n\nRe [2] : on loading Ant, I see this:\n\"org.apache.tools.ant.Main cannot be cast to org.apache.tools.ant.launch.AntMain\"\n\nReason: the Launcher class makes 2 ClassLoaders and assumes they will connect up in a parent-child relationship. For me, they don't. I can see no reason why Launcher should not make that connection explicitly.\n\nNote: after changing these 2 classes, I am able to run Ant under XMLSH with a very simple wrapper script.\n\nDavid"}, {"count": 1, "attachment_id": null, "creator": "mgainty@hotmail.com", "is_private": false, "id": 130685, "time": "2009-09-25T11:12:42Z", "bug_id": 47854, "creation_time": "2009-09-25T11:12:42Z", "tags": [], "text": "i just saw this post noting \n\"the Launcher class makes 2 ClassLoaders and assumes they will connect\nup in a parent-child relationship. For me, they don't. I can see no reason why\nLauncher should not make that connection explicitly.\"\n\ni came upon this issue when another Java apache project produced classloader error\n\"org.apache.tools.ant.Main cannot be cast to\norg.apache.tools.ant.launch.AntMain\"\n\n(attempting to pass its own CL to Ant and failed)\n\ncan we vote to accept davids mods as a workaround to this issue?\n\nthanks\nMartin"}, {"count": 2, "tags": [], "creator": "jkf@apache.org", "attachment_id": null, "id": 130785, "time": "2009-10-01T13:56:50Z", "bug_id": 47854, "creation_time": "2009-10-01T13:56:50Z", "is_private": false, "text": "Launcher only calls System.exit() in case something went wrong (non-zero exit status) Main also calls System.exit for a 0 exit status in case nothing went wrong (This may not be necessary, will investigate). Launcher is strictly meant to be used from the command line. Does it make sense to modify Launcher to solve [2] without fully solving [1], please note the System.exit calls are needed in Launcher and Main to indicate to the shell that something went wrong."}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 131021, "time": "2009-10-09T01:12:23Z", "bug_id": 47854, "creation_time": "2009-10-09T01:12:23Z", "is_private": false, "text": "Like Martijn said, Ant's Main has a very good reason to call System.exit, namely to have control over the process' exit code which is vital to many shell-script/batch-file scenarios.\n\nThe System.exit in Launcher will only ever be triggered if the AntMain implementation throws an exception.  Since you need to plug in your own AntMain implementation anyway, this should be easy to avoid.\n\nFor [2]: what does you modified implementation look like and would you be willing to contribute it?"}]
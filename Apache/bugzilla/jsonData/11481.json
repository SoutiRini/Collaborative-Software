[{"count": 0, "attachment_id": null, "bug_id": 11481, "is_private": false, "id": 20667, "time": "2002-08-05T20:42:56Z", "creator": "mmunz@apelon.com", "creation_time": "2002-08-05T20:42:56Z", "tags": [], "text": "Hi.\n\n  This is a design issue.  Lacking Architecture / Design documents, I'm not \nsure whether this is a defect or a \"feature\", but either way, I needed a \nworkaround to use WaitFor that is not required for objects like Copy, and this \nis an inconsistency that should be addressed.\n\n  I am writing a Task that uses Parallel, Sequence, and WaitFor.  The following \ncode won't work.\n\n  WaitFor wait;\n  ...\n  Sequential sequence = (Sequential) getProject().createTask(\"sequential\");\n  sequence.addTask(wait);\n\n  It won't work because, although WaitFor has an interface compatible with \nTask, it does not extend Task, but rather its superclass, ProjectComponent.\n\n  workaround:\n\n  I created a wrapper class that treats WaitFor like a Task.  It is included \nbelow.\n\n  solution:\n\n  There are several possiblities.  I don't think that the workaround is a \nrobust solution.  Alternatives include making WaitFor a subclass of Task, and \n(I like this one) making Task (or something like it) an interface.  Such an \ninterface (let's call it ExecutableComponent) would have only one method:\n\n  public void execute() throws BuildException;\n\n  Just an idea -- I'm interested in hearing anyone else's ideas on the matter.\n\n---- WaitForTask.java ---------\n\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Task;\nimport org.apache.tools.ant.taskdefs.WaitFor;\n\n/**\n * The WaitFor Condition object is very much like a Task object.\n * This class adapts the WaitFor object to the Task API so that it can be \nexecuted \n * as a Task.\n * @author Matt Munz\n */ \npublic class WaitForTask extends Task\n{\n  protected WaitFor fDelegate;\n  \n  public WaitForTask(WaitFor newDelegate) \n  { \n    super(); \n    setDelegate(newDelegate);\n  }\n  \n  public void execute() throws BuildException { delegate().execute(); }\n  \n  protected WaitFor delegate() { return fDelegate; }\n\n  protected void setDelegate(WaitFor newDelegate) { fDelegate = newDelegate; }\n} \n\n----------------------\n\n- Matt Munz"}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "count": 1, "id": 20683, "time": "2002-08-06T09:54:59Z", "bug_id": 11481, "creation_time": "2002-08-06T09:54:59Z", "text": "Ant deals with \"tasks\" that are not subclasses of Task with the help of\nTaskAdapter - which is basically what you've implemented yourself plus some\ncore support when it comes to reflecting in attributes for the tasks.\n\nYou should do something like\n\n    sequential.addTask(new TaskAdapter(wait));\n\nThe \"make Task an interface\" route has been discussed before, and some of the\nAnt2 proposals may have tried that route already.\n\nWhen I go and compare how the Task class has changed between Ant releases, I\ndon't think we can ever come to a Task interface that doesn't break all custom\ntasks with every new release.  You then have to provide a base Task class and\nrecommend people to extend from it which is worse than having a concrete\nTask class and TaskAdapter IMHO.\n\nCan we close this PR?"}]
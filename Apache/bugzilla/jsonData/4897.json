[{"count": 0, "tags": [], "bug_id": 4897, "is_private": false, "text": "Background:\n\nJava source file conventions typically dictate that the source file directory\nstructure follows that of the packages within. For example, a package of name \ncom.company.module.foo would reside in src/com/company/module/foo. This works\nfine if the entire project is Java-based.\n\nHowever, in many large environments (such as that of our own), projects\nencompass many different languages, such as SQL, C, C++, and Java. One of \nthe easiest ways to organize large projects of this nature is to commingle the\nsourcecode by module, not by language type. For example:\n\nsrc/module/submodule/prog.c\nsrc/module/submodule/proc.sql\nsrc/module/submodule/Class.java\nsrc/module/submodule/test/ClassTest.java\n\nWhere Class.java has a package of com.company.module.submodule.\n\nFew other languages are dependent upon directory structures like Java (Python is\none example; Python modules are defined by directory). However, Java \ndoes not *require* that the source code directory match the package name. The\nabove example will compile com.company.module.submodule.Class \ncorrectly. Additionally, since Java is but one of many languages in this\nproject, it doesn't make much sense to force a \nsrc/com/company/module/submodule directory structure for the C or SQL code as well.\n\nThe Point:\n\nThe JUnit optional task BatchTest task does not take the above code organization\ninto account, and assumes that the directory given in the fileset also \ndefines the package structure. Therefore, running a BatchTest on the above\ndirectory structure with the fileset based at src/ would result in BatchTest not \nbeing able to find the class \"module.submodule.test.ClassTest\" instead of\n\"com.company.module.submodule.test.ClassTest\".\n\nThe Patch:\n\nThe following patch adds a \"prepend\" attribute to the BatchTest task, allowing\nthe use of the above directory structure in this manner:\n\n\t<batchtest fork=\"yes\" todir=\"somedir\" prepend=\"com.company\">\n\t  <fileset dir=\"${src}\">\n\t    <include name=\"**/test/*Test*.java\" />\n\t  </fileset>\n\t</batchtest>\n\n\n--- src/main/org/apache/tools/ant/taskdefs/optional/junit/BatchTest.java.orig\tThu Nov 15 13:20:39 2001\n+++ src/main/org/apache/tools/ant/taskdefs/optional/junit/BatchTest.java\tThu Nov 15 13:24:31 2001\n@@ -85,6 +85,9 @@\n     /** the list of filesets containing the testcase filename rules */\n     private Vector filesets = new Vector();\n \n+    /** the string to prepend to classnames */\n+    private String classnamePrepend = null;\n+\n     /**\n      * create a new batchtest instance\n      * @param project     the project it depends on.\n@@ -93,6 +96,14 @@\n         this.project = project;\n     }\n \n+    public void setPrepend(String prepend) {\n+        this.classnamePrepend = prepend;\n+    }\n+\n+    public String getPrepend() {\n+        return classnamePrepend;\n+    }\n+\n     /**\n      * Add a new fileset instance to this batchtest. Whatever the fileset is,\n      * only filename that are <tt>.java</tt> or <tt>.class</tt> will be\n@@ -137,6 +148,8 @@\n         JUnitTest[] tests = new JUnitTest[filenames.length];\n         for (int i = 0; i < tests.length; i++) {\n             String classname = javaToClass(filenames[i]);\n+\n    if (classnamePrepend != null)\n+\n\tclassname = classnamePrepend + \".\" + classname;\n             tests[i] = createJUnitTest(classname);\n         }\n         return tests;", "id": 7951, "time": "2001-11-15T11:30:15Z", "creator": "sanderson@bonddesk.com", "creation_time": "2001-11-15T11:30:15Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "I'm sorry Scott but I'm not convinced at all by your RFE.\n\nThere is no sense to me to prepend a batchtest by a package name just to match \nthe layout you choose. It is especially not correct since nothing prevent you \nhaving files from multiple packages within the same directory.\n\nThe batchtest also works with the fileset set to the .class directory so this \nshould solve your problem...\n\nIf something has to be done it should probably read the package from the \nbytecode...but I don't think it's worth it.", "attachment_id": null, "id": 7967, "creation_time": "2001-11-15T14:56:23Z", "time": "2001-11-15T14:56:23Z", "creator": "sbailliez@apache.org", "bug_id": 4897, "is_private": false}, {"count": 2, "tags": [], "bug_id": 4897, "is_private": false, "text": "Ah, you know, I didn't even see that it would work with .class files too. Never\nmind me, need to learn to read better, etc. :-)", "id": 7969, "time": "2001-11-15T15:08:12Z", "creator": "sanderson@bonddesk.com", "creation_time": "2001-11-15T15:08:12Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "sbailliez@apache.org", "text": "No problem.\nI'm setting the resolution as invalid.\nIf everything is fine, do you mind closing it ?", "id": 8006, "time": "2001-11-16T11:42:51Z", "bug_id": 4897, "creation_time": "2001-11-16T11:42:51Z", "is_private": false, "attachment_id": null}]
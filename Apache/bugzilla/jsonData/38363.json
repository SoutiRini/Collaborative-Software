[{"count": 0, "tags": [], "bug_id": 38363, "attachment_id": null, "is_private": false, "id": 84929, "time": "2006-01-24T05:13:35Z", "creator": "kevin.brock@fullscope.com", "creation_time": "2006-01-24T05:13:35Z", "text": "Specific log4j version: 1.2.8\n\nWe have experienced several times a SecurityException from log4j logging methods\n(i.e. debug, info, warn, etc) when the rolling file appender needs to switch to\na new log file.  This occurs in our environment (a proprietary application\nserver) when unprivileged \"user\" classes are on the stack.  We have basically\nsegments our classes into two primary privileged - system/server and user and\nsetup security policy (SecurityManager) permissions that generally do not allow\nreading/write/open/close on arbitrary files for the user space.\n\nI am surprised this has not come up before.  I did a search on this bugzilla and\nfound some references to SecurityException for applet sandbox (bug 30294) and a\ncouple of others, but none referenced a case with problems during actual logging\nas this.\n\nThis occurs infrequently, but when it does, it can be difficult to protect from\nthis situation -- particularly as the log4j logging methods themselves are by design not supposed to throw any exception.  In our case, this can cause internal pool 'leaks' and other memory problems since we are relying on \nthe logging methods to not fail.\n\nHere is one of the stack dumps:\n\n2006-01-23 21:53:25,527 [RequestProcessor[2]] ERROR com.wiseb2b.server.Processor[7]:GET_EAD - access denied (java.io.FilePermission ERPDev/server.log.5 read)\njava.security.AccessControlException: access denied (java.io.FilePermission ERPDev/server.log.5 read)\n        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:269)\n        at java.security.AccessController.checkPermission(AccessController.java:401)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:524)\n        at java.lang.SecurityManager.checkRead(SecurityManager.java:863)\n        at java.io.File.exists(File.java:678)\n        at org.apache.log4j.RollingFileAppender.rollOver(RollingFileAppender.java:119)\n        at org.apache.log4j.RollingFileAppender.subAppend(RollingFileAppender.java:228)\n        at org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n        at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n        at org.apache.log4j.Category.callAppenders(Category.java:187)\n        at org.apache.log4j.Category.forcedLog(Category.java:372)\n        at org.apache.log4j.Category.debug(Category.java:241)\n        at com.wiseb2b.pool.Pool.getInternal(Pool.java:379)\n        at com.wiseb2b.pool.Pool.get(Pool.java:224)\n        at com.wiseb2b.pool.Pool.get(Pool.java:214)\n        at com.wiseb2b.jdbc.DataSourceImpl.getConnection(DataSourceImpl.java:94)\n        at com.wiseb2b.server.AbstractSessionContext.getJdbcConnection(AbstractSessionContext.java:233)\n        at com.wiseb2b.compatibility.QueryClassTools.getJdbcConnection(QueryClassTools.java:115)\n        at com.wiseb2b.compatibility.QueryClassTools.getJdbcConnection(QueryClassTools.java:108)\n        at GetEad.query0000(GetEad.java:100)\n        at GetEad.execute(GetEad.java:90)\n        at com.wiseb2b.server.Processor.executeRequest(Processor.java:419)\n        at com.wiseb2b.server.corba.Connection.requestCString(Connection.java:181)\n        at com.wiseb2b.ERP_Adapter._ConnectionImplBase._invoke(_ConnectionImplBase.java:118)\n        at com.sun.corba.se.internal.corba.ServerDelegate.dispatch(ServerDelegate.java:353)\n        at com.sun.corba.se.internal.iiop.ORB.process(ORB.java:280)\n        at com.sun.corba.se.internal.iiop.RequestProcessor.process(RequestProcessor.java:81)\n        at com.sun.corba.se.internal.orbutil.ThreadPool$PooledThread.run(ThreadPool.java:106)\n\nNote that \"GetEad\" class is a \"user\" space class.  The \"Pool.getInternal\" method \nis the one doing the logging; here to indicate which pool entry was retrieved on \nbehalf of the user request.  Unfortunately, in this case, the connection object \nwas \"lost\" since this unchecked exception was not expected.\n\nI recommend one of two approaches, either catch all SecurityException(s) in the \nlogging methods themselves or execute the file switch (rollOver) method within\nan AccessController.doPrivileged call.  Both methods would be good.  The former \nto prevent any SecurityException from other appends causing this same problem \n(possible logging this to the log4j internal log - LogLog) and the later to \nallow the roll over to work properly as long as the log4j .jar file had \nsufficient privileges.\n\nHere are some patches for both of the above recommendations.\n\nRollingFileAppender (privileged execution):\n\ndiff -u orig/RollingFileAppender.java bug/RollingFileAppender.java\n--- orig/RollingFileAppender.java 2006-01-23 22:33:45.000000000 -0500\n+++ bug/RollingFileAppender.java 2006-01-23 22:36:21.000000000 -0500\n@@ -104,8 +104,19 @@\n      <code>File</code> is truncated with no backup files created.\n\n    */\n-  public // synchronization not necessary since doAppend is alreasy synched\n+\n+  public\n   void rollOver() {\n+    AccessController.doPrivileged(new PrivilegedAction() {\n+      public Object run() {\n+        rollOver0();\n+        return null;\n+      }\n+    });\n+  }\n+\n+  public // synchronization not necessary since doAppend is alreasy synched\n+  void rollOver0() {\n     File target;\n     File file;\n\n\nCategory (catch SecurityException for all logging events):\n\ndiff -u orig/Category.java bug/Category.java\n--- orig/Category.java 2006-01-23 22:33:15.000000000 -0500\n+++ bug/Category.java 2006-01-23 22:31:26.000000000 -0500\n@@ -24,6 +24,7 @@\n import org.apache.log4j.spi.AppenderAttachable;\n import org.apache.log4j.spi.LoggingEvent;\n import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.helpers.NullEnumeration;\n import org.apache.log4j.helpers.AppenderAttachableImpl;\n\n@@ -369,7 +370,11 @@\n      without further checks.  */\n   protected\n   void forcedLog(String fqcn, Priority level, Object message, Throwable t) {\n-    callAppenders(new LoggingEvent(fqcn, this, level, message, t));\n+    try {\n+      callAppenders(new LoggingEvent(fqcn, this, level, message, t));\n+    } catch (SecurityException e) {\n+      LogLog.error(\"security exception during logging\", e);\n+    }\n   }\n\nIf possible (with your bugzilla), I will attach a .tar.gz containing an entire running example.  This includes a security policy file, some Linux bash scripts to run the examples, the server sample source and user sample user, and the \"fixed\" log4j code.  I have two scripts, one to demo the problem as reported (\"run.with.bug\") and one to run the same classes using the fixed log4j classes (\"run.with.fix\").  Note that \"run.with.fix\" will run forever in this case as the user class attempts to write to the log forever.  In the former case, it will very quickly abort with a SecurityException."}, {"count": 1, "tags": [], "creator": "kevin.brock@fullscope.com", "is_private": false, "text": "Created attachment 17491\nFull test case with bug and sample fix\n\nExtract this to any directory then you will need to change the first two paths \n\nin the example.policy file to match your directory.\n\nYou must cd to the root of this example directory then you should be able to\nrun \neither of the tests:\n   ./run.with.bug\n   ./run.with.fix   [runs forever]\n\nThese code was compiled with Eclipse set to output Java 1.4 byte code", "id": 84930, "time": "2006-01-24T05:19:04Z", "bug_id": 38363, "creation_time": "2006-01-24T05:19:04Z", "attachment_id": 17491}, {"count": 2, "tags": [], "creator": "kevin.brock@fullscope.com", "is_private": false, "text": "As I was thinking about this some more... I think that org.apache.log4j.Category\nforcedLog method should probably catch RuntimeException to ensure that any \nother kinds of unchecked exceptions, in addition to SecurityException, are kept\nfrom being propogated to the caller.", "id": 84933, "time": "2006-01-24T05:34:19Z", "bug_id": 38363, "creation_time": "2006-01-24T05:34:19Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 38363, "text": "This should be considered if appropriate to have in 1.2.16", "id": 119295, "time": "2008-08-02T15:14:12Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T15:14:12Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Adding a try block around callAppenders could have performance implications.  Also, in a perfect world, you would not want the failure of one appender to cause the rest to fail, so if you were going to do that, you'd want to do in within callAppenders.\n\nThe implicit appender contract is that Appenders don't let anything percolate out of their append method.  The RFAs are particular prone to to SecurityExceptions due to their file renaming.  However, it probably would be best just to fix this in org.apache.log4j.rolling.RFA in the extras and not in DRFA and RFA since there are known problems in them that are fixed in o.a.l.r.RFA and they offer no functionality not in o.a.l.r.RFA.\n\nHowever, if someone wants to submit a patch against o.a.l.RFA and DRFA that is fairly clean, I would not object.", "creator": "carnold@apache.org", "is_private": false, "id": 119773, "time": "2008-08-12T22:01:03Z", "bug_id": 38363, "creation_time": "2008-08-12T22:01:03Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "creator": "reto@apache.org", "text": "In Apache Clerezza we are using log4j and this is a major issue, users want to be able to use the rolling file appender, but if they do so things usually seem to work and start but then theses security-exception occur. The issue seem to have been assigned for a long time now, any chance a release will fix this in the near future?", "id": 143233, "time": "2011-01-10T10:45:37Z", "bug_id": 38363, "creation_time": "2011-01-10T10:45:37Z", "is_private": false, "attachment_id": null}]
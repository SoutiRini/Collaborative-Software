[{"count": 0, "tags": [], "bug_id": 54777, "attachment_id": null, "text": "Hello! I'm use Apache JMeter for hit-based load testing apache cassandra with netflix plugins. But, default logging of ResultCollector is really too slow. I have lock artefacts at throughtput about 35krps with simple csv settings. In thread dump i see many block threads on java.io.PrintWriter.println(). I write writeback cache for PrintWriter and have more performant solution.\n\nI showed it Phillipe M. and his patched my code:)\n\nPerformance comparsion of solutions: https://docs.google.com/spreadsheet/oimg?key=0Au50JydZm7UjdDlzWkhzMTJoMllxS3BWMGd2bXd6SUE&oid=4&zx=cjjfchh72va2\n\nMy first patch is https://gist.github.com/sch1z0phren1a/5190889\nSecond patch with Phillipe M. changes is https://gist.github.com/sch1z0phren1a/6bf25227b63a4d9e05f3\n\nI tested it with simple Dummy Sampler from jmeter-plugins.\nTest Plan is here https://gist.github.com/sch1z0phren1a/b65bf49de6a6f90efa18\n\n\nSo, what about include it into Apache JMeter? :)\n\nPhillipe, thanks you!:)", "id": 166266, "time": "2013-03-31T10:40:08Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-03-31T10:40:08Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54777, "text": "Sorry, for my misprints, Philippe:)", "id": 166267, "time": "2013-03-31T10:53:32Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-03-31T10:53:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 54777, "is_private": false, "id": 166271, "time": "2013-03-31T17:34:20Z", "creator": "sebb@apache.org", "creation_time": "2013-03-31T17:34:20Z", "tags": [], "text": "Thanks for the suggested patch. I'm not clear why the code should be better than PrintWriter.println() - this ought to be explained in the Javadoc.\n\nThere are some problems with the code as it stands:\n\nThe field lineSeparator cannot be fixed as '\\n', as that is not portable.\n\nConstructors should not start threads - there is no guarantee that the class will have been fully constructed before the thread tries accessing it.\n\nA couple of minor style issues: we don't generally allow multiple statements per line.\nAslo we always use blocks in conditional statements."}, {"count": 3, "tags": [], "creator": "epikhinm@gmail.com", "attachment_id": null, "text": "(In reply to comment #2)\n> Thanks for the suggested patch. I'm not clear why the code should be better\n> than PrintWriter.println() - this ought to be explained in the Javadoc.\n\n1. Because real write is \"async\" opertation by Sampler, which running it in my code.\n\nWith simple autoFlush=true, everytime when you use println(), you alse call flush-ethod.\n\nJust look at OpenJDK 1.7\n\nprintln(String s) (http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/PrintWriter.java?av=f\n) \n  |                  \\\n  v                   v\nprint(String s)       println() (http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/PrintWriter.java#PrintWriter.println%28%29)\n                        |\n                        v\n                     newLine() -> out.flush() (http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/PrintWriter.java#PrintWriter.newLine%28%29)\n\n\nSoo, when you use autoFlush=true, println(), and many threads, u also have very poor performance.\n\nSingle flush method make context switch to kernel-thread, and his make real write-method. This is blocking operation. \nIf i separate println() operation from Sampler Thread and flush() method to another thread, it make better performance. Sample Thread don't wait real flush on disk. He just do him-self job. Not write to log.\n\n2. Decrease flush operation counts\n\n> There are some problems with the code as it stands:\n> \n> The field lineSeparator cannot be fixed as '\\n', as that is not portable.\n> \n\nSorry, i look at PrintWriter.lineSeparator by OpenJDK and did it as well http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/PrintWriter.java#PrintWriter.0lineSeparator\n\nAny solutions for portable?\n\n> Constructors should not start threads - there is no guarantee that the class\n> will have been fully constructed before the thread tries accessing it.\n\nIf fluhs-thread not started, real buffer in super() will be constructured and another threads make println() operations, but in real, without flush, while flush-thread not started.\n\n> A couple of minor style issues: we don't generally allow multiple statements\n> per line.\n> Aslo we always use blocks in conditional statements.\n\nOkey, it's not a problem.", "id": 166272, "time": "2013-03-31T18:03:23Z", "bug_id": 54777, "creation_time": "2013-03-31T18:03:23Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 54777, "attachment_id": null, "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> > Thanks for the suggested patch. I'm not clear why the code should be better\n> > than PrintWriter.println() - this ought to be explained in the Javadoc.\n> \n> 1. Because real write is \"async\" opertation by Sampler, which running it in\n> my code.\n> \n> With simple autoFlush=true, everytime when you use println(), you alse call\n> flush-ethod.\n\nOK, then this needs to be documented in the code.\n\nSince the only function of the thread seems to be to run flush every so often, I wonder if a separate thread is really needed?\n\nPerhaps a simple decorator would suffice.\nThat would solve the issue of how to start the thread safely.\n\n> > There are some problems with the code as it stands:\n> > \n> > The field lineSeparator cannot be fixed as '\\n', as that is not portable.\n> > \n> \n> Sorry, i look at PrintWriter.lineSeparator by OpenJDK and did it as well\n> http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-\n> b147/java/io/PrintWriter.java#PrintWriter.0lineSeparator\n\nNo, it does not.\n\nIt does not fix lineSeparator as the single char '\\n'.\n \n> Any solutions for portable?\n\nUse the value of the property \"line.separator\" which is a String (e.g. it might be \\r\\n\")\n\n> > Constructors should not start threads - there is no guarantee that the class\n> > will have been fully constructed before the thread tries accessing it.\n> \n> If fluhs-thread not started, real buffer in super() will be constructured\n> and another threads make println() operations, but in real, without flush,\n> while flush-thread not started.\n\nYes, but the ctor still must not start a thread.\nYou need to find a way to start the thread after construction.", "id": 166273, "time": "2013-03-31T18:23:41Z", "creator": "sebb@apache.org", "creation_time": "2013-03-31T18:23:41Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 54777, "attachment_id": null, "is_private": false, "id": 166274, "time": "2013-03-31T18:32:45Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-03-31T18:32:45Z", "text": "(In reply to comment #4)\n> (In reply to comment #3)\n> > (In reply to comment #2)\n> > > Thanks for the suggested patch. I'm not clear why the code should be better\n> > > than PrintWriter.println() - this ought to be explained in the Javadoc.\n> > \n> > 1. Because real write is \"async\" opertation by Sampler, which running it in\n> > my code.\n> > \n> > With simple autoFlush=true, everytime when you use println(), you alse call\n> > flush-ethod.\n> \n> OK, then this needs to be documented in the code.\n> \n> Since the only function of the thread seems to be to run flush every so\n> often, I wonder if a separate thread is really needed?\n> \n> Perhaps a simple decorator would suffice.\n> That would solve the issue of how to start the thread safely.\n\nMy generic idea is writeback module. Yeah, decorator it's good idea. But one of the samplers would doing flush-method, and his will be wait response from kernel. But maybe it doesn't matter?\n\n> > > There are some problems with the code as it stands:\n> > > \n> > > The field lineSeparator cannot be fixed as '\\n', as that is not portable.\n> > > \n> > \n> > Sorry, i look at PrintWriter.lineSeparator by OpenJDK and did it as well\n> > http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-\n> > b147/java/io/PrintWriter.java#PrintWriter.0lineSeparator\n> \n> No, it does not.\n> \n> It does not fix lineSeparator as the single char '\\n'.\n>  \n> > Any solutions for portable?\n> \n> Use the value of the property \"line.separator\" which is a String (e.g. it\n> might be \\r\\n\")\n\nOkey, but it not good pratice.\n> \n> > > Constructors should not start threads - there is no guarantee that the class\n> > > will have been fully constructed before the thread tries accessing it.\n> > \n> > If fluhs-thread not started, real buffer in super() will be constructured\n> > and another threads make println() operations, but in real, without flush,\n> > while flush-thread not started.\n> \n> Yes, but the ctor still must not start a thread.\n> You need to find a way to start the thread after construction.\n\nOkey, lets play with decorator:)"}, {"count": 6, "tags": [], "creator": "epikhinm@gmail.com", "attachment_id": null, "text": "Hmm. If i not use Runnable, then last buffer may not flushed on disk. Its bad.", "id": 166275, "time": "2013-03-31T18:58:27Z", "bug_id": 54777, "creation_time": "2013-03-31T18:58:27Z", "is_private": false}, {"count": 7, "tags": [], "creator": "epikhinm@gmail.com", "attachment_id": null, "text": "Rewrite it as decorator. See here: https://gist.github.com/sch1z0phren1a/9ef2e2ad4e84cd7eb910\n\nAnd his performance: https://docs.google.com/spreadsheet/oimg?key=0Au50JydZm7UjdGxNRld4bm5GeHYtUGVfWFE4UUJpU3c&oid=2&zx=9xoub2113ff2", "id": 166278, "time": "2013-03-31T20:13:28Z", "bug_id": 54777, "creation_time": "2013-03-31T20:13:28Z", "is_private": false}, {"count": 8, "tags": [], "text": "Created attachment 30124\nUpdated patch\n\nModified a little:\n- removed useless close at parent close also flush\n\nI still wonder if synchronized(this) blocks are useful", "attachment_id": 30124, "bug_id": 54777, "id": 166282, "time": "2013-03-31T22:42:08Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-03-31T22:42:08Z", "is_private": false}, {"count": 9, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "is_private": false, "id": 166292, "time": "2013-04-01T14:09:08Z", "bug_id": 54777, "creation_time": "2013-04-01T14:09:08Z", "text": "Hello Mikhail,\nIn fact looking at new patch I don't think it improves performances.\n\nI made some new tests which I hadn't make before and:\n1) I don't have the same improvements as yours, see attached test plan, I have a 0.4% improvement on number of Samples done in 5 minutes. What do you graph exactly ? and what is your properties files configuration ?\n2) I wonder if the only change to be done should not be to switch off AutoFlush and nothing more\n\nBecause In fact with AutoFlush false, IO and flush will be controlled by the BufferedOutputStream over which printWriter is built."}, {"count": 10, "tags": [], "bug_id": 54777, "attachment_id": 30127, "is_private": false, "id": 166293, "time": "2013-04-01T14:17:08Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-04-01T14:17:08Z", "text": "Created attachment 30127\nTest Plan used"}, {"count": 11, "tags": [], "creator": "epikhinm@gmail.com", "attachment_id": null, "text": "(In reply to comment #9)\n> Hello Mikhail,\n> In fact looking at new patch I don't think it improves performances.\n> \n> I made some new tests which I hadn't make before and:\n> 1) I don't have the same improvements as yours, see attached test plan, I\n> have a 0.4% improvement on number of Samples done in 5 minutes. What do you\n> graph exactly ? and what is your properties files configuration ?\n\nYour test is not for measure performance of PrintWriter.\nYou use sleep on Sampler and thread don't create new SamplerResult objects. Test without sleeps, or sleep ~1ms.\n\nI using Jmeter as hit-based load tool whis load >50krps. Last test with Apache Cassandra with single instance of Jmeter gives me about 95krps. And bottleneck is net throughput (1Gbit/s). At this speed standart PrintWriter is too slow. Because every SampleResult on println() call flush(), beacuse many threads of Samplers have high concurreny on PrintWriter. With this patch, at throughput over 30krps i have stable logging csv/xml. Now, i haven't Samplers Thread locks on java.io.PrintWriter.println().\n\nThis patch for high-throughput tests, over 30krps. Your test have throughtput less then 1krps. It not your case for improvment\n\n> 2) I wonder if the only change to be done should not be to switch off\n> AutoFlush and nothing more\n> \n> Because In fact with AutoFlush false, IO and flush will be controlled by the\n> BufferedOutputStream over which printWriter is built.\n\nLook at tests. Look at profiling and thread dumps. If you really need tests with speed over 30krps, you also needed this patch.", "id": 166294, "time": "2013-04-01T14:52:19Z", "bug_id": 54777, "creation_time": "2013-04-01T14:52:19Z", "is_private": false}, {"count": 12, "tags": [], "text": "For benchmark i use test plan with Dummy Sampler. Without sleeps.", "is_private": false, "id": 166295, "creator": "epikhinm@gmail.com", "time": "2013-04-01T14:54:26Z", "bug_id": 54777, "creation_time": "2013-04-01T14:54:26Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "epikhinm@gmail.com", "is_private": false, "text": "Created attachment 30128\nTest-plan for benchmarking WritebackPrintWriter", "id": 166296, "time": "2013-04-01T14:55:27Z", "bug_id": 54777, "creation_time": "2013-04-01T14:55:27Z", "attachment_id": 30128}, {"count": 14, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "Created attachment 30131\nTest Plan for test without external dependencies", "id": 166302, "time": "2013-04-01T19:37:48Z", "bug_id": 54777, "creation_time": "2013-04-01T19:37:48Z", "is_private": false, "attachment_id": 30131}, {"count": 15, "tags": [], "bug_id": 54777, "attachment_id": null, "id": 166303, "time": "2013-04-01T19:39:11Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-04-01T19:39:11Z", "is_private": false, "text": "You are right, my test plan is not fine, I forgot Java Sampler made a sleep.\nI updated it.\n\nCan you do on your side a Test with just autoflush set to false and no use of PrintbackWriter ?"}, {"count": 16, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "text": "Results on my side:\n\nAutoFlush = true\nsummary = 12061027 in   300s = 40204.4/s Avg:     0 Min:     0 Max:    13 Err:     0 (0.00%)\n1.35 go written\n\nAutoFlush = false\nsummary = 18362979 in   300s = 61210.7/s Avg:     0 Min:     0 Max:    61 Err:     0 (0.00%)Err:     0 (0.00%)\n2.05 go written\n\nLast Patch (Decorator):\nsummary = 17959888 in   300s = 59867.7/s Avg:     0 Min:     0 Max:    31 Err:     0 (0.00%)\n2.01 go written", "id": 166304, "time": "2013-04-01T19:56:17Z", "bug_id": 54777, "creation_time": "2013-04-01T19:56:17Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 54777, "attachment_id": null, "id": 166305, "time": "2013-04-01T20:06:10Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-04-01T20:06:10Z", "is_private": false, "text": "Date: Mon Apr  1 20:05:33 2013\nNew Revision: 1463274\n\nURL: http://svn.apache.org/r1463274\nLog:\nBug 54777 - Improve Performance of default ResultCollector\nBugzilla Id: 54777\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/reporters/ResultCollector.java\n    jmeter/trunk/xdocs/changes.xml"}, {"count": 18, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Thanks Mikhail for this improvement to JMeter core.", "id": 166306, "time": "2013-04-01T20:08:09Z", "bug_id": 54777, "creation_time": "2013-04-01T20:08:09Z", "is_private": false}, {"count": 19, "tags": [], "text": "Sebb, what do you think about it? I don't think this is good idea to change autoFlush to false value.\n\n\nMy performance comparsion: https://docs.google.com/spreadsheet/oimg?key=0Au50JydZm7UjdDlzWkhzMTJoMllxS3BWMGd2bXd6SUE&oid=5&zx=j8es9dwce7m2", "attachment_id": null, "bug_id": 54777, "id": 166307, "time": "2013-04-01T20:32:14Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-04-01T20:32:14Z", "is_private": false}, {"count": 20, "tags": [], "text": "Why do you think it's not a good idea ?", "is_private": false, "id": 166311, "creator": "p.mouawad@ubik-ingenierie.com", "time": "2013-04-01T20:37:24Z", "bug_id": 54777, "creation_time": "2013-04-01T20:37:24Z", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 54777, "attachment_id": null, "is_private": false, "id": 166312, "time": "2013-04-01T20:38:21Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-04-01T20:38:21Z", "text": "Using PrintWriter with autoFlush=false and without flush()-methods."}, {"count": 22, "tags": [], "bug_id": 54777, "attachment_id": null, "id": 166313, "time": "2013-04-01T21:36:21Z", "creator": "epikhinm@gmail.com", "creation_time": "2013-04-01T21:36:21Z", "is_private": false, "text": "Hmmm. PrintWriter use BufferedWriter as OutputWriter. And his already have a buffer. It's good idea. Philippe, thank you. But be careful. If you forget close()-method or fd-leak, you have been a wonderful artefacts with lose of data."}, {"count": 23, "text": "Date: Thu Apr  4 14:51:30 2013\nNew Revision: 1464580\n\nURL: http://svn.apache.org/r1464580\nLog:\nBug 54777 - Improve Performance of default ResultCollector\nAdd saving.autoflush\nBugzilla Id: 54777\n\nModified:\n    jmeter/trunk/bin/jmeter.properties\n    jmeter/trunk/src/core/org/apache/jmeter/reporters/ResultCollector.java\n    jmeter/trunk/xdocs/changes.xml", "creator": "p.mouawad@ubik-ingenierie.com", "is_private": false, "id": 166376, "time": "2013-04-04T14:52:12Z", "bug_id": 54777, "creation_time": "2013-04-04T14:52:12Z", "tags": [], "attachment_id": null}, {"count": 24, "tags": [], "creator": "p.mouawad@ubik-ingenierie.com", "attachment_id": null, "text": "Date: Thu Apr  4 19:30:29 2013\nNew Revision: 1464689\n\nURL: http://svn.apache.org/r1464689\nLog:\nBug 54777 - Improve Performance of default ResultCollector\nBugzilla Id: 54777\n\nModified:\n    jmeter/trunk/bin/jmeter.properties\n    jmeter/trunk/src/core/org/apache/jmeter/reporters/ResultCollector.java\n    jmeter/trunk/xdocs/changes.xml", "id": 166381, "time": "2013-04-04T19:31:30Z", "bug_id": 54777, "creation_time": "2013-04-04T19:31:30Z", "is_private": false}]
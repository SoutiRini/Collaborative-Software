[{"count": 0, "tags": [], "bug_id": 18011, "attachment_id": null, "id": 33211, "time": "2003-03-14T19:14:32Z", "creator": "greg.pickering@mirant.com", "creation_time": "2003-03-14T19:14:32Z", "is_private": false, "text": "I constructed an extended version of FileSet (using a selector is too slow) and \nregistered it in a types.properties file for use as \"fileset\".  I added a \ntypedef under project and the debug output indicated that the type was \nsuccessfully overridden.  However, when I try to use the extended version of \nfileset in a task, Ant throws an exception indicating that the \nattribute \"query\" is not valid for fileset.  The stacktrace clearly indicates \nthat the reason is because the the attribute is attempting to be set on the \ndefault org.apache version of FileSet, not the (differently named) extension.\n\nDuring my investigation of this, I discovered that the root cause is in \nIntrospectionHelper.  In the IntrospectionHelper constructor, there is a block \nfor handling the \"add\" methods of a task.  This block simply invokes the \nconstructor of the class specified as the argument of the \"add\" method.  This \nis a problem because in my case, the addFileset method of all tasks specifies \nthe org.apache.tools.ant.types.FileSet class and that is the only class that \nwill be instantiated despite what the typedef indicates.  It seems the \nIntrospectionHelper should first attempt to lookup the type before \ninstantiating the default.  This, of course, will require some rearchitecting \nas IntrospectionHelper does not have a reference to an instance of Project."}, {"count": 1, "tags": [], "bug_id": 18011, "is_private": false, "text": "This is way out the design goals for ant. You are allowed to add new types that\nare subclasses of the existing one, but replacing the existing one with a new\ntype midway through a build is a very new idea indeed. \n\nnot necessarily bad, just very new. We will have to think about this one. Dont\nexpect any change for a while, like in ant1.6 or before. ", "id": 33226, "time": "2003-03-15T01:18:30Z", "creator": "stevel@apache.org", "creation_time": "2003-03-15T01:18:30Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 18011, "is_private": false, "text": "Thanks for the feedback.  I wouldn't say that replacing a task midway through \nthe build is really my goal.  It is more an artifact of the fact that in order \nto provide a new implementation of, say fileset, I either have to reimplement \nor extend all of the tasks that support fileset where I want to use this new \nfunctionality or I have to make Ant think my task is really fileset.  \n\nIf Ant supported something like classifying a new task as another type (like my \nCCVersionSet, which extends FileSet, as a FileSet) and when it encountered a \nccversionset type, it called addFileSet, I'd be perfectly happy.  This would \nseem to take full advantage of polymorphic behavior within scripts, which is \nwhat I'm really after.  Alas, it does not function so.  If I had a suggestion \nfor improvement, that would be it.", "id": 33228, "time": "2003-03-15T02:11:45Z", "creator": "greg.pickering@mirant.com", "creation_time": "2003-03-15T02:11:45Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 18011, "attachment_id": null, "text": "workaround: in the case of a fileset subclass, this should work:\n\n<myfileset id=\"foo\" query=\"why?\" />\n\n<somecoretask>\n  <fileset refid=\"foo\" />\n</somecoretask>", "id": 75475, "time": "2005-05-27T00:41:22Z", "creator": "mbenson@apache.org", "creation_time": "2005-05-27T00:41:22Z", "is_private": false}]
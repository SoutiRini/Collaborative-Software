[{"count": 0, "tags": [], "text": "Created attachment 22991\nApplication that demonstrates the problem\n\nIt's not possible to write a recursive tag file that makes use of a fragment attribute. The fragment will be correctly invoked at the first level. But when the fragment is passed on as an attribute to the recursive invocation, the fragments seems to be invoked and the result of the invocation is used instead.\n\nSee the attached application for a demonstration.\n\nThis may be related to bug #42693.", "attachment_id": 22991, "id": 123083, "creator": "jens.askengren@gmail.com", "time": "2008-12-04T07:03:54Z", "bug_id": 46339, "creation_time": "2008-12-04T07:03:54Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 46339, "attachment_id": null, "id": 123567, "time": "2008-12-28T15:05:19Z", "creator": "markt@apache.org", "creation_time": "2008-12-28T15:05:19Z", "is_private": false, "text": "Thanks for the excellent test case. It made investigating this much, much easier.\n\nUnfortunately, the behaviour you are expecting appears to be in breach of the JSP spec. I say \"appears\" since the JSP spec itself isn't 100% clear. JSP.5.12.3 states that:\n\n\"When a tag file invokes a fragment that appears in the calling page, the JSP container provides a way to synchronize variables between the local page scope in the tag file and the page scope of the calling page.\"\n\nWhat wasn't clear to me was how should this be interpreted for iterative and/or nested tags. Should the tag's local page scope be synchronised with the page scope of the page/tag that calls it (i.e. its immediate parent) or should it be synchronised with the outermost calling JSP page?\n\nCurrently, Tomcat synchronises local page scope with the parent's page scope. Your test case requires that the local page scope is synchronised with the outermost calling JSP page.\n\nI modified Tomcat so your test would pass and ran the JSP Technology Compatibility Kit (TCK). The changes caused several failures. Further investigation showed that the TCK expects the local page scope to be synchronised only with the immediate parent. Based on experience, if there is an ambiguity in the specification language and the TCK requires a particular interpretation of the spec language then the TCK interpretation is the correct one.\n\nTherefore, I conclude that this bug in invalid since it attempts to do something in breach of the spec.\n\nTo be sure, I will raise this with the EG in case the TCK is based on an incorrect interpretation."}, {"count": 2, "tags": [], "text": "Created attachment 23055\nPatch used for testing\n\nI have attached the patch I used for testing. It enabled your test case to pass but it breaks Tomcat's spec compatibility. I have attached it in case you wish to apply it locally or if I need to return to it in light of the EG's response.", "attachment_id": 23055, "id": 123568, "creator": "markt@apache.org", "time": "2008-12-28T15:16:20Z", "bug_id": 46339, "creation_time": "2008-12-28T15:16:20Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 46339, "text": "The proposed patch to synchronize tag variables to the outermost page context will work for this program, but will fail in other cases.  Consider the case where recursive.tag invokes foo.tag, passing another fragment.  It would be wrong to synchronize the variables in foo.tag with the outermost page context in this case, because that fragment is defined in foo.tag, and not index.jsp.\n\nTo fix this bug, the variable needs to be synchronized with the page context that the fragment is created, before the fragment is invoked.  I propose to add a parameter to org.apache.jasper.runtime.JspContextWrapper.syncBeforeInvoke().\n\n    /**\n     * Synchronize variables before fragment invokation\n     * @param jspContext The Jsp context of the fragment\n     */\n    public void syncBeforeInvoke(JspContext jspContext) {\n        copyTagToPageScope(jspContext, VariableInfo.NESTED);\n        copyTagToPageScope(jspContext, VariableInfo.AT_BEGIN);\n    }\n\nI think we can safely leave the rest of JspContextWrapper the way it is.\n\nOf course, Generator needs to be modified to get the JspContext from the fragment and pass it to syncBeforeInvoke().\n\nI'll submit a patch when I get around to it.  :-)\n\nIt would be nice for the spec to clarify this.  JSP.8.9.1 and Table JSP.8-6 will need to be updated.", "id": 123812, "time": "2009-01-06T17:56:52Z", "creator": "kin-man.chung@sun.com", "creation_time": "2009-01-06T17:56:52Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46339, "attachment_id": null, "id": 123815, "time": "2009-01-07T01:16:01Z", "creator": "markt@apache.org", "creation_time": "2009-01-07T01:16:01Z", "is_private": false, "text": "Re-opening as a result of Kin-Man's comment.\n\nI'll add looking a this to my todo list but if you get there first with the patch that is fine too :)"}, {"count": 5, "tags": [], "text": "Created attachment 23094\nPatch based on glassfish source\n\nThe patch is based on glassfish source, so the lines may be off.", "attachment_id": 23094, "id": 123852, "creator": "kin-man.chung@sun.com", "time": "2009-01-07T18:15:14Z", "bug_id": 46339, "creation_time": "2009-01-07T18:15:14Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46339, "attachment_id": null, "id": 123854, "time": "2009-01-07T19:20:59Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2009-01-07T19:20:59Z", "is_private": false, "text": "My reading of the spec (JSP 2.1, Final Release) is the following\n\n1. The spec in many places uses \"calling page\" where \"calling page or tag\" is meant, and I think that it is only for brevity. The full sentence with \"or tag\" or \"/tag\" is usually written several lines below such a fragment.\n\nE.g. JSP.5.12.3 that Mark cited in comment 1, continues with \"The container\nmust then generate code to synchronize the page scope values for the variable in\nthe tag file with the page scope equivalent in the calling page or tag file.\"\n\nThus, the NESTED and AT_BEGIN variables update the page scope of the calling page or tag. It is said in JSP.5.12.3 (page \"1-114\"), in JSP.8.9 (page \"1-186\"), and elsewhere.\n\nThat explains why the first patch that breaks TCK is incorrect.\n\nIt might require a review by an editor to lessen such omissions, especially in the first sentences of a chapter and in tables.\n\n2. Each JSP Fragment is associated with a JspContext of that page or tag in context of which it is defined.\n\nIt is first mentioned in JSP.5.12.1 (page \"1-113\") and explained in detail in Part II in chapter \"7. JSP Fragments\" in description of package \"javax.servlet.jsp.tagext\" in Part II (pages \"2-77\" through \"2-79\").\n\nI find it understandable, because the page author may reference any other variable of the page, and those are of no concern for the tag authors.\n\nThis said, here is a solution for the recursive.tag file: redeclare the JSP fragment. That is, patching recursive.tag:\n\n- <x:recursive content=\"${content}\" depth=\"${depth-1}\"/>\n+ <x:recursive depth=\"${depth-1}\">\n+   <jsp:attribute name=\"content\">\n+     <jsp:invoke fragment=\"content\"/>\n+   </jsp:attribute>\n+ </x:recursive>\n\n--\nA small thing that was bugging me was how this redeclaration will work in view of JSP.5.12.1 phrase that says \"the results will be sent to the JspWriter of the JspContext associated with the JspFragment.\" and how it plays along with specifying an explicit Writer (var or varReader attributes of jsp:invoke action).\n\nThat is: how invoking a fragment from a fragment will work if the writer for the outer fragment was specified explicitly, but not for the inner fragment, and the inner fragment belongs to the parent page?\nThat is, will it bypass it and write to the page? The answer is that it would not. That is good.\nAs implemented in Tomcat, the JspWriter in not stored in JspContext of the tag, but in the one of the page. Thus, specifying an explicit writer (context.pushBody() call) is delegated to the page, thus affecting all the tags. Thus, all fragments in the same response do write to the same writer.\nI do not know where in the specification it comes from (I think it should be written somewhere when defining a \"JSP Context Wrapper\"), but it works good."}, {"count": 7, "tags": [], "creator": "jens.askengren@gmail.com", "attachment_id": null, "text": "\nThe patched tag file works in Tomcat but not on Resin.\n\nhttp://bugs.caucho.com/view.php?id=3228\n\nTo me, this code looks like it should evaluate the fragment and pass the result to the recursive invocation:\n\n<x:recursive depth=\"${depth-1}\">\n  <jsp:attribute name=\"content\">\n    <jsp:invoke fragment=\"content\"/>\n  </jsp:attribute>\n</x:recursive>\n\nApparently it passes the reference to the fragment instead. Strange...", "id": 123856, "time": "2009-01-08T02:02:15Z", "bug_id": 46339, "creation_time": "2009-01-08T02:02:15Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 46339, "text": "Konstantin,\n\nAgreed with you on your reading of the spec on both points.  However, I think the  current tag file (without your patch) can be made to work if we make the following modification to the spec:\n\n   Before the invocation of the fragment, AT_BEGIN and NESTED variables are\n   copied from the current JspContext to the JspContext of the fragment\n   (**instead** of the JspContext of the calling page or tag file).\n\nThe JspContext of the fragment and that of the calling page or tag file is the same for first level calls, but would be different for 2nd level calls, when the fragment is passed from the called tag file to another tag file.  It really doesn't make sense to copy variables to the calling page before fragment invocation when the fragment is not defined in the calling page.  Making such a change would correct such oversight in the spec.  My patch reflects such a change.\n\nI'll make sure that such change gets into the JSP MR or next spec, if there is no objections.\n\nYour patched tag file works, because you are essentially chaining the fragment invocations, so there is a lot of copying going on here.", "id": 123888, "time": "2009-01-08T16:44:06Z", "creator": "kin-man.chung@sun.com", "creation_time": "2009-01-08T16:44:06Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 46339, "text": "Thanks for the patch. I have applied it to trunk and proposed it for 6.0.x.", "id": 123906, "time": "2009-01-09T09:14:18Z", "creator": "markt@apache.org", "creation_time": "2009-01-09T09:14:18Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "kin-man.chung@sun.com", "attachment_id": null, "text": "I reread the spec on this issue carefully, and after some consideration, I've come to the conclusion that it is best that we don't \"fix\" the spec and the implementation now.\n\nThe original intend of the spec is to set the variables in the calling page/tag before the invocation of the fragment.  This is problematic, since that means that fragments passed from one tag file to another cannot communicate with the original caller using variables, as demonstrated in the case here.  From the paragraphs on page 2-78, the original spec author seemed to know this.\n\nThe way the variables are synchronized between the calling page and the tag files  is reminiscent of passing information in global variables and we all know that global variables are evil.  Any attempt for a simple fix to one problem will cause problems in another area.  My proposed fix for this problem will cause problems with the save and restore operations at the tag entry and exit.  What is needed is a complete redesign of the way calling page and tag files communicate. The is of course impractical or impossible at this time.\n\nTherefore I am withdrawing my patch.  Mark, please revert your changes. Sorry for the inconvenience.", "id": 123964, "time": "2009-01-12T11:05:39Z", "bug_id": 46339, "creation_time": "2009-01-12T11:05:39Z", "is_private": false}, {"count": 11, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "No problem. Patch reverted.", "id": 123971, "time": "2009-01-12T13:29:35Z", "bug_id": 46339, "creation_time": "2009-01-12T13:29:35Z", "is_private": false}]
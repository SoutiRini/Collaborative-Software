[{"count": 0, "tags": [], "bug_id": 38716, "attachment_id": null, "is_private": false, "id": 85944, "time": "2006-02-20T11:54:03Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-20T11:54:03Z", "text": "Tomcat indirectly leaks memory on webapp undeployment, due to the fact that the\nworker threads aren't re-created ever. It has always done so (depending on the\njava version, actually), but can be _perfectly fixed_.\n\nThe reason is ThreadLocals, and the application developer will in many\ncircumstances _never_ be able to fix the problem, due to the problem being\noutside his reach (e.g. in libraries etc).\n\nHere is a discussion of the problem:\n  http://www.jroller.com/page/tackline?entry=fixing_threadlocal\n\nHere is a bug entry by the same guy. Given sun's response, there isn't much hope\nhere:\n  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6254531\n\n(Please vote for the bug in any case - it is _a huge problem_ for everything\nthat hopes to \"reload\" an application)\n\nHere is another discussion, with a list of likely offenders in the case:\n \nhttp://opensource2.atlassian.com/confluence/spring/pages/viewpage.action?pageId=2669\n\n\nAn actual fix for tomcat is one of the following:\n\na) On any web application undeployment, get all threads in all pools that can\nhave had anything to do with that webapps classloader to die, and reinstantiate\nthem.\n\nb) Make a crude solution where on any webapp undeployment, the same threads as\nabove instead are sent packing into a \"clean yourself\" method. This method will\nhave to do introspection into the \"ThreadLocalMap\" instance in the Thread, make\nthe instance accessible (override the private marking), go through all objects\nthere, all objects whose class's classloader is == the instance that we're about\nto throw, are nulled.\n\nOf course, threads that are servicing something will be notified on pool\nreentry, while threads that currently are in the pool, will be fixed right away.\n\nBoth of the above will _instantly_ fix most memory-leak-on-reload problems in\ntomcat.\n\nEven if recreating threads are way costly, the solutions above will have no\nimpact in any real setting: reloads aren't done often.\n  In addition, often a Tomcat instance is just running one webapp, or at least\nthe other webapps are just there to feed the one major (a portal springs to\nmind). So recreating all threads won't do any harm if one is already undeploying\n(or reloading) the webapp in question.\n\nThis could be offered as an option in the configuration.\n\n.. and it could be a new button to hit in the /manager interface (and JMX):\n\"kill and recreate all threads\".\n\nPS: On the page \"http://tomcat.apache.org/faq/deployment.html\" it is said that\nthe ClassLoader cannot be GC'ed. This is pure BS."}, {"count": 1, "tags": [], "bug_id": 38716, "text": "Feel free to use your own custom Tomcat version :)", "id": 85949, "time": "2006-02-20T13:56:32Z", "creator": "remm@apache.org", "creation_time": "2006-02-20T13:56:32Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 38716, "attachment_id": null, "is_private": false, "id": 85953, "time": "2006-02-20T14:41:14Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-20T14:41:14Z", "text": "Why is this a blatant, non-explained WONTFIX?\n\nIs this some special tomcat-friendly way of saying \"feel free to come with a\npatch, and we'll include it\", or is there some long history of reasons for why\nthis suggestion is so utterly and totally lame that it don't even deserve a\nsingle line of explaination for why it is rejected?"}, {"count": 3, "tags": [], "bug_id": 38716, "is_private": false, "text": "I agree with Endre. \nIt can be a problem to use the ThreadLocal in thread pool environment, as\nexplained. IMHO, if tomcat have the proposed feature, it would be good to\nimprove the stability of the applications.\nCan you explain a bit more why it won't be fixed?\n\n\n \n", "id": 85955, "time": "2006-02-20T15:09:08Z", "creator": "jongjin.choe@gmail.com", "creation_time": "2006-02-20T15:09:08Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "(In reply to comment #2)\n> Is this some special tomcat-friendly way of saying \"feel free to come with a\n> patch, and we'll include it\", or is there some long history of reasons for why\n> this suggestion is so utterly and totally lame that it don't even deserve a\n> single line of explaination for why it is rejected?\n\nYou should use whatever custom solutions are needed for each webapp, and I don't\nlike the generic solution.", "attachment_id": null, "id": 85956, "creator": "remm@apache.org", "time": "2006-02-20T15:34:54Z", "bug_id": 38716, "creation_time": "2006-02-20T15:34:54Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 38716, "attachment_id": null, "text": "An alternative (which I don't seem to like) is to use time to live for threads.\nOnce a thread has lived for X amount of time or served Y requests - it will be\n\"terminated\". This could allow threadlocals go away, but an OOM could still\noccur if the required amount of time/requests is not reached. \n\nThis approach mirrors the apache process model where you can request processes\nterminate after so many requests. (But comparing threads to processes is like\nnot the greatest analogy)", "id": 85958, "time": "2006-02-20T15:47:32Z", "creator": "funkman@joedog.org", "creation_time": "2006-02-20T15:47:32Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 38716, "text": "(In reply to comment #5)\n> An alternative (which I don't seem to like) is to use time to live for threads.\n> Once a thread has lived for X amount of time or served Y requests - it will be\n> \"terminated\". This could allow threadlocals go away, but an OOM could still\n> occur if the required amount of time/requests is not reached. \n> \n> This approach mirrors the apache process model where you can request processes\n> terminate after so many requests. (But comparing threads to processes is like\n> not the greatest analogy)\n\nI hate this approach too.", "id": 85959, "time": "2006-02-20T15:56:05Z", "creator": "remm@apache.org", "creation_time": "2006-02-20T15:56:05Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 38716, "text": "As I tried to point out in the inital description, the \"resolution\" to these\nproblems might lay within libraries that are _not possible_ to reach for a\nwebapp developer.\n\nYour suggestion for resolution is then \"don't use those libraries\"?\n\nI had hoped that Tomcat would be pragmatic in this regard, and actually try to\nsupply a server that \"works out of the box\", given the problems that are present\nin the environment, even if this is a problem with the core java classes as such.\n\nIt seems like absolutely no-one that uses Tomcat can get reloading to work\nproperly without getting memory-leaks. The reason for this is rather throughly\nexplained in this enhancement request, and a solutions is proposed.\n\nWhy is it that you basically just \"hate this to death\" in such a way? What is\ngenerically wrong with being able to \"cycle\" the threadpools, e.g. by requesting\na particular link in the monitor?", "id": 85962, "time": "2006-02-20T17:23:19Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-20T17:23:19Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #7)\n> As I tried to point out in the inital description, the \"resolution\" to these\n> problems might lay within libraries that are _not possible_ to reach for a\n> webapp developer.\n> \n> Your suggestion for resolution is then \"don't use those libraries\"?\n> \n> I had hoped that Tomcat would be pragmatic in this regard, and actually try to\n> supply a server that \"works out of the box\", given the problems that are present\n> in the environment, even if this is a problem with the core java classes as such.\n> \n> It seems like absolutely no-one that uses Tomcat can get reloading to work\n> properly without getting memory-leaks. The reason for this is rather throughly\n> explained in this enhancement request, and a solutions is proposed.\n> \n> Why is it that you basically just \"hate this to death\" in such a way? What is\n> generically wrong with being able to \"cycle\" the threadpools, e.g. by requesting\n> a particular link in the monitor?\n\nCan you save us the whining, please ?", "tags": [], "bug_id": 38716, "is_private": false, "count": 8, "id": 85963, "time": "2006-02-20T17:39:21Z", "creator": "remm@apache.org", "creation_time": "2006-02-20T17:39:21Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 38716, "attachment_id": null, "is_private": false, "id": 85974, "time": "2006-02-20T21:40:34Z", "creator": "fhanik@apache.org", "creation_time": "2006-02-20T21:40:34Z", "text": "I would have to disagree with the abrasive answer. Tomcat already shrinks and\ngrows thread pools dynamically. When an app reload happens, it could mark\nthreads to expire after serving the next request or when the connection closes,\nand serve new requests on new threads that will be fresh.\n\nnot sure what is so bad about that idea?"}, {"count": 10, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 85987, "time": "2006-02-21T00:07:16Z", "bug_id": 38716, "creation_time": "2006-02-21T00:07:16Z", "text": "(In reply to comment #9)\n> Tomcat already shrinks and grows thread pools dynamically.\n\nTomcat hasn't been doing that for a long time. Shrinking thread pools may also\nbe a source of leaks, BTW.\n\n> Not sure what is so bad about that idea?\n\nIt's a bit obvious: it is impractical. The only solution is to shut down the\nwhole thread pool, and start over. As a result, it's completely useless except\nin very specific cases, and for these cases, specific solutions should be used\nsince they would perform much better (filters, listeners, fixes to the libs, etc).\n"}, {"count": 11, "tags": [], "bug_id": 38716, "attachment_id": null, "is_private": false, "id": 86003, "time": "2006-02-21T12:29:58Z", "creator": "apache@stolsvik.com", "creation_time": "2006-02-21T12:29:58Z", "text": "Re comment #8: Can you save me the absolutely assholish attitude, please?\n\nSorry for intruding in your totalitarian kingdom, Remy.. So very stupid of me."}, {"count": 12, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 86005, "time": "2006-02-21T13:24:12Z", "bug_id": 38716, "creation_time": "2006-02-21T13:24:12Z", "is_private": false, "text": "(In reply to comment #11)\n> Re comment #8: Can you save me the absolutely assholish attitude, please?\n> \n> Sorry for intruding in your totalitarian kingdom, Remy.. So very stupid of me.\n\nI'm glad you appreciate it :)\n"}]
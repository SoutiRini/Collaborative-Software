[{"count": 0, "tags": [], "bug_id": 35247, "text": "Looks like a possible RFC 2616 MUST violation.\nApache cache ignores s-maxage cache-control\ndirective in the response when that s-maxage\nis combined with (more permissive) max-age directive\nand Expires header in the same response.\n\nSee attached trace for details and ways to reproduce\nthe violation mentioned above.\n\nTest case IDs in the trace link to human-oriented\ntest case description and RFC quotes, if available.", "id": 76094, "time": "2005-06-06T21:47:51Z", "creator": "coad@measurement-factory.com", "creation_time": "2005-06-06T21:47:51Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "coad@measurement-factory.com", "attachment_id": 15319, "id": 76097, "time": "2005-06-06T21:48:55Z", "bug_id": 35247, "creation_time": "2005-06-06T21:48:55Z", "is_private": false, "text": "Created attachment 15319\ntest case trace"}, {"count": 2, "tags": [], "creator": "otaylor@redhat.com", "attachment_id": null, "id": 89730, "time": "2006-06-03T13:55:29Z", "bug_id": 35247, "creation_time": "2006-06-03T13:55:29Z", "is_private": false, "text": "I noticed this when reading through the code;  the code in question\n(from cache-util.c is)\n\n   if (((smaxage != -1) && (age < (smaxage - minfresh))) ||\n        ((maxage != -1) && (age < (maxage + maxstale - minfresh))) ||\n        ((smaxage == -1) && (maxage == -1) && /* check expires */...\n\nIt may be a simple oversight that the second clause doesn't have\na (smaxage == 1). Certainly RFC 2616 implies that the above is wrong:\n\n  If a response includes an s-maxage directive, then for a shared cache \n  (but not for a private cache), the maximum age specified by this directive \n  overrides the maximum age specified by either the max-age directive or \n  the Expires header. The s-maxage directive also implies the semantics of \n  the proxy-revalidate directive (see section 14.9.4), i.e., that the shared \n  cache must not use the entry after it becomes stale to respond to a \n  subsequent request without first revalidating it with the origin server. \n  The s- maxage directive is always ignored by a private cache.\n\nThat implies to me that if s-maxage is set, it should also override any\nmax-age passed in the request. If s-maxage only is supposed to override \nmax-age in the cached response, then a slightly more complicated fix would\nbe needed."}, {"count": 3, "tags": [], "bug_id": 35247, "attachment_id": null, "text": "If I understand you correctly, you propose the following patch:\n\nIndex: modules/cache/cache_util.c\n===================================================================\n--- modules/cache/cache_util.c  (Revision 411466)\n+++ modules/cache/cache_util.c  (Arbeitskopie)\n@@ -297,7 +297,8 @@\n\n     /* handle expiration */\n     if (((smaxage != -1) && (age < (smaxage - minfresh))) ||\n-        ((maxage != -1) && (age < (maxage + maxstale - minfresh))) ||\n+        ((smaxage == -1) && (maxage != -1) &&\n+         (age < (maxage + maxstale - minfresh))) ||\n         ((smaxage == -1) && (maxage == -1) &&\n          (info->expire != APR_DATE_BAD) &&\n          (age < (apr_time_sec(info->expire - info->date) + maxstale -\nminfresh)))) {\n", "id": 89735, "time": "2006-06-03T20:08:02Z", "creator": "rpluem@apache.org", "creation_time": "2006-06-03T20:08:02Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 35247, "attachment_id": null, "text": "Yes, that was my proposal. Note that I'm in no way an HTTP expert, so I \nwould advise doing some double-checking :-)\n", "id": 89736, "time": "2006-06-03T21:40:57Z", "creator": "otaylor@redhat.com", "creation_time": "2006-06-03T21:40:57Z", "is_private": false}, {"count": 5, "tags": [], "creator": "hno@squid-cache.org", "text": "> That implies to me that if s-maxage is set, it should also override any\n> max-age passed in the request. If s-maxage only is supposed to override \n> max-age in the cached response, then a slightly more complicated fix would\n> be needed.\n\nNot quite.\n\nNeither change the meaning of the request max-age. It's a separate condition all\ntogether.\n\nIf CC s-maxage is set in the response then this overrides any Expires and/or CC\nmax-age in the response header and their values are not relevant for the\nexpiry/freshness calculation.\n\nIf CC max-age is set in the response then this overrides any Expires response\nheader and the Expires header is not relevant for the expiry/freshness calculation. \n\nThe reasoning behind this is to allow the content provided to tune caching\nappropriately. There is situations where one wants shared caches to cache longer\nthan private caches, and there is siuations where the shared cache should cache\na shorter interval. Expires is the HTTP/1.0 fallback, and should consequently be\nignored if any of the HTTP/1.1 constraints is available (max-age or s-maxage).\n\n\nHowever, CC max-age request header rmust also be respected in all conditions.\nThere is no response headers which overrides this request header.\n\n\nThere is no s-maxage request CC directive, as it would be kind of pointless to\ndefine a such directive.\n\n\nThere is however a the max-stale request directive which can relax the freshness\nchecks, but not if any of the must-revalidate conditions is set on the response\n(must-revalidate, s-maxage, proxy-revalidate, no-cache). If any of the\nmust-revalidate conditions is set then stale objects must be revalidated with\nthe origin before sent to the requesting client.\n\n\nresponse s-max-age / max-age / expires (in that order) sets the server side\nfreshness expiry date.\n\nif neither s-max-age / max-age or expires is present then heuristics MAY be used\nto assign an freshness expiry date on the response.\n\nrequest max-age sets the client-side upper limit on the freshness expiry date\nontop of the freshness expiry defined by the origin.\n\nafter this request max-stale applies and defines how far after the freshness\nexpiry date is considered acceptable by the client. The cache MAY send such\nstale responses.\n\n\nAnd yes, I do consider myself an expert on HTTP.", "id": 89801, "time": "2006-06-06T01:41:11Z", "bug_id": 35247, "creation_time": "2006-06-06T01:41:11Z", "is_private": false, "attachment_id": null}, {"text": "True, the simple change I suggested above wouldn't make sense in the case:\n\n request CC max-age 1 day\n response CC max-age 3 days\n response CC s-maxage 2 days\n\nThen we should consider cached content stale if it is more than 1 day\nstale; so \"a slightly more complicated fix\" is in fact needed.... s-maxage\nneeds to be taken into account before the minimum of the request and response\nmax-age is taken.\n\nBut in any case, the current code is certainly not right :-)", "tags": [], "bug_id": 35247, "attachment_id": null, "count": 6, "id": 89802, "time": "2006-06-06T02:18:58Z", "creator": "otaylor@redhat.com", "creation_time": "2006-06-06T02:18:58Z", "is_private": false}, {"count": 7, "tags": [], "creator": "minfrin@sharp.fm", "attachment_id": null, "id": 144209, "time": "2011-02-11T15:14:41Z", "bug_id": 35247, "creation_time": "2011-02-11T15:14:41Z", "is_private": false, "text": "Fixed on httpd-trunk in r1069942."}]
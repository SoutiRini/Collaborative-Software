[{"count": 0, "tags": [], "bug_id": 25623, "attachment_id": null, "id": 49317, "time": "2003-12-18T11:59:37Z", "creator": "81bas@mail.ru", "creation_time": "2003-12-18T11:59:37Z", "is_private": false, "text": "The forEach tag after pooling doesn't allow items to be garbage collected.\nJVM profiler indicates, that org\\apache\\taglibs\\standard\\tag\\el\\core\\ForEachTag \nclass 'items' member still have references to objects, even after all sessions \ntimeout and garbage collector run. The same thing happens with 'c:set' tags - \nthey holds references to objects in 'target' member. May be it is a bug in \nTomcat with invoke 'release()' method? I try to use all Tomcat 4.1.x versions. \nThey all acts the same. After this I try to use Struts 'logic:iterate' tag, and \nall objects will be garbage collected successfully."}, {"count": 1, "tags": [], "bug_id": 25623, "attachment_id": null, "id": 54635, "time": "2004-03-25T03:04:53Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-03-25T03:04:53Z", "is_private": false, "text": "There's been a thread about this issue in the mailing list:\n\nhttp://nagoya.apache.org/eyebrowse/BrowseList?listId=43&by=thread&from=682274\n"}, {"count": 2, "tags": [], "bug_id": 25623, "attachment_id": null, "text": "CC'ing the taglibs-dev address to all Standard bugs. ", "id": 57254, "time": "2004-05-12T00:27:02Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-05-12T00:27:02Z", "is_private": false}, {"count": 3, "tags": [], "creator": "justyna.horwat@sun.com", "attachment_id": null, "id": 59257, "time": "2004-06-15T21:24:28Z", "bug_id": 25623, "creation_time": "2004-06-15T21:24:28Z", "is_private": false, "text": "From the tag author's point of view I believe that the JSTL tag handler's are doing the right thing. In the \nforEach tag, the release method sets the items to null. The tag handler instance can be reused if tag \npooling is enabled and if another custom action uses the same set of attributes. \n\nThe strut's tags explicitly set items to null in the doEndTag() method. The struts implementation \nviolates the tag pooling contract and can end up needlessly destroying and creating items between \ninvocations of doStartTag and doEndTag.\n\nNow, on to how the container manages the jsp lifecycle and when release is actually called. If you look \nat the Tomcat 5 jasper (jsp) implemenation you will see a Generator that generates the java servlet \nsource code given a jsp. This Generator creates a _jspDestroy() method. Here is the method from one of \nmy generated servlet files:\n\n----\n  public void _jspDestroy() {\n    _jspx_tagPool_c_out_value_nobody.release();\n    _jspx_tagPool_c_out_value_escapeXml_nobody.release();\n  } \n----\n\nWhen _jspDestroy() is invoked it calls all the tag handlers in the pool and tells them to invoke their \nrelease methods.\n\nNow on to when the _jspDestroy() method is invoked. Every servlet that was generated from a jsp page \nextends org.apache.jasper.runtime.HttpJspBase. The HttpJspBase has a destroy() method that invokes \n_jspDestroy(). HttpJspBase.destroy() is invoked whenever Servlet.destroy() is and follows the servlet \nlifecycle.\n\nNow on to the tricky part, the container itself determines when the servlet will be taken out of service \nand can do so for various reasons. It would be difficult to determine when it has done so and when the \nobject references are actually freed. It would be interesting to see your profiler results when using a \ndifferent container.\n\nThere is a good discussion on container behavior, lifecycle, and tag pooling available in this bug report:\n\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=16001\n\nIf you find that you are having issues as a result of the container tag pooling, uou can turn it off in \nTomcat by setting the init parameter \"enablePooling\" to \"false\" in your global $CATALINA_BASE/conf/\nweb.xml.\n\nThis issue seems more in the realm of the container and how it manages objects and tag pools."}, {"count": 4, "tags": [], "bug_id": 25623, "attachment_id": null, "text": "It must be a bug. I have developed a big system that uses many JSTL Tags, and \nafter some hours I have OutOfMemory error.\nI used a profiler and discovered that the SetTag and others tags (some that I \ndeveloped) was not releasing objects in release() method.\nNow I'm implementing TryCatchFinally interface in all tags I developed and for \nSetTag I extended it and implemented TryCatchFinally too.\n\n(In reply to comment #0)\n> The forEach tag after pooling doesn't allow items to be garbage collected.\n> JVM profiler indicates, that \norg\\apache\\taglibs\\standard\\tag\\el\\core\\ForEachTag \n> class 'items' member still have references to objects, even after all \nsessions \n> timeout and garbage collector run. The same thing happens with 'c:set' tags - \n> they holds references to objects in 'target' member. May be it is a bug in \n> Tomcat with invoke 'release()' method? I try to use all Tomcat 4.1.x \nversions. \n> They all acts the same. After this I try to use Struts 'logic:iterate' tag, \nand \n> all objects will be garbage collected successfully.\n\n", "id": 71401, "time": "2005-02-23T15:27:59Z", "creator": "thiagofa@bol.com.br", "creation_time": "2005-02-23T15:27:59Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 25623, "attachment_id": null, "text": "Based on Justyna's reply, marking this as WONTFIX.", "id": 106420, "time": "2007-08-06T22:04:22Z", "creator": "bayard@apache.org", "creation_time": "2007-08-06T22:04:22Z", "is_private": false}, {"count": 6, "tags": [], "creator": "mb-asf@niskala.org", "text": "The new location for the nagoya link referenced here seems to be http://issues.apache.org/bugzilla/show_bug.cgi?id=16001", "id": 113092, "time": "2008-01-23T13:36:38Z", "bug_id": 25623, "creation_time": "2008-01-23T13:36:38Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 25623, "attachment_id": null, "text": "*** Bug 50661 has been marked as a duplicate of this bug. ***", "id": 143695, "time": "2011-01-27T02:57:58Z", "creator": "jboynes@apache.org", "creation_time": "2011-01-27T02:57:58Z", "is_private": false}]
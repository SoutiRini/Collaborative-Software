[{"count": 0, "tags": [], "bug_id": 51240, "attachment_id": null, "id": 146524, "time": "2011-05-22T19:22:26Z", "creator": "guillermo.grandes@gmail.com", "creation_time": "2011-05-22T19:22:26Z", "is_private": false, "text": "When acceptorThreadCount > 1, maxConnections not honors config, this affects BIO & NIO connector (others don't know).\n\n---------- test config begin --------\n\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\" \n        maxThreads=\"300\" minSpareThreads=\"4\"/>\n    \n    <Connector port=\"9993\"\n               protocol=\"org.apache.coyote.http11.Http11Protocol\"\n               URIEncoding=\"ISO-8859-1\"\n               enableLookups=\"false\"\n\n               acceptorThreadCount=\"2\"\n               executor=\"tomcatThreadPool\"\n               acceptCount=\"1\"\n               maxConnections=\"1\"\n               />\n\n    <Connector port=\"9994\"\n               protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               URIEncoding=\"ISO-8859-1\"\n               enableLookups=\"false\"\n\n               acceptorThreadCount=\"2\"\n               executor=\"tomcatThreadPool\"\n               acceptCount=\"1\"\n               maxConnections=\"1\"\n               />\n\n---------- test config end ----------\n\n---- Test-1 (acceptorThreadCount=\"1\") --- OK ---\n  $ ab2 -n 20000 -c 1000 http://localhost:999x/\n  $ netstat -atn | grep :999x | grep ESTABLISHED\n\n  This show range 3-5 connections (acceptable number)\n\n---- Test-2 (acceptorThreadCount=\"2\") --- KO ---\n  $ ab2 -n 20000 -c 1000 http://localhost:999x/\n  $ netstat -atn | grep :999x | grep ESTABLISHED\n\n  This show +100 connections > \"OOPS\", too much far\n\n----\n\nLogs show traces like this when socket closes:\n----- catalina.out begin -----\nMay 22, 2011 9:10:51 PM org.apache.tomcat.util.net.AbstractEndpoint countDownConnection\nWARNING: Incorrect connection count, multiple socket.close called on the same socket.\n----- catalina.out end -------"}, {"count": 1, "attachment_id": null, "creator": "fhanik@apache.org", "text": "I'd strongly recommend to default acceptorThreadCount=1 and possible deprecating the attribute all together.\nAcceptor thread count larger than 1 has really zero impact on performance, while degrading system resources.\nThe operating system holds a shared lock underneath to accept new connections, so having multiple threads calling ServerSocket.accept is doing nothing except queuing up for that lock.", "id": 146554, "time": "2011-05-23T19:09:58Z", "bug_id": 51240, "creation_time": "2011-05-23T19:09:58Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 51240, "attachment_id": null, "id": 146613, "time": "2011-05-25T07:30:50Z", "creator": "markt@apache.org", "creation_time": "2011-05-25T07:30:50Z", "is_private": false, "text": "I agree with Filip's comment re forcing acceptorThreadCount to 1 but I'd still like to get to the bottom of why the maxConnections limit isn't being enforced. I'll try and look at this today."}, {"count": 3, "tags": [], "bug_id": 51240, "attachment_id": null, "id": 146618, "time": "2011-05-25T10:37:48Z", "creator": "timw@apache.org", "creation_time": "2011-05-25T10:37:48Z", "is_private": false, "text": "It looks like there's a race condition between the acceptor thread being permitted to accept a connection and updating the connection counter.\n\nTwo acceptor threads can pass the awaitConnection() condition, accept a connection, and then both call countUp(). The connection count then goes above the signal level and awaitConnection() blocking condition will never be met as long as the connections stays above max (since CounterLatch appears to be designed to count both up and down, it compares the signal level exactly).\n\nThe fix could be to remove countUp()/countDown(), change CounterLatch.await() to an CounterLatch.awaitAndIncrement()/CounterLatch.awaitAndDecrement() pair and have the connection count atomically updated in Sync.tryAcquireShared() using AtomicLong.compareAndSet() with the +1/-1 delta passed in as the argument.\n\ne.g:\n\n        protected int tryAcquireShared(int delta) {\n            while (true) {\n                final long current = count.get();\n                if (!released && (current == signal)) {\n                    return -1;\n                }\n                if (count.compareAndSet(current, current + delta)) {\n                    return 1;\n                }\n            }\n        }"}, {"count": 4, "tags": [], "bug_id": 51240, "attachment_id": null, "text": "I ended up replacing CounterLatch with LimitLatch that has reduced functionality that is aligned more closely with what the connectors need.\n\nI also made maxConnections dynamically configurable.\n\nI'll look into removing / deprecating the acceptorThreadCount attribute next.\n\nThis is fixed in 7.0.x and will be included in 7.0.15.\n\nNote: If testing with ab be aware that the TCP backlog will cause more established connections to be observed than Tomcat is currently handling.", "id": 146662, "time": "2011-05-26T15:25:07Z", "creator": "markt@apache.org", "creation_time": "2011-05-26T15:25:07Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 51240, "text": "On reflection I decided to leave the acceptorThreadCount configuration option. It already defaults to one and since the acceptor thread does more the just call socket.accept() if there is a spike in new connections, it is possible that multiple acceptor threads may offer some limited benefit.", "id": 146721, "time": "2011-05-28T19:25:54Z", "creator": "markt@apache.org", "creation_time": "2011-05-28T19:25:54Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 57997, "attachment_id": null, "is_private": false, "id": 183312, "time": "2015-06-03T19:20:05Z", "creator": "jacob.champion@ni.com", "creation_time": "2015-06-03T19:20:05Z", "text": "The worker MPM does not call apr_setup_signal_thread() until after it runs the child_init hooks for modules. If a module starts a background thread, that thread will occasionally intercept signals that were meant for the main thread. In our case, SIGHUPs sent from the parent process to its workers were intercepted, and we were left with orphaned workers.\n\nThe documentation for apr_setup_signal_thread() says \"Warning: This must be called before any threads are created\", so presumably it's incorrect for any module to start a background thread unless it first calls this function anyway. Calling the function inside the child_init hook solves the problem but is somewhat dirty.\n\nSteps to Reproduce:\n\n    1) Create a module that starts a background thread in child_init using\n       apr_thread_create(), and load it into httpd. The thread should do\n       some sort of long-lived blocking activity, like a select().\n\n    2) Open enough connections to httpd to allow the workers to hit their\n       connection limit and be recycled.\n\nActual Results:\n\n    Orphaned httpd worker processes will start to pile up. Occasionally\n    some will correctly exit (I haven't investigated to see why), but the\n    majority stick around doing nothing until Apache is stopped.\n\n    If you attach with GDB and catch SIGHUP, you can see that the signal\n    is interrupting the module's background thread instead of the main\n    worker thread.\n\nExpected Results:\n\n    The workers should correctly exit. GDB should show the main thread\n    being interrupted by SIGHUP.\n\nBuild Date & Hardware:\n\n    Apache 2.4.10 (built 2015-05-15) on 64-bit Linux (OpenEmbedded kernel\n    3.14.37).\n\nAdditional Builds and Platforms:\n\n    This ordering (child_init followed by apr_setup_signal_thread) is\n    present in trunk, in both mpm_worker and mpm_event."}, {"count": 1, "tags": [], "bug_id": 57997, "text": "We probably need a new hook (mpm_setup_child?), run by each MPM after apr_setup_signal_thread() is called, and where custom threads could be created.", "id": 183711, "attachment_id": null, "creator": "ylavic.dev@gmail.com", "creation_time": "2015-06-23T14:39:59Z", "time": "2015-06-23T14:39:59Z", "is_private": false}]
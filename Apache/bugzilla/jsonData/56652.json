[{"count": 0, "tags": [], "bug_id": 56652, "attachment_id": null, "id": 175937, "time": "2014-06-20T21:55:01Z", "creator": "artfiedler@gmail.com", "creation_time": "2014-06-20T21:55:01Z", "is_private": false, "text": "When defineFuncton in ELProcessor is called it uses class.getName() to compare class names, and the MethodSignature class used to parse the signatures will return whatever value is defined(in the method signature) as the class name when its fully qualified. \n\nSo if the method signature is lets say \"boolean sameSize(java.util.Collection[])\" defineFunction wont find a matching method on the provided class, because class.getName() will return \"[Ljava.util.Collection;\" instead. \n\nTo get around this I made some tweaks to unqualified type's also to check for array, and also to always get the correct class name, I changed it to always get the referenced class then use the getName() function there. \n\nI added most the functionality to the ImportHandler to reuse the cache and because it was contently there\n\nOriginal Code in 8.0.8\n[javax.el.ELProcessor- MethodSignature]\n\nImportHandler importHandler = context.getImportHandler();\nfor (int i = 0; i < parameterTypeNames.length; i++) {\n    parameterTypeNames[i] = parameterTypeNames[i].trim();\n    if (!parameterTypeNames[i].contains(\".\")) {\n        Class<?> clazz = importHandler.resolveClass(\n                parameterTypeNames[i]);\n        if (clazz == null) {\n            throw new NoSuchMethodException(Util.message(\n                    context,\n                    \"elProcessor.defineFunctionInvalidParameterTypeName\",\n                    parameterTypeNames[i], methodName,\n                    className));\n        }\n        parameterTypeNames[i] = clazz.getName();\n    }\n}\n\nReplaced with:\n\nImportHandler importHandler = context.getImportHandler();\nClass<?> clazz;\nfor (int i = 0; i < parameterTypeNames.length; i++) {\n    clazz = importHandler.extendedResolveClass(parameterTypeNames[i].trim());\n    if (clazz == null) {\n        throw new NoSuchMethodException(Util.message(\n                context,\n                \"elProcessor.defineFunctionInvalidParameterTypeName\",\n                parameterTypeNames[i], methodName,\n                className));\n    }\n    parameterTypeNames[i] = clazz.getName();\n}\n\n\n[javax.el.ImportHandler] - Added the following methods\n\n/**\n * This version of Class<?> resolveClass(String name) will allow qualified names, \n * handles arrays, and for qualified names will ignore requiring the type is a public class\n * Note: added to this class to take advantage of the existing cache, and will cache \n * original name for qualified names before parsing\n * @param name Classname with or without namespace\n * @return\n */\npublic java.lang.Class<?> extendedResolveClass(String name) {\n    Class<?> result = clazzes.get(name);\n\n    if (result == null) {\n        int firstBracketIndex = name.indexOf('[');\n        if (name.contains(\".\")) \n        {\n            try {\n                if (firstBracketIndex > -1)\n                    result = Class.forName(convertArrayClassName(name, firstBracketIndex));\n                else\n                    result = Class.forName(name);\n            } catch (ClassNotFoundException e) {\n                return null;\n            }\n            \n            Class<?> conflict = clazzes.get(name);\n\n            if (conflict != null) {\n                throw new ELException(Util.message(null,\n                        \"importHandler.ambiguousImport\", name, conflict.getName()));\n            }\n\n            clazzes.put(name, result);\n        }\n        else {\n            // Search the package imports - note there may be multiple matches\n            // (which correctly triggers an error)\n            for (String p : packages) {\n                String className = p + '.' + name;\n                if (firstBracketIndex > -1) \n                    className = convertArrayClassName(className, firstBracketIndex);\n                result = findClass(className, true);\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Converts a class name in the format of java.util.Collection[] to [Ljava.util.Collection;\n * @param typeName Original class name\n * @param firstBracketIndex position of the first [\n * @return The class name in the format of [LclassName;\n */\nprivate String convertArrayClassName(String typeName, int firstBracketIndex)\n{\n    final int length = typeName.length();\n    StringBuilder sb = new StringBuilder(length + 1); // +1 is to account for ';'\n    sb.append('[');\n    for(int i = firstBracketIndex + 2; i < length; i++) \n    {\n        if (typeName.charAt(i) == '[')\n        {\n            sb.append('[');\n            i++;\n        }\n    }\n    typeName = typeName.substring(0, firstBracketIndex).trim();\n    switch(typeName) \n    {\n        case \"boolean\": \n            sb.append('Z');\n            break;\n        case \"byte\":\n            sb.append('B');\n            break;\n        case \"char\":\n            sb.append('C');\n            break;\n        case \"double\":\n            sb.append('D');\n            break;\n        case \"float\":\n            sb.append('F');\n            break;\n        case \"int\":\n            sb.append('I');\n            break;\n        case \"long\":\n            sb.append('J');  \n            break;\n        case \"short\":\n            sb.append('S');\n            break;\n        default:\n            sb.append('L');\n            sb.append(typeName);\n            sb.append(';');\n            break;\n    }\n    return sb.toString();\n}"}, {"count": 1, "tags": [], "bug_id": 56652, "attachment_id": null, "id": 176200, "time": "2014-07-03T16:04:23Z", "creator": "markt@apache.org", "creation_time": "2014-07-03T16:04:23Z", "is_private": false, "text": "Patches should be attached to issues in diff -u format. Providing the patch in other formats slows down the review process."}, {"count": 2, "tags": [], "text": "The proposed solution can not be used. The EL API may not be changed. I'm working on a solution along similar lines but the work is done in the ELProcessor.", "attachment_id": null, "id": 176211, "creator": "markt@apache.org", "time": "2014-07-04T10:54:23Z", "bug_id": 56652, "creation_time": "2014-07-04T10:54:23Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 56652, "attachment_id": null, "text": "This has been fixed in 8.0.x for 8.0.10 onwards. I also added support for varargs.", "id": 176213, "time": "2014-07-04T18:47:28Z", "creator": "markt@apache.org", "creation_time": "2014-07-04T18:47:28Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "lardcanoe@gmail.com", "is_private": false, "text": "If a client PUTs a file, and its Timeout is shorter than the server's Timeout,\nand the client then PUTs the file again, the first request will fail and the\ncall to close_stream will delete the file even though the second PUT is\ncurrently writing to it. So the second PUT thinks the file is all there even\nthough it isn't.\n\nI'm not sure if this is a bug per se, but it is something that I encountered and\nfixed myself, and I feel it could go into the mod_dav.c code.\n\nAlso, I strongly recommend adding code that explicitly checks to see if the file\nreally does exist at the end of the PUT and also checks the filesize to see if\nit matches the number of bytes written. A simple call to \"stat\" would be sufficient.\n\nWe experience hundreds of thousands of PUTs a night, and a few files generally\njust disappear without any errors in the error_log.", "id": 84290, "time": "2006-01-06T00:25:02Z", "bug_id": 38148, "creation_time": "2006-01-06T00:25:02Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 38148, "attachment_id": null, "is_private": false, "id": 84299, "time": "2006-01-06T10:28:50Z", "creator": "jorton@redhat.com", "creation_time": "2006-01-06T10:28:50Z", "text": "I do agree that the delete-on-failed-PUT behaviour is a bug, at least in the\ncase of modifying an existing file.  Perhaps it is useful for the case where the\nresource did not exist before.\n\nTo completely avoid concurrency problems like this mod_dav_fs would also have to\nlock the file.  That should be relatively simple to do but needs further analysis.\n\nw.r.t. doing a the stat()-after-PUT; that would not eliminate the race; another\nprocess could still modify the file after the stat() and the returned status\ncode would be \"wrong\" again"}, {"attachment_id": null, "tags": [], "bug_id": 38148, "text": "Since the fix for PR 39815 in trunk, a PUT request without range header goes to a temporary file first. This means that a failed PUT will only unlink its temporary file and not the real target file.\n\nI belive this is a sufficient fix for this issue.", "count": 2, "id": 131855, "time": "2009-11-10T14:29:35Z", "creator": "sf@sfritsch.de", "creation_time": "2009-11-10T14:29:35Z", "is_private": false}, {"count": 3, "tags": [], "text": "fixed in 2.4.1", "attachment_id": null, "id": 154181, "creator": "sf@sfritsch.de", "time": "2012-02-26T16:37:40Z", "bug_id": 38148, "creation_time": "2012-02-26T16:37:40Z", "is_private": false}]
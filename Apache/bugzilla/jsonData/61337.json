[{"attachment_id": 35171, "tags": [], "creator": "tallison@mitre.org", "text": "Created attachment 35171\ntriggering file\n\nA fuzzed version of testException2.doc in Tika's test corpus triggers:\n\nCaused by: java.lang.AssertionError\n\tat org.apache.poi.hwpf.usermodel.Range.sanityCheck(Range.java:1158)\n\tat org.apache.poi.hwpf.usermodel.Range.<init>(Range.java:195)\n\tat org.apache.poi.hwpf.usermodel.HeaderStories.getSubrangeAt(HeaderStories.java:357)\n\tat org.apache.poi.hwpf.usermodel.HeaderStories.getOddHeaderSubrange(HeaderStories.java:196)\n\tat org.apache.tika.parser.microsoft.WordExtractor.parse(WordExtractor.java:180)\n\tat org.apache.tika.parser.microsoft.OfficeParser.parse(OfficeParser.java:175)\n\tat org.apache.tika.parser.microsoft.OfficeParser.parse(OfficeParser.java:131)\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n\tat org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n\tat org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:135)\n\nWe should definitely have a range check, but I think it would be better to throw a RecordFormatException or RuntimeException?\n\nMore generally, there is room to make our \"broken record\" exception handling more consistent.  My preference would be to throw RecordFormatException for this kind of thing.\n\nOther ideas?", "count": 0, "id": 200011, "time": "2017-07-25T11:12:54Z", "bug_id": 61337, "creation_time": "2017-07-25T11:12:54Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 61337, "attachment_id": null, "id": 200012, "time": "2017-07-25T11:20:19Z", "creator": "tallison@mitre.org", "creation_time": "2017-07-25T11:20:19Z", "is_private": false, "text": "I see 73 instances of \"assert(\", and, yes, several of these are my fault.\n\nIn most cases, I'd think we could convert these to a RecordFormatException.  If there were a use case for turning assertions off and hoping for the best, I'd want to leave the asserts in.  However, it looks (on quick review) like turning the assertions off will yield corrupt objects/data.  So, I don't see a use case for assert instead of a RecordFormatException.\n\nI'm happy to make the changes, but given that this will be not a small patch, I'd like to get feedback before I fix this globally."}, {"count": 2, "text": "Of course, there are many, many more without the paren: \"assert \"", "bug_id": 61337, "is_private": false, "id": 200013, "time": "2017-07-25T11:32:30Z", "creator": "tallison@mitre.org", "creation_time": "2017-07-25T11:32:30Z", "tags": [], "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61337, "attachment_id": null, "text": "+1 for replacing java-assert\n\nI think we need at least two different cases:\nasserts based on record format (throws RecordFormatException)\nand other asserts (throws ? extends RuntimeException)", "id": 200014, "time": "2017-07-25T11:42:44Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-07-25T11:42:44Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 61337, "attachment_id": null, "text": "I'll probably start on this one class/family at a time unless there are objections.\n\nIt looks like there are basically 4 places where we rely on assert.\n\n1) assert that things are or aren't null, as in DrawTextParagraph:\n\n        String buFontStr = bulletStyle.getBulletFont();\n        if (buFontStr == null) {\n            buFontStr = paragraph.getDefaultFontFamily();\n        }\n        assert(buFontStr != null);\n        FontInfo buFont = new DrawFontInfo(buFontStr);\n\n2) assert instanceof, as in Range:\n\n        assert ( _doc instanceof HWPFDocument );\n\n3) assert x == y to confirm that a record is not wonky, as in HwmfBitmapDib:\n\n        assert(introSize == headerSize);\n\n or in LittleEndianByteArrayInputStream:\n \n        assert skipped == size : \"Buffer overrun\";\n\n4) checks on limitations of implementation as in:\n      assert false : \"hashCode not designed\";\n\n\nThere may be other uses as well...\n\nProposed solutions:\n1) RecordFormatException?  Or something else?\n2) What exception should we use here?\n3) is straightforward, I think: RecordFormatException\n4) is straightforward, I think: implement/auto-generate a hashcode", "id": 200022, "time": "2017-07-25T19:37:05Z", "creator": "tallison@mitre.org", "creation_time": "2017-07-25T19:37:05Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 61337, "attachment_id": null, "id": 200062, "time": "2017-07-26T18:46:27Z", "creator": "tallison@mitre.org", "creation_time": "2017-07-26T18:46:27Z", "is_private": false, "text": "in r1803092, I made some modifications to hwpf.Range.  I left in the asserts in the binary search code.\n\nI added DocumentFormatException as a RuntimeException to handle larger scale problems with parsing the document than RecordFormatException.  I think I'd want to use this for 1) and 2), RecordFormatException for 3), and just implement 4).\n\nI'll wait a bit before making any other changes to give folks a chance to review and offer feedback."}]
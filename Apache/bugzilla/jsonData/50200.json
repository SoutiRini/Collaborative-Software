[{"count": 0, "tags": [], "text": "Created attachment 26250\nprofiler screenshot\n\nIn my experience the performance of DirectoryScanner in 1.8 is at least twice as bad as it was in 1.7. It was surprising, especially considering the 1.8 release notes mentioned improvements in that area.\nI wrote a test that scans a very large directory structure and the profiler indicates the problem is actually in VectorSet.\nVectorSet.add can sometimes take longer to execute then the rest of the scandir method.\nA simple change in VectorSet seems to make all the difference:\n=================================================================\n    private synchronized void doAdd(int index, Object o) {\n        // Calling super.add is safe\n        // because stack overflow is avoided by the following \"if\"\n        if (set.add(o)) {\n        \tif (index==size()) {\n        \t\tsuper.add(o);\n        \t}\n        \telse {\n        \t\tsuper.add(index, o);\n        \t}\n        }\n    }\n=================================================================\nNow it is indeed faster than 1.7. By up to 30%.", "is_private": false, "bug_id": 50200, "id": 141348, "time": "2010-11-02T16:53:04Z", "creator": "sanduatwork@hotmail.com", "creation_time": "2010-11-02T16:53:04Z", "attachment_id": 26250}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "count": 1, "id": 142631, "time": "2010-12-13T04:40:28Z", "bug_id": 50200, "creation_time": "2010-12-13T04:40:28Z", "text": "I'm afraid your patch relies on Vector's implementation details which are not\ndocumented.  Let's assume Vector's add() method was implemented like\n\npublic synchronized boolean add(Object o) {\n    add(size(), o);\n    return true;\n}\n\nthen invoking VectorSet#add(Object) would add the object to the set, invoke\nsuper.add(Object) which in turn invokes VectorSet#add(int,Object) getting back\nto doAdd(int,Object) which will then not add the object at all because\nit already is inside the set.\n\nThe real problem seems to be that we perform arraycopy even if we don't need\nto in the index==size() case so I wonder whether a patch like\n\nIndex: src/main/org/apache/tools/ant/util/VectorSet.java\n===================================================================\n--- src/main/org/apache/tools/ant/util/VectorSet.java   (revision 1040588)\n+++ src/main/org/apache/tools/ant/util/VectorSet.java   (working copy)\n@@ -77,12 +77,14 @@\n         // is not documented so we may better implement it ourselves\n         if (set.add(o)) {\n             ensureCapacity(size() + 1);\n+            if (index != size()) {\n             Object[] elems = new Object[elementData.length];\n             System.arraycopy(elementData, 0, elems, 0, index);\n-            elems[index] = o;\n             System.arraycopy(elementData, index, elems, index + 1,\n                              size() - index);\n             elementData = elems;\n+            }\n+            elementData[index] = o;\n             elementCount++;\n         }\n     }\n\nwouldn't achive the same performance improvement without inoking any base class\nmethods at all.\n\nIs there any chance you could check my suggested patch in your environment?"}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 142642, "time": "2010-12-13T08:19:23Z", "bug_id": 50200, "creation_time": "2010-12-13T08:19:23Z", "text": "or better\n\nIndex: src/main/org/apache/tools/ant/util/VectorSet.java\n===================================================================\n--- src/main/org/apache/tools/ant/util/VectorSet.java   (revision 1045104)\n+++ src/main/org/apache/tools/ant/util/VectorSet.java   (working copy)\n@@ -76,13 +76,13 @@\n         // Vector.add seems to delegate to insertElementAt, but this\n         // is not documented so we may better implement it ourselves\n         if (set.add(o)) {\n-            ensureCapacity(size() + 1);\n-            Object[] elems = new Object[elementData.length];\n-            System.arraycopy(elementData, 0, elems, 0, index);\n-            elems[index] = o;\n-            System.arraycopy(elementData, index, elems, index + 1,\n-                             size() - index);\n-            elementData = elems;\n+            int count = size();\n+            ensureCapacity(count + 1);\n+            if (index != count) {\n+                System.arraycopy(elementData, index, elementData, index + 1,\n+                                 count - index);\n+            }\n+            elementData[index] = o;\n             elementCount++;\n         }\n     }\n\nwhich I'm going to commit to trunk shortly."}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 142643, "time": "2010-12-13T08:45:36Z", "bug_id": 50200, "creation_time": "2010-12-13T08:45:36Z", "text": "svn revision 1045116\n\nwould be good if you could verify the bottleneck has gone, still."}, {"attachment_id": null, "tags": [], "creator": "sanduatwork@hotmail.com", "is_private": false, "count": 4, "id": 142645, "time": "2010-12-13T09:24:01Z", "bug_id": 50200, "creation_time": "2010-12-13T09:24:01Z", "text": "I've written a test which simply calls .add in a loop.\nHere are the results, new implementation vs old:\nat 10,000 iterations: new=16ms old=187ms\nat 100,000 iterations: new=141ms old=181,314ms\n\nSo not only is it noticeable but it grows exponentially.\n\nThank you very much for the fix."}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 142647, "time": "2010-12-13T10:23:14Z", "bug_id": 50200, "creation_time": "2010-12-13T10:23:14Z", "is_private": false, "text": "I've run the tests from\nhttp://svn.apache.org/repos/asf/ant/core/trunk/src/etc/performance/dirscanner.xml\nfor Ant 1.8.1 and current trunk and the difference is quite noticable (21 vs 15\nseconds for setup and 22 vs 4 minutes for \"big-setup\" on my notebook).\n\nAnt 1.7.1 is way worse than 1.8.0 on my machine, btw.\n\nIt should be us who say thank you that you've identified the performance issue."}, {"count": 6, "tags": [], "creator": "sanduatwork@hotmail.com", "attachment_id": null, "id": 142648, "time": "2010-12-13T10:41:58Z", "bug_id": 50200, "creation_time": "2010-12-13T10:41:58Z", "is_private": false, "text": "Glad I could help.\n\nI know this is not the place to ask but would it be possible to make this method protected?\nDirectoryScanner.scandir(File, TokenizedPath, boolean, String[], LinkedList)\n\nI'm working on optimizing our ivy:buildlist and this would be a big help. I'll find a workaround if there is a reason not to do it.\n\nThanks again"}, {"count": 7, "tags": [], "bug_id": 50200, "attachment_id": null, "id": 142649, "time": "2010-12-13T10:58:58Z", "creator": "bodewig@apache.org", "creation_time": "2010-12-13T10:58:58Z", "is_private": false, "text": "Sandu, please join the dev mailing list (which is pretty low volume nowadays\nanyway) so we can discuss your usecase and see whether there is a good\nway that doesn't add to Ant's already big burden of published API that is\nset in stone."}]
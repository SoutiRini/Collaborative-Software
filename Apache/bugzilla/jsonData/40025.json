[{"count": 0, "tags": [], "text": "> Hi,\n> \n> We're experiencing an intermittent problem (roughly 1 in 15 times) whereby \\\n> sometimes our Java application hangs soon after starting. It all started \nafter we \\\n> upgraded the version of Java from 1.3.1.16 to 1.5.0.06 (everything was fine \\\n> before). We are using Log4J version 1.2.6. We have 2 threads that are \nstarted from \\\n> the static initialiser of the initial class. When the problem occurs within \neach \\\n> thread (in every case of failure) they both hang at the point where the \nfollowing \\\n> statement is called: \n> if (m_logger.isEnabledFor(Level.INFO))\n> \n> (where m_logger is defined as \"private static final Logger m_logger = \\\n> Logger.getLogger(Server.class.getName());\") \n> We know it hangs at this point as we have system.out.println()  statements \\\n> immediately before and after this statement. \n> The Java process still exists but the process hangs indefinitely.\n> \n> I have tried upgrading Log4J to version 1.2.13 but the same problem still \noccurs.\n> \n> I have searched every Log4J bug on the buglist and also searched the Log4J \nmailing \\\n> lists as well as google searches and cannot find anything similar. \n> Does anyone have any idea why this might be failing?", "is_private": false, "bug_id": 40025, "id": 91196, "time": "2006-07-12T07:42:48Z", "creator": "Harmesh.Dheer@emxco.com", "creation_time": "2006-07-12T07:42:48Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 40025, "attachment_id": null, "text": "Here is a stack trace of what happens when it has hung (results from JSTACK):\n\nJSTACK FOR HANGING Process:\n \nDebugger attached successfully.\nServer compiler detected.\nJVM version is 1.5.0_06-b05\nThread t@17: (state = BLOCKED)\n - java.lang.Thread.sleep(long) (Interpreted frame)\n - java.lang.Thread.sleep(long) (Interpreted frame)\n - org.apache.log4j.helpers.FileWatchdog.run() @bci=11, line=95 (Interpreted \nframe)\n \n\nThread t@16: (state = BLOCKED)\n - com.mftl.emx.hub.Server$FinalizerThreadBoost.finalize() @bci=29 \n(Interpreted \\\n                frame)\n - java.lang.ref.Finalizer.invokeFinalizeMethod(java.lang.Object) (Interpreted \nframe)\n - java.lang.ref.Finalizer.runFinalizer() @bci=45, line=83 (Interpreted frame)\n - java.lang.ref.Finalizer.access$100(java.lang.ref.Finalizer) @bci=1, line=14 \n\\\n                (Interpreted frame)\n - java.lang.ref.Finalizer$2.run() @bci=18, line=131 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=595 (Interpreted frame)\n \n\nThread t@15: (state = BLOCKED)\n - com.mftl.emx.hub.Server$MemoryMonitor.run() @bci=58 (Interpreted frame)\n \n\nThread t@9: (state = BLOCKED)\n \n\nThread t@8: (state = BLOCKED)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=116 (Interpreted \nframe)\n - java.lang.ref.ReferenceQueue.remove() @bci=2, line=132 (Interpreted frame)\n - java.lang.ref.Finalizer$FinalizerThread.run() @bci=3, line=159 (Interpreted \nframe)\n\nThread t@7: (state = BLOCKED)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.Object.wait() @bci=2, line=474 (Interpreted frame)\n - java.lang.ref.Reference$ReferenceHandler.run() @bci=46, line=116 \n(Interpreted \\\nframe)  \n\nThread t@1: (state = BLOCKED)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.Object.wait(long) (Interpreted frame)\n - java.lang.Thread.join(long) @bci=38, line=1095 (Interpreted frame)\n - java.lang.Thread.join() @bci=2, line=1148 (Interpreted frame)\n - java.lang.ref.Finalizer$1.run() @bci=43, line=115 (Interpreted frame)\n - java.security.AccessController.doPrivileged(java.security.PrivilegedAction) \n\\\n                (Interpreted frame)\n - java.lang.ref.Finalizer.forkSecondaryFinalizer(java.lang.Runnable) @bci=10, \n\\\n                line=121 (Interpreted frame)\n - java.lang.ref.Finalizer.runFinalization() @bci=7, line=126 (Interpreted \nframe)\n - java.lang.Runtime.runFinalization0() (Interpreted frame)\n - java.lang.Runtime.runFinalization() @bci=0, line=686 (Interpreted frame)\n - java.lang.System.runFinalization() @bci=3, line=912 (Interpreted frame)\n - com.mftl.emx.hub.Server.<clinit>() @bci=54 (Interpreted frame)\n \n \n \n \nFULL JSTACK FOR HANGING PROCESS\n----------------- t@1 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfdeb4768 void ObjectMonitor::wait(long long,int,Thread*) + 0x59c\n0xfdeb5978 void ObjectSynchronizer::wait(Handle,long long,Thread*) + 0xe8\n0xfdeb5628 JVM_MonitorWait + 0x31c\n0xf840c280 * java.lang.Object.wait(long) bci:469741230 (Interpreted frame)\n0xf840c224 * java.lang.Object.wait(long) bci:0 (Interpreted frame)\n0xf8405764 * java.lang.Thread.join(long) bci:38 line:1095 (Interpreted frame)\n0xf8405764 * java.lang.Thread.join() bci:2 line:1148 (Interpreted frame)\n0xf8405764 * java.lang.ref.Finalizer$1.run() bci:43 line:115 (Interpreted \nframe)\n0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfde28704 JVM_DoPrivileged + 0x500\n0xfe7c9bec \nJava_java_security_AccessController_doPrivileged__Ljava_security_Privileged \\\nAction_2 + 0x14 <interpreter> method entry point (kind = native)\n0xf840c224 * java.security.AccessController.doPrivileged\n(java.security.PrivilegedActio \\\nn) bci:0 (Interpreted frame) 0xf8405874 * \\\njava.lang.ref.Finalizer.forkSecondaryFinalizer(java.lang.Runnable) bci:10 \nline:121 \\\n(Interpreted frame) 0xf8405764 * java.lang.ref.Finalizer.runFinalization() \nbci:7 \\\nline:126 (Interpreted frame) 0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfdedea14 jni_CallStaticVoidMethod + 0x500\n0xfe7d2d98 Java_java_lang_Runtime_runFinalization0 + 0x84\n<interpreter> method entry point (kind = native)\n0xf840c224 * java.lang.Runtime.runFinalization0() bci:0 (Interpreted frame)\n0xf8405764 * java.lang.Runtime.runFinalization() bci:0 line:686 (Interpreted \nframe)\n0xf8405764 * java.lang.System.runFinalization() bci:3 line:912 (Interpreted \nframe)\n0xf8405764 * com.mftl.emx.hub.Server.<clinit>() bci:94 (Interpreted frame)\n0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfddf0ab4 void \\\ninstanceKlass::call_class_initializer_impl(instanceKlassHandle,Thread*) + \n0x100 \\\n0xfdd79eec void instanceKlass::initialize_impl(instanceKlassHandle,Thread*) + \n0x5ac \\\n0xfdd676e8 void instanceKlass::initialize(Thread*) + 0x80 0xfdebf12c \\\n_jclass*find_class_from_class_loader(JNIEnv_*,symbolHandle,unsigned \\\nchar,Handle,Handle,unsigned char,Thread*) + 0xd8 0xfdec0744 jni_FindClass + \n0x6b8\n0x00011edc main + 0xe3c\n0x00011088 _start + 0x108\n----------------- t@2 -----------------\n0xff29f4ac _signotifywait + 0x4\n0xff361c90 thr_yield + 0x8c\n----------------- t@3 -----------------\n0xff35d9e0 _reap_wait + 0x38\n0xff35d738 _reaper + 0x38\n0xff36b11c _thread_start + 0x40\n----------------- t@4 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc309c int Monitor::wait(int,long) + 0x16c\n0xfdd9932c GCTask*GCTaskManager::get_task(unsigned) + 0x1e4\n0xfdf5234c void GCTaskThread::run() + 0x180\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@5 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc309c int Monitor::wait(int,long) + 0x16c\n0xfdd9932c GCTask*GCTaskManager::get_task(unsigned) + 0x1e4\n0xfdf5234c void GCTaskThread::run() + 0x180\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@6 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xff297168 _lwp_cond_timedwait + 0x98\n0xfddc3258 int Monitor::wait(int,long) + 0x328\n0xfdf6b4fc void VMThread::run() + 0x1b4\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@7 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfdeb4768 void ObjectMonitor::wait(long long,int,Thread*) + 0x59c\n0xfdeb5978 void ObjectSynchronizer::wait(Handle,long long,Thread*) + 0xe8\n0xfdeb5628 JVM_MonitorWait + 0x31c\n0xf840c280 * java.lang.Object.wait(long) bci:469740825 (Interpreted frame)\n0xf840c224 * java.lang.Object.wait(long) bci:0 (Interpreted frame)\n0xf8405764 * java.lang.Object.wait() bci:2 line:474 (Interpreted frame)\n0xf8405764 * java.lang.ref.Reference$ReferenceHandler.run() bci:46 line:116 \\\n(Interpreted frame) 0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfdec319c void \\\nJavaCalls::call_virtual\n(JavaValue*,Handle,KlassHandle,symbolHandle,symbolHandle,Thread \\\n*) + 0x188 0xfdee2700 void thread_entry(JavaThread*,Thread*) + 0x134\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@8 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfdeb4768 void ObjectMonitor::wait(long long,int,Thread*) + 0x59c\n0xfdeb5978 void ObjectSynchronizer::wait(Handle,long long,Thread*) + 0xe8\n0xfdeb5628 JVM_MonitorWait + 0x31c\n0xf840c280 * java.lang.Object.wait(long) bci:469741080 (Interpreted frame)\n0xf840c224 * java.lang.Object.wait(long) bci:0 (Interpreted frame)\n0xf8405764 * java.lang.ref.ReferenceQueue.remove(long) bci:44 line:116 \n(Interpreted \\\nframe) 0xf8405874 * java.lang.ref.ReferenceQueue.remove() bci:2 line:132 \n(Interpreted \\\nframe) 0xf8405874 * java.lang.ref.Finalizer$FinalizerThread.run() bci:3 \nline:159 \\\n(Interpreted frame) 0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfdec319c void \\\nJavaCalls::call_virtual\n(JavaValue*,Handle,KlassHandle,symbolHandle,symbolHandle,Thread \\\n*) + 0x188 0xfdee2700 void thread_entry(JavaThread*,Thread*) + 0x134\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@9 -----------------\n0xff29fb5c _lwp_sema_wait + 0x8\n0xff3590f0 _swtch + 0x158\n0xff35c888 sema_wait + 0xbc\n0xfdf61dc0 int check_pending_signals(int) + 0x254\n0xfdf58ec8 void signal_thread_entry(JavaThread*,Thread*) + 0x34\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@10 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc33ec int Monitor::wait(int,long) + 0x4bc\n0xfdf35d00 void CompileBroker::compiler_thread_loop() + 0x22c\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@11 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc33ec int Monitor::wait(int,long) + 0x4bc\n0xfdf35d00 void CompileBroker::compiler_thread_loop() + 0x22c\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@12 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc33ec int Monitor::wait(int,long) + 0x4bc\n0xfdf35d00 void CompileBroker::compiler_thread_loop() + 0x22c\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@13 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfddc309c int Monitor::wait(int,long) + 0x16c\n0xfdf64b44 void LowMemoryDetector::low_memory_detector_thread_entry\n(JavaThread*,Thread \\\n*) + 0x2ec 0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@14 -----------------\n0xff29dce8 _poll + 0x4\n0xfdd90cd0 int os::sleep(Thread*,long long,int) + 0x25c\n0xfdfa5194 void WatcherThread::run() + 0xe8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@15 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfdeb4768 void ObjectMonitor::wait(long long,int,Thread*) + 0x59c\n0xfdeb5978 void ObjectSynchronizer::wait(Handle,long long,Thread*) + 0xe8\n0xfdd79adc void instanceKlass::initialize_impl(instanceKlassHandle,Thread*) + \n0x19c\n0xfdd676e8 void instanceKlass::initialize(Thread*) + 0x80\n0xfdd96dc0 void LinkResolver::resolve_static_call\n(CallInfo&,KlassHandle&,symbolHandle, \\\nsymbolHandle,KlassHandle,int,int,Thread*) + 0x194 0xfdd6b904 void \\\nLinkResolver::resolve_invoke\n(CallInfo&,Handle,constantPoolHandle,int,Bytecodes::Code,T \\\nhread*) + 0xc8 0xfdd703a0 void \\\nInterpreterRuntime::resolve_invoke(JavaThread*,Bytecodes::Code) + 0x3e8 \n0xf8416108 * \\\ncom.mftl.emx.hub.Server$MemoryMonitor.run() bci:58 (Interpreted frame) \n0xf8400218 \\\n<StubRoutines> 0xfdd9a808 void \\\nJavaCalls::call_helper(JavaValue*,methodHandle*,JavaCallArguments*,Thread*) + \n0x5a0 \\\n0xfdec319c void JavaCalls::call_virtual\n(JavaValue*,Handle,KlassHandle,symbolHandle,sym \\\nbolHandle,Thread*) + 0x188 0xfdee2700 void thread_entry(JavaThread*,Thread*) + \n0x134\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@16 -----------------\n0xff29fb10 ___lwp_cond_wait + 0x4\n0xfdeb4768 void ObjectMonitor::wait(long long,int,Thread*) + 0x59c\n0xfdeb5978 void ObjectSynchronizer::wait(Handle,long long,Thread*) + 0xe8\n0xfdd79adc void instanceKlass::initialize_impl(instanceKlassHandle,Thread*) + \n0x19c\n0xfdd676e8 void instanceKlass::initialize(Thread*) + 0x80\n0xfdd96dc0 void LinkResolver::resolve_static_call\n(CallInfo&,KlassHandle&,symbolHandle, \\\nsymbolHandle,KlassHandle,int,int,Thread*) + 0x194 0xfdd6b904 void \\\nLinkResolver::resolve_invoke\n(CallInfo&,Handle,constantPoolHandle,int,Bytecodes::Code,T \\\nhread*) + 0xc8 0xfdd703a0 void \\\nInterpreterRuntime::resolve_invoke(JavaThread*,Bytecodes::Code) + 0x3e8 \n0xf8416108 * \\\ncom.mftl.emx.hub.Server$FinalizerThreadBoost.finalize() bci:29 (Interpreted \nframe) \\\n0xf8400218 <StubRoutines> 0xfdd9a808 void \\\nJavaCalls::call_helper(JavaValue*,methodHandle*,JavaCallArguments*,Thread*) + \n0x5a0 \\\n0xfddf84f4 void jni_invoke_nonstatic\n(JNIEnv_*,JavaValue*,_jobject*,JNICallType,_jmetho \\\ndID*,JNI_ArgumentPusher*,Thread*) + 0x4e0 0xfdf108e8 jni_CallVoidMethod + 0x1f0\n0xfe7cfb84 Java_java_lang_ref_Finalizer_invokeFinalizeMethod + 0x78\n<interpreter> method entry point (kind = native)\n0xf840c224 * java.lang.ref.Finalizer.invokeFinalizeMethod(java.lang.Object) \nbci:0 \\\n(Interpreted frame) 0xf8405764 * java.lang.ref.Finalizer.runFinalizer() bci:45 \n\\\nline:83 (Interpreted frame) 0xf8405764 * \\\njava.lang.ref.Finalizer.access$100(java.lang.ref.Finalizer) bci:1 line:14 \\\n(Interpreted frame) 0xf8405764 * java.lang.ref.Finalizer$2.run() bci:18 \nline:131 \\\n(Interpreted frame) 0xf8405c2c * java.lang.Thread.run() bci:11 line:595 \n(Interpreted \\\nframe) 0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfdec319c void \\\nJavaCalls::call_virtual\n(JavaValue*,Handle,KlassHandle,symbolHandle,symbolHandle,Thread \\\n*) + 0x188 0xfdee2700 void thread_entry(JavaThread*,Thread*) + 0x134\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n----------------- t@17 -----------------\n0xff29dce8 _poll + 0x4\n0xfdd90cd0 int os::sleep(Thread*,long long,int) + 0x25c\n0xfdf0ca4c JVM_Sleep + 0x260\n0xf840c280 * java.lang.Thread.sleep(long) bci:833143 (Interpreted frame)\n0xf840c224 * java.lang.Thread.sleep(long) bci:0 (Interpreted frame)\n0xf8405764 * org.apache.log4j.helpers.FileWatchdog.run() bci:11 line:95 \n(Interpreted \\\nframe) 0xf8400218 <StubRoutines>\n0xfdd9a808 void JavaCalls::call_helper\n(JavaValue*,methodHandle*,JavaCallArguments*,Thr \\\nead*) + 0x5a0 0xfdec319c void \\\nJavaCalls::call_virtual\n(JavaValue*,Handle,KlassHandle,symbolHandle,symbolHandle,Thread \\\n*) + 0x188 0xfdee2700 void thread_entry(JavaThread*,Thread*) + 0x134\n0xfdede29c void JavaThread::run() + 0x1d8\n0xfe264240 void*_start(void*) + 0x208\n0xff36b11c _thread_start + 0x40\n\n", "id": 91198, "time": "2006-07-12T07:46:23Z", "creator": "Harmesh.Dheer@emxco.com", "creation_time": "2006-07-12T07:46:23Z", "is_private": false}, {"count": 2, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 91220, "time": "2006-07-12T16:52:51Z", "bug_id": 40025, "creation_time": "2006-07-12T16:52:51Z", "is_private": false, "text": "I don't see an obvious connection between the problem description and the stack traces.  The only log4j \nrelated thing in the stack traces is a sleeping FileWatchdog waiting for changes to the configuration file do \nto a earlier call to configureAndWatch.  Everything else seems to be related to object finalization.\n\nCould you modify your configuration code to call configure() instead and see if the problem still occurs.  If \nit still does, could you see if it occurs when log4j is effectively disabled by a statement like:\n\nLogManager.getLoggerRepository().setThreshold(Level.OFF);"}, {"count": 3, "tags": [], "creator": "boris.nebosenko@ardas.dp.ua", "attachment_id": null, "id": 100670, "time": "2007-03-20T06:44:05Z", "bug_id": 40025, "creation_time": "2007-03-20T06:44:05Z", "is_private": false, "text": "I have the same problem. When I configure log4j to output into console and run\njar file without joined console it hangs because of waiting. \n\nStack traces of all running threads.\n\n\nFinalizer [WAITING]\njava.lang.Object.wait(native method)\njava.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)\njava.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)\njava.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)\n\n\nMessageDispatcher [RUNNABLE]\njava.net.SocketInputStream.socketRead0(native method)\njava.net.SocketInputStream.read(SocketInputStream.java:129)\njava.io.BufferedInputStream.fill(BufferedInputStream.java:218)\njava.io.BufferedInputStream.read1(BufferedInputStream.java:256)\njava.io.BufferedInputStream.read(BufferedInputStream.java:313)\ncom.sun.star.lib.connections.socket.SocketConnection.read(SocketConnection.java:163)\ncom.sun.star.lib.uno.bridges.java_remote.XConnectionInputStream_Adapter.read(XConnectionInputStream_Adapter.java:64)\njava.io.DataInputStream.readInt(DataInputStream.java:353)\ncom.sun.star.lib.uno.protocols.urp.urp.readBlock(urp.java:491)\ncom.sun.star.lib.uno.protocols.urp.urp.readMessage(urp.java:590)\ncom.sun.star.lib.uno.bridges.java_remote.java_remote_bridge$MessageDispatcher.invoke(java_remote_bridge.java:157)\ncom.sun.star.lib.uno.bridges.java_remote.java_remote_bridge$MessageDispatcher.run(java_remote_bridge.java:144)\n\n\nReference Handler [WAITING]\njava.lang.Object.wait(native method)\njava.lang.Object.wait(Object.java:474)\njava.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)\n\n\nSignal Dispatcher [RUNNABLE]\nStack trace is not available\n\n\nThread-1 [WAITING]\njava.lang.Object.wait(native method)\njava.lang.Object.wait(Object.java:474)\ncom.sun.star.lib.util.AsynchronousFinalizer$1.run(AsynchronousFinalizer.java:94)\n\n\nYJPAgent-RequestListener [RUNNABLE]\nStack trace is not available\n\n\nYJPAgent-Telemetry [TIMED WAITING]\nStack trace is not available\n\n\nmain [RUNNABLE]\njava.io.FileOutputStream.writeBytes(native method)\njava.io.FileOutputStream.write(FileOutputStream.java:260)\njava.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\njava.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\njava.io.PrintStream.write(PrintStream.java:414)\nsun.nio.cs.StreamEncoder$CharsetSE.writeBytes(StreamEncoder.java:336)\nsun.nio.cs.StreamEncoder$CharsetSE.implFlushBuffer(StreamEncoder.java:404)\nsun.nio.cs.StreamEncoder$CharsetSE.implFlush(StreamEncoder.java:408)\nsun.nio.cs.StreamEncoder.flush(StreamEncoder.java:152)\njava.io.OutputStreamWriter.flush(OutputStreamWriter.java:213)\norg.apache.log4j.helpers.QuietWriter.flush(QuietWriter.java:57)\norg.apache.log4j.WriterAppender.subAppend(WriterAppender.java:315)\norg.apache.log4j.WriterAppender.append(WriterAppender.java:159)\norg.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65)\norg.apache.log4j.Category.callAppenders(Category.java:203)\norg.apache.log4j.Category.forcedLog(Category.java:388)\norg.apache.log4j.Category.log(Category.java:853)\norg.apache.commons.logging.impl.Log4JLogger.info(Log4JLogger.java:193)\ncom.artofsolving.jodconverter.openoffice.connection.AbstractOpenOfficeConnection.connect(AbstractOpenOfficeConnection.java:73)\ncom.artofsolving.jodconverter.openoffice.connection.AbstractOpenOfficeConnection.getService(AbstractOpenOfficeConnection.java:111)\ncom.artofsolving.jodconverter.openoffice.connection.AbstractOpenOfficeConnection.getFileContentProvider(AbstractOpenOfficeConnection.java:126)\ncom.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter.convertInternal(OpenOfficeDocumentConverter.java:102)\ncom.artofsolving.jodconverter.openoffice.converter.AbstractOpenOfficeDocumentConverter.convert(AbstractOpenOfficeDocumentConverter.java:90)\ncom.artofsolving.jodconverter.openoffice.converter.AbstractOpenOfficeDocumentConverter.convert(AbstractOpenOfficeDocumentConverter.java:60)\ncom.t2ut.converter.PresentationsConverter.convert(PresentationsConverter.java:108)\ncom.t2ut.converter.PresentationsConverter.main(PresentationsConverter.java:175)\n\n"}, {"count": 4, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "id": 100708, "time": "2007-03-20T20:33:35Z", "bug_id": 40025, "creation_time": "2007-03-20T20:33:35Z", "is_private": false, "text": "The 2007-03-20 comment seems unrelated to the original bug report.\n\nIf it is to be persued, please file a separate bug report and:\n\n- specify platform, JDK and log4j version\n- Check that it occurs on a simpler test application.  If it is just a stall on a write to System.out, then it \nshould occur in a straight single thread application.\n- suggest how to detect that the an attempt to flush to System.out or System.err will hang.  I don't see any \nway to recover once flush() is called, so the condition must be anticipated.\n- links to any relevant discussion on the System.out or System.err hanging.  The JDK docs seem to imply \nthat System.out and System.err will always be ready to "}]
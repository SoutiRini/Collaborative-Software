[{"count": 0, "tags": [], "text": "For every exception, Log4J examines the class (using reflection) to print out\nthe stack trace.\n\nFor 1.4, this is not necessary, as printStackTrace does the right thing already.  \n\nFor earlier JVMs, it may be better to rely on the client to enhance their\nThrowable.printStackTrace implementation to do the right thing.  There is a good\nexample on how to do this for JVM 1.3:\n\nhttp://www.javaworld.com/javaworld/jw-09-2001/jw-0914-exceptions.html\n\nSince I modify printStackTrace for my exception classes, log4j 1.3 could log my\n\"cause\"s twice.  This would break backwards compatibility for some people.\n\nIn addition, relying on the method name (which may or may not return a\nThrowable) may cause problems.  For example, if getRootCause() returned a String\n(or some other type).  What if the method call had unforseen side effects?\n\nMainly, it's a performance hit.  At least I would recommend skipping the linear\nsearch on the method names for JVM 1.4+.\n\n(Since java.lang.Throwable must be serializable, I also wonder why it is\nserialized in this fashion at all.  Wouldn't it make sense to defer\nserialization to output?)", "is_private": false, "id": 74977, "creator": "eross@m-qube.com", "time": "2005-05-17T23:30:20Z", "bug_id": 34945, "creation_time": "2005-05-17T23:30:20Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "carnold@apache.org", "is_private": false, "id": 95845, "time": "2006-11-14T14:38:53Z", "bug_id": 34945, "creation_time": "2006-11-14T14:38:53Z", "tags": [], "text": "No patch is attached, so it is hard to review this bug report.  If the changes that your suggesting would \nchange behavior of existing applications running under earlier JVM's and would require client's to modify \ntheir code, then it can't go into log4j 1.2 or 1.3.  Marking bug as NEEDINFO, pending a patch file or more \ninformation."}, {"count": 2, "tags": [], "bug_id": 34945, "text": "\nThe patch I came up for this should work and fulfill our needs.\n\nlog4j/src/java/org/apache/log4j/spi/ThrowableInformation.java\t(working copy)\n@@ -66,20 +66,25 @@\n   public void extractStringRep(Throwable t, VectorWriter vw) {\n     t.printStackTrace(vw);\n \n+    // The Throwable.getCause was added in JDK 1.4. The printStackTrace\n+    // method was modified in JDK 1.4 to handle the nested throwable returned\n+    // by Throwable.getCause.    \n+\n+    if (PlatformInfo.isJDK14OrLater())\n+      return;\n+\n     // Check if the Throwable t has a nested Throwable. If so, invoke\n     // extractStringRep recursively.\n-    // Note that the Throwable.getCause was added in JDK 1.4. The printStackTrace\n-    // method was modified in JDK 1.4 to handle the nested throwable returned\n-    // by Throwable.getCause.\n     try {\n       Class tC = t.getClass();\n       Method[] mA = tC.getMethods();\n       Method nextThrowableMethod = null;\n       for (int i = 0; i < mA.length; i++) {\n-        if ((\"getCause\".equals(mA[i].getName()) && !PlatformInfo.isJDK14OrLater())\n-            || \"getRootCause\".equals(mA[i].getName())\n-            || \"getNextException\".equals(mA[i].getName())\n-            || \"getException\".equals(mA[i].getName())) {\n+        String name = mA[i].getName();\n+        if ((\"getCause\".equals(name))\n+            || \"getRootCause\".equals(name)\n+            || \"getNextException\".equals(name)\n+            || \"getException\".equals(name)) {\n           // check param types\n           Class[] params = mA[i].getParameterTypes();\n           if ((params == null) || (params.length == 0)) {\n\n...\n\nI'm thinking that for JDK 1.3 and earlier, we simply remove the \"feature\" as\nreally it relies on unknown and unspecified behavior of some Throwable's\nprintStackTrace().", "id": 98591, "time": "2007-01-26T18:02:36Z", "creator": "genman@noderunner.net", "creation_time": "2007-01-26T18:02:36Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 34945, "text": "I think it is fine to have a better stack trace print mechanism, but removing it for pre 1.4 JVM's must go in a later release than 1.2 (as it changes functionality).\n\nCould you pleasee provide a test case demonstrating where log4j does not work correctly with your exceptions?\n\n", "id": 119293, "time": "2008-08-02T15:09:25Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-08-02T15:09:25Z", "is_private": false, "attachment_id": null}, {"attachment_id": 27433, "tags": [], "bug_id": 34945, "text": "Created attachment 27433\nSimpleERRdcProject", "count": 4, "id": 148813, "time": "2011-08-25T06:45:12Z", "creator": "gawandeprasad@gmail.com", "creation_time": "2011-08-25T06:45:12Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34945, "text": "Prasad could you file this as new bug. The original bug report was against the long abandoned log4j 1.3 branch and the current log4j 1.2.x code is quite a bit different and I'm not sure how you could be sure that you are reporting on the same bug as the original poster.\n\nI took a quick look inside the zip and there is a lot of code, but no apparent explanation of what you observed and how it differed from what you expected. It would be good to know those things, that you are observing the problem log4j 1.2.16 and any platform information (app server, OS, java version) that would allow us to reproduce the problem.\n\nMarking the original bug as WONTFIX since it relates to the abandoned log4j 1.3 branch.", "id": 148836, "time": "2011-08-26T05:02:02Z", "creator": "carnold@apache.org", "creation_time": "2011-08-26T05:02:02Z", "is_private": false, "attachment_id": null}]
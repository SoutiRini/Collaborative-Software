[{"count": 0, "tags": [], "bug_id": 61979, "attachment_id": null, "text": "it appears some listener thread failures do no wake workers, for example ptrans allocation failures.  \n\nsignal_threads(ST_GRACEFUL) expects close_listeners to wake everyone up, but sometimes this is not called within listener_thread() and instead NULL is returned.", "id": 203165, "time": "2018-01-09T16:59:17Z", "creator": "covener@gmail.com", "creation_time": "2018-01-09T16:59:17Z", "is_private": false}, {"count": 1, "tags": [], "text": "maybe just s/return NULL/break for the ptrans failure", "attachment_id": null, "bug_id": 61979, "id": 203166, "time": "2018-01-09T17:08:46Z", "creator": "covener@gmail.com", "creation_time": "2018-01-09T17:08:46Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 61979, "text": "(In reply to Eric Covener from comment #1)\n> maybe just s/return NULL/break for the ptrans failure\n\nTrickier, we're iterating over the pollset results and doing a graceful shutdown. Currently \"return NULL\" ignores the other sockets with activity, but break would continue tryign the other sockets w/ likely OOM scenario.\n\nbreak/goto to the outer for(;;) listener loop would at least wake up the\nworkers, but would still ignore any addl socket activity (later in the result loop or subsequent during the graceful shutdown)", "id": 203167, "time": "2018-01-09T17:15:57Z", "creator": "covener@gmail.com", "creation_time": "2018-01-09T17:15:57Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61979, "attachment_id": 35665, "text": "Created attachment 35665\nListener resource shortage\n\nMaybe something like this could work.\n\nThe patch moves the disabling (poll) of the listen sockets from close_listeners to wakeup_listener, where listener_may_exit is set already along with anything to start the listener graceful stop, but mainly a callee of signal_threads.\nThus after signal_threads is called, the listener can continue its loop(s) without creating new connections or pools (i.e. maintenance job only, though the workers may still encounter OOM...).\n\nIn case of allocation failure, the resource_shortage flag is also set to avoid creating a new child too quickly, that'll possibly help recovery.\n\nFinally the patch also changes the init_pollset failure to be ungraceful, there is nothing to wait for at this point IMO, with resource_shortage=1 still.\n\nNote: I had to make ap_child_slot global to avoid forwarding the local process_slot var/arg too much...\n\nWouldn't this \"work\"?", "id": 203176, "time": "2018-01-09T22:09:00Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-09T22:09:00Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 35671\nListener resource shortage (v2)\n\nSame with a better handling of {en,dis}able_listensocks() concurrency (atomics), since disable_listensocks() can now be called by both the listener and workers via signal_threads().", "attachment_id": 35671, "id": 203202, "creator": "ylavic.dev@gmail.com", "time": "2018-01-10T15:30:55Z", "bug_id": 61979, "creation_time": "2018-01-10T15:30:55Z", "is_private": false}, {"count": 5, "tags": [], "text": "(In reply to Yann Ylavic from comment #4)\n> Created attachment 35671 [details]\n> Listener resource shortage (v2)\n> \n> Same with a better handling of {en,dis}able_listensocks() concurrency\n> (atomics), since disable_listensocks() can now be called by both the\n> listener and workers via signal_threads().\n\nThanks Yann -- I was only able to test the guts w/ simulate ptrans error,\nbut it looked good.", "is_private": false, "id": 203347, "creator": "covener@gmail.com", "time": "2018-01-18T19:23:28Z", "bug_id": 61979, "creation_time": "2018-01-18T19:23:28Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 61979, "attachment_id": null, "text": "Committed in r1821558, and proposed for backport (incremental).", "id": 203349, "time": "2018-01-19T01:12:25Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2018-01-19T01:12:25Z", "is_private": false}]
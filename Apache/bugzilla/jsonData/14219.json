[{"count": 0, "tags": [], "bug_id": 14219, "text": "I have defined 115 virtual hosts in the config file.\nEach virtual host need 2 open directives (one for access log file, one for \nerror log file).\nWhen httpd open the certificate file, the open system call return 265.\nWhen httpd open the key file, the open system call return 265.\nthen httpd stop and return the following message in error log file.\n\n[Mon Nov 04 11:17:24 2002] [error] Init: Unable to read server certificate from \nfile /usr/local/www/conf/ssl.crt/www.gfa.crt\n[Mon Nov 04 11:17:24 2002] [error] SSL Library Error: 33558552 \nerror:02001018:system library:fopen:Too many open files\n[Mon Nov 04 11:17:24 2002] [error] SSL Library Error: 537317378 \nerror:2006D002:BIO routines:BIO_new_file:system lib\n\nIf I remove this SSL virtual host, httpd start without problem (more than 256 \nopen files, exactly 262).\n\nIf I let this SSL virtual host, but i remove 5 virtual hosts, the httpd server \nstart without problem (open syscall of certificate and key file retrun 255)", "id": 25603, "time": "2002-11-04T10:33:25Z", "creator": "jlrenard@generali.fr", "creation_time": "2002-11-04T10:33:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Do you have ulimits set to allow more than 256 open files?\n\nThe 256 limit may come from how Solaris stdio is built.\n\nOne obvious question is whether or not mod_ssl is properly\nclosing files associated with certificates previously read.\n", "is_private": false, "id": 25669, "creator": "trawick@apache.org", "time": "2002-11-05T11:31:09Z", "bug_id": 14219, "creation_time": "2002-11-05T11:31:09Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 14219, "text": "We have found the reason why the problem occurs.\nWhen Apache start it open and let open each log file.\nIn our example, for each Virtual host, it exists one log file for errors and one\nfor access.\nSo apache open 230 files.\nApache open too 31 files more (libraries and others...).\nSo, 264 descriptors are used when mod_ssl open the first certificate file.\nAnd the problem occur when mod_ssl open the certificate file via the OpenSSL\nBIO_new_file() function (in  bss_file.c source file of OpenSSH).\nThis function open the certificate file with fopen.\nBut the fopen fail.\nThe reason why the fopen fail is Solaris (2.8 and less) can't open a file using\nfopen when the descriptor is greater than 255, this is due to the use of an\nunsigned char instead of an int (as in linux, HPUX or short as in FreeBSD, AIX)\nfor field _file in struct FILE (typedef for __FILE_TAG defined in stdio_tag.h).\nSee below the structure __FILE_TAG prototype.\n\nstruct __FILE_TAG       /* needs to be binary-compatible with old versions */\n{\n#ifdef _STDIO_REVERSE\n        unsigned char   *_ptr;  /* next character from/to here in buffer */\n        ssize_t         _cnt;   /* number of available characters in buffer */\n#else\n        ssize_t         _cnt;   /* number of available characters in buffer */\n        unsigned char   *_ptr;  /* next character from/to here in buffer */\n#endif\n        unsigned char   *_base; /* the buffer */\n        unsigned char   _flag;  /* the state of the stream */\n        unsigned char   _file;  /* UNIX System file descriptor */\n        unsigned        __orientation:2; /* the orientation of the stream */\n        unsigned        __ionolock:1;   /* turn off implicit locking */\n        unsigned        __filler:5;\n};", "id": 25689, "time": "2002-11-05T15:03:43Z", "creator": "jlrenard@generali.fr", "creation_time": "2002-11-05T15:03:43Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 14219, "text": "Can you please confirm if you're still having the problem, and you suspect the \nproblem is in Apache. (Based on your message, it looks like the problem is \nbecause of the OS)\n-Madhu", "id": 33007, "time": "2003-03-12T06:46:58Z", "creator": "madhusudan_mathihalli@hp.com", "creation_time": "2003-03-12T06:46:58Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jlrenard@generali.fr", "text": "The problem is in the OS.\nThe only way is to make apache in 64bits.\nYou may close this case", "id": 33106, "time": "2003-03-13T08:37:55Z", "bug_id": 14219, "creation_time": "2003-03-13T08:37:55Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 14219, "is_private": false, "text": "Per Jean's response, closing the bug.\n\nThanks\n-Madhu", "id": 33237, "time": "2003-03-15T15:09:29Z", "creator": "madhusudan_mathihalli@hp.com", "creation_time": "2003-03-15T15:09:29Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 14219, "text": "I am reopening this bug because this limitation in Solaris OS is not bug but\nrather feature (coming from history of Unix). This is well know and well\ndocumented limitation. See USAGE paragraph in man page for fopen(3C).\n\nBeside this there is also other solution than using 64bits Apache. Look what\nApache (at least version 2.0.x) does in our configuration:\n\n- it creates socket for each defined virtual host. This is done by system call\nsocket(3SOCKET), which is issued from Apache's shared library libapr-0.so.0.9.5\n(function apr_socket_create_ex()). Each socket is defined as file descriptor and\nthey are assigned from lower to bigger.\n\n- after all sockets are created (and few other configuration files are read),\nsome SSL handling is done. For each virtual server is called function\nBIO_new_file() from OpenSSL shared library (/usr/sfw/lib/libcrypto.so.0.9.7).\nThis function uses fopen() and fails when there is no lower free file descriptor\nunder 255. Note, that when there is more then about 240 virtual servers (this\ndepends on number of opened files) it will fail. Also note that SSL needs to\nopen files via fopen only temporary. It means that the files are closed\nimmediately after they are read.\n\nThe following patch for Apache 2.0.55 duplicates each file descriptor for newly\ncreated socket above 255. \n\n--- httpd-2.0.55/srclib/apr/network_io/unix/sockets.c.orig      Thu Jan 19\n17:56:03 2006\n+++ httpd-2.0.55/srclib/apr/network_io/unix/sockets.c   Thu Jan 19 17:57:30 2006\n@@ -90,6 +90,17 @@\n\n     (*new)->socketdes = socket(family, type, protocol);\n\n+#ifdef SOLARIS2\n+    /* This rather hack saves on Solaris OS file descriptors under 255, which\n+       we can really need in case of using a lot of virtual servers with SSL.\n+       Solaris fopen() is limited to use only first 255 file descriptors. */\n+    {\n+        int high_socketdes = fcntl((*new)->socketdes, F_DUPFD, 255);\n+        close((*new)->socketdes);\n+        (*new)->socketdes = high_socketdes;\n+    }\n+#endif\n+\n #if APR_HAVE_IPV6\n     if ((*new)->socketdes < 0 && ofamily == APR_UNSPEC) {\n         family = APR_INET;\n", "id": 84778, "time": "2006-01-19T18:07:55Z", "creator": "petr.sumbera@oracle.com", "creation_time": "2006-01-19T18:07:55Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "jorton@redhat.com", "text": "It's not viable to work around C library \"features\" at application level like\nthat.  This is not a mod_ssl bug and not an APR bug, it's a Solaris bug.", "id": 84779, "attachment_id": null, "bug_id": 14219, "creation_time": "2006-01-19T18:19:16Z", "time": "2006-01-19T18:19:16Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 14219, "text": "(In reply to comment #7)\n> It's not viable to work around C library \"features\" at application level like\n> that.  This is not a mod_ssl bug and not an APR bug, it's a Solaris bug.\n\nOk but can someone describe a workaround then ?\nIs there a way to be sure the mod_ssl will open its necessary files first ?", "id": 94719, "time": "2006-10-11T04:04:46Z", "creator": "vincent.paoletti@emcdda.europa.eu", "creation_time": "2006-10-11T04:04:46Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 14219, "is_private": false, "text": "I know this is quite an old issue - but I ran into this last week, so here is a workaround that works for S10 U4 or newer:\n\nDefine following in your start script for apache:\n\n==\nLD_PRELOAD_32=/usr/lib/extendedFILE.so.1\nexport LD_PRELOAD_32 \n==\n\nhttp://download.oracle.com/docs/cd/E19253-01/816-5175/6mbba7evs/index.html\nhttp://technopark02.blogspot.com/2006/08/solaris-workaround-to-stdios-255-open.html", "id": 143678, "time": "2011-01-26T14:20:17Z", "creator": "apache_bugzilla@valgronda.com", "creation_time": "2011-01-26T14:20:17Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "vladimir_egorov@yahoo.com", "attachment_id": null, "is_private": false, "id": 101423, "time": "2007-04-04T08:02:40Z", "bug_id": 42046, "creation_time": "2007-04-04T08:02:40Z", "text": "Reproducer:\n\n  <macrodef name=\"echotest\">\n    <attribute name=\"message\" />\n    <sequential>\n      <echo message=\"@{message}\" />\n    </sequential>\n  </macrodef>\n\n  <target name=\"test\">\n    <echo message=\"$${basedir}\" />\n    <echotest message=\"$${basedir}\" />\n  </target>\n\nThe output is:\n\ntest:\n     [echo] ${basedir}             --> as expected\n     [echo] path/to/current/dir    --> bug?\n\nThis seems related to ant-1.7 issue\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=41400"}, {"count": 1, "tags": [], "bug_id": 42046, "attachment_id": 24782, "id": 133226, "time": "2009-12-30T09:28:32Z", "creator": "machisuji@googlemail.com", "creation_time": "2009-12-30T09:28:32Z", "is_private": false, "text": "Created attachment 24782\nmacro double property expansion fix\n\nI think my patch should fix this issue.\nIt prevents the replacement of properties in MacroInstances,\nwhich is the unnecessary second (actually first) expansion."}, {"count": 2, "tags": [], "text": "As I said the bug should be fixed by applying the patch I attached.\nI've tested it with the given example here and also with the one from\nbug #41400 and they work just fine.", "is_private": false, "id": 133228, "creator": "machisuji@googlemail.com", "time": "2009-12-30T10:46:20Z", "bug_id": 42046, "creation_time": "2009-12-30T10:46:20Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42046, "attachment_id": null, "text": "Alright. I fixed the bug in a source distribution.\nMeanwhile the code in RuntimeConfigurable.java has changed in the trunk, though.\n\nAnd guess what, this specific bug is no more.\nHowever, bug #41400 still remains, but is still fixed by my updated\npatch, which I will attach there.", "id": 133230, "time": "2009-12-30T11:33:09Z", "creator": "machisuji@googlemail.com", "creation_time": "2009-12-30T11:33:09Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 42046, "attachment_id": null, "text": "I can still reproduce the bug with a trunk build of Ant (without your patch, that is).\n\n*** This bug has been marked as a duplicate of bug 41400 ***", "id": 133321, "time": "2010-01-04T21:14:53Z", "creator": "bodewig@apache.org", "creation_time": "2010-01-04T21:14:53Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 42046, "attachment_id": null, "id": 151602, "time": "2011-11-17T16:10:10Z", "creator": "bodewig@apache.org", "creation_time": "2011-11-17T16:10:10Z", "is_private": false, "text": "*** Bug 41400 has been marked as a duplicate of this bug. ***"}, {"count": 6, "tags": [], "bug_id": 42046, "attachment_id": null, "id": 151603, "time": "2011-11-17T16:13:00Z", "creator": "bodewig@apache.org", "creation_time": "2011-11-17T16:13:00Z", "is_private": false, "text": "I'm again trying to get this resolved.  With your patch now not only propertyhelper-test but also property-test fails.\n\nInterestingly the property-test failure is a good one as the buggy behavior of assertPropertyEquals of bug 41400 hides the actual failure.  See the commented out alternative way of verifying the property value in svn revision 1203226\n\nIn the case of properthelper-test I've tracked it down to the point where <equals> says the objects are different.  In fact, <equals> doesn't see any objects but rather the string ${object}.  This ${object} is supposed to be resolved into an Object instance by a custom property helper - and it is inside the error message, but not when passed to <equals>.\n\nSo whatever it is that performs the second expansion on macroinstance attributes doesn't seem to consult all propertyhelpers, while the first invocation that your patch removes does.\n\nThis is more thinking out loud as I will try to investigate this case further myself, but maybe anybody else sees where we are going wrong before I do."}, {"count": 7, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 151720, "time": "2011-11-22T12:51:55Z", "bug_id": 42046, "creation_time": "2011-11-22T12:51:55Z", "text": "The resons for the propertyhelper-test failure turned out to be more subtle.  after applying your patch the test was comparing the o.toString() for arg2 to o and of course they were no the same.\n\nI've modified the test to use a property who's value is a string and it passes.\n\nWhat is happening here is that the loadproperties task doesn't work as expected b the test when expanding properties with non-string values.  I.e. this is another case where the double-expansion of properties cause a false positive unit test.\n\nsvn revision 1204961 contains the patch and disabled the failing tests that I'm going to address separately.\n\nThanks for your patience."}, {"count": 8, "tags": [], "bug_id": 42046, "attachment_id": null, "is_private": false, "id": 153603, "time": "2012-02-08T16:40:36Z", "creator": "jglick@apache.org", "creation_time": "2012-02-08T16:40:36Z", "text": "Due to regressions like that described in bug #52621, probably this fix needs to be opt-in, since I can imagine various other scenarios where the former behavior (call by value) is wanted and a change (call by name) would be incompatible.\n\nSuggest introducing an attribute on macrodef like 'expands' which would be true by default; those users who have struggled with double expansion in the past can explicitly set it to false, but others would be unaffected:\n\n  <macrodef name=\"echotest\" expands=\"false\">\n    <attribute name=\"message\"/>\n    <sequential>\n      <echo message=\"@{message}\"/>\n    </sequential>\n  </macrodef>\n\nRuntimeConfigurable.java would then read:\n\nif (target instanceof MacroInstance &&\n    !((MacroInstance) target).getMacroDef().isExpands()) {\n  attrValue = value;\n} else {\n  attrValue = PropertyHelper.getPropertyHelper(p).parseProperties(value);\n}\n\nWith a slightly more complex patch, the <attribute> nested element could individually have an expansion attribute:\n\n  <macrodef name=\"echotest\">\n    <attribute name=\"message\" expands=\"false\"/>\n    <sequential>\n      <echo message=\"@{message}\"/>\n    </sequential>\n  </macrodef>\n\n(Not sure if the same consideration applies to <text> and/or <element>.)"}, {"count": 9, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 153694, "time": "2012-02-12T08:22:04Z", "bug_id": 42046, "creation_time": "2012-02-12T08:22:04Z", "text": "The current patch in trunk only applies to the attributes of the macro invocation, nested text or nested elements are not directly affected.  For nested text this doesn't pose any problem as Ant's engine doesn't expand properties there, the task has to do it, so there is no double-expansion.  Nested elements aren't handled in RuntimeConfigurable directly but rather when the nested sequential of the MacroInstance is configured.\n\nWhat happened before the patch is Ant expanded properties of the attributes of each echotest instance before calling execute on the MacroDef instance backing it, then the MacroInstance created a new UnknownElement for the sequential defined inside the macrodef, replaced @{...} sequences while creating it and the handed it off to Ant's engine to configure - which led to another round of property expansions.\n\nSo properties in attributes are expanded in trunk as well, it is only that they are only expanded once rather than twice (which is needed for the macrodef from http://ant.apache.org/faq.html#propertyvalue-as-name-for-property to work).\n\nIt boils down to \"is ${} expansion performed before and after @{} expansion or only after @{} expansion\".  I agree the default has to be \"before and after\" to avoid regressions.\n\nWith an attribute like Jesse suggests we end with a subtle difference that not only is hard to explain for the macrodef manual but also requires macrodef writers to document for their users (who don't necessarily know they are using a macrodef in the first place).  Something like \"properties used in the message attribute might get expanded twice so you must use three $ characters rather than two to avoid expanding a property reference\".  The same is true for any macrodef used with Ant 1.8.2 and earlier anyway.\n\nI can't say I'm satisfied with the proposed solution but don't see any alternative.  The only other option I see is not fixing this bug but calling it a feature and document it properly (which still leaves macrodef writers to explain the behavior of their tasks to their users).\n\nI'm going to add a FAQ entry documenting the current behavior in the first place."}, {"count": 10, "tags": [], "creator": "jglick@apache.org", "attachment_id": null, "id": 153989, "time": "2012-02-21T14:44:09Z", "bug_id": 42046, "creation_time": "2012-02-21T14:44:09Z", "is_private": false, "text": "(In reply to comment #8)\n> [a parameter] on macrodef like 'expands' which would be true by default\n\nIf discoverability of the #42046 fix is a concern, the taskdef could warn if it were not set one way or the other, as we do for <javac> without source=\"...\". This would address the discoverability issue but at the cost of annoying users with functional scripts, especially if they wish to continue to run on 1.8.2 as well and so cannot define the parameter."}, {"count": 11, "tags": [], "bug_id": 42046, "attachment_id": null, "id": 154093, "time": "2012-02-23T22:19:17Z", "creator": "jglick@apache.org", "creation_time": "2012-02-23T22:19:17Z", "is_private": false, "text": "Fix now activated conditionally as discussed in bug #52621."}]
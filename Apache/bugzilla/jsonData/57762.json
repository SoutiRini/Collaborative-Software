[{"count": 0, "tags": [], "bug_id": 57762, "is_private": false, "id": 182104, "creation_time": "2015-03-26T00:32:07Z", "time": "2015-03-26T00:32:07Z", "creator": "palmercox@gmail.com", "text": "It appears that the WebSocket client can't detect when a connection is forcefully closed. Given the following example program:\n\npublic class App2 {\n    @ClientEndpoint\n    public static class Client {\n        @OnClose\n        public void onClose() {\n        \tSystem.out.println(\"CLOSED\");\n        }\n        \n        @OnError\n        public void onError(Throwable t) {\n        \tSystem.out.println(\"ERROR: \" + t);\n        }\n    }\n\n    public static void main(final String[] args) throws Exception {\n        final WebSocketContainer container = ContainerProvider.getWebSocketContainer();\n        System.out.println(\"Container: \" + container);\n        container.connectToServer(\n                Client.class,\n                URI.create(\"ws://echo.websocket.org/\"));\n        Thread.sleep(Long.MAX_VALUE);\n    }\n}\n\nI then modified /etc/hosts so that echo.websocket.org resolved to localhost. I then set up an SSH tunnel to direct local port 80 to echo.websocket.org (which is 174.129.224.73):\n\nsudo ssh me@someserver -L 80:174.129.224.73:80\n\nI then started the program. It connected. Next, I killed the SSH session. Neither the onClosed on onError methods were invoked.\n\nWhen I tested the same program running on Tyrus 1.10, however, onClose was invoked with a CloseReason 10006 - Closed Abnormally.\n\nI think the Tyrus behavior is correct - the socket is dead and the program should be notified.", "attachment_id": null}, {"text": "I tested this on Tomcat 8.0.20.", "tags": [], "creator": "palmercox@gmail.com", "is_private": false, "count": 1, "id": 182105, "time": "2015-03-26T00:36:12Z", "bug_id": 57762, "creation_time": "2015-03-26T00:36:12Z", "attachment_id": null}, {"text": "The NIO2 code that the client uses looks ok to me (WsFrameClient) and should work unless there's a JVM or platform issue. If the JVM doesn't report that the socket is gone using the failed of the completion handler, then nothing is going to happen and it would be the behavior you see.\n\nAlthough this should be tested to make sure this is indeed the explanation, it's possible there's no Tomcat bug to fix here.", "tags": [], "bug_id": 57762, "attachment_id": null, "count": 2, "id": 182113, "time": "2015-03-26T09:30:55Z", "creator": "remm@apache.org", "creation_time": "2015-03-26T09:30:55Z", "is_private": false}, {"count": 3, "tags": [], "creator": "palmercox@gmail.com", "attachment_id": null, "text": "For reference, I tested on Mac OS X 10.10.2 and Java 1.8.0_40. I haven't had a chance to check if there is a JVM issue.", "id": 182126, "time": "2015-03-26T14:24:02Z", "bug_id": 57762, "creation_time": "2015-03-26T14:24:02Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 57762, "attachment_id": null, "id": 182173, "time": "2015-03-28T21:55:06Z", "creator": "markt@apache.org", "creation_time": "2015-03-28T21:55:06Z", "is_private": false, "text": "Interesting. The NIO2 code reports a dropped connection as a successful read for EOF. Not what was expected. This is now correctly handled in trunk, 8.0.x (for 8.0.22 onwards) and 7.0.x (for 7.0.62 onwards)."}]
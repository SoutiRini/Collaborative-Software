[{"count": 0, "tags": [], "text": "If apr_snprintf is called with a format of %llu and a uint64_t is passed in, \nthe code in conv_10_quad() in strings/apr_snprintf.c that tries to optimize \nthe conversion by downcasting to a 32 bit number will sometimes incorrectly \ndetermine that the number can be treated as a 32 bit number.\n\nIf the original uint64_t number is large enough (like 10267677267010969076 - \nbecomes -8179066806698582540 when cast to an int64_t) that it becomes negative \nwhen casted to the type that the widest_int type def is (int64_t in this \ncase), the line (#399 in 1.2.8 - should be about the same place in \nsubversion):\nif ((num <= ULONG_MAX && is_unsigned)\n\nwill incorrectly succeed since the int64_t version (-8179066806698582540) is \nless than ULONG_MAX. Changing the line to:\nif (((u_widest_int)num <= (u_widest_int)ULONG_MAX && is_unsigned)\n\nfixes the problem as then num is not treated as a negative compiler. This may \nbe compiler-dependant (i've seen this on kubuntu 7.04 with gcc 4.1.2) but it \nwould be better to make the behavior explicit with the u_widest_int cast.", "attachment_id": null, "bug_id": 42250, "id": 102362, "time": "2007-04-25T08:42:54Z", "creator": "wynn@bungeelabs.com", "creation_time": "2007-04-25T08:42:54Z", "is_private": false}, {"count": 1, "tags": [], "text": "u_widest_int - yuck - horribly nonportable.\n\nWouldn't apr_int32_t accomplish the same (and solve the portability issues)?", "attachment_id": null, "id": 102430, "creator": "wrowe@apache.org", "time": "2007-04-26T02:35:33Z", "bug_id": 42250, "creation_time": "2007-04-26T02:35:33Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 42250, "text": "Thanks for the fix!  http://svn.apache.org/viewvc?view=rev&revision=532733 and\nhttp://svn.apache.org/viewvc?view=rev&rev=532735", "id": 102451, "time": "2007-04-26T06:20:54Z", "creator": "jorton@redhat.com", "creation_time": "2007-04-26T06:20:54Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42250, "text": "Ummm, the code can be much simpler and faster. Patches will follow.", "id": 102469, "time": "2007-04-26T07:10:43Z", "creator": "davi@apache.org", "creation_time": "2007-04-26T07:10:43Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 42250, "text": "Created attachment 20051\nConvert early", "id": 102472, "time": "2007-04-26T07:13:16Z", "creator": "davi@apache.org", "creation_time": "2007-04-26T07:13:16Z", "is_private": false, "attachment_id": 20051}, {"count": 5, "tags": [], "bug_id": 42250, "attachment_id": 20052, "id": 102473, "time": "2007-04-26T07:14:16Z", "creator": "davi@apache.org", "creation_time": "2007-04-26T07:14:16Z", "is_private": false, "text": "Created attachment 20052\nThe classic approach is way faster"}, {"count": 6, "tags": [], "bug_id": 42250, "text": "I tested Davi's patches and they worked fine for me. Thanks for the prompt \nattention to this.", "id": 102494, "time": "2007-04-26T08:10:01Z", "creator": "wynn@bungeelabs.com", "creation_time": "2007-04-26T08:10:01Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 42250, "attachment_id": null, "id": 102504, "time": "2007-04-26T08:58:47Z", "creator": "jorton@redhat.com", "creation_time": "2007-04-26T08:58:47Z", "is_private": false, "text": "The fact that the code could be \"simpler and faster\" (which I don't doubt) is\nnot the issue reported here; can you send your cleanup to dev@apr?"}]
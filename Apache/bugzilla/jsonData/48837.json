[{"count": 0, "text": "Created attachment 25077\nwebapps/examples/foo.jsp\n\nThe memory leaks protection feature of TC6/TC7 is able to heal certain types of memory leaks caused by servlet code (where classes are loaded by WebappClassLoader), but does not provide a cure for ones caused by JSP code (where classes are loaded by JasperLoader).\n\nI think that is of little concern, as the code that triggers a memory leak is unlikely to be present on a JSP page or a tag file, but at least it provides us with an example to test the \"Find leaks\" diagnostics in the Manager webapp.\n\n\nTo reproduce:\n1. Place the attached foo.jsp into the examples webapp\n2. Open http://localhost:8080/examples/foo.jsp\n3. Open the Manager web application\n4. Reload or stop/start the examples application\n5. Press the \"Find leaks\" button in the Manager\n6. The message will be displayed that \"/examples\" app triggered a memory leak.\n\nThe leak is caused by foo.jsp creating a ThreadLocal holding an instance of some inner class of that JSP. (That inner class was loaded through JasperLoader, and thus was not detected when enumerating ThreadLocals in leaks protection code.)\n\n7. Another ThreadLocal (holding a reference to some servlet) is successfully cleared by memory leak protection code when the examples application is stopped. You can see a message about that in the Tomcat logs.", "bug_id": 48837, "attachment_id": 25077, "id": 134981, "time": "2010-03-01T18:51:11Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-03-01T18:51:11Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": 25116, "creator": "slaurent@apache.org", "text": "Created attachment 25116\nPatch to enhance classloader leaks because of uncleared ThreadLocal\n\nProposing a patch to better detect leaks. Before the patch, the leak caused by an uncleared ThreadLocal is detected only if the ThreadLocal key or value is loaded by the WebAppClassLoader.\nThe patch proposes to also detect cases where the key or value object class was loaded by a child classloader (or any level of descendant).\n\nThe leak of the example foo.jsp is detected (and cleared) with this patch.\n\nNote that there's still a leak if the key or value is a JDK class like an ArrayList which itself contains an instance of a class loaded by the WebAppClassLoader (or a child classloader).\n\nSylvain", "id": 135287, "time": "2010-03-11T21:46:46Z", "bug_id": 48837, "creation_time": "2010-03-11T21:46:46Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 48837, "text": "Fixed in 7.0.x and will be included in 7.0.6 onwards. I also proposed your patch for 6.0.x", "id": 141975, "time": "2010-11-24T16:34:32Z", "creator": "markt@apache.org", "creation_time": "2010-11-24T16:34:32Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48837, "text": "Thanks Mark.\nJust to clarify things : the patch just improves the detection of such leaks.\nTo cure them (besides fixing the webapp code), you'll have to enable the (unsafe) clearReferencesThreadLocals option on the StandardContext or wait for bug 49159 to be fixed.", "id": 142022, "time": "2010-11-25T16:31:10Z", "creator": "slaurent@apache.org", "creation_time": "2010-11-25T16:31:10Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 48837, "text": "Fixed in 6.0 by r1041255 (will be in 6.0.30 onwards).", "id": 142275, "time": "2010-12-01T21:30:01Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-12-01T21:30:01Z", "is_private": false, "attachment_id": null}]
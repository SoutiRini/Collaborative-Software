[{"count": 0, "tags": [], "bug_id": 15561, "text": "Hello,\n\nI have got a problem with build listener: I have created a <finally> task to \nperform some \"rollback\" work when build is badly finished. This tasks \nimplements \"TaskContainer\" interface so it contains some sub-tasks to execute \non build end and it implements \"BuildListener\" interface too to receive \nthe \"finished build\" event. The code of this task is relatively simple.\nWhen I use this task in the begin of build, it works good but when I use it in \na target called by <antcall>, the \"finished build\" event seems to be never \nreceived by the task...\n\nBelow, the code of this \"listener task\":\n\npublic class Finally\n  extends Task\n  implements BuildListener, TaskContainer {\n\n  private Vector _subTasks = new Vector();\n  private String _buildSuccessProperty = null;\n\n /**\n  * Set attribute \"buildSuccessProperty\"\n  * @param onSuccessful\n  */\n  public void setBuildSuccessProperty( String buildSuccessProperty ) {\n    _buildSuccessProperty = buildSuccessProperty;\n  }\n\n /**\n  * Signals that a build has finished.\n  * @param event\n  */\n  public void buildFinished(BuildEvent event) {\n\ntrace(\"buildFinished\");\n\n    Throwable e = event.getException();\n    if ( e == null ) {\n      trace( \"build successful.\" );\n      if ( _buildSuccessProperty != null ) {\n        // Build has succeeded: set the success property\n        super.project.setProperty(_buildSuccessProperty, \"true\");\n        trace( \"property [\"+_buildSuccessProperty+\"] set!\" );\n      }\n    }\n    else {\n      e.printStackTrace();\n      trace( \"build failed.\" );\n    }\n\n    for (int i=0 ; i< _subTasks.size() ; i++ ) {\n      Task task = (Task) _subTasks.get(i);\n      task.execute();\n    }\n  }\n\n /**\n  * Signals that a build has started.\n  * @param event\n  */\n  public void buildStarted(BuildEvent event) {\n  }\n\n /**\n  * Signals a message logging event.\n  * @param event\n  */\n  public void messageLogged(BuildEvent event) {\n  }\n\n /**\n  * Signals that a target has finished.\n  * @param event\n  */\n  public void targetFinished(BuildEvent event) {\n    trace( \"targetFinished\" + event.getTarget());\n  }\n\n /**\n  * Signals that a target is starting.\n  * @param event\n  */\n  public void targetStarted(BuildEvent event) {\n    trace( \"targetStarted\" + event.getTarget());\n  }\n\n /**\n  * Signals that a task has finished.\n  * @param event\n  */\n  public void taskFinished(BuildEvent event) {\n    trace( \"taskFinished\" + event.getTask());\n  }\n\n /**\n  * Signals that a task is starting.\n  * @param event\n  */\n  public void taskStarted(BuildEvent event) {\n    trace( \"taskStarted\" + event.getTask());\n  }\n\n /**\n  * Task execution.\n  * @throws BuildException\n  */\n  public void execute() throws BuildException {\n\n    getProject().addBuildListener( this );\n    trace( \"execute: build listener added\" );\n  }\n\n /**\n  * Adds a task to this task container\n  * @param task\n  * @see org.apache.tools.ant.TaskContainer\n  */\n  public void addTask(Task task) {\n\n   _subTasks.add(task);\n  }\n\n /**\n  * Trace method.\n  * @param message\n  */\n  public void trace( String message ) {\n    getProject().log( this, message, Project.MSG_VERBOSE );\n  }", "id": 28100, "time": "2002-12-20T10:28:36Z", "creator": "christian.nerriere@akazi.com", "creation_time": "2002-12-20T10:28:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "The following script shows the problem :\n\n<project name=\"insmigrate\" default=\"main\" basedir=\".\">\n\n     <taskdef name=\"finally\" classname=\"mytasks.Finally\" />\n\n  <!-- ************************ -->\n\n  <target name=\"main\">\n  \n    <antcall target=\"subtarget\"/>\n\n  </target>\n  \n  <!-- ************************ -->\n             \n    <target name=\"subtarget\">\n\n    <finally BuildSuccessProperty=\"build.success\">\n      <echo>finally</echo>\n    </finally>\n    \n      <echo>sub target</echo>\n    </target>\n        \n</project>\n\nIf you move the <finally> task code before or after the <antcall>, it works \ngood ?\nHave you any idea to bypass this behaviour ?\nThanks.", "attachment_id": null, "bug_id": 15561, "id": 28106, "time": "2002-12-20T11:23:52Z", "creator": "christian.nerriere@akazi.com", "creation_time": "2002-12-20T11:23:52Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 15561, "text": "buildFinished is only ever fired once, at the very end of the complete build\nprocess.\n\nAnt 1.6.2 adds the SubBuildListener interface which add subBuildFinished, this is\nwhat you want.", "id": 72596, "time": "2005-03-17T15:32:45Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-17T15:32:45Z", "is_private": false, "attachment_id": null}]
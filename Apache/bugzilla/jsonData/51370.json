[{"count": 0, "tags": [], "bug_id": 51370, "attachment_id": 27154, "text": "Created attachment 27154\npatch to htdigest\n\nRight now, htdigest forces one to enter a password interactively.  There is no way to provide the password on the command-line.  This is inconvenient for scripts.\n\nI needed a script to take a list of usernames/passwords as the input and generate a single 'htpasswd' file with all of them.  I could not find a way (in Python) to redirect stdin to feed the appropriate password to each invocation of htdigest.\n\nSo, I modified htdigest to accept an optional last argument being the password.  I understand that this is not preferred due to security concerns (after all, the password is visible in the process list).  When security is not an issue, however, such as when I am working on my personal laptop, the most convenient option is to pass all needed parameters on the command line.\n\nMy patch also refactors some code to avoid duplication and keep everything no less tidy than it was.", "id": 147091, "time": "2011-06-13T23:24:58Z", "creator": "pmw+apache@qnan.org", "creation_time": "2011-06-13T23:24:58Z", "is_private": false}, {"count": 1, "tags": [], "text": "Passing arguments on the command line is subject to sniffing by most any process running locally.  This security flaw will not be introduced.", "attachment_id": null, "id": 147092, "creation_time": "2011-06-14T02:37:23Z", "time": "2011-06-14T02:37:23Z", "creator": "wrowe@apache.org", "bug_id": 51370, "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 51370, "text": "I've acknowledged in the original post that passing a password on the command line is insecure.  However, a good program allows the user to trade convenience for security.  As I said, in my particular situation, there is no security issue -- it's a personal laptop and I am the only user logged in.\n\nSome well-known command-line programs *optionally* accept a password on the command line.  Two off the top of my head: MySQL's official command-line client (with the -p option) and PostgreSQL's official command-line client (with the conninfo string).\n\nThe intended audience of 'htdigest' is not a soccer mom; it's presumably a system/web administrator who's using it on a command line of a Unix-based system.  If they need to use htdigest in a script, we should make it convenient for them.\n\nHow about if I update the usage info and the manpage to indicate that passing a password on the command line is not recommended for security reasons?", "id": 147118, "time": "2011-06-14T17:21:42Z", "creator": "pmw+apache@qnan.org", "creation_time": "2011-06-14T17:21:42Z", "tags": [], "is_private": false}, {"count": 3, "text": "I don't like this patch.\n\n+/* generate_digest expects a password in the 'pw' argument. If the password\n+ * is not known or may be null, use add_password() to collect it from stdin.\n+ */\n\nWhy not follow the same path as htpasswd and add -b switch?", "bug_id": 51370, "attachment_id": null, "id": 147119, "time": "2011-06-14T17:51:02Z", "creator": "i.galic@brainsware.org", "creation_time": "2011-06-14T17:51:02Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "pmw+apache@qnan.org", "attachment_id": null, "id": 147120, "time": "2011-06-14T18:12:23Z", "bug_id": 51370, "creation_time": "2011-06-14T18:12:23Z", "is_private": false, "text": "Igor, thanks for the feedback.  Why don't you like the patch?  The biggest reason I don't do what 'htpasswd' does is that I haven't ever used 'htpasswd'; I didn't know it accepts passwords on the command line!  I suppose that's the strongest reason why 'htdigest' should also.\n\nI see why 'htpasswd' requires the '-b' argument -- because the filename is optional, and '-b' helps to disambiguate.  This is not a problem for 'htdigest', since a file argument is mandatory.  We can unambiguously determine whether the user provided a password or not.\n\nThe bigger picture is that both programs use a non-standard format for command-line arguments.  I'd expect the \"flag or flag-followed-by-parameter\" format, the format supported by Python's getopt library.  If we're willing to break backward compatibility, I'll happily adapt both programs to use libc's getopt or similar.  (Is there an APR replacement?)\n\nWhat do you think?"}, {"count": 5, "tags": [], "creator": "jmv_deb@nirgal.com", "text": "This feature is also in Debian wishlist. Full description and a patch are available at:\nhttp://bugs.debian.org/325547", "id": 153417, "time": "2012-02-03T19:58:51Z", "bug_id": 51370, "creation_time": "2012-02-03T19:58:51Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "wrowe@apache.org", "text": "There is no mechanism to protect the contents of the command line from the view of all local users, which is why passwords on the command line are a fundamentally broken concept.\n\nObviously users are welcome to apply such a patch, but shipping such a patch would be irresponsible.\n\nI'm going to reclose this as invalid because no developers disagreed when they saw this message pass by their screens.\n\nIf you like, propose a \"[vote] Allow command line arg passwords\" to the dev@httpd.apache.org and we can see what the full consensus of the entire project is.\n\nI'm sure some users would also like to pass ssl key passphrases or user account passwords on the command line, and that should not happen either.  This is one of those occasions where user desires fly in stark contrast to users well being.", "id": 153425, "time": "2012-02-03T23:23:38Z", "bug_id": 51370, "creation_time": "2012-02-03T23:23:38Z", "tags": [], "is_private": false}]
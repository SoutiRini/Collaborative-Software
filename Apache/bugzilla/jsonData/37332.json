[{"text": "Hi,\n\njk_log() in\njakarta-tomcat-connectors-1.2.14.1-src/jk/native/common/jk_util.c:jk_log\njakarta-tomcat-5.5.9-src/jakarta-tomcat-connectors/jk/native/common/jk_util.c\ndoes not correctly protect its temporary buffer.\n\nFirst, from a style & review perspective, I would like to say I prefer\nto see a single function (and even whole files) use a consistent style\nfor acessing buffer parts. Currently, jk_log() uses both &buf[used]\nand buf+used when calling v/s/nprintf().\nBut that has nothing to do with the bug.\n\nActually, there are several bugs involving use of snprintf()-style functions:\n\n1. snprintf(&buf[used], HUGE_BUFFER_SIZE, \"%s (%d): \",...); (line 341)\nIt should be BUFFER_SIZE-used, since the buffer is no more empty.\n\n2. used += snprintf(&buf[used], ...);\n3. if (used < 0) ...\n4. local return without free()\n\nsnprintf() is documented (as the manpage notes, \"since glibc 2.1 these\nfunctions follow the C99 standard\") to return \"the number of characters\n... which would have been written if enough space had been available.\"\n\nAs a result, used may grow larger than BUFFER_SIZE, and\nBUFFER_SIZE-used can become negative, or rather, since snprintf()\naccepts n as size_t, which is typedef'd as an unsigned long on many a\nsystem, it becomes a really huge positive entity, in effect\n a) suppressing the boundary check for subsequent calls,\n b) yielding an out of bound buf[used] for subsequent calls.\n\nThe code must instead detect the buffer full condition and stop\ncalling snprintf() style functions, e.g. by premature return from the\nfunction. Note that doing so is against many a style guide, since it\ntypically omits freeing resources at the end of the function body, e.g.\n#ifdef NETWARE free(buf)\nis not being called when exiting in lines 322 and 345 of jk_util.c.\n\nFrom a robustness point of view, and to favour a consistent style, I'd\nlike to recommend the following style:\n used = 0;\n used += snprintf(buf+used,SIZE-used,fmt,...); // with glibc >= 2.1\n if (used >= SIZE) break_safely;\n used += snprintf(buf+used,SIZE-used,fmt,...); // with glibc >= 2.1\n\nAlternatively, the local break or exit could be replaced by nested\n if (used < SIZE) { \n   more_snprintf(...);\n   if (used < SIZE) ...\n }\nbut deep nesting, again, is against many a coding style.\n[I digress, please contact me if you are interested in coding style\n that attempts to consider both security *and* not feel like bondage.]\n\nIf it is not sure that glibc >= 2.1 is used, then the code should use\nan intermediate return value and detect the -1 return value. Using\n used += snprintf(); if (used<0) ...\nas currently done in jk_log() is *not* correct, since all that happens\nis that `used' gets decremented by 1.\n\nActually, my preference goes to printf()-style functions oriented\ntowards BSD's strlcat() and strlcpy(), where the limit argument\nindicates the total buffer size instead of the max. number of bytes to\ncopy.\nhttp://www.usenix.org/events/usenix99/millert.html\nhttp://developer.apple.com/documentation/Darwin/Reference/ManPages/man3/strlcpy.3.html\n\nOne would then use a very readable and fool-proof sequence of\n slprintf(buf,SIZE,fmt,...);\n slprintf(buf,SIZE,fmt,...);\n slprintf(buf,SIZE,fmt,...);\nand not worry about the tiny efficiency loss of having to seek past the\n\\0-terminator that strlen() and str[ln]cat() suffer (in theory O(nxm)\ninstead of O(n)).\nBTW, jk_util.c already suffers such penalty by using\n            strcat(buf, jk_level_werbs[level]);\n            used += 8;\ninstead of the slightly more efficient\n\tstrcpy(buf+used,...);\n\nFrom a security, reliability and maintenance point of view, I very\nmuch favour readability and not having to worry about keeping track of\nthe number of used elements, over optimized, hard to read code that\nmust maintain correct buf+used values and contains local exits to stop\nappending when the buffer is full.\n\nMaybe this bug can be misused since an overflow may be caused by a\nvery long filename supplied to Tomcat, but I did not investigate further.\n\nI found this group of bugs while performing a code inspection on\nbehalf of BSI, the german Federal Office for Information Security.\n -- Bundesamt f\u00fcr Sicherheit in der Informationstechnik.\nhttp://www.bsi.de\n\nBSI endorses the use of Open Source Software. A report of our\nactivities covering installation, code and penetration tests of Tomcat\nwill be published by BSI in the internet at the end of our review\nproject.\n\nRegards,\n J\u00f6rg H\u00f6hle.\nT-Systems International, Solution Center Testing & Security\nhttp://www.t-systems.com", "tags": [], "bug_id": 37332, "is_private": false, "count": 0, "id": 82042, "time": "2005-11-02T14:34:08Z", "creator": "Joerg-Cyril.Hoehle@t-systems.com", "creation_time": "2005-11-02T14:34:08Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "mturk@apache.org", "attachment_id": null, "is_private": false, "id": 86954, "time": "2006-03-17T09:36:06Z", "bug_id": 37332, "creation_time": "2006-03-17T09:36:06Z", "text": "Fixed in the SVN.\nAlthough 8K buffer is long enough for any log line we might have."}]
[{"count": 0, "tags": [], "bug_id": 5338, "text": "I've written a very simple test that parses a big SVG document as a DOM.\nI then asks all \"path\" elements from the root element using \ngetElementByTagName(\"path\"). On small documents (e.g. containing 621 \"path\" \nelements, it works fine). On bigger documents (e.g. 1303 occurences of \"path\"), \nI only get 709 of them).\n\nI was able to reproduce this bug with the following versions of Xerces-J 1.3.1, \n1.4.0, 1.4.4 (I haven't tried others).\nusing Sun's JVM, both versions 1.3.1_01 and 1.4.0beta3 (b84) \n\n\n\nI can provide you with the SVG document on which to run the test if you want it \n(it's about 600 Kb).\n\nHere's the source code for my test.\n\nThis is huge! Hope you can solve it.\n\nEmmanuel\n\n//Author: Emmanuel Pietriga (emmanuel.pietriga@xrce.xerox.com,epietrig@w3.org)\n//Created: 12/10/2001\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.*;\nimport org.xml.sax.*;\n\npublic class Test {\n\n    DOMParser parser;\n\n    static String argFile;\n\n    Test(){\n\tSystem.err.println(\"Parsing \"+argFile);\n\tDocument d=parse(argFile,true);\n\tElement svgRoot=d.getDocumentElement();\n\tNodeList l1=svgRoot.getElementsByTagName(\"a\");\n\tNodeList l2=svgRoot.getElementsByTagName(\"ellipse\");\n\tNodeList l3=svgRoot.getElementsByTagName(\"path\");\n\tSystem.out.println(\"a=\"+l1.getLength());\n\tSystem.out.println(\"ellipse=\"+l2.getLength());\n\tSystem.out.println(\"path=\"+l3.getLength());\n    }\n\n    Document parse(String xmlFile,boolean validation) {\n\ttry {\n\t    parser = new DOMParser();\n\t    if (validation) \n{parser.setFeature(\"http://xml.org/sax/features/validation\",true);}\n\t    else \n{parser.setFeature(\"http://xml.org/sax/features/validation\",false);}\n\t    \nparser.setFeature(\"http://apache.org/xml/features/dom/include-ignorable-whitespa\nce\", false);\n\t    try {\n\t\tparser.parse(xmlFile);\n\t    } \n\t    catch (SAXException se) {\n\t\t//se.printStackTrace();\n\t    } \n\t    catch (java.io.IOException ioe) {\n\t\tioe.printStackTrace();\n\t    }\n\t    Document document = parser.getDocument();\n\t    document.normalize();\n\t    return document;\n\t}\n\tcatch (Exception e){\n\t    System.err.println(e);\n\t    return null;\n\t}\n    }\n\n\n    public static void main(String[] args){\n\tSystem.out.println(\"JVM version: \n\"+System.getProperty(\"java.vm.vendor\")+\" \"+System.getProperty(\"java.vm.name\")+\" \n\"+System.getProperty(\"java.vm.version\"));\n\targFile=args[0];\n\tTest appli=new Test();\n    }\n    \n}", "id": 8737, "time": "2001-12-10T07:15:24Z", "creator": "epietrig@w3.org", "creation_time": "2001-12-10T07:15:24Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 5338, "is_private": false, "id": 8738, "attachment_id": null, "creator": "epietrig@w3.org", "creation_time": "2001-12-10T07:38:47Z", "time": "2001-12-10T07:38:47Z", "text": "Sorry. My mistake. This is not a bug!\n\nI eventually realized that I was catching the SaxException silently while \nparsing the SVG file, and there are errors in my input file (it's not \nwell-formed ; it is the output of another application and I did not check that \nwhat they produce it indeed well-formed).\n\n\n\n\n"}]
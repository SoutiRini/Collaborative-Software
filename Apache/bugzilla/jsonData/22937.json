[{"count": 0, "tags": [], "creator": "mstover1@apache.org", "attachment_id": null, "is_private": false, "id": 43726, "time": "2003-09-04T16:56:45Z", "bug_id": 22937, "creation_time": "2003-09-04T16:56:45Z", "text": "New IfController.  Code seen here as text:\nPlease find attached the source code for IfController & IfControllerPanel.\nThis is intended to be placed within another controller (or Thread Group).\nA condition is evaluated and if true all the sub-items of the condition is\nexecuted.\n\n\nFor more information please see the attached javadoc.\n\nAlso, please note that the following entries needs to be\nadded to the message.properties file :\n\nif_controller_title=If Controller\nif_controller_label=Condition\n\n===============================================\n\n\n\npackage org.apache.jmeter.control;\n\nimport java.io.Serializable;\nimport junit.framework.TestSuite;\nimport org.apache.jmeter.samplers.Sampler;\nimport org.apache.jmeter.testelement.TestElement;\nimport org.apache.jmeter.testelement.property.StringProperty;\nimport org.apache.jorphan.logging.LoggingManager;\nimport org.apache.log.Logger;\nimport org.mozilla.javascript.Context;\nimport org.mozilla.javascript.Scriptable;\nimport org.apache.jmeter.control.GenericController;\n\n/****************************************\n *@author    Cyrus Montakab\n *@created   $Date: 2003/06/30\n *@version   1.0\n * This is a Conditional Controller; it will execute the set of statemstns\n * (samplers/controllers, etc)\n * until if the  'condition' is true.\n * In a programming world - this is equivalant of :\n *   if (condition) {\n *        statements ....\n *   }\n * In JMeter you may have :\n *    Thread-Group (set to loop a number of times or indefinitely,\n *       ... Samplers ... (e.g. Counter )\n *       ... Other Controllers ....\n *       ... IfController ( condition set to something like -\n${counter}<10\n *            ... staetements to perform if condition is true ...\n *       ... Other Controllers /Samplers\n *    }\n *\n ***************************************/\n\npublic class IfController extends GenericController implements Serializable\n{\n\n      private static Logger logger =\n            LoggingManager.getLoggerFor(\"jmeter.controller.IfController\");\n      private final static String CONDITION = \"IfController.condition\";\n\n      /**\n       * constructor\n       */\n      public IfController() {\n            super();\n      }\n\n      /**\n       * constructor\n       */\n      public IfController(String condition) {\n            super();\n            this.setCondition(condition);\n      }\n\n      /**\n       * Condition Accessor - this is gonna be like     ${count}<10\n       */\n      public void setCondition(String condition) {\n            setProperty(new StringProperty(CONDITION, condition));\n      }\n\n      /**\n       * Condition Accessor - this is gonna be like     ${count}<10\n       */\n      public String getCondition() {\n            return getPropertyAsString(CONDITION);\n      }\n\n      /**\n       * evaluate the condition clause\n       * Throw Exception If bad condition -\n       */\n      private boolean evaluateCondition() throws Exception {\n\n            // condition string is going to be of the form :  ${counter}<10\n            // the following replaces the ${xxx} with actual valuess\n\n            logger.debug(\"    getCondition() : [\" + getCondition() + \"]\");\n\n            String resultStr = \"\";\n            boolean result = false;\n\n            // now evaluate the condition using JavaScript\n            Context cx = Context.enter();\n            try {\n                  Scriptable scope = cx.initStandardObjects(null);\n                  Object cxResultObject =\n                        cx.evaluateString(scope, getCondition()\n                  /*** conditionString ***/\n                  , \"<cmd>\", 1, null);\n                  resultStr = Context.toString(cxResultObject);\n\n                  if (resultStr.equals(\"false\")) {\n                        result = false;\n                  } else if (resultStr.equals(\"true\")) {\n                        result = true;\n                  } else {\n                        throw new Exception(\" BAD CONDITION :: \" +\ngetCondition());\n                  }\n\n                  logger.debug(\n                        \"    >> evaluate Condition -  [ \"\n                              + getCondition()\n                              + \"] results is  [\"\n                              + result\n                              + \"]\");\n\n            } finally {\n                  Context.exit();\n            }\n\n            return result;\n      }\n\n      /**\n       * This is overriding the parent method.\n       * IsDone indicates whether the termination condition is reached.\n       * I.e. if the condition evaluates to False - then isDone() returns\nTRUE\n       */\n      /*    public boolean isDone () {\n            boolean result = super.isDone();\n      //          setDone(true);\n              return result;\n           }\n        */\n      /**\n       * This is overriding the parent method.\n       * IsDone indicates whether the termination condition is reached.\n       * I.e. if the condition evaluates to False - then isDone() returns\nTRUE\n       */\n      public boolean isDone() {\n\n            boolean result = true;\n            try {\n                  result = !evaluateCondition();\n            } catch (Exception e) {\n                  logger.error(e.getMessage(), e);\n            }\n            setDone(true);\n            return result;\n      }\n\n      /**\n       * @see org.apache.jmeter.control.Controller#next()\n       * 'JMeterThread' iterates thru the Controller by calling this\nmethod.\n       * IF a valid 'Sampler' is returned, then it executes the sampler\n       * (calls sampler.sampler(xxx) method) .\n       * So here we make sure that the samplers belonging to this\n       * Controller do not get called\n       *    - if isDone is true\n       *    - if its the first time this is run. The first time is special\n       *       cause it is called prior the iteration even starts !\n       */\n      public Sampler next() {\n            Sampler currentElement = super.next();\n\n            //          if (!isFirst()  && !isDone () ){\n            if (!isDone()) {\n                  return currentElement;\n            } else {\n                  return null;\n            }\n      }\n\n      /**\n       * Tester\n       */\n      public static void main(String args[]) {\n            junit.textui.TestRunner.run(suite());\n      }\n\n      /**\n       * For JUnit test\n       */\n      public static TestSuite suite() {\n            TestSuite suite = new TestSuite();\n            suite.addTest(new Test(\"testProcessing\"));\n            return suite;\n      }\n\n      /**\n       * JUnit test\n       */\n      public static class Test extends junit.framework.TestCase {\n            public Test(String name) {\n                  super(name);\n            }\n\n            public void testProcessing() throws Exception {\n\n                  GenericController controller = new GenericController();\n\n                  controller.addTestElement(new IfController(\"false\n==false\"));\n                  controller.addTestElement(new IfController(\" \\\"a\\\".equals\n(\\\"a\\\")\"));\n                  controller.addTestElement(new IfController(\"2<100\"));\n\n                  /*          GenericController sub_1 = new\nGenericController();\n                              sub_1.addTestElement(new IfController(\"3\n==3\"));\n                              controller.addTestElement(sub_1);\n                              controller.addTestElement(new IfController\n(\"false==true\"));\n                  */\n\n                  /*\n                  GenericController controller = new GenericController();\n                  GenericController sub_1 = new GenericController();\n                  sub_1.addTestElement(new IfController(\"10<100\"));\n                  sub_1.addTestElement(new IfController(\"true==false\"));\n                  controller.addTestElement(sub_1);\n                  controller.addTestElement(new IfController(\"false\n==false\"));\n\n                  IfController sub_2 = new IfController();\n                  sub_2.setCondition( \"10<10000\");\n                  GenericController sub_3 = new GenericController();\n\n                  sub_2.addTestElement(new IfController( \" \\\"a\\\".equals\n(\\\"a\\\")\" ) );\n                  sub_3.addTestElement(new IfController(\"2>100\"));\n                  sub_3.addTestElement(new IfController(\"false==true\"));\n                  sub_2.addTestElement(sub_3);\n                  sub_2.addTestElement(new IfController(\"2==3\"));\n                  controller.addTestElement(sub_2);\n                  */\n\n                  /*        IfController controller = new IfController(\"12\n==12\");\n                          controller.initialize();\n                  */\n                  logger.debug(\">>>>>   testProcessing : Starting the\niteration  \");\n                  TestElement sampler = null;\n                  while ((sampler = controller.next()) != null) {\n                        logger.debug(\n                              \"    ->>>  Gonna assertTrue :\"\n                                    + sampler.getClass().getName()\n                                    + \" Property is   ---->>>\"\n                                    +\nsampler.getPropertyAsString(TestElement.NAME));\n                  }\n            }\n      }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n===================================================================================\n\n\npackage org.apache.jmeter.control.gui;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.Box;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nimport org.apache.jmeter.control.IfController;\nimport org.apache.jmeter.gui.util.FocusRequester;\nimport org.apache.jmeter.testelement.TestElement;\nimport org.apache.jmeter.util.JMeterUtils;\n\n/**\n * The user interface for a controller which specifies that its\nsubcomponents\n * should be executed some number of times in a loop.  This component can\nbe\n * used standalone or embedded into some other component.\n * Copyright: 2000\n *\n * @author    Cyrus Montakab\n * @version   $Revision: 1.10 $\n */\n\npublic class IfControllerPanel\n    extends AbstractControllerGui\n    implements ActionListener\n{\n\n    private static final String CONDITION_TITLE = \"if_controller_title\";\n      private static final String CONDITION_LABEL = \"if_controller_label\";\n\n    /**\n     * A field allowing the user to specify the number of times the\ncontroller\n     * should loop.\n     */\n    private JTextField theCondition;\n\n    /**\n     * Boolean indicating whether or not this component should display its\n     * name. If true, this is a standalone component. If false, this\ncomponent\n     * is intended to be used as a subpanel for another component.\n     */\n    private boolean displayName = true;\n\n\n    /** The name of the loops field component. */\n    private static final String CONDITION = \"JS_Condition\";\n\n    /**\n     * Create a new LoopControlPanel as a standalone component.\n     */\n    public IfControllerPanel()   {\n        this(true);\n    }\n\n    /**\n     * Create a new LoopControlPanel as either a standalone or an embedded\n     * component.\n     *\n     * @param displayName  indicates whether or not this component should\n     *                     display its name.  If true, this is a standalone\n     *                     component.  If false, this component is intended\n     *                     to be used as a subpanel for another component.\n     */\n    public IfControllerPanel (boolean displayName)\n    {\n        this.displayName = displayName;\n        init();\n    }\n\n    /**\n     * A newly created component can be initialized with the contents of\n     * a Test Element object by calling this method.  The component is\n     * responsible for querying the Test Element object for the\n     * relevant information to display in its GUI.\n     *\n     * @param element the TestElement to configure\n     */\n    public void configure(TestElement element) {\n        super.configure(element);\n        if (element instanceof IfController) {\n            theCondition.setText(((IfController) element).getCondition());\n        }\n\n    }\n\n    /**\n     *  Implements JMeterGUIComponent.createTestElement()\n     */\n    public TestElement createTestElement() {\n            IfController controller = new IfController();\n        modifyTestElement(controller);\n        return controller;\n    }\n\n    /**\n     * Implements JMeterGUIComponent.modifyTestElement(TestElement)\n     */\n    public void modifyTestElement(TestElement controller) {\n        configureTestElement(controller);\n        if (controller instanceof IfController)\n        {\n            if (theCondition.getText().length() > 0) {\n                ((IfController)\ncontroller).setCondition(theCondition.getText());\n            } else {\n                ((IfController) controller).setCondition(\"\");\n            }\n        }\n    }\n\n    /**\n     * Invoked when an action occurs.  This implementation assumes that the\n     * target component is the infinite loops checkbox.\n     *\n     * @param event the event that has occurred\n     */\n    public void actionPerformed(ActionEvent event) {\n        new FocusRequester(theCondition);\n    }\n\n    /* Implements JMeterGUIComponent.getStaticLabel() */\n    public String getStaticLabel() {\n        return JMeterUtils.getResString(CONDITION_TITLE);\n    }\n\n    /**\n     * Initialize the GUI components and layout for this component.\n     */\n    private void init()\n    {\n        // Standalone\n        if (displayName) {\n            setLayout(new BorderLayout(0, 5));\n            setBorder(makeBorder());\n            add(makeTitlePanel(), BorderLayout.NORTH);\n\n            JPanel mainPanel = new JPanel(new BorderLayout());\n            mainPanel.add(createConditionPanel(), BorderLayout.NORTH);\n            add(mainPanel, BorderLayout.CENTER);\n\n        } else {\n            // Embedded\n            setLayout(new BorderLayout());\n            add(createConditionPanel(), BorderLayout.NORTH);\n        }\n    }\n\n\n\n\n\n    /**\n     * Create a GUI panel containing the components related to the number\nof\n     * loops which should be executed.\n     *\n     * @return a GUI panel containing the loop count components\n     */\n    private JPanel createConditionPanel()  {\n        JPanel conditionPanel = new JPanel(new BorderLayout(5, 0));\n\n        // Condition LABEL\n        JLabel conditionLabel =\n        new JLabel(JMeterUtils.getResString( CONDITION_LABEL ));\n        conditionPanel.add(conditionLabel, BorderLayout.WEST);\n\n        // TEXT FIELD\n        theCondition = new JTextField(\"\");\n        theCondition.setName(CONDITION);\n        conditionLabel.setLabelFor(theCondition);\n        conditionPanel.add(theCondition, BorderLayout.CENTER);\n        theCondition.addActionListener(this);\n\n        conditionPanel.add(\n            Box.createHorizontalStrut( conditionLabel.getPreferredSize\n().width\n            + theCondition.getPreferredSize().width)\n            , BorderLayout.NORTH);\n\n        return conditionPanel;\n    }\n}"}, {"count": 1, "text": "Code reformatted slightly; needs ASF licence ...", "bug_id": 22937, "attachment_id": null, "id": 43779, "time": "2003-09-05T23:22:36Z", "creator": "tjsb@slb.com", "creation_time": "2003-09-05T23:22:36Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 58835, "text": "When the container shutdowns , it commands directly to close all the sockets. It is a too much simply solution.\nYou might add a handler before to do it , i could make particolar things before to close sockets , for example sending a final message with particular informations.... (Business logic status)\nDevelopers would have the possibility to handle the shutdown phase. \nIn tomcat 9 , it closes abrubtly all the sockets, \nin tomcat 8 , it was better in this case , but when you are sending a message before to close a socket , it throws a exception because it dont flush the previous messages.\nThe solution for me is simply to flush messages enqueued before to close and add a callback onShutdown ....", "id": 187557, "time": "2016-01-12T01:48:05Z", "creator": "publicocean0@gmail.com", "creation_time": "2016-01-12T01:48:05Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 58835, "attachment_id": null, "id": 187626, "time": "2016-01-13T19:05:28Z", "creator": "markt@apache.org", "creation_time": "2016-01-13T19:05:28Z", "is_private": false, "text": "(In reply to Cristian from comment #0)\n> When the container shutdowns , it commands directly to close all the\n> sockets.\n\nNo it doesn't. It flushes any buffered WebSocket messages, sends a WebSocket close message and then closes the socket.\n\n> You might add a handler before to do it\n\nThe ServletAPI has provided the ServletContextListener since Servlet 2.3.\n\n> The solution for me is simply to flush messages enqueued before to close and\n> add a callback onShutdown ....\n\nWhich is exactly what is already implemented. I've added a unit test that confirms this."}]
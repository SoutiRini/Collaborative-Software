[{"count": 0, "tags": [], "bug_id": 40140, "attachment_id": null, "text": "Why: \n  At the moment the value of an attribute is always expanded \n  before it is passed to the element defining it (through setXXX). \n  On the other hand nested text is passed unexpanded to the\n  corresponding method (addText) and can be expanded explicitely\n  by the implementor of the task/type. Tha't the reason why scripts\n  can be passed as nested text without escaping the $ to $$ to\n  avoid expressions being misunderstood as Ant properties.\n  It would be nice to have the same possibility for attributes,\n  so that i.e. short script expressions can be defined in there,\n  too, without needing to escape them.\nProposed solution:\n  The solution, suggested by Jan Meterne months ago, \n  is to let task/types define an optional method called through\n  introspection, which returns the setXXX methods that receive\n  the unexpanded parameter.\nCompatibility:\n  This is backwars compatible as far as no task writer\n  out there already defined some method like\n    Method [] getUnexpandedAttrSetters()\n  returning an array containing some of it's setXXX methods.\n  Very, very unlikely :-).\n\nStefano Marsili\nwww.efanomars.net/pf", "id": 91722, "time": "2006-07-31T05:51:00Z", "creator": "efanomars@yahoo.com", "creation_time": "2006-07-31T05:51:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 40140, "attachment_id": 18663, "text": "Created attachment 18663\nPatch to pass unexpanded attributes to tasks\n\n** Sources **\nIntrospectionHelper.java:\n - added method unexpandedAttributes(Object bean)\n   returning the list of unexpanded attribute names\n\nRuntimeConfigurable.java:\n - changed maybeConfigure() to call replaceProperties()\n   only if attribute not in the list (or the list is null) \n\nProjectHelper.java:\n - same as RuntimeConfigurable.java\n  I also patched this file's configure() method even though it is\n  deprecated. My guess is that if there isn't a throw exception in it,\n  it might be called. Since I was there I also changed the way \n  replaceProperties is called (AFAIK it is needlessly cloning the \n  project's properties, but maybe there is a reason for that).\n\n** Tests **\nCustomTasksTest.java:\n  - just a quick superficial test to see whether it works.\n\n** Note **\nModified and patched against latest 1.70alpha.\n\nStefano Marsili", "id": 91723, "time": "2006-07-31T05:55:28Z", "creator": "efanomars@yahoo.com", "creation_time": "2006-07-31T05:55:28Z", "is_private": false}, {"count": 2, "tags": [], "creator": "ddevienne@gmail.com", "attachment_id": null, "text": "I would be very wary to introduce a way to have attributes which break the \ncurrent behavior of always expanding properties. This to me breaks \"the \nprinciple of least surprise\" \n(http://en.wikipedia.org/wiki/Principle_of_least_astonishment).\n\nUnless we can find a \"notation\" that clearly indicates to the user \nunambiguously that a string won't be expanded, I'd probably -1 unexpanded \nattributes. I doubt we can find an acceptable notation that doesn't break BC, \nand in any case one can always use $$ to prevent the expansion. --DD", "id": 91729, "time": "2006-07-31T12:56:56Z", "bug_id": 40140, "creation_time": "2006-07-31T12:56:56Z", "is_private": false}]
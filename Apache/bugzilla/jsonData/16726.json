[{"count": 0, "tags": [], "text": "External FilterReaders that are specified using <filterreader> never have their \nchain() method called, even if they impelement the ChainableReader interface.\n\nIt appears that using <filterchain> to load a filter reader creates an instance \nof AntFilterReader.  Unfortunately, ChainReaderHelper.getAssembledReader() \nforces re-instantiation of AntFilterReader's target filter reader's class each \ntime it is called.\n\nOne fix would be to have AntFilterReader cache the instantiated target filter \nreader instancce, if the target reader is an instance of ChainableReader, so \nthat its chain method could be called.", "is_private": false, "id": 30580, "creator": "didge@foundrylogic.com", "time": "2003-02-03T18:03:34Z", "bug_id": 16726, "creation_time": "2003-02-03T18:03:34Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 16726, "attachment_id": 4697, "text": "Created attachment 4697\nProposed patch", "id": 30581, "time": "2003-02-03T18:16:38Z", "creator": "umagesh@apache.org", "creation_time": "2003-02-03T18:16:38Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 16726, "text": "Didge,\nPlease see if the attached patch invokes the chain() method if the custom \nfilter reader implements ChainableReader.", "id": 30582, "attachment_id": null, "creator": "umagesh@apache.org", "creation_time": "2003-02-03T18:17:10Z", "time": "2003-02-03T18:17:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 16726, "text": "Looking at this again, I don't think the patch would provide a lot of value.\nLet me try to explain the way things currently work:\n\nwhen using the <filterreader> syntax (as all custom filterreaders would),\nit gets instantiated as an AntFilterReader.  If any nested <param> elements\nwere declared, these parameters would be constructed and set using the\nsetParameters method, assuming the custom filterreader implements \nParameterizable.  All this is performed by performing an implicit \"chain\" -\nwhen a new AntFilterReader instance is created, it is created using another\nFilterReader which is present before it in the chain:\n\nNew AntFilterReader = new instance of AntFilterReader(previous FilterReader \nin chain).\n\nThe above ensures an implicit \"chaining\".\n\nSo, what is the deal with ChainableReader?\nThose filterreaders that are provided out-of-the-box have a much more elegant\nstyle of defining nextes elements without having to use <param>s.  Therefore, \nfor these setters to be called we need a consistent mechanism to invoke the\nvarious setters.  We also need a mechanism by which the chain can be \nprogramatically controlled.  Hence, there is the chain(Reader) method.  This\nmethod is 'intended' to be used to create a new reader instance and invoke the\nsetters as appropriate.\n\nSo, going back to your original problem, the external filterreaders do get\nchained, though by not calling the chain() method explicitly.\n\nSo, what do you do to remedy your situation?\n\nInstead of having the chain method in VPPFilter, you may probably investigate\nmoving the logic to the initialize() method, if possible.", "id": 30586, "attachment_id": null, "creator": "umagesh@apache.org", "creation_time": "2003-02-03T18:49:18Z", "time": "2003-02-03T18:49:18Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 16726, "text": "Magesh,\n\nMy fundamental goal is to get a one time initialization per filterreader \nelement per chain.  For example, should for some silly reason, someone use the \nsame filterreader twice: \n  <filterchain>\n    <filterreader classname=\"X\"/>\n    <filterreader classname=\"X\"/>\n    <filterreader classname=\"Y\"/>\n  </filterchain>\n\nX should get initialized twice, because it appears twice and Y only once.  \nThereafter, new instances would be chain()ed and never re-initalize()d.\n\nNote that I'm not really to picky regarding how this gets accomplished.\n\nYour earier patch (thanks!) would not work because ChainReaderHelper would have \nalready instantiated and initialized the AntFilterReader's filterreader target \non each file processed.  Calling chain() after this just creates a new \ninstance, but doesn't solve the real problem: that ChainReaderHelper \ninstantiates and initialize()s each AntFilterReader's target everytime when, \nIMHO, it should only get called once, just as would occur for 'out of the box' \nfilterreaders.\n\nSo, regarding your final suggestion, all of my logic has always been in \ninitialize(), but this makes no difference, again, because external \nfilterreaders are always re-instantiated and re-initialized() every time \ngetAssembledReader() is called.\n\nThus, my suggestion for having AntFilterReader cache filterreaders that \nimplemente ChainableReaders to allow for a one time initialize() and subsequent \ncalls to chain().  All it would take is an extra field in AntFilterReader and \nfor ChainReaderHelper to ask AntFilterReader if it already has a \nChainableReader instance to chain().\n\nA snazzier way would be to have AntFilterReader implement ChainableReader.  It \nwould then delegate to its ChainableReader target or instantiate and initialize \nnon-ChainableReader targets, thus removing some of the complicated logic out of \nChainReaderHelper.", "count": 4, "id": 30589, "time": "2003-02-03T19:53:44Z", "creator": "didge@foundrylogic.com", "creation_time": "2003-02-03T19:53:44Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 16726, "attachment_id": null, "text": "I think this is solved in the meantime by using componentdef to create named filterreaders and having them work the same way as the built-in ones.\n\nI'm closing this as WONTFIX as it is extremely unlikely anybody is going to touch it after more than six years - and the problem can be solved in 1.7.x in a more elegant way.", "id": 130096, "time": "2009-09-01T02:09:24Z", "creator": "bodewig@apache.org", "creation_time": "2009-09-01T02:09:24Z", "is_private": false}]
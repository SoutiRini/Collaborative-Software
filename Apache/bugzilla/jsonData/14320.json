[{"count": 0, "tags": [], "creator": "ruvinsky@yahoo.com", "attachment_id": null, "id": 25834, "time": "2002-11-06T23:45:05Z", "bug_id": 14320, "creation_time": "2002-11-06T23:45:05Z", "is_private": false, "text": "When I copy a fileset that has followsymlink=\"false\" any symlinks encountered \nin the fileset get excluded.  This seems like the wrong behavior, as I would \nexpect the symlink to get copied as-is (in its symlink form) -- e.g., \nemulating \"cp -a\"."}, {"count": 1, "tags": [], "bug_id": 14320, "attachment_id": null, "id": 25839, "time": "2002-11-07T04:00:52Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-11-07T04:00:52Z", "is_private": false, "text": "I presume OS should be set to one of the *NIX's? Please change it to your \nplatform?\n\nThe reason for this behavior is that Java doesn't really have a concept of \nSymlinks. The key reason for followSymlinks was in reference to bug 1550 where \nthe problem was that delete tended to go places it shouldn't without this \natribute. \n\nThere is no way to find out exactly what a link is. Symlinks are a unix \nspecific OS feature, so because Java is supposed to be relatively platform \nindependant, no means for this is provided. \n\nWhat can be done (in things like my recently submitted symlink task) is a \ncareful comparison involving the difference between getAbsolutePath() and \ngetCannonicalPath. This gives you ONE possible definition of a link to the \nresource in question. It does NOT give you the exact link that exists on the \nfilesystem. What you get is an absolute version of the link. \n\nYou can find detailed discussion in bug 1550.\n\nAny relative links such as one in /home/gus/somedir\n\nfoo->../bar.txt \n\nwill get converted to \n\nfoo->/home/gus/somedir/bar.txt\n\nby this method. So even if Ant tries to implement some form of link copying, \nit will completely mangle any relative links. I suspect you wouldn't be \nsatisfied with this?\n\nIf you are willing to write a platform dependant build file, you can use the \nApply task with the executable set to cp and passing an argument of -a to \nacheive an exact duplication of the \"cp -a\" behavior :).\n\nIf you want platform independance, you probably have to sacrifice platform \nspecific features like symlinks."}, {"count": 2, "tags": [], "bug_id": 14320, "attachment_id": null, "text": "oops messed up my example. \n\nfoo->../bar.txt\n\nwould get converted to\n\nfoo->/home/gus/bar.txt\n\nThe point is still the same however.", "id": 25840, "time": "2002-11-07T04:03:07Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-11-07T04:03:07Z", "is_private": false}, {"count": 3, "tags": [], "creator": "ruvinsky@yahoo.com", "text": "Hi Gus, thanks for the prompt response.  Yes, I was afraid of that.  To work \naround this issue, I have my ant script invoke \"make\" in a subproject that \ntakes care of doing the OS-specific functionality (creates the symlink in the \nbuild directory).\n\nYou guessed it -- my symlink is relative, and I'd like it to stay that way \nafter a build.\n\nThe reason why I thought this was a bug is because it didn't seem like the \nexpected behavior (since it wasn't documented as such) when \nfollowsymlinks=\"false\".  I wouldn't expect it to exclude all symlinks as a \nconsequence.\n\nNeedlesstosay, although symlinks are not platform-independent, one can argue \nthat since there are useful core ant tasks such as \"Chmod\" that only take \neffect under Unix, supporting symlinks as an *option* (e.g., when copying) \nshould be strongly considered.\n\nThoughts?", "id": 25841, "time": "2002-11-07T06:00:42Z", "bug_id": 14320, "creation_time": "2002-11-07T06:00:42Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "gus.heck@olin.edu", "attachment_id": null, "id": 25872, "time": "2002-11-07T15:57:09Z", "bug_id": 14320, "creation_time": "2002-11-07T15:57:09Z", "is_private": false, "text": "Hehe you don't need to sell me on the value of platform specific tasks. I wrote\nthe Symlink task (committed to 1.6 alpha yesterday) and have also written a\nchgrp and chown which should get commited soon. I might at some point work on\nsymlink support within the copy task, but first I intend to expand my symlink\ntask so that the user can provide information that answers the question\n\"relative to what directory?\", and get a relative link.\n\nYou do make a reasonable point about clarifying the effects of followSymlinks. \nin retrospect a slightly better name might have been ignoreSymlinks (with\noposite atribute values of course), but the perspective at the time was that of\ndelete task rampaging through unintended sections of the file system.\n\nTo take another perspective, FileSets are collections of files, and symlinks\nreally arn't the same as files, so the current behavior is not inconsistant with\nthat idea. The problem comes in that people tend to think of anything in te\nfilesystem as a file. (which is a very nice way to think when it works). I am\nalso given to wonder what java (and therefore ant) does if it selects a named\npipe, or other funky unix fs object."}, {"count": 5, "tags": [], "creator": "ruvinsky@yahoo.com", "text": "Glad to hear you're working on support for symlinks in 1.6.\n\nI understand the reasoning for adding in \"followsymlinks\" because of the file \ndeletion operation.  It's not clear as to whether or not symlinks should \ndefinitely be treated as files.  I'd suggest that both filesets and dirsets can \nbe aware of symlinks and can offer the same kinds of symlink options when file \noperations are performed on them.\n\nI also agree about renaming \"followSymlinks\" to \"ignoreSymlinks\" \n(or \"excludeSymlinks\") and swapping its boolean value semantics (and default \nvalue).", "id": 25879, "time": "2002-11-07T17:58:40Z", "bug_id": 14320, "creation_time": "2002-11-07T17:58:40Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 14320, "text": "Well, followsymlinks is already in a released stable version, so it won't get\nrenamed. That would break existing build files which is bad bad bad. \n\nAs for making FileSet and DirSet \"aware\" of symlinks, I am not sure what you\nmean, but I presume it is something like storing the link name and the name of\nthe resource referenced such that it can be reproduced. If you think carefully\nabout what I have said here, you will realize that this would not be very\nsucessful due to the absolutization (is that a word?) problems. Even if it could\nbe done that would add a lot of checks for which OS, and a fair bit of overhead\non supported OS's to the most used part of ant. I am not sure it would be worth\nthe performance cost (for most users).\n\nThis now looks like an enhancement request to me, do you agree?", "count": 6, "id": 25884, "time": "2002-11-07T19:11:49Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-11-07T19:11:49Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 14320, "attachment_id": null, "id": 30742, "time": "2003-02-05T13:25:33Z", "creator": "conor@apache.org", "creation_time": "2003-02-05T13:25:33Z", "is_private": false, "text": "So, what next is required on this? Changing to enhancement as suggested in the\nlast message."}, {"count": 8, "tags": [], "creator": "gus.heck@olin.edu", "text": "I can imagine that one could add an atribute that caused an OS check and if we\nit is a *nix set a flag that caused copy to use FileUtils.isSymbolicLink to\nidentify symlinks. ymlinks could then be reproduced in either absolute form or\nminimum relative form or not reproduced in the destination directory based on an\natribute such as copySymlinksAs=\"none\"|\"absolute\"|\"minRelative\"\n\nI don't know how much time I can put into it, but I'd be willing to try that if\nit sounds like a good idea to anyone else.", "id": 30753, "time": "2003-02-05T15:40:27Z", "bug_id": 14320, "creation_time": "2003-02-05T15:40:27Z", "is_private": false, "attachment_id": null}]
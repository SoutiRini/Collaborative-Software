[{"count": 0, "tags": [], "text": "hello, i have been working on this project and wanted to execute FOP from my \njava application and it stalls when it is executed.\n\nit only works when i...\n1.) \nexecute it like this:\nRuntime.getRuntime().exec(\"java -cp jars\" +File.separator+ \"fop.jar;jars\" \n+File.separator+ \"batik.jar;jars\" +File.separator+ \"xalan.jar;jars\" \n+File.separator+ \"xerces.jar org.apache.fop.apps.Fop temp\" \n+File.separator+ \"make_pdf.fo \" +target_file.getText());\nand after having a piriode of time in between where it does nothing.\nit takes up to ten times as long as when it is executed by the batchfile\nand it works perfectly from a batchfile\n2.)\nexecute it like this:\nRuntime.getRuntime().exec(\"java -cp jars\" +File.separator+ \"fop.jar;jars\" \n+File.separator+ \"batik.jar;jars\" +File.separator+ \"xalan.jar;jars\" \n+File.separator+ \"xerces.jar org.apache.fop.apps.Fop temp\" \n+File.separator+ \"make_pdf.fo \" +target_file.getText()).waitFor();\nand i close the window and with it the main programm and then all of a sudden \nit finishes and i get the pdf\n\neither one is not very fine.\ni need waitFor() with it and i cannot close the programm\ni doubt that it lies within my programm because it is just one of many runtimes \nand it is the only one that doesn't work", "attachment_id": null, "bug_id": 6395, "id": 10581, "time": "2002-02-12T14:32:02Z", "creator": "a.jewall@web.de", "creation_time": "2002-02-12T14:32:02Z", "is_private": false}, {"count": 1, "tags": [], "creator": "arnd.beissner@t-online.de", "attachment_id": null, "text": "I may have some related information on this:\n\nWhen FOP is activated using the static main method, FOP always terminates \nexecution by calling System.exit(x) - even when everything is ok. I suppose \nthis is what causes the problem with exec().\n", "id": 10585, "time": "2002-02-12T14:56:42Z", "bug_id": 6395, "creation_time": "2002-02-12T14:56:42Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 6395, "is_private": false, "id": 10587, "time": "2002-02-12T15:12:43Z", "creator": "a.jewall@web.de", "creation_time": "2002-02-12T15:12:43Z", "tags": [], "text": "my i mention once again, FOP stalls all of a sudden in the middle of the \ndocument it is trying to create.\nboth programms are still in memory and uses around 33MB and when it sometimes \nfinishes it grows up to 66MB. none of the programms are terminated.\ndoes someone have a workaround how you could implement this into a java \napplication? "}, {"count": 3, "tags": [], "bug_id": 6395, "is_private": false, "text": "The reason is probably that the stderr (or stdout) buffer is full. FOP\nwrites by default quite a few logging messages. You'll have to read them\nor otherwise discard them. If the buffer is full,FOP hangs in an attempt\nto write some log output. If the invoking java application is closed, so\nare the file handles piping stderr and stdout output, and FOP resumes work.\n\nIt is recommended not to use exec() for executing FOP, look at the guidelines\nhow to embed FOP directly into your Java application.", "id": 14309, "time": "2002-04-22T12:02:33Z", "creator": "j3322ptm@yahoo.de", "creation_time": "2002-04-22T12:02:33Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "attachment_id": null, "id": 156848, "creator": "gadams@apache.org", "time": "2012-04-01T13:53:51Z", "bug_id": 6395, "creation_time": "2012-04-01T13:53:51Z", "is_private": false}]
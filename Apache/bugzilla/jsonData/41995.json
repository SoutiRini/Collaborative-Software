[{"count": 0, "tags": [], "text": "The attached patch provides barcode support for the AFP Renderer, defining the\nbarcode using BCOCA (Bar Code Object Content Architecture) within \n\nthe AFP datastream. The patch uses a specific BCOCA extension, although this\ncould easily be change to a generic extension to barcodes in \n\ndifferent output formats. The extension nanespace is\nxmlns:bcoca=\"http://xmlgraphics.apache.org/fop/extensions/afp/bcoca\"\n\nI have created a seperate package org.apache.fop.barcode which contains the code\nfor the barcode configuration and dimension calculations, this is \n\nbased largely on the excellent Barcode4J code by Jeremias Maerki, except that I\nhave removed the aspects not required for AFP such as the \n\ngeneration of the barcode. So far I have only implemented Code39, PDF417 and\nPOSTNET. Ideally this needs to be re-organized to provide generic \n\nbarcode support, although this would require closer integration with Barcode4J.\nThis package does not contain any AFP specifics and these are \n\nhandled in the bcoca packages.\n\nTwo files are attached, the patch file and a seperate zip containing the new files.\n\nRgds, Pete Townsend", "attachment_id": null, "id": 101227, "creator": "pete.townsend@landg.com", "time": "2007-03-30T08:06:32Z", "bug_id": 41995, "creation_time": "2007-03-30T08:06:32Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 41995, "attachment_id": 19849, "id": 101228, "time": "2007-03-30T08:10:06Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-03-30T08:10:06Z", "is_private": false, "text": "Created attachment 19849\nAFP Barcode Patch"}, {"count": 2, "tags": [], "bug_id": 41995, "attachment_id": 19850, "id": 101229, "time": "2007-03-30T08:11:11Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-03-30T08:11:11Z", "is_private": false, "text": "Created attachment 19850\nNew files associated to the patch"}, {"count": 3, "tags": [], "text": "Pete, I took a look at your patch. I must say, I'm not happy with the approach\nyou've taken. You've copied many classes from Barcode4J, adjusted some of them\nand put them in a new package under the FOP source tree. This is a maintenance\nnightmare and the legal paperwork also needs to be considered.\n\nThat aside, I'm not comfortable with the bcoca package having a dependency into\nthe classes coming from Barcode4J. From an architecture perspective, it would be\nmuch cleaner to simply provide the object model of the BCOCA functionality in\nthe bcoca package and then fill that from the Barcode extension. Like we do it\nfor formats like PDF, PostScript and RTF, I'd prefer to keep that pattern,\nbecause that makes it possible to use the AFP code outside the FOP context, too.\nUntil now, that pattern was preserved. The package o.a.fop.render.afp.modca had\nonly dependencies into:\n- o.a.fop.render.afp.exceptions\n- o.a.fop.render.afp.fonts\n- o.a.fop.render.afp.tools\n- o.a.commons.logging\n\nWith your patch, o.a.fop.render.afp.bcoca and the forked Barcode4J classes are\nadded. Ideally, the modca package wouldn't even have a dependency into bcoca.\nRight now, there's a circular dependency in your patch.\n\nI have a proposal: Let's reuse (and adapt if necessary) Barcode4J and build a\ncleaner dependency tree. Let's rid the bcoca package of references to Barcode4J\nclasses and only concentrate on the object model there. In a second step, let's\nextend the FOP extension in Barcode4J to support native AFP barcodes. It's more\nor less what I saw as the ideal solution in the first place but since you\nintroduced so many aspects from Barcode4J I think this is the right solution.\nI can offer you some help with that. I've already locally removed all the forked\nclasses and started to correct the remaining issues. I would be comfortable with\njust applying the part of the patch with the BCOCA object model after I've done\nsome changes. We can then go from there.\n\nPlease note that we once talked about bundling Barcode4J with FOP. We could take\nthis as an additional incentive to actually do it.\n\nWDYT?", "is_private": false, "bug_id": 41995, "id": 101419, "time": "2007-04-04T06:57:35Z", "creator": "jeremias@apache.org", "creation_time": "2007-04-04T06:57:35Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "BTW, further advantages with my proposal:\n- Less documentation overhead\n- Same namespace as Barcode4J already uses (no special handling for AFP)\n- Optimal rendering (native or Java2D) depending on what's already implemented.\n\nDisadvantages:\n- we cannot just use your patch, more development necessary\n- we need to make sure that the FOP extension works with 0.93 until the next\nrelease of FOP.", "attachment_id": null, "id": 101421, "creator": "jeremias@apache.org", "time": "2007-04-04T07:06:56Z", "bug_id": 41995, "creation_time": "2007-04-04T07:06:56Z", "is_private": false}, {"count": 5, "tags": [], "text": "Jeremias, I should have made it clearer I never really expected the patch to be\napplied as it stands for the reason that it relies on forked bc4j code. \n\nI submitted the patch in the hope that it would prompt this discussion, when\nwriting it I obviously had the issue of calculating the barcode dimensions which\nis exactly what Barcode4J does very well, so didn't want to re-solve that problem.\n\nMy intention was not that that FOP would have a seperate set of barcode4j\nclasses as I agree it would be a mainatenance nightmare. This is why I put in\nthe barcode4j a seperate package, so that it could be reviewed as part of the\npatch and you could decide the best way to achieve this with your Barcode4j hat on.\n\nI'd like to see fop include barcode4j, but obviously it also stands on it's own\nfor users who want to generate images. I am more than happy with your proposal\nand we can take it forward once you've finished the package refactor.\n\nHowever I think some kind of bridging pattern would be required so that the\nBCOCA attributes (to get the afp barcode type and modifier) can be obtained\nbased on the barcode being rendered.\n\n(In reply to comment #4)\n> BTW, further advantages with my proposal:\n> - Less documentation overhead\n> - Same namespace as Barcode4J already uses (no special handling for AFP)\n> - Optimal rendering (native or Java2D) depending on what's already implemented.\n> \n> Disadvantages:\n> - we cannot just use your patch, more development necessary\n> - we need to make sure that the FOP extension works with 0.93 until the next\n> release of FOP.\n\n", "attachment_id": null, "bug_id": 41995, "id": 101422, "time": "2007-04-04T07:50:49Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-04-04T07:50:49Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jeremias@apache.org", "text": "Great! I feared we were too far apart on this, but apparently not. I'll see what\nI can do today. It looks like AbstractBarcodeBean is tied more deeply into the\nbcoca package than I first thought. How much time do you have to work on this? I\nmean, if I can defer some of the work to you, I'd be more than happy. That would\nallow me to concentrate on other FOP issues.", "id": 101425, "time": "2007-04-04T08:13:26Z", "bug_id": 41995, "creation_time": "2007-04-04T08:13:26Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "(In reply to comment #6)\nI have limited time this week, but could progress further next week. However I'd\nlike to agree an approach, the AbstractBarcodeBean is basically tied deeply as\nthe bcoca model requires access to these attributes. \n\nI'd suggest that I make this an interface, and then the barcode4j ext can\nprovide a wrapper that implements that interface if using native support that\njust delegates to the real bean. \n\nRather than make this interface AFP specific this could go in a barcode package\nso that any other renderers that are capable of native barcode support could use\nthe same mechanism.\n\nThis shouldn't take to long to do, WDYT?\n\n\n\n> Great! I feared we were too far apart on this, but apparently not. I'll see what\n> I can do today. It looks like AbstractBarcodeBean is tied more deeply into the\n> bcoca package than I first thought. How much time do you have to work on this? I\n> mean, if I can defer some of the work to you, I'd be more than happy. That would\n> allow me to concentrate on other FOP issues.\n\n", "is_private": false, "bug_id": 41995, "id": 101426, "time": "2007-04-04T08:34:27Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-04-04T08:34:27Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "I'm not sure if it's worthwhile creating such an interface. After all, it has to\nmap on all possible symbologies. On one side you have to map onto the\nconfigurable beans and on the other side it has to map into the object model for\nAFP. So the interface would be something like the superset of all barcode\nimplementation beans in Barcode4J.\n\nI guess the one thing that needs to be done are accessors for all the different\nvalues for the BCOCA object model. So rather than the BCOCA model requires\naccess to data, let's set the data on the object model.\n\nBTW, you've created a class BarcodeDataDescriptor (BDA). Shouldn't that be\nBarcodeSymbolDescriptor (BSD)? At least that's what it's called in my BCOCA\nmanual (S544-3766-06). OTOH, I still have to learn a few things about AFP. Maybe\nI got it wrong.\n\nAnyway, in the time I had left today I haven't been able to get to a\nrepresentable state. Maybe I'll do some more on Friday (depending on the weather).", "is_private": false, "bug_id": 41995, "id": 101433, "time": "2007-04-04T11:37:23Z", "creator": "jeremias@apache.org", "creation_time": "2007-04-04T11:37:23Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 41995, "attachment_id": null, "id": 101449, "time": "2007-04-05T01:28:32Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-04-05T01:28:32Z", "is_private": false, "text": "The BDD specifies the size of the bar code presentation space, the type of bar\ncode to be generated, and the parameters used to generate the bar code symbols.\n\nThe data portion of the BDD structured field is defined in Bar Code Symbol\nDescriptor (BSD), I didn't see much benefit in havng this in a seperate BSD\nobject. See page 112 of the BCOCA Reference manual.\n\nI'm not sure that setters on the BCOCA model are a ideal solution. I think we'd\nstill need BCOCA objects representing the different barcodes and for these to\nhave the setters. This then starts to replicate the beans in barcode4j, hence\nthe interface suggestion.\n\nFor example the PDF417 barcode requires a special functions in the BarcodeData\nobject to set the error correction level and number of columns.\n\nLet me know how you get on and if you want me to pick anything up.\n\n"}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> Let me know how you get on and if you want me to pick anything up.\n\nEarlier I said it depended on the weather. In the end, it was my computer that\nmade sure I take 4 days off: The power supply of the big box said goodbye after\n5 minutes on Friday morning with a loud bang. I have to get a replacement part\nfirst before I can access what little work I've started so far. And that'll take\na few days. It's probably best if you just continue the way you outlined it.", "attachment_id": null, "id": 101525, "creator": "jeremias@apache.org", "time": "2007-04-09T01:46:18Z", "bug_id": 41995, "creation_time": "2007-04-09T01:46:18Z", "is_private": false}, {"count": 11, "tags": [], "creator": "pete.townsend@landg.com", "text": "Created attachment 19929\nRefactored afp barcode patch\n\nThis has been refactored to remove the dependency on barcode4j, it requires a\nBarcodeSymbology object to be created, and therefore in order for barcode4j to\ngenerate native BCOCA it will need to map to the appropriate object and set the\nattributes accordingly. \n\nIt might be worth including an afp extension that can generate BCOCA and perhap\nallow the user to specify the presentation space. This would mean that it could\nbe used without calculating dimensions as per barcode4j.\n\nThe next step I guess is to get the barcode4j extension to support this native\ninterface.", "id": 101578, "time": "2007-04-11T08:01:55Z", "bug_id": 41995, "creation_time": "2007-04-11T08:01:55Z", "is_private": false, "attachment_id": 19929}, {"count": 12, "tags": [], "bug_id": 41995, "attachment_id": 19930, "is_private": false, "id": 101579, "time": "2007-04-11T08:02:52Z", "creator": "pete.townsend@landg.com", "creation_time": "2007-04-11T08:02:52Z", "text": "Created attachment 19930\nZip file included with the new files"}, {"count": 13, "tags": [], "creator": "pete.townsend@landg.com", "text": "Created attachment 19947\nFix to change setters from int to double\n\nFix to change setters from int to double", "id": 101655, "time": "2007-04-13T05:02:50Z", "bug_id": 41995, "creation_time": "2007-04-13T05:02:50Z", "is_private": false, "attachment_id": 19947}, {"count": 14, "tags": [], "bug_id": 41995, "attachment_id": null, "id": 157589, "time": "2012-04-07T01:44:58Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:44:58Z", "is_private": false, "text": "resetting P2 open bugs to P3 pending further review"}, {"count": 15, "tags": [], "text": "increase priority for bugs with a patch", "attachment_id": null, "id": 157869, "creator": "gadams@apache.org", "time": "2012-04-11T03:21:49Z", "bug_id": 41995, "creation_time": "2012-04-11T03:21:49Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "creator": "jamey@jamescourtney.net", "is_private": false, "count": 0, "id": 91829, "time": "2006-08-02T18:00:29Z", "bug_id": 40170, "creation_time": "2006-08-02T18:00:29Z", "text": "I'm pretty regularly seeing the following error in my embedded Tomcat\n(5.0.28) connector.  It appears to occur as a result of one thread entering \nthe ResourceCache.lookup(String name) method and getting the index of an \nelement in the cache using the find method.  Before this thread can access the \nelement at that index the cache array is modified by a second thread and the \nindex is now outside the bounds of the array.\nA basic race condition.\n\n2005-11-28 15:09:01: ERROR An exception or error occurred in the container \nduring the request processing\njava.lang.ArrayIndexOutOfBoundsException: 4868\n        at\norg.apache.naming.resources.ResourceCache.lookup(ResourceCache.java:288)\n        at\norg.apache.naming.resources.ProxyDirContext.cacheLookup(ProxyDirContext.\njava:1393)\n        at\norg.apache.naming.resources.ProxyDirContext.lookup(ProxyDirContext.java:\n279)\n        at\norg.apache.tomcat.util.http.mapper.Mapper.internalMapWrapper(Mapper.java\n:775)\n        at\norg.apache.tomcat.util.http.mapper.Mapper.internalMap(Mapper.java:621)\n        at\norg.apache.tomcat.util.http.mapper.Mapper.map(Mapper.java:511)\n        at\norg.apache.coyote.tomcat5.CoyoteAdapter.postParseRequest(CoyoteAdapter.j\nava:279)\n        at\norg.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:158)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:79\n9)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processC\nonnection(Http11Protocol.java:705)\n        at\norg.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:57\n7)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool\n.java:683)\n        at java.lang.Thread.run(Thread.java:534)"}, {"count": 1, "tags": [], "text": "I've noticed that I can configure my Context\n(StandardContext) to increase the max cache size (cacheMaxSize parameter) \nwhich seems to help quite a bit with this problem.  Is this the recommended \nsolution or should a code change also be considered to alleviate this \nproblem?  I would suggest that the ResourceCache.lookup method should create a \nreference to the current cache which it should use rather than working on the \nglobal cache reference which may change.  Something like this:\n\n/* current code, ResourceCache.java line 286 */ CacheEntry cacheEntry = \nnull; ...\nint pos = find(cache, name);\n/* ArrayIndexOutOfBoundsException occurs when backing array modified between \nthese lines */ if ((pos != -1) && (name.equals(cache[pos].name))) {\n    cacheEntry = cache[pos];\n}\n\n/* new code */\nCacheEntry cacheEntry = null;\nCacheEntry[] currentCache = cache;\n...\nint pos = find(currentCache, name);\nif ((pos != -1) && (name.equals(currentCache[pos].name))) {\n    cacheEntry = currentCache[pos];\n}\n\n", "is_private": false, "bug_id": 40170, "id": 91830, "time": "2006-08-02T18:00:59Z", "creator": "jamey@jamescourtney.net", "creation_time": "2006-08-02T18:00:59Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "I've also been able to reproduce the problem on a standard Tomcat 5.0.28  \nserver using a simple client written in Java.  The client source is attached.\n\nThe only configuration change to the stock tomcat is to set the \"cacheMaxSize\" \nparameter for the root Context to \"1\" (1 Kb.).  This can be done by creating a \n$CATALINA_HOME/conf/Catalina/localhost/ROOT.xml Context file which contains \nthe following:\n\n<Context path=\"\" docBase=\"${catalina.home}/webapps/ROOT\"\n        debug=\"10\" privileged=\"false\" cacheMaxSize=\"1\">\n</Context>\n\nNext, create a subdirectory of the root webapp like \n$CATALINA_HOME/webapps/ROOT/foo.\n\nThen, compile and execute the attached SimpleClient.java:\n\njavac SimpleClient.java (no dependencies, just standard JDK)\njava \nSimpleClient \"$CATALINA_HOME/webapps/ROOT/foo\" \"http://localhost:8080/foo\" 200\n\nThis will cause 200 client threads to each write a simple static xml file to \nthe local files system in the \n$CATALINA_HOME/webapps/ROOT/foo directory.  The clients will then attempt to \nrepeatedly access their file via the \nhttp://localhost:8080/foo/<client_file_name> URL.\n\nThe ArrayIndexOutOfBoundsException should follow shortly.", "is_private": false, "bug_id": 40170, "id": 91831, "time": "2006-08-02T18:06:57Z", "creator": "jamey@jamescourtney.net", "creation_time": "2006-08-02T18:06:57Z", "attachment_id": null}, {"attachment_id": 18672, "tags": [], "creator": "jamey@jamescourtney.net", "is_private": false, "count": 3, "id": 91832, "time": "2006-08-02T18:08:01Z", "bug_id": 40170, "creation_time": "2006-08-02T18:08:01Z", "text": "Created attachment 18672\nA simple HTTP client for creating and repeatedly requesting static content from a local web server."}, {"count": 4, "tags": [], "bug_id": 40170, "is_private": false, "text": "Remy Maucherat already applied this fix to the Tomcat 6.0.x code base:\n\n\n\nAuthor: remm\nDate: Tue Aug  1 17:39:28 2006\nNew Revision: 427821\n\nURL: http://svn.apache.org/viewvc?rev=427821&view=rev\nLog:\n- Use a single reference to the cache during lookup (the cache array could be \nconcurrently replaced).\n\nModified:\n    tomcat/tc6.0.x/trunk/java/org/apache/naming/resources/ResourceCache.java\n\nModified: \ntomcat/tc6.0.x/trunk/java/org/apache/naming/resources/ResourceCache.java\nURL: \nhttp://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/naming/resour\nces/ResourceCache.java?rev=427821&r1=427820&r2=427821&view=diff\n==============================================================================\n--- tomcat/tc6.0.x/trunk/java/org/apache/naming/resources/ResourceCache.java \n(original)\n+++ tomcat/tc6.0.x/trunk/java/org/apache/naming/resources/ResourceCache.\n+++ java Tue Aug  1 17:39:28 2006\n@@ -289,10 +289,11 @@\n     public CacheEntry lookup(String name) {\n \n         CacheEntry cacheEntry = null;\n+        CacheEntry[] currentCache = cache;\n         accessCount++;\n-        int pos = find(cache, name);\n-        if ((pos != -1) && (name.equals(cache[pos].name))) {\n-            cacheEntry = cache[pos];\n+        int pos = find(currentCache, name);\n+        if ((pos != -1) && (name.equals(currentCache[pos].name))) {\n+            cacheEntry = currentCache[pos];\n         }\n         if (cacheEntry == null) {\n             try {\n\n", "id": 91833, "time": "2006-08-02T18:10:38Z", "creator": "jamey@jamescourtney.net", "creation_time": "2006-08-02T18:10:38Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "fhanik@apache.org", "is_private": false, "count": 5, "id": 92548, "time": "2006-08-25T17:28:36Z", "bug_id": 40170, "creation_time": "2006-08-25T17:28:36Z", "text": "Fixed in 5.5 as well as 6.0"}, {"count": 6, "tags": [], "bug_id": 40170, "is_private": false, "text": "Any plans to fix the 5.0.x codebase or did Filip mean 5.5 and 5.0?\n\nMany thanks!", "id": 92554, "time": "2006-08-25T22:39:11Z", "creator": "jamey@jamescourtney.net", "creation_time": "2006-08-25T22:39:11Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "fhanik@apache.org", "is_private": false, "count": 7, "id": 92627, "time": "2006-08-28T14:43:02Z", "bug_id": 40170, "creation_time": "2006-08-28T14:43:02Z", "text": "Fixed in 5.0 as well."}]
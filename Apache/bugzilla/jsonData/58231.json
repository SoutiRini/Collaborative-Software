[{"count": 0, "tags": [], "creator": "rainer-apache@7val.com", "attachment_id": null, "is_private": false, "id": 184470, "time": "2015-08-11T11:59:39Z", "bug_id": 58231, "creation_time": "2015-08-11T11:59:39Z", "text": "A RewriteCond that evaluates %{HTTP_HOST} automatically adds \"Host\" to the Vary-Header. This is unnecessary and not permitted according to https://tools.ietf.org/html/rfc7231#section-7.1.4\n\n> The \"Vary\" header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence the origin server's process for selecting and representing this response.\n\nThe RewriteRule that triggered the Vary: Host for me is below, however, I'm certain simpler examples can be constructed:\n\nRewriteCond expr \"%{HTTP_REFERER} =~ m#^https?://([^/:]+)# && %{HTTP_HOST}.':' -strmatch '$1:*'\"\nRewriteRule ^ - [env=FOO:bar]\n\n> GET /foo/lenna/ HTTP/1.1\n> User-Agent: curl/7.38.0\n> Host: pahuanuiapitaaitera.office.sevenval.de:14020\n> Accept: */*\n> Referer: http://$1/\n> \n< HTTP/1.1 200 OK\n< Date: Tue, 11 Aug 2015 11:58:01 GMT\n< Server: Apache\n< Vary: User-Agent,Referer,Host,Accept-Encoding\n[,...]"}, {"count": 1, "tags": [], "bug_id": 58231, "is_private": false, "text": "This still happens in 2.4.20, is there a fix or proposed fix?", "id": 200851, "time": "2017-09-13T18:42:59Z", "creator": "bluespire@gmail.com", "creation_time": "2017-09-13T18:42:59Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 200865, "time": "2017-09-14T09:34:59Z", "creator": "rainer-apache@7val.com", "creation_time": "2017-09-14T09:34:59Z", "text": "Simplified Reproducer:\n\n    RewriteCond %{HTTP_HOST} !whatever\n    RewriteRule ^/a /b"}, {"count": 3, "tags": [], "bug_id": 58231, "attachment_id": null, "text": "(In reply to Rainer Canavan from comment #0)\n> A RewriteCond that evaluates %{HTTP_HOST} automatically adds \"Host\" to the\n> Vary-Header. This is unnecessary and not permitted according to\n> https://tools.ietf.org/html/rfc7231#section-7.1.4\n\n\nCan you quote the \"not permitted\" part? Is there any practical harm in\nyour scenario?", "id": 200869, "time": "2017-09-14T11:39:34Z", "creator": "covener@gmail.com", "creation_time": "2017-09-14T11:39:34Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 200878, "time": "2017-09-15T08:52:26Z", "creator": "rainer-apache@7val.com", "creation_time": "2017-09-15T08:52:26Z", "text": "> Can you quote the \"not permitted\" part? \n\nI would interpret the very first sentence as implying that the host header is at least not expected to be listed in Vary:\n\n> The \"Vary\" header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence [...]\n\n\n> Is there any practical harm in your scenario?\n\nIt's been a while, so I can't recall the details, but we've encountered at least one proxy or client that refused to cache responses if \"Host\" was listen in the Vary Header."}, {"count": 5, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 200879, "time": "2017-09-15T08:54:22Z", "creator": "rainer-apache@7val.com", "creation_time": "2017-09-15T08:54:22Z", "text": "I've also tested this with 2.4.27 and it also adds \"Host\" to the Vary Header."}, {"count": 6, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "id": 200896, "time": "2017-09-16T11:25:38Z", "bug_id": 58231, "creation_time": "2017-09-16T11:25:38Z", "is_private": false, "text": "From mod_rewrite.c in httpd-trunk I can see the following:\n\n/*\n * lookup a HTTP header and set VARY note\n */\nstatic const char *lookup_header(const char *name, rewrite_ctx *ctx)\n{\n    const char *val = apr_table_get(ctx->r->headers_in, name);\n\n    if (val) {\n        ctx->vary_this = ctx->vary_this\n                         ? apr_pstrcat(ctx->r->pool, ctx->vary_this, \", \",\n                                       name, NULL)\n                         : apr_pstrdup(ctx->r->pool, name);\n    }\n\n    return val;\n}\n\n\nSo it seems to be done on purpose but I didn't find anything useful in the svn commit log. Will spend a bit of time during the next days and report if I find anything useful."}, {"count": 7, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "id": 200926, "time": "2017-09-18T08:00:28Z", "bug_id": 58231, "creation_time": "2017-09-18T08:00:28Z", "is_private": false, "text": "I found the following example as proof of issues originated from the Vary: Host:\n\nhttp://www.nivas.hr/blog/2017/02/13/apache-sending-vary-host-making-things-uncacheable-varnish/\n\nI still haven't been able to get a response with Vary:Host using mod_rewrite (although I can see from the code that it explicitly set if when it finds it in a RewriteCond, so probably I am doing something wrong in my config) but I found another way to get it:\n\n  <If '%{HTTP_HOST} -eq \"bla\"'> [..] </If>\n\nIt makes sense since I can see a add_vary function in util_expr_eval.c. As far as I understand the RFC explicitly prohibits the Vary: Host header, so it should be prevented in out codebase. \n\nAny opinion?"}, {"count": 8, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 200930, "time": "2017-09-18T13:11:36Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-18T13:11:36Z", "text": "The following seems to remove the Vary: Host header combination from mod_rewrite and <If> expression evaluation:\n\nIndex: modules/mappers/mod_rewrite.c\n===================================================================\n--- modules/mappers/mod_rewrite.c\t(revision 1808672)\n+++ modules/mappers/mod_rewrite.c\t(working copy)\n@@ -2035,7 +2035,10 @@\n\n             case 'S':\n                 if (!strcmp(var, \"HTTP_HOST\")) {\n-                    result = lookup_header(\"Host\", ctx);\n+                    /* Skip the 'Vary: Host' header combination\n+                     * as indicated in rfc7231 section-7.1.4\n+                     */\n+                    result = apr_table_get(ctx->r->headers_in, \"Host\");\n                 }\n                 break;\n\nIndex: server/util_expr_eval.c\n===================================================================\n--- server/util_expr_eval.c\t(revision 1808672)\n+++ server/util_expr_eval.c\t(working copy)\n@@ -1606,7 +1606,12 @@\n         return \"\";\n\n     name = req_header_header_names[index];\n-    add_vary(ctx, name);\n+    /* Skip the 'Vary: Host' header combination\n+     * as indicated in rfc7231 section-7.1.4\n+     */\n+    if (strcmp(name, \"Host\")){\n+        add_vary(ctx, name);\n+    }\n     return apr_table_get(ctx->r->headers_in, name);\n }"}, {"count": 9, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 201098, "time": "2017-09-23T09:18:07Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-23T09:18:07Z", "text": "Fixed in trunk with:\n\nhttp://svn.apache.org/r1808746\nhttp://svn.apache.org/r1809028\n\nI am going to write some tests and then propose the fix for 2.4.x."}, {"count": 10, "text": "(In reply to Rainer Canavan from comment #2)\n> Simplified Reproducer:\n> \n>     RewriteCond %{HTTP_HOST} !whatever\n>     RewriteRule ^/a /b\n\nWhile writing tests I discovered that the above configuration does not trigger the issue when embedded in a Directory block (with proper stripping of starting \"/\" that don't match) because afaics an internal rewrite happens that clears out the outstanding Vary values.", "bug_id": 58231, "attachment_id": null, "id": 201136, "time": "2017-09-26T12:22:25Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-26T12:22:25Z", "tags": [], "is_private": false}, {"count": 11, "text": "(In reply to Luca Toscano from comment #10)\n> While writing tests I discovered that the above configuration does not\n> trigger the issue when embedded in a Directory block (with proper stripping\n> of starting \"/\" that don't match) because afaics an internal rewrite happens\n> that clears out the outstanding Vary values.\n\nThis seems to be a long standing issue already reported by others, and essentially due to the ap_redirect_internal function not carrying any output headers already set in the \"pre-ap_redirect_internal\" request. The following patch seems to work fine with RewriteConds in Directory context:\n\nIndex: modules/http/http_request.c\n===================================================================\n--- modules/http/http_request.c\t(revision 1809976)\n+++ modules/http/http_request.c\t(working copy)\n@@ -523,6 +523,7 @@\n                                                request_rec *r) {\n     int access_status;\n     request_rec *new;\n+    const char *vary_headers;\n\n     if (ap_is_recursion_limit_exceeded(r)) {\n         ap_die(HTTP_INTERNAL_SERVER_ERROR, r);\n@@ -581,6 +582,12 @@\n     new->headers_in      = r->headers_in;\n     new->trailers_in     = r->trailers_in;\n     new->headers_out     = apr_table_make(r->pool, 12);\n+\n+    vary_headers = apr_table_get(r->headers_out, \"Vary\");\n+    if(vary_headers) {\n+        apr_table_setn(new->headers_out, \"Vary\", vary_headers);\n+    }\n+\n     if (ap_is_HTTP_REDIRECT(new->status)) {\n         const char *location = apr_table_get(r->headers_out, \"Location\");\n         if (location)", "bug_id": 58231, "is_private": false, "id": 201189, "time": "2017-09-28T12:11:15Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-28T12:11:15Z", "tags": [], "attachment_id": null}, {"count": 12, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 201190, "time": "2017-09-28T12:37:03Z", "bug_id": 58231, "creation_time": "2017-09-28T12:37:03Z", "text": "(In reply to Luca Toscano from comment #11)\n> (In reply to Luca Toscano from comment #10)\n> > While writing tests I discovered that the above configuration does not\n> > trigger the issue when embedded in a Directory block (with proper stripping\n> > of starting \"/\" that don't match) because afaics an internal rewrite happens\n> > that clears out the outstanding Vary values.\n> \n> This seems to be a long standing issue already reported by others, and\n> essentially due to the ap_redirect_internal function not carrying any output\n> headers already set in the \"pre-ap_redirect_internal\" request. The following\n> patch seems to work fine with RewriteConds in Directory context:\n> \n> Index: modules/http/http_request.c\n> ===================================================================\n> --- modules/http/http_request.c\t(revision 1809976)\n> +++ modules/http/http_request.c\t(working copy)\n> @@ -523,6 +523,7 @@\n>                                                 request_rec *r) {\n>      int access_status;\n>      request_rec *new;\n> +    const char *vary_headers;\n> \n>      if (ap_is_recursion_limit_exceeded(r)) {\n>          ap_die(HTTP_INTERNAL_SERVER_ERROR, r);\n> @@ -581,6 +582,12 @@\n>      new->headers_in      = r->headers_in;\n>      new->trailers_in     = r->trailers_in;\n>      new->headers_out     = apr_table_make(r->pool, 12);\n> +\n> +    vary_headers = apr_table_get(r->headers_out, \"Vary\");\n> +    if(vary_headers) {\n> +        apr_table_setn(new->headers_out, \"Vary\", vary_headers);\n> +    }\n> +\n>      if (ap_is_HTTP_REDIRECT(new->status)) {\n>          const char *location = apr_table_get(r->headers_out, \"Location\");\n>          if (location)\n\nDoesn't look so safe as a behavior change. It's probably sensible in this scenario but I could see this breaking people.  Could rewrite add the varies after the internal redirect?"}, {"count": 13, "text": "(In reply to Eric Covener from comment #12)\n> Doesn't look so safe as a behavior change. It's probably sensible in this\n> scenario but I could see this breaking people.  Could rewrite add the varies\n> after the internal redirect?\n\nThanks for the feedback Eric, I have the same feeling. Going to test other way to make this change :)", "bug_id": 58231, "attachment_id": null, "id": 201206, "time": "2017-09-28T16:47:24Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-28T16:47:24Z", "tags": [], "is_private": false}, {"count": 14, "text": "I tried some quick tests but it seems that when mod_rewrite hands over the request to ap_internal_redirect then it is not going to be able to add Vary headers anymore. It would be great to have a way to instruct the ap_internal_redirect that some response headers needs to be \"forwarded\" to the new response..", "bug_id": 58231, "attachment_id": null, "id": 201218, "time": "2017-09-29T08:01:02Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-29T08:01:02Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 58231, "attachment_id": null, "is_private": false, "id": 201219, "time": "2017-09-29T08:18:09Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2017-09-29T08:18:09Z", "text": "Maybe using err_headers_out (instead of headers_out) to set Vary in the first place?"}, {"count": 16, "tags": [], "bug_id": 58231, "attachment_id": null, "id": 201234, "time": "2017-09-29T14:49:19Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-09-29T14:49:19Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #15)\n> Maybe using err_headers_out (instead of headers_out) to set Vary in the\n> first place?\n\nYann you are awesome as usual, the following seems working perfectly:\n\nIndex: modules/mappers/mod_rewrite.c\n===================================================================\n--- modules/mappers/mod_rewrite.c\t(revision 1810117)\n+++ modules/mappers/mod_rewrite.c\t(working copy)\n@@ -5276,6 +5276,8 @@\n  */\n static int handler_redirect(request_rec *r)\n {\n+    const char *vary_headers;\n+\n     if (strcmp(r->handler, REWRITE_REDIRECT_HANDLER_NAME)) {\n         return DECLINED;\n     }\n@@ -5285,6 +5287,12 @@\n         return DECLINED;\n     }\n\n+    vary_headers = apr_table_get(r->headers_out, \"Vary\");\n+\n+    if(vary_headers) {\n+        apr_table_setn(r->err_headers_out, \"Vary\", vary_headers);\n+    }\n+\n     /* now do the internal redirect */\n     ap_internal_redirect(apr_pstrcat(r->pool, r->filename+9,\n                                      r->args ? \"?\" : NULL, r->args, NULL), r);\n\nWill do more tests (and probably improve the code) but it seems really promising! Thanks!"}, {"count": 17, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "id": 201244, "time": "2017-09-30T09:31:48Z", "bug_id": 58231, "creation_time": "2017-09-30T09:31:48Z", "is_private": false, "text": "This solution has a drawback, namely that even the error responses will get the Vary header. I tested a simple RewriteRule configured to lead to a 404, and it gets the Vary header (that is expected using err_output_headers from what I can read..)"}, {"count": 18, "text": "Another solution that I played with (just a hack, nothing complete) is the following:\n\nIndex: modules/http/http_request.c\n===================================================================\n--- modules/http/http_request.c\t(revision 1810323)\n+++ modules/http/http_request.c\t(working copy)\n@@ -523,6 +523,8 @@\n                                                request_rec *r) {\n     int access_status;\n     request_rec *new;\n+    const char *header_to_copy = NULL;\n+    const char *header_values_to_copy = NULL;\n\n     if (ap_is_recursion_limit_exceeded(r)) {\n         ap_die(HTTP_INTERNAL_SERVER_ERROR, r);\n@@ -586,6 +588,13 @@\n         if (location)\n             apr_table_setn(new->headers_out, \"Location\", location);\n     }\n+\n+    if ((header_to_copy = apr_table_get(r->subprocess_env, \"keep-response-header\"))) {\n+        if((header_values_to_copy = apr_table_get(r->headers_out, header_to_copy))) {\n+            apr_table_setn(new->headers_out, header_to_copy, header_values_to_copy);\n+        }\n+    }\n+\n     new->err_headers_out = r->err_headers_out;\n     new->trailers_out    = apr_table_make(r->pool, 5);\n     new->subprocess_env  = rename_original_env(r->pool, r->subprocess_env);\nIndex: modules/mappers/mod_rewrite.c\n===================================================================\n--- modules/mappers/mod_rewrite.c\t(revision 1810323)\n+++ modules/mappers/mod_rewrite.c\t(working copy)\n@@ -5285,6 +5285,8 @@\n         return DECLINED;\n     }\n\n+    apr_table_setn(r->subprocess_env, \"keep-response-header\", \"Vary\");\n+\n     /* now do the internal redirect */\n     ap_internal_redirect(apr_pstrcat(r->pool, r->filename+9,\n                                      r->args ? \"?\" : NULL, r->args, NULL), r);\n\n\nThis allows to selectively merge some headers from r->headers_out to the new request, without:\n1) impacting existing code using the ap_internal_redirect since only mod_rewrite would use it.\n2) force error responses after ap_internal_redirect to carry those headers (like the vary ones).\n\nNot sure if it makes any sense, but I am running out of ideas :)", "bug_id": 58231, "attachment_id": null, "id": 201266, "time": "2017-10-02T16:55:56Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-10-02T16:55:56Z", "tags": [], "is_private": false}, {"id": 201267, "tags": [], "bug_id": 58231, "attachment_id": null, "count": 19, "text": "> 2) force error responses after ap_internal_redirect to carry those headers (like the vary ones).\n\nI'm not sure if I understand that correctly, but I'd expect error responses to come with a  Vary-Header, if any request header was evaluated to arrive at that error. After all, 404 and friends are cacheable by default.", "time": "2017-10-02T17:26:49Z", "creator": "rainer-apache@7val.com", "creation_time": "2017-10-02T17:26:49Z", "is_private": false}, {"count": 20, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "is_private": false, "id": 201268, "time": "2017-10-02T17:37:09Z", "bug_id": 58231, "creation_time": "2017-10-02T17:37:09Z", "text": "(In reply to Rainer Canavan from comment #19)\n> > 2) force error responses after ap_internal_redirect to carry those headers (like the vary ones).\n> \n> I'm not sure if I understand that correctly, but I'd expect error responses\n> to come with a  Vary-Header, if any request header was evaluated to arrive\n> at that error. After all, 404 and friends are cacheable by default.\n\nSure but probably not a 50X, 404 might be borderline but afaict the current behavior for mod_rewrite (adding automatically Vary headers when needed) is not to add Vary headers in any error response, so I'd be inclined to keep this behavior."}, {"count": 21, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "id": 201345, "time": "2017-10-08T09:44:51Z", "bug_id": 58231, "creation_time": "2017-10-08T09:44:51Z", "is_private": false, "text": "A simpler variant of the patch:\n\nIndex: modules/http/http_request.c\n===================================================================\n--- modules/http/http_request.c\t(revision 1811460)\n+++ modules/http/http_request.c\t(working copy)\n@@ -523,6 +523,7 @@\n                                                request_rec *r) {\n     int access_status;\n     request_rec *new;\n+    const char *vary_header = NULL;\n\n     if (ap_is_recursion_limit_exceeded(r)) {\n         ap_die(HTTP_INTERNAL_SERVER_ERROR, r);\n@@ -586,6 +587,13 @@\n         if (location)\n             apr_table_setn(new->headers_out, \"Location\", location);\n     }\n+\n+    if (apr_table_get(r->notes, \"keep-vary-header\")) {\n+        if((vary_header = apr_table_get(r->headers_out, \"Vary\"))) {\n+            apr_table_setn(new->headers_out, \"Vary\", vary_header);\n+        }\n+    }\n+\n     new->err_headers_out = r->err_headers_out;\n     new->trailers_out    = apr_table_make(r->pool, 5);\n     new->subprocess_env  = rename_original_env(r->pool, r->subprocess_env);\nIndex: modules/mappers/mod_rewrite.c\n===================================================================\n--- modules/mappers/mod_rewrite.c\t(revision 1811460)\n+++ modules/mappers/mod_rewrite.c\t(working copy)\n@@ -5226,6 +5226,8 @@\n                 }\n             }\n\n+            apr_table_setn(r->notes, \"keep-vary-header\", \"\");\n+\n             /* now initiate the internal redirect */\n             rewritelog((r, 1, dconf->directory, \"internal redirect with %s \"\n                         \"[INTERNAL REDIRECT]\", r->filename));\n\nThis one uses 'notes' rather than 'subprocess_env' and it is simpler. All my tests passes, will ask some feedback to other devs about the best way to proceed."}, {"count": 22, "tags": [], "bug_id": 58231, "attachment_id": null, "text": "Fix proposal for trunk committed with r1811744", "id": 201392, "time": "2017-10-10T17:42:46Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-10-10T17:42:46Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 58231, "attachment_id": null, "text": "Updated tests in r1812542 with the new code for the directory context, will propose a backport later on during the week.", "id": 201517, "time": "2017-10-18T15:48:20Z", "creator": "toscano.luca@gmail.com", "creation_time": "2017-10-18T15:48:20Z", "is_private": false}, {"count": 24, "tags": [], "creator": "toscano.luca@gmail.com", "attachment_id": null, "is_private": false, "id": 202415, "time": "2017-11-26T11:58:26Z", "bug_id": 58231, "creation_time": "2017-11-26T11:58:26Z", "text": "Backport committed in r1815100.\n\nI don't see more actionable for this task, closing it, thanks everybody for the help! And please re-open if I am missing something :)"}]
[{"count": 0, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 192130, "time": "2016-07-05T10:01:48Z", "bug_id": 59799, "creation_time": "2016-07-05T10:01:48Z", "is_private": false, "text": "The 'compile-all' target depends on 'compile-ooxml-lite'.\n\nThis target does not appear to do any compilation; instead it runs lots of tests.\n\nThis seems wrong; a compile target should only compile sources.\n\nThe dependency also affects other targets, such as 'jar' and 'jar-src'."}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 192133, "time": "2016-07-05T10:43:48Z", "bug_id": 59799, "creation_time": "2016-07-05T10:43:48Z", "is_private": false, "text": "The way that we work out what counts as \"lite\" for ooxml-lite is to run the unit test suite, and record all the OOXML schema classes used in the process. We then build the smaller poi-ooxml-schemas jar based on just the schema classes actually used in a \"typical\" deployment, as automatically identified by the unit test suite\n\nIt's certainly needed for the jar target, as we can't build the poi-ooxml-schemas jar without this test-running step."}, {"count": 2, "tags": [], "text": "The problem with this approach is the overhead when changing a single source file.\n\nAFAICT the test phase will generate the same list of classes each time, only changing very rarely when tests are updated.\n\nThere has to be a better way to do this.\n\nFor example, create a fixed list of the classes from a recent run, and use that to build the jar.\n\nAs part of the unit tests, recreate the class list, and check if it is the same.\n\nOr one could run the unit tests against the lite jar.\n\nThere seems no point redoing the same work for every build regardless.", "attachment_id": null, "bug_id": 59799, "id": 192134, "time": "2016-07-05T10:57:29Z", "creator": "sebb@apache.org", "creation_time": "2016-07-05T10:57:29Z", "is_private": false}, {"count": 3, "tags": [], "text": "What's the concrete problem here - the time taken to run compile-ooxml-lite, or something else?\n\nWe could consider having a static list in source control and a separate Jenkins job to warn us when that list goes out of date, but obviously it's more overhead than the current system.", "attachment_id": null, "bug_id": 59799, "id": 192136, "time": "2016-07-05T12:40:48Z", "creator": "dtn-asfbugs@corefiling.co.uk", "creation_time": "2016-07-05T12:40:48Z", "is_private": false}, {"count": 4, "tags": [], "text": "(In reply to David North from comment #3)\n> What's the concrete problem here - the time taken to run compile-ooxml-lite,\n> or something else?\n\nThe time taken to run the target, and the fact that it is rerun even if there has been no change to the sources.\n\n> We could consider having a static list in source control and a separate\n> Jenkins job to warn us when that list goes out of date, but obviously it's\n> more overhead than the current system.\n\nAFAICT there's no need for a separate Jenkins job to check if the list is out of date; just ensure that the check is done as part of the normal unit tests.\n\nIf the unit tests are run against the lite jar rather than the merged input, this should show up any problems. This would check that the jar really did contain everything required.\n\nAlternatively, run the unit tests as normal, but add a new test at the end to compare the generated list with the static list. \n\nOr a combination: run against the statically created lite jar, but also record the used classes. At the end, check if any classes are no longer needed.", "attachment_id": null, "bug_id": 59799, "id": 192137, "time": "2016-07-05T13:22:38Z", "creator": "sebb@apache.org", "creation_time": "2016-07-05T13:22:38Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 59799, "is_private": false, "text": "(In reply to Sebb from comment #4)\n> If the unit tests are run against the lite jar rather than the merged input,\n> this should show up any problems. This would check that the jar really did contain\n> everything required.\n\nNope ... neither the current nor your proposed workflow guarantees that all xmlbeans fragments are included - e.g. we had problems with empty XSLFTables for quite a while and I actually don't know what (test) solved it, but back then the test were successful and the tables empty ...\n\n> (In reply to David North from comment #3)\n> > What's the concrete problem here - the time taken to run compile-ooxml-lite,\n> > or something else?\n> \n> The time taken to run the target, and the fact that it is rerun even if\n> there has been no change to the sources.\n\nWhen developing unit tests, I don't have a problem with that - I just run the unit test in question. Before check-in, I wait the 10 minutes to run the tests - in relation to the time taken to check/develop a feature this is minimal in my view.\n\nCan you be a bit more precise why you want to speed up vs. making the build more complicate?", "id": 192145, "time": "2016-07-05T15:59:28Z", "creator": "kiwiwings@apache.org", "creation_time": "2016-07-05T15:59:28Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "is_private": false, "id": 192152, "time": "2016-07-05T19:52:35Z", "bug_id": 59799, "creation_time": "2016-07-05T19:52:35Z", "text": "My problem has been that at times a failed unit test causes a compile-all to fail. This rather than speed would be my reason to decouple unit tests from any of the compile targets."}, {"count": 7, "tags": [], "text": "(In reply to Andreas Beeker from comment #5)\n> (In reply to Sebb from comment #4)\n> > If the unit tests are run against the lite jar rather than the merged input,\n> > this should show up any problems. This would check that the jar really did contain\n> > everything required.\n> \n> Nope ... neither the current nor your proposed workflow guarantees that all\n> xmlbeans fragments are included - e.g. we had problems with empty XSLFTables\n> for quite a while and I actually don't know what (test) solved it, but back\n> then the test were successful and the tables empty ...\n\nThe point is that it would at least show that the unit tests could run against the lite jar.\n\n> > (In reply to David North from comment #3)\n> > > What's the concrete problem here - the time taken to run compile-ooxml-lite,\n> > > or something else?\n> > \n> > The time taken to run the target, and the fact that it is rerun even if\n> > there has been no change to the sources.\n> \n> When developing unit tests, I don't have a problem with that - I just run\n> the unit test in question. Before check-in, I wait the 10 minutes to run the\n> tests - in relation to the time taken to check/develop a feature this is\n> minimal in my view.\n> \n> Can you be a bit more precise why you want to speed up vs. making the build\n> more complicate?\n\nWhen I was trying to work out what was happening with Bug 59786 the obvious way to test the problem was to build the jars and then run them with the appropriate command-line. Waiting 2-3 mins instead of 20 secs or so is a pain when making incremental changes. It's a waste of resources (human and computer).\n\nBesides, I don't believe that the build needs to be more complicated; it just needs some minor re-arrangement.", "is_private": false, "bug_id": 59799, "id": 192153, "time": "2016-07-05T20:17:47Z", "creator": "sebb@apache.org", "creation_time": "2016-07-05T20:17:47Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "apache@gagravarr.org", "text": "(In reply to Sebb from comment #7)\n> When I was trying to work out what was happening with Bug 59786 the obvious\n> way to test the problem was to build the jars and then run them with the\n> appropriate command-line. Waiting 2-3 mins instead of 20 secs or so is a\n> pain when making incremental changes. It's a waste of resources (human and\n> computer).\n\nant compile-scratchpad\njava -classpath build/classes:build/scratchpad-classes org.apache.(class)\n\nThat should've let you test it in seconds!", "id": 192155, "time": "2016-07-05T21:37:35Z", "bug_id": 59799, "creation_time": "2016-07-05T21:37:35Z", "is_private": false, "attachment_id": null}]
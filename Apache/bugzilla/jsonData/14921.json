[{"count": 0, "tags": [], "bug_id": 14921, "attachment_id": null, "id": 27100, "time": "2002-11-28T09:21:59Z", "creator": "julian.reschke@gmx.de", "creation_time": "2002-11-28T09:21:59Z", "is_private": false, "text": "For the filesystem backend, HEAD/GET return weak entitiy tags, while PROPFIND\n(DAV:getetag) returns the same tokens with the leading \"W/\" removed."}, {"count": 1, "tags": [], "text": "(likely cause: moddav duplicates code from ap_make_etag in http_protocol.c \ninstead of reusing it directly -- etag computation probably should be done in \none single place)", "attachment_id": null, "id": 27173, "creator": "julian.reschke@gmx.de", "time": "2002-11-29T18:39:01Z", "bug_id": 14921, "creation_time": "2002-11-29T18:39:01Z", "is_private": false}, {"count": 2, "tags": [], "creator": "jerenkrantz@apache.org", "is_private": false, "text": "This is not really a bug per se.\n\nWhat happens is that we generate a weak ETag when the request is too close to the modification time of the file (as dictated by RFC 2616, ETags should have 60-second resolutions).  After that second has elasped and the file hasn't changed, that weak entity tag would be made strong.  Creating a weak tag in mod_dav_fs isn't always desirable since it isn't keyed to a request - therefore all of its entity tags should be strong rather than weak.\n\nHowever, RFC 2616 explicitly calls out strong entity comparison and weak entity comparison functions.  Currently, mod_dav only uses strong entity comparison.  So, I modified mod_dav to do weak entity comparison instead.\n\nSee modules/dav/main/util.c r1.45.\n\nThis has been proposed for the next stable release of httpd-2.0.\n\nThanks for using Apache!", "id": 30279, "time": "2003-01-29T17:29:34Z", "bug_id": 14921, "creation_time": "2003-01-29T17:29:34Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 14921, "is_private": false, "count": 3, "id": 30281, "time": "2003-01-29T17:35:08Z", "creator": "jerenkrantz@apache.org", "creation_time": "2003-01-29T17:35:08Z", "text": "*** Bug 16451 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "bug_id": 14921, "is_private": false, "count": 4, "id": 30284, "time": "2003-01-29T18:29:00Z", "creator": "julian.reschke@gmx.de", "creation_time": "2003-01-29T18:29:00Z", "text": "I'm not sure that I agree with the analysis. First of all, RFC2616 doesn't \ndefine a specific resolution for etags.\n\n(all this probably only applies to the fs backend)\n\nThe issue here seems to be that the resource's etag starts it's life as a weak \none, and then turns into a strong etag after some delay. This works fine if you \ndiscover an already existing resource using GET/HEAD/PROPFIND, but leads to \nugly results if a client takes the entity tag returned by a PUT as validator \nfor subsequent PUT operations (because upon PUT, the entity tag returned is \nalways a weak one, because it's \"fresh\").\n\nAs far as the If-* headers defined in RFC2616 are concerned (not the If: \ndefined in RFC2518), strong comparison should be applied to etags (end of para \n13.3.3)."}, {"count": 5, "tags": [], "text": "This is why I believe the only workable solution here is to do weak entity\ncomparison for the If: header.\n\nmod_dav must be able to handle weak entity tags for its conditional headers\nbecause the entity tag might be promoted from a weak to a strong one at any time\n(given rules of 13.3.3).\n\nNote that using ap_make_etag is not an option since we don't have access to the\noriginal request, nor is that resource in the etag hook even related to the\noriginal resource that was requested.  (ap_make_etag has certain configurable\nproperties that may not be correct if we are not dealing with the original\nresource.)  And, doing so, wouldn't solve the real problem of ETag promotion.\n\nIf 2518bis clarifies this and says that If should only have strong entity\ncomparison, then we might want to rethink this.  Regardless, perhaps it should\nclarify this corner case.", "attachment_id": null, "id": 30286, "creator": "jerenkrantz@apache.org", "time": "2003-01-29T19:02:01Z", "bug_id": 14921, "creation_time": "2003-01-29T19:02:01Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "cosmin.chiru@gmail.com", "text": "I'm using Apache POI to alter some values in an Excel document and then read the result from different cells. Everything went ok until I got a test document from the client. After testing it I found out that I have two issues:\n\n1) When I try to get the value from a cell that has a formula but returns the result formatted as currency with the \u20ac sign as a prefix I get an error.\n\n2) When I try to get the value from a cell that references another cell that is a formula (eg.: cell B20 from Sheet 3 has the value of \"=Sheet 2!A20\" where A20 in Sheet 2 is a SUM() formula.), I get an error.\n\nThe error is: Exception in thread \"main\" java.lang.IllegalStateException: Cannot get a numeric value from a error formula cell.\n\nThe document name, input columns (where the values are altered) and output columns (from where the values are read) are taken from the command line.\n\nYou can find my code bellow:\n\npackage poitest;\n\nimport java.util.List;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.CellReference;\nimport org.apache.poi.ss.formula.eval.ErrorEval;\nimport org.apache.poi.ss.usermodel.*;\n\npublic class ReadExcel {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        // Will contain cell name / value pair for input cells          \n        Map<String, String> inputCellsMap = new HashMap<String, String>();\n\n        // Will contain cell name for output cells\n        List<String> outputCells = new ArrayList<String>();\n\n        // Open the Excel file\n        FileInputStream file = new FileInputStream(new File(args[0]));\n\n        // Get the current workbook\n        HSSFWorkbook workbook = new HSSFWorkbook(file);         \n\n        // Get the input cells that need to be modified and\n        // store their name and value in the inputCellsMap\n        for (String element : args[1].split(\";\")) {\n            inputCellsMap.put(element.split(\"=\")[0], element.split(\"=\")[1]);\n        }\n\n        // Get the output cells that will be accessed for resulting values\n        for (String element : args[2].split(\";\")) {\n            outputCells.add(element);           \n        }\n\n        // Loop through the cells that need to be modified and \n        // set the new value in the Excel document\n        Iterator<Entry<String,String>> inputIterator = inputCellsMap.entrySet().iterator();\n        while (inputIterator.hasNext()) {\n            Map.Entry<String,String> inputEntry = (Map.Entry<String,String>) inputIterator.next();\n\n            CellReference cellReferenceInput = new CellReference(inputEntry.getKey());\n            int cellReferenceInputRow = cellReferenceInput.getRow();\n            int cellReferenceInputColumn = cellReferenceInput.getCol();\n\n            // Get sheet name for each input cell\n            HSSFSheet inputSheet = workbook.getSheet(inputEntry.getKey().split(\"!\")[0]);\n\n            Row rowInput = inputSheet.getRow(cellReferenceInputRow);\n            if (rowInput == null)\n                rowInput = inputSheet.createRow(cellReferenceInputRow);\n            Cell cellInput = rowInput.getCell(cellReferenceInputColumn, Row.CREATE_NULL_AS_BLANK);              \n            cellInput.setCellValue(Integer.parseInt(inputEntry.getValue()));        \n        }\n\n        // Apply all formulas after altering cell values        \n        workbook.getCreationHelper().createFormulaEvaluator().evaluateAll();        \n\n        // Get the results from the output cells\n        for (int i = 0; i < outputCells.size(); i++) {\n            CellReference cellReferenceOutput = new CellReference(outputCells.get(i));\n            int cellReferenceOutputRow = cellReferenceOutput.getRow();\n            int cellReferenceOutputColumn = cellReferenceOutput.getCol();\n\n            // Get sheet name for each output cell\n            HSSFSheet outputSheet = workbook.getSheet(outputCells.get(i).split(\"!\")[0]);\n\n            Row rowOutput = outputSheet.getRow(cellReferenceOutputRow);\n            Cell cellOutput = rowOutput.getCell(cellReferenceOutputColumn, Row.CREATE_NULL_AS_BLANK);\n\n            // Display results\n            switch (cellOutput.getCellType()) {\n                case Cell.CELL_TYPE_BOOLEAN:\n                    System.out.println(cellOutput.getBooleanCellValue());\n                    break;\n                case Cell.CELL_TYPE_NUMERIC:\n                    System.out.println(cellOutput.getNumericCellValue());\n                    break;\n                case Cell.CELL_TYPE_STRING:\n                    System.out.println(cellOutput.getStringCellValue());\n                    break;\n                case Cell.CELL_TYPE_BLANK:\n                    break;              \n                case Cell.CELL_TYPE_FORMULA:                            \n                    switch (cellOutput.getCachedFormulaResultType()) {\n                        case Cell.CELL_TYPE_STRING:\n                            System.out.println(cellOutput.getRichStringCellValue());                            \n                            break;\n                        case Cell.CELL_TYPE_NUMERIC:\n                            HSSFCellStyle style = (HSSFCellStyle) cellOutput.getCellStyle();\n                            if (style == null) {\n                                System.out.println(cellOutput.getNumericCellValue());\n                            } else {\n                                DataFormatter formatter = new DataFormatter();\n                                System.out.println(formatter.\n                                        formatRawCellContents(\n                                                cellOutput.getNumericCellValue(), \n                                                style.getDataFormat(),\n                                                style.getDataFormatString())\n                                        );\n                            }\n                            break;\n                        case HSSFCell.CELL_TYPE_BOOLEAN:\n                            System.out.println(cellOutput.getBooleanCellValue());\n                            break;\n                        case HSSFCell.CELL_TYPE_ERROR:\n                            System.out.println(ErrorEval.getText(cellOutput.getErrorCellValue()));                          \n                            break;\n                    }\n\n                    break;\n            }                           \n        }           \n\n        workbook.close();       \n    }\n}", "id": 185398, "time": "2015-09-21T21:02:27Z", "bug_id": 58440, "creation_time": "2015-09-21T21:02:27Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "cosmin.chiru@gmail.com", "is_private": false, "text": "I forgot to mention that instead of getting the result of the formula, I get the string \"#VALUE!\".", "id": 185399, "time": "2015-09-21T21:04:15Z", "bug_id": 58440, "creation_time": "2015-09-21T21:04:15Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Can you attach a sample-file which will show the problem as it will be hard to reproduce this without the matching file.", "id": 186119, "time": "2015-10-30T17:58:25Z", "bug_id": 58440, "creation_time": "2015-10-30T17:58:25Z", "is_private": false, "attachment_id": null}]
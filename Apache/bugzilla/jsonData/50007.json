[{"count": 0, "tags": [], "creator": "trejkaz@trypticon.org", "attachment_id": 26078, "text": "Created attachment 26078\ntest build\n\nWe discovered an issue when a project directory containing a \"!\" was used with Ant upgraded to version 1.8.1.\n\nMy initial hunch is that Ant is converting this file path to a URI and then the ! is being misinterpreted as a separator for the jar URL scheme, even though \"jar:\" was nowhere to be seen.  As the variable in question comes from one of Ant's own tasks, one would expect it to work when used as part of the parameter for another task, and indeed, the issue does not occur on version 1.7.0.\n\nI zipped up a minimal build directory which reproduces the issue, at least on Windows.\n\n\nG:\\!test>ant\nBuildfile: G:\\!test\\build.xml\n\nBUILD FAILED\nG:\\!test\\build.xml:3: The following error occurred while executing this line:\njava.io.FileNotFoundException: G:\\ (The filename, directory name, or volume label syntax is incorrect)\n        at java.io.RandomAccessFile.open(Native Method)\n        at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)\n        at org.apache.tools.zip.ZipFile.<init>(ZipFile.java:182)\n        at org.apache.tools.zip.ZipFile.<init>(ZipFile.java:148)\n        at org.apache.tools.ant.helper.ProjectHelper2.parse(ProjectHelper2.java:274)\n        at org.apache.tools.ant.helper.ProjectHelper2.parseUnknownElement(ProjectHelper2.java:130)\n        at org.apache.tools.ant.helper.ProjectHelper2.parseAntlibDescriptor(ProjectHelper2.java:110)\n        at org.apache.tools.ant.taskdefs.Antlib.createAntlib(Antlib.java:91)\n        at org.apache.tools.ant.taskdefs.Definer.loadAntlib(Definer.java:440)\n        at org.apache.tools.ant.taskdefs.Definer.execute(Definer.java:292)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:390)\n        at org.apache.tools.ant.helper.ProjectHelper2.parse(ProjectHelper2.java:179)\n        at org.apache.tools.ant.ProjectHelper.configureProject(ProjectHelper.java:82)\n        at org.apache.tools.ant.Main.runBuild(Main.java:786)\n        at org.apache.tools.ant.Main.startAnt(Main.java:218)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\nTotal time: 0 seconds", "id": 140191, "time": "2010-09-27T00:47:11Z", "bug_id": 50007, "creation_time": "2010-09-27T00:47:11Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 140213, "time": "2010-09-27T09:01:47Z", "bug_id": 50007, "creation_time": "2010-09-27T09:01:47Z", "is_private": false, "text": "Well, there is a jar: protocol in view.  The error you see is when Ant\ntries to read the antlib.xml from ant-contrib.jar and its URL will\nbe something like\njar:file:///!temp/lib/ant-contrib.jar!net/sf/antcontrib/antlib.xml\n\nUsing lastIndexOf(\"!\") instead of indexOf(\"!\") would help in this case but I\nneed to think through the possible code paths first to convince myself that\nno \"!\" could ever appear after the ! inside the JAR protocol."}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "is_private": false, "id": 140223, "time": "2010-09-27T10:35:25Z", "bug_id": 50007, "creation_time": "2010-09-27T10:35:25Z", "text": "svn revision 1001756 fixes this as long as the ! is not at the end of the\ndirectory name.  In the later case JarURLConnection.connect() fails for an\nURL returned by Classloader.getResources() - I'm not convinced there\nis anything we can do for this case, but I'm keeping the issue open in case\nanybody has a good idea."}, {"count": 3, "tags": [], "bug_id": 50007, "text": "Aha, the hidden JAR URL. :)\nThere is some talk of this on a Sun bug record too.\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4730642\n\nThe suggestion someone gives there is only to match the ! if it's actually after .jar so that it won't match a bare directory.  I guess it won't match .zip which could technically contain classes too, but IMO it's not a jar file unless it ends in .jar anyway, so it would seem like it would just encourage people not to do things in a strange way.\n\nWhat perplexes me is that Ant 1.7.0 didn't have the issue.  I am guessing it wasn't using URLs?", "id": 140247, "time": "2010-09-27T19:19:53Z", "creator": "trejkaz@trypticon.org", "creation_time": "2010-09-27T19:19:53Z", "is_private": false, "attachment_id": null}]
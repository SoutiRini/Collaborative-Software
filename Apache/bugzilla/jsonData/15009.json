[{"count": 0, "attachment_id": null, "creator": "tom.sprenger@adnovum.com", "is_private": false, "id": 27291, "time": "2002-12-02T23:48:39Z", "bug_id": 15009, "creation_time": "2002-12-02T23:48:39Z", "tags": [], "text": "The changes in the class loading behavior introduced in WebappClassLoader from\nversion 1.34 to 1.35 break with the servlet specification and the current Tomcat\ndocumentation. Primarily, since WebappClassLoader version 1.35 Tomcat tries to\nload any class with the system class loader first, ignoring the delegate-Flag\nand the possible existence of the class in the web application's context. The\nimportant code fragments in WebappClassLoader.java look like this:\n\n   Version 1.34\n   ------------\n   // If a system class, use system class loader\n   if( name.startsWith(\"java.\") ) {\n       ClassLoader loader = system;\n       clazz = loader.loadClass(name);\n       if (clazz != null) {\n           if (resolve)\n       ...\n\n   Since version 1.35\n   ------------------\n   // (0.2) Try loading the class with the system class loader, to prevent\n   //       the webapp from overriding J2SE classes\n   try {\n       clazz = system.loadClass(name);\n       if (clazz != null) {\n           if (resolve)\n               resolveClass(clazz);\n       ...\n\nAccording to the specification it \"...is recommended that the application\nclassloader be implemented in such a way that classes packaged within the WAR\nare able to override classes residing in container-wide library JARs.\".\n\nIn addition, the change made in 1.35 will load any non-system class present in\nsystem classpath _before_ checking the delegation flag, which clearly conflicts\nwith the current Tomcat documentation.\n\nThe changed class loading behavior is especially crucial in connection with the\naspects of isolation and self-containedness of web application. That is, each\nweb application should be able to provide its own implementations of classes (as\nlong as these classes don't belong to a system package). Independent of the\ntarget web container's environment it should be guaranteed that the\napplication's classes are loaded and used prior to any other implementation."}, {"count": 1, "tags": [], "text": "The behavior described in the spec is only a recommendation. That recommendation\ndoes not happen to be implementable.", "attachment_id": null, "id": 27304, "creation_time": "2002-12-03T06:47:41Z", "time": "2002-12-03T06:47:41Z", "creator": "remm@apache.org", "bug_id": 15009, "is_private": false}, {"count": 2, "tags": [], "text": "Nevertheless, there are some good reasons for this recommondetion (i.e.\nisolation and self-containedness for web applications) and it seems to make more\nsense than the current implementation, which delutes the concept of encapsulated\napplication contexts. Since, there was a sound implementation in previous\nversions of Tomcat (and several other application servers implement the class\nloading likewise), there must have been good resons to change the behavior so\nfundamentally. Without starting a big discussion, what are these reasons?", "attachment_id": null, "id": 27306, "creation_time": "2002-12-03T07:37:32Z", "time": "2002-12-03T07:37:32Z", "creator": "tom.sprenger@adnovum.com", "bug_id": 15009, "is_private": false}, {"count": 3, "attachment_id": null, "creator": "remm@apache.org", "is_private": false, "id": 27307, "time": "2002-12-03T07:47:59Z", "bug_id": 15009, "creation_time": "2002-12-03T07:47:59Z", "tags": [], "text": "Yes, it is definitely one of those good ideas which never really works in the\nreal world. The previous implementation was \"sound\", except that it used to\nbreak in a lot of cases. The system class loader only contains the bare minimum\n(actually, it only contains the J2SE classes, as well as the system extensions).\nThe spec also states that overriding the J2SE classes is never allowed."}, {"count": 4, "attachment_id": null, "creator": "tom.sprenger@adnovum.com", "text": "I agree, the previous implementation of the WebappClassLoader did have its\nissues too. However, the \"delegation\" attribute offered at least a choice.\nWouldn't it make sense to retain this degree of freedom? \n\n(!delegation && !filter(name)) ---> delegation order: webapp -> bootstrap ->\nsystem -> common -> shared  (corresponds to the behavior described in the spec,\ndefault behavior of Tomcat 4.0.x)\n(delegate || filter(name))     ---> delegation order: bootstrap -> system ->\ncommon -> shared -> webapps (current default behavior of Tomcat 4.1.12)\n\nfilter(name) is true if name starts with a package name from the trigger list.", "id": 27309, "time": "2002-12-03T08:25:23Z", "bug_id": 15009, "creation_time": "2002-12-03T08:25:23Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "tom.sprenger@adnovum.com", "attachment_id": null, "is_private": false, "id": 27430, "time": "2002-12-04T19:48:21Z", "bug_id": 15009, "creation_time": "2002-12-04T19:48:21Z", "text": " What's the opinion about restoring the \"delegate\" attribute's original purpose?"}, {"count": 6, "tags": [], "bug_id": 15009, "attachment_id": null, "id": 27431, "time": "2002-12-04T20:04:22Z", "creator": "remm@apache.org", "creation_time": "2002-12-04T20:04:22Z", "is_private": false, "text": "No, it violates the spec wording (and wouldn't work right anyway)."}]
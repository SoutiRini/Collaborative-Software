[{"count": 0, "tags": [], "bug_id": 39503, "text": "This is similar to Bug 39278 but with respect to the request.getContextPath()\nmethod.\n\nThe Servlet spec section for request methods, 15.1.3.2, says, \"...The container\ndoes not decode this string.\"\n\nHowever, if you use a space in the context name and deploy to Tomcat, a call to\ngetContextPath() does not return an encoded string with '%20' for the space\ncharacter. Instead, the string includes the space character. A simple JSP can be\nused to reproduce the issue.\n\n\nAlso, I noticed another similar issue with getRequestURI() on a forwarded\nrequest. If you have a servlet or JSP that forwards to another servlet/JSP (via\nrequest.getRequestDispatcher().forward()) in the web app that has a space in the\ncontext path, the forward request behaves differently. The call to\ngetRequestURI() will return an encoded string from the original request but\nreturns a decoded URI in the forwarded request. The value in\nrequest.getAttribute(\"javax.servlet.forward.request_uri\") will still contain the\nencoded '%20' but getRequestURI() returns a string containing a space. Would you\nlike me to open a different bug for this issue with respect to forwarding to\ntrack separately?", "id": 88862, "time": "2006-05-06T23:46:56Z", "creator": "carlin.rogers@gmail.com", "creation_time": "2006-05-06T23:46:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 39503, "text": "I am totally opposed to fixing this, which has to be an obvious specification issue.\n\nThe last part is invalid (getRequestUri will return what you gave to the\ndispatcher).", "id": 88863, "time": "2006-05-07T00:08:07Z", "creator": "remm@apache.org", "creation_time": "2006-05-07T00:08:07Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 39503, "attachment_id": null, "id": 88877, "time": "2006-05-07T17:32:09Z", "creator": "carlin.rogers@gmail.com", "creation_time": "2006-05-07T17:32:09Z", "is_private": false, "text": "Hi Remmy,\n\nI'm not sure why you're opposed to fixing this and feel it's not obvious. The\nfirst place a developer goes to is the API documentation such as...\n\nhttp://java.sun.com/j2ee/1.4/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()\n\nIt clearly states that the \"container does not decode this string.\" Seems pretty\nclear.\n\nI feel the second issue is valid. Pass a relative path to\nrequest.getRequestDispatcher(). For example,...\n\n- create a JSP, xxx.jsp with just the following to do the forward to a second\nJSP, yyy.jsp, using a relative path:\n<%\n    javax.servlet.RequestDispatcher rd =\n            request.getRequestDispatcher(\"yyy.jsp\");\n    rd.forward(request, response);\n%>\n\n- create the second JSP, yyy.jsp, that will display the result of a call to\ngetRequestURI(),\n<%@ page language=\"java\" contentType=\"text/html;charset=UTF-8\"%>\n<html>\n<head><title>Request Test</title></head>\n<body>\nrequest.getRequestURI() = <%= request.getRequestURI() %>\n</body>\n</html>\n\n- deploy these in a web app with a context of \"/test space\".\n\nThe result will be that a call to request.getRequestURI() will be decoded."}, {"attachment_id": null, "tags": [], "bug_id": 39503, "text": "First of all, let me state that I don't care at all about the nonsensical things\nthe specification says, and which has slipped in for whatever unintended reason.\nI will let you reopen the report if you wish to, but will ignore it completely,\nand let me assure you this will never get fixed.\n\nThe process for request processing (at least the mapping part): URL decode\n(%xx), char decode, map. Then I get the context path, which corresponds to the\ncontext path which is configured in the container. How to get back to the\noriginal non decoded form is a mistery to me (in addition of being useless), and\nmore importantly, would cause regressions and security problems in Tomcat.", "count": 3, "id": 88879, "time": "2006-05-07T17:46:36Z", "creator": "remm@apache.org", "creation_time": "2006-05-07T17:46:36Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 60764, "attachment_id": null, "id": 197202, "time": "2017-02-22T01:40:58Z", "creator": "mark.housel@sony.com", "creation_time": "2017-02-22T01:40:58Z", "is_private": false, "text": "Tomcat versions: 8.5.11, 7.0.75\n\nI have a project that uses hibernate with optimistic locking and whenever it tries to do a rollback after an optimistic lock exception, the connection remains active and is not returned to the pool.  This only happens when I have the SlowQueryReport interceptor configured on my JDBC datasource in server.xml.  Here is the relevant stack trace:\n\n20:06:59.566 level:DEBUG class:org.springframework.orm.jpa.EntityManagerFactoryUtils principal: Unexpected exception on closing JPA EntityManager\njava.lang.reflect.UndeclaredThrowableException: null\n\tat com.sun.proxy.$Proxy40.hashCode(Unknown Source)\n\tat java.util.HashMap.hash(HashMap.java:338)\n\tat java.util.HashMap.get(HashMap.java:556)\n\tat org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:76)\n\tat org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.releaseStatements(AbstractBatchImpl.java:157)\n\tat org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.release(AbstractBatchImpl.java:195)\n\tat org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:190)\n\tat org.hibernate.internal.SessionImpl.close(SessionImpl.java:424)\n\tat org.hibernate.jpa.internal.EntityManagerImpl.close(EntityManagerImpl.java:145)\n\tat org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:438)\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:602)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1016)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:811)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:485)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:291)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)\n\tat com.sun.proxy.$Proxy215.test(Unknown Source)\n\tat com.sony.snei.mm.quartz.job.AbstractCategoryLayoutJob$1.run(AbstractCategoryLayoutJob.java:71)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.sql.SQLException: Statement closed.\n\tat org.apache.tomcat.jdbc.pool.interceptor.AbstractQueryReport$StatementProxy.invoke(AbstractQueryReport.java:226)\n\t... 22 common frames omitted\n\n\nThe problem is that hashCode() is called on the connection after it has been closed and that causes StatementProxy to throw the \"Statement closed\" exception.  I think that it should allow hashCode() and equals() to be called on the delegate even after the connection is closed.\n\nThanks,\nMark"}, {"count": 1, "tags": [], "bug_id": 60764, "attachment_id": null, "is_private": false, "id": 197333, "time": "2017-03-01T09:20:00Z", "creator": "kfujino@apache.org", "creation_time": "2017-03-01T09:20:00Z", "text": "Hi.\n\nDoes this problem affect only when using SlowQueryReport?\nAccording to my initial investigation, the same problems seems to be occurred\neven if StatementCache or StatementDecoratorInterceptor is used."}, {"count": 2, "tags": [], "creator": "mark.housel@sony.com", "is_private": false, "text": "(In reply to Keiichi Fujino from comment #1)\n> Hi.\n> \n> Does this problem affect only when using SlowQueryReport?\n> According to my initial investigation, the same problems seems to be occurred\n> even if StatementCache or StatementDecoratorInterceptor is used.\n\nYou are right, I just tested using StatementCache and got the same problem.\n\nWhen I said it only happens with SlowQueryReport, I just meant that it didn't happen when I don't use SlowQueryReport.", "id": 197357, "time": "2017-03-01T18:58:04Z", "bug_id": 60764, "creation_time": "2017-03-01T18:58:04Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 60764, "is_private": false, "id": 197378, "time": "2017-03-02T09:54:07Z", "creator": "kfujino@apache.org", "creation_time": "2017-03-02T09:54:07Z", "tags": [], "text": "Thanks.\n\nI am planning  to fix this problem as follows.\n-Implement equals() and hashCode() in the StatementDecoratorInterceptor.\n-Enable StatementDecoratorInterceptor by default.(mybe configuable)\n\nAs a result, Interceptor chain will be follows.\nDisposableConnectionFacade -> StatementDecoratorInterceptor -> XXXInterceptor(1..n) -> ProxyConnection"}, {"count": 4, "tags": [], "bug_id": 60764, "attachment_id": null, "is_private": false, "id": 197920, "time": "2017-03-23T08:06:47Z", "creator": "kfujino@apache.org", "creation_time": "2017-03-23T08:06:47Z", "text": "Fixed at r1788183\n\nThe fix will be in :\n- 9.0.x for 9.0.0.M19 onwards\n- 8.5.x for 8.5.13 onwards\n- 8.0.x for 8.0.43 onwards\n- 7.0.x for 7.0.77 onwards\n\n\nThe fix has changed to adding a facade on statement instead of modify StatementDecoratorInterceptor. \nAs a result, Interceptor chain will be follows.\nDisposableConnectionFacade -> StatementFacade -> XXXInterceptor(1..n) -> ProxyConnection"}]
[{"count": 0, "tags": [], "creator": "babak@topoweb.com", "attachment_id": null, "id": 10160, "time": "2002-02-01T08:30:54Z", "bug_id": 6171, "creation_time": "2002-02-01T08:30:54Z", "is_private": false, "text": "Shouldn't setting a null attribute value for an Element fail\nimmediately? org.apache.crimson.tree.ElementNode doesn't.\n\nElement.getAttribute(String) is never suppose to return null,\nbut this is possible when you set the value of an attribute\nto null. E.g.\n\n//Element e;\ne.setAttribute(\"id\", null);\n\nI imagine there are a lot of classes that assume that\nElement.getAttribute(String) never returns null.\n\nHere's some code:\n\n/*\n * TestCrimsonElement.java\n *\n * Date created: 1/31/02\n */\n\n\nimport java.io.IOException;\nimport java.io.StringWriter;\n\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\n\nimport javax.xml.transform.dom.DOMSource;\n\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport junit.framework.*;\nimport junit.extensions.*;\n\n/**\n * TestCrimsonElement test case.\n *\n * @author Babak Farhang\n */\npublic class TestCrimsonElement\nextends TestCase {\n    \n    public TestCrimsonElement() {\n        this(\"\");\n    }\n    \n    public TestCrimsonElement(String name) {\n        super(name);\n    }\n    \n    public static void main(String[] arg) throws Exception {\n        junit.textui.TestRunner.main(\n        new String[] { TestCrimsonElement.class.getName() });\n    }\n    \n    \n    \n    \n    public static Test suite() {\n        TestSuite suite = new TestSuite();\n        suite.addTest(new TestCrimsonElement(\"test01\"));\n        suite.addTest(new TestCrimsonElement(\"test02\"));  //!\n        return suite;\n    }\n    \n    public void test01()\n    throws ParserConfigurationException {\n        Document doc\n        = DocumentBuilderFactory.newInstance()\n        .newDocumentBuilder().newDocument();\n        Element root = doc.createElement(\"myDoc\");\n        root.setAttribute(\"id\", null);\n        assertNotNull(\n        \"Element.getAttribute(\\\"id\\\") is illegal null\",\n        root.getAttribute(\"id\"));\n    }\n    \n    public void test02()\n    throws\n    ParserConfigurationException,\n    IOException,\n    TransformerException {\n        Transformer transformer = null;\n        try {\n            Document doc = DocumentBuilderFactory.newInstance()\n            .newDocumentBuilder().newDocument();\n            \n            doc.appendChild(\n            doc.createComment(\"Malformed Doc\");\n            \n            Element root = doc.createElement(\"myDoc\");\n            doc.appendChild(root);\n            \n            root.setAttribute(\"id\", null);\n            \n            StringWriter writer = new StringWriter();\n            DOMSource src = new DOMSource(doc);\n            StreamResult dtn = new StreamResult(writer);\n            \n            TransformerFactory factory = TransformerFactory.newInstance();\n            transformer = factory.newTransformer();\n            \n            transformer.transform(src, dtn);\n        } catch (NullPointerException npx) {\n            fail(transformer.getClass().getName()\n            + \" assumes non-null attribute value for an Element\");\n        }\n        \n    }\n    \n}\n\n\nI suggest throwing a NullPointerException when the attribute value is null.\n\nAnother option is to make setting an attribute to null, equivalent to\nremoving the attribute [Element.removeAttribute(String)], but then on second\nthoughts, that would probably be a little too cute.\n\n-b."}, {"count": 1, "tags": [], "creator": "clerob@infonie.de", "attachment_id": null, "id": 13280, "time": "2002-04-11T20:37:46Z", "bug_id": 6171, "creation_time": "2002-04-11T20:37:46Z", "is_private": false, "text": " If one looks at the w3c spec, it is not clear, what kind of DOMExceptions\nshould be thrown here.\n\nINVALID_CHARACTER_ERR seems inappropriate, because \"null\" does not contain\n   any characters, especially no invalid ones\n\nNOT_SUPPORTED_ERR  should indicate, that an implementation does not\n    support any (legal) action, not that the action is invalid\n\nINVALID_MODIFICATION_ERR is reseved for invalid type changes, not value changes\n\nSYNTAX_ERR \"if an invalid or illegal string is specified\" ... if somewhat\n   right, because the null string seems to be illegal, but does one really\n   expects this?\n\nFrom the implementation point of view, a fix would be trivial (i guess);\njust add a line to  org/apache/crimson/tree/AttributeNode.java, e.g.\n\n    /** DOM:  Assigns the value of this attribute. */\n    public void setNodeValue (String value)\n    {\n        if (isReadonly ())\n            throw new DomEx (DomEx.NO_MODIFICATION_ALLOWED_ERR);\n +      if (value == null) {\n +          throw new DomEx (DomEx.<WHATEVER_WANTED_HERE>);\n        this.value = value;\n        specified = true;\n    }\n\nalternatively one could really explicitely throw a null-pointer exception\nhere, but is this relly user friendly, or wouldn't this just trigger\na bug report by the first user running into this exception, stating that\nan internal error happened ?\n\njust my two cents\n"}, {"count": 2, "tags": [], "text": "Personally, I don't see the point of the error code in the\nDOMException class. Subtypes of RuntimeException are seldom\ncaught in code: they usually indicate a bug. When they are,\nthey are usually caught \"right there\" (for example, a\nNumberFormatException from a user interface).\n\nAs such, a DOMException, I imagine, is for human consumption\nand would seldom be handled by other code.  And humans\nunderstand *text* a lot better than integral codes.\n\nSo, whatever RuntimeException subclass one picks, in my\nhumble opinion, is largely academic.\n\nMy suggestion is to always throw something as verbose, and\ndescriptive as possible. E.g.:\n\nthrow new DOMException(0,              // ignore the error code\n\"attempt to set attribute named \\\"\" + name + \"\\\" to null\");\n\nwhere name is the name of the attribute passed in.\n-b.", "attachment_id": null, "id": 13284, "creator": "babak@topoweb.com", "time": "2002-04-11T22:05:33Z", "bug_id": 6171, "creation_time": "2002-04-11T22:05:33Z", "is_private": false}]
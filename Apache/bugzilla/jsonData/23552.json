[{"attachment_id": null, "tags": [], "bug_id": 23552, "text": "Fighting with junit.jar and optional.jar was a great pain when I had to do it recently.  It would have \nhelped me to have a clearer document than what now exists on how to set up your ant \ninstallation and build.xml using junit.jar and optional.jar if you do not want to include those jars in \nant/lib.\n\nPutting jars in ant/lib begins to fail as you need more specialty jars.  For example, several of my \nrecent projects have been bitten badly by having out of date versions of xalan in ant/lib, used with \nthe style task.  Further, your ant install gets arcane as more and more specialty jars get added.  \nxdoclet, for example, requires a whole raft of jars in ant/lib, and is very likely to get out of date \nwith other apache-based projects.\n\nOur group thus moved to refactor our ANT installation to be a pure, from the factory, install.  We \nare also directed to include xalan.jar, junit.jar, and the like, from a known-safe per project install.  \n(Actually, we have a lib dir with a zillion versions of libraries in it, and individual projects include \nthe version they need.)\n\nMaking this work with junit and optional not in ant/lib has been a real pain.  I finally figured out \nwhat to do, but it took a lot more effort than I really wanted to spend on what seems to be a very \ncommon task.\n\nWhat I would like is a document that spells out very clearly the best practices for integrating junit \ntasks and style tasks when junit.jar and xalan.jar are not in ant/lib.  In my mind, the best way to \ndo this is with a simple build.xml that builds a java file, builds a Test java file, runs the junit test, \nand boxes up the resulting jar.  I have attached such a build file, but I am not sure it contains what \nwould be thought of as best practices.  I submit it in hopes that a better build.xml and \nexplanatory document might appear for 1.6.\n\nIf it seems appropriate, feel free to add explanatory text as needed, to simplify, or to otherwise \nmake it easier for someone else to do what took me so long.\n\n<project default=\"package\" basedir=\".\">\n  <property name=\"test.dir\" location=\"./test/\"/>\n  <property name=\"src.dir\" location=\"./src/\"/>\n  <property name=\"src.test\" location=\"${test.dir}/src/\"/>\n  <property name=\"lib.dir\" location=\"./lib\"/>\n  <property name=\"optional.jar\" location=\"${ant.home}/optional/optional.jar\"/>\n  <property name=\"junit.jar\" location=\"${lib.dir}/junit.jar\"/>\n\n  <path id=\"junit.classpath\">\n    <pathelement location=\"${optional.jar}\"/>\n    <pathelement location=\"${junit.jar}\"/>\n  </path>\n\n  <taskdef name= \"junit\" classname= \"org.apache.tools.ant.taskdefs.optional.junit.JUnitTask\" \nclasspathref=\"junit.classpath\"/> \n  <taskdef name= \"junitperf\" classname= \"org.apache.tools.ant.taskdefs.optional.junit.JUnitTask\" \nclasspathref=\"junit.classpath\"/> \n  <taskdef name= \"junit\" classname= \"org.apache.tools.ant.taskdefs.optional.junit.JUnitTask\" \nclasspathref=\"junit.classpath\"/> \n  <property name=\"build.dir\" location=\"./build\"/>\n  <property name=\"build.dest\" location=\"./build/classes\"/>\n  <property name=\"build.test\" location=\"./build/test\"/>\n  <property name=\"dist.root\" location=\"./dist\"/>\n  <property name=\"build.debug\" value=\"yes\"/>\n  <property name=\"build.deprecation\" value=\"yes\"/>\n  <property name=\"build.optimize\" value=\"yes\"/>\n  <property name=\"jar.name.base\" value=\"bonusfinder\"/>\n  <property name=\"jar.name\" location=\"${build.dir}/${jar.name.base}.jar\"/>\n  <property name=\"jar.main-class\" value=\"BonusFinder\"/>\n\n  <path id=\"compile.classpath\">\n  </path>\n\n  <path id=\"test.classpath\">\n    <path refid=\"compile.classpath\"/>\n    <pathelement location=\"${junit.jar}\"/>\n    <pathelement location=\"${jar.name}\"/>\n    <pathelement location=\"${build.test}\"/>\n  </path>\n\n  <target name=\"init\">\n    <tstamp/>\n    <mkdir dir=\"${build.dir}\"/>\n    <mkdir dir=\"${build.dest}\"/>\n    <mkdir dir=\"${build.test}\"/>\n  </target>\n\n  <!-- \n============================================================\n======= -->\n  <!-- Compiles the source directory                                       -->\n  <!-- \n============================================================\n======= -->\n  <target name=\"compile\" depends=\"init\">\n    <javac srcdir=\"${src.dir}\"\n           destdir=\"${build.dest}\"\n           debug=\"${build.debug}\"\n           deprecation=\"${build.deprecation}\"\n           optimize=\"${build.optimize}\">\n      <classpath refid=\"compile.classpath\"/>\n    </javac>\n  </target>\n\n  <!-- \n============================================================\n======= -->\n  <!-- Compiles the test directory                                       -->\n  <!-- \n============================================================\n======= -->\n  <target name=\"compile-test\" depends=\"package\">\n    <javac srcdir=\"${src.test}\"\n           destdir=\"${build.test}\"\n           debug=\"${build.debug}\"\n           deprecation=\"${build.deprecation}\"\n           optimize=\"${build.optimize}\">\n           <classpath refid=\"test.classpath\"/>\n    </javac>\n    <copy todir=\"${build.test}\">\n      <fileset dir=\"${src.test}\" excludes=\"**/*.java\"/>\n    </copy>\n  </target>\n\n  <!-- \n============================================================\n======= -->\n  <!-- Runs the tests                                           -->\n  <!-- \n============================================================\n======= -->\n  <target name=\"test\" depends=\"compile-test\">\n    <junit haltonfailure=\"true\" printsummary=\"true\" includeantruntime=\"false\">\n      <classpath refid=\"test.classpath\"/>\n      <formatter type=\"brief\" usefile=\"false\"/>\n      <test name=\"SimpleTest\" />\n    </junit>\n  </target>\n\n  <!-- \n============================================================\n======= -->\n  <!-- Creates the jar                                           -->\n  <!-- \n============================================================\n======= -->\n  <target name=\"package\" depends=\"compile\">\n    <jar jarfile=\"jar.name\" basedir=\"${build.dest}\">\n      <manifest>\n        <attribute name=\"Main-Class\" value=\"${jar.main-class}\"/>\n      </manifest>\n    </jar>\n  </target>\n\n  <!-- \n============================================================\n======= -->\n  <!-- Clean targets                                                       -->\n  <!-- \n============================================================\n======= -->\n  <target name=\"clean\" depends=\"init\">\n    <delete dir=\"${build.dir}\"/>\n  </target>\n\n</project>\n\n<!-- End of file -->", "count": 0, "id": 44964, "time": "2003-10-01T19:21:45Z", "creator": "scott@alodar.com", "creation_time": "2003-10-01T19:21:45Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 23552, "text": "try the ant1.6beta. it splits up optional.jar into its many dependencies....", "count": 1, "id": 44965, "time": "2003-10-01T20:27:36Z", "creator": "stevel@apache.org", "creation_time": "2003-10-01T20:27:36Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 23552, "text": "Ant 1.7 allows junit.jar to be specified\nat the <junit> task, the manual entry for <junit>\nhas been updated as follows:\n>>>>>>\nNote: You must have junit.jar available. You can do one of:\n\n   1. Put both junit.jar and ant-junit.jar in ANT_HOME/lib.\n   2. Do not put either in ANT_HOME/lib, and instead include their locations in\nyour CLASSPATH environment variable.\n   3. Add both JARs to your classpath using -lib.\n   4. Specify the locations of both JARs using a <classpath> element in a\n<taskdef> in the build file.\n   5. Leave ant-junit.jar in its default location in ANT_HOME/lib but include\njunit.jar in the <classpath> passed to <junit>. (since Ant 1.7)\n\n>>>\n", "count": 2, "id": 93927, "time": "2006-09-20T15:09:53Z", "creator": "peterreilly@apache.org", "creation_time": "2006-09-20T15:09:53Z", "is_private": false}]
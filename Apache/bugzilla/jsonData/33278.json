[{"count": 0, "tags": [], "text": "This a very sporadic event.  This is the first time I've seen in an \napplication that has had 9 instances running for a bit over a year.  My guess \nis that you WriteAppender.subappend() should be synchronized, as setWriter \nalready is.\n\n27 Jan 2005 00:00:11,407 [ERROR] cvsosfab1-2:Error processing message { \nLOT_ID=\"LFE451914\" DATE_ENTERED_OPER=\"20050126\" TIME_ENTERED_OPER=\"230156\" \nTRANSACTION_DATE=\"20050127\" TRANSACTION_TIME=\"10\" DATE=\"20050127\" TIME=\"10\" \nPRIORITY=\"0\" OWNER=\"ENGR\" LAST_OWNER=\"ENGR\" PRODUCT=\"GFNEZ03B34A\" \nLAST_PRODUCT=\"GFNEZ03B34A\" ROUTE=\"VA140PH1\" LAST_ROUTE=\"VA140PH1\" \nOPERATION=\"1220\" LAST_OPERATION=\"1220\" RETICLE=\"NA\" TRANSACTION=\"MVIN\" \nFACILITY=\"WCW\" LAST_FACILITY=\"WCW\" USER=\"GREGJF\" DELETED_FLAG=\"N\" } --- \ncom.hp.messaging.MessageProcessor \njava.lang.NullPointerException\tat org.apache.log4j.WriterAppender.subAppend\n(WriterAppender.java:292)\t\nat org.apache.log4j.DailyRollingFileAppender.subAppend \nDailyRollingFileAppender.java:349)\t\nat org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\t\nat org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\nat org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:57)\t\nat org.apache.log4j.Category.callAppenders(Category.java:187)\t\nat org.apache.log4j.Category.forcedLog(Category.java:372)\t\nat org.apache.log4j.Category.info(Category.java:674)\t\nat com.hp.cv.hplogger.Logger.info(Logger.java:242)\t\nat com.hp.countserver.server.LotCountMgr$WorkstreamListener.onLotChangeEvent\n(LotCountMgr.java:235)\t\nat com.hp.dbquerysupt.BaseDBQueryImpl$LotChangeEventListenerList.notifyListener\n(BaseDBQueryImpl.java:170)\t\nat com.hp.cv.util.ListenerList.fireEvent(ListenerList.java:107)\t\nat com.hp.dbquerysupt.BaseDBQueryImpl.fireLotChangeEvent\n(BaseDBQueryImpl.java:210)\t\nat com.hp.dbquerysupt.DBQueryImpl$LotChangeSubscriber.messageReceived\n(DBQueryImpl.java:776)\t\nat com.hp.messaging.MessageProcessor.run(MessageProcessor.java:35)\t\nat com.hp.threadpool.PooledThread.run(PooledThread.java:50)", "attachment_id": null, "id": 70209, "creation_time": "2005-01-27T23:17:27Z", "time": "2005-01-27T23:17:27Z", "creator": "ken.corbin@hp.com", "bug_id": 33278, "is_private": false}, {"attachment_id": null, "tags": [], "creator": "ceki@apache.org", "text": "\nHello Kenneth,\n\nWhich version of log4j is this? Operating System? JDK?", "count": 1, "id": 70210, "time": "2005-01-27T23:20:23Z", "bug_id": 33278, "creation_time": "2005-01-27T23:20:23Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 33278, "attachment_id": null, "id": 70917, "time": "2005-02-14T10:09:29Z", "creator": "bob.pancras@quinity.com", "creation_time": "2005-02-14T10:09:29Z", "is_private": false, "text": "We've experienced the same problem. It has occured twice the last week.\n\nWe're using the following versions:\n\nOS: Windows2000\nLog4j: 1.2.8\nJDK: 1.4\n\nRegards,\n\nBob Pancras"}, {"count": 3, "tags": [], "bug_id": 33278, "text": "I have experienced this problem with Log 4j 1.2.7.  The problem appears to be\nsporadic and pretty rare.  ", "id": 76680, "time": "2005-06-23T22:48:55Z", "creator": "obarshay@yahoo.com", "creation_time": "2005-06-23T22:48:55Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "thorbjoern@gmail.com", "attachment_id": null, "is_private": false, "id": 119291, "time": "2008-08-02T15:02:25Z", "bug_id": 33278, "creation_time": "2008-08-02T15:02:25Z", "text": "So what happens is that two threads try to log, get in the subappend() block and one starts changing the file logged to, gets interrupted and the other one gets control with the file system in an inconsistent state?\n\nThe solution to make subappender synchronized sounds reasonable and the overhead should be negletible.\n\nWhen looking at the code, I wonder if the information in the files without synchronization occasionally gets jumbled.  There is no effort to ensure that the whole log chunk is written in one piece.\n\nI suggest that subAppend() is made syncrhonized in WriteAppender, DailyRollingFileAppender and RollingFileAppender.\n\nComments?"}, {"count": 5, "tags": [], "text": "I don't think it's synchronization issue since the doAppend method in AppenderSkeleton is already synchronized. So whatever thread is logging to the appender will have to wait for the thread doing the rollover to finish. \n\nIf I had to guess, I would say that multiple appender using the same file are at play. Bob, Kenneth, Olog, is that the case? ", "attachment_id": null, "id": 119299, "creation_time": "2008-08-02T15:26:39Z", "time": "2008-08-02T15:26:39Z", "creator": "ceki@apache.org", "bug_id": 33278, "is_private": false}, {"count": 6, "tags": [], "bug_id": 33278, "attachment_id": null, "id": 122418, "time": "2008-11-12T13:37:06Z", "creator": "qualitychecker@free.fr", "creation_time": "2008-11-12T13:37:06Z", "is_private": false, "text": "I would suggest to add at least a test this.qw!=null and this.layout!=null at the beginning of subAppend of WriterAppender, like it is done in many other methods, even if they are tested in checkEntryConditions()\nMay be log a special alarm in case this.qw==null or this.layout==null ??\n\nIn writeFooter and writeHeader I would suggest to replace layout by this.layout, more readable.\n"}]
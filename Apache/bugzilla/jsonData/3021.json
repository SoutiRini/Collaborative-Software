[{"count": 0, "tags": [], "bug_id": 3021, "text": "I'm trying to write an Ant build file that will stop and start ATG Dynamo.  ATG \nprovide unix and windows scripts that can be used to start and stop the server, \nand I naturally thought of using the exec task.  It's no problem to get the \n<exec> task working on windows, but no matter what I do, I cannot find a way to \nget ant to return control to the build script (ie. complete the build script) \nafter it has finished the exec call (which it won't do until ATG is stopped \nmanually).\n\nI tried a variety of configurations of execution attributes and arg elements, \nbut it either returns nothing (and leaves the file specified in the output \nattribute blank) or more annoyingly it executs the task and blocks waiting for \nthe task to finish.\n\nI've tried the following approachs, and it always blocks\n1) Executing the dos \"start\" command and passing it the name of the batch file \nto start - RESULT: blocks\n2) Executing the dos \"cmd\" command, passing it a parameter of \"/ c\" and calling \nthe batch file - RESULT: blocks\n3) Same as 2, except I called a new batch file, which called \"start <original \nbatch file>\" - RESULT: nothing\n4) I created a new Ant build file called start.xml.  I used the Java task to \ncreate a fork and call a second instance of Ant on this build file - RESULT: \nWhen I run the output specified in the Execute.Commandlauncher debug trace \n(\"java org.apache.tools.ant.Main -buildfile c:\\dev\\scripts\\build\\start.xml\") \nfrom the dos command line it works correctly.  When it runs from the original \nant build file it does nothing.\n\nI'm not sure whether this is by design, but there doesn't appear to be any way \nwhatsoever to get it to run an external task without blocking.", "id": 4329, "time": "2001-08-07T10:55:17Z", "creator": "michael.lee@consignia.com", "creation_time": "2001-08-07T10:55:17Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 3021, "text": "You could use the same pattern as Cactus framework (run app server in separate \nthread). Or even use cactus. They don't support ATG Dynamo out of the box, but \nif you already know how to start/stop the app server from ant, supporting it \nshould be trivial. See http://jakarta.apache.org/commons/cactus/servlets.html.\n", "id": 4332, "time": "2001-08-07T11:44:08Z", "creator": "katkere@praja.com", "creation_time": "2001-08-07T11:44:08Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 3021, "text": "Ant 1.3 is designed to block until the task completes.\n\nAnt 1.4 (to be released soon) supports multithreading. You will be able to do \nsomething like this\n\n<target name=\"test\">\n   <parallel>\n      <exec startATG/>\n      <sequential>\n         <sleep for a while/> <!-- wait for server to come up -->\n         <test server/>\n         <exec stopATG/>\n      </sequential>\n   </parallel>\n</target>\n\nThis starts two threads - one to run the server and one to test and then stop \nthe server. The <parallel> container will still block until all threads within \nhave completed. \n\nA non-blocking container is probably possible but will not be considered for \nthe 1.4 release. \n\n", "id": 4360, "time": "2001-08-08T05:21:10Z", "creator": "conor@apache.org", "creation_time": "2001-08-08T05:21:10Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 45354, "attachment_id": 22223, "id": 118339, "time": "2008-07-07T09:52:25Z", "creator": "bsneade+apache@gmail.com", "creation_time": "2008-07-07T09:52:25Z", "is_private": false, "text": "Created attachment 22223\nExample referenced in the description\n\nI reported something similar in https://issues.apache.org/bugzilla/show_bug.cgi?id=45353 but the stack trace is totally different, so I thought to make a new ticket.  Sorry if its a dupe.\n\nWhen using named cells with the following formula (where tappab, tapp, pfy1 and totall are named cells):\n\n=IF(tappab<0;-21;IF(tapp+pfy1<>totall;-11;0))\n\nI get the error:\n\nException in thread \"main\" java.lang.IllegalArgumentException: Specified colIx (1012) is out of range\n\tat org.apache.poi.hssf.record.formula.RefPtgBase.setColumn(RefPtgBase.java:144)\n\tat org.apache.poi.hssf.record.formula.RefPtgBase.<init>(RefPtgBase.java:61)\n\tat org.apache.poi.hssf.record.formula.RefPtg.<init>(RefPtg.java:35)\n\tat org.apache.poi.hssf.model.FormulaParser.parseIdentifier(FormulaParser.java:277)\n\tat org.apache.poi.hssf.model.FormulaParser.parseFunctionOrIdentifier(FormulaParser.java:229)\n\tat org.apache.poi.hssf.model.FormulaParser.parseSimpleFactor(FormulaParser.java:468)\n\tat org.apache.poi.hssf.model.FormulaParser.percentFactor(FormulaParser.java:433)\n\tat org.apache.poi.hssf.model.FormulaParser.powerFactor(FormulaParser.java:420)\n\tat org.apache.poi.hssf.model.FormulaParser.Term(FormulaParser.java:628)\n\tat org.apache.poi.hssf.model.FormulaParser.additiveExpression(FormulaParser.java:725)\n\tat org.apache.poi.hssf.model.FormulaParser.concatExpression(FormulaParser.java:693)\n\tat org.apache.poi.hssf.model.FormulaParser.comparisonExpression(FormulaParser.java:650)\n\tat org.apache.poi.hssf.model.FormulaParser.Arguments(FormulaParser.java:405)\n\tat org.apache.poi.hssf.model.FormulaParser.function(FormulaParser.java:308)\n\tat org.apache.poi.hssf.model.FormulaParser.parseFunctionOrIdentifier(FormulaParser.java:227)\n\tat org.apache.poi.hssf.model.FormulaParser.parseSimpleFactor(FormulaParser.java:468)\n\tat org.apache.poi.hssf.model.FormulaParser.percentFactor(FormulaParser.java:433)\n\tat org.apache.poi.hssf.model.FormulaParser.powerFactor(FormulaParser.java:420)\n\tat org.apache.poi.hssf.model.FormulaParser.Term(FormulaParser.java:628)\n\tat org.apache.poi.hssf.model.FormulaParser.additiveExpression(FormulaParser.java:709)\n\tat org.apache.poi.hssf.model.FormulaParser.concatExpression(FormulaParser.java:693)\n\tat org.apache.poi.hssf.model.FormulaParser.comparisonExpression(FormulaParser.java:650)\n\tat org.apache.poi.hssf.model.FormulaParser.Arguments(FormulaParser.java:405)\n\tat org.apache.poi.hssf.model.FormulaParser.function(FormulaParser.java:308)\n\tat org.apache.poi.hssf.model.FormulaParser.parseFunctionOrIdentifier(FormulaParser.java:227)\n\tat org.apache.poi.hssf.model.FormulaParser.parseSimpleFactor(FormulaParser.java:468)\n\tat org.apache.poi.hssf.model.FormulaParser.percentFactor(FormulaParser.java:433)\n\tat org.apache.poi.hssf.model.FormulaParser.powerFactor(FormulaParser.java:420)\n\tat org.apache.poi.hssf.model.FormulaParser.Term(FormulaParser.java:628)\n\tat org.apache.poi.hssf.model.FormulaParser.additiveExpression(FormulaParser.java:709)\n\tat org.apache.poi.hssf.model.FormulaParser.concatExpression(FormulaParser.java:693)\n\tat org.apache.poi.hssf.model.FormulaParser.comparisonExpression(FormulaParser.java:650)\n\tat org.apache.poi.hssf.model.FormulaParser.parse(FormulaParser.java:751)\n\tat org.apache.poi.hssf.model.FormulaParser.parse(FormulaParser.java:113)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateCell(HSSFFormulaEvaluator.java:346)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.internalEvaluate(HSSFFormulaEvaluator.java:338)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateFormulaCell(HSSFFormulaEvaluator.java:183)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateAllFormulaCells(HSSFFormulaEvaluator.java:278)\n\tat NamedCellComplicatedFormulaTest.main(NamedCellComplicatedFormulaTest.java:20)\n\nIn the example I have attached, the formula is in A2, and the named cells are in the first row.\n\nNote: this is in 3.1Final."}, {"count": 1, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "text": "Fixed in svn r674953\n\nExcel allows named ranges to have names which look like cell references.  They seem to be distinguished only by the allowable values for row and column.  For instance, \"FY2008\" is definitely a cell reference and cannot be a named range.  \"A70123\" definitely not a cell reference and might be a named range.  \n\nPOI was interpreting 'pfy1' as a cell reference (also incorrectly calculating the column index to be 1012 - it would really be 10997).  The fixed code now checks the apparent column ('pfy') and row ('1') for maximum BIFF8 range ('IV' and '65536') to decide whether to treat the identifier as a named range.\n\nThere are all sorts of complexities related to this issue.  For example dots are legal in named range names, but also may be used instead of the colon range operator.  In BIFF12 (Excel 2007) the sheet boundaries change, so 'pfy1' becomes a valid cell reference, and presumably an invalid named range name.\n\n", "id": 118400, "time": "2008-07-08T14:20:19Z", "bug_id": 45354, "creation_time": "2008-07-08T14:20:19Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 45354, "text": "I've back-ported some fixes for column number <-> letter conversion from the ooxml branch to trunk. Hopefully this helps", "id": 118492, "time": "2008-07-10T13:32:03Z", "creator": "apache@gagravarr.org", "creation_time": "2008-07-10T13:32:03Z", "is_private": false, "attachment_id": null}]
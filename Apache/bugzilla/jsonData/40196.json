[{"count": 0, "tags": [], "bug_id": 40196, "attachment_id": null, "id": 91928, "time": "2006-08-06T15:43:02Z", "creator": "nazonazo@miobox.jp", "creation_time": "2006-08-06T15:43:02Z", "is_private": false, "text": "1. Add options of CharsetOptions: IgnoreIlSeq, NotIgnoreIlSeq;\n   if IgnoreIlSeq is specified, translation errors caused by illegal\n   byte sequences are ignored to prevent the connection being aborted.\n   This is similar to \"-c\" option of the iconv(1).\n\n2. It's still necessary for NoImplicitAdd to work, when only either\n   input or output is required to be filtered, but not both.\n\n3. Catch only forward proxy requests, but not reverse proxy ones.\n\n4. It's better to allocate a slightly large buffer from the heap,\n   rather than from the stack.\n\n# It seems Rev. 380232 (Remove Content-Length) isn't backported to 2.2,\n# shouldn't it?\n\n--- httpd/httpd/trunk/modules/filters/mod_charset_lite.c\tTue Jul 11 20:33:53 2006\n+++ httpd/httpd/trunk/modules/filters/mod_charset_lite.c\tTue Jul 11 20:33:53 2006\n@@ -76,6 +76,8 @@\n     const char *charset_default; /* how to ship on wire */\n     /** module does ap_add_*_filter()? */\n     enum {IA_INIT, IA_IMPADD, IA_NOIMPADD} implicit_add;\n+    /** whether to ignore EILSEQ */\n+    enum {II_INIT, II_IGNOREILSEQ, II_NOTIGNOREILSEQ} ignore_ilseq;\n } charset_dir_t;\n \n /* charset_filter_ctx_t is created for each filter instance; because the same\n@@ -86,6 +88,11 @@\n typedef struct charset_filter_ctx_t {\n     apr_xlate_t *xlate;\n     int is_sb;              /* single-byte translation? */\n+    apr_status_t (*xlate_conv_buffer)(apr_xlate_t *,\n+                                      const char *,\n+                                      apr_size_t *,\n+                                      char *,\n+                                      apr_size_t *);\n     charset_dir_t *dc;\n     ees_t ees;              /* extended error status */\n     apr_size_t saved;\n@@ -92,7 +99,7 @@\n     char buf[FATTEST_CHAR]; /* we want to be able to build a complete char here */\n     int ran;                /* has filter instance run before? */\n     int noop;               /* should we pass brigades through unchanged? */\n-    char *tmp;              /* buffer for input filtering */\n+    char *tmp;              /* buffer for input & output filtering */\n     apr_bucket_brigade *bb; /* input buckets we couldn't finish translating */\n } charset_filter_ctx_t;\n \n@@ -138,6 +145,8 @@\n         over->charset_source ? over->charset_source : base->charset_source;\n     a->implicit_add =\n         over->implicit_add != IA_INIT ? over->implicit_add : base->implicit_add;\n+    a->ignore_ilseq =\n+        over->ignore_ilseq != II_INIT ? over->ignore_ilseq : base->ignore_ilseq;\n     return a;\n }\n \n@@ -176,6 +185,12 @@\n     else if (!strcasecmp(flag, \"NoImplicitAdd\")) {\n         dc->implicit_add = IA_NOIMPADD;\n     }\n+    else if (!strcasecmp(flag, \"IgnoreIlSeq\")) {\n+        dc->ignore_ilseq = II_IGNOREILSEQ;\n+    }\n+    else if (!strcasecmp(flag, \"NotIgnoreIlSeq\")) {\n+        dc->ignore_ilseq = II_NOTIGNOREILSEQ;\n+    }\n     else if (!strncasecmp(flag, \"DebugLevel=\", 11)) {\n         dc->debug = atoi(flag + 11);\n     }\n@@ -189,6 +204,32 @@\n     return NULL;\n }\n \n+/* xlate_conv_buffer_no_eilseq() calls apr_xlate_conv_buffer(),\n+ * and traps APR_EINVAL (EILSEQ) to ignore it.\n+ */\n+static apr_status_t xlate_conv_buffer_no_eilseq(apr_xlate_t *convset,\n+                                                const char *inbuf,\n+                                                apr_size_t *inbytes_left,\n+                                                char *outbuf,\n+                                                apr_size_t *outbytes_left)\n+{\n+    apr_status_t rv;\n+\n+    while (inbytes_left && outbytes_left) {\n+        apr_size_t inbytes = *inbytes_left, outbytes = *outbytes_left;\n+\n+        if ((rv = apr_xlate_conv_buffer(convset, inbuf, inbytes_left,\n+                                        outbuf, outbytes_left)) != APR_EINVAL)\n/* EILSEQ */\n+            break;\n+        if (*inbytes_left)\n+            inbuf += inbytes - --(*inbytes_left);\n+        if (*outbytes_left)\n+            (outbuf += outbytes - --(*outbytes_left))[-1] = '?';\n+    }\n+\n+    return rv != APR_EINVAL ? rv : APR_SUCCESS;\n+}\n+\n /* find_code_page() is a fixup hook that decides if translation should be\n  * enabled; if so, it sets up request data for use by the filter registration\n  * hook so that it knows what to do\n@@ -226,8 +267,8 @@\n         return DECLINED;\n     }\n \n-    /* catch proxy requests */\n-    if (r->proxyreq) return DECLINED;\n+    /* catch forward proxy requests */\n+    if (r->proxyreq == PROXYREQ_PROXY) return DECLINED;\n     /* mod_rewrite indicators */\n     if (!strncmp(r->filename, \"redirect:\", 9)) return DECLINED;\n     if (!strncmp(r->filename, \"gone:\", 5)) return DECLINED;\n@@ -329,6 +370,8 @@\n         if (apr_xlate_sb_get(input_ctx->xlate, &input_ctx->is_sb) != APR_SUCCESS) {\n             input_ctx->is_sb = 0;\n         }\n+        input_ctx->xlate_conv_buffer = dc->ignore_ilseq == II_IGNOREILSEQ\n+                                       ? xlate_conv_buffer_no_eilseq :\napr_xlate_conv_buffer;\n     }\n \n     return DECLINED;\n@@ -369,7 +412,7 @@\n     charset_dir_t *dc = ap_get_module_config(r->per_dir_config,\n                                              &charset_lite_module);\n \n-    if (reqinfo) {\n+    if (reqinfo && dc->implicit_add != IA_NOIMPADD) {\n         if (reqinfo->output_ctx && !configured_on_output(r,\nXLATEOUT_FILTER_NAME)) {\n             ap_add_output_filter(XLATEOUT_FILTER_NAME, reqinfo->output_ctx, r,\n                                  r->connection);\n@@ -492,11 +535,11 @@\n         ++*cur_str;\n         --*cur_len;\n         tmp_input_len = ctx->saved;\n-        rv = apr_xlate_conv_buffer(ctx->xlate,\n-                                   ctx->buf,\n-                                   &tmp_input_len,\n-                                   *out_str,\n-                                   out_len);\n+        rv = ctx->xlate_conv_buffer(ctx->xlate,\n+                                    ctx->buf,\n+                                    &tmp_input_len,\n+                                    *out_str,\n+                                    out_len);\n     } while (rv == APR_INCOMPLETE && *cur_len);\n \n     if (rv == APR_SUCCESS) {\n@@ -737,10 +780,10 @@\n             else {\n                 apr_size_t old_buffer_avail = *buffer_avail;\n                 apr_size_t old_bucket_avail = bucket_avail;\n-                rv = apr_xlate_conv_buffer(ctx->xlate,\n-                                           bucket, &bucket_avail,\n-                                           buffer,\n-                                           buffer_avail);\n+                rv = ctx->xlate_conv_buffer(ctx->xlate,\n+                                            bucket, &bucket_avail,\n+                                            buffer,\n+                                            buffer_avail);\n                 buffer  += old_buffer_avail - *buffer_avail;\n                 bucket  += old_bucket_avail - bucket_avail;\n \n@@ -803,7 +846,6 @@\n     apr_bucket *dptr, *consumed_bucket;\n     const char *cur_str;\n     apr_size_t cur_len, cur_avail;\n-    char tmp[OUTPUT_XLATE_BUF_SIZE];\n     apr_size_t space_avail;\n     int done;\n     apr_status_t rv = APR_SUCCESS;\n@@ -869,6 +911,8 @@\n                 if (apr_xlate_sb_get(ctx->xlate, &ctx->is_sb) != APR_SUCCESS) {\n                     ctx->is_sb = 0;\n                 }\n+                ctx->xlate_conv_buffer = dc->ignore_ilseq == II_IGNOREILSEQ\n+                                         ? xlate_conv_buffer_no_eilseq :\napr_xlate_conv_buffer;\n             }\n         }\n         else {\n@@ -891,11 +935,14 @@\n     if (!ctx->ran) {  /* filter never ran before */\n         chk_filter_chain(f);\n         ctx->ran = 1;\n-        if (!ctx->noop && !ctx->is_sb) {\n-            /* We're not converting between two single-byte charsets, so unset\n-             * Content-Length since it is unlikely to remain the same.\n-             */\n-            apr_table_unset(f->r->headers_out, \"Content-Length\");\n+        if (!ctx->noop) {\n+            ctx->tmp = apr_palloc(f->r->pool, OUTPUT_XLATE_BUF_SIZE);\n+            if (!ctx->is_sb) {\n+                /* We're not converting between two single-byte charsets, so unset\n+                 * Content-Length since it is unlikely to remain the same.\n+                 */\n+                apr_table_unset(f->r->headers_out, \"Content-Length\");\n+            }\n         }\n     }\n \n@@ -906,7 +953,7 @@\n     dptr = APR_BRIGADE_FIRST(bb);\n     done = 0;\n     cur_len = 0;\n-    space_avail = sizeof(tmp);\n+    space_avail = OUTPUT_XLATE_BUF_SIZE;\n     consumed_bucket = NULL;\n     while (!done) {\n         if (!cur_len) { /* no bytes left to process in the current bucket... */\n@@ -942,7 +989,7 @@\n             dptr = APR_BUCKET_NEXT(dptr); /* get ready for when we access the\n                                           * next bucket */\n         }\n-        /* Try to fill up our tmp buffer with translated data. */\n+        /* Try to fill up our ctx->tmp buffer with translated data. */\n         cur_avail = cur_len;\n \n         if (cur_len) { /* maybe we just hit the end of a pipe (len = 0) ? */\n@@ -952,15 +999,15 @@\n                  */\n                 char *tmp_tmp;\n \n-                tmp_tmp = tmp + sizeof(tmp) - space_avail;\n+                tmp_tmp = ctx->tmp + OUTPUT_XLATE_BUF_SIZE - space_avail;\n                 rv = finish_partial_char(ctx,\n                                          &cur_str, &cur_len,\n                                          &tmp_tmp, &space_avail);\n             }\n             else {\n-                rv = apr_xlate_conv_buffer(ctx->xlate,\n-                                           cur_str, &cur_avail,\n-                                           tmp + sizeof(tmp) - space_avail,\n&space_avail);\n+                rv = ctx->xlate_conv_buffer(ctx->xlate,\n+                                            cur_str, &cur_avail,\n+                                            ctx->tmp + OUTPUT_XLATE_BUF_SIZE -\nspace_avail, &space_avail);\n \n                 /* Update input ptr and len after consuming some bytes */\n                 cur_str += cur_len - cur_avail;\n@@ -985,19 +1032,19 @@\n             /* It is time to flush, as there is not enough space left in the\n              * current output buffer to bother with converting more data.\n              */\n-            rv = send_downstream(f, tmp, sizeof(tmp) - space_avail);\n+            rv = send_downstream(f, ctx->tmp, OUTPUT_XLATE_BUF_SIZE - space_avail);\n             if (rv != APR_SUCCESS) {\n                 done = 1;\n             }\n \n-            /* tmp is now empty */\n-            space_avail = sizeof(tmp);\n+            /* ctx->tmp is now empty */\n+            space_avail = OUTPUT_XLATE_BUF_SIZE;\n         }\n     }\n \n     if (rv == APR_SUCCESS) {\n-        if (space_avail < sizeof(tmp)) { /* gotta write out what we converted */\n-            rv = send_downstream(f, tmp, sizeof(tmp) - space_avail);\n+        if (space_avail < OUTPUT_XLATE_BUF_SIZE) { /* gotta write out what we\nconverted */\n+            rv = send_downstream(f, ctx->tmp, OUTPUT_XLATE_BUF_SIZE - space_avail);\n         }\n     }\n     if (rv == APR_SUCCESS) {\n@@ -1136,7 +1183,7 @@\n                     add_charset_options,\n                     NULL,\n                     OR_FILEINFO,\n-                    \"valid options: ImplicitAdd, NoImplicitAdd, DebugLevel=n\"),\n+                    \"valid options: ImplicitAdd, NoImplicitAdd, IgnoreIlSeq,\nNotIgnoreIlSeq, DebugLevel=n\"),\n     {NULL}\n };\n \n--- httpd/httpd/trunk/docs/manual/mod/mod_charset_lite.xml\tTue Jul 11 20:55:32 2006\n+++ httpd/httpd/trunk/docs/manual/mod/mod_charset_lite.xml\tTue Jul 11 20:55:32 2006\n@@ -158,7 +158,7 @@\n <name>CharsetOptions</name>\n <description>Configures charset translation behavior</description>\n <syntax>CharsetOptions <var>option</var> [<var>option</var>] ...</syntax>\n-<default>CharsetOptions DebugLevel=0 NoImplicitAdd</default>\n+<default>CharsetOptions DebugLevel=0 ImplicitAdd NotIgnoreIlSeq</default>\n <contextlist><context>server config</context>\n <context>virtual host</context><context>directory</context>\n <context>.htaccess</context>\n@@ -193,6 +193,15 @@\n       >AddOutputFilter</directive> directive, <code>NoImplicitAdd</code>\n       should be specified so that <module>mod_charset_lite</module>\n       doesn't add its filter.</dd>\n+\n+      <dt><code>IgnoreIlSeq | NotIgnoreIlSeq</code></dt>\n+\n+      <dd>The <code>IgnoreIlSeq</code> keyword specifies that\n+      <module>mod_charset_lite</module> should ignore translation\n+      errors caused by illegal byte sequences of the input buffer.\n+      This is similar to &quot;-c&quot; option of the iconv(1) program.\n+      If <code>NotIgnoreIlSeq</code> is specified, an illegal byte\n+      sequence may cause the connection to be aborted.</dd>\n     </dl>\n </usage>\n </directivesynopsis>"}]
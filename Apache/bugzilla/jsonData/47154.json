[{"count": 0, "tags": [], "bug_id": 47154, "text": "Created attachment 23612\nSample spreadsheet with a numeric cell A1 set with format = \"@\". \n\nCreate a numeric cell with a number in it and specify its format as Text (\"@\"). Excel will still display the number using the \"General\" format. (Assuming the number was 2345, Excel displays \"2345\"). However, if you use the HSSFDataFormatter.formatCellvalue() method, the string returned is \"2345.0\" which means the returned value is formatted using the String.valueOf() function of Java. (Sample spreadsheet attached)\n\nCalling the HSSFDataFormatter.createFormat(cell) with this cell returns null since the format string \"@\" is not a valid numeric formatter. In such a scenario one would expect HSSFDataFormatter to either use the \"General\" format (which is what Excel does) or to at least use the default format if set by the user using the HSSFDataFormatter.setDefaultNumberFormat() method. It does neither, and uses String.valueOf instead.\n\nNo workaround except to check for this situation externally and avoid using HSSFDataFormatter's formatCellValue() method in such a situation.", "id": 126781, "time": "2009-05-05T06:07:05Z", "creator": "kala@sankya.com", "creation_time": "2009-05-05T06:07:05Z", "is_private": false, "attachment_id": 23612}, {"count": 1, "tags": [], "bug_id": 47154, "text": "Thanks for the bug report, now fixed in svn", "id": 127054, "attachment_id": null, "creator": "apache@gagravarr.org", "creation_time": "2009-05-16T10:39:48Z", "time": "2009-05-16T10:39:48Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "creator": "chris@christopherschultz.net", "is_private": false, "id": 181348, "time": "2015-02-26T14:03:32Z", "bug_id": 57638, "creation_time": "2015-02-26T14:03:32Z", "tags": [], "text": "For reference: http://markmail.org/thread/vu7kgdpqxdw7tlkz\n\nThis stack trace is from 8.0.17 but I have been able to reproduce it in 8.0.20 and 7.0.56 - 7.0.59:\n\njava.lang.IllegalArgumentException\n        at java.nio.Buffer.limit(Buffer.java:275)\n        at\norg.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n        at\norg.apache.coyote.ajp.AjpNioProcessor.read(AjpNioProcessor.java:159)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.readMessage(AbstractAjpProcessor.java:1067)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.receive(AbstractAjpProcessor.java:1005)\n        at\norg.apache.coyote.ajp.AbstractAjpProcessor.refillReadBuffer(AbstractAjpProcessor.java:1131)\n\nConnector configuration:\n\n    <Connector port=\"@connector-port@\"\n       redirectPort=\"443\"\n           protocol=\"org.apache.coyote.ajp.AjpNioProtocol\"\n        URIEncoding=\"UTF-8\"\n         packetSize=\"65536\"\n           executor=\"tomcatThreadPool\" />\n\nHere's what I know so far:\n\n1. AjpNioProtocol fails under some conditions (my post-login page)\n   with packetSize larger than the default (I have tried 65536, 32768,\n   16184, and 8200). The failing page is ~30k in size, enough to\n   exceed the default packet size but not e.g. maximum 64k\n\n2. Using AjpProtocol (BIO) connector solves the problem\n\n3. Using the default AJP packet size (8192) solves the problem\n\n4. Specifying socket.appReadBufSize and socket.appWriteBufSize to be\nthe same as the packet size solves the problem\n\nI'm still working on a small test case to help motivate debugging.\n\nWild-guessing that the root cause is mismatched buffer sizes, or lack of checking when using a smaller protocol buffer than whatever buffer is pumping into the protocol's buffer."}, {"count": 1, "tags": [], "bug_id": 57638, "text": "What version the stacktrace is from?\n\n> at java.nio.Buffer.limit(Buffer.java:275)\n\nThe line matches Java 8u31 sources.\nThe IAE is triggered by the following check:\n\n[[[\npublic final Buffer limit(int newLimit) {\n   if ((newLimit > capacity) || (newLimit < 0))\n            throw new IllegalArgumentException();\n]]]\n\n> org.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n\nThe above does not match Tomcat 7 sources. By method name I guess that is line 356.\n\n[[[\n    private int readSocket(byte[] buf, int pos, int n, boolean block)\n            throws IOException {\n        int nRead = 0;\n        ByteBuffer readBuffer =\n                socketWrapper.getSocket().getBufHandler().getReadBuffer();\n        readBuffer.clear();\n        readBuffer.limit(n);\n]]]\n\nApparently it tries to read n bytes from the Socket read buffer at once. The buffer is smaller that that thus the IAE.", "id": 181557, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2015-03-06T17:49:36Z", "time": "2015-03-06T17:49:36Z", "is_private": false}, {"count": 2, "attachment_id": null, "creator": "chris@christopherschultz.net", "text": "(In reply to Konstantin Kolinko from comment #1)\n> What version the stacktrace is from?\n> \n> > at java.nio.Buffer.limit(Buffer.java:275)\n> \n> The line matches Java 8u31 sources.\n> The IAE is triggered by the following check:\n> \n> [[[\n> public final Buffer limit(int newLimit) {\n>    if ((newLimit > capacity) || (newLimit < 0))\n>             throw new IllegalArgumentException();\n> ]]]\n> \n> > org.apache.coyote.ajp.AjpNioProcessor.readSocket(AjpNioProcessor.java:179)\n> \n> The above does not match Tomcat 7 sources. By method name I guess that is\n> line 356.\n\nThe reference in comment #1 says Tomcat 8.0.17. I'm sorry I didn't set the correct version. I was able to reproduce this in 7.0.56, 7.0.57, 7.0.50, 8.0.17 and 8.0.20 with varying stack traces. The one posted here appears to be from Tomcat 8.0.17.\n\n> [[[\n>     private int readSocket(byte[] buf, int pos, int n, boolean block)\n>             throws IOException {\n>         int nRead = 0;\n>         ByteBuffer readBuffer =\n>                 socketWrapper.getSocket().getBufHandler().getReadBuffer();\n>         readBuffer.clear();\n>         readBuffer.limit(n);\n> ]]]\n> \n> Apparently it tries to read n bytes from the Socket read buffer at once. The\n> buffer is smaller that that thus the IAE.\n\nThat seems like a reasonable diagnosis, but I'm not familiar enough with how these components interact to understand the root cause and most appropriate fix.\n\nI suspect this is a rare problem since most people probably stick to the default packetSize (8192) with the AJP connector.", "id": 181558, "time": "2015-03-06T18:08:49Z", "bug_id": 57638, "creation_time": "2015-03-06T18:08:49Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "creator": "markt@apache.org", "text": "I have a test case for this. Sending any AJP request body chunk message with size > socket read buffer is sufficient to trigger this with NIO or NIO2.\n\nBIO, APR and 9.0.x are all unaffected.\n\nThe fix looks to be simple. I need to clean everything up and should be able to commit a fix shortly.", "id": 181571, "time": "2015-03-07T15:00:04Z", "bug_id": 57638, "creation_time": "2015-03-07T15:00:04Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "creator": "markt@apache.org", "text": "Fixed in 8.0.x and 8.0.21 onwards and in 7.0.x for 7.0.60 onwards.\n\nNeither trunk nor 6.0x. were affected.", "id": 181575, "time": "2015-03-07T15:33:54Z", "bug_id": 57638, "creation_time": "2015-03-07T15:33:54Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 181579, "time": "2015-03-07T18:31:49Z", "bug_id": 57638, "creation_time": "2015-03-07T18:31:49Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #4)\n> Fixed in 8.0.x and 8.0.21 onwards and in 7.0.x for 7.0.60 onwards.\n\n\nExcellent, I'll reproduce, then update and re-test in my environment.\n\n> Neither trunk nor 6.0x. were affected.\n\nThat was my expectation based upon R\u00e9my'y comments about the refactoring in trunk having unified lots of things; this bug would have been much more obvious with other connectors."}, {"count": 6, "tags": [], "bug_id": 57638, "attachment_id": null, "is_private": false, "id": 181580, "time": "2015-03-07T18:56:40Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-07T18:56:40Z", "text": "I just re-built with Tomcat 7.0.x trunk and I'm now getting a different exception:\n\nSEVERE: Servlet.service() for servlet velocity threw exception\njava.nio.BufferOverflowException\n        at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:189)\n        at org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:305)\n        at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1234)\n        at org.apache.coyote.Response.doWrite(Response.java:499)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:402)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)\n        at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:485)\n        at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464)\n        at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:302)\n        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:527)\n        at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:152)\n        at org.apache.velocity.io.VelocityWriter.flushBuffer(VelocityWriter.java:129)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:306)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:322)\n        at org.apache.velocity.runtime.parser.node.ASTReference.render(ASTReference.java:491)\n        at org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:342)\n        at org.apache.velocity.Template.merge(Template.java:356)\n        at org.apache.velocity.Template.merge(Template.java:260)\n        at org.apache.velocity.tools.view.VelocityView.performMerge(VelocityView.java:942)\n        at org.apache.velocity.tools.view.VelocityView.merge(VelocityView.java:902)\n        at org.apache.velocity.tools.view.VelocityViewServlet.mergeTemplate(VelocityViewServlet.java:318)\n        at org.apache.velocity.tools.view.VelocityLayoutServlet.mergeTemplate(VelocityLayoutServlet.java:247)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doRequest(VelocityViewServlet.java:220)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doGet(VelocityViewServlet.java:182)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n  [...]\n\nMight this be the other side of the buffer coin?"}, {"count": 7, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 181581, "time": "2015-03-07T19:04:27Z", "bug_id": 57638, "creation_time": "2015-03-07T19:04:27Z", "is_private": false, "text": "I added some debug logging to the line immediately before the writeBuffer.put(), and I got these logs before the exception:\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=79\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=6, starting at offset=0, len=6\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=113\n\nMar 07, 2015 2:02:09 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=6, starting at offset=0, len=6\n\nMar 07, 2015 2:02:10 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=42\n\nMar 07, 2015 2:02:10 PM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=8200"}, {"count": 8, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 181582, "time": "2015-03-07T19:07:01Z", "bug_id": 57638, "creation_time": "2015-03-07T19:07:01Z", "tags": [], "text": "That is a different bug. It is in output rather than input. Please open a new issue."}, {"count": 9, "tags": [], "bug_id": 57638, "is_private": false, "text": "Filed the output-oriented bug under bug #57674.", "id": 181584, "time": "2015-03-07T19:13:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-07T19:13:41Z", "attachment_id": null}]
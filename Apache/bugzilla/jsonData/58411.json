[{"count": 0, "tags": [], "text": "I am currently opening multiple InputStreams and attempting to use println send data through the Servlet's PrintWriter, unfortunately this sends back a StringIndexOutOfBoundsException: String index out of range: -49\n   at java.lang.String.getChars(String.java:812)\n   at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:333)\n   at org.apache.catalina.connector.OuputBuffer.write(OuputBuffer.java:533)\n   at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:170)\n   at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:180)\n   at org.apache.catalina.connector.CoyoteWriter.print(CoyoteWriter.java:238)\n   at org.apache.catalina.connector.CoyoteWriter.println(CoyoteWriter.java:305)\n\nUsing PrintWriter's printf or format methods work properly since the CoyoteWriter doesn't override those methods and the appropriate synchronized blocks are enforced, unlike the print overrides which specifically removed the synchronized blocks. I would suggest removing the unnecessary overrides, it looks like the PrintWriter handles everything the CoyoteWriter is doing. I checked the history on the 8.x branch for the file and there isn't a reason why the class was ever needed in the first place.", "attachment_id": null, "id": 185260, "creator": "sdavids@gmail.com", "time": "2015-09-15T18:35:44Z", "bug_id": 58411, "creation_time": "2015-09-15T18:35:44Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58411, "is_private": false, "id": 185262, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2015-09-15T18:48:05Z", "time": "2015-09-15T18:48:05Z", "text": "Concurrent writes (or reads ...) are not allowed, add synchronization."}, {"count": 2, "tags": [], "creator": "sdavids@gmail.com", "is_private": false, "id": 185264, "attachment_id": null, "bug_id": 58411, "creation_time": "2015-09-15T18:56:23Z", "time": "2015-09-15T18:56:23Z", "text": "Yes, that's what I did end up doing but it seems odd that Tomcat would specifically remove the appropriate synchronization provided by the PrintWriter, so my code that was working on Jetty doesn't work in Tomcat both programming to the Servlet spec - one would think it would be a transparent change. Is it even documented that Tomcat doesn't handle concurrent writes? Was there a reason for adding this seemingly arbitrary restriction?"}, {"count": 3, "tags": [], "text": "It's worth pointing-out that nowhere in java.io.PrintWriter does it say anything about being thread-safe, nor does its superclass, java.io.Writer. Also, none of the methods are synchronized.\n\nInternally to these methods, there are synchronized blocks but that seems to be an implementation detail.\n\nIf the CoyoteWriter is not thread-safe, it should probably documented as such, but it's completely reasonable to leave it without synchronization: adding the overhead of synchronization to every write() would be unreasonable for what is usually a rare use-case.\n\nYou are already having to manage your threads to ensure that you write things to the response in the right order (right?) so you may as well use that same mechanism to provide thread-safety to your use of CoyoteWriter.\n\nA better method of communication would be to queue your writes (using a thread-safe queue) and have a single thread write to the response output stream. Right now, it sounds like the wild west in your code.", "attachment_id": null, "bug_id": 58411, "id": 185265, "time": "2015-09-15T19:28:48Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-09-15T19:28:48Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 58411, "is_private": false, "id": 185272, "attachment_id": null, "creator": "sdavids@gmail.com", "creation_time": "2015-09-15T21:20:28Z", "time": "2015-09-15T21:20:28Z", "text": "I have a distributed system that needs to collect data on each data node and stream it back to the client in a timely manner, so I go ahead and open up multiple concurrent InputStreams from each data node and stream it back to the client in one OuputStream i.e. the Servlet's PrintWriter (CoyoteWriter for Tomcat) in a rather simple callback method. I am not attempting to preserve order as that would be a nightmarish task and isn't necessary for my use-case.\n\nI did contemplate using a blocking queue but thought it was a premature optimization before just trying to make my write method synchronized. The synchronized method did the trick without a noticeable performance degradation, so that's what I'm rolling with for the time being.\n\nJust thought this was a bug and couldn't track down the original rational from the file's history in GitHub. My initial thought was a speed optimization, but I thought in recent versions of Java (1.4+) it isn't super costly."}, {"count": 5, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 185274, "attachment_id": null, "bug_id": 58411, "creation_time": "2015-09-15T21:46:17Z", "time": "2015-09-15T21:46:17Z", "text": "However, the Javadoc for Writer references the protected lock object and has done since Java 1.3 (as far back as I checked). The description is:\n\nThe object used to synchronize operations on this stream.\n\nThere is a strong implication in that description that all operations are expected to synchronize on the lock object.\n\nI'm re-opening this while we discuss it further to make sure it doesn't get forgotten. It might still get resolved as INVALID again."}, {"count": 6, "tags": [], "bug_id": 58411, "attachment_id": null, "id": 185276, "time": "2015-09-15T21:52:08Z", "creator": "remm@apache.org", "creation_time": "2015-09-15T21:52:08Z", "is_private": false, "text": "Really ? Those (legacy) Servlet objects have never been synced."}, {"count": 7, "tags": [], "text": "I was all for closing it as INVALID as well then I went I dug through the Javadoc. Is there anything you can recall in the Servlet spec, javadoc or the EG discussions that points to the PrintWriter being thread-safe or not. I had a look but couldn't find anything.", "attachment_id": null, "id": 185279, "creation_time": "2015-09-15T22:28:43Z", "time": "2015-09-15T22:28:43Z", "creator": "markt@apache.org", "bug_id": 58411, "is_private": false}, {"count": 8, "tags": [], "bug_id": 58411, "is_private": false, "text": "PrintWriter doesn't say anything specifically about thread safety but the Writer implies it with the constructor saying:\n\nhttp://docs.oracle.com/javase/8/docs/api/java/io/Writer.html#Writer--\n> Creates a new character-stream writer whose critical sections will synchronize on the writer itself.\n\nThough, it is a bit ambiguous depending on what people consider \"critical sections\".", "id": 185280, "time": "2015-09-16T04:41:53Z", "creator": "sdavids@gmail.com", "creation_time": "2015-09-16T04:41:53Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 58411, "attachment_id": null, "is_private": false, "id": 185282, "time": "2015-09-16T07:18:46Z", "creator": "remm@apache.org", "creation_time": "2015-09-16T07:18:46Z", "text": "Servlet 3.1 still says that Servlet objects are not thread safe. NIO2 does not allow concurrency either, so there's no reason to sync this stream but not any other one."}, {"count": 10, "tags": [], "bug_id": 58411, "attachment_id": null, "id": 185283, "time": "2015-09-16T09:03:16Z", "creator": "markt@apache.org", "creation_time": "2015-09-16T09:03:16Z", "is_private": false, "text": "The spec talks a lot about the request and response not being thread-safe. It implies objects obtained from them are also not thread-safe but it isn't explicit. You end up in a position where it is the implication of the Writer Javadoc vs the implication of the Servlet spec. It isn't as clear cut as I would like.\n\nThat this is the first time I can recall that this has come up it doesn't look to be an issue for most users.\n\nIf the performance impact was neglibable then I'd be tempted to add the syncs. The other option is ask the Servlet EG for a view."}, {"count": 11, "tags": [], "text": "The thread safety issue actually came up fairly often in the past. And this doesn't make sense, why would it be partially synced ?\n\nThe specification is perfectly explicit about it (2.3.3.4).\n\n\"Other than the startAsync and complete methods, implementations of the request\nand response objects are not guaranteed to be thread safe. This means that they\nshould either only be used within the scope of the request handling thread or the\napplication must ensure that access to the request and response objects are thread\nsafe.\nIf a thread created by the application uses the container-managed objects, such as the\nrequest or response object, those objects must be accessed only within the object\u2019s\nlife cycle as defined in sections Section 3.12, \u201cLifetime of the Request Object\u201d on\npage 3-31and Section 5.7, \u201cLifetime of the Response Object\u201d on page 5-50\nrespectively. Be aware that other than the startAsync , and complete methods, the\nrequest and response objects are not thread safe. If those objects were accessed in the\nmultiple threads, the access should be synchronized or be done through a wrapper\nto add the thread safety, for instance, synchronizing the call of the methods to access\nthe request attribute, or using a local output stream for the response object within a\nthread.\"\n\nAnyway, if despite the last sentence, you want to fix this \"issue\", go ahead :)", "attachment_id": null, "id": 185284, "creation_time": "2015-09-16T09:12:58Z", "time": "2015-09-16T09:12:58Z", "creator": "remm@apache.org", "bug_id": 58411, "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 58411, "is_private": false, "id": 185291, "time": "2015-09-16T13:37:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-09-16T13:37:41Z", "tags": [], "text": "(In reply to Steve Davids from comment #8)\n> PrintWriter doesn't say anything specifically about thread safety but the\n> Writer implies it with the constructor saying:\n> \n> http://docs.oracle.com/javase/8/docs/api/java/io/Writer.html#Writer--\n> > Creates a new character-stream writer whose critical sections will synchronize on the writer itself.\n> \n> Though, it is a bit ambiguous depending on what people consider \"critical\n> sections\".\n\nSorry I missed that in the Writer javadoc. To me, this strongly implies that all Writers are thread-safe."}, {"count": 13, "tags": [], "bug_id": 58411, "is_private": false, "text": "(In reply to Remy Maucherat from comment #11)\n> The thread safety issue actually came up fairly often in the past. And this\n> doesn't make sense, why would it be partially synced ?\n> \n> The specification is perfectly explicit about it (2.3.3.4).\n> \n> \"Other than the startAsync and complete methods, implementations of the\n> request\n> and response objects are not guaranteed to be thread safe. This means that\n> they\n> should either only be used within the scope of the request handling thread\n> or the\n> application must ensure that access to the request and response objects are\n> thread\n> safe.\n> If a thread created by the application uses the container-managed objects,\n> such as the\n> request or response object, those objects must be accessed only within the\n> object\u2019s\n> life cycle as defined in sections Section 3.12, \u201cLifetime of the Request\n> Object\u201d on\n> page 3-31and Section 5.7, \u201cLifetime of the Response Object\u201d on page 5-50\n> respectively. Be aware that other than the startAsync , and complete\n> methods, the\n> request and response objects are not thread safe. If those objects were\n> accessed in the\n> multiple threads, the access should be synchronized or be done through a\n> wrapper\n> to add the thread safety, for instance, synchronizing the call of the\n> methods to access\n> the request attribute, or using a local output stream for the response\n> object within a\n> thread.\"\n> \n> Anyway, if despite the last sentence, you want to fix this \"issue\", go ahead\n> :)\n\nI would argue that the spec here limits its scope to the \"request and response objects\" themselves. The servlet spec doesn't cover java.io.Writer, and therefore the servlet spec is silent on the thread safety of the PrintWriter returned by response.getWriter.\n\nIt may be worth noting that ServletOutputStream and OutputStream seem to say nothing about thread safety, implying that one can use response.getOutputStream to avoid the costs of synchronization if necessary.", "id": 185293, "time": "2015-09-16T13:43:51Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-09-16T13:43:51Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 58411, "attachment_id": null, "id": 185294, "time": "2015-09-16T13:44:44Z", "creator": "remm@apache.org", "creation_time": "2015-09-16T13:44:44Z", "is_private": false, "text": "\"or using a local output stream for the response object within a thread.\""}, {"count": 15, "tags": [], "bug_id": 58411, "attachment_id": null, "text": "(In reply to Remy Maucherat from comment #14)\n> \"or using a local output stream for the response object within a thread.\"\n\nRe-reading that section several times, I think you're right that the servlet spec mentions no requirements, here, but the Java API and associated Javadoc still do. Specifically in the case of a Writer.", "id": 185297, "time": "2015-09-16T16:09:45Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-09-16T16:09:45Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 58411, "is_private": false, "id": 185378, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2015-09-21T09:34:56Z", "time": "2015-09-21T09:34:56Z", "text": "The performance impact of adding the syncs is small but measurable (around 0.4% based on my not very scientific testing) using a servlet that made 50x 1k writes.\n\nI've opened an issue with the EG to clarify the expected behaviour:\nhttps://java.net/jira/browse/SERVLET_SPEC-140\n\nI'm going to close this as INVALID for now. It can always be re-opened if the clarification from the EG is that it should be thread safe."}]
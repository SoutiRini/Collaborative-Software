[{"count": 0, "tags": [], "bug_id": 10722, "text": "If I have a reverse proxy setup like:\n\nProxyPassReverse /foo/ http://mononoke/bar/\n\nThen if the mononoke server returns a cookie with path /bar, then it will be\npassed back to the client as /bar.  On the next request to /foo, the cookie will\nnot be sent by the client, and state tracking through cookies will fail.\n\nmod_proxy should convert the cookie path from /bar to /foo, just as it changes\nLocation and other headers.", "id": 19373, "time": "2002-07-12T04:31:50Z", "creator": "x@cs.stanford.edu", "creation_time": "2002-07-12T04:31:50Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 10722, "text": "Created attachment 3373\nAgainst 1.3.26, uses ProxyReversePass setting to rewrite cookies", "id": 24061, "time": "2002-10-07T13:17:09Z", "creator": "mavricknz@yahoo.com", "creation_time": "2002-10-07T13:17:09Z", "is_private": false, "attachment_id": 3373}, {"count": 2, "tags": [], "bug_id": 10722, "is_private": false, "text": "Created attachment 3456\nPatch against 1.3.27 not great but actually works (touch wood)", "id": 24465, "time": "2002-10-14T13:24:54Z", "creator": "mavricknz@yahoo.com", "creation_time": "2002-10-14T13:24:54Z", "attachment_id": 3456}, {"count": 3, "tags": [], "bug_id": 10722, "text": "Cookie path variables do not necessarily have anything to do with the current\nURL, which is why modifying them along with Location is not necessarily what the\nadministrator might want. (example: the admin might specify path '/' meaning \"be\nsitewide\", and proxy might change \"/\" to \"/bar\" in the case of ProxyPassReverse\n/bar http://backend/ where the admin did not want this to happen)\n\nA separate configuration parameter is needed for cookies to be modified correctly.", "id": 29002, "time": "2003-01-08T10:17:17Z", "creator": "minfrin@sharp.fm", "creation_time": "2003-01-08T10:17:17Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "bill+apache@bfccomputing.com", "text": "One might want to modify both the domain and the path, so you'd need two\ndirectives, right?  For instance:\n\nProxyPassReverseCookieDomain foo.com bar.com\nProxyPassReverseCookiePath /mailprog /\n\nI'm assuming it's original->new, like most apache directives.\n\nYou'd want to be able to set this on a per-url basis, perhaps in a <Directory\nproxy:foo> block?\n\nThis seems pretty essential for flexible proxy/load balancer setup, so if I\nmissed an obvious better implementation, please comment.", "id": 57325, "time": "2004-05-13T06:14:40Z", "bug_id": 10722, "creation_time": "2004-05-13T06:14:40Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "minfrin@sharp.fm", "is_private": false, "text": "ProxyPassReverseCookieDomain and ProxyPassReverseCookiePath seem the right thing\nto do. I tend to want to limit the creation of new directives if at all\npossible, but here we specifically need to specify behavior for cookie domains\nand path.\n\nNow all we need is a patch :)\n", "id": 57878, "time": "2004-05-21T22:13:56Z", "bug_id": 10722, "creation_time": "2004-05-21T22:13:56Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 10722, "is_private": false, "text": "I've just tried porting this for Apache 2.  It ports just fine, but it's not\nadequate: it leaves \"domain=foo\" strings in a cookie untouched.\n\nIs anyone actually using this?", "id": 59527, "time": "2004-06-18T21:15:15Z", "creator": "nick@webthing.com", "creation_time": "2004-06-18T21:15:15Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "nick@webthing.com", "is_private": false, "text": "I've created a patch for this against 2.0.49 - testing encouraged.\n\nI'll port this (with any bugfixes that turn out necessary) to HEAD in the next\nfew days - someone bug me if I don't:-)", "id": 59547, "time": "2004-06-19T03:30:16Z", "bug_id": 10722, "creation_time": "2004-06-19T03:30:16Z", "attachment_id": null}, {"count": 8, "attachment_id": 11886, "creator": "nick@webthing.com", "text": "Created attachment 11886\nPatch against httpd-2.0.49", "id": 59548, "time": "2004-06-19T03:32:51Z", "bug_id": 10722, "creation_time": "2004-06-19T03:32:51Z", "tags": [], "is_private": false}, {"count": 9, "attachment_id": null, "creator": "bill+apache@bfccomputing.com", "text": "Nick, does your patch address Graham's issues?", "id": 59587, "time": "2004-06-19T14:48:16Z", "bug_id": 10722, "creation_time": "2004-06-19T14:48:16Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 10722, "text": "Bill, yes, it implements ProxyPassReverseCookieDomain and ProxyPassReverseCookiePath\n\nImplementation is in line with the ProxyPassReverse stuff, though I was strongly\ntempted to use a regexp instead (and implement regexps in ProxyPassReverse too).", "id": 59589, "time": "2004-06-19T15:32:44Z", "creator": "nick@webthing.com", "creation_time": "2004-06-19T15:32:44Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "nick@webthing.com", "text": "OK, scrub my patch.  It's fine for one cookie, but fails for two or more.\nUpdate to follow.\n", "id": 59718, "time": "2004-06-22T14:23:52Z", "bug_id": 10722, "creation_time": "2004-06-22T14:23:52Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "nick@webthing.com", "is_private": false, "text": "Created attachment 11915\nCorrected (deals with multiple cookies) patch against 2.0.49", "id": 59754, "time": "2004-06-23T09:21:25Z", "bug_id": 10722, "creation_time": "2004-06-23T09:21:25Z", "attachment_id": 11915}, {"count": 13, "tags": [], "bug_id": 10722, "is_private": false, "text": "Created attachment 11916\nDocumentation patch (URLMapping guide)", "id": 59759, "time": "2004-06-23T10:24:45Z", "creator": "nick@webthing.com", "creation_time": "2004-06-23T10:24:45Z", "attachment_id": 11916}, {"count": 14, "tags": [], "bug_id": 10722, "is_private": false, "text": "Created attachment 11917\nDocumentation patch (mod_proxy)", "id": 59760, "time": "2004-06-23T10:25:32Z", "creator": "nick@webthing.com", "creation_time": "2004-06-23T10:25:32Z", "attachment_id": 11917}, {"count": 15, "tags": [], "text": "Patch available for 2.0.49; fix now committed to HEAD", "is_private": false, "id": 60032, "creator": "nick@webthing.com", "time": "2004-06-29T06:44:25Z", "bug_id": 10722, "creation_time": "2004-06-29T06:44:25Z", "attachment_id": null}, {"count": 16, "attachment_id": null, "creator": "tschlabach@apache.org", "text": "(In reply to comment #15)\n> Patch available for 2.0.49; fix now committed to HEAD\n\nWhy is this still not in, even not in 2.0.53 if it was committed to HEAD?\n", "id": 71565, "time": "2005-02-26T20:58:54Z", "bug_id": 10722, "creation_time": "2005-02-26T20:58:54Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "creator": "graham.collinson@googlemail.com", "is_private": false, "text": "Created attachment 15543\n2.0.53, mult cookie plus location aware\n\npatch to check request uri against location ProxyPassReverseCookiePath/Domain\nis configured in.  This works for me with 2 different java servlet application\nservers behind the proxy each setting jsessionid with path=/", "id": 76752, "time": "2005-06-28T12:33:18Z", "bug_id": 10722, "creation_time": "2005-06-28T12:33:18Z", "attachment_id": 15543}, {"count": 18, "attachment_id": null, "creator": "asf.bug@gridpoint.net", "text": "(In reply to comment #17)\n> Created an attachment (id=15543) [edit]\n> 2.0.53, mult cookie plus location aware\n> \n> patch to check request uri against location ProxyPassReverseCookiePath/Domain\n> is configured in.  This works for me with 2 different java servlet application\n> servers behind the proxy each setting jsessionid with path=/\n\nMy production server is running Fedora Core 2 with the latest available Apache \navailable, httpd-2.0.51-2.9.i386.rpm.  Is there a way I can get a patch for this \nversion or a patched mod_proxy module to drop in as a replacement for the one from the \nrpm?\n\nI've tested your patch on a test FC4 system with 2.0.53 and was able to get perfect \nresults; the persistent login cookie was sent and allowed me to \"hide\" the dynamic \npages from the backend server and virtualize them on my public server.\n\nThanks,\nTony", "id": 78305, "time": "2005-08-09T19:35:23Z", "bug_id": 10722, "creation_time": "2005-08-09T19:35:23Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "creator": "bill+apache@bfccomputing.com", "text": "As far as I can tell, this made it to the trunk for Apache 2.1 but not to the 2.0 branch.\n\nhttp://svn.apache.org/viewcvs.cgi/httpd/httpd/trunk/modules/proxy/mod_proxy.c?\nrev=151248&view=markup\nhttp://svn.apache.org/viewcvs.cgi/httpd/httpd/branches/2.0.x/modules/proxy/mod_proxy.c?\nrev=151405&view=markup\n\nIt went in here:\nhttp://svn.apache.org/viewcvs.cgi?rev=104070&view=rev", "id": 78308, "attachment_id": null, "bug_id": 10722, "creation_time": "2005-08-09T21:34:54Z", "time": "2005-08-09T21:34:54Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 10722, "attachment_id": null, "text": "I've just posted to dev@httpd.apache.org in support of backporting a fix for \nthis so it actually makes it into future 2.0 releases.  So there's an active \nthread now if anyone wants to discuss it. ", "id": 78405, "time": "2005-08-11T12:21:48Z", "creator": "nick@webthing.com", "creation_time": "2005-08-11T12:21:48Z", "is_private": false}, {"count": 21, "tags": [], "creator": "cyber-attack@hotmail.com", "attachment_id": 3373, "text": "Comment on attachment 3373\nAgainst 1.3.26, uses ProxyReversePass setting to rewrite cookies\n\n*** proxy_http.c\tTue Jun 18 01:59:59 2002\n--- proxy_http.c_clean_new\tMon Oct  7 12:33:03 2002\n***************\n*** 137,142 ****\n--- 137,198 ----\n      return url;\n  }\n\n+ /* Take a cooke value and rewrite the path as required by ProxyPassReverse\nsetting.\n+  * Written for tomcat apps that add cookie path by default. NOT heavily\ntested.\n+  */\n+ \n+ static const char *proxy_cookie_reverse_map(request_rec *r, const char\n*cookie_val)\n+ {\n+   proxy_server_conf *conf;\n+   struct proxy_alias *ent;\n+   int i, l1, l2, l3, lreal, lrest;\n+   char *u;\n+   char *real_path;\n+   char *ctmp1,*ctmp2,*ctmp3,*fixed = NULL;\n+ \n+   conf = (proxy_server_conf *)ap_get_module_config(r->server->module_config,\n&proxy_module);\n+   l1 = strlen(cookie_val);\n+   ent = (struct proxy_alias *)conf->raliases->elts;\n+   ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+\t       \"ProxyPassReverse Original cookie = %s\", cookie_val);\n+   for (i = 0; i < conf->raliases->nelts; i++) {\n+     /* Find just the proxy reverse paths for cookie remapping */\n+     ctmp1 = strstr(ent[i].real, \"//\");\n+     /* go passed //, could do this above but simpler here */\n+     ctmp1 = ctmp1 + 2;\n+     /* find / which should be start of path. We have only a very\n+      *\t    simple url to parse */\n+     real_path = strstr(ctmp1, \"/\");\n+     /*  real_path now has real path so swap real in for fake */\n+     if( ctmp1 = strstr(cookie_val, \"path=\") ){\n+\tctmp2 = strstr(ctmp1, ent[i].fake);\n+\tif ( !ctmp2 ) continue;\n+\t/* go passed path= */\n+\tctmp1 += 5;\n+\t/* go passed fake entry (bit we are rewriting)*/\n+\tctmp2 += strlen(ent[i].fake);\n+\t/*\n+\t * ctmp1 is just passed path= and ctmp2 at end of fake bit,\n+\t * now add bits together\n+\t * l3 = bit up to end \"path=\" + lenght real + bit at end fake + \\0\n+\t */\n+\tlreal = strlen(real_path);\n+\tlrest = strlen(ctmp2);\n+\tl3 = ((int) (ctmp1 - cookie_val)) + lreal + lrest + 1;\n+\tfixed = ap_palloc(r->pool, l3);\n+\tstrncpy(fixed, cookie_val, (int) (ctmp1 - cookie_val));\n+\tstrncpy(&fixed[(int) (ctmp1 - cookie_val)], ctmp1, lreal);\n+\tstrncpy(&fixed[(int) (ctmp1 - cookie_val + lreal)], ctmp2, lrest);\n+\t/* strncpy(&fixed[(int) (ctmp1 - a + lreal + lrest)], '\\0', 1); */\n+\tap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+\t\t   \"ProxyPassReverse Fixed cookie = %s\", fixed);\n+     }\n+   }\n+   if( fixed ) return fixed;\n+   return cookie_val;\n+ }\n+ \n+ \n  /*\n   * This handles http:// URLs, and other URLs using a remote proxy over http\n   * If proxyhost is NULL, then contact the server directly, otherwise\n***************\n*** 153,161 ****\n      char *strp2;\n      const char *err, *desthost;\n      int i, j, sock,/* len,*/ backasswards;\n!     table *req_hdrs, *resp_hdrs;\n!     array_header *reqhdrs_arr;\n!     table_entry *reqhdrs_elts;\n      struct sockaddr_in server;\n      struct in_addr destaddr;\n      struct hostent server_hp;\n--- 209,217 ----\n      char *strp2;\n      const char *err, *desthost;\n      int i, j, sock,/* len,*/ backasswards;\n!     table *req_hdrs, *resp_hdrs, *cookie_temp;\n!     array_header *reqhdrs_arr, *resphdrs_arr;\n!     table_entry *reqhdrs_elts, *resphdrs_elts;\n      struct sockaddr_in server;\n      struct in_addr destaddr;\n      struct hostent server_hp;\n***************\n*** 555,560 ****\n--- 611,638 ----\n      if ((urlstr = ap_table_get(resp_hdrs, \"Content-Location\")) != NULL)\n\t  ap_table_set(resp_hdrs, \"Content-Location\",\nproxy_location_reverse_map(r, urlstr));\n\n+     cookie_temp = ap_make_table( r->pool, 2);\n+     resphdrs_arr = ap_table_elts(resp_hdrs);\n+     resphdrs_elts = (table_entry *)resphdrs_arr->elts;\n+     for (i = 0; i < resphdrs_arr->nelts; i++) {\n+\tif ( strcmp(resphdrs_elts[i].key, \"Set-Cookie\") == 0 ){\n+\tap_table_add( cookie_temp, \"Set-Cookie\", proxy_cookie_reverse_map(r,\nresphdrs_elts[i].val) );\n+\tap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+\t\t \"Added cookie Set-Cookie to cookie_temp = %s\",\nproxy_cookie_reverse_map(r, resphdrs_elts[i].val) );\n+\t}\n+     }\n+ \n+     if( ! ap_is_empty_table( cookie_temp ) ){\n+\tap_table_unset(resp_hdrs, \"Set-Cookie\");\n+\tresphdrs_arr = ap_table_elts(cookie_temp);\n+\tresphdrs_elts = (table_entry *)resphdrs_arr->elts;\n+\tfor (i = 0; i < resphdrs_arr->nelts; i++) {\n+\tap_table_add(resp_hdrs, \"Set-Cookie\", resphdrs_elts[i].val);\n+\tap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+\t\t     \"Added cookie Set-Cookie to resp_hdrs = %s\",\nresphdrs_elts[i].val);\n+\t}\n+     }\n+ \n  /* check if NoCache directive on this host */\n      if (nocache == 0) {\n\t  for (i = 0; i < conf->nocaches->nelts; i++) {", "id": 78805, "time": "2005-08-22T12:02:10Z", "bug_id": 10722, "creation_time": "2005-08-22T12:02:10Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 10722, "attachment_id": null, "id": 78806, "time": "2005-08-22T12:02:32Z", "creator": "cyber-attack@hotmail.com", "creation_time": "2005-08-22T12:02:32Z", "is_private": false, "text": "*** proxy_http.c\tTue Jun 18 01:59:59 2002\n--- proxy_http.c_clean_new\tMon Oct  7 12:33:03 2002\n***************\n*** 137,142 ****\n--- 137,198 ----\n      return url;\n  }\n  \n+ /* Take a cooke value and rewrite the path as required by ProxyPassReverse \nsetting.\n+  * Written for tomcat apps that add cookie path by default. NOT heavily \ntested.\n+  */\n+ \n+ static const char *proxy_cookie_reverse_map(request_rec *r, const char \n*cookie_val)\n+ {\n+   proxy_server_conf *conf;\n+   struct proxy_alias *ent;\n+   int i, l1, l2, l3, lreal, lrest;\n+   char *u;\n+   char *real_path;\n+   char *ctmp1,*ctmp2,*ctmp3,*fixed = NULL;\n+ \n+   conf = (proxy_server_conf *)ap_get_module_config(r->server->module_config, \n&proxy_module);\n+   l1 = strlen(cookie_val);\n+   ent = (struct proxy_alias *)conf->raliases->elts;\n+   ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+ \t       \"ProxyPassReverse Original cookie = %s\", cookie_val);\n+   for (i = 0; i < conf->raliases->nelts; i++) {\n+     /* Find just the proxy reverse paths for cookie remapping */\n+     ctmp1 = strstr(ent[i].real, \"//\");\n+     /* go passed //, could do this above but simpler here */\n+     ctmp1 = ctmp1 + 2;\n+     /* find / which should be start of path. We have only a very\n+      *            simple url to parse */\n+     real_path = strstr(ctmp1, \"/\");\n+     /*  real_path now has real path so swap real in for fake */\n+     if( ctmp1 = strstr(cookie_val, \"path=\") ){\n+       ctmp2 = strstr(ctmp1, ent[i].fake);\n+       if ( !ctmp2 ) continue;\n+       /* go passed path= */\n+       ctmp1 += 5;\n+       /* go passed fake entry (bit we are rewriting)*/\n+       ctmp2 += strlen(ent[i].fake);\n+       /*\n+        * ctmp1 is just passed path= and ctmp2 at end of fake bit,\n+        * now add bits together\n+        * l3 = bit up to end \"path=\" + lenght real + bit at end fake + \\0\n+        */\n+       lreal = strlen(real_path);\n+       lrest = strlen(ctmp2);\n+       l3 = ((int) (ctmp1 - cookie_val)) + lreal + lrest + 1;\n+       fixed = ap_palloc(r->pool, l3);\n+       strncpy(fixed, cookie_val, (int) (ctmp1 - cookie_val));\n+       strncpy(&fixed[(int) (ctmp1 - cookie_val)], ctmp1, lreal);\n+       strncpy(&fixed[(int) (ctmp1 - cookie_val + lreal)], ctmp2, lrest);\n+       /* strncpy(&fixed[(int) (ctmp1 - a + lreal + lrest)], '\\0', 1); */\n+       ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+ \t\t   \"ProxyPassReverse Fixed cookie = %s\", fixed);\n+     }\n+   }\n+   if( fixed ) return fixed;\n+   return cookie_val;\n+ }\n+ \n+ \n  /*\n   * This handles http:// URLs, and other URLs using a remote proxy over http\n   * If proxyhost is NULL, then contact the server directly, otherwise\n***************\n*** 153,161 ****\n      char *strp2;\n      const char *err, *desthost;\n      int i, j, sock,/* len,*/ backasswards;\n!     table *req_hdrs, *resp_hdrs;\n!     array_header *reqhdrs_arr;\n!     table_entry *reqhdrs_elts;\n      struct sockaddr_in server;\n      struct in_addr destaddr;\n      struct hostent server_hp;\n--- 209,217 ----\n      char *strp2;\n      const char *err, *desthost;\n      int i, j, sock,/* len,*/ backasswards;\n!     table *req_hdrs, *resp_hdrs, *cookie_temp;\n!     array_header *reqhdrs_arr, *resphdrs_arr;\n!     table_entry *reqhdrs_elts, *resphdrs_elts;\n      struct sockaddr_in server;\n      struct in_addr destaddr;\n      struct hostent server_hp;\n***************\n*** 555,560 ****\n--- 611,638 ----\n      if ((urlstr = ap_table_get(resp_hdrs, \"Content-Location\")) != NULL)\n          ap_table_set(resp_hdrs, \"Content-Location\", proxy_location_reverse_map\n(r, urlstr));\n  \n+     cookie_temp = ap_make_table( r->pool, 2);\n+     resphdrs_arr = ap_table_elts(resp_hdrs);\n+     resphdrs_elts = (table_entry *)resphdrs_arr->elts;\n+     for (i = 0; i < resphdrs_arr->nelts; i++) {\n+       if ( strcmp(resphdrs_elts[i].key, \"Set-Cookie\") == 0 ){\n+ \tap_table_add( cookie_temp, \"Set-Cookie\", proxy_cookie_reverse_map(r, \nresphdrs_elts[i].val) );\n+ \tap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+ \t\t \"Added cookie Set-Cookie to cookie_temp = %s\", \nproxy_cookie_reverse_map(r, resphdrs_elts[i].val) );\n+       }\n+     }\n+ \n+     if( ! ap_is_empty_table( cookie_temp ) ){\n+       ap_table_unset(resp_hdrs, \"Set-Cookie\");\n+       resphdrs_arr = ap_table_elts(cookie_temp);\n+       resphdrs_elts = (table_entry *)resphdrs_arr->elts;\n+       for (i = 0; i < resphdrs_arr->nelts; i++) {\n+ \tap_table_add(resp_hdrs, \"Set-Cookie\", resphdrs_elts[i].val);\n+ \tap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,\n+ \t\t     \"Added cookie Set-Cookie to resp_hdrs = %s\", resphdrs_elts\n[i].val);\n+       }\n+     }\n+ \n  /* check if NoCache directive on this host */\n      if (nocache == 0) {\n          for (i = 0; i < conf->nocaches->nelts; i++) {\n\n"}, {"count": 23, "tags": [], "bug_id": 10722, "is_private": false, "text": "Created attachment 17430\nUpdated patch for \"2.0.53, mult cookie plus location aware\" to 2.0.55\n\nUpdated the patch for 2.0.53 so that it applies to 2.0.55, wasnt sure how to\nproduce a patch file so have attached the updated mod_proxy.c mod_proxy.h and\nproxy_http.c files for mod_proxy 2.0.55.\n\nWould be great if this could make it back into the source tree, im sure other\nusers out there need this as well as me...", "id": 84657, "time": "2006-01-16T11:36:34Z", "creator": "adam.retter@devon.gov.uk", "creation_time": "2006-01-16T11:36:34Z", "attachment_id": 17430}, {"count": 24, "attachment_id": 17438, "creator": "bill+apache@bfccomputing.com", "text": "Created attachment 17438\ndiff -ur patch for Adam's 2.0.55 update\n\nThis is just a diff -ur format patch for Adam's update work. This should make\nit fit the Apache process better and hopefully increase odds of landing.  This\nis still Adam's work, not mine, all I did was run diff.", "id": 84683, "time": "2006-01-16T19:13:15Z", "bug_id": 10722, "creation_time": "2006-01-16T19:13:15Z", "tags": [], "is_private": false}, {"count": 25, "tags": [], "creator": "kikov@kikov.org", "is_private": false, "text": "The 2.0.55 Adam's patch doesn't work Right.\n\nI really haven't studied the case. But one of my customers complained about some\nheader variables not propagated to the real server.\n\nI know it was with a very large HTTP Header variable. I have made the test by\nmyself today and I could see cleanly that it failed just by being compiled. I\ntried an unpatched Apache an it worked pretty fine.\n\nI think I can make more tests but not today.. This comments is to say to you:\ndon't put that patch in a production environment. ;)\n\nThx", "id": 88328, "time": "2006-04-20T19:49:34Z", "bug_id": 10722, "creation_time": "2006-04-20T19:49:34Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 10722, "is_private": false, "text": "(In reply to comment #25) \n> The 2.0.55 Adam's patch doesn't work Right. \n \n2.0.55 has new proxy problems (see bug 37145).  Upgrade to 2.2 if you want \nthis functionality.  Other 2.0 variants (eg 2.0.54) are an option if you want \nthe proxy but don't care about proxied cookies. \n \nThere's also a patch for 2.0-trunk at \nhttp://people.apache.org/~colm/httpd-2.0-reverse-proxy-cookie.patch ", "id": 88331, "time": "2006-04-20T20:37:50Z", "creator": "nick@webthing.com", "creation_time": "2006-04-20T20:37:50Z", "attachment_id": null}, {"count": 27, "tags": [], "creator": "kikov@kikov.org", "attachment_id": null, "text": "Please, forget my previous message \n(http://issues.apache.org/bugzilla/show_bug.cgi?id=10722#c25). As I have read \nthe #c26, I realize that I didn't include the #37145 patch at the same time \nthat this patch. So, finally, it was failing because the lack of #37145. As I \nrestored a previous package with it enable, I got it working again.\n\nThis patch could work perfectly, but I didn't tested it well. No conclusion for \nme yet.", "id": 88340, "time": "2006-04-20T23:01:00Z", "bug_id": 10722, "creation_time": "2006-04-20T23:01:00Z", "is_private": false}, {"count": 28, "tags": [], "text": "*** Bug 40492 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 93587, "creator": "nick@webthing.com", "time": "2006-09-14T13:42:19Z", "bug_id": 10722, "creation_time": "2006-09-14T13:42:19Z", "attachment_id": null}, {"count": 29, "tags": [], "bug_id": 10722, "text": "Is anyone updating patches for the new 2.0 releases for this?  I have a case \nwhere I need to utilize the ProxyPassReverseCookieDomain and \nProxyPassReverseCookiePath in the latest 2.0 tree.\n\n", "id": 95361, "time": "2006-11-02T10:54:42Z", "creator": "tige.chastain@dfas.mil", "creation_time": "2006-11-02T10:54:42Z", "is_private": false, "attachment_id": null}, {"count": 30, "attachment_id": null, "creator": "davi@apache.org", "text": "Closing, as this has been fixed in the stable 2.2.x branch. A updated patch for the 2.0.x branch\ncan be found at http://people.apache.org/~colm/httpd-2.0-reverse-proxy-cookie.patch\nAlso, the 2.0.x patch is up for vote and should be committed soon (missing just one vote).", "id": 104193, "time": "2007-06-08T06:31:12Z", "bug_id": 10722, "creation_time": "2007-06-08T06:31:12Z", "tags": [], "is_private": false}, {"count": 31, "attachment_id": null, "creator": "thomas.blick@hp.com", "text": "Is there a patch available for v2.0.61 or v2.0.63?\nMoving to httpd v2.2.x unfortunately is no option in the environment where I \nneed the patch. \nCould you help please?\n\nhttp://people.apache.org/~colm/httpd-2.0-reverse-proxy-cookie.patch\nonly works up to v2.0.59", "id": 113947, "time": "2008-02-21T01:28:05Z", "bug_id": 10722, "creation_time": "2008-02-21T01:28:05Z", "tags": [], "is_private": false}, {"count": 32, "tags": [], "bug_id": 10722, "attachment_id": null, "id": 126821, "time": "2009-05-06T12:25:51Z", "creator": "wrowe@apache.org", "creation_time": "2009-05-06T12:25:51Z", "is_private": false, "text": "Do not reopen to request backports.  This is an issues tracking database for\nthe code development, not a user support forum"}]
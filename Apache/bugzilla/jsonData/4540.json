[{"count": 0, "attachment_id": null, "bug_id": 4540, "is_private": false, "id": 7360, "time": "2001-10-31T05:43:02Z", "creator": "Rich.Baldwin@noaa.gov", "creation_time": "2001-10-31T05:43:02Z", "tags": [], "text": "I am running tomcat on port 8081; all servlets work fine.  I have other servlets\nrunning w/ jserv/httpd; these all work fine too. According to the server.xml\nfile, the RequestInterceptor can be set to allow backwards compatiblity w/ \nthe older servlets running w/ jserv.  This works except for servlets which\nmake a database connection.  I get the following error:\n\nError: 500\nLocation: /servlet/TestPur\nInternal Servlet Error:\n\njava.lang.NullPointerException\n\tat PurchasedProduct.(PurchasedProduct.java:47)\n\tat TestPur.doGet(TestPur.java:40)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat \norg.apache.tomcat.core.ServletWrapper.doService(ServletWrapper.java:405)\n\tat org.apache.tomcat.core.Handler.service(Handler.java:287)\n\tat \norg.apache.tomcat.core.ServletWrapper.service(ServletWrapper.java:372)\n\tat \norg.apache.tomcat.core.ContextManager.internalService(ContextManager.java:797)\n\tat \norg.apache.tomcat.core.ContextManager.service(ContextManager.java:743)\n\tat \norg.apache.tomcat.service.http.HttpConnectionHandler.processConnection(HttpConne\nctionHandler.java:213)\n\tat \norg.apache.tomcat.service.TcpWorkerThread.runIt(PoolTcpEndpoint.java:416)\n\tat \norg.apache.tomcat.util.ThreadPool$ControlRunnable.run(ThreadPool.java:501)\n\tat java.lang.Thread.run(Thread.java:484)"}, {"count": 1, "attachment_id": null, "bug_id": 4540, "is_private": false, "id": 7363, "time": "2001-10-31T07:34:43Z", "creator": "marc.saegesser@apropos.com", "creation_time": "2001-10-31T07:34:43Z", "tags": [], "text": "What is going on at PurchasedProduct.java line 47 to cause the NPE to be \nthrown? \n\nPlease attach your server.xml and web.xml files to the bug report."}, {"count": 2, "tags": [], "text": "A database connection is being made through dbConnectionBroker\n\nimport java.sql.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport com.javaexchange.dbConnectionBroker.*;\nimport java.net.*;\n\npublic class PurchasedProduct extends DBServlet\n{\n    String prodNum, stnId, beginDate, endDate, refNum, magicNum, magicNumx;\n    String authKey, inputKey, chargetype, accesstype, email, notes;\n    String key = \"undefined\";\n    String sizelimitmb,in;\n    String errmsg = \"No error\";\n    String query;\n    String freea;\n    int strVal;\n    boolean free, newConn;\n    int len;\n    Statement stmt=null;\n    Connection conn = null;\n    HttpServletRequest req = null\n    //    error occurs here\n    conn = myBroker.getConnection();\n\nweb.xml\n<!DOCTYPE web-app \n    PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN\" \n    \"http://java.sun.com/j2ee/dtds/web-app_2_2.dtd\">\n\n<web-app>\n\n    <display-name>Climate Visualization</display-name>\n    <description>Climate Visualization\n    </description>\n\n    <servlet>\n        <servlet-name>StationLister</servlet-name>\n                <servlet-class>climvis.StationLister</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>StationLister</servlet-name>\n        <url-pattern>/stations</url-pattern>\n    </servlet-mapping>\n    <servlet>\n        <servlet-name>StateLister</servlet-name>\n        <servlet-class>climvis.StateLister</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>StateLister</servlet-name>\n        <url-pattern>/states</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>OneMonthPNG</servlet-name>\n        <servlet-class>ncdc.climvis.OneMonthPNG</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>OneMonthPNG</servlet-name>\n        <url-pattern>/plotonemonth</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>XYPlot</servlet-name>\n        <servlet-class>climvis.XYPlot</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>XYPlot</servlet-name>\n        <url-pattern>/XYPlot</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>XYOverlay</servlet-name>\n    <servlet-class>climvis.XYOverlay</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>XYOverlay</servlet-name>\n        <url-pattern>/XYOverlay</url-pattern>\n    </servlet-mapping>\n\n        <servlet>\n        <servlet-name>Dispatcher</servlet-name>\n        <servlet-class>climvis.Dispatcher</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n\n        <servlet-name>Dispatcher</servlet-name>\n        <url-pattern>/dispatcher</url-pattern>\n    </servlet-mapping>\n    \n    <welcome-file-list><welcome-file>index.html</welcome-file></welcome-file-lis\nt>\n</web-app>\n\n\nserver.xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n\n<Server>\n    <!-- Debug low-level events in XmlMapper startup -->\n    <xmlmapper:debug level=\"0\" />\n\n    <!-- \n\n    Logging:\n\n         Logging in Tomcat is quite flexible; we can either have a log\n         file per module (example: ContextManager) or we can have one\n         for Servlets and one for Jasper, or we can just have one\n         tomcat.log for both Servlet and Jasper.  Right now there are\n         three standard log streams, \"tc_log\", \"servlet_log\", and\n         \"JASPER_LOG\".  \n\n         Path: \n\n         The file to which to output this log, relative to\n         TOMCAT_HOME.  If you omit a \"path\" value, then stderr or\n         stdout will be used.\n\n         Verbosity: \n\n         Threshold for which types of messages are displayed in the\n         log.  Levels are inclusive; that is, \"WARNING\" level displays\n         any log message marked as warning, error, or fatal.  Default\n         level is WARNING.\n\n         verbosityLevel values can be: \n            FATAL\n            ERROR\n            WARNING \n            INFORMATION\n            DEBUG\n\n         Timestamps:\n\n         By default, logs print a timestamp in the form \"yyyy-MM-dd\n         hh:mm:ss\" in front of each message.  To disable timestamps\n         completely, set 'timestamp=\"no\"'. To use the raw\n         msec-since-epoch, which is more efficient, set\n         'timestampFormat=\"msec\"'.  If you want a custom format, you\n         can use 'timestampFormat=\"hh:mm:ss\"' following the syntax of\n         java.text.SimpleDateFormat (see Javadoc API).  For a\n         production environment, we recommend turning timestamps off,\n         or setting the format to \"msec\".\n\n         Custom Output:\n\n         \"Custom\" means \"normal looking\".  \"Non-custom\" means\n         \"surrounded with funny xml tags\".  In preparation for\n         possibly disposing of \"custom\" altogether, now the default is\n         'custom=\"yes\"' (i.e. no tags)\n\n         Per-component Debugging:\n\n         Some components accept a \"debug\" attribute.  This further\n         enhances log output.  If you set the \"debug\" level for a\n         component, it may output extra debugging information.\n    -->\n\n    <!-- if you don't want messages on screen, add the attribute\n            path=\"logs/tomcat.log\" \n         to the Logger element below\n    -->\n    <Logger name=\"tc_log\" \n            verbosityLevel = \"INFORMATION\" \n    />\n\n    <Logger name=\"servlet_log\" \n            path=\"logs/servlet.log\"\n    />\n\n    <Logger name=\"JASPER_LOG\" \n            path=\"logs/jasper.log\"\n            verbosityLevel = \"INFORMATION\" />\n\n    <!-- You can add a \"home\" attribute to represent the \"base\" for \n         all relative paths. If none is set, the TOMCAT_HOME property\n         will be used, and if not set \".\" will be used.\n         webapps/, work/ and logs/ will be relative to this ( unless \n         set explicitely to absolute paths ).\n\n         You can also specify a \"randomClass\" attribute, which determines \n         a subclass of java.util.Random will be used for generating session IDs.\n         By default this is \"java.security.SecureRandom\". \n         Specifying \"java.util.Random\" will speed up Tomcat startup, \n         but it will cause sessions to be less secure.\n\n         You can specify the \"showDebugInfo\" attribute to control whether\n         debugging information is displayed in Tomcat's default responses.\n         This debugging information includes:\n             1. Stack traces for exceptions\n             2. Request URI's that cause status codes >= 400\n         The default is \"true\", so you must specify \"false\" to prevent\n         the debug information from appearing.  Since the debugging\n         information reveals internal details about what Tomcat is serving,\n         set showDebugInfo=\"false\" if you wish increased security.\n      -->\n    <ContextManager debug=\"0\" workDir=\"work\" showDebugInfo=\"true\" >\n\n      <!-- ==================== Interceptors ==================== -->\n\n        <!-- \n         ContextInterceptor className=\"org.apache.tomcat.context.LogEvents\" \n         -->\n        \n        <ContextInterceptor className=\"org.apache.tomcat.context.AutoSetup\" />\n\n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.WebXmlReader\" />\n\n        <!-- Uncomment out if you have JDK1.2 and want to use policy \n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.PolicyInterceptor\" />\n        -->\n\n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.LoaderInterceptor\" />\n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.DefaultCMSetter\" />\n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.WorkDirInterceptor\" />\n\n        <!-- Request processing -->\n        <!-- Session interceptor will extract the session id from cookies and \n             deal with URL rewriting ( by fixing the URL ).  If you wish to\n             suppress the use of cookies for session identifiers, change the\n             \"noCookies\" attribute to \"true\"\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.SessionInterceptor\"\n            noCookies=\"false\" />\n\n        <!-- Find the container ( context and prefix/extension map ) \n             for a request.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.SimpleMapper1\" \n            debug=\"0\" />\n\n        <!-- Non-standard invoker, for backward compat. ( /servlet/* )\n             You can modify the prefix that is matched by adjusting the\n             \"prefix\" parameter below.  Be sure your modified pattern\n             starts and ends with a slash.\n\n             NOTE:  This prefix applies to *all* web applications that\n             are running in this instance of Tomcat.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.InvokerInterceptor\" \n            debug=\"0\" prefix=\"/servlet/\" />\n\n        <!-- \"default\" handler - static files and dirs.  Set the\n             \"suppress\" property to \"true\" to suppress directory listings\n             when no welcome file is present.\n\n             NOTE:  This setting applies to *all* web applications that\n             are running in this instance of Tomcat.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.StaticInterceptor\" \n            debug=\"0\" suppress=\"false\" />\n\n        <!-- Plug a session manager. You can plug in more advanced session\n             modules.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.session.StandardSessionInterceptor\" />\n\n        <!-- Check if the request requires an authenticated role.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.AccessInterceptor\" \n            debug=\"0\" />\n\n        <!-- Check permissions using the simple xml file. You can \n             plug more advanced authentication modules.\n          -->\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.SimpleRealm\" \n            debug=\"0\" />\n\n       <!-- UnComment the following and comment out the\n            above to get a JDBC realm.\n            Other options for driverName: \n              driverName=\"oracle.jdbc.driver.OracleDriver\"\n              connectionURL=\"jdbc:oracle:thin:@ntserver:1521:ORCL\"\n              connectionName=\"scott\"\n              connectionPassword=\"tiger\"\n\n              driverName=\"org.gjt.mm.mysql.Driver\"\n              connectionURL=\"jdbc:mysql://localhost/authority\"\n              connectionName=\"test\"\n              connectionPassword=\"test\"\n\n            \"connectionName\" and \"connectionPassword\" are optional.\n        -->\n        <!--\n        <RequestInterceptor \n            className=\"org.apache.tomcat.request.JDBCRealm\" \n            debug=\"99\" \n            driverName=\"sun.jdbc.odbc.JdbcOdbcDriver\" \n            connectionURL=\"jdbc:odbc:TOMCAT\" \n            userTable=\"users\" \n            userNameCol=\"user_name\" \n            userCredCol=\"user_pass\" \n            userRoleTable=\"user_roles\" \n            roleNameCol=\"role_name\" />\n        -->\n\n        <!-- Loaded last since JSP's that load-on-startup use request handling \n-->\n        <ContextInterceptor \n            className=\"org.apache.tomcat.context.LoadOnStartupInterceptor\" />\n\n      <!-- ==================== Connectors ==================== -->\n\n        <!-- Normal HTTP -->\n        <Connector className=\"org.apache.tomcat.service.PoolTcpConnector\">\n            <Parameter name=\"handler\" \n                value=\"org.apache.tomcat.service.http.HttpConnectionHandler\"/>\n            <Parameter name=\"port\" \n                value=\"8081\"/>\n        </Connector>\n\n        <!--\n            Uncomment this for SSL support. \n            You _need_ to set up a server certificate if you want this\n            to work, and you need JSSE.\n            1. Add JSSE jars to CLASSPATH \n            2. Edit java.home/jre/lib/security/java.security\n               Add:\n               security.provider.2=com.sun.net.ssl.internal.ssl.Provider\n            3. Do: keytool -genkey -alias tomcat -keyalg RSA\n               RSA is essential to work with Netscape and IIS.\n               Use \"changeit\" as password. ( or add keypass attribute )\n               You don't need to sign the certificate.\n \n            You can set parameter keystore and keypass if you want \n            to change the default ( user.home/.keystore with changeit )\n         -->\n        <!--\n        <Connector className=\"org.apache.tomcat.service.PoolTcpConnector\">\n            <Parameter name=\"handler\" \n                value=\"org.apache.tomcat.service.http.HttpConnectionHandler\"/>\n            <Parameter name=\"port\" \n                value=\"9443\"/>\n            <Parameter name=\"socketFactory\" \n                value=\"org.apache.tomcat.net.SSLSocketFactory\" />\n        </Connector>\n        -->\n\n        <!-- Apache AJP12 support. This is also used to shut down tomcat.\n          -->\n        <Connector className=\"org.apache.tomcat.service.PoolTcpConnector\">\n            <Parameter name=\"handler\" \n       value=\"org.apache.tomcat.service.connector.Ajp12ConnectionHandler\"/>\n            <Parameter name=\"port\" value=\"8097\"/>\n        </Connector>\n\n        <!-- ==================== Special webapps ==================== -->\n        <!-- You don't need this if you place your app in webapps/\n             and use defaults. \n             For security you'll also need to edit tomcat.policy\n\n             Defaults are: debug=0, reloadable=true, trusted=false\n             (trusted allows you to access tomcat internal objects \n             with FacadeManager ), crossContext=true (allows you to\n             access other contexts via ServletContext.getContext())\n \n             If security manager is enabled, you'll have read perms.\n             in the webapps dir and read/write in the workdir.\n         -->\n\n        <Context path=\"/examples\" \n                 docBase=\"webapps/examples\" \n                 crossContext=\"false\"\n                 debug=\"0\" \n                 reloadable=\"true\" > \n        </Context>\n\n        <!-- Admin context will use tomcat.core to add/remove/get info about\n             the webapplications and tomcat internals. \n             By default it is not trusted - i.e. it is not allowed access to \n             tomcat internals, only informations that are available to all \n             servlets are visible.\n\n             If you change this to true, make sure you set a password.\n          -->\n        <Context path=\"/admin\" \n                 docBase=\"webapps/admin\" \n                 crossContext=\"true\"\n                 debug=\"0\" \n                 reloadable=\"true\" \n                 trusted=\"false\" > \n        </Context>\n\n        <!-- Virtual host example - \n             In \"127.0.0.1\" virtual host we'll reverse \"/\" and \n             \"/examples\"\n             (XXX need a better example )\n             (use  \"http://127.0.0.1/examples\" )\n        <Host name=\"127.0.0.1\" >\n           <Context path=\"\" \n                    docBase=\"webapps/examples\" />\n           <Context path=\"/examples\" \n                    docBase=\"webapps/ROOT\" />\n        </Host>\n         -->\n\n    </ContextManager>\n</Server>\n", "is_private": false, "bug_id": 4540, "id": 7376, "time": "2001-10-31T09:32:12Z", "creator": "Rich.Baldwin@noaa.gov", "creation_time": "2001-10-31T09:32:12Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "marc.saegesser@apropos.com", "text": "From the code snippet it looks like conn is null (myBroker.getConnection()) \nreturned null.  That's just a guess, since the snippet doesn't include the \nacutal line that causes the exception.\n\nI don't know of any reason why this would behave differntly using the /servlet \npath as opposed to a named webapp.  I would look first at where the database \nJAR files are kept to make sure that all the required classes are available.  \nCheck the log files to see if there are any messages about exceptions that were \nthrown, but caught (and hopefully logged) by myBroker.getConnection().", "id": 7378, "time": "2001-10-31T09:46:48Z", "bug_id": 4540, "creation_time": "2001-10-31T09:46:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "marc.saegesser@apropos.com", "attachment_id": null, "text": "I can't duplicate the problem so I'm closing the bug.  If this is still a \nproblem, please re-open the bug and provide additional information.", "id": 7591, "time": "2001-11-06T06:31:55Z", "bug_id": 4540, "creation_time": "2001-11-06T06:31:55Z", "is_private": false}]
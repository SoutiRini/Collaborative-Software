[{"count": 0, "attachment_id": null, "bug_id": 42994, "is_private": false, "id": 106035, "time": "2007-07-29T17:28:10Z", "creator": "nettings@apache.org", "creation_time": "2007-07-29T17:28:10Z", "tags": [], "text": "we have a number of modules and core components that make assumptions about\nstates and transitions defined in pubs/default/config/workflow/workflow.xml.\nthere is no way around it, unless we want to really dumb down our GUI.\nthe workflow file is referenced via fallback:// in the publication.xml file, so\nwe could easily move the file from the default publication into the core. users\ncan still override it on a per-publication basis, but imnsho we must provide at\nleast a skeleton in the core, because core components should not depend on\npublication resources.\n\nwdyt?"}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> we have a number of modules and core components that make assumptions about\n> states and transitions defined in pubs/default/config/workflow/workflow.xml.\n\nUh, that's *very* bad. Can you point them out? TIA!\n\n> there is no way around it, unless we want to really dumb down our GUI.\n> the workflow file is referenced via fallback:// in the publication.xml file,\n> so we could easily move the file from the default publication into the core.\n\n-1, we shouldn't give the impression of a \"core\" workflow.\n\n", "attachment_id": null, "id": 106044, "creator": "andreas@apache.org", "time": "2007-07-30T01:49:07Z", "bug_id": 42994, "creation_time": "2007-07-30T01:49:07Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 42994, "attachment_id": null, "id": 106049, "time": "2007-07-30T03:40:25Z", "creator": "nettings@apache.org", "creation_time": "2007-07-30T03:40:25Z", "is_private": false, "text": "(In reply to comment #1)\n> (In reply to comment #0)\n> > we have a number of modules and core components that make assumptions about\n> > states and transitions defined in pubs/default/config/workflow/workflow.xml.\n> \n> Uh, that's *very* bad. Can you point them out? TIA!\n\nthe revision usecase, the way i patched it up yesterday. i'm open to suggestions\nas to avoiding workflow assumptions, but i don't see them atm. \n\nand every workflow-related usecase view has very workflow-specific i18n data.\n\nif we wanted to play this by the book, all workflow i18n must go into the\npublication, we need to introduce custom state-dependent error messages in\nworkflow.xml, and all workflow-related menu items *must* be provided by the\npublcation. that means a lot of extra boilerplate code for user publications,\nbecause the default publication basically sucks as a template.\n\ni see the benefit of keeping the usecases workflow-agnostic. but at the same\ntime i see no harm in providing a default workflow in the core - people can\nalways override it. \nin fact, i think all properties that are frequently treated as \"fallback://\"\nproperties should have a very basic version in the core, so that publications\nwith hardly more than a config file in them still work to some extent.\n\n\n> > there is no way around it, unless we want to really dumb down our GUI.\n> > the workflow file is referenced via fallback:// in the publication.xml file,\n> > so we could easily move the file from the default publication into the core.\n> \n> -1, we shouldn't give the impression of a \"core\" workflow.\n\nthe other side of the coin is that we now have core functionality that depends\non publication configuration, which to me is worse.\n\nhowever, i'm convinced now that my revision patch is highly problematic - can we\nlook at it together, to try circumvent the workflow assumptions?\n\n \n\n"}, {"count": 3, "tags": [], "bug_id": 42994, "is_private": false, "id": 106205, "creation_time": "2007-08-02T13:07:45Z", "time": "2007-08-02T13:07:45Z", "creator": "nettings@apache.org", "text": "hmm. another candidate is \"Rollback.java\". it must assume an \"edit\" event, as\nmust the editor usecases.\ni'm becoming more convinced that it's an illusion that core usecases can be\ntotally workflow-agnostic, unless we want to move all that stuff into the\npublication, which i think is a very bad idea indeed.\n\nall for reducing assumptions to the minimum, but let's not abstract the child\nout of the bath water :)", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 42994, "is_private": false, "id": 106253, "creation_time": "2007-08-03T05:04:06Z", "time": "2007-08-03T05:04:06Z", "creator": "andreas@apache.org", "text": "Maybe we can add a some workflow schema presets to the workflow module?", "attachment_id": null}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> Maybe we can add a some workflow schema presets to the workflow module?\n\nhmmm. that means publications would have to place their workflow in\n<pub>/lenya/modules/workflow/config...\ni'd rather have them in webapp/lenya/config/workflow, so that the current\nlocation does not have to change (i hope that's where fallback:// would look,\nbut i'd need to check that).\nbut if you disagree, any other place is fine with me. my main issue is that we\ndo make assumptions about states and transitions being there, and these should\nbe provided by the core if a publication does not include its own workflow (and\nnot just as examples, but as a resource to fallback:// to).\n\nthis core workflow should include authoring and live as states and edit, publish\nand maybe deactivate as events. i guess this is the minimal subset below which a\ncms no longer makes sense. wdyt?", "attachment_id": null, "id": 106265, "creator": "nettings@apache.org", "time": "2007-08-03T06:15:37Z", "bug_id": 42994, "creation_time": "2007-08-03T06:15:37Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 42994, "attachment_id": null, "is_private": false, "id": 106359, "time": "2007-08-05T04:23:00Z", "creator": "andreas@apache.org", "creation_time": "2007-08-05T04:23:00Z", "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > Maybe we can add a some workflow schema presets to the workflow module?\n> \n> hmmm. that means publications would have to place their workflow in\n> <pub>/lenya/modules/workflow/config...\n\nNo, they are addressed via URLs so they can be everywhere.\n\n> i'd rather have them in webapp/lenya/config/workflow, so that the current\n> location does not have to change (i hope that's where fallback:// would look,\n> but i'd need to check that).\n\nI don't think we need fallback for workflow schemas, since you typically don't\noverride a schema, but use a different one (which has a different name).\n\n> but if you disagree, any other place is fine with me. my main issue is that we\n> do make assumptions about states and transitions being there, and these should\n> be provided by the core if a publication does not include its own workflow (and\n> not just as examples, but as a resource to fallback:// to).\n> \n> this core workflow should include authoring and live as states and edit, publish\n> and maybe deactivate as events. i guess this is the minimal subset below which a\n> cms no longer makes sense. wdyt?\n\nHmm, no idea - what do the others think?\n"}, {"count": 7, "tags": [], "bug_id": 42994, "attachment_id": null, "id": 106360, "time": "2007-08-05T04:50:39Z", "creator": "nettings@apache.org", "creation_time": "2007-08-05T04:50:39Z", "is_private": false, "text": "(In reply to comment #6)\n> (In reply to comment #5)\n> > (In reply to comment #4)\n> > > Maybe we can add a some workflow schema presets to the workflow module?\n> > \n> > hmmm. that means publications would have to place their workflow in\n> > <pub>/lenya/modules/workflow/config...\n> \n> No, they are addressed via URLs so they can be everywhere.\n<snip>\n> I don't think we need fallback for workflow schemas, since you typically don't\n> override a schema, but use a different one (which has a different name).\n> \n\ni'd like to reduce boilerplate code in publications, and to sprinkle some more\n\"convention over configuration\" fairy dust on the publications... hence my wish\nto use fallback. but you are right, we could also accomplish this by setting a\ndefault URL that points to a minimal workflow.xml in the core, and it can be\noverridden by using the workflow attribute in\npublications.xml/resource-types/resource-type.\nbut the advantage of using fallback:// is that this configuration option is\ndiscoverable for users. everybody will read their publication.xml and find out\nthey can override the workflow if there is a fallback:// entry. the absence of\nan attribute is rather less enlightening :)\n\n> > this core workflow should include authoring and live as states and edit, publish\n> > and maybe deactivate as events. i guess this is the minimal subset below which a\n> > cms no longer makes sense. wdyt?\n\nbob has a point in that there may not even be a publish transition. but\nregardless of that, i'd say we should provide our default publication workflow\nin the core, so that all interesting features of Lenya are available without\nrequiring boilerplate code. users can always replace it with a more minimalistic\none.\n\n"}, {"count": 8, "tags": [], "bug_id": 42994, "is_private": false, "id": 106668, "creation_time": "2007-08-12T14:37:25Z", "time": "2007-08-12T14:37:25Z", "creator": "nettings@apache.org", "text": "any more thoughts on this issue? i'm prepared to shut up about it for now, *if*\nsomeone speaks up and tells me it's unimportant....", "attachment_id": null}, {"count": 9, "attachment_id": null, "bug_id": 42994, "is_private": false, "id": 107217, "time": "2007-08-24T04:01:48Z", "creator": "andreas@apache.org", "creation_time": "2007-08-24T04:01:48Z", "tags": [], "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > (In reply to comment #5)\n> > > (In reply to comment #4)\n> > > > Maybe we can add a some workflow schema presets to the workflow module?\n> > > \n> > > hmmm. that means publications would have to place their workflow in\n> > > <pub>/lenya/modules/workflow/config...\n> > \n> > No, they are addressed via URLs so they can be everywhere.\n> <snip>\n> > I don't think we need fallback for workflow schemas, since you typically don't\n> > override a schema, but use a different one (which has a different name).\n> > \n> \n> i'd like to reduce boilerplate code in publications, and to sprinkle some more\n> \"convention over configuration\" fairy dust on the publications... hence my wish\n> to use fallback. but you are right, we could also accomplish this by setting a\n> default URL that points to a minimal workflow.xml in the core, and it can be\n> overridden by using the workflow attribute in\n> publications.xml/resource-types/resource-type.\n> but the advantage of using fallback:// is that this configuration option is\n> discoverable for users. everybody will read their publication.xml and find out\n> they can override the workflow if there is a fallback:// entry. the absence of\n> an attribute is rather less enlightening :)\n\nHmm, I'm afraid I don't see the point ...\nIf the user reads something like\n\n<resource-type name=\"xhtml\"\nworkflow=\"cocoon://modules/workflow/presets/no-staging.xml\"/>\n\nI guess she will figure out how to configure her own workflow schema.\n"}, {"count": 10, "attachment_id": null, "bug_id": 42994, "is_private": false, "id": 110248, "time": "2007-11-05T11:29:17Z", "creator": "nettings@apache.org", "creation_time": "2007-11-05T11:29:17Z", "tags": [], "text": "we should revisit this issue after 2.0. there are too many workflow assumptions\nall over the place for this to reside exclusively in the default publication.\ni think a basic workflow definition belongs in the workflow module, so that\npeople can create fully-functional publications from scratch without too much\nboilerplate code and without having to inherit from the default pub.\n\n(btw, \"core\" can also mean a module - i wanted to say it should be available\nwithout having to rely on the default publication.)"}]
[{"attachment_id": null, "tags": [], "bug_id": 1550, "text": "i made a simbolic lynk under the directory webapps/<project>, \ncontaing some files to be displayed\n\n> cd $TOMCAT_HOME/webapps/<project>\n> ln -s /usr/local/.../invoices invoices\n\nExecuting the following target clean:\n\n> build clean\n\n\nit followed the symbolic link, deleting the entire directory content.\n\ncontent of build.xml:\n\n\n...\n  <target name=\"clean\">\n    <delete dir=\"${deploy.home}\"/>\n  </target>\n...", "count": 0, "id": 2134, "time": "2001-04-27T00:50:36Z", "creator": "michele.quaini@fastweb.it", "creation_time": "2001-04-27T00:50:36Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 1550, "text": "*** Bug 1551 has been marked as a duplicate of this bug. ***", "count": 1, "id": 2136, "time": "2001-04-27T00:52:23Z", "creator": "michele.quaini@fastweb.it", "creation_time": "2001-04-27T00:52:23Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "Right now I cannot see a clean way for a Java program to identify a File instance\nto be a symbolic link - so there is not much Ant can do here, that's why I've\ndegraded it to an Enhancement.\nComparing absolutePath and canonicalPath will lead to false positives on case\ninsensitive file systems or systems with uncommon file name conventions.", "id": 4176, "time": "2001-07-31T03:32:51Z", "bug_id": 1550, "creation_time": "2001-07-31T03:32:51Z", "is_private": false}, {"count": 3, "text": ">Comparing absolutePath and canonicalPath will lead to false positives on case\n>insensitive file systems or systems with uncommon file name conventions.\n\nPlease enumerate the systems you are concerned about.  Perhaps we could write \ncode such that it ignores case on such systems.\n\nThanks,\nMagesh", "creator": "umagesh@rediffmail.com", "attachment_id": null, "id": 5659, "time": "2001-09-17T07:22:59Z", "bug_id": 1550, "creation_time": "2001-09-17T07:22:59Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 1550, "text": "Windows and Mac are the filesystems that I know of where case of file names do \nnot matter.  I will send a patch soon that identifies symbolic links using \ncanonicalpath and absolutepath and deletes just the symlink instead of the \nfile/dir it links to.  Using Java, deleting a symlink is a bit round-about, but \nvery much possible.\n\nIf there are any other OSs other than Mac and Windows (that are case-\ninsensitive), please modify the isCaseSensitive method accordingly and that \nwill be all there is to it.\n\nThanks,\nMagesh\n", "id": 5724, "time": "2001-09-18T10:05:46Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-09-18T10:05:46Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Created attachment 575\n[PATCH] Deletion of symlinks does not result in deletion of file or dir it links to.  Just the symbolic link is deleted - Thanks, Magesh", "attachment_id": 575, "bug_id": 1550, "id": 5725, "time": "2001-09-18T10:08:55Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-09-18T10:08:55Z", "is_private": false}, {"count": 6, "tags": [], "text": "Additional operating systems where the default filesystem is case insensitive\ninclude OS/2 and OpenVMS (not sure about OS/390).  My main concern is that it is\nless dependent on the operating system but depends on the filesystem itself.  \n\nHFS+ devices under MacOS X, VFAT mounts under Linux (or any other Unix like\nsystem mounting local \"Windows drives\" on the i386 platform), SMB or NFS mounts\nof filesystems residing on a server that runs a case insensitive filesystem and\nso on will not be case sensitive although the operating system would indicate\nthe filesystems are sensitive.\n\nThe opposite effect would be a Windows client accessing an NFS or Samba exported\nfilesystem from a Unix box.\n\nI have no idea what the canonical path will be - whether Java will just look at\nthe operating system, but I see too many \"we don't really know\" stuff here -\nwe shouldn't rush and put it into Ant 1.4.1 IMHO, let's patch the 1.5 branch\nand collect some experience with it.", "is_private": false, "bug_id": 1550, "id": 6088, "time": "2001-09-27T02:55:22Z", "creator": "bodewig@apache.org", "creation_time": "2001-09-27T02:55:22Z", "attachment_id": null}, {"count": 7, "text": "With respect to SMB:\nLet us say we have a file c1 and a symlink to that, say, c2.  Both these files \nare in a Unix/Linux system.\n\nUsing SMB, this file becomes available to a Windows machine.  In this case, the \ngetCanonicalPath and getAbsolutePath that gets returned by the Windows JVM are \none and the same.  In fact, if we issue File.delete on c2, just c2 will be \ndeleted.  The JVM will not be intelligent enough to resolve the symlink in this \ncase.  In other words, when Samba is used, and a delete is attempted from \nWindows, the delete task will *not* follow symlinks - it won't even know it is \na symlink - it is just another file as far as Windows is concerned.\n\n+1 to patch it against 1.5 branch and get user feedback.  I don't have access \nto various systems you have mentioned (OS-X, OS/2, OpenVMS) and I have to rely \non the feedback to include additional criteria.  \n\nThanks,\nMagesh\n", "creator": "umagesh@rediffmail.com", "attachment_id": null, "id": 6120, "time": "2001-09-27T09:06:35Z", "bug_id": 1550, "creation_time": "2001-09-27T09:06:35Z", "tags": [], "is_private": false}, {"count": 8, "text": "Some wider problems when using Samba:\nAssume I am connecting to a Unix file system from Win using samba.\nAssume there are two hard files myfile (size 3) and MYFILE (size 5)\nAll of Ant's current tasks will pick the wrong file when executed from windows.\nFor example:\n\n<delete file=\"h:/MYFILE\"/>\n\nwill actually end up deleting myfile  \n\nSo, there isn't much we can do with Samba case-sensitive files as it is really a\nJava file handling problem.\n\nJust wanted to share this so that we are aware.\n\nThanks,\nMagesh\n", "bug_id": 1550, "is_private": false, "id": 6705, "time": "2001-10-15T08:27:16Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-10-15T08:27:16Z", "tags": [], "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 1550, "text": "On Mac OS-X, comparing canonicalpath and absolutepath leads to false positives\nwhen the directory is aliased.  However, case-sensitivity doesn't seem to be an\nissue here - it behaves like linux/unix.", "id": 6711, "time": "2001-10-15T11:12:43Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-10-15T11:12:43Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 1550, "text": "On the subject of case sensitivity, clearcase on windows is a sporadically case \nsensitive filesys, to the extent that \"includes=*.ttf\" seems not to match \nagainst \"UPPERCASE.TTF\". Hence code containing fragments like \t\n\t<fileset dir=\"${dir.fonts}\" includes=\"*.ttf,*.TTF\" />\nI dont know how it behaves vis-a-vis symlinks.\n\n", "count": 10, "id": 6715, "time": "2001-10-15T13:19:56Z", "creator": "steve_l@iseran.com", "creation_time": "2001-10-15T13:19:56Z", "is_private": false}, {"count": 11, "tags": [], "text": "*** Bug 4281 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 1550, "id": 6861, "time": "2001-10-18T17:21:59Z", "creator": "umagesh@rediffmail.com", "creation_time": "2001-10-18T17:21:59Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "mnelson@level1.com", "attachment_id": null, "id": 9158, "time": "2001-12-24T12:44:30Z", "bug_id": 1550, "creation_time": "2001-12-24T12:44:30Z", "is_private": false, "text": "This problem is not just with the delete task.  Suppose you want to copy a \nfilesystem that contains symbolic links.  The JVM will happily follow the \nsymbolic links rather than copy the links themselves.\n\nFor a specific example, we host a large website.  The top-level pages have \nsymbolic links that Apache follows to the content.  We can't use Ant to copy \nthe pages from our source to destination because Ant will follow the links and \ncopy the content.\n\nWe get around this problem by using the <exec> task and calling tar/untar to \nperform the copy.\n\nFundamentally, the problem is that Java has little or no knowledge of symbolic \nlinks.  Unfortunately, this won't get into the 1.4 JDK."}, {"count": 13, "tags": [], "bug_id": 1550, "text": "I don't think it makes sense for Ant to introduce some special case behavior \nfor symlinks for a few special commands.  That will just lead to confusion \nabout how Ant treats symlinks since it will be trying to not simply do what \nJava does with them (which is to see them as the actual file or directory).\n\nAs has been mentioned, this is something that will eventually be addressed by \nthe JVM:\nhttp://developer.java.sun.com/developer/bugParade/bugs/4313887.html\n\nThat said, if Ant does try to do anything special with regard to symlinks, \nwhich does seem useful in the delete task, it should be special behavior only \nactivated with an attribute that is normally false.  Among other things, that \nwill ensure backward compatibility.\n", "id": 9160, "time": "2001-12-24T13:06:27Z", "creator": "jim@pagesmiths.com", "creation_time": "2001-12-24T13:06:27Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 1550, "text": "So to summarize this bug and propose a general solution:\n\n1. Symlinks on linux can cause annoying, and even potentially dangerous\nbehavior, particularly with delete and copy type tasks. Understandably users\non these systems might want to write build files that guard against a global\ndelete of **/*.foo files (such as a accidental symlink to /usr that goes\nunnoticed and someone being dumb and forgetting they are su root when doing a\nbuild clean) (*shudder*). (most problems are likely to be much smaller, but\nstill potentially annoying)\n\n2. Java doesn't understand symlinks very well (at all?), and the mechanisims\nfor identifying them absolutely in all cases are simply not available.\nHowever, they do fall out nicely on certain file systems comparing absolute\nand canonical paths. Our problem is that we don't know what filesystems are\ngoing to be included in a FileSet and there could be more than one.\n\n3. The only person who knows what filesystems are involved is the user who\nwrites the fileset. (hopefully) Thus the reasonable thing to do is to extend\nthe functionality that _is_ offered by Java to the user, and let him/her\napply it as needed.\n\n", "id": 15346, "time": "2002-05-02T16:38:50Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-05-02T16:38:50Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "umagesh@apache.org", "attachment_id": null, "is_private": false, "id": 15347, "time": "2002-05-02T16:44:06Z", "bug_id": 1550, "creation_time": "2002-05-02T16:44:06Z", "text": "Comparing canonical and absolute paths will fail when aliases are used on unix/\nlinux systems as well.  It is not very dependable to do this, as I have learnt.\nIn other words, it will lead to false symlink positives."}, {"count": 16, "tags": [], "creator": "gus.heck@olin.edu", "attachment_id": null, "is_private": false, "id": 15348, "time": "2002-05-02T17:11:46Z", "bug_id": 1550, "creation_time": "2002-05-02T17:11:46Z", "text": "I am not sure how one would use an alias to represent a file within a \nfilesystem that would be scanned by DirectoryScanner, but for the sake of \nargument, aliases might get lumped with symlinks. The thrust of my solution, is \nto approach this by letting the user define their filesets as canonical. I \nwould expec that aliases have some of the same problems as symlinks in terms of \nunexpected behavior and gotchas. \n\nSo if the user wants to follow symlinks and aliases, they write their filesets \nas before. If they don't want to follow them (or anything else that isn't \ncanonical) then they can set isCanonical = true. If they want to follow aliases \nbut not symlinks they are out of luck, but at least they have the choice of \ncanonical or not. \n\nDocumentation should discuss what is and isn't canonical of course. "}, {"count": 17, "text": "Is there some non-canonical path that can be returned by File.list() other than \na symlink?\n\nYou may need to forgive my ignorance, but I don't see how aliases are a problem.\n\nEarlier in this bug it was mentioned that when aliases are used in linux they \nmay also lead to non-canonical paths (in addition to symlinks) I have done a \nlittle looking around (java in a Nutshell, and talking to some friends) and the \nonly place I find mention of aliases in linux is shell aliases. So what I am \nwondering is, whether or not there is any way in which aliases would effect the \nresults of a scan by directory scanner. \n\nI am not even sure of how Java can get aliases expanded by the shell when \nworking with files in the first place.\n\nDirectoryScanner compares the results of a File.list() call to the patterns \nsupplied. How is it possible for File.list() to return something that is \neffected by or contains a shell alias. \n\nIf someone could breifly explain how aliases can yeild a false positive when \ntesting the output of File.list() for symlinks with a comparison of absolute vs \ncanonical, it might greatly aid my thinking on this problem. I suspect that \neither I am completely unaware of some facet of the problem, or it isn't a \nproblem because of the source of the filenames we are working with.\n\nIf it is the latter I would like to proceed with reworking my patch to allow \nfilesets to ignore non-canonical paths, which would enable users on linux to \navoid following symlinks if this was a problem for them, and resolving the core \nof this bug. (The issue of how to safely get rid of the links left behind when \nusing delete and a fileset that ignores non-canononical paths still exists, but \none thing at a time)\n", "creator": "gus.heck@olin.edu", "attachment_id": null, "id": 15746, "time": "2002-05-08T22:21:15Z", "bug_id": 1550, "creation_time": "2002-05-08T22:21:15Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "text": "-rw-r--r--   1 umagesh  staff   286 May  8 15:44 test.java\n\nAbsolute Path: /Users/umagesh/test.java\nCanonical Path: /Volumes/data/Users/umagesh/test.java\n\nAs Absolute Path and Canonical Path do not match here, it would be treated as\na symbolic link, leading to a false positive.\n\nThe above example is on MacOS-X\n", "is_private": false, "bug_id": 1550, "id": 15748, "time": "2002-05-08T22:49:35Z", "creator": "umagesh@apache.org", "creation_time": "2002-05-08T22:49:35Z", "attachment_id": null}, {"count": 19, "text": "Apologies:\nlrwxrwxr-t   1 root  admin       19 Jan 28 18:30 Users -> /Volumes/data/Users\n\nThe base directory was a link after all.", "creator": "umagesh@apache.org", "attachment_id": null, "id": 15749, "time": "2002-05-08T22:52:18Z", "bug_id": 1550, "creation_time": "2002-05-08T22:52:18Z", "tags": [], "is_private": false}, {"count": 20, "tags": [], "bug_id": 1550, "text": "Also the code I wrote would have detected it as a real file anyway because I \nbuild and test my file object like this:\n\ntempdir = new File(dir.getCanonicalPath());\ntester = new File(tempdir, newfiles[i]);\ncan = tester.getCanonicalPath();\nabs = tester.getAbsolutePath();\nif (can.equals(abs)) {\n    noLinks.add(newfiles[i]);\n}\n\nI only flag it as a symlink if the last element in the path is non-canonical.\nThe rest of directory scanner never sees anything that fails that test.", "id": 15759, "time": "2002-05-09T01:22:53Z", "creator": "gus.heck@olin.edu", "creation_time": "2002-05-09T01:22:53Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 1550, "text": "Magesh,\n\nI've tried Gus' code in this situation already and it handles it.  The code will\nresolve the file name (test.java) afainst the canonical path of the parent\ndirectory and compare the absolute path with the canonical path of this newly\nresolved file.  Up to now I couldn't get it to create false positives on Linux\nand/or FreeBSD.", "id": 15876, "time": "2002-05-10T06:31:35Z", "creator": "bodewig@apache.org", "creation_time": "2002-05-10T06:31:35Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "text": "Awesome then!  Let's get it in.", "attachment_id": null, "bug_id": 1550, "id": 15881, "time": "2002-05-10T08:28:47Z", "creator": "umagesh@apache.org", "creation_time": "2002-05-10T08:28:47Z", "is_private": false}, {"count": 23, "text": "<fileset> will have a new followsymlink attribute that can be set to false to\navoid the deletion of symbolic links.", "creator": "bodewig@apache.org", "attachment_id": null, "id": 15894, "time": "2002-05-10T12:54:07Z", "bug_id": 1550, "creation_time": "2002-05-10T12:54:07Z", "tags": [], "is_private": false}]
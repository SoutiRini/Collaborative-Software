[{"count": 0, "tags": [], "creator": "blattj@yahoo-inc.com", "text": "Problem noticed after upgrading to 1.2.23 to pick up the fix for\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1860\n\nmod_jk now by default uses  JkOptions     +ForwardURICompatUnparsed\n\nProblem seen with Tomcat 5.0.28 through 6.0.13 and other versions are likely\naffected.\n\nThe problem:\n\nSome HTTP clients send requests like:\n\nPOST http://host/abs_path HTTP/1.1\nHost:host\n\nWhen Tomcat is fronted by mod_jk 1.2.23, requests like now produce 400 Invalid\nURI responses.\n\nAfter more testing, we found:\n\n(1) client -> (apache + mod_jk) -> tomcat: produces \"400 Invalid URI\" response\n(2) client -> (apache + mod_jk) -> (tomcat + apr): produces \"200 OK\" response\n(3) client -> tomcat: produces \"200 OK\" response\n\nStepping through case (1) with a debugger, request was rejected at this point:\n\npackage org.apache.catalina.connector;\n\npublic class CoyoteAdapter {\n    public static boolean normalize(MessageBytes uriMB) {\n        ...\n\n        // The URL must start with '/'\n        if (b[start] != (byte) '/') {\n            return false;\n        }\n\nThe byte buffer contained the full http://host/abs_path request uri.\n\nComparing the differences between org.apache.coyote.ajp.AjpAprProcessor (case 2,\nworks OK) and org.apache.jk.common.HandlerRequest (case 1, broken), we noticed\nthat AjpAprProcessor converts http://host/abs_path to /abs_path in the\nSTAGE_PREPARE phase but HandlerRequest does not.\n\nTo fix, we just copied the code from AjpAprProcessor to HandlerRequest\nessentially unchanged:\n\npackage org.apache.jk.common;\n\npublic class HandlerRequest {\n    ...\n\n    private int decodeRequest( Msg msg, MsgContext ep, MessageBytes tmpMB )\n        throws IOException    {\n        ...\n\n        decodeHeaders( ep, msg, req, tmpMB );\n\n        decodeAttributes( ep, msg, req, tmpMB );\n\n        rp.setStage(Constants.STAGE_PREPARE);\n        \n        // start yahoo! modified:\n        // note this code was taken from AjpProcessor.prepare() - other code\n        // from that method should also be considered for inclusion here\n        \n        // Check for a full URI (including protocol://host:port/)\n        ByteChunk uriBC = req.requestURI().getByteChunk();\n        if (uriBC.startsWithIgnoreCase(\"http\", 0)) {\n\n            int pos = uriBC.indexOf(\"://\", 0, 3, 4);\n            int uriBCStart = uriBC.getStart();\n            int slashPos = -1;\n            if (pos != -1) {\n                byte[] uriB = uriBC.getBytes();\n                slashPos = uriBC.indexOf('/', pos + 3);\n                if (slashPos == -1) {\n                    slashPos = uriBC.getLength();\n                    // Set URI as \"/\"\n                    req.requestURI().setBytes\n                        (uriB, uriBCStart + pos + 1, 1);\n                } else {\n                    req.requestURI().setBytes\n                        (uriB, uriBCStart + slashPos,\n                         uriBC.getLength() - slashPos);\n                }\n                MessageBytes hostMB = req.getMimeHeaders().setValue(\"host\");\n                hostMB.setBytes(uriB, uriBCStart + pos + 3,\n                                slashPos - pos - 3);\n            }\n\n        }\n        \n        // end yahoo! modified\n        \n        MessageBytes valueMB = req.getMimeHeaders().getValue(\"host\");\n        parseHost(valueMB, req);\n        // set cookies on request now that we have all headers\n        req.getCookies().setHeaders(req.getMimeHeaders());\n     \n        ...", "id": 106229, "time": "2007-08-02T17:35:53Z", "bug_id": 43019, "creation_time": "2007-08-02T17:35:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "rainer.jung@kippdata.de", "attachment_id": null, "is_private": false, "id": 106230, "time": "2007-08-02T23:28:23Z", "bug_id": 43019, "creation_time": "2007-08-02T23:28:23Z", "text": "Could you please pick up and test our mod_jk 1.2.25 snapshot at:\n\nhttp://people.apache.org/~rjung/mod_jk-dev/\n\nThe change in the forwarding option in 1.2.23 was a fast workaround. Because of\nseveral negative side effects, we improved the forwarding code in the meantime.\n\nIn 1.2.25 we use the web server decoded URL and reencode. So I would expect,\nthat we now forward /abs instead of http://host/abs.\n\nSince we are right now starting a test phase before releasing 1.2.25, it would\nbe very helpful, if you could report back your findings.\n\nThanks for pointing out this issue.\n"}, {"attachment_id": null, "tags": [], "creator": "blattj@yahoo-inc.com", "text": "mod_jk 1.2.25 has fixed this issue when the default forwarding option is used\n\nWhen the forwarding option is +ForwardURICompatUnparsed, however, the issue remains.\n\n", "count": 2, "id": 106403, "time": "2007-08-06T12:01:59Z", "bug_id": 43019, "creation_time": "2007-08-06T12:01:59Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43019, "text": "Thanks for reporting back. We will tag the version today.\n\nThe option +ForwardURICompatUnparsed exists mainly for historical reasons now.\nIt has several negative side effects, the problem you reported is one of them.\nThis will not be changed.", "id": 106428, "time": "2007-08-07T01:18:02Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2007-08-07T01:18:02Z", "is_private": false, "attachment_id": null}]
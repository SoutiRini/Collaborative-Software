[{"count": 0, "tags": [], "creator": "mgainty@hotmail.com", "text": "org.apache.catalina.connector.Connector:\n\n\n public void setProtocol(String protocol) {\n\n        if (AprLifecycleListener.isAprAvailable()) {\n            if (\"HTTP/1.1\".equals(protocol)) {\n                setProtocolHandlerClassName\n                    (\"org.apache.coyote.http11.Http11AprProtocol\");\n            } else if (\"AJP/1.3\".equals(protocol)) {\n                setProtocolHandlerClassName\n                    (\"org.apache.coyote.ajp.AjpAprProtocol\");\n            } else if (protocol != null) {\n                setProtocolHandlerClassName(protocol);\n            } else {\n                setProtocolHandlerClassName\n                    (\"org.apache.coyote.http11.Http11AprProtocol\");\n            }\n        } else {\n            if (\"HTTP/1.1\".equals(protocol)) {\n                setProtocolHandlerClassName\n                    (\"org.apache.coyote.http11.Http11Protocol\");\n            } else if (\"AJP/1.3\".equals(protocol)) {\n                setProtocolHandlerClassName\n                    (\"org.apache.coyote.ajp.AjpProtocol\");\n            } else if (protocol != null) {\n                setProtocolHandlerClassName(protocol);\n            }\n        }\n\n    }\n\n\nsetProtocol assigns protocolHandlerClassName=\"org.apache.coyote.http11.Http11AprProtocol\"\n\n\n public Connector(String protocol) {\n        setProtocol(protocol);\n        // Instantiate protocol handler\n        try {\n            Class<?> clazz = Class.forName(protocolHandlerClassName);\n            this.protocolHandler = (ProtocolHandler) clazz.newInstance();\n        } catch (Exception e) {\n            log.error\n                (sm.getString\n                 (\"coyoteConnector.protocolHandlerInstantiationFailed\", e));\n        }\n    }\n\n\n  /*** Return a configured property. */\n    public Object getProperty(String name) {\n        String repl = name;\n        if (replacements.get(name) != null) {\n            repl = replacements.get(name);\n        }\n        return IntrospectionUtils.getProperty(protocolHandler, repl);\n    }\n\n\norg.apache.tomcat.util.IntrospectionUtils\n\n\n  public static Object getProperty(Object o, String name) {\n        String getter = \"get\" + capitalize(name);\n        String isGetter = \"is\" + capitalize(name);\n\n        try {\n            Method methods[] = findMethods(o.getClass());\n            Method getPropertyMethod = null;\n\n            // First, the ideal case - a getFoo() method\n            for (int i = 0; i < methods.length; i++) {\n                Class<?> paramT[] = methods[i].getParameterTypes();\n                if (getter.equals(methods[i].getName()) && paramT.length == 0) {\n                    return methods[i].invoke(o, (Object[]) null);\n\n</snip>\n\n\norg.apache.coyote.http11.Http11AprProtocol\n\n\npublic void init() throws Exception {\n        endpoint.setName(getName());\n\n\n   public String getName() {\n        String encodedAddr = \"\";\n        if (getAddress() != null) {\n            encodedAddr = \"\" + getAddress();\n            if (encodedAddr.startsWith(\"/\"))\n                encodedAddr = encodedAddr.substring(1);\n            encodedAddr = URLEncoder.encode(encodedAddr) + \"-\";\n        }\n        return (\"http-\" + encodedAddr + endpoint.getPort());\n    }\n\n\nreturn the SSLCipherSuite() for the specified endpoint\n\n\npublic String getSSLCipherSuite() { return endpoint.getSSLCipherSuite(); }\n\n\n(assume Endpoint is Apr and Not Nio or Jio)\n\norg.apache.tomcat.util.net.AprEndpoint\n\n\nprotected String SSLCipherSuite = \"ALL\";\n    public String getSSLCipherSuite() { return SSLCipherSuite; }\n    public void setSSLCipherSuite(String SSLCipherSuite) { this.SSLCipherSuite = SSLCipherSuite; }\n\nJDK 1.6\nTC 7.0.2\n\nMartin Gainty\n9 Jan 2013", "id": 164524, "attachment_id": null, "bug_id": 54394, "creation_time": "2013-01-09T13:44:29Z", "time": "2013-01-09T13:44:29Z", "is_private": false}]
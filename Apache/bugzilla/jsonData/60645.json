[{"count": 0, "tags": [], "creator": "baier@semedy.com", "is_private": false, "text": "The interceptor\n\norg.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer\n\nis not thread-safe. \n\nSome JDBC drivers (e.g. MSSQL) allow to use a single JDBC connection in multiple threads (a statement cannot be shared across threads). \n\nIn our application we use multiple different threads which operate on the same JDBC connection. If a statement is created then the StatementFinalizer stores it in a java.util.LinkedList (which is not thread-safe and may damage the data structure).\n\nThis might lead to a\n\njava.lang.NullPointerException\n\tat java.util.LinkedList.unlink(LinkedList.java:211)\n\tat java.util.LinkedList.remove(LinkedList.java:526)\n\tat org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer.closeInvoked(StatementFinalizer.java:59)\n\tat org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:59)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108)\n\tat org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(ConnectionState.java:152)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108)\n\tat org.apache.tomcat.jdbc.pool.TrapException.invoke(TrapException.java:40)\n\n\nOur workaround was to create our own thread-safe statement finalizer.", "id": 196407, "time": "2017-01-25T16:05:12Z", "bug_id": 60645, "creation_time": "2017-01-25T16:05:12Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 60645, "text": "The JDBC spec doesn't mandate thread-safety for the various classes, so you shouldn't expect them to be thread-safe.\n\nThat said, it seems like StatementFinalizer should probably be thread-safe in case the JDBC driver itself guarantees thread safety. Or, even better, a MT-safe StatementFinalizer could be provided when it is required (which I would think would be an unusual situation).\n\nWould you care to donate your MT-safe StatementFinalizer class to the project?", "count": 1, "id": 196419, "time": "2017-01-25T20:03:52Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-01-25T20:03:52Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 34679\nA thread-safe variant of the original StatementFinalizer\n\nThis is a slightly modified version of the original StatementFinalizer. There are only two changes:\n\n1) It uses an ArrayList instead of a LinkedList.\n2) The access on the \"statements\" list is synchronized.\n\nNote that I don't think a more sophisticated implementation (e.g. with a concurrent copy-on-write datastructure) is needed because I'd not expect a high thread contention.", "attachment_id": 34679, "bug_id": 60645, "id": 196446, "time": "2017-01-26T08:59:20Z", "creator": "baier@semedy.com", "creation_time": "2017-01-26T08:59:20Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60645, "is_private": false, "id": 196495, "attachment_id": null, "creator": "chris@christopherschultz.net", "creation_time": "2017-01-27T15:23:53Z", "time": "2017-01-27T15:23:53Z", "text": "Could this class have been written as a subclass of StatementFinalizer that simply overrides all the methods with synchronized versions and delegates to the superclass? That would be less code to maintain."}, {"count": 4, "tags": [], "creator": "baier@semedy.com", "is_private": false, "text": "(In reply to Christopher Schultz from comment #3)\n> Could this class have been written as a subclass of StatementFinalizer that\n> simply overrides all the methods with synchronized versions and delegates to\n> the superclass? That would be less code to maintain.\n\nThe new StatementFinalizer class also replaces the LinkedList with an ArrayList (but this is not the important change - I think it would also be okay if you would keep the original LinkedList implementation).\n\nBut why would you want to keep both the original StatementFinalizer class and the thread-safe StatementFinalizer class? I think it would be really good to have just one StatementFinalizer class which is thread-safe.", "id": 196496, "time": "2017-01-27T16:17:03Z", "bug_id": 60645, "creation_time": "2017-01-27T16:17:03Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60645, "is_private": false, "id": 196503, "attachment_id": null, "creator": "chris@christopherschultz.net", "creation_time": "2017-01-27T18:52:40Z", "time": "2017-01-27T18:52:40Z", "text": "(In reply to baier from comment #4)\n> But why would you want to keep both the original StatementFinalizer class\n> and the thread-safe StatementFinalizer class?\n\nSynchronization is not necessary for most users, so they don't need to pay the penalty. Yes, uncontested locks are fairly inexpensive, but when they aren't needed at all, they can be completely eliminated."}]
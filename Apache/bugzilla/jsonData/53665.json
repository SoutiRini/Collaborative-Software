[{"count": 0, "tags": [], "creator": "mdeggers@gmail.com", "is_private": false, "id": 161123, "creation_time": "2012-08-06T20:06:36Z", "time": "2012-08-06T20:06:36Z", "bug_id": 53665, "text": "Created attachment 29175\nSVN diff against current Tomcat 7 branch\n\nWhen configuring mail sessions via JNDI and the Resource element, there is no mention of a password attribute. This attribute is useful if you wish Tomcat to manage the remote connection. One such use case is where the source code to the web application is not available, but requires authenticated connection to an external mail server.\n\nTomcat has this capability in the default org.apache.naming.factory.MailSessionFactory class, but it's not documented.\n\nThe proposed patch amends the jndi-howto document with this information.", "attachment_id": 29175}, {"count": 1, "attachment_id": null, "bug_id": 53665, "is_private": false, "id": 162759, "time": "2012-10-15T00:27:15Z", "creator": "david.bullock@machaira.com.au", "creation_time": "2012-10-15T00:27:15Z", "tags": [], "text": "I was about to file this one, and noticed I had been beaten to the punch.  My description for the issue would have been: \n\n\"Documentation of JavaMail JNDI resource factories fails to document the 'password' attribute\".\n\nI was lucky to have found http://stackoverflow.com/questions/6372171/documentation-of-java-mail-api-configuration-for-jndi-in-tomcat or else I'd have been reading the source-code myself.\n\nIt's great that when we get a javax.mail.Session via JNDI, Tomcat can arrange for it to have an administrator-configured javax.mail.Authenticator already.\n\nBut you do need to:\n\na) tell the administrator:\n   i) what they're doing (causing the Session to issue Transports with Authenitcators already set); and\n  ii) how to do it (using the 'password' attribute in combination with various JavaMail provider attributes)\n\nb) re-assure the coder that:\n   i) Transport.send(aMessage) ... is right; and using\n  ii) aTransport.sendMessage() ... is not *necessary*, because\n iii) the behaviour of Transport.send(Message), in calling aTransport.connect() is OK so long as the deployer knew his work.\n\nc) document who \"wins\" when the coder calls aTransport.connect(String,String,String) and aTransport.sendMessage(Message) in lieu of using Transport.send(Message)... BUT the deployer already set things up such that the Transport has an Authenticator.  Who will prevail?  (NB.  This is an entirely legitimate use of the Transport, at least as far as the JavaMail FAQ is concerned: http://www.oracle.com/technetwork/java/faq-135477.html#send   I'm not sure if the JavaEE spec says anything about it. (I hope it does, but hopes are not high, and I don't have time to hunt for it rght now)."}, {"count": 2, "attachment_id": null, "bug_id": 53665, "is_private": false, "id": 167926, "time": "2013-06-20T14:27:39Z", "creator": "markt@apache.org", "creation_time": "2013-06-20T14:27:39Z", "tags": [], "text": "This has been fixed in trunk and 7.0.x and will be included in 7.0.42 onwards.\n\nI based the changes on the information in the SO question rather than the suggested patch as it provides a little more concrete information about what is going on."}]
[{"count": 0, "tags": [], "bug_id": 50642, "attachment_id": 26541, "text": "Created attachment 26541\nServletContextListener that removes the leaked ClassLoader reference\n\nsun.net.www.http.HttpClient.kac.keepAliveTimer.contextClassLoader causes a memory leak as it references the webapp's classloader rather than Tomcat's.\n\nJreMemoryLeakPreventionListener claims to fix this, but only loads sun.net.www.http.HttpClient and does not create the timer thread. Thus the leak still exists.\n\nAFAICT, the attached listener does successfully prevent the leak.", "id": 143594, "time": "2011-01-24T10:45:14Z", "creator": "james@howeswho.co.uk", "creation_time": "2011-01-24T10:45:14Z", "is_private": false}, {"count": 1, "tags": [], "text": "Could this be something that is done speculatively?\n\nI'm not sure HttpClient can be rigged to definitely launch it's thread during Tomcat startup, which is where the JreMemoryLeakPreventionListener does most of it's work. There is no URL to which we can guarantee a connection to succeed, unless we fire-up an HTTP connector just for this purpose. That could fail for ay number of reasons and just seems like confusion waiting to happen.\n\nThe patch as it stands is somewhat fragile (no error checking, blindly using a Sun-specific class, etc.) but very understandable and could be implemented easily using something similar to the ThreadLocalLeakPreventionListener.", "is_private": false, "bug_id": 50642, "id": 143599, "time": "2011-01-24T14:46:24Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-01-24T14:46:24Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Looking at the KeepAliveCache more closely, the currently solution is the wrong approach. Because the thread only exists for as long as it is needed and is re-created as necessary it has to be dealt with on web application stop.", "is_private": false, "bug_id": 50642, "id": 143704, "time": "2011-01-27T08:41:35Z", "creator": "markt@apache.org", "creation_time": "2011-01-27T08:41:35Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 143720, "time": "2011-01-27T11:42:05Z", "bug_id": 50642, "creation_time": "2011-01-27T11:42:05Z", "is_private": false, "text": "I believe I have a working patch but I have been unable to trigger the creation of the keep-alive thread to test it. A simple test case that triggers this thread creation is needed to resolve this issue."}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": 26564, "is_private": false, "id": 143723, "time": "2011-01-27T12:43:04Z", "bug_id": 50642, "creation_time": "2011-01-27T12:43:04Z", "text": "Created attachment 26564\nServlet that should trigger this thread to be created\n\nIt's ugly, but it gets the job done. Stay away from SecurityManager :)\n\nYou can run it from CLI, too."}, {"count": 5, "tags": [], "bug_id": 50642, "attachment_id": 26566, "text": "Created attachment 26566\nAlternative implementation of the servlet\n\nAlternative implementation of the servlet, now using only official API to trigger the issue. Reflection is used only to inspect the state afterwards.\n\nTo map the servlet:\n    <servlet>\n      <servlet-name>issue50642</servlet-name>\n      <servlet-class>issue50642.HttpClientServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n      <servlet-name>issue50642</servlet-name>\n      <url-pattern>/issue50642</url-pattern>\n    </servlet-mapping>\n\nWhen being run as a servlet in TC 7.0.x it prints:\n\nKeepAliveThread: null, cl=null\nKeepAliveThread: Thread[Keep-Alive-Timer,8,system], cl=WebappClassLoader\n  context: /examples\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@19f953d", "id": 143727, "time": "2011-01-27T13:22:23Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-01-27T13:22:23Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50642, "attachment_id": null, "text": "Grr. Eclipse hides system threads by default - hence my failure to re-create this.\n\nAnyway....\n\nFixed in 7.0.x and will be included in 7.0.7 onwards.\n\nProposed for 6.0.x", "id": 143751, "time": "2011-01-28T08:06:21Z", "creator": "markt@apache.org", "creation_time": "2011-01-28T08:06:21Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 50642, "attachment_id": null, "text": "Fixed in 6.0, will be in 6.0.32.", "id": 143912, "time": "2011-02-02T10:46:02Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-02-02T10:46:02Z", "is_private": false}, {"count": 8, "attachment_id": null, "creator": "dennis.homann@coremedia.com", "is_private": false, "id": 145936, "time": "2011-04-21T14:10:05Z", "bug_id": 50642, "creation_time": "2011-04-21T14:10:05Z", "tags": [], "text": "The issue is still present in 6.0.32. In more than 50% of my attempts, the KeepAliveThread is not cleared correctly. Debugging and profiling showed that in these cases, the Thread object is still kept around, even though the thread was no longer active. In that case, ThreadGroup#enumerate does not even list it (WebappClassLoader#getThreads), although it's still shown in the profiler (YourKit in my case) and holds a reference to the WebappClassLoader. Even if it was listed by enumerate, WebappClassLoader#clearReferencesThreads would skip it as it is not alive."}]
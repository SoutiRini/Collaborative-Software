[{"count": 0, "attachment_id": null, "creator": "michael.sinz@sinz.org", "text": "I have a simple redirect rule that looks something like this:\n\n  RewriteCond %{QUERY_STRING} Insurrection=rss\n  RewriteRule ^svn/(.*)$ /rss.cgi/$1  [R,L]\n\nNow, the URL given is to a file which happens to have various strange characters\nin it, thus the URL is very escaped.  The URL looks like:\n\nhref=\"/svn/example/trunk/tests/CanThisWork&amp;amp%3bInSVN%3f/test?Insurrection=rss\"\n\nand the end result is that the %3f (which is a \"?\") and all after it is stripped\noff.  If I have the page link directly to the target of the rewrite within the\nHTML, it works.\n\nNote that things are even worse if I try to use the [P,L] (proxy) rather than\njust redirect [R,L] as then other escaped characters cause problems.\n\nI have not yet put together a full set of test cases but the following does work\nin [R,L] but not in [P,L]\n\nhref=\"/svn/example/trunk/tests/Really%21%7E%23$%25@%5e*%28%29&amp;%20Nasty/test?Insurrection=rss\"\n\nI will put some of the test cases on the public web site at\nhttp://svn.sinz.com:8000/ using exactly these rewrite rules.", "id": 74090, "time": "2005-04-25T17:11:56Z", "bug_id": 34602, "creation_time": "2005-04-25T17:11:56Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "Specifically, the example of:\n\nhttp://svn.sinz.com:8000/svn/example/trunk/tests/TestCase-%3f-/test.txt?Insurrection=log\n\ndoes not work while what should have been the rewritten URL does:\n\nhttp://svn.sinz.com:8000/log.cgi/example/trunk/tests/TestCase-%3f-/test.txt?Insurrection=log\n\nI have now put some specific test cases on the web site for public access at the\nSubversion/Insurrection URL of http://svn.sinz.com:8000/svn/example/trunk/tests/\n", "id": 74094, "time": "2005-04-25T18:26:43Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-04-25T18:26:43Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 34602, "text": "I have now verified this with 2.0.54", "id": 74199, "time": "2005-04-28T01:48:58Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-04-28T01:48:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 74757, "time": "2005-05-12T01:08:52Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-05-12T01:08:52Z", "text": "This is actually worse that I thought.\n\nIn the redirect case, all CGI parameters that have URL escaped characters are\nmunged into being double-escaped.\n\nThe \"%3F\" escape within the URL path part after the rewrite looks like it is no\nlonger escaped and now becomes the CGI introducer.\n\nIn the proxy case, the CGI parameters are fine but a number of escape codes in\nthe URL path part now get confused.\n\nSee the tests at http://svn.sinz.com:8000/rewrite-test/index.html\n\nThis is against Apache 2.0.54\n"}, {"count": 4, "tags": [], "bug_id": 34602, "attachment_id": 15000, "text": "Created attachment 15000\nTest page that lets you try all of the 7-bit ASCII test cases\n\nThis is the source to the test case that I have on\nhttp://svn.sinz.com:8000/rewrite-test/index.html\n\nThe test code is also available from my Subversion server at\nhttp://svn.sinz.com:8000/svn/Web/rewrite-test/", "id": 74758, "time": "2005-05-12T01:12:37Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-05-12T01:12:37Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34602, "text": "If I remember right URLs that are rewritten will be escaped by defult. Maybe\nthere is still a problem above and beyond this but I didn't see you mention\ntests using the \"NE\" option, per the apache 2 docs this is defined as:\n\n 'noescape|NE' (no URI escaping of output)\nThis flag keeps mod_rewrite from applying the usual URI escaping rules to the\nresult of a rewrite. Ordinarily, special characters (such as '%', '$', ';', and\nso on) will be escaped into their hexcode equivalents ('%25', '%24', and '%3B',\nrespectively); this flag prevents this from being done. This allows percent\nsymbols to appear in the output, as in\n\nRewriteRule /foo/(.*) /bar?arg=P1\\%3d$1 [R,NE]\nwhich would turn '/foo/zed' into a safe request for '/bar?arg=P1=zed'.", "id": 75610, "time": "2005-05-30T21:54:20Z", "creator": "padrino121@email.com", "creation_time": "2005-05-30T21:54:20Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> If I remember right URLs that are rewritten will be escaped by defult. Maybe\n> there is still a problem above and beyond this but I didn't see you mention\n> tests using the \"NE\" option, per the apache 2 docs this is defined as:\n\nI know what the NE option does, but if you look at the rewrite rules, none of\nthe rules actually use special caracters.  However, the URL has special\ncharacters in it.\n\nThe examples at http://svn.sinz.com/rewrite-test/index.html show this as the URL\npassed into the rewrite engine has the special characters and yet the data\nwithin the CGIs shows that something bad has happened.  The test page referenced\nabove shows three frames, one each of not-rewritten, R-rewritten, and\nP-rewritten requests and what the CGI/Environment says is going on.\n\n#######################################################################\nRewriteRule\t^redirect/(.*)$\t\"/rewrite-test/test.cgi/$1\"\t[R,L]\nRewriteRule\t^proxy/(.*)$\t\"/rewrite-test/test.cgi/$1\"\t[P,L]\n#######################################################################\n\nGiven that all I do is take part of the URL and change it, this should\nbe the correct way of handling it.\n", "is_private": false, "bug_id": 34602, "id": 75611, "time": "2005-05-30T22:19:31Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-05-30T22:19:31Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 34602, "text": "(In reply to comment #6)\n> RewriteRule\t^redirect/(.*)$\t\"/rewrite-test/test.cgi/$1\"\t[R,L]\n> \n> Given that all I do is take part of the URL and change it, this should\n> be the correct way of handling it.\n\nI'm seeing exactly the same thing, for the same purpose, and also NE makes no difference - I have a \nredirect that accepts a url embedded with the url and passes it to a PHP script which then redirects to \nthe embedded URL. I'd describe the problem differently - it's as if the matched subpattern has \nurldecode applied to it before it is passed to the output pattern.\n\nI'm trying to avoid this being a me-too report, so here is a thoroughly unpleasant workaround: if you \ndouble-urlencode the incoming parameter, you end up with the string you were expecting in the output \npattern. Here's what I want to be passing in:\n\nhttp://www.example.com/u/http%3A%2F%2Fwww.apache.org%2F\n\nThis rule handles it:\n\nRewriteRule ^u/(.*) redirect.php?url=$1 [R,L]\n\nmod_rewrite generates an invalid URL:\n\nredirect.php?url=http://www.apache.org/\n\nIf I double-urlencode the embedded URL:\n\nhttp://www.example.com/u/http%253A%252F%252Fwww.apache.org%252F\n\nI get:\n\nredirect.php?url=http%3A%2F%2Fwww.apache.org%2F\n\nwhich works, but undermines much of the point of having nice tidy mod_rewrite URLs.\n\nIs this bug really this straightforward? I can't think of a circumstance where you'd want this behaviour \nand it's so simple that I can't believe that this has not been encountered before. I'm running 2.0.54 on \nMacOS X and 2.0.52 on RHEL 4 and both are acting this way.", "id": 82080, "time": "2005-11-03T09:50:25Z", "creator": "marcus@synchromedia.co.uk", "creation_time": "2005-11-03T09:50:25Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "*** Bug 36986 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 34602, "id": 82145, "time": "2005-11-05T10:37:04Z", "creator": "marcus@synchromedia.co.uk", "creation_time": "2005-11-05T10:37:04Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > RewriteRule\t^redirect/(.*)$\t\"/rewrite-test/test.cgi/$1\"\t[R,L]\n> > \n> > Given that all I do is take part of the URL and change it, this should\n> > be the correct way of handling it.\n> \n[...]\n> I'm trying to avoid this being a me-too report, so here is a thoroughly\n> unpleasant workaround: if you double-urlencode the incoming parameter,\n> you end up with the string you were expecting in the output \n> pattern. Here's what I want to be passing in:\n[...]\n\nIt is unacceptable to try to double-URL encode the input as the input is\nthe valid public URL that a web browser may request.  So how do I cause\nthe input to be double encoded?  And how do I deal with the strange\nside-effects of that in the CGI scripts?  (And what of when the data\nitself has to be URL encoded but the script is called directly?)\n\nAnyway, to me this seems like a significant problem.  My workaround is\nrather nasty (see the Insurrection project) and requires some tricks\nin both the rewrite rule and the way the CGI parameters are processed\n(and thus reprocessed after applying the fixup code)\n\nA very ugly workaround that does not really cover the general case.", "id": 82652, "time": "2005-11-18T15:47:04Z", "creator": "michael.sinz@sinz.org", "creation_time": "2005-11-18T15:47:04Z", "is_private": false}, {"count": 10, "tags": [], "text": "I did say that it was unpleasant. It's obviously not a general workaround for public URLs, but if you are in \ncontrol of both generating and receiving the URLs (as I am in my current context), it's quite workable. \nSince it's obviously broken, there's not a lot else we can do until it's fixed, at which point I'll remove my \ndouble encoding. Ugly but workable beats just plain broken every time.\n\nThere is no problem with CGIs - they should expect their parameters to be URL encoded - I know PHP \nautomatically decodes all parameters, however, bear in mind that that means that it may corrupt input \ndata because it doesn't know that mod_rewrite has already done a decoding pass. If this double decoding \nhas not affected you (e.g. because your input strings don't contain %), then you're just lucky.", "is_private": false, "bug_id": 34602, "id": 82660, "time": "2005-11-18T16:37:14Z", "creator": "marcus@synchromedia.co.uk", "creation_time": "2005-11-18T16:37:14Z", "attachment_id": null}, {"attachment_id": 17573, "tags": [], "creator": "oldium.pro@seznam.cz", "text": "Created attachment 17573\nEscape internal redirects for 2.0.55\n\nThis patch escapes internal redirect requests (just before the message\n\"internal redirect with...\"). This is logical as it seems that the redirection\nis fully processed again (unescaped and so on).", "count": 11, "id": 85361, "time": "2006-02-02T18:29:41Z", "bug_id": 34602, "creation_time": "2006-02-02T18:29:41Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "Example of successful rewrite for URL http://karel.oldium.home/%/ into  \nhttp://karel.oldium.net/%/  \n   \nRule:   \n   \nRewriteCond %{HTTP_HOST} ^karel.oldium.home$   \nRewriteRule (.*) http://karel.oldium.net/$1 [last]   \n   \nLog:   \n   \n...(4) RewriteCond: input='karel.oldium.home' pattern='^karel.oldium.home$' =>   \nmatched   \n...(2) [per-dir /var/www/oldium.home/www/] rewrite %/ ->   \nhttp://karel.oldium.net/%/   \n...(2) [per-dir /var/www/oldium.home/www/] implicitly forcing redirect (rc=302)   \nwith http://karel.oldium.net/%/   \n...(2) [per-dir /var/www/oldium.home/www/] trying to replace   \nprefix /var/www/oldium.home/www/ with /   \n...(1) [per-dir /var/www/oldium.home/www/] escaping http://karel.oldium.net/%/   \nfor redirect   \n...(1) [per-dir /var/www/oldium.home/www/] redirect to   \nhttp://karel.oldium.net/%25/ [REDIRECT/302]   \n   \nThis is a correct redirect. The response from Apache to my browser is:   \n   \nHTTP/1.1 302 Found   \nDate: Thu, 02 Feb 2006 16:51:23 GMT   \nServer: Apache   \nLocation: http://karel.oldium.net/%25/   \n...   \n<p>The document has moved <a href=\"http://karel.oldium.net/%25/\">here</a>.</p>   \n...   ", "id": 85362, "time": "2006-02-02T18:31:05Z", "creator": "oldium.pro@seznam.cz", "creation_time": "2006-02-02T18:31:05Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "oldium.pro@seznam.cz", "text": "Example of local rewrite for URL http://karel.oldium.home/%/ to local /karel/%/ \n \nRule: \n \nRewriteCond %{HTTP_HOST} ^karel.oldium.home$ \nRewriteRule (.*) /karel/$1 [last] \n \nLog: \n \n...(4) RewriteCond: input='karel.oldium.home' pattern='^karel.oldium.home$' => \nmatched \n...(2) [per-dir /var/www/oldium.home/www/] rewrite %/ -> /karel/%/ \n...(2) [per-dir /var/www/oldium.home/www/] trying to replace \nprefix /var/www/oldium.home/www/ with / \n...(1) [per-dir /var/www/oldium.home/www/] escaping /karel/%/ for redirect \n...(1) [per-dir /var/www/oldium.home/www/] internal redirect with /karel/%25/ \n[INTERNAL REDIRECT] \n.../redir#1] (3) [per-dir /var/www/oldium.home/www/] add path info \npostfix: /var/www/oldium.home/www/karel/% -> /var/www/oldium.home/www/karel/%/ \n.../redir#1] (3) [per-dir /var/www/oldium.home/www/] strip per-dir \nprefix: /var/www/oldium.home/www/karel/%/ -> karel/%/ \n... continues ... \n \nThe percent sign is handled correctly. ", "count": 13, "id": 85363, "time": "2006-02-02T18:34:10Z", "bug_id": 34602, "creation_time": "2006-02-02T18:34:10Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 34602, "is_private": false, "id": 89953, "creation_time": "2006-06-08T13:57:12Z", "time": "2006-06-08T13:57:12Z", "creator": "mike@we11er.co.uk", "text": "Hi there. Just spent an hour or so looking at the mod_rewrite source.\nUnfortunately it looks like apache passes the module the path/filename part of\nthe url as already unescaped.\n\nThere is a workaround to reverse the unescaping, but you still can't use '/'\n(%2F) because it is already decoded by the time mod_rewrite gets it, and there's\nno way to know whether it was escaped or not in the original url.\n\nI hacked together a messy fixurl(...) function to re-encode '=', '&', '#' etc.,\nthen applied that to the uri variable in function \n\nint apply_rewrite_rule(...)\n\nJust before\n\n    rc = (ap_regexec(regexp, uri, AP_MAX_REG_MATCH, regmatch, 0) == 0);\n    if (! (( rc && !(p->flags & RULEFLAG_NOTMATCH)) ||\n           (!rc &&  (p->flags & RULEFLAG_NOTMATCH))   ) ) {\n        return 0;\n    }\n\nLike I say my code is a hack, so I'll leave it up to someone else to provide a\nbetter fix/patch.", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "jordan@snocap.com", "text": "I'm showing the same problem with 2.0.55. The following fails:\n\nRewriteRule ^/a/(.+)$       http://www.example.com/b/$1 [R,L]\n\nThis causes the URL:\n\nhttp://localhost/a/where%3f/get?id=1\n\nTo be mapped to:\n\nhttp://www.example.com/b/where?/get\n\ninstead of:\n\nhttp://www.example.com/b/where%3f/get?id=1\n\n", "count": 15, "id": 92158, "time": "2006-08-12T03:36:43Z", "bug_id": 34602, "creation_time": "2006-08-12T03:36:43Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "(In reply to comment #15)\n\n> RewriteRule ^/a/(.+)$       http://www.example.com/b/$1 [R,L]\n> \n> This causes the URL:\n> \n> http://localhost/a/where%3f/get?id=1\n> \n> To be mapped to:\n> \n> http://www.example.com/b/where?/get\n> \n> instead of:\n> \n> http://www.example.com/b/where%3f/get?id=1\n\nRewriteMap esc int:escape\n\nRewriteRule ^/a/(.+)$       http://www.example.com/b/${esc:$1} [R,L,NE]\n\nGiven URL?QS, core unescapes URL but not QS, and rewrite escapes both the\nURL and QS that it gets. So [NE] prevents rewrite doing the escaping, and\nthe RewriteMap causes it to escape the URL it gets, but not the QS it gets.\n\nI'm not sure it's *right*, but it seems to work for me, up to and including\n2.0.59.", "id": 94717, "time": "2006-10-11T03:39:20Z", "creator": "francis@daoine.org", "creation_time": "2006-10-11T03:39:20Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 34602, "text": "(In reply to comment #16)\n> So [NE] prevents rewrite doing the escaping, and\n> the RewriteMap causes it to escape the URL it gets, but not the QS it gets.\n> \n> I'm not sure it's *right*\n\nYes, I think so, but this is another problem not directly related to the problem\ndescribed here (rewriting rule-pattern to query string). The current behavior is\nimho wrong. If we force a redirect, the query string should remain untouched\nfrom any escaping intended for uri-paths, because this modifies the query string\nin an unexpected way. A qs like 'foo%26bar' (location header /foo?foo%2526bar)\nresults in foo%2526bar, which isn't equal to the original query string any more,\nwhile a uri like /foo%bar (location header: /foo%25bar) results in /foo%bar. But\nsome specific characters within the query string must be escaped, though (such\nas spaces).\n\n(In reply to comment #5)\n>  'noescape|NE' (no URI escaping of output)\n\nYes, the NE flag prevents that, but the uri-path may be invalid now since this\nprevents the URL-path being escaped, too.\n\n\n(In reply to comment #11)\n> Escape internal redirects for 2.0.55\n> \n> This patch escapes internal redirect requests (just before the message\n> \"internal redirect with...\"). This is logical as it seems that the redirection\n> is fully processed again (unescaped and so on).\n\nYes, this would be logical. The main difference is that this doesn't touch the\nquery string.", "id": 98543, "time": "2007-01-25T19:24:07Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2007-01-25T19:24:07Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 100290, "time": "2007-03-11T17:02:17Z", "creator": "michael@chunkycow.com.au", "creation_time": "2007-03-11T17:02:17Z", "text": "This bug is a killer for me using PHP and it`s URLENCODE function.\nBasically this encodes a space as a literal '+' in the url and escapes a literal\n'+' as %2b, the problem is that once we hit the RewriteRule the space is still\nencoded as a literal '+' and the literal '%2b' is decoded to be a literal '+'\naswell.\nAs you can imagine the RewriteMap solution dosen`t work and I`m left with no\nsolution but to double encode which is horrible.\nIs there a reason that one must decode the hex entities before the use of the\nRewriteRules and is it due to the 'being a path' way of thinking as alot more\nURLs are not only used as a path to a resource but to pass information aswell.\n\nThis is what i`d like to see:\n\n# accept a-zA-Z and %2b(escaped '+')\nRewriteRule ^resource/([a-z]|%2b)+$ /resource.ext?data=$1 [NC]\n\nThis would still fail on say '/resource/info%' as it`s not the sequence %2b etc\nand would use the first matching rule for something like:\n\nRewriteRule ^resource/([a-z]|%2|%2b)+$ /resource.ext?data=$1 [NC]\n'/resource/%2'.\n\nI`d love to hear everyone's opinion on this as I`m not sure if it would be the\ncorrect way to handle it or if it would lead to security concerns etc,\nIf there is agreement I`ll have a stab at implementing it and see where it\nleads, if it is fundamentaly wrong and you have some resources I would love to\nknow that too.\nThanks \nMichael"}, {"count": 19, "tags": [], "bug_id": 34602, "text": "(In reply to comment #18)\n> Basically this encodes a space as a literal '+' in the url and escapes a literal\n> '+' as %2b, the problem is that once we hit the RewriteRule the space is still\n> encoded as a literal '+' and the literal '%2b' is decoded to be a literal '+'\n> aswell.\n\nRewriting URI-paths into the QueryString isn't safe - both have different rules\nfor encoding. This creates problems, if you mix both together.\n\nBut you can process $_SERVER['REQUEST_URI'] within php or catch the variables\nfrom the unprased ENV THE_REQUEST with a RewriteCond.", "id": 100501, "time": "2007-03-16T14:29:35Z", "creator": "bobsiegen@googlemail.com", "creation_time": "2007-03-16T14:29:35Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "creator": "ulf.moeller@secardeo.com", "attachment_id": null, "id": 100738, "time": "2007-03-21T10:04:33Z", "bug_id": 34602, "creation_time": "2007-03-21T10:04:33Z", "is_private": false, "text": "I think this bug describes the same problem as 23295."}, {"attachment_id": null, "tags": [], "creator": "rbowen@apache.org", "is_private": false, "count": 21, "id": 100741, "time": "2007-03-21T10:16:15Z", "bug_id": 34602, "creation_time": "2007-03-21T10:16:15Z", "text": "You need to use the [NE] (NoEscape) flag in order to disable this escaping behavior."}, {"count": 22, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 100742, "time": "2007-03-21T10:25:01Z", "creator": "rbowen@apache.org", "creation_time": "2007-03-21T10:25:01Z", "text": "I'm sorry. I didn't read the entire history of the bug. Reopening on the chance\nthat someone else knows more about this than I do."}, {"count": 23, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 100745, "time": "2007-03-21T10:56:16Z", "creator": "michael.sinz@sinz.org", "creation_time": "2007-03-21T10:56:16Z", "text": "From reading bug 23295, I would say that it is related but not the same problem.\n In this case, the problem is that in this case, the escaping is done too much\n(as in escaping characters in the query string) while in the bug 23295 case, the\nescaping was not enough (as in the URI part).  (Or, if you use NE, part of the\nURI is escaped but then part is not and we once again get failure)"}, {"attachment_id": null, "tags": [], "creator": "mike@we11er.co.uk", "text": "First: wow, I didn't know this bug was still open...\n\n(In reply to comment #19)\n> But you can process $_SERVER['REQUEST_URI'] within php or catch the variables\n> from the unprased ENV THE_REQUEST with a RewriteCond.\n\nYeah, this is the method I went with in the end... and Mediawiki does the same\nthing for those that are curious.\n\nAs for the correct behaviour... well, as has been mentioned, the rules for\nescaping are slightly different between the path and query part of the url.\n\nsay you have\n\nRewriteRule ^(.*)$ pages/test.php?s=$1 [L]\n\nIf you use the url\n\n/1&a=1\n\nor\n\n/1%26a%3d1\n\n the resulting internal url ends up as pages/test.php?s=1&a=1, in other words\nmod_rewrite is parsing the path part after it has been decoded, and then doing a\ndirect copy into the query, without re-encoding it.\n\nSo the question is, should mod_rewrite parse the urls before or after url\ndecoding (maybe apache decodes before the url is passed to mod_rewrite?), and\nshould it re-encode data when it is copied to the query, or leave that up to the\nscript?\n", "count": 24, "id": 100747, "time": "2007-03-21T11:06:15Z", "bug_id": 34602, "creation_time": "2007-03-21T11:06:15Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "bobsiegen@googlemail.com", "is_private": false, "count": 25, "id": 100753, "time": "2007-03-21T13:22:44Z", "bug_id": 34602, "creation_time": "2007-03-21T13:22:44Z", "text": "(In reply to comment #24)\n> So the question is, should mod_rewrite parse the urls before or after url\n> decoding (maybe apache decodes before the url is passed to mod_rewrite?),\n\nYou might want to read\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=32328#c12 where I tried to\nexplain how mod_rewrite's processing within the directory context works."}, {"count": 26, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 100783, "time": "2007-03-22T02:03:26Z", "creator": "michael@chunkycow.com.au", "creation_time": "2007-03-22T02:03:26Z", "text": "Thanks for all the input, now knowing how to get around this and what is the\nlikely reason has helped me out of my deranged hysteria for another day.\nI`d like to ask though does anyone have a pointer to some information as to why\nthis ambiguous behavour is implememnted e.g what security concerns are there for\npaths etc as this all has me wondering about the validity of using hex coded\nentities in a SEF style URL (are there other uses that require said query\nstring/path mangling ?).\nKeep up the great work!\nMichael "}, {"count": 27, "tags": [], "bug_id": 34602, "attachment_id": 20217, "is_private": false, "id": 103348, "time": "2007-05-18T10:46:16Z", "creator": "guenther.gsenger@gmail.com", "creation_time": "2007-05-18T10:46:16Z", "text": "Created attachment 20217\nAdds escaping-functionality to backreferences\n\nThis patch adds a new flag to RewriteRule statement:\nAdding the flag [B] (or [backrefescaping]) forces mod_rewrite to escape\nbackreferences in the rewrite target.\nE.g. \nRewriteRule ^(.*)$   index.php?show=$1\t[B,L]\nIn the given example, a request to http://example.com/C++ (or\nhttp://example.com/C%2B%2B) would be redirected internally to\nindex.php?show=C%2B%2B instead of index.php?show=C++"}, {"count": 28, "attachment_id": null, "creator": "michael@chunkycow.com.au", "text": "Just to put my work around for my PHP problem with amiguous escaping with '+' \nsigns in a rewrite rule here so someone might find it useful, thanks to Bob \nIonescu and Mike Weller for their leads. \n\n// in the .htaccess file or vhost\n// accept letters, plus signs and encoded plus signs\nRewriteCond %{THE_REQUEST} /test/(([a-z]|%2b|\\+|)+)*/? [NC]\nRewriteRule . test.php?cat=%1 [NE,L] \n\n// php code for test.php\n<?\nprint_r($_GET);\n?>\n\n// URL with encoded spaces which are +'s\nwww.domain.com/test/c++stuff\n// gives\narray( [cat] => c stuff) // multiple plus signs are decoded to 1 space by PHP\n\n// URL with encoded +'s\nwww.domain.com/test/c%2b%2bstuff\n// gives\narray( [cat] => c++stuff ) // correctly decodes an encoded +\n\nHope this helps someone.", "id": 103360, "time": "2007-05-18T19:37:10Z", "bug_id": 34602, "creation_time": "2007-05-18T19:37:10Z", "tags": [], "is_private": false}, {"count": 29, "tags": [], "bug_id": 34602, "text": "Some of the comments here seem to suggest that all this is the expected\nbehavior. Well, I, for one, don't get it. Allow me to elaborate on my experience\nwith this bug.\n\nOn my site, I direct searches through /search/ followed by the search query, and\nthen another trailing slash. The rule I use is\n\n  RewriteRule ^search(/(.+))?/$ /index.php?page=search&query=$2 [L]\n\nThis works fine for queries that don't contain a slash. If I were to search for\n\"9/10\", for example, the requested path would become\n\n  /search/9%2F10/\n\nNow, from the discussion here, I gather that that won't work. And indeed, double\nencoding fixes it. I hate that solution, personally, but, more importantly:\n\n1. The error I get is a 404. First of all, the content of that error page has\nthe %2F decoded to /, which I don't fully get. But the really weird thing is\nthat my ErrorDocument 404 applies in all cases except this one--I get a standard\nblack on white 404 page for some reason.\n\n2. Since escaping is the problem, allegedly, it should work if I omit the query\nfrom the eventual URL, right? However, even the trivial\n\n  RewriteRule ^search /index.php [L]\n\nfails to match /search/9%2F10/.\n\nI realize this is not a help forum, but I would sure appreciate some input. I'm\nsorry if this is a different bug, but it seemed related.", "id": 107207, "time": "2007-08-23T16:38:34Z", "creator": "ceetee+issues.apache.org@gmail.com", "creation_time": "2007-08-23T16:38:34Z", "is_private": false, "attachment_id": null}, {"count": 30, "tags": [], "bug_id": 34602, "text": "Getting 404 for %2F indicates that you need to look at the AllowEncodedSlashes\ndirective. (I have nothing to say about other issues reported here.)", "id": 107227, "time": "2007-08-24T07:54:54Z", "creator": "slive@apache.org", "creation_time": "2007-08-24T07:54:54Z", "is_private": false, "attachment_id": null}, {"count": 31, "tags": [], "text": "I've spending the whole day debugging mod_rewrite and finally found this bug.\nHas it been fixed and incorporated into the latest release? It's quite annoying\nto have such a bug in the most widely used HTTP server on the net.", "attachment_id": null, "id": 107846, "creator": "climbingrose@gmail.com", "time": "2007-09-08T03:10:47Z", "bug_id": 34602, "creation_time": "2007-09-08T03:10:47Z", "is_private": false}, {"count": 32, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 107849, "time": "2007-09-08T04:37:10Z", "creator": "nick@webthing.com", "creation_time": "2007-09-08T04:37:10Z", "text": "*** Bug 39746 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "is_private": false, "count": 33, "id": 107850, "time": "2007-09-08T05:47:59Z", "bug_id": 34602, "creation_time": "2007-09-08T05:47:59Z", "text": "Patch from comment #27 committed to /trunk/ in r573831"}, {"attachment_id": null, "tags": [], "creator": "mike@we11er.co.uk", "is_private": false, "count": 34, "id": 107870, "time": "2007-09-08T12:05:46Z", "bug_id": 34602, "creation_time": "2007-09-08T12:05:46Z", "text": "(In reply to comment #33)\n> Patch from comment #27 committed to /trunk/ in r573831\n\nIt's taken over 2 years for this to be resolved. The power of open source, eh?"}, {"count": 35, "tags": [], "bug_id": 34602, "text": "(In reply to comment #34)\n> (In reply to comment #33)\n> > Patch from comment #27 committed to /trunk/ in r573831\n> \n> It's taken over 2 years for this to be resolved. The power of open source, eh?\n\nThe patch has been around for longer.\n\nYour option to fix it yourself, or pay someone to fix it, or work around it, has\nalways been around.", "id": 107871, "time": "2007-09-08T12:19:24Z", "creator": "nick@webthing.com", "creation_time": "2007-09-08T12:19:24Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "nick@webthing.com", "is_private": false, "count": 36, "id": 107958, "time": "2007-09-10T05:06:38Z", "bug_id": 34602, "creation_time": "2007-09-10T05:06:38Z", "text": "*** Bug 23295 has been marked as a duplicate of this bug. ***"}, {"count": 37, "tags": [], "text": "I'm not sure if people are succesfully convincing other people this IS a bug.\nLet's take another example:\n\nIncoming URL:\n/foo?bar=%3Abaz\n\nThis is a perfectly legal URL right? The \"%3A\" is a perfectly legally encoded\n\"/\" char---that is the way it OUGHT to be included. \n\nNow let's say I want to redirect all /foo urls to an external server:\n\nRewriteRule /foo http://somewhere.else.com/other [R]\n\nExpected behavior, redirect to:\nhttp://somewhere.else.com/other?bar=%3Abaz\n\nYes?\n\nACTUAL behavior, redirect to:\nhttp://somewhere.else.com/other?bar=%253Abaz\n\nSome of you are arguing that this is intended behavior? How can this possibly\nbe? I got a perfectly legal URL in with a perfectly legal query string. My\nRewriteRule should be expected to leave the query string exacty intact, right?\nYet it corrupts it to mean something else. \n\nTo me, this is obviously a bug. [And one that's causing me a serious probelm at\nthe moment to boot]. ", "is_private": false, "bug_id": 34602, "id": 109439, "time": "2007-10-17T12:57:24Z", "creator": "jonathan@dnil.net", "creation_time": "2007-10-17T12:57:24Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "michael.sinz@sinz.org", "text": "I know that I don't think this is correct behavior and that some of the\ndiscussion here seems to have missed the point of the rewrite problem that I\ninitially reported.", "count": 38, "id": 109445, "time": "2007-10-17T19:07:13Z", "bug_id": 34602, "creation_time": "2007-10-17T19:07:13Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "webdesign@ephective.com", "text": "(In reply to comment #35)\n> (In reply to comment #34)\n> > (In reply to comment #33)\n> > > Patch from comment #27 committed to /trunk/ in r573831\n> > \n> > It's taken over 2 years for this to be resolved. The power of open source, \neh?\n> \n> The patch has been around for longer.\n> \n> Your option to fix it yourself, or pay someone to fix it, or work around it, \nhas\n> always been around.\n\nAs Jonathan Rochkind stated above:\n\nIncoming URL:\n/foo?bar=%3Abaz\n\nExpected behavior, redirect to:\nhttp://somewhere.else.com/other?bar=%3Abaz\n\nACTUAL behavior, redirect to:\nhttp://somewhere.else.com/other?bar=%253Abaz\n\nI think mod_rewrite should not reencode unless I tell it to, or at the very \nleast, let me tell it not to.\n\nIf a patch exists and has not been released then what kind of money are we \ntalking here to get it fixed in a major relase?  I don't have a job but i'd be \nwilling to put a few dollars towards getting this fixed.", "count": 39, "id": 109466, "time": "2007-10-18T09:02:45Z", "bug_id": 34602, "creation_time": "2007-10-18T09:02:45Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "marcus@synchromedia.co.uk", "text": "(In reply to comment #39)\n> I think mod_rewrite should not reencode unless I tell it to, or at the very \n> least, let me tell it not to.\n\nI quite agree. Those that say that it's correct should be campaigning for a documentation change saying \"it's not \npossible to pass URL-unsafe parameters (i.e. those that require urlencoding) through mod_rewrite\". I suspect that the \nvast majority of tutorials, documentation and articles about mod_rewrite are broken by this bug - the only reason they \nwork as they are is pure luck and simplistic examples.\n \n> If a patch exists and has not been released then what kind of money are we \n> talking here to get it fixed in a major relase?  I don't have a job but i'd be \n> willing to put a few dollars towards getting this fixed.\n\nMe too. Without a patch the choices are : don't use apache, don't use mod_rewrite or (shiver) double encode \neverything. I have another workaround that's workable at the moment - instead of urlencoding params, I base64-\nencode them. Really ugly, but it works.", "count": 40, "id": 109532, "time": "2007-10-22T01:48:19Z", "bug_id": 34602, "creation_time": "2007-10-22T01:48:19Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "(In reply to comment #18)\n> This bug is a killer for me using PHP and it`s URLENCODE function.\n> Basically this encodes a space as a literal '+' in the url and escapes a literal\n> '+' as %2b\n\nThere's an easy workaround for that - use rawurlencode() instead which encodes spaces as %20 instead of +.\nIt will still suffer from this bug if the string contains any params that get rewritten.", "id": 109533, "time": "2007-10-22T01:51:25Z", "creator": "marcus@synchromedia.co.uk", "creation_time": "2007-10-22T01:51:25Z", "is_private": false}, {"count": 42, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "Folks - we know all about this bug, and it still needs someone to find time to\ntidy up the patch.  See http://marc.info/?t=118925575100001&r=1&w=2 for why the\nexisting patch isn't considered quite good enough.", "id": 109544, "time": "2007-10-22T03:07:57Z", "creator": "nick@webthing.com", "creation_time": "2007-10-22T03:07:57Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "jonathan@dnil.net", "text": "Awesome, thanks. Reassuring. ", "count": 43, "id": 109557, "time": "2007-10-22T11:48:06Z", "bug_id": 34602, "creation_time": "2007-10-22T11:48:06Z", "is_private": false}, {"count": 44, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "Fixed in r589615", "id": 109865, "time": "2007-10-29T06:20:16Z", "creator": "nick@webthing.com", "creation_time": "2007-10-29T06:20:16Z", "is_private": false}, {"count": 45, "tags": [], "bug_id": 34602, "attachment_id": null, "is_private": false, "id": 110410, "time": "2007-11-11T16:20:38Z", "creator": "nick@webthing.com", "creation_time": "2007-11-11T16:20:38Z", "text": "*** Bug 42610 has been marked as a duplicate of this bug. ***"}, {"attachment_id": null, "tags": [], "creator": "marten_berglund@hotmail.com", "is_private": false, "count": 46, "id": 119601, "time": "2008-08-08T04:49:42Z", "bug_id": 34602, "creation_time": "2008-08-08T04:49:42Z", "text": "This bug doesn't seem to be fixed after all. See\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=45529"}, {"count": 47, "tags": [], "bug_id": 34602, "attachment_id": null, "text": "Log now confirms the bug is still there - see again bug 45529", "id": 119963, "time": "2008-08-20T13:49:32Z", "creator": "marten_berglund@hotmail.com", "creation_time": "2008-08-20T13:49:32Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "aladajp@yahoo.co.jp", "is_private": false, "count": 48, "id": 140626, "time": "2010-10-09T18:08:11Z", "bug_id": 34602, "creation_time": "2010-10-09T18:08:11Z", "text": "Here is the application of above php solution, if your web host still has an Apache with this bug.\n(The bug where an external htaccess redirect double encodes url parameters)\n\nin .htaccess:\nRewriteCond ...\nRewriteRule .... /phplist_redirect10.php [L]\n\nin the file phplist_redirect10.php:\n\n<?php\nheader(\n'Location: http://'\n. $_SERVER['SERVER_NAME']\n. preg_replace\n    (\n      '/^\\/myfolder([\\-_a-zA-Z0-9]+)\\/(.*)$/'\n     ,'/myfolder/$1/$2'\n     ,$_SERVER['REQUEST_URI']\n     ) \n,TRUE\n,301  //301 for permanent redirect, 303 for temporary redirect\n);\n\n\n$_SERVER['REQUEST_URI']: the url as written in browser bar, contains first slash. like /myfolder/myfolder/some.php?a=5#bcd"}, {"attachment_id": null, "tags": [], "creator": "aren@arencambre.com", "text": "Per last few comments, this is still a problem.\n\nComment 39 puts it well:\n\n> I think mod_rewrite should not reencode unless I tell it\n> to, or at the very least, let me tell it not to.\n\nUntil the \"let me tell it not to\" is implemented, this needs to stay open.\n\nI'm running across this double-encoding problem on a proxied Perl app.", "count": 49, "id": 143498, "time": "2011-01-20T10:17:34Z", "bug_id": 34602, "creation_time": "2011-01-20T10:17:34Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "covener@gmail.com", "is_private": false, "count": 50, "id": 143500, "time": "2011-01-20T10:50:09Z", "bug_id": 34602, "creation_time": "2011-01-20T10:50:09Z", "text": "[NE] is required to not escape the substutition, whether you include characters that need escaping in-line or via a backreference. \n\nAdditionally, query strings that aren't modified are no longer escaped in 2.3 [this is one of the followup bug reports that should have been a separate bug]\n\nPlease open separate bugs for separate rewrite issues if you'd like them reconsidered.  I'd suggest even if you want to re-open this bug, you instead open a new bug with less baggage."}, {"attachment_id": null, "tags": [], "creator": "covener@gmail.com", "text": "changing disposition to WORKSFORSOME, bug too muddled for a proper closing code.", "count": 51, "id": 143501, "time": "2011-01-20T10:56:55Z", "bug_id": 34602, "creation_time": "2011-01-20T10:56:55Z", "is_private": false}]
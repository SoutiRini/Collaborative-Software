[{"count": 0, "tags": [], "bug_id": 2811, "attachment_id": null, "is_private": false, "id": 4023, "time": "2001-07-25T17:00:28Z", "creator": "dnesbitt@gensys.com", "creation_time": "2001-07-25T17:00:28Z", "text": "I have defined an interface \"FooConstants\" which contains a number of static \nfinal declarations.  I have many classes which implement this interface in \norder to get access to these \"constants\".  If I change the interface, however, \n<depend> does not cause these classes to recompile."}, {"count": 1, "tags": [], "bug_id": 2811, "attachment_id": null, "text": "Are these constants objects or primitive types?\n\nFor promitive types, the compiler is allowed to inline the values of final\nvariables - leaving no trace of where the definition came from in the generated\nclass file.  <depend> doesn't get the information that the class is dependant on\nthe interface and thus doesn't work.  See this thread for some ideas of\nweorkarounds: http://marc.theaimsgroup.com/?t=99590095900005&w=2&r=1\n", "id": 4029, "time": "2001-07-25T22:28:57Z", "creator": "bodewig@apache.org", "creation_time": "2001-07-25T22:28:57Z", "is_private": false}, {"count": 2, "tags": [], "text": "I am investigating some options for hooking in a source level dependency \nanalyzer (werken javad). This would support this type of dependency. This is \nunlikely to make Ant 1.4. I am therefore changing this to an enhancement \nrequest. ", "is_private": false, "id": 4094, "creator": "conor@apache.org", "time": "2001-07-28T07:25:39Z", "bug_id": 2811, "creation_time": "2001-07-28T07:25:39Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "bodewig@apache.org", "text": "changing title to reflect what is meant.\n\nIf a method signature is changed, depend works, it just doesn't pick up changes to \"constant\" values that are inlined by the compiler - and without source level dependency analysis this is not going to happen.\n\nThis most likely is a WONTFIX, but maybe anybody else wants to tackle it anytime later.", "id": 123046, "time": "2008-12-03T07:32:41Z", "bug_id": 2811, "creation_time": "2008-12-03T07:32:41Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 2811, "attachment_id": null, "text": "I agree with Stefan that this is a WONTFIX. The issue here is not sensibly resolvable Ant, it is the javac compiler which inlines the static constant values. This is a a known issue and has its own workaround: If you want your static constant string NOT to be statically copied into your class files, use the .intern() call. For example:\n\nclass MyClass {\n    public static final String MyVal = \"myvalue\".intern();\n    ...\n}", "id": 153023, "time": "2012-01-22T18:54:11Z", "creator": "bruce@callenish.com", "creation_time": "2012-01-22T18:54:11Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 2811, "attachment_id": null, "is_private": false, "id": 153081, "time": "2012-01-23T22:05:21Z", "creator": "jglick@apache.org", "creation_time": "2012-01-23T22:05:21Z", "text": "(In reply to comment #4)\n> If you want your\n> static constant string NOT to be statically copied into your class files, use\n> the .intern() call.\n\nSimilar tricks work for constants of primitive type. Unfortunately this results in Javadoc not mentioning the constant value, and such values cannot be used in annotations or switch statements. Only a change to the JLS (and hence javac) could really fix this."}, {"count": 6, "tags": [], "bug_id": 2811, "attachment_id": null, "is_private": false, "id": 154922, "time": "2012-03-15T02:19:03Z", "creator": "jglick@apache.org", "creation_time": "2012-03-15T02:19:03Z", "text": "http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7153958 (not available as of this writing but probably will be soon) proposes that javac \"add constant pool reference to class containing inlined constants\"."}]
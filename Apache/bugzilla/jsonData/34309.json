[{"count": 0, "tags": [], "bug_id": 34309, "text": "The following code demonstrates an issue we bumped into using ORO's REMatcher. \nThe following regexp causes the REMatcher to freeze when matching the later two \nemail addresses below.\n\nimport org.apache.oro.text.regex.MalformedPatternException;\nimport org.apache.oro.text.regex.Pattern;\nimport org.apache.oro.text.regex.Perl5Compiler;\nimport org.apache.oro.text.regex.Perl5Matcher;\n\npublic class FreezingMatches\n{\n  private static final String E_ADDRESS_NAME = \"(\\\\w|-)+((\\\\w|-|.)+)*\";\n  private static final String E_ADDRESS_DOMAIN = \"([a-zA-Z0-9]+(\\\\w|-)*\\\\.)+[a-\nzA-Z0-9]{2,4}\";\n  private static final String E_ADDRESS_PATTERN = \"^\" + E_ADDRESS_NAME + \"@\" + \nE_ADDRESS_DOMAIN + \"$\";\n  private static final String NAME_ADDRESS_PATTERN = \"^[a-zA-Z0-9]+$\";\n  private static final String ADDRESS_PATTERN = \"((\" + E_ADDRESS_PATTERN + \")|\n(\" + NAME_ADDRESS_PATTERN + \"))\";\n\n  /**\n   * Pattern used to validate recepient email address(es).\n   */\n  private static Pattern EMAIL_ADDRESS_PATTERN;\n\n  //public static final String ADDR = \"hmor@seznam.cz\"; - work OK\n  //public static final String ADDR = \"ondra@flashback-cz.net\"; - freezes\n  public static final String ADDR = \"ondra@flashback.net\"; - freezes\n\n  static\n  {\n    Perl5Compiler RECompiler = new Perl5Compiler();\n    try\n    {\n      EMAIL_ADDRESS_PATTERN = RECompiler.compile( ADDRESS_PATTERN );\n    }\n    catch (MalformedPatternException e)\n    {\n      e.printStackTrace();\n    }\n  }\n\n  public static void main( String[] args )\n  {\n    Perl5Matcher REMatcher = new Perl5Matcher();\n\n    if ( REMatcher.matches( ADDR, EMAIL_ADDRESS_PATTERN ) )\n      System.out.println( \"Matches\" );\n    else\n      System.out.println( \"Does not match\" );\n  }\n}", "id": 73308, "time": "2005-04-05T18:22:06Z", "creator": "jan.moravec@ips-ag.cz", "creation_time": "2005-04-05T18:22:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 34309, "attachment_id": null, "text": "I'm not marking this as invalid, because it is true that some regular\nexpressions will cause infinite backtracking.  That is an undesirable\nbehavior, even if it is more a symptom of the regular expression.\nPerl5Matcher still is at heart compatible with the behavior of Perl 5.003,\nwhich also exhibits the behavior.  Whenever we change the matching\nbehavior to be compatible with Perl 5.8, the problems will be resolved.\nBut first, sufficient demand for doing that work needs to surface, and\nthat is unlikely to happen given the incorporation of an official\nregular expression package in the Java core.\n\nNow, the reason we don't get distressed about this behavior is because\nyou can always improve your regular expression to eliminate the problem.\nIn your case, the problem is:\n  private static final String E_ADDRESS_NAME = \"(\\\\w|-)+((\\\\w|-|.)+)*\";\nEither you really mean:\n  private static final String E_ADDRESS_NAME = \"(\\\\w|-)+((\\\\w|-|\\\\.)+)*\";\nor\n private static final String E_ADDRESS_NAME = \"(\\\\w|-)+(.+)*\";\nNeither of these expressions causes infinite backtracking.  Use\nwhichever you intend to correct the issue.", "id": 73785, "time": "2005-04-19T05:55:22Z", "creator": "dfs@apache.org", "creation_time": "2005-04-19T05:55:22Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 34309, "is_private": false, "id": 73872, "creation_time": "2005-04-20T20:45:55Z", "time": "2005-04-20T20:45:55Z", "creator": "dfs@apache.org", "text": "*** Bug 34536 has been marked as a duplicate of this bug. ***", "attachment_id": null}]
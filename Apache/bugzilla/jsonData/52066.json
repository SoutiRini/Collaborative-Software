[{"count": 0, "tags": [], "creator": "alex-pub.apache-ant@reflexion.net", "attachment_id": null, "text": "In this code snippet starting on line 6.15 of ConnectionPool.java version 7.0.22\n\n    try {\n        //retrieve an existing connection\n        con = idle.poll(timetowait, TimeUnit.MILLISECONDS);\n    } catch (InterruptedException ex) {\n        Thread.interrupted();//clear the flag, and bail out\n        SQLException sx = new SQLException(\"Pool wait interrupted.\");\n        sx.initCause(ex);\n        throw sx;\n    } finally {\n        waitcount.decrementAndGet();\n    }\n\nThe line marked '//clear the flag, and bail out' is wrong, because after that there is no way for calling code to find out that the thread has been interrupted.\n\nThe correct behavior should be\n\n    Thread.currentThread( ).interrupt( );\n\nHere is the excerpt from the Biran Goetz's \"Java Concurrency in Practice\" chapter 5.4.\n\n<!START QUOTATION>\nFor library code there are basically two choices:\n\n-- Propagate the InterruptedException. This is often the most sensible policy if you can get away with it -- just propagate the InterruptedException to your caller.  This could involve not catching InterruptedException, or catching it and throwing it again after performing some brief activity-specific cleanup. \n\n-- Restore the interrupt. Sometimes you cannot throw InterruptedException, for instance when your code is part of a Runnable. In these situations, you must catch InterruptedException and restore the interrupted status by calling interrupt on the current thread, so that code higher up the call stack can see that an interrupt was issued.\n<!END QUOTATION>\n\nIn the case of borrowConnection, #1 is not really a choice, as it is running in the confines of JDBC interface.  But it can definitely restore the interrupt status of the thread.", "id": 150812, "time": "2011-10-20T19:28:24Z", "bug_id": 52066, "creation_time": "2011-10-20T19:28:24Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52066, "text": "1. Thread.interrupted() - clears the flag\n2. new SQLException() - bails out\n\nIt does sx.initCause(ex), so original InterruptedException is still there.\n\nDo you have trouble dealing with this SQLException?\n\nWhether you should follow the advise from the book depends on why the interruption was requested. I do not see any problem here.", "id": 150935, "time": "2011-10-26T14:13:51Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-26T14:13:51Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 52066, "text": "(In reply to comment #1)\n\nThere may be quite a few clients down the call chain that require the knowledge that interrupt is in progress, and clearing of the interrupted flag destroys this knowledge.\n\nIt is semantically very similar to the olden days practice of swallowing exception in the library code, e.g.\n\ntry\n{\n   doSomethingRisky( );\n}\ncatch ( Throwable ex )\n{\n}\n\nPlus, it's not OK for the general user of the library to depend on your specific wrapper of InterruptedException into the SQLException.  A user can switch to another implementation of connection pool and that particular library reporting policy may not be the same as this library's. \n\nThe right thing to do is to preserve the thread interruption status by calling Thread.currentThread( ).interrupt( ), and let the client code deal with it.\n\nBTW, setting InterruptedException as a cause of SQLException is a GOOD THING, I don't want you to change that.", "id": 150938, "time": "2011-10-26T14:31:26Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2011-10-26T14:31:26Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 52066, "attachment_id": null, "id": 155127, "time": "2012-03-20T16:32:55Z", "creator": "fhanik@apache.org", "creation_time": "2012-03-20T16:32:55Z", "is_private": false, "text": "(In reply to comment #2)\n> (In reply to comment #1)\n> \n\n> \n> Plus, it's not OK for the general user of the library to depend on your\n> specific wrapper of InterruptedException into the SQLException.  A user can\n> switch to another implementation of connection pool and that particular library\n> reporting policy may not be the same as this library's. \n\nI am not sure I agree with this. The user has not invoked an \"interruptable\" action, the user invoked DataSource.getConnection\nhttp://docs.oracle.com/javase/6/docs/api/javax/sql/DataSource.html#getConnection()\nThis call says nothing about interruption nor does it declare it.\n\nIt is a totally different call than poll(...)\nhttp://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#poll%28long,%20java.util.concurrent.TimeUnit%29\n\n> \n> The right thing to do is to preserve the thread interruption status by calling\n> Thread.currentThread( ).interrupt( ), and let the client code deal with it.\n\nThe reason an interrupt here would happen is cause we want to interrupt the call to queue.poll, to the user, they need to be notified that their call will fail using a SQLException. \n\n> \n> BTW, setting InterruptedException as a cause of SQLException is a GOOD THING, I\n> don't want you to change that.\n\nWe do specify the root cause for troubleshooting reasons. If we don't clear the flag, the thread can continue to run with a interrupted status, and I'm not sure that is a good thing.\n\nFeel free to reopen with a use case that may change the course of this resolution."}, {"count": 4, "tags": [], "creator": "alex-pub.apache-ant@reflexion.net", "attachment_id": null, "id": 155136, "time": "2012-03-20T17:34:44Z", "bug_id": 52066, "creation_time": "2012-03-20T17:34:44Z", "is_private": false, "text": "(In reply to comment #3)\n \n> The reason an interrupt here would happen is cause WE want to interrupt the\n> call to queue.poll, to the user, they need to be notified that their call will\n> fail using a SQLException. \n> \n\nI capitalized WE in the above quote to highlight the wrong approach to this problem.\n\nYOU, the tomcat-jdbc, would never interrupt a thread that is stuck in a `borrowConnection`.  This action can only be done by the user of your library.\n\n> If we don't clear the\n> flag, the thread can continue to run with a interrupted status, and I'm not\n> sure that is a good thing.\n\nit IS a good thing, because, once again, your library should never initiate the interruption, and if the user does not handle interruption correctly it will get reminded sooner rather than later that something is wrong.  Think of it as a RuntimeException.  If you know how to hanlde it you will, if you don't let the framework handle it.\n\nSwallowing interrupted status is exactly the same issue that plagued Java samples in the early days, when Exception would be swallowed and nothing reported to the caller."}, {"count": 5, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "text": "Our library could definitely initiate the interruption. The easiest use case would be pool.close() to get rid of all the waiting threads. and the waiting thread in this case, would receive a SQLException\n\nIn the above use case, it should absolutely be cleared.\n\nSince the waiting thread receives the SQLException, I am still not convinced. the call DataSource.getConnection does not have any interrupted exceptions associated with it.", "id": 155314, "time": "2012-03-27T15:16:28Z", "bug_id": 52066, "creation_time": "2012-03-27T15:16:28Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 52066, "text": "(In reply to comment #5)\n> Our library could definitely initiate the interruption. The easiest use case\n> would be pool.close() to get rid of all the waiting threads. and the waiting\n> thread in this case, would receive a SQLException\n> \n> In the above use case, it should absolutely be cleared.\n> \n> Since the waiting thread receives the SQLException, I am still not convinced.\n> the call DataSource.getConnection does not have any interrupted exceptions\n> associated with it.\n\nOK, Let's get to this problem from the other end.  Is it possible to provide a user preference that by default executes a current code, but when set preserved the thread interrupted status?\n\nI really hate to implement yet another facade to your otherwise feature complete product.\n\nIf this approach is acceptable to you I am willing to contribute the required patch for review.", "id": 155317, "time": "2012-03-27T17:03:49Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-27T17:03:49Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 52066, "text": "Good idea \n\nFixed in\n r1305931 \n r1305933", "id": 155319, "time": "2012-03-27T17:59:03Z", "creator": "fhanik@apache.org", "creation_time": "2012-03-27T17:59:03Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "fhanik@apache.org", "attachment_id": null, "id": 155340, "time": "2012-03-28T15:25:49Z", "bug_id": 52066, "creation_time": "2012-03-28T15:25:49Z", "is_private": false, "text": "Please note that the interrupt flag was already cleared, this commit does change things around a bit\nhttp://svn.apache.org/viewvc?rev=1306410&view=rev\nI've made an adjustment based on a suggestion on the dev list"}, {"count": 9, "tags": [], "creator": "alex-pub.apache-ant@reflexion.net", "text": "(In reply to comment #8)\n> Please note that the interrupt flag was already cleared, this commit does\n> change things around a bit\n> http://svn.apache.org/viewvc?rev=1306410&view=rev\n> I've made an adjustment based on a suggestion on the dev list\n\nReviewing the code I see these lines in close() and borrowConnection\n\n    catch (InterruptedException ex) {\n        ...\n        if (!getPoolProperties().getPropagateInterruptState()) {\n           Thread.interrupted();\n        }\n        ...\n    }\n\nThe problem is that this still does not set the interrupted status on the thread, that's the common behavior of many flavors of wait methods.  So, in this case the handler have to make a call to interrupt itself.\n\nThe exception handler code should do this:\n\n    catch (InterruptedException ex) {\n        ...\n        if (getPoolProperties().getPropagateInterruptState()) {\n           Thread.currentThread().interrupt();\n        } else {\n           Thread.interrupted();\n        }\n        ...\n    }\n\nThe fix should be applied to lines 384 and and 631 of org.apache.tomcat.jdbc.pool.ConnectionPool in http://svn.apache.org/viewvc?view=revision&revision=1305931", "id": 155363, "attachment_id": null, "bug_id": 52066, "creation_time": "2012-03-29T14:52:47Z", "time": "2012-03-29T14:52:47Z", "is_private": false}, {"count": 10, "text": "BTW, it is not related to this bug, but I don't know where to submit it otherwise.\n\nWhen I add a comment to this bug report and press `Save Changes` button Bugzilla does not redirect we to this report (52066), but instead goes to \"ASF Bugzilla \u2013 Bug 48001\".\n\n48001 is completely unrelated report, but it was also submitted by me.\n\nIf you could kindly reply to this comment with a proper channel I will submit this bug there.  Thanks!", "bug_id": 52066, "is_private": false, "id": 155364, "time": "2012-03-29T14:57:47Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-29T14:57:47Z", "tags": [], "attachment_id": null}, {"count": 11, "text": "http://www.apache.org/dev/#infrastructure", "bug_id": 52066, "attachment_id": null, "id": 155370, "time": "2012-03-29T16:19:53Z", "creator": "fhanik@apache.org", "creation_time": "2012-03-29T16:19:53Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 52066, "attachment_id": null, "id": 155372, "time": "2012-03-29T16:30:01Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-29T16:30:01Z", "is_private": false, "text": "(In reply to comment #11)\n> http://www.apache.org/dev/#infrastructure\n\nCreated bug report https://issues.apache.org/jira/browse/INFRA-4620"}, {"count": 13, "tags": [], "bug_id": 52066, "attachment_id": null, "id": 155373, "time": "2012-03-29T16:32:21Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-29T16:32:21Z", "is_private": false, "text": "Reopening this bug, as there is no reply to my comment #9 -> https://issues.apache.org/bugzilla/show_bug.cgi?id=52066#c9."}, {"count": 14, "tags": [], "bug_id": 52066, "text": "r1306410\n\na day or so ago", "id": 155374, "time": "2012-03-29T16:37:34Z", "creator": "fhanik@apache.org", "creation_time": "2012-03-29T16:37:34Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 52066, "attachment_id": null, "id": 155376, "time": "2012-03-29T16:52:27Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-29T16:52:27Z", "is_private": false, "text": "(In reply to comment #14)\n> r1306410\n> \n> a day or so ago\n\nThanks a lot for fixing this!!!"}, {"count": 16, "tags": [], "bug_id": 52066, "text": "Dummy comment to test https://issues.apache.org/jira/browse/INFRA-4620\n\nPlease disregard.", "id": 155377, "time": "2012-03-29T16:54:55Z", "creator": "alex-pub.apache-ant@reflexion.net", "creation_time": "2012-03-29T16:54:55Z", "is_private": false, "attachment_id": null}]
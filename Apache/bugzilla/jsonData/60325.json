[{"count": 0, "attachment_id": 34413, "bug_id": 60325, "text": "Created attachment 34413\nSample project which compares NPOIFSFileSystem and OPOIFSFileSystem\n\nWhen adding lots of documents entries to the file system the performance of the NPOIFSFileSystem implementation is ~10x slower than OPOIFSFileSystem.\n\nThe attached sample program is often stuck with stacks like this:\n\t  at java.nio.Buffer.<init>(Buffer.java:202)\n\t  at java.nio.ByteBuffer.<init>(ByteBuffer.java:281)\n\t  at java.nio.HeapByteBuffer.<init>(HeapByteBuffer.java:70)\n\t  at java.nio.ByteBuffer.wrap(ByteBuffer.java:373)\n\t  at org.apache.poi.poifs.nio.ByteArrayBackedDataSource.read(ByteArrayBackedDataSource.java:49)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.getBlockAt(NPOIFSFileSystem.java:484)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:169)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:142)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSMiniStore.getBlockAt(NPOIFSMiniStore.java:71)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:169)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:142)\n\t  at org.apache.poi.poifs.filesystem.NDocumentInputStream.readFully(NDocumentInputStream.java:248)\n\t  at org.apache.poi.poifs.filesystem.NDocumentInputStream.read(NDocumentInputStream.java:150)\n\t  at org.apache.poi.poifs.filesystem.DocumentInputStream.read(DocumentInputStream.java:125)\n\t  at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)\n\t  at java.io.BufferedInputStream.skip(BufferedInputStream.java:380)\n\t  - locked <0x345> (a java.io.BufferedInputStream)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSDocument.store(NPOIFSDocument.java:126)\n\t  at org.apache.poi.poifs.filesystem.NPOIFSDocument.<init>(NPOIFSDocument.java:84)\n\t  at org.apache.poi.poifs.filesystem.DirectoryNode.createDocument(DirectoryNode.java:422)\n\t  at Test.copyAllEntries(Test.java:83)\n\t  at Test.copyAllEntries(Test.java:77)\n\t  at Test.main(Test.java:49)\n\nThis problem crops up while creating MSG files with lots of recipients because each recipient requires several document entries.", "id": 194751, "time": "2016-11-01T04:40:07Z", "creator": "luke.quinane@gmail.com", "creation_time": "2016-11-01T04:40:07Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "text": "Do you have any suggestions on how to improve the NPOIFSFileSystem implementation?", "id": 197097, "time": "2017-02-17T05:15:59Z", "bug_id": 60325, "creation_time": "2017-02-17T05:15:59Z", "is_private": false}, {"count": 2, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Hm, the ByteBuffer.wrap() call seems unlikely to be the time-culprit as it just populates some members, I'd try to use some profiler or APM tool here to find what is actually using up the time.", "id": 197800, "time": "2017-03-19T11:33:46Z", "bug_id": 60325, "creation_time": "2017-03-19T11:33:46Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 60325, "text": "A quick analysis points more into the direction of NPOIFSMiniStore.getBlockAt() because it iterates block-by-block via an Iterator<ByteBuffer>, for large documents the offset can be high (i.e. in your sample between 500 and 1000 times for each call) and thus there are many loop-iterations with many it.next() calls to StreamBlockByteBufferIterator which has to perform more work to do these steps. \n\nUnfortunately this is quite core to the class, so not easily replaced with something more performing as far as I see :(.", "id": 197801, "time": "2017-03-19T11:48:44Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-19T11:48:44Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 60325, "text": "Created attachment 34845\nScreenshot from JVisualVM sampling", "id": 197802, "time": "2017-03-19T11:50:16Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-03-19T11:50:16Z", "is_private": false, "attachment_id": 34845}, {"count": 5, "tags": [], "creator": "apache@gagravarr.org", "text": "If we're able to change how we open NPOIFS from files (see my thread on dev@), we might be able to mmap in all file cases, and from that we might be able to mmap bigger blocks\n\nThat may then allow us to change NPOIFSMiniStore to avoid quite as much wrapping/buffering of the mini blocks too,\n\n(Note the \"might\" in the above - this is untested and just a guess!)", "id": 197847, "time": "2017-03-20T23:13:19Z", "bug_id": 60325, "creation_time": "2017-03-20T23:13:19Z", "is_private": false, "attachment_id": null}]
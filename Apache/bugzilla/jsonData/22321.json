[{"count": 0, "tags": [], "creator": "mcormier@miranda.com", "attachment_id": null, "is_private": false, "id": 42570, "time": "2003-08-11T18:53:51Z", "bug_id": 22321, "creation_time": "2003-08-11T18:53:51Z", "text": "When first looking at the code, I thought maybe this was no big deal, thinking \nit would try to flush again later.  However I'm not entirely sure it's the case \nso I'm reporting it here.  Here's the exception that shows up:\n\n304692 [Thread-24] WARN indexer.IndexManager  - ignored exception\njava.util.ConcurrentModificationException\n\tat java.util.HashMap$HashIterator.nextEntry(HashMap.java:762)\n\tat java.util.HashMap$ValueIterator.next(HashMap.java:792)\n\tat org.apache.xindice.core.filer.Paged.flush(Paged.java:555)\n\tat org.apache.xindice.core.indexer.ValueIndexer.flush\n(ValueIndexer.java:384)\n\tat org.apache.xindice.core.indexer.IndexManager.addDocument\n(IndexManager.java:416)\n\tat org.apache.xindice.core.Collection.putDocument(Collection.java:1206)\n\tat org.apache.xindice.core.Collection.insertDocument\n(Collection.java:992)\n\tat org.apache.xindice.client.xmldb.embed.CollectionImpl.storeResource\n(CollectionImpl.java:233)\n\tat [MY CODE]\n\nThe part that scared me was seeing how the code was synchronized, presumably to \navoid such concurrent modifications.  Every access to the 'dirty' Map is \nsynchronized.  Problem is, it's not always against the same object.  I'll \nsubmit a patch (of what I think should be done) for review in a second."}, {"count": 1, "tags": [], "bug_id": 22321, "text": "Created attachment 7754\nSynchronizing against Paged.this (was Paged.Page.this)", "id": 42571, "time": "2003-08-11T18:56:09Z", "creator": "mcormier@miranda.com", "creation_time": "2003-08-11T18:56:09Z", "is_private": false, "attachment_id": 7754}, {"count": 2, "tags": [], "text": "Added a patch, verify if this was indeed what was intended before applying. \nThanks!", "attachment_id": null, "id": 42572, "creator": "mcormier@miranda.com", "time": "2003-08-11T18:57:47Z", "bug_id": 22321, "creation_time": "2003-08-11T18:57:47Z", "is_private": false}, {"count": 3, "tags": [], "text": "The previous patch doesn't work -- it occasionally deadlocks when under load.  \nSo I finally managed to analyze what was going on in more detail.  Here's my \ntake on it:\n\nThe concurrent modification exception occurs because the 'dirty' Map can be \nmodified by one thread in Paged.Page.write() while another thread is \nenumerating the dirty pages to write them to disk in Paged.flush().  One would \nthink that simply synchronizing access to the 'dirty' Map would do the trick, \nbut there's a catch:  Paged.Page.write() will occasionally call Paged.flush(), \nand Paged.flush() calls Paged.Page.flush(), which is synchronized.  A deadlock \nis almost guaranteed to occur.\n\nTo break the cycle, I changed how 'dirty' is used a bit.  Most of the places \nwhere it's used are guarded by a new monitor object, 'dirtyLock'.  Then when \nflushing the dirty pages, we create a new, empty HashMap and quickly swap it \nwith the full HashMap.  We can then proceed to flush the pages with our own \nsnapshot of the dirty page list.\n\nI'll be submitting a patch right away.  I've been running with this \nmodification for a little while and it eliminated the concurrent modification \nexceptions as well as the deadlocks that my previous patch introduced.", "attachment_id": null, "id": 42777, "creator": "mcormier@miranda.com", "time": "2003-08-14T20:40:00Z", "bug_id": 22321, "creation_time": "2003-08-14T20:40:00Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 22321, "text": "Created attachment 7827\nCorrected version of the previous patch", "id": 42778, "time": "2003-08-14T20:44:17Z", "creator": "mcormier@miranda.com", "creation_time": "2003-08-14T20:44:17Z", "is_private": false, "attachment_id": 7827}, {"count": 5, "tags": [], "creator": "kevinoneill@apache.org", "is_private": false, "text": "Patches applied. Thanks.", "id": 48626, "time": "2003-12-06T22:56:47Z", "bug_id": 22321, "creation_time": "2003-12-06T22:56:47Z", "attachment_id": null}]
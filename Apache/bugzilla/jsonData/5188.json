[{"count": 0, "tags": [], "bug_id": 5188, "attachment_id": null, "is_private": false, "id": 8443, "time": "2001-11-29T14:06:30Z", "creator": "sverre@explicit.dk", "creation_time": "2001-11-29T14:06:30Z", "text": "Hi,\n\nWhen trying to create a InitialContext() for a JNDI lookup, the InitialContext\n() attempts to locate a jndi.properties file.\nThis files does exist in a jar file in the WEB-INF/classes directory, but \nTomcat doesn't locate it.\n\nI can see, that others have had the same problem, but I can't find any bugs \nsubmitted on it. If this is a duplicate entry, send a heated flame and delete \nthe entry *S*.\n\nI've pasted in an entry I found on the net describing the problem, and a fix \nfor the Tomcat 3.2 - hope it's of any help. I'm currently assigned to a 25-\nhours-per-day project, so I haven't even taken the time to check, if this code \nhave been merged into the released code. I've taken the easy (ugly) way out and \nplaced the JAR file containing my jndi.properties file in the global class path.\n\n----------------------- Paste in - start \nFrom: Christopher Audley <Christopher.D.Audley@jhu.edu> \n\nThe following discussion applies to tomcat 3.2.1 running under Sun JDK 1.3\n\nI spent this afternoon tracking down why a call to new InitialContext() \nfrom a web application did not appear to be finding the jndi.properties \nlocated under WEB-INF/classes.  I am using the Jdk12Interceptor and \nverified that Thread.currentThread().getClassLoader() was the tomcat \nAdaptiveClassLoader before the call to new InitialContext().  After some \ninvestigation I determined that the JNDI implementation uses the \nclassloader method getResources to find all occurances of the file \njndi.properties in the classpath.  AdaptiveClassLoader does not have \nthis method implemented, the default implementation calls findResources \nwhich simply returns an empty Enumeration unless overriden.\n\nAttached are patches to AdaptiveClassLoader and ClassRepository to \nimplement findResources so that JNDI will behave correctly when a \njndi.properties is placed in the web application classpath.  I have \nmoved some code from AdaptiveClassLoader to ClassRepository to avoid \ncode duplication and changed the implementation of getResource to \nfindResource for consistency.\n\nI hope that this can be incorporated into the sources before 3.2.2.\n\nCheers\nChris\n\ndiff -ubr jakarta-tomcat-3.2.1-\nsrc.orig/src/share/org/apache/tomcat/loader/AdaptiveClassLoader.java jakarta-\ntomcat-3.2.1-src/src/share/org/apache/tomcat/loader/AdaptiveClassLoader.java\n--- jakarta-tomcat-3.2.1-\nsrc.orig/src/share/org/apache/tomcat/loader/AdaptiveClassLoader.java\tSun Mar \n11 19:21:12 2001\n+++ jakarta-tomcat-3.2.1-\nsrc/src/share/org/apache/tomcat/loader/AdaptiveClassLoader.java\tSun Mar 11 \n18:40:46 2001\n@@ -762,69 +762,45 @@\n      * @param   name    the name of the resource, to be used as is.\n      * @return  an URL on the resource, or null if not found.\n      */\n-    public URL getResource(String name) {\n-        if( debug > 0 ) log( \"getResource() \" + name );\n-        // First ask the parent class loader to fetch it, if possible\n-        URL u = null;\n-        if (parent != null) {\n-            u = parent.getResource(name);\n-            if (u != null)\n-                return (u);\n-        }\n-        // Second ask the system class loader to fetch it from the classpath\n-        u = getSystemResource(name);\n-        if (u != null) {\n-            return u;\n-        }\n-\n+    protected URL findResource(String name) {\n         if (name == null) {\n             return null;\n         }\n \n-        // Third, check our own repositories\n+        // check our own repositories\n         Enumeration repEnum = repository.elements();\n         while (repEnum.hasMoreElements()) {\n             ClassRepository cp = (ClassRepository) repEnum.nextElement();\n-            File file = cp.getFile();\n-            // Construct a file://-URL if the repository is a directory\n-            if (file.isDirectory()) {\n-                String fileName = name.replace('/', File.separatorChar);\n-                File resFile = new File(file, fileName);\n-                if (resFile.exists()) {\n-                    // Build a file:// URL form the file name\n-                    try {\n-                        return new URL(\"file\", null, resFile.getAbsolutePath\n());                    \t\n-                    } catch(java.net.MalformedURLException badurl) {\n-                        badurl.printStackTrace();\n-                        return null;\n-                    }\n+            URL resourceURL = cp.findResource(name);\n+            if ( resourceURL != null )\n+                return resourceURL;\n                 }\n-            }\n-            else {\n-                // a jar:-URL *could* change even between minor releases, but\n-                // didn't between JVM's 1.1.6 and 1.3beta. Tested on JVM's from\n-                // IBM, Blackdown, Microsoft, Sun @ Windows and Sun @ Solaris\n-                try {\n-                    ZipFile zf = new ZipFile(file.getAbsolutePath());\n-                    ZipEntry ze = zf.getEntry(name);\n \n-                    if (ze != null) {\n-                        try {\n-                            return new URL(\"jar:file:\" + file.getAbsolutePath\n() + \"!/\" + name);\n-                        } catch(java.net.MalformedURLException badurl) {\n-                            badurl.printStackTrace();\n-                            return null;\n-                        }\n-                    }\n-                } catch (IOException ioe) {\n-                    ioe.printStackTrace();\n+        // Not found\n                     return null;\n                 }\n+\n+    /**\n+     * Find all occurences of a given resource in the class loaders\n+     * repositories.\n+     *\n+     * @param   name    the name of the resource, to be used as is.\n+     * @return  an Enumeration of URLs of to this resource.\n+     */\n+    protected Enumeration findResources(String name) {\n+        if( debug > 0 ) log( \"findResources() \" + name );\n+\n+        Vector urls = new Vector( repository.size() );\n+        if ( name != null ) {\n+            Enumeration repEnum = repository.elements();\n+            while( repEnum.hasMoreElements() ) {\n+                ClassRepository cp = (ClassRepository) repEnum.nextElement();\n+                URL resourceURL = cp.findResource(name);\n+                if( resourceURL != null )\n+                    urls.add( resourceURL );\n             }   \n         }\n-\n-        // Not found\n-        return null;\n+        return urls.elements();\n     }\n \n     public String toString() {\ndiff -ubr jakarta-tomcat-3.2.1-\nsrc.orig/src/share/org/apache/tomcat/loader/ClassRepository.java jakarta-tomcat-\n3.2.1-src/src/share/org/apache/tomcat/loader/ClassRepository.java\n--- jakarta-tomcat-3.2.1-\nsrc.orig/src/share/org/apache/tomcat/loader/ClassRepository.java\tSun Mar \n11 19:22:31 2001\n+++ jakarta-tomcat-3.2.1-\nsrc/src/share/org/apache/tomcat/loader/ClassRepository.java\tSun Mar 11 \n19:01:44 2001\n@@ -61,6 +61,8 @@\n import java.io.*;\n import java.lang.*;\n import java.util.*;\n+import java.util.zip.*;\n+import java.net.*;\n \n public class ClassRepository {\n     private File file;\n@@ -77,5 +79,43 @@\n \n     public Object getProtectionDomain() {\n \treturn protectionDomain;\n+    }\n+\n+    public URL findResource(String name) {\n+        if (file.isDirectory()) {\n+            String fileName = name.replace('/', File.separatorChar);\n+            File resFile = new File(file, fileName);\n+            if (resFile.exists()) {\n+                // Build a file:// URL form the file name\n+                try {\n+                    return new URL(\"file\", null, resFile.getAbsolutePath\n());                    \t\n+                } catch(java.net.MalformedURLException badurl) {\n+                    badurl.printStackTrace();\n+                    return null;\n+                }\n+            }\n+        }\n+        else {\n+            // a jar:-URL *could* change even between minor releases, but\n+            // didn't between JVM's 1.1.6 and 1.3beta. Tested on JVM's from\n+            // IBM, Blackdown, Microsoft, Sun @ Windows and Sun @ Solaris\n+            try {\n+                ZipFile zf = new ZipFile(file.getAbsolutePath());\n+                ZipEntry ze = zf.getEntry(name);\n+\n+                if (ze != null) {\n+                    try {\n+                        return new URL(\"jar:file:\" + file.getAbsolutePath() \n+ \"!/\" + name);\n+                    } catch(java.net.MalformedURLException badurl) {\n+                        badurl.printStackTrace();\n+                        return null;\n+                    }\n+                }\n+            } catch (IOException ioe) {\n+                ioe.printStackTrace();\n+                return null;\n+            }\n+        }   \n+        return null;\n     }\n }\n\n\n\n----------------------- Paste in - end\n\nApart from that, a greeting to all you guys - great work bringing all this \nstuff to us.\n\n/Sverre Eplov"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 8445, "time": "2001-11-29T14:55:32Z", "bug_id": 5188, "creation_time": "2001-11-29T14:55:32Z", "is_private": false, "text": "I remember some people have reported that this particular thing does actually \nwork.\nIf it doesn't, there's nothing I can fix to make it work. Tomcat sets the \ncontext class loader appropriately."}]
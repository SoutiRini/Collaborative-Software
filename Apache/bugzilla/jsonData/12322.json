[{"count": 0, "tags": [], "bug_id": 12322, "attachment_id": null, "id": 22301, "time": "2002-09-04T23:11:18Z", "creator": "david.dawkins@brooks-pri.com", "creation_time": "2002-09-04T23:11:18Z", "is_private": false, "text": "After shutting down tomcat with $CATALINA_HOME/bin/shutdown.sh, netstat shows \nthat port *.8080 is in LISTEN state. This means that tomcat cannot be restarted \nuntil some kind of timeout occurs (around 10-15 minutes). Tomcat throws an \nIOException from HttpConnector/../DefaultServerSocketFactory (the one in \ncatalina/net in catalina.jar) upon startup until the timeout occurs.\n\nI have verified that there is no \"java\" process running (using \"ps -ef\" \nand \"/usr/ucb/ps auxww\"). There is no service for 8080 defined in /etc/services \n(inetd paranoia).\n\nThis is with jakarta-tomcat-4.0.4-LE-jdk14, j2sdk1.4.0_01, Solaris 2.8, two CPU \nSun server.\n\nI cannot reproduce the problem with a simple C program or a simple Java \nprogram; in both cases, ports go to TIME_WAIT state upon application exit. \nSetting SO_REUSEADDR in the C program allows it to be restarted (and the bind \nto succeed). It seems that Java sockets set SO_REUSEADDR by default, under \nSolaris at least. \n\nMy understanding is that for a port to be in LISTEN state, there must be a\nprocess (or kernel?) thread running that is bound to the port.  My instinctive \nfeeling is there is a JRE thread running that is waiting to GC the tomcat \nServerSocket object, but I cannot see any such process. I can't reproduce it, \nand I've tried calling System.gc() (desperatation!). The issue makes no sense\nto me."}, {"count": 1, "tags": [], "bug_id": 12322, "attachment_id": null, "is_private": false, "id": 22310, "time": "2002-09-05T07:38:45Z", "creator": "remm@apache.org", "creation_time": "2002-09-05T07:38:45Z", "text": "That doesn't happen for me on other OSes (like Windows). After Tomcat is\nshutdown, the port is no longer bound. When killing the VM, the server port may\nbe left bound, but I've seen it happen extremely rarely."}, {"count": 2, "tags": [], "text": "Solaris is probably being picky about standards conformance; there is something in the TCP RFC requiring that sockets not be rebound for 2 *  wait time. I don't observe this problem on other UNIXes (OpenBSD) either. ", "attachment_id": null, "id": 22322, "creator": "ian779@darwinsys.com", "time": "2002-09-05T13:39:16Z", "bug_id": 12322, "creation_time": "2002-09-05T13:39:16Z", "is_private": false}, {"count": 3, "tags": [], "creator": "dlr@finemaltcoding.com", "attachment_id": null, "text": "According to Sun's web site, Java sockets did not set SO_REUSEADDR socket option\nprior to the release of JDK 1.4:\n\n\"For reasons that are historically unclear, the Solaris socket code sets this\noption for sockets while the win32 code does not in Java[tm] Development Kit\n(JDK[tm]) releases prior to version 1.4.\"\n\n- http://access1.sun.com/technotes/00614.html\n\nIn JDK 1.4 and on, SO_REUSEADDR is part of the Socket API:\n\nhttp://java.sun.com/j2se/1.4/docs/api/java/net/Socket.html#setReuseAddress(boolean)\n\nI ran into a similar problem with Apache's Java XML-RPC server, which I worked\naround for pre-1.4 JREs by trying to re-connect a few times after a restart. \nAFAIK, there is no way to really fix this issue for pre-1.4 JREs.  :-\\\n", "id": 22337, "time": "2002-09-05T21:51:09Z", "bug_id": 12322, "creation_time": "2002-09-05T21:51:09Z", "is_private": false}, {"attachment_id": 2968, "tags": [], "bug_id": 12322, "is_private": false, "count": 4, "id": 22448, "time": "2002-09-08T11:01:37Z", "creator": "david.dawkins@brooks-pri.com", "creation_time": "2002-09-08T11:01:37Z", "text": "Created attachment 2968\nReproduces bug I am seeing"}, {"count": 5, "tags": [], "bug_id": 12322, "attachment_id": null, "is_private": false, "id": 22449, "time": "2002-09-08T11:01:58Z", "creator": "david.dawkins@brooks-pri.com", "creation_time": "2002-09-08T11:01:58Z", "text": "OK, I nailed this. It's the fault of the Tibco Tibrv servlet I am using.\nThis is what happens.\n1. Tomcat starts, and binds to port 8080.\n2. My Tibrv servlet starts, and because the tibrv daemon \"rvd\" isn't running,\nit starts it.\n3. This is most likely implemented using \"fork/exec\" in the tib native \nlibraries, and file descriptors etc inherited from the parent process are not \nshut down before the call to exec.\n4. The rvd process now has a handle on the 8080 port.\n5. Shutdown tomcat. \n6. Port *.8080 is in LISTEN state\n7. Shutdown rvd\n8. Port *.8080 is released, and tomcat may be restarted.\n\nWorkarounds:\n- ensure rvd is (re)started before starting tomcat (shutdown first\nto be sure).\n\nI will log this with tibco. See attached java app for details on \nreproducing.\n\n"}]
[{"count": 0, "tags": [], "bug_id": 57983, "attachment_id": null, "is_private": false, "id": 183240, "time": "2015-06-01T14:56:29Z", "creator": "dddenton@gmail.com", "creation_time": "2015-06-01T14:56:29Z", "text": "I'm working on a task which compiles Kotlin code (kotlinlang.org). Kotlin code is supposed to be mixed with Java code, so the task is a CompilerAdapter implementation which calls Kotlin compiler and then javac.\n\nThe problem is, the standard mechanism of partial/incremental compilation in Ant doesn't quite work with Kotlin at all. I'm looking at org.apache.tools.ant.taskdefs.Javac#scanDir, where a SourceFileScanner instance is created with a glob pattern *.kt -> *.class (assuming my adapter's getSupportedFileExtensions() returns array with \"kt\" in it). This results in compilation of only those source files which are newer than the class files with the corresponding name. But in fact, class file names have nothing to do with source file names (imagine A.kt having class B and B.kt having class A). Partial compilation is not an easy task for Kotlin projects, also because we can have a class file which is produced from multiple source files.\n\nSo I'm looking for ways to disable this behaviour altogether and always compile all sources (both Java and Kotlin), because otherwise the task cannot be used reliably. Currently I see no workaround."}, {"count": 1, "tags": [], "creator": "dddenton@gmail.com", "attachment_id": null, "id": 183288, "time": "2015-06-02T13:17:12Z", "bug_id": 57983, "creation_time": "2015-06-02T13:17:12Z", "is_private": false, "text": "Never mind, I figured out that there's a protected field 'compileList' which may be modified at the right moment."}]
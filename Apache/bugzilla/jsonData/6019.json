[{"count": 0, "tags": [], "bug_id": 6019, "attachment_id": null, "is_private": false, "id": 9892, "time": "2002-01-24T20:51:36Z", "creator": "mmunz@apelon.com", "creation_time": "2002-01-24T20:51:36Z", "text": "When running junit tests, crimson.jar packages get pulled into the forked JVM.  \nThis will conflict with any tests that require a different XML library.  (see \nAnt mailing list tread included below for details) I aggree completely with \nVlad's comment below about the problems inherent in putting classpath \nstatements in the manifest.\n\nThanks for taking a look at this.\n\n- Matt Munz\n  mmunz@apelon.com\n\nHi all,\n\n  I've entered this bug into the system.  One side-affect of removing the \nmanifest from ant.jar is that the xml-formatter for the JUnit task won't work \n(requires an xml-library like crimson).  Putting jaxp.jar on the classpath for \nthat task seems to work well for this, although I haven't done a thurough test.\n\n  Vlad -- thanks again for your help.  You saved me a lot of time.    \n\n  - Matt\n\n-----Original Message-----\nFrom: vlad@trilogy.com [mailto:vlad@trilogy.com]\nSent: Thursday, January 24, 2002 12:34 PM\nTo: Ant Users List\nSubject: [solved] RE: forked JVM's classpath not clean when using JUnit\ntask\n\n\nWhew, I've got it!\n\nMatt, thanks for your sample JUnit testcase. I should have guessed the \nreal reason sooner. This is not an issue with <junit> per se but rather \nwith ANT itself [specifically with the way Execute class forks a VM {which \nis different from how forkable tasks like <java> work} combined with how \nANT is packaged].\n\nBasically, ANT ships with several jars that contain manifest Class-Path \nattributes pointing to each other, e.g.\n\n        Manifest-Version: 1.0\n        Main-Class: org.apache.tools.ant.Main\n        Created-By: Ant 1.4\n        Class-Path: jaxp.jar parser.jar crimson.jar optional.jar xalan.jar\n\nThere are at least two jars like that: ant.jar and the optional tasks jar. \nBoth of these jars percolate to the -classpath of the JVM forked by \nExecute. The Class-Path attributes in their manifests effectively place \nthe entire set {jaxp.jar, parser.jar, crimson.jar, optional.jar, \nxalan.jar} into the application classpath. The thing that threw me off was \nthat such classpath entries will not show up either in java.class.path \nsystem property or java.net.URLClassLoader.getURLs () -- a pretty good \nreason never to use manifest files with Class-Path, if you ask me.\n\nAnyway, that's how crimson.jar found its way into the forked VM in a \ncompletely silent fashion... I leave the proper resolution up to the dev \nteam, but for you the workaround would be to edit or delete the \nmanifest.mf files in the two jars I mentioned above. Not ideal, but better \nthan patching ANT code yourself.\n\nVlad.\n\n\n\nTo:     <vlad@trilogy.com>\ncc: \n\nSubject:        RE: forked JVM's classpath not clean when using JUnit task\n\n\nVlad,\n\nYou are quite a detective!  Here's the output (below).  As I suspected,\ncrimson.jar is sneaking in there.  I guess the question now is, \"how?\"  As\nyou requested, I've directed this message to you only.  I'm glad that \nyou're\ninterested in my problem, as you have a good grasp on classloading in\ngeneral.\n\nAt this point, it seems to me that a close reading of the JunitTask source\ncode is necessary to fix the problem, and I'm not sure that I'm up to \ndoing\nthat.  I have a custom test runner of my own that I can wire in to ant for \na\nquick fix that will work for my current needs.  I do plan on attacking \nthis\nproblem later on, however, so if you have any more ideas on this issue\n(which I am now certain *is* a defect), I'd be glad to hear them.\n\n[junit] resource for crimson ==\njar:file:/D:/programs/jakarta-ant-1.4.1/lib/crimson.jar!/org/apache/crimson/\nparser/X\nMLReaderImpl.class\n[junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.221 sec\n\n- Matt\n\n-----Original Message-----\nFrom: vlad@trilogy.com [mailto:vlad@trilogy.com]\nSent: Thursday, January 24, 2002 9:59 AM\nTo: Ant Users List\nSubject: RE: forked JVM's classpath not clean when using JUnit task\n\n\nThe \"current loader\" shown below is the usual Java 2 application\nclassloader, not a custom JUnit one.... Bummer, that blows my first clue\naway. If you absolutely sure none of the other jars contains crimson\nclasses (what are those parser.jar and xml.jar?) then hmmm....\n\nOk, I feel challenged now. I've thought of another trick that is even\nbetter than my previous one. Luckily, Sun JVMs allow retrieving classes as\nresource URLs and those, when converted to a String, give away the actual\ndisk location of a class. So, add another line to your testcase that does\nthis:\n\nSystem.out.println (getClass().getClassLoader().getResource\n(\"org/apache/crimson/parser/XMLReaderImpl.class\"));\n\nand let us know. Or you can just email me only, 'cause I am beginning to\nsuspect that we are starting to annoy the rest of the list...\n\nVlad.\n\n\n\nPlease respond to \"Ant Users List\" <ant-user@jakarta.apache.org>\nTo:     \"Ant Users List\" <ant-user@jakarta.apache.org>\ncc:\n\nSubject:        RE: forked JVM's classpath not clean when using JUnit task\n\n\nVlad & list,\n\nThanks again for all your insightful suggestions.\n\nI created the test you suggested, and have included my output below.\nUnfortunately, crimson.jar is not listed there.  Perhaps the classpath the\nloader is using and the java.class.path variable are different?  Is this\npossible?\n\nCould someone out there who has experience with the junit task please\nrespond to this thread?  If the classpath isn't being set properly, there\nis\nlikely a serious defect in the task that would prevent many developers\nfrom\nusing it.  If at all possible, this defect should be tracked down and\nremoved, or at least a workaround should be found.\n\n[junit] app classpath =\nD:\\programs\\jakarta-ant-1.4.1\\lib\\junit.jar;D:\\programs\\jakarta-ant-1.4.1\\li\nb\\ant.jar;D:\\pro\ngrams\\jakarta-ant-1.4.1\\lib\\jakarta-ant-1.4.1-optional.jar;D:\\Matt\\apelon\\vs\ns\\dev200104\\build\\tests\\ApelonCommon\\jars\\Te\nstApelonCommon.jar;D:\\Matt\\apelon\\vss\\dev200104\\build\\dist\\lib\\ApelonCommon.\njar;D:\\Matt\\apelon\\vss\\dev200104\\jars\\log4j.\njar;D:\\Matt\\apelon\\vss\\dev200104\\jars\\parser.jar;D:\\Matt\\apelon\\vss\\dev20010\n4\\jars\\xml.jar\n[junit] current loader = sun.misc.Launcher$AppClassLoader@71732b\n[junit] user.home == C:\\Documents and Settings\\mmunz\n\n- Matt\n\n-----Original Message-----\nFrom: vlad@trilogy.com [mailto:vlad@trilogy.com]\nSent: Wednesday, January 23, 2002 3:42 PM\nTo: Ant Users List\nSubject: RE: forked JVM's classpath not clean when using JUnit task\n\n\nOk, sorry about not being able to help you more right now but I can't take\nany more time away from work at this point. I've looked into junit task\ncode [I only have ANT 1.4] and that seems to eventually fork a JVM\ncorrectly. Unless someone else sorts this out in the meantime, I leave you\nwith these clues for now:\n\n- during the fork the JUnitTest class exports all ANT project properties\ninto a temp props file that is\nlater picked up by the JUnitTestRunner class in a forked JVM. The idea is\nto\nresurrect the Java runtime as\nclosely as possible. Well, one of the properties exported is of course\n\"java.class.path\" and it will look something like this from ANT source JVM\n[note crimson.jar]:\n\njava.class.path:\nD:\\J\\JDK1.3\\lib\\tools.jar;D:\\ANT\\lib\\jaxp.jar;D:\\ANT\\lib\\jakarta-ant-1.4-opt\nional.jar;D:\\ANT\\lib\\crimson.jar;D:\\ANT\\lib\\ant.jar;\n\nJUnitTestRunner will later absorb these into the forked JVM. Next,\nnormally\njust setting\njava.class.path post-bootstrap [like in main() or later] will not have an\neffect on the normal app classloader, but [!] I happened to know that\nJUnit made use of its own custom classloader. I happened to have v3.7\nsources in the office and I looked at the classloader impl: lo and behold,\nthe first thing it does is set its classpath from \"java.class.path\"\nproperty.\n\nAnyway, I am not convinced that when JUnit is executed from <junit> task\nthe same init sequence takes place as when running JUnit standalone but\nthis is my strongest clue so far. If this proves to be correct, try\ndisabling JUnit classloader [I remember it has a property for that].\n\n- if the above is a wrong clue, you could get some more data by adding a\nquick pseudo-TestCase to you suite and have it output the following:\n\nSystem.out.println (\"app classpath = \" + System.getProperty\n(\"java.class.path\"));\nSystem.out.println (\"current loader = \" + getClass().getClassLoader());\n\nHope this helps,\nVlad.\n\n\n\nPlease respond to \"Ant Users List\" <ant-user@jakarta.apache.org>\nTo:     \"Ant Users List\" <ant-user@jakarta.apache.org>\ncc:\n\nSubject:        RE: forked JVM's classpath not clean when using JUnit task\n\n\nVlad and list,\n\n> Is the JVM really forked as you made me think? Otherwise all ANT classes\n> have access to crimson classes because it is seen by AntClassLoader....\n\nI have indicated that I want it to be forked, and the build output seems\nto\nindicate this.  I can't know however, wether or not it actually does run\non\na forked JVM.  I've included the relevant build file snippet (below) in\ncase\nit helps in your diagnosis.\n\nIn browsing the bug-tracking system for junit-related cases, I've noticed\nthat the junit task has produced buggy behavior in the past, so it's\npossible that the junit task is responsible for this error (rather than\nthe\nmore commonly used ant code).  Are there any people on this list who are\nfamiliar with the junit task specifically?  If so, I'd love to hear from\nthem about this.\n\nThanks again for your help with this issue.\n\n<junit fork=\"true\" printsummary=\"yes\" haltonfailure=\"no\"\nfailureProperty=\"test-failed\">\n<classpath>\n<pathelement path=\"${test-proj-path}/jars/Test${jar-name}.jar\" />\n<pathelement path=\"${LIB.DIR}/${jar-name}.jar\" />\n<pathelement path=\"${classpath-ext}\" />\n</classpath>\n<formatter type=\"xml\" />\n<batchtest fork=\"true\" todir=\"${reports-dir}\">\n<fileset dir=\"${tests-src-dir}\">\n<include name=\"**/${pkg-path}/**/Test*.java\" />\n</fileset>\n</batchtest>\n</junit>\n\n- Matt\n\n-----Original Message-----\nFrom: vlad@trilogy.com [mailto:vlad@trilogy.com]\nSent: Wednesday, January 23, 2002 2:39 PM\nTo: Ant Users List\nSubject: RE: forked JVM's classpath not clean when using JUnit task\n\n\nIs the JVM really forked as you made me think? Otherwise all ANT classes\nhave access to crimson classes because it is seen by AntClassLoader....\n\n\n\n\nPlease respond to \"Ant Users List\" <ant-user@jakarta.apache.org>\nTo:     \"Ant Users List\" <ant-user@jakarta.apache.org>\ncc:\n\nSubject:        RE: forked JVM's classpath not clean when using JUnit task\n\n\nVlad,\n\nThanks for your reply.\n\n> - if crimson is in your JRE ext directory, removing it from the task's\n> classpath won't make a difference.\n\nnot the case here\n\n> - are you sure you are not including the crimson classes through one of\n> the other jars? How about the CLASSPATH env var?\n\nall of these things do not contain the crimson class files.\n\nAny other ideas?\n\n- Matt\n\n-----Original Message-----\nFrom: vlad@trilogy.com [mailto:vlad@trilogy.com]\nSent: Wednesday, January 23, 2002 12:27 PM\nTo: Ant Users List\nSubject: Re: forked JVM's classpath not clean when using JUnit task\n\n\nI am not familiar with junit task but I can make these comments:\n\n- if crimson is in your JRE ext directory, removing it from the task's\nclasspath won't make a difference.\n- are you sure you are not including the crimson classes through one of\nthe other jars? How about the CLASSPATH env var?\n\nVlad.\n\n\nPlease respond to \"Ant Users List\" <ant-user@jakarta.apache.org>\nTo:     <ant-user@jakarta.apache.org>\ncc:\n\nSubject:        forked JVM's classpath not clean when using JUnit task\n\n\nHi.\n\nI am aware that the answer to this may already be in the archives.  They\nare not available at the moment, however, so I thought I'd ask all of you\nfor your help.  If there is a mirror to the mail archive, or another\nresource that covers this issue, I'd be happy to read it.\n\nProblem (w2k., ant 1.4.1):\n\nWhen building a project that includes a junit task, it is apparent that\ncrimson.jar is accessible from the JUnitTestRunner.  This is undesireable,\nas my test should have no knowledge / access to crimson.jar.  I see this\nbehavior even when the fork attribute to my junit task is set to true.\n\nAs the output (below) shows, the execution of java.exe has the classpath\narg set to a path that does not include crimson.jar.  According to the\ndocs\nfor java.exe, this path should override any classpath set in the System's\nenvironment variables.  Nonetheless, the output from my test clearly\nindicates that crimson.jar is available to the test runner (and test).\n\nIs there a way to fix this so that I can cleanly (w/o crimson.jar on the\nclasspath) run my tests?\n\nOutput (verbose):\n\nrun-test-package:\n[junit] Running com.apelonTests.common.dom.TestApelDOMParser\n[junit] Executing:\nd:\\programs\\jdk1.3.1_01\\jre\\..\\bin\\java.exe -classpath\nD:\\programs\\jakarta-ant-1.4.1\\lib\\junit.ja\nr;D:\\programs\\jakarta-ant-1.4.1\\lib\\ant.jar;D:\\programs\\jakarta-ant-1.4.1\\li\nb\\jakarta-ant-1.4.1-optional.jar;D:\\Matt\\ape\nlon\\vss\\dev200104\\build\\tests\\ApelonCommon\\jars\\TestApelonCommon.jar;D:\\Matt\n\\apelon\\vss\\dev200104\\build\\dist\\lib\\ApelonC\nommon.jar;D:\\Matt\\apelon\\vss\\dev200104\\jars\\log4j.jar;D:\\Matt\\apelon\\vss\\dev\n200104\\jars\\parser.jar;D:\\Matt\\apelon\\vss\\de\nv200104\\jars\\xml.jar\norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\ncom.apelonTests.common.dom.TestApelDOM\nParser haltOnError=false haltOnFailure=false\nformatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFo\nrmatter\nformatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatt\ner,D:\\Matt\\apelon\\vss\\dev200104\\buil\nd\\tests\\ApelonCommon\\reports\\TEST-com.apelonTests.common.dom.TestApelDOMPars\ner.xml propsfile=D:\\Matt\\apelon\\vss\\Dev20010\n4\\build\\tests\\junit4486939605375226940.properties\n[junit] org.xml.sax.SAXParseException: Element type \"s\" is not declared.\n[junit]     at\norg.apache.crimson.parser.Parser2.error(Parser2.java:3086)\n[junit]     at\norg.apache.crimson.parser.Parser2.maybeElement(Parser2.java:1316)\n[junit]     at\norg.apache.crimson.parser.Parser2.parseInternal(Parser2.java:500)\n[junit]     at org.apache.crimson.parser.Parser2.parse(Parser2.java:305)\n[junit]     at\norg.apache.crimson.parser.XMLReaderImpl.parse(XMLReaderImpl.java:433)\n[junit]     at\norg.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:223)\n[junit]     at com.apelon.common.dom.ApelDOMParser.parse(Unknown Source)\n[junit]     at\ncom.apelonTests.common.dom.TestApelDOMParser.testParse(Unknown Source)\n[junit]     at java.lang.reflect.Method.invoke(Native Method)\n[junit]     at junit.framework.TestCase.runTest(TestCase.java:166)\n[junit]     at junit.framework.TestCase.runBare(TestCase.java:140)\n[junit]     at junit.framework.TestResult$1.protect(TestResult.java:106)\n[junit]     at\njunit.framework.TestResult.runProtected(TestResult.java:124)\n[junit]     at junit.framework.TestResult.run(TestResult.java:109)\n[junit]     at junit.framework.TestCase.run(TestCase.java:131)\n[junit]     at junit.framework.TestSuite.runTest(TestSuite.java:173)\n[junit]     at junit.framework.TestSuite.run(TestSuite.java:168)\n[junit]     at\norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRu\nnner.java:231)\n[junit]     at\norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestR\nunner.java:409)\n\nThanks in advance for any help you can offer.\n\n- Matt Munz (mmunz@apelon.com)\n\n\n\n\n--\nTo unsubscribe, e-mail:   <mailto:ant-user-unsubscribe@jakarta.apache.org>\nFor additional commands, e-mail: <mailto:ant-user-help@jakarta.apache.org>"}, {"count": 1, "tags": [], "bug_id": 6019, "attachment_id": null, "id": 17283, "time": "2002-06-06T06:18:28Z", "creator": "stevel@apache.org", "creation_time": "2002-06-06T06:18:28Z", "is_private": false, "text": "*** Bug 8794 has been marked as a duplicate of this bug. ***"}, {"count": 2, "attachment_id": null, "bug_id": 6019, "is_private": false, "id": 23510, "time": "2002-09-27T08:40:22Z", "creator": "bodewig@apache.org", "creation_time": "2002-09-27T08:40:22Z", "tags": [], "text": "manifest of 1.5 contains Xerces (and the other xml libs that ship with Ant)."}]
[{"count": 0, "text": "The finish() method should finish writing compressed data to the output stream\nwithout closing the underlying stream. With this method it is possible to apply\nmultiple filters in succession to the same output stream.", "creator": "Stefan.Liebig@compeople.de", "attachment_id": null, "id": 104591, "time": "2007-06-21T03:51:07Z", "bug_id": 42713, "creation_time": "2007-06-21T03:51:07Z", "tags": [], "is_private": false}, {"count": 1, "text": "Created attachment 20388\nVerifies/specifies the semantics of finish and close", "creator": "Stefan.Liebig@compeople.de", "attachment_id": 20388, "id": 104622, "time": "2007-06-22T02:11:39Z", "bug_id": 42713, "creation_time": "2007-06-22T02:11:39Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "Proposed patch:\n - finish added\n - close and finalize changed\n------------------------------------------------------------------------------\n\t/**\n\t * Finishes compressing to the underlying stream without closing it,\n\t * so that multiple compressors can write subsequently to the same\n\t * output stream.\n\t *  \n\t * @throws IOException\n\t */\n\tpublic void finish() throws IOException {\n\t\tOutputStream outShadow = this.out;\n\t\tif ( outShadow != null && this.data != null ) {\n\t\t\ttry {\n\t\t\t\tif ( this.runLength > 0 ) {\n\t\t\t\t\twriteRun();\n\t\t\t\t}\n\t\t\t\tthis.currentChar = -1;\n\t\t\t\tendBlock();\n\t\t\t\tendCompression();\n\t\t\t\t//\t\t\t\toutShadow.close();\n\t\t\t} finally {\n\t\t\t\t//\t\t\t\tthis.out = null;\n\t\t\t\tthis.data = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Overriden to close the stream.\n\t */\n\tprotected void finalize() throws Throwable {\n\t\tif ( this.data != null ) {\n\t\t\tclose();\n\t\t\tsuper.finalize();\n\t\t}\n\t}\n\n\tpublic void close() throws IOException {\n\t\tfinish();\n\t\tOutputStream outShadow = this.out;\n\t\tif ( outShadow != null ) {\n\t\t\ttry {\n\t\t\t\toutShadow.close();\n\t\t\t} finally {\n\t\t\t\tthis.out = null;\n\t\t\t}\n\t\t}\n\n\t\t//\t\tOutputStream outShadow = this.out;\n\t\t//\t\tif ( outShadow != null ) {\n\t\t//\t\t\ttry {\n\t\t//\t\t\t\tif ( this.runLength > 0 ) {\n\t\t//\t\t\t\t\twriteRun();\n\t\t//\t\t\t\t}\n\t\t//\t\t\t\tthis.currentChar = -1;\n\t\t//\t\t\t\tendBlock();\n\t\t//\t\t\t\tendCompression();\n\t\t//\t\t\t\toutShadow.close();\n\t\t//\t\t\t} finally {\n\t\t//\t\t\t\tthis.out = null;\n\t\t//\t\t\t\tthis.data = null;\n\t\t//\t\t\t}\n\t\t//\t\t}\n\t}\n", "is_private": false, "id": 104623, "creator": "Stefan.Liebig@compeople.de", "time": "2007-06-22T02:12:05Z", "bug_id": 42713, "creation_time": "2007-06-22T02:12:05Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42713, "attachment_id": 21001, "text": "Created attachment 21001\nVerifies/specifies the semantics of finish and close\n\nNow contains Apache License 2.0", "id": 109446, "time": "2007-10-17T22:13:55Z", "creator": "Stefan.Liebig@compeople.de", "creation_time": "2007-10-17T22:13:55Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 42713, "text": "This is request that would allow the Eclipse provisioning to make direct use of\nthe Apache Ant support without having to patch the CBZip2OutputStream.\nPlease see https://bugs.eclipse.org/bugs/show_bug.cgi?id=208996\n\nCan some please review and consider this patch?\n", "id": 110436, "time": "2007-11-12T09:14:04Z", "creator": "Darin_Swanson@us.ibm.com", "creation_time": "2007-11-12T09:14:04Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 42713, "attachment_id": null, "is_private": false, "id": 110450, "time": "2007-11-12T13:06:25Z", "creator": "peterreilly@apache.org", "creation_time": "2007-11-12T13:06:25Z", "text": "The patch is against a ant 1.7.0 version of\ncbzip2outputstream. This have been replaced\nwith a version from ant 1.6.5 as the ant 1.7.0\noutstream produces corrupt bz2 files for some\ninputs (ouch!).\n\nThe intent of the patch is fine, - although\nI would like ZipOutputStream and CBZip2OutputStream\nto have the same semantics for finish, close and finalize(!).\n"}, {"count": 6, "tags": [], "bug_id": 42713, "attachment_id": null, "is_private": false, "id": 110467, "time": "2007-11-12T22:33:31Z", "creator": "Stefan.Liebig@compeople.de", "creation_time": "2007-11-12T22:33:31Z", "text": "Having the same semantics as ZipOutputStream means that finalize() would not be\noverridden? That would be ok for me. Important for us is the semantics of\nfinish() which \u00b4finishes\u00b4 the compression but does not close the underlying\noutput stream.\n"}, {"count": 7, "tags": [], "bug_id": 42713, "text": "Is there a bug report for this faultily behavior of the 1.7.0 version?\nI modified the head version of bzip2 such that is supports the finish()\nsemantics. But one of my unit tests (already attached here) does fail. This\nfailure seems to be known\n(http://issues.apache.org/bugzilla/show_bug.cgi?id=32200) and fixed (?).", "id": 110468, "time": "2007-11-13T00:40:01Z", "creator": "Stefan.Liebig@compeople.de", "creation_time": "2007-11-13T00:40:01Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 42713, "attachment_id": null, "text": "The buggy behavior is described in \nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=41596\n\nThe best place to look for these is in WHATSNEW.\n\nI do not know about \nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=32200\nbut I assume that the rolled back code retriggered it.\n\nPeter", "id": 110469, "time": "2007-11-13T01:05:36Z", "creator": "peterreilly@apache.org", "creation_time": "2007-11-13T01:05:36Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 42713, "attachment_id": null, "is_private": false, "id": 110475, "time": "2007-11-13T05:02:46Z", "creator": "Stefan.Liebig@compeople.de", "creation_time": "2007-11-13T05:02:46Z", "text": "I tried to manually apply the patch from\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=32200 to the head version of\nbzip2. This causes BZip2OutputStream to no longer fail when nothing is written\nto it, but the resulting compressed date fails to decompress with BZip2InputStream.\nThe failure in Bzip2OS (no writes, just close) is caused by the field last = -1.\nThis leads to division by zero after adding 1 in method mainSort():\n\t\tfor (i = 0; i < NUM_OVERSHOOT_BYTES; i++) {\n\t\t\tblock[last + i + 2] = block[(i % (last + 1)) + 1];\n\t\t}\nThe patch now catches this case (last < 0) and sets than last = 0. But this case\n(last == 0) is also the case when you write just exactly one byte to the\nBzip2OS. I guess thats why Bzip2IS fails with reading the result of an \u00b4empty\ncompressed\u00b4 Bzip2OS.\n\n"}, {"count": 10, "text": "https://issues.apache.org/jira/browse/SANDBOX-194", "creator": "tcurdt@apache.org", "attachment_id": null, "id": 123949, "time": "2009-01-12T03:35:23Z", "bug_id": 42713, "creation_time": "2009-01-12T03:35:23Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "text": "merged commons-compress finish method in svn revision 741608\n", "attachment_id": null, "id": 124696, "creator": "bodewig@apache.org", "time": "2009-02-06T08:27:30Z", "bug_id": 42713, "creation_time": "2009-02-06T08:27:30Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 42713, "attachment_id": null, "is_private": false, "id": 124697, "time": "2009-02-06T08:29:55Z", "creator": "bodewig@apache.org", "creation_time": "2009-02-06T08:29:55Z", "text": "oops, svn revision 741618 it is."}]
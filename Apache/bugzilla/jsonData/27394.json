[{"count": 0, "tags": [], "bug_id": 27394, "attachment_id": null, "id": 53359, "time": "2004-03-03T05:33:56Z", "creator": "sasaki@appresso.com", "creation_time": "2004-03-03T05:33:56Z", "is_private": false, "text": "If the special characters (\u2460, \u2461, etc.) of WINDOWS are taken, a space may enter\nbehind a character.\n\nA reappearance procedure is written to below.\n\n1, CellType prepares two or more \"Numeric\" cells and cells of a \"String\".\n2, Special characters, such as \u2460, \u2461, and \u2462, are inserted in the cell.\n3, A value is taken by \" HSSFCell.getStringCellValue() \".\n4, System.out.println(\"[\" + value + \"]\");\n5, There is a part where a space enters between value and \"]\". (Ex.[\u2460 ])\n\nI do not understand the reappearance pattern."}, {"count": 1, "tags": [], "bug_id": 27394, "attachment_id": null, "text": "I am not sure which characters are being reported as broken. But I have noticed \na similar problem:\n\n1.  Using Excel, set a sheet name with one of the non-ISO 8859-1 characters in \nWindows ANSII Code Page 1252. For example, this includes s caron and z caron \n(but not a caron). Caron is the little cap diacritic drawn above the character. \nDon't use any non CP 1252 characters.\n\n2. Try to read the sheet name from POI. The character will show as a little \nsquare (because it is an invalid code point).\n\n3. If you use Biff Viewer, you will see that the sheet name has been stored by \nExcel as a compressed 8 bit string.\n\n4. If you look at the string that HSSF returns for the sheet name, you will see \nthat, for example, lower case z caron is converted by HSSF into \\u009e, which \nis actually not a valid code point. The proper representation of z caron is \n\\u0173.\n\nWhen I read the original report, I cannot tell which 'special characters' are \nbeing used. (They appear as little boxes in my browser). I suspect that \nthe 'special characters' may be those in ASCII range 0x80 - 0x9f, which cannot \nbe translated to Unicode simply by assuming that the high order byte is zero.\n\nAlso a question for sasaki: He should report what his windows code page is (if \nit is not 1252). Attaching a sample spreadsheet would probably help.\n\nDid I even get this right? The problem is that a special character is entered \ninside a cell, with Excel. When HSSF reads the value of that cell, it displays \nthe character as a little box, or possibly a space.", "id": 53477, "time": "2004-03-05T04:36:34Z", "creator": "zalewski@optonline.net", "creation_time": "2004-03-05T04:36:34Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 27394, "is_private": false, "id": 53486, "time": "2004-03-05T07:01:43Z", "creator": "sasaki@appresso.com", "creation_time": "2004-03-05T07:01:43Z", "tags": [], "text": "A summary is changed."}, {"count": 3, "tags": [], "bug_id": 27394, "is_private": false, "id": 53487, "creation_time": "2004-03-05T07:19:40Z", "time": "2004-03-05T07:19:40Z", "creator": "sasaki@appresso.com", "text": "I,m sorry.The character which I showed above had broken.\n\nThe special character whitch I said is Enclosed Alphanumerics characters \nin Unicode range \\u2460 - \\u24FF.\n\nThe code page whitch I use is Win 932.  \n\n", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 27394, "is_private": false, "id": 53488, "creation_time": "2004-03-05T07:28:24Z", "time": "2004-03-05T07:28:24Z", "creator": "sasaki@appresso.com", "text": "Created attachment 10671\nExcel file for this problem.", "attachment_id": 10671}, {"count": 5, "tags": [], "bug_id": 27394, "attachment_id": 10672, "text": "Created attachment 10672\nExcel file for this problem.", "id": 53489, "time": "2004-03-05T07:29:25Z", "creator": "sasaki@appresso.com", "creation_time": "2004-03-05T07:29:25Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 27394, "attachment_id": 10673, "id": 53490, "creation_time": "2004-03-05T07:31:09Z", "time": "2004-03-05T07:31:09Z", "creator": "sasaki@appresso.com", "text": "Created attachment 10673\nExcel file for this problem.", "is_private": false}, {"count": 7, "tags": [], "bug_id": 27394, "attachment_id": null, "id": 53492, "creation_time": "2004-03-05T07:35:25Z", "time": "2004-03-05T07:35:25Z", "creator": "sasaki@appresso.com", "text": "I'm sorry. All the above attached files are the same files.", "is_private": false}, {"count": 8, "tags": [], "bug_id": 27394, "attachment_id": null, "is_private": false, "id": 53547, "time": "2004-03-06T01:40:07Z", "creator": "zalewski@optonline.net", "creation_time": "2004-03-06T01:40:07Z", "text": "The string contains 'Far East Info', which I don't think is handled properly by \nHSSF.\n\nHere is what the String element looks like inside the SST record (beginning at \noffset 0x08)\n\n01 00         Length of String = 1 character\n05            Flags Far East Info, Unicode Characters\n10 00 00 00   Length of  Far East Info = 16 bytes\n60 24         Unicode code points = \\u2460 = \u2460\n01 00 0C 00   Far East Info (Undocumented 16 bytes)\n05 00 35 00\n00 00 00 00\n00 00 00 00\n\nI looked at the class org.apache.poi.hssf.record.UnicodeString, and I believe \nthis class does not understand Far East information Strings (Option = 0x04 \nthrough 0x07).\n\nThis class assumes that the first byte of the String will be at offset 3 from \nthe beginning of the SST element. But it's not that simple. The options flag at \noffset 2 may indicate that the String contains 'Far East Information' (if the \nbit at 0x04 is set). In this case, the length of the Far East Information is at \noffset 3, and the first character of the string begins at offset 7.\n\nAlso, the code page present in the spread sheet is 1200."}, {"count": 9, "tags": [], "bug_id": 27394, "is_private": false, "text": "The reported problem is not reproducible with the latest trunk.\nPlease try the latest 3.5-beta4 or download daily builds from http://encore.torchbox.com/poi-svn-build/\n\nYegor", "id": 123578, "time": "2008-12-29T08:48:36Z", "creator": "yegor@dinom.ru", "creation_time": "2008-12-29T08:48:36Z", "attachment_id": null}]
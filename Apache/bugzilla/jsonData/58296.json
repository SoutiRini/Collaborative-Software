[{"count": 0, "tags": [], "bug_id": 58296, "attachment_id": null, "text": "Limitation of maxLoadedJsps and usage of tag files may result in a memory leak in JspRuntimeContext.\n\nSteps to reproduce the leak:\n\n1) Set Tomcat in its web.xml to production mode and limit the max jsp count to 2\n\t\n\t<init-param>\n    \t<param-name>maxLoadedJsps</param-name>\n\t\t<param-value>2</param-value>\n\t</init-param>\n\t<init-param>\n\t\t<param-name>development</param-name>\n\t\t<param-value>false</param-value>\n\t</init-param>\n\n2) deploy the attach WAR-file \"tomcat-test.war\". The WAR contains one HttpServlet, three jsps and one tag file. GET-Requests to http://localhost:8080/tomcat-test/test render the jsps in the sequence \"1.jsp\" -> \"2.jsp\" -> \"3.jsp\". \nJSPs 1.jsp and 3.jsp use the tag \"test.tag\", 2.jsp contains only html.\n\n3) make at least 5 GET-Requests to http://localhost:8080/tomcat-test/test\n\n4) take a heap dump\n\n5) open the dump with Eclipse MAT\n\n6) execute the OOQL-Query \nselect * from org.apache.jasper.util.FastRemovalDequeue$Entry e where e.valid=false\n\n7) \"Path To GC Roots\" (right click on one result) shows that the invalid entries are in the retained heap of the tag's JspServletWrapper and hence in the retained heap of JspRuntimeContext.\n\nThe retained heap of JspRuntimeContext grows with every unloaded Jsp (its Entry in the jspQueue).\n\nThe bug is reproducible with Tomcat 7.0.52 and 8.0.26.\n\n\nSupposed causes:\n\n1) FastRemovalDequeue: removed Entry-instances are flagged as invalid. The \"previous\"-field of removed elements isn't set to null. So removed elements still reference their \"previous\" element (which still may be in the jspQueue of JspRuntimeContext)\n\n2) JspServletWrappers of currently loaded jsps and tag files are stored in the ConcurrentHashMap \"jsps\" in JspRuntimeContext. JspServletWrappers of Tag files hold (indirectly over JspCompilationContext -> JasperTagInfo -> ImplicitTagLibraryInfo -> ParserController) references to JspServletWrapper instances with already removed \"unloadHandles\" (FastRemovalDequeue$Entry instances with valid == false). \n\n2) leads in combination with 1) to a reproducible memory leak: the chain of \"previous\" linked entries contains all JspServletWrappers of unloaded and currently loaded jsps. In combination with maxLoadedJsps != -1, the chain can grow till an OutOfMemoryError occurs.", "id": 184813, "time": "2015-08-28T09:53:00Z", "creator": "christoph.empl@mgm-tp.com", "creation_time": "2015-08-28T09:53:00Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58296, "attachment_id": 33047, "text": "Created attachment 33047\nwar to reproduce the bug", "id": 184814, "time": "2015-08-28T09:53:58Z", "creator": "christoph.empl@mgm-tp.com", "creation_time": "2015-08-28T09:53:58Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58296, "text": "Created attachment 33048\nChain with previous linked FastRemovalDequeue$Entry instances - Eclipse MAT Screenshot", "id": 184815, "time": "2015-08-28T09:55:17Z", "creator": "christoph.empl@mgm-tp.com", "creation_time": "2015-08-28T09:55:17Z", "is_private": false, "attachment_id": 33048}, {"count": 3, "tags": [], "bug_id": 58296, "text": "Created attachment 33049\nJspRuntimeContext: retained heap contains invalid entry", "id": 184816, "time": "2015-08-28T10:03:06Z", "creator": "christoph.empl@mgm-tp.com", "creation_time": "2015-08-28T10:03:06Z", "is_private": false, "attachment_id": 33049}, {"count": 4, "attachment_id": null, "creator": "markt@apache.org", "text": "Thanks for the report. We really do appreciate bug reports that are as well written as this one.\n\nYour analysis was spot on. The bug has been fixed in trunk, 8.0.x (for 8.0.27 onwards) and 7.0.x (for 7.0.65 onwards).", "id": 185008, "time": "2015-09-07T11:43:58Z", "bug_id": 58296, "creation_time": "2015-09-07T11:43:58Z", "tags": [], "is_private": false}]
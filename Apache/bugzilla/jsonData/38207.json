[{"count": 0, "tags": [], "text": "CSS character escape sequences do not seem to parse correctly.\n\nFor example, the following ruleset delivers a wrong element name for the selector via SAC:\n\n.Headers\\a0 \\2b \\a0 \\28 Complex\\29 { display: inline }\n\nIt should be the string \"Headers\\a0 \\2b \\a0 \\28 Complex\\29\", but is currently delivered as \"Headers\n\\a0 \", which is wrong according to the CSS21 parsing/tokenization rules. It seems that the parser \nchokes on two subsequent character escapes that have been delimited by a single space character.", "attachment_id": null, "id": 84420, "creation_time": "2006-01-10T03:47:40Z", "time": "2006-01-10T03:47:40Z", "creator": "roth@visualclick.de", "bug_id": 38207, "is_private": false}, {"count": 1, "tags": [], "creator": "deweese@apache.org", "is_private": false, "id": 86738, "attachment_id": null, "bug_id": 38207, "creation_time": "2006-03-12T19:06:42Z", "time": "2006-03-12T19:06:42Z", "text": "I've been looking at the CSS2 spec and while I can\nsee where the BNF allows the whitespace I can't figure out\nwhat they want you to do with it:\n\n   Section 5.2 certainly doesn't make it clear what is\nsupposed to happen.  The BNF and the Syntax sections\ndon't either.  Where does the CSS spec make it\nclear that \".x x\" is supposed to class match\non \"x x\" instead of \"x\" with an element selector 'x'?\n\n(which is what I think Batik is doing).\n"}, {"text": "The relevant section you may want to look at for this is third bullet of the list in 4.1.3, Characters and \ncase at <http://www.w3.org/TR/CSS2/syndata.html#q4>: Exactly one whitespace after a character \nescape must be ignored.\n\nNote that my example\n\n.Headers\\a0 \\2b \\a0 \\28 Complex\\29 { ... }\n\ndoes not contain any \"significant\" whitespace after resolving the character \nescapes (which would make my example a descendant selector - which Batik seems to think this is) . \nThe selector in my example is a simple .class selector, where the class name is \"Headers \\a0 \\2b \n\\a0 \\28 Complex\\29\" (or in resolved form: \"Headers + (Complex)\" with the two spaces you are seeing \nbeing actually NO-BREAK SPACE characters).\n\nSince it seems that on SAC level character escapes are not yet resolved (at least, Batik's implementation \ndoes not seem to do this), they must be passed as-is to the client. This of course then includes the \nwhitespace characters after the character escapes, but they must be ignored (as described in the CSS2 \nspec) for determining the kind and components of the selector at hand.\n\nAs a side note, IMO character escapes should be resolved immediately during tokenization into a single \ncharacter (as this would probably ease further parsing) and fully resolved Unicode identifiers should be \ndelivered to a SAC client. But since SAC is only a W3C Note and doesn't define such important details, \nit's up to the implementation with what values to drive the interface.", "tags": [], "bug_id": 38207, "is_private": false, "count": 2, "id": 86740, "time": "2006-03-12T20:24:22Z", "creator": "roth@visualclick.de", "creation_time": "2006-03-12T20:24:22Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Have you checked the SVN version of Batik?\nI checked in a fix so CSS identifiers could start with\nescape chars and I think this may have fixed this problem.\n\nOtherwise can you attach a minimal SVG that shows\nthe problem?", "attachment_id": null, "id": 86741, "creation_time": "2006-03-12T21:09:27Z", "time": "2006-03-12T21:09:27Z", "creator": "deweese@apache.org", "bug_id": 38207, "is_private": false}, {"count": 4, "tags": [], "bug_id": 38207, "attachment_id": null, "text": "In Squiggle, CSS escapes don't work at all.\n\n.x\\78x {} matches class=\"x\\78x\" instead of class=\"xxx\"\n.x\\78 {} matches class=\"x\\78 \" (but not class=\"x\\78\") instead of class=\"xx\"\n\nThe Scanner has code for scanning escapes, but they seem never to be\nactually converted to the corresponding character.\n", "id": 97637, "time": "2007-01-04T06:18:49Z", "creator": "x00000000@freenet.de", "creation_time": "2007-01-04T06:18:49Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 38207, "is_private": false, "text": "Scanning consecutive escapes seems to work now, unless the escape has 6 digits,\nbecause\n\n            if (ScannerUtilities.isCSSSpace((char)current)) {\n                nextChar();\n            }\n            return;\n\nis missing after scanning the 6th hex digit in escape() in\nsources/org/apache/batik/css/parser/Scanner.java\n", "id": 97638, "time": "2007-01-04T06:53:00Z", "creator": "x00000000@freenet.de", "creation_time": "2007-01-04T06:53:00Z", "attachment_id": null}, {"text": "The missing code should be\n\n            nextChar();\n            if (ScannerUtilities.isCSSSpace((char)current)) {\n                nextChar();\n            }\n            return;\n", "tags": [], "bug_id": 38207, "attachment_id": null, "count": 6, "id": 97640, "time": "2007-01-04T07:20:37Z", "creator": "x00000000@freenet.de", "creation_time": "2007-01-04T07:20:37Z", "is_private": false}, {"count": 7, "tags": [], "creator": "x00000000@freenet.de", "text": "Created attachment 19355\npatch (mostly untested)\n\nNormal escapes should work with the patch in Squiggle, also an escaped 1st\nchar of a hash/id (which was mis-scanned previously).\n\nStill not working: escaped 1st chars of @-rules (note that @\\med\\ia seems to\nbe valid CSS and even should be equivalent to @media) and escaped lengths like\n1p\\x.\n\nThe charToHex() function is a copy of that in\nsources/org/apache/batik/util/ParsedURLDefaultProtocolHandler.java", "id": 97654, "time": "2007-01-04T12:57:20Z", "bug_id": 38207, "creation_time": "2007-01-04T12:57:20Z", "is_private": false, "attachment_id": 19355}, {"count": 8, "attachment_id": 19361, "creator": "x00000000@freenet.de", "is_private": false, "id": 97665, "time": "2007-01-04T14:38:36Z", "bug_id": 38207, "creation_time": "2007-01-04T14:38:36Z", "tags": [], "text": "Created attachment 19361\nMostly the same patch, but without unrolled loop in escape()\n\nNote: While testing some cases I noticed that the parser seems to have\nproblems with invalid selectors: A \"0 {}\" invalidates the whole stylesheet;\n\"{...}\" has the same effect as \"* {...}\"."}, {"count": 9, "tags": [], "text": "Created attachment 19402\npatch with additional fixes in the parser\n\nThe implementation of the CSS rules for handling parsing errors was *very*\nbuggy and incomplete, and mis-parsed also some valid stylesheets. The patch\nfixes the most serious issues, but is still incomplete. Especially recovery of\nparsing errors while inside of attribute selectors or functions (proper nesting\n\nof [] and () pairs) isn't working. I'm not sure how to best solve that.\n\nThe patch also fixes bug 41288.", "attachment_id": 19402, "bug_id": 38207, "id": 98012, "time": "2007-01-12T15:15:30Z", "creator": "x00000000@freenet.de", "creation_time": "2007-01-12T15:15:30Z", "is_private": false}, {"count": 10, "tags": [], "text": "Hi x00000000,\n\n    Your patch looks interesting but it is large enough that I think you\nwould have to provide a Contributors License Agreement to it to be applied\nto Batik:\n\n      http://www.apache.org/licenses/#clas\n\n    Also some examples of content that failed before the patch and work\nafter the patch would be useful (for inclusion in our testing framework).\n", "attachment_id": null, "id": 98021, "creation_time": "2007-01-13T03:38:51Z", "time": "2007-01-13T03:38:51Z", "creator": "deweese@apache.org", "bug_id": 38207, "is_private": false}, {"count": 11, "tags": [], "text": "(In reply to comment #10)\n>     Your patch looks interesting but it is large enough that I think you\n> would have to provide a Contributors License Agreement to it to be applied\n> to Batik:\n> \n>       http://www.apache.org/licenses/#clas\n\nI thought about it but decided not to sign it just for this bug (which is\njust about CSS conformance and can easily be worked around).\nHowever, I doubt that the patches constitute \"original work\"\n<http://en.wikipedia.org/wiki/Original_work> (only original work can be a\ncontribution as defined in the CLA), and in case they do, I hereby release\nthem into the public domain. Feel free to use them or ignore them.\n\nI will post the latest version of my patch, but will not continue to work\non it. It doesn't provide fully CSS conformant parsing, but it has no known\nregressions relative to the current trunk code. A better approach than\ncatching scanner exceptions in the parser to ensure forward-compatible\nparsing may be to modify the scanner to emit DELIM tokens (as defined by\nthe CSS \"core syntax\") instead of throwing exceptions.\n", "attachment_id": null, "id": 101093, "creation_time": "2007-03-28T05:46:01Z", "time": "2007-03-28T05:46:01Z", "creator": "x00000000@freenet.de", "bug_id": 38207, "is_private": false}, {"count": 12, "tags": [], "creator": "x00000000@freenet.de", "attachment_id": 19825, "is_private": false, "id": 101094, "time": "2007-03-28T05:47:21Z", "bug_id": 38207, "creation_time": "2007-03-28T05:47:21Z", "text": "Created attachment 19825\npatch (latest version)"}, {"count": 13, "tags": [], "text": "(In reply to comment #11)\n> However, I doubt that the patches constitute \"original work\"\n> <http://en.wikipedia.org/wiki/Original_work> (only original work can be a\n> contribution as defined in the CLA), and in case they do, I hereby release\n> them into the public domain.\n\nI'm assuming this mean we can integrate it. :-)", "attachment_id": null, "id": 135126, "creation_time": "2010-03-06T21:38:05Z", "time": "2010-03-06T21:38:05Z", "creator": "helder.magalhaes@gmail.com", "bug_id": 38207, "is_private": false}]
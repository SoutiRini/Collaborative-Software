[{"count": 0, "attachment_id": null, "creator": "matthew1001@hotmail.com", "text": "On attempting to use the Ant mail task on an IBM z/OS environment running in the EBCDIC codepage, the mail fails to send completely.\n\nThe problem appears to be related to the JVM failing to flush the the output stream correctly when it encounters a /n character in the PrintStream.write(int byte) method on an EBCDIC environment. However, I don't believe this is a JVM bug. \n\nWhen the JVM fails to flush the stream, the mail task hangs waiting for the SMTP server to respond, which it never will as the stream hasn't been flushed.\n\nThe following build.xml can be used to recreate the problem on an EBCDIC environment:\n\n<?xml version=\"1.0\" ?>\n<project>\n <target name=\"SEND_EMAIL\" >\n  <mail mailhost=\"my.mailserver.com\"\n\tmailport=\"25\"\n\tsubject=\"My email test\"\n\tencoding=\"plain\">\n\t<from address=\"matthew1001@hotmail.com\"/>\n\t<to address=\"matthew1001@hotmail.com\"/>\n\t<message>this is a test message</message>\n  </mail>\n </target>\n</project>\n\nA similar issue exists in the writing of MIME headers to the SMTP server. \n\nI believe PrintStream.println(String x) is used to write MIME headers, but the javadoc for PrintStream.println(String x) says that the string's characters are converted into bytes according to the platform's default character encoding. However, if your SMTP server doesn't support EBCDIC it won't understand the MIME headers being sent from an EBCDIC environment. \n\nI believe the fix for this would be to use the PrintStream.write(byte[] buff, int off, int len) method to write the headers to the output stream instead. The String.getBytes(String charsetName) method should be used to provide the byte buffer in the correct character set.", "id": 147019, "time": "2011-06-10T14:30:44Z", "bug_id": 51353, "creation_time": "2011-06-10T14:30:44Z", "tags": [], "is_private": false}]
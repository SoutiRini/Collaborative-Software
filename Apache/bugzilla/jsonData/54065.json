[{"count": 0, "tags": [], "bug_id": 54065, "attachment_id": null, "text": "I stumbled across this issue due to the fact that my application looses 15% overall performance when I switch from web-application version=\"2.5\" to \"3.0\" - no other code change, just the 1 line in web.xml!\n\nMy scenario is a tomcat server with 16 webapps using a \nshared.loader=${catalina.base}/applib/*.jar\nfor all my common jars.\n \n\nWhen version=3.0\" is specified in my web.xml, Catalina tries to look for web-fragment.xml and also invokes processResourceJARs(resourceJars) with all JARs. This subsequently seems to lead to getting a WARDirContext#doListBindings additionally to the FileDirContext#doListBindings. With version=\"2.5\" I don't get any WARDirContext.\n\nThe problem seems to be that this looks for resources in JNDI, even that I don't have any defined. And WARDirContxt#getEscapedJndiName seems to be pretty expensive.\n\n    private Name getEscapedJndiName(String name) throws InvalidNameException {\n        return new CompositeName(name.replace(\"'\", \"\\\\'\").replace(\"\\\"\", \"\"));\n    }\n\nnot sure if the CompositeName ct is so expensive, but we should at least try to avoid the double String replacement. This method gets invoked 553 times on my simple page for just a single page impression.\n\nNot sure if there is a way to cache valid JNDI entries maybe? I have not yet thought about that stuff, I just see that a regular ApplicationContext#getResourcePaths() is now way more expensive than it used to be.", "id": 163027, "time": "2012-10-29T13:48:40Z", "creator": "struberg@yahoo.de", "creation_time": "2012-10-29T13:48:40Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "text": "It looks like you have a resources JAR and Tomcat is picking this up. This will result in an additional look-up.\n\nYou can add the JAR with the resources to the org.apache.catalina.startup.ContextConfig.jarsToSkip property in $CATALINA_BASE/conf/catalina.properties which will mean it isn't scanned for web fragments, SCIs, resources etc.", "id": 163035, "time": "2012-10-29T18:44:17Z", "bug_id": 54065, "creation_time": "2012-10-29T18:44:17Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Hi Mark!\n\nThanks for the tip with the ContextConfig.jarsToSkip. That worked out well! Of course that also disables web-fragment parsing, right?\n\nWe have not been able to remove META-INF/resources though as this location is used by other EE specs (e.g. JSF) since years. So there is practically no way around this without breaking almost all JSF projects.\n\nThus I still think you should investigate the performance. It's sad that servlet-3.0 requires to lookup resources in JNDI upfront. This is utter expensive and really costs up to 20% of our performance. It's sad to see that some EGs try to add as much features as possible without thinking about the possible consequences. Maybe this can be solved via a negative cache (remembering JNDI misses)? Or probably via an own configuration to disable this behaviour? \n\nIn my case it's pretty easy as we have all of our server environment under full control ourselfs. But other developers cannot easily do this and thus would see a major performance penalty.", "attachment_id": null, "bug_id": 54065, "id": 163141, "time": "2012-11-02T12:15:22Z", "creator": "struberg@yahoo.de", "creation_time": "2012-11-02T12:15:22Z", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "(In reply to comment #2)\n> Thanks for the tip with the ContextConfig.jarsToSkip. That worked out well!\n> Of course that also disables web-fragment parsing, right?\n\nAnswered in comment #1.\n\n> We have not been able to remove META-INF/resources though as this location\n> is used by other EE specs (e.g. JSF) since years. So there is practically no\n> way around this without breaking almost all JSF projects.\n\nYes there is, ContextConfig.jarsToSkip.\n\n> Thus I still think you should investigate the performance. It's sad that\n> servlet-3.0 requires to lookup resources in JNDI upfront.\n\nThis is not a Servlet 3.0 requirement but a consequence of how Tomcat implements resources. The implementation isn't going to change as it is already very fragile. It has been re-written for Tomcat 8 and the caching in the new implementation should handle this.\n\n> This is utter\n> expensive and really costs up to 20% of our performance. It's sad to see\n> that some EGs try to add as much features as possible without thinking about\n> the possible consequences.\n\nThe Servlet EG members have very little say in what is in or out of the spec. Once Oracle decide a major feature is in/out then it is very hard to change that decision.\n\n> Maybe this can be solved via a negative cache\n> (remembering JNDI misses)? Or probably via an own configuration to disable\n> this behaviour? \n\nAgain, ContextConfig.jarsToSkip", "id": 163151, "time": "2012-11-03T11:24:09Z", "bug_id": 54065, "creation_time": "2012-11-03T11:24:09Z", "is_private": false}]
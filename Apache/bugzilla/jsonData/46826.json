[{"count": 0, "tags": [], "text": "The \"reference-orientation\" property is currently treated as an inheritable property (see FOPropertMapping.createLayoutProperties()), but this is not defined as such in the XSL-FO 1.1 Recommendation (see: 7.21.3, http://www.w3.org/TR/xsl/#reference-orientation)\n\nSimply changing the boolean in FOPropertyMapping reveals that we have somehow always worked around this issue. The generation of the region-reference-areas seems to depend on its 'reference-orientation % 90' being equal to that of the simple-page-master.\n\nSee for example:\nRegionBody.getViewportRectangle() and Page.setRegionReferencePosition().", "attachment_id": null, "id": 125445, "creator": "adelmelle@apache.org", "time": "2009-03-09T11:13:38Z", "bug_id": 46826, "creation_time": "2009-03-09T11:13:38Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 46826, "attachment_id": null, "text": "\nJust to keep track of the progress:\n\nCTM.getCTMAndRelDims() seems to expect a *relative* reference-orientation (with respect to the ancestor reference-area), so this would mean that we need to pass in the difference between the simple-page-master's reference-orientation and that of the region.\n\nSimplest case:\n\n<simple-page-master reference-orientation=\"90\" ...>\n  <region-body ...> <!--no explicit value-->\n\nCTM.getCTMAndRelDims() expects -90. In current FOP Trunk it gets 90 (inherited value). After fixing FOPropertyMapping, it gets 0.", "id": 125446, "time": "2009-03-09T11:32:21Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-09T11:32:21Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 46826, "attachment_id": null, "id": 125448, "time": "2009-03-09T11:48:49Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-09T11:48:49Z", "is_private": false, "text": "(In reply to comment #1)\n> CTM.getCTMAndRelDims() seems to expect a *relative* reference-orientation (with\n> respect to the ancestor reference-area), \n\nNote: the emphasis is due to the fact that the method signature and javadoc indicate that it's an 'absolute' value. When checking the method body, we get the idea of what this 'absolute' refers to."}, {"text": "Created attachment 23362\nProposed fix\n\nPatch fixing the issue: very self-contained, since it's only the region-reference-areas' placement that seemed to depend on it. An additional parameter to a private method seemed reasonable enough to meet the requirements of CTM.getCTMAndRelDims().", "tags": [], "creator": "adelmelle@apache.org", "is_private": false, "count": 3, "id": 125450, "time": "2009-03-09T13:16:50Z", "bug_id": 46826, "creation_time": "2009-03-09T13:16:50Z", "attachment_id": 23362}, {"text": "Andreas - I have a question about your proposed change. Its really only for my understanding: Suppose you have something like:\n\n<fo:simple-page-master name=\"a4\">\n  <fo:region-body reference-orientation=\"90\"/>\n</fo:simple-page-master>\n..\n<fo:flow flow-name=\"xsl-region-body>\n<fo:block>Text1\n<fo:block-container>\n<fo:block>Text2</fo:block>\n</fo:block-container>\n</fo:block>\n</fo:flow>\n\nThe current behaviour of this is that both Text1 and Text2 will be rotated. After your change can we expect Text1 and Text2 to have a different orientation?", "tags": [], "creator": "bowditch_chris@hotmail.com", "is_private": false, "count": 4, "id": 125464, "time": "2009-03-10T07:50:43Z", "bug_id": 46826, "creation_time": "2009-03-10T07:50:43Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> Andreas - I have a question about your proposed change. Its really only for my\n> understanding: Suppose you have something like:\n> \n<snip /> \n> The current behaviour of this is that both Text1 and Text2 will be rotated.\n> After your change can we expect Text1 and Text2 to have a different\n> orientation?\n\nI think not, and IIC, this should not be the case.\nNevertheless, I recently bumped into precisely that effect when nesting block-containers: the inner block-container would inherit the value of the outer block-container, and thus be rotated another 90 degrees relative to the outer b-c reference-area.\nIn the case you present, the region-body is rotated by 90 degrees. So, the flow-reference-area will be rotated by 90 degrees with respect to the page-reference-area. The block-container, having reference-orientation 0 relative to the flow-reference-area, will also be rotated by 90 degrees relative to the page.\n\nResult: with normal A4 dimensions (210x297), we will get a portrait page, with both Text1 and Text2 appearing below each other in the page's lower-left corner, rotated by the same amount wrt the page.", "is_private": false, "id": 125467, "creator": "adelmelle@apache.org", "time": "2009-03-10T10:43:40Z", "bug_id": 46826, "creation_time": "2009-03-10T10:43:40Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 46826, "attachment_id": null, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > Andreas - I have a question about your proposed change. Its really only for my\n> > understanding: Suppose you have something like:\n> > \n> <snip /> \n> > The current behaviour of this is that both Text1 and Text2 will be rotated.\n> > After your change can we expect Text1 and Text2 to have a different\n> > orientation?\n\nJust noticed: the answer could be Yes or No, depending on what you mean by 'different'. Different with respect to the page? Yes, definitely. Different with respect to each other? No.\n\nJust thought I'd clarify...", "id": 125468, "time": "2009-03-10T10:54:08Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-10T10:54:08Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 46826, "attachment_id": null, "is_private": false, "id": 125470, "time": "2009-03-10T11:48:16Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-10T11:48:16Z", "text": "\nForget the patch for the moment. Still too cheap. Just ran some more tests, and after the change:\n- the content is rotated OK, but...\n- the clipping rectangle is off (rotated yet another 90 degrees)\n\nAll the tests I could have known it was not going to be that easy. ;-)"}, {"count": 8, "tags": [], "bug_id": 46826, "attachment_id": 23367, "text": "Created attachment 23367\nPDF result before and after the patch\n\n\nSorry, previous remark was too fast again. Redoing the test after reverting the changes shows no difference. In attach, the PDF result for simple-page-master_reference-orientation.xml\nThe layout checks pass, but the issue did appear to exist before... The clipping rectangle is rotated once too many, and the offset due to the page-margins is taken into account twice. Seems to me the region-reference CTM should be an identity CTM, no? (identical to the", "id": 125471, "time": "2009-03-10T12:38:19Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-10T12:38:19Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 46826, "attachment_id": null, "text": "\nThe method fop.fo.pagination.Region.getViewportRectangle() returns a rectangle that takes into account the reference-orientation and writing-mode specified on the passed simple-page-master. \nNote: Not sure why the page-master is needed as an argument, since every Region has access to its parent (which can only be a simple-page-master). Some refactoring of the related classes seems to be in order (see the various implementations in org.apache.fop.fo.pagination).\nThe code blocks for initializing the pageWidthContext and pageHeightContext seem to belong in protected final methods in SimplePageMaster, rather than being repeated in every Region.\n\nAnyway, the returned rectangle has a width that is correctly constrained by the page-height if the page-master is rotated. So far, no real problem.\n\nThe method getViewportRectangle() is used in fop.area.Page. The returned rectangle is transformed by the pageCTM, and stored in RegionViewport as the viewArea. What seems slightly suspicious to me is that the position and dimensions of the region-reference-area are based on that viewArea, without taking into account that it may already be the result of a transform. (i.e. the viewArea's width in absolute terms, will be taken as IPD for the region\n\nCurrently, for a rotated simple-page-master, the region-reference-area's IPD will be conveniently set to the height of the viewArea, but this seems kind of a fluke... :-/ \nSince the region inherits the reference-orientation, the CTM that is attached to the RegionReference will also reflect the 'absolute' rotation of the page. If we treat it as a non-inheritable, the value on the region becomes 0, which should mean 'the same orientation as the page-reference-area',  but the effect we get is that only the region-viewports appear rotated... The content appears rotated back to the original page-viewport orientation. \n\nIf we correct this --as happens in the patch-- by passing the region-reference's 'absolute' rotation with regard to the page-viewport to getCTMAndRelDims(), then we get get a correct CTM and dimensions for the region-reference, but for the clipping rectangle the two CTMs (page and region) are combined to transform the viewArea. That one's already transformed, hence why we get the result in the attached PDF.", "id": 125673, "time": "2009-03-22T02:05:39Z", "creator": "adelmelle@apache.org", "creation_time": "2009-03-22T02:05:39Z", "is_private": false}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n\nJust noticed an unfinished sentence:\n\n> taking into account that it may already be the result of a transform. (i.e. the\n> viewArea's width in absolute terms, will be taken as IPD for the region\n\n... if the region's reference-orientation is 0, which is wrong.", "is_private": false, "id": 125674, "creator": "adelmelle@apache.org", "time": "2009-03-22T02:09:22Z", "bug_id": 46826, "creation_time": "2009-03-22T02:09:22Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 46826, "attachment_id": null, "is_private": false, "id": 157368, "time": "2012-04-07T01:41:58Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:41:58Z", "text": "resetting P2 open bugs to P3 pending further review"}]
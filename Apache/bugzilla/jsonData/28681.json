[{"count": 0, "tags": [], "bug_id": 28681, "attachment_id": null, "text": "The SQL task currently outputs only csv, but I need to have XML output, so I can\nxslt it and send it by mail as part of a cron job.\n\nHere is a the patch of a quick hack to do it, by setting outputFormat=\"xml\".\nMaybe it could be easier to do separator=\"xml\", but it mixes deinitions.\n\nThere are no test cases and no documentation, I am just posting it here in case\nsomeone else wants to use it or cares to prepare it for inclusion in Ant.", "id": 56617, "time": "2004-04-29T10:55:52Z", "creator": "nicolaken@apache.org", "creation_time": "2004-04-29T10:55:52Z", "is_private": false}, {"count": 1, "tags": [], "creator": "nicolaken@apache.org", "attachment_id": 11372, "text": "Created attachment 11372\nSQLExec.java.diff", "id": 56618, "time": "2004-04-29T10:56:25Z", "bug_id": 28681, "creation_time": "2004-04-29T10:56:25Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 28681, "text": "Added a nesting option, where the tags are nested to the level specified.\n\nExample:\n\n  <sql...\n    showheaders=\"false\"\n    outputFormat=\"xml\"\n    >\n      ${data.sql}\n    </sql>\n\ngives\n\n<sqlresults>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">1</cell></row>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">11</cell></row>\n    <row><cell header=\"A\">two</cell><cell header=\"B\">2</cell></row>\n</sqlresults>\n\n\nwhile\n\n  <sql...\n    showheaders=\"false\"\n    outputFormat=\"xml\"\n    nestLevel=\"1\"\n    >\n      ${data.sql}\n    </sql>\n\ngives\n\n<sqlresults>\n  <nest group-by=\"A\" value=\"one\">\n    <row><cell header=\"B\">1</cell></row>\n    <row><cell header=\"B\">11</cell></row>\n  </nest>\n  <nest group-by=\"A\" value=\"two\">\n    <row><cell header=\"B\">2</cell></row>\n  </nest>\n</sqlresults>\n\nTo keep memory low and good speed it deals with the values as they arrive.\n\nSo if this is nested;\n\n<sqlresults>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">1</cell></row>\n    <row><cell header=\"A\">two</cell><cell header=\"B\">2</cell></row>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">11</cell></row>\n</sqlresults>\n\nit gives this:\n\n<sqlresults>\n  <nest group-by=\"A\" value=\"one\">\n    <row><cell header=\"B\">1</cell></row>\n  </nest>\n  <nest group-by=\"A\" value=\"two\">\n    <row><cell header=\"B\">2</cell></row>\n  </nest>\n  <nest group-by=\"A\" value=\"one\">\n    <row><cell header=\"B\">11</cell></row>\n  </nest>\n</sqlresults>\n\nJust remember to make the query so that nesting values come first, and include\nthem in an \"ORDER BY\" clause in the same order.\n\nIE:\n\nfor a nestingLevel=1\n\nSELECT A,B,C\nFROM T\nORDER BY A\n\nfor a nestingLevel=2\n\nSELECT A,B,C\nFROM T\nORDER BY A,B\n\netc...\n\nNOTE: the patch supercedes and includes the previous ones", "id": 56821, "time": "2004-05-04T15:25:28Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-04T15:25:28Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 28681, "attachment_id": 11425, "text": "Created attachment 11425\nSQLExec.java.diff with grouping", "id": 56822, "time": "2004-05-04T15:26:13Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-04T15:26:13Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 28681, "text": "Although I have no ideological problem on generating XML from queries\nusing the this task, I do have a problem on inventing a new XML dialect\nwith no documentation (DTD nor XMLSchema) to express this output.\n\nIf we want to do do this, we should use a simple well known XML for\nqueries and be done with it. If people want something more rich they can\nuse XSLT on top of that.\n", "count": 4, "id": 56829, "time": "2004-05-04T18:29:23Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-04T18:29:23Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 28681, "attachment_id": null, "text": "> I do have a problem on inventing a new XML dialect\n> with no documentation (DTD nor XMLSchema) to express this output.\n\nI've added a DTD inline with the output (also in the new patch).\nSince I was at it, in the patch I also moved the method to escape xml in\nStringUtils.\n\n<?xml version=\"1.0\" ?>\n<!DOCTYPE sqlresults [\n  <!ELEMENT sqlresults (headers?, (nest | row)* )>\n  <!ELEMENT headers (header)*>\n  <!ELEMENT header (#PCDATA)>\n  <!ELEMENT nest (row)*>\n  <!ATTLIST nest group-by CDATA #REQUIRED\n                 value    CDATA #REQUIRED>\n  <!ELEMENT row (cell)*>\n  <!ELEMENT cell (#PCDATA)>\n  <!ATTLIST cell header CDATA #REQUIRED>\n]>\n\n> If we want to do do this, we should use a simple well known XML for\n> queries and be done with it. \n\nIt's not the query, it's the result in xml... and for that I don't know about\nwell-known schemas. If someone can point me to a \"standard\" I'd be happy to\nchange the element names to follow it.\n\n> If people want something more rich they can\n> use XSLT on top of that.\n\nThat's exactly what it does, it uses a fixed simple DTD. I had to include\ngrouping though as doing it by xsl is complicated and resource intensive. The\ngrouping this task does is as simple as can be.\n\nMaybe I'm missing something...", "id": 56853, "time": "2004-05-05T09:14:20Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-05T09:14:20Z", "is_private": false}, {"count": 6, "tags": [], "creator": "nicolaken@apache.org", "text": "Created attachment 11433\nSQLExec.java_and_StringUtils.java.diff", "id": 56854, "time": "2004-05-05T09:15:07Z", "bug_id": 28681, "creation_time": "2004-05-05T09:15:07Z", "is_private": false, "attachment_id": 11433}, {"count": 7, "tags": [], "bug_id": 28681, "text": "To me, we should just map ResultSet object into XML.\nResultSets are an iterative version of a table, and we should just\nbe able to express that in XML.\n\nI do not understand why we need to do grouping here, and how do you\nknow the grouping is on \"A\" on your example. Are you parsing the SQL\nor is this available as metadata from the resultset.\n\nI do not like all this nested things to be assummed just be the position of \nthe column or something some heuristic that will not work for the next guy \nthat tries to use the feature.\n\n\n", "id": 56861, "time": "2004-05-05T13:06:07Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-05T13:06:07Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 28681, "attachment_id": null, "text": "> To me, we should just map ResultSet object into XML.\n> ResultSets are an iterative version of a table, and we should just\n> be able to express that in XML.\n\nThis seems quite similar to a resultset in xml to me:\n\n<sqlresults>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">1</cell></row>\n    <row><cell header=\"A\">two</cell><cell header=\"B\">2</cell></row>\n    <row><cell header=\"A\">one</cell><cell header=\"B\">11</cell></row>\n</sqlresults>\n\n> I do not understand why we need to do grouping here,\n\nThen tell me how you would do it instead.\n\n> and how do you\n> know the grouping is on \"A\" on your example. Are you parsing the SQL\n> or is this available as metadata from the resultset.\n\nIt's the first column name, I get it from the metadata (@see the code).\n\n> I do not like all this nested things to be assummed just be the position of \n> the column or something some heuristic that will not work for the next guy \n> that tries to use the feature.\n\nThe nesting follows the column numbers. A nesting level of 1 groups by the first\ncolumn. It seems easy enough to understand, as it's what Excel or any other\nspreadsheet does when you ask for grouping. \n\nHow would you do it instead?", "id": 56877, "time": "2004-05-05T15:40:49Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-05T15:40:49Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 28681, "is_private": false, "count": 9, "id": 56879, "time": "2004-05-05T17:14:42Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-05T17:14:42Z", "text": "\nThat is exactly my point, I wouldn't do it (the nesting).\n\nWe keep on adding more and more things to the <sql> task\nand creating a monolithic monster (not you but over time).\n\nMaybe we should move any (nw query functionality) to a separate\ntask e.g., <sqlquery/> defined to extract data from the DB\nand leave <sql> mostly for ddl,dml operations.\n\nThen we probably can have a better definition for it."}, {"count": 10, "tags": [], "text": "> That is exactly my point, I wouldn't do it (the nesting).\n\nBut I need it, and I have to do it somewhere, and as I try to explain, it's best\nto do it in the data extraction.\n\n:-) \n\n> We keep on adding more and more things to the <sql> task\n> and creating a monolithic monster (not you but over time).\n\nThe fact is that here it's the easiest place to put things.\nWhat I could do is to make the SQLExtractor interface, and have the SQL task use\nthat if defined. In this way we would keep the sql stuff in the same place but\nhave pluggable extractors (maybe even a velocity extractor for templating).\n\n<sql blah blah>\n <extractor class=\"org.blik.MyExtractor\">\n   <param name=\"nesting\" value=\"2\"/>\n </extractor>\n</sql>\n\n> Maybe we should move any (nw query functionality) to a separate\n> task e.g., <sqlquery/> defined to extract data from the DB\n> and leave <sql> mostly for ddl,dml operations.\n\nI think this would confuse users, and for it I woul dhave to replicate code from\nthe sql task or do some refactoring.\n\n> Then we probably can have a better definition for it.\n\nAs?\n\nSorry, but I don't have time to think about this too much. If you can give me a\nmore detailed explanation of how you would like to see this, I could find some\ntime to do it, or else I'll jsut factor out the extractor.", "attachment_id": null, "id": 56910, "creator": "nicolaken@apache.org", "time": "2004-05-06T07:04:24Z", "bug_id": 28681, "creation_time": "2004-05-06T07:04:24Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 28681, "text": "Just to make my point more clear on why I think we are going in the wrong \ndireccion:\n\nIn your current proposal, your nested XML output requires a certain order for \nthe query, in order for nesting to be processed correctly. So what does happens\nif I have several queries in my <sql/>? Do they all are required to look the \nsame?\n\nYou see, with csv or with non-nested XML there is no assumption about the \nshape of the query. Hence it does not matter if you are executing one query or \n100 queries. But if now we want to be able to process the output\n(and since SQL can execute multiple queries in the same transaction, etc.), we \nwould need to provide the formatting rules (or the extractor) in a query by \nquery basis.\n\nWhen you look at all this issues, then you see that it is not that simple.\n - You probably need to be able to apply your extractor in a query by query\nbasis. \n\n - If you want to be able to write generic extractors, (e.g., velocity)\nthen you need to be able to specify the velocity script which may be complex.\n\n - If you want a scripted extractor, you may need to be able to include the \ntext of the script.\n\nSomething like:\n\n <sql ....>\n   <transaction>\n     <extractor class=\"foo.my.Extractor\">\n        <formatter>\n           \n        </formatter>\n        <query>\n          select a, b from c, d where c.a = d.b\n        </query>\n     </extractor>\n   </transaction>\n </sql>\n\nNow when you see all what is needed to do it properly, then it makes much more \nsence to use a separate task for all this.\n", "id": 56932, "time": "2004-05-06T15:34:51Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-06T15:34:51Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 28681, "attachment_id": null, "text": "Excuse me for interjecting a comment. As one of the other Sql task \"activists\"\nhere, I agree with Jose Alberto Fernandez. I would rather see a new task than\nsee task Sql have its code fancied up with features. At present, the\nSQLExec.java code implementing critical functionality relevant to the core\nmission of Ant is a readable piece of code. Core tasks should be allowed to\npersevere in such a state to the greatest extent possible.\n\nBetter to create a new task and only use well-characterized project-wide\npatterns to hook SQLExec.java if necessary to nest the new result set formatting\ntask. If it does not require hooks, then why not submit the formatter to\nAnt-Contrib where it can comforatbly enter the tree in an underdesigned\nfirst-cut state and evolve as one works out the requirements more fully?\n\n", "id": 56941, "time": "2004-05-06T18:10:52Z", "creator": "jwoehr@absolute-performance.com", "creation_time": "2004-05-06T18:10:52Z", "is_private": false}, {"count": 13, "tags": [], "creator": "nicolaken@apache.org", "attachment_id": null, "text": "Thanks for your replies guys.\n\nI'm sorry I probably seemed as being pissed off (and in fact I was a little ;-),\nbut I did not fully understand what you meaned in your comments.\n\n> In your current proposal, your nested XML output requires a certain order for \n> the query, in order for nesting to be processed correctly. So what does \n> happens if I have several queries in my <sql/>? Do they all are required to\n> look the same?\n\nActually a need a certain order for the *output* of the query, not the query\nitself. I mean, I don't care how you do the query, but the query gives a table\nas a result, right? So I nest based on the first, second, third, etc columns of\nthe resulting table, just like pivoting works in a spreadsheet.\n\nI thought that this would simplify it for the user (as it does for me), but\nprobably it's better to have the user specify the column names to group by.\n\n>  - If you want to be able to write generic extractors, (e.g., velocity)\n> then you need to be able to specify the velocity script which may be complex.\n\nI'd only add it as a file, and besides, it's part of the extractor code, not the\nsql one.\n\n>  - If you want a scripted extractor, you may need to be able to include the \n> text of the script.\n\n? Can't I jsut reference a file in the extractor part?\n\n> Something like:\n\n>  <sql ....>\n>   <transaction>\n>     <extractor class=\"foo.my.Extractor\">\n>        <formatter>\n>           \n>        </formatter>\n>        <query>\n>          select a, b from c, d where c.a = d.b\n>        </query>\n>     </extractor>\n>   </transaction>\n> </sql>\n>\n> Now when you see all what is needed to do it properly, then it makes much more \n> sence to use a separate task for all this.\n\nI'm still unconvinced, as the sql task already outputs CSV; but before\ncommenting further I'll try to add the extractor to the SQL task and see how the\ncode is, taking transactions into account. With that done, it will be easier for\nall to actually see it and decide.\n\n> Better to create a new task and only use well-characterized project-wide\n> patterns to hook SQLExec.java if necessary to nest the new result set \n> formatting task. \n\nThat's the idea, probably I was not clear. I mean that I want to separate the\n<extractor> part outside of the <sql> taks, leaving just hooks that keep all the\nsql stuff in the sql task.\n\n> If it does not require hooks, then why not submit the formatter to\n> Ant-Contrib where it can comforatbly enter the tree in an underdesigned\n> first-cut state and evolve as one works out the requirements more fully?\n\nI would happily do it, but to be able to format while the sql task is running I\nneed hooks.\n\nThanks guys for keeping the replies coming, I'll see what I can do about this. :-)\n\n", "id": 56977, "time": "2004-05-07T08:35:34Z", "bug_id": 28681, "creation_time": "2004-05-07T08:35:34Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 28681, "text": "I've refactored this stuff to use an external \"extractor\". \nThis is how it works with the current patch:\n\n  <taskdef name=\"extractorxml\" \n      classname=\"org.apache.tools.ant.taskdefs.SQLExtractorXML\"/>   \n\n  <extractorxml id=\"myextractorxml\"/> \n  \n    <sql driver=\"...\"\n         url=\"...\"\n         userid=\"...\"\n         password=\"...\"\n         print=\"yes\"\n         output=\"${work.dir}/outputfile.xml\"\n         extractorRef=\"myextractorxml\"\n    >\n      ${data.sql}\n    </sql>\n\nIf I want to use nesting for the xml output, I have to tell the extractor, not\nthe sql task, thus effectively separating the chores:\n\n  <extractorxml id=\"myextractorxml\" nestLevel=\"2\"/>\n\nI have not refactored out the CSV extraction to maintain compatibility with\nprevious versions, so in practice only extra output extractors need to be\ndefined this way.\n\nWDYT?", "id": 58056, "time": "2004-05-25T15:12:17Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-25T15:12:17Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 28681, "attachment_id": 11661, "text": "Created attachment 11661\nSQL-extractor-patch.txt", "id": 58057, "time": "2004-05-25T15:12:45Z", "creator": "nicolaken@apache.org", "creation_time": "2004-05-25T15:12:45Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 28681, "text": "Waiting for the perfect solution almost 4 years have passed... maybe getting things done is better than getting them right.", "count": 16, "id": 115074, "time": "2008-03-28T09:12:12Z", "creator": "nicolaken@apache.org", "creation_time": "2008-03-28T09:12:12Z", "is_private": false}, {"count": 17, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "text": "The problem is that the sql task is so full of bugs that\nany serious sql user would not use it\nand it has no unit tests and some strange code for\ntokenizing sql lines that no ant developer would want to touch it.\n\n", "id": 115075, "time": "2008-03-28T09:22:27Z", "bug_id": 28681, "creation_time": "2008-03-28T09:22:27Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 28681, "text": ";-)\n\nI can easily put it somewhere else on the web, non problem. \nShall we mark it WONTFIX?", "id": 115076, "time": "2008-03-28T09:33:31Z", "creator": "nicolaken@apache.org", "creation_time": "2008-03-28T09:33:31Z", "is_private": false, "attachment_id": null}]
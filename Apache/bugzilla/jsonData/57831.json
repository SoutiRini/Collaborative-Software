[{"count": 0, "tags": [], "text": "Created attachment 32660\nMessage that causes the failure\n\nTomcat 8.0.21 (not 8.0.20 or earlier) is throwing an IllegalStateException for JSON messages.  Below is the exception being thrown.\n\nException in thread \"WebSocketServer-localhost-/temp-4\" java.lang.IllegalStateException: When sending a fragmented message, all fragments bust be of the same type\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:411)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.endMessage(WsRemoteEndpointImplBase.java:366)\n        at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$IntermediateMessageHandler.onResult(WsRemoteEndpointImplBase.java:513)\n        at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer$OnResultRunnable.run(WsRemoteEndpointImplServer.java:247)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n        at java.lang.Thread.run(Unknown Source)\n\nAttached is the message that is causing the issue.\n\nLooking at the top few lines:\n\n{\n  \"context\": \"4IVS04\",\n  \"data\": {\n    \"enterfornext\": true,\n    \"inputs\": [\n      {\n        \"autocomplete\": 3,\n        \"desc\": \"Enter Tool: \",\n        \"options\": [\n          \"DNOTCH10\",\n          \"DNOTCH11\",\n\nIf the entire \"DNOTCH10\" line is removed, the message can be transmitted by Tomcat; however, even adding a single \"illegal\" character in the JSON after this line is removed causes the error to be thrown.\n\nIt appears Tomcat is analyzing the fragments its sending and determining that some cannot be sent because they are not legitimate JSON (or something to that affect).\n\nAgain, version 8.0.20 and below does not have this issue.\n\nThanks\n\nKen\n\nP.S. I can provide the test web app to demonstrate this.", "is_private": false, "id": 182476, "creator": "kenneth.gendron@gmail.com", "time": "2015-04-18T22:43:53Z", "bug_id": 57831, "creation_time": "2015-04-18T22:43:53Z", "attachment_id": 32660}, {"count": 1, "attachment_id": null, "bug_id": 57831, "is_private": false, "id": 182477, "time": "2015-04-18T23:42:14Z", "creator": "kenneth.gendron@gmail.com", "creation_time": "2015-04-18T23:42:14Z", "tags": [], "text": "The changes to PerMessageDeflate class have caused the opCode for the subsequent fragments to change from OPCODE_TEXT to OPCODE_CONTINUATION (i.e. they are transformed).  This cause the \"Util.isText(mp.getOpCode())\" code at line 406 of the WsRemoteEndpointImplBase class to return false.  \n\nI suspect other things are being affected by the PerMessageDeflate class changes, most notably the other send methods; however, adding \"|| Util.isContinuation(mp.getOpCode())\" will fix this."}, {"count": 2, "tags": [], "bug_id": 57831, "text": "Line 451 in PerMessageDeflate.  Just as an aside this should be set to Constants.OPCODE_CONTINUATION, not zero \"0\" explicitly.", "id": 182478, "time": "2015-04-18T23:49:39Z", "creator": "kenneth.gendron@gmail.com", "creation_time": "2015-04-18T23:49:39Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57831, "text": "The fix I proposed would have broken binary transmission.  Instead simply changing line 410 in WsRemoteEndpointImplBase to \"if (text != isText && mp.getOpCode() != Constants.OPCODE_CONTINUATION) {\" should work.  It does essentially break the implementations ability to detect changes in type but I do not see a ready alternative.", "id": 182479, "time": "2015-04-19T00:39:32Z", "creator": "kenneth.gendron@gmail.com", "creation_time": "2015-04-19T00:39:32Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of bug 57776 ***", "id": 182482, "time": "2015-04-19T07:38:21Z", "bug_id": 57831, "creation_time": "2015-04-19T07:38:21Z", "attachment_id": null}]
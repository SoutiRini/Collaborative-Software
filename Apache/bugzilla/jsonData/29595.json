[{"count": 0, "tags": [], "text": "A memory retention problem has been detected in the \norg.apache.xml.security.utils.IdResolver class.\n\nThe reason lies inside the method \"public static void registerElementById\n(Element element, String idValue)\", specifically in this line:\n\n>>\n      elementMap.put(idValue, element);\n>>\n\nThis instruction adds elements to a WeakHashMap using \"strong\" references, \nnot \"weak\" references (please see \nhttp://java.sun.com/j2se/1.4.2/docs/api/java/util/WeakHashMap.html for \ndetails). (These elements contain xerces DeferredDocumentImpl objects). The \nJVM's garbage collector will automatically remove from the memory heap all the \nobjects referenced \"weakly\" that are no longer used, but not the objects  \nreferenced \"strongly\".\n\nTherefore, this instruction provokes that the gc cannot remove all objects from \nmemory, so each invocation to the IdResolver class leaves new objects in the \nheap that cannot removed after use. The result is that the heap consumption \ngrows constantly  until the maximum configured for the JVM, making the \nperformance degrade more and more.\n\nAfter discussion in the developers mail list, two solving approaches have been \nproposed:\n\n1) Proposed by Salvador Deltoro (s_deltoro@hotmail.com)\n\nWe have developed locally a patch in order to solve this issue that has worked \nperfectly well under performance testing. I have substituted the former \ninstruction by this one:\n\n>>\n     elementMap.put(idValue, new java.lang.ref.WeakReference(element));\n>>\n\nIn this way, the IdResolver class puts the element as a explicit \"weak\" \nreference, so the garbage collector can remove it when no longer\n\n\n2) Proposed by Ra\u00fal Benito (raul-info@r-bg.com)\nquoting his mail 3rd june 2004...\n>>\nThis is exactly what is happening in one call path, see this code\n\nXMLSignature(but the same code is Manifest,Reference, and several others)\n   /**\n    * Sets the <code>Id</code> attribute\n    *\n    * @param Id Id value to be used by the id attribute on the Signature \nElement\n    */\n   public void setId(String Id) {\n\n      if ((this._state == MODE_SIGN) && (Id != null)) {\n         this._constructionElement.setAttributeNS(null, \nConstants._ATT_ID, Id);\n         IdResolver.registerElementById(this._constructionElement, Id);\n      }\n   }\n\nIf you see when the setId is called it is called the Key is referenced \nby the value in a hard way.\nWe can modify the put or we can modify this call but it seams a memory \nleak that needs to be fixed.\n>>", "attachment_id": null, "bug_id": 29595, "id": 59272, "time": "2004-06-16T10:48:25Z", "creator": "s_deltoro@hotmail.com", "creation_time": "2004-06-16T10:48:25Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 29595, "text": "Created attachment 11911\nProposed solution to this bug", "id": 59726, "time": "2004-06-22T17:22:01Z", "creator": "tdiepenbrock@yahoo.com", "creation_time": "2004-06-22T17:22:01Z", "is_private": false, "attachment_id": 11911}, {"count": 2, "tags": [], "bug_id": 29595, "attachment_id": null, "text": "Updated patch from Anderson Jonathan <anderson_jonathan@bah.com>:\nhttp://marc.theaimsgroup.com/?l=xml-security-dev&m=108915486412417&w=2\n", "id": 60216, "time": "2004-07-07T01:49:40Z", "creator": "dims@yahoo.com", "creation_time": "2004-07-07T01:49:40Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 29595, "text": "Applied fix.\n\n-- dims", "count": 3, "id": 60217, "time": "2004-07-07T01:51:21Z", "creator": "dims@yahoo.com", "creation_time": "2004-07-07T01:51:21Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "raul-info@r-bg.com", "is_private": false, "count": 4, "id": 91948, "time": "2006-08-06T17:30:26Z", "bug_id": 29595, "creation_time": "2006-08-06T17:30:26Z", "text": "Closing old bugs."}]
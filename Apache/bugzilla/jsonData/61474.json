[{"count": 0, "attachment_id": null, "creator": "drjovanovic@gmail.com", "text": "In POI there is class FormulaShifter which deals with problem of adjusting cell references inside formulas in case of shifting or copying of rows. This works fine, but only for rows. \nThere is completely same need for reference-adjusting in the case of shifting or copying of columns, and it is not implemented.\nAlgorithm for formula adjusting is pretty complex, with a lot of use cases, so it would be good to use existing algorithm for columns, and not create an other one.\n\nSolution :\nI've created class CompleteFormulaShifter, as an improved version of FormulaShifter, with following enhancements :\n- it takes formula string as input, not a list of Ptgs;\n- it can work in both column and row modes.\nColumn mode is implemented in a simple way : \n1. transpose cell references (switch column and row coordinates);\n2. adjust references using existing algorithm for shifting of rows;\n3. transpose new cell references back.", "id": 200540, "time": "2017-08-31T12:37:55Z", "bug_id": 61474, "creation_time": "2017-08-31T12:37:55Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 61474, "text": "In order to make this work, I have made two minor changes in some old classes. In FormulaShifter,  private static enum ShiftMode became public.\nIn HSSFCell,  protected CellValueRecordInterface getCellValueRecord() became public.", "id": 200541, "time": "2017-08-31T12:40:09Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-08-31T12:40:09Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61474, "attachment_id": null, "text": "Dragan - there appears to be no patch attached. If you are still working on this, could you add your patch as a Pull Request in github. It makes it easier to review the patch. https://github.com/apache/poi", "id": 200547, "time": "2017-08-31T18:53:05Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-08-31T18:53:05Z", "is_private": false}, {"count": 3, "attachment_id": 35287, "creator": "drjovanovic@gmail.com", "text": "Created attachment 35287\nnew class CompleteFormulaShifter, and two minor changes, in patch format", "id": 200645, "time": "2017-09-04T12:39:29Z", "bug_id": 61474, "creation_time": "2017-09-04T12:39:29Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 61474, "attachment_id": null, "text": "I could not create pull request (I tried to push changes, and got refused), so I am sending a patch with changes.", "id": 200646, "time": "2017-09-04T12:45:54Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-04T12:45:54Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "fanningpj@yahoo.com", "text": "Dragan - could you add unit test coverage?", "id": 200647, "time": "2017-09-04T13:51:51Z", "bug_id": 61474, "creation_time": "2017-09-04T13:51:51Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 61474, "attachment_id": 35294, "text": "Created attachment 35294\npartial test case for CompleteFormulaShifter\n\nAdded junit test for CompleteFormulaShifter. \nIt's work in progress and it's not very detailed at the moment, but it should be good enough to help you conclude is CompleteFormulaShifter conceptually good.", "id": 200666, "time": "2017-09-05T09:50:31Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-05T09:50:31Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 61474, "is_private": false, "text": "(In reply to Dragan Jovanovi\u0107 from comment #3)\n> Created attachment 35287 [details]\n> new class CompleteFormulaShifter, and two minor changes, in patch format\n\nCompleteFormulaShifter appears to duplicate what some of the existing code already does. I'd like to see this contribution have a neutral or a net negative SLoC on the codebase.\n\nI agree that I'd like to see column shifting (moving, copying, inserting, deleting) implemented eventually. There are still quite a few open issues with row shifting. Besides the open bugs, the API is weak and should be improved (rewritten). I think it'd be wise to resolve the duplicated row-shifting code in HSSF and XSSF and get a solid row-shifting API implemented before moving on to column shifting, unless we can do so without increasing the amount of buggy code with a poor API. Column operations are an order of magnitude more difficult in POI than row operations due to the row-major storage.\n\nOpen bugs with \"shift\" in title:\nbug 46742: Tracker: Remaining functionality for Sheet.shiftRows()\nbug 56454: XSSFSheet.shiftRows(...) and HSSFSheet.shiftRows(...) incorrectly handle merged regions that do not contain column 0.\nbug 59733: shiftRows() causes org.apache.xmlbeans.impl.values.XmlValueDisconnectedException\nbug 57423: shiftRows() produces a corrupted xlsx file\nbug 60072: Sheet shiftRows doesn't trigger charts position updating\nbug 59731: Consolidate duplicated code for row shifting\nbug 53320: FormulaShifter doesn't take care to absolute references\nbug 58221: Shifting rows while trying to sort causes XmlValueDisconnectedException\nbug 59306: Shifting rows does not shift chart data series references\nbug 56123: ShiftRows, Bug in POI 3.10 Beta 2: \"Could not find 'internal references' EXTERNALBOOK\"\nbug 54509: Cells in shifting rows are not used in column-referencing formulas.\nbug 54533: Shifting rows does not shift the Zero Height flag", "id": 200943, "time": "2017-09-19T02:56:42Z", "creator": "onealj@apache.org", "creation_time": "2017-09-19T02:56:42Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 61474, "text": "Thanks for comment. You're right that there is duplication in the code. I would be willing to work on this to eliminate the duplication but that would probably not result in net neutral SLoC because there is additional functionality. Column shifting certainly is useful functionality which  provides value and which we and others need. We will definitely be using it for our application context. \n\nI have taken a look at the issues that you have listed to see which issues are really relevant. 46742 is certainly relevant as it sketches additional functionality that would be useful. But this is really independent from column shifting. Column shifting does not make these items much easier or harder to fix. Many of the other bugs do not seem to really be very relevant (i.e. 53320, 54509). Unfortunately my employer is not very likely to support work on these issues. \n\nSo overall I see this as your call. I can do work on eliminating the duplications.  \n\nMaybe I would be willing to fix some of the open issues on my own time. But if you want to consider column shifting only after all the earlier bugs have been resolved, that would make little sense to me.", "id": 200950, "time": "2017-09-19T10:39:58Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-19T10:39:58Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 61474, "text": "Let's rewind to what signature shifting columns should have.\n\nSheet.shiftRows(int startRow, int endRow, int n[, boolean copyRowHeight])\n\nI wrote copyRows with a CellCopyPolicy object to avoid having a long signature. Do we want something similar for a new shiftRows and shiftColumns method?\n\nUsually when I use shiftRows, I have to shift from some insertion point to the last row in the workbook so I don't shift rows onto existing rows. Can shiftRows/shiftColumns be used with n>0 and endRow!=last row number?\n\nCan we make shiftRows/shiftColumns behave as close to Excel as possible to make it as intuitive to use as possible? I favor calling it insert rows instead of shift rows since it's clearer that it isn't copying or cutting (though we should provide that ability).\n\nIf all you have time for now is a clone of shiftRows behavior, we'll commit that and incrementally improve it later if there's interest. It just means breaking the API at a later date.", "id": 200965, "time": "2017-09-19T15:52:22Z", "creator": "onealj@apache.org", "creation_time": "2017-09-19T15:52:22Z", "is_private": false, "attachment_id": null}, {"text": "I can work on Sheet.shiftColumns() method now.\n\nAt the moment I am not interested in dealing with CellCopyPolicy details, so I\u2019d just implement Sheet.shiftColumns(int startColumn, int endColumn, int n), and leave CellCopyPolicy for later.\nI see there is much more to shift rows/couimns than just adjust formulas, so I\u2019ll have to take care of whole RowShifter class(es). I\u2019ll try to make one XSSF class which will work as both row shifter and column shifter, and if I run into complications, maybe I\u2019ll make completely new ColumnShifter. My focus is on XSSF now, and maybe later we can think about HSSF variation. If you have some hints about possible hidden issues which I have to take care of while working on this, please let me know.\n\nI would like to keep that endRow/endColumn parameter just for the case (though I am not aware of any scenarios where it is needed). I hope it won\u2019t make us a big complication.\n\nI agree that people will often look for an insertRows/insertColumns method rather than a shiftRow/shiftColumn method. But shifting can be made in both directions because it is also used for deletion. A negative value for an insert method step parameter is not very intuitive, so I would prefer keeping the names as they are. \n\nAlso, if you don\u2019t mind, I would like to merge some methods from my CompleteFormulaShifter class content into FormulaShifter, because, in its essence, CompleteFormulaShifter is an upgraded version od FormulaShifter, I just did not want to touch existing class at the very begining. In this way, POI clients may use continue using \nFormulaShifter class, and avoid thinking about improvements.\n\n\nSo my plan now could be :\n- merge CompleteFormulaShifter class into FormulaShifter; \n- upgrade XSSFRowShifter to make it work with both rows and columns; \n- maybe move some code from  XSSFSheet.shiftRows() method to XSSFRowShifter class, just to make code more clear;\n- implement XSSFSheet.shiftColumns(int startColumn, int endColumn, final int n) method.\n\nDoes that sound ok ?", "tags": [], "bug_id": 61474, "is_private": false, "count": 10, "id": 201038, "time": "2017-09-21T11:38:34Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-21T11:38:34Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 61474, "attachment_id": null, "text": "Started working on this.\n\nMoved some logic from CompleteFormulaShifter to FormulaShifter, so now FormulaShifter itsself deals with both rows and columns, and transposing.\nRemoved parsing logic which was in CompleteFormulaShifter, now again HSSF and XSSF pass ptg[] objects to FormulaShifter, so there is no more duplication of code.\nIntroduced class XSSFColumnShifter which should work analog to XSSFRowShifter.\nCreated new class XSSFFormulaShiftingManager. Moved all formula-shifting related methods from XSSFRowShifter to XSSFFormulaShiftingManager. Now both row shifter and column shifter use XSSFFormulaShiftingManager for formula shifting (logic is perfectly same in both cases).\nImplemented cell-shifting logic in XSSFColumnShifter. \nIntroduced XSSFSheet.shiftColumns() method, similar to XSSFSheet.shiftRow(). At the moment, shiftColumns() can shift cell and formulas. I also have a brief unit test for this.\n\nNow I have to deal with all other stuf which exists in shiftRow() method \u2013 removing of overwritten items, updateNamedRanges, shiftMergedRegions, updateConditionalFormatting...\nI see there are no unit tests which cover those subjects in shiftRow(). If you are aware of some other existing tests which can help me test this logic for column shifting, please let me know.", "id": 201147, "time": "2017-09-27T11:42:07Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-27T11:42:07Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 61474, "is_private": false, "text": "(In reply to Dragan Jovanovi\u0107 from comment #10)\n> So my plan now could be :\n> - merge CompleteFormulaShifter class into FormulaShifter; \n> - upgrade XSSFRowShifter to make it work with both rows and columns; \n> - maybe move some code from  XSSFSheet.shiftRows() method to XSSFRowShifter\n> class, just to make code more clear;\n> - implement XSSFSheet.shiftColumns(int startColumn, int endColumn, final int\n> n) method.\n> \n> Does that sound ok ?\n\nSounds good", "id": 201161, "time": "2017-09-27T15:32:38Z", "creator": "onealj@apache.org", "creation_time": "2017-09-27T15:32:38Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 61474, "text": "(In reply to Dragan Jovanovi\u0107 from comment #11)\n> Started working on this.\n\nDo you have a work-in-progress patch that is shareable yet?", "id": 201162, "time": "2017-09-27T15:35:15Z", "creator": "onealj@apache.org", "creation_time": "2017-09-27T15:35:15Z", "is_private": false, "attachment_id": null}, {"count": 14, "attachment_id": null, "creator": "onealj@apache.org", "text": "(In reply to Dragan Jovanovi\u0107 from comment #11)\n> I see there are no unit tests which cover those subjects [updateNamedRanges, shiftMergedRegions, updateConditionalFormatting] in shiftRow(). If\n> you are aware of some other existing tests which can help me test this logic\n> for column shifting, please let me know.\n\nThere are a few spots...\n\n$ trunk grep -l -r shiftRows src/testcases src/ooxml/testcases  \nsrc/testcases/org/apache/poi/ss/usermodel/BaseTestSheetUpdateArrayFormulas.java\nsrc/testcases/org/apache/poi/ss/usermodel/BaseTestSheetShiftRows.java\nsrc/testcases/org/apache/poi/ss/usermodel/BaseTestConditionalFormatting.java\nsrc/testcases/org/apache/poi/ss/usermodel/BaseTestSheet.java\nsrc/testcases/org/apache/poi/hssf/usermodel/TestBugs.java\nsrc/testcases/org/apache/poi/hssf/usermodel/TestHSSFHyperlink.java\nsrc/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFSheetShiftRows.java\nsrc/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFBugs.java\nsrc/ooxml/testcases/org/apache/poi/xssf/usermodel/TestXSSFWorkbook.java\nsrc/ooxml/testcases/org/apache/poi/xssf/usermodel/TestUnfixedBugs.java", "id": 201163, "time": "2017-09-27T16:23:52Z", "bug_id": 61474, "creation_time": "2017-09-27T16:23:52Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "bug_id": 61474, "text": "Created attachment 35382\npatch281", "id": 201197, "time": "2017-09-28T13:45:59Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:45:59Z", "is_private": false, "attachment_id": 35382}, {"text": "Created attachment 35383\npatch282", "tags": [], "bug_id": 61474, "is_private": false, "count": 16, "id": 201198, "time": "2017-09-28T13:46:38Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:46:38Z", "attachment_id": 35383}, {"count": 17, "tags": [], "bug_id": 61474, "attachment_id": 35384, "is_private": false, "id": 201199, "time": "2017-09-28T13:47:42Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:47:42Z", "text": "Created attachment 35384\npatch283"}, {"count": 18, "tags": [], "bug_id": 61474, "attachment_id": 35385, "text": "Created attachment 35385\npatch284", "id": 201200, "time": "2017-09-28T13:48:14Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:48:14Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 61474, "attachment_id": 35386, "text": "Created attachment 35386\npatch285", "id": 201201, "time": "2017-09-28T13:48:36Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:48:36Z", "is_private": false}, {"text": "I have just uploaded 5 patch files so you can apply them. I had some complications with git while working on this, so I am not 100% this will work immediately. If you face problems, you can also find me at skype, as zmau3012.\n\n\nMeanwhile I have moved updateConditionalFormatting() and updateHyperlinks() to other class, so they can be used for both rows and columns. As far as I can see, they should work perfectly same for column shifting, as for row shifting.\nProcessing of comments is work in progress, just ignore it now.\n\nThanks for TestXSSFSheetShiftRows, I really needed it. It works the same way as it did before my refactorings.", "tags": [], "bug_id": 61474, "is_private": false, "count": 20, "id": 201202, "time": "2017-09-28T13:56:50Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-09-28T13:56:50Z", "attachment_id": null}, {"count": 21, "tags": [], "bug_id": 61474, "is_private": false, "text": "Created attachment 35417\nWhole patch for current state of column shifting", "id": 201435, "time": "2017-10-13T12:32:24Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-10-13T12:32:24Z", "attachment_id": 35417}, {"count": 22, "attachment_id": null, "creator": "drjovanovic@gmail.com", "is_private": false, "id": 201436, "time": "2017-10-13T12:41:27Z", "bug_id": 61474, "creation_time": "2017-10-13T12:41:27Z", "tags": [], "text": "I have just added a complete patch for column shifting, so, if you applied my previous patches, please revert them. \nI have merged changes that took place in project meanwhile, so this patch should not make problems with that.\nThis version should cover all basic shifting issues which we mentioned before.\nI would like to flag some methods as deprecated, but I did not flag them (before we agree on that), I have just left code comments about that.\n\n\nAfter successful apply and build, execute class XSSFColumnShifterTest and make sure all tests pass."}, {"count": 23, "attachment_id": 35454, "creator": "drjovanovic@gmail.com", "is_private": false, "id": 201634, "time": "2017-10-24T14:06:45Z", "bug_id": 61474, "creation_time": "2017-10-24T14:06:45Z", "tags": [], "text": "Created attachment 35454\nwhole patch for current state of branch\n\nMeanwhile I have not received any feedback, but I have continued working on this occasionally. Attached is a full patch against the Poi Trunk so that you don't have to apply multiple patches when you look at the code. Please give me some feedback once you take a look at this.\nAlso, it may be easier if I had some write access to poi repository, so I could just push my changes to my branch."}, {"count": 24, "tags": [], "bug_id": 61474, "attachment_id": null, "text": "(In reply to Dragan Jovanovi\u0107 from comment #23)\n> Meanwhile I have not received any feedback, but I have continued working on\n> this occasionally.\n\nI will look through your patch when I have free time. This is a volunteer project that I work on outside my day job.\n\n> Attached is a full patch against the Poi Trunk so that\n> you don't have to apply multiple patches when you look at the code. Please\n> give me some feedback once you take a look at this.\n> Also, it may be easier if I had some write access to poi repository, so I\n> could just push my changes to my branch.\n\nIn the mean time, if you want to be able to submit patches that depend on each other without making each patch cumulative, you could create a fork in GitHub (GitHub.com/Apache/poi), commit to that, and create a pull request as needed.\n\nGithub's tools for inline review are pretty good, and it'd make it easier on me and other potential reviewers to give you the feedback you're seeking.", "id": 201646, "time": "2017-10-24T22:13:26Z", "creator": "onealj@apache.org", "creation_time": "2017-10-24T22:13:26Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 61474, "is_private": false, "text": "Thanks for feedback, Javen. Forking is exactly what I need. Gonna make it these days, and will send you pull request.", "id": 201659, "time": "2017-10-25T08:30:50Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-10-25T08:30:50Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 61474, "attachment_id": null, "text": "pull request :\nhttps://github.com/apache/poi/pull/81", "id": 201834, "time": "2017-11-01T14:54:53Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-11-01T14:54:53Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 61474, "attachment_id": null, "is_private": false, "id": 202713, "time": "2017-12-11T15:12:19Z", "creator": "drjovanovic@gmail.com", "creation_time": "2017-12-11T15:12:19Z", "text": "Let us sum up what's done, and what's left to do :\n- Javen implemented adjusting for columns in FormulaShifter class. Those changes are on trunk.\n- I have imlpemented XSSFSheet.shiftColumns() method which moves columns, and also processes other things (updateFormulas, shiftMergedRegions, updateConditionalFormatting, updateHyperlinks...) in the same way as XSSFSheet.shiftRows(). Those changes are on fork, and wait to be moved onto trunk.\nThere are junit tests covering various parts of this algorithm. I have also checked old unit tests which cover shiftRows(), and they behave the same way as they did before.\n\n- In my project I also have an algorithm which copies range of cells to other location. If you're interested, I can think about embedding  that algorithm into POI.\n\nWhat is the plan for code which waits on fork, on pull request https://github.com/apache/poi/pull/81 ?"}, {"count": 28, "tags": [], "bug_id": 61474, "attachment_id": 35454, "text": "Comment on attachment 35454\nwhole patch for current state of branch\n\nThere is a pull request for this : https://github.com/apache/poi/pull/81, so this patch is not needed. It is also out of date.", "id": 203396, "time": "2018-01-22T13:40:51Z", "creator": "drjovanovic@gmail.com", "creation_time": "2018-01-22T13:40:51Z", "is_private": false}]
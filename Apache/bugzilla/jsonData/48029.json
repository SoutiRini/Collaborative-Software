[{"count": 0, "tags": [], "creator": "httpd.apache@jan-o-sch.net", "text": "running httpd on Solaris 10U7, we were facing problems somewhat like the ones described in bug 47645, at least we saw processes hanging a *long* time in port_getn once in a while. Although the conversation in that bug looks like 2.2.11 would not be affected, we decided to upgrade - and things are getting better.\n\nBetter meaning the bug is rather easy to reproduce, now. We are using prefork mpm. What I can reproduce is:\n- start a fresh apache instance\n- query some cgi\n\nResults:\nSome output from the cgi is received slowly, then it suddenly stops. The cgi seems to have run properly: On the server, the corresponding process has terminated, and can be seen as \"defunct\" with ps. Its parent is an httpd process. pstack on that process shows:\n feef4ce5 portfs   (6, c, 8672428, 2, 1, 8045438)\n fecb0a77 call_port_getn (c, 8672428, 2, 804547c, 11e1a300, 0) + a5\n fecb1335 apr_pollset_poll (86723e8, 11e1a300, 0, 80454d8, 80454dc, 8672800) + 1d5\n 081fb58d cgi_bucket_read (8669f70, 8045538, 804553c, 0, 8045520, fefd25eb) + 76\n 080b0f86 ap_content_length_filter (866cca8, 8672798, 866bf14, 860c190, 866bf0c, 8669ec0) + bc\n[...]\n\nUsing solaris' dtrace, we are seeing that the process called port_getn several times earlier. System calls in chronological order, truncated after ap_content_length_filter:\n\n[1]\n              libc.so.1`_portfs+0x15\n              libapr-1.so.0.3.9`apr_pollset_poll+0xe2\n              httpd`cgi_bucket_read+0x76\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 0\n\n[2]\n              libc.so.1`_portfs+0x15\n              libapr-1.so.0.3.9`call_port_getn+0xa5\n              libapr-1.so.0.3.9`apr_pollset_poll+0x1d5\n              httpd`cgi_bucket_read+0x76\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 1\n\n[3]\n              libc.so.1`_write+0x15\n              libapr-1.so.0.3.9`apr_file_write+0x1cc\n              libapr-1.so.0.3.9`apr_file_write_full+0x38\n              libapr-1.so.0.3.9`apr_file_puts+0x3b\n              httpd`log_error_core+0x566\n              httpd`ap_log_rerror+0x5b\n              httpd`cgi_bucket_read+0x12f\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 131\ncorresponding log entry: (11)Resource temporarily unavailable: poll failed waiting for CGI child\n\n[4]\n              libc.so.1`_writev+0x15\n              libapr-1.so.0.3.9`apr_socket_sendv+0x83\n              httpd`writev_it_all+0x5d\n              httpd`ap_core_output_filter+0xb1a\n              httpd`ap_pass_brigade+0x92\nreturn value: 8183\nobviously transfers the bit of output that is returned to the client\n\n[5]\n              libc.so.1`_portfs+0x15\n              libapr-1.so.0.3.9`call_port_getn+0xa5\n              libapr-1.so.0.3.9`apr_pollset_poll+0x1d5\n              httpd`cgi_bucket_read+0x76\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 1\n\n[6]\n              libc.so.1`_read+0x15\n              libapr-1.so.0.3.9`apr_file_read+0xff\n              libapr-1.so.0.3.9`apr_file_gets+0x178\n              httpd`log_script_err+0x26\n              httpd`cgi_bucket_read+0x1a4\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 0\nwhy 0? where has the rest of my cgi output gone?\n\n[7]\n              libc.so.1`_portfs+0x15\n              libapr-1.so.0.3.9`apr_pollset_remove+0x7b\n              httpd`cgi_bucket_read+0x1c4\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\nreturn value: 0\n\n[8]\n              libc.so.1`_portfs+0x15\n              libapr-1.so.0.3.9`call_port_getn+0xa5\n              libapr-1.so.0.3.9`apr_pollset_poll+0x1d5\n              httpd`cgi_bucket_read+0x76\n              httpd`ap_content_length_filter+0xbc\n              httpd`ap_pass_brigade+0x92\n-- hangs for quite a long time\n\nThis might also be a mod_cgi bug. However, mod_cgi.c has a timestamp of Jul 2007, and it worked with apr from httpd 2.2.11.", "id": 131246, "time": "2009-10-20T10:46:38Z", "bug_id": 48029, "creation_time": "2009-10-20T10:46:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "This log message means port_getn() is returning EAGAIN:\n\n(11)Resource temporarily unavailable: poll failed waiting for CGI child\n\nEAGAIN isn't a documented return code for port_getn(), and APR doesn't handle it.  (I see that libevent had to start handling it at one point.)\n\nSince EAGAIN wasn't expected by APR, it gets passed back as-is to cgi_bucket_read() as some arbitrary system error code.\n\nSince EAGAIN wasn't expected by cgi_bucket_read(), it gets passed back as-is up the filter chain as some arbitrary system error code.  Up the filter chain in ap_content_length_filter(), EAGAIN is checked for (though it is supposed to mean something else).  That causes the data read already to be flushed, then a blocking bucket read is performed.\n\nThe read() which returns 0, where you ask \"why 0? where has the rest of my cgi output gone?\" is a read on your script's stderr.  The apr_pollset_remove is supposed to be for the stderr handle, since we've already hit EOF on it.\n\nDoes the final port_getn() hang for the amount specified by your Timeout directive?  (300 is the default)\n\nI'm wildly guessing for the moment that there's some bug with the pollset manipulation such that the final port_getn() isn't looking at the right handle, and the cgi process remains as a zombie until the pipe it shares with the httpd child is emptied.  Maybe we'd avoid the mishandling except for the bogus EAGAIN.\n\nCan you get a truss showing the httpd child process and the cgi script?  (truss -fp pid-of-httpd-blocked-in-poll before sending the request)\n\nI'll try to model it more closely here.", "id": 131267, "time": "2009-10-21T11:30:34Z", "creator": "trawick@apache.org", "creation_time": "2009-10-21T11:30:34Z", "is_private": false}, {"count": 2, "tags": [], "creator": "httpd.apache@jan-o-sch.net", "text": "First: Yes, the amount of time passing until the request \"completes\" roughly fits the config's Timeout value.\n\nUnfortunately getting a truss of what is going on is not possible. I forget to mention why we used dtrace to see what is going on - and that bit might be interesting, too: When running with truss, everything works fine. Reproducibly. Might be a hint to some kind of weird timing issue.\n\nI was expecting the return value showed by dtrace for \"libc.so.1`_portfs+0x15\" in [2] (which is 1), was the return value of port_getn.\n\nWhen trussing the already hanging child process in [8], I see it sleeping in port_getn. dtrace states it is in _portfs. pstack by the way also states _portfs. Thus I guess port_getn is the high level name for _portfs.\n\nIf that is correct, then your explanation with 11 and EAGAIN does not add up, as dtrace shows port_getn really returned 1. However, 1 would mean EPERM, which is no documented return code for port_getn, either.\n\nTo gather more information, we could play around with dtrace somewhat further, if we knew what we are looking for.", "id": 131269, "time": "2009-10-21T11:52:00Z", "bug_id": 48029, "creation_time": "2009-10-21T11:52:00Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 131272, "time": "2009-10-21T12:22:20Z", "bug_id": 48029, "creation_time": "2009-10-21T12:22:20Z", "is_private": false, "text": ">Thus I guess port_getn is the high level name for _portfs.\n>If that is correct, then your explanation with 11 and EAGAIN does not add up,\n>as dtrace shows port_getn really returned 1.\n\nIf you look for _portfs at http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/lib/libc/port/gen/event_port.c, portfs is a generic port-related call (probably kernel entry point), and the first parameter indicates which operation (which libc call).\n\nI agree though that the source of the EAGAIN isn't necessarily what I said in my previous update.  I think it is clear that apr_pollset_poll() returned EAGAIN though, and that means either port_associate() or port_getn() returned EAGAIN.  port_associate() even documents EAGAIN as a possible return.\n\nThe call to _portfs() directly from apr_pollset_poll() must be for port_associate(), and the call to _portfs() from call_port_getn() must be for port_getn().  If the EAGAIN came from port_associate(), we wouldn't have called port_getn().  Are calls [1] and [2] from the same call to apr_pollset_poll()?\n\nBTW, APR < 1.3.9 didn't check the return code from port_associate().\n\nThe return code from _portfs() is some structure/union rval_t which I can't find the definition of.  It does include multiple values; I don't know which of multiple values dtrace is showing us."}, {"count": 4, "tags": [], "bug_id": 48029, "attachment_id": 24404, "text": "Created attachment 24404\nfirst test fix for PR 48029\n\nPlease try this patch.\n\nThe theory is that we didn't notice an event when it was first reported, so we didn't know we had to reassociate the descriptor, so we never woke up when activity occurred on that descriptor in the future.\n\nThis is what happened before 1.3.9 on some cases where -1/ETIME was returned by port_getn().  The patch handles the same condition for -1/EAGAIN -- even an event is returned, don't lose it.\n\nThis patch also includes the fix to PR48030, which is for a regression in this code in APR 1.3.9.", "id": 131274, "time": "2009-10-21T13:06:01Z", "creator": "trawick@apache.org", "creation_time": "2009-10-21T13:06:01Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "The patch you suggest does not apply to apr 1.3.9. I cannot figure out at first sight what to change in 1.3.9 to resemble the changes you made (to the HEAD version, I guess). Do you want me to try the repository version of apr? Or can you provide a port to 1.3.9, please?\n\nI do not see anything from the patch to bug 48030 included (which indeed does apply to 1.3.9).", "id": 131295, "time": "2009-10-22T03:03:07Z", "creator": "httpd.apache@jan-o-sch.net", "creation_time": "2009-10-22T03:03:07Z", "is_private": false}, {"text": "Hi Jan,\n\nI don't have any issues patching...  What sort of errors are you getting?  Do you have GNU patch (gpatch) available?\n\n$ tar -xjf ../apr-1.3.9.tar.bz2 \n$ cd apr-1.3.9/\n$ patch -p0 --dry-run < ~/PR48029-1.txt \npatching file poll/unix/port.c\n$ patch -p0  < ~/PR48029-1.txt \npatching file poll/unix/port.c\n\n(I confirmed that what I can download from Bugzilla matches my original patch file.)", "tags": [], "bug_id": 48029, "attachment_id": null, "count": 6, "id": 131296, "time": "2009-10-22T04:52:44Z", "creator": "trawick@apache.org", "creation_time": "2009-10-22T04:52:44Z", "is_private": false}, {"count": 7, "tags": [], "creator": "httpd.apache@jan-o-sch.net", "text": "*cough* I confused myself with the apr-1.x-PR47645.patch lying around.\n\nYes, the patch does apply now. Hoewever, from your previous explanations, I was expecting to see some patch against port_associate() (due to EGAIN), while this patch only changes port_getn() treatment.\n\nAnyway, I'm going to try that now and come back then.", "id": 131297, "time": "2009-10-22T05:32:43Z", "bug_id": 48029, "creation_time": "2009-10-22T05:32:43Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "trawick@apache.org", "text": ">I was expecting to see some patch against port_associate() (due to EGAIN), \n>while this patch only changes port_getn() treatment.\n\nThe source of the EAGAIN issue isn't perfectly clear to me, but\n\n* APR 1.3.9 won't call port_getn() if port_associate() returns any error, including EAGAIN, within the same call to apr_pollset_poll(); that's why I don't think port_associate() is the source of the EAGAIN\n\n* if I'm wrong about the source of EAGAIN: the documented reason for getting EAGAIN from port_associate() is reaching a limit of objects associated with the port\n** we can't recover from that error once it occurs (if indeed the reason for EAGAIN is the documented reason)\n** the bug reported in PR 48030, if it doesn't cause a crash, could cause objects to be reassociated multiple times, potentially leading to the documented scenario; the patch includes that fix\n\nNeedless to say, I wish I could reproduce the issue ;)", "id": 131298, "time": "2009-10-22T06:12:02Z", "bug_id": 48029, "creation_time": "2009-10-22T06:12:02Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "Alright. Tried the patch now - but no differences.\n\nWe could write a more elaborate dtrace script, or try to investigate the process waiting for port_getn() to complete with a debugger. But what are we looking for?", "id": 131302, "time": "2009-10-22T06:39:39Z", "creator": "httpd.apache@jan-o-sch.net", "creation_time": "2009-10-22T06:39:39Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "Something we need to know is whether there are any descriptors associated with the event port when we block in port_getn(), but I don't know how to check for that other than observing the sequence of calls to port_getn() and port_associate() leading up to the hang.\n\nDo you see clear evidence of where the EAGAIN is coming from in the traces you already have?\n\nI think it is easy to be 100% sure where the EAGAIN is coming from.\n\nSince cgi_bucket_read logs the retcode from port_associate() or port_getn(), let's change EAGAIN from either of those to something unique so that we know where the EAGAIN is coming from.\n\n--- poll/unix/port.c.orig\t2009-10-22 10:15:14.172437555 -0400\n+++ poll/unix/port.c\t2009-10-22 10:24:37.096601717 -0400\n@@ -350,6 +350,9 @@\n                              fd, get_event(ep->pfd.reqevents), ep);\n         if (ret < 0) {\n             rv = apr_get_netos_error();\n+\n+            if (rv == EAGAIN) rv = ENOEXEC;\n+\n             APR_RING_INSERT_TAIL(&(pollset->free_ring), ep, pfd_elem_t, link);\n             break;\n         }\n@@ -367,6 +370,8 @@\n     rv = call_port_getn(pollset->port_fd, pollset->port_set, pollset->nalloc,\n                         &nget, timeout);\n \n+    if (rv == EAGAIN) rv = ERANGE;\n+\n     /* decrease the waiting ASAP to reduce the window for calling \n        port_associate within apr_pollset_add() */\n     apr_atomic_dec32(&pollset->waiting);\n\nSo with this patch, what is the error code/error string logged with \"poll failed\nwaiting for CGI child\"?", "id": 131305, "time": "2009-10-22T07:33:02Z", "creator": "trawick@apache.org", "creation_time": "2009-10-22T07:33:02Z", "is_private": false}, {"count": 11, "tags": [], "creator": "httpd.apache@jan-o-sch.net", "attachment_id": null, "id": 131321, "time": "2009-10-23T03:23:25Z", "bug_id": 48029, "creation_time": "2009-10-23T03:23:25Z", "is_private": false, "text": "Nice move, but bad luck. Retrun value remains EAGAIN (11) according to the log file. Still, I wonder why everything works fine under truss.\n\nI'll try to grab more information with dtrace. Or I might introduce some quick and diry logging in port.c to see clearer. Whichever comes first..."}, {"count": 12, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 131342, "time": "2009-10-23T14:43:33Z", "bug_id": 48029, "creation_time": "2009-10-23T14:43:33Z", "is_private": false, "text": "See recent updates added to 48030.\n\nI'm thinking (bad idea?) that the root cause of Bernd's problem (in 48030) is the same as this one, and Nick's problem (original report in 48029) is unique."}, {"count": 13, "tags": [], "creator": "trawick@apache.org", "text": "Summary:\nport_getn() returns bogus return codes with 32-bit applications on Solaris 10/x86.  APR 1.3.8 accidently managed to work in most cases; APR 1.3.9 treats these bugs returns from port_getn() as errors since the value is negative.  The latest Solaris 10 update (\"Solaris 10 10/09\" a.k.a. \"Solaris 10 U8\") has the problem, as do some (all?) earlier releases.  Current OpenSolaris levels do not have the problem.  It does not apparently affect 64-bit applications on x86 or any applications on SPARC.  One interesting aspect of the port_getn() problem is that the retcode is good if you control the process calling port_getn() (at least with dbx or truss).\n\nAnticipated fix:\nChange APR configure to run a small test program and disable the use of Event Ports if port_getn() returns a bogus value.\n\nWorkaround:\nSet the environment variable ac_cv_func_port_create=no when building APR in an affected configuration.\n\n$ make distclean\n$ ac_cv_func_port_create=no\n$ export ac_cv_func_port_create\n$ ./configure --regular-options\n\nHere is a simple test program showing the issue:\n\n$ cat useport.c \n#include <stdio.h>\n\n#include <port.h>\n\nint main(void)\n{\n    int port, rc;\n    uint_t nget;\n\n    port = port_create();\n\n    rc = port_getn(port, NULL, 0, &nget, NULL);\n    printf(\"rc %d nget %u\\n\", rc, nget);\n\n    return 0;\n}\n$ cc useport.c && ./a.out \nrc -17349963 nget 0\n$ cc -m64 useport.c && ./a.out \nrc 0 nget 0", "id": 131359, "time": "2009-10-24T04:49:25Z", "bug_id": 48029, "creation_time": "2009-10-24T04:49:25Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "First off: Compiling with ac_cv_func_port_create=no makes everything run fine, it seems. That is a strong hint that the problem is located somewhere in the near the port interface, either implementation or usage.\n\nHowever, I cannot reproduce your useport example on any of the machines I use to trigger the buggy behavior here. Can you prove it returns correct values when trussed? If no, that should be a completely different issue - if yes, it might be related, though.\n\nIs the port thing restricted to solaris? Is it worth investigating more? Is it an option to globally disable ports for everyone?", "id": 131389, "time": "2009-10-26T09:44:37Z", "creator": "httpd.apache@jan-o-sch.net", "creation_time": "2009-10-26T09:44:37Z", "is_private": false}, {"count": 15, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "id": 131391, "time": "2009-10-26T10:39:51Z", "bug_id": 48029, "creation_time": "2009-10-26T10:39:51Z", "is_private": false, "text": ">First off: Compiling with ac_cv_func_port_create=no makes everything run fine,\n>it seems. That is a strong hint that the problem is located somewhere in the\n>near the port interface, either implementation or usage.\n\n>Is the port thing restricted to solaris? Is it worth investigating more? Is it\n>an option to globally disable ports for everyone?\n\nA little background:\n\napr_pollset_poll() is what APR provides to apps like httpd, and that works cross-platform.  The \"Event Port\" stuff applies only to Solaris.  If Event Ports were disabled, it wouldn't affect other platforms and it wouldn't affect all applications on Solaris since plain poll() would be used.\n\nManwhile, I found a better solution besides disabling Event Ports which I've committed.  This is it:\n\nhttp://svn.apache.org/viewvc/apr/apr/branches/1.3.x/poll/unix/port.c?r1=807269&r2=829803\n\n>However, I cannot reproduce your useport example on any of the machines I use\n>to trigger the buggy behavior here. Can you prove it returns correct values\n>when trussed? If no, that should be a completely different issue - if yes, it\n>might be related, though.\n\nYou get \"rc 0 nget 0\" displayed on a machine with the problem?  Ouch.\n\nYes, truss or dbx makes that simple testcase run clean for me on Solaris 10/x86-32.\n\n$ ./useport-32\nrc -17349963 nget 0\n$ truss ./useport-32 2>&1 | tail -5\nbrk(0x08062908)                                 = 0\nfstat64(1, 0x08046FA0)                          = 0\nrc 0 nget 0\nwrite(1, \" r c   0   n g e t   0\\n\", 12)        = 12\n_exit(0)\n$\n\nsimilarities with your observations\n\na. got worse with APR 1.3.9\n\nThe huge negative retcode from port_getn() wouldn't cause a problem with APR 1.3.8, since 1.3.8 checked specifically for \"rc == -1\" instead of \"rc < 0\".\n\n(The \"got worse\" idea assumes you had a different problem with 1.3.8, possibly the one that 1.3.9 corrected, which was very intermittent.)\n\nb. problem doesn't occur under observation via truss\n\nc. unexpected EAGAIN failure\n\napr_pollset_poll() would grab whatever was in errno when it thought port_getn() failed on these cases where port_getn() didn't really fail and didn't set errno.  Since we're doing I/O with the CGI and recently did I/O with the client , EAGAIN is a likely errno value to pick up incorrectly.\n\nd. a case where port_getn() returns bogus negative number matches cgi_bucket_read()'s usage\n\na case with the bad retcode is when port_getn() is called with 0 timeout to find out immediately if an event is ready (if an event is actually ready it won't return a bad retcode)\n\nthat's the kind of call made when cgi_bucket_read() is called the first time by content-length filter; only when cgi_bucket_read() returns EAGAIN does content-length filter tell it to wait until data is available\n\n--/--\n\nI hope you're able to try the tiny patch pointed to above in in this comment in place of earlier attempts."}, {"count": 16, "tags": [], "bug_id": 48029, "attachment_id": null, "text": "> A little background:\n\nThanks for that part!\n\n> Manwhile, I found a better solution besides disabling Event Ports which I've\n> committed.  This is it:\n> \n> http://svn.apache.org/viewvc/apr/apr/branches/1.3.x/poll/unix/port.c?r1=807269&r2=829803\n\nWorks! Seems we're on track now. However...\n\n> >However, I cannot reproduce your useport example on any of the machines I use\n> >to trigger the buggy behavior here. Can you prove it returns correct values\n> >when trussed? If no, that should be a completely different issue - if yes, it\n> >might be related, though.\n> \n> You get \"rc 0 nget 0\" displayed on a machine with the problem?  Ouch.\n\n... yes. That is still the case. But as the fix you committed works, there must be some strange condition sometimes making port_getn return those negative values aside from -1.\n\nHad no time to play around with dtrace, yet. But it seems quite obvious it would show port_getn returning a strange value as does your example (though not reproducible here).", "id": 131435, "time": "2009-10-27T11:52:14Z", "creator": "httpd.apache@jan-o-sch.net", "creation_time": "2009-10-27T11:52:14Z", "is_private": false}, {"count": 17, "tags": [], "creator": "trawick@apache.org", "text": "fix has been backported to APR 1.3.x branch for future 1.3.10", "id": 131935, "time": "2009-11-13T11:11:24Z", "bug_id": 48029, "creation_time": "2009-11-13T11:11:24Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 25803, "text": "1. convertAttributeToProperty: If a base attribute is specified after\n   a compound attribute, the compound value is overwritten. This patch\n   fixes that: If the base attribute is handled and the base property\n   already exists, the method does nothing. I do not use the method\n   getExplicitBaseProp here, because its comment suggests that it\n   should do more than just retrieve the value.\n\n2. findBaseProperty: basePropertyValue is erroneously used instead of\n   basePropertyName in finding the propertyID. I also think that the\n   test propertyId != -1 can be replaced with the test propertyMaker\n   != null. Then it is no longer necessary to find the\n   propertyID. This patch makes that change.", "id": 49800, "time": "2003-12-29T19:02:18Z", "creator": "spepping@apache.org", "creation_time": "2003-12-29T19:02:18Z", "is_private": false, "attachment_id": null}, {"text": "Created attachment 9727\nThe patch as described", "tags": [], "bug_id": 25803, "is_private": false, "count": 1, "id": 49801, "time": "2003-12-29T19:03:14Z", "creator": "spepping@apache.org", "creation_time": "2003-12-29T19:03:14Z", "attachment_id": 9727}, {"count": 2, "tags": [], "bug_id": 25803, "text": "Created attachment 9728\nA short test fo file", "id": 49802, "attachment_id": 9728, "creator": "spepping@apache.org", "creation_time": "2003-12-29T19:04:28Z", "time": "2003-12-29T19:04:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 25803, "text": "Thanks Simon,\n\nFor #2 below, we're in the process of moving from Strings to integers for \nproperties; in the interim you will see some temporary placeholder conversions \nof strings to integers and vice-versa.  (I'm currently feeding piranha-like off \nFinn's patch covering this of a few weeks ago!)\n\nFor #1 below, just to make sure I understand everything:\n\n1.)  I believe your patch is designed to specifically ignore duplicated \nproperties for the same FO, correct?  (e.g., <fo:block font-size=\"10pt\" font-\nsize=\"12pt\"> would activate the new conditional in the patch, correct?)  \n\nOTOH, if not, part of the making of a property is the storing of its value \n(variable \"attributeValue\" in the code)--the change you're calling for is for \nus to disregard this attributeValue under certain circumstances.  *If* this \npatch is *not* to trap duplicate attributes, then why is the value of \nattributeValue irrelevant in these cases? \n\n2.)  Would a similar filter be indicated for the else() clause just following \nit--for duplication of specified compound properties, perhaps?\n\nThanks,\nGlen\n", "id": 49828, "time": "2003-12-29T21:58:44Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-29T21:58:44Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 25803, "is_private": false, "text": "Glen,\n\nWrt your point 1), attribute names must be unique within an element.  From the\nRecommendation:\n\nWell-formedness constraint: Unique Att Spec\n\nNo attribute name may appear more than once in the same start-tag or\nempty-element tag.", "id": 49835, "time": "2003-12-30T05:37:07Z", "creator": "pbwest@powerup.com.au", "creation_time": "2003-12-30T05:37:07Z", "attachment_id": null}, {"text": "<P>\nWrt your point 1), attribute names must be unique within an element.  From the\nRecommendation:\n</P>\n\nFrom the \"*XML* Recommendation\", I take it...Yes, I thought so, so I'm not sure \nwhat Simon's patch is accomplishing...I may be missing something here.  \nAwaiting his response!\n\nThanks,\nGlen", "tags": [], "bug_id": 25803, "is_private": false, "count": 5, "id": 49836, "time": "2003-12-30T05:45:16Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-30T05:45:16Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "spepping@apache.org", "attachment_id": null, "is_private": false, "id": 49863, "time": "2003-12-30T18:59:04Z", "bug_id": 25803, "creation_time": "2003-12-30T18:59:04Z", "text": "<fo:leader leader-length=\"120pt\" leader-length.maximum=\"200pt\"/> \n\nworks alright in the current code, but \n\n<fo:leader leader-length.maximum=\"200pt\" leader-length=\"120pt\"/> \n\ndoes not. \n\nWhen leader-length.maximum is dealt with, then (else branch in\nPropertyList.convertAttributeToProperty, see the patch)\nPropertylist.findBaseProperty retrieves the base attribute\nleader-length from the attributes, and constructs the compound\nproperty based on this attribute value first; then the specified\nmaximum value is set on it as a subproperty.\n\nLater PropertyList.addAttributesToList encounters leader-length in the\nattributes, and overwrites the property just constructed with a new\nproperty constructed based on this attribute-value alone (if branch in\nPropertyList.convertAttributeToProperty, see the patch). So the\nspecified value of leader-length.maximum is lost. \n\nMy solution is, when the base property already exists, to assume that\nthis attribute has already been dealt with, and do nothing. This\nshould work OK:\n\n1. Attributes can only be specified once.  \n\n2. Two compound attributes, such as leader-length.maximum and\nleader-length.optimum, would not be affected, because this case uses the\nelse branch in PropertyList.convertAttributeToProperty and\nfindBaseProperty would retrieve the already constructed base property,\nand add the newly specified component to it.\n\n3. Any cases I overlook?"}, {"count": 7, "tags": [], "bug_id": 25803, "attachment_id": null, "is_private": false, "id": 49877, "time": "2003-12-30T23:51:47Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-12-30T23:51:47Z", "text": "Simon,\n\nI think I understand what you're saying, but I'm not sure your code is the \nsolution.  If, as you state, FOP can freely ignore leader-length=\"120pt\" in (a) \nbelow, then what you are saying is:\n\n(a) <fo:leader leader-length.maximum=\"200pt\" leader-length=\"120pt\"/> \n\nis the same fo:leader as:\n(b) <fo:leader leader-length.maximum=\"200pt\" leader-length=\"140pt\"/> \n\nand is the same fo:leader as:\n(c) <fo:leader leader-length.maximum=\"200pt\" leader-length=\"160pt\"/> \n\nand is the same fo:leader as:\n(d) <fo:leader leader-length.maximum=\"200pt\" leader-length=\"80pt\"/> \n\netc., etc.--because, after all, I'm ignoring leader-length from processing.\n\nBut according to the Section 5.11, Property Datatypes [1] of the spec, though, \na declaration of (a) would cause this property population of fo:leader:\n\nleader-length.minimum = 120pt\nleader-length.maximum = 200pt\nleader-length.optimum = 120pt\n\nwhile a declaration of (b) would be\n\nleader-length.minimum = 140pt\nleader-length.maximum = 200pt\nleader-length.optimum = 140pt,\n\ncorrect?  So I can't just ignore leader-length if leader-length.maximum was \nalready created, because that 120pt, 140pt, 160pt., etc. value will never fill \nthe unspecified components, correct?  Unless I'm missing something, we may need \nanother solution to this problem.\n\nThanks very much!\nGlen\n\n[1] http://www.w3.org/TR/2001/REC-xsl-20011015/slice5.html#section-N8794-\nProperty-Datatypes\n"}, {"count": 8, "attachment_id": null, "creator": "spepping@apache.org", "is_private": false, "id": 49887, "time": "2003-12-31T10:06:18Z", "bug_id": 25803, "creation_time": "2003-12-31T10:06:18Z", "tags": [], "text": "I agree with you about the requirements. But the patch does not what you\ndescribe. When the attribute leader-length.maximum is processed, the attribute\nleader-length is retrieved from the list of attributes and processed first, out\nof order. What I am ignoring is when the attribute is processed again, in the\norder of the attributes.\n\nI should add that the patch only works correctly when the issue in item 2 is\nalso addressed. Without it, the out-of-order processing fails and a default base\nproperty is constructed. This would indeed result in the situation you depict,\nwith the specification of leader-length being ignored.\n\nA more conservative patch would be to construct a member done in the\npropertyList object, which is an array of booleans and keeps track of which\nattributes have been processed, so that reprocessing of an attribute is\nprevented. The logic of such a solution is more direct and less vulnerable to\nlogical errrors.\n\nI think that in any solution, the base attribute must be processed before the\ncompound attribute, as is done now, and that reprocessing of the base attribute\nmust be prevented. Any method to prevent that is OK.\n "}, {"count": 9, "attachment_id": 9761, "creator": "spepping@apache.org", "text": "Created attachment 9761\na patch that implements the above suggestion, and a minimal fix for the problem in findBaseProperty", "id": 49892, "time": "2003-12-31T11:47:42Z", "bug_id": 25803, "creation_time": "2003-12-31T11:47:42Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "creator": "bckfnn@worldonline.dk", "text": "Simon, Your attr_done array is only needed during addAttributesToList(), so I \nthink that it should be held in a local vrbl and passed into \nconvertAttributeToProperty() and possible into findBaseProperty().\n\nOTOH, I liked your original patch fine, except that I would have called \ngetExplicitBaseProp() instead of super.get(), but only because it is a bit more \ndescriptive IMHO.", "id": 49895, "attachment_id": null, "bug_id": 25803, "creation_time": "2003-12-31T12:52:23Z", "time": "2003-12-31T12:52:23Z", "is_private": false}, {"count": 11, "tags": [], "creator": "spepping@apache.org", "text": "Glen,\n\nattr_done local: Indeed, that would have been better.\n\nuse getExplicitBaseProp(): OK.\n\nDo you expect a modified patch, or do you make the change to getExplicitBaseProp()?\n\nThanks, Simon", "id": 49916, "attachment_id": null, "bug_id": 25803, "creation_time": "2003-12-31T21:24:56Z", "time": "2003-12-31T21:24:56Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 25803, "text": "Ouch, it is Finn who made this remark. Well, over to Glen then.\n\nSimon\n", "id": 49918, "time": "2003-12-31T21:26:39Z", "creator": "spepping@apache.org", "creation_time": "2003-12-31T21:26:39Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 25803, "text": "Alt-Design addresses this problem by the simple expedient of processing\nproperties in integer property number order.", "id": 49921, "time": "2004-01-01T00:20:08Z", "creator": "pbwest@powerup.com.au", "creation_time": "2004-01-01T00:20:08Z", "is_private": false, "attachment_id": null}, {"count": 14, "attachment_id": null, "creator": "glenmazza@yahoo.com", "is_private": false, "id": 49937, "time": "2004-01-01T19:10:51Z", "bug_id": 25803, "creation_time": "2004-01-01T19:10:51Z", "tags": [], "text": "(Simon, you can tell it's Finn instead of me if it sounds intelligent, logical, \netc. ;)\n\nThanks for your second explanation--I thought I had found an error in your \nreasoning but you do appear to understand this better than me--I'll be looking \nat this again shortly.\n\nThanks,\nGlen\n"}, {"text": "Created attachment 9776\nPatch with lcl vrbls, as suggested by bckfnn", "tags": [], "bug_id": 25803, "is_private": false, "count": 15, "id": 49963, "time": "2004-01-02T20:16:06Z", "creator": "spepping@apache.org", "creation_time": "2004-01-02T20:16:06Z", "attachment_id": 9776}, {"text": "I just attached a patch using local variables as suggested by Finn. After all I\nfeel that this is the most direct method, without any side effects. The earlier\nmethod, checking whether the property already exists, is vulnerable to making\ndefault properties, which may cause an error that is less easy to detect.\n\nSimon\n", "tags": [], "bug_id": 25803, "is_private": false, "count": 16, "id": 49964, "time": "2004-01-02T20:20:03Z", "creator": "spepping@apache.org", "creation_time": "2004-01-02T20:20:03Z", "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 25803, "text": "Applied--Thanks Simon!\n\nCouple of issues:  \n\n1.)  Like Finn--I had no problem with your original patch, it's simpler and \nprobably faster also.  I still kept the int conversion function, but otherwise \nused that patch, with some simple comments added in.\n\n2.)  The original bug you mentioned in #2 below:  \"findBaseProperty: \nbasePropertyValue is erroneously used instead of basePropertyName in finding \nthe propertyID.\"--I misunderstood the problem, I thought you were just talking \nabout the temporary String<-->int conversions.  I finally saw the issue--sorry \nfor the confusion on my part!\n\nGlen", "id": 49969, "time": "2004-01-02T22:41:50Z", "creator": "glenmazza@yahoo.com", "creation_time": "2004-01-02T22:41:50Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 25803, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 156005, "time": "2012-04-01T06:52:34Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:52:34Z", "is_private": false, "attachment_id": null}]
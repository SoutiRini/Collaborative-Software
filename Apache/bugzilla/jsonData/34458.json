[{"count": 0, "tags": [], "creator": "marc@mit.edu", "attachment_id": null, "id": 73663, "time": "2005-04-14T22:42:31Z", "bug_id": 34458, "creation_time": "2005-04-14T22:42:31Z", "is_private": false, "text": "In particular, if build.xml contains a <macrodef> with a macro element which is\ninside another element, and build.xml uses <ant> to invoke another build file,\nant complains:\n\nBUILD FAILED\n/tmp/ant/build.xml:13: The <fileset> type doesn't support the nested \"nested\" el\nement.\n\nI will attach the two xml files which demonstrate this problem.  To replicate,\nit should be sufficient to extract them into the same directory, and run ant\nwith no arguments."}, {"count": 1, "tags": [], "creator": "marc@mit.edu", "attachment_id": 14719, "id": 73664, "time": "2005-04-14T22:43:32Z", "bug_id": 34458, "creation_time": "2005-04-14T22:43:32Z", "is_private": false, "text": "Created attachment 14719\nbuild.xml\n\nuse this to reproduce the bug (part 1)"}, {"attachment_id": 14721, "tags": [], "bug_id": 34458, "is_private": false, "count": 2, "id": 73665, "time": "2005-04-14T22:44:04Z", "creator": "marc@mit.edu", "creation_time": "2005-04-14T22:44:04Z", "text": "Created attachment 14721\nbuild2.xml\n\nuse this to reproduce the bug (part 2)"}, {"count": 3, "tags": [], "creator": "peterreilly@apache.org", "text": "The problem is that the macrodef has a reference in it.\nThe handling of references in ant is broken - they are\nresolved in a number of places - at parse time, and at run time.\nIn this case, the 'id=\"abc\"' in the macrodef is invalidly resolved\nwhen the <ant> call is made. Changing the title to reflect\nthe problem.\nThanks for the build files that show the problem. I am sure that\nyou encountered the problem in a large build files and went to the\neffort of getting the simle build file.\n\nI am not sure what can be done to fix this.\nA work-around in this case would be to use an element name that\nis allowed in the file set:\n\n  <macrodef name=\"foo\">\n    <element name=\"include\" implicit=\"yes\" optional=\"yes\" />\n    <sequential>\n      <fileset id=\"abc\" dir=\".\">\n        <include />\n      </fileset>\n    </sequential>\n  </macrodef>\n\n", "id": 73683, "time": "2005-04-15T10:41:51Z", "bug_id": 34458, "creation_time": "2005-04-15T10:41:51Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "I am not sure I ever liked the fact that id attributes were managed using a \ndifferent mechanism than other attributes. And I'm not even sure that is still \nthe case. :-(\n\nIn any case, I could envisioned <macrodef/> (with my <let/> addition) being \nused as follows:\n\n  <macrodef name=\"foo\">\n    <let name=\"abc\"/>\n    <element name=\"include\" implicit=\"yes\" optional=\"yes\" />\n    <sequential>\n      <fileset id=\"@{abc}\" dir=\".\">\n        <include />\n      </fileset>\n      <copy toDir=\"...\">\n        <fileset refid=\"@{abc}\"/>\n      </copy>\n      <delete>\n        <fileset refid=\"@{abc}\"/>\n      </delete>\n    </sequential>\n  </macrodef>\n\nWhich means a different \"id\" would be used on every invocation of the macro. \nOf course this requires \"id\" to be evaluated at the right time when the \ninstance of <fileset/> is generated.\n", "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "id": 73705, "time": "2005-04-15T15:36:18Z", "bug_id": 34458, "creation_time": "2005-04-15T15:36:18Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "ddevienne@lgc.com", "text": "I may have a work around for this. Instead of using an ID directly, you could \nassign the reference using the custom sequential I'll attach. It basically \ndelays the reference setting (also allows to compute reference ids).\n\nFrom Peter's analysis of the problem, I would hope it would help. --DD", "id": 73706, "time": "2005-04-15T15:51:05Z", "bug_id": 34458, "creation_time": "2005-04-15T15:51:05Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "ddevienne@lgc.com", "text": "Created attachment 14734\nA custom <bm:reference> element to set a computed ID (without using id=\"\")", "id": 73707, "time": "2005-04-15T15:52:55Z", "bug_id": 34458, "creation_time": "2005-04-15T15:52:55Z", "is_private": false, "attachment_id": 14734}, {"count": 7, "tags": [], "bug_id": 34458, "attachment_id": null, "is_private": false, "id": 73918, "time": "2005-04-21T21:51:07Z", "creator": "marc@mit.edu", "creation_time": "2005-04-21T21:51:07Z", "text": "Ok, so how do I use this new task to fix my problem?"}, {"attachment_id": null, "tags": [], "bug_id": 34458, "is_private": false, "count": 8, "id": 73919, "time": "2005-04-21T21:57:30Z", "creator": "ddevienne@lgc.com", "creation_time": "2005-04-21T21:57:30Z", "text": "Assuming you have compiled the task into a jar already on Ant's CLASSPATH, and \ntaskdef'd it as <reference>, you can (in theory) replace any code like so:\n\n  <fileset id=\"foo\" ... />\n\nwith:\n\n  <reference name=\"foo\">\n    <fileset ... />\n  <reference>\n\nThe 2 are semantically equivalent, but the timing of when the id is assigned is \ndifferent. The former is done are parse time, while the latter is done at \nruntime. I believe this would work around your issue. --DD"}, {"count": 9, "tags": [], "creator": "peterreilly@apache.org", "text": "*** Bug 34574 has been marked as a duplicate of this bug. ***", "id": 73977, "time": "2005-04-22T14:06:32Z", "bug_id": 34458, "creation_time": "2005-04-22T14:06:32Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 34458, "attachment_id": null, "is_private": false, "id": 77250, "time": "2005-07-13T10:40:20Z", "creator": "asf.bugzilla.apache.org@jaetzold.de", "creation_time": "2005-07-13T10:40:20Z", "text": "(In reply to comment #6)\n> Created an attachment (id=14734) [edit]\n> A custom <bm:reference> element to set a computed ID (without using id=\"\")\n> \n\nHow do i compile the class?\nI believe it to be not compilable as it is attached. Problems:\n- \"Sequential\" is not imported. Is it \"org.apache.tools.ant.taskdefs.Sequential\"?\n- The \"Sequential\" class included in Ant 1.6.5 does not have the method \"isActive()\".\n- The class \"TaskUtils\" is not part of any package of the Ant 1.6.5 API. Where do i find it?\n\nI would be very thankful for hints on how to compile it, because i believe it could help me in getting my \nbuild files working.\n"}, {"count": 11, "tags": [], "text": "The class is indeed not compilable as is, but is easy to fix to not use the \ncode you are missing. The custom Sequential is just the regular Ant Sequential \nwith conditional added, including the isActive() method. Simple extend Ant's \nSequential, is remove the test on isActive().\n\nAs for TaskUtils, here are the relevant methods. --DD\n\n    /**\n     * Asserts a given object is not <code>null</code>.\n     *\n     * @param  o the object reference that should not be <code>null</code>.\n     * @param  name the object's name, for error reporting.\n     * @throws IllegalArgumentException with message \"Null 'name'\", where\n     *         name is replaced by the provided <code>name</code>, if the\n     *         reference is <code>null</code>.\n     */\n    public static void assertNotNull(Object o, String name)\n                       throws IllegalArgumentException {\n        if (o == null) {\n            throw new IllegalArgumentException(\"Null '\" + name +\"'\");\n        }\n    }\n\n    /**\n     * Asserts a given string is neither <code>null</code>, nor empty.\n     * <p>\n     * <em>Note that the string is {@link String#trim trimmed} before being\n     * tested, so string made up of spaces only will fail this assertion!</em>\n     *\n     * @param  s the string that should be neither <code>null</code> nor empty.\n     * @param  name the object's name, for error reporting.\n     * @param  trim whether to trim the string before testing for emptyness.\n     * @return the input string, or a new trimmed string if <code>trim</code>\n     *         was <code>true</code> and spaces were effectively removed.\n     * @throws IllegalArgumentException if (1) s is <code>null</code>,\n     *         with message \"Null 'name'\", where name is replaced by the\n     *         provided <code>name</code>, (2) s is empty, with message\n     *         \"Empty 'name'\".\n     */\n    public static String assertNotEmpty(String s, String name, boolean trim)\n                         throws IllegalArgumentException {\n        assertNotNull(s, name);\n        if (trim) {\n            s = s.trim();\n        }\n        if (s.length() < 1) {\n            throw new IllegalArgumentException(\"Empty '\" + name +\"'\");\n        }\n        return s;\n    }\n\n    /**\n     * Asserts a given Ant task/type attribute was set.\n     * <p>\n     * Typically used at the beginning of a task's execute() method\n     * to check all its required attributes have been set.\n     *\n     * @param  attr the attribute's object reference.\n     * @param  name the attribute's name, for error reporting.\n     * @throws BuildException with message \"Missing 'name' attribute!\",\n     *         where name is replaced by the provided <code>name</code>.\n     *\n     * @see #assertAttributeNotSet\n     */\n    public static void assertAttributeSet(Object attr, String name)\n                  throws BuildException {\n        if (attr == null) {\n            throw new BuildException(\"Missing '\" + name +\"' attribute!\");\n        }\n    }\n\n    /**\n     * Asserts a given Ant task/type attribute was not set,\n     * usually because another attribute or nested element is set/present.\n     *\n     * @param  attr the attribute's object reference.\n     * @param  name the attribute's name, for error reporting.\n     * @param  incompatibleWith the thing (another attribute, or a nested\n     *         element) the attribute tested is incompatible with.\n     * @throws BuildException with message \"Attribute 'name' incompatibleWith\n     *         ...\", where name is replaced by the provided <code>name</code>,\n     *         and ... replaced with <code>incompatibleWith</code>.\n     *\n     * @see #assertAttributeSet\n     */\n    public static void assertAttributeNotSet(Object attr, String name,\n                                             String incompatibleWith)\n                       throws BuildException {\n        if (attr != null) {\n            throw new BuildException(\"Attribute '\" + name +\n                                     \"' incompatible with \" + incompatibleWith);\n        }\n    }\n\n    /**\n     * Asserts a given Ant task/type nested element was set.\n     * <p>\n     * Typically used at the beginning of a task's execute() method\n     * to check all its required nested elements have been set.\n     *\n     * @param  elem the element's object reference.\n     * @param  name the element's name, for error reporting.\n     * @throws BuildException with message \"Missing 'name' nested element!\",\n     *         where name is replaced by the provided <code>name</code>.\n     *\n     * @see #assertAttributeNotSet\n     */\n    public static void assertElementSet(Object elem, String name)\n                  throws BuildException {\n        if (elem == null) {\n            throw new BuildException(\"Missing <\" + name +\"> nested element!\");\n        }\n    }\n\n    /**\n     * Asserts a given reference doesn't already exist in this Ant project.\n     *\n     * @param  component the component from which to extract the Ant project\n     * @param  refName the reference name/id that should not be found.\n     * @throws BuildException with message \"Reference 'refName' already set!\".\n     */\n    public static void assertReferenceNotSet(ProjectComponent component,\n                                             String refName) {\n        if (component.getProject().getReference(refName) != null) {\n            throw new BuildException(\"Reference '\" + refName +\n                                     \"' already set!\");\n        }\n    }\n\n    /**\n     * Asserts a given property doesn't already exist in this project.\n     *\n     * @param  component the component from which to extract the Ant project\n     * @param  propName the property name that should not be found.\n     * @throws BuildException with message \"Property 'propName' already set!\".\n     */\n    public static void assertPropertyNotSet(ProjectComponent component,\n                                            String propName) {\n        if (component.getProject().getProperty(propName) != null) {\n            throw new BuildException(\"Property '\" + propName +\n                                     \"' already set!\");\n        }\n    }\n", "attachment_id": null, "id": 77440, "creator": "ddevienne@lgc.com", "time": "2005-07-19T16:22:49Z", "bug_id": 34458, "creation_time": "2005-07-19T16:22:49Z", "is_private": false}, {"count": 12, "tags": [], "creator": "asf.bugzilla.apache.org@jaetzold.de", "attachment_id": null, "text": "Fine. :-)\n\nUsing this reference task indeed seems to work around this bug for me. Thanks.", "id": 78624, "time": "2005-08-18T13:52:21Z", "bug_id": 34458, "creation_time": "2005-08-18T13:52:21Z", "is_private": false}, {"count": 13, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "id": 94600, "time": "2006-10-06T14:23:50Z", "bug_id": 34458, "creation_time": "2006-10-06T14:23:50Z", "is_private": false, "text": "Fixed in svn."}]
[{"count": 0, "tags": [], "text": "Please HEAR ME OUT and read this entire description...\n\nSun stated all classes and interfaces from com.sun.ssl have been moved to \njavax.net.ssl, as of JDK 1.4 (see \nhttp://java.sun.com/j2se/1.4.2/docs/guide/security/jsse/JSSERefGuide.html#comToj\navax).\n\nOf course I can't find the link now, but I saw a post from a Tomcat contributor \nsaying that Tomcat used the sun implementation until I believe version 4.1.x, \nbut that it was definitely fixed in 5.x.\n\nSo, here I am with J2SDK 1.4.2_03 and Tomcat 5.0.18, and even without toying \nwith the system property java.protocol.handler.pkgs, I receive  \nsun.net.www.protocol.https.HttpsURLConnectionImpl from a \njava.net.URL.openConnection() method.\n\nAnd, would you know, adding System.setProperty\n(\"java.protocol.handler.pkgs\", \"javax.net.ssl\"); doesn't do a darn thing....\n\nGranted it's not a big deal because \nsun.net.www.protocol.https.HttpsURLConnectionImpl can be cast to \njavax.net.ssl.HttpsURLConnection.  However, it's still not *right* (at least \nSun says so).\n\nHere's some sample code to reproduce.  The error handling has been removed for \nsimplicity:\n\n//sample accepts all certs..\njavax.net.ssl.TrustManager[] trustCAISOcerts = new javax.net.ssl.TrustManager[]\n{\n   new javax.net.ssl.X509TrustManager() \n   {\n     public java.security.cert.X509Certificate[] getAcceptedIssuers() \n     {\n        return null;\n     }\n     public void checkClientTrusted(java.security.cert.X509Certificate[] certs, \nString authType) \n     {\n     }\n     public void checkServerTrusted(java.security.cert.X509Certificate[] certs, \nString authType)  \n     {\n     }\n   }\n}; \n\n//normally declare as a javax.net.ssl.HttpsURLConnection\n//but for example sake, making a general object\njava.lang.Object exampleConnectionAsObject = null;  \n\njava.net.URL exampleURL = new java.net.URL\n(\"https://www.chainedssl.com/test/chainedssl.html\");\n\nSystem.out.println(\"  Java VM version: \" + System.getProperty\n(\"java.vm.version\"));\n\nSystem.setProperty(\"java.protocol.handler.pkgs\", \"javax.net.ssl\");\n\njavax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance(\"SSL\");\nSystem.out.println(\"Default Provider: \" + sc.getProvider().toString());\nsc.init(null, trustCAISOcerts, new java.security.SecureRandom());\njavax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory\n());\n\nexampleConnectionAsObject = exampleURL.openConnection();\n\nSystem.out.print(\"  Class returned by URL.openConnection(): \");\nSystem.out.println(exampleConnectionAsObject.getClass().getName() + \"\\n\");", "attachment_id": null, "id": 51220, "creation_time": "2004-01-27T01:28:33Z", "time": "2004-01-27T01:28:33Z", "creator": "greensun@usa.net", "bug_id": 26451, "is_private": false}, {"attachment_id": null, "tags": [], "creator": "greensun@usa.net", "text": "You're not going to say why you won't fix this?  No reasoning?  Just marked it \nas Resolved \"Won't Fix\" and that's that?", "count": 1, "id": 51259, "time": "2004-01-27T17:45:32Z", "bug_id": 26451, "creation_time": "2004-01-27T17:45:32Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 26451, "text": "javax.net.ssl.HttpsURLConnection is an abstract class, hence the class that \nwill actually be returned should be a sub class of this. As expected.\nIf the class that is returned can be casted as this, then you are good to go.\nNot sure what your problem is?\n\n", "id": 51274, "time": "2004-01-28T00:58:43Z", "creator": "fhanik@apache.org", "creation_time": "2004-01-28T00:58:43Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "True, and that's good, but my point is that Sun says all com.sun.net classes \nare going byebye.", "attachment_id": null, "id": 51418, "creation_time": "2004-01-29T17:01:54Z", "time": "2004-01-29T17:01:54Z", "creator": "greensun@usa.net", "bug_id": 26451, "is_private": false}, {"count": 4, "tags": [], "bug_id": 26451, "attachment_id": null, "id": 51423, "time": "2004-01-29T19:07:54Z", "creator": "ernst.matthias@gmail.com", "creation_time": "2004-01-29T19:07:54Z", "is_private": false, "text": "The point is: \"The official (abstract) class for https connections is \njavax.net.ssl.HttpsURLConnection\". That's what you're supposed to use in \n*your* code and that's gonna work, be it in a Sun, IBM or BEA VM. What \n*concrete* implementation class a call to new URL(\"https:...\").openConnection\n() returns is not your business. It will be some subclass of javax.net... It's \nin the J2SE's discretion to return any class it likes.\n\nIt's like you're complaining that servlet contexts are instance of \norg.apache...StandardContext. \"But Sun says its a \njavax.servlet.ServletContext...\"\n\nWelcome to OO.\n"}, {"count": 5, "tags": [], "bug_id": 26451, "attachment_id": null, "text": "And, if in the next release of servlet binaries, they do away with that package\nentirely, will you wait till then to implement one of your own, or will you\ncontinue to use the \"deprecated\" ones?", "id": 51449, "time": "2004-01-30T05:06:40Z", "creator": "greensun@usa.net", "creation_time": "2004-01-30T05:06:40Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 26451, "attachment_id": null, "is_private": false, "id": 51450, "time": "2004-01-30T05:44:54Z", "creator": "william.barker@wilshire.com", "creation_time": "2004-01-30T05:44:54Z", "text": "Becky, chill.  If Sun decides to do away with the com.sun.net.** package, then \nthey will replace the functionality with something else.  Tomcat 5.0.x's SSL \nimplementation is currently completely agnositic to the vendors implementation \n(and has been for a very long time on the client-side implementation :).\n\nSimply downloading the source distro, and doing a simple 'grep' will show that \nTomcat has no dependancies on the com.sun.net.** package."}, {"count": 7, "tags": [], "creator": "dnelubin@gmail.com", "text": "Correct value for java.protocol.handler.pkgs system property starting with Java 1.4 is \"sun.net.www.protocol\". But the better is not to set this property at all.\n\nBut the class org.apache.jk.server.JkMain in method initHTTPSUrls() changes the property. So if you want to use this class, you must provide the property. Overwise the old implementation (com.sun.net.ssl.internal.www.protocol) starts to work.\n\nI suppose, the JkMain class should check Java version is this method.\n\n", "id": 116928, "time": "2008-05-23T06:33:19Z", "bug_id": 26451, "creation_time": "2008-05-23T06:33:19Z", "is_private": false, "attachment_id": null}]
[{"attachment_id": null, "tags": [], "bug_id": 42760, "is_private": false, "count": 0, "id": 104798, "time": "2007-06-28T00:03:55Z", "creator": "tim@mr-dog.net", "creation_time": "2007-06-28T00:03:55Z", "text": "The global hash_mutex table is initialised every time apr_atomic_init is called.\nI know this, ideally, should be called once per application, but I'm using both\nAPR and Log4cxx. Log4cxx also uses APR, and initialises the APR.\n\nLog4cxx calls apr_initialize and then apr_atomic_init within it's singleton\ninitialiser class. Not knowing this, and as this is Log4cxx internals, I myself\ncall both apt_initialize and then apr_atomic_init thus overwriting the global\nhash_mutex. This causes things to go bang.\n\nI'm using this patch to overcome this and thought it maybe a useful addition to\nthe APRs initialisation.\n\nCheers,\n\nTim\n\nIndex: apr_atomic.c\n===================================================================\n--- apr_atomic.c        (revision 5)\n+++ apr_atomic.c        (working copy)\n@@ -168,7 +168,7 @@\n #define NUM_ATOMIC_HASH 7\n /* shift by 2 to get rid of alignment issues */\n #define ATOMIC_HASH(x) (unsigned int)(((unsigned long)(x)>>2)%(unsigned\nint)NUM_ATOMIC_HASH)\n-static apr_thread_mutex_t **hash_mutex;\n+static apr_thread_mutex_t **hash_mutex = 0;\n #endif /* APR_HAS_THREADS */\n \n apr_status_t apr_atomic_init(apr_pool_t *p)\n@@ -176,13 +176,16 @@\n #if APR_HAS_THREADS\n     int i;\n     apr_status_t rv;\n-    hash_mutex = apr_palloc(p, sizeof(apr_thread_mutex_t*) * NUM_ATOMIC_HASH);\n \n-    for (i = 0; i < NUM_ATOMIC_HASH; i++) {\n-        rv = apr_thread_mutex_create(&(hash_mutex[i]),\n-                                     APR_THREAD_MUTEX_DEFAULT, p);\n-        if (rv != APR_SUCCESS) {\n-           return rv;\n+    if (hash_mutex == 0) {\n+        hash_mutex = apr_palloc(p, sizeof(apr_thread_mutex_t*) * NUM_ATOMIC_HASH);\n+\n+        for (i = 0; i < NUM_ATOMIC_HASH; i++) {\n+            rv = apr_thread_mutex_create(&(hash_mutex[i]),\n+                                         APR_THREAD_MUTEX_DEFAULT, p);\n+            if (rv != APR_SUCCESS) {\n+                return rv;\n+            }\n         }\n     }\n #endif /* APR_HAS_THREADS */"}, {"count": 1, "tags": [], "bug_id": 42760, "attachment_id": 20408, "text": "Created attachment 20408\nPatch for bug.\n\nSorry for putting the patch in the initial bug report, this is the attached\nversion!", "id": 104799, "time": "2007-06-28T00:06:07Z", "creator": "tim@mr-dog.net", "creation_time": "2007-06-28T00:06:07Z", "is_private": false}, {"count": 2, "tags": [], "text": "apr_atomic_init is already called by apr_initialize, so it shouldn't be called directly (this should\nbe noted in the docs..). Unfortunately, the patch won't work because calling in sequence\napr_initialize, apr_terminate, apr_initialize, hash_mutex will point to a non-existent resource.\n\nSmall nitpick: don't use plain integer as NULL pointer", "is_private": false, "id": 104812, "creation_time": "2007-06-28T04:36:16Z", "time": "2007-06-28T04:36:16Z", "creator": "davi@apache.org", "bug_id": 42760, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 42760, "attachment_id": 20408, "id": 104813, "time": "2007-06-28T04:41:31Z", "creator": "tim@mr-dog.net", "creation_time": "2007-06-28T04:41:31Z", "is_private": false, "text": "Comment on attachment 20408\nPatch for bug.\n\n>Index: apr_atomic.c\n>===================================================================\n>--- apr_atomic.c\t(revision 5)\n>+++ apr_atomic.c\t(working copy)\n>@@ -168,7 +168,7 @@\n> #define NUM_ATOMIC_HASH 7\n> /* shift by 2 to get rid of alignment issues */\n> #define ATOMIC_HASH(x) (unsigned int)(((unsigned long)(x)>>2)%(unsigned int)NUM_ATOMIC_HASH)\n>-static apr_thread_mutex_t **hash_mutex;\n>+static apr_thread_mutex_t **hash_mutex = NULL;\n> #endif /* APR_HAS_THREADS */\n> \n> apr_status_t apr_atomic_init(apr_pool_t *p)\n>@@ -176,13 +176,16 @@\n> #if APR_HAS_THREADS\n>     int i;\n>     apr_status_t rv;\n>-    hash_mutex = apr_palloc(p, sizeof(apr_thread_mutex_t*) * NUM_ATOMIC_HASH);\n> \n>-    for (i = 0; i < NUM_ATOMIC_HASH; i++) {\n>-        rv = apr_thread_mutex_create(&(hash_mutex[i]),\n>-                                     APR_THREAD_MUTEX_DEFAULT, p);\n>-        if (rv != APR_SUCCESS) {\n>-           return rv;\n>+    if (hash_mutex == NULL) {\n>+        hash_mutex = apr_palloc(p, sizeof(apr_thread_mutex_t*) * NUM_ATOMIC_HASH);\n>+\n>+        for (i = 0; i < NUM_ATOMIC_HASH; i++) {\n>+            rv = apr_thread_mutex_create(&(hash_mutex[i]),\n>+                                         APR_THREAD_MUTEX_DEFAULT, p);\n>+            if (rv != APR_SUCCESS) {\n>+                return rv;\n>+            }\n>         }\n>     }\n> #endif /* APR_HAS_THREADS */"}, {"count": 4, "tags": [], "creator": "tim@mr-dog.net", "is_private": false, "text": "> Small nitpick: don't use plain integer as NULL pointer\n\nNote taken, force of bad habit! :)", "id": 104814, "time": "2007-06-28T04:42:47Z", "bug_id": 42760, "creation_time": "2007-06-28T04:42:47Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 42760, "attachment_id": 20410, "id": 104815, "time": "2007-06-28T04:56:21Z", "creator": "davi@apache.org", "creation_time": "2007-06-28T04:56:21Z", "is_private": false, "text": "Created attachment 20410\nUpdate apr_atomic_init documentation"}, {"count": 6, "tags": [], "text": "Committed revision 551962.\n\nhttp://svn.apache.org/viewvc?view=rev&revision=551962\n", "is_private": false, "id": 104918, "creation_time": "2007-06-29T10:10:57Z", "time": "2007-06-29T10:10:57Z", "creator": "davi@apache.org", "bug_id": 42760, "attachment_id": null}, {"count": 7, "tags": [], "text": "The current fix doesn't fix the initial problem. Subsequent explicit calls to\napr_atomic_init, as done by log4cxx, will still overwrite the global hash_mutex.\n\nIf the fix for this is doc changes then should the docs also state, for\napr_atomic_init, that it should never be called by users or APR?\n", "is_private": false, "id": 104939, "creator": "tim@mr-dog.net", "time": "2007-06-30T03:54:47Z", "bug_id": 42760, "creation_time": "2007-06-30T03:54:47Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 42760, "is_private": false, "id": 104940, "attachment_id": null, "creator": "davi@apache.org", "creation_time": "2007-06-30T04:22:16Z", "time": "2007-06-30T04:22:16Z", "text": "(In reply to comment #7)\n> The current fix doesn't fix the initial problem. Subsequent explicit calls to\n> apr_atomic_init, as done by log4cxx, will still overwrite the global hash_mutex.\n\nlog4cxx shouldn't be calling apr_atomic_init(). Anyway, i'll post a updated patch\nfor the hash mutex fix.\n\n> If the fix for this is doc changes then should the docs also state, for\n> apr_atomic_init, that it should never be called by users or APR?\n\nYes,  isn't the updated remark clear enough?\n\n\n"}, {"count": 9, "tags": [], "bug_id": 42760, "text": "> log4cxx shouldn't be calling apr_atomic_init(). Anyway, i'll post a updated patch\n> for the hash mutex fix.\n\nCool, thanks.\n\n> > If the fix for this is doc changes then should the docs also state, for\n> > apr_atomic_init, that it should never be called by users or APR?\n> \n> Yes,  isn't the updated remark clear enough?\n\nYes, it is, sorry, didn't svn up before I read it! :)", "id": 104941, "time": "2007-06-30T04:33:05Z", "creator": "tim@mr-dog.net", "creation_time": "2007-06-30T04:33:05Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 42760, "attachment_id": 20423, "text": "Created attachment 20423\nregister pool cleanup function for apr_atomic_init\n\nDoes this patch fix the issue for the log4cxx case? or for other\napps that might call apr_atomic_init() directly...", "id": 104942, "time": "2007-06-30T04:42:11Z", "creator": "davi@apache.org", "creation_time": "2007-06-30T04:42:11Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 42760, "attachment_id": null, "text": "Yes, that patch does fix the issue well. Thanks :)", "id": 104943, "time": "2007-06-30T07:50:17Z", "creator": "tim@mr-dog.net", "creation_time": "2007-06-30T07:50:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 42760, "is_private": false, "count": 12, "id": 104949, "time": "2007-06-30T08:24:00Z", "creator": "davi@apache.org", "creation_time": "2007-06-30T08:24:00Z", "text": "Patch committed to trunk in revision 552161. Thanks for using APR.\n\nhttp://svn.apache.org/viewvc?view=rev&revision=552161"}]
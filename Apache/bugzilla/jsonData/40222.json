[{"count": 0, "tags": [], "creator": "thulek@cz.ibm.com", "attachment_id": null, "id": 92080, "time": "2006-08-09T13:39:52Z", "bug_id": 40222, "creation_time": "2006-08-09T13:39:52Z", "is_private": false, "text": "Tomcat should not carry over a session id generated under HTTP do HTTPS\nrequests. After authentication, the session ID becomes THE secret password.\n\nIn reality, many standard servlets (including e.g. Apache MyFaces servlet)\nreturn a session ID on the first request. After switch to SSL (with\nauthentication), the session ID is retained, thus allowing easy session hijacking.\n\nIn the ideal world the session should survive the switch from HTTP to HTTPS, but\nthe session ID must change upon switch to HTTPS."}, {"count": 1, "tags": [], "creator": "yoavs@computer.org", "attachment_id": null, "id": 97322, "time": "2006-12-26T06:45:59Z", "bug_id": 40222, "creation_time": "2006-12-26T06:45:59Z", "is_private": false, "text": "Are you sure the same session is indeed carried over?  I thought we'd\nimplemented the opposite (new session when moving from HTTP to HTTPS), quite\npurposefully for security, as far back as Tomcat 3.x.  See for example\nhttp://mail-archives.apache.org/mod_mbox/tomcat-users/200301.mbox/%3C3E1F642E.4610DE28@attbi.com%3E\n"}, {"count": 2, "tags": [], "bug_id": 40222, "attachment_id": null, "text": "(In reply to comment #1)\n> Are you sure the same session is indeed carried over?  I thought we'd\n> implemented the opposite (new session when moving from HTTP to HTTPS), quite\n> purposefully for security, as far back as Tomcat 3.x.  See for example\n\n\nYes, I am sure. The problem can be demonstrated like this:\n\n1) Using HTTP, go to an insecure page which assigns a JSESSIONID (eg. any JSF page)\n\n2) Notice the JSESSIONID (which can be sniffed on the network by man-in-the-middle)\n\n3) Go to an authenticated HTTPS page (eg. via form-based login). Look at the\n\"secure data\".\n\nThe JSESSIONID is still the same!\n\n4) From another computer, write the URL of the authenticated page including the\nJSESSIOND obtained in step 2 above. Bingo - the hacker is in!\n\nIn order to circumvent the problem, we had to insert code into the login page\nwhich invalidates previously assigned session, loosing all session info.\n\nAn easy fix in Tomcat would be to change (or append) the JSESSIONID upon\nswitching from HTTP to HTTPS. Switching from HTTPS to HTTP is already forbidden\nas you mention, which is correct.\n\nTomas\n", "id": 97343, "time": "2006-12-26T11:31:47Z", "creator": "thulek@cz.ibm.com", "creation_time": "2006-12-26T11:31:47Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40222, "attachment_id": null, "text": "I was able to easily replicate this on 5.5.20.\n\nRE #1 - unless I'm misreading the referenced post, that discussion is about new\nsessions being created when going https-->http, not the other way around.  ", "id": 97957, "time": "2007-01-11T10:46:35Z", "creator": "chris@sourcelabs.com", "creation_time": "2007-01-11T10:46:35Z", "is_private": false}, {"count": 4, "tags": [], "creator": "thulek@cz.ibm.com", "text": "NO, the problem is that the SessionID, when switching from HTTP to HTTPS remains\nthe same!!!\n\nI believe this is a serious security issue and should be dealt with.\n\nThe attack scenario again:\n\n1) A HTTP page assigns a SessionID\n\n2) Man-in-the-Middle notices the SessionID\n\n3) Upon switch to HTTPS, the SesssionID remains the same. After login to HTTPS\nsecure area the man-in-the-middle is able access all HTTPS pages just using the\nSessionID obtained.", "id": 97975, "time": "2007-01-12T00:37:49Z", "bug_id": 40222, "creation_time": "2007-01-12T00:37:49Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "remm@apache.org", "text": "The session id as defined by the specification can be used by the user for a\nvariety of things, or can be pretty much set in stone due to other factors\n(session clustering, persistent storage). So I'd suggest calming down and\nrelaxing, because this is not going to be fixed.\n\nThe proprietary solution (which could be enabled using a valve) is to expire the\nsession and create a new one with a different session id, and as a convenience,\nTomcat could copy over some of the session data. Feel free to submit such a\nvalve if you'd like to.", "id": 97991, "time": "2007-01-12T04:33:44Z", "bug_id": 40222, "creation_time": "2007-01-12T04:33:44Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 40222, "attachment_id": null, "text": "Marking this as an enhancement and awaiting a patch for review.", "id": 98315, "time": "2007-01-20T18:09:52Z", "creator": "markt@apache.org", "creation_time": "2007-01-20T18:09:52Z", "is_private": false}, {"count": 7, "tags": [], "creator": "markt@apache.org", "text": "Tomcat now provides an option to change the session ID on authentication. This should address the concerns raised here.\n\n*** This bug has been marked as a duplicate of bug 45255 ***", "id": 139465, "time": "2010-08-25T15:01:58Z", "bug_id": 40222, "creation_time": "2010-08-25T15:01:58Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "pablo@condumex.com", "text": "I found a little problem in the method setAttribute() of StandardSesssion.java. \nAcording to section SVR.7.4 of the servlet spec:\n\n\"The valueBound method must be called before the object is made available\nvia the getAttribute method of the HttpSession interface. The valueUbound\nmethod must be called after the object is no longer available via the\ngetAttribute method of the HttpSession interface.\". \n\nThe problem in the setAttribute() code is that valueBound() is called after\nthe value is put into the attributes of the session. Here is the code with\nthe problem:\n\n\t  ....\n\n        // Replace or add this attribute\n        Object unbound = null;\n        synchronized (attributes) {\n            unbound = attributes.get(name);\n            attributes.put(name, value);\n        }\n\n        // Call the valueUnbound() method if necessary\n        if ((unbound != null) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            ((HttpSessionBindingListener) unbound).valueUnbound\n              (new HttpSessionBindingEvent((HttpSession) this, name));\n        }\n\n        // Call the valueBound() method if necessary\n        HttpSessionBindingEvent event = null;\n        if (unbound != null)\n            event = new HttpSessionBindingEvent\n                ((HttpSession) this, name, unbound);\n        else\n            event = new HttpSessionBindingEvent\n                ((HttpSession) this, name, value);\n        if (value instanceof HttpSessionBindingListener)\n            ((HttpSessionBindingListener) value).valueBound(event);\n\n\t  ...\n\nHere is the corrected code:\n\n\t  ....\n        \n\t  // Construct an event with the new value\n        HttpSessionBindingEvent event = new HttpSessionBindingEvent\n                ((HttpSession) this, name, value);\n\n\t  // Call the valueBound() method if necessary\n        if (value instanceof HttpSessionBindingListener)\n            ((HttpSessionBindingListener) value).valueBound(event);\n\n        // Replace or add this attribute\n        Object unbound = null;\n        synchronized (attributes) {\n            unbound = attributes.get(name);\n            attributes.put(name, value);\n        }\n\n        // Call the valueUnbound() method if necessary\n        if ((unbound != null) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            ((HttpSessionBindingListener) unbound).valueUnbound\n              (new HttpSessionBindingEvent((HttpSession) this, name));\n        }\n\n        // Replace the current event with one containing \n        // the old value if necesary\n        if (unbound != null)\n            event = new HttpSessionBindingEvent\n                ((HttpSession) this, name, unbound);\n\n\t  ...", "id": 22362, "time": "2002-09-06T14:17:23Z", "bug_id": 12363, "creation_time": "2002-09-06T14:17:23Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 12363, "text": "Thanks.\n\nThis has been fixed in CVS and will be included in the next releases of TC4 \nand TC5.", "id": 50702, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2004-01-18T20:40:18Z", "time": "2004-01-18T20:40:18Z", "is_private": false}, {"count": 2, "tags": [], "text": "The fix has a flaw: if you call setAttribute() for an attribute that is already\nin the context then the unBound() method will get called on the attribute after\nthe bound(). \nThis affects Struts applications that keep formbeans in the session context.", "is_private": false, "id": 54076, "creator": "obender2@hotmail.com", "time": "2004-03-16T15:54:47Z", "bug_id": 12363, "creation_time": "2004-03-16T15:54:47Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "text": "Well, that's the idea (read the spec carefully).\nvalueBound is called with the new object before setting it in the hashmap\n(making it available by getAttribute).\nvalueUnbound is called with the old object after removing it in the hashmap\n(making it available no longer available by getAttribute).", "id": 54080, "time": "2004-03-16T16:01:49Z", "bug_id": 12363, "creation_time": "2004-03-16T16:01:49Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 12363, "text": "I think the right interpretation of the spec is the following:\n\n1. get old attribute from context\n2. remove old attribute from context\n3. call valueUnbound() on old attribute\n4. call valueBound() on new attribute\n5. add the new attribute to the context\n\nThe way it is done now it calls valueUnbound() on the attribute after it is made\navailable through the context if you just rebind it - I highly doubt anybody\never desired that.\n\nThe spec does say that step 3 should be executed after step 1 and 2; it also\nsays  that step 5 should be executed after 4. It never says that you should deal\nwith the old object after you finish with the new one. \n\nHere's what the spec says:\n\n...\nSome objects may require notification when they are placed into, or removed\nfrom, a session. This information can be obtained by having the object implement\nthe HttpSessionBindingListener interface. This interface defines the following\nmethods that will signal an object being bound into, or being unbound from, a\nsession.\n\u2022 valueBound\n\u2022 valueUnbound\nThe valueBound method must be called before the object is made available via\nthe getAttribute method of the HttpSession interface. The valueUnbound\nmethod must be called after the object is no longer available via the getAttribute\nmethod of the HttpSession interface.\n...\nsetAttribute(String, Object)\npublic void setAttribute(java.lang.String name,\njava.lang.Object value)\nBinds an object to this session, using the name specified. If an object of the\nsame name is already bound to the session, the object is replaced.\nAfter this method executes, and if the new object implements HttpSession-\nBindingListener, the container calls HttpSessionBinding-\nListener.valueBound. The container then notifies any\nHttpSessionAttributeListeners in the web application.\n\nIf an object was already bound to this session of this name that implements\nHttpSessionBindingListener, its HttpSessionBindingListener.value-\nUnbound method is called.\nIf the value passed in is null, this has the same effect as calling remove-\nAttribute().\n...\n\nAgain, the spec does mention the old object after it mentions the new one but it\ndoes not say it should only handle it after finishing with the new one. In fact,\nyou could argue that if an object is just rebound you should not call\nvalueUnbound() at all, after all, it was never unbound.\n\nWhat happens now is that when Struts rebinds our session formbean the last\naction performed on the bean is valueUnbound(). So after a successfull login our\nsession bean is told to mop up and go away. Needless to say you can no longer\nuse the application.\n", "id": 54109, "attachment_id": null, "creator": "obender2@hotmail.com", "creation_time": "2004-03-16T21:20:17Z", "time": "2004-03-16T21:20:17Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 12363, "is_private": false, "count": 5, "id": 54110, "time": "2004-03-16T21:29:33Z", "creator": "remm@apache.org", "creation_time": "2004-03-16T21:29:33Z", "text": "We conform with the specification. valueUnbound is to notify the attribute value\nobject that it is removed. It is not to notify that the attribute is removed\nfrom the session (you have regular session attribute listeners for that). This\nis why the order is irrelevant. Please do not reopen this report."}]
[{"count": 0, "attachment_id": 33581, "bug_id": 59045, "is_private": false, "id": 188681, "time": "2016-02-22T16:02:09Z", "creator": "peter@pramberger.at", "creation_time": "2016-02-22T16:02:09Z", "tags": [], "text": "Created attachment 33581\nDebug output\n\nHi,\n\nI'm currently facing a strange issue with Apache 2.4.17 running in a reverse proxy setup. The web server terminates SSL, and requests are forwarded via AJP to a Tomcat server.\n\nIt seems that mod_reqtimeout triggers a AH01382 for requests running longer (>20s default request timeout), even though the web server already responded with status code 200. This is triggered with both Worker and Event MPMs.\n\nAttached is the debug output from a sample session. The request starts in line 1054, line 1153 shows the timeout error, while in line 1130 the 200 response is already sent back to the client.\n\nPlease note the time difference of 50s between forwarding the request to the client (line 1120), and getting back the response from the server (line 1121). The AH01382 is NOT triggered if I increase the request body timeout to e.g. 900s.\n\nSeems like mod_reqtimeout is triggered too late in the chain, so that the request processing time on the backend server is wrongly taken into account."}, {"count": 1, "tags": [], "bug_id": 59045, "attachment_id": null, "id": 188682, "time": "2016-02-22T16:03:30Z", "creator": "peter@pramberger.at", "creation_time": "2016-02-22T16:03:30Z", "is_private": false, "text": "Even though this is not the latest version I assume the same behaviour in 2.4.18. At least there were no changes to mod_reqtimeout."}, {"count": 2, "tags": [], "bug_id": 59045, "attachment_id": null, "id": 188683, "time": "2016-02-22T16:11:05Z", "creator": "peter@pramberger.at", "creation_time": "2016-02-22T16:11:05Z", "is_private": false, "text": "Forgot to mention: same behaviour when using HTTP instead of AJP to the backend server."}, {"count": 3, "tags": [], "text": "This should be fixed since 2.4.16 (by r1689922).\nThe [speculative-nonblocking] read (log line 1151) shouldn't trigger any timeout because it is explicitly bypassed at the very beginning of mod_reqtimeout's filter.\nCould it be possible that the mod_reqtimeout(.so) used/linked is not up to date?", "attachment_id": null, "id": 188914, "creator": "ylavic.dev@gmail.com", "time": "2016-02-27T22:20:59Z", "bug_id": 59045, "creation_time": "2016-02-27T22:20:59Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 59045, "attachment_id": null, "is_private": false, "id": 188929, "time": "2016-02-28T19:32:19Z", "creator": "peter@pramberger.at", "creation_time": "2016-02-28T19:32:19Z", "text": "Unfortunately not - I'm using mock for a clean RPM build environment. And there is another sign:\n\n$ grep \"ap_hook_pre_read_request\" httpd-2.4.12/modules/filters/mod_reqtimeout.c\n\n$ grep \"ap_hook_pre_read_request\" httpd-2.4.17/modules/filters/mod_reqtimeout.c\nap_hook_pre_read_request(reqtimeout_before_header, NULL, NULL,\n\t\n$ strings mod_reqtimeout.so | grep \"ap_hook_pre_read_request\"\nap_hook_pre_read_request\n\nThat issue actually appeared with 2.4.16 first, but due to a number of factors (one of them being that mod_reqtimeout logs these AH01382 only on info level, the second one is having a Java thick client which triggers another bug due to this premature connection close) it took till now to lock it down to mod_reqtimeout."}, {"count": 5, "tags": [], "creator": "peter@pramberger.at", "is_private": false, "text": "Just in case it matters: mod_reqtimeout is definitely loaded before any of the proxy modules.", "id": 188930, "time": "2016-02-28T19:40:07Z", "bug_id": 59045, "creation_time": "2016-02-28T19:40:07Z", "attachment_id": null}, {"count": 6, "attachment_id": 33609, "bug_id": 59045, "is_private": false, "id": 188934, "time": "2016-02-28T22:51:29Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2016-02-28T22:51:29Z", "tags": [], "text": "Created attachment 33609\nDisable mod_reqtimeout in between requests\n\nI think I figure out what's going on, and this has to do with mod_ssl (which doesn't show up in the log but the numerous \"FLUSH bucket\" make me assume it is enabled...).\n\nIndeed mod_ssl \"transforms\" the speculative reads into normal reads, which bypasses the check in mod_reqtimeout.\n\nThe attached patch detects outgoing EOR buckets and disables mod_reqtimeout until the next request is read (that anyway only concerns speculative/administrative and non-blocking reads, which should not be taken into account).\n\nCould you please give it a try?"}, {"count": 7, "tags": [], "bug_id": 59045, "attachment_id": null, "id": 188935, "time": "2016-02-28T23:26:13Z", "creator": "peter@pramberger.at", "creation_time": "2016-02-28T23:26:13Z", "is_private": false, "text": "Yes, I left debugging disabled for mod_ssl to keep the debug output manageable.\n\nThanks, I'll try it."}, {"count": 8, "tags": [], "text": "Created attachment 33611\nDisable mod_reqtimeout in between requests\n\nActually the previous patch failed to add the new filter, this one should be better.\n\nThanks for testing.", "is_private": false, "id": 188941, "creator": "ylavic.dev@gmail.com", "time": "2016-02-29T08:19:57Z", "bug_id": 59045, "creation_time": "2016-02-29T08:19:57Z", "attachment_id": 33611}, {"count": 9, "tags": [], "creator": "peter@pramberger.at", "attachment_id": null, "text": "Unfortunately I can't do a real-life test with the application yet, this might take a couple of days, sorry.\n\nBut when trying to manually test it, I noticed some strange behaviour (not related to your patch!):\n\n1) Triggering a request header read timeout:\n\n$ openssl s_client -connect 10.15.24.4:443 -quiet\n<no input>\n<Connection closed after 20s, no output>\n\n[Mon Feb 29 13:21:26.240128 2016] [reqtimeout:info] [pid 1384:tid 140271576659712] [client 10.15.24.23:51325] AH01382: Request header read timeout\n\n10.15.24.23 securities-backoffice-http-test.DOMAIN - [29/Feb/2016:13:21:26 +0100] \"-\" 408 - \"-\" \"-\"\n\nWhile a 408 is logged, there is no actual response from the web server. Shouldn't it return a \"HTTP/1.1 408\" status line?\n\n2) Triggering a request body read timeout:\n\n$ openssl s_client -connect 10.15.24.23:443 -quiet\nPOST /SecuritiesTool/rpc HTTP/1.1\nHost: securities-backoffice-http-test.DOMAIN\nContent-Type: application/octet-stream\nContent-Length: 100\n<no body sent>\n\nHTTP/1.1 400 Bad Request\nDate: Mon, 29 Feb 2016 12:21:33 GMT\nServer: Apache\nContent-Length: 318\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n[Mon Feb 29 13:21:54.466678 2016] [reqtimeout:info] [pid 1646:tid 140271608129280] [client 10.15.24.23:51327] AH01382: Request body read timeout\n\n10.15.24.23 securities-backoffice-http-test.DOMAIN - [29/Feb/2016:13:21:33 +0100] \"POST /SecuritiesTool/rpc HTTP/1.1\" 400 318 \"-\" \"-\"\n\nWhat happened to the 408?", "id": 188958, "time": "2016-02-29T13:03:34Z", "bug_id": 59045, "creation_time": "2016-02-29T13:03:34Z", "is_private": false}, {"count": 10, "tags": [], "creator": "peter@pramberger.at", "attachment_id": null, "text": "Sorry for the delay - the first tests look good, I'm awaiting the final confirmation for tomorrow.", "id": 189071, "time": "2016-03-03T21:00:06Z", "bug_id": 59045, "creation_time": "2016-03-03T21:00:06Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 59045, "attachment_id": null, "id": 189086, "time": "2016-03-04T08:46:07Z", "creator": "rpluem@apache.org", "creation_time": "2016-03-04T08:46:07Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #8)\n> Created attachment 33611 [details]\n> Disable mod_reqtimeout in between requests\n> \n> Actually the previous patch failed to add the new filter, this one should be\n> better.\n> \n> Thanks for testing.\n\nHm. Is another output filter really the best solution? It has to be passed for every run of the output chain.\nHow about setting a note to c->notes in check_pipeline that informs mod_reqtimeout to step out of our way temporarily? This removes the need for mod_reqtimeout to second guess from other conditions that it has to step out."}, {"text": "(In reply to Ruediger Pluem from comment #11)\n> \n> Hm. Is another output filter really the best solution? It has to be passed\n> for every run of the output chain.\n> How about setting a note to c->notes in check_pipeline that informs\n> mod_reqtimeout to step out of our way temporarily? This removes the need for\n> mod_reqtimeout to second guess from other conditions that it has to step out.\n\nIt's not really an heavy filter, not sure it performs slower than an apr_table lookup...\nThis filter shouldn't be noticeable from a performance POV, and I think it is sane in any case, do we (will) control all the speculative/non-blocking (administrative) reads between requests?\n\nThe \"notes\" could possibly be added for individual modules (if needed) to handle a temporary state (those that currently disable mod_reqtimeout completely, for no good reason IMHO), but that's another story I think.\n\nBut I'm not totally opposed to your solution either, maybe other opinions?", "tags": [], "bug_id": 59045, "attachment_id": null, "count": 12, "id": 189088, "time": "2016-03-04T12:01:07Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2016-03-04T12:01:07Z", "is_private": false}, {"count": 13, "tags": [], "text": "(In reply to Yann Ylavic from comment #12)\n> (In reply to Ruediger Pluem from comment #11)\n> > \n> > Hm. Is another output filter really the best solution? It has to be passed\n> > for every run of the output chain.\n> > How about setting a note to c->notes in check_pipeline that informs\n> > mod_reqtimeout to step out of our way temporarily? This removes the need for\n> > mod_reqtimeout to second guess from other conditions that it has to step out.\n> \n> It's not really an heavy filter, not sure it performs slower than an\n> apr_table lookup...\n> This filter shouldn't be noticeable from a performance POV, and I think it\n> is sane in any case, do we (will) control all the speculative/non-blocking\n> (administrative) reads between requests?\n\nI admit that it might be a matter of taste. You can argue that you don't know where all these actions between requests happen and hence that in these cases the callers that pull from the input chain miss to set the note. Furthermore you can argue that the callers shouldn't need to know about mod_reqtimeout and the need to disable it and that they might forget to enable it again or disable it again if we do so automatically in mod_reqtimeout. On the other hand we had a fix for this issue already in 2.4.16 and did not capture all cases. Probably we missed other edge cases and need to add further more less complex code to detect them in mod_reqtimeout whereas in the notes case we would just need to set the note on callers side.\n\n> \n> The \"notes\" could possibly be added for individual modules (if needed) to\n> handle a temporary state (those that currently disable mod_reqtimeout\n> completely, for no good reason IMHO), but that's another story I think.\n> \n> But I'm not totally opposed to your solution either, maybe other opinions?\n\nNo extraordinary strong feelings. Would love to hear the opinion of others. Maybe we should forward this to dev@ for discussion and make a decision based on this discussion which way to go.", "attachment_id": null, "id": 189106, "creator": "rpluem@apache.org", "time": "2016-03-04T16:00:43Z", "bug_id": 59045, "creation_time": "2016-03-04T16:00:43Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 59045, "attachment_id": null, "is_private": false, "id": 189223, "time": "2016-03-07T19:13:02Z", "creator": "peter@pramberger.at", "creation_time": "2016-03-07T19:13:02Z", "text": "Well, whatever the correct solution would be, the provided patch seems to fix the issue for me. I can live with it till it is finally fixed in an upcoming release.\n\nThanks for your help."}, {"count": 15, "attachment_id": null, "bug_id": 59045, "is_private": false, "id": 189303, "time": "2016-03-09T13:55:04Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2016-03-09T13:55:04Z", "tags": [], "text": "Committed version in r1734239, proposed for backport to 2.4.x."}, {"count": 16, "tags": [], "bug_id": 59045, "attachment_id": null, "id": 189341, "time": "2016-03-10T15:04:45Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2016-03-10T15:04:45Z", "is_private": false, "text": "Backported to 2.4.19 in r1734416."}]
[{"count": 0, "tags": [], "creator": "rea-asf@codelabs.ru", "text": " ", "id": 99759, "time": "2007-02-25T12:36:55Z", "bug_id": 41698, "creation_time": "2007-02-25T12:36:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": 19633, "bug_id": 41698, "text": "Created attachment 19633\nPatch for mod_proxy_http that enables the 'Destination' header handling.\n\nAttached the patch.", "id": 99761, "time": "2007-02-25T12:39:31Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-02-25T12:39:31Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 41698, "is_private": false, "id": 99763, "time": "2007-02-25T12:57:00Z", "creator": "nick@webthing.com", "creation_time": "2007-02-25T12:57:00Z", "tags": [], "text": "Please see http://httpd.apache.org/docs/2.3/mod/mod_headers.html#header\n\nI don't know why the documentation of this fix hasn't made it through to 2.2. \nThe fix itself is in 2.2.4."}, {"count": 3, "attachment_id": null, "bug_id": 41698, "text": "(In reply to comment #2)\nNick,\n\n> Please see http://httpd.apache.org/docs/2.3/mod/mod_headers.html#header\n> \n> I don't know why the documentation of this fix hasn't made it through to 2.2. \n> The fix itself is in 2.2.4.\n\nThis is great that mod_headers has this workaround in 2.2.4. But it will be\nbetter to fix mod_proxy_http -- the fix really belongs to this module: people\nshould not bother themselves to dig through the DAV, proxying and mod_headers.", "id": 99771, "time": "2007-02-25T21:44:19Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-02-25T21:44:19Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 99828, "time": "2007-02-26T22:15:03Z", "creator": "rpluem@apache.org", "creation_time": "2007-02-26T22:15:03Z", "text": "Your patch does not work with mod_rewrite (RewriteRules with the P flag). Thus\nit cannot be applied to the codebase. Currently I see no way to fix this, so\nNicks proposal is the only possibility currently. But maybe I am wrong and you\ncan come up with something that also works with mod_rewrite. Thus leaving this\nreport open as an Enhancement."}, {"count": 5, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 99835, "time": "2007-02-26T23:57:33Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-02-26T23:57:33Z", "text": "Ruediger,\n\n(In reply to comment #4)\n> Your patch does not work with mod_rewrite (RewriteRules with the P flag). Thus\n> it cannot be applied to the codebase. Currently I see no way to fix this, so\n> Nicks proposal is the only possibility currently. But maybe I am wrong and you\n> can come up with something that also works with mod_rewrite. Thus leaving this\n> report open as an Enhancement.\n\nCould you please give the Apache configuration exempt for which my patch will\nbreak mod_rewrite: I will try to see if it can be fixed.\n\nThanks!"}, {"count": 6, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 99836, "time": "2007-02-27T00:23:57Z", "creator": "nick@webthing.com", "creation_time": "2007-02-27T00:23:57Z", "text": "(In reply to comment #4)\n> Your patch does not work with mod_rewrite (RewriteRules with the P flag).\n\nI would say rather: the patch has side-effects that make it unacceptable for us.\n You just named one of them.\n\nI changed it to \"documentation\" because the actual problem is fixed.  I see\nSander recently updated the 2.2.x docs in r511293, so I'll just close this PR.\n"}, {"count": 7, "tags": [], "creator": "rea-asf@codelabs.ru", "text": "Nick,\n\n(In reply to comment #6)\n> (In reply to comment #4)\n> > Your patch does not work with mod_rewrite (RewriteRules with the P flag).\n> \n> I would say rather: the patch has side-effects that make it unacceptable for us.\n>  You just named one of them.\n\nCould you please name the other ones? I still do think that it is the\nmod_proxy's job to rewrite the headers it should rewrite by itself.\n\nThank you!", "id": 99839, "time": "2007-02-27T00:57:29Z", "bug_id": 41698, "creation_time": "2007-02-27T00:57:29Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 41698, "text": "(In reply to comment #5)\n> Ruediger,\n> \n> (In reply to comment #4)\n> > Your patch does not work with mod_rewrite (RewriteRules with the P flag). Thus\n> > it cannot be applied to the codebase. Currently I see no way to fix this, so\n> > Nicks proposal is the only possibility currently. But maybe I am wrong and you\n> > can come up with something that also works with mod_rewrite. Thus leaving this\n> > report open as an Enhancement.\n> \n> Could you please give the Apache configuration exempt for which my patch will\n> break mod_rewrite: I will try to see if it can be fixed.\n\nIt does not break mod_rewrite, but it does not work with mod_rewrite, as after\napplying your patch things will behave differently when you do proxying via\nProxyPass or mod_rewrite\n\nTo give you a simple example:\n\nRewriteRule ^/(.*) http://backend.org/$1 [P]\n\ndoes the same as\n\nProxyPass / http://backend.org/\n\nBut using the RewriteRule instead of ProxyPass will leave the Destination header\nunchanged with your patch. The basic shortcoming of your patch is that it does\nnot apply all the transformations done to the original request URL to the\nDestination header URL, so they get out of sync. You only apply the\ntransformations caused by ProxyPass. Most of these transformations are done\nduring the translate_name hook, but some of them are also done during the fixup\nphase (mod_rewrite in directory context).", "id": 99863, "time": "2007-02-27T13:08:21Z", "creator": "rpluem@apache.org", "creation_time": "2007-02-27T13:08:21Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 99926, "time": "2007-02-28T21:51:40Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-02-28T21:51:40Z", "text": "Ruediger,\n(In reply to comment #8)\n> (In reply to comment #5)\n> > Could you please give the Apache configuration exempt for which my patch will\n> > break mod_rewrite: I will try to see if it can be fixed.\n> \n> It does not break mod_rewrite, but it does not work with mod_rewrite, as after\n> applying your patch things will behave differently when you do proxying via\n> ProxyPass or mod_rewrite\n> \n> To give you a simple example:\n> \n> RewriteRule ^/(.*) http://backend.org/$1 [P]\n> \n> does the same as\n> \n> ProxyPass / http://backend.org/\n> \n> But using the RewriteRule instead of ProxyPass will leave the Destination header\n> unchanged with your patch. The basic shortcoming of your patch is that it does\n> not apply all the transformations done to the original request URL to the\n> Destination header URL, so they get out of sync. You only apply the\n> transformations caused by ProxyPass. Most of these transformations are done\n> during the translate_name hook, but some of them are also done during the fixup\n> phase (mod_rewrite in directory context).\n\nOK, if I will enable mod_rewrite to do the same Destination rewriting and will\napply 'all the transformations done to the original request URL' -- will it have\na chance to be committed? To tell the truth, just now I have no idea what are\nthose 'all transformations' but will try to understand. May be you will be so\nkind to point me to the relevant code locations?\n\nAnd if we will turn this into the documentation issue, I will vote that\nmod_dav's documentation should note that the 'Destination' should be rewritten\nif we're living with the proxy. It is not obvious for the administrator when the\nproxied DAV is refusing to to PUT and MOVE.\n"}, {"count": 10, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #9)\n\n> \n> OK, if I will enable mod_rewrite to do the same Destination rewriting and will\n> apply 'all the transformations done to the original request URL' -- will it have\n> a chance to be committed? To tell the truth, just now I have no idea what are\n> those 'all transformations' but will try to understand. May be you will be so\n> kind to point me to the relevant code locations?\n\nAs said most of them are done in the translate_name hook and some in the fixup\nhook, but in the general I think this can happen in other hooks as well\n(possibly due to other 3rd party modules). That said I currently have no good\nstarting point how to do this properly. The only option that might open a\npossibility would be subrequests.\nAnyway some documentation references:\n\nhttp://httpd.apache.org/docs/2.2/en/developer/hooks.html\nhttp://httpd.apache.org/docs/2.2/en/developer/request.html\nhttp://www.apachetutor.org/dev/\n\n> \n> And if we will turn this into the documentation issue, I will vote that\n> mod_dav's documentation should note that the 'Destination' should be rewritten\n> if we're living with the proxy. It is not obvious for the administrator when the\n> proxied DAV is refusing to to PUT and MOVE.\n> \n\nThis is definitely a good idea. Could you provide a documentation patch?", "id": 99944, "time": "2007-03-01T13:37:55Z", "bug_id": 41698, "creation_time": "2007-03-01T13:37:55Z", "is_private": false}, {"count": 11, "tags": [], "text": "Ruediger,\n\n(In reply to comment #10)\n> As said most of them are done in the translate_name hook and some in the fixup\n> hook, but in the general I think this can happen in other hooks as well\n> (possibly due to other 3rd party modules). That said I currently have no good\n> starting point how to do this properly. The only option that might open a\n> possibility would be subrequests.\n\nI've done some hacking on the mod_rewrite and the Destination header. The full\npatch is attached, please, have a look. I've tested it, and it works for me as\nexpected.\n\n> > And if we will turn this into the documentation issue, I will vote that\n> > mod_dav's documentation should note that the 'Destination' should be rewritten\n> > if we're living with the proxy. It is not obvious for the administrator when the\n> > proxied DAV is refusing to to PUT and MOVE.\n> > \n> \n> This is definitely a good idea. Could you provide a documentation patch?\n\nI will provide it, but I need to understand if the current patch will be\naccepted, because different documentation patches should be done in the case it\nwill be accepted and otherwise.", "attachment_id": null, "bug_id": 41698, "id": 101110, "time": "2007-03-28T08:22:02Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-03-28T08:22:02Z", "is_private": false}, {"count": 12, "tags": [], "creator": "rea-asf@codelabs.ru", "attachment_id": 19832, "text": "Created attachment 19832\nNew version of 'Destination' header rewriting patch", "id": 101111, "time": "2007-03-28T08:23:37Z", "bug_id": 41698, "creation_time": "2007-03-28T08:23:37Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 41698, "text": "Created attachment 19837\nCorrected version for the 'Destination' header patch.\n\nRewrited the patch a bit. Still not sure that I am using the right source of\nthe 'dirpath' argument in the mod_rewrite part. Can someone enlight me: I just\nwant to get the URL prefix of the RewriteRule location. I mean that if\nDocumentRoot = /www\n<Directory /www/path>\nRewriteRule whatever\n</Directory>\nthen I want the 'dirpath' to be '/path/' for the mentioned RewriteRule.", "id": 101146, "time": "2007-03-29T02:29:20Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-03-29T02:29:20Z", "is_private": false, "attachment_id": 19837}, {"count": 14, "tags": [], "bug_id": 41698, "attachment_id": null, "id": 101179, "time": "2007-03-29T13:26:20Z", "creator": "rpluem@apache.org", "creation_time": "2007-03-29T13:26:20Z", "is_private": false, "text": "(In reply to comment #11)\n> Ruediger,\n> \n> (In reply to comment #10)\n> > As said most of them are done in the translate_name hook and some in the fixup\n> > hook, but in the general I think this can happen in other hooks as well\n> > (possibly due to other 3rd party modules). That said I currently have no good\n> > starting point how to do this properly. The only option that might open a\n> > possibility would be subrequests.\n> \n> I've done some hacking on the mod_rewrite and the Destination header. The full\n> patch is attached, please, have a look. I've tested it, and it works for me as\n> expected.\n\nMany thanks for your continued work on this. Sorry, I guess it is my fault that\nI did not explain the problem clearly enough. To be honest I have not looked at\nyour patch in detail now, but however perfect it may be for the mod_rewrite case\nit will not fix the problem, because mod_rewrite is only *one* module that could\nbreak. The final solution needs to deal with *any* module that adjusts the\noriginal uri during request processing, so even third party modules and modules\nthat have not been written yet.\nBut digging somewhat deeper I noticed that since 2.2.x the Destination header\ngets rewritten in the same way as the Location header. So you can configure this\nproperly via ProxyPassReverse (which you need to do anyway to get the redirects\nfixed). Of course there is still a documentation bug as the documentaion of\nProxyPassReverse fails to document this behaviour."}, {"count": 15, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 101207, "time": "2007-03-30T01:08:44Z", "creator": "rea-asf@codelabs.ru", "creation_time": "2007-03-30T01:08:44Z", "text": "Ruediger, good day.\n\n(In reply to comment #14)\n> Many thanks for your continued work on this. Sorry, I guess it is my fault that\n> I did not explain the problem clearly enough. To be honest I have not looked at\n> your patch in detail now, but however perfect it may be for the mod_rewrite case\n> it will not fix the problem, because mod_rewrite is only *one* module that could\n> break. The final solution needs to deal with *any* module that adjusts the\n> original uri during request processing, so even third party modules and modules\n> that have not been written yet.\n\nThe problem is that the modules are rewriting the URLs differently. And there is\nno generic way to tell how. For example, ap_proxy_http_request can rewrite the\n'Destination' header for the mod_proxy's own rewriting, but it will completely\nfail to do it for the mod_rewrite's rewriting: it has no knowledge about the\nrewriting rule that were used. And in the case of *any* module that uses\nmod_proxy rewriting hooks, there is absolutely no way to get the proper\nrewriting of the 'Destination' header. And, I think, it is the module's matter\nto rewrite all headers properly. Why should mod_proxy care of mod_rewrite's (or\nwhatever module's) internals?\n\n> But digging somewhat deeper I noticed that since 2.2.x the Destination header\n> gets rewritten in the same way as the Location header. So you can configure this\n> properly via ProxyPassReverse (which you need to do anyway to get the redirects\n> fixed). Of course there is still a documentation bug as the documentaion of\n> ProxyPassReverse fails to document this behaviour.\n\nYes, but it is rewritten when the request is passed from the backend server to\nthe main one, that is the ProxyPassReverse is about, isn't it? And I am talking\nabout the header rewriting on the 'main server' -> 'backend server' path.\nBecause if the backend DAV server sees the wrong 'Destination' header, it just\nrefuses to serve the request. And the funny thing: the 'Destination' rewriting\nfor the ProxyPassReverse is implemented just for the mod_proxy as well. Why it\nwill be worse to implement the 'Destination' rewriting only for two major\nmodules dealing with proxying, mod_proxy and mod_rewrite just now, and leave\nother consumers of rewriting routines in mod_proxy to get it rewritten by\nthemselves or say that they are failing in the case of DAV proxying?\n\nTalking about DAV checks: currently, the Apache's mod_dav checks\n(/modules/dav/main/util.c:204 from the snapshot httpd_20070330041747.tar.gz)\nonly for schema and port coincidence, so we can do the generic rewrite and this\ncan help for some easy cases. But is the backend DAV server is not Apache, or if\nwe're rewriting not only the host, port and protocol, but some path components,\nthen we're lost. So I see not way to implement the rewriting in a generic way,\nand, to be honest, I see no reason for it: it is up to the module's author.\n\nAny comments?"}, {"count": 16, "tags": [], "bug_id": 41698, "attachment_id": null, "is_private": false, "id": 101271, "time": "2007-03-31T12:05:05Z", "creator": "rpluem@apache.org", "creation_time": "2007-03-31T12:05:05Z", "text": "(In reply to comment #15)\n> Ruediger, good day.\n> \n> (In reply to comment #14)\n> > Many thanks for your continued work on this. Sorry, I guess it is my fault that\n> > I did not explain the problem clearly enough. To be honest I have not looked at\n> > your patch in detail now, but however perfect it may be for the mod_rewrite case\n> > it will not fix the problem, because mod_rewrite is only *one* module that could\n> > break. The final solution needs to deal with *any* module that adjusts the\n> > original uri during request processing, so even third party modules and modules\n> > that have not been written yet.\n> \n> The problem is that the modules are rewriting the URLs differently. And there is\n> no generic way to tell how. For example, ap_proxy_http_request can rewrite the\n> 'Destination' header for the mod_proxy's own rewriting, but it will completely\n> fail to do it for the mod_rewrite's rewriting: it has no knowledge about the\n> rewriting rule that were used. And in the case of *any* module that uses\n> mod_proxy rewriting hooks, there is absolutely no way to get the proper\n> rewriting of the 'Destination' header. And, I think, it is the module's matter\n> to rewrite all headers properly. Why should mod_proxy care of mod_rewrite's (or\n> whatever module's) internals?\n\nIt shouldn't. But it needs to be ensured that the URL of the Destination header\ngets rewritten in the same way as a request for this URL would be rewritten by\nwhatever module does this.\n\n> \n> > But digging somewhat deeper I noticed that since 2.2.x the Destination header\n> > gets rewritten in the same way as the Location header. So you can configure this\n> > properly via ProxyPassReverse (which you need to do anyway to get the redirects\n> > fixed). Of course there is still a documentation bug as the documentaion of\n> > ProxyPassReverse fails to document this behaviour.\n> \n> Yes, but it is rewritten when the request is passed from the backend server to\n> the main one, that is the ProxyPassReverse is about, isn't it? And I am talking\n> about the header rewriting on the 'main server' -> 'backend server' path.\n\nYou are correct. I was on the wrong track here. You need the rewrite in the\nforward (request) case not in the response case where ProxyPassReverse gets into\nthe game.\n\n> \n> Any comments?\n\nIn order to have a broader audience for this discussion it should be moved to\nthe dev list. Mind to post a summary to dev@httpd.apache.org?"}]
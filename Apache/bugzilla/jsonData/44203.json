[{"count": 0, "tags": [], "creator": "dwhitlock@tripwire.com", "text": "I configured my FopFactory to locate Hyphenation files in a directory on my\nlocal disk by invoking setHyphenationBaseURL() on my FopFactory with the\nExternalForm of a \"file:\" URL.  However, the \"Couldn't find hyphenation pattern\nen\" ERROR message is still being logged.  \n\nI did some debugging and I believe that there is a logic error in the\ntwo-argument getUserHyphenationTree() method in Hyphenator.java.  The\nUnsupportedOperationException on line 261 is thrown even when the Source has a\nvalid InputStream (that is, when the value of \"in\" assigned on line 256 is not\nnull).  The exception percolates up the call stack and the ERROR message is issued.\n\n   250          String name = key + \".hyp\";\n   251          Source source = resolver.resolve(name);\n   252          if (source != null) {\n   253              try {\n   254                  InputStream in = null;\n   255                  if (source instanceof StreamSource) {\n   256                      in = ((StreamSource) source).getInputStream();\n   257                  }\n   258                  if (in == null && source.getSystemId() != null) {\n   259                      in = new\njava.net.URL(source.getSystemId()).openStream();\n   260                  } else {\n   261                      throw new UnsupportedOperationException(\"Cannot load\nhyphenation pattern file\"\n   262                              + \" with the supplied Source object: \" +\nsource);\n   263                  }\n   264                  in = new BufferedInputStream(in);\n   265                  try {\n   266                      hTree = readHyphenationTree(in);\n   267                  } finally {\n   268                      IOUtils.closeQuietly(in);\n   269                  }\n   270                  return hTree;\n      \nI can work around this behavior by registering my own HyphenationTreeResolver\nwhich returns a Source with a null stream and a non-null system id.", "id": 112753, "attachment_id": null, "bug_id": 44203, "creation_time": "2008-01-10T21:17:03Z", "time": "2008-01-10T21:17:03Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44203, "is_private": false, "text": "\nSorry for the late reply. There does indeed seem to be a slight error in there.\n\nThis would more correctly reflect the intention, I believe:\n\n---\n                if (in == null) {\n                    if (source.getSystemId() != null) {\n                        in = new java.net.URL(source.getSystemId()).openStream();\n                    } else {\n                        throw new UnsupportedOperationException(\"Cannot load hyphenation pattern file\"\n                            + \" with the supplied Source object: \" + source);\n                    }\n                }\n---\n\nCan you confirm that this works without having to register a custom resolver? If so, I'll apply it to the trunk.", "id": 113392, "time": "2008-02-03T04:46:27Z", "creator": "adelmelle@apache.org", "creation_time": "2008-02-03T04:46:27Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 44203, "text": "Changes (finally) applied to FOP Trunk.\n\nsee: http://svn.apache.org/viewvc?rev=651853&view=rev", "id": 115914, "time": "2008-04-26T13:04:03Z", "creator": "adelmelle@apache.org", "creation_time": "2008-04-26T13:04:03Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 44203, "attachment_id": null, "is_private": false, "id": 155814, "time": "2012-04-01T06:42:26Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:42:26Z", "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed"}]
[{"count": 0, "tags": [], "bug_id": 50164, "attachment_id": null, "text": "Example; I will describe an easily reproduced configuration scheme:\n\nLogger A contains appender1, appender2.\nLogger A.B contains appender3.\n\nWhen calling B.getAppender(\"appender1\") we get a null pointer.\nTo verify this problem one can call Logger.getLogger(\"A.B\").getAllAppenders() - only appender3 is being returned.", "id": 141103, "time": "2010-10-27T11:44:38Z", "creator": "liorz1984@gmail.com", "creation_time": "2010-10-27T11:44:38Z", "is_private": false}, {"count": 1, "tags": [], "creator": "Ralph.Goers@dslextreme.com", "attachment_id": null, "id": 141108, "time": "2010-10-27T17:11:15Z", "bug_id": 50164, "creation_time": "2010-10-27T17:11:15Z", "is_private": false, "text": "This is strictly my opinion, but:\n1. The bug here is that getAppender() is a public method on a logger. It is really an internal method used by Log4j that is exposed publicly due to the way Log4j was implemented and 2. This is the correct behavior. \n\nLog4j 1.2 calls getAppender for each Appender attached to the logger. After doing so, if the logger is \"additive\" it calls delegates to the parent's logger where the same process is followed until it either reaches a logger which isn't additive or processes the root logger.  The change you are requesting would cause log4j to process appenders differently than it currently does."}, {"count": 2, "tags": [], "creator": "liorz1984@gmail.com", "text": "Well, I find this behavior handy if you have a custom appender that needs to get some parameters manually.\nFor example, I can set the root logger to contain my custom appender, and then call getAppender(\"myCustomAppender\") on each logger I register, and customize its parameters as I please.\nBut this is strictly my opinion, and for the record - I have no idea how complicated/efficient it will be to implement it, as I only shortly skimmed the relevant code segment of log4j's code.\n\n> This is strictly my opinion, but:\n> 1. The bug here is that getAppender() is a public method on a logger. It is\n> really an internal method used by Log4j that is exposed publicly due to the way\n> Log4j was implemented and 2. This is the correct behavior. \n> \n> Log4j 1.2 calls getAppender for each Appender attached to the logger. After\n> doing so, if the logger is \"additive\" it calls delegates to the parent's logger\n> where the same process is followed until it either reaches a logger which isn't\n> additive or processes the root logger.  The change you are requesting would\n> cause log4j to process appenders differently than it currently does.", "id": 141109, "time": "2010-10-27T17:39:57Z", "bug_id": 50164, "creation_time": "2010-10-27T17:39:57Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "kaszynski@gmail.com", "text": "I have class that extends java.lang.Number, and want to use something like #{x + 1} where x is instance of my class.\nBut get IllegalArgumentException.\n\njava.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key el.convert\n\tat java.util.ResourceBundle.getObject(ResourceBundle.java:325)\n\tat java.util.ResourceBundle.getString(ResourceBundle.java:285)\n\tat org.apache.el.util.MessageFactory.getArray(MessageFactory.java:67)\n\tat org.apache.el.util.MessageFactory.get(MessageFactory.java:47)\n\tat org.apache.el.lang.ELArithmetic.coerce(ELArithmetic.java:367)\n\tat org.apache.el.lang.ELArithmetic.add(ELArithmetic.java:237)\n\tat org.apache.el.parser.AstPlus.getValue(AstPlus.java:24)\n\tat org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:186)\n\tat com.sun.facelets.el.TagValueExpression.getValue(TagValueExpression.java:71)\n\nThat is caused by org.apache.el.lang.ELArithmetic.coerce(Number) method that uses very strange Number type check \n\npublic final static boolean isNumberType(final Class type) {\n        return type == (java.lang.Long.class) || type == Long.TYPE || type == (java.lang.Double.class) || type == Double.TYPE || type == (java.lang.Byte.class) || type == Byte.TYPE || type == (java.lang.Short.class) || type == Short.TYPE || type == (java.lang.Integer.class) || type == Integer.TYPE || type == (java.lang.Float.class) || type == Float.TYPE || type == (java.math.BigInteger.class) || type == (java.math.BigDecimal.class);\n    }\n\n\n\nI think this method could make use of instanceof operator so that users could provide their own Number subclasses. \n\nReferenced classes reside within jasper-el.jar, so I choose Jasper component.\n\nThe bug is inspired by http://jira.jboss.com/jira/browse/RF-1715", "id": 115372, "attachment_id": null, "bug_id": 44766, "creation_time": "2008-04-07T08:17:32Z", "time": "2008-04-07T08:17:32Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 115430, "time": "2008-04-08T14:23:38Z", "bug_id": 44766, "creation_time": "2008-04-08T14:23:38Z", "tags": [], "text": "I've committed a fix to trunk. The original code is a mystery to me too at the minute.\n\nI'll propose this for 6.0.x once people on the list have had a couple of days to mull it over."}, {"count": 2, "tags": [], "bug_id": 44766, "text": "Created attachment 21797\nCode cleanup for org.apache.el.* - removes attempts to compare Object classes against primitive types.\n\nCode cleanup for several classes in org.apache.el.**\n\nIn those classes there are places where java.lang.Class instances are compared against classes of primitive types (such as Long.TYPE, Integer.TYPE, etc.)\n\nIn the case when those java.lang.Class instances are a result of object.getClass() call (that is, obtained from an Object), they cannot be equal to a primitive type.  In such case these comparisons are no-op, producing the value of false.\n\nThis patch removes these no-op comparisons from the code.", "id": 115441, "time": "2008-04-08T18:39:52Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2008-04-08T18:39:52Z", "is_private": false, "attachment_id": 21797}, {"count": 3, "tags": [], "bug_id": 44766, "is_private": false, "text": "The patch has been applied to 6.0.x and will be in 6.0.17 onwards.", "id": 115677, "time": "2008-04-17T10:37:36Z", "creator": "markt@apache.org", "creation_time": "2008-04-17T10:37:36Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 34893, "text": "The JVM is left dirty after the unzip task throws an exception due to a \ncorrupt or otherwise improperly formatted zip file.  The JVM is left holding \nthe input file open.\n\nHere's a test case.  The build file, below, uses the subant task to capture, \nlog, and otherwise ignore the exception from unzip.  The build file creates a \nzero-length zip file (xxx.zip).  The unzip task is run on the zip and an \nexception is thrown.  The build then attempts to delete the zip and cannot do \nso because (I presume) the JVM is holding an open lock.  The only way to \nrecover, once you are in this state, that I have found is to exit the JVM.\n\nI looked through the ant source code but was unable to find the bug myself, so \nI don't have a suggested fix for this one.  Most users who run ant from the \ncommand line would not see this bug because the JVM would exit after the unzip \nexception.  However, this bug is important to users whose JVM continues to \nexecute after ant is invoked (e.g. ant users who are invoking ant from within \na greater Java or Jython program).  The open corrupt zip file can cause a \nlogjam of errors when it cannot be removed.\n\n\n\n\n\n<project default=\"default\">\n   <target name=\"do-unzip\">\n      <touch file=\"xxx.zip\"/>\n      <unzip src=\"xxx.zip\" dest=\".\"/>\n   </target>\n   <target name=\"default\">\n      <subant target=\"do-unzip\" failonerror=\"false\">\n        <fileset dir=\".\" includes=\"build.xml\"/>\n      </subant>\n      <delete file=\"xxx.zip\"/>\n   </target>\n</project>\n\n\nC:\\>%ant_home%\\bin\\ant -verbose\nApache Ant version 1.6.2 compiled on July 16 2004\nBuildfile: build.xml\nDetected Java version: 1.4 in: C:\\Program Files\\IBM\\Java142\\jre\nDetected OS: Windows 2003\nparsing buildfile C:\\build.xml with URI = file:///C:/build.xml\nProject base dir set to: C:\\\nBuild sequence for target `default' is [default]\nComplete build sequence is [default, do-unzip, ]\n\ndefault:\n   [subant] calling target do-unzip in build file C:\\build.xml\nparsing buildfile C:\\build.xml with URI = file:///C:/build.xml\nProject base dir set to: C:\\\n   [subant] Entering C:\\build.xml...\nBuild sequence for target `do-unzip' is [do-unzip]\nComplete build sequence is [do-unzip, default, ]\n\ndo-unzip:\n    [unzip] Expanding: C:\\xxx.zip into C:\\\n   [subant] Exiting C:\\build.xml.\n   [subant] Failure for target 'do-unzip' of: C:\\build.xml\n   [subant] The following error occurred while executing this line:\n   [subant] C:\\build.xml:4: Error while expanding C:\\xxx.zip\n   [delete] Deleting: C:\\xxx.zip\n\nBUILD FAILED\nC:\\build.xml:10: Unable to delete file C:\\xxx.zip\n        at org.apache.tools.ant.taskdefs.Delete.execute(Delete.java:471)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)\n        at org.apache.tools.ant.Task.perform(Task.java:364)\n        at org.apache.tools.ant.Target.execute(Target.java:341)\n        at org.apache.tools.ant.Target.performTasks(Target.java:369)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1214)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1062)\n        at org.apache.tools.ant.Main.runBuild(Main.java:673)\n        at org.apache.tools.ant.Main.startAnt(Main.java:188)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:55)\n\nTotal time: 1 second\nC:\\>", "id": 74803, "time": "2005-05-12T15:21:36Z", "creator": "gjfdh@yahoo.com", "creation_time": "2005-05-12T15:21:36Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "bodewig@apache.org", "text": "I don't see how unzip would not close the file since it is inside a finally block.\nExcept for File.close() failing, but then we'd be out of luck anyway.\n\nCould it be a timing issue?  One where Java has close the stream but your OS\nhasn't recognized this?  Does it help if you put a short <sleep> in front of\nthe delete?", "id": 74827, "time": "2005-05-12T22:02:28Z", "bug_id": 34893, "creation_time": "2005-05-12T22:02:28Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "creator": "gjfdh@yahoo.com", "text": "Sleep doesn't help.  Some automated code I have has looped on this bug, \nrepeatedly trying to delete the file, over an entire weekend with no luck.  \nAnd, if it was a timing issue, in OS code, this same bug would have shown when \ndeleting properly formatted zip files.  Assuming everything else is the same, \nthe OS wouldn't care if the zip was formatted properly or not -- a close is a \nclose.\n\nThe test build.xml file I gave above works under unix systems\n\n    [touch] Creating /tmp/xxx.zip\n    [unzip] Expanding: /tmp/xxx.zip into /tmp\n   [subant] Exiting /tmp/build.xml.\n   [subant] Failure for target 'do-unzip' of: /tmp/build.xml\n   [subant] The following error occurred while executing this line:\n   [subant] /tmp/build.xml:4: Error while expanding /tmp/xxx.zip\n   [delete] Deleting: /tmp/xxx.zip\n\nby the delete semantics are different there.  You are allowed to delete open \nfiles hence this test doesn't show if the bug exists or not on unix -- the \nsymptom is gone but the bug may or may not be there.\n\nIt is tricky.  I'm hoping that someone in the bugzilla audience may know \nsomething about zipfile or Windows or ... which can explain what's going on.", "id": 74832, "time": "2005-05-12T23:41:28Z", "bug_id": 34893, "creation_time": "2005-05-12T23:41:28Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 34893, "is_private": false, "id": 74833, "attachment_id": null, "creator": "gjfdh@yahoo.com", "creation_time": "2005-05-13T00:26:33Z", "time": "2005-05-13T00:26:33Z", "text": "I think it's a matter of finalizers.  \n\nExpand.java creates a ZipFile.  An IOException is thrown during the ZipFile \nconstructor when archive.seek() is called with a negative offset in the \npositionAtCentralDirectory method.  The instance variable, archive, is holding \na RandomAccessFile object and eventually may be garbage collected.  But until \nthen, the file remains open.  The zf.close() in Expand.java's finally is \nirrelevant here because the exception happened during the \"zf = new \nZipFile...\" statement.\n\nThe fix is to change the ZipFile so it explicitly closes \"archive\".\n\n\nNew constructor:\n    public ZipFile(File f, String encoding) throws IOException {\n        this.encoding = encoding;\n        archive = new RandomAccessFile(f, \"r\");\n        try {\n            populateFromCentralDirectory();\n            resolveLocalFileHeaderData();\n        } catch (IOException e) {\n            archive.close();\n            throw e;\n        }\n    }\n\nOld constructor (for comparision purposes):\n\n    public ZipFile(File f, String encoding) throws IOException {\n        this.encoding = encoding;\n        archive = new RandomAccessFile(f, \"r\");\n        populateFromCentralDirectory();\n        resolveLocalFileHeaderData();\n    }\n\n\n\n\nHere's some standalone test code which also exhibits the problem:\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\n\npublic class Test {\n    public static void main( String[] args ) {\n        final String fileName = \"xxx.zip\";\n        //WORKS RandomAccessFile f2 = null;\n    \ttry {\n            // Touch the file\n            new RandomAccessFile(fileName, \"rw\").close();\n\n            // Perform a seek.  This throws an IOException    \t    \n            RandomAccessFile f2 = null;\n    \t    f2 = new RandomAccessFile(fileName, \"r\");\n    \t    f2.seek(-2);\n        } catch (IOException e) {\n            e.printStackTrace();\n            /* WORKS\n            try {\n                System.out.println(\"Explictly closing the file\");\n                f2.close();\n            } catch (IOException e2) {\n                e2.printStackTrace();\n            }\n               WORKS */\n         }\n\n         final boolean rc = new File(fileName).delete();\n         System.out.println(rc);\n    }\n\nLeave the comments in the code, and the delete() method returns false.  \nUncomment the WORKS lines (and move the var declaration up) and the delete() \nmethod returns true.\n"}, {"count": 4, "attachment_id": null, "bug_id": 34893, "text": "I could have been staring at the code for ages without realizing that the\nconstructor was throwing the exception.  Thanks!\n\nA stack-trace would have been helpful.", "id": 74836, "time": "2005-05-13T09:10:29Z", "creator": "bodewig@apache.org", "creation_time": "2005-05-13T09:10:29Z", "tags": [], "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 34893, "text": "The same problem could happen in <untar> as well, <gunzip> and <bunzip2> seem\nto be save.\n\nFixed in CVS, should be fixed in 1.6.4.  If you can build Ant from sources or\npick up a nightly build of 2005-05-14 or later to confirm it has been fixed,\nthat would be great.\n", "id": 74837, "time": "2005-05-13T10:09:35Z", "creator": "bodewig@apache.org", "creation_time": "2005-05-13T10:09:35Z", "tags": [], "is_private": false}]
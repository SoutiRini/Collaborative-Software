[{"count": 0, "tags": [], "bug_id": 9215, "attachment_id": null, "id": 16353, "time": "2002-05-17T22:58:52Z", "creator": "matt73@aracnet.com", "creation_time": "2002-05-17T22:58:52Z", "is_private": false, "text": "For my work, I retreive a large amount of data as an XML String and I use the \nDocumentBuilder to parse a ByteArrayInputStream containing this XML. The XML \ncontains many CDATA sections and occasionally, depending upon the data, the \ndocument tree will have nodes that contain incorrect data. \n\nI have found that if I put a crimson.jar in front of the xercesImpl.jar in the \nclasspath, then the document tree comes out OK, but not if xercesImpl.jar is in \nfront of the crimson.jar.\n\nSince we use such a large string of XML data, trying to have you reproduce it \nmay be somewhat difficult. I was able to make a small program that does produce \nthese incorrect results.\n\nimport org.w3c.dom.*;\nimport javax.xml.parsers.*; \nimport java.io.*;\n\nclass xmltest{\n    public static void main(String args[]){\n \n        StringBuffer xml = new StringBuffer();\n        xml.append(\"<LETTERS>\");\n        for (int y=0;y<=100;y++){\n            xml.append(\"<LETTER><![CDATA[\");\n            for (int z=0;z<=y;z++) xml.append((char)((y%26)+97));\n            xml.append(\"]]></LETTER>\");\n        }\n        xml.append(\"</LETTERS>\");\n        \n        byte[] b = xml.toString().getBytes();\n        InputStream is = new ByteArrayInputStream(b);\n        Document doc = null;\n        try {\n            if (is!=null){\n                DocumentBuilderFactory docBuilderFactory = \nDocumentBuilderFactory.newInstance();\n                DocumentBuilder docBuilder = \ndocBuilderFactory.newDocumentBuilder();\n                doc = docBuilder.parse(is);\n            }\n        } catch (Exception e){}   \n          \n            \n        NodeList nodelist =  doc.getDocumentElement().getChildNodes();\n        for (int idx=0; idx<nodelist.getLength();idx++){\n            Node node = nodelist.item(idx);\n            System.out.println(node.getFirstChild().getNodeValue());\n        }\n    }\n}\n\nAt least in my testing, when the nodelist gets to the 65th item, the result for \nthe node value is incorrect. Instead of the node containing the same letter, it \nis like a concatination of many of the other nodes.\n\nThanks,\n\nMatt Havlovick\nConsolidated Freightways"}, {"count": 1, "tags": [], "creator": "keshlam@us.ibm.com", "is_private": false, "text": "If changing the parser makes the problem go away, this may be a parser bug \nrather than a Xalan bug. Have you tried running your documents through the \nXerces sample programs, to see whether they're parsing correctly?", "id": 16354, "time": "2002-05-17T23:41:27Z", "bug_id": 9215, "creation_time": "2002-05-17T23:41:27Z", "attachment_id": null}, {"count": 2, "text": "Yes, it's seems to be a parser bug. The xercesImpl.jar file appears to have \nthe problem, and because it is packaged with the xalan download, I thought it \nmight go here as a xalan bug? \n", "creator": "matt73@aracnet.com", "attachment_id": null, "id": 16365, "time": "2002-05-18T17:12:36Z", "bug_id": 9215, "creation_time": "2002-05-18T17:12:36Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 9215, "attachment_id": null, "id": 16408, "time": "2002-05-20T12:50:18Z", "creator": "keshlam@us.ibm.com", "creation_time": "2002-05-20T12:50:18Z", "is_private": false, "text": "Nothing wrong with posting it as a Xalan bug as a first guess, but if it's clear \nthat it's a Xerces malfunction posting it there instead is the only way to get \nit fixed.\n\nTransferring to the Xerces project."}]
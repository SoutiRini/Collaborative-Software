[{"count": 0, "tags": [], "bug_id": 49084, "text": "I have a Response Assertion with the following parameters:\n'Text Response', Matching Rules = 'Contains'\n\nPatterns to test:\n${new_note}\n\nValue of ${new_note} : jmeter_test_note autominttest+0421_1153_1_1@gmail.com\n${new_note} is essentialy the following string \"jmeter_test_note <EMAIL ADDRESS>\".  I've noticed that if the email address is complex (which is necessary for us as we like to create unique emails based off of timestamp), then the response assertion fails even though the response message is correct.\n\n\nThis response assertion fails. The response message does indeed contain the following text (in json format):\n\"userNote\":\"jmeter_test_note autominttest+0421_1153_1_1@gmail.com\",\n\nAnd the jmeter response assertion fails specifying that the following string wasn't found:\n/jmeter_test_note autominttest+0421_1153_1_1@gmail.com/\n\n\nThings to NOTE:\n1. Using a different email address in the ${new_note} variable works like a charm. For example if ${new_note} = jmeter_test_note simple@gmail.com , then the Response Assertion passes.\n2. This fails on jmeter 2.3.2 and 2.3.4\n3. It only works for the complex email address when I use Matching Rules = 'Substring' instead of 'Contains'", "id": 135997, "time": "2010-04-09T17:45:25Z", "creator": "sogwiz@gmail.com", "creation_time": "2010-04-09T17:45:25Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "Contains uses regular expression matching; substring does not.\n\nThe \"complex\" email address contains \"t+\" which means \"at least one 't'\".\n\nIn future, please use the JMeter User list to establish whether there really is a bug or not.", "id": 135998, "time": "2010-04-09T17:59:28Z", "bug_id": 49084, "creation_time": "2010-04-09T17:59:28Z", "is_private": false}]
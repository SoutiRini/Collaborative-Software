[{"count": 0, "tags": [], "bug_id": 59556, "attachment_id": null, "id": 190968, "time": "2016-05-14T12:15:29Z", "creator": "vincent.privat@gmail.com", "creation_time": "2016-05-14T12:15:29Z", "is_private": false, "text": "We have an Ant project that calls some Java code in build.xml as follows:\n\n    <target name=\"epsg\" depends=\"epsg-compile\">\n        <touch file=\"${epsg.output}\"/>\n        <java classname=\"BuildProjectionDefinitions\" failonerror=\"true\">\n            <sysproperty key=\"java.awt.headless\" value=\"true\"/>\n            <classpath>\n                <pathelement path=\"${base.dir}\"/>\n                <pathelement path=\"${proj-classpath}\"/>\n                <pathelement path=\"${proj-build.dir}\"/>\n            </classpath>\n            <arg value=\"${base.dir}\"/>\n        </java>\n    </target>\n\nthe code involves reflection:\n\n/**\n * Proj Factory that creates instances from a given class.\n */\npublic class ClassProjFactory implements ProjFactory {\n\n    private final Class<? extends Proj> projClass;\n\n    /**\n     * Constructs a new {@code ClassProjFactory}.\n     * @param projClass projection class\n     */\n    public ClassProjFactory(Class<? extends Proj> projClass) {\n        this.projClass = projClass;\n    }\n\n    @Override\n    public Proj createInstance() {\n        Proj proj = null;\n        try {\n            proj = projClass.getConstructor().newInstance();\n        } catch (ReflectiveOperationException e) {\n            throw new RuntimeException(e);\n        }\n        return proj;\n    }\n}\n\nThis code works fine with Java 7, 8, and Java 9 up to build 114.\n\nIt fails with builds 116 and 118 with this stacktrace:\n\njava.lang.NoClassDefFoundError: jdk/internal/reflect/ConstructorAccessorImpl\n\tat jdk.internal.misc.Unsafe.defineClass0(java.base@9-ea/Native Method)\n\tat jdk.internal.misc.Unsafe.defineClass(java.base@9-ea/Unsafe.java:1125)\n\tat jdk.internal.reflect.ClassDefiner.defineClass(java.base@9-ea/ClassDefiner.java:63)\n\tat jdk.internal.reflect.MethodAccessorGenerator$1.run(java.base@9-ea/MethodAccessorGenerator.java:400)\n\tat jdk.internal.reflect.MethodAccessorGenerator$1.run(java.base@9-ea/MethodAccessorGenerator.java:394)\n\tat java.security.AccessController.doPrivileged(java.base@9-ea/Native Method)\n\tat jdk.internal.reflect.MethodAccessorGenerator.generate(java.base@9-ea/MethodAccessorGenerator.java:393)\n\tat jdk.internal.reflect.MethodAccessorGenerator.generateConstructor(java.base@9-ea/MethodAccessorGenerator.java:92)\n\tat jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(java.base@9-ea/NativeConstructorAccessorImpl.java:55)\n\tat jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(java.base@9-ea/DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(java.base@9-ea/Constructor.java:453)\n\tat org.openstreetmap.josm.data.projection.proj.ClassProjFactory.createInstance(ClassProjFactory.java:23)\n\tat org.openstreetmap.josm.data.projection.Projections.getBaseProjection(Projections.java:220)\n\tat BuildProjectionDefinitions.doInclude(BuildProjectionDefinitions.java:159)\n\tat BuildProjectionDefinitions.buildList(BuildProjectionDefinitions.java:78)\n\tat BuildProjectionDefinitions.main(BuildProjectionDefinitions.java:52)\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@9-ea/Native Method)\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@9-ea/NativeMethodAccessorImpl.java:62)\n\tat jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@9-ea/DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(java.base@9-ea/Method.java:531)\n\tat org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:218)\n\tat org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:153)\n\tat org.apache.tools.ant.taskdefs.Java.run(Java.java:833)\n\tat org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:227)\n\tat org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:136)\n\tat org.apache.tools.ant.taskdefs.Java.execute(Java.java:109)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)\n\tat jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@9-ea/DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(java.base@9-ea/Method.java:531)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:435)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:456)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1405)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1376)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1260)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:854)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:236)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:285)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:112)\nCaused by: java.lang.ClassNotFoundException: jdk.internal.reflect.ConstructorAccessorImpl\n\tat org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1388)\n\tat org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1337)\n\tat org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1095)\n\tat java.lang.ClassLoader.loadClass(java.base@9-ea/ClassLoader.java:419)\n\t... 42 more\n\nLatest JDK 9 Early Access can be found here: https://jdk9.java.net/download/"}, {"count": 1, "tags": [], "bug_id": 59556, "attachment_id": null, "text": "Looks caused by https://bugs.openjdk.java.net/browse/JDK-8137058 fixed in b115.", "id": 191148, "time": "2016-05-21T00:52:29Z", "creator": "vincent.privat@gmail.com", "creation_time": "2016-05-21T00:52:29Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 59556, "attachment_id": null, "id": 191153, "time": "2016-05-21T14:51:16Z", "creator": "vincent.privat@gmail.com", "creation_time": "2016-05-21T14:51:16Z", "is_private": false, "text": "Solution found: add fork=\"true\" to java task."}, {"count": 3, "tags": [], "bug_id": 59556, "attachment_id": null, "id": 191164, "time": "2016-05-22T14:15:25Z", "creator": "bodewig@apache.org", "creation_time": "2016-05-22T14:15:25Z", "is_private": false, "text": "Thank you for reporting this, I'm afraid there isn't anything Ant could do. And many thanks for sharing your \"fix\"."}, {"count": 4, "tags": [], "creator": "Alan.Bateman@oracle.com", "attachment_id": null, "text": "Someone mailed me with question about the changes in JDK 9 with a stack trace very similar to this bug report.\n\nDoes AntClassLoader have any configuration that would cause it not to delegate to the system or platform class loader for types starting with \"jdk.\" in the name? The javadoc for its loadClass method hints that there might be configuration somewhere that determines whether it delegates or not.", "id": 191787, "time": "2016-06-19T14:41:56Z", "bug_id": 59556, "creation_time": "2016-06-19T14:41:56Z", "is_private": false}, {"text": "Vincent - would it be possible to paste in all steps to duplicate this? We can't see yet whether this is really a JDK 9 issue or not.", "tags": [], "creator": "Alan.Bateman@oracle.com", "attachment_id": null, "count": 5, "id": 191843, "time": "2016-06-20T13:30:55Z", "bug_id": 59556, "creation_time": "2016-06-20T13:30:55Z", "is_private": false}, {"count": 6, "tags": [], "text": "Sure, here they are:\n\n> echo $JAVA_HOME\n/opt/jdk-9\n\n> svn co -r 10255 https://josm.openstreetmap.de/svn/trunk josm_bug\n> cd josm_bug\n> ant clean dist", "attachment_id": null, "id": 191856, "creator": "vincent.privat@gmail.com", "time": "2016-06-20T21:19:35Z", "bug_id": 59556, "creation_time": "2016-06-20T21:19:35Z", "is_private": false}, {"count": 7, "tags": [], "creator": "Alan.Bateman@oracle.com", "attachment_id": null, "text": "Thanks for the reproducer. Chris Hegarty duplicated the issue and tracked it down to org.apache.tools.ant.util.JavaEnvUtils.buildJrePackages which has a hardcoded list of package prefixed for platform classes. This needs to be updated to allow jdk.** because the JDK has been using this name space since JDK 7.", "id": 191860, "time": "2016-06-21T10:12:32Z", "bug_id": 59556, "creation_time": "2016-06-21T10:12:32Z", "is_private": false}, {"count": 8, "tags": [], "text": "I have updated Chris' patch to take into account Stefan's remarks, added a test case as described in source code, and created a PR on Github:\nhttps://github.com/apache/ant/pull/19\n\nHope this helps.\nCheers,\nVincent", "is_private": false, "id": 191897, "creator": "vincent.privat@gmail.com", "time": "2016-06-22T21:03:02Z", "bug_id": 59556, "creation_time": "2016-06-22T21:03:02Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 59556, "attachment_id": null, "id": 191915, "creation_time": "2016-06-23T14:40:22Z", "time": "2016-06-23T14:40:22Z", "creator": "bodewig@apache.org", "text": "the pull request has been applied to the 1.9.x and master branches, the bug will be fixed in 1.9.8 and 1.10.0\n\nThanks!", "is_private": false}]
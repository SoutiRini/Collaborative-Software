[{"count": 0, "tags": [], "text": "On a machine under heavy load, and with restricted rights on the log-directory,\nit can happen that the rollover does not work for a number files.  Setting to 10\nfiles, I sometimes miss e.g. file.3, file.4, file.5 ...\nThis seems to be related with the way the rollover method is implemented.\n\nI added a test before renaming a file, to make sure that a temporary lock during\nthe previous operation does not cause the next operation to fail. \nAs a result, the previous test on the last file can be removed. \nWith this change, the problem is less frequent so I think it could be a good\nimprovement.\n\n  public // synchronization not necessary since doAppend is alreasy synched\n  void rollOver() {\n    File target;\n    File file;\n\n    LogLog.debug(\"rolling over count=\" + ((CountingQuietWriter) qw).getCount());\n    LogLog.debug(\"maxBackupIndex=\"+maxBackupIndex);\n\n    // If maxBackups <= 0, then there is no file renaming to be done.\n    if(maxBackupIndex > 0) {\n      // lines removed here .......\n\n      // Map {(maxBackupIndex - 1), ..., 2, 1} to {maxBackupIndex, ..., 3, 2}\n      for (int i = maxBackupIndex - 1; i >= 1; i--) {\n\tfile = new File(fileName + \".\" + i);\n\tif (file.exists()) {\n\t  target = new File(fileName + '.' + (i + 1));\n\t  LogLog.debug(\"Renaming file \" + file + \" to \" + target);\n          // lines added here ........\n\t  if (target.exists())\n\t    // Delete the destination file, to keep Windows happy.\n\t    target.delete();\n          // end lines added .......\n\t  file.renameTo(target);\n\t}\n      }\n\n      // Rename fileName to fileName.1\n      target = new File(fileName + \".\" + 1);\n\n      this.closeFile(); // keep windows happy.\n\n      file = new File(fileName);\n      LogLog.debug(\"Renaming file \" + file + \" to \" + target);\n      file.renameTo(target);\n    }\n\n    try {\n      // This will also close the file. This is OK since multiple\n      // close operations are safe.\n      this.setFile(fileName, false, bufferedIO, bufferSize);\n    }\n    catch(IOException e) {\n      LogLog.error(\"setFile(\"+fileName+\", false) call failed.\", e);\n    }\n  }", "attachment_id": null, "id": 91388, "creator": "yves.debilloez@kbc.be", "time": "2006-07-18T14:02:45Z", "bug_id": 40066, "creation_time": "2006-07-18T14:02:45Z", "is_private": false}, {"count": 1, "tags": [], "text": "Possibly duplicate of 41735.  Could you test and confirm?", "is_private": false, "bug_id": 40066, "id": 99961, "time": "2007-03-01T23:10:31Z", "creator": "carnold@apache.org", "creation_time": "2007-03-01T23:10:31Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 40066, "is_private": false, "id": 99965, "time": "2007-03-02T01:36:13Z", "creator": "yves.debilloez@kbc.be", "creation_time": "2007-03-02T01:36:13Z", "tags": [], "text": "(In reply to comment #1)\n> Possibly duplicate of 41735.  Could you test and confirm?\n\nIt does seem to be closely related enough and could be closed.\nI do not agree however with the suggested change for 41735 and do believe that \nmy suggested change could still be an improvement.\n\nI will not update 47135 as it is already marked resolved and put my comments \nhere:\n\nProblem 1: you are deleting the last index when you start rolling over.  If \nlastindex is e.g. .10, and you have no .9, there is no reason to delete .10.  \nThe test for deletion of the last file should be placed when you need this \nname for putting the .9 file only.  That is why I removed these lines and \nadded the test for the other renames.\n\nProblem 2: for all renames, you are not testing if the target file exists, as \nsuch a rename will fail when the file has e.g. read-only marks or is open in a \nnon-exclusive mode.  First deleting it avoid pending locks.  e.g. virus \nscanner might be scanning the file but without placing a lock\n\nPS: The problem I reported is that the files are not being locked by the \nsystem because no other process is accessing the files.  It could be that \nwriting to the files occurs concurrently from different threads in the \napplication all using the same logging sub-system.\n"}, {"count": 3, "tags": [], "bug_id": 40066, "attachment_id": null, "id": 99981, "time": "2007-03-02T11:21:03Z", "creator": "carnold@apache.org", "creation_time": "2007-03-02T11:21:03Z", "is_private": false, "text": "(In reply to comment #2)\n>It does seem to be closely related enough and could be closed.\n>I do not agree however with the suggested change for 41735 and do believe that \n>my suggested change could still be an improvement.\n\nI'd only close this bug as duplicate of 41735 if the fix for 41735 fixed your problem.  On first read, I \nwas interpreting your problem as that you were losing logging data due to heavy load, not that there \nwere gaps in the file names.  I think the fix for 41735 may eliminate data loss where a rename or delete \nfails due to some side effect of a heavy load since it will stop subsequent renames and closing of the \nactive log file.  However, it could still result in a gap of file names above the locked file which should \nonly be a minor cosmetic defect.\n\nIf you see a defect in the fix for 47135 (svn diff -r513637:513638) where it does not address the issues \nraised in 47135 or introduces an undesirable side effect, please comment on the bug report for 41735 \nand reopen it if you think it is justified.  If that patch doesn't fix the problem is this bug report, then we \nneed to keep this bug open and figure out what is going on in your case.  If an eventual patch for this \nbug ends up reverting part of the 47135 patch (while still keeping the behavior improvements), then \nthat is fine.\n\n\n> Problem 1: you are deleting the last index when you start rolling over.  If \n> lastindex is e.g. .10, and you have no .9, there is no reason to delete .10.  \n> The test for deletion of the last file should be placed when you need this \n> name for putting the .9 file only.  That is why I removed these lines and \n> added the test for the other renames.\n\nThe bug 41735 patch tried to make the minimal changes necessary to eliminate the data loss problem.  \nIn particular, it tried to make the code path obviously identical to the existing code when the delete and \nrenames succeeded.  I'm extremely hesitant to make any substantial change to a successful code path \nwithout a clearly defined and substantial benefit.  I don't think that filling in the gaps in a partial \nsequence is substantial enough. \n\n> Problem 2: for all renames, you are not testing if the target file exists, as \n> such a rename will fail when the file has e.g. read-only marks or is open in a \n> non-exclusive mode.  First deleting it avoid pending locks.  e.g. virus \n> scanner might be scanning the file but without placing a lock\n\nThe 41735 fix will only attempt to rename a file after having successfully renaming or deleting the \ntarget file if it had existed.  Another process or thread could recreate the target file, but then the \nrename would fail and you'd defer the rollover and end up with foreign target file in the train and a \nlarger than normal file corresponding to the active log file.\n\n> PS: The problem I reported is that the files are not being locked by the \n> system because no other process is accessing the files.  It could be that \n> writing to the files occurs concurrently from different threads in the \n> application all using the same logging sub-system.\n\nThere are inheritent suseptibilities in the current RFA's.  The MultiFileAppender effort tried to address \nthe same use cases without need to do file renames or preemptive closings.  I'd like to get back to that \nand finish it off, but haven't had the time.  I'm hesitant to making any changes to the existing RFA's \nwhere the problem isn't clearly identified and the code changes are low-risk.  In this case, it isn't clear \nwhat the underlying problem is and the code modifications are not obviously low-risk.\n"}, {"count": 4, "tags": [], "creator": "yves.debilloez@kbc.be", "attachment_id": null, "text": "(In reply to comment #3)\nI tested the change for bug 47135.  It is a substatial improvement.", "id": 100025, "time": "2007-03-04T23:38:19Z", "bug_id": 40066, "creation_time": "2007-03-04T23:38:19Z", "is_private": false}]
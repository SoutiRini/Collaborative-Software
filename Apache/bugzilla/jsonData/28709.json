[{"count": 0, "tags": [], "creator": "blumm@apache.org", "attachment_id": null, "is_private": false, "id": 56690, "time": "2004-04-30T10:49:59Z", "bug_id": 28709, "creation_time": "2004-04-30T10:49:59Z", "text": "This is the of the code sequence executed:\n\n  javax.servlet.http.HttpServletRequestWrapper.getSession(true);\n  // here, the debugger shows that the session is valid\n  javax.servlet.http.HttpSession.invalidate();\n  // here the debugger shows that the session has been invalidated\n  javax.servlet.http.HttpServletRequestWrapper.getRequest();\n  javax.servlet.http.HttpServletRequest.isRequestedSessionIdValid();\n  // this call returns true, which is not expected!"}, {"count": 1, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 56693, "time": "2004-04-30T13:38:43Z", "bug_id": 28709, "creation_time": "2004-04-30T13:38:43Z", "text": "Cool, let's start.\nI disagree with that, please try the latest release."}, {"count": 2, "attachment_id": 11576, "bug_id": 28709, "is_private": false, "id": 57540, "time": "2004-05-17T11:19:37Z", "creator": "blumm@apache.org", "creation_time": "2004-05-17T11:19:37Z", "tags": [], "text": "Created attachment 11576\nTest webapplications for the reproduction of the problem described in the bug report."}, {"count": 3, "tags": [], "creator": "blumm@apache.org", "is_private": false, "text": "I still think there is a bug in Tomcat 5.x. BTW I wrote two test\nweb-applications, which will reproduce the problem for you. I have attached code   \nfor you. Please take a look at the readme for some instructions about\ninstallation and execution.\n\nHere some comments about the generell idea of the test:\n\nServlet 1 includes Servlet2 in a cross context environment. It gets a dispatcher\nby \"coServletContext.getRequestDispatcher(coServletPath)\".\nServlet2 gets a new session on the first request and invalidates this session by\n\"httpSession.invalidate()\" and tests the invalidation by\n\"httpServletRequestWrapper.isRequestedSessionIdValid()\" on the second request.\n\"isRequestedSessionIdValid()\" returns \"true\" instead of \"false\", which is a bug\n from my point of view.\n\nWhat do you think? Thank you in advance for your help.", "id": 57541, "time": "2004-05-17T11:40:22Z", "bug_id": 28709, "creation_time": "2004-05-17T11:40:22Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 28709, "attachment_id": null, "id": 58144, "time": "2004-05-26T17:10:55Z", "creator": "yoavs@computer.org", "creation_time": "2004-05-26T17:10:55Z", "is_private": false, "text": "The Servlet Specification states (SRV.7.3) that the session is withint the \nscope of the servlet context and cannot be shared.  Accordingly I don't think \nthe semantics of invalidation and the isRequestedSessionIdValid call are clear \nwhen doing cross-context includes.\n\nLooking at the code, it should be fine.  From CoyoteRequest:\n/**\n     * Return <code>true</code> if the session identifier included in this\n     * request identifies a valid session.\n     */\n    public boolean isRequestedSessionIdValid() {\n\n        if (requestedSessionId == null)\n            return (false);\n        if (context == null)\n            return (false);\n        Manager manager = context.getManager();\n        if (manager == null)\n            return (false);\n        Session session = null;\n        try {\n            session = manager.findSession(requestedSessionId);\n        } catch (IOException e) {\n            session = null;\n        }\n        if ((session != null) && session.isValid())\n            return (true);\n        else\n            return (false);\n    }\n\nStandardSession#invalidate calls StandardSession#expire:\npublic void expire(boolean notify) {\n\n        // Mark this session as \"being expired\" if needed\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            // Notify interested application event listeners\n            // FIXME - Assumes we call listeners in reverse order\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        log(sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            // Remove this session from our manager's active sessions\n            if (manager != null)\n                manager.remove(this);\n\n            // Notify interested session event listeners\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            // We have completed expire of this session\n            expiring = false;\n\n            // Unbind any objects associated with this session\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n\nBecause of the Manager#remove call, the findSession call in CoyoteRequest will \nreturn null, and the isRequestedSessionIdValid method will return false."}, {"count": 5, "tags": [], "text": "The excerpts from the code base look fine for me too. What makes me wonder is\nthat if the test-web-application uses\n\"coServletContext.getNamedDispatcher(coServlet)\"\ninstead of\n\"coServletContext.getRequestDispatcher(coServletPath)\"\nthen everything works as expected. I think there must be a consistent behavior.\nDid you run the test code that I have provided with the attachments? Is the bug\nin test code? \n\n\n\n\n ", "attachment_id": null, "id": 58842, "creation_time": "2004-06-07T15:41:18Z", "time": "2004-06-07T15:41:18Z", "creator": "blumm@apache.org", "bug_id": 28709, "is_private": false}, {"count": 6, "tags": [], "text": "The request wrapper used by the regular RD doesn't override this method (while\nthe named RD won't wrap).\n\nNo matter how I look at this, the answer to this issue remains the same: sorry,\nbut we don't care about it.", "attachment_id": null, "id": 58849, "creation_time": "2004-06-07T17:02:39Z", "time": "2004-06-07T17:02:39Z", "creator": "remm@apache.org", "bug_id": 28709, "is_private": false}, {"count": 7, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 58851, "time": "2004-06-07T17:31:49Z", "bug_id": 28709, "creation_time": "2004-06-07T17:31:49Z", "text": "Ok, actually, my first sentence is a problem: not wrapping for named forwards\nwould mean trouble with cross context and session handling. That's a separate\nissue, but will explain the different session behavior in that case (you're\ngoing to interact with the session from the first context, which is a problem).\nThis is the only case, because named includes will wrap."}, {"count": 8, "attachment_id": null, "bug_id": 28709, "is_private": false, "id": 58880, "time": "2004-06-08T16:19:53Z", "creator": "blumm@apache.org", "creation_time": "2004-06-08T16:19:53Z", "tags": [], "text": "SRV.7.3(from Version 2.4) says:\n...\nTo illustrate this requirement with an example: if a servlet uses the\nRequestDispatcher to call a servlet in another Web application, any sessions\ncreated for and visible to the servlet being called must be different from those\nvisible to the calling servlet.\n\nBy the way the spec. does not distinguish at this point between a named request\ndispatcher and a regular one.\n\nWhat do you exactly mean by saying \"you're going to interact with the session\nfrom the first context, which is a problem\" ? Does not the Spec. cover the\nrequest wrapper in an consistent manner with SRV.7.3 ?"}, {"count": 9, "attachment_id": null, "bug_id": 28709, "is_private": false, "id": 60802, "time": "2004-07-19T12:32:29Z", "creator": "remm@apache.org", "creation_time": "2004-07-19T12:32:29Z", "tags": [], "text": "The issue affecting named dispatcher has been fixed (no wrapping was done\npreviously, so cross context sessions couldn't be handled properly). For the\nrest, we won't fix it for now."}, {"count": 10, "tags": [], "creator": "jan.luehe@sun.com", "is_private": false, "text": "Fixed by implementing\norg.apache.catalina.core.ApplicationHttpRequest.isRequestedSessionIdValid() to\ncheck the request's session id (if any) against the session manager of the\ncontext associated with the ApplicationHttpRequest (wrapper), which may be\ndifferent from the context of the nested request (it will be different if the\nrequest was dispatched into a foreign context).", "id": 68131, "time": "2004-12-08T20:02:16Z", "bug_id": 28709, "creation_time": "2004-12-08T20:02:16Z", "attachment_id": null}, {"count": 11, "attachment_id": null, "bug_id": 28709, "is_private": false, "id": 68132, "time": "2004-12-08T20:02:39Z", "creator": "jan.luehe@sun.com", "creation_time": "2004-12-08T20:02:39Z", "tags": [], "text": "Fixed by implementing\norg.apache.catalina.core.ApplicationHttpRequest.isRequestedSessionIdValid() to\ncheck the request's session id (if any) against the session manager of the\ncontext associated with the ApplicationHttpRequest (wrapper), which may be\ndifferent from the context of the nested request (it will be different if the\nrequest was dispatched into a foreign context)."}, {"count": 12, "tags": [], "bug_id": 28709, "attachment_id": null, "id": 70118, "time": "2005-01-26T20:17:40Z", "creator": "plynch@apache.org", "creation_time": "2005-01-26T20:17:40Z", "is_private": false, "text": "So this is stated as fixed...\n\nWhat file revision and tomcat release is the fix in?"}, {"count": 13, "tags": [], "text": "Fix went into revision 1.22 of\njakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/core/ApplicationHttpRequest.java,\nwhich was tagged with TOMCAT_5_5_6.", "attachment_id": null, "id": 70233, "creator": "jan.luehe@sun.com", "time": "2005-01-28T20:47:09Z", "bug_id": 28709, "creation_time": "2005-01-28T20:47:09Z", "is_private": false}]
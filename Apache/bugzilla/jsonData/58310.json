[{"count": 0, "tags": [], "creator": "lars.holmberg@redshirt.se", "attachment_id": null, "text": "Example:\n\n./jmeter -Gfirst.properties -Gname=value -Gsecond.properties (...)\n\nExpected result:\n\nBoth properties from first.properties, the \"name\" property and second.properties should be loaded & sent to load gen servers.\n\nActual result:\n\nOnly properties from second.properties is loaded.\n\nLooking at the code (JMeter.java), this is no surprise:\n\ncase JMETER_GLOBAL_PROP:\n    if (value.length() > 0) { // Set it\n        log.info(\"Setting Global property: \" + name + \"=\" + value);\n        remoteProps.setProperty(name, value);\n    } else {\n        File propFile = new File(name);\n        if (propFile.canRead()) {\n            log.info(\"Setting Global properties from the file \"+name);\n            try {\n                fis = new FileInputStream(propFile);\n                remoteProps.load(fis); // THIS WILL OVERWRITE ANY PREVIOUSLY LOADED PROPERTIES\n            } catch\n...\n\nI can create a patch if you want me to. A long time ago there was a similar issue for \"normal\" (non-distributed) property loading but it was fixed (33920).", "id": 184878, "time": "2015-08-31T15:10:07Z", "bug_id": 58310, "creation_time": "2015-08-31T15:10:07Z", "is_private": false}, {"count": 1, "tags": [], "creator": "lars.holmberg@redshirt.se", "attachment_id": null, "text": "Verified that the problem is still there in latest nightly.", "id": 184879, "time": "2015-08-31T15:14:01Z", "bug_id": 58310, "creation_time": "2015-08-31T15:14:01Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 58310, "text": "Hello,\nCould you provide more details on your use case ?\nFor now current behaviour does not hurt me.\n\nThanks", "id": 185607, "time": "2015-10-03T20:46:54Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2015-10-03T20:46:54Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "text": "Note: there is a simple work-round - just concatenate the files into a new file before starting the test.", "attachment_id": null, "id": 185615, "creator": "sebb@apache.org", "time": "2015-10-04T09:07:03Z", "bug_id": 58310, "creation_time": "2015-10-04T09:07:03Z", "is_private": false}, {"count": 4, "tags": [], "creator": "lars.holmberg@redshirt.se", "attachment_id": null, "text": "Phillipe, primarily I want to be able to specify more than one properties file and have it work the same way as the -q parameter.\n\nSebb, yes that works. Giving all properties as name-value pairs also works. But the feature is still broken, and in a very unpredictable way. \n\nFor example, \"... -Gsome.properties -Gaproperty=value\" will work just fine (creating aproperty property, and overriding it if it already exists), but reversing the order of the parameters will discard the \"aproperty\" property (even if it does not exist in some.properties)", "id": 185617, "time": "2015-10-04T16:07:53Z", "bug_id": 58310, "creation_time": "2015-10-04T16:07:53Z", "is_private": false}, {"count": 5, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "(In reply to Lars H from comment #0)\n>                 remoteProps.load(fis); // THIS WILL OVERWRITE ANY PREVIOUSLY\n> LOADED PROPERTIES\n\nThat is _not_ true; the load method *adds* properties to the list, at least when using Mac Java 6 and Oracle Java 7,8,9.\n\nThe following demo code shows this:\n\n        Properties p = new Properties();\n        p.load(new StringReader(\"a=1\"));\n        p.load(new StringReader(\"b=2\"));\n        p.list(System.out);\n\nThe output should be (order may vary):\n\n-- listing properties --\nb=2\na=1", "id": 187017, "time": "2015-12-17T22:13:11Z", "bug_id": 58310, "creation_time": "2015-12-17T22:13:11Z", "is_private": false}]
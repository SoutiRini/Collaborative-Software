[{"count": 0, "tags": [], "bug_id": 34526, "attachment_id": null, "is_private": false, "id": 73828, "time": "2005-04-19T19:31:03Z", "creator": "mike_bos@mail.com", "creation_time": "2005-04-19T19:31:03Z", "text": "Brief summary: if a request is compressed (Content-Encoding: gzip), has\nContent-Length corresponding to the compressed length, and if Apache's\nmod_deflate is configured to decompress such requests, then the servlet request\ninput stream signals EOF at Content-Length bytes of decompressed content instead\nof returning the entire decompressed content.\n\nTo reproduce:\n- Enable Apache mod_deflate request decompression:\n  <Location /servlet/MyTest>\n    SetInputFilter DEFLATE\n  </Location>\n- Send a compressed request, e.g. compress a file with gzip and send it with cURL:\n  gzip -9c some_file | curl -H 'Content-Encoding: gzip' --data-binary @-\nhttp://host/servlet/MyTest\n\nThe servlet will get truncated data.\n\nIt's ok if the servlet will see Content-Length different from the actual number\nof bytes in the request stream, servlets shouldn't trust Content-Length anyway,\nand under chunked encoding Content-Length is not there at all, so IMHO useless\nContent-Length value is a nonissue.\n\nThe only workaround so far is to write a servlet filter to decompress requests,\nbut that puts additional load on Tomcat and complicates web app configuration.\n\nPossibly related HTTP server bug:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=23287\nSee my comment there (Michael Klepikov) for additional details."}, {"count": 1, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 73854, "time": "2005-04-20T10:54:12Z", "creator": "hgomez@apache.org", "creation_time": "2005-04-20T10:54:12Z", "is_private": false, "text": "I'm using such settings in XML-RPC system, using Apache 2.x, mod_jk 1.2.x and\ntomcat 3.3.2 (so with a not too old jtc) and didn't have problem if the provided\ncontent lenght on the client side is set to -1.\n\nIn such case, JTC/Tomcat will be able to get the complete data stream.\n\nTake a look at the XML-RPC HEAD CommonsXmlRpcTransport.java, where you could see\nthe following code :\n\n        \tByteArrayOutputStream lBo = new ByteArrayOutputStream();\n        \tGZIPOutputStream lGzo = new GZIPOutputStream(lBo);\n        \tlGzo.write(request);\n        \tlGzo.finish();        \t\n        \tlGzo.close();        \t\n        \tbyte[] lArray = lBo.toByteArray();\n        \tmethod.setRequestBody(new ByteArrayInputStream(lArray));\n        \tmethod.setRequestContentLength(-1);\n"}, {"count": 2, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 73913, "time": "2005-04-21T18:16:37Z", "creator": "mike_bos@mail.com", "creation_time": "2005-04-21T18:16:37Z", "is_private": false, "text": "To Henri Gomez: I have no control over Content-Length that the client sends. The\nC++ program that sends the request uses Internet Explorer API (URLMON), it sets\nContent-Length to the actual number of bytes in the request content, and there\nis no way to change it."}, {"count": 3, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 76937, "time": "2005-07-03T10:44:32Z", "creator": "mturk@apache.org", "creation_time": "2005-07-03T10:44:32Z", "is_private": false, "text": "This is more your client problem then mod_jk one.\nThe Servlet spec is explicit about content-length, and we can\nnot cheat on that."}, {"count": 4, "tags": [], "text": "The client sends correct Content-Length equal to the compressed request size,\nthat's what it's supposed to be per HTTP 1.1, and I don't see where the client\nhas a problem here. Apache correctly reads the request, and mod_deflate\ncorrectly decompresses it, only the servlet receives truncated content. Where\ndoes the servlet spec imply that behaviour? The original Content-Length header\nvalue cannot be trusted after passing through HTTP Server, specifically because\nfilters like mod_deflate may render it invalid.\n\nSetting Content-Length to -1 might work as a workaround, but my point was that\nit should also work with a correct positive Content-Length.\n\nIf I don't use mod_deflate's decompression and decompress with a servlet filter\ninstead, the servlet gets complete content, while the Content-Length header of\ncourse remains with the original value, which is functionality-wise, but I would\nmuch rather use mod_deflate's decompression for scalability and load\ndistribution reasons, and mod_deflate is likely faster than GZIPInputStream.\n\nI initially thought it might be a mod_deflate's problem, but an HTTP Server\nperson (Andr\u00e9 Malo) said he is certain it should be fixed in mod_jk. I suppose\nhe implied that instead of trusting Content-Length, there is another more\nreliable way to determine end of request stream from Apache. Please refer to the\nHTTP Server bug linked in the original description.", "attachment_id": null, "id": 77135, "creator": "mike_bos@mail.com", "time": "2005-07-09T06:08:16Z", "bug_id": 34526, "creation_time": "2005-07-09T06:08:16Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 77145, "time": "2005-07-09T22:37:54Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-07-09T22:37:54Z", "is_private": false, "text": "This is clearly a mod_deflate problem.  If mod_deflate would only set the \nclength field in the request_rec to the correct uncompressed value then mod_jk \nwill work correctly.  Otherwise, mod_jk has no way of knowing that mod_deflate \nis going to be changing the number of bytes available on input."}, {"count": 6, "tags": [], "text": "As a user of mod_deflate and mod_jk, I'll play stupid for a moment:\n\nAs long as the client Content-Length is either not present or correct, users of\nthese two software components don't care who is at fault, mod_jk or mod_deflate\n-- we just want it fixed.\n\nThat said, I understand that this is an interface between development groups in\naddition to between software components, so I quite understand a short game of\n\"hot potato\".  All the same, it would be best if mod_jk and mod_deflate folk\ncould work this out sooner rather than later...", "attachment_id": null, "id": 77146, "creator": "jessh@ptc.com", "time": "2005-07-09T23:37:58Z", "bug_id": 34526, "creation_time": "2005-07-09T23:37:58Z", "is_private": false}, {"count": 7, "tags": [], "creator": "mike_bos@mail.com", "attachment_id": null, "id": 77171, "time": "2005-07-11T03:44:56Z", "bug_id": 34526, "creation_time": "2005-07-11T03:44:56Z", "is_private": false, "text": "To william.barker@wilshire.com: by nature of compressed content, mod_deflate\ncannot know decompressed length in advance when it just begins streaming the\ncontent to mod_jk. There has to be some kind of an end of stream indicator\nindependent of any lengths known at the beginning of the exchange. Maybe it\nalready exists, I do not know. Either way I fully agree with Jess Holle: it\nwould be in everyone's best interest if mod_jk people discuss it directly with\nthe HTTP Server people... Thanks."}, {"count": 8, "tags": [], "text": "It looks like the AJP protocol cannot stream request bodies of unknown length. \nThere are two cases where this might happen: for a chunked request body, or if\nthere are request input filters in use such as mod_deflate.\n\nThe correct thing to do here in mod_jk is:\n\n if (r->proto_input_filters != r->input_filters\n     || apr_table_get(r->headers_in, \"Transfer-Encoding\")) {\n     /* refuse to handle the body */\n }", "attachment_id": null, "id": 78284, "creator": "jorton@redhat.com", "time": "2005-08-09T15:41:25Z", "bug_id": 34526, "creation_time": "2005-08-09T15:41:25Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 34526, "attachment_id": null, "is_private": false, "id": 78285, "time": "2005-08-09T15:48:25Z", "creator": "jessh@ptc.com", "creation_time": "2005-08-09T15:48:25Z", "text": "Does this mean mod_jk will simply not accept mod_deflate'd or chunked uploads? \nIf so, that would buy us nothing..."}, {"count": 10, "text": "(In reply to comment #8)\n> It looks like the AJP protocol cannot stream request bodies of unknown \nlength. \n\nThe AJP protocol handles request bodies of unknown length perfectly well.  It \ndoesn't handle rogue modules like mod_deflate lying to it.", "creator": "william.barker@wilshire.com", "is_private": false, "id": 78290, "time": "2005-08-09T17:04:35Z", "bug_id": 34526, "creation_time": "2005-08-09T17:04:35Z", "tags": [], "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 78292, "time": "2005-08-09T17:12:59Z", "creator": "jessh@ptc.com", "creation_time": "2005-08-09T17:12:59Z", "is_private": false, "text": "So does this really mean that mod_deflate should simply not give a\ncontent-length when it does not know it?  That would seem (quite) reasonable\n(and correct)."}, {"count": 12, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 79153, "time": "2005-08-30T09:38:13Z", "creator": "nd@perlig.de", "creation_time": "2005-08-30T09:38:13Z", "is_private": false, "text": "(In reply to comment #11)\n> So does this really mean that mod_deflate should simply not give a\n> content-length when it does not know it?  That would seem (quite) reasonable\n> (and correct).\n\nmod_deflate cannot change the content length, because\n\n(a) it doesn not know it before uncompressing the whole stream. It had to buffer\nthe whole inflated content to determine a new length, which is not going to happen.\n(b) Anyway, the content length reflects the value sent by the client.\nmod_deflate is not the authority to change it.\n\nNote that CGIs are also broken by this behaviour, but there's no much we can do\nfor it by now. Someone might write some day a file bucket type, so we can\ninflate the content into a file.\n\nMy conclusion is, that the ajp handler just should unset the content length if\nthe protocol depends on it (meaning \"CL reflects the actual content sent to the\nservlet or be unset at all\")."}, {"count": 13, "tags": [], "bug_id": 34526, "attachment_id": null, "id": 112470, "time": "2008-01-03T10:44:28Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-01-03T10:44:28Z", "is_private": false, "text": "There is a fix for mod_deflate in httpd 2.2.6+. I'm now investigating, what we\nneed to do to make it work with mod_jk.\n\n1) Your example won't work, since mod_deflate can't inflate compressed content\nwhich uses FLaGs in the sense of RFC 1952. If I use gzip like you did to\ncompress a file, it includes the file name as a flag and mod_deflate can not\nhandle that. A better test case is\n\ncat myfile | gzip -9c | curl ...\n\n2) In mod_jk we extract the Content-Length early in the content handler, which\nis before the filter is running. So we still get the incorrect length. Let's\nsee, if we can do someting better about that..."}, {"count": 14, "tags": [], "bug_id": 34526, "attachment_id": null, "is_private": false, "id": 180126, "time": "2015-01-02T15:21:36Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-01-02T15:21:36Z", "text": "The situation has been improved in r1649064.\n\nUnfortunately it doesn't seem to be possible to detect request body inflation by mod_deflate before mod_jk actually starts to read the body. Because it needs to send the request headers to the backend before reading the body, there's no easy way to detect the situation. We would need to implement some buffering and change the flow of processing in mod_jk quite a lot.\n\nI decided to implement a workaround: you can set the new Apache environment variable JK_IGNORE_CL instead, to tell mod_jk that it should ignore an existing Content-Length request header.\n\nAll body data that can be read from the web server will then be send to the backend. No Content-Length header will be send to the backend.\n\nThe environment variable can be set using mod_setenvif or mod_rewrite as usual. You should choose conditions for setting the variable that trigger for the requests, for which you have configured request body inflation by mod_deflate.\n\nSetting the variable for other requests as well should work, but might lead to less efficient behavior and maybe also bugs we are not yet aware of."}]
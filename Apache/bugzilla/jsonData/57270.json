[{"count": 0, "tags": [], "text": "Created attachment 32230\nDemo1.xslx\n\npackage ExcelCompare;\n\n\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n\n\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.IndexedColors;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\n/**\n * Sample Java program to read and write Excel file in Java using Apache POI\n *\n */\npublic class MainClassExcelCompare {\n\n\t\n\t\n\t\n    public static void main(String[] args) {\n\n        try {\n        \t\n        \t\n             int temp;\n        \t\n            File excel1 = new File(\"C://Users/ckothakapax076037/Desktop/Demo1.xlsx\");\n            FileInputStream fis1 = new FileInputStream(excel1);\n           XSSFWorkbook book1 = new XSSFWorkbook(fis1);\n            XSSFSheet sheet1 = book1.getSheetAt(0);\n            //org.apache.poi.ss.usermodel.Workbook book1 = WorkbookFactory.create(fis1);\n           // org.apache.poi.ss.usermodel.Sheet sheet1 = book1.getSheetAt(0);\n            \n            File excel2 = new File(\"C://Users/ckothakapax076037/Desktop/Demo2.xlsx\");\n            FileInputStream fis2 = new FileInputStream(excel2);\n          XSSFWorkbook book2 = new XSSFWorkbook(fis2);\n          XSSFSheet sheet2 = book2.getSheetAt(0);\n           // org.apache.poi.ss.usermodel.Workbook book2 = WorkbookFactory.create(fis2);\n            // org.apache.poi.ss.usermodel.Sheet sheet2 = book2.getSheetAt(0);\n       \n            WriteExcel obj1 = new WriteExcel();\n            obj1.setOutputFile(\"C://Users/ckothakapax076037/Desktop/Result.xlsx\");\n           \n          //Get iterator to all the rows in current sheet\n            Iterator<Row> itr1 = sheet1.iterator();\n            Iterator<Row> itr2 = sheet2.iterator();\n          \n            // Iterating through all cells row by row\n            while (itr1.hasNext()&&itr2.hasNext()) {\n            \t\n            \ttemp=0;\n                Row row1 = itr1.next();\n                Row row2 = itr2.next();\n               \n  \n                //Get iterator to all cells of current row\n                Iterator<Cell> cellIterator1 = row1.cellIterator();\n                Iterator<Cell> cellIterator2 = row2.cellIterator();\n                \n                CellStyle style = book1.createCellStyle();\n                style = book1.createCellStyle();\n                style.setFillForegroundColor(IndexedColors.RED.getIndex());\n                style.setFillPattern(CellStyle.SOLID_FOREGROUND);\n                while (cellIterator1.hasNext()&&cellIterator2.hasNext()) {\n\n                    Cell cell1 = cellIterator1.next();\n                    Cell cell2 = cellIterator2.next();\n                    switch (cell1.getCellType()) {\n                    case Cell.CELL_TYPE_STRING:\n                        System.out.print(cell1.getStringCellValue() + \"\\t\");\n                        System.out.print(cell2.getStringCellValue() + \"\\t\");\n                        if(!cell1.getStringCellValue().equalsIgnoreCase(cell2.getStringCellValue()))\n                        {\n                          temp++;\n                          cell1.setCellStyle(style);\n                        }\n                        break;\n                    case Cell.CELL_TYPE_NUMERIC:\n                        System.out.print(cell1.getNumericCellValue() + \"\\t\");\n                        System.out.print(cell2.getNumericCellValue() + \"\\t\");\n                        if(cell1.getNumericCellValue()!=cell2.getNumericCellValue())\n                        {\n                           temp++;\n                           cell1.setCellStyle(style);\n                        }\n                        break;\n                    case Cell.CELL_TYPE_BOOLEAN:\n                        System.out.print(cell1.getBooleanCellValue() + \"\\t\");\n                        System.out.print(cell2.getBooleanCellValue() + \"\\t\");\n                        break;\n                    case Cell.CELL_TYPE_BLANK:\n                    \t  System.out.print(cell1.getNumericCellValue() + \"\\t\");\n                    \t  System.out.print(cell2.getNumericCellValue() + \"\\t\");\n                          if(cell2.getStringCellValue()!=\" \")\n                          {\n                           temp++;\n                           cell1.setCellStyle(style);\n                          }\n                    break;  \n                    \n                    default:\n                    \t\n                  }\n                   \n                } \n                System.out.print(\"\\n\");\n                System.out.print(\"Flag value:\"+temp);\n                System.out.print(\"\\n\");\n                if (temp>=1)\n                 {\n                  obj1.addRow(cellIterator1,cellIterator2);\n                 }\n              }\n               \n            book1.close();\n            fis1.close();\n            book2.close();\n            fis2.close();\n            obj1.closerActivity();\n            \n            \n              } catch (FileNotFoundException fe) {\n                  fe.printStackTrace();\n              } catch (IOException ie) {\n                  ie.printStackTrace();\n              } catch (Exception ee) {\n                  ee.printStackTrace();\n              }\n    \n        } \n        \n    }\n\n\n\n/* sub class*/\n\n\n\npackage ExcelCompare;\n\n\n\n\nimport java.io.FileOutputStream;\nimport java.util.Iterator;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.xssf.usermodel.XSSFRow;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\npublic class WriteExcel {\n\n\t\n\n\t\nprivate static String OutputFile;\nprivate static XSSFWorkbook myWorkBook = new XSSFWorkbook();\nprivate static XSSFSheet mySheet = myWorkBook.createSheet(\"Report\");\n\npublic static int i=0;\n\n\npublic void setOutputFile(String OutputFile1) {\n   \n    OutputFile = OutputFile1;\n    \n    \n   }\n\n  public void addRow(Iterator<Cell> cellIterator1,Iterator<Cell> cellIterator2) {\n\t\n\t  try {\n\t\t\n\t\t \n\t    XSSFRow row = mySheet.createRow(i++);\n\t\n\t    while (cellIterator1.hasNext()) {\n\t    \t\n              int j=0;\n              Cell cell1 = cellIterator1.next();\n              \n         switch (cell1.getCellType()) {\n        \n            case Cell.CELL_TYPE_STRING:\n            \t\n            \tSystem.out.print(cell1.getStringCellValue() + \"\\t\");\n            \trow.createCell(j).setCellValue(cell1.getStringCellValue());\n            \t\n            break;\n            case Cell.CELL_TYPE_NUMERIC:\n            \t  System.out.print(cell1.getStringCellValue() + \"\\t\");\n            \t  row.createCell(j).setCellValue(cell1.getNumericCellValue());\n            break; \n            case Cell.CELL_TYPE_BLANK:\n            \t  System.out.print(cell1.getStringCellValue() + \"\\t\");\n                  row.createCell(j).setCellValue(cell1.getStringCellValue());\n            break; \n            default:\n            \t  System.out.print(cell1.getStringCellValue() + \"\\t\");\n                  row.createCell(j).setCellValue(cell1.getStringCellValue());\n         }\n        j++;\n\t}\n\t\n\twhile (cellIterator2.hasNext()) {\n        \n\t\t\n\t\tint j=0;\n        Cell cell2 = cellIterator2.next();\n      \n       \n        switch (cell2.getCellType()) {\n        \n        \n        \n        case Cell.CELL_TYPE_STRING:\n        \t  System.out.print(cell2.getStringCellValue() + \"\\t\");\n        \trow.createCell(j).setCellValue(cell2.getStringCellValue());\n        \t\n        break;\n        case Cell.CELL_TYPE_NUMERIC:\n        \tSystem.out.print(cell2.getStringCellValue() + \"\\t\");\n        \t row.createCell(j).setCellValue(cell2.getNumericCellValue());\n       \n        break; \n        case Cell.CELL_TYPE_BLANK:\n        \tSystem.out.print(cell2.getStringCellValue() + \"\\t\");\n             row.createCell(j).setCellValue(cell2.getStringCellValue());\n   \n        break; \n        default:\n        \t System.out.print(cell2.getStringCellValue() + \"\\t\");\n             row.createCell(j).setCellValue(cell2.getStringCellValue());\n         \n    }\n        j++;\n\t}\n\tFileOutputStream  out = new FileOutputStream(OutputFile);\n\tSystem.out.print(\"\\n\");\n\t myWorkBook.write(out);\n\t out.close();\n\t myWorkBook.close();\n   \n\n\t   \n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\npublic void closerActivity()\n{\n\t\n\ttry {\n\t\t System.out.println(\" Hi i am in close\");\n\t\t\n\t} catch (Exception e) {\n        e.printStackTrace();\n    }\n    \n}\n\t\n}\n\n\n\n\n\nI want to compare two excel sheets Demo1.xslx and Demo2.xslx and put result back in to Result.xslx\n\nI dont want put everything in Result.xslx but only rows which doesnot matched in both Demo1 and Demo2\n\nI also want to highlight the cells in Demo1 which are not same as Demo2.\n\n\nPlease help me out..\n\nThanks..", "is_private": false, "id": 179315, "creator": "chakradhar424@gmail.com", "time": "2014-11-27T08:08:22Z", "bug_id": 57270, "creation_time": "2014-11-27T08:08:22Z", "attachment_id": 32230}, {"count": 1, "tags": [], "bug_id": 57270, "is_private": false, "text": "java.lang.NullPointerException  at org.apache.poi.POIXMLDocument.write(POIXMLDocument.java:201)  at ExcelCompare.WriteExcel.addRow(WriteExcel.java:103)  at ExcelCompare.MainClassExcelCompare.main(MainClassExcelCompare.java:122)", "id": 179597, "time": "2014-12-07T12:31:53Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-12-07T12:31:53Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57270, "attachment_id": null, "text": "Please can you address this query to the user@poi.apache.org mailing list. If there is a bug in POI, please re-raise with the minimum amount of code to reproduce, preferably as a JUnit test case. Thanks.", "id": 186078, "time": "2015-10-29T11:00:50Z", "creator": "dtn-asfbugs@corefiling.co.uk", "creation_time": "2015-10-29T11:00:50Z", "is_private": false}, {"count": 3, "tags": [], "text": "Just FYI, it seems you write() and close() the workbook inside the loop whenever a row is added which means that you likely try to write a workbook which was closed before and thus leads to undefined behavior.", "is_private": false, "id": 186085, "creator": "dominik.stadler@gmx.at", "time": "2015-10-29T12:36:10Z", "bug_id": 57270, "creation_time": "2015-10-29T12:36:10Z", "attachment_id": null}]
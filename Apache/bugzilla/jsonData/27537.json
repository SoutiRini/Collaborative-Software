[{"count": 0, "tags": [], "bug_id": 27537, "attachment_id": null, "text": "ThreadPool.java in jakarta-tomcat-\nconnectors\\util\\java\\org\\apache\\tomcat\\util\\threads has a likely serious bug.\nmy tomcat can not afford to high load throughput when we put my jetspeed portal \non client production environment. It can not pass client stress testing when we \nsimulate 300 concurrent users.\n\nI carefully read the implementation of PoolTcpEndPoint.java, and \nThreadPool.java. I found a bewildering smell in the \"run\" method of \nControlRunnable class.\n\n.......\n                            if (_shouldRun) {\n                                if (_toRun != null) {\n                                    _toRun.runIt(t.getThreadData(p));\n                                } else if (toRunRunnable != null) {\n                                    toRunRunnable.run();\n                                } else {\n                                    if (ThreadPool.log.isDebugEnabled())\n                                    ThreadPool.log.debug(\"No toRun ???\");\n                                }\n                            }\n                        } catch (Throwable t) {\n                            ThreadPool.log.error(sm.getString\n                                (\"threadpool.thread_error\", t, toRun.toString\n()));\n                            /*\n                             * The runnable throw an exception (can be even a \nThreadDeath),\n                             * signalling that the thread die.\n                             *\n                            * The meaning is that we should release the thread \nfrom\n                            * the pool.\n                            */\n                            shouldTerminate = true;\n                            shouldRun = false;\n                            p.notifyThreadEnd(this);\n                        } finally {\n                            if (_shouldRun) {\n                                shouldRun = false;\n                                /*\n                                * Notify the pool that the thread is now idle.\n                                 */\n                                p.returnController(this);\n                            }\n                        }\n\nwhen the thread which attach to the controlrunnable object exits due to some \nexception from _toRun.runIt(t.getThreadData(p))(for example, socket timeout, or \nother exceptions), it will execute p.notifyThreadEnd(this) in \"catch (Throwable \nt)\" block and also p.returnController(this) in finally block. it will cause bad \nbehavior, I think.", "id": 53717, "time": "2004-03-09T12:51:15Z", "creator": "linming@smartdot.com", "creation_time": "2004-03-09T12:51:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 27537, "attachment_id": null, "id": 53725, "time": "2004-03-09T15:22:33Z", "creator": "remm@apache.org", "creation_time": "2004-03-09T15:22:33Z", "is_private": false, "text": "Thanks for the comments, this really helps a lot (I'm being sarcastic obviously). "}]
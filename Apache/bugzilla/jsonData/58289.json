[{"count": 0, "tags": [], "creator": "T.J.Hunt@open.ac.uk", "attachment_id": null, "text": "This is exactly the same symptoms as Bug 51872, which was fixed in 7.0.22 (see comment 11). However, there are following comments there which say other people are still seeing the problem, presumably due to other causes.\n\nWe are currently seeing this bug in Tomcat 7.0.54, running under RHEL 7. I am doing what it says in comment 16 of Bug 51872 and creating a new issue. I do not have any code for a minimal reproducible test-case, but I can definitely reproduce the issue in my application as follows:\n\nWe have Tomcat set up behind Apache acting as a proxy, which I believe is quite a common set-up. I don't know if that is signifcant for this bug.\n\nTo reproduce the problem, send a high volume of\n\n* requests for http://example.com/servlet/url1 from IP address 1, and\n* requests for http://example.com/servlet/url2 from IP address 2.\n\nThen, if you look in the Apache access logs, all the requests are logged with the correct IP address (IP address 1 or 2).\n\nHowever, in the Tomcat access logs (e.g. /var/log/tomcat/localhost_access_log.2015-08-25.txt) a small proportion of the requests (just under 5%) get the wrong IP address logged (IP1 when it should be IP2, or vice versa). Most of the requests are logged with the correct IP.\n\nCorresponding to this, in my application request.getRemoteAddr() returns the same IP address that is in the Tomcal logs (unsuprising). That then causes the application errors that is what lead me to start investigating this.\n\nWe have been able to work-around this problem by setting org.apache.catalina.connector.RECYCLE_FACADES=true. With that setting the bug does not occur.", "id": 184783, "time": "2015-08-27T10:13:33Z", "bug_id": 58289, "creation_time": "2015-08-27T10:13:33Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 58289, "text": "(In reply to Tim Hunt from comment #0)\n\n> We have been able to work-around this problem by setting\n> org.apache.catalina.connector.RECYCLE_FACADES=true. With that setting the\n> bug does not occur.\n\nThat indicates that this is an application bug. It looks like you have something retaining a reference to a request and calling request.getRemoteAddr() after the processing of the request has completed and the request has been recycled.\n\nWith org.apache.catalina.connector.RECYCLE_FACADES=true I'd expect to see NPEs at the point where the request is accessed illegally. Do you have any NPEs in your logs? If not, might the application be swallowing them?", "id": 184792, "time": "2015-08-27T19:04:38Z", "creator": "markt@apache.org", "creation_time": "2015-08-27T19:04:38Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "T.J.Hunt@open.ac.uk", "attachment_id": null, "text": "Thanks for your response.\n\nI understand what you are saying about request.getRemoteAddr(), but ...\n\n1. As I say above, the wrong IP address is getting logged in the Tomcat access logs. Surely my application code should not affect what is logged there.\n\n2. My application code is not quite as simple as:\n\nprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    if (!isAllowed(request.getRemoteAddr())) {\t\t\t\n        sendError(request, response, HttpServletResponse.SC_FORBIDDEN, \n                \"You are not authorised to access this URL.\");\n    }\n\n    sendResponse(request, response);\n}\n\nbut it is not fundamentally more complex than that. Also, there is no where in the code where we store request or response. They are just used as local variables in the various methods the generate the response, and when they go out of scope they are left for the garbage collector.\n\nAll errors are logged reliably. One of the oversimplifications I made in the code snipped above is the big try catch finally block the surrounds the whole of doGet and doPost. Because of trying to understand this bug, I have been grepping our logs for words like 'error' before and after the config change, and after the config change there were no null pointer exceptions.\n\nI will agree that it is very mysterious. Still, I wanted to get this bug report filed, because in all my Googling for possible explanations, I only found that one closed bug that offered any clues.", "id": 184794, "time": "2015-08-27T19:23:41Z", "bug_id": 58289, "creation_time": "2015-08-27T19:23:41Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 58289, "text": "(In reply to Tim Hunt from comment #2)\n\n> 1. As I say above, the wrong IP address is getting logged in the Tomcat\n> access logs. Surely my application code should not affect what is logged\n> there.\n\nIf you access a request object outside of the normal request lifecycle you have the potential to cause all sorts of problems.\n\n> 2. My application code is not quite as simple as:\n> \n> protected void doGet(HttpServletRequest request, HttpServletResponse\n> response)\n>         throws ServletException, IOException {\n> \n>     if (!isAllowed(request.getRemoteAddr())) {\t\t\t\n>         sendError(request, response, HttpServletResponse.SC_FORBIDDEN, \n>                 \"You are not authorised to access this URL.\");\n>     }\n> \n>     sendResponse(request, response);\n> }\n> \n> but it is not fundamentally more complex than that. Also, there is no where\n> in the code where we store request or response. They are just used as local\n> variables in the various methods the generate the response, and when they go\n> out of scope they are left for the garbage collector.\n\nOK. That makes a Tomcat bug more likely.\n\n> All errors are logged reliably. One of the oversimplifications I made in the\n> code snipped above is the big try catch finally block the surrounds the\n> whole of doGet and doPost. Because of trying to understand this bug, I have\n> been grepping our logs for words like 'error' before and after the config\n> change, and after the config change there were no null pointer exceptions.\n\nThat is consistent with this being a Tomcat bug.\n\n> I will agree that it is very mysterious. Still, I wanted to get this bug\n> report filed, because in all my Googling for possible explanations, I only\n> found that one closed bug that offered any clues.\n\nYou did the right thing.\n\nI have a couple of further questions:\n1. How are you proxing requests from httpd to Tomcat? mod_jk, mod_proxy_http, mod_proxy_ajp?\n2. Which version of httpd (and mod_jk if you are using that)?\n3. Which connector are you using on the Tomcate side? HTTP/AJP? BIO/NIO/APR?\n\nFinally, if you are able to reduce this to a simple WAR that demonstrates the issue (ideally wth a servelt / JSP as simple as the code above) then that would really help us track this down. Without a test case the only option to figure what is going on is code inspection.", "id": 184797, "time": "2015-08-27T20:29:26Z", "creator": "markt@apache.org", "creation_time": "2015-08-27T20:29:26Z", "is_private": false, "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 58289, "text": "My role is application developer, and we have other people who handle the details of the server set-up. I will try to get them to answer the technical questions. However, I am about to go on holiday for about 10 days, so don't expect a quick response.", "id": 184800, "time": "2015-08-27T21:09:29Z", "creator": "T.J.Hunt@open.ac.uk", "creation_time": "2015-08-27T21:09:29Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 191679, "time": "2016-06-15T14:09:47Z", "bug_id": 58289, "creation_time": "2016-06-15T14:09:47Z", "is_private": false, "text": "Can't reproduce and not reproduction information provided after 9+ months."}]
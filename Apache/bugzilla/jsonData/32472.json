[{"count": 0, "tags": [], "bug_id": 32472, "attachment_id": null, "is_private": false, "id": 67712, "time": "2004-12-01T17:17:57Z", "creator": "g.ielpa@idtech.it", "creation_time": "2004-12-01T17:17:57Z", "text": "If the test in attachment is run on JMeter 2.0.1, the memory is not freed\nupon test termination.\nThe test consists of file uploads of different sizes.\n\nMemory is not freed neither after the \"Clear All\" command is applied.\n\nThe test run on a MS Windows 2000 SP4 Intel P4 1,50GHz, with 512MB RAM. \nDisk is less than 50% full.\n\nJMeter takes about 70MB memory at startup. Memory consumption grows up to 90MB\nwhen the test is opened. After the run the memory grows over 285MB and JMeter\nshuts down completely. For smaller instances of the test (less threads or \nsmaller files), the test terminates but no memory is freed."}, {"count": 1, "text": "Created attachment 13613\nThe test script cleaned  up by listeners", "bug_id": 32472, "attachment_id": 13613, "id": 67715, "time": "2004-12-01T17:23:51Z", "creator": "g.ielpa@idtech.it", "creation_time": "2004-12-01T17:23:51Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 13614\nJMeter log file", "is_private": false, "bug_id": 32472, "id": 67717, "time": "2004-12-01T17:25:12Z", "creator": "g.ielpa@idtech.it", "creation_time": "2004-12-01T17:25:12Z", "attachment_id": 13614}, {"count": 3, "tags": [], "bug_id": 32472, "is_private": false, "id": 67718, "attachment_id": 13615, "creator": "g.ielpa@idtech.it", "creation_time": "2004-12-01T17:25:38Z", "time": "2004-12-01T17:25:38Z", "text": "Created attachment 13615\nJMeter test log file"}, {"count": 4, "tags": [], "text": "wowzers a 52mb file upload. I'm gonna guess it's going to take some tuning to \nget jmeter to handle files that big. I know the current code simply open an \ninputstream and passes it right to the outputstream of the connection. The \nPostwriter currently does this.\n\n    private void writeFileToURL(\n        OutputStream out,\n        String filename,\n        String fieldname,\n        InputStream in,\n        String mimetype)\n        throws IOException\n    {\n        writeln(\n            out,\n            \"Content-Disposition: form-data; name=\\\"\"\n                + encode(fieldname)\n                + \"\\\"; filename=\\\"\"\n                + encode(filename)\n                + \"\\\"\");\n        writeln(out, \"Content-Type: \" + mimetype);\n        out.write(CRLF);\n\n        byte[] buf = new byte[1024];\n\t        //1k - the previous 100k made no sense (there's tons of buffers\n\t        // elsewhere in the chain) and it caused OOM when many \nconcurrent \n\t        // uploads were being done. Could be fixed by increasing the \nevacuation\n\t        // ratio in bin/jmeter[.bat], but this is better.\n        int read;\n        while ((read = in.read(buf)) > 0)\n        {\n            out.write(buf, 0, read);\n        }\n        out.write(CRLF);\n        in.close();\n    }\n\n\nAs you can see, the post writer creates a byte array of 1024 and uses it to \npass the data from one stream to another. If I run the test plan as it and \nprovide my own zip file for the upload, will it work?  If it will work, I will \nprofile it tomorrow and verify that only one byte array is created.\n\nif I remember correctly, in jdk1.4.2 it internally uses the NIO stuff, so it \ncould be a leak in the JVM. The current jmeter implementation is so simple, \nit's highly unlikely there a bug in how jmeter handles large files.\n\npeter", "is_private": false, "bug_id": 32472, "id": 67754, "time": "2004-12-02T02:37:36Z", "creator": "woolfel@yahoo.com", "creation_time": "2004-12-02T02:37:36Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "woolfel@yahoo.com", "text": "I tried using the upload servlet form servlets.com written by jason hunter and \nit seems to work for files that are within the limit of 10485760. It looks \nJMeter does not handle really large files correctly, since it exceeds the limit \nfor multipart post request. Files up to about 12mb are fine, but bigger than \nthat it has a problem. What I see in Tomcat's application log is this.\n\njava.io.IOException: Post content length of 17344631 exceeds limit of 10485760.\n\nOn your server, are you seeing a similar error message from the servlet? If it \nis, I will have to do some research into how to handle really large files. \nOptimizeIt doesn't show any memory leaks with the files that are within the \nlimit. Files over the limit I do see the heap grow, but there is no leak in \njmeter.\n\nI suspect the result is because the server throws and exception and causes \njmeter to hang or handle the failure incorrectly.\n\npeter", "id": 67919, "time": "2004-12-04T04:53:15Z", "bug_id": 32472, "creation_time": "2004-12-04T04:53:15Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 32472, "attachment_id": null, "is_private": false, "id": 67920, "time": "2004-12-04T05:23:52Z", "creator": "woolfel@yahoo.com", "creation_time": "2004-12-04T05:23:52Z", "text": "Spoke too soon. It looks like jason hunter's servlet sets the limit for safety \nreasons. I'll have to change the limit, compile and try again.\n\npeter"}, {"count": 7, "tags": [], "text": "I changed the servlet's content limit and now can upload zip files ranging from \n5-26mb. I do not see any leaks in OptimizeIt. Just to re-interate, the behavior \nof Jmeter with regard to garbage collection looks normal.\n\nAt the end of the test, I do see some heap memory released. If I click gc in \nOptimizeIt, it really clears the heap. I do not see any bugs beyond the fact \nthe JVM does keep increasing the heap.", "attachment_id": null, "bug_id": 32472, "id": 67924, "time": "2004-12-04T06:19:30Z", "creator": "woolfel@yahoo.com", "creation_time": "2004-12-04T06:19:30Z", "is_private": false}, {"count": 8, "tags": [], "text": "I ran OptimizeIt again and it appears there isn't a memory that I can see. At \nthe end of the test, JMeter does not call GC, but at the beginning of the test \nit does. I can see the heap get cleared at the beginning of test. Perhaps we \nshould add a button for cleaning the heap, so that users can initiate it \nmanually. I did discover that files larger than 25Mb seem to fail to upload for \nme. Smaller files work just fine.\n\nIf you still believe there is a leak, please re-open the bug. I'm unable to \nreproduce what you see. JMeter may have an issue with large files uploading \nsuccessfully, but at this point I am not sure there really is a bug. The \ncurrent implementation is so simple that I don't see how it could be a bug. \nThere may be something specific with large files that requires breaking it up \ninto multiple parts from JMeters's side. More research is needed to see if this \nis a real issue.", "attachment_id": null, "bug_id": 32472, "id": 67947, "time": "2004-12-05T02:51:33Z", "creator": "woolfel@yahoo.com", "creation_time": "2004-12-05T02:51:33Z", "is_private": false}]
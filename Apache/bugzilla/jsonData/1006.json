[{"count": 0, "tags": [], "text": "This is a severe problem that opens Tomcat stand-alone mode to DOS attaches but \nmore importantly, it makes it incapable of surviving a single busy day on a \nproduction system of one of our partners. \n\nThe symptoms are that Tomcat's  built-in Web server (standalone mode) \naccumulates threads that hang forever and eventually Tomcat quits responding at \nall. This happens when a thread is trying to read the rest of the request but \nthe connection is blocked. When this occurs, the reading threads are blocked \nforever in the socketRead() call.\n\nWe could reproduced it on the two platforms that we tried to: Linux 6.2 and \nWindows NT 4.0, both with IBM 1.3 build cx130-20001124, (and also same Linux \nJava Hotspot build 1.3.0_02) so probably it is platform independent.\n\nHere is a stack dump of a typical hanging thread (this one is from NT):\n \n\"Thread-10\" (TID:0xd48030, sys_thread_t:0xb416a98, state:R, native ID:0x17b) \nprio=5\n    at java.net.SocketInputStream.socketRead(Native Method)\n    at java.net.SocketInputStream.read(SocketInputStream.java:104)\n    at java.io.BufferedInputStream.fill(BufferedInputStream.java:192)\n    at java.io.BufferedInputStream.read(BufferedInputStream.java:210)\n    at org.apache.tomcat.service.http.HttpRequestAdapter.doRead\n(HttpRequestAdapter.java:115)\n    at org.apache.tomcat.core.BufferedServletInputStream.doRead\n(BufferedServletInputStream.java:106)\n    at org.apache.tomcat.core.BufferedServletInputStream.read\n(BufferedServletInputStream.java:128)\n    at javax.servlet.ServletInputStream.readLine(ServletInputStream.java:138)\n    at org.apache.tomcat.service.http.HttpRequestAdapter.readNextRequest\n(HttpRequestAdapter.java:129)\n    at org.apache.tomcat.service.http.HttpConnectionHandler.processConnection\n(HttpConnectionHandler.java:1\n\n    at org.apache.tomcat.service.TcpWorkerThread.runIt(PoolTcpEndpoint.java:416)\n    at org.apache.tomcat.util.ThreadPool$ControlRunnable.run\n(ThreadPool.java:498)\n    at java.lang.Thread.run(Thread.java:498)\n\n\nHow to reproduce:\n\n1. Setup two computers on the same LAN, on the first one ('server') run Tomcat \n3.2.1 in standalone mode and make sure your HTTP connector in server.xml uses \nthe default connection class 'PoolTcpConnector'. The second one ('client') will \nbe used to connect to the server.\n\n2. Open a telnet session from the client computer to Tomcat's HTTP port (the \nactual port depends on your settings in server.xml). On Linux, this looks like:\n\nlinux-prompt>telnet 192.168.0.110 80\nTrying 192.168.0.110...\nConnected to 192.168.0.110.\nEscape character is '^]'.\n\n3. Leave the telnet session open (don't type anything into it) and \nrun 'netstat -na' on the client and server. You will see on both sides a line \nthat lists the connection from the client to Tomcat.\n\n4. On the server side, print a java dump of the thread stacks (with IBM JDK: on \nLinux: 'kill -3 java-process-id', on NT: Ctrl-Brk), you may also use a debugger \nif you have one. You will see the thread that is blocked in socketRead().\n\n5. Now we come to the interesting part. Disconnect the client computer from the \nnetwork by UNPLUGGING its network cable. Make sure you don't close the \nconnection, or shutdown the computer before you disconnect the wire. We just \nwant to stop packets from flowing between the two computers, and not a graceful \ndisconnection. \n\n6. Repeat the netstat and the stack dump on the server and you will see that \nthe connection is still there and the thread is still hanging.\n\n6. Leave the client disconnected from the network (you may shut it down now) \nand you will see that the connection and the thread hang forever. You can \ncreate this way as many hanging threads as you want.  \n\nDiagnostics:\n\nExamination of the source code of Tomcat 3.2.1 shows that class PoolTcpEndpoint \ndoes not uses the value of the private 'timeout' member as SimpleTcpEndpoint \ndoes. This may be a clue how to fix it. If the socketRead() would timeout, \nlet's say, after a minute of two of no activity on that connection, the thread \nwill be cleaned up. Another possible solution is to have a timeout for the \nentire period of processing of a single request, as Apache does. This  however \nmay be more involved change.", "attachment_id": null, "bug_id": 1006, "id": 1346, "time": "2001-03-17T13:03:06Z", "creator": "tal@zapta.com", "creation_time": "2001-03-17T13:03:06Z", "is_private": false}, {"count": 1, "tags": [], "text": "We patched PoolTcpEndpoint and it seems to work now. The patch adds a timeout \nsetting for the accepted socket so socketRead() timeouts if the connection is \nidle. We are not sure what the implication of this patch (e.g. on other \nservices that users TCP connections) so it would be a good idea if it will be \nexamined by an Higher Minds. Also, notice that there are two kind of timeout \nrelevant for this class, one is of the ServerSocket which controls the accept() \ntimeout and anther for the accepted socket that controls socketRead() timeout. \nIt is not clear to which of the two the existing member 'timeout' refer to.\n\nOur patch is as follows:\n\n1. Change lines 293, 294 (TC 3.2.1) from:\n\n\t\t\tif( factory != null && accepted != null)\n\t\t\t    factory.initSocket( accepted );\n\nTo:\n\n\t\t\tif( factory != null && accepted != null)\n                        {\n                            accepted.setSoTimeout(timeout);\n                     \t    factory.initSocket( accepted );\n                        }\n\n\n2. We also increased the value of the default TIMEOUT (which was not used in \nany way) from 1000 (one second) to 10*60*1000 (10 minutes) just to be on the \nsafe side. It should be examined though what is a good value for the timeout \nand also how to allows users to change in the config files (server.xml ?). When \nyou set the value, make sure you consider all the services that may use this \nconnector.\n", "is_private": false, "bug_id": 1006, "id": 1352, "time": "2001-03-18T01:30:44Z", "creator": "tal@zapta.com", "creation_time": "2001-03-18T01:30:44Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "After some examination we slightly changed the patch as follow:\n\nThe timeout statement is now outside the test of 'factory' so it will kick in \neven if there is no factory.\n\n                        if (accepted != null)\n                        {\n                          accepted.setSoTimeout(timeout);   \n                        }\n                     \n\t\t\tif( factory != null && accepted != null)\n                        {\n                            factory.initSocket( accepted );\n                        }\n\nAnd the default timeout is set to 5 minutes (conservative setting, lower value \nmay be used):\n\n  private static final int TIMEOUT = 5*60*1000; // socketRead() timeout in ms\n\n\n", "is_private": false, "bug_id": 1006, "id": 1445, "time": "2001-03-20T10:33:26Z", "creator": "tal@zapta.com", "creation_time": "2001-03-20T10:33:26Z", "attachment_id": null}, {"text": "Fixed in 3.2.2b2.  I'm leaving this open so that it can be also be fixed in 3.3 \nand later.\n\nAlso, this fix only addresses the DOS type attack of opening a connection and \nnever sending any data.  It does not prevent the case of a rouge servlet that \nnever returns.", "tags": [], "bug_id": 1006, "is_private": false, "count": 3, "id": 1472, "time": "2001-03-20T14:25:28Z", "creator": "marc.saegesser@apropos.com", "creation_time": "2001-03-20T14:25:28Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "hgomez@slib.fr", "attachment_id": null, "id": 1586, "time": "2001-03-24T05:09:31Z", "bug_id": 1006, "creation_time": "2001-03-24T05:09:31Z", "is_private": false, "text": "Fixed in both 3.2.2 beta 2 and 3.3 using read timeout of 300s (5mn)"}, {"count": 5, "tags": [], "bug_id": 1006, "is_private": false, "text": "Mark as FIXED", "id": 1801, "time": "2001-04-09T15:28:26Z", "creator": "cmanolache@yahoo.com", "creation_time": "2001-04-09T15:28:26Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "cmanolache@yahoo.com", "attachment_id": null, "id": 1802, "time": "2001-04-09T15:28:46Z", "bug_id": 1006, "creation_time": "2001-04-09T15:28:46Z", "is_private": false, "text": "Bug is fixed."}]
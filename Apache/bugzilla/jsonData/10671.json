[{"count": 0, "attachment_id": null, "creator": "jessh@ptc.com", "is_private": false, "id": 19296, "time": "2002-07-11T03:08:59Z", "bug_id": 10671, "creation_time": "2002-07-11T03:08:59Z", "tags": [], "text": "This is related to bug 9361, which I also filed, but I have now run across a \nnumber of more substantive, related issues.\n\nTomcat 4.1.3 (and 4.1.2 and I'm not sure how far previously) take:\n  <jsp:include ....>\n    ...\n    <jsp:param name=\"foo\" value=\"<%=bar%>\"/>\n    ...\nand generate something like\n  JspEngine.include( ... + \"&foo=\" + java.net.URLEncoder.encode( bar ) ... );\nwhereas Tomcat 3.x did something like\n  JspEngine.include( ... + \"&foo=\" + bar ... );\n[Yes, I know the class is not actually \"JspEngine\", but you get the idea.]\n\nThis was apparently done to fix issues when bar.toString()'s result contained \n&, =, or other special characters.\n\nUnfortunately, this change has a number of critical issues:\n  1) As per 9361, if 'bar' is null, then this throws an exception, whereas most\n     every servlet engine around (including Tomcat 3.2.x and 3.3.x) do not.\n  2) If 'bar' is not a String, then the JSP page will no longer compile,\n     whereas non-String variables could be used in this context previously and\n     in other JSP engines.\n  3) java.net.URLEncoder.encode() does not properly handle non-ASCII or at\n     least non-Latin characters.  One has to do something like get the string\n     bytes as per UTF8 then URLEncode the string formed from these bytes\n     (interpretting each byte as a char) -- or more efficiently do this all in\n     a single pass.  Thus the original intent of using URLEncoder.encode() is\n     not fully accomplished by the change anyway.\n\nAs it stands now, Tomcat 4.1.x seriously cripples jsp:param as it is commonly \nused.  If this is as per the JSP 1.2 spec, please point this out (though I'd \nhave trouble believing this).\n\nI strongly suggest a single\n  String JspEngine.encode( Object obj )\nmethod that will return \"\" for a null object and otherwise to obj.toString(), \nUTF8 encode and URL encode this result.\n\nAs it is now, I suspect we were better off overall with the Tomcat 3.x \njsp:param code generation, i.e. a heck of a lot of big, real apps run just fine \non it without running afoul of URL encoding issues."}, {"count": 1, "tags": [], "bug_id": 10671, "text": "I was going to file a bug regarding this, until I realized this was changed in\n4.1.x. So by default now (in 4.1.x) the behavior is to URLEncode the parameter\nvalues automatically?\n\nI ran into an issue with passing URLS as paramters where the invalid characters\n(for a url), when not escaped, would effectively \"hide\" any further parameters\nfrom being parsed. In ServletExec 3.1 the URLEncode step is automatically done.\nSo it sounds like this was also added to Tomcat 4.1.x?\n\n", "id": 19419, "time": "2002-07-12T16:00:48Z", "creator": "mark@tweakt.net", "creation_time": "2002-07-12T16:00:48Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "bug_id": 10671, "text": "Yes, the URLEncode bit was added to 4.1.x BUT as per my description above simply\ndoing this brings with it as many problems as it solves.\n\nThe UTF8 bit is necessary to handle non-ASCII (or at least non-Latin)\ncharacters, but just to handle normal accepted usages null and non-String object\nhandling must be added back in.", "id": 19423, "time": "2002-07-12T16:23:31Z", "creator": "jessh@ptc.com", "creation_time": "2002-07-12T16:23:31Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 10671, "attachment_id": null, "text": "There is a two argument version of java.net.URLEncoder.encode in j2sdk 1.4 that\nlet the encoding be specified as the 2nd argument.  I should probably use that,\nbut unfortunately that is not available in 1.3.", "id": 19817, "time": "2002-07-18T21:48:24Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-07-18T21:48:24Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 19846, "time": "2002-07-19T08:06:45Z", "creator": "Andreas.Junghans@fh-karlsruhe.de", "creation_time": "2002-07-19T08:06:45Z", "is_private": false, "text": "We ran into URL encoding problems in one of our projects and found this at the \nW3C:\n\nhttp://www.w3.org/International/URLUTF8Encoder.java\n\nIt seems to do exactly what the new encode method in JDK 1.4 does."}, {"count": 5, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 19849, "time": "2002-07-19T10:17:26Z", "creator": "H.Zeller@acm.org", "creation_time": "2002-07-19T10:17:26Z", "is_private": false, "text": "BTW, should this be _always_ UTF8 or shouldn't this be the value of the \ndocument-encoding of the specific page instead ? If we have a page served as \nISO-8859-1, then the URLencoding should as well encodes characters to its \nISO-8859-1 byte representation; if the page is UTF8, then we should serve \nURL-encode with UTF8. I assume, many browsers will run into problems \notherwise, because encoding is mixed in the same page ? "}, {"count": 6, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 20055, "time": "2002-07-23T14:52:57Z", "creator": "jessh@ptc.com", "creation_time": "2002-07-23T14:52:57Z", "is_private": false, "text": "One can always encode hyperlinks to UTF-8 bytes and then URLEncode them.  This\nalways results in ASCII without any special characters.  The issue is that the\ncode processing the link requests must know to expect UTF-8 encoded data.  The\nissue here is in making all of one's form submissions follow this as well (or\nusing POST for forms and handling POST and GET a bit differently)."}, {"count": 7, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 22016, "time": "2002-08-30T04:58:59Z", "creator": "jessh@ptc.com", "creation_time": "2002-08-30T04:58:59Z", "is_private": false, "text": "There is talk of calling 4.1.10 a final release, but yet this apparent spec \nviolation has not been fixed?!?"}, {"count": 8, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 22499, "time": "2002-09-09T10:53:34Z", "bug_id": 10671, "creation_time": "2002-09-09T10:53:34Z", "text": "The behavior in 4.1.11 will be identical to Tomcat 4.0.x. It is still unclear \nto me if this is a spec violation or not."}, {"count": 9, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 22503, "time": "2002-09-09T10:56:57Z", "creator": "remm@apache.org", "creation_time": "2002-09-09T10:56:57Z", "is_private": false, "text": "*** Bug 9361 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "bug_id": 10671, "text": "I lately ran into ALMOUST the same URL encoding decoding problem.\nAs it seems no action is going to be taken I'll describe my situation so it\ncould help in the desition making.\n\nFirst I need to put ISO-8859-4 characters on the URL (I know it's bad design and\nthe next time I'll use underlying coding ;). For example the URL to be encoded\nis: \"folder.do?path=/Uusim/t\u00e4piline\".\n\nNow I use struts for createing the actual URL and so the URL is encoded in\nUTF-8. When tomcat decodes the request URL on the next step useing platform\ndefaul encodeing ISO-8859-4 I get different result.\n\nAs you all can see the problem could even be none of Tomcat's business but while\nfiguring about the solutions I came up with a little example that makes it\nTomcat's problem:\n\nLets assume that I encode the url with URLEncoder.encode(java.lang.String)\nmanually. Then struts will not find any unaceptable characters and leaves the\nURL alone (At least I hope so). Now I shouldn't have no problems with Tomcat's\ndecodeing method.\n\nBut the same problem comes up again when my application is distributed and the\nurl location happens to be on a different server with a different encodeing. Now\nwhen the different server happens to be out of my hands and so the encodeing\nremains different then I'll have to deal with the encoding problem on\napplication level and that's a bit stupid.\n\nSo my opinion is that the URL encodeing and decodeing should allways be done in\nUTF-8 encodeing like the \"World Wide Web Consortium\" recommends. And maybe\nintroduce a configuration parameter for extreme cases when some other server\nhandles this issue incorrectly.\n\nI'd be happy to get any response concering this issue.\n\nPS! I also checked and think that this problem is currently up with both the\n4.1.27 and 5.0.12 server versions.", "id": 44943, "time": "2003-10-01T12:02:17Z", "creator": "kahroo@hot.ee", "creation_time": "2003-10-01T12:02:17Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 10671, "text": "We have not hit these issues with 4.1.24 they went away for us quite some 4.1.x\nreleases back.", "id": 44953, "time": "2003-10-01T14:24:17Z", "creator": "jessh@ptc.com", "creation_time": "2003-10-01T14:24:17Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 10671, "text": "I agree that passing non-ISO-8859-1 characters (or whatever your platform \ndefault is) via <jsp:param> is broken in 4.1.27.\n\nA suggested work-around:\n\nWhile this work-around won't be suitable for all applications, it is handy \nwhere an included page (or a page that is always the target of a forward) \nwants to receive characters that would otherwise not work.\n\nBasically encode the value of the parameter into something that can be \nrepresented in ISO-8859-1 before passing it to <jsp:param>, and then do the \nreverse encoding in the called page. Using Java 1.4's URLEncoder.encode\n(string, \"UTF-8\") before giving the string to <jsp:param> is one such encoding \nthat does this.\n\nThis causes:\n[non ISO-8859-1 suitable string]\n  (encode using URLEncoder.encode(string, \"UTF-8\"))\n[string that can be represented in ISO-8859-1]\n  (pass to <jsp:include> or <jsp:forward> via <jsp:param>)\n  (Tomcat calls URLEncoder.encode(string))\n  (Tomcat calls the included or forwarded page)\n  (Tomcat calls URLEncoder.decode(string))\n[string that can be represented in ISO-8859-1]\n  (decode using URLDecoder.decode(string, \"UTF-8\"))\n[original string]\n", "id": 46098, "time": "2003-10-23T01:30:20Z", "creator": "ben_kelley@ubsw.com", "creation_time": "2003-10-23T01:30:20Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "creator": "rpinto@ldapguru.com", "attachment_id": null, "text": "http://issues.apache.org/bugzilla/show_bug.cgi?id=31804\n \nCould someone please advise me on whether this Bug is fixed?\nBugzilla shows this bug to be filed under Tomcat 4.0 I am using Tomcat 5.0.28 \nand am having problems when using the jsp:param tag. I get tons of deprecation \nerrors.\n \nMy IDE is jbuilder 2005 and am using :\njava version \"1.4.2_05\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04) Java \nHotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)\n\n \nany tips on whether this bugID is fixed for Tomcat 5.0.28 (or how could it be \nfixed OR a workaround ) would be greatly appreciated.\n", "id": 69656, "time": "2005-01-14T00:06:32Z", "bug_id": 10671, "creation_time": "2005-01-14T00:06:32Z", "is_private": false}, {"count": 14, "tags": [], "creator": "rpinto@ldapguru.com", "attachment_id": null, "is_private": false, "id": 69657, "time": "2005-01-14T00:08:14Z", "bug_id": 10671, "creation_time": "2005-01-14T00:08:14Z", "text": "sorry. prior post had the wrong URL the correct one is : \nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=10671"}, {"count": 15, "tags": [], "bug_id": 10671, "text": "Jess, I'm closing this item.  Please reopen if and only if it's relevant in \nTomcat 5.5.6.", "id": 69756, "time": "2005-01-17T03:24:24Z", "creator": "yoavs@computer.org", "creation_time": "2005-01-17T03:24:24Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 10671, "attachment_id": null, "id": 69770, "time": "2005-01-17T15:35:25Z", "creator": "jessh@ptc.com", "creation_time": "2005-01-17T15:35:25Z", "is_private": false, "text": "I *believe* this has been fixed in recent 4.1, 5.0, and 5.5 releases -- at least\nwe've not been bitten by it recently.  I've not had a chance to go looking for\nit lately either.  If it is still an issue in 5.5 someone will re-open."}]
[{"count": 0, "attachment_id": null, "bug_id": 30631, "is_private": false, "id": 61913, "time": "2004-08-12T19:20:24Z", "creator": "santosh_malik@hotmail.com", "creation_time": "2004-08-12T19:20:24Z", "tags": [], "text": "We cannot get a process id using existing ant tasks. Can we have exec task give \nus a process id back [for eg. if i run a batch file or something which will \nremain live untill i forcibily kill it.] In this case i might be able to get \nthe process id provided by exec task and kill it. Also can we have a stop/kill \nprocess task [It can be a new one or enhancements to existing tasks.]\nWhy i need it?\nI have a email spanning tool which runs on one mailbox (monitoring all incoming \nemails). When a user send an email with required properties to send email, i \nneed to capture all the process information for future reference. If at some \ntime if the user thinks that he longer needs the spam, he can send another mail \nto stop it. We can just kill his spamming process.\n\nThanks..."}, {"count": 1, "attachment_id": null, "bug_id": 30631, "text": "You do not have to use built-in tasks any more. With <scriptdef> you can create your own task that will do whatever you want.", "id": 61914, "time": "2004-08-12T19:23:10Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-08-12T19:23:10Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": "I respect your opinion. I am using ant because it save me time to do \nfundamental tasks which might otherwise require manual coding. I have to write \nmy own task, and include it and stuff, it would be easier to write a C++ \nprogram to get a process info. [I have looked on the internet and there is no \nsolution to stop a process create in jave (after a substantial wait period). So \nwas hoping ant could provide this to me, so that i can have everthing in one \nplace.", "is_private": false, "bug_id": 30631, "id": 61917, "time": "2004-08-12T19:36:44Z", "creator": "santosh_malik@hotmail.com", "creation_time": "2004-08-12T19:36:44Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 30631, "is_private": false, "id": 61918, "time": "2004-08-12T19:41:35Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-08-12T19:41:35Z", "tags": [], "text": "Many languages have better support for OS processes than Java. I would suggest looking at perl's Win32 job support (if you are using Windows). If you decide to write something please share it with people. I will need to have something like that too."}, {"count": 4, "tags": [], "bug_id": 30631, "attachment_id": null, "is_private": false, "id": 61935, "time": "2004-08-13T09:10:49Z", "creator": "stevel@apache.org", "creation_time": "2004-08-13T09:10:49Z", "text": "you have to remember that Ant is a build tool, not a generic\nprocess-execution-workflow language. It often gets used as the latter, but it is\nnot its strength. \n\nfuthermore, there is no notion of processID in java processes; that is an\nOS-specific abstraction that is hidden from us unworthy developers :) So we\ncannot get a process ID, or implement a kill in a cross platform manner.\n\nCan I point you at the smartfrog deployment framework ( http://smartfrog.org/ )\nwhich is designed to manage long running processes with secure remote\ndeploy/undeploy/health checks. There is a new release due by the end of the\nmonth, with ant tasks included. It avoids the processID problem by having a\ndaemon running continually to remember what was deployed, the same program that\nresponds to local/remote deploy/undeploy requests.\n\n"}, {"count": 5, "tags": [], "bug_id": 30631, "attachment_id": null, "is_private": false, "id": 67790, "time": "2004-12-02T17:22:52Z", "creator": "peterreilly@apache.org", "creation_time": "2004-12-02T17:22:52Z", "text": "*** Bug 32488 has been marked as a duplicate of this bug. ***"}, {"count": 6, "tags": [], "bug_id": 30631, "text": "By the way: the 'jps' command included in JDK 5.0 can be valuable for finding\nthe pid of a running Java process (or whatever the unique ID is on your OS).\nTake a look at some of the JDK 5.0 monitoring & management stuff. Still no way\nto get a PID back from a Process created by Runtime.exec however (unless you are\nwilling to use reflection and bypass the Java APIs).", "id": 67813, "time": "2004-12-02T20:01:18Z", "creator": "jglick@apache.org", "creation_time": "2004-12-02T20:01:18Z", "is_private": false, "attachment_id": null}]
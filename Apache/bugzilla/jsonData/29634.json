[{"count": 0, "text": "To know how many files(based on included and excluded pattern set) are present \nwith in the product src. It would be better to have simple codeInfo task which \ncould print source code info. This may need to work in conjuction with some \nreport formatter to display the result in more clean way\n\ne.g How *.java files are present\n    How **/test/** files are present to take cound of test files\n    Total lines of the product including the whitespace line\n    Total size of the product source\n    Total code lines (with out whitespaces)\n\nA sample code is inline which address few of the queries.. \n\nRegards,\nNagendra\n\n\nimport org.apache.tools.ant.DirectoryScanner;\n\nimport java.io.File;\nimport java.text.Collator;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.TreeSet;\n\npublic class CodeInfo\n{\n    private static final float KB_SIZE = 1024;\n    private static final float MB_SIZE = 1024 * KB_SIZE;\n\n    private static final HashMap CODE_INFO_MAP = new HashMap();\n    private static final String[] DEFAULT_EXCLUDES = {\"**/SCCS/**\",\n\t\t\t\t\t\t      \"**/.*\",\n\t\t\t\t\t\t      \"**/CVS/*\",\n\t\t\t\t\t\t      \"**/vssver.scc\"};\n\n\n    public static void main( String[] args )\n    {\n\tFile rootDir = new File( \"I:/work/sunmc/ws/35Upd2\" );\n\tString[] includes = {};\n\tString[] excludes = DEFAULT_EXCLUDES;\n\n\tswitch ( args.length )\n\t{\n\t    case 3:\n\t\t{\n\n\t\t}\n\t    case 2:\n\t\t{\n\n\t\t}\n\t    case 1:\n\t\t{\n\t\t    rootDir = new File( args[0] );\n\t\t    break;\n\t\t}\n\t    case 0:\n\t\t{\n\t\t    System.out.println( \"Assuming the Root Directory to be:\" + \nrootDir );\n\t\t    break;\n\t\t}\n\t    default:\n\t\t{\n\t\t    System.out.println(\n\t\t\t    \"Ussage: java CodeInfo [<root directory>] [; \nseperated included file patterns>] [<; seperated excluded file patterns>]\" );\n\t\t    break;\n\t\t}\n\t}//switch/case\n\n\tDirectoryScanner ds = new DirectoryScanner();\n\tds.setExcludes( excludes );\n\tds.setCaseSensitive( false );\n\tds.setBasedir( rootDir );\n\tscan( ds );\n    }//main()\n\n    static void scan( final DirectoryScanner aDirectoryScanner )\n    {\n\taDirectoryScanner.scan();\n\n\tString[] files = aDirectoryScanner.getIncludedFiles();\n\tfor ( int j = 0; j < files.length; j++ )\n\t{\n\t    File f = new File( aDirectoryScanner.getBasedir(), files[j] );\n\t    String fileName = f.getName().trim();\n\t    int index = fileName.lastIndexOf( '.' );\n\t    String extention = fileName;\n\t    if ( index != -1 )\n\t    {\n\t\textention = fileName.substring( index );\n\t    }\n\t    long[] values = (long[]) CODE_INFO_MAP.get( extention );\n\t    if ( values == null )\n\t    {\n\t\tvalues = new long[2];\n\t\tCODE_INFO_MAP.put( extention, values );\n\t    }\n\t    values[0] += 1;\n\t    values[1] += f.length();\n\t}\n\n\tSystem.out.println( \"Extention\\t\\t\\tCount\\t\\tSize\" );\n\n\tSet keySet = new TreeSet( new ExtentionLengthComparator() );\n\tkeySet.addAll( CODE_INFO_MAP.keySet() );\n\tlong[] total = new long[2];\n\tfor ( Iterator lIterator = keySet.iterator(); lIterator.hasNext(); )\n\t{\n\t    Object ext = lIterator.next();\n\t    long[] values = (long[]) CODE_INFO_MAP.get( ext );\n\t    total[0] += values[0];\n\t    total[1] += values[1];\n\t    doPrint( ext, values );\n\t}\n\tdoPrint( \"Total\", total );\n    }\n\n    private static void doPrint( Object aExt, long[] aValues )\n    {\n\tString size = ((aValues[1] / 1000000) == 0)\n\t\t      ? \"\" + aValues[1] / KB_SIZE + \" kB\"\n\t\t      : \"\" + aValues[1] / MB_SIZE + \" MB\";\n\tSystem.out.println( aExt + \"\\t\\t\\t\" +\n\t\t\t    (aExt.toString().length() < 8 ? \"\\t\" : \"\") + aValues\n[0] + \"\\t\\t\" + size );\n    }//doPrint()\n\n    private static final class ExtentionLengthComparator implements Comparator\n    {\n\tCollator c = Collator.getInstance();\n\n\tpublic int compare( Object o, Object o1 )\n\t{\n\t    String obj1 = o.toString();\n\t    String obj2 = o1.toString();\n\n\t    if ( obj1.charAt( 0 ) == '.' && obj2.charAt( 0 ) != '.' )\n\t    {\n\t\treturn -1;\n\t    }\n\t    else if ( obj1.charAt( 0 ) != '.' && obj2.charAt( 0 ) == '.' )\n\t    {\n\t\treturn 1;\n\t    }\n\n\t    int result = obj1.length() - obj2.length();\n\t    if ( result == 0 )\n\t    {\n\t\treturn c.compare( o, o1 );\n\t    }\n\t    return result;\n\t}//compare()\n    }//ExtentionLengthComparator\n}//class CodeInfo", "bug_id": 29634, "attachment_id": null, "id": 59384, "time": "2004-06-17T08:13:44Z", "creator": "Nagendra.Raja@sun.com", "creation_time": "2004-06-17T08:13:44Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 29634, "attachment_id": null, "is_private": false, "id": 59429, "time": "2004-06-17T16:27:59Z", "creator": "mbenson@apache.org", "creation_time": "2004-06-17T16:27:59Z", "text": "There are lots of metrics tools out there, many of which provide Ant tasks.  \nYou might have a look at the External Tools and Tasks page from the main Ant \npage."}, {"count": 2, "tags": [], "bug_id": 29634, "attachment_id": null, "id": 59455, "creation_time": "2004-06-18T06:08:22Z", "time": "2004-06-18T06:08:22Z", "creator": "Nagendra.Raja@sun.com", "text": "Intent is to provide a simple and most common (code neutral) matrix which could \nbe used by any ant project. All the code matrix I know mostly are tied to a \nlanguage and go deper matrix analysis. e.g jMetra for java etc\n\nThe output of this task could be\n\n'FileName/Extention Type'  'Count of such Type'  'Total Size' 'Total Line Count\n(With WhiteSpaces included)' 'Total Code Line Count(Without WhiteSpaces)'\n\n\n\n\n", "is_private": false}, {"count": 3, "tags": [], "creator": "peterreilly@apache.org", "text": "This sound like a nice to have for an antlib.\nMarking as WONTFIX for ant-core", "id": 106902, "time": "2007-08-19T10:05:47Z", "bug_id": 29634, "creation_time": "2007-08-19T10:05:47Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "When HTML page included by JSP it included with default system character \nencoding... it seems to be a bug.\n\nTypical example:\n1. Pages was written in Cp1251 encoding and bundled in WAR.\n2. WAR was installed on server (Linux) where default system encoding is KOI8-R.\nAll JSP pages includes this string:\n<%@ page contentType=\"text/html;charset=Cp1251\"%>\nand JSP content displayer in browser correctly.\nBut when JSP page include HTML one(that was written in same encoding as JSP), \nbrowser displays included page in unreadable encoding.\n\nI think problem in org.apache.catalina.servlets.DefaultServlet...\nall Reader's created in \"copy\" methods in this manner:\n\nInputStream resourceInputStream = resourceInfo.getStream();\nReader reader = new InputStreamReader(resourceInputStream);\n\nThis mean that InputStreamReader created with default system character \nencoding.\n\nBut i think Reader\u2019s must be created with same encoding as JSP page:\n\nInputStream resourceInputStream = resourceInfo.getStream();\nString enc = resourceInfo.getEncoding();\nReader reader = new InputStreamReader(resourceInputStream, enc);\n\nWhere getEncoding(), returns encoding used by JSP page.\n\nThis bug also exists in Tomcat 3.2.3.", "is_private": false, "id": 7772, "creation_time": "2001-11-12T03:46:08Z", "time": "2001-11-12T03:46:08Z", "creator": "burenkov@nikita.ru", "bug_id": 4806, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 4806, "attachment_id": null, "is_private": false, "id": 8002, "time": "2001-11-16T10:07:37Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-11-16T10:07:37Z", "text": "When you use RequestDispatcher.include() or <jsp:include>, it is the\nresponsibility of the included resource (not the servlet container) to return\nexactly what you want.  In the case of static resources served by\nDefaultServlet, that would require the addition of a non-standard way to\nindicate the desired character set (perhaps by adding a request parameter on the\ninclude) -- and this would be Tomcat-specific because there is no such mechanism\ndefined in the servlet API, so your application would not be portable to any\nother server.\n\nAn alternative approach would be to define your own servlet that served out\nstatic content, but *did* take a request parameter to define the character set\nrequested.  This would be pretty simple logic:\n* Determine the path of the desired resource via request.getPathInfo()\n* Call ServletContext.getResourceAsStream() to get an\n  InputStream to the resource\n* Determine which character encoding is required from a request parameter\n* Build an InputStreamReader (with the desired character encoding)\n  around the InputStream acquired earlier\n* Copy the characters from the InputStreamReader to the response writer\n  for this response.\n\nIn this way, you would be insulating your application from relying on a platform\nspecific feature.\n"}]
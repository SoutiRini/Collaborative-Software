[{"count": 0, "tags": [], "bug_id": 56492, "attachment_id": null, "text": "Currently when tomcat is run with eclipse debugger and a Context is reloaded, each thread that exits (because of the feature to renew threads) triggers a breakpoint in eclipse if its \"Suspend execution on uncaught exceptions\" is enabled (which is the default).\n\nThis has been reported to eclipse : https://bugs.eclipse.org/bugs/show_bug.cgi?id=384073 which closed it without change in eclipse.\n\nThis also has a high number of votes on http://stackoverflow.com/questions/6290470/eclipse-debugger-always-blocks-on-threadpoolexecutor-without-any-obvious-excepti and is deemed as quite annoying.\n\nThe attached patch fixes tomcat by not letting the exception go out of Thread.run() and thus trigger the debugger. Instead, a custom exception is thrown to have the Thread go out of the ThreadPool and then caught and swallowed before Thread.run() returns.\n\nPatch is against tomcat 8 trunk and passes checkstyle and NIO2 tests.", "id": 175035, "time": "2014-05-05T21:10:01Z", "creator": "slaurent@apache.org", "creation_time": "2014-05-05T21:10:01Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 56492, "text": "Created attachment 31592\nproposed patch for tomcat 8", "id": 175036, "time": "2014-05-05T21:10:45Z", "creator": "slaurent@apache.org", "creation_time": "2014-05-05T21:10:45Z", "is_private": false, "attachment_id": 31592}, {"count": 2, "tags": [], "bug_id": 56492, "text": "My question would be why there is an exception thrown here to handle this case at all. Instead, why not check to see if we should die cleanly, then emit the recycling message to the log and simply exit the run method?\n\nI don't understand why an exception is being used here at all.", "id": 175058, "time": "2014-05-06T17:46:22Z", "creator": "chris@christopherschultz.net", "creation_time": "2014-05-06T17:46:22Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 56492, "text": "(In reply to Christopher Schultz from comment #2)\n> My question would be why there is an exception thrown here to handle this\n> case at all. Instead, why not check to see if we should die cleanly, then\n> emit the recycling message to the log and simply exit the run method?\n> \n> I don't understand why an exception is being used here at all.\n\nBecause actually in normal operation those threads never go out of java.util.concurrent.ThreadPoolExecutor.runWorker(Worker) unless there are more threads than the corePoolSize and the task queue is empty.\n\nSo, when I worked on the renewal of threads to avoid classloader leaks upon undeployment, the only way I found was to throw an exception in our implementation of ThreadPoolExecutor.afterExecute(Runnable, Throwable).\n\nIs it OK for me to commit on tomcat 8 trunk?", "id": 175065, "time": "2014-05-06T19:55:51Z", "creator": "slaurent@apache.org", "creation_time": "2014-05-06T19:55:51Z", "is_private": false, "attachment_id": null}, {"count": 4, "text": "Trunk is CTR, so fire away. If you wrote the original code, I can't think of a better person to refactor it :)", "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 175088, "time": "2014-05-07T19:11:57Z", "bug_id": 56492, "creation_time": "2014-05-07T19:11:57Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 56492, "attachment_id": null, "text": "committed to tomcat 8 trunk : r1593132\n\nwhat about tomcat 7 ? is it still CTR as stated in https://wiki.apache.org/tomcat/TomcatVersions", "id": 175096, "time": "2014-05-07T21:06:22Z", "creator": "slaurent@apache.org", "creation_time": "2014-05-07T21:06:22Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 56492, "attachment_id": null, "text": "I merged to tomcat 7 : r1593392\n\nThe fix will be available in tomcat 7.0.54 and tomcat 8.0.6", "id": 175122, "time": "2014-05-08T19:40:01Z", "creator": "slaurent@apache.org", "creation_time": "2014-05-08T19:40:01Z", "is_private": false}]
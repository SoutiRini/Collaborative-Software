[{"count": 0, "tags": [], "creator": "asafb@empownetworks.com", "attachment_id": null, "id": 199178, "time": "2017-06-13T10:36:39Z", "bug_id": 61182, "creation_time": "2017-06-13T10:36:39Z", "is_private": false, "text": "from here:\nhttps://stackoverflow.com/questions/44499457/apache-poi-creates-invalid-signature-for-stream-xslx-file\n\nI am trying to create and add a valid regular cryptographic signature to a xlsx file i am creating. In addition, i am trying to do it in-memory. This seems to cause problems for me. This code creates the file but in windows excel states that the signature is invalid. note that i am sending an input stream containing the xlsx (in-memory - not in file system) file, and i am writing the pkg object to the output stream.\n\n private ByteArrayOutputStream signFile(PrivateKey key, X509Certificate x509Certificate, InputStream input) { //change to approve signed\n    SignatureConfig signatureConfig = new SignatureConfig();\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    signatureConfig.setKey(key);\n    signatureConfig.setExecutionTime(new Date());\n    ArrayList<X509Certificate> x509Certificates = new ArrayList<>(Collections.singletonList(x509Certificate));\n    x509Certificates.add(x509Certificate);\n    signatureConfig.setSigningCertificateChain(x509Certificates);\n    OPCPackage pkg = null;\n    try {\n        if (input instanceof ByteArrayInputStream)\n        pkg = OPCPackage.open(input);\n    } catch (Exception ex) {\n        logger.error(\"failed to open package for file, exception:\",ex);\n    }\n    signatureConfig.setOpcPackage(pkg);\n\n    // adding the signature document to the package\n    SignatureInfo si = new SignatureInfo();\n    si.setSignatureConfig(signatureConfig);\n    try {\n        si.confirmSignature();\n    } catch (Exception ex) {\n        logger.error(\"failed to confirm signature\",ex);\n    }\n    // optionally verify the generated signature\n    boolean b = si.verifySignature();\n    if (b==false){\n        logger.error(\"signature verified result:\" + b);\n    }\n\n    try {\n        pkg.flush();\n        pkg.save(stream);\n        pkg.close();\n    } catch (Exception ex) {\n        logger.error(\"failed to close package\",ex);\n    }\n\n    return stream;\n}\nin addition i have this test code which creates a file and uses OPCPackage.open(...) which works!! excel identifies the signature.\n\n        SignatureConfig signatureConfig = new SignatureConfig();\n        signatureConfig.setKey(aPrivate);\n        ArrayList<X509Certificate> x509Certificates = new ArrayList<>();\n        x509Certificates.add(x509Certificate);\n        signatureConfig.setSigningCertificateChain(x509Certificates);//Collections.singletonList(x509));\n\n        OPCPackage pkg = OPCPackage.open(filePath, PackageAccess.READ_WRITE);\n        signatureConfig.setOpcPackage(pkg);\n\n        // adding the signature document to the package\n        SignatureInfo si = new SignatureInfo();\n        si.setSignatureConfig(signatureConfig);\n        si.confirmSignature();\n        // optionally verify the generated signature\n        boolean b = si.verifySignature();\n        assertTrue(b);\n        // write the changes back to disc\n        pkg.close();"}, {"count": 1, "tags": [], "creator": "kiwiwings@apache.org", "text": "Created attachment 35075\nPatch for XML Signatures / Unix linebreaks\n\nI'll apply the patch after the 3.17-beta1 is out.\n\nOriginally I've adapted/developed the XML signature code under a Win7 box, but now couldn't sign any documents anymore in an Ubuntu environment.\nThe reason was the indenting setting in StreamHelper.\n\nFor the actual bug entry, look at TestSignatureInfo on how to add a signature in-memory. I haven't changed the OPC code, which adds relations on the fly when saving, but rather ask the user to save the unsigned file first to a byte buffer before using OPCPackage to reload/sign/save it.", "id": 199411, "time": "2017-06-26T01:50:24Z", "bug_id": 61182, "creation_time": "2017-06-26T01:50:24Z", "is_private": false, "attachment_id": 35075}, {"count": 2, "tags": [], "creator": "kiwiwings@apache.org", "text": "applied via r1800207", "id": 199475, "time": "2017-06-28T21:39:20Z", "bug_id": 61182, "creation_time": "2017-06-28T21:39:20Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61182, "attachment_id": null, "text": "Testcase: bug61182 took 0.187 sec\n\tFAILED\nexpected:<[HDdvgXblLMiE6gZSoRSQUof6+aedrhK9i51we1n+4Q/ioqrQCeh5UkfQ8lD63nV4ZDbM4/pIVFi6VpMpN/HMnAUHeVdVUCVTgpn3Iz21Ymcd9/aerNov2BjHLhS8X3oUE+XTu2TbJLNmms0I9G4lfg6HWP9t7ZCXBXy6vyCMArc]=> but was:<[jVW6EPMywZ8jr4+I4alDosXzqrVuDG4wTdrr+la8QVbXfLm6HOh9AUFlo5yUZuWo/1gXrrkc34UTYNzuslyrOxKqadPOIRKUssJzdCh/hKeTxs/YtyWkpGHggrUjrF/vUUIeIXRHo+1DCAh6ptoicviH/I/Dtoa5NgkEHVuOHk8]=>\njunit.framework.AssertionFailedError: expected:<[HDdvgXblLMiE6gZSoRSQUof6+aedrhK9i51we1n+4Q/ioqrQCeh5UkfQ8lD63nV4ZDbM4/pIVFi6VpMpN/HMnAUHeVdVUCVTgpn3Iz21Ymcd9/aerNov2BjHLhS8X3oUE+XTu2TbJLNmms0I9G4lfg6HWP9t7ZCXBXy6vyCMArc]=> but was:<[jVW6EPMywZ8jr4+I4alDosXzqrVuDG4wTdrr+la8QVbXfLm6HOh9AUFlo5yUZuWo/1gXrrkc34UTYNzuslyrOxKqadPOIRKUssJzdCh/hKeTxs/YtyWkpGHggrUjrF/vUUIeIXRHo+1DCAh6ptoicviH/I/Dtoa5NgkEHVuOHk8]=>\n\tat org.apache.poi.poifs.crypt.TestSignatureInfo.bug61182(TestSignatureInfo.java:191)\n\n\nHi Andi,\nIs this user error on my part?  Something odd about my dev environment?\n\nWindows 10, Java 8 131", "id": 199764, "time": "2017-07-13T15:59:26Z", "creator": "tallison@mitre.org", "creation_time": "2017-07-13T15:59:26Z", "is_private": false}, {"count": 4, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "id": 199795, "time": "2017-07-14T09:59:22Z", "bug_id": 61182, "creation_time": "2017-07-14T09:59:22Z", "is_private": false, "text": "I guess this is again a line ending problem - as I need to setup my windows environment first - could you write the ByteArrayOutputStream to a file, which is filled after pkg1.close()?"}, {"count": 5, "tags": [], "creator": "tallison@mitre.org", "attachment_id": 35140, "id": 199797, "time": "2017-07-14T12:04:45Z", "bug_id": 61182, "creation_time": "2017-07-14T12:04:45Z", "is_private": false, "text": "Created attachment 35140\nrequested binary dump\n\n        pkg1.save(bos);\n        pkg1.close();\n        OutputStream tmp = new FileOutputStream(new File(\"C:/data/testsig.bin\"));\n        IOUtils.copy(new ByteArrayInputStream(bos.toByteArray()), tmp);\n        tmp.flush();\n        tmp.close();\n\nThank you, Andi!"}, {"count": 6, "tags": [], "bug_id": 61182, "attachment_id": null, "text": "The windows/linux files differ in their line-endings, due to org.apache.xmlbeans.impl.store.Saver._newLine being system dependent.\n\nAs the xml canonicalization handles the newlines as-is, this leads to different hashes.\n\nCurrently I think about 3 options:\na) change the _newLine static final via reflection\nb) normalize the xmls to unix linebreaks on signing\nc) add a switch in the junit test to check for windows/mac/linux hashes\n\nAs the files signed by a linux system worked in Libre/MS Office, I probably just go with c)", "id": 200010, "time": "2017-07-25T10:53:09Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-07-25T10:53:09Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 61182, "attachment_id": null, "text": "add hashes for other linebreaks via r1803011", "id": 200032, "time": "2017-07-25T22:43:01Z", "creator": "kiwiwings@apache.org", "creation_time": "2017-07-25T22:43:01Z", "is_private": false}]
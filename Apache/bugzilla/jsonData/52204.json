[{"count": 0, "tags": [], "creator": "samuel.imbert@gmail.com", "attachment_id": null, "text": "When we create a XSSFWorkbook with the following code : new XSSFWorkbook(fileName)\nthe InputStream seems not closed.\n\nIndeed next we can't modify the file (error : file use by System).\n\nIf I do : \n\nFile f = new File(fileName);\nInputStream in = new FileInputStream(f);                    \nXSSFWorkbook wb = new XSSFWorkbook(in);\nin.close();\n\nThe error doesn't appear anymore.\n\nIs it a bug or my bad use of XXSF API?", "id": 151593, "time": "2011-11-17T12:50:15Z", "bug_id": 52204, "creation_time": "2011-11-17T12:50:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 52204, "attachment_id": null, "id": 151594, "time": "2011-11-17T12:52:58Z", "creator": "apache@gagravarr.org", "creation_time": "2011-11-17T12:52:58Z", "is_private": false, "text": "What leads you to believe that something is still open when you call the filename based XSSF constructor?"}, {"count": 2, "tags": [], "bug_id": 52204, "text": "(In reply to comment #1)\n> What leads you to believe that something is still open when you call the\n> filename based XSSF constructor?\n\nAs i said, after i used this constructor, i'm not able to modify the file.\n\nIf i use the other constructor, i'm able to modify it. \n\nSo i assume it's beacause of the constructor who didn't close his access to the file. \n\nNB : I'm using the POI library in a facelet J2E project.", "id": 151599, "time": "2011-11-17T14:07:46Z", "creator": "samuel.imbert@gmail.com", "creation_time": "2011-11-17T14:07:46Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "text": "It is not a bug, rather a feature of the XSSF API. \n\nIn short, .xlsx file is a zip archive and there are two ways to open it:\n\n1) from file which leads to invoking java.util.zip.ZipFile(File file) deep in POI internals. \n\n2) from input stream in which case we first read everything into memory and then pass the data to ZipInputStream  \n\nIt should be noted, that (2) uses quite a bit more memory than (1), which\ndoesn't need to hold the whole zip file in memory, and can take advantage\nof native methods. \n\nAs you may guessed, (1) opens the underlying zip but does not close it which results in a leak.\n\nYou have two choices:\n\n choice 1: open from FileInputStream\n choice 2: re-write your code as follows:\n\nOPCPackage pkg = OPCPackage.open(file);\nXSSFWorkbook wb = new XSSFWorkbook(pkg);\n\n// work with workbook\n\npkg.close(); // gracefully closes the underlying zip file\n\nI'm going to update the documentation to reflect this feature.\n\nRegards,\nYegor", "id": 151620, "time": "2011-11-18T12:50:09Z", "bug_id": 52204, "creation_time": "2011-11-18T12:50:09Z", "is_private": false}, {"count": 4, "tags": [], "creator": "samuel.imbert@gmail.com", "attachment_id": null, "text": "Ok, thanks Yegor!\n\nI tested the execution time of both algorithm and your code with OPCPackage is faster than with InputStream.\n\nSo it's fine for me!\n\nHave a nice day.", "id": 151621, "time": "2011-11-18T13:17:18Z", "bug_id": 52204, "creation_time": "2011-11-18T13:17:18Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 51587, "is_private": false, "id": 148280, "time": "2011-07-29T21:39:46Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-07-29T21:39:46Z", "tags": [], "text": "In Tomcat HowTo wiki it is mentioned that it would be nice to have \"status\" and \"uptime\" commands in Tomcat. [1]\n\n[1] http://wiki.apache.org/tomcat/HowTo#How_do_I_check_whether_Tomcat_is_UP_or_DOWN.3F_There_is_no_status_command\n\n\nMy thoughts on implementing it are the following:\n\n1. Create a Listener class \"TomcatStatusListener\" and add it to server.xml.\n\n2. The class will implement a non-daemon waiting loop, like the one implemented in StandardServer.await.  One of issues in StandardServer.await is that it starts listening on a port only after Tomcat startup completes. If it fails to open the port (e.g. another Tomcat instance is running) it shuts down Tomcat, but I think that it happens too late. (*)\nThe listener can start listening on the port earlier.\n\n(*) existing workarounds are using CATALINA_PID setting in catalina.sh/setenv.sh and configuring o.a.c.s.EXIT_ON_INIT_FAILURE system property.\n\n\n3. The control port and shutdown command for the listener can be read from the StandardServer object.\n\nAfter that the await behaviour of the server can be disabled by programmatically changing StandardServer.port to a negative value. I think that there is some undocumented code for the value of -2 there already,  or we can add some additional explicit flag to the StandardServer object.\n\nNote, that when shutting down Tomcat the port number is being read from port attribute on the Server element. The code wouldn't look for the listener implementations, so there would not be much sense in specifying a different port on the Listener element.\n\n\n4. Implement additional commands, \"status\" and \"uptime\" in the listener.\n\nThe \"status\" command can print the value of StandardServer.getStateName().\n\nIt might be done that the output of the \"status\" command were enhanceable. E.g. some structured data (status, uptime, start date) - compare with comment 7 in bug 49395.\n\nIt is up to the other side of control port connection to interpret the value and print a more human-friendly message. E.g.:\n\nTomcat Status: STARTED, 13:0:14, 2011-07-30T11:51\nRunning. Started on July 20, 2011 11:51. Uptime 13 day(s) 0 hour(s) 14 minute(s).\n\n\n5. If shutdown is implemented by the listener, it would be possible to initiate shutdown before Tomcat fully starts up.\n\n6. If there is no such listener in server.xml, the behaviour remains the same as earlier with await loop being run by StandardServer."}, {"count": 1, "text": "I'd like to see more structured data available in the response. Either in CSV/TSV or in XML (maybe selectable via a request parameter/header).\n\nI'm not sure why you'd use a non-daemon waiting loop, instead of a simple single-threaded daemon listener. Is that because you want this status listener to be able to reply with a \"Tomcat connector dead\" response or something like that? I figure that if no connectors start, Tomcat should probably die and the \"Tomcat is dead\" response would just be a connection failure.\n\nThere is no need for a \"shutdown\" command on this port IMO.\n\nMaybe you could just re-purpose the existing shutdown listener entirely and add more commands that it recognizes, like \"STATUS\" and \"UPTIME\" (though one might argue that those are really the same command). This is likely to require re-factoring because, as you mention, you can't SHUTDOWN before Tomcat has fully initialized anyway. Being able to shut down Tomcat before startup completes (for example, under a faulty configuration that stalls forever while starting up) would be a good thing to be able to do.", "bug_id": 51587, "attachment_id": null, "id": 148321, "time": "2011-08-01T18:24:38Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-08-01T18:24:38Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 51587, "text": "(In reply to comment #1)\n> I'm not sure why you'd use a non-daemon waiting loop, instead of a simple\n> single-threaded daemon listener.\n\nThat there should always be a non-daemon Thread in a JVM, because that is what keeps JVM alive. Currently this task is performed by Main thread that loops inside StandardServer.await().\n\nI thought that maybe this task can be performed by the listener as well, and let the Main thread just exit without waiting.\n\nMaybe it is over-engineering though and these tasks could be separate.\n\n> There is no need for a \"shutdown\" command on this port IMO.\n\nLook at Catalina.stopServer(String[]) and createStopDigester() that it calls. The support for new command, Catalina.status(..), could be implemented in the same place. It is easier to read port number from <Server> element like createStopDigester() does than trying to figure what Listeners are configured. Thus it is the same port.", "count": 2, "id": 148330, "time": "2011-08-02T07:53:04Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-08-02T07:53:04Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "kalyanceg@gmail.com", "attachment_id": null, "id": 172539, "time": "2014-01-20T12:44:50Z", "bug_id": 56035, "creation_time": "2014-01-20T12:44:50Z", "is_private": false, "text": "I am using httpd-2.2.26. Whenever I use LimitRequestBody directive Apache gives 413 to user if content length is greater than the value specified in directive but logs as 200. It even appends the response html along with error document. This problem happens in httpd-2.4.4 also\nOn further debugging 2.2.26 with gdb i found the problem occurs in modules/http/http_request.c (ap_process_request) line 291\n\nif (access_status == OK) {\n        ap_finalize_request_protocol(r);\n    }\n    else {\n        r->status = HTTP_OK;\n        ap_die(access_status, r);\n    }\n\n\nthe access_status for request which are to reponsed to 413 is not OK(it is -3). So it reaches else part, which sets status as 200 and calls ap_die\nIf I make the change as \n\nif (access_status == OK||r->status==413) {\n        ap_finalize_request_protocol(r);\n    }\n    else {\n        r->status = HTTP_OK;\n        ap_die(access_status, r);\n    }\n\nIt works fine, I know this is small hack to hide the issue. Is there a open bug in httpd for this?\nDoes this change causes any performance issue/ failures?\nLet me know is there a cleaner way to enforce LimitRequestBody"}, {"count": 1, "tags": [], "bug_id": 56035, "is_private": false, "text": "The handler has ignored errors returned during reading the request body", "id": 172541, "time": "2014-01-20T12:54:48Z", "creator": "covener@gmail.com", "creation_time": "2014-01-20T12:54:48Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "kalyanceg@gmail.com", "attachment_id": null, "id": 172543, "time": "2014-01-20T13:15:22Z", "bug_id": 56035, "creation_time": "2014-01-20T13:15:22Z", "is_private": false, "text": "why is it made invalid?"}, {"count": 3, "tags": [], "text": "(In reply to maapu from comment #2)\n> why is it made invalid?\n\nI described it in a comment and on the mailing list thread.\n\nmod_php, or mod_php + your php script, ignored the error reading the post body and returned success instead of returning an error.  Its output was included with the queued up error response.\n\nPlease don't reopen bugs without providing new information, or your updates are likely to be ignored.\n\nThere may be other modules with this problem, such as the other PR you commented on, but those cases need to be debugged individually.  If the handler is part of httpd, it's a valid bug report here.", "is_private": false, "bug_id": 56035, "id": 172545, "time": "2014-01-20T13:25:47Z", "creator": "covener@gmail.com", "creation_time": "2014-01-20T13:25:47Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 172546, "time": "2014-01-20T13:38:00Z", "bug_id": 56035, "creation_time": "2014-01-20T13:38:00Z", "text": "Can you duplicate with a non-php testcase?"}, {"count": 5, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 172547, "time": "2014-01-20T13:38:21Z", "bug_id": 56035, "creation_time": "2014-01-20T13:38:21Z", "is_private": false, "text": "(In reply to Eric Covener from comment #4)\n> Can you duplicate with a non-php testcase?\n\nrelated: https://issues.apache.org/bugzilla/show_bug.cgi?id=36090"}, {"count": 6, "tags": [], "text": "Apache behaviour for non php request\ncommand\ncurl --data \"param1=value1&param2=value2\" x.x.x.x/index.html -A firefox -v\n\nOutput\n\n> POST /index.html HTTP/1.1\n> User-Agent: firefox\n> Host: x.x.x.x\n> Accept: */*\n> Content-Length: 27\n> Content-Type: application/x-www-form-urlencoded\n> \n* upload completely sent off: 27out of 27 bytes\n< HTTP/1.1 413 Request Entity Too Large\n< Date: Mon, 20 Jan 2014 13:50:13 GMT\n< Server: Apache/2.2.3 (CentOS)\n< Vary: Accept-Encoding\n< Connection: close\n< Content-Type: text/html; charset=iso-8859-1\n< \n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>413 Request Entity Too Large</title>\n</head><body>\n<h1>Request Entity Too Large</h1>\nThe requested resource<br />/index.html<br />\ndoes not allow request data with POST requests, or the amount of data provided in\nthe request exceeds the capacity limit.\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at x.x.x.x Port 80</address>\n</body></html>\n* Closing connection #0\n\n\nLogs \nlocalhost:80 x.x.x.x - - 2014-01-20T13:51:10 - 200 200[status] 417 256 - \"-\" \"POST /index.html HTTP/1.1\" \"firefox\" 30621\n\nApache behaviour for php request\ncurl --data \"param1=value1&param2=value2\" x.x.x.x/index.php -A firefox -v\n\n> POST /index.php HTTP/1.1\n> User-Agent: firefox\n> Host:x.x.x.x\n> Accept: */*\n> Content-Length: 27\n> Content-Type: application/x-www-form-urlencoded\n> \n* upload completely sent off: 27out of 27 bytes\n< HTTP/1.1 413 Request Entity Too Large\n< Date: Mon, 20 Jan 2014 13:51:59 GMT\n< Server: Apache/2.2.3 (CentOS)\n< Vary: Accept-Encoding\n< Connection: close\n< Content-Type: text/html; charset=iso-8859-1\n< \n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>413 Request Entity Too Large</title>\n</head><body>\n<h1>Request Entity Too Large</h1>\nThe requested resource<br />/index.php<br />\ndoes not allow request data with POST requests, or the amount of data provided in\nthe request exceeds the capacity limit.\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at x.x.x.x Port 80</address>\n</body></html>\n<html>\nHello\n</html>\n\nLogs\nlocalhost:80 x.x.x.x - - 2014-01-20T13:52:51 - 200 200 417 210 - \"-\" \"POST /index.html HTTP/1.1\" \"firefox\" 30611", "is_private": false, "bug_id": 56035, "id": 172548, "time": "2014-01-20T13:56:20Z", "creator": "kalyanceg@gmail.com", "creation_time": "2014-01-20T13:56:20Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 172550, "time": "2014-01-20T14:13:43Z", "bug_id": 56035, "creation_time": "2014-01-20T14:13:43Z", "is_private": false, "text": "In both cases, you're bailing out at the bottom of the block below here, so r->status is not restored as it is later in ap_die:\n\nAP_DECLARE(void) ap_die(int type, request_rec *r)\n{\n    int error_index = ap_index_of_response(type);\n    char *custom_response = ap_response_code_string(r, error_index);\n    int recursive_error = 0;\n    request_rec *r_1st_err = r;\n\n    if (type == AP_FILTER_ERROR) {\n        ap_filter_t *next;\n\n        /*\n         * Check if we still have the ap_http_header_filter in place. If\n         * this is the case we should not ignore AP_FILTER_ERROR here because\n         * it means that we have not sent any response at all and never\n         * will. This is bad. Sent an internal server error instead.\n         */\n        next = r->output_filters;\n        while (next && (next->frec != ap_http_header_filter_handle)) {\n               next = next->next;\n        }\n\n        /*\n         * If next != NULL then we left the while above because of\n         * next->frec == ap_http_header_filter\n         */\n        if (next) {\n            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,\n                          \"Custom error page caused AP_FILTER_ERROR\");\n            type = HTTP_INTERNAL_SERVER_ERROR;\n        }\n        else {\n            return;\n        }\n    }\n\nIt seems like it might be safer to avoid r->status = HTTP_OK in the caller if the error is AP_FILTER_ERROR.\n\n(I think the error in the other branch looks wrong too, it does not yet know that that AP_FILTER_ERROR came from an errordoc creation / recursive call)"}, {"count": 8, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 172551, "time": "2014-01-20T14:15:58Z", "bug_id": 56035, "creation_time": "2014-01-20T14:15:58Z", "text": "How does this do w/ your php test case, making sure to look at the body -- i suggest using netcat instead of curl/wget since there is some invalid response issues\n\ne.g. printf \"POST /index.html HTTP/1.0\\r\\nContent-Length: 2\\r\\n\\r\\nab\" | nc 0 80\n\n\n(debug left in)\nIndex: modules/http/http_request.c\n===================================================================\n--- modules/http/http_request.c (revision 1559612)\n+++ modules/http/http_request.c (working copy)\n@@ -288,12 +288,15 @@\n         access_status = OK;\n     }\n \n+    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, \"URI %s, rc=%d, status=%d\", r->uri, access_status, r->status);\n+\n     if (access_status == OK) {\n         ap_finalize_request_protocol(r);\n     }\n     else {\n-        r->status = HTTP_OK;\n+        if (access_status != AP_FILTER_ERROR) r->status = HTTP_OK;\n         ap_die(access_status, r);\n+        ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, \"after ap_die URI %s, rc=%d, status=%d\", r->uri, access_status, r->status);\n     }\n \n     /*"}, {"count": 9, "tags": [], "bug_id": 56035, "is_private": false, "text": "For ap_die() /  ap_process[_async]_request() to handle any non-HTTP status safer, maybe a more complete patch (against trunk) could be :\n\nIndex: modules/http/http_request.c\n===================================================================\n--- modules/http/http_request.c\t(revision 1559728)\n+++ modules/http/http_request.c\t(working copy)\n@@ -75,12 +75,17 @@ static void update_r_in_filters(ap_filter_t *f,\n \n AP_DECLARE(void) ap_die(int type, request_rec *r)\n {\n-    int error_index = ap_index_of_response(type);\n-    char *custom_response = ap_response_code_string(r, error_index);\n+    int error_index;\n+    char *custom_response;\n     int recursive_error = 0;\n     request_rec *r_1st_err = r;\n \n-    if (type == AP_FILTER_ERROR) {\n+    if (type == OK || type == DONE) {\n+        ap_finalize_request_protocol(r);\n+        return;\n+    }\n+\n+    if (!ap_is_HTTP_VALID_RESPONSE(type)) {\n         ap_filter_t *next;\n \n         /*\n@@ -99,8 +104,14 @@ AP_DECLARE(void) ap_die(int type, request_rec *r)\n          * next->frec == ap_http_header_filter\n          */\n         if (next) {\n-            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(01579)\n-                          \"Custom error page caused AP_FILTER_ERROR\");\n+            if (type == AP_FILTER_ERROR) {\n+                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(01579)\n+                              \"Custom error page caused AP_FILTER_ERROR\");\n+            }\n+            else {\n+                ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO()\n+                              \"Invalid error response status %i\", type);\n+            }\n             type = HTTP_INTERNAL_SERVER_ERROR;\n         }\n         else {\n@@ -108,11 +119,6 @@ AP_DECLARE(void) ap_die(int type, request_rec *r)\n         }\n     }\n \n-    if (type == DONE) {\n-        ap_finalize_request_protocol(r);\n-        return;\n-    }\n-\n     /*\n      * The following takes care of Apache redirects to custom response URLs\n      * Note that if we are already dealing with the response to some other\n@@ -141,6 +147,10 @@ AP_DECLARE(void) ap_die(int type, request_rec *r)\n \n         custom_response = NULL; /* Do NOT retry the custom thing! */\n     }\n+    else {\n+        error_index = ap_index_of_response(type);\n+        custom_response = ap_response_code_string(r, error_index);\n+    }\n \n     r->status = type;\n \n@@ -346,7 +356,9 @@ void ap_process_async_request(request_rec *r)\n         ap_finalize_request_protocol(r);\n     }\n     else {\n-        r->status = HTTP_OK;\n+        if (ap_is_HTTP_VALID_RESPONSE(access_status)) {\n+            r->status = HTTP_OK;\n+        }\n         ap_die(access_status, r);\n     }\n[END]", "id": 172553, "time": "2014-01-20T15:14:12Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-01-20T15:14:12Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 31233, "id": 172554, "time": "2014-01-20T15:23:43Z", "bug_id": 56035, "creation_time": "2014-01-20T15:23:43Z", "is_private": false, "text": "Created attachment 31233\nnon-HTTP statuses and ap_die() / ap_process_request()\n\nPatch above attached."}, {"count": 11, "tags": [], "text": "@Yann\nBut why do we need to call ap_die incase of ap_is_HTTP_VALID_RESPONSE returns false. Why cant we just call ap_finalize_request_protocol? Will it miss some cases?\nI will try out the patch today\n\n\n@Eric\nprintf \"POST /index.html HTTP/1.0\\r\\nContent-Length: 2\\r\\n\\r\\nab\" | nc x.x.x.x 80\n\nHTTP/1.1 413 Request Entity Too Large\nDate: Tue, 21 Jan 2014 03:42:21 GMT\nServer: Apache/2.2.3 (CentOS)\nVary: Accept-Encoding\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>413 Request Entity Too Large</title>\n</head><body>\n<h1>Request Entity Too Large</h1>\nThe requested resource<br />/index.php<br />\ndoes not allow request data with POST requests, or the amount of data provided in\nthe request exceeds the capacity limit.\n<hr>\n<address>Apache/2.2.3 (CentOS) Server at x.x.x.x Port 80</address>\n</body></html>\n<html>\n<head>\n<meta name=\"robots\" content=\"noarchive\" />\n<meta name=\"googlebot\" content=\"nosnippet\" />\n</head>\n<body>\n<div align=center>\n<h3>Error! Page cannot be displayed. Please contact service provider for more details.</h3>\n</div>\n</body>", "is_private": false, "bug_id": 56035, "id": 172581, "time": "2014-01-21T03:43:39Z", "creator": "kalyanceg@gmail.com", "creation_time": "2014-01-21T03:43:39Z", "attachment_id": null}, {"count": 12, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 172589, "time": "2014-01-21T12:52:18Z", "bug_id": 56035, "creation_time": "2014-01-21T12:52:18Z", "is_private": false, "text": "(In reply to maapu from comment #11)\n> @Yann\n> But why do we need to call ap_die incase of ap_is_HTTP_VALID_RESPONSE\n> returns false. Why cant we just call ap_finalize_request_protocol? Will it\n> miss some cases?\n\nap_die() ensures the client will receive an error response in any case, should an handler return a non-HTTP status without responding by itself (or calling a filter), \"Internal Server Error\" will be used.\n\nFor the logging bug however, I think the proposed patch(es) don't do the right thing, ap_process_request() should always set r->status to HTTP_OK before calling ap_die(), or the latter may think it's a recursive error (while it is never here).\n\nSo maybe the correct way to handle this is to check whether the status is still HTTP_OK after ap_die(), in which case a response has already been sent to the client before, and the original r->status is relevant (and to be restored).\nThis new patch follows.\n\nRegarding the double response body, as Eric said, this comes from (mod_)php just ignoring the error, no httpd's level patch can resolve this IMHO."}, {"count": 13, "tags": [], "text": "Created attachment 31245\nnon-HTTP statuses and ap_die() / ap_process_request()\n\nThe patch described above.\n\nNote that the ap_dies()'s !ap_is_HTTP_VALID_RESPONSE(type) branch now logs an initial vs recursive error based on r->status, since as Eric said this is not necessarily a \"Custom error page\" error here.", "is_private": false, "bug_id": 56035, "id": 172594, "time": "2014-01-21T12:58:52Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-01-21T12:58:52Z", "attachment_id": 31245}, {"count": 14, "tags": [], "bug_id": 56035, "is_private": false, "text": "maapu, what generates the response for your index.html? Is it diverted to PHP?", "id": 172598, "time": "2014-01-21T13:04:50Z", "creator": "covener@gmail.com", "creation_time": "2014-01-21T13:04:50Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 172616, "time": "2014-01-22T14:28:25Z", "bug_id": 56035, "creation_time": "2014-01-22T14:28:25Z", "text": "Current rev of patch has a problem with access_status=AP_FILTER_ERROR, ap_die will copy it to r->status, so the caller cannot restore it.  Left at a negative value, it's logged as -.\n\nit does seem like AP_FILTER_ERROR should maybe be unique for non-http status. It a) has written an error and b) should not really be mapped further."}, {"count": 16, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 172622, "time": "2014-01-22T17:48:02Z", "bug_id": 56035, "creation_time": "2014-01-22T17:48:02Z", "is_private": false, "text": "(In reply to Eric Covener from comment #15)\n> Current rev of patch has a problem with access_status=AP_FILTER_ERROR,\n> ap_die will copy it to r->status, so the caller cannot restore it.  Left at\n> a negative value, it's logged as -.\n\nI don't see how, in the proposed patch, ap_die() can set r->status to anything than a valid HTTP status (AP_FILTER_ERROR, AP_NOBODY_READ/WROTE or whatever).\n\nWhen the given access_status is not a valid HTTP status (as per ap_is_HTTP_VALID_RESPONSE, negative values included), either ap_die() does nothing (response already sent), or it is forced to HTTP_INTERNAL_SERVER_ERROR (and so will be r->status below).\n\nDo you have a path for this to happen?"}, {"count": 17, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 172654, "time": "2014-01-24T00:31:22Z", "bug_id": 56035, "creation_time": "2014-01-24T00:31:22Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #16)\n> (In reply to Eric Covener from comment #15)\n> > Current rev of patch has a problem with access_status=AP_FILTER_ERROR,\n> > ap_die will copy it to r->status, so the caller cannot restore it.  Left at\n> > a negative value, it's logged as -.\n> \n> I don't see how, in the proposed patch, ap_die() can set r->status to\n> anything than a valid HTTP status (AP_FILTER_ERROR, AP_NOBODY_READ/WROTE or\n> whatever).\n> \n> When the given access_status is not a valid HTTP status (as per\n> ap_is_HTTP_VALID_RESPONSE, negative values included), either ap_die() does\n> nothing (response already sent), or it is forced to\n> HTTP_INTERNAL_SERVER_ERROR (and so will be r->status below).\n> \n> Do you have a path for this to happen?\n\nYou're right, I had to hand-merge parts into 2.2.x and looking now it is mangled"}, {"count": 18, "tags": [], "bug_id": 56035, "is_private": false, "text": "Backported to 2.4.13 in r1681114.\nBackport proposed to 2.2.x in r1682139.\nLeaving this PR open since it concerns 2.2.x.", "id": 183145, "time": "2015-05-28T00:00:54Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-05-28T00:00:54Z", "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 56035, "is_private": false, "text": "Backported to upcoming 2.2.30 in r1683808.", "id": 183597, "time": "2015-06-17T10:03:47Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-06-17T10:03:47Z", "attachment_id": null}]
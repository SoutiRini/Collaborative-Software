[{"count": 0, "tags": [], "bug_id": 40885, "attachment_id": null, "id": 95383, "time": "2006-11-03T04:47:30Z", "creator": "eberenguier@octo.com", "creation_time": "2006-11-03T04:47:30Z", "is_private": false, "text": "I'm using Slide 2.1 with Websphere 5.1. \nStorage is done using the J2EE store with Oracle database.\n\n\nIt usually works well, but eventually the server starts to hang for all write\noperations (all clients give up on timeout) and we find a lot of lines looking\nlike the following in the server log :\n\n[11/2/06 10:44:28:927 MET] 1b8504 ThreadMonitor W WSVR0605W: Thread\n\"Servlet.Engine.Transports : 70\" (a9443c) has been active for 645,985\nmilliseconds and may be hung. There are 25 threads in total in the server that\nmay be hung.\n\nThe only way to make slide work again is to restart the WAS instance.\n\nLast time it happened we did a thread dump on the server and we found a lot\nthreads hung at the same place (they all look the same, i'm just including one) :\n\n\"Servlet.Engine.Transports : 35\" daemon prio=5 tid=0x0189adc8 nid=0x298 in\nObject.wait() [dcc7e000..dcc7fc30]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xe7b6bc68> (a\norg.apache.commons.transaction.locking.GenericLock)\n        at\norg.apache.commons.transaction.locking.GenericLock.acquire(GenericLock.java:241)\n        - locked <0xe7b6bc68> (a org.apache.commons.transaction.locking.GenericLock)\n        at\norg.apache.commons.transaction.locking.GenericLock.acquire(GenericLock.java:165)\n        - locked <0xe7b6bc68> (a org.apache.commons.transaction.locking.GenericLock)\n        at\norg.apache.slide.webdav.method.AbstractWebdavMethod.assureGlobalWriteLock(AbstractWebdavMethod.java:847)\n        at\norg.apache.slide.webdav.method.AbstractWebdavMethod.run(AbstractWebdavMethod.java:362)\n        at org.apache.slide.webdav.WebdavServlet.service(WebdavServlet.java:155)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at\ncom.ibm.ws.webcontainer.servlet.StrictServletInstance.doService(StrictServletInstance.java:110)\n        at\ncom.ibm.ws.webcontainer.servlet.StrictLifecycleServlet._service(StrictLifecycleServlet.java:174)\n        at\ncom.ibm.ws.webcontainer.servlet.ServicingServletState.service(StrictLifecycleServlet.java:333)\n        at\ncom.ibm.ws.webcontainer.servlet.StrictLifecycleServlet.service(StrictLifecycleServlet.java:116)\n        at\ncom.ibm.ws.webcontainer.servlet.ServletInstance.service(ServletInstance.java:283)\n        at\ncom.ibm.ws.webcontainer.servlet.ValidServletReferenceState.dispatch(ValidServletReferenceState.java:42)\n        at\ncom.ibm.ws.webcontainer.servlet.ServletInstanceReference.dispatch(ServletInstanceReference.java:40)\n        at\ncom.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:76)\n        at org.apache.slide.webdav.filter.LogFilter.doFilter(LogFilter.java:141)\n        at\ncom.ibm.ws.webcontainer.filter.FilterInstanceWrapper.doFilter(FilterInstanceWrapper.java:132)\n        at\ncom.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:71)\n        at\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.handleWebAppDispatch(WebAppRequestDispatcher.java:1162)\n        - locked <0xe9128cd0> (a\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher)\n        at\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.dispatch(WebAppRequestDispatcher.java:676)\n        - locked <0xe9128cd0> (a\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher)\n        at\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.forward(WebAppRequestDispatcher.java:203)\n        - locked <0xe9128cd0> (a\ncom.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher)\n        at\ncom.ibm.ws.webcontainer.srt.WebAppInvoker.doForward(WebAppInvoker.java:125)\n        at\ncom.ibm.ws.webcontainer.srt.WebAppInvoker.handleInvocationHook(WebAppInvoker.java:300)\n        at\ncom.ibm.ws.webcontainer.cache.invocation.CachedInvocation.handleInvocation(CachedInvocation.java:71)\n        at\ncom.ibm.ws.webcontainer.srp.ServletRequestProcessor.dispatchByURI(ServletRequestProcessor.java:246)\n        at\ncom.ibm.ws.webcontainer.oselistener.OSEListenerDispatcher.service(OSEListener.java:334)\n        at\ncom.ibm.ws.webcontainer.http.HttpConnection.handleRequest(HttpConnection.java:56)\n        at\ncom.ibm.ws.http.HttpConnection.readAndHandleRequest(HttpConnection.java:652)\n        at com.ibm.ws.http.HttpConnection.run(HttpConnection.java:448)\n        at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:936)"}, {"count": 1, "tags": [], "bug_id": 40885, "attachment_id": null, "id": 95575, "time": "2006-11-08T07:31:48Z", "creator": "eberenguier@octo.com", "creation_time": "2006-11-08T07:31:48Z", "is_private": false, "text": "The problem described is easy to reproduce when stress testing slide server\n(running 20 threads repeatedly putting files kills the server in less than 10\nminutes)\n\nSubversion version (from 1 week ago) does not solve the problem.\n\nAfter some reseach we found the following :\n\nThe problem was caused by a thread getting stuck while holding the global write\nlock :\n\"Servlet.Engine.Transports : 0\" daemon prio=5 tid=0x01f05c28 nid=0x24 runnable\n[deb7e000..deb7fc30]\n\tat java.util.HashMap.put(HashMap.java:382)\n\tat org.apache.slide.store.ExtendedStore.end(ExtendedStore.java:1029)\n\tat\norg.apache.slide.transaction.SlideTransaction.delistResource(SlideTransaction.java:377)\n\tat org.apache.slide.store.AbstractStore.delist(AbstractStore.java:1574)\n\tat org.apache.slide.store.AbstractStore.delist(AbstractStore.java:1559)\n\tat org.apache.slide.store.ExtendedStore.retrieveObject(ExtendedStore.java:581)\n\tat org.apache.slide.structure.StructureImpl.retrieve(StructureImpl.java:178)\n\tat org.apache.slide.structure.StructureImpl.retrieve(StructureImpl.java:160)\n\tat\norg.apache.slide.webdav.method.AbstractWebdavMethod.run(AbstractWebdavMethod.java:387)\n\tat org.apache.slide.webdav.WebdavServlet.service(WebdavServlet.java:155)\n\nThe thread was stuck because of the map internal state became corrupted (there\nwas a cycle in a linked list so the put method never exited)\n\nThe obvious fix was to replace the collection with a thread safe one.\n\n--- ExtendedStore.java.orig     2004-12-23 13:07:48.000000000 +0100\n+++ ExtendedStore.java  2006-11-08 16:23:11.393555000 +0100\n@@ -63,6 +63,8 @@\n import org.apache.slide.util.logger.Logger;\n import org.apache.slide.util.logger.TxLogger;\n\n+import java.util.Collections;\n+\n /**\n  * Store that allows for transactional caching of data. Takes over much\nmodified code from StandardStore.\n  * That's why Remy is listed as author as well.\n@@ -145,7 +147,7 @@\n     long maxByteSizePerEntry;\n     boolean noGlobalCacheInTx;\n\n-    private Map suspendedLocks = new HashMap();\n+    private Map suspendedLocks = Collections.synchronizedMap(new HashMap());\n\n     public ExtendedStore() {\n         lockManager = new GenericLockManager(1, new TxLogger(getLogger(),\nLOG_CHANNEL));\n\nNow we have no more hung threads, but i'm not sure it's the right fix.\nWhat do you think ?\n"}, {"count": 2, "tags": [], "bug_id": 40885, "text": "I do not know yet slide deep enough to be able to evaluate this fix, but the\nfact that is solves your problem is a good indication.\n\nCould you reproduce this type of problem when running slide inside tomcat ?\n\nAn ant build file which would send requests in parallel by using the parallel\ntask  would be a good tool to test that. The requests themselves could be sent\nby using the webdav ant tasks which are built as part of slide.\n\nThere is also a testsuite in the slide sources which is using a specific test\nframework. I do not know whether this test framework supports parallel actions.", "id": 95602, "time": "2006-11-08T20:03:44Z", "creator": "antoine@apache.org", "creation_time": "2006-11-08T20:03:44Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "eberenguier@octo.com", "is_private": false, "id": 95606, "attachment_id": null, "bug_id": 40885, "creation_time": "2006-11-09T00:16:10Z", "time": "2006-11-09T00:16:10Z", "text": "We couldn't reproduce the problem with Tomcat, though we could only try it on a\ndifferent hardware platform (windows xp workstation).\n\nOur load test was just a very simple perl script.\nBut the problem also occurs now and then even with normal usage pattern.\n"}, {"count": 4, "tags": [], "bug_id": 40885, "attachment_id": null, "id": 99765, "time": "2007-02-25T14:02:42Z", "creator": "antoine@apache.org", "creation_time": "2007-02-25T14:02:42Z", "is_private": false, "text": "Hello Eric,\n\nthe line of code private Map suspendedLocks = new HashMap(); does not exist in \norg.apache.slide.store.ExtendedStore in the current SVN version of slide.\n\nIt would be good if you could dig more in the problem which you encountered when testing the slide \nbuilt from recent sources.\n\nBest regards,\n\nAntoine\n\nBTW\nI found the code as described by your diffs here :\nhttp://svn.apache.org/viewvc/jakarta/slide/tags/SLIDE_2_1_RELEASE/src/share/org/apache/slide/\nstore/ExtendedStore.java\n\nSomehow the line of code with the suspendedLocks is not present in the trunk. URL http://\nsvn.apache.org/viewvc/jakarta/slide/trunk/src/share/org/apache/slide/store/ExtendedStore.java ."}, {"count": 5, "tags": [], "text": "The patch is against the 2.1 because we wanted to use a stable version (and we\nhad a lot of problems with 2.2-CVS).\n\nIn 2.1, the suspendedCollection is only written and never read (it should have\nbeen a better fix to remove it than to replace it by a synchronized one). \nIt seems that it has been removed in 2.2-CVS so i think the bug is probably\nfixed by now.\n", "attachment_id": null, "id": 100296, "creator": "eberenguier@octo.com", "time": "2007-03-12T03:24:29Z", "bug_id": 40885, "creation_time": "2007-03-12T03:24:29Z", "is_private": false}]
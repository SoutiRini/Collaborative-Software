[{"count": 0, "tags": [], "bug_id": 53606, "attachment_id": null, "id": 160921, "time": "2012-07-26T16:15:05Z", "creator": "frederic.arnoud@gmail.com", "creation_time": "2012-07-26T16:15:05Z", "is_private": false, "text": "start(int) method initializes failureDetector (resp. staticMembers) only if TcpFailureDetector (resp. StaticMembershipInterceptor) was found in channel interceptors stack.\n\nWithout TcpFailureDetector (resp. StaticMembershipInterceptor), futur calls to sendPing() will fail because failureDetector (resp. staticMembers) wasn't initialized at least to new WeakReference<StaticMembershipInterceptor>(null).\n\nFix:\nv1) initializes weak references containers:\nReplace:\n    WeakReference<TcpFailureDetector> failureDetector = null;\n    WeakReference<StaticMembershipInterceptor> staticMembers = null;\nfor:\n    WeakReference<TcpFailureDetector> failureDetector = new WeakReference<TcpFailureDetector>();\n    WeakReference<StaticMembershipInterceptor> staticMembers = new WeakReference<StaticMembershipInterceptor>();\n\nv2) checks field before dereferencing it:\nsendPing becomes:\n    protected void sendPing() {\n        if (failureDetector!=null && failureDetector.get()!=null) {\n            //we have a reference to the failure detector\n            //piggy back on that dude\n            failureDetector.get().checkMembers(true);\n        }else {\n            if (staticOnly && staticMembers!=null && staticMembers.get()!=null) {\n                sendPingMessage(staticMembers.get().getMembers());\n            } else {\n                sendPingMessage(getMembers());\n            }\n        }\n    }\n\n\n\naffect also tomcat 6\nregards\nfred arnoud"}, {"count": 1, "tags": [], "text": "Sorry:\n\nForget first solution (v1) we cannot set a weak reference.\nNeed to modify sendPing method to check null pointer.\n\nregards\nfred", "is_private": false, "bug_id": 53606, "id": 160922, "time": "2012-07-26T16:21:11Z", "creator": "frederic.arnoud@gmail.com", "creation_time": "2012-07-26T16:21:11Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "frederic.arnoud@gmail.com", "text": "I used this solution:\n\n    protected void sendPing() {\n        TcpFailureDetector tcpFailureDetector = failureDetector!=null ? failureDetector.get() : null;\n        if (tcpFailureDetector!=null) {\n            //we have a reference to the failure detector\n            //piggy back on that dude\n            tcpFailureDetector.checkMembers(true);\n        }else {\n            StaticMembershipInterceptor staticMembershipInterceptor = staticOnly && staticMembers!=null ? staticMembers.get() : null;\n            if (staticMembershipInterceptor!=null) {\n                sendPingMessage(staticMembershipInterceptor.getMembers());\n            } else {\n                sendPingMessage(getMembers());\n            }\n        }\n    }", "id": 160923, "time": "2012-07-26T16:26:39Z", "bug_id": 53606, "creation_time": "2012-07-26T16:26:39Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "(In reply to comment #2)\n> I used this solution:\n> \n>     protected void sendPing() {\n>         TcpFailureDetector tcpFailureDetector = failureDetector!=null ?\n> failureDetector.get() : null;\n>         if (tcpFailureDetector!=null) {\n\nThat's nice; and better than v2 as it also protects against another possible NPE, i.e.:\n\nfailureDetector.get() can return null (it's a WeakReference, so get() can return null at any time).", "attachment_id": null, "bug_id": 53606, "id": 160924, "time": "2012-07-26T18:00:00Z", "creator": "sebb@apache.org", "creation_time": "2012-07-26T18:00:00Z", "is_private": false}, {"count": 4, "tags": [], "creator": "frederic.arnoud@gmail.com", "text": "You're right, only one access to get() for WeakReference (and brother classes).", "id": 160926, "time": "2012-07-26T18:36:18Z", "bug_id": 53606, "creation_time": "2012-07-26T18:36:18Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 160984, "time": "2012-07-29T21:52:02Z", "bug_id": 53606, "creation_time": "2012-07-29T21:52:02Z", "is_private": false, "text": "Fixed in trunk and 7.0.x and will be included in 7.0.30 onwards. Thanks for the patch."}, {"count": 6, "tags": [], "text": "Whoops. Re-open for Tomcat 6.", "is_private": false, "bug_id": 53606, "id": 160985, "time": "2012-07-29T21:54:46Z", "creator": "markt@apache.org", "creation_time": "2012-07-29T21:54:46Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "creator": "markt@apache.org", "is_private": false, "id": 161750, "time": "2012-08-27T21:35:31Z", "bug_id": 53606, "creation_time": "2012-08-27T21:35:31Z", "tags": [], "text": "Fixed in 6.0.x and will be included in 6.0.36 onwards."}]
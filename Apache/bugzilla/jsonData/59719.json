[{"count": 0, "tags": [], "creator": "greg.woolsey@gmail.com", "is_private": false, "text": "Created attachment 33959\npatch to properly parse static list validation constraints\n\nWhen you add a LIST type validation to a cell in Excel, and type a comma separated list of values to accept instead of using a range reference or named range, the value is stored in the XLSX sheet XML as a \"formula1\" string:\n\n\"one, two, three\"\n\nnamed ranges as list validation values are stored in formula1 as\n\nrange_name\n\nnote the lack of double quotes.\n\nCurrently, XSSFDataValidationConstraint just splits all \"formula1\" strings by comma.  This makes the first and last values include the double quotes, and all values contain any whitespace leading or trailing a comma.\n\nExcel automatically trims whitespace when parsing the CSV value strings.\n\nThe attached patch checks for and removes the enclosing quotes, and uses a compiled pattern to split by commas with optional whitespace.\n\nIf the formula isn't enclosed in double quotes, it is not parsed into the explicit values array.\n\nI can't tell from inspecting XLSX files how Excel knows whether a formula is a list of values or a range, other than the quotes, or falling back on a list if evaluating as a range fails.", "id": 191765, "time": "2016-06-18T05:30:05Z", "bug_id": 59719, "creation_time": "2016-06-18T05:30:05Z", "attachment_id": 33959}, {"count": 1, "tags": [], "creator": "onealj@apache.org", "text": "Applied in r1749129.\nCould you write a unit test that shows a scenario where the previous code failed and the patched code works?", "id": 191777, "time": "2016-06-19T04:45:14Z", "bug_id": 59719, "creation_time": "2016-06-19T04:45:14Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "I took a stab at writing a unit test in r1749131 given your description in comment 0. Please let me know if any changes are needed to the unit test, as I have never used DataValidationConstraints before.\n\nIf no changes are needed, let me know and I will close the bug.", "id": 191778, "time": "2016-06-19T06:13:00Z", "bug_id": 59719, "creation_time": "2016-06-19T06:13:00Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 59719, "text": "Created attachment 33964\nupdates to use constants, add comments, and another unit test case\n\nMy latest patch attachment uses the new QUOTE constant one more place and adds one more unit test, validating the formula1 value is set properly from the constructor that accepts an array of string literals.\n\nI think with these and your other tests and changes this is ready to go.  Why the OOXML format overloads formula1 this way is baffling to me.  I bet the old binary format had some similar form of overloading.", "id": 191792, "time": "2016-06-19T21:24:10Z", "creator": "greg.woolsey@gmail.com", "creation_time": "2016-06-19T21:24:10Z", "is_private": false, "attachment_id": 33964}, {"count": 4, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "It seems like there are more entry points to XSSFDataValidation than necessary, and each of the entry points end up initializing the member variables in subtly different ways (leading left quote gets stripped, both quotes get stripped, neither quote gets stripped; whitespace is removed or not removed from the formula, etc).\n\nAdditionally, even if the storage format overloads formula1, it doesn't mean we need to overload it.\n\nSince you have experience with this class, could you provide a recommendation on what constructors or methods should be deprecated to make this class both easier to maintain and fool-proof for users to use? Save that for a future bug, I guess.\n\nApplied via r1749265.", "id": 191814, "time": "2016-06-20T05:01:56Z", "bug_id": 59719, "creation_time": "2016-06-20T05:01:56Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Tomcat 7 log's this when doing a shutdown:\n\nThe web application [/MyApp] created a ThreadLocal with key of type [org.apache.log4j.helpers.ThreadLocalMap] (value [org.apache.log4j.helpers.ThreadLocalMap@1d3e069]) and a value of type [java.util.Hashtable] (value [{}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\n\nI'm using it the following way:\n\ntry {\n  if (MDC.get(..) == null) {\n    MDC.put(.., ...);\n  }\n   ....\n  } finally {\n     MDC.remove(...);\n  }\n\nAfter taking a quick look at the source of log4j i think the problem is that remove only removes the entry from the HashTable but does not call remove on the ThreadLocal itself.", "is_private": false, "id": 142776, "creator": "kukudas85@googlemail.com", "time": "2010-12-16T10:33:00Z", "bug_id": 50486, "creation_time": "2010-12-16T10:33:00Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "delagarza@gmail.com", "is_private": false, "id": 144095, "time": "2011-02-09T10:52:34Z", "bug_id": 50486, "creation_time": "2011-02-09T10:52:34Z", "tags": [], "text": "I had the same problem. However, in one of tomcat's filters, I make sure that, for each request, the MDC gets cleared.\n\npublic final void doFilter(...) throws IOException, ServletException {\n    MDC.clear();\n}\n\nWhen I shutdown tomcat, more often than not, I can see the same messages on the console log. I agree on what kuku said. The code that is \"clearing\" MDC looks like:\n\nprivate\n  void clear0() {\n    if(!java1 && tlm != null) {\n      Hashtable ht = (Hashtable) ((ThreadLocalMap)tlm).get();\n      if(ht != null) {\n        ht.clear();\n      } \n    }\n  }\n\nI think the following code would fix it:\n\nprivate\n  void clear0() {\n    if(!java1 && tlm != null) {\n      Hashtable ht = (Hashtable) ((ThreadLocalMap)tlm).get();\n      if(ht != null) {\n        ht.clear();\n      }\n      // clear the thread local map \n      ((ThreadLocalMap)tlm).remove();\n    }\n  }"}, {"count": 2, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 145080, "time": "2011-03-18T06:29:30Z", "bug_id": 50486, "creation_time": "2011-03-18T06:29:30Z", "is_private": false, "text": "I raised this issue before on the dev list: http://www.mail-archive.com/log4j-dev@logging.apache.org/msg11378.html"}, {"count": 3, "tags": [], "creator": "dtn-asfbugs@corefiling.co.uk", "attachment_id": null, "id": 149520, "time": "2011-09-20T11:29:05Z", "bug_id": 50486, "creation_time": "2011-09-20T11:29:05Z", "is_private": false, "text": "Any prospect of this being fixed any time soon? If I submitted a patch based on calling the ThreadLocal remove() method (by reflection for JDK1.4 compatibility), would it be accepted?"}, {"count": 4, "tags": [], "creator": "nestor.urquiza@gmail.com", "attachment_id": null, "id": 150083, "time": "2011-10-03T16:38:28Z", "bug_id": 50486, "creation_time": "2011-10-03T16:38:28Z", "is_private": false, "text": "Tomcat 7 logs the problem as SEVERE. That is actually good as this is probably a problem affecting Tomcat 6 with memory leaks.\n\nI vote for a fix on this.\n\nThanks!\n-Nestor"}, {"count": 5, "tags": [], "creator": "r.oosterholt@gmail.com", "attachment_id": null, "id": 151149, "time": "2011-11-03T15:05:21Z", "bug_id": 50486, "creation_time": "2011-11-03T15:05:21Z", "is_private": false, "text": "I've tested the suggested patch by chahuistle (on 2011-02-09) and it works like a charm.\n\nI vote for a fix on this.\n\nThanks!\n-Rick"}, {"count": 6, "tags": [], "bug_id": 50486, "attachment_id": 28091, "text": "Created attachment 28091\nsubmit a patch for memory leak in application server\n\nThis patch file just contains the \"((ThreadLocalMap)tlm).remove();\" to fix the problem below:\n\nSEVERE: The web application [/my_app] created a ThreadLocal with key of type [org.apache.log4j.helpers.ThreadLocalMap] (value [org.apache.log4j.helpers.ThreadLocalMap@568614]) and a value of type [java.util.Hashtable] (value [{userId=:unknown:, monitorID=0000000000000000}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.\nDec 19, 2011 12:02:09 AM org.apache.catalina.loader.WebappClassLoader clearThreadLocalMap", "id": 152321, "time": "2011-12-20T15:03:20Z", "creator": "yingchun_chen@ibi.com", "creation_time": "2011-12-20T15:03:20Z", "is_private": false}, {"count": 7, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 152765, "time": "2012-01-13T22:41:50Z", "bug_id": 50486, "creation_time": "2012-01-13T22:41:50Z", "is_private": false, "text": "applied with rv1231361, will come with 1.2.17.\n\nThanks for the patch!"}, {"count": 8, "tags": [], "bug_id": 50486, "attachment_id": null, "text": "This patch needs to be reverted or modified. The patch as applied requires Java 5 and will throw exceptions in earlier versions. Log4j 1.x supports very old JDKs.", "id": 152787, "time": "2012-01-14T20:07:59Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2012-01-14T20:07:59Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 50486, "text": "I'm monitoring this report for quiet some time now and I don't understand the problem why it is not fixed.\n\nThis is one of the major sources of memory leaks in tomcat which bugges every developer for quiet some time now.\n\nThe fix would be something like a 3-liner and is a complete no-brainer: simply call the remove method via reflections if it exists. \n\nSo here is the \"patch\":\n\ntry {\n  ThreadLocalMap.class.getMethod( \"remove\" ).invoke( tlm );\n} catch( NoSuchMethodException e ){\n  // Do nothing\n}\n\nThis won't fix the bug for the 1.4 people but for the 90% of the rest of us which aren't bound to old problems anyway.\n\nSo please please fix this.", "id": 153144, "time": "2012-01-25T17:23:23Z", "creator": "f.bantner@axon-e.de", "creation_time": "2012-01-25T17:23:23Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "text": "Is there a particular reason I can't vote for this bug (as I usually can in bugzilla)? I guess votes would be through the roof if voting was activated/allowed...\nDo you (log4j devs) really want all of us affected user to create our own custom log4j version just to incorporate this fix?", "attachment_id": null, "bug_id": 50486, "id": 153156, "time": "2012-01-25T18:52:46Z", "creator": "marcel@frightanic.com", "creation_time": "2012-01-25T18:52:46Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 50486, "text": "The patch was modified by Christian on Jan 17 so that it won't break old JDKs. You should be able to get the source from subversion and use it.", "id": 153160, "time": "2012-01-25T21:32:07Z", "creator": "Ralph.Goers@dslextreme.com", "creation_time": "2012-01-25T21:32:07Z", "is_private": false, "attachment_id": null}, {"id": 153165, "tags": [], "bug_id": 50486, "attachment_id": null, "count": 12, "text": "Ok, the patch was accepted, modified and applied I get that.\na) Shouldn't this ticket be marked as 'resolved'?\nb) What's the ETA for 1.2.17?\n\nAlso, I believe there's a second issue. The way it's implemented right know clients must explicitly call MDC.clear(). Couldn't/shouldn't remove() call clear() internally once the last item was removed()?\nHow do clients know when to call clear()? In a request processing chain (e.g. Servlet filter) several parties may write items and each one of them is responsible to call remove() for the items it added. On the way it items are added, on the way out they're removed in reverse order. And the last guy closes the door i.e. calls clear(). However, how does a client know that he's the last?", "time": "2012-01-25T22:10:41Z", "creator": "marcel@frightanic.com", "creation_time": "2012-01-25T22:10:41Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 50486, "text": "Hello Marcel,\n\n1) yes- but lets wait if other devs have comments to your questions below. I reposted them to the ml\n\n2) I think the release should happen immediately after we agree on this fix. I have volunteered to make this release, but haven't done this before. I cannot give you a date, but I will try to release a few days after your questions are answered and after everybody agrees to the content of 1.2.17\n\nCheers\nChristian", "id": 153166, "time": "2012-01-25T22:36:07Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-01-25T22:36:07Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 50486, "text": "One month passed - any news for the 1.2.17 release?", "id": 154068, "time": "2012-02-23T14:17:13Z", "creator": "patric@rufflar.com", "creation_time": "2012-02-23T14:17:13Z", "is_private": false, "attachment_id": null}, {"count": 15, "tags": [], "creator": "maarten@apache.org", "attachment_id": 28436, "id": 154657, "time": "2012-03-07T22:04:33Z", "bug_id": 50486, "creation_time": "2012-03-07T22:04:33Z", "is_private": false, "text": "Created attachment 28436\nclear the MDC when last key is removed + testcase\n\nI agree that remove() should call clear when the last key was removed for the reason described by marcel@frightanic.com \n\nI have attached a trivial fix and a small test-case with a simplified version of the code that tomcat uses to check for memory leaks."}, {"count": 16, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 154677, "time": "2012-03-08T07:52:19Z", "bug_id": 50486, "creation_time": "2012-03-08T07:52:19Z", "is_private": false, "text": "Ok, what else is still missing before 1.2.17 will see daylight?"}, {"count": 17, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 154692, "time": "2012-03-08T10:49:28Z", "bug_id": 50486, "creation_time": "2012-03-08T10:49:28Z", "is_private": false, "text": "I will give it a next try end of next week."}, {"attachment_id": null, "tags": [], "bug_id": 50486, "text": "@Maarten Bosteels: I looked at this patch, feels good to me. Will include it with 1.2.17 (except others have objections).\n\nCheers + Thanks!", "count": 18, "id": 154693, "time": "2012-03-08T10:54:42Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-03-08T10:54:42Z", "is_private": false}, {"id": 158203, "tags": [], "bug_id": 50486, "attachment_id": null, "count": 19, "text": "Maarteen,\n\nI made your change in MDC.java, recompiled the code with the build.xml and created new log4j.jar and still get errors in a Struts 2 application running on Tomcat:\n\ncreated a ThreadLocal with key of type [org.apache.log4j.helpers.ThreadLocalMap] (value [org.apache.log4j.helpers.ThreadLocalMap@13c339f]) and a value of type [java.util.Hashtable] (value [{userId=jo2372}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.", "time": "2012-04-19T15:09:26Z", "creator": "ohara.jt@gmail.com", "creation_time": "2012-04-19T15:09:26Z", "is_private": false}, {"count": 20, "tags": [], "creator": "garydgregory@gmail.com", "text": "Do we still need org.apache.log4j.helpers.Loader.java1? It looks to be for Java 1.1, right?\n\nIt seems to add a lot code in the area we are discussing.", "id": 158204, "time": "2012-04-19T16:59:24Z", "bug_id": 50486, "creation_time": "2012-04-19T16:59:24Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 158216, "time": "2012-04-20T09:48:02Z", "bug_id": 50486, "creation_time": "2012-04-20T09:48:02Z", "is_private": false, "text": "We have vote recently to drop jdk 1.3 - means, no, we don't need to take care on Java 1.1 anymore (thanks heaven). \n\nThis also makes the patch easier, because in the current version I took care on jdk 1.3 users."}, {"count": 22, "tags": [], "text": "Ehm, before remove java1 we should check if problems occur with java 1.4. \nI just saw the \"ThreadLocalMap\" class does offer \"remove\" only with jdk5.", "attachment_id": null, "bug_id": 50486, "id": 158668, "time": "2012-04-30T15:07:35Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-04-30T15:07:35Z", "is_private": false}, {"count": 23, "attachment_id": null, "creator": "grobmeier@gmail.com", "is_private": false, "id": 158778, "time": "2012-05-03T11:31:49Z", "bug_id": 50486, "creation_time": "2012-05-03T11:31:49Z", "tags": [], "text": "fixed with 1.2.17"}, {"count": 24, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 158779, "time": "2012-05-03T11:51:41Z", "bug_id": 50486, "creation_time": "2012-05-03T11:51:41Z", "is_private": false, "text": "Thanks! Would anyone be so kind and push this to Maven central?\nI see the release is done (http://svn.apache.org/viewvc/logging/log4j/tags/log4j-1.2.17/) but neither http://logging.apache.org/log4j/1.2/download.html nor Maven central lists 1.2.17 yet."}, {"count": 25, "tags": [], "bug_id": 50486, "text": "Hello Marcel,\n\nat the ASF we need to vote on our releases. I have create a first RC candidate before 2 days, but need to create another one today. Then add 72 hours voting time to it. After that I can push it to maven. So sorry, it needs another little while, but we are close :-)\n\nWe will send an announcement to our users mailinglist and the dev list - feel free to join :-). In addition we will announce it on our blog:\nhttp://blogs.apache.org/logging/\n\nCheers\nChristian", "id": 158780, "time": "2012-05-03T11:58:46Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-03T11:58:46Z", "is_private": false, "attachment_id": null}, {"id": 159045, "tags": [], "bug_id": 50486, "attachment_id": null, "count": 26, "text": "Hi: any word on this release? Would love to cross this problem off my list. Thanks for your hard work! John", "time": "2012-05-14T19:46:32Z", "creator": "caron@unidata.ucar.edu", "creation_time": "2012-05-14T19:46:32Z", "is_private": false}, {"count": 27, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 159046, "time": "2012-05-14T19:49:32Z", "bug_id": 50486, "creation_time": "2012-05-14T19:49:32Z", "is_private": false, "text": "(In reply to comment #26)\n> Hi: any word on this release? Would love to cross this problem off my list.\n> Thanks for your hard work! John\n\nYou need to follow the thread \"[VOTE] Release log4j 1.2.17 RC3\" at http://mail-archives.apache.org/mod_mbox/logging-log4j-dev/201205.mbox/browser"}, {"id": 159263, "tags": [], "bug_id": 50486, "attachment_id": null, "count": 28, "text": "It\u2019s almost frightening how long it takes for such a popular and widely used project to get a new release out.\n\nIt\u2019s even more alarming that the reason for the delay is that they do not know how to build the release package anymore (see above mentioned thread at the mailing list for details).", "time": "2012-05-23T20:52:47Z", "creator": "mattias.ordboken@gmx-topmail.de", "creation_time": "2012-05-23T20:52:47Z", "is_private": false}, {"count": 29, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 159280, "time": "2012-05-24T05:58:18Z", "bug_id": 50486, "creation_time": "2012-05-24T05:58:18Z", "is_private": false, "text": "Hi Mattias,\n\nthe log4j build is highly complex due to windows dll building. Imagine a build system which has grown for the last 10 years or so. This is an issue which must be fixed soon. Actually there are people who know how to build it, but as we are a small team of volunteers we are in the bad situation that we still miss a required +1.\n\nOnce we have this release out I will put pressure on the refactoring of the log4j build system. It actually must become easier, otherwise it will become more and more difficult to release log4j1.\n\nYou are welcome to the project if you want to help us. Please join the log4j-dev mailinglist.\n\nCheers\nChristian"}, {"count": 30, "tags": [], "bug_id": 50486, "attachment_id": null, "id": 159397, "time": "2012-05-28T14:42:34Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-28T14:42:34Z", "is_private": false, "text": "Hello all, \n1.2.17 is in the wild and can be downloaded now.\nthanks for your patience\nCheers!"}, {"count": 31, "tags": [], "bug_id": 50486, "text": "(In reply to comment #30)\n> Hello all, \n> 1.2.17 is in the wild and can be downloaded now.\n> thanks for your patience\n> Cheers!\n\nAre the updated files at:\nhttp://logging.apache.org/log4j/1.2/download.html\n\nTried the jar, still getting ...[webapp] created a ThreadLocal with key of type [org.apache.log4j.helpers.ThreadLocalMap] (value [org.apache.log4j.helpers.ThreadLocalMap@f6af3b]) and a value of type [java.util.Hashtable] (value [{userId=jo2372}]) but failed to remove it when the web application was stopped. This is very likely to create a memory leak.", "id": 159461, "time": "2012-05-29T15:13:21Z", "creator": "ohara.jt@gmail.com", "creation_time": "2012-05-29T15:13:21Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "creator": "garydgregory@gmail.com", "attachment_id": null, "id": 159468, "time": "2012-05-29T18:00:48Z", "bug_id": 50486, "creation_time": "2012-05-29T18:00:48Z", "is_private": false, "text": "I know this may be difficult to do, but can you provide a unit test so we can make sure we get it fixed for good?"}, {"count": 33, "tags": [], "text": "It took one and a half year to \"fix\" this bug, two months to get a release out and now the issue is still occurring?\n\nI must be dreaming - this cannot be true! \n\nHas nobody tested this fix by just putting a simple war (which is putting some MDC value, logging only one line) to a fairly modern tomcat instance, start and stop the app and just took a look at the log files?\n\nMy feelings about this project is getting even worse.\nSorry for the rant...", "attachment_id": null, "bug_id": 50486, "id": 159476, "time": "2012-05-29T20:47:25Z", "creator": "mattias.ordboken@gmx-topmail.de", "creation_time": "2012-05-29T20:47:25Z", "is_private": false}, {"count": 34, "tags": [], "creator": "garydgregory@gmail.com", "text": "@Mattias Would you be willing to redirect you energy away from ranting ;) and towards patch writing? Unit tests are king. With a reproducible test case, we can try different solutions.", "id": 159481, "time": "2012-05-30T02:02:11Z", "bug_id": 50486, "creation_time": "2012-05-30T02:02:11Z", "is_private": false, "attachment_id": null}, {"count": 35, "tags": [], "creator": "Ralph.Goers@dslextreme.com", "text": "I hate to ask the obvious, but was MDC.remove() called for all the items? I notice that the message Jim is getting still has a userId. The fix for this issue removes the underlying Hashtable only when all the MDC values are removed.", "id": 159482, "time": "2012-05-30T03:09:43Z", "bug_id": 50486, "creation_time": "2012-05-30T03:09:43Z", "is_private": false, "attachment_id": null}, {"count": 36, "attachment_id": null, "creator": "grobmeier@gmail.com", "text": "Isn't that what clear() is for?\n\nWhen somebody calls clear() then ThreadLocal.remove() is called which should remove the whole map. Imho on container shutdown MDC.clear() should be called. Therefore I would think \n\n1) Hierarchy.shutdown() should call MDC.clear()\n2) MDC.clear should do this after clearing: MDC.mdc = new MDC();\n\nWdyt?", "id": 159483, "time": "2012-05-30T05:05:15Z", "bug_id": 50486, "creation_time": "2012-05-30T05:05:15Z", "tags": [], "is_private": false}, {"count": 37, "tags": [], "creator": "Ralph.Goers@dslextreme.com", "text": "Yes, that is what clear is for.\n\nI don't see how Hierarchy.shutdown() can call MDC.clear(). Well, it could but it would only clear the thread the shutdown is performed on which isn't likely to help much.\n\nItem 2 is likely to cause many problems.  MDC.clear only clears the current thread's ThreadLocal. Reinitializing the MDC will cause problems for all the other threads.", "id": 159486, "time": "2012-05-30T05:26:23Z", "bug_id": 50486, "creation_time": "2012-05-30T05:26:23Z", "is_private": false, "attachment_id": null}, {"count": 38, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 159488, "time": "2012-05-30T06:43:52Z", "bug_id": 50486, "creation_time": "2012-05-30T06:43:52Z", "is_private": false, "text": "Jim, it seems the usual way to hold your memory clean is to call the clear() method appropriate.\n\nRalph Goers explained on the mailinglist:\n\n>> All the MDC is is a ThreadLocal where each Thread has its own Map associated\n>> with the ThreadLocal. You can get and put all you want. In a webapp, of\n>> course, if you add stuff to the MDC at the beginning of a request then you\n>> need to remove it all at the end of the request.  The normal pattern is\n>>\n>> MDC.put(key, value);\n>> try {\n>>    call servlet\n>> } finally {\n>>   MDC.remove(key);\n>> }\n\nAs far as I understand it, using the MDC.clear() method should help you in this case (with 1.2.17). In a servlet environment, you might want to put this code into the Servlet.destroy() method:\n\nhttp://docs.oracle.com/javaee/6/api/javax/servlet/Servlet.html#destroy()\n\n\"This method gives the servlet an opportunity to clean up any\nresources that are being held (for example, memory, file handles,\nthreads)\"\n\nCould you try out if that helps you? If it does, we'll provide accordingly documentation and finally close the issue afterwards. If it does not, we'll do some more bug hunting.\n\nThank you!"}, {"count": 39, "tags": [], "bug_id": 50486, "text": "In comment #12 I raised this issue before...\n\"Couldn't/shouldn't remove() call clear() internally once the last item was removed()?\" For the reasons given in my comment (Servlet filter chain) you want to clear the MDC/ThreadLocal with each thread and not just when the Servlet/web app is destroyed.\n\nWith comment #15 a patch was supplied that promises to do just that?", "id": 159491, "time": "2012-05-30T06:52:09Z", "creator": "marcel@frightanic.com", "creation_time": "2012-05-30T06:52:09Z", "is_private": false, "attachment_id": null}, {"count": 40, "tags": [], "creator": "grobmeier@gmail.com", "text": "Hi Marcel,\n\nthis patch is actually applied (slightly modified):\n\nhttp://svn.apache.org/repos/asf/logging/log4j/trunk/src/main/java/org/apache/log4j/MDC.java\n\n private void remove0(String key) {\n        if (!java1 && tlm != null) {\n            Hashtable ht = (Hashtable) ((ThreadLocalMap) tlm).get();\n            if (ht != null) {\n                ht.remove(key);\n                // clean up if this was the last key\n                if (ht.isEmpty()) {\n                    clear0();\n                }\n            }\n        }\n    }\n\n\nIf the Hashtable is empty after key removal, the clear0() method is called.\n\nDo you agree?", "id": 159492, "time": "2012-05-30T07:09:42Z", "bug_id": 50486, "creation_time": "2012-05-30T07:09:42Z", "is_private": false, "attachment_id": null}, {"count": 41, "tags": [], "text": "(In reply to comment #38)\n> [...] In a servlet environment, you might want to put\n> this code into the Servlet.destroy() method:\n\nI don't think that calling the clear method in the servlet's destroy method does the job. The destroy method may be invoked by a background thread of the application server and would remove the ThreadLocal value only from this background thread, not form the HTTP worker threads.\n\nI agree with Marcel that a servlet filter is the best option:\n\npublic class ClearMDCFilter implements Filter {\n\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\ttry {\n\t\t\tchain.doFilter(request, response);\n\t\t} finally {\n\t\t\tMDC.clear();\n\t\t}\n\t}\n\n\t[...]\n\n}\n\nThis way, you don't have to care about removing all keys you set somewhere in your code.", "attachment_id": null, "id": 159493, "creator": "stephan.markwalder@appway.com", "time": "2012-05-30T07:13:01Z", "bug_id": 50486, "creation_time": "2012-05-30T07:13:01Z", "is_private": false}, {"count": 42, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 159495, "time": "2012-05-30T07:16:39Z", "bug_id": 50486, "creation_time": "2012-05-30T07:16:39Z", "is_private": false, "text": "(In reply to comment #40)\n> Hi Marcel,\n> \n> this patch is actually applied (slightly modified):\n> \n> http://svn.apache.org/repos/asf/logging/log4j/trunk/src/main/java/org/apache/\n> log4j/MDC.java\n> \n>  private void remove0(String key) {\n>         if (!java1 && tlm != null) {\n>             Hashtable ht = (Hashtable) ((ThreadLocalMap) tlm).get();\n>             if (ht != null) {\n>                 ht.remove(key);\n>                 // clean up if this was the last key\n>                 if (ht.isEmpty()) {\n>                     clear0();\n>                 }\n>             }\n>         }\n>     }\n> \n> \n> If the Hashtable is empty after key removal, the clear0() method is called.\n> \n> Do you agree?\n\nYes, looks good to me. I just mentioned it again because calling clean() in Servlet#destroy() doesn't make sense in my opinion. In fact, clients shouldn't have to call clean() at all if they properly call remove() for each key they add."}, {"count": 43, "tags": [], "bug_id": 50486, "attachment_id": null, "id": 159496, "time": "2012-05-30T07:18:01Z", "creator": "marcel@frightanic.com", "creation_time": "2012-05-30T07:18:01Z", "is_private": false, "text": "In reply to comment #42)\n> Yes, looks good to me. I just mentioned it again because calling clean() in\n> Servlet#destroy() doesn't make sense in my opinion. In fact, clients\n> shouldn't have to call clean() at all if they properly call remove() for\n> each key they add.\n\nSorry, make that clear() instead of clean()."}, {"count": 44, "tags": [], "bug_id": 50486, "text": "Thanks Stephan, I agree with you guys. I will use your code snippet for the FAQ.\n\nThanks Marcel for confirming the change.\n\nOnce the FAQ entry is ready, I will close this issue again with the appropriate link.", "id": 159497, "time": "2012-05-30T07:19:14Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-30T07:19:14Z", "is_private": false, "attachment_id": null}, {"count": 45, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 159499, "time": "2012-05-30T07:32:29Z", "bug_id": 50486, "creation_time": "2012-05-30T07:32:29Z", "is_private": false, "text": "(In reply to comment #44)\n> Thanks Stephan, I agree with you guys. I will use your code snippet for the\n> FAQ.\n\nWhile Stephan's code certainly is correct (actually, log4j could provide that filter) and does the job I wouldn't be happy to see this mentioned prominently in the FAQ. \n\nYou should make clear to users that if using Servlet filters the proper pattern is something like\n\ntry {\n    MDC.put(myKey);\n    chain.doFilter(request, response);\n} finally {\n    MDC.remove(myKey);\n}\n\nWith Stephan's filter you have to be careful to configure it in the right position in web.xml (they're processed sequentially in configuration order). If the filter runs before the last piece of code that depends on the MDC is completed you're in trouble."}, {"count": 46, "tags": [], "bug_id": 50486, "text": "I can confirm that the memory leak has been fixed for our product after upgrading to 1.2.17. I tested with Tomcat 7.0.26 running on an Oracle JVM 1.6.0_23 on Windows 7.\n\nThanks to all the people contributing to this fix! You made my day!", "id": 159500, "time": "2012-05-30T07:36:27Z", "creator": "stephan.markwalder@appway.com", "creation_time": "2012-05-30T07:36:27Z", "is_private": false, "attachment_id": null}, {"count": 47, "tags": [], "bug_id": 50486, "attachment_id": null, "id": 159512, "time": "2012-05-30T08:58:20Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-30T08:58:20Z", "is_private": false, "text": "Thank you Stephan for retesting and confirming the fix! It really helped!\nKudos also to Marcel for your help.\n\nI just added some docs to the MDC javadoc and the FAQ. Please let me know if you would like to see some changes.\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1344155"}, {"count": 48, "tags": [], "creator": "patric@rufflar.com", "text": "What if you do not know which key/value pairs have been put to the MDC (if you think of 3rd party libraries, runtime dependent logic etc.)?\n\nIs calling MDC.clear() at the end of doFilter() of a servlet filter sufficient?\n\nI am really looking forward to some kind of Log4j shutdown method  (which should be called during servlet context shutdown) which ensures that all ThreadLocal objects have been removed.", "id": 159513, "time": "2012-05-30T09:14:32Z", "bug_id": 50486, "creation_time": "2012-05-30T09:14:32Z", "is_private": false, "attachment_id": null}, {"count": 49, "tags": [], "creator": "grobmeier@gmail.com", "attachment_id": null, "id": 159514, "time": "2012-05-30T09:22:53Z", "bug_id": 50486, "creation_time": "2012-05-30T09:22:53Z", "is_private": false, "text": "You can receive all the keys with doing:\n\nMDC.getContext();\n\nIt returns a Hashmap. For each key in the Hashmap, call remove(key).\n\nIf you have ideas for such a shutdown() Method, please propose it on log4j-dev\n\nCheers!"}, {"attachment_id": null, "tags": [], "bug_id": 50486, "text": "@grobmeier\n\nYou missed a question in my last comment:\nIs calling MDC.clear() at the end of doFilter() of a servlet filter sufficient?\n\n\nIMHO (just took a quick look at the source), a shutdown() method should just set the field MDC.tlm to null (which references the ThreadLocalMap) - it should be a one-liner.", "count": 50, "id": 159518, "time": "2012-05-30T09:45:14Z", "creator": "patric@rufflar.com", "creation_time": "2012-05-30T09:45:14Z", "is_private": false}, {"count": 51, "tags": [], "bug_id": 50486, "attachment_id": null, "text": "@Patric:\n\nyes I missed your question. Calling MDC.clear() does clear all values from the underlying hashtable and afterwards calls the remove method (if available, which is from java > 1.4). So yes, it should be enough.\n\nWhere should the shutdown method reside? In MDC? What is the benefit over clear()? The shutdown method would only affect the current thread btw - other threads would keep the tlm.", "id": 159521, "time": "2012-05-30T10:45:49Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-30T10:45:49Z", "is_private": false}, {"count": 52, "tags": [], "bug_id": 50486, "text": ">Where should the shutdown method reside? In MDC? \n\nWithin MDC would be ok, but for a matter of good design I would put this on an higher level, e.g. inside LogManager.shutdown()\n\n\n>What is the benefit over clear()? \n>The shutdown method would only affect the current thread btw - other threads >would keep the tlm.\n\nIn fact, the opposite is true:\nFrom a real-world perspective, all we need is one method which cares about all threads. This method would be called (for example) in the contextDestroyed() method of a web application and would ensure that the application will never leak again after it has been shut down.\n\nIMHO, this would be a one-liner. (just set tlm to null - instead of calling tlm.remove()).", "id": 159532, "time": "2012-05-30T14:55:57Z", "creator": "patric@rufflar.com", "creation_time": "2012-05-30T14:55:57Z", "is_private": false, "attachment_id": null}, {"id": 159538, "tags": [], "bug_id": 50486, "attachment_id": null, "count": 53, "text": "(In reply to comment #52)\n> From a real-world perspective, all we need is one method which cares about\n> all threads.\n\nI claim to live in the same real world as you but my perspective is still different. It's called /Thread/Local for a reason. The one thread that adds anything to MDC is responsible for removing it afterwards. If a thread doesn't clean up behind itself it leaves it up for someone else to do the dirty work - not nice.\nWhat you propose is IMO nothing but a fallback for applications that don't adhere to that simple pattern. If log4j offered code for this it would actually discourage folks to use MDC the way it is supposed to be used.", "time": "2012-05-30T17:56:23Z", "creator": "marcel@frightanic.com", "creation_time": "2012-05-30T17:56:23Z", "is_private": false}, {"count": 54, "tags": [], "creator": "patric@rufflar.com", "attachment_id": null, "id": 159540, "time": "2012-05-30T19:21:40Z", "bug_id": 50486, "creation_time": "2012-05-30T19:21:40Z", "is_private": false, "text": ">If a thread doesn't clean up behind itself it leaves it up for someone else to >do the dirty work - not nice.\nI totally agree - that's way it should be.\nUnfortunately this seems not clear for everybody and there will always be enough code around (e.g. 3rd party libraries) which violates this principle (just look at this bug - it took a long time to get log4j cleaning up the resources it acquired)\n\n>What you propose is IMO nothing but a fallback for applications that don't adhere to that simple pattern.\nYes, that's true. But a failsafe which prevents a crash of a production server is better than insisting a perfect world.\n\nAnd a shutdown procedure that has some effect on other threads is not uncommon - almost any shutdown() I am aware of concerns the outer world/other threads aswell (if you think of connection pools, application servers, operating systems...)."}, {"count": 55, "tags": [], "creator": "stephan.markwalder@appway.com", "attachment_id": null, "id": 159548, "time": "2012-05-31T08:56:26Z", "bug_id": 50486, "creation_time": "2012-05-31T08:56:26Z", "is_private": false, "text": "I don't think that setting tlm = null on shutdown would make a big difference.\n\nWhen your web application is undeployed, all classes loaded by the web app's classloader should get unloaded and GC'ed, including the log4j classes. Once the MDC class has been unloaded, the MDC singleton instance and the ThreadLocal instance referenced by it should get collected. And once the ThreadLocal instance is gone, all values stored for worker threads of the application server may get collected as well.\n\nIf you deploy log4j in a way that multiple web applications may share a common logger hierarchy, you don't want to call shutdown when you undeploy one of the web applications. A shutdown would affect the other web applications.\n\nOr do I miss something?"}, {"attachment_id": null, "tags": [], "bug_id": 50486, "text": ">Or do I miss something?\n\nI suppose you are.\nI'll let some details out but I hope that this helps nevertheless:\n\nThe problem is that a ThreadLocal is always implicitly strongly referenced by the thread which it's tied to (until the thread dies).\nBecause most application servers used thread pools the thread will most probably remain alive.\n\nAs a result, a reference to the ThreadLocal is still kept.\nIf the ThreadLocal references an object of the web application, the web application classloader can also not be garbage collected and most of the memory of the (already shut down) application cannot be freed.\n\nThis is exactly the reason why tomcats memory leak detection mechanism is correctly issuing the warning (which this bug report is about).", "count": 56, "id": 159549, "time": "2012-05-31T09:44:59Z", "creator": "patric@rufflar.com", "creation_time": "2012-05-31T09:44:59Z", "is_private": false}, {"count": 57, "tags": [], "bug_id": 50486, "text": "Folks,\n\nI would like to suggest you to bring this discussion to the mailinglist: log4j-dev@logging.apache.org\n\nAt the moment this discussion gets only a low exposure as we are mainly discussing new features on the mailinglist (and not on closed issues :-))\n\nCheers!\nChristian", "id": 159551, "time": "2012-05-31T09:58:39Z", "creator": "grobmeier@gmail.com", "creation_time": "2012-05-31T09:58:39Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 50486, "text": "Thanks very much for this fix.\n\nNow I have to get slf4j to implement this, too and then I can check another point on my todo: http://bugzilla.slf4j.org/show_bug.cgi?id=266", "count": 58, "id": 160664, "time": "2012-07-16T07:32:40Z", "creator": "f.bantner@axon-e.de", "creation_time": "2012-07-16T07:32:40Z", "is_private": false}, {"count": 59, "tags": [], "bug_id": 50486, "text": "Anybody knows which slf4j version I should be picking up in order to have this fix? Currently I'm using 1.7.5\n\nThanks,\n- Jay", "id": 186395, "time": "2015-11-16T13:50:08Z", "creator": "jay.khimani@gmail.com", "creation_time": "2015-11-16T13:50:08Z", "is_private": false, "attachment_id": null}, {"count": 60, "tags": [], "creator": "garydgregory@gmail.com", "text": "Why not use the latest?", "id": 186398, "time": "2015-11-16T15:20:13Z", "bug_id": 50486, "creation_time": "2015-11-16T15:20:13Z", "is_private": false, "attachment_id": null}, {"count": 61, "tags": [], "creator": "marcel@frightanic.com", "attachment_id": null, "id": 186399, "time": "2015-11-16T18:24:17Z", "bug_id": 50486, "creation_time": "2015-11-16T18:24:17Z", "is_private": false, "text": "(In reply to Gary Gregory from comment #60)\n> Why not use the latest?\n\nBecause you probably don't want the test yourself whether the leak still exists if you could simply check the issue list: http://jira.qos.ch/browse/SLF4J-257 - still open."}]
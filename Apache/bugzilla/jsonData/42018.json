[{"count": 0, "tags": [], "bug_id": 42018, "text": "I have a \"JDBC Connection Configuration\" with autocommit=false.\nThere are various JDBC Requests using this connection configuration.\n\nI've done some database traces and it looks like every JDBC request is commited.\nSo the autocommit parameter on the \"JDBC Connection Configuration\" has no effect\non the commit behaviour of the \"JDBC Request\".", "id": 101317, "time": "2007-04-02T03:31:37Z", "creator": "fullref@gmail.com", "creation_time": "2007-04-02T03:31:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 42018, "text": "Created attachment 20035\nset auto-commit configuration parameter at the same level as pool-controller\n\nI've checked this and you are right. There is a bug on the\nDataSourceElement.java . The code tries to se the \"auto-commit\" attribute as\npart of pool-controller but auto-commit doesn't belong to pool-controller it\nshould be a sibling of pool-controller. This becomes clear taking a look to the\nexcalibur-datasource-1.1.1.jar source code ResourceLimitingJdbcDataSource.java\n, more precisely the lines\n*** final Configuration controller = configuration.getChild( \"pool-controller\"\n);\n\n*** final boolean autoCommit = configuration.getChild( \"auto-commit\"\n).getValueAsBoolean( true );\n\nLooking at those lines is evident that pool-controller and auto-commit are\nsiblings and auto-commit shouldn't be added as a child of pool-controller\n\nI'm providing a patch attached that solves the issue.", "id": 102276, "time": "2007-04-24T23:49:00Z", "creator": "ruben.laguna@gmail.com", "creation_time": "2007-04-24T23:49:00Z", "is_private": false, "attachment_id": 20035}, {"count": 2, "tags": [], "bug_id": 42018, "attachment_id": null, "is_private": false, "id": 102277, "time": "2007-04-25T00:32:49Z", "creator": "ruben.laguna@gmail.com", "creation_time": "2007-04-25T00:32:49Z", "text": "(In reply to comment #1)\n\nBy the way, Is there any possibility of replacing the excalibur connection\npooling with more popular solutions as proposed in\nhttp://wiki.apache.org/jakarta-jmeter/Java14Proposals?\n\n\n\n\n"}, {"count": 3, "tags": [], "bug_id": 42018, "attachment_id": 20036, "id": 102280, "time": "2007-04-25T01:27:31Z", "creator": "ruben.laguna@gmail.com", "creation_time": "2007-04-25T01:27:31Z", "is_private": false, "text": "Created attachment 20036\nadd the possibility of issuing commit and rollback toward the database\n\nIf you set autocommit to false, it becomes imposible to issue commit and\nrollback instructions at least to databases that doesn't support COMMIT and\nROLLBACK as statements. Those database require you to use conn.commit() and\nconn.rollback() instead. With this patch you can write commit or rollback in a\nJDBC Request and the JDBC Sampler will translate it to the correct .commit() or\nrollback() call."}, {"count": 4, "tags": [], "bug_id": 42018, "attachment_id": null, "id": 102282, "time": "2007-04-25T01:38:09Z", "creator": "ruben.laguna@gmail.com", "creation_time": "2007-04-25T01:38:09Z", "is_private": false, "text": "(In reply to comment #3)\n> rollback instructions at least to databases that doesn't support COMMIT and\n> ROLLBACK as statements. Those database require you to use conn.commit() and\n> \n\nI'm talking about databases like Apache Derby here. The Derby JDBC driver\ndoesn't allow stmt.execute(\"commit\") but I think other JDBC drivers map such a\ncall to an inner .commit() call. \n\n"}, {"count": 5, "tags": [], "bug_id": 42018, "attachment_id": null, "id": 102698, "time": "2007-04-30T15:37:14Z", "creator": "sebb@apache.org", "creation_time": "2007-04-30T15:37:14Z", "is_private": false, "text": "(In reply to comment #3)\n> Created an attachment (id=20036) [edit]\n> add the possibility of issuing commit and rollback toward the database\n> If you set autocommit to false, it becomes imposible to issue commit and\n> rollback instructions at least to databases that doesn't support COMMIT and\n> ROLLBACK as statements. Those database require you to use conn.commit() and\n> conn.rollback() instead. With this patch you can write commit or rollback in \na\n> JDBC Request and the JDBC Sampler will translate it to the correct .commit() \nor\n> rollback() call.\n\nThe patch assumes that a script starting with \"commit\" or \"rollback\" contains \nnothing else.\n\nFor databases that do allow commit and rollback statements this is \nunnecessarily restrictive.\n\nI think a different approach is needed for databases that don't support these \ncommands."}, {"count": 6, "tags": [], "bug_id": 42018, "attachment_id": null, "is_private": false, "id": 102699, "time": "2007-04-30T15:42:24Z", "creator": "sebb@apache.org", "creation_time": "2007-04-30T15:42:24Z", "text": "(In reply to comment #1)\n> Created an attachment (id=20035) [edit]\n> set auto-commit configuration parameter at the same level as pool-controller\n> I've checked this and you are right. There is a bug on the\n> DataSourceElement.java . The code tries to se the \"auto-commit\" attribute as\n> part of pool-controller but auto-commit doesn't belong to pool-controller it\n> should be a sibling of pool-controller. This becomes clear taking a look to \nthe\n> excalibur-datasource-1.1.1.jar source code \nResourceLimitingJdbcDataSource.java\n> , more precisely the lines\n> *** final Configuration controller = configuration.getChild( \"pool-\ncontroller\"\n> );\n> *** final boolean autoCommit = configuration.getChild( \"auto-commit\"\n> ).getValueAsBoolean( true );\n> Looking at those lines is evident that pool-controller and auto-commit are\n> siblings and auto-commit shouldn't be added as a child of pool-controller\n> I'm providing a patch attached that solves the issue.\n\nOK, applied in r533871"}, {"count": 7, "tags": [], "text": "I've added some new JDBC Sampler types: commit, rollback and autocommit \non/off. These are in SVN r534651.", "is_private": false, "id": 102787, "creator": "sebb@apache.org", "time": "2007-05-02T16:36:25Z", "bug_id": 42018, "creation_time": "2007-05-02T16:36:25Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "kip@bording.dk", "text": "I try to use HSSFEvent model to take input from an xls file in a streaming\nmanner, where the eventmodel impl. in poi match my purpose, however I never\nget a RecordEvent FormulaRecord, but my sheet has a lot of formulars.\n\nThis is som testcode that also fail, produced from the example in the example \npackage:\nSTART:\n\npackage dk.bording.demo.excel;\nimport org.apache.poi.hssf.eventmodel.HSSFEventFactory;\nimport org.apache.poi.hssf.eventmodel.HSSFListener;\nimport org.apache.poi.hssf.eventmodel.HSSFRequest;\nimport org.apache.poi.hssf.record.*;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n\npublic class EventExample implements HSSFListener {\n    private SSTRecord sstrec;\n\n\n    public void processRecord(Record record)\n    {\n        switch (record.getSid())\n        {\n            // the BOFRecord can represent either the beginning of a sheet or \nthe workbook\n            case BOFRecord.sid:\n                BOFRecord bof = (BOFRecord) record;\n                if (bof.getType() == bof.TYPE_WORKBOOK)\n                {\n                    System.out.println(\"Encountered workbook\");\n                    // assigned to the class level member\n                } else if (bof.getType() == bof.TYPE_WORKSHEET)\n                {\n                    System.out.println(\"Encountered sheet reference\");\n                }\n                break;\n            case BoundSheetRecord.sid:\n                BoundSheetRecord bsr = (BoundSheetRecord) record;\n                System.out.println(\"New sheet named: \" + bsr.getSheetname());\n                break;\n            case RowRecord.sid:\n                RowRecord rowrec = (RowRecord) record;\n                System.out.println(\"Row found, first column at \"\n                        + rowrec.getFirstCol() + \" last column at \" + \nrowrec.getLastCol());\n                break;\n            case NumberRecord.sid:\n                NumberRecord numrec = (NumberRecord) record;\n                System.out.println(\"Cell found with value \" + numrec.getValue()\n                        + \" at row \" + numrec.getRow() + \" and column \" + \nnumrec.getColumn());\n                break;\n                // SSTRecords store a array of unique strings used in Excel.\n            case SSTRecord.sid:\n                sstrec = (SSTRecord) record;\n                for (int k = 0; k < sstrec.getNumUniqueStrings(); k++)\n                {\n                    System.out.println(\"String table value \" + k + \" = \" + \nsstrec.getString(k));\n                }\n                break;\n            case LabelSSTRecord.sid:\n                LabelSSTRecord lrec = (LabelSSTRecord) record;\n                System.out.println(\"String cell found with value \"\n                        + sstrec.getString(lrec.getSSTIndex()));\n                break;\n            case ExtendedFormatRecord.sid:\n                 System.out.println(\"ExtendedFormatRecord\" );\n                 break;\n            case FormatRecord.sid:\n                 System.out.println(\"FormatRecord\" );\n                 break;\n            case FontRecord.sid:\n                 System.out.println(\"FontRecord\");\n                 break;\n            case FormulaRecord.sid:\n                 // This block is never called !!!!!!!!!!!\n                 System.out.println(\"Calculation:\" + ((FormulaRecord)\nrecord).getValue() );\n                 break;\n            default: //System.out.println(\"Default:\" + record.toString() ) ;\n        }\n    }\n\n\n    public static void main(String[] args) throws IOException\n    {\n        // create a new file input stream with the input file specified\n        // at the command line\n        FileInputStream fin = new FileInputStream(args[0]);\n        // create a new org.apache.poi.poifs.filesystem.Filesystem\n        POIFSFileSystem poifs = new POIFSFileSystem(fin);\n        // get the Workbook (excel part) stream in a InputStream\n        InputStream din = poifs.createDocumentInputStream(\"Workbook\");\n        // construct out HSSFRequest object\n        HSSFRequest req = new HSSFRequest();\n        // lazy listen for ALL records with the listener shown above\n        req.addListenerForAllRecords(new EventExample());\n        // create our event factory\n        HSSFEventFactory factory = new HSSFEventFactory();\n        // process our events based on the document input stream\n        factory.processEvents(req, din);\n        // once all the events are processed close our file input stream\n        fin.close();\n        // and our document input stream (don't want to leak these!)\n        din.close();\n        System.out.println(\"done.\");\n    }\n}\n\nEND:", "id": 32149, "time": "2003-02-28T13:21:59Z", "bug_id": 17525, "creation_time": "2003-02-28T13:21:59Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 17525, "attachment_id": null, "is_private": false, "id": 32152, "time": "2003-02-28T14:08:28Z", "creator": "kip@bording.dk", "creation_time": "2003-02-28T14:08:28Z", "text": "The problem seems to disapear in the 1.11 version. However this is a dev\nand not a RELEASE. Is there any plan for an upcomming RELEASE version."}, {"count": 2, "tags": [], "creator": "avik@apache.org", "text": "Formula's were disabled in 1.5, since they were not complete then. Many people\nfind the dev releases stable enuf for their work. If it passes *your* unit\ntests, go for it. ", "id": 32155, "time": "2003-02-28T14:24:13Z", "bug_id": 17525, "creation_time": "2003-02-28T14:24:13Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 17525, "attachment_id": null, "text": "April of last year.", "id": 32324, "time": "2003-03-03T14:17:24Z", "creator": "poi-support@buni.org", "creation_time": "2003-03-03T14:17:24Z", "is_private": false}]
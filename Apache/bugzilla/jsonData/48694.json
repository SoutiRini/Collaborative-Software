[{"count": 0, "text": "OS: Windows 7 x64, JRE: 1.5.0_19-b02 (x86)\n\n\nPlease see the stacktrace:\nTOMCAT 6.0.24 DEADLOCK\n\nThread1:\n20:32:24 Loading VCS changes for perforce: localhost:1666: UNIT-235 {id=5}; Changes loader 5 {id=5}@6432, prio=5, in group 'main', status: 'waiting for monitor entry'\n  java.lang.Thread.State: BLOCKED\n\t blocks 20:32:24 Loading VCS changes for tfs: https://team-unit.labs.intellij.net:8080 $/Asd {id=3}; Changes loader 4 {id=3}@6406\n\t blocks 20:32:24 Loading VCS changes for svn: http://89.163.21.152:1777/espresso/svn/dsis/trunk {id=2}; Changes loader 1 {id=2}@6412\n\t waiting for 20:32:24 Loading VCS changes for tfs: https://team-unit.labs.intellij.net:8080 $/Asd {id=3}; Changes loader 4 {id=3}@6406\n\t  at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2276)\n\t  at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:976)\n\t  at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1451)\n\t  at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)\n\t  at jetbrains.buildServer.plugins.classLoaders.TeamCityClassLoader.callParentLoadClass(TeamCityClassLoader.java:45)\n\t  at jetbrains.buildServer.plugins.classLoaders.TeamCityClassLoader.doLoadClass(TeamCityClassLoader.java:60)\n\t  at jetbrains.buildServer.plugins.classLoaders.TeamCityClassLoader.loadClass(TeamCityClassLoader.java:35)\n\t  at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n\t  at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\t  at jetbrains.buildServer.buildTriggers.vcs.perforce.P4CommandLineConnection.runP4Command(P4CommandLineConnection.java:47)\n\t  at jetbrains.buildServer.buildTriggers.vcs.perforce.PerforceConnection.runCommand(PerforceConnection.java:161)\n\t  at jetbrains.buildServer.buildTriggers.vcs.perforce.PerforceConnection.runCommand(PerforceConnection.java:211)\n\t  at jetbrains.buildServer.buildTriggers.vcs.perforce.PerforceConnection.getCurrentVersion(PerforceConnection.java:264)\n\t  at jetbrains.buildServer.buildTriggers.vcs.perforce.PerforceSupport.getCurrentVersion(PerforceSupport.java:377)\n\t  at jetbrains.buildServer.buildTriggers.vcs.VcsChangesLoader.getCurrentVersion(VcsChangesLoader.java:444)\n\t  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.getVersionsForAllRoots(VcsManagerImpl.java:1145)\n\t  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.loadChanges(VcsManagerImpl.java:1099)\n\t  at jetbrains.buildServer.serverSide.impl.auth.SecuredVcsManager.loadChanges(SecuredVcsManager.java:50)\n\t  at jetbrains.buildServer.serverSide.impl.VcsModificationChecker$1.run(VcsModificationChecker.java:168)\n\t  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)\n\t  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)\n\t  at java.util.concurrent.FutureTask.run(FutureTask.java:123)\n\t  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)\n\t  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)\n\t  at java.lang.Thread.run(Thread.java:595)\n\n\n\nThread2:\n20:32:24 Loading VCS changes for tfs: https://team-unit.labs.intellij.net:8080 $/Asd {id=3}; Changes loader 4 {id=3}@6406, prio=5, in group 'main', status: 'waiting for monitor entry'\n  java.lang.Thread.State: BLOCKED\n\t blocks 20:32:24 Loading VCS changes for perforce: localhost:1666: UNIT-235 {id=5}; Changes loader 5 {id=5}@6432\n\t blocks Vcs Monitor@6389\n\t blocks Alarm (NotificationThread-HangedBuilds)@6498\n\t blocks TeamCity Initialization@1382\n\t waiting for 20:32:24 Loading VCS changes for perforce: localhost:1666: UNIT-235 {id=5}; Changes loader 5 {id=5}@6432\n\t  at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1363)\n\t  at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)\n\t  at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n\t  at jetbrains.buildServer.SimpleCommandLineProcessRunner.runCommandSecure(SimpleCommandLineProcessRunner.java:119)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsNativeExeRunner.start(TfsNativeExeRunner.java:48)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsServerNativeExeRunner.start(TfsServerNativeExeRunner.java:96)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsSupport$1.apply(TfsSupport.java:134)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsSupport$1.apply(TfsSupport.java:131)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsLock.doCommand(TfsLock.java:48)\n\t  at jetbrains.buildServer.buildTriggers.vcs.tfs.TfsSupport.getCurrentVersion(TfsSupport.java:130)\n\t  at jetbrains.buildServer.buildTriggers.vcs.VcsChangesLoader.getCurrentVersion(VcsChangesLoader.java:444)\n\t  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.getVersionsForAllRoots(VcsManagerImpl.java:1145)\n\t  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.loadChanges(VcsManagerImpl.java:1099)\n\t  at jetbrains.buildServer.serverSide.impl.auth.SecuredVcsManager.loadChanges(SecuredVcsManager.java:50)\n\t  at jetbrains.buildServer.serverSide.impl.VcsModificationChecker$1.run(VcsModificationChecker.java:168)\n\t  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)\n\t  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)\n\t  at java.util.concurrent.FutureTask.run(FutureTask.java:123)\n\t  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)\n\t  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)\n\t  at java.lang.Thread.run(Thread.java:595)\n\n\nAs you may notice,\n\nMethod java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) is synchronized on this,\nMethod org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1451) synchonizes on class name\nbut \norg.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2276) synchronizes in this again!\n\n\nTeamCityClassLoader class delegates to WebappClassLoader as parent classloader in the same way as ClassLoader class does.\nAs workaround I added synchronization on parent classloader in my code.\n\n\nThe fix is to make WebappClassLoader#loadClass synchronized", "bug_id": 48694, "is_private": false, "id": 134303, "time": "2010-02-07T23:52:07Z", "creator": "eugene.petrenko@jetbrains.com", "creation_time": "2010-02-07T23:52:07Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "text": "I'd like to avoid making WebappClassLoader#loadClass synchronized if at all possible. Could you try this patch instead?\n\nIndex: java/org/apache/catalina/loader/WebappClassLoader.java\n===================================================================\n--- java/org/apache/catalina/loader/WebappClassLoader.java\t(revision 907621)\n+++ java/org/apache/catalina/loader/WebappClassLoader.java\t(working copy)\n@@ -989,9 +989,7 @@\n             }\n             if ((clazz == null) && hasExternalRepositories) {\n                 try {\n-                    synchronized (this) {\n-                        clazz = super.findClass(name);\n-                    }\n+                    clazz = super.findClass(name);\n                 } catch(AccessControlException ace) {\n                     log.warn(\"WebappClassLoader.findClassInternal(\" + name\n                             + \") security exception: \" + ace.getMessage(), ace);\n@@ -2273,7 +2271,7 @@\n         if (clazz != null)\n             return clazz;\n \n-        synchronized (this) {\n+        synchronized (name.intern()) {\n             clazz = entry.loadedClass;\n             if (clazz != null)\n                 return clazz;\n\nThanks,\n\nMark", "is_private": false, "id": 134338, "creator": "markt@apache.org", "time": "2010-02-08T10:28:29Z", "bug_id": 48694, "creation_time": "2010-02-08T10:28:29Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 48694, "attachment_id": null, "text": "This fix works for us here. It's not checked into trunk yet, though?\n\n\nIn our case a well known 3rd party library calls \nfirst WebappClassLoader.load(...), catches and eats any Throwable including CNFException and then delegates to Class.forName(..).\n\nTherefore two threads trying to literally load a class with the name \"x\" end up being deadlocked on the name of the class and the class loader instance.\n\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1362)\n\t- waiting to lock <0x00002aaab67f1090> (a java.lang.String)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)\n\t- locked <0x00002aaab9f0b4d8> (a org.apache.catalina.loader.WebappClassLoader)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:169)\n\n---\n\nat org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:993)\n\t- waiting to lock <0x00002aaab9f0b4d8> (a org.apache.catalina.loader.WebappClassLoader)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1451)\n\t- locked <0x00002aaab67f1090> (a java.lang.String)\n\tat org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1329)", "id": 134345, "time": "2010-02-08T14:27:08Z", "creator": "aullrich@blackducksoftware.com", "creation_time": "2010-02-08T14:27:08Z", "is_private": false}, {"count": 3, "text": "I've updated trunk to align with the proposed patch (it already had part of it) and proposed the patch for 6.0.x", "bug_id": 48694, "is_private": false, "id": 134410, "time": "2010-02-10T22:43:35Z", "creator": "markt@apache.org", "creation_time": "2010-02-10T22:43:35Z", "tags": [], "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 48694, "attachment_id": null, "id": 134844, "time": "2010-02-23T23:44:27Z", "creator": "markt@apache.org", "creation_time": "2010-02-23T23:44:27Z", "is_private": false, "text": "This has been fixed in 6.0.x and will be included in 6.0.25 onwards."}, {"count": 5, "tags": [], "bug_id": 48694, "is_private": false, "id": 135313, "creation_time": "2010-03-13T01:29:56Z", "time": "2010-03-13T01:29:56Z", "creator": "pmonestie@gmail.com", "text": "In fact the deadlock still exists in 6.0.26.\nUnder certain conditions (well using jrebel) I get:\n\nName: Thread-8\nState: BLOCKED on java.lang.String@1d6ebede owned by: Thread-10\nTotal blocked: 44  Total waited: 2\n\nStack trace: \norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1395)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1361)\n\nName: Thread-10\nState: BLOCKED on org.apache.catalina.loader.WebappClassLoader@646f72d4 owned by: Thread-8\nTotal blocked: 33  Total waited: 2\n\nStack trace: \norg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1483)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1361)\n\n\nAt line 1395 replacing synchronized (name.intern()) { \nwith\n  synchronized (this) fixes the problem.\n\nThe issue with doing synchronized (name.intern()) { in public Class loadClass(String name, boolean resolve)  is that it turn this method calls (at least from what I could see) at line 1485 findClass(String name)\n\nAND\npublic Class findClass(String name) at line 977 calls protected Class findClassInternal(String name) which syncs on name.intern()", "attachment_id": null}, {"count": 6, "text": "Do you have full stack traces for those threads (from a thread dump)?\nYou can add them as an attachment.", "bug_id": 48694, "is_private": false, "id": 135314, "time": "2010-03-13T01:33:47Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-03-13T01:33:47Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 48694, "attachment_id": null, "id": 135315, "time": "2010-03-13T01:37:47Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-03-13T01:37:47Z", "is_private": false, "text": "And what is your configuration (JVM vendor and version), and do you use custom class loader, as *this* bug does, \nor you do not, and it is another bug (e.g. bug 48903)?"}, {"count": 8, "tags": [], "bug_id": 48694, "attachment_id": 25124, "id": 135316, "creation_time": "2010-03-13T01:56:00Z", "time": "2010-03-13T01:56:00Z", "creator": "pmonestie@gmail.com", "text": "Created attachment 25124\nThread Dump", "is_private": false}, {"count": 9, "tags": [], "creator": "pmonestie@gmail.com", "attachment_id": null, "is_private": false, "id": 135317, "time": "2010-03-13T01:57:28Z", "bug_id": 48694, "creation_time": "2010-03-13T01:57:28Z", "text": "java version \"1.6.0_13\"\nJava(TM) SE Runtime Environment (build 1.6.0_13-b03-211)\nJava HotSpot(TM) 64-Bit Server VM (build 11.3-b02-83, mixed mode)\n\nThis is on a mac.\n\nNo no custom classloader but this happens when I run Tomcat with JRebel (2 or 3). The relevant traces (from another run is as follow)\n\nFind also attached the ThreadDump\n\nName: Thread-10\nState: BLOCKED on java.lang.String@9edcacb owned by: Thread-9\nTotal blocked: 28  Total waited: 1\n\nStack trace: \norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1395)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1361)\norg.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:95)\norg.hibernate.util.ReflectHelper.getConstantValue(ReflectHelper.java:122)\norg.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter.handleDotStructure(QueryTranslatorImpl.java:569)\norg.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter.visit(QueryTranslatorImpl.java:564)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:40)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.traverseDepthFirst(NodeTraverser.java:33)\norg.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:254)\norg.hibernate.hql.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:157)\norg.hibernate.hql.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:111)\norg.hibernate.engine.query.HQLQueryPlan.<init>(HQLQueryPlan.java:77)\norg.hibernate.engine.query.HQLQueryPlan.<init>(HQLQueryPlan.java:56)\norg.hibernate.engine.query.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:72)\norg.hibernate.impl.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:133)\norg.hibernate.impl.SessionImpl.list(SessionImpl.java:1113)\norg.hibernate.impl.QueryImpl.list(QueryImpl.java:79)\n\n\nAND\n\n\n\nName: Thread-9\nState: BLOCKED on org.apache.catalina.loader.WebappClassLoader@1f302997 owned by: Thread-11\nTotal blocked: 34  Total waited: 2\n\nStack trace: \norg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1483)\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1361)\norg.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:95)\norg.hibernate.util.ReflectHelper.getConstantValue(ReflectHelper.java:122)\norg.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter.handleDotStructure(QueryTranslatorImpl.java:569)\norg.hibernate.hql.ast.QueryTranslatorImpl$JavaConstantConverter.visit(QueryTranslatorImpl.java:564)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:40)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.visitDepthFirst(NodeTraverser.java:41)\norg.hibernate.hql.ast.util.NodeTraverser.traverseDepthFirst(NodeTraverser.java:33)\norg.hibernate.hql.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:254)\norg.hibernate.hql.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:157)\norg.hibernate.hql.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:111)\norg.hibernate.engine.query.HQLQueryPlan.<init>(HQLQueryPlan.java:77)\norg.hibernate.engine.query.HQLQueryPlan.<init>(HQLQueryPlan.java:56)\norg.hibernate.engine.query.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:72)\norg.hibernate.impl.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:133)\norg.hibernate.impl.SessionImpl.list(SessionImpl.java:1113)\norg.hibernate.impl.QueryImpl.list(QueryImpl.java:79)\n\n(In reply to comment #8)\n> Created an attachment (id=25124) [details]\n> Thread Dump\n\n(In reply to comment #8)\n> Created an attachment (id=25124) [details]\n> Thread Dump"}, {"count": 10, "tags": [], "bug_id": 48694, "is_private": false, "id": 135319, "attachment_id": null, "creator": "pmonestie@gmail.com", "creation_time": "2010-03-13T05:45:36Z", "time": "2010-03-13T05:45:36Z", "text": "So looking at all this I think the problem is as follow:\n\nThread1\n\nIf you call Class.forName in turn You call ClassLoader.loadClassInternal and this is synchronized on this. Following that you enter WebappClassLoader and get a lock on string.intern()\n\nThread2\nOn another thread you call WebAppClassLoader.loadClass which gets a lock on string.intern() but also calls defineClass which is synchronized on this .\n\nIt seems possible to get a deadlock from the sequence of event.\n\nI'm not sure why I seem to hit this bug more when using JRebel."}, {"count": 11, "tags": [], "bug_id": 48694, "is_private": false, "id": 135322, "creation_time": "2010-03-13T15:44:31Z", "time": "2010-03-13T15:44:31Z", "creator": "aullrich@blackducksoftware.com", "text": "Can't see how you'd get into this situation with the current source code.\nThe stack traces indicate that findClass on the WebappClassLoader would have to be a synchronized method? Is JRebel changing the byte code of the loader by any chance?\nBut maybe I'm just blind ;-)", "attachment_id": null}, {"count": 12, "text": "yea I guess you are right. The stacktrace is suspicious in the sense that there is no line number here:\nat org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java)\n\t- waiting to lock\n\nHmm I'll try to see with the JRebel guys what could be wrong. One quick fix, for the poeple that have the same issue than me is to synchronize on 'this' in loadClass.\n\nThanks again for all your help.", "bug_id": 48694, "is_private": false, "id": 135331, "time": "2010-03-14T20:58:10Z", "creator": "pmonestie@gmail.com", "creation_time": "2010-03-14T20:58:10Z", "tags": [], "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 48694, "attachment_id": null, "id": 135640, "creation_time": "2010-03-25T19:12:05Z", "time": "2010-03-25T19:12:05Z", "creator": "knst.kolinko@gmail.com", "text": "(In reply to comment #8)\n> Created an attachment (id=25124) [details]\n> Thread Dump\n\nThe issue that you are observing in Comment 5 and below is caused by combination of synchronized(name.intern()) in Tomcat and synchronized(classLoader) in JRE classes. See bug 48903 for an explanation, and\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4670071\n\n\nBugs 44041 and this bug 48694 are still to be fixed in Tomcat 5.5.", "is_private": false}, {"count": 14, "text": "The issue (both the original one, and the one in Comment 5 and below) was fixed in 5.5.x in r935947 and will be in 5.5.30 onwards.\n\nThe issue in Comment 5 and below has not been fixed in 6.0.x yet, but the patch is already proposed. It is tracked as bug 48903. Thus, I am closing this one.\n\n*** This bug has been marked as a duplicate of bug 48903 ***", "bug_id": 48694, "attachment_id": null, "id": 136263, "time": "2010-04-20T11:26:18Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-04-20T11:26:18Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 43628, "text": "Currently tinyMCE can be exited by clicking any link outside the editable area. This can\nlead to data loss and always leads to a locked page (force checkin has to be used).", "id": 109366, "time": "2007-10-15T14:25:43Z", "creator": "ragaller@apache.org", "creation_time": "2007-10-15T14:25:43Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43628, "attachment_id": 20986, "id": 109367, "creation_time": "2007-10-15T14:35:03Z", "time": "2007-10-15T14:35:03Z", "creator": "ragaller@apache.org", "text": "Created attachment 20986\nthe attached patch show a possible approach\n\nIt is still in a raw form and is meant as an illustration of concept - please\ndo not apply as is.", "is_private": false}, {"count": 2, "tags": [], "creator": "nettings@apache.org", "attachment_id": null, "id": 109736, "time": "2007-10-25T06:41:04Z", "bug_id": 43628, "creation_time": "2007-10-25T06:41:04Z", "is_private": false, "text": "i've read the patch, and it looks very good and in keeping with tinymce coding\nstyle. however, i'm wondering:\ntinymce has this issue because it tries to provide true wysiwyg in-place editing.\nthis capability might be highly desirable for other editors, too.\n\nmaybe we could implement a generic onunload() handler that will run an\neditor-specific callback if provided (similar to the way richard implemented the\nbackspace catcher in an editor-agnostic way).\n\nwhat does an onunload() handler need to do? \n* catch the onunload event and prevent leaving the current page.\n* provide a message that informs the user of unsaved data and allows to \"leave\",\n\"save and leave\", \"return to editor\".\n\n\"leave\" must remove the lock on the document and then execute the previously\ncaught navigation event.\n\"save and leave\" will have to signal the editor (invoke its save callback) and\nthen navigate away.\n\"return\" just eats the unload event and return to the editor.\n\nwdyt?"}, {"count": 3, "tags": [], "creator": "ragaller@apache.org", "attachment_id": null, "id": 109738, "time": "2007-10-25T07:22:59Z", "bug_id": 43628, "creation_time": "2007-10-25T07:22:59Z", "is_private": false, "text": "(In reply to comment #2)\n> this capability might be highly desirable for other editors, too.\n\nA big +\n\n> \n> maybe we could implement a generic onunload() handler that will run an\n> editor-specific callback if provided (similar to the way richard implemented the\n> backspace catcher in an editor-agnostic way).\n\nanother big +\n\n> \n> what does an onunload() handler need to do? \n> * catch the onunload event and prevent leaving the current page.\n> * provide a message that informs the user of unsaved data and allows to \"leave\",\n> \"save and leave\", \"return to editor\".\n> \n> \"leave\" must remove the lock on the document and then execute the previously\n> caught navigation event.\n> \"save and leave\" will have to signal the editor (invoke its save callback) and\n> then navigate away.\n> \"return\" just eats the unload event and return to the editor.\n\nAnother big + for the idea. The problem with document.onbeforeunload is, that it\ntriggers a predefined screen that can only partially be modified. It would be\nvery nice to have the three options you described - but I did not find a way to\ndisplay and process a custom screen on an onbeforeunload event. Maybe there is a\nbetter way to do the event handling than using window.onbeforeunload.\n\n\n"}]
[{"attachment_id": null, "tags": [], "bug_id": 50946, "is_private": false, "count": 0, "id": 145094, "time": "2011-03-18T13:24:22Z", "creator": "erik.moe@cmegroup.com", "creation_time": "2011-03-18T13:24:22Z", "text": "Under load an httpd client process will start using 100% of the cpu when mod_example is loaded.  Mod_example is built when --enable-modules=all is specified and is loaded in the default httpd.conf so some users may be loading this module inadvertently.\n\n./httpd -V\nServer version: Apache/2.2.17-b2 (Unix)\nServer built:   Jan 14 2011 15:59:39\nServer's Module Magic Number: 20051115:25\nServer loaded:  APR 1.4.2, APR-Util 1.3.10\nCompiled using: APR 1.4.2, APR-Util 1.3.10\nArchitecture:   64-bit\nServer MPM:     Worker\n  threaded:     yes (fixed thread count)\n    forked:     yes (variable process count)\nServer compiled with....\n -D APACHE_MPM_DIR=\"server/mpm/worker\"\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=128\n -D HTTPD_ROOT=\"/opt/lamp/2.2.17-b2/httpd-2.2.17\"\n -D SUEXEC_BIN=\"/opt/lamp/2.2.17-b2/httpd-2.2.17/bin/suexec\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"conf/mime.types\"\n -D SERVER_CONFIG_FILE=\"conf/httpd.conf\"\n\ntop - 12:19:21 up 94 days, 17:40,  2 users,  load average: 3.06, 3.00, 2.44\nTasks: 132 total,   2 running, 130 sleeping,   0 stopped,   0 zombie\nCpu(s): 75.0%us,  0.0%sy,  0.0%ni, 24.7%id,  0.2%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:  16438704k total,  3579040k used, 12859664k free,   232204k buffers\nSwap:        0k total,        0k used,        0k free,  2950136k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n14624 daemon    18   0  688m  23m 2036 S 100.2  0.1  26:50.49 httpd\n12422 daemon    18   0  814m  24m 2012 S 99.9  0.1  22:07.22 httpd\n12424 daemon    23   0  624m  23m 2028 S 99.9  0.1  32:22.28 httpd\n21459 root      15   0 10648 1036  756 R  0.3  0.0   0:00.01 top\n    1 root      15   0 10348  660  560 S  0.0  0.0   0:03.29 init\n    2 root      RT  -5     0    0    0 S  0.0  0.0   0:01.90 migration/0\n\n(gdb) info threads\n  27 Thread 0x42756940 (LWP 12438)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  26 Thread 0x43157940 (LWP 12440)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  25 Thread 0x43b58940 (LWP 12452)  0x0000003f07e0aee9 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\n  24 Thread 0x44559940 (LWP 12454)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  23 Thread 0x44f5a940 (LWP 12456)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  22 Thread 0x4595b940 (LWP 12458)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  21 Thread 0x4635c940 (LWP 12459)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  20 Thread 0x46d5d940 (LWP 12460)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  19 Thread 0x4775e940 (LWP 12461)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  18 Thread 0x4815f940 (LWP 12469)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  17 Thread 0x48b60940 (LWP 12470)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  16 Thread 0x49561940 (LWP 12471)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  15 Thread 0x49f62940 (LWP 12472)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  14 Thread 0x4a963940 (LWP 12473)  0x00002aab88695b4c in apr_pool_destroy (pool=0x154013a8) at memory/unix/apr_pools.c:369\n  13 Thread 0x4b364940 (LWP 12474)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  12 Thread 0x4bd65940 (LWP 12475)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  11 Thread 0x4c766940 (LWP 12484)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  10 Thread 0x4d167940 (LWP 12486)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  9 Thread 0x4db68940 (LWP 12488)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  8 Thread 0x4e569940 (LWP 12490)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  7 Thread 0x4ef6a940 (LWP 12492)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  6 Thread 0x4f96b940 (LWP 12494)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  5 Thread 0x5036c940 (LWP 12496)  0x0000003f07e0aee9 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\n  4 Thread 0x50d6d940 (LWP 12499)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  3 Thread 0x5176e940 (LWP 12501)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n  2 Thread 0x5216f940 (LWP 12503)  0x0000003f07e0d4c4 in __lll_lock_wait () from /lib64/libpthread.so.0\n* 1 Thread 0x2aab888ac470 (LWP 12422)  0x0000003f07e0d91b in read () from /lib64/libpthread.so.0\ngdb) thread 14\n[Switching to thread 14 (Thread 0x4a963940 (LWP 12473))]#0  0x00002aab88695b4c in apr_pool_destroy (pool=0x154013a8) at memory/unix/apr_pools.c:369\n369                 if ((node->next = allocator->free[index]) == NULL\n(gdb) bt\n#0  0x00002aab88695b4c in apr_pool_destroy (pool=0x154013a8) at memory/unix/apr_pools.c:369\n#1  0x00002aab8bb30363 in trace_add (s=<value optimized out>, r=0x0, mconfig=0x1535a7e0, note=0x2aab8bb31129 \"x_quick_handler()\") at mod_example.c:378\n#2  0x00002aab8bb3059e in x_quick_handler (r=0x2aaab000e9d0, lookup_uri=<value optimized out>) at mod_example.c:982\n#3  0x0000000000436cb3 in ap_run_quick_handler (r=0x2aaab000e9d0, lookup=0) at config.c:160\n#4  0x0000000000444151 in ap_process_request (r=0x2aaab000e9d0) at http_request.c:278\n#5  0x00000000004415ac in ap_process_http_connection (c=0x16b027f8) at http_core.c:190\n#6  0x000000000043db32 in ap_run_process_connection (c=0x16b027f8) at connection.c:43\n#7  0x0000000000448bc4 in worker_thread (thd=0x153fbd30, dummy=<value optimized out>) at worker.c:544\n#8  0x0000003f07e0673d in start_thread () from /lib64/libpthread.so.0\n#9  0x0000003f072d3f6d in clone () from /lib64/libc.so.6\n(gdb) s\n358             index = node->index;\n(gdb) s\n357             next = node->next;\n(gdb) s\n360             if (max_free_index != APR_ALLOCATOR_MAX_FREE_UNLIMITED\n(gdb) s\n365             else if (index < MAX_INDEX) {\n(gdb) s\n369                 if ((node->next = allocator->free[index]) == NULL\n(gdb) s\n374                 if (current_free_index >= index)\n(gdb) s\n373                 allocator->free[index] = node;\n(gdb) s\n374                 if (current_free_index >= index)\n(gdb) s\n386                     current_free_index -= index;\n(gdb) s\n390         } while ((node = next) != NULL);\n(gdb) s\n358             index = node->index;\n(gdb) s\n357             next = node->next;\n(gdb) s\n360             if (max_free_index != APR_ALLOCATOR_MAX_FREE_UNLIMITED\n(gdb) s\n365             else if (index < MAX_INDEX) {\n(gdb) s\n369                 if ((node->next = allocator->free[index]) == NULL\n(gdb) s\n374                 if (current_free_index >= index)\n(gdb) s\n373                 allocator->free[index] = node;\n(gdb) s\n374                 if (current_free_index >= index)\n(gdb) s\n386                     current_free_index -= index;\n(gdb) s\n390         } while ((node = next) != NULL);\n(gdb) s\n358             index = node->index;"}, {"attachment_id": null, "tags": [], "bug_id": 50946, "is_private": false, "count": 1, "id": 145095, "time": "2011-03-18T13:40:05Z", "creator": "trawick@apache.org", "creation_time": "2011-03-18T13:40:05Z", "text": "quick handler mis-calls trace_add and triggers non-thread-safe code usually run during init\n\nthis probably fixes it\n\nIndex: modules/experimental/mod_example.c\n===================================================================\n--- modules/experimental/mod_example.c\t(revision 1082598)\n+++ modules/experimental/mod_example.c\t(working copy)\n@@ -922,7 +922,7 @@\n     /*\n      * Log the call and exit.\n      */\n-    trace_add(r->server, NULL, cfg, \"x_http_scheme()\");\n+    trace_add(r->server, r, cfg, \"x_http_scheme()\");\n     return \"example\";\n }\n \n@@ -941,7 +941,7 @@\n     /*\n      * Log the call and exit.\n      */\n-    trace_add(r->server, NULL, cfg, \"x_default_port()\");\n+    trace_add(r->server, r, cfg, \"x_default_port()\");\n     return 80;\n }\n #endif /*0*/\n@@ -961,7 +961,7 @@\n     /*\n      * Log the call and exit.\n      */\n-    trace_add(r->server, NULL, cfg, \"x_insert_filter()\");\n+    trace_add(r->server, r, cfg, \"x_insert_filter()\");\n }\n \n /*\n@@ -979,7 +979,7 @@\n     /*\n      * Log the call and exit.\n      */\n-    trace_add(r->server, NULL, cfg, \"x_quick_handler()\");\n+    trace_add(r->server, r, cfg, \"x_quick_handler()\");\n     return DECLINED;\n }\n \n(I presume the submitter doesn't particularly care about mod_example; no need to test the fix)"}, {"count": 2, "tags": [], "bug_id": 50946, "attachment_id": null, "text": "I applied the patch and retested and it does appear to be fixed.  But you are correct, I'm not much interested in mod_example.", "id": 145098, "time": "2011-03-18T17:06:37Z", "creator": "erik.moe@cmegroup.com", "creation_time": "2011-03-18T17:06:37Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50946, "is_private": false, "text": "\n\n*** This bug has been marked as a duplicate of bug 32051 ***", "id": 168067, "time": "2013-06-26T12:34:53Z", "creator": "takashi.asfbugzilla@tks.st", "creation_time": "2013-06-26T12:34:53Z", "attachment_id": null}]
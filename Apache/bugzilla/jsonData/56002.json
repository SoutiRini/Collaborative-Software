[{"count": 0, "tags": [], "bug_id": 56002, "attachment_id": null, "is_private": false, "id": 172335, "time": "2014-01-13T15:32:50Z", "creator": "isstar3465@gmail.com", "creation_time": "2014-01-13T15:32:50Z", "text": "I attempt to run a selenium based test script from the command line but I am unable to do so. This despite the fact that I am able to run the EXACT same script from Eclipse with the EXACT same classpath declaration. I need to be able to trigger from the command line to properly integrate my automation suite. I have shown the command prompt used and the errors generated below. I have attached the java test script.\n\n\nCommand prompts sent to trigger test script which includes setting the classpath\n\nset CLASSPATH=Q:\\Automation\\Eclipse\\workspace\\Resources\\ooxml-lib\\dom4j-1.6.1.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\ooxml-lib\\xmlbeans-2.3.0.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\ooxml-lib\\stax-api-1.0.1.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\selenium-server-standalone-2.39.0.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\testng-6.8.7.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-scratchpad-3.10-beta2-20130904.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-ooxml-schemas-3.10-beta2-20130904.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-ooxml-3.10-beta2-20130904.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-excelant-3.10-beta2-20121203.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-3.10-beta2-20130904.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\poi-examples-3.10-beta2-20121203.jar;Q:\\Automation\\Eclipse\\workspace\\Resources\\guice-2.0.jar;.\ngroovy Check\\Eighth.groovy\n\nErrors given from command prompt:\n\n[TestNG] Running:\n  Command line suite\n\nStarting ChromeDriver (v2.8.241075) on port 41943\n\n===============================================\nCommand line suite\nTotal tests run: 1, Failures: 1, Skips: 0\n===============================================\n\nTest Script:\npackage Check\nSearch for \"//Error occurs on line below\" to find where the error has been shown to occur when started from the command line\n\t\n\t//import java.io.File;\n\t//import java.io.FileInputStream;\n\t//import java.util.Vector;\n\t\n\t\n\t\n\t\n\t\n\timport org.testng.annotations.Test;\n\timport javax.swing.text.html.HTMLEditorKit.HTMLFactory.BodyBlockView;\n\t\n//import java.*;\n\timport org.apache.commons.io.FileUtils;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.xssf.usermodel.XSSFCell;\nimport org.apache.poi.xssf.usermodel.XSSFRow;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.annotations.AfterSuite;\nimport org.testng.annotations.AfterTest;\nimport org.testng.annotations.BeforeSuite;\nimport org.testng.annotations.BeforeTest;\nimport org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\nimport org.testng.TestNG\nimport org.testng.TestListenerAdapter\n\t\nclass AbTest {\n\t\n\t\tChromeDriver driver;\n\t\tWebElement elementwait;\n\t\tWebDriverWait wait;\n\t\tBinding binding;\n\t\tGroovyShell shell;\n\t\tObject value;\n\t\n\t\t@BeforeSuite\n\t\t public void start(){\n\t\t\t System.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Users\\\\redwoodi\\\\Downloads\\\\chromedriver.exe\");\n\t\t\t driver = new ChromeDriver();\n\t\t\twait = new WebDriverWait(driver, 40);\n\t\t\t//driver.manage().window().maximize();\n\t\t\t driver.get(\"http://523255-testapp1/Kalibrate_8/\");\n\t\t\t//Thread.sleep(10000)\n\t\t\telementwait = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"input[placeholder='Username']\")));\n\t\t\tbinding = new Binding()\n\t\t\tbinding.setVariable(\"driver\", driver)\n\t\t\tshell = new GroovyShell(binding)\n\t\t\tvalue=shell.evaluate(\"driver.manage().window().maximize();\");\n\t\t\t//sleep(5000);\n\t\t }\n\t\n\t\n\t\t@Test(dataProvider = \"Data-Provider-Function\")\n\t\tpublic void parameterIntTest(String tesT, String eXecute) throws Exception {\n\t\tSystem.out.println(tesT);\n\t\teXecute = eXecute.substring(0,1).toLowerCase();\n\t\tif (eXecute.equals(\"y\")){\n\t\t\t//def tryit = new String[0][0]\n\t\t\tdef String[][] tryit = getTableArray(tesT);\n\t\t\t//return tryit;\n\t\tprintln \"Parameterized Number is : \" + tryit.size().toString();\n\t//if (tesT.equals(\"Login\")){\n\t/*if (tryit.size() != 3){\n\t\tprintln \"Chrome check\"\n\t\tdriver.findElementByXPath(\"//div[@class='widget-head'][contains(.,'kIntel')]/a[@class='remove']\").click();\n\t\tsleep(5000)\n\t\tdriver.quit();\n\t}*/\n\tfor (int i =0; i < tryit.size(); i++){\n\t\tSystem.out.println(\"experiment for loop \" + i);\n\t\tif (tryit[i][3].substring(0,1).toLowerCase().equals(tryit[i][3].substring(0,1))){\n\t\t\t\n\t\tdef String stringEx;\n\t\tif (tryit[i][1].toLowerCase()==\"contains\") {\n\t\t\tstringEx = \"//\" + tryit[i][0] + \"[contains(.,'\"+tryit[i][2]+\"')]\"\n\t\t\telementwait = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(stringEx)));\n\t\t\tstringEx = \"ByXPath(\\\"\" + stringEx +  \"\\\")\"\n\t\t} else if (tryit[i][1].toLowerCase()==\"xpath\") {\n\t\t\tstringEx = \"ByXPath(\\\"\" + tryit[i][2] +  \"\\\")\"\n\t\t\tprintln stringEx;\n\t\t\telementwait = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(tryit[i][2])));\n\t\t} else {\n\t\t\tstringEx = tryit[i][0] + \"[\" + tryit[i][1] + \"='\" + tryit[i][2] + \"']\"\n\t\t\telementwait = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(stringEx)));\n\t\t\tstringEx = \"ByCssSelector(\\\"\" + stringEx + \"\\\")\"\n\t\t}\n\t\tstringEx = \"driver.findElement\" + stringEx\n\t\tprintln stringEx;\n\t\tstringEx = stringEx + \".\" + tryit[i][3]\n\t\tprintln stringEx;\n\t\tif (tryit[i][4]==null) {\n\t\t\tprintln \"null\"\n\t\t\tstringEx=stringEx+\"();\"\n\t\t}else{\n\t\t\tstringEx=stringEx+\"(\\\"\"+tryit[i][4]+\"\\\");\"\n\t\t}\n\t\t/*if (stringEx.equals(\"driver.findElementByXPath(\\\"//div[@class='widget-head'][contains(.,'kIntel')]/a[@class='remove']\\\").click();\")){\n\t\t\tprintln \"null2\"\n\t\t\tsleep(250)\n\t\t\tdriver.findElementByXPath(\"//div[@class='widget-head'][contains(.,'kIntel')]/a[@class='remove']\").click()\n\t\t\tsleep(2000)\n\t\t} else {*/\n\t\tif ((stringEx.indexOf(\".click\") > -1) && (stringEx.indexOf(\"/a[@class='remove']\") > -1)) {\n\t\t\tsleep(300)\n\t\t}\t\n\t\tvalue = shell.evaluate(stringEx)\n\t\tif ((stringEx.indexOf(\".click\") > -1) && (stringEx.indexOf(\"/a[@class='remove']\") > -1)) {\n\t\t\tsleep(300)\n\t\t}\t\n\t\t//}\n\t\tprintln stringEx\n\t\t//sleep(1000)\n\t\t//driver.findElementByXPath(stringEx)\n\t}else if (tryit[i][3].toUpperCase().equals(\"DRAG\")){\n\t\n\t//Commands for the drag operation\n\t//driver.findElementByXPath(\"//span[contains(.,'\"+tryit[i][0]+\"')]\").click();\n\tActions builder = new Actions(driver);\n\tSystem.out.println(\"Setting up the elements\");\n\tWebElement initialitem = driver.findElementByXPath(\"//span[contains(.,'\"+tryit[i][0]+\"')]\");\n\t  Action position = builder.moveToElement(initialitem)\n\t\t\t  .build();\n\t\t\t  position.perform();\n\tWebElement target = driver.findElementByCssSelector(\"div[id='container1'] div\");\n\tWebElement element = driver.findElementByCssSelector(\"div[\"+tryit[i][1]+\"='\"+tryit[i][2]+\"']\");\n\tprintln element.getSize().getWidth()\n\t//sleep(200)\n\tdriver.findElementByXPath(\"//span[contains(.,'\"+tryit[i][0]+\"')]\").click();\n\tsleep(400)\n\t  Action selectMove = builder.moveToElement(target)\n\t  \t\t  .moveToElement(element)\n\t\t\t  .clickAndHold(element)\n\t\t\t  .moveByOffset(-490, 1)\n\t\t\t  .release(element)\n\t\t\t  .build();\n\t\n\ttry{\n\t\t  selectMove.perform();\n\t} catch (Exception e) {\n\t\t  File scrsht = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n\t\t  FileUtils.copyFile(scrsht, new File(\"C:\\\\Temp\\\\screenshot.png\"));\n\t}\n\tprintln driver.findElementById(\"container1\").getSize().getWidth()\n\t//Thread.sleep(6500);\n\t\n\t//System.out.println(\"Logging into Kalibrate\");\n\tThread.sleep(1000);\n\t\t}else if (tryit[i][3].toUpperCase().equals(\"DRAG!\")){\n\t\n\t\t\t//Commands for the drag operation\n\telementwait = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\"div[class='search-results default-list'] > div > div + div > img\")));\n\t//driver.findElementByCssSelector(\"div[class='search-results default-list'] > div > div + div > img\").click();\n\t\tsleep(500);\n\t\tActions builder = new Actions(driver);\n\t\t//System.out.println(\"Setting up the elements\");\n\t\tWebElement initialitem = driver.findElementByCssSelector(\"div[class='search-results default-list'] > div > div + div > img\");\n\t\tWebElement leftitem = driver.findElementByCssSelector(\"div[class='search-results default-list'] > div > div + div > img + div > img\");\n\t\tWebElement target = driver.findElementByCssSelector(\"div[id='container2'] div\");\n\t\tWebElement element = driver.findElementByCssSelector(\"div[class='search-results default-list'] > div > div + div > img + div > img[\"+tryit[i][1]+\"='\"+tryit[i][2]+\"']\");\n\t\t//println element.getSize().getWidth()\n\t\t  Action setUp = builder.moveToElement(initialitem)\n\t\t  .moveToElement(leftitem)\n\t\t  .build();\n\t\t  setUp.perform();\n\t\tsleep(600);\n\t\t  Action selectMove = builder.moveToElement(initialitem)\n\t\t\t\t  .moveToElement(element)\n\t\t\t\t  .clickAndHold(element)\n\t\t\t\t  .moveByOffset(190, 120)\n\t\t\t\t  .release(element)\n\t\t\t\t  .build();\n\t\t\n\t\ttry{\n\t\t\t  selectMove.perform();\n\t\t} catch (Exception e) {\n\t\t\t  File scrsht = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n\t\t\t  FileUtils.copyFile(scrsht, new File(\"C:\\\\Temp\\\\screenshot.png\"));\n\t\t}\n\t\tprintln driver.findElementById(\"container1\").getSize().getWidth()\n\t\t//Thread.sleep(6500);\n\t\t\n\t\tSystem.out.println(\"Logging into Kalibrate\");\n\t\tThread.sleep(5000);\n\t\t\n\t\t}\n\t\n\t}\n\t}\n\t\n\tThread.sleep(1000);\n\t\t\n\t\n\t\t}\n\t\n\t\t\t @DataProvider(name = \"Data-Provider-Function\")\n\t\tpublic Object[][] parameterIntTestProvider() throws Exception {\n\t\t\tObject[][] retobj = getTableArray(\"KSuite\");\n\t\t\t return retobj;\n\t\t}\n\t\n\t\t@AfterSuite\n\t\t public void close(){\n\t\t\t  //System.out.println(\"After Test\");\n\t\t\tdriver.quit();\n\t\t }\n\t\t\n\t\tpublic static String[][] getTableArray(String xlSheet) throws Exception{\n\t\t\t//String[][] tabArray=null;\n\t\t\t\t\n\t\t\t\t\t\t\t\t//System.out.println(xlSheet);\n\t\t\t\t\n\t\t\t\t\tFileInputStream input = new FileInputStream(new File(\"C:\\\\Temp\\\\KSuite.xlsx\"));\n\t\t\t\t\t//System.out.println(input.path);\n//Error occurs on line below\t\t\t\t\t\nXSSFWorkbook workbook = new XSSFWorkbook(input);\n\t\t\t\t\t\t\t\t//System.out.println(xlSheet);\n\t\t\t\t\t\tXSSFSheet sheet = workbook.getSheet(xlSheet);\n\t\t\t\t\t\tint ci;//,cj;\n\t\t\t\t\t\t//println \"//ci = Math.\"\n\t\t\t\t\t\tXSSFRow r = sheet.getRow(sheet.getFirstRowNum());\n\t\t\t\t\t\tint jMax=Math.max(r.getLastCellNum()-r.getFirstCellNum(),2);\n\t\t\t\t\t\tint iMax=sheet.getLastRowNum()-sheet.getFirstRowNum();\n\t\t\t\t\t\tdef tabArray= new String[sheet.getLastRowNum()-sheet.getFirstRowNum()][jMax];\n\t\t\t\t\t\t\t//System.out.println(sheet.getLastRowNum()-sheet.getFirstRowNum());\n\t\t\t\t\t\t\t//System.out.println(jMax);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t//ci=0;\n\t\t\t\t\t\tfor (int i = sheet.getFirstRowNum()+1; i <=\n\t\t\t\t\t\t\t\tsheet.getLastRowNum(); i++) {\n\t\t\t\t\t\t   ci = i - 1;\n\t\t\t\t\t\t\t\tr = sheet.getRow(i);\n\t\n\t\t\t\t\t\t   //int lastColumn = Math.max(r.getLastCellNum(), MY_MINIMUM_COLUMN_COUNT);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t   //cj=0;\n\t\t\t\t\t\t   for (int j = 0; j < jMax; j++) {\n\t\t\t\t\t\t\t   //tabArray[1][1] = \"rr\";\n\t\t\t\t\t\t\t   //System.out.println(tabArray[1][1]);\n\t\t\t\t\t\t\t  XSSFCell c = r.getCell(j, r.CREATE_NULL_AS_BLANK);\n\t\t\t\t\t\t\t  if(c.getCellType() == 1) {\n\t\t\t\t\t\t\t\t//System.out.println(c.getStringCellValue());\n\t\t\t\t\t\t\t\t  tabArray[ci][j]=c.getStringCellValue();\n\t\t\t\t\t\t\t\t\t  //System.out.println(tabArray[ci][j]);\n\t\t\t\t\t\t\t\t  } else if (c.getCellType() == 0) {\n\t\t\t\t\t\t\t\t//println c.getCellType()\n\t\t\t\t\t\t\t\t\t  tabArray[ci][j]=(c.getNumericCellValue().toString());\n\t\t\t\t\t\t\t\t  //tabArray[ci][j]=c.getStringCellValue();\n\t\t\t\t\t\t\t\t\t  //System.out.println(tabArray[ci][j]);\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t   }\n\t\t\t\t\t   }\n\t\t\t\t\t\tinput.close();\n\t\t\t\t\t   // return(tabArray);\n\t//\t\t\t        return(cj);\n\t\t\t\t\t\tprintln \"return(ci);\"\n\t\t\t\t\t\t\n\t\t\t\t\treturn(tabArray);\n\t\t\t        println \"return(cj);\"\n\t\t\t}\n\t}\n\n\tdef testng = new TestNG()\n\ttestng.setTestClasses(AbTest)\n\ttestng.addListener(new TestListenerAdapter())\n\ttestng.run()"}, {"count": 1, "tags": [], "text": "Same as Bug 56001, please provide actual failure information and a more cut-down reproducer to increase your chances of people actually taking a look here!", "attachment_id": null, "bug_id": 56002, "id": 172844, "time": "2014-02-01T17:02:48Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2014-02-01T17:02:48Z", "is_private": false}, {"count": 2, "tags": [], "text": "Similar to bug 56001, no response for a long time therefore closing this INVALID for now.", "attachment_id": null, "id": 185195, "creation_time": "2015-09-13T19:23:42Z", "time": "2015-09-13T19:23:42Z", "creator": "dominik.stadler@gmx.at", "bug_id": 56002, "is_private": false}]
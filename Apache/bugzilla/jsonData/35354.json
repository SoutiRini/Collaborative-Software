[{"count": 0, "tags": [], "bug_id": 35354, "text": "* 1. Preface\n * \n * Before you read the document we assume that you have the knowledge of T, if \nyou ever\n * have used T to develop a tiny sample then the content will be family with \nand grasped\n * by you quickly.\n * \n * 2. What's S?\n * \n * S is an IDE to help user developing a web-based application with the \nframework of T. It\n * provides a serial of wizards and design panels to easy the development of T \napplication.\n * S is an opensource project that everybody can modified it and redistribute \nit to the \n * thirty-party.\n * \n * 3. UI Introduce\n * \n * UI design is composed of three parts of panels, they are toolbox, property \nsheet and\n * design panel. Toolbox lists all controls used by S and developer can select\n * the specified control with mouse pointer from it to build the application's \nUI.\n * Property sheet displays the selected component's editable properties that \ncan \n * be changed in S, on the property's value changed source code and control's \nUI will \n * be changed along with it. As you know not all properties can be edit in the \nproperty sheet\n * unitl now. Design panel is the main area that design the application's UI, \ndeveloper can \n * select a control and change its size and location by drag mouse. Design \npanel also supports\n * right click to popup a menu that have common functions to manipulate \ncontrol, for example the\n * action of removing a control.\n * \n * To easy the development of application with the studio, S also provides a \nserial of wizards to\n * decrease the work of coding for developer, for example S wizard will help \ndeveloper creating\n * a well-formed code structure according to the type of selected window.\n * \n * 4.Building a simple applcation with S\n * \n * In the chapter a simple application will be taken as an example to tell you \nhow to develop a T\n * application with S.\n * \n * The runtime of application is based on Tomcat and you must intall the \nTomcat's plugin in eclipse\n * corrently. Details about Tomcat plugin isn't important to this document and \nyou can refer to another\n * articles.\n * \n * 4.1 Creating Tomcat project\n * \n * You can create a Tomcat project by selecting File->New->Project, in the \nwizard of new project you \n * can select the type of project to Tomcat. We assume the name of project \nis \"S\".\n * \n * 4.2 New a window\n * \n * New a window by selecting File->New->Other, in the wizard of new file please \nselect the T and input \n * the window's name, of course you can choose the type of window in the wizard \nabove.\n * \n * In the UI design add a button and a textfield into the design panel, then \ndouble-click button to \n * attach a event listener to it set the textfield's value to 'hello world'.\n * \n * After you completed the design of UI please save the file, it will be used \nlater.\n * \n * 4.3 Building the entry of application\n * \n * If you have used S then you must known that every S application must have an \nentry to start it\n * and the entry class must be configed into web.xml.\n * \n * 4.3.1 New entry class\n * \n * New a entry class by selecting File->New->Other, in the wizard of new file \nplease select the T and\n * input the class's name. You must write the code in the body of start() to \ntell which window will be\n * opened in the first time when the application started, the following is a \ntiny fragment extract from \n * sample.\n * \n * 4.3.2 Configuring web.xml\n * \n * Web.xml is a configuration file for J2EE application, it stores the \ninformation of application's initial  \n * parameters and context resources. For T application , you must configure \nwhich appliction will be start\n * in it. The following is a example for this tutorial.\n *  \n * 4.4 Starting application\n * \n * You can start Tomcat plugin in eclipse and browser the result in Internet \nExplorer through the \n * following URL:. If you have set the application's context as reloadable then \nevery change\n * in Java editor or design panel will reflect the browser, it is a good method \nto debug the UI.\n *  \n * 5. Notice\n * \n * S only supports the single-direction synchronization that the change to the \nUI happened in the \n * UI design will affect the source code, but the change to the source code \nwon't affect the UI shown\n * in UI design. If you wish the change also happened in UI design you can \nclose the editor and then \n * open the file again, the UI design will build the UI according to current \ncontent through parse\n * the file. It is a good custom that don't modify the part of code that \nconnect with UI in java editor.", "id": 76374, "time": "2005-06-14T08:27:00Z", "creator": "snailonline@21cn.com", "creation_time": "2005-06-14T08:27:00Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 35354, "is_private": false, "id": 79372, "time": "2005-09-04T23:35:01Z", "creator": "markt@apache.org", "creation_time": "2005-09-04T23:35:01Z", "tags": [], "text": "No idea what this is. Resolving as invalid."}]
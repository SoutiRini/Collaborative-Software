[{"count": 0, "tags": [], "bug_id": 55730, "attachment_id": 30987, "is_private": false, "id": 170948, "time": "2013-10-31T22:40:44Z", "creator": "eric@peters.org", "creation_time": "2013-10-31T22:40:44Z", "text": "Created attachment 30987\nFix org.apache.poi.ss.usermodel.BuiltinFormats.java for 0x29-0x2c\n\nThe documentation is both correct and wrong. \"*\" is a special character to indicate a repeating character to fit a cell: http://office.microsoft.com/en-us/excel-help/number-format-codes-HP005198679.aspx\n\nAt some point in time the documentation removed the <space> character in the *<space> format strings, but it also swapped the 0x2b with the 0x2c format strings in the implementation (Such as an Accounting format)\n\nThe org.apache.poi.ss.usermodel.DataFormatter is still bugged when supporting the correct 0x2b, but this at least should get fixed.\n\nI tried using the patch guidelines at: http://poi.apache.org/guidelines.html but the ant command didn't work, and since I checked everything out with git, that didn't work either - so resulted in just using SourceTree to generate a patch file.  Either way the patch isn't too complicated and could be easily applied."}, {"count": 1, "tags": [], "text": "Sorry, I forgot to include the fixes to the MissingBits.xls / etc...hmm will see if I can figure out howto do a legit patch.", "is_private": false, "id": 170949, "creator": "eric@peters.org", "time": "2013-10-31T22:50:13Z", "bug_id": 55730, "creation_time": "2013-10-31T22:50:13Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "Comment on attachment 30987\nFix org.apache.poi.ss.usermodel.BuiltinFormats.java for 0x29-0x2c\n\nFrom 3bba25eb4fb67eff700b05a0e11c9a52ef39d6bd Mon Sep 17 00:00:00 2001\nFrom: Eric Peters <eric@peters.org>\nDate: Thu, 31 Oct 2013 15:38:56 -0700\nSubject: [PATCH] HSSP Formats\n\n---\n src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java    | 13 +++++++------\n .../hssf/eventusermodel/TestFormatTrackingHSSFListener.java |  3 ++-\n 2 files changed, 9 insertions(+), 7 deletions(-)\n\ndiff --git a/src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java b/src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java\nindex 5fe6e13..2dad6f8 100644\n--- a/src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java\n+++ b/src/java/org/apache/poi/ss/usermodel/BuiltinFormats.java\n@@ -54,10 +54,10 @@ import java.util.Map;\n  *       0x26, \"#,##0_);[Red](#,##0)\"<br/>\n  *       0x27, \"#,##0.00_);(#,##0.00)\"<br/>\n  *       0x28, \"#,##0.00_);[Red](#,##0.00)\"<br/>\n- *       0x29, \"_(*#,##0_);_(*(#,##0);_(* \\\"-\\\"_);_(@_)\"<br/>\n- *       0x2a, \"_($*#,##0_);_($*(#,##0);_($* \\\"-\\\"_);_(@_)\"<br/>\n- *       0x2b, \"_(*#,##0.00_);_(*(#,##0.00);_(*\\\"-\\\"??_);_(@_)\"<br/>\n- *       0x2c, \"_($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\"<br/>\n+ *       0x29, \"_(* #,##0_);_(* (#,##0);_(* \\\"-\\\"_);_(@_)\"<br/>\n+ *       0x2a, \"_($* #,##0_);_($* (#,##0);_($* \\\"-\\\"_);_(@_)\"<br/>\n+ *       0x2b, \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\"<br/>\n+ *       0x2c, \"_($* #,##0.00_);_($* (#,##0.00);_($* \\\"-\\\"??_);_(@_)\"<br/>\n  *       0x2d, \"mm:ss\"<br/>\n  *       0x2e, \"[h]:mm:ss\"<br/>\n  *       0x2f, \"mm:ss.0\"<br/>\n@@ -69,6 +69,7 @@ import java.util.Map;\n  * @author Yegor Kozlov\n  *\n  * Modified 6/17/09 by Stanislav Shor - positive formats don't need starting '('\n+ * Modified 10/31/13 by Eric Peters - * is a repeating/padding character directive, examples needed a space after the asterix (e.i. Accounting format)\n  *\n  */\n public final class BuiltinFormats {\n@@ -137,8 +138,8 @@ public final class BuiltinFormats {\n \t\tputFormat(m, 0x28, \"#,##0.00_);[Red](#,##0.00)\");\n \t\tputFormat(m, 0x29, \"_(\\\"$\\\"* #,##0_);_(\\\"$\\\"* (#,##0);_(\\\"$\\\"* \\\"-\\\"_);_(@_)\");\n \t\tputFormat(m, 0x2a, \"_(* #,##0_);_(* (#,##0);_(* \\\"-\\\"_);_(@_)\");\n-\t\tputFormat(m, 0x2b, \"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\");\n-\t\tputFormat(m, 0x2c, \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\");\n+\t\tputFormat(m, 0x2b, \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\");\n+\t\tputFormat(m, 0x2c, \"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\");\n \t\tputFormat(m, 0x2d, \"mm:ss\");\n \t\tputFormat(m, 0x2e, \"[h]:mm:ss\");\n \t\tputFormat(m, 0x2f, \"mm:ss.0\");\ndiff --git a/src/testcases/org/apache/poi/hssf/eventusermodel/TestFormatTrackingHSSFListener.java b/src/testcases/org/apache/poi/hssf/eventusermodel/TestFormatTrackingHSSFListener.java\nindex f3bc27b..ad144a2 100644\n--- a/src/testcases/org/apache/poi/hssf/eventusermodel/TestFormatTrackingHSSFListener.java\n+++ b/src/testcases/org/apache/poi/hssf/eventusermodel/TestFormatTrackingHSSFListener.java\n@@ -57,7 +57,8 @@ public final class TestFormatTrackingHSSFListener extends TestCase {\n \n \t\tassertEquals(\"_(\\\"$\\\"* #,##0_);_(\\\"$\\\"* (#,##0);_(\\\"$\\\"* \\\"-\\\"_);_(@_)\", listener.getFormatString(41));\n \t\tassertEquals(\"_(* #,##0_);_(* (#,##0);_(* \\\"-\\\"_);_(@_)\", listener.getFormatString(42));\n-\t\tassertEquals(\"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\", listener.getFormatString(43));\n+\t\tassertEquals(\"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\", listener.getFormatString(43));\n+\t\tassertEquals(\"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\", listener.getFormatString(44));\n \t}\n \t\n \t/**\n-- \n1.7.11.1", "is_private": false, "id": 170950, "creator": "eric@peters.org", "time": "2013-10-31T22:58:57Z", "bug_id": 55730, "creation_time": "2013-10-31T22:58:57Z", "attachment_id": 30987}, {"count": 3, "tags": [], "bug_id": 55730, "attachment_id": 30988, "id": 170951, "time": "2013-10-31T23:00:13Z", "creator": "eric@peters.org", "creation_time": "2013-10-31T23:00:13Z", "is_private": false, "text": "Created attachment 30988\nFix org.apache.poi.ss.usermodel.BuiltinFormats.java for 0x29-0x2c w/test fixed"}, {"count": 4, "tags": [], "text": "I have a sneaking suspicion that at some point, some of the documentation had a mistake or two in it about the format lists. I wonder if we've either got the wrong one, or if the docs you've seen has the wrong one, or if that was actually something completely different I'm confused about...\n\nHopefully someone else can confirm!", "is_private": false, "id": 170952, "creator": "apache@gagravarr.org", "time": "2013-10-31T23:12:44Z", "bug_id": 55730, "creation_time": "2013-10-31T23:12:44Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 55730, "is_private": false, "id": 170953, "attachment_id": null, "creator": "eric@peters.org", "creation_time": "2013-10-31T23:41:40Z", "time": "2013-10-31T23:41:40Z", "text": "@Nick I guess this might be more complicated, but the patch holds up.\n\nI am creating the .xls files using Office 2010 in a Save As... environment, I hope that's not the issue.  It would seem to me the patch I have for BuiltinFormats.java is consistent with what's in the original javadoc.\n\n\nTHe XSSF Code seems to re-use the same BuiltinFormats via org.apache.poi.xssf.usermodel.XSSFCellStyle\n\n    public String getFormat(short index) {\n        String fmt = stylesSource.getNumberFormatAt(index);\n        if(fmt == null) fmt = BuiltinFormats.getBuiltinFormat(index);\n        return fmt;\n    }\n\nThat said once I poked into the file I saw:\n<numFmts count=\"4\">\n    <numFmt numFmtId=\"44\" formatCode=\"_(&quot;$&quot;* #,##0.00_);_(&quot;$&quot;* \\(#,##0.00\\);_(&quot;$&quot;* &quot;-&quot;??_);_(@_)\"/>\n    <numFmt numFmtId=\"43\" formatCode=\"_(* #,##0.00_);_(* \\(#,##0.00\\);_(* &quot;-&quot;??_);_(@_)\"/>\n    <numFmt numFmtId=\"171\" formatCode=\"_-[$\u00a3-809]* #,##0.00_-;\\-[$\u00a3-809]* #,##0.00_-;_-[$\u00a3-809]* &quot;-&quot;??_-;_-@_-\"/>\n    <numFmt numFmtId=\"172\" formatCode=\"_ [$\u00a5-804]* #,##0.00_ ;_ [$\u00a5-804]* \\-#,##0.00_ ;_ [$\u00a5-804]* &quot;-&quot;??_ ;_ @_ \"/>\n</numFmts>\n\nSo it looks like Excel 2010 wrote the proper format code into the file directly, so XSSF skips BuiltinFormats in this case.\n\nMy Original Unit Test was:\n\nHSSF:\n  Vector(Vector($4.79, * 4.79)) did not equal Vector(Vector(4.79, $4.79))  (TestExcelFlatFileReaderCommon.scala:37)\nXSSF:\n  Vector(Vector(* 4.79, $4.79)) did not equal Vector(Vector(4.79, $4.79)) (TestExcelFlatFileReaderCommon.scala:37)\n\nThat makes a lot more sense now why one would show one thing, and the other something else.\n\nThe underlying problem here is the DataFormatter isn't supporting the Format Index: 43 properly with that *<space>, but that's a separate issue than correcting the HSSF."}, {"count": 6, "tags": [], "text": "@Nick - second part of the fix:\n\neric@Erics-MacBook-Pro:~/Work/poi$ git diff\ndiff --git a/src/java/org/apache/poi/ss/usermodel/DataFormatter.java b/src/java/org/apache/poi/ss/usermodel/DataFormatter.java\nindex 273dd89..eae651d 100644\n--- a/src/java/org/apache/poi/ss/usermodel/DataFormatter.java\n+++ b/src/java/org/apache/poi/ss/usermodel/DataFormatter.java\n@@ -265,7 +265,8 @@ public class DataFormatter {\n //      int i = cellValue > 0.0 ? 0 : cellValue < 0.0 ? 1 : 2; \n //      String formatStr = (i < formatBits.length) ? formatBits[i] : formatBits[0];\n \n-        String formatStr = formatStrIn;\n+        // Strip out repeating characters in the number format\n+        String formatStr = formatStrIn.replaceAll(\"\\\\*.\",\"\");\n         // Excel supports positive/negative/zero, but java\n         // doesn't, so we need to do it specially\n         final int firstAt = formatStr.indexOf(';');\ndiff --git a/src/testcases/org/apache/poi/ss/usermodel/TestDataFormatter.java b/src/testcases/org/apache/poi/ss/usermodel/TestDataFormatter.java\nindex 20825e5..d2a975e 100644\n--- a/src/testcases/org/apache/poi/ss/usermodel/TestDataFormatter.java\n+++ b/src/testcases/org/apache/poi/ss/usermodel/TestDataFormatter.java\n@@ -271,7 +271,11 @@ public class TestDataFormatter extends TestCase {\n        assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"##.##* \"));\n        assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"##.##*1\"));\n        assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"##.##*)\"));\n+       assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"* ##.##\"));\n        assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"*-##.##\"));\n+       assertEquals(\"12.34\", dfUS.formatRawCellContents(12.343, -1, \"_(* #,##0.00_)\"));\n+\n+//\"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\"\n     }\n     \n     /**", "is_private": false, "id": 170954, "creator": "eric@peters.org", "time": "2013-11-01T00:20:02Z", "bug_id": 55730, "creation_time": "2013-11-01T00:20:02Z", "attachment_id": null}, {"count": 7, "tags": [], "creator": "eric@peters.org", "attachment_id": null, "text": "I finally found a more authoritive reference on this patch: http://support.microsoft.com/kb/147942 - lists the standard build int format strings:\n\n\n0x2b      _(* #,##0.00_);_(* (#,##0.00);_(* \"-\"??_);_(@_)\n0x2c      _($* #,##0.00_);_($* (#,##0.00);_($* \"-\"??_);_(@_)\n\n\n1) you can see that the format strings do include a space after the repeating character asterixes\n\n2) the 0x2b should not be the accounting $, and the 2x2c should be, exactly like the fix in my patch\n\n-\t\tputFormat(m, 0x2b, \"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\");\n-\t\tputFormat(m, 0x2c, \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\");\n+\t\tputFormat(m, 0x2b, \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\");\n+\t\tputFormat(m, 0x2c, \"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\");", "id": 171905, "time": "2013-12-23T16:56:06Z", "bug_id": 55730, "creation_time": "2013-12-23T16:56:06Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 55730, "attachment_id": null, "is_private": false, "id": 171916, "time": "2013-12-24T05:59:40Z", "creator": "yegor@dinom.ru", "creation_time": "2013-12-24T05:59:40Z", "text": "Thanks for the patch, applied in r1553247\n\nRegards,\nYegor"}, {"count": 9, "tags": [], "bug_id": 55730, "text": "Sorry, it's only half fixed. 0x29 and 0x2a are still wrong. Anyway this bug is duplicate of 54318\n\n*** This bug has been marked as a duplicate of bug 54318 ***", "id": 174803, "attachment_id": null, "creator": "seebass@gmx.ch", "creation_time": "2014-04-23T13:29:43Z", "time": "2014-04-23T13:29:43Z", "is_private": false}]
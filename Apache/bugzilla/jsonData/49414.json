[{"count": 0, "tags": [], "text": "Created attachment 25566\nUnit test allowing to generate the wrong log message (but doesn't catpure the log to really test it)\n\nAt Tomcat shutdown I have quite often following message\n\nSEVERE: The web application [/] appears to have started a thread named [http-8001-exec-1] but has failed to stop it. This is very likely to create a memory leak. \n\nLooking into the details it appears that a request is still being processed. The thread that is detected as leak is not a user thread but Tomcat's executor thread.\n\nI'm not sure what would be the right behaviour here: complain about a request that is still being processed or to wait for it. In any case, Tomcat shouldn't complain with current message as it is too misleading and leads to ignoring real memory leak messages.\n\nThe root cause of the problem is the strategy used to detect threads started by a web app which isn't able to correctly identify threads started by Tomcat itself (contextClassLoader is changed at each request). A solution could be to use a ThreadGroup to identify \"Tomcat threads\". If you see this as a good solution, I can try to prepare a patch.\n\nSame problem occurs in Tomcat 6.", "is_private": false, "id": 137494, "creator": "mguillemot@yahoo.fr", "time": "2010-06-09T10:11:08Z", "bug_id": 49414, "creation_time": "2010-06-09T10:11:08Z", "attachment_id": 25566}, {"count": 1, "tags": [], "text": "Tomcat already waits (I think 20s is the default) for requests to complete before shutting down the webapp.\n\nA still running request, particularly if deadlocked, would trigger a memory leak so I think this is something that the leak detection should be reporting. I agree a better message is required to make clear the correct root cause in this scenario. I don't have any strong feelings at this point as to the best way to go. At first glance a ThreadGroup looks reasonable.", "is_private": false, "id": 137603, "creation_time": "2010-06-13T16:28:45Z", "time": "2010-06-13T16:28:45Z", "creator": "markt@apache.org", "bug_id": 49414, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 49414, "attachment_id": null, "id": 137608, "time": "2010-06-14T03:20:42Z", "creator": "mguillemot@yahoo.fr", "creation_time": "2010-06-14T03:20:42Z", "is_private": false, "text": "(In reply to comment #1)\n> Tomcat already waits (I think 20s is the default) for requests to complete\n> before shutting down the webapp.\n\n???\nIf you run the provided unit test, you will see that Tomcat doesn't wait 20 secondes for requests to complete.\n\n> A still running request, particularly if deadlocked, would trigger a memory\n> leak so I think this is something that the leak detection should be reporting.\n> I agree a better message is required to make clear the correct root cause in\n> this scenario. I don't have any strong feelings at this point as to the best\n> way to go. At first glance a ThreadGroup looks reasonable.\n\nThinking at it again, it would surely not be bad to have a \"Tomcat ThreadGroup\" but it wouldn't solve the problem here: user Threads started from a webapp without a specified ThreadGroup would belong to the Tomcat ThreadGroup too. In this case it wouldn't help to distinguish \"Tomcat threads\" from \"user threads\"."}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 137880, "attachment_id": null, "bug_id": 49414, "creation_time": "2010-06-25T03:57:05Z", "time": "2010-06-25T03:57:05Z", "text": "Tomcat does wait for requests to complete, I just got the default wait period wrong by an order of magnitude. It waits 2 seconds, not 20 by default. The unloadDelay attribute of the context controls this.\n\nI have fixed this issue by examining the stack trace of threads with issues. I decided to use the presence - or not - of the CoyoteAdator.service() call to determine if this was a request thread. It is unlikely (but not impossible) that even a customised Tomcat would have re-written that code.\n\nThis has been fixed in trunk and will be included in 7.0.1 onwards.\n\nI have proposed the same fix for Tomcat 6."}, {"count": 4, "attachment_id": null, "creator": "markt@apache.org", "text": "Fixed in 6.0.x and will be included in 6.0.28 onwards.", "id": 137974, "time": "2010-06-29T07:32:51Z", "bug_id": 49414, "creation_time": "2010-06-29T07:32:51Z", "tags": [], "is_private": false}]
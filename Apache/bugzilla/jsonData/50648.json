[{"count": 0, "tags": [], "bug_id": 50648, "attachment_id": 26545, "text": "Created attachment 26545\nsvn diff\n\nThis enhancement proposal addresses three separate issues with the RpcChannel tribes component.\n\n1. There is a minor bug in a catch(InterruptedException) clause, in which a call to Thread#interrupted() is made, as opposed to Thread#interrupt(), as it should be.\n\n2. The RpcChannel API user registers an RpcCallback to be notified of communication events. However, there is no callback method for the case where the sending of a response message fails. This proposal includes the addition of a corresponding callback for such cases. To ensure backwards-compatibility, the additional callback method has been declared in a sub-interface of RpcCallback, named RpcCallback2 for the time being.\n\n3. Since the tribes classes are loaded by the tomcat loader, if the messages sent through tribes are instances of classes defined in the webapp, attemps to deserialize them will fail. AbstractReplicatedMap includes a mechanism for the API user to specify class loaders to be used when deserializing map entries. This enhancement proposal includes a similar mechanism for the RpcChannel.\n\nPlease find the proposed modifications attached.", "id": 143618, "time": "2011-01-25T09:38:16Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-25T09:38:16Z", "is_private": false}, {"count": 1, "tags": [], "text": "(In reply to comment #0)\n> This enhancement proposal addresses three separate issues with the RpcChannel\n> tribes component.\n\nSeparate issues should have separate Bugzilla entries and separate patches. Trying to manage multiple issues with a single Bugzilla entry quickly gets to be a pain.\n\n> 1. There is a minor bug in a catch(InterruptedException) clause, in which a\n> call to Thread#interrupted() is made, as opposed to Thread#interrupt(), as it\n> should be.\n\nFixed in 7.0.x and will be included in 7.0.7 onwards.\n\n\n> 2. The RpcChannel API user registers an RpcCallback to be notified of\n> communication events. However, there is no callback method for the case where\n> the sending of a response message fails. This proposal includes the addition of\n> a corresponding callback for such cases. To ensure backwards-compatibility, the\n> additional callback method has been declared in a sub-interface of RpcCallback,\n> named RpcCallback2 for the time being.\n\nPlease open a new issue for this enhancement.\nThe API isn't fixed for 7.0.x so just add the method to the RpcCallback interface. \nPatches should be the minimum to address the issue and should use the same style as the existing code.\n\n> 3. Since the tribes classes are loaded by the tomcat loader, if the messages\n> sent through tribes are instances of classes defined in the webapp, attemps to\n> deserialize them will fail. AbstractReplicatedMap includes a mechanism for the\n> API user to specify class loaders to be used when deserializing map entries.\n> This enhancement proposal includes a similar mechanism for the RpcChannel.\n\nPlease open a new issue for this enhancement request.\nPatches should be the minimum to address the issue and should use the same style as the existing code.", "attachment_id": null, "id": 143670, "creator": "markt@apache.org", "time": "2011-01-26T11:53:45Z", "bug_id": 50648, "creation_time": "2011-01-26T11:53:45Z", "is_private": false}, {"count": 2, "tags": [], "text": "\n2. \nWhat type of exceptions have you seen here?\nReply failed callback, is a strange callback, since the receiver, not the sender would receive that callback. That would make for some confusing programming logic. The sender will simply timeout, and not get the reply, and has to act accordingly. But I'm not sure the receiver needs to be notified.\n\n3.\nThe external loaders IMHO don't belong here.\nFor the applications that wish to provide custom class loading, I would simply send messages using the ByteMessage class. That way you have full control over what is happening.", "is_private": false, "id": 143673, "creator": "fhanik@apache.org", "time": "2011-01-26T12:39:40Z", "bug_id": 50648, "creation_time": "2011-01-26T12:39:40Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "@Mark\nSorry about that. I'll file seperate entries and will try to match the style.\n\n\n(In reply to comment #2)\n> 2. \n> What type of exceptions have you seen here?\n> Reply failed callback, is a strange callback, since the receiver, not the\n> sender would receive that callback. That would make for some confusing\n> programming logic. The sender will simply timeout, and not get the reply, and\n> has to act accordingly. But I'm not sure the receiver needs to be notified.\n\nI haven't /seen/ any exceptions, but I would assume any exception that can be thrown by a normal Channel#send could come up here, since a Channel#send is what happens.\nThe RpcCallback interface contains both callbacks that are invoked on the sender (leftOver) and receiver (replyRequest) side. If that isn't confusing, I don't see why adding one would be. \nThe specific case where I felt the need for such a callback was one where I was shuttling instances across nodes -- by \"shuttling\" I mean removing them from one and putting them on the other. I would receive a request through the RpcChannel for an instance, look it up, unregister it locally, pack it in the reply, send it. If the sending failed, I would want to re-register it locally, so as not to lose data.\nWhatever you may think of that usage, the fact remains that there's a discrepancy between requests on an RpcChannel, where the sender is notified of communication errors, and replies on the RpcChannel, where he (the sender of the reply) isn't. Even though in both cases it's the same Channel#send that is performed.\n\n \n> 3.\n> The external loaders IMHO don't belong here.\n> For the applications that wish to provide custom class loading, I would simply\n> send messages using the ByteMessage class. That way you have full control over\n> what is happening.\n\nIt's true, you could use ByteMessages. Although as an API user, your code would become more clunky, and you'd lose the ability to quickly look up the message's class.\nWouldn't it be nice to have, though? It makes things easier, cleaner and doesn't add any significant overhead. Also, as things stand, the tribes API is somewhat misleading in that it offers to send Serializable messages (methods like Channel#send take Serializable arguments), when in practice all your app's classes are excluded, no matter how Serializable they may be.", "is_private": false, "id": 143697, "creator": "ocostet@zenprise.com", "time": "2011-01-27T06:17:20Z", "bug_id": 50648, "creation_time": "2011-01-27T06:17:20Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 50648, "text": "Filed separe enhancement requests:\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=50667 (replyFailed)\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=50670 (class loaders)", "id": 143709, "time": "2011-01-27T08:50:53Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-27T08:50:53Z", "is_private": false, "attachment_id": null}]
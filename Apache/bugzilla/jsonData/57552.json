[{"count": 0, "tags": [], "creator": "Mark.Olesen@gmx.net", "attachment_id": null, "text": "", "id": 180868, "time": "2015-02-09T14:40:42Z", "bug_id": 57552, "creation_time": "2015-02-09T14:40:42Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 57552, "text": "Created attachment 32443\ndemonstration of possible fix for posted bug\n\nThe patch has been implemented as a static 'fix-up' to allow easy testing without touching the original sources.\n\nHowever, I think that it would make more sense to have the OPCPackage.getPartsByName() with a comparator, so that the indices are properly sorted to start with. Then there would only be the need to deal 0-based vs. 1-based.", "id": 180869, "time": "2015-02-09T14:48:41Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-02-09T14:48:41Z", "is_private": false, "attachment_id": 32443}, {"count": 2, "tags": [], "bug_id": 57552, "text": "Might be worth posting to the dev list - I seem to recall that a few months ago someone was talking about fixing up some problem with opc relations that was going to need some moderately major internal changes to do things cleanly. You might find this helps with that, or you can otherwise assist with the refactor :)", "id": 180870, "time": "2015-02-09T14:56:52Z", "creator": "apache@gagravarr.org", "creation_time": "2015-02-09T14:56:52Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "Mark.Olesen@gmx.net", "is_private": false, "text": "Created attachment 32573\npatch (generated with git format-patch against trunk)\n\nShould I following up on a dev-list?\nI have a few more ideas for fixes (pptx handling), but I don't want to be coding in vain.", "id": 181782, "time": "2015-03-15T16:48:30Z", "bug_id": 57552, "creation_time": "2015-03-15T16:48:30Z", "attachment_id": 32573}, {"attachment_id": null, "tags": [], "creator": "kiwiwings@apache.org", "is_private": false, "count": 4, "id": 182672, "time": "2015-04-27T21:19:39Z", "bug_id": 57552, "creation_time": "2015-04-27T21:19:39Z", "text": "I see that your code introduces a sorting in combination with a comparing interface, but I don't understand what problem it solves.\nIs sorting necessary to suffice the M1.12 rule?\nWhy is the old code wrong, which just compares case-insensitive?\n\nPlease give an example as to when addPicture() finds the incorrect image, i.e. adding a sample pptx and a test case (failing in the old code/working with the new code) would be good."}, {"count": 5, "tags": [], "bug_id": 57552, "text": "Hi Andreas,\n\nIt'll take some time for me to put together a test pptx, but the problem/solution are fairly quickly explained. When adding a picture, the code examines the chksum of the existing pictures to decide if a new entry is needed or an existing media can be reused. With the current code, the media will be listed in lexical order (eg, image1.png, image10.png, image11.png, image2.png, image20.png, image3.png, ...). If the picture to be added already exists, the 0-based index in the list is returned and (later) changed to a 1-based index for the referencing. This results in total rubbish.\n\nFor the small example, the original image10.png is found as index 2 in the list (0-based), which becomes index 3 (1-based) for the slide reference. The slide will thus now reference /media/image3.png !!\n\nThe current code will only work properly if you have a maximum of 9 images.\n\nThe patch introduces a (case-insensitive) alpha-numerical comparator so that the list is ordered as (image1.png, image2.png, ... image10.png, image11.png ...) which re-establishes the proper connection between the indices.\n\n/mark", "id": 182677, "time": "2015-04-28T06:32:46Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-04-28T06:32:46Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 57552, "attachment_id": null, "text": "Errata:\n\nThe original image10.png is found as index 1 in the list (0-based), which becomes index 2 (1-based) for the slide reference. The slide will thus now reference /media/image2.png !!", "id": 182678, "time": "2015-04-28T06:35:16Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-04-28T06:35:16Z", "is_private": false}, {"count": 7, "attachment_id": null, "creator": "apache@gagravarr.org", "text": "I think I've been able to write a unit test to show this, starting from a blank slideshow. See commit r1676810 / TestXSLFBugs.test57552()\n\nIf someone (mark.o perhaps?) could confirm if the logic in that test is sane + it's triggering the same bug, then I can have a go at applying the patch", "id": 182730, "time": "2015-04-29T18:33:39Z", "bug_id": 57552, "creation_time": "2015-04-29T18:33:39Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "creator": "kiwiwings@apache.org", "attachment_id": null, "text": "Do we really need to work with indices?\nHow about changing the return type of addPicture to something like a abstract PictureData class which encapsulate the PackagePart (XSLF) or EscherBSERecord (HSLF)?\nNeed image files always conform to the pattern /ppt/media/image<num>.<ext>? [1]\n\n[1] http://web.mit.edu/~stevenj/www/ECMA-376-new-merged.pdf  (see 15.2.13 Image Part)", "id": 182740, "time": "2015-04-29T22:13:54Z", "bug_id": 57552, "creation_time": "2015-04-29T22:13:54Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 57552, "attachment_id": null, "id": 182741, "time": "2015-04-29T22:24:04Z", "creator": "apache@gagravarr.org", "creation_time": "2015-04-29T22:24:04Z", "is_private": false, "text": "Some sort of helpful wrapper class would seem a cleaner fix to me, though with the small disadvantage of breaking some existing code. However, with the common SL code coming soon, people will need to tweak things anyway, so maybe we just roll this change into that?"}, {"count": 10, "tags": [], "bug_id": 57552, "text": "(In reply to Nick Burch from comment #7)\n> I think I've been able to write a unit test to show this, starting from a\n> blank slideshow. See commit r1676810 / TestXSLFBugs.test57552()\n> \n> If someone (mark.o perhaps?) could confirm if the logic in that test is sane\n> + it's triggering the same bug, then I can have a go at applying the patch\n\n\nThe unit test looks plausible - I'll see if I get time in the next days to test and give confirmation.", "id": 182778, "time": "2015-05-01T08:19:31Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-05-01T08:19:31Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 57552, "text": "(In reply to Nick Burch from comment #9)\n> Some sort of helpful wrapper class would seem a cleaner fix to me, though\n> with the small disadvantage of breaking some existing code. However, with\n> the common SL code coming soon, people will need to tweak things anyway, so\n> maybe we just roll this change into that?\n\nI found the use of plain integers slightly fragile (or weird) too. A wrapper class would definitely be an improvement, even if the first incarnation is nothing better than a wrapped integer.\n\nIn the longer term, I had figured it would be even more convenient to have an addPicture() method on the slide class (I think I've seen something similar in the ppt or the docx code). The user could then simply add a picture to the slide directly without worrying about any of the internal bookkeeping. In the background the method would do the 'if-exists-or-add-new' logic on the slide show.\n\nWith this approach, it would be fairly easy to add a wrapper-class without immediately breaking any existing code. We could also provide extra XMLSlideShow.addPicture() methods that conveniently takes other parameters (eg,InputStream, File, etc) and returns the new wrapper-class. This would also provide an easy way to move forward without breaking existing code.\n\n\nThe PictureDataXXX class could also be slightly extended to include its CRC and (for plain image data) its original dimensions. The would still be fairly lean but would make the existence lookups much easier. Retaining information about the original dimensions makes it easier to handle some other functionality that I've already started to code. Eg,\n\n/** Resize this picture into target rectangle, while maintaining its aspect ratio */\nXSLFPictureShape.resize(Rectangle2D target, RectAlign align);\n\nI'm using this type of method to fit pictures to the placeholder dimensions.", "id": 182779, "time": "2015-05-01T08:44:14Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-05-01T08:44:14Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "Mark.Olesen@gmx.net", "is_private": false, "id": 182780, "time": "2015-05-01T10:19:44Z", "bug_id": 57552, "creation_time": "2015-05-01T10:19:44Z", "tags": [], "text": "> The unit test looks plausible - I'll see if I get time in the next days to\n> test and give confirmation.\n\nBefore:\n  test57552 failed\n  expected: <5> but was: <11> at line 356\n\nAfter patch:\n  test57552 passed\n\nLooks OK."}, {"count": 13, "tags": [], "bug_id": 57552, "text": "Thanks for this, applied in r1677373.\n\nIf you're happy, I'd suggest we close this bug now, and open a new enhancement one to track the improvements to addPicture discussed here", "id": 182810, "time": "2015-05-03T08:49:15Z", "creator": "apache@gagravarr.org", "creation_time": "2015-05-03T08:49:15Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 57552, "text": "(In reply to Nick Burch from comment #13)\n> Thanks for this, applied in r1677373.\n> \n> If you're happy, I'd suggest we close this bug now, and open a new\n> enhancement one to track the improvements to addPicture discussed here\n\nThanks. We can close the bug and follow up with an enhancement.", "id": 182811, "time": "2015-05-03T10:01:32Z", "creator": "Mark.Olesen@gmx.net", "creation_time": "2015-05-03T10:01:32Z", "is_private": false, "attachment_id": null}]
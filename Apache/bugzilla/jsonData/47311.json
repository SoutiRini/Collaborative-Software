[{"count": 0, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": 23751, "id": 127604, "time": "2009-06-03T10:53:30Z", "bug_id": 47311, "creation_time": "2009-06-03T10:53:30Z", "is_private": false, "text": "Created attachment 23751\nPatch adding support for bleed, trim and crop box and scaling\n\nThe attached patch adds support for 4 new simple-page-master fop extension attributes, namely\n\n- fox:crop-box\n- fox:trim-box\n- fox:bleed-box\n- fox:scale\n\nThe box attributes can consist out of up to 4 numeric values (top,left, width, height) and can have units as suffix to each of the numbers.\n\nThe scale attribute can consist out of two numbers each between 0 and 1\n\nIt is implemented for PDF and Java2D renderers."}, {"count": 1, "tags": [], "bug_id": 47311, "text": "\nThanks for this patch, Peter!\n\nI know this is going to be very useful, as questions regarding that functionality pop up on the user list from time to time. We'll look into it, and will keep you informed. I currently have other priorities, but as soon as I see an available slot of time, if no one beats me to it, I'll go into it in more detail.", "id": 127606, "time": "2009-06-03T11:53:21Z", "creator": "adelmelle@apache.org", "creation_time": "2009-06-03T11:53:21Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #1)\n> Thanks for this patch, Peter!\n> \n> I know this is going to be very useful, as questions regarding that\n> functionality pop up on the user list from time to time. We'll look into it,\n> and will keep you informed. I currently have other priorities, but as soon as I\n> see an available slot of time, if no one beats me to it, I'll go into it in\n> more detail.\n\n\nI was wondering whether there is anything I can do to make this move forward. \n\nThanks,\n\n\nPeter", "id": 128038, "time": "2009-06-17T22:46:19Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-06-17T22:46:19Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "Hi Peter,\n\n(In reply to comment #2)\n> (In reply to comment #1)\n> > Thanks for this patch, Peter!\n> > \n> > I know this is going to be very useful, as questions regarding that\n> > functionality pop up on the user list from time to time. We'll look into it,\n> > and will keep you informed. I currently have other priorities, but as soon as I\n> > see an available slot of time, if no one beats me to it, I'll go into it in\n> > more detail.\n> \n> \n> I was wondering whether there is anything I can do to make this move forward. \n\nNot much until we have reviewed the patch and provided comments. Then, if modifications are needed you may want to do them yourself and provide an updated patch, which would speed up its integration in the code base.\n\nI've only had a quick look so far and can't give much feedback yet. I'll try to have a deeper look in the next days. A few things I noticed, though:\n- the IllegalArgumentException in ExtensionElementMapping will have to be replaced by a call to FOP's event notification mechanism (so that the message can be localized, among others things). Have a look in, e.g., org.apache.fop.fo.flow.Table.java to see how it is used (TableEventProducer in that case)\n- the new features will have to be documented on the website. The corresponding source files may be found in the src/documentation/content/xdocs/trunk directory. The ideal place probably is extensions.xml, with a link in output.xml.\n- there are Checkstyle warnings in the new code. You can set up Checkstyle using the checkstyle-4.0.xml at the root of the project.\n\nThose are things that we will have to do before applying the patch anyway, so if you want to speed up the process you can have a go at them.\n\nBack later, hopefully, for comments on the functionalities themselves.\n\nThanks!\nVincent", "id": 128046, "time": "2009-06-18T04:07:38Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-06-18T04:07:38Z", "is_private": false}, {"count": 4, "tags": [], "text": "I've had a more detailed look at the patch and it looks good to me. A few other comments:\n- the definition and parsing of the extension properties should not be put in ExtensionElementMapping, but in a class (and a sub-package) of its own. Where exactly it should be put is not entirely clear to me yet. Probably in a new o.a.f.render.extensions package. How to name the new sub-package also is an open question (scalingcropbleedtrim? rather ugly... pageboundaries (taken from the PDF spec)? prepress?).\n- amendment to what I said about the event notification mechanism: the extension should not use it, rather throw appropriate exceptions, which would be passed over by the PDF library (the classes in o.a.f.pdf) to the PDFDocumentHandler. The former two should remain independent of the notification mechanism to allow later extraction from the FOP codebase and modularization. Only the PDFDocumentHandler must be aware of the notification mechanism.\n- the regexp parsing properties should be made slightly more robust and unit-tested.\n- I have a concern about when the properties are actually parsed. Like it is now they will be parsed only at rendering stage, so if there is a mistake in them the error will be thrown rather 'late' in the process (only after layout has been performed). May that be a problem? Do we want a 'fail-fast' behaviour instead? Open question.\n\nI'm happy to do all the mentioned changes myself, but this will be in one week at the earliest as I'm away next week. Peter, if meanwhile you want to submit an updated patch feel free to do so :-)\n\nThanks,\nVincent", "attachment_id": null, "id": 128308, "creator": "vhennebert@gmail.com", "time": "2009-06-26T03:08:28Z", "bug_id": 47311, "creation_time": "2009-06-26T03:08:28Z", "is_private": false}, {"count": 5, "tags": [], "creator": "adelmelle@apache.org", "attachment_id": null, "id": 128310, "time": "2009-06-26T03:54:12Z", "bug_id": 47311, "creation_time": "2009-06-26T03:54:12Z", "is_private": false, "text": "(In reply to comment #4)\n> - I have a concern about when the properties are actually parsed. Like it is\n> now they will be parsed only at rendering stage, so if there is a mistake in\n> them the error will be thrown rather 'late' in the process (only after layout\n> has been performed). May that be a problem? Do we want a 'fail-fast' behaviour\n> instead? Open question.\n\nWell, since the extension attributes are specific to the PDF renderer, I think it is not a blocker to treat them as plain 'foreign attributes' at parse-time. One case comes to mind where we would need to treat them as genuine 'properties': suppose we want to be able to specify them as expressions, based on other properties."}, {"count": 6, "tags": [], "bug_id": 47311, "text": "(In reply to comment #5)\n> \n> Well, since the extension attributes are specific to the PDF renderer, I think\n\nSorry, ignore this. I just noticed that in the patch, the extension is also implemented for the Java2D-based renderers...", "id": 128311, "time": "2009-06-26T04:02:05Z", "creator": "adelmelle@apache.org", "creation_time": "2009-06-26T04:02:05Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "\nJust noting this for general interest (has little or nothing to do with this issue per se):\nThe previous comments suddenly reminded me that I have always considered the current way that extension /properties/ are handled, as lacking in robustness. We practically force potential implementors of extension properties to modify FOP's codebase. For extension elements or attributes, the pattern is much more open and generic. They can be implemented without necessarily having to modify FOP and recompile. The same should become the case for extension properties, eventually. We probably will want to take a look at offering something like an 'ExtensionPropertyMapping' (currently non-existent), so that implementors can re-use existing PropertyMakers, define their own initial values/enums/keywords, mark properties as inherited, and so on...\n\nThere are already a few 'native' extension properties, for which we define symbolic literals in fo.Constants and which are also registered in fo.FOPropertyMapping. I have never really been too happy with that practice. Contributors are invited to follow that pattern, which will only lead to more clutter.\n\nTackling that issue, however, is not for the faint of heart. It would likely also imply revisiting the way properties are attached to the FONodes and how they are exposed to the outside (layoutengine & renderers), so would lead to changes in a Lot of classes (capital 'L', if you catch the drift...)", "id": 128312, "time": "2009-06-26T04:37:10Z", "creator": "adelmelle@apache.org", "creation_time": "2009-06-26T04:37:10Z", "is_private": false}, {"count": 8, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": 23941, "id": 128638, "time": "2009-07-08T07:01:16Z", "bug_id": 47311, "creation_time": "2009-07-08T07:01:16Z", "is_private": false, "text": "Created attachment 23941\nupdated patch in an attempt to address fop-dev suggestions"}, {"count": 9, "tags": [], "bug_id": 47311, "text": "I think I might have missed something on the mailing lists explaining these features, but Peter, can you explain what these new properties do?  What they offer that it's in the spec?", "id": 128668, "time": "2009-07-09T07:01:12Z", "creator": "sgriffin@cerner.com", "creation_time": "2009-07-09T07:01:12Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #9)\n> I think I might have missed something on the mailing lists explaining these\n> features, but Peter, can you explain what these new properties do?  What they\n> offer that it's in the spec?\n\nSee beginning of bugzilla entry which says\n<quote>\n\nPatch adding support for bleed, trim and crop box and scaling\n\nThe attached patch adds support for 4 new simple-page-master fop extension\nattributes, namely\n\n- fox:crop-box\n- fox:trim-box\n- fox:bleed-box\n- fox:scale\n\nThe box attributes can consist out of up to 4 numeric values (top,left, width,\nheight) and can have units as suffix to each of the numbers.\n\nThe scale attribute can consist out of two numbers each between 0 and 1\n\nIt is implemented for PDF and Java2D renderers.\n</quote>", "id": 128669, "time": "2009-07-09T07:21:32Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-09T07:21:32Z", "is_private": false}, {"count": 11, "tags": [], "text": "Yeah, I saw that, but that still doesn't tell me what I'm looking for.  What's the use case for using these properties?  What functionality do they offer that's not in other properties in the specification?  Is this for background images or something?  Watermarks?\n\nBased on Andreas's comments in this bug this sounds like a common feature request, I've just never heard of it.\n\nI'm only curious because I use FOP pretty extensively and wonder if these extensions add something I would find useful.", "attachment_id": null, "id": 128670, "creator": "sgriffin@cerner.com", "time": "2009-07-09T07:29:51Z", "bug_id": 47311, "creation_time": "2009-07-09T07:29:51Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #11)\n> Yeah, I saw that, but that still doesn't tell me what I'm looking for.  What's\n> the use case for using these properties?  What functionality do they offer\n> that's not in other properties in the specification?  Is this for background\n> images or something?  Watermarks?\n> \n> Based on Andreas's comments in this bug this sounds like a common feature\n> request, I've just never heard of it.\n> \n> I'm only curious because I use FOP pretty extensively and wonder if these\n> extensions add something I would find useful.\n\nAh..ic\n\nThe box'es set the pdf page boxes with the same name. I found http://www.prepressure.com/pdf/basics/page_boxes useful (not necessarily finding the pdf spec an easy read ;)). These boxes are often used to drive what is actually printed as compared to what e.g. acrobat displays\n\nScale is something we needed to use fop for creating adverts. The size of the output depends on e.g. the magazine you want your advert to be published in. As we want to use same stylesheet for different magazines a scale factor makes that possible", "id": 128671, "time": "2009-07-09T07:42:02Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-09T07:42:02Z", "is_private": false}, {"count": 13, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "id": 128827, "time": "2009-07-14T04:23:42Z", "bug_id": 47311, "creation_time": "2009-07-14T04:23:42Z", "is_private": false, "text": "(In reply to comment #8)\n> Created an attachment (id=23941) [details]\n> updated patch in an attempt to address fop-dev suggestions\n\nThanks for the updated patch. I tried to run the AWT renderer and it appears to have been broken by the changes. The main window is opened but no document is displayed, and I get the following exception:\nException in thread \"AWT-EventQueue-0\" java.awt.image.RasterFormatException: (x + width) is outside raster\n\tat sun.awt.image.IntegerInterleavedRaster.createWritableChild(IntegerInterleavedRaster.java:450)\n\tat java.awt.image.BufferedImage.getSubimage(BufferedImage.java:1156)\n\tat org.apache.fop.render.java2d.Java2DRenderer.getPageImage(Java2DRenderer.java:379)\n\tat org.apache.fop.render.java2d.Java2DRenderer.getPageImage(Java2DRenderer.java:425)\n\tat org.apache.fop.render.awt.viewer.ImageProxyPanel.paintComponent(ImageProxyPanel.java:124)\n\tat javax.swing.JComponent.paint(JComponent.java:1027)\n\tat javax.swing.JComponent.paintChildren(JComponent.java:864)\n\tat javax.swing.JComponent.paint(JComponent.java:1036)\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5122)\n\tat javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:277)\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1217)\n\tat javax.swing.JComponent._paintImmediately(JComponent.java:5070)\n\tat javax.swing.JComponent.paintImmediately(JComponent.java:4880)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:803)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:714)\n\tat javax.swing.RepaintManager.seqPaintDirtyRegions(RepaintManager.java:694)\n\tat javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:128)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:597)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:122)\n\nI'll investigate (but: do you really need this feature also for the AWT renderer? ;-) )\n\nThanks,\nVincent"}, {"count": 14, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": null, "id": 128829, "time": "2009-07-14T05:07:06Z", "bug_id": 47311, "creation_time": "2009-07-14T05:07:06Z", "is_private": false, "text": "> \n> Thanks for the updated patch. I tried to run the AWT renderer and it appears to\n> have been broken by the changes. The main window is opened but no document is\n> displayed, and I get the following exception:\n> Exception in thread \"AWT-EventQueue-0\" java.awt.image.RasterFormatException: (x\n> + width) is outside raster\n>     at\n\nOops...that is not so good\n\n> \n> I'll investigate (but: do you really need this feature also for the AWT\n> renderer? ;-) )\n> \nActually 'only' for png output but both awt and png output probably originate from the Java2DRenderer ?"}, {"count": 15, "tags": [], "text": "Created attachment 23978\nUpdated patch avoid awt issue\n\nAnother attempt (hopefully) not breaking awt renderer", "attachment_id": 23978, "id": 128840, "creator": "pc.subscriptions@gmail.com", "time": "2009-07-14T08:25:06Z", "bug_id": 47311, "creation_time": "2009-07-14T08:25:06Z", "is_private": false}, {"count": 16, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "id": 128904, "time": "2009-07-16T04:21:28Z", "bug_id": 47311, "creation_time": "2009-07-16T04:21:28Z", "is_private": false, "text": "There seems to be another problem: in the Swing preview the zoom no longer works. I fixed that by multiplying the scales by scaleFactor instead of overwriting that latter:\n    if (scales != null) {\n        scaleX *= scales.getX();\n        scaleY *= scales.getY();\n    }\nbut then scrolling bars appear the same way as if fox:scale had not been specified. When resizing the window they appear whereas there is obviously still room for the whole document to fit in.\n\nI have doubts about that scale extension, I must say. It seems very ad-hoc to me. Can't that be left to some post-processing mechanism? For PDF output this usually is a job that is handled by the printer. For PNG output I'm sure that there are plenty of programs that can do that very well (actually I had a better quality result when re-scaling the PNG output with an external program than by using the new extension \u2014might be a problem with the Java2D renderer though).\n\nAlso, is there a use case for a non-proportional scale (x scale != y scale)? Not that having different x and y factors makes the whole thing a lot more complicated, but...\n\nThanks,\nVincent\n\n(In reply to comment #13)\n> (In reply to comment #8)\n> > Created an attachment (id=23941) [details] [details]\n> > updated patch in an attempt to address fop-dev suggestions\n> \n> Thanks for the updated patch. I tried to run the AWT renderer and it appears to\n> have been broken by the changes. The main window is opened but no document is\n> displayed, and I get the following exception:\n> Exception in thread \"AWT-EventQueue-0\" java.awt.image.RasterFormatException: (x\n> + width) is outside raster\n>     at\n> sun.awt.image.IntegerInterleavedRaster.createWritableChild(IntegerInterleavedRaster.java:450)\n>     at java.awt.image.BufferedImage.getSubimage(BufferedImage.java:1156)\n>     at\n> org.apache.fop.render.java2d.Java2DRenderer.getPageImage(Java2DRenderer.java:379)\n>     at\n> org.apache.fop.render.java2d.Java2DRenderer.getPageImage(Java2DRenderer.java:425)\n>     at\n> org.apache.fop.render.awt.viewer.ImageProxyPanel.paintComponent(ImageProxyPanel.java:124)\n>     at javax.swing.JComponent.paint(JComponent.java:1027)\n>     at javax.swing.JComponent.paintChildren(JComponent.java:864)\n>     at javax.swing.JComponent.paint(JComponent.java:1036)\n>     at javax.swing.JComponent.paintToOffscreen(JComponent.java:5122)\n>     at\n> javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:277)\n>     at javax.swing.RepaintManager.paint(RepaintManager.java:1217)\n>     at javax.swing.JComponent._paintImmediately(JComponent.java:5070)\n>     at javax.swing.JComponent.paintImmediately(JComponent.java:4880)\n>     at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:803)\n>     at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:714)\n>     at javax.swing.RepaintManager.seqPaintDirtyRegions(RepaintManager.java:694)\n>     at\n> javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:128)\n>     at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)\n>     at java.awt.EventQueue.dispatchEvent(EventQueue.java:597)\n>     at\n> java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)\n>     at\n> java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)\n>     at\n> java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)\n>     at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)\n>     at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)\n>     at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)\n> \n> I'll investigate (but: do you really need this feature also for the AWT\n> renderer? ;-) )\n> \n> Thanks,\n> Vincent"}, {"count": 17, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": 24018, "id": 129032, "time": "2009-07-22T00:04:55Z", "bug_id": 47311, "creation_time": "2009-07-22T00:04:55Z", "is_private": false, "text": "Created attachment 24018\nAWTRenderer change to take into account fop:scale setting"}, {"count": 18, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": null, "id": 129034, "time": "2009-07-22T00:16:37Z", "bug_id": 47311, "creation_time": "2009-07-22T00:16:37Z", "is_private": false, "text": ">>I fixed that by multiplying the scales by scaleFactor instead of\n>>overwriting that latter:\nYeah..that seems correct.\n\n\n> I have doubts about that scale extension, I must say. It seems very ad-hoc to\n> me. Can't that be left to some post-processing mechanism? For PDF output this\n> usually is a job that is handled by the printer. For PNG output I'm sure that\n> there are plenty of programs that can do that very well (actually I had a\n> better quality result when re-scaling the PNG output with an external program\n> than by using the new extension \u2014might be a problem with the Java2D renderer\n> though).\n>\nObviously scaling can be handled through a post processing step, just like adding the pdf boxes can be handled using e.g. PDFBox after fop has rendered the stylesheet to pdf. This is what we currently use. But it is very inelegant as we now need to also store 'template/stylesheet' information outside the stylesheet, dispatch postprocessing based on output type, and it also adds extra processing overhead where, with the integrated approach, almost no extra overhead is needed. Once confronted with things like 'adverts' where page size options are very restricted by publishers it does seem to make sense to integrate it all together, at least from a 'users' perspective. Whether it makes sense for fo(p), I feel not very well placed to comment (at lease the box requirement has been requested before)\n \n> \n> Also, is there a use case for a non-proportional scale (x scale != y scale)?\n> Not that having different x and y factors makes the whole thing a lot more\n> complicated, but...\n> \nPublishers do restrict aspect ratio's. It does not make sense, layout wise, to do 'big' non-proportional scalings, but small factors allow to reuse the same stylesheet page content, for different 'publishers' and that does make the amount of maintenance a lot more manageable.\n\nThanks\n\nPeter"}, {"count": 19, "tags": [], "text": "Hi,\n\n(In reply to comment #18)\n> >>I fixed that by multiplying the scales by scaleFactor instead of\n> >>overwriting that latter:\n> Yeah..that seems correct.\n\nIn the meantime, I found out why the Swing renderer doesn't take the scale extension into account: the AWTRenderer class (which should have been named SwingRenderer really) defines its own getPageImageSize method instead of re-using the stuff from Java2DRenderer.getPageImage. I'll see if I find the energy to fix that.\n\n\n> > I have doubts about that scale extension, I must say. It seems very ad-hoc to\n> > me. Can't that be left to some post-processing mechanism? For PDF output this\n> > usually is a job that is handled by the printer. For PNG output I'm sure that\n> > there are plenty of programs that can do that very well (actually I had a\n> > better quality result when re-scaling the PNG output with an external program\n> > than by using the new extension \u2014might be a problem with the Java2D renderer\n> > though).\n> >\n> Obviously scaling can be handled through a post processing step, just like\n> adding the pdf boxes can be handled using e.g. PDFBox after fop has rendered\n> the stylesheet to pdf. This is what we currently use. But it is very inelegant\n> as we now need to also store 'template/stylesheet' information outside the\n> stylesheet, dispatch postprocessing based on output type, and it also adds\n> extra processing overhead where, with the integrated approach, almost no extra\n> overhead is needed. Once confronted with things like 'adverts' where page size\n> options are very restricted by publishers it does seem to make sense to\n> integrate it all together, at least from a 'users' perspective. Whether it\n> makes sense for fo(p), I feel not very well placed to comment (at lease the box\n> requirement has been requested before)\n\nNote that I don't question the box extensions, which are indeed useful and have already been requested in the past. Only the scale extension was looking very specific to me.\n\n\n> > Also, is there a use case for a non-proportional scale (x scale != y scale)?\n> > Not that having different x and y factors makes the whole thing a lot more\n> > complicated, but...\n> > \n> Publishers do restrict aspect ratio's. It does not make sense, layout wise, to\n> do 'big' non-proportional scalings, but small factors allow to reuse the same\n> stylesheet page content, for different 'publishers' and that does make the\n> amount of maintenance a lot more manageable.\n\nOk. Makes sense.\n\nThere is an inconsistency between PDF and Java2D regarding the coordinates of the boxes: in PDF the x and y coordinates are relative to the left and bottom sides, in Java2D they are relative to the left and /top/ sides. One of the two possibilities will have to be chosen, probably the PDF way.\n\n\nThanks,\nVincent", "attachment_id": null, "id": 129068, "creator": "vhennebert@gmail.com", "time": "2009-07-23T04:16:23Z", "bug_id": 47311, "creation_time": "2009-07-23T04:16:23Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 47311, "attachment_id": 24048, "text": "Created attachment 24048\nBox implementation for Java2d now uses \"pdf box settings\"\n\nThe attached patch fixes the previous comment\n\n\"There is an inconsistency between PDF and Java2D regarding the coordinates of\nthe boxes: in PDF the x and y coordinates are relative to the left and bottom\nsides, in Java2D they are relative to the left and /top/ sides. One of the two\npossibilities will have to be chosen, probably the PDF way.\"\n\nThe boxes for the Java2D renderer now also follows the \"PDF way\"", "id": 129190, "time": "2009-07-28T00:02:42Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-28T00:02:42Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "Hi Peter,\nincidentally, I need this functionality myself in a project I'm currently working on. I've locally applied your patch to play with it. I apologize for the late feedback.\n\nI notice you chose the page size of the simple-page-master as the baseline for the MediaBox. I would have expected the SPM's size to define the TrimBox instead. Bleed and cut marks would then lie outside the actual logical page. I've checked what other FO implementations do and they seem to follow that pattern rather than your approach.\n\nI'm also finding the specification of the areas a bit counter-intuitive. A simple value only sets the left side, rather than the value for all four sides as with other FO properties. I guess that also points to Andreas' comment about reusing property infrastructure where this is already handled. Granted, it is not easy to use. I'm not even sure myself if this can easily be reused with some serious refactoring. At any rate, a print shop will usually just give you the information that you should use 2 or 3 mm for the bleed area. Just specifying one simple value is quite handy.\n\nRather than just criticizing, I'm willing to invest some time to help with this. I would like to make a counter-proposal for the extensions:\n\nThe simple-page-master's width and height properties shall define the TrimBox. If there is no bleed and crop mark area, the MediaBox will be equal to the TrimBox, or rather just the MediaBox is generated in this case, like it happens today.\n\nfox:bleed: <length>{1,4}\nDefault: 0pt\nIf there is only one value, it applies to all sides. If there are two values, the top and bottom bleed widths are set to the first value and the right and left bleed widths are set to the second. If there are three values, the top is set to the first value, the left and right are set to the second, and the bottom is set to the third. If there are four values, they apply to the top, right, bottom, and left, respectively. (Corresponds to http://www.w3.org/TR/xsl11/#padding)\nThe BleedBox is calculated by expanding the TrimBox by the bleed widths.\n(I'd prefer to call the property fox:bleed rather than fox:bleed-box as we don't set the BleedBox values directly. We specify the bleed amount.)\n\nfox:crop-offset: <length>{1,4}\nDefault: 0pt\nSame behaviour as with fox:bleed.\nThe MediaBox is calculated by expanding the BleedBox by the crop offsets.\n\nBTW, the naming above pretty much matches other FO implementations, so should we ever have a standard for these properties (like by reviving exslfo.sf.net), it's likely we probably don't have to change much besides the namespace prefix.\n\nfox:crop-box: (trim-box|bleed-box|media-box)\nDefault: media-box\nThe crop box controls how Acrobat display the page or how the Java2DRenderer sizes the output media. The PDF spec defines that the CropBox defaults to the MediaBox, so it makes sense to do the same here. We could define a fox:crop-box extension which could take three \"magic\" values: \"trim-box\", \"bleed-box\" and \"media-box\" to set the CropBox to one of those three other boxes. That should cover 95% of all use cases. If anyone needs more control, that could easily added later.\n\nI don't have much feedback on fox:scale. I guess it can be useful but I don't see a big use case for an extension. I'd rather want to control that from application code. But it shouldn't get in the way of anything so I have not problem with it.\n\nWDYT?", "id": 129191, "time": "2009-07-28T01:39:04Z", "creator": "jeremias@apache.org", "creation_time": "2009-07-28T01:39:04Z", "is_private": false}, {"count": 22, "tags": [], "bug_id": 47311, "text": "Hi Jeremias,\n\nI can't afford to spend much time on this patch so I'm happy to hand over the job to you. I'm attaching a new patch with my own modifications as I had started to prepare it for commit. Not sure it's going to be any useful given the different approach you'd like to take, but who knows.\n\nA note about the patch: it seemed more sensible to me to deal with integer values rather than double. Indeed every length value is internally converted into a whole number expressed in mpt (AFAICT). That means that I'm using Rectangle instead of Rectangle2D, and I changed some parameters into some classes accordingly (mainly, o.a.f.layoutmgr.Page.java, o.a.f.area.PageViewport.java). But then I noticed that the AreaTreeParser reads the value of the \"bounds\" attribute as double instead of integer. AFAIK, the XML area tree is produced with whole numbers for the page boundaries; I don't see why a user would change that into decimal numbers (which would mean a precision below the mpt!). So I also modified the AreaTreeParser. I don't think this may create any problem?\n\nAlso, a few questions:\n\n(In reply to comment #21)\n<snip/>\n> \n> The simple-page-master's width and height properties shall define the TrimBox.\n> If there is no bleed and crop mark area, the MediaBox will be equal to the\n> TrimBox, or rather just the MediaBox is generated in this case, like it happens\n> today.\n> \n> fox:bleed: <length>{1,4}\n> Default: 0pt\n> If there is only one value, it applies to all sides. If there are two values,\n> the top and bottom bleed widths are set to the first value and the right and\n> left bleed widths are set to the second. If there are three values, the top is\n> set to the first value, the left and right are set to the second, and the\n> bottom is set to the third. If there are four values, they apply to the top,\n> right, bottom, and left, respectively. (Corresponds to\n> http://www.w3.org/TR/xsl11/#padding)\n> The BleedBox is calculated by expanding the TrimBox by the bleed widths.\n> (I'd prefer to call the property fox:bleed rather than fox:bleed-box as we\n> don't set the BleedBox values directly. We specify the bleed amount.)\n> \n> fox:crop-offset: <length>{1,4}\n> Default: 0pt\n> Same behaviour as with fox:bleed.\n> The MediaBox is calculated by expanding the BleedBox by the crop offsets.\n\nJust to be sure: values will be allowed to be negative, right?\n\nIt would make more sense to me to set the default value of crop-offset to the value of bleed.\n\n\n> BTW, the naming above pretty much matches other FO implementations, so should\n> we ever have a standard for these properties (like by reviving exslfo.sf.net),\n> it's likely we probably don't have to change much besides the namespace prefix.\n> \n> fox:crop-box: (trim-box|bleed-box|media-box)\n> Default: media-box\n> The crop box controls how Acrobat display the page or how the Java2DRenderer\n> sizes the output media. The PDF spec defines that the CropBox defaults to the\n> MediaBox, so it makes sense to do the same here. We could define a fox:crop-box\n> extension which could take three \"magic\" values: \"trim-box\", \"bleed-box\" and\n> \"media-box\" to set the CropBox to one of those three other boxes. That should\n> cover 95% of all use cases. If anyone needs more control, that could easily\n> added later.\n\nI'm really not sure about that one. Calling it 'crop-box' is likely to create confusion with the 'crop-offset' property above. Apparently the CropBox is not used in prepress at all, so I would suggest to forget about that for the moment. That is, make the CropBox match with the MediaBox.\n\n\n> I don't have much feedback on fox:scale. I guess it can be useful but I don't\n> see a big use case for an extension. I'd rather want to control that from\n> application code. But it shouldn't get in the way of anything so I have not\n> problem with it.\n> \n> WDYT?\n\n\nVincent", "id": 129195, "time": "2009-07-28T04:28:01Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-07-28T04:28:01Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 47311, "attachment_id": 24049, "text": "Created attachment 24049\nUpdated patch with some clean-up and modifications", "id": 129196, "time": "2009-07-28T04:31:34Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-07-28T04:31:34Z", "is_private": false}, {"count": 24, "tags": [], "creator": "pc.subscriptions@gmail.com", "text": "We were just about to start to rework the patch according to the suggestions made by Jeremias which seem to make a lot of sense, but I am not so sure anymore that is still useful given Vincent's alternative implementation/efforts which we were unaware of.\n\nIt's a bit unclear right now how we can continue to contribute given the different implementation efforts\n\nWe still have a bit of bandwith to spare on this (it is important for us) but we'd rather make sure those efforts are part of a consolidated action\n\nCan someone advice?\n\nThanks\n\nPeter", "id": 129197, "time": "2009-07-28T04:42:22Z", "bug_id": 47311, "creation_time": "2009-07-28T04:42:22Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 129198, "time": "2009-07-28T04:54:14Z", "bug_id": 47311, "creation_time": "2009-07-28T04:54:14Z", "is_private": false, "text": "Peter, I'll respond to Vincent's comments shortly. I think his changes shouldn't affect your changes too much. I think Vincent's comments make sense and I'll see to it that they can be committed separately (they don't really have much to do with the issue at hand). Then it will ideally just be a \"svn up\" on your side to resolve this. And a minor SVN conflict in the worst case. I suggest you just continue as intended."}, {"count": 26, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 129199, "time": "2009-07-28T05:03:05Z", "bug_id": 47311, "creation_time": "2009-07-28T05:03:05Z", "is_private": false, "text": "Hi Vincent,\n\n(In reply to comment #22)\n> I can't afford to spend much time on this patch so I'm happy to hand over the\n> job to you. I'm attaching a new patch with my own modifications as I had\n> started to prepare it for commit. Not sure it's going to be any useful given\n> the different approach you'd like to take, but who knows.\n\nI'm glad to take over.\n\n> A note about the patch: it seemed more sensible to me to deal with integer\n> values rather than double. Indeed every length value is internally converted\n> into a whole number expressed in mpt (AFAICT). That means that I'm using\n> Rectangle instead of Rectangle2D, and I changed some parameters into some\n> classes accordingly (mainly, o.a.f.layoutmgr.Page.java,\n> o.a.f.area.PageViewport.java). But then I noticed that the AreaTreeParser reads\n> the value of the \"bounds\" attribute as double instead of integer. AFAIK, the\n> XML area tree is produced with whole numbers for the page boundaries; I don't\n> see why a user would change that into decimal numbers (which would mean a\n> precision below the mpt!). So I also modified the AreaTreeParser. I don't think\n> this may create any problem?\n\nI don't think so. I'll extract your changes from your patch and apply that separately. That should make it easier for Peter, too.\n\n> Also, a few questions:\n<snip/>\n> > fox:crop-offset: <length>{1,4}\n> > Default: 0pt\n> > Same behaviour as with fox:bleed.\n> > The MediaBox is calculated by expanding the BleedBox by the crop offsets.\n> \n> Just to be sure: values will be allowed to be negative, right?\n\nNegative values don't make much sense, if I didn't miss anything.\n\n> It would make more sense to me to set the default value of crop-offset to the\n> value of bleed.\n\nRight.\n\n> > BTW, the naming above pretty much matches other FO implementations, so should\n> > we ever have a standard for these properties (like by reviving exslfo.sf.net),\n> > it's likely we probably don't have to change much besides the namespace prefix.\n> > \n> > fox:crop-box: (trim-box|bleed-box|media-box)\n> > Default: media-box\n> > The crop box controls how Acrobat display the page or how the Java2DRenderer\n> > sizes the output media. The PDF spec defines that the CropBox defaults to the\n> > MediaBox, so it makes sense to do the same here. We could define a fox:crop-box\n> > extension which could take three \"magic\" values: \"trim-box\", \"bleed-box\" and\n> > \"media-box\" to set the CropBox to one of those three other boxes. That should\n> > cover 95% of all use cases. If anyone needs more control, that could easily\n> > added later.\n> \n> I'm really not sure about that one. Calling it 'crop-box' is likely to create\n> confusion with the 'crop-offset' property above. Apparently the CropBox is not\n> used in prepress at all, so I would suggest to forget about that for the\n> moment. That is, make the CropBox match with the MediaBox.\n\nYes, I thought about that naming closeness, too. Not sure if that's so easy to resolve. If Peter is OK with this, I guess the fox:crop-box could be left out for the moment. I personally don't need it although at some point, such a property might be useful to some.\n\n<snip/>"}, {"count": 27, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "Partially applied Vincent's patch (from today). I've also applied the undisputed parts of Peter's patch. So the next patch by Peter will only need to be about the extensions and their integration into the renderers. I hope the result will merge as painlessly as possible.\nhttp://svn.apache.org/viewvc?rev=798511&view=rev", "id": 129202, "time": "2009-07-28T05:57:22Z", "creator": "jeremias@apache.org", "creation_time": "2009-07-28T05:57:22Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "\n> > > \n> > > fox:crop-box: (trim-box|bleed-box|media-box)\n> > > Default: media-box\n> > > The crop box controls how Acrobat display the page or how the Java2DRenderer\n> > > sizes the output media. The PDF spec defines that the CropBox defaults to the\n> > > MediaBox, so it makes sense to do the same here. We could define a fox:crop-box\n> > > extension which could take three \"magic\" values: \"trim-box\", \"bleed-box\" and\n> > > \"media-box\" to set the CropBox to one of those three other boxes. That should\n> > > cover 95% of all use cases. If anyone needs more control, that could easily\n> > > added later.\n> > \n> > I'm really not sure about that one. Calling it 'crop-box' is likely to create\n> > confusion with the 'crop-offset' property above. Apparently the CropBox is not\n> > used in prepress at all, so I would suggest to forget about that for the\n> > moment. That is, make the CropBox match with the MediaBox.\n> \n> Yes, I thought about that naming closeness, too. Not sure if that's so easy to\n> resolve. If Peter is OK with this, I guess the fox:crop-box could be left out\n> for the moment. I personally don't need it although at some point, such a\n> property might be useful to some.\n> \n> <snip/>\n\nHmmm...not entirely happy with this unfortunately. We have a webapp that using a flex wysiwyg editor allows creation of print materials but that uses adobe's pdf browser plugin for end-user proofing and approval. In some cases we'd rather display the trimbox iso the mediabox so my guess is we should be able to control the CropBox setting, no?\n\nPerhaps a name change for the attribute is sufficient? E.g. something like crop-box-selector, or crop-box-source or something similar?", "id": 129206, "time": "2009-07-28T06:46:26Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-28T06:46:26Z", "is_private": false}, {"count": 29, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #26)\n> Hi Vincent,\n> \n> (In reply to comment #22)\n<snip/>\n> > A note about the patch: it seemed more sensible to me to deal with integer\n> > values rather than double. Indeed every length value is internally converted\n> > into a whole number expressed in mpt (AFAICT). That means that I'm using\n> > Rectangle instead of Rectangle2D, and I changed some parameters into some\n> > classes accordingly (mainly, o.a.f.layoutmgr.Page.java,\n> > o.a.f.area.PageViewport.java). But then I noticed that the AreaTreeParser reads\n> > the value of the \"bounds\" attribute as double instead of integer. AFAIK, the\n> > XML area tree is produced with whole numbers for the page boundaries; I don't\n> > see why a user would change that into decimal numbers (which would mean a\n> > precision below the mpt!). So I also modified the AreaTreeParser. I don't think\n> > this may create any problem?\n> \n> I don't think so. I'll extract your changes from your patch and apply that\n> separately. That should make it easier for Peter, too.\n\nI've just committed a change to also replace Rectangle2D with Rectangle in\nPDFFactory and PDFPage. Forgot to do that in my patch.\n\n\n> > Also, a few questions:\n> <snip/>\n> > > fox:crop-offset: <length>{1,4}\n> > > Default: 0pt\n> > > Same behaviour as with fox:bleed.\n> > > The MediaBox is calculated by expanding the BleedBox by the crop offsets.\n> > \n> > Just to be sure: values will be allowed to be negative, right?\n> \n> Negative values don't make much sense, if I didn't miss anything.\n\nActually not, because the simple-page-master's width and height would define\nthe TrimBox. What I had in mind is to make the BleedBox coincide with the\nsimple-page-master's boundaries, and define a TrimBox inside it. I was thinking\nthat sometimes the document may be easier to design this way (especially when\nyou want areas with dark backgrounds to bleed off the boundary of the final\npage). I guess it's not actually the case.\n\n<snip/>\n\nVincent", "id": 129212, "time": "2009-07-28T07:23:29Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-07-28T07:23:29Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "I've started a Wiki page for the prepress feature: http://wiki.apache.org/xmlgraphics-fop/PrepressSupport\n\nI'll follow up with some additional thoughts on the fop-dev list as discussion in Bugzilla is a bit awkward.", "id": 129231, "time": "2009-07-28T23:54:23Z", "creator": "jeremias@apache.org", "creation_time": "2009-07-28T23:54:23Z", "is_private": false}, {"count": 31, "tags": [], "bug_id": 47311, "attachment_id": 24063, "text": "Created attachment 24063\nPatch including Jeremias'es proposed changes", "id": 129265, "time": "2009-07-30T01:25:35Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-30T01:25:35Z", "is_private": false}, {"count": 32, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 129282, "time": "2009-07-30T06:37:10Z", "bug_id": 47311, "creation_time": "2009-07-30T06:37:10Z", "is_private": false, "text": "Thanks for the new patch, Peter. I've taken a look and found a few issues. I've already started fixing them. Among them:\n- In the Wiki I've switched the meaning for crop-offset to align with what AntennaHouse did (see their illustration): crop-offset expands from the TrimBox, not the BleedBox. That is currently not reflected in the code, so I'll change that, too, if there's no opposition.\n- In the AWT preview, the positioning wasn't ok, yet, when there's a bleed or crop-offset.\n- The Java2DRenderer generates an ugly page border which I've disabled locally. Not sure why we even had that in place. It doesn't make much sense.\n- Also, I've changed the background painting in the Java2DRenderer to use the BleedBox instead of the page size.\n\nOtherwise, the patch makes a good impression. The whole thing is now very intuitive to use, just like I imagined it should be. I'll just allow some time for additional feedback from others. In the meantime, I'll finish the changes to the patch I've started and finally commit the whole thing. BTW, I've also written a little demo FO which demonstrates the features and how I would go about doing crop marks with SVG. I'll commit that after the patch is processed."}, {"count": 33, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "Peter, why can fox:scale not have any number greater than 1? Why only support shrinking but not upsizing?", "id": 129287, "time": "2009-07-30T07:16:51Z", "creator": "jeremias@apache.org", "creation_time": "2009-07-30T07:16:51Z", "is_private": false}, {"count": 34, "tags": [], "creator": "pc.subscriptions@gmail.com", "attachment_id": null, "id": 129289, "time": "2009-07-30T07:27:33Z", "bug_id": 47311, "creation_time": "2009-07-30T07:27:33Z", "is_private": false, "text": "(In reply to comment #33)\n> Peter, why can fox:scale not have any number greater than 1? Why only support\n> shrinking but not upsizing?\n\nHmmm...probably just an oversight on our end. For the sake of generality it should be possible to also use >1 values. You want us to send a new patch?"}, {"count": 35, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #32)\n> Thanks for the new patch, Peter. I've taken a look and found a few issues. I've\n> already started fixing them. Among them:\n> - In the Wiki I've switched the meaning for crop-offset to align with what\n> AntennaHouse did (see their illustration): crop-offset expands from the\n> TrimBox, not the BleedBox. That is currently not reflected in the code, so I'll\n> change that, too, if there's no opposition.\nOk for me.", "id": 129290, "time": "2009-07-30T07:28:18Z", "creator": "pc.subscriptions@gmail.com", "creation_time": "2009-07-30T07:28:18Z", "is_private": false}, {"count": 36, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "id": 129292, "time": "2009-07-30T07:47:10Z", "bug_id": 47311, "creation_time": "2009-07-30T07:47:10Z", "is_private": false, "text": "(In reply to comment #34)\n> (In reply to comment #33)\n> > Peter, why can fox:scale not have any number greater than 1? Why only support\n> > shrinking but not upsizing?\n> \n> Hmmm...probably just an oversight on our end. For the sake of generality it\n> should be possible to also use >1 values. You want us to send a new patch?\n\nNot necessary, thanks. I'll just change that myself then."}, {"count": 37, "tags": [], "text": "Applied the patch with the changes already mentioned. Thanks a lot for your patch Peter, and thanks also for your patience with my late involvement.\nhttp://svn.apache.org/viewvc?rev=800142&view=rev\n\nI hope we will have a chance some day to improve the property subsystem so we can also handle extension like this more elegantly.", "attachment_id": null, "id": 129387, "creator": "jeremias@apache.org", "time": "2009-08-02T12:46:22Z", "bug_id": 47311, "creation_time": "2009-08-02T12:46:22Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #37)\n> Applied the patch with the changes already mentioned. Thanks a lot for your\n> patch Peter, and thanks also for your patience with my late involvement.\n> http://svn.apache.org/viewvc?rev=800142&view=rev\n> \n> I hope we will have a chance some day to improve the property subsystem so we\n> can also handle extension like this more elegantly.\n\nThis is not quite finished I'm afraid:\n- I thought we agreed to set the default value of crop-offset to bleed\n- errors in the specification of extension properties are not redirected through the event mechanism\n- there are typos in the PageBoundariesAttributes and PageScaleAttributes classes\n- there is an encapsulation problem: the fall back boxes used when one of the properties has not been defined are controlled by the client code, instead of being handled inside the extension class itself (PageBoundariesAttributes). This can easily lead to inconsistencies (one default value used in the PDF renderer, another one in the Java2D renderer).\n\nRe-opening the bug as a reminder, as I don't have the time to handle that right now.", "id": 129403, "time": "2009-08-03T04:13:09Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-08-03T04:13:09Z", "is_private": false}, {"count": 39, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "3 of the 4 latest comments have been hopefully satisfyingly taken care of:\nhttp://svn.apache.org/viewvc?rev=800401&view=rev", "id": 129407, "time": "2009-08-03T07:34:06Z", "creator": "jeremias@apache.org", "creation_time": "2009-08-03T07:34:06Z", "is_private": false}, {"count": 40, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "(In reply to comment #39)\n> 3 of the 4 latest comments have been hopefully satisfyingly taken care of:\n> http://svn.apache.org/viewvc?rev=800401&view=rev\n\nThis is looking much better now, thanks. There are still a few remaining issues that I'll handle in the next days.", "id": 129434, "time": "2009-08-04T04:16:56Z", "creator": "vhennebert@gmail.com", "creation_time": "2009-08-04T04:16:56Z", "is_private": false}, {"count": 41, "tags": [], "bug_id": 47311, "text": "Created attachment 24599\nFix for /trunk", "id": 132265, "time": "2009-11-23T23:52:14Z", "creator": "borisbsu@gmail.com", "creation_time": "2009-11-23T23:52:14Z", "is_private": false, "attachment_id": 24599}, {"count": 42, "tags": [], "bug_id": 47311, "text": "Created attachment 24600\nFull patch for FOP-0.95 version", "id": 132266, "time": "2009-11-23T23:52:58Z", "creator": "borisbsu@gmail.com", "creation_time": "2009-11-23T23:52:58Z", "is_private": false, "attachment_id": 24600}, {"count": 43, "tags": [], "text": "Hi All,\n\nWe have found one issue during testing this new feature.\nThe issue lies in PageBoundaries.java in calculating crop/bleed boxes.\n\nThe offsets  order is: [top, right, bottom, left], so to calculate Y size of the final box we should use the 'bottom' instead of 'top' offset :\n\n\n         return new Rectangle(originalRect.x - coords[3],\n-                originalRect.y - coords[0],\n+                originalRect.y - coords[2],\n                 originalRect.width + coords[3] + coords[1],\n                 originalRect.height + coords[0] + coords[2]);\n\t\t \n\t\t \n\t\t \nPlease find in the attachments the fix patch. (Comment#41)\nAlso I have attached the full patch for FOP-0.95 version (Comment#42) if somebody will have a need to use this feature with previous version.", "attachment_id": null, "id": 132267, "creator": "borisbsu@gmail.com", "time": "2009-11-23T23:54:24Z", "bug_id": 47311, "creation_time": "2009-11-23T23:54:24Z", "is_private": false}, {"count": 44, "tags": [], "bug_id": 47311, "text": "(In reply to comment #43)\n> Hi All,\n> \n> We have found one issue during testing this new feature.\n> The issue lies in PageBoundaries.java in calculating crop/bleed boxes.\n> \n> The offsets  order is: [top, right, bottom, left], so to calculate Y size of\n> the final box we should use the 'bottom' instead of 'top' offset :\n> \n> \n>          return new Rectangle(originalRect.x - coords[3],\n> -                originalRect.y - coords[0],\n> +                originalRect.y - coords[2],\n>                  originalRect.width + coords[3] + coords[1],\n>                  originalRect.height + coords[0] + coords[2]);\n> \n> \n> \n> Please find in the attachments the fix patch. (Comment#41)\n> Also I have attached the full patch for FOP-0.95 version (Comment#42) if\n> somebody will have a need to use this feature with previous version.\n\nI've taken a look at that. Thanks for spotting the problem, Boris, but your solution was not the right one. But you brought me on the right track. I've just found out what our mistake is: PDF specifies the boxes as \"rectangles\" which are defined as \"llx lly urx ury\" (i.e. lower left to upper right). But our/FOP's Rectangle2D objects are actually \"upper left to lower right\". In PageBoundaries we're still in FOP's coordinate system which starts at the upper left. So we have to calculate the right values for the default PDF coordinate system. Boris' change would have broken a test case and created a bug on the bitmap production side. So the right change is to do a transformation from FOP's internal coordinate system to PDF's default one in PDFDocumentHandler: http://svn.apache.org/viewvc?rev=884241&view=rev\n\nBoris, can you please verify that this fix also work for you? Thanks!", "id": 132331, "time": "2009-11-25T12:01:00Z", "creator": "jeremias@apache.org", "creation_time": "2009-11-25T12:01:00Z", "is_private": false, "attachment_id": null}, {"count": 45, "tags": [], "bug_id": 47311, "attachment_id": null, "text": "increase priority for bugs with a patch", "id": 157884, "time": "2012-04-11T03:22:26Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:22:26Z", "is_private": false}]
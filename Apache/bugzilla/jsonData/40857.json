[{"count": 0, "tags": [], "creator": "flaviostutz@gmail.com", "attachment_id": null, "text": "The following exception is thrown when trying to set, alter or remove a style\nproperty from a <flowPara ../> element.\n\norg.w3c.dom.DOMException: \n\tat\norg.apache.batik.css.dom.CSSOMStyleDeclaration$1.textChanged(CSSOMStyleDeclaration.java:288)\n\tat org.apache.batik.css.dom.CSSOMValue.setCssText(CSSOMValue.java:127)\n\tat br.reunion.widgets.svgeditor.Helper.setStylePropertyValue(Helper.java:121)\n\tat\nbr.reunion.widgets.svgeditor.BasicSVGEditor$2.itemStateChanged(BasicSVGEditor.java:303)\n\tat javax.swing.AbstractButton.fireItemStateChanged(Unknown Source)\n\tat javax.swing.AbstractButton$Handler.itemStateChanged(Unknown Source)\n\t...\n\n\nI tryied two ways to set the css property, but both raise exceptions:\n\nFirst way:\n==========\nCSSStyleDeclaration style = ((SVGStylableElement)svgElement).getStyle();\nString propValue = style.getPropertyCSSValue(\"font-style\").getCssText(); <<\nerror raised here!\n\nSecond way:\n==========\nCSSStyleDeclaration style = ((SVGStylableElement)svgElement).getStyle();\nString propValue = style.getPropertyValue(\"font-weight\"); << error raised here!\n\nThe same problems occurs for\n        style.setPropertyValue(\"font-weight\", \"bold\", \"\");\n        style.removeProperty(\"font-weight\");\n\n\nTested SVG code:\n================\n...  <flowRoot\n     id=\"music-title-root\"\n     xml:space=\"preserve\"><flowRegion\n       id=\"flowRegion1313\"><rect style=\"fill:none\"\n         width=\"775.87134\"\n         height=\"50.044106\"\n         x=\"10\"\n         y=\"10\"\n         id=\"rect1315\" /></flowRegion><flowDiv><flowPara\nstyle=\"font-size:36px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;text-align:middle;line-height:125%;writing-mode:lr-tb;text-anchor:middle;fill:#ffbd00;fill-opacity:1;font-family:Arial\"\n         id=\"music-title\">I See the Lord</flowPara></flowDiv></flowRoot>...\n\n\nThese errors are a bit confusing because they don't occur everytime (but almost\nall the time).\n\n(I am using the lastest version of Batik from SVN)", "id": 95272, "time": "2006-10-31T21:01:53Z", "bug_id": 40857, "creation_time": "2006-10-31T21:01:53Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "flaviostutz@gmail.com", "is_private": false, "count": 1, "id": 95367, "time": "2006-11-02T13:36:44Z", "bug_id": 40857, "creation_time": "2006-11-02T13:36:44Z", "text": "I made the following changes to batik and it is working well for me now:\n(I just put a test in the beginning of the method: \"if(node instanceof TextNode) {\"\n\nPATCH:\n\nIndex: .\n===================================================================\n--- .\t(revision 469041)\n+++ .\t(working copy)\n@@ -585,41 +585,43 @@\n     protected void computeLaidoutText(BridgeContext ctx,\n                                       Element e,\n                                       GraphicsNode node) {\n-        TextNode tn = (TextNode)node;\n-        elemTPI.clear();\n-\n-        AttributedString as = buildAttributedString(ctx, e);\n-        if (as == null) {\n-            tn.setAttributedCharacterIterator(null);\n-            return;\n-        }\n-\n-        addGlyphPositionAttributes(as, e, ctx);\n-        if (ctx.isDynamic()) {\n-            laidoutText = new AttributedString(as.getIterator());\n-        }\n-\n-        // Install the ACI in the text node.\n-        tn.setAttributedCharacterIterator(as.getIterator());\n-\n-        // Now get the real paint into - this needs to\n-        // wait until the text node is laidout so we can get\n-        // objectBoundingBox info.\n-        TextPaintInfo pi = new TextPaintInfo();\n-        setBaseTextPaintInfo(pi, e, node, ctx);\n-        // This get's Overline/underline info.\n-        setDecorationTextPaintInfo(pi, e);\n-        // Install the attributes.\n-        addPaintAttributes(as, e, tn, pi, ctx);\n-\n-        if (usingComplexSVGFont) {\n-            // Force Complex SVG fonts to be recreated, if we have them.\n-            tn.setAttributedCharacterIterator(as.getIterator());\n-        }\n-\n-        if (ctx.isDynamic()) {\n-            checkBBoxChange();\n-        }\n+    \tif(node instanceof TextNode) {\n+\t        TextNode tn = (TextNode)node;\n+\t        elemTPI.clear();\n+\t\n+\t        AttributedString as = buildAttributedString(ctx, e);\n+\t        if (as == null) {\n+\t            tn.setAttributedCharacterIterator(null);\n+\t            return;\n+\t        }\n+\t\n+\t        addGlyphPositionAttributes(as, e, ctx);\n+\t        if (ctx.isDynamic()) {\n+\t            laidoutText = new AttributedString(as.getIterator());\n+\t        }\n+\t\n+\t        // Install the ACI in the text node.\n+\t        tn.setAttributedCharacterIterator(as.getIterator());\n+\t\n+\t        // Now get the real paint into - this needs to\n+\t        // wait until the text node is laidout so we can get\n+\t        // objectBoundingBox info.\n+\t        TextPaintInfo pi = new TextPaintInfo();\n+\t        setBaseTextPaintInfo(pi, e, node, ctx);\n+\t        // This get's Overline/underline info.\n+\t        setDecorationTextPaintInfo(pi, e);\n+\t        // Install the attributes.\n+\t        addPaintAttributes(as, e, tn, pi, ctx);\n+\t\n+\t        if (usingComplexSVGFont) {\n+\t            // Force Complex SVG fonts to be recreated, if we have them.\n+\t            tn.setAttributedCharacterIterator(as.getIterator());\n+\t        }\n+\t\n+\t        if (ctx.isDynamic()) {\n+\t            checkBBoxChange();\n+\t        }\n+    \t}\n     }\n \n     /**\n"}, {"count": 2, "attachment_id": null, "bug_id": 40857, "is_private": false, "id": 95428, "time": "2006-11-04T12:34:10Z", "creator": "deweese@apache.org", "creation_time": "2006-11-04T12:34:10Z", "tags": [], "text": "Your fix really just masked the real problem.  \n\nUpdates probably wouldn't work properly with your fix.  \nI have committed a more complete fix for this problem to \nSVN.  I suggest you pick it up.\n\n   Thanks for reporting the problem."}]
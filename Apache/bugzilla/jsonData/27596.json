[{"count": 0, "tags": [], "creator": "sw@empolis.co.uk", "attachment_id": null, "text": "There doesn't appear to be anyway to verify an existing signed jar file using \nant.\n\nAt the command line I could use:\njarsigner -verfiy -verbose -certs myfile.jar\n\nThis would verify the signed file, and with the additional -certs option would \nalso display details of the certificates used to sign the jar.\n\nI know this could be acheived with exec, but for completeness it would be nice \nif signjar supported these options.", "id": 53854, "time": "2004-03-11T10:25:04Z", "bug_id": 27596, "creation_time": "2004-03-11T10:25:04Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 27596, "is_private": false, "text": "Will be needed as part of library signing policy; will be achieved by\nrefactoring out a base class of <signjar> and then having a separate <verifyjar>\ntask to verify signatures.", "id": 72633, "time": "2005-03-17T18:04:11Z", "creator": "stevel@apache.org", "creation_time": "2005-03-17T18:04:11Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 72751, "time": "2005-03-23T17:49:43Z", "bug_id": 27596, "creation_time": "2005-03-23T17:49:43Z", "is_private": false, "text": "Stuart, how do you propose we actually verify that the jarsigner verification\nworked?"}, {"count": 3, "tags": [], "text": "Having implemented this, I am not going to expose the task. The problem is that\njarsigner -verify is so broken, the presence of a <verifyjar> task would mislead\npeople into thinking it worked.\n\n1. it doesnt return any exit code for failure to verify. You need to parse the\noutput. This is too brittle. \n\n2. it still prints \"jar verified.\" when the certificates used to sign the jar\nare unknown. This is fundamentally insane, from a security perspective. \n\njarsigner -verify is no good for verifying JARs. We add it, and unless the task\nprints \"warning, this is a toy verification, no better than a CRC check\",\nsomeone will download something, run <verifyjar /> over it, trust it and then be\nsurprised when it turns out to be malicious. The ant team would get the blame\nfor propagating a broken app.\n\nI'm changing the title of the bugrep to show the underlying problem, not the\nsolution that doesnt work. \n\nJava1.5 does appear to expose enough of the certification chain (with the\nCertificates class) to maybe make this an optional feature in future. This is\nthe sole reason I am leaving this bug open. Using jarsigner -verify is not the\nsolution, nor, probably , is loading it in a secure classloader, for reasons I\nwont explain here, but which are equally tragic. \n\n", "attachment_id": null, "id": 72810, "creator": "stevel@apache.org", "time": "2005-03-24T23:47:34Z", "bug_id": 27596, "creation_time": "2005-03-24T23:47:34Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 27596, "attachment_id": null, "id": 127122, "time": "2009-05-18T10:11:53Z", "creator": "ebourg@apache.org", "creation_time": "2009-05-18T10:11:53Z", "is_private": false, "text": "It may be worth documenting somewhere that the verifyjar task is actually implemented and available since Ant 1.7. It works fine to verify a set of jar files, otherwise jarsigner has to be called through the <exec> task for every jar to check:\n\n<exec executable=\"jarsigner\" dir=\"dist/lib\" failonerror=\"true\">\n  <arg value=\"-verify\"/>\n  <arg value=\"foo.jar\"/>\n</exec>\n<exec executable=\"jarsigner\" dir=\"dist/lib\" failonerror=\"true\">\n  <arg value=\"-verify\"/>\n  <arg value=\"bar.jar\"/>\n</exec>\n\n\nWhat is missing from the task to make it official?"}, {"count": 5, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 127144, "time": "2009-05-19T02:33:32Z", "bug_id": 27596, "creation_time": "2009-05-19T02:33:32Z", "is_private": false, "text": "Emmanuel, read the comment above. Jarsigner -verify does not verify that the JAR is signed by anyone you trust. That it does not look at your list of valid certifications and say \"are the artifacts in the JAR signed by a trusted entity\". All it does is check that there is a signature.\n\nAs I said before \"verify is so broken, the presence of a <verifyjar> task would mislead people into thinking it worked.\"\n\nThat is why <verifyjar> isn't written up. People might use it and think that it is checking that JARs are valid. It isnt -and neither is jarsigner."}, {"count": 6, "text": "I understand it's not perfect, the task is 'as bad' as the jarsigner tool, but it's still useful. For example when you sign and pack your own jar files (with pack200), running 'jarsigner -verify' is a must to ensure that the repack+sign+pack process was done properly.\n\nI use <verifyjar> to check the jars produced by my build and signed with my certificate. The fact that the validity of the certificate is not checked is irrelevant in this case. It doesn't tell if the jar can be trusted, it tells if the jar is corrupted and will break when loaded by the Java Plugin.", "creator": "ebourg@apache.org", "is_private": false, "id": 127146, "time": "2009-05-19T04:01:00Z", "bug_id": 27596, "creation_time": "2009-05-19T04:01:00Z", "tags": [], "attachment_id": null}]
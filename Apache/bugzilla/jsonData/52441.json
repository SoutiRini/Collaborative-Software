[{"count": 0, "tags": [], "bug_id": 52441, "attachment_id": 28127, "id": 152636, "time": "2012-01-09T16:30:23Z", "creator": "thiagobart@gmail.com", "creation_time": "2012-01-09T16:30:23Z", "is_private": false, "text": "Created attachment 28127\nNew method to InstructionTargeter for target cleanup.\n\nIt seems that InstructionTargeters are not being properly cleaned up when they are not used anymore. That is, when a targeter is replaced or removed (e.g., a LocalVariableGen is removed from a method), the targeter remains in the targeters list of its targets.\n\nFor example, MethodGen's constructor which receives a Method uses its other constructor to initialize the object:\n\npublic MethodGen(Method m, String class_name, ConstantPoolGen cp) {\n   this(\n       m.getAccessFlags(), \n       Type.getReturnType(m.getSignature()),\n       Type.getArgumentTypes(m.getSignature()),\n       null /* may be overridden anyway */,\n       m.getName(), \n       class_name,\n       ((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0) ? new InstructionList(m.getCode().getCode()) : null, cp);\n...\n}\n\nBecause this call passes null as its 4th argument, the constructor will create placeholder LocalVariableGen for the arguments (like arg0, arg1, etc). Later in this constructor the arguments will be overridden (as indicated by the comment). However, the LocalVariableGens of the placeholder arguments (as well as the LocalVariableGen for the \"this\" variable) will remain in the targeter lists of the first and last instructions of the instruction list.\n\nTo avoid this problem I am submitting a patch in attachment. It adds a new method to InstructionTargeter:\n\n    /**\n     * Removes all targets of this targeter.\n     */\n    void removeTargets();\n\nand implements it to remove the targeter from the target's lists. The patch also calls removeTargets() when discarding targeters in MethodGen."}]
[{"count": 0, "tags": [], "bug_id": 37929, "attachment_id": null, "is_private": false, "id": 83718, "time": "2005-12-16T01:58:15Z", "creator": "pierre.delisle@sun.com", "creation_time": "2005-12-16T01:58:15Z", "text": "javax.servlet.http.HttpSession methods such as getAttribute(),\ngetValue(), getAttributeNames(), getValueNames(), etc, throw an\nIllegalStateException if called on a session that has been\ninvalidated.\n\nSo, with the following code in a JSP page:\n\n    <% \n       session.invalidate(); \n       Object obj = pageContext.findAttribute(\"foo\");\n    %>\n\nAn IllegalStateException is thrown because pageContext.findAttribute()\neventually calls session.getAttribute() on a session that has been\ninvalidated.\n\nThe session that has been invalidated should simply be ignored when a\nmethod needs to process the various scopes (page, request, session,\napplication).\n\nThis impacts the following methods in PageContextImpl:\n\n   public int getAttributesScope(final String name)\n      which calls -> private int doGetAttributeScope(String name);\n   public Object findAttribute(final String name)\n      which calls -> private Object doFindAttribute(String name);\n   public void removeAttribute(final String name)\n      which calls -> private void doRemoveAttribute(String name);\n\nThe fix is to catch IllegalStateException and ignore it when processing\nthe attribute in session scope. The code then simply follows through to \nprocess application scope.\n\nNo need to worry about setAttribute() because it is always invoked\non a specific scope, and the spec already states\nthat java.lang.IllegalStateException must be thrown when called \non an invalidated session.\n\n  pageContext.setAttribute(\"foo\", \"value of foo\", PageContext.SESSION_SCOPE);\n\n  java.lang.IllegalStateException - if the scope is PageContext.SESSION_SCOPE \n  but the page that was requested does not participate in a session or \n  the session has been invalidated.\n\n---------------------------------------------------------------------------\n\nAt the same time, a fix should be done to method \"doRemoveAttribute(String\nname)\" where a try/catch block for Exception appears unnecessary.\n\n    private void doRemoveAttribute(String name){\n        try {\n            removeAttribute(name, PAGE_SCOPE);\n            removeAttribute(name, REQUEST_SCOPE);\n            if( session != null ) {\n                try {\n                    removeAttribute(name, SESSION_SCOPE);\n                } catch (IllegalStateException ex) {\n                    // Session has been invalidated.\n                    // Ignore and fall through to application scope.\n                }\n            }\n            removeAttribute(name, APPLICATION_SCOPE);\n        } catch (Exception ex) {\n            // we remove as much as we can, and\n            // simply ignore possible exceptions\n        }\n    }\n\nHere is a full analysis:\n\nStarting with 'removeAttribute(final String name)'\n  - we check for null and throw NPE if necessary\n\n  - we call doRemoveAttribute(name)\n  \ndoRemoveAttribute(name)\n  - we call removeAttribute(name, scope) for each scope\n\nremoveAttribute(final String name, final int scope)\n  - this calls doRemoveAttribute(name, scope)\n\ndoRemoveAttribute(name, scope)\n  - page scope: attributes.remove -> won't throw an Exception\n  - request scope: request.removeAttribute -> no documented Exception thrown\n  - session scope: throws IllegalStateException if session is null\n  - app scope: context.removeAttribute -> no documented Exception thrown\n\nA null value for name is already checked in removeAttribute(final String name)\nand we throw NPE. So this situation (removing an attr from page or request\nscope throwing an NPE) won't happen.\n\nIn doRemoveAttribute(name), we already check on session != null\nbefore calling removeAttribute(name, SESSION_SCOPE). So there\nnormally is no IllegalStateException thrown (except for the invalidated\ncase).\n\nWhen removing an attribute from application (i.e., ServletContext)\nscope, any registered listeners will be notified, but the code that\ndoes that (see\nappserv-webtier/src/java/org/apache/catalina/core/ApplicationContext.\nremoveAttribute()) already catches any Throwable that a listener\nmay throw.\n\nThe try/catch block is therefore unnecessary.\nMoreover, if any of the removal actions from the different scopes could\nhave thrown an exception, each of them would have needed to be wrapped\ninside their own try/catch, so as to ensure that an exception in one\nscope does not cause any of the subsequent removals to be bypassed.\n\ndoRemoveAttribute(String name) has therefore been modified as follows:\n\n    private void doRemoveAttribute(String name){\n            removeAttribute(name, PAGE_SCOPE);\n            removeAttribute(name, REQUEST_SCOPE);\n            if( session != null ) {\n                try {\n                    removeAttribute(name, SESSION_SCOPE);\n                } catch (IllegalStateException ex) {\n                    // Session has been invalidated.\n                    // Ignore and fall through to application scope.\n                }\n            }\n            removeAttribute(name, APPLICATION_SCOPE);\n    }\n\n--------------------------\nChanges done on glassfish. ymmv on jasper for the diffs.\n\n--- PageContextImpl.java\t9 Dec 2005 18:54:30 -0000\t1.7\n+++ PageContextImpl.java\t16 Dec 2005 00:11:21 -0000\t1.8\n@@ -452,8 +452,13 @@\n             return REQUEST_SCOPE;\n \n         if (session != null) {\n+            try {\n             if (session.getAttribute(name) != null)\n                 return SESSION_SCOPE;\n+            } catch (IllegalStateException ex) {\n+ \t        // Session has been invalidated.\n+                // Ignore and fall through to application scope.\n+            }\n         }\n \n         if (context.getAttribute(name) != null)\n@@ -495,9 +500,14 @@\n             return o;\n \n         if (session != null) {\n+\t    try {\n             o = session.getAttribute(name);\n-            if (o != null)\n-                return o;\n+ \t    } catch (IllegalStateException ex) {\n+ \t        // Session has been invalidated.\n+                // Ignore and fall through to application scope.\n+ \t    }\n+\n+ \t    if (o != null) return o;\n         }\n \n         return context.getAttribute(name);\n@@ -559,19 +569,18 @@\n         }\n     }\n \n-\n     private void doRemoveAttribute(String name){\n-        try {\n             removeAttribute(name, PAGE_SCOPE);\n             removeAttribute(name, REQUEST_SCOPE);\n             if( session != null ) {\n+            try {\n                 removeAttribute(name, SESSION_SCOPE);\n+            } catch (IllegalStateException ex) {\n+                // Session has been invalidated.\n+                // Ignore and fall through to application scope.\n             }\n-            removeAttribute(name, APPLICATION_SCOPE);\n-        } catch (Exception ex) {\n-            // we remove as much as we can, and\n-            // simply ignore possible exceptions\n         }\n+        removeAttribute(name, APPLICATION_SCOPE);\n     }\n \n     public JspWriter getOut() {"}, {"count": 1, "tags": [], "bug_id": 37929, "attachment_id": null, "id": 83720, "time": "2005-12-16T02:00:01Z", "creator": "pierre.delisle@sun.com", "creation_time": "2005-12-16T02:00:01Z", "is_private": false, "text": "*** Bug 37699 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "bug_id": 37929, "attachment_id": null, "id": 83727, "time": "2005-12-16T06:57:38Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-12-16T06:57:38Z", "is_private": false, "text": "In the future, please attach patches from GlassFish rather than inlining \nthem.  As it is, I can't do anything about this since I've already seen the \npatch, so I'm tainted from an IP persective.\n\nBefore this patch can be accepted, we need to know that your submission is \ncovered by a CCLA.  Otherwise, Sun owns the code, so it can't be incorporated \ninto Tomcat."}, {"count": 3, "attachment_id": null, "bug_id": 37929, "is_private": false, "id": 83731, "time": "2005-12-16T07:32:35Z", "creator": "pierre.delisle@sun.com", "creation_time": "2005-12-16T07:32:35Z", "tags": [], "text": "Hi William,\n\nThanks for looking into this so quickly.\n\nThe situation is the same as the one you encountered\nwith Kin-Man on bug 35351:\n\n>> Just to be clear, is this patch is still covered by your CCLA?  In English, is \n>> this a grant from glassfish to that ASF?\n>> \n\n> This is just a patch, and there is no license or copyright, so YES.\n\nLet me know if you need anything else.\n\n"}, {"count": 4, "tags": [], "text": "(In reply to comment #3)\n> Hi William,\n> Thanks for looking into this so quickly.\n> The situation is the same as the one you encountered\n> with Kin-Man on bug 35351:\n> >> Just to be clear, is this patch is still covered by your CCLA?  In \nEnglish, is \n> >> this a grant from glassfish to that ASF?\n> >> \n> > This is just a patch, and there is no license or copyright, so YES.\n> Let me know if you need anything else.\n\nI accepted Kin-Man's patch based on the fact that he is a Tomcat committer, \nand as such should have a CCLA on file with the ASF.  If that is still valid, \nthan that means that Sun has trusted him with deciding about donating Sun code \nto the ASF.  Were I to find out that Kin-Man's CCLA has been revoked, I would \nrevert the commit in a heart-beat :).\n\nIANAL, but from all of the ASF lists that I have followed, the above reasoning \ndoesn't even hold a drop of water.  So again I ask if you have a CCLA on file \nso that the ASF can accept your donation of Sun's code?  \n\nThe patch is nice, so I'm hoping that you say yes ;-).\n\n\n", "is_private": false, "id": 83738, "creator": "william.barker@wilshire.com", "time": "2005-12-16T09:34:32Z", "bug_id": 37929, "creation_time": "2005-12-16T09:34:32Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "With very minor style changes, your patch has been committed to SVN trunk, and \nwill appear in 5.5.15.\n\nThanks much!", "attachment_id": null, "bug_id": 37929, "id": 83764, "time": "2005-12-18T02:09:16Z", "creator": "william.barker@wilshire.com", "creation_time": "2005-12-18T02:09:16Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 37929, "attachment_id": null, "id": 126235, "time": "2009-04-14T13:44:15Z", "creator": "pavel.sher@gmail.com", "creation_time": "2009-04-14T13:44:15Z", "is_private": false, "text": "It seems the problem still exists in the Tomcat 6.0.18. Moreover, I took a look at the PageContextImpl.java class and I do not see there any fixes related to this bug. I browsed svn repository and it looks like this commit has reverted the fix:\n\nhttp://svn.apache.org/viewvc/tomcat/jasper/tc6.0.x/src/share/org/apache/jasper/runtime/PageContextImpl.java?view=log\n\nIs it supposed to be so? Or fix was reverted by mistake?"}, {"count": 7, "attachment_id": null, "bug_id": 37929, "is_private": false, "id": 126242, "time": "2009-04-14T16:24:42Z", "creator": "markt@apache.org", "creation_time": "2009-04-14T16:24:42Z", "tags": [], "text": "Moving to Tomcat 6"}, {"count": 8, "tags": [], "bug_id": 37929, "attachment_id": null, "is_private": false, "id": 126290, "time": "2009-04-16T08:22:44Z", "creator": "markt@apache.org", "creation_time": "2009-04-16T08:22:44Z", "text": "Thanks for the report and the research. This has been fixed in trunk and proposed for 6.0.x"}, {"count": 9, "tags": [], "text": "This has been fixed in 6.0.x and will be included in 6.0.20 onwards.", "is_private": false, "id": 126591, "creator": "markt@apache.org", "time": "2009-04-28T06:45:54Z", "bug_id": 37929, "creation_time": "2009-04-28T06:45:54Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 49713, "attachment_id": 25853, "text": "Created attachment 25853\nPerl script that functions as a simple backend\n\nOverview: Running Apache 2.2.16 on RHEL 5.5 as a reverse proxy.  When KeepAlives is on, MaxKeepAliveRequests are 0 and MaxRequestsPerChild is 0, the memory footprint of the httpd client processes grow without bound.\n\nSteps to Reproduce:\n1. Create a simple backend server that just kicks back a 200 OK for all requests.\n\n2. Change httpd.conf to have:\n   KeepAlive On\n   MaxKeepAliveRequests 0\n   <IfModule prefork.c>\n   StartServers       1\n   MinSpareServers    1\n   MaxSpareServers   1\n   MaxClients       1\n   MaxRequestsPerChild  0\n   </IfModule>\n   <IfModule mod_proxy.c>\n   ProxyRequests Off\n\n   <Proxy *>\n      Order deny,allow\n      Allow from all\n   </Proxy>\n   ProxyPass       /foo http://<ip of backend server>\n\nStart up the server.\n\n3. Flood the proxy server with requests.  I did this with \n   while :; do; wget -i urls.txt -q -O /dev/null; done\n   \nWhere urls.txt was 1000000 lines of http://localhost/foo.  Run this loop on the proxy server.\n\nActual Results: \nTop will show that the vsize and RSS for the 1 httpd process will grow without bound until the machine runs out of memory.\n\nExpected Results: \n\nI would expect the memory footprint to remain consistent.\n\nBuild Date & Platform: \n\nApache 2.2.16 on RHEL 5.5.\n\nAdditional Builds and Platforms: \n\nAlso seen on Apache 2.2.3 on RHEL 4.8.\n\nAdditional Information: \n\nA core dump of the httpd process during the run shows that the memory is being taken up by the repetitive storage of the URI of the backend server over and over.  After 15 minutes of running, I noted 700,000 strings equal to the ip address and 2.1 million after 30 minutes.  I will attach the core dump gathered.  For the backend server, I used the attached perl script to function as a very simple server.", "id": 138935, "time": "2010-08-05T18:17:56Z", "creator": "adam@m154.homelinux.com", "creation_time": "2010-08-05T18:17:56Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 49713, "is_private": false, "text": "Created attachment 25854\nCore dump\n\nCore dump of the httpd process after running for 2.5 hours.  \"strings core.6780 |sort |uniq -c |sort -n\" shows 9.4 million occurances of 192.168.1.171 (which was the ip of my backend server).", "id": 138936, "time": "2010-08-05T18:25:19Z", "creator": "adam@m154.homelinux.com", "creation_time": "2010-08-05T18:25:19Z", "attachment_id": 25854}, {"count": 2, "attachment_id": null, "creator": "adam@m154.homelinux.com", "is_private": false, "id": 138937, "time": "2010-08-05T18:28:57Z", "bug_id": 49713, "creation_time": "2010-08-05T18:28:57Z", "tags": [], "text": "BTW, I do realize that this wouldn't occur if MaxKeepAliveRequests was set to non-zero.  This issue would still occur, but it would not be as evident."}, {"count": 3, "tags": [], "bug_id": 49713, "attachment_id": null, "id": 138954, "time": "2010-08-06T14:05:29Z", "creator": "poirier@pobox.com", "creation_time": "2010-08-06T14:05:29Z", "is_private": false, "text": "(In reply to comment #2)\n> BTW, I do realize that this wouldn't occur if MaxKeepAliveRequests was set to\n> non-zero.  This issue would still occur, but it would not be as evident.\n\nHave you confirmed this?"}, {"count": 4, "attachment_id": null, "creator": "adam@m154.homelinux.com", "is_private": false, "id": 138955, "time": "2010-08-06T14:41:14Z", "bug_id": 49713, "creation_time": "2010-08-06T14:41:14Z", "tags": [], "text": "I just now set MaxKeepAliveRequests to 1000000 and I see the same growth in the process memory footprint.  The difference, of course, is that once it hits 1000000 requests, a new process is started and the memory is thrown away.\n\nAfter 9 minutes of runtime, the string containing the ip address of my backend server appeared in a gcore 390,000."}, {"count": 5, "tags": [], "bug_id": 49713, "attachment_id": null, "is_private": false, "id": 138957, "time": "2010-08-06T15:00:39Z", "creator": "adam@m154.homelinux.com", "creation_time": "2010-08-06T15:00:39Z", "text": "My apologies, I should have said MaxRequestsPerChild would work around the problem, not MaxKeepAliveRequests."}, {"count": 6, "tags": [], "text": "If you set MaxKeepaliveRequests small, do you still see the problem?", "is_private": false, "id": 138959, "creator": "poirier@pobox.com", "time": "2010-08-06T15:19:05Z", "bug_id": 49713, "creation_time": "2010-08-06T15:19:05Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "I set MaxKeepAliveRequests to 1 and I still see the problem.  No apparent impact.", "attachment_id": null, "id": 138962, "creator": "adam@m154.homelinux.com", "time": "2010-08-06T16:12:11Z", "bug_id": 49713, "creation_time": "2010-08-06T16:12:11Z", "is_private": false}, {"count": 8, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 138994, "time": "2010-08-09T09:49:48Z", "bug_id": 49713, "creation_time": "2010-08-09T09:49:48Z", "is_private": false, "text": "Can please try the following patch to APR (r983618) and retest?\nhttp://svn.apache.org/viewvc/apr/apr/trunk/network_io/unix/sockets.c?r1=983618&r2=983617&pathrev=983618&view=patch"}, {"count": 9, "attachment_id": null, "creator": "adam@m154.homelinux.com", "is_private": false, "id": 138997, "time": "2010-08-09T11:30:51Z", "bug_id": 49713, "creation_time": "2010-08-09T11:30:51Z", "tags": [], "text": "With that patch applied the problem does appear to be resolved.  Thanks!"}, {"count": 10, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 140324, "time": "2010-09-30T07:23:57Z", "bug_id": 49713, "creation_time": "2010-09-30T07:23:57Z", "is_private": false, "text": "As above, fix was committed in r983618 and Ruediger has kindly backported it everywhere too (thanks!)."}]
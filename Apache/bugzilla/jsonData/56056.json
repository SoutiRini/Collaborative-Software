[{"count": 0, "tags": [], "text": "When a new WAR file is copied to the 'webapps' in redepoyment mode (unpackWar=true), tomcat is unable to complete redeployment in many case, where the NFS unpacked applications can not be completed.\n\nThe reason for the partial delete is that NFS file delete will sometimes rename the removed file to \".nfsNNNNN\". This is usually result of some process the file open (can be a thread in the application, leaked resources, or a user on any machine that can view/inspect files/folders in the unpack tree.\n\nWhile it is bad for any application to have leaked open connections to resources in the WAR, it is impossible to identify and fix all resource leakages in third part libraries, etc.\n\nIf any file is still open in the unpacked WAR, the directory where the file use to exists can not be removed. If tomcat can not removed the top level directory of the old app, it will not redeploy the new WAR. leaving the server without any running instance of the application.\n\nThe requested fix is to add an option (either with passing '-d' to catalina.sh, or new option in the container XML (similar to antiJARLocking). The new feature (possible name: 'redeployNFS' ?), will use the following logic for redeployt:\n\nTry to remove the unpacked WAR\nIf the removal was not completed, sleep 3 seconds, then try again (NFS removal are not always instant, because some NFS data may be cached on the client).\nIf the removal is still incomplete, rename the unpacked war (e.g., nfs-WAR.YYYY-MM-DDTHH:MM:SS) folder\nIf the rename works, continue with redeploy. Otherwise stop.", "is_private": false, "bug_id": 56056, "id": 172634, "time": "2014-01-23T15:16:04Z", "creator": "yair.lenga@citi.com", "creation_time": "2014-01-23T15:16:04Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 56056, "is_private": false, "id": 172640, "time": "2014-01-23T19:08:42Z", "creator": "markt@apache.org", "creation_time": "2014-01-23T19:08:42Z", "tags": [], "text": "There is no need for yet another deployment option to work around this issue. You can use parallel deployment to work-around it.\n\nNote with Tomcat 8 you can track open files and Tomcat will forcibly close them on web application shutdown (assuming the app goes via the Servlet API rather than directly to the file system)."}, {"count": 2, "tags": [], "text": "Mark,\n\nThank for your feedback. I do not believe that the suggested alternatives address the problem with NFS removals. The issue is not a tomcat problem problem, it is just the way Nfs works. The temporary .nfs files may be a result of bad third party code, background file scanning jobs, or just a user that does a 'chdir' and forgot to leave. Triggering the problem does not even require read write access to tomcat.\n\nWhile tomcat is not the source of the problem, it can help solve the it. I will appreciate if you will take a second look. Solving this problem will provide significant improvement to many deployment situation. I will be happy to help with additional information.\n\nYair", "attachment_id": null, "id": 172655, "creation_time": "2014-01-24T01:01:10Z", "time": "2014-01-24T01:01:10Z", "creator": "yair.lenga@citi.com", "bug_id": 56056, "is_private": false}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "(In reply to Yair Lenga from comment #0)\n> This is usually result of some\n> process the file open (can be a thread in the application, leaked resources,\n> or a user on any machine that can view/inspect files/folders in the unpack\n> tree.\n>\n\nIn all the above cases waiting for 3 seconds (or for any reasonable longer time) is futile, as that would not be enough for an user to close the file\nor for a resource leak to disappear.\n\n> sleep 3 seconds, then try again\n\nIt is not that simple. A retry must be performed at the top-most possible level, at caller's discretion and consent. Automatic retries are evil when they sum up.", "id": 172657, "time": "2014-01-24T01:09:27Z", "bug_id": 56056, "creation_time": "2014-01-24T01:09:27Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 172659, "time": "2014-01-24T07:31:43Z", "bug_id": 56056, "creation_time": "2014-01-24T07:31:43Z", "text": "I'll happily re-open this if you explain how parallel deployment doesn't solve this problem. If you use parallel deployment:\n- you can deploy a new version before deleting the old one\n- new users will be directed to the new version\n- current users will be directed to the old version until you undeploy it after which they will be directed to the new one\n- if deleting the old one fails users continue to be directed to the new one\n- you can repeat the attempt to undeploy the old one as many times as you like and whenever you like\n- the old version will remain listed (in a failed state) in the Manager app so any tools that work via the Manager app will continue to be able to see it and attempt to delete it"}, {"count": 5, "tags": [], "text": "Many thanks for considering the issue further.\n\nI need few days to reconfigure the system back into the NFS deployment, and replicate the buggy situation. This time I will make sure to capture the sequence of events and the exact messages from the varius log files. I will also try the parallel deployment option.", "attachment_id": null, "bug_id": 56056, "id": 172685, "time": "2014-01-24T19:50:19Z", "creator": "yair.lenga@citi.com", "creation_time": "2014-01-24T19:50:19Z", "is_private": false}]
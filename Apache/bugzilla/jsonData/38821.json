[{"count": 0, "tags": [], "bug_id": 38821, "attachment_id": null, "id": 86344, "time": "2006-03-01T17:54:01Z", "creator": "werner.donne@re.be", "creation_time": "2006-03-01T17:54:01Z", "is_private": false, "text": "The manifest file no longer has a Class-Path entry. Why is this? Now it is no\nlonger possible to run FOP with \"java -jar fop.jar\" or to launch another\napplication this way that refers to fop.jar in its manifest file.\n\nVersion 0.20.5 did have such an entry, but the error there was that fop.jar\nresided in the \"build\" directory, while the other JARs were in the \"lib\"\ndirectory. The fop.jar manfest file, however, expected to be a sibling of the\nothers."}, {"count": 1, "attachment_id": null, "creator": "jeremias@apache.org", "text": "Right, the Class-Path entry has been removed. The Main-Class entry is still\nthere. As compensation for removing the very static Class-Path entry the main\nclass has been extended to dynamically build the right classpath for FOP taking\nall JAR files in the lib directory into account not only the ones in the\nClass-Path list. So, this is not a bug, but a feature. :-)\n\nDid you actually try running \"java -jar fop.jar\"? It works fine for me. If it\ndoesn't for you, please reopen the issue and tell me what the problems are so I\ncan have a look.", "id": 86345, "time": "2006-03-01T18:18:17Z", "bug_id": 38821, "creation_time": "2006-03-01T18:18:17Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 38821, "text": "If you into the build directory it works, but from anywhere else it doesn't:\n\njava -jar file:/var/local/fop-0.91beta/build/fop.jar\n\nin my home directory gives:\n\nUnable to start FOP:\njava.lang.RuntimeException: fop.jar not found in directory: /home/werner (or\nbelow)\n        at org.apache.fop.cli.Main.getJARList(Main.java:58)\n        at org.apache.fop.cli.Main.startFOPWithDynamicClasspath(Main.java:118)\n        at org.apache.fop.cli.Main.main(Main.java:202)\n\nThe second problem is that another tool can't refer to fop.jar by putting it in\nthe Class-Path entry of its manifest file. It doesn't matter if you are in the\nbuild directory or not.\n\nIn my opinion the regular extension mechanism should be used. There is nothing\nstatic about it. This is a build matter where you keep the manifest file\nup-to-date when you produce a consistent distribution.", "id": 86347, "time": "2006-03-01T18:31:47Z", "creator": "werner.donne@re.be", "creation_time": "2006-03-01T18:31:47Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "the.webmaestro@gmail.com", "attachment_id": null, "text": "That looks like a malformed URL to me. Have you tried it this way?\n\njava -jar file:///var/local/fop-0.91beta/build/fop.jar", "id": 86348, "time": "2006-03-01T18:35:49Z", "bug_id": 38821, "creation_time": "2006-03-01T18:35:49Z", "is_private": false}, {"count": 4, "tags": [], "creator": "werner.donne@re.be", "attachment_id": null, "text": "The -jar option expects a file not a URL.", "id": 86349, "time": "2006-03-01T18:45:05Z", "bug_id": 38821, "creation_time": "2006-03-01T18:45:05Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 38821, "text": "(In reply to comment #2)\n> If you into the build directory it works, but from anywhere else it doesn't:\n> \n> java -jar file:/var/local/fop-0.91beta/build/fop.jar\n> \n> in my home directory gives:\n> \n> Unable to start FOP:\n> java.lang.RuntimeException: fop.jar not found in directory: /home/werner (or\n> below)\n>         at org.apache.fop.cli.Main.getJARList(Main.java:58)\n>         at org.apache.fop.cli.Main.startFOPWithDynamicClasspath(Main.java:118)\n>         at org.apache.fop.cli.Main.main(Main.java:202)\n\nOk, I see the problem. Turns out there really is a downside to my approach. I\nhave no way of retrieving the location of fop.jar without resorting to accessing\nSun-specific classes (sun.misc.Launcher). Too bad however, that the \"Class-Path\"\napproach is also flawed. That's why I actually implemented the dynamic class\npath approach.\n\n> The second problem is that another tool can't refer to fop.jar by putting it in\n> the Class-Path entry of its manifest file. It doesn't matter if you are in the\n> build directory or not.\n\nJust curious: What's the use case here?\n\n> In my opinion the regular extension mechanism should be used. There is nothing\n> static about it. This is a build matter where you keep the manifest file\n> up-to-date when you produce a consistent distribution.\n\nYou mean I should revert the change? I guess there's no harm if I simply add the\nClass-Path entry again. The dynamic approach is only triggered if either Batik\nor Avalon-Framework is not found in the class path.\n\nAny other opinions, fop-devs?", "id": 86353, "time": "2006-03-01T20:13:24Z", "creator": "jeremias@apache.org", "creation_time": "2006-03-01T20:13:24Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "werner.donne@re.be", "attachment_id": null, "text": "> > The second problem is that another tool can't refer to fop.jar by putting it in\n> > the Class-Path entry of its manifest file. It doesn't matter if you are in the\n> > build directory or not.\n\n> Just curious: What's the use case here?\n\nThis is part of the extension mechanism. One JAR can declare the classpath it\nneeds, without needing a global classpath. If you have several JARS with their\nown dependencies on a classpath, the builder of the global classpath would\nrequire all that knowledge and the global classpath might have conflicts for\nseveral of the classpaths.\n\nSometimes it is not even possible to rely on a global classpath, in an EAR file\nfor example.\n\nSecurity is another use case. Think of the sandbox.\n\nMy personal use case is CSSToXSLFO (http://www.re.be/css2xslfo), which has a\npackage variant for FOP.", "id": 86354, "time": "2006-03-01T20:23:16Z", "bug_id": 38821, "creation_time": "2006-03-01T20:23:16Z", "is_private": false}, {"count": 7, "tags": [], "text": "Werner, would you please check if my change works for you now?\nhttp://svn.apache.org/viewcvs?rev=382152&view=rev", "attachment_id": null, "id": 86356, "creator": "jeremias@apache.org", "time": "2006-03-01T21:50:21Z", "bug_id": 38821, "creation_time": "2006-03-01T21:50:21Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 38821, "text": "Created attachment 17817\nAnt 1.6.2 output", "id": 86389, "time": "2006-03-02T11:13:26Z", "creator": "werner.donne@re.be", "creation_time": "2006-03-02T11:13:26Z", "is_private": false, "attachment_id": 17817}, {"count": 9, "tags": [], "bug_id": 38821, "text": "(In reply to comment #8)\n> Created an attachment (id=17817) [edit]\n> Ant 1.6.2 output\n> \n\nYes, and now? The output simply shows that you didn't put the OFFO Hyphenation\nPattern JAR in the lib directory and that's why it can't run the hyphenation\ntests. The build is fine otherwise. If you just want to build FOP but skip the\ntests you can run \"ant package\".", "id": 86394, "time": "2006-03-02T13:25:03Z", "creator": "jeremias@apache.org", "creation_time": "2006-03-02T13:25:03Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 38821, "text": "That works, but now we have the same problem as with version 0.20.5. The\nmanifest file refers to the libraries as if fop.jar is a sibling of them. So the\noutcome of the build is not consistent. Either fop.jar is also copied to the lib\ndirectory, or the manifest file of fop.jar puts \"../lib\" in the paths of the\nlibraries.", "id": 86398, "time": "2006-03-02T14:09:04Z", "creator": "werner.donne@re.be", "creation_time": "2006-03-02T14:09:04Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 38821, "text": "That's exactly why I don't like the Class-Path entry. You have to specify a\ndefinitive location for the JARs. When you deploy an application you normally\ndon't care about the setup in the development environment. You simply pack the\nnecessary JARs together. That's why I'm strongly for leaving the Class-Path\nentry like it is right now and that you copy fop.jar over into the lib\ndirectory. Otherwise next time, someone else comes and says: Why do I have to\nplace fop.jar in a different location that the other JARs? The alternative you\nhave is to create a simple Ant script that will patch fop.jar's manifest exactly\nthe way you want it.", "id": 86399, "time": "2006-03-02T14:27:52Z", "creator": "jeremias@apache.org", "creation_time": "2006-03-02T14:27:52Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "werner.donne@re.be", "is_private": false, "id": 86401, "creation_time": "2006-03-02T14:41:58Z", "time": "2006-03-02T14:41:58Z", "bug_id": 38821, "text": "You are right. This is the best solution. Thank you very much for your efforts.", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 38821, "attachment_id": null, "id": 145118, "time": "2011-03-21T06:17:25Z", "creator": "yannick.majoros@gmail.com", "creation_time": "2011-03-21T06:17:25Z", "is_private": false, "text": "The classpath entry gives a long list of stacktraces in Glassfish 3.1... and I think Glassfish is right. The classpath entry doesn't reflect the dependencies documented at http://www.linuxfromscratch.org/blfs/view/svn/pst/fop.html . It is trying to load things which aren't really required (xml-apis.jar, xerces, ...) and would cause problems here. Glassfish complains that those resources are missing (which is right).\n\nI think the best thing to do is to remove the classpath entry (at least everything that isn't required). Yes, running fop.jar should imply passing the correct classpath. You can do that with environment variables or better, batch / shell script files if you want."}, {"count": 14, "tags": [], "text": "batch transition resolved+wontfix to closed+wontfix", "is_private": false, "id": 158560, "creator": "gadams@apache.org", "time": "2012-04-30T00:14:41Z", "bug_id": 38821, "creation_time": "2012-04-30T00:14:41Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "gadams@apache.org", "is_private": false, "text": "batch transition resolved+wontfix to closed+wontfix; if you believe this remains a bug and can demonstrate it with appropriate input FO file and output PDF file (as applicable), then you may reopen", "id": 158605, "time": "2012-04-30T00:17:13Z", "bug_id": 38821, "creation_time": "2012-04-30T00:17:13Z", "attachment_id": null}]
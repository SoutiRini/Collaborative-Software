[{"count": 0, "tags": [], "creator": "malquitob@gmail.com", "attachment_id": 28636, "text": "Created attachment 28636\nSpreadsheet for use with the test case.\n\nOverview:\n\nSumming a range of cells greater the 255 gives an incorrect result.\n\nSteps to reproduce:\n\nCreate an .xlsx, fill a range of columns, eg B1:IZ1 with a value, say \"1\"\nInsert a formula to sum these cells, ie SUM(B1:IZ1)\nUsing POI, read the spreadsheet and evaluate the formula.\n\nExpected result: 259.0, actual result: 258.0\n\nExample test case:\n\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.apache.poi.ss.usermodel.FormulaEvaluator;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class PoiTest {\n\n  @Test\n  public void evaluateExcelUsingPoiApiOnly_expectCorrectEvaluation() {\n    // Arrange\n    InputStream inputStream = this.getClass().getResourceAsStream(\"/test.xlsx\");\n    Workbook workbook = null;\n    try {\n      workbook = WorkbookFactory.create(inputStream);\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (InvalidFormatException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        inputStream.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n\n    // Act\n    // evaluate SUM('Skye Lookup Input'!B2:IZ2), cells in range B2:IZ2 each contain \"1\"\n    FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n    double numericValue = evaluator.evaluate(workbook.getSheetAt(0).getRow(0.getCell(0)).getNumberValue();\n\n    // Assert\n    assertEquals(259.0, numericValue, 0.0);\n  }\n\n}\n\nAttached is a test.xlsx", "id": 158170, "time": "2012-04-18T15:52:23Z", "bug_id": 53101, "creation_time": "2012-04-18T15:52:23Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53101, "attachment_id": null, "id": 158171, "time": "2012-04-18T16:10:29Z", "creator": "malquitob@gmail.com", "creation_time": "2012-04-18T16:10:29Z", "is_private": false, "text": "There's a typo here:\n\nevaluator.evaluate(workbook.getSheetAt(0).getRow(0.getCell(0)).getNumberValue();\n\nIt should be:\n\nevaluator.evaluate(workbook.getSheetAt(0).getRow(0).getCell(0)).getNumberValue();\n\napologies..."}, {"count": 2, "tags": [], "creator": "malquitob@gmail.com", "attachment_id": null, "text": "I have a fix for this. I've modified pgetRelativeValue(..) in LazyAreaEval as follows:\n\npublic ValueEval getRelativeValue(int relativeRowIndex, int relativeColumnIndex) {\n\n  int rowIx = (relativeRowIndex + getFirstRow() ) & 0xFFFF;\n  int colIx = (relativeColumnIndex + getFirstColumn() ) & 0x3FFF;\n\n  return _evaluator.getEvalForCell(rowIx, colIx);\n}\n\nThe existing code contains:\n\nint colIx = (relativeColumnIndex + getFirstColumn() ) & 0x00FF;\n\nwhich assigns 0 to colIx if relativeColumnIndex + getFirstColumn() > 255, thus cell numbers > 255 are not evaluated.", "id": 158172, "time": "2012-04-18T17:04:21Z", "bug_id": 53101, "creation_time": "2012-04-18T17:04:21Z", "is_private": false}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 158173, "time": "2012-04-18T17:11:47Z", "bug_id": 53101, "creation_time": "2012-04-18T17:11:47Z", "is_private": false, "text": "Would the proposed fix break things for XLS (HSSF) files though?\n\nWe do have a set of constants available for the maximum number of rows, columns etc. I wonder if the masking should be set based on the max column count, rather than hard coded?"}, {"attachment_id": null, "tags": [], "creator": "yegor@dinom.ru", "is_private": false, "count": 4, "id": 158175, "time": "2012-04-18T18:40:01Z", "bug_id": 53101, "creation_time": "2012-04-18T18:40:01Z", "text": "I confirmed the problem in trunk.\n\nAt first glance the fix looks safe, at least it does not break existing tests and fixes evaluation of the attached workbook.\n\n I'm leaving this bug as NEW. LazyEval is pretty fundamental and I'd like to research it deeper before applying the proposed fix.\n\nYegor"}, {"count": 5, "tags": [], "bug_id": 53101, "attachment_id": null, "id": 158188, "time": "2012-04-19T07:49:36Z", "creator": "malquitob@gmail.com", "creation_time": "2012-04-19T07:49:36Z", "is_private": false, "text": "It might be a good idea to look at rowIdx as well:\n\nint rowIx = (relativeRowIndex + getFirstRow() ) & 0xFFFF;\n\nas this limits the number of rows to 65535."}, {"count": 6, "tags": [], "bug_id": 53101, "attachment_id": null, "id": 158194, "time": "2012-04-19T09:03:43Z", "creator": "malquitob@gmail.com", "creation_time": "2012-04-19T09:03:43Z", "is_private": false, "text": "How about removing the &'s altogether?:\n\npublic ValueEval getRelativeValue(int relativeRowIndex, int relativeColumnIndex) {\n\n    int rowIx = relativeRowIndex + getFirstRow();\n    int colIx = relativeColumnIndex + getFirstColumn();\n\n    return _evaluator.getEvalForCell(rowIx, colIx);\n}\n\nThis passes all the test as well."}, {"count": 7, "tags": [], "bug_id": 53101, "attachment_id": null, "is_private": false, "id": 158197, "time": "2012-04-19T11:39:13Z", "creator": "yegor@dinom.ru", "creation_time": "2012-04-19T11:39:13Z", "text": "I thought about removing all &'s too. The purpose of these operators is to guarantee that the the result fits in the .xls grid bounds (2^8 cols and 2^16 rows). We don't need them in general case, but I want research the problem and make sure it is really so. \n\nYegor\n\n(In reply to comment #6)\n> How about removing the &'s altogether?:\n> \n> public ValueEval getRelativeValue(int relativeRowIndex, int\n> relativeColumnIndex) {\n> \n>     int rowIx = relativeRowIndex + getFirstRow();\n>     int colIx = relativeColumnIndex + getFirstColumn();\n> \n>     return _evaluator.getEvalForCell(rowIx, colIx);\n> }\n> \n> This passes all the test as well."}, {"attachment_id": null, "tags": [], "creator": "yegor@dinom.ru", "is_private": false, "count": 8, "id": 158260, "time": "2012-04-21T12:49:20Z", "bug_id": 53101, "creation_time": "2012-04-21T12:49:20Z", "text": "Fixed in r1328647, junit added.\n\nRegards,\nYegor"}, {"count": 9, "tags": [], "bug_id": 53101, "attachment_id": null, "is_private": false, "id": 158297, "time": "2012-04-23T08:40:24Z", "creator": "malquitob@gmail.com", "creation_time": "2012-04-23T08:40:24Z", "text": "Cheers!"}]
[{"count": 0, "tags": [], "creator": "jan.luehe@sun.com", "is_private": false, "id": 84922, "attachment_id": null, "bug_id": 38361, "creation_time": "2006-01-24T01:42:25Z", "time": "2006-01-24T01:42:25Z", "text": "Consider the following code snippet of a servlet's service() method:\n\n  public class DispatcherServlet extends HttpServlet {\n\n    public void service(HttpServletRequest req, HttpServletResponse res)\n        throws IOException, ServletException {\n\n      request.getRequestDispatcher(\"/target\").forward(request, response);\n\n      try {\n          Thread.currentThread().sleep(60000);\n      } catch (Exception ex) { }\n    }\n\nwhere \"target\" prints some output to the response.\n\nThe code currently returns the output printed by \"target\" only after\nDispatcherServlet's service() method has finished, instead of right\nbefore RD.forward() returns.\n\nThis seems to be in violation of the Servlet Spec, which has this:\n\nSRV.8.4 (\"The Forward Method\"):\n\n  Before the forward() method of the RequestDispatcher interface\n  returns, the response content must be sent and committed, and closed\n  by the servlet container.\n\nThe code at the end of o.a.c.core.ApplicationDispatcher.doForward()\nlooks like this:\n\n        // This is not a real close in order to support error processing\n        if ( log.isDebugEnabled() )\n            log.debug(\" Disabling the response for futher output\");\n\n        if  (response instanceof ResponseFacade) {\n            ((ResponseFacade) response).finish();\n        } else {\n            // Servlet SRV.6.2.2. The Resquest/Response may have been\nwrapped\n            // and may no longer be instance of RequestFacade\n            if (log.isDebugEnabled()){\n                log.debug( \" The Response is vehiculed using a wrapper: \"\n                           + response.getClass().getName() );\n            }\n\n            // Close anyway\n            try {\n                PrintWriter writer = response.getWriter();\n                writer.close();\n            } catch (IllegalStateException e) {\n                try {\n                    ServletOutputStream stream = response.getOutputStream();\n                    stream.close();\n                } catch (IllegalStateException f) {\n                    ;\n                } catch (IOException f) {\n                    ;\n                }\n            } catch (IOException e) {\n                ;\n            }\n        }\n\nIn the above code sample, response will be an instance of\nResponseFacade, meaning it will be suspended instead of being flushed\nand closed right away.\n\nThis approach has a couple of problems:\n\n- An attempt by servlet code to flush the response after RD.forward()\n  has returned will have no effect, because a response in suspended\n  state ignores any calls to it.\n\n- Consider the case where a request has been\n  forward-dispatched into a foreign context. If the target servlet in\n  the foreign context has set an error code on the response, and the\n  response is suspended before returning from the RD.forward(),\n  the error code will be mapped to an error page using the mappings of\n  the *origin* context as the response travels through the origin\n  context's pipeline (and error valve) on the way out.\n  The origin and target contexts may map the same status code to\n  different error pages, or the origin context may not even contain any\n  mapping for the given status code. In any case, it is\n  confusing for the origin context's mappings to be used, since a\n  RD.forward() is supposed to transfer control to the target (context)."}, {"count": 1, "tags": [], "bug_id": 38361, "is_private": false, "text": "So, suggested fix to ApplicationDispatcher is?", "id": 87976, "time": "2006-04-13T20:02:28Z", "creator": "yoavs@computer.org", "creation_time": "2006-04-13T20:02:28Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "There's no bug here.", "id": 88020, "time": "2006-04-13T22:57:07Z", "bug_id": 38361, "creation_time": "2006-04-13T22:57:07Z", "is_private": false}]
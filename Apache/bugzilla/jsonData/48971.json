[{"attachment_id": null, "tags": [], "bug_id": 48971, "is_private": false, "count": 0, "id": 135570, "time": "2010-03-23T22:56:08Z", "creator": "slaurent@apache.org", "creation_time": "2010-03-23T22:56:08Z", "text": "While investigating to write this wiki page http://wiki.apache.org/tomcat/MemoryLeakProtection , I realized that WebAppClassLoader.clearReferencesStopTimerThread() can have dangerous side effects.\n\nIndeed, if the TimerThread was spawned by some library deployed in the common (or even JRE) classpath, then stopping it can impact other webapps still running.\nIt would probably be a bug of that library to have such a thread with such a context classloader, but we have to be realistic, we cannot fix every third-party library (and the JRE).\n\nIn my opinion, tomcat should better play it safe in such a case, and should not attempt by default to stop TimerThreads : it's safer to have a leak for a stopped webapp than break running apps !\n\nWebAppClassLoader.clearReferencesStopTimerThread() should be conditioned with the existing boolean clearReferencesStopThreads.\n\nsee attached proposed patch."}, {"count": 1, "tags": [], "bug_id": 48971, "attachment_id": null, "text": "For a better description of the side effect, see http://wiki.apache.org/tomcat/MemoryLeakProtection#cclThreadSpawnedByCommonClassLoader", "id": 135571, "time": "2010-03-23T22:58:39Z", "creator": "slaurent@apache.org", "creation_time": "2010-03-23T22:58:39Z", "is_private": false}, {"count": 2, "tags": [], "creator": "markt@apache.org", "text": "There is no patch attached to this bug report.\n\nI'd rather keep the protection by default and provide a way to disable it if necessary. That said, your expendable class-loader idea is probably a better way of dealing with this. Is there a complete patch for that anywhere? I don't recall seeing one.", "id": 135573, "time": "2010-03-24T00:32:42Z", "bug_id": 48971, "creation_time": "2010-03-24T00:32:42Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 48971, "text": "Created attachment 25170\npatch for tomcat 7", "id": 135579, "time": "2010-03-24T05:32:39Z", "creator": "slaurent@apache.org", "creation_time": "2010-03-24T05:32:39Z", "is_private": false, "attachment_id": 25170}, {"count": 4, "tags": [], "bug_id": 48971, "text": "you're correct,  I did not submit any patch for the expendable classloader, I'd like to discuss another approach on the dev list in the next days.\n\nRegarding this present issue, I think that it would be more coherent/consistent to either stop all \"leaking\" threads or none. Currently, the default behavior depends on the actual class of the Thread, which is not self-evident for users...\n\nAnd my opinion is still that such an option should be \"opt-in\" rather than \"opt-out\".", "id": 135599, "time": "2010-03-24T20:08:44Z", "creator": "slaurent@apache.org", "creation_time": "2010-03-24T20:08:44Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 25203, "text": "Created attachment 25203\nbug48971_DBCP_reproducer.zip - IllegalStateException caused by stopped timer\n\nAny DBCP pool that has timeBetweenEvictionRunsMillis attribute set to a positive value will suffer from this issue.\n\nThe class that creates the timer is org.apache.commons.pool.impl.EvictionTimer and is (after being renamed) in tomcat-dbcp.jar, which is in the Common class loader.\n\nIt looks that the TimerThread created by the Timer will belong to the first web application that happens to access the pool. Forcibly stopping the timer creates an invalid state in the DBCP and the next web applications may fail to start.\n\nI am attaching configuration that reproduces this issue.\n\nTo reproduce:\n1. Unpack the zip archive, and place the provided files on top of the default configuration of Tomcat 6.0.26.\n\nIt contains:\n1) /data - Two sample HSQLDB databases (http://hsqldb.org/), \"database\" and \"database2\". These are identical and contain a single table with two rows of data - see the *.script files.\n2) /lib - HSQLDB 1.8.1.2 jar.\n3) /conf - server.xml that defines a database pool in GlobalResources.\n         - tomcat-users.xml that contains a username and password for the manager application\n4) /webapps - Two web applications, test1 and test2. These are nearly identical, with the following only difference between them (see META-INF/context.xml):\n- test1 uses connection pool defined in server.xml\n- test2 uses its own connection pool\n5) /logs - Logs from my test run.\n\n2. Copy jstl.jar and standard.jar from /webapps/examples/WEB-INF/lib/ of Tomcat into the /lib folder of Tomcat.\n\n3. Start Tomcat\n4. Go to http://localhost:8080/test1/  A test page should load and print two database rows.\n5. Go to http://localhost:8080/manager/html/ and stop the test1 application.\nNote, that Tomcat stops TimerThread created by DBCP.\n\n6. Go to http://localhost:8080/test2/\nExpected result: The same output as for test1 before.\nActual result:  The page fails to load, displaying\nDataSource invalid: \"java.lang.IllegalStateException: Timer already cancelled.\"\n\n\nIt is not seen from the stack trace, but my understanding here is that that occurs because in Commons Pools, when a new pool is initialized, the GenericObjectPool#startEvictor(..) method creates a new Evictor and calls Timer.schedule(..) to schedule it, but the timer is already canceled.\n\nOther issues:\n1) I suspect that when the pool defined in server.xml is initialized, the TCCL occurs to be equal to the classloader of the web application. I have not yet confirmed that, but that will be a separate bug (causing its own leaks) if it is the case.\n2) HSQLDB creates its own \"HSQLDB Timer\" thread. That is not important, because DBCP issue I am talking about is independent of what database is used. If anyone is curious: that thread is created by the org.hsqldb.lib.HsqlTimer class.\n\n\nRegarding the feature of stopping TimerThreads:\n1) I agree with Sylvain that it looks like that it would be better to have it disabled by default, but I would like to have a separate option to control enabling this feature.\n2) I think that another strategy is possible here: to call Thread.setContextClassLoader(null) on the affected threads. That can have its consequences, but might be better than stopping the threads.\n\nWorkaround:  Do not set \"timeBetweenEvictionRunsMillis\" attribute on a pool.", "id": 135735, "time": "2010-03-28T21:30:07Z", "bug_id": 48971, "creation_time": "2010-03-28T21:30:07Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 48971, "is_private": false, "text": "Mark, could you consider fixing this issue for 6.0.27 ? there's my (now old) patch for trunk attached, do you need a more recent one and one for tomcat 6 as well ?", "id": 136712, "time": "2010-05-06T17:18:59Z", "creator": "slaurent@apache.org", "creation_time": "2010-05-06T17:18:59Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 48971, "attachment_id": null, "text": "The approach suggested by Sylvain on the dev list was to set the Thread's context class loader to null. I'm not 100% about the side-effects of that either. However, that did trigger another idea - setting the context class loader to the parent of the webapp class loader, normally the common class loader. In that case, we still need to log an error - it is just the corrective action that changes.\n\nI'll test this idea out over the next day or so.", "id": 137070, "time": "2010-05-24T10:22:30Z", "creator": "markt@apache.org", "creation_time": "2010-05-24T10:22:30Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 48971, "attachment_id": null, "text": "Hello Mark,\n\nI had tried this too, but I still had the leak because I often had some ProtectionDomain instances that referenced the webapp classloader.\n\nThe urgent thing to do is to fix the current issue by making the stopping of TimerThread optional, and open a new BZ issue for an enhancement in this matter.", "id": 137082, "time": "2010-05-24T17:43:33Z", "creator": "slaurent@apache.org", "creation_time": "2010-05-24T17:43:33Z", "is_private": false}, {"count": 9, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "This has been fixed in trunk and proposed for 6.0.x.", "id": 137251, "time": "2010-06-01T13:01:45Z", "bug_id": 48971, "creation_time": "2010-06-01T13:01:45Z", "is_private": false}, {"count": 10, "tags": [], "text": "Note I have fixed the DBCP issue in commons pool. The fix will be in pool 1.5.5 onwards.", "attachment_id": null, "id": 137257, "creator": "markt@apache.org", "time": "2010-06-01T15:15:00Z", "bug_id": 48971, "creation_time": "2010-06-01T15:15:00Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 48971, "is_private": false, "text": "reference to the commons-pool issue : https://issues.apache.org/jira/browse/POOL-161", "id": 137261, "time": "2010-06-01T17:05:31Z", "creator": "slaurent@apache.org", "creation_time": "2010-06-01T17:05:31Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 48971, "text": "The fix was applied to 6.0 in r951930 and will be in 6.0.27 onwards.\nStopping the java.util.TimerThread threads is now optional and disabled by default.", "id": 137386, "time": "2010-06-06T15:22:26Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2010-06-06T15:22:26Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "peter.hancock@gmail.com", "text": "The requirment is detailed here http://wiki.apache.org/xmlgraphics-fop/AFPFonts", "id": 133682, "time": "2010-01-18T07:25:10Z", "bug_id": 48567, "creation_time": "2010-01-18T07:25:10Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 48567, "is_private": false, "id": 133683, "attachment_id": 24854, "creator": "peter.hancock@gmail.com", "creation_time": "2010-01-18T07:31:51Z", "time": "2010-01-18T07:31:51Z", "text": "Created attachment 24854\nProposed patch"}, {"count": 2, "tags": [], "bug_id": 48567, "text": "Created attachment 24857\npatch of implementation", "id": 133695, "time": "2010-01-19T02:59:38Z", "creator": "peter.hancock@gmail.com", "creation_time": "2010-01-19T02:59:38Z", "is_private": false, "attachment_id": 24857}, {"count": 3, "tags": [], "bug_id": 48567, "is_private": false, "id": 133728, "attachment_id": null, "creator": "jeremias@apache.org", "creation_time": "2010-01-20T07:30:29Z", "time": "2010-01-20T07:30:29Z", "text": "Peter, I've taken a peek at your code. Eclipse had a bit of trouble applying the patch because you renamed AFPFontReader to CharacterSetBuilder, but that was not insurmountable. From the functionality POV I guess this works fine. At least I get nicely formatted Japanese text which seems to be consistent with PDF output generated with Arial Unicode MS.\n\nYou've asked me off-list if it is correct to get the em space width from the FNO field rather than the FNC field. But I don't see any information on the em space in the FNC field. At any rate, FNO is the right place to get this from IMO.\n\nWhile going through your changes I wondered if it would not have made sense to extract the em space in every case, not just in the double-byte case. That could have reduced the code duplication a bit that is caused by org.apache.fop.afp.fonts.CharacterSetBuilder.DoubleByteLoader. At least the processFontOrientation() method looks like unnecessary code duplication to me. Furthermore, it is a bit strange that you call this \"unitPerEm\" in CharacterSetOrientation what is actually the em space increment. Maybe that's what you confused in FNC with. There's a unit per em there but that has a different purpose.\n\nI'm wondering if you would agree that using \"Type 0\" (or \"CIDKeyed\") instead of \"double-byte\" is a more accurate choice for the font type in the user configuration.\n\nDo you think that the fallback character business in the configuration is really necessary? I fear that this is too complicated for users. I don't quite see what it would help. Can you explain why you added this?\n\nA few observations while looking into this (not related to your work):\n- Some of the AFP viewers to quite some time to display the files with the embedded Japanese font, the Papyrus Client being the exception. Maybe that is just so. At least there doesn't seem to be anything technically wrong.\n- The restriction of the font and codepage names to exactly 8 characters is something we should relax eventually (by creating actual FullyQualifiedNameTriplet instances in MapCodedFont). Probably a remainder from the times where the triplets were not encapsulated in classes. At least there is no such restriction in the AFP specs.\n\nIf you don't have anything else that you need to address with this patch, I could commit it later this week. I'd like your feedback on my comments above before I do that. I could handle the few changes myself. Since I've already made some local, cosmetic changes locally, that would save my applying the patch a second time. However, if you could update the documentation for the website once we've finalized the above, that'd be appreciated."}, {"count": 4, "tags": [], "bug_id": 48567, "is_private": false, "id": 133731, "attachment_id": null, "creator": "peter.hancock@gmail.com", "creation_time": "2010-01-20T08:55:17Z", "time": "2010-01-20T08:55:17Z", "text": "(In reply to comment #3)\n\n\n> Peter, I've taken a peek at your code.\nThanks for reviewing the patch so quicky!\n\n> Eclipse had a bit of trouble applying\n> the patch because you renamed AFPFontReader to CharacterSetBuilder, but that\n> was not insurmountable.\nSorry about that!\n\n\n> You've asked me off-list if it is correct to get the em space width from the\n> FNO field rather than the FNC field. But I don't see any information on the em\n> space in the FNC field. At any rate, FNO is the right place to get this from\n> IMO.\n\n> Furthermore, it is a bit strange that you call this \"unitPerEm\" in\n> CharacterSetOrientation what is actually the em space increment. Maybe that's\n> what you confused in FNC with. There's a unit per em there but that has a\n> different purpose.\n\nI was unsure if there was a distinction between 'em space increment' and 'units per em' - now I know.\n\n\n> While going through your changes I wondered if it would not have made sense to\n> extract the em space in every case, not just in the double-byte case. That\n> could have reduced the code duplication a bit that is caused by\n> org.apache.fop.afp.fonts.CharacterSetBuilder.DoubleByteLoader. At least the\n> processFontOrientation() method looks like unnecessary code duplication to me.\nThat makes sense - we can remove the now redundant CharacterSetOrientation(int) constructor as well.\n\n\n\n\n> I'm wondering if you would agree that using \"Type 0\" (or \"CIDKeyed\") instead of\n> \"double-byte\" is a more accurate choice for the font type in the user\n> configuration.\nCIDKeyed then?\n\n> \n> Do you think that the fallback character business in the configuration is\n> really necessary? I fear that this is too complicated for users. I don't quite\n> see what it would help. Can you explain why you added this?\nusing a fallback character was my first approach and the em space, as recommended by yourself, my second.  In retrospect I now totally agree that the fallback character is probably useless and certainly reduces usability.\n\n\n> - The restriction of the font and codepage names to exactly 8 characters is\n> something we should relax eventually (by creating actual\n> FullyQualifiedNameTriplet instances in MapCodedFont). Probably a remainder from\n> the times where the triplets were not encapsulated in classes. At least there\n> is no such restriction in the AFP specs.\nI am looking at this now.  I thought it may have been an AFP restriction since I seemed to get a badly formed AFP when I forced through a name of length 6.  This will have to be resolved at a later time I guess. \n\n\n> If you don't have anything else that you need to address with this patch, I\n> could commit it later this week. I'd like your feedback on my comments above\n> before I do that. I could handle the few changes myself. Since I've already\n> made some local, cosmetic changes locally, that would save my applying the\n> patch a second time.\nI agree with all of your suggestions.  Before you go ahead and commit I wonder how easy it is to configure fop to not embed the font.  Is much dev work required do you think?  In http://xmlgraphics.apache.org/fop/trunk/fonts.html it is claimed that not supplying an embed-url attribute directs fop not to embed the font, but this is not so,  and in fact, fop never seems to have a chance at setting the embeddable flag on an AFP font.  When AFPRendererConfigurator constructs the font instance it could set the flag then based on an attribute, but what other information is needed?  When I manually set embeddable to false the rendered AFP only declares the font resource and the code page in the MCF structured field.  I have not tried printing yet (Our afp printer is playing up for me today) or checked the spec to see if this is ok.  If you happen to know that it should work we could perhaps add a boolean-like attribute to the font attribute (respected when type=\"CIDKeyed\" or all AFP?) and call AFPFont.setEmbeddable() upon creation (or pass a constructor arg). Otherwise I guess this would be a  future unit work.\n\n\n\n>However, if you could update the documentation for the\n> website once we've finalized the above, that'd be appreciated.\nI will attach this as a second patch to this bug."}, {"count": 5, "tags": [], "bug_id": 48567, "text": "Created attachment 24877\nxdocs", "id": 133782, "attachment_id": 24877, "creator": "peter.hancock@gmail.com", "creation_time": "2010-01-21T07:35:10Z", "time": "2010-01-21T07:35:10Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 48567, "is_private": false, "id": 133784, "attachment_id": null, "creator": "peter.hancock@gmail.com", "creation_time": "2010-01-21T07:46:26Z", "time": "2010-01-21T07:46:26Z", "text": "The attachment 'xdocs' is the corresponding documentation update for the webserver"}, {"count": 7, "tags": [], "bug_id": 48567, "is_private": false, "id": 133787, "attachment_id": null, "creator": "jeremias@apache.org", "creation_time": "2010-01-21T08:01:33Z", "time": "2010-01-21T08:01:33Z", "text": "Thanks for your feedback. We're in agreement, it seems.\n\n(In reply to comment #4)\n<snip/>\n> I agree with all of your suggestions.  Before you go ahead and commit I wonder\n> how easy it is to configure fop to not embed the font.  Is much dev work\n> required do you think?  In http://xmlgraphics.apache.org/fop/trunk/fonts.html\n> it is claimed that not supplying an embed-url attribute directs fop not to\n> embed the font, but this is not so,  and in fact, fop never seems to have a\n> chance at setting the embeddable flag on an AFP font.  When\n> AFPRendererConfigurator constructs the font instance it could set the flag then\n> based on an attribute, but what other information is needed?  When I manually\n> set embeddable to false the rendered AFP only declares the font resource and\n> the code page in the MCF structured field.  I have not tried printing yet (Our\n> afp printer is playing up for me today) or checked the spec to see if this is\n> ok.  If you happen to know that it should work we could perhaps add a\n> boolean-like attribute to the font attribute (respected when type=\"CIDKeyed\" or\n> all AFP?) and call AFPFont.setEmbeddable() upon creation (or pass a constructor\n> arg). Otherwise I guess this would be a  future unit work.\n\nAFP Font referencing should work via the mechanism described under:\nhttp://xmlgraphics.apache.org/fop/trunk/fonts.html#embedding\n(<referenced-fonts>)\nAt least, I've tested that with outline and bitmap fonts at some point. However, we need to see what happens in the case of CIDKeyed because of the MapCodedFont object. I'll do a test."}, {"count": 8, "tags": [], "bug_id": 48567, "text": "I've applied your patches (documentation, too):\nhttp://svn.apache.org/viewvc?rev=901793&view=rev\nThanks for the patch!\n\nI've tested with referenced-fonts and that seems to do what I expect. The MapCodedFont gets generated and should work if the font and the codepage are installed on the target platform. Lacking a full AFP environment I cannot easily test that to the very end. The only thing I noticed is that the viewers don't recognize that the font is double-byte if the fonts are not embedded and not available to the editor. I've added a TODO in MapCodedFont with an idea which might help. In case you look into that class you may want to take a look.\n\nAs for the Unicode blocks we use to determine whether we have to use the em space instead of a normal space for characters which don't provide individual metrics, I think we don't have all that we need, yet. I've stumbled over http://unicode.org/reports/tr11/ which mentions fullwidth and halfwidth characters. However, I could not yet find the location where the information for the destinction for each character can be found. With the font we tested with we got away since the em space equals the normal space increment. For fonts that have western characters, we may not get away with the current set of Unicode Blocks. Not knowing enough about eastern languages is a real impediment for me here.", "id": 133795, "time": "2010-01-21T09:48:08Z", "creator": "jeremias@apache.org", "creation_time": "2010-01-21T09:48:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "peter.hancock@gmail.com", "text": "(In reply to comment #8)\n> I've applied your patches (documentation, too):\n> http://svn.apache.org/viewvc?rev=901793&view=rev\n> Thanks for the patch!\nIt is a pleasure to be able to contribute!\n\n \n> As for the Unicode blocks we use to determine whether we have to use the em\n> space instead of a normal space for characters which don't provide individual\n> metrics, I think we don't have all that we need, yet. I've stumbled over\n> http://unicode.org/reports/tr11/ which mentions fullwidth and halfwidth\n> characters. However, I could not yet find the location where the information\n> for the destinction for each character can be found. With the font we tested\n> with we got away since the em space equals the normal space increment. For\n> fonts that have western characters, we may not get away with the current set of\n> Unicode Blocks. Not knowing enough about eastern languages is a real impediment\n> for me here.\nPerhaps we should make the fallback strategy external from where it is applied and perhaps configurable.  Maybe the 'char => fallback char' mapping  can be externalized in a similiar way to that of the base-14 font metrics.  Commiting improvements to this mapping - or even supporting customization of - would then be decoupled from the /src/java codebase.", "id": 133825, "time": "2010-01-22T01:40:08Z", "bug_id": 48567, "creation_time": "2010-01-22T01:40:08Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 48567, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155636, "attachment_id": null, "creator": "gadams@apache.org", "creation_time": "2012-04-01T06:32:32Z", "time": "2012-04-01T06:32:32Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "matafagafo@yahoo.com", "text": "Created attachment 34243\nA invalid format file\n\nZipPackage isn't closing opened files  when InvalidFormatExceptions are raised. \n\nRunning the code bellow, using the provided sample file, shows the problem, while the sample code is running the file is open in operation system (you have to use some SO tool to verify this).\nSome details:\n* To run you have to correct the path to provided file.\n* The provided file is a invalid XLSX file, was created just to generate the problem.\n\nThe Exception trace \n\n\tat org.apache.poi.openxml4j.opc.ZipPackage.getPartsImpl(ZipPackage.java:238)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.getParts(OPCPackage.java:726)\n\tat org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:228)\n\tat Main.main(Main.java:14)\n\nIt's happen because ZipPackage opens the file but don't close it when a Exception is raised.\n\n\n\nThe sample code:\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport org.apache.poi.openxml4j.opc.OPCPackage;\nimport org.apache.poi.openxml4j.opc.PackageAccess;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tOPCPackage pkg = null;\n\t\ttry {\n\t\t\tpkg = OPCPackage.open(\"C:/Temp/invalid file.xlsx\", PackageAccess.READ);\n\t\t} catch (Exception ex) {\n\t\t\tLogger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\n\t\t} finally {\n\t\t\tif (pkg != null) {\n\t\t\t\tpkg.close();\n\t\t\t}\n\t\t}\n\t\t\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s;\n\t\twhile ((s = in.readLine()) != null && s.length() != 0) {\n\t\t\t// Enter to end sample\n\t\t}\n\t}\n}", "id": 193682, "time": "2016-09-13T19:42:35Z", "bug_id": 60128, "creation_time": "2016-09-13T19:42:35Z", "is_private": false, "attachment_id": 34243}, {"count": 1, "text": "Are you sure this is still happening on trunk?\n\nOPCPackage has a bunch of catches in the open block, which attempt to close the faulty package before triggering the exception. I've added some unit tests in r1760693 which verify that the call to close on a faulty package does actually close the underlying stream/file. As such, I can't see how things aren't getting closed?", "creator": "apache@gagravarr.org", "is_private": false, "id": 193703, "time": "2016-09-14T12:39:22Z", "bug_id": 60128, "creation_time": "2016-09-14T12:39:22Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60128, "attachment_id": null, "is_private": false, "id": 193704, "time": "2016-09-14T13:07:25Z", "creator": "onealj@apache.org", "creation_time": "2016-09-14T13:07:25Z", "text": "I found a couple spots where opened files were not closed when raising exceptions. The one mentioned in comment 0, caused by OPCPackage.open not closing the ZipPackage when pack.getParts() failed is fixed [1].\nI found some other cases in the ZipPackage constructors that could fail without cleaning up their resources. [2]\n\nI committed these changes in r1760702. They will likely be included in the POI 3.15 final release.\n\nThis commit is in desperate need of cleanup for someone who knows what they're doing with Java exception handling. This is admittedly beyond my skills.\n\nThanks for the test file, code, and stack trace. Got any ideas how we can check for unclosed resources in our unit tests? In TestZipPackage, we're using assertTrue(tmpFile.delete()) [3]\n\n[1] OPCPackage.java https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/openxml4j/opc/OPCPackage.java?r1=1760702&r2=1760701&pathrev=1760702\n[2] ZipPackage.java https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/openxml4j/opc/ZipPackage.java?r1=1760702&r2=1760701&pathrev=1760702\n[3] TestZipPackage.java https://svn.apache.org/viewvc/poi/trunk/src/ooxml/testcases/org/apache/poi/openxml4j/opc/TestZipPackage.java?r1=1760702&r2=1760701&pathrev=1760702"}, {"count": 3, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Based on the line numbers in comment 0, it looks like Matafagafo is using POI 3.15 beta 2 or a trunk release between r1749795 (2016-06-22) and r1752997 (2016-07-16)", "id": 193705, "time": "2016-09-14T13:17:30Z", "bug_id": 60128, "creation_time": "2016-09-14T13:17:30Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "matafagafo@yahoo.com", "text": "(In reply to Javen O'Neal from comment #3)\n> Based on the line numbers in comment 0, it looks like Matafagafo is using\n> POI 3.15 beta 2 or a trunk release between r1749795 (2016-06-22) and\n> r1752997 (2016-07-16)\n\nYou are right, the stack is from POI 3.15 beta 2.\nSorry for the lack of info.", "id": 193709, "time": "2016-09-14T14:14:04Z", "bug_id": 60128, "creation_time": "2016-09-14T14:14:04Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60128, "attachment_id": null, "is_private": false, "id": 193715, "time": "2016-09-14T17:33:00Z", "creator": "onealj@apache.org", "creation_time": "2016-09-14T17:33:00Z", "text": "Changes from Throwable#addSuppress to Throwable#printStackTrace() to maintain Java 6 compatibility in r1760732.\nUpdated changelog in r1760734\n\nPlease reopen if the problem persists with the latest trunk build or the exception handling can be improved on."}, {"count": 6, "tags": [], "bug_id": 60128, "attachment_id": null, "text": "r1760735 add test-data/openxml4j/invalid.xlsx to expected failures for integration test", "id": 193716, "time": "2016-09-14T17:48:40Z", "creator": "onealj@apache.org", "creation_time": "2016-09-14T17:48:40Z", "is_private": false}, {"count": 7, "tags": [], "text": "r1760743 add test-data/openxml4j/invalid.xlsx to additional expected failures for integration test", "attachment_id": null, "id": 193717, "creator": "onealj@apache.org", "time": "2016-09-14T18:42:01Z", "bug_id": 60128, "creation_time": "2016-09-14T18:42:01Z", "is_private": false}]
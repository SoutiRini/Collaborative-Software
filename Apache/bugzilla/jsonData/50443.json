[{"count": 0, "tags": [], "text": "I used the BCEL v5.2 to do experiments on my test cases, and met the following problem.\n\nD:\\java test._Test10\nException in thread \"main\" java.lang.ClassFormatError: LVTT entry for 'ht' in cl\nass file test/_Test10 does not match any LVT entry\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:616)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:14\n1)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)\n        at java.net.URLClassLoader.access$000(URLClassLoader.java:58)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:197)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)\nCould not find the main class: test._Test10.  Program will exit.\n\n\nMy test case is as follows:\npublic class _Test10 {\n\tpublic static void main (String [] args){\n\t\t HashMap <Double,Integer> ht = new HashMap<Double,Integer>();\n\t}\n}\n\n\nUsing BCEL, I didn't make any change of the original Method. Using it, I generated a new Method and replaced it with the new one.\n\nClassGen _cg = new ClassGen(_claz);\nfor (Method oldMethod : _inMethods) {\n\tMethodGen mg = new MethodGen(oldMethod, _inClass.getClassName(), _cpg);\n\tMethod newMethod = mg.getMethod();\n\t_cg.replaceMethod(oldMethod, newMethod);\n}", "attachment_id": null, "id": 142530, "creator": "gxs213@case.edu", "time": "2010-12-09T11:57:20Z", "bug_id": 50443, "creation_time": "2010-12-09T11:57:20Z", "is_private": false}]
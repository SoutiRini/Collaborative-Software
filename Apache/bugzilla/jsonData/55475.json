[{"count": 0, "tags": [], "creator": "hannes@ucsc.edu", "attachment_id": 30757, "id": 169681, "time": "2013-08-23T18:35:23Z", "bug_id": 55475, "creation_time": "2013-08-23T18:35:23Z", "is_private": false, "text": "Created attachment 30757\nA sample backend used for the reproduction steps\n\nHi,\n\nApache\u2019s mod_proxy turns incomplete or invalid backend responses into complete ones if the backend uses the chunked transfer coding. This applies to Apache 2.2.x, 2.4.x and the current trunk (2.5.x). If the zero-length chunk that terminates a complete chunked-coding message is missing in the backend response, mod_proxy (or rather the core chunk_filter) adds one. Apache acts as if the backend server sent a complete response, whereas in fact it didn\u2019t. This is very worrying because it prevents clients from reliably detecting errors in the backend.\n\nIf the backend doesn\u2019t correctly implement chunked transfer coding, by, say using illegal characters in the size line that precedes every chunk, those violations are ignored by mod_proxy, at least in 2.2.25.\n\nThe upcoming RFC by the HTTPbis working group clarifies how clients -- and mod_proxy is a HTTP client -- must handle incomplete messages [1]:\n\n> A client that receives an incomplete response message, which can occur when a \n> connection is closed prematurely or when decoding a supposedly chunked transfer \n> coding fails, must record the message as incomplete.\n\nBy turning an incomplete message into a complete one, mod_proxy will be in violation of this section when the draft becomes standard. But that section just describes commonly accepted wisdom: detect and report errors, don\u2019t ignore them, and don\u2019t pretend they didn\u2019t happen.\n\nThe situation in 2.4.x and trunk is a little more complicated: there seems to be some non-determinism. One in ten mod_proxy responses do correctly omit the terminating zero-length chunk if the backend response didn\u2019t end in one.\n\nSteps to reproduce (assuming wget, bash, Python, pip and Apache already installed):\n\n$ python -V # should have Python 2.7, not sure if 2.6 works\nPython 2.7.5\n$ which pip # should have pip, if not see http://www.pip-installer.org/en/latest/installing.html\n/usr/local/bin/pip\n$ pip install tornado # or use whatever means you prefer to install pip\n$ wget 'https://gist.github.com/hannes-ucsc/a8ce89e3ce7967ffa833/raw/69244d94b1d1dd2f0304ecd428f047fe94eb017a/server.py'\n$ python server.py 8881\n\nMeanwhile, in another shell:\n\n$ wget 'https://gist.github.com/hannes-ucsc/32df3a1adf6085bdb2cd/raw/13e55b9fc51e2f4486e9b8f4fde4e84f2bc9221a/httpd.conf'\n$ sudo cat httpd.conf > /etc/apache2/httpd.conf # or equivalent\n$ apachectl restart\n$ curl 'http://localhost/cghub/metadata/analysisObject?fake_error=1' && echo success || echo failure\n\nExpected: \n\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<ResultSet date=\"2013-08-10 02:09:40\" id=\"43430736\">\n...\n\t</Result>\ncurl: (18) transfer closed with outstanding read data remaining\nfailure\n\nThe backend sends an incomplete response, so curl should fail.\n\nActual:\n\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<ResultSet date=\"2013-08-10 02:09:40\" id=\"43430736\">\n...\n\t</Result>\nsuccess\n\nFor Apache 2.4.x and trunk we need to use a loop\n\n$ while ! curl 'http://localhost/cghub/metadata/analysisObject?fake_error=1' ; do echo retry ; done\n\nExpected: The loop should never exit.\nActual: At some point the loop exits because curl unexpectedly succeeds.\n\nIf we hit the backend directly, we get the expected failure:\n\n$ curl 'http://localhost:8881/cghub/metadata/analysisObject?fake_error=1' && echo success || echo failure\n...\nfailure\n\n[1] http://www.mnot.net/talks/bits-on-the-wire/httpbis.html#incomplete.messages"}, {"count": 1, "tags": [], "creator": "hannes@ucsc.edu", "text": "Does nobody care that proxying of chunked coding is not RFC compliant?\n\nWhat can we do to bring this to the attention of the right people?", "id": 170076, "time": "2013-09-12T20:40:37Z", "bug_id": 55475, "creation_time": "2013-09-12T20:40:37Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30830\nDetect incomplete body in HTTP input filter and return APR_INCOMPLETE (2.2.x)\n\nThe problem is that mod_proxy_http stops forwarding backend's data when it gets APR_EOF.\n\nSince it does not know anything about the state of the body it forwards (http_input_filter's BODY_CHUNK/BODY_LENGTH/BODY_NONE), APR_EOF may be a legitimate end-of-body returned by the core_input_filter. Hence it can't do much better at its level.\n\nIMHO, the fix has to be in the http_input_filter.\n\nFor an output filter of mine (2.2.x) taking care about the truncated response body, I use the attached patch which does the job , and is quite simple...", "id": 170083, "time": "2013-09-13T10:27:46Z", "bug_id": 55475, "creation_time": "2013-09-13T10:27:46Z", "is_private": false, "attachment_id": 30830}, {"count": 3, "tags": [], "text": "Created attachment 30831\nDetect incomplete body in HTTP input filter and return APR_INCOMPLETE (trunk)\n\nSame patch for trunk (untested).", "is_private": false, "id": 170084, "creation_time": "2013-09-13T10:32:46Z", "time": "2013-09-13T10:32:46Z", "creator": "ylavic.dev@gmail.com", "bug_id": 55475, "attachment_id": 30831}, {"count": 4, "tags": [], "text": "> If the backend doesn\u2019t correctly implement chunked transfer coding, by,\n> say using illegal characters in the size line that precedes every chunk,\n> those violations are ignored by mod_proxy, at least in 2.2.25.\n\nThis has been fixed in 2.4.x, but not in 2.2.x (and, I guess, is unlikely to be).", "attachment_id": null, "id": 170085, "creation_time": "2013-09-13T11:02:57Z", "time": "2013-09-13T11:02:57Z", "creator": "ylavic.dev@gmail.com", "bug_id": 55475, "is_private": false}, {"count": 5, "tags": [], "bug_id": 55475, "attachment_id": 30832, "text": "Created attachment 30832\nDetect incomplete body in HTTP input filter and return APR_INCOMPLETE (trunk)\n\nNew patch for trunk, I forgot the EOS case with remaining data.", "id": 170087, "time": "2013-09-13T12:08:36Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-13T12:08:36Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 55475, "attachment_id": 30837, "text": "Created attachment 30837\nNaive attempt at detecting incomplete backend response in mod_proxy\n\nThank you for looking into this, Yann. I tried both of your patches against their respective branches. They don't fix the issue for me. \n\nThe trunk patch doesn't change the fact that the behaviour is indeterministic. Interestingly, in the cases where I see the expected behaviour (no zero-length chunk sent before connection is closed), there is a slight delay of a few seconds before Apache closes the connection.\n\nI set breakpoints into the new code paths added by your 2.2.x patch and neither of them is ever hit.\n\nA few weeks ago I endeavored to create my own patch against 2.2.x and it does exhibit the desired behavior in our particular use case. However, I am pretty sure it breaks other use cases so I am attaching it for illustrative purposes only.", "id": 170099, "time": "2013-09-14T01:32:07Z", "creator": "hannes@ucsc.edu", "creation_time": "2013-09-14T01:32:07Z", "is_private": false}, {"count": 7, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 30839, "id": 170101, "time": "2013-09-14T11:16:03Z", "bug_id": 55475, "creation_time": "2013-09-14T11:16:03Z", "is_private": false, "text": "Created attachment 30839\nDetect incomplete body in HTTP input filter and return APR_INCOMPLETE (2.2.x)\n\nMy fault, when the filter bails out on error it does not work (my output filter actually catch the error buckets, so it works for me...).\n\nIs this new patch against 2.2.x any better ?"}, {"count": 8, "tags": [], "creator": "hannes@ucsc.edu", "text": "Great! The new 2.2.x patch does fix the issue.\n\nJust to be mean ;-), I did add a new test case, which is to close the connection in the middle of a chunk. In that case mod_proxy/http_filter turns the incomplete chunk into a complete on and then terminates it. For example,\n\n        GET /cghub/metadata/analysisObject?fake_error=1 HTTP/1.1\n        Host: 127.0.0.1:8881\n        User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\n        Accept: */*\n        X-Forwarded-For: ::1\n        X-Forwarded-Host: localhost:8080\n        X-Forwarded-Server: 127.0.0.1\n        Connection: Keep-Alive\n\n        HTTP/1.1 200 OK\n        Date: Sun, 15 Sep 2013 06:36:16 GMT\n        Transfer-Encoding: chunked\n        Content-Type: text/xml\n        Server: TornadoServer/3.1\n\n        1000\n        foo\n\nbecomes \n\n        GET /cghub/metadata/analysisObject?fake_error=1 HTTP/1.1\n        User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\n        Host: localhost:8080\n        Accept: */*\n\n        HTTP/1.1 200 OK\n        Date: Sun, 15 Sep 2013 06:36:16 GMT\n        Server: TornadoServer/3.1\n        Content-Type: text/xml\n        Transfer-Encoding: chunked\n\n        3\n        foo\n        0", "id": 170109, "time": "2013-09-15T06:49:47Z", "bug_id": 55475, "creation_time": "2013-09-15T06:49:47Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30846\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (2.2.x)\n\nA new patch that fix that case too.\n\nThe problem was the core_input_filter's EOS not stripped from the brigade when returning APR_ECONNABORTED (previously APR_INCOMPLETE, but the associated error message \"Partial results are valid but processing is incomplete\" looks weird).", "id": 170115, "time": "2013-09-16T08:30:03Z", "bug_id": 55475, "creation_time": "2013-09-16T08:30:03Z", "is_private": false, "attachment_id": 30846}, {"count": 10, "tags": [], "bug_id": 55475, "attachment_id": 30847, "text": "Created attachment 30847\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (trunk)\n\nSame fix for trunk/2.2.x, plus the HTTP_GATEWAY_TIME_OUT handling in ap_http_outerror_filter (ap_http_chunk_filter likewise) or the client connection won't be closed (when asked to keep alive).\n\nMaybe the HTTP_GATEWAY_TIME_OUT handling in ap_http_outerror_filter and ap_http_chunk_filter should be in a separate patch since it is something broken by r1480058 (and still debated here: http://mail-archives.apache.org/mod_mbox/httpd-dev/201305.mbox/%3c518A0304.9050707@apache.org%3e)", "id": 170117, "time": "2013-09-16T12:37:00Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-16T12:37:00Z", "is_private": false}, {"count": 11, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30848\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (trunk)\n\nThe trunk patch split in 2 (second one coming next...).", "id": 170118, "time": "2013-09-16T13:03:04Z", "bug_id": 55475, "creation_time": "2013-09-16T13:03:04Z", "is_private": false, "attachment_id": 30848}, {"count": 12, "tags": [], "bug_id": 55475, "attachment_id": 30849, "text": "Created attachment 30849\nHandle 504 like 502 in http error/chunk output filters (trunk)\n\nFix 502=>504 side-effect from r1480058.", "id": 170119, "time": "2013-09-16T13:06:31Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-16T13:06:31Z", "is_private": false}, {"count": 13, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 30850, "id": 170120, "time": "2013-09-16T13:09:13Z", "bug_id": 55475, "creation_time": "2013-09-16T13:09:13Z", "is_private": false, "text": "Created attachment 30850\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (2.4.x)\n\nFinally the one for 2.4.x (same as 2.2.x, without conflicts)."}, {"count": 14, "attachment_id": null, "bug_id": 55475, "is_private": false, "id": 170134, "time": "2013-09-17T02:34:37Z", "creator": "hannes@ucsc.edu", "creation_time": "2013-09-17T02:34:37Z", "tags": [], "text": "Brilliant work.\n\nI tested the two error cases (1: incomplete chunk and 2: zero-length chunk missing) with the patches for 2.2.x, 2.4.x and trunk.\n\n2.2.x and 2.4.x work great. Trunk still has a non-determinism if the zero-length chunk is missing at the end. About one in 10 requests unexpectedly succeeds."}, {"count": 15, "attachment_id": 30852, "bug_id": 55475, "is_private": false, "id": 170135, "time": "2013-09-17T11:43:44Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-17T11:43:44Z", "tags": [], "text": "Created attachment 30852\nDon't return success and an empty brigade in core_input_filter's getline (trunk)\n\nWow, in fact the core_output_filter returns SUCCESS with an empty brigade in GETLINE mode when the socket is closed, and so does the http input filter...\n\nMy understanding of apache is/was that it should never happen (although sanity checks protect this case in several places).\n\nAnyway, the fix has to be in the core input filter (the attached patch), or in the http's one.\n\nMy guess is that the first option is better (all the filters should benefit from that, if not broken by :p ).\n\nOtherwise, the http filter's patch follows."}, {"count": 16, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30853\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (trunk)\n\nThe patch to apply for the second option (if the core's patch is not applied).\n\nFor (non-)deteminism, it depends on whether the backend connection is closed just after the last chunk is received or later.\n\nIf you add a little delay in your python script before closing the connection you should reproduce in any case (without the patch of course).\n\nPersonnaly I use netcat as server like :\n$ nc -l -p 20580 <<EOF\nHTTP/1.1 200 OK\nDate: Sun, 15 Sep 2013 06:36:16 GMT\nTransfer-Encoding: chunked\nContent-Type: text/xml\nServer: TornadoServer/3.1\n\na\n1234567890\nEOF\n\nor, in the middle of a chunk :\n$ nc -l -p 20580 <<EOF\nHTTP/1.1 200 OK\nDate: Sun, 15 Sep 2013 06:36:16 GMT\nTransfer-Encoding: chunked\nContent-Type: text/xml\nServer: TornadoServer/3.1\n\n100\nfoo\nEOF\n\nTo close the connection immediatly I hit Ctrl-C, while the nc's -q0 arg does the job to close the connection immediatly.", "id": 170136, "time": "2013-09-17T12:02:18Z", "bug_id": 55475, "creation_time": "2013-09-17T12:02:18Z", "is_private": false, "attachment_id": 30853}, {"count": 17, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 170137, "time": "2013-09-17T12:04:52Z", "bug_id": 55475, "creation_time": "2013-09-17T12:04:52Z", "is_private": false, "text": "> To close the connection immediatly I hit Ctrl-C, while the nc's -q0 arg does\n> the job to close the connection immediatly.\n\nWell, rather Ctrl-C to close the connection later, and -q0 immediatly :)"}, {"count": 18, "tags": [], "text": "Just to be precise, the tests (truncated chunked/content-length body) should be OK with attachment 30853 alone or plus attachment 30852, the latter alone won't fix the http filter returning APR_EOF instead of APR_ECONNABORTED.\n\nTo make both patches work together, I use the AP_CORE_INPUT_FILTER_GETLINE_EOF macro (defaulting to 1), but this just to show the diffs between the 2 options, and won't be needed in a final patch if one or another (or no) option is choosen.\n\nAny though about this apache team ?\nI suppose the core input filter is something that hasn't been changed since a while, a surely lot of things depend on its behaviour, is it an option to fix that here or each code using AP_GETLINE_MODE should be aware of EOF returned as SUCCESS with an empty brigade (and do a non-blocking AP_MODE_SPECULATIVE to be sure) ?", "attachment_id": null, "id": 170139, "creation_time": "2013-09-17T12:26:55Z", "time": "2013-09-17T12:26:55Z", "creator": "ylavic.dev@gmail.com", "bug_id": 55475, "is_private": false}, {"count": 19, "attachment_id": 30855, "bug_id": 55475, "is_private": false, "id": 170148, "time": "2013-09-18T08:06:10Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-18T08:06:10Z", "tags": [], "text": "Created attachment 30855\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (trunk)\n\nA simpler patch for trunk: when the brigade is empty in GETLINE/BLOCKing mode, \"come around again\"."}, {"count": 20, "tags": [], "bug_id": 55475, "attachment_id": 30856, "text": "Created attachment 30856\nDon't return success and an empty brigade in core_input_filter's getline/blocking mode (trunk)\n\nThe core input filter in GETLINE/NON_BCLOCKing mode should still return SUCCESS with an empty brigade to preserve the existing logic.", "id": 170149, "time": "2013-09-18T08:27:15Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-09-18T08:27:15Z", "is_private": false}, {"count": 21, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30857\nDon't return success and an empty brigade in core_input_filter's getline (trunk)\n\nThis one is more safe from stray photons.", "id": 170150, "time": "2013-09-18T08:32:17Z", "bug_id": 55475, "creation_time": "2013-09-18T08:32:17Z", "is_private": false, "attachment_id": 30857}, {"count": 22, "tags": [], "text": "Created attachment 30858\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (trunk)\n\nDon't raise an error for EOF in chunks trailers.", "is_private": false, "id": 170153, "creation_time": "2013-09-18T11:26:51Z", "time": "2013-09-18T11:26:51Z", "creator": "ylavic.dev@gmail.com", "bug_id": 55475, "attachment_id": 30858}, {"count": 23, "tags": [], "text": "Thanks for your work, but I lost a little bit of track :-). Which of the above patches do you currently propose? The last two ones for trunk (from Sept 18th)?", "attachment_id": null, "id": 170158, "creation_time": "2013-09-18T15:18:57Z", "time": "2013-09-18T15:18:57Z", "creator": "rpluem@apache.org", "bug_id": 55475, "is_private": false}, {"count": 24, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Yes, sorry, all this is a bit confusing, let me summarize.\n\nThe attachment 30858 alone is enough to solve the current issue, since it will :\n1. return APR_ECONNABORTED (instead of APR_EOF) when the body is not complete so that mod_proxy_http handles an error (APR_EOF can't be handled as an error in mod_proxy_http because it can be a legitimate end of a closed/streamed response),\n2. retry the ap_get_brigade(AP_MODE_GETLINE, APR_BLOCK_READ) when reading the chunks even if it gets an empty brigade,\n3. catch GATEWAY_TIMED_OUT like BAD_GATEWAY in ap_http_outerror_filter and ap_http_chunk_filter to handle the error bucket from mod_proxy_http.\n\nFor 1. I first used APR_INCOMPLETE instead of APR_ECONNABORTED, but because of the weird associated error string (\"Partial results are valid but processing is incomplete\"), I changed to the latter. I'm not sure it is a good idea since APR_ECONNABORTED can be returned from the socket, and now there will be no way to distinguish...\n\nThe 2. is needed because ap_core_input_filter returns SUCCESS with an empty brigade in getline+blocking modes when the connection is closed (immediatly). As this seems odd to me, I proposed attachment 30857 to fix the problem at the base so other filters than ap_http_filter don't have to handle this case.\n\nFinally 3. is an issue which must be resolved to address this bug but surely others (and the debate in dev@ is not really closed...), hence I proposed the separate attachment 30849, and finally put it in 3. (forgot about it), let me know if you want me to pull it out of attachment 30858, depending on how you'd likely commit all that (as a whole or separately).", "id": 170159, "time": "2013-09-18T20:27:55Z", "bug_id": 55475, "creation_time": "2013-09-18T20:27:55Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "bug_id": 55475, "attachment_id": 30893, "text": "Created attachment 30893\nDetect incomplete body in HTTP input filter and return APR_ECONNABORTED (2.2.15+RHEL6 patches)\n\nJust for the record, I'm attaching a version of Yann's 2.2.x patch, backported to a 2.2.15 source tree with RHEL's long list of patches applied to it.", "id": 170332, "time": "2013-09-28T00:56:40Z", "creator": "hannes@ucsc.edu", "creation_time": "2013-09-28T00:56:40Z", "is_private": false}, {"count": 26, "tags": [], "text": "I noticed that there was some discussion on the mailing list. But that didn't seem go anywhere. What are the next steps to get this committed? Anything needed from me?", "attachment_id": null, "id": 170626, "creation_time": "2013-10-16T00:06:14Z", "time": "2013-10-16T00:06:14Z", "creator": "hannes@ucsc.edu", "bug_id": 55475, "is_private": false}, {"count": 27, "tags": [], "bug_id": 55475, "attachment_id": null, "text": "Yann, Thx for the patches... Ideally, the issue around attachment #2 should be a sep item and discussed on dev@\n\nBut the main patch looks good.", "id": 171035, "time": "2013-11-04T20:56:31Z", "creator": "jim@apache.org", "creation_time": "2013-11-04T20:56:31Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 55475, "attachment_id": null, "text": "Fixed in 2.4.8.", "id": 174263, "time": "2014-04-03T23:22:18Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2014-04-03T23:22:18Z", "is_private": false}, {"count": 29, "attachment_id": null, "bug_id": 55475, "is_private": false, "id": 174295, "time": "2014-04-05T02:14:12Z", "creator": "hannes@ucsc.edu", "creation_time": "2014-04-05T02:14:12Z", "tags": [], "text": "This great. Thanks so much, Yann.\n\nWill this also be applied to the 2.2.x branch?"}, {"count": 30, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 176405, "time": "2014-07-15T14:11:40Z", "bug_id": 55475, "creation_time": "2014-07-15T14:11:40Z", "is_private": false, "text": "(In reply to Hannes Schmidt from comment #29)\n> Will this also be applied to the 2.2.x branch?\n\nBackport to 2.2.x proposed.\nWill update here if/when approved."}, {"count": 31, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "id": 177313, "time": "2014-08-22T12:07:18Z", "bug_id": 55475, "creation_time": "2014-08-22T12:07:18Z", "is_private": false, "text": "Backported in upcoming 2.2.28."}]
[{"count": 0, "tags": [], "bug_id": 51483, "text": "The XSSFSheet class has methods to lock only specific features on that sheet, such as column or row deletion. However, these don't appear to work in isolation -- either *everything* is locked, or nothing is. If I execute:\n\n\t\tXSSFWorkbook wb = new XSSFWorkbook();\n\t\tXSSFSheet s = wb.createSheet(\"Locking\");\n\t\ts.lockDeleteColumns();\n\t\ts.enableLocking();\n\t\twb.lockStructure();\n\t\tsave(wb, \"locking.xlsx\");\n\nThen I would expect a worksheet that allows all changes except column deletion. However, the result is a completely locked-down worksheet, similar to what I would get with a \"protectSheet()\" call. If I comment out the \"s.enableLocking()\" line, then *all* changes are permitted.", "id": 147793, "time": "2011-07-06T13:52:00Z", "creator": "Alex.Panayotopoulos@vianet.co.uk", "creation_time": "2011-07-06T13:52:00Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 51483, "text": "N.B. I have discovered a work-around, and that is to follow the call to s.enableLocking() with a call to s.getCTWorksheet().getSheetProtection(); this yields a CTSheetProtection object. CTSheetProtection is not documented in the official JavaDoc API, but has methods\n\nsetSelectLockedCells(boolean);\nsetSelectUnlockedCells(boolean);\nsetFormatCells(boolean);\nsetFormatColumns(boolean);\nsetFormatRows(boolean);\nsetInsertColumns(boolean);\nsetInsertRows(boolean);\nsetInsertHyperlinks(boolean);\nsetDeleteColumns(boolean);\nsetDeleteRows(boolean);\nsetSort(boolean);\nsetAutoFilter(boolean);\nsetPivotTables(boolean);\nsetObjects(boolean);\nsetScenarios(boolean);\n\nAll of which take \"true\" to enable locking of this aspect, and \"false\" to disable locking.\n\nHope this comes in handy for anybody who stumbles across this issue!", "id": 147808, "time": "2011-07-07T07:55:14Z", "creator": "Alex.Panayotopoulos@vianet.co.uk", "creation_time": "2011-07-07T07:55:14Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 51483, "attachment_id": null, "is_private": false, "id": 172092, "time": "2014-01-05T21:48:10Z", "creator": "Da_Groovy@gmx.de", "creation_time": "2014-01-05T21:48:10Z", "text": "I compared 2 files at xml level. It seems the \"lock state\" is activated by default for all possible settings:\n\n* sheet.lockDeleteColumns();\n* sheet.lockDeleteRows();\n* sheet.lockFormatCells();\n* sheet.lockFormatColumns();\n* sheet.lockFormatRows();\n* sheet.lockInsertColumns();\n* sheet.lockInsertHyperlinks();\n* sheet.lockInsertRows();\n* sheet.lockObjects();\n* sheet.lockPivotTables();\n* sheet.lockScenarios();\n* sheet.lockSelectLockedCells();\n* sheet.lockSelectUnlockedCells();\n* sheet.lockSort();\n\nThat means calling \"enableLocking()\" automatically enables nearly all locks. Setting one of the locks above is quite useless because it already is locked by default. What we need here is an \"unlock\" option. In the following example nearly everything is locked. The only options allowed are selecting unlocked fields and inserting new rows.\n\nPOI export file:\n\n  <sheetProtection\n     sheet=\"true\"\n     objects=\"true\"\n     scenarios=\"true\"\n     deleteColumns=\"true\"\n     deleteRows=\"true\"\n     formatColumns=\"true\"\n     formatRows=\"true\"\n     insertColumns=\"true\"\n     insertHyperlinks=\"true\"\n     pivotTables=\"true\"\n     selectLockedCells=\"true\"\n     sort=\"true\"\n     password=\"\"\n  />\n\n\nExcel export file with same settings:\n\n  <sheetProtection\n     sheet=\"1\"\n     objects=\"1\"\n     scenarios=\"1\"\n     insertRows=\"0\"\n     selectLockedCells=\"1\"\n     password=\"\"\n  />\n\nUsing \"true\"/\"false\" instead of \"1\"/\"0\" doesn't matter here, means the same and seems to be interpreted both.\nIn POI export \"insertRows\" lock has not been set and was therefore assumed to be unlocked but it wasn't, inserting rows wasn't possible.\nManually changing the file by adding  insertRows=\"false\"  makes the clue. It worked as assumed.\n\nMaybe there are 3 possibilities:\n\n1. developer can set \"lock\" only (same as current)\n  --> internally all other settings must be set to \"unlock\" (false or 0)\n2. replace sheet methods \"lock...\" with \"unlock...\" because all locks are activated by default, the opposite must be defined\n3. developer can set \"unlock\" for each setting as well as \"lock\"\n  --> would be a more intuitive handling as it would lead to something like this in code:\n\n  sheet.lockDeleteColumns();\n  sheet.lockDeleteRows();\n  sheet.lockFormatCells();\n  sheet.lockFormatColumns();\n  sheet.lockFormatRows();\n  sheet.lockInsertColumns();\n  sheet.lockInsertHyperlinks();\n  sheet.unlockInsertRows();\n  sheet.lockObjects();\n  sheet.lockPivotTables();\n  sheet.lockScenarios();\n  sheet.lockSelectLockedCells();\n  sheet.unlockSelectUnlockedCells();\n  sheet.lockSort();"}, {"count": 3, "attachment_id": null, "bug_id": 51483, "text": "Try this. It worked for me:\n\nXSSFWorkbook wb = new XSSFWorkbook();\nXSSFSheet s = wb.createSheet(\"Locking\");\ns.protectSheet(\"a password\");\ns.getCTWorkSheet().getSheetProtection().setDeleteColumns(false);\nsave(wb, \"locking.xlsx\");", "id": 176636, "time": "2014-07-23T20:45:54Z", "creator": "mramirez@mountfranklinfoods.com", "creation_time": "2014-07-23T20:45:54Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 51483, "attachment_id": null, "is_private": false, "id": 177443, "time": "2014-08-29T16:26:53Z", "creator": "jmason@sciquest.com", "creation_time": "2014-08-29T16:26:53Z", "text": "To add an additional wrinkle, it appears that the lockStructure(), lockRevision, and lockWindows methods at the workbook level do not take password parameters although passwords are supported for this functionality within Excel itself.\n\nSo sheet level password protection is ok as Michael R states, but workbook level password protection is still unsupported as far as I can tell (unless someone smarter than I am has a trick to share).\n\nIn bug 56076 document protection with password support has been added to XWPF as of 3.11 beta. I'm hoping for workbook level password protection, specifically for lockStructure, in XSSF as well."}, {"count": 5, "tags": [], "bug_id": 51483, "text": "(In reply to JMason from comment #4)\n> To add an additional wrinkle, it appears that the lockStructure(),\n> lockRevision, and lockWindows methods at the workbook level do not take\n> password parameters although passwords are supported for this functionality\n> within Excel itself.\n> \n> So sheet level password protection is ok as Michael R states, but workbook\n> level password protection is still unsupported as far as I can tell (unless\n> someone smarter than I am has a trick to share).\n> \n> In bug 56076 document protection with password support has been added to\n> XWPF as of 3.11 beta. I'm hoping for workbook level password protection,\n> specifically for lockStructure, in XSSF as well.\n\nI should probably state I'm in 3.9 Final", "id": 177444, "time": "2014-08-29T16:27:40Z", "creator": "jmason@sciquest.com", "creation_time": "2014-08-29T16:27:40Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 51483, "attachment_id": null, "is_private": false, "id": 177547, "time": "2014-09-04T22:55:06Z", "creator": "kiwiwings@apache.org", "creation_time": "2014-09-04T22:55:06Z", "text": "Patched this with r1622577\nAlso added some password routines"}]
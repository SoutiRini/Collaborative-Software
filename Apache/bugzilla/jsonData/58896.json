[{"count": 0, "tags": [], "text": "So, it goes without saying that a lot of people have complained about the performance of autoSizeColumn(). I followed all the online advise about only invoking this method once per column once the worksheet is fully populated, but it is still extremely slow (30 seconds in POI, 1 second using the Excel GUI).\n\nThe worksheet I am formatting has 139 columns and 160 rows.\n\nIs there an existing task for optimizing this function? Has anyone taken a profiler to it and investigated if there are is any low-hanging fruit?", "attachment_id": null, "bug_id": 58896, "id": 187844, "time": "2016-01-20T04:12:38Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2016-01-20T04:12:38Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58896, "attachment_id": null, "id": 187846, "time": "2016-01-20T05:11:44Z", "creator": "onealj@apache.org", "creation_time": "2016-01-20T05:11:44Z", "is_private": false, "text": "I've looked through the code 6 months back because I had the same observation.\n\nMy conclusion was that nothing stood out as wastefully inefficient. The contents of every cell (formulas evaluated as necessary) in a column was rendered in RichText, and a minimum bounding box around the RichText was calculated. This was done exactly once per non-blank cell in the column.\n\nTo make this faster, while auto-sizing a column, we could cache cells with the same value and formatting to avoid re-calculating the RichText box, but this comes at the cost of memory and a slight performance hit when the majority of cell values in a column are unique. Alternatively, the workbook could cache the column widths when cell values are modified, which would result in a net increase in memory consumption and time, and changing any formula would invalidate the calculated column widths. Excel could get away with the latter approach since the marginal cost to auto-sizing one cell is negligible when using a GUI. However, I don't know if this is what Excel does.\n\nFeel free to step through the autosize code yourself to see if you can find something I couldn't. More eyes are better."}, {"count": 2, "tags": [], "text": "Analysis showed no apparent general suitable way to increase performance significantly without incurring higher memory requirements (which we would like to avoid).\n\nAs your case seems odd with a very high runtime with only few rows/columns (in other places we do autosizing on tens of thousands of rows without much delay), so it would be good if you can do some profiling to find which parts of the code are causing this.\n\nAlternatively please attach both a sample file and sample code to reproduce the problem so somebody else can look at your specific code.", "attachment_id": null, "bug_id": 58896, "id": 188382, "time": "2016-02-12T07:43:01Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-02-12T07:43:01Z", "is_private": false}, {"count": 3, "tags": [], "text": "To test out the times, I wrote a unit test (r1730997) that creates a file with the following contents:\n160 rows, 139 columns, with the content of each cell as \"Cell[r=159, c=138]\" using the workbook default style. The time required to calculate the best fit width is a function of the number of characters and number of styles/fonts. Likely due to the JVM's JIT compiler, the time spent calculating the best fit width for each column decreased over time. With the simplicity of this test, this is obviously a best case scenario for auto-sizing (hence the reason I didn't get 30 seconds). I have personally seen the 30 second turtle pace described by Gili with more complicated spreadsheets (numbers, number formatting, styles)\n\n                              [1]    [2]    [3]\n                             HSSF   XSSF   SXSSF\n            Populate sheet:  21ms  344ms    9ms\n     Autosize first column:  36ms    4ms   10ms\nAutosize first ten columns: 217ms   39ms   84ms\n      Autosize all columns: 776ms  447ms  674ms\n Total (populate+autosize): 797ms  791ms  683ms\n\nThere isn't a significant difference in the amount of time required to auto-size columns for each spreadsheet implementation.\n\n[1] http://pasted.co/af5f61a5\n[2] http://pasted.co/5e0cd6700\n[3] http://pasted.co/41a51c4e", "is_private": false, "id": 188550, "creator": "onealj@apache.org", "time": "2016-02-18T03:40:52Z", "bug_id": 58896, "creation_time": "2016-02-18T03:40:52Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "cowwoc@bbs.darktech.org", "is_private": false, "id": 189173, "creation_time": "2016-03-06T15:10:44Z", "time": "2016-03-06T15:10:44Z", "bug_id": 58896, "text": "Created attachment 33635\nInput file for testcase", "attachment_id": 33635}, {"count": 5, "tags": [], "text": "Created attachment 33636\nTestcase", "is_private": false, "id": 189174, "creator": "cowwoc@bbs.darktech.org", "time": "2016-03-06T15:12:40Z", "bug_id": 58896, "creation_time": "2016-03-06T15:12:40Z", "attachment_id": 33636}, {"count": 6, "tags": [], "bug_id": 58896, "attachment_id": null, "is_private": false, "id": 189175, "time": "2016-03-06T15:14:05Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2016-03-06T15:14:05Z", "text": "I've attached a testcase for your consideration. On my machine, auto-sizing columns takes 2 minutes, 12 seconds, 489 milliseconds.\n\nPlease let me know if you can reproduce the problem on your end."}, {"count": 7, "tags": [], "text": "Javen and Dominik,\n\nHave you tried running the testcase I attached? I'm wondering if it revealed anything interesting...", "is_private": false, "id": 189617, "creator": "cowwoc@bbs.darktech.org", "time": "2016-03-21T17:59:58Z", "bug_id": 58896, "creation_time": "2016-03-21T17:59:58Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "Your input file has a few things beyond my unit test from comment 3:\n1) Rich Text Formatting (bold, color)\n2) Number formatting ($128,000)\n3) Merged cells (Description)\n\nHow much do each of these contribute to the 132.5 seconds? Could you time your auto-size code from comment 5 using an Excel file with:\nA) no formatting\nB) 1+2+3 formatting\nC) 1, 2, and 3 formatting, separately, if A and B are different\n\nAs a side-note: if you are using POI to auto-size a file similar to attachment 33635 and you know the workbook structure, you could either manually determine ideal column widths and use POI to explicitly set the widths, or have POI calculate the best-fit width of the first group of columns, then apply those widths to all of the columns. This obviously doesn't work when the content is less structured or there are longer strings.\n\nAndi suggested that some people could get away with an approximate solution:\n> cell width = length(cell value expressed as a string) * width of a typical character in the cell's font.\nIf we wanted to make this work for mixed-font (RichText) cells, perform the same computation on each run of characters that have the same font size and font name. A cheaper version is to assume all fonts have the same character widths.\n> cell width = sum of [(font size)*(average character width at 1pt font size)*(number of characters in a same-size font run)] for each font run.", "attachment_id": null, "bug_id": 58896, "id": 189625, "time": "2016-03-22T05:29:40Z", "creator": "onealj@apache.org", "creation_time": "2016-03-22T05:29:40Z", "is_private": false}, {"count": 9, "tags": [], "text": "Javen,\n\nYou hit the nail on the head. Cell formatting has no effect on autoSizeColumn() but merged cells do.\n\nIt doesn't matter whether I invoke autoSizeColumn() with useMergedCells set to true or false, the performance problem occurs either way. However, if I un-merge all cells in the worksheet before invoking autoSizeColumn() the performance problem disappears.\n\nHow do we proceed from here?", "attachment_id": null, "bug_id": 58896, "id": 189756, "time": "2016-03-28T13:12:15Z", "creator": "cowwoc@bbs.darktech.org", "creation_time": "2016-03-28T13:12:15Z", "is_private": false}, {"count": 10, "tags": [], "text": "I wonder how many times the best-fit width of a cell is being calculated in a merged cell. If more than once per cell, can we cache those calculations or rewrite the code so unnecessary work isn't performed?\nAre we checking if the cell is blank before proceeding to calculate the best-fit width?\nDoes useMergedCells=False/True make a difference on speed?", "attachment_id": null, "bug_id": 58896, "id": 191725, "time": "2016-06-17T06:28:51Z", "creator": "onealj@apache.org", "creation_time": "2016-06-17T06:28:51Z", "is_private": false}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "is_private": false, "text": "Probably the same bug as bug 52834", "id": 191726, "time": "2016-06-17T06:30:29Z", "bug_id": 58896, "creation_time": "2016-06-17T06:30:29Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58896, "is_private": false, "count": 12, "id": 193058, "time": "2016-08-12T06:38:50Z", "creator": "axel@dua3.com", "creation_time": "2016-08-12T06:38:50Z", "text": "I remember observing very bad performance in handling merged cells starting in POI 3.14(?). IIRC it was not only with autoSizeColumn(), but whenever trying to query merged regions of a sheet. It could even be that it was just getNbOfMergedRegions() in XSSF that was so horribly slow. I coded around this issue.\n\nMaybe I will dig into this again when I find the time."}]
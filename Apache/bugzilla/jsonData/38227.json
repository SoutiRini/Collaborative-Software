[{"count": 0, "tags": [], "text": "I had to change from using worker MPM to prefork to avoid connection loss with\nthe AJP proxy code. I'm using httpd 2.2.0 and tomcat 5.5.12. I get these errors\nin the apache httpd error log:\n\n[Wed Jan 11 11:20:33 2006] [error] (70007)The timeout specified has expired:\najp_ilink_receive() can't receive header\n[Wed Jan 11 11:20:33 2006] [error] ajp_read_header: ajp_ilink_receive failed\n[Wed Jan 11 11:20:33 2006] [error] (120006)APR does not understand this error\ncode: proxy: read response failed from (null) (127.0.0.1)\n\nThese 3 lines repeat numerous times, and it does not seem to reconnect to tomcat\nuntil reloaded. Changing to prefork appears to eliminate these errors.\n\nThis situation occurs after less than an hour of load testing, and is fairly\nconsistent. With the MPM changed over to prefork, the error has not been seen\nover much longer test periods under the same load.\n\nThe configuration is an apache httpd doing a ProxyPass to a tomcat running on\nthe same box. If it matters, the httpd is also using mod_ssl and these requests\nare coming in over https.\n\nThis is a locally compiled build of 2.2.0, with the only changed code being the\npatch that can be found in bug 29744.", "attachment_id": null, "id": 84484, "creator": "brad_boyer@symantec.com", "time": "2006-01-11T20:44:12Z", "bug_id": 38227, "creation_time": "2006-01-11T20:44:12Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 38227, "attachment_id": null, "id": 84491, "time": "2006-01-11T22:26:19Z", "creator": "rpluem@apache.org", "creation_time": "2006-01-11T22:26:19Z", "is_private": false, "text": "In order to make it reconnect please add retry=1 to your ProxyPass directive\n(see also parameter retry at\nhttp://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass)\nHave you checked for the Tomcat logs? The first error seems to indicate that\nTomcat is not responding any longer\n"}, {"count": 2, "attachment_id": null, "creator": "malcolm@secpay.com", "text": "I have experienced the same bug, the problem also seem to cause the tomcat\nserver (5.0.28) to run out of threads, I assume the problem is also causing the\najp threads not to be closed, so I assume using a retry will not help.\nYet to confirm whether using prefork instead of worker fixes the problem, but\nI'll try this and add this to the bug report.\n\najp_read_header: ajp_ilink_receive failed\n(120006)APR does not understand this error code: proxy: read response failed\nfrom (null) (<ip_addr_here>)\nThen later \nproxy: AJP: failed to make connection to backend: <ip_addr_here>\n(110)Connection timed out: proxy: AJP: attempt to connect to <ip_addr_here>:8009\n(<ip_addr_here>) failed\n\nIt looks like tomcat can recover if it is under light load and the threads\ntimeout, but when the load increases tomcat dies as all the threads get used up\n\n", "id": 86018, "time": "2006-02-21T16:57:33Z", "bug_id": 38227, "creation_time": "2006-02-21T16:57:33Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 38227, "attachment_id": null, "id": 86046, "time": "2006-02-21T22:36:09Z", "creator": "rpluem@apache.org", "creation_time": "2006-02-21T22:36:09Z", "is_private": false, "text": "Maybe PR#36495 is a similar bug. Could you please provide your proxy config?"}, {"count": 4, "tags": [], "creator": "brad_boyer@symantec.com", "attachment_id": null, "text": "The config in bug 36495 is very similar to my original situation. Apache httpd\n2.2 and tomcat runnnig together on a single Linux box with the config on httpd\nusing ProxyPass to redirect to 127.0.0.1:8009. The messages once the poster\nmoved to 2.2 are basically the same.\n\nHere's the proxy config I have (with some URL segments changed to xxx):\n\n    ProxyRequests off\n    <Proxy *>\n        Order allow,deny\n        Deny from all\n    </Proxy>\n    <Proxy ajp://127.0.0.1:8009/*>\n        Order deny,allow\n        Allow from all\n    </Proxy>\n    ProxyPass /xxx ajp://127.0.0.1:8009/xxx", "id": 86060, "time": "2006-02-22T00:47:46Z", "bug_id": 38227, "creation_time": "2006-02-22T00:47:46Z", "is_private": false}, {"count": 5, "tags": [], "creator": "malcolm@secpay.com", "text": "After further testing this appears to be a problem with a misconfigured tomcat,\nthe ajp connector behaves differently in worker mode than prefork and requires a\nlarger number of tomcat ajp threads. Tested this under extreemly heavy load and\nall seems to work ok with no problems.\nThis is all documented in the connector docs, I guess I should have picked this\nup earlier.", "id": 86247, "time": "2006-02-27T13:00:26Z", "bug_id": 38227, "creation_time": "2006-02-27T13:00:26Z", "is_private": false, "attachment_id": null}, {"count": 6, "text": "Thanks for feedback. Could you please add the link to the connector docs where\nyou found the information that solved your problem?", "creator": "rpluem@apache.org", "attachment_id": null, "id": 86248, "time": "2006-02-27T13:49:18Z", "bug_id": 38227, "creation_time": "2006-02-27T13:49:18Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "malcolm@secpay.com", "attachment_id": null, "id": 86328, "time": "2006-03-01T11:11:57Z", "bug_id": 38227, "creation_time": "2006-03-01T11:11:57Z", "is_private": false, "text": "Fixing the tomcat configuration did help, but it still appears that we are\nhaving the same problem where tomcat will run out of threads using ajp mod_proxy\nin worker mode.\nWe cannot reproduce this problem in testing, only on the live systems.\nNo real errors from apache except this, by which point tomcat has run out of\nthreads, which I assume why this error appears.\n[error] (70007)The timeout specified has expired: ajp_ilink_receive() can't\nreceive header\n\nWe also get this error in prefork mode, but it does not seem to cause tomcat to die"}, {"count": 8, "tags": [], "text": "I'm seeing similar errors. \n\nThe setup is Apache 2.2.0 with mod_proxy_ajp and Tomcat 5.0.27. I tried\nRewriteRules with [P] first, then switched to ProxyPass - same result.\n\nThis is the log of the virtual host: (Servernames replaced by $MYSERVER, IPs\nreplaced by $LOCALIP)\n==> httpd_error_log <==\n[Thu Mar 23 16:23:09 2006] [error] ajp_read_header: ajp_ilink_receive failed\n[Thu Mar 23 16:23:09 2006] [error] (120006)APR does not understand this error\ncode: proxy: read response failed from (null) (localhost)\n                                                                               \n                                                                               \n                    \nThis is the global apache log:\n==> /opt/httpd/logs/error_log <==\n[Thu Mar 23 16:23:09 2006] [error] [client $LOCALIP] proxy: error reading status\nline from remote server $MYSERVER referer: $REFERER\n[Thu Mar 23 16:23:09 2006] [error] [client $LOCALIP] proxy: Error reading from\nremote server returned by $URL, referer: $REFERER\n[Thu Mar 23 16:23:09 2006] [error] (70007)The timeout specified has expired:\najp_ilink_receive() can't receive header\n\n\nNothing fancy shows up in catalina.out or Tomcat logs, just a lot of\n\nMar 23, 2006 4:24:40 PM org.apache.jk.common.ChannelSocket processConnection\nINFO: connection timeout reached\n\nbut they seem normal and occur all the time.\n\nI do _not_ see this behaviour under heavy load, I see it almost instantly.\n\nThings get worse: Connections from Apache to Tomcat stay open:\n\n[root@server root]# netstat -tn|sed -n -e '1,2p;/8059/p'\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        1      0 127.0.0.1:46802         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46814         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46790         127.0.0.1:8059          CLOSE_WAIT\ntcp        0      0 127.0.0.1:46826         127.0.0.1:8059          ESTABLISHED\ntcp        1      0 127.0.0.1:46729         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46777         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46753         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46765         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46697         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46604         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46636         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46544         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46551         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46518         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46505         127.0.0.1:8059          CLOSE_WAIT\ntcp        1      0 127.0.0.1:46414         127.0.0.1:8059          CLOSE_WAIT\ntcp      794      0 127.0.0.1:8059          127.0.0.1:46328         CLOSE_WAIT\ntcp        0      0 127.0.0.1:8059          127.0.0.1:46826         ESTABLISHED\n\nThere are times when no ESTABLISHED connection is available - it seems to take\nquite long for tomcat to recover. Not that the Recv-Q has data in it!\n\nserver.xml snippet:\n\n    <Connector protocol=\"AJP/1.3\"\n               address=\"127.0.0.1\"\n               port=\"8059\"\n               minProcessors=\"10\"\n               maxProcessors=\"250\"\n               maxPostSize=\"0\"\n               enableLookups=\"false\"\n               useBodyEncodingForURI=\"true\"\n               acceptCount=\"25\"\n               debug=\"0\"\n               redirectPort=\"\"\n               connectionTimeout=\"60000\"\n    />\n\n(Yes, there are probably some superfluous settings there).\n\nI do not see an increase in thread count or apache child count (using prefork MPM).", "attachment_id": null, "id": 87155, "creator": "apache.org@tisc.de", "time": "2006-03-23T16:51:44Z", "bug_id": 38227, "creation_time": "2006-03-23T16:51:44Z", "is_private": false}, {"count": 9, "tags": [], "creator": "jim.robinson@stanford.edu", "attachment_id": 18031, "text": "Created attachment 18031\nDebugging output patch referenced comment #9.\n\nI believe I'm seeing the same problem with my build of Apache 2.2.0\nconnecting to an instance of Tomcat 5.5.10.\n\nTHE SETUP\n\nI'm running this on a dual cpu (Intel(R) Xeon(TM) CPU 2.80GHz) machine\nrunning Linux 2.4.21-15.ELsmp.\tApache server-info reveals:\n\n  -D APACHE_MPM_DIR=\"server/mpm/worker\"\n  -D APR_HAS_SENDFILE -D APR_HAS_MMAP\n  -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n  -D APR_USE_SYSVSEM_SERIALIZE\n  -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n  -D APR_HAS_OTHER_CHILD\n  -D AP_HAVE_RELIABLE_PIPED_LOGS\n  -D HTTPD_ROOT=\"/usr/local/apache/2.2.0\"\n  -D SUEXEC_BIN=\"/usr/local/apache/2.2.0/bin/suexec\"\n  -D DEFAULT_ERRORLOG=\"logs/error_log\"\n  -D AP_TYPES_CONFIG_FILE=\"conf/mime.types\"\n  -D SERVER_CONFIG_FILE=\"conf/httpd.conf\"\n\nI'm using mod_proxy to balance incoming requests to an Apache\nVirtualHost to a mounted Tomcat service via AJP.  I think I've\nincluded the important Apache configuration below:\n\n  <Proxy balancer://tomcat>\n    BalancerMember ajp://server.mydomain.org:8009 route=server.mydomain.org\n  </Proxy>\n\n  <VirtualHost vhost.mydomain.org:80>\n    RewriteEngine on\n    RewriteCond %{ENV:HTTPD_BASE}/logs/myapp.pause -f\n    RewriteRule .* - [forbidden,last]\n    RewriteRule ^(/+test(?:/.*)?)$ /myapp$1 [env=internal:yes]\n    RewriteCond %{ENV:internal} =yes\n    RewriteRule ^(/+myapp/.*) $1 [passthrough,last]\n    RewriteRule ^/+myapp/(.*) /$1 [redirect=permanent,last]\n\n    ProxyPass /myapp balancer://tomcat/myapp stickysession=JSESSIONID\nnofailover=on\n    ProxyPassReverse / http://vhost.mydomain.org/myapp/\n    ProxyPassReverseCookiePath /myapp/ /\n  </VirtualHost>\n\nMy Tomcat Connector in server.xml is straightforward:\n\n    <Connector\n\t     protocol=\"AJP/1.3\"\n\t      address=\"${catalina.hostname}\"\n\t\t port=\"8009\"\n\tenableLookups=\"false\"\t\t     />\n\nSo a user connects to\n\n  http://vhost.mydomain.org/test\n\nand then mod_proxy will forward the request via AJP to\n\n  http://server.mydomain.org:8009/myapp/test\n\nThe 'test' servlet is a simple one.  It computes a random number been\n0 and 1000, and sleeps for that many milliseconds, before printing a\none line response to the client.\n\n\nTHE PROBLEM\n\nUsing this stripped down configuration, what I see when I use ab(1) to\nload test the service, is that Tomcat is forced to keep creating new\nthreads to service incoming connections, and it leaves them in the\nKeepalive state after ab(1) has finished.  Tomcat also indicates it is\n*using* those threads (perhaps polling on them?)\n\nEvery time I make a new request via mod_proxy, a new Thread is started\nin Tomcat.  However, when I query Tomcat directly, I see a thread get\ncreated, the request gets serviced, and the thread is switch to the\nReady steady, indicating it is now able to to accept new requests.\n\nIf I run\n\n  netstat -t | egrep \"^tcp.*:8009\"\n\non the server, I see a constantly growing number of connections\nbetween Apache and Tomcat.  When I query Tomcat directly, I do not see\nthis growing pool of connections.\n\nThis lead me to believe the problem was mod_proxy keeping connections\nopen (perhaps the backend pooling code), but failing to either reuse\nthem, or perhaps failing to properly close them on cleanup.\n\n\nTHE DEBUGGING\n\n\nFirst, I added some debugging to proxy_util.c.\tI've attached it to\nthis comment.  Basically all I did was print out a stupid log message\nwhen it first initializes, and then each time a connections is\nacquired.\n\nNow, starting up Apache I see this in the log:\n\n[Wed Apr 05 21:09:35 2006] [error] 0: worker->hmax: 25, worker->cp->res: not\nnull\n[Wed Apr 05 21:09:35 2006] [debug] proxy_util.c(1666): proxy: initialized\nworker 0 in child 16610 for (server.mydomain.org) min=0 max=25 smax=25\n[Wed Apr 05 21:09:35 2006] [error] 0: worker->hmax: 25, worker->cp->res: not\nnull\n[Wed Apr 05 21:09:35 2006] [debug] proxy_util.c(1666): proxy: initialized\nworker 2 in child 16610 for (*) min=0 max=25 smax=25\n\nFor my test I first see if any connections exist to Tomcat (there\nshould not be any):\n\n ; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"\n\nAs I expect, no connections exist.  Next, on a different machine, I\nmake a single request to my virtual host:\n\n  ab -n 1  http://vhost.mydomain.org/test\n\nIt completes, and tells me it was successful.  I see a bunch of\ndebugging in the log indicating mod_proxy is working.  In the chatter,\nI see my own debugging lines:\n\n[Wed Apr 05 21:09:43 2006] [error] 1: worker->hmax: 0, worker->cp->res: not\nnull\n[Wed Apr 05 21:09:43 2006] [error] 2: called connection_constructor\n\nThis surprises me for two reasons.  First of all, I was expecting\nworker->hmax to be 25, not 0.  The second reason is that I expected to\nsee that worker->cp->res have a value, not to be null.\n\n[As an aside, subsequent testing showed that if I added 'max=25' to\nthe BalanceMember configuration directive, worker->hmax would be 25 in\nrequests; the null value for worker->cp->res did not change.]\n\nNow, I check on my server to see if any connections exist (I expect a\nconnection, due to the connection pooling):\n\n; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"\ntcp 0 0 server.mydomain.org:8009 server.mydomain.org:39642 ESTABLISHED\ntcp 0 0 server.mydomain.org:39642 server.mydomain.org:8009 ESTABLISHED\n\n\nNow, if I run a second request, I would have expected mod_proxy_ajp to\nreuse the existing connection.\tBut look what happens after I ran my\nab command a second time:\n\n[Wed Apr 05 21:09:46 2006] [error] 1: worker->hmax: 0, worker->cp->res: null\n[Wed Apr 05 21:09:46 2006] [error] 2: called connection_constructor\n\nAnd netstat shows two *new* connections, for a total of four:\n\n  ; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"\n  tcp 0 0 server.mydomain.org:8009 server.mydomain.org:39753 ESTABLISHED\n  tcp 0 0 server.mydomain.org:8009 server.mydomain.org:39642 ESTABLISHED\n  tcp 0 0 server.mydomain.org:39753 server.mydomain.org:8009 ESTABLISHED\n  tcp 0 0 server.mydomain.org:39642 server.mydomain.org:8009 ESTABLISHED\n\nI tried making a number of connections, and watched the connections\ngrow until it filled all available threads on my Tomcat container\n(which was set to the default maxThreads of 200).  First, I reset\neverything:\n\n  ; apachectl stop\n  ; catalina.sh stop\n\n  ; apachectl start\n  ; catalina.sh start\n\n  ; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"|wc -l\n\t0\n\nAnd then on my test client I make 200 connections:\n\n   ab -n 200 http://vhost.mydomain.org/test\n\nand then my server shows over 400 established connections:\n\n  ; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"|grep -c ESTABLISHED\n  466\n\nAck!\n\nIf I tweak the proxy code, setting one of these the 'close'\nflags to true:\n\n  conn->close_on_recycle = 1;\n  conn->close = 1;\n\nThen Apache cleans itself up, and Tomcat does not get overwhelmed.\n\nWhat I'm unable to determine so far is if this is a problem with\nmod_proxy(_(balance|ajp))?.c, a problem with Tomcat + Apache, a\nproblem with the APR utilities, etc.  :(\n\nAny insights from folks would be much appreciated!\n\nApologies for the long post...\n\n\nJim", "id": 87618, "time": "2006-04-06T06:03:26Z", "bug_id": 38227, "creation_time": "2006-04-06T06:03:26Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 38227, "text": "Thank you very much for your detailed post. I suspect a thing that has been\nfixed meanwhile. Could you please give\nhttp://httpd.apache.org/dev/dist/httpd-2.2.1.tar.gz a try? Keep in mind that\nthis is NO official release of httpd-2.2.1, but one that the developers are\ncurrently deciding on whether to release it or not. It is known that this\ntarball currently contains a bug that prevents using SSL backends with the\nproxy, but this does not harm your current problem. It would be very nice if you\ncould give it a try and let me know the results.\n\nAnother thing regarding your astonishments regarding the reusing of connections.\nKeep in mind that the pool limit is PER httpd process. So the maximum number of\nconnections is not what you set via max, but <max> * <maximum number of httpd\nprocesses>. You have not posted your MPM settings here, so if you allow httpd to\ncreate 8 processes, 200 connections to the backend are ok.\n\n> And netstat shows two *new* connections, for a total of four:\n> \n>  ; netstat -t | egrep \"^tcp.*:8009\" | tr -s \" \"\n>  tcp 0 0 server.mydomain.org:8009 server.mydomain.org:39753 ESTABLISHED\n>  tcp 0 0 server.mydomain.org:8009 server.mydomain.org:39642 ESTABLISHED\n>  tcp 0 0 server.mydomain.org:39753 server.mydomain.org:8009 ESTABLISHED\n>  tcp 0 0 server.mydomain.org:39642 server.mydomain.org:8009 ESTABLISHED\n\nActually there is only *one* more connection, but as httpd and Tomcat are\nrunning on the same server you see *both* ends of the tcp connection in netstat.\nIf you are running httpd and tomcat on the same server you have to divide your\nnetstat results by 2.", "id": 87619, "time": "2006-04-06T07:47:03Z", "creator": "rpluem@apache.org", "creation_time": "2006-04-06T07:47:03Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "creator": "jim.robinson@stanford.edu", "text": "(In reply to comment #10)\n> Thank you very much for your detailed post. I suspect a thing that has been\n> fixed meanwhile. Could you please give\n> http://httpd.apache.org/dev/dist/httpd-2.2.1.tar.gz a try?\n\nI certainly would be happy to!  I was about to post that I had added\nsome more debugging and discovered that mod_proxy was emitting\ninfo that it had initialized worker->id 0 and worked->id 2, but not\nworker->id 1, and that mod_proxy_ajp was being handed worker->id 1. Dunno\nif that was the problem being resolved in the fix. \n\nI will try 2.2.1 right now.  It'll take me a few minutes to compile and\ntest, but I'll post back here within the hour.\n\n> Actually there is only *one* more connection, but as httpd and Tomcat are\n> running on the same server you see *both* ends of the tcp connection in\n\nSorry, reading my original post shows I put too much stress on the high\nnumber of connections.  I was in fact realizing the two lines were from\nthe same connection, I was just surprised that new sockets kept getting\nadded instead of old ones being reused.", "id": 87620, "time": "2006-04-06T08:15:20Z", "bug_id": 38227, "creation_time": "2006-04-06T08:15:20Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "jim.robinson@stanford.edu", "attachment_id": null, "text": "(In reply to comment #10)\n> I suspect a thing that has been fixed meanwhile. Could you please give\n> http://httpd.apache.org/dev/dist/httpd-2.2.1.tar.gz a try? Keep in mind that\n> this is NO official release of httpd-2.2.1, but one that the developers are\n> currently deciding on whether to release it or not. It is known that this\n> tarball currently contains a bug that prevents using SSL backends with the\n> proxy, but this does not harm your current problem. It would be very nice if \n> you could give it a try and let me know the results.\n\nHi,\n\nI tried out 2.2.1, and I'm now seeing the kind of connection growth I\nexpected.\n\nI slowly increased the concurrent requests (from the original *1* thread\nI was using in the tests I originally posted about), to tens of threads,\nwithout seeing an undue increase in the number of used connections.\n\nI note that Tomcat does still eventually reach 200 active threads when\nI hit it Apache with many requests, but it appears as though Apache is\nnow reusing existing connections.\n\nFrom this first pass, it looks to me like 2.2.1 fixes the problem I was\nhaving. Thank you very much for your help!\n", "id": 87621, "time": "2006-04-06T08:54:15Z", "bug_id": 38227, "creation_time": "2006-04-06T08:54:15Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 38227, "text": "(In reply to comment #12)\n\n> \n> I note that Tomcat does still eventually reach 200 active threads when\n> I hit it Apache with many requests, but it appears as though Apache is\n\nAs mentioned, this possibly works as designed. This depends on your MPM settings.\n\n> \n> From this first pass, it looks to me like 2.2.1 fixes the problem I was\n\nSounds good. Please let me know the results if you do more intense tests.\n\n", "id": 87630, "time": "2006-04-06T12:40:50Z", "creator": "rpluem@apache.org", "creation_time": "2006-04-06T12:40:50Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 38227, "text": "Created attachment 18055\nmake mod_proxy_balancer init_balancer_member call ap_proxy_initialize_worker\n\n(In reply to comment #13)\n>\n> As mentioned, this possibly works as designed. This depends on your MPM\nsettings.\n> \n> > \n> > From this first pass, it looks to me like 2.2.1 fixes the problem I was\n> \n> Sounds good. Please let me know the results if you do more intense tests.\n\nHi,\n\nI've done some more testing, and I *think* I may have found a bug with\nthe load balancer.  I am running httpd 2.2.1, with server/thread\nlimits of\n\n  StartServers 8\n  ServerLimit 16\n  ThreadsPerChild 64\n\nI allowed for 1024 threads on the Tomcat side.\tThe proxy setup is the\nsame as I mention in comment #9.\n\nWhen I was initially load testing the 2.2.1 server, I happened to be\nsetting the max attributes on the balancer:\n\n  <Proxy balancer://tomcat>\n    BalancerMember ajp://server.mydomain.org:8009 route=server.mydomain.org\nmax=64\n  </Proxy>\n\nThis seemed rock solid, I threw batches of 500+ concurrent requests\nfrom our Sun Fire T2000 to this linux server, and it dealt with the\nload.\n\nHowever, I then tried removing the 'max' attribute, and ran into some\nproblem.  I found that, without the hard-coded the max attribute, I\ncould reliably lock the system up when throwing 500 concurrent\nrequests at it.\n\nMy understanding from previous comments and the notes is that, if one\ndoes not specify additional attributes, the defaults should be to use\nthe ThreadsPerChild to set s/max:\n\n  smin=0  smax=64 max=64\n\nSetting LogLevel to debug I saw that mod_proxy code says\n\n[debug] proxy_util.c(1690): proxy: initialized worker 0 in child 15926 for\n(argo02.highwire.org) min=0 max=64 smax=64\n[debug] proxy_util.c(1690): proxy: initialized worker 2 in child 15926 for (*)\nmin=0 max=64 smax=64\n\nBut that it never said it had initialized worker 1.  Adding my own\ndebugging, I can see that 'worker 1' is the one which is being used by\nthe balancer, and that the 'worker 1' hmax was always 0 *if I did not\nset the 'max=64' attribute.*  In other words, it was never inheriting\nthe 'default' hmax.\n\nDelving into the mod_balancer code, I found that\n\n  mod_proxy_balancer.c:77\n  init_balancer_member(proxy_server_conf *, server_rec *, proxy_balancer *)\n\nwas running\n\n  ap_proxy_initialize_worker_share(conf, workers, s);\n\nbut was not running, as far as I could tell, anything which might\ninitialize all the other fields for the worker.  Is this a bug?\n\nI noted that mod_proxy.c:1867 and mod_proxy.c:1868 performs a two-step\ninitialization, where it calls ap_proxy_initialize_worker_share and\nthen it calls\n\n ap_proxy_initialize_worker(workers, s);\n\nNow, I don't know if this lack of a two-step initialization in\nmod_proxy_balancer is a problem (or if it just a lack of understanding\nof the code on my part), but I am finding that adding the second\ninitialization call to init_balancer_member seemed to fix the problem\nfor me (the default, ThreadsPerChild based, hmax was picked up for\nworker 1).\n\nAny thoughts?\n\nThank you for your time,\n\nJim", "id": 87737, "time": "2006-04-11T00:40:23Z", "creator": "jim.robinson@stanford.edu", "creation_time": "2006-04-11T00:40:23Z", "is_private": false, "attachment_id": 18055}, {"count": 15, "tags": [], "bug_id": 38227, "text": "Folks,\n\nI don't know if my previous followup on this bug was read or not, or\nif people are already looking at it.  Without feedback, I can't tell\nif I should keep pursuing this, follow up with more details, etc.\n\nI can understand somebody telling me \"No, we know this isn't the\nproblem\" but I'm not hearing anything.  Without feedback I'm stuck not\nknowing if this is a bug or a fatal misunderstanding on my part.\n\nGiven httpd 2.2.1 and the following settings:\n\n  Server Version: Apache/2.2.1 (Unix) DAV/2 mod_ssl/2.2.1 OpenSSL/0.9.7a\n  Server Built: Apr 6 2006 00:22:26\n  Module Magic Number: 20051115:1\n  Hostname/port: server.mydomain.org:80\n  Timeouts: connection: 300    keep-alive: 300\n  MPM Name: Worker\n  MPM Information: Max Daemons: 2 Threaded: yes Forked: yes\n  Server Architecture: 32-bit\n  Server Root: /highwire/server/apache\n  Config File: -c/-C directives\n  Server Built With:\n    -D APACHE_MPM_DIR=\"server/mpm/worker\"\n    -D APR_HAS_SENDFILE\n    -D APR_HAS_MMAP\n    -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n    -D APR_USE_SYSVSEM_SERIALIZE\n    -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n    -D APR_HAS_OTHER_CHILD\n    -D AP_HAVE_RELIABLE_PIPED_LOGS\n    -D HTTPD_ROOT=\"/usr/local/apache/2.2.1\"\n    -D SUEXEC_BIN=\"/usr/local/apache/2.2.1/bin/suexec\"\n    -D DEFAULT_ERRORLOG=\"logs/error_log\"\n    -D AP_TYPES_CONFIG_FILE=\"conf/mime.types\"\n    -D SERVER_CONFIG_FILE=\"conf/httpd.conf\"\n\nIt appears as though the mod_proxy pool of connections is not being\nconsistently reused when the balancer is used.  Given the\nconfiguration:\n\n  ServerLimit 2\n  ThreadsPerChild 10\n\n  <Proxy balancer://tomcat>\n    BalancerMember ajp://server.mydomain.org:8009 route=server.mydomain.org\n  </Proxy>\n\n  <VirtualHost  vhost.mydomain.org:80>\n    ServerName  vhost.mydomain.org\n\n    RewriteEngine on\n\n    RewriteCond %{ENV:HTTPD_BASE}/logs/myapp.pause -f\n    RewriteRule .* - [forbidden,last]\n\n    DocumentRoot vhosts/myapp/htdocs\n\n    RewriteRule ^(/+test(?:/.*)?)$ /myapp$1 [env=internal:yes]\n\n    RewriteCond %{ENV:internal} =yes\n    RewriteRule ^(/+myapp/.*)  $1 [passthrough,last]\n    RewriteRule ^/+myapp/(.*) /$1 [redirect=permanent,last]\n\n    ProxyPass /myapp balancer://tomcat/myapp stickysession=JSESSIONID nofailover=on\n    ProxyPassReverse / http://vhost.mydomain.org/myapp/\n    ProxyPassReverseCookiePath /myapp/ /\n  </VirtualHost>\n\nMy understanding of the documentation\n\n  http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxypass\n\nis that, with the above ServerLimit and ThreadPerChild limit, we\nshould never see more than 20 connections form between Apache and any\none BalancerMember target (2 servers x 10 threads = 20 total threads).\n\nOn startup, we see zero connections between Apache and Tomcat:\n\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"\n  ;\n\nI make one request, and see one connection form:\n\n  ; ab -n 1 http://vhost.mydomain.org/test\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"\n  tcp 0 0 server.mydomain.org:59165 server.mydomain.org:8009 ESTABLISHED\n\nNow what happens if I make 20 concurrent requests? What I would expect to\nsee is up to 20 connections established, and no more.\n\n  ; ab -c 20 -n 20 http://vhost.mydomain.org/test\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"|wc -l\n       21\n\nIf I make another 20 connections, I see the connections more than\ndouble:\n\n  ; ab -c 20 -n 20 http://vhost.mydomain.org/test\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"|wc -l\n       44\n\nNow look what happens when I plug in min/smax/max settings into the\nBalancerMember directive.  These are settings which I think the\ndocumentation indicates are the defaults, given my configuration\nabove:\n\n  <Proxy balancer://tomcat>\n    BalancerMember ajp://server.mydomain.org:8009 route=server.mydomain.org\nmin=0 smax=10 max=10\n  </Proxy>\n\nAfter an apache restart, we have no connections, I make a bunch of\nrequests, and see 20 connections, and never more than that.  Even when\nI make 50 concurrent requests, Apache simply queues and processes as\nit should:\n\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"|wc -l\n        0\n\n  ; ab -c 20 -n 20 http://vhost.mydomain.org/test\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"|wc -l\n       20\n\n  ; ab -c 50 -n 50 http://vhost.mydomain.org/test\n  ; netstat -t | tr -s \" \" | egrep \"^tcp.*:8009 ESTABLISHED\"|wc -l\n       20\n\nIf we activate the balancer, and the balancer has only one Tomcat\ntarget as in this case, shouldn't it should still be obeying the same\nlimits as defined in the configuration.  Otherwise we have a situation\nwhere the number of proxy connections is unbounded, right?\n\nSay Apache is configured to serve no more than 1024 requests at any\none moment in time, and we wanted to balance load between two Tomcat\nservers.  What we'd probably do is set up two Tomcat servers which are\neach configured to accept 1024 requests, but we would expect to see\napache balancer send ~512 requests to each Tomcat server.  What we\nwould *not* expect to see is Apache opening more connections to a\nTomcat server than Apache itself is configured to serve at any one\ntime.\n\nIn summary, it appears to be a bug to have to declare min/smax/max\nvalues which are the same as the defaults per the documentation,\nwithout which the number of connections opened appears to be\nunbounded.\n\nMy examination of the code led me to believe that the source of the\nproblem is that the BalancerMember worker is not getting its hmax\nvalue properly initialized, and that it is therefore bypassing the\npool of reusable connections when it is acquiring connections\n(proxy_util.c:1758, in ap_proxy_acquire_connection).\n\nIf I add the patch I submitted in comment #14 and remove the\nmin/smax/max directives, I see the behavior I am expecting -- Apache\nnever opens more than 20 connections in all to its Tomcat server.\n\nLooking at svn.apache.org, I see that initialization was actually\nremoved in a previous version, though the comments do not explain why\nit is not appropriate to initialize the balancer worker:\n\n \nhttp://svn.apache.org/viewcvs.cgi/httpd/httpd/trunk/modules/proxy/proxy_balancer.c?rev=105347&r1=105320&r2=105347\n\nThe only reason I can think of to have the current behavior is that\nsomehow the dynamic of balancing between multiple backend servers is\nexpected to be able to handle more connections -- but it just doesn't\nmake sense to me that it would ever be normal for Apache to open more\nconnections to any one backend server than Apache can serve itself.\n\nIf this isn't considered a bug, I'd very much appreciate it if someone\nwould point out the reason.\n\nThank you for your time,\n\n\nJim\n", "id": 87918, "time": "2006-04-13T15:54:30Z", "creator": "jim.robinson@stanford.edu", "creation_time": "2006-04-13T15:54:30Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 38227, "text": "You are correct this is a bug. I checked your patch and it looks fine. I have\nnot committed it yet, because I want to find out the reason, why we are making a\ncopy of each worker we add to a balancer (see\nhttp://mail-archives.apache.org/mod_mbox/httpd-dev/200604.mbox/%3c443F81D8.3030401@apache.org%3e).\nIf we would not make a copy of each worker there would be no need for additional\ninitialization.", "id": 88050, "time": "2006-04-14T11:43:54Z", "creator": "rpluem@apache.org", "creation_time": "2006-04-14T11:43:54Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 38227, "text": "Thank you for the details. My impression has been that the additional\nworker copies are somehow meant to be virtual, and the intent was to\nhave them resolve to the actual workers.  I wasn't actually seeing\nwhere that occured in the code though.\n\nI'll watch the email thread you refer to with interest! Please let me\nknow if you need any further debugging/testing done.\n", "id": 88076, "time": "2006-04-14T15:35:13Z", "creator": "jim.robinson@stanford.edu", "creation_time": "2006-04-14T15:35:13Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "creator": "rpluem@apache.org", "text": "If it turns out that copying the worker is not really the correct thing to do it\nwould require several changes to the code to do this differently. These changes\nwill take some time. As your patch does not run in a wrong direction and we\nactually have the bug now I committed your patch to the trunk as r394446\n(http://svn.apache.org/viewcvs?rev=394446&view=rev).", "id": 88134, "time": "2006-04-16T09:16:34Z", "bug_id": 38227, "creation_time": "2006-04-16T09:16:34Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 38227, "text": "Proposed for backport to 2.2.x as r394653\n(http://svn.apache.org/viewcvs?rev=394653&view=rev).", "id": 88148, "time": "2006-04-17T10:43:41Z", "creator": "rpluem@apache.org", "creation_time": "2006-04-17T10:43:41Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "bug_id": 38227, "text": "Backported to 2.2.x as r396050 (http://svn.apache.org/viewcvs?rev=396050&view=rev).", "id": 88378, "time": "2006-04-22T15:26:35Z", "creator": "rpluem@apache.org", "creation_time": "2006-04-22T15:26:35Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "*** Bug 39267 has been marked as a duplicate of this bug. ***", "id": 88380, "time": "2006-04-22T15:27:27Z", "bug_id": 38227, "creation_time": "2006-04-22T15:27:27Z", "is_private": false}]
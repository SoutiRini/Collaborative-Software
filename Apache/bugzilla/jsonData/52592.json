[{"count": 0, "tags": [], "creator": "bscartine@yahoo.com", "attachment_id": null, "is_private": false, "id": 153407, "time": "2012-02-03T16:02:48Z", "bug_id": 52592, "creation_time": "2012-02-03T16:02:48Z", "text": "The method formatCellValue(cell) is returning the cell value with a leading \"*\" character.\n\nI tested the same spreadsheet with version 3.7 and did not have that problem.\n\nIf I create the DataFormatter with the 'emulateCSV' option, that fixes the problem."}, {"count": 1, "tags": [], "bug_id": 52592, "is_private": false, "id": 153408, "creation_time": "2012-02-03T16:03:43Z", "time": "2012-02-03T16:03:43Z", "creator": "bscartine@yahoo.com", "text": "I should clarify that this happens for cells that have type NUMERIC and that were formatted in Excel as Currency with a dollar sign.", "attachment_id": null}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "is_private": false, "id": 153409, "time": "2012-02-03T16:13:20Z", "bug_id": 52592, "creation_time": "2012-02-03T16:13:20Z", "text": "Are you able to create a simple junit unit test that demonstrates the problem?"}, {"count": 3, "tags": [], "text": "Here is a test case.  I created a worksheet and entered some numbers.\nA:1 =  36,353,425 \nB:1 =  456,789 \n\nand formatted the cells as \"User Defined\", format (1,1234)\n\nwhich means that negative numbers are displayed parentheses\n\n\nThe cell style format string is\n\n_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)\n\n\npublic class TestDataFormatter extends TestCase  {\n\n    private Workbook workbook;\n    private DataFormatter formatter;\n\n    protected void setUp(){\n        try {\n            File file = new File(\"contrib/numbers.xls\");\n            this.workbook = WorkbookFactory.create(file);\n            this.formatter = new DataFormatter(); // (true);\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    \n    public void testDataTypes(){\n        Sheet sheet = this.workbook.getSheetAt(0);\n        System.out.println(\"Sheet: \" + sheet.getSheetName());\n        int lastRowNum = sheet.getLastRowNum();\n        for(int j = 0; j <= lastRowNum; j++) {\n            Row row = sheet.getRow(j);\n            parseRow(row);\n        }\n    }\n    \n    private void parseRow(Row row){\n        int lastCellNum = row.getLastCellNum();\n        for(int i = 0; i <= lastCellNum; i++) {\n            Cell cell = row.getCell(i);\n            if (cell != null){\n                String val = (this.formatter.formatCellValue(cell));\n                System.out.println(row.getRowNum() + \":\" + cell.getColumnIndex() + \" \" + val);\n                if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC){\n                    assertTrue (val.indexOf(\"*\") < 0);\n                }\n            }\n        }\n    }\n    \n}", "is_private": false, "bug_id": 52592, "id": 153412, "time": "2012-02-03T18:03:44Z", "creator": "bscartine@yahoo.com", "creation_time": "2012-02-03T18:03:44Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 153414, "time": "2012-02-03T18:24:16Z", "bug_id": 52592, "creation_time": "2012-02-03T18:24:16Z", "is_private": false, "text": "I may be missing something, but your format contains a leading * character, so isn't having a * character in the formatted value correct?"}, {"count": 5, "tags": [], "creator": "bscartine@yahoo.com", "attachment_id": null, "is_private": false, "id": 153415, "time": "2012-02-03T19:08:26Z", "bug_id": 52592, "creation_time": "2012-02-03T19:08:26Z", "text": "Yes, that is interesting.  I hadn't noticed that before.\nThis formula was in a spreadsheet supplied by the client.\nHowever, the asterisk does not display in Excel.\n\nI guess I'll just stick with version 3.7 for now, since that DataFormatter does not output the \"*\""}, {"count": 6, "attachment_id": null, "bug_id": 52592, "text": "We could change it to exclude the asterisk, but first we'd want to know why! Are you able to find any documentation on what it does?", "id": 153441, "time": "2012-02-04T13:36:12Z", "creator": "apache@gagravarr.org", "creation_time": "2012-02-04T13:36:12Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "text": "If the format string is something similar to a RegEx expression, then I think the \"*\" would just indicate one or more of any character.  Similary, in the format string, the \"#\" character indicates a number.", "is_private": false, "bug_id": 52592, "id": 153515, "time": "2012-02-06T22:07:07Z", "creator": "bscartine@yahoo.com", "creation_time": "2012-02-06T22:07:07Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "markbrdsly@tiscali.co.uk", "attachment_id": null, "text": "The asterisk character is used to indicate that the contents of the cell should be padded to length - that is should fill the cell completely. The pad character is the character that follows the asterisk in the formatting string.\n\nTake a look here http://office.microsoft.com/en-us/excel-help/number-format-codes-HP005198679.aspx - under the Text and Spacing heading there is a sub-heading 'Repeating Characters', expand this and you should see an explanation of how the asterisk is used.", "id": 153549, "time": "2012-02-07T12:32:25Z", "bug_id": 52592, "creation_time": "2012-02-07T12:32:25Z", "is_private": false}, {"count": 9, "tags": [], "creator": "apache@bev.su", "attachment_id": null, "is_private": false, "id": 168746, "time": "2013-07-23T23:37:49Z", "bug_id": 52592, "creation_time": "2013-07-23T23:37:49Z", "text": "    private String cleanFormatForNumber(String formatStr) {\n        StringBuffer sb = new StringBuffer(formatStr);\n\n        if (emulateCsv) {\n            // Requested spacers with \"_\" are replaced by a single space.\n            // Full-column-width padding \"*\" are removed.\n            // Not processing fractions at this time. Replace ? with space.\n            // This matches CSV output.\n            for (int i = 0; i < sb.length(); i++) {\n                char c = sb.charAt(i);\n                if (c == '_' || c == '*' || c == '?') {\n                    if (i > 0 && sb.charAt((i - 1)) == '\\\\') {\n                        // It's escaped, don't worry\n                        continue;\n                    }\n                    if (c == '?') {\n                        sb.setCharAt(i, ' ');\n                    } else if (i < sb.length() - 1) {\n                        // Remove the character we're supposed\n                        //  to match the space of / pad to the\n                        //  column width with\n                        if (c == '_') {\n                            sb.setCharAt(i + 1, ' ');\n                        } else {\n                            sb.deleteCharAt(i + 1);\n                        }\n                        // Remove the character too\n                        sb.deleteCharAt(i); \n                        i--; // !!!!!!!!!!!!!!! LOST !!!!!!!!!!!!!!!!!!\n                    }\n                }\n            }\n        } else {\n            // If they requested spacers, with \"_\",\n            //  remove those as we don't do spacing\n            // If they requested full-column-width\n            //  padding, with \"*\", remove those too\n            for (int i = 0; i < sb.length(); i++) {\n                char c = sb.charAt(i);\n                if (c == '_' || c == '*') {\n                    if (i > 0 && sb.charAt((i - 1)) == '\\\\') {\n                        // It's escaped, don't worry\n                        continue;\n                    }\n                    if (i < sb.length() - 1) {\n                        // Remove the character we're supposed\n                        //  to match the space of / pad to the\n                        //  column width with\n                        sb.deleteCharAt(i + 1);\n                    }\n                    // Remove the _ too\n                    sb.deleteCharAt(i);\n                    i--; // !!!!!!!!!!!!!!! LOST !!!!!!!!!!!!!!!!!!\n                }\n            }\n        }\n\n        // Now, handle the other aspects like \n        //  quoting and scientific notation\n        for(int i = 0; i < sb.length(); i++) {\n           char c = sb.charAt(i);\n            // remove quotes and back slashes\n            if (c == '\\\\' || c == '\"') {\n                sb.deleteCharAt(i);\n                i--;\n\n            // for scientific/engineering notation\n            } else if (c == '+' && i > 0 && sb.charAt(i - 1) == 'E') {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n\n        return sb.toString();\n    }"}, {"count": 10, "tags": [], "creator": "apache@bev.su", "is_private": false, "id": 168747, "creation_time": "2013-07-23T23:53:45Z", "time": "2013-07-23T23:53:45Z", "bug_id": 52592, "text": "now for format string _(* after checking _ removed two first chars and i++, so in next step asterisk skipped.\nafter sb.deleteCharAt(i); need add i--;\n\nError in the current version of http://svn.apache.org/repos/asf/poi/trunk/src/java/org/apache/poi/ss/usermodel/DataFormatter.java", "attachment_id": null}, {"count": 11, "tags": [], "creator": "apache@bev.su", "attachment_id": 30630, "is_private": false, "id": 168801, "time": "2013-07-26T08:13:51Z", "bug_id": 52592, "creation_time": "2013-07-26T08:13:51Z", "text": "Created attachment 30630\ncomparison with Microsoft CSV\n\nspace replaced with &middot;"}, {"count": 12, "tags": [], "creator": "apache@bev.su", "attachment_id": null, "id": 168802, "time": "2013-07-26T08:18:26Z", "bug_id": 52592, "creation_time": "2013-07-26T08:18:26Z", "is_private": false, "text": "(In reply to Evgeniy Buyanov from comment #10)\n> Error in the current version of\n> http://svn.apache.org/repos/asf/poi/trunk/src/java/org/apache/poi/ss/usermodel/DataFormatter.java\n\n1. wrong split format string for p;n;z;t by ';' - quotes for text is ignored.\n2. mask for zero number and text part is ignored.\n3. special symbols must not work inside text in quotes\n4. question mark '?' is not replaced on space ' ' in java.text.Format.format\n5. '{' transfer to java.text.Format.format without quotes \"'\"\n6. single quotes \"'\" need to be doubled\n7. can not work for \"# ##0,0 \" (automatic divide by 1000 in Excel)\n8. can not work for \"# ####/####\""}, {"count": 13, "tags": [], "bug_id": 52592, "is_private": false, "id": 186243, "creation_time": "2015-11-04T17:44:36Z", "time": "2015-11-04T17:44:36Z", "creator": "apache@gagravarr.org", "text": "There has been quite a few fixes in this area since the bug was raised, including after 3.13 was released\n\nWould it be possible for someone to retest this with a recent nightly build / recent svn checkout build / 3.14 beta 1 once released? And if it remains, a unit test showing the issue would be most helpful for getting it fixed!", "attachment_id": null}]
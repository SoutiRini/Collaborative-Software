[{"count": 0, "tags": [], "creator": "ogattaz@adonix.tm.fr", "attachment_id": null, "text": "The method \"findClassInternal\" cannot return \"null\" when the required class\nis not in one of the \"local repositories\" but in one of the \"external\nrepositories\".\nIn this case, this method throws an exception and it does'not return \"null\"\nThis implies that the call to \"super.findClass(name);\"  in the method\n\"findClass\" of \"WebappClassLoader \"(line 954) cannot be done.\n\nTo reproduce this bug you must add an extenal repository to the set of places \nthe \"WebappClassLoader\" can look for classes to be loaded.\n\nTo do that, I propose you to call my method \"addRepositoryInClassLoader\" in \nthe \"init\" method of the first servlet \"load-on-startups\"\n\n\n  //--------------------------------------------------------------------\n  private static String CATALINA_LOADER \n=\"org.apache.catalina.loader.WebappClassLoader\";\n\n  \n  //--------------------------------------------------------------------\n  /**\n  * invoke the method \"public void addRepository(String repository)\"\n  * if it is an instance of \"org.apache.catalina.loader.WebappClassLoader\"\n  */\n  private void addRepositoryInClassLoader(String aRepository) throws \nServletException\n  {\n    ClassLoader wClassLoader = Thread.currentThread().getContextClassLoader();\n    String wClassLoaderName = wClassLoader.getClass().getName();\n\n    log(\"---setClassLoader:\");\n    log(CStringFacilities.toStringDescr(\"ClassLoaderName\",wClassLoaderName));\n    \n    /* this test replace \"instanceof\" which return false if the tested class is\n    instancied by an other class loader (other name space !)*/\n    if (wClassLoaderName.equals(CATALINA_LOADER)){\n      \n      /* build the URL of the external repository */\n      String wUrl = \"file:\"+ aRepository;\n  \n      /* invoke addRepository(String aRep) */\n      try {\n        Class[] wParameterTypes  = new Class[]{String.class};\n        Object[] wArguments = new Object[] {wUrl};\n        Method wMethodAddRepository = wClassLoader.getClass().getMethod\n(\"addRepository\",wParameterTypes );\n        wMethodAddRepository.invoke(wClassLoader,wArguments);\n      } catch (Exception e) {\n        log(\"Can't invoke addRepository(String aRep)\\n\" + \nCStringFacilities.eToString(e));\n      }\n      \n      /* invoke getURLs() */\n      try {\n        Method wMethodGetUrl = wClassLoader.getClass().getMethod(\"getURLs\",new \nClass[0] );\n        RL[] wUrls = (URL[])wMethodGetUrl.invoke(wClassLoader, new Object[0] );\n        int wMax = wUrls.length;\n        for (int wI=0;wI<wMax;wI++){\n          log(CStringFacilities.toStringDescr(\"external repository \n[\"+wI+\"]\",wUrls[wI].toString() ));\n        }\n      } catch (Exception e) {\n        log(\"Can't invoke getURLs()\\n\" +CStringFacilities.eToString(e));\n      }\n    }\n  }", "id": 20180, "time": "2002-07-25T06:55:58Z", "bug_id": 11158, "creation_time": "2002-07-25T06:55:58Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 11158, "is_private": false, "text": "This is fixed in 4.1.10+", "id": 61112, "time": "2004-07-25T22:27:57Z", "creator": "markt@apache.org", "creation_time": "2004-07-25T22:27:57Z", "attachment_id": null}]
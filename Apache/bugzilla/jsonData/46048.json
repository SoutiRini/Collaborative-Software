[{"count": 0, "tags": [], "text": "The problem: if an (SVG) image with the same file name (but different file path!)  is generated more than 1 times, FOP always uses the (wrong) first image.\n\nWe use relative paths in our XSLs to reference SVG images. This worked good in FOP 0.20.5 but doesn't work in FOP 0.95 anymore (well, it works with FOP 0.95 when called via FOP.bat but it doesn't work when called from within a Java app via the FOP Java API). So I wrote a custom URIResolver to change the file name to the current unique file path. This solves the problem of the (so far) not working relative paths for images.\n\nHowever, if a subsequent document generates the same report with the same file but with different data, FOP doesn't use the newly generated file content but the old image of the first report. I guess the internal image cache doesn't use the resolved image file name but the first generated one.\n\nExample:\n\n1. XSL content:\n\n<svg:image width=\"170mm\" height=\"120mm\" xlink:href=\"C_PerfRiskCons_M.svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"/>\n\n2. custom URIResolver changes\n\n  'file:/D:/Tmp/iComps/amc/reports/C_PerfRiskCons_M.svg' \n\nto\n\n  'file:///D:\\Tmp\\iComps\\amc\\reports\\dVwIIqKYfobFQDzUFJDQ5Er60ovA0G7YMpAVypnaMhY=\\C_PerfRiskCons_M.svg'.\n\nwith \"dVwIIqKYfobFQDzUFJDQ5Er60ovA0G7YMpAVypnaMhY=\" being a unique GUID for each report.\n\n=> it seems FOP 0.95 uses   'file:/D:/Tmp/iComps/amc/reports/C_PerfRiskCons_M.svg' for the image cache which would explain the faulty behaviour.\n\nI tried to work around this by serializing report generation and clearing the image cache before each report, but there is no org.apache.fop.image.FopImageFactory.resetCache() anymore in FOP 0.95 and I didn't find any other resetCache() method in the API.\n\nHow can I work around this?", "is_private": false, "bug_id": 46048, "id": 121712, "time": "2008-10-21T02:30:36Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T02:30:36Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 46048, "text": "Have you tried the suggested work-around at http://xmlgraphics.apache.org/fop/stable/graphics.html#caching already (adding a unique dummy URL parameter)?", "id": 121713, "time": "2008-10-21T02:42:06Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T02:42:06Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 46048, "is_private": false, "text": "(In reply to comment #1)\n> Have you tried the suggested work-around at\n> http://xmlgraphics.apache.org/fop/stable/graphics.html#caching already (adding\n> a unique dummy URL parameter)?\n\nNo, because I can't set a unique URI in the XSL for each report generation. I try to achieve this with my custom URIResolver. But I noticed that for the second call (i.e. the second report) the custom URIResolver's resolve() is not called!!! This is another hint, that the image cache uses the URI before changed by a custom URIResolver! This would explain the the image cache lokks into the cache with the (non-unique) URI and finds it there and doesn't need to call the custom URIResolver.resolve(). If the cache would use the custom URIResolver's resolved URI, this would probably work. ", "id": 121714, "time": "2008-10-21T02:51:09Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T02:51:09Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "Ok. What you describe is all expected and correct behaviour. Obviously, it doesn't cover 100% of all requirements. I must say I'm not ready to believe that it wouldn't be possible to add a unique value for the report. You managed in the URIResolver.\n\nOne idea could be to add a set of regular expressions to match URIs that should not be cached. We've also talked about an extension attribute on fo:external-graphic to disable the cache for certain images. But that's all not implemented, yet.\n\nTo put you out of you misery ;-) here's the code to clear the image cache:\nfopFactory.getImageManager().getCache().clearCache();", "id": 121715, "time": "2008-10-21T03:05:35Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T03:05:35Z", "is_private": false}, {"count": 4, "tags": [], "text": "Doesn't the cache check for the modification date of file: URIs? Seems like a\nnatural thing to do.\n", "attachment_id": null, "bug_id": 46048, "id": 121719, "time": "2008-10-21T03:18:08Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-10-21T03:18:08Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "(In reply to comment #4)\n> Doesn't the cache check for the modification date of file: URIs? Seems like a\n> natural thing to do.\n> \n\nNo. Natural it may be if you only look at file URLs, but not all URLs provide a modification date. And we're actually working with URIs, not URLs, which don't have a modification date. Maybe this can be improved. Experiments welcome.", "id": 121720, "time": "2008-10-21T03:23:26Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T03:23:26Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "(In reply to comment #5)\n> (In reply to comment #4)\n> > Doesn't the cache check for the modification date of file: URIs? Seems like a\n> > natural thing to do.\n> > \n> \n> No. Natural it may be if you only look at file URLs, but not all URLs provide a\n> modification date. And we're actually working with URIs, not URLs, which don't\n> have a modification date. Maybe this can be improved. Experiments welcome.\n\nThat's why I said /file:/ URIs. Something like:\nif (uri.getScheme() == \"file\") {\n    check the modification date of the corresponding file\n}\nDoesn't seem complicated, but I'm obviously missing the big picture.\n", "id": 121721, "time": "2008-10-21T03:31:39Z", "creator": "vhennebert@gmail.com", "creation_time": "2008-10-21T03:31:39Z", "is_private": false}, {"count": 7, "attachment_id": null, "creator": "mhilpert@gmx.de", "text": "As there is no method to clear the image cache, I now have a working workaround:\niin my custom \"FOP\" class I introduced a new constructor to create a new FopFactory to finally get rid of all cached images:\n\n-----------------------\n    /**\n     * Constructor.\n     * \n     * Workaround image cache problem: each FopFactory has its own image cache. As a custom URIResolver (to set unique image file names)\n     * is not considered by the imageCache (FOP 0.95), the image cache must be cleared. But as there is not such clear method anymore (FOP 0.95)\n     * we create a complete new FopFactory.\n     * \n     * This constructor should be called with parameter 'true' for serialized FOP calls to avoid image caching problems.\n     * \n     * @param newFactory If true, create a new FopFactory and try to copy config values from the former FopFactory and UserAgent.\n     */\n    public FOP(final boolean newFactory) throws Exception {\n        super();\n\n        if (newFactory) {\n            final FopFactory ff = FopFactory.newInstance();\n            \n            final FOUserAgent ua = ff.newFOUserAgent();\n            ua.setBaseURL(fopUserAgent.getBaseURL());\n            ua.setURIResolver(fopUserAgent.getURIResolver());\n            \n            ff.setStrictValidation(fopFactory.validateStrictly());\n            if (fopFactory.getFontBaseURL() != null) {\n                ff.setFontBaseURL(fopFactory.getFontBaseURL());\n            }\n            ff.setUserConfig(fopFactory.getUserConfig());\n            \n            fopFactory = ff;\n        }\n    }//FOP()\n-----------------------------------\n\nI guess the problem is the image caching of FOP not taking custom URIResolvers into account.\n\n(Why is this bug \"resolved worksforme\"? This is a clear bug as I described it ...)\n\n", "id": 121723, "time": "2008-10-21T03:34:37Z", "bug_id": 46048, "creation_time": "2008-10-21T03:34:37Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 46048, "is_private": false, "text": "(In reply to comment #7)\n> As there is no method to clear the image cache, I now have a working\n> workaround:\n> iin my custom \"FOP\" class I introduced a new constructor to create a new\n> FopFactory to finally get rid of all cached images:\n> \n<snip/>\n\n> I guess the problem is the image caching of FOP not taking custom URIResolvers\n> into account.\n> \n> (Why is this bug \"resolved worksforme\"? This is a clear bug as I described it\n> ...)\n> \n\nWould you care to look at my reply #3 again? I gave you the code necessary to clean the image cache. Here it is again:\nfopFactory.getImageManager().getCache().clearCache();\n\n", "id": 121724, "time": "2008-10-21T04:20:50Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T04:20:50Z", "attachment_id": null}, {"count": 9, "tags": [], "text": "(In reply to comment #3)\n> To put you out of you misery ;-) here's the code to clear the image cache:\n> fopFactory.getImageManager().getCache().clearCache();\n\nThanks, that did also the trick!\n\nIs there hope to fix this issue when using custom URIResolvers?", "is_private": false, "bug_id": 46048, "id": 121725, "time": "2008-10-21T04:22:26Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T04:22:26Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 46048, "attachment_id": null, "id": 121726, "time": "2008-10-21T04:35:22Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T04:35:22Z", "is_private": false, "text": "(In reply to comment #9)\n> (In reply to comment #3)\n> > To put you out of you misery ;-) here's the code to clear the image cache:\n> > fopFactory.getImageManager().getCache().clearCache();\n> \n> Thanks, that did also the trick!\n> \n> Is there hope to fix this issue when using custom URIResolvers?\n> \n\nNot the way you thought. A URIResolver returns a JAXP Source object and that can't be cached. It's not even guaranteed that the resulting Source object has a system ID. I wouldn't even know where to start to approach this the way you explained. If there's anything that can be improved then it's either looking at Vincent's proposal about checking the last modified date for file URLs (which would only solve this special case) or bypassing caching for certain URIs as I suggested. The URIResolvers are completely irrelevant for image caching, they just provide access to the actual resource when given a URI."}, {"count": 11, "tags": [], "text": "(In reply to comment #10)\n> The URIResolvers are completely irrelevant for image caching, they\n> just provide access to the actual resource when given a URI.\n\nThanks for this clearing up! Now I can  stop playing around with the URIResolver in hope to get it somehow fixed.\n\nThen I don't understand your comment #3: as I can't write a unique path to the XSL (as the XSL never changes because it is the layout of the report), we use relative paths (as they worked with FOP 0.20.5 Java API flawlessly). These relative paths result in the very same image file name for the same report but other data. The only workaround I see here, is to make an additional XML transformation of the XSL to find such relative paths and replace them with temporary full paths, which is not very elegant.\n\nI wonder, how I can get FOP working to process multiple documents in multiple threads. I guess, the only promising approach so far (FOP 0.95) is, to use new FopFactories and UserAgents for each thread and each report generated. But the note in http://xmlgraphics.apache.org/fop/0.94/embedding.html#multithreading (\"Apache FOP may currently not be completely thread safe.\") is not very encouraging.\n", "is_private": false, "bug_id": 46048, "id": 121727, "time": "2008-10-21T04:48:06Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T04:48:06Z", "attachment_id": null}, {"count": 12, "tags": [], "text": "(In reply to comment #11)\n> (In reply to comment #10)\n> > The URIResolvers are completely irrelevant for image caching, they\n> > just provide access to the actual resource when given a URI.\n> \n> Thanks for this clearing up! Now I can  stop playing around with the\n> URIResolver in hope to get it somehow fixed.\n> \n> Then I don't understand your comment #3: as I can't write a unique path to the\n> XSL (as the XSL never changes because it is the layout of the report), \n\nHint: XSLT parameters\n\n> we use\n> relative paths (as they worked with FOP 0.20.5 Java API flawlessly). These\n> relative paths result in the very same image file name for the same report but\n> other data. The only workaround I see here, is to make an additional XML\n> transformation of the XSL to find such relative paths and replace them with\n> temporary full paths, which is not very elegant.\n\nI'd simply determine a unique ID for each report instance (something simple as a counter) and pass that in as an XSLT parameter. The stylesheet can then append that to the URI: file:myimage.png?id=12345, file:myimage.png?id=12346....\n\n> I wonder, how I can get FOP working to process multiple documents in multiple\n> threads.\n\nThat's what I was thinking, too. You're not going to be happy when you always write the same file. IMO that's a really bad idea. The trick with the different directories is not a bad idea if you actually have to write the image to a file in the first place.\n\n> I guess, the only promising approach so far (FOP 0.95) is, to use new\n> FopFactories and UserAgents for each thread and each report generated. But the\n> note in http://xmlgraphics.apache.org/fop/0.94/embedding.html#multithreading\n> (\"Apache FOP may currently not be completely thread safe.\") is not very\n> encouraging.\n\nThat's just to cover our collective asses. FOP is thread-safe (if no little bug has sneaked in somewhere due to some oversight, multi-threading testing is not part of our normal test suite). But that doesn't mean it's not a good idea to do careful multi-threading testing of your application as a whole.\n\nI'm afraid I can't give you the best idea with the information I currently have. I don't know how you create your image. I assume you generate it before you call FOP. Assuming you have some information that lets you identify the data that needs to be turned into an image, consider passing that information [1] into the XSLT stylesheet as a XSLT parameter (similar to what I suggested above) but this time, you use this information to build up a private URI that holds all information to uniquely identify the image belonging to that report. Then, write a URIResolver that can deal with this private URI scheme to generate the image on the fly. That might actually allow you to bypass writing the image to a file, thus making the whole thing faster.\n\n[1] I'll try to show this by example: Assuming you can gather all your data from your database (assuming you use one) you could pass in the ID of the main record. my:report?id=873468&color=red could then be your unique URI for the report 873468 and some data shall be highlighted in red (random example feature). Your URIResolver will listen to the \"my\" scheme and parse it, then return an InputStream (or for example a DOM (DOMSource) in case of SVG) that accesses the finished image.\n\nMaybe that helps.", "is_private": false, "bug_id": 46048, "id": 121728, "time": "2008-10-21T05:12:39Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T05:12:39Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "Thanks for all these ideas! We first create all data (XSL, XML, SVG) in a temporary directory for each report. Then we call FOP to transform the XSL+XML to PDF. The references to the external SVG files are in the XSLs (as relative paths to these files).\n\nWith this approach, other developers first design the report \"offline\" on their workstation with their tools. We can also re-create the PDF anytime later with third party tools like fop.bat instead of our Java application. For debugging, we can look in any xsl, xml and svg as the files are there. Anyway, I wonder how you can generate the SVG on the fly and pass the SVGDOMSource to FOP, as the image cache is ignoring the URIResolver anyway (as I learned now).", "attachment_id": null, "bug_id": 46048, "id": 121729, "time": "2008-10-21T05:35:24Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T05:35:24Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 46048, "is_private": false, "text": "(In reply to comment #13)\n> Thanks for all these ideas! We first create all data (XSL, XML, SVG) in a\n> temporary directory for each report. Then we call FOP to transform the XSL+XML\n> to PDF. The references to the external SVG files are in the XSLs (as relative\n> paths to these files).\n>\n> With this approach, other developers first design the report \"offline\" on their\n> workstation with their tools. We can also re-create the PDF anytime later with\n> third party tools like fop.bat instead of our Java application. For debugging,\n> we can look in any xsl, xml and svg as the files are there.\n\nThis sounds like we might have to rethink how we treat the URI when caching the image. If it's a relative URI, we'd have to prepend the base URI and only use the absolute URI in the image cache. I don't think we do that now. That could actually solve your problem.\n\n> Anyway, I wonder\n> how you can generate the SVG on the fly and pass the SVGDOMSource to FOP, as\n> the image cache is ignoring the URIResolver anyway (as I learned now).\n\nThe thing is: We assume that a resource can be identified uniquely by its URI. After all there's the word \"identifier\" in \"URI\". If the same URI comes back, we assume it's the same image. The URIResolver is only used when we have to load the image (which is done once). The image loader framework then puts the loaded image (subclass of org.apache.xmlgraphics.image.loader.Image) into the cache under this URI, further identified by the ImageFlavor (as multiple representations of the same image can be stored in the image cache). So if you re-request the same URI again, the cache returns the image directly. No detour through the URIResolver.\n\nSo, to pass in an SVG DOM, your URIResolver will create a DOMSource instead of a StreamSource. PreloaderSVG can make use of a DOMSource, so it doesn't have to be serialized to a stream first, in case you build your SVG as a DOM somewhere.\n\n", "id": 121730, "time": "2008-10-21T06:01:55Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T06:01:55Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 46048, "attachment_id": null, "id": 121738, "time": "2008-10-21T09:36:39Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-21T09:36:39Z", "is_private": false, "text": "(In reply to comment #14)\n> The thing is: We assume that a resource can be identified uniquely by its URI.\n> After all there's the word \"identifier\" in \"URI\". If the same URI comes back,\n> we assume it's the same image. The URIResolver is only used when we have to\n> load the image (which is done once). The image loader framework then puts the\n> loaded image (subclass of org.apache.xmlgraphics.image.loader.Image) into the\n> cache under this URI, further identified by the ImageFlavor (as multiple\n> representations of the same image can be stored in the image cache). So if you\n> re-request the same URI again, the cache returns the image directly. No detour\n> through the URIResolver.\n\nOkay, I think I fully understood this and this is basically okay. So, the URIResolver is no suitable way of changing these URIs, alas. So what is a URIResolver good for, if it's just ignored in some cases (here: image cache already has URI and doesn't call URIResolver anymore)? Even the first time my URIResolver is called, the image cache still has the original URI instead of the changed URI from the URIResolver. Or is this behaviour also as intended?\n\n\n\n"}, {"count": 16, "tags": [], "bug_id": 46048, "text": "(In reply to comment #15)\n> \n> Okay, I think I fully understood this and this is basically okay. So, the\n> URIResolver is no suitable way of changing these URIs, alas. So what is a\n> URIResolver good for, if it's just ignored in some cases (here: image cache\n> already has URI and doesn't call URIResolver anymore)? Even the first time my\n> URIResolver is called, the image cache still has the original URI instead of\n> the changed URI from the URIResolver. Or is this behaviour also as intended?\n\nYes, the URIResolver is ignored when the image is in the cache, but it's really only used for loading the actual image. The behaviour is as I intended it to be. I designed the cache so it uses the image's URI (i.e. an identifier) to uniquely identify the resource. Let me explain the design decision with some more information, to show you what kind of cases need to be handled:\n\nWe have to support different kinds of URIs on fo:external-graphic and for other resources:\n\nhttp://images.company.com/logo.jpg   (this is a URL, and therefore a URI)\nfile:///C:/Images/logo.jpg   (this is a URL, and therefore a URI)\n\n--> Direct access because they are URLs\n\nurn:images:13487973   (this is a URN, and therefore a URI)\n\n--> Identifier, the specifier doesn't care where the resource comes from\n\n\n\nURI resolution means: Turn URI into a Resource.\nThe resource could be represented by a URL but doesn't have to be, because:\n\nPossibilities:\n- CatalogResolver: Map URIs to URLs.\n  Example:\n    urn:images:13487973 --> http://db-server/images?id=13487973 (provided by a servlet somewhere on a server)\n    (Resolved system ID (URL) available)\n\n- Private URI Resolver: \n  Example:\n    urn:images:13487973 --> URIResolver directly returns a StreamSource with a InputStream for accessing the image\n    (There might or might not be a system ID (URL) in this case)\n\nIf we implemented what you're wishing for, what would we do if there's no systemID? Can we be sure that the system ID is always more stable/correct than the original URI for use in the image cache? How do we decide what to use? IMO, if you use the same URI for different images, you violate the \"identifier\" purpose of the URI. The resource is no longer unique. Using the resolved system ID would only be a work-around. Well, this is my view and I can be wrong. But it's also how FOP has done it the last few years even before the image loader framework.\n\nNotes on Image Loader Framework implementation:\nFor normal URLs (HTTP, FTP...) a stream is opened and decorated with an ImageIO ImageInputStream which provides random I/O access to the image. For that, the image is mirrored locally, either in memory or temporary file. Special care has to be taken that for the same URL, no two requests have to be initiated (for pre-loading and loading) which would cause additional round-trips.\nFile URLs are handled in a particular way. For those, direct random I/O access can be provided directly.\n\nI guess I'll look into prepending the base URI to relative URIs tomorrow to make the original URI \"more unique\". That is almost certain to fix your problem.", "id": 121751, "time": "2008-10-21T14:44:43Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-21T14:44:43Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "(In reply to comment #16)\n> I guess I'll look into prepending the base URI to relative URIs tomorrow to\n> make the original URI \"more unique\". That is almost certain to fix your\n> problem.\n\nYes, that would probably solve the issue. I also played around with some XSLT code to detect the current base URI (that has the unique subdirectory), but this would requires XSLT 2.0 and some nasty string cutting. With the standard Java Xalan (XSLT 1.0) I found no way to change my relative path to a unqiue full path during runtime.\n\nSo, I'm looking forward to this change! Thanks for taking time!", "id": 121789, "time": "2008-10-22T09:56:52Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-22T09:56:52Z", "is_private": false}, {"count": 18, "tags": [], "text": "Created attachment 22771\nProposed patch against FOP Trunk for URI pre-resolution\n\nAs promised I've looked into it (had some precious train time yesterday). I found two possible approaches to \"pre-resolve\" the URI relative to a base URI, so the image cache gets more absolute URIs. My first attempt was to build that into the image loading framework but that caused a lot of changes (even API changes). The second attempt is less invasive but needs changes in more than one place in FOP (ExternalGraphic and all renderers). To illustrate this I've just patched the PDFRenderer for the moment.\n\nThe patch uses java.net.URI (since Java 1.4) to do the URI resolution (using URI.resolve(URI), not JAXP-style URIResolver resolution!). That seems to do the job just fine. I'm not 100% sure this is ultimately the right approach which is why I'm just posting a proposed patch here rather than doing the change directly. The change itself should be pretty safe because if there's a problem parsing the URI, the original URI is simply returned. Only relative URIs should be affected.\n\nThe patch requires the Base URI (FOUserAgent.setBaseURL(String)) to be set for the document. From the command-line this will be done automatically (the source file's directory is used).\n\nFeedback and further ideas welcome.", "attachment_id": 22771, "bug_id": 46048, "id": 121818, "time": "2008-10-23T04:48:08Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-23T04:48:08Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "BTW, just to explain what happens with this patch:\n\nIf you have src=\"chart.svg\" on your external-graphic and the base URI is \"file:/C:/reports/321cb123db23/\", the image loader framework receives as URI: \"file:/C:/reports/321cb123db23/chart.svg\". Before the patch it would only receive \"chart.svg\".\n\nMaybe it would actually be better to delay the \"pre-resolution\" as long as possible, i.e. to do it inside the image loader framework (my first approach). But it would still require a change for ExternalGraphic and all renderers because the currently applicable base URI is passed along.\n\nIf someone wanted to go even further, support for \"xml:base\" (http://www.w3.org/TR/xmlbase/) could be added to FOP to override the base URI for certain elements. Should be too hard to implement.", "id": 121819, "time": "2008-10-23T04:56:12Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-23T04:56:12Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "Wow, Jeremias! Thanks for working in this! I guess I have to find out how to get the latest developent version of FOP and how to compile it. I would like to see, if your patch fixed my specific problem ...", "id": 121839, "time": "2008-10-23T14:37:44Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-10-23T14:37:44Z", "is_private": false}, {"count": 21, "attachment_id": null, "creator": "mhilpert@gmx.de", "text": "Just downloaded the current trunk, built it and get a\n\n\"I/O exception while reading font cache (org.apache.fop.fonts.EmbedFontInfo; local class incompatible: stream classdesc serialVersionUID = -9075848379822693399, local class serialVersionUID = 8755432068669997367). Discarding font cache file.\"\n\nError. As only fop.jar and xmlgraphics-commons.jar changed and double checked that my classpath contained these, I wonder what else is wrong.", "id": 121898, "time": "2008-10-27T06:11:41Z", "bug_id": 46048, "creation_time": "2008-10-27T06:11:41Z", "tags": [], "is_private": false}, {"count": 22, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "(In reply to comment #21)\n> Just downloaded the current trunk, built it and get a\n> \n> \"I/O exception while reading font cache (org.apache.fop.fonts.EmbedFontInfo;\n> local class incompatible: stream classdesc serialVersionUID =\n> -9075848379822693399, local class serialVersionUID = 8755432068669997367).\n> Discarding font cache file.\"\n> \n> Error. As only fop.jar and xmlgraphics-commons.jar changed and double checked\n> that my classpath contained these, I wonder what else is wrong.\n> \n\nYou can safely ignore that. It just means that the font cache file is being rebuilt.", "id": 121903, "time": "2008-10-27T06:44:34Z", "creator": "jeremias@apache.org", "creation_time": "2008-10-27T06:44:34Z", "is_private": false}, {"count": 23, "tags": [], "bug_id": 46048, "attachment_id": null, "text": "This message is a warning that FOP failed to read from the Font cache. Which means any Font auto detection or Font directories will be re-scanned. So this failure doesn't break anything. To avoid the warning you can simply delete the old Font Cache file, which according to [1] lives in ${base}\\conf\\font.cache. Or you can disable Font Caching altogether using the option \"use-cache\"\n\nI think I will create a FAQ for this as it comes up a lot.\n\n[1] http://xmlgraphics.apache.org/fop/0.94/configuration.html#general-elements", "id": 121904, "time": "2008-10-27T06:55:04Z", "creator": "bowditch_chris@hotmail.com", "creation_time": "2008-10-27T06:55:04Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 46048, "text": "So, I replaced fop.jar and xmlgraphics-commons.jar with the new trunk version but the problem persists: the image cache retrieves the same (first) SVG. Putting back the \n\n   FOP.clearImageCache();\n\nit works again.\n\n(By the way with the new JARs I get lots of new errors and warnings, e.g.:\n\nWARNING T16: Ascender and descender together are larger than the em box. This could lead to a wrong baseline placement in Apache FOP.\n\nSEVERE  T16: Unsupported TrueType font: Unicode cmap table not present. Aborting\nWARNING T16: Unable to load font file: file:/C:/WINNT/FONTS/mapsym.ttf. Reason: java.io.IOException: TrueType font is not supported: file:/C:/WINNT/FONTS/mapsym.ttf\n...)", "id": 122712, "time": "2008-11-21T07:50:46Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-11-21T07:50:46Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "text": "(In reply to comment #24)\n> So, I replaced fop.jar and xmlgraphics-commons.jar with the new trunk version\n> but the problem persists: the image cache retrieves the same (first) SVG.\n> Putting back the \n> \n>    FOP.clearImageCache();\n> \n> it works again.\n\nI haven't applied the patch, yet. I was waiting for your feedback.\n\n> (By the way with the new JARs I get lots of new errors and warnings, e.g.:\n> \n> WARNING T16: Ascender and descender together are larger than the em box. This\n> could lead to a wrong baseline placement in Apache FOP.\n\nThat particular one is gone since yesterday in FOP Trunk.\n\n> SEVERE  T16: Unsupported TrueType font: Unicode cmap table not present.\n> Aborting\n> WARNING T16: Unable to load font file: file:/C:/WINNT/FONTS/mapsym.ttf. Reason:\n> java.io.IOException: TrueType font is not supported:\n> file:/C:/WINNT/FONTS/mapsym.ttf\n> ...)\n> \n\nThose are normal and expected on a Windows machine. You've got font auto-detection turned on, but FOP doesn't support all fonts it finds. Those error and warnings are there to inform you which fonts could not be made available inside FOP.\n", "attachment_id": null, "bug_id": 46048, "id": 122713, "time": "2008-11-21T07:59:39Z", "creator": "jeremias@apache.org", "creation_time": "2008-11-21T07:59:39Z", "is_private": false}, {"count": 26, "tags": [], "text": "Oh, I see that there is an attachement. How can I aply this patch? When I look into the text file there are new (+) lines and removed (-) lines. I guess there is some kind of tool to simple run with this file? Or do I have to fiund the places in the code and replace them by hand?", "is_private": false, "bug_id": 46048, "id": 122735, "time": "2008-11-21T11:39:50Z", "creator": "mhilpert@gmx.de", "creation_time": "2008-11-21T11:39:50Z", "attachment_id": null}, {"count": 27, "tags": [], "text": "(In reply to comment #26)\n> Oh, I see that there is an attachement. How can I aply this patch? When I look\n> into the text file there are new (+) lines and removed (-) lines. I guess there\n> is some kind of tool to simple run with this file? Or do I have to fiund the\n> places in the code and replace them by hand?\n> \n\nThe attached patch is a unified diff which is the most popular format for patches. The easiest way to automatically apply it is Team/Apply Patch... inside Eclipse if you use that. Otherwise, TortoiseSVN on Windows will also make it easy. The most universal way is the \"patch\" utility: http://en.wikipedia.org/wiki/Patch_(Unix)\nHTH", "attachment_id": null, "bug_id": 46048, "id": 122741, "time": "2008-11-21T23:48:27Z", "creator": "jeremias@apache.org", "creation_time": "2008-11-21T23:48:27Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 46048, "attachment_id": null, "id": 126013, "time": "2009-04-06T00:20:02Z", "creator": "alex_watson@standardandpoors.com", "creation_time": "2009-04-06T00:20:02Z", "is_private": false, "text": "I am experiencing problems with the same image caching issue, and have a few suggestions for an alternate approach to resolving this issue. Unfortunately our base URI does not change so the patch included already for this defect does not help us here.\n\nWe have a FOP-based webserver, that generates PDF files with embedded images. We also use a URIResolver to intercept requests for images and map them onto different resources. Many of the images are static (logos etc), but some of these images change infrequently (perhaps once a week).\n\nI discovered this problem when an image was missing on our webserver, but replacing the image did not fix the PDF (the absence of the image was cached as well). Similarly, deleting or changing an image did not alter the PDF.\n\nI am concerned about performance and scalability, so I would rather not create a new FopFactory for each request. The workaround to call fopFactory.getImageManager().getCache().clearCache() is brute-force - this will flush images for all threads and reports (even if another thread is rendering a PDF at the time).\n\nI think the ideal behaviour is to allow image caching to be optionally configurable on the session/run rather than globally on the FopFactory.\n\nMy suggestion is to allow the FOUserAgent to be (optionally) configured with its own ImageManager. The FOUserAgent constructor would default to the ImageManager from the FopFactory (to preserve existing behaviour by default).\n\nThe externalGraphic and PDFRenderer classes would change from\n        FOUserAgent userAgent = getUserAgent();\n        ImageManager manager = userAgent.getFactory().getImageManager();\nto\n        ImageManager manager = userAgent.getImageManager();\n\nTo use session based image caching would simply require a new method to be invoked on the FOUserAgent to create its own ImageManager eg. FOUserAgent enableSessionCaching() {this.imageManager = new ImageManager(factory); }.\n\nAn additional benefit is that session based images would be cleaned up much sooner (helping with our monitoring of free memory within the app).\n\nAnother useful enhancement would allow the ImageCache to be configurable to exclude some URI patterns from its cache (perhaps by extending ImageCacheListener). This could enable a session based cache to cache some images (based on uri) and then fall through to the global cache for other images."}, {"count": 29, "attachment_id": null, "creator": "jeremias@apache.org", "text": "(In reply to comment #28)\nHi Alex,\nattaching the image cache to the FOUserAgent doesn't make much sense IMO as you cannot profit from cached images over multiple document runs. Usually, the renderer itself already caches the image once per document. I don't think there's a problem with cleanup, as you mention. We're using soft references: if not enough memory is there, the images get automatically discarded. This is well tested. Your suggestion about patterns to exclude certain URIs from caching is an idea that could be investigated but I'm not sure it helps here. I think it's better that we try this pre-resolution approach. I just have to find some time and motivation to finish that.\n\nIncidentally, the problem of the missing image that was replaced but then not picked up by FOP has been solved a few days ago by:\nhttp://svn.apache.org/viewvc?rev=759144&view=rev\nhttp://svn.apache.org/viewvc?rev=759150&view=rev\n\nPlease check out XML Graphics Commons Trunk to see if your situation improves.\nhttp://svn.apache.org/repos/asf/xmlgraphics/commons/trunk", "id": 126055, "time": "2009-04-07T13:58:24Z", "bug_id": 46048, "creation_time": "2009-04-07T13:58:24Z", "tags": [], "is_private": false}, {"count": 30, "tags": [], "bug_id": 46048, "attachment_id": null, "id": 126136, "time": "2009-04-09T02:08:31Z", "creator": "alex_watson@standardandpoors.com", "creation_time": "2009-04-09T02:08:31Z", "is_private": false, "text": "Hi Jeremias,\nThanks for the feedback. We currently render most of our PDF's twice - once while discarding output to calculate the page count and then again with the page count embedded within the document - I had expected the image cache to get more of a workout within a single session/run especially if logos are rendered repeatedly on each page.\n\nHowever, I was not aware that the renderers were caching the images themselves - can you point me to where in the code base that is happening?\n\nMy thinking is that the current image caching strategy works well for a mostly static set of images - but is less flexible when the images are more dynamic in nature. I don't expect FOP to handle all of the various caching optimisations that different people might want, but it might be a very small code change to let people take care of it themselves.\n\nAt the moment there is no way to alter the image cache behaviour (the objects are private and there are no setters to substitute them) - assuming that I do not want to modify the FOP code base in my system.\n\nI agree that only using the ImageManager as a cache for a single run would be far less beneficial for performance, but it would allow people to implement their own caching strategy via the UriResolver hooks.\n\nEven a simple code modification to disable (nullify) the cache on the ImageManager, would allow people to implement their own image caching via the UriResolver hooks.\n\nThanks again.\n\nbtw - would you prefer me to raise this as a separate issue?"}, {"count": 31, "tags": [], "creator": "jeremias@apache.org", "text": "Hi Alex\n\n(In reply to comment #30)\n> Hi Jeremias,\n> Thanks for the feedback. We currently render most of our PDF's twice - once\n> while discarding output to calculate the page count and then again with the\n\nJust to speed things up, you may want to render to the area tree XML (or to the new intermediate format with FOP Trunk) instead of to PDF if all you need is the page count. That should be faster and will not need to load all images on the first pass.\n\n> page count embedded within the document - I had expected the image cache to get\n> more of a workout within a single session/run especially if logos are rendered\n> repeatedly on each page.\n> \n> However, I was not aware that the renderers were caching the images themselves\n> - can you point me to where in the code base that is happening?\n\nIn http://svn.eu.apache.org/viewvc/xmlgraphics/fop/trunk/src/java/org/apache/fop/render/pdf/PDFRenderer.java?view=markup\n\nin putImage():\n        PDFXObject xobject = pdfDoc.getXObject(uri);\n        if (xobject != null) {\n            float w = (float) pos.getWidth() / 1000f;\n            float h = (float) pos.getHeight() / 1000f;\n            placeImage((float)pos.getX() / 1000f,\n                       (float)pos.getY() / 1000f, w, h, xobject);\n            return;\n        }\n\nIt's not really \"caching\", but an image only needs to be embedded once in a PDF and can be reused multiple times. Not all output formats can do that, though.\n\n> My thinking is that the current image caching strategy works well for a mostly\n> static set of images - but is less flexible when the images are more dynamic in\n> nature. I don't expect FOP to handle all of the various caching optimisations\n> that different people might want, but it might be a very small code change to\n> let people take care of it themselves.\n>\n> At the moment there is no way to alter the image cache behaviour (the objects\n> are private and there are no setters to substitute them) - assuming that I do\n> not want to modify the FOP code base in my system.\n> \n> I agree that only using the ImageManager as a cache for a single run would be\n> far less beneficial for performance, but it would allow people to implement\n> their own caching strategy via the UriResolver hooks.\n> \n> Even a simple code modification to disable (nullify) the cache on the\n> ImageManager, would allow people to implement their own image caching via the\n> UriResolver hooks.\n\nOk, I see what you mean. I guess there are various level where this can happen. One would be on the level your suggest. HTTP, for example, allows to check file stamps. That could be used to trigger a reload of an image. But that is going to be difficult to implement with the URIResolver approach. In a high-volume system this might also result in too many round-trips for file stamp checking. How about just doing the same I've done with the expiration for the invalid URIs? We specify an expiration for the cached images. When the lease expires, the image is discarded and reloaded. That has very little management overhead,  should address your use case and should be implementable with only a few lines of code now that we've already got the expiration code. Would that work for you?\n\n> Thanks again.\n> \n> btw - would you prefer me to raise this as a separate issue?\n\nNo, I think it's fine to gather all informantion here, although it's maybe not the exact same case.\n\nBTW, I'd still be grateful for feedback on the URI \"pre-resolution\" idea in my patch.", "id": 126177, "time": "2009-04-09T12:05:37Z", "bug_id": 46048, "creation_time": "2009-04-09T12:05:37Z", "is_private": false, "attachment_id": null}, {"count": 32, "tags": [], "bug_id": 46048, "text": "Hi Jeremias,\nThanks for the pointers to the code base - that is a real help to my understanding.\n\nI had considered the expiration idea for all images (rather than just for missing images), but was not sure if it was the ideal solution. This solution would be perfect for me (with my current problem), but it would not have helped M.H. who originally raised this issue. It would depend upon how configurable the expiration was and how expensive it was to re-fetch an image.\n\nCan you explain your comments about the UriResolver being expensive in high-volume applications? I didn't quite understand the part about HTTP and timestamps.\n\nI know that the built-in (default) UriResolver will create connections to HTTP webservers or local FileSystems (etc) - and this can become expensive without any caching strategies.\n\nHowever, when a developer plugs-in their own UriResolver it can be as smart and efficient as they like (and does not need to create external connections). We have a global ResourceResolver class that implements the UriResolver interface. This implements its own caching strategy (and caches fonts, nested XSLT, imported XML as well as images). Our implementation primarily loads resources from disk (file), but future extensions to our system could allow this to generate XML, Images or even XSLT on the fly.\n\nI guess that is why I would prefer a hook that will let me take care of (part of) the caching solutuion.\n\nSorry I cannot help with the patch - we only specify \"logical\" resources within our XSLT, they are all mapped to real resources via our UriResolver. We do not use the Base parameter. For what it is worth, I think the patch looks OK to me and may help some users - but it does not really address my concerns.\n\nCheers!\n\nAlex", "id": 126205, "time": "2009-04-13T22:03:00Z", "creator": "alex_watson@standardandpoors.com", "creation_time": "2009-04-13T22:03:00Z", "is_private": false, "attachment_id": null}, {"count": 33, "attachment_id": null, "creator": "mhilpert@gmx.de", "text": "Just to update my problem: we still serialize FOP processing and clear the image cache after each single PDF generation. (I didn't have time to re-build a new FOP from the CSV tree as my first try with the latest FOP trunk produced lots of errors during building FOP. So I wait for a next official release.)", "id": 134971, "time": "2010-03-01T14:48:22Z", "bug_id": 46048, "creation_time": "2010-03-01T14:48:22Z", "tags": [], "is_private": false}, {"count": 34, "tags": [], "bug_id": 46048, "is_private": false, "text": "So, FOP 1.0 is out. I would like to test if the new URI handling in FOP 1.0 solves this issue. However, due to the randomness of this bug, I wonder how I can really test this and not just say \"hey, it doesn't occur anymore\" just to get killed by my boss, when it still happens in production environment with high concurrent FOP processings.\n\nThe last reply #32 from Alex Whatson \"Sorry I cannot help with the patch\" is not very comforting. So is there an explicit change in URI handling so that relative paths in the XSL-FO are expanded to the full URL/file name in the cache?", "id": 139550, "time": "2010-08-30T05:28:09Z", "creator": "mhilpert@gmx.de", "creation_time": "2010-08-30T05:28:09Z", "attachment_id": null}, {"count": 35, "attachment_id": null, "creator": "gadams@apache.org", "text": "move to normal priority, pending further action", "id": 155420, "time": "2012-03-30T20:36:39Z", "bug_id": 46048, "creation_time": "2012-03-30T20:36:39Z", "tags": [], "is_private": false}, {"count": 36, "tags": [], "text": "As there is still no new release, I can't go into an evaluation phase. So, I'm waiting for a release to use to get some time to built a reproducable test case. Is there any planned dead line for a new FOP release?", "attachment_id": null, "bug_id": 46048, "id": 155424, "time": "2012-03-30T22:08:18Z", "creator": "mhilpert@gmx.de", "creation_time": "2012-03-30T22:08:18Z", "is_private": false}, {"count": 37, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "(In reply to comment #36)\n> As there is still no new release, I can't go into an evaluation phase. So, I'm\n> waiting for a release to use to get some time to built a reproducable test\n> case. Is there any planned dead line for a new FOP release?\n\ncan you use a nightly build [1] to test? see also [2]\n\n[1] http://ci.apache.org/projects/xmlgraphics/fop/snapshots/\n[2] http://ci.apache.org/builders/fop-trunk/", "id": 155425, "time": "2012-03-30T22:23:28Z", "bug_id": 46048, "creation_time": "2012-03-30T22:23:28Z", "is_private": false}, {"count": 38, "tags": [], "bug_id": 46048, "is_private": false, "text": "resetting P2 open bugs to P3 pending further review", "id": 157333, "time": "2012-04-07T01:41:34Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:41:34Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 30297, "attachment_id": null, "id": 61062, "time": "2004-07-23T15:32:41Z", "creator": "gael.marziou@hp.com", "creation_time": "2004-07-23T15:32:41Z", "is_private": false, "text": "Hello,\n\nI have a bundle containing one key:\n\nfeedback2 = Rock'n Roll\n\nIt displays correctly as \"Rock'n Roll\" when using this:\n\n        <fmt:message key=\"feedback2\" />\n\nWhile the single quote got stripped out \"Rockn Roll\" when I use this:\n\n        <fmt:message key=\"feedback2\" >\n            <fmt:param />\n        </fmt:message>\n\nThanks for your help,\n\nGael"}, {"count": 1, "text": "It may seem surprising, but it works as defined in the spec. What's happening is\nthat the existence of a format parameter is causing the tag to use MessageFormat\nto process the message. Check out sections 8.8 <fmt:message> and 8.9 <fmt:param>\nof the spec, as well as the JavaDoc for java.text.MessageFormat.\n\nHere's some test code to illustrate the effect:\n\nimport java.text.*;\nimport java.util.*;\n\npublic class FmtTest {\n\n    public static class Messages extends ListResourceBundle {\n        private static final Object[][] CONTENTS = {\n            {\"feedback2\",            \"Rock'n Roll\"},\n            {\"feedback2-xtra-quote\", \"Rock''n Roll\"}\n        };\n\n        protected Object[][] getContents() {\n            return CONTENTS;\n        }\n    }\n\n    public static void main(String[] args) {\n        ResourceBundle bundle = ResourceBundle.getBundle(\"FmtTest$Messages\");\n        String feedback2 = bundle.getString(\"feedback2\");\n        String feedback2XtraQuote = bundle.getString(\"feedback2-xtra-quote\");\n\n        System.out.println(\"feedback2:\");\n        System.out.println(feedback2);\n        System.out.println(MessageFormat.format(feedback2, null));\n\n        System.out.println();\n        System.out.println(\"feedback2-xtra-quote:\");\n        System.out.println(feedback2XtraQuote);\n        System.out.println(MessageFormat.format(feedback2XtraQuote, null));\n    }\n}\n\nThis will output:\n\nfeedback2:\nRock'n Roll\nRockn Roll\n\nfeedback2-xtra-quote:\nRock''n Roll\nRock'n Roll", "bug_id": 30297, "attachment_id": null, "id": 61066, "time": "2004-07-23T17:10:31Z", "creator": "kschneider@gmail.com", "creation_time": "2004-07-23T17:10:31Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "creator": "gael.marziou@hp.com", "is_private": false, "id": 61068, "attachment_id": null, "bug_id": 30297, "creation_time": "2004-07-23T18:18:23Z", "time": "2004-07-23T18:18:23Z", "text": "Thanks for your explanation, I think it should be a FAQ and it's too bad that \nthe spec did go this way.\nIt's a nightmare for localizers and for developers because the only suggestion \nin the MessageFormat javadoc is to use comments in resource bundle source \nfiles to indicate which strings will be processed by MessageFormat. \nWhat about evolutions? It's obvious that some parameters will be added during \nthe life of an application and we should rely only on comments to avoid \nproblems?\n\nAnyway, which better alternative do I have:\n- write my own tag to fix this \"correct\" behavior\n- always use <param> even if empty\n\nAny suggestion is welcome."}]
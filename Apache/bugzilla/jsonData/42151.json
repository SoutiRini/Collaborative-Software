[{"count": 0, "attachment_id": null, "bug_id": 42151, "is_private": false, "id": 101837, "time": "2007-04-17T23:37:01Z", "creator": "mayank.rao@credit-suisse.com", "creation_time": "2007-04-17T23:37:01Z", "tags": [], "text": "I am using Log4j as the logging utility for a J2EE (JDK version 1.4) \napplication hosted on Weblogic server 8.1 sp2 running on Solaris 8.\n\nThe problem (StackOverFlow) occurs in the production environment when several \njobs are run in parallel. The jobs start at 3:00 am and the error occurs \nbetween 9-10:30 am every day, but it is not associated with any job in \nparicular. We are unable to replicate this in dev, as the dev machines cannot \nhandle the parallel processing of so many jobs. When we run the jobs one after \nanother, there is no error.\n\nThe exact setup being used is as follows:\n1) Each job is run using an instance of a class called WorkflowBo, which gains \naccess to Log4j via its constructor in the following way:\n      m_logger = Logger.getLogger(p_loggerName);\n      e_logger = Logger.getLogger(p_loggerName + \"_err\");\n2) We are using an appender that we downloaded off the Log4j forums called \nArchivedDailyRollingFileAppender, as it zips up old log files. The file is \navailable from:\nhttp://mail-archives.apache.org/mod_mbox/logging-log4j-user/200405.mbox/%\n3C5684A7E6FB10504393A2806C1F4C021003B0DC50@orion.qas.com%3E\n\nThe exact excexption that we see is pasted below. This stack keeps repeating \nseveral hundreds of times.\njava.lang.StackOverflowError\n    at java.io.IOException.<init>(IOException.java:40)\n    at java.io.FileOutputStream.writeBytes(Native Method)\n    at java.io.FileOutputStream.write(FileOutputStream.java:260)\n    at sun.nio.cs.StreamEncoder$CharsetSE.writeBytes(StreamEncoder.java:336)\n    at sun.nio.cs.StreamEncoder$CharsetSE.implWrite(StreamEncoder.java:395)\n    at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:136)\n    at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:146)\n    at java.io.OutputStreamWriter.write(OutputStreamWriter.java:204)\n    at java.io.Writer.write(Writer.java:126)\n    at org.apache.log4j.helpers.QuietWriter.write(QuietWriter.java:47)\n    at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301)\n    at com.csfb.fao.carat.util.file.ArchivedDailyRollingFileAppender.subAppend\n(ArchivedDailyRollingFileAppender.java:375)\n    at org.apache.log4j.WriterAppender.append(WriterAppender.java:159)\n    at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\n    at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:65)\n    at org.apache.log4j.Category.callAppenders(Category.java:203)\n    at org.apache.log4j.Category.forcedLog(Category.java:388)\n    at org.apache.log4j.Category.log(Category.java:835)\n    at com.csfb.fao.carat.util.file.LoggingOutputStream.flush\n(LoggingOutputStream.java:197)\n    \n    at java.io.PrintStream.write(PrintStream.java:260)\n    at sun.nio.cs.StreamEncoder$CharsetSE.writeBytes(StreamEncoder.java:336)\n    at sun.nio.cs.StreamEncoder$CharsetSE.implWrite(StreamEncoder.java:395)\n    at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:136)\n    at java.io.OutputStreamWriter.write(OutputStreamWriter.java:191)\n    at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:111)\n    at java.io.BufferedWriter.write(BufferedWriter.java:206)\n    at java.io.Writer.write(Writer.java:126)\n    at java.io.PrintStream.write(PrintStream.java:303)\n    at java.io.PrintStream.print(PrintStream.java:448)\n    at java.io.PrintStream.println(PrintStream.java:585)\n    at org.apache.log4j.helpers.LogLog.error(LogLog.java:142)\n    at org.apache.log4j.helpers.OnlyOnceErrorHandler.error\n(OnlyOnceErrorHandler.java:77)\n    at org.apache.log4j.helpers.OnlyOnceErrorHandler.error\n(OnlyOnceErrorHandler.java:67)\n    at org.apache.log4j.helpers.QuietWriter.write(QuietWriter.java:49)\n    at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301)\n    at com.csfb.fao.carat.util.file.ArchivedDailyRollingFileAppender.subAppend\n(ArchivedDailyRollingFileAppender.java:375)\n    at org.apache.log4j.WriterAppender.append(WriterAppender.java:159)\n    at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\n    at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:65)\n    at org.apache.log4j.Category.callAppenders(Category.java:203)\n    at org.apache.log4j.Category.forcedLog(Category.java:388)\n    at org.apache.log4j.Category.log(Category.java:835)\n    at com.csfb.fao.carat.util.file.LoggingOutputStream.flush\n(LoggingOutputStream.java:197)\n\nThanks for your help."}, {"count": 1, "tags": [], "bug_id": 42151, "attachment_id": 19983, "id": 101838, "time": "2007-04-17T23:38:42Z", "creator": "mayank.rao@credit-suisse.com", "creation_time": "2007-04-17T23:38:42Z", "is_private": false, "text": "Created attachment 19983\nException trace\n\nThis is the exact exception trace that we see."}, {"count": 2, "tags": [], "bug_id": 42151, "attachment_id": 19984, "is_private": false, "id": 101839, "time": "2007-04-17T23:39:56Z", "creator": "mayank.rao@credit-suisse.com", "creation_time": "2007-04-17T23:39:56Z", "text": "Created attachment 19984\nAppender being used.\n\nThis is the appender that we downloaded from the Log4j forums."}, {"count": 3, "tags": [], "bug_id": 42151, "attachment_id": 19985, "id": 101840, "time": "2007-04-17T23:40:26Z", "creator": "mayank.rao@credit-suisse.com", "creation_time": "2007-04-17T23:40:26Z", "is_private": false, "text": "Created attachment 19985\nThis is the file that contains the flush() method with the StackOverFlow"}, {"count": 4, "tags": [], "bug_id": 42151, "attachment_id": null, "id": 101879, "time": "2007-04-18T08:02:55Z", "creator": "carnold@apache.org", "creation_time": "2007-04-18T08:02:55Z", "is_private": false, "text": "From the stack trace it appears that you are using com.csfb.fao.carat.util.file.LoggingOutputStream to \nredirect System.err to log4j.  The ArchivedDailyRollingFileAppender has an IOException while trying to \nwrite to an file output stream which results in a diagnostic message being written to System.err, which \ncauses another IOException and that repeats until stack space is exhausted.  You could likely repeat \nthis on your dev environment if you can manufacture an IOException on your log file (plug the cable on \nan external drive, disconnect a network drive, etc).\n\nDon't know what the triggering IOException is, but you could break the endless recursion by having the \nLoggingOutputStream check if the message starts with \"log4j:\" and if it does, then do something else \nwith it other than feed it back to log4j.\n\nMarking this as invalid since the problem can be fixed in LoggerOutputStream.\n\n"}, {"count": 5, "tags": [], "text": "(In reply to comment #4)\n> From the stack trace it appears that you are using \ncom.csfb.fao.carat.util.file.LoggingOutputStream to \n> redirect System.err to log4j.  The ArchivedDailyRollingFileAppender has an \nIOException while trying to \n> write to an file output stream which results in a diagnostic message being \nwritten to System.err, which \n> causes another IOException and that repeats until stack space is exhausted.  \nYou could likely repeat \n> this on your dev environment if you can manufacture an IOException on your \nlog file (plug the cable on \n> an external drive, disconnect a network drive, etc).\n> Don't know what the triggering IOException is, but you could break the \nendless recursion by having the \n> LoggingOutputStream check if the message starts with \"log4j:\" and if it does, \nthen do something else \n> with it other than feed it back to log4j.\n> Marking this as invalid since the problem can be fixed in LoggerOutputStream.\n\n(In reply to comment #4)\n\nThanks, this seems to have resolved it!\n> From the stack trace it appears that you are using \ncom.csfb.fao.carat.util.file.LoggingOutputStream to \n> redirect System.err to log4j.  The ArchivedDailyRollingFileAppender has an \nIOException while trying to \n> write to an file output stream which results in a diagnostic message being \nwritten to System.err, which \n> causes another IOException and that repeats until stack space is exhausted.  \nYou could likely repeat \n> this on your dev environment if you can manufacture an IOException on your \nlog file (plug the cable on \n> an external drive, disconnect a network drive, etc).\n> Don't know what the triggering IOException is, but you could break the \nendless recursion by having the \n> LoggingOutputStream check if the message starts with \"log4j:\" and if it does, \nthen do something else \n> with it other than feed it back to log4j.\n> Marking this as invalid since the problem can be fixed in LoggerOutputStream.\n\n", "attachment_id": null, "bug_id": 42151, "id": 101964, "time": "2007-04-19T18:45:20Z", "creator": "mayank.rao@credit-suisse.com", "creation_time": "2007-04-19T18:45:20Z", "is_private": false}]
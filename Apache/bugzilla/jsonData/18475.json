[{"count": 0, "tags": [], "creator": "smb1@cornell.edu", "attachment_id": null, "text": "WarpRequestHandler.handle(WarpConnection connection, WarpPacket packet)::\n\n                case Constants.TYPE_REQ_AUTH: {\n                    String user=packet.readString();\n                    String auth=packet.readString();\n                    if (Constants.DEBUG)\n                        logger.debug(\"Request user=\"+user+\" auth=\"+auth);\n                    request.setAuthType(auth);\n                    // What to do for user name?\n                    if(user != null && auth != null && auth.equals(\"Basic\")) {\n                        Principal prin = new BasicPrincipal(user);\n                        request.setUserPrincipal(prin);\n                    }\n\n                    break;\n                }\n\nThe section of code above does not appropriately handle authenticated usernames \nfrom the host web server.  It also misleads users by reporting in the log that \nthe username is actually being passed to tomcat.  The problem is that the \nsetting of the username is conditional on the authType String matching exactly \nthe word \"Basic\".  The default \"Authorization\" HTTP request header is of \ntype \"Basic\" but the RPC allows for any \"Authroization\" \"type\"; it even \nmentions an example of type \"Kerberos\".\n\nMany schools have implemented custom HTTP Authroization \"type\"s and the warp \nconnector will not appropriately deal with them.  I have modified this class so \nthat our authentication mechanisms will work with warp and that code segment is \nbelow:\n\nWarpRequestHandler.handle(WarpConnection connection, WarpPacket packet)::\n\n                case Constants.TYPE_REQ_AUTH: {\n                    String user=packet.readString();\n                    String auth=packet.readString();\n\n                    if (Constants.DEBUG)\n                        logger.debug(\"Request user=\"+user+\" auth=\"+auth);\n                    request.setAuthType(auth);\n                    // What to do for user name?\n\n// Steve Barrett, smb1@cornell.edu - 2003.03.28, will report in bugzilla\n//                    if(user != null && auth != null && auth.equals(\"Basic\")) {\n                    if(user != null ) { //&& auth != null && auth.equals\n(\"Basic\")) {\n\n\n                        Principal prin = new BasicPrincipal(user);\n                        request.setUserPrincipal(prin);\n                    }\n\n                    break;\n                }\n\nThis, however, is also not an appropriate solution because it allows ANY \nrequest that appears to have properly authenticated a user to pass a username \nto tomcat.  It would be more appropriate if the ability to accept usernames \nfrom front ends were a switch (like 'tomcatAuthentication=\"false\"' in ajp13) \nand even better if there were an attribute which allowed the HTTP Authorization \nrequest headers to be specified so that sites could define which \"type\" of \nauthtype they would be willing to accept.", "id": 34076, "time": "2003-03-28T17:15:38Z", "bug_id": 18475, "creation_time": "2003-03-28T17:15:38Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 18475, "text": "Webapp does not work with Tomcat 5.0, so there's a mistake somewhere. It is also\nno longer actively supported in 4.1.x.", "id": 35268, "time": "2003-04-15T22:06:21Z", "creator": "remm@apache.org", "creation_time": "2003-04-15T22:06:21Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "attachment_id": 23546, "creator": "matthew.knl@gmail.com", "text": "Created attachment 23546\nOriginal.xlsx\n\nI write following codes to change a worksheet name, but the related named range \"OriginalValue\" does not update its formula: expected \"New!$A$1\" but actual \"Original!$A$1\".\n\n--\n\nWorkbook sourceWb = (open \"Original.xlsx\"...)\nint sheetIdx = sourceWb.getSheetIndex(\"Original\");\nsourceWb.setSheetName(sheetIdx, \"New\");\nsourceWb.write(new FileOutputStream(\"New.xlsx\"));\n\n--\n\nThe Excel 2007 file for testing is attached.", "id": 126530, "time": "2009-04-27T00:01:30Z", "bug_id": 47100, "creation_time": "2009-04-27T00:01:30Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "creator": "carl.pritchett@gmail.com", "is_private": false, "id": 144605, "time": "2011-02-27T22:46:19Z", "bug_id": 47100, "creation_time": "2011-02-27T22:46:19Z", "tags": [], "text": "Hi,\n\nWhen I create a HSSFWorkbook with a named range and then set the sheet name with Workbook.setSheetName() all the named ranges' formulas are renamed also. \n\nWhen I do this with a XSSFWorkbook the named ranges' formulas are not renamed and thus are broken (have the value of #REF!\").\n\nHere is a JUnit test that creates a file with such a broken named range.\n\n    @Test\n    public void create() throws IOException\n    {\n        String sname = \"TestSheet\", cname = \"TestName\", cvalue = \"TestVal\";\n        // HSSFWorkbook handles rename\n        // Workbook wb = new HSSFWorkbook();\n        //File file = new File(\"c:\\\\test.xls\");\n        \n        // XSSFWorkbook does not handle the rename\n        Workbook wb = new XSSFWorkbook();\n        File file = new File(\"c:\\\\test.xlsx\");\n        \n        Sheet sheet = wb.createSheet(sname);\n        sheet.createRow(0).createCell((short) 0).setCellValue(cvalue);\n\n        // 1. create named range for a single cell using areareference\n        Name namedCell = wb.createName();\n        namedCell.setNameName(cname);\n        String reference = sname+\"!A1:A1\"; // area reference\n        namedCell.setRefersToFormula(reference);\n        \n        // 2. rename the sheet \n        wb.setSheetName(wb.getSheetIndex(sheet), \"newName\");\n        \n        FileOutputStream fout = new FileOutputStream(file); \n        wb.write(fout);\n    }\n\nAny workarounds?\n\nRegards,\nCarl Pritchett"}, {"count": 2, "tags": [], "bug_id": 47100, "text": "It is a bug in XSSF. \n\nIn the binary .xls format formulas are stored in parsed form as sequences of tokens. The Sheet Name token just points to the corresponding SheetRecord and when you change that SheetRecord  all depending formulas are automatically updated. \n\nThe .xlsx format is totally different. It is a zip of xml files and formulas are stored in plain text. XSSFWorkbook.setSheetName just updates the corresponding bits in workbook.xml and that's all. No formulas are updated.  \n\nTo fix your problem,  XSSFWorkbook.setSheetName should iterate over all formulas and named ranges and update the sheet name. \n\n\nYegor", "id": 144629, "time": "2011-03-01T11:36:29Z", "creator": "yegor@dinom.ru", "creation_time": "2011-03-01T11:36:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 47100, "is_private": false, "text": "Thanks for the explanation Yegor,\n\nAs a workaround, I made methods to update related named ranges when a sheet name changes - could something similar be added to XSSFWorkbook? May not be the most efficient or the best use of the POI APIs...\n\npublic void setSheetName(Workbook wb, Sheet sheet, String name)\n{\n    String newName = WorkbookUtil.createSafeSheetName(name);\n    String oldName = sheet.getSheetName();\n    wb.setSheetName(wb.getSheetIndex(sheet), newName);\n        \n    if (wb instanceof XSSFWorkbook)\n    {\n        updateNamedRangesWithSheetName(wb, sheet, oldName);\n    } \n}\n\npublic void updateNamedRangesWithSheetName(Workbook wb, Sheet sheet, String oldName)\n{\n    int numNames = wb.getNumberOfNames();     \n    for (int i = 0; i < numNames; i++)\n    {\n        Name namedRange = wb.getNameAt(i);\n        if (namedRange == null || namedRange.isDeleted() || !oldName.equals(namedRange.getSheetName())) continue;\n            \n        AreaReference areaRef = new AreaReference(namedRange.getRefersToFormula());\n\n        CellReference firstCell = areaRef.getFirstCell();\n        CellReference lastCell = areaRef.getLastCell();\n            \n        updateNamedRange(sheet, namedRange, firstCell.getRow(), firstCell.getCol(), lastCell.getRow(), lastCell.getCol());\n    }\n}\n\nprivate void updateNamedRange(Sheet sheet, Name namedRange, int firstRow, int firstCol, int lastRow, int lastCol)\n{\n    CellReference firstCellRef = new CellReference(firstRow, firstCol, true, true);\n    CellReference lastCellRef = new CellReference(lastRow, lastCol, true, true);\n    \n    AreaReference ref = new AreaReference(firstCellRef, lastCellRef);\n    \n    String formula = \"'\" + sheet.getSheetName() + \"'!\" + ref.formatAsString();\n    namedRange.setRefersToFormula(formula);\n}", "id": 144638, "time": "2011-03-01T16:58:12Z", "creator": "carl.pritchett@gmail.com", "creation_time": "2011-03-01T16:58:12Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 47100, "attachment_id": null, "id": 144642, "time": "2011-03-02T06:40:53Z", "creator": "yegor@dinom.ru", "creation_time": "2011-03-02T06:40:53Z", "is_private": false, "text": "I plan to work on it. Hope to get it fixed by POI 3.8 (early April 2011). \n\nYegor"}, {"count": 5, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "text": "Fixed in r1077878, junit added\n\nThe fix that you suggested is naive and works only in simple cases. The correct approach is to parse every formula in the workbook and render it back to string with the updated sheet name. This way we ensure that the updated formulas are syntactically correct and parsable. \n\nP.S. we may need a similar fix for named ranges. Consider a case when you open a workbook and then change a name of a named range, e.g.\n\n XSSFWorkbook wb = new XSSFWorkbook();\n XSSFName name = wb.getName(\"sale_1\");\n name.setNameName(\"sale_2\");\n\n Similar to changing sheet name, all dependent formulas and named ranges should be updated. I'm leaving it for a new Bugzilla ticket.\n\nYegor", "id": 144725, "time": "2011-03-04T06:17:18Z", "bug_id": 47100, "creation_time": "2011-03-04T06:17:18Z", "is_private": false}, {"count": 6, "tags": [], "creator": "carl.pritchett@gmail.com", "attachment_id": null, "is_private": false, "id": 144726, "time": "2011-03-04T06:32:22Z", "bug_id": 47100, "creation_time": "2011-03-04T06:32:22Z", "text": "Thanks Yegor, \n\nWhat depends on a named range that could be broken if the named ranged name was changed?"}]
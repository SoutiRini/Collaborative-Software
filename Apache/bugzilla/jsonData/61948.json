[{"count": 0, "attachment_id": null, "bug_id": 61948, "text": "I found two similar exceptions in system journal.\n\n1:22:10 org.apache.tomcat.util.net.NioEndpoint$SocketProcessor doRun\nSEVERE: \njava.nio.BufferUnderflowException\nat java.base/java.nio.Buffer.nextGetIndex(Buffer.java:634)\nat java.base/java.nio.HeapByteBuffer.getChar(HeapByteBuffer.java:299)\nat org.apache.tomcat.util.net.TLSClientHelloExtractor.<init>(TLSClientHelloExtractor.java:110)\nat org.apache.tomcat.util.net.SecureNioChannel.processSNI(SecureNioChannel.java:282)\nat org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:175)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1353)\nat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.base/java.lang.Thread.run(Thread.java:844)\n\n1:22:11 org.apache.tomcat.util.net.NioEndpoint$SocketProcessor doRun\nSEVERE: \njava.lang.IllegalArgumentException: newPosition > limit: (34392 > 248)\nat java.base/java.nio.Buffer.createPositionException(Buffer.java:313)\nat java.base/java.nio.Buffer.position(Buffer.java:288)\nat java.base/java.nio.ByteBuffer.position(ByteBuffer.java:1079)\nat java.base/java.nio.ByteBuffer.position(ByteBuffer.java:260)\nat org.apache.tomcat.util.net.TLSClientHelloExtractor.skipBytes(TLSClientHelloExtractor.java:250)\nat org.apache.tomcat.util.net.TLSClientHelloExtractor.<init>(TLSClientHelloExtractor.java:141)\nat org.apache.tomcat.util.net.SecureNioChannel.processSNI(SecureNioChannel.java:282)\nat org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:175)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1353)\nat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\nat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\nat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.base/java.lang.Thread.run(Thread.java:844)\n\nIt seems that TLSClientHelloExtractor doesn't have enough checks for sanity of received client hello message.", "id": 202988, "time": "2017-12-31T14:44:11Z", "creator": "katzyn@gmail.com", "creation_time": "2017-12-31T14:44:11Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 61948, "text": "The following simple code causes BufferUnderflowException in TLSClientHelloExtractor.isClientHello() and IllegalArgumentException in TLSClientHelloExtractor.skipBytes().\n\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport javax.net.SocketFactory;\n\nbyte[][] data = {\n{ /* TLS handshake */ 22, /* TLS 1.0 */ 3, 1, /* Length 0 */ 0, 0 },\n{ /* TLS handshake */ 22, /* TLS 1.0 */ 3, 1, /* Length 4 */ 0, 4, /* Type 1 */ 1, /* Size 0 */ 0, 0, 0 },\n};\n\nfor (byte[] a : data)\n  try (Socket s = SocketFactory.getDefault().createSocket(\"hostname\", 443);\n       OutputStream out = s.getOutputStream()) {\n    out.write(a);\n  }\n\nThere are many ways to get exceptions with larger ill-formed packets.", "id": 202989, "time": "2018-01-01T03:59:33Z", "creator": "katzyn@gmail.com", "creation_time": "2018-01-01T03:59:33Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61948, "text": "Do you have any exceptions for legitimate TLS records ? If not, instead of validating all reads, it is reasonable to catch the exceptions and log as debug instead. I reviewed the code and it seems to properly validate the lengths, it requests more data, etc.", "id": 203010, "time": "2018-01-02T13:08:58Z", "creator": "remm@apache.org", "creation_time": "2018-01-02T13:08:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "katzyn@gmail.com", "attachment_id": null, "text": "I don't know the source of requests from system journal. I think that both requests were ill-formed. They may even be specially crafted. I agree that simple try-catch will be more efficient and reasonable than a lot of additional checks.", "id": 203012, "time": "2018-01-02T14:28:27Z", "bug_id": 61948, "creation_time": "2018-01-02T14:28:27Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "text": "If the code were to throw an IOException on a malformed ClientHello then a debug log message would be generated as required.\n\nI'm going to look at turning simple code to reproduce into a test case and then fixing the issue.", "id": 203021, "time": "2018-01-02T20:50:07Z", "bug_id": 61948, "creation_time": "2018-01-02T20:50:07Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "markt@apache.org", "text": "Fixed in:\n- trunk for 9.0.3 onwards\n- 8.5.x for 8.5.25 onwards\n\nEarlier versions are not affected as SNI is not supported.", "id": 203022, "time": "2018-01-02T21:33:55Z", "bug_id": 61948, "creation_time": "2018-01-02T21:33:55Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "This is the way I was planning to do it, so good.\nEvgenij, please let us know if you find any legitimate TLS records that would cause an exception (the debug level will now hide the fact the connection is being closed, so it would be best to fix them now).", "attachment_id": null, "id": 203038, "creator": "remm@apache.org", "time": "2018-01-03T10:55:35Z", "bug_id": 61948, "creation_time": "2018-01-03T10:55:35Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 61948, "attachment_id": null, "id": 203039, "time": "2018-01-03T11:19:09Z", "creator": "markt@apache.org", "creation_time": "2018-01-03T11:19:09Z", "is_private": false, "text": "FYI I went through the SNI parsing code manually and as far as I could tell the two provided test cases covered the two possible exception types for malformed input. There was the possibility of an IndexOutOfBoundsException but the input that could trigger that is not under user control and the values Tomcat provides will never trigger it.\n\nOf course, I could have missed something so any additional test cases would be welcome."}]
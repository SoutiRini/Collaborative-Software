[{"count": 0, "tags": [], "bug_id": 15434, "text": "MimeMailer doesn't work properly with national charset while build file locale\ndiffer from default OS locale/charset\nI'm using WinXP on my desktop with default ru_RU locle - charset windows-1251 \nWe've got nuber of servers under Linux and Solaris with different locales:\nru_RU.KOI8-R, ru_RU.ISO8859-5 and en_EN.ISO8859-1\nWhen I deploy some my projects/services using ant I send e-mail about deployment\ncompletition. All national symbols looks like ??????????? in mail Subject and Body.\nSame problems appears in Ant 1.5.1\n\nMy suggestions to fix this problem:\n\nIndex: EmailTask.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java,v\nretrieving revision 1.15\ndiff -u -r1.15 EmailTask.java\n--- EmailTask.java\t4 Dec 2002 16:42:32 -0000\t1.15\n+++ EmailTask.java\t16 Dec 2002 15:48:27 -0000\n@@ -132,6 +132,8 @@\n     /** file list  */\n     private Vector files = new Vector();\n     private Vector filesets = new Vector();\n+    /** Character set for MimeMailer*/\n+    private String charset=null;\n \n \n     /**\n@@ -410,7 +412,7 @@\n                     autoFound = true;\n                     log(\"Using MIME mail\", Project.MSG_VERBOSE);\n                 } catch (Throwable e) {\n-                    log(\"Failed to initialise MIME mail\", Project.MSG_WARN);\n+                    log(\"Failed to initialise MIME mail: \"+e.getMessage(),\nProject.MSG_WARN);\n                 }\n             }\n \n@@ -468,6 +470,15 @@\n                     message.setMimeType(messageMimeType);\n                 }\n             }\n+            // set the character set if not done already (and required)\n+            if (charset != null) {\n+                if (message.getCharset()!=null) {\n+                    throw new BuildException(\"The charset can only be \"\n+                         + \"specified in one location\");\n+                } else {\n+                    message.setCharset(charset);\n+                }\n+            }\n \n             // identify which files should be attached\n             Enumeration e = filesets.elements();\n@@ -519,10 +530,32 @@\n             if (failOnError) {\n                 throw e;\n             }\n+        }\n+        catch(Exception e){\n+          log(\"Failed to send email\", Project.MSG_WARN);\n+          if (failOnError) {\n+            throw new BuildException(e);\n+          }\n         } finally {\n             message = savedMessage;\n             files = savedFiles;\n         }\n+    }\n+    /**\n+     * Sets the character set of mail message.\n+     * Will be ignored if mimeType contains ....; Charset=... substring or\n+     * encoding is not a <code>mime</code>\n+     */\n+    public void setCharset(String charset) {\n+      this.charset = charset;\n+    }\n+    /**\n+     * Returns the character set of mail message.\n+     *\n+     * @return Charset of mail message.\n+     */\n+    public String getCharset() {\n+      return charset;\n     }\n }\n \n#\nIndex: Message.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/email/Message.java,v\nretrieving revision 1.5\ndiff -u -r1.5 Message.java\n--- Message.java\t25 Jul 2002 15:21:10 -0000\t1.5\n+++ Message.java\t16 Dec 2002 15:46:44 -0000\n@@ -57,7 +57,10 @@\n import java.io.File;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.io.OutputStreamWriter;\n import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n import org.apache.tools.ant.ProjectComponent;\n \n /**\n@@ -71,7 +74,7 @@\n     private StringBuffer buffer = new StringBuffer();\n     private String mimeType = \"text/plain\";\n     private boolean specified = false;\n-\n+    private String charset=null;\n \n     /** Creates a new empty message  */\n     public Message() {\n@@ -145,8 +148,13 @@\n      * @param out The print stream to write to\n      * @throws IOException if an error occurs\n      */\n-    public void print(PrintStream out)\n+    public void print(PrintStream ps)\n          throws IOException {\n+        // We need character encoding aware printing here.\n+        // So, using PrintWriter over OutputStreamWriter instead of PrintStream\n+        PrintWriter out = charset!=null?\n+                          new PrintWriter(new OutputStreamWriter(ps,charset)):\n+                          new PrintWriter(ps);\n         if (messageSource != null) {\n             // Read message from a file\n             FileReader freader = new FileReader(messageSource);\n@@ -154,7 +162,6 @@\n             try {\n                 BufferedReader in = new BufferedReader(freader);\n                 String line = null;\n-\n                 while ((line = in.readLine()) != null) {\n                     out.println(getProject().replaceProperties(line));\n                 }\n@@ -164,6 +171,7 @@\n         } else {\n             out.println(getProject().replaceProperties(buffer.toString()));\n         }\n+        out.flush();\n     }\n \n \n@@ -174,6 +182,21 @@\n      */\n     public boolean isMimeTypeSpecified() {\n         return specified;\n+    }\n+    /**\n+     * Sets the character set of mail message.\n+     * Will be ignored if mimeType contains ....; Charset=... substring.\n+     */\n+    public void setCharset(String charset) {\n+      this.charset = charset;\n+    }\n+    /**\n+     * Returns the charset of mail message.\n+     *\n+     * @return Charset of mail message.\n+     */\n+    public String getCharset() {\n+      return charset;\n     }\n }\n \n#\nIndex: MimeMailer.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-ant/src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java,v\nretrieving revision 1.7\ndiff -u -r1.7 MimeMailer.java\n--- MimeMailer.java\t22 Jun 2002 23:38:35 -0000\t1.7\n+++ MimeMailer.java\t16 Dec 2002 15:46:02 -0000\n@@ -53,16 +53,23 @@\n  */\n package org.apache.tools.ant.taskdefs.email;\n \n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.io.PrintStream;\n import java.io.UnsupportedEncodingException;\n+\n import java.util.Enumeration;\n import java.util.Properties;\n+import java.util.StringTokenizer;\n import java.util.Vector;\n+\n import javax.activation.DataHandler;\n import javax.activation.FileDataSource;\n+\n import javax.mail.Message;\n import javax.mail.MessagingException;\n import javax.mail.Session;\n@@ -72,6 +79,7 @@\n import javax.mail.internet.MimeBodyPart;\n import javax.mail.internet.MimeMessage;\n import javax.mail.internet.MimeMultipart;\n+\n import org.apache.tools.ant.BuildException;\n \n /**\n@@ -81,8 +89,61 @@\n  * @since Ant 1.5\n  */\n class MimeMailer extends Mailer {\n-    /** Sends the email  */\n-    public void send() {\n+    // Default character set\n+    private static final String defaultCharset =\nSystem.getProperty(\"file.encoding\");\n+\n+    // To work poperly with national charsets we have to use\n+    // implementation of interface javax.activation.DataSource\n+    class StringDataSource implements javax.activation.DataSource {\n+      private String data=null;\n+      private String type=null;\n+      private String charset = null;\n+      private ByteArrayOutputStream out;\n+\n+      public InputStream getInputStream() throws IOException {\n+        if(data == null && out == null)\n+          throw new IOException(\"No data\");\n+        else {\n+          if(out!=null) {\n+           \ndata=(data!=null)?data.concat(out.toString(charset)):out.toString(charset);\n+            out=null;\n+          }\n+          return new ByteArrayInputStream(data.getBytes(charset));\n+        }\n+      }\n+\n+      public OutputStream getOutputStream() throws IOException {\n+        if(out==null) {\n+          out=new ByteArrayOutputStream();\n+        }\n+        return out;\n+      }\n+\n+      public void setContentType(String type) {\n+        this.type=type.toLowerCase();\n+      }\n+\n+      public String getContentType() {\n+        if(type !=null && type.indexOf(\"charset\")>0 && type.startsWith(\"text/\"))\n+          return type;\n+        // Must be like \"text/plain; charset=windows-1251\"\n+        return type!=null?type.concat(\"; charset=\".concat(charset)):\n+                     \"text/plain\".concat(\"; charset=\".concat(charset));\n+      }\n+\n+      public String getName() {\n+        return \"StringDataSource\";\n+      }\n+      public void setCharset(String charset) {\n+        this.charset = charset;\n+      }\n+      public String getCharset() {\n+        return charset;\n+      }\n+  }\n+\n+  /** Sends the email  */\n+  public void send() {\n         try {\n             Properties props = new Properties();\n \n@@ -113,20 +174,38 @@\n             msg.setRecipients(Message.RecipientType.BCC,\n                 internetAddresses(bccList));\n \n-            if (subject != null) {\n-                msg.setSubject(subject);\n+            // Choosing character set of the mail message\n+            // First: looking it from MimeType\n+            String charset = parseCharSetFromMimeType(message.getMimeType());\n+            if(charset!=null) {\n+              // Assign/reassign message charset from MimeType\n+                message.setCharset(charset);\n             }\n-            msg.addHeader(\"Date\", getDate());\n+            // Next: looking if charset having explict definition\n+            else {\n+              charset = message.getCharset();\n+              if(charset==null) {\n+                // Using default\n+                charset=defaultCharset;\n+                message.setCharset(charset);\n+              }\n+            }\n+\n+            // Using javax.activation.DataSource paradigm\n+            StringDataSource sds = new StringDataSource();\n+            sds.setContentType(message.getMimeType());\n+            sds.setCharset(charset);\n \n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            PrintStream out = new PrintStream(baos);\n+            if (subject != null)\n+                msg.setSubject(subject,charset);\n+            msg.addHeader(\"Date\", getDate());\n \n+            PrintStream out = new PrintStream(sds.getOutputStream());\n             message.print(out);\n             out.close();\n \n             MimeBodyPart textbody = new MimeBodyPart();\n-\n-            textbody.setContent(baos.toString(), message.getMimeType());\n+            textbody.setDataHandler(new DataHandler(sds));\n             attachments.addBodyPart(textbody);\n \n             Enumeration e = files.elements();\n@@ -176,6 +255,16 @@\n         }\n \n         return addrs;\n+    }\n+\n+    private String parseCharSetFromMimeType(String type){\n+      int pos;\n+      if(type==null || (pos=type.indexOf(\"charset\"))<0)\n+        return null;\n+      // Assuming mime type in form \"text/XXXX; charset=XXXXXX\"\n+      StringTokenizer token = new StringTokenizer(type.substring(pos),\"=; \");\n+      token.nextToken();// Skip 'charset='\n+      return token.nextToken();\n     }\n }", "id": 27946, "time": "2002-12-17T08:29:53Z", "creator": "ishu@akm.ru", "creation_time": "2002-12-17T08:29:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 15434, "text": "*** Bug 15393 has been marked as a duplicate of this bug. ***", "id": 28906, "time": "2003-01-06T11:52:56Z", "creator": "bodewig@apache.org", "creation_time": "2003-01-06T11:52:56Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Created attachment 4969\nthe original patches with copyright 2003,  @since tags, and @author added", "is_private": false, "id": 31761, "creator": "levylambert@tiscali-dsl.de", "time": "2003-02-21T16:15:24Z", "bug_id": 15434, "creation_time": "2003-02-21T16:15:24Z", "attachment_id": 4969}, {"count": 3, "tags": [], "creator": "levylambert@tiscali-dsl.de", "is_private": false, "text": "the bug 17506 is about a related subject (loading property files written in non \nlatin character sets)", "id": 32117, "time": "2003-02-27T22:00:40Z", "bug_id": 15434, "creation_time": "2003-02-27T22:00:40Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 15434, "attachment_id": null, "is_private": false, "id": 35450, "time": "2003-04-17T17:13:47Z", "creator": "levylambert@tiscali-dsl.de", "creation_time": "2003-04-17T17:13:47Z", "text": "Patches submitted, thank you Aleksandr"}, {"count": 5, "tags": [], "creator": "antoine@apache.org", "is_private": false, "text": "While working on another email issue, I realized that the charset attribute \nshould be used in the headers in the PlainMailer. \nSo I have put this piece of code in PlainMailer.\n            if (message.getCharset() != null) {\n                mailMessage.setHeader(\"Content-Type\", message.getMimeType()\n                    + \"; charset=\\\"\" + message.getCharset() + \"\\\"\");\n\n            } else {\n                mailMessage.setHeader(\"Content-Type\", message.getMimeType());\n            }\nPlainMailer did not specify the charset before.\nI have tested this by sending to myself with ant an email message in hebrew.\nWorks like a charm.", "id": 43104, "time": "2003-08-21T15:32:12Z", "bug_id": 15434, "creation_time": "2003-08-21T15:32:12Z", "attachment_id": null}]
[{"count": 0, "tags": [], "text": "The jdbc-pool should allow, if Java 6 is present, to not have to configure the validationQuery, but instead use the \njava.sql.Connection.isValid(int timeout)\nmethod call", "is_private": false, "bug_id": 48817, "id": 134899, "time": "2010-02-25T18:21:40Z", "creator": "fhanik@apache.org", "creation_time": "2010-02-25T18:21:40Z", "attachment_id": null}, {"count": 1, "tags": [], "creator": "kakvicky@yahoo.co.in", "attachment_id": null, "text": " public boolean validate(int validateAction) {\n        return validate(validateAction,null);\n    }\n\n\nThere should be plugaable Validator which could be configured in the poolProperties. e.g \n\npublic boolean validate(int validateAction)\n{\n     ValidateAction vaction = this.poolProperties.getValidateAction();\n     return vaction.validate();\n}\n\nwhere ValidateAction is an interface.\n\nSome drivers e.g oracle provides ping() method on the driver which are faster than running the SQL everytime you validate the connections, so having the pluggable validator is more flexible approach.\n\nLet me know what you think, I can provide a patch for this.\n\nAnd for jdk1.6 we can have the validator which will use the jdbc specific API i.e java.sql.Connection::isValid(int timeout)", "id": 134914, "time": "2010-02-26T05:23:56Z", "bug_id": 48817, "creation_time": "2010-02-26T05:23:56Z", "is_private": false}, {"count": 2, "tags": [], "text": "> There should be plugaable Validator which could be configured in the\n> poolProperties. e.g \n\nwhy not just an interceptor if you want custom validation?\n\n> And for jdk1.6 we can have the validator which will use the jdbc specific API\n> i.e java.sql.Connection::isValid(int timeout)\n\neeeh, that's the title of the bug :)", "is_private": false, "id": 134982, "creator": "fhanik@apache.org", "time": "2010-03-01T20:36:52Z", "bug_id": 48817, "creation_time": "2010-03-01T20:36:52Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 48817, "is_private": false, "count": 3, "id": 136545, "time": "2010-04-29T19:32:27Z", "creator": "mpassell@grovehillsoftware.com", "creation_time": "2010-04-29T19:32:27Z", "text": "(In reply to comment #2)\n> > There should be plugaable Validator which could be configured in the\n> > poolProperties. e.g \n> \n> why not just an interceptor if you want custom validation?\n\nLooking over the code in ConnectionPool, it appears that the existing validation is run within borrowConnection(), when it's still possible to ask the pool for another Connection if the first one turns out to be invalid. In contrast, the JdbcInterceptors are run within setupConnection(), when it's already too late to go back to the pool. Given that, is it possible to write an interceptor that can participate in the validation process? If not, I'd agree with VickyKak that having some form of pluggable Validator would be useful."}, {"count": 4, "tags": [], "bug_id": 48817, "attachment_id": 25398, "id": 136628, "time": "2010-05-04T12:28:00Z", "creator": "mpassell@grovehillsoftware.com", "creation_time": "2010-05-04T12:28:00Z", "is_private": false, "text": "Created attachment 25398\nIf no validation query is available, fall back on other approaches\n\nThis isn't exactly what was discussed, but it's an alternative solution.  I added logic so that PooledConnection.validate() falls back on other validation approaches when a query isn't available.  It first calls Connection.isClosed().  The Javadoc for that method suggests that it isn't useful for validation, but my client managed to create a situation where he had closed connections in the pool.  Next, it uses Java reflection to look for the Connection.isValid() method and calls it if it exists.  If it's not available or doesn't work (the JDBC/ODBC bridge doesn't support isValid(), for example), it falls back on calling Connection.getMetaData(), which should in theory exercise the connection.  If it doesn't, we could always go further and actually call a method on the returned DatabaseMetaData.  Let me know what you think."}, {"count": 5, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 136803, "time": "2010-05-12T06:47:44Z", "creator": "markt@apache.org", "creation_time": "2010-05-12T06:47:44Z", "is_private": false, "text": "I don't know the code that well so feel free to treat these comments with that in mind.\n\nIn no particular order...\n\nIt appears that this patch forces validation to happen even if the user doesn't want it. That could add a fair amount of overhead.\n\nI'd try isValid() before trying isClosed()\n\nThe exception caught in tryIsValid() is rethrown and then silently swallowed. I can see why, but that code looks expensive. I'd probably check earlier to see if the method was available and set a flag I could check (cheaply) later.\n\nIn terms of the issues with borrowConnection() and setupConnection() would it be feasible to check if setupConnection() fails and it if does, try borrowing a new connection? I assume that if borrowConnection() fails then getConnection() should fail."}, {"attachment_id": null, "tags": [], "bug_id": 48817, "is_private": false, "count": 6, "id": 136818, "time": "2010-05-12T12:12:21Z", "creator": "mpassell@grovehillsoftware.com", "creation_time": "2010-05-12T12:12:21Z", "text": "(In reply to comment #5)\nThanks Mark. Those were reasonable points. I'll respond to each.\n\n> It appears that this patch forces validation to happen even if the user doesn't\n> want it. That could add a fair amount of overhead.\nOne of the first things that PooledConnection.validate(int, String) does is call doValidate(validateAction). If someone hasn't turned on testOnBorrow (or whatever property is relevant to the particular validate action), the validation will be skipped.\n\n> I'd try isValid() before trying isClosed()\nI looked at some driver code and it appears that most just return the value of a boolean for isClosed(), so I was thinking I might as well ask the cheapest question first.\n\n> The exception caught in tryIsValid() is rethrown and then silently swallowed. I\n> can see why, but that code looks expensive. I'd probably check earlier to see\n> if the method was available and set a flag I could check (cheaply) later.\nYou're right! That's a good idea. Either you're running in a Java 6 environment or you're not. It shouldn't change over time, so it should be possible to do the check only once and then store the result. I'll think about the best way to do that and then make the change.\n\n> In terms of the issues with borrowConnection() and setupConnection() would it\n> be feasible to check if setupConnection() fails and it if does, try borrowing a\n> new connection? I assume that if borrowConnection() fails then getConnection()\n> should fail.\nThat might work, but if the pool is able to determine that it's about to return a stale connection and just swap in a fresh one behind the scenes, it would make things a lot simpler for the calling code. Also, keep in mind that if the pool has multiple stale connections in it, the caller might otherwise have to call getConnection() repeatedly.\n\nBy the way, I'd be fine with a pluggable Validator approach instead. I just thought this would be simpler and generally applicable. Let me know what you think."}, {"count": 7, "tags": [], "bug_id": 48817, "attachment_id": 25439, "id": 136861, "time": "2010-05-14T11:49:20Z", "creator": "mpassell@grovehillsoftware.com", "creation_time": "2010-05-14T11:49:20Z", "is_private": false, "text": "Created attachment 25439\nAdd Validator interface and references to it where appropriate\n\nHere's an alternative which I actually prefer.  I've added a Validator interface with the following single method:\npublic boolean validate(Connection connection, int validateAction)\n\nI also added get/setValidator() to PoolConfiguration and all of its implementors. When validation runs, if the configuration has a Validator, it's used in place of other forms of validation.  One thing that's nice about this approach is that it pulls the call to Connection.isValid() out of the core code.  Since I know I'll be running in a Java 6 environment, I can safely call the isValid() method directly from my Validator implementation instead of needing to use reflection to preserve Java 5 compatibility."}, {"count": 8, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 136894, "time": "2010-05-16T00:43:03Z", "creator": "fhanik@apache.org", "creation_time": "2010-05-16T00:43:03Z", "is_private": false, "text": "Don't bother with isClosed, that is a simple flag that most drivers implement to return true if and only if close() has been called. It has really nothing to do with the underlying TCP session or the database session."}, {"count": 9, "tags": [], "text": "Any feedback on my second patch?  I've been using it in production for more than a month now with no obvious issues.  I realize that you guys are probably busy getting Tomcat 7 ready otherwise, but if you could take a look sometime soon, that would be great.\n\nThanks,\nMatt", "is_private": false, "id": 138058, "creator": "mpassell@grovehillsoftware.com", "time": "2010-07-01T11:41:13Z", "bug_id": 48817, "creation_time": "2010-07-01T11:41:13Z", "attachment_id": null}, {"count": 10, "tags": [], "text": "(In reply to comment #9)\n> Any feedback on my second patch?  I've been using it in production for more\n> than a month now with no obvious issues.  I realize that you guys are probably\n> busy getting Tomcat 7 ready otherwise, but if you could take a look sometime\n> soon, that would be great.\n\nOne suggested change. I think you should set the validator class name rather than the validator directly so the entire config can be done in the resource. Other than that, looks good.", "is_private": false, "id": 138094, "creator": "markt@apache.org", "time": "2010-07-02T14:10:42Z", "bug_id": 48817, "creation_time": "2010-07-02T14:10:42Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "mpassell@grovehillsoftware.com", "attachment_id": 25849, "text": "Created attachment 25849\nAdd Validator interface and allow users to configure a Validator class name\n\nGood suggestion.  Sorry it took me so long to get to it.  I've attached a patch relative to revision 948073 that uses Validator class names rather than instances in the configuration.  Let me know if it needs any further changes before you consider it ready to apply.", "id": 138917, "time": "2010-08-05T14:23:22Z", "bug_id": 48817, "creation_time": "2010-08-05T14:23:22Z", "is_private": false}, {"count": 12, "tags": [], "text": "Looks good to me. Patch applied. Many thanks.\n\nAny chance of a patch for the docs?", "is_private": false, "id": 138938, "creator": "markt@apache.org", "time": "2010-08-05T18:31:28Z", "bug_id": 48817, "creation_time": "2010-08-05T18:31:28Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 48817, "is_private": false, "id": 138958, "attachment_id": 25858, "creator": "mpassell@grovehillsoftware.com", "creation_time": "2010-08-06T15:17:58Z", "time": "2010-08-06T15:17:58Z", "text": "Created attachment 25858\nAdd description for validatorClassName attribute to doc\n\nGreat!  I've attached a patch for the jdbc-pool.xml file, adding a description of the new validatorClassName attribute.  I had more trouble creating the patch than usual, so here's the text inline, just in case the patch is broken:\n\n    <attribute name=\"validatorClassName\" required=\"false\">\n      <p>(String) The name of a class which implements the <code>org.apache.tomcat.jdbc.pool.Validator</code> interface and provides a no-arg constructor (may be implicit).\n         If specified, the class will be used to create a Validator instance which is then used instead of any validation query to validate connections.\n         The default value is <code>null</code>.\n         An example value is <code>com.mycompany.project.SimpleValidator</code>.\n      </p>\n    </attribute>"}, {"count": 14, "tags": [], "text": "Cheers. Patch applied. It will be in 1.0.9.0 onwards.\n\nThanks again.", "is_private": false, "bug_id": 48817, "id": 139765, "time": "2010-09-08T11:31:42Z", "creator": "markt@apache.org", "creation_time": "2010-09-08T11:31:42Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146040, "time": "2011-04-29T16:35:06Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-04-29T16:35:06Z", "is_private": false, "text": "May I ask why no provision was made for _configuring_ the Validator?  I love the pluggable validation approach, but even the JDBC4 isValid() scenario has a configurable element (the method's timeout value).  I agree that adding setValidatorClassName() makes sense for simple Resource configuration where appropriate, but these being by nature \"custom\" is seems inevitable that a Validator would be likely need to have config injected.\n\nIs there a reason that setValidator() had to be removed?  It would be the most straightforward path for those using IOC-container-wired pools, though it wouldn't help when using a Tomcat Resource definition.\n\nThe only mechanism I can see as things are now would to use a JdbcInterceptor to inject a configured Validator (since props can be set for JdbcInterceptors), but that seems a little convoluted.  And what would be the appropriate hook there?  One could use the poolStarted() event, but wouldn't the initial connections have been started and tested by then?  Or maybe at the first connection creation.\n\nCould we not just make the Validator be wired in the same way as the JdbcInterceptor, where optional properties can be defined?  I can't envision a need for a _chain_ like the interceptors have, but configurable properties would be very useful."}, {"count": 16, "tags": [], "text": "I agree, I will add the setValidator method", "attachment_id": null, "bug_id": 48817, "id": 146041, "time": "2011-04-29T16:45:35Z", "creator": "fhanik@apache.org", "creation_time": "2011-04-29T16:45:35Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146045, "time": "2011-04-29T17:47:17Z", "creator": "fhanik@apache.org", "creation_time": "2011-04-29T17:47:17Z", "is_private": false, "text": "I added this in r1097895"}, {"attachment_id": null, "tags": [], "bug_id": 48817, "is_private": false, "count": 18, "id": 146046, "time": "2011-04-29T23:00:03Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-04-29T23:00:03Z", "text": "Gah!  To my previous comment (#15), I wired up a Validator class which also extends JdbcInterceptor (I'll attach separately).  Since ConnectionPool.init() instantiates each defined JdbcInterceptor and then calls the poolStarted() method, the idea was that the config values could be passed as properties of the JdbcInterceptor, which would then apply those properties to the Validator instance created by setValidatorClassName() in the poolStarted() hook.\n\nInexplicably, though, ConnectionPool.init() does NOT apply the configured JdbcInterceptor properties - it just \"new\"s up an instance and immediately calls poolStarted().  Why doesn't it apply the configuration properties like it does in ConnectionPool.setupConnection(PooledConnection)????  So I can't really think of an easy way to inject a configuration into a Validator without code changes to jdbc-pool.\n\nI'll attempt to attach my example (but now non-functional) Validator implementation to the issue."}, {"count": 19, "tags": [], "bug_id": 48817, "attachment_id": 26944, "is_private": false, "id": 146047, "time": "2011-04-29T23:01:59Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-04-29T23:01:59Z", "text": "Created attachment 26944\nExample JDBC4 Validator/JdbcInjector implementation\n\nSee my previous comment on this bug"}, {"count": 20, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146048, "time": "2011-04-29T23:13:43Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-04-29T23:13:43Z", "is_private": false, "text": "To be clear, please note that the example in #19 will NOT function correctly due to the issues discussed in #18.  It was just to clarify the workaround I was attempting.\n\nThanks for adding setValidator() back!  Though that still won't help those using a  Tomcat Resource definition.  I don't feel qualified to proclaim a \"best of\" solution, particularly with Validator already in \"release\".  Probably the easiest solution would be to augment the internals of setValidatorClassName() to allow a config suffix like JdbcInterceptor.  Maybe an additional ConfigurableValidator interface to allow the params to be passed and leave the implementation to the implementer (as with JdbcInterceptor)?\n\nI'm happy to work up a proposed patch, but I'd prefer someone else weigh in on the best of the many possible approaches."}, {"attachment_id": 26947, "tags": [], "bug_id": 48817, "is_private": false, "count": 21, "id": 146064, "time": "2011-05-02T16:53:57Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-05-02T16:53:57Z", "text": "Created attachment 26947\nPatch ConnectionPool.java to apply JdbcInterceptor properties before calling JdbcInterceptor.poolStarted()\n\nThis proposed patch to ConnectionPool would at least enable the configure-Validator-via-JdbcInterceptor approach, and should probably be there anyway for other JdbcInterceptor scenarios unrelated to configuring Validator instances."}, {"count": 22, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146066, "time": "2011-05-02T17:16:47Z", "creator": "fhanik@apache.org", "creation_time": "2011-05-02T17:16:47Z", "is_private": false, "text": "Patch added to r1098667"}, {"count": 23, "tags": [], "creator": "gtaylor@pgac.com", "attachment_id": 26948, "text": "Created attachment 26948\nUpdated example implementation for Jdbc4 Validator\n\nUpdating earlier example JDBC4 Validator implementation.  I hadn't noticed that *applying* the configured properties is left to the implementation class.  I \"assumed\" some sort of bean-property/reflection thing.\n\nSorry, I was a total doofus for posting the earlier implementation without confirming that the property application actually happened.  I've now tested that this version works (depends on the ConnectionPool patch from my previous comment).\n\nFinally, I'm satisfied that this is a \"good-enough\" solution for Validator configuration.  It's a little awkward/indirect, but it uses existing/tested/documented functionality, which is a Good Thing.  Thanks...", "id": 146067, "time": "2011-05-02T17:53:48Z", "bug_id": 48817, "creation_time": "2011-05-02T17:53:48Z", "is_private": false}, {"count": 24, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146069, "time": "2011-05-02T19:20:37Z", "creator": "fhanik@apache.org", "creation_time": "2011-05-02T19:20:37Z", "is_private": false, "text": "Now you're confusing me, why would a validator be an interceptor?"}, {"attachment_id": 26955, "tags": [], "bug_id": 48817, "is_private": false, "count": 25, "id": 146090, "time": "2011-05-03T21:21:27Z", "creator": "gtaylor@pgac.com", "creation_time": "2011-05-03T21:21:27Z", "text": "Created attachment 26955\nUpdated [again] example implementation for Jdbc4 Validator\n\nMinor tweak to reflect on the implementation class itself instead of the java.sql.Connection interface."}, {"count": 26, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146119, "time": "2011-05-04T15:19:09Z", "creator": "fhanik@apache.org", "creation_time": "2011-05-04T15:19:09Z", "is_private": false, "text": "(In reply to comment #25)\n> Created attachment 26955 [details]\n> Updated [again] example implementation for Jdbc4 Validator\n> \n> Minor tweak to reflect on the implementation class itself instead of the\n> java.sql.Connection interface.\n\nAs I mentioned before, why on would this be an interceptor?"}, {"count": 27, "tags": [], "bug_id": 48817, "attachment_id": null, "id": 146120, "time": "2011-05-04T15:20:13Z", "creator": "fhanik@apache.org", "creation_time": "2011-05-04T15:20:13Z", "is_private": false, "text": "Please stop posting new code to this bug. This bug has been closed and marked fixed as per the original bug.\nOpen a new bug for new bugs/features/enhancements"}]
[{"count": 0, "tags": [], "creator": "czanelli@c-bridge.com", "text": "Here's a snippet of my xml config file for Log4j:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration SYSTEM \"log4j.dtd\">\n\n<configuration>\n\n <appender name=\"A1\" class=\"org.apache.log4j.RollingFileAppender\">\n  <param name=\"File\" value=\"//d://projects/Syncro/develop/log/SyncroLog.log\"/> \n  <param name=\"MaxFileSize\" value=\"1MB\" />\n  <param name=\"MaxBackupIndex\" value=\"1024\" />\n  <param name=\"Append\" value=\"true\" />\t  \n\t\t\n  <layout class=\"org.apache.log4j.PatternLayout\">\n    <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %-17c{2} - %m\\n\"/>\n  </layout>\t    \n </appender>\n...\n\nWhen the SyncroLog.log file is read-only, exceptions are suppressed within Log4j  \ncode and outside application process follows as normal, however with no logging \nbecause no text can be written.\n\nIs there a simple workaround that when DOMConfigurator runs to check if the \ntarget logfile is read-only?\n\n-Chris", "id": 997, "time": "2001-03-05T13:48:53Z", "bug_id": 851, "creation_time": "2001-03-05T13:48:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "\nI think it's the application developers responsability to ensure that logging \ncan proceed. Would it be possible for you to make sure that the log file was \nwriteable? Ceki", "is_private": false, "bug_id": 851, "id": 1036, "time": "2001-03-07T07:19:47Z", "creator": "bugzilla@apache.org", "creation_time": "2001-03-07T07:19:47Z", "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "czanelli@c-bridge.com", "text": "I think there is an arguable point on whether this aspect is a \nresponsibility of the application developer due to the fact that he is \nresponsible for maintaining the configuration data of Log4j or any wrappers \nthereof.  \n\n<Please correct any incorrect assumptions...>\n\nHowever, my argument is that it seems Log4J suppresses IOExceptions in its \nlogXXX methods with respect to FileAppenders.\n  \nLooking at it from a systems architect's view, it seems that it would be the \nresponsibility of a FileAppender to inform an external user that such an \nexception exists.\n  \nI don't believe that a logXXX method should pass an exception up the stack, \nhowever...and I also don't believe that a call to DOMConfigurator:configure() \nshould be responsible for checking potential IOExceptions.  However, I do \nbelieve that the use of a File Appender should be failsafe and there must be \nsome way to propagate an exception before an actual logXXX method is called and \nthe IOException occurs.  The use of java class File and method canWrite() would \nbe a good example of validation...\n\nWhat do you think on this matter?   ", "id": 1040, "time": "2001-03-07T10:27:20Z", "bug_id": 851, "creation_time": "2001-03-07T10:27:20Z", "tags": [], "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 851, "is_private": false, "id": 68402, "time": "2004-12-13T18:01:49Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-13T18:01:49Z", "tags": [], "text": "The code has changed a lot since, errorHandlers etc..."}]
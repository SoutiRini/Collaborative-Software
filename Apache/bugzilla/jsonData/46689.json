[{"count": 0, "tags": [], "bug_id": 46689, "text": "I understand that floating point conversions are not the responsibility of the POI project (bug #30565). Altough I have a related issue: I have a large number in an Excel file, that exceeds the a Java 'int' 's capability (e.g. 95842303093988300). (It is an id of a contract). As HSSFCell.getNumericCellValue() returns a double (no matter that the value is an integer) I have the same problem as in #30565 ('extra digit'), but I just can't leave it that way: 95842303093988300 or 95842303093988304 is a relevant difference...\nIs there any workaround to avoid floating point arithmetic when reading integer (long) values from a cell?", "id": 124765, "time": "2009-02-10T14:17:42Z", "creator": "kisuf@inf.elte.hu", "creation_time": "2009-02-10T14:17:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 46689, "attachment_id": null, "id": 124767, "time": "2009-02-10T16:33:30Z", "creator": "josh@apache.org", "creation_time": "2009-02-10T16:33:30Z", "is_private": false, "text": "The IEEE 'double precision' data type provides around 15.95 decimal digits of precision.  Any arbitrary number (assuming reasonable exponent/scale) can be represented accurately to the first 15 digits, with the 16th digit being nearly right.\n\nIf you use numeric cells there is no way to avoid using IEEE doubles when accessing the values.  Given the above limitations you should not rely on more than 15 digits of accuracy when using numeric cells in Excel(/POI).\n\nLooking at your example from the inside out, the decimal number 95842303093988300 requires 57 bits to express in binary form:\n101010100100000000001000100011110010111110101101111001100\nDoubles have a 53 bit fraction (1 implicit + 52 explicit), so this number is 4 bits too large. In converting to double, the bottom 4 bits are rounded (up) with carry into the next bit resulting in an error of (10000b-01100b) = +4.  This error appears when converting back to a long: 95842303093988304. \n\nSince Excel performs this rounding silently, it may not be immediately apparent where the discrepancy has originated.\n\n\nHave you considered using text cells to store your contract IDs?  Text values are still comparable, but don't support more complex mathematical operations.  This is usually not a concern for PK/ID values.  I'd also suggest adding a standard non-digit prefix (e.g. \"#\" or \"ID-\") to prevent accidental conversion to numeric cell type.\n\n\n\n"}, {"count": 2, "tags": [], "bug_id": 46689, "text": "Unfortunately, the excel file that contains the problematic numbers are out of my control as it is an input for the program. I do store ids as strings inside my system, but no idea how to access a numeric cell input other than using HSSFCell.getNumericCellValue() to achieve the desired 'what you see is what you get'. (I tried to access the cell as a String but it only supported what was in the javadoc: got an exception.)\n\nMy sweetest dream is a HSSFCell.getLongCellValue() that returns a long (maybe rounds floating point numbers to avoid further problems). While you're working on it ;) I will contvert the id column on the problematic rows to string by hand in Excel (probably by exporting it to CSV to enforce string conversion, I don't know yet. I've already tried to change the cell's type from number to string - well let's say that Excel doesn't do the job for me).\n\nThanks for your answer!", "id": 124769, "time": "2009-02-10T23:40:37Z", "creator": "kisuf@inf.elte.hu", "creation_time": "2009-02-10T23:40:37Z", "is_private": false, "attachment_id": null}]
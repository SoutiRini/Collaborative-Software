[{"count": 0, "tags": [], "creator": "w_ambrose@hotmail.com", "text": "I am using the poi-1.8.0-dev package.\n\nThe following is a part of my program.\n\nPOIFSFileSystem fs      =\n\t\t\t\t\tnew POIFSFileSystem(new FileInputStream\n(\"C:\\\\Projects\\\\KPM\\\\POI Test\\\\xls\\\\SimpleForm.xls\"));\n\t\t\t\n\t\t\tHSSFWorkbook wb = new HSSFWorkbook(fs);\n\t\t\tHSSFSheet sheet = wb.getSheet(\"DataCollectionForm\");\n\t\t\tHSSFRow row = null;\n\t\t\tHSSFCell cell = null;\n\t\t\tHSSFName name = null;\n\t\t\tCellReference ref = null;\n\t\t\tint index = 0;\n\t\t\t\n\t\t\t/* Read a locked cell */\n\t\t\tindex = wb.getNameIndex(\"Form_4.1_01\");\n\t\t\tSystem.out.println(\"index = \" + index);\n\t\t\tSystem.out.println(\"count = \" + wb.getNumberOfNames());\n\t\t\tname = wb.getNameAt(index);\n\t\t\tSystem.out.println(\"name = \" + name.toString());\n\t\t\tSystem.out.println(\"name's name = \" + name.getNameName\n());\n\t\t\tSystem.out.println(\"name's sheet = \" + name.getSheetName\n());\n\t\t\tSystem.out.println(\"ref = \" + name.getReference());\n\t\t\tref = new CellReference(name.getReference().substring\n(name.getReference().indexOf(\"!\")+1));\n\t\t\trow = sheet.getRow(ref.getRow());\n\t\t\tcell = row.getCell((short)ref.getCol());\n\t\t\tSystem.out.println(\"The value of Form_4.1_01 is  \" + \ncell.getStringCellValue());\n\nWhen calling name.getReference() function, the IndexOutOfBoundsException was \nthrown as the following:\njava.lang.IndexOutOfBoundsException: Index: 8, Size: 6\n\tat java.util.ArrayList.RangeCheck(Unknown Source)\n\tat java.util.ArrayList.get(Unknown Source)\n\tat org.apache.poi.hssf.model.Workbook.getSheetName(Workbook.java:460)\n\tat org.apache.poi.hssf.model.Workbook.findSheetNameFromExternSheet\n(Workbook.java:1693)\n\tat org.apache.poi.hssf.model.Workbook.getSheetReferences\n(Workbook.java:1678)\n\tat org.apache.poi.hssf.usermodel.HSSFName.getReference\n(HSSFName.java:142)\n\tat TestSimpleForm.main(TestSimpleForm.java:49)\n\nI also found the error caused by field_2_index_to_first_supbook_sheet, inside \nin ExternSheetSubRecord, which is larger than arraylist's size.", "id": 46419, "time": "2003-10-29T06:48:46Z", "bug_id": 24207, "creation_time": "2003-10-29T06:48:46Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "avik@apache.org", "text": "Could you try 2.0pre3. Many changes to named ranges were made in that build. If\nthat does not work, you will need to attach the culprit workbook, otherwise\ndebugging is impossible. ", "id": 46420, "time": "2003-10-29T07:11:55Z", "bug_id": 24207, "creation_time": "2003-10-29T07:11:55Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 24207, "text": "I've got exactly the same problem as the original report,\nand am using version 2.5.1-final.  I've attached a test\ncase.  Does anyone have a workaround for this in the\nmeantime?\n\nThanks,\nDave Combs", "id": 70091, "attachment_id": null, "creator": "combs@edgedynamics.com", "creation_time": "2005-01-26T00:37:53Z", "time": "2005-01-26T00:37:53Z", "is_private": false}, {"count": 3, "tags": [], "text": "Created attachment 14103", "attachment_id": 14103, "bug_id": 24207, "id": 70092, "time": "2005-01-26T00:39:37Z", "creator": "combs@edgedynamics.com", "creation_time": "2005-01-26T00:39:37Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 24207, "attachment_id": 14103, "text": "Comment on attachment 14103\n\n\nthis needed to be removed.", "id": 70123, "time": "2005-01-26T22:03:22Z", "creator": "combs@edgedynamics.com", "creation_time": "2005-01-26T22:03:22Z", "is_private": false}, {"count": 5, "tags": [], "creator": "sander@temme.net", "attachment_id": null, "id": 70153, "time": "2005-01-27T07:13:24Z", "bug_id": 24207, "creation_time": "2005-01-27T07:13:24Z", "is_private": false, "text": "Attachment removed by administrator per request by Dave Combs."}, {"count": 6, "tags": [], "creator": "jianmang@stachanov.com", "text": "I'm not sure I have encoutered the same problem but it looks to me the root\ncauses are the same\n\nimport org.apache.poi.hssf.usermodel.*;\nimport org.apache.poi.poifs.filesystem.*;\nimport org.apache.poi.hssf.util.*;\nimport java.io.*;\n\npublic class TestPOI\n{\n  public static void main(String[] argv){\n    try{\n      POIFSFileSystem fs=new POIFSFileSystem(new FileInputStream(argv[0]));\n      HSSFWorkbook wb = new HSSFWorkbook(fs);\n      System.out.println(wb.getNumberOfNames());\n      for(int i=0;i<wb.getNumberOfNames();i++){\n        HSSFName nm=wb.getNameAt(i);\n          AreaReference areaRef=new AreaReference(nm.getReference());\n      }\n    }catch(Exception e){\n      e.printStackTrace();\n    }\n  }\n}\n\ncreate a fresh new Excel book and put two names in it say a at A1 and b at A2.\nrun the program against the book and it will be fine.\n\ndelete the second row so the a at A2 will disapepar. save the book and run the\nprogram against the modified book. you will get something like\n\n[WARNING] Unknown Ptg 3c (60)\n2\njava.lang.ArrayIndexOutOfBoundsException: 5\n        at\norg.apache.poi.hssf.util.CellReference.separateRefParts(CellReference.java:111)\n        at org.apache.poi.hssf.util.CellReference.<init>(CellReference.java:35)\n        at org.apache.poi.hssf.util.AreaReference.<init>(AreaReference.java:33)\n        at TestPOI.main(TestPOI.java:15)\n", "id": 72266, "time": "2005-03-12T02:33:51Z", "bug_id": 24207, "creation_time": "2005-03-12T02:33:51Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 24207, "is_private": false, "text": "Avik,\n\nDont know if you have a change to lok at this one. I dont have much experience\nwith the CellReference side of things. Basically what is happening is that the\ndelete of the second row causes the name to point to a cell that no longer\nexists, hence the cell reference becomes something like:\n\n=Sheet1!#REF!\n\nNow it appears to me at least that the AreaReference and the CellReference\nclasses do not handle invalid cell references such as this.\n\nJason", "id": 84699, "time": "2006-01-17T10:24:34Z", "creator": "jheight@apache.org", "creation_time": "2006-01-17T10:24:34Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 24207, "attachment_id": null, "is_private": false, "id": 84702, "time": "2006-01-17T11:22:57Z", "creator": "avik@apache.org", "creation_time": "2006-01-17T11:22:57Z", "text": "Indeed, CellReference etc does not handle invalid refs very well. I'll take a \nlook.  "}, {"count": 9, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "id": 116728, "time": "2008-05-17T03:45:47Z", "bug_id": 24207, "creation_time": "2008-05-17T03:45:47Z", "is_private": false, "text": "We still have the described behaviour in poi-3.1-beta1. \nIf a named range points to a deleted cell then an attempt to contruct AreaReference results in ArrayIndexOutOfBoundsException.\nExcel does not delete names when a cell is deleted and workbook can contain such \"invalid\" named ranges. \n\nI added HSSFName.isDeleted() which checks if the name points to a cell that no longer exists. \nWhen iterating over the names user should check if the name is valid:\n\nif(hssfName.isDeleted()){\n  //named range points to a deleted cell. \n} else {\n  AreaReference ref1 = new AreaReference(hssfName.getReference());\n}\n\nYegor"}]
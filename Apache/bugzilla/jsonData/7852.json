[{"count": 0, "text": "I'm not sure why the code works this way, but I believe it's wrong.  On\nline 279 of org.apache.catalina.connector.http.HttpResponseImpl.java,\nthe following code is found:\n\n        if (getStatus() < HttpServletResponse.SC_BAD_REQUEST) {\n            if ((!isStreamInitialized()) && (getContentLength() == -1)\n                && (getStatus() >= 200)\n                && (getStatus() != SC_NOT_MODIFIED)\n                && (getStatus() != SC_NO_CONTENT))\n                setContentLength(0);\n        } else {\n            setHeader(\"Connection\", \"close\");\n        }\n\nThis means that any time there's a 4xx or 5xx, the connection is closed.\nThis seems to be strange behavior, since the HTTP/1.1 spec states:\n\n\"Persistent HTTP connections have a number of advantages: ... errors can\nbe reported without the penalty of closing the TCP connection.\"\n\nTomcat's behavior isn't technically illegal, but it's a violation of the\nintent of the specification.\n\nMy small company has an application that occasionally needs to act as a\ncommunications proxy.  We've found that the code above makes it\nimpossible to complete an NT authentication because Tomcat closes the\nconnection for a 401.  I'm sure some will be happy enough to mumble\nabout Microsoft. :(\n\nAnyway, we've had enough luck changing SC_BAD_REQUEST to\nSC_INTERNAL_SERVER_ERROR.  I suspect that the best behavior would be to\nremove the if and the else clause altogether.", "bug_id": 7852, "attachment_id": null, "id": 13063, "time": "2002-04-08T20:44:39Z", "creator": "andyg@presedia.com", "creation_time": "2002-04-08T20:44:39Z", "tags": [], "is_private": false}, {"count": 1, "text": "Closing the connection for whatever reason is always valid in HTTP/1.1, esp \nwhen announcing that you'll be doing so. For example, some HTTP/1.1 always add \nthe connection: close header in the response.\nSo it does not violate any intent, and is perfectly legal.\n\nYou should never rely on the connection being persisted for any operation (or \nthis makes your client app non-HTTP compliant).\n\nIf you hack the code there, it WILL create problems, and make Tomcat generate \nnon-compliant HTTP responses (yes, the code is there for a reason).\n\nCoyote does not suffer from the limitations of the old HTTP connector, and is \nable to always persist the connection.", "bug_id": 7852, "is_private": false, "id": 13064, "time": "2002-04-08T20:52:03Z", "creator": "remm@apache.org", "creation_time": "2002-04-08T20:52:03Z", "tags": [], "attachment_id": null}]
[{"count": 0, "attachment_id": null, "bug_id": 6293, "is_private": false, "id": 10420, "time": "2002-02-07T05:14:42Z", "creator": "hans@gefionsoftware.com", "creation_time": "2002-02-07T05:14:42Z", "tags": [], "text": "The TLVs startElement() method goes through all its tests no matter which tag \nlibrary an element belongs to. This results in the hasDanglingScope() method\nreturning true for a perfectly valid <jsp:useBean> action. This is the case for\nthe TLVs for all JSTL libraries.\n\nThe solution is to add this right after the getLocalPart() call:\n\n  // Just return if its an element with a foreign prefix\n  if (!qn.startsWith(prefix + \":\")) {\n      return;\n  }\n\nWith this addition, the JSP_TEXT test can likely be removed."}, {"count": 1, "tags": [], "bug_id": 6293, "attachment_id": null, "is_private": false, "id": 10445, "time": "2002-02-07T14:01:39Z", "creator": "bayern@essentially.net", "creation_time": "2002-02-07T14:01:39Z", "text": "Thanks for the report, Hans.  I have fixed the error, although I implemented\na different check than the one you suggest.  The validator wouldn't work \nproperly if I added the check you suggest:  startElement() may legitimately be\nconcerned with elements that are not of the taglib's prefix.  For instance,\nit may desire to block ALL content within certain tags.  (Consider\n\n  <c:choose>\n     <form>\n        ...\n\n)\n\nYou may have misunderstood the check for <jsp:text>:  the goal isn't to rule\nout and ignore all text in the page, but as the comment says, to \navoid \"distinguishing between it and its characters.\"  That is, I wouldn't\nwant a text element that contained nothing but whitespace, as --\n\n  <jsp:text>  </jsp:text>\n\n-- to invalidate a <c:choose> tag.  The easiest way to do this is to ignore\n<jsp:text> and </jsp:text>, and instead logically merge them with the characters\nthey contain (or oblivion if they contain no characters), given our constraints.\n\nThanks again."}]
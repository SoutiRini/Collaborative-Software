[{"count": 0, "tags": [], "creator": "info@opendoorlogistics.com", "text": "SXSSF creates a temporary file when its saved using the class org.apache.poi.util.TempFile. When a tempfile is first created, the directory name is saved within this class, in the static singleton DefaultTempFileCreationStrategy object. This directory is only created on the first save and its never checked if this directory still exists, as you can see below:\n\n        public File createTempFile(String prefix, String suffix) throws IOException {\n            // Identify and create our temp dir, if needed\n            if (dir == null)\n            {\n                dir = new File(System.getProperty(\"java.io.tmpdir\"), \"poifiles\");\n                dir.mkdir();\n                if (System.getProperty(\"poi.keep.tmp.files\") == null)\n                    dir.deleteOnExit();\n            }\n\nThe directory is automatically deleted when the virtual machine exits. (I believe the directory is also created automatically when you load an xlsx using the event api).\n\nSo, if you have two applications both loading and saving excels and you then close one this directory is automatically deleted. Now both applications used exactly the same temp directory. Therefore if you try to save your file in the second application which is still open, an IOException is instead raised as it tries to create the tmp file in the no-longer existing directory. The user cannot save their xlsx any longer. So basically you cannot have two applications open on a computer at the same time which load/save using POI (or at least you can, but you have to close them both at the same time as one left open will no longer function).\n\nI hope my explanation is clear. Basically you need to add a check to this function that the directory still exists and mkdir if not...", "id": 179049, "time": "2014-11-11T17:06:34Z", "bug_id": 57200, "creation_time": "2014-11-11T17:06:34Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 179050, "time": "2014-11-11T17:27:06Z", "bug_id": 57200, "creation_time": "2014-11-11T17:27:06Z", "is_private": false, "text": "the temp file strategy is pluggable, could you not provide your own to handle the case of multiple JVMs starting/stopping and tidying up after each other?"}, {"count": 2, "tags": [], "creator": "info@opendoorlogistics.com", "attachment_id": null, "id": 179051, "time": "2014-11-11T17:36:25Z", "bug_id": 57200, "creation_time": "2014-11-11T17:36:25Z", "is_private": false, "text": "Thanks - I'll take a look at how you plug different temp file strategies in (do you have a handy link?) as a fix for my own application. \n\nHowever the default behaviour of POI will break whenever two applications are open using it so presumably this needs to be fixed within POI itself going forward. Particularly as this could even be two completely different applications which you wouldn't ever expect to interact.\n\nThe default behaviour should be a unique tmp directory per virtual machine using POI to ensure no unexpected interactions occur between POIs in different virtual machines."}, {"count": 3, "tags": [], "creator": "yaniv@kundas.net", "attachment_id": 32537, "id": 181412, "time": "2015-03-01T13:38:40Z", "bug_id": 57200, "creation_time": "2015-03-01T13:38:40Z", "is_private": false, "text": "Created attachment 32537\nRemoves usage of auto-deleted temp sub-directory\n\nThis removes the behavior of using a specific directory that gets deleted on VM exit - resolving the problem described in the issue of running more than one VM using POI on the same machine.\nUsing the default temp dir is much simpler and less error-prone.\n\nThis patch does NOT solve the memory leak caused by deleteOnExit(), which should be addressed in a wider scope, as it transfers responsibility to the classes using TempFile and further on to POI users."}, {"count": 4, "tags": [], "bug_id": 57200, "attachment_id": null, "text": "Porting workaround from #57947 here for reference:\n\nmkdir /tmp/poifiles\ntouch /tmp/poifiles/.dontdeleteonexitonnonuniquedirectories\n\nWorked for me until the fix.", "id": 184463, "time": "2015-08-11T06:17:20Z", "creator": "htung@palantir.com", "creation_time": "2015-08-11T06:17:20Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57200, "attachment_id": null, "text": "Issue:\nWe've got two long-running parallel processes creating several Excel files every few minutes via SXSSF.\nAfter one of the processes terminates the other one cannot write Excel files anymore due to the deletion of folder \"C:\\Windows\\Temp\\poifiles\\\".\n\nWork-around:\nAs a work-around we call the processes with different \"java.io.tmpdir\" system property values to use separate temporary folders.\nWe do not use \"poi.keep.tmp.files=true\" as we want the temporary files to be deleted.\n\nHowever, this is no long-term solution for us as our program is normally installed by the customer who can run as many parallel processes as he wants. We can't configure different temp folders for all of these.\n\nPossible solutions:\na. Use temp folder \"java.io.tmpdir\" instead of its sub-folder \"poifiles\".\nb. Use a unique temp folder name for each process instead of \"poifiles\".\nc. Never delete sub-folder \"poifiles\".\nd. Delete folder \"poifiles\" only if the user explicitely sets a corresponding system property, e.g. \"poi.delete.tmp.dirs\" (setting this property must also delete the contained temporary files even if \"poi.keep.tmp.files\" is specified).", "id": 185698, "time": "2015-10-08T11:42:40Z", "creator": "Oliver.Moeller@gmx.de", "creation_time": "2015-10-08T11:42:40Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57200, "text": "Another workaround that we found is to put a dummy-file into the temporary poifiles-directory, then the deletion of the directory will not happen and multiple processes can work with the same tempdir.", "id": 185700, "attachment_id": null, "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-08T13:30:29Z", "time": "2015-10-08T13:30:29Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 57200, "text": "*** Bug 57947 has been marked as a duplicate of this bug. ***", "count": 7, "id": 189407, "time": "2016-03-12T15:38:38Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-12T15:38:38Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57200, "attachment_id": null, "text": "As of r1734719 we do not delete the main temp-directory any more to avoid problems when multiple applications are using tempfiles in POI.\n\nThis problem became more pressing lately because now not only SXSSF uses TempFile, but also core ZipPackage, see bug 57947 for a related bug report.", "id": 189410, "time": "2016-03-12T17:04:49Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-12T17:04:49Z", "is_private": false}, {"count": 9, "tags": [], "creator": "yaniv@kundas.net", "attachment_id": null, "id": 190747, "time": "2016-05-05T13:58:58Z", "bug_id": 57200, "creation_time": "2016-05-05T13:58:58Z", "is_private": false, "text": "This does not solve the problem of a long-running process (e.g. server) that is trying to create the poifiles temp directory only once during its lifetime.\n\nIn the event the directory gets deleted by an external process (temp file cleaner) while the server process is running, the next temp file creation will fail.\n\nPossible solutions:\n1) Lock the poifiles directory after it is created (this can probably be done easily by keeping an open file in the directory for the lifetime of the JVM)\n2) Ensure that poifiles is created each time before creating a temp file\n3) Stop using the poifiles dir - segregating temp files serves no purpose other than perhaps ease of debugging.\n\nI'll be happy to provide a patch - just reply if one of the solutions I suggested is acceptable."}, {"attachment_id": null, "tags": [], "bug_id": 57200, "text": "Just ran into this with our java server app on Linux/RHEL, featuring Excel report generation that's used once in a blue moon.. External to the Java process, cron.daily runs tmpwatch to clean up /tmp, taking /tmp/poifiles with it. \n\nFor a workaround, we'll probably use a pluggable strategy as suggested in the comments. I've tested on a direct fork of DefaultTempFileCreationStrategy from POI source, with the only modification being the addition of || !dir.exists() in createTempFile. This seems to work OK so far, and is essentially Yaniv's suggestion #2 I guess. #1 seems like a less safe alternative to me, with all file systems not necessarily behaving the same. And deletions then making /tmp/poifiles essentially invisible on Linux systems until the java process terminates and releases its file descriptors.", "count": 10, "id": 193404, "time": "2016-08-30T10:41:44Z", "creator": "audunroe@gmail.com", "creation_time": "2016-08-30T10:41:44Z", "is_private": false}, {"count": 11, "tags": [], "creator": "onealj@apache.org", "text": "There are a couple suggested strategies in the TempFileCreationStrategy javadocs\nhttps://poi.apache.org/apidocs/org/apache/poi/util/TempFileCreationStrategy.html\n\nFeel free to subclass TempFileCreationStrategy to something that implements the desired behavior -- store poifiles unsegregated from other system temporary files which are cleaned up by a cron job (I like that solution for a long-running server use case), or have Java do the cleanup either with a timer, a fixed-length container, or something else.\n\nThen it's as simple as TempFile.setTempFileCreationStrategy(YourTempFileCreationStrategy).\n\nIf you need a more flexible solution, you need not restrict yourself to TempFile.\n\nWe use TempFile and DefaultTempFileCreationStrategy for our unit tests, which is the main purpose for them existing--we never bothered to mark them as @Internal or package-private, but it is unlikely that we would internalize them at this point.\n\nI do not see a huge benefit implementing classes that are not specific to handling Microsoft Office files in POI. I would rather see temporary file creation and deletion moved to a general purpose I/O library so that these classes could appeal to a wider audience. Any ideas if such a library exists beyond java.io and java.nio?", "id": 193588, "time": "2016-09-10T06:14:30Z", "bug_id": 57200, "creation_time": "2016-09-10T06:14:30Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 57200, "text": "It looks like r1746932 (which fixed this issue for failing tests) should solve the root cause by trying to create the temp dir on each temp file creation.", "count": 12, "id": 193978, "time": "2016-09-25T07:29:10Z", "creator": "yaniv@kundas.net", "creation_time": "2016-09-25T07:29:10Z", "is_private": false}, {"count": 13, "tags": [], "text": "Yes, it seems solution 2) \"Ensure that poifiles is created each time before creating a temp file\" was implemented via r1746932, thus this should be fixed now.\n\nOther ways can be added as custom strategy as described by Javen.", "is_private": false, "bug_id": 57200, "id": 194765, "time": "2016-11-01T20:13:33Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-11-01T20:13:33Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 43940, "text": "We format a lot of double values to strings for PDF and PostScript output. We\ncurrently use DecimalFormat in a problematic way (DecimalFormat is not\nthread-safe). It also doesn't quite cover the requirements I have for the method\nin that particular context. Furthermore, this has shown as a minor hotspot in\nprofiling sessions.\n\nThe task is to write an implementation of the following method:\nstatic void formatDouble(double value, int decimals, int precision, StringBuffer\ntarget)\n\nvalue: the double value\ndecimals: the number of decimal places behind the decimal point\nprecision: the maximum precision for small values. If the value is between -1\nand +1, the precision needs to be increased up to the number of decimal places\nindicated by this parameter. This is used in contexts where transformation\nmatrices scale the content and a higher precision might be required.\ntarget: the formatted characters are appended to the given StringBuffer. A\nStringBuffer is chosen for efficiency so the number of String concatenations can\nbe reduced if possible. A wrapper method returning a String is easily written\naround this method.\n\nThe goal of this method is to have a compact representation of a double value\nwhile adressing accuracy requirements in the usage context.\n\nthe decimal point is &#x002E; (\".\", PERIOD) (this is not dependent on the user's\nlocale)\n\nA few examples (consider decimals being 4 and precision being 8):\n0.0 should be rendered as \"0\"\n0.1 should be rendered as \"0.1\"\n1234.1 should be rendered as \"1234.1\"\n1234.1234567 should be rendered as \"1234.1235\" (note the trailing 5! Rounding!)\n1234.00001 should be rendered as \"1234\"\n0.00001 should be rendered as \"0.00001\" (here you see the effect of the\n\"precision\" parameter.\n0.00000001 should be rendered as \"0.00000001\".\n0.000000001 should be rendered as \"0\".\n\nAcceptance criteria:\n- The method has to prove to be faster than new DecimalFormat(\"0.######\", new\nDecimalFormatSymbols(Locale.US)).format(value) on Sun Java 1.4, 1.5 an 6.0.\n- The method must be thread-safe.\n- The method must have a javadoc comment.\n- It must be accompanied by a JUnit TestCase testing all aspects of the method.\n- It should not depend on any additional library not already in the dependency\nlist of Apache XML Graphics Commons (its destination in the end).\n\nAny volunteers? The prize: eternal glory and a big \"thank you\" from me! ;-)\n\nOtherwise, this is just a reminder for myself.", "id": 110991, "time": "2007-11-22T09:06:30Z", "creator": "jeremias@apache.org", "creation_time": "2007-11-22T09:06:30Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "adelmelle@apache.org", "text": "\nPerformed no timings or comparisons yet, but the result is OK for the mentioned cases. \nHow about:\n\n    public static void formatDouble(\n                            double source, \n                            int decimals, \n                            int precision, \n                            StringBuffer target) {\n        \n        boolean isPositive = (source >= 0);\n        long intPart = (long) (isPositive ? Math.floor(source) : Math.ceil(source));\n        int scale = (intPart >= 1) ? decimals : precision;\n        long fracPart = (long) Math.abs(Math.round((source - intPart) * Math.pow(10, scale)));\n        \n        if (intPart != 0 || fracPart != 0) {\n            /* non-zero value */\n            if (!isPositive) {\n                /* negative value, insert sign */\n                target.append('-');\n            }\n            /* append integer part*/\n            target.append(intPart);\n            if (fracPart != 0) {\n              /* append fractional part */\n                target.append('.');\n                /* insert leading zeroes */\n                while (fracPart < Math.pow(10, --scale)) {\n                    target.append('0');\n                }\n                target.append(fracPart);\n                /* remove trailing zeroes */\n                for (int i = target.length(); --i >= 0 && target.charAt(i) == '0'; ) {\n                    target.deleteCharAt(i);\n                }\n            }\n        } else {\n            target.append('0');\n        }\n    }\n\n", "id": 111052, "time": "2007-11-24T04:31:24Z", "bug_id": 43940, "creation_time": "2007-11-24T04:31:24Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "\nFurther info: formatting 50000 random doubles\n\n    formatDouble(source, 4, 8, target) [216ms]\n\nseems to be slightly faster than \n\n    target.append(Double.toString(source)) [236ms]\n\nwhile having the benefit of the decimals and precision arguments.\n\nIt is also almost twice as fast as\n\n    DecimalFormat df = new DecimalFormat(\"0.########\", new DecimalFormatSymbols(Locale.US));\n    for (int i = 50000; --i >= 0; ) {\n       ...\n       target.append(df.format(source));\n    }\n\nwhich takes 421ms on my end.\n\nTests run on Apple JVM 1.4.2", "id": 111057, "time": "2007-11-24T05:03:10Z", "creator": "adelmelle@apache.org", "creation_time": "2007-11-24T05:03:10Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 43940, "text": "(In reply to comment #1)\n\nSlight correction\n>             /* append integer part*/\n>             target.append(intPart);\n\nShould be:\n      target.append(Math.abs(intPart));\n", "id": 111059, "attachment_id": null, "creator": "adelmelle@apache.org", "creation_time": "2007-11-24T05:16:53Z", "time": "2007-11-24T05:16:53Z", "is_private": false}, {"count": 4, "tags": [], "creator": "adelmelle@apache.org", "text": "\n... and one more correction ;-)\n\nThe scale should also depend on whether Math.abs(intPart) > 1.\n\nIncreasing the number of iterations by a factor of 10, the difference with Double.toString() remains the \nsame. Double.toString() is sometimes faster, probably as a result of the values generated by \nMath.random().\nThe difference with DecimalFormat.format(), on the other hand increases. 1650-1700ms vs. almost \n4000ms for the latter. I suspect this difference to be caused by the fact that DecimalFormat.format() is \nan instance method, where the other two are statics.\n", "id": 111060, "time": "2007-11-24T05:42:32Z", "bug_id": 43940, "creation_time": "2007-11-24T05:42:32Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Created attachment 25508\nThe proposed patch\n\nAdd an implementation of the format method as described.\nThe main format method is split between formatFast and formatPrecise,\nusing one or the other depending on the source and precision input.\n\nI will attach a test case shortly after.", "is_private": false, "id": 137273, "creator": "julien.ayme@gmail.com", "time": "2010-06-02T11:16:04Z", "bug_id": 43940, "creation_time": "2010-06-02T11:16:04Z", "attachment_id": 25508}, {"count": 6, "attachment_id": 25509, "bug_id": 43940, "is_private": false, "id": 137274, "time": "2010-06-02T11:17:39Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-06-02T11:17:39Z", "tags": [], "text": "Created attachment 25509\nThe test case\n\nThe test case contains a simple test (with fixed values), a random test, and a performance comparison (which is disabled)."}, {"count": 7, "tags": [], "creator": "julien.ayme@gmail.com", "text": "Comment on attachment 25508\nThe proposed patch\n\nChanged MIME Type to text/plain", "id": 137275, "time": "2010-06-02T11:19:08Z", "bug_id": 43940, "creation_time": "2010-06-02T11:19:08Z", "is_private": false, "attachment_id": 25508}, {"count": 8, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "Maybe this bug should be put in XML Graphics Commons instead of FOP, so that all the XML Graphics projects would benefit from it.\n\nWhat do you think?", "id": 137276, "time": "2010-06-02T11:20:56Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-06-02T11:20:56Z", "is_private": false}, {"count": 9, "tags": [], "creator": "julien.ayme@gmail.com", "text": "Created attachment 25585\nPatch for PSGenerator using the new class", "id": 137568, "time": "2010-06-11T07:53:00Z", "bug_id": 43940, "creation_time": "2010-06-11T07:53:00Z", "is_private": false, "attachment_id": 25585}, {"count": 10, "tags": [], "bug_id": 43940, "text": "Created attachment 25586\nPatch for PDFNumber using the new class", "id": 137569, "time": "2010-06-11T07:53:43Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-06-11T07:53:43Z", "is_private": false, "attachment_id": 25586}, {"count": 11, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "We could also use the new fast class in PCLGenerator and in IFUtil. (I will provide the patchs later if this is required).", "id": 137570, "time": "2010-06-11T07:56:01Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-06-11T07:56:01Z", "is_private": false}, {"count": 12, "tags": [], "text": "Nice job, Julien.\n\nI reviewed DoubleFormatUtil and DoubleFormatUtilTest. DoubleFormatUtil contains requested static method formatDouble, and few other utility methods that may be used for double maniupation.\n\nAs test case shows, all requested (and some additional) examples are formatted right:\n\n+ 0.0 should be rendered as \"0\" (true)\n+ 0.1 should be rendered as \"0.1\" (true)\n+ 1234.1 should be rendered as \"1234.1\" (true)\n+ 1234.1234567 should be rendered as \"1234.1235\" (note the trailing 5! Rounding!)\n+ 1234.00001 should be rendered as \"1234\" (true)\n+ 0.00001 should be rendered as \"0.00001\" (here you see the effect of the\n+ \"precision\" parameter. (true, need to add test case)\n+ 0.00000001 should be rendered as \"0.00000001\". (true)\n+ 0.000000001 should be rendered as \"0\". (true)\n\nAlso, acceptance criteria are fulfilled:\n\n+ The method has to prove to be faster than new DecimalFormat(\"0.######\", new\nDecimalFormatSymbols(Locale.US)).format(value) on Sun Java 1.4, 1.5 an 6.0. (true)\n\n1.4.2_05 - 672 ms for formatDecimal compared to 1782 ms ms for DecimalFormat.format\n1.5.0_11 - 562 ms for formatDecimal compared to 1625 ms for DecimalFormat.format\n1.6.0_24 - 485 ms for formatDecimal compared to 1188 ms for DecimalFormat.format\n\nTested on Windows XP SP3, Intel Core 2 Duo, E6550, 2.33 GHz.\n\n\n+ The method must be thread-safe. (true)\n\nStatic method, using only local variables.\n\n+ The method must have a javadoc comment. (true)\n+ It must be accompanied by a JUnit TestCase testing all aspects of the method. (true)\n+ It should not depend on any additional library not already in the dependency (true)\nlist of Apache XML Graphics Commons (its destination in the end).\n\nCommiters, could you please add attachments 1 and 2 to the code base. Note that attachments 1 and 2 are for packages org.apache.xmlgraphics.util. If you prefer putting them into package org.apache.fop.util, please change the package declaration.\n\n\nAttachments 3 and 4 are not tested, I propose that those attachments be part of solution for bug #51150.", "is_private": false, "id": 148214, "creator": "ognjen.d.blagojevic@gmail.com", "time": "2011-07-27T13:58:53Z", "bug_id": 43940, "creation_time": "2011-07-27T13:58:53Z", "attachment_id": null}, {"count": 13, "tags": [], "text": "While looking at the patch something struck me as odd in the requirements. Taking the same example of decimals being 4 and precision 8, 1.00001 will be rounded to 1, while 0.99999999 will be kept as is. Yet the latter is much closer to 1 than the former (1000 times, to be precise). So if rounding had to be done, that would rather have to be the other way round, that is: keep 1.00001 as is and round 0.99999999 up to 1.\n\nIt seems to me that if drawing commands are used with numbers around 1, then the result is likely to look sub-optimal. Especially since transformation matrices can potentially scale up rounding errors quite a bit.\n\nAt the other end of the spectrum, 12345678901.2345 will be output as is (15 significant digits), while 1.23456789012345 will be rounded to 1.2346 (5 significant digits). What justifies to have 15 significant digits on one hand, and only 5 on the other hand?\n\nI understand that this exercise has to do with outputting real numbers to PDF or PostScript (or other formats). According to the PDF Reference, Acrobat uses single-precision floating-point numbers to represent reals (the 'float' type in Java). Given that a float has approximately 8 significant digits \u2014which is actually what the PostScript Reference puts in its \"Implementation Limits\" section\u2014 I suggest that we use this as the sole parameter.\n\nNow, would we really want this parameter to be configurable? Using a smaller number of significant digits probably makes no sense; using a higher number may allow to achieve higher precision with those applications (viewers or printers) that go beyond Acrobat and use doubles to represent real numbers. Such applications may actually become more and more common with the rise of 64-bit processors. Then again, will that increased precision make a significant difference in the context of drawing graphics?\n\nAny thoughts on this are welcome. As a side note, if we choose to fix the precision to 8 then the implementation becomes almost trivial: just convert the double into a float and 'de-scientificize' the output of toString.\n\nThanks,\nVincent", "is_private": false, "bug_id": 43940, "id": 152319, "time": "2011-12-20T15:00:14Z", "creator": "vhennebert@gmail.com", "creation_time": "2011-12-20T15:00:14Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 43940, "is_private": false, "text": "resetting P2 open bugs to P3 pending further review", "id": 157427, "time": "2012-04-07T01:42:48Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:42:48Z", "attachment_id": null}, {"count": 15, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "(In reply to comment #5)\n> Created attachment 25508 [details]\n> The proposed patch\n> \n> Add an implementation of the format method as described.\n> The main format method is split between formatFast and formatPrecise,\n> using one or the other depending on the source and precision input.\n> \n> I will attach a test case shortly after.\n\nhi julien, in order to commit your non-trivial patch, it is necessary to have you submit an individual contributor license agreement, about which see http://www.apache.org/licenses/icla.txt; once you submit and you have been listed http://people.apache.org/committer-index.html#unlistedclas, then i can proceed to commit your patch to xmlgraphics-commons; thanks, glenn", "id": 157746, "time": "2012-04-09T18:44:12Z", "creator": "gadams@apache.org", "creation_time": "2012-04-09T18:44:12Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 43940, "text": "increase priority for bugs with a patch", "id": 157860, "attachment_id": null, "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:21:16Z", "time": "2012-04-11T03:21:16Z", "is_private": false}, {"count": 17, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 158430, "time": "2012-04-25T16:30:40Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2012-04-25T16:30:40Z", "tags": [], "text": "Other than o.a.f.pdf.PDFNumber, I found two more occurrences of DecimalFormatCache:\n\n1. o.a.f.pdf.PDFColorHandler\n2. o.a.f.render.intermediate.IFUtil\n\nThose need to have DecimalFormatCache appropriately replaced with DecimalFormatUtil, before we can safely remove DecimalFormatCache.\n\nI am working on the patches for those two classes."}, {"count": 18, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 158434, "time": "2012-04-25T17:05:23Z", "creator": "gadams@apache.org", "creation_time": "2012-04-25T17:05:23Z", "tags": [], "text": "(In reply to comment #17)\n> Other than o.a.f.pdf.PDFNumber, I found two more occurrences of\n> DecimalFormatCache:\n> \n> 1. o.a.f.pdf.PDFColorHandler\n> 2. o.a.f.render.intermediate.IFUtil\n> \n> Those need to have DecimalFormatCache appropriately replaced with\n> DecimalFormatUtil, before we can safely remove DecimalFormatCache.\n> \n> I am working on the patches for those two classes.\n\njust a reminder, but i will need a ICLA filed by Julien in order to apply his patch; see comment 15"}, {"count": 19, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "(In reply to comment #18)\n> (In reply to comment #17)\n> > Other than o.a.f.pdf.PDFNumber, I found two more occurrences of\n> > DecimalFormatCache:\n> > \n> > 1. o.a.f.pdf.PDFColorHandler\n> > 2. o.a.f.render.intermediate.IFUtil\n> > \n> > Those need to have DecimalFormatCache appropriately replaced with\n> > DecimalFormatUtil, before we can safely remove DecimalFormatCache.\n> > \n> > I am working on the patches for those two classes.\n> \n> just a reminder, but i will need a ICLA filed by Julien in order to apply his\n> patch; see comment 15\n\nPlease also see comment 13. I think some modifications to the patch are necessary.\n\nVincent", "id": 158435, "time": "2012-04-25T17:17:17Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-04-25T17:17:17Z", "is_private": false}, {"count": 20, "tags": [], "creator": "ognjen.d.blagojevic@gmail.com", "text": "Vincent,\n\n(In reply to comment #19)\n> Please also see comment 13. I think some modifications to the patch are\n> necessary.\n\nI don't know why Jeremias asked for two parameters for number of decimal places (one general, and one for [-1,+1] range). Maybe he planned to use this patch also for \"transformation matrices\" with values in range [-1,+1], but that's just a guess.\n\nAnyway, I believe that we could use this patch without problems since it really does not change current behavior of the trunk. The trunk will always call format method with those two parameters being equal: (3,3), (4,4), (8,8), etc.\n\nIf you think that there should be change in the way FOP handles doubles, in terms of always using 8 decimal places, is it possible to open separate issue? I would really like to close this one, and potentially solve memory leak problems introduced by ThreadLocal.\n\n-Ognjen", "id": 158441, "time": "2012-04-25T22:26:51Z", "bug_id": 43940, "creation_time": "2012-04-25T22:26:51Z", "is_private": false, "attachment_id": null}, {"count": 21, "tags": [], "text": "Glenn,\n\n(In reply to comment #18)\n> just a reminder, but i will need a ICLA filed by Julien in order to apply his\n> patch; see comment 15\n\nI understand. Let me test all Julien's patches first, to see if there are still usable. Then we could think about ICLA.\n\n-Ognjen", "is_private": false, "bug_id": 43940, "id": 158442, "time": "2012-04-25T22:33:15Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2012-04-25T22:33:15Z", "attachment_id": null}, {"count": 22, "tags": [], "text": "(In reply to comment #20)\n> Vincent,\n> \n> (In reply to comment #19)\n> > Please also see comment 13. I think some modifications to the patch are\n> > necessary.\n> \n> I don't know why Jeremias asked for two parameters for number of decimal places\n> (one general, and one for [-1,+1] range). Maybe he planned to use this patch\n> also for \"transformation matrices\" with values in range [-1,+1], but that's\n> just a guess.\n> \n> Anyway, I believe that we could use this patch without problems since it really\n> does not change current behavior of the trunk. The trunk will always call\n> format method with those two parameters being equal: (3,3), (4,4), (8,8), etc.\n> \n> If you think that there should be change in the way FOP handles doubles, in\n> terms of always using 8 decimal places, is it possible to open separate issue?\n> I would really like to close this one, and potentially solve memory leak\n> problems introduced by ThreadLocal.\n\ni'm more interested in solving the immediate problem than changing the way FOP handles doubles; i agree it could be a separate issue (if there is a desire to address it... but i don't know there is a need)", "is_private": false, "id": 158443, "creator": "gadams@apache.org", "time": "2012-04-25T23:27:38Z", "bug_id": 43940, "creation_time": "2012-04-25T23:27:38Z", "attachment_id": null}, {"count": 23, "attachment_id": 28686, "bug_id": 43940, "is_private": false, "id": 158455, "time": "2012-04-26T17:36:29Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2012-04-26T17:36:29Z", "tags": [], "text": "Created attachment 28686\nUnified patch for PDFColorHandler and IFUtil"}, {"count": 24, "tags": [], "creator": "ognjen.d.blagojevic@gmail.com", "text": "(In reply to comment #17)\n> Other than o.a.f.pdf.PDFNumber, I found two more occurrences of\n> DecimalFormatCache:\n> \n> 1. o.a.f.pdf.PDFColorHandler\n> 2. o.a.f.render.intermediate.IFUtil\n> \n> Those need to have DecimalFormatCache appropriately replaced with\n> DecimalFormatUtil, before we can safely remove DecimalFormatCache.\n> \n> I am working on the patches for those two classes.\n\nUnified patch is attached.\n\nAll the patches attached to this issue are functional. After applying all patches to xmlgraphics-commons and fop, one may delete DecimalFormatCache class safely... and solve memory leaks.\n\n-Ognjen", "id": 158456, "time": "2012-04-26T17:38:49Z", "bug_id": 43940, "creation_time": "2012-04-26T17:38:49Z", "is_private": false, "attachment_id": null}, {"count": 25, "tags": [], "creator": "julien.ayme@gmail.com", "text": "Hi everyone, \n\nsorry for the late response, I was not aware that a ICLA was required for a patch.\nI will gladly sign it, so how should I do it ?\nA scan of the signed ICLA attached to this bug will do?\n\nRegards,\nJulien", "id": 158467, "time": "2012-04-27T10:07:19Z", "bug_id": 43940, "creation_time": "2012-04-27T10:07:19Z", "is_private": false, "attachment_id": null}, {"count": 26, "tags": [], "text": "> A scan of the signed ICLA attached to this bug will do?\n\nNo, I think you should send scan to the secretary@apache.org.\n\nPlase read:\n\n  http://www.apache.org/licenses/#clas\n\n-Ognjen", "is_private": false, "bug_id": 43940, "id": 158468, "time": "2012-04-27T10:58:04Z", "creator": "ognjen.d.blagojevic@gmail.com", "creation_time": "2012-04-27T10:58:04Z", "attachment_id": null}, {"count": 27, "tags": [], "bug_id": 43940, "attachment_id": null, "text": "(In reply to comment #25)\n> Hi everyone, \n> \n> sorry for the late response, I was not aware that a ICLA was required for a\n> patch.\n> I will gladly sign it, so how should I do it ?\n> A scan of the signed ICLA attached to this bug will do?\n> \n> Regards,\n> Julien\n\nit depends on the size and nature of the patch; if small and trivial, then no ICLA is needed; it was my judgment that an ICLA is needed in this case due to the amount of code", "id": 158475, "time": "2012-04-27T13:24:11Z", "creator": "gadams@apache.org", "creation_time": "2012-04-27T13:24:11Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 43940, "text": "Hi everyone,\n\nI've just submitted the ICLA to secretary@apache.org.\n\nThank you all.", "id": 158483, "attachment_id": null, "creator": "julien.ayme@gmail.com", "creation_time": "2012-04-27T14:02:16Z", "time": "2012-04-27T14:02:16Z", "is_private": false}, {"count": 29, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 158484, "time": "2012-04-27T14:45:41Z", "creator": "julien.ayme@gmail.com", "creation_time": "2012-04-27T14:45:41Z", "tags": [], "text": "By the way, I don't know what is the policy about @author tags in java files here in XmlGraphics/FOP, but feel free to remove them if the policy is \"no tags\" (I think there is such a policy in Apache Commons projects)"}, {"count": 30, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 158492, "time": "2012-04-28T10:52:17Z", "creator": "julien.ayme@gmail.com", "creation_time": "2012-04-28T10:52:17Z", "tags": [], "text": "Hi, my ICLA has been received and filed. So the patch is good to go :-)"}, {"count": 31, "tags": [], "bug_id": 43940, "text": "Patches applied at:\n\nhttp://svn.apache.org/viewvc?rev=1331933&view=rev (XMLGraphicsCommons)\nhttp://svn.apache.org/viewvc?rev=1331939&view=rev (XMLGraphicsCommons)\nhttp://svn.apache.org/viewvc?rev=1331950&view=rev (Fop)\n\nPlease verify and close if satisfied.\n\nThanks Julien and Ognjen for patches, Jeremmias for the original report, and Andreas for additional analysis!", "id": 158514, "attachment_id": null, "creator": "gadams@apache.org", "creation_time": "2012-04-29T17:11:50Z", "time": "2012-04-29T17:11:50Z", "is_private": false}, {"count": 32, "tags": [], "text": "Thank you.\n\n-Ognjen", "is_private": false, "id": 158994, "creator": "ognjen.d.blagojevic@gmail.com", "time": "2012-05-12T22:35:12Z", "bug_id": 43940, "creation_time": "2012-05-12T22:35:12Z", "attachment_id": null}, {"count": 33, "attachment_id": 28846, "bug_id": 43940, "is_private": false, "id": 159422, "time": "2012-05-28T23:41:10Z", "creator": "lmpmbernardo@gmail.com", "creation_time": "2012-05-28T23:41:10Z", "tags": [], "text": "Created attachment 28846\nsimple test that throws an exception\n\nThe attached simple example throws this exception:\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"0.005859375\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n\tat java.lang.Integer.parseInt(Integer.java:458)\n\tat java.lang.Integer.parseInt(Integer.java:499)\n\tat org.apache.xmlgraphics.util.DoubleFormatUtil.formatDoublePrecise(DoubleFormatUtil.java:120)\n\tat org.apache.xmlgraphics.util.DoubleFormatUtil.formatDouble(DoubleFormatUtil.java:59)\n\tat org.apache.fop.pdf.PDFNumber.doubleOut(PDFNumber.java:82)\n\tat bugs.DoubleFormatUtilBug.main(DoubleFormatUtilBug.java:13)\n\nI am puzzled... This does not happen with FOP-1.0 so I assume this is caused by the new code associated with this ticket."}, {"count": 34, "tags": [], "bug_id": 43940, "text": "(In reply to comment #33)\n> Created attachment 28846 [details]\n> simple test that throws an exception\n> \n> The attached simple example throws this exception:\n> \n> Exception in thread \"main\" java.lang.NumberFormatException: For input\n> string: \"0.005859375\"\n> \tat\n> java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n> \tat java.lang.Integer.parseInt(Integer.java:458)\n> \tat java.lang.Integer.parseInt(Integer.java:499)\n> \tat\n> org.apache.xmlgraphics.util.DoubleFormatUtil.\n> formatDoublePrecise(DoubleFormatUtil.java:120)\n> \tat\n> org.apache.xmlgraphics.util.DoubleFormatUtil.formatDouble(DoubleFormatUtil.\n> java:59)\n> \tat org.apache.fop.pdf.PDFNumber.doubleOut(PDFNumber.java:82)\n> \tat bugs.DoubleFormatUtilBug.main(DoubleFormatUtilBug.java:13)\n> \n> I am puzzled... This does not happen with FOP-1.0 so I assume this is caused\n> by the new code associated with this ticket.\n\nI can see that the code erroneously assumes (without checking) that s contains an 'E'. If it does not contain 'E' but does contain '.', then parseInt is handed a string containing a '.', which throws the NumberFormatException.\n\n} else {\n    // Scientific representation of double: \"x.xxxxxEyyy\"                                                                                                                                         \n    int dot = s.indexOf('.');\n    int exp = s.indexOf('E');\n    int exposant = Integer.parseInt(s.substring(exp + 1));\n\nJulien or Ognjen, can you please submit a patch and test for this bug?", "id": 159424, "time": "2012-05-29T01:22:05Z", "creator": "gadams@apache.org", "creation_time": "2012-05-29T01:22:05Z", "is_private": false, "attachment_id": null}, {"count": 35, "tags": [], "creator": "julien.ayme@gmail.com", "text": "I will attach both a test case and a patch, later this afternoon.", "id": 159428, "time": "2012-05-29T08:09:46Z", "bug_id": 43940, "creation_time": "2012-05-29T08:09:46Z", "is_private": false, "attachment_id": null}, {"count": 36, "tags": [], "text": "The bug is trivial:\n\"if (source >= 10e-3 && source < 1e7) {\" is wrong !\n\"if (source >= 1e-3 && source < 1e7) {\" is right.\n\nMy mistake when reading 10 exp -3 in Double.toString javadoc and writing 10e-3 instead of 1e-3.\n\nPatch will follow.", "is_private": false, "id": 159429, "creator": "julien.ayme@gmail.com", "time": "2012-05-29T08:37:41Z", "bug_id": 43940, "creation_time": "2012-05-29T08:37:41Z", "attachment_id": null}, {"count": 37, "tags": [], "bug_id": 43940, "text": "Created attachment 28850\npatch for both class and test case (DoubleFormatUtil.java and DoubleFormatUtilTest.java)", "id": 159432, "attachment_id": 28850, "creator": "julien.ayme@gmail.com", "creation_time": "2012-05-29T08:40:27Z", "time": "2012-05-29T08:40:27Z", "is_private": false}, {"count": 38, "tags": [], "creator": "gadams@apache.org", "text": "(In reply to comment #36)\n> The bug is trivial:\n> \"if (source >= 10e-3 && source < 1e7) {\" is wrong !\n> \"if (source >= 1e-3 && source < 1e7) {\" is right.\n> \n> My mistake when reading 10 exp -3 in Double.toString javadoc and writing\n> 10e-3 instead of 1e-3.\n> \n> Patch will follow.\n\ni'm not satisfied with this patch, since it depends upon the implementation specific nature of Double.toString(); i would like to see better checking in the code I listed in comment 34 to remove assumptions about the use of scientific notation (and assuming that 'E' is present)", "id": 159433, "time": "2012-05-29T08:48:20Z", "bug_id": 43940, "creation_time": "2012-05-29T08:48:20Z", "is_private": false, "attachment_id": null}, {"count": 39, "tags": [], "bug_id": 43940, "text": "(In reply to comment #38)\n> (In reply to comment #36)\n> > The bug is trivial:\n> > \"if (source >= 10e-3 && source < 1e7) {\" is wrong !\n> > \"if (source >= 1e-3 && source < 1e7) {\" is right.\n> > \n> > My mistake when reading 10 exp -3 in Double.toString javadoc and writing\n> > 10e-3 instead of 1e-3.\n> > \n> > Patch will follow.\n> \n> i'm not satisfied with this patch, since it depends upon the implementation\n> specific nature of Double.toString(); i would like to see better checking in\n> the code I listed in comment 34 to remove assumptions about the use of\n> scientific notation (and assuming that 'E' is present)\n\nfor example, what happens if source is NaN? just looking at the code makes me think the same else clause cited in comment 34 will apply, which means yet again, that parseInt will be invoked on the string \"NaN\"", "id": 159434, "attachment_id": null, "creator": "gadams@apache.org", "creation_time": "2012-05-29T08:57:28Z", "time": "2012-05-29T08:57:28Z", "is_private": false}, {"count": 40, "tags": [], "bug_id": 43940, "text": "(In reply to comment #39)\n> (In reply to comment #38)\n> > (In reply to comment #36)\n> > > The bug is trivial:\n> > > \"if (source >= 10e-3 && source < 1e7) {\" is wrong !\n> > > \"if (source >= 1e-3 && source < 1e7) {\" is right.\n> > > \n> > > My mistake when reading 10 exp -3 in Double.toString javadoc and writing\n> > > 10e-3 instead of 1e-3.\n> > > \n> > > Patch will follow.\n> > \n> > i'm not satisfied with this patch, since it depends upon the implementation\n> > specific nature of Double.toString(); i would like to see better checking in\n> > the code I listed in comment 34 to remove assumptions about the use of\n> > scientific notation (and assuming that 'E' is present)\n> \n> for example, what happens if source is NaN? just looking at the code makes\n> me think the same else clause cited in comment 34 will apply, which means\n> yet again, that parseInt will be invoked on the string \"NaN\"\n\nin this regard, please add NaN, +Infinity, and -Infinity to  your test cases; \nalso add the following test cases:\n\n* 1E-3 + Double.MIN_VALUE\n* 1E-3\n* 1E-3 - Double.MIN_VALUE\n* 1E7  + Double.MIN_VALUE\n* 1E7\n* 1E7  - Double.MIN_VALUE", "id": 159435, "time": "2012-05-29T09:05:39Z", "creator": "gadams@apache.org", "creation_time": "2012-05-29T09:05:39Z", "is_private": false, "attachment_id": null}, {"count": 41, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 159436, "time": "2012-05-29T09:10:30Z", "creator": "julien.ayme@gmail.com", "creation_time": "2012-05-29T09:10:30Z", "tags": [], "text": "My understanding of Double.toString javadoc is that the contract described in the javadoc is mandatory for every implementation of the JVM.\n\nBut since I may be wrong, feel free to correct the patch.\nI implemented this feature using Double comparison since I felt it was faster than doing another indexOf on the String (I may be wrong again :-) ).\n\nIf you feel strongly for a second check I'll do it."}, {"count": 42, "tags": [], "bug_id": 43940, "text": "(In reply to comment #41)\n> My understanding of Double.toString javadoc is that the contract described\n> in the javadoc is mandatory for every implementation of the JVM.\n\nI agree with that. Otherwise the format return by toString wouldn't be described in such details.\n\nHowever, NaN and Infinity do have to be checked.\n\n\n> But since I may be wrong, feel free to correct the patch.\n> I implemented this feature using Double comparison since I felt it was\n> faster than doing another indexOf on the String (I may be wrong again :-) ).\n> \n> If you feel strongly for a second check I'll do it.\n\nVincent", "id": 159437, "time": "2012-05-29T09:21:35Z", "creator": "vhennebert@gmail.com", "creation_time": "2012-05-29T09:21:35Z", "is_private": false, "attachment_id": null}, {"count": 43, "tags": [], "bug_id": 43940, "attachment_id": 28855, "text": "Created attachment 28855\npatch for both class and test case (DoubleFormatUtil.java and DoubleFormatUtilTest.java)\n\nAdded test case for limit conditions, and fixed DoubleFormatUtil accordingly.\n\nThere was a bug in the private format(StringBuffer, ...) method, when checking against tenPow(scale) if scale >= 19 (since 10^19 > Long.MAX_VALUE).\nThere was also a bug in formatDoublePrecise when trying to reconstruct the full decimal part from the scientific representation, when decLength < digits.\n\nAgain, the tests at limits showed these bugs, and I fixed them.", "id": 159449, "time": "2012-05-29T13:38:52Z", "creator": "julien.ayme@gmail.com", "creation_time": "2012-05-29T13:38:52Z", "is_private": false}, {"count": 44, "attachment_id": null, "bug_id": 43940, "is_private": false, "id": 159464, "time": "2012-05-29T16:14:15Z", "creator": "gadams@apache.org", "creation_time": "2012-05-29T16:14:15Z", "tags": [], "text": "patched at:\n\nhttp://svn.apache.org/viewvc?rev=1343794&view=rev\nhttp://svn.apache.org/viewvc?rev=1343800&view=rev\n\nif there is another double format bug, please file a new bug report rather than reopening a prior closed bug"}, {"count": 45, "tags": [], "text": "I've just created a new bug concerning DoubleFormatUtil when formating double near Double.MIN_VALUE (I already attached a test case + patch): see Bug #53327", "is_private": false, "id": 159511, "creator": "julien.ayme@gmail.com", "time": "2012-05-30T08:53:10Z", "bug_id": 43940, "creation_time": "2012-05-30T08:53:10Z", "attachment_id": null}]
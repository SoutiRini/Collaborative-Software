[{"attachment_id": null, "tags": [], "bug_id": 44068, "text": "These following cases show a bug in mod_alias. I get the same behavior with the\nRedirectMatch in httpd.conf or .htaccess. Same results in Linux and Solaris,\nexcept httpd on Linux handles some cases correct the Solaris one gets wrong.\n\nRedirectMatch 302 ^/foo/. \"http://servername/redirected/\"\n\nExpected Behavior: Only http://servername/foo/ followed by at least one\ncharacter gets redirected\nActual Behavior: http://servername/foo itself gets redirected\n\nRedirectMatch 302 ^/foo/a \"http://servername/redirected/\"\nExpected Behavior: Only http://servername/foo/a followed by anything gets redirected\nActual Behavior: Works properly\n\nRedirectMatch 302 ^/foo/i \"http://servername/redirected/\"\nExpected Behavior: Only http://servername/foo/i followed by anything gets redirected\nActual Behavior: Works fine except http://servername/foo/ gets redirected, which\nit should not.\n\nRedirectMatch 302 ^/foo/d \"http://servername/redirected/\"\nExpected Behavior: Only http://servername/foo/d followed by anything gets redirected\nActual Behavior: Works properly on Linux, on Solaris acts like the ^/foo/i case\nabove\n\nRedirectMatch 302 ^/foo/[h-j] \"http://servername/redirected\"\nExpected Behavior: Only http://servername/foo/ followed by \"h\", \"i\", or \"j\",\nthen followed by anything gets redirected\nActual Behavior: Works fine except http://servername/foo/ gets redirected, which\nit should not.\n\nRedirectMatch 302 ^/foo/[c-e] \"http://servername/redirected\"\nExpected Behavior: Only http://servername/foo/ followed by \"c\", \"d\", or \"e\",\nthen followed by anything gets redirected\nActual Behavior: Works fine on Linux, on Solaris acts like the ^/foo/[h-j] case\nabove\n\nChanging / to \\/ has no effect.", "count": 0, "id": 111717, "time": "2007-12-12T12:14:07Z", "creator": "ftlofaro@yahoo.com", "creation_time": "2007-12-12T12:14:07Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 44068, "is_private": false, "count": 1, "id": 111718, "time": "2007-12-12T12:33:14Z", "creator": "ftlofaro@yahoo.com", "creation_time": "2007-12-12T12:33:14Z", "text": "OK, I found out what is happening. If the directory isn't there, it works as\nexpected.\n\nI found an interaction between DirectoryIndex and RedirectMatch.\n\nIf you request a directory, Apache tries appending all the DirectoryIndex file\nnames to serve an index page. The RedirectMatch check is done after that. It\nprobably should be done before that, so that unexpected matches don't occur.\n\nIn other words, have the RedirectMatch code run first, then the DirectoryIndex\ncode. The Solaris and Linux difference was because the Solaris machine was set\nto try default.htm in the httpd.conf and the Linux one wasn't.\n\n"}, {"attachment_id": null, "tags": [], "bug_id": 44068, "text": "Sorry, but I cannot reproduce these cases. They work as expected. I guess there\nare other directives (possibly rewrite rules) in your config that lead to this\nkind of strange behaviour.", "count": 2, "id": 111719, "time": "2007-12-12T12:42:59Z", "creator": "rpluem@apache.org", "creation_time": "2007-12-12T12:42:59Z", "is_private": false}, {"count": 3, "tags": [], "creator": "nick@webthing.com", "text": "(In reply to comment #1)\n\n> If you request a directory, Apache tries appending all the DirectoryIndex file\n> names to serve an index page. The RedirectMatch check is done after that. It\n> probably should be done before that, so that unexpected matches don't occur.\n\nNot quite.  The DirectoryIndex causes a subrequest, and it's the subrequest that\ngets redirected.  All as expected.\n\nIf we \"fix\" this, we have a gaping security hole, where a file matching your\nRedirectMatch - and therefore maybe presumed secret - would then be served.\n", "id": 111728, "attachment_id": null, "bug_id": 44068, "creation_time": "2007-12-12T14:21:29Z", "time": "2007-12-12T14:21:29Z", "is_private": false}]
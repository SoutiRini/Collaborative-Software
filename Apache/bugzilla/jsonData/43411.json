[{"count": 0, "tags": [], "creator": "archie@dellroad.org", "text": "Running squiggle on this input exposes some kind of rendering bug.\n\n--------------------- CUT HERE ------------------------\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n  width=\"480.0\" height=\"240.0\"\n  viewBox=\"0 0 48.0 24.0\"\n  version=\"1.0\">\n  <text>\n    <tspan fill=\"black\" font-size=\"20\" id=\"node\" y=\"20\"\nfont-family=\"'Arial'\">55:55</tspan>\n  </text>\n</svg>\n--------------------- CUT HERE ------------------------\n\nSee attached screenshot.\n\nRuntime information:\n\n  $ java -version\n  java version \"1.5.0_06\"\n  Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_06-b05)\n  Java HotSpot(TM) Client VM (build 1.5.0_06-b05, mixed mode, sharing)", "id": 108299, "time": "2007-09-17T14:37:52Z", "bug_id": 43411, "creation_time": "2007-09-17T14:37:52Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "archie@dellroad.org", "attachment_id": 20839, "text": "Created attachment 20839\nScreenshot of the rendering problem", "id": 108300, "time": "2007-09-17T14:38:57Z", "bug_id": 43411, "creation_time": "2007-09-17T14:38:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43411, "attachment_id": null, "text": "this is indeed an interesting bug: \n1.) it is reproducible - good\n2.) it shows up only with the example's height of viewport\n3.) it shows up only with 'Arial' font of that size\n4.) it shows up only where a '5' is involved.\n\ni think, it is a numeric precision problem, which confuses the winding-rule when\nthe scan-line passes through that corner of the glyph.\ni work on it.\n", "id": 113839, "time": "2008-02-17T10:49:41Z", "creator": "info@dvholten.de", "creation_time": "2008-02-17T10:49:41Z", "is_private": false}, {"count": 3, "tags": [], "creator": "helder.magalhaes@gmail.com", "is_private": false, "text": "Created attachment 22883\nTest case\n\nConverted the copy+paste example to a test case (which can be, for example, browsed directly using Squiggle's \"Open Location...\" option of \"File\" menu). :-)\n\nI took the opportunity to confirm the issue's reproducibility using updated software versions:\n - Batik: trunk (rev. 718269)\n - Java 1.6 update 10\n - Windows XP SP3", "id": 122573, "time": "2008-11-17T08:26:52Z", "bug_id": 43411, "creation_time": "2008-11-17T08:26:52Z", "attachment_id": 22883}, {"count": 4, "tags": [], "text": "More suggestions regarding this particular issue:\n - Is this a font-related issue? Can this be reproduced simply using a straight SVG path (oblique line followed/preceded by a curve) simulating the corner present in the \"5\" glyph?\n - Is this issue completely operating-system independent? At least, it was reported as being Linux, I've also confirmed it using Windows (MacOS anyone?) Changing to \"All\" until proved otherwise, as there is no \"Linux+Windows\" OS option. ;-)\n - Is this issue located within Batik, external libraries or may it be a Java issue?\n\nAlso, lowering severity and priority to more reasonable (IMHO, hope I'm not sounding too intrusive!) values, given the difficulty to reproduce (fades away just by slightly change the zoom level or Squiggle's window size) and the minor visual glitch it causes.", "is_private": false, "id": 122575, "creator": "helder.magalhaes@gmail.com", "time": "2008-11-17T08:37:22Z", "bug_id": 43411, "creation_time": "2008-11-17T08:37:22Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 43411, "is_private": false, "text": "fixed with svn 731265", "id": 123739, "time": "2009-01-04T07:00:05Z", "creator": "info@dvholten.de", "creation_time": "2009-01-04T07:00:05Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "deweese@apache.org", "attachment_id": null, "text": "(In reply to comment #5)\n> fixed with svn 731265\n\nI suspect that this simply moved where the problem occurs.\n\n  This is almost certainly a bug in the JDK rasterizer.  These\nsorts of bugs almost always occur only under a very specific\ncombination of values.  Going to double changed the values\njust slightly so the problem didn't happen in this case.\nI'm certain the problem still exists (it may be almost\nimpossible to find but it's there somewhere).\n\n  Ideally we would print out the relevant information\n(Scale value we passed and the path of the '5' char)\nwhich might allow us to construct a standalone example\nof the bug outside of Batik so it could be submitted\nto Sun.\n", "id": 123742, "time": "2009-01-04T09:26:47Z", "bug_id": 43411, "creation_time": "2009-01-04T09:26:47Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 43411, "attachment_id": null, "id": 123743, "time": "2009-01-04T10:50:17Z", "creator": "info@dvholten.de", "creation_time": "2009-01-04T10:50:17Z", "is_private": false, "text": "tja - somehow you might be right. and i might collect the data and construct a simplified case for their big bugbase. However:\n- do we keep our bugs open for sun's ?\n- i studied the values going into graphics2d: the glyphvector holds only float-values, and the scale given previously just holds float-precision.  so when the path-elements are finally converted to their internal coordinate-system to have the scan-lines probing the outlines, it doesnt have enough 'resolution' to produce correct results.\n- it is an interesting mind-puzzle to imagine if there is a constallation, in which the scale-value with just float-precision is the 'correct' value. This might exist, but it is (i assume) far away from our test-case: we have scaling in the font-size and in the canvas, and both influence the rasterizer. \n\ni would close this until someone comes up with another example.\n"}, {"count": 8, "tags": [], "bug_id": 43411, "attachment_id": null, "id": 123748, "time": "2009-01-04T15:09:57Z", "creator": "deweese@apache.org", "creation_time": "2009-01-04T15:09:57Z", "is_private": false, "text": "(In reply to comment #7)\n> tja - somehow you might be right. and i might collect the data and construct a\n> simplified case for their big bugbase. However:\n> - do we keep our bugs open for sun's ?\n> - i studied the values going into graphics2d: the glyphvector holds only\n> float-values, and the scale given previously just holds float-precision.  so\n> when the path-elements are finally converted to their internal\n> coordinate-system to have the scan-lines probing the outlines, it doesnt have\n> enough 'resolution' to produce correct results.\n\n   The fill of a shape should _never_ result is this rendering.\nA fill is always closed if it wasn't originally.  So that single pixel\nhigh solid fill line is a bug in the coverage calculation in the rasterizer.\nTrust me I've worked on rasterizers and that failure is a clear indication\nof incorrect coverage calculation.\n\n> - it is an interesting mind-puzzle to imagine if there is a constallation, in\n> which the scale-value with just float-precision is the 'correct' value. This\n> might exist, but it is (i assume) far away from our test-case: we have scaling\n> in the font-size and in the canvas, and both influence the rasterizer. \n\n   Generally neither the float or double is correct, the double may\nbe closer but is rarely correct.  Since the source content is a TrueType\nfont in the case it only has ~11 bits of precision anyway (em square of\n2048) a float value as ~25 bits of mantissa.\n\n> i would close this until someone comes up with another example.\n\n   I'd rather back the commit out (as it involves a fairly large number of\nfloat casts \"to no end\") and close the bug saying it's not a bug\nin Batik but a bug in the JDK - if you really want to close the bug.  \n\n   All the commit has done is move the bug from a where we can reproduce \nit to someplace we can't reproduce it.  If Archie wants to keep the \npatch because it helps him he is welcome to.\n"}, {"count": 9, "tags": [], "creator": "deweese@apache.org", "is_private": false, "text": "Created attachment 23084\nStandalone example of bug.\n\nThis is a standalone example of the bug that\nshows the problem is with the JDK not Batik.", "id": 123769, "time": "2009-01-05T06:09:35Z", "bug_id": 43411, "creation_time": "2009-01-05T06:09:35Z", "attachment_id": 23084}, {"count": 10, "tags": [], "bug_id": 43411, "attachment_id": null, "is_private": false, "id": 123770, "time": "2009-01-05T07:18:40Z", "creator": "info@dvholten.de", "creation_time": "2009-01-05T07:18:40Z", "text": "hmm - what a nice program...\nanyway - when you correct the scale-calc in line 48 to a double - the\nrendering problem goes away.\nif you dont want to change your code - there are other ways to fix it:\n- the rendering-problem is reproducible (with float in 48):\njdk142_13 yes\njdk150_14 yes\njdk160_04 yes\njdk160_10 NO !\n\n(on windows XP).\nSo, seems their major revamp in u10 fixed that too.\n\n\n"}, {"count": 11, "tags": [], "bug_id": 43411, "attachment_id": null, "id": 123780, "time": "2009-01-05T15:46:13Z", "creator": "deweese@apache.org", "creation_time": "2009-01-05T15:46:13Z", "is_private": false, "text": "(In reply to comment #10)\n\n> anyway - when you correct the scale-calc in line 48 to a double - the\n> rendering problem goes away.\n\n   Except that \"correct\" isn't the right term.  If you \"change\" the\ncalculation in line 48 the rendering problem goes away, but for the\ncombination of glyph, scale and translate that is used in that example\nthe rendering problem exists (the double generated by 'casting' the float \ncalculation is a perfectly valid double).  The point here is that the \nrendering must work for any scale factor and it clearly doesn't, so \nit's a bug in the renderer.\n\n   Also I am 100% certain that if it fails here it fails for any number\nof other sets of glyphs, scales and translates.  That number is small\ncompared to the combinations that it works for but I'm sure there are\nmany that is fails on.\n\n> if you dont want to change your code - there are other ways to fix it:\n> - the rendering-problem is reproducible (with float in 48):\n> jdk142_13 yes\n> jdk150_14 yes\n> jdk160_04 yes\n> jdk160_10 NO !\n> \n> (on windows XP).\n> So, seems their major revamp in u10 fixed that too.\n\n   That is good news (I had tried 1.6 04 earlier).\nI think this is the real solution.  To be clear\nchanging the calculation simply fixes 'this'\nversion of the problem it doesn't come close to\naddressing the root cause.\n\n"}, {"count": 12, "attachment_id": null, "creator": "helder.magalhaes@gmail.com", "text": "(In reply to comment #11)\n> I think this is the real solution.\n\nI've also confirmed that this issue doesn't reproduce in JDK 1.6.0_12-b04.\n\nRecently bug 46593 [1] was closed as \"works for me\" based on this discussion. Should this one also be marked \"works for me\" or invalid (as it apparently has nothing to do with Batik)?\n\n[1] https://issues.apache.org/bugzilla/show_bug.cgi?id=46593", "id": 124968, "time": "2009-02-19T06:00:44Z", "bug_id": 43411, "creation_time": "2009-02-19T06:00:44Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "creator": "helder.magalhaes@gmail.com", "attachment_id": null, "text": "(In reply to comment #8)\n> > i would close this until someone comes up with another example.\n> \n>    I'd rather back the commit out (as it involves a fairly large number of\n> float casts \"to no end\") and close the bug saying it's not a bug\n> in Batik but a bug in the JDK - if you really want to close the bug.\n\nI'd also vote for rolling back the changes (revision 731265) and close this issue as invalid.", "id": 125563, "time": "2009-03-14T19:32:57Z", "bug_id": 43411, "creation_time": "2009-03-14T19:32:57Z", "is_private": false}]
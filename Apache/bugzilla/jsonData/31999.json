[{"count": 0, "tags": [], "bug_id": 31999, "attachment_id": null, "id": 66218, "time": "2004-11-01T01:09:56Z", "creator": "kk@kohsuke.org", "creation_time": "2004-11-01T01:09:56Z", "is_private": false, "text": "It is easy to write an Ant task, but the amount of build script you need to\nwrite to use it can be made shorter.\n\nToday, it takes the following lines of build scripts to declare a new task:\n\n<taskdef task=\"taskName\" classname=\"fully.qualified.class.Name\">\n  <classpath>...</classpath>\n</taskdef>\n\nAlternatively I can use property files, but it still requires a fully qualified\nname of the property file.\n\nI wonder if Ant can look for a property file in a known location (such as\n/META-INF/services/org.apache.tools.ant.Task); together with Class-Path manifest\nattribute, this would allow my users to just say something like:\n\n<taskdef jar=\"lib/foobar.jar\"/>\n\n... which is much shorter and concise."}, {"count": 1, "tags": [], "bug_id": 31999, "text": "Have a look at the antlib declaration mechanism; all you need to do is declare a\nnamespace URI on the <project> clause and your code gets imported into that ns.", "id": 66234, "attachment_id": null, "creator": "stevel@apache.org", "creation_time": "2004-11-01T10:07:16Z", "time": "2004-11-01T10:07:16Z", "is_private": false}, {"count": 2, "tags": [], "text": "Thanks. It took me a while to figure out the new declaration mechanism.\n(but I guess that's my fault --- Google found it quickly)\n\nhttp://ant.apache.org/manual/CoreTypes/antlib.html\n\nAs of Ant 1.6.2, in the beginning of this document,\nthere's an example that says:\n\n    For example, assuming that the sample.xml is in a jar file\n    sample.jar also containing the classes, the following build\n    fragment will define the if and scriptpathmapper  tasks/types\n    and place them in the namespace uri samples:/acme.org.\n\n      <typedef resource=\"org/acme/ant/sample.xml\"\n         uri=\"samples:/acme.org\"/>\n\nBut the above sample doesn't specify where sample.jar resides,\nand it seems to me that unless Ant is a mind-reader, I don't\nsee how it can find the jar files. Perhaps it's missing\n\"classpath\" nested elements?\n\nThis looks good to me, but I think it can be simplified further\nby having the default resource name (/META-INF/antlib.xml ?)\nto load antlib.xml from, and allowing the antlib.xml to declare\nthe URI (just like taglib.) If it's difficult to expand the\ntypedef task to take this much default, it could be another task.\n\nThis would allow build script writers to just type the following:\n\n  <antlibdef>\n    <classpath>\n      <pathelement path=\"lib/mytask.jar\"/>\n    </classpath>\n  </antlibdef>\n\n  <!-- the namespace URI of the task is defined by the task writer -->\n  <mt:mytask xmlns:mt=\"http://kohsuke.org/ant/mytask\"/>\n\n... to define it.\n\n\nOne could also consider having a special treatment like \"antlib:\" namespace URI\n--- for example, you can treat relative namespace URIs\nto jar files as if the above declaration is done.\nIn this way, I only need to write:\n\n  <mt:mytask xmlns=\"lib/mytask.jar\"/>\n\n\nAnyway, the point that I was trying to make was that as a task \ndeveloper, I'm willing to spend more efforts on writing tasks\n(e.g., adding xml file in a known location, making sure\nClass-Path manifest entry points to all the libraries),\nbut as a build script writer, I'd like the declaration\nto be as simple as possible. And the way I see it, the latter\ncan be simplified further.", "is_private": false, "id": 67354, "creator": "kk@kohsuke.org", "time": "2004-11-22T17:47:38Z", "bug_id": 31999, "creation_time": "2004-11-22T17:47:38Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 31999, "attachment_id": null, "id": 67355, "time": "2004-11-22T18:34:36Z", "creator": "mbenson@apache.org", "creation_time": "2004-11-22T18:34:36Z", "is_private": false, "text": "I don't think you've gotten all the antlib usages.  You mentioned \"where does\nthe typedef know where to find tasks/types\".  <taskdef> and thus <typedef>\nis/are documented as accepting one of five (I think) classpath specifications,\nor default locations (ANT_HOME/lib for one) are used.\n\nNext, if all antlib.xml files existed at the same resource location it would\nmake retrieving them much more difficult than a simple getResource call because\nyou'd have to look in every jar.  Having antlib URLs allows the construction of\ndifferent locations for antlib.xml and puts the task of finding the appropriate\nresource onto the JVM.  It also means you can (if you wanted to) bundle multiple\nantlibs into a single archive.\n\nNext you propose that the task writer define the namespace uri.  I'm no expert\non XML namespace theory but at the very least you could say that if two tasks\nwere defined by their respective authors to live in the same uri with the same\ntaskname (not entirely improbable) the innocent user might have trouble using\nthe competing tasks together.\n\nAs for simplicity, I most often use the <project xmlns:foo=\"antlib:org.foo\">\napproach.  Having the user declare the namespace is not unreasonable and I\nexpect shields us from numerous bug reports by virtue of requiring that the user\nknow what he or she is doing.\n\nPlease feel free to post to the user list if you need further help with antlibs.\n\nThanks,\nMatt"}, {"count": 4, "tags": [], "bug_id": 31999, "is_private": false, "id": 67356, "attachment_id": null, "creator": "peterreilly@apache.org", "creation_time": "2004-11-22T18:50:22Z", "time": "2004-11-22T18:50:22Z", "text": "It has always been my intention to make the antlib resolution\nbe a little easier (under the name antlibresolve - however\nthe marc.theaimsgroup.com seach function seems to be broken\nat the moment), so I am reopening this.\n\nUsing an antlib.xml in the meta-inf has been discussed before\nand rejected for various reasons.\n\nOne idea to make the script writer work be a little easier would\nbe to map:\n<typedef antlib=\"antlib:org.me.tasks\">\n   <classpath path=\"me.jar\"/>\n</typedef>\nto\n<typedef uri=\"antlib:org.me.tasks\" resource=\"org/me/tasks/antlib.xml\">\n   <classpath path=\"me.jar\"/>\n</typedef>\n"}, {"count": 5, "tags": [], "bug_id": 31999, "attachment_id": null, "id": 67357, "time": "2004-11-22T19:19:13Z", "creator": "mbenson@apache.org", "creation_time": "2004-11-22T19:19:13Z", "is_private": false, "text": "The above doesn't really \"speak\" to me but I will wait for more concrete\nproposals before I comment further.  :)"}, {"count": 6, "tags": [], "bug_id": 31999, "attachment_id": null, "text": "\n\nThank you for your comment, Matt.\n\n> Next, if all antlib.xml files existed at the same resource location it would\n> make retrieving them much more difficult than a simple getResource call because\n> you'd have to look in every jar.  Having antlib URLs allows the construction of\n> different locations for antlib.xml and puts the task of finding the appropriate\n> resource onto the JVM.  It also means you can (if you wanted to) bundle multiple\n> antlibs into a single archive.\n\nLoading resources from the same location is a well established practice in Java,\nand JVM allows you to enumerate all the resources given a ClassLoader. While it\ndoes make the code in Ant bit longer, but that's not a significant complication.\n\n\n\n> Next you propose that the task writer define the namespace uri.  I'm no expert\n> on XML namespace theory but at the very least you could say that if two tasks\n> were defined by their respective authors to live in the same uri with the same\n> taskname (not entirely improbable) the innocent user might have trouble using\n> the competing tasks together.\n\nI've been a member of a few XML related WGs/TCs in W3C/OASIS, so I know\na thing or two about XML namspaces. The point of using the namespace URI is to\nmake it almost impossible to have unexpected collisions.\n\nSo I can say that this will never be a problem. As an example,\nthink about taglib. You are not allowed to have two taglibs in the same URI,\nbut this has never been an issue.\n\n\n> As for simplicity, I most often use the <project xmlns:foo=\"antlib:org.foo\">\n> approach.  Having the user declare the namespace is not unreasonable and I\n> expect shields us from numerous bug reports by virtue of requiring that the user\n> know what he or she is doing.\n\nI agree that asking the user to declare the namespace is not unreasonable.\nIndeed in my proposal, the user would have to declare the namespace.\n\nThe problem that I'm having with xmlns:foo=\"antlib:org.foo\" is that it requires\ntask classes to be available as a part of the current user's settings\n(such as $ANT_HOME/lib and a few other places, as you kindly pointed out)\n\nThis makes it impossible to tell people to \"cvs co and then ant\" -- they have\nto now update their own environment to include my task jars. This is more\ncomplicated than I'd prefer.\n", "id": 67358, "time": "2004-11-22T19:20:17Z", "creator": "kk@kohsuke.org", "creation_time": "2004-11-22T19:20:17Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 31999, "attachment_id": null, "id": 67359, "time": "2004-11-22T19:22:05Z", "creator": "kk@kohsuke.org", "creation_time": "2004-11-22T19:22:05Z", "is_private": false, "text": "Thanks for the pointer to the archive. I'll read them later.\n\n> <typedef antlib=\"antlib:org.me.tasks\">\n>    <classpath path=\"me.jar\"/>\n> </typedef>\n\nThis works for me. This requires the absolute minimum from build\nscript writers.\n"}, {"count": 8, "tags": [], "bug_id": 31999, "attachment_id": null, "text": "OK, Peter's suggestion of the antlib: \"protocol\" in URIs has been part of Ant for quite some time now.", "id": 129330, "time": "2009-07-31T05:46:49Z", "creator": "bodewig@apache.org", "creation_time": "2009-07-31T05:46:49Z", "is_private": false}]
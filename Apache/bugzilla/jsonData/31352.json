[{"attachment_id": null, "tags": [], "bug_id": 31352, "is_private": false, "count": 0, "id": 64013, "time": "2004-09-21T23:59:41Z", "creator": "simon_klyne@yahoo.com", "creation_time": "2004-09-21T23:59:41Z", "text": "In environments where the Access Control to the LDAP DIT is protected from \nanonymous binds and bound users are only able to read their user entries \npossible binding options for mod_auth_ldap will either fail to authenticate a \nuser, or there are security implications if the <Directory/> sections contain a \nsuitably powerful binddn/bindpw.\n\nThe browser supplies a username and password for the auth check.  \n\nThis patch extends the AuthLDAPBindDN and AuthLDAPBindPasswd directives to \naccept $USER and $PASSWORD respectively and substitute for user/pass\neg:\n  AuthLDAPBindDN\tuid=$USER,ou=people,ou=common,l=lon,c=gb,o=dis\n  AuthLDAPBindPassword\t$PASSWORD\nfor user/pass of 'klyne'/'password' becomes:\n  AuthLDAPBindDN\tuid=klyne,ou=people,ou=common,l=lon,c=gb,o=dis\n  AuthLDAPBindPassword\tpassword\n\nThe rest of mod_auth_ldap continues as before.\n\n\n\n--- httpd-2.0.51/modules/experimental/mod_auth_ldap.c-dist\t2004-05-22 01:39:\n41.000000000 +0200\n+++ httpd-2.0.51/modules/experimental/mod_auth_ldap.c\t2004-09-21 23:40:53.\n728681000 +0200\n@@ -161,6 +161,83 @@\n \n \n /*\n+ * \n+ * Read per directory module config, and substitute for variables in binddn and \nbindpw\n+ * This is just a wrapper around the call to \n+ *   ap_get_module_config(r->per_dir_config, &auth_ldap_module);\n+ *\n+ * If the binddn and bindpw set by the AuthLDAPBindDN and AuthLDAPBindPassword \ndirectives\n+ * contain $USER and $PASSWORD then substitute these with the browser supplied \nuser/pass, \n+ * otherwise just return the mod_auth_ldap_config_t.\n+ *\n+ */\n+#define\tBIND_USER\t\"$USER\"\n+#define\tBIND_PASSWD\t\"$PASSWORD\"\n+static mod_auth_ldap_config_t *auth_ldap_get_per_dir_module_config(request_rec \n*r)\n+{\n+    const char *sent_pw;\n+    int bad_sent_pw = 0;\n+\n+\tchar *bind_user; \t/* set to start of BIND_USER if binddn requires \nusername subst */\n+\n+\tint doSubst = 0;\t/* set to true if we have values to substitute */\n+\n+    mod_auth_ldap_config_t *s =\n+        (mod_auth_ldap_config_t *)ap_get_module_config(r->per_dir_config, \n&auth_ldap_module);\n+\n+\t/* check client sent a username and a password */\n+\tif ( ! r->user ) {\n+\t    ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+\t\t\t\t\t  \"[%d] auth_ldap authenticate: \nauth_ldap_get_per_dir_module_config()\"\n+\t\t\t\t\t  \" : Client sent no username\",\n+\t\t\t\t\t  getpid());\n+\t\t/* Substitute for client supplied USER in binddn if directory \nconfigured for BIND_USER \n+\t\t * eg. if \"AuthLDAPBindDN\tuid=$USER,ou=people,l=lon,c=gb,o=dis\"\n+\t\t * send binddn to \"uid=<user>,ou=people,l=lon,c=gb,o=dis\"\n+\t\t */\n+\t} else {\n+\t\tif ((s->binddn) && ((bind_user = strstr(s->binddn, BIND_USER)) !=NULL)) \n{ \n+\t\t\tchar *attr;\n+\t\t\tap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+\t\t\t\t\t\t  \"[%d] auth_ldap authenticate: \nauth_ldap_get_per_dir_module_config()\"\n+\t\t\t\t\t\t  \": binddn %s\",\n+\t\t\t\t\t\t  getpid(), s->binddn);\n+\t\t\tattr = apr_pstrndup(r->pool, s->binddn, bind_user - s->binddn);\n+\t\t\ts->binddn = apr_pstrcat(r->pool, attr, r->user, bind_user + \nstrlen(BIND_USER), NULL );\n+\t\t\tdoSubst++;\n+\t\t}\n+\t}\n+\n+\tif ((bad_sent_pw = ap_get_basic_auth_pw(r, &sent_pw))) {\n+\t\tap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+\t\t\t  \"[%d] auth_ldap_get_per_dir_module_config() auth_ldap authenticate: \n\"\n+\t\t\t  \"ap_get_basic_auth_pw() returns %d\", getpid(), bad_sent_pw);\n+\n+\t\t/* set bindpw to client suppled password if directory configured for \nbindpw\n+\t\t   to BIND_PASSWD */\n+\t} else {\n+\t\tif ( s->bindpw && strcmp(s->bindpw, BIND_PASSWD) ==0) { \n+\t\t\tap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+\t\t\t\t\t\t  \"[%d] auth_ldap authenticate: \nauth_ldap_get_per_dir_module_config()\"\n+\t\t\t\t\t\t  \": bindpw USER SUPPLIED\",\n+\t\t\t\t\t\t  getpid());\n+\t\t\ts->bindpw = (char *)sent_pw;\n+\t\t\tdoSubst++;\n+\t\t}\n+\t}\n+\t\n+\tif (doSubst) {\n+\t\tap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, r,\n+\t\t\t\t\t  \"[%d] auth_ldap_get_per_dir_module_config() : SUBST\",\n+\t\t\t\t\t  getpid());\n+\n+\t\tap_set_module_config(r->per_dir_config, &auth_ldap_module, s);\n+\t}\n+\n+\treturn s;\n+}\n+\n+/*\n  * Build the search filter, or at least as much of the search filter that\n  * will fit in the buffer. We don't worry about the buffer not being able\n  * to hold the entire filter. If the buffer wasn't big enough to hold the\n@@ -269,7 +346,7 @@\n     const char **vals = NULL;\n     char filtbuf[FILTER_LENGTH];\n     mod_auth_ldap_config_t *sec =\n-        (mod_auth_ldap_config_t *)ap_get_module_config(r->per_dir_config, \n&auth_ldap_module);\n+        (mod_auth_ldap_config_t *)auth_ldap_get_per_dir_module_config(r);\n \n     util_ldap_connection_t *ldc = NULL;\n     const char *sent_pw;\n@@ -409,8 +486,7 @@\n         (mod_auth_ldap_request_t *)ap_get_module_config(r->request_config,\n         &auth_ldap_module);\n     mod_auth_ldap_config_t *sec =\n-        (mod_auth_ldap_config_t *)ap_get_module_config(r->per_dir_config, \n-        &auth_ldap_module);\n+        (mod_auth_ldap_config_t *)auth_ldap_get_per_dir_module_config(r);\n \n     util_ldap_connection_t *ldc = NULL;\n     int m = r->method_number;"}, {"attachment_id": 12826, "tags": [], "bug_id": 31352, "is_private": false, "count": 1, "id": 64015, "time": "2004-09-22T00:18:52Z", "creator": "simon_klyne@yahoo.com", "creation_time": "2004-09-22T00:18:52Z", "text": "Created attachment 12826\nPatch, user browser supplied user/pass for binddn/bindpw"}, {"count": 2, "tags": [], "text": "Access to the LDAP directory is governed by the AuthLDAPBindDN and\nAuthLDAPBindPassword directives, these should be set to an LDAP object that is\nallowed to search for users amongst the user objects, and compare for group\nmembership amongst the group objects. This object would be granted neither read\nnor write access to your directory.\n\nBinding as the end user means that end users can both search for other users,\nand query group memberships. This is less secure than one account specified in\nthe httpd config file for this specific purpose.\n", "is_private": false, "id": 65238, "creator": "minfrin@apache.org", "time": "2004-10-17T17:56:44Z", "bug_id": 31352, "creation_time": "2004-10-17T17:56:44Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "steve.smith@commerzbankib.com", "text": "I haven't checked the code, but I'm not sure this is entirely correct.  The end \nuser only needs read access to 'self' in order to return the required success \ncode for the search part of the auth operation, preventing search on the rest \nof the user accounts.  Search access to the groups is a different question \nthough; one could create an ACI for each group entry, providing access only by \nits own group members, but I'm guessing that's a little too clunky.  Either \nway, the security issues are surmountable, and worth it for the gain.", "id": 65274, "time": "2004-10-18T10:09:08Z", "bug_id": 31352, "creation_time": "2004-10-18T10:09:08Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "minfrin@apache.org", "text": "Is it possible to organise a patch to the httpd v2.1 mod_authnz_ldap module?\n\nMost of the problems in the LDAP module for httpd v2.0 have been fixed in an\noverhaul of the module in httpd v2.1, and the module is no longer considered\nexperimental.\n", "id": 69957, "time": "2005-01-21T23:14:47Z", "bug_id": 31352, "creation_time": "2005-01-21T23:14:47Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "minfrin@apache.org", "text": "*** Bug 23548 has been marked as a duplicate of this bug. ***", "id": 69960, "time": "2005-01-21T23:22:59Z", "bug_id": 31352, "creation_time": "2005-01-21T23:22:59Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 31352, "text": "*** Bug 35805 has been marked as a duplicate of this bug. ***", "id": 80158, "attachment_id": null, "creator": "admin@premiere-heure.fr", "creation_time": "2005-09-20T10:19:36Z", "time": "2005-09-20T10:19:36Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 31352, "text": "(In reply to comment #6)\n> *** Bug 35805 has been marked as a duplicate of this bug. ***\n\nHad the same purpose by making this quick patch in bug 35805, so I marked it\nduplicate.", "id": 80159, "attachment_id": null, "creator": "admin@premiere-heure.fr", "creation_time": "2005-09-20T10:21:17Z", "time": "2005-09-20T10:21:17Z", "is_private": false}, {"count": 8, "tags": [], "creator": "admin@premiere-heure.fr", "is_private": false, "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > *** Bug 35805 has been marked as a duplicate of this bug. ***\n> \n> Had the same purpose by making this quick patch in bug 35805, so I marked it\n> duplicate.\n\nOups in fact I was a bit in a hurry in my explanation, what I wanted to explain\nis  that with the same system (a $DIRECTORY here) we can make my enhancement\nexplained in the Bug 38805 :)", "id": 80501, "time": "2005-09-27T10:38:59Z", "bug_id": 31352, "creation_time": "2005-09-27T10:38:59Z", "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 31352, "text": "*** Bug 31428 has been marked as a duplicate of this bug. ***", "id": 80750, "attachment_id": null, "creator": "jorton@redhat.com", "creation_time": "2005-10-04T17:52:37Z", "time": "2005-10-04T17:52:37Z", "is_private": false}]
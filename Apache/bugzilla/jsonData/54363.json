[{"count": 0, "tags": [], "creator": "daniel.lescohier@cnet.com", "attachment_id": 29803, "id": 164295, "time": "2012-12-31T16:12:00Z", "bug_id": 54363, "creation_time": "2012-12-31T16:12:00Z", "is_private": false, "text": "Created attachment 29803\nserver/util_time.c patch\n\nThough the time conversion caching functions in server/util_time.c and modules/loggers/mod_log_config.c attempt to be thread-safe, the current implementations are not thread-safe for the following reasons:\n\n 1] Access to the cache_element is not marked volatile, so the compiler may reorder memory access, making the algorithm invalid.  E.g., because it's not marked volatile, the compiler might schedule to load t_validate into a register before it copies the whole cache_element.\n\n 2] Memory barriers are not used, so the CPUs are not guaranteeing total memory ordering.  This can be solved by using Compare-And-Swap operations as a memory barrier.\n\n 3] The algorithm is subject to the \"ABA problem.\"  This can be solved by only updating the cache with newer time values, so that one never goes from B->A. This fix also will improve the cache hit ratio, because an outlying old time value will not update the cache element.\n\nI am attaching patches based off of the 2.4.3 source distribution. I will also attach the new versions of the .c files, so it's readable from this bug. The comments in the code explain the new algorithm.\n\nOther changes included in the patches:\n\n * util_time.c:cached_explode(): the common \"is cached\" path avoids an extra memory copy of the exploded time structure.\n\n * Instead of passing a use_gmt flag, pass a function pointer to the explode function, which avoids a branch in the function.\n\n * The exploded_time_cache_element struct size drops from 60 bytes to 48 bytes, meaning the cache array is 192 bytes smaller, to a total cache array size of 768 bytes. Smaller means it's more likely to stay in the processor caches.\n\n * mod_log_config.c: Added a %g handler that is the same as %t except it's GMT instead of localtime. This only added a few lines of code, using the same technique mentioned above of passing the pointer to the explode function. This is a useful addition: at my company we've been using %g for years by having the logitem handler in our own custom module and registering the optional function with mod_log_config.\n\n * mod_log_config.c:log_request_time_custom(): It's possible for apr_strftime to return an empty string, but empty string return doesn't follow the logitem API, one is supposed to return NULL instead, which the caller replaces with \"-\". So, instead, check the retcode from apr_strtime, and return NULL on a zero-length. Also, remove the double-copy of the string, and don't unnecessarily expand the stack by 8kB.\n\nI don't have the changes tested, I don't have a test environment setup, so the only thing I've done is compiled these two objects and read the assembly to see if it looks correct. But I thought I should open the bug as soon as possible."}, {"count": 1, "tags": [], "text": "Created attachment 29804\nmodules/loggers/mod_log_config.c patch", "is_private": false, "id": 164296, "creation_time": "2012-12-31T16:12:49Z", "time": "2012-12-31T16:12:49Z", "creator": "daniel.lescohier@cnet.com", "bug_id": 54363, "attachment_id": 29804}, {"count": 2, "attachment_id": 29805, "bug_id": 54363, "text": "Created attachment 29805\nserver/util_time.c (patched)", "id": 164297, "time": "2012-12-31T16:14:15Z", "creator": "daniel.lescohier@cnet.com", "creation_time": "2012-12-31T16:14:15Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 54363, "text": "Created attachment 29806\nmodules/loggers/mod_log_config.c (patched)", "id": 164298, "time": "2012-12-31T16:15:07Z", "creator": "daniel.lescohier@cnet.com", "creation_time": "2012-12-31T16:15:07Z", "is_private": false, "attachment_id": 29806}]
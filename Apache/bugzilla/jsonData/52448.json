[{"count": 0, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": 28135, "text": "Created attachment 28135\n2010-03-22_tc6_CachingJarEntries_draft.patch\n\nHere is an old draft patch for WebappClassLoader that may worth looking at considering recent class loader discussion.\n\nIt addresses the problem with WebappClassLoader#findResourceInternal() that is caused by these two factors:\n\n1. The findResourceInternal method has a loop over JAR files of the web application. To find a resource it asks each JAR file whether the resource is present in it.\n\nThe lookup in each of JAR files should be fast, because a zip file has an index (at the end of the file). The problem is that loading and parsing the index into a hash table needs some time.\n\n2. There is method WebappClassLoader#closeJARs() that closes the JARs and thus unloads those indexes. The method is called:\n- once webapp starts, in StandardContext#startInternal()\n[[[\n            ((WebappLoader) getLoader()).closeJARs(true);\n]]]\n- once in a while in background thread, WebappLoader#backgroundProcess()\n[[[\n            closeJARs(false);\n]]]\n\nThe second call (force:=false) does JARs unloading once there was no activity for 90000 msecs = 1,5 minutes (hardcoded value).\n\n\nThe problem is that when a web application has a lot of JARs in WEB-INF/lib, and you have just started it. When you access its first JSP page the WebappClassLoader has find some class or resource.\n\nTo do that it has to open all JARs and scan them for a resource (a class), even if the resources is in only one JAR file, or not in them at all - if it comes from the parent classloader. This opening takes time and is noticeable.\n\nThe idea in the patch is to do JAR scanning while the application starts up and all the JARs are open (before the closeJARs(true) call) and cache the names found in the JAR files.\n\nThe #findResourceInternal() call uses the cache to open a single JAR that actually contains the resource.\n\n\nThe patch is against r922264 of tc6.0.x. It contains some remnants of LockAwareURLClassLoader - see https://issues.apache.org/bugzilla/show_bug.cgi?id=48903#c6\nThose have to be ignored. The essence is the jarEntryNames field and openJAR(int index) method that populates it.", "id": 152670, "time": "2012-01-11T01:39:51Z", "bug_id": 52448, "creation_time": "2012-01-11T01:39:51Z", "is_private": false}]
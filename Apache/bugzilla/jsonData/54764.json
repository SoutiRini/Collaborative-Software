[{"count": 0, "tags": [], "text": "Created attachment 30114\nDocument which demonstrates entity expansion attack.  Do not carelessly open.\n\nIt is possible to cripple a system which is parsing xml based Office docs using an entity expansion attack.  I've attached a simple billion laughs example .xlsx file.  Please note that this document IS MALICIOUS.  Do not try to parse the contained XML files unless you feel like DoSing your own machine.\n\nI'll also include a patch file which contains a possible solution.  It may be a bit controversial as it will tend to discard an entire document if it detects that any part of it violates reasonable security rules.  That being said, it's well suited to my use case and I thought I'd share.  Some kind soul may, perhaps, refactor it into configurable behaviour.", "attachment_id": 30114, "id": 166213, "creator": "philip.persad@gmail.com", "time": "2013-03-28T22:38:14Z", "bug_id": 54764, "creation_time": "2013-03-28T22:38:14Z", "is_private": false}, {"count": 1, "tags": [], "creator": "philip.persad@gmail.com", "is_private": false, "text": "Created attachment 30115\nPatch file\n\nThe afore mentioned patch.", "id": 166214, "time": "2013-03-28T22:39:27Z", "bug_id": 54764, "creation_time": "2013-03-28T22:39:27Z", "attachment_id": 30115}, {"count": 2, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "text": "Most of the xml parsing done by POI for the OOXML formats is via Apache XMLBeans. There has been some discussions on tweaking how xmlbeans does the xml processing, for areas like this, if you check the list archives you should hopefully find the details (it's not something I've personally been that involved in)\n\nIn addition, there are a few bits of xml parsing relating to the underlying ooxml file format, which came over when the openxml4j project was incorporated into Apache POI. This code was written independently, and so uses a different set of xml processing, to handle the low level file format structure (relations, content types etc). I believe that is the part your patch looks at?\n\nFrom a quick check of the ooxml related code, it looks like there are a few places where sax parsers are created to work on the ooxml structure. I guess we should probably add a utility helper that creates a more robust sax parser, and then update these places to call that to fetch it. Any chance you could take a look at re-working your patch to do that?", "id": 166264, "time": "2013-03-31T08:33:59Z", "bug_id": 54764, "creation_time": "2013-03-31T08:33:59Z", "is_private": false}, {"count": 3, "tags": [], "creator": "philip.persad@gmail.com", "is_private": false, "text": "After looking into the issue more closely (while trying to safely parse docx files), I found that the openxml4j code does not pre-parse as many of the various .xml files in a .docx as they do in a .xlsx.  As a result, even if openxml4j is parsing securely, an xml bomb can still sneak past un-parsed and blow up in the XWPFDocument construction.\n\nIn the end a simpler solution was to implement pre-parsing of all the xml documents in the docx zip stream with a securely configured parser in the calling application.\n\nI'm not too thrilled with the performance implications, but a node failing due to a bad XML file in an openXML doc is the worst case and worth the performance hit to avoid.", "id": 166368, "time": "2013-04-03T21:30:53Z", "bug_id": 54764, "creation_time": "2013-04-03T21:30:53Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 54764, "attachment_id": null, "id": 176884, "time": "2014-08-04T19:25:34Z", "creator": "apache@gagravarr.org", "creation_time": "2014-08-04T19:25:34Z", "is_private": false, "text": "As of r1615720, there are no issues with loading files at the OPC level with hand-crafted nested entities, on the default JVM xml parser. The affected part will be skipped, so if it was eg docProps/core.xml then you just won't see any core properties, but if it was ContentTypes then the whole OPCPackage will be rejected as invalid.\n\nXMLBeans is still an issue though. With XMLBeans 2.3 (the default we ship), it'll hang. With XMLBeans 2.6, the built-in entity expansion detection will trigger at 10,240 bytes expanded and halt parsing. The problem is that XMLBeans doesn't reset the state of the SaxHandler it uses, and that seems to be some sort of singleton. That means that once one naughty file has blown up, all subsequent files will fail to parse as it still thinks it's in the same too-large entity even though it isn't!\n\nIt would seem that we need to either fix or workaround this xmlbeans 2.6 bug, then upgrade the xmlbeans runtime that we ship + recommend.\n\n(Because XMLBeans runtimes are happy with older generated classes, but not newer ones, and because some of our users are on platforms which ship + depend on older XMLBeans instances like 2.3, we shouldn't just upgrade the version of xmlbeans we use to compile the schemas with. Instead, once the problem is fixed, we should look to ship 2.3 for compiling but 2.6/fixed by default for running)\n\nIf someone has some time to work on this, the thing to do would be to bump the xmlbeans runtime in your dev env up to 2.6, attach the xmlbeans sources, enable the commented out part of TestXSSFBugs.bug54764, then try to work out where the caching of the SaxHandler happens. From that, it'll hopefully be possible to find out if we can workout the lack of byte expansion count reset or not"}, {"count": 5, "tags": [], "text": "It seems we're not the only ones to have discovered this xmlbeans 2.6 issue, I've just located https://issues.apache.org/jira/browse/XMLBEANS-512 describing the same problem\n\nA call to SystemCache.get().setSaxLoader(null) seems to fix it, so the fix would seem to be to add that near the start of processing each POIXMLDocument to ensure a non-confused one is always available", "is_private": false, "id": 176885, "creator": "apache@gagravarr.org", "time": "2014-08-04T20:20:19Z", "bug_id": 54764, "creation_time": "2014-08-04T20:20:19Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 54764, "attachment_id": null, "id": 176887, "time": "2014-08-04T20:51:07Z", "creator": "apache@gagravarr.org", "creation_time": "2014-08-04T20:51:07Z", "is_private": false, "text": "In r1615781 I've added a call to SystemCache.get().setSaxLoader(null) to near the top of POIXMLDocument. This means that on XMLBeans 2.6, even without a proper fix for XMLBEANS-512, if one file triggers the entity limit then subsequent normal ones can still be parsed fine. (Looks to be a pretty trivial extra overhead)\n\nI've also bumped the default XMLBeans runtime to 2.6 (schema compiler remains 2.3 for compatibility), added notes to the changelog and site, and enabled the unit tests which show everything behaves itself now when using the JVM-default XML Parser and XMLBeans 2.6."}]
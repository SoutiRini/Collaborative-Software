[{"count": 0, "tags": [], "bug_id": 60394, "attachment_id": null, "id": 195091, "time": "2016-11-20T20:39:29Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-11-20T20:39:29Z", "is_private": false, "text": ""}, {"count": 1, "tags": [], "bug_id": 60394, "attachment_id": null, "id": 195092, "time": "2016-11-20T20:44:29Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-11-20T20:44:29Z", "is_private": false, "text": "Running 'ant test' on 8.5.x trunk with \n\n> java version \"1.7.0_80\"\n> Java(TM) SE Runtime Environment (build 1.7.0_80-b15)\n> Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)\n\nfails sometimes due to:\n\n> downloadzip:\n>       [get] Getting: http://downloads.sourceforge.net/easymock/easymock-3.2.zip\n>       [get] To: C:\\Users\\mosipov\\tomcat-build-libs\\download-1532555207.zip\n>       [get] http://downloads.sourceforge.net/easymock/easymock-3.2.zip permanently moved to http://downloads.sourceforge.net/project/easymock/EasyMock/3.2/easymock-3.2.zip\n>       [get] http://downloads.sourceforge.net/project/easymock/EasyMock/3.2/easymock-3.2.zip moved to https://freefr.dl.sourceforge.net/project/easymock/EasyMock/3.2/easymock-3.2.zip\n>       [get] Error getting http://downloads.sourceforge.net/easymock/easymock-3.2.zip to C:\\Users\\mosipov\\tomcat-build-libs\\download-1532555207.zip\n> \n> BUILD FAILED\n> D:\\Entwicklung\\Projekte\\tomcat-8.5.x\\build.xml:2630: The following error occurred while executing this line:\n> D:\\Entwicklung\\Projekte\\tomcat-8.5.x\\build.xml:2746: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n>         at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)\n>         at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1904)\n>         at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:279)\n>         at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:273)\n>         at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1446)\n>         at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:209)\n>         at sun.security.ssl.Handshaker.processLoop(Handshaker.java:913)\n>         at sun.security.ssl.Handshaker.process_record(Handshaker.java:849)\n>         at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1023)\n>         at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)\n>         at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)\n>         at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)\n>         at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)\n>         at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)\n>         at sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:153)\n>         at org.apache.tools.ant.taskdefs.Get$GetThread.openConnection(Get.java:728)\n>         at org.apache.tools.ant.taskdefs.Get$GetThread.openConnection(Get.java:748)\n>         at org.apache.tools.ant.taskdefs.Get$GetThread.openConnection(Get.java:748)\n>         at org.apache.tools.ant.taskdefs.Get$GetThread.get(Get.java:641)\n>         at org.apache.tools.ant.taskdefs.Get$GetThread.run(Get.java:631)\n> Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n>         at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:385)\n>         at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)\n>         at sun.security.validator.Validator.validate(Validator.java:260)\n>         at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:326)\n>         at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:231)\n>         at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:126)\n>         at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1428)\n>         ... 15 more\n> Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n>         at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:196)\n>         at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:268)\n>         at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:380)\n>         ... 21 more\n> \n\nThis happens for all artifacts downloaded from the assigned SF.net mirror. The issue is:\n\n> $ curl -I --verbose https://freefr.dl.sourceforge.net/project/cglib/cglib2/2.2.3/cglib-nodep-2.2.3.jar\n> \n> * Connected to freefr.dl.sourceforge.net (88.191.250.136) port 443 (#0)\n> ...\n> * TLSv1.2 (IN), TLS handshake, Finished (20):\n> { [16 bytes data]\n> * SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\n> * ALPN, server accepted to use http/1.1\n> * Server certificate:\n> *  subject: CN=freefr.dl.sourceforge.net\n> *  start date: Oct 31 19:27:00 2016 GMT\n> *  expire date: Jan 29 19:27:00 2017 GMT\n> *  subjectAltName: host \"freefr.dl.sourceforge.net\" matched cert's \"freefr.dl.sourceforge.net\"\n> *  issuer: C=US; O=Let's Encrypt; CN=Let's Encrypt Authority X3\n> *  SSL certificate verify ok.\n> } [5 bytes data]\n> \n\nThis CA is not available in the last public Java 7 release by Oracle. Only paid releases where updated: https://bugs.openjdk.java.net/browse/JDK-8154757\n\nThe alternative is to solely rely on Maven Central which works with Java 7 too."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 195204, "time": "2016-11-25T10:11:24Z", "bug_id": 60394, "creation_time": "2016-11-25T10:11:24Z", "is_private": false, "text": "This is going to become increasingly problematic given the long lifetime of a Tomcat release compared to the lifetime of public Java releases. The pace of change of what is considered a minimal acceptable TLS configuration is also likely to cause problems.\n\nUsers building locally can use a newer JDK. If they want to build using an older JDK because that is the version they are using in production then the expectation is that they use a supported JDK which should include any necessary updates.\n\nRelease managers can work-around this by downloading manually or specifying a specific mirror.\n\nIf we start to see issues with the CI system then we can use the same options as the release managers.\n\nAt this point, I don't think we should start switching mirrors because people want to build with unsupported software. If the problem becomes more significant, we can re-evaluate."}, {"count": 3, "tags": [], "text": "It should be possible to work around this issue by running once the build with the latest version of Java 8 containing the Let's Encrypt root certificate to download the build dependencies, and then build with Java 7.\n\nAlternatively, the Tomcat build could probably use the Maven Ant tasks to fetch the dependencies from Maven Central instead of the SourceForge mirrors.", "attachment_id": null, "bug_id": 60394, "id": 195205, "time": "2016-11-25T11:20:25Z", "creator": "ebourg@apache.org", "creation_time": "2016-11-25T11:20:25Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 60394, "attachment_id": null, "id": 195222, "time": "2016-11-26T01:14:54Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-11-26T01:14:54Z", "is_private": false, "text": "(In reply to Emmanuel Bourg from comment #3)\n> It should be possible to work around this issue by running once the build\n> with the latest version of Java 8 containing the Let's Encrypt root\n> certificate to download the build dependencies, and then build with Java 7.\n> \n> Alternatively, the Tomcat build could probably use the Maven Ant tasks to\n> fetch the dependencies from Maven Central instead of the SourceForge mirrors.\n\nI expect an ASF project to download artifact from our source only: Maven Central. This is proved to work and we have good contact to Sonatype for this.\n\nThe Maven Ant Tasks have been deprectated long time ago by us (the Maven team). They are dead. I strongly recommend using Aether Ant Tasks which will be soon at at the ASF as Maven Resolver Ant Tasks."}, {"count": 5, "tags": [], "text": "(In reply to Mark Thomas from comment #2)\n> This is going to become increasingly problematic given the long lifetime of\n> a Tomcat release compared to the lifetime of public Java releases. The pace\n> of change of what is considered a minimal acceptable TLS configuration is\n> also likely to cause problems.\n> \n> Users building locally can use a newer JDK. If they want to build using an\n> older JDK because that is the version they are using in production then the\n> expectation is that they use a supported JDK which should include any\n> necessary updates.\n> \n> Release managers can work-around this by downloading manually or specifying\n> a specific mirror.\n> \n> If we start to see issues with the CI system then we can use the same\n> options as the release managers.\n> \n> At this point, I don't think we should start switching mirrors because\n> people want to build with unsupported software. If the problem becomes more\n> significant, we can re-evaluate.\n\nI don't expect a bullet-proof fix.\n\nI do use Java 8, but wanted simply to indicate that this may be an issue to others. It should be at least documented on BUILDING.txt.", "attachment_id": null, "bug_id": 60394, "id": 195223, "time": "2016-11-26T01:15:33Z", "creator": "1983-01-06@gmx.net", "creation_time": "2016-11-26T01:15:33Z", "is_private": false}]
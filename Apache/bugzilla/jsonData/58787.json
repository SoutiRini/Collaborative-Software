[{"count": 0, "tags": [], "bug_id": 58787, "attachment_id": 33391, "text": "Created attachment 33391\nPatch file generated via Ant script\n\nThis new utility can be used to create \"CellBorders\" that can then be applied to one or more sheets of the workbook without creating unnecessary intermediate styles. In addition, this patch includes some helper methods to allow a workbook to report it's own SpreadsheetVersion. \n\nThe patch has an example file that includes color borders, and removing borders, and tests for changes to CellUtil.setCellProperty. \n\nThis patch depends on 58633.", "id": 187307, "time": "2016-01-01T16:43:04Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-01-01T16:43:04Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "id": 187308, "time": "2016-01-01T16:55:59Z", "bug_id": 58787, "creation_time": "2016-01-01T16:55:59Z", "is_private": false, "text": "A remaining issue, though not sure how important it is. This process creates unnecessary <border> elements in the XLSX file. Largely because CellUtil.setFormatProperties adds each piece of the border individually instead of adding them in a single shot. This is likely to be the case no matter how borders are drawn. A fix to this would be to hold all border properties in their own HashMap and process that in one piece in CellUtil.setFormatProperties. I have not done this. The same issue occurs with fills, but not in the border drawing process."}, {"count": 2, "tags": [], "bug_id": 58787, "text": "It looks like all the changes in patch.tar.gz/patch.txt were committed in bug 58633 and bug 58879.\n\nI think the two tests from TestCellUtil.java were committed as part of bug 58633. If not, could you rebase your changes, and rewrite to use junit4 instead of junit3?\n\nFor CellBorder.java, you might want to use an enum here so that CellBorders can be used in switch statements in Java 6, and also improves code quality due to type checking. See SpreadsheetVersion's implementation if you need an example. For another example, see o.a.p.ss.usermodel.HorizontalAlignment. Functions in CellBorder.java should have unit tests before this is committed.\n\nPer comment 1, if creating unnecessary intermediate <border> elements is still an issue after bug 58633, please write a unit test for that.\n\nThanks for the DrawingBorders example!\n\n==== Side-note about JUnit testing in POI ====\n\nYou'll find two different flavors of unit tests in Apache POI\n\nThere's junit3:\nimport junit.framework.TestCase;\npublic class TestSomeClass extends TestCase {\n    public void testSomeMethod() { }\n}\n\nand junit4:\nimport org.unit.Test;\npublic class TestSomeClass {\n    @Test\n    public void testSomeMethod() { }\n}\n\nWe're slowly trying to convert our junit3 tests over to junit4. There are a few reasons for this:\n* junit4 has new features that are more flexible\n* inheritance: we don't need to inherit from TestCase, making it easier to inherit from a base class that makes the tests more concise (see BaseTestWorkbook, TestXSSFWorkbook)\n* Don't need to build and maintain test suite classes--that is, classes that just list the TestCase classes to be run.\n\nNew tests should be written in junit4.", "id": 187754, "time": "2016-01-16T23:43:28Z", "creator": "onealj@apache.org", "creation_time": "2016-01-16T23:43:28Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58787, "text": "Created attachment 33455\nUpdated patch file containing quick guide modifications\n\nI added a Quick guide paragraph for this enhancement and regenerated the patch file. I also removed a redundant reference to the workbook object.", "id": 187757, "attachment_id": 33455, "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-01-17T01:30:21Z", "time": "2016-01-17T01:30:21Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "id": 187758, "time": "2016-01-17T01:41:12Z", "bug_id": 58787, "creation_time": "2016-01-17T01:41:12Z", "is_private": false, "text": "If you use the drawing borders example I added to the Quick Guide for setCellProperties, it will not create extra styles. This enhancement really adds some additional helpers around border drawing that will make it even easier."}, {"count": 5, "tags": [], "bug_id": 58787, "text": "Created attachment 33456\nRebased and updated again\n\nThis really only contains a new class CellBorders and a Quick Guide and Examples. Not real sure how to write unit tests for this since I need to look at the generated spreadsheet to determine if it worked or not. I could use some coaching on that.", "id": 187759, "time": "2016-01-17T01:57:53Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-01-17T01:57:53Z", "is_private": false, "attachment_id": 33456}, {"count": 6, "tags": [], "bug_id": 58787, "text": "Created attachment 33457\nThis is a SVN diff of the quick-guide.xml\n\nI used SVN to create a diff of the quick-guide.xml with the description of how to use CellBorder.", "id": 187763, "attachment_id": 33457, "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-01-17T05:25:32Z", "time": "2016-01-17T05:25:32Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 58787, "attachment_id": null, "id": 187771, "time": "2016-01-17T14:42:37Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-01-17T14:42:37Z", "is_private": false, "text": "I created a new object for this named CellBorder because I am working on cell borders. However, I can see this being useful for defining and applying a bunch of fills to a region as well. And, for that matter, there are other cell style properties that could be applied in this manner. So I am conflicted on whether this should be in a new class called CellBorder, or in the RegionUtil class. I would need a slightly different approach to put it in the RegionUtil class."}, {"count": 8, "attachment_id": null, "creator": "onealj@apache.org", "text": "In general, I prefer creating inheritable classes rather than util functions because\n* behavior can be overridden in an object-oriented way\n* features are more discoverable through Javadocs. People have to know CellUtil exists and contains some goodies. Util classes get disorganized, turning into a junk drawer where it's hard to search through the class to find what you want. Splitting up a util class solves the junk drawer problem but  invites the Wall-e spork clarification problem: if a function could belong in either of two util classes, which one does it go in, and if people expect it in the opposite one, possibly creating a new function that duplicates functionality.\n\nUtil functions make sense in some situations: return the maximum row number for sheets in a workbook, or return diff two workbooks, or interleave the rows of two spreadsheets (where there isn't an implied directionality, so that object and subject in `object.action(subject)` are swappable.\n\nIn general, having higher level data structures/class allows higher level client code, and that is a good thing.", "id": 187776, "time": "2016-01-17T17:51:55Z", "bug_id": 58787, "creation_time": "2016-01-17T17:51:55Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "text": "Perhaps it should be called CellStyleTemplate instead of CellBorder. Then we could have methods that add fills and other CellStyle properties, and then apply them all at once.", "is_private": false, "id": 187781, "creator": "jmarkmurph@yahoo.com", "time": "2016-01-17T21:17:09Z", "bug_id": 58787, "creation_time": "2016-01-17T21:17:09Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 58787, "attachment_id": null, "text": "Mark,\n\nDid you take a look at RegionUtil to see if meets your needs? See Bug\u00a054593.", "id": 187891, "time": "2016-01-22T05:41:19Z", "creator": "onealj@apache.org", "creation_time": "2016-01-22T05:41:19Z", "is_private": false}, {"count": 11, "tags": [], "text": "(In reply to Javen O'Neal from comment #10)\n> Mark,\n> \n> Did you take a look at RegionUtil to see if meets your needs? See Bug\u00a054593.\n\nYes, in fact RegionUtil is the source of my previous queries. But RegionUtil is slow since it takes a one at a time approach at setting cell properties. Thus creating a lot of unused intermediate CellStyles. I didn't see it until I created a moderately sized sheet. That was when I set about creating setCellProperties(). But RegionUtil can't really utilize that method the way it is written. CellBorder takes the approach of putting together the borders in a separate object, then applying them to the sheet all at once. This should perform significantly better. I am not sure if we should upgrade RegionUtil or remove it. RegionUtil is a better name because it can include fills as well, but it needs a better implementation. CellBorder does everything RegionUtil does, but performs better, and may use less memory because all those unused intermediate styles aren't created.", "is_private": false, "id": 187916, "creator": "jmarkmurph@yahoo.com", "time": "2016-01-22T20:15:13Z", "bug_id": 58787, "creation_time": "2016-01-22T20:15:13Z", "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "onealj@apache.org", "is_private": false, "id": 187932, "time": "2016-01-24T01:13:13Z", "bug_id": 58787, "creation_time": "2016-01-24T01:13:13Z", "tags": [], "text": "(In reply to Mark Murphy from comment #5)\n> Not real sure how to write unit tests for this since I need to\n> look at the generated spreadsheet to determine if it worked or not. I could\n> use some coaching on that.\n\nSometimes writing unit tests is tough. At the bare minimum, a unit test can be used to show someone how the code was intended to be used (this works great as example code if you exclude the assertions). Unit tests should say what your code should and should not do. For example, createBorder(region, ALL) should create a left border on all cells in the first column of region, and should not create a left border on any column to the right of the first column in the region.\n\nYou can and should review your results by opening the file in Excel, but that's probably the last time your feature will be tested using Excel unless there's a bug.\n\nYour unit test will have to assume some functionality is implemented correctly--which is fair to say about anything that the test wasn't explicitly written to test. This might mean writing:\n\ncell = row.createCell(0);\n//blank/empty cells don't have any style to start with.\nassertEquals(0, Util.getNumOfBorders(cell));\n\nUtil.setBorder(cell, LEFT);\nassertTrue(Util.isBorderSet(cell, LEFT));\n// the right border should not be set\nassertFalse(Util.isBorderSet(cell, RIGHT));"}, {"count": 13, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "id": 189399, "time": "2016-03-12T15:04:50Z", "bug_id": 58787, "creation_time": "2016-03-12T15:04:50Z", "is_private": false, "text": "back to working on getting the last bits in here, and as I was working on it, I noticed that CellUtil.setCellProperty has a Workbook parameter, but if it doesn't match the Workbook for the cell and exception is thrown. Shouldn't we, instead, add a version of CellUtil.setCellProperty without the Workbook parameter and depricate the old one? That Workbook parameter is ignored except for the check against the cell."}, {"count": 14, "tags": [], "bug_id": 58787, "attachment_id": null, "id": 189402, "time": "2016-03-12T15:18:08Z", "creator": "apache@gagravarr.org", "creation_time": "2016-03-12T15:18:08Z", "is_private": false, "text": "(In reply to Mark Murphy from comment #13)\n> back to working on getting the last bits in here, and as I was working on\n> it, I noticed that CellUtil.setCellProperty has a Workbook parameter, but if\n> it doesn't match the Workbook for the cell and exception is thrown.\n> Shouldn't we, instead, add a version of CellUtil.setCellProperty without the\n> Workbook parameter and depricate the old one? That Workbook parameter is\n> ignored except for the check against the cell.\n\nsetCellStyleProperties doesn't need/take a Workbook, so bringing setCellStylePropery into line with that makes sense to me"}, {"count": 15, "tags": [], "creator": "jmarkmurph@yahoo.com", "text": "Created attachment 33667\nCompleted ant patch including tests, examples, and documentation", "id": 189449, "time": "2016-03-14T02:05:43Z", "bug_id": 58787, "creation_time": "2016-03-14T02:05:43Z", "is_private": false, "attachment_id": 33667}, {"count": 16, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "id": 189450, "time": "2016-03-14T02:08:16Z", "bug_id": 58787, "creation_time": "2016-03-14T02:08:16Z", "is_private": false, "text": "(In reply to Nick Burch from comment #14)\n> (In reply to Mark Murphy from comment #13)\n> > back to working on getting the last bits in here, and as I was working on\n> > it, I noticed that CellUtil.setCellProperty has a Workbook parameter, but if\n> > it doesn't match the Workbook for the cell and exception is thrown.\n> > Shouldn't we, instead, add a version of CellUtil.setCellProperty without the\n> > Workbook parameter and depricate the old one? That Workbook parameter is\n> > ignored except for the check against the cell.\n> \n> setCellStyleProperties doesn't need/take a Workbook, so bringing\n> setCellStylePropery into line with that makes sense to me\n\nI am going to do this in a new bug since it is independent of this particular bug, and I really want to avoid scope creep."}, {"count": 17, "tags": [], "bug_id": 58787, "text": "(In reply to Mark Murphy from comment #15)\n> Created attachment 33667 [details]\n> Completed ant patch including tests, examples, and documentation\n\nAttachment 33667 doesn't compile because it imports OOXML classes (appears to only be for javadoc linking). OOXML classes aren't compiled or available to org.apache.poi.ss.util. Replace these {@link} references with regular text references and delete the imports and it'll be good. If you have code that relies on OOXML classes, you have to write Voldemort code or take advantage of inheritance of methods that are resolved at run-time [1]. If you want to check that your code compiles (and passes unit tests) before generating the patch file, run \"ant test\" or \"ant clean test\".\n\nThe solution we've accepted for junit tests is to either duplicate the test in TestHSSFWorkbook, TestXSSFWorkbook, and TestSXSSFWorkbook, or write a single test (preferred) in BaseTestWorkbook that uses testDataProvider.createWorkbook. In the case of org.apache.poi.ss.util junit tests, we've usually picked HSSFWorkbook as the class to test the methods (for the same OOXML availability reason as above). I'd like to rearrange the org.apache.poi.ss.util tests to run with HSSF, XSSF, and SXSSF instances to make sure they all work (either with junit testcase parameterization or with ITestDataProvider as we have done for org.apache.poi.hssf.usermodel, .xssf.usermodel, and .xssf.streaming unit tests). Anything in org.apache.poi.ss.util should probably work on all 3 kinds of workbooks, with the same behavior (unless a different behavior makes sense), but this is outside the scope of this bug.\n\nYou mentioned in the javadocs that PropertyTemplate would replace RegionUtil. I haven't compared the two classes side-by-side yet. Do you mean that PropertyTemplate is a higher-level wrapper around RegionUtil, and that most people using RegionUtil would likely be more interested in PropertyTemplate? Or is PropertyTemplate a rewrite of RegionUtil, fixing inconsistencies in the provided methods? I'm a fan of code reduction on my personal projects, but I try to keep POI backwards compatible if at all possible, and retire features 2+ releases after announcing deprecation (if possible). Your patch didn't include any changes to RegionUtil. What are your long-term plans for this class? Deprecate it? Merge PropertyTemplate into RegionUtil (or vice versa, the less backwards-compatible option of the two)? Call RegionUtil from PropertyTemplate?\n\nThanks for the hard work you've put into this bug.\n\n[1] Using class inheritance rather than if-then statements to avoid compile-time dependencies. Added TestDataProvider.createWorkbook(int rowAccessSize) and TestDataProvider.trackAllColumnsForAutosizing, which don't do anything special for HSSFWorkbook or XSSFWorkbook, but have special behavior for SXSSFWorkbook: https://svn.apache.org/viewvc?view=revision&revision=1730997", "id": 189451, "time": "2016-03-14T04:21:26Z", "creator": "onealj@apache.org", "creation_time": "2016-03-14T04:21:26Z", "is_private": false, "attachment_id": null}, {"count": 18, "tags": [], "bug_id": 58787, "attachment_id": null, "text": "(In reply to Javen O'Neal from comment #17)\n> If you want to check that your code compiles (and passes unit tests) before\n> generating the patch file, run \"ant test\" or \"ant clean test\".\n\n\"ant test\" unit tests fail before it gets to my test, so I am just running my tests manually.\n\n> Anything in\n> org.apache.poi.ss.util should probably work on all 3 kinds of workbooks,\n> with the same behavior (unless a different behavior makes sense)\n\nNot real sure how this would make sense with this utility. I don't know enough about how SXSSF works to make this work for that type of spreadsheet. It requires the sheet to be in memory all at once, or at least the portion that the template is being applied against.\n\n> You mentioned in the javadocs that PropertyTemplate would replace\n> RegionUtil. I haven't compared the two classes side-by-side yet. Do you mean\n> that PropertyTemplate is a higher-level wrapper around RegionUtil, and that\n> most people using RegionUtil would likely be more interested in\n> PropertyTemplate? Or is PropertyTemplate a rewrite of RegionUtil, fixing\n> inconsistencies in the provided methods? \n\nMy thought is that RegionUtil would be deprecated in favor of PropertyTemplate. PropertyTemplate is most accurately a rewrite of RegionUtil with an eye toward reducing the number of CellStyles created while borders are being written. It is possible that RegionUtil could be adjusted to use the PropertyTemplate class, but that would still create excess styles as each border is added to the CellStyle one at a time in RegionUtil. I would favor dropping it since it does nothing else, and renaming PropertyTemplate to RegionUtil makes little sense since RegionUtil is a \"static only\" class, but PropertyTemplate is not. The two classes work differently. The one advantage RegionUtil has over PropertyTemplate is that it can be used with SXSSF since it can be used with a limited set of rows.\n\nNow that I am thinking of it more, maybe PropertyTemplate can indeed be used with SXSSFWorkbooks by adding an option to apply the template to just the rows in memory, and ignoring template rows that are not in memory. Or by adding a feature to allow applying a smaller template to a relative position in the sheet.\n\nAs far as the unavailable classes in the links, and test, I will look at some other tests, and rewrite mine to conform. I did not notice the inability to compile, probably because I don't have something configured correctly in eclipse. I will figure that out.", "id": 189457, "time": "2016-03-14T11:43:25Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-03-14T11:43:25Z", "is_private": false}, {"count": 19, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 189469, "time": "2016-03-14T16:24:30Z", "bug_id": 58787, "creation_time": "2016-03-14T16:24:30Z", "is_private": false, "text": "(In reply to Mark Murphy from comment #18)\n> \"ant test\" unit tests fail before it gets to my test, so I am just running\n> my tests manually.\nAnt builds should pass if you've updated to the latest code. The build is usually green, so either you checked out the code between when dungeons checked in a breaking change and a fix, have an incomplete checkout, or one of your own changes is breaking the build. See https://builds.apache.org/job/POI/\n\n> Now that I am thinking of it more, maybe PropertyTemplate can indeed be used\n> with SXSSFWorkbooks by adding an option to apply the template to just the\n> rows in memory, and ignoring template rows that are not in memory. Or by\n> adding a feature to allow applying a smaller template to a relative position\n> in the sheet.\n\nYou could throw an error if the any cells to modify the border on are outside the current window. You could theoretically queue up modifications to any cell that is below the window and apply the changes once the row enters the access window, but we don't have a precedent for this. This would consume more RAM, which defeats the purpose of SXSSF. It's fair to have SXSSF functions mandate rows that need access are in the access window, and bow out otherwise.\n\n\n> I did not notice the inability to compile, probably because I \n> don't have something configured correctly in eclipse. I will \n> figure that out.\n\nI develop in Eclipse or vim and run tests on the command line. When I run tests in Eclipse, it runs additional stress tests that \"ant test\" doesn't run. Sometimes these extra tests fail or take extra time."}, {"count": 20, "tags": [], "text": "Created attachment 33684\nPatch file generated via Ant script\n\nI corrected the links to remove XSSF references, and compiled and tested via ant. Funny thing is, if I run ant test from the console, all tests succeed. It I run ant test via eclipse, the first test fails. But if I manually run junit on that test inside eclipse, the test passes. Not sure what is stopping the ant task from completing properly. Maybe someone that knows more about ant than I can look at it and determine what the issue is. I am using eclipse 4.5 with Java 8. Ant 1.9 passes the tests when I run it from the console.", "attachment_id": 33684, "id": 189603, "creator": "jmarkmurph@yahoo.com", "time": "2016-03-19T17:59:47Z", "bug_id": 58787, "creation_time": "2016-03-19T17:59:47Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 58787, "text": "Any thoughts about the most recent patch? I am trying to set up my environment so that I have one change per project. So, I noticed that puts a wonky name in the eclipse project file. Probably not optimal. How do you deal with this?", "id": 189693, "time": "2016-03-24T03:32:14Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-03-24T03:32:14Z", "is_private": false, "attachment_id": null}, {"count": 22, "tags": [], "text": "Take a look at the following files:\n\nCommon SS:\n - src/java/org/apache/poi/ss/util/RegionUtil.java\n   - set the same border style or color on an outer edge of a cell region\n   - almost the same as attachment 33684 except does not handle ALL, NONE, and interior edges of a region\n - src/java/org/apache/poi/ss/usermodel/BorderFormatting.java\n   - get/set border styles (dot, dash, etc) and colors\n   - implementing classes:\n      - src/java/org/apache/poi/hssf/usermodel/HSSFBorderFormatting.java\n          bound to a workbook, CFRuleRecord, and BorderFormatting*\n      - src/ooxml/java/org/apache/poi/xssf/usermodel/XSSFBorderFormatting.java\n          bound to a CTBorder\n - src/java/org/apache/poi/ss/util/CellUtil.java\n   - constants for the names of border properties to be used as keys in get/setCellStyleProperties\n   - get/setCellStyleProperties, use a Map that is detached from cells or styles, then when setting cell style properties, search through existing styles and add a new style only if no identical style exists.\n\nHSSF:\n - src/java/org/apache/poi/hssf/record/cf/BorderFormatting.java\n   - a class to handle the bit-stuffing for records used by HSSFBorderFormatting\n\nHSSF Examples:\n - src/examples/src/org/apache/poi/hssf/usermodel/examples/Borders.java\n   - a cell style attached to (potentially) multiple cells can be modified one attribute at a time (border line style, border line color)\n\nHWPF:\n - src/scratchpad/src/org/apache/poi/hwpf/usermodel/BorderCode.java\n   - create a border object that is detached from other objects (paragraph, table)\n   - specifies border line width, border style (dot, dash, etc), border color, border space between text and border, etc, presumably for Text Boxes?\n\nXWPF:\n - src/ooxml/java/org/apache/poi/xwpf/usermodel/Borders.java\n   - an enum to hold the ~191 border styles for Word documents\n\nSome of these features were written without enums, so it's pretty messy. Going forward, it's worthwhile to make these methods enum-friendly (and therefore type safe).\n\nAll of the classes listed above operate on a single border format that could be applied to a single cell, except for RegionUtil.\nRegionUtil sets the styles with CellUtil.setCellStyleProperty immediately, while PropertyTemplate maintains an internal Map to a Sheet, and explicitly applies the styles to a sheet with applyBorders.\n\nIf two regions do not overlap and the style of each region is homogeneous, RegionUtil may create *slightly* more intermediate styles (the corners) than PropertyTemplate. If two regions overlap, RegionUtil is likely to create many more styles than necessary.\n\nHere's what needs done:\n1. DrawingBorders example: Use CellRangeAddress(\"B2:D5\") to make it easier to see what's going on\n2. Unit test: add a test case counting up the number of styles that are in a workbook before and after. Do the same for RegionUtil and demonstrate that PropertyTemplate creates significantly fewer intermediate styles. Either look at total number of cell styles (wb.getNumCellStyles) or number of cell styles in the styles table that are not referenced by any cells.\n3. Try to find more descriptive names for PropertyTemplate and Extent. BorderUtil/BorderPropertyTemplate and BorderArrangement/BorderRegionEdges/BorderExtent.\n4. Try to integrate your PropertyTemplate code into RegionUtil (might be easier to copy RegionUtil into PropertyTemplate and rename PropertyTemplate to RegionUtil).\n5. My guess is that the inspiration for this class is to build up a template that you could stamp onto multiple similarly-formatted sheets. This is a more common usecase for POI because we deal with computer-generated templates, but it might not be the most common use case (certainly for entry-level applications). See if you can make this class more approachable to a wider audience. If not, then maybe it's better to let BorderPropertyTemplate remain a separate (higher-level) class from RegionUtil, and not plan to replace RegionUtil.\n6. The _propertyTemplate map is stuck/hidden from a user. What if the user wants to build up a base template, and fork it with two variations? Potential solution: add a PropertyTemplate(PropertyTemplate other) constructor that would deep-copy the Map (I think the Java consensus is that copy constructors are preferred over clone because it's easier to subclass).\n7. Create a blocker to this bug: a re-write/deprecation of short borderTypes in favor of enums. It'd be a shame to have a shiny new class that uses non-type-safe borderTypes or bloat your class with short and enum variants of each method\nMost of the SS utilities are static (stateless) methods, but I think your encapsulation of a complex data structure makes sense.\n\nPlease look through the classes that I mentioned, especially CellUtil and RegionUtil to see if there's anything you can leverage.\n\nThanks for the hard work!", "attachment_id": null, "id": 189906, "creator": "onealj@apache.org", "time": "2016-04-02T04:34:31Z", "bug_id": 58787, "creation_time": "2016-04-02T04:34:31Z", "is_private": false}, {"count": 23, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 189917, "time": "2016-04-02T20:25:45Z", "bug_id": 58787, "creation_time": "2016-04-02T20:25:45Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #22)\n> 7. Create a blocker to this bug: a re-write/deprecation of short borderTypes in\n> favor of enums.\nOpened bug 59264 to take care of this."}, {"count": 24, "tags": [], "bug_id": 58787, "attachment_id": null, "text": "Update this documentation as well: https://poi.apache.org/faq.html#faq-N100E3", "id": 189996, "time": "2016-04-06T04:10:33Z", "creator": "onealj@apache.org", "creation_time": "2016-04-06T04:10:33Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 58787, "text": "(In reply to Mark Murphy from comment #20)\n> Created attachment 33684 [details]\n> Patch file generated via Ant script\n\nApplied in r1747851 to branches/ss_border_property_template", "id": 191557, "attachment_id": null, "creator": "onealj@apache.org", "creation_time": "2016-06-11T06:48:28Z", "time": "2016-06-11T06:48:28Z", "is_private": false}, {"count": 26, "tags": [], "text": "(In reply to Javen O'Neal from comment #22)\n> 1. DrawingBorders example: Use CellRangeAddress(\"B2:D5\") to make it easier\n> to see what's going on\nApplied in r1747888\n\n> 3. Try to find more descriptive names for PropertyTemplate and Extent.\nApplied in r1747884. Using BorderPropertyTemplate and BorderExtent.\n\n> 7. Create a blocker to this bug: a re-write/deprecation of short borderTypes\n> in favor of enums.\nApplied in r1747868. I converted borderTypes from short to BorderStyles enum.\nThe colors will remain as short values, since they are indices into the color table (indexed+custom).", "attachment_id": null, "bug_id": 58787, "id": 191574, "time": "2016-06-11T12:26:01Z", "creator": "onealj@apache.org", "creation_time": "2016-06-11T12:26:01Z", "is_private": false}, {"count": 27, "tags": [], "creator": "onealj@apache.org", "text": "Mark,\n\nWhen adding a border color, if a border line style is not set in the property template, the code sets it. Was there any reason for using drawTopBorder rather than directly adding the property?\n\n>  private void drawTopBorderColor(CellRangeAddress range, short color) {\n>      int row = range.getFirstRow();\n>      int firstCol = range.getFirstColumn();\n>      int lastCol = range.getLastColumn();\n>      for (int i = firstCol; i <= lastCol; i++) {\n>          CellAddress cell = new CellAddress(row, i);\n>          // if BORDER_TOP is not set on BorderPropertyTemplate, make a thin border so that there's something to color\n>          if (borderIsNotSet(cell, CellUtil.BORDER_TOP)) {\n> -            drawTopBorder(new CellRangeAddress(row, row, i, i), BorderStyle.THIN);\n> +            addProperty(cell, CellUtil.BORDER_TOP, BorderStyle.THIN);\n>          }\n>          addProperty(cell, CellUtil.TOP_BORDER_COLOR, color);\n>      }\n>  }\n\nAlso, what should BorderPropertyTemplate do if the border line style is set to NONE and then drawTopBorderColor is called? Should it change the BorderStyle to THIN?\n>  private boolean borderIsNotSet(CellAddress cell, String borderDirection) {\n>      Object borderLineStyle = getTemplateProperty(cell, borderDirection);\n> -    return (borderLineStyle == null);\n> +    return (borderLineStyle == null) || (borderLineStyle == BorderStyle.NONE);\n>  }", "id": 191589, "time": "2016-06-12T23:05:30Z", "bug_id": 58787, "creation_time": "2016-06-12T23:05:30Z", "is_private": false, "attachment_id": null}, {"count": 28, "tags": [], "creator": "onealj@apache.org", "text": "(In reply to Javen O'Neal from comment #22)\n> 6. The _propertyTemplate map is stuck/hidden from a user. What if the user\n> wants to build up a base template, and fork it with two variations?\n> Potential solution: add a PropertyTemplate(PropertyTemplate other)\n> constructor that would deep-copy the Map\nApplied in r1748071.", "id": 191590, "time": "2016-06-13T01:05:05Z", "bug_id": 58787, "creation_time": "2016-06-13T01:05:05Z", "is_private": false, "attachment_id": null}, {"count": 29, "tags": [], "bug_id": 58787, "attachment_id": null, "id": 191591, "time": "2016-06-13T01:31:02Z", "creator": "onealj@apache.org", "creation_time": "2016-06-13T01:31:02Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #25)\n> (In reply to Mark Murphy from comment #20)\n> > Created attachment 33684 [details]\n> > Patch file generated via Ant script\n> \n> Applied in r1747851 to branches/ss_border_property_template\n\nMerged to trunk in r1748075. Deleted branches/ss_border_property_template in r1748076.\n\nRemaining:\n* comment 27 (question about draw(Top|Bottom|Left|Right)BorderColor)\n* 2. Unit test: add a test case counting up the number of styles that are in a workbook before and after. Do the same for RegionUtil and demonstrate that PropertyTemplate creates significantly fewer intermediate styles. Either look at total number of cell styles (wb.getNumCellStyles) or number of cell styles in the styles table that are not referenced by any cells."}, {"count": 30, "tags": [], "creator": "jmarkmurph@yahoo.com", "attachment_id": null, "id": 191599, "time": "2016-06-13T11:48:28Z", "bug_id": 58787, "creation_time": "2016-06-13T11:48:28Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #26)\n> (In reply to Javen O'Neal from comment #22)\n> > 1. DrawingBorders example: Use CellRangeAddress(\"B2:D5\") to make it easier\n> > to see what's going on\n> Applied in r1747888\n> \n> > 3. Try to find more descriptive names for PropertyTemplate and Extent.\n> Applied in r1747884. Using BorderPropertyTemplate and BorderExtent.\n> \n> > 7. Create a blocker to this bug: a re-write/deprecation of short borderTypes\n> > in favor of enums.\n> Applied in r1747868. I converted borderTypes from short to BorderStyles enum.\n> The colors will remain as short values, since they are indices into the\n> color table (indexed+custom).\n\nSorry for taking so long to send my patches to you. If I had added my changes, you wouldn't have had to do so much work. Instead of BorderPropertyTemplate I was using CellStyleTemplate as it would be useful for other CellStyle attributes beside Border attributes. For example I had planned to add fills to it as well. I moved away from BorderPropertyTemplate since that name seems limiting to me. If I had sent my patch sooner, you would have known that. My fault, but just to prevent too many from using BorderPropertyTemplate, we may want to change that sooner rather than later.\n\nThanks for taking your time to work on this."}, {"count": 31, "tags": [], "bug_id": 58787, "text": "(In reply to Javen O'Neal from comment #27)\n> Mark,\n> \n> When adding a border color, if a border line style is not set in the\n> property template, the code sets it. Was there any reason for using\n> drawTopBorder rather than directly adding the property?\n> \n> >  private void drawTopBorderColor(CellRangeAddress range, short color) {\n> >      int row = range.getFirstRow();\n> >      int firstCol = range.getFirstColumn();\n> >      int lastCol = range.getLastColumn();\n> >      for (int i = firstCol; i <= lastCol; i++) {\n> >          CellAddress cell = new CellAddress(row, i);\n> >          // if BORDER_TOP is not set on BorderPropertyTemplate, make a thin border so that there's something to color\n> >          if (borderIsNotSet(cell, CellUtil.BORDER_TOP)) {\n> > -            drawTopBorder(new CellRangeAddress(row, row, i, i), BorderStyle.THIN);\n> > +            addProperty(cell, CellUtil.BORDER_TOP, BorderStyle.THIN);\n> >          }\n> >          addProperty(cell, CellUtil.TOP_BORDER_COLOR, color);\n> >      }\n> >  }\n> \n> Also, what should BorderPropertyTemplate do if the border line style is set\n> to NONE and then drawTopBorderColor is called? Should it change the\n> BorderStyle to THIN?\n> >  private boolean borderIsNotSet(CellAddress cell, String borderDirection) {\n> >      Object borderLineStyle = getTemplateProperty(cell, borderDirection);\n> > -    return (borderLineStyle == null);\n> > +    return (borderLineStyle == null) || (borderLineStyle == BorderStyle.NONE);\n> >  }\n\nWhy use drawTopBorder? I don't have the code in front of me right now, but probably to be consistent with the others. For interior borders there is an issue with page breaks, if you do not have both the top border on one cell, and the bottom border of the cell above it, either the line at the bottom of the page or the line at the top of the next page will be missing from the printed document. This would not apply to top borders, but I suspect that all the color methods just use the draw method to ensure any special edge cases like that are handled.\n\nWhat to do about setting color for NONE border? I guess that the least surprising option would be to add a THIN border.", "id": 191600, "attachment_id": null, "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-06-13T12:00:53Z", "time": "2016-06-13T12:00:53Z", "is_private": false}, {"count": 32, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 191604, "time": "2016-06-13T15:52:59Z", "bug_id": 58787, "creation_time": "2016-06-13T15:52:59Z", "is_private": false, "text": "I can roll back the changes for BorderPropertyTemplate and add CellStyleTemplate. I like that idea better. Maybe rewrite RegionUtil as well if you want a class that operates on a cell range rather than a single cell."}, {"count": 33, "tags": [], "bug_id": 58787, "text": "(In reply to Javen O'Neal from comment #32)\n> I can roll back the changes for BorderPropertyTemplate and add\n> CellStyleTemplate. I like that idea better. Maybe rewrite RegionUtil as well\n> if you want a class that operates on a cell range rather than a single cell.\n\nI have some ideas for RegionUtil that would take advantage of CellStyleTemplate. I just need to decide how to implement them. We could set up some methods that would draw a full grid, or horizontal lines or vertical lines, or full grid with an outline. Potentially other combinations, but what is the best way to do that. Then when CellStyleTemplate supports fills we could add even/odd banding in RegionUtil. Still meditating on that. This is just to make CellStyleTemplate more approachable. Maybe to keep things simple we should just have an enum of predefined CellStyleTemplates accessible from RegionUtil with a single call, and anything more complex would call for direct use of the CellStyleTemplate.", "id": 191606, "time": "2016-06-13T16:12:07Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-06-13T16:12:07Z", "is_private": false, "attachment_id": null}, {"count": 34, "tags": [], "text": "(In reply to Javen O'Neal from comment #32)\n> I can roll back the changes for BorderPropertyTemplate and add\n> CellStyleTemplate. I like that idea better. Maybe rewrite RegionUtil as well\n> if you want a class that operates on a cell range rather than a single cell.\nRolled back in r1748293, r1748294, and r1748295.", "attachment_id": null, "id": 191611, "creator": "onealj@apache.org", "time": "2016-06-13T18:16:34Z", "bug_id": 58787, "creation_time": "2016-06-13T18:16:34Z", "is_private": false}, {"count": 35, "tags": [], "bug_id": 58787, "text": "(In reply to comment #27)\n> When adding a border color, if a border line style is not set in the property\n> template, the code sets it. Was there any reason for using drawTopBorder rather\n> than directly adding the property?\n\nNow that I can look at my code, this is a style thing. While it would work to just add the code here, if a bug were to rear it's ugly head in drawTopBorder(), we would potentially have two places to make the correction. One in drawTopBorderColor(), and one in drawTopBorder(). Notice that there is already one side case where we are removing a border by setting it to NONE which adds extra code. Granted the need to ensure a border exists to apply a color to would not ever be setting the top border to NONE, but say another side case appears? My time programming RPG has given me a strong appreciation for the DRY concepts because I frequently experience what happens when that isn't followed.", "id": 191618, "time": "2016-06-13T23:10:53Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-06-13T23:10:53Z", "is_private": false, "attachment_id": null}, {"count": 36, "tags": [], "creator": "jmarkmurph@yahoo.com", "text": "(In reply to comment #27)\n>  private boolean borderIsNotSet(CellAddress cell, String borderDirection) {\n>      Object borderLineStyle = getTemplateProperty(cell, borderDirection);\n> -    return (borderLineStyle == null);\n> +    return (borderLineStyle == null) || (borderLineStyle == BorderStyle.NONE);\n>  }\n\nChanged this to borderIsSet() because I generally do not like negative logic flags. That is, booleans with something like Not in the name. These flags tend to map a value like Found to False, and Not Found to True. Is the object notFound? Yes the object is notFound, or No the object is not notFound. Too many nots. I prefer to put the negation in the operator.", "id": 191623, "time": "2016-06-14T00:39:02Z", "bug_id": 58787, "creation_time": "2016-06-14T00:39:02Z", "is_private": false, "attachment_id": null}, {"count": 37, "tags": [], "text": "Created attachment 33948\nPatch file generated by ant\n\nThis leaves 2. Additional unit tests to verify reduced style creation unfinished", "is_private": false, "id": 191624, "creator": "jmarkmurph@yahoo.com", "time": "2016-06-14T01:49:43Z", "bug_id": 58787, "creation_time": "2016-06-14T01:49:43Z", "attachment_id": 33948}, {"count": 38, "tags": [], "text": "r1754691 addresses issues 1,3, and 6 from comment 22.\n\nRemaining is issue 2.\n\nAs far as issues 4 and 5 go, I plan to add additional attributes in the CellStyleTemplate class, and I am considering ways to integrate it into the RegionUtil class, but have not yet determined how that would work.", "attachment_id": null, "bug_id": 58787, "id": 192756, "time": "2016-08-01T00:06:06Z", "creator": "jmarkmurph@yahoo.com", "creation_time": "2016-08-01T00:06:06Z", "is_private": false}, {"count": 39, "tags": [], "creator": "onealj@apache.org", "text": "When there is no significant speed or memory benefit to using (int row, int col) arguments over a more descriptive CellAddress argument to a public function, only the function using the CellAddress argument should be in the public API.\n\nThis keeps classes smaller and easier to find the function that needs to be used, even if it moves the CellAddress object creation from the POI library to user code. This is probably a good thing because it encourages reuse of the CellAddress objects (hiding the object creation in the method hides that cost).\n\nI would recommend deleting the following methods:\n> public int getNumBorders(int row, int col)\n> public BorderStyle getBorderStyle(int row, int col, String property)\n> public int getNumBorderColors(int row, int col)\n> public short getTemplateProperty(int row, int col, String property)\n\nEvery POI entry point is:\n* another function to test\n* another potential bug (null pointer and range check being the most likely)\n* mental burden for the user to figure out which variant of a function to use.\n\nThese can be completely removed (no deprecation warning) without a deprecation warning up to 3.15 final release.", "id": 192758, "time": "2016-08-01T04:16:38Z", "bug_id": 58787, "creation_time": "2016-08-01T04:16:38Z", "is_private": false, "attachment_id": null}, {"count": 40, "tags": [], "text": "Two other changes:\n# Rather than saving all property template values as Shorts, I stored higher-level objects (BorderStyle and BorderExtent) when available. This user code, makes unit tests, and error messages easier to read while also allowing us to deprecate and remove meaningless code/id fields on enums.\n> public Object getTemplateProperty(CellAddress cell, String property)\nfrom [1]\n\n# As a marginal performance improvement, I used 4 Map.containsKey calls rather than for-looping over all the keys in cell style template to count getNumBorders and getNumBorderColors [2].\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/util/BorderPropertyTemplate.java?revision=1748075&view=markup&pathrev=1748292#l928\n[2] https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/util/BorderPropertyTemplate.java?revision=1748075&view=markup&pathrev=1748292#l888", "attachment_id": null, "bug_id": 58787, "id": 192759, "time": "2016-08-01T04:30:20Z", "creator": "onealj@apache.org", "creation_time": "2016-08-01T04:30:20Z", "is_private": false}, {"count": 41, "tags": [], "creator": "jmarkmurph@yahoo.com", "text": "(In reply to Javen O'Neal from comment #40)\n> Two other changes:\n> # Rather than saving all property template values as Shorts, I stored\n> higher-level objects (BorderStyle and BorderExtent) when available. This\n> user code, makes unit tests, and error messages easier to read while also\n> allowing us to deprecate and remove meaningless code/id fields on enums.\n> > public Object getTemplateProperty(CellAddress cell, String property)\n> from [1]\n> \n> # As a marginal performance improvement, I used 4 Map.containsKey calls\n> rather than for-looping over all the keys in cell style template to count\n> getNumBorders and getNumBorderColors [2].\n> \n> [1]\n> https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/util/\n> BorderPropertyTemplate.java?revision=1748075&view=markup&pathrev=1748292#l928\n> [2]\n> https://svn.apache.org/viewvc/poi/trunk/src/java/org/apache/poi/ss/util/\n> BorderPropertyTemplate.java?revision=1748075&view=markup&pathrev=1748292#l888\n\nNever mind, I wasn't ready anyway, something has changed in my environment since I last tested, and I can't make things work now. Rokie mistake, won't happen again.\n\nI have reverted things until I get it cleared up in my environment. I will look at your suggestions as well. Thanks for those.", "id": 192760, "time": "2016-08-01T04:36:09Z", "bug_id": 58787, "creation_time": "2016-08-01T04:36:09Z", "is_private": false, "attachment_id": null}, {"count": 42, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 192761, "time": "2016-08-01T04:55:00Z", "bug_id": 58787, "creation_time": "2016-08-01T04:55:00Z", "is_private": false, "text": "(In reply to Mark Murphy from comment #41)\n> something has changed in my environment since I last tested\n\nTry ant clean jenkins. Sometimes outdated artifacts don't get rebuilt when they should (I've been bitten on test-ss and test-ooxml-ss before), probably due to problems in the ant rules I wrote into build.xml.\n\nIf you want, create an svn branch to commit your changes and merge when done. I believe we can create a Jenkins job for branches.\n\nIf you're comfortable with git or git-svn, local commits is another good option."}, {"count": 43, "tags": [], "creator": "jmarkmurphy@apache.org", "attachment_id": null, "id": 194142, "time": "2016-10-05T02:33:18Z", "bug_id": 58787, "creation_time": "2016-10-05T02:33:18Z", "is_private": false, "text": "r1763338 addresses issues 1,3, 6, and 7 from comment 22.\n\nRemaining is issue 2.\n\nAs far as issues 4 and 5 go, I plan to add additional attributes in the CellStyleTemplate class, and I am considering ways to integrate it into the RegionUtil class, but have not yet determined how that would work."}]
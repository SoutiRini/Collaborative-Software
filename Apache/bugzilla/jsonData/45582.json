[{"count": 0, "tags": [], "creator": "james_perry@bmc.com", "attachment_id": 22397, "is_private": false, "id": 119512, "time": "2008-08-06T09:38:35Z", "bug_id": 45582, "creation_time": "2008-08-06T09:38:35Z", "text": "Created attachment 22397\nSample .xls file\n\nI'm using the latest release of POI: poi-3.1-FINAL-20080629.jar\nI have attached a sample .xls file, source, and exception.\n\nHere is the sample code:\npublic class theApp {\n    public static void main(String[] Args) {\n        try {\n            POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(\"test-data.xls\"));\n            HSSFWorkbook wb = new HSSFWorkbook(fs);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\nWhen attempting to open a .xls file I receive the following exception:\n\norg.apache.poi.hssf.record.RecordFormatException: Error reading bytes\n\tat org.apache.poi.hssf.record.RecordInputStream.nextRecord(RecordInputStream.java:115)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:123)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:246)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:169)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:151)\n\tat theApp.main(theApp.java:18)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)\nCaused by: org.apache.poi.util.LittleEndian$BufferUnderrunException: buffer underrun\n\tat org.apache.poi.util.LittleEndian.readFromStream(LittleEndian.java:482)\n\tat org.apache.poi.util.LittleEndian.readShort(LittleEndian.java:414)\n\tat org.apache.poi.hssf.record.RecordInputStream.nextRecord(RecordInputStream.java:113)\n\t... 10 more"}, {"count": 1, "tags": [], "bug_id": 45582, "is_private": false, "text": "I can open this file in Excel without issue or apparent conversion.  Once saved from Excel, this issue goes away.", "id": 119513, "time": "2008-08-06T09:45:30Z", "creator": "james_perry@bmc.com", "creation_time": "2008-08-06T09:45:30Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45582, "attachment_id": null, "text": "Fixed in svn r683706.\n\nThe example file has one extra byte of data beyond the EOFRecord.  BTW - what application produced this file?\n\nPOI always attempted to read the next record sid, without first checking for stream.available().  This was wrong, seemed to work because another bug in LittleEndian caused readShort() to return 0 when there were zero bytes available.  All example spreadsheets up until now have had exactly zero bytes data after the EOFRecord.  RecordInputStream was interpreting nextSid==0 as end of stream.  This was also a little bit wrong, since 0x0000 *is* a valid Record sid (from a previous Excel version).\n\nRecordInputStream was changed to check the number of bytes left in the stream before reading the next sid.  'End of stream' condition is now represented by nextSid==-1 (a safer number). LittleEndian was modified to properly throw BufferUnderrunException even for zero bytes read.  LittleEndian was also changed to avoid creating temporary byte arrays just to read bytes, shorts, ints and longs.\n\nA junit test case was added using the sample file provided.", "id": 119561, "time": "2008-08-07T13:44:33Z", "creator": "josh@apache.org", "creation_time": "2008-08-07T13:44:33Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45582, "is_private": false, "text": "(In reply to comment #2)\n> Fixed in svn r683706.\n> The example file has one extra byte of data beyond the EOFRecord.  BTW - what\n> application produced this file?\n> POI always attempted to read the next record sid, without first checking for\n> stream.available().  This was wrong, seemed to work because another bug in\n> LittleEndian caused readShort() to return 0 when there were zero bytes\n> available.  All example spreadsheets up until now have had exactly zero bytes\n> data after the EOFRecord.  RecordInputStream was interpreting nextSid==0 as end\n> of stream.  This was also a little bit wrong, since 0x0000 *is* a valid Record\n> sid (from a previous Excel version).\n> RecordInputStream was changed to check the number of bytes left in the stream\n> before reading the next sid.  'End of stream' condition is now represented by\n> nextSid==-1 (a safer number). LittleEndian was modified to properly throw\n> BufferUnderrunException even for zero bytes read.  LittleEndian was also\n> changed to avoid creating temporary byte arrays just to read bytes, shorts,\n> ints and longs.\n> A junit test case was added using the sample file provided.\n\n(In reply to comment #2)\n> Fixed in svn r683706.\n> The example file has one extra byte of data beyond the EOFRecord.  BTW - what\n> application produced this file?\n> POI always attempted to read the next record sid, without first checking for\n> stream.available().  This was wrong, seemed to work because another bug in\n> LittleEndian caused readShort() to return 0 when there were zero bytes\n> available.  All example spreadsheets up until now have had exactly zero bytes\n> data after the EOFRecord.  RecordInputStream was interpreting nextSid==0 as end\n> of stream.  This was also a little bit wrong, since 0x0000 *is* a valid Record\n> sid (from a previous Excel version).\n> RecordInputStream was changed to check the number of bytes left in the stream\n> before reading the next sid.  'End of stream' condition is now represented by\n> nextSid==-1 (a safer number). LittleEndian was modified to properly throw\n> BufferUnderrunException even for zero bytes read.  LittleEndian was also\n> changed to avoid creating temporary byte arrays just to read bytes, shorts,\n> ints and longs.\n> A junit test case was added using the sample file provided.\n\nThis file was created by Business Objects XI Update 2.  \n\nCan you tell me (roughly) when this resolution will be available in a FINAL build?", "id": 119562, "time": "2008-08-07T13:52:41Z", "creator": "james_perry@bmc.com", "creation_time": "2008-08-07T13:52:41Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 45582, "attachment_id": null, "text": "(In reply to comment #3)\n> Can you tell me (roughly) when this resolution will be available in a FINAL\n> build?\n\nI'm not sure of the exact timing for the next release, but it might be in about a month.\n", "id": 119563, "time": "2008-08-07T13:56:48Z", "creator": "josh@apache.org", "creation_time": "2008-08-07T13:56:48Z", "is_private": false}]
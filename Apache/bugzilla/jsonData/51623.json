[{"count": 0, "attachment_id": null, "creator": "t0m.k@email.cz", "text": "org.apache.poi.poifs.crypt.AgileDecryptor.ChunkedCipherInputStream.read(byte[], int, int) does not finish if there are less bytes left in the stream than requested by 3rd method parameter. It should also return -1 if no bytes were read because of end of stream.", "id": 148403, "time": "2011-08-05T12:49:23Z", "bug_id": 51623, "creation_time": "2011-08-05T12:49:23Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "yegor@dinom.ru", "text": "(In reply to comment #0)\n> org.apache.poi.poifs.crypt.AgileDecryptor.ChunkedCipherInputStream.read(byte[],\n> int, int) does not finish if there are less bytes left in the stream than\n> requested by 3rd method parameter. It should also return -1 if no bytes were\n> read because of end of stream.\n\nThis situation can happen when there are padding bytes and the stream is *longer* than the actual data. Can you upload a test case that shows the problem: I can't reproduce the problem with my MS Office 2010.\n\nAs of r1293784, POI provides Decryptor#getLength() that returns length of the\ndecrypted data stream. You should change your code to read this length instead of reading to the end of the stream, it should always work.\n\nYegor", "id": 154359, "attachment_id": null, "bug_id": 51623, "creation_time": "2012-02-29T11:33:05Z", "time": "2012-02-29T11:33:05Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 51623, "text": "Created attachment 28743\nfile cannot be opened by POI\n\nI found some xls files cannot be opened with the POI methods. However Office and Openoffice can open them.\nThese files are publicated by a fantasy football site and I suppose that they are created intentionally in this way, in order to avoid that their data could be taken by competitor applications.\nIs known it's possible to realize excel files in this way?\n\nThanks a lot", "id": 158907, "time": "2012-05-08T16:34:23Z", "creator": "juri.castellani@gmail.com", "creation_time": "2012-05-08T16:34:23Z", "is_private": false, "attachment_id": 28743}, {"count": 3, "tags": [], "bug_id": 51623, "text": "Hi Yegor,\n\nI've run into this when I tried just to save decrypted version of a file without actually examining its contents. When we've started to actually parse the file using other POI stuff, this bug never occurred.\n\nI'll attach code to reproduce...", "id": 158970, "time": "2012-05-11T09:21:04Z", "creator": "t0m.k@email.cz", "creation_time": "2012-05-11T09:21:04Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 51623, "text": "Created attachment 28759\nCode and xlsx file to reproduce\n\nThe testcase.zip file contains encrypted xlsx file and TestDecryptor class with main method which save decrypted content of a file in another file.\n\nThere's also FixedAgileDecryptor class which is slightly adjusted POI AgileDecryptor, but with the cycling fixed. I don't remember anymore what I've changed in there, but it were just few lines... (it's AgileDecryptor from 3.8 beta4)", "id": 158971, "time": "2012-05-11T09:30:09Z", "creator": "t0m.k@email.cz", "creation_time": "2012-05-11T09:30:09Z", "is_private": false, "attachment_id": 28759}, {"count": 5, "attachment_id": null, "creator": "kiwiwings@apache.org", "text": "In the ChunkedCipherInputStream.read method there was a fix as part of #55818 - so I assume this issue has been fixed there.\n\nThe first attachment (Voti_37a_SerieA.xls) is a html file, which can be handled by Libre Office and MS Excel (but not MS Excel Viewer), so it's not relevant for this bug report.\n\nThe second attachment can be successfully read with the attached TestDecryptor-code and the following code ... so this works-for-me ;)\n\nNPOIFSFileSystem fs = new NPOIFSFileSystem(new File(\"encrypted.xlsx\"));\nEncryptionInfo info = new EncryptionInfo(fs);\n\nDecryptor d = Decryptor.getInstance(info);\n\nassertTrue(d.verifyPassword(\"aaa\"));\n\nInputStream is = d.getDataStream(fs);\nXSSFWorkbook wb = new XSSFWorkbook(is);\nis.close();\n\nIterator<Row> row = wb.getSheetAt(0).rowIterator();\nwhile (row.hasNext()) {\n    Cell c = row.next().getCell(0);\n    if (c == null) continue;\n    System.out.println(c.getStringCellValue());\n}", "id": 174747, "time": "2014-04-21T16:18:16Z", "bug_id": 51623, "creation_time": "2014-04-21T16:18:16Z", "tags": [], "is_private": false}]
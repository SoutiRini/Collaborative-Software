[{"count": 0, "tags": [], "creator": "dbw@zurich.ibm.com", "attachment_id": null, "is_private": false, "id": 107155, "time": "2007-08-23T04:37:11Z", "bug_id": 43197, "creation_time": "2007-08-23T04:37:11Z", "text": "The output of Canonicalizer.canonicalizeSubtree(Node) omits namespaces when a\nDocument is passed that was created from scratch, i.e. using\nDocumentBuilder.newDocument() and appending children manually. This problem\ndoesn't occur when a Document is passed that was created by parsing, i.e. by\nusing DocumentBuilder.parse(...).\n\nReproducible under:\nibm-jdk-1.5.0.4\nsun-jdk-1.5.0.12\n\nUsing XML-security from Subversion, revision 568937 (checked out on Aug 23, 2007)\n\nThe following JUnit test reproduces the bug:\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport junit.framework.TestCase;\n\nimport org.apache.xml.security.c14n.CanonicalizationException;\nimport org.apache.xml.security.c14n.Canonicalizer;\nimport org.apache.xml.security.c14n.InvalidCanonicalizerException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\npublic class CanonicalizationTestCase extends TestCase {\n    public void test() throws ParserConfigurationException, SAXException,\n            IOException, TransformerException, InvalidCanonicalizerException,\n            CanonicalizationException {\n        org.apache.xml.security.Init.init();\n        DocumentBuilderFactory _documentBuilderFactory = DocumentBuilderFactory\n                .newInstance();\n        _documentBuilderFactory.setNamespaceAware(true);\n        TransformerFactory _transformerFactory = TransformerFactory\n                .newInstance();\n        String dummyXML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><dummy\nxmlns=\\\"http://dummyNS\\\"><child>this is a child</child></dummy>\";\n        String dummyNS = \"http://dummyNS\";\n        Document d1; // Document created from scratch\n        Document d2; // Document created by parsing\n        DocumentBuilder db1 = _documentBuilderFactory.newDocumentBuilder();\n        d1 = db1.newDocument();\n        Element dummyElement = d1.createElementNS(dummyNS, \"dummy\");\n        Element childElement = d1.createElementNS(dummyNS, \"child\");\n        childElement.setTextContent(\"this is a child\");\n        dummyElement.appendChild(childElement);\n        d1.appendChild(dummyElement);\n        DocumentBuilder db2 = _documentBuilderFactory.newDocumentBuilder();\n        d2 = db2.parse(new InputSource(new StringReader(dummyXML)));\n\n        // compare documents by serializing them to a String\n        Transformer t = _transformerFactory.newTransformer();\n        t.setOutputProperty(OutputKeys.METHOD, \"xml\");\n        DOMSource source1 = new DOMSource(d1);\n        StringWriter sw1 = new StringWriter();\n        t.transform(source1, new StreamResult(sw1));\n        DOMSource source2 = new DOMSource(d2);\n        StringWriter sw2 = new StringWriter();\n        t.transform(source2, new StreamResult(sw2));\n        System.out.println(sw1.toString());\n        System.out.println(sw2.toString());\n        assertEquals(sw2.toString(), sw1.toString());\n\n        // compare canonicalizations\n        Canonicalizer c14n;\n        c14n = Canonicalizer\n               .getInstance(\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\");\n        String output1 = new String(c14n.canonicalizeSubtree(d1));\n        String output2 = new String(c14n.canonicalizeSubtree(d2));\n        System.out.println(new String(output1));\n        System.out.println(new String(output2));\n        assertEquals(output2, output1);\n    }\n}"}, {"count": 1, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "is_private": false, "id": 107716, "time": "2007-09-04T11:05:08Z", "bug_id": 43197, "creation_time": "2007-09-04T11:05:08Z", "text": "This is not a bug. You need to explicitly add namespace attributes with the\nDOM L2 Element.setAttributeNS method on the elements that they should be defined\non in order for them to be \"visible\" to\nthe canonicalization implementation. In your code, insert this statement:\n\ndummyElement.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns\", dummyNS);"}]
[{"count": 0, "tags": [], "creator": "bechtel@ipcon.de", "text": "NetRexxC copies the sourcefiles to the build directory and compiles them there.\nSo, all \nmessages from the compiler refer to the copied files, not the original\nones.\nThe patch \ncorrects that in that it replaces the paths in the compiler messages\nwith the original source \nfile paths.\nFurther, it breaks up the log into single lines, so that eventlisteners get \none\nevent per compiler message, not one for all (doing so is more conformant with\nthe other \ntasks).\nHere's the patch:\n--------------------------\n--- NetRexxC.org\tSat Mar 30 16:15:55 2002\n+++ \nNetRexxC.java\tMon Apr  1 13:41:01 2002\n@@ -57,6 +57,8 @@\n import java.io.IOException;\n \nimport java.io.StringWriter;\n import java.io.PrintWriter;\n+import \njava.io.StringReader;\n+import java.io.BufferedReader;\n \n import java.util.Vector;\n \nimport java.util.Hashtable;\n@@ -567,24 +569,41 @@\n             StringWriter out = new StringWriter(); \n\n             int rc = COM.ibm.netrexx.process.NetRexxC.\n                 main(new Rexx(compileArgs), new \nPrintWriter(out));\n-\n-            if (rc > 1) { // 1 is warnings from real NetRexxC\n-                log(out.toString(), \nProject.MSG_ERR);\n-                String msg = \"Compile failed, messages should have been provided.\";\n-                \nthrow new BuildException(msg);\n+            String sdir=srcDir.getAbsolutePath();\n+            String \nddir=destDir.getAbsolutePath();\n+            int dlen=ddir.length();\n+            String l;\n+            StringBuffer \nlb;\n+            BufferedReader in=new BufferedReader(new StringReader(out.toString()));\n+            \nlog(\"replacing destdir '\"+ddir+\"' through sourcedir '\"+sdir+\"'\", \nProject.MSG_VERBOSE);\n+            while ((l=in.readLine())!=null) {\n+            \tlb=new \nStringBuffer(l);\n+                int idx;\n+                while ((idx=l.indexOf(ddir))!=-1) { // path is mentioned in \nthe message\n+                    lb.replace(idx,idx+dlen,sdir);\n+                }\n+                l=lb.toString();\n+                if \n(l.indexOf(\"Error:\")!=-1) {\n+                    log(l, Project.MSG_ERR);\n+                } else if \n(l.indexOf(\"Warning:\")!=-1) {\n+                    log(l, Project.MSG_WARN);\n+                } else {\n+                    log(l, \nProject.MSG_INFO);\n             }\n-            else if (rc == 1) {\n-                log(out.toString(), Project.MSG_WARN);\n             }\n-            \nelse {\n-                log(out.toString(), Project.MSG_INFO);\n+            if (rc>1) {\n+                throw new \nBuildException(\"Compile failed, messages should have been provided.\");\n             }        \n+        } catch \n(IOException ioe) {\n+            ioe.printStackTrace(); // we would like to know WHY this happened. \nShould never!\n+            throw new BuildException(\"Unexpected IOException while playing with \nStrings: \"+ioe.toString());\n         } finally {\n             // need to reset java.class.path property\n             // \nsince the NetRexx compiler has no option for the classpath\n             currentProperties = \nSystem.getProperties();\n             currentProperties.put(\"java.class.path\", \ncurrentClassPath);\n         }\n+\n     }\n \n     /**", "id": 12625, "time": "2002-04-01T14:00:04Z", "bug_id": 7657, "creation_time": "2002-04-01T14:00:04Z", "is_private": false, "attachment_id": null}, {"text": "Created attachment 1456\nThe patch, again, as attachment", "tags": [], "bug_id": 7657, "attachment_id": 1456, "count": 1, "id": 12626, "time": "2002-04-01T14:00:45Z", "creator": "bechtel@ipcon.de", "creation_time": "2002-04-01T14:00:45Z", "is_private": false}, {"count": 2, "tags": [], "creator": "bechtel@ipcon.de", "attachment_id": 1457, "id": 12628, "time": "2002-04-01T14:51:23Z", "bug_id": 7657, "creation_time": "2002-04-01T14:51:23Z", "is_private": false, "text": "Created attachment 1457\ncorrected patch without endless loop (sigh)"}, {"count": 3, "tags": [], "creator": "bechtel@ipcon.de", "text": "(Finally) corrected the 1.4 dependancy.", "id": 12630, "time": "2002-04-01T14:52:29Z", "bug_id": 7657, "creation_time": "2002-04-01T14:52:29Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "dion@apache.org", "attachment_id": null, "id": 12633, "time": "2002-04-01T15:16:58Z", "bug_id": 7657, "creation_time": "2002-04-01T15:16:58Z", "is_private": false, "text": "Could you make this a 'cvs diff -u' patch.\n\nI keep getting 'Only garbage was found in the input patch' when trying to patch."}, {"attachment_id": 1459, "tags": [], "bug_id": 7657, "is_private": false, "count": 5, "id": 12634, "time": "2002-04-01T15:30:57Z", "creator": "bechtel@ipcon.de", "creation_time": "2002-04-01T15:30:57Z", "text": "Created attachment 1459\n\"cvs diff -u\" style patch as requested"}, {"attachment_id": null, "tags": [], "bug_id": 7657, "text": "This patch works for me.\n\nthe code could be a little cleaner (no toString in the while is possible), the \nvariable names could be more readable, but it works and it's done already :)\n\n", "count": 6, "id": 12635, "time": "2002-04-01T16:01:55Z", "creator": "dion@apache.org", "creation_time": "2002-04-01T16:01:55Z", "is_private": false}, {"count": 7, "tags": [], "text": "applied - thanks!", "is_private": false, "bug_id": 7657, "id": 12639, "time": "2002-04-01T17:34:27Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-04-01T17:34:27Z", "attachment_id": null}]
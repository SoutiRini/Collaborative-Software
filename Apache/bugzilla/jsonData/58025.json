[{"count": 0, "tags": [], "creator": "jose@w3.org", "attachment_id": 32809, "text": "Created attachment 32809\nmod_authz_dbd.c.diff patch adding dbd-query / AuthzDBDQuery options\n\nThis patch implements the enhancement proposed by Graham Leggett on the apache-dev list[1]. It is tested and fully working against 2.4.10.\n\n[[\nUsage examples:\n\n Require dbd-login %{REQUEST_URI} %{REQUEST_METHOD} %{REMOTE_USER}\n AuthzDBDQuery \"UPDATE authn SET uri = %s, method = %s WHERE user = %s\u201d\n\n Require dbd-logout %{TIME} %{REMOTE_USER}\n AuthzDBDQuery \"UPDATE authn SET logout_time = %s WHERE user = %s\u201d\n\n To be backwards compatible, \"Require dbd-login\u201d on it\u2019s own would imply \"Require dbd-login %{REMOTER_USER}\u201d.\n\nOne possible approach to support completely generic queries might be as follows:\n\n Require dbd-query %{REQUEST_URI} %{REMOTE_USER}\n AuthzDBDQuery \u201cSELECT count(user) FROM authn WHERE uri=%s AND user = %s\u201d\n]]\n\nAlthough I developed and tested this against the 2.4.10 source\ntree (the latest debian jessie version), I checked and this\nmodule as well as mod_dbd.c have not changed since then neither\nin the latest 2.4.x nor in trunk. I don't think there will be\nan issue running it there.  Installing that environment over the\ndefault debian one could be a hazzle for me that I'd prefer\nto avoid , but that I could do if needed.\n\nTo compile and install the patch (after merging):\n\n         apxs2  -i -a -c mod_authz_dbd.c\n\n[1] http://mail-archives.apache.org/mod_mbox/httpd-dev/201504.mbox/%3C304DB914-ED71-4476-B875-F1ABDD1E370C@sharp.fm%3E\n\nDETAILED report.\n\nWork done: \n\n- As discussed earlier in this thread, new require dbd-query directive\n  for supporting query parameters.  If the query returns at least one\n  row, we consider that access is granted.\n\n- It's now possible to use query parameters for dbd-login and\n  dbd-logout. If no parameter is given, the default value is\n  %{REMOTE-USER} to keep backwards compatibility.\n\n- While testing the changes for dbd-login, a server misconfiguration\n  revealed a SIGSEV. If the dbd handle preparation fails due to a\n  misconfiguration of the database server or the access rights to the\n  table, the server logs something along these lines:\n\n   AH00632: failed to prepare SQL statements: UPDATE command denied to\n   user 'foo'@'exampleorg' for table 'bar'\n\n  As a consequence, the call to dbd_handle(r) returns NULL. However,\n  in mod_authz_dbd, there was no control for the value of dbd before\n  its being used in both authz_dbd_login() and authzdbd_group():\n\n       ap_dbd_t *dbd = dbd_handle(r);\n       ...\n        query = apr_hash_get(dbd->prepared, <--- SIGSEV\n\n  I added a check to protect against this case.\n\nOpen issues not directly related to this patch, but which is good to keep in mind:\n\n- I wanted to control that the number of bind arguments correspond to\n  those in the prepared request. However this value is not visible in\n  apr_dbd_prepared_t *query.  Looking at the code in apr_dbd.c, I see\n  that even though the number of bind arguments are being passed to\n  apr_dbd_pselect() and apr_dbd_pquery() in nargs, this argument is\n  discarded before calling the implementation of those functions in\n  the driver.\n\n  At least in the mysql driver, there is no further check that there\n  is an equivalence between the bind and prepared statement\n  arguments. In both cases there is just a call to\n\n        mysql_stmt_bind_param(statement->stmt, bind);\n\n  which expects bind to have the correct number of arguments. I\n  checked the sqlite3 driver and it has the same issue.\n\n  If bind has more arguments, there is no issue. If there is less, we\n  risk a SIGSEV or unexpected behavior.\n\n  To avoid this issue, I wanted to control the number of arguments\n  when parsing the configuration file and show a configuration error\n  when necessary. However, as the prepared query goes into opaque\n  driver implementations, I don't have access to its nargs value. Are\n  there any ideas on how to get this info?  The only hack I could\n  think of is counting the number of % inside the prepared query and\n  making sure that we have the corresponding number of bind arguments.\n\n- Would it be worth it to connect this module to mod_socache.c?\n\nOther questions re implementation of the patch that may be modified:\n\n- In function dbd_parse_config, I was unable to decide whether it\n  would be ok to use cmd->temp_pool instead of cmd->pool in my call to\n  ap_getword_white()\n\n- I am using ap_expr_parse_cmd() on each argument of the require\n  dbd-query, dbd-login, and dbd-logout directives. I think this is\n  akin to building an expression tree for each argument. Is there a\n  more efficient way to do so?", "id": 183466, "time": "2015-06-11T15:14:24Z", "bug_id": 58025, "creation_time": "2015-06-11T15:14:24Z", "is_private": false}, {"count": 1, "tags": [], "creator": "jose@w3.org", "text": "The related SIGSEV issue I reported and sent a separate patch for has been resolved:https://bz.apache.org/bugzilla/show_bug.cgi?id=57868\n\nI integrated those fixes into my patch for the extension of mod_authz_dbd to use database query parameters. In order to facilitate its tracking and sharing with other people who are interested on it, as well as having a visual diff from the version shipped in apache, I created a repository on github for it:\n\n  https://github.com/jkbzh/apache2_mod_authz_dbd\n\nFeel free to contact me if you are interested in adding this enhancement to apache and require further work on it.\n\n-jose", "id": 186428, "time": "2015-11-18T11:50:28Z", "bug_id": 58025, "creation_time": "2015-11-18T11:50:28Z", "is_private": false, "attachment_id": null}]
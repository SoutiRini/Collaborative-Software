[{"count": 0, "tags": [], "creator": "mwilber@utilinc.com", "attachment_id": 32828, "text": "Created attachment 32828\nDemonstrates inability to rotate text -90 degrees using XSSF\n\nI need to rotate text within a cell by -90 degrees.  This feature works for a HSSF xls spreadsheet with POI.  But it does not work for a XSSF xlsx spreadsheet with POI.  The text remains at 0 degrees rotation.\n\nAttached is sample code that demonstrates the successful rotation using HSSF and the unsuccessful rotation using XSSF.\n\nPlease correct this.\n\nMarty\n\n\nimport java.io.FileOutputStream;\n\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\n\npublic class TestExcel\n{\n\n    private void createXls()\n    {\n        try\n        {\n\n            Workbook workbook = new HSSFWorkbook();\n            FileOutputStream fileOut = new FileOutputStream(\"c:/rotated.xls\");\n            Sheet sheet1 = workbook.createSheet();\n            Row row1 = sheet1.createRow((short) 0);\n\n            Cell cell1 = row1.createCell(0);\n\n            cell1.setCellValue(\"Successful rotated text.\");\n\n            CellStyle style = workbook.createCellStyle();\n            style.setRotation((short) -90);\n\n            cell1.setCellStyle(style);\n\n            workbook.write(fileOut);\n            fileOut.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n    }\n\n    private void createXlsx()\n    {\n        try\n        {\n\n            Workbook workbook = new XSSFWorkbook();\n            FileOutputStream fileOut = new FileOutputStream(\"c:/rotated.xlsx\");\n            Sheet sheet1 = workbook.createSheet();\n            Row row1 = sheet1.createRow((short) 0);\n\n            Cell cell1 = row1.createCell(0);\n\n            cell1.setCellValue(\"Unsuccessful rotated text.\");\n\n            CellStyle style = workbook.createCellStyle();\n            style.setRotation((short) -90);\n\n            cell1.setCellStyle(style);\n\n            workbook.write(fileOut);\n            fileOut.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void main(String[] args) throws Exception\n    {\n\n        TestExcel testExcel = new TestExcel();\n\n        testExcel.createXls();\n        testExcel.createXlsx();\n\n    }\n}", "id": 183566, "time": "2015-06-16T19:46:15Z", "bug_id": 58043, "creation_time": "2015-06-16T19:46:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58043, "text": "I'm not sure if this is a bug. The HSSFCellStyle.setRotation(...) method takes an number between 90 and -90 degrees, while the XSSFCellStyle.setRotation(...) method takes a number between 0 and 180 degrees. So -90 degrees for HSSF would be the same as 180 degrees for XSSF API.", "id": 184006, "time": "2015-07-12T18:33:46Z", "creator": "michiel.verkaik@gmail.com", "creation_time": "2015-07-12T18:33:46Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "dominik.stadler@gmx.at", "is_private": false, "text": "Hmm, that's bad, so we have \n* Only document the difference in the javadoc, however this is not very good as it would break in strange ways when people migrate code from HSSF to XSSF\n* Adjust XSSFCellStyle to expect the same value-range as HSSF, this will create backwards-incompatibilities and might break existing code...\n* Maybe it is possible to allow both value ranges, i.e. simply map -90 to 180 for XSSF and 180 to -90 for HSSF. This way we should be able to handle this equal for both types without causing incompatibilities", "id": 185361, "time": "2015-09-20T11:12:17Z", "bug_id": 58043, "creation_time": "2015-09-20T11:12:17Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 58043, "text": "In r1722716 we added some compatibility between HSSF and XSSF to map both ranges of values in both cases. We also updated javadoc somewhat to describe the different ranges that are used. The getters still return the \"native\" values to stay backwards compatible.", "id": 187337, "time": "2016-01-03T13:30:57Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-01-03T13:30:57Z", "tags": [], "is_private": false}]
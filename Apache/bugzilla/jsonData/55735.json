[{"count": 0, "attachment_id": null, "bug_id": 55735, "text": "Well, after fix for Bug 55198, if a tag file contains\n<a href=\"#\" onclick=\"window.alert(&quot;${text}&quot;)\">foobar</a>\nIt can now be correctly rendered as (if text='foobar')\n<a href=\"#\" onclick=\"window.alert(&quot;foobar&quot;)\">foobar</a>\n\nBut, It is rendered completely wrongly as ***** IF text='&amp;foobar' *****\n<a href=\"#\" onclick=\"window.alert(&quot;&amp;amp;foobar&quot;)\">foobar</a>\n\nThe EL expression ${text} should be rendered without any escape, but now it is\nescaped just as other literal part in the attribute.\n\nGenerally, a tagx file's compiler must not make any assumption that it's output is a well-formed XML or not, it should just keep the literal atrribute or text as is, and output any EL expression directly. It's the tagx file's author's reponsibility to determine whether a text variable should be escaped, e.g.:\n<a href=\"#\" onclick=\"window.alert(&quot;${fn:escape(text)}&quot;)\">foobar</a>\n\nSuppose we have:\nrequest.setAttribute(\"text\", \"2 &gt; 1\");\nAnd in a tagx file:\n<div title=\"&quot;${text}&quot;\">&quot;${text}&quot;</div>\n\nThe correct output could be:\n<div title=\"&quot;2 &gt; 1&quot;\">&quot;2 &gt; 1&quot;</div>\n\nBut neither\n<div title=\"&quot;2 &amp;gt; 1&quot;\">&quot;2 &gt; 1&quot;</div>\n\nnor\n<div title=\"\"2 > 1\"\">&quot;2 &gt; 1&quot;</div>", "id": 170984, "time": "2013-11-02T06:14:56Z", "creator": "azuo.lee@sohu.com", "creation_time": "2013-11-02T06:14:56Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "azuo.lee@sohu.com", "text": "Um... it seems JSP spec doesn't clarify the behavior at all...\n\nBut XSLT does. If we \"borrow\" rules from XSLT, then some correct examples could be (text=\"2 &gt; 1\"):\n\ntagx/jspx:  <div title=\"&quot;${text}&quot;\">ABCD</div>\noutput:     <div title=\"&quot;2 &amp;gt; 1&quot;\">ABCD</div>\n\ntagx/jspx:  <div>&quot;<c:out value=\"&amp;nbsp;${text}&quot;\" escapeXml=\"false\"></div>\noutput:     <div>&quot;&nbsp;2 &gt; 1\"</div>\n\nBut XSLT doesn't allow expressions in template text, thus, what can be the correct result generated by the following example?\n\ntagx/jspx:  <div>&quot;${text}&quot;</div>\n\nShould it be\noutput:     <div>&quot;2 &amp;gt; 1&quot;</div>\nor\noutput:     <div>\"2 &gt; 1\"</div>\nor\noutput:     <div>&quot;2 &gt; 1&quot;</div>\nor\noutput:     <div>\"2 &amp;gt; 1\"</div>\n\n????????", "id": 170986, "time": "2013-11-02T10:28:49Z", "bug_id": 55735, "creation_time": "2013-11-02T10:28:49Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "azuo.lee@sohu.com", "attachment_id": null, "text": "Conclusion:\n\n1. If you use jspx or tagx, then never use any EL expressions within attribute values, and always use JSTL <out> tag to output expression values within template content -- unless you know the expression value must not contain any\nXML reserved characters;\n\n2. Do not use jspx or tagx at all, use jsp and tag files instead -- whose behaviors are relatively determined.", "id": 170987, "time": "2013-11-02T11:05:11Z", "bug_id": 55735, "creation_time": "2013-11-02T11:05:11Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55735, "text": "Thanks for the report. This was a regression in the fix for bug55198.\n\nThis has been fixed in trunk for 8.0.0-RC6 onwards.\n\nThis has been fixed in 7.0.x for 7.0.48 onwards.", "id": 171072, "time": "2013-11-05T22:57:32Z", "creator": "markt@apache.org", "creation_time": "2013-11-05T22:57:32Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I've updated the back-port proposal for 55198 to include the fix for this regression so there is no need to keep this bug open.", "id": 171073, "time": "2013-11-05T23:01:16Z", "bug_id": 55735, "creation_time": "2013-11-05T23:01:16Z", "is_private": false}]
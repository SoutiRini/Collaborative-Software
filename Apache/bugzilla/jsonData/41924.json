[{"count": 0, "text": "When running untar with a POSIX created tar file, long filenames (more than 100\ncharacters) are not handled correctly. This results in the file in the tar file\nwill be untarred in the root folder instead of the correct subfolder.", "creator": "pliljenberg@gmail.com", "is_private": false, "id": 100758, "time": "2007-03-21T15:46:00Z", "bug_id": 41924, "creation_time": "2007-03-21T15:46:00Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41924, "text": "Created attachment 19769\nTesttar file\n\nTest tar file that will break the untar target", "id": 100759, "time": "2007-03-21T15:46:51Z", "creator": "pliljenberg@gmail.com", "creation_time": "2007-03-21T15:46:51Z", "is_private": false, "attachment_id": 19769}, {"count": 2, "tags": [], "creator": "pliljenberg@gmail.com", "attachment_id": null, "is_private": false, "id": 100760, "time": "2007-03-21T15:47:47Z", "bug_id": 41924, "creation_time": "2007-03-21T15:47:47Z", "text": "The problem is recreated by using the supplied tar file (test.tar) with the\nuntar target."}, {"count": 3, "tags": [], "bug_id": 41924, "text": "Created attachment 19770\nProposed patch for this issue\n\nProposed patch for this issue", "id": 100761, "time": "2007-03-21T15:49:46Z", "creator": "pliljenberg@gmail.com", "creation_time": "2007-03-21T15:49:46Z", "is_private": false, "attachment_id": 19770}, {"count": 4, "attachment_id": null, "bug_id": 41924, "is_private": false, "id": 100762, "time": "2007-03-21T15:50:34Z", "creator": "pliljenberg@gmail.com", "creation_time": "2007-03-21T15:50:34Z", "tags": [], "text": "I've provided a proposal for a patch to resolve the issue. Can someone verify\nthat I haven't created some other bugs with this patch."}, {"count": 5, "text": "Currently untar only supports gnu tar long file names. In order to also support\nthe posix 2001 format for long file names a further check should be done on the\nheader to verify it this is a file in such format.", "creator": "jkf@apache.org", "is_private": false, "id": 101730, "time": "2007-04-15T11:00:11Z", "bug_id": 41924, "creation_time": "2007-04-15T11:00:11Z", "tags": [], "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "vsizikov@gmail.com", "is_private": false, "id": 116771, "time": "2008-05-18T08:38:15Z", "bug_id": 41924, "creation_time": "2008-05-18T08:38:15Z", "tags": [], "text": "This is a pretty serious issue for us, since now Git uses POSIX tar format for the tarballs, and this makes it impossible to extract the content of such tarballs properly via Ant means."}, {"count": 7, "tags": [], "text": "You could try and use the supplied patch, it did work for me. It's not 100% tested or verified, but solved the troubles with long filenames for me. Not using it anymore though since we migrated to Maven.\n", "is_private": false, "bug_id": 41924, "id": 116777, "time": "2008-05-18T10:57:17Z", "creator": "pliljenberg@gmail.com", "creation_time": "2008-05-18T10:57:17Z", "attachment_id": null}, {"count": 8, "attachment_id": null, "creator": "bob@verysecurelinux.com", "is_private": false, "id": 118411, "time": "2008-07-09T08:48:34Z", "bug_id": 41924, "creation_time": "2008-07-09T08:48:34Z", "tags": [], "text": "Documenting a bug is not fixing it.  I did not see the note that subtly pointed out that extracting ant with standard tar WILL FAIL.  This caused me unnecessary wasted time.  I have NEVER seen a GNU or other Free Software project tolerate such sloppyness, only Microsoft.\n\nRecommended fix #1:\n  Shorten pathnames to 100 characters.\n\nRecommended fix #2:\n  Use nested tar files with the \"inside\" tar archives having files relative\n  to higher directories.  In other words, for the file long1/long2/long3.java,\n  have the main \"top level\" tar file have the file long1/long2/short.tar with\n  short.tar having files relative to long1/long2, such as just long3.java.\n  Then, as part of the build procedure do \"cd long1/long2;tar -xf short.tar\".\n\nRecommended fix #3 (and least desirable):\n  Have the ./configure test for the existence of one of the long file names.\n  If it does not exist (and maybe even test for the existence of the name\n  truncated to 100 characters).  If the long file name does not exist then\n  the configure should fail with an explanation.  This should be trivial to\n  add."}, {"count": 9, "tags": [], "creator": "mbenson@apache.org", "text": "(In reply to comment #8)\n> Documenting a bug is not fixing it.  I did not see the note that subtly pointed\n> out that extracting ant with standard tar WILL FAIL.  This caused me\n> unnecessary wasted time.  I have NEVER seen a GNU or other Free Software\n> project tolerate such sloppyness, only Microsoft.\n\nYour problem is with extracting Ant itself?  That actually isn't related to this issue.\n\nFor what it's worth, though, poor spelling might itself be taken as a sign of \"sloppiness,\" as might failure to read directions.  Further, your invocation of the holy name of GNU leads me to point out that the issue in question being with GNU tar formats, it's obvious \"plain\" tar didn't satisfy that organization either.\n\n> \n> Recommended fix #1:\n>   Shorten pathnames to 100 characters.\n\nThat's like saying \"Some cars are small.  I'll cut off my head so I can fit into one of these.\"  You wouldn't do that; you'd just use a car into which you can fit.\n\n> \n> Recommended fix #2:\n>   Use nested tar files with the \"inside\" tar archives having files relative\n>   to higher directories.  In other words, for the file long1/long2/long3.java,\n>   have the main \"top level\" tar file have the file long1/long2/short.tar with\n>   short.tar having files relative to long1/long2, such as just long3.java.\n>   Then, as part of the build procedure do \"cd long1/long2;tar -xf short.tar\".\n\nThere really isn't a build procedure, per se.  Extract and go.\n\n> \n> Recommended fix #3 (and least desirable):\n>   Have the ./configure test for the existence of one of the long file names.\n>   If it does not exist (and maybe even test for the existence of the name\n>   truncated to 100 characters).  If the long file name does not exist then\n>   the configure should fail with an explanation.  This should be trivial to\n>   add.\n> \n\nOnce again, there is no configure script shipped with Ant, nor is there a makefile.  You DO know what project this is, right?", "id": 118417, "time": "2008-07-09T10:32:58Z", "bug_id": 41924, "creation_time": "2008-07-09T10:32:58Z", "is_private": false, "attachment_id": null}, {"count": 10, "attachment_id": null, "creator": "richard.gussmann@web.de", "is_private": false, "id": 129599, "time": "2009-08-10T11:18:15Z", "bug_id": 41924, "creation_time": "2009-08-10T11:18:15Z", "tags": [], "text": "When you work on solaris 10 a posix compliant tar file would be created for entries longer (or equal) 100 chars (solaris special). When you process such a file with ant, the file will be extracted into the root which is definitely wrong and the prefix part will be ignored. So I strongly recommend a fix to deal with this issue.\n\nTo make sure this is done only with posix compliant tar archives you need to check whether the ustar followed by a zero byte marker is present. Then also the check supplied with the patch should be sufficient. \n\nA modified the TarEntry.java as follows\n\nat the end of the function I added ... \n\n    public void parseTarHeader(byte[] header) {\n\n        ... original code here \n\n        boolean ustarFormat = false;  \n\t//\n\t// NOTE Recognize archive header format.\n\t//\n\tif (  header[257] == 'u'\n\t\t\t&& header[258] == 's'\n\t\t\t&& header[259] == 't'\n\t\t\t&& header[260] == 'a'\n\t\t\t&& header[261] == 'r'\n\t\t\t&& header[262] == 0 ) {\n\t\tustarFormat = true;\n\t} /* if */\n        \n        if (ustarFormat && header[offset] != 0) {\n            offset += DEVLEN;\n            StringBuffer buf = new StringBuffer(156);\n            buf = TarUtils.parseName(header, offset, 155);\n            buf.append('/');\n            buf.append(name);\n            name = buf;           \n        } /* if */"}, {"count": 11, "attachment_id": null, "bug_id": 41924, "is_private": false, "id": 148729, "time": "2011-08-20T12:22:46Z", "creator": "sebb@apache.org", "creation_time": "2011-08-20T12:22:46Z", "tags": [], "text": "This was fixed in Commons Compress some while ago - see https://issues.apache.org/jira/browse/COMPRESS-110\n\n[Note that WinZip 9.0 also has the same issue; 7-Zip does not]"}, {"count": 12, "tags": [], "bug_id": 41924, "is_private": false, "text": "Created attachment 27419\nPatch to fix Posix prefix handling", "id": 148733, "time": "2011-08-20T19:17:36Z", "creator": "sebb@apache.org", "creation_time": "2011-08-20T19:17:36Z", "attachment_id": 27419}, {"count": 13, "tags": [], "bug_id": 41924, "text": "Are you sure POSIX longfile support in Commons Compress is complete?\n\nIf it is, then using the Compress Antlib with Commons Compress 1.2 will work.", "id": 148734, "time": "2011-08-21T04:22:12Z", "creator": "bodewig@apache.org", "creation_time": "2011-08-21T04:22:12Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "aditsu@yahoo.com", "text": "Is that why ant fails to extract this file correctly? http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/snapshot/jetty-8.1.4.v20120524.tar.bz2", "count": 14, "id": 160041, "time": "2012-06-16T15:43:30Z", "bug_id": 41924, "creation_time": "2012-06-16T15:43:30Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "bodewig@apache.org", "text": "(In reply to comment #14)\n> Is that why ant fails to extract this file correctly?\n> http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/snapshot/jetty-\n> 8.1.4.v20120524.tar.bz2\n\nyes", "count": 15, "id": 160049, "time": "2012-06-17T05:03:52Z", "bug_id": 41924, "creation_time": "2012-06-17T05:03:52Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 41924, "text": "fixed with svn revision 1350857 by merging Commons Compress' (1.4.1) code into Ant", "id": 160050, "time": "2012-06-17T05:05:23Z", "creator": "bodewig@apache.org", "creation_time": "2012-06-17T05:05:23Z", "is_private": false, "attachment_id": null}, {"count": 17, "tags": [], "creator": "sagi.benakiva@redbend.com", "attachment_id": null, "is_private": false, "id": 160786, "time": "2012-07-22T11:09:05Z", "bug_id": 41924, "creation_time": "2012-07-22T11:09:05Z", "text": "Hi,\n\nI'm suffering from a similar problem, but in my case the file with the long name is not a regular file but a soft link.\nIn my case the link name is very long and not the link full path (as in the Testtar file).\n\nI looked at tar source code and I think that the solution for this issue is not complete.\nBeside the definition for GNUTYPE_LONGNAME, \nthere's a definition for GNUTYPE_LONGLINK, i.e. (from tar.h) :\n  /* Identifies the *next* file on the tape as having a long linkname.  */\n  #define GNUTYPE_LONGLINK 'K'\n\nin my testcase the function TarEntry::isGNULongNameEntry returns FALSE\nbecause linkFlag != LF_GNUTYPE_LONGNAME (linkFlag == (byte)'K')\n\nI even noticed that there's no definition for LF_GNUTYPE_LONGLINK in TarConstants.java\n\nThank you,\n  Sagi."}]
[{"count": 0, "tags": [], "bug_id": 40029, "attachment_id": null, "id": 91206, "time": "2006-07-12T13:25:58Z", "creator": "hans@red.roses.de", "creation_time": "2006-07-12T13:25:58Z", "is_private": false, "text": "This is more of an enhancement request, and it might concern the core as well: \nWhen Apache is used to proxy HTTP/1.1 requests and it encounters unknown\nmethods, it should relay the content of both the request and the response body\nparts as they arrive - i.e. without any blocking, buffering or delaying.\n\nBackground:\n\nI'm trying to grant road warrior users access to our company Exchange server\nthrough RPC over HTTP.  In my setup, an Apache 2.2.2 on a FreeBSD server in the\nDMZ should act as a proxy between the Internet and the IIS on on the Exchange\nserver.  The communication is SSL-encrypted in both directions (SSLEngine and\nSSLProxyEngine On).\n\nUnfortunately, the Outlook client just hangs when trying to access Exchange\nthrough the proxy.  The Apache error log shows these messages:\n\n[Mon Jul 10 10:48:48 2006] [error] (70007)The timeout specified has expired:\nproxy: prefetch request body failed to <exchangeip>:<port> (<exchange>) from\n<clientip> ()\n\nAfter working on this for quite some time, I believe I can rule out the usual\nconfiguration and certificate problems that are described on various websites. \nAlso, I have a Linux in my internal network with an older version of Apache\n(2.0.53) where the same proxy configuration works (not too stable and\nperformant, but it does work).\n\nI did some analysis with ssldump on both proxies.  Apparently, RPC over HTTP\nopens two HTTP/1.1 requests:  One with request method RPC_IN_DATA to send data\nto the server, and one with method RPC_OUT_DATA to send data back to the client.\n The body consists of raw binary data, and the connections are apparently\nre-used for several RPCs.\n\nI.e. after sending the headers for both connections, the client sends a request\non the IN connections, reads the response from the OUT connection, sends another\nrequest on the IN connection and so on - which means that any buffering in the\nproxy is absolutely deadly in this scenario.\n\nHere's an example of an IN connection header:\n    RPC_IN_DATA /rpc/rpcproxy.dll?<exchange>:6002 HTTP/1.1\n    Accept: application/rpc\n    User-Agent: MSRPC\n    Host: <proxy>\n    Content-Length: 1073741824\n    Connection: Keep-Alive\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Authorization: Basic <user/passwd>\n\nAnd here's an example of an OUT connection header:\n    RPC_OUT_DATA /rpc/rpcproxy.dll?<exchange>:6002 HTTP/1.1\n    Accept: application/rpc\n    User-Agent: MSRPC\n    Host: <proxy>\n    Content-Length: 76\n    Connection: Keep-Alive\n    Cache-Control: no-cache\n    Pragma: no-cache\n    Authorization: Basic <user/passwd>\n\nssldump on the Apache 2.2.2 machine shows that the RPC_OUT_DATA is correctly\nforwarded to the Exchange server.  For the RPC_IN_DATA, OTOH, the proxy doesn't\neven open a connection to the Exchange server.  I can only guess that's it's\ntrying to read (prefetch?) a part or all of the 1073741824 bytes\n(Content-Length) before opening the session to the Exchange server.\n\nUnfortunately, the client only sends a small request (~ 100 bytes) on the IN\nconnection and starts waiting for a response on the OUT connection. It never\ngets one, though, since the request hasn't reached the Exchange server yet.\n\nOn the Apache 2.0.53 server, however, both requests are forwarded to the\nExchange server, and the body bits are also relayed in a direct and timely\nmanner.  I've tried an Apache 2.0.58 on the FreeBSD server, but that one doesn't\nwork, either."}, {"count": 1, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #0)\n\n> ssldump on the Apache 2.2.2 machine shows that the RPC_OUT_DATA is correctly\n> forwarded to the Exchange server.  For the RPC_IN_DATA, OTOH, the proxy doesn't\n> even open a connection to the Exchange server.  I can only guess that's it's\n> trying to read (prefetch?) a part or all of the 1073741824 bytes\n> (Content-Length) before opening the session to the Exchange server.\n\nCorrect, we prefetch the whole body to avoid HTTP smuggling attacks with invalid\nContent-Length headers. This is a security fix in 2.2.x and >= 2.0.55. (see\nhttp://httpd.apache.org/security/vulnerabilities_20.html and\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2088). Correct me if I am\nwrong but I do not think that RPC_IN_DATA and RPC_OUT_DATA are specfied in any RFC.\n\n> \n> Unfortunately, the client only sends a small request (~ 100 bytes) on the IN\n> connection and starts waiting for a response on the OUT connection. It never\n> gets one, though, since the request hasn't reached the Exchange server yet.\n\nThis is an incorrect use of the http protocol. Bad luck for Microsoft.\n\nSo I do not see any chance that we can do anything here. => Invalid\n", "id": 91213, "time": "2006-07-12T15:32:31Z", "bug_id": 40029, "creation_time": "2006-07-12T15:32:31Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 40029, "attachment_id": null, "is_private": false, "id": 91217, "time": "2006-07-12T16:11:23Z", "creator": "hans@red.roses.de", "creation_time": "2006-07-12T16:11:23Z", "text": "So, there's no chance for \"be generous in what you accept\"? (Apache is already\n\"strict in what it delivers\")"}, {"count": 3, "tags": [], "bug_id": 40029, "text": "Sorry, not in this case as this opens up a security hole if we are not strict here.", "id": 91232, "time": "2006-07-12T20:57:50Z", "creator": "rpluem@apache.org", "creation_time": "2006-07-12T20:57:50Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "The fix for CVE-2005-2088 was simply to discard the C-L header if a T-E header\nwas also present, that was a change to request.c and the changes to the proxy\nare entirely unrelated.\n\nI don't see why this shouldn't work; the requests are syntactically valid, the\nproxy doesn't are about method semantics.  Why is it timing out?  Because it\nattempts to \"prefetch\" 8K and the 100 bytes sent are not enough? That is pretty\nicky.", "attachment_id": null, "bug_id": 40029, "id": 91261, "time": "2006-07-13T10:14:36Z", "creator": "jorton@redhat.com", "creation_time": "2006-07-13T10:14:36Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 40029, "attachment_id": null, "text": "(In reply to comment #4)\n> Why is it timing out?  Because it\n> attempts to \"prefetch\" 8K and the 100 bytes sent are not enough?\n\nYes, I think so.  Outlook sends 100 bytes, and then waits for a response on\nthe second connection before sending additional data.  OTOH, Apache waits for\nadditional data before relaying the 100 bytes to the Exchange server in the\nfirst place.  Classic deadlock.", "id": 91280, "time": "2006-07-13T16:53:47Z", "creator": "hans@red.roses.de", "creation_time": "2006-07-13T16:53:47Z", "is_private": false}, {"text": "Hello,\n\nwith Apache 2.2.11 it is still not functioning. Microsoft released a protocol specification here: http://msdn.microsoft.com/en-us/library/cc243950.aspx\n\nDoes that change anything? Is there a chance that apache will support rpc over http in the future? I think there is a major interest to use apache as a proxy for possibly insecure IIS applications like this. thank you!\n\nRegards\nChristoph Kling", "tags": [], "creator": "ml@familiekling.de", "is_private": false, "count": 6, "id": 127707, "time": "2009-06-06T15:09:52Z", "bug_id": 40029, "creation_time": "2009-06-06T15:09:52Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "(In reply to comment #6)\n> Hello,\n> \n> with Apache 2.2.11 it is still not functioning. Microsoft released a protocol\n> specification here: http://msdn.microsoft.com/en-us/library/cc243950.aspx\n\nQuoting from that:\n\n\"Patents. Microsoft has patents that may cover your implementations of the technologies described in the Open Specifications. Neither this notice nor Microsoft's delivery of the documentation grants any licenses under those or any other Microsoft patents.\"\n\nMS is not a standards body, and their having published something doesn't mean it's been peer-reviewed, or even implemented!  I don't see any guarantee that if Apache implements exactly what's written, it really will interoperate with MS technology.  Maybe there's a test suite, but who would look that far after reading the patent threat?", "attachment_id": null, "bug_id": 40029, "id": 127709, "time": "2009-06-07T00:40:26Z", "creator": "nick@webthing.com", "creation_time": "2009-06-07T00:40:26Z", "is_private": false}, {"count": 8, "tags": [], "creator": "emmanuel.fuste@laposte.net", "attachment_id": null, "text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > Hello,\n> > \n> > with Apache 2.2.11 it is still not functioning. Microsoft released a protocol\n> > specification here: http://msdn.microsoft.com/en-us/library/cc243950.aspx\n> \n> Quoting from that:\n> \n> \"Patents. Microsoft has patents that may cover your implementations of the\n> technologies described in the Open Specifications. Neither this notice nor\n> Microsoft's delivery of the documentation grants any licenses under those or\n> any other Microsoft patents.\"\n> \n\nSorry I could not buy this kind of argument.\nIt is not about implementing RPC over http, but about letting RCP over http pass through.\nThis is a silly Apache httpd limitation for no good.", "id": 138382, "time": "2010-07-13T08:59:25Z", "bug_id": 40029, "creation_time": "2010-07-13T08:59:25Z", "is_private": false}, {"text": "(In reply to comment #7)\n> (In reply to comment #6)\n> > Hello,\n> > \n> > with Apache 2.2.11 it is still not functioning. Microsoft released a protocol\n> > specification here: http://msdn.microsoft.com/en-us/library/cc243950.aspx\n> \n> Quoting from that:\n> \n> \"Patents. Microsoft has patents that may cover your implementations of the\n> technologies described in the Open Specifications. Neither this notice nor\n> Microsoft's delivery of the documentation grants any licenses under those or\n> any other Microsoft patents.\"\n> \n\nSorry I could not buy this kind of argument.\nIt is not about implementing RPC over http, but about letting RPC over http pass through.\nThis is a silly Apache httpd limitation for no good.", "tags": [], "creator": "emmanuel.fuste@laposte.net", "is_private": false, "count": 9, "id": 138383, "time": "2010-07-13T09:00:12Z", "bug_id": 40029, "creation_time": "2010-07-13T09:00:12Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 40029, "text": "Hans, this is an HTTP protocol question, unrecognized methods are allowed\nbut they must follow HTTP/1.1 itself, and if MS's protocol isn't HTTP/1.1\ncompliant, we won't be accommodating.\n\nHTTP/1.1 is not bi-sync, it is message/resource oriented.\n\nYou have stated that 100 bytes of the request message are sent, and that we\nare blocking for 8kb; what is the Content-Length header of this case?\n\nThere is a not-altogether unreasonable solve to this but it's not trivial; use \nproxy_connect for specific methods which turn out to be HTTP/1.1 non-compliant,\nwhich would turn the tunnel into a connection stream.  Patches welcome.", "id": 138471, "time": "2010-07-16T11:37:59Z", "creator": "wrowe@apache.org", "creation_time": "2010-07-16T11:37:59Z", "is_private": false, "attachment_id": null}, {"text": "William,\n\nsince you're addressing me personally:  We've move to a VPN-based solution long ago, so I don't need this functionality anymore.\n\nHowever, there several comments votes by other people, and I also occasionally get mails from people asking me how I worked around this problem.  So, there still seems to be some demand for this feature out there.\n\nBest regards,\n  Hans", "tags": [], "bug_id": 40029, "is_private": false, "count": 11, "id": 138479, "time": "2010-07-16T13:35:26Z", "creator": "hans@red.roses.de", "creation_time": "2010-07-16T13:35:26Z", "attachment_id": null}, {"count": 12, "tags": [], "text": "If you can remember that the 100-byte request carried 100 byte content-length, or was definitely larger, that would help.\n\nAnyone; if you have the opportunity to sniff the httpd -> backend connection and\npost what leads to this hang on the near side of the conversation, that would be \ngreat.", "attachment_id": null, "id": 138480, "creator": "wrowe@apache.org", "time": "2010-07-16T14:14:50Z", "bug_id": 40029, "creation_time": "2010-07-16T14:14:50Z", "is_private": false}, {"count": 13, "tags": [], "text": "William,\n\nactually, there were(*) two parallel HTTP requests, one for traffic from Outlook to Exchange and one for traffic from Exchange to Outlook.  The \"upstream\" request had a Content-Length header of about 2 GB.  The initial ticket description (and my other comments from 2006) contain the headers of both requests as well as an analysis why Apache's buffering causes a deadlock on Microsoft's - well - creative RPC over HTTP implementation.\n\n(*) That was Outlook 2003 with Exchange 2003.  I never checked for Outlook 2007/2010 and Exchange 2008.\n\nBest regards,\n  Hans", "attachment_id": null, "bug_id": 40029, "id": 138481, "time": "2010-07-16T14:23:03Z", "creator": "hans@red.roses.de", "creation_time": "2010-07-16T14:23:03Z", "is_private": false}, {"count": 14, "tags": [], "text": "(In reply to comment #13)\n> The \"upstream\" request had a Content-Length header of about 2 GB.\n\nOh, actually 1 GB, not 2 GB.", "attachment_id": null, "bug_id": 40029, "id": 138482, "time": "2010-07-16T14:24:48Z", "creator": "hans@red.roses.de", "creation_time": "2010-07-16T14:24:48Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 40029, "attachment_id": null, "is_private": false, "id": 138483, "time": "2010-07-16T14:36:16Z", "creator": "wrowe@apache.org", "creation_time": "2010-07-16T14:36:16Z", "text": "Ok, so that's a 1GB  'open ended' pipe, and it expected synchronicity which \nit's absolutely not allowed to do.\n\nThanks for clarifying, that's what I thought you were getting at.\n\nWill ponder interesting solutions, but in the interim it is HTTP/1.1 abuse."}, {"count": 16, "tags": [], "bug_id": 40029, "text": "Still/now 'new'", "id": 138484, "time": "2010-07-16T14:36:53Z", "creator": "wrowe@apache.org", "creation_time": "2010-07-16T14:36:53Z", "is_private": false, "attachment_id": null}, {"text": "I don't think it's HTTP 1.1 abuse. I can't find anything in RFC2068 that speaks to this point one way or the other. I don't think it's required for mod_proxy to implement this, but it certainly would not be RFC-violating to do so.\n\nSuppose a back-end server sends a response with content-length: 1000 but only sends 100 bytes. In that case mod_proxy transmits the 100 bytes to the requestor and waits for further data.\n\nBut if the incoming request has content-length: 1000 but only sends 100 bytes, mod_proxy just sits there. Why not open the request to the back-end right away? It would improve performance even on regular GET requests, because you're making use of time that would otherwise be wasted on network latency to get the back-end connection open, which means you'll be able to generate a response that much faster. If you have all the HTTP headers and part of the request data, what's the benefit in *not* starting the connection to the back-end, since you know you're going to need it?", "tags": [], "bug_id": 40029, "is_private": false, "count": 17, "id": 138485, "time": "2010-07-16T15:46:57Z", "creator": "graham@mhn.org", "creation_time": "2010-07-16T15:46:57Z", "attachment_id": null}, {"text": "Also, regarding vulnerability CVE-2005-2088, surely this can be solved by improving the header parsing rather than by destroying useful functionality that people were using.", "tags": [], "bug_id": 40029, "is_private": false, "count": 18, "id": 138486, "time": "2010-07-16T15:56:29Z", "creator": "graham@mhn.org", "creation_time": "2010-07-16T15:56:29Z", "attachment_id": null}, {"count": 19, "tags": [], "creator": "rvandolson@esri.com", "attachment_id": null, "text": "I understand the ethical reasons for wanting to implement this, but it would be nice to have perhaps some override options we could specify in a per <Directory> context.\n\nI was initially thinking of pre-mangling the Content-Length header, but I doubt this would consistently provide the desired result.\n\nApache does have other \"workarounds\" for goofy non-compliant stuff...", "id": 138695, "time": "2010-07-27T14:50:05Z", "bug_id": 40029, "creation_time": "2010-07-27T14:50:05Z", "is_private": false}, {"count": 20, "tags": [], "text": "(In reply to comment #19)\n> I understand the ethical reasons for wanting to implement this, but it would be\n\nThis should be \"for *not* wanting\". :)", "attachment_id": null, "id": 138696, "creator": "rvandolson@esri.com", "time": "2010-07-27T14:50:51Z", "bug_id": 40029, "creation_time": "2010-07-27T14:50:51Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 40029, "is_private": false, "id": 138697, "attachment_id": null, "creator": "wrowe@apache.org", "creation_time": "2010-07-27T15:05:09Z", "time": "2010-07-27T15:05:09Z", "text": ">> Why not open the request to the back-end right away?\n>> It would improve performance even on regular GET requests\n\nIn fact, it does nothing of the kind, it increases the contention for \nthe backend servers.  The current behavior is correct for taking the stress\nof the much more computationally intensive backend applications.\n\nHTTP/1.1 Content-Length description is prescriptive of the server's behavior,\nand this incorrectly implemented protocol could have *trivially* used the\nsemantically sensible chunked encoding methodology.\n\nThe one and only hack around HTTP/1.1 non-compliance is to open a connection \noriented stream and distrust the entire communications stream."}, {"count": 22, "tags": [], "bug_id": 40029, "attachment_id": null, "is_private": false, "id": 140132, "time": "2010-09-24T02:20:07Z", "creator": "wrowe@apache.org", "creation_time": "2010-09-24T02:20:07Z", "text": "The question was raised; \"Microsoft released a spec\"\n\nIn this case, only the IETF defines HTTP.\n\nIf it complies with HTTP, then anyone is free to build upon it.  See the DAV spec for one example.\n\nIf it fails to comply with HTTP, it isn't HTTP, and the ASF HTTP Server project is unlikely to pay attention; *particularly* if it masquerades as HTTP and is not."}, {"count": 23, "tags": [], "text": "Final note of the day; I've broached the question on the ietf-http-wg list for pointers to any MS bug or KB references to this misimplementation, and pointers to where users can raise the issue.  I have yet to hear back, but when I do I'll update this report.\n\nIn the interim, after lengthy consideration, this is not an httpd proxy flaw.", "attachment_id": null, "id": 140133, "creator": "wrowe@apache.org", "time": "2010-09-24T02:22:51Z", "bug_id": 40029, "creation_time": "2010-09-24T02:22:51Z", "is_private": false}, {"count": 24, "tags": [], "text": "During my work at Astaro, I wrote an Apache module mod_proxy_msrpc that intends\nto work around the mentioned limitations of Apache httpd by switching to a\ntransparent tunnel mode (similar to mod_proxy_connect) as soon as the RPC\nconnection has been successfully negotiated between client and server. It is\navailable on GitHub here: https://github.com/bombadil/mod_proxy_msrpc", "attachment_id": null, "bug_id": 40029, "id": 166855, "time": "2013-04-25T13:32:59Z", "creator": "micha@lenk.info", "creation_time": "2013-04-25T13:32:59Z", "is_private": false}]
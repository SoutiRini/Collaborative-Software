[{"count": 0, "attachment_id": null, "bug_id": 49914, "is_private": false, "id": 139823, "time": "2010-09-10T14:30:59Z", "creator": "balusc@gmail.com", "creation_time": "2010-09-10T14:30:59Z", "tags": [], "text": "A filter on an url-pattern of \"/\" is not invoked when requesting the context root URL like http://localhost:8080/contextname/. This is regardless where the url-pattern is definied. In web.xml as <url-pattern>/</url-pattern> or in filter class as @WebFilter(urlPatterns={\"/\"})\n\nThis works fine on Tomcat 6.x and Glassfish v3.0.1."}, {"count": 1, "attachment_id": null, "bug_id": 49914, "text": "  /* same as TC 6 up until checkUnusualURLPattern  */\n    /**\n     * Validate the syntax of a proposed <code>&lt;url-pattern&gt;</code>\n     * for conformance with specification requirements.\n     *\n     * @param urlPattern URL pattern to be validated\n     */\n    private boolean validateURLPattern(String urlPattern) {\n        if (urlPattern == null)\n            return (false);\n        if (urlPattern.indexOf('\\n') >= 0 || urlPattern.indexOf('\\r') >= 0) {\n            return (false);\n        }\n        if (urlPattern.startsWith(\"*.\")) {\n            if (urlPattern.indexOf('/') < 0) {\n                checkUnusualURLPattern(urlPattern);\n                return (true);\n            } else\n                return (false);\n        }\n        if ( (urlPattern.startsWith(\"/\")) &&\n                (urlPattern.indexOf(\"*.\") < 0)) {\n            checkUnusualURLPattern(urlPattern);\n            return (true);\n        } else\n            return (false);\n    }\n\n    /**\n     * Check for unusual but valid <code>&lt;url-pattern&gt;</code>s.\n     * See Bugzilla 34805, 43079 & 43080\n     */\n    private void checkUnusualURLPattern(String urlPattern) {\n        if (log.isInfoEnabled()) {\n            if(urlPattern.endsWith(\"*\") && (urlPattern.length() < 2 ||\n                    urlPattern.charAt(urlPattern.length()-2) != '/')) {\n                log.info(\"Suspicious url pattern: \\\"\" + urlPattern + \"\\\"\" +\n                        \" in context [\" + getName() + \"] - see\" +\n                        \" section SRV.11.2 of the Servlet specification\" );\n            }\n        }\n    }\n\n/*TESTCASE: if the url-pattern is / then urlPattern.length() =1 and the\n  urlPattern.charAt(urlPattern.length()-2) is urlPattern.charAt(-1)\n  would throw NPE\n  fix would be to have checkUnusualURLPattern throw NPE as here */\n    private boolean validateURLPattern(String urlPattern) {\n        if (urlPattern == null)\n            return (false);\n        if (urlPattern.indexOf('\\n') >= 0 || urlPattern.indexOf('\\r') >= 0) {\n            return (false);\n        }\n        if (urlPattern.startsWith(\"*.\")) {\n            if (urlPattern.indexOf('/') < 0) {\n                checkUnusualURLPattern(urlPattern);\n                return (true);\n            } else\n                return (false);\n        }\n        if ( (urlPattern.startsWith(\"/\")) &&\n                (urlPattern.indexOf(\"*.\") < 0)) \n        {\n          try\n          {\n            checkUnusualURLPattern(urlPattern);\n          }\n          catch(NullPointerException npe)\n          {\n           System.err.println(\"checkUnusualURLPattern has thrown NPE for urlPattern=\"+urlPattern+\" message=\"+npe.getMessage());\n          }\n          return (true);\n        } else\n            return (false);\n    }\n/*change checkUnusualURLPattern method to throw NPE */\n    private void checkUnusualURLPattern(String urlPattern) throws NullPointerException {\n        if (log.isInfoEnabled()) \n        {\n         try\n         {\n            if(urlPattern.endsWith(\"*\") && (urlPattern.length() < 2 ||\n                    urlPattern.charAt(urlPattern.length()-2) != '/')) \n            {\n                log.info(\"Suspicious url pattern: \\\"\" + urlPattern + \"\\\"\" +\n                        \" in context [\" + getName() + \"] - see\" +\n                        \" section SRV.11.2 of the Servlet specification\" );\n            }\n        }\n        catch(NullPointerException npe)\n        { //re throw NPE\n          throw NullPointerException(npe.getMessage());\n        }\n    }", "id": 139838, "time": "2010-09-12T09:03:17Z", "creator": "mgainty@hotmail.com", "creation_time": "2010-09-12T09:03:17Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 49914, "is_private": false, "id": 139860, "time": "2010-09-14T07:09:40Z", "creator": "wesley.acheson@gmail.com", "creation_time": "2010-09-14T07:09:40Z", "tags": [], "text": "Okay what I'm seeing with a simple application with an index.jsp and a filter.\n\nIn o.a.c.c.ApplicationFilterFactory#createFilterChain, requestPath is being set to request.getAttribute(DISPATCHER_REQUEST_PATH_ATTR); It is this attribute that is matched against the filter; Which is \"/index.jsp\" (in my case) rather than the URI requested by the browser. \n\nNow I'm not sure if this is correct behaviour or not. I'd need to confirm with the specs but it sounds wrong.\n\nMy test application run against tc6.0.18 didn't match the root node either however. I haven't run that in debug to see if its the same reason."}, {"count": 3, "attachment_id": null, "bug_id": 49914, "text": "Managed to speak to the spec lead and a couple of EG members about this. The intention (although only implied rather than explicitly stated) of the Servlet spec is that the welcome file mapping (if required) is applied before matching with any filter URL patterns.\n\nHopefully the next maintenance release will have some clarifications in this area.\n\nI am therefore closing this as won't fix. If the spec had been clearer, I probably would have closed it as invalid.", "id": 140018, "time": "2010-09-21T09:40:33Z", "creator": "markt@apache.org", "creation_time": "2010-09-21T09:40:33Z", "tags": [], "is_private": false}]
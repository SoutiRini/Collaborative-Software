[{"count": 0, "tags": [], "bug_id": 19688, "attachment_id": null, "id": 36733, "time": "2003-05-06T02:13:40Z", "creator": "MMADKI@Doorways.org", "creation_time": "2003-05-06T02:13:40Z", "is_private": false, "text": "Documentation for ap_fputc, etc. states that the filter argument is \"the filter \ndoing the writing\".  However, this filter argument is sent as the context for \nap_filter_flush via lower-level apr_ routines.  If an overflow occurs and \nap_filter_flush is called then the filter pointer is used as the target for \nap_pass_brigade by ap_filter_flush.  The result is that the brigade is passed \nback to the originating filter, resulting in an infinite loop or other \nnastiness.\n\nEITHER the documentation in the source files needs to be changed to state that \nthe filter argument is \"the NEXT filter to which data should be passed in the \nevent of an overflow\" OR each of the macros ap_fputc, ap_fputs, and ap_fwrite \nneeds to pass f->next instead of f as the context for any callbacks to \nap_filter_flush.\n\nThis can be re-created by building an output filter that generates over 8K of \ndata via the named macros.  Pass in the output filter's pointer (passed to the \nfilter handler) and see the bad thing.  Pass in the next filter and see it work \nOK.\n\nIf this is a documentation glitch (including my misunderstanding it as written) \nthen it is minor.  If the doc (and my understanding thereof) is correct and the \nmacros need changing then it is major, as it prevents output filters which send \nout more than 8K at a whack from functioning properly."}, {"count": 1, "tags": [], "bug_id": 19688, "text": "Somewhat belatedly I realized I should look for examples within the Apache code \nbody.  I found a call to ap_fwrite in server/protocol.c which passes f->next.  \nSo the answer here is probably \"fix the documentation\" (if not \"Marc you're an \nidiot\" ;).\n", "id": 36734, "time": "2003-05-06T03:08:20Z", "creator": "MMADKI@Doorways.org", "creation_time": "2003-05-06T03:08:20Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 19688, "attachment_id": null, "id": 36795, "time": "2003-05-07T01:22:10Z", "creator": "MMADKI@Doorways.org", "creation_time": "2003-05-07T01:22:10Z", "is_private": false, "text": "I went back to Ryan Bloom's 09/2001 article on writing output filters \n(http://www.onlamp.com/pub/a/apache/2001/09/13/apache_2.html) and it states \nvery clearly that the filter argument to all of these routines is filter-\n>next.  I had read this article, but apparently not with enough attention to \ndetail.  Then I went to the documentation line I quoted above in the source and \nconfused myself.\n\nSorry for registering a bug on this.  I still believe the doc should be fixed \nand it is in fact taken from the code (as it should be).  I'm willing to do it \nmyself and submit diffs if requested.\n\nMea culpa, mea culpa, mea culpa."}, {"count": 3, "tags": [], "bug_id": 19688, "attachment_id": null, "id": 62765, "time": "2004-08-30T11:16:36Z", "creator": "chip@force-elite.com", "creation_time": "2004-08-30T11:16:36Z", "is_private": false, "text": "Diffs would be cool.  Attach em and I will look at committing them :)"}, {"count": 4, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "Definitely a documentation bug.  To change the code will break more-or-less\nevery existing filter.  I'll do something with it if noone else gets there first.", "id": 62793, "time": "2004-08-30T18:49:49Z", "bug_id": 19688, "creation_time": "2004-08-30T18:49:49Z", "is_private": false}, {"count": 5, "tags": [], "creator": "nick@webthing.com", "attachment_id": null, "text": "Committing documentation fix in CVS", "id": 63412, "time": "2004-09-12T15:52:48Z", "bug_id": 19688, "creation_time": "2004-09-12T15:52:48Z", "is_private": false}]
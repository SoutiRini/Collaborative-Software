[{"count": 0, "tags": [], "bug_id": 57674, "attachment_id": null, "id": 181583, "time": "2015-03-07T19:13:17Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-07T19:13:17Z", "is_private": false, "text": "Similar to bug #57638, choosing a packetSize > 8192 (the default) for AjpNioProtocol causes BufferOverflowExceptions like the following:\n\njava.nio.BufferOverflowException\n        at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:189)\n        at org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:305)\n        at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1234)\n        at org.apache.coyote.Response.doWrite(Response.java:499)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:402)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)\n        at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:485)\n        at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464)\n        at org.apache.tomcat.util.buf.CharChunk.append(CharChunk.java:302)\n        at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:527)\n        at org.apache.catalina.connector.CoyoteWriter.write(CoyoteWriter.java:152)\n        at org.apache.velocity.io.VelocityWriter.flushBuffer(VelocityWriter.java:129)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:306)\n        at org.apache.velocity.io.VelocityWriter.write(VelocityWriter.java:322)\n        at org.apache.velocity.runtime.parser.node.ASTReference.render(ASTReference.java:491)\n        at org.apache.velocity.runtime.parser.node.SimpleNode.render(SimpleNode.java:342)\n        at org.apache.velocity.Template.merge(Template.java:356)\n        at org.apache.velocity.Template.merge(Template.java:260)\n        at org.apache.velocity.tools.view.VelocityView.performMerge(VelocityView.java:942)\n        at org.apache.velocity.tools.view.VelocityView.merge(VelocityView.java:902)\n        at org.apache.velocity.tools.view.VelocityViewServlet.mergeTemplate(VelocityViewServlet.java:318)\n        at org.apache.velocity.tools.view.VelocityLayoutServlet.mergeTemplate(VelocityLayoutServlet.java:247)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doRequest(VelocityViewServlet.java:220)\n        at org.apache.velocity.tools.view.VelocityViewServlet.doGet(VelocityViewServlet.java:182)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    [...]\n\nSetting socket.appReadBufSize to the same size as the packetSize resolves the problem."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 181592, "time": "2015-03-08T17:46:29Z", "bug_id": 57674, "creation_time": "2015-03-08T17:46:29Z", "is_private": false, "text": "Fixed in 8.0.x for 8.0.21 onwards and 7.0.x for 7.0.60 onwards. Neither trunk nor 6.0.x were affected."}, {"attachment_id": null, "tags": [], "bug_id": 57674, "text": "I think there is something missing with this fix. I get no errors on the Tomcat side, now, but mod_jk certainly isn't happy:\n\n[Mon Mar 09 11:38:55.820 2015] [7087:140653078521600] [error] ajp_connection_tcp_get_message::jk_ajp_common.c (1372): (worker21) wrong message format 0x6f6e from 127.0.0.1:8215\n[Mon Mar 09 11:38:55.824 2015] [7087:140653078521600] [error] ajp_get_reply::jk_ajp_common.c (2289): (worker21) Tomcat is down or network problems. Part of the response has already been sent to the client\n[Mon Mar 09 11:38:55.824 2015] [7087:140653078521600] [info] ajp_service::jk_ajp_common.c (2773): (worker21) sending request to tomcat failed (recoverable), because of protocol error (attempt=1)\n[Mon Mar 09 11:38:56.287 2015] [7087:140653078521600] [error] ajp_connection_tcp_get_message::jk_ajp_common.c (1372): (worker21) wrong message format 0x6f6e from 127.0.0.1:8215\n[Mon Mar 09 11:38:56.299 2015] [7087:140653078521600] [error] ajp_get_reply::jk_ajp_common.c (2289): (worker21) Tomcat is down or network problems. Part of the response has already been sent to the client\n[Mon Mar 09 11:38:56.299 2015] [7087:140653078521600] [info] ajp_service::jk_ajp_common.c (2773): (worker21) sending request to tomcat failed (recoverable), because of protocol error (attempt=2)\n[Mon Mar 09 11:38:56.299 2015] [7087:140653078521600] [error] ajp_service::jk_ajp_common.c (2794): (worker21) connecting to tomcat failed (rc=-11, errors=6, client_errors=0).\n[Mon Mar 09 11:38:56.299 2015] [7087:140653078521600] [info] jk_handler::mod_jk.c (2991): Service error=-11 for worker=worker21\n\n\nFrom my earlier instrumentation, I'm getting log messages telling me what is being send to the output() method. I'm including them in case they are helpful:\n\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=8200\nMar 09, 2015 11:38:56 AM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=8200\nMar 09, 2015 11:38:56 AM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=8200\nMar 09, 2015 11:38:56 AM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=65536, starting at offset=0, len=7240\nMar 09, 2015 11:38:56 AM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=8, starting at offset=0, len=8\nMar 09, 2015 11:38:56 AM org.apache.coyote.ajp.AjpNioProcessor output\nWARNING: Writing to output buffer of capacity=8192, position=0, limit=8192, remaining=8192 from source buffer of size=6, starting at offset=0, len=6", "count": 2, "id": 181607, "time": "2015-03-09T15:42:17Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-09T15:42:17Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 57674, "attachment_id": null, "id": 181611, "time": "2015-03-09T16:52:17Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-09T16:52:17Z", "is_private": false, "text": "Thanks for the fixes, Mark.\n\nI probably could have done these changes myself, but I wasn't sure of the implications of making changes in these areas."}, {"count": 4, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 181612, "time": "2015-03-09T16:53:23Z", "bug_id": 57674, "creation_time": "2015-03-09T16:53:23Z", "is_private": false, "text": "This is looking much better.\n\nI was fortunate that I could reproduce this very easily in my application and we are humming-along quite smoothly, now."}, {"count": 5, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "Something is still not quite right.\n\nWhile no errors are being thrown, content is being garbled at regular intervals.\n\nUsing Tomcat 7.0.x at r1665573 with packetSize=\"65536\" and no other buffer-related configuration.\n\nI see stuff like this periodically in long responses:\n\nonclick=\"window.locatioAB ^D^C ^@s://[host]:443\n\nI'm working on getting those byte values in there (after the \"window.locatio\" and before the \"s://\") for you; they may tell us something.", "id": 181633, "time": "2015-03-10T15:14:20Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T15:14:20Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "Okay, here's what od has to say about those bytes:\n\n0017740  22  20  6f  6e  63  6c  69  63  6b  3d  22  77  69  6e  64  6f\n          \"  sp   o   n   c   l   i   c   k   =   \"   w   i   n   d   o\n0017760  77  2e  6c  6f  63  61  74  69  6f  41  42  20  04  03  20  00\n          w   .   l   o   c   a   t   i   o   A   B  sp eot etx  sp nul\n\n                       Here's the weirdness ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSo, that's a literal \"AB\" followed by a space, EOT, ETX, space, and NUL bytes. Then, the text continues on where it left off. The number of unexpected bytes takes up the same number of bytes in the output, so it's a straight clobbering of bytes and not something being inserted, and changing the total content length.\n\n0020000  73  3a  2f  2f   [etc]\n          s   :   /   /   [etc]\n\nWith unprintable characters replaced with \"x\", the content is:\n\nwindow.locatioAB xx xs://[host]:443\n\nAnd it should be this:\n\nwindow.location=\"https://[host]:443\n\nSo you can see that those bytes were replaced and not inserted (or deleted). So the byte count is correct, but something else is wrong.\n\nThere are many other instances in thie page I'm looking at right now. I'll check to see if they all have the same pattern.", "id": 181634, "time": "2015-03-10T15:19:08Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T15:19:08Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 57674, "text": "Yes, all occurrences of the garbled bytes are the same set of replacement bytes:\n\n  41  42   20  04  03  02  00\n   A   B   sp eot etx  sp nul", "count": 7, "id": 181635, "time": "2015-03-10T15:23:30Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T15:23:30Z", "is_private": false}, {"count": 8, "attachment_id": null, "bug_id": 57674, "text": "This does it on a fresh Tomcat 7.0.x trunk:\n\n1. Modify the AJP <Connector> thusly:\n\n    <Connector port=\"8009\"\n               redirectPort=\"8443\"\n               protocol=\"org.apache.coyote.ajp.AjpNioProtocol\"\n               URIEncoding=\"UTF-8\"\n               packetSize=\"65536\"\n               />\n\n  (redirectPort and URIEncoding probably have nothing to do with it)\n\n2. Set up your mod_jk worker thusly:\n\n  worker.template.type=ajp13\n  worker.template.host=localhost\n  worker.template.connection_pool_timeout=60\n  worker.template.socket_timeout=300\n  worker.template.max_packet_size=65536\n\n  worker.list=test-worker\n  worker.test-worker.reference=worker.template\n  worker.test-worker.port=8009\n\n  (the 'template' worker is probably not necessary)\n\n3. Run this simple JSP:\n\n<%@page buffer=\"20kb\" contentType=\"text/plain\" %><%\n  int iterations = 12500;\n  int bytes = 0;\n  for(int i=0; i<iterations; ++i) {\n    out.println(String.format(\"%1$06x\", bytes));\n    bytes += 8;\n  }\n%>\n\nNote the large (ish) buffer size and the long (ish) content.\n\nSearch the output for the text \"AB\" which is never actually intended to be in the output; you'll see scarring of the response text at regular intervals.", "id": 181639, "time": "2015-03-10T16:10:05Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T16:10:05Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "(In reply to Christopher Schultz from comment #7)\n> Yes, all occurrences of the garbled bytes are the same set of replacement\n> bytes:\n> \n>   41  42   20  04  03  02  00\n>    A   B   sp eot etx  sp nul\n\nAB is the start on a tomcat-to-web-server-packet. The 0x20 and 0x04 are the length of the packet, so here it is 8196 bytes. Next is packet type 0x03 which is a body chunk packet. Next is 0x02 0x00 but I think it actually is 0x20 0x00 (see your previous post) which is the chunk size, so here it is 8KB. The rest is the raw data.\n\nSo it looks like the TC AJP connector has somehow framed the response into to small packets not respecting the configured packet size. It would be interesting though to see the data before these bytes. Namely whether the previous AJP packet had the right size, so the \"AB\" starts right after the previous packet and the error is on the reassembling side (mod_jk), or whether th previous packet announced more data than it actually sended and then \"suddenly\" a new packet started.\n\nRegards,\n\nRainer", "id": 181642, "time": "2015-03-10T16:22:50Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-03-10T16:22:50Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "When I run that script, the first hiccup comes at byte 0x00248a (decimal 9354):\n\n002478\n002480\n00AB ^D^C ^@2490\n  ^ byte 0x2480 + 8 + 2)\n\n  (Note that each line is 8 bytes long: 6 bytes of address + \\r\\n,\n   so the \"AB\" starts at 0x2480 + 8 + 2)\n002498\n0024a0\n\nThen it happens again at byte 0x491a (decimal 18714):\n\n004908\n004910\n0049AB ^D^C ^@20\n004928\n004930\n\nThe distance between the first and second scars is 0x2490 (9360) bytes.\n\nThen again at 0x6dae (decimal 28078):\n\n006d98\n006da0\n006da8AB ^D^C ^@\n006db8\n006dc0\n\nThat's an offset to the previous scar of 0x2494 (decimal 9364).\n\nThen again at 0x9241 (decimal 37441):\n\n009230\n009238\n0AB ^D^C ^@09248\n009250\n009258\n\nThat's an offset of 9363.\n\nI've taken another look at AjpNioProcessor.output, and the loop looks very straightforward. As long as writeBuffer.put() and NioSelectorPool.write work as advertized, and no IOException occurs at line 316 (selector = pool.get()), it should work.", "id": 181644, "time": "2015-03-10T16:28:39Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T16:28:39Z", "is_private": false}, {"count": 11, "attachment_id": null, "bug_id": 57674, "text": "(In reply to Rainer Jung from comment #9)\n> (In reply to Christopher Schultz from comment #7)\n> > Yes, all occurrences of the garbled bytes are the same set of replacement\n> > bytes:\n> > \n> >   41  42   20  04  03  02  00\n> >    A   B   sp eot etx  sp nul\n> \n> AB is the start on a tomcat-to-web-server-packet.\n\nThis is starting to make a lot of sense, now.\n\n> The 0x20 and 0x04 are the\n> length of the packet, so here it is 8196 bytes. Next is packet type 0x03\n> which is a body chunk packet. Next is 0x02 0x00 but I think it actually is\n> 0x20 0x00 (see your previous post) which is the chunk size, so here it is\n> 8KB. The rest is the raw data.\n\nYes, the \"02\" was a typo: it should of course be \"20\" for a space.\n\nSo it looks like maybe the underlying AJP protocol component has the problem: it appears to be clobbering response message bytes with its own packet-headers... packet headers that don't need to be added to the response bytes because there is still plenty of space left in the current AJP packet.\n\n> So it looks like the TC AJP connector has somehow framed the response into\n> to small packets not respecting the configured packet size.\n\nThat would be okay, as long as the AJP headers weren't clobbering content. :)\n\nIntroducing superfluous packets would be okay, even if it were a little inefficient.\n\n> It would be\n> interesting though to see the data before these bytes. Namely whether the\n> previous AJP packet had the right size, so the \"AB\" starts right after the\n> previous packet and the error is on the reassembling side (mod_jk), or\n> whether th previous packet announced more data than it actually sended and\n> then \"suddenly\" a new packet started.\n\nI can enable trace logging at the web server level. Let me get this working on an isolated instance where nobody else will fill-up my logs with extraneous logging.", "id": 181645, "time": "2015-03-10T16:34:15Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T16:34:15Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 57674, "attachment_id": null, "is_private": false, "id": 181646, "time": "2015-03-10T16:47:02Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-10T16:47:02Z", "text": "Running the example JSP I posted on my Mac gives me no output at all: the server returns \"Content-Length: 0\" (probably httpd adding that, since there is no Content-Length header sent by the JSP or Tomcat).\n\nRequesting the JSP resource via the BIO HTTP connector yields the expected output.\n\nHere's the [debug] output from mod_jk when I get zero bytes back:\n\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] map_uri_to_worker_ext::jk_uri_worker_map.c (1179): Attempting to map URI '/examples/test.jsp' from 2 maps\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] find_match::jk_uri_worker_map.c (978): Attempting to map context URI '/examples/*=broken' source 'JkMount'\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] find_match::jk_uri_worker_map.c (991): Found a wildchar match '/examples/*=broken'\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] jk_handler::mod_jk.c (2823): Into handler jakarta-servlet worker=broken r->proxyreq=0\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_get_worker_for_name::jk_worker.c (119): found a worker broken\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_maintain::jk_worker.c (348): Maintaining worker myworker\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_maintain::jk_worker.c (348): Maintaining worker lb\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] maintain_workers::jk_lb_worker.c (760): decay with 2^2\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_maintain::jk_worker.c (348): Maintaining worker test-worker\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_maintain::jk_worker.c (348): Maintaining worker broken\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] wc_get_name_for_type::jk_worker.c (303): Found worker type 'ajp13'\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] init_ws_service::mod_jk.c (1196): Service protocol=HTTP/1.1 method=GET ssl=false host=(null) addr=::1 name=localhost port=80 auth=(null) user=(null) laddr=::1 raddr=::1 uaddr=::1 uri=/examples/test.jsp\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] ajp_get_endpoint::jk_ajp_common.c (3351): (broken) acquired connection pool slot=0 after 0 retries\n[Tue Mar 10 12:46:06.517 2015] [1213:140735223407360] [debug] ajp_marshal_into_msgb::jk_ajp_common.c (684): (broken) ajp marshaling done\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_service::jk_ajp_common.c (2586): processing broken with 2 retries\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_send_request::jk_ajp_common.c (1722): (broken) no usable connection found, will create a new one.\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] jk_open_socket::jk_connect.c (675): socket TCP_NODELAY set to On\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] jk_open_socket::jk_connect.c (799): trying to connect socket 23 to ::1:8009\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] jk_open_socket::jk_connect.c (825): socket 23 [::1c1e:1f49:0:0:53443 -> ::e6f0:1e50:40d2:f2:8009] connected\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): sending to ajp13 pos=4 len=185 max=8192\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0000    12 34 00 B5 02 02 00 08 48 54 54 50 2F 31 2E 31  - .4......HTTP/1.1\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0010    00 00 12 2F 65 78 61 6D 70 6C 65 73 2F 74 65 73  - .../examples/tes\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0020    74 2E 6A 73 70 00 00 03 3A 3A 31 00 FF FF 00 09  - t.jsp...::1.....\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0030    6C 6F 63 61 6C 68 6F 73 74 00 00 50 00 00 04 A0  - localhost..P....\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0040    0E 00 0B 63 75 72 6C 2F 37 2E 33 37 2E 31 00 A0  - ...curl/7.37.1..\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0050    0B 00 09 6C 6F 63 61 6C 68 6F 73 74 00 A0 01 00  - ...localhost....\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0060    03 2A 2F 2A 00 A0 08 00 01 30 00 0A 00 0F 41 4A  - .*/*.....0....AJ\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0070    50 5F 52 45 4D 4F 54 45 5F 50 4F 52 54 00 00 05  - P_REMOTE_PORT...\n[Tue Mar 10 12:46:06.518 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0080    35 33 34 34 32 00 0A 00 0E 41 4A 50 5F 4C 4F 43  - 53442....AJP_LOC\n[Tue Mar 10 12:46:06.519 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 0090    41 4C 5F 41 44 44 52 00 00 03 3A 3A 31 00 0A 00  - AL_ADDR...::1...\n[Tue Mar 10 12:46:06.519 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 00a0    10 4A 4B 5F 4C 42 5F 41 43 54 49 56 41 54 49 4F  - .JK_LB_ACTIVATIO\n[Tue Mar 10 12:46:06.519 2015] [1213:140735223407360] [debug] ajp_connection_tcp_send_message::jk_ajp_common.c (1267): 00b0    4E 00 00 03 41 43 54 00 FF 00 00 00 00 00 00 00  - N...ACT.........\n[Tue Mar 10 12:46:06.519 2015] [1213:140735223407360] [debug] ajp_send_request::jk_ajp_common.c (1782): (broken) request body to send 0 - request body to resend 0\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): received from ajp13 pos=0 len=61 max=8192\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): 0000    04 00 C8 00 02 4F 4B 00 00 02 00 07 52 75 6E 6E  - .....OK.....Runn\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): 0010    69 6E 67 00 00 04 74 72 75 65 00 A0 01 00 1D 74  - ing...true.....t\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): 0020    65 78 74 2F 70 6C 61 69 6E 3B 63 68 61 72 73 65  - ext/plain;charse\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): 0030    74 3D 49 53 4F 2D 38 38 35 39 2D 31 00 00 00 00  - t=ISO-8859-1....\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_unmarshal_response::jk_ajp_common.c (739): (broken) status = 200\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_unmarshal_response::jk_ajp_common.c (746): Number of headers is = 2\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_unmarshal_response::jk_ajp_common.c (802): (broken) Header[0] [Running] = [true]\n[Tue Mar 10 12:46:06.529 2015] [1213:140735223407360] [debug] ajp_unmarshal_response::jk_ajp_common.c (802): (broken) Header[1] [Content-Type] = [text/plain;charset=ISO-8859-1]\n[Tue Mar 10 12:46:06.530 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): received from ajp13 pos=0 len=2 max=8192\n[Tue Mar 10 12:46:06.530 2015] [1213:140735223407360] [debug] ajp_connection_tcp_get_message::jk_ajp_common.c (1462): 0000    05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - ................\n[Tue Mar 10 12:46:06.530 2015] [1213:140735223407360] [warn] ajp_process_callback::jk_ajp_common.c (2121): (broken) AJP13 protocol: Reuse is set to false\n[Tue Mar 10 12:46:06.530 2015] [1213:140735223407360] [debug] ajp_reset_endpoint::jk_ajp_common.c (851): (broken) resetting endpoint with socket 23 (socket shutdown)\n[Tue Mar 10 12:46:06.530 2015] [1213:140735223407360] [debug] ajp_abort_endpoint::jk_ajp_common.c (821): (broken) aborting endpoint with socket 23\n[Tue Mar 10 12:46:06.531 2015] [1213:140735223407360] [debug] jk_shutdown_socket::jk_connect.c (932): About to shutdown socket 23 [::1c1e:1f49:0:0:53443 -> ::e6f0:1e50:40d2:f2:8009]\n[Tue Mar 10 12:46:06.534 2015] [1213:140735223407360] [debug] jk_is_input_event::jk_connect.c (1406): error event during poll on socket 23 [errno=22] (event=16)\n[Tue Mar 10 12:46:06.534 2015] [1213:140735223407360] [debug] jk_shutdown_socket::jk_connect.c (1016): Shutdown socket 23 [::1c1e:1f49:0:0:53443 -> ::e6f0:1e50:40d2:f2:8009] and read 0 lingering bytes in 0 sec.\n[Tue Mar 10 12:46:06.534 2015] [1213:140735223407360] [debug] ajp_done::jk_ajp_common.c (3282): recycling connection pool for worker broken and socket -1\n[Tue Mar 10 12:46:06.534 2015] [1213:140735223407360] [debug] jk_handler::mod_jk.c (2975): Service finished with status=200 for worker=broken"}, {"count": 13, "tags": [], "creator": "rainer.jung@kippdata.de", "is_private": false, "text": "Using the repro case I can see:\n\nTomcat doesn't send 64KB packets (or close to it) but instead it sends AJP packets announcing themselves via the packet header as having 8200 bytes including the header \"AB\" and packet size as integer (41 42 20 04), so \n8196 bytes excluding the header.\n\nBut then after 8188 bytes of content instead of 8196 bytes it stopps with the real package contents and the last 8 bytes of the packet are the same bytes as the first 8 bytes of that AJP message. So here's some kind of cyclic buffer overflow.\n\nThen the next AJP package starts having the same defect etc.", "id": 181651, "time": "2015-03-10T17:59:24Z", "bug_id": 57674, "creation_time": "2015-03-10T17:59:24Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "Sounds like I need to look at this some more. I'll take a look later.", "id": 181652, "time": "2015-03-10T19:26:19Z", "creator": "markt@apache.org", "creation_time": "2015-03-10T19:26:19Z", "is_private": false}, {"count": 15, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "(In reply to Mark Thomas from comment #14)\n> Sounds like I need to look at this some more. I'll take a look later.\n\nTry now.", "id": 181654, "time": "2015-03-10T20:45:22Z", "bug_id": 57674, "creation_time": "2015-03-10T20:45:22Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "Now it does fill the 8196 bytes completely and the packets fit neatly one after the other. So the result unmarshalled by mod_jk is fine.\n\nLet's see what Chris gets, but looks good to me. Thanks.\n\nRainer", "id": 181655, "time": "2015-03-10T23:19:22Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-03-10T23:19:22Z", "is_private": false}, {"count": 17, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "Looks good in my test case. I'm re-enabling the configuration (by removing the socket.appWriteBufSize setting) in my development environment to see it under real use.", "id": 181678, "time": "2015-03-11T19:13:03Z", "bug_id": 57674, "creation_time": "2015-03-11T19:13:03Z", "is_private": false}, {"count": 18, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "I assuming that this is fixed now.", "id": 181724, "time": "2015-03-13T11:14:37Z", "bug_id": 57674, "creation_time": "2015-03-13T11:14:37Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 57674, "attachment_id": null, "text": "I haven't gotten any complaints, and haven't noticed anything since I applied this most recent patch.", "id": 181731, "time": "2015-03-13T14:18:29Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-13T14:18:29Z", "is_private": false}]
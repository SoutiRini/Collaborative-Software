[{"count": 0, "tags": [], "creator": "forthwind@gmail.com", "attachment_id": 21721, "text": "Created attachment 21721\nThe workbook.xls file is generated by the Java code referenced.  The PMT calculation works correctly in the workbook.\n\nPer Nick Burch's request, I am including the Java code and generated workbook.xls file that I referenced in a posting to the mailing list.  Following is the text from the original posting I sent:\n\nHi, I am new to this list and am new to POI HSSF.  I am trying to find a way to programatically invoke the PMT formula and access the resulting value.  The code below generates an Excel spreasheet file successfully and even stores the correct value in the A1 cell when I manually open it. However, when I use the HSSFFormulaEvaluator to access the value that the formula computes, I keep getting a CELL_TYPE_ERROR.\n\npackage test.poi;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.CellReference;\n\npublic class BuildDynamicPmtWorkbook {\n\n\tpublic void buildDynamicPmtWorkbook() {\n\t\tHSSFWorkbook outWorkbook = new HSSFWorkbook();\n\t\tHSSFSheet outPMTSheet = outWorkbook.createSheet(\"PMT Sheet\");\n\t\tHSSFRow row = outPMTSheet.createRow((short) 0);\n\t\tHSSFCell cell = row.createCell((short) 0);\n\t\tcell.setCellType(HSSFCell.CELL_TYPE_FORMULA);\n\t\tcell.setCellFormula(\"PMT(0.09/12,48,-10000)\");\n\n\t\tFileOutputStream fileOutputStream = null;\n\t\ttry {\n\t\t\tfileOutputStream = new FileOutputStream(\"workbook.xls\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\toutWorkbook.write(fileOutputStream);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tfileOutputStream.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tInputStream inputStream = null;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(\"workbook.xls\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tHSSFWorkbook inWorkbook = null;\n\t\ttry {\n\t\t\tinWorkbook = new HSSFWorkbook(inputStream);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tHSSFSheet inPMTSheet = inWorkbook.getSheet(\"PMT Sheet\");\n\t\tHSSFFormulaEvaluator evaluator = new HSSFFormulaEvaluator(inPMTSheet, inWorkbook);\n\t\tCellReference cellReference = new CellReference(\"A1\");\n\t\tHSSFRow inRow = inPMTSheet.getRow(cellReference.getRow());\n\t\tHSSFCell inCell = inRow.getCell(cellReference.getCol());\n\t\tSystem.out.println(\"inCell type before evaluation: \" + inCell.getCellType());\n\t\tevaluator.setCurrentRow(inRow);\n\t\tHSSFFormulaEvaluator.CellValue inCellValue = evaluator.evaluate(inCell);\n\t\tswitch (inCellValue.getCellType()) {\n\t\tcase HSSFCell.CELL_TYPE_BOOLEAN:\n\t\t\tSystem.out.println(inCellValue.getBooleanValue());\n\t\t\tbreak;\n\t\tcase HSSFCell.CELL_TYPE_NUMERIC:\n\t\t\tSystem.out.println(inCellValue.getNumberValue());\n\t\t\tbreak;\n\t\tcase HSSFCell.CELL_TYPE_STRING:\n\t\t\tSystem.out.println(inCellValue.getStringValue());\n\t\t\tbreak;\n\t\tcase HSSFCell.CELL_TYPE_BLANK:\n\t\t\tSystem.out.println(\"CELL_TYPE_BLANK\");\n\t\t\tbreak;\n\t\tcase HSSFCell.CELL_TYPE_ERROR:\n\t\t\tSystem.out.println(\"CELL_TYPE_ERROR!!!\");\n\t\t\tbreak;\n\n\t\t// CELL_TYPE_FORMULA will never happen\n\t\tcase HSSFCell.CELL_TYPE_FORMULA:\n\t\t\tbreak;\n\t\t}\n\t\tSystem.out.println(\"inCellValue type after evaluation: \" + inCellValue.getCellType());\n\t\tSystem.out.println(\"What's the value of the formula? \" + inCellValue.getNumberValue());\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew BuildDynamicPmtWorkbook().buildDynamicPmtWorkbook();\n\t}\n\n}", "id": 115027, "time": "2008-03-27T07:54:18Z", "bug_id": 44691, "creation_time": "2008-03-27T07:54:18Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44691, "is_private": false, "id": 115041, "creation_time": "2008-03-27T11:23:29Z", "time": "2008-03-27T11:23:29Z", "creator": "apache@gagravarr.org", "text": "Thanks for the code, I've created a failing test in svn\n\nNot sure why we're getting an error back, but at least we have something to test against. Maybe Josh might be able to enlighten us... :)", "attachment_id": null}, {"text": "fixed in svn r641964\n\nThis was a problem in ExternalNameRecord.serialize(int, byte[]).  I originally left a TODO in that method to write a junit, because the code seemed difficult to read.\n\nPerhaps at some stage we could re-visit these serialize() / fillFields() methods of the org.apache.poi.hssf.record.Record hierarchy.  It's difficult to keep track of byte array offsets while streaming record fields.  The JDK (with DataInputStream / DataOutputStream) shows better examples of how to do this.", "tags": [], "bug_id": 44691, "is_private": false, "count": 2, "id": 115047, "time": "2008-03-27T13:08:10Z", "creator": "josh@apache.org", "creation_time": "2008-03-27T13:08:10Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "bug_id": 44691, "is_private": false, "id": 115051, "time": "2008-03-27T15:21:41Z", "creator": "josh@apache.org", "creation_time": "2008-03-27T15:21:41Z", "tags": [], "text": "(In reply to comment #2)\n> fixed in svn r641964\n\noops - that message was for bug 44695. This bug was just fixed in svn r641996.\n\nAccording to Excel help doc, PMT() takes between 3 and 5 args, POI was only allowing 4-5.\n\nI deleted  TestBug44691.java (after making sure it works) because the bug turned out to be localized to Pmt.java. A new test TestPmt.java was added to confirm this bug-fix."}]
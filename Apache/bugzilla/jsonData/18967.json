[{"count": 0, "tags": [], "bug_id": 18967, "attachment_id": null, "id": 35012, "time": "2003-04-11T18:44:42Z", "creator": "jpl@remotejava.com", "creation_time": "2003-04-11T18:44:42Z", "is_private": false, "text": "Quick way to reproduce the problem: try precompiling a JSP file with an include\ndirective pointing to a non-existing file.\n\nExplanation:\n\nThe class org.apache.jasper.compiler.Parser uses pc.getCompiler().getErrorDispatcher()\nto obtain an ErrorDispatcher for reporting error messages. Unfortunately, this method\nwill return null when the parser is invoked via \"Compile.generateJava\" (as is the case\nwith standalone compilation with JspC, called from Ant) and not via \"Compiler.compile\"\n(as is the case in embedded compilation). The method \"Compiler.compile\" is the only\nplace in code where the ErrorHandler is instantiated. As a quick fix, this\ninitialization might be moved to \"Compiler.generateJava\".\n\nSomewhat related to this bug is a problem with reporting internal exceptions in Jasper\nto the outside world. When I run into this bug, all I got from Ant was\n\"NullPointerException\" with no stack trace altogether. Having replace Tomcat with\nthe source distribution did not help much. I was now getting \"ERROR-the file\n'/WEB-INF/page/badbrowser.jsp' generated the following general exception:\njava.lang.NullPointerException\", followed by:\nerror:org.apache.jasper.JasperException: Error compiling /WEB-INF/page/badbrowser.jsp\n        at org.apache.jasper.JspC.processFile(JspC.java:597)\n        at org.apache.jasper.JspC.execute(JspC.java:802)\n        at org.apache.jasper.JspC.main(JspC.java:824)\n...which does not point to the spot in code where the NPE was originally thrown either.\n\nThis single bug can be fixed easily, but it would be a Good Thing if error reports\nfor JSP compilation actually delivered an exact stack trace of the root cause rather\nthan some intermediate exception or just the exception class name."}, {"count": 1, "tags": [], "text": "This bug is especially serious since it can hide errors that are not \nreproducible when precompilation is off. For instance, I added a taglib to my \nproject. Without precompilation, I get no errors. When I precompile, I get an \nNPE with no explanation.\n\nAfter I realized that the taglib was the problem, I added another step to my \nbuild process (to pre-pre-compile the tags). However, since some time had \npassed since I added the tags, it wasn't obvious.\n\nIn other words, this NPE hides errors that are difficult to fix (the \"don't \nprecompile\" workaround isn't always available) and makes precompilation risky \nfrom a development standpoint.", "attachment_id": null, "id": 38280, "creator": "cokelley@alumni.princeton.edu", "time": "2003-06-03T17:32:11Z", "bug_id": 18967, "creation_time": "2003-06-03T17:32:11Z", "is_private": false}, {"count": 2, "tags": [], "text": "I also have had issues with this bug - it is very difficult to fix a problem \nwithout the error message!  I fixed it in my copy by modifying the interface to \nCompiler to pass all the generate phases through the compile() method, which I \nmodified to take a parameter specifying generation type.  This is probably not \na solution in general due to the public interface change.  \n\nHowever, the creation of the ErrorReporter needs to be done so that it is \navailable no matter which method is called.  ", "attachment_id": null, "bug_id": 18967, "id": 44254, "time": "2003-09-16T22:11:45Z", "creator": "bmeier@acornsys.com", "creation_time": "2003-09-16T22:11:45Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 18967, "attachment_id": 8590, "id": 45767, "time": "2003-10-16T01:43:52Z", "creator": "dpoon@interwoven.com", "creation_time": "2003-10-16T01:43:52Z", "is_private": false, "text": "Created attachment 8590\nInstantiate errDispatcher up front instead of lazily"}, {"count": 4, "tags": [], "bug_id": 18967, "attachment_id": null, "is_private": false, "id": 45769, "time": "2003-10-16T02:07:09Z", "creator": "dpoon@interwoven.com", "creation_time": "2003-10-16T02:07:09Z", "text": "The problem is that Compiler.errDispatcher is null when the Validator encounters\nthe syntax error in the tag.  Compiler only instantiates its errDispatcher in\nCompiler.compile(), even though Compiler.generateJava() also needs\nerrDispatcher.  This triggers a NullPointerException, for example, if\nJspC.processFile() invokes Compiler.generateJava() directly, then the JSP fails\nto validate.\n\nI believe that the best fix would be for Compiler to instantiate errDispatcher\nin its constructor, instead of instantiating it lazily.  Even if lazy\ninstantiation were correctly implemented, it would hardly be worth the trouble\n-- creating an ErrorDispatcher involves a very simple constructor, and the two\nobjects created have very few members.  Here is the graph of references:\n\n                             +----------------------------------------+\n Compiler                    v                                        |\n   .errorDispatcher  -->  ErrorDispatcher                             |\n                            .bundle       --> ResourceBundle*         |\n                            .errHandler   --> DefaultErrorHandler     |\n                                                 .err ----------------+\n\n      * the ResourceBundle would have been loaded already anyway\n\nGiven that analysis, I have submitted a patch to ensure that\nCompiler.errorDispatcher is not null by instantiating it in the constructor. \nThe patch should apply to both Tomcat 4.1.24 and 4.1.27, since Compiler.java did\nnot change between the two versions."}, {"count": 5, "tags": [], "text": "\n\n*** This bug has been marked as a duplicate of 20953 ***", "is_private": false, "bug_id": 18967, "id": 59538, "time": "2004-06-18T23:44:19Z", "creator": "markt@apache.org", "creation_time": "2004-06-18T23:44:19Z", "attachment_id": null}]
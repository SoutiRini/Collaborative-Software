[{"count": 0, "tags": [], "text": "I have been doing some work on implementing extended attributes\nsupport for apr.\n\nI am doing this as I would like to add a property provider to\nmod_dav_fs that uses extended attributes instead of a db per file\n(TwistedDAV on Mac OS X also uses extended attributes for this BTW)\nand I want to do this portably so it could potentially be included.\n\nExtended attributes can also be used for setting mime-types on files\n(mod_mime_xattr uses the native Linux API so this could be ported\nto use portable apr xattrs and work on more platforms). Another nice\nidea is setting file listing 'description' attributes and getting\nmod_autoindex to look at them.\n\nI have looked at a few of the OS extended attributes interface and\nhave come up with an API proposal.\n\nIt addresses:\n * setting, getting, listing and removing of 'user' extended attributes\n   on a file specified by its filepath.\n\nIt does not address:\n * system namespaces on platforms with more than one attribute namespace\n   (only the user namespace is accessible on platforms with multiple\n    attr namespaces, new flags could potentially be added to access\n    platform specific system namespaces)\n * setting, getting, listing and removing attributes on a file\n   specified by a file descriptor (apr_os_file_t)\n\nI have working sample implementations for Linux, Mac OS X, FreeBSD 6\nand Solaris 10 (which each have different APIs BTW):\n\n* Linux impl use l?(get|set|list|remove)xattr\n* Mac OS X impl use (get|set|list|remove)xattr (different args to linux)\n* FreeBSD impl uses extattr_(get|set|list|delete)_(file|link)\n* Solaris impl uses subfiles (attropen,unlinkat and friends)\n\nNot implemented:\n\n* Windows - should be able to use named :streams (similar to Solaris)\n* OS/2 - it has extended attributes but that's all I know.\n* Irix/HPUX/AIX/OS390/netware/... - unknown? do they have them?", "attachment_id": null, "id": 112046, "creator": "michael@metaparadigm.com", "time": "2007-12-21T21:29:15Z", "bug_id": 44127, "creation_time": "2007-12-21T21:29:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 44127, "text": "Created attachment 21303\nBuild infrastrucutre, headers and implementations\n\nCurrently implemented for Linux, Solaris, FreeBSD and Mac OS X", "id": 112051, "time": "2007-12-21T21:41:11Z", "creator": "michael@metaparadigm.com", "creation_time": "2007-12-21T21:41:11Z", "is_private": false, "attachment_id": 21303}, {"count": 2, "tags": [], "text": "Attached patch implements changes based on feedback from the apr mailing list\n\nChanges (based on the initial patches sent to the list):\n\n* Moved headers out of apr_file_info.h into apr_file_xattr.h\n* Change interface from const char* filename to use apr_file_t *file\n* Removed APR_XATTR_NOFOLLOW from flags\n  (in line with change to apr_file_t* based interface)\n* Changed flags apr_int32_t from to apr_uint32_t\n* Updated tests and sample client apxattr to API revisions\n* Clarified apr_get_xattr docs on pool allocation of void **value\n* Moved from file_io/unix/xattr_(darwin|linux|freebsd|solaris).c to\n  file_io/unix/xattr/(darwin|linux|freebsd|solaris).c\n* Added code to escape and unescape '/' characters in Solaris\n  subfile (attribute) names. Also added special char test cases.\n* Added APR_ENOTIMPL stubs for netware, os2, win32 and unsupported unix\n* Added --disable-xattr configure flag (enabled by default if detected)\n\n", "attachment_id": null, "id": 112055, "creator": "michael@metaparadigm.com", "time": "2007-12-21T21:43:16Z", "bug_id": 44127, "creation_time": "2007-12-21T21:43:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 44127, "text": "Created attachment 21306\napxattr - sample utility to view/modify extended attributes on files", "id": 112082, "time": "2007-12-21T22:54:04Z", "creator": "michael@metaparadigm.com", "creation_time": "2007-12-21T22:54:04Z", "is_private": false, "attachment_id": 21306}, {"count": 4, "tags": [], "text": "Created attachment 21329\nRemoves null check for value (correct APR behaviour) and adds EINTR read/write retries on solaris", "attachment_id": 21329, "id": 112268, "creator": "michael@metaparadigm.com", "time": "2007-12-28T18:39:16Z", "bug_id": 44127, "creation_time": "2007-12-28T18:39:16Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 21330\nComplete re-diff with last fixes added\n\nAlso contains a small number of whitespace changes as a small number of lines\nin the first patch had tabs instead of 8 spaces.\n\nI have (setq indent-tabs-mode nil) in my .emacs now :)", "attachment_id": 21330, "id": 112269, "creator": "michael@metaparadigm.com", "time": "2007-12-28T18:45:33Z", "bug_id": 44127, "creation_time": "2007-12-28T18:45:33Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 44127, "text": "I have been working on an implementation of mod_dav_fs properties using this\nextended attribute interface and have found that the apr_file_t* based interface\nis not really that usable (especially with regards to directories). It would\nneed apr_dir_xattr_(get|set|list|remove) interfaces added doubling the number of\nfunctions. I had very ugly code as follows (where const char *pathname would be\nmuch more appropriate) - needs an apr_stat to work out if it is a file or dir.\n\n    apr_finfo_t finfo;\n    apr_dir_t *dir = NULL;\n    apr_file_t *file = NULL;\n    apr_os_dir_t *osdir;\n    apr_os_file_t osfile;\n    apr_status_t status;\n\n    status = apr_stat(&finfo, fname, APR_FINFO_TYPE, p);\n    if(status != APR_SUCCESS) {\n        return status;\n    }\n    if(finfo.filetype == APR_DIR) {\n        status = apr_dir_open(&dir, fname, p);\n        if(status != APR_SUCCESS) {\n            return status;\n        }\n        apr_os_dir_get(&osdir, dir);\n        osfile = dirfd(osdir); /* non-portable */\n        apr_os_file_put(&file, &osfile, 0, p);\n    } else {\n        status = apr_file_open(&file, fname, APR_READ | APR_WRITE, 0, p);\n        if(status != APR_SUCCESS) {\n            return status;\n        }\n    }\n    status = apr_file_xattr_get(file, attrname, &attrvalue, &attrsize, 0);\n\nwhere if I had a pathname based interface it would just be:\n\n    status = apr_file_xattr_get(fname, attrname, &attrvalue, &attrsize, 0);\n\nI have since changed the interface back to my original proposal of const char\n*pathname (as well as adding more test cases). Patches to follow.", "id": 112514, "time": "2008-01-05T06:45:58Z", "creator": "michael@metaparadigm.com", "creation_time": "2008-01-05T06:45:58Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "Created attachment 21346\nRevised build infrastrucutre, headers, implementations and tests\n\n* Change interface from apr_file_t *file to const char *pathname\n  This was needed to support extended attributes on directories and to\n  keep the interface simple.\n\n  The use case that the interface was created for (mod_dav_fs xattr props)\n  has a pathname that could point to either a file or a directory.\n  With an apr_file_t (and the addition of an apr_dir_t based interface),\n  it would require an apr_stat followed by an apr_file_open or apr_dir_open\n  and then to conditionally call the file_xattr or dir_xattr interface.\n\n* Added APR_ENOATTR and APR_STATUS_IS_ENOATTR() definitions to apr_errno.h\n\n* Added interface apr_file_xattr_exists() to check for the existence of\n  an attribute but without the overhead of fetching and allocating space\n\n* Doxygen documentation updates\n\n* Made solaris implementation disambiguate return in cases where the\n  attribute does not exist but the file does. Previously it returned\n  ENOENT when it should have returned ENOATTR\n\n* Added test cases for APR_STATUS_IS_ENOATTR() return when getting or\n  removing a non-existent attribute\n\n* Changed set replace test case to check for APR_STATUS_IS_ENOATTR()\n  when setting a non existant attribute with the APR_XATTR_REPLACE flag\n\n* Changed set create test cases to check for APR_STATUS_IS_EEXISTS()\n  when setting an existing attribute with the APR_XATTR_CREATE flag\n\n* Added test cases for APR_STATUS_IS_ENOENT() return when getting, setting\n  listing, or removing an attribute from a file that does not exist\n\n* Added test cases for extended attributes on directories\n\n* Changed example apxattr.c to use revised interface", "attachment_id": 21346, "id": 112515, "creator": "michael@metaparadigm.com", "time": "2008-01-05T06:50:40Z", "bug_id": 44127, "creation_time": "2008-01-05T06:50:40Z", "is_private": false}, {"count": 8, "tags": [], "creator": "michael@metaparadigm.com", "is_private": false, "text": "Created attachment 21347\napxattr - sample utility to view/modify extended attributes on files\n\nRevised version of apxattr that uses pathname based interface.", "id": 112516, "time": "2008-01-05T06:51:48Z", "bug_id": 44127, "creation_time": "2008-01-05T06:51:48Z", "attachment_id": 21347}, {"count": 9, "tags": [], "bug_id": 44127, "attachment_id": null, "id": 112517, "time": "2008-01-05T06:57:05Z", "creator": "michael@metaparadigm.com", "creation_time": "2008-01-05T06:57:05Z", "is_private": false, "text": "A httpd mod_dav_fs xattr properties implementation that uses these interfaces:\n\n  http://privsep.org/ModDavExtendedAttributes\n"}, {"count": 10, "tags": [], "bug_id": 44127, "attachment_id": null, "text": "More comments on the implementation:\n\nA pathname based implementation doesn't play well for some situations\nwhen the file is unlinked or when the pathname needs special handling.\nI think what you can do is to support both ways:\n\ntypedef struct apr_file_xattr_t;\n\napr_file_xattr_open(apr_file_xattr_t **xattr, const char *pathname, ....)\napr_file_xattr_fdopen(apr_file_xattr_t **xattr, apr_file_t *file, ....)\napr_file_xattr_destroy(apr_file_xattr_t *xattr);\n\nand in the implementation you use which one is most convenient, the file\nhandle or the pathname, even when the pathname only is used you can keep\nthe file descriptor open between xattr calls. This is the way most APR\ninterfaces are implemented and tends to make more sense APR/API wide.\n\nI think you don't need to pass flags/pool to each function, by using the\nabove interface you can keep the flags inside the apr_file_xattr_t struct.\n\nThe way the files are built should be done the other way around, look at\nhow the atomic files are built. Since you already have the USE_XATTR_*\nmacros you just need to cover each file if a #if on the macro. This way\nall the files are built and dependencies are automatically tracked.", "id": 112546, "time": "2008-01-06T14:17:06Z", "creator": "davi@apache.org", "creation_time": "2008-01-06T14:17:06Z", "is_private": false}, {"count": 11, "tags": [], "creator": "michael@metaparadigm.com", "attachment_id": null, "id": 112565, "time": "2008-01-06T18:24:57Z", "bug_id": 44127, "creation_time": "2008-01-06T18:24:57Z", "is_private": false, "text": "(In reply to comment #10)\n> typedef struct apr_file_xattr_t;\n> \n> apr_file_xattr_open(apr_file_xattr_t **xattr, const char *pathname, ....)\n> apr_file_xattr_fdopen(apr_file_xattr_t **xattr, apr_file_t *file, ....)\n> apr_file_xattr_destroy(apr_file_xattr_t *xattr);\n\nOK. I like this approach. I was also wondering about dropping the _file\nprefix due to them also working on directories (apr_stat as an example):\n\napr_xattr_path_open(apr_file_xattr_t **xattr, const char *pathname, ....)\napr_xattr_file_open(apr_file_xattr_t **xattr, apr_file_t *file, ....)\napr_xattr_dir_open(apr_file_xattr_t **xattr, apr_dir_t *dir, ....)\napr_xattr_get(apr_file_xattr_t *xattr, const char *name, ...)\n...\napr_xattr_destroy(apr_file_xattr_t *xattr)\n\nwith a cleanup similar to file_open (call to apr_xattr_destroy explicitly runs\ncleanup otherwise it is run at pool cleanup time - path_open variant cleanup\nwould close the fd but not the file_open or dir_open variants).\n\n> I think you don't need to pass flags/pool to each function, by using the\n> above interface you can keep the flags inside the apr_file_xattr_t struct.\n\nThe APR_XATTR_NOFOLLOW could be used on the pathname _open variants but the\nflags are needed on xattr_set for APR_XATTR_CREATE or APR_XATTR_REPLACE. This\nneeds to be operation specific (not chosen at open time).\n\nIt may be a good idea to keep flags on all ops as in the future we could add\nAPR_NAMESPACE_SYSTEM for example which would be relevant for all functions e.g.\nset|get|list|remove and should be operation specific (not chosen at open time).\n\n> The way the files are built should be done the other way around, look at\n> how the atomic files are built. Since you already have the USE_XATTR_*\n> macros you just need to cover each file if a #if on the macro. This way\n> all the files are built and dependencies are automatically tracked.\n\nOK. I'll look into this. Thanks for the feedback. I'll roll another patch in a\nfew days time based on this approach."}, {"count": 12, "tags": [], "bug_id": 44127, "attachment_id": null, "id": 113366, "time": "2008-02-02T07:16:59Z", "creator": "davi@apache.org", "creation_time": "2008-02-02T07:16:59Z", "is_private": false, "text": "Any progress? I'm looking forward to seeing the new version."}, {"count": 13, "tags": [], "bug_id": 44127, "attachment_id": null, "is_private": false, "id": 113393, "time": "2008-02-03T05:17:37Z", "creator": "michael@metaparadigm.com", "creation_time": "2008-02-03T05:17:37Z", "text": "Thanks for the encouragement. I am sort of half way. I had to suspend my efforts\ndue to some pressing work on a competition entry. I will have some free time to\ncontinue this over the next week."}, {"count": 14, "tags": [], "bug_id": 44127, "attachment_id": 21465, "text": "Created attachment 21465\nheader for revised interface\n\nHere is the header for the revised interface (before I get too deep into the\nimplementation):\n\n  * A new type apr_xattr_t representing an extended attribute context opened\n    on a file or directory. apr_xattr_(get|set|exists|list|remove) now take\n    apr_xattr_t* instead of a path name.\n  * New methods apr_xattr_(file|path|dir)_open and apr_xattr_destroy\n  * Allows access to extended attributes on a file or directory specified by\n    a path name, on an already open apr_file* or on an already open apr_dir*\n    (apr_xattr_open_path version is required in cases where we have a path name\n\n    that could point to either a file or directory, avoiding the need for an\n    extra apr_stat and a apr_file_open or apr_dir_open).\n  * flags argument on apr_xattr_(get|exists|list|remove) retained to allow for\n    potential addition of namespace flags (only set requires flags presently).\n  * pool argument dropped from apr_xattr_(get|exists|list|remove) as the pool\n    is specified when opening the context.", "id": 113409, "time": "2008-02-04T05:31:41Z", "creator": "michael@metaparadigm.com", "creation_time": "2008-02-04T05:31:41Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 44127, "attachment_id": 21482, "id": 113469, "time": "2008-02-06T00:55:01Z", "creator": "michael@metaparadigm.com", "creation_time": "2008-02-06T00:55:01Z", "is_private": false, "text": "Created attachment 21482\nRevised build infrastrucutre, headers, implementations and tests\n\nHere is the implementation based on the proposed changes.\n\n* Moved to toplevel xattr module and made all unix implementations build with \n  ifdef'd empty units on inactive platforms as per atomics.\n  This fixes the source dependency problem.\n* Function name prefixes changed from apr_file_xattr_ to apr_xattr_\n  (to avoid confusing function names, plus we support dirs - see next item)\n* Added apr_xattr_open_path, apr_xattr_open_file, apr_xattr_open_dir\n  It is now possible to access extended attributes from an open file handle.\n  Implementations use file descriptor based interfaces instead of path based.\n* Added new type apr_xattr_t (allocated by above methods) and new function\n  apr_xattr_destroy (will close the fd only if opened with apr_xattr_open_path)\n\n* apr_xattr_(get|set|exists|list|remove) now take apr_xattr_t* instead of path\n* Drop APR_XATTR_NOFOLLOW flag as it does not make sense with new interface.\n  There is no similar support on apr_file_open for this flag anyway.\n* Updated test cases to revised interface"}, {"count": 16, "text": "Created attachment 21483\napxattr - sample utility to view/modify extended attributes on files\n\nUpdated sample utility to use revised interface", "creator": "michael@metaparadigm.com", "is_private": false, "id": 113470, "time": "2008-02-06T00:56:26Z", "bug_id": 44127, "creation_time": "2008-02-06T00:56:26Z", "tags": [], "attachment_id": 21483}]
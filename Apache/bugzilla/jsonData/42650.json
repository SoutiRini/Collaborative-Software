[{"count": 0, "text": "org.apache.catalina.tribes.transport.PooledSender.getSender() has the \npossibility of returning Null. \nHowever, \norg.apache.catalina.tribes.transport.nio.PooledParallelSender.sendMessage \ndoesn't check Null. \n(PooledParallelSender.sendMessage calls getSender())\nTherefore, NullpointerException is thrown. \nFinally, NullpointerException is thrown in the finally block. \n\nThe following are the stack traces. \n\norg.apache.catalina.tribes.ChannelException: java.lang.NullPointerException; \nNo faulty members identified.\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:225)\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:175)\n    at org.apache.catalina.ha.tcp.SimpleTcpCluster.send\n(SimpleTcpCluster.java:835)\n    at org.apache.catalina.ha.tcp.SimpleTcpCluster.sendClusterDomain\n(SimpleTcpCluster.java:814)\n    at org.apache.catalina.ha.tcp.ReplicationValve.send\n(ReplicationValve.java:551)\n    at org.apache.catalina.ha.tcp.ReplicationValve.sendMessage\n(ReplicationValve.java:535)\n    at \norg.apache.catalina.ha.tcp.ReplicationValve.sendSessionReplicationMessage\n(ReplicationValve.java:517)\n    at org.apache.catalina.ha.tcp.ReplicationValve.sendReplicationMessage\n(ReplicationValve.java:428)\n    at org.apache.catalina.ha.tcp.ReplicationValve.invoke\n(ReplicationValve.java:362)\n    at org.apache.catalina.connector.CoyoteAdapter.service\n(CoyoteAdapter.java:261)\n    at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190)\n    at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283)\n    at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767)\n    at org.apache.jk.common.ChannelSocket.processConnection\n(ChannelSocket.java:697)\n    at org.apache.jk.common.ChannelSocket$SocketConnection.runIt\n(ChannelSocket.java:889)\n    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:686)\n    at java.lang.Thread.run(Thread.java:595)\nCaused by: java.lang.NullPointerException\n    at org.apache.catalina.tribes.transport.PooledSender.returnSender\n(PooledSender.java:48)\n    at \norg.apache.catalina.tribes.transport.nio.PooledParallelSender.sendMessage\n(PooledParallelSender.java:52)\n    at org.apache.catalina.tribes.transport.ReplicationTransmitter.sendMessage\n(ReplicationTransmitter.java:80)\n    at org.apache.catalina.tribes.group.ChannelCoordinator.sendMessage\n(ChannelCoordinator.java:78)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at \norg.apache.catalina.tribes.group.interceptors.TcpFailureDetector.sendMessage\n(TcpFailureDetector.java:87)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at \norg.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor.sendMe\nssage(MessageDispatchInterceptor.java:73)\n    at org.apache.catalina.tribes.group.ChannelInterceptorBase.sendMessage\n(ChannelInterceptorBase.java:75)\n    at org.apache.catalina.tribes.group.GroupChannel.send\n(GroupChannel.java:216)\n\n\nWhen Sender cannot be acquired, it is necessary to throw ChannelException.\nOtherwise, because the exception can not catch with interceptor such as \norg.apache.catalina.tribes.group.interceptors.TcpFailureDetector, \nthe exception handling cannot be done. \nThe same processing of \norg.apache.catalina.tribes.transport.bio.PooledMultiSender checks Null.", "creator": "keiichi.fujino@gmail.com", "is_private": false, "id": 104362, "time": "2007-06-13T02:27:35Z", "bug_id": 42650, "creation_time": "2007-06-13T02:27:35Z", "tags": [], "attachment_id": null}, {"count": 1, "text": "Thanks for the bug report, \nconsider increasing your sender pool, or find out why you are running out of\nthem, or you can send messages asynchrously\n\nFilip", "creator": "fhanik@apache.org", "attachment_id": null, "id": 104374, "time": "2007-06-13T10:14:14Z", "bug_id": 42650, "creation_time": "2007-06-13T10:14:14Z", "tags": [], "is_private": false}]
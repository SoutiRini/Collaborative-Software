[{"count": 0, "attachment_id": null, "bug_id": 18198, "text": "Again, apologies if you've seen this before. I didn't go through Bugzilla the \nfirst time...\n\nCurrently, all the cache management methods in CacheUtil take a PageContext \nobject as a parameter regardless of the scope. This simplifies coding as all \nother scoped objects are available through the PageContext object. There are \nalso useful convenience methods for settings and getting attributes in all \nscoped objects through the PageContext.\n\nAlthough this makes the code simple, it unnecessarily complicates using this \nclass in Java code (as it is intended to be used). A class must obtain a valid \nPageContext object somehow from the container. The only reasonable way of doing \nthis is to get one passed from a JSP page (eg <c:set value=\"${pageContext}\" \ntarget=\"${cacheHelper}\" property=\"checkCaches\"/>).\n\nSince page scope caching is only really useful within a single JSP page, there \nshould be other means for a developer to get access to CacheUtil methods using \nHttpSession, ServletRequest or ServletContext. Especially since these objects \ncan easily be obtained in the web tier from a Front Controller.\n\nI propose overloading all the public methods to take these objects in place of \nthe PageContext. The caching will work identically to how it does now, it's \njust that attributes will be accessed directly from their scoped objects \ninstead of through the PageContext.\n\nThis allows developers to perform convenient cache setting initialization in \nplaces like the Servlet init method. It also lets web tier objects invalidate \ncaches when they become aware that business tier objects have changed (which \nusually happens before any JSPs are called).\n\ncheers\nandy\n\nPS If it's easier, I can provide the entire file instead of the following large \ndiff...\n\n===================================================================\nRCS file: /home/cvspublic/jakarta-\ntaglibs/cache/src/org/apache/taglibs/cache/CacheUtil.java,v\nretrieving revision 1.1.1.1\ndiff -r1.1.1.1 CacheUtil.java\n57a58,60\n> import javax.servlet.ServletContext;\n> import javax.servlet.http.HttpSession;\n> import javax.servlet.ServletRequest;\n93,94c96,101\n<      * Retrieves the size of the cache, given a particular scope and\n<      * a context.\n---\n>      * Retrieves the size in characters of the cache, given a particular \nscope \n>      * and a context.\n>      *\n>      * @param scope must be one of four scope constants in PageContext\n>      * @param pageContext has access to all scope objects. Obtained\n>      *                    from a JSP page\n99,102c106,133\n<       if (n == null)\n<         return DEFAULT_SIZE;\n<       else\n<         return n.intValue(); \n---\n>       return getNumber(n, DEFAULT_SIZE);\n>     }\n> \n>     /**\n>      * Retrieves the size in characters of the given application scope cache.\n>      */ \n>     public static int getCacheSize(ServletContext servletContext) {\n>       String attribute = getAttributeName(PageContext.APPLICATION_SCOPE, \nSIZE);\n>       Number n = (Number) servletContext.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_SIZE);\n>     }\n> \n>     /**\n>      * Retrieves the size in characters of the given session scope cache.\n>      */ \n>     public static int getCacheSize(HttpSession session) {\n>       String attribute = getAttributeName(PageContext.SESSION_SCOPE, SIZE);\n>       Number n = (Number) session.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_SIZE);\n>     }\n> \n>     /**\n>      * Retrieves the size in characters of the given request scope cache.\n>      */ \n>     public static int getCacheSize(ServletRequest request) {\n>       String attribute = getAttributeName(PageContext.REQUEST_SCOPE, SIZE);\n>       Number n = (Number) request.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_SIZE);\n106,107c137,152\n<      * Retrieves the lifetime of items in the cache, given a particular\n<      * scope and a context.\n---\n>      * Retrieves the size in characters of the given page scope cache.\n>      */ \n>     public static int getCacheSize(PageContext pageContext) {\n>       String attribute = getAttributeName(PageContext.PAGE_SCOPE, SIZE);\n>       Number n = (Number) pageContext.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_SIZE);\n>     }\n>     \n>     \n>     /**\n>      * Retrieves the lifetime in seconds of items in the cache, \n>      * given a particular scope and a context.\n>      *\n>      * @param scope must be one of four scope constants in PageContext\n>      * @param pageContext has access to all scope objects. Obtained\n>      *                    from a JSP page\n112,115c157\n<       if (n == null)\n<         return DEFAULT_LIFETIME;\n<       else\n<         return n.intValue();\n---\n>       return getNumber(n, DEFAULT_LIFETIME);\n119c161,202\n<      * Sets a particular cache size to use for new caches in the\n---\n>      * Retrieves the lifetime in seconds of items in the\n>      * given application scope cache.\n>      */ \n>     public static int getCacheLifetime(ServletContext servletContext) {\n>       String attribute = getAttributeName(PageContext.APPLICATION_SCOPE, \nLIFETIME);\n>       Number n = (Number) servletContext.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_LIFETIME);\n>     }\n>     \n>     /**\n>      * Retrieves the lifetime in seconds of items in the\n>      * given session scope cache.\n>      */ \n>     public static int getCacheLifetime(HttpSession session) {\n>       String attribute = getAttributeName(PageContext.SESSION_SCOPE, \nLIFETIME);\n>       Number n = (Number) session.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_LIFETIME);\n>     }\n> \n>     /**\n>      * Retrieves the lifetime in seconds of items in the\n>      * given request scope cache.\n>      */ \n>     public static int getCacheLifetime(ServletRequest request) {\n>       String attribute = getAttributeName(PageContext.REQUEST_SCOPE, \nLIFETIME);\n>       Number n = (Number) request.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_LIFETIME);\n>     }\n> \n>     /**\n>      * Retrieves the lifetime in seconds of items in the\n>      * given page scope cache.\n>      */ \n>     public static int getCacheLifetime(PageContext pageContext) {\n>       String attribute = getAttributeName(PageContext.PAGE_SCOPE, LIFETIME);\n>       Number n = (Number) pageContext.getAttribute(attribute);\n>       return getNumber(n, DEFAULT_LIFETIME);\n>     }\n> \n> \n>     /**\n>      * Sets a cache size in characters to use for new caches in the\n123,124c206,243\n<      String attribute = getAttributeName(scope, SIZE);\n<      ctx.setAttribute(attribute, new Integer(size), scope);\n---\n>       String attribute = getAttributeName(scope, SIZE);\n>       ctx.setAttribute(attribute, new Integer(size), scope);\n>     }\n> \n>     /**\n>      * Sets a cache size in characters to use for new caches in the\n>      * given application context.\n>      */\n>     public static void setCacheSize(int size, ServletContext servletContext) {\n>       String attribute = getAttributeName(PageContext.APPLICATION_SCOPE, \nSIZE);\n>       servletContext.setAttribute(attribute, new Integer(size));\n>     }\n> \n>     /**\n>      * Sets a cache size in characters to use for new caches in the\n>      * given session context.\n>      */\n>     public static void setCacheSize(int size, HttpSession session) {\n>       String attribute = getAttributeName(PageContext.SESSION_SCOPE, SIZE);\n>       session.setAttribute(attribute, new Integer(size));\n>     }\n> \n>     /**\n>      * Sets a cache size in characters to use for new caches in the\n>      * given request context.\n>      */\n>     public static void setCacheSize(int size, ServletRequest request) {\n>       String attribute = getAttributeName(PageContext.REQUEST_SCOPE, SIZE);\n>       request.setAttribute(attribute, new Integer(size));\n>     }\n> \n>     /**\n>      * Sets a cache size in characters to use for new caches in the\n>      * given page context.\n>      */\n>     public static void setCacheSize(int size, PageContext pageContext) {\n>       String attribute = getAttributeName(PageContext.PAGE_SCOPE, SIZE);\n>       pageContext.setAttribute(attribute, new Integer(size));\n126a246\n> \n135a256,299\n>     \n>     /**\n>      * Sets a cache lifetime in seconds to use for new caches in the\n>      * given application context.\n>      */\n>     public static void setCacheLifetime(\n>         int lifetime, ServletContext servletContext) {\n>       String attribute = getAttributeName(PageContext.APPLICATION_SCOPE,\n>                                           LIFETIME);\n>       servletContext.setAttribute(attribute, new Integer(lifetime));\n>     }\n>     \n>     /**\n>      * Sets a cache lifetime in seconds to use for new caches in the\n>      * given session context.\n>      */\n>     public static void setCacheLifetime(\n>         int lifetime, HttpSession session) {\n>       String attribute = getAttributeName(PageContext.SESSION_SCOPE,\n>                                           LIFETIME);\n>       session.setAttribute(attribute, new Integer(lifetime));\n>     }\n> \n>     /**\n>      * Sets a cache lifetime in seconds to use for new caches in the\n>      * given request context.\n>      */\n>     public static void setCacheLifetime(\n>         int lifetime, ServletRequest request) {\n>       String attribute = getAttributeName(PageContext.REQUEST_SCOPE,\n>                                           LIFETIME);\n>       request.setAttribute(attribute, new Integer(lifetime));\n>     }\n> \n>     /**\n>      * Sets a cache lifetime in seconds to use for new caches in the\n>      * given page context.\n>      */\n>     public static void setCacheLifetime(\n>         int lifetime, PageContext pageContext) {\n>       String attribute = getAttributeName(PageContext.PAGE_SCOPE,\n>                                           LIFETIME);\n>       pageContext.setAttribute(attribute, new Integer(lifetime));\n>     }\n152a317,380\n>      * Retrieves (and creates if necessary) the named LRUCache\n>      * from the given application context.\n>      */\n>     public static LRUCache getCache(String name, ServletContext \nservletContext) {\n>       String att = getAttributePrefixForScope(PageContext.APPLICATION_SCOPE) \n+ \n>         CACHES_PREFIX + name;\n>       LRUCache l = (LRUCache) servletContext.getAttribute(att);\n>       if (l == null) {\n>         l = new LRUCache(\n>           getCacheSize(servletContext), getCacheLifetime(servletContext));\n>         servletContext.setAttribute(att, l);\n>       }\n>       return l;\n>     }\n> \n>     /**\n>      * Retrieves (and creates if necessary) the named LRUCache\n>      * from the given session context.\n>      */\n>     public static LRUCache getCache(String name, HttpSession session) {\n>       String att = getAttributePrefixForScope(PageContext.SESSION_SCOPE) + \n>         CACHES_PREFIX + name;\n>       LRUCache l = (LRUCache) session.getAttribute(att);\n>       if (l == null) {\n>         l = new LRUCache(\n>           getCacheSize(session), getCacheLifetime(session));\n>         session.setAttribute(att, l);\n>       }\n>       return l;\n>     }\n> \n>     /**\n>      * Retrieves (and creates if necessary) the named LRUCache\n>      * from the given request context.\n>      */\n>     public static LRUCache getCache(String name, ServletRequest request) {\n>       String att = getAttributePrefixForScope(PageContext.REQUEST_SCOPE) + \n>         CACHES_PREFIX + name;\n>       LRUCache l = (LRUCache) request.getAttribute(att);\n>       if (l == null) {\n>         l = new LRUCache(\n>           getCacheSize(request), getCacheLifetime(request));\n>         request.setAttribute(att, l);\n>       }\n>       return l;\n>     }\n> \n>     /**\n>      * Retrieves (and creates if necessary) the named LRUCache\n>      * from the given page context.\n>      */\n>     public static LRUCache getCache(String name, PageContext pageContext) {\n>       String att = getAttributePrefixForScope(PageContext.PAGE_SCOPE) + \n>         CACHES_PREFIX + name;\n>       LRUCache l = (LRUCache) pageContext.getAttribute(att);\n>       if (l == null) {\n>         l = new LRUCache(\n>           getCacheSize(pageContext), getCacheLifetime(pageContext));\n>         pageContext.setAttribute(att, l);\n>       }\n>       return l;\n>     }\n> \n>     /**\n161a390,429\n>      * Invalidates an entire cache\n>      */\n>     public static void invalidateCache(\n>         String name, ServletContext servletContext) {\n>       String att = getAttributePrefixForScope(PageContext.APPLICATION_SCOPE) \n+ \n>         CACHES_PREFIX + name;\n>       servletContext.removeAttribute(att);\n>     }\n>     \n>     /**\n>      * Invalidates an entire cache\n>      */\n>     public static void invalidateCache(\n>         String name, HttpSession session) {\n>       String att = getAttributePrefixForScope(PageContext.SESSION_SCOPE) + \n>         CACHES_PREFIX + name;\n>       session.removeAttribute(att);\n>     }\n> \n>     /**\n>      * Invalidates an entire cache\n>      */\n>     public static void invalidateCache(\n>         String name, ServletRequest request) {\n>       String att = getAttributePrefixForScope(PageContext.REQUEST_SCOPE) + \n>         CACHES_PREFIX + name;\n>       request.removeAttribute(att);\n>     }\n> \n>     /**\n>      * Invalidates an entire cache\n>      */\n>     public static void invalidateCache(\n>         String name, PageContext pageContext) {\n>       String att = getAttributePrefixForScope(PageContext.PAGE_SCOPE) + \n>         CACHES_PREFIX + name;\n>       pageContext.removeAttribute(att);\n>     }\n>     \n>     /**\n167,169c435,459\n<       if (l == null)\n<         return;\t\t\t\t\t\t// nothing to do\n<       l.remove(key);\n---\n>       if (l != null) {\n>         l.remove(key);\n>       }\n>     }\n> \n>     /**\n>      * Invalidates an individual cache entry (key)\n>      */\n>     public static void invalidateCachedItem(\n>         String name, String key, ServletContext servletContext) {\n>       LRUCache l = getCache(name, servletContext);\n>       if (l != null) {\n>         l.remove(key);\n>       }\n>     }\n> \n>     /**\n>      * Invalidates an individual cache entry (key)\n>      */\n>     public static void invalidateCachedItem(\n>         String name, String key, HttpSession session) {\n>       LRUCache l = getCache(name, session);\n>       if (l != null) {\n>         l.remove(key);\n>       }\n171a462,482\n>     /**\n>      * Invalidates an individual cache entry (key)\n>      */\n>     public static void invalidateCachedItem(\n>         String name, String key, ServletRequest request) {\n>       LRUCache l = getCache(name, request);\n>       if (l != null) {\n>         l.remove(key);\n>       }\n>     }\n> \n>     /**\n>      * Invalidates an individual cache entry (key)\n>      */\n>     public static void invalidateCachedItem(\n>         String name, String key, PageContext pageContext) {\n>       LRUCache l = getCache(name, pageContext);\n>       if (l != null) {\n>         l.remove(key);\n>       }\n>     }\n175a487,498\n>     /** \n>      * Return the value of a Number object or defaultValue, \n>      * if it is null. \n>      */\n>     private static int getNumber(Number n, int defaultValue) {\n>       if (n == null) {\n>         return defaultValue;\n>       } else {\n>         return n.intValue(); \n>       }\n>     }    \n>", "id": 33556, "time": "2003-03-20T18:41:14Z", "creator": "andy@wagerworks.com", "creation_time": "2003-03-20T18:41:14Z", "tags": [], "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 18198, "is_private": false, "id": 53302, "time": "2004-03-02T04:22:20Z", "creator": "nagoya@felipeal.net", "creation_time": "2004-03-02T04:22:20Z", "tags": [], "text": "Andy,\n\nThe best way to provide a patch is running \n\ncvs diff -u  > patch_file\n\non your local repository (assuming you're running Linux or windows with Cygwin)\nand then attach the patch_file here on bugzilla.\n\nCould you please do that?\n\n-- Felipe\n"}, {"count": 2, "attachment_id": null, "bug_id": 18198, "text": "Resolving. Taglib has been retired.", "id": 132399, "time": "2009-11-29T19:37:50Z", "creator": "bayard@apache.org", "creation_time": "2009-11-29T19:37:50Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 56297, "attachment_id": null, "text": "Added Nov-2004 in JK 1.2.7 the COMPUTE_KEY_CHECKSUM macro \nis an attempt to allow us to check if we can skip a strcmp() invocation\nbut the key generated is always the same \nas all 'names' in mod_jk start with the same four characters ('work' - from 'worker.') so it does not improve performance.\n\nhttp://svn.apache.org/viewvc?view=revision&revision=299957\n\nIt can be changed to a digest to get the desired performance gain.", "id": 173991, "time": "2014-03-21T12:15:52Z", "creator": "apache@xenoc.demon.co.uk", "creation_time": "2014-03-21T12:15:52Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@xenoc.demon.co.uk", "attachment_id": null, "id": 173992, "time": "2014-03-21T12:22:26Z", "bug_id": 56297, "creation_time": "2014-03-21T12:22:26Z", "is_private": false, "text": "Patch tested on linux.\n\n$ svn diff jk_map.c\nIndex: jk_map.c\n===================================================================\n--- jk_map.c    (revision 1579918)\n+++ jk_map.c    (working copy)\n@@ -36,8 +36,8 @@\n #define JK_MAP_REFERENCE    (\".reference\")\n #define JK_MAP_REFERENCE_SZ (strlen(JK_MAP_REFERENCE))\n\n-/* Compute the \"checksum\" for a key, consisting of the first\n- * 4 bytes, packed into an int.\n+/* Compute the \"checksum\" for a key, consisting of\n+ * a digest of the string (same as java hashcode).\n  * This checksum allows us to do a single integer\n  * comparison as a fast check to determine whether we can\n  * skip a strcmp\n@@ -45,23 +45,13 @@\n #define COMPUTE_KEY_CHECKSUM(key, checksum)    \\\n {                                              \\\n     const char *k = (key);                     \\\n-    unsigned int c = (unsigned int)*k;         \\\n-    (checksum) = c;                            \\\n-    (checksum) <<= 8;                          \\\n-    if (c) {                                   \\\n-        c = (unsigned int)*++k;                \\\n-        checksum |= c;                         \\\n+    (checksum) = 0;                            \\\n+    unsigned int c = (unsigned int)*k++;       \\\n+    while(c) {                                 \\\n+        (checksum) *= 31;                      \\\n+        (checksum) += c;                       \\\n+        c = (unsigned int)*k++;                \\\n     }                                          \\\n-    (checksum) <<= 8;                          \\\n-    if (c) {                                   \\\n-        c = (unsigned int)*++k;                \\\n-        checksum |= c;                         \\\n-    }                                          \\\n-    (checksum) <<= 8;                          \\\n-    if (c) {                                   \\\n-        c = (unsigned int)*++k;                \\\n-        checksum |= c;                         \\\n-    }                                          \\\n }\n\n static volatile int global_map_id = 0;"}, {"count": 2, "tags": [], "bug_id": 56297, "attachment_id": null, "id": 174188, "time": "2014-03-31T19:07:15Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2014-03-31T19:07:15Z", "is_private": false, "text": "Thanks for the suggestion. I have taken a very similar code from the APR libs.\nFixed in r1583403. Will be part of 1.2.40.\nWould be nice if you could give that change a try."}]
[{"count": 0, "text": "I would like a way to prevent Tomcat from checking the System classloader before the webapp classloaders.  This would be useful when using the embedded Tomact API to produce isolated servlet containers.  \n\nI ran in to some difficulty with this when I was adding Tomcat support to the SBT (Simple Build Tool) plugin: https://github.com/JamesEarlDouglas/xsbt-web-plugin\n\nIn particular I had an issue where SBT includes a version of the Scala standard library, on the system classpath, that has been run through Proguard.  This  was conflicting with web applications that were including their own version of the Scala standard library.  I was eventually able to work around this using this hack: https://github.com/JamesEarlDouglas/xsbt-web-plugin/commit/f8a9b149f0c7c87d7b6e8f862c493841d82ad90a However, it would be nice if there was a way to accomplish this that didn't involve such a hack.\n\nI would be happy to submit a patch for this.  However, I would like some guidence on how the API should be changed to accomplish this.  Perhaps a new flag on the WebappLoader class?\n\nThanks", "creator": "chris.dow8@gmail.com", "attachment_id": null, "id": 171989, "time": "2014-01-01T10:02:46Z", "bug_id": 55943, "creation_time": "2014-01-01T10:02:46Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "If this change were to be implemented then it should be implemented the same way as the delegate flag since that controls a similar behaviour. I'd lean towards to boolean flag that simply disabled the code block (0.2) that checked the system class loader.\n\nNote that the system class loader is checked first to enforce the specification requirement that web applications must not be allowed to override Java SE platform classes. I'd hesitate before adding an option to disable this check because of the specification requirement.\n\nI wonder if there isn't a better solution to this issue. The system class loader might not be the best class loader to use here. It is really the bootstrap class loader that is required but you can't get a reference to that in some JREs - including Oracle's. The class loader hierarchy for an Oracle JVM is system->ext->bootstrap so using the ext class loader would work in that case.\n\nI'm thinking that rather than using the system class loader in this case the parent of the system class loader should be used (if it has one). That should both fix this issue and still enforce the specification requirement for not allowing the overriding of Java SE platformclasses.", "id": 171990, "time": "2014-01-01T11:24:58Z", "bug_id": 55943, "creation_time": "2014-01-01T11:24:58Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55943, "attachment_id": null, "text": "Switching to use a different classloader does sound a lot easier. Should I use the parent of the system classloader? It sounds like we really want the  bootstrap loader. Couldn't I recursively get the parent loaders, until I run out, to get the bootstrap loader?", "id": 172067, "time": "2014-01-03T16:28:50Z", "creator": "chris.dow8@gmail.com", "creation_time": "2014-01-03T16:28:50Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55943, "attachment_id": null, "text": "Doing that won't get you the bootstrap class loader in an Oracle JRE - you'll get the ext loader (which is good enough for this use case).\n\nFor the sake of clarity, my suggestion is start at the system class loader, recursively get the parent and use the last non-null value you find.", "id": 172213, "time": "2014-01-09T14:20:04Z", "creator": "markt@apache.org", "creation_time": "2014-01-09T14:20:04Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "\n\n*** This bug has been marked as a duplicate of bug 55945 ***", "id": 172359, "time": "2014-01-14T12:11:45Z", "bug_id": 55943, "creation_time": "2014-01-14T12:11:45Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 55943, "text": "Sorry - wrong bug.", "id": 172361, "time": "2014-01-14T12:12:18Z", "creator": "markt@apache.org", "creation_time": "2014-01-14T12:12:18Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "markt@apache.org", "text": "I've fixed this in 8.0.x for 8.0.0 and in 7.0.x for 7.0.51 onwards.\n\nAs I was cleaning up the use of the system class loader I also refactored the handling of parent==null which fell back to the system class loader to make it a little (probably not noticeably) faster.", "id": 172454, "time": "2014-01-17T15:37:25Z", "bug_id": 55943, "creation_time": "2014-01-17T15:37:25Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 55943, "text": "You beat me to it.  Thanks for all of your help.", "id": 172460, "time": "2014-01-17T16:42:12Z", "creator": "chris.dow8@gmail.com", "creation_time": "2014-01-17T16:42:12Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 55943, "attachment_id": null, "text": "Hi\n\nthis totaally breaks tomcat and tomee usage in embeded mode (+ has a lot of side effect in normal mode).\n\n1) the j2seClassLoader is not overridable in children classloader which is a pain since system was\n2) system is no more used\n3) it breaks compatibility\n\ncan you revert it and make it active just with a flag is asked?\n\nSide note: for a minor this is an important change which should have been showed a bit more (7.1 maybe)", "id": 173314, "time": "2014-02-18T09:56:45Z", "creator": "rmannibucau@gmail.com", "creation_time": "2014-02-18T09:56:45Z", "is_private": false}, {"count": 9, "attachment_id": null, "creator": "hifisoftware@gmail.com", "text": "This change breaks previous behaviour. We have an app that sets some static variable values and then launches embedded tomcat. Embeded tomcat has a war file that inspects values of these static variables. This no longer seems to work.\n\nWe want to use a newer version of tomcat in order to close any security issues. Is there is any way to add a flag to be able to revert to the old behaviour?", "id": 174388, "time": "2014-04-08T22:57:25Z", "bug_id": 55943, "creation_time": "2014-04-08T22:57:25Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 55943, "text": "This configurable. See this thread for details:\nhttp://markmail.org/thread/mid36pgk7nckp2rr", "id": 174390, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2014-04-09T00:27:37Z", "time": "2014-04-09T00:27:37Z", "is_private": false}, {"count": 11, "tags": [], "creator": "hifisoftware@gmail.com", "attachment_id": null, "id": 174430, "time": "2014-04-10T00:34:32Z", "bug_id": 55943, "creation_time": "2014-04-10T00:34:32Z", "is_private": false, "text": "Thank Mark for the link. I have trouble understanding how to configure to follow the old behaviour.\n\nAre you suggesting to override the WebappClassLoader class?"}, {"count": 12, "tags": [], "bug_id": 55943, "attachment_id": null, "text": "I was able to figure out the fix. When I added the following line to context.xml file, class loader behaviour was restored:\n<Loader delegate=\"true\"/>\n\nThanks", "id": 174455, "time": "2014-04-10T16:19:12Z", "creator": "hifisoftware@gmail.com", "creation_time": "2014-04-10T16:19:12Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 55943, "text": "(In reply to Mark Thomas from comment #6)\n\nThe essential bit of r1559153 / r1559134 is the following change:\n\n@@ -1186,9 +1200,9 @@ public class WebappClassLoader extends U\n         // (0.2) Try loading the class with the system class loader, to prevent\n         //       the webapp from overriding J2SE classes\n         String resourceName = binaryNameToPath(name, false);\n-        if (system.getResource(resourceName) != null) {\n+        if (j2seClassLoader.getResource(resourceName) != null) {\n             try {\n-                clazz = system.loadClass(name);\n+                clazz = j2seClassLoader.loadClass(name);\n\nThe old code used 'System' classloader - the JVM CLASSPATH.\nThe new code uses 'Bootstrap' classloader - the topmost non-null parent of System class loader - the one that provides Java SE core classes.\n\nAs such, class-loader-howto,html has to be corrected.\nThe classes lookup order in 7.0.50 and earlier is:\n\n *  Bootstrap classes of your JVM\n *  System class loader classes (described above)\n *  /WEB-INF/classes of your web application\n *  /WEB-INF/lib/*.jar of your web application\n *  Common class loader classes (described above)\n\nFor 8.0.0 and 7.0.52 and later it now is\n\n *  Bootstrap classes of your JVM\n *  /WEB-INF/classes of your web application\n *  /WEB-INF/lib/*.jar of your web application\n *  System class loader classes (described above)\n *  Common class loader classes (described above)\n\nI am REOPENING this issue to apply this documentation fix. It is worth noting this in migration guide.\n\nIt may be worth to add that if one configures <Loader delegate=\"true\"/>,\nthe above order becomes\n\n *  Bootstrap classes of your JVM\n *  System class loader classes (described above)\n *  Common class loader classes (described above)\n *  /WEB-INF/classes of your web application\n *  /WEB-INF/lib/*.jar of your web application\n\n\nOne use case when jar is added by Java to the system classloader is using -javaagent option.\nDocumentation:\nhttp://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html#package_description\n\nA thread:\nhttp://tomcat.markmail.org/thread/trd7yj46qajqra2v\nOf course, such jar files should not be in WEB-INF/lib directory.", "id": 174935, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2014-04-30T00:06:08Z", "time": "2014-04-30T00:06:08Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 55943, "attachment_id": null, "id": 177625, "time": "2014-09-08T13:23:21Z", "creator": "markt@apache.org", "creation_time": "2014-09-08T13:23:21Z", "is_private": false, "text": "Docs updated, note added to the 7.0.x changelog and th 7.0.x upgrade guide modified to add a section on notable changes with this as the first."}]
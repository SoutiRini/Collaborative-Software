[{"count": 0, "tags": [], "creator": "nils.winkler@fisglobal.com", "attachment_id": null, "id": 200993, "time": "2017-09-20T08:57:35Z", "bug_id": 61545, "creation_time": "2017-09-20T08:57:35Z", "is_private": false, "text": "I've found an issue with tomcat-jdbc and XA connections, where Tomcat Pool's ProxyConnection class does not handle invocations done using the javax.sql.PooledConnection interface.\n\nI'm seeing this with Tomcat v7.0.78, but the same code is used in Tomcat's 8.5 codebase. My use case involves the following setup:\n\n* Database: MySQL, PostgreSQL or Oracle - same issue on all three of them.\n* Tomcat Pool is used to define a context-specific XADataSource to be used by the web application.\n* The web application uses Spring for setup, and Jencks as an XA transaction manager.\n* Jencks uses tranql-connector under the hood (version 1.7 or 1.8 show the same behavior).\n\nThe issue can be seen from Tranql's code: http://grepcode.com/file/repo1.maven.org/maven2/org.tranql/tranql-connector/1.8/org/tranql/connector/jdbc/ManagedXAConnection.java?av=f#55\n\nHere, tranql gets an XAConnection from the pool (Tomcat Pool in this case) and tries to set a ConnectionEventListener on the connection:\n\n       this.xaConnection = xaConnection;\n         xaConnection.addConnectionEventListener(new ConnectionEventListener() {\n                     public void connectionClosed(ConnectionEvent event) {\n                 //we should be handling this independently\n             }\n \n                     public void connectionErrorOccurred(ConnectionEvent event) {\n                 Exception e = event.getSQLException();\n                 unfilteredConnectionError(e);\n             }\n         });\n\nThe xaConnection.addConnectionEventListener gets propagated through the JdbcInterceptor hierarchy in Tomcat Pool, all the way to the ProxyConnection.invoke() method: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l92\n\nSince the addConnectionEventListener method is defined on javax.sql.PooledConnection, none of the if-clauses in the ProxyConnection.invoke() method match and the code finally ends up in line 126, where the \"addConnectionEventListener\" is invoked on the java.sql.Connection instance, which of course does not implement the javax.sql.PooledConnection interface: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l126\n\nPooledConnection poolc = connection;\nif (poolc!=null) {\n    return method.invoke(poolc.getConnection(),args);\n} else {\n    throw new SQLException(\"Connection has already been closed.\");\n}\n\nThe error that is shown looks like this:\n\nCaused by: java.lang.IllegalArgumentException: object is not an instance of declaring class\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.tomcat.jdbc.pool.ProxyConnection.invoke(ProxyConnection.java:126)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:80)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.interceptor.AbstractCreateStatementInterceptor.invoke(AbstractCreateStatementInterceptor.java:80)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(ConnectionState.java:153)\n\tat org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:109)\n\tat org.apache.tomcat.jdbc.pool.TrapException.invoke(TrapException.java:41)\n\t... 111 more\n\nIn the case of Oracle, the \"poolc.getConnection()\" call returns an instance of oracle.jdbc.driver.LogicalConnection, which does not implement javax.sql.PooledConnection.\n\nSince javax.sql.XAConnection extends the javax.sql.PooledConnection interface, the reason for the error stems from the check in line 106 of ProxyConnection.java: http://svn.apache.org/viewvc/tomcat/trunk/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java?view=markup#l106\n\n} else if (method.getDeclaringClass().equals(XAConnection.class)) {\n    try {\n        return method.invoke(connection.getXAConnection(),args);\n    }catch (Throwable t) {\n\nThe code does the right thing (using the \"connection.getXAConnection()\" instance to invoke calls that are supposed to be done on an XAConnection, but it fails to account for the fact that javax.sql.XAConnection also extends the javax.sql.PooledConnection interface. Due to this incomplete check, the call to javax.sql.PooledConnection.addConnectionEventListener() is not detected here, but falls through to the call in line 126.\n\nThe code in line 106 should be changed to not only check for calls made to XAConnection, but also include methods defined in super-classes (or super-interfaces) of XAConnection:\n\n} else if (method.getDeclaringClass().isAssignableFrom(XAConnection.class)) {\n\n\nUsing \"isAssignableFrom\" instead of \"equals\" accomplishes that.\n\nSorry for the long description - let me know if there are any questions or require a unit test case and/or a patch for fixing this issue."}, {"count": 1, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 201068, "time": "2017-09-22T07:23:38Z", "bug_id": 61545, "creation_time": "2017-09-22T07:23:38Z", "is_private": false, "text": "Thanks for the report, detailed explanation and fix.\n\nFixed in:\n- trunk for 9.0.0 onwards\n- 8.5.x for 8.5.22 onwards\n- 8.0.x for 8.0.47 onwards\n- 7.0.x for 7.0.82 onwards"}, {"count": 2, "tags": [], "text": "Thanks for the quick fix! Happy to help!", "attachment_id": null, "bug_id": 61545, "id": 201069, "time": "2017-09-22T07:43:29Z", "creator": "nils.winkler@fisglobal.com", "creation_time": "2017-09-22T07:43:29Z", "is_private": false}]
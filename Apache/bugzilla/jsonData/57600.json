[{"count": 0, "tags": [], "creator": "voetsjoeba+asfbugs@gmail.com", "text": "The following was reproduced with the latest available versions of the 2.2 and 2.4 branch at the time of writing, i.e. 2.2.29 and 2.4.12, compiled from source on Ubuntu 14.04.\n\nAssuming a working configuration that uses SSL server authentication only, with the following certificate hierarchy:\n\n/home/vmuser/apache-rootcert-handshake/certs/ca/ca.pem\nSubject: CN=My CA\nIssuer:  CN=My CA\n\n/home/vmuser/apache-rootcert-handshake/certs/localhost.pem\nSubject: CN=localhost\nIssuer:  CN=My CA\n\nObserved behaviour:\nIf the issuing CA of the SSL server certificate happens to also be contained in either the file or directory specified by SSLCACertificateFile resp. SSLCACertificatePath, then this CA certificate gets included into the SSL handshake as part of the Certificate message that the server sends to present its server certificate chain.\n\nThe mere presence of the SSLCACertificate{File,Path} directive is sufficient to make this CA certificate appear in the handshake. It is not necessary to have SSL client authentication enabled, i.e. it will still do this regardless of whether you configure an SSLVerifyClient directive or not.\n\nIn concrete terms, if I configure:\n\nSSLSessionCacheTimeout 300 \nSSLProtocol All -SSLv2 -SSLv3\nSSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5\nSSLHonorCipherOrder On\nSSLCertificateFile \"/home/vmuser/apache-rootcert-handshake/certs/localhost.pem\"\nSSLCertificateKeyFile \"/home/vmuser/apache-rootcert-handshake/certs/localhost.key.pem\"\nSSLEngine On\n\nThen as expected, the Certificate message in the SSL handshake contains only a single certificate: the server certificate itself.\n\nHowever, by adding the following line to the otherwise identical config:\n\nSSLCACertificateFile \"/home/vmuser/apache-rootcert-handshake/certs/ca/ca.pem\"\n\nThe Certificate message in the SSL handshake now contains 2 certificates: the server certificate and its issuing CA, i.e. CN=My CA.\n\nExpected behaviour:\nThe SSLCACertificate{File,Path} directives should not affect the SSL Certificate handshake message used for transmitting the server certificate's chain -- especially not when client authentication is disabled, either explicitly or by absence of the SSLVerifyClient directive.\n\nIn fact, I would prefer to specifically avoid sending along the root CA of the server certificate or its chain. It's the client's job to validate the server certificate chain against a trust anchor from its own trust store; sending it along only enables potential client-side bugs to validate the certificate against the root CA that was sent along in the handshake rather than against its own trust store.", "id": 181161, "time": "2015-02-18T23:48:39Z", "bug_id": 57600, "creation_time": "2015-02-18T23:48:39Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 57600, "is_private": false, "id": 181321, "time": "2015-02-25T10:47:26Z", "creator": "asfbugz@velox.ch", "creation_time": "2015-02-25T10:47:26Z", "tags": [], "text": "(In reply to JDR from comment #0)\n> The mere presence of the SSLCACertificate{File,Path} directive is sufficient\n> to make this CA certificate appear in the handshake. It is not necessary to\n> have SSL client authentication enabled, i.e. it will still do this\n> regardless of whether you configure an SSLVerifyClient directive or not.\n\nThis is actually a \"feature\" of OpenSSL, though of somewhat questionable value, in particular when considering that self-signed trust anchors are also automatically sent in the handshake.\n\nSpecifically, it's ssl_add_cert_chain() in ssl_cert.c where this is happening, see the current version in the OpenSSL repository:\n\nhttps://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=ssl/ssl_cert.c;h=974259969f0585c489e89fa10774578b9b16cd12;hb=refs/heads/master#l1058\n\nFor two-tier CA hierarchies (root CA plus intermediate CA, which is the typical case nowadays), it isn't really an issue, since a properly configured vhost will either supply the intermediate CA via SSLCertificateChainFile or through SSLCertificateFile (preferred as of version 2.4.8).\n\nIn your case (server cert issued straight from the root CA, so no ICA cert involved), there isn't really a way to prevent the root cert from appearing in the handshake other than omitting SSLCACertificateFile/SSLCACertificatePath, however. We might \"fix\" it in mod_ssl by always disabling auto-chain-building magic, like so:\n\nIndex: modules/ssl/ssl_engine_init.c\n===================================================================\n--- modules/ssl/ssl_engine_init.c       (revision 1662189)\n+++ modules/ssl/ssl_engine_init.c       (working copy)\n@@ -614,6 +614,8 @@ static apr_status_t ssl_init_ctx_protocol(server_r\n         SSL_CTX_set_mode(ctx, SSL_MODE_RELEASE_BUFFERS);\n #endif\n\n+    SSL_CTX_set_mode(ctx, SSL_MODE_NO_AUTO_CHAIN);\n+\n     return APR_SUCCESS;\n }\n\n\nThis might have other side effects, though, and affect backwards compatibility, so I'm not sure if it's a) the right thing to do and b) worth the effort, since we're talking about a rather uncommon setup."}, {"count": 2, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "Doesn't SSLCADNRequest{File,Path} help here (say \"SSLCADNRequestFile /path/to/empty/file.pem\" or \"SSLCADNRequestPath /path/to/empty/dir\"), since this is meant to specify a different chain than SSLCACertificate{File,Path} for the Certificate message?", "id": 181324, "time": "2015-02-25T11:39:01Z", "bug_id": 57600, "creation_time": "2015-02-25T11:39:01Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57600, "attachment_id": null, "is_private": false, "id": 181325, "time": "2015-02-25T11:46:03Z", "creator": "asfbugz@velox.ch", "creation_time": "2015-02-25T11:46:03Z", "text": "(In reply to Yann Ylavic from comment #2)\n> Doesn't SSLCADNRequest{File,Path} help here\n\nNo, as it only applies to the Certificate*Request* message, not to the Certificate message (and CertificateRequest only comes into play when SSLVerifyClient isn't set to \"none\" [which is the default])."}, {"count": 4, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "(In reply to Kaspar Brand from comment #3)\n> No, as it only applies to the Certificate*Request* message, not to the\n> Certificate message (and CertificateRequest only comes into play when\n> SSLVerifyClient isn't set to \"none\" [which is the default]).\n\nHmm ok, maybe your trick from [1] with SSLCertificateChainFile then?\nThe directive is deprecated in 2.4.8+ though, but it used to override SSLCACertificate{File,Path} for the (expected) Certificate message in 2.2.\nI can't tell if it still works for this purpose in 2.4 (beside the startup warning).\nCould that be an (ugly) workaround?\n\n[1] https://bz.apache.org/bugzilla/show_bug.cgi?id=56073#c1", "id": 181327, "time": "2015-02-25T12:59:57Z", "bug_id": 57600, "creation_time": "2015-02-25T12:59:57Z", "is_private": false}, {"count": 5, "tags": [], "creator": "asfbugz@velox.ch", "attachment_id": null, "text": "(In reply to Yann Ylavic from comment #4)\n> Hmm ok, maybe your trick from [1] with SSLCertificateChainFile then?\n\nThe technique mentioned in bug 56073 comment 1 doesn't work either, I'm afraid. OpenSSL's auto-chainbuilding kicks whenever it sees a cert with no extra certs configured (see the code referenced in comment 1 above).\n\nNote that the RFC doesn't explicitly \"forbid\" sending the root in the handshake, it says \"... MAY be omitted from the chain, under the assumption that the remote end must already possess it in order to validate it in any case\". Lobbying with the OpenSSL guys for making SSL_MODE_NO_AUTO_CHAIN configurable via SSL_CONF (i.e. via \"SSLOpenSSLConfCmd Options ...\") would seem like the best way to escape further tweaking in mod_ssl.", "id": 181335, "time": "2015-02-25T15:19:15Z", "bug_id": 57600, "creation_time": "2015-02-25T15:19:15Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 57600, "is_private": false, "id": 181341, "time": "2015-02-25T19:15:17Z", "creator": "voetsjoeba+asfbugs@gmail.com", "creation_time": "2015-02-25T19:15:17Z", "tags": [], "text": "(In reply to Kaspar Brand from comment #5)\n> Lobbying with the OpenSSL guys for making SSL_MODE_NO_AUTO_CHAIN\n> configurable via SSL_CONF (i.e. via \"SSLOpenSSLConfCmd Options ...\") would\n> seem like the best way to escape further tweaking in mod_ssl.\n\nAgreed, SSLOpenSSLConfCmd sounds like the ideal place for this kind of configuration details, and certainly preferable over tweaking the existing mod_ssl code base. I'll consider taking the case up with the OpenSSL folks, thanks.\n\n(In reply to Kaspar Brand from comment #1)\n> This is actually a \"feature\" of OpenSSL\n\nThanks for your insight on this -- actually very helpful for me since it gives me an additional option to consider as a potential alternative (though of course not before gaining a full understanding of the implications). Much appreciated."}, {"count": 7, "tags": [], "creator": "asfbugz@velox.ch", "text": "Closing, as there seems to be agreement that it would better be fixed (i.e., made configurable) in OpenSSL.", "id": 182629, "time": "2015-04-26T08:27:39Z", "bug_id": 57600, "creation_time": "2015-04-26T08:27:39Z", "is_private": false, "attachment_id": null}]
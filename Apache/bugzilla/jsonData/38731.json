[{"count": 0, "tags": [], "creator": "sevcenko@vc.cvut.cz", "attachment_id": null, "text": "I have a few suggestions how to improve the PDFGraphics2D class to be more \nconforming to the java.awt.Graphics2D interface.\n\nI use the FOP library for direct generation of PDF from a Java application \n(i.e. I do not use FOP for XML to PDF translation), but I think that the \nsuggestions might be relevant to the FO processing as well.\n\nI found the following problems in the class implementation:\n\n1) When rendering text, the class uses Font.getSize instead of Font.getSize2D. \nThis means that the text scales only with integer resolution, which results in \nbig errors when rendering text with non-integer size.\n\n2) Text rendering ignores Font's transformation matrix. The matrix is useful \ne.g. for generating slanted or narrowed/widened text. Enabling it is very easy \n(see below).\n\n3) For some reason, drawImage(Image, int, int, ImageObserver) translates the \nwhite opaque pixels to transparent. I suggest not to set white color as \ntransparent, but to change fully transparent pixels to some less usual color \n(I used 255,255,254), and setting this color as transparent.\n\n4) I also changed the text rendering to automatically convert texts \ncontaining \"unsupported chars\" (chars that do not display in PDF correctly \nusing default fonts) to curves. But this issue you probably solve elsewhere.\n\nIt would be also nice to have the PDFGraphics2D.currentStream field protected, \nso that I can fix these problems by subclassing the PDFGraphics2D and override \nthe problematic methods instead of rebuilding the original FOP jar file.\n\nBelow see the commented diff of the PDFGraphics2D.java file (# precedes \ncomments added to the diff) The diffis made against fop-0.20.5 source \ndistribution. (unfortunately the line numbers may be slightly incorrect as I \nreformated the source code)\n\nThe diff:\n----------------------------------------------------------------\n71a72\n> import java.awt.font.GlyphVector;\n148c149\n<     protected int currentFontSize;\n---\n>     protected float currentFontSize;\n\n# in public boolean drawImage(Image, int, int, ImageObserver)\n\n# change fully transparent pixels (alpha = 0) to (255,255,254)\n360c361,365\n<                         if (alpha != 255) {\n---\n>                         if (alpha == 0) {\n>                             result[count++] = (byte) (0xFF);\n>                             result[count++] = (byte) (0xFF);\n>                             result[count++] = (byte) (0xFE);\n>                         } else if (alpha != 255) {\n\n# in class TempImage\n\n#change transparent color to our special color\n429c434\n<         PDFColor transparent = new PDFColor(255, 255, 255);\n---\n>         PDFColor transparent = new PDFColor(255, 255, 254);\n\n# a method that draws text as curves\n923a929,933\n>     private void drawStringAsGlyphs(String s, float x, float y) {\n>         GlyphVector gv = getFont().createGlyphVector(getFontRenderContext(), \ns);\n>         fill(gv.getOutline(x, y));\n>     }\n> \n\n# in public void drawString(String, float, float)\n\n# draw unsupported text as string\n949c959,962\n<         // System.out.println(\"drawString(String)\");\n---\n>         if (!isSupportedString(s)) {\n>             drawStringAsGlyphs(s, x, y);\n>             return;\n>         }\n\n# save font's transform\n950a964\n>         AffineTransform fontTransform = null;\n952a967\n>             fontTransform = gFont.getTransform();\n\n#use fractional height instead of integer height\n957c972\n<             int siz = gFont.getSize();\n---\n>             float siz = gFont.getSize2D();\n962c977\n<                         weight, siz * 1000, 0);\n---\n>                         weight, (int) (siz * 1000 + 0.5), 0);\n971c986\n<         int size;\n---\n>         float size;\n973c988\n<         size = fontState.getFontSize() / 1000;\n---\n>         size = fontState.getFontSize() / 1000f;\n\n# apply font transform if neccessary\n1019a1035,1037\n>         if (fontTransform != null && !fontTransform.isIdentity())\n>             trans.concatenate(fontTransform);\n> \n\n# new helper methods determining whether string is \"supported\"\n\n1070a1089,1115\n>     private boolean isSupportedString(String s) {\n>         for (int i = 0; i < s.length(); ++i)\n>             if (!isSupportedChar(s.charAt(i)))\n>                 return false;\n>         return true;\n>     }\n> \n>     private boolean isSupportedChar(char c) {\n>         if (c >= 0x20 && c < 0xFF)\n>             return true;\n>         return (\"\\u20AC\\u201A\\u0192\\u201E\\u2026\\u2020\\u2021\\u02C6\\u2030\n\\u0160\"\n>                 + \"\\u2039\\u004F\\u017D\\u2018\\u2019\\u201C\\u201D\\u2022\\u2013\n\\u2014\"\n>                 + \"\\u02DC\\u2122\\u0161\\u203A\\u006F\\u017E\\u0178\\u00A1\\u00A2\n\\u00A3\"\n>                 + \"\\u00A4\\u00A5\\u00A6\\u00A7\\u00A8\\u00A9\n\\u00AA\\u00AB\\u00AC\\u002D\"\n>                 + \"\\u00AE\\u00AF\\u00B0\\u00B1\\u00B2\\u00B3\\u00B4\\u03BC\\u00B6\n\\u00B7\"\n>                 + \"\\u00B8\\u00B9\\u00BA\\u00BB\\u00BC\\u00BD\\u00BE\\u00BF\\u00C0\n\\u00C1\"\n>                 + \"\\u00C2\\u00C3\\u00C4\\u00C5\\u00C6\\u00C7\\u00C8\\u00C9\n\\u00CA\\u00CB\"\n>                 + \"\\u00CC\\u00CD\\u00CE\\u00CF\\u00D0\\u00D1\\u00D2\\u00D3\\u00D4\n\\u00D5\"\n>                 + \"\\u00D6\\u00D7\\u00D8\\u00D9\n\\u00DA\\u00DB\\u00DC\\u00DD\\u00DE\\u00DF\"\n>                 + \"\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4\\u00E5\\u00E6\\u00E7\\u00E8\n\\u00E9\"\n>                 + \"\\u00EA\\u00EB\\u00EC\\u00ED\\u00EE\\u00EF\\u00F0\\u00F1\\u00F2\n\\u00F3\"\n>                 + \"\\u00F4\\u00F5\\u00F6\\u00F7\\u00F8\\u00F9\n\\u00FA\\u00FB\\u00FC\\u00FD\"\n>                 + \"\\u00FE\\u00FF\\u004F\\u006F\\u0160\\u0161\\u0178\n\\u017D\\u017E\\u0192\"\n>                 + \"\\u2013\\u2014\\u2018\\u2019\\u201A\\u201C\\u201D\\u201E\\u2020\n\\u2021\"\n>                 + \"\\u2022\\u2026\\u2030\\u2039\\u203A\\u20AC\\u2122\").indexOf(c) !\n= -1;\n>     }\n> \n1367a1413\n> \n1371a1418,1425\n> \n>         // needed for compiling under jdk1.4\n> \n>         public java.awt.image.VolatileImage createCompatibleVolatileImage(\n>                 int width, int height, int transparency) {\n>             return null;\n>         }\n>", "id": 85997, "time": "2006-02-21T10:14:40Z", "bug_id": 38731, "creation_time": "2006-02-21T10:14:40Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 38731, "attachment_id": 17756, "id": 85998, "time": "2006-02-21T10:20:03Z", "creator": "sevcenko@vc.cvut.cz", "creation_time": "2006-02-21T10:20:03Z", "is_private": false, "text": "Created attachment 17756\nthe new suggested implementation of PDFGraphics2D.java"}, {"count": 2, "tags": [], "bug_id": 38731, "text": "I'm happy to see that the PDFGraphics2D is actually useful outside of FOP and\nBatik. And thanks for your suggestions to improve the code. However, I would\nlike to encourage you to download the latest FOP source code (FOP Trunk) from\nSubversion:\nhttp://xmlgraphics.apache.org/fop/download.html\nSubversion checkout URL: http://svn.apache.org/repos/asf/xmlgraphics/fop/trunk/\n\nThere have been major improvements in that area although most of what you\nsuggest hasn't been changed. Please apply the changes to FOP Trunk and attach a\npatch generated by the \"svn diff\" command to this Bugzilla issue. We will then\nreview your changes and integrate them. Please note that the FOP 0.20.5\ndevelopment line has been frozen.", "id": 85999, "time": "2006-02-21T10:25:08Z", "creator": "jeremias@apache.org", "creation_time": "2006-02-21T10:25:08Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 38731, "text": "Created attachment 17757\nPDFGraphics2D patched w.r.t. fop-0.91\n\nI hope that the patch file is what you want, I'm not familiar with the\nsubversion system, I generated it using TortoiseSVN.\n\nFew comments, as things changed quite a bit since my last post:\n\n1) the code for generating string output mysteriously changed since last time,\nthe translation of text was moved from graphic's global transform to text's\nlocal transform, so it was more difficult to combine with font's transform, but\nI did it anyway, so hopefully it works. I tested it on two typical cases:\nnarrowed text and slanted text. Please note that I did not change drawString\nwith AttributedCharacterIterator as I do not use it, but the change is\nanalogous. Suprisingly this second method uses the \"old\" way of combining\ngraphic and text transforms, i.e. the text translation is combined with graphic\ntransform, and the text uses simple Y inverse transform\n\n2) the transparency handling changed a lot, but the bug is still there. It\nseems to me that it is sufficient to comment out forgotten\nBitmapImage.setTransparent line. The transparency seems to be correctly handled\nby a companion mask stream added to the primary bitmap stream.", "id": 86011, "time": "2006-02-21T16:23:47Z", "creator": "sevcenko@vc.cvut.cz", "creation_time": "2006-02-21T16:23:47Z", "is_private": false, "attachment_id": 17757}, {"count": 4, "tags": [], "bug_id": 38731, "attachment_id": 17758, "id": 86012, "time": "2006-02-21T16:36:08Z", "creator": "sevcenko@vc.cvut.cz", "creation_time": "2006-02-21T16:36:08Z", "is_private": false, "text": "Created attachment 17758\na sample file for handling missing glyphs\n\nBtw I moved the stuff for text->curve replacement to a subclass of\nPDFGraphics2D, so I attach it for those who are interested; but I suspect it\nwon't be very useful of the FOP library itself :-|"}, {"count": 5, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "Patch applied: http://svn.apache.org/viewcvs?rev=386954&view=rev\n\nThank you, Michal, for this useful patch. Concerning your special code about\nstroking text that contains unsupported characters: This would actually be\nuseful but not in the way you've implemented it. Our font subsystem has methods\nto tell you which characters are available from a font (Font.hasChar(char)). So,\nyou can do this in a generic way and don't have to hard-code the characters.", "id": 86998, "time": "2006-03-19T11:19:00Z", "bug_id": 38731, "creation_time": "2006-03-19T11:19:00Z", "is_private": false}, {"count": 6, "tags": [], "creator": "gadams@apache.org", "attachment_id": null, "text": "batch transition pre-FOP1.0 resolved+fixed bugs to closed+fixed", "id": 155581, "time": "2012-04-01T06:28:59Z", "bug_id": 38731, "creation_time": "2012-04-01T06:28:59Z", "is_private": false}]
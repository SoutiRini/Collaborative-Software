[{"count": 0, "tags": [], "bug_id": 10683, "attachment_id": null, "text": "Usually I use normal jsp syntax but I now tried out the xml compliant syntax \nform and found three peculiarities. My estimation is that these are due to bugs \nwithin jasper but since I am not an expert on the xml-like jsp form, I'm \ninsecure. Well, I would like to post a little example that depicts the three \nthings that might be bugs. Within this example I also explain each bug and give \nreference to the paragraphs within the JSP 1.2 specification if I can.\n\nThe three issues I have are:\na) treatment of xml comments\nb) treatment of mixed element content when taglib elements are involved\nc) attribute expression evaluation \n\nI am pretty sure that b) is a bug. a) is a low prio thing and c) is a blocker \nfor me.\n\nBut see the following example for details.\n(If you also want to run it, you will need to have the EL-based JSTL core \ntaglib installed.)\n\n<jsp:root \nxmlns:jsp=\"http://java.sun.com/JSP/Page\"\nxmlns:c=\"http://java.sun.com/jstl/core\" >\n<html>\n<body>\n  <ul>\n    <li>\n      Request time attribute expressions don't seem to work \n      in jsp documents, or maybe I'm doing sth. wrong. \n      According to the JSP spec. paragraph 5.3.11, the quoting \n      convention used in jsp documents is as follows:\n      <a href=\"%= response.encodeURL('thispage.jsp') %\">\n        However, the expression inside the href attribute\n        is not being evaluated.\n      </a>\n      <br />\n    </li>\n    <li>\n      If an xml element contains mixed content, e.g. plain text \n      and other xml elements, then the resulting output is not \n      correct in every case. If plain text is directly preceding \n      a taglib element, then the taglib output is written to the \n      jsp-outputstream prior to the plain text.\n      For example, note that the following JSTL tag should deliver \n      its output behind this text here, but within the webpage the \n      taglib output will appear first.\n      <c:out value=\"THIS TEXT SHOULD NOT APPEAR FIRST.\" /> \n      <br />\n      If however the plain text preceding a taglib element is \n      interleaved with other xml elements, as it is done here, then \n      everything works fine again.\n      <br />\n      <c:out value=\"TAGLIB TEXT\" />\n      See ? (And plain text behind a taglib element is also save.)\n      <br />\n    </li>\n    <li>\n      In the resulting page, the javascript at the end of this page\n      is missing. The comment around the javascript part is needed \n      by some browsers. I could place the body of the \n      script element into a CDATA section but I believe \n      that it is a bug to erase xml comments from the \n      source page. Also, if I would just place a jsp:text \n      element arount the javascript, this would also \n      erase the xml comment. Unfortunately the JSP spec \n      doesn't explicitly mention the treatment of xml comments \n      and whether they should be erased or not.\n      In addition to that it is a pity that the SAX API's \n      don't really report the occurence of xml comments. \n      Only the org.xml.sax.ext.LexicalHelper does, but it \n      is an optional extension to SAX2 and can only be plugged \n      in as an attribute to the parser. ;(\n    </li>\n  </ul>\n</body>\n<script language=\"javascript\">\n<!--\n\nfunction veryImportantFunction()\n{\nalert(\"An xml-comment is an xml-comment and may not be skipped.\");\n}\n\n//-->\n</script>\n</html>\n</jsp:root>", "id": 19317, "time": "2002-07-11T12:50:17Z", "creator": "wtff@freenet.de", "creation_time": "2002-07-11T12:50:17Z", "is_private": false}, {"count": 1, "tags": [], "creator": "Andreas.Junghans@fh-karlsruhe.de", "text": "I've had similiar problems, and this is what I found out and did:\n\na) treatment of xml comments\n\nIt's not explicitly mentioned in the spec how to treat comments. I think this \nis a spec bug. Also, JSP 2.0 public draft shows no signs of clearing that up. \nMy workaround was to split all pages in two. One of them generates all \nJavaScript (in non-XML syntax) and is included from the other (in XML syntax). \nUgly, but working.\n\nb) treatment of mixed element content when taglib elements are involved\n\nCan't say anything about that, sorry.\n\nc) attribute expression evaluation\n\nThis is a very disturbing spec bug IMHO. Attributes of the form \"%= ... %\" are \nonly evaluated in standard or custom actions, but _not_ in ordinary XML tags \n(see sections JSP.2.13.1 and JSP.5.2.9). This means that there is *no way* to \ndynamically create the value of XML tag attributes using the XML syntax!\n\nThere are mainly two workarounds:\n\n1.) Create custom tags to replace all tags the attribute values of which must \nbe dynamically generated (very painful).\n2.) Parse the attributes yourself (slightly less painful than 1).\n\nIn my case, I created a custom tag that can wrap around any body content and \nparses the \"%= ... %\" syntax. Of course this leads to new problems like slower \nperformance, escaping issues, limited supported syntax inside \"%= ... %\" etc.\n\nI've already sent a comment about this to jsp-spec-comments@eng.sun.com, but \nthat seemed to have been routed to /dev/null :-(  Also, JSP 2.0 public draft \ndoesn't seem to care any more for this than 1.2. _Maybe_ you can use the new \nExpression Language (EL) to generate XML attribute values, but the way it's \nexpressed in the spec leaves plenty of room for interpretation (sections \nJSP.2.2 and JSP.2.3).", "id": 19377, "time": "2002-07-12T08:33:45Z", "bug_id": 10683, "creation_time": "2002-07-12T08:33:45Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "a) SAX APIs don't support XML comments, and JSP spec does not require\n   them to be preserved.\n\n\nb) Fail to reproduce. When I access your page, I get this:\n\nRequest time attribute expressions don't seem to work in jsp documents, or maybe\nI'm doing sth. wrong. According to the JSP spec. paragraph 5.3.11,\n     the quoting convention used in jsp documents is as follows: However, the\nexpression inside the href attribute is not being evaluated. \n     If an xml element contains mixed content, e.g. plain text and other xml\nelements, then the resulting output is not correct in every case. If plain text\n     is directly preceding a taglib element, then the taglib output is written\nto the jsp-outputstream prior to the plain text. For example, note that the\n     following JSTL tag should deliver its output behind this text here, but\nwithin the webpage the taglib output will appear first. THIS TEXT SHOULD NOT\n     APPEAR FIRST. If however the plain text preceding a taglib element is\ninterleaved with other xml elements, as it is done here, then everything works\n     fine again. TAGLIB TEXT See ? (And plain text behind a taglib element is\nalso save.) \n     In the resulting page, the javascript at the end of this page is missing.\nThe comment around the javascript part is needed by some browsers. I could\n     place the body of the script element into a CDATA section but I believe\nthat it is a bug to erase xml comments from the source page. Also, if I would\n     just place a jsp:text element arount the javascript, this would also erase\nthe xml comment. Unfortunately the JSP spec doesn't explicitly mention the\n     treatment of xml comments and whether they should be erased or not. In\naddition to that it is a pity that the SAX API's don't really report the\n     occurence of xml comments. Only the org.xml.sax.ext.LexicalHelper does, but\nit is an optional extension to SAX2 and can only be plugged in as an\n     attribute to the parser. ;( \n\n\nc) Request-time attributes are not supported for \"ordinary\" XML\n   elements (XML elements that are neither standard nor custom actions)\n   in JSP documents (JSP pages in XML syntax).\n\n   Section JSP.5.3.11, which you are referring to, deals with how\n   request-time attributes in a JSP page in JSP syntax get mapped to the\n   corresponding XML view of the page.\n\n\n", "is_private": false, "id": 19463, "creator": "jan.luehe@sun.com", "time": "2002-07-12T23:59:50Z", "bug_id": 10683, "creation_time": "2002-07-12T23:59:50Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "Andreas.Junghans@fh-karlsruhe.de", "text": "*** Bug 13033 has been marked as a duplicate of this bug. ***", "id": 23817, "time": "2002-10-03T10:10:30Z", "bug_id": 10683, "creation_time": "2002-10-03T10:10:30Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "bug_id": 10683, "text": "*** Bug 13223 has been marked as a duplicate of this bug. ***", "id": 23819, "time": "2002-10-03T10:18:59Z", "creator": "Andreas.Junghans@fh-karlsruhe.de", "creation_time": "2002-10-03T10:18:59Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "text": "Created attachment 27969\nPatch for mod_ssl to add NPN hooks\n\nOpenSSL 1.0.1 added support for TLS Next Protocol Negotiation (NPN) [1], a feature which allows client and server to negotiate what protocol should be used over the secure connection.  I propose adding hooks into mod_ssl to allow other modules to access this feature.  In particular, this would open the door for a module that would support SPDY [2], a performance-improving protocol that is now supported by (at least) Google Chrome, Amazon Silk, Firefox (targeting FF11), and Strangeloop, but not yet by Apache httpd.  (Not coincidentally, I am working on implementing such a module.)\n\nThe changes needed to mod_ssl are pretty simple; I have a small patch here that adds these hooks.  The patch attached below was made against the httpd-2.2.x branch, but of course I would be happy to modify the patch as necessary for other version(s).\n\n[1] NPN is described here: http://technotes.googlecode.com/git/nextprotoneg.html\n[2] SPDY is described here: http://dev.chromium.org/spdy/spdy-protocol", "bug_id": 52210, "is_private": false, "id": 151630, "time": "2011-11-18T19:03:51Z", "creator": "mdsteele@google.com", "creation_time": "2011-11-18T19:03:51Z", "tags": [], "attachment_id": 27969}, {"text": "Issues:\n\n* Patch includes a few inline data declarations that won't compile with a strict c89 compiler.\n* I'd suggest adding a log level debug with the negotiated protocol.", "tags": [], "bug_id": 52210, "is_private": false, "count": 1, "id": 154854, "time": "2012-03-12T23:12:06Z", "creator": "chip@force-elite.com", "creation_time": "2012-03-12T23:12:06Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 52210, "text": "Also, yes, would prefer a patch rebased against the current trunk -- all new features land there first.", "id": 154855, "time": "2012-03-12T23:15:56Z", "creator": "chip@force-elite.com", "creation_time": "2012-03-12T23:15:56Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "Created attachment 28486\nUpdated patch for mod_ssl to add NPN hooks\n\nThanks for the comments; here's an updated patch.  I've rebased the patch against trunk, and I believe I've fixed the C89 issues (tested with gcc -std=c89 -pedantic).  I've also added a debug-level logging message for the negotiated protocol, as suggested.", "bug_id": 52210, "is_private": false, "id": 155123, "time": "2012-03-20T16:06:29Z", "creator": "mdsteele@google.com", "creation_time": "2012-03-20T16:06:29Z", "tags": [], "attachment_id": 28486}, {"count": 4, "tags": [], "bug_id": 52210, "attachment_id": 28513, "text": "Created attachment 28513\nUpdated patch for mod_ssl to add NPN hooks\n\nSome minor tweaks to the patch to better conform to surrounding code style.", "id": 155326, "time": "2012-03-27T20:55:18Z", "creator": "mdsteele@google.com", "creation_time": "2012-03-27T20:55:18Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 52210, "text": "Patch looks fine to me, though this:\n\n+        const char *next_proto = NULL;\n+        unsigned next_proto_len = 0;\n+        SSL_get0_next_proto_negotiated(\n+            inctx->ssl, (const unsigned char**)&next_proto, &next_proto_len);\n\nis going to trip up gcc strict-aliasing tests, it should pass next_proto without a cast.", "id": 157775, "time": "2012-04-10T14:46:02Z", "creator": "jorton@redhat.com", "creation_time": "2012-04-10T14:46:02Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 52210, "text": "Thanks for taking a look.  I confess that I am not terribly familiar with the strict-aliasing rules, so I am not sure how best to avoid the problem here.  The issue is that SSL_get0_next_proto_negotiated requires an unsigned char**, but apr_pstrmemdup and ssl_run_npn_proto_negotiated_hook each require a (plain, not unsigned) char*.  If I have no casts at all, the compiler complains.  Is the aliasing issue avoided if I cast to char* when I call apr_pstrmemdup and ssl_run_npn_proto_negotiated_hook, rather than casting to unsigned char** when I call SSL_get0_next_proto_negotiated, as I do now?  If so, I'll fix that right away; if not, what should I do instead?", "id": 157779, "attachment_id": null, "creator": "mdsteele@google.com", "creation_time": "2012-04-10T15:28:27Z", "time": "2012-04-10T15:28:27Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 52210, "attachment_id": null, "is_private": false, "id": 157967, "time": "2012-04-11T22:43:00Z", "creator": "andersk@mit.edu", "creation_time": "2012-04-11T22:43:00Z", "text": "It\u2019s not safe to const char ** to const unsigned char **, but it is safe to cast const unsigned char * to const char * (because a specific exemption in the strict aliasing rules allows any type of object to be accessed through a pointer to a character type).  So do this instead:\n\nconst unsigned char *next_proto = NULL;\nSSL_get0_next_proto_negotiated(inctx->ssl, &next_proto, &next_proto_len);\nssl_run_npn_proto_negotiated_hook(f->c, (const char *)next_proto, next_proto_len);"}, {"count": 8, "text": "Created attachment 28588\nUpdated patch for mod_ssl to add NPN hooks\n\nAha, that is good to know, thanks.  I've updated the patch as you suggested.", "bug_id": 52210, "is_private": false, "id": 157969, "time": "2012-04-11T23:04:13Z", "creator": "mdsteele@google.com", "creation_time": "2012-04-11T23:04:13Z", "tags": [], "attachment_id": 28588}, {"count": 9, "tags": [], "bug_id": 52210, "attachment_id": null, "is_private": false, "id": 158708, "time": "2012-05-01T13:30:13Z", "creator": "jorton@redhat.com", "creation_time": "2012-05-01T13:30:13Z", "text": "Added in r1332643 - I made a few tweaks:\n\n1) added HAVE_TLS_NPN in ssl_private.h with the OpenSSL version logic\n\n2) tweaked the hook name to use \"modssl_\" rather than \"ssl_\" to avoid further polluting the \"ssl_\" namespace\n\nPlease shout if I broke something, I only tested compilation.  Thanks a lot for the contribution!"}, {"count": 10, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "is_private": false, "id": 169738, "time": "2013-08-27T16:53:22Z", "bug_id": 52210, "creation_time": "2013-08-27T16:53:22Z", "text": "Re-opening; this is only in trunk."}, {"count": 11, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "This is currently behing discussed in https://www.mail-archive.com/dev@httpd.apache.org/msg59893.html", "id": 174945, "time": "2014-04-30T13:31:15Z", "bug_id": 52210, "creation_time": "2014-04-30T13:31:15Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 52210, "text": "(In reply to Yann Ylavic from comment #11)\n> This is currently behing discussed in\n> https://www.mail-archive.com/dev@httpd.apache.org/msg59893.html\n\nthis discussion is dead and it does not take into account that npn is a generic mechanism to be able to switch to alternative protocols not neccessarily limited to be used for spdy support.\n\nAlso this is part of openssl 1.0.1 - mod_ssl just needs to turn it on.\n\nAnother aspect why we really want to have NPN support in mod_ssl is: firefox and chrome currently use the SSL optimization \"false start\" only if the server also supports NPN. So with NPN support in mod_ssl we would get nice the side effect to remove one roundtrip time for ssl handshakes for those clients.", "id": 179886, "time": "2014-12-20T00:06:30Z", "creator": "bjoern@j3e.de", "creation_time": "2014-12-20T00:06:30Z", "is_private": false, "attachment_id": null}, {"count": 13, "text": "NPN has been superseded by ALPN -\n  https://www.imperialviolet.org/2013/03/20/alpn.html", "bug_id": 52210, "is_private": false, "id": 179891, "time": "2014-12-20T08:49:44Z", "creator": "mnot@mnot.net", "creation_time": "2014-12-20T08:49:44Z", "tags": [], "attachment_id": null}, {"count": 14, "tags": [], "creator": "stefan@eissing.org", "text": "With OpenSSL 1.0.1 supporting NPN by default, it would be really great to get this patch into the next 2.4 release. Even though NPN will be replaced by ALPN (one day), there are protocols like SPDY and HTTP2 that will need to support both for some time to allow migration.\n\nI cannot speak for the openssl project, but current 1.0.1 release has no ALPN support and the 1.0.2 with support is in beta. To add ALPN support to mod_ssl, it seems to make send to delay that until openssl has a production release that supports it.", "id": 180229, "attachment_id": null, "bug_id": 52210, "creation_time": "2015-01-08T15:51:46Z", "time": "2015-01-08T15:51:46Z", "is_private": false}, {"count": 15, "tags": [], "creator": "mnot@mnot.net", "attachment_id": null, "is_private": false, "id": 180230, "time": "2015-01-08T15:55:18Z", "bug_id": 52210, "creation_time": "2015-01-08T15:55:18Z", "text": "Stefan,\n\nHTTP/2 uses ALPN, not NPN; the only reason some implementations use NPN is for testing while ALPN filtered its way into OpenSSL and other TLS implementations. \n\nOpenSSL supports ALPN as of 1.0.2. Browsers are even now starting to drop NPN in their negotiation, because doing both has caused interop problems. NPN is a dead end, as very explicitly stated by AGL and others."}, {"count": 16, "text": "Mark,\n\nI understand. However OpenSSL 1.0.2 is currently in beta (although according to R$ in production soon) and 1.0.1 does not have ALPN support. I also doubt, giving the history, that everyone will deploy 1.0.2 immediately.\n\nSo, currently we have the situation where you cannot drop a mod_spdy into a 2.4 server without also replacing mod_ssl. The patch for NPN is in httpd/trunk, but not in 2.4. \n\nSo, everyone wanting to do ALPN/NPN with a httpd 2.4 needs to replace mod_ssl which is not a good idea, it seems.\n\nI today have made a clean patch for the NPN changes in trunk to be applicable to 2.4. I want to enhance this with a second patch that uses ALPN instead of NPN of the underlying openssl supports it (compile time).\n\nI think this will allow for an easier transition to newer openssl and introduction of ALPN than having everyone write her own mod_ssl version.\n\nMy question to httpd developers would be if they want to change the \"npn\" part of the callback function names to \"alpn\" - which is worth it imho. I will put this on the mailing list for discussion.", "bug_id": 52210, "is_private": false, "id": 180242, "time": "2015-01-09T13:40:54Z", "creator": "stefan@eissing.org", "creation_time": "2015-01-09T13:40:54Z", "tags": [], "attachment_id": null}, {"count": 17, "tags": [], "creator": "stefan@eissing.org", "text": "Created attachment 32381\n2.4.x patch for adding ALPN+NPN support\n\nThis patch adds ALPN support to 2.4.x, building on the previous patch attached to this ticket.", "id": 180393, "attachment_id": 32381, "bug_id": 52210, "creation_time": "2015-01-19T16:53:42Z", "time": "2015-01-19T16:53:42Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 52210, "text": "The ALPN support changes the public functions from the previous patch:\n- renames from \"npn\" to \"alpn\"\n- adds an optional parameter to the advertise/propose function with the protocol names supplied by the client\n\nThe patch keeps the NPN support, if the underlying openssl does not support ALPN (version >= 1.0.2).\n\nThe patch introduces a new mod_ssl config directive: SSLAlpnPreference which is a list of protocol names that determine which protocol gets chosen first, if supported by the client.\n\nA patch for httpd/trunk can be made available on request. A patch of mod_spdy to use the new functions also. Let me know.", "id": 180394, "attachment_id": null, "creator": "stefan@eissing.org", "creation_time": "2015-01-19T16:58:05Z", "time": "2015-01-19T16:58:05Z", "is_private": false}, {"count": 19, "tags": [], "creator": "stefan@eissing.org", "is_private": false, "id": 180587, "attachment_id": 32399, "bug_id": 52210, "creation_time": "2015-01-27T09:28:12Z", "time": "2015-01-27T09:28:12Z", "text": "Created attachment 32399\nPatch update to always announce http/1.1 over NPN\n\nAs requested in https://issues.apache.org/bugzilla/show_bug.cgi?id=56028 I updated my patch to always announce \"http/1.1\" over NPN (ALPN already did it).\n\nThis means that when no hooks are installed, mod_ssl will always advertise http/1.1 to clients on NPN/ALPN."}, {"count": 20, "tags": [], "bug_id": 52210, "attachment_id": null, "text": "@Stefan Eissing\nIn your patch, I think you have a bug, why do you have HAVE_ALPN_NPN and HAVE_TLS_ALPN?\nOnly HAVE_TLS_ALPN is defined.", "id": 180910, "time": "2015-02-10T16:27:39Z", "creator": "manus@manusfreedom.com", "creation_time": "2015-02-10T16:27:39Z", "is_private": false}, {"text": "Hi, I don't understand if the patch:\n\nPatch update to always announce http/1.1 over NPN (21.41 KB, patch) \n2015-01-27 09:28 UTC, Stefan Eissing\n\napplies to httpd-2.2 (more specifically to 2.2.29).\n\n\n\nThe patch starts with these lines:\ndiff -ru gen/httpd-2.4.x/modules/ssl/mod_ssl.c modules/ssl/mod_ssl.c\n--- gen/httpd-2.4.x/modules/ssl/mod_ssl.c\t2015-01-19 16:52:30.000000000 +0100\nWhat do I have to think ? it's for httpd-2.4.x ? If yes than what patch is for httpd-2.2 ?", "tags": [], "bug_id": 52210, "is_private": false, "count": 21, "id": 180945, "time": "2015-02-11T09:40:06Z", "creator": "adrhc@yahoo.com", "creation_time": "2015-02-11T09:40:06Z", "attachment_id": null}, {"count": 22, "tags": [], "bug_id": 52210, "text": "The original patch is from 2011. I think nowadays 2.4 is the target for this. It certainly would be possible to downport it.\n\nI updated the ticket to specify 2.4 as target.", "id": 180946, "time": "2015-02-11T09:45:51Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-11T09:45:51Z", "is_private": false, "attachment_id": null}, {"count": 23, "tags": [], "bug_id": 52210, "text": "Created attachment 32452\nUpdated patch introducing ALPN/NPN support for mod_ssl\n\nThis version of the patch uses correct ALPN/NPN defines and has been tested against 2.4.10.", "id": 180947, "time": "2015-02-11T09:50:46Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-11T09:50:46Z", "is_private": false, "attachment_id": 32452}, {"count": 24, "tags": [], "bug_id": 52210, "attachment_id": 32463, "text": "Created attachment 32463\nUpdated patch for ALPN/NPN support in mod_ssl\n\nFix in DEBUG log of negotiated protocol.", "id": 181004, "time": "2015-02-12T12:49:29Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-12T12:49:29Z", "is_private": false}, {"count": 25, "tags": [], "bug_id": 52210, "attachment_id": null, "text": "It seems that HAVE_TLS_NPNX is defined instead of HAVE_TLS_NPN in the part of the patch below.\nAlso, probably it shouldn't be defined when OPENSSL_NO_TLSEXT is used (like HAVE_TLS_ALPN).\n\n\ndiff -ru gen/httpd-2.4.x/modules/ssl/ssl_private.h modules/ssl/ssl_private.h\n--- gen/httpd-2.4.x/modules/ssl/ssl_private.h\t2015-01-19 16:52:30.000000000 +0100\n+++ modules/ssl/ssl_private.h\t2015-01-19 15:42:53.908000000 +0100\n@@ -176,6 +169,16 @@\n[...]\n+/* Next Protocol Negotiation */\n+#if !defined(OPENSSL_NO_NEXTPROTONEG) && defined(OPENSSL_NPN_NEGOTIATED)\n+#define HAVE_TLS_NPNX\n+#endif", "id": 181006, "time": "2015-02-12T14:38:51Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-12T14:38:51Z", "is_private": false}, {"count": 26, "tags": [], "bug_id": 52210, "attachment_id": 32464, "text": "Created attachment 32464\nAdd ALPN/NPN support to mod_ssl\n\nUpdate: fixed stupid NPNX define type, removed compiler warnings\nTested: with 2.4.12 and openssl 1.0.2/1.0.1l on darwin", "id": 181008, "time": "2015-02-12T16:02:14Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-12T16:02:14Z", "is_private": false}, {"count": 27, "tags": [], "bug_id": 52210, "text": "Created attachment 32521\nEnables ALPN+NPN in mod_ssl simultaneously if supported by openssl\n\nThis feature keeps on giving: added support for simultaneous ALPN and NPN support (openssl 1.0.2 onwards), so that old and new clients may negotiate. Necessary as long as there are clients using openssl 1.0.1 versions.\n\nNo changes to callback API from previous versions.", "id": 181326, "time": "2015-02-25T12:28:07Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-25T12:28:07Z", "is_private": false, "attachment_id": 32521}, {"count": 28, "text": "Created attachment 32523\nSimul. ALPN+NPN support in mod_ssl, verified against mixed, various clients\n\n* Found a bug when testing an NPN only client against ALPN+NPN server with patch from yesterday.\n* replaced TABs with spaces in patch for proper formatting\n* verified this patch against httpd 2.4.12 in the following combinations:\n  - OpenSSL 1.0.2 httpd against Firefox 36, Chrome 40\n  - OpenSSL 1.0.2 httpd against OpenSSL 1.0.2 nghttp2 client\n  - OpenSSL 1.0.2 httpd against OpenSSL 1.0.1 nghttp2 client\n  - OpenSSL 1.0.1 httpd against Firefox 36, Chrome 40\n  - OpenSSL 1.0.1 httpd against OpenSSL 1.0.2 nghttp2 client\n  - OpenSSL 1.0.1 httpd against OpenSSL 1.0.1 nghttp2 client\n\nSorry, if the update frequency of this patch is making noise.", "bug_id": 52210, "is_private": false, "id": 181345, "time": "2015-02-26T09:16:09Z", "creator": "stefan@eissing.org", "creation_time": "2015-02-26T09:16:09Z", "tags": [], "attachment_id": 32523}, {"count": 29, "tags": [], "bug_id": 52210, "attachment_id": null, "text": "Current status in trunk: the changes in attachment 32523 were committed with r1670397 and r1670434. NPN support was subsequently removed with r1676004.\n\nClosing this bug as INVALID (for lack of a better resolution - WONTFIX doesn't really fit), as it relates to NPN, which is now quite unlikely to find its way into a stable release.", "id": 182625, "time": "2015-04-26T08:08:54Z", "creator": "asfbugz@velox.ch", "creation_time": "2015-04-26T08:08:54Z", "is_private": false}, {"count": 30, "tags": [], "bug_id": 52210, "text": "Comment on attachment 32464\nAdd ALPN/NPN support to mod_ssl\n\nMarking 2015-02-12 patch version as obsolete", "id": 182626, "time": "2015-04-26T08:10:29Z", "creator": "asfbugz@velox.ch", "creation_time": "2015-04-26T08:10:29Z", "is_private": false, "attachment_id": 32464}]
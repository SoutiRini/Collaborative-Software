[{"count": 0, "tags": [], "bug_id": 29900, "attachment_id": null, "is_private": false, "id": 60109, "time": "2004-07-03T11:19:44Z", "creator": "ashert@huji.013.net.il", "creation_time": "2004-07-03T11:19:44Z", "text": "a parameter sent in request in utf-8 encoding arrives as if it would be sent in\nanother encoding (iso-xxx, windows-xxx or whatever). works fine with tomcat 4.0.\ndoesn't work on tomcat 5.0.xx\n\na jsp code example:\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n</head>\n<body>\n \n<form act=\"/tests/utf.jsp\" method=post>\n<input type=text name=source >\n<input type=submit>\n<form>\n<p>\n \n<%\nrequest.setCharacterEncoding(\"UTF-8\");\n\nif(request.getParameter(\"source\")!=null)\n{ \n  out.println(request.getParameter(\"source\").length()+\"<p>\");\n \n  out.println(request.getParameter(\"source\"));\n \n  StringBuffer sb = new StringBuffer();\n  for(int i=0; i<request.getParameter(\"source\").length(); i++)\n  {\n    if(request.getParameter(\"source\").charAt(i) == '&')\n      sb.append(\"&\");\n    else\n      sb.append(request.getParameter(\"source\").charAt(i));\n \n  }\n  out.println(\"<p>\"+ sb.toString());\n}\n%>\n \n</body>\n</html>\n\nas you see, this code block gets a utf-8 encoded parameter from\na request, outputs its length, the parameter itself, and its html\nutf-8 codes.\nto test it i send a hebrew letter ALEF. on tomcat 4.xx everything\nworks perfect and i get the following response:\n\n7\n\u05d0\n&amp;#1488;\n\n(in case you don't see it here, it's 7 , alef as utf-8 code and alef's utf-8\ncode parsed to be visible in browser)\n\nwith tomcat 5.0.xx i get:\n\n1\n?\n?"}, {"count": 1, "tags": [], "bug_id": 29900, "attachment_id": null, "is_private": false, "id": 60114, "time": "2004-07-03T15:28:01Z", "creator": "markt@apache.org", "creation_time": "2004-07-03T15:28:01Z", "text": "TC5 no longer defaults to using the body encoding for parameters as this is \nnot spec compliant. See my standard text on encoding (attached below) for more \ninfo.\n\n\nREQUESTS\n========\n\nThere are a number of situations where there may be a requirement to use non-\nUS ASCII characters in a URI. These include:\n- Parameters in the query string\n- Servlet paths\n\nThere is a standard for encoding URIs (http://www.w3.org/International/O-URL-\ncode.html) but this standard is not consistently followed by clients. This \ncauses a number of problems.\n\nThe functionality provided by Tomcat (4 and 5) to handle this less than ideal \nsituation is described below.\n\n1. The Coyote HTTP/1.1 connector has a useBodyEncodingForURI attribute which \nif set to true will use the request body encoding to decode the URI query \nparameters.\n  - The default value is true for TC4 (breaks spec but gives consistent \nbehaviour across TC4 versions)\n  - The default value is false for TC5 (spec compliant but there may be \nmigration issues for some apps)\n2. The Coyote HTTP/1.1 connector has a URIEncoding attribute which defaults to \nISO-8859-1.\n3. The parameters class (o.a.t.u.http.Parameters) has a QueryStringEncoding \nfield which defaults to the URIEncoding. It must be set before the parameters \nare parsed to have an effect.\n\nThings to note regarding the servlet API:\n1. HttpServletRequest.setCharacterEncoding() normally only applies to the \nrequest body NOT the URI.\n2. HttpServletRequest.getPathInfo() is decoded by the web container.\n3. HttpServletRequest.getRequestURI() is not decoded by container.\n\nOther tips:\n1. Use POST with forms to return parameters as the parameters are then part of \nthe request body.\n\n\nRESPONSES\n=========\n\nHTML META\n tags are ignored by Tomcat. You may use <%@ page pagEncoding=\"...\" %> for \nJSPs."}, {"attachment_id": null, "tags": [], "bug_id": 29900, "text": "thanks for reply, but...\ni edited the server.xml, so that now the coyote settings are these:\n<!-- Define a non-SSL Coyote HTTP/1.1 Connector on port 8080 -->\n             <Connector port=\"8080\"\n               maxThreads=\"150\" minSpareThreads=\"25\" maxSpareThreads=\"75\"\n               enableLookups=\"false\" redirectPort=\"8443\" acceptCount=\"100\"\n               debug=\"0\" connectionTimeout=\"20000\"\n               useBodyEncodingForURI=\"true\"  URIEncoding=\"UTF-8\"\n               disableUploadTimeout=\"true\" />\n\ni don't see any changes, the problem still exists. by default  i send the request by \nPOST. i refectored the code to work with GET to see if URIEncoding makes any \ndifference. it doesn't. i'll appriciate your advice.", "count": 2, "id": 60120, "time": "2004-07-03T20:25:28Z", "creator": "ashert@huji.013.net.il", "creation_time": "2004-07-03T20:25:28Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 29900, "is_private": false, "count": 3, "id": 60131, "time": "2004-07-04T15:00:49Z", "creator": "markt@apache.org", "creation_time": "2004-07-04T15:00:49Z", "text": "This works for me if I add <%@ page pageEncoding=\"UTF-8\" %> to the JSP\n\nThis is not a tomcat bug. Please follow up on tomcat-user if you have further \nquestions.\n"}]
[{"count": 0, "tags": [], "bug_id": 31030, "attachment_id": null, "is_private": false, "id": 63006, "time": "2004-09-03T05:49:18Z", "creator": "mdubey@ariba.com", "creation_time": "2004-09-03T05:49:18Z", "text": "mod_cache is enabled with mod_jk in this scenario. Not sure if it is a problem with other modules\ntoo (ex. mod_proxy). This exists in cvs-head version (as of 08/31/2004) of mod*cache code.\n\nConfiguration:\n\nLogLevel debug\n\n<IfModule mod_cache.c>\n    <IfModule mod_disk_cache.c>\n        CacheRoot /tmp/cacheroot\n        CacheIgnoreCacheControl On\n        CacheSize 256\n        CacheEnable disk /UIServlet/cache\n        CacheDirLevels 5\n        CacheDirLength 3\n    </IfModule>\n</IfModule>\n\nJkMount /UIServlet/*    test\nJkWorkersFile /tmp/apache2/conf/mojk.properties\n\nHitting the URL like:\n\nhttp://servername/UIServlet/cache/Logo.gif\n\nFor the first time return the correct response with the following in the log. The cache look ok\non disk.\n\n[Thu Sep 02 17:04:33 2004] [debug] mod_cache.c(114): incoming request is asking\nfor a uncached version of /UIServlet/cache/Logo.gif,\n but we know better and are ignoring it\n[Thu Sep 02 17:04:33 2004] [info] disk_cache: Storing URL vela/UIServlet/cache/a\nriba/resource/en_US/images/Logo.gif?\n[Thu Sep 02 17:04:33 2004] [debug] mod_cache.c(615): cache: Caching url: /UIServ\nlet/cache/Logo.gif\n[Thu Sep 02 17:04:33 2004] [debug] mod_disk_cache.c(622): disk_cache: Stored hea\nders for URL vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:33 2004] [debug] mod_headers.c(511): headers: ap_headers_outpu\nt_filter()\n[Thu Sep 02 17:04:33 2004] [debug] mod_disk_cache.c(693): disk_cache: Body for U\nRL vela/UIServlet/cache/Logo.gif? cached.\n\n\nHitting it again, browser (firefox and camino) make following request:\n\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nConnection: keep-alive\nIf-Modified-Since: Thu, 08 Jul 2004 20:16:07 GMT\nCache-Control: max-age=0\n\nThis results in content to be refetched from the tomcat server (although CacheIgnoreCacheControl is\nOn) The resulting log looks like:\n\n[Thu Sep 02 17:04:39 2004] [debug] mod_cache.c(114): incoming request is asking\nfor a uncached version of /UIServlet/cache/Logo.gif,\n but we know better and are ignoring it\n[Thu Sep 02 17:04:39 2004] [debug] mod_disk_cache.c(400): disk_cache: Recalled c\nached URL info header vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:39 2004] [debug] mod_disk_cache.c(464): disk_cache: Recalled h\neaders for URL vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:39 2004] [debug] mod_cache.c(256): cache: running CACHE_OUT fi\nlter\n[Thu Sep 02 17:04:39 2004] [debug] mod_cache.c(265): cache: serving /UIServlet/c\nache/Logo.gif\n[Thu Sep 02 17:04:47 2004] [debug] mod_cache.c(114): incoming request is asking\nfor a uncached version of /UIServlet/cache/Logo.gif,\n but we know better and are ignoring it\n[Thu Sep 02 17:04:47 2004] [debug] mod_disk_cache.c(400): disk_cache: Recalled c\nached URL info header vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:47 2004] [debug] mod_disk_cache.c(464): disk_cache: Recalled h\neaders for URL vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:47 2004] [debug] mod_cache.c(285): cache: running CACHE_CONDIT\nIONAL filter\n[Thu Sep 02 17:04:47 2004] [debug] mod_headers.c(511): headers: ap_headers_outpu\nt_filter()\n[Thu Sep 02 17:04:47 2004] [info] disk_cache: Storing URL vela/UIServlet/cache/a\nriba/resource/en_US/images/Logo.gif?\n[Thu Sep 02 17:04:47 2004] [debug] mod_cache.c(615): cache: Caching url: /UIServ\nlet/cache/Logo.gif\n[Thu Sep 02 17:04:47 2004] [debug] mod_disk_cache.c(622): disk_cache: Stored hea\nders for URL vela/UIServlet/cache/Logo.gif?\n[Thu Sep 02 17:04:47 2004] [debug] mod_disk_cache.c(685): cache_disk: URL vela/U\nIServlet/cache/Logo.gif? failed the size check (0<1)\n\nLooking through the code seems like altough mod_cache.c looks at this setting, it is not\npassed along to ap_cache_check_freshness() (in cache_util.c).\n\nI have attempted to fix this, not sure if this is how it should be fixed. Diffs included here. I\ntested this with both IgnoreCacheControl flag On and Off (with IE, Firefox, Camino and Safari)\nand it seems to work.\n\nDiffs:\n\n--- orig/mod_cache.h    2004-09-02 22:06:23.419972000 -0700\n+++ ./mod_cache.h       2004-09-02 19:19:12.848806000 -0700\n@@ -234,7 +234,9 @@\n  * @param r request_rec\n  * @return 0 ==> cache object is stale, 1 ==> cache object is fresh\n  */\n-CACHE_DECLARE(int) ap_cache_check_freshness(cache_request_rec *cache, request_rec *r);\n+\n+/*XXXX: Ariba */\n+CACHE_DECLARE(int) ap_cache_check_freshness(cache_request_rec *cache, request_rec *r, int \nignorecachecontrol);\n CACHE_DECLARE(apr_time_t) ap_cache_hex2usec(const char *x);\n CACHE_DECLARE(void) ap_cache_usec2hex(apr_time_t j, char *y);\n CACHE_DECLARE(char *) generate_name(apr_pool_t *p, int dirlevels, \n\n\n--- orig/cache_util.c   2004-09-02 22:06:35.678215000 -0700\n+++ ./cache_util.c      2004-09-02 19:24:23.933579000 -0700\n@@ -118,13 +118,17 @@\n     return apr_time_sec(current_age);\n }\n \nCACHE_DECLARE(int) ap_cache_check_freshness(cache_request_rec *cache, \n-                                            request_rec *r)\n+                                            request_rec *r,\n+                                           int ignorecachecontrol)\n {\n     apr_int64_t age, maxage_req, maxage_cresp, maxage, smaxage, maxstale;\n     apr_int64_t minfresh;\n     int age_in_errhdr = 0;\n-    const char *cc_cresp, *cc_ceresp, *cc_req;\n+    const char *cc_cresp = NULL;\n+    const char *cc_ceresp = NULL;\n+    const char *cc_req = NULL;\n     const char *agestr = NULL;\n     const char *expstr = NULL;\n     char *val;\n@@ -163,9 +167,13 @@\n      * entity, and it's value is in the past, it has expired.\n      * \n      */\n+\n+   if (!ignorecachecontrol) {\n        cc_cresp = apr_table_get(r->headers_out, \"Cache-Control\");\n        cc_ceresp = apr_table_get(r->err_headers_out, \"Cache-Control\");\n        cc_req = apr_table_get(r->headers_in, \"Cache-Control\");\n+   }\n     \n     if ((agestr = apr_table_get(r->headers_out, \"Age\"))) {\n         age_c = apr_atoi64(agestr);\n\n\n\n--- orig/mod_cache.c    2004-09-02 22:06:14.785339000 -0700\n+++ ./mod_cache.c       2004-09-02 19:17:48.701744000 -0700\n@@ -160,7 +160,7 @@\n     /* We have located a suitable cache file now. */\n \n     /* RFC2616 13.2 - Check cache object expiration */\n-    cache->fresh = ap_cache_check_freshness(cache, r);\n+    cache->fresh = ap_cache_check_freshness(cache, r, conf->ignorecachecontrol);\n \n     /* What we have in our cache isn't fresh. */\n     if (!cache->fresh) {"}, {"count": 1, "attachment_id": 12640, "bug_id": 31030, "text": "Created attachment 12640\nmod_cache.c diffs", "id": 63066, "time": "2004-09-03T19:16:43Z", "creator": "mdubey@ariba.com", "creation_time": "2004-09-03T19:16:43Z", "tags": [], "is_private": false}, {"count": 2, "attachment_id": 12641, "bug_id": 31030, "is_private": false, "id": 63067, "time": "2004-09-03T19:17:13Z", "creator": "mdubey@ariba.com", "creation_time": "2004-09-03T19:17:13Z", "tags": [], "text": "Created attachment 12641\nmod_cache.h diffs"}, {"count": 3, "tags": [], "creator": "mdubey@ariba.com", "text": "Created attachment 12642\ncache_util.c diffs", "id": 63068, "time": "2004-09-03T19:17:33Z", "bug_id": 31030, "creation_time": "2004-09-03T19:17:33Z", "is_private": false, "attachment_id": 12642}, {"count": 4, "tags": [], "bug_id": 31030, "attachment_id": null, "is_private": false, "id": 63069, "time": "2004-09-03T19:19:15Z", "creator": "mdubey@ariba.com", "creation_time": "2004-09-03T19:19:15Z", "text": "Reworked changes to not ignore Cache-Control in response headers, only ignore it in request header.\ndiffs attched above."}, {"count": 5, "tags": [], "bug_id": 31030, "attachment_id": null, "text": "Seems reasonable, but in over 4 years no one has considered it important enough to fix.  Closing for now; can be reopened if the issue comes up again.", "id": 127287, "time": "2009-05-22T07:49:06Z", "creator": "poirier@pobox.com", "creation_time": "2009-05-22T07:49:06Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 31906, "text": "Hi All,\n\nI have been performing some experiments with automatic\nhandling of Continue records.\n\nIt seems to me that the current method of handling\nContinue records is to detect that a Continue records\nis required, store enough state to pick up after the\nContinue record is Pushed down to the record by the\nRecordFactory and start again. This makes for\ncomplicated classes ie SST.\n\nA number of records that contain strings, and\nconceivably could exceed the record limits but do not\nimplement the current Continue mechanisms. I notice\nthat the recent drawing code does not implement\ncontinue records (AbstractEscherHolderRecord),\nprobably because in the current implementation it is\nso damned hard to do.\n\nWhat I have created  a \"RecordInputStream\", that knows\nenough about continue records so that each record can\npull data from this class. It will even automatically\ntransition ove a continue record boundary so that the\nlow level records can just keep sucking bytes so long\nas there are continue records available.\n\nThis is a big patch because I have had to touch every single\nHSSF Record constructor and fillFields method, and in\nsome cases ie SST rewrite them.\n\n*** But look how simple SST deserialisation now is!! ***\n\nI plan eventually to have a RecordOutputStream which\nwill do the serialization.\n\nAt this stage it is working great!\n\nI would appreciate any comments on the patch before i commit it. \n\nGlen:/ You could consider wrapping a ddf aware input stream over the top of this\nstream in AbstractEscherHolderRecord.fillFields eg\n\nDDFInputStream inStr = new DDFInputStream(recordInputStream);\n\nThanks\n\nJason", "id": 65777, "time": "2004-10-26T22:30:26Z", "creator": "jheight@apache.org", "creation_time": "2004-10-26T22:30:26Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 31906, "text": "Created attachment 13227\nRecord InputStream patch", "id": 65778, "time": "2004-10-26T22:31:23Z", "creator": "jheight@apache.org", "creation_time": "2004-10-26T22:31:23Z", "is_private": false, "attachment_id": 13227}, {"count": 2, "tags": [], "bug_id": 31906, "text": "Created attachment 13228\nThe new RecordInputStream class", "id": 65779, "time": "2004-10-26T22:32:16Z", "creator": "jheight@apache.org", "creation_time": "2004-10-26T22:32:16Z", "is_private": false, "attachment_id": 13228}, {"count": 3, "attachment_id": null, "bug_id": 31906, "is_private": false, "id": 66156, "time": "2004-10-30T02:27:37Z", "creator": "glens@apache.org", "creation_time": "2004-10-30T02:27:37Z", "tags": [], "text": "I'll have a closer look at this.\n\nThe big issue I have with continue records (not with this) is that they're not \nreally continuous.  One possible, flawed, solution to this is to mark records \nthat accept continue records and feed the later continue records to those \nrecords.  The trouble is if there are unknown records that can accept continue \nrecords then this solution will not work.  If you've got any idea's how to \nhandle this I'd love to know.\n\n"}, {"count": 4, "tags": [], "bug_id": 31906, "text": "Jason, I thought you were a committer?  ", "id": 74278, "time": "2005-04-29T17:38:50Z", "creator": "poi-support@buni.org", "creation_time": "2005-04-29T17:38:50Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 31906, "text": "I'm assuming he wanted feedback for a large patch. ", "id": 74279, "time": "2005-04-29T18:20:15Z", "creator": "avik@apache.org", "creation_time": "2005-04-29T18:20:15Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 31906, "text": "Yes that is correct I wanted some feedback. This is a major change to how\nrecords are created.\n\nPersonally i think that it is MUCH MUCH simpler (especially for SST), and has\nthe possibilty to be quicker if the underlying POIFS InputStream was also was\nable to read byte by byte rather than loading the whole data stream into memory.\n\nI am pretty sure that i solved all of the issues and that the unit tests all\npassed. The reason that i didnt commit was due to the major changes in how this\ncreated records, and i never got arround to creating the RecordOutputStream.\n\nI will work further on the patch, but only if people are happy with the concepts.", "id": 74464, "time": "2005-05-05T04:22:55Z", "creator": "jheight@apache.org", "creation_time": "2005-05-05T04:22:55Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 31906, "text": "The more i look at this, the more i like this!", "id": 77035, "time": "2005-07-06T13:50:47Z", "creator": "avik@apache.org", "creation_time": "2005-07-06T13:50:47Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "avik@apache.org", "text": "Jason, \n\nThe TestRecordinputstream.java file seems to be missing. Could you pls add it in. \n\nThanks. ", "id": 77433, "time": "2005-07-19T13:45:08Z", "bug_id": 31906, "creation_time": "2005-07-19T13:45:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "jheight@apache.org", "attachment_id": 15726, "text": "Created attachment 15726\nTestcaseRecordInputStream.java", "id": 77477, "time": "2005-07-21T05:02:30Z", "bug_id": 31906, "creation_time": "2005-07-21T05:02:30Z", "is_private": false}, {"count": 10, "tags": [], "creator": "jheight@apache.org", "attachment_id": 15726, "text": "Comment on attachment 15726\nTestcaseRecordInputStream.java \n\nAdditional file missing from original patch.", "id": 77478, "time": "2005-07-21T05:04:38Z", "bug_id": 31906, "creation_time": "2005-07-21T05:04:38Z", "is_private": false}, {"count": 11, "tags": [], "text": "Avik,\n\nShould be all here now. I just tried to compile my local repos, but i must have\ndone an update some time ago, because i get alot of compile errors due to cvs\nnot being able to merge updates with my patch.\n\nHave you already attempted to merge this patch with the current CVS version? If\nso ill hold off, now that you should have all of the files required to build and\ntest.\n\nJason", "is_private": false, "bug_id": 31906, "id": 77479, "time": "2005-07-21T05:07:06Z", "creator": "jheight@apache.org", "creation_time": "2005-07-21T05:07:06Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 31906, "text": "Created attachment 15773\nRecordInputStream patch\n\nNew patch updated to the latest code base as of today.\n\nShould apply relatively easily. All test cases pass.\n\nI do not currently implement the escher graphics correctly, particularily the\ncase where there is an Obj record between two drawing group records, where the\nsecond drawing group record is a continuation of the first. *Why is there no\ntest case for this anomoly??*\n\nIf can get some sort of affirmative 'hey, this looks like it shoud be\ncommitted' then i will find a work around for the escher stuff and commit the\nchanges.\n\nJason", "id": 77650, "time": "2005-07-26T09:30:56Z", "creator": "jheight@apache.org", "creation_time": "2005-07-26T09:30:56Z", "is_private": false, "attachment_id": 15773}, {"count": 13, "tags": [], "bug_id": 31906, "text": "Created attachment 15774\nThe new RecordInputStream class", "id": 77651, "time": "2005-07-26T09:31:54Z", "creator": "jheight@apache.org", "creation_time": "2005-07-26T09:31:54Z", "is_private": false, "attachment_id": 15774}, {"count": 14, "tags": [], "creator": "jheight@apache.org", "text": "Created attachment 15775\nA new RefErrorPtg class", "id": 77652, "time": "2005-07-26T09:32:32Z", "bug_id": 31906, "creation_time": "2005-07-26T09:32:32Z", "is_private": false, "attachment_id": 15775}, {"count": 15, "tags": [], "bug_id": 31906, "text": "Patch applied to HEAD", "id": 78781, "time": "2005-08-22T05:13:20Z", "creator": "jheight@apache.org", "creation_time": "2005-08-22T05:13:20Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 30028, "attachment_id": null, "text": "Hi,\n\nAccess to StandardSession.attributes field is not synchronized; if used in\nframes or in any other way asynchronousely, session.setAttribute() or\nsession.removeAttribute() may make StandardSession.attributes HashTable\ninconsistent.\n\nWe have experienced a situation where attributes.getKeys().size() had become\ngreater then the number of the elements in the Set. This caused\nStandardSession.keys() to throw NoSuchElement exception and serialization for\nthat session to be broken permanently. That in its turn caused cluster to become\ninconsistent and so on.\n\nI do appreciate that the relevant synchronization is expected to be done by\ndevelopers but it is not always possible to enforce that. Some software we use\nis either close-source obfuscated type, or a big project developed and tested by\na third party on a different application server. Either way existing sites dont\nwork properly on Tomcat and we are not in a position to rewrite/modify the code\nto make those sites more \"intellegent\" so to speak.\n\nAnyway, i would like to suggest a fix to StandardSession.java:\n\n34a35,36\n> import java.util.Collections;\n> import java.util.Map;\n119,120c121\n<     protected HashMap attributes = new HashMap();\n< \n---\n>     protected Map attributes = Collections.synchronizedMap(new HashMap());\n\nThis is a patch for the 5.0.27 source.\n\nThanks,\nVlad", "id": 60417, "time": "2004-07-10T23:35:28Z", "creator": "vlad@jstripe.com", "creation_time": "2004-07-10T23:35:28Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 30028, "attachment_id": null, "text": "Obviously, session access isn't synchronized, and needs syncing in the user code\nas needed. I thought this was obvious when reading the servlet specification\n(glad your have a workaround for your third party libraries).", "id": 60444, "time": "2004-07-11T14:44:16Z", "creator": "remm@apache.org", "creation_time": "2004-07-11T14:44:16Z", "is_private": false}, {"count": 2, "tags": [], "creator": "vlad@jstripe.com", "text": "Remy,\n\n<quote>\n\nSRV.7.7.1 Threading Issues\n\nMultiple servlets executing request threads may have active access to a single\nsession object at the same time. The Developer has the responsibility for\nsynchronizing access to session resources as appropriate.\n\n</quote>\n\nI wouldnt say this implies that HttpSession is not guaranteed to be thread-safe\nand to be fair it is quite ambiguous about either. As to my interpretation the\nspec is talking about objects that are stored in session. And it would be\nlogical because the container cannot possibly synchronize access to them.\n\nThe session itself is a different matter altogether. It is a container resource\nand I dont think it would qualify as a \"session resource\" the spec is going on\nabout. I would say that the container have to synchronize calls to\nsetAttribute/removeAttribute to ensure session consistency.\n\nPerformance difference between HashMap and the synchronized map is negligible\nand the advantages are obvious. Basically unless session is accessed by the\nsingle servlet implementing SingleThreadModel there is no way to gurantee\nsession connsistency? Even <jsp:useBean> does not synchronize against the\nsession. So everyone is a winner if StandardSession.attributes is synchronized?\n\nI do hope that what i said here makes sense because Tomcat is one of the few\nservers that doesnt care about setAttribute/removeAttribute thread safety, which\nis a shame.\n\nRegards,\nVlad\n", "id": 60452, "time": "2004-07-11T23:44:45Z", "bug_id": 30028, "creation_time": "2004-07-11T23:44:45Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "pr@objektpark.de", "text": "Hey,\n\nI think we must sync the session data structure!\nIt make a big difference that app data are inconsistence or\nthe container data structure! Simple change and a very positive\neffect.\n\nregards\npeter", "id": 60454, "time": "2004-07-12T05:24:21Z", "bug_id": 30028, "creation_time": "2004-07-12T05:24:21Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "vlad@jstripe.com", "attachment_id": null, "id": 60462, "time": "2004-07-12T10:22:56Z", "bug_id": 30028, "creation_time": "2004-07-12T10:22:56Z", "is_private": false, "text": "Remy,\n\nexcuse my poor english please, what i did mean to say in the last paragraph is\nthat Tomcat is one of the few containers that doesnt provide thread-safe\nset/removeAttribute calls. \"doesnt care\" wasnt appropriate, sorry\n\nRegards,\nVlad"}, {"count": 5, "tags": [], "bug_id": 30028, "attachment_id": null, "text": "The spec says the session sync is responsibility of the developer. It does not\nmatter what other containers do.\n\nSince the spec does not call for this, therefore it is not a bug. At best it\nwould be an enhancement.\n\nIntroducing a sync'd HashMap does not fix the issue in cases where you are in a\ncluster and 2 requests for the same session on to different nodes occurs.", "id": 60463, "time": "2004-07-12T11:10:21Z", "creator": "funkman@joedog.org", "creation_time": "2004-07-12T11:10:21Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 30028, "attachment_id": null, "text": "Tim,\n\n\"The spec says the session sync is responsibility of the developer.\"\n\ni think that you are ignoring the fact that the spec is ambiguous about syncing\nsession access. Moreover the spec is saying about \"session resources\".\n\nGiven that the sync problem is *easy* to rectify on the container side with no\nside effects it is a reasonable thing to do. I dont mind calling it an\nenhancement either.\n\nCluster problem you described is a different matter. If you use \"sticky\" load\nbalancing you wouldnt have experienced that.\n\nVlad", "id": 60465, "time": "2004-07-12T11:55:55Z", "creator": "vlad@jstripe.com", "creation_time": "2004-07-12T11:55:55Z", "is_private": false}, {"count": 7, "tags": [], "creator": "vitor.buitoni@digitro.com.br", "attachment_id": null, "id": 99186, "time": "2007-02-09T09:50:45Z", "bug_id": 30028, "creation_time": "2007-02-09T09:50:45Z", "is_private": false, "text": "Hi,\n\nI'm reopening this bug, since i'm also having problems with this issue, and I\nreally think that someone could take a better look at this. I don't think the\nbug is invalid.\n\nI can see the problem happening when my application or tomcat itself tries to\ninvalidate a session, the problem happens in the method expire():\n\nStandardWrapperValve[action]: Servlet.service() for servlet action threw exception\njava.lang.ArrayIndexOutOfBoundsException: -6\n        at java.util.AbstractCollection.toArray(AbstractCollection.java:177)\n        at\norg.apache.catalina.session.StandardSession.keys(StandardSession.java:1523)\n        at\norg.apache.catalina.session.StandardSession.expire(StandardSession.java:706)\n        at\norg.apache.catalina.session.StandardSession.expire(StandardSession.java:632)\n        at\norg.apache.catalina.session.StandardSession.invalidate(StandardSession.java:1051)\n        at\norg.apache.catalina.session.StandardSessionFacade.invalidate(StandardSessionFacade.java:149)\n        at\nbr.com.digitro.supervisor.webapp.controller.actions.LogOutAction.execute(LogOutAction.java:31)\n        at\norg.apache.struts.action.RequestProcessor.processActionPerform(RequestProcessor.java:484)\n        at\norg.apache.struts.action.RequestProcessor.process(RequestProcessor.java:274)\n        at org.apache.struts.action.ActionServlet.process(ActionServlet.java:1482)\n        at org.apache.struts.action.ActionServlet.doGet(ActionServlet.java:507)\n\n\nAs you can see, this -6 is the result of a call to the size() method of\nattributes.keySet().\n\nPlease, let's not use the spec as an excuse for not doing things the right way.\nThe spec clearly says that the developer has the responsibility for\nsynchronizing access to \"session resources\", but doesn't say anything about the\nsession itself.\n\nThe container can and should synchronize the access to the session attribute\nmap, it would avoid many strange problems. Another side effect of this problem\nis that tomcat isn't even able to invalidate expired sessions in this situation.\n\n"}, {"count": 8, "tags": [], "creator": "markt@apache.org", "text": "This was fixed quite some time ago.", "id": 103990, "time": "2007-06-01T18:11:47Z", "bug_id": 30028, "creation_time": "2007-06-01T18:11:47Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "Indeed. It seems it has been fixed in Tomcat 5.5.16.\nJust for information, this issue is very similar to the one in BUG 36541.\n(perhaps a duplicate...)\n", "attachment_id": null, "id": 104039, "creation_time": "2007-06-04T10:29:47Z", "time": "2007-06-04T10:29:47Z", "creator": "vitor.buitoni@digitro.com.br", "bug_id": 30028, "is_private": false}]
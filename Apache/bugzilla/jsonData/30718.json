[{"count": 0, "tags": [], "bug_id": 30718, "attachment_id": null, "id": 62099, "time": "2004-08-18T04:20:53Z", "creator": "andrew@pimlott.net", "creation_time": "2004-08-18T04:20:53Z", "is_private": false, "text": "I would like to have the URLs .../foo and .../foo/bar both work, without the\nfirst redirecting to .../foo/.  The most promising way to do this would be to\nuse mod_negotiation, have a file foo.html, and a directory foo/ containing\nbar.html.  This doesn't work, because mod_negotiation refuses to handle a\nrequest for which a filesystem object exists.  This probably (?) makes sense if\nthe object is a file, but I doubt anyone relies on this behavior when the object\nis a directory.  Anyhow, I wrote a patch to let mod_negotiation handle directories.\n\n--- mod_negotiation.c.orig      2004-08-17 20:22:27.000000000 -0700\n+++ mod_negotiation.c   2004-08-17 20:22:30.000000000 -0700\n@@ -2613,7 +2613,8 @@\n     int res;\n     int j;\n \n-    if (r->finfo.st_mode != 0 || !(ap_allow_options(r) & OPT_MULTI)) {\n+    if ((r->finfo.st_mode != 0 && ! S_ISDIR(r->finfo.st_mode))\n+            || !(ap_allow_options(r) & OPT_MULTI)) {\n         return DECLINED;\n     }\n\nI can't think of any other simple way to get the behavior I want.  I could make\nit configurable if that would help.\n\nApache 2 is the same, at a glance.\n\nA gross way to achieve my goal is the following module.\n\n#include \"httpd.h\"\n#include \"http_config.h\"\n\nmodule MODULE_VAR_EXPORT nodir_module;\n\nstatic int handle_nodir(request_rec *r)\n{\n    if (S_ISDIR(r->finfo.st_mode))\n        r->finfo.st_mode = 0;\n    return DECLINED;\n}\n\nmodule MODULE_VAR_EXPORT nodir_module =\n{\n    STANDARD_MODULE_STUFF,\n    NULL,                       /* initializer */\n    NULL,                       /* dir config creator */\n    NULL,                       /* dir merger --- default is to override */\n    NULL,                       /* server config */\n    NULL,                       /* merge server config */\n    NULL,                       /* command table */\n    NULL,                       /* handlers */\n    NULL,                       /* filename translation */\n    NULL,                       /* check_user_id */\n    NULL,                       /* check auth */\n    NULL,                       /* check access */\n    handle_nodir,               /* type_checker */\n    NULL,                       /* fixups */\n    NULL,                       /* logger */\n    NULL,                       /* header parser */\n    NULL,                       /* child_init */\n    NULL,                       /* child_exit */\n    NULL                        /* post read-request */\n};"}, {"text": "The semantics of Multiviews are well-defined. So changing the behaviour would\nbreak much stuff out there.\nIn 2.0.51 and later there will be the DirectorySlash directive, which stops\ndirectory redirecting exactly where they occur (in mod_dir).\n\n1.3 is not likely to be modified for this change.", "tags": [], "bug_id": 30718, "attachment_id": null, "count": 1, "id": 62103, "time": "2004-08-18T09:00:49Z", "creator": "nd@perlig.de", "creation_time": "2004-08-18T09:00:49Z", "is_private": false}, {"count": 2, "tags": [], "creator": "andrew@pimlott.net", "text": "I completely understand not wanting to change the semantics of MultiViews. \nHowever, I don't believe the DirectorySlash you refer to would help me.  It\nwould avoid foo being redirected to foo/, but it would still not allow\nMultiViews to handle foo (by serving foo.html), because MultiViews explicitly\ndeclines in this case.  It would be nice if there were some way to enable this\n(perhaps under an option).", "id": 62141, "attachment_id": null, "bug_id": 30718, "creation_time": "2004-08-18T19:21:37Z", "time": "2004-08-18T19:21:37Z", "is_private": false}]
[{"attachment_id": null, "tags": [], "bug_id": 18275, "is_private": false, "count": 0, "id": 33681, "time": "2003-03-24T10:59:54Z", "creator": "caugustin@alcyonis.fr", "creation_time": "2003-03-24T10:59:54Z", "text": "Hello,\nI test on fop 0.20.4 and 0.20.5rc2 on PC windows 2000 and Linux Red Hat with\nJava 1.3.1.\n\nIf the inclued gif image is declared with width and height bigger than page size\n(280x470mm for exemple), fop enter in an infinit loop and I have to kill the\njava process (fop 0.20.4) or fop detect an infinit loop and stop (fop 0.20.5rc2).\n\nI can provide the files, just tell me how if necessary.\nCedric."}, {"attachment_id": null, "tags": [], "bug_id": 18275, "is_private": false, "count": 1, "id": 33687, "time": "2003-03-24T13:26:39Z", "creator": "j3322ptm@yahoo.de", "creation_time": "2003-03-24T13:26:39Z", "text": "Well, you ask the processor to do something not quite possible, and which causes\nconflicting user expectations. The spec is not really helpful in resolving this\nissues. For now you just have to  accept the way FOP implements it, if you want\nto make sure your file renders you'll have to clip the images yourself so that\nthey fit into the allocated areas.\nBTW it would have helped if you described you expectations a bit more, ahem, \ndetailed."}, {"count": 2, "tags": [], "bug_id": 18275, "attachment_id": null, "text": "Fop should not enter in an infinite loop but display an error. It's why I fill a\nbug. Infinite loop can crash a server, an error can be displayed to the user and\nmanaged.", "id": 33688, "time": "2003-03-24T13:40:39Z", "creator": "caugustin@alcyonis.fr", "creation_time": "2003-03-24T13:40:39Z", "is_private": false}, {"count": 3, "tags": [], "text": "I coded an infinite loop detector for FOP that should be able to catch these \nclasses of bug.  Please submit a FO file and the necessary graphics file as \nattachments to this bug and I will happily test this.\n\nFOP 0.20.4 should loop, but FOP 0.20.5 should not, unless someone's squashed my \ninfinite loop detecting code.", "is_private": false, "id": 33689, "creator": "raultman@fcci-group.com", "time": "2003-03-24T13:45:07Z", "bug_id": 18275, "creation_time": "2003-03-24T13:45:07Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "After re-reading the contents of this bug, I realized that the infinite loop \ndetector is working like it should.  Comments report that the loop is detected \nand displays an error in FOP 0.20.5rc2, so there's really nothing to be done on \nthis bug report- the bug is fixed in 0.20.5 and reports an error for handling.", "is_private": false, "id": 33828, "creator": "raultman@fcci-group.com", "time": "2003-03-26T15:11:29Z", "bug_id": 18275, "creation_time": "2003-03-26T15:11:29Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "It's not because the program don't crash that there is no bug : in any\nsituation, an infinite loop is a bug and should not happend.\nThe infinite loop detector is a good improvement but don't fixe the bug and give\nno information about the bug source.\n\nYou have a better view than me to see if this bug have to be fixe. The status\nshould be WONTFIX or REMIND.", "is_private": false, "bug_id": 18275, "id": 34027, "time": "2003-03-28T08:29:37Z", "creator": "caugustin@alcyonis.fr", "creation_time": "2003-03-28T08:29:37Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 18275, "text": "A bug is a violation of the formal spec for the software, or at least widely held\nbeliefs how the software should work. Neither can be claimed for this problem.\nAs I already said, there are basically two choices when a FO too large for the\navailable space is encountered:\n1. Use the curent area anyway, perhaps overflowing it, and apply some\n interpretation of how clipping properties, alignment etc. should be handled\n (the spec is very vague about most of the details in this case)\n2. Spill the FO to the next page. After all, there could be a following page\n with a page master ultimately allowing to fit the FO properly into an area.\nFOP chooses the second interpretation, and the \"infinite loop\" is the technical\nexpression of the fact that it is not necessarily always successful.\nThe spec does not explicitely mandate either, nor is one of the choices always\npreferable to the other. Therefore, unless the spec is fixed to be more\nprecise about this issue, the current implementation is technically not at\nfault.\nIn fact, the conceptual difficulties encountered while trying to formalize\nhandling of oversized FOs hints that is is simply bad style to use them.", "id": 34033, "time": "2003-03-28T10:14:11Z", "creator": "j3322ptm@yahoo.de", "creation_time": "2003-03-28T10:14:11Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "Agreed.  The inclusion of the system for detecting what are merely *potential* \ninfinite loops (almost 100% of the time, they are) is really something I just \nadded because of a necessity to not wreck servers.\n\nMoreover, the infinite loop detector does throw an exception showing that the \nsource of the problem is in a block that doesn't conform properly to the \nconstraints of the document.  I really don't see where there's a problem here.\n\nAll the further that this *can* go is to see what extra info can be spat out in \nthe exception message.", "is_private": false, "id": 34058, "creator": "raultman@fcci-group.com", "time": "2003-03-28T14:22:55Z", "bug_id": 18275, "creation_time": "2003-03-28T14:22:55Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 18275, "is_private": false, "count": 8, "id": 156534, "time": "2012-04-01T13:49:28Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:49:28Z", "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs"}]
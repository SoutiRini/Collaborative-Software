[{"count": 0, "tags": [], "bug_id": 11485, "attachment_id": null, "id": 20674, "time": "2002-08-06T00:27:29Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2002-08-06T00:27:29Z", "is_private": false, "text": "Using either 4.1.7 or 4.1.8 beta releases, I can do the following:\n* Deploy an app with a custom tag library\n* Successfully use tags from the library in a JSP page\n* Add a new tag to the TLD (and corresponding tag class to the webapp)\n* Update a JSP page in the webapp to use the new tag\n* Reload the webapp (or remove/install, it makes no difference)\n* Navigate to the page using the new tag\n* Get a compile error stating that the new tag does not exist\n  in the tag library\n\nThis problem doesn't go away until Tomcat is restarted, which implies that the\nTLDs are being cached beyond the lifetime of the webapp that declared them."}, {"count": 1, "attachment_id": null, "creator": "kin-man.chung@sun.com", "text": "Craig,\n\nIf the tld mapping is defined in web.xml, and the mapping is changed, then\ntomcat needs to be restarted; but that's because any change in web.xml requires\na restart of tomcat for it to take effect.  However, if web.xml is not modified,\nor if the tld is specified in uri attribute of the taglib directive, then any\nchange in tld, as well as any change in the tag handlers referenced there, will\ntake effect when the page is recompiled.  Jasper only caches the tld mappings\ndefined in web.xml, and never the tlds themselves.  I have verified that with\nsome simple examples.", "id": 21758, "time": "2002-08-26T21:27:01Z", "bug_id": 11485, "creation_time": "2002-08-26T21:27:01Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 11485, "is_private": false, "text": "A particular use case that still fails for me is when you use the Manager webapp\n(via the custom Ant tasks in my case) to remove a running app, change the TLD,\nand then install that app again.  The changes in the TLD are not reflected\nunless Tomcat is physically restarted.  This is not acceptable from a usability\npoint of view -- removing and re-installing an app should cause any existing TLD\ninformation for that webapp to be flushed and reloaded, even if none of the JSP\npages that use it have changed.\n", "id": 21760, "time": "2002-08-26T21:53:01Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2002-08-26T21:53:01Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 11485, "text": "The problem is not with caching of TLD's or tag handler classes, because they\nare not cached.  The problem is that the page that uses the modified TLD or tag\nhandler is not recompiled.  TLD, and indirectly the tag handlers are only\nprocessed at translation time, and when they change, the page that uses them\nneed to be recompiled.  This is because the codes that are generated for the JSP\npage depends on the properties of the tag handlers and would become invalid when\nthe tag handlers are modified.  This is analogous to class dependency in Java:\nif Foo references Bar and Bar.java is modified, then Foo.java needs to be\nrecompiled, otherwise you'll get a ClassChangedException at runtime.\n\nThe simple workaround in this case is to either touch the JSP page or remove its\n.class file, just to force a recompilation of that page.\n\n", "id": 21764, "time": "2002-08-26T22:39:48Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-08-26T22:39:48Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 11485, "attachment_id": null, "id": 21933, "time": "2002-08-28T23:03:34Z", "creator": "kin-man.chung@sun.com", "creation_time": "2002-08-28T23:03:34Z", "is_private": false, "text": "I jave just added in Tomcat 5 the TLDs that are referenced in a JSP page to the\ndependency list for the page, so that a change in TLD will trigger recompilation\nof the page.  Hope this would work for you."}]
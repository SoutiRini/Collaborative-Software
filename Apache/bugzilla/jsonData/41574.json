[{"count": 0, "attachment_id": null, "bug_id": 41574, "text": "If an exception is thrown between after the input and output streams inStream\nand fos are opened, but before they are closed, then the streams will not be\nclosed.  This error won't blatantly manifest itself on *nix systems, but on\nWindows systems, the file being read from by the FileInputStream will be locked\nand users will be unable to edit it afterwards (until the Slide client based app\nis closed).  There is also the issue of it being a resource leak.\n\nThe solution is to put the code that opens the streams in a try block and then\nclose them in a finally block ensuring they'll be closed even if there is an\nexception.\n\nThis bug is related to Slide Client bug 40835 in that it's the same general type\nof error in both cases.\n( http://issues.apache.org/bugzilla/show_bug.cgi?id=40835 ).\n\nFIX is below:\n\n    /**\n     * Execute the GET method for the given path.\n     *\n     * Fixed situation where an exception may cause the input and output\n     * streams not to be closed.\n     *\n     * @param path the server relative path of the resource to get\n     * @param file The local file.\n     * @return true if the method is succeeded.\n     * @exception HttpException\n     * @exception IOException\n     */\n    public boolean getMethod(String path, File file)\n        throws HttpException, IOException {\n\n        setClient();\n        GetMethod method = new GetMethod(URIUtil.encodePathQuery(path));\n\n        generateTransactionHeader(method);\n        int statusCode = client.executeMethod(method);\n\n        setStatusCode(statusCode);\n\n        // get the file only if status is any kind of OK\n        if (statusCode >= 200 && statusCode < 300)\n        {\n            FileOutputStream fos = null;\n            InputStream inStream = null;\n            try {\n                // Do a simple little loop to read the response back into the passed\n                // file parameter.\n                inStream = method.getResponseBodyAsStream();\n\n                fos = new FileOutputStream(file);\n                byte buffer[] = new byte[65535];\n                int bytesRead;\n                while ((bytesRead = inStream.read(buffer)) >= 0) {\n                    fos.write(buffer, 0, bytesRead);\n                }\n\n                return true;\n            \n            } finally {\n                if(fos != null)\n                    fos.close();\n                if(inStream != null)\n                    inStream.close();\n            }\n\n        } else {\n            return false;\n\n        }\n   }    \n\n\nPS:\nSorry to those on the dev mailing list who have already gotten an email from me\nregarding this.\n\n\nCheers!\n\nMichael N. Christoff\ndmx_dawg@hotmail.com", "id": 99139, "time": "2007-02-08T15:18:06Z", "creator": "dmx_dawg@hotmail.com", "creation_time": "2007-02-08T15:18:06Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "dmx_dawg@hotmail.com", "attachment_id": null, "is_private": false, "id": 99140, "time": "2007-02-08T15:23:36Z", "bug_id": 41574, "creation_time": "2007-02-08T15:23:36Z", "text": "Sorry, this bug should be renamed \n\n\"getMethod InputStream and OutputStream not closed if exception occurs\"\n\ninstead of \"putMethod ...\"\n\nAlso in the line where it says:\n\n\"This error won't blatantly manifest itself on *nix systems, but on\nWindows systems, the file being read from by the FileInputStream ...\"\n\nthat should be FileOutputStream.\n\n-mike"}, {"count": 2, "tags": [], "bug_id": 41574, "attachment_id": null, "text": "Fix committed, thanks very much for your contribution. Antoine", "id": 99227, "time": "2007-02-10T14:00:09Z", "creator": "antoine@apache.org", "creation_time": "2007-02-10T14:00:09Z", "is_private": false}]
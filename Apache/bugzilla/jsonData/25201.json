[{"count": 0, "tags": [], "bug_id": 25201, "attachment_id": null, "is_private": false, "id": 48484, "time": "2003-12-04T14:10:29Z", "creator": "fmeschbe@day.com", "creation_time": "2003-12-04T14:10:29Z", "text": "We place Apache httpd 2.0 in front of our CMS product as a caching reverse proxy\nto enhance performance. While the cache properly works managing its cached\nresources there is currently no functionality for the CMS product to inform the\nproxy about changed content.\n\nI propose to enhance the mod_cache module to support a new configuration\ndirective \"CachePurgeMethod\" with default \"PURGE\". When a request for such a\nmethod comes in the mod_cache handles it by trying to remove the indicated cache\nentry.\n\nIf the cache entry exists, the .data and .header file is removed and the request\nis terminated with a OK/200 status. If no cache entry exists for the request\nURL, the request is terminated with a NOT_FOUND/404 status.\n\nThis behaviour (method to purge a cache entry and the status codes for\n(un)successfully removal) is sketched after the PURGE method support of the\nsquid cache. See http://www.squid-cache.org/Doc/FAQ/FAQ-7.html#ss7.5 for short\ninformation."}, {"count": 1, "tags": [], "bug_id": 25201, "attachment_id": null, "text": "Attaching patch to existing implementation of the mod_cache and supporting files.", "id": 48485, "time": "2003-12-04T14:12:08Z", "creator": "fmeschbe@day.com", "creation_time": "2003-12-04T14:12:08Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 25201, "attachment_id": 9392, "is_private": false, "id": 48486, "time": "2003-12-04T14:13:21Z", "creator": "fmeschbe@day.com", "creation_time": "2003-12-04T14:13:21Z", "text": "Created attachment 9392\nPatch to provide cache purge method (incl. mod_cache docu)"}, {"count": 3, "tags": [], "creator": "fmeschbe@day.com", "is_private": false, "text": "One final note: I could not get the 2.0 branch head to compile, therefore this\npatch is made against the 2.0.48 tag. I hope nothing much has changed in this\narena since 2.0.48...\n\nSorry for this inconvenience.", "id": 48487, "time": "2003-12-04T14:14:28Z", "bug_id": 25201, "creation_time": "2003-12-04T14:14:28Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "nd@perlig.de", "is_private": false, "text": "The documentation example should contain a big warning with example, that access\nto this method should be restricted. Otherwise it's nothing but a DoS vulnerability.\n\nBut I'm wondering how ... (wihtout affecting other methods or restrictions)?", "id": 48490, "time": "2003-12-04T14:38:29Z", "bug_id": 25201, "creation_time": "2003-12-04T14:38:29Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 25201, "text": "i could image somthing like \n<CachePurgeMethod METHOD_NAME>\n   # limit settings\n</CachePurgeMethod>\n\nwhich would be used like the <LIMIT> directive to limit the use of methods. this\nwould allow to restrict the use based on authentication and/or source address.\nif the mod_cache decides to not accept the method based on configuration and\nrequest, it would simply DECLINE and have the rest of the system act accordingly.\n\ni completely agree, that there must be some mechanism to restrict use of this\nmethod. but i have to admit, that i neglected this issue :-(\n\nwhat do you think ?", "id": 49060, "time": "2003-12-13T17:11:52Z", "creator": "fmeschbe@day.com", "creation_time": "2003-12-13T17:11:52Z", "is_private": false, "attachment_id": null}, {"count": 6, "attachment_id": null, "creator": "slive@apache.org", "text": "I don't understand.\n\nIsn't PURGE an HTTP method just like GET or POST?  If so, should you just use\n<Limit PURGE> (or <LimitExcept GET>) to do access control?", "id": 49073, "time": "2003-12-13T23:11:25Z", "bug_id": 25201, "creation_time": "2003-12-13T23:11:25Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "id": 49076, "time": "2003-12-14T00:34:25Z", "bug_id": 25201, "creation_time": "2003-12-14T00:34:25Z", "is_private": false, "text": "The problem is, that  <Limit> doesn't work accumulative. So, if one uses, say\n\n<Directory />\n  <Limit PURGE>\n#   blah\n  </Limit>\n</Directory>\n\na single\n\n<Limit POST>\n</Limit>\n\nContainer later will override the PURGE limit. We need a better solution in\ngeneral. <Limit> should be deprecated in favour of something better :/"}, {"count": 8, "tags": [], "creator": "fmeschbe@day.com", "text": "if <limit> itself can do what i want it to do :\n\n - define the name of the method mod_cache accepts to purge a cache entry\n - define restrictions on the use of this same method\n - being limited to mod_cache - that is having no influence on other modules or\n   overall configuration and not being influenced from other modules or\n   overall configuration\n\nthen limit is ok, don't you think ?\n\nbut ! if limit cannot do this or if limit may be overruled from outside the\nmod_cache configuration, <limit> is not ok.\n\nas - to my knowledge - there is no special container directive for mod_cache\nother than <directory>, etc., i think there must be a special named directive,\nwhich exactly does what i want it do (see list above).\n\nmaybe i just miss some point, in which case i gladely agree to whatever you propose.\n\nbtw: the intended idea of having a directive defining the name of the method to\nuse is, that mod_cache will handle the request and not give any other module a\nchance to see the request in case mod_cache can handle it. and to my knowledge\nthere is no standard method named 'PURGE' [i only know that squid uses this\nmethod exactly for this purpose]", "id": 49093, "time": "2003-12-14T10:05:24Z", "bug_id": 25201, "creation_time": "2003-12-14T10:05:24Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "chip@force-elite.com", "is_private": false, "text": "Adding myself to the CC, I plan to look on adding PURGE to mod_cache in 2.1/trunk.", "id": 73746, "time": "2005-04-17T23:06:27Z", "bug_id": 25201, "creation_time": "2005-04-17T23:06:27Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "minfrin@sharp.fm", "is_private": false, "text": "From what I can see, I don't see what PURGE does that isn't already done by a GET with a \"Cache-Control: no-cache\" header (to refresh) or \"no-store\" header (to purge) in the request?\n\nI suspect what is being attempted here is already offered out the box by RFC2616.", "id": 140242, "time": "2010-09-27T17:29:15Z", "bug_id": 25201, "creation_time": "2010-09-27T17:29:15Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 25201, "attachment_id": null, "text": "THe scope of the PURGE method is different from the GET method with cache-control headers.\n\nThe goal here is to provide functionality to the server behind the caching proxy to update the caching proxy: If the server sees a change, it will update the proxy\nto flush the old contents from the cache.\n\nSending a GET request with cache control preventing caching should not cause the cached data to be purged from the cache.", "id": 140254, "time": "2010-09-28T02:21:20Z", "creator": "fmeschbe@day.com", "creation_time": "2010-09-28T02:21:20Z", "is_private": false}, {"count": 12, "attachment_id": null, "creator": "minfrin@sharp.fm", "text": "What you're talking about is a conditional request, which comes as standard in RFC2616.\n\nSend a GET request with the header \"Cache-Control: max-age=0\". If the cache has a cached entity, it will add a conditional \"If-None-Match\" or \"If-Modified-Since\" header, to which your server responds with \"304 Not Modified\" if the content has not changed, or \"200 OK\" followed by the new content if the content has changed.\n\nAny CMS should support conditional requests as a matter of course, as they represent a significant performance improvement.", "id": 140808, "time": "2010-10-18T19:12:45Z", "bug_id": 25201, "creation_time": "2010-10-18T19:12:45Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 25201, "attachment_id": null, "is_private": false, "id": 144371, "time": "2011-02-17T03:34:05Z", "creator": "ogi@tower.3.bg", "creation_time": "2011-02-17T03:34:05Z", "text": "I didn't know about this bug and filed Bug 50774 for cache invalidation abilities but using content handlers instead."}]
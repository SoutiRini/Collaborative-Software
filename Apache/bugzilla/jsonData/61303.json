[{"count": 0, "tags": [], "bug_id": 61303, "attachment_id": null, "text": "Hello everyone.\nI was analyzing the modularization of some classes, and I identified that the class ConnectionPool has an opportunity for cohesion improvement. \nThe class Http11Protocol was in the same situation and the problem was solved as follows: The HttpBaseProtocol class was created, and several get() and set() methods that were used only to configure the class parameters were moved from Http11Protocol to HttpBaseProtocol. \nThe new class was then accessed through an instance variable in Http11Protocol. This strategy has cleaned and improved Http11Protocol cohesion.\nWith this in mind, I would recommend creating a new class: ConnectionPoolConfig , and moving the following methods:\n\ngetNumTestsPerEvictionRun\nsetMaxAge\nsetTestWhileIdle\ngetPropagateInterruptState\nsetPassword\ngetIdle\ngetDriverClassName\ngetDataSourceJNDI\nsetAlternateUsernameAllowed\ngetValidationInterval\ngetValidator\nsetValidationQuery\nsetUrl\nsetCommitOnReturn\ngetPassword\ngetDbProperties\nsetTimeBetweenEvictionRunsMillis\nsetValidationInterval\ngetName\ngetUseDisposableConnectionFacade\ngetUrl\ngetMinIdle\ngetRollbackOnReturn\ngetMaxIdle\ngetInitSQL\ngetPoolName\nsetLogValidationErrors\nsetJmxEnabled\nsetRemoveAbandoned\ngetNotificationInfo\nsetName\nsetRollbackOnReturn\ngetMaxActive\nsetDataSource\ngetLogValidationErrors\ngetJdbcInterceptorsAsArray\nsetUseDisposableConnectionFacade\ngetMinEvictableIdleTimeMillis\ngetRemoveAbandonedTimeout\nsetDefaultAutoCommit\nsetDefaultTransactionIsolation\nsetMinIdle\nsetValidator\nsetInitialSize\ngetConnectionProperties\ngetInitialSize\nsetUsername\nsetDefaultCatalog\ngetMaxAge\nsetUseLock\ngetNumActive\ngetDefaultAutoCommit\nsetDataSourceJNDI\nsetValidationQueryTimeout\ngetSuspectTimeout\nsetPropagateInterruptState\nsetMaxWait\ngetPoolProperties\ngetUseLock\ngetActive\nsetAbandonWhenPercentageFull\ngetNumIdle\ngetMaxWait\ngetSize\nsetDriverClassName\nsetLogAbandoned\nsetRemoveAbandonedTimeout\nsetTestOnConnect\ngetAbandonWhenPercentageFull\nsetAccessToUnderlyingConnectionAllowed\nsetTestOnBorrow\nsetTestOnReturn\nsetValidatorClassName\nsetUseEquals\ngetUsername\nsetDbProperties\ngetTimeBetweenEvictionRunsMillis\nsetIgnoreExceptionOnPreLoad\ngetDefaultReadOnly\ngetCommitOnReturn\ngetPool\nsetMaxIdle\ngetDataSource\ngetWaitCount\ngetValidationQuery\ngetValidationQueryTimeout\ngetDefaultTransactionIsolation\nsetDefaultReadOnly\ngetJdbcInterceptors\nsetFairQueue\ngetDefaultCatalog\nsetMaxActive\njavax.management.MBeanNotificationInfo[]\nsetConnectionProperties\nsetSuspectTimeout\nsetMinEvictableIdleTimeMillis\ngetValidatorClassName\nsetNumTestsPerEvictionRun\nsetInitSQL\nsetJdbcInterceptors\n\nfrom the ConnectionPool.\nThose parameters accessed by an instance variable in the ConnectionPool.\nMoreover, the orthogonality is the design would be enhanced.\n\nWhat do you think about that?", "id": 199808, "time": "2017-07-15T20:45:19Z", "creator": "lemesmachado@gmail.com", "creation_time": "2017-07-15T20:45:19Z", "is_private": false}]
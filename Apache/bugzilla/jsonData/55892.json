[{"attachment_id": null, "tags": [], "bug_id": 55892, "text": "With ProxyRemote configuration the HTTPS backend receives a request with an absoluteURI - which the backend couldn't handle.\n\nExample: \n> ServerName myserver.localnet\n> ProxyRemote https://foobar.com http://forwardproxy.localnet:8080\n> ProxyPass /content/ https://foobar.com/content/\n\nThe Request \n    https://myserver.localnet/content/index.html \nwill be received and logged by myserver.localnet as \n    \"GET /content/index.html HTTP/1.1\"\nAfter a successfull CONNECT handshake with the forwardproxy.localnet we get a SSL tunnel to the backend server. Cause of the SSL tunnel the request won't be transformed/touched by the forward proxy. But the proxy module always sends requests in the absoluteURI form to the backend if a forward proxy is configured. So the backend receives the request in the absoluteURI form: \n    \"GET https://foobar.com/content/indext.html HTTP/1.1\"\n\nRFC 2616 5.1.2 says that the absoluteURI form should be supported by every HTTP/1.1 Server. My backend seems to have an incomplete rfc implemetation here. :-(\n\nSetting the environment \"force-proxy-request-1.0\" doesn't help.\n\nI'm not sure about the severity. Is it a bug or a feature to handle improper backend server. ;-)", "count": 0, "id": 171777, "time": "2013-12-16T21:09:08Z", "creator": "hendrik.harms@gmail.com", "creation_time": "2013-12-16T21:09:08Z", "is_private": false}, {"attachment_id": 31119, "tags": [], "bug_id": 55892, "text": "Created attachment 31119\npatch for proxy_util.c\n\nI like to handle HTTPS requests via forward-proxy to backend like direct requests to backend.\nThis patch wants the \"force-proxy-request-1.0\" env to do so but I'm not sure that this is really the intention of this switch.", "count": 1, "id": 171778, "time": "2013-12-16T21:19:14Z", "creator": "hendrik.harms@gmail.com", "creation_time": "2013-12-16T21:19:14Z", "is_private": false}, {"count": 2, "text": "Trying to grok this... You seem to be mixing forward and reverse proxies here...", "bug_id": 55892, "attachment_id": null, "id": 172671, "time": "2014-01-24T13:12:30Z", "creator": "jim@apache.org", "creation_time": "2014-01-24T13:12:30Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 55892, "text": "Created attachment 31255\nsetup topology\n\nok, my setup is no very usual but there is no mixture between reverse and forward proxy in the apache setup.\n\nLike you can see on the picture (attachment) the Apache reverse proxy is only allowed to connect a special HTTPS-Backend through a HTTP-ForwordProxy. The Problem is that this backend could not serve absoluteURIs like defined in rfc-2616. When using the ProxyRemote setup the Apache Reverse Proxy sends every Request with absoluteURI. Also those tunneled with HTTPS though a HTTP-ForwaredProxy.\n\nI think sending HTTP-Requests to a ForwardProxy this behavior is ok but when using a https tunnel it could cause problems.\n\nThe patch would be an enhancement to attach such broken backends.\nMaybe the \"force-proxy-request-1.0\" switch is not the right one here.", "id": 172696, "time": "2014-01-26T12:06:04Z", "creator": "hendrik.harms@gmail.com", "creation_time": "2014-01-26T12:06:04Z", "is_private": false, "attachment_id": 31255}, {"count": 4, "tags": [], "bug_id": 55892, "is_private": false, "text": "This assessment is correct.  http://tools.ietf.org/html/rfc7230#section-5.3 is controlling.  Reviewing your proposed patch.\n\nScenario;\n\noutward.example.com\n - Gateway, reverse proxy\n - ProxyRemote http://{targetServer} http://proxy1.example.com\n - ProxyRemote https://{targetServer} http://proxy1.example.com\n - ProxyPass /foo http://{targetServer}/foo\n - ProxyPass /bar https://{targetServer}/bar\n\nproxy1.example.com\n - At DMZ, faces outward.example.com and behind firewall\n - http:// request seen as proxy GET http://targetServer/foo/ absolute-form\n - https:// request seen as proxy CONNECT targetServer authority-form\n\ntargetServer\n - for http from proxy1.example.com, proxy1 has truncated URI to origin-form /foo\n - for https from outward.example.com through proxy1 tunnel, outward failed\n   to truncate URI from https://targetServer/bar/ absolute-form to origin-form \n   of simply /bar/ (outward is a tunnel, it has no visibility into the tunneled \n   SSL stream's contents).", "id": 181360, "time": "2015-02-27T00:08:46Z", "creator": "wrowe@apache.org", "creation_time": "2015-02-27T00:08:46Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Comment on attachment 31119\npatch for proxy_util.c\n\n>--- modules/proxy/proxy_util.c.orig\t2013-07-11 14:21:19.000000000 +0200\n>+++ modules/proxy/proxy_util.c\t2013-12-16 16:06:36.000000000 +0100\n>@@ -2077,7 +2077,10 @@\n>      * short living pool.\n>      */\n>     /* are we connecting directly, or via a proxy? */\n>-    if (!proxyname) {\n>+    /* handle HTTP/1.0 via SSL like direct connect */\n>+    if (!proxyname ||\n>+        (conn->is_ssl &&\n>+         apr_table_get(r->subprocess_env, \"force-proxy-request-1.0\"))) {\n\nI think we should do this regardless of HTTP version, eg :\n+    if (!proxyname || conn->is_ssl) {\n\nThere is no point in forwarding a full URL to the target server (even in HTTP/1.1), it is not itself a forward proxy.\nIf it were, why would this work with HTTP/1.1 over SSL only, and not with HTTP/1.0 or without SSL?\n\n>         *url = apr_pstrcat(p, uri->path, uri->query ? \"?\" : \"\",\n>                            uri->query ? uri->query : \"\",\n>                            uri->fragment ? \"#\" : \"\",", "attachment_id": 31119, "id": 181367, "creator": "ylavic.dev@gmail.com", "time": "2015-02-27T09:19:18Z", "bug_id": 55892, "creation_time": "2015-02-27T09:19:18Z", "is_private": false}, {"count": 6, "text": "Well, here's a question;\n\nif (!proxyname || conn->is_ssl)\n\nsounds great, unless the fact is that the ProxyRemote itself was an https:// URL?\nThis would be common where the proxyremote receives authentication information that\nneeds to be secured, e.g. an https:// CONNECT connection that then opaquely tunnels \nan https:// session.\n\nI think we need to disambiguate whether proxyname is for a CONNECT request or target \nhost, and base the behavior off of this.", "bug_id": 55892, "attachment_id": null, "id": 181503, "time": "2015-03-04T16:34:54Z", "creator": "wrowe@apache.org", "creation_time": "2015-03-04T16:34:54Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 55892, "attachment_id": null, "id": 181504, "time": "2015-03-04T16:43:45Z", "creator": "wrowe@apache.org", "creation_time": "2015-03-04T16:43:45Z", "is_private": false, "text": "Scratch that concern, I guess \n\nif (!proxyname || conn->is_ssl)\n\nis the correct patch.  All https:// requests will have the origin-form of the URI and all non-Remote'd requests will have the origin-form of the URI (also correct).\n\nYann, do we have agreement to commit and push back to 2.4 (and perhaps 2.2)?"}, {"count": 8, "text": "(In reply to William A. Rowe Jr. from comment #7)\n> Yann, do we have agreement to commit and push back to 2.4 (and perhaps 2.2)?\n\nYes, absolutely.", "bug_id": 55892, "attachment_id": null, "id": 181505, "time": "2015-03-04T16:59:53Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-03-04T16:59:53Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 55892, "text": "Committed in r1665215, backport to 2.4 proposed in r1665220, to 2.2 in r1665229.", "id": 181604, "time": "2015-03-09T13:31:48Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-03-09T13:31:48Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 55892, "attachment_id": null, "is_private": false, "id": 182618, "time": "2015-04-24T20:03:36Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-04-24T20:03:36Z", "text": "Backported to 2.4.12 in r1665215."}]
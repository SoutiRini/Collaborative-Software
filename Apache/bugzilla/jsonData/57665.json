[{"count": 0, "tags": [], "text": "tomcat-embed-core-8.0.20-sources.jar!/org/apache/catalina/valves/RemoteIpValve.java\n\ntl;dr\nPlease add support for X-Forwarded-Host\n\nwhen running tomcat-embedder behing a proxy\nrequest goes to https://example.com/application/path\n\nfrom there it's proxies to the application\nwith \nGET /application/path HTTP...\nHost: internaladdress.xx\nX-Forwarded-Proto: https\nX-Forwarded-Host: example.com\n...\n\nLater when a redirect/url is build\nX-Forwarded-Host should be used", "attachment_id": null, "bug_id": 57665, "id": 181521, "time": "2015-03-05T09:21:25Z", "creator": "f.kowal@gmail.com", "creation_time": "2015-03-05T09:21:25Z", "is_private": false}, {"count": 1, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 181791, "attachment_id": null, "bug_id": 57665, "creation_time": "2015-03-15T23:43:01Z", "time": "2015-03-15T23:43:01Z", "text": "*** Bug 57711 has been marked as a duplicate of this bug. ***"}, {"count": 2, "tags": [], "creator": "robert.p.thornton@gmail.com", "attachment_id": null, "id": 191273, "time": "2016-05-26T18:18:56Z", "bug_id": 57665, "creation_time": "2016-05-26T18:18:56Z", "is_private": false, "text": "The best workaround so far (which is really just a hack) is to extend Http11NioProtocol as shown below:\n\n/**\n * Custom Tomcat Protocol based off of Http11NioProtocol that looks for an\n * X-Forwarded-Host header and sets the serverName in the request to that \n * value.\n * \n * This couldn't be done in a Valve because a Valve is processed too late to \n * handle a context name redirect. For example if the url\n * `https://example.org/book` is requested.  Really early in the request \n * Tomcat will redirect this url to `https://example.org/book/`.\n * This protocol will provide the X-Forwarded-Host header value even for that\n * type of redirect.\n * \n * To use simply set this class as the value of the\n * {@code Connector->protocol} attribute in server.xml\n */\npublic static class XForwardedHostHandlingHttp11NioProtocol extends Http11NioProtocol\n{\n    @Override\n    public void setAdapter(final Adapter adapter) {\n        Adapter adapterFacade = (Adapter) Proxy.newProxyInstance(\n                XForwardedHostHandlingHttp11NioProtocol.class.getClassLoader(),\n                new Class[] {Adapter.class}, (proxy, method, args) ->\n                {\n                    if (method.getName().equals(\"service\")) {\n                        Request req = (Request)args[0];\n                        String header = req.getHeader(\"X-Forwarded-Host\");\n                        if (header != null) {\n                            req.serverName().setString(header);\n                        }\n                    }\n                    return method.invoke(adapter, args);\n                });\n        super.setAdapter(adapterFacade);\n    }\n}"}, {"count": 3, "tags": [], "bug_id": 57665, "is_private": false, "id": 191935, "creation_time": "2016-06-24T12:06:15Z", "time": "2016-06-24T12:06:15Z", "creator": "stf@molindo.at", "text": "Created attachment 33985\npatch that adds optional X-Forwarded-Host support", "attachment_id": 33985}, {"count": 4, "tags": [], "creator": "stf@molindo.at", "attachment_id": null, "is_private": false, "id": 191936, "time": "2016-06-24T12:10:04Z", "bug_id": 57665, "creation_time": "2016-06-24T12:10:04Z", "text": "The patch adds support for a hostHeader that works analogue to the existing portHeader. It's disabled by default, keeping backward compatibility. Setting it to a value like X-Forwarded-Host will override the value returned by ServletRequest.getServerName()"}, {"count": 5, "tags": [], "creator": "ramarbalasubramanian@gmail.com", "is_private": false, "id": 197388, "attachment_id": null, "bug_id": 57665, "creation_time": "2017-03-02T13:06:15Z", "time": "2017-03-02T13:06:15Z", "text": "(In reply to Stefan Fussenegger from comment #4)\n> The patch adds support for a hostHeader that works analogue to the existing\n> portHeader. It's disabled by default, keeping backward compatibility.\n> Setting it to a value like X-Forwarded-Host will override the value returned\n> by ServletRequest.getServerName()\n\nIn which version of tomcat, this fix is available? I did not see this fix in tomcat 9 and 8."}, {"count": 6, "text": "(In reply to Balasubramanian from comment #5)\n> In which version of tomcat, this fix is available? I did not see this fix in\n> tomcat 9 and 8.\n\nWhat led you to believe that this enhancement request and patch had been applied to /any/ version of Tomcat?", "bug_id": 57665, "is_private": false, "id": 197504, "time": "2017-03-07T15:49:26Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-03-07T15:49:26Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "is_private": false, "id": 197505, "time": "2017-03-07T15:59:20Z", "bug_id": 57665, "creation_time": "2017-03-07T15:59:20Z", "text": "I'm curious why this enhancement has even been requested. My understanding of the HTTP spec is that the \"Host\" header should not be modified by an intervening reverse-proxy.\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23\n\nIf you request http://example.com/application/path, then the client RFC-MUST supply \"Host: example.com\" in the headers and any reverse-proxy RFC-MUST forward that \"Host: example.com\" header on to the origin server.\n\nWhat reverse-proxy are you using which changes the \"Host\" header?"}, {"count": 8, "tags": [], "text": "We modify the Host header mostly to work around limitations in application platforms our apps are hosted on.\n\nFor example, Cloud Foundry only recently added support for path based routing and even still it only supports different paths for applications hosted in the same \"space\".  If I have 2 applications that with different paths but need the same host then with Cloud Foundry modifying the Host header via configuration in an upstream load balancer is often the only option available to many of us.", "is_private": false, "bug_id": 57665, "id": 197507, "time": "2017-03-07T16:25:58Z", "creator": "youngm@gmail.com", "creation_time": "2017-03-07T16:25:58Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "stf@molindo.at", "attachment_id": null, "is_private": false, "id": 197508, "time": "2017-03-07T16:31:12Z", "bug_id": 57665, "creation_time": "2017-03-07T16:31:12Z", "text": "There are other scenarios than \"an intervening reverse-proxy\". One example would be a CDN that use the Host header of the backend and adds the original value as X-Forwarded-Host. (e.g. \"Host: origin.example.com\" and \"X-Fowarded-Host: cdn.example.com\"). Some applications running on \"origin.example.com\" will then use the Host header to create absolute links and redirects to \"origin.example.com\" which isn't wanted. The easiest workaround is to hide the real value of the \"Host\" header and use \"X-Forwarded-Host\" instead - which is what this patch is doing.\n\n\nsee http://stackoverflow.com/questions/19084340/real-life-usage-of-the-x-forwarded-host-header for more examples"}, {"count": 10, "tags": [], "bug_id": 57665, "attachment_id": null, "id": 197509, "time": "2017-03-07T16:48:13Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-03-07T16:48:13Z", "is_private": false, "text": "Okay. I have no particular objection to this patch.. I just wanted to understand the use-cases a little more."}, {"count": 11, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 197585, "time": "2017-03-10T14:24:05Z", "bug_id": 57665, "creation_time": "2017-03-10T14:24:05Z", "is_private": false, "text": "The proposed patch adds this to the Valve. The Filter also needs to be updated as does the documentation.\n\nGenerally, I don't like adding features in Tomcat to work around 3rd party components that don't follow the relevant spec. In this case it looks like we might need to make an exception."}, {"count": 12, "text": "I think there are reasonable use-cases for X-Forwarded-Host. Stefan, if you wouldn't mind augmenting the patch to include similar changes to the Filter and the documentation as well, I'm happy to commit it.", "bug_id": 57665, "is_private": false, "id": 197593, "time": "2017-03-10T21:49:46Z", "creator": "chris@christopherschultz.net", "creation_time": "2017-03-10T21:49:46Z", "tags": [], "attachment_id": null}, {"count": 13, "tags": [], "creator": "stf@molindo.at", "attachment_id": 34824, "is_private": false, "id": 197660, "time": "2017-03-14T14:31:30Z", "bug_id": 57665, "creation_time": "2017-03-14T14:31:30Z", "text": "Created attachment 34824\npatch that adds optional X-Forwarded-Host support to RemoteIpValve and RemoteIpFilter\n\nnew patch that adds X-Forwarded-Host header support to RemoteIpFilter and RemoteIpValve\n\nthere currently is no documentation of X-Forwarded-Port to use as an example."}, {"count": 14, "text": "Note that proxies like Apache with mod_proxy will create a comma separate list of the X-Forwarded-Host if the incoming request already contains a X-Forwarded-Host header (similar to X-Forwarded-For). Rfc7239 is not completely clear whether this is allowed or not, but it still common practice. \n\nThe patch does not seem to support this (at least no unit test covers this situation).", "bug_id": 57665, "attachment_id": null, "id": 198730, "time": "2017-05-09T05:14:42Z", "creator": "richard.swart@nlighten.nl", "creation_time": "2017-05-09T05:14:42Z", "tags": [], "is_private": false}, {"count": 15, "tags": [], "creator": "stf@molindo.at", "attachment_id": null, "is_private": false, "id": 198733, "time": "2017-05-09T07:42:52Z", "bug_id": 57665, "creation_time": "2017-05-09T07:42:52Z", "text": "(In reply to Richard Swart from comment #14)\n> Note that proxies like Apache with mod_proxy will create a comma separate\n> list of the X-Forwarded-Host if the incoming request already contains a\n> X-Forwarded-Host header (similar to X-Forwarded-For). Rfc7239 is not\n> completely clear whether this is allowed or not, but it still common\n> practice. \n> \n> The patch does not seem to support this (at least no unit test covers this\n> situation).\n\nThis case is actually covered with this line:\n\nString hostAndPort[] = hostHeaderValue.split(\",\")[0].trim().split(\":\", 2);"}, {"count": 16, "tags": [], "text": "What is the release target for this patch?", "attachment_id": null, "bug_id": 57665, "id": 201291, "time": "2017-10-03T21:14:05Z", "creator": "robert.p.thornton@gmail.com", "creation_time": "2017-10-03T21:14:05Z", "is_private": false}, {"count": 17, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 201293, "time": "2017-10-03T23:49:10Z", "bug_id": 57665, "creation_time": "2017-10-03T23:49:10Z", "is_private": false, "text": "(In reply to Robert from comment #16)\n> What is the release target for this patch?\n\nThere is none; it hasn't been merged."}]
[{"count": 0, "tags": [], "bug_id": 55666, "text": "I have reverse proxy with backend webserver enabled with both SSL and gzip compression.\n\nFor certain application backend webserver is sending only 1 byte of data for first time, and then it sends around 4k of data.\nBelow is gdb output from mod_deflate in function \"inflate_out_filter\"\n==============================\n(gdb) p data\n$6 = 0x7f3e559ef700 \"\\037\"\n(gdb) p len\n$7 = 1\n\nSecond time  4495 byte comes to deflate\n\n(gdb) p len\n$10 = 4495\n(gdb) p data\n$11 = 0x7f3e559ef700 \"\\213\\b\"\n===============================\n\nAs gzip header is 10 bytes, and first data is only 1 byte, mod_deflate is not able to handle this, even-though next time it is sending remaining data, and giving error as \"Insufficient data for inflate\"( Full log is attached) and for second data which 4495 bytes its giving error as \"Validation bytes not present\".\n\nApplication on Backend webserver works fine if disabled with SSL, and also works fine if disabled with gzip.", "id": 170662, "time": "2013-10-18T06:08:58Z", "creator": "somashekhar.sonnagi@gmail.com", "creation_time": "2013-10-18T06:08:58Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "somashekhar.sonnagi@gmail.com", "attachment_id": 30936, "text": "Created attachment 30936\nError log file of apache(reverse proxy), log is stripped with encrypted data.", "id": 170663, "time": "2013-10-18T06:30:44Z", "bug_id": 55666, "creation_time": "2013-10-18T06:30:44Z", "is_private": false}, {"count": 2, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 30937, "text": "Created attachment 30937\nmod_deflate inflate header buffering (2.2.x)\n\nCan you verify this patch works for you ?", "id": 170665, "time": "2013-10-18T08:50:43Z", "bug_id": 55666, "creation_time": "2013-10-18T08:50:43Z", "is_private": false}, {"count": 3, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 30938, "text": "Created attachment 30938\nmod_deflate inflate header buffering (trunk/2.4.x)\n\nOr maybe on trunk/2.4.x ?", "id": 170666, "time": "2013-10-18T08:54:09Z", "bug_id": 55666, "creation_time": "2013-10-18T08:54:09Z", "is_private": false}, {"count": 4, "attachment_id": 30939, "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30939\nmod_deflate inflate header buffering (trunk/2.4.x)\n\nThis the good (corresponding) trunk/2.4.x patch.", "id": 170667, "time": "2013-10-18T09:04:00Z", "bug_id": 55666, "creation_time": "2013-10-18T09:04:00Z", "tags": [], "is_private": false}, {"count": 5, "text": "Created attachment 30959\nmodified diff\n\nThank you Yann Ylavic for providing a fix.\nI tried your fix, but did not work straight forward, I modified little bit to make it work. attaching the modified version of diff.\n\nThank you once again.", "bug_id": 55666, "attachment_id": 30959, "id": 170791, "time": "2013-10-24T07:19:18Z", "creator": "somashekhar.sonnagi@gmail.com", "creation_time": "2013-10-24T07:19:18Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 55666, "attachment_id": 30960, "id": 170804, "time": "2013-10-24T12:24:27Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-24T12:24:27Z", "is_private": false, "text": "Created attachment 30960\nmod_deflate inflate header+flags buffering (2.2.x)\n\nHere is a more complete patch for the inflate_out_filter (including your fix) which also takes care of flags truncation (ie. EXTRA_FIELD, ORIG_NAME, COMMENT, and HEAD_CRC), in addition to the header truncation.\n\nIt also fixes header truncated (and reentrance in non-blocking mode) for the deflate_in_filter (which in fact inflates the input).\n\nCan you test that one on your side for 2.2.x?\n\ntrunk/2.4.x is coming next, if all is good."}, {"count": 7, "text": "Created attachment 30961\nmod_deflate inflate header+flags+crc buffering (2.2.x)\n\nA new patch that also handles CRC verification reentrance.\n\nAlso, the parsing/stripping of the zlib flags is now done by a function which can be used both by inflate_out_filter (as existing) and deflate_in_filter (change the #if 0 to 1 to use it there too, for now it is disabled to preserve the existing behaviour).\n\nDon\"t use the previous patch since it may cause an infinite loop (fixed here).", "bug_id": 55666, "attachment_id": 30961, "id": 170813, "time": "2013-10-24T17:35:18Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-24T17:35:18Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 55666, "attachment_id": null, "id": 170814, "time": "2013-10-24T17:44:16Z", "creator": "covener@gmail.com", "creation_time": "2013-10-24T17:44:16Z", "is_private": false, "text": "(In reply to Yann Ylavic from comment #7)\n> Created attachment 30961 [details]\n> mod_deflate inflate header+flags+crc buffering (2.2.x)\n> \n> A new patch that also handles CRC verification reentrance.\n> \n> Also, the parsing/stripping of the zlib flags is now done by a function\n> which can be used both by inflate_out_filter (as existing) and\n> deflate_in_filter (change the #if 0 to 1 to use it there too, for now it is\n> disabled to preserve the existing behaviour).\n> \n> Don\"t use the previous patch since it may cause an infinite loop (fixed\n> here).\n\nThanks on this issue too.\n\nWould it be possible to stage these patches in some way for review purposes?  I know it's painful to go backwards."}, {"count": 9, "tags": [], "bug_id": 55666, "text": "Created attachment 30962\nmod_deflate inflate header+flags+crc buffering (2.2.x)\n\nFix test APR_BRIGADE_EMPTY(bb) => APR_BRIGADE_EMPTY(ctx->bb) in the non-blocking case.", "id": 170816, "time": "2013-10-24T18:07:55Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-24T18:07:55Z", "is_private": false, "attachment_id": 30962}, {"count": 10, "tags": [], "bug_id": 55666, "text": "(In reply to Eric Covener from comment #8)\n> (In reply to Yann Ylavic from comment #7)\n> > Created attachment 30961 [details]\n> > mod_deflate inflate header+flags+crc buffering (2.2.x)\n> > \n> > A new patch that also handles CRC verification reentrance.\n> > \n> > Also, the parsing/stripping of the zlib flags is now done by a function\n> > which can be used both by inflate_out_filter (as existing) and\n> > deflate_in_filter (change the #if 0 to 1 to use it there too, for now it is\n> > disabled to preserve the existing behaviour).\n> > \n> > Don\"t use the previous patch since it may cause an infinite loop (fixed\n> > here).\n> \n> Thanks on this issue too.\n> \n> Would it be possible to stage these patches in some way for review purposes?\n> I know it's painful to go backwards.\n\nI'm front-porting to trunk now and I'll provide test cases.\nIs that what you mean?", "id": 170817, "time": "2013-10-24T18:22:20Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-24T18:22:20Z", "is_private": false, "attachment_id": null}, {"count": 11, "attachment_id": null, "creator": "covener@gmail.com", "text": "> > \n> > Would it be possible to stage these patches in some way for review purposes?\n> > I know it's painful to go backwards.\n> \n> I'm front-porting to trunk now and I'll provide test cases.\n> Is that what you mean?\n\nI meant in terms of several small patches vs. a comprehensive one (where possible) so they can be individually digested/reviewed/committed withou thaving to absorb the entire thing in aggregate.", "id": 170821, "time": "2013-10-24T23:11:00Z", "bug_id": 55666, "creation_time": "2013-10-24T23:11:00Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "bug_id": 55666, "text": "Created attachment 30973\ninflate output filter header buffering (trunk 1/6)\n\nFirst of six patches to handle inflate reentrance in the mod_deflate's output and input filters.\n\nPatch 1. Handle Zlib header buffering in the inflate output filter :\n\n- adds the new deflate_ctx_t fields needed to re-enter the Zlib header parsing,\n\n- declares the new consume_zlib_flags() function to parse/consume the ZLib flags (will be used for the input filter too in a following patch),\n\n- fixes a (possible) size_t underflow when parsing/consuming ZLib nul-terminated string flags (eg. \"while (len-- && *data++);\" could underflow len if the nul is not reached in the bucket).\n\nThis patch fixes the current PR, but the issue still remains for the inflate input filter (hence the following patches).", "id": 170863, "time": "2013-10-27T23:33:17Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-27T23:33:17Z", "is_private": false, "attachment_id": 30973}, {"count": 13, "attachment_id": 30974, "creator": "ylavic.dev@gmail.com", "is_private": false, "id": 170864, "time": "2013-10-27T23:47:42Z", "bug_id": 55666, "creation_time": "2013-10-27T23:47:42Z", "tags": [], "text": "Created attachment 30974\ninflate input filter header buffering (trunk 2/6)\n\nPatch 2. Handle Zlib header buffering in the inflate input filter :\n\n- uses the new deflate_ctx_t fields from the previous patch 1,\n\n- fixes the double ap_get_brigade() when an EOS brigade is encountered while reading the header, eg :\n\n         /* zero length body? step aside */\n         bkt = APR_BRIGADE_FIRST(ctx->bb);\n         if (APR_BUCKET_IS_EOS(bkt)) {\n+            APR_BUCKET_REMOVE(bkt);\n+            APR_BRIGADE_INSERT_TAIL(bb, bkt);\n             ap_remove_input_filter(f);\n-            return ap_get_brigade(f->next, bb, mode, block, readbytes);\n+            return APR_SUCCESS;\n         }"}, {"count": 14, "attachment_id": 30975, "creator": "ylavic.dev@gmail.com", "is_private": false, "id": 170865, "time": "2013-10-27T23:51:57Z", "bug_id": 55666, "creation_time": "2013-10-27T23:51:57Z", "tags": [], "text": "Created attachment 30975\ninflate input filter validation bytes buffering (trunk 3/6)\n\nPatch 3. Handle Zlib validation bytes buffering (CRC + length, eg. footer)."}, {"count": 15, "tags": [], "bug_id": 55666, "attachment_id": 30976, "id": 170866, "time": "2013-10-27T23:57:41Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-27T23:57:41Z", "is_private": false, "text": "Created attachment 30976\ninflate input filter with non-blocking read (trunk 4/6)\n\nPatch 4. In the inflate input filter, return immediatly when a non-blocking read would block.\n\nNote that a non-blocking read which would block while reading the ZLib header is handled by patch 2 with :\n\n+        rv = ap_get_brigade(f->next, ctx->bb, AP_MODE_READBYTES, block,\n+                            len);\n+\n+        /* ap_get_brigade may return success with an empty brigade for\n+         * a non-blocking read which would block (an empty brigade for\n+         * a blocking read is an issue which is simply forwarded here).\n+         */\n+        if (rv != APR_SUCCESS || APR_BRIGADE_EMPTY(ctx->bb)) {\n             return rv;\n         }"}, {"count": 16, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": 30977, "id": 170867, "creation_time": "2013-10-28T00:27:34Z", "time": "2013-10-28T00:27:34Z", "bug_id": 55666, "text": "Created attachment 30977\ninflate input filter with Zlib flags (trunk 5/6)\n\nPatch 5. Handle Zlib flags in the input filter as already existing in the output filter, using the common consume_zlib_flags().", "is_private": false}, {"count": 17, "attachment_id": 30978, "creator": "ylavic.dev@gmail.com", "text": "Created attachment 30978\nmod_deflate safety splits (trunk 6/6)\n\nThis latest patch 6 ensures that bucket don't exceed INT_MAX length (Zlib lengths are ints), or split the bucket (should one ask to inflate a 3gig tarball, the CPU would now burn before mod_deflate :p ).\n\nThis patch also takes the fast path if the bucket is empty.", "id": 170868, "time": "2013-10-28T00:37:29Z", "bug_id": 55666, "creation_time": "2013-10-28T00:37:29Z", "tags": [], "is_private": false}, {"count": 18, "tags": [], "bug_id": 55666, "attachment_id": 30979, "id": 170869, "time": "2013-10-28T00:53:16Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-28T00:53:16Z", "is_private": false, "text": "Created attachment 30979\nmod_deflate all in one patch (trunk)\n\nFinally the full patch, with the correct indentation (which has sometimes been muted in the previous patches, that was to show that unchanged code have simply been put into lower blocks).\n\nThanks for reviewing these (smaller) patches.\nRegards."}, {"count": 19, "tags": [], "bug_id": 55666, "attachment_id": 30983, "id": 170883, "time": "2013-10-28T14:43:20Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2013-10-28T14:43:20Z", "is_private": false, "text": "Created attachment 30983\nmod_deflate all in one patch (2.2.x)\n\nAt last, the full patch for 2.2.x (should this be backported).\n\nNote I also merged the error (failure) logs from trunk which did not exist in 2.2.x (where most Zlib errors are not logged). That may be a behaviour change per se, so let me know if you want me to revert them."}, {"count": 20, "tags": [], "bug_id": 55666, "attachment_id": null, "id": 171205, "time": "2013-11-13T11:41:44Z", "creator": "somashekhar.sonnagi@gmail.com", "creation_time": "2013-11-13T11:41:44Z", "is_private": false, "text": "Sorry,Yann Ylavic i don't have proper setup now to test this."}, {"count": 21, "tags": [], "creator": "ylavic.dev@gmail.com", "attachment_id": null, "text": "Bug 46146 is older.\nI plan to commit the patches from here and report there.\n\n*** This bug has been marked as a duplicate of bug 46146 ***", "id": 173521, "time": "2014-02-27T16:11:33Z", "bug_id": 55666, "creation_time": "2014-02-27T16:11:33Z", "is_private": false}]
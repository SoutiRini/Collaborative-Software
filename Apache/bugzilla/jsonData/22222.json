[{"count": 0, "tags": [], "creator": "f.spies@spiconsult.de", "text": "It should be possible to \n* set a timeout on the Driver.run() method or\n* to stop a Driver object and make it stop execute its run() method.\n\nSometimes the rendering process lasts longer than you want to wait, but there is\nno way to cancel a running driver in a clean way.", "id": 42341, "attachment_id": null, "bug_id": 22222, "creation_time": "2003-08-07T16:12:40Z", "time": "2003-08-07T16:12:40Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 22222, "text": "I'm unsure about this.  FOP of course takes considerable memory while running.  \nTo be able to cleanly reset itself at anytime during processing may be very \ndifficult for us to do, may not be worth the effort--I don't believe even Xalan \nattempts to offer this feature.\n\nYou should be able to set your program to cancel the thread (and do whatever \napp-specific handling necessary) that the Driver object runs on should FOP take \ntoo long to generate your document.  That is probably the fastest way for \nmemory recollection, even if you do have to reinitialize a driver object on a \nsubsequent run.  Timeout handling is most robust when done from the calling \napplication anyway--i.e., even if FOP had these functions you'd probably want \nto resort to multithreading on your side anyway.\n\nAlso, to provide the feature directly within Driver would require Driver itself \nto run multi-threaded--probably unneeded complexity given that frequently \nwhatever is calling Driver (servlets, etc.) is itself already running \nmultithreaded.\n\nSo I'm setting this to WONTFIX, unless others on the team see this issue \notherwise...", "id": 45868, "time": "2003-10-17T23:34:19Z", "creator": "glenmazza@yahoo.com", "creation_time": "2003-10-17T23:34:19Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 22222, "attachment_id": null, "id": 45928, "time": "2003-10-20T15:08:33Z", "creator": "f.spies@spiconsult.de", "creation_time": "2003-10-20T15:08:33Z", "is_private": false, "text": "Okay.\nI was asking because we are running multiple fop in a multithreaded environment,\nand since Thread.stop() has been deprecated the only thing we could when one\nThread was hanging was to shut down the entire JVM, and thats not so nice.\nRecently, I heard that there are plans to include \"Isolates\" in Java 1.5, which\nwill allow us to let our Threads run in different isolates and shut down the one\nthat hangs without affecting the others. That will be fine, so I think waiting\nfor 1.5 will be just fine."}, {"count": 3, "tags": [], "text": "Thanks for the information on the new features of 1.5--we'll refer to them \nshould this issue arise again!\n\nGlen", "attachment_id": null, "id": 46012, "creator": "glenmazza@yahoo.com", "time": "2003-10-21T21:26:12Z", "bug_id": 22222, "creation_time": "2003-10-21T21:26:12Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 22222, "text": "batch transition to closed remaining pre-FOP1.0 resolved bugs", "id": 156827, "time": "2012-04-01T13:53:30Z", "creator": "gadams@apache.org", "creation_time": "2012-04-01T13:53:30Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 40306, "attachment_id": null, "text": "After the FormAuthenticator intercepts a POST request to a protected resource,\nthe original request is not properly restored upon successful login when using\nmod_jk. When connectiong to tomcat directly (8080), the POST request is restored\nas expected.\n\nI've tested this with mod_jk 1.2.15 and 1.2.18. It seems the problem is that the\norginal request is not saved properly. I (think) I've narrowed down the issue in\n  FormAuthenticator.java. body.toString() was returning null. (The buffer was\nnull) so it looks like the root of the problem is that nothing is read from the\ninput stream.\n\nDuring testing I reverted to the old way of adding the request parameters\n(saved.addParameter()) to see if they were indeed there and it worked. \n\nI also tried,\nInputStream is = new BufferedInputStream(request.getInputStream()); \nwhich didn't work..\n\n\nfrom FormAuthenticator.java: \n\nprotected void saveRequest(Request request, Session session)\n        throws IOException {\n\n      ...\n\n      if (\"POST\".equalsIgnoreCase(request.getMethod())) {\n            ByteChunk body = new ByteChunk();\n            body.setLimit(request.getConnector().getMaxSavePostSize());\n\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            InputStream is = request.getInputStream();\n        \n            while ( (bytesRead = is.read(buffer) ) >= 0) {\n                body.append(buffer, 0, bytesRead);\n            }\n\t\t\t\n            saved.setBody(body);\n        } \n\n        ...\n}", "id": 92477, "time": "2006-08-23T19:48:03Z", "creator": "aloucks@cofront.net", "creation_time": "2006-08-23T19:48:03Z", "is_private": false}, {"count": 1, "tags": [], "creator": "aloucks@cofront.net", "text": "I've also seen the following warning occasionaly showing up in catalina.out,\nhowever I do not know if it is related:\n\nWARN (org.apache.jk.core.MsgContext:295) - Error sending end packet\njava.net.SocketException: Broken pipe\n        at java.net.SocketOutputStream.socketWrite0(Native Method)\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)\n        at org.apache.jk.common.ChannelSocket.send(ChannelSocket.java:518)\n        at org.apache.jk.common.JkInputStream.endMessage(JkInputStream.java:112)\n        at org.apache.jk.core.MsgContext.action(MsgContext.java:293)\n        at org.apache.coyote.Response.action(Response.java:182)\n        at org.apache.coyote.Response.finish(Response.java:304)\n        at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:204)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:282)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:754)\n        at\norg.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:684)\n        at\norg.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:876)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n        at java.lang.Thread.run(Thread.java:595)", "id": 92550, "time": "2006-08-25T18:39:22Z", "bug_id": 40306, "creation_time": "2006-08-25T18:39:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 40306, "attachment_id": null, "id": 92570, "creation_time": "2006-08-27T05:14:49Z", "time": "2006-08-27T05:14:49Z", "creator": "aloucks@cofront.net", "text": "After going over this again, body.toString() wasn't returning null after all,\nbut the POST parameter values were still missing. I debugged the coyoteRequest\nand noticed that the contentLength was equal to -1 upon entering the\nrestoreRequest() method of FormAuthenticator when going over the http connector\n(8080). When going over AJP it was set to 0. \n\nThis causes a problem in\norg.apache.catalina.connector.Request.parseParameters(). Before attempting to to\nfind POST parameters, it calls org.apache.coyote.Request.getContentLength()\nwhich doesn't look at the content-length header when the current value of\ncontentLength > -1. Being that the current value equals 0, no parameters were\nparsed.  \n\nAt any rate, the following code fixes the problem.\n\norg.apache.coyote.ajp.AjpAprProcessor.java (5.5.16), starting at line 579:\n\n        } else if (actionCode == ActionCode.ACTION_REQ_SET_BODY_REPLAY) {\n\n            // Reset the content length on the saved request.\n            request.setContentLength(-1);\n            // Set the given bytes as the content\n            ByteChunk bc = (ByteChunk) param;\n            bodyBytes.setBytes(bc.getBytes(), bc.getStart(), bc.getLength());\n            first = false;\n            empty = false;\n            replay = true;\n\n        }\n \nI would greatly appreciate it if a commiter would take a look at this.", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40306, "attachment_id": 18755, "id": 92591, "time": "2006-08-27T21:30:18Z", "creator": "aloucks@cofront.net", "creation_time": "2006-08-27T21:30:18Z", "is_private": false, "text": "Created attachment 18755\najp/jk connector patch\n\nResets the contentLength to -1 on the request so that future calls to\nRequest.getContentLengthLong() will examine the 'content-length' header and\nreturn the actual content length. \n\nThis occurs when a SavedRequest is restored\n(ActionCode.ACTION_REQ_SET_BODY_REPLAY). \n\nWithout resetting this value, the current contentLength equals 0 and POST\nparameters are never parsed on the restored SavedRequest.\n\nconnectors/jk/java/org/apache/jk/core/MsgContext.java\nconnectors/jk/java/org/apache/coyote/ajp/AjpAprProcessor.java"}, {"count": 4, "tags": [], "bug_id": 40306, "text": "Comment on attachment 18755\najp/jk connector patch\n\nthe patch was created using the SVN trunk.", "id": 92592, "attachment_id": 18755, "creator": "aloucks@cofront.net", "creation_time": "2006-08-27T21:32:28Z", "time": "2006-08-27T21:32:28Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 40306, "attachment_id": null, "text": "Actually, the HTTP connector sets the content length of the request to the saved\nbody length (which is the right thing to do), although it is a bit hidden.", "id": 92593, "time": "2006-08-28T00:32:38Z", "creator": "remm@apache.org", "creation_time": "2006-08-28T00:32:38Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 40306, "attachment_id": null, "text": "Patch applied to SVN trunk.  \n\nThanks much!", "id": 92595, "time": "2006-08-28T03:47:40Z", "creator": "william.barker@wilshire.com", "creation_time": "2006-08-28T03:47:40Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 40306, "attachment_id": null, "id": 92608, "creation_time": "2006-08-28T09:21:51Z", "time": "2006-08-28T09:21:51Z", "creator": "remm@apache.org", "text": "No, to be consistent with the HTTP connector, it should be\nsetContentLength(bc.getLength()). In practice, it won't make much difference, I\nthink, but you never know.", "is_private": false}, {"count": 8, "tags": [], "bug_id": 40306, "attachment_id": null, "id": 98038, "creation_time": "2007-01-14T07:46:25Z", "time": "2007-01-14T07:46:25Z", "creator": "markt@apache.org", "text": "*** Bug 41244 has been marked as a duplicate of this bug. ***", "is_private": false}]
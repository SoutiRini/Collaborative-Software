[{"count": 0, "tags": [], "creator": "simon.spruzen@rbos.com", "attachment_id": null, "id": 11997, "time": "2002-03-19T13:28:09Z", "bug_id": 7242, "creation_time": "2002-03-19T13:28:09Z", "is_private": false, "text": "Please can you expand the defintion (and implementation) of Pattern \n(http://jakarta.apache.org/ant/manual/dirtasks.html#patterns) to allow a \npattern to use the comma operator to define a list of patterns. So:\n\nx,y,z\n\nis currently a list of 3 patterns: x, y, z. This works in some elements, but \nnot others. But I'd like this to be a single pattern with 3 sub-patterns.\n\nThe result of the comma operator would be the concatenated list of applicable \nfiles with duplicates removed, so each sub-pattern could still use * and ** as \nrequired: *.jar,**/whatever/*.jar.\n\nThe list of files ought to be evaluated when (if) the pattern is first \nreferenced in an active target, because previous targets may change the list of \napplicable files.\n\nWhy do I want this?\n\nThe Patternset includes attribute vs. the nested include element is confusing \nand limiting. Take this case:\n\n<!-- case 1 -->\n<patternset id=\"ejb.resource.files\">\n    <include name=\"${ejb.resource.include.files}\" \nif=\"ejb.resource.include.files\"/>\n</patternset>\n\nThis silently breaks if the ejb.resource.include.files property needs to be \ndefined as a list of files. Whereas:\n\n<!-- case 2 -->\n<patternset id=\"ejb.resource.files\" includes=\"${ejb.resource.include.files}\" />\n\njust as silently does the right thing, but without the benefit of the 'if' \nattribute.\n\nIt's worse if ejb.resource.include.files isn't defined: case 1 becomes an empty \npattern which will imply 'include everything' in FileSets; case 2 becomes an \nempty pattern which will include nothing due to the side effect of property \nname expansion on names of non-existant properties (they expand to themselves, \nrather than standard shell behaviour of expanding to nothing: \"\". I rely on \nthis side effect in a number of places, so if you change this behaviour, you \nwill break a lot of (my) scripts!). To be safe, case 1 might need to be \nrewritten as:\n\n<!-- case 1a -->\n<patternset id=\"ejb.resource.files\">\n    <include name=\"${ejb.resource.include.files}\" \nif=\"ejb.resource.include.files\"/>\n    <include name=\"[NONE]\" unless=\"ejb.resource.include.files\"/>\n</patternset>\n\nso if ejb.resource.include.files isn't defined, the patternset contains the \nsingle name: \"[NONE]\", which won't tend to exist as a file.\n\n\nsimon."}, {"count": 1, "tags": [], "text": "The name attribute of include doesn't support any separating token for a simple\nreason - you wouldn't be able to specify file names that themselves contain\na comma.\n\nI don't understand why you cannot simply use multiple <include> elements.", "attachment_id": null, "bug_id": 7242, "id": 25924, "time": "2002-11-08T13:34:40Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-08T13:34:40Z", "is_private": false}, {"count": 2, "tags": [], "text": "But this works:\n\n<patternset id=\"source.files\"\n                includes=\"*.cmd,*.sh,*.xml,*.template,*.pl\"/>\n\nIn fact every task that takes an includes attribute allows for multiple \nfilespecs separated by commas; this works well, so why should the <include> \nelement for patternsets be special? Under this argument what about filenames \nthat have '$' in them? You'd have to escape that in ant so ant doesn't try \nproperty expansion on it.\n\nWhat I'm after is for patternsets to have the usefulness of if/unless \nprocessing + the flexibility of comma separated files.\n\nIn my example (below/above??) ejb.resource.include.files might be defined by \nthe developer (in another buildfile) as a single file, or a list of files. \nUnder your scheme, I'd have to encode it as:\n\n<include name=\"${ejb.resource.include.file1}\" if=\"ejb.resource.include.file1\"/>\n<include name=\"${ejb.resource.include.file2}\" if=\"ejb.resource.include.file2\"/>\n<include name=\"${ejb.resource.include.file3}\" if=\"ejb.resource.include.file3\"/>\n<include name=\"${ejb.resource.include.file4}\" if=\"ejb.resource.include.file4\"/>\n<include name=\"${ejb.resource.include.file5}\" if=\"ejb.resource.include.file5\"/>\n<include name=\"${ejb.resource.include.file6}\" if=\"ejb.resource.include.file6\"/>\n...and so on...\n\nI still believe this enhancement would be useful, that it would remove an ant \noddity, and have attempted to post enough information to illustrate my point, \nbut I don't wish to get into an argument. I guess we'll have to agree to differ \non this one... :-)\n\nsimon.\n", "attachment_id": null, "bug_id": 7242, "id": 25926, "time": "2002-11-08T13:49:30Z", "creator": "simon.spruzen@rbos.com", "creation_time": "2002-11-08T13:49:30Z", "is_private": false}, {"count": 3, "tags": [], "text": "The includes attribute allows multiple patterns separated by space or comma.\n\n<include>'s name attribute expects a single pattern.\n\nThere is nothing special for <patternset>, as every task that supports an\nincludes attribute also supports nested include elements and the semantics\nare always the same.\n\nThere is a way to escape $ in Ant (simply double it) that works for all\nattributes of all elements.\n\nSee also the <includesfile> element of <patternset> which would allow you to\nput several patterns into a single file (and use if/unless attributes).\n\nThen there are selectors in Ant 1.5 (with additional if/unless support in 1.6\nthat may help to address your problem.\n\nIf something is odd with this treatment, to my taste it is that includes allows\na list of files at all - but this has been the initial way to define them and\nmust stay that way for obvious backwards compatibility reasons.", "attachment_id": null, "bug_id": 7242, "id": 25930, "time": "2002-11-08T13:58:52Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-08T13:58:52Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 61999, "is_private": false, "id": 203268, "time": "2018-01-15T10:16:24Z", "creator": "bsi.msa@gmail.com", "creation_time": "2018-01-15T10:16:24Z", "tags": [], "text": "The documentation for the Connector attribute \"maxSavePostSize\" says \"Setting the attribute to zero will disable the saving of POST data during authentication.\":\nhttps://tomcat.apache.org/tomcat-8.5-doc/config/http.html#Common_Attributes\n\nHowever, we tested this and maxSavePostSize=0 won't disable saving POST data. Instead, it actually tries to save the data with limit 0, so if there is any POST data, a 403 Forbidden is sent in the response.\n\nAlso, looking at the corresponding source code, there is no special handling for ignoring POST data if maxSavePostSize is set to zero:\nFormAuthenticator#saveRequest(Request request, Session session) creates a ByteChunk with limit 0. When calling ByteChunk#append(byte src[], int off, int len) we get to the flushBuffer() method which throws an IOException caught by FormAuthenticator#doAuthenticate which then sends a 403 Forbidden.\n\nThere is only special handling for the case where maxSavePostSize is negative (i.e. no limit)."}, {"count": 1, "text": "Ok, so the documentation isn't implemented properly when it comes to 0. Do you have an actual need to disable the feature, or is this one of these academic bug reports ? I'm asking since disabling the feature will make requests fail, while the actual cost of the feature is rather low with the default value, hence the user benefit is non existent and the fix would instead be to fix the docs [value <= 0 means no limit].", "bug_id": 61999, "attachment_id": null, "id": 203269, "time": "2018-01-15T12:26:45Z", "creator": "remm@apache.org", "creation_time": "2018-01-15T12:26:45Z", "tags": [], "is_private": false}, {"count": 2, "text": "Thanks for your fast reply. Yes we have an actual need to disable the \"save post data\" feature during authentication. We do not want the request to fail (with 403) just because the POST data was more than x KB since we do not need the POST data to be saved. Reading the documentation, we thought to have found a solution for this problem by setting maxSavePostSize=0 so the POST data would be ignored while the request is still being processed.\n\nIt is our understanding that saving the POST data of the request is a performance improvement rather than a necessity.\n\nIn our use case we use the FormAuthenticator but do not redirect to a simple HTML form but rather to a URL which does a programmatic login. The POST data is irrelevant for the login and will be sent again from the client after authentication.\n\nThus fixing the documentation would not help in our case. Furthermore the current implementation behaves as follows:\n* value < 0 means no limit\n* value >= 0 means limited to the value => so for value=0 every request with any POST data will fail (403 Forbidden)\n\nSo your suggestions to fix the documentation would not match with the current implementation.", "bug_id": 61999, "attachment_id": null, "id": 203271, "time": "2018-01-15T13:21:24Z", "creator": "bsi.msa@gmail.com", "creation_time": "2018-01-15T13:21:24Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "bsi.msa@gmail.com", "is_private": false, "text": "BTW: We are willing to provide a patch if you agree.", "id": 203272, "time": "2018-01-15T13:23:25Z", "bug_id": 61999, "creation_time": "2018-01-15T13:23:25Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "bug_id": 61999, "text": "\"Furthermore the current implementation behaves as follows:\n* value < 0 means no limit\n* value >= 0 means limited to the value => so for value=0 every request with any POST data will fail (403 Forbidden)\"\n\nI don't want to argue forever, but IMO this doesn't make much sense. Why would your request \"not fail\" if it is too large ? If the data is irrelevant, don't send it in the first place, especially since it will have to be read by the webserver anyway. Also, clients usually do not silently resend post data.\n\nLast, actually, the current behavior is that <= 0 means no limit.", "id": 203274, "time": "2018-01-15T14:28:43Z", "creator": "remm@apache.org", "creation_time": "2018-01-15T14:28:43Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 61999, "attachment_id": null, "text": "A fix will be in 9.0.4, 8.5.25, 8.0.49 and 7.0.84.", "id": 203275, "time": "2018-01-15T15:02:47Z", "creator": "remm@apache.org", "creation_time": "2018-01-15T15:02:47Z", "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 61999, "text": "(In reply to Remy Maucherat from comment #5)\n> A fix will be in 9.0.4, 8.5.25, 8.0.49 and 7.0.84.\n\nGreat, thank you!\n\nWith this fix our request won't fail anymore for maxSavePostSize=0. And for maxSavePostSize > 0 it still fails if the POST data is larger than maxSavePostSize, as expected.\n\nWe are looking forward to integrate 8.5.25 as soon as it's released.\n\nJust for clarity, why my understanding was that only strictly < 0 means no limit was this line of code (and the tests we made):\nhttps://github.com/apache/tomcat85/blob/41b5beb92da6ad56aec509a40cb7bdcc4fa504d4/java/org/apache/tomcat/util/buf/ByteChunk.java#L323", "id": 203290, "time": "2018-01-16T09:58:21Z", "creator": "bsi.msa@gmail.com", "creation_time": "2018-01-16T09:58:21Z", "tags": [], "is_private": false}]
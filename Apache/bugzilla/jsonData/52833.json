[{"count": 0, "tags": [], "text": "Upgrading the maven plugin 7.0.26, the goal which runs tomcat with a conf dir (not the embed version) generate the following NPE \nLog:\n\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:141)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:645)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:679)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:365)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:544)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:197)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)", "attachment_id": null, "bug_id": 52833, "id": 154553, "time": "2012-03-05T23:28:06Z", "creator": "olamy@apache.org", "creation_time": "2012-03-05T23:28:06Z", "is_private": false}, {"count": 1, "tags": [], "creator": "olamy@apache.org", "attachment_id": 28422, "id": 154554, "time": "2012-03-05T23:45:50Z", "bug_id": 52833, "creation_time": "2012-03-05T23:45:50Z", "is_private": false, "text": "Created attachment 28422\nattach a patch for review\n\nsimply adding a NPE check."}, {"count": 2, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 154567, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-06T14:21:25Z", "time": "2012-03-06T14:21:25Z", "text": "Hmm. I'm failing to understand how the StandardServer ends up with a parent class loader that is not a child of the system class loader.\n\nAt the moment this looks like a configuration error and I am leaning towards resolving this as INVALID."}, {"count": 3, "tags": [], "creator": "olamy@apache.org", "is_private": false, "id": 154568, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-06T14:28:44Z", "time": "2012-03-06T14:28:44Z", "text": "see http://svn.apache.org/viewvc/tomcat/maven-plugin/trunk/tomcat7-maven-plugin/src/main/java/org/apache/tomcat/maven/plugin/tomcat7/run/AbstractRunMojo.java?revision=1297073&view=markup line 674.\nBTW works fine with 7.0.25."}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 154752, "time": "2012-03-09T15:09:56Z", "bug_id": 52833, "creation_time": "2012-03-09T15:09:56Z", "is_private": false, "text": "I'm not exactly sure what is going on here as I can't repeat this with a simple test case. However, it does appear that r1242101 is the root cause.\n\nI can only repeat this is I set Catalina's parent class loader to null. I guess that is what the plug-in code is doing somewhere and while in the past it has got away with it, as a result of r1242101 it is now failing.\n\nI'm having a hard time coming up with a valid reason for setting the parent class loader to null. I am therefore leaning towards INVALID for this, although I'm not adverse to adding a null check to setParentClassLoader() and throwing an IAE if null is passed in to make this easier to debug."}, {"count": 5, "tags": [], "text": "Without any further input, this is going to get resolved as INVALID prior to the 7.0.27 release.", "attachment_id": null, "bug_id": 52833, "id": 154907, "time": "2012-03-14T15:08:40Z", "creator": "markt@apache.org", "creation_time": "2012-03-14T15:08:40Z", "is_private": false}, {"count": 6, "tags": [], "creator": "olamy@apache.org", "attachment_id": null, "is_private": false, "id": 154918, "time": "2012-03-14T22:14:02Z", "bug_id": 52833, "creation_time": "2012-03-14T22:14:02Z", "text": "Sorry didn't have time to do more testing. \nI will try to find change something to make that work again with version 7.0.26.\nBTW what prevent you to do a simple null check in the code ?"}, {"count": 7, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 154930, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-15T09:10:52Z", "time": "2012-03-15T09:10:52Z", "text": "I'm against the patch proposed since that addresses the symptom rather than the cause. I'm not against added a null check that throws an IAE at the point where the parent class loader is set to null, if you (as the user) would find that useful. However, if you don't think it would be useful, there isn't much point me adding it :)\n\nAll of this assumes that something in your code is setting the parent class loader to null. If the root cause is something else then all bets are off and we'll have to look at this aginan."}, {"count": 8, "tags": [], "creator": "olamy@apache.org", "is_private": false, "id": 155005, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-17T22:06:13Z", "time": "2012-03-17T22:06:13Z", "text": "What I don't understand is why in the parent classLoader chain having SystemClassLoader is mandatory!\nThat's what the current code assume. Frankly I don't understand why you consider that mandatory. In some env especially osgi it's not!. \nThe patch just prevent a NPE in case of SystemClassLoader is not in the parent classLoader chain.\nWhy that could not be a valid use case ?"}, {"count": 9, "tags": [], "text": "(In reply to comment #8)\n> What I don't understand is why in the parent classLoader chain having\n> SystemClassLoader is mandatory!\n\nOK.\n\n> That's what the current code assume.\n\nI know.\n\n> Frankly I don't understand why you consider that mandatory.\n\nI don't. The original developers of Tomcat did. While I can make some educated guesses why this was done based on the Servlet and J2EE specifications I can't be sure. However, since it is an assumptions that appears in multiple places across the code base I am very reluctant to change it without fully understanding the impacts that might have.\n\n> In some env especially osgi it's not!.\n\nOK.\n \n> The patch just prevent a NPE in case of SystemClassLoader is not in the parent\n> classLoader chain.\n\nNo, that patch addresses that particular symptom in one place in the code. As I stated previously, it is the root cause I am interested in fixing rather than one particular symptom.\n\n> Why that could not be a valid use case ?\n\nAs I stated previously, I'm having a hard time coming up with a valid reason for setting the parent class loader to null.\n\nHaving looked more widely at this issue, it is clear that the implementation of Catalina#getParentClassLoader() is not consistent with other implementations. I'll get that fixed shortly. Depending on what you are doing (which you have yet to be clear about) that may resolve the problem you are seeing.\n\nIt would be helpful if you could identify which of the following cases is triggering this problem:\na) calling Catalina.setParentClassLoader() and passing null\nb) calling Catalina.setParentClassLoader() and passing a class loader that does not have the system class loader as an ancestor\nc) Something else.\n\nIf a) or b) any further details of why this is being done would be helpful.\nIf c) you'll need to provide details.", "attachment_id": null, "bug_id": 52833, "id": 155074, "time": "2012-03-19T20:43:53Z", "creator": "markt@apache.org", "creation_time": "2012-03-19T20:43:53Z", "is_private": false}, {"count": 10, "tags": [], "creator": "olamy@apache.org", "is_private": false, "id": 155077, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-19T21:40:18Z", "time": "2012-03-19T21:40:18Z", "text": ">It would be helpful if you could identify which of the following cases is\n>triggering this problem:\n>a) calling Catalina.setParentClassLoader() and passing null\n>b) calling Catalina.setParentClassLoader() and passing a class loader that does\n>not have the system class loader as an ancestor\n>c) Something else.\n\nhappen for b).\nThe c) case is not using setParentClassLoader(). I discovered my trouble using this.\nBTW I saw your commit which should fix (not tested yet)"}, {"count": 11, "tags": [], "creator": "knst.kolinko@gmail.com", "attachment_id": null, "id": 155115, "time": "2012-03-20T14:40:04Z", "bug_id": 52833, "creation_time": "2012-03-20T14:40:04Z", "is_private": false, "text": "Maybe (In reply to comment #0)\n> Upgrading the maven plugin 7.0.26, the goal which runs tomcat with a conf dir\n> (not the embed version) generate the following NPE \n> Log:\n>     at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)\n\n1. Where is \"Caused by\" and its stacktrace?\n\nLine 236 wraps other exception and rethrows it, but you are not saying what it is and where it comes from.\n\n2. This LifecycleBase.stop() is called from LifecycleBase.start() on line 141 which is unusual and happens only if the component is already in the state of FAILED.\n\nThus there must be some preceding messages in the logs."}, {"count": 12, "tags": [], "creator": "olamy@apache.org", "attachment_id": null, "is_private": false, "id": 155118, "time": "2012-03-20T14:57:18Z", "bug_id": 52833, "creation_time": "2012-03-20T14:57:18Z", "text": "20 mars 2012 15:55:11 org.apache.catalina.startup.Catalina load\nGRAVE: Catalina.start\norg.apache.catalina.LifecycleException: Failed to initialize component [StandardServer[2008]]\n\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:106)\n\tat org.apache.catalina.startup.Catalina.load(Catalina.java:594)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:633)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:684)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:372)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:544)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:197)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: java.lang.NullPointerException\n\tat org.apache.catalina.core.StandardServer.initInternal(StandardServer.java:810)\n\tat org.apache.catalina.util.LifecycleBase.init(LifecycleBase.java:102)\n\t... 25 more\n20 mars 2012 15:55:11 org.apache.catalina.startup.Catalina load\nINFO: Initialization processed in 681 ms\n20 mars 2012 15:55:11 org.apache.catalina.startup.Catalina start\nGRAVE: Catalina.start: \norg.apache.catalina.LifecycleException: Failed to stop component [StandardServer[2008]]\n\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:141)\n\tat org.apache.catalina.startup.Catalina.start(Catalina.java:645)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:684)\n\tat org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:372)\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:544)\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:197)\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:141)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)\nCaused by: org.apache.catalina.LifecycleException: An invalid Lifecycle transition was attempted ([before_stop]) for component [org.apache.catalina.deploy.NamingResources@7f1f91ac] in state [INITIALIZED]\n\tat org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:408)\n\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:219)\n\tat org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:756)\n\tat org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)\n\t... 25 more"}, {"count": 13, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "id": 155131, "attachment_id": null, "bug_id": 52833, "creation_time": "2012-03-20T16:53:34Z", "time": "2012-03-20T16:53:34Z", "text": "(In reply to comment #8)\n(In reply to comment #9)\n\nAbstractRunMojo#startContainer() creates a \"new Catalina()\". I do not see it ever calling setParentClassLoader() and Catalina#parentClassLoader defaults to its own classloader.\n\nIs Catalina.class.getClassLoader() the one that does not have system CL in its parents chain?\n\n\n> What I don't understand is why in the parent classLoader chain having\n> SystemClassLoader is mandatory!\n\n\nAnyway as far as WebappClassLoader class goes\n\n1) It has to follow its documentation, [1] in 7.0 and in more details in 5.5, where shared class loader was actually used. There is lookup sequence,\n\n\"Therefore, from the perspective of a web application, class or resource loading looks in the following repositories, in this order: (...)\" - see [1]\n\n[1] http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html\n\n\n2) WebappClassLoader has its own explicit call to getSystemClassLoader() and treats the system class loader specially and separately from its parent, to follow its specific delegating pattern of calling\n A system CL\n B webapp CL\n C parent CL.\n\nTherefore for the WebappClassLoader class it does not matter where its \"parent CL\" is rooted. It does not impact its behaviour.\n\nSo using shared CL that does not have system CL as a parent does not seriously impact Tomcat.\n\nI do not mind a (cl != null) check to be added in the loop in r1242101.\n\n\nIt seems that the code in r1242101 is the first one that actually looks into the shared classloader and is outside of a webapp. Such work is usually scoped to the web application. The shared CL is actually used in\nWebappLoader#createClassLoader().\n\nSee also my comments in \"Re: r1242101\" on dev@.\nhttp://markmail.org/message/rgd7tzz5zks6l5wn\n\n(In reply to comment #12)\n> \n> Caused by: org.apache.catalina.LifecycleException: An invalid Lifecycle\n> transition was attempted ([before_stop]) for component\n> [org.apache.catalina.deploy.NamingResources@7f1f91ac] in state [INITIALIZED]\n\nInteresting... A small issue though. It tries to stop a component that has not been started?"}, {"count": 14, "tags": [], "text": "Given that the root cause is a class loader that does not have the 'normal' hierarchy we see in the normal (non-embedded) use case (rather than something setting the Catalina's parent class loader to null) then adding the null check is a reasonable solution. I've looked for other places in the codebase where we traverse the class loader hierarchy and don't see a need for further changes.\n\nThe fix has been applied to trunk and 7.0.x and will be included in 7.0.27 onwards.", "attachment_id": null, "bug_id": 52833, "id": 155322, "time": "2012-03-27T18:41:46Z", "creator": "markt@apache.org", "creation_time": "2012-03-27T18:41:46Z", "is_private": false}]
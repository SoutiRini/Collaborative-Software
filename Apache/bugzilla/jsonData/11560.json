[{"count": 0, "tags": [], "bug_id": 11560, "attachment_id": null, "id": 20794, "time": "2002-08-08T14:18:26Z", "creator": "loic.peron@bigfoot.com", "creation_time": "2002-08-08T14:18:26Z", "is_private": false, "text": "When using 'reverseLoader=\"true\"' within a 'taskdef', standard ant tasks are \nnot reloaded using the specified classpath\n\nExplanation:\n\nWhen Definer creates an AntClassLoader, it specifies \"org.apache.tools.ant\" as \na system package root to uniquely load org.apache.tools.ant.Task and friends \n(otherwise breakages are to be expected)\n\nBut not all classes inside org.apache.tools.ant package and furthermore inside \nsub-packages need to be loaded only once, but instead can benefit from being \nreloaded using an extended classpath:\n\n        <taskdef name=\"javac\" classname=\"org.apache.tools.ant.taskdefs.Javac\"\n            reverseLoader=\"true\">\n            <classpath>\n                <!-- contains tools.jar -->\n                <fileset dir=\"${system.JAVA_HOME}/lib\" includes=\"*.jar,*.zip\" />\n                <!-- contains ant.jar -->\n                <fileset dir=\"${build.lib}\" includes=\"*.jar,*.zip\" />\n            </classpath>\n        </taskdef>\n\nWorkaround:\n\nSet CLASSPATH with an external script which requires to re-code some of ant \nfeatures like fileset and classpath using a non-portable script language\n(as is done today) or bootstrap ant itself using a second JVM - both are \nsimilarly inefficient\n\nSolution:\n\nForce the currently re-defined class (as Definer is not only used for tasks) to \nbe loaded by the AntClassLoader by addLoaderPackageRoot when reverseLoader is \ndefined\n\n---8<--------------------------------------------------------------\n--- Definer.java.old\tTue Jul 09 11:28:38 2002\n+++ Definer.java\tThu Aug 08 15:37:24 2002\n@@ -224,9 +224,15 @@\n      * create the classloader then hand the definition off to the subclass;\n      * @throws BuildException when the class wont load for any reason\n      */\n-    private void addDefinition(ClassLoader al, String name, String value)\n+    private void addDefinition(AntClassLoader al, String name, String value)\n         throws BuildException {\n         try {\n+            // allow reload even for ant classes\n+            if (reverseLoader) {\n+                al.addLoaderPackageRoot(\n+                        value.substring(0, value.lastIndexOf('.')));\n+            }\n+            \n             Class c = al.loadClass(value);\n             AntClassLoader.initializeClass(c);\n             addDefinition(name, c);\n---8<--------------------------------------------------------------"}, {"count": 1, "tags": [], "creator": "loic.peron@bigfoot.com", "attachment_id": null, "text": "This patch does not really resolve all my problems, thus I changed it to \nINVALID state - I'm still investigation to find a proper solution based on a \nlist of packages/classes for addLoaderPackageRoot()", "id": 20836, "time": "2002-08-09T09:43:01Z", "bug_id": 11560, "creation_time": "2002-08-09T09:43:01Z", "is_private": false}, {"count": 2, "tags": [], "text": "\nThis new patch alloxs to alter the system and loader package root lists at \nclassloader instantiation through new attributes and new elements.\n\n---8<----------------------------------------------------------------- \nDefiner.java.orig\tTue Jul 09 11:28:38 2002\n+++ Definer.java.packageroots\tFri Aug 09 18:14:17 2002\n@@ -63,6 +63,8 @@\n \n import java.util.Properties;\n import java.util.Enumeration;\n+import java.util.Vector;\n+import java.util.StringTokenizer;\n import java.io.File;\n import java.io.InputStream;\n import java.io.FileInputStream;\n@@ -88,7 +90,63 @@\n     private String classpathId = null;\n     \n     private static final String REUSE_LOADER_REF = \"ant.reuse.loader\";\n+\n+    private Vector systemPackageRootList = new Vector();\n+    private Vector loaderPackageRootList = new Vector();\n+\n+    public static class PackageRoot {\n+\n+        public PackageRoot() {\n+        }\n+\n+        private String name = null;\n+\n+        public void setName(String s) {\n+            name = s;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+        \n+    }\n     \n+    public void setSystemPackageRoots(String s) {\n+        setPackageRoots(false, s);\n+    }\n+\n+    public void setLoaderPackageRoots(String s) {\n+        setPackageRoots(true, s);\n+    }\n+\n+    protected void setPackageRoots(boolean loaderPackageRoot, String s) {\n+        StringTokenizer t = new StringTokenizer(s,\",\");\n+        while (t.hasMoreTokens()) {\n+            String p = t.nextToken().trim();\n+            if (p != null && p.length() != 0) {\n+                createPackageRoot(loaderPackageRoot).setName(p);\n+            }\n+        }\n+    }\n+\n+    public PackageRoot createSystemPackageRoot() {\n+        return createPackageRoot(false);\n+    }\n+\n+    public PackageRoot createLoaderPackageRoot() {\n+        return createPackageRoot(true);\n+    }\n+\n+    protected PackageRoot createPackageRoot(boolean loaderPackageRoot) {\n+        PackageRoot pr = new PackageRoot();\n+        if (loaderPackageRoot) {\n+            loaderPackageRootList.addElement(pr);\n+        } else {\n+            systemPackageRootList.addElement(pr);\n+        }\n+        return pr;\n+    }\n+\n     /**\n      * @deprecated stop using this attribute\n      * @ant.attribute ignore=\"true\"\n@@ -282,6 +340,15 @@\n         // be wrapped into a TaskAdapter.\n         al.addSystemPackageRoot(\"org.apache.tools.ant\");\n \n+        for (int i = 0; i < systemPackageRootList.size(); i++) {\n+            PackageRoot pr = (PackageRoot)systemPackageRootList.get(i);\n+            al.addSystemPackageRoot(pr.getName());\n+        }\n+\n+        for (int i = 0; i < loaderPackageRootList.size(); i++) {\n+            PackageRoot pr = (PackageRoot)loaderPackageRootList.get(i);\n+            al.addLoaderPackageRoot(pr.getName());\n+        }\n \n         // If the loader is new, record it for future uses by other\n         // task/typedefs\n---8<--------------------------------------------------------------\n\nIt solved my problem and is much more useable than my previous attempt.\n\nI can now use:\n\n        <taskdef name=\"javac\" classname=\"org.apache.tools.ant.taskdefs.Javac\">\n            <loaderpackageroot name=\"org.apache.tools.ant.taskdefs\" />\n            <classpath>\n                <!-- contains tools.jar -->\n                <fileset dir=\"${SYSTEM.JAVA_HOME}/lib\" includes=\"*.jar,*.zip\" />\n                <!-- contains ant.jar -->\n                <fileset dir=\"${buildlibs}\" includes=\"*.jar,*.zip\" />\n            </classpath>\n        </taskdef>\n        <javac destdir=\"${destdir}\" srcdir=\"${srcdir}\"\n            classpathref=\"javac-classpath\">\n            <!-- referenciation needed to workaround bug\n                 to be corrected in 1.5.1 -->\n            <classpath id=\"javac-classpath\">\n                <!-- contains source dependencies -->\n                <fileset dir=\"${dep.java.lib}\" includes=\"*.jar,*.zip\" />\n            </classpath>\n        </javac>\n \nAfter the task redefinition bug is corrected, I won't need any launch script at \nall :)\n\n", "attachment_id": null, "id": 20853, "creator": "loic.peron@bigfoot.com", "time": "2002-08-09T16:27:46Z", "bug_id": 11560, "creation_time": "2002-08-09T16:27:46Z", "is_private": false}]
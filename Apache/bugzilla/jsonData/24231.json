[{"count": 0, "tags": [], "text": "An option such as -- or -. would make the command-line more versatile and \nfriendly.  In implementation it could be little more than a dummy.  I have \nmarked this as an enhancement although it seems like a lot of payoff for a \nlittle work.", "is_private": false, "bug_id": 24231, "id": 46475, "time": "2003-10-29T22:17:04Z", "creator": "mbenson@apache.org", "creation_time": "2003-10-29T22:17:04Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "What would be the benefits? (That the target names can start with a -?)", "attachment_id": null, "bug_id": 24231, "id": 46490, "time": "2003-10-30T06:18:19Z", "creator": "jkf@apache.org", "creation_time": "2003-10-30T06:18:19Z", "is_private": false}, {"count": 2, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 46507, "time": "2003-10-30T16:15:20Z", "bug_id": 24231, "creation_time": "2003-10-30T16:15:20Z", "text": "Actually I wasn't thinking along those lines at all.  Again, really I was \nmeaning just that a dummy, do-nothing option could exist.  The primary benefit \nthat drove me to this idea was the -find/-s option; currently it appears that \na) it must be the last argument given, and b) if it is specified without a \nfilename, it must use the default target of whatever build.xml it finds.  I \nhave seen these types of options in other command-line utilities."}, {"count": 3, "tags": [], "creator": "mbenson@apache.org", "is_private": false, "id": 46508, "creation_time": "2003-10-30T16:23:15Z", "time": "2003-10-30T16:23:15Z", "bug_id": 24231, "text": "Created attachment 8829\nPatch to implement empty option as -.", "attachment_id": 8829}, {"count": 4, "attachment_id": null, "bug_id": 24231, "is_private": false, "id": 46530, "time": "2003-10-30T18:00:39Z", "creator": "jkf@apache.org", "creation_time": "2003-10-30T18:00:39Z", "tags": [], "text": "Still what would be the benefits.\n-find need not be the last argument given if a filename is specified\nand if you specify -find -. it will probably start looking for the file name -.\nand just carry on. \nUsually on other tools this kind of options is present to be able to specify a\nfile name / parameter value starting with - or to pass on the options to the\nprogram run inside the program.\n"}, {"count": 5, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 46531, "time": "2003-10-30T18:14:11Z", "bug_id": 24231, "creation_time": "2003-10-30T18:14:11Z", "text": "Indeed, -find would look for -. if it were not told specifically that the -. \nswitch is not a filename.  I do realize that -find does not have to be last if \nyou specify a filename, in spite of my having omitted that qualification from \nmy previous statement.  I just have a problem with command-line options that \ntake optional parameters, but whether a parameter is optional depends on the \noption's position on the command-line.  An alternate solution for this more \nspecific situation might be to disallow build filenames beginning with \"-\" and \ntherefore be able to go on to the next option when it was encountered.\n\nDo any of the committers have an opinion on this subject?\n\n-Matt"}, {"count": 6, "tags": [], "bug_id": 24231, "attachment_id": null, "id": 46534, "creation_time": "2003-10-30T18:29:48Z", "time": "2003-10-30T18:29:48Z", "creator": "stevel@apache.org", "text": "I dont see the value in this patch, if find is the sole reason. I do\noccasionally use find but I just say -find build.xml target\n\nOne version of Ant (1.2?) had auto-find; if a build.xml wasnt found locally, it\nsearched upstream. This was turned off in the followon version, as it caused too\nmany surprises. But you could patch your version of ant if you want...", "is_private": false}, {"count": 7, "tags": [], "creator": "gus.heck@olin.edu", "attachment_id": null, "text": "Actually, this sounds like a request for the command line to conform to user\nexpectations... Even if the functionality can be achieved with the current\noption processing, not suprising users and implementing -- or -. is I think a\npositive if extremely minor thing. That said, it cannot be implemented because\nit would break a widely used kludge that is noted in the discussion of bug 22020\n(See Steve's comment there on how to use targets that start with '-' to prevent\nuser invocation of 'private' or 'internal' targets).", "id": 47146, "time": "2003-11-10T23:19:17Z", "bug_id": 24231, "creation_time": "2003-11-10T23:19:17Z", "is_private": false}, {"count": 8, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "is_private": false, "id": 47147, "time": "2003-11-10T23:23:53Z", "bug_id": 24231, "creation_time": "2003-11-10T23:23:53Z", "text": "I don't see how adding any option would break the kludge (which I use \ntirelessly myself).  The whole point of that kludge is that the target cannot \nbe invoked directly from the command line.  Adding option --, -. -/ -! -@, etc. \nhas no bearing on that that I can see."}, {"count": 9, "tags": [], "creator": "gus.heck@olin.edu", "attachment_id": null, "is_private": false, "id": 47193, "time": "2003-11-11T17:44:29Z", "bug_id": 24231, "creation_time": "2003-11-11T17:44:29Z", "text": "The usual point of -- is that it means \"there are no further options past this\npoint in the command line\". An example from the man page of the unix rm command:\n\nTo remove a file whose name starts with a \u2018-\u2019, for example \u2018-foo\u2019,  use\n       one of these commands:\n\n              rm -- -foo\n\n              rm ./-foo\n\n \nCorrect me if this is not the meaning you intend, as I have misunderstood your\nintent. I assume you do from this line in your patch:\n+        msg.append(\"  -.                     signify end of options\" + lSep);\n\n\nSo, to answer your question assuming I understand your intent and your patch\ndoes what I think you intend (I havn't directly verified it)...\n\nCurrently targets begining with - are currently misidentified as (usually\nunrecognized) options by the commandline parser. If -- was included in the\ncommandline before the target was specified the command line would now\nunderstand that -targetname is a target and not an option and properly execute\nit. Misidentification is the only reason targets starting with - don't execute\nfrom the command line. They are otherwise perfectly legal targets with equal status.\n\nTry this sometime:\n\n<target name=\"-projecthelp\">\n  <echo message=\"You can't see me!\"/>\n</target>\n\nWith your patch I assume it would be possible to say \n\nant -. -projecthelp \n\nand get the output:\n\n-projecthelp:\n     [echo] You can't see me!\n\nThe problem is that the -targetname \"feature\" is not (so far as I know) an\nintentionally designed in feature with respect to \"hiding internal targets\", but\na coincidental side effect of command line parsing when it tries to warn the\nuser of typos in their options. Sadly, I just discovered that this technique of\naccess control was added to the documentation for the 1.5 release. IMHO Adding\n'-' to the target name to prevent invoction should not have been made a\nsupported feature, although it now is (as of version 1.18 of using.html, and\nit's subsequent release in 1.5). This practice overloads the meaning of the name\natribute, and creates a syntax within the realm of target names, which was\n(until the \"feature\" was documented) unconstrained.\n\nThis \"feature\" had previously remained undocumented despite the fact that it\nexisted since version 1.1 of Main.java. (I avoid using it myself, since I came\nup with an alternate, if somewhat lenghthier, method of controling access to\ntargets back when 1.4.1 was the current release). Another flaw of this \"feature\"\nis that it yeilds an error message about options rather than one indicating that\nthe build file writer chose not to let the user run this target directly. The\nlater would imply that the user should look for another target, whereas the\nformer looks like a mistake by the writer of the build file and seems to imply\nthe build should be \"fixed\" by changing the target name (to the newish user who\ndoesn't know or remember about - targets at least).\n\nThe ability to protect/hide targets from the command line user is clearly\ndesired by many build file authors and the \"feature\" is widely used. Although\nthe \"feature\" is based on an \"until recently undocumented feature\" it is now is\na back compatability issue. I expect that back compatability is likely to be\nhonored here, but even if it isn't it would be very poor form (imho) to break it\nwithout providing an alternative. \n\nMy patch to bug 22020 attempts to add an explicit means of specifying command\nline visibility, but is being held for consideration in 1.7 because the\nmechanism I propose may also be expanded or altered to allow build file writers\nto specify accessibility of targets from other contexts (such as import).\nSeveral commiters feel (I am not a commiter) that access can't be implemented\nuntil we are comfortable with import and have a feel for how people will use it.\nI have to admit that this does sound reasonable.\n\nResolving bug 22020 (with or without my patch) would supply an alternative\naccess control mechanism and thus make it possible to begin considering a minor\nbreak in back compatability by implementing the feature you are requesting.\n\nHowever, given that it is now a back compatability issue, I suspect you will\nneed a use case that can't be resolved with a simple work around before any\npatch will be commited. I will leave it to commiters to declare this WONTFIX or\nnot however."}, {"count": 10, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "Because you haven't tested the patch or apparently reviewed it in any great \ndetail, you haven't seen that I have not broken backward compatibility.  If Bug \n22020 eliminates the utility of -.* target names, so be it.  But my patch does \nnot impact it; in truth it doesn't even force the end of command-line \nprocessing.  Ultimately this option only allows the explicit specification that \nan optional parameter to a command-line option has been omitted; it just so \nhappens that the only such example is -find/-s.  Because there is, AGAIN, no \nimpact to -.* named targets, I have AGAIN removed the dependency on Bug 22020.", "id": 47321, "time": "2003-11-13T21:57:32Z", "bug_id": 24231, "creation_time": "2003-11-13T21:57:32Z", "is_private": false}, {"count": 11, "tags": [], "creator": "peter.reilly@corvil.com", "is_private": false, "id": 47359, "creation_time": "2003-11-14T17:33:44Z", "time": "2003-11-14T17:33:44Z", "bug_id": 24231, "text": "-- is normally the indication of the end of options.\nThe patch should do this and also handle all the options that\nhave paramters (-nice, -logfile etc)\n", "attachment_id": null}, {"count": 12, "tags": [], "text": "Created attachment 9111\npatch to implement -- as the end of options", "attachment_id": 9111, "bug_id": 24231, "id": 47361, "time": "2003-11-14T17:34:31Z", "creator": "peter.reilly@corvil.com", "creation_time": "2003-11-14T17:34:31Z", "is_private": false}, {"count": 13, "tags": [], "text": "Sounds fine except that this patch appears to truly implement \"no more args\".  \nThis is perhaps better (more intuitive) but appears to have the side effect of \nallowing targets with names beginning with - to be specified from the command \nline, as discussed already.  If this is the patch to use, the dependency on bug \n22020 will exist.", "is_private": false, "bug_id": 24231, "id": 47366, "time": "2003-11-14T17:48:16Z", "creator": "mbenson@apache.org", "creation_time": "2003-11-14T17:48:16Z", "attachment_id": null}, {"count": 14, "tags": [], "bug_id": 24231, "attachment_id": null, "id": 47600, "time": "2003-11-19T04:29:30Z", "creator": "gus.heck@olin.edu", "creation_time": "2003-11-19T04:29:30Z", "is_private": false, "text": "Ok, well when I read your patch I found the comment I referenced, so I didn't\nknow if it was buggy patch or not. It is now clear that it does what you\nintended it to, and Your patch does not actually introduce the dependency on bug\n22020. I had trouble understanding this in the first place due to the well know\nbut slightly different command line functionality.\n\nI agree that Peter's patch would introduce the dependancy on bug 22020\n\nI worry about people misunderstanding this in the way that I did, so perhaps\nthere is some place a detailed documentation could be placed. I don't offhand\nremember if there is a section of the manual that deals with explaining the\ncommand line options (id'd look, but the site seems to be down (11:30pm EST\n11/18) and I don't have the manual locally on this computer.)"}, {"count": 15, "tags": [], "text": "*** Bug 48823 has been marked as a duplicate of this bug. ***", "is_private": false, "bug_id": 24231, "id": 134920, "time": "2010-02-26T15:15:40Z", "creator": "mbenson@apache.org", "creation_time": "2010-02-26T15:15:40Z", "attachment_id": null}, {"count": 16, "attachment_id": null, "bug_id": 24231, "text": "(In reply to comment #13)\n> the side effect of \n> allowing targets with names beginning with - to be specified from the command \n> line\n\nAs I described in Bug 48823, I think this is a good thing. The use of '-' as an initial character to mark \"internal\" targets is a more or less established convention: it indicates the script author's intent that calling the target directly is unlikely to be useful.\n\nBut there is no sense in which it was ever impossible to run internal targets, i.e. there was no hard encapsulation; <antcall> or any program embedding Ant could invoke them. (For example, the NetBeans IDE does not offer Run in the context menu of an internal target node, but Run > Advanced... under the build script node lets you type in target names to run, which are never parsed as Ant options.) The situation was perhaps comparable to a Java private method: it is clearly not intended to be run directly, but (SecurityManager permitting) you can still do so via reflection if you know what you are doing.\n\nBeing able to run 'ant -- -internal-target' can be helpful for testing by the person who wrote the target, and it provides a sure way for a script to invoke Ant with a dynamically determined target without risk of misinterpretation as an option - which is why well-written scripts calling e.g. /usr/bin/rm use -- before the file list.", "id": 134927, "time": "2010-02-26T17:16:56Z", "creator": "jglick@apache.org", "creation_time": "2010-02-26T17:16:56Z", "tags": [], "is_private": false}]
[{"count": 0, "tags": [], "creator": "karoshi@gmx.net", "attachment_id": null, "id": 116334, "time": "2008-05-07T05:11:14Z", "bug_id": 44948, "creation_time": "2008-05-07T05:11:14Z", "is_private": false, "text": "Using Apache 2.2.8 on WinXP, mod_substitute doesn't give back all used memory.\n\n\nConfiguration:\nAddOutputFilter SUBSTITUTE html\nSubstitute \"s|foo|bar|\"\n\n\nCreate a file that contains the word \"foo\" a few times (I used a total filesize of 4 MB).\n\n\nUse ab to execute some requests:\n\n./ab -n 200 -c 1 http://localhost:8082/foo.html\nMemory usage raises from 7 MB to ~12MB, stays there.\n\n./ab -n 200 -c 25 http://localhost:8082/foo.html\nMemory usage raises from 7 MB to ~66MB, stays there.\n\n./ab -n 200 -c 100 http://localhost:8082/foo.html\nMemory usage raises from 7 MB to ~156MB, stays there."}, {"count": 1, "tags": [], "bug_id": 44948, "text": "What does happen if you do\n\n./ab -n 200 -c 1 http://localhost:8082/foo.html\n./ab -n 200 -c 25 http://localhost:8082/foo.html\n./ab -n 200 -c 100 http://localhost:8082/foo.html\n\nagain? Does the memory consumption still grow?", "id": 116340, "attachment_id": null, "creator": "rpluem@apache.org", "creation_time": "2008-05-07T08:09:50Z", "time": "2008-05-07T08:09:50Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 44948, "attachment_id": null, "is_private": false, "id": 116424, "time": "2008-05-09T08:15:11Z", "creator": "karoshi@gmx.net", "creation_time": "2008-05-09T08:15:11Z", "text": "./ab -n 200 -c 1 http://localhost:8082/foo.html\n1st run: 7 -> 14 MB\n2nd run: stays at 14 MB\n3rd run: stays at 14 MB\n\n\n./ab -n 200 -c 25 http://localhost:8082/foo.html\n1st run: 7 -> 71 MB\n2nd run: 71 -> 74 MB\n3rd run: stays at 74 MB \n\n\n./ab -n 200 -c 100 http://localhost:8082/foo.html\n1st run: 7 -> 155 MB\n2nd run: 155 -> 155 MB\n3rd run: 155 -> 155 MB\n\n\nMemory usage after the end of the ab call did not exceed 155 MB. Max memory usage during test was about 390 MB."}, {"count": 3, "tags": [], "bug_id": 44948, "attachment_id": null, "is_private": false, "id": 116435, "time": "2008-05-09T14:39:45Z", "creator": "rpluem@apache.org", "creation_time": "2008-05-09T14:39:45Z", "text": "Ok, this means that we do not have a leak here as the memory is reused by httpd later on. httpd only does not pass back the memory it used once back to the OS which is quite normal for all parts of httpd. It might still be worth to examine the overall memory consumption of mod_substitute for the case you described. OTOH your numbers show that the memory consumption does not grow linear with the number of parallel requests but lower which is a good sign IMHO :-)"}, {"count": 4, "tags": [], "bug_id": 44948, "text": "(reducing priority since it is not a leak)", "id": 120096, "attachment_id": null, "creator": "rahul.g.nair@gmail.com", "creation_time": "2008-08-26T04:06:06Z", "time": "2008-08-26T04:06:06Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 44948, "is_private": false, "id": 120485, "attachment_id": null, "creator": "basant.kukreja@sun.com", "creation_time": "2008-09-08T17:18:04Z", "time": "2008-09-08T17:18:04Z", "text": "I think, there is something missing in our understanding. I also find this leak.\n\nI configured apache with worker mpm using 1 thread.\n\nThen I generated a large file of 300 mb which have repeatitive substituttion :\n\nhttpd.conf snippet :\n\nAlias /testsub/ \"/usr/local/apache2/htdocs2/testsub/\"\nLoadModule substitute_module modules/mod_substitute.so\n<Directory \"/usr/local/apache2/htdocs2/testsub\">\n    Options FollowSymLinks\n    AllowOverride None\n    AddOutputFilter SUBSTITUTE html\n    Substitute \"s/.*one.*two/1 2/\"\n</Directory>\n\nAfter every request, process size increases. I used mdb to find the leak :\n\nCACHE     LEAKED   BUFCTL CALLER\n080e9810     173 081d7278 libapr-1.so.0.4.0`allocator_alloc+0x2e3\n080e9810       2 081d7020 libapr-1.so.0.4.0`allocator_alloc+0x2e3\n------------------------------------------------------------------------\n   Total     175 buffers, 1612800 bytes\n\numem_alloc_9216 leak: 173 buffers, 9216 bytes each, 1594368 bytes total\n            ADDR          BUFADDR        TIMESTAMP           THREAD\n                            CACHE          LASTLOG         CONTENTS\n         81d7278          81da480    3524112f1e797                3\n                          80e9810                0                0\n                 libumem.so.1`umem_cache_alloc_debug+0x14f\n                 libumem.so.1`umem_cache_alloc+0x180\n                 libumem.so.1`umem_alloc+0xc5\n                 libumem.so.1`malloc+0x27\n                 libapr-1.so.0.4.0`allocator_alloc+0x2e3\n                 libapr-1.so.0.4.0`apr_pool_create_ex+0x77\n                 mod_substitute.so`do_pattmatch+0xbb\n                 mod_substitute.so`substitute_filter+0x53b\n                 ap_pass_brigade+0x9e\n                 default_handler+0x461\n                 ap_run_handler+0x51\n                 ap_invoke_handler+0x15b\n                 ap_process_async_request+0x6a\n                 ap_process_request+0x1a\n                 ap_process_http_connection+0x8e\n\nIf you see the do_pattmatch then the leak is there when it create pool.\n    apr_pool_create(&tpool, tmp_pool);\n\nAfter the end of do_pattmatch, pool is safely deleted.\n    apr_pool_destroy(tpool);\n\nThe question is why the memory is not recycled properly.\n\nNow when I send a single request, it leaks addtional 165 mallocs\n\nSo here is the number of malloc leaks reported by mdb :\nLeak after initial few requests : 334\nAfter one more request (of 30m size) : 499 \nAfter one more request (of 30m size) : 663\nAfter 10 more request (of 30m size) : 4313\n\nThe above pattern keeps increasing linearly with 164 leaks per request.\n\nMod_substitute code looks ok to me but because of some reason memory recycle\nis not happening properly.\n\nBut for sure, it seems to be a real issue.\n"}, {"count": 6, "tags": [], "bug_id": 44948, "text": "I am experiencing similar issues with Apache 2.2.3 (Centos RPM and mod_substite compiled from 2.2.11) and Apache 2.2.11 (compiled from source) on a x86_64 Centos 5.2 system. Using \"niq\" flags to append footers.\n\nPrefork process sizes start at 2-3MB. Once requests start coming in the process sizes start getting bigger and bigger until the system starts swapping. Running without mod_substitute this problem does not happen. \n\nOn a similar system using Apache 1.3.41 and mod_layout process size stays in the 2-3MB region.\n\nI can't put 2.2 into production because of this issue.\n\n", "id": 124338, "attachment_id": null, "creator": "john@nuatech.net", "creation_time": "2009-01-24T04:40:16Z", "time": "2009-01-24T04:40:16Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 44948, "is_private": false, "id": 124727, "attachment_id": null, "creator": "r.maccallum@imperial.ac.uk", "creation_time": "2009-02-09T04:00:27Z", "time": "2009-02-09T04:00:27Z", "text": "I get this too on 2.2.8 compiled from source with\n\n\"./configure\" \\\n\"--prefix=/usr/local/apache_dir/httpd-2.2.8\" \\\n\"--enable-proxy\" \\\n\"--enable-proxy-ajp\" \\\n\"--enable-rewrite\" \\\n\"--enable-substitute\" \\\n\non Red Hat Linux 2.6.18-53.1.4.el5 x86_64\n\nNote that the leak occurs even when the Substitute directive(s) have been commented out, e.g.\n\n<IfModule substitute_module>\n  <Location />  \n    AddOutputFilterByType SUBSTITUTE text/html\n#    Substitute \"s|</body>|<!-- hello --></body>|i\"\n  </Location>\n</IfModule>\n"}, {"count": 8, "tags": [], "bug_id": 44948, "text": "I was unable to reproduce this.\n\nI built httpd 2.2.11 on Ubuntu 8.10, same configuration as above:\n\n\"./configure\" \\\n\"--prefix=/home/poirier/src/httpd-2.2.11/built\" \\\n\"--enable-proxy\" \\\n\"--enable-proxy-ajp\" \\\n\"--enable-rewrite\" \\\n\"--enable-substitute\"\n\nI configured it to do a simple substitution, to use keepalive, and to have very long-lived processes:\n\n<Location />\nAddOutputFilterByType SUBSTITUTE text/html\nSubstitute \"s|It works|Hi Dan|i\"\n</Location>\n\n# Keepalive forever\nMaxKeepAliveRequests 0\n\n# Using prefork\n<IfModule mpm_prefork_module>\n    StartServers          1\n    MinSpareServers       1\n    MaxSpareServers       20\n    MaxClients            10\n    MaxRequestsPerChild   0\n</IfModule>\n\nThen I used ab to run millions of requests.  \n\nbin/ab -c 5 -k -n 100000 http://localhost/\n(repeatedly)\n\nAccording to ps, VSZ and RSS for the child processes plateaued early and never changed again.\n\nI did find that the \"ab\" utility gobbled memory and to get through millions of requests, I had to invoke it in smaller batches or ab ended up triggering swapping.  But httpd's memory usage never budged.\n\nQuestions for those who have reported this problem:\n\n- Have you tried it on 2.2.11?   (Run a million requests or so, not 10 or 20.  If memory usage goes up steadily, there's a leak; if it settles down to a steady size, there's not.)\n\n- If you're still seeing it on 2.2.11, can you provide the exact configuration you're using - configure command (build/config.nice), httpd.conf (conf/* and conf/*/*), even the web page being substituted against?  Try to narrow it down to the simplest configuration that still shows the problem, of course.", "id": 125252, "attachment_id": null, "creator": "poirier@pobox.com", "creation_time": "2009-03-02T05:19:38Z", "time": "2009-03-02T05:19:38Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 44948, "is_private": false, "id": 125695, "attachment_id": null, "creator": "poirier@pobox.com", "creation_time": "2009-03-23T05:23:37Z", "time": "2009-03-23T05:23:37Z", "text": "Waiting for recreate on 2.2.11, more details."}, {"count": 10, "tags": [], "bug_id": 44948, "text": "Thanks for the reminder.\n\nI've just compiled 2.2.11 with --enable-substitute and installed into a new directory for the sole purpose of running this test.  I took the HTML from http://funcgen.vectorbase.org/ExpressionData/ as my test index.html - it's about 27k (see below for testing on \"It works!\")\n\nHere's the httpd.conf:\n\n<IfModule substitute_module>\n  <Location />  \n    AddOutputFilterByType SUBSTITUTE text/html\n    Substitute \"s|</body>|<!-- hello --></body>|i\"\n  </Location>\n</IfModule>\n\n\nI'm testing it with a tcsh while loop on wget.\n\n wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n6863 logs/access_log\nroot      3382  0.0  0.0  13892  1784 ?        Ss   13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3383  0.5  0.0  14432  2264 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3384  0.4  0.0  14432  2256 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3385  0.5  0.0  14432  2256 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3386  0.5  0.0  14432  2256 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3387  0.4  0.0  14432  2256 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3402  0.6  0.0  14432  2208 ?        S    13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n29341 logs/access_log\nroot      3382  0.0  0.0  13892  1784 ?        Ss   13:56   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3383  0.4  0.0  15652  3468 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3384  0.4  0.0  15652  3460 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3385  0.4  0.0  15652  3460 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3386  0.4  0.0  15652  3460 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3387  0.4  0.0  15652  3460 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    3402  0.4  0.0  15652  3412 ?        S    13:56   0:02 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\nI can clearly see the resource usage growing (albeit slowly).\n\n\nHere we go again with the AddOutputFilterByType and Substitute lines commented out:\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n294 logs/access_log\nroot      9158  0.0  0.0  13892  1784 ?        Ss   14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9159  0.0  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9160  0.1  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9161  0.1  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9162  0.1  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9163  0.0  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n15142 logs/access_log\nroot      9158  0.0  0.0  13892  1784 ?        Ss   14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9159  0.4  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9160  0.4  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9161  0.5  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9162  0.5  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon    9163  0.5  0.0  14028  1792 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   10507  0.4  0.0  14024  1744 ?        S    14:10   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\nMemory use is rock solid.  As per my previous report, just commenting the Substitute line does not prevent the leak.\n\n\nInterestingly, if I use a trivial \"It works!\" style index.html, it does not seem to leak memory:\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n1318 logs/access_log\nroot     24651  0.0  0.0  13896  1784 ?        Ss   14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24652  0.3  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24653  0.1  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24654  0.2  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24655  0.1  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24656  0.2  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   25104  0.1  0.0  14028  1756 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n15630 logs/access_log\nroot     24651  0.0  0.0  13896  1784 ?        Ss   14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24652  0.4  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24653  0.4  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24654  0.4  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24655  0.4  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   24656  0.3  0.0  14032  1804 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon   25104  0.4  0.0  14028  1756 ?        S    14:15   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\nSo does this suggest that a page filling more than one filter buffer causes the problem?\n\nmany thanks,\nBob.", "id": 125699, "time": "2009-03-23T07:23:54Z", "creator": "r.maccallum@imperial.ac.uk", "creation_time": "2009-03-23T07:23:54Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "forgot to change status to \"NEW\"", "attachment_id": null, "bug_id": 44948, "id": 125700, "time": "2009-03-23T07:25:07Z", "creator": "r.maccallum@imperial.ac.uk", "creation_time": "2009-03-23T07:25:07Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 44948, "is_private": false, "id": 125702, "attachment_id": null, "creator": "poirier@pobox.com", "creation_time": "2009-03-23T07:39:34Z", "time": "2009-03-23T07:39:34Z", "text": "That's definitely helpful. I'll try again with a larger test file."}, {"count": 13, "tags": [], "bug_id": 44948, "is_private": false, "id": 125716, "creation_time": "2009-03-23T11:15:16Z", "time": "2009-03-23T11:15:16Z", "creator": "poirier@pobox.com", "text": "Created attachment 23400\nProposed fix against 2.2.11\n\nI was able to reproduce the problem.  The attached patch seemed to solve the problem; it looked as though a bucket was leaking there.  Can you try it and see if it works for you?  It's against 2.2.11.", "attachment_id": 23400}, {"text": "Waiting for results of test patch.", "tags": [], "bug_id": 44948, "is_private": false, "count": 14, "id": 125717, "time": "2009-03-23T11:15:59Z", "creator": "poirier@pobox.com", "creation_time": "2009-03-23T11:15:59Z", "attachment_id": null}, {"count": 15, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "text": "(In reply to comment #13)\n> Created an attachment (id=23400) [details]\n> Proposed fix against 2.2.11\n> \n> I was able to reproduce the problem.  The attached patch seemed to solve the\n> problem; it looked as though a bucket was leaking there.  Can you try it and\n> see if it works for you?  It's against 2.2.11.\n\nWhile I agree with your patch that \napr_bucket_delete is better than APR_BUCKET_REMOVE and avoids a leak in theory I currently fail to see that we execute this code section often enough to produce a leak in practice. To be honest we should only hit this code section rarely.", "id": 125721, "time": "2009-03-23T14:25:34Z", "bug_id": 44948, "creation_time": "2009-03-23T14:25:34Z", "is_private": false}, {"count": 16, "tags": [], "creator": "r.maccallum@imperial.ac.uk", "attachment_id": null, "text": "(In reply to comment #15)\n> While I agree with your patch that \n> apr_bucket_delete is better than APR_BUCKET_REMOVE and avoids a leak in theory\n> I currently fail to see that we execute this code section often enough to\n> produce a leak in practice. To be honest we should only hit this code section\n> rarely.\n\nBut we've shown there's a leak.  I've shown that it wasn't too bad when processing smallish content, but others have had httpd swapping out with larger content.  If our project deploys the substitute filter, we will need it to be rock solid on content from a few bytes up to several megabytes.\n\nAre you implying that there is significant overhead with apr_bucket_delete()?", "id": 125730, "time": "2009-03-24T02:56:37Z", "bug_id": 44948, "creation_time": "2009-03-24T02:56:37Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 44948, "is_private": false, "id": 125731, "attachment_id": null, "creator": "r.maccallum@imperial.ac.uk", "creation_time": "2009-03-24T03:15:08Z", "time": "2009-03-24T03:15:08Z", "text": "Thanks for the patch Dan.  With the patch applied, I am not seeing any leak on a 378K index.html test file.\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n296 logs/access_log\nroot       798  0.0  0.0  13896  1784 ?        Ss   10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     799  0.3  0.0  14032  1888 ?        S    10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     800  0.3  0.0  14032  1884 ?        S    10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     801  0.3  0.0  14032  1892 ?        S    10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     802  0.4  0.0  14032  1884 ?        S    10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     803  0.4  0.0  14032  1884 ?        S    10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     913  3.0  0.0  14028  1836 ?        S    10:08   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\n\n# wc -l logs/access_log ; ps auxwww | grep temp/bin/httpd \n10311 logs/access_log\nroot       798  0.0  0.0  13896  1784 ?        Ss   10:07   0:00 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     799  2.0  0.0  14032  1888 ?        S    10:07   0:06 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     800  1.9  0.0  14032  1884 ?        S    10:07   0:06 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     801  2.0  0.0  14032  1892 ?        S    10:07   0:06 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     802  2.0  0.0  14032  1884 ?        S    10:07   0:06 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     803  2.0  0.0  14032  1884 ?        S    10:07   0:06 /usr/local/apache_dir/temp/bin/httpd -k start\ndaemon     913  2.3  0.0  14028  1836 ?        S    10:08   0:05 /usr/local/apache_dir/temp/bin/httpd -k start\n\n\nI don't really know the best way to test the (speed) performance of the patch, and, anyway, there's another big job running on the machine right now so it's not the best time.  But I will run some simple tests if you show me.\n\ncheers,\nBob."}, {"count": 18, "attachment_id": null, "bug_id": 44948, "is_private": false, "id": 125735, "time": "2009-03-24T04:01:20Z", "creator": "rpluem@apache.org", "creation_time": "2009-03-24T04:01:20Z", "tags": [], "text": "(In reply to comment #16)\n\n> \n> Are you implying that there is significant overhead with apr_bucket_delete()?\n\nNo. I was implying that this patch might not be the fix for your leak. But apparently I was wrong and it fixes your leak."}, {"count": 19, "tags": [], "creator": "rpluem@apache.org", "attachment_id": null, "id": 125741, "time": "2009-03-24T04:31:27Z", "bug_id": 44948, "creation_time": "2009-03-24T04:31:27Z", "is_private": false, "text": "Patch committed to trunk in r757741."}, {"count": 20, "tags": [], "creator": "wrowe@apache.org", "text": "Patch committed; so closing.", "id": 127169, "time": "2009-05-19T10:28:30Z", "bug_id": 44948, "creation_time": "2009-05-19T10:28:30Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "russel@russel.org.uk", "attachment_id": null, "text": "When using the AntBuilder in Groovy, the following error message occurs when\ntrying to use the Javac task:\n\nCaught: : Unable to find a javac compiler;\ncom.sun.tools.javac.Main is not on the classpath.\nPerhaps JAVA_HOME does not point to the JDK.\nIt is currently set to \"/usr/lib/jvm/java-6-sun-1.6.0.03/jre\"\n        at GROOVY_2258.run(GROOVY_2258.groovy:5)\n        at GROOVY_2258.main(GROOVY_2258.groovy)\n\nThe Ant problem here is that the JAVA_HOME mentioned here is not the user's\nenvironment variable JAVA_HOME.  Instead I believe it relates to the variable\nJAVA_HOME in src/main/org/apache/tools/ant/util/JavaEnvUtils.java.  Although\nthere is a relationship between the paths involved, the variable JAVA_HOME is\nmore directly related to System.getProperty ( \"java.home\" ) than to\nSystem.getenv ( \"JAVA_HOME\" ) -- the former refers to the JRE whereas the latter\n will point a directory higher.\n\nClearly this is not an issue to the correct execution on Ant in and of itself.\nHowever for any system (such as Groovy) that uses the Ant jars programmatically,\nthis is actually a real problem.", "id": 110231, "time": "2007-11-04T23:55:55Z", "bug_id": 43794, "creation_time": "2007-11-04T23:55:55Z", "is_private": false}, {"count": 1, "tags": [], "creator": "bryan_w_taylor@yahoo.com", "text": "The error message in question is produced in\norg.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory.getCompiler(String\ncompilerType, Task task) after Javac.execute() calls compile() which calls it.\n\nThe search in getCompiler(..) is compiler type specific, but it looks like you\nare running java-6 on linux or unix, so you get the common case where it calls\ndoesModernCompilerExist() and if this returns false, it throws the error.\nInterestingly, this method doesn't appear to use either java.home or JAVA_HOME\ndirectly. Instead it tries to load it in two ways, returning false if both fail\n - Class.forName(MODERN_COMPILER); \n - CompilerAdapterFactory.class.getClassLoader().loadClass(MODERN_COMPILER)\nwhere MODERN_COMPILER = \"com.sun.tools.javac.Main\"\n\nI would think those two are usually equivalent, so the question is how\nCompilerAdapterFactory.class (and presumably Javac.class) could get loaded in a\nclassloader that doesn't have tools.jar on it's classpath.\n\nThe message should just say something like \"Can't find com.sun.tools.javac.Main\non the classpath that loaded the javac task. Make sure tools.jar from the JDK is\non the classpath.\" It seems like the bootclasspath and classpath task attributes\ncould also be used to supplement the search.\n", "id": 111848, "time": "2007-12-17T23:36:35Z", "bug_id": 43794, "creation_time": "2007-12-17T23:36:35Z", "is_private": false, "attachment_id": null}]
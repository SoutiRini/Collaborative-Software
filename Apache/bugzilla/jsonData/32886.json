[{"count": 0, "tags": [], "bug_id": 32886, "text": "I have a mature application working with client webdavlib 2.0, with the webdav\nserver that comes with tomcat 5.0.28. Client webdavlib 2.1 seams to be broken.\nMethod listWebdavResources() doesn't return child collections, but the parent\ncollection itself.\n\nThis is the directory structure I tested:\n\nparent/\n\tchild1/\n\tchild2/\n\tfile1.txt\n\tfile2.txt\n\n\nThis is my code:\n\nHttpURL url = new HttpURL(\"http://localhost:8080/webdav/[some-url]\");\nurl.setUserinfo(\"user\", \"pass\");\nWebdavResource wdResource = new WebdavResource(url);\nWebdavResource[] webdavList = wdResource.listWebdavResources();\n\n\tSystem.out.println(\"Display Name: \" + wdResource.getDisplayName());\n\tWebdavResource[] webdavList = null;\n\twebdavList = wdResource.listWebdavResources();\n\tSystem.out.println(\"Children returned: \" + webdavList.length);\n\n\tfor (int idx = 0; idx < webdavList.length; idx++) {\n\t\tSystem.out.println(\"\\t\" + webdavList[idx].getDisplayName());\n\t\tSystem.out.println(\"\\t\" + webdavList[idx].getHttpURL());\n\t}\n\nThis is the output:\n\nDisplay Name: parent\nChildren returned: 3\n\tfile1.txt\n\thttp://localhost:8080/webdav/parent/file1.txt\n\tchild2\n\thttp://localhost:8080/webdav/parent/\n\tfile2.txt\n\thttp://localhost:8080/webdav/parent/file2.txt\n\nThe third result is the URL of the parent, with display name \"child2\"!\nSo nothing about child1, although it comes from the server (see trace).\nAnd child2 URL is bad, because it shows parent URL.\n\nIn general, I see that collection childs are never shown.\n\nAnd this is the http tracing I got. There are two requests involved, the first\nusing depth 0 and the second using depth 1.\n\nFIRST REQUEST\n===============\n\nPROPFIND /webdav/parent HTTP/1.1\nAuthorization: Basic anVncmVnbzE6cGFkZW50cm8=\nContent-Type: text/xml; charset=utf-8\nUser-Agent: Jakarta Commons-HttpClient/2.0final\nHost: localhost:8080\nContent-Length: 207\nDepth: 0\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:propfind xmlns:D=\"DAV:\">\n\t<D:prop>\n\t\t<D:displayname/>\n\t\t<D:getcontentlength/>\n\t\t<D:getcontenttype/>\n\t\t<D:resourcetype/>\n\t\t<D:getlastmodified/>\n\t\t<D:lockdiscovery/>\n\t</D:prop>\n</D:propfind>\n\nFIRST RESPONSE\n=================\n\nHTTP/1.1 207 Multi-Estado\nContent-Type: text/xml;charset=UTF-8\nContent-Length: 436\nDate: Thu, 30 Dec 2004 09:51:45 GMT\nServer: Apache-Coyote/1.1\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<multistatus xmlns=\"DAV:\">\n\t<response>\n\t\t<href>/webdav/parent/</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[parent]]></displayname>\n\t\t\t\t<resourcetype>\n\t\t\t\t\t<collection/>\n\t\t\t\t</resourcetype>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<getcontentlength/>\n\t\t\t\t<getcontenttype/>\n\t\t\t\t<getlastmodified/>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n</multistatus>\n\nSECOND REQUEST\n================\n\nPROPFIND /webdav/parent HTTP/1.1\nAuthorization: Basic anVncmVnbzE6cGFkZW50cm8=\nContent-Type: text/xml; charset=utf-8\nUser-Agent: Jakarta Commons-HttpClient/2.0final\nHost: localhost:8080\nContent-Length: 207\nDepth: 1\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<D:propfind xmlns:D=\"DAV:\">\n\t<D:prop>\n\t\t<D:displayname/>\n\t\t<D:getcontentlength/>\n\t\t<D:getcontenttype/>\n\t\t<D:resourcetype/>\n\t\t<D:getlastmodified/>\n\t\t<D:lockdiscovery/>\n\t</D:prop>\n</D:propfind>\n\nSECOND RESPONSE\n=================\n\nHTTP/1.1 207 Multi-Estado\nContent-Type: text/xml;charset=UTF-8\nContent-Length: 2028\nDate: Thu, 30 Dec 2004 09:51:45 GMT\nServer: Apache-Coyote/1.1\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<multistatus xmlns=\"DAV:\">\n\t<response>\n\t\t<href>/webdav/parent/</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[parent]]></displayname>\n\t\t\t\t<resourcetype>\n\t\t\t\t\t<collection/>\n\t\t\t\t</resourcetype>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<getcontentlength/>\n\t\t\t\t<getcontenttype/>\n\t\t\t\t<getlastmodified/>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n\t<response>\n\t\t<href>/webdav/parent/file2.txt</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[file2.txt]]></displayname>\n\t\t\t\t<getcontentlength>10</getcontentlength>\n\t\t\t\t<getcontenttype>text/plain</getcontenttype>\n\t\t\t\t<resourcetype/>\n\t\t\t\t<getlastmodified>Mon, 27 Sep 2004 11:13:07 GMT</getlastmodified>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n\t<response>\n\t\t<href>/webdav/parent/file1.txt</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[file1.txt]]></displayname>\n\t\t\t\t<getcontentlength>10</getcontentlength>\n\t\t\t\t<getcontenttype>text/plain</getcontenttype>\n\t\t\t\t<resourcetype/>\n\t\t\t\t<getlastmodified>Mon, 27 Sep 2004 11:13:07 GMT</getlastmodified>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n\t<response>\n\t\t<href>/webdav/parent/child2/</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[child2]]></displayname>\n\t\t\t\t<resourcetype>\n\t\t\t\t\t<collection/>\n\t\t\t\t</resourcetype>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<getcontentlength/>\n\t\t\t\t<getcontenttype/>\n\t\t\t\t<getlastmodified/>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n\t<response>\n\t\t<href>/webdav/parent/child1/</href>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<displayname><![CDATA[child1]]></displayname>\n\t\t\t\t<resourcetype>\n\t\t\t\t\t<collection/>\n\t\t\t\t</resourcetype>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 200 OK</status>\n\t\t</propstat>\n\t\t<propstat>\n\t\t\t<prop>\n\t\t\t\t<getcontentlength/>\n\t\t\t\t<getcontenttype/>\n\t\t\t\t<getlastmodified/>\n\t\t\t\t<lockdiscovery/>\n\t\t\t</prop>\n\t\t\t<status>HTTP/1.1 404 Not Found</status>\n\t\t</propstat>\n\t</response>\n</multistatus>\n\nAs you can see from the second response, all the resources are returned\ncorrectly from the server.", "id": 69076, "time": "2004-12-30T11:07:06Z", "creator": "canrull@hotmail.com", "creation_time": "2004-12-30T11:07:06Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "I have a very similar problem: when I listWebdavResources() on a collection,\nonly the first child collection is returned, and its path is wrong (it is the\npath of the parent).  This worked with 2.0 but not in 2.1.\n\nWhat is the status of this bug?  If it is genuine and not an error in usage, I\nam suprised anyone can use this version.", "is_private": false, "id": 70462, "creator": "robert.leathley@ricardo.com", "time": "2005-02-03T15:22:04Z", "bug_id": 32886, "creation_time": "2005-02-03T15:22:04Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "(In reply to comment #1)\n> I have a very similar problem: when I listWebdavResources() on a collection,\n> only the first child collection is returned, and its path is wrong (it is the\n> path of the parent).  This worked with 2.0 but not in 2.1.\n> \n> What is the status of this bug?  If it is genuine and not an error in usage, I\n> am suprised anyone can use this version.\n\n\nI am afraid few people use other WEBDAV servers than Slide. I guess this is not\na problem with Slide server...\n\nAre you Rob using Slide server?\n\nI'll patiently wait for a new release of this library, 2.1 is not usable for me.", "is_private": false, "id": 70495, "creator": "canrull@hotmail.com", "time": "2005-02-04T09:53:19Z", "bug_id": 32886, "creation_time": "2005-02-04T09:53:19Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 32886, "is_private": false, "text": "(In reply to comment #2)\n\nNo, I'm using the Apache webdav server.\n\n2.1 isn't usable for me either.  I was hoping it may fix some problem with\nescaped url's (bug #33136)\n", "id": 70497, "time": "2005-02-04T10:38:07Z", "creator": "robert.leathley@ricardo.com", "creation_time": "2005-02-04T10:38:07Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 32886, "attachment_id": null, "text": "(In reply to comment #3)\n> (In reply to comment #2)\n> No, I'm using the Apache webdav server.\n> 2.1 isn't usable for me either.  I was hoping it may fix some problem with\n> escaped url's (bug #33136)\n\nI have the same problem accessing a DAV server running on IIS 5.1.\n\nIn addition, list() also returns the parent, rather than listing its contents", "id": 70600, "time": "2005-02-08T03:07:06Z", "creator": "djurisic@berkeley.edu", "creation_time": "2005-02-08T03:07:06Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 32886, "is_private": false, "id": 70864, "time": "2005-02-11T22:05:37Z", "creator": "daniel.hasler@hasware.ch", "creation_time": "2005-02-11T22:05:37Z", "tags": [], "text": "I experienced the same problem using the slide WebDAV client library against \nsubversion 1.1.3."}, {"count": 6, "tags": [], "bug_id": 32886, "attachment_id": null, "text": "I think I had reported this too.  I traced this down to the following:\n\nIn WebdavResource, line 1086:  URIUtil.getName(href) is used to get the name of\nthe item; however as per the javadocs this method returns an empty string if\nhref ends with a slash.  At least with subversion, all hrefs to collections are\nreported as ending with a slash; therefore no sub-collections are ever reported\nby the WebdavResource.listWebdavResources() or associated methods.\n\nMy fix:  replace URIUtil.getName(href)  with  WebdavResource.getName(href)  this\nseems to work fine for me; although as I said I am not sure what, if any,\nimplications this might have on other functionality. ", "id": 70877, "time": "2005-02-12T05:50:14Z", "creator": "robert.sanders@ipov.net", "creation_time": "2005-02-12T05:50:14Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 32886, "attachment_id": null, "text": "(In reply to comment #6)\n\nI tried this solution because I saw your post before reporting the bug.\n\nIt didn't solve my problem.", "id": 70920, "time": "2005-02-14T12:05:22Z", "creator": "canrull@hotmail.com", "creation_time": "2005-02-14T12:05:22Z", "is_private": false}, {"count": 8, "tags": [], "text": "(In reply to comment #6)\n> I think I had reported this too.  I traced this down to the following:\n> \n> In WebdavResource, line 1086:  URIUtil.getName(href) is used to get the name of\n> the item; however as per the javadocs this method returns an empty string if\n> href ends with a slash.  At least with subversion, all hrefs to collections are\n> reported as ending with a slash; therefore no sub-collections are ever reported\n> by the WebdavResource.listWebdavResources() or associated methods.\n> \n> My fix:  replace URIUtil.getName(href)  with  WebdavResource.getName(href)  this\n> seems to work fine for me; although as I said I am not sure what, if any,\n> implications this might have on other functionality. \n\n\nThanks for this suggestion. I too looked into the source code and found this to\nbe the problem. But the solution I used was to add the following lines\n\nhref = href.endsWith(\"/\") ? href.substring(0,href.length() - 1) : href;\nhref=href.replaceAll(\"\\\\[\",\"%5B\");\nhref=href.replaceAll(\"\\\\]\",\"%5D\");\nhref=href.replaceAll(\"\\\\|\",\"%7C\");\nhref=href.replaceAll(\"\\\\^\",\"%5E\");\nhref=href.replaceAll(\"\\\\`\",\"%60\");\n\nThis I found to work perfectly. And the reason for the replaces statments is to\nencode all special charaters that the exchange server might return. I suppose\nthat this would be better done with the URLEncoder.\n\nThis seems to be a long standing issue and because the fix is so simple I do not\nknow why it has not been implemented yet.\n\nI will be using my modified class until the changes are implemented in the\nofficial source code.\n", "is_private": false, "id": 72428, "creator": "philipmaciver@yahoo.co.uk", "time": "2005-03-15T06:19:13Z", "bug_id": 32886, "creation_time": "2005-03-15T06:19:13Z", "attachment_id": null}, {"count": 9, "tags": [], "creator": "masonjm@apache.org", "is_private": false, "id": 72552, "attachment_id": null, "bug_id": 32886, "creation_time": "2005-03-17T08:22:58Z", "time": "2005-03-17T08:22:58Z", "text": "Fix committed to HEAD. If no one finds any problems with it I'll backport it to\nthe 2.1 branch.\n\nI used Robert's fix, but I tweaked the getName() method a bit. It was decoding\nthe name which made anything with spaces in it invalid."}, {"count": 10, "tags": [], "bug_id": 32886, "text": "*** Bug 22585 has been marked as a duplicate of this bug. ***", "id": 72554, "time": "2005-03-17T08:34:08Z", "creator": "masonjm@apache.org", "creation_time": "2005-03-17T08:34:08Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 32886, "text": "*** Bug 32470 has been marked as a duplicate of this bug. ***", "id": 72558, "time": "2005-03-17T08:43:43Z", "creator": "masonjm@apache.org", "creation_time": "2005-03-17T08:43:43Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 32886, "text": "Thanks indeed, \n\ntoday's cvs version of webdavclient runs smoothly (2.2pre1).\n\nI think I'll wait for 2.2 to be released, instead of getting 2.1 patched (I'll\njump over it!)\n \nregards,\ncanrull", "id": 72574, "time": "2005-03-17T11:31:17Z", "creator": "canrull@hotmail.com", "creation_time": "2005-03-17T11:31:17Z", "is_private": false, "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 32886, "text": "With regard to bug 32886\n\n\thttp://issues.apache.org/bugzilla/show_bug.cgi?id=32886\n\nI was wondering what version of the Slide client API the fix was put in, as I \nget the same error described in this bug with the 2.1 binary version I \ndownloaded off the website today.  I assume I'd need to use a 2.2 beta or \nrelease candidate(?)\n\nMore info:\n\nFolder structure is below ('+' denotes folder, '-' denotes file.  Note: these \nsymbols are not part of the file name):\n\nhttp://dav.biscu.com/\n\n\t+NewFolder1\n\n\t\t+A New Folder\n\n\t\t\t+SubSubFolder\n\n\t\t\t\t-MyDocsOnline.txt\n\t\t\t\t-TestFileUpload.txt\n\n\t\t\t-MyDocsOnline.txt\n\t\t\t-TestFileUpload.txt\n\n\t\t+NewFolder3\n\n\t\t\t-MyDocsOnline.txt\n\t\t\t-TestFileUpload.txt\n\n\t\t-MyDocsOnline.txt\n\t\t-TestFileUpload.txt\n\n\t+NewFolder\n\n\t-MyDocsOnline.txt\n\t-TestFileUpload.txt\n\n\nThe code I used to test is below:\n\n\n    HttpURL url = new HttpURL(\"http://dav.Biscu.com/\");\n    url.setUserinfo(\"dmx_dawg@hotmail.com\", \"TUSu_618\");\n        \n    WebdavResource wdr = new WebdavResource(url);\n    recurseResources(wdr, 0);\n\n\n    public void recurseResources(WebdavResource parent, int depth)\n        throws Exception\n    {\n        int MAX_DEPTH = 3;\n        \n        if(depth > MAX_DEPTH || parent == null)\n            return;\n        \n        WebdavResource[] wdrsArray = parent.listWebdavResources();\n        \n        for(WebdavResource r : wdrsArray)\n        {            \n            String s = r.isCollection() ? \"[COLLECTION] \" : \"[FILE] \";\n            System.out.println(repeat(\"\\t\", depth) + s + r.getDisplayName\n());            \n            \n            if(r.isCollection())\n                recurseResources(r, depth + 1);\n        }\n    }\n\n    public String repeat(String s, int n)\n    {\n        StringBuffer sb = new StringBuffer();\n        for(int i = 0; i < n; ++i)\n            sb.append(s);\n        return sb.toString();\n    }\n\nThe output was:\n\n[FILE] TestFileUpload.txt\n[FILE] MyDocsOnline.txt\n[COLLECTION] NewFolder2\n        [FILE] TestFileUpload.txt\n        [FILE] MyDocsOnline.txt\n        [COLLECTION] NewFolder2\n                [FILE] TestFileUpload.txt\n                [FILE] MyDocsOnline.txt\n                [COLLECTION] NewFolder2\n                        [FILE] TestFileUpload.txt\n                        [FILE] MyDocsOnline.txt\n                        [COLLECTION] NewFolder2\n", "id": 85784, "time": "2006-02-14T23:32:05Z", "creator": "dmx_dawg@hotmail.com", "creation_time": "2006-02-14T23:32:05Z", "is_private": false, "attachment_id": null}, {"count": 14, "tags": [], "text": "I bumped into the problem as well. 2.1 didn't work for me.\nA solution was to change a part of WebdavResource.setWebdavProperties after\n\nif (!itself) {\nString myURI = httpURL.getEscapedURI();\n\n...\n\nto\n\nif (!itself) {\n                String myURI = httpURL.getEscapedURI();\n                final String adjustedHref = href.endsWith(\"/\") ?\nhref.substring(0, href.length() - 1) : href;\n                final String name = URIUtil.getName(adjustedHref);\n                char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n                                   + name).toCharArray();\n\nthe problem is that children's hrefs can end with '/' and in this case\nURIUtil.getName returns empty string. Because of that childURI is the same as\nmyURI (bug!!!)", "is_private": false, "id": 87750, "creator": "igor.karpov@mail.ru", "time": "2006-04-11T10:59:08Z", "bug_id": 32886, "creation_time": "2006-04-11T10:59:08Z", "attachment_id": null}, {"count": 15, "tags": [], "text": "I bumped into the problem as well. 2.1 didn't work for me.\nA solution was to change a part of WebdavResource.setWebdavProperties after\n\nif (!itself) {\nString myURI = httpURL.getEscapedURI();\n\n...\n\nto\n\nif (!itself) {\n                String myURI = httpURL.getEscapedURI();\n                final String adjustedHref = href.endsWith(\"/\") ?\nhref.substring(0, href.length() - 1) : href;\n                final String name = URIUtil.getName(adjustedHref);\n                char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n                                   + name).toCharArray();\n\nthe problem is that children's hrefs can end with '/' and in this case\nURIUtil.getName returns empty string. Because of that childURI is the same as\nmyURI (bug!!!)", "is_private": false, "id": 87751, "creator": "igor.karpov@mail.ru", "time": "2006-04-11T10:59:34Z", "bug_id": 32886, "creation_time": "2006-04-11T10:59:34Z", "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 32886, "attachment_id": null, "text": "(In reply to comment #14)\n> I bumped into the problem as well. 2.1 didn't work for me.\n> A solution was to change a part of WebdavResource.setWebdavProperties after\n> \n> if (!itself) {\n> String myURI = httpURL.getEscapedURI();\n> \n> ...\n> \n> to\n> \n> if (!itself) {\n>                 String myURI = httpURL.getEscapedURI();\n>                 final String adjustedHref = href.endsWith(\"/\") ?\n> href.substring(0, href.length() - 1) : href;\n>                 final String name = URIUtil.getName(adjustedHref);\n>                 char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n>                                    + name).toCharArray();\n> \n> the problem is that children's hrefs can end with '/' and in this case\n> URIUtil.getName returns empty string. Because of that childURI is the same as\n> myURI (bug!!!)\n\n\nThanks Igor!  Everything works fine now.  Also thanks to Robert and Philip.  For\nthose who want a fast cut-and-paste solution, simply replace the entire\n\n    protected void setWebdavProperties(Enumeration responses)\n\nmethod in org.apache.webdav.lib.WebdavResource with the following code:\n\n// START: FIX /////////////////////////////////////////////////////\n    /**\n     * Set WebDAV properties following to the given http URL.\n     * This method is fundamental for getting information of a collection.\n     *\n     * @param responses An enumeration over {@link ResponseEntity} items, one\n     * for each resource for which information was returned via PROPFIND.\n     *\n     * @exception HttpException\n     * @exception IOException The socket error with a server.\n     */\n    protected void setWebdavProperties(Enumeration responses)\n        throws HttpException, IOException {\n    \n        // Make the resources in the collection empty.\n        childResources.removeAll();\n        while (responses.hasMoreElements()) {\n    \n            ResponseEntity response =\n                (ResponseEntity) responses.nextElement();\n    \n            boolean itself = false;\n            String href = response.getHref();\n            if (!href.startsWith(\"/\"))\n                href = URIUtil.getPath(href);\n            href = decodeMarks(href);\n\n            /*\n             * Decode URIs to common (unescaped) format for comparison \n             * as HttpClient.URI.setPath() doesn't escape $ and : chars.\n             */\n            String httpURLPath = httpURL.getPath();\n            String escapedHref = URIUtil.decode(href);\n            \n            // Normalize them to both have trailing slashes if they differ by\none in length.\n            int lenDiff = escapedHref.length() - httpURLPath.length();\n            int compareLen = 0;\n            \n            if ( lenDiff == -1 && !escapedHref.endsWith(\"/\")) {\n                compareLen = escapedHref.length();\n                lenDiff = 0;\n            }\n            else\n            if ( lenDiff == 1 && !httpURLPath.endsWith(\"/\")) {\n                compareLen = httpURLPath.length();\n                lenDiff = 0;\n            }\n\n            // if they are the same length then compare them.\n            if (lenDiff == 0) {\n                if ((compareLen == 0 && httpURLPath.equals(escapedHref))\n                    || httpURLPath.regionMatches(0, escapedHref, 0, compareLen))\n                {\n                    // escaped href and http path are the same\n                    // Set the status code for this resource.\n                    if (response.getStatusCode() > 0)\n                        setStatusCode(response.getStatusCode());\n                    setExistence(true);\n                    itself = true;\n                }\n            }\n    \n            // Get to know each resource.\n            WebdavResource workingResource = null;\n            if (itself) {\n                workingResource = this;\n            }\n            else {\n                workingResource = createWebdavResource(client);\n                workingResource.setDebug(debug);\n            }\n    \n            // clear the current lock set\n            workingResource.setLockDiscovery(null);\n    \n            // Process the resource's properties\n            Enumeration properties = response.getProperties();\n            while (properties.hasMoreElements()) {\n    \n                Property property = (Property) properties.nextElement();\n    \n                // ------------------------------  Checking WebDAV properties\n                workingResource.processProperty(property);\n            }\n    \n            String displayName = workingResource.getDisplayName();\n    \n            if (displayName == null || displayName.trim().equals(\"\")) {\n                displayName = getName(href);\n            }\n\n            /** BUGGY CODE\n            if (!itself) {\n                String myURI = httpURL.getEscapedURI();\n                char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n                                   + URIUtil.getName(href)).toCharArray();\n                HttpURL childURL = httpURL instanceof HttpsURL\n                                   ? new HttpsURL(childURI)\n                                   : new HttpURL(childURI);\n                childURL.setRawAuthority(httpURL.getRawAuthority());\n                workingResource.setHttpURL(childURL, NOACTION, defaultDepth);\n                workingResource.setExistence(true);\n                workingResource.setOverwrite(getOverwrite());\n            }\n            */\n            \n            /** FIX ********/\n            if (!itself) {                \n                String myURI = httpURL.getEscapedURI();\n                \n                /**\n                \tChecks if href contains trailing '/', and if so removes it.\n                \tThis ensures URIUtil.getName does not return an empty\n                \tString when we don't want it to.\n                \t\n                \tSee http://issues.apache.org/bugzilla/show_bug.cgi?id=32886\n                \tfor more information.\n                */\n                String fixedHref = href.endsWith(\"/\") ?\n                    href.substring(0, href.length() - 1) : href;\n                \n                char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n                                   + URIUtil.getName(fixedHref)).toCharArray();\n                \n                HttpURL childURL = httpURL instanceof HttpsURL\n                                   ? new HttpsURL(childURI)\n                                   : new HttpURL(childURI);\n                childURL.setRawAuthority(httpURL.getRawAuthority());\n                workingResource.setHttpURL(childURL, NOACTION, defaultDepth);\n                workingResource.setExistence(true);\n                workingResource.setOverwrite(getOverwrite());\n            }            \n            /**************/\n            \n            \n            workingResource.setDisplayName(displayName);\n    \n            if (!itself)\n                childResources.addResource(workingResource);\n        }\n    }\n// END: FIX /////////////////////////////////////////////////////\n\nThe code is based on Igor's solution and should work fine.  Please post here if\nyou stumble upon any issues the fix causes.  In the meantime however, its\nworking perfectly for me.\n\nCheers!\n\nMike N. Christoff", "id": 89276, "time": "2006-05-18T22:34:57Z", "creator": "dmx_dawg@hotmail.com", "creation_time": "2006-05-18T22:34:57Z", "is_private": false}, {"count": 17, "tags": [], "creator": "prileva@yahoo.com", "text": "I am still having problem with this solution. I now have deleted folders beeing\nlisted with the listWebdavResources call...\n\n(In reply to comment #0)\n> I have a mature application working with client webdavlib 2.0, with the webdav\n> server that comes with tomcat 5.0.28. Client webdavlib 2.1 seams to be broken.\n> Method listWebdavResources() doesn't return child collections, but the parent\n> collection itself.\n> \n> This is the directory structure I tested:\n> \n> parent/\n> \tchild1/\n> \tchild2/\n> \tfile1.txt\n> \tfile2.txt\n> \n> \n> This is my code:\n> \n> HttpURL url = new HttpURL(\"http://localhost:8080/webdav/[some-url]\");\n> url.setUserinfo(\"user\", \"pass\");\n> WebdavResource wdResource = new WebdavResource(url);\n> WebdavResource[] webdavList = wdResource.listWebdavResources();\n> \n> \tSystem.out.println(\"Display Name: \" + wdResource.getDisplayName());\n> \tWebdavResource[] webdavList = null;\n> \twebdavList = wdResource.listWebdavResources();\n> \tSystem.out.println(\"Children returned: \" + webdavList.length);\n> \n> \tfor (int idx = 0; idx < webdavList.length; idx++) {\n> \t\tSystem.out.println(\"\\t\" + webdavList[idx].getDisplayName());\n> \t\tSystem.out.println(\"\\t\" + webdavList[idx].getHttpURL());\n> \t}\n> \n> This is the output:\n> \n> Display Name: parent\n> Children returned: 3\n> \tfile1.txt\n> \thttp://localhost:8080/webdav/parent/file1.txt\n> \tchild2\n> \thttp://localhost:8080/webdav/parent/\n> \tfile2.txt\n> \thttp://localhost:8080/webdav/parent/file2.txt\n> \n> The third result is the URL of the parent, with display name \"child2\"!\n> So nothing about child1, although it comes from the server (see trace).\n> And child2 URL is bad, because it shows parent URL.\n> \n> In general, I see that collection childs are never shown.\n> \n> And this is the http tracing I got. There are two requests involved, the first\n> using depth 0 and the second using depth 1.\n> \n> FIRST REQUEST\n> ===============\n> \n> PROPFIND /webdav/parent HTTP/1.1\n> Authorization: Basic anVncmVnbzE6cGFkZW50cm8=\n> Content-Type: text/xml; charset=utf-8\n> User-Agent: Jakarta Commons-HttpClient/2.0final\n> Host: localhost:8080\n> Content-Length: 207\n> Depth: 0\n> \n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\n> <D:propfind xmlns:D=\"DAV:\">\n> \t<D:prop>\n> \t\t<D:displayname/>\n> \t\t<D:getcontentlength/>\n> \t\t<D:getcontenttype/>\n> \t\t<D:resourcetype/>\n> \t\t<D:getlastmodified/>\n> \t\t<D:lockdiscovery/>\n> \t</D:prop>\n> </D:propfind>\n> \n> FIRST RESPONSE\n> =================\n> \n> HTTP/1.1 207 Multi-Estado\n> Content-Type: text/xml;charset=UTF-8\n> Content-Length: 436\n> Date: Thu, 30 Dec 2004 09:51:45 GMT\n> Server: Apache-Coyote/1.1\n> \n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\n> <multistatus xmlns=\"DAV:\">\n> \t<response>\n> \t\t<href>/webdav/parent/</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[parent]]></displayname>\n> \t\t\t\t<resourcetype>\n> \t\t\t\t\t<collection/>\n> \t\t\t\t</resourcetype>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<getcontentlength/>\n> \t\t\t\t<getcontenttype/>\n> \t\t\t\t<getlastmodified/>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> </multistatus>\n> \n> SECOND REQUEST\n> ================\n> \n> PROPFIND /webdav/parent HTTP/1.1\n> Authorization: Basic anVncmVnbzE6cGFkZW50cm8=\n> Content-Type: text/xml; charset=utf-8\n> User-Agent: Jakarta Commons-HttpClient/2.0final\n> Host: localhost:8080\n> Content-Length: 207\n> Depth: 1\n> \n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\n> <D:propfind xmlns:D=\"DAV:\">\n> \t<D:prop>\n> \t\t<D:displayname/>\n> \t\t<D:getcontentlength/>\n> \t\t<D:getcontenttype/>\n> \t\t<D:resourcetype/>\n> \t\t<D:getlastmodified/>\n> \t\t<D:lockdiscovery/>\n> \t</D:prop>\n> </D:propfind>\n> \n> SECOND RESPONSE\n> =================\n> \n> HTTP/1.1 207 Multi-Estado\n> Content-Type: text/xml;charset=UTF-8\n> Content-Length: 2028\n> Date: Thu, 30 Dec 2004 09:51:45 GMT\n> Server: Apache-Coyote/1.1\n> \n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\n> <multistatus xmlns=\"DAV:\">\n> \t<response>\n> \t\t<href>/webdav/parent/</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[parent]]></displayname>\n> \t\t\t\t<resourcetype>\n> \t\t\t\t\t<collection/>\n> \t\t\t\t</resourcetype>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<getcontentlength/>\n> \t\t\t\t<getcontenttype/>\n> \t\t\t\t<getlastmodified/>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> \t<response>\n> \t\t<href>/webdav/parent/file2.txt</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[file2.txt]]></displayname>\n> \t\t\t\t<getcontentlength>10</getcontentlength>\n> \t\t\t\t<getcontenttype>text/plain</getcontenttype>\n> \t\t\t\t<resourcetype/>\n> \t\t\t\t<getlastmodified>Mon, 27 Sep 2004 11:13:07 GMT</getlastmodified>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> \t<response>\n> \t\t<href>/webdav/parent/file1.txt</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[file1.txt]]></displayname>\n> \t\t\t\t<getcontentlength>10</getcontentlength>\n> \t\t\t\t<getcontenttype>text/plain</getcontenttype>\n> \t\t\t\t<resourcetype/>\n> \t\t\t\t<getlastmodified>Mon, 27 Sep 2004 11:13:07 GMT</getlastmodified>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> \t<response>\n> \t\t<href>/webdav/parent/child2/</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[child2]]></displayname>\n> \t\t\t\t<resourcetype>\n> \t\t\t\t\t<collection/>\n> \t\t\t\t</resourcetype>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<getcontentlength/>\n> \t\t\t\t<getcontenttype/>\n> \t\t\t\t<getlastmodified/>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> \t<response>\n> \t\t<href>/webdav/parent/child1/</href>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<displayname><![CDATA[child1]]></displayname>\n> \t\t\t\t<resourcetype>\n> \t\t\t\t\t<collection/>\n> \t\t\t\t</resourcetype>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 200 OK</status>\n> \t\t</propstat>\n> \t\t<propstat>\n> \t\t\t<prop>\n> \t\t\t\t<getcontentlength/>\n> \t\t\t\t<getcontenttype/>\n> \t\t\t\t<getlastmodified/>\n> \t\t\t\t<lockdiscovery/>\n> \t\t\t</prop>\n> \t\t\t<status>HTTP/1.1 404 Not Found</status>\n> \t\t</propstat>\n> \t</response>\n> </multistatus>\n> \n> As you can see from the second response, all the resources are returned\n> correctly from the server.\n\n(In reply to comment #16)\n> (In reply to comment #14)\n> > I bumped into the problem as well. 2.1 didn't work for me.\n> > A solution was to change a part of WebdavResource.setWebdavProperties after\n> > \n> > if (!itself) {\n> > String myURI = httpURL.getEscapedURI();\n> > \n> > ...\n> > \n> > to\n> > \n> > if (!itself) {\n> >                 String myURI = httpURL.getEscapedURI();\n> >                 final String adjustedHref = href.endsWith(\"/\") ?\n> > href.substring(0, href.length() - 1) : href;\n> >                 final String name = URIUtil.getName(adjustedHref);\n> >                 char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n> >                                    + name).toCharArray();\n> > \n> > the problem is that children's hrefs can end with '/' and in this case\n> > URIUtil.getName returns empty string. Because of that childURI is the same as\n> > myURI (bug!!!)\n> \n> \n> Thanks Igor!  Everything works fine now.  Also thanks to Robert and Philip.  For\n> those who want a fast cut-and-paste solution, simply replace the entire\n> \n>     protected void setWebdavProperties(Enumeration responses)\n> \n> method in org.apache.webdav.lib.WebdavResource with the following code:\n> \n> // START: FIX /////////////////////////////////////////////////////\n>     /**\n>      * Set WebDAV properties following to the given http URL.\n>      * This method is fundamental for getting information of a collection.\n>      *\n>      * @param responses An enumeration over {@link ResponseEntity} items, one\n>      * for each resource for which information was returned via PROPFIND.\n>      *\n>      * @exception HttpException\n>      * @exception IOException The socket error with a server.\n>      */\n>     protected void setWebdavProperties(Enumeration responses)\n>         throws HttpException, IOException {\n>     \n>         // Make the resources in the collection empty.\n>         childResources.removeAll();\n>         while (responses.hasMoreElements()) {\n>     \n>             ResponseEntity response =\n>                 (ResponseEntity) responses.nextElement();\n>     \n>             boolean itself = false;\n>             String href = response.getHref();\n>             if (!href.startsWith(\"/\"))\n>                 href = URIUtil.getPath(href);\n>             href = decodeMarks(href);\n> \n>             /*\n>              * Decode URIs to common (unescaped) format for comparison \n>              * as HttpClient.URI.setPath() doesn't escape $ and : chars.\n>              */\n>             String httpURLPath = httpURL.getPath();\n>             String escapedHref = URIUtil.decode(href);\n>             \n>             // Normalize them to both have trailing slashes if they differ by\n> one in length.\n>             int lenDiff = escapedHref.length() - httpURLPath.length();\n>             int compareLen = 0;\n>             \n>             if ( lenDiff == -1 && !escapedHref.endsWith(\"/\")) {\n>                 compareLen = escapedHref.length();\n>                 lenDiff = 0;\n>             }\n>             else\n>             if ( lenDiff == 1 && !httpURLPath.endsWith(\"/\")) {\n>                 compareLen = httpURLPath.length();\n>                 lenDiff = 0;\n>             }\n> \n>             // if they are the same length then compare them.\n>             if (lenDiff == 0) {\n>                 if ((compareLen == 0 && httpURLPath.equals(escapedHref))\n>                     || httpURLPath.regionMatches(0, escapedHref, 0, compareLen))\n>                 {\n>                     // escaped href and http path are the same\n>                     // Set the status code for this resource.\n>                     if (response.getStatusCode() > 0)\n>                         setStatusCode(response.getStatusCode());\n>                     setExistence(true);\n>                     itself = true;\n>                 }\n>             }\n>     \n>             // Get to know each resource.\n>             WebdavResource workingResource = null;\n>             if (itself) {\n>                 workingResource = this;\n>             }\n>             else {\n>                 workingResource = createWebdavResource(client);\n>                 workingResource.setDebug(debug);\n>             }\n>     \n>             // clear the current lock set\n>             workingResource.setLockDiscovery(null);\n>     \n>             // Process the resource's properties\n>             Enumeration properties = response.getProperties();\n>             while (properties.hasMoreElements()) {\n>     \n>                 Property property = (Property) properties.nextElement();\n>     \n>                 // ------------------------------  Checking WebDAV properties\n>                 workingResource.processProperty(property);\n>             }\n>     \n>             String displayName = workingResource.getDisplayName();\n>     \n>             if (displayName == null || displayName.trim().equals(\"\")) {\n>                 displayName = getName(href);\n>             }\n> \n>             /** BUGGY CODE\n>             if (!itself) {\n>                 String myURI = httpURL.getEscapedURI();\n>                 char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n>                                    + URIUtil.getName(href)).toCharArray();\n>                 HttpURL childURL = httpURL instanceof HttpsURL\n>                                    ? new HttpsURL(childURI)\n>                                    : new HttpURL(childURI);\n>                 childURL.setRawAuthority(httpURL.getRawAuthority());\n>                 workingResource.setHttpURL(childURL, NOACTION, defaultDepth);\n>                 workingResource.setExistence(true);\n>                 workingResource.setOverwrite(getOverwrite());\n>             }\n>             */\n>             \n>             /** FIX ********/\n>             if (!itself) {                \n>                 String myURI = httpURL.getEscapedURI();\n>                 \n>                 /**\n>                 \tChecks if href contains trailing '/', and if so removes it.\n>                 \tThis ensures URIUtil.getName does not return an empty\n>                 \tString when we don't want it to.\n>                 \t\n>                 \tSee http://issues.apache.org/bugzilla/show_bug.cgi?id=32886\n>                 \tfor more information.\n>                 */\n>                 String fixedHref = href.endsWith(\"/\") ?\n>                     href.substring(0, href.length() - 1) : href;\n>                 \n>                 char[] childURI = (myURI + (myURI.endsWith(\"/\") ? \"\" : \"/\")\n>                                    + URIUtil.getName(fixedHref)).toCharArray();\n>                 \n>                 HttpURL childURL = httpURL instanceof HttpsURL\n>                                    ? new HttpsURL(childURI)\n>                                    : new HttpURL(childURI);\n>                 childURL.setRawAuthority(httpURL.getRawAuthority());\n>                 workingResource.setHttpURL(childURL, NOACTION, defaultDepth);\n>                 workingResource.setExistence(true);\n>                 workingResource.setOverwrite(getOverwrite());\n>             }            \n>             /**************/\n>             \n>             \n>             workingResource.setDisplayName(displayName);\n>     \n>             if (!itself)\n>                 childResources.addResource(workingResource);\n>         }\n>     }\n> // END: FIX /////////////////////////////////////////////////////\n> \n> The code is based on Igor's solution and should work fine.  Please post here if\n> you stumble upon any issues the fix causes.  In the meantime however, its\n> working perfectly for me.\n> \n> Cheers!\n> \n> Mike N. Christoff\n\n", "id": 94578, "time": "2006-10-06T05:26:49Z", "bug_id": 32886, "creation_time": "2006-10-06T05:26:49Z", "is_private": false, "attachment_id": null}]
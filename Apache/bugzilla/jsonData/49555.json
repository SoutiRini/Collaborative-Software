[{"count": 0, "text": "I added two method <function>s with the same name but with an addition parameters.  I get this error:\n\norg.apache.jasper.JasperException: Duplicate function name list in tag library /WEB-INF/dataStore.tld\n\nCrap!  It is not even looking at the parameters.  Ok, Java matches on method names and method parameters.  It is commonly called a method signature. \n\nWell, Jasper is in the Google SDK, so it could perhaps be smarter than I am -- so maybe I overlooked something.  Is that the case?\n\nWhy can't the Jasper compiler match on parameters like Java?  This is after all Java.  I'm only using TLDs because they are cleaner then escaping Java code in JSP.  I have already wrote a considerable amount of TLD code and it does not easily mix with the expression language.  This is the reason why it is so important to have this implementation work as expected.\n\nPlease let me know how I can help.  Lets get this fixed.\n\n-Jimmy\n\nAppEngine SDK 1.3.2 (sorry, I don't know the embedded Jasper version)", "creator": "james_calfee@yahoo.com", "attachment_id": null, "id": 138193, "time": "2010-07-05T18:13:53Z", "bug_id": 49555, "creation_time": "2010-07-05T18:13:53Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I have an architecture that uses static inner classes.  After about an hour of trial and error and internet searches, I discovered that I can not use a Static inner class as a method parameters in my TDL file.  This is the error:\n\norg.apache.jasper.JasperException: /WEB-INF/jsp/page.jsp(19,2) The function listElement cannot be located with the specified prefix\n\nNo, it is there.  It can't find the parameter: \n  com.example.MyClass.MyInnerStaticClass\n\nIt simply can not find my method.  I know I have it correct because I can replace the static inner class parameter with a top-level class (MyClass).  I can then call my static function.\n\nThe more important part of my program relies on static inner classes.  There are a number of them.  I did this by design to represent a simple structure that is best coded in a single file.  I'm not changing this part of the program.  Unfortunately, escaping Java code in JSP pages does not mix well with JSP expression language.  Also, I have a decent amount of expression language code.  So, I really need the jasper compiler have basic support for Java constructs.  Can you help please?\n\nI'm using the Google AppEngine SDK 1.3.2.  I'm sorry, I do not see the Jasper version.  I only see the apache jasper package name in my exception.\n\nPlease let me know if I can help. \n\nThank,\nJimmy", "is_private": false, "bug_id": 49555, "id": 138194, "time": "2010-07-05T18:30:00Z", "creator": "james_calfee@yahoo.com", "creation_time": "2010-07-05T18:30:00Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "It is likely to be Tomcat 6 that is being used rather than Tomcat 7 but any fix in Tomcat 7 will get back-ported to Tomcat 6 so lets not worry too much about that.\n\nI think I understand the problem you are seeing but it would help if you could attach the source for the simplest possible test case that demonstrates the issue (I'd expect 1*JSP, 1*TLD, 1*Java class & 1* web.xml)\n\nI do wonder if this is an issue between com.example.MyClass.MyInnerStaticClass\n and com.example.MyClass$MyInnerStaticClass? There was a similar issue (bug 35351) some time ago.", "is_private": false, "id": 138199, "creator": "markt@apache.org", "time": "2010-07-06T01:28:32Z", "bug_id": 49555, "creation_time": "2010-07-06T01:28:32Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 49555, "attachment_id": null, "id": 138279, "time": "2010-07-08T11:52:09Z", "creator": "markt@apache.org", "creation_time": "2010-07-08T11:52:09Z", "is_private": false, "text": "No response in 2 days. Can't be that critical. Reduce severity to normal.\n\nSince the OP hasn't provided a test case, I'll see about creating one based on what I think the issue is."}, {"count": 4, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Confirmed.\n\nFixed in 7.0.x and will be in 7.0.1 onwards.\n\nProposed for 6.0.x", "id": 138284, "time": "2010-07-08T17:31:41Z", "bug_id": 49555, "creation_time": "2010-07-08T17:31:41Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "This has been fixed in 6.0.x and will be included in 6.0.30 onwards.", "is_private": false, "id": 143179, "creator": "markt@apache.org", "time": "2011-01-07T12:46:40Z", "bug_id": 49555, "creation_time": "2011-01-07T12:46:40Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 49555, "is_private": false, "id": 145805, "time": "2011-04-15T06:21:00Z", "creator": "rowanseymour@gmail.com", "creation_time": "2011-04-15T06:21:00Z", "tags": [], "text": "(In reply to comment #5)\n> This has been fixed in 6.0.x and will be included in 6.0.30 onwards.\n\nFix for this bug seems to have removed the ability to use EL functions in classes which are not accessible to Catalina's class loader, i.e. ELFunctionMapper now calls something like...\n\ntccl = Thread.currentThread().getContextClassLoader();\nclazz = Class.forName(className, true, tccl);\n\nIn our app we have custom loader that provides classes from plugins for the application. Previously these plugins were able to provide their own EL functions but that broke in 6.0.30"}, {"count": 7, "tags": [], "text": "The EL implementation assumes that the tccl will be the web application class loader and that all classes used by the web applciation will be visible to that class loader. Depending on why you need a custom class loader then there are a couple of options available including a custom loader and the VirtualWebappLoader. The users list is the place to get help on which is best for your use case.", "is_private": false, "id": 145807, "creation_time": "2011-04-15T07:39:50Z", "time": "2011-04-15T07:39:50Z", "creator": "markt@apache.org", "bug_id": 49555, "attachment_id": null}]
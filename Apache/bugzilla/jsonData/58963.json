[{"count": 0, "tags": [], "creator": "zmircmircea@gmail.com", "attachment_id": 33518, "id": 188174, "time": "2016-02-03T09:35:47Z", "bug_id": 58963, "creation_time": "2016-02-03T09:35:47Z", "is_private": false, "text": "Created attachment 33518\nsample project + file to reproduce the error\n\nHi!\n\nToday we received an Excel file which can't be added into the system, because POI triggers OOM while trying to open it.\nThe xlsx file has ~300KB and the application -Xmx750m. It does the same with -Xmx2750m so it's definitely not this.\n\nThis OOM happens with both 3.13 and 3.14-beta1.\n\nI will attach a sample maven project + the problematic file called \"eu-triggers-oom.xlsx\" available in /src/test/resources\n\nTo replicate the issue, just execute the test from class POIExcelOOMNGTest.\nI will also a VisualVM memory usage screenshot while running the test.\n\nHere is the stacktrace of the test project:\nshouldNotThrowOOMWhileReadingExcel(poi.excel.oom.POIExcelOOMNGTest)  Time elapsed: 136.287 sec  <<< FAILURE!\norg.apache.poi.POIXMLException: java.lang.reflect.InvocationTargetException\n\tat org.apache.poi.xssf.usermodel.XSSFFactory.createDocumentPart(XSSFFactory.java:62)\n\tat org.apache.poi.POIXMLDocumentPart.read(POIXMLDocumentPart.java:465)\n\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:173)\n\tat org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:278)\n\tat poi.excel.oom.POIExcelOOMNGTest.shouldNotThrowOOMWhileReadingExcel(POIExcelOOMNGTest.java:12)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.poi.xssf.usermodel.XSSFFactory.createDocumentPart(XSSFFactory.java:60)\n\t... 37 more\nCaused by: java.lang.OutOfMemoryError: Java heap space\n\tat org.apache.xmlbeans.impl.store.CharUtil.allocate(CharUtil.java:397)\n\tat org.apache.xmlbeans.impl.store.CharUtil.saveChars(CharUtil.java:506)\n\tat org.apache.xmlbeans.impl.store.CharUtil.saveChars(CharUtil.java:419)\n\tat org.apache.xmlbeans.impl.store.CharUtil.saveChars(CharUtil.java:489)\n\tat org.apache.xmlbeans.impl.store.Cur$CurLoadContext.text(Cur.java:2927)\n\tat org.apache.xmlbeans.impl.store.Cur$CurLoadContext.stripText(Cur.java:3130)\n\tat org.apache.xmlbeans.impl.store.Cur$CurLoadContext.text(Cur.java:3143)\n\tat org.apache.xmlbeans.impl.store.Locale$SaxHandler.characters(Locale.java:3291)\n\tat org.apache.xmlbeans.impl.piccolo.xml.Piccolo.reportCdata(Piccolo.java:992)\n\tat org.apache.xmlbeans.impl.piccolo.xml.PiccoloLexer.parseXMLNS(PiccoloLexer.java:1290)\n\tat org.apache.xmlbeans.impl.piccolo.xml.PiccoloLexer.parseXML(PiccoloLexer.java:1261)\n\tat org.apache.xmlbeans.impl.piccolo.xml.PiccoloLexer.yylex(PiccoloLexer.java:4812)\n\tat org.apache.xmlbeans.impl.piccolo.xml.Piccolo.yylex(Piccolo.java:1290)\n\tat org.apache.xmlbeans.impl.piccolo.xml.Piccolo.yyparse(Piccolo.java:1400)\n\tat org.apache.xmlbeans.impl.piccolo.xml.Piccolo.parse(Piccolo.java:714)\n\tat org.apache.xmlbeans.impl.store.Locale$SaxLoader.load(Locale.java:3479)\n\tat org.apache.xmlbeans.impl.store.Locale.parseToXmlObject(Locale.java:1277)\n\tat org.apache.xmlbeans.impl.store.Locale.parseToXmlObject(Locale.java:1264)\n\tat org.apache.xmlbeans.impl.schema.SchemaTypeLoaderBase.parse(SchemaTypeLoaderBase.java:345)\n\tat org.openxmlformats.schemas.spreadsheetml.x2006.main.SstDocument$Factory.parse(Unknown Source)\n\tat org.apache.poi.xssf.model.SharedStringsTable.readFrom(SharedStringsTable.java:119)\n\tat org.apache.poi.xssf.model.SharedStringsTable.<init>(SharedStringsTable.java:106)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.poi.xssf.usermodel.XSSFFactory.createDocumentPart(XSSFFactory.java:60)\n\tat org.apache.poi.POIXMLDocumentPart.read(POIXMLDocumentPart.java:465)\n\tat org.apache.poi.POIXMLDocument.load(POIXMLDocument.java:173)\n\tat org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:278)\n\tat poi.excel.oom.POIExcelOOMNGTest.shouldNotThrowOOMWhileReadingExcel(POIExcelOOMNGTest.java:12)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)"}, {"count": 1, "attachment_id": 33519, "bug_id": 58963, "is_private": false, "id": 188175, "time": "2016-02-03T09:36:55Z", "creator": "zmircmircea@gmail.com", "creation_time": "2016-02-03T09:36:55Z", "tags": [], "text": "Created attachment 33519\nVisualVM screenshot after the test failed - OOM"}, {"count": 2, "attachment_id": null, "creator": "onealj@apache.org", "is_private": false, "id": 188197, "time": "2016-02-03T19:10:29Z", "bug_id": 58963, "creation_time": "2016-02-03T19:10:29Z", "tags": [], "text": "By any chance have you used the same file on an older version of POI without getting an OOM?"}, {"count": 3, "tags": [], "creator": "zmircmircea@gmail.com", "is_private": false, "id": 188198, "creation_time": "2016-02-03T19:12:06Z", "time": "2016-02-03T19:12:06Z", "bug_id": 58963, "text": "We received the file just today from a complaining user, then we tested it ourselves with 3.13 and 3.14-beta1, but nothing else.\nI am sorry.", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 58963, "attachment_id": null, "id": 189627, "time": "2016-03-22T06:37:34Z", "creator": "onealj@apache.org", "creation_time": "2016-03-22T06:37:34Z", "is_private": false, "text": "Looking through eu-triggers-oom.xlsx, I didn't see any XML bombs likely to bloat memory. The main memory consumer here is shared strings table containing 5700 unique values. The rest of the XML files are mostly empty.\n\nTo build up a test case to make sure there isn't anything else in the Excel file, a unit test could be: read in a dictionary of random Norwegian words (including \u00e6, \u00f8, \u00e5--if that matters), generate 5700 \"sentences\" composed of 10 random words each, and look at memory consumption.\n\nThe SharedStringsTable [1] uses an Array<CTRst> and a Map<String, Int> to store the strings. The Map makes string lookup faster at the cost of increasing the memory requirements, but both structures should be able to handle 6700 entries without OOM'ing.\n\nWhat kinds of objects did VisualVM indicate were consuming the largest amount of memory?\n\n[1] https://svn.apache.org/viewvc/poi/trunk/src/ooxml/java/org/apache/poi/xssf/model/SharedStringsTable.java?view=markup"}, {"count": 5, "tags": [], "creator": "zmircmircea@gmail.com", "attachment_id": 33690, "id": 189631, "time": "2016-03-22T06:58:59Z", "bug_id": 58963, "creation_time": "2016-03-22T06:58:59Z", "is_private": false, "text": "Created attachment 33690\nVisualVM memory sampler screenshot\n\nI have just reproduced the error and took a screenshot from VisualVM's memory sampler.\nIt seems that char[] is taking most of the memory."}, {"count": 6, "tags": [], "bug_id": 58963, "is_private": false, "id": 189634, "creation_time": "2016-03-22T07:25:49Z", "time": "2016-03-22T07:25:49Z", "creator": "onealj@apache.org", "text": "> It seems that char[] is taking most of the memory.\nWhich would make sense because the shared strings table is disproportionately large, and rest of the xml nodes are just arrays/pointers+strings.\n\nAndi fixed some OOM's in the current trunk build on bug 57031. Read through that bug to see if it's relevant to you, and if so see if you still get OOM's on a 3.15 beta 1 nightly [1]\n\n[1] https://builds.apache.org/job/POI/lastSuccessfulBuild/artifact/", "attachment_id": null}, {"count": 7, "tags": [], "creator": "zmircmircea@gmail.com", "is_private": false, "id": 189640, "creation_time": "2016-03-22T09:06:25Z", "time": "2016-03-22T09:06:25Z", "bug_id": 58963, "text": "I'll give it a try.\nWhat should I write in my Maven pom.xml file in order to get the nightly build instead of 3.13?\nI didn't find the nightly builds Maven repository.", "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 58963, "is_private": false, "id": 189787, "time": "2016-03-29T15:35:43Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-03-29T15:35:43Z", "tags": [], "text": "Nightly builds are not available via Maven but only as manual download via https://builds.apache.org/view/POI/job/POI/lastSuccessfulBuild/artifact/build/dist"}, {"count": 9, "tags": [], "creator": "zmircmircea@gmail.com", "attachment_id": null, "id": 189900, "time": "2016-04-01T19:41:58Z", "bug_id": 58963, "creation_time": "2016-04-01T19:41:58Z", "is_private": false, "text": "I looked into that link but I couldn't find the working dist version.\nI tried what's in build/dist, but no success. Apache POI classes were missing.\n\nAs you probably already have POI setup in your IDE, can you please send me (via Dropbox, OneDrive etc) the working dist version?\n\nOtherwise, what should I do to get it working?\nI spent quite a lot of time taking the src zip and trying to fix all the missing dependencies, but there are many which aren't there.\n\nOn the other side, I provided the test case XML and Java code (3 lines).\nIt's 1000x easier for one of POI developers to copy those 3 lines + the file in a project compiled against the latest version of POI.\nThen I wouldn't have to spend a lot of time trying to build POI myself.\n\nThanks a lot. :)"}, {"count": 10, "tags": [], "bug_id": 58963, "attachment_id": null, "is_private": false, "id": 189901, "time": "2016-04-01T19:59:25Z", "creator": "apache@gagravarr.org", "creation_time": "2016-04-01T19:59:25Z", "text": "(In reply to Mircea from comment #9)\n> Otherwise, what should I do to get it working?\n> I spent quite a lot of time taking the src zip and trying to fix all the\n> missing dependencies, but there are many which aren't there.\n\nJust run \"ant jar\" from a svn checkout / git checkout / source download, and all the dependencies you need will be fetched for you on demand\n\nOtherwise, the nightly builds are available from Jenkins at https://builds.apache.org/job/POI/lastSuccessfulBuild/artifact/build/dist/ - grab the POI jars from the bin, and add in any dependencies from the previous full POI release's bin package"}, {"count": 11, "tags": [], "bug_id": 58963, "attachment_id": null, "id": 189902, "time": "2016-04-01T21:19:03Z", "creator": "zmircmircea@gmail.com", "creation_time": "2016-04-01T21:19:03Z", "is_private": false, "text": "Great! Thanks for the clarification.\nI built it with ant, then added the remaining jars.\n\nIt seems to work properly now. No more memory issue.\nMost probably bug 57031 has taken care of it.\n\nThanks, Apache POI!\n\n*** This bug has been marked as a duplicate of bug 57031 ***"}]
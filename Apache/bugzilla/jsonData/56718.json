[{"count": 0, "tags": [], "creator": "regis.leroy@makina-corpus.com", "text": "Created attachment 31812\npatch for server/protocol.c\n\nSome programs rely on the HTTP request HOST header to guess the right absolute uri hostname they should use in an application. This is sometimes a fallback, sometimes the default behavior. We all know this is an insecure thing but this is used in real life application (big python or PHP CMS for example).\n\nUsually people believe that using a default catch-all-bad-names Virtualhost would prevent bad Host headers to reach the application, but this is not true, especially because of the absolute-URI managment in Apache.\n\nThis as been described publicly in this document:\n * [Practical HTTP Host header attacks] http://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html\n\nSo, the problem is that Apache respect this RFC2616 rule:\n\n> 1. If Request-URI is an absoluteURI, the host is part of the\n>      Request-URI. Any Host header field value in the request MUST be\n>      ignored.\n\nAnd by the way with an HTTP/1.1 request containing both \"Host\" headers and a hostname in the request URI, the hostname from the URI is used to choose the right named-based VirtualHost and not the Host header hostname.\n\nBut the Host headers are kept untouched, and forwarded to any program running after Apache httpd. Any naive python or PHP program may assume that the Host header of the request was used to reach the application, when it was not.\n\nI think this rfc instruction \"MUST be ignored\" means that the http server should make anything -- even external programs -- unaware of theses headers.\n\nSo I think the Host header should be reset to the hostname value extracted from the URI if any Host header is present.\nThat's a nicer way to ignore theses headers.\n\nAFAIK, There is no legitimate usage of Host headers when using an absolute URI. But this allows for a lot of nasty usages (I could give examples but that's maybe not the right place).\nSome Hostname checks are not performed against theses untouched Host headers.\n\nWhat I'd like is that the general security policy rule which state \"use a catch-all default Virtualhost\" should always work, even with absolute-URI usage.\n\nHow to test:\n==========\nAdd a dummy-host2.example.com non-default Virtualhost with \"ServerNamedummy-host2.example.com\".\n\nIf you want to test received HTTP Headers you can add theses mod_rewrite rules:\n<pre>\n<VirtualHost *:80>\n    ServerAdmin webmaster@dummy-host2.example.com\n    DocumentRoot \"/opt/apache2/docs/dummy-host2.example.com\"\n    ServerName dummy-host2.example.com\n\n    <Directory /opt/apache2/docs/dummy-host2.example.com>\n        Require all granted\n        RewriteEngine On\n        RewriteBase /\n        RewriteRule .* - [E=INFO_HTTP_HOST:%{HTTP_HOST},NE]\n        RewriteRule .* - [E=INFO_SERVER_NAME:%{SERVER_NAME},NE]\n        RewriteRule .* - [E=INFO_THE_REQUEST:%{THE_REQUEST},NE]\n\n        Header set INFO_HTTP_HOST \"%{INFO_HTTP_HOST}e\"\n        Header set INFO_SERVER_NAME \"%{INFO_SERVER_NAME}e\"\n        Header set INFO_THE_REQUEST \"%{INFO_THE_REQUEST}e\"\n    </Directory>\n</VirtualHost>\n</pre>\nI then made a very simple /opt/apache2/docs/dummy-host2.example.com/index.html:\n<pre>\n    <h1>Dummy Host 2</h1>\n</pre>\n\nI can test this host and reach it with\n<pre>\n    printf 'GET http://dummy-host2.example.com/ HTTP/1.1\\nHost: ../../../etc/passwd%%0awww.fooobar.!ple.com\\n\\n' | nc -w 10 -q 10 127.0.0.1 80\n</pre>\n\nBefore the patch the answer is:\n================================\n<pre>\nHTTP/1.1 200 OK\nDate: Mon, 14 Jul 2014 12:37:55 GMT\nServer: Apache/2.4.9 (Unix)\nLast-Modified: Thu, 05 Jun 2014 17:06:11 GMT\nETag: \"16-4fb19c2fed43d\"\nAccept-Ranges: bytes\nContent-Length: 22\nINFO_HTTP_HOST: ../../../etc/passwd%0awww.fooobar.!ple.com\nINFO_SERVER_NAME: dummy-host2.example.com\nINFO_THE_REQUEST: GET http://dummy-host2.example.com/ HTTP/1.1\nContent-Type: text/html\n\n<h1>Dummy Host 2</h1>\n</pre>\n\nWithout the absolute URI I get no response from Apache (expected).\n\nAfter the patch the answer is:\n==============================\n<pre>\nHTTP/1.1 200 OK\nDate: Mon, 14 Jul 2014 12:47:30 GMT\nServer: Apache/2.4.9 (Unix)\nLast-Modified: Thu, 05 Jun 2014 17:06:11 GMT\nETag: \"16-4fb19c2fed43d\"\nAccept-Ranges: bytes\nContent-Length: 22\nINFO_HTTP_HOST: dummy-host2.example.com\nINFO_SERVER_NAME: dummy-host2.example.com\nINFO_THE_REQUEST: GET http://dummy-host2.example.com/ HTTP/1.1\nContent-Type: text/html\n\n<h1>Dummy Host 2</h1>\n</pre>\n\nAbout the patch\n===============\nI made a patch (attached) for Apache 2.4.9 . The fix is done in ap_read_request after the first hostname extraction from absolute URI or CONNECT requests.\nAnd it's done before ap_update_vhost_from_headers which may read hostname from headers if no hostname is available yet, and which also apply some cleanup on the hostname.\n\nOf course I'm not sure that nothing could break with this patch, I do not have a deep knowledge of Apache httpd internals.\n* for empty Hosts with absolute URI it seems OK,\n* for Hosts headers with absolute URI they're replaced by the unfiltered hostname from the URI\n* for CONNECT I do not know this proxy protocol enough to ensure everything is ok, but I think the host Header MUST match the one used in the absolute URI to have a valid CONNECT, so for CONNECT an invalid response is maybe already sent somewhere if it does not match\n* I do not think this could be used for cache poisonning. A Reverse proxy cache using the first host Header and not the one extracted from the URI would be a problem, but this would be against the rfc 2616, so this would be an issue for the reverse proxy cache and not for Apache.\n* I did not check if Apache used as a reverse proxy would use theses Host headers in the cache key, if so it's wrong, so I'm pretty sure that's not the case.", "id": 176386, "time": "2014-07-14T12:49:24Z", "bug_id": 56718, "creation_time": "2014-07-14T12:49:24Z", "is_private": false, "attachment_id": 31812}, {"count": 1, "tags": [], "bug_id": 56718, "is_private": false, "text": "Hi,\n\nI discovered this bug myself recently, although my discovery of it was within the wording of the newer RFC7230, Section 5.4 and related to mod_proxy - see https://issues.apache.org/bugzilla/show_bug.cgi?id=57563\n\nHowever I think that fixing this in core would be preferable as it fixes the problem for more scenarios. In a way, you can consider the PHP or other scripting back-end to be the 'true' origin server and that httpd passing requests to PHP is acting as a proxy. If this viewpoint is taken, then httpd MUST rewrite the Host: header to match the authority info of any request-target that is in the absolute-form.\n\nAs well as trying to fix this in mod_proxy (See the patch in my linked bug report), I also patched it in vhost.c, although I came up with a different implementation to the original poster of this bug. My version, directly assigns the authority component of a request-target that has the absolute-form, using the parsed_uri struct that belongs to the request. I tasked myself to learn gdb and step through the code to debug the behaviour (was fun!) and it seems to work in all cases, including appending the port to the Host: header if it was a part of the request-target.\n\nThanks,\n\nTom...", "id": 180938, "time": "2015-02-11T03:12:30Z", "creator": "tfrancis@gmail.com", "creation_time": "2015-02-11T03:12:30Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 56718, "is_private": false, "text": "Created attachment 32450\nAlternative fix for protocol.c, includes port number etc\n\nThis patch updates the Host: header, only if request-target is in absolute-form and if Host: header has already been set.", "id": 180939, "time": "2015-02-11T03:15:59Z", "creator": "tfrancis@gmail.com", "creation_time": "2015-02-11T03:15:59Z", "attachment_id": 32450}, {"count": 3, "tags": [], "bug_id": 56718, "is_private": false, "text": "Created attachment 32455\nFix on protocol.c and vhost.c\n\nThanks Regis and Tom for the report and patches.\n\nThe case is already handled by ap_update_vhost_from_headers() when \"HttpProtocol strict\" is configured (though without the URI's :port being appended).\n\nIf we were to conform to the RFC by default, which I agree with but like to ear others about the possible compatibily caveats, I think the proposed patch are not complete.\n\nThis new (attached) patch avoids the double work in ap_read_request() and ap_update_vhost_from_headers(), and also takes care of IPv6-literal hostnames (which need to be surrounded by square brackets in the Host header).", "id": 180958, "time": "2015-02-11T15:13:45Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-11T15:13:45Z", "attachment_id": 32455}, {"count": 4, "attachment_id": null, "bug_id": 56718, "is_private": false, "id": 180963, "time": "2015-02-11T16:08:28Z", "creator": "ylavic.dev@gmail.com", "creation_time": "2015-02-11T16:08:28Z", "tags": [], "text": "*** Bug 57563 has been marked as a duplicate of this bug. ***"}, {"count": 5, "attachment_id": null, "bug_id": 56718, "is_private": false, "id": 183853, "time": "2015-07-02T15:35:28Z", "creator": "apache-bugzilla@michael-kaufmann.ch", "creation_time": "2015-07-02T15:35:28Z", "tags": [], "text": "I think that this is an important issue. The patch/bugfix will prevent many attacks.\n\nThe latest patch could be improved: If the request does not have a \"Host\" header (HTTP 1.0) and if an absolute URI is used, then a \"Host\" header should be added to the request."}, {"count": 6, "tags": [], "creator": "patryk.szalanski@contact-software.com", "text": "Are there any plans on integrating the patch in the near future? We would like to improve security of our WSGI applications, without the need to implement a middleware to handle the host header.", "id": 191328, "time": "2016-05-31T09:01:44Z", "bug_id": 56718, "creation_time": "2016-05-31T09:01:44Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 28505, "is_private": false, "text": "If you import a build script fragment via a path that at runtime follows a\nUnixish symlink, Ant will define ${ant.file.whatever} to be the canonicalized\n(physical) path, rather than the logical path.\n\nIf you were using this property to define other paths, as is common, then your\nset of path definitions can be \"poisoned\" by the physical path components. An\nexample of this problem can be found in the netbeans.org build system, which\nrecently began using <import> with Ant 1.6.0; this caused a regression whereby\nit was no longer possible to build the source tree in case some modules were\nstored in a symlink farm, because the imported script paths would refer to the\nphysical location and further computed paths might no longer be inside the\nsymlink farm area. A messy workaround for common cases was found; details:\n\nhttp://www.netbeans.org/issues/show_bug.cgi?id=40892\n\nGenerally using File.getCanonicalPath/File except at user request is a bad idea,\nas it can break build setups using symlinks. Historically, Ant 1.4 fixed this\nproblem, so the behavior in 1.6.0 is sort of a regression (only if you use\n<import> of course):\n\n---%<---\nDate: 2001/07/10 16:39:47\nAuthor: bodewig\nLog:\nStop using canonical paths.  This will change the behavior of Ant when\nsymbolic links are present (but in a way that is probably closer to\nwhat the user expects) and remove some problems on platforms that use\n\"uncommon\" native file names like OS/390 or VMS.\n\nSubmitted by:\tJesse Glick <Jesse.Glick@netbeans.com>\n\nWHATSNEW:1.121->1.122 \nsrc/main/org/apache/tools/ant/Project.java:1.62->1.63 \nsrc/main/org/apache/tools/ant/ProjectHelper.java:1.52->1.53 \n---%<---\n\nAlso cf.\n\nhttp://marc.theaimsgroup.com/?l=ant-dev&m=99358037323340&w=2\n\nThe attached patch corrects the problem for <import>. It seems <subant> still\nuses File.getCanonical*, probably incorrectly; I have no patch for that yet.\n\nIncludes an additional unit test which (if run on Unix) confirms that the\nimported file path is the logical, not physical, path.\n\nIf there was some purpose to canonicalizing the file path in ImportTask.java, I\nam not aware of it (no apparent comments or unit tests explaining it).", "id": 56134, "time": "2004-04-20T20:58:09Z", "creator": "jglick@apache.org", "creation_time": "2004-04-20T20:58:09Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 28505, "is_private": false, "text": "Created attachment 11294\nSuggested patch (modified files)", "id": 56135, "time": "2004-04-20T20:58:56Z", "creator": "jglick@apache.org", "creation_time": "2004-04-20T20:58:56Z", "attachment_id": 11294}, {"count": 2, "tags": [], "bug_id": 28505, "text": "Created attachment 11295\nZIP of added files for the test case", "id": 56136, "time": "2004-04-20T20:59:55Z", "creator": "jglick@apache.org", "creation_time": "2004-04-20T20:59:55Z", "is_private": false, "attachment_id": 11295}, {"count": 3, "tags": [], "bug_id": 28505, "text": "Hi Jesse,\nThe reason I used canonicalpath here was because the imported file\nmay import other files. One could set up something like this.\n\n   /a/scripts/overall.xml\n   /a/scripts/b/import.xml\n       containing <import file=\"../overall.xml\"/>\n   \nand one could set a symbolic link to /a/scripts/b, say /usr/home/peter/b_scripts\na build-file could then contain:\n  <import file=\"/usr/home/peter/b_scripts/import.xml\"/>\nwhich would work with the canonical path, but not with the AbsolutePath\n", "id": 56401, "time": "2004-04-26T10:21:23Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-04-26T10:21:23Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "jglick@apache.org", "text": "In such a case you could make the symlink to /a/scripts, not /a/scripts/b, and\n\n  <import file=\"/usr/home/peter/a_scripts/b/import.xml\"/>\n\nClearly in this case /a/scripts is intended to be a whole (you cannot use the b\nsubdir on its own), so linking to just a part of it sounds dubious to me.\n\nI realize that there are cases where having the canonical path would be handy,\nbut is it worth the (possibly unsolvable) problems for those people who *don't*\nwant the canonical path? Other Ant tasks (in particular, <property>) don't\nmagically traverse symlinks or otherwise canonicalize file paths.\n\nMaybe better to have an explicit task to canonicalize a file path and store the\nresult in a new property, if that's really what you want. Or perhaps an extra\nattribute 'canonicalize' on <import> (default should be false, IMHO).\n\nBTW import.html in the manual still states\n\n\"Important: We have not finalized how relative file references will be resolved\nin deep/complex build hierarchies -such as what happens when an imported file\nimports another file. Use absolute references for enhanced build file stability,\nespecially in the imported files.\"", "id": 56432, "time": "2004-04-26T19:45:53Z", "bug_id": 28505, "creation_time": "2004-04-26T19:45:53Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 28505, "text": "Ok applied the patch and updated the manual\nentry for the import task\nCheers,\nPeter", "id": 56623, "time": "2004-04-29T12:05:33Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-04-29T12:05:33Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "jglick@apache.org", "text": "Re. <subant>: cf. bug #30438, fixed for 1.6.3.", "id": 67818, "attachment_id": null, "bug_id": 28505, "creation_time": "2004-12-02T20:46:48Z", "time": "2004-12-02T20:46:48Z", "is_private": false}]
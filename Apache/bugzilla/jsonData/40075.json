[{"count": 0, "tags": [], "creator": "canna@umich.edu", "text": "We have identities at the University of Michigan that don't have their own entries in\nour LDAP directory, but they do appear in groups. This brings up a\nfew issues in regards to authorization with mod_authnz_ldap:\n\n1) We'd like some way to say \"if we can't find a DN\nfor this identity, that's OK.\"\n\n2) Since some of our users are in the directory ( have a person\nentry ) and some are not,  AuthLDAPGroupAttributeisDN is not rich\nenough for us. Many of our groups contain both DNs and usernames.\nWe'd like to extend \"AuthLDAPGroupAttribute\" to say whether the\nattribute in question is a DN or username, and thus be able to\nauthorize both DNs and usernames for the same resource.", "id": 91419, "time": "2006-07-19T17:55:34Z", "bug_id": 40075, "creation_time": "2006-07-19T17:55:34Z", "is_private": false, "attachment_id": null}, {"attachment_id": 18619, "tags": [], "bug_id": 40075, "text": "Created attachment 18619\nPatch Available - allows mixed dn/userid groups for AuthZ\n\nHere is the diff for the feature we've requested. There is a new directive\n\"AuthzLDAPRequireDN\" which takes on/off. We've also modified\nAuthLDAPGroupAttribute to take an optional second argument, \"dn\" which\nindicates the attribute is a dn. If this type is not set, the global\n\"AuthLDAPGroupAttributeisDN\" is observed.", "count": 1, "id": 91420, "time": "2006-07-19T18:04:02Z", "creator": "canna@umich.edu", "creation_time": "2006-07-19T18:04:02Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 40075, "attachment_id": null, "text": "I haven't actually applied the patch and tried it yet, but just from a visual \nreview of the code the main problem that I see is switching the \nAuthLDAPGroupAttribute directive from AP_INIT_ITERATE to AP_INIT_TAKE12.  This \nchange would break backward compatibility.  As AP_INIT_ITERATE the directive \nallows for a list of attributes which during configuration, iterates through \neach attribute and adds it to the group attribute list.  Changing this \ndirective to AP_INIT_TAKE12 would not allow for an attribute list but rather \nonly a single attribute with an optional second parameter.  This would break \nany configuration that currently specifies this directive with an attribute \nlist.  You may need to define a different way to qualify whether the attribute \nis a DN or username.\n", "id": 91555, "time": "2006-07-24T21:00:27Z", "creator": "bnicholes@apache.org", "creation_time": "2006-07-24T21:00:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 40075, "attachment_id": null, "text": "According to the documentation here http://httpd.apache.org/docs/2.2/mod/\nmod_authnz_ldap.html#authldapgroupattribute it looked like the way to use the \nAuthLDAPGroupAttribute was multiple instances of the directive, not a single list of attributes, though I \nnoticed the code supported that. So I wasn't sure if I should obey the documentation or the code for \nbackward compatibility purposes.\n\nThe other way I could implement this is to make a new directive, \"AuthLDAPGroupAttributeDN\" or \npossibly the reverse, \"AuthLDAPGroupAttributeUid\". This would be an iterate, and any attribute listed \nwould be a DN or uid, depending on how you implement it. Or I could add both, and the admin would \nlist which attributes were dns and which attributes were uids. And then backwards compatibility of the \niterate of AuthLDAPGroupAttribute would be preserved. \n\nShall I cut this patch instead?", "id": 91557, "time": "2006-07-24T21:19:14Z", "creator": "canna@umich.edu", "creation_time": "2006-07-24T21:19:14Z", "is_private": false}, {"count": 4, "tags": [], "creator": "canna@umich.edu", "text": "Created attachment 19073\nadds AuthLDAPGroupAttributeDN and AuthzLDAPRequireDN directives\n\nOk, this patch restores AuthLDAPGroupAttribute to its former syntax and adds a\nnew directive, AuthLDAPGroupAttributeDN, whose attribute type is taken to be\n\"dn\" regardless of the value of AuthLDAPGroupAttributeIsDN. \nAuthLDAPGroupAttributeDN uses the same syntax as AuthLDAPGroupAttribute for the\nsake of clarity.", "id": 95343, "time": "2006-11-02T07:40:57Z", "bug_id": 40075, "creation_time": "2006-11-02T07:40:57Z", "is_private": false, "attachment_id": 19073}, {"count": 5, "tags": [], "text": "The problem I see with this patch is around the value of req->dn when the\nfunction util_ldap_cache_getuserdn() fails.  If ldap is unable to find a user\nobject for a user name, obviously this function will fail and the actual value\nof \"dn\" that is returned from this function is undetermined (could be garbage).\n Yet if sec->require_dn is set to false, the code is allowed to continue as if\nit had a valid \"dn\" and \"vals\".  Later when checking authorization for\nldap-group, req->dn is passed back into util_ldap_cache_compare() which could\nend up causing a segfault.  The other problem is that if other authorization\ntypes are used along side of ldap-group, req->dn would be reference within those\nchecks as well which could segfault.\n\nAnother issue is the addition of AuthLDAPGroupAttributeDN which is basically the\nsame thing as AuthLDAPGroupAttribute except it sets an additional flag.  Could\nyou do the same thing by just referencing the flag that is already being set by\nAuthzLDAPRequireDN?  AuthLDAPGruopAttributeDN doesn't seem very intuitive.  I\nalso might change AuthzLDAPRequireDN to something like AuthzLDAPRequireGroupDN\nbut then that kind of conflicts with AuthLDAPGroupAttributeIsDN.  I not sure how\nbest to implement this.", "attachment_id": null, "bug_id": 40075, "id": 95590, "time": "2006-11-08T15:10:59Z", "creator": "bnicholes@apache.org", "creation_time": "2006-11-08T15:10:59Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 40075, "attachment_id": 19182, "text": "Created attachment 19182\nImproved null DN Checking", "id": 96224, "time": "2006-11-27T12:03:21Z", "creator": "canna@umich.edu", "creation_time": "2006-11-27T12:03:21Z", "is_private": false}, {"count": 7, "tags": [], "creator": "canna@umich.edu", "attachment_id": 19182, "id": 96225, "time": "2006-11-27T12:04:25Z", "bug_id": 40075, "creation_time": "2006-11-27T12:04:25Z", "is_private": false, "text": "Comment on attachment 19182\nImproved null DN Checking\n\nReviewing uldap_cache_getuserdn() in modules/ldap/ldap_util.c, neither binddn\nnor retattrs is modified if an error is returned. They are both initialized to\nNULL as well.\n\nAs for calling into util_ldap_cache_compare() with a NULL req->dn, there are 6\ncalls to util_ldap_cache_compare() and/or util_ldap_cache_comparedn() in the\noriginal code. The patch makes it 7. In each case, the original code and the\npatch check for the case where req->dn is NULL. Since the original code uses:\n\nif (req->dn == NULL || strlen(req->dn) == 0) {\n\nI'll resubmit the patch to use that stronger statement -- the original\nsubmission only checked for req->dn == NULL.\n\nRegarding using AuthzLDAPRequireDN, no, that flag can't be used because it\nglobally changes the meaning of all values in the groupattr array. The desired\nfunctionality is to allow both DN and UID attributes to be used for membership\ncomparison. The current code base allows for group attributes to be DNs or UIDs\n(basically strings), but not both at the same time. The patch allows groups\nattributes of both types at the same time.\n\nAnother possible implementation was to make a separate groupattr array, but\nthat method would have required quite a bit of repeated code. It was\nconsiderably simpler to add a type field to the groupattr array and utilize the\nexisting loops over the groupattr array.\n\nI agree that the syntax is not terribly intuitive, but the functionality is not\nexactly basic. The earlier patch has certain advantages in that regard.\nHowever, the current patch has the advantage of leaving the old syntax entirely\nalone.\n\nAuthzLDAPRequireDN should not be called AuthzLDAPRequireGroupDN, as it is\nactually managing completely different functionality, not related to groups.\nThe original code base required all users to have an entry in the directory.\nAuthzLDAPRequireDN allows users to not be in the directory. Perhaps renaming it\nAuthzLDAPRequireUserDN would make that more clear."}, {"count": 8, "tags": [], "creator": "bnicholes@apache.org", "attachment_id": null, "id": 96249, "time": "2006-11-27T16:11:17Z", "bug_id": 40075, "creation_time": "2006-11-27T16:11:17Z", "is_private": false, "text": "Just out of curiosity, how do expect the authentication side of this to work?  \nObviously if the user that you are trying to authorize does not have an entry \nin the LDAP directory, then using ldap authentication will fail which means \nthat the authorization stage will never be called.  Are you planning on using \nsome other type of authentication (file, db, etc.) and then just use ldap to \nmanage the groups?"}, {"count": 9, "tags": [], "creator": "canna@umich.edu", "text": "Precisely! That one option (AuthzLDAPRequireDN Off) allows the AuthN and AuthZ\nfunctions of mod_authnz_ldap to be independently controlled. At University of\nMichigan we use a Web Single Sign-On System (Cosign) that provides only AuthN.\nAt the same time, we have a rich LDAP environment used for AuthZ. These changes\nare applicable to any site that wants to use LDAP for AuthZ and any other\nmechanism for AuthN.", "id": 96252, "time": "2006-11-27T17:33:34Z", "bug_id": 40075, "creation_time": "2006-11-27T17:33:34Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "bnicholes@apache.org", "attachment_id": 19329, "id": 97470, "time": "2006-12-29T20:09:32Z", "bug_id": 40075, "creation_time": "2006-12-29T20:09:32Z", "is_private": false, "text": "Created attachment 19329\nEnhance AuthLDAPGroupAttribute"}, {"count": 11, "tags": [], "creator": "bnicholes@apache.org", "text": "Although I like the concept, I am still uncomfortable with the implementation\nfrom a configuration point of view.  I have attached a patch which is actually\ncloser to your first patch except it maintains the original functionality while\nenhancing  the AuthLDAPGroupAttribute directive to support attributes that may\ncontain a full DN.  Actually, I think that was the original intent of\nAuthLDAPGroupAttributeIsDN but it appears to have been broken along the way. \nAnyway the proposed new syntax for AuthLDAPGroupAttribute is:\n\nAuthLDAPGroupAttribute attribute [DN | UN] ...\n\nwhere the keywords \"DN\" (Distinguished Name) and \"UN\" (User Name) can optionally\nfollow each attribute in the list.  If neither of the keywords are specified,\nthen the attribute type follows the AuthLDAPGroupAttributeIsDN setting.  The\nAuthLDAPGroupAttributeIsDN setting determines if a DN is required in the group\ncomparison or not.  If the AuthLDAPGroupAttribute list contains any UN's, then\nAuthLDAPGroupAttributeIsDN must be set to OFF otherwise the authorization will\nfail since it would be expecting to be able to resolve the user object to a DN\nwithin the LDAP directory.\n\nLet me know if this works for you,\n\nBTW, this patch is against trunk rather than the 2.2.x branch. If accepted, it\nwould then need to be back ported.", "id": 97471, "time": "2006-12-29T20:11:05Z", "bug_id": 40075, "creation_time": "2006-12-29T20:11:05Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 40075, "text": "As far as changing the syntax of AuthLDAPGroupAttribute to AP_INIT_RAW_ARGS and allowing optional \nargs indicating type, the proposed patch is fine. However, your patch doesn't retain the \nAuthzLDAPRequireDN functionality, and that lack of functionality would be a show stopper for us. If that \nfunctionality were also included, I think we'd be all set. Thanks!", "count": 12, "id": 97903, "time": "2007-01-10T11:32:19Z", "creator": "canna@umich.edu", "creation_time": "2007-01-10T11:32:19Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 40075, "attachment_id": null, "text": "Unless I am missing something, the AuthLDAPRequireDN functionality is being \nhandled by AuthLDAPGroupAttributeIsDN.  If AuthLDAPGroupAttributeIsDN is set \nto ON (which is the default) then AuthnzLDAP will expect the user object to \nexist in the directory and for that user ID to be resolved to a full DN.  \nOtherwise it will not be able to do a DN comparison which is what \nAuthLDAPGroupAttributeIsDN ON implies.  If AuthLDAPGroupAttributeIsDN is set \nto OFF, then the user ID that is passed in, does not have to be resolved to a \nfull DN which means that the user object does not have to exist in the \ndirectory but will be resolved to a DN if it does exist.  The group membership \ncomparison will then follow the DN or UN specifier.  If DN is specified then a \nfull DN comparison will occur.  If UN is specified then a simple user id \ncomparison will occur.  If neither is specified then the comparison follows \nthe AuthLDAPGroupAttributeIsDN setting which would default to a UN \ncomparison.  \n\nWhat additional functionality is AuthzLDAPRequireDN performing than that?  \nFrom what I could see in the original patch, AuthzLDAPRequireDN simple \ndetermined whether a failed search for the user object forced the entire \nrequest to fail or was ignored.  AuthLDAPGroupAttributeIsDN is allowing for \nthe same functionality.", "id": 97937, "time": "2007-01-11T08:03:05Z", "creator": "bnicholes@apache.org", "creation_time": "2007-01-11T08:03:05Z", "is_private": false}, {"count": 14, "tags": [], "creator": "canna@umich.edu", "attachment_id": null, "id": 98084, "time": "2007-01-15T11:55:23Z", "bug_id": 40075, "creation_time": "2007-01-15T11:55:23Z", "is_private": false, "text": "Sadly, you'll never get that far.  In particular, when you get here, around line\n571 in httpd-2.2.3:\n\n        /* Search failed, log error and return failure */\n        if(result != LDAP_SUCCESS) {\n            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,\n                \"auth_ldap authorise: User DN not found, %s\", ldc->reason);\n            return sec->auth_authoritative? HTTP_UNAUTHORIZED : DECLINED;\n        }\n\nyou'll return.  Our proposed AuthLDAPRequireDN (off) patch allows this return to\nbe bypassed.  Just below this code is where the requirements array is traversed,\nso if we can't get there, no requirements can be checked.  Perhaps this return\nis an oversight, and there's no need for AuthLDAPRequireDN?  The comment at 547:\n\n    /*\n     * If we have been authenticated by some other module than mod_auth_ldap,\n     * the req structure needed for authorization needs to be created\n     * and populated with the userid and DN of the account in LDAP\n     */\n\ncertainly suggests that it may be OK to rely on an external authN, but obviously\nthe code at 571 requires that the user exist in LDAP."}, {"count": 15, "tags": [], "creator": "bnicholes@apache.org", "text": "In the last patch that I included against TRUNK, that return has been removed.\nThis return statement as well as the comment that you are referring to is\nexactly why I stated in reply #11 that I think that the original intent of\nAuthLDAPGroupAttributeIsDN was broken.  \n\nIn the attached patch, if the LDAP search fails, a DEBUG level message will be\nwritten but the request processing won't stop.  The check that replicates the\nRequireDN-like functionality comes about 10 lines below there when\nsec->group_attrib_is_dn is checked.  If sec->group_attrib_is_dn (ie.\nAuthLDAPGroupAttributeIsDN) is true, the request is denied.  If it is false and\na user id exists, then the request is allowed to continue and the user id is\ncompared against the membership attributes.  Take a look at the 12/19 patch that\nI attached against TRUNK.\n\nFYI, this patch (or any other patch) will have to be applied against TRUNK first\nand then backported to 2.2 if accepted.  So all further coding and evaluation\nshould be done with TRUNK and not the 2.2 branch.", "id": 98153, "time": "2007-01-16T10:41:50Z", "bug_id": 40075, "creation_time": "2007-01-16T10:41:50Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "creator": "bnicholes@apache.org", "text": "(In reply to comment #15)\n and\n> compared against the membership attributes.  Take a look at the 12/19 patch \n\nSorry, I meant the 12/29 patch.", "id": 98154, "time": "2007-01-16T10:44:05Z", "bug_id": 40075, "creation_time": "2007-01-16T10:44:05Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "carnold@houston.rr.com", "attachment_id": null, "text": "AbstractParentNode.appendChild() and insertBefore() have code like\nthis in the path for insertion of a document fragment:\n\n\t    while (n != null) {\n\t\tappendChild(n);\n\t\tn = n.getNextSibling();\n\t    }\n\nThe problem is that after the appendChild() or insertBefore()\nthe nextSibling() of the inserted node is the reference node\nand then the loop attempts to walk the document instead of\nthe document fragment.  This can be corrected by determining\nthe nextSibling() before the insertBefore or appendChild.\n\nThis uncovered another bug in AbstractParentNode.insert(ExtendedNode...):\n\n\n\t    ExtendedNode o = firstChild;\n\t    while (o != null) {\n\t\tif (o == r) {\n...\n\t\t}\n\t\to = (ExtendedNode)o.getNextSibling();\n\t    }\n\t    throw createDOMException\n\t\t(DOMException.NOT_FOUND_ERR,\n\t\t \"child.missing\",\n\t\t new Object[] { new Integer(o.getNodeType()),\n\t\t\t\to.getNodeName() });\n\nThe problem is in the calls to o.getNodeType() and o.getNodeName().\nSince The only way to that line is to exit the while loop due to o == null,\nwhenever this line is reached it will throw a null pointer exception.\nI believe the intention was to insert the node type and name of the\nreference node which is in the variable r.\n\ncvs diff AbstractParentNode.java (in directory D:\\apache-xml\\xml-\nbatik\\sources\\org\\apache\\batik\\dom\\)\nIndex: AbstractParentNode.java\n===================================================================\nRCS file: /home/cvspublic/xml-\nbatik/sources/org/apache/batik/dom/AbstractParentNode.java,v\nretrieving revision 1.6\ndiff -r1.6 AbstractParentNode.java\n79a80\n>             Node ns;\n80a82,86\n>                 //\n>                 //  this has to be done before insertion\n>                 //    since it will point to the reference\n>                 //    node afterwards\n>                 ns = n.getNextSibling();\n82c88\n< \t\tn = n.getNextSibling();\n---\n> \t\tn = ns;\n183a190\n>             Node ns;\n184a192,195\n>                 //\n>                 //  this has to be done before append()\n>                 //     or nextSibling will point to the reference node\n>                 ns = n.getNextSibling();\n186c197\n< \t\tn = n.getNextSibling();\n---\n> \t\tn = ns;\n450c461\n< \t\n---\n> \n455c466\n< \t\n---\n> \n547,548c558,559\n< \t\t new Object[] { new Integer(o.getNodeType()),\n< \t\t\t\to.getNodeName() });\n---\n> \t\t new Object[] { new Integer(r.getNodeType()),\n> \t\t\t\tr.getNodeName() });\n653c664\n<             \n---\n> \n664c675\n<         private void readObject(ObjectInputStream s) \n---\n>         private void readObject(ObjectInputStream s)\n684c695\n<             } \n---\n>             }\n\n*****CVS exited normally with code 1*****", "id": 2490, "time": "2001-05-16T19:04:04Z", "bug_id": 1787, "creation_time": "2001-05-16T19:04:04Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 39735, "text": "The StandardJMeterEngine:run() method contains the following code:\n\nthreads = new JMeterThread[numThreads];\n\nThe threads JMeterThread array is reassigned with each iteration. There may be \nweak references preventing the GC from cleaning up the previous iteration's \nthreads and causing lag. My proposed enhancement is to add the following code:\n\nif( !reuseThreadsProperty ) {\n    threads = new JMeterThread[numThreads];\n} else if( groupCount == 1 ) {\n    threads = new JMeterThread[numThreads];\n}\n\nreuseThreadsProperty => boolean for the JMeter.properties value, default false\n\nThis will set the thread array on the first iteration and provide an override \nfor thread reuse.", "id": 89821, "time": "2006-06-06T15:12:05Z", "creator": "mongermd@yahoo.com", "creation_time": "2006-06-06T15:12:05Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "id": 89831, "time": "2006-06-06T19:45:03Z", "bug_id": 39735, "creation_time": "2006-06-06T19:45:03Z", "is_private": false, "text": "As far as I can see, the threads array could be eliminated entirely - the array\nonly seems to be used to hold the current thread, and threads.length is the same\nas numThreads.\n\nThis would eliminate the array references that are held until the run() method\nexits.\n\nWDYT?"}, {"count": 2, "tags": [], "creator": "mongermd@yahoo.com", "is_private": false, "text": "Indeed that would make more sense to remove the array and perhaps some \nreferences. I will keep looking around the code to find locate the lag when \nthere are multiple loops. ", "id": 89832, "time": "2006-06-06T20:36:29Z", "bug_id": 39735, "creation_time": "2006-06-06T20:36:29Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "sebb@apache.org", "is_private": false, "text": "Are you saying that you have found a lag?", "id": 89834, "time": "2006-06-06T20:52:57Z", "bug_id": 39735, "creation_time": "2006-06-06T20:52:57Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 39735, "attachment_id": null, "text": "Yes, when the loop count is greater than 1, the response times are lagged. I \nhave reproduced this on Windows 2k and XP. If I run 12 threads, 24 sec. ramp-\nup, and 1 loop, the results are much faster and accurate than 10 loops of the \nsame. More loops seems to lag the response times. I have verified that the web \napplication is not the source of the lag. ", "id": 89835, "time": "2006-06-06T21:04:01Z", "creator": "mongermd@yahoo.com", "creation_time": "2006-06-06T21:04:01Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 39735, "attachment_id": null, "text": "I've removed the threads array, because it does not seem to serve any purpose.\n\nHowever, I don't think this has much to do with the problems you reported.", "id": 89837, "time": "2006-06-06T21:50:48Z", "creator": "sebb@apache.org", "creation_time": "2006-06-06T21:50:48Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "kpreisser@apache.org", "attachment_id": null, "text": "As reported on the users list [2] (note that I used Tomcat 7.0.27, but Bugzilla seems to have only 7.0.26):\n\nHi all,\n\nsome time ago, I wrote about a BufferOverflowException which I got sporadically on my Tomcat 7.0.21 [1], when using the AJP-APR-Connector.\nHowever, at that time I couldn't reproduce the exception.\n\nWhen I looked at this again today, I was able to create a client that sends an AJP message and aborts the connection, resulting in the BufferOverflowException in Tomcat. I was using Tomcat 7.0.27 with Tomcat Native 1.1.23, on Oracle JDK 1.7.0_03 and Windows 7 32-bit.\n\n\nTo reproduce,\n\n1. On the server side, create a web application containing a servlet which will generate some random data:\n\n@WebServlet(\"/index.html\")\npublic class MyTestServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n       \n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        try {\n            response.setContentType(\"text/plain\");\n            response.setCharacterEncoding(\"utf-8\");\n            \n            byte[] bytesToWrite = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57};\n            \n            // Try to write 1,000,000 bytes to the client.\n            try (OutputStream out = response.getOutputStream()) {\n                for (int i = 0; i < 100000; i++) {\n                    out.write(bytesToWrite);\n                }\n            }\n            \n        } catch (IOException ex) {\n            // Ignore\n        }\n    }\n}\n\nDeploy the application as ROOT, so that the servlet will be reachable at \"/\".\nConfigure Tomcat to have an AJP-APR connector listening on port 8009.\n\n\n2. On the client side, create a program like this:\n\npublic class AjpTester {\n    public static void main(String[] args) throws IOException {\n\n        byte[] ajpPacketBytes = { // JK_AJP13_FORWARD_REQUEST for \"/\"\n            0x12, 0x34, 0x00, 0x54, 0x02, 0x02, 0x00, 0x08,\n            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,\n            0x00, 0x00, 0x01, 0x2f, 0x00, 0x00, 0x07, 0x31,\n            0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34, 0x00, 0x00,\n            0x07, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x2e, 0x34,\n            0x00, 0x00, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,\n            0x68, 0x6f, 0x73, 0x74, 0x00, 0x00, 0x50, 0x00,\n            0x00, 0x02, (byte)0xa0, 0x06, 0x00, 0x0a, 0x4b, 0x65,\n            0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,\n            0x00, (byte)0xa0, 0x0b, 0x00, 0x09, 0x6c, 0x6f, 0x63,\n            0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00, (byte)0xff\n        };\n\n        Socket s = new Socket(\"localhost\", 8009); // connect to AJP port\n        OutputStream sout = s.getOutputStream();\n        InputStream sin = s.getInputStream();\n\n        sout.write(ajpPacketBytes); // request Url \"/\"\n\n        // Read between 10,000 and 11,023 bytes, then exit the JVM\n        byte[] buf = new byte[1024];\n        int read;\n        int bytesRead = 0;\n        while ((read = sin.read(buf)) > 0) {\n            bytesRead += read;\n            if (bytesRead >= 10000) {\n                System.exit(1);\n            }\n        }\n    }\n}\n\nThe client will send an JK_AJP13_FORWARD_REQUEST message which requests URL \"/\" and sends \"Connection: keep-alive\" and \"Host: localhost\" headers.\n\n\n3. Tomcat will display this exception:\n\nApr 20, 2012 10:57:08 PM org.apache.coyote.ajp.AjpAprProcessor process\nSchwerwiegend: Error processing request\njava.nio.BufferOverflowException\n\tat java.nio.DirectByteBuffer.put(DirectByteBuffer.java:357)\n\tat org.apache.coyote.ajp.AjpAprProcessor.output(AjpAprProcessor.java:285)\n\tat org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1119)\n\tat org.apache.coyote.Response.doWrite(Response.java:504)\n\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:383)\n\tat org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:462)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:334)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:283)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:511)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:434)\n\tat org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:197)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:565)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1812)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\nI guess the exception itself is harmless, but it may fill up log files, if clients disconnect frequently while receiving data.\nNote that before that exception occurs, a regular \"ClientAbortException:  java.io.IOException: Failed to send AJP message\" is thrown by org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388).\nThe exception occurs neither with AJP-BIO nor with AJP-NIO.\n\n\n[1] http://markmail.org/message/zogi3tfbz2kyw3jg\n[2] http://markmail.org/message/ntejdw36pfhlqodr", "id": 158259, "time": "2012-04-21T11:51:17Z", "bug_id": 53119, "creation_time": "2012-04-21T11:51:17Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 53119, "text": "I can't reproduce this with the provided test case but I believe I have tracked down the root cause and fixed it. The fix has been applied to trunk and 7.0.x and will be included in 7.0.28 onwards.", "id": 159525, "time": "2012-05-30T13:35:58Z", "creator": "markt@apache.org", "creation_time": "2012-05-30T13:35:58Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "Thanks, Mark.\n\nI tested with Tomcat 7 Trunk and can confirm that r1344253 fixes the issue.", "attachment_id": null, "bug_id": 53119, "id": 159531, "time": "2012-05-30T14:23:27Z", "creator": "kpreisser@apache.org", "creation_time": "2012-05-30T14:23:27Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 53119, "attachment_id": 28890, "id": 159703, "time": "2012-06-05T11:03:49Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-06-05T11:03:49Z", "is_private": false, "text": "Created attachment 28890\n2012-06-05_tc6_53119_AjpAprProcessor.patch\n\nBackport of r1344253 to be proposed for 6.0. The patched method name is different, but code is the same."}, {"count": 4, "tags": [], "bug_id": 53119, "attachment_id": null, "id": 159704, "time": "2012-06-05T12:27:57Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2012-06-05T12:27:57Z", "is_private": false, "text": "Regarding review of r1344253 and porting it to other processor implementations\nhttp://tomcat.markmail.org/thread/d4mzx52gj3omchrr\n\nThe question of whether repeated call to *processor#output(..) could fail because of insufficient cleanup from previous failed call.\n\n- AjpProcessor:\nThere is nothing to clean up. It just uses passed byte[] array as is.\n\n- AjpNioProcessor:\nImproved in r1346365 in trunk, proposed for 7.0."}, {"count": 5, "tags": [], "bug_id": 53119, "text": "I use Tomcat with Nginx wia ajp connector.\nI found the followings:\n- In my tomcat side:\nFeb 27, 2012 4:53:02 PM com.ys.cache.StaticFileCache getFile\nINFO: /usr/local/tomcat/webapps/ROOT/i/a.swf : 1\nFeb 27, 2012 4:53:02 PM org.apache.coyote.ajp.AjpAprProcessor process\nSEVERE: Error processing request\njava.nio.BufferOverflowException\n    at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:357)\n    at org.apache.coyote.ajp.AjpAprProcessor.output(AjpAprProcessor.java:285)\n    at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1082)\n    at org.apache.coyote.Response.doWrite(Response.java:533)\n    at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:383)\n    at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:462)\n    at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:334)\n    at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:283)\n    at org.apache.catalina.connector.Response.finishResponse(Response.java:507)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:434)\n    at org.apache.coyote.ajp.AjpAprProcessor.process(AjpAprProcessor.java:197)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)\n    at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1805)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n    at java.lang.Thread.run(Thread.java:722) \n\nnginx log (~1 minute before tomcat log):\n78.131.23.132 - - [27/Feb/2012:16:52:01 +0100] \"GET /i/a.swf HTTP/1.1\" 200 369 \"http://dictzone.com/osszes-szotar/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\"\n\nI think a timer ended of Nginx side, and close the ajp connection.\nIn this case the problem on the Nginx side or on the Tomcat side?", "id": 159817, "time": "2012-06-08T10:47:13Z", "creator": "yoursoft@freemail.hu", "creation_time": "2012-06-08T10:47:13Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 53119, "text": "Patch applied to 6.0.x and will be in 6.0.36 onwards.", "id": 160158, "time": "2012-06-21T11:17:37Z", "creator": "markt@apache.org", "creation_time": "2012-06-21T11:17:37Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "text": "Hi,\n\nas reported on the users list [1], shortly after I switched to the AJP-NIO connector on Tomcat 7.0.32 (Java 1.7.0_09), I got another java.nio.BufferOverflowException:\n\nOkt 20, 2012 2:58:51 PM org.apache.coyote.ajp.AjpNioProcessor process\nSEVERE: Error processing request\njava.nio.BufferOverflowException\n\tat java.nio.HeapByteBuffer.put(HeapByteBuffer.java:183)\n\tat org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:281)\n\tat org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1122)\n\tat org.apache.coyote.Response.doWrite(Response.java:504)\n\tat org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:383)\n\tat org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:462)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:334)\n\tat org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:283)\n\tat org.apache.catalina.connector.Response.finishResponse(Response.java:514)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:434)\n\tat org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:184)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\n\nThe stacktrace seems to be very similar to the one that I got when using the AJP-APR connector. However, unfortunately I'm currently unable to reproduce the issue that causes this BufferOverflowException.\n\n\nThanks!\n\n[1] http://markmail.org/message/uiife6gx7zwmyfku", "attachment_id": null, "bug_id": 53119, "id": 162984, "time": "2012-10-27T12:54:21Z", "creator": "kpreisser@apache.org", "creation_time": "2012-10-27T12:54:21Z", "is_private": false}, {"count": 8, "tags": [], "creator": "claes.mogren@gmail.com", "attachment_id": null, "text": "Is it absolutely sure that this bug is fixed? I tried to use ajp-nio with the latest 7.0.52 version and get the same problem right on the first page:\n\nMar 12, 2014 12:18:09 AM org.apache.coyote.AbstractProtocol start\nINFO: Starting ProtocolHandler [\"http-bio-8091\"]\nMar 12, 2014 12:18:09 AM org.apache.coyote.AbstractProtocol start\nINFO: Starting ProtocolHandler [\"ajp-nio-8016\"]\nMar 12, 2014 12:18:09 AM org.apache.catalina.startup.Catalina start\nINFO: Server startup in 32142 ms\nMar 12, 2014 12:18:46 AM org.apache.coyote.ajp.AjpNioProcessor process\nSEVERE: Error processing request\njava.nio.BufferOverflowException\n    at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:183)\n    at org.apache.coyote.ajp.AjpNioProcessor.output(AjpNioProcessor.java:296)\n    at org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(AbstractAjpProcessor.java:1195)\n    at org.apache.coyote.Response.doWrite(Response.java:520)\n    at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:408)\n    at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:480)\n    at org.apache.catalina.connector.OutputBuffer.realWriteChars(OutputBuffer.java:491)\n    at org.apache.tomcat.util.buf.CharChunk.flushBuffer(CharChunk.java:464)\n    at org.apache.catalina.connector.OutputBuffer.close(OutputBuffer.java:293)\n    at org.apache.catalina.connector.Response.finishResponse(Response.java:510)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:435)\n    at org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:177)\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1721)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1679)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:744)", "id": 173752, "time": "2014-03-11T23:32:25Z", "bug_id": 53119, "creation_time": "2014-03-11T23:32:25Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 53119, "text": "Update! \n\nWe're using shibboleth for SAML authentication and they recommend that you increase the package size. We've been running with the default AJP-connector for over a year with packetSize=\"65536\" and ProxyIOBufferSize 65536 in Apache, but when we turned that off the AjpNioProcessor works again. What is the best way to debug this problem? Should I create a new ticket?", "id": 173757, "time": "2014-03-12T09:12:39Z", "creator": "claes.mogren@gmail.com", "creation_time": "2014-03-12T09:12:39Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 53119, "attachment_id": null, "text": "It is not immediately obvious that this is the same issue so yes, please create a new bugzilla issue and provide the necessary information to enable this to be reproduced.", "id": 173766, "time": "2014-03-12T13:04:29Z", "creator": "markt@apache.org", "creation_time": "2014-03-12T13:04:29Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 53119, "text": "*** Bug 56296 has been marked as a duplicate of this bug. ***", "id": 174042, "time": "2014-03-23T22:58:55Z", "creator": "markt@apache.org", "creation_time": "2014-03-23T22:58:55Z", "is_private": false, "attachment_id": null}]
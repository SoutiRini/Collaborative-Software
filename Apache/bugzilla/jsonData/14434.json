[{"count": 0, "tags": [], "bug_id": 14434, "attachment_id": null, "text": "The Xindice database contains 25 XML objects (example of object see below),\n\nwhen XPath queries are executed, an Exception dump is outputted on the console \nfrom the Database core for each matching object (25 in this case).\n\nXPath queries used:\n\n/contact:contact/attribute::entity:type='contact' also tried\n/contact:contact[entity:type='contact']\n\n\nConsole log output:\n------------------------------------------------------------------------\nLog output (\"Kan inte konvertera #BOOLEAN till en NodeList!\" localized\nmessage, probally from Xerces, for \"Can not convert #BOOLEAN to a\nNodeList!\")\n\n\nThe 25 Stack traces are generated from inside Xindice, when the following\nline is executed:\n\norg.xmldb.api.base.ResourceSet   resultSet = service.query( xpathquery );\n\n\n\nXML Database info: org.apache.xindice.client.xmldb.embed.DatabaseImpl@289d2e\nDataEngineAPIServer - objectQuery: collection = 'main', xpath =\n'/contact:contact/attribute::entity:type='contact''.\nDataEngineAPIServer - objectQuery: isOpen = true\nDataEngineAPIServer - objectQuery: size = 25\nDEBUG org.apache.xindice.core - No message\norg.apache.xpath.XPathException: Kan inte konvertera #BOOLEAN till en\nNodeList!\n\tat org.apache.xpath.objects.XObject.error(XObject.java:718)\n\tat org.apache.xpath.objects.XObject.nodeset(XObject.java:448)\n\tat\norg.apache.xindice.core.query.XPathQueryResolver$ResultSet.prepareNextNode(X\nPathQueryResolver.java:1069)\n\tat\norg.apache.xindice.core.query.XPathQueryResolver$ResultSet.<init>(XPathQuery\nResolver.java:1043)\n\tat\norg.apache.xindice.core.query.XPathQueryResolver$XPathQuery.execute(XPathQue\nryResolver.java:282)\n\tat\norg.apache.xindice.core.query.XPathQueryResolver.query(XPathQueryResolver.ja\nva:184)\n\tat org.apache.xindice.core.query.QueryEngine.query(QueryEngine.java:163)\n\tat org.apache.xindice.core.Collection.queryCollection\n(Collection.java:809)\n\tat\norg.apache.xindice.client.xmldb.embed.CollectionImpl.query(CollectionImpl.ja\nva:411)\n\tat\norg.apache.xindice.client.xmldb.XindiceCollection.query(XindiceCollection.ja\nva:279)\n\tat\norg.apache.xindice.client.xmldb.services.QueryService.query(QueryService.jav\na:130)\n\tat\ncom.saguru.intelligence.data.internal.DataEngineAPIServer.queryObjects(DataE\nngineAPIServer.java:582)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39\n)\n\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl\n.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat\ncom.saguru.sf.api.extension.APIServerExtensionReflection.invokeMethod(APISer\nverExtensionReflection.java:309)\n\tat\ncom.saguru.sf.api.extension.APIServerExtensionReflection.invokeAPIMethod(API\nServerExtensionReflection.java:271)\n\tat\ncom.saguru.sf.api.internal.APIServerDefaultRouterImpl.invokeAPIMethod(APISer\nverDefaultRouterImpl.java:194)\n\tat com.saguru.intelligence.api.APIReference.makecall\n(APIReference.java:154)\n\tat\ncom.saguru.intelligence.api.repository.Repository.objectQuery(Repository.jav\na:322)\n\tat\ncom.saguru.intelligence.api.data.DataSourceRepository.contactQuery(DataSourc\neRepository.java:183)\n\tat\ncom.saguru.intelligence.api.data.DataSourceRepository.contactQuery(DataSourc\neRepository.java:167)\n\tat\ncom.saguru.intelligence.inteliagent.agents.GoogleObservationAgent.run(Google\nObservationAgent.java:217)\n\tat\ncom.saguru.intelligence.inteliagent.ContextImpl.run(ContextImpl.java:204)\n\tat java.lang.Thread.run(Thread.java:536)\n\n.\n.\n.\n... and 24 more of these Stack Traces.\n\n\nThe size of the ResourceSet returned is zero.\n\n\nJava code is below:\n\n\n\npublic java.util.Vector queryObjects(String collection, String xpathquery)\n{\n\torg.xmldb.api.base.Collection\t\t\tcol\t\t\n\t= null;\n\ttry\n\t{\n\t\tcol\t\t= getCollection( collection );\n\t\tjava.util.Vector\t\tresults\t\t= new \njava.util.Vector();\n\n\t\tlogger.debug( \"objectQuery: collection = '\" + col.getName() \n+ \"', xpath =\n'\" + xpathquery + \"'.\" );\n\t\tlogger.debug( \"objectQuery: isOpen = \" + col.isOpen() );\n\t\tlogger.debug( \"objectQuery: size = \" + col.getResourceCount() );\n\n\n\t\t// Return all objects\n\t\tif ( xpathquery == null )\n\t\t{\n\t\t\tString\t\tids[]\t\t= col.listResources();\n\t\t\tfor( int i=0; i < ids.length; i++ )\n\t\t\t{\n\t\t\t\tString\t\tid\t= ids[ i ];\n\t\t\t\tresults.addElement( id );\n\t\t\t}\n\t\t}\n\n\t\t// Process xpath query\n\t\telse\n\t\t{\n\t\t\torg.xmldb.api.modules.XPathQueryService \tservice\n\t=\ngetXPathQueryService( col );\n\t\t\torg.xmldb.api.base.ResourceSet \t\tresultSet\n\t= service.query( xpathquery );\n\n\t\t\tlogger.debug( \"Query result size = \" + resultSet.getSize\n() );\n\n\t\t\t//\n\t\t\tfor ( org.xmldb.api.base.ResourceIterator i = \nresultSet.getIterator();\ni.hasMoreResources(); )\n\t\t\t{\n\t\t\t\torg.xmldb.api.base.Resource\t\tres = \ni.nextResource();\n\t\t\t\tlogger.debug( \"Query result element: \" + res );\n\t\t\t\tresults.addElement( res.getId() );\n\t\t\t}\n\t\t}\n\n\t\treturn( results );\n\t}\n\n\tcatch(Exception e )\n\t{\n\t\tlogger.debug( \"queryObjects error\", e );\n\t}\n\n\n\tfinally\n\t{\n\t\treturnCollection( col );\n\t}\n\n\treturn( null );\n}\n\n\n\nCode for the getXPathQueryService():\n\n/**\n *\n *\n */\nprotected org.xmldb.api.modules.XPathQueryService\ngetXPathQueryService(org.xmldb.api.base.Collection collection)\n\tthrows\n\t\torg.xmldb.api.base.XMLDBException\n{\n\torg.xmldb.api.modules.XPathQueryService \tservice\t\t=\n(org.xmldb.api.modules.XPathQueryService)collection.getService(\"XPathQuerySe\nrvice\", \"1.0\");\n\n\n\n\tfor ( java.util.Enumeration e = namespaces.keys(); e.hasMoreElements\n(); )\n\t{\n\t\tString\t\t\tprefix\t\t= (String)e.nextElement\n();\n\t\tString\t\t\turi\t\t\t= (String)\nnamespaces.get( prefix );\n\n\t\tservice.setNamespace( prefix, uri );\n\t}\n\n\n\treturn( service );\n}\n\n\n\n\nXML Code (from one of the XML objects in the database):\n--------------------------------------------------------\n\n<?xml version=\"1.0\"?>\n<contact:contact \nxmlns:contact=\"http://www.saguru.com/namespace/2002/kserver/contact\" \nxmlns:name=\"http://www.saguru.com/namespace/2002/kserver/contact/name\" \nxmlns:phone=\"http://www.saguru.com/namespace/2002/kserver/contact/phone\" \nxmlns:fax=\"http://www.saguru.com/namespace/2002/kserver/contact/fax\" \nxmlns:mobile=\"http://www.saguru.com/namespace/2002/kserver/contact/mobile\" \nxmlns:email=\"http://www.saguru.com/namespace/2002/kserver/contact/email\" \nxmlns:www=\"http://www.saguru.com/namespace/2002/kserver/contact/www\" \nxmlns:address=\"http://www.saguru.com/namespace/2002/kserver/contact/address\" \nxmlns:education=\"http://www.saguru.com/namespace/2002/kserver/contact/education\"\n xmlns:economy=\"http://www.saguru.com/namespace/2002/kserver/contact/economy\" \nxmlns:entity=\"http://www.saguru.com/namespace/2002/kserver/entity\" \nxmlns:relation=\"http://www.saguru.com/namespace/2002/kserver/relation\" \nxmlns:xlink=\"http://www.w3.org/1999/xlink\" \nentity:type=\"contact\" \nentity:id=\"?\">\n\n\n<name:first />\n<name:middle />\n<name:last>Bj\u00f6rn Hopen</name:last>\n<name:full>Bj\u00f6rn Hopen</name:full>\n<name:nick />\n<contact:gender>0</contact:gender>\n<contact:birthdate>2002-07-17</contact:birthdate>\n<phone:private />\n<phone:business />\n<fax:private />\n<fax:business />\n<mobile:business>+46 (733) 123456</mobile:business>\n<www:url />\n</contact:contact>", "id": 26041, "time": "2002-11-10T22:29:23Z", "creator": "nicolai@wadstrom.net", "creation_time": "2002-11-10T22:29:23Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 14434, "attachment_id": null, "id": 26105, "time": "2002-11-11T22:29:22Z", "creator": "nicolai@wadstrom.net", "creation_time": "2002-11-11T22:29:22Z", "is_private": false, "text": "Some additional information:\n\njava version \"1.4.1_01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.4.1_01-b01)\nJava HotSpot(TM) Client VM (build 1.4.1_01-b01, mixed mode)\n\nDebuging and testing being done in Eclipse v2.0.1."}, {"attachment_id": null, "tags": [], "creator": "nicolai@wadstrom.net", "text": "Has also been tested with Java v1.3.1_01, with the same results.\n\n\njava version \"1.3.1_01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.3.1_01)\nJava HotSpot(TM) Client VM (build 1.3.1_01, mixed mode)", "count": 2, "id": 26106, "time": "2002-11-11T22:50:00Z", "bug_id": 14434, "creation_time": "2002-11-11T22:50:00Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 14434, "attachment_id": null, "id": 26121, "time": "2002-11-12T08:33:18Z", "creator": "vladimir@bossicard.com", "creation_time": "2002-11-12T08:33:18Z", "is_private": false, "text": "can you write a JUnit test that reproduce the bug?  It will be easier for us to\ndebug."}, {"count": 4, "tags": [], "bug_id": 14434, "attachment_id": null, "text": "Yes,\n\nIt is in progress. I will post and URL to download them from my site when done.", "id": 26127, "time": "2002-11-12T10:45:34Z", "creator": "nicolai@wadstrom.net", "creation_time": "2002-11-12T10:45:34Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 14434, "attachment_id": null, "id": 27142, "time": "2002-11-28T19:32:22Z", "creator": "nicolai@wadstrom.net", "creation_time": "2002-11-28T19:32:22Z", "is_private": false, "text": "Seems my current consultant engagement takes all my time at the moment, so I do \nnot know when I have time to create the test cases. I will be submitting them \nhere (and work on the bug) if nobody else finds a solution before then."}, {"count": 6, "tags": [], "bug_id": 14434, "attachment_id": null, "text": "Hmmm... works here, with the correct XPath, which should not be\n\n/contact:contact[entity:type='contact']\n\nbut\n\n/contact:contact[@entity:type='contact']\n\nPlease double check. I have written some working code reproducing your setup,\njust in case, send me a note and I'll send it to you", "id": 27769, "time": "2002-12-12T22:27:53Z", "creator": "gianugo@apache.org", "creation_time": "2002-12-12T22:27:53Z", "is_private": false}, {"count": 7, "tags": [], "creator": "nicolai@wadstrom.net", "text": "Thanks.\n\nFinally have some time for the Xindice based project again.\n\nI tried with the latest CVS and it works (the missing @ was a typo, I used the \ncorrect XPath: /contact:contact[@entity:type='contact'], and \nalso /contact:contact/attribute::entity:type='contact' which also is a correct \nXPath according to the XPath specs), might this have been a Xalan problem?\n\n\nThough I can see that I get similair problems with other queries, such as:\n\n/observation:observation/observation:url = 'value'\n\nThe documents looks like:\n\n<observation:observation\n xmlns:observation=\"http://www.saguru.com/namespace/2002/kserver/observation\"\n xmlns:entity=\"http://www.saguru.com/namespace/2002/kserver/entity\"\n xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n entity:type=\"observation\"\n>\n   <observation:url>value</observation:url>\n</observation:observation>\n\nProduces an Exception dump from within Xindice itself for each document in the \ncollection (which are also of other types that the observation), just as \ndescribed above: \"Can't convert #BOOLEAN to a NodeList\".\n\nI am trying to use the query to find which document UNID match, and not the \nselect nodes from the documents in the collection. \n\nThis might be a design flaw (in my code or in Xindice) maybe?", "id": 27848, "time": "2002-12-15T14:17:14Z", "bug_id": 14434, "creation_time": "2002-12-15T14:17:14Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "nicolai@wadstrom.net", "text": "Did some more research, and this is defintivley due to the way xindice uses \nxpath for quering. \n\nIt might be a good idea to explicity control in a query if I am after finding \nthe complete matching documents or only return the matching part of each \ndocument (thus treating the collection as a big XML document).", "count": 8, "id": 28129, "time": "2002-12-20T17:40:46Z", "bug_id": 14434, "creation_time": "2002-12-20T17:40:46Z", "is_private": false}]
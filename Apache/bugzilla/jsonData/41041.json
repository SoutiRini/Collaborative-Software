[{"count": 0, "tags": [], "bug_id": 41041, "attachment_id": null, "is_private": false, "id": 96189, "time": "2006-11-26T15:37:01Z", "creator": "e61559@ems.rmit.edu.au", "creation_time": "2006-11-26T15:37:01Z", "text": "I'm using:\n  - Apache 2.2.3\n  - Apr-1.2.7\n  - OpenLDAP 2.3.30\n  - build with Sun C 5.8 Patch 121015-02 2006/03/29\n\nI'm trying to use OpenLDAP to do secure LDAP auth against an NDS server.\nUsing the following configuation:\n<IfModule ldap_module>\n   LDAPTrustedGlobalCert CA_BASE64 /www/my-cert.pem\n   <Location /ldap-status>\n      SetHandler ldap-status\n      AuthType basic\n      AuthName \"NDS Username and Password\"\n      AuthBasicProvider ldap\n      AuthUserFile /dev/null\n      AuthLDAPURL ldap://my.lpap.server/o=myorg?cn?sub TLS\n      AuthzLDAPAuthoritative off\n      require valid-user\n   </Location>\n</IfModule>\n\nI get the following:\n  [debug] mod_authnz_ldap.c(373): [client x.x.x.x] [11431] auth_ldap\nauthenticate: using URL ldap://my.lpap.server/o=myorg?cn?sub\n  [notice] child pid 11431 exit signal Segmentation fault (11), possible\ncoredump in /www\n\nLooking at the core file:\n  t@1 (l@1) program terminated by signal SEGV (Segmentation Fault)\nCurrent function is ber_sockbuf_ctrl (optimized)\n   89           assert( SOCKBUF_VALID( sb ) );\n(dbx) where                                                                  \ncurrent thread: t@1\n=>[1] ber_sockbuf_ctrl(sb = ???, opt = ???, arg = ???) (optimized), at\n0xfed5b000 (line ~89) in \"sockbuf.c\"\n  [2] ldap_pvt_tls_inplace(sb = ???) (optimized), at 0xfef7410c (line ~892) in\n\"tls.c\"\n  [3] ldap_tls_inplace(ld = ???) (optimized), at 0xfef74170 (line ~910) in \"tls.c\"\n  [4] ldap_start_tls_s(ld = ???, serverctrls = ???, clientctrls = ???)\n(optimized), at 0xfef75b80 (line ~1891) in \"tls.c\"\n  [5] option_set_tls(0xc7040, 0x1b9700, 0xc7224, 0xc72d0, 0xff2678d4, 0xc72e5),\nat 0xff2506fc \n  [6] apr_ldap_set_option(0xc7040, 0x1b9700, 0x6fff, 0xc7224, 0xffbfd788,\n0xc72d0), at 0xff2505a0 \n  [7] uldap_connection_open(0x0, 0xc7200, 0x185510, 0x50, 0x185450, 0x0), at\n0xfe2f1f48 \n  [8] uldap_cache_checkuserid(0x19f600, 0xc7200, 0x0, 0xffffffff, 0xfdca1970,\n0xfe309570), at 0xfe2f2fb8 \n  [9] authn_ldap_check_password(0x19f600, 0x1b3f50, 0x1b3f37, 0x1b3f58,\n0xfe2b5268, 0xfe2b577c), at 0xfe2a14ac \n  [10] authenticate_basic_user(0x19f600, 0x10000, 0x186660, 0xfe2b56d0,\n0xfe3f103c, 0xfe2a1240), at 0xfe3e0bd0 \n  [11] ap_run_check_user_id(0x19f600, 0x187688, 0x187688, 0x6def0, 0x1876dc,\n0x3), at 0x3686c \n  [12] ap_process_request_internal(0x0, 0x185450, 0x19f600, 0x0, 0x0, 0x2), at\n0x3728c \n  [13] ap_process_request(0x19f600, 0x6bc00, 0x4, 0xc8, 0x1, 0xffffffff), at\n0x4923c \n  [14] ap_process_http_connection(0x193870, 0x19f600, 0x6bc00, 0x1, 0x1000,\n0x6bf44), at 0x464e0 \n  [15] ap_run_process_connection(0x193870, 0x1935d8, 0x187598, 0x6e73c,\n0x1875b0, 0x0), at 0x42480 \n  [16] child_main(0x0, 0xffbffbc0, 0x6c124, 0x2, 0x1975b0, 0x6e778), at 0x4d930 \n  [17] make_child(0x6bc00, 0x0, 0x1, 0xffffffff, 0x6c000, 0x0), at 0x4dad8 \n  [18] startup_children(0x1, 0x6e800, 0x0, 0x6bc00, 0x6c104, 0x0), at 0x4db64 \n  [19] ap_mpm_run(0x1, 0x79fa0, 0x0, 0xffbffd20, 0x6e7a0, 0x6c10c), at 0x4e02c \n  [20] main(0x27410, 0x6bc00, 0x6aef8, 0x7ddc0, 0x6af08, 0x51000), at 0x27e90 \n\nI believe this is bug somewhere in mod_ldap or apr-util, as I can perform the\nldap query manually with OpenLDAP's ldapsearch using TLS and it works fine.\n\nThe crash happens every time LDAP auth occurs with TLS, so I can get more info\nif needed."}, {"count": 1, "tags": [], "bug_id": 41041, "attachment_id": null, "text": "Whoops, here's the back-trace from a less optimized debug build:\nt@1 (l@1) program terminated by signal SEGV (Segmentation Fault)\nCurrent function is ber_sockbuf_ctrl\n   89           assert( SOCKBUF_VALID( sb ) );\n(dbx) where                                                                  \ncurrent thread: t@1\n=>[1] ber_sockbuf_ctrl(sb = 0x9de3bfa0, opt = 3, arg = 0xfed700d4), line 89 in\n\"sockbuf.c\"\n  [2] ldap_pvt_tls_inplace(sb = 0x9de3bfa0), line 892 in \"tls.c\"\n  [3] ldap_tls_inplace(ld = 0x1b9618), line 910 in \"tls.c\"\n  [4] ldap_start_tls_s(ld = 0x1b9618, serverctrls = (nil), clientctrls = (nil)),\nline 1891 in \"tls.c\"\n  [5] option_set_tls(0xc7040, 0x1b9618, 0xc7224, 0xc72d0, 0xff2678d4, 0xc72e5),\nat 0xff2506fc \n  [6] apr_ldap_set_option(0xc7040, 0x1b9618, 0x6fff, 0xc7224, 0xffbfd788,\n0xc72d0), at 0xff2505a0 \n  [7] uldap_connection_open(0x0, 0xc7200, 0x185510, 0x50, 0x185450, 0x0), at\n0xfe2d1f48 \n  [8] uldap_cache_checkuserid(0x19f648, 0xc7200, 0x0, 0xffffffff, 0xfdc81970,\n0xfe2e9570), at 0xfe2d2fb8 \n  [9] authn_ldap_check_password(0x19f648, 0x1b3f78, 0x1b3f5f, 0x1b3f80,\n0xfe295268, 0xfe29577c), at 0xfe2814ac \n  [10] authenticate_basic_user(0x19f648, 0x10000, 0x186660, 0xfe2956d0,\n0xfe3d103c, 0xfe281240), at 0xfe3c0bd0 \n  [11] ap_run_check_user_id(0x19f648, 0x187688, 0x187688, 0x6def0, 0x1876dc,\n0x3), at 0x3686c \n  [12] ap_process_request_internal(0x0, 0x185450, 0x19f648, 0x0, 0x0, 0x2), at\n0x3728c \n  [13] ap_process_request(0x19f648, 0x6bc00, 0x4, 0xc8, 0x1, 0xffffffff), at\n0x4923c \n  [14] ap_process_http_connection(0x193870, 0x19f648, 0x6bc00, 0x1, 0x1000,\n0x6bf44), at 0x464e0 \n  [15] ap_run_process_connection(0x193870, 0x1935d8, 0x187598, 0x6e73c,\n0x1875b0, 0x0), at 0x42480 \n  [16] child_main(0x0, 0xffbffbc0, 0x6c124, 0x2, 0x1975b0, 0x6e778), at 0x4d930 \n  [17] make_child(0x6bc00, 0x0, 0x1, 0xffffffff, 0x6c000, 0x0), at 0x4dad8 \n  [18] startup_children(0x1, 0x6e800, 0x0, 0x6bc00, 0x6c104, 0x0), at 0x4db64 \n  [19] ap_mpm_run(0x1, 0x79fa0, 0x0, 0xffbffd20, 0x6e7a0, 0x6c10c), at 0x4e02c \n  [20] main(0x27410, 0x6bc00, 0x6aef8, 0x7ddc0, 0x6af08, 0x51000), at 0x27e90 \n", "id": 96190, "time": "2006-11-26T16:01:57Z", "creator": "e61559@ems.rmit.edu.au", "creation_time": "2006-11-26T16:01:57Z", "is_private": false}, {"count": 2, "tags": [], "creator": "e61559@ems.rmit.edu.au", "text": "Sort of fixed.\n\nApache was linked against both the Sun LDAP library and the OpenLDAP library.\n(D'oh!)\n\nWhen apr-util is built with --with-ldap-lib it adds the path to LDFLAGS as\n-L/path/ but does not include a flag to embed the path so the run-time linker\ncan see it.\n\nPatching the configure script to include -R/path/ (which is correct for the\nSolaris linker) fixes this problem.\n\nWorrying everything built with APR links against the LDAP libraries :(", "id": 96194, "attachment_id": null, "bug_id": 41041, "creation_time": "2006-11-26T21:35:28Z", "time": "2006-11-26T21:35:28Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 41041, "is_private": false, "text": "*** Bug 41042 has been marked as a duplicate of this bug. ***", "id": 96197, "time": "2006-11-26T21:37:20Z", "creator": "e61559@ems.rmit.edu.au", "creation_time": "2006-11-26T21:37:20Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 41041, "attachment_id": null, "is_private": false, "id": 101159, "time": "2007-03-29T06:40:47Z", "creator": "laurent@elanor.org", "creation_time": "2007-03-29T06:40:47Z", "text": "I had the same issue, it was breaking the use of TLS when using LDAP in PHP.\nActually, I found out that I had to compile with exported variables, like this:\n\nexport CPPFLAGS='-I/usr/local/openldap-2.3.32/include'\nexport LDFLAGS='-R/usr/local/openssl/lib -R/usr/local/openldap-2.3.32/lib\n-L/usr/local/openldap-2.3.32/lib'\n./configure --prefix=/usr/local/httpd-2.2.3 etc...\n\nI used to do only CPPFLAGS=xxx LDFLAGS=xxx ./configure, which worked, except the\nvariables did not reach the apr-util configure, it seems, so Apache used\nOpenLDAP, but apr-utils was linked to Solaris LDAP.\n\nAlso, a sidenote, I had to remove an /usr/local/apache2 link that pointed to the\ndirectory, because in the case, the old apr-util was used (configure does a\nsearch in a few directories), and a new one with proper links was not built."}, {"count": 5, "tags": [], "creator": "e61559@ems.rmit.edu.au", "text": "(In reply to comment #4)\n\nApache/APR should *see* the OpenLDAP libraries, but the Sun linker (/usr/ccs/ld) \nneeds the -R flag to hardcode the runtime library path. You can also get around\nthis with setting LD_LIBRARY_PATH, but I'm not a fan of relying on environment\nsettings this sort of thing.\n\n(we also have the rather nasty case where apr-0.9.2 is in /usr/local and\napr-1.2.x is in /usr/local/pkg/apr1, so we have to dodge that as well)\n\nIt was rather entertaining actually: building against OpenLDAP but linking to\nSun LDAP *did* work for non-encrypted LDAP, but blew up spectacularly in the\nother cases.", "id": 101197, "attachment_id": null, "bug_id": 41041, "creation_time": "2007-03-29T17:38:44Z", "time": "2007-03-29T17:38:44Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "alexeys@inventigo.com", "text": "Currently the task always executes. By putting it inside <jar>, <signjar> can be executed only if the archive was updated.\n\nSimple test:\n\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<project name=\"test\" default=\"all\" basedir=\".\">\n  <target name=\"all\">\n    <jar destfile=\"archive.jar\">\n      <fileset dir=\".\" includes=\"*.xml\"/>\n    </jar>\n    <signjar jar=\"archive.jar\" alias=\"mdl\" keystore=\"store.k\" storepass=\"password\"/>\n  </target>\n</project>\n\nexecute it several times and every time archive.jar modification time is changed.", "id": 57655, "time": "2004-05-19T17:33:41Z", "bug_id": 29097, "creation_time": "2004-05-19T17:33:41Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 29097, "is_private": false, "text": "The doc of the signjar saids that it only signs it\nif the jar file is unsigned,\nso it would be a bug if it did update the file.\n\nAs a work-around, one could use the signedjar attribute.\n    <signjar jar=\"archive.unsigned.jar\" alias=\"mdl\" keystore=\"store.k\" \n       storepass=\"password\" signedjar=\"archive.signed.jar\"/>\n", "id": 57657, "time": "2004-05-19T17:49:02Z", "creator": "peter.reilly@corvil.com", "creation_time": "2004-05-19T17:49:02Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 29097, "text": "Do you think the problem is with in-place signing?", "id": 57658, "time": "2004-05-19T17:52:49Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-05-19T17:52:49Z", "is_private": false, "attachment_id": null}, {"text": "With signedjar attribute <signjar> signes the jar once more time and then stops doing it. \nCan it be that in FileUtils.isUpToDate() ther should be -granularity, not +?", "tags": [], "bug_id": 29097, "is_private": false, "count": 3, "id": 57661, "time": "2004-05-19T18:20:35Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-05-19T18:20:35Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 29097, "attachment_id": null, "is_private": false, "id": 57725, "time": "2004-05-20T17:45:27Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-05-20T17:45:27Z", "text": "There are several work-arounds in ANT. So this is an enchancement request."}, {"count": 5, "tags": [], "text": "I think the real issue is that when a jar is signed the next jar task to create\nthe jar will see the manifest is different, and so the jar task will\nrecreate the jar file even though the contents is otherwise unchanged,\nnecessitaing re-signing. Nesting a signjar element would not change this.\n\nThe jar task needs to be able to figure out when the manifest has changed only\nbecause signing has occurred, then the \"lazy\" attribute of signjar would prevent\nunessary signing, but only because the jar task avoided unnecessary work.\n", "is_private": false, "id": 62953, "creator": "hanafey@dna.es.dupont.com", "time": "2004-09-02T11:38:35Z", "bug_id": 29097, "creation_time": "2004-09-02T11:38:35Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "SignJar is always executing because the alias used is lowercase, but the test \nfor whether a jar is already signed when not using the signedjar option is \nincorrect (it assumes that the alias is uppercased when composing the \nsignature entry, which it isn't at least for some JDK). Using the signedjar \noption is horrible if you have more than a handful of jar files to sign.", "is_private": false, "id": 64692, "creator": "mthornton@optrak.co.uk", "time": "2004-10-06T14:44:49Z", "bug_id": 29097, "creation_time": "2004-10-06T14:44:49Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 29097, "text": "should we be doing a case change? or a case insensitive comparison?", "id": 64693, "time": "2004-10-06T14:52:16Z", "creator": "stevel@apache.org", "creation_time": "2004-10-06T14:52:16Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "creator": "stevel@apache.org", "text": "CVS_HEAD lets you specify a destdir; you can bulk sign a set of jar files with\nthe output in a new directory, timestamps are used for dependency checking. Can\nwe close this as WONTFIX?", "id": 2177, "time": "2005-03-23T16:41:08Z", "bug_id": 29097, "creation_time": "2005-03-23T16:41:08Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "I still think it would be cleaner for <jar> to call nested <signjar> if there were\nany updates. Bulk signing will still work.", "attachment_id": null, "id": 72761, "creator": "alexeys@inventigo.com", "time": "2005-03-23T18:47:24Z", "bug_id": 29097, "creation_time": "2005-03-23T18:47:24Z", "is_private": false}, {"count": 10, "tags": [], "creator": "tony.strauss@designingpatterns.com", "attachment_id": null, "id": 123067, "time": "2008-12-03T22:32:03Z", "bug_id": 29097, "creation_time": "2008-12-03T22:32:03Z", "is_private": false, "text": "I think that there is an additional problem with signjar's dependency checking.  In particular, if the signed jar is a different file than the unsigned jar, signjar will recreate the signed jar if its modification time is the *same* as that of the unsigned jar.  This leads to the following pattern:\nBuild #1:\nBuild unsigned jar\nBuild signed jar\n\nBuild #2\nBuild signed jar (because the signed and unsigned jars created in Build #1 have the same timestamp).\n\nBuild #3\nNothing (because Build #2's signed jar has a later modification timestamp than Build #1's unsigned jar).\n\nThis bug means that using signjar's preservelastmodified attribute results in the jar always being rebuilt.\n\nI think that the correct behavior (followed by the copy task, for instance) is for signjar to rebuild if and only if the unsigned jar's modification time is later than that of the signed jar."}]
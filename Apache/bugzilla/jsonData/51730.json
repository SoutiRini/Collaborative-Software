[{"count": 0, "tags": [], "bug_id": 51730, "text": "Created attachment 27439\nSample project to reproduce the issue\n\nI have a bean which inherits an \"is\" prefixed boolean property from a package private base class. I can get the property value using <jsp:getProperty>. But if I try to get the value using expression language, I have the following exception:\n\n\nSEVERE: Servlet.service() for servlet [jsp] in context with path [/JSPBeansTest] threw exception [javax.el.ELException: java.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class user.UserBeanBase with modifiers \"public\"] with root cause\njava.lang.IllegalAccessException: Class javax.el.BeanELResolver can not access a member of class user.UserBeanBase with modifiers \"public\"\n\tat sun.reflect.Reflection.ensureMemberAccess(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat javax.el.BeanELResolver.getValue(BeanELResolver.java:87)\n\tat javax.el.CompositeELResolver.getValue(CompositeELResolver.java:67)\n\tat org.apache.el.parser.AstValue.getValue(AstValue.java:169)\n\tat org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189)\n\tat org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:985)\n\tat org.apache.jsp.index_jsp._jspService(index_jsp.java:138)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:279)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:300)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)\n\nIf the boolean property is in the base class and is prefixed with \"get\" its value is retrieved without error.", "id": 148861, "time": "2011-08-28T07:58:05Z", "creator": "irina@marudina.net", "creation_time": "2011-08-28T07:58:05Z", "is_private": false, "attachment_id": 27439}, {"count": 1, "tags": [], "bug_id": 51730, "text": "This looks like a JVM bug. You'll need to produce a simple test case (that doesn't use Tomcat) and report it to Oracle. Trying to call the isAllowedBase() method using reflection should be enough to trigger the issue.\n\nThat the problem goes away when the method is renamed from isXXX to getXXX strongly suggests a JVM bug. I have traced the differences in behaviour to sun.reflect.Reflection.getClassAccessFlags().\n\nI am afraid there is nothing we can do in Tomcat to address this.", "id": 148903, "time": "2011-08-29T18:19:06Z", "creator": "markt@apache.org", "creation_time": "2011-08-29T18:19:06Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": null, "creator": "irina@marudina.net", "text": "It seems to be an issue in the java.beans.Introspector. I have produced a simple test program and reported the bug to Oracle:\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7084904\n\nActually the reason to think it is a problem in Tomcat is because I tested with Apache Common BeanUtils and it worked fine. But it seems the reason is that they have applied a special workaround as explained here:\n\n---\nKnown Limitations\nAccessing Public Methods In A Default Access Superclass\n\nThere is an issue when invoking public methods contained in a default access superclass. Reflection locates these methods fine and correctly assigns them as public. However, an IllegalAccessException is thrown if the method is invoked.\n\nMethodUtils contains a workaround for this situation. It will attempt to call setAccessible on this method. If this call succeeds, then the method can be invoked as normal. This call will only succeed when the application has sufficient security privilages. If this call fails then a warning will be logged and the method may fail.\n---\n\nSource: \nhttp://commons.apache.org/beanutils/api/org/apache/commons/beanutils/MethodUtils.html", "id": 148928, "time": "2011-08-31T14:38:52Z", "bug_id": 51730, "creation_time": "2011-08-31T14:38:52Z", "tags": [], "is_private": false}]
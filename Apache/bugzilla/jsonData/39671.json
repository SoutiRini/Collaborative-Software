[{"count": 0, "attachment_id": null, "bug_id": 39671, "text": "I would like to dynamically modifiy a <junit> target.\nFor this i implement a buil listener.\nThe following code does not work.\n\npublic class AntListener implements BuildListener\n  {\n[...]\n\n  public AntListener()\n    {\n    }\n\n[...]\n\n  public void taskStarted(BuildEvent event)\n    {\n    Task task = (Task) event.getSource();\n    if (task instanceof UnknownElement)\n      {\n      taskStarted(((UnknownElement) task).getTask(), event);\n      }\n    }\n\n  private void taskStarted(Task task, BuildEvent event)\n    {\n    if (task instanceof JUnitTask)  >>>>>>>>>>>>>>>> I NEVER SEE THE JunitTask \n      {\n      taskStarted((JUnitTask) task, event);\n      }\n    }\n\n  private void taskStarted(JUnitTask task, BuildEvent event)\n    {\n    [...] // some processing here\n    }\n  }\n\n\nAnd i think its because in package org.apache.tools.ant.Target,\nbuilder listeners are not notified in the right place. See below:\n\n-----------------------------------------------------------------------\ncurrent code\n-------------------------------------------------------------------------\n\n    /**\n     * Performs this task if it's still valid, or gets a replacement\n     * version and performs that otherwise.\n     *\n     * Performing a task consists of firing a task started event,\n     * configuring the task, executing it, and then firing task finished\n     * event. If a runtime exception is thrown, the task finished event\n     * is still fired, but with the exception as the cause.\n     */\n    public final void perform() {\n        if (!invalid) {\n            getProject().fireTaskStarted(this);   >>>>>>>>>>>> EVENT FIRED BUT\nJUNIT TASK IS NOT BUILT\n            Throwable reason = null;\n            try {\n                maybeConfigure(); \t\t  >>>>>>>>>>>> JUNIT TASK IS BUILT HERE\n                execute();\n            } catch (BuildException ex) {\n                if (ex.getLocation() == Location.UNKNOWN_LOCATION) {\n                    ex.setLocation(getLocation());\n                }\n                reason = ex;\n                throw ex;\n            } catch (Exception ex) {\n                reason = ex;\n                BuildException be = new BuildException(ex);\n                be.setLocation(getLocation());\n                throw be;\n            } catch (Error ex) {\n                reason = ex;\n                throw ex;\n            } finally {\n                getProject().fireTaskFinished(this, reason);\n            }\n        } else {\n            UnknownElement ue = getReplacement();\n            Task task = ue.getTask();\n            task.perform();\n        }\n    }\n\n------------------------------------------------------------------------------\nBUGFIX\n------------------------------------------------------------------------------\n\n    /**\n     * Performs this task if it's still valid, or gets a replacement\n     * version and performs that otherwise.\n     *\n     * Performing a task consists of firing a task started event,\n     * configuring the task, executing it, and then firing task finished\n     * event. If a runtime exception is thrown, the task finished event\n     * is still fired, but with the exception as the cause.\n     */\n    public final void perform() {\n        if (!invalid) {\n            Throwable reason = null;\n            try {\n                maybeConfigure(); \t\t      >>>>>>>>>>>> JUNIT TASK IS BUILT HERE\n                getProject().fireTaskStarted(this);   >>>>>>>>>>>> EVENT FIRED\nBUT JUNIT TASK IS BUILT\n                execute();\n            } catch (BuildException ex) {\n                if (ex.getLocation() == Location.UNKNOWN_LOCATION) {\n                    ex.setLocation(getLocation());\n                }\n                reason = ex;\n                throw ex;\n            } catch (Exception ex) {\n                reason = ex;\n                BuildException be = new BuildException(ex);\n                be.setLocation(getLocation());\n                throw be;\n            } catch (Error ex) {\n                reason = ex;\n                throw ex;\n            } finally {\n                getProject().fireTaskFinished(this, reason);\n            }\n        } else {\n            UnknownElement ue = getReplacement();\n            Task task = ue.getTask();\n            task.perform();\n        }\n    }", "id": 89546, "time": "2006-05-28T10:03:04Z", "creator": "philippe26@wanadoo.fr", "creation_time": "2006-05-28T10:03:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 39671, "attachment_id": null, "text": "I'm reasonably happy with this change but just have a small reservation about\nbackward compatibility issues. Would it break any existing users?", "id": 90643, "time": "2006-06-27T18:02:31Z", "creator": "conor@apache.org", "creation_time": "2006-06-27T18:02:31Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 39671, "attachment_id": null, "text": "I think that the idea is interesting... but that it would break some existing\nusages.\nAn example of a scenario from (coming changes in) WebTest. WebTest makes an\nheavy use of tasks to write automated functional Web Application test suites and\ngenerate reports of the execution. In this reports, each task appears with the\nparameters it became. WebTest uses a custom PropertyHelper to be able to show\nthe real attributes the tasks have received. As a PropertyHelper doesn't receive\nany information on the task for which it expands properties (perhaps should I\nopen a new issue for this or is it to specific?), I need to guess what is the\n\"current\" task thanks to a build listener. The change proposed here would\nrequire a mofification in the logic of guessing the current task.", "id": 90737, "time": "2006-06-28T19:35:40Z", "creator": "mguillemot@yahoo.fr", "creation_time": "2006-06-28T19:35:40Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 39671, "text": "I take Marc's comment as \"this change would break backwards compatibility\".", "count": 3, "id": 120675, "time": "2008-09-16T04:42:36Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-16T04:42:36Z", "is_private": false}]
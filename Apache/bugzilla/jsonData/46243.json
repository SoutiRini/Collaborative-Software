[{"count": 0, "tags": [], "bug_id": 46243, "attachment_id": null, "text": "Using securityfilter, I misconfigured the filter to use a non-existent class for my Realm. This causes a ClassNotFoundException in securityfilter's init() method.\n\nWhen attempting to authenticate, I get this error:\n\n2008-11-19 10:26:26,111 [TP-Processor8] ERROR org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/diagnosis].[default]- Servlet.service() for servlet default threw exception\njava.lang.NullPointerException\n        at org.securityfilter.filter.SecurityFilter.doFilter(SecurityFilter.java:125)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at org.securityfilter.filter.CheckIPAddressFilter.doFilter(CheckIPAddressFilter.java:130)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at org.childhealthcare.diagnosis.servlet.BrokenLocaleFilter.doFilter(BrokenLocaleFilter.java:115)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at org.childhealthcare.diagnosis.servlet.EncodingFilter.doFilter(EncodingFilter.java:64)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:215)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174)\n        at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:200)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:773)\n        at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:703)\n        at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:895)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)\n        at java.lang.Thread.run(Thread.java:595)\n\nNow, the exception itself is legitimate: there's an uninitialized object in the filter that's being dereferenced, and an NPE is thrown.\n\nThe problem is that Tomcat should be successfully initializing the filter /before/ the doFilter method is ever called. Since init() will always fail given my configuration, the filter should never come into service, and the NPE should not be observed.\n\nSection 6.2.1 of the 2.4 servlet spec states:\n\n\"\nThe container must ensure that it has instantiated a filter of the appropriate class for each filter in the list, and called its init(FilterConfig config) method. The filter may throw an exception to indicate that it cannot function properly. If the exception is of type UnavailableException, the container may examine the isPermanent attribute of the exception and may choose to retry the filter at some later time.\n\"\n\nWhile not explicitly stated here, it seems that the call to init() should be successful (i.e. no exceptions are thrown) before the filter is put into service -- similar to the way a servlet is handled. Filters should be able to rely on objects being properly initialized in init().", "id": 122636, "time": "2008-11-19T09:20:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2008-11-19T09:20:32Z", "is_private": false}, {"count": 1, "tags": [], "text": "My preference is to make this WONTFIX. The rationale is for one of safety. Its common to have a filter perform authentication, authorization, even set up things like character sets. If one of those were to break during init, one would have an insecure application or application not working correctly. So (IMO) its better to fail safe.", "is_private": false, "id": 122638, "creator": "funkman@joedog.org", "time": "2008-11-19T09:51:37Z", "bug_id": 46243, "creation_time": "2008-11-19T09:51:37Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "I think I agree with your rationale, but not your conclusion. (Don't worry, I know about authentication safety... I'm the dev lead on securityfilter).\n\nThe filter fails to start up, but it's still used to filter requests. I'm not suggesting that the filter should simply be removed from service: I think Tomcat should attempt to successfully re-initialize the filter before using it, and refuse to process the request if a required filter cannot be initialized.\n\nI'm assuming that webapp authors expect their filters to run properly when properly configured, and to run on each and every appropriate request (I know I do). To have the filter run (i.e. has doFilter called) when the init() has failed seems like an unrealistic expectation that the filter will be able to operate properly.\n\nI would rather see the filter repeatedly fail to initialize rather than a single init failure followed by all kinds of other weird things because an inititialized filter is being used , IMO, inappropriately.", "attachment_id": null, "id": 122642, "creator": "chris@christopherschultz.net", "time": "2008-11-19T10:42:06Z", "bug_id": 46243, "creation_time": "2008-11-19T10:42:06Z", "is_private": false}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "I've done some testing and I can't reproduce this. If the init() method throws a CNFE then the context won't start. In fact, if the init() method throws any kind of exception the context won't start.\n\nAs far as I can tell, the Tomcat code is failing safely by not starting a context if the filters cannot be initialised.\n\nThe parts of SRV.6.2.1 that refer to re-trying the filter init() at some later time are all \"may\" requirements. Tomcat does not currently implement these. If you'd like to see that functionality, please raise a separate enhancement request.\n\nAs far as this bug goes, I am closing it as works for me. If you have a filter that throws an exception but still allows the context to start then please attach a test case and I'll take another look.\n\nI wrote a test case for this and will commit it shortly. It is org.apache.catalina.core.StandardContext.testBug46243()", "id": 129964, "time": "2009-08-26T11:58:19Z", "bug_id": 46243, "creation_time": "2009-08-26T11:58:19Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 46243, "text": "Boy, is /my/ face red. Hiding in SecurityFilter.init() is this nugget:\n\n      } catch (Exception e) {\n         System.err.println(\"error: \" + e);\n         e.printStackTrace();\n      }\n\nUgh. I could see the exception stack trace and was assuming that Tomcat was writing it out to stdout. Instead, the filter is ruining its own day, and should be throwing the original exception wrapped in a ServletException, getting the desired result.\n\nTomcat is operating exactly as I had expected.\n\nApologies for the spurious report. Glad it generated a test case, though :)", "id": 129968, "time": "2009-08-26T13:09:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2009-08-26T13:09:32Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Marking VERIFIED INVALID (WORKSFORME is actually being kind).", "attachment_id": null, "id": 129969, "creator": "chris@christopherschultz.net", "time": "2009-08-26T13:10:09Z", "bug_id": 46243, "creation_time": "2009-08-26T13:10:09Z", "is_private": false}]
[{"count": 0, "attachment_id": null, "bug_id": 17887, "is_private": false, "id": 32974, "time": "2003-03-11T17:44:58Z", "creator": "myebook@yahoo.com", "creation_time": "2003-03-11T17:44:58Z", "tags": [], "text": "RollingFileAppender does not work for 10 threads.\n\n1. It does not roll over\n2. It truncated the file when it should roll over, but never appends it again.\n3. It happened very often"}, {"count": 1, "tags": [], "creator": "myebook@yahoo.com", "text": "I make the file size to 2MB or 4MB. Is it a limitation for the file size?", "id": 32975, "time": "2003-03-11T17:55:29Z", "bug_id": 17887, "creation_time": "2003-03-11T17:55:29Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 33243, "time": "2003-03-15T18:43:18Z", "bug_id": 17887, "creation_time": "2003-03-15T18:43:18Z", "is_private": false, "text": "\n\nThe RollingFileAppender is designed to work in a multi-threaded setting. Would \nit be possible for you to supply a test case? Many thanks in advance."}, {"count": 3, "attachment_id": null, "bug_id": 17887, "text": "\nIn the abscense of further information, I am marking this bug report as \nWORKSFORME.", "id": 35803, "time": "2003-04-22T15:38:51Z", "creator": "ceki@apache.org", "creation_time": "2003-04-22T15:38:51Z", "tags": [], "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 17887, "is_private": false, "id": 91386, "time": "2006-07-18T13:46:50Z", "creator": "yves.debilloez@kbc.be", "creation_time": "2006-07-18T13:46:50Z", "tags": [], "text": "I also have this problem but are unable to generate a test scenario.  It occurs\nonly under heavy load after a few hours of running.\n\nCould problem be related to the code in subAppend method?  It seems to be\nrelated to the null-pointer exceptions issues in the subAppend method.\n\nIf one thread rolls over, the fileName might temporarily be reset to null.  A\nsecond thread will write using a null filename.\n\nI added a test in subAppend before calling the super method.  It resolves my\ncase but it is not a full solution because there is still some theoretical problem.\n\n  protected\n  void subAppend(LoggingEvent event) {\n    if(fileName != null) \n      super.subAppend(event);\n    if((fileName != null) &&\n                     ((CountingQuietWriter) qw).getCount() >= maxFileSize)\n      this.rollOver();\n   }"}, {"count": 5, "tags": [], "bug_id": 17887, "attachment_id": null, "text": "From an initial reading of the bug report this might be that two threads contend for rolling over the files (i.e. the triggering happens in two threads so the operations get mixed).\n\nPerhaps a synchronized block around the renaming-bit could help?\n\nSuggestions?\n\n", "id": 118165, "time": "2008-07-01T15:29:58Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-07-01T15:29:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 17887, "attachment_id": null, "text": "May be the reason :\n\nThe SocketServer TCP/IP server is designed to manage 10 (or 11 ?) maximum threads .\nSee org.apache.log4j.net.SocketServer.java constructor :\n\npublic\n  SocketServer(File directory) {\n    this.dir = directory;\n    hierarchyMap = new Hashtable(11);\n  }\nThere must be some mixing or hidden bugs between the clients if exceeding 10 clients.\n\nThanks for your feedback if this is the right reason.\n\nSee http://d.cr.free.fr/wswebconsulterfichiers.php?projet=demojava_log4j for (many..) extra bugs in log4j", "id": 120270, "time": "2008-09-02T02:30:25Z", "creator": "qualitychecker@free.fr", "creation_time": "2008-09-02T02:30:25Z", "is_private": false}, {"count": 7, "tags": [], "creator": "qualitychecker@free.fr", "text": "(In reply to comment #6)\n> May be the reason :\n> The SocketServer TCP/IP server is designed to manage 10 (or 11 ?) maximum\n> threads .\n> See org.apache.log4j.net.SocketServer.java constructor :\n> public\n>   SocketServer(File directory) {\n>     this.dir = directory;\n>     hierarchyMap = new Hashtable(11);\n>   }\n> There must be some mixing or hidden bugs between the clients if exceeding 10\n> clients.\n> Thanks for your feedback if this is the right reason.\n> See http://d.cr.free.fr/wswebconsulterfichiers.php?projet=demojava_log4j for\n> (many..) extra bugs in log4j\n\n11 is the initial allocation size for hierarchMap, of course, which is the default anyway. May be a lack of memory + unmanaged allocation error ?", "id": 120275, "time": "2008-09-02T03:17:35Z", "bug_id": 17887, "creation_time": "2008-09-02T03:17:35Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 17887, "is_private": false, "id": 120284, "time": "2008-09-02T05:51:10Z", "creator": "thorbjoern@gmail.com", "creation_time": "2008-09-02T05:51:10Z", "tags": [], "text": "(In reply to comment #7)\n\n> >   SocketServer(File directory) {\n> >     this.dir = directory;\n> >     hierarchyMap = new Hashtable(11);\n> >   }\n> > There must be some mixing or hidden bugs between the clients if exceeding 10\n> > clients.\n> > Thanks for your feedback if this is the right reason.\n> > See http://d.cr.free.fr/wswebconsulterfichiers.php?projet=demojava_log4j for\n> > (many..) extra bugs in log4j\n> \n> 11 is the initial allocation size for hierarchMap, of course, which is the\n> default anyway. May be a lack of memory + unmanaged allocation error ?\n\nIt is unusual to provide the initialCapacity to the HashTable constructor (especially for such a low value) but not illegal.\n\nhttp://java.sun.com/javase/6/docs/api/java/util/Hashtable.html#Hashtable(int)\n\nCould you please elaborate on why your tool thinks these two cases are related?\n"}]
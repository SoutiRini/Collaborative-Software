[{"count": 0, "tags": [], "bug_id": 55643, "attachment_id": null, "id": 170517, "time": "2013-10-09T19:46:44Z", "creator": "utoddl@email.unc.edu", "creation_time": "2013-10-09T19:46:44Z", "is_private": false, "text": "Under some circumstances, CGI output will be truncated. The bug is in server/core_filters.c, around line 542 in the function ap_core_output_filter(). No, really!\n\nThe call to send_brigade_blocking() is expected to return APR_SUCCESS, otherwise the connection to the browser is assumed abandoned. However, send_brigade_blocking() calls apr_poll(), which calls the system poll(). Under extremely hard to reproduce on demand circumstances, the poll() call is interrupted by the SIGCHLD signal from the exiting CGI script, setting errno to EINTR ('4' on Linux). This value propagates up through apr_poll() and send_brigade_blocking() into ap_core_output_filter()'s \"rv\", where the rest of the output is abandoned, like so:\n\n        rv = send_brigade_blocking(net->client_socket, bb,\n                                   &(ctx->bytes_written), c);\n        if (rv != APR_SUCCESS) {\n            /* The client has aborted the connection */\n            c->aborted = 1;\n            return rv;\n        }\n\nI'll defer to the httpd devs whether this EINTR should be handled at this level or further down in the stack.\n\nAs difficult as this bug is to trigger on purpose, it started showing up consistently after we upgraded our www cluster (4 RHEL servers) to httpd-2.4.6 in early September 2013, regular enough that we were able to start debugging on our production hosts. However, it is extremely sensitive to load, network latency, etc., as you have to get the SIGCHLD signal from the CGI process to come in during the poll() -- not a very big target window on modern machines and networks.\n\nSearches turned up dozens of reports over the years that could well be this bug. In most cases people fiddled with things until the problem went into hiding, at which point (not surprisingly) they quit working on it. We were lucky enough that it just wouldn't go away on our systems."}, {"count": 1, "tags": [], "bug_id": 55643, "attachment_id": null, "text": "EINTR should be handled at the point of the poll...  (On Unix, some callers have the opportunity to handle EINTR differently when apr_poll() is interrupted.)  Did you try something like this?\n\nIndex: server/core_filters.c\n===================================================================\n--- server/core_filters.c\t(revision 1530310)\n+++ server/core_filters.c\t(working copy)\n@@ -745,7 +745,9 @@\n                 pollset.reqevents = APR_POLLOUT;\n                 pollset.desc.s = s;\n                 apr_socket_timeout_get(s, &timeout);\n-                rv = apr_poll(&pollset, 1, &nsds, timeout);\n+                do {\n+                    rv = apr_poll(&pollset, 1, &nsds, timeout);\n+                } while (APR_STATUS_IS_EINTR(rv));\n                 if (rv != APR_SUCCESS) {\n                     break;\n                 }", "id": 170518, "time": "2013-10-09T20:03:38Z", "creator": "trawick@apache.org", "creation_time": "2013-10-09T20:03:38Z", "is_private": false}, {"count": 2, "tags": [], "text": "(In reply to Jeff Trawick from comment #1)\n\nThat does indeed seem to fix the problem. Before, strace clearly showed\n\npoll([{fd=17, events=POLLOUT}], 1, 200000) = -1 EINTR (Interrupted system call)\n\nand the rest of the writev()s never happened. Now I'm seeing\n\npoll([{fd=17, events=POLLOUT}], 1, 200000) = -1 EINTR (Interrupted system call)\n--- SIGCHLD (Child exited) @ 0 (0) ---\npoll([{fd=17, events=POLLOUT}], 1, 200000) = 1 ([{fd=17, revents=POLLOUT}])\n\nfollowed by more writev()s.\n\nThanks very much.", "is_private": false, "bug_id": 55643, "id": 170522, "time": "2013-10-09T20:46:11Z", "creator": "utoddl@email.unc.edu", "creation_time": "2013-10-09T20:46:11Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Thanks for the quick feedback...  The same change is committed to trunk as r1530793.  I'll propose backporting the fix to the 2.4.x branch after I test a little more (though this is about as simple as it gets).", "is_private": false, "id": 170523, "creation_time": "2013-10-09T21:11:23Z", "time": "2013-10-09T21:11:23Z", "creator": "trawick@apache.org", "bug_id": 55643, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 55643, "text": "This is now in the 2.4.x branch (r1530999) for the next 2.4 release.", "id": 170540, "time": "2013-10-10T14:47:58Z", "creator": "trawick@apache.org", "creation_time": "2013-10-10T14:47:58Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Tomcat currently allows overriding the Server attribute, but does not allow removing the Server header completely. It would be valuable from a security perspective to be able to remove the header completely. \n\nOne might argue this provides little value (it is security through obscurity). In my opinion there is a big difference on relying on obscurity and preventing information leakage. If your security depends on obscurity (i.e. that is the only security measure you take), then I think we can agree this is bad.\n\nMost agree that security is best in depth. To me this means preventing information leakage (removing the header) does provide value.\n\nUsers could set the Tomcat header to something non nonsensical, but this gives information away too. Most servers provide a way to disable the header completely, so this reveals that the user is likely using an application server that does not support it.\n\nReferences:\n\nhttps://www.owasp.org/index.php/Information_Leakage\nhttp://www.acunetix.com/blog/articles/configure-web-server-disclose-identity/\nhttps://github.com/spring-projects/spring-boot/issues/4730 (see comments)", "attachment_id": null, "id": 187011, "creator": "rwinch@gmail.com", "time": "2015-12-17T17:23:06Z", "bug_id": 58750, "creation_time": "2015-12-17T17:23:06Z", "is_private": false}, {"count": 1, "text": "Indeed, this provides absolutely no value :)", "creator": "remm@apache.org", "is_private": false, "id": 187012, "time": "2015-12-17T17:28:19Z", "bug_id": 58750, "creation_time": "2015-12-17T17:28:19Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58750, "text": "I don't see any significant information leakage here, even if the exact Tomcat version is provided.\n\nAssume you have a Tomcat instance running 8.0.30 (no known vulnerabilities as I type this). How does it make that instance less secure (easier to attack) if the attacker knows that it is a Tomcat 8.0.30 instance vs. now knowing what server it is?\n\nThe best answer I can come up with is that the attacker doesn't have to waste time trying out known vulnerabilities for other servers or earlier Tomcat versions but that doesn't make the Tomcat instance any easier to attack. It might mean that the attacker gets spotted and blocked while they test various known vulnerabilities but internet facing servers get hit with so many scans that unless an attacker generates so many requests it starts to have a DoS effect the scans are simply ignored. Automating blocking is only used for the worst offenders because NAT and proxies means blocking every 'attack' shuts out large numbers of legitimate users which is actually much worse than just ignoring the scan.\n\nIt is also worth noting that because many system admins fake the server header, most attackers try scanning for all known vulnerabilities anyway.\n\nNow consider a Tomcat instance running 8.0.0 vulnerable to CVE-2014-0050 (DoS). Hiding the server header doesn't make the Tomcat instance any less vulnerable to the DoS. It may take an attacker slightly longer to find vulnerability, but - given my comments above - they are going to find it anyway.\n\nIn short, hiding the server header is a waste of time (even for instances running insecure versions) that would be better spend upgrading insecure instances to secure versions.\n\nI'd be more than happy to reconsider my position and implement this feature if a valid case is made for how hiding the server header increases the actual security of an instance.", "id": 187013, "time": "2015-12-17T19:50:53Z", "creator": "markt@apache.org", "creation_time": "2015-12-17T19:50:53Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58750, "attachment_id": null, "text": "Thank you for the responses.\n\n> It is also worth noting that because many system admins fake the server header, most attackers try scanning for all known vulnerabilities anyway.\n\nSome hackers may target specific applications. If that is the approach they are taking, they are likely to try all exploits against the victim. As already mentioned, exposing information will likely help them prioritize the exploits to find something more quickly which will increase the likely hood that they go undetected.\n\nHackers don't always target a specific victim. Another method of attack is to have a known set of vulnerabilities and actively searching for victims. Exposing any unnecessary information makes it easier for the attacker to find victims in an automated way.\n\n\n\n> In short, hiding the server header is a waste of time (even for instances \n> running insecure versions) that would be better spend upgrading insecure \n> instances to secure versions.\n\nThis isn't always possible. For example, there may be a 0-day exploit that has no patched version or was just released & users have not had the opportunity to update. Hackers are going to easily be able to find victims if the Server header is exposed.\n\n\n\n> Indeed, this provides absolutely no value :)\n\n> In short, hiding the server header is a waste of time (even for instances\n> running insecure versions) that would be better spend upgrading insecure\n> instances to secure versions.\n\nThese seem like pretty bold claims. I'd be very interested in seeing some citations.\n\nI can provide countless credible citations that recommend removing the Server header. I have provided a few additional examples below.\n\n= OWASP\n\nI provided this citation on the original report. However, since OWASP is such an important part of web application security, I felt like this should be emphasized.\n\nOWASP states that \"Information Leakage\" is a class of vulnerability [1]. It is described as:\n\n    Revealing system data or debugging information helps an adversary learn\n    about the system and form a plan of attack. An information leak occurs\n    when system data or debugging information leaves the program through an\n    output stream or logging function.\n\nFrom my perspective, the Server header is revealing unnecessary information. This means it fits the OWASP description of \"Information Leakage\" and should be removed.\n\n= Troy Hunt (Microsoft MVP for Developer Security, etc)\n\nI an excellent article by Troy Hunt (Microsoft MVP for Developer Security, etc) on why you should remove unnecessary HTTP headers from the response [2]. Some highlights of the article include:\n\n* Why removing headers is not \"security through obscurity\"\n* A concrete example of how exposing headers can help find victims of 0-day exploits\n* Additional citations on why headers that leak information should be removed\n\n= RFC-2616 \"15.1.2 Transfer of Sensitive Information\"\n\nThe IETF recommends that server implementations SHOULD make the Server header a configurable option [3].\n\n   Revealing the specific software version of the server might allow the\n   server machine to become more vulnerable to attacks against software\n   that is known to contain security holes. Implementors SHOULD make the\n   Server header field a configurable option.\n\n\n\n\n[1] https://www.owasp.org/index.php/Information_Leakage\n[2] http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html\n[3] http://www.rfc-base.org/txt/rfc-2616.txt\n\nRegards,\nRob Winch", "id": 187016, "time": "2015-12-17T21:52:14Z", "creator": "rwinch@gmail.com", "creation_time": "2015-12-17T21:52:14Z", "is_private": false}, {"count": 4, "tags": [], "text": "1. The place to patch is \norg.apache.coyote.http11.Http11Processor.prepareResponse()\n\nIf this feature is enabled, then it means that\n1) if none Server header is set by a web application, we should skip adding the default one\n2) if a Server header was set by a web application, we should remove it\n\n2. A possible value to trigger this feature could be setting an empty string,\nbut that value is already used as a synonym for no value (null),\nby Http11Processor.setServer() setter method.\n\n\n3. For reference, the Server header is defined for HTTP/1.1 by RFC 7231 ch.7.4.2.\n\nhttps://tools.ietf.org/html/rfc7231#section-7.4.2\n\nA server \"MAY\" generate it. There is no obligation to actually generate it. Skipping the Server header saves several bytes of bandwidth.", "is_private": false, "id": 187021, "creator": "knst.kolinko@gmail.com", "time": "2015-12-18T03:05:55Z", "bug_id": 58750, "creation_time": "2015-12-18T03:05:55Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "I'm trying to create a patch for this but I don't seem to be able to build 8.0.x from trunk.\n\nRunning `ant test` gives me:\n\ntest-bio:\n\nBUILD FAILED\n/Users/pwebb/projects/tomcat/trunk/build.xml:1374: The following error occurred while executing this line:\n/Users/pwebb/projects/tomcat/trunk/build.xml:1431: junit doesn't support the \"threads\" attribute\n\n\nAny ideas?", "attachment_id": null, "id": 187029, "creator": "pwebb@pivotal.io", "time": "2015-12-18T09:56:10Z", "bug_id": 58750, "creation_time": "2015-12-18T09:56:10Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58750, "text": "Read BUILDING.txt for details on the minimum Ant version required.", "id": 187030, "time": "2015-12-18T09:59:55Z", "creator": "markt@apache.org", "creation_time": "2015-12-18T09:59:55Z", "is_private": false, "attachment_id": null}, {"count": 7, "text": "Thanks! Sorry, I should have checked that.", "creator": "pwebb@pivotal.io", "is_private": false, "id": 187031, "time": "2015-12-18T10:00:53Z", "bug_id": 58750, "creation_time": "2015-12-18T10:00:53Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58750, "text": "\"2) if a Server header was set by a web application, we should remove it\": I see no reason to do that.", "count": 8, "id": 187032, "time": "2015-12-18T10:06:01Z", "creator": "remm@apache.org", "creation_time": "2015-12-18T10:06:01Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 58750, "text": "I remain unconvinced that there are any real world security benefits to be gained by removing the security header.\n\nThe bandwidth argument carries slightly more weight but we are only talking 27 bytes per response and most responses will dwarf that by at least several orders of magnitude. Add HTTP/2 to the mix and those 27 bytes will quickly shrink.\n\nIf we do anything at all, I am leaning towards completely removing all Server header processing (all ~15 lines of code of it) and let applications add it if they wish. Users wanting to provide useful server version information via configuration can enable the X-Powered-By header.", "count": 9, "id": 187033, "time": "2015-12-18T10:15:53Z", "creator": "markt@apache.org", "creation_time": "2015-12-18T10:15:53Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 58750, "text": "Thanks! Sorry, I should have checked that.", "id": 187035, "time": "2015-12-18T10:55:13Z", "creator": "pwebb@pivotal.io", "creation_time": "2015-12-18T10:55:13Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "text": "Removing all server header processing code will break back compatibility. Specifically, this recently added Spring Boot feature [1] will stop working since it relies on the `server` attribute being picked up.\n\n[1] https://github.com/spring-projects/spring-boot/issues/4461", "attachment_id": null, "id": 187036, "creator": "pwebb@pivotal.io", "time": "2015-12-18T11:04:15Z", "bug_id": 58750, "creation_time": "2015-12-18T11:04:15Z", "is_private": false}, {"count": 12, "tags": [], "text": "For more information about what's driving this request see https://github.com/spring-projects/spring-boot/issues/4730. We've specifically looking for feature parity across all embedded servlet containers that we support (Tomcat, Jetty, Undertow).\n\nI think the least invasive option is to add a flag to disable the server header. This would be similar to Jetty's `HttpConfiguration.setSendServerVersion`, not effect any existing users and provide a quick way to opt-out of the header.", "attachment_id": null, "id": 187037, "creator": "pwebb@pivotal.io", "time": "2015-12-18T11:08:53Z", "bug_id": 58750, "creation_time": "2015-12-18T11:08:53Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 58750, "attachment_id": 33364, "id": 187038, "time": "2015-12-18T11:10:08Z", "creator": "pwebb@pivotal.io", "creation_time": "2015-12-18T11:10:08Z", "is_private": false, "text": "Created attachment 33364\nSuggested patch\n\nSomething like this. (not including tests yet as not sure where to add them)"}, {"count": 14, "tags": [], "bug_id": 58750, "attachment_id": null, "is_private": false, "id": 187043, "time": "2015-12-18T16:29:25Z", "creator": "pwebb@pivotal.io", "creation_time": "2015-12-18T16:29:25Z", "text": "I've been mulling this issue over a little bit more and I think that the arguments about whether removing the header offers any real world security or bandwidth benefits are a bit of a red herring. There's clearly some difference of opinion here, but regardless of why you'd want to remove the header, it still stands that it's currently not possible.\n\nIf we put the argument of why to one side, and just focus on answering the question \"How do I remove the server header?\", what are the options? Is the suggested patch a sensible approach? Is there some other way to do it (a custom Http11Protocol implementation? some way to post-process headers?).\n\nI'm happy to try and rework the patch as required, or try to find a less invasive way to solve the problem. My ultimate goal is to just prove the request Spring Boot feature without needing to add a \"but not on Tomcat\" caveat."}, {"count": 15, "tags": [], "bug_id": 58750, "text": "Ignoring the reasoning isn't a red herring. It is part of deciding what the best solution is. \"Because someone wants it\" is not, on its own, sufficient justification.\n\nThe patch looks like a good start if we wanted to go that way. It needs some docs.\n\nHowever, I'm still leaning towards removing all server header handling from Tomcat. That gives users - including boot - maximum flexibility. They can add/remove the header as desired via the Servlet API. We can remove the server option completely in 9.0.x. In 8.0.x and earlier I think we'd need to set the header if the option is set to retain backwards compatibility. Essentially that changes Tomcat's default behaviour from sending the header to not sending it.\n\nIn the (unlikely) case of an app setting the header that the system administrator wants to remove, the sys admin would need to add a filter that removed the header.", "id": 187044, "time": "2015-12-18T17:41:33Z", "creator": "markt@apache.org", "creation_time": "2015-12-18T17:41:33Z", "is_private": false, "attachment_id": null}, {"count": 16, "text": "(In reply to Mark Thomas from comment #9)\n> I remain unconvinced that there are any real world security benefits to be\n> gained by removing the security header.\n\nAgreed.\n\n> The bandwidth argument carries slightly more weight but we are only talking\n> 27 bytes per response and most responses will dwarf that by at least several\n> orders of magnitude. Add HTTP/2 to the mix and those 27 bytes will quickly\n> shrink.\n\nWhile the bytes shrink, the CPU still gets wasted to shrink them.\n\nAn even better argument *for* a configurable parameter might be HTTP spec. Section 15.1.2 of RFC 2616 pretty much says flat-out that servers SHOULD make the Server header a configurable option. But, RFC 7231 says nothing similar so I'd call it a draw from a spec perspective.", "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 187091, "time": "2015-12-22T23:40:35Z", "bug_id": 58750, "creation_time": "2015-12-22T23:40:35Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "creator": "greg.l.turnquist@gmail.com", "attachment_id": null, "text": "I tend to lean towards security experts (like OWASP) that indicate it's preferable to reduce information leakage, rather than simply asserting there is no real world risk here.\n\nThe rest of the industry has headed towards reducing information leakage (see Jetty, Undertow, etc.) While \"everyone else is doing it\" isn't an argument, observing an industry migration that is backed up by cited security experts IS an argument in favor of such a change.\n\nOn a personal note, it's interesting that we're not concerned about 27 bytes because it's nothing, but some ARE concerned about the cycles spent to generate those 27 bytes. I don't think resource consumption is the focal point of this request, being premature optimization. I would favor upholding RFCs behind servlets as well as HTTP headers alongside industry-driven security recommendations, and save optimization only for AFTER that has been met.", "id": 187287, "time": "2015-12-31T17:36:37Z", "bug_id": 58750, "creation_time": "2015-12-31T17:36:37Z", "is_private": false}, {"count": 18, "tags": [], "text": "I usually just modify server.* org/apache/catalina/util/ServerInfo.properties and rebuild catalina.jar.\nNot exactly ideal, but fairly trivial for me at least to mask the info.", "attachment_id": null, "id": 189244, "creator": "it-operations@handll.com", "time": "2016-03-07T23:28:32Z", "bug_id": 58750, "creation_time": "2016-03-07T23:28:32Z", "is_private": false}, {"count": 19, "tags": [], "bug_id": 58750, "attachment_id": null, "text": "Sorry, i don't REBUILD the jar, i just leave org/apache/catalina/util/ServerInfo.properties there after modded as suggested in the Valves section of https://tomcat.apache.org/tomcat-8.0-doc/security-howto.html", "id": 189245, "time": "2016-03-07T23:35:20Z", "creator": "it-operations@handll.com", "creation_time": "2016-03-07T23:35:20Z", "is_private": false}, {"count": 20, "tags": [], "bug_id": 58750, "attachment_id": null, "text": "FWIW we're still getting quite a bit of interest in this on the Spring Boot issue tracker. It seems like a fair number would like the ability to not send the header.", "id": 190050, "time": "2016-04-07T17:57:21Z", "creator": "pwebb@pivotal.io", "creation_time": "2016-04-07T17:57:21Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 58750, "attachment_id": null, "id": 191201, "time": "2016-05-23T19:57:59Z", "creator": "markt@apache.org", "creation_time": "2016-05-23T19:57:59Z", "is_private": false, "text": "Tomcat 9.0.x and 8.5.x no longer set the Server header by default.\nSetting the server attribute on a Connector still replaces any value specified by the web application.\nA new attribute serverRemoveAppProvidedValues allows any application specified value to be removed.\n\nThis change will be included in:\n- 9.0.0.M7 onwards\n- 8.5.3 onwards"}]
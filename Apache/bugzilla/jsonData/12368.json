[{"count": 0, "tags": [], "text": "Convenient task to call a set of ordered or not sub-builds using the regular \n<ant> target. The same can currently be achieve with Ant-contrib's <foreach> \ntask, in conjunction with <ant>, but <subant> streamlines that, offering \nautomatic target name passing (based on the name of the target containing \n<subant>), and avoiding the expense of the <antcall> of <foreach>.\n\n<subant> takes traditional <ant> attributes and sub-elements (inheritAll, \netc...), and a build path (a regular Path) which can be defined either as sub-\nelements (<subant> contains an implicit path, so \n<fileset>/<dirset>/<filelist>/<buildpathelement> can appear directly inside \n<subant>) or thru attributes (by reference or as a string), similarly to \n<java>/<javac>.\n\nExample usage:\n  <target name=\"init\" depends=\"-buildmagic\">\n    <path id=\"buildpath\">\n      <pathelement location=\"core\" />\n      <pathelement location=\"optional\" />\n    </path>\n  </target>\n\n  <target name=\"clean\" depends=\"init\">\n    <subant buildpathref=\"buildpath\" />\n  </target>\n\n  <target name=\"build\" depends=\"init\">\n    <subant buildpathref=\"buildpath\" />\n  </target>\n\n@todo: Allow a <style> sub-element to apply a stylesheet to be applied to the \nbuild files precursor automatically, if out of date, to support the use case of \nMyrmidon.\n\n@toto: Add a fork=\"true\" attribute that would allow to avoid memory problems by \nrepeated usage <ant>. Would likely retrict passage of references to sub-builds.\n\n@todo: Make use of some dependency information between the project (like in the \nGump descriptors) to infer the proper order the sub-builds should be called, \ninstead of relying of explicit order of the buildpath.\n\n@todo: Some tests ;-) I do have some tests (build.xml driven), but one has to \nlook at them to make sure they've run correctly, so not read unit tests.\n\nI hope someones finds this useful. --DD", "is_private": false, "id": 22371, "creator": "ddevienne@lgc.com", "time": "2002-09-06T16:27:09Z", "bug_id": 12368, "creation_time": "2002-09-06T16:27:09Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "Created attachment 2958\nThe SubAnt.java source for <subant>", "is_private": false, "id": 22372, "creator": "ddevienne@lgc.com", "time": "2002-09-06T16:28:11Z", "bug_id": 12368, "creation_time": "2002-09-06T16:28:11Z", "attachment_id": 2958}, {"count": 2, "tags": [], "bug_id": 12368, "text": "Created attachment 2959\nThe pseudo unit test driver for <subant>", "id": 22373, "time": "2002-09-06T16:29:10Z", "creator": "ddevienne@lgc.com", "creation_time": "2002-09-06T16:29:10Z", "is_private": false, "attachment_id": 2959}, {"count": 3, "tags": [], "text": "Created attachment 2960\nThe pseudo unit test child build file for <subant>", "attachment_id": 2960, "id": 22374, "creator": "ddevienne@lgc.com", "time": "2002-09-06T16:29:44Z", "bug_id": 12368, "creation_time": "2002-09-06T16:29:44Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 2961\nThe Myrmidon main build file modified to use <subant>. Faster and simpler.", "is_private": false, "id": 22375, "creator": "ddevienne@lgc.com", "time": "2002-09-06T16:52:17Z", "bug_id": 12368, "creation_time": "2002-09-06T16:52:17Z", "attachment_id": 2961}, {"attachment_id": null, "tags": [], "creator": "stevel@apache.org", "is_private": false, "count": 5, "id": 22380, "time": "2002-09-06T17:43:08Z", "bug_id": 12368, "creation_time": "2002-09-06T17:43:08Z", "text": "I like this. I know blind building is considered bad form, but axis's test model\n(one sub project per test suite) works with this. \n\nOne thing I'd like is if the task doesnt replicate the mistakes of <ant>\n- target=\"\" should run the default, not target \"\"\n- have some way of listing multiple targets to call. \n- defaults to noinheritance of everything\n\nWhat say you?"}, {"count": 6, "tags": [], "text": "Cool :-)\n\nI need this to run the targets for a specific project in the Gump descriptors\nbut with the dependencies too; I was going to resort to for-each, but this is\nreally cooler :-)\n\nSo what I can make another target do is to call Gump magic and return a list of\nthe dependencies.\n\n\"\n@todo: Make use of some dependency information between the project (like in the \nGump descriptors) to infer the proper order the sub-builds should be called, \ninstead of relying of explicit order of the buildpath.\n\"\n\nThe projects could have a descriptor that binds them externally with\ndependencies IMHO, and the Gump descriptor can be used for this.\n\nDo you have any other real-life use case I can think on about buildfile\ndependencies?", "is_private": false, "id": 22382, "creator": "nicolaken@apache.org", "time": "2002-09-06T18:05:26Z", "bug_id": 12368, "creation_time": "2002-09-06T18:05:26Z", "attachment_id": null}, {"count": 7, "tags": [], "text": "Steve, these are the defaults of the <subant> task, so stuff's not inherited by \ndefault. As far as not replicating <ant>'s mistake... All I'm doing is \ninternally creating an <ant> task, so I'm limited by it. My knowledge of Ant's \ncode, and the time I'm willing to invest on this, prevents me from removing \nthese mistakes. \n\n    private String target = null;\n    private String antfile = \"build.xml\";\n    private boolean inheritAll = false;\n    private boolean inheritRefs = false;\n    private boolean failOnError = true;\n\nI forgot to mention that directories in the build path get appended with the \ndefault ant file name, and that actual files are assumed to be Ant build files.\n\nRegarding Nicola Ken's post, I'm not too sure how to make the connection with \nthe Gump decriptors, because sub-ant deals with local build file, whereas the \nGump descriptors describe a project generically, and one would need the \nworkspace definition to know which projects are there, etc... I was thinking I \ncould have a 'depends' attribute on the <project> root element of build files, \nand pre-read all the build files passed to me (getting there names, and local \nproject dependencies), and infer the build order from that. In my mind, \n<subant> is for projects which belong together (like in the same CVS module), \nwhereas Gump deals with disconnected projects building on each other. The \ndistinction is fine, but the former could be found relative to each other \n(usually just ../dependency, like in Myrmidon or my own stuff), whereas the \nlatter are more disconnected code bases. Thanks my current thinking at least.\n\n<subant> scratch my itch, and right now I don't need more functionality that \nI've got ;-) --DD\n", "is_private": false, "id": 22383, "creator": "ddevienne@lgc.com", "time": "2002-09-06T18:57:46Z", "bug_id": 12368, "creation_time": "2002-09-06T18:57:46Z", "attachment_id": null}, {"count": 8, "tags": [], "text": "This works really well. Great Job!\n\nMy main Ant script ensures everything is in place before calling <subant> to \nbuild lots of options, so dependencies aren't important for me. Some \nparallelization might be nice though!\n", "attachment_id": null, "id": 28504, "creator": "barry.sheward@hypernoc.com", "time": "2002-12-27T23:50:09Z", "bug_id": 12368, "creation_time": "2002-12-27T23:50:09Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 12368, "attachment_id": null, "id": 32768, "time": "2003-03-10T06:29:29Z", "creator": "stevel@apache.org", "creation_time": "2003-03-10T06:29:29Z", "is_private": false, "text": "*** Bug 5270 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "bug_id": 12368, "attachment_id": null, "id": 32771, "time": "2003-03-10T06:38:11Z", "creator": "stevel@apache.org", "creation_time": "2003-03-10T06:38:11Z", "is_private": false, "text": "*** Bug 15811 has been marked as a duplicate of this bug. ***"}, {"count": 11, "attachment_id": null, "bug_id": 12368, "text": "*** Bug 10962 has been marked as a duplicate of this bug. ***", "id": 32779, "time": "2003-03-10T07:44:22Z", "creator": "stevel@apache.org", "creation_time": "2003-03-10T07:44:22Z", "tags": [], "is_private": false}, {"count": 12, "tags": [], "creator": "bodewig@apache.org", "is_private": false, "text": "Steve has committed subant IIUC.", "id": 33196, "time": "2003-03-14T15:22:14Z", "bug_id": 12368, "creation_time": "2003-03-14T15:22:14Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 12368, "attachment_id": 5383, "id": 33305, "creation_time": "2003-03-17T18:01:42Z", "time": "2003-03-17T18:01:42Z", "creator": "ddevienne@lgc.com", "text": "Created attachment 5383\nLatest version of <subant> task with dynamic <buildpath> resolution", "is_private": false}, {"count": 14, "tags": [], "text": "\"\nRegarding Nicola Ken's post, I'm not too sure how to make the connection with \nthe Gump decriptors, because sub-ant deals with local build file, whereas the \nGump descriptors describe a project generically, and one would need the \nworkspace definition to know which projects are there, etc... \n\"\n\nMy use case is that used by Centiepede, where the Gump descriptor is used only\nwith the local CVS module dependencies as you use subant for, and downloads the\njars of dependencies out of the module.\n\nI've looked at the code, and it's quite easy to change the Tahoe*.java classes\nto use the Gump descriptor format, and this would fit my needs perfectly (I will\nadd dependencies to the classpath in another way).\n\nSo yes, I think that all this extra stuff you added now make perfect sense, and\nI think it's a nice addition to Ant. :-)", "is_private": false, "id": 33314, "creator": "nicolaken@apache.org", "time": "2003-03-17T23:05:56Z", "bug_id": 12368, "creation_time": "2003-03-17T23:05:56Z", "attachment_id": null}, {"id": 35642, "tags": [], "creator": "nd@perlig.de", "attachment_id": null, "count": 15, "text": "*** Bug 13027 has been marked as a duplicate of this bug. ***", "time": "2003-04-19T22:15:21Z", "bug_id": 12368, "creation_time": "2003-04-19T22:15:21Z", "is_private": false}]
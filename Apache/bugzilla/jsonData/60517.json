[{"count": 0, "tags": [], "bug_id": 60517, "is_private": false, "text": "Created attachment 34554\ntest file\n\nSummary:\n\nIn my Excel research project from EUSES data base, I found that HSSF in POI 3.15 final release didn't parse multiple sheet formula correctly.\n\nDetails:\n\nWhen the multiple sheet name quoted by single quote, HSSF put single quote between every sheet name. (See at sheet: Summary in cell: D17 of formula: SUM('1003':'1856'!D28))\n\nFor example,\n\nFormula: = SUM('1003:1856'!D28)\n\nHere the sheet name are 1003 and 1856. When HSSF parse string, it shows:\n\nSUM('1003':'1856'!D28)\n\nI should expect the formula string should be :\n\nSUM('1003:1856'!D28)\n\nIf I convert XLS into XLSX file, the new XSSF parse it correctly as SUM('1003:1856'!D28)", "id": 195654, "time": "2016-12-25T16:10:33Z", "creator": "zhangchaowang@gmail.com", "creation_time": "2016-12-25T16:10:33Z", "attachment_id": 34554}, {"count": 1, "tags": [], "bug_id": 60517, "text": "Could you include a code snippet of what you're doing, including any manipulations you are doing to the stored formula string and how you're getting the formula string.\n\nFWIW, when I open your attached XLS file in LibreOffice, the following formula appears in D17:\n=SUM($'1003'.D28:$'1856'.D28)\n\nWhen I use LibreOffice to save the file as XLSX, I get:\n=SUM('1003':$'1856'.D28:D28)\n\nAnd after converting to XLSX, the value saved in sheet1.xml is:\n<c r=\"D17\" s=\"19\" t=\"n\">\n<f aca=\"false\">\nSUM(&apos;1003&apos;:&apos;1856&apos;!D28:D28)</f>\n<v>\n102320067</v>\n</c>\n\nIt may be possible that both versions are correct.\nFor example, 'Sheet1'!A1 and Sheet1!A1 are both correct. In general, single quotations are needed whenever a character in the sheet name could cause the formula to be parsed differently (whitespace, punctuation, sheet name looks like a cell reference). I would assume that '1003:1856' would not be correct as that would imply that there is a sheet named \"1003:1856\".", "id": 195812, "time": "2017-01-03T07:30:13Z", "creator": "onealj@apache.org", "creation_time": "2017-01-03T07:30:13Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "zhangchaowang@gmail.com", "attachment_id": null, "text": "It is incorrect in your interpretation. What I refer in my previous post is multiple sheet reference, ie two sheet 1003 and 1856 of the same cells. What you did is two different cells =SUM($'1003'.D28:$'1856'.D28)\n\nI tried to type =SUM('1003':'1856'!D28)) in Microsoft Excel 2016 Mac, but it pops up an error dialog.\n\nI only read/parse Excel by POI no update/write in my test.\n\nHere is part of incomplete code that is for demo purpose:\n\n\tprivate static HSSFWorkbook createHSSFWorkBook(String fileName) throws IOException {\n\t    FileInputStream fis = new FileInputStream(fileName);\n\t    try {\n\t        return new HSSFWorkbook(fis);\n\t    } catch (Exception e) {\n\t    \tlogger.warn(\"Failed to parse Excel file: \" + fileName, e);\n\t    \treturn null;\n\t    } finally {\n\t        fis.close();\n\t    }\n\t}\n\n\tpublic static void generateJson(String sheetFilePath, String jsonFilePath) throws IOException {\n\n\t\t// load external Excel file by POI\n\t\tWorkbook wb = null;\n\t\tif (sheetFilePath.endsWith(\".xlsx\"))\n\t\t\twb = new XSSFWorkbook(sheetFilePath);\n\t\telse {\n\t\t\twb = XlParser.createHSSFWorkBook(sheetFilePath);\n\t\t\tif (wb == null)\n\t\t\t\treturn;\n\t\t}\n\n\t\t// loop through each sheet\n        for(int sheetIndex = 0; sheetIndex < wb.getNumberOfSheets(); sheetIndex++) {\n          \tSheet sheet = wb.getSheetAt(sheetIndex);\n        \t// loop through each row\n\t        for (Row row : sheet) {\n\t        \t// loop through each cell\n\t            for (Cell cell : row) {\n\t            \t// retrieve cell reference\n\t                CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());\n\t                switch(cell.getCellTypeEnum()) {\n\t                \tcase FORMULA:\n\t                \t\tString cellRefString = cellRef.formatAsString();\n\t                \t\tString formulaString = null;\n\t                \t\ttry {\n\t                \t\t\tformulaString = cell.getCellFormula();\n\t                \t\t} catch (Exception e) {\n\t                \t\t\tlogger.fatal(\"Failed to get formula in cell \" + cellRefString);\n\t                \t\t\tthrow e;\n\t                \t\t}\n\n\t                        break;\n\t                \tcase BOOLEAN:\n\t                \t\t\n\t                \t\tbreak;\n\t                \tcase ERROR:\n\t                \t\t\n\t                \t\tbreak;\n\t                \tcase NUMERIC:\n\t                \t\t\n\t                \t\tbreak;\n\t                \tcase STRING:\n\t                \t\t\n\t                \t\tbreak;\n\t                \tdefault:\n\t                \t\tbreak;\n\t                }\n\t            }// end of cell\n\t        }// end of row\n        }//end of sheet\n }", "id": 195817, "time": "2017-01-03T13:06:34Z", "bug_id": 60517, "creation_time": "2017-01-03T13:06:34Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60517, "text": "(In reply to Javen O'Neal from comment #1)\n> Could you include a code snippet of what you're doing, including any\n> manipulations you are doing to the stored formula string and how you're\n> getting the formula string.\n> \n> FWIW, when I open your attached XLS file in LibreOffice, the following\n> formula appears in D17:\n> =SUM($'1003'.D28:$'1856'.D28)\n> \n> When I use LibreOffice to save the file as XLSX, I get:\n> =SUM('1003':$'1856'.D28:D28)\n> \n> And after converting to XLSX, the value saved in sheet1.xml is:\n> <c r=\"D17\" s=\"19\" t=\"n\">\n> <f aca=\"false\">\n> SUM(&apos;1003&apos;:&apos;1856&apos;!D28:D28)</f>\n> <v>\n> 102320067</v>\n> </c>\n> \n> It may be possible that both versions are correct.\n> For example, 'Sheet1'!A1 and Sheet1!A1 are both correct. In general, single\n> quotations are needed whenever a character in the sheet name could cause the\n> formula to be parsed differently (whitespace, punctuation, sheet name looks\n> like a cell reference). I would assume that '1003:1856' would not be correct\n> as that would imply that there is a sheet named \"1003:1856\".\n\nI did not know a range could look like this.\n\nI did some testing in Excel 2016 (Windows), and it appears that =SUM('1003:1856'!A1) is a valid range syntax where there is a tab named 1003 and another tab named 1856. All tabs physically between tabs 1003 and 1856 will be included in the sum. So if I created a tab named Sheet4 and put a value in cell A1, that cell is included in the sum only if I move tab Sheet4 to a position between tabs 1003 and 1856. This formula is maintained, including single quotes, if I save and reopen in XLS or XLSX format. If I add another tab Sheet5, and then make the formula =SUM('Sheet4:Sheet5'!A1), Excel changes it to =SUM(Sheet4:Sheet5!A1)", "id": 195818, "time": "2017-01-03T13:47:20Z", "creator": "jmarkmurphy@apache.org", "creation_time": "2017-01-03T13:47:20Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "zhangchaowang@gmail.com", "text": "As you found it out, single quote is very important in multiple sheet of formula string,\n\n1. The single quote of sheet name is kept if any characters such as #\"=<>&+-%,SINGLE_SPACE exist in sheet name. eg, if you put # sign inside sheet name, ie 'Sheet#4', the single quote is preserved\n\n2. The parsed formula string of multiple sheet from POI 3.15 is incorrect. At any time, it is illegal to quote sheet name twice =SUM('1003':'1856'!D28). The correct parse result should be SUM('1003:1856'!D28)\n\nI tried to figure it out how POI generate parse result and patch it by myself. But IMHO the formula parsing code is not quite readable. In the absence of development document, it is better to leave maintainer to fix it.", "id": 195819, "attachment_id": null, "bug_id": 60517, "creation_time": "2017-01-03T14:42:24Z", "time": "2017-01-03T14:42:24Z", "is_private": false}, {"count": 5, "tags": [], "creator": "onealj@apache.org", "attachment_id": 34588, "text": "Created attachment 34588\nSimplified test case workbook XLSX", "id": 195852, "time": "2017-01-04T21:46:09Z", "bug_id": 60517, "creation_time": "2017-01-04T21:46:09Z", "is_private": false}, {"count": 6, "tags": [], "creator": "onealj@apache.org", "text": "Created attachment 34589\nSimplified test case workbook XLS\n\nIt looks like Excel 2013 allows sheet ranges to be unquoted if the first and last sheet do not contain special characters that would require quoting for a single sheet cell reference.\n\nOtherwise, Excel 2013 quotes the sheet range instead of quoting the sheets individually.\n\nValid: Sheet1:Sheet2!A1\nValid: 'Sheet1:Sheet2'!A1\nValid: 'Sheet 1:Sheet 2'!A1\nInvalid: 'Sheet1':'Sheet2'!A1\nInvalid: 'Sheet1'!A1:'Sheet2'!A1\nInvalid: Sheet 1:Sheet 2!A1", "id": 195853, "attachment_id": 34589, "bug_id": 60517, "creation_time": "2017-01-04T21:50:22Z", "time": "2017-01-04T21:50:22Z", "is_private": false}]
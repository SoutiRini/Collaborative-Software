[{"count": 0, "tags": [], "creator": "mattgerlitz@msn.com", "attachment_id": null, "is_private": false, "id": 137758, "time": "2010-06-19T14:33:48Z", "bug_id": 49471, "creation_time": "2010-06-19T14:33:48Z", "text": "It would be nice if the CDATA section inside the log4j:message element could be turned off."}, {"count": 1, "tags": [], "bug_id": 49471, "attachment_id": null, "id": 137759, "time": "2010-06-19T15:32:36Z", "creator": "carnold@apache.org", "creation_time": "2010-06-19T15:32:36Z", "is_private": false, "text": "Could you elaborate on the motivation?  Is it to reduce the size of the resulting string, to reduce the memory footprint of a DOM document, to increase parsing speed?  If so, do you have any metrics on the potential benefits.\n\nThe XSLTLayout in the extras companion uses the XSLT serializer in the JDK and should always produce valid XML document entities and is highly unlikely to produce CData sections.  However, I don't know any metrics of its performance relative to the XMLLayout.\n\nThere are known scenarios where the XMLLayout can produce invalid XML, but been hesitant to add any overhead to detect for those scenarios and work around it."}, {"count": 2, "tags": [], "creator": "mattgerlitz@msn.com", "text": "(In reply to comment #1)\n> Could you elaborate on the motivation?  Is it to reduce the size of the\n> resulting string, to reduce the memory footprint of a DOM document, to increase\n> parsing speed?  If so, do you have any metrics on the potential benefits.\n> \n> The XSLTLayout in the extras companion uses the XSLT serializer in the JDK and\n> should always produce valid XML document entities and is highly unlikely to\n> produce CData sections.  However, I don't know any metrics of its performance\n> relative to the XMLLayout.\n> \n> There are known scenarios where the XMLLayout can produce invalid XML, but been\n> hesitant to add any overhead to detect for those scenarios and work around it.\n\nThe motivation is I am using the XMLLayout for logging messages that I know are valid xml. Without the CDATA it is much more straight forward to extract the information I want.", "id": 137774, "time": "2010-06-20T17:01:07Z", "bug_id": 49471, "creation_time": "2010-06-20T17:01:07Z", "is_private": false, "attachment_id": null}, {"count": 3, "text": "Anything handling XML input should accept use of CDATA sections.  If you are using a DOM implementation and want to simplify your code, you can configure the parser not to preserve CDATA sections.", "bug_id": 49471, "attachment_id": null, "id": 141686, "time": "2010-11-13T00:51:04Z", "creator": "carnold@apache.org", "creation_time": "2010-11-13T00:51:04Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "mattgerlitz@msn.com", "attachment_id": null, "id": 141782, "time": "2010-11-17T19:37:40Z", "bug_id": 49471, "creation_time": "2010-11-17T19:37:40Z", "is_private": false, "text": "(In reply to comment #3)\n> Anything handling XML input should accept use of CDATA sections.  If you are\n> using a DOM implementation and want to simplify your code, you can configure\n> the parser not to preserve CDATA sections.\n\nIf I remove the CDATA sections then I lose the information I want. The issue is the message I want to log IS xml. The idea being I can extract information in the log file via XPATH. \n\nTo accomplish this I gave up on the the XmlLayout and just used a PatternLayout with value=\"%m\" to log the message (the message, again, is a xml fragment). Then for post processing I just wrapped the messages with a root element and preformed the xslt and xpath. I had to add my own timestamp within the message but it works."}]
[{"count": 0, "tags": [], "text": "Created attachment 28923\nenhanced extension-point-test.xml to reproduce the use case with nested include/import\n\nExtensionPoint doesn't work when using nested import/include and fails with a message \"referenced target XXXX is not an extension-point\".\n\nExample :\nSay we have three distinct build file :\n* abstract-compile.xml defining an extension point named \"compile\"\n* compile-java.xml imports abstract-compile.xml and define a concrete target \"compile-java\" referenced as an extension-of \"compile\" \n* build.xml (the main script) including compile-java.xml with a prefix \"myprefix\".\n\nWhen project helper try to handle this use case, the build fail with the following message :\n\"referenced target 'compile' is not an extension-point\".", "is_private": false, "bug_id": 53405, "id": 159932, "time": "2012-06-12T20:59:49Z", "creator": "jlboudart@apache.org", "creation_time": "2012-06-12T20:59:49Z", "attachment_id": 28923}, {"count": 1, "attachment_id": 28924, "bug_id": 53405, "is_private": false, "id": 159933, "time": "2012-06-12T21:08:48Z", "creator": "jlboudart@apache.org", "creation_time": "2012-06-12T21:08:48Z", "tags": [], "text": "Created attachment 28924\npatch to add support of extensionpoint with nested import and include\n\nThe problems seems to come when ProjectHelper duplicate the extension point while importing a build file.\nProjectHelper2 implementation is cloning the extension point as if it was a Target (using Target clone constructor).\nThen, implementation check instanceof extension point and fails with the message mentioned in original description as it is a Target instance and not an ExtensionPoint instance.\n\nI attached a patch to fix this."}, {"attachment_id": null, "tags": [], "bug_id": 53405, "text": "Patch applied.\nThanks!", "count": 2, "id": 159981, "time": "2012-06-13T20:25:34Z", "creator": "nicolas.lalevee@hibnet.org", "creation_time": "2012-06-13T20:25:34Z", "is_private": false}]
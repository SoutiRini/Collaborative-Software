[{"count": 0, "tags": [], "creator": "christoph.ludwig@haufe-lexware.com", "text": "Created attachment 30798\ncode flow that exhibits the race condition\n\nFor session fixation protection, we have to discard a user's session and create a new one whenever the user's login state changes. For this we rely on Spring Security's SessionFixationProtectionStrategy that, at its core, uses the following commands:\n\n  session.invalidate();\n  session = request.getSession(true);\n\nYesterday, we had a message in the log that indicates the latter command returned the same session that was invalidated in the line before:\n\"Your servlet container did not change the session ID when a new session was created. You will not be adequately protected against session-fixation attacks (catalina-exec-339, org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy, SessionFixationProtectionStrategy.java:102)\"\n\nWhen I investigated this issue, I found there is in fact a race condition if two threads (associated with requests from the same client) enter the session fixation protection code in parallel. I attached a TXT file that illustrates the code flow that leads to the race condition: When thread B calls session.invalidate(), the call returns immediately becuase the session is already in the \"expiring\" state. Since the session is not invalid yet, the call to request.getSession(true) won't create a new session, though. So in effect, thread B cannot obtain a new session.\n\nThe documentation at http://tomcat.apache.org/tomcat-7.0-doc/servletapi/ has no indication that a session may not yet be invalid when session.invalidate() returns. The session interface neither provides a way to detect \"expiring\" session.\n\nThe error message appears only once in the production log files that go some weeks back, so it seems to be an infrequent event. Nevertheless, it should be possible to implement session fixation without a race condition.\n\nRegards\nChristoph", "id": 169899, "time": "2013-09-04T10:24:05Z", "bug_id": 55521, "creation_time": "2013-09-04T10:24:05Z", "is_private": false, "attachment_id": 30798}, {"count": 1, "tags": [], "creator": "markt@apache.org", "text": "I've taken a look at this and there are some things we can do in Tomcat to ensure that a call to invalidate() doesn't return until the session has been invalidated.\n\nHowever, there may still be an issue that needs fixing in Spring Security. Looking at SessionFixationProtectionStrategy.applySessionFixation() it is possible (although even less likely than the issue you have seen) for concurrent requests to generate a series of invalidate / create / invalidate / create etc. events. It is pretty unlikely but is possible. Since I work for Pivotal, I'll ping one of the developers.", "id": 169929, "time": "2013-09-05T14:53:22Z", "bug_id": 55521, "creation_time": "2013-09-05T14:53:22Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "christoph.ludwig@haufe-lexware.com", "text": "Mark, it would be great if you'd ask one of your colleagues to take a look at the additional issues in Spring Security you observed.\n\nAs far as Tomcat is concerned, the race condition I observed would no longer exist if the early check of the expiring field before the synchronized block is entered would be removed. Of course, I don't now whether this check is merely the result of an over-eager optimization or whether it is needed in some situation I am not aware of.", "id": 169930, "time": "2013-09-05T15:27:21Z", "bug_id": 55521, "creation_time": "2013-09-05T15:27:21Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "Thsi has been fixed in trunk and 7.0.x and will be included in 8.0.0-RC2 and 7.0.43 onwards.", "id": 169932, "time": "2013-09-05T16:13:35Z", "bug_id": 55521, "creation_time": "2013-09-05T16:13:35Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "christoph.ludwig@haufe-lexware.com", "is_private": false, "text": "Thanks for the very prompt fix!\n\nRegards\nChristoph", "id": 169933, "time": "2013-09-05T16:28:21Z", "bug_id": 55521, "creation_time": "2013-09-05T16:28:21Z", "attachment_id": null}]
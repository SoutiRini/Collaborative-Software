[{"count": 0, "tags": [], "bug_id": 43876, "attachment_id": null, "text": "The thread pooling code (trunk misc/apr_thread_pool.c) has the following thread \nsafety/race condition issues:\n\n1) When a busy thread is trimmed its list element may have had its next and/or\n   prev RING linkage nulled out which may cause the subsequent\n   APR_RING_REMOVE() in thread_pool_func() crash.\n2) The allocation of the thread pool function list element uses apr_pcalloc()\n   w/o first serializing the use of the pool.  apr_pcalloc() is not thread-safe\n   and the same bit of memory may be handed out more than once.\n3) When threads (especially idle ones) are trimmed the lock is not held long\n   enough which may allow the list element to be removed more than once (similar\n   to #1).  This problem was introduced w/the idle worker timeout enhancement\n   detailed in Bug 42889.\n\nPlus, the list element descriptors allocated to track an active worker thread\nwere leaking.\n\nI have included a patch that has the fixes for these 4 problems.  The patch \nincludes the idle timeout and statistic updates in bug 42889.", "id": 110616, "time": "2007-11-15T15:32:02Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-11-15T15:32:02Z", "is_private": false}, {"count": 1, "text": "Created attachment 21131\napr_thread_pool.c updates\n\nThis diff has the fixes plus the idle timeout and statistics updates described\nin Bug 42889", "creator": "Joe.Mudd@sas.com", "attachment_id": 21131, "id": 110617, "time": "2007-11-15T15:34:01Z", "bug_id": 43876, "creation_time": "2007-11-15T15:34:01Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 43876, "attachment_id": 21132, "text": "Created attachment 21132\napr_thread_pool.h updates\n\nThis diff has the idle timeout and statistics updates described in Bug 42889. \nThese updates are a corequisite w/the the fixes in the apr_thread_pool.c\nupdates", "id": 110618, "time": "2007-11-15T15:35:03Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-11-15T15:35:03Z", "is_private": false}, {"attachment_id": 21133, "tags": [], "bug_id": 43876, "text": "Created attachment 21133\napr_thread_pool.c updates", "count": 3, "id": 110619, "time": "2007-11-15T15:53:33Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-11-15T15:53:33Z", "is_private": false}, {"attachment_id": 21139, "tags": [], "bug_id": 43876, "text": "Created attachment 21139\nmerged patch with one small modification\n\nSince trim_threads split out the threads to be stopped, and trim_threads is an\ninternal function suppose to be called in a single thread, thus the mutex can\nbe unlocked. And one of the intention for splitting out the list is to reduce\nlocking period.", "count": 4, "id": 110644, "time": "2007-11-16T11:08:54Z", "creator": "henryjen@ztune.net", "creation_time": "2007-11-16T11:08:54Z", "is_private": false}, {"count": 5, "tags": [], "creator": "henryjen@ztune.net", "text": "Thank you for the patch, if it is not clear, you got my +1 for it with a small\nmodification.\n\n", "id": 110645, "time": "2007-11-16T11:36:54Z", "bug_id": 43876, "creation_time": "2007-11-16T11:36:54Z", "is_private": false, "attachment_id": null}, {"count": 6, "text": "I think there is a chance for a race condition w/o trim_threads() holding the \nlock until the element list entries are marked w/TH_STOP.\n\nThe race condition would be when a timed wait idle thread wakes up after its \nelement descriptor is UNSPLICED but before it is marked w/TH_STOP.  This would \nallow the waking thread to get back around to the top of the thread_pool_func() \nloop and possibly crash on the APR_RING_REMOVE.\n\nThanks for your help and review.", "bug_id": 43876, "attachment_id": null, "id": 110648, "time": "2007-11-16T11:47:49Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-11-16T11:47:49Z", "tags": [], "is_private": false}, {"count": 7, "tags": [], "bug_id": 43876, "attachment_id": null, "text": "No, it doesn't because the thread had been split off the list of idle threads,\nand thus get no chance to be woke up. Hope that helps.", "id": 110656, "time": "2007-11-16T15:11:42Z", "creator": "henryjen@ztune.net", "creation_time": "2007-11-16T15:11:42Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 43876, "attachment_id": null, "text": "Isn't it true that the TH_PROBATION threads can wake up independently of their \ncondition variable being posted?  And if so, couldn't they wake up after the \nUNSPLICE but before the TH_STOP setting, acquire the me->lock and get around to \nthe top of the loop before TH_STOP is set by the code in trim_threads() that is \nrunning outside of the me->lock protection?", "id": 110657, "time": "2007-11-16T15:17:59Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2007-11-16T15:17:59Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "henryjen@ztune.net", "text": "If the thread get trimmed, it's gone, regardless it is in probation or not.\n\nHTH,\nHenry\n", "count": 9, "id": 110662, "time": "2007-11-16T21:31:41Z", "bug_id": 43876, "creation_time": "2007-11-16T21:31:41Z", "is_private": false}, {"count": 10, "tags": [], "bug_id": 43876, "attachment_id": null, "text": "Hmm, I replied too fast. I think you are right on this one. Since we are not\nreally do expensive operations in there, move the lock down should be OK.\n\nThanks.", "id": 110663, "time": "2007-11-16T21:36:53Z", "creator": "henryjen@ztune.net", "creation_time": "2007-11-16T21:36:53Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 43876, "attachment_id": 21206, "text": "Created attachment 21206\nUpdated patch move down the lock.\n\nThe patch is updated, which is basically what Joe submitted.", "id": 111293, "time": "2007-11-29T18:49:20Z", "creator": "henryjen@ztune.net", "creation_time": "2007-11-29T18:49:20Z", "is_private": false}, {"attachment_id": 21378, "tags": [], "bug_id": 43876, "text": "Created attachment 21378\nFix idle thread timeout stat and accidental idle thread reap", "count": 12, "id": 112782, "time": "2008-01-12T06:05:55Z", "creator": "Joe.Mudd@sas.com", "creation_time": "2008-01-12T06:05:55Z", "is_private": false}, {"count": 13, "text": "The latest patch fixes two items that were in the previous patches..\n\n1) The idle thread timeout statistic was being incremented each time an\n   idle thread (whether a timeout was set or not) was reaped.  Updated\n   the check to only increment when a timeout was set.\n2) The test to determine if a thread should go into probation was >=\n   when it should have been just > since the idle_cnt has been incremented\n   by the time this test is made.", "creator": "Joe.Mudd@sas.com", "attachment_id": null, "id": 112784, "time": "2008-01-12T06:08:57Z", "bug_id": 43876, "creation_time": "2008-01-12T06:08:57Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "text": "Patch 21378 committed; presuming these are the final API changes for release 1.3\nand that further API-additions will be restricted to release 1.4.\n\nBroken API's cannot be corrected until release 2.0, so please (urgently and\ncarefully) review the trunk (or branches/1.3.x/) for any final fixes prior to \nrelease.\n", "id": 116355, "time": "2008-05-07T12:47:32Z", "bug_id": 43876, "creation_time": "2008-05-07T12:47:32Z", "is_private": false}]
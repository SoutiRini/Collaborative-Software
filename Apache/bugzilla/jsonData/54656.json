[{"count": 0, "attachment_id": 30029, "bug_id": 54656, "is_private": false, "id": 165725, "time": "2013-03-09T01:07:51Z", "creator": "eugenel@amazon.com", "creation_time": "2013-03-09T01:07:51Z", "tags": [], "text": "Created attachment 30029\nnew mod_ssl directive to use proxy-connection-hostname instead of proxy-request-hostname for SNI and SSLProxyCheckPeerCN\n\nIt seems that `SSLProxyCheckPeerCN on` doesn't work well with `ProxyPreserveHost on`.  I have a patch for a new directive that would allow it.\n\nThe use case:  An Apache-based reverse proxy gets https traffic for multiple domains: e.g. CN=www.example.com, CN=www.example.org, etc.  The reverse proxy has `ProxyPreserveHost on` so that multiple domains can be served by the same backend server (e.g. backend.example.com) .  The backend server recovers the requested domain by inspecting Host header (I know there's also X-Forwarded-Host, but let's say the backend isn't running Apache or anything as extensible).  Unlike the reverse proxy, the backend server has only one SSL port, which has the backend domain name in its cert's CN (e.g. CN=backend.example.com).\n\nThe problem: When a request with Host: www.example.com is handled by the reverse proxy, mod_proxy_http assigns \"www.example.com\" to the proxy-request-hostname connection note.  ssl_engine_io.c will pull out this note and use it for SNI and SSLProxyCheckPeerCN.  Unfortunately, www.example.com does not match backend.example.com.  ssl_engine_io.c will abort the connection like so:\n\n[Tue Mar 05 02:27:51.522901 2013] [ssl:info] [pid 12902] [remote 1.2.3.4:1443] AH02005: SSL Proxy: Peer certificate CN mismatch: Certificate CN: backend.example.com Requested hostname: www.example.com\n[Tue Mar 05 02:27:51.522923 2013] [ssl:info] [pid 12902] [remote 1.2.3.4:1443] AH01998: Connection closed to child 0 with abortive shutdown (server reverse-proxy-1.example.com:443)\n\nPrevious discussion here ... http://mail-archives.apache.org/mod_mbox/httpd-dev/201209.mbox/%3C50462600.7010607@kippdata.de%3E ... suggests that the 2.4.3 is the \"correct\" behavior.  I believe it is correct only when X-Forwarded-Host can be used.  But if ProxyPreserveHost is on and the backend server is truely doing \"mass name-based virtual hosting\" and doesn't have all the certs, then it seems the Apache-based reverse proxy should be not be picky about the mismatch.  The reverse proxy shouldn't expect CN=www.example.com, CN=www.example.org, etc. when the backend only has CN=backend.example.com.\n\nMy proposed fix: Patch mod_proxy_http to also add a note named \"proxy-connection-hostname\" which will always refer to the hostname in the ProxyPass or [proxy] RewriteRule.  Then, depending on a new directive (SSLProxyHostnameSource) mod_ssl will consult either proxy-request-hostname or proxy-connection-hostname to perform SNI and SSLProxyCheckPeerCN."}, {"count": 1, "tags": [], "bug_id": 54656, "text": "Created attachment 30172\nnew mod_ssl directive to use proxy-connection-hostname instead of proxy-request-hostname for SNI and SSLProxyCheckPeerCN\n\nre-uploading with proper content type", "id": 166502, "attachment_id": 30172, "creator": "eugenel@amazon.com", "creation_time": "2013-04-10T01:26:33Z", "time": "2013-04-10T01:26:33Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 54656, "is_private": false, "id": 167347, "time": "2013-05-22T06:47:44Z", "creator": "eugenel@amazon.com", "creation_time": "2013-05-22T06:47:44Z", "tags": [], "text": "Discussions on dev@httpd.apache.org last month suggests that backend webservers behind reverse proxies should be obeying HTTP standards by always returning certs that has a CN equal to the Host: header.\n\nA next action should be to correct the ProxyPreserveHost documentation to warn users against this new default behavior in 2.4"}, {"count": 3, "tags": [], "creator": "wrowe@apache.org", "text": "Earlier guidance on dev@httpd was misguided.\n\nA similar problem is present for all forward-proxied requests.\n\nThe SNI defined hostname can only be used to help route the correct certificate.\nThe SNI definition of a hostname is independent of the definition of the \nHTTP Host: field and any assumptions that they would be identical is misguided.\n\nThe SNI hostname may not be an IP-address, while the Host: header may be.\n\nThe SNI hostname is the next-hop hostname (without a port), while the Host: header \nis the hostname (including optional port) component of the target URI.  In the\nforward proxy case, these always differ.\n\nThe SNI logic further fails to test alt-subject names, wildcard cn's and a host \nof other design errors.\n\nI expect your report has equal validity in light of these other design flaws and\nI'm evaluating this within the context of the current mis-implementation.", "id": 171698, "time": "2013-12-11T22:40:10Z", "bug_id": 54656, "creation_time": "2013-12-11T22:40:10Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "Before SNI support on Apache 2.4 one could have a server serve an external.domain site using a internal.domain certificate, since SNI we have three hostnames, the SNI, the presented certificate and the Host header and an apache server will force the Host header to match the SNI, otherwise we'll get the known error:\n\nHostname internal.domain provided via SNI and hostname external.domain provided via HTTP are different\n\nThe proposed patch solves the problem of the Apache proxy asking for a certificate for internal.domain and sending a SNI of external.domain (which is the case now if you have ProxyPreserveHost On) but doesn't solve the problem of the Apache backend server giving that error, so this patch should go together with one adding a new directive to relax the SNI check on the server side, otherwise this patch is not coherent with Apache server behaviour.\n\nI'd like to know if this relaxing is something that could be accepted so that we could have pre-SNI behabiours back to apache 2.4 or if ProxyPreserveHost is needed then ssl must be disabled on Apache backend servers which means lowering security compared to what we had at 2.2.", "is_private": false, "id": 189509, "creator": "manty@manty.net", "time": "2016-03-16T15:00:46Z", "bug_id": 54656, "creation_time": "2016-03-16T15:00:46Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "ylavic.dev@gmail.com", "text": "In latests 2.2 and 2.4 versions, mod_proxy will always set the SNI for the backend connections to its request's Host header (reverse, r1356881 from 2.4.3) or targeted host (forward, r1673941 from 2.4.13), and will not reuse any connection with SNI if that host differs (r1587201 from 2.4.10).\n\nI think there is no point in using SSLProxyCheckPeerCN, requesting a particular host (be it preserved or not), getting a response from another host (backend certificate's CN), and be fine with it.\nIf this is expected, just don't set \"SSLProxyCheckPeerCN on\".\n\nPlease note that one can use a wildcard or multi-CN-subjectAltName(s) certificate on the backend, and mod_proxy will also accept those if they match the requested host (r1485667 from 2.4.5). \n\nThus I'm marking this report as invalid.", "id": 189516, "time": "2016-03-16T21:37:14Z", "bug_id": 54656, "creation_time": "2016-03-16T21:37:14Z", "is_private": false, "attachment_id": null}]
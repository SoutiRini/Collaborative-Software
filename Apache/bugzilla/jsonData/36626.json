[{"count": 0, "tags": [], "creator": "sp4003@sfu.ca", "attachment_id": null, "id": 79844, "time": "2005-09-13T00:42:19Z", "bug_id": 36626, "creation_time": "2005-09-13T00:42:19Z", "is_private": false, "text": "When using a LinkedHashMap to populate the <option> tags with the \"options\" parameter I expected \nthe value in the key->value pair to appear between the <option> tags.  Basically I would expect to see \nthe longer, more descriptive, string appear in the pull down list. the <option value=\"key\"> is where I \nwould expect the HashMap's key to appear since this is the shorter, more concise string I will want to \nstore and/or use in calculations.\n\nI know it is a bit of a misnomer, since the option tag calls it a \"value\" but what I would really like there \nis the item you are calling the \"label\"\n\nSo if I was to pass in the following LinkedHashMap:\n\nLinkedHashMap map = new LinkedHashMap(3);\nmap.put(\"1\", \"one\");\nmap.put(\"2\", \"two\");\nmap.put(\"3\", \"three\");\n\n<input:select name=\"number\" options=\"<%= map %> />\n\nI would expect it to generate the following HTML:\n\n<select>\n<option value=\"1\">one</option>\n<option value=\"2\">two</option>\n<option value=\"3\">three</option>\n</select>\n\nIf this is just a matter of opinion, it would be great to have a switch that allowed me to determine \nwhether the value or the key gets displayed in the list with the other stored as the option value.\n\nThe code that handles this seems to be in the Select.java file, the outputOption method around line \n205."}, {"count": 1, "attachment_id": null, "bug_id": 36626, "text": "FWIW, I agree with your assessment.\n\nBut the tag works exactly as advertised, and reversing the key-value semantics \nwill be an incompatible change. I'd hesitate to call this a blocker.\n", "id": 81078, "time": "2005-10-13T05:21:02Z", "creator": "rahul@apache.org", "creation_time": "2005-10-13T05:21:02Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 36626, "attachment_id": null, "text": "Yes I agree as well. It is counter-intuitive but I'm sure there was good \nreason for it initially, and I guess you can see an argument both ways... as \nyou say: the option tag does have a value, which suggest that a select tag is \na key to value mapping. It's just not perhaps how we see keys from a Map & \nJava perspective.\n\nAs Rahul said it would be an incompatible change. I find the optionLabels and \noptionValues a more flexible option: full control over the order of labels and \nno misunderstandings.\n\nThe only way I can see that this change could be made would be if an \nadditional attribute was added to the tag, eg. reverseOptions=\"true\" but \nhopefully with a better name. Something along those lines would be a simple \nsolution I believe. Thoughts?\n\nAlternative is to mark this as WONTFIX or INVALID I guess.", "id": 82407, "time": "2005-11-11T22:37:57Z", "creator": "karl@xk72.com", "creation_time": "2005-11-11T22:37:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 36626, "attachment_id": null, "text": "(In reply to comment #2)\n<snip/>\n> As Rahul said it would be an incompatible change. I find the optionLabels \nand \n> optionValues a more flexible option: full control over the order of labels \nand \n> no misunderstandings.\n<snap/>\n\nNot sure what you mean here, separate lists for labels and values?\n\n> The only way I can see that this change could be made would be if an \n> additional attribute was added to the tag, eg. reverseOptions=\"true\" but \n> hopefully with a better name. Something along those lines would be a simple \n> solution I believe. Thoughts?\n<snip/>\n\nHmm, the semantics of \"reverse\" will have to be documented and anyone who \nfinds the current rendering counter-intuitive will also find the above \nattribute counter-intuitive ;-)\n\n> Alternative is to mark this as WONTFIX or INVALID I guess.\n<snap/>\n\nI'd WONTFIX this, reasoning in terms of backward compatibility.\n\n", "id": 82431, "time": "2005-11-13T17:09:22Z", "creator": "rahul@apache.org", "creation_time": "2005-11-13T17:09:22Z", "is_private": false}, {"count": 4, "attachment_id": null, "bug_id": 36626, "text": "Yes, there are optionValues and optionLabels lists. These are separate lists \nfor values and labels.\n\nThe attribute with a Map has limited control over the order in which you want \nthings to appear - you either have no specific order or sorted etc. Whereas \nyou have complete control with the pair of lists.\n\nAlso there is the nested <input:option ... /> tag :)\n\nI agree - let's WONTFIX this. Jeremy, please feel free to discuss this further.", "id": 82433, "time": "2005-11-13T20:01:10Z", "creator": "karl@xk72.com", "creation_time": "2005-11-13T20:01:10Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 36626, "attachment_id": null, "id": 82434, "time": "2005-11-13T20:24:27Z", "creator": "sp4003@sfu.ca", "creation_time": "2005-11-13T20:24:27Z", "is_private": false, "text": "I understand the problem of backward compatibility, but a flag would still be a good modification.  Is \nanybody using the options parameter and giving it a map?  To me, this could be the most useful tag in the \nentire library, in fact, it would be the only one we are using.  The rest are nearly identical to a plain old \ninput tag.  By giving the options attribute a LinkedHashMap you could quickly generate the list you want to \nsee and have it return the key to be used to manipulate the data.  I posted this because we honestly found \nthat this tag was useless without it.  For our purposes it's easier to just build the select option list on the \nfly with Java code in the JSP.  But if others are getting value (no pun intended) from using this tag then \nthat's great.  Thanks for the discussion."}, {"count": 6, "tags": [], "creator": "karl@xk72.com", "text": "Thanks Jeremy. I have reopened the bug. I'm sure there are people getting \nvalue out of it the way it currently is - probably people who remembered about \nthe LinkedHashMap, unlike me :) - but it's obvious that you'd get value out of \nit the other way around. In which case there are bound to be others who would \ntoo.\n\nI propose that we do one of two solutions:\n\n1) Add a new attribute for options that are accepted in the value->label order \nrather than the current label->value order. I'm struggling to name this \nattribute, perhaps optionsValueLabel and in which case we could add \noptionsLabelValue as well and deprecate options. \n\n2) Add a boolean attribute to choose between the two orderings. The original \nordering would be the default. I'm also struggling with naming this one, \nperhaps optionsValueLabel=\"true\" ?\n\nI'm leaning toward option 1 as it is less to type when you're using the tags. \nThe attribute names still feel a little verbose though. Please add your \nfeedback.", "id": 82742, "time": "2005-11-23T00:37:00Z", "bug_id": 36626, "creation_time": "2005-11-23T00:37:00Z", "is_private": false, "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 36626, "text": "I like option one too, it feels more OO to me and easy enough to understand if properly documented.  It is \na tough one to name but I would be willing to write the documentation.  So what's the procedue then? How \ndo we implement this change?", "id": 82918, "time": "2005-11-28T19:23:29Z", "creator": "sp4003@sfu.ca", "creation_time": "2005-11-28T19:23:29Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 36626, "attachment_id": null, "text": "This has been resolved in commits today (revision 531132). An \"optionsValueLabel\" attribute has been \nadded. The existing \"options\" attribute has been left as is.", "id": 102008, "time": "2007-04-22T01:17:28Z", "creator": "karl@xk72.com", "creation_time": "2007-04-22T01:17:28Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "ajit_bhagvat@yahoo.com", "is_private": false, "text": "Created attachment 26729\nJava program to test performance of sheet.setDefaultColumnStyle(col, style) for different no. of columns\n\nWhen creating an Excel sheet with thousands of columns, the performance of sheet.setDefaultColumnStyle(col, style) keeps degrading as more and more columns are added. For every call to this method with a new column, the time taken by the method keeps on increasing.\n\nPlease execute the attached test program with 1000 columns or more, and notice the time taken by the method for every 100th column. The CPU consumption also reaches 100% during execution of the program.\n\nPlease note: Though the test program sets only one default style for all the columns, in practice, I need to create an Excel sheet with different default styles for different columns.\n\nBecause of the performance issue, creating large Excel sheets with thousands of columns is time-consuming and it is also consuming a lot of CPU for the entire duration.", "id": 144722, "time": "2011-03-04T06:04:42Z", "bug_id": 50868, "creation_time": "2011-03-04T06:04:42Z", "attachment_id": 26729}, {"count": 1, "tags": [], "bug_id": 50868, "text": "I suspect that ColumnHelper.getColumn1Based is the source of the slowdown - because a CTCol entry can cover more than one column we currently need to loop over all of them to find the appropriate spot\n\nCan you try making a call to getColumn1Based for your columns instead of the set style call, and see if that shows the same problem?", "id": 144724, "attachment_id": null, "creator": "apache@gagravarr.org", "creation_time": "2011-03-04T06:11:17Z", "time": "2011-03-04T06:11:17Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50868, "attachment_id": null, "text": "Nick, you are right. I modified my code as per your suggestion and as you suspected ColumnHelper.getColumn1Based is the source of the slowdown.\n\nHere is the modified for loop:\n\n    ColumnHelper helper = sheet.getColumnHelper();\n    for(int i = 0; i < numCols; i++) {\n      long startTime = System.currentTimeMillis();\n//      sheet.setDefaultColumnStyle(i, style);\n      CTCol col = helper.getColumn1Based(i+1, true);\n      if ((i+1)%100 == 0) {\n        long endTime = System.currentTimeMillis();\n        System.out.printf(\"Time for setting default column style on %4dth column (ms): %10d%n\", (i+1), (endTime-startTime));\n      }\n      if (col == null) {\n            col = sheet.getCTWorksheet().getColsArray(0).addNewCol();\n            col.setMin(i+1);\n            col.setMax(i+1);\n      }\n      col.setStyle(style.getIndex());\n    }", "id": 144856, "time": "2011-03-09T07:21:35Z", "creator": "ajit_bhagvat@yahoo.com", "creation_time": "2011-03-09T07:21:35Z", "is_private": false}, {"count": 3, "attachment_id": null, "bug_id": 50868, "is_private": false, "id": 145004, "time": "2011-03-14T17:34:23Z", "creator": "apache@gagravarr.org", "creation_time": "2011-03-14T17:34:23Z", "tags": [], "text": "I have a feeling that we might need to re-write the search as an xpath, rather than the current method of iterating to find the correct one\n\n(We probably don't want to try to maintain a cache, as other code could easily change the CTCol entries)\n\nCan you try seeing how an xpath would perform? You need to get the CTSheet off the XSSFSheet, then get the CTCols, and finally do a simple xpath query (eg to get the child with a known attribute). If that looks to perform ok as you add the columns, then we know it's a good bet for switching too."}]
[{"count": 0, "tags": [], "bug_id": 61998, "text": "During our https attack test, a dead loop has happened in org.apache.tomcat.util.net.SecureNioChannel#handshake.\n\nA lot of(million) packets were sent during the test so it's extremely hard to find which one caused the problem.\nThe dead loop didn't stop even after we had stopped the test.\n\nI've debugged tomcat using jdb. The results are as follows.\n\nwhile (!handshakeComplete) {\n    switch ( handshakeStatus ) {                                                            //handshakeStatus = NEED_UNWRAP\n        //...\n        case NEED_UNWRAP: {\n            //perform the unwrap function\n            handshake = handshakeUnwrap(read);                                             //handshake.getStatus() = Status.BUFFER_OVERFLOW\n            if ( handshake.getStatus() == Status.OK ) {\n                if (handshakeStatus == HandshakeStatus.NEED_TASK)\n                    handshakeStatus = tasks();\n            } else if ( handshake.getStatus() == Status.BUFFER_UNDERFLOW ){\n                //read more data, reregister for OP_READ\n                return SelectionKey.OP_READ;\n            } else if (handshake.getStatus() == Status.BUFFER_OVERFLOW) {\n                getBufHandler().configureReadBufferForWrite();\n            } else {\n                throw new IOException(sm.getString(\"channel.nio.ssl.unexpectedStatusDuringWrap\", handshakeStatus));\n            }//switch\n            break;\n        }\n        case NEED_TASK: {\n            handshakeStatus = tasks();\n            break;\n        }\n        default: throw new IllegalStateException(sm.getString(\"channel.nio.ssl.invalidStatus\", handshakeStatus));\n    }\n}\n\nprotected SSLEngineResult handshakeUnwrap(boolean doread) throws IOException {\n\n    if (netInBuffer.position() == netInBuffer.limit()) {\n        //clear the buffer if we have emptied it out on data\n        netInBuffer.clear();\n    }\n\n/**\nValue of netInBuffer here.\n\nhttps-jsse-nio-20000-exec-38[1] dump netInBuffer\n netInBuffer = {\n    java.nio.ByteBuffer.hb: instance of byte[16921] (id=9332)\n    java.nio.ByteBuffer.offset: 0\n    java.nio.ByteBuffer.isReadOnly: false\n    java.nio.ByteBuffer.bigEndian: true\n    java.nio.ByteBuffer.nativeByteOrder: false\n    java.nio.Buffer.SPLITERATOR_CHARACTERISTICS: 16464\n    java.nio.Buffer.mark: -1\n    java.nio.Buffer.position: 16\n    java.nio.Buffer.limit: 16921\n    java.nio.Buffer.capacity: 16921\n    java.nio.Buffer.address: 0\n}\n*\n/\n    if ( doread )  {\n        //if we have data to read, read it\n        int read = sc.read(netInBuffer);                                                                //read = 0\n        if (read == -1) throw new IOException(sm.getString(\"channel.nio.ssl.eofDuringHandshake\"));\n    }\n    SSLEngineResult result;\n    boolean cont = false;\n    //loop while we can perform pure SSLEngine data\n    do {\n        //prepare the buffer with the incoming data\n        netInBuffer.flip();\n        //call unwrap\n        getBufHandler().configureReadBufferForWrite();\n        result = sslEngine.unwrap(netInBuffer, getBufHandler().getReadBuffer());                    //result: \"Status = BUFFER_OVERFLOW HandshakeStatus = NEED_UNWRAP bytesConsumed = 0 bytesProduced = 0\"\n        //compact the buffer, this is an optional method, wonder what would happen if we didn't\n        netInBuffer.compact();\n        //read in the status\n        handshakeStatus = result.getHandshakeStatus();\n        if ( result.getStatus() == SSLEngineResult.Status.OK &&\n             result.getHandshakeStatus() == HandshakeStatus.NEED_TASK ) {\n            //execute tasks if we need to\n            handshakeStatus = tasks();\n        }\n        //perform another unwrap?\n        cont = result.getStatus() == SSLEngineResult.Status.OK &&\n               handshakeStatus == HandshakeStatus.NEED_UNWRAP;\n    }while ( cont );\n    return result;\n}\n\nSince sc.read(netInBuffer) returns 0, I'm wondering configuring timeout, keepalive or something else to avoid the problem.\n\nI'd appreciated if you can confirm if there is a bug or have any suggestions to avoid the problem.\n\nThanks a lot.", "id": 203265, "time": "2018-01-15T04:12:05Z", "creator": "mycatclaw@163.com", "creation_time": "2018-01-15T04:12:05Z", "is_private": false, "attachment_id": null}]
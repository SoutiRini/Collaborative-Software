[{"count": 0, "tags": [], "bug_id": 17778, "text": "Attached find patch and tar files to enable binary resources in Xindice.  Tests \nincluded.  The patches currrently only handle embedded XML:DB.  Adding the \nnative XML-RPC messages and remote XML:DB client should be no problem, but I \nwanted to get the internals accepted first.  \n  \nA couple notes about the attached patches.  First,they include the patches I \nsubmitted a week or two ago for XML-RPC parser indpeendence, as those haven't \nfound their way into the codebase yet.  Sorry for the extra clutter. Also, the \npatches include tons of log.debug() stuff. I'll be happy to remove all that \nwhen the code settles down.  \n  \nThe approach I've taken is to start out by creating a flexible and extensible \ninline metadata service, activated on a per-collection basis. (By inline \nmetadata, I mean that the metadata is a header at the beginning of the BTree \ndata.) That gives me an efficient way of determining what type of resource a \nparticular BTree record holds.  All the code for the inline metadata service is \nin org.apache.xindice.core.inlinemeta.  \n  \nBecause the Xindice BTree doesn't care much about what you put into it (bytes, \nbytes, bytes), binary records are ordinary BTree records.  \n \nMost of the details for managing binary resources are found in Collection.  The \nlow-level getDocument() and putDocument() methods havebeen joined by getEntry() \n(record type agnostic, needed for XML:DB), getBinary(), and putBinary(). \n \nAll unit tests succeed; test-integration-embed works except for the XUpdate \ntest that's been failing all along; I just tried test-integration-xmlrpc, there \nare a couple failures there, I'll work on those. \n \nTo run a binary-specific test, try: bin/ant test-embed-binary \n \nOne final note, these patches also fix a bug associated with XMLSerializable.  \nMost of the implementations of streamFromXML(Document)added themselves to the \nparent document, but putObject() in Collection also added the Element returned \nby streamFromXML(Document) to the document, causing it to end up in there \ntwice.  Took me a while to figure out that one!.  To me it made more sense that \na method should act as locally as possible, reducing side-effects, so now no \nXMLSerializable.streamFromXML() implementation adds itself to its parent \nDocument.", "id": 32668, "attachment_id": null, "creator": "shea@gtsdesign.com", "creation_time": "2003-03-07T16:57:43Z", "time": "2003-03-07T16:57:43Z", "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 5211\ndiffs: cvs diff -u", "attachment_id": 5211, "bug_id": 17778, "id": 32670, "time": "2003-03-07T16:58:32Z", "creator": "shea@gtsdesign.com", "creation_time": "2003-03-07T16:58:32Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 5212\nnew files (zip format)", "attachment_id": 5212, "id": 32671, "creator": "shea@gtsdesign.com", "time": "2003-03-07T16:59:38Z", "bug_id": 17778, "creation_time": "2003-03-07T16:59:38Z", "is_private": false}, {"count": 3, "tags": [], "creator": "Kevin.Ross@iVerticalLeap.com", "attachment_id": null, "id": 38075, "time": "2003-05-30T22:48:45Z", "bug_id": 17778, "creation_time": "2003-05-30T22:48:45Z", "is_private": false, "text": "need a new patch to be submitted, created against the latest version of the \ncvs head.  Too many discrepancies were found when attempting to apply the \npatch."}, {"count": 4, "tags": [], "bug_id": 17778, "attachment_id": null, "text": "Patch applied after a little meddling...ALL tests I ran worked with no \nfailures.  Thanks to Gary Shea for the contribution.  Some packages were \nrefactored for appropriate naming.", "id": 38233, "time": "2003-06-03T02:24:31Z", "creator": "Kevin.Ross@iVerticalLeap.com", "creation_time": "2003-06-03T02:24:31Z", "is_private": false}]
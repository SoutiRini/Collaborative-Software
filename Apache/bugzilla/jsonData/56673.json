[{"count": 0, "tags": [], "creator": "tellercapital@gmail.com", "is_private": false, "id": 176053, "attachment_id": null, "bug_id": 56673, "creation_time": "2014-06-25T21:45:55Z", "time": "2014-06-25T21:45:55Z", "text": "I'm currently testing various Java websocket standalone client containers with a simple test application where the standalone Java client app makes a websocket connection to a Wildfly 8.0.0.Final app server running on the same machine.\n\nFor the Tomcat client container, the client app uses the following Maven dependencies:\n\n<dependency>\n    <groupId>javax.websocket</groupId>\n    <artifactId>javax.websocket-api</artifactId>\n    <version>1.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.tomcat</groupId>\n    <artifactId>tomcat-websocket</artifactId>\n    <version>8.0.8</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.tomcat</groupId>\n    <artifactId>tomcat-coyote</artifactId>\n    <version>8.0.8</version>\n</dependency>\n\nEverything works fine:  the client is able to successfully connect to the server, send messages and receive messages.  The only problem that I've encountered is that on each of the callback methods on the client, the Session parameter doesn't contain the correct Session id, i.e. calling session.getId() returns \"0\".  On the server side, the callback session params contain the session id, so I know that it being created correctly on the server, just not sent to the client.\n\n******************************************************\nCLIENT CODE:\n@ClientEndpoint()\npublic class MyClientEndpoint\n{\n    private static CountDownLatch latch;\n\n    public void connect(URI endpointURI)\n    {\n        try\n        {\n            WebSocketContainer container = ContainerProvider.getWebSocketContainer();\n            System.out.println(\"container = \" + container);\n            container.connectToServer(MyClientEndpoint.class, endpointURI);\n        }\n        catch (Exception e)\n        {\n            System.out.println(\"Exception trying to connect\");\n            latch.countDown();\n            throw new RuntimeException(e);\n        }\n    }\n\n    @OnMessage\n    public void onMessage(Session pSession, String message)\n    {\n        System.out.println(\"Received message: \" + message + \" from Session: \" + pSession.getId());\n        if (message.equalsIgnoreCase(\"goodbye\"))\n        {\n            try\n            {\n                pSession.close();\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @OnOpen\n    public void onOpen(Session pSession)\n    {\n        System.out.println(\"Session Opened Successfully: \" + pSession.getId());\n        System.out.println(\"Session class = \" + pSession.getClass().getName());\n        try\n        {\n            pSession.getBasicRemote().sendText(\"Hello!\");\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    @OnClose\n    public void onClose(Session pSession)\n    {\n        System.out.println(\"Session Closed: \" + pSession.getId());\n        latch.countDown();\n    }\n\n    @OnError\n    public void onError(Session pSession, Throwable pThrowable)\n    {\n        System.out.println(\"Received Error: \");\n        try\n        {\n            pSession.close();\n        }\n        catch (IOException e)\n        {\n        }\n        latch.countDown();\n        pThrowable.printStackTrace();\n    }\n\n    public static void main(String[] args)\n    {\n        latch = new CountDownLatch(1);\n        String uriString = \"ws://localhost/test\";\n        try\n        {\n            URI uri = new URI(uriString);\n            SampleClientEndpoint client = new SampleClientEndpoint();\n            client.connect(uri);\n            latch.await();\n\n        }\n        catch (URISyntaxException | InterruptedException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\n******************************************************\nSERVER CODE:\n@ServerEndpoint(\"/test\")\npublic class MyServerEndpoint\n{\n    @OnMessage\n    public void onMessage(Session pSession, String message)\n    {\n        System.out.println(\"Received message: \" + message + \" from Session: \" + pSession.getId());\n    }\n\n    @OnOpen\n    public void onOpen(Session pSession)\n    {\n        System.out.println(\"Session Opened Successfully: \" + pSession.getId());\n        try\n        {\n            for (int i = 1; i < 5; i++)\n            {\n                pSession.getBasicRemote().sendText(\"hello\" + i);\n            }\n            pSession.getBasicRemote().sendText(\"goodbye\");\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    @OnClose\n    public void onClose(Session pSession)\n    {\n        System.out.println(\"Session Closed: \" + pSession.getId());\n    }\n\n    @OnError\n    public void onError(Session pSession, Throwable pThrowable)\n    {\n        System.out.println(\"Received Error For Session: \" + pSession.getId());\n        pThrowable.printStackTrace();\n    }\n}"}, {"count": 1, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "text": "(In reply to John Teller from comment #0)\n> \n> <dependency>\n>     <groupId>javax.websocket</groupId>\n>     <artifactId>javax.websocket-api</artifactId>\n>     <version>1.0</version>\n> </dependency>\n\n1. You should use the API jar provided by Tomcat instead of the above one. That would be\n\n<dependency>\n    <groupId>org.apache.tomcat</groupId>\n    <artifactId>tomcat-websocket-api</artifactId>\n    <version>8.0.8</version>\n</dependency>\n\n\n2. Your expectations are wrong. There is no error here.\n\nThere is no session in WebSocket protocol (RFC6455). A Session is just a way to represent an established connection in Java API.\n\nIf both ends of the connection are implemented in Java, each end has its own implementation of Session with its own ID. The Session ID is not transmitted across the wire. Tomcat uses a counter that starts with \"0\".\n\n// WsSession.java\n> this.id = Long.toHexString(ids.getAndIncrement());\n\n3. Bugzilla is not a support forum.", "id": 176057, "time": "2014-06-25T23:58:29Z", "bug_id": 56673, "creation_time": "2014-06-25T23:58:29Z", "tags": [], "is_private": false}]
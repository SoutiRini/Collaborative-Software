[{"count": 0, "tags": [], "bug_id": 3035, "text": "Hi,\n\nTo validate a schema against \"schema for schema\" for syntactic correctness,\nI needed to let TraverseSchema class be able to parse \"schema for schema\".\n\nI found a problem which relates to the fact that schema for schema contains\nseveral utility types not for public use. One example of such utility types\nis (which is an excerpt from datatypes.xsd):\n\n <xs:simpleType name=\"derivationControl\">\n  <xs:annotation>\n   <xs:documentation>\n   A utility type, not for public use</xs:documentation>\n  </xs:annotation>\n  <xs:restriction base=\"xs:NMTOKEN\">\n   <xs:enumeration value=\"substitution\"/>\n   <xs:enumeration value=\"extension\"/>\n   <xs:enumeration value=\"restriction\"/>\n   <xs:enumeration value=\"list\"/>\n   <xs:enumeration value=\"union\"/>\n  </xs:restriction>\n </xs:simpleType>\n\nTo handle utility types, the following changes to TraverseSchema were found to \nbe\nnecessary.\n\n    public DatatypeValidator getDatatypeValidator(String uri, String localpart) \n{\n\n        DatatypeValidator dv = null;\n\n        if (uri.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)) {\n            dv = fDatatypeRegistry.getDatatypeValidator( localpart );\n        }\n/**\n * tkamiya - 2001-08-06\n        else {\n            dv = fDatatypeRegistry.getDatatypeValidator( uri+\",\"+localpart );\n        }\n*/\n\n        if (dv == null)\n          dv = fDatatypeRegistry.getDatatypeValidator( uri+\",\"+localpart );\n\n        return dv;\n    }\n\n-Takuki Kamiya", "id": 4346, "time": "2001-08-07T17:01:52Z", "creator": "tkamiya@iona.com", "creation_time": "2001-08-07T17:01:52Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "pavani.mukthipudi@sun.com", "is_private": false, "id": 4891, "time": "2001-08-27T02:01:45Z", "bug_id": 3035, "creation_time": "2001-08-27T02:01:45Z", "tags": [], "text": "Xerces 1.4.x doesn't support \"schema for schema\" file parsing. All the Datatypes\nand other information needed to validate a schema file is hard-coded in the\nTraverseSchema and DatatypeValidatorFactoryImpl classes. That is, a Hashtable of\nall the datatypes and their corresponding validators is maintained and the\ngetDatatypeValidator() method gets the DatatypeValidator if it is present in the\nHashtable, else returns null. So even if the proposed change is made, it doesn't\nresult in parsing the \"schema for schema\"."}, {"count": 2, "tags": [], "bug_id": 3035, "attachment_id": null, "id": 4962, "time": "2001-08-28T10:12:15Z", "creator": "tkamiya@iona.com", "creation_time": "2001-08-28T10:12:15Z", "is_private": false, "text": "My proposed change indeed helped me to enable xerces 1.4.2 to recognize\nschema for schema. However, I found another workaround which essentially\ninvolves some significant tweaks in schema for schema itself to achive\nthe same effect without modifying xerces. Anyway, thanks for your comment!\n"}]
[{"count": 0, "tags": [], "creator": "nazonazo@miobox.jp", "attachment_id": null, "text": "There's a typo in APR_CHECK_PTHREAD_ROBUST_SHARED_MUTEX:\n\n--- build/apr_threads.m4\tSun Jun 18 12:00:00 2006\n+++ build/apr_threads.m4\tSun Jun 18 12:00:00 2006\n@@ -263,7 +263,7 @@\n         exit(2);\n     if (pthread_mutexattr_setrobust_np(&attr, PTHREAD_MUTEX_ROBUST_NP))\n         exit(3);\n-    if (pthread_mutexattr_setprotocol(&mattr, PTHREAD_PRIO_INHERIT))\n+    if (pthread_mutexattr_setprotocol(&attr, PTHREAD_PRIO_INHERIT))\n         exit(4);\n     if (pthread_mutex_init(&mutex, &attr))\n         exit(5);\n----------------------------------------------------------------------\nAnd, on a platform that implements pthread_mutexattr_setrobust_np()\n(such as Solaris), it would be nice to set pthread mutexes\nas the default process lock:\n\n--- configure.in\tSun Jun 18 12:00:00 2006\n+++ configure.in\tSun Jun 18 12:00:00 2006\n@@ -1637,6 +1637,8 @@\n # POSIX semaphores and cross-process pthread mutexes are not\n # used by default since they have less desirable behaviour when\n # e.g. a process holding the mutex segfaults.\n+# But if the system implements pthread_mutexattr_setrobust_np(),\n+# it's safe to use cross-process pthread mutexes.\n # The BEOSSEM decision doesn't require any substitutions but is\n # included here to prevent the fcntl() branch being selected\n # from the decision making.\n@@ -1647,6 +1649,11 @@\n             APR_DECIDE(USE_FCNTL_SERIALIZE, [SVR4-style fcntl()]))\n APR_IFALLYES(func:semget func:semctl define:SEM_UNDO,\n             APR_DECIDE(USE_SYSVSEM_SERIALIZE, [SysV IPC semget()]))\n+APR_IFALLYES(header:pthread.h define:PTHREAD_PROCESS_SHARED dnl\n+             func:pthread_mutexattr_setpshared dnl\n+             custom:apr_cv_mutex_robust_shared dnl\n+             file:/dev/zero,\n+            APR_DECIDE(USE_PROC_PTHREAD_SERIALIZE, [POSIX Thread Mutexes]))\n APR_IFALLYES(header:OS.h func:create_sem, \n             APR_DECIDE(USE_BEOSSEM, [BeOS Semaphores])) \n if test \"x$apr_lock_method\" != \"x\"; then\n--- build/apr_hints.m4\tSun Jun 18 12:00:00 2006\n+++ build/apr_hints.m4\tSun Jun 18 12:00:00 2006\n@@ -234,7 +234,7 @@\n     *-solaris2*)\n     \tPLATOSVERS=`echo $host | sed 's/^.*solaris2.//'`\n \tAPR_ADDTO(CPPFLAGS, [-DSOLARIS2=$PLATOSVERS -D_POSIX_PTHREAD_SEMANTICS\n-D_REENTRANT])\n-        APR_SETIFNULL(apr_lock_method, [USE_FCNTL_SERIALIZE])\n+        APR_SETIFNULL(apr_lock_method, [USE_PROC_PTHREAD_SERIALIZE])\n         # readdir64_r error handling seems broken on Solaris (at least\n         # up till 2.8) -- it will return -1 at end-of-directory.\n         APR_SETIFNULL(ac_cv_func_readdir64_r, [no])", "id": 90335, "time": "2006-06-18T05:25:01Z", "bug_id": 39833, "creation_time": "2006-06-18T05:25:01Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 39833, "text": "Thanks for the patch; committed to trunk and 1.2.x branch:\n\nhttp://svn.apache.org/viewvc?rev=415267&view=rev\nhttp://svn.apache.org/viewvc?rev=415268&view=rev\n\nThe default choice on Solaris does deliberately avoid use of \"robust\" mutexes,\nsee this thread:\n\nhttp://mail-archives.apache.org/mod_mbox/apr-dev/200406.mbox/%3c20040614104111.GA1964@redhat.com%3e\n\nI'd suggest discussing that issue further on dev@apr.apache.org.\n", "id": 90349, "time": "2006-06-19T10:21:51Z", "creator": "jorton@redhat.com", "creation_time": "2006-06-19T10:21:51Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "text": ">I'd suggest discussing that issue further on dev@apr.apache.org.\n\nI had tried to participate the dev@apr ML, but unfortunately rejected:\n\"spam score (5.2) exceeded threshold\"\n\nSo, sorry to post here...\n----------------------------------------------------------------------\nIn-Reply-To: <20040614104111.GA1964@redhat.com>\n\n>[1] supposedly on Solaris, this is solved for pthread mutexes by setting\n>the \"robust\" attribute, but evidence in bugzilla from at least one\n>tester was that mod_include segfaults using worker on Solaris could hang\n>the server. \n\nI guess this was caused by the bug (now fixed),\nthat is, the configure script didn't detect usability of\nthe robust attribute correctly, so robust mutexes weren't used.\nWith the fix, robust mutexes will be used and should work.", "attachment_id": null, "id": 90369, "creator": "nazonazo@miobox.jp", "time": "2006-06-19T17:39:32Z", "bug_id": 39833, "creation_time": "2006-06-19T17:39:32Z", "is_private": false}, {"count": 3, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "text": "The configure check was only broken since APR 1.2.6, the referenced discussion\non \"robust\" mutexes not being \"robust\" on Solaris predates 1.2.6 by several years.", "id": 93218, "time": "2006-09-08T12:46:52Z", "bug_id": 39833, "creation_time": "2006-09-08T12:46:52Z", "is_private": false}]
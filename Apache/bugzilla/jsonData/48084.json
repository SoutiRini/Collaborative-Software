[{"count": 0, "tags": [], "creator": "ishay.lavi@audiocodes.com", "text": "I use:\n------\nHTTPD version: httpd-2.2.13-win32-src\nPlatform: Windows, build with VC2005\n\n\n\nI build my application vs. libhttpd (Apache) library  (for adding HTTP server abilities), during application running it required to shutting down and then (after some time) to start this (HTTP) server again.\nThe procedure I used to initialize/shutting down this server is same as used in the Apache httpd project \u201cmain.c\u201d file with one difference, I set back the 'apr_app_init_complete' (defined at 'start.c' file) global variable (again 'erasing global variables' issue) to zero (cause server to read again the CLI 'argc'/'argv' argument).\n\nThe problem occur in the 2nd  running, exception occur.\nI debug it and I see that this issue caused by global (static) variables that initialized and doesn\u2019t erased after 1st server running.\n\nSpecifically I saw it for the \u2018hooks\u2019 ( \u201cstatic struct { members } _hooks;\u201d) global variable that defined at the \u2018apr_hooks.h\u2019 file, for the 1st running it\u2019s fields set to \u2018NULL\u2019 value, but at 2nd it keep illegal addresses from the 1st running.\n\n\n\nLocation for this acceptation:\n          APR_DECLARE(void *) apr_array_push(apr_array_header_t *arr)\n          {\nhere==>       if (arr->nelts == arr->nalloc) {\n                  int new_size = (arr->nalloc <= 0) ? 1 : arr->nalloc * 2;\n                  char *new_data;\n          \n                  new_data = apr_palloc(arr->pool, arr->elt_size * new_size);\n          .\n          .\n          .\n          }\n\n\nCall Stack for this exception:\n>\tlibapr-1.dll!apr_array_push(apr_array_header_t * arr=0x046299c0)  Line 109 + 0x6 bytes\tC\n \tlibhttpd.dll!ap_hook_create_connection(conn_rec * (apr_pool_t *, server_rec *, apr_socket_t *, long, void *, apr_bucket_alloc_t *)* pf=0x6ff0c430, const char * const * aszPre=0x00000000, const char * const * aszSucc=0x00000000, int nOrder=30)  Line 42 + 0x41 bytes\tC\n \tlibhttpd.dll!register_hooks(apr_pool_t * p=0x043905b0)  Line 3988\tC\n \tlibhttpd.dll!ap_register_hooks(module_struct * m=0x6ff47928, apr_pool_t * p=0x043905b0)  Line 427 + 0xc bytes\tC\n \tlibhttpd.dll!ap_add_module(module_struct * m=0x6ff47928, apr_pool_t * p=0x043905b0)  Line 554\tC\n \tlibhttpd.dll!ap_setup_prelinked_modules(process_rec * process=0x0438f5c8)  Line 697 + 0x12 bytes\tC\n\n\nNOTE: The called to apr_array_push() procedure added using the 'APR_IMPLEMENT_EXTERNAL_HOOK_BASE' macro (defined at 'apr_hooks.h' file).\n/** macro to implement the hook */\n#define APR_IMPLEMENT_EXTERNAL_HOOK_BASE(ns,link,name) \\\nlink##_DECLARE(void) ns##_hook_##name(ns##_HOOK_##name##_t *pf,const char * const *aszPre, \\\n                                      const char * const *aszSucc,int nOrder) \\\n    { \\\n    ns##_LINK_##name##_t *pHook; \\\n    if(!_hooks.link_##name) \\\n\t{ \\\n\t_hooks.link_##name=apr_array_make(apr_hook_global_pool,1,sizeof(ns##_LINK_##name##_t)); \\\n\tapr_hook_sort_register(#name,&_hooks.link_##name); \\\n\t} \\\n    pHook=apr_array_push(_hooks.link_##name); \\ .\n.\n.\n}", "id": 131490, "time": "2009-10-29T08:11:46Z", "bug_id": 48084, "creation_time": "2009-10-29T08:11:46Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "P.S\nI run it with the CLI -X (single process) option,\nI use the 'SIGNAL_PARENT_SHUTDOWN' signal (e.g. \"ap_signal_parent(SIGNAL_PARENT_SHUTDOWN)\") for terminate this (httpd) server.", "attachment_id": null, "id": 131558, "creator": "ishay.lavi@audiocodes.com", "time": "2009-11-02T02:56:47Z", "bug_id": 48084, "creation_time": "2009-11-02T02:56:47Z", "is_private": false}]
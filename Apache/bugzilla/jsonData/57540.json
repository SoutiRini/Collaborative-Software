[{"count": 0, "tags": [], "creator": "hauser@acm.org", "is_private": false, "text": "There is org.apache.tomcat.util.net.SSLSupport.CIPHER_SUITE_KEY and with \n\nrequest.getAttribute(SSLSupport.CIPHER_SUITE_KEY) , one can find out with cipher suite has been used between the client and the tomcat.\n\nHowever, it doesn't seem possible to do the same on the TLS version, therefore my suggestions:\n\n1) in SSLSuport create\n  a) public static final String PROTOCOL_VERSION_KEY =\n            \"javax.servlet.request.secure_protocol_version\";\n  b) public String getProtocol() throws IOException;\n\n2) in org.apache.tomcat.util.net.jsse.JSSESupport add\n\n   public String getProtocol() throws IOException {\n         if (session == null)\n            return null;\n        return session.getProtocol();\n    }\n\n   }\n\n3) in  org.apache.coyote.http11.Http11Processor.action() add\n\n                    sslO = sslSupport.getProtocol();\n                    if (sslO != null) {\n                        request.setAttribute\n                            (SSLSupport.PROTOCOL_VERSION_KEY, sslO);\n                    }", "id": 180785, "time": "2015-02-05T11:25:22Z", "bug_id": 57540, "creation_time": "2015-02-05T11:25:22Z", "attachment_id": null}, {"count": 1, "tags": [], "text": "4) furthermore, I suggest to add in org.apache.tomcat.util.net.jsse.openssl.Protocol\n\n    TLSv1_1(\"TLSv1.1\")", "attachment_id": null, "bug_id": 57540, "id": 180787, "time": "2015-02-05T11:40:04Z", "creator": "hauser@acm.org", "creation_time": "2015-02-05T11:40:04Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 57540, "is_private": false, "id": 180791, "time": "2015-02-05T12:45:05Z", "creator": "markt@apache.org", "creation_time": "2015-02-05T12:45:05Z", "tags": [], "text": "The key needs to be in the org.apache.tomcat name space, not the javax.servlet space since the Servlet name space is reserved."}, {"count": 3, "tags": [], "text": "thanks Mark, so  1a) should rather be:\n\n\"org.apache.tomcat.util.net.secure_protocol_version\"", "is_private": false, "id": 180797, "creator": "hauser@acm.org", "time": "2015-02-05T14:24:51Z", "bug_id": 57540, "creation_time": "2015-02-05T14:24:51Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57540, "text": "(In reply to Ralf Hauser from comment #1)\n> 4) furthermore, I suggest to add in\n> org.apache.tomcat.util.net.jsse.openssl.Protocol\n> \n>     TLSv1_1(\"TLSv1.1\")\n\nAnd \"TLSv1.0\" and/or \"TLSv1\".\n\nWould you care to prepare a patch? You've filed this against Tomcat 7, but if you can do it against the trunk (\"9.0\") if would be easier to deal with.", "id": 180810, "time": "2015-02-05T19:47:58Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-05T19:47:58Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 57540, "text": "(In reply to Christopher Schultz from comment #4)\n> (In reply to Ralf Hauser from comment #1)\n> > 4) furthermore, I suggest to add in\n> > org.apache.tomcat.util.net.jsse.openssl.Protocol\n> > \n> >     TLSv1_1(\"TLSv1.1\")\n> \n> And \"TLSv1.0\" and/or \"TLSv1\".\n> \n> Would you care to prepare a patch? You've filed this against Tomcat 7, but\n> if you can do it against the trunk (\"9.0\") if would be easier to deal with.\n\nPlease don't waste your time on either of these changes. They will not be applied as they will never be used. I recommend reading the Javadoc for that class to understand why.", "id": 180811, "time": "2015-02-05T19:52:35Z", "creator": "markt@apache.org", "creation_time": "2015-02-05T19:52:35Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 57540, "attachment_id": 32437, "id": 180814, "time": "2015-02-05T20:24:21Z", "creator": "hauser@acm.org", "creation_time": "2015-02-05T20:24:21Z", "is_private": false, "text": "Created attachment 32437\napache.tomcat.tls.protocol.57540.patch"}, {"count": 7, "tags": [], "text": "Reviewing the proposed patch:\n\n1. The changes to tomcat/util/net/jsse/openssl/Protocol.java need to be removed\n\n2. There looks to be the right hooks in tc-native to obtain the protocol so do that rather than throw an IOE for APR.\n\n3. Comment lines should wrap at 80 chars.\n\n4. The Javadoc comments starting \"as per...\" should not refer to this bug report but fully describe the elements they are documenting. I'd expect the description for the attribute name to be different to that for the method.", "attachment_id": null, "id": 180971, "creator": "markt@apache.org", "time": "2015-02-11T19:55:13Z", "bug_id": 57540, "creation_time": "2015-02-11T19:55:13Z", "is_private": false}, {"count": 8, "tags": [], "text": "(In reply to Ralf Hauser from comment #6)\n> Created attachment 32437 [details]\n> apache.tomcat.tls.protocol.57540.patch\n\nIs IOException the most natural exception type for SSLSupport.getProtocol? Under what circumstances do you expect an exception to be thrown (other than APR, which will probably not throw an IOException when properly-implemented)?\n\nIf you aren't going to implement it yet for APR, you could throw UnsupportedOperationException.... except that this code is called unconditionally and without any try/catch in Http11Protocol, so the patch as it stands will break requests coming from an APR connector. :(", "attachment_id": null, "bug_id": 57540, "id": 180993, "time": "2015-02-12T05:11:16Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-12T05:11:16Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 57540, "attachment_id": 32486, "is_private": false, "id": 181113, "time": "2015-02-17T15:22:06Z", "creator": "hauser@acm.org", "creation_time": "2015-02-17T15:22:06Z", "text": "Created attachment 32486\napache.tomcat.tls.protocol.57540c9.patch\n\nhopefully followed all the instructions by Mark and Christopher - please committ"}, {"count": 10, "tags": [], "bug_id": 57540, "attachment_id": null, "is_private": false, "id": 181114, "time": "2015-02-17T19:00:29Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-17T19:00:29Z", "text": "I'm evaluating this. The change for AprSSLSupport doesn't seem that onerous. Why didn't you implement that?"}, {"count": 11, "tags": [], "text": "Something is missing, here. I can't get the NIO connector to give me the protocol value. I changed the code to use \"(unknown)\" when the value returned by SSLSupport is null, and I'm not seeing that, either.\n\nI think something might be wrong with my test case.\n\nOne more note: AJP isn't supported by this patch, and I think it should be.", "attachment_id": null, "id": 181115, "creator": "chris@christopherschultz.net", "time": "2015-02-17T20:05:34Z", "bug_id": 57540, "creation_time": "2015-02-17T20:05:34Z", "is_private": false}, {"count": 12, "attachment_id": null, "bug_id": 57540, "is_private": false, "id": 181116, "time": "2015-02-17T20:13:02Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-17T20:13:02Z", "tags": [], "text": "Rats... looks like to support AJP, there need to be additional data sent by the proxy. There is no pre-defined field for SSL_PROTOCOL (similar to o.a.coyote.ajp.Constants.SC_A_SSL_CIPHER) so that'll need to wait."}, {"count": 13, "attachment_id": null, "bug_id": 57540, "is_private": false, "id": 181117, "time": "2015-02-17T20:41:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-17T20:41:41Z", "tags": [], "text": "Okay, the patch doesn't work as presented.\n\nIf you request the SSL protocol before any of the other SSL attributes, then the protocol comes back as null. That's because o.a.c.connector.Request.getAttribtue does some magic to trigger the loading of the SSL variables from the (physical) request into the request attributes.\n\nI'm working on an update to the patch that includes hooks for this magic."}, {"count": 14, "attachment_id": 32487, "bug_id": 57540, "is_private": false, "id": 181118, "time": "2015-02-17T20:51:42Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-17T20:51:42Z", "tags": [], "text": "Created attachment 32487\nUpdated patch\n\nThis patch supports APR-based connectors and also works when the SSL protocol is the first SSL attribute fetched from the request attributes.\n\nI'm not sure about how many places we like to define these key constants, so I'm asking for a review before I commit."}, {"count": 15, "tags": [], "bug_id": 57540, "attachment_id": null, "is_private": false, "id": 181121, "time": "2015-02-18T03:26:16Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-02-18T03:26:16Z", "text": "I added a proprietary request attribute named \"AJP_SSL_PROTOCOL\" to mod_jk in r1660504. It could be mapped to a uniform attribute name, e.g. \"org.apache.tomcat.util.net.secure_protocol_version\" or whatever is the final name from this patch here in the Tomcat connector.\n\nIf this featur here gets applied, I'll add the same extension to mod_proxy_ajp (httpd trunk) and will propose for backport to httpd 2.4/2.2."}, {"count": 16, "tags": [], "bug_id": 57540, "attachment_id": null, "id": 181134, "time": "2015-02-18T14:05:31Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-18T14:05:31Z", "is_private": false, "text": "I've got an updated patch with AJP support that I'm testing now."}, {"count": 17, "tags": [], "bug_id": 57540, "attachment_id": 32493, "id": 181136, "time": "2015-02-18T14:31:25Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-18T14:31:25Z", "is_private": false, "text": "Created attachment 32493\nUpdated patch\n\nUpdated patch to support AJP connections (only with mod_jk 1.2.41 and higher, and with an as-yet-unspecified version of mod_proxy_ajp)."}, {"count": 18, "tags": [], "text": "Comment on attachment 32493\nUpdated patch\n\nThe part for java/org/apache/coyote/ajp looks fine to me.\nThe rest also, but I didn't inspect it very thoroughly.\n\nFor testing with stable mod_jk (without the recent addition), something like\n\nSSLOptions StdEnvVars\n\nRewriteEngine On\nRewriteCond %{SSL:SSL_PROTOCOL} (.+)\nRewriteRule . - [ENV=AJP_SSL_PROTOCOL:%1]\n\nJkEnvVar AJP_SSL_PROTOCOL\n\nshould simulate the behavior.\n\nYou can check the httpd side of this by adding %{SSL_PROTOCOL}e and %{AJP_SSL_PROTOCOL}e to the LogFormat of your access log. Only if these two vars show useful values in the access log, has the Tomcat side (using your patch) a chance of working for AJP.", "is_private": false, "id": 181150, "creator": "rainer.jung@kippdata.de", "time": "2015-02-18T16:37:33Z", "bug_id": 57540, "creation_time": "2015-02-18T16:37:33Z", "attachment_id": 32493}, {"count": 19, "tags": [], "bug_id": 57540, "attachment_id": null, "id": 181151, "time": "2015-02-18T19:54:29Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-18T19:54:29Z", "is_private": false, "text": "I have a question about your implementation in mod_jk: why are you passing the SSL_PROTOCOL as a \"SC_A_REQ_ATTRIBUTE\" instead of a first-class piece of information, like SC_A_SSL_CIPHER is done?\n\nWould that represent a change to the protocol, since SC_A_SSL_CIPHER is a constant defined by the protocol and SSL_PROTOCOL has nothing yet defined?\n\nI'm going to commit this patch to trunk and then work on a proposal for a back-port, since a lot has changed between Tomcat 8 and the trunk at this point."}, {"count": 20, "tags": [], "bug_id": 57540, "attachment_id": null, "id": 181154, "time": "2015-02-18T20:48:57Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-02-18T20:48:57Z", "is_private": false, "text": "Some attributes are \"known\" in the AJP 1.3 protocol and their names are marshalled on the wire with hex abbreviations. Those must be known by the receiver as well otherwise it is a protocol violation. So new attributes can't simply get new hex abbreviations because then we would have a compativbility problem with old receivers.\n\nFor general (not \"known\") attributes there's the option to send their name as clear text. That's what we do here."}, {"count": 21, "tags": [], "text": "Fixed in trunk in r1660924.\n\nI'm working on back-porting this to Tomcat 8, since a lot has changed between Tomcat 8 and Tomcat 9/trunk.", "attachment_id": null, "bug_id": 57540, "id": 181175, "time": "2015-02-19T16:45:54Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-19T16:45:54Z", "is_private": false}, {"count": 22, "attachment_id": null, "bug_id": 57540, "text": "Fixed in Tomcat 8 in r1660953. Will be in Tomcat 8.0.21.\n\nI'll see about back-porting to Tomcat 7. It should be easy at this point.", "id": 181180, "time": "2015-02-19T17:51:19Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-19T17:51:19Z", "tags": [], "is_private": false}, {"count": 23, "tags": [], "bug_id": 57540, "attachment_id": null, "id": 181182, "time": "2015-02-19T18:39:41Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-02-19T18:39:41Z", "is_private": false, "text": "Fixed in Tomcat 7 in r1660966. Will be in Tomcat 7.0.60.\n\nI do not intend to back-port this to Tomcat 6."}, {"count": 24, "tags": [], "bug_id": 57540, "attachment_id": null, "id": 181205, "time": "2015-02-20T07:34:01Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-02-20T07:34:01Z", "is_private": false, "text": "Support to forward the info via AJP has been added to mod_proxy_ajp in httpd trunk in r1661067. The feature has been proposed for addition to mod_proxy_ajp in httpd 2.4."}, {"count": 25, "tags": [], "text": "The support in mod_proxy_ajp was ported to Apache 2.4 today as r1662076.\nIt will be part of the next Apache HTTP server release 2.4.13.", "is_private": false, "id": 181306, "creator": "rainer.jung@kippdata.de", "time": "2015-02-24T18:36:06Z", "bug_id": 57540, "creation_time": "2015-02-24T18:36:06Z", "attachment_id": null}]
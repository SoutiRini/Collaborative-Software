[{"count": 0, "tags": [], "creator": "max@berger.name", "attachment_id": null, "is_private": false, "id": 88537, "time": "2006-04-27T05:22:47Z", "bug_id": 39422, "creation_time": "2006-04-27T05:22:47Z", "text": "Dear developers,\n\nI know the font system is currently undergoing changes. Please excuse this if this gets fixed soon.\n\nWhen rendering a document containing \"special\" characters to pdf, they get shown as # instead of the \nright character.\n\n(fop svn, current checkout)\n\nFor a full example, see the attached test file.\n\nExample:\ntest &#x2211; test\n\nshould render: test E test (where E is the sigma character).\n\nOn the pdf output I get:\ntest # test\n\nAWT output works fine.\n\nI don't know if this is specific to a Mac system. I have no user fonts installed.\n\n(What it should do is figure out that the standard font does not have the SIGMA character and switch to \nthe symbol font).\n\nIf there is no one working on it and you point me in the right direction I may be able to provide a patch.\n\nMax"}, {"count": 1, "tags": [], "bug_id": 39422, "attachment_id": 18189, "id": 88538, "time": "2006-04-27T05:24:09Z", "creator": "max@berger.name", "creation_time": "2006-04-27T05:24:09Z", "is_private": false, "text": "Created attachment 18189\nA small test file using the summation (sigma) character"}, {"count": 2, "tags": [], "creator": "jeremias@apache.org", "attachment_id": null, "text": "What you describe is a better coverage of the behaviour described by the\n\"font-selection-strategy\" property. It would really be good if we had that. You\nmight want to check with Vincent Hennebert if he hasn't already done work in\nthis area. If he hasn't this should clash too much with Vincent's work.\n\nI haven't given much thought to how this would have to be implemented. I assume\nthe FOText objects (o.a.fop.fo package) would have to be split after the right\nfont for each snippet has been determined. But I'm not sure if this is enough.", "id": 88545, "time": "2006-04-27T08:08:00Z", "bug_id": 39422, "creation_time": "2006-04-27T08:08:00Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 39422, "text": "In am not sure if fo-tree is the right place to fix this. I've also noticed the\nsame behavior when an SVG graphics contains a SIGMA sign. It renders fine in the\nAWT output (squiggle, or AWT in fop), but not in the PDF version.", "id": 88568, "time": "2006-04-27T16:15:47Z", "creator": "max@berger.name", "creation_time": "2006-04-27T16:15:47Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "vhennebert@gmail.com", "attachment_id": null, "text": "This is because the default fonts used for AWT output have more glyphs than the\nBase14 fonts used for PDF output.\n\nAnd yes this is a font-selection-strategy issue. I haven't studied it yet in\ndetail, but my idea is that this shouldn't be dealt with at the font system\nlevel. Rather the font system should provide facilities like getting the set of\nglyphs which cannot be rendered in a given String, or perhaps getting the fonts\nwhich can display a given glyph.\n\nIt's probably not worth starting to write code right now, as lots of things will\ncertainly change with the new font system. But if you're interested you may have\na look at the aXSL interface (www.axsl.org), which is the interface that the new\nfont system will implement. You may look if the provided methods help solving\nthis problem, what's missing, and where and how to implement\nfont-selection-strategy, within Fop, on top of that. This would certainly ease\nthe implementation once the migration is done.\n\nVincent", "id": 88587, "time": "2006-04-27T22:07:59Z", "bug_id": 39422, "creation_time": "2006-04-27T22:07:59Z", "is_private": false}, {"count": 5, "tags": [], "text": "Dear Vincent,\n\nsome kind of \"hasGlyph\" function is most certainly necessary. And maybe some helper functions to go \nwith it, but these can be easlily implementing using the \"hasGlyph\"\n\nthe current font system has a \"hasChar\" function:\n  public boolean hasChar(char c);\n \nI've added a tracker item for axsl\n\nhttp://sourceforge.net/tracker/index.php?func=detail&aid=1478049&group_id=123259&atid=695974\n\n---\n\nI've also found the source of my '#'. It is is o.a.f.render.pdf.PDFRenderer#escapeText:\n\n            if (fs.hasChar(orgChar)) {\n                ch = fs.mapChar(orgChar);\n                int tls = (i < l - 1 ? parentArea.getTextLetterSpaceAdjust() : 0);\n                glyphAdjust -= tls;\n            } else {\n                if (CharUtilities.isFixedWidthSpace(orgChar)) {\n                    //Fixed width space are rendered as spaces so copy/paste works in a reader\n                    ch = fs.mapChar(CharUtilities.SPACE);\n                    glyphAdjust = fs.getCharWidth(ch) - fs.getCharWidth(orgChar);\n                } else {\n                    ch = fs.mapChar(orgChar);\n                }\n            }\n\nand by default fs.mapChar(orgChar) returns '#' if the char is not in that font. \n\n----\n\nso my \"dirty hack\" solution would be:\n- if glyph is not in font, go through list of all fonts until you find a font that has this glyph, use it \ninstead.\n\na good solution would be:\n- get a list of all fonts supporting that glyph. Find the one that is the \"best match\". use it.\n\nMax\n", "is_private": false, "id": 88598, "creator": "max@berger.name", "time": "2006-04-27T23:13:27Z", "bug_id": 39422, "creation_time": "2006-04-27T23:13:27Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 39422, "text": "(In reply to comment #5)\n\nHi Max:\n\n> I've added a tracker item for axsl\n> http://sourceforge.net/tracker/index.php?\nfunc=detail&aid=1478049&group_id=123259&atid=695974\n\nI am responding to the aXSL request here so that I can pick up the existing \nthread. The aXSL methods you are looking for are:\nFontUse boolean glyphAvailable(int codePoint)\nFontUse int unavailableChar(CharSequence chars, int beginIndex)\nFontUse int[] unavailableChars(CharSequence chars, int beginIndex)\n\nThese methods are in FontUse instead of Font so that we can properly deal with \nEncoding issues, mostly for Type1 fonts. FontUse is the intersection of a Font, \na FontConsumer, and an Encoding. FontUse instances are what get returned by the \nfont-selection methods. For a glyph to be usable by your application, it must \nboth 1) be available in the font, and 2) encodable by the font's encoding.\n\n> so my \"dirty hack\" solution would be:\n> - if glyph is not in font, go through list of all fonts until you find a font \nthat has this glyph, use it \n> instead.\n> a good solution would be:\n> - get a list of all fonts supporting that glyph. Find the one that is \nthe \"best match\". use it.\n\nThis might be permissible under font-selection-strategy=\"auto\", but I rather \nthink would only be permissible as a fallback. What you probably really want is \nto implement the font-selection-strategy=\"character-by-character\". The font-\nselection methods in aXSL require one codepoint to be passed, presumably the \nfirst codepoint that needs to be encoded. Then, using the methods noted above, \nyour application needs to determine whether the remaining text can use the same \nfont. If not, the font-selection method needs to be consulted again, this time \npassing the codepoint that is not served by the first font selected. IIRC, the \nlast time I looked at FOP code, it took the first font-family in the list and \nused it for all text within scope, simply using a # glyph if the desired glyph \nwas not available. I think Vincent is working on changing that, but I don't \nmonitor the FOP lists, and don't know the status. When I implemented this in \nFOray, the hard part was not the algorithm, but finding the place to store its \nresults. Either the FOTree or AreaTree has to know how to segment a chunk of \ntext based on font selection.\n\nSo, although the font system provides tools that are needed for the correct \nalgorithm, it doesn't have any control over whether the correct algorithm is \nused.\n\nSince the XSL-FO \"font-family\" property is really a *list*, to ensure that you \nget a sigma character, you might say font-family=\"Base14-Helvetica, Base14-\nSymbol\". Assuming the other font-selection criteria allow it, your sigma \ncharacter would then be handled by the Base14-Symbol font.\n\nHTH.\n\nVictor Mote", "id": 88605, "time": "2006-04-28T00:37:04Z", "creator": "vic@outfitr.com", "creation_time": "2006-04-28T00:37:04Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 39422, "attachment_id": null, "id": 88633, "time": "2006-04-28T16:03:17Z", "creator": "max@berger.name", "creation_time": "2006-04-28T16:03:17Z", "is_private": false, "text": "I really think it is counterintuitive to have to add \"symbol\" to my list of favorite fonts. Unfortunately this \nwhat the spec says (xsl 1.1 / 7.9.2). So the proper font-selection strategy would solve the problem \npresented in my original file. Then I guess I'll just have to wait for that...\n\nThen  I have to wishes for that. The first is that the \"Symbol\" and \"ZapfDingbats\"  are part of the \n\"default\" font lists, such as the one when you do not specify a font and when you specify a generic font \nsuch as \"serif\" or \"sans-serif\".\n\nThe second wish is a warning when an unsupported glyph is encountered. The PSRenderer does that \ncurrently.\n\nThe next problem, however, is the inclusion of SVG graphics that contain glyphs. I'll attach a sample file \nthat works fine in svg viewers, but not within a fop-pdf due to the same font issues. Or would this be a \nbatik / xmlgraphics issue?\n"}, {"count": 8, "tags": [], "creator": "max@berger.name", "attachment_id": 18200, "text": "Created attachment 18200\nSample SVG with a SIGMA character", "id": 88634, "time": "2006-04-28T16:04:13Z", "bug_id": 39422, "creation_time": "2006-04-28T16:04:13Z", "is_private": false}, {"count": 9, "tags": [], "text": "Here is some additional info.\n\nWhen looking for the font-mechanism, I noticed a lot of duplicate code between\no.a.f.svg.PDFGraphics2D#drawString\nand\no.a.f.render.pdf.PDFRenderer#drawWord\n\nIMO a lot of this should go into a common place, ideally even into xmlgraphics:\norg.apache.xmlgraphics.pdf sounds like a very good place....\n\nFor the SVG graphics this seems suddently much easier, as there already is a \"drawString\" method \nwhich is able to switch fonts. \n\nSo here's a possible solution for my SVG problem:\n- make the simpler drawString method call the attributed one. (shouldn't hurt). They have lots of \nduplicated code anyways.\n- implement automatic font switching in the attributed drawString method. (Simple for now, and maybe \nmore sophisticated in the future).  Have it in an external function so that it can be reused later.\n\nFor the special characters in the text i'll wait for the new font system.", "attachment_id": null, "id": 88648, "creator": "max@berger.name", "time": "2006-04-29T03:47:24Z", "bug_id": 39422, "creation_time": "2006-04-29T03:47:24Z", "is_private": false}, {"count": 10, "tags": [], "creator": "max@berger.name", "attachment_id": 18205, "is_private": false, "id": 88652, "time": "2006-04-29T06:59:01Z", "bug_id": 39422, "creation_time": "2006-04-29T06:59:01Z", "text": "Created attachment 18205\npatch for PDFGraphics2D that enables rendering of special characters\n\nThis patch implements the strategy from my last comment.\n\nThe font-selection is very basic and just tries Symbol and ZapfDingbats (which\nare most likely to have the desired character)\n\nUsing this patch enables my svg-formulas to be displayed correctly. For the\nin-fo-text characters I'll wait for the font redesign."}, {"count": 11, "tags": [], "text": "resetting P2 open bugs to P3 pending further review", "is_private": false, "id": 157428, "creator": "gadams@apache.org", "time": "2012-04-07T01:42:50Z", "bug_id": 39422, "creation_time": "2012-04-07T01:42:50Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 39422, "text": "increase priority for bugs with a patch", "id": 157859, "time": "2012-04-11T03:21:14Z", "creator": "gadams@apache.org", "creation_time": "2012-04-11T03:21:14Z", "is_private": false, "attachment_id": null}]
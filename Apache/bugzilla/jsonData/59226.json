[{"count": 0, "tags": [], "text": "Running an embedded instance as 'java -jar <thin-jar-with-dependencies-in-manifest>' StandardJarScanner ignores jars in manifest Class-path header.\n\nThe reason is system class loader does not expose these jars via getURLs() as explained in the following SO question.\n \nhttp://stackoverflow.com/questions/35922072/scanning-manifest-classpath-jars-in-embeeded-tomcat/36185408#36185408", "is_private": false, "id": 189688, "creator": "idelvall@brutusin.org", "time": "2016-03-23T23:33:44Z", "bug_id": 59226, "creation_time": "2016-03-23T23:33:44Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 59226, "attachment_id": null, "id": 189689, "time": "2016-03-23T23:38:34Z", "creator": "idelvall@brutusin.org", "creation_time": "2016-03-23T23:38:34Z", "is_private": false, "text": "Added PR in GitHub\n\nhttps://github.com/apache/tomcat80/pull/5"}, {"count": 2, "tags": [], "bug_id": 59226, "attachment_id": null, "id": 190610, "time": "2016-04-27T19:22:48Z", "creator": "markt@apache.org", "creation_time": "2016-04-27T19:22:48Z", "is_private": false, "text": "Notes:\n- The web application class loader will ignore any Class-Path entries in a manifest.\n- Any class loader above that (common, server, shared, etc.) will process Class-Path entries for any JAR on the class path.\n- The proposed patch requires JARs referenced by the Class-Path header must contain a manifest in order to be scanned. A solution without this limitation is preferred."}, {"count": 3, "tags": [], "bug_id": 59226, "attachment_id": null, "is_private": false, "id": 190619, "time": "2016-04-28T10:28:11Z", "creator": "idelvall@brutusin.org", "creation_time": "2016-04-28T10:28:11Z", "text": "Hi Mark, this  problem comes for system (application) class loader, that is responsible of handling class-path entries, not returning manifest jar urls when executed as java -jar.\n\nIf there is a portable way of knowing the executable jar at runtime, the solution would be trivial: just parse its manifest class path entries. But there is not (AFAIK)\n\nThe suggested change does not get jar entries from the class-path header of the manifest, instead it infers jar entries from the enumeration of manifest that it sees (and its parent don't)\n\nIt is true that it requires jars referenced in the manifest of the executable jar to have a manifest in order to be scanned, but this improves the current behavior of not scanning them at all\n\nFor code simplicity I added the same processing for every class loader in Tomcat, but it is true, that I adds a little overhead, so I have just created a new pull request that applies the hack only to the system class loader."}, {"count": 4, "tags": [], "creator": "markt@apache.org", "is_private": false, "text": "(In reply to Ignacio del Valle Alles from comment #3)\n> Hi Mark, this  problem comes for system (application) class loader, that is\n> responsible of handling class-path entries, not returning manifest jar urls\n> when executed as java -jar.\n\nNo, the problem is wider than that. See the second of my notes in comment #2 above.\n\n> If there is a portable way of knowing the executable jar at runtime, the\n> solution would be trivial: just parse its manifest class path entries. But\n> there is not (AFAIK).\n\nNot relevant. See above.\n\n> The suggested change does not get jar entries from the class-path header of\n> the manifest, instead it infers jar entries from the enumeration of manifest\n> that it sees (and its parent don't).\n>\n> It is true that it requires jars referenced in the manifest of the\n> executable jar to have a manifest in order to be scanned, but this improves\n> the current behavior of not scanning them at all\n\nIt is arguable whether a flawed solution is better than no solution. My preference is to fix it properly.\n\n> For code simplicity I added the same processing for every class loader in\n> Tomcat, but it is true, that I adds a little overhead, so I have just\n> created a new pull request that applies the hack only to the system class\n> loader.\n\nLimiting the scan to the system class loader is as flawed as including the web application class loader.", "id": 190620, "time": "2016-04-28T10:39:30Z", "bug_id": 59226, "creation_time": "2016-04-28T10:39:30Z", "attachment_id": null}, {"count": 5, "text": "Hint: Rather than inferring the JARs added to the class path via one or more manifests, process the manifests and determine the JARs that have been added.", "creator": "markt@apache.org", "is_private": false, "id": 190621, "time": "2016-04-28T10:47:24Z", "bug_id": 59226, "creation_time": "2016-04-28T10:47:24Z", "tags": [], "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to Mark Thomas from comment #4)\n> (In reply to Ignacio del Valle Alles from comment #3)\n> > Hi Mark, this  problem comes for system (application) class loader, that is\n> > responsible of handling class-path entries, not returning manifest jar urls\n> > when executed as java -jar.\n> \n> No, the problem is wider than that. See the second of my notes in comment #2\n> above.\n> \n> > If there is a portable way of knowing the executable jar at runtime, the\n> > solution would be trivial: just parse its manifest class path entries. But\n> > there is not (AFAIK).\n> \n> Not relevant. See above.\n> \n> > The suggested change does not get jar entries from the class-path header of\n> > the manifest, instead it infers jar entries from the enumeration of manifest\n> > that it sees (and its parent don't).\n> >\n> > It is true that it requires jars referenced in the manifest of the\n> > executable jar to have a manifest in order to be scanned, but this improves\n> > the current behavior of not scanning them at all\n> \n> It is arguable whether a flawed solution is better than no solution. My\n> preference is to fix it properly.\n> \n> > For code simplicity I added the same processing for every class loader in\n> > Tomcat, but it is true, that I adds a little overhead, so I have just\n> > created a new pull request that applies the hack only to the system class\n> > loader.\n> \n> Limiting the scan to the system class loader is as flawed as including the\n> web application class loader.\n\nMy reasoning was based on the wrong assumption that these entries were only read by the System class loader and only when executed as \"java -jar\" (don't ask me why). So yes, the solution is simpler and can be implemented just by scanning the manifest. I'll work on it and send a new PR", "attachment_id": null, "id": 190622, "creator": "idelvall@brutusin.org", "time": "2016-04-28T11:53:13Z", "bug_id": 59226, "creation_time": "2016-04-28T11:53:13Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 59226, "attachment_id": null, "is_private": false, "id": 190640, "time": "2016-04-29T08:51:05Z", "creator": "idelvall@brutusin.org", "creation_time": "2016-04-29T08:51:05Z", "text": "Just added a new PR on GitHub.\nBasically what it does is from the jar url returned by a url class loader start a DFS traversal over the graph of related jars (the relation is transitive)"}, {"count": 8, "tags": [], "text": "Update.\n\nI've spent a fair amount of time looking at the proposed patch to see if there is a way to avoid processing a JAR once to look at the class path and again to scan it. I think it is possible but it is going to need some refactoring.\n\nRegarding the proposed patch, it doesn't handle all of the cases that the Jar Scanner does (packed WARs, exploded JARs, etc.) which is why I'd prefer to do this in a single scan.\n\nReviewing the code has also uncovered some minor bugs that need to be fixed.", "attachment_id": null, "id": 190699, "creator": "markt@apache.org", "time": "2016-05-03T08:44:00Z", "bug_id": 59226, "creation_time": "2016-05-03T08:44:00Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 59226, "attachment_id": null, "is_private": false, "id": 190700, "time": "2016-05-03T10:00:22Z", "creator": "idelvall@brutusin.org", "creation_time": "2016-05-03T10:00:22Z", "text": "I see. I'll think about it to too.\nCan you give more details on these minor bugs?"}, {"count": 10, "text": "Thanks for the report and the proposed patches. While the proposed patches weren't used, it was very helpful to have an alternative point of view when exploring options for resolving this issue.\n\nThe fix has been applied to:\n9.0.x for 9.0.0.M5 onwards\n8.5.x for 8.5.1 onwards\n8.0.x for 8.0.34 onwards", "creator": "markt@apache.org", "attachment_id": null, "id": 190720, "time": "2016-05-04T13:05:47Z", "bug_id": 59226, "creation_time": "2016-05-04T13:05:47Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "text": "Thank you", "is_private": false, "id": 190722, "creator": "idelvall@brutusin.org", "time": "2016-05-04T13:22:06Z", "bug_id": 59226, "creation_time": "2016-05-04T13:22:06Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 59226, "attachment_id": null, "is_private": false, "id": 192920, "time": "2016-08-05T15:24:45Z", "creator": "saschakarcher@gmx.de", "creation_time": "2016-08-05T15:24:45Z", "text": "Just found an interesting problem:\nWe're trying to migrate a bunch of webapps from tomcat 7 to 8.5.4 with the goal in mind not to change too much.\nOur Tomcat has got a whole bunch of 3rd party libraries in a separate folder which is loaded by the common (or shared) class loader (i.e. not in WEB-INF/lib).\n\nSince current version of StandardJarScanner now also follows the class-path in header in the JARs manifest.mf, it tries and fails to load all those additional JARS mentioned in the manifest. But we never hat these additional JARS in classpath and collecting them all is a bit of not so funny work although feasible.\n\nDon't get me wrong. I understand that following the class-path mentioned in the manifest.mf files is technically totally correct. But it somehow complicates migration of already existing apps.\n\nWouldn't it be useful to have sort of \"don't resolve class-path header\" switch (with default FALSE) but giving the the option to do so?\n\nWhat do you guys thing?\n\nOr have I just missed an already existing workaround?"}, {"count": 13, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 192926, "creation_time": "2016-08-05T18:38:53Z", "time": "2016-08-05T18:38:53Z", "bug_id": 59226, "text": "I haven't checked the code but you might be able to use jarsToSkip or a JarScanFilter to not scan them.\n\nFailing that, a new enhancement request to make the manifest processing option sounds reasonable. I'd avoid the double negative though and have processManifest (or similar) with a default of true.", "is_private": false}, {"count": 14, "tags": [], "text": "I totally agree that this double negation would be confusing.\n\nUnfortunatelly jarsToSkip and <JarScanFilter> does not help in that case, because at least one of the JARs contains TLDs (Which I do want to be scanned) and additionally the unwanted class-path entry (which I don't want the StandardJarScanner to follow) in it's manifest.\n\nI can't judge how specific this problem is and if other tomcat users experience similar problems but once I open an enhancement request the experienced developers hopefully judge according to their experience.", "attachment_id": null, "id": 192954, "creator": "saschakarcher@gmx.de", "time": "2016-08-08T15:39:07Z", "bug_id": 59226, "creation_time": "2016-08-08T15:39:07Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 59226, "attachment_id": null, "id": 193762, "time": "2016-09-16T14:09:42Z", "creator": "mauromol@tiscali.it", "creation_time": "2016-09-16T14:09:42Z", "is_private": false, "text": "I think I also encountered this problem after deploying in Tomcat 8.5.5 a webapp previously run in Tomcat 8.0.14.\nI have a lot of WARNING: file not found for JARs mentioned in useless Class-Path entries in JARs deployed in WEB-INF/lib, like jaxb-impl-2.1.13.jar (which mentions \"jaxb-api.jar activation.jar jsr173_1.0_api.jar jaxb1-impl.jar\") or \nxalan-2.7.2.jar (which mentions \"xercesImpl.jar xml-apis.jar serializer.jar\").\n\nFact is that some of those JARs (at least those I really need) are deployed with different names (with a version specifier, for instance), as resolved by tools like Gradle or Maven).\n\nSo my Tomcat log on startup is now full of these warnings that look like errors a lot (they're complete with stack traces).\n\nMaybe lowering the log output to debug level and/or remove stack traces could also be much less intrusive than the current bevahiour?"}, {"count": 16, "tags": [], "bug_id": 59226, "attachment_id": null, "id": 193763, "time": "2016-09-16T14:13:08Z", "creator": "markt@apache.org", "creation_time": "2016-09-16T14:13:08Z", "is_private": false, "text": "See bug 59961"}]
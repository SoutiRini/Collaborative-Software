[{"count": 0, "attachment_id": null, "bug_id": 24606, "is_private": false, "id": 47178, "time": "2003-11-11T14:27:54Z", "creator": "yoavs@computer.org", "creation_time": "2003-11-11T14:27:54Z", "tags": [], "text": "A user requested allowing Objects, rather than just Strings, as NDC keys.  I \ndon't see a particular problem with this request, but it needs to be considered \ncarefully.  The user's patch is attached."}, {"count": 1, "tags": [], "creator": "yoavs@computer.org", "text": "Created attachment 9057\nDiff to NDC class", "id": 47179, "time": "2003-11-11T14:28:13Z", "bug_id": 24606, "creation_time": "2003-11-11T14:28:13Z", "is_private": false, "attachment_id": 9057}, {"count": 2, "tags": [], "text": "I was the user submitting the patch.\n\nI recently replaced our website's dubious logging-mechanism with log4j.\nIn the course of doing so I stumbled upon the fact that the NDC only accepts\nStrings as context information.\n\nIn the case of our web-application the context information is rather complex. \nIt consists of all information necessary to answer a\nhttp-request, which are :\n- URL parameter\n- POST parameter\n- current Session state of the user\n- an Access-History containing a short information about all requests  by that\nuser in the current session\n\nTo collect all this information and transform it into a string dump\nis costly, especially if all this is only necessary if there's really\na log-entry with the current NDC.\n\nThe patch makes it possible to pass context information as Object \nand uses that Object's toString() to get the actual information.\n\nThe advantage is that you can push an Object-Reference and have it only\nevaluated if there is really a call to NDC.get()\n\n(If you replace NDC.pop() with NDC.popObject() which will not evaluate\n the context information to pop it :-) \n\nThe modified version is compatible with existing client-side-code and\nshould be running at same speed. \n(Maybe a bit faster cause it saves one temporary String per NDC-level \n and uses only one temporaryStringBuffer if the NDC.get() is called)\n", "attachment_id": null, "id": 47180, "creator": "helmberger@amaris.de", "time": "2003-11-11T14:43:55Z", "bug_id": 24606, "creation_time": "2003-11-11T14:43:55Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 24606, "text": "Created attachment 9682\nEnhanced patch version, replaces above patch", "id": 49598, "time": "2003-12-23T12:06:50Z", "creator": "helmberger@amaris.de", "creation_time": "2003-12-23T12:06:50Z", "is_private": false, "attachment_id": 9682}, {"count": 4, "tags": [], "bug_id": 24606, "attachment_id": null, "is_private": false, "id": 49599, "time": "2003-12-23T12:09:10Z", "creator": "helmberger@amaris.de", "creation_time": "2003-12-23T12:09:10Z", "text": "The new patch introduces one new Method to NDC :\n\npublic Vector contexts()\n\nOffers the possibility to access the complete Object stack as Objects.\nthis is useful for filtering LogEvents based on context.\n\n"}, {"count": 5, "tags": [], "bug_id": 24606, "text": "If you still want this patch submitted, please raise it on the log4j-dev \nmailing list to get committer consensus.  I'm not at ease to commit this patch \nwithout review from other committers.", "id": 68508, "time": "2004-12-14T21:15:58Z", "creator": "yoavs@computer.org", "creation_time": "2004-12-14T21:15:58Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "genman@noderunner.net", "attachment_id": null, "is_private": false, "id": 98625, "time": "2007-01-28T01:19:12Z", "bug_id": 24606, "creation_time": "2007-01-28T01:19:12Z", "text": "\nFor 1.3:  The best way to deal with this would be to write your own NDC class\n(call it ONDC or something) then register a pattern converter to convert, say\n\"%Q\" in your log output to the value of ONDC.get().\n\nChanging the NDC to support non-String values seems to go against the original\nclass design, which unfortunately is quite fixed.  Yes, it is a shame NDC was\nmade String-centric (String-only is a design problem with many Log4J APIs), but\ncompatibility is a main requirement."}]
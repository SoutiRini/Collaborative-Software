[{"count": 0, "attachment_id": null, "bug_id": 23900, "text": "I created a build script to compile 2 projects. The second project refers to the\nfirst project. The classpath for the second project is in the form\n\nCLASSPATH=${PROJECT2_SRC};${PROJECT2_SRC}\n\nIf I compile from the command line, it works. But from ant it does not.", "id": 45863, "time": "2003-10-17T20:27:04Z", "creator": "Adalbert.Homa@metavante.com", "creation_time": "2003-10-17T20:27:04Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 23900, "attachment_id": 8613, "id": 45864, "time": "2003-10-17T20:30:35Z", "creator": "Adalbert.Homa@metavante.com", "creation_time": "2003-10-17T20:30:35Z", "is_private": false, "text": "Created attachment 8613\nBuild files to reproduce the problem"}, {"count": 2, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 46050, "time": "2003-10-22T13:23:13Z", "bug_id": 23900, "creation_time": "2003-10-22T13:23:13Z", "is_private": false, "text": "You pout to project1's sources instead of the compiled classes in your\nCLASSPATH.  If you add ${build.dir}/project1 to your second javac task, it will\nwork.  The alternative is to use a nested <src> element to point to project1's\nsources in the second task, but you'd be compiling the sources of project1 twice\nthat way."}, {"count": 3, "tags": [], "bug_id": 23900, "attachment_id": null, "id": 46060, "time": "2003-10-22T14:40:36Z", "creator": "Adalbert.Homa@metavante.com", "creation_time": "2003-10-22T14:40:36Z", "is_private": false, "text": "You are right, your work around will work, but this is not what I want. This is\na case when the javac compiler inside ant does not work as the javac compiler\noutside ant.\nWhat I want is to reference the source not the compiled files. The javac\ncompiler knows how to handle this situation (when the compiler does not find a\ncompiled class, it will search for a Java source file, using the CLASSPATH).\n\nWe are using Rational (IBM) Clearcase as our version control. Clearcase has an\naudit feature that can trace what files are accessed during a compilation. By\nmaking sure the compilation will access only source files not compiled files, I\nwill get a clean list of dependencies on the Java sources."}, {"count": 4, "tags": [], "bug_id": 23900, "attachment_id": null, "id": 46071, "time": "2003-10-22T16:27:19Z", "creator": "stevel@apache.org", "creation_time": "2003-10-22T16:27:19Z", "is_private": false, "text": "That is what the sourcepath attribute in <javac> is for."}]
[{"count": 0, "text": "Hi,\n\nwe find out that there is a memory leak in Tomcat 4.1.31 and\nTomcat 5.0.28 when using the JspWriter in inner JSP-TAGS.\n\nWe create a very small jsp (and an easy jsp-tag)\nwhich we place in a test webapp and start it \nusing the following command:  \"http://127.0.0.1:8080/test/memtest?i=<number>\".\n\nWe this example application we got the following results\n(Used/Total memory in MB):\n\n\nTomcat 4.1.31\n=============\n\nNumber   Used   Total   ResponseTime\n\n\n10.000   5.045  15.802  3 Sec\n20.000   5.500  15.802  5 Sec\n30.000   5.962  15.802  45 Sec\n40.000   5.962  15.802  120 Sec\n80.000   no response in 6 Minutes !!!\n40.001   8.262  15.802  1 Sec\n20.001   8.266  15.802  1 Sec\n\n\n\nTomcat 5.0.28\n=============\n\nNumber   Used   Total   ResponseTime\n\n\n10.000   4.900  14.344  1 Sec\n20.000   5.900  14.344  1 Sec\n30.000   6.400  14.344  1 Sec\n40.000   6.600  14.344  2 Sec\n80.000   8.491  15.200  2 Sec\n40.001   8.491  15.200  1 Sec\n20.001   8.491  15.200  1 Sec\n\n\nConclusion:\n==========\n\nTomcat 5.0.28 is much faster and stabil for this testcase.\nTomcat 4.1.31 becomes fast after the big memory is allocated.\nBoth versions did not release the memory.\nThe above data results can be reproduced.\n\nThe memory problem occurs only if we create large\namount of data in an inner tag.\n\nUser JSP:\n\n<%@ page errorPage=\"/util/errorpge.jsp\"\n   import=\"java.beans.*, java.lang.reflect.*, java.util.*, java.sql.*, \njava.lang.*, java.text.*, java.io.* \"\n%>\n<%@ taglib uri=\"http://www.test.de/jsp/\" prefix=\"dbs\"%>\n<%\n  // response.setDateHeader(\"Expires\", 0);\n  String amount = request.getParameter(\"i\");\n  int ii = new Integer(amount).intValue();\n%>\n\n<html>\n<p>BEFORE <p>\n<dbs:SelectMemTest>\n  <p>inner before <%=amount%>\n  <%\n    for (int i = 0; i < ii; i++) {\n      out.println(\"<br><p>\"+i+\" and next\");\n    }\n  %>\n  <p>inner after\n</dbs:SelectMemTest>\n<p>after<p>\n\n<%\n  Runtime runtime = Runtime.getRuntime();\n  DecimalFormat df = new DecimalFormat( \"###,###,###,000,000\" );\n%>\n  <%= \"<p>Total Memory  \" + df.format(runtime.totalMemory()) %>\n  <%= \"<p>Free Memory   \"   + df.format(runtime.freeMemory())  %>\n  <%= \"<p>Max Memory    \"   + df.format(runtime.maxMemory())  %>\n<%\n  runtime.gc();\n  session.invalidate();\n%>\n  <%= \"<p>after gc and session invalidate:<p>Total Memory  \" + df.format\n(runtime.totalMemory()) %>\n  <%= \"<p>Free Memory   \"   + df.format(runtime.freeMemory())  %>\n  <%= \"<p>Used Memory   \"   + df.format(runtime.totalMemory() - \nruntime.freeMemory())  %>\n\n\n\nUsed Tag-Source:\n\npackage com.dbsmart.taglib;\n\nimport java.io.IOException;\n//import java.io.PrintWriter;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\n\n/**\n *  \n */\n\npublic class SelectMemTest extends BodyTagSupport {\n\n  /*\n   * Standard constructor is required.\n   */\n\n  public SelectMemTest() {\n    super();\n  }\n\n  public int doStartTag() throws JspException {\n    return EVAL_PAGE;\n  }\n\n  public int doEndTag() throws JspException {\n    String value = bodyContent.getString();\n    bodyContent.clearBody();\n\n    try {\n      \n      //PrintWriter out = pageContext.getResponse().getWriter();\n      JspWriter out = pageContext.getOut();\n      out.write(value);\n    } catch (IOException e) {\n      throw new JspException(\"IOException occured: \" + e);\n    }\n\n    release();\n    return EVAL_PAGE;\n  }\n\n  public void release() {\n    super.release();\n  }\n\n}\n\nThe taglib pooling was set to false.\nWhat else can we do to reduce the memory.\n\nI can send the very small complete webapp to You, if\nsome is interessested.\n\nCurrently we are running Tomcat 4 in Produktion, after migrating\nour tag from Tomcat 3. In Tomcat 3 we did not have this problem.\n\n\nThank You for Your help.\n\n\nKlaus Pr\u00f6ll", "bug_id": 31914, "attachment_id": null, "id": 65805, "time": "2004-10-27T08:20:53Z", "creator": "klaus.proell@web.de", "creation_time": "2004-10-27T08:20:53Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I'm not convinced this is a leak.  Do you have a profiler heap dump showing \nwhere the memory references are held?  The JVM won't release memory back until \nhas to (e.g. for GC).  Runtime.gc is only a suggestion, not guaranteed to run.  \nHave you actually tried this on multiple platforms, or did you just mark \nplatform/os as \"All\" as it's the default?  What JDK version is this?", "is_private": false, "bug_id": 31914, "id": 65851, "time": "2004-10-27T18:41:33Z", "creator": "yoavs@computer.org", "creation_time": "2004-10-27T18:41:33Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "We found the lead in our production\nsystem under unix/solaris after migrating\nvom tomcat 3 to tomcat 4. Its also reproducing\nunter diff. windows systems.\n\nWe are using JAVA V. 1.4.2_04 and planning \nto migrate to 1.4.2_06.\n\nWe are analysing the problem with JProfiler\nwhich give us the hint that it comes from the\nhandling of the BodyContent/JspWriter.\nThe JspWriter.println() holds the data.\nWe are writting very big data for big reports!\n\nWith the given examples its easy to reproduce !\n \nThe\nmemory is freed if we change the coding from\n\"pageContext.getOut()\" into \"pageContext.getResponse().getWriter()\",\nbut this changes the order of the response html \n(because the BodyContent is written immedately) \nand we use sub tags.\n\nHopefully this helps.\n\nKlaus\n\n\n", "attachment_id": null, "bug_id": 31914, "id": 65918, "time": "2004-10-28T18:30:52Z", "creator": "klaus.proell@web.de", "creation_time": "2004-10-28T18:30:52Z", "is_private": false}, {"count": 3, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 65945, "time": "2004-10-28T21:41:00Z", "bug_id": 31914, "creation_time": "2004-10-28T21:41:00Z", "is_private": false, "text": "I think all these components will be reused, so there's no actual leak (memory\ngets allocated, and that's it). As you may not have noticed, your usage of tags\nis quite evil.\n\nIf you want this behavior to be modified, please provide a tested patch\nimplementing the behavior you would want (and which complies with the\nspecification), and we'll look at it. I'll have to preserve reuse, though.\n\nWONTFIX for the time being."}, {"count": 4, "tags": [], "creator": "klaus.proell@web.de", "attachment_id": null, "id": 66042, "time": "2004-10-29T09:57:38Z", "bug_id": 31914, "creation_time": "2004-10-29T09:57:38Z", "is_private": false, "text": "Hi,\n\nit would be very nice if you could explain what\nYou are meaning with the words \"quite evil\".\n\nThe given example is not agains the spec, I can\nsend You the whole WAR-File (4k only) where You can reproduce\nthe problem in 2 minutes. I copied the example from \n2 JSP books, I only modified it to reproduce our problem. \n\nThe memory is not freed if we are creating a big \nbody content and after 100 user 1 GB of data is in\nuse without any change to free it. \nIs it not allowed by the spec to produce a big body content (?)\nor what is the problem ?\n\nThe gc commands and session.invalide() commands are only\nadded for the test.\n\nAgain: The problem are only the statements:\nInstead of the println() You could use also\nsomething else (maybe a tag which creates the output).\n\n\n<html>\n<p>BEFORE <p>\n<dbs:SelectMemTest>\n  <p>inner before <%=amount%>\n  <%\n    for (int i = 0; i < ii; i++) {\n      out.println(\"<br><p>\"+i+\" and next\");\n    }\n  %>\n  <p>inner after\n</dbs:SelectMemTest>\n<p>after<p>\n\n\nThe rest is only for analysing help.\n\nThank You for the amount of time You\nare spending and Your helpful comments\nso far.\n\n\n\nKlaus\n"}, {"count": 5, "text": "The big body content will be buffered. As a result, your application will not\nrun, but you don't seem to mind, or realize what the problem is.\n\nThanks a lot for your nice words, it really motivates me for helping you more.\n\nAs I said:\n\nIf you want this behavior to be modified, please provide a tested patch\nimplementing the behavior you would want (and which complies with the\nspecification), and we'll look at it. The patch will have to preserve reuse, though.\n\nWONTFIX for the time being.\n", "bug_id": 31914, "attachment_id": null, "id": 66044, "time": "2004-10-29T10:07:54Z", "creator": "remm@apache.org", "creation_time": "2004-10-29T10:07:54Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "is_private": false, "id": 66046, "time": "2004-10-29T10:20:49Z", "bug_id": 31914, "creation_time": "2004-10-29T10:20:49Z", "text": "Since you have it, please attach your war to the bug report (general rule:\nalways attach test cases to bug reports)."}, {"count": 7, "tags": [], "creator": "klaus.proell@web.de", "attachment_id": 13260, "is_private": false, "id": 66070, "time": "2004-10-29T13:18:02Z", "bug_id": 31914, "creation_time": "2004-10-29T13:18:02Z", "text": "Created attachment 13260\nMemory test web application."}]
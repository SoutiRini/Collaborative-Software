[{"count": 0, "tags": [], "creator": "jl_monteagudo@yahoo.es", "text": "I am unable to get to get Connection Pooling using DBCP to work in Tomcat \n4.1.18. I get this error :\n\"Cannot load JDBC driver class 'null'\"\n\nMy server.xml file is like this :\n\n<ResourceParams name=\"jdbc/myoracle\">\n  <parameter>\n    <name>factory</name>\n    <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>\n  </parameter>\n  <parameter>\n    <name>driverClassName</name>\n    <value>oracle.jdbc.driver.OracleDriver</value>\n  </parameter>\n  <parameter>\n    <name>url</name>\n    <value>jdbc:oracle:thin:@server:1521:instance</value>\n  </parameter>\n  <parameter>\n    <name>username</name>\n    <value>scott</value>\n  </parameter>\n  <parameter>\n    <name>password</name>\n    <value>tiger</value>\n  </parameter>\n  <parameter>\n    <name>maxActive</name>\n    <value>20</value>\n  </parameter>\n  <parameter>\n    <name>maxIdle</name>\n    <value>10</value>\n  </parameter>\n  <parameter>\n    <name>maxWait</name>\n    <value>-1</value>\n  </parameter>\n</ResourceParams>\n\n\nand web.xml file is :\n\n<resource-ref>\n <description>Oracle Datasource example</description>\n <res-ref-name>jdbc/myoracle</res-ref-name>\n <res-type>javax.sql.DataSource</res-type>\n <res-auth>Container</res-auth>\n</resource-ref>", "id": 28272, "time": "2002-12-26T17:27:57Z", "bug_id": 15672, "creation_time": "2002-12-26T17:27:57Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 15672, "attachment_id": null, "text": "Hello!\nI receive the same errore using Informix.\nTrying to resolve the problems I've modified the classes BasicDataSource and \nBasicDataSourceFactory and I've seen a strange thing:\nOn startup, Tomcat creates a DataSource correctly according to server.xml.\nWhen I execute the ctx.lookup()/getConnection() for my DS, I see \nBasicDataSourceFactory creates a new BasicDataSource that contains only \ndescription, scope and auth (according to my web.xml) while driverClassName, \nmaxWait and the other params doesnt't exist. WHen I do ds.getConnection I \nreceive the error:\njava.sql.SQLException: Cannot load JDBC driver class 'null'\n        at org.apache.commons.dbcp.BasicDataSource.createDataSource \nBasicDataSource.java:289)\n        at org.apache.commons.dbcp.BasicDataSource.getConnection\n(BasicDataSource.java:162)\nThis is \"normal\" because createDataSource is called on the patial empty \nDataSource (that doesn't contain driverClassName etc...)\n\nI hope I give you some idea to solve the problem.\n\nBye\n", "id": 28843, "time": "2003-01-03T08:42:14Z", "creator": "a.battistini@regione.toscana.it", "creation_time": "2003-01-03T08:42:14Z", "is_private": false}, {"count": 2, "tags": [], "creator": "brady@moritzdesigns.com", "text": "I am having this same error with Postgresql with this version. ", "id": 29110, "time": "2003-01-10T07:38:09Z", "bug_id": 15672, "creation_time": "2003-01-10T07:38:09Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "acristianb@yahoo.com", "attachment_id": null, "id": 29163, "time": "2003-01-10T22:23:23Z", "bug_id": 15672, "creation_time": "2003-01-10T22:23:23Z", "is_private": false, "text": "Hello,\n\nI am having the same problem with the MySQL driver (connector/j 3.0.4). I\nchecked that the BasicDatasource instance is created. I did not check whether\nthe description is there but the important parameters (driver, url, username,\npass) were not there.\n\nI am not attaching my sever.xml and web.xml files as they are alomst identical\nexcept the driverClassName is com.mysql.jdbc.Driver and the url is mysql specific."}, {"count": 4, "tags": [], "bug_id": 15672, "attachment_id": null, "text": "I have been able to get Oracle's JDBC Driver working just fine with Tomcat\n4.1.18.  Below are my specifics from server.xml.  Are you sure that\nclasses12.jar is in $CATALINA_HOME/common/lib?\n\n<Resource name=\"jdbc/mydatabase\" auth=\"Container\" type=\"javax.sql.DataSource\"/>\n    <ResourceParams name=\"jdbc/mydatabase\">\n        <parameter>\n            <name>factory</name>\n            <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>\n        </parameter>\n        <parameter>\n            <name>maxActive</name>\n            <value>50</value>\n        </parameter>\n        <parameter>\n            <name>maxIdle</name>\n            <value>10</value>\n        </parameter>\n        <parameter>\n            <name>maxWait</name>\n            <value>10000</value>\n        </parameter>\n        <parameter>\n            <name>username</name>\n            <value>scott</value>\n        </parameter>\n        <parameter>\n            <name>password</name>\n            <value>tiger</value>\n        </parameter>\n        <parameter>\n            <name>driverClassName</name>\n            <value>oracle.jdbc.driver.OracleDriver</value>\n        </parameter>\n        <parameter>\n            <name>url</name>\n            <value>jdbc:oracle:thin:@host:1521:database</value>\n        </parameter>\n        <parameter>\n            <name>removeAbandoned</name>\n            <value>true</value>\n        </parameter>\n        <parameter>\n            <name>removeAbandonedTimeout</name>\n            <value>60</value>\n        </parameter>\n            <parameter>\n            <name>logAbandoned</name>\n            <value>true</value>\n        </parameter>\n    </ResourceParams>", "id": 29165, "time": "2003-01-10T22:44:21Z", "creator": "mraible@apache.org", "creation_time": "2003-01-10T22:44:21Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 15672, "text": "It does work indeed. At least the MySQL setup. My bad part was that I didn't\nnotice the <Resource/> and <ResourceParams></ResourceParams> were not included\nin the <Context></Context> but were its siblings because the <Context > tag line\nwas long and didn't wrap.", "count": 5, "id": 29304, "time": "2003-01-13T20:40:00Z", "creator": "acristianb@yahoo.com", "creation_time": "2003-01-13T20:40:00Z", "is_private": false}, {"count": 6, "text": "I am unable to DBCP to work when trying to get a connection at context \nstartup.  I tried getting a connection within a ServletContextListener servlet \nand received \"Cannot load JDBC driver class 'null'.\"  I received the same error \nwhen trying to get a connection within a servlet set to load-on-startup.\n\nI have no problem getting a connection if I make the exact same call later.\n\nI have my ResourceParams defined within the <DefaultContext> node.  I'm not \nsure if that could make a difference.  Otherwise the server.xml and web.xml is \nthe one described in the Tomcat sample documentation (other than usernames, \npasswords, etc. of course)\n\n\n", "creator": "bamazur@yahoo.com", "attachment_id": null, "id": 30662, "time": "2003-02-04T16:06:37Z", "bug_id": 15672, "creation_time": "2003-02-04T16:06:37Z", "tags": [], "is_private": false}, {"count": 7, "text": "I had the same issue.  What fixed my problem was that I had to change \nthe \"path\" and \"docBase\" of the context from \"/TestDB\" and \"TestDB\" (the ones \non the man page) to be the context I was using the pool from (in my \ncase, \"irongrid\").  Once I did that, everything worked great.\n   A search on google shows that the \"driver is 'null'\" issue is fairly \ncommon.  Maybe the solution is just to update the JDNI-HowTo at \n\nhttp://jakarta.apache.org/tomcat/tomcat-4.1-doc/jndi-datasource-examples-\nhowto.html\n\nto explicitly mention this problem.  Something like, \"If you encounter 'cannot \nload null driver', then make sure that you context is set to blah blah blah.\"\n\n", "creator": "alan@coldsmoke.com", "is_private": false, "id": 34885, "time": "2003-04-10T16:41:09Z", "bug_id": 15672, "creation_time": "2003-04-10T16:41:09Z", "tags": [], "attachment_id": null}, {"count": 8, "text": "In trying to make the move to automate my testing I have come up\nagainst the same problem.\n\nFirst some background.\nI am running Tomcat 4.1.18, Java 1.3.1, Win 2k\n\nclasses12.jar, commons-collections.jar, \ncommons-dbcp.jar, commons-pool are located \nin $TOMCAT_HOME/common/lib\n\nI am attempting to get automated testing running\nTo do this was getting the ANT build\nto undeploy and then redeploy the war after it got created.\nIn addition, I decided that it was more convenient to have the\nTest classes located in my app.war instead of a seperate war.\n\nPart of getting this dynamic undeploy/deploy cycle to work was\nremoving the <context> from the server.xml. The reason I want to\ndo this is I have 2 connection pools located there. In a dynamic\ndeploy tomcat generates it's own context for the app. I found there\nwere three ways I could do this.\n\n#1. put the connection pool into the <GlobalNamingResources> section\n    of server.xml\n\n#2. create a $APP_NAME.xml file that contains the context of the app\n    and put it into $TOMCAT_HOME/webapps. Both the Tomcat manager and\n    Admin apps do this.\n\n#3. Possibly put the context info in the web.xml file for the app.\n\nI have tried both 1 and 2 and I am getting the\njava.sql.SQLException: Cannot load JDBC driver class 'null' error\nwhen the DBCP is accessed in both.\n\nBelow are the relevant files for Option #2\n\nWEB.XML-------------------------------------------------------------------------\n------------\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application \n2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n\n<web-app>\n    <display-name>TSR Application</display-name>\n    <description>This is the web configuration for the TSR \napplication</description>\n\n<!-- SERVLET LISTINGS -->\n    <servlet>\n        <servlet-name>TestServlet</servlet-name>\n        <servlet-class>net.myco.myapp.servlets.TestServlet</servlet-class>\n    </servlet>\n\n    <servlet>\n        <servlet-name>ControllerServlet</servlet-name>\n        <servlet-class>net.myco.myapp.servlets.ControllerServlet</servlet-class>\n    </servlet>\n    \n    <servlet>\n        <servlet-name>FileDownloadServlet</servlet-name>\n        <servlet-class>net.myco.myapp.servlets.FileDownloadServlet</servlet-\nclass>\n    </servlet>\n    \n    <servlet>\n       <servlet-name>StartupServlet</servlet-name>\n       <servlet-class>net.myco.myapp.servlets.StartupServlet</servlet-class>\n       <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <!--servlet>\n        <servlet-name>log4j-init</servlet-name>\n        <servlet-class>net.myco.myapp.servlets.Log4jInit</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <init-param>\n           <param-name>log4j-init-file</param-name>\n           <param-value>WEB-INF\\classes\\log4j.properties</param-value>\n        </init-param>\n    </servlet-->\n\n    <!-- integrate the testing -->\n    <servlet>\n      <servlet-name>JUnitEETestServlet</servlet-name>\n      <description>JUnitEE test runner</description>\n      <servlet-class>org.junitee.servlet.JUnitEEServlet</servlet-class>\n    </servlet>\n\n<!-- SERVLET MAPPINGS -->\n    <servlet-mapping>\n        <servlet-name>TestServlet</servlet-name>\n        <url-pattern>/test</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n        <servlet-name>StartupServlet</servlet-name>\n        <url-pattern>/startup</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n        <servlet-name>ControllerServlet</servlet-name>\n        <url-pattern>/controller</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n        <servlet-name>FileDownloadServlet</servlet-name>\n        <url-pattern>/download</url-pattern>\n    </servlet-mapping>\n\n    <!-- integrate the testing -->\n    <servlet-mapping>\n      <servlet-name>JUnitEETestServlet</servlet-name>\n      <url-pattern>/TestServlet/*</url-pattern>\n    </servlet-mapping>\n          \n<!-- JNDI resource for DB connection pool -->\n    <resource-ref>\n      <description>\n       Resource reference to a factory for java.sql.Connection\n       instances that may be used for talking to a particular\n       database that is configured in the server.xml file.\n      </description>\n\n      <res-ref-name>\n         jdbc/oracle_myapp\n      </res-ref-name>\n      <res-type>\n         javax.sql.DataSource\n      </res-type>\n      <res-auth>\n         Container\n      </res-auth>\n   </resource-ref>          \n          \n\n<!-- JNDI resource for DB connection pool -->\n    <resource-ref>\n      <description>\n       Resource reference to a factory for java.sql.Connection\n       instances that may be used for talking to a particular\n       database that is configured in the server.xml file.\n      </description>\n\n      <res-ref-name>\n         jdbc/oracle_myco\n      </res-ref-name>\n      <res-type>\n         javax.sql.DataSource\n      </res-type>\n      <res-auth>\n         Container\n      </res-auth>\n   </resource-ref>                   \n</web-app>\nWEB.XML-------------------------------------------------------------------------\n------------\n\n\nTSR.XML-------------------------------------------------------------------------\n------------\n        <Context path=\"/myapp\" docBase=\"myapp.war\" debug=\"3\" reloadable=\"true\" \ncrossContext=\"true\">  \n           <Loader checkInterval=\"6\"/>\n           <Logger className=\"org.apache.catalina.logger.FileLogger\"\n                      prefix=\"localhost_myappdb_log.\" \n                      suffix=\".txt\"\n                   timestamp=\"true\"/>\n  \n           <Resource name=\"jdbc/oracle_myapp\" auth=\"Container\"\n           type=\"javax.sql.DataSource\"/> \n\n           <ResourceParams name=\"jdbc/oracle_myapp\">\n              <parameter>\n                 <name>factory</name>\n                 <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>\n              </parameter>\n              <parameter>\n                 <name>driverClassName</name>\n                 <value>oracle.jdbc.OracleDriver</value>     \n              </parameter>\n              <parameter>\n                 <name>url</name>\n                 <!--value>jdbc:oracle:thin:@myserver:1521:myco</value-->\n                 <value>jdbc:oracle:thin:@(DESCRIPTION = (ADDRESS_LIST = \n(ADDRESS = (PROTOCOL = TCP)(HOST = myserver.myco.com)(PORT = 1521))) \n(CONNECT_DATA = (SERVER = DEDICATED) (SID = MYCO)))</value>      \n              </parameter>\n              <parameter>\n                 <name>username</name>\n                 <value>myapp</value>\n              </parameter>\n              <parameter>\n                 <name>password</name>\n                 <value>actuator</value>\n              </parameter>\n              <parameter>\n                 <name>maxActive</name>\n                 <value>20</value>\n              </parameter>\n              <parameter>\n                 <name>maxIdle</name>\n                 <value>10</value>\n              </parameter>\n              <parameter>\n                 <name>maxWait</name>\n                 <value>-1</value>\n              </parameter>\n              <parameter>\n                 <name>validationQuery</name>\n                 <value>select 'validationQuery' from dual</value>\n              </parameter>\n              <parameter>\n                 <name>testOnBorrow</name>\n                 <value>true</value>\n              </parameter>    \n           </ResourceParams>\n\n           <Resource name=\"jdbc/oracle_myco\" auth=\"Container\" \ntype=\"javax.sql.DataSource\"/> \n\n           <ResourceParams name=\"jdbc/oracle_myco\">\n              <parameter>\n                 <name>factory</name>\n                 <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>\n              </parameter>\n              <parameter>\n                 <name>driverClassName</name>\n                 <value>oracle.jdbc.driver.OracleDriver</value>\n              </parameter>\n              <parameter>\n                 <name>url</name>\n                 <!--value>jdbc:oracle:thin:@myserver:1521:myco</value-->\n                 <value>jdbc:oracle:thin:@(DESCRIPTION = (ADDRESS_LIST = \n(ADDRESS = (PROTOCOL = TCP)(HOST = myserver.myco.com)(PORT = 1521))) \n(CONNECT_DATA = (SERVER = DEDICATED) (SID = MYCO)))</value>      \n              </parameter>\n              <parameter>\n                 <name>username</name>\n                 <value>myco</value>\n              </parameter>\n              <parameter>\n                 <name>password</name>\n                 <value>myco</value>\n              </parameter>\n              <parameter>\n                 <name>maxActive</name>\n                 <value>20</value>\n              </parameter>\n              <parameter>\n                 <name>maxIdle</name>\n                 <value>10</value>\n              </parameter>\n              <parameter>\n                 <name>maxWait</name>\n                 <value>-1</value>\n              </parameter>\n              <parameter>\n                 <name>validationQuery</name>\n                 <value>select 'validationQuery' from dual</value>\n              </parameter>\n              <parameter>\n                 <name>testOnBorrow</name>\n                 <value>true</value>\n              </parameter>    \n           </ResourceParams>\n        </Context>\nTSR.XML-------------------------------------------------------------------------\n------------\n\n\nMy log even shows the look up of the datasource in the context\n\n2003-06-13 13:42:51,009 DEBUG  myapp.DBCmd 208  - Looking up db\n2003-06-13 13:42:51,009 DEBUG  myapp.DBCmd 214  - Getting connection to \njava:/comp/env/jdbc/oracle_myapp\n2003-06-13 13:42:51,019 ERROR  myapp.DBCmd 234  - SQL EXCEPTIONCannot load JDBC \ndriver class 'null'\n\njava.sql.SQLException: Cannot load JDBC driver class 'null'\n        at org.apache.commons.dbcp.BasicDataSource.createDataSource\n(BasicDataSource.java:529)\n        at org.apache.commons.dbcp.BasicDataSource.getConnection\n(BasicDataSource.java:312)\n        at net.myco.myapp.DBCmd.open(DBCmd.java:219)\n        at net.myco.myapp.DBCmd.open(DBCmd.java:186)\n        at net.myco.myapp.model.customer.Customer.<init>(Customer.java:70)\n        at test.myco.myapp.model.customer.CustomerTest.testCustomer\n(CustomerTest.java:74)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at junit.framework.TestCase.runTest(TestCase.java:154)\n        at junit.framework.TestCase.runBare(TestCase.java:127)\n        at junit.framework.TestResult$1.protect(TestResult.java:106)\n        at junit.framework.TestResult.runProtected(TestResult.java:124)\n        at junit.framework.TestResult.run(TestResult.java:109)\n        at junit.framework.TestCase.run(TestCase.java:118)\n        at junit.framework.TestSuite.runTest(TestSuite.java:208)\n        at junit.framework.TestSuite.run(TestSuite.java:203)\n        at junit.framework.TestSuite.runTest(TestSuite.java:208)\n        at junit.framework.TestSuite.run(TestSuite.java:203)\n        at org.junitee.runner.TestRunner$1.run(TestRunner.java:72)\n        at org.junitee.runner.TestRunner.run(TestRunner.java:95)\n        at org.junitee.servlet.JUnitEEServlet.runTests(JUnitEEServlet.java:224)\n        at org.junitee.servlet.JUnitEEServlet.doGet(JUnitEEServlet.java:195)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n        at org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:260)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:643)\n        at org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n        at org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:191)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:643)\n        at org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n        at org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2415)\n        at org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:180)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:643)\n        at org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:641)\n        at org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:172)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:641)\n        at org.apache.catalina.valves.AccessLogValve.invoke\n(AccessLogValve.java:509)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:641)\n        at org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n        at org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:174)\n        at \norg.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNex\nt(StandardPipeline.\njava:643)\n        at org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:480)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:995)\n        at org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1040)\n        at org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1151)\n        at java.lang.Thread.run(Thread.java:536)\n2003-06-13 13:42:51,179 ERROR              customer.Customer 139  - Customer \nwas not able to be added.\n\nThanks for the help\n\nMichael\n\n", "bug_id": 15672, "attachment_id": null, "id": 38826, "time": "2003-06-13T21:07:25Z", "creator": "mholly@talisentech.com", "creation_time": "2003-06-13T21:07:25Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "creator": "ahorton@ix.netcom.com", "text": "You will get that error message if Tomcat is not reading/using your \n<ResourceParams> for the context that you are using.\n\nThe server.xml entry that you list must be in the correct place in your \nserver.xml file.  If you have it under the Context for your application, be \nsure that your <Context>  entry is correct.  \n\n", "id": 43971, "time": "2003-09-10T19:05:34Z", "bug_id": 15672, "creation_time": "2003-09-10T19:05:34Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 15672, "text": "I too am having problems with setting up a JNDI connection for Oracle9i.  When \nI try connecting to a DataSource, I get the following error. \n\nCannot create resource instance\n", "id": 44004, "attachment_id": null, "creator": "rmattier74@comcast.net", "creation_time": "2003-09-10T22:21:41Z", "time": "2003-09-10T22:21:41Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 15672, "attachment_id": null, "text": "This report has morphed multiple times. Please use the tomcat-user list to first\ndebug a cause for bug. ", "id": 51967, "time": "2004-02-09T01:39:38Z", "creator": "funkman@joedog.org", "creation_time": "2004-02-09T01:39:38Z", "is_private": false}]
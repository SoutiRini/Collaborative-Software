[{"attachment_id": null, "tags": [], "bug_id": 44873, "text": "To be specific: using glob mappers and identity mappers within composite mappers has different behaviour if using Java 6.\n\nMy build contains the following:\n<target name=\"-export\" if=\"project.exports\">\n    <mkdir dir=\"${dir.exp}\"/>\n    <copy todir=\"${dir.exp}\">\n        <fileset dir=\"${dir.jar}\" includesfile=\"${file.exports}\" \n                excludes=\"${pattern.dist.jars.exclude}\"/>\n            <compositemapper>\n                <globmapper from=\"*-standalone.jar\" to=\"*.jar\"/>\n                <globmapper from=\"*-common.jar\" to=\"*.jar\"/>\n                <identitymapper/> <!-- let anything else through -->\n            </compositemapper>\n        </copy>\n</target>\n\nThe intended behaviour of this is to rename any {project}-standalone or {project}-common jar to {project}.jar, but let the jars go as they are otherwise. This works as expected with Java 1.4.2 or Java 5 (1.5.0_12):\n\n-export:\n    [mkdir] Skipping D:\\projects\\NR52\\TIGUtils\\export because it already exists.\nfileset: Setup scanner in dir D:\\projects\\NR52\\TIGUtils\\tmp\\jar with patternSet{ includes: [] excludes: [] }\n     [copy] TIGUtils-common.jar added as TIGUtils.jar doesn't exist.\n     [copy] No sources found.\n     [copy] Copying 1 file to D:\\projects\\NR52\\TIGUtils\\export\n     [copy] Copying D:\\projects\\NR52\\TIGUtils\\tmp\\jar\\TIGUtils-common.jar to D:\\projects\\NR52\\TIGUtils\\export\\TIGUtils.jar\n\n\nHowever, when using Java 6 (update 2 or update 6) this does not work:\n\n-export:\n    [mkdir] Skipping D:\\projects\\NR52\\TIGUtils\\export because it already exists.\nfileset: Setup scanner in dir D:\\projects\\NR52\\TIGUtils\\tmp\\jar with patternSet{ includes: [] excludes: [] }\n     [copy] TIGUtils-common.jar added as TIGUtils-common.jar is outdated.\n     [copy] No sources found.\n     [copy] Copying 1 file to D:\\projects\\NR52\\TIGUtils\\export\n     [copy] Copying D:\\projects\\NR52\\TIGUtils\\tmp\\jar\\TIGUtils-common.jar to D:\\projects\\NR52\\TIGUtils\\export\\TIGUtils-common.jar\n\n\nWhen using just the two globmappers, the functionality is as expected, but any jars that do not match the pattern will not be copied at all. The workaround is to use two copy tasks, but I would rather keep it the way it is. I'm surprised the behaviour is inconsistent between java versions.", "count": 0, "id": 115872, "time": "2008-04-25T07:41:42Z", "creator": "edward.steel@detica.com", "creation_time": "2008-04-25T07:41:42Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 44873, "text": "Thanks for the report.\nCan you give a name of a file that\nthat works on java5 and does not\nwork on java6 - it will help\nwith debuging.\n", "count": 1, "id": 115881, "time": "2008-04-25T09:25:52Z", "creator": "peterreilly@apache.org", "creation_time": "2008-04-25T09:25:52Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 44873, "text": "Sure.\n\nThe input dir contains a TIGUtils-common.jar, which is expected to map to TIGUtils.jar in the output dir.", "count": 2, "id": 115882, "time": "2008-04-25T09:28:44Z", "creator": "edward.steel@detica.com", "creation_time": "2008-04-25T09:28:44Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 44873, "attachment_id": null, "id": 115884, "time": "2008-04-25T09:47:09Z", "creator": "peterreilly@apache.org", "creation_time": "2008-04-25T09:47:09Z", "is_private": false, "text": "Thanks,\nI can see the same problem on my system.\n"}, {"attachment_id": null, "tags": [], "bug_id": 44873, "text": "The composite mapper has two results, since one glob mapper and the identity mapper match.\n\n<copy> only uses the first result (enablemultiplemappings is false by default).\n\nThe documentation of composite mapper doesn't talk about the order of results and in fact it uses a set in its implementation, making sort order depend on the Java VM (or the phase of the moon).  We could fix that without breaking anything, and I think I'll do that.\n\nIn your case you really want something else, you want some sort of composite mapper where only the first match is used.  We don't have anything like this in Ant right now.  Therefore I will first create a stable sort order and then change this report to an enhancement request for a different kind of composite mapper.\n", "count": 4, "id": 121008, "time": "2008-09-26T03:37:51Z", "creator": "bodewig@apache.org", "creation_time": "2008-09-26T03:37:51Z", "is_private": false}, {"count": 5, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "compositemapper's sort order is stable with svn revision 699263.", "id": 121010, "time": "2008-09-26T03:52:53Z", "bug_id": 44873, "creation_time": "2008-09-26T03:52:53Z", "is_private": false}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "firstmatchmapper is in svn rev 699288.", "id": 121015, "time": "2008-09-26T05:01:05Z", "bug_id": 44873, "creation_time": "2008-09-26T05:01:05Z", "is_private": false}]
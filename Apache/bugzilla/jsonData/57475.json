[{"count": 0, "tags": [], "creator": "cquezel@gmail.com", "text": "If I call MATCH (EQUIV) with a SearchCriterion whose type is different from the type of the elements of the LookupArray, the function returns N/A even if the types are convertable.\n\n\nif SearchCriterion is of type string whose value is convertable to a number ('1' for example) and LookupArray contains elements whose type is Number ({1,2,3} for example) then Match returns N/A while Excel and LibreOffice find a match.\n\n\npublic final class Match extends Var2or3ArgFunction {\n...\nprivate static int findIndexOfValue(ValueEval lookupValue, ValueVector lookupRange,\n\t\t\tboolean matchExact, boolean findLargestLessThanOrEqual) throws EvaluationException {\n\n...\t\t\t\n\t// Next line return false when classes dont match\n\tif(lookupComparer.compareTo(lookupRange.getItem(i)).isEqual()) {\n\nBecause ...\n\n\t\tpublic final CompareResult compareTo(ValueEval other) {\n...\n\t\t\t// Next line does not convert\n\t\t\tif (_targetClass != other.getClass()) {\n\t\t\t\treturn CompareResult.TYPE_MISMATCH;\n\t\t\t}\n\t\t\treturn compareSameType(other);\n\t\t}", "id": 180439, "time": "2015-01-21T14:37:48Z", "bug_id": 57475, "creation_time": "2015-01-21T14:37:48Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "First up, are you able to write a very short junit unit test that shows the problem? Say, create a new workbook with a sheet, create a cell with a problematic formula, evaluate and check the result?\n\nSecond, with that done, if you can, are you able to do a patch to add the missing conversion?", "id": 180444, "time": "2015-01-21T17:35:40Z", "bug_id": 57475, "creation_time": "2015-01-21T17:35:40Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57475, "attachment_id": null, "is_private": false, "id": 180633, "time": "2015-01-29T03:48:22Z", "creator": "cquezel@gmail.com", "creation_time": "2015-01-29T03:48:22Z", "text": "import java.io.IOException;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.xssf.usermodel.XSSFCell;\nimport org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;\nimport org.apache.poi.xssf.usermodel.XSSFRow;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\n/**\n * Test the Match function\n */\npublic class MatchTest {\n\t\n\t/**\n\t * Sets the cell value.\n\t * @param cell\n\t * @param value a Number or a String\n\t */\n\tprivate static void setCellValue(XSSFCell cell, Object value) {\n\t\tif (value instanceof String) {\n\t\t\tcell.setCellValue((String)value);\n\t\t} else if (value instanceof Number) {\n\t\t\tcell.setCellValue(((Number)value).doubleValue());\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported type \" + value.getClass().getName());\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates Assert.assertEquals(MATCH(lookup, A1:C1, 0), expected).\n\t * <pre>\n\t * test(\"2\", 1, 2, 3, 2) is\n\t * Assert.assertEquals(MATCH(2, A1:C1, 0), 2)\n\t * where A1 = 1, B1 = 2, C1 = 3\n\t * </pre>\n\t *     \n\t * @param lookup the lookup value. Add double quotes around the value for strings.\n\t * @param A1 the content of A1\n\t * @param B1 ...\n\t * @param C1 ...\n\t * @param expected the expected value. \n\t */\n\tprivate static void test(String lookup, Object A1, Object B1, Object C1, int expected) {\n\t\t\n\t\ttry {\n\t\t\t   //Create a new Workbook\n\t        try (XSSFWorkbook workbook = new XSSFWorkbook()) {\n\t            //Create a blank sheet\n\t            XSSFSheet sheet = workbook.createSheet(\"MatchTest\");\n\t            \n\t            XSSFRow row1 = sheet.createRow(0);\n\t       \t\tXSSFCell a1 = row1.createCell(0);\n\t       \t\tsetCellValue(a1, A1);\n\t       \t\tXSSFCell b1 = row1.createCell(1);\n\t       \t\tsetCellValue(b1, B1);\n\t            XSSFCell c1 = row1.createCell(2);\n\t       \t\tsetCellValue(c1, C1);\n\t            XSSFCell d1 = row1.createCell(3);\n\t            \n\t            d1.setCellType(Cell.CELL_TYPE_FORMULA);\n\t            d1.setCellFormula(\"MATCH(\" + lookup + \", A1:C1, 0)\");\n\t\t\t\tXSSFFormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();\n\t\t\t\tint typeOfFormulaResult = evaluator.evaluateFormulaCell(d1);\n\t\t\t\tAssert.assertEquals(typeOfFormulaResult, Cell.CELL_TYPE_NUMERIC);\n\t\t\t\t\n\t            double value = d1.getNumericCellValue();\n\t            Assert.assertEquals(value, expected, 0.0);\n\t        }\n\t\t} catch (IOException ex) {\n\t\t\tthrow new RuntimeException(ex.getMessage(), ex);\n\t\t}\n\t}\n\t\n\t/**\n\t * OK\n\t * Assert.assertEquals(MATCH(2, {1, 2, 3}, 0), 2)\n\t */\n\t@Test\n\tpublic static void testNumerics() {\n\t\ttest(\"2\", 1, 2, 3, 2); \n\t}\n\n\t/**\n\t * OK\n\t * Assert.assertEquals(MATCH(\"2\", {\"1\", \"2\", \"3\"}, 0), 2)\n\t */\n\t@Test\n\tpublic static void testStrings() {\n\t\ttest(\"\\\"2\\\"\", \"1\", \"2\", \"3\", 2); \n\t}\n\t\n\t/**\n\t * Fails\n\t * Assert.assertEquals(MATCH(\"2\", {1, 2, 3}, 0), 2)\n\t */\n\t@Test\n\tpublic static void testStringNumerics() {\n\t\ttest(\"\\\"2\\\"\", 1, 2, 3, 2); \n\t}\n\n\t/**\n\t * Fails\n\t * Assert.assertEquals(MATCH(2, {\"1\", \"2\", \"3\"}, 0), 2)\n\t */\n\t@Test\n\tpublic static void testNumericStrings() {\n\t\ttest(\"2\", \"1\", \"2\", \"3\", 2); \n\t}\n}"}, {"count": 3, "tags": [], "bug_id": 57475, "is_private": false, "id": 180634, "attachment_id": 32408, "creator": "cquezel@gmail.com", "creation_time": "2015-01-29T06:48:41Z", "time": "2015-01-29T06:48:41Z", "text": "Created attachment 32408\nTestcase\n\nThe original test case I posted is wrong.\nThis test case includes 1 test that fails and others that pass."}, {"attachment_id": 32409, "tags": [], "creator": "cquezel@gmail.com", "text": "Created attachment 32409\nproposed patch", "count": 4, "id": 180635, "time": "2015-01-29T07:22:43Z", "bug_id": 57475, "creation_time": "2015-01-29T07:22:43Z", "is_private": false}, {"count": 5, "tags": [], "text": "Created attachment 32410\nproposed patch\n\ncode cleanup (same logic)", "attachment_id": 32410, "bug_id": 57475, "id": 180642, "time": "2015-01-29T12:21:48Z", "creator": "cquezel@gmail.com", "creation_time": "2015-01-29T12:21:48Z", "is_private": false}, {"attachment_id": 32411, "tags": [], "bug_id": 57475, "is_private": false, "count": 6, "id": 180645, "time": "2015-01-29T13:55:00Z", "creator": "cquezel@gmail.com", "creation_time": "2015-01-29T13:55:00Z", "text": "Created attachment 32411\nExcel spreadsheet to test MATCH\n\nExcel spreadsheet to test MATCH (EQUIV), VLOOKUP (RECHERCHEV), HLOOKUP (RECHERCHEH)"}, {"count": 7, "tags": [], "creator": "cquezel@gmail.com", "text": "Now that is embarassing!\n\nI can't reproduce the problem on Excel anymore. It happens on OpenOffice only.\n\nI would close this bug for now.", "id": 180646, "time": "2015-01-29T15:58:44Z", "bug_id": 57475, "creation_time": "2015-01-29T15:58:44Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 57475, "attachment_id": null, "is_private": false, "id": 180851, "time": "2015-02-08T14:45:57Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-02-08T14:45:57Z", "text": "Closing this one for now based on your last comments."}]
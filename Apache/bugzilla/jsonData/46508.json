[{"count": 0, "tags": [], "bug_id": 46508, "attachment_id": 23104, "text": "Created attachment 23104\nBackport of commit to 2.2.6 with fix\n\nImplementation of SSLRenegBufferSize in svn checkin 726109 was VERY welcome.\n\nI run 2.2.6 (Fedora), and have backported the fix.\n\nHowever, this uncovered a bug which applies to the checkin as well.\n\nThe bug is that the code to default the buffer size is wrong.  Because the per-directory structure member nRenegBufferSize is initialized to DEFAULT_RENEG_BUFFER_SIZE, cfgMergeInt will never override it with the directive value specified at a lower level.\n\nThe fix is to initialize it to UNSET and handle the defaulting at point of use.\n\nI have attached the full backport patch file (with fix).\n\nTo ease merging it into the trunk, the following is a diff of the backport >patch< file before vs. after this fix.\n\nI trust that this will be useful & that someone with commit privs will apply this to the source tree.\n\n diff ssl_post_renegotiate.patch.yours-backported ssl_post_renegotiate.patch.mine\n34c34 { modules/ssl/ssl_engine_config.c }\n< +    dc->nRenegBufferSize = DEFAULT_RENEG_BUFFER_SIZE;\n---\n> +    dc->nRenegBufferSize = UNSET;\n166c166 { modules/ssl/ssl_engine_kernel.c }\n< @@ -510,15 +510,21 @@\n---\n> @@ -510,14 +510,23 @@\n175c175,178\n< +     if (dc->nRenegBufferSize > 0) {\n---\n> +     int rsize;\n> +     rsize = dc->nRenegBufferSize;\n> +     if( rsize == UNSET ) { rsize = DEFAULT_RENEG_BUFFER_SIZE; }\n> +     if (rsize > 0) {\n177c180\n< +       rv = ssl_io_buffer_fill(r, dc->nRenegBufferSize);\n---\n> +       rv = ssl_io_buffer_fill(r, rsize);", "id": 123922, "time": "2009-01-10T05:28:14Z", "creator": "tlhackque@yahoo.com", "creation_time": "2009-01-10T05:28:14Z", "is_private": false}, {"count": 1, "tags": [], "text": "Note issue status", "is_private": false, "bug_id": 46508, "id": 123925, "time": "2009-01-10T10:06:28Z", "creator": "wrowe@apache.org", "creation_time": "2009-01-10T10:06:28Z", "attachment_id": null}, {"count": 2, "text": "Thanks for the patch. Committed a slightly modified version as r733465.", "bug_id": 46508, "attachment_id": null, "id": 123932, "time": "2009-01-11T05:02:16Z", "creator": "rpluem@apache.org", "creation_time": "2009-01-11T05:02:16Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "tlhackque@yahoo.com", "attachment_id": null, "is_private": false, "id": 123934, "time": "2009-01-11T06:37:30Z", "bug_id": 46508, "creation_time": "2009-01-11T06:37:30Z", "text": "Thanks for the quick action."}, {"count": 4, "tags": [], "creator": "tlhackque@yahoo.com", "attachment_id": null, "id": 123935, "time": "2009-01-11T07:32:11Z", "bug_id": 46508, "creation_time": "2009-01-11T07:32:11Z", "is_private": false, "text": "On reviewing your version of my patch more carefully - is apr_size_t guaranteed to be signed?\n\nI don't think it is.  So there's a potential signedness issue that may bite some platforms.\n\nUNSET is defined as -1.  DEFAULT_RENEG_BUFFER_SIZE is signed.  nRenegBufferSize is an apr_size_t.  Not pretty.\n\nI agree that apr_size_t is the right thing to use for the buffer size, but there are certainly compilers where -1 can never == unsigned.\n\nMy version handwaved that by forcing a type conversion to int before the comparison...it was the minimal change to the orginal code.\n\nThere are other approaches (such as casting UNSET to an apr_size_t) - a matter of style.  (The other config variables that I noticed tended to use int in the structures.)\n\n"}, {"count": 5, "text": "(In reply to comment #4)\n> On reviewing your version of my patch more carefully - is apr_size_t guaranteed\n> to be signed?\n> \n> I don't think it is.  So there's a potential signedness issue that may bite\n> some platforms.\n\nThis is a valid point since apr_size_t should be unsigned. Nevertheless I don't think that we have an issue here since IMHO -1 will be casted automatically to the maximum value an apr_size_t can hold.\n\n\n", "bug_id": 46508, "attachment_id": null, "id": 123936, "time": "2009-01-11T08:00:15Z", "creator": "rpluem@apache.org", "creation_time": "2009-01-11T08:00:15Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "tlhackque@yahoo.com", "attachment_id": null, "is_private": false, "id": 123939, "time": "2009-01-11T09:12:53Z", "bug_id": 46508, "creation_time": "2009-01-11T09:12:53Z", "text": "I really don't want to be picky - httpd isn't my code.  Perhaps a c language lawyer will explain the details.  As indicated, my experience is that -1 does not necessarily compare equal to unsigned.  I've seen (unsigned x == -1)? optimized to false on several compilers.\n\nFYI, gcc will warn about comparing signed to unsigned if you ask:\n\ncat x.c\n#include <stdio.h>\nint main( int argc, char **argv ) {\n  unsigned int x;\n  x = -1;\n  if( argc == 7 ) x = 3;\n  if( x == -1 )\n   printf( \"equal\\n\" );\n  else\n   printf( \"not\\n\" );\n  return 0;\n}\n\ngcc -Wsign-compare x.c -o x.o\nx.c: In function \u2018main\u2019:\nx.c:10: warning: comparison between signed and unsigned\n\n(Yes, on my X86, this case will compare equal).\n\nIf you make x a short (unlikely in real life), you'll get a \"comparison is always false\" error.  This is correct according to the coersion/promotion rules as I understand them. (They are messier than 'cast to the maximum value x will hold')\n\nAnother idiom is to compare unsigned x to (~0U/~0UL).  You could have UNSET_U defined that way.  and then add a cfgMergeUint.  But that gets into a change to the whole defaulting mechanism, which seemed beyond the scope of just making this particular function work.\n\nYou're responsible for the checkin, so I'm not going to pursue this further unless it actually bites me on one of my platforms after release.\n\nThanks again for taking the time to make the checkin."}]
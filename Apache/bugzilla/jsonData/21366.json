[{"count": 0, "tags": [], "creator": "emillan@albasoft.com", "text": "When I write a snippet in a JSP document (XML syntax) like this:\n\n---------------------------------------------------\n(some code)\n...\n<jsp:scriptlet>\n  <![CDATA[\n    //Here we go\n    String foo = \"foo\";\n    String bar = \"bar\";\n  ]]>\n</jsp:scriptlet>\n...\n(some foot code)\n---------------------------------------------------\n\nThe JSP-Servlet translation converts that code into this:\n\n---------------------------------------------------\n//Here we go       String foo = \"foo\";      String bar = \"bar\";\n---------------------------------------------------\n\nSo, as it converts the scriptlet into one line, when it gets compiled, the rest\nof the code after comment will get commented too.\n\nNote that using 'CDATA' is optional, when you use '<' or '&' characters. You can\nomit CDATA when you are not using special characters. So this is not the reason.\n\nWhen I transform the JSP Document wroten in XML syntax to JSP syntax, it works\nproperly.", "id": 40051, "time": "2003-07-07T10:45:01Z", "bug_id": 21366, "creation_time": "2003-07-07T10:45:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "ecarmich@alumni.rice.edu", "text": "I have the same problem with Tomcat 5 (latest CVS) on Windows XP \n(j2sdk1.4.1_02 and j2sdk1.4.2). I can reproduce it consistently by compiling \nxml/xml.jsp from the jsp-examples webapp that ships with Tomcat 5.\n\nThe problem seems to be that the scriptlet text that \norg.apache.crimson.parser.InputEntity.parsedContent passes to \nJspDocumentParser.java's characters() method doesn't contain any line feeds. \ncharacters() is called separately for each line of the scriplet text, and \ndutifully creates TemplateText nodes for each line. Then \nNode.ScriptingElement's getText() method concatenates the text of the \ndifferent TemplateText nodes into the text you see in the output .java file, \nstill without any line feeds.\n\nIf that's intended behavior on the part of \norg.apache.crimson.parser.InputEntity.parsedContent, then this can be fixed by \nhaving Node.ScriptingElement's getText() method insert the necessary line \nfeeds. But I note that the precompiled xml/xml_jsp.java that ships with Tomcat \n5 doesn't have this problem (which means it compiles correctly on _someone's_ \nmachine), and the Platform given in the original bug report was \"PC\", same as \nmy machine. So perhaps this is a Windows-only problem.\n\nI don't have access to a non-Windows machine to develop or test on, so I don't \nthink I can go any further with this. Can someone with more hardware and/or \nknowledge of XML parsers pick this up?\n\nAlso changing the Component from \"Servlet & JSP API\" to \"Jasper 2\", as this is \na problem with Jasper or something Jasper relies on.", "id": 42465, "time": "2003-08-09T16:32:15Z", "bug_id": 21366, "creation_time": "2003-08-09T16:32:15Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 21366, "attachment_id": null, "is_private": false, "id": 42466, "time": "2003-08-09T17:41:00Z", "creator": "remm@apache.org", "creation_time": "2003-08-09T17:41:00Z", "text": "It's quite odd. I use Windows, and I'm the one making the builds.\n\na) When I'm precompiling, the CDATA has some \\n in it, so it works (the rest of\nthe file does have normal CRLF)\nb) When I don't precompile, what you described happens\n\nVery weird."}, {"count": 3, "tags": [], "creator": "ecarmich@alumni.rice.edu", "text": "Thanks to that info, I was able to track this down (for Tomcat 5, at least; I \nhaven't investigated this on Tomcat 4 at all).\n\nThe fix is to copy xercesImpl.jar and xml-apis.jar from your Ant installation \nto Tomcat's common/lib directory.  When you precompile, the class loader is \ncreated by Jspc.java's initClassLoader() method, and includes the Ant jars in \nits URL list.  When you don't precompile, the class loader is created in \nJspRuntimeContext.java, and doesn't include the Ant jars.\n\nI haven't traced exactly why the missing jars cause the problem, but one \ndifference between jars/no jars is in XMLEncodingDetector.java's getEncoding() \nmethod.  Class.forName(\"org.apache.xerces.util.SymbolTable\") works fine if the \nclass loader can see the jars in question, and throws an exception otherwise.", "id": 42482, "time": "2003-08-10T09:09:53Z", "bug_id": 21366, "creation_time": "2003-08-10T09:09:53Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "remm@apache.org", "text": "Yes, you're right. Xerces would be there because of Ant during a precompilation,\nso it works then.\nThis bug is basically the first good reason I've seen for bundling back Xerces 2.", "id": 42483, "time": "2003-08-10T09:15:03Z", "bug_id": 21366, "creation_time": "2003-08-10T09:15:03Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 21366, "text": "It has been determined that using Xerces solves this problem. If you're using\nthe JDK 1.4 edition of Tomcat 4, you could be impacted.\nAlso, Tomcat 5 will include Xerces 2 again as a result of this bug (please\ncomplain if you disagree with that).\nThe bug itself is invalid (it is not a Tomcat bug). Many thanks to Eric for\ninvestigating the issue.", "id": 42486, "attachment_id": null, "creator": "remm@apache.org", "creation_time": "2003-08-10T10:04:50Z", "time": "2003-08-10T10:04:50Z", "is_private": false}]
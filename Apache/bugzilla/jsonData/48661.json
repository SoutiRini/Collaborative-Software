[{"count": 0, "attachment_id": null, "bug_id": 48661, "is_private": false, "id": 134160, "time": "2010-02-02T15:07:25Z", "creator": "daniel.armbrust.list@gmail.com", "creation_time": "2010-02-02T15:07:25Z", "tags": [], "text": "There seems to be a bug or at least an inconsistency in how tomcat handles the error page.\n\nIn Tomcat 6.0.20, if I define my error page like this in web.xml:\n\n<error-page>\n      <exception-type>java.lang.Exception</exception-type>\n      <location>/unexpectedErrors.jsp</location>\n</error-page>\n\nThen, if the response has already been committed, Tomcat does this on\nthe system console:\n\nFeb 1, 2010 5:59:04 PM org.apache.catalina.core.StandardWrapperValve invoke\nSEVERE: Servlet.service() for servlet jsp threw exception\njava.lang.NullPointerException\n       at org.apache.jsp.cpe_jsp._jspService(cpe_jsp.java:693)\n       at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n       at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n       at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)\n       at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342)\n       at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267)\n       at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n       at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)\n       at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n       at com.eaglecreektech.expedience.provisioning.web.servletFilters.AuthFilter.doFilter(AuthFilter.java:133)\n       at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n       at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n       at com.eaglecreektech.expedience.provisioning.web.servletFilters.RequestVolumeFilter.doFilter(RequestVolumeFilter.java:141)\n       at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n       at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n       at com.eaglecreektech.expedience.provisioning.web.servletFilters.StartupCheckFilter.doFilter(StartupCheckFilter.java:65)\n       at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n       at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n       at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n       at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n       at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n       at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n       at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n       at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n       at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\n       at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n       at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\n       at java.lang.Thread.run(Thread.java:619)\nFeb 1, 2010 5:59:04 PM org.apache.catalina.core.StandardHostValve custom\nSEVERE: Exception Processing\nErrorPage[exceptionType=java.lang.Exception,\nlocation=/unexpectedErrors.jsp]\njava.lang.IllegalStateException: Cannot reset buffer after response\nhas been committed\n       at org.apache.catalina.connector.Response.resetBuffer(Response.java:691)\n       at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:409)\n       at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:271)\n       at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n       at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n       at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n       at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n       at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\n       at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n       at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\n       at java.lang.Thread.run(Thread.java:619)\n\n\nAnd it doesn't put any error text into the broken page - the page just\nshows how ever far it got before it encountered the error.\n\nThis behavior doesn't seem correct - it seems like it should at least\nbehave the same way as it does when the error page is defined in a jsp\npage:\n\n<%@ page errorPage=\"unexpectedErrors.jsp\" %>\n\nIf the response has already been committed, then it just appends the\nerror page onto the end of the response (not ideal, but nothing else can be done, as far as I know)\n\nIf the response has not been committed, it clears the buffer and\nwrites the error page (which looks nice and pretty , like it should)\n\nI'd suggest that the error handling code for the error page as defined in web.xml should check if the response has been committed, and not try to clear the buffer if it is already committed - just append to the end, the same way that the jsp error handler does."}, {"count": 1, "tags": [], "bug_id": 48661, "attachment_id": null, "id": 135170, "time": "2010-03-08T19:00:17Z", "creator": "markt@apache.org", "creation_time": "2010-03-08T19:00:17Z", "is_private": false, "text": "This has been fixed in trunk and proposed for 6.0.x"}, {"count": 2, "attachment_id": null, "bug_id": 48661, "is_private": false, "id": 135944, "time": "2010-04-07T20:44:20Z", "creator": "markt@apache.org", "creation_time": "2010-04-07T20:44:20Z", "tags": [], "text": "The fix has been applied to 6.0.x and will be included in 6.0.27 onwards."}]
[{"attachment_id": null, "tags": [], "creator": "mthornton@swri.org", "text": "If the syslogappender is configured with a nonexistent syslog host, it will \nthrow a nullpointerexception from the java.net.DatagramSocket.send() method \nthrough the SyslogWriter.write method.  This exception is thrown up through \nthe application making the log call, which is not an appropriate outcome.", "count": 0, "id": 77301, "time": "2005-07-14T18:16:16Z", "bug_id": 35743, "creation_time": "2005-07-14T18:16:16Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 35743, "attachment_id": null, "is_private": false, "id": 77863, "time": "2005-07-30T22:56:33Z", "creator": "yoavs@computer.org", "creation_time": "2005-07-30T22:56:33Z", "text": "What do you suggest?  Checking to ensure the SysLog Host specified does exist,\nand if not throwing an error at configuration time?  Just curious..."}, {"count": 2, "attachment_id": null, "bug_id": 35743, "text": "I just thought logging a warning at configuration time as when there are no \nappenders found would be appropriate.  Your average log4j user, given a \nwarning that the syslog host did not exist or something to that effect, could \nthen track down the problem, and the application wouldn't explode because the \nlogging was misconfigured.\n\nI'm pretty sure that a logging tool should never throw errors back to an \napplication.  Logging is almost never mission-critical.  I suppose someone \ncould debate the point, but I think most people would agree.", "id": 78133, "time": "2005-08-05T01:05:46Z", "creator": "mthornton@swri.org", "creation_time": "2005-08-05T01:05:46Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "creator": "jwm@horde.net", "is_private": false, "count": 3, "id": 81876, "time": "2005-10-28T02:51:08Z", "bug_id": 35743, "creation_time": "2005-10-28T02:51:08Z", "text": "I noticed the same thing recently. Specifying an unresolvable syslog server\nresults in a null InetAddress (SyslogWriter.address). SyslogWriter.flush() does\nnot check that ds.address is not null, so DatagramSocket.send() throws a\nNullPointerException.\n\nSample exception output:\n\nlog4j:ERROR Could not find foo. All logging will FAIL.\njava.net.UnknownHostException: foo: foo\n        at java.net.InetAddress.getAllByName0(InetAddress.java:1011)\n        at java.net.InetAddress.getAllByName0(InetAddress.java:981)\n        at java.net.InetAddress.getAllByName(InetAddress.java:975) \n        at java.net.InetAddress.getByName(InetAddress.java:889)\n        at org.apache.log4j.helpers.SyslogWriter.<init>(SyslogWriter.java:47)\n        at\norg.apache.log4j.net.SyslogAppender.setSyslogHost(SyslogAppender.java:297)\n        at net.horde.pv.PV.main(PV.java:87)\n\nException in thread \"main\" java.lang.NullPointerException: null buffer || null\naddress\n        at java.net.PlainDatagramSocketImpl.send(Native Method)\n        at java.net.DatagramSocket.send(DatagramSocket.java:611)\n        at org.apache.log4j.helpers.SyslogWriter.write(SyslogWriter.java:77)\n        at org.apache.log4j.helpers.QuietWriter.write(QuietWriter.java:47)\n        at\norg.apache.log4j.helpers.SyslogQuietWriter.write(SyslogQuietWriter.java:53)\n        at org.apache.log4j.net.SyslogAppender.append(SyslogAppender.java:254)\n        at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230)\n        at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65)\n        at org.apache.log4j.Category.callAppenders(Category.java:203)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.debug(Category.java:257)\n        at net.horde.pv.PV.main(PV.java:114)\n\nThe following patch should prevent the exception:\n\nIndex: SyslogWriter.java\n===================================================================\n--- SyslogWriter.java   (revision 321351)\n+++ SyslogWriter.java   (working copy)\n@@ -79,7 +79,7 @@\n     DatagramPacket packet =\n       new DatagramPacket(bytes, bytes.length, address, SYSLOG_PORT);\n   \n-    if (this.ds != null) {\n+    if (this.ds != null && this.address != null) {\n       ds.send(packet);\n     }\n     // clean up for next time"}, {"count": 4, "attachment_id": null, "creator": "jwm@horde.net", "is_private": false, "id": 88844, "time": "2006-05-05T19:06:06Z", "bug_id": 35743, "creation_time": "2006-05-05T19:06:06Z", "tags": [], "text": "According to the latest revision at:\n\nhttp://svn.apache.org/viewcvs.cgi/logging/log4j/trunk/src/java/org/apache/log4j/helpers/SyslogWriter.java?rev=310971&view=markup\n\nthis problem still exists. This is marked NEEDINFO; is there any additional\ninformation I can provide? Thanks!\n"}, {"count": 5, "attachment_id": null, "creator": "gefowler@globallink.com", "text": "Is any additional info needed?  I believe the patch he provided is correct. As\nit stands, if the log host cannot be resolved, exceptions are thrown upon every\ncall to a log statement.", "id": 91543, "time": "2006-07-24T13:42:14Z", "bug_id": 35743, "creation_time": "2006-07-24T13:42:14Z", "tags": [], "is_private": false}, {"count": 6, "attachment_id": null, "bug_id": 35743, "is_private": false, "id": 91783, "time": "2006-08-01T19:37:24Z", "creator": "carnold@apache.org", "creation_time": "2006-08-01T19:37:24Z", "tags": [], "text": "Suggested remedy applied to log4j 1.2 branch in rev 427691 and trunk in rev 427690."}]
[{"count": 0, "tags": [], "creator": "timothy.stewart@gmail.com", "text": "Documentation at http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html indicates that one may use the dataSourceJNDI attribute to indicate the JNDI name of the datasource to provide connections to the pool.  This actually doesn't work.\n\nIn the code for class org.apache.tomcat.jdbc.pool.PooledConnection, we have an outstanding \"TODO\".\n\nBecause of this TODO, the dataSourceJNDI is ignored, and the code ends up going down the connectUsingDriver path, which ultimately logs a SQLException and throws a NamingException.\n\n\nThe following is my current Resource configuration:\n\n\t\t<Resource name=\"jdbc/dmi/source/dse\"\n\t\t\tauth=\"Container\"\n\t\t\ttype=\"com.dmotorworks.lib.sql.ConnectionPoolDataSource\"\n\t\t\tfactory=\"org.apache.naming.factory.BeanFactory\"\n\t\t\tuser=\"dse@$dse\"\n\t\t\taliases=\"dse|dse@$dse\" />\n\n\t\t<Resource name=\"jdbc/dmi/dse\"\n\t\t\tmaxIdle=\"16\" maxActive=\"16\"\n\t\t\tmaxAge=\"3600000\"\n\t\t\tmaxWait=\"2000\"\n\t\t\tvalidationQuery=\"select 1 from dual\"\n\t\t\tauth=\"Container\"\n\t\t\ttype=\"org.apache.tomcat.jdbc.pool.DataSource\"\n\t\t\tfactory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n\t\t\tdataSourceJNDI=\"java:comp/env/jdbc/dmi/source/dse\" />\n\nNote the \"connection source\" is an internal corporate datasource instantiated as a bean.  We want to use that bean to provide connections into the Tomcat JDBC pool and have it configured using a dataSourceJNDI reference.\n\nThe root-cause stack trace that is logged is:\n\njava.sql.SQLException\n        at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:243)\n        at org.apache.tomcat.jdbc.pool.PooledConnection.connect(PooledConnection.java:176)\n        at org.apache.tomcat.jdbc.pool.ConnectionPool.createConnection(ConnectionPool.java:659)\n        at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:601)\n        at org.apache.tomcat.jdbc.pool.ConnectionPool.init(ConnectionPool.java:464)\n        at org.apache.tomcat.jdbc.pool.ConnectionPool.<init>(ConnectionPool.java:130)\n        at org.apache.tomcat.jdbc.pool.DataSourceProxy.pCreatePool(DataSourceProxy.java:112)\n        at org.apache.tomcat.jdbc.pool.DataSourceProxy.createPool(DataSourceProxy.java:99)\n        at org.apache.tomcat.jdbc.pool.DataSourceFactory.createDataSource(DataSourceFactory.java:499)\n        at org.apache.tomcat.jdbc.pool.DataSourceFactory.getObjectInstance(DataSourceFactory.java:222)\n        at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:143)\n        at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:321)\n        at org.apache.naming.NamingContext.lookup(NamingContext.java:826)\n\n\nPooledConnection code is below.  The problem is clearly the outstanding TODO.\n\n\n    public void connect() throws SQLException {\n        if (released.get()) throw new SQLException(\"A connection once released, can't be reestablished.\");\n        if (connection != null) {\n            try {\n                this.disconnect(false);\n            } catch (Exception x) {\n                log.debug(\"Unable to disconnect previous connection.\", x);\n            } //catch\n        } //end if\n        if (poolProperties.getDataSource()==null && poolProperties.getDataSourceJNDI()!=null) {\n            //TODO lookup JNDI name\n        }\n\n        if (poolProperties.getDataSource()!=null) {\n            connectUsingDataSource();\n        } else {\n            connectUsingDriver();\n        }\n\n        //set up the default state, unless we expect the interceptor to do it\n        if (poolProperties.getJdbcInterceptors()==null || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getName())<0 ||\n                poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getSimpleName())<0) {\n            if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());\n            if (poolProperties.getDefaultReadOnly()!=null) connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());\n            if (poolProperties.getDefaultAutoCommit()!=null) connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());\n            if (poolProperties.getDefaultCatalog()!=null) connection.setCatalog(poolProperties.getDefaultCatalog());\n        }\n        this.discarded = false;\n        this.lastConnected = System.currentTimeMillis();\n    }", "id": 167727, "time": "2013-06-07T18:57:48Z", "bug_id": 55078, "creation_time": "2013-06-07T18:57:48Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "timothy.stewart@gmail.com", "text": "Created attachment 30407\nPossible fix\n\nReplaced the TODO with a JNDI lookup and set the datasource on the poolProperties before continuing.  This is a possible fix.", "id": 167729, "time": "2013-06-07T23:56:48Z", "bug_id": 55078, "creation_time": "2013-06-07T23:56:48Z", "is_private": false, "attachment_id": 30407}, {"attachment_id": null, "tags": [], "bug_id": 55078, "text": "This problem isn't quite what I thought.  I have some other issue than the one I described.  The org.apache.tomcat.jdbc.pool.DataSourceFactory has code to resolve the DataSource from JNDI, and set it on the PoolConfiguration.  It seems to work for most DataSources in my app, but not this one.\n\nI'm not sure whether to close this bug, or leave it open as a low priority.  I feel the TODO could be resolved, and since the property is on the PooledConnection class configuration, other custom factories might not expect to do the JNDI lookup yourself.  It is very minor at this point, but I think it would be safer for this class to do the resolution if it is not already resolved.\n\nAnyhow, if I find my original problem is a real Tomcat issue, I'll either comment here if related or open something else.", "count": 2, "id": 167730, "time": "2013-06-08T03:56:15Z", "creator": "timothy.stewart@gmail.com", "creation_time": "2013-06-08T03:56:15Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 55078, "attachment_id": null, "text": "So, you are saying that your patch is appropriate, but it still doesn't fix the actual problem you are having?", "id": 167766, "time": "2013-06-10T14:25:05Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-06-10T14:25:05Z", "is_private": false}, {"count": 4, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "id": 167946, "time": "2013-06-20T20:07:55Z", "bug_id": 55078, "creation_time": "2013-06-20T20:07:55Z", "is_private": false, "text": "Moving to the correct project."}]
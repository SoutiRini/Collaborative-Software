[{"count": 0, "attachment_id": null, "creator": "stephane.sr.riviere@atosorigin.com", "is_private": false, "id": 41831, "time": "2003-07-31T09:33:19Z", "bug_id": 22013, "creation_time": "2003-07-31T09:33:19Z", "tags": [], "text": "Let's get : \n- ServletA, mapped to /servletA/*, forwarding all request to servletB, using an \nabsolute path (\"/servletB/index.srv\")\n- ServletB, mapped to /servletB/index.srv, forwarding all request to a JSP, \nusing a relative path (\"index.jsp\")\n- index.jsp is located in \"servletB\" subfolder\n\n=> accessing to URL /servletB/index.jsp correctly return JSP content (!)\n=> accessing to URL /servletB/index.srv correctly forwards to the JSP (forward \nis OK)\n=> accessing to URL /servletA/index.srv return a 404 on \"/index.jsp\" (request \ndispatcher lost context info)"}, {"count": 1, "attachment_id": 7602, "creator": "stephane.sr.riviere@atosorigin.com", "text": "Created attachment 7602\nzipped webapp illustrating bug", "id": 41832, "time": "2003-07-31T09:34:36Z", "bug_id": 22013, "creation_time": "2003-07-31T09:34:36Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 22013, "text": "From the ServletContext.getRequestDispatcher() javadoc:\n\nThe pathname must begin with a \"/\" and is interpreted as relative to the current\ncontext root. Use getContext to obtain a RequestDispatcher for resources in\nforeign contexts. This method returns null if the ServletContext  cannot return\na RequestDispatcher.", "id": 41835, "time": "2003-07-31T09:47:58Z", "creator": "remm@apache.org", "creation_time": "2003-07-31T09:47:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 22013, "text": "I use RequestDispatcher obtained from the request, not from the ServletContext\n\nand from the ServletRequest.getRequestDispatcher() javadoc:\n\nThe pathname specified may be relative, although it cannot extend outside the \ncurrent servlet context. If the path begins with a \"/\" it is interpreted as \nrelative to the current context root. This method returns null if the servlet \ncontainer cannot return a RequestDispatcher. \n\n", "id": 41839, "time": "2003-07-31T09:53:06Z", "creator": "stephane.sr.riviere@atosorigin.com", "creation_time": "2003-07-31T09:53:06Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 22013, "text": "You 'test' servlet is mounted under /protected/index.srv  in the web.xml. This does not mean that \npaths in that servlet are relative to /protected/ (e.g. forwarding to just 'default.jsp' is not valid).\n\nConsider that you can mount a servlet under several different url patterns at the same time. Which \nrelative should it use then?", "id": 41844, "time": "2003-07-31T12:04:20Z", "creator": "puckman@taglab.com", "creation_time": "2003-07-31T12:04:20Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 22013, "text": "After looking at the Servlet specification and the source code, here is what I \nhave found :\n\nAccording to the specs (SRV.8.1 page 55): \n\"To allow RequestDispatcher objects to be obtained using relative paths that\nare relative to the path of the current request (not relative to the root of the\nServletContext), the following method is provided in the ServletRequest\ninterface: getRequestDispatcher\"\n\nThe path of the current request is (at least, that's what CoyoteRequest does):\nif present, the value of the \"javax.servlet.include.servlet_path\" attribute \n(for include-dispatched requests), if not, the value of the servlet path, \nobtained with a getServletPath() on the request. \n\nWith forwarded requests, the request is wrapped and the wrapper returns the new \nservlet path, when calling the getServletPath(), which seems to be a correct \nbehaviour.\nBut the getRequestDispatcher() is delegated to the wrapped request, which uses \nthe \"pre-forward\" servlet path.\n\nThis way, the path becomes relative to the first invoked servlet path and not \nto the last one, which uses a relative path .\nSo, is this behavior correct or not, that is the question...\n\nWhen using relative paths, you (normally?) suppose that the path will be \nrelative to the path of the current request ( obtained with the \nrequest.getServletPath() )\n\nIf you use different mappings, you know that the servlet will be accessed \nthrough one of this mappings. In such case, use relative paths at your own risk.\n\nWith the current behavior, it's really difficult to use relative paths, because \nyou can't even know to which path they will be relative !\n\nOne should admit that the specification are not very clear on multi-dispatched \nrequests and relative paths !", "id": 41846, "time": "2003-07-31T12:37:59Z", "creator": "stephane.sr.riviere@atosorigin.com", "creation_time": "2003-07-31T12:37:59Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 22013, "text": "forgot to reopen bug with my last comment :-(", "id": 41934, "time": "2003-08-01T09:26:08Z", "creator": "stephane.sr.riviere@atosorigin.com", "creation_time": "2003-08-01T09:26:08Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 22013, "attachment_id": null, "id": 51746, "time": "2004-02-04T22:51:11Z", "creator": "cedric.benazech@wanadoo.fr", "creation_time": "2004-02-04T22:51:11Z", "is_private": false, "text": "I also think this really is a bug.\n\nFor me, this bug is from the org.apache.catalina.core.ApplicationHttpRequest \nclass. \n\nWhen a dispath is done, the original request is wrapped with a \nApplicationHttpRequest (that extends HttpServletRequestWrapper). The path \nelements of the ApplicationHttpRequest are set to reflect the path used to \nobtain the RequestDispatcher.\n\nThe problem is that the ApplicationHttpRequest doesn't overload \ngetRequestDispatcher(String). So if the targeted servlet call the \ngetRequestDispatcher method, the call will be delegated to the nested request \n(ie the original request) that will convert the request-relative path to a \ncontext-relative using its own path elements.\n\nThe servlet specification doesn't explain what to do in such a case (when two \nforward are done for the same request) but its seems normal that the relative \npath used to get the RequestDispatcher (by the \nHttpServletRequest.getRequestDispatcher(String)) uses the path elements of the \ncurent request instead of using the ones of the original request.\n\nThis problem could be solve by adding in the ApplicationHttpRequest the code of \nthe getRequestDispatcher method of the HttpRequestBase class : \n\n    /**\n     * Return a RequestDispatcher that wraps the resource at the specified\n     * path, which may be interpreted as relative to the current request path.\n     *\n     * @param path Path of the resource to be wrapped\n     */\n    public RequestDispatcher getRequestDispatcher(String path) {\n\n        if (context == null)\n            return (null);\n\n        // If the path is already context-relative, just pass it through\n        if (path == null)\n            return (null);\n        else if (path.startsWith(\"/\"))\n            return (context.getServletContext().getRequestDispatcher(path));\n\n        // Convert a request-relative path to a context-relative one\n        String servletPath = (String) getAttribute(Globals.SERVLET_PATH_ATTR);\n        if (servletPath == null)\n            servletPath = getServletPath();\n\n        int pos = servletPath.lastIndexOf('/');\n        String relative = null;\n        if (pos >= 0) {\n            relative = RequestUtil.normalize\n                (servletPath.substring(0, pos + 1) + path);\n        } else {\n            relative = RequestUtil.normalize(servletPath + path);\n        }\n\n        return (context.getServletContext().getRequestDispatcher(relative));\n\n    }\n\nThis method need the context object so the context must be added in the \nApplicationHttpRequest constructor parameters. The constructor is only called \nfrom the ApplicationDispatcher that have the context object => it's not a \nproblem. Here is the addition of the attribute and the modification on the \nconstructor : \n\nimport org.apache.catalina.Context;\n\n// ...\n\n    /**\n     * The Context this ApplicationHttpRequest is associated with.\n     */\n    private final Context context;\n\n    /**\n     * Construct a new wrapped request around the specified servlet request in \nthe specified context.\n     *\n     * @param request The servlet request being wrapped\n     * @param context The Context this ApplicationHttpRequest is associated with\n     */\n    public ApplicationHttpRequest(HttpServletRequest request, Context context) {\n        super(request);\n        setRequest(request);\n        this.context = context;\n    }\n\n\nand finally the modification of the constructor call in the wrapRequest() \nmethod of the ApplicationDispatcher class : \n\n        // Instantiate a new wrapper at this point and insert it in the chain\n        ServletRequest wrapper = null;\n        if ((current instanceof ApplicationHttpRequest) ||\n            (current instanceof HttpRequest) ||\n            (current instanceof HttpServletRequest))\n            wrapper = new ApplicationHttpRequest((HttpServletRequest) current, \ncontext);\n\n\n\nHope it helps.\n"}, {"count": 8, "tags": [], "text": "This is now fixed in TC4. It was fixed in TC5 some time ago (in 5.0.7).\n\nMany thanks for the patch.", "attachment_id": null, "id": 73494, "creator": "markt@apache.org", "time": "2005-04-10T20:23:32Z", "bug_id": 22013, "creation_time": "2005-04-10T20:23:32Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "jhuxhorn@googlemail.com", "attachment_id": null, "text": "If a webapp is using serialization of classes loaded by the webapp classloader then the \"Find leaks\" button will report a leak after undeploy of the webapp.\nThis is only partially true since the references that are still kept are only SoftReference instances.\n\nThis can be circumvented by adding code comparable to the changes in this commit https://github.com/huxi/logback/commit/d53e970963f84692889d438dd8a23c96137c15f2 prior to executing the garbage collection during \"Find leaks\".\n\nI'd suggest to add such code to prevent the false positive warning.\n\nSee also http://jira.qos.ch/browse/LBCORE-205", "id": 146303, "time": "2011-05-13T11:03:24Z", "bug_id": 51195, "creation_time": "2011-05-13T11:03:24Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 146367, "time": "2011-05-16T21:54:00Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-05-16T21:54:00Z", "is_private": false, "text": "The patch as written seems a bit over-reaching, possibly non-threadsafe and might even be JVM-specific.\n\nIt's over-reaching in that it purges the ObjectStreamClass's cache unconditionally which may result in a slight performance degradation for other threads as they re-populate the cache. I suspect performance is somewhat less of a concern for the thread taking the webapp out of service, so I think there's a reasonable amount of room to only clear those classes from the cache that came from the doomed webapp's ClassLoader.\n\nFrom a thread-safety point of view, I'm not sure it's safe at all to clear this cache without doing a lot of checking of the type and/or method signatures, etc. This is also tied to the fact that this is a private class that may or may not exist outside of Sun/Oracle's implementation, or even in different versions of the JVM... if it's implementation-specific, we need a reliable way to test for the safety of this technique.\n\nObviously reflection can be used to see if the class and it's fields actually exist, but I'm skeptical about ensuring the thread-safety of the implementation.\n\nIs it not enough to call System.gc(), here?"}, {"count": 2, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 146369, "time": "2011-05-17T00:17:23Z", "creator": "jhuxhorn@googlemail.com", "creation_time": "2011-05-17T00:17:23Z", "is_private": false, "text": "Calling System.gc() is not enough at all since the caches in question contain SoftReferences that are not collected until the VM is running out of memory. This is the root of this whole issue. The references are not released, thus causing the leak-warning.\n\nSystem.gc() is already executed during/before \"Find leaks\" if I'm not entirely mistaken.\n\nThe performance degradation is absolutely irrelevant since I'd like to see this code executed on click of the \"Find leaks\" button and not in case of every undeploy.\nThis isn't something you'd do in a production environment.\nClicking that button will result in a certain amount of performance degradation caused by the System.gc(), anyway.\n\nThe patch itself would only be non-threadsafe if\na) the private class java.io.ObjectStreamClass$Caches exists and\nb) the implementation contains both fields and\nc) the fields in question are not instances of ConcurrentMap but only Map\n\nc) is not taken care of at the moment but this could easily be circumvented by changing the if condition to if(value instanceof ConcurrentMap) or even if(value instanceof ConcurrentHashMap).\n\nCalling clear() on a ConcurrentHashMap is safe according to the documentation.\nIt won't interfere with any retrieval or update operations.\nIt's just not guaranteed, that the map is really empty with 100% certainty.\n\nThe code does nothing at all if a) or b) are not fulfilled."}, {"count": 3, "tags": [], "text": "The code referenced above from logback is not licensed in a way that allows it to be used in an ALv2 work in source form.\n\nThe gc leaks functionality already includes a warning that it may report false positives and that a profiler should be used to determine if there really is a leak.\n\nI'd be happy to review an appropriate licensed proposed patch.\n\nWithout a proposed patch and given the above I am leaning towards closing this as WONTFIX.", "is_private": false, "id": 146428, "creator": "markt@apache.org", "time": "2011-05-18T17:38:13Z", "bug_id": 51195, "creation_time": "2011-05-18T17:38:13Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "jhuxhorn@googlemail.com", "attachment_id": 27038, "id": 146470, "time": "2011-05-19T17:19:01Z", "bug_id": 51195, "creation_time": "2011-05-19T17:19:01Z", "is_private": false, "text": "Created attachment 27038\nImplements the suggested change in StandardHost\n\nThis patch against trunk implements the suggested changes.\nThe code is purely my own work, apply any license you like.\n\nUnfortunately, I was unable to perform an \"ant release\" build due to unrelated issues so I couldn't test this myself.\n\nI got the following build error:\ncompile-non-log4j:\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/build2.xml:359: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds\n    [javac] Compiling 11 source files to [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/target/classes\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/src/java/org/apache/juli/logging/impl/ServletContextCleaner.java:24: package javax.servlet does not exist\n    [javac] import javax.servlet.ServletContextEvent;\n    [javac]                     ^\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/src/java/org/apache/juli/logging/impl/ServletContextCleaner.java:25: package javax.servlet does not exist\n    [javac] import javax.servlet.ServletContextListener;\n    [javac]                     ^\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/src/java/org/apache/juli/logging/impl/ServletContextCleaner.java:52: cannot find symbol\n    [javac] symbol: class ServletContextListener\n    [javac] public class ServletContextCleaner implements ServletContextListener {\n    [javac]                                               ^\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/src/java/org/apache/juli/logging/impl/ServletContextCleaner.java:61: cannot find symbol\n    [javac] symbol  : class ServletContextEvent\n    [javac] location: class org.apache.juli.logging.impl.ServletContextCleaner\n    [javac]     public void contextDestroyed(ServletContextEvent sce) {\n    [javac]                                  ^\n    [javac] [snip]/tomcat-trunk/output/extras/logging/commons-logging-1.1.1-src/src/java/org/apache/juli/logging/impl/ServletContextCleaner.java:135: cannot find symbol\n    [javac] symbol  : class ServletContextEvent\n    [javac] location: class org.apache.juli.logging.impl.ServletContextCleaner\n    [javac]     public void contextInitialized(ServletContextEvent sce) {\n    [javac]                                    ^\n    [javac] 5 errors\n\nBUILD FAILED"}, {"count": 5, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "A couple of comments on the proposed patch.\n\n1. This looks like clean-up code and as such is better placed in the WebappClassLoader as another ClearReferencesXXX method.\n\n2. Rather than clearing the entire map, it would be better to iterate over the map and remove only those entries that had been loaded by the class WebappClassLoader currently being stopped.\n\nIn terms of checking the build, \"ant\" should suffice rather than the full \"ant release\". You;ll still get a working Tomcat instance you can test in output/build.", "id": 146484, "time": "2011-05-20T18:58:43Z", "bug_id": 51195, "creation_time": "2011-05-20T18:58:43Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 146583, "time": "2011-05-24T11:09:57Z", "creator": "jhuxhorn@googlemail.com", "creation_time": "2011-05-24T11:09:57Z", "is_private": false, "text": "I disagree.\n\nThe cleanup performed in the code is merely to prevent a *false* memory leak warning. A real leak does, in fact, not exist. This is the reason why I put it directly before the execution of System.gc() in the \"Find Leaks\" function.\n\nSince \"Find Leaks\" isn't supposed to be executed in a production environment, I don't think that any further optimization (suggestion in 2.) makes sense. It would probably make sense if this code would indeed be added to the normal undeploy procedure but I really don't think that this is necessary or advisable.\n\nThe idea is to prevent false memory leak warnings so that real ones aren't ignored if they occur.\nSee http://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf ;)"}, {"count": 7, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 146592, "time": "2011-05-24T13:59:07Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-05-24T13:59:07Z", "is_private": false, "text": "Joern,\n(In reply to comment #6)\n> The cleanup performed in the code is merely to prevent a *false* memory leak\n> warning. A real leak does, in fact, not exist. This is the reason why I put it\n> directly before the execution of System.gc() in the \"Find Leaks\" function.\n\nOne could argue that a memory leak does, in fact, exist: just because the references will be /eventually/ collected doesn't mean that they won't loiter for quite a long time... unless the GC is getting seriously low on memory, those objects will stick in memory, and so, likely, will the WebappClassLoader, and all of the java.lang.Class objects it manages.\n\nI agree with Mark that this feature is best placed into WebappClassLoader and run during it's disposal sequence.\n\n> Since \"Find Leaks\" isn't supposed to be executed in a production environment, I\n> don't think that any further optimization (suggestion in 2.) makes sense.\n\nIf this will be used in WebappClassLoader, such optimizations should obviously be made.\n\n> It\n> would probably make sense if this code would indeed be added to the normal\n> undeploy procedure but I really don't think that this is necessary or\n> advisable.\n\nThis could be implemented as a utility method accessible to both pieces of code, and called directly during a \"find leaks\" operation... I would have to look at the \"find leaks\" feature to see if that would even be necessary... my sense is that the WCL is disposed before the leaks are detected, so I don't think any changes to the manager app would need to be made."}, {"count": 8, "tags": [], "creator": "jhuxhorn@googlemail.com", "attachment_id": null, "text": "(In reply to comment #7)\n> Joern,\n> (In reply to comment #6)\n> > The cleanup performed in the code is merely to prevent a *false* memory leak\n> > warning. A real leak does, in fact, not exist. This is the reason why I put it\n> > directly before the execution of System.gc() in the \"Find Leaks\" function.\n> \n> One could argue that a memory leak does, in fact, exist: just because the\n> references will be /eventually/ collected doesn't mean that they won't loiter\n> for quite a long time... unless the GC is getting seriously low on memory,\n> those objects will stick in memory, and so, likely, will the WebappClassLoader,\n> and all of the java.lang.Class objects it manages.\n> \n> I agree with Mark that this feature is best placed into WebappClassLoader and\n> run during it's disposal sequence.\n\n\nAlright, I agree that it's better to get rid of a WebappClassLoader as soon as possible instead of waiting for a hard gc caused by low memory.\n\n\n> > Since \"Find Leaks\" isn't supposed to be executed in a production environment, I\n> > don't think that any further optimization (suggestion in 2.) makes sense.\n> \n> If this will be used in WebappClassLoader, such optimizations should obviously\n> be made.\n\nIt's actually pretty hard to implement those optimizations. The keys used in those maps are two static internal classes of ObjectStreamClass. \n\nFieldReflectorKey is private and WeakClassKey is package-private.\n\nPerforming a selective cleanup would involve serious complexity an reflection magic, including lots of assumptions about internal behavior in the hope that it won't change...\nI'd leave it like it is right now to prevent errors caused by this.\nMy current implementation will simply do nothing if localDescs & reflectors are not available or not instances of class ConcurrentHashMap.\n\nI don't think that the performance impact is a big thing but I haven't done any benchmarks, either. You should remember that this is exactly what would happen naturally if the memory of the JVM is running low. We are just getting rid of SoftReferences. This would be a problem if performed continuously but doing so once during undeploy shouldn't interfere with other webapps that much.\n\n> > It\n> > would probably make sense if this code would indeed be added to the normal\n> > undeploy procedure but I really don't think that this is necessary or\n> > advisable.\n> \n> This could be implemented as a utility method accessible to both pieces of\n> code, and called directly during a \"find leaks\" operation... I would have to\n> look at the \"find leaks\" feature to see if that would even be necessary... my\n> sense is that the WCL is disposed before the leaks are detected, so I don't\n> think any changes to the manager app would need to be made.\n\nI don't have enough know-how about the way Tomcat functionality is structured. So I just assume you are right. The manager app would likely stay untouched since \"Find leaks\" simply checks if the WebappClassLoader has been unloaded properly, if I remember correctly.", "id": 146593, "time": "2011-05-24T14:35:17Z", "bug_id": 51195, "creation_time": "2011-05-24T14:35:17Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 146601, "time": "2011-05-24T20:17:19Z", "creator": "slaurent@apache.org", "creation_time": "2011-05-24T20:17:19Z", "is_private": false, "text": "just my 2cts : I'm leaning towards Joern point of view, that cleaning the ObjectStreamClass cache should be done during the Find Leaks action rather than when stopping the webapp. This way we do not impact other webapps when stopping one."}, {"count": 10, "tags": [], "bug_id": 51195, "attachment_id": null, "id": 148174, "time": "2011-07-26T11:19:08Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-07-26T11:19:08Z", "is_private": false, "text": "I think there might be additional options for the findleaks command.\n\nE.g. make calling gc optional, or perform additional cleanup as described here."}, {"count": 11, "tags": [], "bug_id": 51195, "attachment_id": 29258, "id": 161559, "time": "2012-08-21T14:15:20Z", "creator": "belllori89@gmail.com", "creation_time": "2012-08-21T14:15:20Z", "is_private": false, "text": "Created attachment 29258\ntest"}]
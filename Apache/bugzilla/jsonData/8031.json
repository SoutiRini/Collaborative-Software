[{"count": 0, "tags": [], "text": "ProjectHelper has for some time used various tricks to ensure that the URL it\npasses to the XML parser escapes some nasty filename chars like '#':\n\nrevision 1.29\ndate: 2000/09/14 14:04:38;  author: bodewig;  state: Exp;  lines: +3 -3\nProvide the SAXParser with the File instead of an InputSource to give\nit a chance to parse relative URIs.\n\nPR: 54\nSubmitted by:\tAchim Dannecker <A.Dannecker@gmx.de>\n\nrevision 1.45\ndate: 2001/01/16 13:36:38;  author: conor;  state: Exp;  lines: +15 -1\nHandle directories with # in them by passing the parser\nan inputstream, rather than a name.\n\nSubmitted by:\tYossie Teitz <yossie@reachcast.co.il>\n\nThis is currently handled (now in ProjectHelperImpl.java) by the following code:\n\nString uri = \"file:\" + buildFile.getAbsolutePath().replace('\\\\', '/');\nfor (int index = uri.indexOf('#'); index != -1; index = uri.indexOf('#')) {\n    uri = uri.substring(0, index) + \"%23\" + uri.substring(index + 1);\n}\n\nwhich works for this one case, but not others, and furthermore uses undocumented\naspects of the JRE's treatment of file: URLs which may break on some JRE\nimplementations.\n\nJDK 1.2 had the File.toURL() method, but it did not solve the escaping problem\ncorrectly; see Java bug #4472849 (see link for details).\n\nFortunately JDK 1.4 lets you do this:\n\nfile.toURI().toURL().toExternalForm()\n\nwhich ought to provide a URL string with all suitable escapes, ready to be sent\nto the parser, with semantics guaranteed by the Java platform.\n\nI suggest that ProjectHelperImpl run code similar to this via reflection when\nrunning on JDK 1.4, rather than the current ad-hoc code.", "attachment_id": null, "bug_id": 8031, "id": 13401, "time": "2002-04-12T18:25:54Z", "creator": "jesse.glick@netbeans.com", "creation_time": "2002-04-12T18:25:54Z", "is_private": false}, {"count": 1, "tags": [], "creator": "stevel@apache.org", "text": "Do you have  patch for this, Jesse? We could put into ant1.6", "id": 18589, "time": "2002-06-26T04:55:53Z", "bug_id": 8031, "creation_time": "2002-06-26T04:55:53Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 8031, "text": "File.toURI() is since 1.4.....\n\nDoes Ant still have a JDK 1.1 requirement?", "id": 18590, "time": "2002-06-26T05:14:51Z", "creator": "dion@apache.org", "creation_time": "2002-06-26T05:14:51Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 8031, "attachment_id": null, "id": 23404, "time": "2002-09-26T06:24:01Z", "creator": "bodewig@apache.org", "creation_time": "2002-09-26T06:24:01Z", "is_private": false, "text": "No trace of FIXED in CVS, sorry."}, {"count": 4, "tags": [], "bug_id": 8031, "attachment_id": null, "text": "The escaping code has now been factored to FileUtils, all ASCII chars that need\nescaping are now getting treated correctly.\n\nIf you ever wanted to provide a patch, this would be the place to put it into.", "id": 26473, "time": "2002-11-18T14:38:11Z", "creator": "bodewig@apache.org", "creation_time": "2002-11-18T14:38:11Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 8031, "attachment_id": null, "text": "Well I have a patch now, which uses URI on JDK 1.4 and otherwise uses the old\nlogic. All unit tests seem to pass for me on Linux, JDK 1.4.2, offline=true;\notherwise YMMV. Not sure how safe this is for 1.6, might be more appropriate for\n1.7 - up to judgement of the committers.\n\nOf especial interest:\n\n1. A couple of unit tests were IMHO incorrect and I changed them enough to pass\n(hopefully still asserting what should be true). Please inspect carefully. Note\nthat Java does *not* specify what precise form file: URIs should take on various\nplatforms, only some aspects of their behavior, so the unit tests have to live\non the edge a bit.\n\n2. I don't know where the convention of using URLs such as \"file:./foo.xml\" or\n\"file:foo.xml\" (rather than simply \"foo.xml\") for entity includes came from, but\nit certainly looks like it violates common sense as well as the URI\nspecification. (Relative URIs have no protocol and are resolved from a base URI\nwhich does.) JDK 1.4's new File(URI) rejects such URIs (correctly IMHO, though I\ncould imagine them being resolved relative to the JVM's current working\ndirectory, however useless that might be). Ant's faq.xml used to recommend this\n\"file:./etc\" style for whatever reason. The patch corrects the FAQ. However, for\ncompatibility with existing (IMHO erroneous) build scripts, file: URIs which do\nnot have an absolute path beginning with '/' (and are thus illegal) are just\npassed through to the old parsing mechanism even on JDK 1.4. IncludeTest thus\ncontinues to pass using both syntaxes.\n\n2a. While fromURI thus accepts relative paths for compatibility, toURI attempts\nto always produce a URI encoding an absolute path for safety.\n\n3. Fixed up some places in the codebase that were failing to use the FileUtils\nmethods to create or interpret file: URLs and were thus in danger of behaving\nincorrectly for some pathnames.\n\n4. Removed obsolete FILE_PROTOCOL_PREFIX from the XSLTLiaison interface. It was\nnot being used anywhere, and was not really correct anyway. (F_P_P +\nfile.getAbsolutePath() is not a safe way to make URIs, and the extra \"//\" at the\nend of the prefix is gratuitous since there will never be an authority for a\nfile URI.)", "id": 46170, "time": "2003-10-23T19:44:00Z", "creator": "jglick@apache.org", "creation_time": "2003-10-23T19:44:00Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 8031, "attachment_id": 8706, "id": 46171, "time": "2003-10-23T19:44:50Z", "creator": "jglick@apache.org", "creation_time": "2003-10-23T19:44:50Z", "is_private": false, "text": "Created attachment 8706\nSuggested patch (needs review)"}, {"count": 7, "tags": [], "bug_id": 8031, "attachment_id": null, "id": 46181, "time": "2003-10-23T20:33:42Z", "creator": "jglick@apache.org", "creation_time": "2003-10-23T20:33:42Z", "is_private": false, "text": "See also:\n\nhttp://developer.java.sun.com/developer/bugParade/bugs/4273532.html"}, {"count": 8, "tags": [], "bug_id": 8031, "text": "BTW I've noticed that in Ant 1.6b3, if I try to run a build script contained in\na directory whose name contains UTF-8-encoded non-ASCII characters (on Linux:\nlocale en_US.UTF-8, glibc 2.3.2, kernel 2.4.20), it fails right away with an\nArrayIndexOutOfBoundsException (e.g. index 269) from FileUtils.toURI:\n\n    if (isSpecial[c]) { <-- here\n\nAnt 1.5.3 runs the same script just fine, and everything else in Java and in\nfact the rest of my operating system deals with, and displays, the directory\ncorrectly...\n\nI presume the previously attached patch would solve this bug (on JDK 1.4),\nthough I haven't tried it.\n\nA quick fix for Ant 1.6 might be to change this line to read:\n\n    if (c < 256 && isSpecial[c]) {\n\nwhich I think would at least pass through Unicode characters untouched, which\nJava should be able to handle. The only special characters you really care about\n- e.g. '#' or '?' - are in ASCII anyway.", "id": 48604, "time": "2003-12-06T02:15:49Z", "creator": "jglick@apache.org", "creation_time": "2003-12-06T02:15:49Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 8031, "text": "See bug #26642 re. my last comment.", "id": 51670, "time": "2004-02-03T18:16:50Z", "creator": "jglick@apache.org", "creation_time": "2004-02-03T18:16:50Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 68594, "time": "2004-12-15T23:14:08Z", "bug_id": 8031, "creation_time": "2004-12-15T23:14:08Z", "is_private": false, "text": "Note that Peter added the recommended c < 256 check on 2/3/2004."}, {"count": 11, "tags": [], "text": "...documented in bug 26642 which is mentioned above.", "is_private": false, "id": 68595, "creator": "mbenson@apache.org", "time": "2004-12-15T23:15:43Z", "bug_id": 8031, "creation_time": "2004-12-15T23:15:43Z", "attachment_id": null}, {"count": 12, "attachment_id": null, "creator": "mbenson@apache.org", "text": "*** Bug 32718 has been marked as a duplicate of this bug. ***", "id": 68634, "time": "2004-12-16T22:41:42Z", "bug_id": 8031, "creation_time": "2004-12-16T22:41:42Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "bug_id": 8031, "attachment_id": null, "id": 83733, "time": "2005-12-16T07:43:34Z", "creator": "antoine@apache.org", "creation_time": "2005-12-16T07:43:34Z", "is_private": false, "text": "Patches submitted, thanks. \nNote that toURI is implemented with java.net.URI.toASCIIString(), otherwise the\nnon ascii characters are not properly % escaped.\nI have also had to do some small changes for the FileUtilsTest.\n\nfromURI(\"file:///foo\") ==> C:\\foo\nbefore it was \\foo\n\nActually, this creates an inconsistency in the behavior of Ant between\nant running on JDK 1.2 or 1.3 and Ant running on JDK 1.4 or 1.5.\n\nThis should be fixed in the implemetation of fromURI."}, {"count": 14, "tags": [], "bug_id": 8031, "attachment_id": null, "id": 109110, "time": "2007-10-08T02:08:15Z", "creator": "foamdino@gmail.com", "creation_time": "2007-10-08T02:08:15Z", "is_private": false, "text": "Is this still open?"}, {"count": 15, "tags": [], "text": "Seems to have already been applied on 16 Dec 2005, SVN rev 357131.", "attachment_id": null, "id": 109181, "creator": "jglick@apache.org", "time": "2007-10-09T18:20:47Z", "bug_id": 8031, "creation_time": "2007-10-09T18:20:47Z", "is_private": false}]
[{"count": 0, "tags": [], "bug_id": 51952, "attachment_id": 27685, "id": 150129, "time": "2011-10-04T15:36:57Z", "creator": "kari.scott@cdw.com", "creation_time": "2011-10-04T15:36:57Z", "is_private": false, "text": "Created attachment 27685\nSimple test to recreate CompressionFilter causing IllegalStateException\n\nUsing Tomcat 7.0.21 or 7.0.22 with jdk1.6.0_26 on Solaris 10, mod_ajp and Apache 2.2.21, we get the following logged exception when a sendRedirect is used in a jsp and the CompressionFilter is enabled.\n\nIt does not occur using 7.0.20.\n\nI've attached a gzipped tar file containing a simple test that reproduces the problem. test.jsp just contains a sendRedirect to test2.jsp and I've included the source code for the CompressionFilter and a simple web.xml file with this filter's entry. Hitting test.jsp logs the exception below.\n\nSEVERE: Servlet.service() for servlet [jsp] in context with path [] threw exception [java.lang.IllegalStateException: getWriter() has already been called for this response] with root cause\njava.lang.IllegalStateException: getWriter() has already been called for this response\n        at org.apache.catalina.connector.Response.getOutputStream(Response.java:594)\n        at org.apache.catalina.connector.ResponseFacade.getOutputStream(ResponseFacade.java:199)\n        at com.tirerack.filters.CompressionResponseStream.<init>(CompressionResponseStream.java:47)\n        at com.tirerack.filters.CompressionServletResponseWrapper.createOutputStream(CompressionServletResponseWrapper.java:172)\n        at com.tirerack.filters.CompressionServletResponseWrapper.getWriter(CompressionServletResponseWrapper.java:250)\n        at org.apache.jasper.runtime.JspWriterImpl.initOut(JspWriterImpl.java:125)\n        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:118)\n        at org.apache.jasper.runtime.PageContextImpl.release(PageContextImpl.java:190)\n        at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(JspFactoryImpl.java:123)\n        at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(JspFactoryImpl.java:80)\n        at org.apache.jsp.test_jsp._jspService(test_jsp.java:74)\n        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:433)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:389)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:333)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at com.tirerack.filters.CompressionFilter.doFilter(CompressionFilter.java:194)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405)\n        at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:200)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515)\n        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:662)"}, {"count": 1, "tags": [], "text": "I find this a bit funny as I had exactly the same issue with my own CompressionFilter.  The issue is that 7.0.21 produces a response body *inside* sendRedirect().  This entails it obtaining a response writer therein, which your filter can't know has occurred as it's doing this at a level of the filter chain your filter can't see.\n\nThis issue seemed easy enough to address -- for the test cases I initially saw.  Unfortunately for your test case things are not so simple.  I'm not at all sure how one can do a CompressionFilter with this Tomcat change in place -- as filters can no longer tell when it is safe to call getOutputStream().\n\nI'm half inclined to remove the Tomcat \"fix\" that caused this from my Tomcat binary.", "is_private": false, "bug_id": 51952, "id": 150130, "time": "2011-10-04T15:57:44Z", "creator": "jessh@ptc.com", "creation_time": "2011-10-04T15:57:44Z", "attachment_id": null}, {"count": 2, "tags": [], "text": "How about a new configuration attribute on the context that allows this behaviour to be enabled / disabled per context?\n\nSee https://issues.apache.org/bugzilla/show_bug.cgi?id=41718 for why this behaviour was introduced.", "attachment_id": null, "id": 150166, "creator": "markt@apache.org", "time": "2011-10-05T02:41:26Z", "bug_id": 51952, "creation_time": "2011-10-05T02:41:26Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 51952, "is_private": false, "id": 150169, "creation_time": "2011-10-05T04:13:54Z", "time": "2011-10-05T04:13:54Z", "creator": "jessh@ptc.com", "text": "Overall the RFC cited and the existing servlet API do not combine well when one considers things like compression Filters.\n\nI ended up figuring out a way to work around this in my own compression filter (with targeted catching of IllegalStateExceptions and appropriate fallback actions), but I will have to say that it wasn't pretty.", "attachment_id": null}, {"count": 4, "tags": [], "text": "If I had to choose between a new context attribute or mucking with my CompressionFilter with something \"that isn't pretty\", well, I'm going to go with the attribute. :-) \n\nWas the original issue of not including the hypertext note/link in the response body for sendRedirects actually causing trouble or was it just added to conform to the RFC?", "attachment_id": null, "id": 150179, "creator": "kari.scott@cdw.com", "time": "2011-10-05T13:57:57Z", "bug_id": 51952, "creation_time": "2011-10-05T13:57:57Z", "is_private": false}, {"count": 5, "tags": [], "text": "FWIW, the javadoc for javax.servlet.Filter specifically mentions \"compression\" as a type of Filter one might want to build. Though not exactly part of the spec, Tomcat should try it's best not to get in the way of building such Filters.\n\nPerhaps one way would be to re-write the patch for r1156533 to use OutputStream instead of Writer.\n\nSomething I'm not getting is this:\n\nWhy is your code (say, org.apache.jsp.test_jsp._jspService(test_jsp.java:74)) running after a call to sendRedirect? Also, if *your* code calls sendRedirect(), why isn't the request *already* wrapped in your compression wrapper, so that calling sendRedirect which calls getWriter ends up calling your wrapped-getWriter method?", "is_private": false, "bug_id": 51952, "id": 150181, "time": "2011-10-05T14:33:50Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-10-05T14:33:50Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "If you look at the JSP source in question, it simply calls sendRedirect() in a scriptlet.  The issue here is that the auto-generated JSP source, whitespace, etc, will try to write more stuff after that call.\n\nIt would probably be more correct to do:\n  response.sendRedirect(...);\n  return;\nin the scriptlet -- which may avoid the issue.\n\nIn any case this sort of attention to detail wasn't necessary prior to this change, though, so there are bound to be existing JSP pages, servlets, etc, where this sort of sloppiness exists.  Thus I believe we should endeavor to be forgiving to such cases.\n\nAlso using an output stream rather than a writer won't solve the issue as I believe the JSP page in question would then produce an exception *without* a compression filter in place.", "is_private": false, "id": 150184, "creator": "jessh@ptc.com", "time": "2011-10-05T14:41:46Z", "bug_id": 51952, "creation_time": "2011-10-05T14:41:46Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 51952, "attachment_id": null, "is_private": false, "id": 150186, "time": "2011-10-05T14:46:20Z", "creator": "jessh@ptc.com", "creation_time": "2011-10-05T14:46:20Z", "text": "I'd think the ideal case might be to hide the sendRedirect() response body generation from getOutputStream() and getWriter() entirely.  getOutputStream() and getWriter() could really return no-op output streams and writers after sendRedirect() has been called [as the servlet spec says nothing should be written to the response after this point] and throw IllegalStateExceptions only when things *outside* sendRedirect() have tried to obtain both an output stream and a writer."}, {"count": 8, "tags": [], "text": "It's exactly what Jess said, it's the auto-generated JSP code that's the\nproblem. And, we do have returns after all of our sendRedirects but in this\nsimple test it wouldn't compile because it's unreachable so I removed it since\nit didn't seem pertinent to the test. The IllegalException occurs both with and\nwithout it.", "attachment_id": null, "id": 150187, "creator": "kari.scott@cdw.com", "time": "2011-10-05T14:51:20Z", "bug_id": 51952, "creation_time": "2011-10-05T14:51:20Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 51952, "attachment_id": null, "text": "If making this behavior transparent to callers is seen as too much overhead/mess/whatever, then I'd vote to revert the sendRedirect() RFC fix.  I actually prefer that sendRedirect() does not generate a body as I'm a fan of waste-not-want-not when it comes to IO, CPU, etc, usage.  I don't know of any use case I care about that would make use of the response body of a redirect response, so including such a response body seems like a waste.", "id": 150197, "time": "2011-10-05T16:39:59Z", "creator": "jessh@ptc.com", "creation_time": "2011-10-05T16:39:59Z", "is_private": false}, {"count": 10, "tags": [], "text": "1. Making the behaviour optional, as suggested in Comment 2, should not hurt.\n\n2. I think that CompressionServletResponseWrapper in this example could overwrite the sendRedirect() method and recycle its writer and outputstream.\nThough 1) sendRedirect() may throw an IllegalStateException,\n2) o.a.c.connector.Response#sendRedirect() silently ignores the call if it is performed from within an included call.\n\n3. I wonder whether it is possible to optimize PageContextImpl.release() so that it does not flush the buffer if response has been suspended.", "is_private": false, "bug_id": 51952, "id": 150199, "time": "2011-10-05T17:03:49Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2011-10-05T17:03:49Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 51952, "attachment_id": null, "id": 150225, "time": "2011-10-05T21:36:31Z", "creator": "chris@christopherschultz.net", "creation_time": "2011-10-05T21:36:31Z", "is_private": false, "text": "(In reply to comment #6)\n> If you look at the JSP source in question, it simply calls sendRedirect() in a\n> scriptlet.  The issue here is that the auto-generated JSP source, whitespace,\n> etc, will try to write more stuff after that call.\n> \n> It would probably be more correct to do:\n>   response.sendRedirect(...);\n>   return;\n> in the scriptlet -- which may avoid the issue.\n> \n> In any case this sort of attention to detail wasn't necessary prior to this\n> change, though, so there are bound to be existing JSP pages, servlets, etc,\n> where this sort of sloppiness exists.  Thus I believe we should endeavor to be\n> forgiving to such cases.\n\nThe same could be true for a JSP that calls sendRedirect and then continues to produce (lots of?) output.\n\nIt seems reasonable for Tomcat to allow webapps to provide their own \"redirect\" response bodies, too. I'm starting to lean towards Mark's suggestion of having this be an application-wide setting (though being able to enable/disable it on a per-request basis might also be nice).\n\n> Also using an output stream rather than a writer won't solve the issue as I\n> believe the JSP page in question would then produce an exception *without* a\n> compression filter in place.\n\nI think I wasn't thinking clearly when I asked my original question about the wrapper being in place: the root cause is that the compression filter hasn't called response.getOutputStream before delegating the call down the filter chain. When sendRedirect() is called, getWriter is called which (IMHO) cause the opposite exception to be thrown: IllegalStateException: getOutputStream has already been called.\n\nThere are places in (Tomcat's?) code where IllegalStateException is caught when calling getWriter (or getOutputStream) and then the code switches-over to use the other strategy to accommodate the current situation. Maybe Tomcat's sendRedirect code should be augmented to do such error recovery.\n\nFinally, I just have to say it: JSP can be abused in /so many/ ways, and performing a redirect from a JSP is one such example."}, {"count": 12, "tags": [], "bug_id": 51952, "attachment_id": null, "id": 150334, "time": "2011-10-07T22:09:05Z", "creator": "markt@apache.org", "creation_time": "2011-10-07T22:09:05Z", "is_private": false, "text": "This is now optional (sendRedirectBody on Context) and disabled by default. The change has been made to trunk and 7.0.x and will be included in 7.0.23 onwards."}, {"count": 13, "tags": [], "text": "*** Bug 52157 has been marked as a duplicate of this bug. ***", "attachment_id": null, "id": 151306, "creator": "markt@apache.org", "time": "2011-11-08T23:35:49Z", "bug_id": 51952, "creation_time": "2011-11-08T23:35:49Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "bugzilla@pidster.com", "attachment_id": null, "id": 141132, "time": "2010-10-28T17:11:34Z", "bug_id": 50175, "creation_time": "2010-10-28T17:11:34Z", "is_private": false, "text": "Memory leak detection on application unload can be enhanced by selectively applying the various methods, depending on whether Tomcat is shutting down or undeploying/reloading an application.\n\nMany of the memory leak detection methods can be ignored if a JVM is shutting down.\n\nNon-daemon threads may pose an issue for a system, if they cause the Tomcat process to stay alive and continue to consume memory and/or system resources, so continuing to detect and report these is probably worthwhile.\n\nThis could be accomplished by setting a System property during the first phase of the shutdown process and checking for this property during the application undeployment process."}, {"count": 1, "tags": [], "bug_id": 50175, "attachment_id": 26223, "text": "Created attachment 26223\nSimple patch illustrating idea\n\nAdds a system property and checks for it during app undeploy.", "id": 141133, "time": "2010-10-28T17:12:37Z", "creator": "bugzilla@pidster.com", "creation_time": "2010-10-28T17:12:37Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 50175, "attachment_id": null, "id": 141287, "time": "2010-10-31T17:26:22Z", "creator": "slaurent@apache.org", "creation_time": "2010-10-31T17:26:22Z", "is_private": false, "text": "What is the final purpose ? speedup the shutdown process or avoid warnings about potential leaks when shutting down ?\n\nRegarding the patch, we also have to take into account the fact that tomcat can be embedded, and I don't know if org.apache.catalina.startup.Catalina.stop() is being called only in non-embedded mode."}, {"count": 3, "tags": [], "bug_id": 50175, "text": "(In reply to comment #2)\n> What is the final purpose ? speedup the shutdown process or avoid warnings\n> about potential leaks when shutting down ?\n\nA bit of both, a User list discussion prompted this.\nSome of the leak detection/prevention methods aren't a concern if the JVM is shutting down, but after some thought I'm in two minds about it.\n \n> Regarding the patch, we also have to take into account the fact that tomcat can\n> be embedded, and I don't know if org.apache.catalina.startup.Catalina.stop() is\n> being called only in non-embedded mode.\n\nFair point. I don't think the patch is complete, I need to think about it more.", "id": 141321, "time": "2010-11-01T17:52:38Z", "creator": "bugzilla@pidster.com", "creation_time": "2010-11-01T17:52:38Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 50175, "attachment_id": null, "text": "I think we should generally distinguish the different usage scenarios. \nFor what I know, most people who use tomcat in production environment (in portals or b2c sites) do not use application reloading, because their tomcat-clusters are limited to one, main, application, and the restart of tomcat is safer and faster as the reload. For them most of the detection (if not all) do not make any sense:\n- daemon threads will be switched off on shutdown.\n- non-daemon threads will prevent shutdown and considered bugs \n- thread-local leakage is not really interested because all threads will be shut down anyway\n- what else?\n\nThan there are developers, which maybe use war-reloading (personally i think ctrl-c, arrow-up, enter is faster ;-) ), they will face OOM problems unless they fix all the leaks and/or replace the libs they are using. Still, as a developer I would like to be able to turn it, or have it off by default.\n\nThan there are people who use application reloading in production, and the question remains if this info is useful for the operation of the site. \n\nHowever, at least for the first category of people, who never use reloading, this leak detection is pretty useless, isn't it? Therefor, I would support any idea to reduce this 'in-this-usecase-unneeded-check-and-output' :-)", "id": 141337, "time": "2010-11-02T06:35:02Z", "creator": "rosenberg.leon@gmail.com", "creation_time": "2010-11-02T06:35:02Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 50175, "attachment_id": null, "text": "a year passed, any updates on this one? ;-) Can the memory leak detection be switched off completely?", "id": 151977, "time": "2011-12-05T15:13:30Z", "creator": "rosenberg.leon@gmail.com", "creation_time": "2011-12-05T15:13:30Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 50175, "attachment_id": null, "text": "First of all, the memory leak detection is not going to be disabled. For far too long Tomcat was being blamed for PermGen based OOME errors triggered by web application reloads. The leak detection code has proved invaluable in raising awareness of what the real root causes are and in getting a number of the leaks in popular 3rd party libraries fixed.\n\nI'd disagree with the view that leaks don't matter in production as it depends on how applications are managed. I do agree it is an issue that can safely be ignored some use cases. What would be very useful - both for this issue and for others - would be a way to determine when any Tomcat component is stopped is whether it is being stopped because:\n- the JVM is shutting down\n- Tomcat is shutting down (e.g. in an embedded scenario)\n- just the component is being stopped (e.g. a web app is being undeployed or reloaded)\n\nI've been giving this some thought recently and I have some ideas about how this might be done. I need to turn those ideas into code and see how well they work. If I come up with a viable solution I add it to Tomcat 8.", "id": 170690, "time": "2013-10-19T10:06:40Z", "creator": "markt@apache.org", "creation_time": "2013-10-19T10:06:40Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 50175, "attachment_id": null, "text": "I agree it would be nice if we could disable leak detection in case the JVM shuts down. This is a frequent case and in that case the leaks don't matter.\n\nThe logs in this case only raise awareness for the sitution when one would switch from recycling the JVM to hot redeployment, embedded mode or similar. OTOH the output often lowers awareness for real problems logged during shutdown. Since many of the leak problems are non-trivial to fix, many users get used to the bunch of messages logged during shutdown and do no longer look at any (other) shutdown messages.\n\nI'm undecided whether the default during JVM shutdown should be doing leak detection or not doing leak detection.\n\nI had a look at how to detect the shutdown but found it hard to do without changing the lifecycle model. But maybe there's a way to detect JVM shutdown outside of our lifecycle model (using a global singleton or similar).", "id": 180159, "time": "2015-01-05T13:15:30Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-01-05T13:15:30Z", "is_private": false}]
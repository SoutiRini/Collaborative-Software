[{"count": 0, "tags": [], "bug_id": 60385, "attachment_id": 34456, "text": "Created attachment 34456\nBuilds a WAR that reproduces the issue\n\nIf an application has a ServletRequestListener defined that throws an exception from its requestInitialized() method, it will prevent the requestDestroyed() method from ever being invoked for that request. This causes major problems when a framework relies on requestInitialized and requestDestroyed always being called at least once for every request.\n\n\n\nSteps to Reproduce:\n\n1) Build the attached project which generates a WAR\n\n2) Deploy the WAR to Tomcat\n\n3) Visit the /tomcat-listener-bug-1.0/simple page 6 times. On the 6th request the application will shut down if requestDestroyed() is never called\n\n\n\nActual Results:\n\nThe application shuts down.\n\n\nExpected Results:\n\nThe application should stay up and requestDestroyed() should be called for every call to requestInitialized().\n\n\n\n\nBuild Date & Hardware:\n\nOriginally tested on Tomcat 7.0.35, Mac OS X 10.1 and Java 7. The issue occurs on all versions of Tomcat (even up to 9.0.0.M13) and all versions of Java as well.\n\n\n\n\nAdditional Builds and Platforms:\n\nI tested this same sample app on Jetty 9 and Glassfish 4 (newest releases of both as of 11/16/2016) and it does not exhibit this same behavior. On both of those servers requestDestroyed() is called for every single requestInitialized(), even in the case of an exception.", "id": 195047, "time": "2016-11-16T23:05:53Z", "creator": "towest@newrelic.com", "creation_time": "2016-11-16T23:05:53Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 60385, "is_private": false, "id": 195048, "time": "2016-11-16T23:12:18Z", "creator": "towest@newrelic.com", "creation_time": "2016-11-16T23:12:18Z", "tags": [], "text": "For a little more information, the code involved in this issue can be found in org.apache.catalina.core.StandardHostValve. Specifically in the \"invoke(Request request, Response response)\" method.\n\nWhen context.fireRequestInitEvent(request) is called, if it returns false (in the case of an exception from a handler) then it will exit this method without ever calling fireRequestDestroyEvent(request) to ensure that it can clean up after itself."}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "text": "You're pretending to rely on behaviors that were never specified.\n\nrequestInitialized: Receives notification that a ServletRequest is about to come into scope of the web application.\nrequestDestroyed: Receives notification that a ServletRequest is about to go out of scope of the web application.\n\nIf there's an exception in requestInitialized, it probably doesn't come into scope as per the javadoc language, so that's probably why Tomcat implemented it this way originally. BTW, other servers do it like that as well.", "id": 195051, "time": "2016-11-16T23:26:35Z", "bug_id": 60385, "creation_time": "2016-11-16T23:26:35Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 60385, "attachment_id": null, "is_private": false, "id": 195052, "time": "2016-11-16T23:38:10Z", "creator": "towest@newrelic.com", "creation_time": "2016-11-16T23:38:10Z", "text": "I agree with your assessment of the issue but I have not been able to find another app server the behaves this way. As noted in the report above I tried in both Jetty and Glassfish and both of those servers responded how I would expect, by calling requestDestroyed.\n\nI can probably find a way to work around this issue but I figured it was worth mentioning that Tomcat is the odd one out here as far as I've been able to tell. If this behavior is expected and deviation from other servers is ok feel free to close this out if you'd like."}, {"count": 4, "tags": [], "bug_id": 60385, "is_private": false, "text": "JBoss EAP 6 does it like that. As I said, the other servers probably use a try/finally, but Tomcat's implementation looks to be on purpose to do what the javadoc says rather than shove the requestDestroy in the finally.\nAnyway, have fun with your bug report, bye.", "id": 195053, "time": "2016-11-16T23:55:22Z", "creator": "remm@apache.org", "creation_time": "2016-11-16T23:55:22Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60385, "attachment_id": null, "text": "Fix unintended status change.", "id": 195054, "time": "2016-11-16T23:57:41Z", "creator": "remm@apache.org", "creation_time": "2016-11-16T23:57:41Z", "is_private": false}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "There is additional specification language that supports Tomcat's implementation in the Javadoc for ServletRequestListener:\n<quote>\nA ServletRequest is defined as coming into scope of a web application when it is about to enter the first servlet or filter of the web application, and as going out of scope as it exits the last servlet or the first filter in the chain.\n</quote>\n\nAn exception in requestInitialized() will prevent the request entering the first servlet/filter so it can never exit it.\n\nIt probably wouldn't hurt for the spec to be more explicit on the expected behaviour here. I have no particular preference on what that should be but based on what the spec currently says, I believe that Tomcat's implementation is spec compliant.", "id": 195203, "time": "2016-11-25T09:59:02Z", "bug_id": 60385, "creation_time": "2016-11-25T09:59:02Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 60385, "attachment_id": null, "text": "(In reply to Mark Thomas from comment #6)\n> There is additional specification language that supports Tomcat's\n> implementation in the Javadoc for ServletRequestListener:\n> <quote>\n> A ServletRequest is defined as coming into scope of a web application when\n> it is about to enter the first servlet or filter of the web application, and\n> as going out of scope as it exits the last servlet or the first filter in\n> the chain.\n> </quote>\n> \n> An exception in requestInitialized() will prevent the request entering the\n> first servlet/filter so it can never exit it.\n> \n> It probably wouldn't hurt for the spec to be more explicit on the expected\n> behaviour here. I have no particular preference on what that should be but\n> based on what the spec currently says, I believe that Tomcat's\n> implementation is spec compliant.\n\n\nThank you for your reply, Mark. That's definitely understandable.\n\nAt the very least I think it's great to have this information documented here so anyone else that runs into this issue can realize that it's working as intended.", "id": 195273, "time": "2016-11-28T15:35:55Z", "creator": "towest@newrelic.com", "creation_time": "2016-11-28T15:35:55Z", "is_private": false}]
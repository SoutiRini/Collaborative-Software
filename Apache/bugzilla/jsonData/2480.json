[{"count": 0, "tags": [], "bug_id": 2480, "attachment_id": null, "id": 3447, "time": "2001-07-06T07:37:30Z", "creator": "geuer-pollmann@nue.et-inf.uni-siegen.de", "creation_time": "2001-07-06T07:37:30Z", "is_private": false, "text": "import java.io.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport org.w3c.dom.traversal.*;\nimport org.xml.sax.*;\n\n\n/**\n * Class TreeWalker141 tests org/apache/xerces/dom/TreeWalkerImpl.java\n *\n * This one does the correct solution under Xerces 1.4.0 and goes wrong under \nXerces 1.4.1. Output of the both different class pathes at the end of the \nlisting\n * Classpath was:\n *\n * xerces-1_4_0/xerces.jar xor xerces-1_4_1/xerces.jar\n * xalan-j_2_2_D6/bin/xalan.jar\n *\n * This class generates a Document and traverses it with the process2 method.\n *\n * @author Christian Geuer-Pollmann <geuer-pollmann@nue.et-inf.uni-siegen.de>\n * @version %I%, %G%\n */\npublic class TreeWalker141 {\n\n   /**\n    * Method main\n    *\n    * @param args\n    * @throws Exception\n    */\n   public static void main(String args[]) throws Exception {\n\n      System.out.println(\"\");\n      System.out.println(\" --- \"\n                         + org.apache.xerces.framework.Version.fVersion\n                         + \" --- \");\n\n      Document doc = getNodeSet1();\n      NodeFilter nodefilter = null;\n      boolean entityReferenceExpansion = true;\n      int whatToShow = NodeFilter.SHOW_ALL;\n      TreeWalker treewalker =\n         ((DocumentTraversal) doc).createTreeWalker(doc, whatToShow,\n            nodefilter, entityReferenceExpansion);\n      ByteArrayOutputStream bytearrayoutputstream =\n         new ByteArrayOutputStream();\n      PrintWriter printwriter =\n         new PrintWriter(new OutputStreamWriter(bytearrayoutputstream,\n                                                \"UTF8\"));\n\n      process2(treewalker, printwriter);\n      printwriter.flush();\n      System.out.println();\n      System.out.println(new String(bytearrayoutputstream.toByteArray()));\n      System.out.println();\n   }\n\n   /**\n    * Method getNodeSet1\n    *\n    * @return\n    * @throws ParserConfigurationException\n    */\n   private static Document getNodeSet1()\n           throws ParserConfigurationException {\n\n      DocumentBuilderFactory dfactory =\n         DocumentBuilderFactory.newInstance();\n\n      dfactory.setValidating(false);\n      dfactory.setNamespaceAware(true);\n\n      DocumentBuilder db = dfactory.newDocumentBuilder();\n      Document doc = db.newDocument();\n      Element root = doc.createElement(\"RootElement\");\n      Element e1 = doc.createElement(\"Element1\");\n      Element e2 = doc.createElement(\"Element2\");\n      Element e3 = doc.createElement(\"Element3\");\n      Text e3t = doc.createTextNode(\"Text in Element3\");\n\n      e3.appendChild(e3t);\n      root.appendChild(e1);\n      root.appendChild(e2);\n      root.appendChild(e3);\n      doc.appendChild(root);\n\n      String s1 =\n         \"<RootElement><Element1/><Element2/><Element3>Text in \nElement3</Element3></RootElement>\";\n\n      return doc;\n   }\n\n   /**\n    * recursively traverses the tree\n    *\n    * for simplicity, I don't handle comments, Attributes, PIs etc.\n    * Only Text, Document and Element\n    *\n    * @param treewalker\n    * @param printwriter\n    */\n   private static void process2(TreeWalker treewalker,\n                                PrintWriter printwriter) {\n\n      Node currentNode = treewalker.getCurrentNode();\n\n      switch (currentNode.getNodeType()) {\n\n      case Node.TEXT_NODE :\n      case Node.CDATA_SECTION_NODE :\n         printwriter.print(currentNode.getNodeValue());\n         break;\n\n      case Node.ENTITY_REFERENCE_NODE :\n      case Node.DOCUMENT_NODE :\n      case Node.ELEMENT_NODE :\n      default :\n         if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n            printwriter.print('<');\n            printwriter.print(currentNode.getNodeName());\n            printwriter.print(\">\");\n         }\n\n         Node node1 = treewalker.firstChild();\n\n         if (node1 == null) {\n            System.out.println(getNodeTypeString(currentNode.getNodeType())\n                               + \"_NODE parent: \"\n                               + currentNode.getNodeName()\n                               + \" has no childs \");\n         } else {\n            System.out.println(getNodeTypeString(currentNode.getNodeType())\n                               + \"_NODE parent: \"\n                               + currentNode.getNodeName()\n                               + \" has childs \");\n\n            while (node1 != null) {\n               {\n                  String qStr = \"\";\n\n                  for (Node q = node1; q != null; q = q.getParentNode()) {\n                     qStr = q.getNodeName() + \"/\" + qStr;\n                  }\n\n                  System.out\n                     .println(getNodeTypeString(currentNode.getNodeType())\n                              + \"_NODE process child \" + qStr);\n               }\n\n\n               // recursion !!!\n               process2(treewalker, printwriter);\n\n               node1 = treewalker.nextSibling();\n\n               if (node1 != null) {\n                  System.out.println(\"treewalker.nextSibling() = \"\n                                     + node1.getNodeName());\n               }\n            } // while(node1 != null)\n         }\n\n         System.out.println(\"setCurrent back to \"\n                            + currentNode.getNodeName());\n         treewalker.setCurrentNode(currentNode);\n\n         if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n            printwriter.print(\"</\");\n            printwriter.print(currentNode.getNodeName());\n            printwriter.print(\">\");\n         }\n\n         break;\n      }\n   }\n\n   /** Field nodeTypeString */\n   private static String[] nodeTypeString = new String[]{ \"\", \"ELEMENT\",\n                                                          \"ATTRIBUTE\",\n                                                          \"TEXT_NODE\",\n                                                          \"CDATA_SECTION\",\n                                                          \"ENTITY_REFERENCE\",\n                                                          \"ENTITY\",\n                                                          \"PROCESSING_INSTRUCTIO\nN\",\n                                                          \"COMMENT\",\n                                                          \"DOCUMENT\",\n                                                          \"DOCUMENT_TYPE\",\n                                                          \"DOCUMENT_FRAGMENT\",\n                                                          \"NOTATION\" };\n\n   /**\n    * Transforms <code>org.w3c.dom.Node.XXX_NODE</code> NodeType values into\n    * XXX Strings.\n    *\n    * @param nodeType as taken from the {@link org.w3c.dom.Node#getNodeType} \nfunction\n    * @return the String value.\n    * @see org.w3c.dom.Node#getNodeType\n    */\n   public static String getNodeTypeString(short nodeType) {\n\n      if ((nodeType > 0) && (nodeType < 13)) {\n         return nodeTypeString[nodeType];\n      } else {\n         return \"\";\n      }\n   }\n\n}\n\n/*\n --- Xerces 1.4.0 ---\nDOCUMENT_NODE parent: #document has childs\nDOCUMENT_NODE process child #document/RootElement/\nELEMENT_NODE parent: RootElement has childs\nELEMENT_NODE process child #document/RootElement/Element1/\nELEMENT_NODE parent: Element1 has no childs\nsetCurrent back to Element1\ntreewalker.nextSibling() = Element2\nELEMENT_NODE process child #document/RootElement/Element2/\nELEMENT_NODE parent: Element2 has no childs\nsetCurrent back to Element2\ntreewalker.nextSibling() = Element3\nELEMENT_NODE process child #document/RootElement/Element3/\nELEMENT_NODE parent: Element3 has childs\nELEMENT_NODE process child #document/RootElement/Element3/#text/\nsetCurrent back to Element3\nsetCurrent back to RootElement\nsetCurrent back to #document\n\n<RootElement><Element1></Element1><Element2></Element2><Element3>Text in \nElement3</Element3></RootElement>\n\n\n --- Xerces 1.4.1 ---\nDOCUMENT_NODE parent: #document has childs\nDOCUMENT_NODE process child #document/RootElement/\nELEMENT_NODE parent: RootElement has childs\nELEMENT_NODE process child #document/RootElement/Element1/\nELEMENT_NODE parent: Element1 has childs\nELEMENT_NODE process child #document/RootElement/Element2/\nELEMENT_NODE parent: Element2 has childs\nELEMENT_NODE process child #document/RootElement/Element3/\nELEMENT_NODE parent: Element3 has childs\nELEMENT_NODE process child #document/RootElement/Element3/#text/\nsetCurrent back to Element3\nsetCurrent back to Element2\ntreewalker.nextSibling() = Element3\nELEMENT_NODE process child #document/RootElement/Element3/\nELEMENT_NODE parent: Element3 has childs\nELEMENT_NODE process child #document/RootElement/Element3/#text/\nsetCurrent back to Element3\nsetCurrent back to Element1\ntreewalker.nextSibling() = Element2\nELEMENT_NODE process child #document/RootElement/Element2/\nELEMENT_NODE parent: Element2 has childs\nELEMENT_NODE process child #document/RootElement/Element3/\nELEMENT_NODE parent: Element3 has childs\nELEMENT_NODE process child #document/RootElement/Element3/#text/\nsetCurrent back to Element3\nsetCurrent back to Element2\ntreewalker.nextSibling() = Element3\nELEMENT_NODE process child #document/RootElement/Element3/\nELEMENT_NODE parent: Element3 has childs\nELEMENT_NODE process child #document/RootElement/Element3/#text/\nsetCurrent back to Element3\nsetCurrent back to RootElement\nsetCurrent back to #document\n\n<RootElement><Element1><Element2><Element3>Text in \nElement3</Element3></Element2><Element3>Text in \nElement3</Element3></Element1><Element2><Element3>Text in \nElement3</Element3></Element2><Element3>Text in \nElement3</Element3></RootElement>\n*/"}, {"count": 1, "attachment_id": null, "bug_id": 2480, "text": "Thank you for such a detailed message.\n1.4.1 had a bug, which was fixed thanks to Dean Brettle: \nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=1541\n\nU should pick up latest version from CVS.\n\nIf you find more bugs, please let us know.\n\nElena", "id": 3450, "time": "2001-07-06T10:29:55Z", "creator": "elena@apache.org", "creation_time": "2001-07-06T10:29:55Z", "tags": [], "is_private": false}]
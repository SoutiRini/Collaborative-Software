[{"count": 0, "tags": [], "text": "Starting four machines with a ReplicatedMap where each machine immediately puts entries into the map frequently leads to inconsistent state. Specifically, some nodes are missing some entries. Most are present and correct. Given the internal work done around state transfer and the general intent of the class, I'm assuming this is a serious bug.\n\nI've seen this with straight;\n\nc = new GroupChannel();\nm = new ReplicatedMap(null, c, 5000, null);\nm.put(key, value);\n\nMy actual rig uses TcpFailureDetector and NonBlockingCoordinator as I need jgroups-like views (without the buggy jgroups stack!).\n\nI can cook my own Map implementation that deals with this by periodically resending locally owned key-value pairs, but I figured I should post the bug.", "attachment_id": null, "id": 117765, "creator": "robert.newson@gmail.com", "time": "2008-06-17T13:16:46Z", "bug_id": 45222, "creation_time": "2008-06-17T13:16:46Z", "is_private": false}, {"count": 1, "tags": [], "text": "\nHere's the simplest code to reproduce it. Just start this on four machines at the same time (I used clusterssh). Most of the time each box will print a different value from 1-4.\n\nAs a meta-question, is ReplicatedMap a supported Tribes feature or a demo? I've been stung on this kind of thing with JGroups before (their .blocks are almost all demo code, apparently).\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tfinal GroupChannel channel = new GroupChannel();\n\t\tfinal ReplicatedMap map = new ReplicatedMap(null, channel, 0, \"map\",\n\t\t\t\tnull);\n\t\tchannel.start(Channel.DEFAULT);\n\t\tmap.put(InetAddress.getLocalHost(), \"1\");\n\t\twhile (true) {\n\t\t\tSystem.out.printf(\"member_count: %,d, map_size: %,d\\n\", channel\n\t\t\t\t\t.getMembers().length, map.size());\n\t\t\tSECONDS.sleep(5);\n\t\t}\n\t}", "is_private": false, "id": 117777, "creator": "robert.newson@gmail.com", "time": "2008-06-17T15:19:34Z", "bug_id": 45222, "creation_time": "2008-06-17T15:19:34Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45222, "is_private": false, "id": 123650, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2008-12-30T15:59:31Z", "time": "2008-12-30T15:59:31Z", "text": "I've done some testing of this and with your test code I see the same problem you see. However, if the channel is started before the map is created then I can't repeat the problem you were seeing.\n\nThere is some communication between members on map creation so it seems reasonable to me that the channel should be started first.\n\nIt is possible that my test case isn't quite perfect (I was using 4 VMs and the system clock to sync the starts and the clocks on the VMs were a few 10s of ms out) so if you still see this issue with the modified test code please feel free to re-open and I'll take a closer look."}]
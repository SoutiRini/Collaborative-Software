[{"count": 0, "tags": [], "text": "Hello,\nI upgrade Tomcat from 8.0.15 to 8.0.17.\nI'm using SSL on tomcat server and I disabled port 80. \nwith version 8.0.15 everything is fine\nwith version 8.0.17 for my applications a lot of html pages are incomplete, and some applications stop responding after using them some minutes.\nI downgrade to 8.0.15 to have no problem. \nNothing in tomcat logs.\nI don't know where is the problem (tomcat, my applications, ...), just want to give you this information.\nThank you, Kind regards,\nAlexandre.", "is_private": false, "id": 180441, "creator": "alexandre@claet.fr", "time": "2015-01-21T15:29:30Z", "bug_id": 57476, "creation_time": "2015-01-21T15:29:30Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 57476, "text": "Which connector are you using? Does the problem stop if you switch connectors?\n\nIs sendFile enabled? If yes, does the problem stop if sendFile is disabled?\n\nThread dump (ideally 3, ~10s apart) when the application stops responding?\n\nPlease provide the logs from the time the issue occurs. They may tell us something they don't tell you.", "id": 180443, "time": "2015-01-21T15:40:49Z", "creator": "markt@apache.org", "creation_time": "2015-01-21T15:40:49Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "marco@lordzodiac.de", "is_private": false, "text": "Hello,\n\nsame problem.\nAfter a last jsp:include in a jsp site the html content is not shown.\nNo errors in tomcat log. Default Tomcat with port 8080.", "id": 180455, "time": "2015-01-21T22:46:53Z", "bug_id": 57476, "creation_time": "2015-01-21T22:46:53Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 57476, "text": "I have a single JSP running on 8.0.17 with 4 includes, and the page works just fine. Can you give more information about your environment? There's also a thread on the dev list if you want to discuss.", "id": 180456, "time": "2015-01-21T22:50:30Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-01-21T22:50:30Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57476, "text": "I make a little test. I add a <%out.flush();%> at the end of the jsp file and the html content is correct. Without the <%out.flush();%> the html content is broken.", "id": 180457, "time": "2015-01-21T23:58:32Z", "creator": "marco@lordzodiac.de", "creation_time": "2015-01-21T23:58:32Z", "is_private": false, "attachment_id": null}, {"count": 5, "attachment_id": null, "bug_id": 57476, "is_private": false, "id": 180462, "time": "2015-01-22T04:56:43Z", "creator": "reibitto@gmail.com", "creation_time": "2015-01-22T04:56:43Z", "tags": [], "text": "I'm seeing similar issues with version 8.0.17 as well. Downgrading back to 8.0.15 made the problems go away for me, so it seems like something introduced between these versions is causing this.\n\nSo far I've only noticed this problem with JSP files. Static content seems unaffected. Also, I'm seeing this happen through both HTTP and HTTPS.\n\nWhen the response is being truncated, the resulting size is always multiples of 8192 bytes. But this seems to only happen only if the resulting size is anything greater than 16KB. Examples of what I'm seeing:\n\nExpected size / Actual response size\nanything less than 16 KB -> the response is fine\n17 KB -> 8 KB\n25 KB -> 16 KB\n39 KB -> 24 KB\n44 KB -> 32 KB\n50 KB -> 40 KB\n\nSo it seems like the last remaining block (or 2?) isn't being written out... assuming the buffer size is 8 KB. And yes, when I call out.flush(), this problem goes away for me too.\n\nHere's some information about my environment:\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\nOS X Yosemite 10.10.1"}, {"count": 6, "tags": [], "bug_id": 57476, "text": "I'm facing exactly the same issue. I've noticed that putting <% out.flush() %> at the end of the JSP file, everything was OK, but It's not good to assume that it's the goal to solve that.", "id": 180463, "time": "2015-01-22T07:14:29Z", "creator": "iileandro@gmail.com", "creation_time": "2015-01-22T07:14:29Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 57476, "text": "This still lacks a reproduction recipe.\n\nThus far I tried the following simple tests with 8.0.17, and all of them are working (except a minor issue filed as bug 57481)\n\n- static files (Tomcat binaries)\n- examples webapp (mostly useless, as those pages are small)\n- simple jsp with a lot of text  (200Kb)\n- jsp with jsp:include with a lot of text (200Kb, 800Kb)\n- simple jsp with EL (122Kn)\n- simple jsp with tags (164Kb)\n\nI tested\nHTTP + (bio,nio,apr) + (with Executor or without Executor)\nHTTPS + (bio,nio) + without Executor\n\nI am using JDK 7u72 (32-bit) on Windows 7.\n\nNo truncations noted.\n\nSomething else is needed to reproduce this.", "id": 180465, "time": "2015-01-22T08:13:56Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-01-22T08:13:56Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 57476, "text": "Okay, after some debugging, I think I found how to duplicate this rather easily. The original project where this was happening for me was a Spring MVC project. I wasn't able to duplicate it in a non-Spring MVC project at first, so I went back to my original project and followed the path from beginning to end to get more clues as to what was happening. I found that the bug seems to only occur when requests are forwarded. After realizing that, I was able to create a minimal example that shows the problem:\n\n1. Download a fresh stock 8.0.17 build\n2. Drop in two JSP files in webapps/ROOT (the Tomcat welcome screen project is perfectly fine). For example: page1.jsp and page2.jsp\n3. Put <% request.getRequestDispatcher(\"page2.jsp\").forward(request, response); %> in page1.jsp\n4. Put a bunch of plain text (you don't need dynamic content) in page2.jsp so that the response will be over 16 KB.\n5. Now visit localhost:8080/page1.jsp in your browser, and notice the content being truncated.\n\nAlso, note that going to localhost:8080/page2.jsp directly does NOT truncate the data because there is no forwarding happen there.\n\nI was able to duplicate this on 2 separate machines (Mac and Windows).", "id": 180469, "time": "2015-01-22T10:47:07Z", "creator": "reibitto@gmail.com", "creation_time": "2015-01-22T10:47:07Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 57476, "text": "Thanks for the extra info. I (and I suspect a few other committers as well) am looking at this now...", "id": 180470, "time": "2015-01-22T10:53:38Z", "creator": "markt@apache.org", "creation_time": "2015-01-22T10:53:38Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 57476, "text": "Reprodcued every time. Many thanks. Looking for the root cause at the moment...", "id": 180471, "time": "2015-01-22T10:59:45Z", "creator": "markt@apache.org", "creation_time": "2015-01-22T10:59:45Z", "is_private": false, "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 57476, "text": "I've found the root cause. It was triggered by r1643210 but I think all that did was uncover a different bug.\n\nIt is easier to see if you go back to Tomcat 6 as that is before async was added. If you look at StandardHostValve line 136 [1] you'll see that the response is unsuspended unconditionally although the comment suggests it is being unsuspended for error handling (which may need to write to the response).\n\nIn r1643210 that code was modified so the response was only unsuspended if there was an error to handle.\n\nThis triggered the problem because the RequestDispatcher did not flush the response before calling finish(). Calling finish() sets suspended to true. The sequence was:\na) page 1 forwards to page 2\nb) page 2 writes response leaving some data in buffer\nc) RD calls finish which suspends response\nd) StandardHostValve unsuspends response\ne) normal end handling for page 1 flushes and closes the response\n\nr1643210 removed step d) which in turn prevented the flush in step e).\n\nSection 9.4 of the Servlet 3.1 spec says:\n<quote>\nBefore the forward method of the RequestDispatcher interface returns without exception, the response content must be sent and committed, and closed by the servlet container, unless the request was put into the asynchronous mode.\n</quote>\n\nMy reading of the spec is that we should be calling response.flushBuffer() before we call finish() in the RequestDispatcher.\n\nI am going to apply a patch to that effect to trunk, 8.0.x and 7.0.x shortly. I then intend to start an 8.0.x release.\n\n\n[1] http://svn.eu.apache.org/viewvc/tomcat/tc6.0.x/trunk/java/org/apache/catalina/core/StandardHostValve.java?view=annotate#l136", "id": 180473, "attachment_id": null, "creator": "markt@apache.org", "creation_time": "2015-01-22T11:40:18Z", "time": "2015-01-22T11:40:18Z", "is_private": false}, {"count": 12, "tags": [], "text": "Thank you! Reproduced based on recipe from Comment 8.\n\nMy example:\n1) webapps/examples2/numberwriter2.jsp:\n[[[\nForward to numberwriter.txt\n<jsp:forward page=\"numberwriter.txt\" />\n]]]\n\n2) webapps/examples2/numberwriter.txt:\nCopied output of numberwriter example\n(10000 lines with numbers from 00000000000000000001 up to 00000000000000010000,\n210000 bytes total (EOL = LF))\n\nI request /examples2/numberwriter2.jsp with wget.\nI observe the following pairs of requests in access log file:\n\n127.0.0.1 - - [22/Jan/2015:14:32:00 +0300] \"GET /examples2/numberwriter2.jsp HTTP/1.0\" 200 204800\n127.0.0.1 - - [22/Jan/2015:14:32:20 +0300] \"GET /examples2/numberwriter2.jsp HTTP/1.0\" 206 5200\n\nThat is the first GET request hangs after transferring 204800 bytes. After waiting for 20 seconds wget aborts connection. It repeats request asking for a range of bytes,  and receives remaining 5200 bytes of the file.\n\nThis happens in the same way for all connectors that I tested (those mentioned in Comment 7).", "is_private": false, "id": 180474, "creator": "knst.kolinko@gmail.com", "time": "2015-01-22T11:43:07Z", "bug_id": 57476, "creation_time": "2015-01-22T11:43:07Z", "attachment_id": null}, {"count": 13, "attachment_id": 32391, "bug_id": 57476, "is_private": false, "id": 180487, "time": "2015-01-22T17:39:16Z", "creator": "shaun@legalfiles.com", "creation_time": "2015-01-22T17:39:16Z", "tags": [], "text": "Created attachment 32391\nBuffer test .war as requested by Mark\n\nMark,\nJust in case you still need a test .jsp for this issue.\nrowsToPrint in index.jsp is set to break right now."}, {"count": 14, "tags": [], "bug_id": 57476, "text": "This has been fixed in trunk, 8.0.x (for 8.0.18 onwards) and in 7.0.x. Note that the fix that introduced this regression has not been included in a 7.0.x release so no 7.0.x release is affected by this bug.", "id": 180491, "time": "2015-01-22T21:00:32Z", "creator": "markt@apache.org", "creation_time": "2015-01-22T21:00:32Z", "is_private": false, "attachment_id": null}]
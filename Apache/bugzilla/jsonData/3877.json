[{"count": 0, "tags": [], "bug_id": 3877, "text": "In a multi-threaded environment, the REProgram produced by RECompiler for a \nregexp containing {n} or {n,m} is unreliable.\n\nClass RECompiler uses static variables and arrays to process the {n} and {n,m} \nspecifications. These static variables and arrays are being modified without \nany synchronization between threads.\n\nThe variables in question are:\n\n    static int brackets = 0;                    // Number of bracket sets\n    static int[] bracketStart = null;           // Starting point\n    static int[] bracketEnd = null;             // Ending point\n    static int[] bracketMin = null;             // Minimum number of matches\n    static int[] bracketOpt = null;             // Additional optional matches", "id": 6178, "time": "2001-09-28T14:43:01Z", "creator": "dougpardee@yahoo.com", "creation_time": "2001-09-28T14:43:01Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "chriss@calweb.com", "text": "I fixed the problem in the compiler by changing the method void bracket()...\n\n    /**\n     * Match bracket {m,n} expression put results in bracket member variables\n     * @exception RESyntaxException Thrown if the regular expression has \ninvalid syntax.\n     */\n    void bracket() throws RESyntaxException\n    {\n        // Current character must be a '{'\n        if (idx >= len || pattern.charAt(idx++) != '{')\n        {\n            internalError();\n        }\n\n        // Next char must be a digit\n        if (idx >= len || !Character.isDigit(pattern.charAt(idx)))\n        {\n            syntaxError(\"Expected digit\");\n        }\n\n        // Get min ('m' of {m,n}) number\n        StringBuffer number = new StringBuffer();\n        while (idx < len && Character.isDigit(pattern.charAt(idx)))\n        {\n            number.append(pattern.charAt(idx++));\n        }\n        try\n        {\n            bracketMin[brackets] = Integer.parseInt(number.toString());\n        }\n        catch (NumberFormatException e)\n        {\n            syntaxError(\"Expected valid number\");\n        }\n\n        // If out of input, fail\n        if (idx >= len)\n        {\n            syntaxError(\"Expected comma or right bracket\");\n        }\n\n        // If end of expr, optional limit is 0\n        if (pattern.charAt(idx) == '}')\n        {\n            if (bracketMin[brackets] < 1)\n            {\n                syntaxError(\"Bad zero range\");\n            }\n\n            idx++;\n            bracketOpt[brackets] = 0;\n            return;\n        }\n\n        // Must have at least {m,} and maybe {m,n}.\n        if (idx >= len || pattern.charAt(idx++) != ',')\n        {\n            syntaxError(\"Expected comma\");\n        }\n\n        // If out of input, fail\n        if (idx >= len)\n        {\n            syntaxError(\"Expected comma or right bracket\");\n        }\n\n        // If {m,} max is unlimited\n        if (pattern.charAt(idx) == '}')\n        {\n            idx++;\n            bracketOpt[brackets] = bracketUnbounded;\n            return;\n        }\n\n        // Next char must be a digit\n        if (idx >= len || !Character.isDigit(pattern.charAt(idx)))\n        {\n            syntaxError(\"Expected digit\");\n        }\n\n        // Get max number\n        number.setLength(0);\n        while (idx < len && Character.isDigit(pattern.charAt(idx)))\n        {\n            number.append(pattern.charAt(idx++));\n        }\n        try\n        {\n            bracketOpt[brackets] = Integer.parseInt(number.toString()) - \nbracketMin[brackets];\n/**/\n            if (bracketMin[brackets] < 1)\n                bracketOpt[brackets]--;\n/**/\n        }\n        catch (NumberFormatException e)\n        {\n            syntaxError(\"Expected valid number\");\n        }\n\n        // Optional repetitions must be > 0\n/*\n        if (bracketOpt[brackets] <= 0)\n*/\n        if (bracketOpt[brackets] < 0)\n        {\n            syntaxError(\"Bad range\");\n        }\n\n        // Must have close brace\n        if (idx >= len || pattern.charAt(idx++) != '}')\n        {\n            syntaxError(\"Missing close brace\");\n        }\n    }\n\n", "id": 6180, "time": "2001-09-28T14:53:38Z", "bug_id": 3877, "creation_time": "2001-09-28T14:53:38Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 3877, "text": "Alas, the above suggestion won't help my problem.\n\nThe problem that I am having is occurring with a specification of \"{9}\". It is \nunrelated to the use of a lower limit of zero. The behavior is also not \npredictable, as it depends on timing of multiple threads (in this case, within \na servlet). Most of the time it works fine, but every now and again...\n\nOne thread is wiping out the values of bracket, bracketMin, bracketOpt, etc., \nwhich are simultaneously being used by another thread. The source of the \nproblem is that these are static variables, not member variables.", "id": 6181, "time": "2001-09-28T15:22:01Z", "creator": "dougpardee@yahoo.com", "creation_time": "2001-09-28T15:22:01Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "jon@latchkey.com", "is_private": false, "text": "i believe that all of regexp isn't synchronized. you need to externally sync it.", "id": 6182, "time": "2001-09-28T15:43:31Z", "bug_id": 3877, "creation_time": "2001-09-28T15:43:31Z", "attachment_id": null}, {"count": 4, "attachment_id": null, "creator": "dougpardee@yahoo.com", "text": "External synchronization works great in the usual case where an *instance* \ncannot safely be shared between threads. In this case, however, the *class* \ncannot safely be shared between threads. This presents an unexpected and much \nmessier proposition. In general, we do expect to be able to create more than \none instance of a class at a time.", "id": 6184, "time": "2001-09-28T16:05:28Z", "bug_id": 3877, "creation_time": "2001-09-28T16:05:28Z", "tags": [], "is_private": false}, {"count": 5, "tags": [], "bug_id": 3877, "text": "I was having the same problem while stress testing a new applications.  Since it\nseemed a striaght foward issue of instances using static variables as a scratch\npad and I had a good reproducable test. I decided to just change the variables\nfrom static to non-static as shown in the patch below and run the tests.  All\nthe errors went away and regexp seems to still do everything we expect of it\nwith no loss of performance.\n\n101,105c102,106\n<     static int brackets = 0;                            // Number of bracket sets\n<     static int[] bracketStart = null;                   // Starting point\n<     static int[] bracketEnd = null;                     // Ending point\n<     static int[] bracketMin = null;                     // Minimum number of\nmatches\n<     static int[] bracketOpt = null;                     // Additional optional\nmatches\n---\n>     int brackets = 0;                            // Number of bracket sets\n>     int[] bracketStart = null;                   // Starting point\n>     int[] bracketEnd = null;                     // Ending point\n>     int[] bracketMin = null;                     // Minimum number of matches\n>     int[] bracketOpt = null;                     // Additional optional matches", "id": 22033, "attachment_id": null, "creator": "kgross@mail.state.wi.us", "creation_time": "2002-08-30T15:12:25Z", "time": "2002-08-30T15:12:25Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 3877, "text": "I have occured the same question, and I removed the \"static\" keyword as above,\nit works until \nnow(over 8 months).\nI wonder why the valiable is \"static\" previously? does it *should* be \nthere?", "id": 27785, "time": "2002-12-13T08:47:18Z", "creator": "lanky@basenet.co.jp", "creation_time": "2002-12-13T08:47:18Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 3877, "text": "removed static keywords", "count": 7, "id": 27817, "time": "2002-12-13T17:50:57Z", "creator": "jon@latchkey.com", "creation_time": "2002-12-13T17:50:57Z", "is_private": false}, {"count": 8, "tags": [], "text": "closed.", "is_private": false, "id": 27818, "creator": "jon@latchkey.com", "time": "2002-12-13T17:51:13Z", "bug_id": 3877, "creation_time": "2002-12-13T17:51:13Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "vgritsenko@apache.org", "is_private": false, "count": 9, "id": 69567, "time": "2005-01-11T22:34:19Z", "bug_id": 3877, "creation_time": "2005-01-11T22:34:19Z", "text": "*** Bug 33051 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "bug_id": 3877, "is_private": false, "text": "*** Bug 34548 has been marked as a duplicate of this bug. ***", "id": 78392, "time": "2005-08-11T05:13:14Z", "creator": "vgritsenko@apache.org", "creation_time": "2005-08-11T05:13:14Z", "attachment_id": null}]
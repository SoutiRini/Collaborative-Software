[{"count": 0, "tags": [], "bug_id": 35750, "attachment_id": null, "text": "I had project with hundreds of tests and running junit task failed with\nOutOfMemoryError: PermGen space.\n\nI ran ant in profiler and there was increasing number of AntClassLoader2\ninstances, which wasn't garbage collected. Number of instances corresponded to\nthe test classes loaded in JUnit task. There is handler pointing onto these\nclassloaders from Project class - listeners variable.\n\nSo I wrote simple test case for testing this issue, which I'm sending in\nattachement. \n\nAfter looking into source code of ant, it seems, that problem is in JUnitTask\nclass, method executeInVM in finally block: if(!reloading) condition, which\ncleanup classloader, should be inverted. But it is only my simple view on\nproblem, I don't know details of JUnitTask implementation.", "id": 77323, "time": "2005-07-15T10:24:58Z", "creator": "hovan@pobox.sk", "creation_time": "2005-07-15T10:24:58Z", "is_private": false}, {"count": 1, "tags": [], "creator": "hovan@pobox.sk", "attachment_id": 15680, "id": 77324, "time": "2005-07-15T10:31:22Z", "bug_id": 35750, "creation_time": "2005-07-15T10:31:22Z", "is_private": false, "text": "Created attachment 15680\nTest case for memory leak\n\nThis test case doesn't fail with OutOfMemoryException. When you'll run this\ncase in profiler, you will see a hundred AntClassLoader2 instances, which are\nnot (and cannot be) garbage collected."}, {"count": 2, "tags": [], "creator": "jmelzer@web.de", "text": "see: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5033614", "id": 77327, "time": "2005-07-15T12:25:29Z", "bug_id": 35750, "creation_time": "2005-07-15T12:25:29Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 35750, "attachment_id": null, "text": "But when you look into JUnitTask source code, when reloading is true, there are\ncreated new classloaders, which are registered in Project class like listeners.\nThese classloaders are not unregistered from Project class. It's not a problem\nof JVM, it is memory leak in Ant.\n", "id": 77328, "time": "2005-07-15T12:34:58Z", "creator": "hovan@pobox.sk", "creation_time": "2005-07-15T12:34:58Z", "is_private": false}, {"count": 4, "tags": [], "creator": "j_a_fernandez@yahoo.com", "attachment_id": null, "id": 77329, "time": "2005-07-15T12:44:38Z", "bug_id": 35750, "creation_time": "2005-07-15T12:44:38Z", "is_private": false, "text": "I am always thinking that is something wrong on all this lestener mechanisms \nthat people build in Java. Most APIs have addListener and removeListener but \nthere is no way to test if a listener is already there and if one tries to \nremove and is not there it throws exceptions at you. Which means you need to \ndo bookkeeping on the side. And complicates code unnecessarily. \n\nI do not know if using week-references as the listeners will solve this kinds \nof issues of memory leaks, you still need to keep a hard reference somewhere \nso that the weak is not lost. Any ideas how to design better listeners/ this \nANT problem is just an example."}, {"count": 5, "tags": [], "bug_id": 35750, "attachment_id": null, "is_private": false, "id": 77354, "time": "2005-07-16T14:26:04Z", "creator": "jkf@apache.org", "creation_time": "2005-07-16T14:26:04Z", "text": "Fixed on head, please verify"}, {"count": 6, "tags": [], "creator": "hovan@pobox.sk", "attachment_id": null, "id": 77374, "time": "2005-07-18T10:01:36Z", "bug_id": 35750, "creation_time": "2005-07-18T10:01:36Z", "is_private": false, "text": "I've tested it on head (1.7alpha), it's OK. Thanks."}]
[{"count": 0, "attachment_id": null, "bug_id": 33065, "is_private": false, "id": 69603, "time": "2005-01-12T16:45:54Z", "creator": "eiki@idega.is", "creation_time": "2005-01-12T16:45:54Z", "tags": [], "text": "The reasons for my improvements/fixes come from these problems:\n1. \nThe content type check for an extractor to see if it could index/extract from that file was a simple\ndocumentToIndex.getContentType().equals(extractor.getContentType). However as I have stated in an \nearlier email this is not enough because files like Word documents have (at least) two registered content \ntypes.\n\n2. \nThe place where the check was done would never execute an extractor unless you would define a \ncontent type attribute for the extractor in Domain.xml because the default behavior of \nextractor.getContentType() was to return null so the check was always false.\n\n3. \nIf you don't set a content type attribute in Domain.xml for an extractor (with the above null check fixed) \nit will try to index all files which I think is normal because in some cases you only have one content type \nin a folder e.g. pdf's. However if you (like most people) have lots of different file types in the same \nfolder e.g. a PDFExtractor will of course fail when trying to extract from a Word doc so you cannot have \nmany extractors registered to the same folder unless you specify a supported content type (singular \nbefore my changes) for them all. Also people shouldn't have to set the default content types for the \nextractors in Slide but they should be able to override them.\n\nThe solutions and changes I made to address those problems where:\n\n1. \nNow Extractor.getContentType() returns (in abstractexctractors) a comma separated list of supported \ncontent types and I changed the content type check in ExtractorManager to a call to a new method in \nthe Extractors, isAcceptableContentType(String contentType), instead of the \"equals\" check. \n\nI also implemented that method in both content and property abstract extractors to check if \n\"contentType\" is in the getContentType() CommaSV string (see javadoc in abstract extractors). \n\n2.\nThe default return of isAcceptableContentType is true if getContentType is null. So you don't \nnecessarily have to set a content type for an extractor in Domain.xml.\n\n3. \nFor convenience sake and easier use of the extractors that exist in SLIDE HEAD today I implemented \ngetContentType() for all of them, so for example MSWordExtractor will return \"application/\nmsword,\"application/vnd.ms-word\" when getContentType() is called. You CAN overide these settings by \nsetting the \"contenttype\" attribute for the extractor in Domain.xml. With these changes I could register \nall of the extractor to the root of all of my folders and files, \"/files/\", and not have to worry about any of \nthe extractors trying to extract from a file with the wrong content type (thus ruining an upload) or \nhaving to seperate the file types myself into different folders : )\n\nI also added some javadoc...\n\nBest Regards\n\nEirikur S. Hrafnsson, eiki@idega.is\nChief Software Engineer\nIdega Software\nhttp://www.idega.com"}, {"count": 1, "tags": [], "bug_id": 33065, "text": "Created attachment 13981\nA single patch for all changes to the extractor framework", "id": 69604, "time": "2005-01-12T16:47:13Z", "creator": "eiki@idega.is", "creation_time": "2005-01-12T16:47:13Z", "is_private": false, "attachment_id": 13981}, {"count": 2, "attachment_id": null, "bug_id": 33065, "is_private": false, "id": 69699, "time": "2005-01-14T19:36:41Z", "creator": "luetzkendorf@apache.org", "creation_time": "2005-01-14T19:36:41Z", "tags": [], "text": "Eirikur,\nI applied your patches.\n(I reduced the visiblity of the static constants)\n\nThank you,\nStefan"}]
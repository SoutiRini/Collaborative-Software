[{"count": 0, "tags": [], "text": "When configuring our Apache server to support only TLSv1.2 (multiply checked by external connections to confirm that only that suite is supported) - we succeeded connecting the server with lesser TLSv1 from local host. Our client is based on Python 2.7.6 (no support for TLSv1.2) and will not connect from a remote IP, but DOES succeed from localhost.\n\nSeems like a security hole to us because it allows any third party app to connect via port 443 with the server without it required to authenticate.\n\n\nConfiguration files:\n\n/etc/apache2/httpd.conf\n=======================\n\n\tWSGIPythonOptimize 0\n\tWSGIScriptAlias / /opt/asdf/cpmserver/wsgi.py\n\tWSGIPythonPath /opt/asdf/cpmserver/\n\n\tOptions -Indexes\n\n\tAlias /static/ /opt/asdf/cpmserver/static/\n\t<Directory /opt/asdf/cpmserver/>\n\t<Files wsgi.py>\n\tOrder deny,allow\n\tAllow from all\n\t</Files>\n\t</Directory>\n\n\n\t<VirtualHost _default_:443>\n\tServerName https://example\n\tSSLProtocol -all +TLSv1.2\n\tSSLEngine on\n\tSSLCertificateFile /opt/asdf/cert/cpm_server.crt\n\tSSLCertificateKeyFile /opt/asdf/cert/cpm_server.key\n\tWSGIPassAuthorization On\n\tWSGIDaemonProcess debug threads=1\n\tWSGIProcessGroup debug\n\t</VirtualHost>\n\n\n/etc/apache2/mods-available/ssl.conf\n====================================\n\n   <IfModule mod_ssl.c>\n\n        # Pseudo Random Number Generator (PRNG):\n        # Configure one or more sources to seed the PRNG of the SSL library.\n        # The seed data should be of good random quality.\n        # WARNING! On some platforms /dev/random blocks if not enough entropy\n        # is available. This means you then cannot use the /dev/random device\n        # because it would lead to very long connection times (as long as\n        # it requires to make more entropy available). But usually those\n        # platforms additionally provide a /dev/urandom device which doesn't\n        # block. So, if available, use this one instead. Read the mod_ssl User\n        # Manual for more details.\n        #\n        SSLRandomSeed startup builtin\n        SSLRandomSeed startup file:/dev/urandom 512\n        SSLRandomSeed connect builtin\n        SSLRandomSeed connect file:/dev/urandom 512\n\n        ##\n        ##  SSL Global Context\n        ##\n        ##  All SSL configuration in this context applies both to\n        ##  the main server and all SSL-enabled virtual hosts.\n        ##\n\n        #\n        #   Some MIME-types for downloading Certificates and CRLs\n        #\n        AddType application/x-x509-ca-cert .crt\n        AddType application/x-pkcs7-crl .crl\n\n        #   Pass Phrase Dialog:\n        #   Configure the pass phrase gathering process.\n        #   The filtering dialog program (`builtin' is a internal\n        #   terminal dialog) has to provide the pass phrase on stdout.\n        SSLPassPhraseDialog exec:/usr/share/apache2/ask-for-passphrase\n\n        #   Inter-Process Session Cache:\n        #   Configure the SSL Session Cache: First the mechanism\n        #   to use and second the expiring timeout (in seconds).\n        #   (The mechanism dbm has known memory leaks and should not be used).\n        #SSLSessionCache                 dbm:${APACHE_RUN_DIR}/ssl_scache\n        SSLSessionCache         shmcb:${APACHE_RUN_DIR}/ssl_scache(512000)\n        SSLSessionCacheTimeout  300\n\n        #   Semaphore:\n        #   Configure the path to the mutual exclusion semaphore the\n        #   SSL engine uses internally for inter-process synchronization.\n        #   (Disabled by default, the global Mutex directive consolidates by default\n        #   this)\n        #Mutex file:${APACHE_LOCK_DIR}/ssl_mutex ssl-cache\n\n\n        #   SSL Cipher Suite:\n        #   List the ciphers that the client is permitted to negotiate. See the\n        #   ciphers(1) man page from the openssl package for list of all available\n        #   options.\n        #   Enable only secure ciphers:\n        SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5\n\n        #   Speed-optimized SSL Cipher configuration:\n        #   If speed is your main concern (on busy HTTPS servers e.g.),\n        #   you might want to force clients to specific, performance\n        #   optimized ciphers. In this case, prepend those ciphers\n        #   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.\n        #   Caveat: by giving precedence to RC4-SHA and AES128-SHA\n        #   (as in the example below), most connections will no longer\n        #   have perfect forward secrecy - if the server's key is\n        #   compromised, captures of past or future traffic must be\n        #   considered compromised, too.\n        #SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5\n        #SSLHonorCipherOrder on\n\n        #   The protocols to enable.\n        #   Available values: all, SSLv3, TLSv1, TLSv1.1, TLSv1.2\n        #   SSL v2  is no longer supported\n        SSLProtocol -all +TLSv1.2\n\n        #   Allow insecure renegotiation with clients which do not yet support the\n        #   secure renegotiation protocol. Default: Off\n        #SSLInsecureRenegotiation on\n\n        #   Whether to forbid non-SNI clients to access name based virtual hosts.\n        #   Default: Off\n        #SSLStrictSNIVHostCheck On\n\n   </IfModule>", "is_private": false, "bug_id": 61436, "id": 200348, "time": "2017-08-17T08:03:37Z", "creator": "rubimazaki@gmail.com", "creation_time": "2017-08-17T08:03:37Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 61436, "text": "When you run\n\n> openssl s_client -tls1_1 -connect localhost:443\n\nwhat is the result? Is there a difference if you change the protocol config to\n\nSSLProtocol +TLSv1.2\n\n? Thanks!", "id": 200349, "time": "2017-08-17T08:33:57Z", "creator": "stefan@eissing.org", "creation_time": "2017-08-17T08:33:57Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "text": "with:\nSSLProtocol -all +TLSv1.2 \n\nrunning:\nopenssl s_client -tls1_1 -connect localhost:443\n\noutputs:\n\nCONNECTED(00000003)\n140635205007008:error:1409442E:SSL routines:SSL3_READ_BYTES:tlsv1 alert protocol version:s3_pkt.c:1262:SSL alert number 70\n140635205007008:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:598:\n---\nno peer certificate available\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 7 bytes and written 0 bytes\n---\nNew, (NONE), Cipher is (NONE)\nSecure Renegotiation IS NOT supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : TLSv1.1\n    Cipher    : 0000\n    Session-ID:\n    Session-ID-ctx:\n    Master-Key:\n    Key-Arg   : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1502959441\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---", "is_private": false, "id": 200350, "creation_time": "2017-08-17T08:46:46Z", "time": "2017-08-17T08:46:46Z", "creator": "rubimazaki@gmail.com", "bug_id": 61436, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61436, "is_private": false, "text": "When setting:\n\nSSLProtocol +TLSv1.2\n\nI get the same results:\n\n> openssl s_client -tls1_1 -connect localhost:443\n\nCONNECTED(00000003)\n139898031838880:error:1409442E:SSL routines:SSL3_READ_BYTES:tlsv1 alert protocol version:s3_pkt.c:1262:SSL alert number 70\n139898031838880:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:598:\n---\nno peer certificate available\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 7 bytes and written 0 bytes\n---\nNew, (NONE), Cipher is (NONE)\nSecure Renegotiation IS NOT supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : TLSv1.1\n    Cipher    : 0000\n    Session-ID:\n    Session-ID-ctx:\n    Master-Key:\n    Key-Arg   : None\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1502959693\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---", "id": 200351, "time": "2017-08-17T08:50:40Z", "creator": "rubimazaki@gmail.com", "creation_time": "2017-08-17T08:50:40Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Thanks, SSLProtocol is supposed to be the same, just wanted to make sure.\n\nThanks for the output, it shows that the handshake failed, as it should. I assume that if you use -tls1_2 it will succeed and leave the connection open until you ^C.\n\nSeems to me that the simplest explanation is that your python is linked against a modern openssl and speaks TLSv1.2 when needed.", "is_private": false, "bug_id": 61436, "id": 200352, "time": "2017-08-17T09:03:46Z", "creator": "stefan@eissing.org", "creation_time": "2017-08-17T09:03:46Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 61436, "text": "Okay,\n\nPlease allow us to check this before closing the bug report.\n\nThanks.", "id": 200353, "time": "2017-08-17T09:08:11Z", "creator": "rubimazaki@gmail.com", "creation_time": "2017-08-17T09:08:11Z", "is_private": false, "attachment_id": null}]
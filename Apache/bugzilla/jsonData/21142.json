[{"count": 0, "tags": [], "bug_id": 21142, "is_private": false, "id": 39546, "creation_time": "2003-06-27T14:00:37Z", "time": "2003-06-27T14:00:37Z", "creator": "jari.nurminen@iki.fi", "text": "When defining a nested classpath element in <junit> task it doesn't override the\nsystem's CLASSPATH as it does with <java> task. Below is an example what I mean.\n<junit>\n    <classpath>\n        <path refid=\"project.class.path\"/>\n    </classpath>\n    <test name=\"JUnitTest\" todir=\"${test.log}\"/>\n</junit>\nThis should override the existing classpath settings and use only\n\"project.class.path\" path, but it doesn't.\n\nNow the first question is it even supposed to override?\nIf not, it should because:\n - the <junit> task behaviour is a bit confusing when comparing to \n   <java> task behaviour.\n - this leads to problems in some cases (see example below).\n\nLet's suppose that I'm developing something with a version of Xerces that is\ndifferent from the one ant uses (and has under it's ANT_HOME/lib) directory. \nLet's call these versions:\n- XercesMyLib.jar - resides in my projects lib directory\n- XercesAnt.jar - resides in ANT_HOME/lib directory\n\nNow I'm having <junit> task like this.\n<junit fork=\"yes\">\n    <classpath>\n        <path refid=\"project.class.path\"/>\n    </classpath>\n    <test name=\"JUnitTest\" todir=\"${test.log}\"/>\n</junit>\n\nAnd I forget to put XercesMyLib.jar into my project.class.path.\n\nPOSSIBLE RESULTS (both of them aren't very desirable):\n- Unit tests fail because of the wrong Xerces version\n- Unit tests pass, but the project won't execute because the correct Xerces\nlibraries are missing.", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 21142, "text": "I have done a simple test on the head revision of ant showing that the nested \n<classpath/> in junit overrides the classpath in which ant is running.\nCan it be that the conflicting xerces jar file is actually not coming from ant \nbut from, say, the JRE or the J2SDK EE (endorsed directory) ?\nAlso, run ant with the -verbose option and attach the output to the bug report.\nWhen doing this, you will get lines like that :\n\n    [junit] Implicitly adding C:\\ant\\lib\\junit.jar;C:\\ant\\lib\\ant.jar;C:\n\\ant\\lib\\optional.jar to CLASSPATH\n    [junit] Executing 'C:\\j2sdk1.4.1_02\\jre\\bin\\java.exe' with arguments:\n    [junit] '-classpath'\n    [junit] 'C:\\dev\\testant\\my.jar;C:\\dev\\testant;C:\\ant\\lib\\junit.jar;C:\n\\ant\\lib\\ant.jar;C:\\ant\\lib\\optional.jar'\n    [junit] 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner'\n\nThis should help clarify what is actually happening.\n", "id": 39594, "time": "2003-06-29T16:36:16Z", "creator": "antoine@apache.org", "creation_time": "2003-06-29T16:36:16Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 21142, "is_private": false, "text": "I think the conflicting xerces jar file cannot come from somewhere else because\nusing the <java> task (and the nested <classpath>) the xerces jar is not found.\nBut using the <junit> task the xerces jar is found somewhere.\n\nBUT the weirdest thing is that after booting my w2k machine the problem\ndisappeared and I can't reproduce it anymore. I.e. everything works just fine now.\n\nSorry, my mistake. I should have used the traditional windows \"reboot\"-fix\nbefore posting this bug.\nI guess this bug can be closed as it isn't really a ant bug, but instead a\nbug/\"feature\") in w2k/JDK.", "id": 39725, "time": "2003-07-01T07:37:04Z", "creator": "jari.nurminen@iki.fi", "creation_time": "2003-07-01T07:37:04Z", "attachment_id": null}]
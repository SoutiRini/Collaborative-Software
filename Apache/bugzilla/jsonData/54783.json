[{"count": 0, "tags": [], "bug_id": 54783, "attachment_id": null, "text": "We see significant performance degradation for our Web Application when using TCP In-Memory replication with DeltaManager.\n\nOn looking at Tomcat 6 source, here are possible causes we identified and our suggestions.\n\n#1 Need early evaluation of Filters:\n\nIn ReplicationValve.java method invoke, the Filtering of URI's is done after having done some computation.\n\nThis should be done at the earliest immediately after the following call.\n   getNext().invoke(request, response);\n\nThis will avoid unnecessary checks / computations for URI's that are filtered out based on the Filter expression defined for the ReplicationVavve.\n\n\n#2 Minimize Session locking in DeltaManager requestCompleted method\n\nIn the DeltaManager method\n  public ClusterMessage requestCompleted(String sessionId)\nthe DeltaSession is locked at start of the method and the lock is released towards end of the method.\n\nMinimize the DeltaSession locking in this method so that parallelism of Requests fired by Browser for the same User is not impaired.\n\nCould a copy / clone of DeltaSession be done so that the interval for which DeltaSession is locked can be minimized?\n\nGoing further, after a copy / clone of DeltaSession is done, could the Response be sent back to the Browser and the DeltaSession processing for replication done asynchronously in a seperate Thread / by using a seperate Thread Pool?\n\n\nThe DeltaSessionManager does extra computation for Session replication using the same Thread that processes the User's request. It also holds up sending back the Response till the extra computation is done. The result is Response times for a Web Application regress with Session Replication enabled compared to a baseline when no Session Replication is used.\n\nBoth the points noted above and the suggestions on these points can help mitigate the Performance impact on the Application.\n\nWhile the issue is being reported on Tomcat 6.0.20, I think it applies to Tomcat 6 latest version and Tomcat 7 latest version as well.\n\nFixes for the issues mentioned will go a long way in addressing Performance concerns with In Memory Session Replication.\n\n--- Abhijit Rajwade", "id": 166317, "time": "2013-04-02T11:32:47Z", "creator": "Abhijit_Rajwade@bmc.com", "creation_time": "2013-04-02T11:32:47Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 54783, "text": "(In reply to comment #0)\n> On looking at Tomcat 6 source, here are possible causes we identified and\n> our suggestions.\n\nSource code review is just about the worst possible way to try and identify a performance bottleneck. You'd have just about as much success if you closed your eyes and stuck a pin in a printout of the source code. You need to use a profiler (I use YourKit because they give free copies to open source developers to use on their open source projects but there are a number of profilers available).\n\n> #1 Need early evaluation of Filters:\n\nI don't see anything particularly excessive in terms of the checks that are performed before the filters are evaluated. Also, the best order for evaluation will be application dependent. The current order seems reasonable for the majority of users. I'll need to see some hard evidence from a profiler before any changes here get my support.\n\n> #2 Minimize Session locking in DeltaManager requestCompleted method\n\nI don't see any simple way to reduce the locking while retaining functionally correct behaviour.\n\n> Going further, after a copy / clone of DeltaSession is done, could the\n> Response be sent back to the Browser and the DeltaSession processing for\n> replication done asynchronously in a seperate Thread / by using a seperate\n> Thread Pool?\n\nAlready supported and used by default.", "id": 167300, "time": "2013-05-20T08:49:04Z", "creator": "markt@apache.org", "creation_time": "2013-05-20T08:49:04Z", "is_private": false, "attachment_id": null}]
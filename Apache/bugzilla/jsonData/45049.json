[{"count": 0, "tags": [], "bug_id": 45049, "attachment_id": null, "id": 116862, "creation_time": "2008-05-20T13:11:37Z", "time": "2008-05-20T13:11:37Z", "creator": "nick@simplylogic.net", "text": "Hi, \n\nI\u2019m running apache 2.2.8 with mod_cache + mod_mem_cache. I\u2019ve configured all content to be cached. Content is served from a backend server. I\u2019ve found if a \u201cnon cached page\u201d is requested and the socket to apache is terminated before all content is read from backend server and dispatched to client, mod_mem_cache caches partial content! When I make a subsequent request for the same page, the partial content is returned from cache. \nIn apache 2.0 the configuration value CacheForceCompletion details the cache will only be populated with complete content. This config value has now been removed! Is there a flag to control such behaviour? I require all content stored in cache to be 100% and never partial. \n\nAt present to no avail I\u2019ve found nothing detailing the above issues! So, I had a look at mod_mem_cache and plugged in the below code as a temporary solution which works a treat. \n\n    /*\n     * FD cacheing is not enabled or the content was not\n     * suitable for fd caching.\n     */\n    if (mobj->m == NULL) {\n        mobj->m = malloc(mobj->m_len);\n        if (mobj->m == NULL) {\n            return APR_ENOMEM;\n        }\n        obj->count = 0;\n    }\n    cur = (char*) mobj->m + obj->count;\n\n// START CHANGE\n\tif (r->connection->aborted==1) {\n\t\t// Connection aborted, do not cache this page! \nap_log_error(APLOG_MARK, APLOG_INFO, 0, r->server, \"socket aborted!\u201c);\nobj->count = 0;\nreturn APR_ENOMEM;\n\t}\n// END CHANGE\n\n    /* Iterate accross the brigade and populate the cache storage */\n    for (e = APR_BRIGADE_FIRST(b);\n         e != APR_BRIGADE_SENTINEL(b);\n         e = APR_BUCKET_NEXT(e))\n    {\n\nI need to understand if I\u2019ve missed something or the behaviour I\u2019m experiencing is a feature! \n\nThanks again...I've already posted a number of questions on other sites but no one has been able to answer. \n\nCheers, Nick", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45049, "attachment_id": null, "is_private": false, "id": 127894, "time": "2009-06-11T10:32:28Z", "creator": "fil@taz.de", "creation_time": "2009-06-11T10:32:28Z", "text": "Just want to briefly confirm this one (using debian etch's 2.2.3)\n\nRan into it in a reverse proxy setup and did now switch to using mod_disk_cache + tmpfs. That seems to have solved the problem for us. \n\nIt's a nasty show-stopper and opens gates for denial-of-service (or call it corrupt-service?) attacks. Think a warning should be added to the docs.\n\nWill drop back when I have found time to do some synthetic tests so I may give more detail."}, {"count": 2, "tags": [], "creator": "minfrin@sharp.fm", "text": "If possible, please add the change as a unified diff (diff -u).", "id": 130841, "time": "2009-10-03T08:02:06Z", "bug_id": 45049, "creation_time": "2009-10-03T08:02:06Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "Chaosed0@gmail.com", "text": "This behavior was still around in 2.2.x. Fixed in r1700578.", "id": 184898, "time": "2015-09-01T14:33:47Z", "bug_id": 45049, "creation_time": "2015-09-01T14:33:47Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "Chaosed0@gmail.com", "is_private": false, "text": "(In reply to Edward Lu from comment #3)\n> This behavior was still around in 2.2.x. Fixed in r1700578.\n\nSorry, not actually fixed yet - only proposed for integration.", "id": 184905, "time": "2015-09-01T18:25:11Z", "bug_id": 45049, "creation_time": "2015-09-01T18:25:11Z", "attachment_id": null}]
[{"count": 0, "tags": [], "creator": "schultz@adrenaline.com", "attachment_id": null, "text": "BeanInfoManager uses double-checked locking in checkInitialized() method.\n\n  void checkInitialized (Logger pLogger)\n    throws ELException\n  {\n    if (!mInitialized) {\n      synchronized (this) {\n\tif (!mInitialized) {\n\t  initialize (pLogger);\n\t  mInitialized = true;\n\t}\n      }\n    }\n  }\n\nDCL is not guarenteed to work on any particular VM, although it probably does on\nmany.\n\nReferences:\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\nThis seems to have all the reasons in a single, concise page. It also contains\nsome other of the references that I would have included here.\n\nSolution:\nSimply make the method itself synchronized. Performance degrades, but\ncorrectness improves :)\n\n  synchronized void checkInitialized (Logger pLogger)\n    throws ELException\n  {\n     if (!mInitialized) {\n\t  initialize (pLogger);\n\t  mInitialized = true;\n     }\n  }", "id": 28011, "time": "2002-12-18T15:42:22Z", "bug_id": 15488, "creation_time": "2002-12-18T15:42:22Z", "is_private": false}, {"count": 1, "tags": [], "text": "Update: after reading the reserence that I actually included as part of the bug,\nI believe that since the DCL uses a boolean as the value to be double-checked,\nit will work and is not a bug.\n\nCan someone take a look and confirm that?", "attachment_id": null, "id": 28012, "creator": "schultz@adrenaline.com", "time": "2002-12-18T15:58:33Z", "bug_id": 15488, "creation_time": "2002-12-18T15:58:33Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 15488, "attachment_id": null, "id": 28015, "time": "2002-12-18T16:34:19Z", "creator": "bayern@essentially.net", "creation_time": "2002-12-18T16:34:19Z", "is_private": false, "text": "I believe your latter assessment is correct; it should work for booleans, \nsince reads from and writes to booleans are atomic (as they're less than 32 \nbits long).\n\nBy the way, which class (by fully qualified package name) in which taglib are \nyou referring to?  This bug was filed under \"Unknown Taglib\"; I'm responding \nbased on the assumption that you're referring to the EL implementation \ncurrently in the Standard Taglib."}, {"count": 3, "tags": [], "bug_id": 15488, "text": "Sorry. Yes, I'm talking about the EL implementation.\n\norg.apache.taglibs.standard.lang.jstl.BeanInfoManager\n\nAn unrelated question about the BeanManager: A colleague of mine was using a\nclass called Component and it blew up when used within the EL because the\nIntrospector was finding a BeanInfo for java.awt.Component and no BeanInfo for\nhis Component class.\n\nIt took forever to figure it out. It looks like possible solutions are:\n\n1. Write a BeanInfo class for his class, as well as for all other classes he\nuses with the JSTL\n2. Set the 'bean info path' to nothing to force the use of reflection\n3. Hack the BeanInfoManager to use IGNORE_ALL_BEANINFO when incoking the\nIntrospector.\n\nNone of these seem like great ideas. Got any of your own? >:|", "id": 28016, "time": "2002-12-18T16:42:53Z", "creator": "schultz@adrenaline.com", "creation_time": "2002-12-18T16:42:53Z", "is_private": false, "attachment_id": null}]
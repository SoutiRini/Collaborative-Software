[{"count": 0, "tags": [], "bug_id": 41142, "text": "The function apr_allocator_destroy removes pool nodes\nfrom memory. Those nodes are organized as a chain in which \neach node points to the subsequent one using its 'next'\nmember.\n\nIf mod_dbd in conjunction with apr_dbd_pgsql is in use it\nhappens, that the 'next' pointer of a node points to the\nnode itsself. This introduces an endless loop consuming 100%\nof CPU.\n\nThe problem IMHO is introduced into the chain of nodes at\nsome other location. However as a workaround I've applied the\nfollowing patch to the destroy function to become aware of\nthe problem and treat it correctly:\n\n*** ./srclib/apr/memory/unix/apr_pools.c.fcs    Sun Dec 10 12:44:28 2006\n--- ./srclib/apr/memory/unix/apr_pools.c        Sun Dec 10 12:45:52 2006\n***************\n*** 107,112 ****\n--- 107,115 ----\n      for (index = 0; index < MAX_INDEX; index++) {\n          ref = &allocator->free[index];\n          while ((node = *ref) != NULL) {\n+           /* jens 2006/12/10 - this should not happen, however it intro-\n+              duced endless loops when apr_dbd_pgsql is in use */\n+           if( node->next == node) node->next = NULL;\n              *ref = node->next;\n              free(node);\n          }\n\nThis problem is a blocking point for Apache utilizing PostgreSQL\nas authentication provider.", "id": 96706, "time": "2006-12-10T04:34:55Z", "creator": "jens@strawberry.com", "creation_time": "2006-12-10T04:34:55Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 96707, "time": "2006-12-10T04:46:55Z", "creator": "rpluem@apache.org", "creation_time": "2006-12-10T04:46:55Z", "is_private": false, "text": "Reclassify as APR bug"}, {"count": 2, "tags": [], "creator": "jens@strawberry.com", "text": "The patch proposed is a very quick workaround. The problem is \nintroduced somewhere else. The patch prevents from endless loops, but\nit may result in memory leaks - if the chain looops in the middle, not\nat the end - anyway", "id": 96732, "attachment_id": null, "bug_id": 41142, "creation_time": "2006-12-10T23:51:59Z", "time": "2006-12-10T23:51:59Z", "is_private": false}, {"count": 3, "tags": [], "text": "That is most likely to be the result of some heap corruption bug or pool abuse;\nit's certainly not correct to silently ignore such a loop in APR.\n\nYou could try standard tricks to narrow down the cause of the corruption (e.g.\nbuilding --enable-pool-debug) if this is not a known issue in mod_dbd.", "attachment_id": null, "bug_id": 41142, "id": 96735, "time": "2006-12-11T02:49:39Z", "creator": "jorton@redhat.com", "creation_time": "2006-12-11T02:49:39Z", "is_private": false}, {"count": 4, "tags": [], "creator": "jens@strawberry.com", "attachment_id": null, "text": "Hi,\n\nthis ist a *BUG*!\n\nApache 2.2.3 is no usable at all if mod_dbd with apr_dbd_pgsql\nis configured.\n\nI aggree, that the patch I've provided is a workaround, however\nit works for me and I do not have the ressources to play around\nwith some debugging voodoos this time. It already took me more\nthat one week to drag it down as far as I did!\n\nI'd offer my help but if you insist in closing this issue without\nanalyzing or even forward it to people more familiar with mod_dbd\nand apr_dbd_pgsql, then leave this buggy apache as it is!\n\nJens", "id": 96739, "time": "2006-12-11T04:17:21Z", "bug_id": 41142, "creation_time": "2006-12-11T04:17:21Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 96751, "time": "2006-12-11T06:50:57Z", "creator": "jorton@redhat.com", "creation_time": "2006-12-11T06:50:57Z", "is_private": false, "text": "Lacking any further reproduction information beyond \"mod_dbd causes heap\ncorruption\" there is not much point keeping the bug open.  There is certainly no\nbug in APR described here.\n\nIf the symptoms of your bug match bug 39985 could you try the patch Chris posted\nthere?\n\nOtherwise could you describe how and when mod_dbd is failing, how it was\nconfigured, how you built the server, etc?"}, {"count": 6, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 96756, "time": "2006-12-11T07:03:36Z", "creator": "jorton@redhat.com", "creation_time": "2006-12-11T07:03:36Z", "is_private": false, "text": "Please report problems with libapreq to apreq-dev@httpd.apache.org; I've\nforwarded this message."}, {"count": 7, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 96757, "time": "2006-12-11T07:04:23Z", "creator": "jorton@redhat.com", "creation_time": "2006-12-11T07:04:23Z", "is_private": false, "text": "Blerg, sorry, wrong bug."}, {"count": 8, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 96842, "time": "2006-12-12T13:32:29Z", "creator": "jens@strawberry.com", "creation_time": "2006-12-12T13:32:29Z", "is_private": false, "text": "Hi,\n\nI tried the patch posted in issue 39985 but it did not help.\nI've installed the source tree and the development environment\non one of my public servers. I may offer to drag this down\ntogether ...\n\nJens"}, {"count": 9, "tags": [], "bug_id": 41142, "attachment_id": null, "id": 100338, "time": "2007-03-13T05:21:02Z", "creator": "hpw@hp-weidinger.at", "creation_time": "2007-03-13T05:21:02Z", "is_private": false, "text": "I had a simmilar Problem with apr when destroying a pool twice.\n(Call apr_pool_destroy twice on the same pool).\n\nThis causes the allocators \"free\" list to be corrupted.\n\nNext time, you call \napr_pool_create(newpool,NULL)\napr_pool_create(newpool2,newpool) you get 2 identical nodes, where\nparent and child seem to be self-references.\n\nin allocator_destroy (called by apr_terminate) this leads to an endless loop.\n\nMaybe it would help to enhance the apr-functions with debug output."}, {"count": 10, "tags": [], "creator": "randy@greatplainsmfg.com", "attachment_id": null, "text": "This is a me too on this issue. This is a problem in apache 2.2.3 and 2.2.4.\nI have also \"fixed\" the problem by hacking up apr_allocator_destroy(). However\nmy hack is ugly compared to Jens' modification. My environment is as\nfollows:\nSolaris 10 (sparc)\nSun Studio 11 compiler\nApache 2.2.4 (also had problem with 2.2.3)\nphp 5.2.3\nmysql 5.0.45\napr 1.2.9 (I replaced the apr in srclib with 1.2.9)\napr_dbd_mysql.c from http://apache.webthing.com/database\n\napr is configured with:\nconfigure --prefix=/usr/local/apache2/apr\n\napr-util is configured with:\nconfigure --with-mysql=/opt/mysql/mysql --with-apr=/usr/local/apache2/apr -\n-prefix=/usr/local/apache2/apr-util --with-expat=builtin\n\napache is configured with:\nconfigure --enable-ssl --with-ssl=/usr/sfw --with-apr=/usr/local/apache2/ap\nr --with-apr-util=/usr/local/apache2/apr-util --enable-authn-dbd\n\napr, apr-util, and apache all configure, compile, and install nicely.\n\nHowever a few minutes ( 1 -5 minutes) after startup of apache the\nhttpd process are all consuming cpu and are stuck in an endless loop\nin apr_allocator_destroy(). With my \"fixed\" apr_allocator_destroy()\nfunction the problem is \"fixed\".\n\n\nBelow is my ugly modified apr_allocator_destroy() function.\nThis one happens to be from apr 1.2.9.\n\nAPR_DECLARE(void) apr_allocator_destroy(apr_allocator_t *allocator)\n{\n    apr_uint32_t index;\n    apr_memnode_t *node, **ref;\n    apr_memnode_t *old1, *old2;/*rsj 08/25/2006 add this to prevent spinning below*/\n\n    for (index = 0; index < MAX_INDEX; index++) {\n        ref = &allocator->free[index];\n        while ((node = *ref) != NULL) {\n            *ref = node->next;\n            /*\n                rsj 08/25/2006\n                The next 4 lines of code are added by me.\n                The purpose is to keep from trying to free the same node\n                over and over and over...\n                This is what was happening when I attached dbx to an httpd\n                process that was using 100% cpu.\n                If old == *ref then we have the problem. That is why the if\n                statement sets node->next to NULL because the original\n                node->next points to its self.\n            */\n            if(old1 == *ref) node->next = NULL;/*rsj 08/25/2006*/\n            if(old2 == *ref) node->next = NULL;/*rsj 08/25/2006*/\n            old2 = old1;/*rsj 08/25/2006*/\n            old1 = *ref;/*rsj 08/25/2006*/\n\n            free(node);\n        }\n    }\n\n    free(allocator);\n}\n\n", "id": 106841, "time": "2007-08-16T16:44:58Z", "bug_id": 41142, "creation_time": "2007-08-16T16:44:58Z", "is_private": false}, {"count": 11, "tags": [], "text": "Do you still have a problem with 2.2.6?", "attachment_id": null, "bug_id": 41142, "id": 107840, "time": "2007-09-07T17:52:04Z", "creator": "nick@webthing.com", "creation_time": "2007-09-07T17:52:04Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 41142, "attachment_id": null, "text": "Apache 2.2.6 has fixed this bug for me!!! I have now been running 2.2.6 for\nseveral days now without a problem.\n\nThanks a bazillion goes to whoever fixed this issue.\nRandy Jones", "id": 108781, "time": "2007-09-28T14:36:58Z", "creator": "randy@greatplainsmfg.com", "creation_time": "2007-09-28T14:36:58Z", "is_private": false}, {"count": 13, "tags": [], "bug_id": 41142, "text": "Believed obsoleted.  Reported as fixed.", "id": 109103, "time": "2007-10-07T18:12:56Z", "creator": "nick@webthing.com", "creation_time": "2007-10-07T18:12:56Z", "is_private": false, "attachment_id": null}]
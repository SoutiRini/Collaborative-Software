[{"count": 0, "tags": [], "bug_id": 33486, "attachment_id": null, "id": 70740, "time": "2005-02-10T10:29:17Z", "creator": "hauser@acm.org", "creation_time": "2005-02-10T10:29:17Z", "is_private": false, "text": "For some reasons, I need to compile with jdk1.5 and other apps with jdk1.4\n\nOne one dev-machine just changing JAVA_HOME before compiling works perfect.\n\nOne another machine, this does not work. Despite \n<<------- Ant diagnostics report -------\nApache Ant version 1.6.2 compiled on July 16 2004\n...\n System properties\n-------------------------------------------\njava.runtime.name : Java(TM) 2 Runtime Environment, Standard Edition\nsun.boot.library.path : /usr/java/sun/j2sdk1.4.2_04/jre/lib/i386\njava.vm.version : 1.4.2_04-b05\n...>>\nI get\n<<BUILD FAILED\njava.lang.UnsupportedClassVersionError: com/sun/tools/javac/Main (Unsupported\nmajor.minor version 49.0)>>\n\nIt seems that the compile target ignores the JAVA_HOME when calling the javac\nand takes the one from the system path.\nFor an end-user it would be a lot easier to only to have to change the JAVA_HOME\nand not also have to fiddle with the system path when needing to almost\nsimultaneously compile on two different jdk versions.\n\nI guess this issue has already been touched in Bug 7327"}, {"count": 1, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "is_private": false, "id": 70742, "time": "2005-02-10T10:54:29Z", "bug_id": 33486, "creation_time": "2005-02-10T10:54:29Z", "text": "You say it works on one machine and not on another.\njavac is taken relative to JAVA_HOME on my machine.\nPlease give the *full* output of -diagnostics in particular\nthe value of \"java.class.path\".\nAlso make sure that the full 1.4 jdk is installed and not\njust the jre.\n(i.e. does /usr/java/sun/j2sdk1.4.2_04/lib/tools.jar exist)\n\n"}, {"count": 2, "tags": [], "text": "Created attachment 14241\nant -diagnostics.txt\n\nas said, my javac(1.5) is in the path (/usr/java/j2sdk/bin/javac) while\njavac(1.4.2.) is not.\n\nin the attached, I see <<org.apache.env.Which diagnostics\n-------------------------------------------\nNot available.\nDownload it at http://xml.apache.org/commons/>>\nwhen going there, it is not at all clear which jars I am supposed to put into\nmy ANT_HOME/lib??", "attachment_id": 14241, "bug_id": 33486, "id": 70743, "time": "2005-02-10T11:27:10Z", "creator": "hauser@acm.org", "creation_time": "2005-02-10T11:27:10Z", "is_private": false}, {"count": 3, "tags": [], "text": "Mmm, you seem to have the java 5 (/usr/java/j2sdk/) jars in the java.class.path.\nDo you have the env variable CLASSPATH set?\n", "attachment_id": null, "bug_id": 33486, "id": 70745, "time": "2005-02-10T11:36:19Z", "creator": "peterreilly@apache.org", "creation_time": "2005-02-10T11:36:19Z", "is_private": false}, {"count": 4, "attachment_id": null, "creator": "hauser@acm.org", "is_private": false, "id": 70746, "time": "2005-02-10T12:05:38Z", "bug_id": 33486, "creation_time": "2005-02-10T12:05:38Z", "tags": [], "text": "yes\necho $CLASSPATH\n/usr/java/j2sdk/lib\n\n--> o.k. unsetting CLASSPATH helps\n\nif so, I suggest\n1) to have the precedence order:\n   JAVA_HOME - CLASSPATH - system path - \n2) and to warn if\n   javac cannot be found relative to JAVA_HOME and the CLASSPATH is taken as \n   a fall-back\n"}, {"text": "or rather maybe warn if $JAVA_HOME/lib is not present in $CLASSPATH?", "tags": [], "bug_id": 33486, "is_private": false, "count": 5, "id": 70747, "time": "2005-02-10T12:09:00Z", "creator": "hauser@acm.org", "creation_time": "2005-02-10T12:09:00Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "text": "I am going to close this as FIXED in cvs (see part 2 below).\nA couple of points.\n\n1) setting CLASSPATH is evil (tm)\n   this has been the root cause of a huge number of strange\n   things happening. In the next release of ant, an extra\n   command line argument -noclasspath will be supported.\n\n2) in this case, there is a bug in ant 1.6.2 when the CLASSPATH\n   contains a directory, the bug is that jars in the directory\n   is loaded into the classloader - this is not correct behaviour\n\n3) ant code detects where the tools.jar is and adds it to the\n   the classpath - it is done at the end of the adding so the\n   tools.jar is at the end of lookup for Javac class. A Javac\n   eariler in the classpath will be picked up first. This is\n   not a bug, the user has given ant an incorrect environment, so\n   the consequences are going to be undetermined.", "id": 70748, "time": "2005-02-10T12:29:42Z", "bug_id": 33486, "creation_time": "2005-02-10T12:29:42Z", "is_private": false}, {"count": 7, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "is_private": false, "id": 70750, "time": "2005-02-10T13:57:48Z", "bug_id": 33486, "creation_time": "2005-02-10T13:57:48Z", "text": "Ralf,\n\nIf you want to contribute extra code to the -diagnostics routine that looks for\nthis kind of problem (>1 tools.jar on the classpath), then I am sure it would be\nwelcome. We need a test that is fairly generic, rather than just catching the\nparticular configuration you had."}]
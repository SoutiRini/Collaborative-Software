[{"count": 0, "tags": [], "creator": "dsb@smart.net", "text": "It seems that the depend task can't handle nested or inner classes\nwhen the closure attribute is set to \"yes\".\n\nThe symptom is that it deletes the class files for the outer class\nand all inner classes even if the class files are all newer than\nthe source file.\n(Also, note how the \n\n\nI'm running on Window2000.  The command output below is from CygWin bash.\n\n\nHere's my source file, <root>/src/test/Outer.class:\n\npackage test;\n\nclass Outer\n{\n\n    static class Inner\n    {\n    } // class Inner\n\n\n} // class Outer\n\n\nHere's my build.xml file:\n\n<project default=\"default\">\n\n  <property name=\"devRoot\" value=\"./\" />\n\n  <property name=\"source\" value=\"${devRoot}src\" \n  \tdescription=\n\t\"Java source root directory, relative to base, no slash(??) \" \n\t/>\n\n\n  <property name=\"buildRoot\" value=\"${devRoot}build/\" \n  \tdescription=\n\t\"deletable build root directory, relative to base, with slash(??)\"\n\t/>\n\n\n  <property name=\"obj\" value=\"${buildRoot}classes\" />\n\n\n  <path id=\"path.compile\">\n    <pathelement location=\"${obj}\" />\n  </path>\n\n\n\n  <target name=\"compile\">\n    <mkdir dir=\"${obj}\" />\n\n\n    <depend\n\tsrcdir=\"${source}\" \n\tclasspathref=\"path.compile\"\n\tdestdir=\"${obj}\"\n\tclosure=\"yes\"\n\tdump=\"yes\"\n\t/>\n    <echo message=\"\" />\n    <javac \n\tsrcdir=\"${source}\" \n\tclasspathref=\"path.compile\"\n\tdestdir=\"${obj}\"\n\tdebug=\"yes\"\n\tverbose=\"yes\"\n        >\n    </javac>\n  </target>\n\n\n  <target name=\"default\" \n  \tdepends=\"compile\">\n  </target>\n\n  <target name=\"clean\">\n     <delete dir=\"${buildRoot}\" />\n  </target>\n\n\n\n</project>\n\n\nBelow is the file time status and the (trimmed) output of running Ant in debug mode.\n\nNote how the depend tasks deletes Outer.class and Outer$Inner.class.\n\nAlso, note how even though the \"ls\" command's \"-t\" option shows that \nOuter$Inner.class is not older than Outer.class, depend reports:\n\n    Class test.Outer$Inner is out of date with respect to\nC:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\n\nOne theory for the cause of the problem is that file times are being compared\nwith \"<\" instead of \"<=\", or maybe vice versa (assuming that the file dates\nare indeed equal, as opposed to just truncated to whole seconds by ls).\n\nAnother theory is that depend doesn't account for inner classes.  If both\nclass file are newer than the source file, it probably shouldn't care if\none is newer than the other (or if they have the same time and neither is\nneither than the other).  \n\n\n\n\ncd c:/daniel/work/bugtest; ls -ltr `find -name \"*Outer*\"`; ant -find build.xml\n-emacs -verbose compile -debug\n-rw-r--r--    1 Administ None          110 Mar 27 13:17 ./src/test/Outer.java\n-rw-r--r--    1 Administ None          311 Mar 27 13:21\n./build/classes/test/Outer.class\n-rw-r--r--    1 Administ None          317 Mar 27 13:21\n./build/classes/test/Outer$Inner.class\nAnt version 1.4.1 compiled on October 11 2001\nAnt version 1.4.1 compiled on October 11 2001\nSearching for build.xml ...\nBuildfile: c:\\daniel\\work\\bugtest\\build.xml\nSetting project property: ant.java.version -> 1.4\nDetected Java version: 1.4 in: c:\\tools\\j2sdk1.4.0\\jre\nDetected OS: Windows 2000\n +User task: tar     org.apache.tools.ant.taskdefs.Tar\n...\n +User datatype: fileset     org.apache.tools.ant.types.FileSet\n...\nSetting project property: java.runtime.name -> Java(TM) 2 Runtime Environment,\nStandard Edition\n...\nSetting project property: basedir -> C:\\daniel\\work\\bugtest\nProject base dir set to: C:\\daniel\\work\\bugtest\n   +Task: property\nSetting project property: devRoot -> ./\n   +Task: property\nSetting project property: source -> ./src\n   +Task: property\nSetting project property: buildRoot -> ./build/\n   +Task: property\nSetting project property: obj -> ./build/classes\n   +DataType: path\nAdding reference: path.compile -> \n +Target: compile\n   +Task: mkdir\n   +Task: depend\n   +Task: echo\n   +Task: javac\n +Target: default\n +Target: clean\n   +Task: delete\nBuild sequence for target `compile' is [compile]\nComplete build sequence is [compile, default, clean]\n\ncompile:\nAdding class info for test.Outer$Inner\nAdding class info for test.Outer\nResource test/Outer$Inner.class loaded from ant loader\nClass test.Outer depends on\nC:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class due to test.Outer$Inner\nResource test/Outer.class loaded from ant loader\nClass test.Outer$Inner depends on\nC:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class due to test.Outer\nReverse Dependency Dump for 3 classes:\n Class test.Outer affects:\n    test.Outer$Inner in C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class\n Class java.lang.Object affects:\n    test.Outer in C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\n    test.Outer$Inner in C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class\n Class test.Outer$Inner affects:\n    test.Outer in C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\nClasspath file dependencies (Forward):\n Class test.Outer depends on:\n    C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class\n Class test.Outer$Inner depends on:\n    C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\nFileSet: Setup file scanner in dir C:\\daniel\\work\\bugtest\\src with patternSet{\nincludes: [] excludes: [] }\nClass test.Outer$Inner is out of date with respect to\nC:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\nDeleting file C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class since\ntest.Outer$Inner out of date\nDeleting file C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class since\ntest.Outer out of date\nDeleted 2 out of date files in 0 seconds\n\nFileSet: Setup file scanner in dir C:\\daniel\\work\\bugtest\\src with patternSet{\nincludes: [] excludes: [] }\ntest\\Outer.java added as C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class\ndoesn't exist.\nCompiling 1 source file to C:\\daniel\\work\\bugtest\\build\\classes\nUsing modern compiler\nCompilation args: -d C:\\daniel\\work\\bugtest\\build\\classes -classpath\nC:\\daniel\\work\\bugtest\\build\\classes;C:\\tools\\jakarta-ant-1.4.1\\lib\\junit.jar;C:\\tools\\jakarta-ant-1.4.1\\lib\\jaxp.jar;C:\\tools\\jakarta-ant-1.4.1\\lib\\jakarta-ant-1.4.1-optional.jar;C:\\tools\\jakarta-ant-1.4.1\\lib\\crimson.jar;C:\\tools\\jakarta-ant-1.4.1\\lib\\ant.jar;C:\\tools\\j2sdk1.4.0\\lib\\tools.jar\n-sourcepath C:\\daniel\\work\\bugtest\\src -g -verbose\nFile to be compiled:\n    C:\\daniel\\work\\bugtest\\src\\test\\Outer.java\n\n[parsing started C:\\daniel\\work\\bugtest\\src\\test\\Outer.java]\n[parsing completed 50ms]\n[checking test.Outer]\n[loading c:\\tools\\j2sdk1.4.0\\jre\\lib\\rt.jar(java/lang/Object.class)]\n[wrote C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer$Inner.class]\n[wrote C:\\daniel\\work\\bugtest\\build\\classes\\test\\Outer.class]\n[total 511ms]\n\nBUILD SUCCESSFUL\n\nTotal time: 1 second", "id": 12411, "time": "2002-03-27T19:03:12Z", "bug_id": 7529, "creation_time": "2002-03-27T19:03:12Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 7529, "attachment_id": null, "text": "Now it seems that is doesn't matter whether closure is set to \n\"yes\" or \"no\".\n\nAlso, I took a look at the source code.  It doesn't seem to\ndo anything to account for the fact that both class files\ncome from the same source file but might be written at \nslightly different times.\n\n", "id": 12421, "time": "2002-03-27T20:51:56Z", "creator": "dsb@smart.net", "creation_time": "2002-03-27T20:51:56Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 7529, "attachment_id": null, "id": 13076, "creation_time": "2002-04-09T10:22:38Z", "time": "2002-04-09T10:22:38Z", "creator": "conor@apache.org", "text": "Thanks for the detailed report. \n\nIn general, the depend task does not care about the time dependencies between\nclassfiles in the destination directory. Mostly, it cares about time\ndependencies between src and class files. It does, however, care about time\ndependencies between class files and classes in the depend classpath. It is this\ndependency which is catching you you out. \n\nIf you remove the path.compile reference from the depend invocation it would be\nOK. You don't need to add the destination directory to the depend and javac,\nsince they automatically pick this up from the destdir attribute.\n\nIn any case I have added a tolerance of 100 milliseconds to the time check\nbetween class files and files on the classpath. This allows your example to work.\n\nPlease try the next nightly build", "is_private": false}, {"count": 3, "tags": [], "bug_id": 7529, "text": "> In any case I have added a tolerance of 100 milliseconds to the time check\n> between class files and files on the classpath.  This allows your example to\n> work.\n\nWait!  Please!\n\nPlease don't add such a...um...ugl^H^H^Hunreliable, unpredictable, and\nspecial-case hack to Ant.\n\nAs soon as somebody's compilation takes longer than 100 ms between \nwriting two class files, it won't work.  Additionally, since timing \nvaries, you're introducing random behavior that will be a bear (like\na grizzly, not a koala :-) ) to debug.  (Different runs would show \ndifferent class-file deletion behavior.)\n\nIf there's no volunteer time right now to figure out a reliable\nsolution to the (apparent) problem, please leave it the way it was \nrather applying that problematic fix.  \n\n(That partial fix that will hide the problem (for a while) and will \ntake much longer to debug when the problem isn't fully hidden.)\n\nActually, making the time delay configurable and documented (so people\nwill know what's going on and can adjust the value their compilation\nand editing speeds) would be good, though I don't know how much effort\nthat would be.\n\nI'll see if I can help think about what a good solution would be.\n(I'm not familiar with everything that's stored in a class file.\nIs there any compilation timestamp or other data that would be\nthe same for different .class files written from the same .java\nfile?)\n", "id": 13147, "attachment_id": null, "creator": "dsb@smart.net", "creation_time": "2002-04-10T02:00:33Z", "time": "2002-04-10T02:00:33Z", "is_private": false}, {"count": 4, "tags": [], "creator": "conor@apache.org", "attachment_id": null, "id": 13214, "time": "2002-04-11T01:12:51Z", "bug_id": 7529, "creation_time": "2002-04-11T01:12:51Z", "is_private": false, "text": "Fix applied which does not rely on a timecheck\n\nCheck out the next nightly build (2002-04-10)."}]
[{"count": 0, "tags": [], "bug_id": 5322, "is_private": false, "text": "Currently, if a servlet executes the following:\n\nresponse.addIntHeader( \"MyIntHeader\", 2 );\nresponse.addIntHeader( \"MyIntHeader\", 3 );\n\nThe response stream from the server will contain the following headers:\nMyIntHeader: 2\nMyIntHeader: 3\n\nThe above behavior appears to be inconsistent against what the HTTP 1.0 and 1.1\nRFC's state (Section 4.2 Message Headers):\n\n\"Multiple HTTP_header fields with the same field-name may be present in a\nmessage if and only if the entire field-value for that header field is defined\nas a comma-separated list [i.e, #(values)].  It must be possible to combine\nthe multiple header fields into on \"field-name: field-value\" pair, without\nchanging the semantics of the message, by appending each sebsequent field-value\nto the first, each separated by a comma\".\n\nI've include a patch that seems to resolve this in my env.  Several header tests\nthat I have run just fine with the patch applied.\n\n************************************************************************\nIndex: HttpResponseBase.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-4.0/catalina/src/share/org/apache/catalina/connector/HttpResponseBase.java,v\nretrieving revision 1.41\ndiff -u -r1.41 HttpResponseBase.java\n--- HttpResponseBase.java   2001/12/03 19:55:04 1.41\n+++ HttpResponseBase.java   2001/12/07 18:15:46\n@@ -597,19 +597,22 @@\n\n         // Send all specified headers (if any)\n         synchronized (headers) {\n-        Iterator names = headers.keySet().iterator();\n-        while (names.hasNext()) {\n-            String name = (String) names.next();\n-            ArrayList values = (ArrayList) headers.get(name);\n-            Iterator items = values.iterator();\n-            while (items.hasNext()) {\n-                String value = (String) items.next();\n-                    outputWriter.print(name);\n-                    outputWriter.print(\": \");\n+            Iterator names = headers.keySet().iterator();\n+            while (names.hasNext()) {\n+                String name = (String) names.next();\n+                ArrayList values = (ArrayList) headers.get(name);\n+                Iterator items = values.iterator();\n+                outputWriter.print(name);\n+                outputWriter.print(\": \");\n+                while (items.hasNext()) {\n+                    String value = (String) items.next();\n                     outputWriter.print(value);\n-                    outputWriter.print(\"\\r\\n\");\n-                    // System.out.println(\" \" + name + \": \" + value);\n+                    if ( items.hasNext() ) {\n+                        outputWriter.print(\",\");\n+                    }\n                 }\n+                outputWriter.print(\"\\r\\n\");\n+                // System.out.println(\" \" + name + \": \" + value);\n             }\n         }\n\n******************************************************************************", "id": 8700, "time": "2001-12-07T11:52:41Z", "creator": "Ryan.Lubke@Sun.COM", "creation_time": "2001-12-07T11:52:41Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "remm@apache.org", "is_private": false, "count": 1, "id": 8716, "time": "2001-12-08T01:46:26Z", "bug_id": 5322, "creation_time": "2001-12-08T01:46:26Z", "text": "There's a small misunderstanding here.\nIt only means that you can have multiple headers like that only and only if you \ncan replace them by only one header, with the two values delimited by commas. \nIf not, you can't have multiple headers with the same name.\n\nWith header 'foo', if\nFoo: bar\nFoo: bar2\nmeans the same that:\nFoo: bar, bar2\nThen both are valid.\n\nIf they are not equivalent, then the first form is not allowed.\nUsing the addXXXHeader methods implies that the first form is valid."}, {"attachment_id": null, "tags": [], "bug_id": 5322, "text": "Per Section 4.2 of the HTTP/1.1 specification (RFC 2616), it is only legal to \ncombine multiple values for the same header name *if* the semantics doesn't \nchange.  In other words, you have to ensure that a comma character is not \nincluded in any of the values.\n\nOn the other hand, it is *always* legal to have the multiple values for the same \nheader name to be provided on separate HTTP header lines.  Robust client \napplications need to be ready to deal with either approach.\n", "count": 2, "id": 8728, "time": "2001-12-09T20:56:54Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-12-09T20:56:54Z", "is_private": false}]
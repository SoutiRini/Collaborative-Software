[{"count": 0, "tags": [], "bug_id": 29743, "attachment_id": null, "id": 59725, "time": "2004-06-22T16:58:42Z", "creator": "robert@windermere.com", "creation_time": "2004-06-22T16:58:42Z", "is_private": false, "text": "The modified selector has the default behavior of saving cache information to a\npropertiesfile when a change to a file is recognized.  This file comparison is\nperformed when the isSelected(File basedir, String filename, File file) method\nis called upon the selector.  It is at this point that the propertiesfile will\nbe updated ( rewritten ).\n\nThe propertiesfile will be rewritten every time a modified file is found.  \nWhen working with large filesets that have many changes, in my case 15000, this\nleads to poor performance as the properties file is rewritten many times ( up to\n15000 times in my case ).\n\nI would like to be able to delay the writing of this file til some later point,\nafter multiple changes are found.  Unfortunately, the selector framework really\nonly understands the context of one file, through the isSelected method.  A\nselector does not know when we are finished processing a fileset or possibly\nfinished with the selector all together ( unless I am missing a piece in the\nselector architecture ).\n\nA possibility is to add one or more methods to BaseSelector, that a custom\nselector could override.  \n\nIn the case of the modified selector, we may be able to get away with knowing we\nare finished with the selector through some method call like \"tearDown\".  At\nthis point, the modified selector could save its properites file.  \n\nAnother option is to add filesetListener type of behavior to the BaseSelector. \nThis would notify a selector when a fileset selection has started and ended. \nWith this option, the modified selector could save its properties file and the\nend of fileset selection."}, {"count": 1, "tags": [], "creator": "robert@windermere.com", "attachment_id": 11931, "text": "Created attachment 11931\nModified select bugs 29742,29743 bugs fix, plus added support for ChecksumAlgorithm", "id": 59796, "time": "2004-06-23T19:01:06Z", "bug_id": 29743, "creation_time": "2004-06-23T19:01:06Z", "is_private": false}, {"count": 2, "tags": [], "text": "Created attachment 11932\nChecksumAlgorithm class for ModifiedSelector", "is_private": false, "bug_id": 29743, "id": 59797, "time": "2004-06-23T19:02:06Z", "creator": "robert@windermere.com", "creation_time": "2004-06-23T19:02:06Z", "attachment_id": 11932}, {"count": 3, "tags": [], "bug_id": 29743, "attachment_id": null, "id": 59798, "time": "2004-06-23T19:14:19Z", "creator": "robert@windermere.com", "creation_time": "2004-06-23T19:14:19Z", "is_private": false, "text": "[PATCH]\nI have created a patch that addresses the poor cachefile save performance.  This\npatch addresses this bug, as well as bug 29742.\n\nThe revised ModifiedSelector now implements the BuildListener interface.  Upon\nconfiguration, it registers itself with the Project as a BuildListener.  The\nModifiedSelector is notified of finished BuildEvents, like taskFinished,\ntargetFinished and buildFinished.  Saving of the cachefile is now delayed until\nthe next finished BuildEvent occurs, most likely, a taskFinished call.\n\nThere is also a new attribute called \"delayupdate\".  It defaults to true to gain\nthe new performance increase of delaying the save of the cachefile.  Setting the\n\"delayupdate\" attribute to false allows continual cachefile updates ( like the\ncurrent ModifiedSelector ).\n\nI also ran a sample population of files to note the reduction in time to cache\nthe file changes:\n\nsample: 6596 image files averaging 31K, total size of 204 MB\n        the cache is empty, so all files are seen as revised,\n        this is the most extreme case to show the largest performance gain\n\nMD5 digest mode with continual update:  9 minutes, 8 seconds\nMD5 digest mode with delayed update:    36 seconds\nCRC checksum mode with continual update: 7 minutes, 36 seconds\nCRC checksum mode with delayed update: 43 seconds"}, {"count": 4, "tags": [], "creator": "jan@materne.de", "attachment_id": null, "text": "added to HEAD.\n\n\nthanks", "id": 60585, "time": "2004-07-14T05:51:20Z", "bug_id": 29743, "creation_time": "2004-07-14T05:51:20Z", "is_private": false}, {"count": 5, "tags": [], "creator": "maarten_coene@yahoo.com", "attachment_id": null, "text": "The ChecksumAlgorithm isn't included in the 1.6.5 release. Is there any reason\nfor this?\n\nregards,\nMaarten", "id": 90093, "time": "2006-06-12T09:18:41Z", "bug_id": 29743, "creation_time": "2006-06-12T09:18:41Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 29743, "attachment_id": null, "id": 90094, "time": "2006-06-12T10:14:57Z", "creator": "jan@materne.de", "creation_time": "2006-06-12T10:14:57Z", "is_private": false, "text": "That was added in 2004 [1], so maybe a problem whith cvs-tagging. Let's have a \nlook at my local 1.6.5 installation .... right - the ChecksumAlgorithm isnt \nthere.\n\nWhile the ASF changed from cvs to svn we are working on SVN-HEAD only. So Ant \n1.7 will include that.\n\n\n[1] \nhttp://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/types/\nselectors/modifiedselector/ChecksumAlgorithm.java?view=log"}]
[{"count": 0, "tags": [], "bug_id": 56859, "text": "I have a cell with an IF statement. The condition inside the IF statement uses 2 different unsupported functions.\n\nexample: \n\nIF($J$5=1,SYD($B16,$D16,$C16,F$12),SLN($B16,$D16,$C16))\n\nWhen I evaluated the cell, only 1 condition was evaluated by POI (which is the TRUE part of the IF statement). In the example, only the SYD function was detected.\n\nIs there a way that POI will evaluate both conditions of the IF statement so that both unsupported functions will be detected?\n\nI am using XLSX file so I'm using XSSFWorkbook.\n\nThis is my code in evaluating the cell:\n\nXSSFFormulaEvaluator fe = new XSSFFormulaEvaluator(wb);\nfe.evaluateFormulaCell(cell);", "id": 177180, "time": "2014-08-15T09:04:40Z", "creator": "tina@ublys.com", "creation_time": "2014-08-15T09:04:40Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 56859, "is_private": false, "id": 177181, "time": "2014-08-15T09:19:13Z", "creator": "apache@gagravarr.org", "creation_time": "2014-08-15T09:19:13Z", "tags": [], "text": "Can you try with 3.11 beta 1? There were some formula parsing changes in that, would be good to confirm if they've affected it or not"}, {"count": 2, "tags": [], "creator": "tina@ublys.com", "text": "I tried downloading the 3.11 beta 1 version but the download page is returning an error\n\nNot Found\n\nThe requested URL /pub/apache/poi/dev/bin/poi-bin-3.11-beta1-20140808.zip was not found on this server.\n\nAdditionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.\n\nI also tried the other mirror servers but it has the same error.\n\n(In reply to Nick Burch from comment #1)\n> Can you try with 3.11 beta 1? There were some formula parsing changes in\n> that, would be good to confirm if they've affected it or not", "id": 177215, "time": "2014-08-18T02:22:39Z", "bug_id": 56859, "creation_time": "2014-08-18T02:22:39Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "apache@gagravarr.org", "is_private": false, "id": 177231, "time": "2014-08-18T07:54:00Z", "bug_id": 56859, "creation_time": "2014-08-18T07:54:00Z", "tags": [], "text": "Looks like a typo in the link on the download page, sorry :(\n\nCan you try now?"}, {"count": 4, "tags": [], "bug_id": 56859, "text": "I already installed 3.11 beta 1 but the result is still the same. I still got NotImplementedFunctionException but it only returned SYD as the cause of the error.\n\nThis is the returned error:\n\nException: NotImplementedFunctionException\nCause: org.apache.poi.ss.formula.eval.NotImplementedFunctionException: SYD\nDetail cause: Error evaluating cell Schedule!H9", "id": 177262, "time": "2014-08-19T03:24:12Z", "creator": "tina@ublys.com", "creation_time": "2014-08-19T03:24:12Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 56859, "text": "If you only ask POI to parse a formula into Ptg tokens, it can create tokens for the 2 user-defined functions.\norm\nYou could do a FormulaParser.parse(String formula, ...), search for XNamePtgs (externally defined names), then try to evaluate the formula and if an evaluation error occurs, attach the names of the UDFs to that error message.\n\nYou could also write a Java function that is equivalent to the VBA code for user-defined functions so that POI could successfully evaluate a formula.\n\nWithout either of these, POI formula evaluation will be like any other code: an exception will be thrown on the first error. The behavior after the first error occurs is likely to be dependent on the application:\n* exit immediately with a stack trace and a likely cause for the error\n* propagate #ERROR, #NAN, #NAME, etc tokens throughout the formula evaluation process (this is what Excel does)\n* continue with evaluation and accumulate subsequent errors (cascaded errors could make this list quite long, not to mention waste execution time or introduce infinite loops)\n\nThere has been some discussion on the mailing list and bugzilla on what POI's behavior should be. Mainly, how closely should POI try to match Excel's behavior versus provide the least surprising API for programmers (simple example: POI uses 0-based indexing).\n\nThat said, feel free to search through the POI user and dev mailing lists [1] and reopen the discussion. Hopefully one of the two methods, either parse before evaluating or registering Java UDFs, will meet your needs without any changes to POI.\n\n[1] https://poi.apache.org/mailinglists.html", "id": 194272, "time": "2016-10-09T11:27:51Z", "creator": "onealj@apache.org", "creation_time": "2016-10-09T11:27:51Z", "is_private": false, "attachment_id": null}]
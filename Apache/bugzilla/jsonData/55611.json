[{"count": 0, "tags": [], "creator": "luca.dellatoffola@inf.ethz.ch", "attachment_id": 30894, "text": "Created attachment 30894\nPatch for poi-3.9\n\nWe found an easy way to improve POI's performance. The idea is to avoid re-checking\nin DateUtil.isADateFormat(int, String) if a given format string represents a date format if the same string is passed multiple times. \nThis can be done safely by adding a single-static-entry cache and check if the parameters did change from the previous call, and in case invalidate the cache.\nOur attached patch first checks that the format and format index are the same as in the previous call, otherwise execute the real check and store the required data.\nFor example, when running Poi 3.9 on a small document (~40 KB) and on a larger document (~13.5 MB), the patch reduces the running time\ngiving a speedup of ~7% in the first case and ~12% in the second case.\nAdditionally we executed an experiment using this patch with Tika 1.3.\nWe ran a test with a set of nine documents (~13.9MB) obtaining a 27% speedup.", "id": 170355, "time": "2013-09-30T09:11:33Z", "bug_id": 55611, "creation_time": "2013-09-30T09:11:33Z", "is_private": false}, {"count": 1, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "text": "Thanks for the patch. The idea is cool but not thread safe. What if DateUtil.isADateFormat is called from two threads in parallel? I think you will have a race condition in this case. \n\nI would say we should declare this method as synchronized to be on the safe side. \nThe same concern applies to https://issues.apache.org/bugzilla/show_bug.cgi?id=55612", "id": 170588, "time": "2013-10-13T06:58:20Z", "bug_id": 55611, "creation_time": "2013-10-13T06:58:20Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 55611, "text": "(In reply to Yegor Kozlov from comment #1)\n> Thanks for the patch. The idea is cool but not thread safe. What if\n> DateUtil.isADateFormat is called from two threads in parallel? I think you\n> will have a race condition in this case. \n> \n> I would say we should declare this method as synchronized to be on the safe\n> side. \n> The same concern applies to\n> https://issues.apache.org/bugzilla/show_bug.cgi?id=55612\n\nI changed the method DateUtil.isADateFormat as synchronized and re-done the tests.\nWe obtain similar results (in the range of -2%) with the same single-thread setups (I don't have any multi-threaded test-case to use).\n\nMore results for https://issues.apache.org/bugzilla/show_bug.cgi?id=55612 are\ncoming.", "id": 170659, "time": "2013-10-17T21:20:37Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-17T21:20:37Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "yegor@dinom.ru", "attachment_id": null, "text": "Patch applied in r1533764\n\nYegor", "id": 170693, "time": "2013-10-19T14:12:53Z", "bug_id": 55611, "creation_time": "2013-10-19T14:12:53Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 55611, "attachment_id": 30946, "id": 170695, "time": "2013-10-19T14:50:12Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-19T14:50:12Z", "is_private": false, "text": "Created attachment 30946\nPatch for poi-3.9 (synchronized)"}, {"count": 5, "tags": [], "bug_id": 55611, "attachment_id": null, "is_private": false, "id": 170696, "time": "2013-10-19T14:54:15Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-19T14:54:15Z", "text": "Hi Yegor:\n\nThanks for applying the patch!\nI saw that in r1533764 from the method signature that isADateFormat is not synchronized. Is that on purpose? In case I submitted the patch that I used to do the tests in my previous message.\n\n(In reply to Yegor Kozlov from comment #3)\n> Patch applied in r1533764\n> \n> Yegor"}, {"count": 6, "tags": [], "bug_id": 55611, "attachment_id": 30946, "id": 170698, "time": "2013-10-19T15:26:25Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-19T15:26:25Z", "is_private": false, "text": "Comment on attachment 30946\nPatch for poi-3.9 (synchronized)\n\n>diff -rupN -x '.*' poi-3.9/src/java/org/apache/poi/ss/usermodel/DateUtil.java poi-3.9-patch/src/java/org/apache/poi/ss/usermodel/DateUtil.java\n>--- poi-3.9/src/java/org/apache/poi/ss/usermodel/DateUtil.java\t2012-11-25 13:28:05.000000000 +0100\n>+++ poi-3.9-patch/src/java/org/apache/poi/ss/usermodel/DateUtil.java\t2013-10-17 17:32:51.000000000 +0200\n>@@ -288,17 +288,31 @@ public class DateUtil {\n>      * @param formatIndex The index of the format, eg from ExtendedFormatRecord.getFormatIndex\n>      * @param formatString The format string, eg from FormatRecord.getFormatString\n>      * @see #isInternalDateFormat(int)\n>-     */\n>-    public static boolean isADateFormat(int formatIndex, String formatString) {\n>-        // First up, is this an internal date format?\n>-        if(isInternalDateFormat(formatIndex)) {\n>-            return true;\n>-        }\n>-\n>-        // If we didn't get a real string, it can't be\n>-        if(formatString == null || formatString.length() == 0) {\n>-            return false;\n>-        }\n>+     */  \n>+    private static int lastFormatIndex = Integer.MIN_VALUE;\n>+    private static String lastFormatString = null;\n>+    private static boolean isADateFormatCache = false;\n>+    \n>+    public static synchronized boolean isADateFormat(int formatIndex, String formatString) {\n>+       \n>+       if (formatIndex == lastFormatIndex && formatString != null && formatString.equals(lastFormatString)) {\n>+          return isADateFormatCache;\n>+       }\n>+       \n>+       lastFormatIndex = formatIndex;\n>+       lastFormatString = formatString;\n>+       \n>+       // First up, is this an internal date format?\n>+       if (isInternalDateFormat(formatIndex)) {\n>+          isADateFormatCache = true;\n>+          return true;\n>+       }\n>+\n>+       // If we didn't get a real string, it can't be\n>+       if(formatString == null || formatString.length() == 0) {\n>+          isADateFormatCache = false;\n>+          return false;\n>+       }\n> \n>         String fs = formatString;\n>         /*if (false) {\n>@@ -348,6 +362,7 @@ public class DateUtil {\n> \n>         // short-circuit if it indicates elapsed time: [h], [m] or [s]\n>         if(date_ptrn4.matcher(fs).matches()){\n>+            isADateFormatCache = true;\n>             return true;\n>         }\n> \n>@@ -367,7 +382,9 @@ public class DateUtil {\n>         // Otherwise, check it's only made up, in any case, of:\n>         //  y m d h s - \\ / , . :\n>         // optionally followed by AM/PM\n>-        return date_ptrn3.matcher(fs).matches();\n>+        boolean result = date_ptrn3.matcher(fs).matches();\n>+        isADateFormatCache = result;\n>+        return result;\n>     }\n> \n>     /**"}, {"count": 7, "tags": [], "bug_id": 55611, "attachment_id": 30946, "text": "Comment on attachment 30946\nPatch for poi-3.9 (synchronized)\n\n>diff -rupN -x '.*' poi-3.9/src/java/org/apache/poi/ss/usermodel/DateUtil.java poi-3.9-patch/src/java/org/apache/poi/ss/usermodel/DateUtil.java\n>--- poi-3.9/src/java/org/apache/poi/ss/usermodel/DateUtil.java\t2012-11-25 13:28:05.000000000 +0100\n>+++ poi-3.9-patch/src/java/org/apache/poi/ss/usermodel/DateUtil.java\t2013-10-17 17:32:51.000000000 +0200\n>@@ -288,17 +288,31 @@ public class DateUtil {\n>      * @param formatIndex The index of the format, eg from ExtendedFormatRecord.getFormatIndex\n>      * @param formatString The format string, eg from FormatRecord.getFormatString\n>      * @see #isInternalDateFormat(int)\n>-     */\n>-    public static boolean isADateFormat(int formatIndex, String formatString) {\n>-        // First up, is this an internal date format?\n>-        if(isInternalDateFormat(formatIndex)) {\n>-            return true;\n>-        }\n>-\n>-        // If we didn't get a real string, it can't be\n>-        if(formatString == null || formatString.length() == 0) {\n>-            return false;\n>-        }\n>+     */  \n>+    private static int lastFormatIndex = Integer.MIN_VALUE;\n>+    private static String lastFormatString = null;\n>+    private static boolean isADateFormatCache = false;\n>+    \n>+    public static synchronized boolean isADateFormat(int formatIndex, String formatString) {\n>+       \n>+       if (formatIndex == lastFormatIndex && formatString != null && formatString.equals(lastFormatString)) {\n>+          return isADateFormatCache;\n>+       }\n>+       \n>+       lastFormatIndex = formatIndex;\n>+       lastFormatString = formatString;\n>+       \n>+       // First up, is this an internal date format?\n>+       if (isInternalDateFormat(formatIndex)) {\n>+          isADateFormatCache = true;\n>+          return true;\n>+       }\n>+\n>+       // If we didn't get a real string, it can't be\n>+       if(formatString == null || formatString.length() == 0) {\n>+          isADateFormatCache = false;\n>+          return false;\n>+       }\n> \n>         String fs = formatString;\n>         /*if (false) {\n>@@ -348,6 +362,7 @@ public class DateUtil {\n> \n>         // short-circuit if it indicates elapsed time: [h], [m] or [s]\n>         if(date_ptrn4.matcher(fs).matches()){\n>+            isADateFormatCache = true;\n>             return true;\n>         }\n> \n>@@ -367,7 +382,9 @@ public class DateUtil {\n>         // Otherwise, check it's only made up, in any case, of:\n>         //  y m d h s - \\ / , . :\n>         // optionally followed by AM/PM\n>-        return date_ptrn3.matcher(fs).matches();\n>+        boolean result = date_ptrn3.matcher(fs).matches();\n>+        isADateFormatCache = result;\n>+        return result;\n>     }\n> \n>     /**", "id": 170699, "time": "2013-10-19T15:28:02Z", "creator": "luca.dellatoffola@inf.ethz.ch", "creation_time": "2013-10-19T15:28:02Z", "is_private": false}, {"count": 8, "tags": [], "text": "Created attachment 30947\nPatch for poi-3.9 (synchronized + null-check)\n\nSorry for the additional long comments (Clicked wrong button)", "attachment_id": 30947, "id": 170700, "creator": "luca.dellatoffola@inf.ethz.ch", "time": "2013-10-19T15:32:29Z", "bug_id": 55611, "creation_time": "2013-10-19T15:32:29Z", "is_private": false}]
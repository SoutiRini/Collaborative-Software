[{"count": 0, "tags": [], "creator": "gregory.boyce@gmail.com", "text": "I'm currently responsible for managing some reverse proxy servers using apache and mod_proxy, and I stumbled across an apparent bug that I'm hoping someone might have some insights into.\n\nMod_proxy is configured to frontend various webservers, typically with persistent connections enabled on both the frontend and on the backend.  What I've discovered is that when there is an established connection to the backend and the remote side of the connection sends a FIN, mod_proxy gets into a bad state.  For some reason we never send the corresponding FIN to finish closing the connection.\n\nConnections where backend persistent connections are disabled work fine.\n\nI replicated this on my Ubuntu desktop running Apache 2.2.16 with a very simple proxy configuration:\n\nProxyPass       /apache/ http://72.52.221.58/\nProxyPassReverse /apache/ http://apache.com/\n\nI issue a curl against http://localhost/apache/ and I see the following in a packet capture:\n\n13:56:52.377520 IP 192.168.1.57.58103 > 72.52.221.58.80: Flags [S], seq 3154899214, win 5840, options [mss 1460,sackOK,TS val 465793064 ecr 0,nop,wscale 7], length 0\n13:56:52.428168 IP 72.52.221.58.80 > 192.168.1.57.58103: Flags [S.], seq 1968453344, ack 3154899215, win 5840, options [mss 1460,nop,nop,sackOK], length 0\n13:56:52.428210 IP 192.168.1.57.58103 > 72.52.221.58.80: Flags [.], ack 1, win 5840, length 0\n13:56:52.428453 IP 192.168.1.57.58103 > 72.52.221.58.80: Flags [P.], seq 1:266, ack 1, win 5840, length 265\n13:56:52.480281 IP 72.52.221.58.80 > 192.168.1.57.58103: Flags [.], ack 266, win 6432, length 0\n13:56:52.484575 IP 72.52.221.58.80 > 192.168.1.57.58103: Flags [P.], seq 1:648, ack 266, win 6432, length 647\n13:56:52.484593 IP 192.168.1.57.58103 > 72.52.221.58.80: Flags [.], ack 648, win 7117, length 0\n\nInteresting part comes after a few seconds:\n\n13:56:57.484840 IP 72.52.221.58.80 > 192.168.1.57.58103: Flags [F.], seq 648, ack 266, win 6432, length 0\n13:56:57.519404 IP 192.168.1.57.58103 > 72.52.221.58.80: Flags [.], ack 649, win 7117, length 0\n\nIn netstat I see an apache thread in a CLOSE_WAIT state:\n\ntcp        1      0 192.168.1.57:58103      72.52.221.58:80         CLOSE_WAIT \n\napachectl-status shows one of the threads in a \"W\" Sending Reply status.\n\nI haven't found any existing bugs on this, but I do see an old e-mail with a similar behavior for mod_proxy's ftp data connection back in 2000:\n\nhttp://mail-archives.apache.org/mod_mbox/www-apache-bugdb/200001.mbox/%3C20000110120507.66088.qmail@locus.apache.org%3E", "id": 144419, "time": "2011-02-18T14:11:03Z", "bug_id": 50807, "creation_time": "2011-02-18T14:11:03Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "creator": "covener@gmail.com", "is_private": false, "id": 144420, "time": "2011-02-18T14:30:01Z", "bug_id": 50807, "creation_time": "2011-02-18T14:30:01Z", "tags": [], "text": "Isn't this just the state the connection sits in until a subsequent request to the proxy finds the connection in the pool and tries to use it?  The request that established the connection has moved on by the time the origin server is performing a keepalive close."}, {"count": 2, "tags": [], "bug_id": 50807, "is_private": false, "text": "(In reply to comment #1)\n> Isn't this just the state the connection sits in until a subsequent request to\n> the proxy finds the connection in the pool and tries to use it?  The request\n> that established the connection has moved on by the time the origin server is\n> performing a keepalive close.\n\nI'm not quite sure what you mean.\n\nThe client request that triggered the backend connection has definitely been responded to and closed.  \n\nThe backend connection itself is was kept alive until the backend webserver's timeout was reached, and it attempted to close the connection by sending a FIN.  I would expect that Apache would then send its own FIN and open a new connection for subsequent requests.", "id": 144421, "time": "2011-02-18T14:39:36Z", "creator": "gregory.boyce@gmail.com", "creation_time": "2011-02-18T14:39:36Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "gregory.boyce@gmail.com", "attachment_id": null, "is_private": false, "id": 144422, "time": "2011-02-18T14:46:32Z", "bug_id": 50807, "creation_time": "2011-02-18T14:46:32Z", "text": "Ah, I see.  It appears that Apache does eventually send a FIN packet the next time that the specific process attempts to establish a new connection.  Until that point, both ends of the connection are left in a half closed state until either the next request triggers the FIN and a subsequent SYN, or the servers timeout the connection.\n\nThis ended up biting us when a load balancer had a very long timeout value (30 minutes) and we were apparently not sending enough requests through in order to flush out the FINs.  Eventually a request would attempt to reuse the same source port and the load balancer wouldn't respond to the SYN requests since it was still waiting on a FIN from us on that source port.\n\nWe've worked around it for now by dropping the timeout on the load balancer."}, {"count": 4, "tags": [], "text": "Has anyone looked into this problem?  Is a fix available?  This is a critical bug with mod_proxy.  We've now seen this problem 3 times at different sites.  When using backend keepalives mod_proxy needs to be fixed to send a FIN to the backend server (i.e. close the connection) when it gets a FIN from the backend server.  Otherwise the connection is half opened and in many cases a firewall is tracking that and will not allow that same source port to be reused until a FIN is received or until the firewall's timeout expires for that type of tracking.", "is_private": false, "id": 147646, "creation_time": "2011-06-30T15:23:10Z", "time": "2011-06-30T15:23:10Z", "creator": "mirkperl@gmail.com", "bug_id": 50807, "attachment_id": null}, {"count": 5, "tags": [], "text": "This bug is made worse by the fact that net.netfilter.nf_conntrack_tcp_timeout_close_wait in the Linux kernel (at least on some versions) has a default value of 60 seconds.  This value is used when iptables is tracking connections, and it is how long conntrack will wait for a responding FIN after seeing a FIN from one side.  In this case, with the default value, when Apache finally tries to close a half-closed connection, if it has been longer than 60 seconds then Apache will not be able to send its FIN, making this problem worse.  Increasing the value, of course, is an option, but probably not often done or even known about.", "attachment_id": null, "bug_id": 50807, "id": 147819, "time": "2011-07-07T16:06:09Z", "creator": "mirkperl@gmail.com", "creation_time": "2011-07-07T16:06:09Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jim@apache.org", "attachment_id": null, "id": 163114, "time": "2012-11-01T14:32:25Z", "bug_id": 50807, "creation_time": "2012-11-01T14:32:25Z", "is_private": false, "text": "Can you confirm that the issue still exists in 2.4.x?"}, {"count": 7, "tags": [], "creator": "sebastien.allamand@orange.com", "attachment_id": null, "id": 163421, "time": "2012-11-13T12:53:39Z", "bug_id": 50807, "creation_time": "2012-11-13T12:53:39Z", "is_private": false, "text": "Is there any correction for this problem ? does apache 2.4 correct it ?"}, {"count": 8, "tags": [], "text": "This is not needinfo, as Eric properly identified the condition and there is\nno change I'm aware of to the 2.4 pools which would close them early.\n\nThat said, there is no clear fix because those connections are already gone.\n\nThe workaround, AIUI (as noted in comment 3) is to ensure the backend keepalive timeouts (and intervening firewalls, routers and load balancers) are always longer than httpd's proxy keepalive timeouts.  Remaining _WAIT connections should be small enough in number to handle gracefully.  Better yet; since proxy workers should never need recycling, use an unlimited keepalive window where sensible.\n\nPerhaps a proxy pool management thread could park unused workers and respond to\nthe signalled poll condition.", "attachment_id": null, "bug_id": 50807, "id": 165701, "time": "2013-03-06T21:32:00Z", "creator": "wrowe@apache.org", "creation_time": "2013-03-06T21:32:00Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 50807, "attachment_id": null, "id": 165702, "time": "2013-03-06T21:47:04Z", "creator": "wrowe@apache.org", "creation_time": "2013-03-06T21:47:04Z", "is_private": false, "text": "As a short-term band-aid, should all disconnected proxy connections which hadn't reached their timeout emit a warning like\n\n'Proxy connection to %s unexpectedly disconnected; the keepalive timeout of that backend server or an intermediate proxy, router, load balancer or firewall appliance is too short, all must be greater than %d seconds as configured in httpd'\n\n?"}, {"count": 10, "tags": [], "creator": "orion@cora.nwra.com", "attachment_id": null, "is_private": false, "id": 175261, "time": "2014-05-15T20:53:33Z", "bug_id": 50807, "creation_time": "2014-05-15T20:53:33Z", "text": "Adam's not in comment #5 applies to just standard systems as well where the net.ipv4.tcp_fin_timeout defaults to 60 seconds.  So when apache tries to send the final FIN, we get a flood of FIN and RST packets due to tcp retransmission:\n\n 29 5.076937000   BACKEND -> PROXY  TCP 66 8141 > 59404 [FIN, ACK] Seq=7266 Ack=2506 Win=35968 Len=0 TSval=372987155 TSecr=373232386\n 30 5.116993000  PROXY -> BACKEND   TCP 66 59404 > 8141 [ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373237391 TSecr=372987155\n616 168.070814000  PROXY -> BACKEND   TCP 66 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373400344 TSecr=372987155\n617 168.070868000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n632 168.274981000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373400549 TSecr=372987155\n633 168.275009000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n634 168.685140000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373400959 TSecr=372987155\n635 168.685196000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n636 169.504941000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373401779 TSecr=372987155\n637 169.504968000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n640 171.144951000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373403419 TSecr=372987155\n641 171.144982000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n644 174.454315000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373406728 TSecr=372987155\n645 174.454348000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n673 181.013929000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373413288 TSecr=372987155\n674 181.013955000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n732 194.133990000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373426408 TSecr=372987155\n733 194.134013000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0\n877 220.374086000  PROXY -> BACKEND   TCP 66 [TCP Retransmission] 59404 > 8141 [FIN, ACK] Seq=2506 Ack=7267 Win=32000 Len=0 TSval=373452648 TSecr=372987155\n878 220.374149000   BACKEND -> PROXY  TCP 54 8141 > 59404 [RST] Seq=7267 Win=0 Len=0"}, {"count": 11, "tags": [], "text": "Looking at the mod_proxy documentation there's this little tidbit:\nttl can be used to avoid using a connection which is subject to closing because of the backend server's keep-alive timeout.\n\nSo wouldn't that be the proper configurable solution?", "is_private": false, "id": 178033, "creation_time": "2014-09-22T16:18:19Z", "time": "2014-09-22T16:18:19Z", "creator": "dopey@moonteeth.com", "bug_id": 50807, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 50807, "attachment_id": 34270, "id": 193796, "time": "2016-09-19T07:06:50Z", "creator": "hendrik.harms@gmail.com", "creation_time": "2016-09-19T07:06:50Z", "is_private": false, "text": "Created attachment 34270\nclose_wait comparsion 1.3 vs. 2.4\n\nJust an example: upgrading from 1.3.42 to 2.4.23-prefork increases TCP CLOSE_WAIT dramatically. All the close_waits are belonging to mod_proxy(http) backend connections."}]
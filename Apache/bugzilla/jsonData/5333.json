[{"count": 0, "tags": [], "bug_id": 5333, "text": "pageContext.getServletContext().getRealPath(\"\"):\n\nTomcat 2.3.1:\n[..]\\xyz\\\nTomcat 4.0.1:\n[..]\\xyz", "id": 8726, "time": "2001-12-09T19:21:45Z", "creator": "hsapache@online.de", "creation_time": "2001-12-09T19:21:45Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "craig.mcclanahan@sun.com", "text": "The Javadocs for getRealPath say this:\n\n    Returns a String containing the real path for a given virtual path. For \n    example, the path \"/index.html\" returns the absolute file\n     path on the server's filesystem would be served by a request for \n    \"http://host/contextPath/index.html\", where contextPath is the\n     context path of this ServletContext.. \n\nFor a directory, a path that does not end in a \"/\" character is valid on *all* \noperating system platforms, while a path that ends in \"/\" is only valid on some \nplatforms.  However, the important issues is that both are valid on the majority \nof platforms.  Therefore, any application that makes any assumptions about \nwhether or not there is a trailing slash are guaranteed to be non-portable, and \nshould be corrected.\n\nThe standard approach to this (if your application logic requires a trailing \n\"/\") is to do something like this:\n\n    String realPath = getServletContext.getRealPath(path);\n    if ((realPath != null) && !realPath.endsWith(\"/\"))\n        realPath += \"/\";\n", "id": 8727, "time": "2001-12-09T20:47:02Z", "bug_id": 5333, "creation_time": "2001-12-09T20:47:02Z", "is_private": false, "attachment_id": null}]
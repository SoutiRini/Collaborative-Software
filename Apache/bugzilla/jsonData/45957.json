[{"count": 0, "tags": [], "bug_id": 45957, "attachment_id": null, "text": "Currently in Tomcat 5 if a request is received containing UTF-8 content then any accents or non-Roman characters are corrupted, since there is an assumption the POST request is ISO-8895-1 (latin1). For example '\u00e9' becomes '\u00c3\u00a9'. A work around is specified on the following page:\n\n   http://wiki.apache.org/tomcat/Tomcat/UTF-8\n\nin the form of a Filter class, called 'CharsetFilter'. IMHO, this is not the most ideal solution for a site that is wanting to standardise on UTF-8.\n\nIt should be noted that in the same document, referenced above, there is an option to specify the encoding of the URI. It would be handy to have something equivalent for the POST content, maybe something like \"POSTencoding\", defaulting to ISO-8859-1 as is used currently, and then providing the necessary code to use UTF-8 instead.\n\nThis issue is valid for both Tomcat 5 and 6.\n\nadditional keywords: internationalisation, internationalization, i18n", "id": 121247, "time": "2008-10-06T12:27:31Z", "creator": "andrejohn.mas@gmail.com", "creation_time": "2008-10-06T12:27:31Z", "is_private": false}, {"count": 1, "tags": [], "creator": "wrowe@apache.org", "text": "Your subject choice was fuzzy.  We'll presume you mean the entity-body of POST\nrequests, since the POST request-URI itself can be toggled to another encoding.", "id": 121249, "time": "2008-10-06T13:55:57Z", "bug_id": 45957, "creation_time": "2008-10-06T13:55:57Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45957, "is_private": false, "text": "Confirmed, I do mean the entity body, as URIencoding already exists for the request-URI. Thanks.", "id": 121251, "time": "2008-10-06T14:20:44Z", "creator": "andrejohn.mas@gmail.com", "creation_time": "2008-10-06T14:20:44Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Before reading the POST body - you should first be doing this:\nrequest.setCharacterEncoding(\"UTF-8\") \n\n - Tim Funk, as posted to dev@tomcat.a.o\n", "attachment_id": null, "id": 121252, "creator": "wrowe@apache.org", "time": "2008-10-06T16:45:59Z", "bug_id": 45957, "creation_time": "2008-10-06T16:45:59Z", "is_private": false}, {"count": 4, "tags": [], "text": "The problem I have with the suggested approach is that it treats UTF-8 as an exception, rather that a norm for my whole application server. I am not sure that I should be having to be specifying the encoding before handling every request. For a web site that is completely in UTF-8 that is a lot of duplicated code.\n\nAlso, I ask the question why should we allow one behaviour for the URI in the container and not allow for the same with regards to the POST?\n\nI don't see this ticket as invalid, given the above arguments.", "is_private": false, "bug_id": 45957, "id": 121255, "time": "2008-10-06T17:56:06Z", "creator": "andrejohn.mas@gmail.com", "creation_time": "2008-10-06T17:56:06Z", "attachment_id": null}, {"count": 5, "tags": [], "creator": "hedermisi@gmail.com", "text": "I absolutely agree with Andr\u00e9-John.\n\nThis particular issue has been a real showstopper for years and is the most seriuos argument against Tomcat for non english-only applications. It makes everything much harder than it should be:\n\n1. you develop something, and you see that the accented characters are broken. After some googling you find the request.setCharacterEncoding(\"UTF-8\") solution. You insert it into your code. \n\n2. you troubleshoot by writing things out to stdout, and checking catalina.out for results. You see that the encoding is still broken.\n\n3. after painful hours you figure out that the request's encoding had been ok since step 1, the problem is that _logging_ also has problems with encoding. You lose some hair.\n\n4. Things are ok with the requests but the UTF-8 responses are broken. Although not mentioned in the wiki, you quickly find out that you should do \nresponse.setCharacterEncoding(\"UTF-8\");\nThat wasn't a big deal.\n\n5. You want to use stuff (frameworks, etc..) developed by else and you don't want to modigy the code. I'ts time to use the filter solution you have found in the wiki. You modify your web.xml, insert the class (modified so that is sets up response character encoding as well) into your jar. You had to do an hour or so extra work but things are ok.\n\n6. You move your stuff into production environment where there is a Sun Access Manager or similar in front of your app. Things are broken again. After a lot of research you figure out that the problem is with the filter chain, and your only hope is to modify the main conf/web.xml, put your filter there. You convince the sysadmin that it won't hurt else's webapps, another hours of work.\n\n\nAgreed, there is a hack to solve every issue listed here but WHY must this be so painful? I think utf8 should be the default, or configurable at least...\nI see people getting stuck with this every now and then and they asking about configuration options not code.", "id": 121447, "time": "2008-10-12T10:26:09Z", "bug_id": 45957, "creation_time": "2008-10-12T10:26:09Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "is_private": false, "id": 121448, "time": "2008-10-12T11:34:51Z", "bug_id": 45957, "creation_time": "2008-10-12T11:34:51Z", "text": "This was discussed on the users list. See:\nhttp://markmail.org/message/zozxd3iqp47ciisw"}]
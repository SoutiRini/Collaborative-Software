[{"count": 0, "text": "While troubleshooting a crash that occurs while shutting down Aache 2.0.47 on \nWindows XP and Win 2000 I came up with a check that prevents the crash, though \nit doesn't by any means solve the bigger issue described in issue 20462.  Since \nmy change involves APR I thought I should create an issue for it showing the \ncomponent as APR. \n\nMy description of problem before seeing issue 20462:\n\nWhile apache is shutting down a write to a file fails because the mutex value \nhas been cleaned up.  It then tries to log this error to an error log file but \nthe file handle has been invalidated by this time.  The fix adds a simple check \nfor a valid file handle before trying to call the function apr_thread_mutex_lock\n() which needs a valid file handle and mutex or it crashes.\n\nFile:     srclib/apr/file_io/win32/readwrite.c\nFunction: apr_file_write\n\nStarting at line 307 I added this check and modifed existing function call to \ncheck the return code.\n\nif (thefile->filehand == (HANDLE)0 || thefile->filehand == (HANDLE)-1) {\n    return (APR_OS_START_SYSERR + ERROR_INVALID_HANDLE);\n}\n    /* apr_file_lock will mutex the file across processes.\n     * The call to apr_thread_mutex_lock is added to avoid\n     * a race condition between LockFile and WriteFile \n     * that occasionally leads to deadlocked threads.\n     */\n     rc = apr_thread_mutex_lock(thefile->mutex);\n     if (rc != APR_SUCCESS) {\n         return rc;\n     }\n\nIf you think this is useful then I'd be happy to help out in any way I can.\n\nDavid Blake\ndblake@hp.com", "bug_id": 25575, "attachment_id": null, "id": 49211, "time": "2003-12-16T22:00:11Z", "creator": "dblake@hp.com", "creation_time": "2003-12-16T22:00:11Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 25575, "text": "Created attachment 9629\nPatch file for apr_file_write() fix for bug 25575", "id": 49365, "time": "2003-12-18T16:18:46Z", "creator": "dblake@hp.com", "creation_time": "2003-12-18T16:18:46Z", "is_private": false, "attachment_id": 9629}, {"count": 2, "tags": [], "bug_id": 25575, "attachment_id": null, "text": "I attached the fix in <patch> file format.  I'm still reading and learning how \nto submit fixes and discuss issues here and hopefully have this right.", "id": 49366, "time": "2003-12-18T16:23:01Z", "creator": "dblake@hp.com", "creation_time": "2003-12-18T16:23:01Z", "is_private": false}, {"count": 3, "tags": [], "creator": "trawick@apache.org", "attachment_id": null, "is_private": false, "id": 54317, "time": "2004-03-20T20:11:45Z", "bug_id": 25575, "creation_time": "2004-03-20T20:11:45Z", "text": "So apr_file_write() is being called by Apache after the file has been cleaned\nup?  The normal apr philosophy would be to let it segfault and Apache should fix\nits bug (using an apr_file_t after it has been cleaned up).\n\nWhat's the path (backtrace) through Apache to get to the apr_file_write()?\n(or is there another bug filed for that issue?)"}, {"count": 4, "tags": [], "text": "The problem I was addressing sounds exactly like what is described in issue \n20462 with the behavior for me only happening on shutdown, never at startup.  \nIt was difficult to troubleshoot because since it happened during shutdown it \nwas difficult to break into before the offending process had died.\n\nI had read the information about Apr and knew that it was preferred to not \ncatch things like this in apr but I just wasn't able to troubleshoot the apache \nhttpd code for this issue and hoped that catching the error in Apr and \nreturning an error code might cause the issue in httpd to be more clear.\n\nI'll try to back out my patch and test again as soon as I can to see if I can \nget a stack trace.", "attachment_id": null, "bug_id": 25575, "id": 54416, "time": "2004-03-22T19:45:17Z", "creator": "dblake@hp.com", "creation_time": "2004-03-22T19:45:17Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 25575, "is_private": false, "text": "Per Jeff's comments, this is a WONTFIX thing: using the file after it's cleaned\nup is not supposed to work.  The last comment in bug 20462 claims that the cause\nis actually an OpenSSL bug, it would be good to get that corroborated.\n\n*** This bug has been marked as a duplicate of 20462 ***", "id": 58759, "time": "2004-06-04T14:01:21Z", "creator": "jorton@redhat.com", "creation_time": "2004-06-04T14:01:21Z", "attachment_id": null}]
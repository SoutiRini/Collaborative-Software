[{"count": 0, "tags": [], "creator": "ben.rubson@gmail.com", "attachment_id": null, "id": 196669, "time": "2017-02-02T16:52:19Z", "bug_id": 60681, "creation_time": "2017-02-02T16:52:19Z", "is_private": false, "text": "Hello,\n\nin server/protocol.c :\nap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, APLOGNO(00567)\n              \"request failed: error reading the headers\");\n\nWould be nice if this message could be APLOG_ERR (as in Debian package), or at least APLOG_NOTICE / APLOG_WARNING.\n\nWe would then easily have these messages in the error log, without having to set LogLevel to debug.\nGoal is then to ban (with fail2ban) hosts generating too frequently these messages. For example, a slowloris attacker will generate such messages.\n\nThank you very much !\n\nBen"}, {"count": 1, "tags": [], "bug_id": 60681, "attachment_id": null, "text": "Patch submitted :\nhttps://github.com/apache/httpd/pull/25\nThank you !", "id": 196873, "time": "2017-02-09T15:56:31Z", "creator": "ben.rubson@gmail.com", "creation_time": "2017-02-09T15:56:31Z", "is_private": false}, {"count": 2, "tags": [], "creator": "covener@gmail.com", "attachment_id": null, "id": 196874, "time": "2017-02-09T16:11:53Z", "bug_id": 60681, "creation_time": "2017-02-09T16:11:53Z", "is_private": false, "text": "I don't think we should just flip the severity back, need a way to opt-in or if the default changes again, an easy way to suppress messages by prefix/ID."}, {"count": 3, "tags": [], "creator": "ben.rubson@gmail.com", "text": "Thank you for your feedback Eric.\n\n> I don't think we should just flip the severity back,\nDo you mean that this error was already set to an error level different than DEBUG in the past ?", "id": 196881, "time": "2017-02-09T18:11:56Z", "bug_id": 60681, "creation_time": "2017-02-09T18:11:56Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "creator": "covener@gmail.com", "text": "(In reply to Ben RUBSON from comment #3)\n> Thank you for your feedback Eric.\n> \n> > I don't think we should just flip the severity back,\n> Do you mean that this error was already set to an error level different than\n> DEBUG in the past ?\n\nThat was my recollection -- just confirmed it was error level in 2.0.x.", "id": 196882, "time": "2017-02-09T18:34:28Z", "bug_id": 60681, "creation_time": "2017-02-09T18:34:28Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60681, "attachment_id": null, "text": "OK, thank you for your confirmation :)\n\nFrom my point of view, re-increasing at least this one would be justified, as it allows to detect slowloris attacks.\nApache 2.2 was released in 2005, slowloris attack invented in 2009.\nSo in 2005 I think it surely sounded good for this error to be set to DEBUG level.\nBut today I think we might think about raising it again.\n\nI open this bug \"only\" today, as for now I was using the Debian package, in which this message is set to ERROR level.\nUsing the (non-modified) compiled package on another system made me raise this case.\n\nThank you !", "id": 196884, "time": "2017-02-09T18:47:05Z", "creator": "ben.rubson@gmail.com", "creation_time": "2017-02-09T18:47:05Z", "is_private": false}, {"count": 6, "tags": [], "creator": "jchampion@apache.org", "attachment_id": null, "id": 196885, "time": "2017-02-09T18:53:15Z", "bug_id": 60681, "creation_time": "2017-02-09T18:53:15Z", "is_private": false, "text": "(In reply to Eric Covener from comment #2)\n> I don't think we should just flip the severity back, need a way to opt-in or\n> if the default changes again, an easy way to suppress messages by prefix/ID.\n\nHmm, something like a `#pragma diagnostic` would be nice..."}, {"count": 7, "tags": [], "bug_id": 60681, "attachment_id": null, "text": "Flipping this back is the wrong course of action.\n\nThe purpose of the error log is to alert and advise the operator or content\nmaintainers of the server of those conditions under their control which can\nbe fixed to improve delivery of content. This can include not-found requests\n(which might reflect now-missing content or bad redirects between content),\nfailing misdirected back-end proxy requests, server load fault conditions\nand other problem cases that demand the operator's attention.\n\nNo malformed request can be addressed by the server operator, these represent\nan error by the client/user agent which need to be addressed by the user.\nIn some cases the user is the operator, which is why all of the malformed\nrequests can be more carefully examined at core loglevel debug.\n\nThe specific feature request noted by reporter is that some administrators \nwould like to scrape log files for invalid requests, in order to add those \nremote ip addresses to lower-level ban lists. (There is no efficiency to\nadding those ip addresses to any application-level httpd ban module because \nthese errors are dispatched almost immediately before the request processing\nphases begin.)\n\nThis request is already possible today with no change to httpd by scraping\nthe access log for any 400 responses. All 400 responses indicate a malformed\nrequest, whether this is a malformed request line or header line, or some\ninvalid header values.\n\nOther client-originated errors, such as not-found, auth required, etc will\nall fall into an error code >400 <500.\n\nFor all httpd operators who were not using the error log to effect some\nban list, changing the severity will simply generate unactionable, and\ntherefore wasteful log file bytes.\n\nI'd vote WONTFIX.", "id": 196889, "time": "2017-02-09T21:38:23Z", "creator": "wrowe@apache.org", "creation_time": "2017-02-09T21:38:23Z", "is_private": false}, {"count": 8, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 196890, "time": "2017-02-09T23:01:11Z", "bug_id": 60681, "creation_time": "2017-02-09T23:01:11Z", "is_private": false, "text": "Actually, let me reframe that. Leaving a breadcrumb of a faulty request\nwhich does *not* hit the access.log file is sensible.\n\nWe do need a patch which alters the severity (to APLOG_NOTICE, imo) only of\nthese no-access-record error cases. It should not exceed the severity of\nour other historical timeout errors. Based on other failures during the\nheader line processing, I believe the patch we are looking for is an actual\n400-error response in the case of timeout reading header lines, just as we\nhave an immediate 400-error response in the case of too many header lines\nand header line length limit exceeded. This would be captured in the access\nlog.\n\nHistorically, there is no breadcrumb for connecting and waiting for timeout\nforce disconnect, and there was no such error record in 2.2.31.\n\nBased on the historical pattern of ignoring any HTTP:\n  connect - no request - timeout - loop\nvs [error] level report of slowloris \n  connect - trickle request - timeout (or rather, max lines etc) - loop\n\nHTTP Socket Connect:\nno record\n\nHTTP Timeout before a header line is read:\nno record\n\nHTTP Timeout after header line is read:\n[Thu Feb 09 16:16:31 2017] [error] [client 127.0.0.1] request failed: error reading the headers\n\nHTTP Header limits exceeded (slowloris pattern):\nRedundant recording, both error and access log entries;\n[Thu Feb 09 16:55:27 2017] [error] [client 127.0.0.1] request failed: error reading the headers\n127.0.0.1 - - [09/Feb/2017:16:52:20 -0600] \"GET / HTTP/1.1\" 400 290\n\nHTTP Timeout after header lines complete, before C-L request body:\nno error log record, access log records:\n127.0.0.1 - - [09/Feb/2017:16:32:20 -0600] \"GET / HTTP/1.1\" 400 226\n\nHTTP Timeout after header lines complete, before T-E:chunked header:\nno error log record, access log records:\n127.0.0.1 - - [09/Feb/2017:16:41:22 -0600] \"GET / HTTP/1.1\" 400 226\n\nHTTP Timeout after header lines complete, before T-E:chunked content:\nno error log record, access log records:\n127.0.0.1 - - [09/Feb/2017:16:41:22 -0600] \"GET / HTTP/1.1\" 400 226\n\nHTTP Timeout on keepalive:\nno record\n\n\nHTTPS Socket Connect:\n[Thu Feb 09 16:21:44 2017] [info] [client 127.0.0.1] Connection to child 192 established (server hub.wrowe.net:443)\n[Thu Feb 09 16:21:44 2017] [info] Seeding PRNG with 656 bytes of entropy\n\nHTTPS Handshake Timeout:\n[Thu Feb 09 16:21:59 2017] [info] [client 127.0.0.1] (70007)The timeout specified has expired: SSL handshake interrupted by system [Hint: Stop button pressed in browser?!]\n[Thu Feb 09 16:21:59 2017] [info] [client 127.0.0.1] Connection closed to child 192 with abortive shutdown (server hub.wrowe.net:443)\n\nHTTPS Handshake Completed:\n[Thu Feb 09 16:24:53 2017] [info] Connection: Client IP: 127.0.0.1, Protocol: TLSv1.2, Cipher: ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)\n\nHTTPS Timeout after handshake, before header line is read:\n[Thu Feb 09 16:25:08 2017] [info] [client 127.0.0.1] (70007)The timeout specified has expired: SSL input filter read failed.\n[Thu Feb 09 16:25:08 2017] [info] [client 127.0.0.1] Connection closed to child 2 with standard shutdown (server hub.wrowe.net:443)\n\nHTTPS Timeout after handshake, after header line is read:\n[Thu Feb 09 16:27:02 2017] [info] [client 127.0.0.1] (70007)The timeout specified has expired: SSL input filter read failed.\n[Thu Feb 09 16:27:02 2017] [error] [client 127.0.0.1] request failed: error reading the headers\n[Thu Feb 09 16:27:02 2017] [info] [client 127.0.0.1] Connection closed to child 128 with standard shutdown (server hub.wrowe.net:443)\n\nHTTPS Keepalive Timeout after initial request:\n[Thu Feb 09 16:28:21 2017] [info] Initial (No.1) HTTPS request received for child 68 (server hub.wrowe.net:443)\n[Thu Feb 09 16:28:26 2017] [info] [client 127.0.0.1] (70007)The timeout specified has expired: SSL input filter read failed.\n[Thu Feb 09 16:28:26 2017] [info] [client 127.0.0.1] Connection closed to child 68 with standard shutdown (server hub.wrowe.net:443)"}, {"count": 9, "text": "Sorry for confusion, I should have stated 'request line', not 'header line':\n\nHTTP Timeout before a request line is read:\nno record\n\nHTTP Timeout after request line is read, before first header line:\n[Thu Feb 09 16:16:31 2017] [error] [client 127.0.0.1] request failed: error reading the headers", "bug_id": 60681, "attachment_id": null, "id": 196891, "time": "2017-02-09T23:03:46Z", "creator": "wrowe@apache.org", "creation_time": "2017-02-09T23:03:46Z", "tags": [], "is_private": false}, {"count": 10, "text": "Sorry for confusion, I should have stated 'request line', not 'header line':\n\nHTTP Connect:\nno record\n\nHTTP Timeout before the request line is read:\nno record\n\nHTTP Timeout after request line is read, before all header lines are read:\n[Thu Feb 09 16:16:31 2017] [error] [client 127.0.0.1] request failed: error reading the headers\n\n\nWith mod_reqtimeout loaded, these events are changed;\n\nHTTP reqtimeout Connect:\nno record\n\nHTTP reqtimeout before the request line is read:\nRedundant recording, both error (level [info]) and access log entries;\n[Thu Feb 09 17:11:26 2017] [info] [client 127.0.0.1] Request header read timeout\n127.0.0.1 - - [09/Feb/2017:17:11:26 -0600] \"-\" 408 -\n[No 408 error message is transmitted to the client]\n\nHTTP reqtimeout after request line is read, before all header lines are read:\nRedundant recording, both error (level [error]!) and access log entries;\n[Thu Feb 09 17:13:54 2017] [info] [client 127.0.0.1] Request header read timeout\n[Thu Feb 09 17:13:54 2017] [error] [client 127.0.0.1] request failed: error reading the headers\n127.0.0.1 - - [09/Feb/2017:17:13:38 -0600] \"GET / HTTP/1.1\" 408 223\n\nHTTP reqtimeout after header lines complete, before C-L request body:\nRedundant recording, both error and access log entries;\n[Thu Feb 09 18:22:55 2017] [info] [client 127.0.0.1] Request body read timeout\n127.0.0.1 - - [09/Feb/2017:18:22:34 -0600] \"GET / HTTP/1.1\" 400 226\n\nHTTP reqtimeout after header lines complete, before T-E:chunked header:\nRedundant recording, both error and access log entries;\n[Thu Feb 09 18:19:41 2017] [info] [client 127.0.0.1] Request body read timeout\n127.0.0.1 - - [09/Feb/2017:18:19:20 -0600] \"HEAD / HTTP/1.1\" 400 -\n\nHTTP reqtimeout after header lines complete, before T-E:chunked content:\nRedundant recording, both error and access log entries;\n127.0.0.1 - - [09/Feb/2017:18:26:37 -0600] \"GET / HTTP/1.1\" 400 226\n[Thu Feb 09 18:26:47 2017] [info] [client 127.0.0.1] Request body read timeout\n\nHTTP reqtimeout on keepalive:\nno record\n\n\nHere again, an [error] level was too loud and redundant. The [info] level\nmessages are in-line with the historical mod_ssl [info] reporting.\n\nThis suggests to me that the [info] alerts should be emitted from the core\nnon-reqtimeout read failure paths, and that the explicit 408, transmitted\nor not, should be the core reaction to timeout before the request has been\nread and during the body read timeout. The [error] alert for the one and\nonly one failure path once a 408 is recorded is incorrect. Timeouts reading\nthe body should also be 408.\n\nThe fail2ban filter should be applied for all 408 responses, be that the\nfirst request line timeout, all timeouts of header line timeouts and all \nheader body timeouts, along with all 400 responses, which records all\n\"illegible\" and \"too slow\" cases which may likely indicate an abuse pattern.\nSome reasonable threshold needs to be applied, so that the remote cellular\nor other user with intermittent connectivity does not trip this filter too\neasily. Given that any web request may consist of as many as 2-4 parallel\nhttp connections to gather the primary request and tangential resources\n(gif/jpg/css/js etc), some limit such as 10 400+408 requests combined would \nappear to indicate abusive traffic.", "bug_id": 60681, "attachment_id": null, "id": 196893, "time": "2017-02-10T00:30:52Z", "creator": "wrowe@apache.org", "creation_time": "2017-02-10T00:30:52Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 60681, "text": "William, thank you very much for your deep technical analysis !\n\n> We do need a patch which alters the severity (to APLOG_NOTICE, imo)\nI would also be glad to have [notice] level messages in the ErrorLog for these failure cases.\n\nFail2ban already has an \"apache-overflows\" jail, which reads the ErrorLog.\nIt would then really be convenient (and logical) to add to this existing jail a new rule to catch \"request failed: error reading the headers\" (and other faulty timeout) messages.\nThis would avoid adding a new jail, reading a new file (the AccessLog), which is also much bigger to compute than the ErrorLog.\n\nIMO, [notice] level would be the right one to use, as it is still acceptable on a production environment. [info] & [debug] levels are really too verbose.\n\nThank you very much !", "id": 196898, "time": "2017-02-10T08:10:38Z", "creator": "ben.rubson@gmail.com", "creation_time": "2017-02-10T08:10:38Z", "is_private": false, "attachment_id": null}, {"count": 12, "attachment_id": null, "bug_id": 60681, "text": "\"Fail2ban already has an \"apache-overflows\" jail, which reads the ErrorLog.\nIt would then really be convenient (and logical) to add to this existing jail a\nnew rule to catch \"request failed: error reading the headers\" (and other faulty\ntimeout) messages.\nThis would avoid adding a new jail, reading a new file (the AccessLog), which\nis also much bigger to compute than the ErrorLog.\"\n\nBe aware that there are already a number of 400/408 exceptions that will only\nappear in the access log today by default at LogLevel Info, and that appears\nto be true of the earlier revisions. So the suggestion to ignore the access \nlog isn't really viable. I am still in the process of cross-tabulating all of\nthe previous and current behaviors.\n\nI also made a substantial mistake about mod_reqtimeout; using telnet - the\nterminal type handshake occurred - using nc or direct socket access and writing\nno bytes, mod_reqtimeout does not log an error in the access log. Only after\nsome bytes are read or written will it log this faux-error access entry with\nno error response to the client.", "id": 197038, "time": "2017-02-15T14:52:33Z", "creator": "wrowe@apache.org", "creation_time": "2017-02-15T14:52:33Z", "tags": [], "is_private": false}, {"count": 13, "text": "\"Fail2ban already has an \"apache-overflows\" jail, which reads the ErrorLog.\nIt would then really be convenient (and logical) to add to this existing jail a\nnew rule to catch \"request failed: error reading the headers\" (and other faulty\ntimeout) messages.\nThis would avoid adding a new jail, reading a new file (the AccessLog), which\nis also much bigger to compute than the ErrorLog.\"\n\nBe aware that there are already a number of 400/408 exceptions that will only\nappear in the access log today by default at LogLevel Info, and that appears\nto be true of the earlier revisions. So the suggestion to ignore the access \nlog isn't really viable. I am still in the process of cross-tabulating all of\nthe previous and current behaviors.\n\nI also made a substantial mistake about mod_reqtimeout; using telnet - the\nterminal type handshake occurred - using nc or direct socket access and writing\nno bytes, mod_reqtimeout does not log an error in the access log. Only after\nsome bytes are read or written will it log this faux-error access entry with\nno error response to the client.", "bug_id": 60681, "attachment_id": null, "id": 197039, "time": "2017-02-15T14:52:33Z", "creator": "wrowe@apache.org", "creation_time": "2017-02-15T14:52:33Z", "tags": [], "is_private": false}, {"count": 14, "tags": [], "bug_id": 60681, "attachment_id": null, "text": "Hi, Eric, Jacob, William, and others :)\nAny progress on this ?\nThank you again !\nBen", "id": 203293, "time": "2018-01-16T10:12:55Z", "creator": "ben.rubson@gmail.com", "creation_time": "2018-01-16T10:12:55Z", "is_private": false}]
[{"count": 0, "tags": [], "creator": "markus.naeher@web.de", "is_private": false, "id": 7581, "attachment_id": null, "bug_id": 4672, "creation_time": "2001-11-06T02:40:15Z", "time": "2001-11-06T02:40:15Z", "text": "Problem:\nRunning my servlets, I sometimes get NullPointerExceptions when working with \nobjects I have just read from the HttpSession.\nIn at least one case, I am 100% sure that I did not remove the attribute:\nThis attribute is set after a successful login and afterwords it is only read. \nThere's only one place in my whole code that sets that attribute and many \nplaces where it is read. The Exception occurs occasionally, unforseeable and at \nany of the places where I read it.\nBut like usual, there are many other attributes that are set, removed, and read.\nI guess it is a timing problem, because I have multiple threads working with \none session and maybe some attributes are temporarily unavailable while the \nsession reorganizes its internal storage (I guess it is a Hashtable or so) \nafter numerous add operations.\n\nWorkaround:\nI am currently testing a modified version of my servlets with synchronized \naccess to the session attributes.\nSo far, the problem has not occured any more.\n\nProposed fix:\nSynchronize access to the session attributes internally."}, {"count": 1, "tags": [], "creator": "remm@apache.org", "text": "Each session should be independent, and have its own set of attributes. Do you \nmean you're doing multiple simultaneous operations on a session (by forking \nthreads) ?\n\nIn general, none of the objects provided by the container are thread safe (like \nthe request/response/is/os); if you fork threads, you're on your own.\n\nThe session object is actually syncing on the HashMap it uses when using \nsetAttribute.\n\nAlso, I don't understand the report: do you mean that the read attribute is \nsometimes null, when you think it shouldn't ? Have you made sure that you're \nstill accessing the same session ?", "id": 7625, "attachment_id": null, "bug_id": 4672, "creation_time": "2001-11-06T16:55:30Z", "time": "2001-11-06T16:55:30Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 4672, "is_private": false, "text": "Yes, exactly.\nI try to read an attribute and I get a null where I am sure there should be a \nvalid value.\n\nI think only syncing the setAttribute() method is not enough. A read operation \nthat is performed while writing may fail. Syncing getAttribute() on the same \nobject as setAttribute() should solve the problem.\n\nBTW: java.util.Collections provides thread safe wrappers for all standard \ncollection types.\n\nMy multiple threads are created by Tomcat because\n1) I use frames\n2) my servlet serves HTML pages as well as generated images which are\n   embedded therein\nand so, one session may be used by several requests concurently.\nI don't think that's really unusual.", "id": 7641, "time": "2001-11-07T04:19:28Z", "creator": "markus.naeher@web.de", "creation_time": "2001-11-07T04:19:28Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 4672, "text": "The implementation of session attributes *is* synchronized internally already. \nCheck out the getAttribute(), removeAttribute(), and setAttribute() methods in\nthe org.apache.catalina.session.StandardSession class.\n\nNote that this synchronization only protects against simultaneous access to the\nHashMap that is used internally to keep track of the attributes.  Protecting\nagainst simultaneous access to the beans themselves (or methods on those beans)\nis the application's problem.\n", "id": 7647, "time": "2001-11-07T08:37:59Z", "creator": "craig.mcclanahan@sun.com", "creation_time": "2001-11-07T08:37:59Z", "is_private": false, "attachment_id": null}]
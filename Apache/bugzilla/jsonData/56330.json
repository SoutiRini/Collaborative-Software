[{"count": 0, "attachment_id": null, "bug_id": 56330, "is_private": false, "id": 174168, "time": "2014-03-29T02:26:14Z", "creator": "weiqiang_li@hotmail.com", "creation_time": "2014-03-29T02:26:14Z", "tags": [], "text": "There is a bug or a mixture in the file's *dbd_mysql_end_transaction* function:\nstatic int dbd_mysql_end_transaction(apr_dbd_transaction_t *trans)\n{\n    int ret = -1;\n    if (trans) {\n        /* rollback on error or explicit rollback request */\n        if (trans->errnum || TXN_DO_ROLLBACK(trans)) {\n            trans->errnum = 0;\n            ret = mysql_rollback(trans->handle->conn);\n        }\n        else {\n            ret = mysql_commit(trans->handle->conn);\n        }\n    }\n    ret |= mysql_autocommit(trans->handle->conn, 1);\n    trans->handle->trans = NULL;\n    return ret;\n}\n\nThis function was called only by *dbd_mysql_transaction* function:\nstatic int dbd_mysql_transaction(apr_pool_t *pool, apr_dbd_t *handle,\n                                 apr_dbd_transaction_t **trans)\n{\n    /* Don't try recursive transactions here */\n    if (handle->trans) {\n        dbd_mysql_end_transaction(handle->trans) ;\n    }\n    if (!*trans) {\n        *trans = apr_pcalloc(pool, sizeof(apr_dbd_transaction_t));\n    }\n    (*trans)->errnum = mysql_autocommit(handle->conn, 0);\n    (*trans)->handle = handle;\n    handle->trans = *trans;\n    return (*trans)->errnum;\n}\n\nAs we can see, the trans is guaranteed to be not NULL when it called *dbd_mysql_end_transaction*, so it is no need to check it again in the function.\nWhat's mare, the check for trans value in *dbd_mysql_end_transaction* has no proper scope: it dereferences trans even though it is NULL(This will generate a segmentfault)."}, {"count": 1, "tags": [], "bug_id": 56330, "attachment_id": null, "text": "Fixed in apr trunk in r1625247, and in apr-util 1.5.x branch in r1625249.\n\nThe check for trans==NULL is retained, and the unprotected code is moved under that check.\n\nThis function is also called from a cleanup established in apr_dbd_transaction_start() as well as from a direct call from the application to apr_dbd_transaction_end().  trans should never be NULL, but could in the case of an errant application.  While APR generally does not protect against bad parameters from the application, most of the DBD drivers have this check for trans != NULL in the transaction-end support, so I did not remove it from the MySQL driver.\n\nThanks for your report!", "id": 177904, "time": "2014-09-16T11:47:57Z", "creator": "trawick@apache.org", "creation_time": "2014-09-16T11:47:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 56330, "attachment_id": null, "text": "Thanks for your detailed explanation.", "id": 177905, "time": "2014-09-16T12:02:58Z", "creator": "weiqiang_li@hotmail.com", "creation_time": "2014-09-16T12:02:58Z", "is_private": false}, {"count": 3, "tags": [], "creator": "trawick@apache.org", "text": "The fix is in APR-util 1.5.4, which will be announced in a couple of days.", "id": 177985, "time": "2014-09-20T12:34:35Z", "bug_id": 56330, "creation_time": "2014-09-20T12:34:35Z", "is_private": false, "attachment_id": null}]
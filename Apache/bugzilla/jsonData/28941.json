[{"count": 0, "tags": [], "bug_id": 28941, "text": "Hi all,\n\nsomething that bothered me for some time was the fact that I could not\nfind out whether <javac> actually compiled source files because they were\nnewer than the corresponding build artifacts. In my build scripts, I\nwanted to use that information to decide whether I do have to generate\nHibernate mappings via XDoclet or whether I can safe time and skip that\nstep. Also, I didn't have to bundle a new JAR file if nothing would be\ncompiled by <javac>, resulting in significant build time improvement.\n\nSo I patched <javac> to support the onCompile directive. Similar to\n<available> it requires the name of the property that will be set to\n\"true\" if <javac> compiles any source files.\n\nBenefit: I never appreciated the handling of fileset dependencies and\nwanted something more straightforward. This solution requires much less\neffort than writing dependencies of, say, specific source files and\nXDoclet configuration files that have to be evaluated in order to find out\nwhether XDoclet has to be run.\n\n\nConcrete example:\n     <target name=\"compile\">\n            <javac destdir=\"${module.build.classes}\"\n                onCompile=\"moduleA.compiled\">\n                <classpath>\n                    <path refid=\"module.build.classpath\"/>\n                </classpath>\n                <src path=\"${module.tests}\"/>\n                <src path=\"${module.src}\"/>\n                <include name=\"**/*.java\"/>\n            </javac>\n    </target>\n\n    <target name=\"gen.hibernate-mappings\" if=\"moduleA.compiled\">\n    ...\n\n    <target name=\"build.jar\" if=\"moduleA.compiled\">\n    ...\n\n    <target name=\"build\">\n        <antcall target=\"compile\"/>\n        <antcall target=\"gen.hibernate.mappings\"/>\n        <antcall target=\"build.jar\"/>\n     ...\n\n\nIt would be great if the Ant development team would consider applying this\npatch to the main line.\n\n\nThanks,\n\n-tom\n\n\n*** The Patch ***\n\nIndex: src/main/org/apache/tools/ant/taskdefs/Javac.java\n===================================================================\nRCS file: /home/cvspublic/ant/src/main/org/apache/tools/ant/taskdefs/Javac.java,v\nretrieving revision 1.115.2.6\ndiff -r1.115.2.6 Javac.java\n942a943,947\n>\n>             if ( this.onCompileRef != null ) {\n>                 String property = this.getOnCompile();\n>                 getProject().setProperty( property, \"true\" );\n>             }\n944a950,959\n>\n>     public String getOnCompile() {\n>         return this.onCompileRef;\n>     }\n>\n>     public void setOnCompile( String property ) {\n>         this.onCompileRef = property;\n>     }\n>\n>     private String onCompileRef;", "id": 57324, "time": "2004-05-13T06:05:38Z", "creator": "tquas@yahoo.com", "creation_time": "2004-05-13T06:05:38Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "jakarta@ehatchersolutions.com", "attachment_id": null, "is_private": false, "id": 57336, "time": "2004-05-13T10:00:43Z", "bug_id": 28941, "creation_time": "2004-05-13T10:00:43Z", "text": "For what its worth, XDoclet does dependency checking and avoids doing work if it is not needed.  Same \ngoes for building a JAR.\n\nI see you're using <antcall>, but you'd be better off using depends clauses on targets as it is much \nfaster and much cleaner.  Maybe by refactoring your build and ensuring XDoclet is configured to do \ndependency checking (force=\"false\", or not specified at all) you'd not need this <javac> change."}, {"count": 2, "tags": [], "bug_id": 28941, "attachment_id": null, "id": 57343, "time": "2004-05-13T13:06:18Z", "creator": "tquas@yahoo.com", "creation_time": "2004-05-13T13:06:18Z", "is_private": false, "text": "Other code generators I'm using don't do such checks. XDoclet was just an\nexample. A badly chosen one, I admit.\n\nYou're probably right, and it would be more in Ant's spirit to use 'depends'\ninstead of <antcall>; however, I don't see how this would solve the problem.\nUsing 'depends' the only change in the script above would be in the \"build\" target:\n\n    <target name=\"build\" depends=\"compile,gen.hibernate.mappings,build.jar\"/>\n\nStill, the major issue here is that Ant must not execute\n\"gen.hibernate.mappings\" or \"build.jar\" if nothing has been compiled in the\nprevious step. IMHO, a good way to communicate that is via properties and\n<target if=\"x\">.\n\nJust for curiousity: why is 'depends' much faster? This particular build script\ncompiles 9 modules in about 30 secs. How much faster than <antcall> could\n'depends' be? Are we talking milliseconds? Seconds?\n\nUsing <dependset> can obviously not be faster because it has to check timestamps\non files. And since it removes target files it doesn't look like a good match\nanyways.\n\nI'd be happy to use Ant's existing mechanisms, but I don't see a straightforward\nsolution using its current capabilities. Hence the patch."}, {"count": 3, "tags": [], "bug_id": 28941, "attachment_id": null, "id": 57348, "time": "2004-05-13T13:21:27Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2004-05-13T13:21:27Z", "is_private": false, "text": "I can't say how much faster, but <antcall> is quite inefficient.  <macrodef> is the new fast way to do \nthe same type of thing - so I at least recommend switching to that.\n\nTasks like <uptodate> and the ant-contrib <outofdate> are the recommended ways to get dependency \nchecking for code generation bypassing - and this would allow you to accomplish what you want \nwithout touching <javac>."}, {"count": 4, "text": "I voted for this patch because it's a simple and useful addition. Even if you \nhave a smart task that does dependency checking, that tasks still has to rescan \nthe directories, which for large hierarchies is not free (especially on \nWindows, whose filesystem sucks, even NTFS).\n\nI have a registration step that follows compilation, and I could skip that \ncompletely (instead of scanning directories) based of the property.\n\nSomeone please put this patch in. Thanks, --DD", "bug_id": 28941, "is_private": false, "id": 57362, "time": "2004-05-13T14:00:39Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-05-13T14:00:39Z", "tags": [], "attachment_id": null}, {"count": 5, "tags": [], "creator": "tquas@yahoo.com", "text": "Dominique, you raised an interesting point. NTFS performance is bad enough, but\nI regularly see people placing their workspaces on NFS/Smaba-mounted home\ndirectories--simply because they get backuped. The patch significantly improves\nbuild performance in those scenarios.\n\nEric, this point alone should make your alarm bells go off since you seem to be\nvery focussed on build performance.", "id": 57388, "time": "2004-05-14T04:48:51Z", "bug_id": 28941, "creation_time": "2004-05-14T04:48:51Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 28941, "attachment_id": null, "is_private": false, "id": 57396, "time": "2004-05-14T10:18:50Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2004-05-14T10:18:50Z", "text": "I have no objections to this patch being applied, don't get me wrong.  I was merely offering acceptable \nalternatives.    "}, {"count": 7, "tags": [], "bug_id": 28941, "attachment_id": null, "text": "\nPlease just make sure the inmutability of properties is maintained.\nso if I have:\n\n  <property name=\"X\" value=\"foo\"/>\n  <javac .... onCompile=\"X\"/>\n  <echo message=\"${X}\"/>\n\nThe output will be \"foo\" no matter whether <javac/> compiled code or not.\n", "id": 57405, "time": "2004-05-14T11:40:32Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-14T11:40:32Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 28941, "attachment_id": null, "id": 57420, "time": "2004-05-14T15:56:01Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-05-14T15:56:01Z", "is_private": false, "text": "Why is <javac> special? All tasks should have an ability to set a property if they modified something."}, {"count": 9, "text": "Another possible workaround--<record> <javac>'s verbose output, then search the \nresulting file for the indication that/which files were (re)compiled...", "bug_id": 28941, "is_private": false, "id": 57424, "time": "2004-05-14T16:22:49Z", "creator": "mbenson@apache.org", "creation_time": "2004-05-14T16:22:49Z", "tags": [], "attachment_id": null}, {"count": 10, "text": "Javac is not special!!!!!\nNo task should be able to change the value of a property that already exist.\nThat is the definition of inmutability.\n\nThere is only one exception to this rule (that pass thru the cracks) and is\nsome p4counter task (or some other VCS). By the time the inmutability police\nnoticed (i.e., me) it was already out on releases and in use. So we had to let \nit go. \n\nSooooo, I just want to make sure it does not happens again.\n", "bug_id": 28941, "is_private": false, "id": 57433, "time": "2004-05-14T17:44:17Z", "creator": "j_a_fernandez@yahoo.com", "creation_time": "2004-05-14T17:44:17Z", "tags": [], "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 28941, "text": "I actualy wanted to say that every task should have a way to say that it did something, not just <javac>.", "id": 57437, "time": "2004-05-14T18:25:53Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-05-14T18:25:53Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "peterreilly@apache.org", "text": "I have committed this with a name change to \"updatedProperty\".\nThis feature may be added to <copy> and <jar> so the\nattribute name should be the same.", "id": 97408, "time": "2006-12-28T08:20:01Z", "bug_id": 28941, "creation_time": "2006-12-28T08:20:01Z", "is_private": false, "attachment_id": null}]
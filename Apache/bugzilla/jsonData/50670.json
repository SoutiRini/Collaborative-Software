[{"count": 0, "tags": [], "creator": "ocostet@zenprise.com", "attachment_id": null, "id": 143705, "time": "2011-01-27T08:45:43Z", "bug_id": 50670, "creation_time": "2011-01-27T08:45:43Z", "is_private": false, "text": "Since the tribes classes are loaded by the tomcat loader, if the messages\nsent through tribes are instances of classes defined in the webapp, attemps to\ndeserialize them will fail. AbstractReplicatedMap includes a mechanism for the\nAPI user to specify class loaders to be used when deserializing map entries.\nThis entry proposes a similar mechanism for the RpcChannel."}, {"count": 1, "tags": [], "creator": "ocostet@zenprise.com", "attachment_id": null, "id": 143706, "time": "2011-01-27T08:46:47Z", "bug_id": 50670, "creation_time": "2011-01-27T08:46:47Z", "is_private": false, "text": "Reproducing comments from https://issues.apache.org/bugzilla/show_bug.cgi?id=50648:\n\nFilip Hanik wrote:\n> 3.\n> The external loaders IMHO don't belong here.\n> For the applications that wish to provide custom class loading, I would simply\n> send messages using the ByteMessage class. That way you have full control over\n> what is happening.\n\nIt's true, you could use ByteMessages. Although as an API user, your code would\nbecome more clunky, and you'd lose the ability to quickly look up the message's\nclass.\nWouldn't it be nice to have, though? It makes things easier, cleaner and\ndoesn't add any significant overhead. Also, as things stand, the tribes API is\nsomewhat misleading in that it offers to send Serializable messages (methods\nlike Channel#send take Serializable arguments), when in practice all your app's\nclasses are excluded, no matter how Serializable they may be."}, {"attachment_id": 26560, "tags": [], "bug_id": 50670, "text": "Created attachment 26560\nsvn diff", "count": 2, "id": 143707, "time": "2011-01-27T08:47:54Z", "creator": "ocostet@zenprise.com", "creation_time": "2011-01-27T08:47:54Z", "is_private": false}]
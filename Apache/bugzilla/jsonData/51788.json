[{"count": 0, "tags": [], "bug_id": 51788, "text": "The method endTestSuite(JUnitTest) of interface org.apache.tools.ant.taskdefs.optional.junit.JUnitResultFormatter is called *AFTER* the output stream has been closed already by JUnitTestRunner. Thus, any output created in that method is not catched by the JUnit result formatting mechanism and not included in the result report.\n\nThis is very bad because our formatter should create output after all test of a test suite are done. And of course, that output shall go into the test report as well.", "id": 149108, "time": "2011-09-08T14:37:03Z", "creator": "paul.schwann@gmail.com", "creation_time": "2011-09-08T14:37:03Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "I'm afraid I don't follow you.\n\nThe stream the formatter is writing to is closed by the formatter, not\nJUnitTestRunner.  If you look at PlainJUnitTestFormatter for example you'll\nsee it closing out in endTestSuite.\n\nI guess you must be talking about a different output (System.out?) but\ndon't understand why you're formatter wouldn't be able to create output\nin the endTestSuite method (PlainJUnitTestFormatter or XMLJUnitResultFormatter\ndo so).", "id": 152008, "time": "2011-12-06T16:44:25Z", "bug_id": 51788, "creation_time": "2011-12-06T16:44:25Z", "is_private": false}, {"count": 2, "tags": [], "text": "Hi there,\n\nI only described what I see. \n\nWe have made our own implementation of a JUnitResultFormatter (required to create some extremely simplified CSV file containing the results for further post-processing). We incorporated that formatter in the ANT file executing the unit tests. It is called indeed but we've noticed that every output created in the #endTestSuite method doesn't show up.\n\nA reduced version of our implementation looks like this:\n\npublic class CsvJUnitResultFormatter implements JUnitResultFormatter {\n  private OutputStream os;\n\n  @Override public void setOutput(OutputStream out) { this.os = out; }\n\n  ...\n\n  @Override public void endTest(Test test) {\n    os.write(...); // works like a charm (since os is open and ready)\n  }\n\n  @Override public void endTestSuite(JUnitTest suite) throws BuildException {\n    os.write(...); // doesn't produce any output since os is closed already\n  }\n\n  ...\n}\n\nThe attempt to write something to the output stream in #endTestSuite() provided by the TestRunner doesn't produce the desired result. It works in all other methods of the interface (e.g. startTest, endTest etc.), though.\n\nOur investigation showed that the output stream provided by the test runner environment via #setOutput(...) is closed already once #endTestSuite is called.", "is_private": false, "id": 152047, "creation_time": "2011-12-07T09:27:20Z", "time": "2011-12-07T09:27:20Z", "creator": "paul.schwann@gmail.com", "bug_id": 51788, "attachment_id": null}, {"count": 3, "tags": [], "text": "Hmm, this is strange.  There must be something else going on in your case as all Ant internal formatters work that way and wouldn't work if the stream was closed.  See for example http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java", "is_private": false, "bug_id": 51788, "id": 152049, "time": "2011-12-07T11:23:06Z", "creator": "bodewig@apache.org", "creation_time": "2011-12-07T11:23:06Z", "attachment_id": null}]
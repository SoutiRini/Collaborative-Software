[{"count": 0, "tags": [], "text": "Investigating TIKA-2058, we discovered HeapByteBuffers are being cached unnecessarily into buffersToClean, because they need no special unmapping, when datasource is not writable.\n\nA single instance of FileBackedDataSource consumed 5.7GB of heap, triggering OOM.\n\nMore details on https://issues.apache.org/jira/browse/TIKA-2058\n\nPatch will be attached.", "attachment_id": null, "bug_id": 60140, "id": 193737, "time": "2016-09-15T00:13:46Z", "creator": "lfcnassif@gmail.com", "creation_time": "2016-09-15T00:13:46Z", "is_private": false}, {"count": 1, "tags": [], "creator": "tallison@mitre.org", "is_private": false, "text": "r1760816\n\nThank you!", "id": 193738, "time": "2016-09-15T00:20:26Z", "bug_id": 60140, "creation_time": "2016-09-15T00:20:26Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60140, "attachment_id": null, "id": 193739, "time": "2016-09-15T00:35:06Z", "creator": "lfcnassif@gmail.com", "creation_time": "2016-09-15T00:35:06Z", "is_private": false, "text": "POI is supposed to support/write to files larger than 2GB? If not, I can propose a new patch to reduce the number of mmapping when the file is writable."}, {"count": 3, "tags": [], "creator": "dominik.stadler@gmx.at", "is_private": false, "text": "Yes, it should be able, although we have at least one bug-entry stating that some versions of zip-implementations cause issues when opening the zipped-XML-based file formats. \n\nPlease create a separate Bug and attach the patch there so we can discuss it post-3.15 release.", "id": 193740, "time": "2016-09-15T07:13:45Z", "bug_id": 60140, "creation_time": "2016-09-15T07:13:45Z", "attachment_id": null}, {"text": "Luis Filip Nassif:\n\nHi did you have any progress on the patch to reduce the number of mmappings?\nWe get some OOM exception in FileBackedDataSource.\n\nTrying to create an NPOIFileSystem like this:\n\nresult = new NPOIFSFileSystem(file, false);\n\nThen reading entries from the file to compute a hash over all content and at the end appending an additional DocumentEntry.\n\nBut we get an OOMException when reading the data (the data is read piece-by-piece into a 1024 byte buffer and is not kept around).\n\nCaused by: java.io.IOException: Map failed\n\tat sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:940) [rt.jar:1.8.0_111]\n\tat org.apache.poi.poifs.nio.FileBackedDataSource.read(FileBackedDataSource.java:94) [poi-3.16-beta1.jar:3.16-beta1]\n\tat org.apache.poi.poifs.filesystem.NPOIFSFileSystem.getBlockAt(NPOIFSFileSystem.java:484) [poi-3.16-beta1.jar:3.16-beta1]\n\tat org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:169) [poi-3.16-beta1.jar:3.16-beta1]\n\t... 85 more\nCaused by: java.lang.OutOfMemoryError: Map failed\n\tat sun.nio.ch.FileChannelImpl.map0(Native Method) [rt.jar:1.8.0_111]\n\tat sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:937) [rt.jar:1.8.0_111]\n\t... 88 more", "tags": [], "creator": "marcus.lundblad@primekey.se", "is_private": false, "count": 4, "id": 196455, "time": "2017-01-26T15:12:05Z", "bug_id": 60140, "creation_time": "2017-01-26T15:12:05Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 60140, "attachment_id": null, "is_private": false, "id": 196551, "time": "2017-01-30T03:09:40Z", "creator": "lfcnassif@gmail.com", "creation_time": "2017-01-30T03:09:40Z", "text": "Hi Marcus,\n\nNo, I have not tried to write the patch, because the need to handle files larger than 2GB.\n\nAre you using a x64 jvm? Have you tried to increase ulimit system setting?"}]
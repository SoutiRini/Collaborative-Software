[{"count": 0, "tags": [], "bug_id": 23341, "attachment_id": null, "id": 44486, "creation_time": "2003-09-23T06:54:03Z", "time": "2003-09-23T06:54:03Z", "creator": "tonymorr@au1.ibm.com", "text": "I haven't checked the source but I'm gussing that the <copy> task uses some \nsort of java.io.Reader when performing filtering. The problem arises when I \nhave, let's say a javadoc directory that contains a zillion ASCII files and \none .gif file - the .gif file will get all screwed up by the filtering. I'd \nprefer not to have to <exclude name=\"**/*.gif\"/> as this leaves the build open \nto problems when, for example some other binary file type is placed into the \ndirectory to copy. For example, a userguide directory that contains ASCII files \nplus a few .gif files, I use the exclude on the .gif files and then I introduce \na .jpg file - I'd have to remember to exclude that file as well.", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 23341, "text": "It does and it is documented that way.  From <copy>'s manual page\n\n> Note: If you employ filters in your copy operation, you should limit the copy to\n> text files. Binary files will be corrupted by the copy operation.", "count": 1, "id": 44497, "time": "2003-09-23T11:28:46Z", "creator": "bodewig@apache.org", "creation_time": "2003-09-23T11:28:46Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 23341, "text": "So it does, my apologies.", "count": 2, "id": 44540, "time": "2003-09-23T22:13:00Z", "creator": "tonymorr@au1.ibm.com", "creation_time": "2003-09-23T22:13:00Z", "is_private": false}]
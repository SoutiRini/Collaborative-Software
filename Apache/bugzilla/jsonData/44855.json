[{"count": 0, "tags": [], "creator": "heilmann.marcus@gmx.de", "text": "Hi,\n\nI've a little issue to discuss regarding sticky-sessions, which could result in very high loads on the backend-servers.\n\nAfter changing the lbset of a worker to a lower one (eg. from 1 to 0), it will receive a large number of requests. This is because all requests (with and without sticky-session) are counted the same way.\nThis would also happen if a worker left an unusable-state (not tested, but its the same principle).\n\nYou can find an example at the end of this posting.\n\n\nAs already mentioned in the sourcecode (file: mod_proxy_balancer.c, function: proxy_balancer_pre_request), this is an open issue:\n             * TODO: Abstract the below, since this is dependent\n             *       on the LB implementation\n             */\n\nPossible solutions for the sticky-session issue:\n\n1) Configurable counting of lbstatus\n   - New proxy-balancer option: lbmethod_counting=[all|new|(sticky?)]\n     all: the current behaviour (default)\n     new: only new sessions will modify the lbstatus\n     sticky: only sticky session will modify the lbstatus <- useful?\n\n  Changes needed:\n     mod_proxy_balancer.c (proxy_balancer_pre_request, find_best_by* <- only for 'sticky')\n     mod_proxy.h (struct proxy_balancer)\n     and a few other files to read the new config-parameter\n\n\n2) Implementation of a \"soft fade-in\". After changes to lbset, error-states, ... a soft fade-in-flag will be set.\n   For a defined period of time, the counting of lbstatus will be reduced to new sessions.\n   - New proxy-balancer option: lbmethod_fadeintime=<seconds int>\n     0 : the current behaviour (default)\n     >0: fadeintime\n   \n   Changes needed:\n     mod_proxy_balancer.c (proxy_balancer_pre_request)\n     mod_proxy.h (struct proxy_balancer, struct proxy_worker_stat:+ apr_time_t softin_time)\n     all places where lbset and error-states are modified\n     and a few other files to read the new config-parameter\n\n\nMy current favorite is solution 1), because there is less code to modify and it would meet my requirements.\n\nWhile digging around in the sourcecode I've also found a little flaw within that TODO-Section:\nlbsets aren't handled at all. So the lbstatus for all workers in all lbsets are modified, which would result in unbeautiful values of lbstatus (e.g. -1.000.000 : -1.000.000 : +2.000.000)\nThis little patch could fix that flaw:\n             * TODO: Abstract the below, since this is dependent\n             *       on the LB implementation\n             */\n           -  if (PROXY_WORKER_IS_USABLE(workers)) {\n           + if (PROXY_WORKER_IS_USABLE(workers) && workers->s->lbset == runtime->s->lbset) {\n \n\n\nWhat do you think about it?\n\n\nCiao - Marcus\n\n\n\n\n\n\nExample:\n- 3 workers with sticky-session (a, b, c)\n- 1 new session per second with 50(+1) requests over 300 seconds\n- initial lbsets: a:0, b:0, c:1\n\nAfter changing the lbset of worker c to 0, the lbstatus will be cleared (recalc_factors()). So we start at 0.\n\n// all new session will go to c\nSecond  :    0\nReqDone : a=  0.00, b=  0.00, c=   0.00\nlbstatus: a=  0.0, b= -0.0, c=  0.0\nSessions: a= 150.00, b= 150.00, c=   0.00\n\nSecond  :   60\nReqDone : a= 1378.58, b= 1367.42, c= 365.00\nlbstatus: a= -1024.7, b= -991.3, c= 2016.0\nSessions: a= 120.50, b= 119.50, c=  60.00\n\nSecond  :  180\nReqDone : a= 3183.58, b= 3152.42, c= 2895.00\nlbstatus: a= -319.7, b= -226.2, c= 546.0\nSessions: a=  60.50, b=  59.50, c= 180.00\n\n// since now all new session will go to a + b\n// but we are also losing old-session\nSecond  :  192 \nReqDone : a= 3298.08, b= 3264.92, c= 3280.00\nlbstatus: a= -51.2, b= 48.2, c=  3.0\nSessions: a=  54.50, b=  53.50, c= 192.00\n\n// reached break-even point: c loses sessions\nSecond  :  301\nReqDone : a= 4316.83, b= 4317.33, c= 6767.83\nlbstatus: a= 2451.5, b= 2450.0, c= -4901.5\nSessions: a=  54.00, b=  55.00, c= 191.00\n\n// till c has 0 active sessions\nSecond  :  575\nReqDone : a= 9792.00, b= 9792.00, c= 9792.00\nlbstatus: a=  0.0, b= -0.0, c=  0.0\nSessions: a= 150.00, b= 150.00, c=   0.00\n\n// now we have a similar situation to second 0", "id": 115774, "time": "2008-04-22T10:51:42Z", "bug_id": 44855, "creation_time": "2008-04-22T10:51:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "alex@edreams.com", "text": "Hi Marcus\n\nI've the same problem us you reported a long time ago\n\nBalancerMembers with loadfactor=1 and lbset=0\n\nI use lbset=1 to stop sending new sessions to a node. (node maintenance)\n\nA node with lbset=1 no receive traffic (only sticky sessions), but when lbset=0 the node receive a lot of traffic instead of continue a round robin balancing. It's seems mod_proxy try to reach the same level of requests as others nodes running all time. Finally the node it's overloaded due to a lot of traffic, while others nodes are idle.\n\nI think the option 1 would be great for me\n\n- New proxy-balancer option: lbmethod_counting=[all|new|(sticky?)]\n\nDo you fix the problem ?\n\nPlease let me know\n\nThanks \n\nalex", "id": 144215, "time": "2011-02-11T21:50:25Z", "bug_id": 44855, "creation_time": "2011-02-11T21:50:25Z", "is_private": false, "attachment_id": null}]
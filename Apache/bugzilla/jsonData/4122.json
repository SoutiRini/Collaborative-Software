[{"count": 0, "tags": [], "text": "If we define for exemple:", "attachment_id": null, "bug_id": 4122, "id": 6620, "time": "2001-10-12T07:01:09Z", "creator": "eric.chastan@netcelo.com", "creation_time": "2001-10-12T07:01:09Z", "is_private": false}, {"text": "Sorry, I made a mistake (hitting enter).\n\nIf you defined in the property file: log4j.logdir=${tomcat.home} and then using \nlog4j.logdir when defining a roll-over file appender then the following error \nis raised: log4j:ERROR setFile(null,true) call failed.\njava.io.FileNotFoundException: ${tomcat.home}/logs/3/ses.logs (No such file or \ndirectory)\n        at java.io.FileOutputStream.openAppend(Native Method)\n        at java.io.FileOutputStream.<init>(FileOutputStream.java:100)\n        at java.io.FileWriter.<init>(FileWriter.java:52)\n        at org.apache.log4j.FileAppender.setFile(FileAppender.java:284)\n        at org.apache.log4j.RollingFileAppender.setFile\n(RollingFileAppender.java:198)\n        at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:239)\n        at org.apache.log4j.config.PropertySetter.activate\n(PropertySetter.java:247)\n        at org.apache.log4j.config.PropertySetter.setProperties\n(PropertySetter.java:123)\n        at org.apache.log4j.config.PropertySetter.setProperties\n(PropertySetter.java:87)\n        at org.apache.log4j.PropertyConfigurator.parseAppender\n(PropertyConfigurator.java:637)\n        at org.apache.log4j.PropertyConfigurator.parseCategory\n(PropertyConfigurator.java:595)\n        at org.apache.log4j.PropertyConfigurator.configureRootCategory\n(PropertyConfigurator.java:502)\n        at org.apache.log4j.PropertyConfigurator.doConfigure\n(PropertyConfigurator.java:410)\n        at org.apache.log4j.PropertyConfigurator.doConfigure\n(PropertyConfigurator.java:436)\n        at org.apache.log4j.helpers.OptionConverter.selectAndConfigure\n(OptionConverter.java:455)\n        at org.apache.log4j.Category.<clinit>(Category.java:146)\n\n\nEric.\n", "tags": [], "bug_id": 4122, "is_private": false, "count": 1, "id": 6621, "time": "2001-10-12T07:05:25Z", "creator": "eric.chastan@netcelo.com", "creation_time": "2001-10-12T07:05:25Z", "attachment_id": null}, {"count": 2, "text": "I found a very simple correction: in class ...helpers.OptionConverter, in method \nsubstVars when a ${variable} is found and a remplacement value have been found \nit's just necessary to recall substVars.\nThe problem is that the StringBuffer must be a stack variable of this method. \nNeverless I thing that the global buffer is real thread-safe even if this code \nis run only at initialization peraps there is some case when two threads used \nit.\n\nSo the correction is like this:\n\npublic static\n  String substVars(String val, Properties props) throws\n                        IllegalArgumentException \n    {\n         StringBuffer sbuf = new StringBuffer();\n        ...\n\n                    if(replacement != null) \n                        sbuf.append(substVars(replacement,props));\n                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        ...\n    }\n\nEric.", "bug_id": 4122, "attachment_id": null, "id": 6631, "time": "2001-10-12T08:37:24Z", "creator": "eric.chastan@netcelo.com", "creation_time": "2001-10-12T08:37:24Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "!!@@ Sorry, Again a return that send the form before I checked it !!!!\n!!   Forget last comment here is the good version: !!\n\nI found a very simple correction: in class ...helpers.OptionConverter, in method \nsubstVars when a ${variable} is found and a replacement value have been found \nit's just necessary to recall substVars.\nThe problem is that the StringBuffer must be a stack variable of this method. \nNever less I thing that the global buffer is real not thread-safe even if this \ncode is run only at initialization perhaps there is some case when two threads \nused \nit.\n\nSo the correction is like this:\n\npublic static\n  String substVars(String val, Properties props) throws\n                        IllegalArgumentException \n    {\n         StringBuffer sbuf = new StringBuffer();\n        ...\n\n                    if(replacement != null) \n                        sbuf.append(substVars(replacement,props));\n                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        ...\n    }\n\nEric.", "attachment_id": null, "id": 6632, "creation_time": "2001-10-12T08:42:29Z", "time": "2001-10-12T08:42:29Z", "creator": "eric.chastan@netcelo.com", "bug_id": 4122, "is_private": false}, {"count": 4, "text": "\nSorry, I don't understand the problem.", "bug_id": 4122, "attachment_id": null, "id": 14791, "time": "2002-04-25T21:43:44Z", "creator": "ceki@apache.org", "creation_time": "2002-04-25T21:43:44Z", "tags": [], "is_private": false}, {"count": 5, "text": "With the current implementation:\n\n- This is valid\nlog4j.logdir=not_a_var/work\nlog4j.appender.RollOverFile.File=${log4j.logdir}/logs/server.logs\n\n- This doesn't work:\nlog4j.logdir=${tomcat.home}/work\nlog4j.appender.RollOverFile.File=${log4j.logdir}/logs/server.logs\n\nThe problem is that when substituting log4j.logdir the implementation doesn't \ntry to expand the result. So log4j.logdir is expanded with ${tomcat.home} \ninstead of the value of ${tomcat.home}.\n\nEric.", "bug_id": 4122, "attachment_id": null, "id": 14814, "time": "2002-04-26T06:55:30Z", "creator": "eric.chastan@netcelo.com", "creation_time": "2002-04-26T06:55:30Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "creator": "ceki@apache.org", "attachment_id": null, "id": 15797, "time": "2002-05-09T13:36:20Z", "bug_id": 4122, "creation_time": "2002-05-09T13:36:20Z", "is_private": false, "text": "\nThe latest version of log4j in our CVS repository adds support for recursive \nvariable substitution. It will become available in 1.2 (final). Thanks!"}]
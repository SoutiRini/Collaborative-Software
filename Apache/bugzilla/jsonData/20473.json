[{"count": 0, "tags": [], "bug_id": 20473, "is_private": false, "text": "The connection between apache and tomcat is not encrypted.\n\nThis means if your network is breached and a packet sniffer installed then\nyour credit card details / passwords etc can be picked up even though the \nconnection to apache was https & encrypted.\n\nThis tar adds an extra channel which provides a TLS encrypted channel between\napache and tomcat. \nWith this encrypted channel this means that data transfer between apache and\ntomcat is re-encryted.\n\nThe channel adds in the ability to do the following type of connections.\n\ntomcat & apache communicate securly but not authenticating each other.\nTomcat will only let in connections from a host who's cert has been signed by a\nCA it trusts.\nApache will only connect to a tomcat whos CA it trusts\nBoth apache and tomcat will only allow connections from & to hosts that it\ntrusts their CA.\n\nNote: This trusting has NOTHING to do with the browsers connection to apache.\nBoth apache and tomcat will pass nothing to either end about this secure\nconnection - it is as transparent as if it were a normal socket connection.\n\nNote - 2: You need jsse.jar and jcert.jar for tomcat and openssl for apache. \nBest if you have setup apache with ssl ( otherwise whats the point eh ?)\n\nI have this running with jdk1.4 on linux. Tested with both apache 1.3 and apache\n2. I've used tomcat 4.1.24 on the tomcat end. Although I don't see why it won't\nwork with any tomcat 4.x or tmocat 5.x versions. TC3 i don't know!", "id": 38334, "time": "2003-06-04T11:04:02Z", "creator": "david.cassidy@db.com", "creation_time": "2003-06-04T11:04:02Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 20473, "is_private": false, "text": "Created attachment 6621\ntar gz of files needed both patches and new files (diff -c)", "id": 38335, "time": "2003-06-04T11:05:26Z", "creator": "david.cassidy@db.com", "creation_time": "2003-06-04T11:05:26Z", "attachment_id": 6621}, {"count": 2, "tags": [], "bug_id": 20473, "text": "Implementing encryption on this link will use too much resources, on both\nApache and Tomcat side.\n\nIf you absolutly need a cyphered support, I suggest you to use a ssh tunnel for \nsuch purporses.", "id": 38336, "time": "2003-06-04T11:08:32Z", "creator": "hgomez@apache.org", "creation_time": "2003-06-04T11:08:32Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 20473, "text": "So, Let me get this right.\nIn order to use *less* resources we need to twice the amount of work ? \n( ie on box a run apache & sshtunnel and on box b run tomcat & sshtunnel)\n\nThis doesn't make sense to me.\nHaving tested this on a p2 300 (both ends) it doesn't add much overhead & to the\npoor box. AJP13 is very good with keep-alive connections. The majority of the\noverhead is on the initial connection. The encryption whilst the connection is\nalive is relativly low.\n\nThat being said I can understand that the average user of Tomcat & apache\ndoesn't care too much about the security level between apache & tomcat. The fact\nthat they have a secure site with an insecure connecting layer won't bother them.\n\nHowever for the bigger/enterprise user of this technology, this might be of\nconcern. Security teams will be interrested in this.\n\nOf course if you have two machines on the open net and you are taking credit\ncard details etc please think about the implications.\n\nI suggest that in the same way that Java has the 'javax.' classes we should\nconsider a level of extensions for mod_jk2. After all *ALL* the work has been\ndone it's all here you just need to use it.\n\n", "id": 38341, "time": "2003-06-04T12:07:06Z", "creator": "david.cassidy@db.com", "creation_time": "2003-06-04T12:07:06Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 20473, "attachment_id": null, "is_private": false, "id": 38342, "time": "2003-06-04T12:16:08Z", "creator": "hgomez@apache.org", "creation_time": "2003-06-04T12:16:08Z", "text": "Using a ssh tunnel consume less resource SINCE you do crypto with\nnative code on both side, whereas in you're solution, we're doing crypto on\nApache (native) and Tomcat (java).\n\nIn many configuration, Apache and Tomcat are on the same box, so the packet are \nlocal and when tomcats are remotes, which is the case for large deployment, the \nsecurity SHOULD BE HANDLED for each configuration/requirement.\n\nI found a little crasy to see HTTP SSL requests, decryped by Apache, then \nreencrypted by Apache for Tomcat (in ajp13) and then redecrypted by Tomcat.\n\nAlso you shoudn't use bugzilla for such reports.\n\nIt's not an error but a missing feature so the request should be\nsent on tomcat-dev where developpers could respond to you.\n\n\n"}]
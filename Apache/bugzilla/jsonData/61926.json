[{"count": 0, "attachment_id": 35627, "creator": "gary@cpanel.net", "text": "Created attachment 35627\nPatch to remove SIGTERM from server/log.c\n\nIf you configure piped logging to pipe to a program, and you perform a lot of graceful restarts within a short amount of time, the pipe will emit EPIPE because of this section of code in server/log.c\n\nstatic apr_status_t piped_log_cleanup(void *data)\n{\n    piped_log *pl = data;\n \n    if (pl->pid != NULL) {\n        apr_proc_kill(pl->pid, SIGTERM);\n    }\n    return piped_log_cleanup_for_exec(data);\n}\n\nThe above will simply SIGTERM the pipe'd program no matter what it is doing, such as in the middle of a write to the pipe which throws this:\n\n[Sat Mar 04 14:02:09.728865 2017] [log_config:warn] [pid 21677] (32)Broken pipe: [client 192.168.130.63:38670] AH00646: Error writing to |/usr/local/cpanel/bin/splitlogs --main=whm-11-62-c7.vm.local --suffix=-bytes_log\n[Sat Mar 04 14:02:09.728947 2017] [log_config:warn] [pid 21677] (32)Broken pipe: [client 192.168.130.63:38670] AH00646: Error writing to |/usr/local/cpanel/bin/splitlogs --main=whm-11-62-c7.vm.local --mainout=/etc/apache2/logs/access_log\n\nWhen a graceful is performed, the pipe'd program will receive EOF and it will die anyways. SIGTERM seems too drastic and will likely result in data loss (logging loss) \n\nTo reproduce this issue, simply grab a 100MB file somewhere and configure Piped Logging, then do this:\n\nab -t 120 -c 50 http://local.server.ip/100MB.testfile.zip \n\nWhile that is running, then do something like this, ie:\n\nwhile true ; do apachectl graceful ; sleep 1 ; done \n\nCheck Apache's error log for EPIPE (Broken Pipe) \n\nThe patch removes SIGTERM from the piped logging maintenance, since it will go away anyway. This corrects the issue.\n\nAnother possible option is a flag to either kill piped programs or not kill them, but I did not research that too much.", "id": 202907, "time": "2017-12-24T21:31:38Z", "bug_id": 61926, "creation_time": "2017-12-24T21:31:38Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "I wonder what the ramifications of possible overlapped piped loggers are? I'd be hesitant to just flip everyone over without a way to go back. At least with the signal present it can be handled or ignored.", "is_private": false, "bug_id": 61926, "id": 202910, "time": "2017-12-25T13:06:17Z", "creator": "covener@gmail.com", "creation_time": "2017-12-25T13:06:17Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 61926, "text": "I was unable to reproduce multiple piped loggers being spawned with my patch, however there's still the possibility that behavior could happen.\n\nAnother option is I suppose the piped loggers could be patched to ignore SIGTERM which would still allow them to die during a EOF, but I did not research that too much.", "id": 202911, "time": "2017-12-25T20:17:21Z", "creator": "gary@cpanel.net", "creation_time": "2017-12-25T20:17:21Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 58859, "is_private": false, "id": 187659, "attachment_id": null, "creator": "knst.kolinko@gmail.com", "creation_time": "2016-01-14T11:17:36Z", "time": "2016-01-14T11:17:36Z", "text": "There was an enhancement request (bug 57808 \"Don't preload all charsets\").\nI want to implement a similar thing, but as a security / paranoid feature.\n\nThe issue: A client request can specify an encoding (charset) name. This charset is used to parse request parameters (the query string and parameters in the body of a POST request).\n\nThe problem is that a Java Runtime supports many charsets, but I really use only a handful of them (ISO-8859-1, US-ASCII, UTF-8, and several charsets used in my country).\n\nThere exists such nasty charset as UTF-7 [1], and some old browser was \"nice\" to implement it. Luckily the current versions of Java do not implement it (tested Sun/Oracle Java 5/6/7/8), but I really do not know about all of those implemented charsets, and there are some exotic ones among them and some experimental ones (X-*).\n\nProposal\n==========\n1. A new system property with the following name:\norg.apache.tomcat.SUPPORTED_CHARSETS\n\n2. The following behaviour:\nIf this property is set to a non-empty string, then in the static initialization block of B2CConverter use the character sets named in this property to populate a Set<Charset> that will be used instead of Charset.availableCharsets() in initialization loop.\n\nFor example, if org.apache.tomcat.SUPPORTED_CHARSETS=ISO-8859-1,UTF-8 then Tomcat will only support those two charsets and all aliases of their names. An attempt to use any other character set name will result in an UnsupportedEncodingException.\n\nFor Java 8u66 and those two charsets it gives the following allowed names:\n\nISO-8859-1\n819 (alias for ISO-8859-1)\nISO8859-1 (alias for ISO-8859-1)\nl1 (alias for ISO-8859-1)\nISO_8859-1:1987 (alias for ISO-8859-1)\nISO_8859-1 (alias for ISO-8859-1)\n8859_1 (alias for ISO-8859-1)\niso-ir-100 (alias for ISO-8859-1)\nlatin1 (alias for ISO-8859-1)\ncp819 (alias for ISO-8859-1)\nISO8859_1 (alias for ISO-8859-1)\nIBM819 (alias for ISO-8859-1)\nISO_8859_1 (alias for ISO-8859-1)\nIBM-819 (alias for ISO-8859-1)\ncsISOLatin1 (alias for ISO-8859-1)\n\nUTF-8\nunicode-1-1-utf-8 (alias for UTF-8)\nUTF8 (alias for UTF-8)\n\nThis feature applies only to the set of charsets used via B2CConverter class, that is used internally by Tomcat. I think that Jasper does not use it, so it does not apply to the encoding used to write source code of JSP pages.\n\nThe difference with enhancement proposed in bug 57808 is that all unnamed charsets are not supported, instead of loading them lazily.\n\n\nSetCharacterEncodingFilter \n============================\nI should also note the following:\n\nThe issue of charset name provided by client can also be solved by using a \n org.apache.catalina.filters.SetCharacterEncodingFilter\nthat is configured with initialization parameter ignore=\"true\".\n\nThis filter is available in all current Tomcat versions (6/7/8/9). Some web frameworks (e.g. Spring) also provide similar filters.\n\nIf a web application renders all its pages in UTF-8, then it can expect that all requests to it to use UTF-8 as well.\n\n\n[1] https://en.wikipedia.org/wiki/UTF-7\n[2] http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#Set_Character_Encoding_Filter"}, {"count": 1, "tags": [], "bug_id": 58859, "attachment_id": null, "is_private": false, "id": 187670, "time": "2016-01-14T13:36:26Z", "creator": "remm@apache.org", "creation_time": "2016-01-14T13:36:26Z", "text": "That's not a bad idea, but is it really practical in production ? Also historically, UTF-8 has caused the most security issues from what I know, and it isn't going to be possible to disable it.\n\n+1 anyway, but only as a system property (as you proposed) since it is too global + specific."}, {"count": 2, "tags": [], "bug_id": 58859, "is_private": false, "id": 187680, "creation_time": "2016-01-14T15:45:02Z", "time": "2016-01-14T15:45:02Z", "creator": "chris@christopherschultz.net", "text": "What is the issue here? IIRC, Tomcat has a cache of Charsets it will use, so a client specifying a little-used charset will just thrash that cache a bit.", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58859, "attachment_id": null, "id": 187688, "creation_time": "2016-01-14T17:20:47Z", "time": "2016-01-14T17:20:47Z", "creator": "knst.kolinko@gmail.com", "text": "Chris, the cache has evolved into a static preloaded set some time ago (since r1140156), it is not updated at runtime.\n\nThe issue here is that client-provided charset name is used for processing both of client-provided data and application-provided data (e.g. forward() processing code touched by the recent fix to bug 58836).\n\nApplication-provided data usually has some assumptions that the client-provided charset is sane (e.g. superset of US-ASCII). I just am not sure that this assumption is true for all charsets implemented by a JRE - I do not know all of them. E.g. current Java 8 implements 170 charsets, some of which have names starting with \"x-\".\n\nIt is easy to enforce the charset (via SetCharacterEncodingFilter), but that will break the whole ability to specify a charset for a client.\n\nIt is possible to implement a similar Filter that checks the provided charset name (probably over some whitelist).", "is_private": false}]
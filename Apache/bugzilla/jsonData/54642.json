[{"count": 0, "tags": [], "bug_id": 54642, "attachment_id": null, "id": 165667, "time": "2013-03-06T10:04:57Z", "creator": "eugene.makar@gmail.com", "creation_time": "2013-03-06T10:04:57Z", "is_private": false, "text": "Prior to HostConfig#7.0.3 it had undeloyApps() called in its stop() method. That gave nice opportunity (ootb, no custom changes) to have Context configured in server.xml to be undeployed only after other Context's (from xmlBase, etc) are undeployed. Here actually HostConfig.undeployApps() was undeploying these xmbBase' apps, whereas remaining app from server.xml was undeployed later (afair with StandardHost).\nAnd starting with HostConfig#7.0.3 undeployApps() method is removed and nothing similar is invoked from stop() method. And now any Context is undeployed just as it comes in HashMap in ContainerBase at once (i.e. no 'pre' undeploying with HostConfig).\nSo why such change was performed? Could you please say is there another opportunity to control undeploy order (it is useful for me to have some control over cooperating apps)? I'd like to have described behavior returned back.\nThanks."}, {"count": 1, "tags": [], "creator": "eugene.makar@gmail.com", "is_private": false, "id": 165671, "creation_time": "2013-03-06T10:51:26Z", "time": "2013-03-06T10:51:26Z", "bug_id": 54642, "text": "I'm guessing such change (deleting undployApps()) was performed due to moving to multi-threaded shutdown. If so (and not only in that case) I think a possible fix to achieve desired behavior is to swtich ContainerBse.children to TreeMap or any ordered and reverse after Containers are started (or prior to their stopage). In default case (startStopThreads=1) that would work.\nThe idea is that once apps are deployed in certain order then it could be expected they are undeployed in reversed order (or it could be a nice configurable option)\nThanks.", "attachment_id": null}, {"count": 2, "tags": [], "text": "Rather than guess why this change was made why not look at the svn history for HostConfig. This is *open* source after all.\n\nThis has nothing to do with parallel deployment.", "is_private": false, "id": 165699, "creator": "markt@apache.org", "time": "2013-03-06T21:01:06Z", "bug_id": 54642, "creation_time": "2013-03-06T21:01:06Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 54642, "attachment_id": null, "id": 165700, "time": "2013-03-06T21:06:22Z", "creator": "markt@apache.org", "creation_time": "2013-03-06T21:06:22Z", "is_private": false, "text": "This method will not be restored.\n\nWeb applications are meant to be independent. A design that requires a specific shutdown order goes against one of the core principles of the Servlet specification.\n\nIf you really want to control the order web applications are stopped (and I'd suggest your time would be better spent fixing the applications that have this requirement) then you'll need to use a custom Host implementation that overrides ContainerBase#stopInternal(). If you require assistance on how to do this, the Tomcat users mailing list is the correct forum for any questions you have."}]
[{"count": 0, "tags": [], "text": "Created attachment 34040\nreproducer app\n\nThe WebDAV MOVE operation doesn't seem to work in tomcat8 or tomcat8.5 (it works fine in tomcat7) on Windows. Here are some reproduction steps and a reproducer to show the behavior. Note that this only occurs on Windows; I also tested on Linux and it works fine there, so I think something is wrong at the OS/java level here.\n\nReproduction steps:\n\n1) Install tomcat 8 on Windows\n2) Add the webdav role and a user with that role to your conf/tomcat-users.xml\n3) Deploy the attached webdav test application (webdavapp.war)\n4) Start tomcat and make the following MOVE request:\n\ncurl -i -X MOVE --header \"Destination: http://localhost:8080/webdavapp/webdav/hello2.txt\" --user \"tomcat:tomcat\" http://localhost:8080/webdavapp/webdav/hello.txt\n\n5) Observe the 500 response\n\nActual Results:\n\nHTTP/1.1 500 Internal Server Error\nServer: Apache-Coyote/1.1\nCache-Control: private\nExpires: Wed, 31 Dec 1969 16:00:00 PST\nContent-Type: text/html;charset=utf-8\nContent-Language: en\nContent-Length: 1040\nDate: Thu, 14 Jul 2016 22:35:32 GMT\nConnection: close\n\nExpected Results (as seen on Linux):\n\nHTTP/1.1 201 Created\nServer: Apache-Coyote/1.1\nCache-Control: private\nExpires: Wed, 31 Dec 1969 19:00:00 EST\nContent-Length: 0\nDate: Thu, 14 Jul 2016 18:42:30 GMT\n\nAdditional Information:\n\nI did spend some time tracing this in jdb and found that the MOVE is partially working...it successfully copies the resource to the destination and but it is failing to delete the old resource. I think I tracked the failure down to the following block within o.a.c.servlets.WebdavServlet.doMove():\n\n1745                if(!resource.isDirectory()) {\n1746                    if(!resource.delete()) {\n1747                        resp.sendError(WebdavStatus.SC_INTERNAL_SERVER_ERROR);\n1748                        return false;\n\nThe problem occurs in the (o.a.c.webresources.CachedResource) resource.delete() call; it returns false and doesn't delete the resource for some reason (no exception is thrown, but the errorState flag is set to 1 on the response). Furthermore, if you make the same exact call again it will successfully delete the previously copied destination, copy the original to the destination again, and then fail to delete the original throwing the 500. I can't understand why the resource.delete() can fail because it passes through to what ends up being a o.a.c.webresources.FileResource.delete(). I compared the successful deletion's FileResource instance to the unsuccessful deletion and the instances match almost exactly (path's differ which is expected). I'm not sure what could be at play here unless its at the JVM level.", "attachment_id": 34040, "id": 192387, "creator": "csutherl@apache.org", "time": "2016-07-14T19:21:27Z", "bug_id": 59859, "creation_time": "2016-07-14T19:21:27Z", "is_private": false}, {"count": 1, "tags": [], "text": "Windows file locking?", "is_private": false, "id": 192392, "creator": "1983-01-06@gmx.net", "time": "2016-07-15T07:22:35Z", "bug_id": 59859, "creation_time": "2016-07-15T07:22:35Z", "attachment_id": null}, {"count": 2, "text": "> Windows file locking?\n\nI'm no Windows expert, but I don't see how the issue could be file locking because it works in tomcat7 on the same machine with the same configuration/test application. I tested tomcat7 right before I tested tomcat8.\n\nAdditionally, I tested this with java 1.7.0u80 and 1.8.0u92 (both are the latest from jdk releases from Oracle) and the issue remains.", "creator": "csutherl@apache.org", "attachment_id": null, "id": 192399, "time": "2016-07-15T12:11:54Z", "bug_id": 59859, "creation_time": "2016-07-15T12:11:54Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "text": "(In reply to Coty Sutherland from comment #2)\n> > Windows file locking?\n> \n> I'm no Windows expert, but I don't see how the issue could be file locking\n> because it works in tomcat7 on the same machine with the same\n> configuration/test application. I tested tomcat7 right before I tested\n> tomcat8.\n> \n> Additionally, I tested this with java 1.7.0u80 and 1.8.0u92 (both are the\n> latest from jdk releases from Oracle) and the issue remains.\n\nJust to be sure: you tested the same setup (including the exact same DAV-mounted directory structure) on both Tomcat 7 and Tomcat 8 and only Tomcat 8 fails? So, no file-permissions issues or anything like that?\n\nThe Resources implementation has been changed quite a bit between Tomcat 7 -> 8, so it's almost certainly a bug buried in there.", "id": 192401, "time": "2016-07-15T13:52:39Z", "bug_id": 59859, "creation_time": "2016-07-15T13:52:39Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 59859, "is_private": false, "count": 4, "id": 192402, "time": "2016-07-15T14:12:47Z", "creator": "csutherl@apache.org", "creation_time": "2016-07-15T14:12:47Z", "text": "> Just to be sure: you tested the same setup (including the exact same\n> DAV-mounted directory structure) on both Tomcat 7 and Tomcat 8 and only\n> Tomcat 8 fails? So, no file-permissions issues or anything like that?\n\nCorrect. I downloaded both versions, unzipped them in the same folder, made the same configuration changes to add the role/user, deployed the same application, and made the exact same request from my hypervisor to both (I started and stopped each in between, they weren't running at the same time)."}, {"count": 5, "tags": [], "bug_id": 59859, "attachment_id": null, "id": 192417, "time": "2016-07-15T19:43:03Z", "creator": "csutherl@apache.org", "creation_time": "2016-07-15T19:43:03Z", "is_private": false, "text": "I updated the o.a.c.webresources.FileResource class and replaced the resource.delete() (because File.delete() throws no exceptions when it fails) with the following block:\n\n110         try {\n111             Path p = resource.toPath();\n112             Files.delete(p);\n113             return true;\n114         } catch (Exception e) {\n115             log.error(\"There was an exception! \" + e.getMessage());\n116             return false;\n117         }\n\nTrying my test with this in place yields an the following message in the catalina.log:\n\norg.apache.catalina.webresources.FileResource.delete There was an exception! C:\\apache-tomcat-8.0.36\\webapps\\webdavapp\\hello.txt: The process cannot access the file because it is being used by another process.\n\nThe process owning the file handle is the java process that tomcat is running in. It looks like tomcat doesn't grab the file handle until the request is made, but then never releases the handle whereas tomcat7 does (or never gets it)."}, {"attachment_id": null, "tags": [], "bug_id": 59859, "text": "OK, after a lot of poking around I think I found a solution :D\n\nI figured out that the problem was with a FileInputStream. Tomcat7 doesn't use FIS' in the webresources package, but tomcat8+ does. I determined this by noticing that that the file handle was hanging around (via lsof) after the MOVE call is made. Then I took a look at a heap dump taken after the issue (before a GC removed the reference) and found the FIS object in a Finalizer. After that, I started in the move method and stepped through the method with jdb while periodically running lsof to see when the handle was created. This led me to java/org/apache/catalina/servlets/WebdavServlet.java:1679 where a FIS was being retrieved from the resource, but not closed. My patch drops the FIS into a variable and then adds a close call after the write method is invoked to remove the handle. I don't think the write method should close the FIS since the FIS din't originate within the write method, which is why I put the close after the write returned. \n\nI verified that this doesn't leave a handle open on linux and that the move operation from my reproduction steps works on both linux and windows after the patch is applied.\n\nPlease review and provide feedback.", "count": 6, "id": 192699, "time": "2016-07-28T18:18:58Z", "creator": "csutherl@apache.org", "creation_time": "2016-07-28T18:18:58Z", "is_private": false}, {"count": 7, "tags": [], "text": "Created attachment 34077\nFIS.close() patch", "attachment_id": 34077, "id": 192700, "creator": "csutherl@apache.org", "time": "2016-07-28T18:19:28Z", "bug_id": 59859, "creation_time": "2016-07-28T18:19:28Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 59859, "attachment_id": 34078, "is_private": false, "id": 192702, "time": "2016-07-28T20:05:34Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-07-28T20:05:34Z", "text": "Created attachment 34078\nUse try-with and don't throw IOException while closing InputStream\n\nClose InputStream, but don't throw IOException when close() fails. Log the exception (that hopefully never gets thrown)."}, {"count": 9, "text": "This issue is #89595 in coverity :)", "creator": "felix.schumacher@internetallee.de", "is_private": false, "id": 192703, "time": "2016-07-28T20:06:30Z", "bug_id": 59859, "creation_time": "2016-07-28T20:06:30Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 59859, "attachment_id": null, "id": 192706, "time": "2016-07-28T20:15:34Z", "creator": "csutherl@apache.org", "creation_time": "2016-07-28T20:15:34Z", "is_private": false, "text": "Good idea! I don't know why I didn't do that given that the FileResource class uses try-with-resources for it's FIS usage. I like your patch change much better :)\n\nThanks!!"}, {"count": 11, "tags": [], "text": "By the way, I tested the amended patch and it looks to resolve the issue as expected.", "is_private": false, "id": 192708, "creator": "csutherl@apache.org", "time": "2016-07-28T20:34:13Z", "bug_id": 59859, "creation_time": "2016-07-28T20:34:13Z", "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 59859, "attachment_id": null, "is_private": false, "id": 192728, "time": "2016-07-31T09:58:48Z", "creator": "felix.schumacher@internetallee.de", "creation_time": "2016-07-31T09:58:48Z", "text": "Fixed in trunk, 8.5.x and 8.0.x. Should be released with 8.0.37, 8.5.5 and 9.0.0.M10.\n\nThanks for the work and the initial patch."}]
[{"count": 0, "tags": [], "creator": "richard.evans@datanomic.com", "text": "If you write an XLS file using POI, and then read it back,\nHSSFRow.getLastCellNum() returns the wrong value.\n\nFor example, if you write three columns to the file, and then read it back,\ngetLastCellNum() returns 2, not 3.  The method should return the last cell\nnumber PLUS 1.\n\nThe problem is that RowRecord.setLastCol() is called incorrectly in\nHSSFRow.addCell.  It is called with the last cell number, not the last cell\nnumber PLUS 1.\n\nThis seems to be exactly the symptom reported in bug 14890, which was rejected\nas an error in the test code.\n\nSee attached test case.", "id": 110706, "time": "2007-11-19T04:12:37Z", "bug_id": 43901, "creation_time": "2007-11-19T04:12:37Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 43901, "attachment_id": 21149, "text": "Created attachment 21149\ntest case demonstrating the problem\n\nThe test case uses POI to write a simple 3x3 xls file and then read it back. \ngetLastCellNum on each row in the re-read file returns the wrong value.", "id": 110708, "time": "2007-11-19T04:15:16Z", "creator": "richard.evans@datanomic.com", "creation_time": "2007-11-19T04:15:16Z", "is_private": false}, {"count": 2, "tags": [], "creator": "paolo.moz@gmail.com", "attachment_id": 21364, "id": 112675, "time": "2008-01-09T02:58:13Z", "bug_id": 43901, "creation_time": "2008-01-09T02:58:13Z", "is_private": false, "text": "Created attachment 21364\nExtended test case with the case reporetd in bug 43901\n\nNotice that cellNum is '0' base. So if you create 3 cells, the lastCellNum has\nto be 2.\nI extended the testcase just to include the reported case."}, {"count": 3, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 112683, "time": "2008-01-09T03:13:22Z", "bug_id": 43901, "creation_time": "2008-01-09T03:13:22Z", "is_private": false, "text": "Patch from Paolo to the test applied to svn\n\nI agree with Paolo, this bug report is invalid, and POI is working as expected"}, {"count": 4, "tags": [], "bug_id": 43901, "attachment_id": null, "id": 112685, "time": "2008-01-09T03:25:36Z", "creator": "richard.evans@datanomic.com", "creation_time": "2008-01-09T03:25:36Z", "is_private": false, "text": "I'm sorry to disagree, but the Javadoc for HSSFRow.getLastCellNum() says:\n\npublic short getLastCellNum()\n\n    gets the number of the last cell contained in this row PLUS ONE.\n\n    Returns:\n        short representing the last logical cell in the row PLUS ONE, or -1 if\nthe row does not contain any cells.\n\nI understand that cell numbers are zero based, but the documentation does say\nPLUS ONE.  So if there are three cells, with numbers 0, 1 and 2, I would expect\nthat getLastCellNum() should return 3, not 2.\n\nIf you read a three-column XLS file created in Excel, you DO get 3 as the result\nof getLastCellNum().\n"}, {"count": 5, "tags": [], "bug_id": 43901, "attachment_id": null, "text": "I still believe this is a bug.  Has it been fixed in the latest release?", "id": 114258, "time": "2008-03-04T07:51:58Z", "creator": "richard.evans@datanomic.com", "creation_time": "2008-03-04T07:51:58Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 43901, "attachment_id": null, "text": "(In reply to comment #5)\n> I still believe this is a bug.  Has it been fixed in the latest release?\n\n\nI admit I had to read the javadoc twice before I understood what this method did, but I am convinced the behaviour is correct and intentional.\n\n\nThis method allows standard 'zero based' array iteration (i=0; i<max; i++) over cells in a row.  I have used getLastCellNum() like this, POI internally uses getLastCellNum() like this, and I'm sure many other POI dependent projects have done the same.  So it's very unlikely that the behaviour can be changed.\n\nThe javadoc could be improved a bit. Here is a suggestion:\n\n    /**\n     * Gets the index of the last cell contained in this row <b>PLUS ONE</b>.  The result also \n     * happens to be the 1-based column number of the last cell.  This value can be used as a\n     * standard upper bound when iterating over cells:\n     * <pre> \n     * int maxColIx = row.getLastCellNum();\n     * for(short colIx=0; colIx&lt;maxColIx; colIx++) {\n     *   HSSFCell cell = row.getCell(colIx);\n     *   if(cell == null) {\n     *     continue;\n     *   }\n     *   //... do something with cell\n     * }\n     * </pre>\n     * \n     * @return short representing the last logical cell in the row <b>PLUS ONE</b>, or -1 if the\n     *  row does not contain any cells.\n     */\n\n\nI'm going to mark this bug as WORKSFORME.  If you still think there is a bug, could you please upload a junit test that shows it.", "id": 114343, "time": "2008-03-06T08:31:18Z", "creator": "josh@apache.org", "creation_time": "2008-03-06T08:31:18Z", "is_private": false}, {"count": 7, "attachment_id": null, "bug_id": 43901, "text": "I agree with the functionality of getLastCellNum().  The specification is fine for me.\n\nHowever the original report was that XLS files _written_ by POI have the wrong value for getLastCellNum().  If you write an XLS with three columns, then read it back, getLastCellNum() returns 2 not 3.  \n\nIf you read a XLS file with three columns generated by Excel, getLastCellNum() returns 3 as expected.\n\nSee the original attachment with this issue.\n\nOur temporary workround was to modify HSSFRow.addCell to read:\n\n    /**\n     * used internally to add a cell.\n     */\n\n    private void addCell(HSSFCell cell)\n    {\n        short column=cell.getCellNum();\n        if (row.getFirstCol() == -1)\n        {\n            row.setFirstCol(column);\n        }\n        if (row.getLastCol() == -1)\n        {\n            row.setLastCol((short) (column + 1));\n        }\n\n        if(column>=cells.length)\n        {\n          HSSFCell[] oldCells=cells;\n          int newSize=oldCells.length*2;\n          if(newSize<column+1) newSize=column+1;\n          cells=new HSSFCell[newSize];\n          System.arraycopy(oldCells,0,cells,0,oldCells.length);\n        }\n        cells[column]=cell;\n\n        if (column < row.getFirstCol())\n        {\n            row.setFirstCol(column);\n        }\n        if (column >= row.getLastCol())\n        {\n            row.setLastCol((short) (column + 1));\n        }\n    }\n", "id": 114347, "time": "2008-03-06T08:46:35Z", "creator": "richard.evans@datanomic.com", "creation_time": "2008-03-06T08:46:35Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 43901, "attachment_id": null, "text": "(In reply to comment #7)\n> I agree with the functionality of getLastCellNum().  The specification is fine\n> for me.\n> However the original report was that XLS files _written_ by POI have the wrong\n> value for getLastCellNum().  If you write an XLS with three columns, then read\n> it back, getLastCellNum() returns 2 not 3.  \n\nYou are right. Interestingly, if you re-save that file from Excel, getLastCellNum() returns 3, as expected.  So something is definitely wrong.\n\nTo reproduce the bug you don't even need to write-out/read-back the workbook.  You can just call getLastCellNum() after adding a cell:\n\n    public void testLastCellNumIsCorrectAfterAddCell_bug43901(){\n        HSSFWorkbook book = new HSSFWorkbook();\n        HSSFSheet sheet = book.createSheet(\"test\");\n        HSSFRow row = sheet.createRow(0);\n\n        // New row has last col -1\n        assertEquals(-1, row.getLastCellNum());\n        if(row.getLastCellNum() == 0) {\n            fail(\"Identified bug 43901\");\n        }\n\n        // Create two cells, will return one higher\n        //  than that for the last number\n        row.createCell((short) 0);\n        assertEquals(1, row.getLastCellNum());\n        row.createCell((short) 255);\n        assertEquals(256, row.getLastCellNum());\n    }\n\n// \nIt seems like there are a few related problems ( moving and removing cells too).  I'll upload a patch shortly to fix all of these.\n", "id": 114370, "time": "2008-03-06T11:33:44Z", "creator": "josh@apache.org", "creation_time": "2008-03-06T11:33:44Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 43901, "text": "Created attachment 21643\nsvn diff of changes to HSSFRow and test classes", "id": 114371, "time": "2008-03-06T11:42:27Z", "creator": "josh@apache.org", "creation_time": "2008-03-06T11:42:27Z", "is_private": false, "attachment_id": 21643}, {"count": 10, "tags": [], "bug_id": 43901, "attachment_id": null, "text": "Thanks for the patch Josh, applied to svn", "id": 114405, "time": "2008-03-07T03:17:01Z", "creator": "apache@gagravarr.org", "creation_time": "2008-03-07T03:17:01Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 43901, "attachment_id": null, "text": "*** Bug 43015 has been marked as a duplicate of this bug. ***", "id": 116245, "time": "2008-05-05T07:49:49Z", "creator": "yegor@dinom.ru", "creation_time": "2008-05-05T07:49:49Z", "is_private": false}, {"count": 12, "tags": [], "creator": "josh@apache.org", "attachment_id": null, "id": 116466, "time": "2008-05-10T20:17:11Z", "bug_id": 43901, "creation_time": "2008-05-10T20:17:11Z", "is_private": false, "text": "*** Bug 33317 has been marked as a duplicate of this bug. ***"}]
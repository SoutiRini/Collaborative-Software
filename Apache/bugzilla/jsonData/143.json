[{"count": 0, "tags": [], "bug_id": 143, "text": "agBeginGenerator does compile time conversion from String to the type of\r\nthe property as specified in the spec. table 2-4 (section 2.13.2) and more\r\n(looking at the code). But, it doesn't work for property of type\r\njava.lang.Object. So, if I have a tag (say foo) with a property of type\r\nobject (say attr1), the following doesn't work:\r\n\r\n<a:foo attr1=\"bar\"/>\r\n\r\n(fails compilation with \"Unable to convert a String to java.lang.Object for\r\nattribute attr1\").\r\n\r\nIf we change it to the following uglyness, it works:\r\n\r\n<% String bar = \"bar\"; %>\r\n<a:foo attr1=\"<%=bar%>\"/>\r\n\r\nQuestions:\r\n\r\n1. Is String to java.lang.Object implicit conversion a spec. oversight or is\r\nthere a good reason for not supporting it. Since java.lang.String is\r\njava.lang.Object, it seems strange to say, \"Unable to convert String to\r\njava.lang.Object\" when String *is* an Object.\r\n\r\n2. Regardless of how the spec. feels about it, can Jasper support this as a\r\nnon-normative feature? As far as I can see, it is just one (half) a line in\r\nTagBeginGenerator, change \"if (c == String.class)\" to \"if (c == String.class\r\n|| c == Object.class)\" in convertString method.\r\n", "id": 123, "time": "2000-09-25T12:32:04Z", "creator": "dev@tomcat.apache.org", "creation_time": "2000-09-25T12:32:04Z", "is_private": false, "attachment_id": null}]
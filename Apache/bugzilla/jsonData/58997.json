[{"count": 0, "tags": [], "bug_id": 58997, "attachment_id": 33548, "id": 188371, "time": "2016-02-11T17:35:47Z", "creator": "istvan@verhas.com", "creation_time": "2016-02-11T17:35:47Z", "is_private": false, "text": "Created attachment 33548\nthe sample build.xml an properties files to reproduce the issue\n\nIf you use a properties file to replace tokens in a file it sometimes fails when there are two properties that one is a substring of other one. Actually it is typical in a properties file that you build it hierarchically.\nThe root cause is that Properties extends HashTable which does not handle az insertion order. I propose a solution to sort on the length of the token is descending order.\nThe patch I tested\n\n--- Replace-orig.java\t2015-06-29 07:46:12.000000000 +0100\n+++ Replace.java\t2016-02-11 18:28:18.974000000 +0100\n@@ -30,7 +30,11 @@\n import java.io.OutputStreamWriter;\n import java.io.Reader;\n import java.io.Writer;\n+import java.lang.Override;\n+import java.util.*;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.Properties;\n \n@@ -67,7 +71,7 @@\n     private Resource propertyResource = null;\n     private Resource replaceFilterResource = null;\n     private Properties properties = null;\n-    private ArrayList replacefilters = new ArrayList();\n+    private ArrayList<Replace.Replacefilter> replacefilters = new ArrayList();\n \n     private File dir = null;\n \n@@ -523,7 +527,7 @@\n                 properties = getProperties(propertyResource);\n             }\n \n-            validateReplacefilters();\n+            validateAndOrderReplacefilters();\n             fileCount = 0;\n             replaceCount = 0;\n \n@@ -597,7 +601,7 @@\n      * @exception BuildException if any supplied attribute is invalid or any\n      * mandatory attribute is missing.\n      */\n-    public void validateReplacefilters()\n+    public void validateAndOrderReplacefilters()\n             throws BuildException {\n         final int size = replacefilters.size();\n         for (int i = 0; i < size; i++) {\n@@ -605,6 +609,22 @@\n                 (Replacefilter) replacefilters.get(i);\n             element.validate();\n         }\n+        orderReplacefilters();\n+    }\n+\n+    /*\n+    patch to handle correctly properties files where the tokens can be substrings of eachother\n+    the Properties is a HashTable that does not care with he insertion order\n+    Sometimes it works sometimes not.\n+    */\n+\n+    private void     orderReplacefilters(){\n+        Collections.sort(replacefilters, new Comparator<Replacefilter>() {\n+            @Override\n+            public int compare(Replacefilter rf1, Replacefilter rf2) {\n+                return rf2.getToken().length() - rf1.getToken().length();\n+            }\n+        });\n     }\n \n     /**"}, {"count": 1, "tags": [], "bug_id": 58997, "attachment_id": null, "id": 188410, "time": "2016-02-14T09:49:30Z", "creator": "bodewig@apache.org", "creation_time": "2016-02-14T09:49:30Z", "is_private": false, "text": "The change you propose would break backwards compatibility. People may rely on the order of nested replacefilter elements.\n\nGit commit 4d0bbb4 contains a sligtly different approach inspired by yours that only sorts the filters drawn from a replacefilterfile. It would be good if you could verify it fixes the problem for you."}, {"count": 2, "tags": [], "bug_id": 58997, "text": "The backward compatibility note is correct. \nI verified the solution on the sample and it fixed the issue.\nthanks.\nbye\nsteve", "id": 188431, "time": "2016-02-15T13:23:07Z", "creator": "istvan@verhas.com", "creation_time": "2016-02-15T13:23:07Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "istvan@verhas.com", "is_private": false, "id": 188506, "time": "2016-02-17T14:44:12Z", "bug_id": 58997, "creation_time": "2016-02-17T14:44:12Z", "tags": [], "text": "I have to reopen this issue as using the 1.9.7alpha i found that it is replacing only a part of the provided tokens. Actually i have not enough time to debug your solution but i tested the solution i proposed. The later is still working well on the sample 20160217.zip ."}, {"count": 4, "attachment_id": 33564, "creator": "istvan@verhas.com", "text": "Created attachment 33564\nextended sample build.xml an properties files to reproduce the issue", "id": 188507, "time": "2016-02-17T14:48:44Z", "bug_id": 58997, "creation_time": "2016-02-17T14:48:44Z", "tags": [], "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 58997, "text": "You are correct, my fault. For the TreeSet two properties are now equal if they've got the same length.\n\nI'll fix it.", "count": 5, "id": 188627, "time": "2016-02-20T11:25:03Z", "creator": "bodewig@apache.org", "creation_time": "2016-02-20T11:25:03Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58997, "attachment_id": null, "id": 188628, "time": "2016-02-20T11:34:40Z", "creator": "bodewig@apache.org", "creation_time": "2016-02-20T11:34:40Z", "is_private": false, "text": "should be fixed with git 5a6fda5 - really :-)\n\nMany thanks for re-testing my initial attempt."}]
[{"count": 0, "tags": [], "bug_id": 45696, "is_private": false, "text": "Created attachment 22487\nThe archive with sources and build scripts that reproduce the bug.\n\nWhen generating ants scripts, we have discovered that if classpath for java application references other paths using <path refid=\"<path name>\"/> a significant slow down happens for big projects with complex dependency structure for launched java applications and tests. We had 15 minutes for classpath building during execution of test tasks.\n\nThe stack probed from profiler looks like the following:\n\njava.lang.Class.isAssignableFrom(Class)\norg.apache.tools.ant.types.DataType.getCheckedRef(Class, String, Project)\norg.apache.tools.ant.types.DataType.getCheckedRef(Project)\norg.apache.tools.ant.types.DataType.getCheckedRef()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.Path.isFilesystemOnly()\norg.apache.tools.ant.types.resources.BaseResourceCollectionContainer.isFilesystemOnly()\norg.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection)\norg.apache.tools.ant.types.Path.iterator()\norg.apache.tools.ant.types.Path.iterator()\norg.apache.tools.ant.types.resources.Union.getCollection(boolean)\norg.apache.tools.ant.types.resources.Union.list()\norg.apache.tools.ant.types.Path.list()\norg.apache.tools.ant.types.Path.addExisting(Path, boolean)\norg.apache.tools.ant.types.Path.addExisting(Path)\norg.apache.tools.ant.types.Path.concatSpecialPath(String, Path)\norg.apache.tools.ant.types.Path.concatSystemClasspath(String)\norg.apache.tools.ant.types.CommandlineJava.haveClasspath()\norg.apache.tools.ant.types.CommandlineJava.addCommandsToList(ListIterator)\norg.apache.tools.ant.types.CommandlineJava.getCommandline()\norg.testng.TestNGAntTask.executeAsForked(CommandlineJava, ExecuteWatchdog)\norg.testng.TestNGAntTask.execute()\n\nThe method org.apache.tools.ant.types.Path.assertFilesystemOnly(ResourceCollection) looks like the primary CPU eater due to recursive invocation.\n\nThe attached file contains project that allows to reproduce the problem.\nThere are two ant scripts:\n\nThe script build-inlined.xml demonstrates situation with inlined classpaths. The run task is executed very fast (ant reports 0 seconds).\n \nThe script build-ref.xml demonstrates situation with referenced classpaths. The run task is executed for about (3 seconds) and the slowdown is due to classpath handling in ant application itself.\n\nThe only difference between these tasks is the way classpaths for java task are specified in the \"run\" target.", "id": 120143, "time": "2008-08-27T09:12:06Z", "creator": "constantine.plotnikov@gmail.com", "creation_time": "2008-08-27T09:12:06Z", "attachment_id": 22487}, {"count": 1, "tags": [], "text": "Slow but correct behavior is undesirable but I'm not sure if it qualifies as a bug.", "is_private": false, "id": 120144, "creator": "mbenson@apache.org", "time": "2008-08-27T09:18:27Z", "bug_id": 45696, "creation_time": "2008-08-27T09:18:27Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 45696, "is_private": false, "text": "Also, it looks entirely like your problem is not the use of one ref, but the fact that in your \"bug\" files your classpath is composed of sixteen other paths. Finally, your examples seem to suffer from their own smallness:  the time it takes me to run either (against svn trunk) is 12 seconds.", "id": 120145, "time": "2008-08-27T09:32:49Z", "creator": "mbenson@apache.org", "creation_time": "2008-08-27T09:32:49Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Try to run in situation when sources are already compiled to see the difference. The problem is with \"run\" target. Compilation uses inlined classpath.\n\nIn the real complex project we got 15 minutes. So there is likely non-polynomial dependency on the size of classpath. 16 paths are actually very small amount (especially considering that they are one element). ", "is_private": false, "id": 120146, "creator": "constantine.plotnikov@gmail.com", "time": "2008-08-27T10:43:42Z", "bug_id": 45696, "creation_time": "2008-08-27T10:43:42Z", "attachment_id": null}, {"count": 4, "tags": [], "creator": "constantine.plotnikov@gmail.com", "text": "> small amount (especially considering that they are one element). \nOps. I meant \"one new element each\".\n\n", "id": 120147, "time": "2008-08-27T10:49:47Z", "bug_id": 45696, "creation_time": "2008-08-27T10:49:47Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "text": "Created attachment 22494\nThe archive with sources and build scripts that reproduce the bug with additional layer of projects.\n\nI have added an additional layer of modules (e1-e2) to the project and created new build scripts. Now run target for ref case takes 30 seconds on my computer (vs 0 for inline case).", "is_private": false, "id": 120173, "creator": "constantine.plotnikov@gmail.com", "time": "2008-08-28T06:37:20Z", "bug_id": 45696, "creation_time": "2008-08-28T06:37:20Z", "attachment_id": 22494}, {"count": 6, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "id": 129982, "time": "2009-08-27T07:13:13Z", "bug_id": 45696, "creation_time": "2009-08-27T07:13:13Z", "is_private": false, "text": "svn revision 808421 adds a cache attribute on <path>.\n\nIf I enable it on\n\n  <path id=\"antbug.runtime.module.classpath\" cache=\"true\">\n\nmy build time goes from 32 seconds to 13 seconds using your example.  If I set it on all paths with \"runtime\" in their name it goes down to 7 seconds.\n\nThis is still worse than the 2 seconds I get without refs but I don't really see how to improve the situation any further since most of the time is spent making sure we don't have a cycle in the graph of connected references.\n\nGiven the improvement now, I'm going to lower the importance, but not closing the issue since others may find more tweaks we could apply."}]
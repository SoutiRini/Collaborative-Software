[{"count": 0, "tags": [], "bug_id": 50725, "attachment_id": 26614, "is_private": false, "id": 144008, "time": "2011-02-06T12:17:10Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-06T12:17:10Z", "text": "Created attachment 26614\nproposed patch to deal with TODO, uncovers to a new one...\n\nAttached is a patch against fop.layoutmgr.KnuthSequence, which takes care of a TODO (Do not extend ArrayList) by implementing the List interface via proxy methods to a member list.\n\nReason this is not committed yet, is that I wanted to go a step further and add type safety to this class, but noticed that this is currently impossible. \nThe explanation is also added in a new TODO: there is an inconsistency (or at least incongruency) between block-layout and inline-layout. Block-layout works mainly with KnuthSequences as List<ListElement>  where inline-layout seems to expect List<KnuthSequence>...\n\nSuggestions? Ideas? I would like to see those aligned, and in theory, once KnuthSequence implements List, it is free to extend ListElement, if that would be appropriate. The other way around could also make sense: consider each ListElement as a KnuthSequence of a single element. Although that would require some more refactoring, since we have to extract the KnuthSequence/List interface before ListElement can implement it."}, {"count": 1, "tags": [], "bug_id": 50725, "attachment_id": null, "id": 144009, "time": "2011-02-06T12:32:53Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-06T12:32:53Z", "is_private": false, "text": "\nForgot to add: the key class, the single one that seems to be making it impossible to turn KnuthSequence into a List<ListElement>, is InlineLayoutManager. It's there, in the getNextKnuthElements() method, that you cannot make returnList a List<ListElement> without triggering a compile error.\n\nIf the issue there were solved, it would be possible to add type safety to the return type of LayoutManager.getNextKnuthElements(), and make it either a List<ListElement> or List<KnuthSequence>."}, {"count": 2, "tags": [], "text": "I know. I created that to be able to work with block-level content in inline-level content. An inline LM may have block-level LMs in its subtree. I solved the problem by letting an inline-level LM receive List<KnuthSequence>, where each sequence of inline-level layout would be in one InlineKnuthSequence, and block-level layout would generate BlockKnuthSequences. At the time I did this, there were no generics yet. I have long been aware that this violates type safety, but I do not know a solution. LM.getNextKnuthElements is called for block and inline-level LMs alike, but the structure of their subtrees is different.", "attachment_id": null, "id": 144012, "creator": "spepping@apache.org", "time": "2011-02-07T03:22:51Z", "bug_id": 50725, "creation_time": "2011-02-07T03:22:51Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 50725, "attachment_id": null, "id": 144025, "time": "2011-02-07T14:02:52Z", "creator": "adelmelle@apache.org", "creation_time": "2011-02-07T14:02:52Z", "is_private": false, "text": "(In reply to comment #2)\n\n> At the time I did this, there were no generics yet. I have long been aware \n> that this violates type safety, but I do not know a solution. \n> LM.getNextKnuthElements is called for block and inline-level LMs alike, \n> but the structure of their subtrees is different.\n\nRight, I remember now. Well, it's not too dramatic, and the issue of type safety mainly concerns fo:wrappers, IIC[*]. For the remainder, no biggie. Nobody would dream of adding, say, a LayoutManager to the returnList in getNextKnuthElements(), simply because it is obvious from the context what type of elements is expected. It's just a nice-to-have, if we would be able to define it in the interface. \n\nAs for a solution, my proposal might just work fine. Given that, after the patch, KnuthSequence is no longer a subclass of ArrayList, it is free to become a special kind of ListElement (compound, rather than atomic). The only thing I still have to figure out, is whether that could be useful for other purposes, or whether that just adds more complexity and potential confusion...\n\n[*] cfr. the ClassCastException issue that popped up a number of times in the past, and once fixed, it resurfaced further downstream (see also Bugzilla 47530). Fixed in FlowLM, then surfaced in BlockStackingLM, then triggered by a call to ElementListUtils..."}, {"count": 4, "tags": [], "bug_id": 50725, "attachment_id": null, "text": "resetting P2 open bugs to P3 pending further review", "id": 157422, "time": "2012-04-07T01:42:42Z", "creator": "gadams@apache.org", "creation_time": "2012-04-07T01:42:42Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 50725, "is_private": false, "id": 157648, "time": "2012-04-08T04:20:34Z", "creator": "gadams@apache.org", "creation_time": "2012-04-08T04:20:34Z", "tags": [], "text": "andreas, any progress on finalizing this patch?"}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n> andreas, any progress on finalizing this patch?\n\n??", "is_private": false, "id": 158337, "creator": "gadams@apache.org", "time": "2012-04-24T05:32:49Z", "bug_id": 50725, "creation_time": "2012-04-24T05:32:49Z", "attachment_id": null}]
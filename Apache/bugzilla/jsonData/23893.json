[{"count": 0, "tags": [], "bug_id": 23893, "attachment_id": null, "text": "EXEC never finished until the processes launched from the start_opera.bat \ncomplete.  The start_opera.bat has finished - but ant keeps hanging until\nall processes launched from within start_opera.bat have finished.\n\nI am testing a middle tier app.  I want to start middle tier (keep it running).\nThen run tests against the middle tier.\n\nhere is an extract from my ant script:\n    <exec dir=\"..\\scripts_windows\\\" \n          executable=\"..\\scripts_windows\\start_opera.bat\" \n          os=\"Windows 2000\" \n          output=\"opera_start.txt\">\n     </exec>", "id": 45845, "time": "2003-10-17T15:42:15Z", "creator": "paul.costin@ubs.com", "creation_time": "2003-10-17T15:42:15Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 23893, "attachment_id": null, "text": "Use Ant 1.6\n\n<exec spawn=\"true\"/>", "id": 45846, "time": "2003-10-17T15:46:57Z", "creator": "jan@materne.de", "creation_time": "2003-10-17T15:46:57Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 23893, "text": "tried with spawn=\"true\"\nant returns ok but does not launch the exec command in the background.\n\nit launches nothing.  tried from cygwin & XP.", "id": 45851, "time": "2003-10-17T16:19:30Z", "creator": "paul.costin@ubs.com", "creation_time": "2003-10-17T16:19:30Z", "is_private": false, "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "antoine@apache.org", "text": "You need to redirect the stdout and stderr generated by the .bat.\nAlso, can you show your build file ?\nThe executable for a bat file should be cmd.exe.\n\n<exec executable=\"cmd.exe\" spawn=\"true\">\n<arg value=\"/C\"/>\n<arg value=\"my.bat\"/>\n<arg value=\">NUL\"/>\n<arg value=\"2>&1\"/>\n</exec>\n\nthis should work assuming that my.bat is the name of your batch.\n\nCheers,\nAntoine", "id": 45865, "time": "2003-10-17T20:55:00Z", "bug_id": 23893, "creation_time": "2003-10-17T20:55:00Z", "tags": [], "is_private": false}, {"count": 4, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "id": 52876, "time": "2004-02-24T17:42:18Z", "bug_id": 23893, "creation_time": "2004-02-24T17:42:18Z", "is_private": false, "text": "*** Bug 26852 has been marked as a duplicate of this bug. ***"}, {"count": 5, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "Execute.spawn() has been modified to pump the input (output) and error streams \nof the spawned process and thereby prevent blocking.  In CVS.", "id": 55096, "time": "2004-04-01T19:15:04Z", "bug_id": 23893, "creation_time": "2004-04-01T19:15:04Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 23893, "attachment_id": null, "text": "I don't understand. The purpose of spawn is to have the process outlive the Ant \nprocess (JVM), but if one needs to pump the stream, then eventually the spawned \nprocess will hang with full buffers.\n\nAlso, by using an inner-class, you keep a hidden implicit reference to the \nouter class, which is always a possible source of leaks.\n\nI don't contest your fix, just raise the fact that it might not be enough... --\nDD", "id": 55100, "time": "2004-04-01T19:35:19Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-04-01T19:35:19Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 23893, "text": "memory leaks?  If need be, I could change the inner class from an anonymous one \nto a static one.  I'm also not sure I understand the statement that \"the \nspawned process will hang with full buffers.\"  I thought that's what we were \ntrying to avoid.  :)", "count": 7, "id": 55103, "time": "2004-04-01T20:38:27Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-01T20:38:27Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 23893, "attachment_id": null, "text": "OK, maybe I wasn't very explicit ;-)\n\nThe goal of spawn is to start and forget a process, that can (will) outlive the \nJava VM Ant is running inside of. If the started process is I/O intensive, it \nfeels the system (native) buffers, and hangs when these buffers are full.\n\nYour fix ensures that the out (err?) buffers are read from, thus providing room \nfor the process to write some more output, and un-hang until the buffers are \nfull again. But, who's going to read these buffers after Ant and its VM \nterminates? The spawned process goes on living, but if it ever fills the system \nbuffers again, Ant is not there to pump the buffers anymore?\n\nSo is it in fact possible at all to spawn such a I/O intensive process at all???\n\nAm I making more sense now? --DD", "id": 55106, "time": "2004-04-01T21:00:03Z", "creator": "ddevienne@lgc.com", "creation_time": "2004-04-01T21:00:03Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 23893, "text": "From my experience output buffers are not an issue after the parent process exits. I think we can close the streams right a way without pumping them.", "id": 55108, "time": "2004-04-01T21:03:39Z", "creator": "alexeys@inventigo.com", "creation_time": "2004-04-01T21:03:39Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 23893, "text": "Alexey, I did try simply closing the streams first, but while this seemed to \nwork for the original testcase the spawn test of ExecTaskTest began to fail on \nSolaris.  When I implemented the stream pumping approach both cases seemed to \ngo as desired on Win2K and Solaris alike.  Everything I saw supported your \nassertion that process I/O is no longer an issue after the exit of the VM.  So \nto answer your question, Dominique, I can't say that I know why this is so, but \nit seems to be so regardless.  :)", "id": 55110, "time": "2004-04-01T21:21:54Z", "creator": "mbenson@apache.org", "creation_time": "2004-04-01T21:21:54Z", "is_private": false, "attachment_id": null}]
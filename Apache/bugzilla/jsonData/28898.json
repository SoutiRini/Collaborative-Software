[{"count": 0, "tags": [], "creator": "dankogai@dan.co.jp", "attachment_id": null, "id": 57198, "time": "2004-05-11T13:02:35Z", "bug_id": 28898, "creation_time": "2004-05-11T13:02:35Z", "is_private": false, "text": "Dear Apache Developers,\n\nMy name is Dan Kogai and I thank you for your great product.  That definitely\nmakes the world go round!\n\nI just found that Apache, both 1 and 2, does not support files that are larger\nthan 2GB.  Apache 2 does support it but only on (truly) 64-bit systems.  On such\nsystems (I would even say majority thereof) where large files are supported\n(off_t is 64-bit) but size_t is limited to 32-bit, it does not work.\n\nI browse the source and found that while apr_off_t is correctly used APR-wise,\nmany calculations that contain apr_size_t variables led to incorrect values.\n\nThe quick & dirty proof-of-concept patch below does fix the problem.  Tested OK\non FreeBSD 4, Mac OS X v10.3.  Compiled on Linux kernel 2.4.9 but rerurns 400\nwith log entry \"[client 127.0.0.1] (75)Value too large for defined data type:\naccess to /dvd.dmg failed\"\n\nAs I said this is way too quick and dirty and I would appreciate if you guys fix\nthat more properly and elegantly.\n\nIt may sound ridiculous to handle such large files but I happen to be a member\nof Ring Server Project which hosts one of the most famous open source\ndistribution and there appears DVD images that get influenced.\n\nThank you in advance for your attention and support.\n\nDan the Man with Too Many File Transfers\n\n--- httpd-2.0.49/srclib/apr/include/apr.h.in    Sun Feb 29 03:41:32 2004\n+++ httpd-2.0.49-x/srclib/apr/include/apr.h.in  Tue May 11 21:27:31 2004\n@@ -263,7 +263,7 @@\n typedef  @long_value@            apr_int64_t;\n typedef  unsigned @long_value@   apr_uint64_t;\n \n-typedef  @size_t_value@          apr_size_t;\n+typedef  @off_t_value@           apr_size_t;\n typedef  @ssize_t_value@         apr_ssize_t;\n typedef  @off_t_value@           apr_off_t;\n typedef  @socklen_t_value@       apr_socklen_t;"}, {"count": 1, "tags": [], "creator": "jorton@redhat.com", "is_private": false, "id": 57221, "attachment_id": null, "bug_id": 28898, "creation_time": "2004-05-11T18:55:34Z", "time": "2004-05-11T18:55:34Z", "text": "Can you precisely describe the issues you see on platforms with a 32-bit size_t\nand a 64-bit off_t?"}, {"count": 2, "tags": [], "creator": "dankogai@dan.co.jp", "attachment_id": null, "id": 57387, "time": "2004-05-14T02:33:17Z", "bug_id": 28898, "creation_time": "2004-05-14T02:33:17Z", "is_private": false, "text": "Joe Orton,\n\nThank you for your response.  This is what happens;\n\nls -l /ring/ftp/4gb-test.dmg \n-rw-r--r--  1 root  mirror  4699983872 May 11 22:45 /ring/ftp/4gb-test.dmg\n\nHEAD http://localhost/4gb-test.dmg\n200 OK\nConnection: close\nDate: Fri, 14 May 2004 02:26:47 GMT\nAccept-Ranges: bytes\nServer: Apache\nContent-Length: 405016576\nContent-Type: application/octet-stream\nETag: \"6-18241000-557d0100\"\nLast-Modified: Tue, 11 May 2004 13:45:08 GMT\nClient-Date: Fri, 14 May 2004 02:26:46 GMT\nClient-Peer: 210.159.71.23:80\n\nAs you see,\n\n* Content-Length: shows only lower 32-bit thereof\n* File transfer fails accordingly (only 405,016,576 bytes of actual\n4,699,983,872 bytes gets downloaded in the example above).\n\nDan the Truncated Man\n\n\n"}, {"count": 3, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "is_private": false, "id": 57401, "time": "2004-05-14T11:20:12Z", "bug_id": 28898, "creation_time": "2004-05-14T11:20:12Z", "text": "Interesting.  That's a bug, but I can't reproduce it with HEAD on a 32-bit Linux\nusing apr_off_t = off64_t, apr_size_t = size_t.\n\n$ HEAD http://localhost:8900/big/bigfile | grep Content-Length\nContent-Length: 3145728000\n\nso it's something more subtle.  Does the correct file size get logged to\naccess_log if you GET the file?  Does autoindex show the correct size for the\nfile in a directory listing?"}, {"count": 4, "tags": [], "creator": "jorton@redhat.com", "is_private": false, "id": 57404, "attachment_id": null, "bug_id": 28898, "creation_time": "2004-05-14T11:23:59Z", "time": "2004-05-14T11:23:59Z", "text": "BTW, your HEAD test was with 2.0, I presume.  1.3 uses long rather than off_t\nfor file sizes everywhere, so you're always limited by sizeof(long) in 1.3 even\nif sizeof(off_t) == 64."}, {"count": 5, "tags": [], "bug_id": 28898, "attachment_id": null, "id": 57473, "time": "2004-05-15T05:26:33Z", "creator": "dankogai@dan.co.jp", "creation_time": "2004-05-15T05:26:33Z", "is_private": false, "text": "> $ HEAD http://localhost:8900/big/bigfile | grep Content-Length\n> Content-Length: 3145728000\n\nI don't think it's big enough.  It's definitely larger than MAX_INT but well\nwithin UMAX_INT, which nicely fits in 32-bit.\n\n3145728000 = 0xbb80_0000 < 0xffff_ffff\n\nFYI to make large files quickly (and sparsely), you can go like\n\n  perl -e 'truncate shift, shift' file size\n\nor\n\n  truncate -s size file\n\nif your platform has trucate(1).\n\n> BTW, your HEAD test was with 2.0, I presume.\n\nCorrect. 1.3.x hardcodes them all \"long\" while 2.0.x uses apr_*.\n\nDan the Truncated Man\n\n"}, {"count": 6, "tags": [], "text": "> Does the correct file size get logged to access_log if you GET the file?  \n\nWith my (quick & dirty) patch, yes.  w/o, no.\n\n> Does autoindex show the correct size for the file in a directory listing?\n\nYes, with or without the patch.\n\n dvd.dmg                 12-May-2004 00:07  4.4G  \n\nDan\n", "is_private": false, "bug_id": 28898, "id": 57474, "time": "2004-05-15T05:43:04Z", "creator": "dankogai@dan.co.jp", "creation_time": "2004-05-15T05:43:04Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 28898, "attachment_id": null, "text": "Well, since off_t is signed any size >2Gb would fail, if at all... it works the\nsame here for me using >4Gb sizes too (again, using HEAD with\napr_off_t==off64_t, which should be equivalent to a FreeBSD system with\napr_off_t==off_t where sizeof(off_t) == 8).\n\nSo I don't know what bug you're seeing here, it would be great if you could\ndebug it, i.e. work out if apr_stat() is determining the size correctly, and\nwork on up...", "id": 57494, "time": "2004-05-16T00:51:33Z", "creator": "jorton@redhat.com", "creation_time": "2004-05-16T00:51:33Z", "is_private": false}, {"count": 8, "tags": [], "creator": "dankogai@dan.co.jp", "is_private": false, "id": 57516, "attachment_id": null, "bug_id": 28898, "creation_time": "2004-05-16T15:37:11Z", "time": "2004-05-16T15:37:11Z", "text": "> Well, since off_t is signed any size >2Gb would fail, if at all... \n> it works the same here for me using >4Gb sizes too\n\nThe problem is sizeof(apr_off_t) > sizeof(apr_size_t) in those platforms while\nthere are many places where apr_off_t objects are computed against apr_size_t\nobjects.  We already have learned that forcibily making apr_size_t 64-bit off-t\nfixes the problem (in some platforms).\n\nOh, I have chenged the summery from \"2GB\" to \"4GB\" to be more precise.\n\n> it would be great if you could debug it\n\nYikes.  I know HOW it went wrong but WHERE to fix is another problem.  Since it\nis size-related, that may even lead to changes in *.h, meaning API changes and\nthat'way too much for me. \n \n> i.e. work out if apr_stat() is determining the size correctly, \n> and work on up...\n\nThat's not the only problem.  Anywhere apr_off_t is used in conjunction w/\napr_size_t are vulnerable.  i.e apr_bucket_read().\n\nDan the Apache *User* (and love to stay that way)\n\n"}, {"count": 9, "text": "In Mac OS X, I later found that while Content-Length: header was correct w/ the\nprevious patch, the actual file transfer gets trucated.  The following patch to\nemulate_sendfile() in server/core.c fixes that (YOU STILL NEED MY PREVIOUS PATCH). \n\nI wonder why FreeBSD did work. Maybe because it was tested w/ truncated (sparse)\nfile.  There on Mac OS X I have used the actual DVD image file for testing uI\nalso applied byte-to-byte exhaustive file comparison as well as md5 sum to make\nsure the transferred file is identical to the original.\n\nThat explains reason why my patch did not quite work on Linux.  On Linux\nAPR_HAS_SENDFILE is set and emulate_sendfile() is never used.\n\nDan the Typedefed Man\n\n--- httpd-2.0.49/server/core.c  Tue Mar  9 07:54:20 2004\n+++ httpd-2.0.49-x/server/core.c        Mon May 17 02:00:53 2004\n@@ -2949,7 +2949,7 @@\n                                      apr_size_t length, apr_size_t *nbytes)\n {\n     apr_status_t rv = APR_SUCCESS;\n-    apr_int32_t togo;        /* Remaining number of bytes in the file to send */\n+    apr_off_t togo;        /* Remaining number of bytes in the file to send */\n     apr_size_t sendlen = 0;\n     apr_size_t bytes_sent;\n     apr_int32_t i;\n", "bug_id": 28898, "is_private": false, "id": 57521, "time": "2004-05-16T17:15:43Z", "creator": "dankogai@dan.co.jp", "creation_time": "2004-05-16T17:15:43Z", "tags": [], "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 28898, "attachment_id": null, "id": 57522, "time": "2004-05-16T19:02:25Z", "creator": "jorton@redhat.com", "creation_time": "2004-05-16T19:02:25Z", "is_private": false, "text": "Ah, nice work, yes, I see the issue here too with \"EnableSendfile off\". \n\nCan you try this patch - *without* your apr_off_t = size_t hack:\n\nhttp://www.apache.org/~jorton/ap_splitlfs.diff"}, {"count": 11, "tags": [], "creator": "dankogai@dan.co.jp", "attachment_id": null, "id": 57530, "time": "2004-05-17T07:35:19Z", "bug_id": 28898, "creation_time": "2004-05-17T07:35:19Z", "is_private": false, "text": "> Can you try this patch - *without* your apr_off_t = size_t hack:\n\nYay!  Seems like it's working now.  Both HEAD and GET works fine.  Maybe we\nstill need to check on (HTTP/1.1) partial transfers but this is a significant\nprogress.  Thank you so much!\n\nDan the Untruncated Man\n"}, {"count": 12, "tags": [], "bug_id": 28898, "attachment_id": null, "text": "Joe,\n\nI am just curious if subbuckets also needs to turn off mmap (just to be sure). \nHere's the patch AGAINST YOURS that does that.\n\nDan the Munmapped Man\n\n--- server/core.c       Tue May 18 00:16:34 2004\n+++ server/core.c.old   Tue May 18 00:15:37 2004\n@@ -3488,11 +3488,6 @@\n             while (fsize > AP_MAX_SENDFILE) {\n                 apr_bucket *ce;\n                 apr_bucket_copy(e, &ce);\n-#if APR_HAS_MMAP\n-               if (d->enable_mmap == ENABLE_MMAP_OFF) {\n-                   (void)apr_bucket_file_enable_mmap(ce, 0);\n-               }\n-#endif\n                 APR_BRIGADE_INSERT_TAIL(bb, ce);\n                 e->start += AP_MAX_SENDFILE;\n                 fsize -= AP_MAX_SENDFILE;\n", "id": 57555, "time": "2004-05-17T15:22:47Z", "creator": "dankogai@dan.co.jp", "creation_time": "2004-05-17T15:22:47Z", "is_private": false}, {"count": 13, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 57564, "time": "2004-05-17T19:03:55Z", "bug_id": 28898, "creation_time": "2004-05-17T19:03:55Z", "is_private": false, "text": "That patch is reversed... hmmm, probably.  Actually it won't make any\ndifference, since the file buckets are only mmap'ed if they are smaller than\n4Mb, and here we're creating 16Mb buckets."}, {"count": 14, "tags": [], "creator": "jorton@redhat.com", "attachment_id": null, "id": 63460, "time": "2004-09-13T13:41:37Z", "bug_id": 28898, "creation_time": "2004-09-13T13:41:37Z", "is_private": false, "text": "The patch is now committed for 2.1.  Thanks for the report."}]
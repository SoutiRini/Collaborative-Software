[{"count": 0, "tags": [], "bug_id": 45658, "attachment_id": null, "text": "package ru.sanalis;\n\nimport org.apache.log4j.Logger;\n\npublic class LoggerTest {\n\n    static private Logger LOG = Logger.getLogger(LoggerTest.class);\n\n    static public void main(String[] args) {\n        LOG.debug(\"Debug > \" + args);\n        LOG.fatal(\"Fatal > \" + args);\n    }\n}\n\nConfig:\n# ***** Set root logger level to WARN and its two appenders to stdout and R.\nlog4j.rootLogger=debug, stdoutRoot\nlog4j.logger.ru=fatal, stdout\n\n# ***** stdout is set to be a ConsoleAppender.\nlog4j.appender.stdoutRoot=org.apache.log4j.ConsoleAppender\n# ***** stdout uses PatternLayout.\nlog4j.appender.stdoutRoot.layout=org.apache.log4j.PatternLayout\n# ***** Pattern to output the caller's file name and line number.\nlog4j.appender.stdoutRoot.layout.ConversionPattern=%5p rootLog (%F:%L) - %m%n\n\n# ***** stdout is set to be a ConsoleAppender.\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\n# ***** stdout uses PatternLayout.\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n# ***** Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p normalLog (%F:%L) - %m%n\n\nShould write:\nDEBUG normalLog !!!\nFATAL normalLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\nFATAL rootLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\n\nConsole writes:\nFATAL normalLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\nFATAL rootLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\n\nlog4j.logger.ru=debug, stdout - loose to log LOG.debug(\"Debug > \" + args);\n\n\nWith config:\n# ***** Set root logger level to WARN and its two appenders to stdout and R.\nlog4j.rootLogger=fatal, stdoutRoot\nlog4j.logger.ru=debug, stdout\n\n# ***** stdout is set to be a ConsoleAppender.\nlog4j.appender.stdoutRoot=org.apache.log4j.ConsoleAppender\n# ***** stdout uses PatternLayout.\nlog4j.appender.stdoutRoot.layout=org.apache.log4j.PatternLayout\n# ***** Pattern to output the caller's file name and line number.\nlog4j.appender.stdoutRoot.layout.ConversionPattern=%5p rootLog (%F:%L) - %m%n\n\n# ***** stdout is set to be a ConsoleAppender.\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\n# ***** stdout uses PatternLayout.\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n# ***** Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p normalLog (%F:%L) - %m%n\n\nOutput:\nDEBUG normalLog (LoggerTest.java:10) - Debug > [Ljava.lang.String;@10b4199\nDEBUG rootLog (LoggerTest.java:10) - Debug > [Ljava.lang.String;@10b4199\nFATAL normalLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\nFATAL rootLog (LoggerTest.java:11) - Fatal > [Ljava.lang.String;@10b4199\n\nSo rootLogger log DEBUG even with log4j.rootLogger=fatal, stdoutRoot", "id": 119930, "time": "2008-08-20T04:17:33Z", "creator": "spamolovko@gmail.com", "creation_time": "2008-08-20T04:17:33Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 45658, "text": "This is not a bug in Log4j.  It is a simple matter of appender inheritance.  Appenders, inherited or otherwise, will append at the effective logging level of the logger in question, not the level of the logger the appender was inherited from... unless, of course, the logging level is inherited, which is not the case here anyway.  Marking invalid.\n\nJake", "id": 119936, "time": "2008-08-20T07:32:11Z", "creator": "hoju@visi.com", "creation_time": "2008-08-20T07:32:11Z", "is_private": false, "attachment_id": null}]
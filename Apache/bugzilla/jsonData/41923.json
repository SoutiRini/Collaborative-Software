[{"count": 0, "tags": [], "text": "Hi,\n\ni'm using an apache WS with mod_jk 1.2.20 and a tomcat 5.5.xx on a linux \nsystem. I configured a loadbalancer with a worker. On this worker i \nset \"recovery_options=4\". I try to catch in my application the client abort ( \nthe client close of http connection), but cant get it. In my application i \ncant recognize the close of http connection on client side. Tomcat is writing \nevery time succesfully the response, if the client connection is alive or not. \nThe status of the response is in every case without an error (error=false) and \nit's commited.\nThe recovery_option 4, should be used to inform servlet engine about a broken \nclient connection but it doesnt work. I tried additionally the JKoption \nDiableReuse, but it doesnt change the situation.\n\nHope you can help or fix it or you have a workaround for this problem.\n\nthanks a lot for your help\n\ngreeting thomsen", "is_private": false, "id": 100754, "creator": "T.Jerichow@gmx.de", "time": "2007-03-21T13:26:28Z", "bug_id": 41923, "creation_time": "2007-03-21T13:26:28Z", "attachment_id": null}, {"count": 1, "text": "This question would be better asked on the users mailing list.", "bug_id": 41923, "is_private": false, "id": 100769, "time": "2007-03-21T19:26:22Z", "creator": "markt@apache.org", "creation_time": "2007-03-21T19:26:22Z", "tags": [], "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "T.Jerichow@gmx.de", "is_private": false, "count": 2, "id": 100780, "time": "2007-03-22T00:20:22Z", "bug_id": 41923, "creation_time": "2007-03-22T00:20:22Z", "text": "In my opinion its a bug, cause the description of recovery_option=4 said that \nservlet engine should be informed when client connection is lost. but it \ndoesnt works."}, {"count": 3, "tags": [], "bug_id": 41923, "attachment_id": null, "id": 100808, "time": "2007-03-22T15:48:19Z", "creator": "Tim.Whittington@orionhealth.com", "creation_time": "2007-03-22T15:48:19Z", "is_private": false, "text": "It's worth noting that recovery_options=4 doesn't actually do anything (unless a\nfix sneaked in without me noticing) - e.g. the behaviour of option 4 is the\ndefault behaviour.\n\nhttp://www.mail-archive.com/dev@tomcat.apache.org/msg12958.html"}, {"count": 4, "tags": [], "text": "But did you think its a bug? The documtation suggests here another behaviour. \nDont know if anybody from the developer team cares about it.\nDo you have a workaround for this problem, without changing architecture? I \nlooked in mod_jk sources but it contains only handling the response code, if \nrecovery_options=4 is set.", "attachment_id": null, "bug_id": 41923, "id": 101121, "time": "2007-03-28T11:38:21Z", "creator": "T.Jerichow@gmx.de", "creation_time": "2007-03-28T11:38:21Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 41923, "attachment_id": null, "text": "recovery_options 4 was supposed to ensure closure of the Tomcat-JK connection\nafter client error. In fact this is automatically true, and recovery_options 4\nhas no effect.\n\nNevertheless we should investigate, whether a servlet should be able to detect\nthe connection abort.", "id": 112419, "time": "2008-01-01T18:21:46Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2008-01-01T18:21:46Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 41923, "attachment_id": null, "id": 146514, "time": "2011-05-21T10:02:33Z", "creator": "timw@apache.org", "creation_time": "2011-05-21T10:02:33Z", "is_private": false, "text": "recovery_options 4 has for a long time explicitly flagged the AJP connection to be closed, although that's also the case for all other errors during a request/response cycle. \n\nThe closing of the socket was of the form of a clean shutdown though, with the response stream from Tomcat -> mod_jk being drained while the socket was shut down. This meant that Tomcat never experienced a write error, even when the client aborted the connection to the proxying web server.\n\nIn general, this is a limitation of the AJP protocol (there is no mod_jk -> Tomcat communication during the writing of a response, and so no way to feed back errors).\n\nI've made changes to hard close the AJP socket (without draining the response first) when recovery_options 4 is specified. This should propagate the write error back to the Tomcat side in most cases, but at the cost of a socket being left in TIME_WAIT each time.\n\nWithout recovery_options 4 specified, the AJP socket will be cleanly shutdown - although the fixes to bug 50839 will mean the AJP socket will still be uncleanly closed if the response exceeds 32k.\n\nI wouldn't rely on catching client aborts on the Tomcat side for anything meaningful (even leaving aside the difficulty in distinguishing a client abort from any other IOException in the Java API), but at least the behaviour matches the documentation to some degree now. Anything more advanced would require an enhancement to the AJP protocol.\n\nThis change will be in 1.2.32."}]
[{"count": 0, "text": "During tests of my web application, I need to download large file and save it on disk. To accomplish this I use an http request with a POST method to request the file and a \"Save Response to a file\" listener to save on disk the file. The size of the file to download is 441MB. My Jmeter (executed inside Windows XP 32 bit) started with -Xms1536m -Xmx1536m but, however, it goes to an OutOfMemory when start to write the file.\nDebugging the source I notice that the OutOfMemory succeed in the class ResultSaver.java, specifically at this line\n\n   pw.write(s.getResponseData());\n\nof the method:\n\n   private void saveSample(SampleResult s, int num)\n\nWhen java call s.getResponseData(), it get an array of byte of the size 441MB. The write method of the FileOutputStream class allocates the same space for writing data to a file, causing OutOfMemory.\nI have resolved this problem deleting the listener \"Save Response to a file\" and adding \"BeanShell PostProcessor\" with this code:\n\n   final int BUFFER_SIZE = 65536;\n   FileOutputStream fos = new  FileOutputStream(\"c:\\\\temp\\\\roberto\\\\ranemetestdwn.zip\");\n   for(int i = 0; i < data.length; i += BUFFER_SIZE) {\n       fos.write(data, i, Math.min(data.length-i, BUFFER_SIZE));\n   }\n   fos.close();\n\nWriting the file recursively, with a buffer of 64KB, none OutOfMemory error occur.\nThen, if no other side effects exist, I propose to use similar code in class ResultSaver.java, in place of \n\n   pw.write(s.getResponseData());", "bug_id": 54990, "attachment_id": null, "id": 167276, "time": "2013-05-18T14:01:59Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-18T14:01:59Z", "tags": [], "is_private": false}, {"count": 1, "text": "(In reply to comment #0)\n> When java call s.getResponseData(), it get an array of byte of the size\n> 441MB. \n\ns.getResponseData() returns a pointer to the data array.\n\n> The write method of the FileOutputStream class allocates the same\n> space for writing data to a file, causing OutOfMemory.\n\nAre you sure about that?\nWhich version of Java are you using?\nDo you have a stack trace?\n\nIf FOS really does behave that way, the propsed fix would obviously help reduce memory requirements.", "bug_id": 54990, "attachment_id": null, "id": 167277, "time": "2013-05-18T14:45:19Z", "creator": "sebb@apache.org", "creation_time": "2013-05-18T14:45:19Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 54990, "text": "Created attachment 30299\nThe Jmeter environment\n\nIn this screeshot you can see the JVM used during test", "id": 167286, "time": "2013-05-19T13:40:19Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-19T13:40:19Z", "is_private": false, "attachment_id": 30299}, {"count": 3, "tags": [], "bug_id": 54990, "attachment_id": 30300, "text": "Created attachment 30300\nConditions before the read of the stream", "id": 167287, "time": "2013-05-19T13:41:31Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-19T13:41:31Z", "is_private": false}, {"count": 4, "tags": [], "creator": "contiero_roby@libero.it", "text": "Created attachment 30301\nConditions after the read of the stream", "id": 167288, "time": "2013-05-19T13:43:07Z", "bug_id": 54990, "creation_time": "2013-05-19T13:43:07Z", "is_private": false, "attachment_id": 30301}, {"count": 5, "tags": [], "bug_id": 54990, "text": "Created attachment 30302\nConditions before returning from the readResponse method", "id": 167289, "time": "2013-05-19T13:45:44Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-19T13:45:44Z", "is_private": false, "attachment_id": 30302}, {"count": 6, "tags": [], "bug_id": 54990, "is_private": false, "text": "Created attachment 30303\nConditions after returning from the readResponse method", "id": 167290, "time": "2013-05-19T13:47:26Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-19T13:47:26Z", "attachment_id": 30303}, {"count": 7, "tags": [], "text": "Sorry, I didn't explain myself properly. It's obvious to me that s.getResponseData() returns a pointer to the data array, but returning a pointer to entire array, pw.write() allocates that space.\nI have reproduced the issue and I have attached some screenshots that explain my test. The jvm.jpg is my jmeter environment. The beforeReadStream.jpg shows the memory status before read the stream (on the right of the image you can see a Java VisualVM screenshot). When the stream has been readed, in the afterReadStream.jpg you can see that allocated memory is about 500MB. The w.toByteArray() instruction (see beforeReturnFromReadStream.jpg), at the end of the readResponse method of the class HTTPSamplerBase, requires as much memory (see afterReturnFromReadStream.jpg). Then, when I reach the pw.write(s.getResponseData()); line and execute it, I obtain an OutOfMemoryError (below, the stack trace from the beginning of the test):\n\n\n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: Listeners will be started after enabling running version \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: To revert to the earlier behaviour, define jmeterengine.startlistenerslater=false \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: Running the test! \n2013/05/19 10:53:45 INFO  - jmeter.gui.util.JMeterMenuBar: setRunning(true,*local*) \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: Starting ThreadGroup: 1 : simone \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: Starting 1 threads for group simone. \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: Thread will stop on error \n2013/05/19 10:53:45 INFO  - jmeter.threads.ThreadGroup: Starting thread group number 1 threads 1 ramp-up 60 perThread 60000.0 delayedStart=false \n2013/05/19 10:53:45 INFO  - jmeter.threads.JMeterThread: jmeterthread.startearlier=true (see jmeter.properties) \n2013/05/19 10:53:45 INFO  - jmeter.threads.JMeterThread: Running PostProcessors in forward order \n2013/05/19 10:53:45 INFO  - jmeter.threads.ThreadGroup: Started thread group number 1 \n2013/05/19 10:53:45 INFO  - jmeter.engine.StandardJMeterEngine: All thread groups have been started \n2013/05/19 10:53:45 INFO  - jmeter.threads.JMeterThread: Thread started: simone 1-1 \n2013/05/19 10:53:45 INFO  - jmeter.protocol.http.sampler.HTTPHCAbstractImpl: Local host = dell \n2013/05/19 10:53:45 INFO  - jmeter.protocol.http.sampler.HTTPHC3Impl: HTTP request retry count = 1 \n2013/05/19 10:53:45 INFO  - jmeter.util.JsseSSLManager: Using default SSL protocol: SSLv3 \n2013/05/19 10:53:45 INFO  - jmeter.util.JsseSSLManager: SSL session context: per-thread \n2013/05/19 10:53:45 INFO  - jmeter.util.SSLManager: JmeterKeyStore Location:  type JKS \n2013/05/19 10:53:45 INFO  - jmeter.util.SSLManager: KeyStore created OK \n2013/05/19 10:53:45 WARN  - jmeter.util.SSLManager: Keystore file not found, loading empty keystore \n2013/05/19 11:03:30 ERROR - jmeter.threads.JMeterThread: Test failed! java.lang.OutOfMemoryError\n\tat java.io.FileOutputStream.writeBytes(Native Method)\n\tat java.io.FileOutputStream.write(Unknown Source)\n\tat org.apache.jmeter.reporters.ResultSaver.saveSample(ResultSaver.java:189)\n\tat org.apache.jmeter.reporters.ResultSaver.processSample(ResultSaver.java:150)\n\tat org.apache.jmeter.reporters.ResultSaver.sampleOccurred(ResultSaver.java:140)\n\tat org.apache.jmeter.threads.ListenerNotifier.notifyListeners(ListenerNotifier.java:84)\n\tat org.apache.jmeter.threads.JMeterThread.notifyListeners(JMeterThread.java:783)\n\tat org.apache.jmeter.threads.JMeterThread.process_sampler(JMeterThread.java:442)\n\tat org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:256)\n\tat java.lang.Thread.run(Unknown Source)\n\n2013/05/19 11:03:30 INFO  - jmeter.threads.JMeterThread: Thread finished: simone 1-1 \n2013/05/19 11:03:30 INFO  - jmeter.engine.StandardJMeterEngine: Notifying test listeners of end of test \n2013/05/19 11:03:30 INFO  - jmeter.gui.util.JMeterMenuBar: setRunning(false,*local*)", "is_private": false, "id": 167291, "creator": "contiero_roby@libero.it", "time": "2013-05-19T13:52:50Z", "bug_id": 54990, "creation_time": "2013-05-19T13:52:50Z", "attachment_id": null}, {"count": 8, "tags": [], "creator": "sebb@apache.org", "text": "Thanks for the stacktrace etc.\n\nLooks like the memory allocation must be in the native method, as that is what causes the OOME in the stacktrace.\n\nSo I did some research and it seems that native code which accesses a Java array may involve copying the array (depending on the JVM):\n\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp1265\n\nThis is obviously a general issue with passing large arrays to native methods, and presumably affects many other file operations as they are likely to end up calling native methods.\n\nNeed to check whether there are other parts of JMeter that can write (or possibly read) large arrays.", "id": 167293, "time": "2013-05-19T14:31:22Z", "bug_id": 54990, "creation_time": "2013-05-19T14:31:22Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 54990, "is_private": false, "text": "Thank you for the tip, Sebastian. It has been my pleasure to help you.\nBy", "id": 167294, "time": "2013-05-19T15:32:56Z", "creator": "contiero_roby@libero.it", "creation_time": "2013-05-19T15:32:56Z", "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 54990, "is_private": false, "text": "URL: http://svn.apache.org/r1484366\nLog:\nDownload large files avoiding outOfMemory\nAdd utility method to do chunking and use in ResultSaver\nBugzilla Id: 54990\n\nModified:\n    jmeter/trunk/src/core/org/apache/jmeter/reporters/ResultSaver.java\n    jmeter/trunk/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java\n    jmeter/trunk/xdocs/changes.xml", "id": 167295, "time": "2013-05-19T23:26:23Z", "creator": "sebb@apache.org", "creation_time": "2013-05-19T23:26:23Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 54990, "attachment_id": null, "id": 167488, "time": "2013-05-29T20:09:24Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-05-29T20:09:24Z", "is_private": false, "text": "Date: Wed May 29 20:07:20 2013\nNew Revision: 1487627\n\nURL: http://svn.apache.org/r1487627\nLog:\nBug 54990 - Download large files avoiding outOfMemory\nUse method from commons-io\nBugzilla Id: 54990\n\nModified:\n    jmeter/trunk/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java"}, {"count": 12, "tags": [], "text": "Date: Mon Jun  3 19:40:17 2013\nNew Revision: 1489124\n\nURL: http://svn.apache.org/r1489124\nLog:\nBug 54990 - Download large files avoiding outOfMemory\nRollback as per sebb comment on dev list\nBugzilla Id: 54990\n\nModified:\n    jmeter/trunk/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java", "is_private": false, "bug_id": 54990, "id": 167625, "time": "2013-06-03T19:41:32Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2013-06-03T19:41:32Z", "attachment_id": null}]
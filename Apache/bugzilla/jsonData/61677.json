[{"count": 0, "tags": [], "creator": "yrashk@gmail.com", "attachment_id": null, "id": 201716, "time": "2017-10-27T10:49:40Z", "bug_id": 61677, "creation_time": "2017-10-27T10:49:40Z", "is_private": false, "text": "I have an issue with a particular CFBF MSG file (unfortunately, due to non-disclosure and privacy issues, I can't show this file), I am running into an issue, where NPOIFSFileSytsem's/BlockStore's chain loop detector is failing with this kind of error:\n\n```\njava.lang.ArrayIndexOutOfBoundsException: -1557822031\n        at org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector.claim(BlockStore.java:99)\n        at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.readCoreContents(NPOIFSFileSystem.java:441)\n```\n\nUpon inspection of the code, my understanding is that what happens here is that since int is signed (and in fact represents sector number within a valid range of 0x00000000 to 0xFFFFFFF9), the algorithm used in ChainLoopDetector is inherently flawed as it assumes that `offset` is always non-negative. However, if you look into `NPOIFSFileSystem.readCoreContents` I can see that the same value is also compared with the END_OF_CHAIN constant (reserved range), which means that the whole range from 0x00000000 to 0xFFFFFFF9 might be passed over to `ChainLoopDetector#claim`.\n\nCan anybody confirm if my hunch is correct? I'll gladly send a patch for the chain loop detector that'd work with `int` correctly."}, {"count": 1, "text": "Created attachment 35470\ntriggering file from govdocs1\n\nThe attached file from govdocs1 shows a similar stacktrace.  We have on the order of 100-200 ish documents in Tika's public regression set that trigger a similar trace.\n\n\njava.lang.ArrayIndexOutOfBoundsException: -65537\n    at org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector.claim(BlockStore.java:99)\n    at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:168)\n    at org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:142)\n    at org.apache.poi.poifs.property.NPropertyTable.buildProperties(NPropertyTable.java:81)\n    at org.apache.poi.poifs.property.NPropertyTable.<init>(NPropertyTable.java:66)\n    at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.readCoreContents(NPOIFSFileSystem.java:440)\n    at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:235)\n    at org.apache.poi.poifs.filesystem.NPOIFSFileSystem.<init>(NPOIFSFileSystem.java:168)\n    at org.apache.tika.parser.microsoft.OfficeParser.parse(OfficeParser.java:122)\n    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n    at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:280)\n    at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:135)\n    at org.apache.tika.parser.ParserDecorator.parse(ParserDecorator.java:188)\n    at org.apache.tika.parser.DigestingParser.parse(DigestingParser.java:74)\n    at org.apache.tika.parser.RecursiveParserWrapper.parse(RecursiveParserWrapper.java:158)\n    at org.apache.tika.batch.FileResourceConsumer.parse(FileResourceConsumer.java:406)", "bug_id": 61677, "attachment_id": 35470, "id": 201726, "time": "2017-10-27T13:07:51Z", "creator": "tallison@mitre.org", "creation_time": "2017-10-27T13:07:51Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 61677, "text": "I'm not extremely familiar with that chunk of code, but your hunch sounds right.  Thank you very much for digging through our code to find the cause.\n\nPerhaps Nick might have an idea?\n\nPlease do submit a patch and feel free to use the attached document for your unit test.", "id": 201727, "time": "2017-10-27T13:10:03Z", "creator": "tallison@mitre.org", "creation_time": "2017-10-27T13:10:03Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 61677, "text": "The earlier file I attached and nearly all of the other files that I've manually reviewed fail to open in MSWord.  This ppt[1] does open in MSPPT, but there are some issues with the images towards the end.\n\nAre you able to open your triggering file in Outlook?\n\n[1] http://162.242.228.174/docs/govdocs1/679/679046.ppt", "id": 201728, "time": "2017-10-27T13:29:43Z", "creator": "tallison@mitre.org", "creation_time": "2017-10-27T13:29:43Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 61677, "text": "Created attachment 35471\nlist of files with similar exception in Tika's regression corpus\n\nprefix with http://162.242.228.174/docs  to download.", "id": 201729, "attachment_id": 35471, "creator": "tallison@mitre.org", "creation_time": "2017-10-27T13:41:49Z", "time": "2017-10-27T13:41:49Z", "is_private": false}, {"count": 5, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 201737, "time": "2017-10-27T15:56:48Z", "bug_id": 61677, "creation_time": "2017-10-27T15:56:48Z", "is_private": false, "text": "Side-note: is anyone familiar with any Java developer tools that can analyze source or bytecode to find where an infinite loop could occur? If such a tool existed, would it be valuable to run this against our codebase as part of our test suite?"}, {"count": 6, "tags": [], "bug_id": 61677, "attachment_id": null, "text": "(In reply to Javen O'Neal from comment #5)\n> Side-note: is anyone familiar with any Java developer tools that can analyze\n> source or bytecode to find where an infinite loop could occur? If such a\n> tool existed, would it be valuable to run this against our codebase as part\n> of our test suite?\n\nSemmle / LGTM might be able to do this. There's a free version for open source projects - https://lgtm.com/", "id": 201745, "time": "2017-10-27T18:36:35Z", "creator": "apache@gagravarr.org", "creation_time": "2017-10-27T18:36:35Z", "is_private": false}, {"count": 7, "tags": [], "creator": "yrashk@gmail.com", "attachment_id": null, "id": 201804, "time": "2017-10-31T04:35:54Z", "bug_id": 61677, "creation_time": "2017-10-31T04:35:54Z", "is_private": false, "text": "Tim,\n\nThanks a lot for supplying additional files. Indeed, it does seem like the doc files can't be opened by Word, so the point is moot there.\n\nThe PPT file you attached doesn't seem to fail ChainLoopDetector at all. However, when I run it on my (unfortunately, undisclosable) file, it does trip ChainLoopDetector#claim with a negative index.\n\nHowever, once I replaced the boolean[] array with a HashSet<Integer> (to prevent the negative indices problem), I ran into a new issue. It looks like the problem is deeper than I originally thought.\n\nAt this point it trips FileBackedDataSource and its use of FileChannel#position. Both expect longs, but since some of the legitimate offsets NPOIFSFileSystem#getBlockAt() receives are interpreted as negatives (since, again, int is signed, and the actual numbers in the format are unsigned integers) it ends up passing a negative offset to FileBackedDataSource, which, of course, fails.\n\nThe most reasonable solution, it seems to me, is to rectify the problem at source. Using a signed integer where an unsigned one is expected is asking for trouble (and getting it).\n\nAs this project should work on Java 1.6+, we can't use Java 8's Integer.toUnsignedLong, but we could use a very simple helper function for that.\n\nFollowing through, I tried to convert the signed ints to unsigned ints (within longs), only to get to further problem of FileBackedDataSource not be able to read any bytes at the given offset (returning its own IndexOutOfBoundsException). \n\nSo at this point it feels to me as there are two potential reasons for this:\n\n1) The file is corrupt but somehow handled fine by Microsoft Office.\n2) POIFS' understanding of the format (could it be a compatibility issue of some kind?) is somehow wrong and the offsets read are not what they should be.\n\nThoughts?\n\n---\n\nAnother issue is that it looks like the only file that seems to be working perfectly well for Microsoft Office AND using the full range of unsigned int32 values for offsets is just that MSG file I can't disclose. I didn't check ALL of your doc files, but the first sample I had all failed to be opened in Office. With that in mind, if we can't find any other file like this, what would be our course of action?"}, {"count": 8, "tags": [], "bug_id": 61677, "text": "I investigated this issue further. It looks like Outlook is able to render the email, one of the attachment is actually broken (too short). To me it feels like Outlook (or whatever library they use for working with CFBF) is rather lazy (won't read everything in upon initialization) and POIFS is effectively more eager.\n\nDo you think there is any truth to this and possible workarounds? I'd rather have a portion of that email recovered than have nothing at all (effectively, minic Outlook's behaviour)", "id": 201805, "time": "2017-10-31T05:54:31Z", "creator": "yrashk@gmail.com", "creation_time": "2017-10-31T05:54:31Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 61677, "text": "We're moving to Java 8 for the next major release, so using Integer.toUnsignedLong might be possible going forward. However...\n\nI think there are some hard-baked assumptions in the code that no valid block will be beyond 2^31 mark. If that were to change, because of the way that Java arrays work (and we generally want to use Arrays not Maps/Sets for performance and memory utilisation), we'd have to change some places to potentially have a second array for the \"negative signed ints\" offsets\n\nFor your problematic MSG file, how big is the file itself? And are these negative offsets occurring in the Mini Stream (small blocks) or the Normal / Main Stream (big blocks)? Can other tools (eg OpenOffice, libgsf) read the file ok?\n\nThe spec <https://msdn.microsoft.com/en-us/library/dd942475.aspx> suggests that the maximum allowed size of a 512-blocksize file (eg MSG or DOC) is 2gb, so we shouldn't be anywhere near exceeding the 2^31 block index limit on big blocks. Even a mini stream (64 byte blocks for a 512 bigblock file) shouldn't, by my calculation, be able to exceed the 2^31 limit whilst still staying under 2gb for the overall filesize.\n\nI *think* that only 4096 byte block files should be able to get into the 0x80000000+ sector number range. Even if they did that with just the ministream, that's still a 128gb+ test file to trigger it, unless my maths is off!", "id": 201841, "time": "2017-11-02T07:45:40Z", "creator": "apache@gagravarr.org", "creation_time": "2017-11-02T07:45:40Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 61677, "attachment_id": null, "text": "I've hit a similar issue:\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException: -3\n\tat org.apache.poi.poifs.filesystem.BlockStore$ChainLoopDetector.claim(BlockStore.java:99)\n\tat org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:168)\n\tat org.apache.poi.poifs.filesystem.NPOIFSStream$StreamBlockByteBufferIterator.next(NPOIFSStream.java:142)\n\tat org.apache.poi.poifs.filesystem.NDocumentInputStream.readFully(NDocumentInputStream.java:264)\n\tat org.apache.poi.poifs.filesystem.NDocumentInputStream.read(NDocumentInputStream.java:162)\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.read(DocumentInputStream.java:127)\n\tat org.apache.poi.poifs.filesystem.DocumentInputStream.read(DocumentInputStream.java:122)\n\nSadly I can't share the MPP file that triggers this.", "id": 202880, "time": "2017-12-21T12:45:57Z", "creator": "jon.iles@bcs.org.uk", "creation_time": "2017-12-21T12:45:57Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 61677, "text": "Created attachment 35626\nMPP file triggers error when read with MPXJ 7.0.2 (POI 3.17)", "id": 202881, "attachment_id": 35626, "creator": "jon.iles@bcs.org.uk", "creation_time": "2017-12-21T12:56:47Z", "time": "2017-12-21T12:56:47Z", "is_private": false}]
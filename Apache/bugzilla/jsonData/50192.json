[{"count": 0, "tags": [], "bug_id": 50192, "text": "Revision 746425 changed at least 2 files: ELResolverImpl and ELContextImpl.  I believe this causes an unnecessary performance regression in these two files.\n\nIn ELResolverImpl, every time that getDefaultResolver is called with security enabled, a new Object is going to be created.  It appears as if getDefaultResolver is going to be called a lot and this could significantly hurt performance.  I understand changing the DefaultResolver to be private and allowing access to it through the getter method, however, I don't believe a new object needs to be created every time the method is called.\n\nIn ELContextImpl, why does a new FunctionMapper need to be created for each ELContextImpl?\n\nThanks.", "id": 141314, "time": "2010-11-01T15:17:42Z", "creator": "robert_goff828@yahoo.com", "creation_time": "2010-11-01T15:17:42Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 50192, "attachment_id": null, "id": 141566, "time": "2010-11-09T10:13:17Z", "creator": "markt@apache.org", "creation_time": "2010-11-09T10:13:17Z", "is_private": false, "text": "The reasoning for this change is in the archives:\nhttp://svn.apache.org/viewvc/tomcat/tc6.0.x/trunk/STATUS.txt?r1=729825&r2=729824&pathrev=729825"}, {"count": 2, "tags": [], "creator": "robert_goff828@yahoo.com", "attachment_id": 26282, "id": 141629, "time": "2010-11-11T10:43:05Z", "bug_id": 50192, "creation_time": "2010-11-11T10:43:05Z", "is_private": false, "text": "Created attachment 26282\nshared defaultResolver for each ELResolverImpl instance and reverts ELContextImpl"}, {"count": 3, "tags": [], "bug_id": 50192, "attachment_id": null, "text": "The NullFunctionMapper in ELContextImpl is a final object.  Therefore, it can not be overridden and the only method that it has is resolveFunction which will return null.  There is nothing about this object that could present a security issue.\n\nAs far as the ELResolverImpl is concerned, I can see how the static ELResolver could be accessed and it is possible that it would be altered by a malicious user.  However, I think that there could still be a performance gain here by not having each method withing the ELResolverImpl call getDefaultResolver().  Instead, you could create one defaultResolver for this particular instance (in the constructor) allowing all the methods for this instance to use that object, and you could still provide the static getDefaultResolver() method to return a new object each time.  This would at least save a few new constructions of the ELResolver when you're reusing the same ELResolverImpl object.\n\nPlease look at the patch to see the recommended change.", "id": 141630, "time": "2010-11-11T10:45:02Z", "creator": "robert_goff828@yahoo.com", "creation_time": "2010-11-11T10:45:02Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 50192, "attachment_id": null, "text": "Thanks for the analysis and the patch. I applied a slightly different version to 7.0.x that will be include din 7.0.5 onwards.", "id": 141679, "time": "2010-11-12T13:30:36Z", "creator": "markt@apache.org", "creation_time": "2010-11-12T13:30:36Z", "is_private": false}]
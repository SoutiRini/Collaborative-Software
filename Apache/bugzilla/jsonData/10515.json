[{"count": 0, "tags": [], "bug_id": 10515, "attachment_id": null, "id": 19073, "time": "2002-07-05T17:35:27Z", "creator": "pete@whitings.org", "creation_time": "2002-07-05T17:35:27Z", "is_private": false, "text": "I just upgraded to 2.0 today - all of my cgi-scripts that write debug to stderr\nnow hang. Prior to the upgrade, the output from these scripts showed up in the\nerror log. I've verified that the error log exists and can be written to by the\nhttpd process owner. Removing the debug statements from the CGI scripts fixes\nthe problem."}, {"count": 1, "tags": [], "bug_id": 10515, "attachment_id": null, "id": 19182, "time": "2002-07-09T17:19:38Z", "creator": "slive@apache.org", "creation_time": "2002-07-09T17:19:38Z", "is_private": false, "text": "Are you writing a very large quantity of stuff to stderr?"}, {"count": 2, "tags": [], "bug_id": 10515, "attachment_id": null, "id": 19186, "time": "2002-07-09T17:40:23Z", "creator": "wrowe@apache.org", "creation_time": "2002-07-09T17:40:23Z", "is_private": false, "text": "\n  This is not a new issue.  Linux has a 64kb pipe limit by default.  This means\n  that once our stdout or stderr have in excess of 64kb written, before Apache\n  has finished reading the request body and piping it to your CGI's stdin, you\n  will deadlock.\n\n  Try deferring your stderr logging until the entire body is read and the entire\n  response is written.\n"}, {"count": 3, "tags": [], "bug_id": 10515, "text": "This is an apache-2.0 only issue.  1.3 does not exhibit this problem, and is\nseriously hampering development for us.  \n\n\"Deferring your stderr logging until the entire body is read and the entire\nresponse is written.\" doesn't work for large scripts, sites, development\nenvironments, etc.  \n\nAlso, this system will hang with as little as 4k of std_err action at leasr on\nRH 6.soemthing, apache 2.0.40...  FreeBSD seems immune to this wackyness....\n\nfor example:\n// Credit to: K.C. Wong\n#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#define SIZE 4075\n\nvoid out_err()\n{\n\tchar buffer[SIZE];\n\tint i = 0;\n\n\tfor (i = 0; i < SIZE - 1; ++i)\n\t\tbuffer[i] = 'a' + (char )(i % 26);\n\n\tbuffer[SIZE - 1] = '\\0';\n\n//\nfcntl(2, F_SETFL, fcntl(2, F_GETFL) | O_NONBLOCK);\n\n\tfprintf(stderr, \"short test\\n\");\n\tfflush(stderr);\n\n\tfprintf(stderr, \"test error=%s\\n\", buffer);\n\tfflush(stderr);\n} // out_err()\n\nint main(int argc, char ** argv)\n{\n\tfprintf(stdout, \"Context-Type: text/html\\r\\n\");\n\tfprintf(stdout, \"\\r\\n\\r\\n\");\n\tout_err();\n\tfprintf(stdout, \"<HTML>\\n\");\n\tfprintf(stdout, \"<body>\\n\");\n\tfprintf(stdout, \"<h1>hello world</h1>\\n\");\n\tfprintf(stdout, \"</body>\\n\");\n\tfprintf(stdout, \"</HTML>\\n\");\n\tfflush(stdout);\n\texit(0);\n} // main()", "id": 21511, "time": "2002-08-22T01:31:54Z", "creator": "notgod@notgod.com", "creation_time": "2002-08-22T01:31:54Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 10515, "attachment_id": null, "text": "\n  I will preface this with a single observation, we will need to expand the\n  apr_poll api to include other 'objects', notably httpd-2.0 filters.  The\n  only way to accomplish this is to provide a set of added callbacks to\n  query the filter chain for a data-ready state, and then add the filter\n  endpoints (e.g. sockets or pipes) to the pollset if there is no data \n  ready from any filter [or other extended] source or ready to send to any \n  destination sink.\n\n  It is doable, but it is dirty.\n\n  It's my impression that the default pipe size on Linux had been 64kb.\n  Did this change somewhere along the way?  Is it a kernel tuning option\n  or can it be controlled with something like ioctl?\n\n  If we can make the CGI pipes accept 64kb, at least, this remains a problem\n  for both Win32 and Linux, but at least it's a sane boundry instead of 4kb!!!\n\n  ", "id": 21512, "time": "2002-08-22T04:01:15Z", "creator": "wrowe@apache.org", "creation_time": "2002-08-22T04:01:15Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "notgod@notgod.com", "text": "Hello.  I need to give a status update on this issue...  is there anyone \nactivly working on/assigned to a resolution for this issue?  If not, is there \nperhaps a way I can escalate the issue in any way?  I would offer to help, but \nI am not much of a developer, but this is a major stopping block for us at this \npoint.\n\nThanks in advance.  If I can help in any way, please let me know.", "id": 21774, "time": "2002-08-27T04:50:09Z", "bug_id": 10515, "creation_time": "2002-08-27T04:50:09Z", "tags": [], "is_private": false}, {"count": 6, "tags": [], "bug_id": 10515, "attachment_id": null, "id": 23474, "time": "2002-09-26T20:30:13Z", "creator": "mjc@apache.org", "creation_time": "2002-09-26T20:30:13Z", "is_private": false, "text": "Someone asked me if this was an Apache or OS issue; I asked our kernel guys who\nsaid:\n\n\"if nothing is reading the pipe (or the reader is held off from reading by your\nwriter user space locking) then 4K is the internal buffering on a linux pipe. \nYou can't change that.\n\nOk my assessment is that you either hit a weird glibc bug in stdio with pipes or\napache 2.x has a deadlock in its own pipe handling\""}, {"text": "Ran into the same behavior today.  After upgrading to Redhat 8, and apache\n2.0.40.  I just installed 2.0.43 and it exhibits the same lock.  Both PERL and C\n++ programs exhibit the locking.  Locking only happens when writing to STDERR. \nThis is using a stock Redhat 8 install.  Can reproduce on apache 2.0.40-8 (\nredhat default) and fresh build of 2.0.43.\n\nSample C++ CGI Program:\n//////////////////////////////////////////////\n#include <iostream>\n#include <sys/types.h>\n#include <unistd.h>\n\nusing namespace std;\n\nint main() {\n  cout << \"Content-Type:text/plain\\n\\n\";\n  cout << getpid() << endl;\n  sleep (20); // allow me to hook an strace to the pid\n\n  for (int i=0; i < 1000; i++) {\n    cout << \"Here \" << i << endl;\n    cerr << \"Here \" << i << endl;\n  }\n  return 0;\n}\n/////////////////////////////////////////////////////\n\nHere is the last of an strace up to hang:\n\nwrite(1, \"Here 466\\n\", 9)               = 9\nwrite(2, \"H\", 1)                        = 1\nwrite(2, \"e\", 1)                        = 1\nwrite(2, \"r\", 1)                        = 1\nwrite(2, \"e\", 1)                        = 1\nwrite(2, \" \", 1)                        = 1\nwrite(2, \"4\", 1)                        = 1\nwrite(2, \"6\", 1)                        = 1\nwrite(2, \"6\", 1)                        = 1\nwrite(2, \"\\n\", 1)                       = 1\nwrite(1, \"Here 467\\n\", 9)               = 9\nwrite(2, \"H\", 1)                        = 1\nwrite(2, \"e\", 1)                        = 1\nwrite(2, \"r\", 1)                        = 1\nwrite(2, \"e\", 1\n\n\n\n", "tags": [], "bug_id": 10515, "attachment_id": null, "count": 7, "id": 24158, "time": "2002-10-08T21:59:36Z", "creator": "michael@vpmonline.com", "creation_time": "2002-10-08T21:59:36Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 10515, "text": "I just installed a copy of apache 1.3.27.  The same sample program runs fine. \nAlways completes.", "id": 24160, "time": "2002-10-08T22:18:59Z", "creator": "michael@vpmonline.com", "creation_time": "2002-10-08T22:18:59Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "On standard RH8 and RH9 installations this script causes locking;\n\n#!/usr/bin/perl\n\nprint \"Content-type: text/html\\n\\n\";\nprint\n\"<html><head><title>Locked</title></head><body><h1>Locked</h1></body></html>\\n\";\n\nprint STDERR \"This will lock cgi\\n\" x 220; ## Slightly more than 4k\n\nThere are no problems on the same installations with apache 1.3.\n\n(More information on the same issue:\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=22030)", "attachment_id": null, "id": 44434, "creator": "Christian.Lizell@athega.se", "time": "2003-09-22T10:50:50Z", "bug_id": 10515, "creation_time": "2003-09-22T10:50:50Z", "is_private": false}, {"text": "the newer PR #22030 has more info, so leave that one open\n\n*** This bug has been marked as a duplicate of 22030 ***", "tags": [], "bug_id": 10515, "attachment_id": null, "count": 10, "id": 44438, "time": "2003-09-22T11:21:55Z", "creator": "trawick@apache.org", "creation_time": "2003-09-22T11:21:55Z", "is_private": false}]
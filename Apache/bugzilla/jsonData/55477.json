[{"count": 0, "tags": [], "bug_id": 55477, "is_private": false, "text": "Created attachment 30759\nPrototype of a nestable realm\n\nSometimes it would be quite handy to translate role names of a configured realm to the specifed security roles used in applications (web.xml). This would be especially comfortable with the JNDIRealm.\n\nExample: \n#1 dev environment\nmap ldap group developers to security role manager-jmx\n\n#2 production environment\nmap ldap group developers to security role manager-status\n\nI've already created a prototype of a nestable realm using a simple properties file (mapping.properties) for translation. I'm no programmer, so it might need some cleanup.\n\nConfiguration could look like this (not tested with JNDI yet):\n<Realm className=\"org.apache.catalina.realm.MappingRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n</Realm>", "id": 169684, "time": "2013-08-23T22:14:25Z", "creator": "stefan@mayr-stefan.de", "creation_time": "2013-08-23T22:14:25Z", "attachment_id": 30759}, {"count": 1, "tags": [], "text": "I haven't looked at the patch yet, but I wonder if configuring the wrapper-realm could be done directly in the context.xml like this:\n\n<Realm class=\"...MappingRealm\"\n   map=\"realmGroupName->securityGroupName, otherName->3rdName\">\n   ...\n</Realm>\n\nThoughts?", "attachment_id": null, "id": 169724, "creator": "chris@christopherschultz.net", "time": "2013-08-26T21:19:33Z", "bug_id": 55477, "creation_time": "2013-08-26T21:19:33Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 55477, "is_private": false, "text": "Should be possible. Where to find the rules about the security role naming conventions? The parsing of such an attribute might be tricky. Although this could be controlled by extra parameters (delimiter,assignation) if the defaults collide with names.\n\nIs it possible to access XML-Elements under the defined Realm? I think of something like\n\n<Realm class=\"...MappingRealm\">\n   <map security-role=\"r1\" group-name=\"g1\" />\n   <map security-role=\"r2\" group-name=\"g2\" />\n   ...\n</Realm>\n\nAn alternative could be using a ressource. Is it possible to use a map as ressource?", "id": 169725, "time": "2013-08-26T22:05:51Z", "creator": "stefan@mayr-stefan.de", "creation_time": "2013-08-26T22:05:51Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Yeah, you can access sub-elements (we use Digester, so it just needs to be configured, but I'd prefer not to modify the digester configuration if it's not necessary).\n\nI was a little worried about the delimiter stuff, and no, there aren't any rules against what a security role's name could be. I wanted to avoid commas because obviously LDAP group names are littered with commas. The map would be a nicer way to go. We could look to see if there's anything already recognized under <Realm> that could be used, here, or if something new is more appropriate.", "is_private": false, "bug_id": 55477, "id": 169735, "time": "2013-08-27T14:06:47Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-08-27T14:06:47Z", "attachment_id": null}, {"count": 4, "tags": [], "text": "Usual bean settings (like for a custom resource) which can be expressed in sub xml elements are attributes in the server.xml file.\n\nconfiguration in beans:\n<property name=\"map\">\n    <props key=\"role1\">value1</props>\n    <props key=\"role2\">value2</props>\n</property>\n\nTomcat: map=\"???\"\n\nAny pointer what I should search for?", "attachment_id": null, "id": 169751, "creator": "stefan@mayr-stefan.de", "time": "2013-08-27T21:58:30Z", "bug_id": 55477, "creation_time": "2013-08-27T21:58:30Z", "is_private": false}, {"count": 5, "tags": [], "text": "I'm not sure I understand your statement. Can you explain further?", "is_private": false, "bug_id": 55477, "id": 169774, "time": "2013-08-28T14:40:26Z", "creator": "chris@christopherschultz.net", "creation_time": "2013-08-28T14:40:26Z", "attachment_id": null}, {"count": 6, "tags": [], "text": "I thought about defining a custom ressource to make an inline configuration possible without messing with the Digester rules. So I searched and found http://tomcat.apache.org/tomcat-7.0-doc/jndi-resources-howto.html#Adding_Custom_Resource_Factories\n\nIf I understand this correct each attribute in the xml-Element resource will be accessible by my resource object (com.mycompany.MyBean).\ne.g.\n\nFrom the example:\n  <Resource name=\"bean/MyBeanFactory\" auth=\"Container\"\n            type=\"com.mycompany.MyBean\"\n            factory=\"com.mycompany.MyBeanFactory\"\n            bar=\"23\"/>\n\nhere we can access to \"bar\" and its value \"23\". Some more google searches later I found collection elements in spring beans: http://static.springsource.org/spring/docs/1.2.9/reference/beans.html#beans-collection-elements . There the bean attributes are configured using sub xml elements. But I cannot find tomcat examples where some sort of collection is written as attribute value (like bar=\"{collection-element-1}{collection-element-2}\") in the server.xml. I doubt this is even possible.\nSo I'm again with an external file, messing with strings or the digester rules.\n\nSorry if this is all a bit twisted. For me as a sysadmin programming is a not so easy", "attachment_id": null, "id": 169782, "creator": "stefan@mayr-stefan.de", "time": "2013-08-28T17:12:15Z", "bug_id": 55477, "creation_time": "2013-08-28T17:12:15Z", "is_private": false}, {"attachment_id": 30788, "tags": [], "bug_id": 55477, "is_private": false, "count": 7, "id": 169844, "time": "2013-08-31T10:42:10Z", "creator": "stefan@mayr-stefan.de", "creation_time": "2013-08-31T10:42:10Z", "text": "Created attachment 30788\nEdition with inline configuration for the role mapping\n\nI added the possibility to configure the mapping inline with the string mangling solution\n\nExample:\n<Realm className=\"org.apache.catalina.realm.MappingRealm\"\n       roleMappings=\"a=b;manager-gui=tomcat;c=d\">\n    <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n           resourceName=\"UserDatabase\"/>\n</Realm>\n\nOther attributes and their default values:\nassignment=\"=\"\nseparator=\";\"\npathname=\"conf/mapping.properties\"\n\nPeople using JDNIRealms with LDAP DNs will have to change assignment and separator (regex)strings. Maybe someone can come up with better default values."}, {"count": 8, "tags": [], "text": "Christopers version would be like this:\n\n<Realm class=\"...MappingRealm\"\n    separator=\",\\s*\"\n    assignment=\"->\"\n    roleMappings=\"securityGroupName->innerRealmGroupName, otherName->3rdName\"\n   ....\n/>", "attachment_id": null, "id": 169845, "creator": "stefan@mayr-stefan.de", "time": "2013-08-31T11:02:31Z", "bug_id": 55477, "creation_time": "2013-08-31T11:02:31Z", "is_private": false}, {"count": 9, "tags": [], "text": "Created attachment 30805\nMappingRealm incl. docs\n\nMappingRealm comments were reworked and initial documentation has been added to docs/config/realm.xml and docs/realm-howto.xml (mostly copy & paste from existing sections)", "is_private": false, "bug_id": 55477, "id": 169960, "time": "2013-09-08T09:56:52Z", "creator": "stefan@mayr-stefan.de", "creation_time": "2013-09-08T09:56:52Z", "attachment_id": 30805}]
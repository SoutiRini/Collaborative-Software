[{"count": 0, "tags": [], "bug_id": 40260, "text": "It is being used in a worker thread by xapool 1.5.0 as seen on the\nStacktrace:\n\nException in thread \"Thread-3\" java.lang.NullPointerException\n        at org.apache.log4j.helpers.PatternConverter.spacePad\n(PatternConverter.java:106)\n        at org.apache.log4j.helpers.PatternConverter.format\n(PatternConverter.java:82)\n        at org.apache.log4j.PatternLayout.format(PatternLayout.java:503)\n        at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301)\n        at org.apache.log4j.WriterAppender.append(WriterAppender.java:159)\n        at org.apache.log4j.AppenderSkeleton.doAppend\n(AppenderSkeleton.java:230)\n        at \norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders\n(AppenderAttachableImpl.java:65)\n        at org.apache.log4j.Category.callAppenders(Category.java:203)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.log(Category.java:853)\n        at org.apache.commons.logging.impl.Log4JLogger.info\n(Log4JLogger.java:133)\n        at org.enhydra.jdbc.util.Logger.info(Logger.java:43)\n        at org.enhydra.jdbc.pool.GenericPool.cleanUp(GenericPool.java:737)\n        at org.enhydra.jdbc.pool.PoolKeeper.run(PoolKeeper.java:60)\n        at java.lang.Thread.run(Thread.java:595)", "id": 92235, "time": "2006-08-15T21:45:09Z", "creator": "dario@sinistro.net", "creation_time": "2006-08-15T21:45:09Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "There's much more information needed.\nAre you using log4j-1.2.14?\nWhat are you doing when this is going to happen?\n\nCan you provide a TestCase to reproduce this behaviour?", "is_private": false, "bug_id": 40260, "id": 95739, "time": "2006-11-12T10:53:41Z", "creator": "kay.abendroth@raxion.net", "creation_time": "2006-11-12T10:53:41Z", "attachment_id": null}, {"count": 2, "tags": [], "creator": "r.l.wilson@qmul.ac.uk", "attachment_id": null, "text": "I am also getting the same error and same stack trace\n\nI am using log4j-1-2.14.jar, and tomcat 5.5.17\n\nThe exception, for me at least, occurs after \"auto\" deploying a new application\nwar file in tomcat's webapps dir ie.  without stopping tomcat.\n\nI had just installed log4j-1-2.14 after hitting bug 40159", "id": 98008, "time": "2007-01-12T10:04:08Z", "bug_id": 40260, "creation_time": "2007-01-12T10:04:08Z", "is_private": false}, {"count": 3, "tags": [], "creator": "hoju@visi.com", "attachment_id": null, "text": "Where do you have Log4j installed?  Is it in the WEB-INF/lib of each webapp,\nTomcat's common/lib, both?\n\nWhen you talk about the \"autodeploy\", are you dropping a WAR for the first time\ninto Tomcat or reloading an existing application after you've made an update and\nreplaced the existing WAR with a new one at runtime, trigging the \"autodeploy\"?\n\n\nJake", "id": 98024, "time": "2007-01-13T10:22:38Z", "bug_id": 40260, "creation_time": "2007-01-13T10:22:38Z", "is_private": false}, {"count": 4, "tags": [], "text": "I have the jar file in both the WEB-INF/lib dir of the webapp and common/lib\n\n\"autoDeploy\":  the latter.  replacing the war file and stopping/starting Tomcat\nworks fine, i only get this error if i replace the war file while tomcat is\nalready running.  I get the same error if i use Tomcat's online manager app to\nstop/start/undeploy/redeploy the same war file", "attachment_id": null, "bug_id": 40260, "id": 98056, "time": "2007-01-15T02:12:56Z", "creator": "r.l.wilson@qmul.ac.uk", "creation_time": "2007-01-15T02:12:56Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 40260, "attachment_id": null, "id": 98079, "time": "2007-01-15T09:00:12Z", "creator": "r.l.wilson@qmul.ac.uk", "creation_time": "2007-01-15T09:00:12Z", "is_private": false, "text": "I managed to get tomcat autoDeploy to work without generating this error but\nwhether (a) it is the underlying cause of the original posters problem  and/or\n(b) there is still something that could be improved in log4j's exception\nhandling i couldn't say.\n\nHaving just upgraded from Tomcat 4 where we were (for historical reasons) using\nlog4j's PropertyConfigurator in a servlet to load a log4j configuration file\nheld in our own directory for all our configuration files.  As soon as I renamed\nthis config file to log4j.properties and put it in the WEB-INF/classes directory\nthen I could autoDeploy sucessfully, as you might expect.\n\nI appreciate that this is how we are instructed to use log4j, especially in\nTomcat5, but given how the autoDeployment worked before upgrading to tomcat 5 i\nwas a little surprised that it didnt still work and that the error message was\nso obscure"}, {"count": 6, "tags": [], "bug_id": 40260, "attachment_id": null, "id": 117861, "time": "2008-06-20T05:27:26Z", "creator": "ann.campbell@shawinc.com", "creation_time": "2008-06-20T05:27:26Z", "is_private": false, "text": "I'm seeing this same problem:\n\nTomcat6 on Linux\nlog4j-1.2.7.jar loaded from WEB-INF/lib\n\nThis happens whether I stop/start the application from the Tomcat console or undeploy/deploy a new copy of the war (also via console.) This does not happen if I bounce Tomcat itself.\n\nI have a singleton running in its own thread. When the application is stopped, that singleton thread apparently remains in the JVM.\n\nWhen the app restarts, it checks for the existence of an old thread and if found, interrupts the thread.\n\nThe interrupted thread tries to log the interruption (at the INFO level) just before the stopThread() call. The null pointer exception is thrown as a result.\n\nLogging is not configured using PropertyConfigurator, but by hand in a company framework I'm using:\n\n    org.apache.log4j.LogManager.resetConfiguration();\n\n    LogMessage logMessage = new LogMessage(LogLevel.DEBUG);\n    logMessage.append(\"Configuring default logger\");\n\n    logFilePath = System.getProperty(\"log_file_path\");\n    if (logFilePath == null)\n    {\n      logFilePath = this.appAbsolutePath;\n      logMessage.append(\"Log file environment variable could not be found - defaulting to application absolute path.\");\n    }\n    else\n    {\n      if (!logFilePath.endsWith(\"\\\\\"))\n        logFilePath = logFilePath + \"\\\\\";\n    }\n\n    Element rootElement = null;\n    Element defaultLoggerElement = null;\n    PatternLayout defaultOutputPattern = null;\n    String defaultLevel = null;\n\n    try\n    {\n      rootElement = JDOMHelper.getRootElement(this.getClass(), DTD_FILE, CONFIG_FILE, true);\n    }\n    catch (JDOMHelperException e)\n    {\n      throw new ServiceException(\"JDOMHelperException in LogService.reloadConfig(): \" + e.getMessage());\n    }\n\n    defaultLoggerElement = rootElement.getChild(DEFAULT_LOGGER_ELEMENT);\n\n    // See if we have any over-riding destinations for the \"default\" (root) logger.\n    // They will be added later, after the \"destinations\" are defined.\n    List defaultDestinations = getDestinations(defaultLoggerElement);\n\n    defaultOutputPattern = getOutputPattern(defaultLoggerElement, logMessage);\n    defaultLevel = getLoggerLevel(defaultLoggerElement);\n    logMessage.append(\"Creating default Console logger.\");\n\n    ConsoleAppender consoleAppender = new ConsoleAppender(defaultOutputPattern);\n\n    // This is used only to configure the \"Root Logger\".\n    Logger logger = repository.getRootLogger();\n\n    // Remove any previous appenders to reconfigure the logging options.\n    logger.removeAllAppenders();\n    logger.addAppender(consoleAppender);\n\n    logMessage.append(\"Setting default Console Logger to \" + defaultLevel + \" level\");\n\n    logger.setLevel(LogLevel.toLevel(defaultLevel));\n\n    // Get the other loggers, if there are any.\n    // Element loggers = rootElement.getChild(LOGGER_ELEMENT);\n\n    logger.debug(logMessage.getMessage());\n\n    List destinationList = rootElement.getChildren(DESTINATION_ELEMENT);\n    if (destinationList == null || destinationList.size() == 0)\n      logger.debug(\"No log destinations defined.\");\n    else\n    {\n      int destinationCount = destinationList.size();\n      Element currentDestinationElement = null;\n      for (int i = 0; i < destinationCount; i++)\n        addDestination((Element) destinationList.get(i));\n    }\n\n    if (defaultDestinations != null)\n    {\n      logMessage = new LogMessage();\n\n      // Clear the root logger for the over-riding appenders.\n      logger.removeAllAppenders();\n\n      String appenderName = null;\n      Appender appender = null;\n      for (int i = 0; i < defaultDestinations.size(); i++)\n      {\n        appenderName = (String) defaultDestinations.get(i);\n        appender = (Appender) destinations.get(appenderName);\n        if (appender == null)\n          logMessage.append(\"Destination \" + appenderName + \" is not a valid logging destination.\");\n        else\n        {\n          logMessage.append(\"Adding \" + appenderName + \" destination to default logger.\");\n          logger.addAppender(appender);\n        }\n        appender = null;\n      }\n      LogLog.debug(logMessage.toString());\n    }\n\n    List loggerList = rootElement.getChildren(LOGGER_ELEMENT);\n\n    if (loggerList == null || loggerList.size() == 0)\n      logger.debug(\"No Loggers other than the default defined.\");\n    else\n    {\n      int loggerCount = loggerList.size();\n      Element currentLoggerElement = null;\n      for (int i = 0; i < loggerCount; i++)\n      {\n        addLogger((Element) loggerList.get(i));\n      }\n    }\n\n    if (destinations != null)\n    {\n      destinations.clear();\n      destinations = null;\n    }"}, {"count": 7, "tags": [], "text": "realized that it might also be helpful to know that my pattern looks like this:\n\n%d{MM/dd@HH:mm} - [%-5p] - %m%n\n\nAnd that the exception goes away if I remove the padding:\n\n%d{MM/dd@HH:mm} - [%p] - %m%n\n", "is_private": false, "bug_id": 40260, "id": 117868, "time": "2008-06-20T10:33:12Z", "creator": "ann.campbell@shawinc.com", "creation_time": "2008-06-20T10:33:12Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 40260, "is_private": false, "text": "This appears to be the result of Tomcat's class loader breaking what should be invariants in log4j.  See https://issues.apache.org/bugzilla/show_bug.cgi?id=41939 for a discussion.\n\nIn addition to the Tomcat options to stop nulling out static members on shutdown (described in the other thread), you might try using the EnhancedPatternLayout in the extras companion (http://logging.apache.org/log4j/companions/extras) which may less susceptible to this issue since it doesn't use static member variables to add space padding.\n\nSorry, but this does seem a Tomcat issue and log4j can't defend itself against a class loader that attacks its invariants.\n\n\n", "id": 117870, "time": "2008-06-20T13:14:16Z", "creator": "carnold@apache.org", "creation_time": "2008-06-20T13:14:16Z", "attachment_id": null}]
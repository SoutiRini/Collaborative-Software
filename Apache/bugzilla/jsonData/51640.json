[{"count": 0, "tags": [], "text": "Created attachment 27365\nExample Maven project to reproduce the problem\n\nclearReferencesJdbc seems to be causing reference leaks when used with com.oracle.ojdbc5 version 11.1.0.7.0, even if that class isn't loaded by the application.  As best as I can tell, that function is loading one or more classes from the jar.  Those classes are then adding a jmx MBean which then causes a reference leak.\n\n\nError message:\nAug 9, 2011 4:53:11 PM org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc\nSEVERE: The web application [/mavenproject1-1.0-SNAPSHOT] registered the JDBC driver [oracle.jdbc.OracleDriver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.\n\n\nList of classes in the class-loader:\n0 : class org.apache.catalina.loader.JdbcLeakPrevention (84 bytes)\n1 : class oracle.jdbc.driver.OracleDriver (84 bytes)\n2 : class oracle.jdbc.OracleDriver (84 bytes)\n3 : class oracle.jdbc.driver.OracleDriverExtension (84 bytes)\n4 : class oracle.jdbc.driver.OracleDriver$1 (84 bytes)\n5 : class oracle.jdbc.driver.DiagnosabilityMXBean (84 bytes)\n6 : class oracle.jdbc.driver.OracleDiagnosabilityMBean (84 bytes)\n7 : class oracle.jdbc.driver.DatabaseError (84 bytes)\n8 : class oracle.jdbc.driver.OracleSQLException (84 bytes)\n9 : class oracle.net.ns.NetException (84 bytes)\n10 : class oracle.jdbc.driver.SQLStateMapping (84 bytes)\n11 : class oracle.jdbc.driver.SQLStateMapping$Tokenizer (84 bytes)\n12 : class oracle.jdbc.driver.Message (84 bytes)\n13 : class oracle.jdbc.driver.Message11 (84 bytes)\n14 : class oracle.jdbc.internal.ObjectDataFactory (84 bytes)\n15 : class oracle.sql.ORADataFactory (84 bytes)\n16 : class oracle.sql.AnyDataFactory (84 bytes)\n17 : class oracle.jdbc.internal.ObjectData (84 bytes)\n18 : class oracle.sql.ORAData (84 bytes)\n19 : class oracle.sql.TypeDescriptorFactory (84 bytes) \n\nI believe this means that JdbcLeakPrevention is the first class to actually be loaded.\n\n\nSteps to reproduce:\n1) Compile the project, using the driver from http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-111060-084321.html\n2) Deploy the project to tomcat.\n3) Undeploy the project from tomcat.  You should get the error about clearReferencesJdbc\n\n\nExpected:\nWhile I would expect Tomcat to not leak the class, I would be happy if there was an option to make Tomcat not run clearReferencesJdbc, allowing me to undeploy the app without leaking.  This would not be as much of a problem if it wasn't causing the entire classloader and everything that implies to be leaked too.", "is_private": false, "id": 148515, "creator": "pmohr98@gmail.com", "time": "2011-08-10T00:21:38Z", "bug_id": 51640, "creation_time": "2011-08-10T00:21:38Z", "attachment_id": 27365}, {"count": 1, "tags": [], "bug_id": 51640, "attachment_id": null, "is_private": false, "id": 148525, "time": "2011-08-10T13:42:42Z", "creator": "markt@apache.org", "creation_time": "2011-08-10T13:42:42Z", "text": "clearReferencesJdbc should not (and does not) leave any JDBC drivers loaded.\n\nHowever, clearReferencesJdbc uses DriverManager to see what JDBC drivers are currently loaded. Unfortunately, the first ever call to DriverManager has the side-effect that any JDBC drivers in the current class loader will also be loaded. clearReferencesJdbc does ensure that any Driver loaded that way is immediately unloaded but when the Oracle driver is loaded it also creates the MBean and that triggers the leak.\n\nThe automatic creation of the MBean on driver load looks like a bug to me since there is no way for that MBean to be automatically destroyed when the Driver is unloaded. To my mind these things should be symmetric. You load the driver, you unload the driver. The MBean is automatically created, it should be automatically destroyed. Neither DriverManager nor Oracle's JDBC driver appear to follow this principle. Sigh.\n\nWhat I also realised while looking at this is that only the first web application to use DriverManager will have it's JDBC drivers automatically loaded (since initialised is a static in DriverManager). That could lead to an application working or not working depending on application start order.\n\nIt looks like the best way to fix both issues is to call DriverManager.getDrivers() from the JreMemoryLeakPreventionListener. That fixes the problem described here and ensures that web application behaviour will be consistent regardless of start order and usage of DriverManager.\n\nNote that even with this fix, if you use that Driver in a web application you will get a leak caused by the creation of the MBean.\n\nThis has been fixed in trunk and 7.0.x and will be included in 7.0.21 onwards."}, {"attachment_id": null, "tags": [], "bug_id": 51640, "text": "Sorry if this is an abuse of the bug tracker, but I'm hoping you might be able to answer two questions about this so I have a workaround:\n\n1) If I make sure to load the driver every time, then consistently unload it every time, then unload the MBean every time, should that work before and after the fix?\n\n2) If I put the jar in $CATALINA/lib, should that make sure the app's classloader is never leaked?\n\n\nFinally, that you for the quick help.", "count": 2, "id": 148527, "time": "2011-08-10T16:09:23Z", "creator": "pmohr98@gmail.com", "creation_time": "2011-08-10T16:09:23Z", "is_private": false}, {"count": 3, "tags": [], "creator": "knst.kolinko@gmail.com", "is_private": false, "text": "(In reply to comment #1)\n> This has been fixed in trunk and 7.0.x and will be included in 7.0.21 onwards.\n\nBackported to 6.0 in r1186014 and will be in 6.0.34 onwards.\n\n\nDocumentation regarding SQL DriverManager class has been added to the \"JDBC DataSources\" page in documentation (jndi-datasource-examples-howto.html).", "id": 150746, "time": "2011-10-19T08:18:25Z", "bug_id": 51640, "creation_time": "2011-10-19T08:18:25Z", "attachment_id": null}]
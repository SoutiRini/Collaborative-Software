[{"count": 0, "tags": [], "creator": "apachebugs@louisiana.edu", "attachment_id": null, "is_private": false, "id": 84915, "time": "2006-01-23T23:51:47Z", "bug_id": 38359, "creation_time": "2006-01-23T23:51:47Z", "text": "I'm running 2.0.55 with the worker MPM under Solaris 8.  I have a large PHP\napplication, Moodle 1.5.3+, that uses PHP 4.4.1 and Turck-mmcache-2.4.6.\nOccasionally, I find that one or more cpus are devoted 100% to an httpd task,\nthat is, the httpd daemon seems to be looping.  There are no error-log entries I\ncan find to explain this.  The Moodle application seems to continue running OK.\nI can kill -9 the looping process(es), and this seems to solve the symptom (of\ncpu load).  Since the server is a SunFire 890, I have 4 dual-core cpus.  One cpu\nrunning flat-out is 12.5% of system cpu resources.  \n\nThe URL above is a directory containing various traces: a script with prstat and\ntruss output, a core from the gcore command, and a script of some dbx commands\nand their output.  It seems to be the loop1 example is a tight loop that calls\nsemop() in libc and gets an EACCESS error.  Same for the second looping\ninstance.  But exactly what is repeatedly calling semop() isn't clear to me.\n\nI also put both the Apache and PHP configuration scripts I used, and their\noutput, in the above-mentioned directory.\n\nI use this same Apache build on other servers here on campus, and have not had\nany problems ... I think the load present on the Moodle server is key to this\nbehaviour.\n\nOne other factor seems related:  some time back, I was occasionally getting\nrunaway httpd procs and also these error msgs in the error-log:\nDeadlock situation detected/avoided: Failed to acquire global mutex\nDeadlock situation detected/avoided: apr_proc_mutex_lock failed.\n\nI found the commentary for Bugzilla Bug 32325, and added this to httpd.conf:\nAcceptMutex pthread\nThis greatly reduced the instances of runaways, but not completely, hence this\nreport.  I seem to be able to reproduce this problem on most busy days, and\nI am willing to insert debugging code, or try other Mutex methods ...\nHELP!\n-- James Dugal"}, {"id": 84934, "tags": [], "bug_id": 38359, "attachment_id": null, "count": 1, "text": "Running PHP in a threaded MPM is known to be unsafe.  Please use Prefork or   \nlimit yourself to thread-safe applications. ", "time": "2006-01-24T05:34:50Z", "creator": "nick@webthing.com", "creation_time": "2006-01-24T05:34:50Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 38359, "attachment_id": null, "text": "Are you spouting the \"accepted wisdom\" or did you bother to examine the traces I\nprovided?  As far as I know, PHP if properly compiled, IS thread-safe, and the worry\nis that some external library would NOT be thread safe. All the external ones\nI linked with I compiled myself with attention to making sure they were thread\nsafe (eg, mysql and mcrypt).  \n\nI am trying to see where the loop is invoked from the mutex code in Apache,\nthe suspicion being that it is not properly recovering from an error.  Do you\nunderstand what I am suggesting? ", "id": 84950, "time": "2006-01-24T18:58:43Z", "creator": "apachebugs@louisiana.edu", "creation_time": "2006-01-24T18:58:43Z", "is_private": false}, {"count": 3, "tags": [], "text": "I see no backtraces attached to this incident.\n\nNote you will need to provide backtraces on all the threads of the hung process,\nso it might be wise to drop the threads per process to some reasonable size such \nas 5.\n\nFinally, folks are often confused that it's the mutex code causing the problem.\nIf you look at most threads they SHOULD be sitting at a mutex, that means they\nhave no work to do at that instant, and are therefore chewing no CPU.\n\n", "attachment_id": null, "bug_id": 38359, "id": 84951, "time": "2006-01-24T19:15:59Z", "creator": "wrowe@apache.org", "creation_time": "2006-01-24T19:15:59Z", "is_private": false}, {"count": 4, "tags": [], "text": "I put lots of truss and dbx output, as well as the core files from a gcore, inthe\nsite given by the URL spec at the front of the original report (ie, it is\nhttp://suze.ucs.louisiana.edu:8080/apache-loop-bug/  )\n\nIs this acceptable?  If not I could attach the more interesting ones...\n\nThe 3 instances I document involved 4 threads remaining in a looping dhcpd\nprocess.  THe loop may be within libthread.so, invoking semop() repeatedly.\nI used dbx on the gcore and displayed the threads and lwps to try to provide\ncontext.\n\nI'll gladly provide more info if you tell me what you need!\n--James", "attachment_id": null, "bug_id": 38359, "id": 84955, "time": "2006-01-24T20:38:38Z", "creator": "apachebugs@louisiana.edu", "creation_time": "2006-01-24T20:38:38Z", "is_private": false}, {"count": 5, "attachment_id": null, "creator": "rpluem@apache.org", "is_private": false, "id": 84961, "time": "2006-01-24T22:35:55Z", "bug_id": 38359, "creation_time": "2006-01-24T22:35:55Z", "tags": [], "text": "What we actually need is a backtrace of the looping thread. Please see:\nhttp://httpd.apache.org/dev/debugging.html"}, {"count": 6, "tags": [], "text": "Created attachment 17495\nprstat, truss, and prstat output from Solaris 2.8\n\nAha!  That debugging page was most helpful!  I hope the trace info attached is\nuseful in knowing what to do next!", "is_private": false, "bug_id": 38359, "id": 84967, "time": "2006-01-25T02:04:45Z", "creator": "apachebugs@louisiana.edu", "creation_time": "2006-01-25T02:04:45Z", "attachment_id": 17495}, {"count": 7, "tags": [], "creator": "rpluem@apache.org", "text": "Thanks. Yes this helps, but you may not like the result. So do not shoot the\nmessenger :-).\nThe problem seems to be lwp# 11, as seen from truss:\n\n21826/11:\t809.8577\tsemop(983041, 0xFCD00AA8, 1)\t\t\tErr#13 EACCES\n\nAs you can see from the pstack output lwp# 11 is deep inside of php code:\n\n-----------------  lwp# 11 / thread# 9  --------------------\n fed9c054 _semsys  (fa800018, 1, 0, 0, 0, 0) + 8\n feb92428 _mm_lock (fa800000, 1, 19a758, 0, 0, 0) + 8\n feb742ec ???????? (fcd00e78, fcd01278, a4, 43d69f17, fcd00e78, fcd00d24)\n feb798c4 ???????? (fcd00e78, fcd01278, fcd00d24, 43d6980f, 3cd398, 0)\n feb7a0d8 mmcache_compile_file (fcd01904, 2, 3cd398, 41b600, 41b618, 3c0910) + 104\n fd95a7a0 zend_execute_scripts (8, 3cd398, 0, 3, 18, a6b500) + 80\n fd90a464 php_execute_script (41b624, 3d2ff0, 166da0, 0, fda1deb8, 9) + 3ec\n fd9776fc ???????? (4, fd9fcf84, 0, c6e0b0, 41b600, fda1e0c8)\n 0002fdfc ap_run_handler (c6e0b0, 3b, c6fb48, c6f2f0, 0, 3b) + 40\n 00030454 ap_invoke_handler (c6e0b0, 0, c6e0b0, 97df8, 0, 0) + f0\n 0002b5a8 ap_process_request (c6e0b0, 4, 4, c6e0b0, c8, 97ce8) + 54\n 00026224 ap_process_http_connection (3d9ae0, 14fc38, 3d99f0, c4, 3d9ad8,\n3db9c0) + 60\n 0003b018 ap_run_process_connection (3d9ae0, 3d99f0, 3d99f0, c4, 3d9ad8, 3db9c0)\n+ 40\n 0002c79c process_socket (3d99b8, 3d99f0, 3, 4, 3db9c0, 73c00) + 60\n 0002ced8 worker_thread (12f6b8, 0, 0, 72c1c, 10, fe401000) + 174\n fee0b01c _thread_start (12f6b8, 0, 0, 0, 0, 0) + 40\n\nSo Nick was correct at least with his assumption that it is a php problem.\nPlease report this bug to http://bugs.php.net/.\nAnyway thank you for using Apache httpd server.\n\nOne last hint: Try to use ipcs to find out more about the semaphore. The first\nparameter from the truss output of the failing semop is the semid that gets\ndisplayed by ipcs:\n\n21826/11:\t809.8577\tsemop(983041, 0xFCD00AA8, 1)\t\t\tErr#13 EACCES", "id": 85013, "time": "2006-01-25T23:09:26Z", "bug_id": 38359, "creation_time": "2006-01-25T23:09:26Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "text": "Thanks very much for your help!  I now understand much more about tracking\nthreads ... an old dog has learned a new trick!\n\nAs to PHP, this actually seems to be in Turck-MMcache, and I begin to think that\neither I have configured it badly, or it has the flaw, not PHP per-se. Ironic\nthat turch-mmcache is one of those external routines loaded by  PHP...", "is_private": false, "bug_id": 38359, "id": 85061, "time": "2006-01-26T17:29:20Z", "creator": "apachebugs@louisiana.edu", "creation_time": "2006-01-26T17:29:20Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 58244, "attachment_id": null, "text": "When accessing a web application that uses client certificate authentication run on Tomcat/APR (on Windows) with Firefox or Chrome, the client cert is \"lost\" after a short while. To the app it appears the client certificate was not sent.\n\nExample code (JSP fragment, can be the only content of a JSP file):\n\nUser client cert data:\n<%= ((java.security.cert.X509Certificate[])\nrequest.getAttribute(\"javax.servlet.request.X509Certificate\"))[0].\ngetSubjectX500Principal().toString()%>\n\nAfter a few refreshes of the page (where it will show the client certificate DN) the page will fail with a NullPointerException as request.getAttribute will return null. It usually happens in less than a minute. To be more precise: when reloading about once per second, the problem occurs almost every time after 30 seconds. After that each request will fail the same way, until I restart tomcat.\n\nThis happens with Firefox (v39 and v40) and Chrome (v44), but not with IE v11.\n\nIt also occurs with different versions of tomcat and Java (and OS bitness) - see below for a list.\n\nA simple test case using latest versions is:\n\n    download and extract apache-tomcat-8.0.24-windows-x64.zip\n    in the webapps folder create a folder named cert, there create a file named ccertA.jsp that contains the above code snippet\n\n    in server.xml add a line:\n\n    <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" secure=\"true\" scheme=\"https\" maxThreads=\"150\" URIEncoding=\"UTF-8\" SSLVerifyClient=\"optional\" SSLProtocol=\"TLSv1+TLSv1.1+TLSv1.2\" SSLPassword=\"testing\" SSLEnabled=\"true\" SSLCertificateKeyFile=\"C:/your_server_key_private.pem\" SSLCertificateFile=\"C:/ your_server_key _public.pem\" SSLCACertificateFile=\"C:/supported_client_CAs.pem\" />\n\n    start tomcat by executing startup.bat\n    open the page https://localhost:8443/cert/ccertA.jsp and keep refreshing it every few seconds\n    After about 30 seconds it will show a NPE exception error page.\n\nIf I don't use APR (by deleting the tcnative-1.dll file and adapting the connector syntax for JSSE) the problem does not happen.\n\nTried versions, all having the issue:\n\n    apache-tomcat-8.0.24-windows-x64 (also 32 bit version) - has APR 1.5.1 and TCN 1.1.33\n    apache-tomcat-6.0.44-windows-x64\n    Java 1.6.0 Updates 12 and 45\n    Java 1.8 Update 51\n    Windows 7 Pro SP1 64 bit\n    Windows 7 Pro SP1 32 bit\n    Window 8.1 Pro 64 bit\n    Windows 10 Home 64 bit\n    Firefox versions 39.0 39.0.3 and 44\n    Chrome v44\n    Ubuntu 14.04 LTS 64 bit / tomcat 7.0.52-1ubuntu0.3 / libapr1:amd64 1.5.0-1 / libtcnative-1:amd64 1.1.29-1\n\nA similar issue was discussed on the tomcat-users mailing list in 2010: \"Client certificate gone after 1 minute timeout (SSL, APR)\" [1] but with no solution. I posted there myself recently ( \"Firefox SSL with APR - losing client certificate\" [2] has a bit more details), but it is basically just my monologue.\n\n\nOriginally I tested with a server certificate issued by my private testing CA. Now I also tried with a \"real\" certificate issued by trusted CA. (I used my personal certificate. The browser complained about the hostname mitmatch which I clicked away).\n\n\nCan upload test CA, server-cert/key and client cert/key for test if requiered.\n\n[1] http://grokbase.com/t/tomcat/users/102pdv412y/client-certificate-gone-after-1-minute-timeout-ssl-apr\n[2] http://www.mail-archive.com/users@tomcat.apache.org/msg118902.html", "id": 184568, "time": "2015-08-14T15:00:46Z", "creator": "david.balazic@comtrade.com", "creation_time": "2015-08-14T15:00:46Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 58244, "attachment_id": 33041, "text": "Created attachment 33041\nTest case to reproduce issue\n\nThe issue persists with the new apache-tomcat-8.0.26-windows-x64.\n\nI attach a WAR file that can be used to reproduce the issue. Either unpack the single JSP file in it and put it into the webapps folder under its own folder (like tomcat/webapps/x/a.jsp) or deploy the WAR file under webapps/.\n\nThe WAR file also contains the CA's, server and client certificates that can be used for the test.\n\nSteps:\n - download and extract apache-tomcat-8.0.26-windows-x64.zip\n - (make sure you have a Java environment, JAVA_HOME must be set)\n - in conf/server.xml add:\n\n<Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" secure=\"true\" scheme=\"https\"\nmaxThreads=\"150\" URIEncoding=\"UTF-8\" SSLVerifyClient=\"optional\"\nSSLPassword=\"testing\" SSLEnabled=\"true\"\nSSLCertificateKeyFile=\"C:\\snakeoil-rsa.key\"\nSSLCertificateFile=\"C:\\snakeoil-rsa.crt\"\nSSLCACertificateFile=\"C:\\CAs.crt\" />\n\nThe certificate files are in the WAR file, extract them to C:\\ (or elsewhere).\n\n - put the a.war file to the webapps folder\n - start tomcat by startup.bat\n - import the my3.p12 certificate to Firefox (the password is : test )\n - in Firefox load the page https://localhost:8443/a/a.jsp (when asked, select the certifcate imported from my3.p12)\n - refresh the page (F5) every few seconds\n\nActual result: about 30 seconds after the first load of page, the page will show a NPE instead of the certificate name\n\nExpected: no NPE\n\nNote: the issue usually happens in 30 seconds, but sometimes it goes on without error for longer. If so, stop and restart tomcat and try again.", "id": 184759, "time": "2015-08-26T11:25:09Z", "creator": "david.balazic@comtrade.com", "creation_time": "2015-08-26T11:25:09Z", "is_private": false}, {"count": 2, "tags": [], "creator": "david.balazic@comtrade.com", "text": "The problem also goes away temporarily if I restart Firefox or just clear the \"Active Logins\" in the history deleting dialog. Then after 30 seconds it happens again.\nMaybe related to SSL session length?\n\nAny suggestion how to debug this is welcome.", "id": 185320, "attachment_id": null, "bug_id": 58244, "creation_time": "2015-09-17T19:04:12Z", "time": "2015-09-17T19:04:12Z", "is_private": false}, {"count": 3, "tags": [], "creator": "chris@christopherschultz.net", "attachment_id": null, "id": 185395, "time": "2015-09-21T20:20:02Z", "bug_id": 58244, "creation_time": "2015-09-21T20:20:02Z", "is_private": false, "text": "If you use Wireshark or a similar packet-capture rig, can you see\nwhether the browser is changing the way it sends its data?\n\nWith Wireshark, you can install the server's private key and then you\ncan read all the encrypted traffic. Wireshark will disassemble all the\npackets and even give you rich information at the protocol-level about\nwhat's in there. You can probably tell the difference between what\nFirefox or Chrome sends to the server both before and after the \"loss\"\nof the certificate.\n\nI'd like to confirm whether the browser or Tomcat is causing this problem... my suspicion is that it's the browser."}, {"count": 4, "tags": [], "bug_id": 58244, "attachment_id": null, "text": "We have similar (maybe the same) problem.\n\nWe run\n- Tomcat 8.0.24 with APR.\n- HTTPS APR connector with SSLVerifyClient=\"require\".\n- on Debian 6\n\nClient is a legacy application with no HTTPS support. So it uses \"stunnel\" (https://www.stunnel.org) for http-to-https proxy.\n\n1) At the first request from this client ... server application sees client's certificate in javax.servlet.request.X509Certificate correctly.\n\n2) Second and any subsequent requests within the same stunnel connection ... server application didn't see client's certificate, javax.servlet.request.X509Certificate is null.\n\n3) After stunnel daemon is restarted, the first request is proceed correctly (with certificate info in javax.servlet.request.X509Certificate) and subsequent requests has javax.servlet.request.X509Certificate = null.\n\nThe difference is that (based on stunnel's logfile) the first request creates a new SSL session, and subsequent requests reuses that session.\nMaybe there is a problem within APR that client certificate is not available when SSL session is reused.\n\n(Other clients than stunnel works without problem.)", "id": 186086, "time": "2015-10-29T12:45:06Z", "creator": "petr.brouzda@gmail.com", "creation_time": "2015-10-29T12:45:06Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 58244, "attachment_id": 33232, "text": "Created attachment 33232\n100 % repeatable test case\n\nBetter test-case for this bug.", "id": 186109, "time": "2015-10-30T09:36:11Z", "creator": "petr.brouzda@gmail.com", "creation_time": "2015-10-30T09:36:11Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58244, "text": "I've created a 100 % repeatable testcase.\n\nIn attached file (https://bz.apache.org/bugzilla/attachment.cgi?id=33232) you can find:\n1) configuration for Tomcat and a simple web application from David Balazic's test case\n2) direct SSL test from curl - works OK everytime\n3) SSL test via stunnel - first request works OK, any subsequent requests fails, because Tomcat provide no certificate information.\n\nTested on centos6 (x64) with Tomcat 8.0.28, APR based Apache Tomcat Native library 1.1.33 using APR version 1.3.9.\n\nSteps to reproduce the problem:\n\nA) Prerequisities\nsudo yum install stunnel curl\n\nB) Run Tomcat\n1) Install Tomcat 8.0.28 (I've used the /home/user/tomcat-test/apache-tomcat-8.0.28/ directory).\n2) Build and configure Native APR .\n3) Copy contents of apache-tomcat-8.0.28/ directory from .tar.gz to your Tomcat directory.\n4) Check paths to certificates in conf/server.xml.\n5) Start Tomcat. It should listen on port 8443, SSL with required client certificate. You can find client certificate in client-curl/client.pem.\n6) There is a simple app: https://127.0.0.1:8443/test/a.jsp which prints user's certificate information.\n\nC) Test the connection from curl\n1) There is test.sh in test-curl/\n2) Make it executable and run it.\n3) It should connect to 8443 and run the test app. test.out = result from app. test.log = SSL log.\n4) test.out should be like:\n User client cert data:\n CN=TEST CLIENT, O=Internet Widgits Pty Ltd, ST=CZ, C=CZ\n <br>\n Time: Fri Oct 30 12:39:21 CET 2015\n\nD) Run the stunnel test\n1) There is run-stunnel.sh in client-stunnel/ \n2) Check the paths in this file (if you saved it elseqwhere) and run is as root (sudo ./run-stunnel.sh )\n3) Stunnel creates listening port 8442, which accepts plain HTTP and forwards it to HTTPS 8443 with client certificate. Stunnel will run on console. Keep it running.\n4) Open another console and run test.sh in the same directory. It will send the plain http request to 8442; request will be enveloped to https by stunnel and forwarded to 8443. Result will be printed on console:\n\n   [user@localhost client-stunnel]$ ./test.sh\n   User client cert data:\n   CN=TEST CLIENT, O=Internet Widgits Pty Ltd, ST=CZ, C=CZ\n   <br>\n   Time: Fri Oct 30 13:08:08 CET 2015\n\n5) Run it once more. It will fail - no certificate is returned by Tomcat's request.getAttribute(\"javax.servlet.request.X509Certificate\").\n\n [user@localhost client-stunnel]$ ./test.sh\n <!DOCTYPE html><html><head><title>Apache Tomcat/8.0.28 - Erro...\n\nAny subsequent requests from the same stunnel connection will reuse SSL session and will produce the same error.\nIf you stop and start stunnel again, the first request will be OK (certificate passed to application) and subsequent requests will fail again.", "id": 186110, "time": "2015-10-30T09:56:38Z", "creator": "petr.brouzda@gmail.com", "creation_time": "2015-10-30T09:56:38Z", "is_private": false, "attachment_id": null}, {"count": 7, "text": "Wy is there an expectation, that a client certificate is present when an ssl session is resumed? Isn't the client cert only needed during the initial handshake? I wouldn't expect it to be persistet on the server side and by available for followup requests as long as the ssl session is resumed and no new full handshake happens.", "bug_id": 58244, "attachment_id": null, "id": 186319, "time": "2015-11-08T16:18:24Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2015-11-08T16:18:24Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 58244, "text": "(In reply to Rainer Jung from comment #7)\n\nTwo reasons:\n\n1) It makes client certificate UNUSABLE for authentication if client cert information are not present on subsequent HTTP requests. SSL session can be started OUTSIDE of my application - for example when there are more than one apps on the server. \nSo client works with application A... and then he send request to application B. It is single SSL session for his browser, so application B won't receive client certificate info? Bad behaviour, I think.\n\n2) This behaviour is specific for Tomcat with APR.\nIn any other environment I know (Tomcat with standard JSSE, IBM WebSphere) it works correctly - client certificate information are present for every request, regardless of SSL sessions.\nSo application that works correctly with Tomcat/JSSE and with IBM WebSphere will fail on Tomcat/APR.", "id": 186320, "time": "2015-11-08T17:11:00Z", "creator": "petr.brouzda@gmail.com", "creation_time": "2015-11-08T17:11:00Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "creator": "david.balazic@comtrade.com", "attachment_id": null, "id": 186561, "time": "2015-11-25T17:53:40Z", "bug_id": 58244, "creation_time": "2015-11-25T17:53:40Z", "is_private": false, "text": "News update:\n\nwith newer software vserions, the behavior changed slightly.\n\nServer side:\n - before: Java 1.8.0u51 , apache 8.0.24/26\n - now   : Java 1.8.0u60 , apache 8.0.28\n\nClients:\n - before: Firefox (v39 and v40) and Chrome (v44)\n - now   : Firefox (v42.0) and Chrome (v46)\n\nNew behavior:\n - Java 1.8.0u60 + Apache 8.0.28 + FF 42.0 = problem appears only if page is left with no activity for 60 seconds (unlike before when the problem appeared after 30 seconds even if refreshing/reloading the page every few seconds)\n\n - Java 1.8.0u60 + Apache 8.0.28 + Chrome 46 : when refreshing page, not problem even after 60 secs, if page left inactive: problem occurs after 60 seconds\n\n - Java 1.8.0u60 + Apache 8.0.28 + IE11: after 13 minutes of inactivity the problem does not occur (did not test longer, but the problem never occurred with IE before either)\n\n\n* Apache 8.0.28 = http://www.apache.si/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28-windows-x64.zip\n\n\nNew clients with old apache 8.0.26:\n\n - Chrome 46: when refreshing page, not problem even after 60 secs\nif page left inactive: problem occurs after 60 seconds\n\n - FF 42.0: when refreshing page, not problem even after 60 secs\nif page left inactive: problem occurs after 60 seconds\n\n\nSo it seems the newer browsers changed behavior.\n\nAdditional note: in both Chrome and Firefox after a longer period of inactivity (like 5 minutes) if the page is refreshed, it will work correctly. Apparently in such cases everything is done from new, as if it were connecting for the first time."}, {"count": 10, "tags": [], "bug_id": 58244, "text": "With the Apache 8.0.29 released just now it is the same as with 8.0.28", "id": 186564, "time": "2015-11-25T18:59:33Z", "creator": "david.balazic@comtrade.com", "creation_time": "2015-11-25T18:59:33Z", "is_private": false, "attachment_id": null}, {"text": "Same with tomcat version 8.0.32 which bundles OpenSSL 1.0.2e (see below)\n\nThe issue remains (with the change that now IE can not connect at all,\nit complains about some TLS stuff, did not look into it).\n\nVersion details (from tomcat startup log):\nLoaded APR based Apache Tomcat Native library 1.2.4 using APR version 1.5.1.\nOpenSSL successfully initialized (OpenSSL 1.0.2e 3 Dec 2015)", "tags": [], "bug_id": 58244, "attachment_id": null, "count": 11, "id": 188389, "time": "2016-02-12T17:11:44Z", "creator": "david.balazic@comtrade.com", "creation_time": "2016-02-12T17:11:44Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 58244, "attachment_id": null, "text": "David, you still haven't said whether this is a case of the browser not sending the certificate or the servlet ignoring it when it's sent. Using Wireshark should allow you to do that.\n\nIf the browser does not send the certificate, the only way for Tomcat to deal with that would be to store the certificate (and chain?) somewhere along with a mapping to the TLS session identifier (which should ALWAYS be available).\n\nIf a TLS session re-start occurs, the client cert should be presented again, and there should be continuity, there. Please confirm also that, when the cert disappears, that your TLS and HTTP sessions are not interrupted.", "id": 188473, "time": "2016-02-16T15:35:13Z", "creator": "chris@christopherschultz.net", "creation_time": "2016-02-16T15:35:13Z", "is_private": false}, {"count": 13, "tags": [], "creator": "markt@apache.org", "text": "It appears to be related to session tickets. If you set disableSessionTickets=\"true\" the problem goes away.\n\nSome quick background reading indicates that the session ticket should include the client cert so my current theory is that something isn't handling the session resumption correctly. I'll take a look but I'm not at all familiar with the code so if someone who is wants to take a look as well ...", "id": 188589, "attachment_id": null, "bug_id": 58244, "creation_time": "2016-02-18T23:44:36Z", "time": "2016-02-18T23:44:36Z", "is_private": false}, {"count": 14, "tags": [], "creator": "markt@apache.org", "text": "OK. I think I have found the problem.\n\nTomcat looks for two pieces of information when looking up client certs.\nFrom AprSSLSupport:\nint certLength = SSLSocket.getInfoI(socketRef, SSL.SSL_INFO_CLIENT_CERT_CHAIN);\nbyte[] clientCert = SSLSocket.getInfoB(socketRef, SSL.SSL_INFO_CLIENT_CERT);\n\nIn OpenSSL those map to\nSSL_SESSION->peer_chain\nSSL_SESSION->peer\n\nThe problem is that in d2i_SSL_SESSION when the session is repopulated from the ticket, peer is populated but peer_chain is not. i2d_SSL_SESSION doesn't save the peer certificate chain either.\n\nRFC5077 appears to allow full certificate chains to be present in the ticket.\n\nSome more digging has unearthed this from the OpenSSL issue tracker:\nhttps://rt.openssl.org/Ticket/Display.html?id=2288\n\nIt looks like addressing this is not a high priority for OpenSSL.\n\nWe might be able to work-around this on the Tomcat side to expose the client cert minus the chain and document that as a known restriction when using session tickets.", "id": 188592, "attachment_id": null, "bug_id": 58244, "creation_time": "2016-02-19T00:49:12Z", "time": "2016-02-19T00:49:12Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 58244, "attachment_id": null, "text": "Ok, that sounds hard. The new OpenSSL code should avoid the problem in most cases since the certificates are cached in the SSL engine.", "id": 188602, "time": "2016-02-19T09:14:33Z", "creator": "remm@apache.org", "creation_time": "2016-02-19T09:14:33Z", "is_private": false}, {"count": 16, "tags": [], "bug_id": 58244, "attachment_id": 33578, "text": "Created attachment 33578\nPotential patch if OpenSSL decide this is a WONTFIX\n\nWorking around this in Tomcat is quite simple. It does mean the full chain is only available on the initial connection. Subsequent connections only get the user cert. That is probably sufficient for most use cases. Where that isn't sufficient, the app can always cache the chain in the session. Another option is for the CLIENT-CERT authenticator to cache the chain in the session.\n\nI'm following this up with the OpenSSL folks. If it is indeed a WONTFIX then we can apply this patch or something along these lines.", "id": 188644, "time": "2016-02-21T16:49:43Z", "creator": "markt@apache.org", "creation_time": "2016-02-21T16:49:43Z", "is_private": false}, {"count": 17, "tags": [], "bug_id": 58244, "attachment_id": null, "text": "It looks like the OpenSSL behaviour isn't going to change so I've gone ahead and handled this in the Tomcat code.\n\nFixed in:\n- trunk for 9.0.0.M27 onwards\n- 8.5.x for 8.5.21 onwards\n- 8.0.x for 8.0.47 onwards\n- 7.0.x for 7.0.82 onwards", "id": 200398, "time": "2017-08-21T14:16:28Z", "creator": "markt@apache.org", "creation_time": "2017-08-21T14:16:28Z", "is_private": false}]
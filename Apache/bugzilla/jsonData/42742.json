[{"count": 0, "tags": [], "bug_id": 42742, "attachment_id": null, "id": 104719, "time": "2007-06-26T04:15:24Z", "creator": "stevel@apache.org", "creation_time": "2007-06-26T04:15:24Z", "is_private": false, "text": "as you can see from , http://jira.smartfrog.org/jira/browse/SFOS-167 , we've\nbeen running out of PermGenHeapSpace on windows (XP and vista) builds. We have a\nworkaround for this (increase the permgen heap size in ANT_OPTS), but the\nproblem remains.\n\nPermGenHeapSpace is where the JVM keeps\n -intern'd strings\n -loaded classes and all the introspection stuff\nBy the end of a (working) build, we had 4000+ classes loaded, which is quite a lot.\n\nWhat I'm wondering is are antlibs and taskdefs somehow leaking classloaders and\nhence classes. all our (15+) child projects are designed to run standalone, so\nuse ivy via antlib declarations and taskdef ivy and smartfrog explicitly.\n\nI could add more checks before declaring stuff, but fear there may be some\nfundamental leaking of stuff that big ivy cross-project builds is showing up"}, {"count": 1, "tags": [], "bug_id": 42742, "attachment_id": null, "id": 104742, "time": "2007-06-26T15:10:16Z", "creator": "stevel@apache.org", "creation_time": "2007-06-26T15:10:16Z", "is_private": false, "text": "Note for the curious that the jira bugrep includes a heap dump that you can use\njava6;s jhat against (\nhttp://jira.smartfrog.org/jira/secure/attachment/10030/java_pid1292.julio.zip ) \n\nIf you look at the list of classes that are leaking, its the custom tasks that\nare being taskdef'd, in particular ivy, primarily because its so big (once jhat\nis running, the url is http://localhost:7000/allInstances/0x6ae5d00).\n\nI'm loading these using typedef, rather than antlib uris, because each task is\ndesigned to be self contained. I may be able to go back and skip the loading if\nthey are already on the classpath, but \n 1. we could maybe make this an option (reload=true/false) to check before loading\n 2. can't we stop loading so many instances? Surely when we exit a project, its\ngone."}, {"count": 2, "tags": [], "bug_id": 42742, "attachment_id": null, "id": 104757, "time": "2007-06-27T03:44:39Z", "creator": "peterreilly@apache.org", "creation_time": "2007-06-27T03:44:39Z", "is_private": false, "text": "It is hard to track down all memory leakages.\nIt would be nice to have a build file that showed\nthe problem (without ivy if possible or at least\nwithout need for a network connection - i.e. self-contained).\n\nFor ant 1.7.0 a number of classloader related memory leakages\nhave been fixed - see for example:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=33061\n"}, {"count": 3, "tags": [], "bug_id": 42742, "attachment_id": null, "id": 104758, "time": "2007-06-27T04:06:45Z", "creator": "stevel@apache.org", "creation_time": "2007-06-27T04:06:45Z", "is_private": false, "text": "1. peter, this ant 1.7.0 retail. There's a big check for older version up front\nand we halt the build with an error message. \n\n2. its not one single build, it is a big chained build that is causing excess\nclassloadings. You can replicate it by checking out \n\nsvn co https://smartfrog.svn.sourceforge.net/svnroot/smartfrog/trunk/core\nsmartfrog-core \nthen running \"ant cruise\"\n\n3. Its not really ant itself that is leaking, or even the tasks, more the fact\nthat if every build file reloads tasks (so it works self contained), the tasks\nhang around after that subant-initiated build terminates. "}, {"count": 4, "tags": [], "creator": "sbailliez@apache.org", "attachment_id": null, "id": 104783, "creation_time": "2007-06-27T13:57:46Z", "time": "2007-06-27T13:57:46Z", "bug_id": 42742, "text": "Note that I have the same problem with our build at the company, but I learned\nfrom an early age not to trust this type of meta build but fork individual build\ninstead.", "is_private": false}, {"count": 5, "tags": [], "text": "well, perhaps we need a forking subant. hmmm. \n\nHaving done -v runs to see what is going on. I am <typdef>ing the ivy antlib and\nsmartfrog as a tasks.properties file, both of which are ignored with the\n(ignoring redeclaration of ... ) messages. But somehow the classloader is being\nretained.", "is_private": false, "id": 104810, "creator": "stevel@apache.org", "time": "2007-06-28T03:45:00Z", "bug_id": 42742, "creation_time": "2007-06-28T03:45:00Z", "attachment_id": null}, {"count": 6, "tags": [], "creator": "peterreilly@apache.org", "attachment_id": null, "id": 105669, "time": "2007-07-16T06:57:13Z", "bug_id": 42742, "creation_time": "2007-07-16T06:57:13Z", "is_private": false, "text": "Hi Steve,\nThanks, I can now repeat the problem\nwith the following build file:\n\n<project name=\"e\" default=\"run\">\n  <property name=\"ac\"\n            location=\"${user.home}/apps/ant-contrib/ant-contrib-1.0b3.jar\"/>\n  <target name=\"run\">\n    <typedef resource=\"net/sf/antcontrib/antlib.xml\"\n             classpath=\"${ac}\"/>\n    <for begin=\"1\" end=\"1000\" param=\"p\">\n      <sequential>\n        <antcall target=\"define\"/>\n        <echo>@{p}</echo>\n      </sequential>\n    </for>\n  </target>\n  <target name=\"define\">\n    <typedef resource=\"net/sf/antcontrib/antlib.xml\"\n             classpath=\"${ac}\"/>\n  </target>\n</project>\nIf I set ANT_OPTS to:\nexport ANT_OPTS=\"-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:SurvivorRatio=2\n\nThe build completes - but painfully slowly, (after ~ 300 iterations the\nslowdown is very noticable), the time reported for\nthe build is ~30 minutes.\n\nIf I set ANT_OPTS to:\nexport ANT_OPTS=\"-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:SurvivorRatio=2 \n-XX:MaxPermSize=8m -XX:PermSize=8m\"\nThe build completes relatively quickly (~ 2 1/2 minutes)\n(see : http://developers.sun.com/mobility/midp/articles/garbagecollection2/#3.3\nfor use and description of GC flags)\nI conclude that for this build file, the problem is not\nant, but it is the GC in java and its treatment of classes.\n\n\n\nIt may be useful to add a check in <typedef> to\nsee if the same typedef has been done before - this\nmay cause other problems (the contents of the\njars made have changed - adding new classes or antlibs definitions).\n\nAs Stephane does, I also normally fork build files to\navoid similar (and other) problems.\n\nI use the following  macro:\n\n  <macrodef name=\"sub\">\n    <attribute name=\"dir\"/>\n    <attribute name=\"target\"/>\n    <sequential>\n      <exec executable=\"bash\"\n            dir=\"@{dir}\"\n            failonerror=\"yes\">\n        <arg value=\"-c\"/>\n        <arg value=\"ant -emacs @{target}\"/>\n      </exec>\n    </sequential>\n  </macrodef>\n\n"}, {"count": 7, "attachment_id": null, "bug_id": 42742, "text": "1. a small tests is very welcome :)\n\n2. The problem is that the JRE hangs on to loaded classes in a separate part of\nthe heap, and does so until all instances of the class are gone. So we need to\nsomehow make sure we have no instances of typedef'd stuff hanging around, or\nreferences to it. ", "id": 105681, "time": "2007-07-16T09:22:36Z", "creator": "stevel@apache.org", "creation_time": "2007-07-16T09:22:36Z", "tags": [], "is_private": false}, {"count": 8, "tags": [], "bug_id": 42742, "text": "Hi Steve,\nwhat I am saying is that there may be a bug with GC of\nclasses. I have seen this happen with older versions of java.\n\nI cannot get \"ant cruise\" to work on the checked out smartfrog\n- the problem is \"build.xml:284: Cruise Control was not found in\n/home/peter/svn/main)\"\n\nI tried ant dist, this worked without a problem (linux fedora 7, jdk1.7).\n", "id": 105683, "time": "2007-07-16T10:44:34Z", "creator": "peterreilly@apache.org", "creation_time": "2007-07-16T10:44:34Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "Peter\n\n1. try ant cc instead; ant cruise turns out to try and run CC\n\n2. I've patched our common.xml to not redeclare the ivy tasks if they are\nalready defined, so a full build no longer runs out of memory.\n\n3. but it was, on Java 1.6\n", "is_private": false, "bug_id": 42742, "id": 105697, "time": "2007-07-17T02:15:14Z", "creator": "stevel@apache.org", "creation_time": "2007-07-17T02:15:14Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "peterreilly@apache.org", "is_private": false, "count": 10, "id": 105710, "time": "2007-07-17T05:06:48Z", "bug_id": 42742, "creation_time": "2007-07-17T05:06:48Z", "text": "Thanks Steve,\nI see the bug now.\nMy fix for the GC did not work on in.\n"}, {"count": 11, "tags": [], "creator": "peterreilly@apache.org", "is_private": false, "text": "I have tracked down a problem with Ivy.\nIt uses a IvyContext to store information. This\nuses a thread local variable to achieve\nglobal variable semantics.\nIt appears that this object does not get GCed,\nand as it contains objects that are classes loaded\nby the AntClassLoader, the AntClassLoader also\ndoes not get GCed.\n\n", "id": 108344, "time": "2007-09-18T09:23:44Z", "bug_id": 42742, "creation_time": "2007-09-18T09:23:44Z", "attachment_id": null}, {"count": 12, "tags": [], "text": "1. Is there an ivy bug # to track?\n\n2. Is there something we can do in Ant to assist in this?\n\nIt sounds like Ivy needs to listen for build completion and purge its state when\na  build finishes", "is_private": false, "id": 108363, "creator": "stevel@apache.org", "time": "2007-09-19T02:18:07Z", "bug_id": 42742, "creation_time": "2007-09-19T02:18:07Z", "attachment_id": null}, {"count": 13, "tags": [], "bug_id": 42742, "attachment_id": null, "id": 108364, "time": "2007-09-19T02:31:51Z", "creator": "peterreilly@apache.org", "creation_time": "2007-09-19T02:31:51Z", "is_private": false, "text": "1) no\n2) I raised the issue on the Ivy dev mailing list.\n >It sounds like Ivy needs to listen for build completion and purge its state when\n >a  build finishes\nYes I tried that (listening for subproject build ending and clearing\nIvyContext) and it seems to work (I have problems with the ant cc for\nsmartfrog - 1) the system tests fail and 2) ivy 2.0.0 trunk sees\nproblems with the dependences (missing javadoc artifacts))\n\nHowever there is another problem with the implementation of IvyContext\nwhich I raised on the Ivy mailing list. The way it is implemented\nmeans that sub-projects will wipe the context of master projects\n(if the same classloader is used for ivy in the sub-projects).\n"}, {"attachment_id": null, "tags": [], "bug_id": 42742, "is_private": false, "count": 14, "id": 108365, "time": "2007-09-19T02:42:29Z", "creator": "peterreilly@apache.org", "creation_time": "2007-09-19T02:42:29Z", "text": "One way ant could help would be not to use a new classloader\nin the case with the path for the new task/type definition is\nthe same as the current definition. At the moment this\nis treated as a \"similar\" definition, which overrides the\ncurrent definition with a new classloader, but does not\ninform the world:\n\n  project.log(\"Trying to override old definition of \"\n          + (isTask ? \"task \" : \"datatype \") + name, (def.similarDefinition(old,\n           project)) ? Project.MSG_VERBOSE : Project.MSG_WARN);\n\nThe reason for using a new classloader is that some of the jars, directories\nmay have changed since the last <typedef/>, however I do not think\nthat this happens for real (and for windows changing the jar while is\nis used in a classloader is not easy).\n\nHowever, this will not solve the general problem as the master project\nmay not have loaded the tasks/types.\n "}, {"count": 15, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "is_private": false, "id": 108366, "time": "2007-09-19T04:09:59Z", "bug_id": 42742, "creation_time": "2007-09-19T04:09:59Z", "text": ">I have problems with the ant cc for\n>smartfrog - 1) the system tests fail and 2) ivy 2.0.0 trunk sees\n>problems with the dependences (missing javadoc artifacts))\n\nI'll look at this. The javadocs should get published in the build. \n\nThe system tests do run on Cruise control, but it skips some of the web tests as\nport 8080 is already on use on that machine. email me the error messages and\nI'll look at them"}, {"count": 16, "attachment_id": null, "bug_id": 42742, "is_private": false, "id": 110471, "time": "2007-11-13T03:18:18Z", "creator": "xavier@apache.org", "creation_time": "2007-11-13T03:18:18Z", "tags": [], "text": "I've created an issue in Ivy related to this problem:\nhttps://issues.apache.org/jira/browse/IVY-639\n\nI've just checked in a fix, the current trunk version should not have the memory\nleak and subproject handling problem anymore. But I don't have a good test case\nto test this out, so if one of you who already investigated the issue could give\nit a try, it would be great!"}, {"count": 17, "attachment_id": null, "bug_id": 42742, "is_private": false, "id": 110519, "time": "2007-11-14T03:55:07Z", "creator": "stevel@apache.org", "creation_time": "2007-11-14T03:55:07Z", "tags": [], "text": "I think there are/were two problems here. First, redefining stuff with <taskdef>\ncauses/caused leaks. Second, ivy itself was consuming stuff. I can put some\nswitches in to our build file to redefine the ivy tasks without checking for\nthem being present, and test against the latest code. Is there a new alpha/beta\nof Ivy available for me to do this?"}, {"attachment_id": null, "tags": [], "creator": "kahmyong.moon@hp.com", "is_private": false, "count": 18, "id": 170578, "time": "2013-10-11T21:17:11Z", "bug_id": 42742, "creation_time": "2013-10-11T21:17:11Z", "text": "I don't know if there's been any recent action on this, but after hitting a similar issue (with Ant 1.7.2 through 1.9.2, and Ivy 2.3.0), and poking around heap dumps for a while, I've noticed two potential issues:\n\n1. On the Ant side, IntrospectionHelper.bean holds a reference to the Ivy classes. Bug 30162 fixed a similar issue with embedded Ants by calling IntrospectionHelper.clearCache() at the end of a build, but this doesn't cover sub-builds.\n\n2. On the Ivy side, IvyContext.getContext() automatically pushes an IvyContext if one does not already exist (Message.getLogger() seems to do this pretty early). Since this automatic IvyContext doesn't follow the scoping rules introduced in https://issues.apache.org/jira/browse/IVY-639, this means there's one IvyContext left hanging around after the subbuild ends.\n\nAnyway, I'll probably go with the forking workaround mentioned by others in this thread, but it would be nice to get the root issues fixed..."}]
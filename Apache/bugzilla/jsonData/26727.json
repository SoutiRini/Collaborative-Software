[{"count": 0, "text": "From my message to Batik mail list:\n\nOn Thu, 05 Feb 2004 14:38:23 -0500, \"Thomas DeWeese\"\n<Thomas.DeWeese@Kodak.com> said:\n\n>> ...\n>>    Actually Batik gives the Rhino interpreter the class loader to use.\n>> So the class loader is from the Batik Context not the Rhino context.\n>> The Class loader also appears to associate an appropriate code source\n>> (i.e. the document's URL) with the created classes.\n>> \n>\n>>> > Now due to bugs in class loader implementations in many released JVMs\n>>> > (Sun JVMs <= 1.4.1 that I checked has this bug) it also means that Rhino\n>>> > code can potentially gain AllPermissions. This is in turn means that pure\n>>> > JavaScript script can gain AllPermissions due to problematic\n>>> > implementation of SecurityController.\n>\n>> \n>>     I guess I am unaware of these bugs - do they rely on being able\n>> to create a class loader?  If so the Rhino code is not allowed to do\n>> so.\n\n\nTo be completely clear: the current implementation of\norg.mozilla.javascript.SecurityController in Batik allows scripts to run\nwith the same permissions that Rhino classes have.\n\nHere is extract from \n./resources/org/apache/batik/apps/svgbrowser/resources/svgbrowser.policy\n(other policy files have the same fragments) :\n\ngrant codeBase \"${app.dev.base}/lib/js.jar\" {\n  permission java.lang.RuntimePermission \"createClassLoader\";\n  permission java.net.SocketPermission \"*\", \"listen, connect, resolve,\n  accept\";\n  permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n  permission java.util.PropertyPermission\n  \"org.mozilla.javascript.JavaAdapter\", \"read\";\n  permission java.util.PropertyPermission\n  \"org.mozilla.javascript.JavaAdapterClassName\", \"read\";\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n};\n\nWhich means that Rhino classes and scripts they execute in the current\nBatik can create class loaders, make arbitrary network connections and\nread arbitrary files. If that is not enough, then the bugs in JVM\nClassLoader implementations means that scripts can gain AllPemissions as\nlong as they have \"createClassLoader\" permission.", "bug_id": 26727, "attachment_id": null, "id": 51839, "time": "2004-02-06T15:09:10Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-06T15:09:10Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "text": "Created attachment 10394\nExample svg document to show security sandbox breach", "attachment_id": 10394, "bug_id": 26727, "id": 52423, "time": "2004-02-17T14:30:41Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-17T14:30:41Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 26727, "is_private": false, "text": "To see the security sandbox breach point SVG browser to the attachment 10394 and\nthen click on the yellow area of the document.\n\nThe example takes advantage of the fact that Function() constructor in Rhino\nalways uses pure interpreter mode which means that the function will be executed\nwith privileges of Rhino code.\n\nAfter constructing the function the script set it as a click handler. In this\nway when the function is executed, there is only Batik and Rhino methods on Java\nstack without any injection of code from untrusted class loaders.\n\n\n", "id": 52425, "time": "2004-02-17T14:38:47Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-17T14:38:47Z", "attachment_id": null}, {"count": 3, "tags": [], "text": "Escalating to Critical as a security breach.", "attachment_id": null, "id": 52426, "creator": "igor@fastmail.fm", "time": "2004-02-17T14:41:24Z", "bug_id": 26727, "creation_time": "2004-02-17T14:41:24Z", "is_private": false}, {"count": 4, "tags": [], "text": "While I developped a big chunck of the scripting package, Vincent was the one\nthat developped the security part. I re-assign the bug to him as he is probably\nmore able than me to fix it.", "is_private": false, "id": 52433, "creator": "cjolif@ilog.fr", "time": "2004-02-17T15:42:10Z", "bug_id": 26727, "creation_time": "2004-02-17T15:42:10Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52445, "time": "2004-02-17T16:29:17Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-17T16:29:17Z", "is_private": false, "text": "The problem with the Batik implementation is that \n/sources/org/apache/batik/script/rhino/BatikSecurityController.java when\nimplementing execWithDomain of org.mozilla.javascript.SecurityController simply\ncalls script.exec() on the supplied argument without dropping privileges as\nREQUIRED by API docs.\n\nThe interpreter in Rhino uses the method to restrict script privileges while\ninterpreting script code and without a proper implementation of the method\nscript will be executed with privileges of Rhino interpreter.\n\nA possible fix that would be sufficient for Batik is to use an interface like\n\nimport org.mozilla.javascript.*;\n\npublic interface RestrictedExecutor\n{\n    public void exec(Context cx, Scriptable scope, Script script);\n} \n\nand its possible implementation like:\n\n\npublic class RestrictedExecutorImpl implements RestrictedExecutor\n{\n    public void exec(Context cx, Scriptable scope, Script script)\n    {\n    \treturn script.exec();\n    }\n}\n\n\nThen store bytecode for RestrictedExecutorImpl in a resource file (or generate\nthe byte code on the fly) and then for each document class loader that SVG\ncreates add bytecode to the loader and load new copy of RestrictedExecutorImpl\nclass from the class loader. \n\nThen implement execWithDomain like:\n\n\n    public Object execWithDomain(Context cx, Scriptable scope,\n                                 Script script, Object securityDomain)\n        throws JavaScriptException \n    {\n    \tRhinoClassLoader loader = (RhinoClassLoader)securityDomain;\n\tRestrictedExecutor re = exetract_RestrictedExecutor_from_loader(loader);\n\treturn re.exec(cx, scope, script);\n    }\n\nin this way script will always be executed under stack infected with low privileges.\n\n\nIn principle such implementation would be sufficient for Batik since it does not\nallow scripts from different documents with different domains to mix. If this\nwould be a case, then getDynamicSecurityDomain in batik should be fixed as well\nbut that is more complex. For full proper solution that does not use any class\nloaders see reference implementation in Rhino:\n\nhttp://lxr.mozilla.org/mozilla/source/js/rhino/toolsrc/org/mozilla/javascript/tools/shell/JavaPolicySecurity.java\n\nwhich I believe can be adopted for Batik with minimal modifications."}, {"count": 6, "tags": [], "bug_id": 26727, "attachment_id": null, "text": "Hello Igor,\n\nIn the first email on this issue, you said that you might submit a patch\nBatikSecurityController. Do you still plan to do that or not?", "id": 52495, "time": "2004-02-18T16:18:26Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-18T16:18:26Z", "is_private": false}, {"count": 7, "tags": [], "text": "I still plan to do it during this or following week.", "attachment_id": null, "bug_id": 26727, "id": 52497, "time": "2004-02-18T16:32:23Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-18T16:32:23Z", "is_private": false}, {"count": 8, "tags": [], "creator": "deweese@apache.org", "is_private": false, "id": 52505, "attachment_id": null, "bug_id": 26727, "creation_time": "2004-02-18T18:11:00Z", "time": "2004-02-18T18:11:00Z", "text": "Hi Igor,\n\n  Will this enable us to securely expand permissions for the rhino interpreter,\nso that the debugger can be used w/o jiggering permissions?\n"}, {"count": 9, "text": "Created attachment 10448\nProposed Security Patch", "creator": "deweese@apache.org", "is_private": false, "id": 52626, "time": "2004-02-20T01:42:10Z", "bug_id": 26727, "creation_time": "2004-02-20T01:42:10Z", "tags": [], "attachment_id": 10448}, {"count": 10, "text": "I've attached a small update to Vincent's patch.\nIn my testing this solves all the security issues\n(all tests rejected appropriately, including the attached one).\n\nIt isn't as complete as the example Security Controller\nbut it should work as all script has essentially no perms,\nso what ever might be on the stack can't really have lower\nperms than the script already had.", "bug_id": 26727, "attachment_id": null, "id": 52627, "time": "2004-02-20T01:45:30Z", "creator": "deweese@apache.org", "creation_time": "2004-02-20T01:45:30Z", "tags": [], "is_private": false}, {"count": 11, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52630, "time": "2004-02-20T08:18:00Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-20T08:18:00Z", "is_private": false, "text": "Original proposed patch (believed more secure by Vincent)\n\nIndex: BatikSecurityController.java\n===================================================================\nRCS file:\n/home/cvs/xml-batik/sources/org/apache/batik/script/rhino/BatikSecurityController.java,v\nretrieving revision 1.3\ndiff -r1.3 BatikSecurityController.java\n59a60,64\n> import java.security.AccessController;\n> import java.security.AccessControlContext;\n> import java.security.PrivilegedExceptionAction;\n> import java.security.PrivilegedActionException;\n>\n86c91,95\n<         return securityDomain;\n---\n>         ClassLoader loader = (RhinoClassLoader)securityDomain;\n>         if (loader == null) {\n>             loader = getClass().getClassLoader();\n>         }\n>         return new RhinoClassLoader(loader);\n102c111,125\n<         return script.exec(cx, scope);\n---\n>\n>         RhinoClassLoader loader = (RhinoClassLoader)securityDomain;\n>         AccessControlContext rhinoAccessControlContext\n>             = loader.rhinoAccessControlContext;\n>\n>         try {\n>             return AccessController.doPrivileged(new PrivilegedExceptionAction() {\n>                     public Object run() throws JavaScriptException {\n>                         return script.exec(cx, scope);\n>                     }\n>                 }, rhinoAccessControlContext);\n>         } catch (Exception e) {\n>             throw new JavaScriptException(e);\n>         }\nIndex: RhinoClassLoader.java\n===================================================================\nRCS file:\n/home/cvs/xml-batik/sources/org/apache/batik/script/rhino/RhinoClassLoader.java,v\nretrieving revision 1.8\ndiff -r1.8 RhinoClassLoader.java\n57a58\n> import java.security.AccessController;\n62a64\n> import java.security.PrivilegedAction;\n115a118,156\n>     }\n>\n>     /**\n>      * Constructor.\n>      * @param parent the parent class loader for delegation\n>      */\n>     public RhinoClassLoader(ClassLoader parent){\n>         super(getURL(parent), parent);\n>\n>         if (parent instanceof RhinoClassLoader) {\n>             this.documentURL = ((RhinoClassLoader)parent).documentURL;\n>             codeSource = ((RhinoClassLoader)parent).codeSource;\n>             this.rhinoAccessControlContext\n>                 = (AccessControlContext)\n>                 AccessController.doPrivileged(new PrivilegedAction() {\n>                         public Object run() {\n>                             return AccessController.getContext();\n>                         }\n>                     }, ((RhinoClassLoader)parent).rhinoAccessControlContext);\n>         } else {\n>             this.rhinoAccessControlContext\n>                 = AccessController.getContext();\n>         }\n>     }\n>\n>     /**\n>      * Helper, returns the URL array from the parent loader\n>      */\n>     static URL[] getURL(ClassLoader parent) {\n>         if (parent instanceof RhinoClassLoader) {\n>             URL documentURL = ((RhinoClassLoader)parent).documentURL;\n>             if (documentURL != null) {\n>                 return new URL[] {documentURL};\n>             } else {\n>                 return new URL[] {};\n>             }\n>         } else {\n>             return new URL[] {};\n>         }"}, {"count": 12, "text": "Comments on Thomas' patch.\n\na. getDynamicSecurityDomain now returns the loader's domain if it is not null. I\nthink this is a security threat as the code/library may be used in a context\nwhere it is being invoked by code with lesser priviledges than the scripts.\nRemember that the script permissions can be increased and therefore this could\nbe leveraged. I think we need to do the intersection in _all_ cases, as I had\nproposed.\n\nb. The AccessControlContext used in the second RhinoClassLoader constructor I\ncreated outside the constructor moved into the getDynamicSecurityDomain method.\nI do not think this is right. acc, in the getDynamicSecurityDomain method will\nreflect the current calling stack. Whether you use a doPrivileged on the\nRhinoClassLoader creation or not, the context it has is that of the current\ncalling stack only. This might work for the tests because we are getting called\nfrom script code, but it general, I think this is not correct.\n\nI feel that the patch I proposed was more secure and I am going to talk with\nIgor to understand why he felt it was not good enough, as he mentioned it was\nnot a proper implementation of the execWithDomain method. ", "bug_id": 26727, "attachment_id": null, "id": 52631, "time": "2004-02-20T08:19:59Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-20T08:19:59Z", "tags": [], "is_private": false}, {"count": 13, "tags": [], "text": "Created attachment 10451\nVersion of previous patch that uses AccessControllerContext as a security domain", "is_private": false, "bug_id": 26727, "id": 52643, "time": "2004-02-20T10:15:57Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T10:15:57Z", "attachment_id": 10451}, {"count": 14, "tags": [], "bug_id": 26727, "is_private": false, "id": 52644, "attachment_id": 10452, "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T10:17:33Z", "time": "2004-02-20T10:17:33Z", "text": "Created attachment 10452\nYet another version with tabs expanded"}, {"count": 15, "tags": [], "creator": "igor@fastmail.fm", "attachment_id": null, "text": "The last version of the patch is just a version of Thomas patch (with all\npotential problems indicated above) that directly uses AccessControllerContext\nas a security domain as a temporary class loader was used only to store\nAccessControllerContext", "id": 52645, "time": "2004-02-20T10:21:00Z", "bug_id": 26727, "creation_time": "2004-02-20T10:21:00Z", "is_private": false}, {"count": 16, "text": "Hi Vincent,\n\n>         ClassLoader loader = (RhinoClassLoader)securityDomain;\n>         if (loader == null) {\n>             loader = getClass().getClassLoader();\n>         }\n>         return new RhinoClassLoader(loader);\n\n   In my reading this restricts permissions no more than my code does.\nIn particular the code in the RhinoClassLoader constructor says:\n\n>             this.rhinoAccessControlContext\n>                 = (AccessControlContext)\n>                 AccessController.doPrivileged(new PrivilegedAction() {\n>                         public Object run() {\n>                             return AccessController.getContext();\n>                         }\n>                     }, ((RhinoClassLoader)parent).rhinoAccessControlContext);\n\n    This is the same as setting the rhinoAccessControlContext directly from\nparent.rhinoAccessControlContext - it does not intersect the two (for\nthat you need Igor's stuff).  Thus there is no difference between just returning \nthe securityContext passed in.\n    The only real difference between the two is that I constructed the \nrhinoClassLoader in a priviledged block otherwise it fails if any script\ncode is on the stack, this is why the 'eval' code fails in your example.\n\n    I believe I was fairly straight forward that my patch only works\nif you consider script to be the 'bottom of the barrel' from a security\npoint of view.  But it is I believe no worse than the original patch.", "bug_id": 26727, "attachment_id": null, "id": 52649, "time": "2004-02-20T10:56:24Z", "creator": "deweese@apache.org", "creation_time": "2004-02-20T10:56:24Z", "tags": [], "is_private": false}, {"count": 17, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52650, "time": "2004-02-20T10:58:16Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-20T10:58:16Z", "is_private": false, "text": "After discussion btw/ Igor and Vincent, the action plan is:\n\n- keep createClassLoader as in Igor's proposed patch.\n- modify getDynamicSecurityDomain to do security domain intersection. Use the\nDomainCombiner facilities.\n- modify execWithDomain to do security domain intersection as well. Use the\ndomain combiner facilities.\n\nWe also need to use Context.setClassShutter so that we restric the API access\nfrom scripts. The suggestion is to disallow any mozilla APIs and the Batik APIs.\nThis requires investigation."}, {"count": 18, "text": "\nVincent Hardy wrote:\n> Hi Thomas,\n> \n> Thomas DeWeese wrote:\n> \n>> Vincent Hardy wrote:\n>>\n>>> It seems that Thomas added comments to Bugzillla while Igor and I \n>>> were talking. Thomas, thanks for reviewing what I just added to \n>>> Bugzilla. I am going to work on a revision of the patch. If you want \n>>> to talk about it, you can call me after 2pm my time.\n>>\n>>\n>>\n>>    I guess I'm not sure what we are giving up by not allowing:\n>>\n>> // Calling var script = Script(source); script(); is not supported\n>>\n>>    Is this different than your example of attaching a\n>> 'Function(source)' as an event listener?  I know that people\n>> do load JS through getURL and dynamically add it to the client.\n>>\n>>    As far as the rest of it, using DomainCombiner to intersect,\n>> that seems just fine to me (of course I'm fairly happy just saying\n>> that script is the least trusted).\n> \n> \n> According to Igor, this does not prevent the use of eval(), which takes \n> a different route. I am in the process of adding a substential amount of \n> regression tests and I am planning to add tests on that.\nSome clarifications on code paths taken for Rhino for eval, Function and Script:\n\neval(source): \n\n1. Call SecurityController.getDynamicSecurityDomain(null) to get the current\nprivileges.\n2. Compile script to internal pure interpretation form.\n3. Associate dynamic domain with the result of 2.\n4. Evaluate the script via SecurityController.execWithDomain() passing there the\ndomain from step 1.\n\nFunction(source):\n\n1. Call SecurityController.getDynamicSecurityDomain(null) to get the current\nprivileges.\n2. Compile the function source to internal pure interpretation form.\n3. Assocuiate dynamic domain with the result of 2. The internal form is returned\nas a function object.\n4. And some later point when the resulting function is called, it is executed\nvia SecurityController.execWithDomain() with the domain from step 1.\n\nScript(source)\n1. Call SecurityController.getDynamicSecurityDomain(null) to get the current\nprivileges.\n2. Compile the source into the same form as Context.compileReader would do. \n3a. If compileReader generates Java classes (default), then call\nSecurityController.createClassLoader to get a loader that would set class\npermissions according to the domain from step 1. Then an instance of the class\ninstantiated and returned as a script object.\n4a. And some later point when the resulting script is called, it is executed\ndirectly and JVM will infect the stack with the security domain  from 1.\n\n3b.  If compileReader generates pure interpreter form )which can be set with\nContext.setOptimizationLevel(-1), then associate dynamic domain with the result\nof 2. The internal form is returned as a script object.\n4b. And some later point when the resulting script is called, it is executed via\nSecurityController.execWithDomain() with the domain from step 1.\n\n\nNote that eval or Function never creates any Java classes and only Script can do\nit. Thus throwing RuntimeException in SecurityController.createClassLoader()\nwhen the domain is null will prevent only Script from execution. Fortunately\nScript is not used that often, so not supporting it is not a big issue. If at\nsome later point it would required, then creating a class loader with a proper\nintersected domain should not be very difficult.", "creator": "igor@fastmail.fm", "attachment_id": null, "id": 52659, "time": "2004-02-20T13:09:48Z", "bug_id": 26727, "creation_time": "2004-02-20T13:09:48Z", "tags": [], "is_private": false}, {"count": 19, "text": "Created attachment 10454\nMinimal ClassShutter: no access to Mozilla classes", "bug_id": 26727, "attachment_id": 10454, "id": 52663, "time": "2004-02-20T14:52:33Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T14:52:33Z", "tags": [], "is_private": false}, {"count": 20, "text": "The above patch (which is independent from the rest od security patches) adds\nminimal ClassShutter that excludes access to org.mozilla.javascript.* classes.\n\nWithout the patch script can invoke the following code which just instatntiate\nRhino directly:\n\nvar cx = new Packages.org.mozilla.javascript.Context();\ncx.optimizationLevel = -1;\n\nvar bad_action_source = \"function () { java.lang.System.out.println('Hostile\naction'); java.lang.System.exit(0); }\";\nvar scope = new Object();\nscope.__parent__ = this;\nscope.__proto__ = null;\n\nvar f = cx.compileFunction(scope, bad_action_source, \"\", 0, null);\n\nAt this stage f is interpreted function without any security associated with it\nand assigning it event handlers would do the old trick.\n\n\n", "creator": "igor@fastmail.fm", "attachment_id": null, "id": 52666, "time": "2004-02-20T15:13:45Z", "bug_id": 26727, "creation_time": "2004-02-20T15:13:45Z", "tags": [], "is_private": false}, {"count": 21, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52668, "time": "2004-02-20T15:19:33Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T15:19:33Z", "is_private": false, "text": "I just realized that perhaps script event handlers should be executed with the\nAccessControllerContext on the moment of script handler assignment? \n\nIt alone would be sufficient to close the current bug and perhaps prevents many\nothers like accessing Jython interpreter or any other interpreter and using them\nto assign event handlers and escape from sandbox."}, {"count": 22, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52670, "time": "2004-02-20T15:30:28Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T15:30:28Z", "is_private": false, "text": "Vincent, since you have some relations to Sun ;), perhaps if you suggest to add\na new API to AccessController it would have a chance to happen:\n\nAccessController.dropPrivilegies(Action action, AccessControllerContext\nanotherContext);\n\nthat would execute action with restrictions imposed by the current stack and\nanotherContext, that would allow to simplify security support significantly.\n\nThat can be coded in pure Java, but I fill that is just a hack.\n\n"}, {"count": 23, "text": "Hi Igor,\n\n  Here is the class shutter I was going to use.  I'm fairly certain it isn't\ncomplete but it should stop the really obvious potential abuses.  BTW even\nwithout these additions I couldn't get access to these packages what ever I\ntried it said 'org' is undefined and never even called visibleToScripts \n( importPackage(org.apache.batik.bridge) ) - so I suspect that at least\npart of liveConnect is already turned off - any ideas on why this happens?\n\n    public boolean visibleToScripts(String fullClassName) {\n        // Don't let them mess with script engine's internals.\n        if (fullClassName.startsWith(\"org.mozilla.javascript\"))\n            return false;\n\n        if (fullClassName.startsWith(\"org.apache.batik.\")) {\n            // Just get packge within batik.\n            String batikPkg = fullClassName.substring(17);\n\n            // Don't let them mess with Batik script internals.\n            if (batikPkg.startsWith(\"script\"))\n                return false;\n\n            // Don't let them get global structures.\n            if (batikPkg.startsWith(\"apps\"))\n                return false;\n\n            // Don't let them get Scripting stuff from bridge.\n            if (batikPkg.startsWith(\"bridge.\")) {\n                \n                if (batikPkg.indexOf(\".BaseScriptingEnvironment\")!=-1)\n                    return false;\n                if (batikPkg.indexOf(\".ScriptingEnvironment\")!=-1)\n                    return false;\n            }\n        }\n\n        return true;\n    }\n", "bug_id": 26727, "attachment_id": null, "id": 52671, "time": "2004-02-20T15:57:36Z", "creator": "deweese@apache.org", "creation_time": "2004-02-20T15:57:36Z", "tags": [], "is_private": false}, {"count": 24, "tags": [], "bug_id": 26727, "attachment_id": null, "is_private": false, "id": 52676, "time": "2004-02-20T18:17:54Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-20T18:17:54Z", "text": "AFAICS the shutter is very fine. \n\nDid you tried to access org packages without \"Packages\". prefix? In Rhino \"java\"\nis just an alias for Packages.java and there is no such alias for org or com. \n"}, {"count": 25, "tags": [], "text": "I did try the 'Packages.org' thing at some point but apparently \nnot \"the right way\".  I've tested now and the shutter _is_ properly \nbarring access to those classes (referencing a public static member\nreturns a non-existent JavaPackage as I believe it is supposed to).\n", "is_private": false, "bug_id": 26727, "id": 52677, "time": "2004-02-20T18:35:39Z", "creator": "deweese@apache.org", "creation_time": "2004-02-20T18:35:39Z", "attachment_id": null}, {"count": 26, "tags": [], "bug_id": 26727, "is_private": false, "id": 52803, "attachment_id": null, "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-23T15:32:47Z", "time": "2004-02-23T15:32:47Z", "text": "Commited new restructured regression tests today.\n\nThe tests validate:\n\nLoading (or non-loading) of scripts: \n\na. Control over scripts origin (any, same as document, embeded, none)\nb. Enabling/Disabling of script depending on script type\n\nthere are now EcmaLoadTest, EcmaNoLoadTest, JarLoadTest and JarNoLoad tests\nwhich validate all the different combinations.\n\nPermissions:\n\nIn situations where scripts are loaded, the tests check that the various ways of\nexercising scripts grant the 'right' permissions. For historical reasons, these\ntests are called EcmaCheckPermissionsDeniedXXX and JarCheckPermissonsDenied\nwhere XXX defines a mode of script execution (e.g., 'Eval' or 'Function').\n\nIn situations where scripts are loaded and security is off, the\nJarCheckPermissionsGranted and EcmaCheckPermissionsGranted tests validate that\nall permissions are granted.\n\nI have not been able to figure out a way to exercise the code that would allow\nme to validate security domain intersection. I welcome suggestions as without a\nway to test the code, it seems a bit pointless to write the code. I have made\nsome attempt in the bridge.ScriptSelfTest class which has a way to turn on\n'restricted' mode (only a doPrivileged with no Permissions), but I have not had\nmuch success with that so far. Suggestions are welcome."}, {"count": 27, "tags": [], "text": "Note on current script feature:\n\n- Function() and eval() are allowed and subject to same security context as\nregularly loaded scripts.\n\n- Script() is disallowed in all situations.\n\n- For Java code from Jar files, base64 encoded content is _not_ supported under\nany conditions. This could be changed but currently, the code tries to build a\nURL with the base64 encoded data and fails.", "attachment_id": null, "id": 52804, "creator": "vincent.hardy@sun.com", "time": "2004-02-23T15:35:31Z", "bug_id": 26727, "creation_time": "2004-02-23T15:35:31Z", "is_private": false}, {"count": 28, "tags": [], "bug_id": 26727, "attachment_id": null, "id": 52824, "time": "2004-02-23T21:20:37Z", "creator": "igor@fastmail.fm", "creation_time": "2004-02-23T21:20:37Z", "is_private": false, "text": "Vincent Hardy wrote:\n\n> I have not been able to figure out a way to exercise the code that would allow\nme to validate security domain intersection. I welcome suggestions as without a\nway to test the code, it seems a bit pointless to write the code. I have made\nsome attempt in the bridge.ScriptSelfTest class which has a way to turn on\n'restricted' mode (only a doPrivileged with no Permissions), but I have not had\nmuch success with that so far.\n\nThe example requires a possibility of a script from an untrusted domain to call\nscript having more privileges. In such situation the following is a possible\nscenario:\n\nPrivileged script contains innocent code like:\n\nfunction myParseInt(str)\n{\n    // Call global ECMAScript function\n    return parseInt(str)\n}\n\n\nNow untrusted scripts do the following:\n\n// Redefine parseInt with Function (eval would not work as Rhino does \n// not support indirect calls to eval as permitted by the ECMAScript standard)\n\nparseInt = Function;\n\nvar evilFunction = myParseInt(evilFunctionSource);\n\nNow without proper domain intersection evilFunction would contain a function\nwith domain and privileges of myParseInt. Now the evil script can call\nsetTimeout(evilFunction, 0) or add it to the event handler and when evilFunction\nwill be executed, it will not have untrusted domain anywhere on Java stack.\n\nNow AFAICS all scripts in the same document in Batik are executed with the same\ndomain of the original document, right? If so, then attack is not feasible as\nlong as the script can access documents from other domains. And if by any mean\nit can, then the script does not need to be as sophisticated as here: it can\nsimply stuff its code into  event handler attribute as string or create <script>\ndom node in that document.\n\n"}, {"count": 29, "tags": [], "bug_id": 26727, "attachment_id": null, "is_private": false, "id": 52840, "time": "2004-02-24T09:52:42Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-02-24T09:52:42Z", "text": "Igor,\n\nCurrently, the scripts for a document are given the same rights as source coming\nfrom the document url. There are ways to restrict where the script comes from.\n\nAlso, all there is a seperate RhinoInterpreter for each document. So there is a\ndifferent Context for each document. I do not think a script for one document\ncan redefine functions for another document because the Contexts are seperate. \n\nSo I think we are left with the risk that scripts could insert content into\nanother document. With the class shutter, we should not have that happen, as\nscript has not access to the packages where that information would be available.\n\nThis said, I am still working on a test to invoke code that has lower priority\nthan script and that tries to invoke script to test Domain intersection and make\nsure we are safe there."}, {"count": 30, "tags": [], "bug_id": 26727, "attachment_id": null, "is_private": false, "id": 53995, "time": "2004-03-15T09:37:44Z", "creator": "vincent.hardy@sun.com", "creation_time": "2004-03-15T09:37:44Z", "text": "This security issue was addressed in the 1.5.1 Batik release."}]
[{"count": 0, "tags": [], "creator": "debug@gooddan.com", "text": "Apache will, in some cases, truncate the last character of a filename causing\nit to either not find the file or serve the wrong file.  Below are steps to\nreproduce the bug, part of a gdb debugging session showing the code that\ncauses the bug, and a small patch to fix the bug.\n\nThis is probably the cause for the symptoms seen in bug #10687.  I first\nencountered the problem when a customer was trying to do a virtual include\nof a file via mod_include SSI.  The error log consistently showed apache\nfailing to find a file whose name was one character shorter than the\ndesired file.  Here is an example.\n\n    $ cd ~user04\n\n    $ cat html/1/index.shtml\n    <html>\n    <body>\n    test<br>\n    <!--#include virtual=\"../2/in.html\" -->\n    </body>\n    </html>\n\n    $ cat html/2/in.html\n    This is in.html\n\n    $ wget -q -O - http://sf1000.registeredsite.com/~user04/1/\n    <html>\n    <body>\n    test<br>\n    [an error occurred while processing this directive]\n    </body>\n    </html>\n\n    $ cat /usr/apache/logs/error.log.1036095600 \n    [Thu Oct 31 15:20:12 2002] [user04] [error] [client 209.35.187.200]\n     (2)No such file or directory: file permissions deny server access:\n     /home/r/t/user04/html/2/in.htm\n    [Thu Oct 31 15:20:12 2002] [user04] [error] [client 209.35.187.200]\n     unable to include \"../2/in.html\" in parsed file\n     /home/r/t/user04/html/1/index.shtml\n    \n\nHere is part of a debugging session where the code causing the bug can\nbe seen in action.  Starting with line 1066 from server/request.c in\nap_directory_walk, the code reaches a goto at line 1100.  This jumps\nback into a loop that spans lines 731-1057.  The code proceeds to\nlines 920 and 921 where the last character of the filname is truncated.\nLines 920 and 921 originally served to take off a temporary slash added\nin lines 740-744 in an earlier pass through the loop, but the boolean\nvariable 'temp_slash' is still true when the goto jumps back into the loop.\n\n(gdb) n\n1066            if (save_path_info) {\n(gdb)\n1080            for (; sec_idx < num_sec; ++sec_idx) {\n(gdb)\n1083                entry_core = ap_get_module_config(sec_ent[sec_idx],\n&core_module);\n(gdb)\n1085                if (!entry_core->r) {\n(gdb)\n1089                if (ap_regexec(entry_core->r, r->filename, 0, NULL,\nREG_NOTEOL)) {\n(gdb)\n1095                if (matches) {\n(gdb)\n1096                    if (last_walk->matched == sec_ent[sec_idx]) {\n(gdb)\n1097                        now_merged = last_walk->merged;\n(gdb)\n1098                        ++last_walk;\n(gdb)\n1099                        --matches;\n(gdb)\n1100                        goto minimerge;\n(gdb)\n813                     this_dir = ap_get_module_config(sec_ent[sec_idx],\n&core_module);\n(gdb)\n815                     if (!this_dir) {\n(gdb)\n819                     if (this_dir->opts & OPT_UNSET) {\n(gdb)\n827                         opts = this_dir->opts;\n(gdb)\n828                         opts_add = this_dir->opts_add;\n(gdb)\n829                         opts_remove = this_dir->opts_remove;\n(gdb)\n832                     if (!(this_dir->override & OR_UNSET)) {\n(gdb)\n835                 }\n(gdb)\n751                     ap_conf_vector_t *entry_config = sec_ent[sec_idx];\n(gdb)\n753                     entry_core = ap_get_module_config(entry_config,\n&core_module);\n(gdb)\n758                     if (entry_core->r || entry_core->d_components > seg) {\n(gdb)\n840                 if (seg >= startseg && override) {\n(gdb)\n841                     ap_conf_vector_t *htaccess_conf = NULL;\n(gdb)\n843                     res = ap_parse_htaccess(&htaccess_conf, r, override,\n(gdb)\n846                     if (res) {\n(gdb)\n850                     if (htaccess_conf) {\n(gdb)\n920                 if (temp_slash) {\n(gdb)\n921                     r->filename[--filename_len] = '\\0';\n\n\nThe patch below ensures the boolean is set back to false when it\nhas served its purpose, and as an added precaution, checks that\nthe character about to be truncated is a slash.\n\n--- request.c.bak       Tue Oct 22 10:20:09 2002\n+++ request.c   Tue Oct 22 10:20:11 2002\n@@ -918,6 +918,8 @@\n             /* That temporary trailing slash was useful, now drop it.\n              */\n             if (temp_slash) {\n+                temp_slash = 0;\n+                if (r->filename[filename_len-1] == '/')\n                 r->filename[--filename_len] = '\\0';\n             }", "id": 25449, "attachment_id": null, "bug_id": 14147, "creation_time": "2002-10-31T20:51:16Z", "time": "2002-10-31T20:51:16Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 14147, "attachment_id": null, "text": "That looks good.  I suspect that wrowe needs to bless it before\ncommitting it though.\n\nThe check below always succeeds, right?\n\n-->       if (r->filename[filename_len-1] == '/')\n\nI suspect that it should probably be\n\n   AP_DEBUG_ASSERT(r->filename[filename_len-1] == '/');\n   r->filename[--filename_len] = '\\0';\n\nThe AP_DEBUG_ASSERT() is a good way to doc the assumption but \nit won't generate any code unless you build with \n--enable-maintainer-mode.\n\nThanks for digging into this!!!!!\n", "id": 25451, "time": "2002-10-31T21:05:49Z", "creator": "trawick@apache.org", "creation_time": "2002-10-31T21:05:49Z", "is_private": false}, {"count": 2, "tags": [], "text": "*** Bug 10236 has been marked as a duplicate of this bug. ***", "is_private": false, "id": 25458, "creator": "Michael.Dean@detir.qld.gov.au", "time": "2002-11-01T02:51:18Z", "bug_id": 14147, "creation_time": "2002-11-01T02:51:18Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 14147, "text": "\n  In the name of Rob, Dean, and Jon, it is blessed.\n\n  Great catch, mega kudos for tracking it down!\n\n  I like Jeff's analysis, I'm leaving only an assert.\n", "id": 25463, "time": "2002-11-01T03:26:11Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-01T03:26:11Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "\n  Still makes no sense.\n\n        do {\n            int res;\n            char *seg_name;\n            char *delim;\n            int temp_slash=0;\n\n            /* We have no trailing slash, but we sure would appreciate one.\n             * However, we don't want to append a / our first time through.\n             */\n            if ((seg > startseg) && r->filename[filename_len-1] != '/') {\n                r->filename[filename_len++] = '/';\n                r->filename[filename_len] = 0;\n                temp_slash=1;\n            }\n[...]\n            /* That temporary trailing slash was useful, now drop it.\n             */\n            if (temp_slash) {\n                temp_slash = 0;\n                AP_ASSERT(r->filename[filename_len-1] == '/');\n                r->filename[--filename_len] = '\\0';\n            }\n\nThere is no way around this code without resetting temp_slash to zero\nat the beginning of the loop...\n\n...UNLESS the optimizer has optimized away all but the initial assignment \nto the 0 initial value, never again to reset it on the next iteration\nthrough the do {} loop.\n\nDoes this make sense as the possible scenario?  Can you check this Dan?\n\nBill", "attachment_id": null, "bug_id": 14147, "id": 25464, "time": "2002-11-01T03:40:23Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-01T03:40:23Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 14147, "attachment_id": null, "id": 25471, "time": "2002-11-01T11:39:54Z", "creator": "trawick@apache.org", "creation_time": "2002-11-01T11:39:54Z", "is_private": false, "text": "Bill, you're forgetting the gotos :)\n\nI'm about to post some text to dev@httpd.\n"}, {"count": 6, "tags": [], "bug_id": 14147, "attachment_id": null, "id": 25496, "time": "2002-11-01T20:22:32Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-01T20:22:32Z", "is_private": false, "text": "\n  Refixed this morning in CVS.  The revised server.c is attached complete,\n  so you don't end up with the hack-around still sitting in your sources.\n\n  directory_walk should never have the goto target above the code that\n  it was attempting to escape from.  In fact, a minimerge3: target should\n  have been used -after- the uncached-merge logic.\n\n  No matter, the new sources factor out all the goto's.  Please test this\n  new patch thoroughly.  request.c source to follow.\n\n"}, {"count": 7, "tags": [], "bug_id": 14147, "attachment_id": 3702, "id": 25497, "creation_time": "2002-11-01T20:23:46Z", "time": "2002-11-01T20:23:46Z", "creator": "wrowe@apache.org", "text": "Created attachment 3702\nhttpd-2.0\\server\\request.c for 2.0.43, committed to 2.0.44-dev.", "is_private": false}, {"count": 8, "tags": [], "bug_id": 14147, "attachment_id": null, "id": 25609, "time": "2002-11-04T14:11:38Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-04T14:11:38Z", "is_private": false, "text": "\n  The final patch doesn't reset the flag, as demonstrated in the attached\n  patch.  It turns out our goto loop logic was terribly flawed.  The final\n  patch to address this bug simply eliminates the odd looping that caused\n  us to chop the extra character{s}.\n\n  For each DirectoryMatch (or Directory ~ path) block, we looped back over\n  the wrong code, causing us to chop more than a single character off the\n  end of the name (when expected to simply chop off the trailing slash.)\n\n  If the fix works for you, terrific.  You might also consider the correct\n  patch, attaching in one moment."}, {"count": 9, "tags": [], "bug_id": 14147, "attachment_id": 3711, "id": 25610, "time": "2002-11-04T14:12:36Z", "creator": "wrowe@apache.org", "creation_time": "2002-11-04T14:12:36Z", "is_private": false, "text": "Created attachment 3711\nPatch that eliminates the looping that caused the symptoms."}, {"count": 10, "tags": [], "creator": "wrowe@apache.org", "attachment_id": null, "id": 25615, "time": "2002-11-04T14:38:57Z", "bug_id": 14147, "creation_time": "2002-11-04T14:38:57Z", "is_private": false, "text": "*** Bug 12155 has been marked as a duplicate of this bug. ***"}, {"count": 11, "tags": [], "creator": "trawick@apache.org", "text": "*** Bug 10687 has been marked as a duplicate of this bug. ***", "id": 26853, "attachment_id": null, "bug_id": 14147, "creation_time": "2002-11-23T04:46:05Z", "time": "2002-11-23T04:46:05Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 14147, "attachment_id": null, "id": 27013, "time": "2002-11-26T18:15:15Z", "creator": "slive@apache.org", "creation_time": "2002-11-26T18:15:15Z", "is_private": false, "text": "*** Bug 14860 has been marked as a duplicate of this bug. ***"}, {"count": 13, "tags": [], "bug_id": 14147, "text": "*** Bug 15923 has been marked as a duplicate of this bug. ***", "id": 29077, "time": "2003-01-09T16:57:46Z", "creator": "slive@apache.org", "creation_time": "2003-01-09T16:57:46Z", "is_private": false, "attachment_id": null}]
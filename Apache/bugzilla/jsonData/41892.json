[{"count": 0, "tags": [], "text": "xmlsec 1.4.0 fails to build with IBM's 1.5 JDK because it uses Sun internal\nclasses. Specifically, org.apache.xml.security.keys.content.x509.XMLX509SKI uses\n sun.security.util.DerValue, which is a non-public class.\n\n$JAVA_HOME/bin/java -version\njava version \"1.5.0\"\nJava(TM) 2 Runtime Environment, Standard Edition (build pxi32dev-20061002a (SR3) )\nIBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Linux x86-32 j9vmxi3223-20061001\n(JIT enabled)\nJ9VM - 20060915_08260_lHdSMR\nJIT  - 20060908_1811_r8\nGC   - 20060906_AA)\nJCL  - 20061002\n\nbuild.src:\n    [javac] Compiling 252 source files to\n/home/dvm105/xml-security-1_4_0/build/classes\n    [javac]\n/home/dvm105/xml-security-1_4_0/src/org/apache/xml/security/keys/content/x509/XMLX509SKI.java:33:\ncannot find symbol\n    [javac] symbol  : class DerValue\n    [javac] location: package sun.security.util\n    [javac] import sun.security.util.DerValue;\n    [javac]                          ^\n    [javac]\n/home/dvm105/xml-security-1_4_0/src/org/apache/xml/security/keys/content/x509/XMLX509SKI.java:142:\ncannot find symbol\n    [javac] symbol  : class DerValue\n    [javac] location: class org.apache.xml.security.keys.content.x509.XMLX509SKI\n    [javac]                 DerValue dervalue = new DerValue(derEncodedValue);\n    [javac]                 ^\n    [javac]\n/home/dvm105/xml-security-1_4_0/src/org/apache/xml/security/keys/content/x509/XMLX509SKI.java:142:\ncannot find symbol\n    [javac] symbol  : class DerValue\n    [javac] location: class org.apache.xml.security.keys.content.x509.XMLX509SKI\n    [javac]                 DerValue dervalue = new DerValue(derEncodedValue);\n    [javac]                                         ^\n    [javac]\n/home/dvm105/xml-security-1_4_0/src/org/apache/xml/security/keys/content/x509/XMLX509SKI.java:146:\ncannot find symbol\n    [javac] symbol  : variable DerValue\n    [javac] location: class org.apache.xml.security.keys.content.x509.XMLX509SKI\n    [javac]                 if (dervalue.tag != DerValue.tag_OctetString) {\n    [javac]                                     ^\n    [javac] 4 errors", "attachment_id": null, "id": 100602, "creator": "derekmorr@psu.edu", "time": "2007-03-19T10:10:06Z", "bug_id": 41892, "creation_time": "2007-03-19T10:10:06Z", "is_private": false}, {"count": 1, "attachment_id": null, "bug_id": 41892, "is_private": false, "id": 100603, "time": "2007-03-19T10:38:18Z", "creator": "julien.pasquier@wanadoo.fr", "creation_time": "2007-03-19T10:38:18Z", "tags": [], "text": "The BouncyCastle implementation of ASN.1 may be used to fix this problem."}, {"count": 2, "tags": [], "creator": "raul-info@r-bg.com", "attachment_id": null, "text": "You are right, we have a dependency with sun private implementations.\nThis code is really old, so I suppose that 1.2 & 1.3 so have also problems being\ncompiled under ibm jdk.\nBut I don't know if i like to make xmlsec depends on bouncy castle. Perhaps we\nshould do small hack der decoding class, just to get the info needed.\nOpinions?\n", "id": 100604, "time": "2007-03-19T10:56:35Z", "bug_id": 41892, "creation_time": "2007-03-19T10:56:35Z", "is_private": false}, {"count": 3, "tags": [], "creator": "cantor.2@osu.edu", "attachment_id": null, "text": "If the choice is using BC or Sun's code, that's an obvious choice, so short\nterm, I think the fix is pretty simple.\n\nDoes using BC for this purpose assume you're using it as the JCE anyway?", "id": 100606, "time": "2007-03-19T11:01:01Z", "bug_id": 41892, "creation_time": "2007-03-19T11:01:01Z", "is_private": false}, {"count": 4, "tags": [], "text": "No, the ASN.1 BC implementation can be used independently of the BC JCE \nprovider.\n\nBut I understand that Raul does not want to use BC for that.\nWrite an \"hack\" DER encoding class just to get the info seems to be the better \nsolution.", "attachment_id": null, "id": 100607, "creator": "julien.pasquier@wanadoo.fr", "time": "2007-03-19T11:10:03Z", "bug_id": 41892, "creation_time": "2007-03-19T11:10:03Z", "is_private": false}, {"count": 5, "attachment_id": null, "bug_id": 41892, "is_private": false, "id": 100614, "time": "2007-03-19T11:45:57Z", "creator": "derekmorr@psu.edu", "creation_time": "2007-03-19T11:45:57Z", "tags": [], "text": "(In reply to comment #1)\n> The BouncyCastle implementation of ASN.1 may be used to fix this problem.\n\nIt looks like the code is trying to do that now (see lines 156-185). It looks\nlike it tries the Sun internal class, and then falls back to BC (via reflection)\nif needed. We could change the file to use reflection to try loading Sun's class."}, {"count": 6, "tags": [], "text": "Created attachment 19748\nProposed patch to use reflection to load Sun internal classes", "attachment_id": 19748, "id": 100638, "creator": "derekmorr@psu.edu", "time": "2007-03-19T15:23:09Z", "bug_id": 41892, "creation_time": "2007-03-19T15:23:09Z", "is_private": false}, {"count": 7, "tags": [], "text": "(In reply to comment #4)\n> No, the ASN.1 BC implementation can be used independently of the BC JCE \n> provider.\n> \n> But I understand that Raul does not want to use BC for that.\n> Write an \"hack\" DER encoding class just to get the info seems to be the better \n> solution.\n\nI would prefer that, as it would eliminate a dependency on both the Sun and\nBouncyCastle classes.\n\nI think it may be as simple as stripping the first 4 bytes of the cert's \nextension value, which are the tag and length bytes of the extension value \nOCTET STRING and then the tag and length bytes of the SKID OCTET STRING ...\n\nI'll test it out and see if it works.", "attachment_id": null, "id": 101340, "creator": "sean.mullan@oracle.com", "time": "2007-04-02T13:46:12Z", "bug_id": 41892, "creation_time": "2007-04-02T13:46:12Z", "is_private": false}, {"count": 8, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "id": 101468, "time": "2007-04-05T09:37:03Z", "bug_id": 41892, "creation_time": "2007-04-05T09:37:03Z", "is_private": false, "text": "I have fixed this by simply stripping the leading ASN.1 tag and length bytes \nfrom the encoded extension value and subject key identifier bytes. I have\nalso removed all the code that depends on Sun internal or BouncyCastle APIs.\n\nI have added a new unit test case but please test it to make sure it \nstill works as expected."}, {"count": 9, "tags": [], "creator": "sean.mullan@oracle.com", "attachment_id": null, "id": 108415, "time": "2007-09-19T12:33:01Z", "bug_id": 41892, "creation_time": "2007-09-19T12:33:01Z", "is_private": false, "text": "Closing old bugs. Fixed in 1.4.1"}]
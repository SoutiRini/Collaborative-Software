[{"count": 0, "tags": [], "text": "If a CGI script outputs a Status: header with a value other than 200, and\nthen generates malformed headers, the message that is returned to the\nclient includes the bogus statement that \"Additionally, a 500\nInternal Server Error error was encountered while trying to use\nan ErrorDocument to handle the request\" even if no ErrorDocument directives\nare present in the server configuration files.\n\nFor example, with no ErrorDocuments defined, the following Perl CGI script:\n\n#!/usr/bin/perl\nprint \"Status: 404\\n\";\nprint \"FOO\\n\\n\";\n\nproduces this HTML output:\n\nInternal Server Error\nThe server encountered an internal error or misconfiguration and was\nunable to complete your request.\n...\nAdditionally, a 500 Internal Server Error error was encountered while\ntrying to use an ErrorDocument to handle the request.\n\nThis bug occurs with both Apache 1.3 and 2.x (it was tested using 1.3.33 and\n2.1.6-alpha).\n\nThe source of the problem appears to be in ap_process_request() in\nmodules/http/http_request.c.  I will follow up this bug report with\na proposed patch which addresses the issue described below.\n\nThe ap_process_request() function is used by the main \"process_connection\"\nhook functions in modules/http/http_core.c.  The ap_process_request()\nfunction calls ap_invoke_handler(), which calls ap_run_handler(), which\ninvokes the correct \"handler\" hook function for a given request.  In the\ncase of a request that maps to a CGI script, this is either cgi_handler()\nor cgid_handler() in modules/generators/mod_cgi.c or mod_cgid.c,\nrespectively.\n\nThose \"handler\" hook functions both use ap_scan_script_header_err_brigade()\nto parse the HTTP headers output by a CGI script.  That function is\na wrapper around ap_scan_script_header_err_core() in server/util_script.c,\nwhich does the actual parsing.  If ap_scan_script_header_err_core()\nsees a valid Status: header line in the script's output, it sets\nr->status accordingly.  However, it may then encounter an error, for\nexample, if it finds a malformed HTTP header.  In the case of the\nsample CGI script shown above, the \"FOO\" header line causes cgi_handler()\nor cgid_handler() to receive back an HTTP_INTERNAL_SERVER_ERROR return\ncode from ap_scan_script_header_err_brigade().  They pass that back\nthrough their local log_script() function (in mod_cgi.c or mod_cgid.c)\nto ap_run_handler(), which passes it back through ap_invoke_handler()\nto ap_process_request().\n\nWhen ap_process_request() does not receive OK or DONE fro\nap_invoke_handler() it calls ap_die(), also in modules/http/http_request.c.\nThe ap_die() function is called from various places, mostly in the\nmodules/http/* and modules/proxy/* code, in order to terminate the\ncurrent request.  It determines whether an ErrorDocument directive\nexists for a given error code; if one does and it maps to a local\nURL (beginning with a leading / character), then it performs an\ninternal redirection using ap_internal_redirect() in the same file.\nIf the sub-request that is generated causes another error, then ap_die()\nwill be called recursively.\n\nWhen this occurs, ap_internal_redirect() needs to back out of the\nsituation, use the default error message for the original error code,\nand amend it with a note about the secondary error code from the\ninternal redirection.  To do this, it examines r->status for a value\nother than HTTP_OK; if another value is found, then ap_die() assumes\nthat it has been called from within a failing internal redirection\nfor an ErrorDocument directive with a local URL.  It then recovers\nthe initial request data, prevents any handling of customized error\nmessages with ErrorDocument directives, and calls ap_send_error_response()\nin modules/http/http_protocol.c with its recursive_error parameter set.\nThis function is responsible for sending back the appropriate\nerror message to the client, along with the additional information about\nthe recursive_error parameter.\n\nThe problem described in this bug report occurs because if r->status\nhas been set to a value other than HTTP_OK by\nap_scan_script_header_err_core() -- or any other function invoked\nduring request handling -- then ap_die() treats that as a signal\nthat a recursive error is in progress, although this is not true.\n\nThe proposed patch amends the ap_process_request() function by resetting\nr->status to HTTP_OK just before calling ap_die().\n\nNo changes are made to ap_internal_redirect() or\nap_internal_redirect_handler() in the same modules/http/http_request.c\nfile, although they have similar blocks of code.  This is because these\nfunctions are used in various places to perform internal redirections,\ncopying most of the original request's data, including its r->status\nvalue.  This includes ap_die() itself, which uses ap_internal_redirect()\nto handle local URLs in ErrorDocument directives.\n\nThe assumption is therefore made that any caller of these two internal\nredirection functions knows that the r->status value of the initial\nrequest has an appropriate value (i.e., HTTP_OK) before invoking them.\nIf this is not true, then other similar bugs may exist elsewhere in\nthe code; however, a quick scan suggests that some users of these\nfunctions do this.  For example, asis_handler() in\nmodules/generators/mod_asis.c resets r->status to HTTP_OK before\ncalling ap_internal_redirect_handler().  The mod_cgi and mod_cgid\nmodules seem to perform explicit checks for r->status == HTTP_OK\nbefore using these functions.\n\nThe modules/arch/win32/mod_isapi.c file along with mod_rewrite.c,\nmod_actions.c, and mod_negotiation.c in modules/mappers might all\nbe examined to determine if r->status could be a value other than\nHTTP_OK prior to their use of these functions, since if these\nfunctions detect an error and call ap_die(), then ap_die() will\nthink it is handling a recursive error, as is the case with this\nparticular bug.", "attachment_id": null, "id": 78243, "creator": "chrisd@apache.org", "time": "2005-08-09T03:17:35Z", "bug_id": 36090, "creation_time": "2005-08-09T03:17:35Z", "is_private": false}, {"count": 1, "attachment_id": 15973, "bug_id": 36090, "is_private": false, "id": 78244, "time": "2005-08-09T03:19:02Z", "creator": "chrisd@apache.org", "creation_time": "2005-08-09T03:19:02Z", "tags": [], "text": "Created attachment 15973\nsuggested patch to ap_process_request()"}, {"count": 2, "tags": [], "text": "Created attachment 17122\nfor 2.2.0\n\nupdated for 2.2.0", "is_private": false, "bug_id": 36090, "id": 83143, "time": "2005-12-02T16:01:53Z", "creator": "chrisd@apache.org", "creation_time": "2005-12-02T16:01:53Z", "attachment_id": 17122}, {"count": 3, "attachment_id": null, "bug_id": 36090, "is_private": false, "id": 83474, "time": "2005-12-09T13:00:20Z", "creator": "nick@webthing.com", "creation_time": "2005-12-09T13:00:20Z", "tags": [], "text": "Fixed for 2.2.1 in Revision 355454. "}]
[{"count": 0, "tags": [], "bug_id": 1708, "attachment_id": null, "id": 2401, "time": "2001-05-11T01:02:48Z", "creator": "rde@webtrak.co.uk", "creation_time": "2001-05-11T01:02:48Z", "is_private": false, "text": "My servlet sends compressed data to the client using a DataOutputStream:\n\nDataOutputStream out = new DataOutputStream(new GZIPOutputStream(\n                             response.getOutputStream()));\n ... write to out ...\n\nout.close()\n\nDataOutputStream.close() calls flush before the close().  GZIPOutputStream\ndoes not override flush so the flush is called on the ServletOutputStream.\n\nNow if a small amount of data has been written the flush causes the 10-byte GZIP\nheader to be written in a single TCP packet back to the client.  The close then\ncauses the rest of the output to be written in the next packet.  The TCP DELAY\nalgorithm means that the second packet is not sent until an ACK from the client,\nwhich seems to occur about 100ms later.  \n\nThe result of all this is that the request takes 100ms longer than it should;\nin my benchmarks against another servlet engine Tomcat was taking around 125ms\nper request against 25ms for the other server.\n\nWhy does ServletOutputStream do flushes?"}, {"count": 1, "tags": [], "creator": "cmanolache@yahoo.com", "text": "Because it is asked to do - when you call out.flush() ( directly or not ) the\nexpected behavior is to flush. ", "id": 4763, "time": "2001-08-22T22:27:12Z", "bug_id": 1708, "creation_time": "2001-08-22T22:27:12Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "Created attachment 25896\nContains 3 unit tests written using your framework to show the bug\n\nOverview: \n\nPart of our software takes spreadsheets created by a 3rd party scientific device that are generated using POI.   These spreadsheets at times can enter the equivalent of Double.NaN. The files are written successfully, can be read by Excel, saved by excel and still work properly. However, when you try to read these files (written by POI) a RuntimeException is thrown.\n\nThis means not all files written by POI can be read by POI.\n\n\n\nSteps to Reproduce: \n\nRead in any cell within an Excel file containing the equivalent of Double.NaN.\n\nAdditionally, you could also run the attached Unit Test class.  It saves Double.NaN into an excel file (which passes). It fails to read using the Event based and direct methods of reading the file. \n\n\n\nActual Results: \n\nRuntimeException is thrown \n\n\n\nExpected Results: \n\nWe expected Double.NaN to be returned when a cell containing the equivalent was encountered.\n\n\n\nBuild Date & Platform: \n\nEvery build / platform since.\n\nDate: Sat Oct  4 21:43:48 2008\nNew Revision: 701747\n\n\n\nAdditional Information:\n\nWhile this bug may seem trivial, it is a bit of a blocker for our software. \n\nWhen reading in a file using POI that contains Double.NaN, the software specifically throws a RuntimeException during the initial reading that we can not recover from.  \n\nThe fix that would help us out the best would be to return Double.NaN instead of throwing the RuntimeException.  Since Double.NaN can be written by POI, you should also be able to read it.\n\nThis RuntimeException is thrown  in the following method: \n\npublic double readDouble() {\n    long valueLongBits = readLong();\n    double result = Double.longBitsToDouble(valueLongBits);\n    if (Double.isNaN(result)) {\n        throw new RuntimeException(\"Did not expect to read NaN\"); // (Because Excel typically doesn't write NaN\n    }\n\n    return result;\n}\n\n\n\nLog results for Unit test: This was run against 3.6\n\nTestsuite: org.apache.poi.hssf.record.TestDoubleNotANumber\nTests run: 3, Failures: 0, Errors: 2, Time elapsed: 0.009 sec\n------------- Standard Output ---------------\n\nthe sheet [1]:\n------------- ---------------- ---------------\n\nTestcase: testWriteNaNToFileSystem took 0.001 sec\nTestcase: testEventBasedDoubleNaNError took 0.004 sec\n\tCaused an ERROR\nUnable to construct record instance\norg.apache.poi.hssf.record.RecordFormatException: Unable to construct record instance\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionRecordCreator.create(RecordFactory.java:64)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:263)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.readNextRecord(RecordFactoryInputStream.java:270)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.nextRecord(RecordFactoryInputStream.java:236)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:122)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:85)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processWorkbookEvents(HSSFEventFactory.java:56)\n\tat org.apache.poi.hssf.record.TestDoubleNotANumber$NaNSpreadsheetParser.process(TestDoubleNotANumber.java:206)\n\tat org.apache.poi.hssf.record.TestDoubleNotANumber.testEventBasedDoubleNaNError(TestDoubleNotANumber.java:68)\nCaused by: java.lang.RuntimeException: Did not expect to read NaN\n\tat org.apache.poi.hssf.record.RecordInputStream.readDouble(RecordInputStream.java:270)\n\tat org.apache.poi.hssf.record.NumberRecord.<init>(NumberRecord.java:43)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionRecordCreator.create(RecordFactory.java:56)\n\nTestcase: testDirectDoubleNaNError took 0.001 sec\n\tCaused an ERROR\nUnable to construct record instance\norg.apache.poi.hssf.record.RecordFormatException: Unable to construct record instance\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionRecordCreator.create(RecordFactory.java:64)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:263)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.readNextRecord(RecordFactoryInputStream.java:270)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.nextRecord(RecordFactoryInputStream.java:236)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:392)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:276)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:201)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:317)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:298)\n\tat org.apache.poi.hssf.HSSFTestDataSamples.openSampleWorkbook(HSSFTestDataSamples.java:46)\n\tat org.apache.poi.hssf.record.TestDoubleNotANumber.testDirectDoubleNaNError(TestDoubleNotANumber.java:83)\nCaused by: java.lang.RuntimeException: Did not expect to read NaN\n\tat org.apache.poi.hssf.record.RecordInputStream.readDouble(RecordInputStream.java:270)\n\tat org.apache.poi.hssf.record.NumberRecord.<init>(NumberRecord.java:43)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionRecordCreator.create(RecordFactory.java:56)", "attachment_id": 25896, "id": 139139, "creator": "pdunlea@gmail.com", "time": "2010-08-17T09:13:27Z", "bug_id": 49761, "creation_time": "2010-08-17T09:13:27Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 49761, "is_private": false, "count": 1, "id": 139140, "time": "2010-08-17T09:22:35Z", "creator": "apache@gagravarr.org", "creation_time": "2010-08-17T09:22:35Z", "text": "If you create a file using Excel, and put in that a NaN, can poi read that, or does it fail in the same way as a poi written NaN ?\n\nAlso, if you could upload an excel created file with a NaN in it, that'd be great as we can use it for a basis of additional unit tests once this is fixed"}, {"count": 2, "tags": [], "bug_id": 49761, "attachment_id": 25898, "id": 139163, "time": "2010-08-17T15:05:13Z", "creator": "pdunlea@gmail.com", "creation_time": "2010-08-17T15:05:13Z", "is_private": false, "text": "Created attachment 25898\nSpreadsheet containing NaN\n\nAttached is a POI created excel file containing Double.NaN"}, {"count": 3, "tags": [], "text": "Created attachment 25899\nExcel Generated Excel file with NaN\n\nThis was created using Excel", "is_private": false, "id": 139164, "creator": "pdunlea@gmail.com", "time": "2010-08-17T15:10:52Z", "bug_id": 49761, "creation_time": "2010-08-17T15:10:52Z", "attachment_id": 25899}, {"count": 4, "tags": [], "text": "Q:  If you create a file using Excel, and put in that a NaN, can poi read that, or\ndoes it fail in the same way as a poi written NaN ?\n\nA:  It fails the same way as if it was written in POI.\n\nAttached are both a spreadsheet written by POI and one written by Excel for testing purposes.", "is_private": false, "id": 139168, "creator": "pdunlea@gmail.com", "time": "2010-08-17T15:28:55Z", "bug_id": 49761, "creation_time": "2010-08-17T15:28:55Z", "attachment_id": null}, {"count": 5, "tags": [], "text": "Thanks for all the digging and the files!\n\nIf no-one beats me to it, I'll take a look when I'm next near a computer with eclipse on it", "attachment_id": null, "id": 139172, "creator": "apache@gagravarr.org", "time": "2010-08-17T16:54:22Z", "bug_id": 49761, "creation_time": "2010-08-17T16:54:22Z", "is_private": false}, {"count": 6, "tags": [], "text": "A very interesting case, thanks for your investigations.\n\nThe point is that Excel's implementation of floating-point arithmetic does not fully adhere to IEEE 754. In particular, Excel does not support the notion of Positive/Negative Infinities and Not-a-Number (NaN). \n\nIn case of Infinities Excel generates a #DIV/0! error. This typically occurs when you divide by 0.\nIn case of NaN Excel generates an #NUM! error which indicates invalid number. For example, SQRT(-1) will result in a #NUM! error. \n\nMore details can be found at http://support.microsoft.com/kb/78113\n\n\nPOI allows you to set Double.NaN, but Excel displays an unexpected value of 2.69653970229347E+308. If the result is referenced by a Excel formula then your scientific software may give incorrect results because any math operation involving NaN should result in NaN. \n\n\nTo make POI compatible with Excel the following rules must be followed:\n\n - setting a cell value to Double.NaN should change the cell type to CELL_TYPE_ERROR and error value #NUM!\n - setting a cell value to Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY should change the cell type to CELL_TYPE_ERROR and error value #DIV/0!\n\nThe rules should work both in HSSF and XSSF.\n\nI applied this fix in r992591.\n\nIf you process the generated workbooks in Java you should check type of cells because double can be retrieved only from numeric cells. The code may look as follows:\n\n        double value;\n        switch(cell.getCellType()){\n            case Cell.CELL_TYPE_ERROR:\n                byte errorValue = cell.getErrorCellValue();\n                if(errorValue == ErrorConstants.ERROR_DIV_0)\n                    value = Double.POSITIVE_INFINITY;\n                if(errorValue == ErrorConstants.ERROR_NUM)\n                    value = Double.NaN;\n                break;\n            case Cell.CELL_TYPE_NUMERIC:\n                value = cell.getNumericCellValue();\n                break;\n        }\n\n\nRegards,\nYegor", "is_private": false, "id": 139692, "creator": "yegor@dinom.ru", "time": "2010-09-04T08:34:22Z", "bug_id": 49761, "creation_time": "2010-09-04T08:34:22Z", "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 49761, "attachment_id": null, "id": 140699, "time": "2010-10-12T10:54:53Z", "creator": "t.mazilu@candoprojects.com", "creation_time": "2010-10-12T10:54:53Z", "is_private": false, "text": "Hi\nI had the same problem, saw that a bugfix was coming in 3.7 beta3. Now \nI downloaded the fix tried it and it didn't work.\n\n\nSince English is not my mother tongue either I didn't understand\nthe fix or this seem to be only a partial fix.\n\nMy stack trace would be the same as the reporters but the bug\ndescription would be slightly different.\n\n\nWhat I try to do is create a HSSFWorkbook from an existing xls-file:\n\"\nPOIFSFileSystem poifs = new POIFSFileSystem(fin);\nfin.close();\nworkbook = new HSSFWorkbook(poifs);\n\"\nThis operation fails already in the reading of the InputStream.\nAs the original reporter posted in the class\norg.apache.poi.hssf.record.RecordInputStream\nthere is the posted readDouble () method which doesn't expect \nExcell to deliver a double with the value NaN.\nIf somehow it does get a NaN it throws a RuntimeException.\nSince the xls file I try to read seems to have a cell containing NaN\nthe whole process fails and the HSSFWorkbook is not created.\n\nAs I understand the bugfix, it fixes the setCellValue(double value)\nof the HSSFCell to accept NaN.\nBut this method is never called since already reading the cell from the\nStream throws a RuntimeException.\n\nI privately rewrote org.apache.poi.hssf.record.RecordInputStream.readDouble()\nto not check for NaN and it worked for my case, but I don't know if there are\nany sideeffects, so I'd rather post it here.\n(\n\tpublic double readDouble() {\n\t\tlong valueLongBits = readLong();\n\t\tdouble result = Double.longBitsToDouble(valueLongBits);\n\t\treturn result;\n\t}\n)\n\n\nps.\nSorry for maybe posting about an already fixed bug, but\nthe stack trace of the bug is really like mine and it is still\nhappening with 3.7 beta 3.\n\nBest Regards,\nTheo"}, {"count": 8, "text": "A unit test was added along with the fix, which shows the problem fixed for the original use case. If you're still having problems, please can you upload a file that demonstrates the problem when running with 3.7 beta 3, then we can use that for further testing + unit tests", "creator": "apache@gagravarr.org", "is_private": false, "id": 140701, "time": "2010-10-12T12:10:30Z", "bug_id": 49761, "creation_time": "2010-10-12T12:10:30Z", "tags": [], "attachment_id": null}, {"count": 9, "tags": [], "text": "Created attachment 26165\nThis is the xls file I tested with that threw the exception.\n\nThat is the xls file.\n\nHere is a sample code that throws the exception I'll post at the bottom.\nThe stack trace is identical to the one posted by the creator of the thread.\npoi-3.7-beta3-20100924.jar is the jar I have added to my classpath.\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\n\npublic class XlsError {\n\tpublic static void main(String[] args) {\n\t\tHSSFWorkbook workbook = null;\n\t\tFileInputStream fin = null;\n\t\ttry {\n            fin = new FileInputStream(\"capacityAnalysis.xls\");\n        } catch (FileNotFoundException fnf){\n        \tfnf.printStackTrace();\n        }\n        try{\n    \t    POIFSFileSystem poifs = new POIFSFileSystem(fin);\n            fin.close();\n        \tworkbook = new HSSFWorkbook(poifs);\n        }catch(Exception e){\n        \te.printStackTrace();\n        }\n\t}\n}\n\n\n\norg.apache.poi.hssf.record.RecordFormatException: Unable to construct record instance\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionConstructorRecordCreator.create(RecordFactory.java:65)\n\tat org.apache.poi.hssf.record.RecordFactory.createSingleRecord(RecordFactory.java:300)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.readNextRecord(RecordFactoryInputStream.java:270)\n\tat org.apache.poi.hssf.record.RecordFactoryInputStream.nextRecord(RecordFactoryInputStream.java:236)\n\tat org.apache.poi.hssf.record.RecordFactory.createRecords(RecordFactory.java:442)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:263)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:188)\n\tat org.apache.poi.hssf.usermodel.HSSFWorkbook.<init>(HSSFWorkbook.java:170)\n\tat XlsError.main(XlsError.java:18)\nCaused by: java.lang.RuntimeException: Did not expect to read NaN\n\tat org.apache.poi.hssf.record.RecordInputStream.readDouble(RecordInputStream.java:276)\n\tat org.apache.poi.hssf.record.NumberRecord.<init>(NumberRecord.java:43)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)\n\tat java.lang.reflect.Constructor.newInstance(Unknown Source)\n\tat org.apache.poi.hssf.record.RecordFactory$ReflectionConstructorRecordCreator.create(RecordFactory.java:57)\n\t... 8 more", "is_private": false, "id": 140705, "creator": "t.mazilu@candoprojects.com", "time": "2010-10-13T03:11:04Z", "bug_id": 49761, "creation_time": "2010-10-13T03:11:04Z", "attachment_id": 26165}, {"count": 10, "tags": [], "bug_id": 49761, "attachment_id": 26170, "id": 140727, "time": "2010-10-13T11:42:34Z", "creator": "pdunlea@gmail.com", "creation_time": "2010-10-13T11:42:34Z", "is_private": false, "text": "Created attachment 26170\n3 Unit Tests showing error still occurs\n\nI download from SVN the poi-3.7-beta3 tag the entire file structure and stuck my test into \nsrc/testcases  org.apache.poi.hssf.record so it could be run as part of \"ant test\" when building.   \n\nWe have a scientific instrument that exports Double.NaN into an excel file.  We can NOT upgrade the software or change how it works.  We must be able to read this file into our application.  The way you are handing Double.NaN is keeping this from happening.  The prior version of POI we were using allowed the reading of Double.NaN.\n\nThe error is still occurring in both the Event Based and direct modes of reading an excel file.\n\nTest 1:  testWriteNaNToFileSystem()  \n\n-  Shows that you can create a file with Double.NaN.  Properly saves the file with no errors.  \n-  This test passes.\n\nTest 2:  testEventBasedDoubleNaNError()\n\n-  Creates the same file and reads it using the event based model.  Saves the Double read into a variable as part of the listener.   Asserts that the value read in is not null. \n-  This test fails.\n\nTest 3:  testDirectDoubleNaNError()\n\n-  Creates the same file and reads it using a direct approach.  Asserts that the value read in from the cell is equal the the value put into the file\n-  This test fails."}, {"count": 11, "tags": [], "bug_id": 49761, "attachment_id": null, "id": 140728, "time": "2010-10-13T11:59:33Z", "creator": "dfisher@jmlafferty.com", "creation_time": "2010-10-13T11:59:33Z", "is_private": false, "text": "What version of Apache POI is the scientific instrument using? I am not saying that you must upgrade it, I just want to know which version so we can understand better what happened at r701747 that really causes this trouble."}, {"count": 12, "tags": [], "bug_id": 49761, "attachment_id": null, "id": 140731, "time": "2010-10-13T14:19:05Z", "creator": "pdunlea@gmail.com", "creation_time": "2010-10-13T14:19:05Z", "is_private": false, "text": "We have these numbers coming from various places\n\nInstrument 1: POI 3.2\nInstrument 2: POI 3.6\nInstrument 3: Not POI, but gives an excel file we need to read\n\nAll of them put the Excel equivalent to Double.NaN into the files.  For excel this is: 2.6965E+308 or 2.69653970229347E+308\n\nAn excel file can be created separately with that value and still cause the same exception.\n\nWhat caused this is a change at some point in POI where instead of returning Double.NaN an exception is thrown.  If you look at the first comment, you can see where the check for Double.NaN was first added.  I'm not sure whether it has changed it is at this point or not.  But an exception for Double.NaN as a value is definitely breaking things for us."}, {"count": 13, "tags": [], "text": "The failing test cases demonstrate expected behavior, they are not bugs.\n\nWhen dealing with NaNs and Infinities POI mimics Excel, see my comment above. Setting Double.NaN changes cell type to FORMULA and cell.getNumericCellValue() can only be called for numeric cells. The correct version of testDirectDoubleNaNError()  is as follows:\n\n\n\n    public void testDirectDoubleNaNError() throws IOException {\n\n        // Write the file with Double.NaN in it\n        createFile(SPREADSHEET_FILE_NAME);\n\n        // Read the file\n\tHSSFWorkbook workbook = HSSFTestDataSamples.openSampleWorkbook(SPREADSHEET_FILE_NAME);\n\tHSSFCell cell = workbook.getSheet(THE_SHEET).getRow(currentSheetRow).getCell(currentSheetRow);\n\n        Double value = null;\n        switch(cell.getCellType()){\n            case Cell.CELL_TYPE_ERROR:\n                byte errorValue = cell.getErrorCellValue();\n                if(errorValue == ErrorConstants.ERROR_DIV_0)\n                    value = Double.POSITIVE_INFINITY;\n                if(errorValue == ErrorConstants.ERROR_NUM)\n                    value = Double.NaN;\n                break;\n            case Cell.CELL_TYPE_NUMERIC:\n                value = cell.getNumericCellValue();\n                break;\n        }\n\n\n        // We should be getting back the exact same value we put in.\n        Assert.assertTrue(value.equals(VALUE_PRINTED));\n    }\n\n\ntestEventBasedDoubleNaNError() fails for the same reason - Setting Double.NaN results in a formula cell and a NumberRecord is not written in the binary stream.\n\n\nThe real issue is that POI prior to 3.7-beta3 allowed writing NaNs and you want to process these files. I'm inclined to comment the exception in RecordInputStream.readDouble, but this fix will come after 3.7-FINAL.\n\nYegor", "attachment_id": null, "id": 140742, "creator": "yegor@dinom.ru", "time": "2010-10-14T05:53:39Z", "bug_id": 49761, "creation_time": "2010-10-14T05:53:39Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 49761, "is_private": false, "count": 14, "id": 141570, "time": "2010-11-09T10:35:57Z", "creator": "yegor@dinom.ru", "creation_time": "2010-11-09T10:35:57Z", "text": "I fixed POI to tolerate Double.NaN when reading .xls file. The fix was committed in r1033004. \n\nThe fix is provided for backward compatibility. POI 3.7+ never writes Double.NaN, instead it converts the cell type to error. See my previous posts.\n\nYegor"}]
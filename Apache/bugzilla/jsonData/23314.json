[{"attachment_id": null, "tags": [], "creator": "keeleyd@clear.net.nz", "is_private": false, "count": 0, "id": 44421, "time": "2003-09-22T03:19:40Z", "bug_id": 23314, "creation_time": "2003-09-22T03:19:40Z", "text": "Provide the path and file name relative to the base directory as a parameter to \neach XSL transform.  We have many applications that need this relative path \nbecause a derivative of it is output by the transform.  e.g. we generate java \nsource and the package in the java source is derived from this relative path.\n\nAfter inspecting the ant nightly code drop, I think this is a one line change.  \nSee the one line added in the code sample below \nFrom the file org.apache.tools.ant.taskdefs.XSTLProcess ...\n\nFor examples sake, I suggested the parameter name \"xml-file\" which would need \nto be documented as a standard parameter available to all transforms.\n\nI would be happy to effect this change myself if you wish, obviously I would \nneed access to the CVS to do so.\n\nI look forward to your response.\n\nRegards\nDave Keeley\n\n\n    /**\n     * Processes the given input XML file and stores the result\n     * in the given resultFile.\n     *\n     * @param baseDir the base directory for resolving files.\n     * @param xmlFile the input file\n     * @param destDir the destination directory\n     * @param stylesheet the stylesheet to use.\n     * @exception BuildException if the processing fails.\n     */\n    private void process(File baseDir, String xmlFile, File destDir,\n                         File stylesheet)\n        throws BuildException {\n        \n        String fileExt = targetExtension;\n        File   outFile = null;\n        File   inFile = null;\n        \n        try {\n            long styleSheetLastModified = stylesheet.lastModified();\n            inFile = new File(baseDir, xmlFile);\n\n            if (inFile.isDirectory()) {\n                log(\"Skipping \" + inFile + \" it is a directory.\",\n                    Project.MSG_VERBOSE);\n                return;\n            }\n            \n            int dotPos = xmlFile.lastIndexOf('.');\n            if (dotPos > 0) {\n                outFile = new File(destDir, \n                    xmlFile.substring(0, xmlFile.lastIndexOf('.')) + fileExt);\n            } else {\n                outFile = new File(destDir, xmlFile + fileExt);\n            }\n            if (force ||\n                inFile.lastModified() > outFile.lastModified() ||\n                styleSheetLastModified > outFile.lastModified()) {\n                ensureDirectoryFor(outFile);\n                log(\"Processing \" + inFile + \" to \" + outFile);\n                \n                configureLiaison(stylesheet);\n                // ONE LINE ENHANCEMENT BELOW...\n                liaison.addParam(\"xml-file\", xmlFile);\n                liaison.transform(inFile, outFile);\n            }\n        } catch (Exception ex) {\n            // If failed to process document, must delete target document,\n            // or it will not attempt to process it the second time\n            log(\"Failed to process \" + inFile, Project.MSG_INFO);\n            if (outFile != null) {\n                outFile.delete();\n            }\n            \n            throw new BuildException(ex);\n        }\n        \n    } //-- processXML"}, {"count": 1, "tags": [], "bug_id": 23314, "is_private": false, "text": "I 'think' that what you are asking is part of XPath 2.0 specifications but I \ncould be wrong. As of now it will depend on the processor you are using to get \nthis extra feature. I don't think it would be appropriate for Ant to start \npassing such parameters while the job can be done with extensions.\n\nWith saxon, it is saxon:system-id() or saxon:base-uri() in your xsl\n\nFor xalan, I'm not sure, maybe the NodeInfo extension can help you. Or you can \ncode the extension yourself.\n", "id": 47387, "time": "2003-11-15T06:40:00Z", "creator": "sbailliez@apache.org", "creation_time": "2003-11-15T06:40:00Z", "attachment_id": null}]
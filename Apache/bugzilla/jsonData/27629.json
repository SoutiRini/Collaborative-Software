[{"count": 0, "tags": [], "creator": "Christian.Nester@sap.com", "text": "Hi,\n\nthe Deflater object, that is used inside the GZIPStream uses native memory. \nThis memory will only be free, when the Deflater's finializer runs. See also \nSun's Bugparades. If the memory is not free, an OutOfMemoryError is created \nsooner or later.\nIn an enviroment with a lot of memory the java GC might be invoked too late. I \nwas able to crash tomcat with a lot of memory and some test load in a few \nseconds.\nThe solution is to explizitly close the Deflater Objekt to free the native \nmemory. This can be done by closing the GZIP stream.\nMy propose solution to fix the problem in GZIPOutputFilter is included below.\nAfter that change, I was not able to reproduce the crash.\nPlease verify my solution.\n\nRegards,\nChristian\n\n\n    public long end()\n        throws IOException {\n        if (compressionStream == null) {\n            compressionStream = new GZIPOutputStream(fakeOutputStream);\n        }\n        compressionStream.finish();\n\t  long result = ((OutputFilter) buffer).end();\n        compressionStream.close(); // frees the deflater memory!\n        return result;\n    }", "id": 53926, "time": "2004-03-12T11:52:38Z", "bug_id": 27629, "creation_time": "2004-03-12T11:52:38Z", "is_private": false, "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 27629, "is_private": false, "count": 1, "id": 53929, "time": "2004-03-12T12:16:55Z", "creator": "remm@apache.org", "creation_time": "2004-03-12T12:16:55Z", "text": "And this wouldn't work ?\n    public long end()\n        throws IOException {\n        if (compressionStream == null) {\n            compressionStream = new GZIPOutputStream(fakeOutputStream);\n        }\n        compressionStream.finish();\n        compressionStream.close(); // frees the deflater memory!\n        return ((OutputFilter) buffer).end();\n    }"}, {"count": 2, "tags": [], "creator": "Christian.Nester@sap.com", "is_private": false, "text": "Hi,\n\nI assume, that this would also work. I am not very familiar with the \narchitecture of the filtering, so I wanted to place the close() call as \nconservative as possible (after the buffer.end() call). It was just to be on \nthe save side.\n\nRegards,\nChristian\n", "id": 53930, "time": "2004-03-12T12:25:04Z", "bug_id": 27629, "creation_time": "2004-03-12T12:25:04Z", "attachment_id": null}, {"count": 3, "tags": [], "creator": "remm@apache.org", "text": "As I understand it, only finish will output data. close is supposed to release\nmemory, so there shouldn't be any problem.\nWe really need to use a byte array based Java implementation for compression.\nAll the native code and fake streams make the code really bad.", "id": 53931, "time": "2004-03-12T12:29:31Z", "bug_id": 27629, "creation_time": "2004-03-12T12:29:31Z", "is_private": false, "attachment_id": null}]
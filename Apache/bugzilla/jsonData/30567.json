[{"count": 0, "tags": [], "bug_id": 30567, "text": "<apply> on a <classfileset> appears to operate on every file that the\nclassfileset could potentially include, rather than only on the files the\nrootclass depends on. <apply> on a regular <fileset> behaves as expected.\n\nParadoxially, the <jar> task applied to the very same classfileset, includes\nonly the 'depends on' files.\n\nHere is a small example:\n\n==================================================\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project basedir=\".\" default=\"play\" name=\"PLAY\">\n\n    <property name=\"out.dir\" location=\"ant\"/>\n    <property name=\"root.dir\" location=\"${basedir}\"/>\n    <property name=\"src.dir\" location=\"${root.dir}/src\"/>\n    <property name=\"build.dir\" location=\"${out.dir}/build\"/>\n    <property name=\"build.classes.dir\" location=\"${build.dir}/classes\"/>\n\n    <classfileset dir=\"${build.classes.dir}\" id=\"playcfs\"\nrootclass=\"genomix.app.alignView.Jalopy\" />\n\n    <fileset dir=\"${build.classes.dir}\" id=\"playfs\">\n        <include name=\"**/Assagai*\"/>\n    </fileset>\n\n    <target name=\"play\">\n        <jar destfile=\"/tmp/play.jar\">\n            <fileset refid=\"playcfs\"/>  \n        </jar>\n        <apply executable=\"echo\"  output=\"/tmp/play.cfs\" parallel=\"true\"\nappend=\"false\" >\n            <fileset refid=\"playcfs\"/>\n        </apply>\n        <apply executable=\"echo\" output=\"/tmp/play.fs\" parallel=\"true\"\nappend=\"false\" >\n            <fileset refid=\"playfs\"/>\n        </apply>\n    </target>\n\n</project>\n=============================================\nAfter running the build:\n\n\"play.jar\" contains 149 files, a small subset of the build directory tree.\n\"play.cfs\" contains 1021 files, the total number of files in the build tree.\n\"play.fs\" contains 8 files, which is the correct subset based on the selector.", "id": 61767, "time": "2004-08-10T18:51:53Z", "creator": "hanafey@dna.es.dupont.com", "creation_time": "2004-08-10T18:51:53Z", "is_private": false, "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 30567, "text": "The reason it would be nice to <apply> over the files in a <classfileset> is by\nusing a <mapper> nested element it is then easy to do some text based analysis\non the files in the dependency tree. In particualar, if simple coding\nconventions are followed it is easy to pick out the icon resources that are also\nlogically part of the dependency tree, and include them in a jar file.\n\nThis issue should be easy to confirm by adding a little target along the lines\nof the example in the original post, to almost any build file.", "id": 61813, "time": "2004-08-11T13:08:56Z", "creator": "hanafey@dna.es.dupont.com", "creation_time": "2004-08-11T13:08:56Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 30567, "text": "Created attachment 12448\nTest case and patch", "id": 62052, "time": "2004-08-16T19:39:55Z", "creator": "hanafey@dna.es.dupont.com", "creation_time": "2004-08-16T19:39:55Z", "is_private": false, "attachment_id": 12448}, {"count": 3, "tags": [], "bug_id": 30567, "attachment_id": null, "id": 62053, "time": "2004-08-16T19:48:14Z", "creator": "hanafey@dna.es.dupont.com", "creation_time": "2004-08-16T19:48:14Z", "is_private": false, "text": "A small test case that illustrates the problem was attached. A patch that fixes\nthe problem is included, but it may not be the right way to fix the problem.\n\nWithout the patch targets \"c\" and \"d\" produce the same output. With the patch\ntarget \"c\" correctly only includes the dependent files."}, {"count": 4, "tags": [], "bug_id": 30567, "text": "It's pretty apparent that I introduced this bug when I implemented the scanning \nin ExecuteOn (<apply>).  In retrospect that seems like an obviously bad \ndecision but what are you going to do?  In order to move forward I have added \nthe methods to get included file/dir counts to DirectoryScanner and overridden \nthem in DependScanner, then modified ExecuteOn to go back to a normal \nDirectoryScanner usage.  Please try CVS HEAD and see how that works for you.\n\nThanks,\nMatt", "id": 62055, "time": "2004-08-16T22:01:07Z", "creator": "mbenson@apache.org", "creation_time": "2004-08-16T22:01:07Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 30567, "text": "I am not able to pull from CVS. Is there another way to get snapshot? I would be\nhappy just getting a nightly binary build, but there does not appear to be a way\nto do that.", "id": 62140, "time": "2004-08-18T19:16:28Z", "creator": "hanafey@dna.es.dupont.com", "creation_time": "2004-08-18T19:16:28Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "mbenson@apache.org", "attachment_id": null, "text": "I don't know what the best answer is.  Can you explain the reason you can't get \nthe source from CVS?\n\nThanks,\nMatt", "id": 62142, "time": "2004-08-18T19:22:34Z", "bug_id": 30567, "creation_time": "2004-08-18T19:22:34Z", "is_private": false}]
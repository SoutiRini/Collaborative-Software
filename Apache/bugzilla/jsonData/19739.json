[{"count": 0, "tags": [], "creator": "brett.knights@tanner.com", "text": "I have a spreadsheet with data originally from Japan. When I tried copying it \nwith the source below but the size grows by 3k and I get a message \nsaying \"Unable to open file\" when I try to open the copy.\n\ncopy code from a POI example:\nimport org.apache.poi.poifs.filesystem.POIFSFileSystem;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\n\npublic class ReadWriteWorkbook\n{\n    public static void main(String[] args)\n        throws IOException\n    {\n        POIFSFileSystem fs      =\n                new POIFSFileSystem(new FileInputStream(args[0]));\n        HSSFWorkbook wb = new HSSFWorkbook(fs, true);\n        HSSFSheet sheet = wb.getSheetAt(0);\n\n        // Write the output to a file\n        FileOutputStream fileOut = new FileOutputStream(args[1]);\n        wb.write(fileOut);\n        fileOut.close();\n\n    }\n}", "id": 36849, "time": "2003-05-07T16:38:09Z", "bug_id": 19739, "creation_time": "2003-05-07T16:38:09Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 19739, "attachment_id": 6260, "is_private": false, "id": 36851, "time": "2003-05-07T16:39:16Z", "creator": "brett.knights@tanner.com", "creation_time": "2003-05-07T16:39:16Z", "text": "Created attachment 6260\nSpreadsheet that does not copy successfully."}, {"count": 2, "tags": [], "creator": "brett.knights@tanner.com", "text": "I stripped down the spreadsheet until I had a very simple one that still \nwouldn't copy. \n\nIt turns out the problem was in the handling of ContinueRecords. In four cases \nin my spreadsheet ContinueRecords followed UnknownRecords. UnknownRecord can't \nprocess ContinueRecords so whatever information was there wasn't being copied \nto my new spreadsheet. \n\nI could probably have modified UnknownRecord to suck any following \nContinueRecords in but and recreate them on serialization but the \nUnknownRecords weren't anywhere near the record size limit so I have no idea \nwhy the ContinueRecords were there in the first place.\n\nInstead I made the following changes to allow my spreadsheet to copy:\nAdded a method to org.apache.poi.hssf.record.Record:\n\n    /**\n     * Does this record want to process a Continue record?\n     *\n     */\n\n    public boolean isContinueRecordAware()\n    {\n        return false;\n    }\n\nI overrode this method to return true in SSTDeserializer and SSTRecord.\n\nReplaced line 218 of RecordFactory with:\n                               if(last_record.isContinueRecordAware()){\n                                  last_record.processContinueRecord(data);\n                               }else{\n                                  last_record = record;\n                                  records.add(record);\n                               }\n\nThen I made a bunch of changes to ContinueRecord to allow it to serialize like \nUnknownRecord. I can diff these if you are interested in applying this as a \npatch.\n\nI don't know if this is the best approach to handling ContinueRecords though.\n\nOne thought is to make Record ContinueRecord-aware and have it just keep a list \nof following ContinueRecords. Classes like SSTDeserializer and SSTRecord would \nexpand their ContinueRecords as they do now but would also keep their \nContinueRecord copies and would only toss their ContinueRecords(to be \nreconstitued if possible) if any of their fields were modified. \n\nUnmodified classes would automatically include their ContinueRecords on \nserialization.", "id": 36987, "time": "2003-05-09T15:40:58Z", "bug_id": 19739, "creation_time": "2003-05-09T15:40:58Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "creator": "avik@apache.org", "text": "Which version are you using? I thought this was fixed in some of the later\nversion AFAIK. Danny, had you not had a go at this??", "id": 37000, "time": "2003-05-09T17:57:41Z", "bug_id": 19739, "creation_time": "2003-05-09T17:57:41Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "text": "This was in 1.10.0 from March 4, 2003", "is_private": false, "id": 37002, "creator": "brett.knights@tanner.com", "time": "2003-05-09T18:08:04Z", "bug_id": 19739, "creation_time": "2003-05-09T18:08:04Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 19739, "attachment_id": null, "is_private": false, "id": 37003, "time": "2003-05-09T18:21:16Z", "creator": "dmui@apache.org", "creation_time": "2003-05-09T18:21:16Z", "text": "No sorry, just played with SharedFormula records recently.  Smells like a good\nuse for another aggregate!  Looks tacklable though.\n\n"}, {"count": 6, "tags": [], "bug_id": 19739, "text": "Created attachment 6348\nAllows ContinueRecords to be copied as-is when following a non-aware record type", "id": 37121, "time": "2003-05-13T13:17:23Z", "creator": "brett.knights@tanner.com", "creation_time": "2003-05-13T13:17:23Z", "is_private": false, "attachment_id": 6348}, {"count": 7, "tags": [], "bug_id": 19739, "attachment_id": null, "is_private": false, "id": 37122, "time": "2003-05-13T13:20:03Z", "creator": "brett.knights@tanner.com", "creation_time": "2003-05-13T13:20:03Z", "text": "I created a patch that implements my current hack for this problem. It doesn't \nbreak any existing test cases and isn't too much code that removing it would be \nan issue if a real fix is ever implemented."}, {"count": 8, "tags": [], "bug_id": 19739, "attachment_id": null, "is_private": false, "id": 37603, "time": "2003-05-22T15:43:55Z", "creator": "brett.knights@tanner.com", "creation_time": "2003-05-22T15:43:55Z", "text": "\n\n\n\n*** This bug has been marked as a duplicate of 17373 ***"}]
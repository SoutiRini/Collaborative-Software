[{"attachment_id": null, "tags": [], "bug_id": 50585, "text": "If JMeter is started from Maven no functions (e.g., __properties) are loaded.\n\nThe functions are loaded dynamically at startup, when the class org.apache.jmeter.engine.util.CompoundVariable is loaded. This class calls org.apache.jorphan.reflect.ClassFinder to search for classes implementing the Function interface. ClassFinder checks for all jars in the java.classpath for such implementations.\n\nIf called from Maven (cf. https://github.com/Ronnie76er/jmeter-maven-plugin) the class path only contains some Maven related jars. Hence, no functions can be found and used in the tests.", "count": 0, "id": 143337, "time": "2011-01-14T06:28:36Z", "creator": "asf-bugs@aschemann.net", "creation_time": "2011-01-14T06:28:36Z", "is_private": false}, {"count": 1, "tags": [], "text": "This is a bug in the Maven plugin which is not part of the Apache JMeter project.\n\nPlease report any problems to the Maven project.", "is_private": false, "id": 143344, "creator": "sebb@apache.org", "time": "2011-01-14T11:18:03Z", "bug_id": 50585, "creation_time": "2011-01-14T11:18:03Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 50585, "attachment_id": null, "is_private": false, "id": 184540, "time": "2015-08-13T09:01:28Z", "creator": "bastian.dev@gmail.com", "creation_time": "2015-08-13T09:01:28Z", "text": "This also happens when using the JMeter API directly and providing JMeter dependencies through the maven repositories.\n\nThe problem is that jorphan ClassFinder#getClasspathMatches tries to find the jars from lib/ext by jarfile the exact name in the classpath. Using Maven artifacts results in having different names for the same modules. E.g. ApacheJMeter_functions.jar is different than ApacheJMeter_functions-2.13.jar.\n\nTo work around the problem you can either rename the jars in lib/ext/*.jar to lib/ext/*-2.13.jar or patch the JMeter property \"search_path\" to explicitly include the JMeter jars provided by maven (or set it to System.getProperty(\"java.class.path\") as a shortcut).\n\nIt would be really helpful if you can fix the ClassFinder in JMeter to avoid those hassles to Maven/API users."}, {"count": 3, "tags": [], "bug_id": 50585, "attachment_id": null, "is_private": false, "id": 184541, "time": "2015-08-13T09:58:20Z", "creator": "sebb@apache.org", "creation_time": "2015-08-13T09:58:20Z", "text": "(In reply to bastian.dev from comment #2)\n> This also happens when using the JMeter API directly and providing JMeter\n> dependencies through the maven repositories.\n\nCan you provide a simple example script that shows the problem?\n\n> The problem is that jorphan ClassFinder#getClasspathMatches tries to find\n> the jars from lib/ext by jarfile the exact name in the classpath. Using\n> Maven artifacts results in having different names for the same modules. E.g.\n> ApacheJMeter_functions.jar is different than ApacheJMeter_functions-2.13.jar.\n> \n> To work around the problem you can either rename the jars in lib/ext/*.jar\n> to lib/ext/*-2.13.jar or patch the JMeter property \"search_path\" to\n> explicitly include the JMeter jars provided by maven (or set it to\n> System.getProperty(\"java.class.path\") as a shortcut).\n> \n> It would be really helpful if you can fix the ClassFinder in JMeter to avoid\n> those hassles to Maven/API users.\n\nSince the user can define the \"search_path\" property to get round the problem, I don't see why JMeter needs to be updated."}, {"count": 4, "tags": [], "bug_id": 50585, "attachment_id": null, "is_private": false, "id": 184542, "time": "2015-08-13T10:01:09Z", "creator": "bastian.dev@gmail.com", "creation_time": "2015-08-13T10:01:09Z", "text": "Here is an example: https://github.com/baztian/jmeter-api-minimal/\n\nSee https://github.com/baztian/jmeter-api-minimal/blob/master/src/test/java/jmeter/AppTest.java for the workaround being applied."}, {"attachment_id": null, "tags": [], "bug_id": 50585, "is_private": false, "count": 5, "id": 184543, "time": "2015-08-13T10:17:03Z", "creator": "sebb@apache.org", "creation_time": "2015-08-13T10:17:03Z", "text": "(In reply to bastian.dev from comment #4)\n> Here is an example: https://github.com/baztian/jmeter-api-minimal/\n\nI'm not sure how to use that.\nIt does not look like a non-Maven script that uses JMeter from Maven repos.\n\n\n> See\n> https://github.com/baztian/jmeter-api-minimal/blob/master/src/test/java/\n> jmeter/AppTest.java for the workaround being applied."}, {"count": 6, "text": "Download the repo. Run \"mvn test\". You'll see that /q=${__log(example)} get's executed. If you comment out the line\nJMeterUtils.setProperty(\"search_paths\", System.getProperty(\"java.class.path\"));\nit won't get executed.", "creator": "bastian.dev@gmail.com", "is_private": false, "id": 184544, "time": "2015-08-13T10:34:13Z", "bug_id": 50585, "creation_time": "2015-08-13T10:34:13Z", "tags": [], "attachment_id": null}, {"count": 7, "tags": [], "text": "Does not work for me; I get\n\nFATAL_E 2015-08-13 11:48:40.176 [jmeter.s] (): Bad saveservice properties file\njava.io.FileNotFoundException: null/bin/saveservice.properties (No such file or directory)\n\nand some other errors.\n\nThere must be some other setup needed.", "attachment_id": null, "id": 184545, "creator": "sebb@apache.org", "time": "2015-08-13T10:52:16Z", "bug_id": 50585, "creation_time": "2015-08-13T10:52:16Z", "is_private": false}, {"count": 8, "text": "Note that the \"search_paths property\" is the standard mechanism for extending where JMeter looks when searching for functions etc.\n\nSee the Javadoc for\n\nJMeterUtils.getSearchPaths()\n\nIf the jars are not under lib/ext, then just update the property accordingly.\n\nI don't see why it is necessary to extend JMeter when there is already a way to solve the problem.\n\nThe reason that JMeter does not search every jar in the classpath is to reduce the amount of work that is involved. Every jar has to be scanned for class names, and the ones that pass the name match are loaded in order to determine if the class implements the Function interface.\n\nThe solution is to ensure that search_paths is set to the appropriate path names.", "creator": "sebb@apache.org", "is_private": false, "id": 184546, "time": "2015-08-13T11:16:59Z", "bug_id": 50585, "creation_time": "2015-08-13T11:16:59Z", "tags": [], "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 50585, "attachment_id": null, "is_private": false, "id": 184547, "time": "2015-08-13T12:05:06Z", "creator": "bastian.dev@gmail.com", "creation_time": "2015-08-13T12:05:06Z", "text": "Sorry, forgot to mention that you have to specify jmeterHome.\nmvn test -DjmeterHome=/your/path/to/apache-jmeter-2.13\n\n> If the jars are not under lib/ext, then just update the property accordingly.\n\nThe jars *are* there. But because of the logic in ClassFinder#getClasspathMatches they are ignored unless they match the *-2.13.jar pattern."}, {"count": 10, "tags": [], "creator": "sebb@apache.org", "is_private": false, "text": "(In reply to bastian.dev from comment #9)\n> Sorry, forgot to mention that you have to specify jmeterHome.\n> mvn test -DjmeterHome=/your/path/to/apache-jmeter-2.13\n\nIf you already have a JMeter installation, why do you need to load the jars from the Maven repository?\n\n> > If the jars are not under lib/ext, then just update the property accordingly.\n> \n> The jars *are* there.\n\nMy JMeter installation was done from the binary archive, so they don't have version numbers.\n\nIt's not clear how you ended up with those jar names.\n\n> But because of the logic in\n> ClassFinder#getClasspathMatches they are ignored unless they match the\n> *-2.13.jar pattern.\n\nAre you sure? AFAICT the code checks *all* jars it finds; it does not check the jar name.", "id": 184548, "time": "2015-08-13T13:13:26Z", "bug_id": 50585, "creation_time": "2015-08-13T13:13:26Z", "attachment_id": null}, {"count": 11, "tags": [], "bug_id": 50585, "text": "> If you already have a JMeter installation, why do you need to load the jars from the Maven repository?\n\nWe have a maven based build. It's pretty hard to include jars that do not come from maven repos during the build time. The preferred way would be to only use maven and don't have the requirement to download a JMeter intstallation separately. But this doesn't seem to work for me yet as JMeter does a lot of classpath modification \"tricks\".\n\nI'm sure that jars are ignored. Check http://svn.apache.org/viewvc/jmeter/trunk/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java?view=markup line 348.", "id": 184549, "time": "2015-08-13T13:31:05Z", "creator": "bastian.dev@gmail.com", "creation_time": "2015-08-13T13:31:05Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "bug_id": 50585, "attachment_id": null, "id": 184550, "time": "2015-08-13T14:57:00Z", "creator": "sebb@apache.org", "creation_time": "2015-08-13T14:57:00Z", "is_private": false, "text": "(In reply to bastian.dev from comment #11)\n\n> I'm sure that jars are ignored. Check\n> http://svn.apache.org/viewvc/jmeter/trunk/src/jorphan/org/apache/jorphan/\n> reflect/ClassFinder.java?view=markup line 348.\n\nAFAICR this just checks that the jars under lib/ext are on the classpath.\n\nIt's clearly not a problem when running JMeter stand-alone; the jars can be renamed at will and JMeter will still run.\n\nSo the problem must be in the way the paths and properties are set up by your test. If the classpath and the contents of lib/ext disagree on the names used, then you will have problems.\n\nNote that JMeter is designed to be run from the NewDriver class.\nIf you want to invoke other classes directly, then you will have to set up the appropriate environment."}, {"count": 13, "tags": [], "bug_id": 50585, "attachment_id": null, "is_private": false, "id": 187149, "time": "2015-12-27T20:31:13Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2015-12-27T20:31:13Z", "text": "You can use third party plugin jmeter-maven-plugin for this.\nIt works pretty fine:\n- http://www.ubik-ingenierie.com/blog/integrate-load-testing-in-build-process-with-jmeter-ubikloadpack-maven/\n\nClosing as wont fix."}]
[{"count": 0, "tags": [], "creator": "bobbymartin@hotmail.com", "text": "In 1.5.2, the times on the JarEntries for jar files built with the Jar task are\nrounded up instead of down.  When used with, e.g., Weblogic's jspc, this results\nin the jsps in the jar file being later than the date compiled into the jsp java\ncode, and thus the compiled jsps are ignored.  The end result is that when I\nbuild with ant 1.5.2, precompiled jsps are ignored by Weblogic.\n\nI can see in the code on line 960 of\nant/src/main/org/apache/tools/ant/taskdefs/Zip.java, tag ANT_152_FINAL, that\n1999 milliseconds are being added to the modification date.  ANT_151_FINAL\ndoesn't do this.  It appears to me that this is causing the problem.\n\nStrangely, we put a sleep in before the jspc task in our ant script and it still\ndoesn't fix the out of date issue that we're having.  The only workaround we\nhave is to use 1.5.1 for now.", "id": 33081, "time": "2003-03-12T21:53:50Z", "bug_id": 17934, "creation_time": "2003-03-12T21:53:50Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "bodewig@apache.org", "text": "From the manual of the <zip> task:\n\nPlease note that ZIP files store file modification times with a granularity of\ntwo seconds. If a file is less than two seconds newer than the entry in the\narchive, Ant will not consider it newer.\n\nIf Ant was rounding down instead of up, it would always consider the files inside\nthe archive out-of-date and thus always update your archive.\n\nI'm changing this to an enhancement request.  The possible enhancement I see is a\nnew attribute to control the rounding behavior, but for the reason above,\nrounding up has to be the default.", "id": 33107, "time": "2003-03-13T08:47:27Z", "bug_id": 17934, "creation_time": "2003-03-13T08:47:27Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "bobbymartin@hotmail.com", "attachment_id": null, "id": 33144, "time": "2003-03-13T19:45:48Z", "bug_id": 17934, "creation_time": "2003-03-13T19:45:48Z", "is_private": false, "text": "Would it not be better to round down on the file lastModified() dates when doing\nthe comparison for the update?  It would leave you in a position so that if\nsomeone did an update & save within 2 seconds after they did the initial\njarring, jar could fail to recognize that the file was updated, but that seems\npreferable to the current behavior.\n\nI suspect that jspc is a very common thing to do for ant users, and with the\ncurrent behavior jsp precompiling will always fail to be useful at least for\nweblogic and I suspect for most other jsp engines.  The only workaround I know\nof is to jar the jsp files into your jar, then wait 2 seconds, touch the jsp\nfiles, jspc, then update the jar with the compiled jsps.\n\nTo be very clear about what's happening:\n\nMy jsps get copied to a working directory; they get a timestamp of e.g. 2137 millis.\n\nI do a jspc.  The jspc process checks the modification date on the jsp files and\nembeds it in the compiled jsp so it can check the jsp for staleness.  It uses\nthe 2137 as the embedded date.\n\nThen I jar all these up into a war file.  The jsp timestamp gets bumped to 4000\nin the jar file.\n\nWhen I run, the compiled jsp checks to see if it's stale after it's loaded.  The\nmodification date it sees on the jsp is 4000, which is after the 2137 which is\nhard-coded into the compiled jsp, which causes the jsp to be recompiled.\n\nSleeping won't help unless I do a two step jarring process, or I have two copies\nof the jsps - the ones I compile from and an older version that I actually put\nin the war file.  In either case it's pretty kludgy, and, again, it strikes me\nas likely to be a problem for lots of people."}, {"count": 3, "tags": [], "bug_id": 17934, "attachment_id": null, "text": "I dont know what Jar is up to, but 2seconds is a common feature in some of the\ncomparison tasks, because it is the FAT filesystem's granularity. So a fair few\nof the tasks assume that if the dest file is < 2 seconds of the date of the\nsource file, it is up to date.", "id": 33145, "time": "2003-03-13T19:48:57Z", "creator": "stevel@apache.org", "creation_time": "2003-03-13T19:48:57Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 17934, "attachment_id": null, "text": "I'd like to further clarify the solution I'm proposing:\n\nInstead of adding 1999 milliseconds to the file modification date when you jar\nthe files, change the jar update process to check for (file.lastModified() %\n2000 > entry.getTime()) instead of (file.lastModified() > entry.getTime()).", "id": 33147, "time": "2003-03-13T19:53:36Z", "creator": "bobbymartin@hotmail.com", "creation_time": "2003-03-13T19:53:36Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 17934, "attachment_id": null, "is_private": false, "id": 35476, "time": "2003-04-18T01:15:02Z", "creator": "anders_wallgren@alum.mit.edu", "creation_time": "2003-04-18T01:15:02Z", "text": "In my book the impact of this bug cannot be overstated: it has cost us hours \nand hours of developer and QA productivity.\n\nLet me say that again, for emphasis: this bug has cost us hours and hours of \ndeveloper and QA productivity.\n\nEvery single time we deploy a new WAR, the application servers rebuild the JSP \nfiles, either on server startup or page access, depending on the configuration.\n\nMultiply this by a dozen people doing dozens of deployments a day, and then \nthink about whether this should be an 'enhancement request' or 'bug'."}, {"count": 6, "tags": [], "bug_id": 17934, "attachment_id": null, "text": "*** Bug 23327 has been marked as a duplicate of this bug. ***", "id": 44450, "time": "2003-09-22T14:36:45Z", "creator": "bodewig@apache.org", "creation_time": "2003-09-22T14:36:45Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 17934, "attachment_id": null, "is_private": false, "id": 48121, "time": "2003-11-25T21:55:35Z", "creator": "thomas@jprog.de", "creation_time": "2003-11-25T21:55:35Z", "text": "hi all,\n\n- with Bea's weblogic 5.1 the current behaviour of ant's Zip-Task >=1.5.2 is a bug\n- i migrated from an older ant-version to the 1.5.4stable, problem\noccurs in usage of ant's jar-task\n\nresult was that after the complete deployment of packed webapps in war-achives\nan server-restart the weblogic-server recompiles every (!) JSP in\nproduction-environment.\n(of course there is for performance reason every recompilation turned off)\n\nbefore live-going of our new deployed version i had to fall back in \norg/apache/tools/ant/taskdefs/Zip.java form\nthe\n...lastModified() + 1999\n to the\n...lastModified()\nversion.\n\n**\nFile-Date Manipulation in this \"hidden\" way isn't a good way.\n**\n\nzip is a zip task and should zip files, nothing else.\nif you want to change the webapp deployment behaviour, then any additional task\nparameter should be implemented, but not the core-zip-behaviour.\n\n---------------\nsome more detailled explanation how weblogic handle jsp-compile-times.\n\n1.\nBea-Guys compile with theire jspc and generate a timestamp in every generated\njava-class derived from jsp's original timestamp.\nOriginal timestamp was e.g. 2000-01-01 10:01 and that they pack into the\ngenerated java-file as java.lang.long in milliseconds (!)\n\n2.\nat server runtime they check the jsp-file-time in the war-file\n\nthey compare\ne.g. 2000-01-01 10:02 (time of the jsp in the archive after running ant's jar task)\nwith the original date (packed in the class at JSP's compile time) and find\nthat\n\n2000-01-01 10:02(JSP-in-warfile-time) is YOUNGER than 2000-01-01 10:01 (original\nJSP-time)\nand so the server decides to recompile every JSP one time after deployment.\n(That is not acceptable in production environment, precompilation of JSPs is\nhere the right way.)\n\n3. ant < 1.5.2\nThe old zip-behaviour (ant's jar extends zip) created the JSP in above example\nwith date\n2000-01-01 10:00.\nAnd weblogic StaleIndicator now compares:\n2000-01-01 10:00 Jsp-in-warfile-time) is OLDER than 2000-01-01 10:00 (original\nJSP-time).\n\n---\nWeblogic's JSP-check is crazy, but acceptable.\n\nA zip-task should not manipulate lastModified.\nI think, this is a bug."}, {"count": 8, "tags": [], "text": "I've added a new roundup attribute that can be used to control the rounding\nbehavior.\n\n", "attachment_id": null, "id": 53133, "creation_time": "2004-02-27T14:18:17Z", "time": "2004-02-27T14:18:17Z", "creator": "bodewig@apache.org", "bug_id": 17934, "is_private": false}, {"count": 9, "attachment_id": null, "creator": "bodewig@apache.org", "is_private": false, "id": 58034, "time": "2004-05-25T11:43:50Z", "bug_id": 17934, "creation_time": "2004-05-25T11:43:50Z", "tags": [], "text": "*** Bug 29193 has been marked as a duplicate of this bug. ***"}, {"count": 10, "tags": [], "bug_id": 17934, "attachment_id": null, "text": "I think roundUp=\"false\" should the default for the <war> target, since this is \nlikely to be needed for precompiled JSPs.\n\n\"true\" can remain the default for the <zip> and <jar> targets.\n", "id": 68736, "time": "2004-12-20T16:17:53Z", "creator": "gtf@cirp.org", "creation_time": "2004-12-20T16:17:53Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 17934, "attachment_id": null, "is_private": false, "id": 68757, "time": "2004-12-21T11:33:26Z", "creator": "bodewig@apache.org", "creation_time": "2004-12-21T11:33:26Z", "text": "<war> is far older than the roundup attribute, so any change to its default value\nwould break backwards compatibility.  Existing build files would suddenly start\nto behave different after an upgrade of Ant.\n\nI don't think that anybody ever wants to set roundup to false in a development\nenvironment because of the \"Ant always updates my war even if nothing changes\" that\nwould be the result.\n\nYou can always use <presetdef> to change Ant's defaults:\n\n<presetdef name=\"mywar\">\n  <war roundup=\"true\"/>\n</presetdef>\n\nwill give you a mywar task that behaves the way you want.  If you are willing to\nlive with a \n\nTrying to override old definition of task war\n\nwarning, you can even use\n\n<presetdef name=\"war\">\n  <war roundup=\"true\"/>\n</presetdef>\n"}]
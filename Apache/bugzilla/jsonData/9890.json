[{"count": 0, "tags": [], "creator": "apache@regnis.de", "attachment_id": null, "is_private": false, "id": 17859, "time": "2002-06-15T09:55:48Z", "bug_id": 9890, "creation_time": "2002-06-15T09:55:48Z", "text": "When setting the property DSTAMP with the following task\n\n<tstamp>\n  <format \nproperty=\"DSTAMP\" pattern=\"yyMMdd\"/>\n</tstamp>\n\nANT 1.4.x set the value to \"020615\". \nANT 1.5b1 sets it to \"20020615\"."}, {"count": 1, "tags": [], "text": "This happened between revisions 1.14 and 1.15 due to the following change:\nFrom:\nproject.setProperty(propertyName, sdf.format(date));\nTo:\nproject.setNewProperty(propertyName, sdf.format(date));\n\nsetNewProperty doesn't overwrite existing properties.  And property DSTAMP is \nfirst set in Tstamp.execute()\n\nRelevant log entry from 1.15:\nThis patch forces property setting to follow the same rules as the rest of ant \nin most tasks. The few tasks where we have not forced immutability will instead \nget 3 line ugly warnings telling them that they should upgrade or not use the \nsame property name etc.\n", "is_private": false, "bug_id": 9890, "id": 17865, "time": "2002-06-15T16:27:55Z", "creator": "apache@graemlin.net", "creation_time": "2002-06-15T16:27:55Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 9890, "attachment_id": null, "id": 17869, "time": "2002-06-16T01:30:13Z", "creator": "jakarta@ehatchersolutions.com", "creation_time": "2002-06-16T01:30:13Z", "is_private": false, "text": "While this is a change in behavior, I will argue that DSTAMP is a special \nproperty, and setting it with <format> is not a good idea.  You should use a \ndifferent property name besides the three \"reserved\" ones if you want to use \n<format>.  Or use the new prefix attribute.  I'll leave this open for \ndiscussion for now, but I'm inclined to mark it as WONTFIX as this is really by \ndesign and you just got lucky with earlier versions of Ant that properties \ncould get overwritten."}, {"count": 3, "tags": [], "bug_id": 9890, "attachment_id": null, "id": 17874, "time": "2002-06-16T06:36:07Z", "creator": "steve_l@iseran.com", "creation_time": "2002-06-16T06:36:07Z", "is_private": false, "text": "it does look like a hint of regression, though, does it not? "}, {"count": 4, "tags": [], "bug_id": 9890, "attachment_id": null, "id": 17877, "time": "2002-06-16T08:33:11Z", "creator": "apache@regnis.de", "creation_time": "2002-06-16T08:33:11Z", "is_private": false, "text": "Thank you for the information, I change it to WONTFIX."}, {"count": 5, "tags": [], "bug_id": 9890, "attachment_id": 2092, "is_private": false, "id": 17881, "time": "2002-06-16T12:37:24Z", "creator": "apache@graemlin.net", "creation_time": "2002-06-16T12:37:24Z", "text": "Created attachment 2092\nPatch to docs for tstamp task to reflect new behaviour"}, {"count": 6, "tags": [], "bug_id": 9890, "attachment_id": null, "id": 17901, "time": "2002-06-17T07:08:59Z", "creator": "bodewig@apache.org", "creation_time": "2002-06-17T07:08:59Z", "is_private": false, "text": "Documentation has been clarified.  In some implicit way, WHATSNEW already said\nit:\n\n* It is no longer possible to overwrite a property using tasks like\n  <condition>, <exec>, <pathconvert>, or <tstamp>."}, {"count": 7, "tags": [], "bug_id": 9890, "attachment_id": null, "is_private": false, "id": 17902, "time": "2002-06-17T07:10:06Z", "creator": "steve_l@iseran.com", "creation_time": "2002-06-17T07:10:06Z", "text": "Its a regression, and fixable with ease"}, {"count": 8, "tags": [], "text": "which doesn't mean we want to fix it.\n\nThe same could be said about all other tasks that were allowed to override\nexisting properties in the past.  This behavior change is documented as a change\nthat may break older build environments.", "is_private": false, "id": 17903, "creator": "bodewig@apache.org", "time": "2002-06-17T07:15:06Z", "bug_id": 9890, "creation_time": "2002-06-17T07:15:06Z", "attachment_id": null}, {"count": 9, "text": "Well, the fix I have put in does NOT change the immutability rule, but it\nexecutes the custom properties before setting [prefix.]{DSTAMP,TSTAMP,TODAY}. So\nit is only the properties that are set in the <tstamp> call itself that <format>\ncan overwrite, and it is not overwriting so much as making immutable. \n\n\nIf anyone wants to rollback the change because editing DSTAMP is viewed as a bad\nidea, then they can, but \n\n-leave the second of the tests in the test cases in as it tests the prefix\nstuff; we had no test for that before.\n\n-leave all the javadocs in. \n\nAlso, look closely at the CustomFormat class and see if my thoughts about making\nit static are valid. IF it aint static, why bother passing in project and\nlocation down to its execute method, it can pull it from its parent.", "bug_id": 9890, "attachment_id": null, "id": 17904, "time": "2002-06-17T07:26:51Z", "creator": "steve_l@iseran.com", "creation_time": "2002-06-17T07:26:51Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "text": "I have no problem with the way you've fixed it, I'll revert my doc patch.", "is_private": false, "bug_id": 9890, "id": 17905, "time": "2002-06-17T07:34:20Z", "creator": "bodewig@apache.org", "creation_time": "2002-06-17T07:34:20Z", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 60471, "text": "Created attachment 34522\ntriggering file based on testWORD_2006ml.docx in Tika\n\nXWPFDocument's onDocumentLoad() looks for paragraphs, tables and sdts at the main level of the body.  As we saw with Bug 54849 (SDTs), there can be other intervening structures between the body and text-containing elements.  \n\nI recently noticed that AlternateContent elements can also appear at the body level, and we should probably add those to our document model.\n\nTo create this test file, I added a title page via Word's default \"add a title page function\".\n\nIn the SAX parser that I added to Tika, I chose to extract text from the Fallback section on the theory that that would have the more easily parseable content.  If we're modeling read/write in our DOM/XWPFDocument, we'll probably want to point to both Fallback and Choice?\n\nUnit test:\n\n    public void testAlternateContent() throws IOException {\n        XWPFDocument doc = XWPFTestDataSamples.openSampleDocument(\"testAlternateContent.docx\");\n        XWPFWordExtractor extractor = new XWPFWordExtractor(doc);\n\n        String txt = extractor.getText();\n        assertContainsSpecificCount(\"engaging abstract\", txt, 1);\n        assertContainsSpecificCount(\"MyDocumentTitle\", txt, 1);\n        assertContainsSpecificCount(\"MyDocumentSubtitle\", txt, 1);\n    }\n\n    private void assertContainsSpecificCount(String needle, String haystack, int expectedCount) {\n        int index = haystack.indexOf(needle);\n        int found = 0;\n        while (index > -1) {\n            found++;\n            index = haystack.indexOf(needle, index+1);\n        }\n        assertEquals(expectedCount, found);\n    }", "id": 195463, "time": "2016-12-12T14:53:56Z", "creator": "tallison@mitre.org", "creation_time": "2016-12-12T14:53:56Z", "is_private": false, "attachment_id": 34522}]
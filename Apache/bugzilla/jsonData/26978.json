[{"count": 0, "attachment_id": null, "bug_id": 26978, "text": "Generating a password digest is an enhancement compared to storing plaintext \npasswords, but digests are still very vulnerable to security attacks that \ncompare the password digest list with a 'hacker' list of digests of 'commonly \nused passwords'. This comparison can be done by a simple SELECT-statement in \ncase of a relational database:\n\nSELECT User.name, CommonPasswords.passwordPlain\nFROM User, CommonPasswords\nWHERE User.passwordDigest = CommonPasswords.passwordDigest\n\nA common technique to avoid such attacks is to use \"salt\" to avoid that two \nidentical passwords have the same digest. This technique should be supported \nby the tomcat's standard realms.\n\n(A) To generate a 'salted' password digest:\n1) Generate digest A from plain password\n2) Generate salt (random number sequence)\n3) Generate digest B from digest A and salt\n4) Store digest B and salt\n\n(B) To check if a given password matches the stored password\n1) Load digest and salt\n2) Generate digest A from given password\n3) Generate digest B from digest A and salt\n4) Compare loaded digest with digest B\n\nTo avoid that two values have to be stored and loaded (digest and salt), both \nvalues could be concatenated and encoded using base 64.", "id": 52360, "time": "2004-02-16T16:45:28Z", "creator": "mario.winterer@scch.at", "creation_time": "2004-02-16T16:45:28Z", "tags": [], "is_private": false}, {"count": 1, "tags": [], "bug_id": 26978, "attachment_id": null, "text": "Code for generating a 'salted digest':\n\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\n// get digest A\nbyte[] digestA = md.digest(password.getBytes());\n// generate the salt...\nbyte[] salt = new byte[md.getDigestLength()];\nnew SecureRandom().nextBytes(salt);\n// generate digest B from digest A and salt\nmd.update(digestA);\nbyte[] digestB = md.digest(salt);\n\n\nCode for comparing two passwords:\n\nMessageDigest md = MessageDigest.getInstance(\"MD5\");\n// generate digest A from given password\nbyte[] digestA = md.digest(givenPassword.getBytes());\n// generate digest B from digest A and stored salt\nmd.update(digestA);\nbyte[] digestB = md.digest(storedSalt);\n// compare digest B with stored digest\nboolean equal = Arrays.equals(digestB, storedDigest);\n", "id": 52367, "time": "2004-02-16T16:57:44Z", "creator": "mario.winterer@scch.at", "creation_time": "2004-02-16T16:57:44Z", "is_private": false}, {"count": 2, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 53292, "time": "2004-03-01T21:48:26Z", "bug_id": 26978, "creation_time": "2004-03-01T21:48:26Z", "is_private": false, "text": "Do you have patches to submit so that we can evaluate how intrusive / risky /\netc the changes would be ? I don't have the impression that developers rank this\nas a high priority feature, so it is unlikely to be implemented otherwise (and\nhence is going to be a WONTFIX)."}, {"count": 3, "tags": [], "creator": "remm@apache.org", "attachment_id": null, "id": 53815, "time": "2004-03-10T16:09:18Z", "bug_id": 26978, "creation_time": "2004-03-10T16:09:18Z", "is_private": false, "text": "Apparently, there's little interest in this."}, {"count": 4, "attachment_id": null, "bug_id": 26978, "text": "Not salting passwords is clearly broken, interesting or not, as it opens up at\nleast one very juicy attack possibility - see\nhttp://en.wikipedia.org/wiki/Rainbow_table. Quoting that page:\n\nA rainbow table \"contains statistically high chance of revealing a password\nwithin a short period of time, generally less than a minute.\"\n\nand: \"A rainbow table is ineffective against one-way hashes that include salts.\"", "id": 90975, "time": "2006-07-07T10:06:14Z", "creator": "tonyg-asfbugzilla@lshift.net", "creation_time": "2006-07-07T10:06:14Z", "tags": [], "is_private": false}]
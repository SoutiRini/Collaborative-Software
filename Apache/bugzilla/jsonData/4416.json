[{"count": 0, "tags": [], "creator": "stefan.eissing@greenbytes.de", "attachment_id": null, "text": "DecodeInterceptor takes huge effort to guess the encoding, however\nwhen decoding the request URI internal, it disregards the encoding\nand uses 8859-1.\n\nWhen the servlet the calls request.getRequestURI(), the request\ninternally encodes the decoded URI again (which is correct) and\nuses the correct charset. This obviously does not roundtrip when\nUTF-8 chars are encoded in the URI.\n\nWhen setting the server.xml attribute saveOriginal=\"true\", the unparsed\nURI is saved in core/Request and returned on getRequestURI(). This works\nas (undocumented) workaround for us.", "id": 7145, "time": "2001-10-25T06:31:46Z", "bug_id": 4416, "creation_time": "2001-10-25T06:31:46Z", "is_private": false}, {"count": 1, "tags": [], "creator": "Larry.Isaacs@sas.com", "text": "It isn't specified exactly what characters aren't round tripping, but it is\nassumed they are characters codes beyond 127 that have not been escaped.\nRFC1738 states that such character must be escaped.  However, round tripping\ncan't be guaranteed in all cases. For example, %3F ('?') in a URL won't\nround trip.\n\nThe \"saveOriginal\" attribute of DecodeInterceptor was provided to help deal with\nthis issue.  However, the default was set to \"false\" because \"true\" isn't\nusable with the Netscape Web Server.\n\nI'm marking this bug as FIXED because the saveOriginal now has some\ndocumentation.", "id": 12025, "time": "2002-03-19T23:20:57Z", "bug_id": 4416, "creation_time": "2002-03-19T23:20:57Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "text": "I would like to propose adding a further couple of classes to those that Tomcat's JreMemoryLeakPreventionListener statically initializes.\n\nThe classes com.sun.org.apache.xerces.internal.dom.DOMNormalizer and com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl, both within rt.jar, each contain a static final field of type RuntimeException named 'abort'.  When these classes are statically initialized, these exceptions are created and their stacktraces filled in.  If a web app class happens to be in the call stack when either class's exception is created, this class cannot then be garbage collected when the web app is stopped because an exception in a static field of a class has a reference to it.  This then causes a PermGen leak as the web apps's classloader, and all of the classes it loaded, cannot be garbage-collected.\n\nTo reproduce this issue, use the following servlet class:\n\npackage com.example;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.ls.DOMImplementationLS;\n\npublic class DOMNormalizerLeakServlet extends HttpServlet {\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException {\n        try {\n            Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n            document.createElement(\"test\");\n            DOMImplementationLS implementation = (DOMImplementationLS)document.getImplementation();\n            implementation.createLSSerializer().writeToString(document);\n            response.getWriter().write(\"done\");\n        }\n        catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n}\n\nand the following web.xml file:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n\t xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n\t version=\"3.1\">\n    <servlet>\n        <servlet-name>test</servlet-name>\n        <servlet-class>com.example.DOMNormalizerLeakServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>test</servlet-name>\n        <url-pattern>/index.html</url-pattern>\n    </servlet-mapping>   \n</web-app>\n\nI've reproduced this problem with the latest Tomcat (8.0.27) and the latest Oracle JDK8 (1.8.0_60), by:\n\n* deploying a web app consisting of the above servlet class and deployment descriptor to Tomcat,\n* viewing the index.html page generated by Tomcat (the browser should show the word 'done'),\n* reloading the web app using the Tomcat manager app,\n* clicking the 'Find leaks' button in the Diagnostics section of the manager app, which reveals a possible memory leak,\n* using a profiler such as JVisualVM to confirm that Tomcat now has a 'destroyed' classloader that could not be garbage collected because there is a chain of references from a JRE class to the servlet class it loaded.\n\nHere's a path from the classloader to the exception, which I obtained with the help of JVisualVM:\n\nthis     - value: org.apache.catalina.loader.WebappClassLoader #3\n <- <classLoader>     - class: com.example.DOMNormalizerLeakServlet, value: org.apache.catalina.loader.WebappClassLoader #3\n  <- [2]     - class: java.lang.Object[], value: com.example.DOMNormalizerLeakServlet class DOMNormalizerLeakServlet\n   <- [2]     - class: java.lang.Object[], value: java.lang.Object[] #4319\n    <- backtrace     - class: java.lang.RuntimeException, value: java.lang.Object[] #4318\n     <- abort (sticky class)     - class: com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl, value: java.lang.RuntimeException #1\n\nThere is a straightforward workaround for this: add the names of these two classes to the classesToInitialize attribute for the JreMemoryLeakPreventionListener.  This then causes the classes to be statically initialized by Tomcat itself and keeps web app classes out of the stacktrace of these exceptions.\n\nI have filed a bug report with Oracle to change the behaviour of these two classes.  However, until this gets fixed (if it gets fixed at all), it would be appreciated if the JreMemoryLeakPreventionListener could be adapted to handle these two classes.", "is_private": false, "id": 185692, "creator": "lukewoodward12@yahoo.co.uk", "time": "2015-10-07T22:11:12Z", "bug_id": 58486, "creation_time": "2015-10-07T22:11:12Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 58486, "is_private": false, "count": 1, "id": 185715, "time": "2015-10-09T21:37:01Z", "creator": "lukewoodward12@yahoo.co.uk", "creation_time": "2015-10-09T21:37:01Z", "text": "The servlet in my previous comment demonstrates a leak with the 'abort' exception in the class com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl.  If you replace the lines\n\n            document.createElement(\"test\");\n            DOMImplementationLS implementation = (DOMImplementationLS)document.getImplementation();\n            implementation.createLSSerializer().writeToString(document);\n\nwith\n\n            document.normalizeDocument();\n\nthen this causes a leak with com.sun.org.apache.xerces.internal.dom.DOMNormalizer.abort instead."}, {"count": 2, "attachment_id": null, "bug_id": 58486, "text": "Fixed in trunk, 8.0.x (for 8.0.29) and 7.0.x (for 7.0.66).", "id": 185925, "time": "2015-10-25T13:39:13Z", "creator": "markt@apache.org", "creation_time": "2015-10-25T13:39:13Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "bug_id": 58486, "text": "I raised this issue with Apache Xerces,\nhttps://issues.apache.org/jira/browse/XERCESJ-1667\n\n\n(In reply to Luke Woodward from comment #0)\n> \n> I have filed a bug report with Oracle to change the behaviour of these two\n> classes.  However, until this gets fixed (if it gets fixed at all), it would\n> be appreciated if the JreMemoryLeakPreventionListener could be adapted to\n> handle these two classes.\n\nDo you have a bug number for your report?", "id": 185954, "time": "2015-10-25T23:08:19Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-10-25T23:08:19Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 58486, "text": "(In reply to Konstantin Kolinko from comment #3)\n> I raised this issue with Apache Xerces,\n> https://issues.apache.org/jira/browse/XERCESJ-1667\n> \n> \n> (In reply to Luke Woodward from comment #0)\n> > \n> > I have filed a bug report with Oracle to change the behaviour of these two\n> > classes.  However, until this gets fixed (if it gets fixed at all), it would\n> > be appreciated if the JreMemoryLeakPreventionListener could be adapted to\n> > handle these two classes.\n> \n> Do you have a bug number for your report?\n\nNo, I don't.  I have a Review ID, JI-9025281, but that's all I've heard from Oracle so far.", "id": 185995, "time": "2015-10-26T22:36:37Z", "creator": "lukewoodward12@yahoo.co.uk", "creation_time": "2015-10-26T22:36:37Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "lukewoodward12@yahoo.co.uk", "text": "I have a bug number for the report now: JDK-8146961.", "id": 188672, "time": "2016-02-22T11:54:30Z", "bug_id": 58486, "creation_time": "2016-02-22T11:54:30Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 52158, "attachment_id": 27911, "text": "Created attachment 27911\nsource and data\n\nAttached is a zip file containing:\n\nThree class files:\nEventBasedExcelExtractor.java\nTextHSSFListener.java\nTestEventBasedExcelExtractor.java\n\nTwo data files:\noneSheet-good.xls - no exception, this file was produced manually (ie typed)\noneSheet-bad.xls - throws exception below, this file was created with this line of code\n\t\t\t\t\t\t\texcelSheet.setFormula(row, column, excelFormula.toString());\n\nwhere excelSheet is org.apache.poi.ss.usermodel.Sheet, row and column are int, excelFormula is StringBuffer\n\nTo run, use one file as a program argument to TestEventBasedExcelExtractor\n\nException in thread \"main\" java.lang.RuntimeException: Coding Error: Expected ExpPtg to be converted from Shared to Non-Shared Formula by ValueRecordsAggregate, but it wasn't\n\tat org.apache.poi.ss.formula.ptg.ExpPtg.toFormulaString(ExpPtg.java:64)\n\tat org.apache.poi.ss.formula.FormulaRenderer.toFormulaString(FormulaRenderer.java:96)\n\tat org.apache.poi.hssf.model.HSSFFormulaParser.toFormulaString(HSSFFormulaParser.java:83)\n\tat eventbasedexcelextractor.TextHSSFListener.processRecord(TextHSSFListener.java:92)\n\t\n\tat org.apache.poi.hssf.eventusermodel.FormatTrackingHSSFListener.processRecord(FormatTrackingHSSFListener.java:82)\n\tat org.apache.poi.hssf.eventusermodel.HSSFRequest.processRecord(HSSFRequest.java:112)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:147)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:106)\n\tat org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processWorkbookEvents(HSSFEventFactory.java:65)\n\tat eventbasedexcelextractor.EventBasedExcelExtractor.triggerExtraction(EventBasedExcelExtractor.java:159)\n\tat eventbasedexcelextractor.EventBasedExcelExtractor.getText(EventBasedExcelExtractor.java:127)\n\tat eventbasedexcelextractor.TestEventBasedExcelExtractor.<init>(TestEventBasedExcelExtractor.java:39)\n\tat eventbasedexcelextractor.TestEventBasedExcelExtractor.main(TestEventBasedExcelExtractor.java:76)", "id": 151307, "time": "2011-11-08T23:37:57Z", "creator": "jdaues@strategicanalytics.com", "creation_time": "2011-11-08T23:37:57Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "attachment_id": null, "id": 151309, "time": "2011-11-08T23:48:57Z", "bug_id": 52158, "creation_time": "2011-11-08T23:48:57Z", "is_private": false, "text": "If you're using the HSSF event model, you have to take care of a lot of the low level formula stuff yourself. In the user model, this is all taken care of\n\nLooks like there is some of this needed, or we'll just need to skip these"}, {"count": 2, "tags": [], "creator": "jdaues@strategicanalytics.com", "attachment_id": null, "id": 151322, "time": "2011-11-09T14:04:47Z", "bug_id": 52158, "creation_time": "2011-11-09T14:04:47Z", "is_private": false, "text": "The problem seems to me that the cell types don't match. It would seem reasonable to me that when I write with a method called setFormula() and then read a FormulaRecord in HSSFListener that it would not crash.\n\nThat having been said ...\n>>Looks like there is some of this needed\nHow would I do this?\n\n>>or we'll just need to skip these\nNot sure what you are saying here. Are you proposing to change POI code?"}, {"count": 3, "tags": [], "text": "How about adding this to ExpPtg:\n\nprotected final String formatReferenceAsString() {\n    // Only make cell references as needed. Memory is an issue\n    CellReference cr = new CellReference(getRow(), getColumn(), false, false);\n    return cr.formatAsString();\n}", "attachment_id": null, "bug_id": 52158, "id": 151333, "time": "2011-11-09T16:22:03Z", "creator": "jdaues@strategicanalytics.com", "creation_time": "2011-11-09T16:22:03Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 52158, "attachment_id": null, "text": "Oops, no, that's not it...", "id": 151334, "time": "2011-11-09T16:27:45Z", "creator": "jdaues@strategicanalytics.com", "creation_time": "2011-11-09T16:27:45Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 52158, "attachment_id": null, "text": "I should add that in our implementation of setFormula, we set the cell type:\n\nCell cell = getCell( row, column );\ncell.setCellType( Cell.CELL_TYPE_FORMULA );\ncell.setCellFormula( formula );", "id": 151337, "time": "2011-11-09T16:55:07Z", "creator": "jdaues@strategicanalytics.com", "creation_time": "2011-11-09T16:55:07Z", "is_private": false}, {"count": 6, "tags": [], "text": "The solution for me maybe to use\n    HSSFCell createCell(short columnIndex, int type) \ninstead of\n    HSSFCell createCell(short columnIndex)", "attachment_id": null, "bug_id": 52158, "id": 151344, "time": "2011-11-09T18:40:57Z", "creator": "jdaues@strategicanalytics.com", "creation_time": "2011-11-09T18:40:57Z", "is_private": false}, {"count": 7, "tags": [], "text": "In HSSF UserModel, the support for working with Shared Formulas is centred around FormulaRecordAggregate and SharedFormulaRecord\n\nIn EventUserModel, you have to do something similar, but it won't be the simplest of things. When you hit a shared formula, you'll have to track it somewhere, so we can refer to it from later cells that re-use the same one\n\n(In this case, the event code is also POI, so that handling needs to be somewhere in POI itself, likely in the text extraction related code)", "attachment_id": null, "bug_id": 52158, "id": 151349, "time": "2011-11-09T22:54:51Z", "creator": "apache@gagravarr.org", "creation_time": "2011-11-09T22:54:51Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 52158, "attachment_id": null, "text": "Unfortunately there was no real conclusion on this issue, as far as I see only some discussion about possible approaches, but no update for many years, so I am closing this for now as I don't see much use in looking at this further currently. \n\nPlease reopen or raise new bug-entries if there is something that should be done in POI itself here.", "id": 190099, "time": "2016-04-10T09:46:56Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-04-10T09:46:56Z", "is_private": false}]
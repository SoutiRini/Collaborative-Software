[{"count": 0, "tags": [], "creator": "immanuel.hayden@gmail.com", "attachment_id": 28766, "id": 159001, "time": "2012-05-13T09:00:05Z", "bug_id": 53226, "creation_time": "2012-05-13T09:00:05Z", "is_private": false, "text": "Created attachment 28766\nAdding cache and more intelligent filtering to facilitate faster startup\n\nHi!\n\nAs I am really pissed by the relatively slow startup of jmeter, I looked into what could be done to enhance the situation. The patch modifies the following two files:\n\n - core/org/apache/jmeter/gui/action/ActionRouter.java -> filter by \"org.apache.jmeter.gui\" through the inbuilt functionality of \"findClassesThatExtend\", as it stops a ton of ClassFinder.isChildOf (sloooooow) calls.\n\n - jorphan/org/apache/jorphan/reflect/ClassFinder.java -> add a cache for jars (containing jar -> classes in jar) and a cache for classes loaded through Class.forName (you should think class.forname has that builtin, but if I remove it I also lose performance). Previously we repeatedly walked the same folder again when loading jars in different parts of the startup process -> with the cache we walk each distinct file only once (discerned by canonical path). Also the \"addJarsInPath\" had some really strange quirks which I fixed (regarding dirs that end with \".jar\" and also I think more than one level of subdirs would not have worked).\n\nAll Performance analysis courtesy of Netbeans ;)"}, {"count": 1, "tags": [], "creator": "milamber@apache.org", "text": "Thanks for your submission.\n\nStart-up time is better (in my computer : 7sec -> 3 sec), but a regression was introduce.\n\nWhen I open a jmeter jmx file which contains a View results tree, I have some errors:\n\n2012/05/13 09:41:57 ERROR - jmeter.gui.GuiPackage: Problem retrieving gui java.lang.NullPointerException\n\tat org.apache.jmeter.visualizers.ViewResultsFullVisualizer.init(ViewResultsFullVisualizer.java:223)\n\tat org.apache.jmeter.visualizers.ViewResultsFullVisualizer.<init>(ViewResultsFullVisualizer.java:121)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n\tat java.lang.Class.newInstance0(Class.java:355)\n\tat java.lang.Class.newInstance(Class.java:308)\n\tat org.apache.jmeter.gui.GuiPackage.getGuiFromCache(GuiPackage.java:381)\n\tat org.apache.jmeter.gui.GuiPackage.getGui(GuiPackage.java:219)\n\tat org.apache.jmeter.gui.GuiPackage.getGui(GuiPackage.java:190)\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addComponent(JMeterTreeModel.java:127)\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addSubTree(JMeterTreeModel.java:112)\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addSubTree(JMeterTreeModel.java:104)\n\tat org.apache.jmeter.gui.GuiPackage.addSubTree(GuiPackage.java:471)\n\tat org.apache.jmeter.gui.action.Load.insertLoadedTree(Load.java:178)\n\tat org.apache.jmeter.gui.action.Load.loadProjectFile(Load.java:111)\n\tat org.apache.jmeter.gui.action.LoadRecentProject.doAction(LoadRecentProject.java:68)\n\tat org.apache.jmeter.gui.action.ActionRouter.performAction(ActionRouter.java:80)\n\tat org.apache.jmeter.gui.action.ActionRouter.access$000(ActionRouter.java:41)\n\tat org.apache.jmeter.gui.action.ActionRouter$1.run(ActionRouter.java:62)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)\n\tat java.awt.EventQueue.access$000(EventQueue.java:84)\n\tat java.awt.EventQueue$1.run(EventQueue.java:602)\n\tat java.awt.EventQueue$1.run(EventQueue.java:600)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:611)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:122)\n\n2012/05/13 09:41:57 WARN  - jmeter.gui.action.Load: Unexpected error java.lang.NullPointerException\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addComponent(JMeterTreeModel.java:128)\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addSubTree(JMeterTreeModel.java:112)\n\tat org.apache.jmeter.gui.tree.JMeterTreeModel.addSubTree(JMeterTreeModel.java:104)\n\tat org.apache.jmeter.gui.GuiPackage.addSubTree(GuiPackage.java:471)\n\tat org.apache.jmeter.gui.action.Load.insertLoadedTree(Load.java:178)\n\tat org.apache.jmeter.gui.action.Load.loadProjectFile(Load.java:111)\n\tat org.apache.jmeter.gui.action.LoadRecentProject.doAction(LoadRecentProject.java:68)\n\tat org.apache.jmeter.gui.action.ActionRouter.performAction(ActionRouter.java:80)\n\tat org.apache.jmeter.gui.action.ActionRouter.access$000(ActionRouter.java:41)\n\tat org.apache.jmeter.gui.action.ActionRouter$1.run(ActionRouter.java:62)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)\n\tat java.awt.EventQueue.access$000(EventQueue.java:84)\n\tat java.awt.EventQueue$1.run(EventQueue.java:602)\n\tat java.awt.EventQueue$1.run(EventQueue.java:600)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:611)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:122)", "id": 159002, "time": "2012-05-13T09:46:44Z", "bug_id": 53226, "creation_time": "2012-05-13T09:46:44Z", "is_private": false, "attachment_id": null}, {"count": 2, "attachment_id": 28767, "bug_id": 53226, "text": "Created attachment 28767\nSome changes on code style", "id": 159003, "time": "2012-05-13T09:49:38Z", "creator": "milamber@apache.org", "creation_time": "2012-05-13T09:49:38Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "creator": "immanuel.hayden@gmail.com", "attachment_id": null, "id": 159007, "time": "2012-05-13T10:59:38Z", "bug_id": 53226, "creation_time": "2012-05-13T10:59:38Z", "is_private": false, "text": "k, will check it out in the afternoon (currently I'm not capable of thinking after a good lunch ;))\n7 to 3 seconds sounds really promising (my home machine is too fast and has an ssd -> from 1.3 to 0.7 is my current improvement, but I'm doing this for the bad performance of my machine at work), good that the improvements are not only noticeable by me :)"}, {"count": 4, "tags": [], "creator": "immanuel.hayden@gmail.com", "text": "Created attachment 28768\nregression fix for Milamber :)\n\nah, couldn't leave my fingers off it. the problem was bad thinking in the addJarsToCache-method: I intended to return all traversed jars, but only returned the ones I newly added to the cache. now you should be able to open test plans again and also see elements in Edit->Add->[All Submenus]. I think this was the last sequence I wrote yesterday night (somewhen around 2am) so that's probably the reason I didn't check so thoroughly any more ;)", "id": 159008, "time": "2012-05-13T11:26:57Z", "bug_id": 53226, "creation_time": "2012-05-13T11:26:57Z", "is_private": false, "attachment_id": 28768}, {"count": 5, "tags": [], "bug_id": 53226, "text": "With the new patch revision, the start time isn't faster.\n\nStats:\n* Current trunk: 2524 ms\n\n* First patch version (JMeter's menu not work): 876 ms\n\n* Patch rev1: 2737 ms\n\nto get stat:\nadd this line in jmeter.properties (or user.properties)\nlog_format=%{time} %5.5{priority} - %{category}: %{message} %{throwable}\nAnd make some  calculation.", "id": 159009, "time": "2012-05-13T12:38:56Z", "creator": "milamber@apache.org", "creation_time": "2012-05-13T12:38:56Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "damn :/\n\nI think I get the problem just now: Sooner or later all classes that we load from the jars get initialized in the \"isChildOf\" (called 5958 times in total during starup) which is the point where we ultimately filter the classes for the \"findClassesThatExtend\" methods. As long as we always execute that method for all classes, we are pretty much screwed.\n\n- The jarCache should still make sense though, as you get around doing all the Zip-File handling repeatedly. But maybe the JarInputStream is slower than using ZipFile/JarFile class and reading the all entries at once.\n\n- Pre-loading in a 2nd thread would maybe make sense, but you would have to kick it off at the beginning of the \"JMeter.startGui\" method, as that is the only point in the chain that we take noticeable self-time instead of falling through. This is only feasible if the JMeterUtils.getSearchPath() is defined there already (as it is the 99%-case for search path that I could find in the code).\n\nAnother really show thing that shows up (though in the awt-, and not the main-thread) is the MenuFactory.initializeMenus() function, which creates instances of quite some classes to fill the menu ... esp. as some classes like SmtpSamplerGui take 160ms for that, which is 1/6 of the threads cpu-time (2nd worst is TestBeanGUI which takes 120, all others luckily take less than 30ms, down to 0.0... ms). I think I will also check this out when I have time, could be that this is also holding back the main-thread in some way.", "attachment_id": null, "bug_id": 53226, "id": 159011, "time": "2012-05-13T15:27:44Z", "creator": "immanuel.hayden@gmail.com", "creation_time": "2012-05-13T15:27:44Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 53226, "text": "Hello Immanuel,\nLooking at code, I don't understand why you Override addAll in FilterTreeSet, can you explain ?\n\nI may have missed something but I also think your patch does not handle fully what was in findClassesInPathsDir, this part:\n\n\"else if (list[i].endsWith(DOT_CLASS) && file.exists() && (file.length() != 0)) {\n                final String path = file.getPath();\n                listClasses.add(path.substring(strPathElement.length() + 1,\n                        path.lastIndexOf(\".\")) // $NON-NLS-1$\n                        .replace(File.separator.charAt(0), '.')); // $NON-NLS-1$\n            }\"\n\n\nDid you find this code was not useful ?\n\nThanks\nRegards\nPhilippe", "id": 159016, "time": "2012-05-13T19:59:47Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-05-13T19:59:47Z", "is_private": false, "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 53226, "text": "Integrated ActionRouter part of patch \nDate: Sun May 13 20:10:41 2012\nNew Revision: 1337977\n\nURL: http://svn.apache.org/viewvc?rev=1337977&view=rev\nLog:\nBug 53226 - Faster startup\nFilter during search\n\nModified:\n   jmeter/trunk/src/core/org/apache/jmeter/gui/action/ActionRouter.java", "id": 159017, "time": "2012-05-13T20:12:09Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-05-13T20:12:09Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "bug_id": 53226, "text": "> Integrated ActionRouter part of patch \nyou also need to make that interface public, currently it's private for unknown reasons (which is strange as all function calls to it parse hardcoded null as include- and exclude-params -> totally useless).\n\n> Looking at code, I don't understand why you Override addAll in\n> FilterTreeSet, can you explain ?\nI tried without the override but it didn't work, maybe the parent.addAll does something differently than just calling add() (where we do the filtering) in a loop.\n\n> I may have missed something but I also think your patch does not handle\n> fully what was in findClassesInPathsDir, this part:\nmaybe I misunderstood the whole complex of \"findClassesInPaths\" ... but to me it seemed the intention was to load all jars and classes that are in the tree and all subdirectories. However, after looking at the code again, it parses a structure like this: Jars only in the top folder(s), class files in arbitrary deep subfolders (which imo is strange).\nMy code currently only loads jar-files (as we only have jar-files), but with another if in the line 191 (patched version) we could also include class-files just as easily.\n\nAnyhow, I think I will check (just check) why plugins are loaded \"the stupid way\" (have 10 different places call the ClassFinder, searching all jars, instead of just having some static registerPlugin() method in the class which does the hooking just once) and if it can be done faster ... Eg. it could work something like this: ClassFinder loads plugins, while the main thread initializes the gui (in parallel) -> once they are done the ClassFinder populates the menus and so on by calling the registerPlugin of the loaded jars and classes ... but I'm way ahead of myself (and my rusty coding skills) there ;)\nMaybe someone should cick off a GSOC-Project for this next year ;)", "id": 159023, "time": "2012-05-14T07:45:56Z", "creator": "immanuel.hayden@gmail.com", "creation_time": "2012-05-14T07:45:56Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "URL: http://svn.apache.org/viewvc?rev=1338465&view=rev\nLog:\nBug 53226 - Faster startup\nNo need to check for abstract classes, as these are eliminated by the class finder\n\nModified:\n   jmeter/trunk/src/core/org/apache/jmeter/gui/action/ActionRouter.java", "id": 159055, "time": "2012-05-14T22:33:16Z", "bug_id": 53226, "creation_time": "2012-05-14T22:33:16Z", "is_private": false}, {"count": 11, "tags": [], "bug_id": 53226, "text": "Adding caching to the classfinder might be possible, but would need to be carefully done so as not to impact non-GUI mode.\n\nAlso, in GUI mode the classpath can be updated at run-time using the Test Plan \"Library\" entries.\n\nA cache will take additional memory.\n\nAny time savings produced by a cache needs to be carefully balanced against the additional processing and memory requirements.\n\nHowever, fixes such the one for ActionRouter are obviously worthwhile.", "id": 159069, "time": "2012-05-15T17:01:05Z", "creator": "sebb@apache.org", "creation_time": "2012-05-15T17:01:05Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "creator": "sebb@apache.org", "text": "Avoid duplicate Function lookup.\n\nURL: http://svn.apache.org/viewvc?rev=1338954&view=rev\nLog:\nBug 53226 - Faster startup\nFunctionHelper can use function list created by CompoundVariable\n\nModified:\n   jmeter/trunk/src/core/org/apache/jmeter/engine/util/CompoundVariable.java\n   jmeter/trunk/src/core/org/apache/jmeter/functions/gui/FunctionHelper.java", "id": 159081, "time": "2012-05-15T23:57:05Z", "bug_id": 53226, "creation_time": "2012-05-15T23:57:05Z", "is_private": false, "attachment_id": null}, {"text": "(In reply to comment #11)\n...\n> Also, in GUI mode the classpath can be updated at run-time using the Test\n> Plan \"Library\" entries.\n\nThe Library entries are used to update the run-time classloader only, and do not change the classpath. \n\nAFAICT this means that the ClassFinder will not be affected by any library entries.\n\n...", "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "count": 13, "id": 159128, "time": "2012-05-17T16:53:15Z", "bug_id": 53226, "creation_time": "2012-05-17T16:53:15Z", "is_private": false}, {"count": 14, "tags": [], "creator": "immanuel.hayden@gmail.com", "attachment_id": null, "id": 159136, "time": "2012-05-17T20:49:11Z", "bug_id": 53226, "creation_time": "2012-05-17T20:49:11Z", "is_private": false, "text": "Also if you implement the cache strictly as a cache and not as the sole source of serving the information then it should be no problem either way. If you add new paths it just results in cache-misses (as the jar files found in the new paths are not in the cache yet) and would be loaded by the failover and added to the cache.\n\n(In reply to comment #13)\n> (In reply to comment #11)\n> ...\n> > Also, in GUI mode the classpath can be updated at run-time using the Test\n> > Plan \"Library\" entries.\n> \n> The Library entries are used to update the run-time classloader only, and do\n> not change the classpath. \n> \n> AFAICT this means that the ClassFinder will not be affected by any library\n> entries.\n> \n> ..."}, {"count": 15, "tags": [], "bug_id": 53226, "attachment_id": null, "id": 159142, "time": "2012-05-17T23:05:49Z", "creator": "sebb@apache.org", "creation_time": "2012-05-17T23:05:49Z", "is_private": false, "text": "As far as I can tell, most of the work has to happen anyway; there is now very little duplication of effort.\n\nSo what benefit would a cache provide?"}, {"count": 16, "tags": [], "creator": "immanuel.hayden@gmail.com", "attachment_id": null, "id": 159148, "time": "2012-05-18T07:41:39Z", "bug_id": 53226, "creation_time": "2012-05-18T07:41:39Z", "is_private": false, "text": "(In reply to comment #15)\n> As far as I can tell, most of the work has to happen anyway; there is now\n> very little duplication of effort.\n> \n> So what benefit would a cache provide?\n\nWell, we call \"findClassesThatExtend\" with the same path(s)[1] multiple times, which in turn calls \"addJarsInPath\" which searches through the FS and \"findClassesInPaths\" which opens and searches the found Jar-Files for classes. So if we can eliminate doing that whole stuff multiple times, we should see a performance gain, esp. on machines with slow disks like the one at my workplace (albeit I am not sure how much OS-level FS-caching would play a role).\n\nHowever, caching the Classes as I also proposed does not make sense, as my current research indicates that Class.forName() has a cache in itself.\n\n\n[1] normally it's \"JMeterUtils.getSearchPaths()\", except for two cases or so where we have a hardcoded path."}, {"count": 17, "tags": [], "bug_id": 53226, "is_private": false, "id": 159150, "attachment_id": null, "creator": "sebb@apache.org", "creation_time": "2012-05-18T08:20:13Z", "time": "2012-05-18T08:20:13Z", "text": "(In reply to comment #16)\n> (In reply to comment #15)\n> > As far as I can tell, most of the work has to happen anyway; there is now\n> > very little duplication of effort.\n> > \n> > So what benefit would a cache provide?\n> \n> Well, we call \"findClassesThatExtend\" with the same path(s)[1] multiple\n> times, which in turn calls \"addJarsInPath\" which searches through the FS and\n> \"findClassesInPaths\" which opens and searches the found Jar-Files for\n> classes. So if we can eliminate doing that whole stuff multiple times, we\n> should see a performance gain, esp. on machines with slow disks like the one\n> at my workplace (albeit I am not sure how much OS-level FS-caching would\n> play a role).\n\nYes, that might make sense; and the amount of memory required to cache the result is relatively small - always shorter than the classpath.\n \n> However, caching the Classes as I also proposed does not make sense, as my\n> current research indicates that Class.forName() has a cache in itself.\n\nAlso, the cache would be a lot larger.\n\n> \n> [1] normally it's \"JMeterUtils.getSearchPaths()\", except for two cases or so\n> where we have a hardcoded path."}, {"count": 18, "tags": [], "bug_id": 53226, "text": "Created attachment 28832\nAdds a path -> classes cache to the ClassFinder\n\nAdded a cache to the ClassFinder (tried to get it done with minimal destruction) to cache all found classes in the paths. Cannot really say if it makes much difference as I have a bunch of other changes too which affect the performance, but at least I didn't spot any regressions when quickly checking the menus.\n\nOn a related note: is there a way for gui-components to get a notification when they are first rendered? I poked around in the Event-Tree but I'm not really getting the hang of it :(\nReason: We initilize every gui-component with all it's components, panels and so on, just to populate the menu. I understand that this is needed because you can't do abstract static methods in java, but some take exceedingly long to initialize all their stuff eventhough they are most probably never used by the user.", "id": 159300, "time": "2012-05-24T18:50:35Z", "creator": "immanuel.hayden@gmail.com", "creation_time": "2012-05-24T18:50:35Z", "is_private": false, "attachment_id": 28832}, {"count": 19, "tags": [], "bug_id": 53226, "text": "(In reply to comment #18)\n\n> On a related note: is there a way for gui-components to get a notification\n> when they are first rendered? I poked around in the Event-Tree but I'm not\n> really getting the hang of it :(\n\nPlease ask such questions on the JMeter dev list.", "id": 159301, "time": "2012-05-24T19:05:58Z", "creator": "sebb@apache.org", "creation_time": "2012-05-24T19:05:58Z", "is_private": false, "attachment_id": null}, {"count": 20, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "(In reply to comment #18)\n> Created attachment 28832 [details]\n> Adds a path -> classes cache to the ClassFinder\n> \n> Added a cache to the ClassFinder (tried to get it done with minimal\n> destruction) to cache all found classes in the paths. Cannot really say if\n> it makes much difference as I have a bunch of other changes too which affect\n> the performance, but at least I didn't spot any regressions when quickly\n> checking the menus.\n\nThe cache uses HashMap which is not thread-safe.\nIt also looks as though it could use a lot of memory.\n\nCaching is nearly always a trade-off between speed and memory; without any evidence of a speed improvement it's impossible to justify the change.", "id": 159302, "time": "2012-05-24T19:14:13Z", "bug_id": 53226, "creation_time": "2012-05-24T19:14:13Z", "is_private": false}, {"count": 21, "tags": [], "bug_id": 53226, "is_private": false, "id": 160513, "attachment_id": null, "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2012-07-08T20:37:35Z", "time": "2012-07-08T20:37:35Z", "text": "I close this one as some improvements have been done.\nGoing further might introduce regressions.\nOn my computer (3 years old Mac OSX), JMeter starts in 3s.\n\nReopen if you find more enhancements."}]
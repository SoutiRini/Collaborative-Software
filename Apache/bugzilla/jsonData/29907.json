[{"count": 0, "tags": [], "creator": "hauser@acm.org", "text": "after running tomcat for a while, all of a sudden browsers keep waiting forever\nafter connecting. With the links-linemode browser, it appears that the reason\nfor it surfaced: it hangs during \"SSL negotiation\"\nWhen stopping tomcat manually, I get\n<<<<DEBUG [http-8080-Processor4] (StandardWrapper.java:700) -   Returning non-STM\ninstance\nJul 3, 2004 3:52:45 PM org.apache.coyote.http11.Http11Protocol pause\nINFO: Pausing Coyote HTTP/1.1 on http-8443\nJul 3, 2004 3:52:46 PM org.apache.catalina.core.StandardService stop\nINFO: Stopping service Privasphere-Standalone\nJul 3, 2004 3:52:46 PM org.apache.catalina.core.StandardHost getDeployer\nINFO: Create Host deployer for direct deployment ( non-jmx )\nJul 3, 2004 3:52:46 PM org.apache.catalina.core.StandardHostDeployer remove\nINFO: Removing web application at context path\nDEBUG [main] (StandardManager.java:676) - Stopping\nDEBUG [main] (StandardManager.java:500) - Unloading persisted sessions\nDEBUG [main] (StandardManager.java:507) - Saving persisted sessions to SESSIONS.ser\nDEBUG [main] (StandardManager.java:530) - Unloading 0 sessions\nDEBUG [main] (StandardManager.java:574) - Expiring 0 persisted sessions\nDEBUG [main] (StandardManager.java:586) - Unloading complete\nJul 3, 2004 3:52:46 PM org.apache.catalina.core.StandardHost getDeployer\nINFO: Create Host deployer for direct deployment ( non-jmx )\nJul 3, 2004 3:52:46 PM org.apache.catalina.core.StandardHostDeployer remove\nINFO: Removing web application at context path\nDEBUG [main] (StandardManager.java:676) - Stopping\nDEBUG [main] (StandardManager.java:500) - Unloading persisted sessions\nDEBUG [main] (StandardManager.java:507) - Saving persisted sessions to SESSIONS.ser\nDEBUG [main] (StandardManager.java:530) - Unloading 8 sessions\n INFO [main] (ManagerBase.java:898) - Cannot serialize session attribute\nlogoPrepaid for session EB7C9AF5C1736B2D04765F4DB2BE2E\n67\njava.io.NotSerializableException: java.io.ByteArrayInputStream\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1054)\n        at\njava.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1332)\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1304)\n        at\njava.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1247)\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)\n        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:278)\n        at\norg.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1411)\n        at\norg.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:899)\n        at\norg.apache.catalina.session.StandardManager.doUnload(StandardManager.java:539)\n        at\norg.apache.catalina.session.StandardManager.unload(StandardManager.java:485)\n        at\norg.apache.catalina.session.StandardManager.stop(StandardManager.java:687)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4474)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:952)\n        at\norg.apache.catalina.core.StandardHostDeployer.remove(StandardHostDeployer.java:670)\n        at org.apache.catalina.core.StandardHost.remove(StandardHost.java:946)\n        at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1009)\n        at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:986)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:351)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1123)\n        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1135)\n        at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:483)\n        at org.apache.catalina.core.StandardService.stop(StandardService.java:538)\n        at org.apache.catalina.core.StandardServer.stop(StandardServer.java:2332)\n        at org.apache.catalina.startup.Catalina.stop(Catalina.java:605)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:284)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:422)\n INFO [main] (ManagerBase.java:898) - Cannot serialize session attribute\npayRecip for session EB7C9AF5C1736B2D04765F4DB2BE2E67\njava.io.NotSerializableException: java.io.ByteArrayInputStream\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1054)\n        at\njava.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1332)\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1304)\n        at\njava.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1247)\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)\n        at\njava.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1332)\n        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1304)\n        at\njava.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1247)\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)\n        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:278)\n        at\norg.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1411)\n        at\norg.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:899)\n        at\norg.apache.catalina.session.StandardManager.doUnload(StandardManager.java:539)\n        at\norg.apache.catalina.session.StandardManager.unload(StandardManager.java:485)\n        at\norg.apache.catalina.session.StandardManager.stop(StandardManager.java:687)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4474)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:952)\n        at\norg.apache.catalina.core.StandardHostDeployer.remove(StandardHostDeployer.java:670)\n        at org.apache.catalina.core.StandardHost.remove(StandardHost.java:946)\n        at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1009)\n        at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:986)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:351)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1123)\n        at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1135)\n        at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:483)\n        at org.apache.catalina.core.StandardService.stop(StandardService.java:538)\n        at org.apache.catalina.core.StandardServer.stop(StandardServer.java:2332)\n        at org.apache.catalina.startup.Catalina.stop(Catalina.java:605)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:580)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:324)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:284)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:422)\nDEBUG [main] (StandardManager.java:574) - Expiring 8 persisted sessions\nDEBUG [main] (StandardManager.java:586) - Unloading complete\n INFO [main] (StandardWrapper.java:1213) - Waiting for 2 instance(s) to be\ndeallocated\n INFO [main] (StandardWrapper.java:1213) - Waiting for 2 instance(s) to be\ndeallocated\n INFO [main] (StandardWrapper.java:1213) - Waiting for 2 instance(s) to be\ndeallocated\njava.lang.OutOfMemoryError\n...>> other services with non-https connectors were not affected.\n\nMy suspicion is that the insufficient memory was the root cause. If so, it would\nbe great to throw the OutOfMemoryError immediately.", "id": 60126, "time": "2004-07-04T08:21:56Z", "bug_id": 29907, "creation_time": "2004-07-04T08:21:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "hauser@acm.org", "attachment_id": null, "text": "- Mozilla hangs after saying \"Connected to hostname.domain.tld...\" in the status\nbar without a timeout (http://bugzilla.mozilla.org/show_bug.cgi?id=249976)\n- MSIE 6.0.2800.1106.xpsp2.030422-1633 says in the status bar \"opening page\nhttps://hostname.domain.tld:port/...\" - no timeout\n- Netscape 4.7: \"Connect: host hostname.domain.tld:8443 contacted - waiting for\nreply\" - no timeout\n- redhat 9 ELinks 0.4.2 - Text WWW browser: \"SSL negotiation\" and no timeout\n- redhat 9 Links 0.96 - \"SSL negotiation\" and no timeout\n- Opera 7.50K 'Sende Anfrage an hostname.domain.tld...'\n\nif anybody has a recommendation which browser to use to learn where it breaks\ndown, this would be highly appreciated!", "id": 60183, "time": "2004-07-06T09:39:16Z", "bug_id": 29907, "creation_time": "2004-07-06T09:39:16Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 29907, "is_private": false, "text": "Links 0.96: gives a late timeout \n\"Error\n\nReceive timeout\n\n[cancel]\"", "id": 60184, "time": "2004-07-06T09:41:08Z", "creator": "hauser@acm.org", "creation_time": "2004-07-06T09:41:08Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 29907, "is_private": false, "text": "I really don't see anything to fix here (if you think otheriwse, please propose\na patch).\nYou have to remember Tomcat isn't implementing SSL (JSSE does that).", "id": 60200, "time": "2004-07-06T15:55:50Z", "creator": "remm@apache.org", "creation_time": "2004-07-06T15:55:50Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 29907, "text": "The following is one hypothesis for this, but we have seen it also happen on\nnon-ssl connectors (i.e. regular http) - anyway, here the reasoning goes as per\nhttp://forum.java.sun.com/wireless/thread.jsp?forum=2&thread=502002&message=2374415#2374415\n===\nWe had exactly the same problem and it appeared to be a problem with /dev/random.\n\nIt seems that if there's not enough entropy, then the usage of /dev/random might\nblock waiting for entropy.\nYou propably don't have enough key pressings, mouse usage, net traffic, etc. for\nthe entropy required to be filled.\n\nYou can set the system property \"java.security.egd\" to \"file:/dev/urandom\"  \nto use /dev/urandom instead.\n/dev/urandom is secure enough for SSL connection usage.\n\nHope this helps you!\n\n- Atso.\n===\nsee also: http://lists.gnupg.org/pipermail/gnupg-devel/2003-February/019736.html", "id": 63389, "time": "2004-09-11T07:13:58Z", "creator": "hauser@acm.org", "creation_time": "2004-09-11T07:13:58Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "hauser@acm.org", "text": "more insights on this\n- forget the stacktrace in original description, it is probably our watcher\nscript, that automatically restarted tomcat (and I didn't know about this)\n\nHowever:\n- the problem that a connector hangs happens with all 3 connectors I have\nconfigured in my server.xml (8443 with https, 8080 and 2712 with plain http)\n- what is still possible is to send tomcat a kill -QUIT to obtain a full thread\ndump and nothing appears to be particularly special since the server is not very\nbusy.\nHowever, for each connector I see up to minSpareThreads=\"25\" threads and always\none in java.net.PlainSocketImpl.socketAccept() and the rest in\njava.lang.Object.wait(). This is the healthy situation.\n\nOnce tomcat hangs, on 1 or more of the connectors, all the threads are in the\nwait state and none doing socketAccept.\n\nIn the logs, there is no indication why the connector should loose the accepting\nthread. The only stacktraces I see come from the struts file-download when,\nsomebody aborts it and other simple errors in the servlet application (typically\nleading to \n...\n        at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:525)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:810)\n...\nat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929)\n        at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160)\n...)\n\nAny hints how to remedy this would be highly appreciated!  I'll attach the JVM\nthread dump next.\n\nP.S.: Appears to have some similarity to the mailing-list description as per the\nabove URL.\nP.P.S.: there is no out-of-memory situation before like in Bug 31426", "id": 64719, "time": "2004-10-06T19:37:53Z", "bug_id": 29907, "creation_time": "2004-10-06T19:37:53Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 29907, "is_private": false, "text": "Created attachment 12969\nthreadDump3Connectors.txt", "id": 64720, "time": "2004-10-06T19:38:30Z", "creator": "hauser@acm.org", "creation_time": "2004-10-06T19:38:30Z", "attachment_id": 12969}, {"count": 7, "tags": [], "text": "It seems that we have found the solution (keep the fingers crossed  ;) ):\nApparently, Redhat 9. was the first Redhat Release that uses the new Posix\n Threads (NPTL), backported by Redhat from 2.6 Kernel to 2.4\nUnfortunately, this appears to be buggy (e.g. CommunigatePro also has not been\n\"cleared\" for redhat)\n\nHow to fix:\n> mv /lib/tls /lib/tls.unused\n> ldconfig\n> catalina.sh restart\n\n--> this brings back the old, classic Linux-Thread Implementation - slower, but\nhopefully more robust.\n\nWhen doing less /proc/PID/maps\nno more shared objects from /lib/tls should be visible\n\nThe affected system as per \"uname -a\":\nLinux myhost 2.4.20-30.9 #1 Wed Feb 4 20:44:26 EST 2004 i686 i686 i386 GNU/Linux\n\nWild enhancement suggestion to prevent similar stability nightmares in the future:\n=======================================================================\n(admitted, it is not really Tomcat's task to fix operating system bugs on the\napplication level, but if it is easy why not doing it anyway)\n\nIdea how this could work:\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:616)\n\n                       synchronized (this) {\n                            while (!shouldRun && !shouldTerminate) {\n                                this.wait();\n                            }\n                            _shouldRun = shouldRun;\n                            _shouldTerminate = shouldTerminate;\n                            _toRun = toRun;\n                        }\n\nWhy could this not only wait to be notified about \"work\", but also perhaps wake\nup every minute once by itself (and if another thread is already working going\nimmediately back to sleep since it cannot get the synchronized object.)\nIf that was possible, a big warning should be printed (provided one can detect\nwhether the thread woke up by itself instead of being notified) that tomcat is\ncovering up for underlying OS problems and the Sys-Admin better get informed\nabout possible patch...\n\nWhat do you think?", "is_private": false, "id": 66333, "creator": "hauser@acm.org", "time": "2004-11-03T09:27:37Z", "bug_id": 29907, "creation_time": "2004-11-03T09:27:37Z", "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 29907, "is_private": false, "text": "the same appears to have happened also with\nhttp://issues.apache.org/jira/browse/JAMES-324 ", "id": 66576, "time": "2004-11-07T09:48:46Z", "creator": "hauser@acm.org", "creation_time": "2004-11-07T09:48:46Z", "attachment_id": null}]
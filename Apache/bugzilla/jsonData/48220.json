[{"count": 0, "tags": [], "bug_id": 48220, "text": "The field mdcCopy in LoggingEvent should be transient. Otherwise it is tried to serialize the Hashtable with all its elements (e.g. in SocketAppender). But these elements doesn't have to be serializable. And if they are not I get an exception and the Logger is unusable for the rest of the Java process.\n\nHow to reproduce\n- MDC.put(\"key\", notSerializableObject)\n- Log on a SocketAppender", "id": 132075, "time": "2009-11-18T02:10:14Z", "creator": "lbe.tech@spree.de", "creation_time": "2009-11-18T02:10:14Z", "is_private": false, "attachment_id": null}, {"count": 1, "text": "Of cource, if the field is transient then the LoggingEvent at the other side of the SocketAppender is incomplete - probably this is not what I want;)\n\nSo if it is intended to leave the field non-transient, at least the documentation for the MDC should be improved to give a hint to problem: non-serializable MCD-value / serializing appende.", "bug_id": 48220, "is_private": false, "id": 132076, "time": "2009-11-18T02:25:42Z", "creator": "lbe.tech@spree.de", "creation_time": "2009-11-18T02:25:42Z", "tags": [], "attachment_id": null}, {"count": 2, "tags": [], "creator": "carnold@apache.org", "attachment_id": null, "text": "I'm thinking that the most desirable resolution was to substitute Object.toString() for the non-serializable values in the MDC when serializing the logging event.  Will have to pull out my serialization spec to see if there is a clean way to do it.", "id": 132130, "time": "2009-11-18T19:42:16Z", "bug_id": 48220, "creation_time": "2009-11-18T19:42:16Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 48220, "text": "Yes, the toString()-call could be a good idea and would solve the problem for non-serializable values.\n\nBut I had also another problem. I've put my own serializable object into the MDC-context. But it couldn't be deserialized at the other side because my classfile wasn't present there.\nIn my special case I've put an application object into the MDC-context. I didn't want to use the toString()-presentation because this method was too heavy. My object was only used in an ErrorAppender with a PatternLayout that used the MDC-value. So toString() was only called in an error case.\nAnother developer had a SocketAppender in his log4j.xml in conjunction with log4eclipse as the server socket - and ran into the problem.\n\nSo for now I've created a SocketAppender-subclass that modifies the LoggingEvent by replacing the mdcCopy-values with it's toString()-representations - per reflection because the fields are private. The heavy toString()-method of my object is now called on every logging event (not only in an error case) - but that's ok, since it's a developer system.\n\nBut I don't know if this is a solution that is suitable for everybody using log4j. Perhaps it's possible to activate this behavior with a special option (global or local on every serializing appender).\n\nRegards\nLars", "id": 132134, "time": "2009-11-19T02:16:07Z", "creator": "lbe.tech@spree.de", "creation_time": "2009-11-19T02:16:07Z", "is_private": false, "attachment_id": null}]
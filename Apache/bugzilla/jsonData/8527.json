[{"count": 0, "tags": [], "bug_id": 8527, "attachment_id": null, "is_private": false, "id": 14770, "time": "2002-04-25T19:35:18Z", "creator": "panellg@heedless.org", "creation_time": "2002-04-25T19:35:18Z", "text": "I'm using log4j-1.2-rc1.\n\nI configure log4j using DOMConfigurator.configureAndWatch(\"foo.xml\") to create \na TelnetAppender.  I happily telnet to this and all is fine.  I edit foo.xml to \nchange some small things, and when log4j notices the change and reconfigures, \nthe telnet session is disconnected, but I can reconnect fine.  However, the old \nTelnetAppender appears to be lingering trying to accept() connections on it's, \nnow closed, ServerSocket:\n\njava.net.SocketException: Socket is closed\n   at java.net.ServerSocket.accept(ServerSocket.java:405)\n   at org.apache.log4j.net.TelnetAppender$SocketHandler.run \n(TelnetAppender.java:155)\n\nIt loops endlessly in a while(true) dumping the stack trace to the console.  \nIt's only effect (afaik) is to destroy performance (and potentially disk space \nif console output is being captured).\n\nA obvious fix is to replace the while(true) to while(running), modifying this \nnew flag just before the ServerSocket is closed.  This does result in a \nSocketException if the thread is blocked waiting for a connection, but this can \nbe cleanly hidden by conditionally printing the error based on that same flag.\n\n....... If an IOException other than an InterruptedIOException is thrown from \naccept() then is it not an indication of a 'broken' ServerSocket?  Perhaps \nallowing IOExceptions to propagate would be a better policy?"}, {"count": 1, "attachment_id": null, "bug_id": 8527, "text": "\nThanks the bug is now fixed.", "id": 15847, "time": "2002-05-09T19:53:57Z", "creator": "ceki@apache.org", "creation_time": "2002-05-09T19:53:57Z", "tags": [], "is_private": false}]
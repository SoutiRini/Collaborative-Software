[{"count": 0, "tags": [], "bug_id": 48923, "attachment_id": 25136, "text": "Created attachment 25136\nTest file for example code\n\nIn this example:\n\n    InputStream inp = new FileInputStream(\"Book.xlsx\");  // or .xls\n    Workbook wb = WorkbookFactory.create(inp);\n    int names = wb.getNumberOfNames() ;\n    if (names > 0) {\n      for (int ii = 0; ii < names; ii++) {\n         Name name = wb.getNameAt(ii);\n         String sName = name.getSheetName();\n         //int nameIdx = name.getSheetIndex();        // Hmm... doesn't work\n         int nameIdx = wb.getSheetIndex(sName);       // Alternate method\n      }\n    }\n\nthe commented out line always returns -1, even when the named cell, or range is\non a specific sheet.  The following line shows a workaround.  Note: this problem\nalso happens for .xls files.\n\nWayne", "id": 135385, "time": "2010-03-16T16:38:40Z", "creator": "wholder@nglm.com", "creation_time": "2010-03-16T16:38:40Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 48923, "attachment_id": null, "text": "You're using the wrong method there.\n\ngetSheetIndex will tell you which Sheet a named range is DEFINED FOR, or -1 if it applies to the whole of the workbook (see the javadocs for details). Your named ranges apply to the whole of the workbook, which is why you get -1\n\nYou probably want name.getSheetName(), which gives you the sheet it references, not the sheet it's defined on", "id": 137148, "time": "2010-05-26T10:52:07Z", "creator": "apache@gagravarr.org", "creation_time": "2010-05-26T10:52:07Z", "is_private": false}]
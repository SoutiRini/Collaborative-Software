[{"count": 0, "tags": [], "bug_id": 55233, "attachment_id": null, "id": 168459, "time": "2013-07-10T14:31:48Z", "creator": "s.boshev@gmail.com", "creation_time": "2013-07-10T14:31:48Z", "is_private": false, "text": "I have a test client that receives many binary messages. The server sends thousands of binary messages with size 1024 with no delay between them. At some point of time, the client fails to read the message and the connection is closed. See some close reasons below.\n\nI am wondering whether there is some issue with the read buffers being modified from other threads. \nSeeing all close reasons below, there are two issues here:\n- why there is buffer overflow when there is plenty of space to store the incoming data (e.g. \"unwrapping [1,130] bytes into a [8,192]\")\n- why there are attempts to unwrap bigger buffer into smaller one. I thought this should not be possible (e.g. \"unwrapping [12,466] bytes into a [8,192]\")\n\n\nHere are some close reasons occurred during the test:\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [6,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [1,130] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,240] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [12,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,071] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [12,466] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [4,356] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [14,059] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [4,707] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [10,041] bytes into a [8,192] byte buffer that already contained [0] bytes.\nEnding test thread as websocket session is closed\nConnection closed: Buffer overflow unwrapping [2,478] bytes into a [8,192] byte buffer that already contained [0] bytes."}, {"attachment_id": null, "tags": [], "bug_id": 55233, "is_private": false, "count": 1, "id": 168468, "time": "2013-07-10T19:06:51Z", "creator": "markt@apache.org", "creation_time": "2013-07-10T19:06:51Z", "text": "I've improved the error message so it now reports exactly how many bytes the SSLEngine needs to write. The fix I suspect will be required looks like it will need some fairly major surgery to the current code so I'd like to be sure of what is going on before I start down that route. If you could update your build to the latest trunk code, re-run you test and report the error messages that would be extremely helpful."}, {"count": 2, "tags": [], "text": "With the updated code the error messages are always the same:\n\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\nConnection closed: Buffer overflow. [16,916] bytes to write into a [8,192] byte buffer that already contained [0] bytes.\n...", "is_private": false, "bug_id": 55233, "id": 168499, "time": "2013-07-11T07:28:25Z", "creator": "s.boshev@gmail.com", "creation_time": "2013-07-11T07:28:25Z", "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 55233, "attachment_id": null, "id": 168506, "time": "2013-07-11T10:14:04Z", "creator": "markt@apache.org", "creation_time": "2013-07-11T10:14:04Z", "is_private": false, "text": "Many thanks for the testing and the feedback. I've been able to fix this without the major surgery I feared. The fix is available in trunk for you to test.\n\nI have also been able to create a testcase that reproduces the issue. The test case has also uncovered a handful of other bugs that I am currently working thorugh. Once all the bugs are fixed, I'll be adding the test case to trunk as well.\n\nThanks again for your testing and feedback. It is greatly appreciated."}, {"count": 4, "tags": [], "bug_id": 55233, "attachment_id": null, "id": 168511, "time": "2013-07-11T15:15:26Z", "creator": "s.boshev@gmail.com", "creation_time": "2013-07-11T15:15:26Z", "is_private": false, "text": "I have rerun the tests. Everything is working fine now.\n\nMark, thanks a lot for your prompt reaction and fixes!"}]
[{"count": 0, "tags": [], "creator": "gameldar@gmail.com", "attachment_id": 23873, "text": "Created attachment 23873\npatch to fix the writeBlock call to correctly account for the number of records.\n\nIf the final block does not contain the full number of records that the buffer supports then the resulting tar file contains the two EOF blocks (2 lots of 512 of nulls) followed by whatever was in the buffer previously. e.g. if the buffer contains 3 blocks it would look like this in the final two blocks:\n\nA\nB\nC\n---\nEOF\nEOF\nC\n\n\nLooking through the code - in src/main/org/apache/tools/tar/TarBuffer.java the process is normally as follows:\n\n1. If the buffer is full then write out the block.\n2. When writing out the block it always writes out the full blocksize\n\nHowever when the close is called (or any call to flush) it will call the same writeBlock method regardless of the number of records the buffer currently contains.\n\nThe fix is simple - that when writing the block it should always calculate the size to write out based upon the number of records and the record size. I've attached a patch to fix this.", "id": 128256, "time": "2009-06-24T19:07:10Z", "bug_id": 47421, "creation_time": "2009-06-24T19:07:10Z", "is_private": false}, {"count": 1, "attachment_id": null, "creator": "gameldar@gmail.com", "is_private": false, "id": 128257, "time": "2009-06-24T20:41:55Z", "bug_id": 47421, "creation_time": "2009-06-24T20:41:55Z", "tags": [], "text": "Added 40195 as a dependency - this is basically the same bug (that has been marked as WORKSFORME)"}, {"count": 2, "tags": [], "bug_id": 47421, "text": "your patch would lead to tar archives whose last block was incomplete.  Following the comments in readBlock this may be what other archivers do as well, but it seems to violate the specification (don't have any source for the spec right now).\n\nI think the cleaner approach would be to zero out the unused part of the block, this could be done in writeBlock after the block has been written.  This has been done in svn revision 789556\n\nCould you please verify that this approach fixes the problem you see (my tar implementations didn't have any problem with the old Ant code).", "id": 128417, "time": "2009-06-29T21:27:10Z", "creator": "bodewig@apache.org", "creation_time": "2009-06-29T21:27:10Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 47421, "attachment_id": null, "id": 128419, "time": "2009-06-29T22:26:57Z", "creator": "gameldar@gmail.com", "creation_time": "2009-06-29T22:26:57Z", "is_private": false, "text": "I hadn't noted the part about the block requirements when reading up about tar (I haven't been able to finding an actual format specification). But your implementation does move the generated tar file to be inline with the GNU Tar standard:\n\n\"When writing an archive, the last record of blocks should be written at the full size, with blocks after the zero block containing all zeros. When reading an archive, a reasonable system should properly handle an archive whose last record is shorter than the rest, or which contains garbage records after a zero block.\"\nFrom http://www.gnu.org/software/automake/manual/tar/Standard.html\n\nBut I can confirm that this has fixed the garbage issue. It hasn't broken any tar implementations that I've used either - this is just from a manual inspection using a binary editor. \n\nIt doesn't particularly help with what I'm doing - but that means I need to handle these cases rather than assuming (incorrectly) that end of the tar was 2 512 bytes of nulls (the files currently will always be generated by ant - hence the bug report here). I'm doing some on-the-fly appending to the end of the tar where I don't know the beginning point to do block reads (e.g. self-extracting code where the tar file is appended to the end of the executable binary)"}, {"count": 4, "tags": [], "creator": "bodewig@apache.org", "attachment_id": null, "text": "Thanks Kirk,\n\nI guess you'd have to adapt your code to deal with other archivers in the future anyway.", "id": 128420, "time": "2009-06-30T00:28:38Z", "bug_id": 47421, "creation_time": "2009-06-30T00:28:38Z", "is_private": false}]
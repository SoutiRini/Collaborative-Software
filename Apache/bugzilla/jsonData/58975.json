[{"count": 0, "tags": [], "bug_id": 58975, "attachment_id": null, "text": "I recently encountered a problem when trying to rename a sheet.\n\nException in thread \"main\" java.lang.NegativeArraySizeException\n\tat org.apache.poi.ss.formula.FormulaRenderer.getOperands(FormulaRenderer.java:118)\n\tat org.apache.poi.ss.formula.FormulaRenderer.toFormulaString(FormulaRenderer.java:100)\n\tat org.apache.poi.xssf.usermodel.helpers.XSSFFormulaUtils.updateFormula(XSSFFormulaUtils.java:101)\n\tat org.apache.poi.xssf.usermodel.helpers.XSSFFormulaUtils.updateSheetName(XSSFFormulaUtils.java:79)\n\tat org.apache.poi.xssf.usermodel.XSSFWorkbook.setSheetName(XSSFWorkbook.java:1571)\n\nAfter some poking around, I found that that the issue is that one of the cells previously added had 176 arguments in a CONCATENATE function (don't ask...) which was causing the byte value of _numberOfArgs in org.apache.poi.ss.formula.ptg.AbstractFunctionPtg to overflow. Excel does not actually limit the number of arguments in CONCATENATE itself, and the sheet works fine in POI unless you try to parse the formula. Unfortunately, renaming a sheet parses all function cells to see if they need to be renamed. A very similar cell with 108 arguments does not cause this issue.\n\nA workaround for anyone encountering this bug is to simply turn any call to CONCATENATE(1,2,...,x) to CONCATENATE(1,2,...125,CONCATENATE(125,126,....x)), repeating this split as many times as required. This causes the function to parse properly and returns the same result.", "id": 188249, "time": "2016-02-05T14:31:47Z", "creator": "wellwishingmax@gmail.com", "creation_time": "2016-02-05T14:31:47Z", "is_private": false}, {"count": 1, "tags": [], "creator": "wellwishingmax@gmail.com", "text": "Ah, sorry, I meant \"CONCATENATE(1,2,...125,CONCATENATE(126,127,....x))\" in the workaround, as written it would duplicate the 125th value.", "id": 188250, "time": "2016-02-05T14:41:41Z", "bug_id": 58975, "creation_time": "2016-02-05T14:41:41Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 58975, "text": "Excel limits functions to 255 arguments [1]\n\n> Calculation specifications and limits\n> Feature                   Maximum limit\n> Arguments in a function   255\n\nPOI XSSF should at least be able to support this many function arguments.\n\n[1] https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3\n\n128 sounds like a signed byte data type is being used when we should either be using an unsigned byte (unwrap a signed byte) or short.\n\nDo you have time to look through the code to try to find where this might be happening?", "id": 188254, "time": "2016-02-05T18:31:26Z", "creator": "onealj@apache.org", "creation_time": "2016-02-05T18:31:26Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 58975, "attachment_id": null, "id": 188283, "time": "2016-02-08T10:12:13Z", "creator": "wellwishingmax@gmail.com", "creation_time": "2016-02-08T10:12:13Z", "is_private": false, "text": "(In reply to Javen O'Neal from comment #2)\n> Excel limits functions to 255 arguments [1]\n> \n> > Calculation specifications and limits\n> > Feature                   Maximum limit\n> > Arguments in a function   255\n> \n> POI XSSF should at least be able to support this many function arguments.\n> \n> [1]\n> https://support.office.com/en-us/article/Excel-specifications-and-limits-\n> 1672b34d-7043-467e-8e27-269d656771c3\n> \n> 128 sounds like a signed byte data type is being used when we should either\n> be using an unsigned byte (unwrap a signed byte) or short.\n> \n> Do you have time to look through the code to try to find where this might be\n> happening?\n\nAt line 99 of FormulaRenderer, the object relating to the formula is cast as an OperationPtg. At line 100, getNumberOfOperands() is called on it. Examining the type hierarchy, getNumberOfOperands() is abstract in OperationPtg, and the only subclass that implements it that doesn't return a constant is AbstractFunctionPtg, which returns _numberOfArgs, a private byte. The constructor sets _numberOfArgs on creation by casting an int argument nParams as a byte."}, {"count": 4, "tags": [], "bug_id": 58975, "text": "Can you provide sample code which allows to reproduce this? Ideally as standalone unit-test together with any required sample-file? \n\nThis way we can reproduce it and also ensure that it stays fixed in the future.", "id": 188420, "time": "2016-02-14T20:54:35Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2016-02-14T20:54:35Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58975, "attachment_id": null, "text": "Fixed using https://svn.apache.org/viewvc?view=revision&revision=1800949", "id": 199599, "time": "2017-07-05T22:58:33Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-07-05T22:58:33Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 58975, "attachment_id": null, "text": "added test case using https://svn.apache.org/viewvc?view=revision&revision=1801307", "id": 199645, "time": "2017-07-08T18:17:02Z", "creator": "fanningpj@yahoo.com", "creation_time": "2017-07-08T18:17:02Z", "is_private": false}, {"count": 7, "tags": [], "creator": "onealj@apache.org", "attachment_id": null, "id": 200209, "time": "2017-08-06T18:36:17Z", "bug_id": 58975, "creation_time": "2017-08-06T18:36:17Z", "is_private": false, "text": "Will be included in POI 3.17 beta 2"}, {"count": 8, "tags": [], "bug_id": 58975, "is_private": false, "id": 200854, "creation_time": "2017-09-13T20:02:29Z", "time": "2017-09-13T20:02:29Z", "creator": "dominik.stadler@gmx.at", "text": "*** Bug 61385 has been marked as a duplicate of this bug. ***", "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 28749, "text": "The row number wraps around for higher row numbers (>65535).\n<code>\nHSSFWorkbook wb = new HSSFWorkbook();\nHSSFSheet sheet = wb.createSheet(\"65536\");\n\nHSSFRow row = sheet.createRow((short)65536);\nHSSFCell cell = row.createCell((short)0);\ncell.setCellValue(65536);\n</code>\n\nThe above code sets the value in the cell A1. \n[due to the cast (short)65536]\n\nShouldn't the behavior be similar to row.createCell((short)256) - which throws \nan exception? \n\ncheers\nConrad", "id": 56767, "time": "2004-05-03T19:56:33Z", "creator": "new_connie@hotmail.com", "creation_time": "2004-05-03T19:56:33Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "creator": "glens@apache.org", "attachment_id": null, "id": 63976, "time": "2004-09-21T12:58:59Z", "bug_id": 28749, "creation_time": "2004-09-21T12:58:59Z", "is_private": false, "text": "In this case it seems that it's Java wrapping the value.\n\n(short)256 = 256 because short is 16 bits.\n(short)65536 = 0 because only the last 16 bits of the value are being used.\n\n"}, {"count": 2, "tags": [], "creator": "jheight@apache.org", "attachment_id": null, "id": 91538, "time": "2006-07-24T12:42:30Z", "bug_id": 28749, "creation_time": "2006-07-24T12:42:30Z", "is_private": false, "text": "Unless we change the API to use ints for the row numbers, this wont be fixed. \n\nAs Glen points out this is a java vm behaviour.\n\nJason"}]
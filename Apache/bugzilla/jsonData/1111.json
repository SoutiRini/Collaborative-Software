[{"attachment_id": null, "tags": [], "creator": "Jacob.Friman@pac.ericsson.se", "is_private": false, "count": 0, "id": 1593, "time": "2001-03-26T03:36:52Z", "bug_id": 1111, "creation_time": "2001-03-26T03:36:52Z", "text": "Xalan1 seems to have a memory leak. When I to subsequent calls to the \nXSLTProcessor objects process method memory is whisling away. Xalan does not \nseem to free memory in between these calls. I set all my datastructures to null \nbetween the calls.\n\nSome code:\n\nwhile(no more temporaryXmlFilename) {\n\nfor(int i = 0 ; i < xslFilenames.length; i++) {\nxmlFileReader = new FileReader(temporaryXmlFilename);    \n                            \nif (xmlFileReader != null) {\n/* The best we can do to prevent out of memory exception.\n*/\nwhile ((maxHeapSize - Runtime.getRuntime().totalMemory() + Runtime.getRuntime\n().freeMemory()) < 16000000) {\n  System.gc();\n  try {\n  Thread.sleep(50);\n} catch (InterruptedException ie) {}\n}\n                                \nxslFileReader = new java.io.FileReader(xslFilenames[i]);\noutFileWriter = new FileWriter(fullExtractOutputDirectory + File.separator + \noutputFilenames[i], true);\ndpi.process(xmlFileReader, xslFileReader, outFileWriter);\noutFileWriter.flush();\noutFileWriter.close();\n                                \nxmlFileReader.close();\nxslFileReader.close();\n                                \nxmlFileReader = null;\nxslFileReader = null;\noutFileWriter = null;\n}\n}\n}\n\nRegards,\n\nJacob"}]
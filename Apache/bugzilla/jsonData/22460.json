[{"count": 0, "tags": [], "creator": "petrovs@hotmail.com", "is_private": false, "text": "Here is my situation : I'd like to control the amount of the info that my \ncustom task puts on the screen according to verbosity settings that user passes \nin the commanline (-verbose, -debug etc.). The task itself is a wrapper around \nthe existing code that uses System.out/System.err and I can manipulate the \nlevel of its' output with a set of proprietary parameters. But I can not match \nthem with Ant's message level since I have no access to it at runtime. It would \nbe nice to have something like Project.getMessageOutputLevel() that returns the \ncurrent message level set from the command line.\nOf course my other alternative is to provide something like 'verbose' attribute \non my task but this is ugly since I have to explicitly set this flag every time \nrather than automatically inheriting user settings.", "id": 42806, "time": "2003-08-15T13:34:51Z", "bug_id": 22460, "creation_time": "2003-08-15T13:34:51Z", "attachment_id": null}, {"count": 1, "attachment_id": null, "bug_id": 22460, "is_private": false, "id": 42818, "time": "2003-08-15T17:39:53Z", "creator": "stevel@apache.org", "creation_time": "2003-08-15T17:39:53Z", "tags": [], "text": "Here is the problem. The output level choice in ant is a final decision made by\nthe output listeners and loggers, not something that is actually known by the\nlogging components you call at logging time. This is different from log4j and\nsiblings where you can go log.isDebug(). That said, I think the project does\nknow what its invocation parameters are and there is no reason why the command\nline choice cannot be stored somewhere.\n\nOne thing I have been debating doing, so as to control the amount of info\ngenerated by some Axis tasks that log via commons-logging, is to write a commons\nlogging compatible logger that routes all log info to the ant logger. I will try\nworking on this again; it may need some tweaks to the commons logger itself. If\nwe add this, and your code moves to the commons logger API (a good practise,\nIMO), then you could leverage this functionality.\n"}, {"count": 2, "tags": [], "bug_id": 22460, "attachment_id": null, "id": 42819, "time": "2003-08-15T19:15:28Z", "creator": "ddevienne@lgc.com", "creation_time": "2003-08-15T19:15:28Z", "is_private": false, "text": "I've been considering doing the same thing for JDK 1.4 logging, as my tasks \noften are just wrapper to Ant-independent classes that use java.util.logging.\n\nHow about I wait on you to provide a nice abstract base class that does most of \nthe work ;-) Cheers, --DD"}, {"count": 3, "tags": [], "bug_id": 22460, "text": "*** Bug 23688 has been marked as a duplicate of this bug. ***", "id": 72609, "time": "2005-03-17T16:26:11Z", "creator": "bodewig@apache.org", "creation_time": "2005-03-17T16:26:11Z", "is_private": false, "attachment_id": null}]
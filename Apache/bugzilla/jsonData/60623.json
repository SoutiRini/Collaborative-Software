[{"count": 0, "tags": [], "bug_id": 60623, "attachment_id": null, "id": 196271, "time": "2017-01-21T21:07:38Z", "creator": "johndament@apache.org", "creation_time": "2017-01-21T21:07:38Z", "is_private": false, "text": "The behavior right now in an embedded module is that if the startStopThread count is 1, it is still executed asynchronously.  Usually in an embedded use case, you only have a single executor, as a result you can't effectively wait for the container to start before moving on.  Other containers (Jetty, Undertow for instance) block on the main thread while the start up occurs (they start on the main thread).\n\nThis change would make it so that if the count is 1, just run on the main thread, instead of having an executor service run on start up."}, {"count": 1, "tags": [], "creator": "1983-01-06@gmx.net", "is_private": false, "text": "Alternatively, one can provide a #join() method just like Jetty does in Server.class.", "id": 196278, "time": "2017-01-22T10:04:29Z", "bug_id": 60623, "creation_time": "2017-01-22T10:04:29Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 60623, "is_private": false, "text": "Created attachment 34660\nProposed code changes (based on dev discussion)", "id": 196280, "time": "2017-01-22T14:09:00Z", "creator": "johndament@apache.org", "creation_time": "2017-01-22T14:09:00Z", "attachment_id": 34660}, {"count": 3, "tags": [], "creator": "johndament@apache.org", "attachment_id": null, "id": 196281, "creation_time": "2017-01-22T14:09:55Z", "time": "2017-01-22T14:09:55Z", "bug_id": 60623, "text": "I also created a PR not sure which would be easier. https://github.com/apache/tomcat85/pull/6", "is_private": false}, {"count": 4, "tags": [], "creator": "rmannibucau@gmail.com", "text": "Can 1 keep current behavior and 0 or negative values use an executor executing directly the task? 1 is used and relying on deployer threads avoids to leak data where this change would enable leakages for numerous cases like html deployer.\n\nSide note: in the PR stop needs to execute returned runnables i think if kept this way", "id": 196282, "attachment_id": null, "bug_id": 60623, "creation_time": "2017-01-22T14:22:32Z", "time": "2017-01-22T14:22:32Z", "is_private": false}, {"count": 5, "tags": [], "creator": "johndament@apache.org", "text": "Romain, what would be the benefit of current behavior when threads == 1?  This is specific to helping fix a problem w/ Weld and Tomcat integration where a deadlock can occur because two threads are trying to gain a lock on the same object.\n\nI think one of the ideas that came up on the discussion was to just introduce a flag. Mark seemed to think it was fine to just default to main.\n\nAlso note - the default behavior is that its going to use the thread count from the processor to make a judgment on the number of executors to use.  Unless you're explicitly overriding it to 1, you'll get the old behavior.", "id": 196283, "attachment_id": null, "bug_id": 60623, "creation_time": "2017-01-22T14:57:39Z", "time": "2017-01-22T14:57:39Z", "is_private": false}, {"count": 6, "tags": [], "creator": "johndament@apache.org", "is_private": false, "id": 196285, "creation_time": "2017-01-22T14:59:42Z", "time": "2017-01-22T14:59:42Z", "bug_id": 60623, "text": "Just to clarify:\n\n- If you don't specify the setting, or have it set to 0, you get the old behavior.\n- If you set it to 1, you get the new behavior.\n- If you set it to anything larger than 1, you get the old behavior.\n\nRomain does raise a good point about the negative number, I suspect you'll get a runtime exception right now.", "attachment_id": null}, {"count": 7, "tags": [], "creator": "markt@apache.org", "is_private": false, "id": 196315, "creation_time": "2017-01-23T09:54:22Z", "time": "2017-01-23T09:54:22Z", "bug_id": 60623, "text": "(In reply to romain.manni-bucau from comment #4)\n> Can 1 keep current behavior and 0 or negative values use an executor\n> executing directly the task? 1 is used and relying on deployer threads\n> avoids to leak data where this change would enable leakages for numerous\n> cases like html deployer.\n\n?\n\nPlease explain. The origins of the startStopThreads feature are not related to memory leak prevention.", "attachment_id": null}, {"count": 8, "tags": [], "creator": "rmannibucau@gmail.com", "text": "Fact is tomcat kind of guarantee you execute code in a specific thread pool (far from any user pool or http pool to be concrete).\n\nSo there is now a lot of code relying on deployment \"initialization\" setting there and not cleaning it (for good or bad reasons depending the listener implementation/hook). This is not an issue - assuming classes are coming from the \"container\" - since you are limited to this pool so it will be initialized each time and runtime will either not use that or get null and handle it (that's the 2 cases I'm aware of).\n\nAdd to that #pool=1 is used to avoid concurrent deployments and uresing this value to change the deployment mode will break instances.\n\nAlso just on a semantic point of view pool size = 1 sounds like a pool size is 1 and not 0 which correspond to \"execute in context\" no?", "id": 196316, "attachment_id": null, "bug_id": 60623, "creation_time": "2017-01-23T09:59:19Z", "time": "2017-01-23T09:59:19Z", "is_private": false}, {"count": 9, "tags": [], "bug_id": 60623, "attachment_id": null, "id": 196341, "creation_time": "2017-01-23T20:35:07Z", "time": "2017-01-23T20:35:07Z", "creator": "markt@apache.org", "text": "Code that relies on the deployment mechanism for correct clean-up is broken and needs to be fixed. Deployment threads may be re-used before they are stopped and if any component fails to fully clean-up, the data could leak to the next deployment and potentially cause a security issue.\n\nRe-defining a value of 1 for startStopThreads to mean 'serial deployment on the main processing thread' rather than 'serial deployment via a thread pool with a single thread' looks perfectly reasonable to me at this point.", "is_private": false}, {"count": 10, "tags": [], "bug_id": 60623, "is_private": false, "text": "> Code that relies on the deployment mechanism for correct clean-up is broken and needs to be fixed. Deployment threads may be re-used before they are stopped and if any component fails to fully clean-up, the data could leak to the next deployment and potentially cause a security issue.\n\nNo cause it is only in these threads so this pattern works well without leaking:\n\n    deploymentStart() { context.set(new DeploymentEn(...)); }\n    deploymentStop() {}\n\n\nDon't get me wrong, I don't like that code but saw it often and with tomcat behavior it was more than valid.\n\n> Re-defining a value of 1 for startStopThreads to mean 'serial deployment on the main processing thread' rather than 'serial deployment via a thread pool with a single thread' looks perfectly reasonable to me at this point.\n\nI think I didn't get what was the issue using 0 for that? It keeps compatibility and allow this new feature as well.", "id": 196343, "time": "2017-01-23T20:40:41Z", "creator": "rmannibucau@gmail.com", "creation_time": "2017-01-23T20:40:41Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "creator": "markt@apache.org", "text": "You are going to have to explain that code sample. It means nothing to me.\n\n0 and negative numbers are already defined to have special meaning.", "count": 11, "id": 196344, "time": "2017-01-23T20:52:36Z", "bug_id": 60623, "creation_time": "2017-01-23T20:52:36Z", "is_private": false}, {"count": 12, "tags": [], "bug_id": 60623, "attachment_id": null, "id": 196346, "time": "2017-01-23T21:12:23Z", "creator": "rmannibucau@gmail.com", "creation_time": "2017-01-23T21:12:23Z", "is_private": false, "text": "Ok, if you have a listener observing before_init or before_start on Context (or even org.apache.catalina.core.StandardHost#addChild) you can initialize some context there, if you only deploy in this pool then you are safe to set and not unset the value there.\n\nI saw that several times in company integrations and I think it would be great to not break them. Also keep in mind 1 is the default.\n\nRegarding 0, you are right. For the story it means \"auto number\" from the available processors which is something I missed.\n\nSide note - unrelated to this ticket but still related to in context deployment: for the embedded case using tomcat.getHost().addChild(context) already deploys in current thread (that's what does Apache Meecrowave for instance). This also means org.apache.catalina.core.ContainerBase#initInternal could be lazy to avoid to create these useless threads.\n\nThinking more about it I think a clean solution would to just pass an executor name like for connectors and just lookup the executor from the server.xml definitions. If you don't want that pool deployment tomcat can provide an InCallerThreadExecutor implementing Executor interface.\n\nwdyt?"}, {"count": 13, "tags": [], "creator": "rmannibucau@gmail.com", "is_private": false, "text": "side note: to speak about well known frameworks affected by that, log4j2 can lead to the mentionned issue when added to the container since it sets a threadlocal in initialzer or context listener and reset it in a servlet (intended to be load on startup 1). Goal being to be initialized for the whole startup duration but if another filter fails then it is not resetted. While tomcat uses a pool this is not a big deal but when it will start to use the caller thread it can fail where it was previously ok. See log4j-web for the detail.", "id": 196360, "time": "2017-01-24T08:49:30Z", "bug_id": 60623, "creation_time": "2017-01-24T08:49:30Z", "attachment_id": null}, {"count": 14, "tags": [], "creator": "markt@apache.org", "attachment_id": null, "text": "Why isn't the log4j2 issue just as much as a problem for an Executor thread that is used to start multiple web applications?\n\nI remain unconvinced that switching to the main thread when startStopThreads == 1 is any worse that the current behaviour.", "id": 196422, "time": "2017-01-25T20:29:19Z", "bug_id": 60623, "creation_time": "2017-01-25T20:29:19Z", "is_private": false}, {"count": 15, "tags": [], "bug_id": 60623, "is_private": false, "id": 196961, "creation_time": "2017-02-13T15:03:28Z", "time": "2017-02-13T15:03:28Z", "creator": "markt@apache.org", "text": "Given the concerns for existing applications - although I not convinced those concerns are entirely valid - I propose that this change is implemented for 9.0.x only and an appropriate entry added to the migration guide.", "attachment_id": null}, {"count": 16, "tags": [], "creator": "rmannibucau@gmail.com", "attachment_id": null, "text": "acceptable for me, thanks Mark", "id": 196962, "time": "2017-02-13T15:16:12Z", "bug_id": 60623, "creation_time": "2017-02-13T15:16:12Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "johndament@apache.org", "text": "I'm fine with that as well.  Do you need me to make any changes to the patch?", "count": 17, "id": 197468, "time": "2017-03-06T03:13:30Z", "bug_id": 60623, "creation_time": "2017-03-06T03:13:30Z", "is_private": false}, {"count": 18, "tags": [], "bug_id": 60623, "text": "Thanks for the offer.\n\nI spend a little time looking at this over the weekend and I should have something ready to commit shortly.", "id": 197470, "time": "2017-03-06T08:58:43Z", "creator": "markt@apache.org", "creation_time": "2017-03-06T08:58:43Z", "is_private": false, "attachment_id": null}, {"count": 19, "tags": [], "bug_id": 60623, "is_private": false, "id": 197471, "creation_time": "2017-03-06T11:54:26Z", "time": "2017-03-06T11:54:26Z", "creator": "markt@apache.org", "text": "Fixed in 9.0.x for 9.0.0.M18 onwards", "attachment_id": null}]
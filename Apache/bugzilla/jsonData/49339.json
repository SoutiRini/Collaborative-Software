[{"count": 0, "attachment_id": 25483, "bug_id": 49339, "text": "Created attachment 25483\nThe test case\n\nHi all,\n\nI extended PSDocumentGraphics2D to generate a more optimized PS code, and I noticed that the PSGenerator always wrote the same transformation matrix again and again.\n\nAfter some search, I found that the startPage method in AbstractPSDocumentGraphics2D uses the concatMatrix method of PSGenerator, which alters the PSGenerator current state to save the given AffineTransform.\n\nI've attached a simple TestCase which shows the problem (fails with current trunk code), and I will attach a simple patch:\nUse gen.writeln(gen.formatMatrix(at) + \"concat\") instead of gen.concatMatrix(at);", "id": 137107, "time": "2010-05-25T09:37:01Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-05-25T09:37:01Z", "tags": [], "is_private": false}, {"attachment_id": 25484, "tags": [], "creator": "julien.ayme@gmail.com", "text": "Created attachment 25484\nThe proposed patch", "count": 1, "id": 137108, "time": "2010-05-25T09:37:45Z", "bug_id": 49339, "creation_time": "2010-05-25T09:37:45Z", "is_private": false}, {"count": 2, "attachment_id": null, "bug_id": 49339, "text": "The proposed patch does not alter the rendering of the PostScript document (tested in our applications), and helps reducing the global weight of the generated document.", "id": 137109, "time": "2010-05-25T09:39:36Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-05-25T09:39:36Z", "tags": [], "is_private": false}, {"count": 3, "tags": [], "text": "Julien, I've tried several different approaches to see what the difference is in the generated PS file, but so far, I've never got a difference before and after applying your patch. I remember running into problems because I didn't register certain transformations with the PSGenerator's state. You say you extended PSDocumentGraphics2D. Could it be that some of these extensions have a side-effect which caused you to submit this change? Can you provide an example of the problem you're trying to solve here so I can compare the generated PS code? I've seen your test case, but I'd like to see the effect in PS code. Thanks!", "is_private": false, "id": 137220, "creation_time": "2010-05-30T11:46:18Z", "time": "2010-05-30T11:46:18Z", "creator": "jeremias@apache.org", "bug_id": 49339, "attachment_id": null}, {"count": 4, "tags": [], "creator": "julien.ayme@gmail.com", "text": "Hi Jeremias,\n\nI'm not currently at work but I think I can provide a valid use case: I've modified the PSDocumentGraphics2D by adding some \"batch\" drawing.\n\nThe main pattern for the \"batch\" drawing, like in draw/fill(Shape) method, is:\n- Save graphic state, \n- Concat matrix if required,\n- Do batch drawing (mainly calls of Graphics2D fill(Shape) and drawString methods)\nwith no AffineTransform change (important).\n- Restore graphic state.\n\nThe use case that triggered the issue was, if I remember well:\n- Define an AffineTransform (different from Identity) into the Graphics.\n- Call any of the \"batch\" drawing defined above.\n\nThe thing is, since I already defined the matrix before calling any of the PSDocumentGraphics2D method, it should not concat the matrix again. But my problem was that even if I just added the matrix to the GraphicState, the method checkTransform returned true, and the matrix was written once again.\n\nI will check tomorrow that this use case was the right one (which triggered the issue).\n\nPS: Thanks for the review of all my patch ;-)", "id": 137221, "time": "2010-05-30T12:25:26Z", "bug_id": 49339, "creation_time": "2010-05-30T12:25:26Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "julien.ayme@gmail.com", "is_private": false, "text": "Created attachment 25499\nNew enhanced Test case\n\nI've added a method in the test case which shows exactly the issue encountered when generating the whole PostScript document.\nThe use case is what I've described in my precedent comment, so here is a code example.", "id": 137227, "time": "2010-05-31T02:44:52Z", "bug_id": 49339, "creation_time": "2010-05-31T02:44:52Z", "attachment_id": 25499}, {"count": 6, "tags": [], "text": "There is two main benefits from this patch:\nIn our production environment, we noticed that the generated files weights 15% less (in average), and that the generation is a little faster (far less double formatting involved due to matrix not being written again).", "is_private": false, "bug_id": 49339, "id": 137314, "time": "2010-06-03T09:49:02Z", "creator": "julien.ayme@gmail.com", "creation_time": "2010-06-03T09:49:02Z", "attachment_id": null}, {"count": 7, "attachment_id": null, "bug_id": 49339, "text": "Patch applied: http://svn.apache.org/viewvc?rev=954244&view=rev\n\nThanks for explaining Julien. Your patch does indeed reduce the PS size in the way you use PSDocumentGraphics2D. However, you're using methods proprietary to PSGraphics2D. That's not the idea of Java2D. If you use plain Graphics2D methods, the problem isn't fixed. Since for every painting operation a new GS/GR pair is generated, the whole CT's are still always generated. At some point we'll have to get rid of the GS/GR pairs if they are not necessary. But at least your change doesn't hurt at all.", "id": 137597, "time": "2010-06-13T11:48:11Z", "creator": "jeremias@apache.org", "creation_time": "2010-06-13T11:48:11Z", "tags": [], "is_private": false}]
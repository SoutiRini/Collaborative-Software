[{"count": 0, "tags": [], "bug_id": 36921, "text": "Hi,\n(1) We use Websphere 5.1.1.3 on Solaris platform. The JVM implementation of \nthe FunctionTable class does not have the field m_functions, and we got this \nstacktrace:\n\njava.lang.IllegalAccessError: tried to access field \norg.apache.xpath.compiler.FunctionTable.m_functions from class \norg.apache.xml.security.Init\n        at org.apache.xml.security.Init.init(Unknown Source)\n        at \nariba.util.xmlsignature.implementation.XMLSignatureFactorySpiImpl.<cl\n\ninit>(XMLSignatureFactorySpiImpl.java:167)\n...\n\n\n(2) There has been a problem prior to Java 1.2 because older xmlsec.jar \nversion assumes m_functions to be public which is not true for some JVM \nimplementations. This is fixed in Java 1.2 (and also 1.2.1) by using \nreflection, but the assumption that FunctionTable class contains the \nm_functions instance variable still applies. When the JVM implementation \n(Websphere/Solaris in this case) removes that instance variable from \nFunctionTable, the fix in Java 1.2 and 1.2.1 does not work.\n\nHere's the code of question in org.apache.xml.security.Init:\n\n\t    /* The following tweak by \"Eric Olson\" <ego@alum.mit.edu>\n\t     * is to enable xml-security to play with JDK 1.4 which\n\t     * unfortunately bundles an old version of Xalan\n\t     */\n\t    FuncLoader funcHereLoader = new FuncHereLoader();\n\n\t    try {\n\t        java.lang.reflect.Field mFunctions = \nFunctionTable.class.getField(\"m_functions\");\n\t        FuncLoader[] m_functions = (FuncLoader[]) mFunctions.get(null);\n\n\t        for (int i = 0; i < m_functions.length; i++) {\n\t            FuncLoader loader = m_functions[i];\n\n\t            if (loader != null) {\n                    if (log.isDebugEnabled())\n                    \tlog.debug(\"Func \" + i + \" \" + loader.getName());\n\n\t                if (loader.getName().equals(funcHereLoader.getName())) \n{\n\t                    m_functions[i] = funcHereLoader;\n\t                }\n\t            }\n\t        }\n\t    } catch (java.lang.NoSuchFieldException e) {\n\t    \tlog.info(\"Unable to patch xalan function table.\", e);\n        } catch (Exception e) {\n            log.info(\"Unable to patch xalan function table.\", e);\n        } \n\nFrom the comments, it seems that the code is added to work around some old \nXalan libraries when used with JDK 1.4. It appears that an earlier call to \nFunctionTable.installFunction (not shown here) would work for newer versions \nof Xalan. So my questions are:\n(a) Is the above code to modify m_functions still needed?\n(b) If needed, would it be possible to configure the xmlsec library so that we \ndo the reflection conditionally?\n\n(3) Here's the javap invoked on the JVM that has the problem. You can see that \nm_functions is absent.\n\n(a) java -version\njava version \"1.4.2_04\"\nJava(TM) 2 Runtime Environment, Standard Edition (IBM build 1.4.2_04-b05 \n20040627)\nJava HotSpot(TM) Client VM (build 1.4.2_04-b05, mixed mode)\nIBM Java ORB build orb1420-20040626\nXML build XSLT4J Java 2.6.1\nXML build XmlCommonsExternal 1.2.02\nXML build XML4J 4.3.1\n\n(b) javap org.apache.xpath.compiler.FunctionTable\nCompiled from \"FunctionTable.java\"\npublic class org.apache.xpath.compiler.FunctionTable extends java.lang.Object{\n    public static final int FUNC_CURRENT;\n    public static final int FUNC_LAST;\n    public static final int FUNC_POSITION;\n    public static final int FUNC_COUNT;\n    public static final int FUNC_ID;\n    public static final int FUNC_KEY;\n    public static final int FUNC_LOCAL_PART;\n    public static final int FUNC_NAMESPACE;\n    public static final int FUNC_QNAME;\n    public static final int FUNC_GENERATE_ID;\n    public static final int FUNC_NOT;\n    public static final int FUNC_TRUE;\n    public static final int FUNC_FALSE;\n    public static final int FUNC_BOOLEAN;\n    public static final int FUNC_NUMBER;\n    public static final int FUNC_FLOOR;\n    public static final int FUNC_CEILING;\n    public static final int FUNC_ROUND;\n    public static final int FUNC_SUM;\n    public static final int FUNC_STRING;\n    public static final int FUNC_STARTS_WITH;\n    public static final int FUNC_CONTAINS;\n    public static final int FUNC_SUBSTRING_BEFORE;\n    public static final int FUNC_SUBSTRING_AFTER;\n    public static final int FUNC_NORMALIZE_SPACE;\n    public static final int FUNC_TRANSLATE;\n    public static final int FUNC_CONCAT;\n    public static final int FUNC_SUBSTRING;\n    public static final int FUNC_STRING_LENGTH;\n    public static final int FUNC_SYSTEM_PROPERTY;\n    public static final int FUNC_LANG;\n    public static final int FUNC_EXT_FUNCTION_AVAILABLE;\n    public static final int FUNC_EXT_ELEM_AVAILABLE;\n    public static final int FUNC_UNPARSED_ENTITY_URI;\n    public static final int FUNC_DOCLOCATION;\n    static int m_funcNextFreeIndex;\n    public org.apache.xpath.compiler.FunctionTable();\n    static java.lang.String getFunctionName(int);\n    public static org.apache.xpath.functions.Function getFunction(int);\n       throws javax/xml/transform/TransformerException\n    public static int installFunction\n(java.lang.String,org.apache.xpath.Expression);\n    public static void installFunction(org.apache.xpath.Expression,int);\n    static {};\n}", "id": 80762, "time": "2005-10-04T23:22:43Z", "creator": "rwong@ariba.com", "creation_time": "2005-10-04T23:22:43Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "Have you tried (the about to be released) XMLSec 1.3? I believe this \nproblem should be resolved. Please download xmlsec-1.2.97.jar and let us know \nif it is still a problem: \nhttp://xml.apache.org/security/dist/java-library/ \n", "is_private": false, "id": 80805, "creator": "sean.mullan@oracle.com", "time": "2005-10-05T17:33:34Z", "bug_id": 36921, "creation_time": "2005-10-05T17:33:34Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 36921, "text": "(In reply to comment #1)\n> Have you tried (the about to be released) XMLSec 1.3? I believe this \n> problem should be resolved. Please download xmlsec-1.2.97.jar and let us \nknow \n> if it is still a problem: \n> http://xml.apache.org/security/dist/java-library/ \n\nThanks, I'll give it a try. Is there some kind of release notes that describe \nthe chnages between 1.2.97 and 1.2.1?", "id": 80884, "time": "2005-10-07T07:28:51Z", "creator": "rwong@ariba.com", "creation_time": "2005-10-07T07:28:51Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 36921, "text": "Hi,\nI tried xmlsec-1.2.97, running my tests on Windows XP SUn jdk 1.4.2_02. The \nfollowing is a puzzle which I hope you can help me with. Since this is not \nreleased yet, there is no release notes. Are there other docs I can look at? \nFor example, are there new dependencies on other 3rd party lib?\n\n(a) I ran into a ClassNotFoundException:\n\nCaused by: java.lang.ClassNotFoundException: \norg/apache/xml/security/transforms/implementations/FuncHere\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Class.java:141)\n\tat org.apache.xpath.compiler.FuncLoader.getFunction\n(FuncLoader.java:146)\n\t... 54 more\n---------\njava.lang.ClassNotFoundException: \norg/apache/xml/security/transforms/implementations/FuncHere\n\tat java.lang.Class.forName0(Native Meth[Loaded \ncom.jclark.xsl.tr.SheetImpl$TemplateParser]\n[Loaded com.jclark.xsl.tr.SheetImpl$AttributeSetParser]\nod)\n\tat java.lang.Class.forName(Class.java:141)\n\tat org.apache.xpath.compiler.FuncLoader.getFunction\n(FuncLoader.java:146)\n\tat org.apache.xpath.compiler.FunctionTable.getFunction\n(FunctionTable.java:273)\n\tat org.apache.xpath.compiler.Compiler.compileFunction\n(Compiler.java:1055)\n\tat org.apache.xpath.compiler.Compiler.compile(Compiler.java:208)\n\tat org.apache.xpath.axes.FilterExprWalker.init\n(FilterExprd:/ariba2/buyer/release/main/3.68.1+/Walker.java:117)\n\tat org.apache.xpath.axes.WalkerFactory.loadWalkers\n(WalkerFactory.java:152)\n\tat org.apache.xpath.axes.WalkingIterator.<init>\n(WalkingIterator.java:45)\n\tat org.apache.xpath.axes.WalkingIteratorSorted.<init>\n(WalkingIteratorSorted.java:110)\n\tat org.apache.xpath.axes.WalkerFactory.newDTMIterator\n(WalkerFactory.java:320)\n\tat org.apache.xpath.compiler.Compiler.locationPath(Compiler.java:670)\n\tat org.apache.xpath.compiler.Compiler.compile(Compiler.java:210)\n\tat org.apache.xpath.compiler.Compiler.compile(Compiler.java:156)\n\tat org.apache.xpath.XPath.<init>(XPath.java:209)\n\tat org.apache.xml.security.utils.CachedXPathFuncHereAPI.createXPath\n(Unknown Source)\n\tat org.apache.xml.security.utils.CachedXPathFuncHereAPI.eval(Unknown \nSource)\n\tat \norg.apache.xml.security.utils.CachedXPathFuncHereAPI.sd:/ariba2/buyer/release/m\nain/3.68.1+/electNodeList(Unknown Source)\n\tat \norg.apache.xml.security.transforms.implementations.TransformXPath2Filter.engine\nPerformTransform(Unknown Source)\n\tat \norg.apache.xml.security.transforms.TransformSpi.enginePerformTransform(Unknown \nSource)\n\tat org.apache.xml.security.transforms.Transform.performTransform\n(Unknown Source)\n\tat org.apache.xml.security.transforms.Transforms.performTransforms\n(Unknown Source)\n\tat \norg.apache.xml.security.signature.Reference.getContentsAfterTransformation\n(Unknown Source)\n\tat \norg.apache.xml.security.signature.Reference.dereferenceURIandPerformTransforms\n(Unknown Source)\n\tat org.apache.xml.security.signature.Reference.calculateDigest(Unknown \nSource)\n\tat org.apache.xml.security.signature.Reference.generateDigestValue\n(Unknown Source)\n\tat org.apache.xml.security.signature.Manifest.generateDigestValues\n(Unknown Source)\n\tat org.apache.xml.security.signature.XMLSignature.sign(Unknown Source)\n\tat ariba.util.xmlsignature.implementation.XMLSignatureImpl.sign\n(XMLSignatureImpl.java:357)\n\n(b) I turned on -verbose:class\n\nThu Oct 13 09:04:04 PDT 2005 () (test:debug): adding object \n(object=org.apache.xml.security.utils.HelperNodeList@1d49247, id=object-1) to \nobject list\n[Loaded org.apache.xml.security.utils.CachedXPathAPIHolder]\n[Loaded org.apache.xpath.CachedXPathAPI from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n[Loaded org.apache.xml.security.utils.CachedXPathFuncHereAPI]\n[Loaded org.apache.xml.security.transforms.implementations.FuncHereContext]\n[Loaded org.apache.xpath.compiler.FunctionTable from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n[Loaded org.apache.xpath.compiler.FuncLoader from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n[Loaded org.apache.xpath.functions.Function from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n[Loaded org.apache.xml.security.transforms.implementations.FuncHere]\n[Loaded org.apache.xpath.compiler.Keywords from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n[Loaded java.lang.IllegalAccessError from c:\\devtools\\j2sdk1.4.2_02\n\\jre\\lib\\rt.jar]\n\nThe stack trace above was run from a test which started Thu Oct 13 09:04:06, \nso it would have seemed that the classes are loaded at the time the test is \nstarted.\n\n(c) The other thing that is interesting is that I was able to turn on the \nxmlsecurity logging (we have a wrapper essentially piping the xmlsig log to \nour logger 'xmlsec'), and from the log, I saw these outputs:\n\nThu Oct 13 09:04:07 PDT 2005 (xmlsec:info:7511): Registering Here function\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): Registered class \norg.apache.xml.security.transforms.implementations.FuncHere for XPath \nfunction 'here()' function in internal table\n\nNow I looked at the source code for CachedXPathFuncHereAPI, and I looked at \nthe verbose:class output (shown here). I thought when CachedXPathFuncHereAPI \nis loaded (as shown by the verbose output), the static method \nfixupFunctionTable is called which is responsible for outputting the above \nlogging. So why am I not seeing FuncHere being loaded in the verbose output \nearlier on? And it really looks like FuncHere has not been loaded at that \ntime. CachedXPathFuncHereAPI is already loaded ealier on, so why is the static \nmethod fixupFunctionTable invoked at Thu Oct 13 09:04:07 given that the class \nhas already been loaded?\n\nHere's more context of the above logs.\n\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): check resolvability by class \norg.apache.xml.security.utils.resolver.ResourceResolver\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): State I can resolve \nreference: \"\"\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): ResolverFragment with empty \nURI (means complete document)\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): setElement\n(\"ds:Transforms\", \"file:/d:/ariba2/install/./\")\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): setElement\n(\"ds:Transform\", \"file:/d:/ariba2/install/./\")\nThu Oct 13 09:04:07 PDT 2005 (xmlsec:info:7511): Registering Here function\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): Registered class \norg.apache.xml.security.transforms.implementations.FuncHere for XPath \nfunction 'here()' function in internal table\n[Loaded com.jclark.xml.tok.PartialCharException]\n[Loaded com.jclark.xml.tok.UTF8Encoding]\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): setElement\n(\"xf:XPath\", \"file:/d:/ariba2/install/./\")\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): Request for URI \nhttp://www.w3.org/2000/09/xmldsig#sha1\nThu Oct 13 09:04:07 PDT 2005 () (xmlsec:debug): I was asked to create a \nResourceResolver and got 2\n ", "id": 81144, "time": "2005-10-13T19:24:14Z", "creator": "rwong@ariba.com", "creation_time": "2005-10-13T19:24:14Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 36921, "is_private": false, "text": "Sorry, correction from last response:\n\n\"So why am I not seeing FuncHere being loaded in the verbose output \nearlier on? And it really looks like FuncHere has not been loaded at that \ntime. CachedXPathFuncHereAPI is already loaded ealier on, so why is the static \nmethod fixupFunctionTable invoked at Thu Oct 13 09:04:07 given that the class \nhas already been loaded?\"\n\nWell, the verbose output did show FuncHere was loaded. Maybe I am not seeing \nthe xml security logging perhaps it was called too early for the logger to be \nturned on. If there were true, I still don't understand why the static \nfixupFunctionTable is called again. Classloader issues?", "id": 81145, "time": "2005-10-13T20:06:54Z", "creator": "rwong@ariba.com", "creation_time": "2005-10-13T20:06:54Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 36921, "is_private": false, "text": "Hi,\n\nWhat version of xalan does xmlsec 1.2.97 depend on? My test passed if I \nupgrade to xalan 2.6 (I was using xalan 2.2 before). Looking at the code, the \nFunctionTable implemenation is changed (it no longer calls Class.forName, but \ncalls java.lang.Class.newInstance).\n\nThanks,\nRaymond.", "id": 81163, "time": "2005-10-14T19:44:33Z", "creator": "rwong@ariba.com", "creation_time": "2005-10-14T19:44:33Z", "attachment_id": null}, {"count": 6, "attachment_id": null, "bug_id": 36921, "is_private": false, "id": 86771, "time": "2006-03-13T15:49:32Z", "creator": "sean.mullan@oracle.com", "creation_time": "2006-03-13T15:49:32Z", "tags": [], "text": "I would like to close this out. Your last comment said that upgrading to\nxalan 2.6 fixed the problem. I'll wait for any followup for a week or so before\nclosing."}, {"count": 7, "tags": [], "text": "Closing old bugs.", "is_private": false, "bug_id": 36921, "id": 91961, "time": "2006-08-06T17:39:30Z", "creator": "raul-info@r-bg.com", "creation_time": "2006-08-06T17:39:30Z", "attachment_id": null}]
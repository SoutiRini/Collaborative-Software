[{"count": 0, "tags": [], "text": "I have the following somewhat redundant .htaccess file in the directory /home/jan/public_html/rewrite_test\n\n<FilesMatch \"a\\.html\">\nRewriteEngine On\nRewriteBase /~jan/rewrite_test/\nRewriteRule (.*)a\\.html $1.html\n</FilesMatch>\n\nWithout the <FilesMatch> directive, this works perfectly. If we access http://localhost/~jan/rewrite_test/1a.html, it serves up the 1.html file instead.\n\nWith the <FilesMatch> directive, it fails. In the log file we see all going well until this happens:\n\n[Tue Dec 02 15:55:21.365666 2014] [rewrite:trace2] [pid 2020] mod_rewrite.c(475): [client ::1:58291] ::1 - - [localhost/sid#7f14dc162448][rid#7f14dbfbf0a0/initial] [perdir a\\\\.html/] trying to replace prefix a\\\\.html/ with /~jan/rewrite_test/\n\nWithout the <FilesMatch> it tries to replace the prefix \"/home/jan/public_html/rewrite_test/\", and that works fine. But the <FilesMatch> directive has confused it to the extent that it no longer seems to remember the directory prefix it is supposed to be replacing, and is using the argument from <FilesMatch>, \"a\\\\.html\\\" instead. (Possibly it is mistaking the <FilesMatch> block for a <Directory> block.)\n\nI'm not completely convinced it ever really makes a lot of sense to put Rewrite Rules inside a <FilesMatch> block, but it seems like it ought to work, and mostly it does except that RewriteBase breaks.", "attachment_id": null, "bug_id": 57298, "id": 179455, "time": "2014-12-02T21:46:58Z", "creator": "jan@unixpapa.com", "creation_time": "2014-12-02T21:46:58Z", "is_private": false}, {"attachment_id": null, "tags": [], "bug_id": 57298, "is_private": false, "count": 1, "id": 179470, "time": "2014-12-03T00:05:13Z", "creator": "covener@gmail.com", "creation_time": "2014-12-03T00:05:13Z", "text": "I had just looked at a related issue/limitation on trunk which as a result now requires RewriteBase to be explicitly specified less often, and as a bonus seems to fix this case even w/ a RewriteBase.\n\nCan you try a patch against 2.4.x?  http://svn.apache.org/r1642484\n\nIn various places, mod_rewrite strips/readds/re-strips the current perdir prefix.  In this case, even the original comparison in the rewriterule is wrong -- it's operating on the entire filename on-disk rather than whats normally just the \"remainder\"."}]
[{"count": 0, "tags": [], "text": "If CellStyle is copied from an existing Cell to a new Cell (like newCell.setCellStyle(oldCell.getCellStyle());  )\nsame style informations are not copied (like font color or border style).\n\nWhen using the same code at XSSF (e.g. newCell.setCellStyle(oldCell.getCellStyle());) it works fine and all style informations are present at newCell again.\n\nHere is what I am doing (see also attached example.xls):\nI am copying an existing row by the copyRow method (see later on). The original row was row Nr.3 (with blue text and border). Row Nr.2 (which is a copy of row nr.3) contains almost the same information as the original, except font color and border. If I am using the copyRow method at XSSF, it works fine.\n\n\n    private static void copyRow(Sheet worksheet, int sourceRowNum, int destinationRowNum)\n    {\n        // Get the source / new row\n        Row newRow = worksheet.getRow(destinationRowNum);\n        Row sourceRow = worksheet.getRow(sourceRowNum);\n        int numCellsPerRow = sourceRow.getLastCellNum();\n\n        // If the row exist in destination, push down all rows by 1 else create a new row\n        if (newRow != null)\n        {\n            worksheet.shiftRows(destinationRowNum, worksheet.getPhysicalNumberOfRows(), 1, true, true);\n            newRow = worksheet.createRow(destinationRowNum);\n        }\n        else\n        {\n            newRow = worksheet.createRow(destinationRowNum);\n        }\n\n        // Loop through source columns to add to new row\n        for (int i = 0; i < numCellsPerRow; i++)\n        {\n            // Grab a copy of the old/new cell\n            Cell oldCell = sourceRow.getCell(i, Row.CREATE_NULL_AS_BLANK);\n            Cell newCell = newRow.createCell(i);\n\n            // If the old cell is null jump to next cell\n            if (oldCell == null)\n            {\n                newCell = null;\n                continue;\n            }\n\n            // Use old cell style\n            newCell.setCellStyle(oldCell.getCellStyle());\n            \n            //-Alternative approach:\n            //-CellStyle newCellStyle = workbook.createCellStyle();\n            //-newCellStyle.cloneStyleFrom(oldCell.getCellStyle());\n            //-newCellStyle.setFont(workbook.getFontAt(oldCell.getCellStyle().getFontIndex()));\n            //-newCell.setCellStyle(newCellStyle);\n\n            // If there is a cell comment, copy\n            if (oldCell.getCellComment() != null)\n            {\n                newCell.setCellComment(oldCell.getCellComment());\n            }\n\n            // If there is a cell hyperlink, copy\n            if (oldCell.getHyperlink() != null)\n            {\n                newCell.setHyperlink(oldCell.getHyperlink());\n            }\n\n            // Set the cell data type\n            newCell.setCellType(oldCell.getCellType());\n\n            // Set the cell data value\n            switch (oldCell.getCellType())\n            {\n                case Cell.CELL_TYPE_BLANK:\n                    break;\n                case Cell.CELL_TYPE_BOOLEAN:\n                    newCell.setCellValue(oldCell.getBooleanCellValue());\n                    break;\n                case Cell.CELL_TYPE_ERROR:\n                    newCell.setCellErrorValue(oldCell.getErrorCellValue());\n                    break;\n                case Cell.CELL_TYPE_FORMULA:\n                    newCell.setCellFormula(oldCell.getCellFormula());\n                    break;\n                case Cell.CELL_TYPE_NUMERIC:\n                    newCell.setCellValue(oldCell.getNumericCellValue());\n                    break;\n                case Cell.CELL_TYPE_STRING:\n                    newCell.setCellValue(oldCell.getRichStringCellValue());\n                    break;\n            }\n        }\n    }", "attachment_id": null, "bug_id": 56959, "id": 177742, "time": "2014-09-11T11:40:58Z", "creator": "pschnappauf@web.de", "creation_time": "2014-09-11T11:40:58Z", "is_private": false}, {"attachment_id": null, "tags": [], "creator": "dominik.stadler@gmx.at", "is_private": false, "count": 1, "id": 183660, "time": "2015-06-20T14:45:23Z", "bug_id": 56959, "creation_time": "2015-06-20T14:45:23Z", "text": "I could not reproduce this via the following code with latest trunk, also the style is applied when I look at the file in LibreOffice. \n\n\n        // Create a new font and alter it.\n        Font font = wb.createFont();\n        font.setFontHeightInPoints((short)24);\n        font.setFontName(\"Courier New\");\n        font.setItalic(true);\n        font.setStrikeout(true);\n        font.setColor(Font.COLOR_RED);\n        \n        CellStyle style = wb.createCellStyle();\n        style.setBorderBottom(CellStyle.BORDER_DOTTED);\n        style.setFont(font);\n        \n        Cell cell = row.createCell(0);\n        cell.setCellStyle(style);\n        cell.setCellValue(\"testtext\");\n        \n        Cell newCell = row.createCell(1);\n        \n        newCell.setCellStyle(style);\n        newCell.setCellValue(\"2testtext2\");\n\n        CellStyle newStyle = newCell.getCellStyle();\n        assertEquals(CellStyle.BORDER_DOTTED, newStyle.getBorderBottom());\n        assertEquals(Font.COLOR_RED, ((HSSFCellStyle)newStyle).getFont(wb).getColor());\n\n\n\nIf this is still a problem for you, please reopen this bug with a sample file and a self-contained unit test which allows us to reproduce your problem."}]
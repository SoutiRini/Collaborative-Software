[{"count": 0, "tags": [], "bug_id": 45353, "attachment_id": 22222, "text": "Created attachment 22222\nExample referenced in the description\n\nNote: the version is 3.1-FINAL (but there is no selection for it in the Version field)\n\nWhen calculating a formula that has \"named\" cell references I get the following exception.\n\nException in thread \"main\" java.lang.ClassCastException: org.apache.poi.hssf.record.formula.eval.NameEval cannot be cast to org.apache.poi.hssf.record.formula.eval.ValueEval\n\tat org.apache.poi.hssf.record.formula.eval.NumericOperationEval.singleOperandEvaluate(NumericOperationEval.java:62)\n\tat org.apache.poi.hssf.record.formula.eval.AddEval.evaluate(AddEval.java:67)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.invokeOperation(HSSFFormulaEvaluator.java:473)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateCell(HSSFFormulaEvaluator.java:386)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.internalEvaluate(HSSFFormulaEvaluator.java:338)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateFormulaCell(HSSFFormulaEvaluator.java:183)\n\tat org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator.evaluateAllFormulaCells(HSSFFormulaEvaluator.java:278)\n\tat NamedCellTest.main(NamedCellTest.java:20)\n\nI've provided two examples:\n\n* named-cell-test has one named cell and a second cell getting its value (=NAME)\n* named-cell-in-formula-test has two named cells and a third adding them together (=sum(name1+name2))", "id": 118338, "time": "2008-07-07T09:43:50Z", "creator": "bsneade+apache@gmail.com", "creation_time": "2008-07-07T09:43:50Z", "is_private": false}, {"count": 1, "tags": [], "creator": "apache@gagravarr.org", "text": "Currently, named cell references are not supported\n\nJosh tells me it's something he hopes to add support for at some point, but there's no ETA as yet.", "id": 118505, "time": "2008-07-10T14:58:08Z", "bug_id": 45353, "creation_time": "2008-07-10T14:58:08Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "bsneade+apache@gmail.com", "attachment_id": null, "id": 118560, "time": "2008-07-11T06:50:09Z", "bug_id": 45353, "creation_time": "2008-07-11T06:50:09Z", "is_private": false, "text": "Ah, thanks for the help anyways.  I ended up rewriting all the name references before processing the formulas.  Its not very elegant, but here is the code I used as the workaround:\n\nprotected void rewriteFormulas(final HSSFWorkbook workbook) {\n    // build up a cache of names\n    // this is just an easy way of fetching the HSSFName based on the string\n    // representation of the name\n    final Map<String, HSSFName> nameCache = new HashMap<String, HSSFName>(\n            workbook.getNumberOfNames());\n    for (int i = 0; i < workbook.getNumberOfNames(); i++) {\n        final HSSFName name = workbook.getNameAt(i);\n        nameCache.put(name.getNameName(), name);\n    }\n    // remove all the sheet names from the name references, having the sheet\n    // names around messes up the formulas\n    for (int i = 0; i < workbook.getNumberOfSheets(); i++) {\n        nameCache.remove(workbook.getSheetName(i));\n    }\n    LOG.info(\"Names: \" + nameCache.keySet());\n\n    // loop over all the cells and rewrite the formula ones\n    for (int sheetCount = 0; sheetCount < workbook.getNumberOfSheets(); sheetCount++) {\n        final HSSFSheet sheet = workbook.getSheetAt(sheetCount);\n        for (final Iterator rowIterator = sheet.rowIterator(); rowIterator\n                .hasNext();) {\n            final HSSFRow row = (HSSFRow) rowIterator.next();\n            for (final Iterator cellIterator = row.cellIterator(); cellIterator\n                    .hasNext();) {\n                final HSSFCell cell = (HSSFCell) cellIterator.next();\n                if (cell.getCellType() == HSSFCell.CELL_TYPE_FORMULA) {\n                    String formula = cell.getCellFormula();\n                    for (final String name : nameCache.keySet()) {\n                        final Pattern pattern = Pattern.compile(\"(\\\\W|^)\"\n                                + name + \"(\\\\W|$)\",\n                                Pattern.CASE_INSENSITIVE);\n                        final HSSFName hssfName = nameCache.get(name);\n                        formula = pattern.matcher(formula).replaceAll(\n                                \"$1\"\n                                        + hssfName.getReference().replace(\n                                                \"$\", \"\\\\$\") + \"$2\");\n                    }\n                    LOG.info(\"Resetting Cell (\" + cell.toString()\n                            + \") Formula:\" + formula);\n                    cell.setCellFormula(formula);\n                } // end if\n            } // end for\n        } // end for\n    } // end for\n}\n\nThis seems to work with the formulas I was able to test.  Unfortunatly I've had to abandon this effort because of performance problems with the HSSFFormulaEvaluator (I'll submit another ticket for that)."}, {"count": 3, "tags": [], "bug_id": 45353, "attachment_id": null, "text": "This seems to nowadays as I could not reproduce this any more, please reopen with more information if this is still a problem for you.", "id": 197147, "time": "2017-02-18T21:33:56Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2017-02-18T21:33:56Z", "is_private": false}]
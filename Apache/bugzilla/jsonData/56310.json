[{"count": 0, "text": "Currently calls to getPooledConnection() and getXAConnection on the pooled DataSource return the same handler as calls to getConnection().\n\nThis does not correctly implement these interfaces.\n\nPer the documentation (http://docs.oracle.com/javase/6/docs/api/javax/sql/PooledConnection.html):\n\n\"A PooledConnection object represents a physical connection to a data source\"\n\nand the documentation for the close method:\n\n\"Closes the physical connection that this PooledConnection object represents. An application never calls this method directly; it is called by the connection pool module, or manager.\"\n\nThe getPooledConnection() and getXAConnection() methods should return the physical connection provided by the driver (if it implements the interface), wrapped in a handler that will provide the pool handler when the getConnection() method is called.\n\nFor example, getPooledConnection().getConnection().close() should return the connection to the pool, not close the physical connection.", "bug_id": 56310, "is_private": false, "id": 174071, "time": "2014-03-25T15:18:21Z", "creator": "jonathan.d.pierce@chase.com", "creation_time": "2014-03-25T15:18:21Z", "tags": [], "attachment_id": null}, {"count": 1, "tags": [], "text": "(In reply to Jonathan Pierce from comment #0)\n> For example, getPooledConnection().getConnection().close() should return the\n> connection to the pool, not close the physical connection.\n\nhttp://docs.oracle.com/javase/7/docs/api/javax/sql/ConnectionPoolDataSource.html#getPooledConnection()\n\n-> Attempts to establish a physical database connection that can be used as a pooled connection.\n\n\nhttp://docs.oracle.com/javase/7/docs/api/javax/sql/PooledConnection.html#getConnection()\n\n-> Creates and returns a Connection object that is a handle for the physical connection that this PooledConnection object represents. \n\n\nJonathan, thank you for your report. Overall, I do believe that the fix is that \norg.apache.tomcat.jdbc.pool.DataSource should NOT implement the javax.sql.ConnectionPoolDataSource interface.\n\nThe ConnectionPoolDataSource/PooledConnection interface are to be used by pool, instead of being provided by pool.\n\n\"An application programmer does not use the PooledConnection interface directly; rather, it is used by a middle tier infrastructure that manages the pooling of connections.\"\n\nI'd like to learn more about your use case, and why it is using that interface at all.", "is_private": false, "bug_id": 56310, "id": 174123, "time": "2014-03-26T22:19:50Z", "creator": "fhanik@apache.org", "creation_time": "2014-03-26T22:19:50Z", "attachment_id": null}, {"attachment_id": null, "tags": [], "bug_id": 56310, "is_private": false, "count": 2, "id": 174215, "time": "2014-04-02T11:16:44Z", "creator": "jonathan.d.pierce@chase.com", "creation_time": "2014-04-02T11:16:44Z", "text": "Filip,\n\nSorry for my delayed response.  I believe you are correct that the tomcat-jdbc library need not directly expose the PooledConnection interface, as the interface is designed to only be used by connection pooling containers/libraries.\n\nHowever, my particular use case is with XADataSource and XAConnection.  The XAConnection interface extends the PooledConnection interface, so I ran into the problem there. The expectation is that only special XA handling logic will use the XAConnection and when it is complete it will call XAConnection.getConnection() to acquire a Connection object, which gets passed to the standard JDBC logic.\n\nI do think it makes sense for the tomcat-jdbc library to expose the XA interfaces. So I think a fix may be in order, so that XAConnection.getConnection() returns a proxy on the physical connection (Connection interface) which when closed will return the the Connection to the pool."}]
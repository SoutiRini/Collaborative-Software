[{"count": 0, "attachment_id": null, "creator": "totallyhosed@yahoo.com", "is_private": false, "id": 36634, "time": "2003-05-04T18:30:29Z", "bug_id": 19630, "creation_time": "2003-05-04T18:30:29Z", "tags": [], "text": "When compiling many C# source files using the <csc> .Net task, an error with \nthe following description is generated:  \"The following character string is too \nlong.\" What follows the error message is a complete dump of all the options, \nincluding a list of the source files to be compiled, to csc.exe. The problem is \nthat each source file to be compiled is listed individually as a parameter to \ncsc.exe. If \"too many\" files are to be compiled and thus listed, this error \noccurs. I believe this is some limitation of the Windows command shell."}, {"count": 1, "tags": [], "creator": "stevel@apache.org", "attachment_id": null, "id": 37693, "time": "2003-05-23T21:04:35Z", "bug_id": 19630, "creation_time": "2003-05-23T21:04:35Z", "is_private": false, "text": "aah. \nThe good fix would be to modify ..dotnet.NetCommand.java to be able to save the\ncommand options to a temp file and then drive the .NET commands with @filename,\nas they all support this mechanism.\n\nThat way an explicit list works, and avoids cmdline issues. I'll try and get\naround to this, unless you want to get in there first."}, {"count": 2, "attachment_id": null, "creator": "stevel@apache.org", "is_private": false, "id": 46203, "time": "2003-10-24T05:43:12Z", "bug_id": 19630, "creation_time": "2003-10-24T05:43:12Z", "tags": [], "text": "*** Bug 24061 has been marked as a duplicate of this bug. ***"}, {"count": 3, "tags": [], "text": "Fixed in CVS, will be in next Ant1.6 release. ", "attachment_id": null, "bug_id": 19630, "id": 46204, "time": "2003-10-24T05:58:26Z", "creator": "stevel@apache.org", "creation_time": "2003-10-24T05:58:26Z", "is_private": false}]
[{"text": "If we set \n\nJkOptions -FlushHeader\nJkOptions +FlushPackets \n\nthen Content-Length header is removed from HEAD requests.\nThe HEAD request is served by the tomcat in this case and it\nsends the content-length header to mod-jk. The header is \napparently removed because ws_flush() is not called from \ntomcat-connectors-1.2.21-src\\native\\common\\jk_ajp_common.c\najp_process_callback() due to following conditions.\n(See code marked with ==> <==)\n\ncase JK_AJP13_SEND_HEADERS:\n        {\n            jk_res_data_t res;\n            if (!ajp_unmarshal_response(msg, &res, ae, l)) {\n                jk_log(l, JK_LOG_ERROR,\n                       \"ajp_unmarshal_response failed\");\n                JK_TRACE_EXIT(l);\n                return JK_AJP13_ERROR;\n            }\n            r->start_response(r, res.status, res.msg,\n                              (const char *const *)res.header_names,\n                              (const char *const *)res.header_values,\n                              res.num_headers);\n            if (r->flush && r->flush_header) /** ==> JkOptions -FlushHeader <== **/\n                r->flush(r);\n            r->http_response_status = res.status;\n        }\n        return JK_AJP13_SEND_HEADERS;\n\ncase JK_AJP13_END_RESPONSE:\n        ae->reuse = (int)jk_b_get_byte(msg);\n        if (!ae->reuse) {\n            /*\n             * AJP13 protocol reuse flag set to false.\n             * Tomcat will close its side of the connection.\n             */\n            jk_log(l, JK_LOG_WARNING, \"AJP13 protocol: Reuse is set to false\");\n        }\n        else if (r->disable_reuse) {\n            if (JK_IS_DEBUG_LEVEL(l)) {\n                jk_log(l, JK_LOG_DEBUG, \"AJP13 protocol: Reuse is disabled\");\n            }\n            ae->reuse = JK_FALSE;\n        }\n        else {\n            /* Reuse in all cases */\n            if (JK_IS_DEBUG_LEVEL(l)) {\n                jk_log(l, JK_LOG_DEBUG, \"AJP13 protocol: Reuse is OK\");\n            }\n            ae->reuse = JK_TRUE;\n        }\n        /* Flush after the last write */\n        if (r->flush && !r->flush_packets) /** ==> JkOptions +FlushPackets <== **/\n            r->flush(r);\n\n        JK_TRACE_EXIT(l);\n        return JK_AJP13_END_RESPONSE;\n        break;\n\nFrom the source code, I can see that flush_packets is added since mod_jk 1.2.14\nand flush_headers is added since 1.2.20. So prior to version 1.2.14,\ncontent-length was missing in HEAD requests. After 1.2.14, it started working\nbecause flush_packets parameter was false by default.", "tags": [], "bug_id": 42269, "is_private": false, "count": 0, "id": 102523, "time": "2007-04-26T15:31:45Z", "creator": "sameergn@yahoo.com", "creation_time": "2007-04-26T15:31:45Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 42269, "attachment_id": null, "is_private": false, "id": 106387, "time": "2007-08-06T08:13:21Z", "creator": "rainer.jung@kippdata.de", "creation_time": "2007-08-06T08:13:21Z", "text": "Seems to be working in the dev snapshot of 1.2.25."}]
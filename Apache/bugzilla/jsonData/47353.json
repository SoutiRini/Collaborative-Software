[{"count": 0, "tags": [], "creator": "john@metanate.com", "attachment_id": null, "is_private": false, "id": 127879, "time": "2009-06-11T08:08:31Z", "bug_id": 47353, "creation_time": "2009-06-11T08:08:31Z", "text": "When canonicalizing a subsection of an XML file using a XSECC14n20010315 canonicalizer, if the section is set via setXPathMap and the elements in the XPath set have no namespace prefix but are in a namespace defined on a parent element in the original document then the canonicalized output is incorrect.\n\nFor example, given the following XML:\n\n<Document xmlns=\"http://www.example.com/document\">\n  <Data id=\"data1\">\n    <FileName>image.jpeg</FileName>\n    <FileType>image/jpeg</FileType>\n  </Data>\n</Document>\n\nif an enveloped signature transform is applied to #data1 (ignoring for now the lack of signature there...), the result of canonicalization with xml-security-c is:\n\n<Data xmlns=\"http://www.example.com/document\" id=\"data1\">\n    <FileName xmlns=\"http://www.example.com/document\">image.jpeg</FileName>\n    <FileType xmlns=\"http://www.example.com/document\">image/jpeg</FileType>\n  </Data>\n\nbut it should be:\n\n<Data xmlns=\"http://www.example.com/document\" id=\"data1\">\n    <FileName>image.jpeg</FileName>\n    <FileType>image/jpeg</FileType>\n  </Data>\n\nI will attach a test program and sample file which demonstrate this."}, {"count": 1, "tags": [], "bug_id": 47353, "text": "Created attachment 23794\nTest case which demonstrates the buggy behaviour", "id": 127881, "time": "2009-06-11T08:09:33Z", "creator": "john@metanate.com", "creation_time": "2009-06-11T08:09:33Z", "is_private": false, "attachment_id": 23794}, {"count": 2, "tags": [], "creator": "john@metanate.com", "attachment_id": 23795, "is_private": false, "id": 127882, "time": "2009-06-11T08:11:35Z", "bug_id": 47353, "creation_time": "2009-06-11T08:11:35Z", "text": "Created attachment 23795\nTest file for use with the above program\n\nThis file can be used to test behaviour with the above test program as follows:\n\n./test test.xml data1 test.out\n\nThe signature and digest are certainly corrupt and incorrect, but it suffices for demonstrating the problem."}, {"count": 3, "tags": [], "creator": "john@metanate.com", "text": "I was about to attach the same patch I posted to the mailing list at http://article.gmane.org/gmane.text.xml.security.devel/6707 but I've thought about it a bit more and I think the correct solution probably involves a change in XSECXMLNSStack::printNamespace. The problem is that namespace attribute nodes for the default namespace prefix (i.e. no prefix) are never marked as printed, but in fact they are and don't need to be printed again.\n\nI assume that there's a good reason why they aren't marked as printed though, so I doubt it is as simple as removing the m_isDefault check.", "id": 127883, "attachment_id": null, "bug_id": 47353, "creation_time": "2009-06-11T08:21:56Z", "time": "2009-06-11T08:21:56Z", "is_private": false}, {"count": 4, "tags": [], "creator": "cantor.2@osu.edu", "attachment_id": null, "is_private": false, "id": 127884, "time": "2009-06-11T08:32:43Z", "bug_id": 47353, "creation_time": "2009-06-11T08:32:43Z", "text": "That's why I'm reluctant to fix it, since I didn't write any of the code. Let me see if we can poke Berin about it and have him review it."}, {"count": 5, "tags": [], "creator": "cantor.2@osu.edu", "attachment_id": null, "text": "Confirmed with latest (soon to be 1.5.0) code and without Xalan.\n\nDoesn't occur if the canonicalizer is run directly on the marked element, so definitely requires the XPath \"simulation\" code introduced by the transform to illustrate the bug.", "id": 127937, "time": "2009-06-13T10:28:31Z", "bug_id": 47353, "creation_time": "2009-06-13T10:28:31Z", "is_private": false}, {"count": 6, "tags": [], "creator": "cantor.2@osu.edu", "is_private": false, "id": 127938, "attachment_id": null, "bug_id": 47353, "creation_time": "2009-06-13T13:12:19Z", "time": "2009-06-13T13:12:19Z", "text": "After trying to understand the code, you're definitely correct that the fix isn't going to be just removing the check inside the printNamespace method.\n\nMy reading of the algorithm is that there's a very complex set of interactions between the namespace stack and the logic to handle default namespaces. The point of the stack is return the set of \"in scope\" namespaces that haven't been printed yet. The isDefault flag is used to ensure that the default namespace in scope is always returned by the stack, even if it's actually been printed.\n\nThat in turn causes the stack-based output logic to see a non-empty default declaration and set the xmlnsFound flag to true, which then *prevents* the code down below that might output xmlns=\"\" from running.\n\nAltering the printNamespace logic causes it to skip the default namespace declaration in the stack, never returning it, which then skips the code that notices it's in scope. At that point the xmlns=\"\" logic runs, and because it finds the non-empty default declaration up above in the tree, it outputs xmlns=\"\", which obviously is incorrect.\n\nWithout a total overhaul, I would have to assume that your original patch is closer to the mark, even though I have no way to know what interactions that might cause.\n\nAlternatively, something would need to be added to the stack interface to allow the xmlns=\"\" logic to use it even if the first/next methods don't return the default declaration, which would in turn fix the extra printing you're seeing."}, {"count": 7, "tags": [], "creator": "cantor.2@osu.edu", "is_private": false, "id": 129004, "attachment_id": null, "bug_id": 47353, "creation_time": "2009-07-20T14:12:31Z", "time": "2009-07-20T14:12:31Z", "text": "Fix in subversion:\nhttp://svn.apache.org/viewvc?view=rev&revision=796012"}]
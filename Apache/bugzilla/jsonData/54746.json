[{"count": 0, "tags": [], "bug_id": 54746, "is_private": false, "text": "See the exception below. I attempted to call getUserProperties() in a method annotated @OnClose. Here is what the WebSocket spec says about this:\n\n[quote]Once the session is closed, it is no longer valid for use by applications. Calling any of its methods (with the exception of the close() methods) once the session has been closed will result in an {@link java.lang.IllegalStateException} being thrown. Developers should retrieve any information from the session during the {@link Endpoint#onClose } method.[/quote]\n\nThis clearly indicates that it is valid to \"retrieve any information from the session\" DURING the call to onClose. Therefore, this exception should not have been thrown.\n\nSEVERE: Failed to call onError method of POJO end point for POJO of type [com.wrox.chat.ChatEndpoint]\njava.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:487)\n\tat org.apache.tomcat.websocket.pojo.PojoEndpointBase.onError(PojoEndpointBase.java:127)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.onError(WsHttpUpgradeHandler.java:139)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$300(WsHttpUpgradeHandler.java:42)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onError(WsHttpUpgradeHandler.java:197)\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:183)\n\tat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:169)\n\tat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:94)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:618)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1581)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1537)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\nCaused by: java.lang.IllegalStateException: The WebSocket session has been closed and no method (apart from close()) may be called on a closed session\n\tat org.apache.tomcat.websocket.WsSession.checkState(WsSession.java:504)\n\tat org.apache.tomcat.websocket.WsSession.getUserProperties(WsSession.java:455)\n\tat com.wrox.chat.ChatEndpoint.onError(ChatEndpoint.java:154)\n\t... 18 more", "id": 166117, "time": "2013-03-24T01:37:16Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-03-24T01:37:16Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 54746, "is_private": false, "text": "More information here: http://java.net/jira/browse/WEBSOCKET_SPEC-174", "id": 166118, "time": "2013-03-24T01:45:31Z", "creator": "nicholas@nicholaswilliams.net", "creation_time": "2013-03-24T01:45:31Z", "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 54746, "is_private": false, "text": "That is error handling rather than a normal close. If you are going to try and access the session from an error handler you need to take account of the fact that the container may already have closed the connection in response to the error or, equally, that the error could be that the connection was dropped by the client / network / take your pick.", "id": 166140, "time": "2013-03-25T17:48:11Z", "creator": "markt@apache.org", "creation_time": "2013-03-25T17:48:11Z", "attachment_id": null}, {"count": 3, "attachment_id": null, "creator": "nicholas@nicholaswilliams.net", "is_private": false, "id": 166631, "time": "2013-04-15T16:15:05Z", "bug_id": 54746, "creation_time": "2013-04-15T16:15:05Z", "tags": [], "text": "I understand your point that this happens in onError and not onClose (my bad for mis-reporting), but I think that highlights a problem with the spec. I have commented on http://java.net/jira/browse/WEBSOCKET_SPEC-174 to request further clarification, and request that this Bugzilla remain open until the spec issue is further clarified."}, {"count": 4, "attachment_id": null, "creator": "markt@apache.org", "text": "The final WebSocket spec is very clear on the required behaviour and this is what Tomcat implements.\n\nI've looked through the code and the only time I can find where Endpoint.onError() is called after the session has been closed is if for the following sequence of events:\n- Server receives close message\n- server fires session.onClose()\n- session is marked as closed\n- server echos close message back to the client\n- the sending of that message fails\n\nThis is easily detected via the onOpen() method of the session and isn't - given that as far as the app is concerned it was a normal shutdown - something I am too concerned about. It could be argued that it would be reasonable in this case to just swallow the error. It would be useful to get some clarity on this from the EG but I don't see it as a bug issue.\n\nI also took a look at how things like network errors are handled. In that case onClose() is triggered with a suitable close code.\n\nIf you have a test case (other than the one above) that demonstrates onClose() being called before onError() I'd be happy to take look. Just re-open this and provide some steps to reproduce.", "id": 167037, "time": "2013-05-04T20:42:24Z", "bug_id": 54746, "creation_time": "2013-05-04T20:42:24Z", "tags": [], "is_private": false}]
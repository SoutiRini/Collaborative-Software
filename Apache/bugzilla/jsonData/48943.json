[{"count": 0, "tags": [], "bug_id": 48943, "is_private": false, "text": "Created attachment 25151\nJMeter Test Plan used to reproduce this bug.\n\n1. Create a new JMeter Test Plan\n\n2. Add a Thread Group and set:\nNumber of Threads=1\nLoop Count=5\n\n3. Add a Bean Shell sampler to your Thread Group and in the \"Script\" section add the following two lines:\n//${__StringFromFile(Values.txt,readValues)}\nSystem.out.println(\"___ \" + \"${readValues}\" + \"___ \")\n\n4. Add a Simple Config Element to your Thread Group.\n\n5. Save the Test Plan in the {JMETER_HOME}/bin folder.\n\n6. Create a txt file called \"Values.txt\" in the {JMETER_HOME}/bin folder.\n\n7. Fill in at least 10 lines in the file with some values (E.g. : numbers from 0 to 9).\n\n8. Save the text file and close it.\n\n9. Open your previous created JMeter test plan and run the test.\n\nExpected result:\nOn the command window that opens with JMeter you can see the output of the test. We are expecting to see the first 5 values (5 lines) from the txt file.\n\nActual result:\nAfter JMeter reads a line from the file, it will skip the next line. So, you will have displayed the lines 1,3,5,7,9.\nIf you disable the Simple Config Element and run the test again, you will notice that the behavior is the expected one.\nAlso, this only reproduces when using loops. If you put, for example, 5 threads and 1 loop, the values will be correctly displayed.\n\nI attached to this bug a test plan and a data file that can be used to reproduce this bug, so you don't have to build your test again. Just unzip the files in the {JMETER_HOME}/bin folder and run the test.", "id": 135461, "time": "2010-03-19T08:48:43Z", "creator": "radu.leterna@softvision.ro", "creation_time": "2010-03-19T08:48:43Z", "attachment_id": 25151}, {"count": 1, "tags": [], "bug_id": 48943, "text": "Changing priority since this is a very important problem for our project.", "id": 135957, "time": "2010-04-08T08:42:00Z", "creator": "radu.leterna@softvision.ro", "creation_time": "2010-04-08T08:42:00Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "Sorry, but the priority is used to indicate the effect of the bug on the general behaviour of JMeter.\n\nI don't know how long it will take to fix this, so I suggest you try using the CSV Dataset Config element to try reading the file.", "id": 135960, "time": "2010-04-08T12:13:57Z", "bug_id": 48943, "creation_time": "2010-04-08T12:13:57Z", "is_private": false}, {"count": 3, "tags": [], "text": "Hello,\nThe issue occurs because ConfigTestElement ends up setting temporaryProperties in AbstractTestElement#temporaryProperties which is not null anymore.\n\n\nThen during the call of JMeterThread#notifyTestListeners, we end up\n calling recoverRunningVersion on each TestElement.\nThis method does this:\n=> if (isTemporary(prop)) {\n                iter.remove();\n                clearTemporary(prop);\n            }\n\n\nisTemporary calls :\ntemporaryProperties.contains(property);\n\nThis one ends up calling FunctionProperty#hashCode which call super.hashCode => \nAbstractProperty#hashCode which call getStringValue() which \n executes the BeanShell script again through this condition:\nif (iter > testIteration || cacheValue == null) {\n            testIteration = iter;\n            cacheValue = function.execute();\n        }\n\n=> Which leads to the issue.\nexecute is called outside of Sampling.\n\nSo this issue could occur as long as setTemporary is called on AbstractTestElement, so it is a big issue I think.\n\n\n\nNow for the fix, I don't have the full code history, but I think that fix should be in:\n- hashCode \n\nI find it strange that equals and hashCode does not work on same datas.\n\nPlease find a patch but have a critical review of it.\nI tested on submitted case and it works.\n\nRegards\nPhilippe Mouawad", "is_private": false, "bug_id": 48943, "id": 149079, "time": "2011-09-07T17:13:17Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-07T17:13:17Z", "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 48943, "text": "Created attachment 27468\nPatch to FunctionProperty#hashCode\n\nPatch as described in previous comment", "id": 149081, "time": "2011-09-07T17:18:00Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-07T17:18:00Z", "is_private": false, "attachment_id": 27468}, {"count": 5, "tags": [], "text": "I think Bug should be renamed, FunctionProperty#function is reexecuted abusively by hashCode if inside a loop controller.", "is_private": false, "id": 149083, "creator": "p.mouawad@ubik-ingenierie.com", "time": "2011-09-07T17:23:29Z", "bug_id": 48943, "creation_time": "2011-09-07T17:23:29Z", "attachment_id": null}, {"count": 6, "tags": [], "bug_id": 48943, "text": "Created attachment 27469\nValues.txt that work\n\nInitial Values.txt makes parse error failures.\nThis one is OK.", "id": 149085, "time": "2011-09-07T18:59:21Z", "creator": "p.mouawad@ubik-ingenierie.com", "creation_time": "2011-09-07T18:59:21Z", "is_private": false, "attachment_id": 27469}, {"count": 7, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "text": "Thanks for the analysis; looks good.\n\nA different approach might be to change the parent hashCode() and equals() to use getObjectValue() instead, as that does not execute functions.\n\nIndeed, does it make sense to use a hash and equals methods that can vary between invocations for the same object?\n\nOr possibly even drop the methods entirely and rely on Object equals and hashCode?\n\nNeed to do some testing to see whether distinct Property objects need to compare equal.", "id": 149092, "time": "2011-09-07T23:41:05Z", "bug_id": 48943, "creation_time": "2011-09-07T23:41:05Z", "is_private": false}, {"count": 8, "tags": [], "creator": "sebb@apache.org", "text": "The unit tests still work if equals and hashCode in AbstractProperty are changed to use getObjectValue(), and that also fixes the issue whereby values are skipped because the function is evaluated when it should not be.\n\nUsing the object value also avoids the string conversions that are otherwise done.\n\nSo although your fix works, I think it would be better to fix the parent class.\n\nBTW, a simpler test is to just use:\n\nSystem.out.println(\"${__counter(FALSE)}\");", "id": 149206, "time": "2011-09-14T09:50:33Z", "bug_id": 48943, "creation_time": "2011-09-14T09:50:33Z", "is_private": false, "attachment_id": null}, {"count": 9, "tags": [], "text": "Curiously, I have so far been unable to provoke the issue with anything but the BeanShell sampler.\n\nEven when this is fixed, however, using a function call in a test element Name field is likely to cause spurious function evaluations. Not sure why this is.", "is_private": false, "id": 149211, "creator": "sebb@apache.org", "time": "2011-09-14T11:11:32Z", "bug_id": 48943, "creation_time": "2011-09-14T11:11:32Z", "attachment_id": null}, {"count": 10, "tags": [], "creator": "sebb@apache.org", "attachment_id": null, "is_private": false, "id": 149214, "time": "2011-09-14T13:10:29Z", "bug_id": 48943, "creation_time": "2011-09-14T13:10:29Z", "text": "More general subject"}, {"count": 11, "tags": [], "bug_id": 48943, "text": "Fixed in SVN\n\nURL: http://svn.apache.org/viewvc?rev=1170595&view=rev\nLog:\nBug 48943 - Functions are invoked additional times when used in combination with a Config Element\n\nModified:\n   jakarta/jmeter/trunk/bin/testfiles/BatchTestLocal.csv\n   jakarta/jmeter/trunk/bin/testfiles/BatchTestLocal.jmx\n   jakarta/jmeter/trunk/bin/testfiles/BatchTestLocal.xml\n   jakarta/jmeter/trunk/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java\n   jakarta/jmeter/trunk/xdocs/changes.xml", "id": 149215, "time": "2011-09-14T13:18:33Z", "creator": "sebb@apache.org", "creation_time": "2011-09-14T13:18:33Z", "is_private": false, "attachment_id": null}]
[{"count": 0, "tags": [], "bug_id": 33629, "attachment_id": null, "text": "Our application uses the Tomcat deployer to do hot redeployment of webapps as\npart of a production system. As we are constrained to run Tomcat on Windows, we\nturned the antiResourceLocking flag on (see Tomcat FAQ for Windows), having\ntried the antiJARLocking flag previously and found it wasn't powerful enough\n(Tomcat was sometimes failing to completely undeploy webapps).\n\nThe problem: we discovered that running with antiResourceLocking=true,\nantiJARLocking=false introduced a huge leak of memory and file handles when\nredeploying (a linear increase with number of deployments), caused by the Tomcat\nJVM retaining handles to all of the .jar files in the tomcat\\temp\\ directory.\nThis also led to a huge 'disk space' leak, with several Gigabytes of old webapps\nhanging around in the \\temp\\ directory after a few hundred redeploys. The\nincrease in memory and handles was not present before the antiResourceLocking\noption was turned on.\n\nWe are using Struts, and have been able to replicate this behaviour with the\nelementary struts-blank.war webapp, using Tomcat's own manager app to repeatedly\nstart and stop the app. (Tomcat is running on Windows XP SP2)\n\nWe tried keeping antiResourceLocking on and setting antiJARLocking=true as well.\nThis meant that all the handles were released and we could delete the remaining\njars from the \\temp\\ folder externally immediately after undeploy - great! But\nthere are still two problems with this solution:\n\n   1) The Tomcat Windows FAQ says 'The antiResourceLocking attribute should not\nbe used at the same time as the antiJARLocking attribute.' This suggests\nsomething bad happens if you use both - is this really true? If not, the\ndocumentation should be changed. Something bad DEFINATELY happens if you DON'T\nuse them together! ;o)\n\n   2) Although the file handles all seem to be released, the files still don't\nget deleted. I suspect this may be because it takes a moment for the handles to\nbe released, and the deletion has been tried and failed before this point. This\nis a serious problem - after running my stress test app overnight I came in to\nfind that tomcat had fallen over after eating up all 16GB of free disk space!\nOur solution has been a background 'reaper thread' that tries to delete the temp\ndirectories of undeployed apps that have not yet been deleted every few minutes\n- I think Tomcat should include a fix for this issue when antiResourceLocking is\nenabled, although I imagine there must be more elegant solutions than this!", "id": 71157, "time": "2005-02-18T10:53:43Z", "creator": "bjs@apama.com", "creation_time": "2005-02-18T10:53:43Z", "is_private": false}, {"count": 1, "text": "Sorry then, there is no solution. It's basically impossible to prevent webapps\nfrom leaking file descriptors, as you see with locked JARs. If you report good\nexperience with using both settings at the same time, then it's good and I can\nchange the docs, but that's all that I can do. What I meant is that I consider\nusing both settings useless (each one introduces a startup performance penalty\nfor the webapp), so I will change the documentation.\n \nNote that if \"antiJARLocking wasn't powerful enough\", then it explains your\nproblems deleting the files in temp. If the files eventually get unlocked, then\nit's good, but there's nothing I can do in Tomcat about that. I think you should\nrun periodic processes cleaning up leftover stuff in temp. Given the sequential\nnaming of the folders, this should be doable.\n\nThis cannot be addressed in Tomcat.", "bug_id": 33629, "attachment_id": null, "id": 71159, "time": "2005-02-18T11:44:41Z", "creator": "remm@apache.org", "creation_time": "2005-02-18T11:44:41Z", "tags": [], "is_private": false}, {"count": 2, "tags": [], "bug_id": 33629, "attachment_id": null, "id": 71162, "time": "2005-02-18T12:01:20Z", "creator": "bjs@apama.com", "creation_time": "2005-02-18T12:01:20Z", "is_private": false, "text": "OK cool. I don't think the antiResourceLocking flag is usable without\nantiJARLocking because of the massive handle leak, so it would be great if the\nFAQ made this clear, as well as the possible need for some sort of temp cleanup\nthread.\n\nI wonder whether the Tomcat release notes should include something about the\nWindows locking problem (and issues with the anti locking flags), as if you're\ndoing hot redeployment on Windows and you don't take appropriate action you're\ngoing to end up with some very serious bugs."}]
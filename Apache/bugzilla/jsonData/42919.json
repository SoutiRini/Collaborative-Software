[{"count": 0, "tags": [], "bug_id": 42919, "attachment_id": null, "text": "I have a very simple jmeter acceptance test script that writes errors to\nan Aggregate Report listener.  When I have 'Save As XML' turned OFF I\ndon't get anything in the Assertion Results Failure Message when the assertion \nthat fails in not the first assertion under the HTTP request in the jmx script.\nThe script is attached below.  The item failing in my test is the 'Error Page \nResponse Assertion'.  For Key Segment 5, the failure message does not print \nbecause the assertion is the second one listed.  For Key Segment 6, I moved \nthe assertion to be first and the message prints.\n\nI had this problem with JMeter 2.2.  I installed 2.3RC3 and I'm still having \nthe same problem.\n\nSample Output:\n\n1184683773703,2091,Key Segments 5 (client 9),200,OK,Main thread 1-1,false,,1437\n1184683775794,790,Key Segments 6 (client 9),200,OK,Main thread 1-1,false,Test \nfailed, text expected not to contain //error/error_pages.css/,1437\n\n\njmx script:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jmeterTestPlan version=\"1.2\" properties=\"1.8\">\n  <hashTree>\n    <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"Acceptance \nTest Plan\" enabled=\"true\">\n      <boolProp name=\"TestPlan.functional_mode\">false</boolProp>\n      <stringProp name=\"TestPlan.comments\"></stringProp>\n      <stringProp name=\"TestPlan.user_define_classpath\"></stringProp>\n      <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>\n      <elementProp name=\"TestPlan.user_defined_variables\" \nelementType=\"Arguments\" guiclass=\"ArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n        <collectionProp name=\"Arguments.arguments\">\n          <elementProp name=\"periodTypeKey\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">periodTypeKey</stringProp>\n            <stringProp name=\"Argument.value\">c1.periodType</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"sDateKey\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">sDateKey</stringProp>\n            <stringProp name=\"Argument.value\">c1.sDate</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"periodTypeValue\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">periodTypeValue</stringProp>\n            <stringProp name=\"Argument.value\">1</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"sDateValue\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">sDateValue</stringProp>\n            <stringProp name=\"Argument.value\">${__P(sDateValue)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"navigationID\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">navigationID</stringProp>\n            <stringProp name=\"Argument.value\">navigationID</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"confViewKey\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">confViewKey</stringProp>\n            <stringProp name=\"Argument.value\">confView</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"viewTypeKey\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">viewTypeKey</stringProp>\n            <stringProp name=\"Argument.value\">viewType</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"loopCount\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">loopCount</stringProp>\n            <stringProp name=\"Argument.value\">${__P(loopCount)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"threadCount\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">threadCount</stringProp>\n            <stringProp name=\"Argument.value\">${__P(threadCount)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"rampTime\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">rampTime</stringProp>\n            <stringProp name=\"Argument.value\">${__P(rampTime)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"configDir\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">configDir</stringProp>\n            <stringProp name=\"Argument.value\">${__P(configDir)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n          <elementProp name=\"configFile\" elementType=\"Argument\">\n            <stringProp name=\"Argument.name\">configFile</stringProp>\n            <stringProp name=\"Argument.value\">${__P(configFile)}</stringProp>\n            <stringProp name=\"Argument.metadata\">=</stringProp>\n          </elementProp>\n        </collectionProp>\n      </elementProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass=\"ThreadGroupGui\" testclass=\"ThreadGroup\" \ntestname=\"Main thread\" enabled=\"true\">\n        <boolProp name=\"ThreadGroup.scheduler\">false</boolProp>\n        <stringProp name=\"ThreadGroup.duration\"></stringProp>\n        <stringProp name=\"ThreadGroup.num_threads\">${threadCount}</stringProp>\n        <stringProp name=\"ThreadGroup.delay\"></stringProp>\n        <longProp name=\"ThreadGroup.start_time\">1116573111000</longProp>\n        <stringProp name=\"ThreadGroup.on_sample_error\">continue</stringProp>\n        <stringProp name=\"ThreadGroup.ramp_time\">${rampTime}</stringProp>\n        <elementProp name=\"ThreadGroup.main_controller\" \nelementType=\"LoopController\" guiclass=\"LoopControlPanel\" \ntestclass=\"LoopController\" testname=\"Loop Controller\" enabled=\"true\">\n          <boolProp name=\"LoopController.continue_forever\">false</boolProp>\n          <stringProp name=\"LoopController.loops\">1</stringProp>\n        </elementProp>\n        <longProp name=\"ThreadGroup.end_time\">1116573111000</longProp>\n      </ThreadGroup>\n      <hashTree>\n        <WhileController guiclass=\"WhileControllerGui\" \ntestclass=\"WhileController\" testname=\"While Controller\" enabled=\"true\">\n          <stringProp name=\"WhileController.condition\">${clientID}</stringProp>\n        </WhileController>\n        <hashTree>\n          <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" \ntestname=\"CSV Data Set Config\" enabled=\"true\">\n            <stringProp name=\"delimiter\">\\t</stringProp>\n            <boolProp name=\"recycle\">false</boolProp>\n            <stringProp name=\"filename\">${configDir}\n${configFile}.config</stringProp>\n            <stringProp \nname=\"variableNames\">clientID,clientType,username,password,hostName,port</strin\ngProp>\n            <stringProp name=\"fileEncoding\"></stringProp>\n          </CSVDataSet>\n          <hashTree/>\n          <IfController guiclass=\"IfControllerPanel\" testclass=\"IfController\" \ntestname=\"If valid clientType\" enabled=\"true\">\n            <stringProp name=\"IfController.condition\">&quot;${clientType}\n&quot;==&quot;hybrid&quot;||&quot;${clientType}\n&quot;==&quot;content&quot;||&quot;${clientType}\n&quot;==&quot;travel&quot;||&quot;${clientType}\n&quot;==&quot;finance&quot;||&quot;${clientType}\n&quot;==&quot;retail&quot;||&quot;${clientType}\n&quot;==&quot;SEM&quot;</stringProp>\n          </IfController>\n          <hashTree>\n            <ConfigTestElement guiclass=\"HttpDefaultsGui\" \ntestclass=\"ConfigTestElement\" testname=\"HTTP Request Defaults\" enabled=\"true\">\n              <stringProp name=\"HTTPSampler.domain\">${hostName}</stringProp>\n              <stringProp name=\"HTTPSampler.path\"></stringProp>\n              <stringProp name=\"HTTPSampler.port\">${port}</stringProp>\n              <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                <collectionProp name=\"Arguments.arguments\"/>\n              </elementProp>\n              <stringProp name=\"HTTPSampler.protocol\">HTTP</stringProp>\n            </ConfigTestElement>\n            <hashTree/>\n            <GenericController guiclass=\"LogicControllerGui\" \ntestclass=\"GenericController\" testname=\"Login requests\" enabled=\"true\"/>\n            <hashTree>\n              <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Login Request (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                  <collectionProp name=\"Arguments.arguments\">\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">true</boolProp>\n                      <stringProp name=\"Argument.name\">clientID</stringProp>\n                      <stringProp name=\"Argument.value\">${clientID}\n</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">true</boolProp>\n                      <stringProp name=\"Argument.name\">username</stringProp>\n                      <stringProp name=\"Argument.value\">${username}\n</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">true</boolProp>\n                      <stringProp name=\"Argument.name\">password</stringProp>\n                      <stringProp name=\"Argument.value\">${password}\n</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                  </collectionProp>\n                </elementProp>\n                <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                <stringProp name=\"HTTPSampler.port\"></stringProp>\n                <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                <stringProp name=\"HTTPSampler.method\">POST</stringProp>\n                <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>\n                <stringProp \nname=\"HTTPSampler.path\">marketforce/Login</stringProp>\n                <boolProp name=\"HTTPSampler.follow_redirects\">true</boolProp>\n                <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>\n                <boolProp name=\"HTTPSampler.use_keepalive\">true</boolProp>\n                <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>\n              </HTTPSampler2>\n              <hashTree>\n                <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"Error Page Response Assertion\" \nenabled=\"true\">\n                  <collectionProp name=\"Asserion.test_strings\">\n                    <stringProp name=\"-\n1225098100\">/error/error_pages.css</stringProp>\n                  </collectionProp>\n                  <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                  <intProp name=\"Assertion.test_type\">6</intProp>\n                  <stringProp \nname=\"Assertion.test_field\">Assertion.response_data</stringProp>\n                </ResponseAssertion>\n                <hashTree/>\n                <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"Not 200 Response Assertion\" \nenabled=\"true\">\n                  <collectionProp name=\"Asserion.test_strings\">\n                    <stringProp name=\"49586\">200</stringProp>\n                  </collectionProp>\n                  <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                  <intProp name=\"Assertion.test_type\">1</intProp>\n                  <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                </ResponseAssertion>\n                <hashTree/>\n                <DurationAssertion guiclass=\"DurationAssertionGui\" \ntestclass=\"DurationAssertion\" testname=\"Login Timeout\" enabled=\"true\">\n                  <stringProp \nname=\"DurationAssertion.duration\">120000</stringProp>\n                </DurationAssertion>\n                <hashTree/>\n              </hashTree>\n              <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Login Failed Test (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                  <collectionProp name=\"Arguments.arguments\">\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                      <stringProp name=\"Argument.name\">${periodTypeKey}\n</stringProp>\n                      <stringProp name=\"Argument.value\">${periodTypeValue}\n</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                      <stringProp name=\"Argument.name\">${sDateKey}</stringProp>\n                      <stringProp name=\"Argument.value\">${sDateValue}\n</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                      <stringProp name=\"Argument.name\">${navigationID}\n</stringProp>\n                      <stringProp \nname=\"Argument.value\">/media/marketingSummary</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                  </collectionProp>\n                </elementProp>\n                <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                <stringProp name=\"HTTPSampler.port\"></stringProp>\n                <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                <stringProp name=\"HTTPSampler.method\">GET</stringProp>\n                <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>\n                <stringProp name=\"HTTPSampler.path\">marketforce</stringProp>\n                <boolProp name=\"HTTPSampler.follow_redirects\">false</boolProp>\n                <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>\n                <boolProp name=\"HTTPSampler.use_keepalive\">true</boolProp>\n                <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>\n              </HTTPSampler2>\n              <hashTree>\n                <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"Not 200 Response Assertion\" \nenabled=\"true\">\n                  <collectionProp name=\"Asserion.test_strings\">\n                    <stringProp name=\"49586\">200</stringProp>\n                  </collectionProp>\n                  <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                  <intProp name=\"Assertion.test_type\">1</intProp>\n                  <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                </ResponseAssertion>\n                <hashTree/>\n              </hashTree>\n            </hashTree>\n            <CookieManager guiclass=\"CookiePanel\" testclass=\"CookieManager\" \ntestname=\"Cookie manager\" enabled=\"true\">\n              <collectionProp name=\"CookieManager.cookies\"/>\n              <boolProp name=\"CookieManager.clearEachIteration\">true</boolProp>\n            </CookieManager>\n            <hashTree/>\n            <LoopController guiclass=\"LoopControlPanel\" \ntestclass=\"LoopController\" testname=\"Loop Controller\" enabled=\"true\">\n              <boolProp name=\"LoopController.continue_forever\">true</boolProp>\n              <stringProp name=\"LoopController.loops\">${loopCount}</stringProp>\n            </LoopController>\n            <hashTree>\n              <GenericController guiclass=\"LogicControllerGui\" \ntestclass=\"GenericController\" testname=\"Home\" enabled=\"true\"/>\n              <hashTree>\n                <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Home Page (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                  <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                    <collectionProp name=\"Arguments.arguments\">\n                      <elementProp name=\"\" elementType=\"HTTPArgument\">\n                        <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                        <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                        <stringProp name=\"Argument.name\">${navigationID}\n</stringProp>\n                        <stringProp \nname=\"Argument.value\">/homepage</stringProp>\n                        <stringProp name=\"Argument.metadata\">=</stringProp>\n                      </elementProp>\n                      <elementProp name=\"\" elementType=\"HTTPArgument\">\n                        <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                        <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                        <stringProp name=\"Argument.name\">reset</stringProp>\n                        <stringProp name=\"Argument.value\">true</stringProp>\n                        <stringProp name=\"Argument.metadata\">=</stringProp>\n                      </elementProp>\n                    </collectionProp>\n                  </elementProp>\n                  <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                  <stringProp name=\"HTTPSampler.port\"></stringProp>\n                  <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                  <stringProp name=\"HTTPSampler.method\">GET</stringProp>\n                  <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>\n                  <stringProp name=\"HTTPSampler.path\"></stringProp>\n                  <boolProp \nname=\"HTTPSampler.follow_redirects\">false</boolProp>\n                  <boolProp name=\"HTTPSampler.auto_redirects\">true</boolProp>\n                  <boolProp name=\"HTTPSampler.use_keepalive\">true</boolProp>\n                  <boolProp \nname=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                  <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                  <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                  <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                  <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                  <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>\n                </HTTPSampler2>\n                <hashTree>\n                  <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Home Page) Error Page Response \nAssertion\" enabled=\"true\">\n                    <collectionProp name=\"Asserion.test_strings\">\n                      <stringProp name=\"-\n1225098100\">/error/error_pages.css</stringProp>\n                    </collectionProp>\n                    <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                    <intProp name=\"Assertion.test_type\">6</intProp>\n                    <stringProp \nname=\"Assertion.test_field\">Assertion.response_data</stringProp>\n                  </ResponseAssertion>\n                  <hashTree/>\n                  <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Home Page) Not 200 Response \nAssertion\" enabled=\"true\">\n                    <collectionProp name=\"Asserion.test_strings\">\n                      <stringProp name=\"49586\">200</stringProp>\n                    </collectionProp>\n                    <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                    <intProp name=\"Assertion.test_type\">1</intProp>\n                    <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                  </ResponseAssertion>\n                  <hashTree/>\n                  <DurationAssertion guiclass=\"DurationAssertionGui\" \ntestclass=\"DurationAssertion\" testname=\"Home Page Timeout\" enabled=\"true\">\n                    <stringProp \nname=\"DurationAssertion.duration\">120000</stringProp>\n                  </DurationAssertion>\n                  <hashTree/>\n                </hashTree>\n              </hashTree>\n              <RandomOrderController guiclass=\"RandomOrderControllerGui\" \ntestclass=\"RandomOrderController\" testname=\"Random Order Controller\" \nenabled=\"true\"/>\n              <hashTree>\n                <GenericController guiclass=\"LogicControllerGui\" \ntestclass=\"GenericController\" testname=\"Profile Mining\" enabled=\"true\"/>\n                <hashTree>\n                  <GenericController guiclass=\"LogicControllerGui\" \ntestclass=\"GenericController\" testname=\"Key Segments\" enabled=\"true\"/>\n                  <hashTree>\n                    <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Key Segments 5 (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                      <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                        <collectionProp name=\"Arguments.arguments\">\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${periodTypeKey}\n</stringProp>\n                            <stringProp \nname=\"Argument.value\">${periodTypeValue}</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${sDateKey}\n</stringProp>\n                            <stringProp name=\"Argument.value\">${sDateValue}\n</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${navigationID}\n</stringProp>\n                            <stringProp \nname=\"Argument.value\">/profileMining/keySeg</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp \nname=\"Argument.name\">l1.sfilter</stringProp>\n                            <stringProp name=\"Argument.value\">S</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                        </collectionProp>\n                      </elementProp>\n                      <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                      <stringProp name=\"HTTPSampler.port\"></stringProp>\n                      <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                      <stringProp name=\"HTTPSampler.method\">GET</stringProp>\n                      <stringProp \nname=\"HTTPSampler.contentEncoding\"></stringProp>\n                      <stringProp \nname=\"HTTPSampler.path\">marketforce</stringProp>\n                      <boolProp \nname=\"HTTPSampler.follow_redirects\">true</boolProp>\n                      <boolProp \nname=\"HTTPSampler.auto_redirects\">false</boolProp>\n                      <boolProp \nname=\"HTTPSampler.use_keepalive\">true</boolProp>\n                      <boolProp \nname=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                      <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                      <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                      <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                      <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                      <stringProp \nname=\"HTTPSampler.embedded_url_re\"></stringProp>\n                    </HTTPSampler2>\n                    <hashTree>\n                      <DurationAssertion guiclass=\"DurationAssertionGui\" \ntestclass=\"DurationAssertion\" testname=\"Key Segments 5 Timeout\" enabled=\"true\">\n                        <stringProp \nname=\"DurationAssertion.duration\">120000</stringProp>\n                      </DurationAssertion>\n                      <hashTree/>\n                      <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Key Segments 5) Error Page Response \nAssertion\" enabled=\"true\">\n                        <collectionProp name=\"Asserion.test_strings\">\n                          <stringProp name=\"-\n1225098100\">/error/error_pages.css</stringProp>\n                        </collectionProp>\n                        <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                        <intProp name=\"Assertion.test_type\">6</intProp>\n                        <stringProp \nname=\"Assertion.test_field\">Assertion.response_data</stringProp>\n                      </ResponseAssertion>\n                      <hashTree/>\n                      <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Key Segments 5) Not 200 Response \nAssertion\" enabled=\"true\">\n                        <collectionProp name=\"Asserion.test_strings\">\n                          <stringProp name=\"49586\">200</stringProp>\n                        </collectionProp>\n                        <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                        <intProp name=\"Assertion.test_type\">1</intProp>\n                        <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                      </ResponseAssertion>\n                      <hashTree/>\n                    </hashTree>\n                    <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Key Segments 6 (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                      <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                        <collectionProp name=\"Arguments.arguments\">\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${periodTypeKey}\n</stringProp>\n                            <stringProp \nname=\"Argument.value\">${periodTypeValue}</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${sDateKey}\n</stringProp>\n                            <stringProp name=\"Argument.value\">${sDateValue}\n</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp name=\"Argument.name\">${navigationID}\n</stringProp>\n                            <stringProp \nname=\"Argument.value\">/profileMining/keySeg</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                          <elementProp name=\"\" elementType=\"HTTPArgument\">\n                            <boolProp \nname=\"HTTPArgument.use_equals\">true</boolProp>\n                            <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                            <stringProp \nname=\"Argument.name\">l1.sfilter</stringProp>\n                            <stringProp name=\"Argument.value\">D</stringProp>\n                            <stringProp name=\"Argument.metadata\">=</stringProp>\n                          </elementProp>\n                        </collectionProp>\n                      </elementProp>\n                      <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                      <stringProp name=\"HTTPSampler.port\"></stringProp>\n                      <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                      <stringProp name=\"HTTPSampler.method\">GET</stringProp>\n                      <stringProp \nname=\"HTTPSampler.contentEncoding\"></stringProp>\n                      <stringProp \nname=\"HTTPSampler.path\">marketforce</stringProp>\n                      <boolProp \nname=\"HTTPSampler.follow_redirects\">true</boolProp>\n                      <boolProp \nname=\"HTTPSampler.auto_redirects\">false</boolProp>\n                      <boolProp \nname=\"HTTPSampler.use_keepalive\">true</boolProp>\n                      <boolProp \nname=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                      <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                      <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                      <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                      <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                      <stringProp \nname=\"HTTPSampler.embedded_url_re\"></stringProp>\n                    </HTTPSampler2>\n                    <hashTree>\n                      <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Key Segments 6) Error Page Response \nAssertion\" enabled=\"true\">\n                        <collectionProp name=\"Asserion.test_strings\">\n                          <stringProp name=\"-\n1225098100\">/error/error_pages.css</stringProp>\n                        </collectionProp>\n                        <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                        <intProp name=\"Assertion.test_type\">6</intProp>\n                        <stringProp \nname=\"Assertion.test_field\">Assertion.response_data</stringProp>\n                      </ResponseAssertion>\n                      <hashTree/>\n                      <DurationAssertion guiclass=\"DurationAssertionGui\" \ntestclass=\"DurationAssertion\" testname=\"Key Segments 6 Timeout\" enabled=\"true\">\n                        <stringProp \nname=\"DurationAssertion.duration\">120000</stringProp>\n                      </DurationAssertion>\n                      <hashTree/>\n                      <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Key Segments 6) Not 200 Response \nAssertion\" enabled=\"true\">\n                        <collectionProp name=\"Asserion.test_strings\">\n                          <stringProp name=\"49586\">200</stringProp>\n                        </collectionProp>\n                        <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                        <intProp name=\"Assertion.test_type\">1</intProp>\n                        <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                      </ResponseAssertion>\n                      <hashTree/>\n                    </hashTree>\n                  </hashTree>\n                </hashTree>\n              </hashTree>\n              <HTTPSampler2 guiclass=\"HttpTestSampleGui2\" \ntestclass=\"HTTPSampler2\" testname=\"Logout Request (client ${clientID} - \n${hostName} - ${clientType})\" enabled=\"true\">\n                <elementProp name=\"HTTPsampler.Arguments\" \nelementType=\"Arguments\" guiclass=\"HTTPArgumentsPanel\" testclass=\"Arguments\" \ntestname=\"User Defined Variables\" enabled=\"true\">\n                  <collectionProp name=\"Arguments.arguments\">\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                      <stringProp name=\"Argument.name\">${navigationID}\n</stringProp>\n                      <stringProp name=\"Argument.value\">Login</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                    <elementProp name=\"\" elementType=\"HTTPArgument\">\n                      <boolProp name=\"HTTPArgument.use_equals\">true</boolProp>\n                      <boolProp \nname=\"HTTPArgument.always_encode\">false</boolProp>\n                      <stringProp name=\"Argument.name\">lo</stringProp>\n                      <stringProp name=\"Argument.value\">1</stringProp>\n                      <stringProp name=\"Argument.metadata\">=</stringProp>\n                    </elementProp>\n                  </collectionProp>\n                </elementProp>\n                <stringProp name=\"HTTPSampler.domain\"></stringProp>\n                <stringProp name=\"HTTPSampler.port\"></stringProp>\n                <stringProp name=\"HTTPSampler.protocol\"></stringProp>\n                <stringProp name=\"HTTPSampler.method\">POST</stringProp>\n                <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>\n                <stringProp name=\"HTTPSampler.path\">marketforce</stringProp>\n                <boolProp name=\"HTTPSampler.follow_redirects\">true</boolProp>\n                <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>\n                <boolProp name=\"HTTPSampler.use_keepalive\">true</boolProp>\n                <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>\n                <stringProp name=\"HTTPSampler.mimetype\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_NAME\"></stringProp>\n                <stringProp name=\"HTTPSampler.FILE_FIELD\"></stringProp>\n                <stringProp name=\"HTTPSampler.monitor\">false</stringProp>\n                <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>\n              </HTTPSampler2>\n              <hashTree>\n                <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Logout Request ) Error Page Response \nAssertion\" enabled=\"true\">\n                  <collectionProp name=\"Asserion.test_strings\">\n                    <stringProp name=\"-\n1225098100\">/error/error_pages.css</stringProp>\n                  </collectionProp>\n                  <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                  <intProp name=\"Assertion.test_type\">6</intProp>\n                  <stringProp \nname=\"Assertion.test_field\">Assertion.response_data</stringProp>\n                </ResponseAssertion>\n                <hashTree/>\n                <ResponseAssertion guiclass=\"AssertionGui\" \ntestclass=\"ResponseAssertion\" testname=\"(Logout Request ) Not 200 Response \nAssertion\" enabled=\"true\">\n                  <collectionProp name=\"Asserion.test_strings\">\n                    <stringProp name=\"49586\">200</stringProp>\n                  </collectionProp>\n                  <stringProp \nname=\"Assertion.assume_success\">false</stringProp>\n                  <intProp name=\"Assertion.test_type\">1</intProp>\n                  <stringProp \nname=\"Assertion.test_field\">Assertion.response_code</stringProp>\n                </ResponseAssertion>\n                <hashTree/>\n                <DurationAssertion guiclass=\"DurationAssertionGui\" \ntestclass=\"DurationAssertion\" testname=\"Logout Request Timeout\" enabled=\"true\">\n                  <stringProp \nname=\"DurationAssertion.duration\">120000</stringProp>\n                </DurationAssertion>\n                <hashTree/>\n              </hashTree>\n            </hashTree>\n            <ResultCollector guiclass=\"SimpleDataWriter\" \ntestclass=\"ResultCollector\" testname=\"Simple Data Writer\" enabled=\"false\">\n              <boolProp name=\"ResultCollector.error_logging\">true</boolProp>\n              <objProp>\n                <value class=\"SampleSaveConfiguration\">\n                  <time>true</time>\n                  <latency>false</latency>\n                  <timestamp>false</timestamp>\n                  <success>false</success>\n                  <label>true</label>\n                  <code>true</code>\n                  <message>true</message>\n                  <threadName>false</threadName>\n                  <dataType>false</dataType>\n                  <encoding>false</encoding>\n                  <assertions>false</assertions>\n                  <subresults>false</subresults>\n                  <responseData>false</responseData>\n                  <samplerData>false</samplerData>\n                  <xml>false</xml>\n                  <fieldNames>false</fieldNames>\n                  <responseHeaders>false</responseHeaders>\n                  <requestHeaders>false</requestHeaders>\n                  <responseDataOnError>false</responseDataOnError>\n                  \n<saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>\n                  <assertionsResultsToSave>0</assertionsResultsToSave>\n                </value>\n                <name>saveConfig</name>\n              </objProp>\n              <stringProp name=\"filename\">Catapult_SEM.csv</stringProp>\n            </ResultCollector>\n            <hashTree/>\n            <ResultCollector guiclass=\"StatVisualizer\" \ntestclass=\"ResultCollector\" testname=\"Aggregate Report\" enabled=\"true\">\n              <boolProp name=\"ResultCollector.error_logging\">false</boolProp>\n              <objProp>\n                <value class=\"SampleSaveConfiguration\">\n                  <time>true</time>\n                  <latency>false</latency>\n                  <timestamp>true</timestamp>\n                  <success>true</success>\n                  <label>true</label>\n                  <code>true</code>\n                  <message>true</message>\n                  <threadName>true</threadName>\n                  <dataType>false</dataType>\n                  <encoding>false</encoding>\n                  <assertions>true</assertions>\n                  <subresults>false</subresults>\n                  <responseData>false</responseData>\n                  <samplerData>false</samplerData>\n                  <xml>false</xml>\n                  <fieldNames>true</fieldNames>\n                  <responseHeaders>false</responseHeaders>\n                  <requestHeaders>false</requestHeaders>\n                  <responseDataOnError>false</responseDataOnError>\n                  \n<saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>\n                  <assertionsResultsToSave>0</assertionsResultsToSave>\n                  <bytes>true</bytes>\n                  <url>true</url>\n                </value>\n                <name>saveConfig</name>\n              </objProp>\n              <stringProp name=\"filename\">${configFile}.jtl</stringProp>\n            </ResultCollector>\n            <hashTree/>\n            <ResultCollector guiclass=\"ViewResultsFullVisualizer\" \ntestclass=\"ResultCollector\" testname=\"View Results Tree\" enabled=\"false\">\n              <boolProp name=\"ResultCollector.error_logging\">true</boolProp>\n              <objProp>\n                <value class=\"SampleSaveConfiguration\">\n                  <time>true</time>\n                  <latency>true</latency>\n                  <timestamp>true</timestamp>\n                  <success>true</success>\n                  <label>true</label>\n                  <code>true</code>\n                  <message>true</message>\n                  <threadName>false</threadName>\n                  <dataType>false</dataType>\n                  <encoding>false</encoding>\n                  <assertions>true</assertions>\n                  <subresults>false</subresults>\n                  <responseData>true</responseData>\n                  <samplerData>false</samplerData>\n                  <xml>false</xml>\n                  <fieldNames>false</fieldNames>\n                  <responseHeaders>false</responseHeaders>\n                  <requestHeaders>false</requestHeaders>\n                  <responseDataOnError>false</responseDataOnError>\n                  \n<saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>\n                  <assertionsResultsToSave>0</assertionsResultsToSave>\n                  <url>true</url>\n                </value>\n                <name>saveConfig</name>\n              </objProp>\n              <stringProp \nname=\"filename\">Catapult_SEM_Failure_Log.doc</stringProp>\n            </ResultCollector>\n            <hashTree/>\n            <ResultCollector guiclass=\"StatVisualizer\" \ntestclass=\"ResultCollector\" testname=\"Errors-Aggregate Report\" enabled=\"true\">\n              <boolProp name=\"ResultCollector.error_logging\">true</boolProp>\n              <objProp>\n                <value class=\"SampleSaveConfiguration\">\n                  <time>true</time>\n                  <latency>false</latency>\n                  <timestamp>true</timestamp>\n                  <success>true</success>\n                  <label>true</label>\n                  <code>true</code>\n                  <message>true</message>\n                  <threadName>true</threadName>\n                  <dataType>false</dataType>\n                  <encoding>false</encoding>\n                  <assertions>true</assertions>\n                  <subresults>false</subresults>\n                  <responseData>false</responseData>\n                  <samplerData>false</samplerData>\n                  <xml>false</xml>\n                  <fieldNames>false</fieldNames>\n                  <responseHeaders>false</responseHeaders>\n                  <requestHeaders>false</requestHeaders>\n                  <responseDataOnError>false</responseDataOnError>\n                  \n<saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>\n                  <assertionsResultsToSave>0</assertionsResultsToSave>\n                  <bytes>true</bytes>\n                  <url>true</url>\n                </value>\n                <name>saveConfig</name>\n              </objProp>\n              <stringProp name=\"filename\">${configFile}\n_failure_log.doc</stringProp>\n            </ResultCollector>\n            <hashTree/>\n          </hashTree>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n  </hashTree>\n</jmeterTestPlan>", "id": 105722, "time": "2007-07-17T07:55:18Z", "creator": "kmitchell@coremetrics.com", "creation_time": "2007-07-17T07:55:18Z", "is_private": false}, {"count": 1, "tags": [], "bug_id": 42919, "text": "Created attachment 20525\njmx script", "id": 105723, "time": "2007-07-17T07:57:24Z", "creator": "kmitchell@coremetrics.com", "creation_time": "2007-07-17T07:57:24Z", "is_private": false, "attachment_id": 20525}, {"count": 2, "tags": [], "text": "The test case is rather complicated, and requires external files that have not \nbeen provided - as well as access to a private server (as far as I can tell).\n\nPlease can you provide the simplest possible test case, using a publicly \navailable server?", "attachment_id": null, "bug_id": 42919, "id": 106611, "time": "2007-08-10T12:10:10Z", "creator": "sebb@apache.org", "creation_time": "2007-08-10T12:10:10Z", "is_private": false}, {"count": 3, "tags": [], "creator": "kmitchell@coremetrics.com", "attachment_id": null, "text": "I have attached a very simple .jmx cause that shows the problem.  I've also \nattached the output files from the run.\n\nThe 'projection.css Response Assertion' is always triggered but I only see the \ntext in the output file when it is the first assertion listed.", "id": 106707, "time": "2007-08-13T11:12:32Z", "bug_id": 42919, "creation_time": "2007-08-13T11:12:32Z", "is_private": false}, {"count": 4, "tags": [], "text": "Created attachment 20656\nsimpler jmx", "attachment_id": 20656, "bug_id": 42919, "id": 106708, "time": "2007-08-13T11:15:13Z", "creator": "kmitchell@coremetrics.com", "creation_time": "2007-08-13T11:15:13Z", "is_private": false}, {"count": 5, "tags": [], "bug_id": 42919, "text": "Created attachment 20657\noutput of new .jmx", "id": 106709, "time": "2007-08-13T11:15:48Z", "creator": "kmitchell@coremetrics.com", "creation_time": "2007-08-13T11:15:48Z", "is_private": false, "attachment_id": 20657}, {"count": 6, "tags": [], "text": "Created attachment 20658\noutput of new .jmx (not just errors)", "attachment_id": 20658, "bug_id": 42919, "id": 106710, "time": "2007-08-13T11:16:20Z", "creator": "kmitchell@coremetrics.com", "creation_time": "2007-08-13T11:16:20Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 42919, "text": "Thanks for the simplified test case.\n\nThe problem was that the code was only ever saving the first Assertion result, \nregardless of whether it failed or not.\n\nI've changed it to save the first result with a failure message.\n\nThis is in SVN r565476.", "id": 106711, "time": "2007-08-13T12:00:07Z", "creator": "sebb@apache.org", "creation_time": "2007-08-13T12:00:07Z", "is_private": false, "attachment_id": null}]
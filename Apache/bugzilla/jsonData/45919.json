[{"count": 0, "tags": [], "creator": "thomas.guretzki@gmx.de", "attachment_id": null, "id": 121085, "time": "2008-09-30T05:46:41Z", "bug_id": 45919, "creation_time": "2008-09-30T05:46:41Z", "is_private": false, "text": "With these patches,"}, {"count": 1, "tags": [], "creator": "thomas.guretzki@gmx.de", "attachment_id": null, "id": 121088, "time": "2008-09-30T06:41:01Z", "bug_id": 45919, "creation_time": "2008-09-30T06:41:01Z", "is_private": false, "text": "[sorry for the break]\nWith these patches, it is possible to derive classes from HSSFCell and the linked classes HSSFRow, HSSFSheet and HSSFWorkbook.\nThis can be very useful if you want to use inherent references between these objects in your own code which uses additional attributes e.g. of cells. That way,  one does not have to create one's own ArrayLists, e.g. of the cells of every row. Plus you get all HSSFCell methods for free without any code. \n\nThe main change to make this possible was to create working public constuctors in HSSFSheet, HSSFRow and HSSFCell. Before, there were only creator methods in the respective superior class, e.g. createRow in HSSFSheet. These continue to exists, but they simply call the respective constructors. There are some details beyond this concerning how to get the newly created e.g. HSSFCells into the administration of their HSSFRow, but you can look that up in the code.\n\nIf you extend only one of these classes, be aware that you _must_ use its constructor for newly created objects. For example, if you extend HSSFSheet, you call \"new HSSFSheet (HSSFWorkbook, String)\" and pass it an existing HSSFWorkbook and the name of the new sheet.\nIf you want to use the createSheet method of HSSFWorkbook, you have to extend that class and override that method, containing code like \"result=new HSSFSheet (HSSFWorkbook, String)\". \nThe code contains hints like \"##Override...\" to quickly find the concerned methods.\n"}, {"count": 2, "tags": [], "bug_id": 45919, "attachment_id": 22651, "text": "Created attachment 22651\nPatch to make HSSFCell inheritable", "id": 121090, "time": "2008-09-30T07:46:57Z", "creator": "thomas.guretzki@gmx.de", "creation_time": "2008-09-30T07:46:57Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 45919, "attachment_id": 22652, "text": "Created attachment 22652\nPatch to make HSSFRow inheritable", "id": 121091, "time": "2008-09-30T07:47:25Z", "creator": "thomas.guretzki@gmx.de", "creation_time": "2008-09-30T07:47:25Z", "is_private": false}, {"count": 4, "attachment_id": 22653, "bug_id": 45919, "is_private": false, "id": 121092, "time": "2008-09-30T07:47:44Z", "creator": "thomas.guretzki@gmx.de", "creation_time": "2008-09-30T07:47:44Z", "tags": [], "text": "Created attachment 22653\nPatch to make HSSFSheet inheritable"}, {"count": 5, "tags": [], "creator": "thomas.guretzki@gmx.de", "attachment_id": 22654, "id": 121093, "time": "2008-09-30T07:48:11Z", "bug_id": 45919, "creation_time": "2008-09-30T07:48:11Z", "is_private": false, "text": "Created attachment 22654\nPatch to make HSSFWorkbook inheritable"}, {"count": 6, "tags": [], "creator": "josh@apache.org", "is_private": false, "id": 121141, "attachment_id": null, "bug_id": 45919, "creation_time": "2008-10-01T22:26:27Z", "time": "2008-10-01T22:26:27Z", "text": "From a functionality perspective, you are probably tryng to do something very sensible.  Can you please attach some sample code that shows your goal?\n\nHowever, the technical change specified in these patches is contrary POI's current direction.  POI avoids allowing API classes to be extended because of the difficulties that this presents.  The trouble arises because inheritance is such an intimate form of coupling.  \n\nThe most discernible difficulty relates to maintaining of backward (source/binary) compatibility.  This link has some useful tables classifying potential changes:\nhttp://wiki.eclipse.org/index.php/Evolving_Java-based_APIs\n\nMuch more subtle are the unexpected behaviour/logic consequences of inheritance.  See this page for some well explained examples:\nhttp://norvig.com/java-iaq.html\n\nMost code using unwanted inheritance can be rewritten using delegation and/or the 'strategy pattern'.\n\nDon't get me wrong - inheritance isn't all bad.  POI uses *plenty* of inheritance, just internally. My personal opinion is that \"you should never inherit from a class that you do not control the source code of\".\n"}, {"count": 7, "tags": [], "bug_id": 45919, "attachment_id": null, "text": "*** Bug 51574 has been marked as a duplicate of this bug. ***", "id": 148248, "time": "2011-07-28T13:03:55Z", "creator": "yegor@dinom.ru", "creation_time": "2011-07-28T13:03:55Z", "is_private": false}]
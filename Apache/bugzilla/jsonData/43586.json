[{"count": 0, "tags": [], "bug_id": 43586, "text": "I am unable to run my JUNIT tests in a forked ANT v1.7.0 I am running on Linux.\n\nIt keeps crashing with ->\n\njava.io.FileNotFoundException: /home/PRTI/apache-ant-\n1.7.0/junitvmwatcher527107969.properties \n\nI have read a \"fix\" in the fixed list \n(http://apache.mirrormax.net/ant/README.html) saying ->\n\n<junittask/> created junitvmwatcher*.properties files but did not close and \ndelete them. \n\nI cannot find any nightly builds at all on \nhttp://people.apache.org/builds/ant/nightly/\n\nIs there any build of ant v1.7.0 that FIXES this bug, please?\n\nPlease help, this is a blocker.", "id": 109195, "time": "2007-10-10T08:22:56Z", "creator": "rahul.mahboobani@atosorigin.com", "creation_time": "2007-10-10T08:22:56Z", "is_private": false, "attachment_id": null}, {"count": 1, "tags": [], "text": "this isnt a bug in ant; I can assure you it isnt possible for ant to be released\nwith junit not working on linux, as it would fail its own tests.\n\nyou are mixing ant versions. \n-Look at the classpath you run the tests on, make sure there arent ant 1.6.x\njars on there\n-delete any RPM/deb installed ant versions", "attachment_id": null, "bug_id": 43586, "id": 109224, "time": "2007-10-11T02:29:59Z", "creator": "stevel@apache.org", "creation_time": "2007-10-11T02:29:59Z", "is_private": false}, {"count": 2, "tags": [], "bug_id": 43586, "text": "There are no ant 1.6.x jars in my classpath. But, I have lots of jars \n(commons, jboss, axis, etc.etc.), could it be that one of these is carrying \nold version ant classes inside, causing this?\n\nIt will be very very tedious for me to look into each and every jar and find \nout, so any advice greatly appreciated", "id": 109227, "time": "2007-10-11T03:00:36Z", "creator": "rahul.mahboobani@atosorigin.com", "creation_time": "2007-10-11T03:00:36Z", "is_private": false, "attachment_id": null}, {"count": 3, "tags": [], "bug_id": 43586, "attachment_id": null, "text": "I am running on Linux, and I assure you I have no other versions of ant, I \njust took the 1.7.0 tar.gz from apache and installed it. I have checked \nthoroughly but this vmwatcher thing is blocking me entirely.\n\nPlease could you suggest a workaround?\n\nI have run out of time, this is urgent, please help.", "id": 109228, "time": "2007-10-11T03:23:47Z", "creator": "rahul.mahboobani@atosorigin.com", "creation_time": "2007-10-11T03:23:47Z", "is_private": false}, {"count": 4, "tags": [], "bug_id": 43586, "attachment_id": null, "id": 109235, "time": "2007-10-11T03:58:11Z", "creator": "stevel@apache.org", "creation_time": "2007-10-11T03:58:11Z", "is_private": false, "text": "funnily enough, I had to track down duplicate classes in a different program\nlast week, and now know how to do it. It's pretty easy. \n\nIf you add the jvm option -verbose:class to <junit> you can find where classes\nget loaded on; capture the output and search through it for\norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\n\n<junit fork=\"yes\">\n  <jvmarg value=\"-verbose:class\"/>\n\n"}, {"count": 5, "tags": [], "bug_id": 43586, "text": "Thanks for your advice, but the output only shows the following once ->\n    [junit] [Loaded \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner]\n    [junit] [Loaded \norg.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner$TeeOutputStream]\n\nI do not see any duplicate classes, neither does the above say which jar its \nloaded from.\n\nI do have junit/swingui/TestRunner.class in junit.jar, which is in my \nclasspath. (if I remove junit.jar, ant junit task cannot find \njunit.framework.Test so it fails)\n\nI do not see any other duplicate classes related to ant, all the classes are \ncoming from my apache-ant-1.7.0/lib.\n\nPlease could you advise some more, there has to be something! I am thinking of \ndeleting everything and starting from scratch, but I don't see how that could \nhelp.", "id": 109240, "time": "2007-10-11T04:54:00Z", "creator": "rahul.mahboobani@atosorigin.com", "creation_time": "2007-10-11T04:54:00Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "text": "(In reply to comment #5)\n\nI also have the same issue, followed the advice on mailing list, but problem is \nnot solved.\n\nI also built new version of Ant from SVN repository ANT_17_BRANCH (revision no. \n583390), now using new version of Ant junitvmwatcherxxx.properties error is \ngone, but it hangs while running junit tests unless I terminate jave.exe using \ntakmanager.\n", "attachment_id": null, "bug_id": 43586, "id": 109246, "time": "2007-10-11T06:38:53Z", "creator": "jaikumar.sharma@barco.com", "creation_time": "2007-10-11T06:38:53Z", "is_private": false}, {"count": 7, "tags": [], "text": "Well, I reverted back to Ant v1.6.5 and everything works fine.", "attachment_id": null, "id": 109249, "creator": "rahul.mahboobani@atosorigin.com", "time": "2007-10-11T06:59:38Z", "bug_id": 43586, "creation_time": "2007-10-11T06:59:38Z", "is_private": false}, {"count": 8, "attachment_id": null, "creator": "jaikumar.sharma@barco.com", "text": "Yes, if you are still using JUnit 3.x, but my tests are using JUnit 4.x, so for \nme there is no option but to use Ant 1.7. I am facing this problem on Windows \nXP.\n", "id": 109266, "time": "2007-10-11T09:32:34Z", "bug_id": 43586, "creation_time": "2007-10-11T09:32:34Z", "tags": [], "is_private": false}, {"count": 9, "tags": [], "bug_id": 43586, "text": "I too ran into this problem and did a bit of digging.  \n\nAs Steve pointed out, the source of the problem is having an older version of\nthe Ant libraries in the classpath.  \n\nI ran my tests with Ant's debug switch [-d] and noticed that the\nJava13CommandLauncher is constructing a classpath with the Ant 1.7 libraries\nappended to the classpath as opposed to being prepended.  That is a [relatively\nminor] bug IMHO.\n\nUnless there is a valid use case I am overlooking, I believe it would make the\ntool a bit more robust to promote the ant libs to the front of the list.\n\nRegards,\njb", "id": 111145, "time": "2007-11-27T09:12:18Z", "creator": "jwbrown@tibco.com", "creation_time": "2007-11-27T09:12:18Z", "is_private": false, "attachment_id": null}, {"count": 10, "tags": [], "bug_id": 43586, "attachment_id": null, "id": 120257, "time": "2008-09-01T05:56:50Z", "creator": "rol_b@web.de", "creation_time": "2008-09-01T05:56:50Z", "is_private": false, "text": "Hello together,\n\ni have a similar Problem only under Windows.\nSoftware:\n- Apache Ant version 1.7.0 compiled on December 13 2006\n- JUnit4.1\n- java version \"1.5.0_11\"\nJava(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_11-b03)\nJava HotSpot(TM) Client VM (build 1.5.0_11-b03, mixed mode)\n\nSame Message:\n[junit] java.io.FileNotFoundException: ***\\junitvmwatcher1492363537.properties (Das System kann die angegebene Datei nicht finden)\n\nIt seems that the junit-task fails if the classpath contains more than about 12250 classes. A test with about 12200 classes runs without failures.\n\nRegards"}, {"count": 11, "tags": [], "bug_id": 43586, "text": "I have stumbled on what I believe may be another common cause of this \"bug\". \n\nThis can happen if Ant's junit task is run with fork=\"yes\" in default forkmode, and you pass in a jvmarg element which has an empty string as value. \n\nWe have a common Ant framework script used by multiple projects, with properties driving the specific project's behavior. E.g. our build uses this fragment:\n\n   <jvmarg value=\"junit.jvmarg.project\"/>\n   <jvmarg value=\"junit.jvmarg.internal\"/>\n\nwhere the latter is always defined (by the framework) and the former can be supplied by users. When we split the jvmargs into these two elements, of course there was a reason, and at the time both properties had values. Subsequent usages sometimes broke, because the client project did not provide a property definition of \"junit.jvmarg.project\" with a non-empty value (the project's definition being seen first, the framework's definition having the empty string as default value).\n\nThat was a recipe for the issue reported in this bug. The specific Ant/Junit problem can be seen when running Ant with the -debug option, producing output like this (---scrubbed---):\n\n    [junit] Executing '/usr/java/jdk1.6.0_07/jre/bin/java' with arguments:\n    [junit] ''\n    [junit] '-Dcom.foo=NONE \n    [junit] '-classpath'\n    [junit] --- classpath elements here ---\n    [junit] 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner'\n    [junit] --- Test class here ---\n    [junit] 'filtertrace=true'\n    [junit] 'haltOnError=false'\n    [junit] 'haltOnFailure=false'\n    [junit] 'formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter'\n    [junit] 'showoutput=false'\n    [junit] 'outputtoformatters=true'\n    [junit] 'logtestlistenerevents=true'\n    [junit] 'formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/---Test xml file here ---\n    [junit] 'crashfile=/---some-path-here---/junitvmwatcher602965515.properties'\n    [junit] 'propsfile=/---some-path-here---/junit1771756651.properties'\n    [junit] \n    [junit] The ' characters around the executable and arguments are\n    [junit] not part of the command.\n\nNote the empty string on the line immediately after the Executing. That is the empty string contributed by the first jvmarg element, from the empty-string-valued \"junit.jvmarg.project\" property. The line with \"-Dcom.foo=NONE\" was contributed by the second jvmarg element, the \"junit.jvmarg.internal\" having this (phony) value. The JVM crashed because of this empty (1st) argument. \n\nIf we define a non-empty value for \"junit.jvmarg.project\" the problem goes away (the empty line being replaced by something the JVM will swallow, like \"-Djunk=ignore\". \n\nThe underlying Ant problem (yes I think there is one) is that it doesn't check for empty arguments like this before running the JVM. I think it should do so, because the consequences are so pernicious and difficult to debug, and their seem to be no benefit. Specifically, I suggest the CommandlineJava class (instances of which are used by JUnitTask.executeAsForked() to represent the forked JVM command to run) should, somewhere in the conversion of the constituents of the command to a List of command elements (Strings), if there is an empty string it should perhaps be skipped over. Or, more narrowly, te Java13CommandLauncher inner class could deal with the issue since it's that launcher that seems to be the last place to do so. \n\nFurthermore, it seems that some improved error handling could be used here. There are no failures detected by the Execute nor JUnitTask classes in running the JVM which summarily exits. But (as is seen at the top of this bug) neither is there valid information about a JVM \"crash\" in the junitvmwatcher*.properties file (which doesn't exist). We simply see an exception from Ant with no hint to the uninitiated (and a lot of debugging for those who may be). ", "id": 120882, "time": "2008-09-23T06:11:46Z", "creator": "gplummer@ebscohost.com", "creation_time": "2008-09-23T06:11:46Z", "is_private": false, "attachment_id": null}, {"count": 12, "tags": [], "text": "Just as another point of reference, we encountered this problem as well running \n\n   - Ant 1.7.0\n   - Maven Ant Tasks 2.0.9\n   - Java 1.6.0_07\n   - Windows XP\n\nThe only apparent workaround was to NOT fork the junits.", "attachment_id": null, "bug_id": 43586, "id": 120997, "time": "2008-09-25T14:40:29Z", "creator": "bill.kasper@ge.com", "creation_time": "2008-09-25T14:40:29Z", "is_private": false}, {"count": 13, "tags": [], "text": "That's interesting. I could imagine stripping empty jvm args everywhere makes sense, in which case it is a change we'd make to the Java task, which would stop this problem (and similar) arising. ", "attachment_id": null, "id": 121087, "creator": "stevel@apache.org", "time": "2008-09-30T06:28:25Z", "bug_id": 43586, "creation_time": "2008-09-30T06:28:25Z", "is_private": false}, {"count": 14, "tags": [], "bug_id": 43586, "attachment_id": null, "id": 124864, "time": "2009-02-15T15:45:09Z", "creator": "jose.jimenez@isoftplc.com", "creation_time": "2009-02-15T15:45:09Z", "is_private": false, "text": "I have the same problem. I use jdk_1.5.0_11 apache-ant-1.0.7 and solaris 10 SPARC.\nThe same build process don't fail in windows XP.\nI need set fork=\"true\" because i need use more than one jvm to same script.\n\nWhen will be solve this bug?? It's important for me.\n\nThanks"}, {"count": 15, "tags": [], "bug_id": 43586, "text": "This bug bit me because in my <junit> element I had a <test> element that used a name attribute that was incorrect.  The resulting FNFE error, that junitjvmwatcherXXXXX.properties was not found, was a huge red herring.  Comments I found about it being caused by versionitis took me way down wrong paths.\n\nThanks to comment #11 above, I finally saw this in my verbose ant output:\n\n(---scrubbed---):\n\n[junit] Executing '/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/bin/java' with arguments:\n    [junit] '-ea'\n    [junit] '-classpath'\n    [junit] <classpath here> \n    [junit] 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner'\n    [junit] 'null'\n    [junit] 'filtertrace=true'\n    [junit] 'haltOnError=true'\n    [junit] 'haltOnFailure=true'\n    [junit] 'formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter'\n    [junit] 'showoutput=false'\n    [junit] 'outputtoformatters=true'\n    [junit] 'logtestlistenerevents=true'\n...\n\nNote the 'null' about 5 lines down.  It took me a while to figure out that it should have held the name of the test class and that the name I had provided was wrong.  \n\nFar too costly in time to figure that out!  But maybe someone else can benefit from this info.  Thank you, Gerry Plummer.  Your post led me to the solution.", "id": 126827, "time": "2009-05-06T15:45:47Z", "creator": "nnwlsngml@gmail.com", "creation_time": "2009-05-06T15:45:47Z", "is_private": false, "attachment_id": null}, {"count": 16, "tags": [], "bug_id": 43586, "text": "Created attachment 25126\nstrips null and empty args from command line\n\nI've attached a patch based on comments by Gerry and Steve which prevents this somewhat cryptic error when running tests in a forked JVM:\n\n    [junit] Exception in thread \"main\" java.lang.NoClassDefFoundError:\n    [junit] Caused by: java.lang.ClassNotFoundException:\n    [junit]     at java.net.URLClassLoader$1.run(URLClassLoader.java:200)\n    [junit]     at java.security.AccessController.doPrivileged(Native Method)\n    [junit]     at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n    [junit]     at java.lang.ClassLoader.loadClass(ClassLoader.java:307)\n    [junit]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n    [junit]     at java.lang.ClassLoader.loadClass(ClassLoader.java:252)\n    [junit]     at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)\n    [junit] Could not find the main class: .  Program will exit.\n\nThe fix is indeed to strip null/empty args.  I considered throwing a BuildException but figured that might break too many existing builds that have other option arguments in positions other than the first.", "id": 135330, "time": "2010-03-14T16:24:49Z", "creator": "clark.archer@gmail.com", "creation_time": "2010-03-14T16:24:49Z", "is_private": false, "attachment_id": 25126}, {"count": 17, "tags": [], "bug_id": 43586, "attachment_id": 25127, "id": 135334, "time": "2010-03-14T23:01:53Z", "creator": "clark.archer@gmail.com", "creation_time": "2010-03-14T23:01:53Z", "is_private": false, "text": "Created attachment 25127\ndetect invalid test name values (null, empty string, \"null\") and fail\n\nThis patch adds fail-fast behavior with a hopefully helpful error message when the build script declares a <test/> element with an invalid test name.  This addresses the problem described by A Wilson in comment #15."}, {"count": 18, "attachment_id": null, "creator": "bodewig@apache.org", "text": "(In reply to comment #17)\n\n> This patch adds fail-fast behavior with a hopefully helpful error message when\n> the build script declares a <test/> element with an invalid test name.\n\nIt's in with svn revision 926465 with some minor modifications\n\n* I've created an AntUnit test from your JUnit test (a matter of taste, really)\n\n* String#isEmpty is a JDK 1.6 method while Ant is supposed to be JDK 1.4 compatible.\n\nI'll look into your patch comment #15 later.", "id": 135545, "time": "2010-03-23T05:28:09Z", "bug_id": 43586, "creation_time": "2010-03-23T05:28:09Z", "tags": [], "is_private": false}, {"count": 19, "tags": [], "bug_id": 43586, "text": "(In reply to comment #16)\n> Created an attachment (id=25126) [details]\n> strips null and empty args from command line\n\nthat would apply to bug 48815", "id": 135628, "time": "2010-03-25T15:15:35Z", "creator": "bodewig@apache.org", "creation_time": "2010-03-25T15:15:35Z", "is_private": false, "attachment_id": null}]
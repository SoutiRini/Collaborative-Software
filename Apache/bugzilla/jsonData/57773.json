[{"count": 0, "tags": [], "creator": "m.pohl@gmx.de", "attachment_id": null, "id": 182161, "time": "2015-03-27T23:56:10Z", "bug_id": 57773, "creation_time": "2015-03-27T23:56:10Z", "is_private": false, "text": "hi,\n\ni discovered a performance problem in EL implementation of recent tomcat 8 versions. we have some jsp based products, which are running fine on tomcat7/java8. while migrating to tomcat8 i discovered severe performance problems.\n\n\"ab\" performance against localhost (same machine with identical webapp)\n\nTOMCAT 7.0.59 / Java 1.8.0_40\nRequests per second:    96.12 [#/sec] (mean)\nTime per request:       10.404 [ms] (mean)\n\nTOMCAT 8.0.20 / Java 1.8.0_40\nRequests per second:    2.41 [#/sec] (mean)\nTime per request:       414.429 [ms] (mean)\n\ni realized that this could be related to bug #57583 and waited for 8.0.21. 8.0.21 is better, but also far away from tomcat 7\n\nTOMCAT 8.0.21 / Java 1.8.0_40\nRequests per second:    4.97 [#/sec] (mean)\nTime per request:       201.270 [ms] (mean)\n\nso i take some further investigations. we are using jsp-files as reusable templates. because of reuse in different contexts there are some optional request attributes.\n\npage.jsp\n...\n                <c:forEach var=\"video\" items=\"${videolist}\">\n                  <c:set var=\"teaser\" value=\"${video}\" scope=\"request\" />\n                  <jsp:include page=\"teaser.jsp\" />\n                </c:forEach>\n...\n\nteaser.jsp\n...\n            <c:if test=\"${teaserLarge}\">\n...\n            </c:if>\n..\n\nthe problem occurs when teaserLarge is not defined. in this case the c:if line ends in a time consuming call of javax.el.ImportHandler.resolveClass() for \"teaserLarge\". and it seems that the bugfix for #57583 does not help in this situation because each teaser is rendered in its own pagecontext.\n \ninterestingly this does not occur if we access the optional attributes via the requestScope. when we use\n\n<c:when test=\"${requestScope.teaserLarge}\">\n\nthe performance in the undefined case is much better. we now are in process of rewriting our statements to requestScope, but i think that the performance of the scopeless access should also be fixed.\n\nregards \nmarc"}, {"count": 1, "tags": [], "bug_id": 57773, "attachment_id": null, "id": 182192, "creation_time": "2015-03-31T10:24:25Z", "time": "2015-03-31T10:24:25Z", "creator": "markt@apache.org", "text": "I don't think there is anything we can do about this.\n\nSupporting EL 3.0 means JSP 3.0 has to check the identifier to see if it is an imported class or field. Class lookups are slow - largely due to the ClassNotFoundException that is triggered when it fails.\n\nWe can avoid the CNFE by looking up the InputStream for the class rather than trying to load the class. On the plus side this makes lookups when the identifier is not a class ~4 times faster. The downside is it makes valid lookups ~25% slower. I don't think this is a viable option.\n\nI've added some information to the Tomcat 8 migration guide to explain this issue and to recommend the work-around you are already applying.\n\nWe could add a Tomcat specific option to skip the class/field lookup in the ScopedAttributeELResolver. I'm not a fan of this because:\n- it would be Tomcat specific\n- it would have to be a system property since this is a spec class\n- it could not be applied per application - it would impact all applications running on that instance\n\nIt this turns out to affect large numbers of users then the Tomcat specific option is probably the answer but for now this is WONTFIX.", "is_private": false}, {"count": 2, "tags": [], "bug_id": 57773, "attachment_id": null, "id": 182194, "time": "2015-03-31T12:31:32Z", "creator": "chris@christopherschultz.net", "creation_time": "2015-03-31T12:31:32Z", "is_private": false, "text": "I'm sorry, I haven't looked at the code for this, but ...\n\nAre we caching class-lookup failures? If not, could we cache them for a short period of time? Maybe as long as 5 seconds or so? That would certainly improve performance quite a bit for this use-case."}, {"count": 3, "tags": [], "creator": "donnchadh@gmail.com", "text": "I'm seeing a dramatic dramatic impact due to this (in conjunction with the global lock on WebAppClassLoader).", "id": 182863, "time": "2015-05-06T21:14:59Z", "bug_id": 57773, "creation_time": "2015-05-06T21:14:59Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 57773, "attachment_id": null, "id": 185000, "creation_time": "2015-09-07T10:12:23Z", "time": "2015-09-07T10:12:23Z", "creator": "markt@apache.org", "text": "*** Bug 58328 has been marked as a duplicate of this bug. ***", "is_private": false}, {"count": 5, "tags": [], "bug_id": 57773, "attachment_id": null, "text": "Hi @markt and @donnchadh,\n\nHow about introducing a whitelist filter attribute in context configuration? e.g, elStaticAccessFilter=\"^[a-z].*$\".\n\nLike containerSciFilter attribute, it can be set to a regular expression specifying which static access expression should be filtered out in class lookup step.\n\nConsidering the concerns (spec not giving enough choices, caching approach is too impactful, etc.), this solution might be effective in practice, avoiding potential issues.\n\nWhen upgrading to tomcat8, people should validate/update a lot of JSP files or meet a big performance degrade as reported here.\nTo avoid this costly situation or performance issue, if we support that simple static accessor filter attribute in context configuration, most issues should be covered I believe.\nPeople tend to use attribute name in camel case, and static access expression should be in pascal case in most cases. So the filter expression above could solve problems in most cases if set optionally by the users.\n\nKind regards,\n\nWoonsan", "id": 186437, "time": "2015-11-18T18:25:11Z", "creator": "woonsan@apache.org", "creation_time": "2015-11-18T18:25:11Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 57773, "attachment_id": null, "text": "It should be a \"filter\", not \"whitelist\" above.", "id": 186438, "time": "2015-11-18T18:27:13Z", "creator": "woonsan@apache.org", "creation_time": "2015-11-18T18:27:13Z", "is_private": false}, {"count": 7, "tags": [], "bug_id": 57773, "attachment_id": null, "text": "(In reply to Woonsan Ko from comment #5)\n> How about introducing a whitelist filter attribute in context configuration?\n> e.g, elStaticAccessFilter=\"^[a-z].*$\".\n\nThere is no easy way to configure this since the problematic code is in a specification defined class and we can not change the API.\n\nIt might be possible to (ab)use the ELContext.putContext() method to set some special value but even then we'd have to make sure every ELContext created had the special value set on it.", "id": 186444, "time": "2015-11-19T14:46:50Z", "creator": "markt@apache.org", "creation_time": "2015-11-19T14:46:50Z", "is_private": false}, {"count": 8, "tags": [], "bug_id": 57773, "attachment_id": null, "text": "This issue hit us quite hard when trying to upgrade from 8.0.15. An optional attribute in a very frequently used tag caused performance to drop massively  (especially combined with the default non-parallel WebappClassLoader).\n\nEven though I finally found the root of the problem, it seems very hard to contain. Any developer could easily trigger the issue, and might decrease performance slowly one step at a time, without even noticing, yet causing a massive performance hit in the long run.\n\nI understand that the situation is tricky due to spec requirements, but any solution to make this behaviour more controllable would be most welcome.", "id": 188518, "time": "2016-02-17T18:51:49Z", "creator": "apache@nospam.obeliks.de", "creation_time": "2016-02-17T18:51:49Z", "is_private": false}, {"count": 9, "tags": [], "creator": "woonsan@apache.org", "attachment_id": null, "id": 188520, "time": "2016-02-17T20:20:13Z", "bug_id": 57773, "creation_time": "2016-02-17T20:20:13Z", "is_private": false, "text": "(In reply to Mark Thomas from comment #7)\n> There is no easy way to configure this since the problematic code is in a\n> specification defined class and we can not change the API.\n> \n> It might be possible to (ab)use the ELContext.putContext() method to set\n> some special value but even then we'd have to make sure every ELContext\n> created had the special value set on it.\n\nMaybe we can introduce a servlet context event listener which can be enabled in conf/web.xml like JspServlet.\nThe listener may retrieve javax.servlet.jsp.JspApplicationContext (JspFactory.getDefaultFactory().getJspApplicationContext(servletContext)) and can probably register an ELContextListener. Then we will probably have a chance to put some special value on every ELContext."}, {"count": 10, "tags": [], "bug_id": 57773, "attachment_id": null, "text": "This is fixed in a related issue https://bz.apache.org/bugzilla/show_bug.cgi?id=57583", "id": 190038, "time": "2016-04-07T07:10:44Z", "creator": "balusc@gmail.com", "creation_time": "2016-04-07T07:10:44Z", "is_private": false}, {"count": 11, "tags": [], "creator": "woonsan@apache.org", "attachment_id": null, "id": 190045, "time": "2016-04-07T13:52:33Z", "bug_id": 57773, "creation_time": "2016-04-07T13:52:33Z", "is_private": false, "text": "Hooray! Thanks a lot!"}]
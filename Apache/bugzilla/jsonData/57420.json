[{"count": 0, "tags": [], "bug_id": 57420, "attachment_id": null, "text": "We've been debugging this for a long time. Sometimes when tomcat starts up, it will fail to deploy a webapp since it cannot find a certain class. That class name is always complete garbage.\n\nThe error stack trace always is:\nSEVERE: Unable to process resource element [jndi:/localhost/testapp/WEB-INF/classes/ch/blabli/dNlewrP.lculgiansDisalog$3.class] for annotations\njava.io.FileNotFoundException: jndi:/localhost/testapp/WEB-INF/classes/ch/blabli/dNlewrP.lculgiansDisalog$3.class\n        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)\n\nFrom time to time we see, that the referenced class name is actually a mix of the real class name and one or more other classes that exist in the vicinity of that class.\n\nFinally I was able to catch this exception with the debugger.\nWhat I see is that the problem stems from rg.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986):\n- dcUrlConn (DirContextURLConnection) contains the correct entries of the WAR file\n- Enumeration<String> dirs = dcUrlConn.list()  however does not. Calling list() again from the debugger yields the correct results.\n\nHere's the contents of that dirs variable:\n\n[lCsosn, oCrAopnpfliigcEadtiitoonr$AEpdpiltiocraMtoidoen.$c2l.acslsass, , tCioonnfi$gu4r.aticolnaLsosad, liconaftgiuroatni$o5n.LocadlLaisstsen, cCaotnifiognur$a6.clastsi, lCaonsfsig, s, cluaiss, CwoindgfetisegtEditorApplication$9.class, ConfigEditorApplication$ApplicationConfigLoadListener.class, ConfigEditorApplication$ConfigEditorToParameterHandlerIntegration.class, ConfigEditorApplication$EditorMode$1.class, ConfigEditorApplication$EditorMode$2.class, ConfigEditorApplication$EditorMode.class, ConfigEditorApplication.class, ConfigLoader$1.class, ConfigLoader.class, ConfigurationLoadListener$ConfigType.class, ConfigurationLoadListener$ConfigurationLoadedEvent.class, ConfigurationLoadListener$FailedToLoadConfigurationEvent.class, ConfigurationLoadListener.class, command, data, field, rendering, session, ui, util, widgetset]\n\nwalking into the list() command leads to collection.list(\"/\") which in turn is encoded using an URL_ENCODER (class UEncoder). This URL_ENCODER is *not* thread safe and can result in exactly such garbage if used concurrently.\n\nIt is interesting to note that every single failure we had at this step was always caused by classes in the WEB-INF/classes directory, never in JAR files in WEB-INF/lib.\n\nTo me it appears that there are two different DirContextURLConnections with rare concurrency issues when both use the same URL_ENCODER.\n\nHere's the full stacktrace when the error occurs:\n        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)\n        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)\n        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)\n        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)\n        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)\n\nJan 06, 2015 3:43:44 PM org.apache.catalina.startup.ContextConfig processAnnotationsJndi\nSEVERE: Unable to process resource element [jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/TeerstRelgeaxsDialog.class] for annotations\njava.io.FileNotFoundException: jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/TeerstRelgeaxsDialog.class\n        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)\n        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)\n        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)\n        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)\n        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)\n\nJan 06, 2015 3:43:44 PM org.apache.catalina.startup.ContextConfig processAnnotationsJndi\nSEVERE: Unable to process resource element [jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/aTsesxtAreaDialog$2.class] for annotations\njava.io.FileNotFoundException: jndi:/localhost/medusa-config-editor-5.48.0/WEB-INF/classes/ch/ergon/medusa/configeditor/ui/dialog/aTsesxtAreaDialog$2.class\n        at org.apache.naming.resources.DirContextURLConnection.getInputStream(DirContextURLConnection.java:389)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1994)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(ContextConfig.java:1986)\n        at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1902)\n        at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1298)\n        at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:876)\n        at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:374)\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)\n        at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)\n        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5378)\n        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)\n        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:1083)\n        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1880)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)", "id": 180194, "time": "2015-01-06T19:53:53Z", "creator": "matthias.keller@ergon.ch", "creation_time": "2015-01-06T19:53:53Z", "is_private": false}, {"count": 1, "tags": [], "creator": "felix.schumacher@internetallee.de", "text": "Could you tell us, how you are starting the application?\n\nFor example: Is it inside eclipse, as a war, ...? Are you using parallel startup with the startStopThreads parameter in Host? Do you use virtualWebappLoader?", "id": 180335, "time": "2015-01-17T13:20:49Z", "bug_id": 57420, "creation_time": "2015-01-17T13:20:49Z", "is_private": false, "attachment_id": null}, {"count": 2, "tags": [], "bug_id": 57420, "attachment_id": null, "text": "We're starting it from command line using \"catalina run\". The scenario I was able to (sometimes) reproduce the problem hat two WAR files with lots of classes inside the WEB-INF/classes directory. One thing that could also make a difference is, that the classes of the two WAR files are very similar, 95% (or more) are the same or have at least the same class names.\n\nThe parameters used are startStopThreads=\"0\" (= parallel), we're not using a virtualWebappLoader.", "id": 180354, "time": "2015-01-18T13:01:55Z", "creator": "matthias.keller@ergon.ch", "creation_time": "2015-01-18T13:01:55Z", "is_private": false}, {"count": 3, "tags": [], "bug_id": 57420, "attachment_id": 32378, "text": "Created attachment 32378\nPatch\n\nHi,\n\nWhat do you think if we switch to UEncoder/UDecoder as regular fields of the class? (see attachment)\n\nRegards,\nVioleta", "id": 180376, "time": "2015-01-19T12:22:19Z", "creator": "violetagg@apache.org", "creation_time": "2015-01-19T12:22:19Z", "is_private": false}, {"count": 4, "tags": [], "creator": "knst.kolinko@gmail.com", "text": "1) As far as I see, UDecoder does not have any fields and thus is thread-safe.\n\nThe thread safety is not documented, though.\n\nAs such, I do not mind creating an instance of UDecoder, as that feels safer.\n\nA possible way to solve documentation issue is to add getInstance() factory methods to UEncoder, UDecoder. For decoder the method would return a singleton (thus \"documenting\" the thread safety), while for encoder it will always return a new instance.\n\n2) Both encoder and decoder are usually used only once per connection.\n\nThus I think it would be better to use local variables, creating the objects just before use, instead of caching them in class fields.\n\nUDecoder is used in connect(). That call happens once.\n\nUEncoder is used in list(). While it is possible to call list() multiple times, I think that in practice it is called only once.", "id": 180378, "time": "2015-01-19T12:56:21Z", "bug_id": 57420, "creation_time": "2015-01-19T12:56:21Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "creator": "felix.schumacher@internetallee.de", "text": "I came up with the same patch as Violeta and it fixes the reported problem (unpackWARs has to be set to false, if you want to reproduce it and of course it helps if some sleep statements are inserted into the encoder methods).\n\nI agree, that it would be nicer to use the UDecoder/UEncoder as local variables. I don't think that we should introduce getInstance methods for tomcat7 only.", "id": 180396, "time": "2015-01-19T18:33:52Z", "bug_id": 57420, "creation_time": "2015-01-19T18:33:52Z", "is_private": false, "attachment_id": null}, {"count": 6, "tags": [], "creator": "violetagg@apache.org", "text": "(In reply to Konstantin Kolinko from comment #4)\n> 1) As far as I see, UDecoder does not have any fields and thus is\n> thread-safe.\n> \n> The thread safety is not documented, though.\n> \n> As such, I do not mind creating an instance of UDecoder, as that feels safer.\n> \n> A possible way to solve documentation issue is to add getInstance() factory\n> methods to UEncoder, UDecoder. For decoder the method would return a\n> singleton (thus \"documenting\" the thread safety), while for encoder it will\n> always return a new instance.\n> \n> 2) Both encoder and decoder are usually used only once per connection.\n> \n> Thus I think it would be better to use local variables, creating the objects\n> just before use, instead of caching them in class fields.\n> \n> UDecoder is used in connect(). That call happens once.\n\n+1 for creating it as a local variable\n\n> UEncoder is used in list(). While it is possible to call list() multiple\n> times, I think that in practice it is called only once.\n\nlist() is called many times by org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(URL, WebXml, boolean)\n\nAs we add a save char to UEncoder I do not think that it will be OK to do this every time when list() is called.\n\nWdyt?", "id": 180407, "time": "2015-01-20T07:49:37Z", "bug_id": 57420, "creation_time": "2015-01-20T07:49:37Z", "is_private": false, "attachment_id": null}, {"count": 7, "tags": [], "bug_id": 57420, "attachment_id": null, "text": "(In reply to Violeta Georgieva from comment #6)\n> (In reply to Konstantin Kolinko from comment #4)\n> \n> > UEncoder is used in list(). While it is possible to call list() multiple\n> > times, I think that in practice it is called only once.\n> \n> list() is called many times by\n> org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(URL,\n> WebXml, boolean)\n> \n> As we add a save char to UEncoder I do not think that it will be OK to do\n> this every time when list() is called.\n> \n> Wdyt?\n\nAs far as I see, it opens a new DirContextURLConnection each time. While the method is called many times, a connection is not reused. Thus a class-level field provides no benefit.\n\nIt should be possible to initialize UEncoder.safeChars bitset once and share the same bitset between UEncoders.  It will save us some time and memory.\n\nA single UEncoder.addSafeCharacter() call does not matter much, but UEncoder().initSafeChars() that adds around 60 characters does matter.", "id": 180409, "time": "2015-01-20T08:19:22Z", "creator": "knst.kolinko@gmail.com", "creation_time": "2015-01-20T08:19:22Z", "is_private": false}, {"count": 8, "tags": [], "creator": "felix.schumacher@internetallee.de", "attachment_id": null, "id": 180411, "time": "2015-01-20T08:36:19Z", "bug_id": 57420, "creation_time": "2015-01-20T08:36:19Z", "is_private": false, "text": "What if we add another constructor which sets the bitset to use (or add a method to set it)? Or make the initial bitset static and clone that on construction?"}, {"count": 9, "tags": [], "creator": "felix.schumacher@internetallee.de", "attachment_id": 32382, "id": 180423, "time": "2015-01-20T21:00:14Z", "bug_id": 57420, "creation_time": "2015-01-20T21:00:14Z", "is_private": false, "text": "Created attachment 32382\nMake UEncoder a local variable and introduce a default safe charset enum\n\nThis patch uses a local variable for the UEncoder in DirContextURLConnection and enables the safeChars in UEncoder to be immutable.\n\nThat way all Response and DirContextURLConnection instances can share one safeChars BitSet while having their own UEncoder instance which remains unsafe for multithreaded usage."}, {"count": 10, "tags": [], "text": "(In reply to Konstantin Kolinko from comment #7)\n> (In reply to Violeta Georgieva from comment #6)\n> > (In reply to Konstantin Kolinko from comment #4)\n> > \n> > > UEncoder is used in list(). While it is possible to call list() multiple\n> > > times, I think that in practice it is called only once.\n> > \n> > list() is called many times by\n> > org.apache.catalina.startup.ContextConfig.processAnnotationsJndi(URL,\n> > WebXml, boolean)\n> > \n> > As we add a save char to UEncoder I do not think that it will be OK to do\n> > this every time when list() is called.\n> > \n> > Wdyt?\n> \n> As far as I see, it opens a new DirContextURLConnection each time. While the\n> method is called many times, a connection is not reused. Thus a class-level\n> field provides no benefit.\n> \nYou are right - +1", "attachment_id": null, "id": 180437, "creation_time": "2015-01-21T13:29:01Z", "time": "2015-01-21T13:29:01Z", "creator": "violetagg@apache.org", "bug_id": 57420, "is_private": false}, {"count": 11, "tags": [], "bug_id": 57420, "attachment_id": null, "text": "(In reply to Felix Schumacher from comment #9)\n> Created attachment 32382 [details]\n> Make UEncoder a local variable and introduce a default safe charset enum\n> \n> This patch uses a local variable for the UEncoder in DirContextURLConnection\n> and enables the safeChars in UEncoder to be immutable.\n> \n> That way all Response and DirContextURLConnection instances can share one\n> safeChars BitSet while having their own UEncoder instance which remains\n> unsafe for multithreaded usage.\n\n+1", "id": 180438, "time": "2015-01-21T13:29:47Z", "creator": "violetagg@apache.org", "creation_time": "2015-01-21T13:29:47Z", "is_private": false}, {"count": 12, "tags": [], "creator": "felix.schumacher@internetallee.de", "attachment_id": null, "id": 180490, "time": "2015-01-22T20:57:48Z", "bug_id": 57420, "creation_time": "2015-01-22T20:57:48Z", "is_private": false, "text": "This fix has been applied to tomcat7.0.x (for 7.0.58 and onwards)\n\nThanks for the nice debugging work."}]
[{"count": 0, "text": "It seems that HSSFWorkbook's write(OutputStream) method is dependent on garbage collection to close the NPOIFSFileSystem which is created in HSSFWorkbook line 1376 (POI v. 3.13).\n\nWe have an application where we first write the workbook to a byte-array and then we copy that byte-array back to the original file location. Our copy function will fail with FileNotFoundException \"The process cannot access the file because it is being used by another process.\"\n\nWhat we finally discovered as a workaround for us is to call System.gc(), System.runFinalization() and then Thread.sleep(1000) just after the Workbook.write(..) call. But obviously this is a very silly way for us to work around the issue.\n\nThe solution is quite simple: Create a try-finally block for the NPOIFSFileSystem and make sure to close it in the finally-block.", "bug_id": 58480, "is_private": false, "id": 185627, "time": "2015-10-05T10:09:16Z", "creator": "i.am.kasper.sorensen@gmail.com", "creation_time": "2015-10-05T10:09:16Z", "tags": [], "attachment_id": null}, {"count": 1, "text": "Created attachment 33166\nMy proposed patch\n\nAdds a try-finally construct with fs.close() in the finally block.", "bug_id": 58480, "is_private": false, "id": 185633, "time": "2015-10-05T18:14:52Z", "creator": "i.am.kasper.sorensen@gmail.com", "creation_time": "2015-10-05T18:14:52Z", "tags": [], "attachment_id": 33166}, {"count": 2, "tags": [], "bug_id": 58480, "is_private": false, "id": 185634, "attachment_id": null, "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-05T19:18:12Z", "time": "2015-10-05T19:18:12Z", "text": "Did you try to close() the OutputStream that you pass to write() afterwards? At least that is what unit tests do which run and where we ensure via file-leak-detector that they do not leave file-resources behind."}, {"count": 3, "tags": [], "creator": "i.am.kasper.sorensen@gmail.com", "text": "That's not the problem IMO. I am closing the stream.\n\nPlease see this test case that I just built to reproduce the issue on current trunk:\n\n------------\n\npackage org.apache.poi.hssf.usermodel;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\nimport org.junit.Test;\n\npublic class HSSFWorkbookTest {\n\n    @Test\n    public void testWriteScenario() throws Exception {\n        final File file = new File(\n                \"build/HSSFWorkbookTest-testWriteScenario.xls\");\n\n        // create new workbook\n        {\n            final Workbook workbook = new HSSFWorkbook();\n            final Sheet sheet = workbook.createSheet(\"foo\");\n            final Row row = sheet.createRow(1);\n            row.createCell(1).setCellValue(\"bar\");\n            \n            writeAndCloseWorkbook(workbook, file);\n        }\n\n        // edit the workbook\n        {\n            final Workbook workbook = WorkbookFactory.create(file);\n            final Sheet sheet = workbook.getSheet(\"foo\");\n            sheet.getRow(1).createCell(2).setCellValue(\"baz\");\n            \n            writeAndCloseWorkbook(workbook, file);\n        }\n    }\n\n    private void writeAndCloseWorkbook(Workbook workbook, File file)\n            throws IOException {\n        final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n        workbook.write(bytesOut);\n        workbook.close();\n\n        final byte[] byteArray = bytesOut.toByteArray();\n        bytesOut.close();\n\n        final FileOutputStream fileOut = new FileOutputStream(file);\n        fileOut.write(byteArray);\n        fileOut.close();\n\n    }\n}", "id": 185657, "time": "2015-10-06T12:26:55Z", "bug_id": 58480, "creation_time": "2015-10-06T12:26:55Z", "is_private": false, "attachment_id": null}, {"count": 4, "tags": [], "bug_id": 58480, "is_private": false, "text": "Actually... That test still fails even after applying my patch. So the patch is invalidated I guess, but the problem remains. How can we figure out what is keeping a \"user-mapped section open\" on the file?", "id": 185658, "time": "2015-10-06T12:29:55Z", "creator": "i.am.kasper.sorensen@gmail.com", "creation_time": "2015-10-06T12:29:55Z", "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 58480, "attachment_id": null, "is_private": false, "id": 185662, "time": "2015-10-06T15:17:28Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-06T15:17:28Z", "text": "I usually use http://file-leak-detector.kohsuke.org , which can show via a stacktrace and filename which files remain open if you run your test with it."}, {"count": 6, "attachment_id": null, "bug_id": 58480, "text": "BTW, file-leak-detector does not show any file remaining open if I run the test-code that you posted. I also verified by looking at open file-handles in Linux that there are none remaining after the close() is executed.\n\nAre you sure you are not holding onto the file elsewhere?", "id": 185664, "time": "2015-10-06T18:14:13Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-06T18:14:13Z", "tags": [], "is_private": false}, {"count": 7, "text": "The issue only happens on Windows. I also didn't experience it on Linux.\n\nI'm not holding on to the file - it's created by the test.", "bug_id": 58480, "is_private": false, "id": 185670, "time": "2015-10-06T20:52:41Z", "creator": "i.am.kasper.sorensen@gmail.com", "creation_time": "2015-10-06T20:52:41Z", "tags": [], "attachment_id": null}, {"count": 8, "tags": [], "bug_id": 58480, "is_private": false, "id": 185671, "attachment_id": null, "creator": "i.am.kasper.sorensen@gmail.com", "creation_time": "2015-10-06T20:58:17Z", "time": "2015-10-06T20:58:17Z", "text": "The crazy thing is that if I add:\n\n  System.gc();\n  System.runFinalization();\n  Thread.sleep(2000);\n\nJust after the Workbook.write(...) call, then it never happens! This tells me that _something_ must rely on garbage collection/finalization.\n\nI see that RandomAccessFile is used internally in POI, and I have little experience with that. Don't know if something could still be holding on to it?"}, {"count": 9, "attachment_id": 33175, "bug_id": 58480, "text": "Created attachment 33175\nOutput from run with File Leak Detector active (paths anonymized)\n\nReproduced on Windows 7. File Leak Detector seems to think everything is okay, but the OS/filesystem doesn't (I assume the \"The requested operation cannot be performed on a file with a user-mapped section open\" error message is coming from the OS).\n\nI'm pretty sure no Unix derivative would ever be mad about this. File locking is almost exclusively advisory.", "id": 185678, "time": "2015-10-07T09:42:53Z", "creator": "d@hp23c.dk", "creation_time": "2015-10-07T09:42:53Z", "tags": [], "is_private": false}, {"count": 10, "tags": [], "bug_id": 58480, "is_private": false, "text": "I guess we can go back to NEW with reproduce code and a confirmation.", "id": 185691, "time": "2015-10-07T18:23:46Z", "creator": "d@hp23c.dk", "creation_time": "2015-10-07T18:23:46Z", "attachment_id": null}, {"count": 11, "tags": [], "creator": "dominik.stadler@gmx.at", "text": "Created attachment 33176\nPatch which uses sun.nio stuff to free mapped resources\n\nHmm, file-leak-detector does not show any open file, also Process Explorer does not show the file being still opened for the process if I debug and stop before the place where it fails.\n\nFor me even if I do the close() of NPOIFSFileSystem as you suggest, I still get the error.\n\nIt seems we are creating Buffers during reading via NPOIFSFileSystem and these seem to hold on to resources even if the channel is closed.\n\nSome related discussion on Stackoverflow shows similar problems and lists some Java bugs involved as well, e.g. http://stackoverflow.com/questions/3602783/file-access-synchronized-on-java-object, http://stackoverflow.com/a/5036003/411846 and http://stackoverflow.com/a/9779181/411846 as well as http://bugs.java.com/view_bug.do?bug_id=4724038\n\nSo the problem seems to be that there is no clean way to free the mapped buffers!\n\nFinally I found that there is a DirectBuffer.cleaner.clean() method which seems to free resources that are still held by the ByteBuffer instances, however DirectBuffer is in package \"sun.nio\" so it is likely not a good idea to use it, especially as Oracle announced to ditch all these forbidden packages in Java 9. \n\nSee the attached patch for my current solution, not sure what we need to do make this a valid solution for POI itself.", "id": 185697, "time": "2015-10-08T08:19:14Z", "bug_id": 58480, "creation_time": "2015-10-08T08:19:14Z", "is_private": false, "attachment_id": 33176}, {"count": 12, "tags": [], "bug_id": 58480, "is_private": false, "text": "I have now implemented a work around for this problem. \n\nWe use reflection as DirectBuffer is in package sun.com and thus may be replaced with Java 9. \n\nSee r1708609", "id": 185755, "time": "2015-10-14T14:55:03Z", "creator": "dominik.stadler@gmx.at", "creation_time": "2015-10-14T14:55:03Z", "attachment_id": null}, {"count": 13, "tags": [], "creator": "i.am.kasper.sorensen@gmail.com", "text": "Great - thanks! :-)", "id": 185756, "time": "2015-10-14T16:57:50Z", "bug_id": 58480, "creation_time": "2015-10-14T16:57:50Z", "is_private": false, "attachment_id": null}]
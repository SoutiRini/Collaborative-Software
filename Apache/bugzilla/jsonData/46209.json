[{"count": 0, "tags": [], "text": "I ran Findbugs 1.3.6 on Tomcat-Pool; the results are attached.", "is_private": false, "id": 122459, "creator": "sebb@apache.org", "time": "2008-11-14T02:26:05Z", "bug_id": 46209, "creation_time": "2008-11-14T02:26:05Z", "attachment_id": null}, {"count": 1, "tags": [], "bug_id": 46209, "text": "Created attachment 22868\nFindbugs analysis", "id": 122460, "attachment_id": 22868, "creator": "sebb@apache.org", "creation_time": "2008-11-14T02:27:37Z", "time": "2008-11-14T02:27:37Z", "is_private": false}, {"count": 2, "tags": [], "creator": "sebb@apache.org", "text": "Created attachment 22869\nEclipse warnings report", "id": 122461, "time": "2008-11-14T02:46:01Z", "bug_id": 46209, "creation_time": "2008-11-14T02:46:01Z", "is_private": false, "attachment_id": 22869}, {"count": 3, "tags": [], "text": "Created attachment 22870\nFindbugs analysis from Eclipse (easier to read?)", "is_private": false, "id": 122462, "creation_time": "2008-11-14T03:12:51Z", "time": "2008-11-14T03:12:51Z", "creator": "sebb@apache.org", "bug_id": 46209, "attachment_id": 22870}, {"count": 4, "tags": [], "bug_id": 46209, "text": "There are quite a few cases of class variables that are not final, even though they are set in the constructor and not actually changed thereafter.\n\nFor example, \nConnectionPool:pool\nFairBlockingQueue:lock, items, waiters\n\nWherever possible, variables should be made final to ensure thread-safety.\n\nThere are some variables that are protected, even though there is already an access method for them.\n\nFor example, DataSourceProxy:driver\nIn this case, the variable should definitely be private, as access needs to be synchronized.\n\nPooledConnection:counter is volatile, presumably instead of synchronising it.\nHowever, volatile does not protect against the read-modify-write involved in processing the counter++ statement.\nSame applies to PoolProperties:poolCounter\nAlso, both of these are protected. I think they should be final.\n\nIt would be useful to use Javadoc to state the class thread-safety or otherwise, and to add details of how fields are synchronised, e.g. using the @GuardedBy annotation.\n\nIt's confusing to have aliases such as:\nfinal ReentrantLock lock = FairBlockingQueue.this.lock;\nwhen the code works just the same without.\n\nSome source files still have the following copyright:\nCopyright: Copyright (c) 2008 Filip Hanik", "id": 122464, "time": "2008-11-14T04:04:13Z", "creator": "sebb@apache.org", "creation_time": "2008-11-14T04:04:13Z", "is_private": false, "attachment_id": null}, {"count": 5, "tags": [], "bug_id": 46209, "text": ">H C IL: There is an apparent infinite recursive loop in org.apache.tomcat.jdbc.pool.DataSourceProxy.setMinIdle(int)\nFixed before the report was filed.\n\n>H V MS: org.apache.tomcat.jdbc.pool.ConnectionPool.log isn't final but should be\nNot an issue\n\n>H V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory.log isn't final but should be\nNot an issue\n\n>H V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory$DataSourceHandler.methods isn't final but should be\nNot an issue\n\n>H V MS: org.apache.tomcat.jdbc.pool.DataSourceProxy.log isn't final but should be\nNot an issue\n\n>H V MS: org.apache.tomcat.jdbc.pool.Driver.pooltable isn't final but should be\nNot an issue\n\n>H V MS: org.apache.tomcat.jdbc.pool.PooledConnection.log isn't final but should be\nNot an issue\n\n>M B ES: Comparison of String objects using == or != in org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(Object, Method, Object[]) \nClasses, methods, and fields, whether referenced from Java Virtual Machine instructions or from other constant pool entries, are named using the constant pool.Relies on the method name being stored in the constant pool, it'd be interesting to see if that actually wasn't the case.\nThe spec says \"Classes, methods, and fields, whether referenced from Java Virtual Machine instructions or from other constant pool entries, are named using the constant pool.\"\n\n\n>M B ES: Comparison of String objects using == or != in org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.process(String[], Method, boolean) \nClasses, methods, and fields, whether referenced from Java Virtual Machine instructions or from other constant pool entries, are named using the constant pool.Relies on the method name being stored in the constant pool, it'd be interesting to see if that actually wasn't the case.\nThe spec says \"Classes, methods, and fields, whether referenced from Java Virtual Machine instructions or from other constant pool entries, are named using the constant pool.\"\n\n>M B It: org.apache.tomcat.jdbc.pool.FairBlockingQueue$FairIterator.next() can't throw NoSuchElementException\nNot an issue, although I dont even understand the bug reprot\n\n>M B Nm: The class name org.apache.tomcat.jdbc.pool.DataSource shadows the simple name of implemented interface javax.sql.DataSource\nNot an issue\n\n>M B Nm: The class name org.apache.tomcat.jdbc.pool.Driver shadows the simple name of implemented interface java.sql.Driver\nNot an issue\n\n>M D DLS: Dead store to exec in org.apache.tomcat.jdbc.pool.PooledConnection.validate(int, String)\nNot an issue\n\n>M D Dm: Call to unsupported method org.apache.tomcat.jdbc.pool.FairBlockingQueue.drainTo(Collection, int) in org.apache.tomcat.jdbc.pool.FairBlockingQueue.drainTo(Collection)\nNot an issue\n\n>M D NP: Load of known null value in org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection()\nNot an issue\n\n>M D REC: Exception is caught when Exception is not thrown in org.apache.tomcat.jdbc.pool.ConnectionPool.getConnection()\nOne would hope so :) not an issue\n\n>M M UL: org.apache.tomcat.jdbc.pool.FairBlockingQueue.poll(long, TimeUnit) does not release lock on all exception paths\n>M M UL: org.apache.tomcat.jdbc.pool.FairBlockingQueue.poll(long, TimeUnit) does not release lock on all exception paths\nI'd have to challenge that\n\n>M P SIC: Should org.apache.tomcat.jdbc.pool.ConnectionPool$PoolCleaner be a _static_ inner class?\nNot an issue\n\n>M V EI2: new org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport$StatementProxy(SlowQueryReport, Object, Object[]) may expose internal representation by storing an externally mutable object into SlowQueryReport$StatementProxy.args\nnot an issue\n\n>M V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory.ALL_PROPERTIES should be package protected\nNot an issue\n\n>M X OBL: Method org.apache.tomcat.jdbc.pool.PooledConnection.validate(int, String) may fail to clean up stream or resource of type java.sql.Statement\nNot an issue\n\n>There are quite a few cases of class variables that are not final, even though\n>they are set in the constructor and not actually changed thereafter.\nNot an issue\n\n>Wherever possible, variables should be made final to ensure thread-safety.\nIf there is a real bug, we would fix it.\n\n>There are some variables that are protected, even though there is already an\n>access method for them.\nNot an issue\n\n>For example, DataSourceProxy:driver\n>In this case, the variable should definitely be private, as access needs to be\n>synchronized.\nDont see an issue here either, however, I would switch \n\n>PooledConnection:counter is volatile, presumably instead of synchronising it.\n>However, volatile does not protect against the read-modify-write involved in\n>processing the counter++ statement.\nWill switch it to an atomic int, although it wont make a difference since the value is not used anywhere important in the code\n\n>Same applies to PoolProperties:poolCounter\nMade to atomic integer\n\n>Also, both of these are protected. I think they should be final.\nnot an issue\n\n>It would be useful to use Javadoc to state the class thread-safety or\n>otherwise, and to add details of how fields are synchronised, e.g. using the\n>@GuardedBy annotation.\nyes, that would be nice\n\n>It's confusing to have aliases such as:\n>final ReentrantLock lock = FairBlockingQueue.this.lock;\n>when the code works just the same without.\ncode practise, to ensure the global lock reference is not set to null. will not happen here, but but so goes for 90% of this report.\n\n>Some source files still have the following copyright:\n>Copyright: Copyright (c) 2008 Filip Hanik\nwill clean up\n\n\n", "id": 122482, "attachment_id": null, "creator": "fhanik@apache.org", "creation_time": "2008-11-14T07:12:23Z", "time": "2008-11-14T07:12:23Z", "is_private": false}, {"count": 6, "tags": [], "bug_id": 46209, "is_private": false, "id": 122495, "attachment_id": null, "creator": "sebb@apache.org", "creation_time": "2008-11-14T09:03:45Z", "time": "2008-11-14T09:03:45Z", "text": "(In reply to comment #5)\n> >H C IL: There is an apparent infinite recursive loop in org.apache.tomcat.jdbc.pool.DataSourceProxy.setMinIdle(int)\n> Fixed before the report was filed.\n\nOK.\n\n> >H V MS: org.apache.tomcat.jdbc.pool.ConnectionPool.log isn't final but should be\n> Not an issue\n\nBut why not fix it to avoid possible later problems?\nIf the variable is ever changed from a different thread then there will be potentially two versions active.\n \nAll variables should be locked down as far as possible, i.e. private and final.\nThis considerably reduces the chances of accidental modifications, and makes the code much easier to test, because there are fewer states for the code to occupy.\n\nIt's very difficult to reduce the visibility of items once code has been released. However should it prove necessary, visibility can be increased later - if it really proves necessary.\n\n> >H V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory.log isn't final but should be\n> Not an issue\n> \n> >H V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory$DataSourceHandler.methods isn't final but should be\n> Not an issue\n> \n> >H V MS: org.apache.tomcat.jdbc.pool.DataSourceProxy.log isn't final but should be\n> Not an issue\n> \n> >H V MS: org.apache.tomcat.jdbc.pool.Driver.pooltable isn't final but should be\n> Not an issue\n> \n> >H V MS: org.apache.tomcat.jdbc.pool.PooledConnection.log isn't final but should be\n> Not an issue\n> \n> >M B ES: Comparison of String objects using == or != in org.apache.tomcat.jdbc.pool.interceptor.ConnectionState.invoke(Object, Method, Object[]) \n> Classes, methods, and fields, whether referenced from Java Virtual Machine\n> instructions or from other constant pool entries, are named using the constant\n> pool.Relies on the method name being stored in the constant pool, it'd be\n> interesting to see if that actually wasn't the case.\n> The spec says \"Classes, methods, and fields, whether referenced from Java\n> Virtual Machine instructions or from other constant pool entries, are named\n> using the constant pool.\"\n\nNevertheless, why not do it safely?\n\n> \n> >M B ES: Comparison of String objects using == or != in org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport.process(String[], Method, boolean) \n> Classes, methods, and fields, whether referenced from Java Virtual Machine\n> instructions or from other constant pool entries, are named using the constant\n> pool.Relies on the method name being stored in the constant pool, it'd be\n> interesting to see if that actually wasn't the case.\n> The spec says \"Classes, methods, and fields, whether referenced from Java\n> Virtual Machine instructions or from other constant pool entries, are named\n> using the constant pool.\"\n> \n\nDitto.\n\n> >M B It: org.apache.tomcat.jdbc.pool.FairBlockingQueue$FairIterator.next() can't throw NoSuchElementException\n> Not an issue, although I dont even understand the bug reprot\n\nIt's probably because next() implements Iterator.next() which throws this.\n\nHowever, it can throw ArrayOutOfBounds which should probably be converted to NoSuchElement.\n\n> >M B Nm: The class name org.apache.tomcat.jdbc.pool.DataSource shadows the simple name of implemented interface javax.sql.DataSource\n> Not an issue\n\nIt's not a coding bug but it is a maintenance bug waiting to happen.\nNow is the time to fix this - before the first release.\n \n> >M B Nm: The class name org.apache.tomcat.jdbc.pool.Driver shadows the simple name of implemented interface java.sql.Driver\n> Not an issue\n\nDitto.\n \n> >M D DLS: Dead store to exec in org.apache.tomcat.jdbc.pool.PooledConnection.validate(int, String)\n> Not an issue\n\nNot a bug, but why store the response if you are not using it?\n \n> >M D Dm: Call to unsupported method org.apache.tomcat.jdbc.pool.FairBlockingQueue.drainTo(Collection, int) in org.apache.tomcat.jdbc.pool.FairBlockingQueue.drainTo(Collection)\n> Not an issue\n\nAgreed.\n\n> >M D NP: Load of known null value in org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection()\n> Not an issue\n\nTrue, but why pass con to createConnection() when that does not use it?\nWould it not be clearer to drop the con parameter?\n \n> >M D REC: Exception is caught when Exception is not thrown in org.apache.tomcat.jdbc.pool.ConnectionPool.getConnection()\n> One would hope so :) not an issue\n\nAgreed, but surely the original exception should be passed to the SQLException?\n\n> >M M UL: org.apache.tomcat.jdbc.pool.FairBlockingQueue.poll(long, TimeUnit) does not release lock on all exception paths\n> >M M UL: org.apache.tomcat.jdbc.pool.FairBlockingQueue.poll(long, TimeUnit) does not release lock on all exception paths\n> I'd have to challenge that\n\nLooks like the analyser was confused by the error flag, but it's not easy to follow.\n\n> >M P SIC: Should org.apache.tomcat.jdbc.pool.ConnectionPool$PoolCleaner be a _static_ inner class?\n> Not an issue\n\nIt's just a warning.\n\n> >M V EI2: new org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport$StatementProxy(SlowQueryReport, Object, Object[]) may expose internal representation by storing an externally mutable object into SlowQueryReport$StatementProxy.args\n> not an issue\n\nThis is a generic error; probably does not matter here, but for some ccode it could be extremely important.\n \n> >M V MS: org.apache.tomcat.jdbc.pool.DataSourceFactory.ALL_PROPERTIES should be package protected\n> Not an issue\n\nBut why not fix it?\n \n> >M X OBL: Method org.apache.tomcat.jdbc.pool.PooledConnection.validate(int, String) may fail to clean up stream or resource of type java.sql.Statement\n> Not an issue\n\nOn the contrary, it is a bug - if the execute() method throws an Exception, the statement won't be closed.\n\n> >There are quite a few cases of class variables that are not final, even though\n> >they are set in the constructor and not actually changed thereafter.\n> Not an issue\n> \n> >Wherever possible, variables should be made final to ensure thread-safety.\n> If there is a real bug, we would fix it.\n\nIf the classes are intended to be used by multiple threads, then there is an issue. It's rare, but it happens. The problem is caused by the memory model which allows values to be cached. Note that this was found to be a problem with java.lang.String, whose fields were made final in Java 1.5.\n\n> >There are some variables that are protected, even though there is already an\n> >access method for them.\n> Not an issue\n\nWhy allow uncontrolled access?\n\n> >For example, DataSourceProxy:driver\n> >In this case, the variable should definitely be private, as access needs to be\n> >synchronized.\n> Dont see an issue here either, however, I would switch \n>\n> >PooledConnection:counter is volatile, presumably instead of synchronising it.\n> >However, volatile does not protect against the read-modify-write involved in\n> >processing the counter++ statement.\n> Will switch it to an atomic int, although it wont make a difference since the\n> value is not used anywhere important in the code\n> \n> >Same applies to PoolProperties:poolCounter\n> Made to atomic integer\n> \n> >Also, both of these are protected. I think they should be final.\n> not an issue\n> \n> >It would be useful to use Javadoc to state the class thread-safety or\n> >otherwise, and to add details of how fields are synchronised, e.g. using the\n> >@GuardedBy annotation.\n> yes, that would be nice\n> \n> >It's confusing to have aliases such as:\n> >final ReentrantLock lock = FairBlockingQueue.this.lock;\n> >when the code works just the same without.\n> code practise, to ensure the global lock reference is not set to null. will not\n> happen here, but but so goes for 90% of this report.\n> \n> >Some source files still have the following copyright:\n> >Copyright: Copyright (c) 2008 Filip Hanik\n> will clean up\n> \n\n"}, {"count": 7, "tags": [], "bug_id": 46209, "text": "There is nothing concrete here, just theory and style preferences. not actual bugs. If you wish to engage in coding style discussions, bugzilla is not the right forum, it would be more proper to take that discussion to the dev list\n\n", "id": 122503, "time": "2008-11-14T12:49:44Z", "creator": "fhanik@apache.org", "creation_time": "2008-11-14T12:49:44Z", "is_private": false, "attachment_id": null}, {"count": 8, "attachment_id": null, "bug_id": 46209, "is_private": false, "id": 122504, "time": "2008-11-14T13:54:20Z", "creator": "sebb@apache.org", "creation_time": "2008-11-14T13:54:20Z", "tags": [], "text": "(In reply to comment #7)\n> There is nothing concrete here, just theory and style preferences. not actual\n> bugs. If you wish to engage in coding style discussions, bugzilla is not the\n> right forum, it would be more proper to take that discussion to the dev list\n> \n\nThere *are* still some concrete items which remain to be fixed.\n\n* M X OBL: Method org.apache.tomcat.jdbc.pool.PooledConnection.validate(int, String) may fail to clean up stream or resource of type java.sql.Statement\n\n==\n\n* M B It: org.apache.tomcat.jdbc.pool.FairBlockingQueue$FairIterator.next() can't throw NoSuchElementException\n\nHowever it can throw ArrayOutOfBounds, which should be detected - and probably converted to NoSuchElement.\n\n==\n\n* M D REC: Exception is caught when Exception is not thrown in org.apache.tomcat.jdbc.pool.ConnectionPool.getConnection()\n\nNot strictly a bug, but it makes debugging almost impossible if all Exceptions are converted into SQLException.\n\n==\n\nThe issues of thread-safety are not a matter of theory, they are a real consequence of the Java Memory Model. However explaining that is probably best left to the list.\n\n==\n\nI will take the other matters to the list.\n\n"}, {"count": 9, "attachment_id": null, "creator": "fhanik@apache.org", "is_private": false, "id": 122510, "time": "2008-11-14T20:06:46Z", "bug_id": 46209, "creation_time": "2008-11-14T20:06:46Z", "tags": [], "text": "I took the time, I read your concerns, and the status stand as wont fix.\nYou're not the only one who has read the JVM spec on memory model and synchronization, and concurrency. So when someone actually has an issue with static Log log = LogFactory.getLog\nwe will change it every, including tomcat core\n\nuntil then, this issue will be closed."}]